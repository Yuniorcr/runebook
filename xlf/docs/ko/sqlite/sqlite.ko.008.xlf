<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="sqlite">
    <body>
      <group id="sqlite">
        <trans-unit id="4297ce915073f569ab40d9b2eef2a6a433c9c771" translate="yes" xml:space="preserve">
          <source>Fix a long-standing bug in the byte-code engine that can cause a &lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt; command report as success when in fact it failed to commit. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/810dc8038872e212&quot;&gt;810dc8038872e212&lt;/a&gt;</source>
          <target state="translated">실제로 커밋에 실패했을 때 &lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt; 명령이 성공으로보고 되도록 할 수있는 바이트 코드 엔진의 오랜 버그를 수정합니다 . 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/810dc8038872e212&quot;&gt;810dc8038872e212&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1e421af2a92eeb75b68bc6dee75d2cded7fea49f" translate="yes" xml:space="preserve">
          <source>Fix a long-standing bug in the query planner that caused incorrect results on a LEFT JOIN where the left-hand table is a subquery and the join constraint is a bare column name coming from the left-hand subquery. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/2df0107b&quot;&gt;2df0107b&lt;/a&gt;.</source>
          <target state="translated">왼쪽 테이블이 하위 쿼리이고 조인 제약 조건이 왼쪽 하위 쿼리에서 나오는 기본 열 이름 인 LEFT JOIN에서 잘못된 결과를 초래 한 쿼리 플래너의 오랜 버그를 수정합니다. 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/2df0107b&quot;&gt;2df0107b&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5fd66bb0d12f0c4694325a08e38b8332a42b240a" translate="yes" xml:space="preserve">
          <source>Fix a long-standing bug in the storage engine that would (very rarely) cause a spurious report of an SQLITE_CORRUPT error but which was otherwise harmless. Ticket &lt;a href=&quot;http://www.sqlite.org/src/info/6bfb98dfc0c&quot;&gt;6bfb98dfc0c&lt;/a&gt;.</source>
          <target state="translated">스토리지 엔진에서 SQLITE_CORRUPT 오류에 대한 가짜 보고서를 생성하지만 (해당 치 않은) 무해한 오래된 버그를 수정하십시오. 티켓 &lt;a href=&quot;http://www.sqlite.org/src/info/6bfb98dfc0c&quot;&gt;6bfb98dfc0c&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="71423e6b2d68869ba9f90d3de52635f50c9c7337" translate="yes" xml:space="preserve">
          <source>Fix a long-standing problem in &lt;a href=&quot;c3ref/changes&quot;&gt;sqlite3_changes()&lt;/a&gt; for &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; tables that was reported a few hours after the 3.8.11 release.</source>
          <target state="translated">3.8.11 릴리스 후 몇 시간 동안보고 된 &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; 테이블에 대한 &lt;a href=&quot;c3ref/changes&quot;&gt;sqlite3_changes ()의&lt;/a&gt; 오랜 문제점을 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="29e8d63f91df6bbd58bdb3b0c96b08a128597488" translate="yes" xml:space="preserve">
          <source>Fix a long-standing problem wherein a corrupt schema on the &lt;a href=&quot;fileformat2#seqtab&quot;&gt;sqlite_sequence&lt;/a&gt; table used by &lt;a href=&quot;autoinc&quot;&gt;AUTOINCREMENT&lt;/a&gt; can lead to a crash. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/d8dc2b3a58cd5dc29&quot;&gt;d8dc2b3a58cd5dc2918a1&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;autoinc&quot;&gt;AUTOINCREMENT에서&lt;/a&gt; 사용 하는 &lt;a href=&quot;fileformat2#seqtab&quot;&gt;sqlite_sequence&lt;/a&gt; 테이블 의 손상된 스키마 가 충돌을 일으킬 수 있는 오랜 문제를 해결하십시오 . 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/d8dc2b3a58cd5dc29&quot;&gt;d8dc2b3a58cd5dc2918a1&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4d123dda0b40a993f6ee01005258efb1310831bb" translate="yes" xml:space="preserve">
          <source>Fix a memory allocation error in the new ADD COLUMN comment.</source>
          <target state="translated">새 ADD COLUMN 주석의 메모리 할당 오류를 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="557f85fef49a7d6b5ef7280b85eaabf9d86a9cbc" translate="yes" xml:space="preserve">
          <source>Fix a memory leak that can occur following a disk I/O error.</source>
          <target state="translated">디스크 I / O 오류 다음에 발생할 수있는 메모리 누수를 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="b2e50e850f4bad5e2b888790e4a27dda05de65d0" translate="yes" xml:space="preserve">
          <source>Fix a memory leak that can occur following a failure to open error in the &lt;a href=&quot;csv&quot;&gt;CSV virtual table&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;csv&quot;&gt;CSV 가상 테이블&lt;/a&gt; 에서 오류를 열지 못한 후 발생할 수있는 메모리 누수 수정</target>
        </trans-unit>
        <trans-unit id="08e2d33c27f7ca8760cc5e591fecb5972898df17" translate="yes" xml:space="preserve">
          <source>Fix a memory leak that occurred when sqlite_open() failed.</source>
          <target state="translated">sqlite_open ()이 실패했을 때 발생한 메모리 누수를 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="475ca6beba2ec99949495af6c237c0b95d23fba9" translate="yes" xml:space="preserve">
          <source>Fix a missing &quot;sync&quot; that when omitted could lead to database corruption if a power failure or OS crash occurred just as a ROLLBACK operation was finishing.</source>
          <target state="translated">누락 된 &quot;동기화&quot;를 수정하면 ROLLBACK 작업이 완료되는 동안 정전 또는 OS 충돌이 발생한 경우 데이터베이스가 손상 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd148f4d09fd6cc6bad30b19733a82972a2cebe0" translate="yes" xml:space="preserve">
          <source>Fix a naming conflict between sqlite.h and sqlite3.h.</source>
          <target state="translated">sqlite.h와 sqlite3.h 사이의 이름 충돌을 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="86cbab0ce9e871e04d98798d23ca791be9552d16" translate="yes" xml:space="preserve">
          <source>Fix a parser bug that prevented the use of parentheses around table-valued functions.</source>
          <target state="translated">테이블 반환 함수 주위에 괄호를 사용하지 못하게하는 파서 버그를 수정합니다.</target>
        </trans-unit>
        <trans-unit id="1ea82017fb31c1e817b4ca5fcdba2b68c62a7e38" translate="yes" xml:space="preserve">
          <source>Fix a performance bug in the pager cache, ticket #3844</source>
          <target state="translated">호출기 캐시, 티켓 # 3844의 성능 버그 수정</target>
        </trans-unit>
        <trans-unit id="0b4a31de7ab7e54e3e4f0e6dd796fb43aef54770" translate="yes" xml:space="preserve">
          <source>Fix a performance regression on LEFT JOIN (see ticket #3015) that was mistakenly introduced in &lt;a href=&quot;#version_3_5_8&quot;&gt;version 3.5.8&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#version_3_5_8&quot;&gt;버전 3.5.8&lt;/a&gt; 에서 실수로 도입 된 LEFT JOIN (티켓 # 3015 참조)의 성능 회귀를 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="51a1cd95a4c2ce3fd6ef13919dca1d81326877a9" translate="yes" xml:space="preserve">
          <source>Fix a performance regression related to the query planner enhancements of version 3.7.0.</source>
          <target state="translated">버전 3.7.0의 쿼리 플래너 향상과 관련된 성능 회귀를 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="59850e50fa6095504ef5b88efd743956885d3a6e" translate="yes" xml:space="preserve">
          <source>Fix a possible infinite loop on VACUUM for corrupt database files. Check-in &lt;a href=&quot;https://www.sqlite.org/src/info/27754b74ddf64&quot;&gt;27754b74ddf64&lt;/a&gt;</source>
          <target state="translated">손상된 데이터베이스 파일에 대해 VACUUM에서 가능한 무한 루프를 수정하십시오. 체크인 &lt;a href=&quot;https://www.sqlite.org/src/info/27754b74ddf64&quot;&gt;27754b74ddf64&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="16de14f899013ff24b7caea8ce7237c3023ffe3c" translate="yes" xml:space="preserve">
          <source>Fix a possible segfault with DELETE when table is a &lt;a href=&quot;rowidtable&quot;&gt;rowid table&lt;/a&gt; with an &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt; and the WHERE clause contains a OR and the table has one or more indexes that are able to trigger the OR optimization, but none of the indexes reference any table columns other than the INTEGER PRIMARY KEY. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/16c9801ceba49&quot;&gt;16c9801ceba49&lt;/a&gt;.</source>
          <target state="translated">테이블이있을 때 DELETE의 발생 가능한 세그먼트 폴트를 해결 &lt;a href=&quot;rowidtable&quot;&gt;ROWID 테이블&lt;/a&gt; 와 &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt; , 그리고 절에 OR을 포함하는 WHERE 테이블은 OR 최적화를 트리거 할 수있는 하나 개 이상의 인덱스가 있지만 인덱스 중 어느 것도 모든 테이블의 열을 참조하지 정수 기본 키 이외의 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/16c9801ceba49&quot;&gt;16c9801ceba49&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d502547575294f85b69c2db2bf60e7be17520a7d" translate="yes" xml:space="preserve">
          <source>Fix a potential 32-bit integer overflow problem in the &lt;a href=&quot;c3ref/blob_read&quot;&gt;sqlite3_blob_read()&lt;/a&gt; and &lt;a href=&quot;c3ref/blob_write&quot;&gt;sqlite3_blob_write()&lt;/a&gt; interfaces.</source>
          <target state="translated">&lt;a href=&quot;c3ref/blob_read&quot;&gt;sqlite3_blob_read ()&lt;/a&gt; 및 &lt;a href=&quot;c3ref/blob_write&quot;&gt;sqlite3_blob_write ()&lt;/a&gt; 인터페이스 에서 잠재적 인 32 비트 정수 오버 플로우 문제점을 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="86abca115efafefa4d8227ca90c204f72ac25973" translate="yes" xml:space="preserve">
          <source>Fix a potential buffer overread that could result when trying to search a corrupt database file.</source>
          <target state="translated">손상된 데이터베이스 파일을 검색 할 때 발생할 수있는 잠재적 버퍼 겹쳐 쓰기를 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="e6cf1ce475579b639fd9a6e590dcc754d75c144f" translate="yes" xml:space="preserve">
          <source>Fix a potential database corruption bug that can occur if version 3.7.0 and version 3.6.23.1 alternately write to the same database file. &lt;a href=&quot;http://www.sqlite.org/src/info/51ae9cad317a1&quot;&gt; Ticket [51ae9cad317a1]&lt;/a&gt;</source>
          <target state="translated">버전 3.7.0 및 버전 3.6.23.1이 동일한 데이터베이스 파일에 번갈아 쓸 경우 발생할 수있는 데이터베이스 손상 버그를 수정하십시오. &lt;a href=&quot;http://www.sqlite.org/src/info/51ae9cad317a1&quot;&gt;티켓 [51ae9cad317a1]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2326ddb13e351e1098f9d7af1605ec053a972e00" translate="yes" xml:space="preserve">
          <source>Fix a potential database corruption problem on Unix caused by the fact that all POSIX advisory locks are cleared whenever you close() a file. The work around it to embargo all close() calls while locks are outstanding.</source>
          <target state="translated">파일을 닫을 때마다 모든 POSIX 권고 잠금이 해제되어 유닉스에서 발생할 수있는 데이터베이스 손상 문제를 해결하십시오. 잠금이 눈에 띄는 동안 모든 close () 호출을 금지하는 문제를 해결했습니다.</target>
        </trans-unit>
        <trans-unit id="3c1404201cf0f45ed7d26fb3ee3e025fabad8654" translate="yes" xml:space="preserve">
          <source>Fix a potential integer overflow problem when compiling a particular horrendous common table expression. This was another problem discovered by OSSFuzz. Check-in &lt;a href=&quot;https://sqlite.org/src/info/6ee8cb6ae5&quot;&gt;6ee8cb6ae5&lt;/a&gt;.</source>
          <target state="translated">특정 끔찍한 공통 테이블 표현식을 컴파일 할 때 잠재적 인 정수 오버 플로우 문제점을 수정하십시오. 이것은 OSSFuzz에서 발견 한 또 다른 문제입니다. 체크인 &lt;a href=&quot;https://sqlite.org/src/info/6ee8cb6ae5&quot;&gt;6ee8cb6ae5&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fa021a738435d20102aefd6ba8aa9227f2196bfd" translate="yes" xml:space="preserve">
          <source>Fix a potential memory leak in &lt;a href=&quot;rowvalue&quot;&gt;row value&lt;/a&gt; processing. Check-in &lt;a href=&quot;https://www.sqlite.org/src/info/2df6bbf1b8ca8&quot;&gt;2df6bbf1b8ca8&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;rowvalue&quot;&gt;행 값&lt;/a&gt; 처리 에서 잠재적 인 메모리 누수를 수정하십시오 . 체크인 &lt;a href=&quot;https://www.sqlite.org/src/info/2df6bbf1b8ca8&quot;&gt;2df6bbf1b8ca8&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9d59a5b1204741917d207d0911c7f5b60cccb2e8" translate="yes" xml:space="preserve">
          <source>Fix a potential memory leak in the new &lt;a href=&quot;c3ref/result_blob&quot;&gt;sqlite3_result_pointer()&lt;/a&gt; interface. Ticket &lt;a href=&quot;https://sqlite.org/src/info/7486aa54b968e9b5&quot;&gt;7486aa54b968e9b5&lt;/a&gt;.</source>
          <target state="translated">새로운 &lt;a href=&quot;c3ref/result_blob&quot;&gt;sqlite3_result_pointer ()&lt;/a&gt; 인터페이스 에서 잠재적 인 메모리 누수를 수정하십시오 . 티켓 &lt;a href=&quot;https://sqlite.org/src/info/7486aa54b968e9b5&quot;&gt;7486aa54b968e9b5&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0c9b94c0ee4da7edac18db1b27719d5740439e09" translate="yes" xml:space="preserve">
          <source>Fix a potential out-of-bound read when querying a corrupt database file, a problem detected by Natalie Silvanovich of Google Project Zero. Check-in &lt;a href=&quot;https://sqlite.org/src/info/04925dee41a21f&quot;&gt;04925dee41a21f&lt;/a&gt;.</source>
          <target state="translated">Google Project Zero의 Natalie Silvanovich가 감지 한 손상된 데이터베이스 파일을 쿼리 할 때 잠재적 인 범위를 벗어난 읽기를 수정합니다. 체크인 &lt;a href=&quot;https://sqlite.org/src/info/04925dee41a21f&quot;&gt;04925dee41a21f&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="94450756c5f997edafdb983263e971e139725961" translate="yes" xml:space="preserve">
          <source>Fix a potential segfault in complex recursive triggers, resulting from a bug in the OP_Once opcode introduced as part of a performance optimization in version 3.15.0. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/06796225f59c057c&quot;&gt;06796225f59c057c&lt;/a&gt;</source>
          <target state="translated">버전 3.15.0의 성능 최적화의 일부로 도입 된 OP_Once opcode의 버그로 인해 복잡한 재귀 트리거에서 잠재적 segfault를 수정하십시오. 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/06796225f59c057c&quot;&gt;06796225f59c057c&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9c23851f526115afe862ef20f590dcfe854957d3" translate="yes" xml:space="preserve">
          <source>Fix a potential segfault when destroying locks on WinCE in a multi-threaded environment.</source>
          <target state="translated">다중 스레드 환경에서 WinCE의 잠금을 제거 할 때 잠재적 segfault를 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="c5254d73f95694f4312acfaaba5e2519c7f711c7" translate="yes" xml:space="preserve">
          <source>Fix a problem in &lt;a href=&quot;lang_replace&quot;&gt;REPLACE&lt;/a&gt; that can result in a corrupt database containing two or more rows with the same &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt;. Fix for ticket &lt;a href=&quot;https://www.sqlite.org/src/info/f68dc596c4e6018d&quot;&gt;f68dc596c4e6018d&lt;/a&gt;.</source>
          <target state="translated">동일한 &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid를&lt;/a&gt; 가진 두 개 이상의 행을 포함하는 데이터베이스가 손상 될 수 있는 &lt;a href=&quot;lang_replace&quot;&gt;REPLACE&lt;/a&gt; 의 문제점을 수정하십시오 . 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/f68dc596c4e6018d&quot;&gt;f68dc596c4e6018d에&lt;/a&gt; 대한 수정 .</target>
        </trans-unit>
        <trans-unit id="cce51ec3d9eafc83d9bef6eb168bd83fba551391" translate="yes" xml:space="preserve">
          <source>Fix a problem in &lt;a href=&quot;pragma#pragma_integrity_check&quot;&gt;PRAGMA integrity_check&lt;/a&gt; that was causing a subsequent &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; to behave suboptimally.</source>
          <target state="translated">후속 &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; 이 차선책으로 작동하게 하는 &lt;a href=&quot;pragma#pragma_integrity_check&quot;&gt;PRAGMA integrity_check&lt;/a&gt; 의 문제점을 수정 하십시오 .</target>
        </trans-unit>
        <trans-unit id="e2ab7efe53f641d1c01e53f622fc41a617719096" translate="yes" xml:space="preserve">
          <source>Fix a problem in CSV import in the &lt;a href=&quot;cli&quot;&gt;command-line shell&lt;/a&gt; where if the leftmost field of the first row in the CSV file was both zero bytes in size and unquoted no data would be imported.</source>
          <target state="translated">CSV 파일에서 첫 번째 행의 가장 왼쪽 필드의 크기가 모두 0 바이트이고 인용되지 않은 데이터를 가져 오지 않는 &lt;a href=&quot;cli&quot;&gt;명령 줄 셸&lt;/a&gt; 에서 CSV 가져 오기의 문제를 해결하십시오 .</target>
        </trans-unit>
        <trans-unit id="b8e5e51fd7781a4a270ea3403c1d91e18539fa5d" translate="yes" xml:space="preserve">
          <source>Fix a problem in FTS4 where the left-most column that contained the &lt;a href=&quot;fts3#fts4notindexed&quot;&gt;notindexed column&lt;/a&gt; name as a prefix was not indexed rather than the column whose name matched exactly.</source>
          <target state="translated">FTS4에서 색인화되지 않은 &lt;a href=&quot;fts3#fts4notindexed&quot;&gt;열&lt;/a&gt; 이름을 접두사로 포함하는 맨 왼쪽 열의 이름이 정확히 일치하는 열이 아닌 색인화되지 않은 문제를 해결하십시오 .</target>
        </trans-unit>
        <trans-unit id="ed16f1842283c33640adef4111628a226934ccb4" translate="yes" xml:space="preserve">
          <source>Fix a problem in the &lt;a href=&quot;c3ref/result_subtype&quot;&gt;sqlite3_result_subtype()&lt;/a&gt; interface that could cause problems for the &lt;a href=&quot;json1&quot;&gt;json1&lt;/a&gt; extension under obscure circumstances. Fix for ticket &lt;a href=&quot;https://www.sqlite.org/src/info/f45ac567eaa9f9&quot;&gt;f45ac567eaa9f9&lt;/a&gt;.</source>
          <target state="translated">의 문제를 해결 &lt;a href=&quot;c3ref/result_subtype&quot;&gt;sqlite3_result_subtype ()&lt;/a&gt; 에 문제가 발생할 수 인터페이스 &lt;a href=&quot;json1&quot;&gt;json1의&lt;/a&gt; 애매한 상황에서 확장. 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/f45ac567eaa9f9&quot;&gt;f45ac567eaa9f9&lt;/a&gt; 수정 .</target>
        </trans-unit>
        <trans-unit id="7871f6059f0a9d8ae6199f7ed5e914925c1946d3" translate="yes" xml:space="preserve">
          <source>Fix a problem in the query planner that results when a row-value expression is used with a PRIMARY KEY with redundant columns. Ticket &lt;a href=&quot;https://sqlite.org/src/info/1a84668dcfdebaf12415d&quot;&gt;1a84668dcfdebaf12415d&lt;/a&gt;</source>
          <target state="translated">중복 열이있는 PRIMARY KEY에 행 값 식을 사용할 때 발생하는 쿼리 플래너의 문제를 수정하십시오. 티켓 &lt;a href=&quot;https://sqlite.org/src/info/1a84668dcfdebaf12415d&quot;&gt;1a84668dcfdebaf12415d&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ee14ad300b53edffc750ba4ada032439baf8cf04" translate="yes" xml:space="preserve">
          <source>Fix a problem in the virtual table commit mechanism that was causing a crash in FTS3. Ticket #3497.</source>
          <target state="translated">FTS3에서 충돌을 일으킨 가상 테이블 커밋 메커니즘의 문제를 해결하십시오. 티켓 # 3497.</target>
        </trans-unit>
        <trans-unit id="367c86dcc3176132b397b28f7554be7148358015" translate="yes" xml:space="preserve">
          <source>Fix a problem that was causing excess memory usage with large &lt;a href=&quot;wal&quot;&gt;WAL&lt;/a&gt; transactions in win32 systems.</source>
          <target state="translated">win32 시스템에서 대규모 &lt;a href=&quot;wal&quot;&gt;WAL&lt;/a&gt; 트랜잭션으로 과도한 메모리 사용을 유발하는 문제를 해결하십시오 .</target>
        </trans-unit>
        <trans-unit id="e4c5c3190d6e5398a03cc1624a8ad085afe03197" translate="yes" xml:space="preserve">
          <source>Fix a problem that was causing poor performance when many thousands of SQL statements were executed by a single sqlite_exec() call.</source>
          <target state="translated">단일 sqlite_exec () 호출로 수천 개의 SQL 문을 실행할 때 성능이 저하되는 문제를 해결합니다.</target>
        </trans-unit>
        <trans-unit id="d6546ef65a68047eca9a74f928d58465048048f8" translate="yes" xml:space="preserve">
          <source>Fix a problem that will corrupt the database file if you drop a table from the main database that has a TEMP index.</source>
          <target state="translated">TEMP 인덱스가있는 기본 데이터베이스에서 테이블을 삭제하면 데이터베이스 파일이 손상되는 문제를 해결하십시오.</target>
        </trans-unit>
        <trans-unit id="6a895d74574faf7c3e5b7c17bfc4a1aebd1bd35a" translate="yes" xml:space="preserve">
          <source>Fix a problem that will corrupt the indices on a table if you do an INSERT OR REPLACE or an UPDATE OR REPLACE on a table that contains an INTEGER PRIMARY KEY plus one or more indices.</source>
          <target state="translated">INTEGER PRIMARY KEY와 하나 이상의 인덱스가 포함 된 테이블에서 INSERT OR REPLACE 또는 UPDATE OR REPLACE를 수행하면 테이블의 인덱스가 손상되는 문제를 해결하십시오.</target>
        </trans-unit>
        <trans-unit id="fa339d6b0d5c93a4f64854920f80fba0a5a92e67" translate="yes" xml:space="preserve">
          <source>Fix a problem where &lt;a href=&quot;pragma#pragma_count_changes&quot;&gt;PRAGMA count_changes&lt;/a&gt; was causing incorrect results for updates on tables with triggers</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_count_changes&quot;&gt;PRAGMA count_changes&lt;/a&gt; 로 인해 트리거가있는 테이블의 업데이트에 대해 잘못된 결과가 발생 하는 문제 수정</target>
        </trans-unit>
        <trans-unit id="2367f688e4ee0ae00d13a38bb5c62a10fab4c4f9" translate="yes" xml:space="preserve">
          <source>Fix a problem with 3-way joins that do not use indices</source>
          <target state="translated">인덱스를 사용하지 않는 3 방향 조인 문제 해결</target>
        </trans-unit>
        <trans-unit id="fc131893314d3ec5912c469546ad607795fe252a" translate="yes" xml:space="preserve">
          <source>Fix a problem with &lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt; which could cause transactions to silently rollback if the &lt;a href=&quot;pragma#pragma_cache_size&quot;&gt;cache_size&lt;/a&gt; is set very small (less than 10) and SQLite comes under memory pressure.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_cache_size&quot;&gt;cache_size&lt;/a&gt; 가 매우 작게 설정되고 (10 미만) SQLite가 메모리 압력을받는 경우 트랜잭션이 자동 롤백 될 수있는 &lt;a href=&quot;wal&quot;&gt;WAL 모드&lt;/a&gt; 의 문제점을 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="1f2f150e12c534df43b52ade585282148590c894" translate="yes" xml:space="preserve">
          <source>Fix a problem with VACUUM on databases from which tables containing AUTOINCREMENT have been dropped.</source>
          <target state="translated">AUTOINCREMENT를 포함하는 테이블이 삭제 된 데이터베이스에서 VACUUM 관련 문제를 해결하십시오.</target>
        </trans-unit>
        <trans-unit id="e98ac2eb09507917a285747f2d5bd3a4164f2534" translate="yes" xml:space="preserve">
          <source>Fix a problem with string memory management in the VDBE</source>
          <target state="translated">VDBE에서 문자열 메모리 관리 관련 문제 수정</target>
        </trans-unit>
        <trans-unit id="1c1c998fb53575b975370a5727818e77b27c3b5a" translate="yes" xml:space="preserve">
          <source>Fix a problem with the &lt;a href=&quot;optoverview#leftjoinreduction&quot;&gt;LEFT JOIN strength reduction optimization&lt;/a&gt; in which the optimization was being applied inappropriately due to an IS NOT NULL operator. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/5948e09b8c415bc45d&quot;&gt;5948e09b8c415bc45d&lt;/a&gt;.</source>
          <target state="translated">IS NOT NULL 연산자로 인해 최적화가 부적절하게 적용되는 &lt;a href=&quot;optoverview#leftjoinreduction&quot;&gt;LEFT JOIN 강도 감소 최적화&lt;/a&gt; 문제를 해결하십시오 . 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/5948e09b8c415bc45d&quot;&gt;5948e09b8c415bc45d&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3e42c3e04422e8992158af198fdedf65d8a494b4" translate="yes" xml:space="preserve">
          <source>Fix a problem with the &lt;a href=&quot;optoverview#or_opt&quot;&gt;OR optimization&lt;/a&gt; on &lt;a href=&quot;expridx&quot;&gt;indexes on expressions&lt;/a&gt;. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/d96eba87698a428c1d&quot;&gt;d96eba87698a428c1d&lt;/a&gt;.</source>
          <target state="translated">에 문제를 수정 &lt;a href=&quot;optoverview#or_opt&quot;&gt;또는 최적화&lt;/a&gt; 에 대한 &lt;a href=&quot;expridx&quot;&gt;표현의 인덱스&lt;/a&gt; . 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/d96eba87698a428c1d&quot;&gt;d96eba87698a428c1d&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a552a20d99699b5fa85e0ed7fb142721053399d9" translate="yes" xml:space="preserve">
          <source>Fix a problem with the multi-row one-pass DELETE optimization that was causing it to compute incorrect answers with a self-referential subquery in the WHERE clause. Fix for ticket &lt;a href=&quot;https://www.sqlite.org/src/info/dc6ebeda9396087&quot;&gt;dc6ebeda9396087&lt;/a&gt;</source>
          <target state="translated">WHERE 절에서 자체 참조 하위 쿼리를 사용하여 오답을 계산하도록하는 다중 행 원 패스 DELETE 최적화 문제를 해결하십시오. 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/dc6ebeda9396087&quot;&gt;dc6ebeda9396087에&lt;/a&gt; 대한 수정</target>
        </trans-unit>
        <trans-unit id="070ed03b719700575899432a2c98f057535dbcc4" translate="yes" xml:space="preserve">
          <source>Fix a problem with the new &lt;a href=&quot;windowfunctions&quot;&gt;window functions&lt;/a&gt; implementation that caused a malfunction when complicated expressions involving window functions were used inside of a view.</source>
          <target state="translated">&lt;a href=&quot;windowfunctions&quot;&gt;창 함수&lt;/a&gt; 와 관련된 복잡한 표현식을 뷰 내부에서 사용할 때 오작동을 일으킨 새 창 함수 구현 문제를 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="ef0924214b0eb9fe23d46afbb07aaf1261d67d0a" translate="yes" xml:space="preserve">
          <source>Fix a problem with the sort order when comparing upper-case strings against characters greater than 'Z' but less than 'a'.</source>
          <target state="translated">대문자 문자열을 'Z'보다 크지 만 'a'보다 작은 문자와 비교할 때 정렬 순서 문제를 해결하십시오.</target>
        </trans-unit>
        <trans-unit id="5e753a491c25e8edb1492253042a4e79f112f875" translate="yes" xml:space="preserve">
          <source>Fix a problem with the use of &lt;a href=&quot;windowfunctions&quot;&gt;window functions&lt;/a&gt; used within &lt;a href=&quot;lang_expr#cosub&quot;&gt;correlated subqueries&lt;/a&gt;. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/d0866b26f83e9c55e3&quot;&gt;d0866b26f83e9c55e3&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;lang_expr#cosub&quot;&gt;상관 된 하위 쿼리&lt;/a&gt; 내 에서 사용되는 &lt;a href=&quot;windowfunctions&quot;&gt;창 함수&lt;/a&gt; 사용 관련 문제를 해결합니다 . 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/d0866b26f83e9c55e3&quot;&gt;D0866b26f83e9c55e3&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="551f44e055f1b2367c902fea7be697c804fc97a8" translate="yes" xml:space="preserve">
          <source>Fix a problem with using the &lt;a href=&quot;optoverview#like_opt&quot;&gt;LIKE optimization&lt;/a&gt; on an &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt;. Check-in &lt;a href=&quot;https://www.sqlite.org/src/info/b850dd159918af56&quot;&gt;b850dd159918af56&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt; 에서 &lt;a href=&quot;optoverview#like_opt&quot;&gt;LIKE 최적화&lt;/a&gt; 를 사용할 때 발생하는 문제를 해결하십시오 . 체크인 &lt;a href=&quot;https://www.sqlite.org/src/info/b850dd159918af56&quot;&gt;b850dd159918af56&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="293886e1e2fac8f6d1689e1a0e83ac48f4add2fd" translate="yes" xml:space="preserve">
          <source>Fix a query planner bug involving a LEFT JOIN with a BETWEEN or LIKE/GLOB constraint and then another INNER JOIN to the right that involves an OR constraint.</source>
          <target state="translated">BETWEEN 또는 LIKE / GLOB 제약 조건이있는 LEFT JOIN과 OR 제약 조건이 포함 된 오른쪽에 또 다른 INNER JOIN이 포함 된 쿼리 플래너 버그를 수정합니다.</target>
        </trans-unit>
        <trans-unit id="8ff17cc556a87f30aa15241b1ac5c7a361de91a4" translate="yes" xml:space="preserve">
          <source>Fix a query planner bug that could result in a segfault when querying tables with a UNIQUE or PRIMARY KEY constraint with more than four columns.</source>
          <target state="translated">4 개 이상의 열이있는 UNIQUE 또는 PRIMARY KEY 제약 조건이있는 테이블을 쿼리 할 때 segfault가 발생할 수있는 쿼리 플래너 버그를 수정합니다.</target>
        </trans-unit>
        <trans-unit id="9fb45458b64cd84ba2a2f30a7bfee1435ad64176" translate="yes" xml:space="preserve">
          <source>Fix a query planner bug that might cause a table to be scanned in the wrong direction (thus reversing the order of output) when a DESC index is used to implement the ORDER BY clause on a query that has an identical GROUP BY clause. Ticket &lt;a href=&quot;http://www.sqlite.org/src/info/ba7cbfaedc7e6&quot;&gt;ba7cbfaedc7e6&lt;/a&gt;.</source>
          <target state="translated">DESC 인덱스를 사용하여 동일한 GROUP BY 절이있는 쿼리에서 ORDER BY 절을 구현할 때 테이블이 잘못된 방향으로 스캔 될 수있는 쿼리 플래너 버그를 수정하십시오 (따라서 출력 순서를 반대로). 티켓 &lt;a href=&quot;http://www.sqlite.org/src/info/ba7cbfaedc7e6&quot;&gt;ba7cbfaedc7e6&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="09bdfd52ac4cb9f3c70abc6d5f401e62168b1225" translate="yes" xml:space="preserve">
          <source>Fix a query planner problem that could result in an incorrect answer due to the use of &lt;a href=&quot;optoverview#autoindex&quot;&gt;automatic indexing&lt;/a&gt; in subqueries in the FROM clause of a correlated scalar subqueries. Fix for ticket &lt;a href=&quot;https://www.sqlite.org/src/info/8a2adec1&quot;&gt;8a2adec1&lt;/a&gt;.</source>
          <target state="translated">상관 스칼라 서브 쿼리의 FROM 절에서 서브 쿼리에서 &lt;a href=&quot;optoverview#autoindex&quot;&gt;자동 인덱싱&lt;/a&gt; 을 사용하여 잘못된 응답을 초래할 수있는 쿼리 플래너 문제점을 수정하십시오 . 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/8a2adec1&quot;&gt;8a2adec1&lt;/a&gt; 수정 .</target>
        </trans-unit>
        <trans-unit id="3db45cb5a06554ceffd3c2fab04e67abb9573838" translate="yes" xml:space="preserve">
          <source>Fix a race condition in AUTOVACUUM that can lead to corrupt databases</source>
          <target state="translated">데이터베이스가 손상 될 수있는 AUTOVACUUM의 경쟁 조건 수정</target>
        </trans-unit>
        <trans-unit id="96a8e915a1becae62cd060b6c6ea6fdc08fd0da2" translate="yes" xml:space="preserve">
          <source>Fix a race condition in test_async.c.</source>
          <target state="translated">test_async.c에서 경쟁 조건을 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="625e5e94c16544ff24dd9e860382b39ea7c80a87" translate="yes" xml:space="preserve">
          <source>Fix a segfault that can occur for queries that use table-valued functions in an IN or EXISTS subquery. Ticket &lt;a href=&quot;https://sqlite.org/src/info/b899b6042f97f5&quot;&gt;b899b6042f97f5&lt;/a&gt;</source>
          <target state="translated">IN 또는 EXISTS 하위 쿼리에서 테이블 반환 함수를 사용하는 쿼리에 대해 발생할 수있는 segfault를 수정하십시오. 티켓 &lt;a href=&quot;https://sqlite.org/src/info/b899b6042f97f5&quot;&gt;B899B6042F97F5&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a280dd5a4ba61a6ed5b8a4172311dcec663fd176" translate="yes" xml:space="preserve">
          <source>Fix a serious bug in the INSERT command which was causing data to go into the wrong columns if the data source was a SELECT and the INSERT clauses specified its columns in some order other than the default.</source>
          <target state="translated">데이터 소스가 SELECT이고 INSERT 절이 기본값 이외의 순서로 열을 지정한 경우 INSERT 명령에서 심각한 버그가 수정되었습니다.</target>
        </trans-unit>
        <trans-unit id="a11d09fcf4c5c4f534bed3e95aeaedc75d2eadb8" translate="yes" xml:space="preserve">
          <source>Fix a strange (but valid) C declaration that was causing problems for QNX. No logical changes.</source>
          <target state="translated">QNX에 문제를 일으키는 이상한 (그러나 유효한) C 선언을 수정하십시오. 논리적 변경 사항이 없습니다.</target>
        </trans-unit>
        <trans-unit id="7c6a164c4c1dd8fe7b071d0ade9de88fbde73880" translate="yes" xml:space="preserve">
          <source>Fix a typos in the sqlite3ext.h header file that prevented the &lt;a href=&quot;c3ref/stmt_isexplain&quot;&gt;sqlite3_stmt_isexplain()&lt;/a&gt; and &lt;a href=&quot;c3ref/value_blob&quot;&gt;sqlite3_value_frombind()&lt;/a&gt; interfaces from being called from &lt;a href=&quot;loadext&quot;&gt;run-time loadable extensions&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;c3ref/stmt_isexplain&quot;&gt;sqlite3_stmt_isexplain ()&lt;/a&gt; 및 &lt;a href=&quot;c3ref/value_blob&quot;&gt;sqlite3_value_frombind ()&lt;/a&gt; 인터페이스가 &lt;a href=&quot;loadext&quot;&gt;런타임로드 가능한 확장&lt;/a&gt; 에서 호출 되지 않도록하는 sqlite3ext.h 헤더 파일의 오타를 수정합니다 .</target>
        </trans-unit>
        <trans-unit id="0a54239aed950f147b9530647f9884464a8a7700" translate="yes" xml:space="preserve">
          <source>Fix a use-after-free that can occur when SQLite is compiled with -DSQLITE_HAS_CODEC.</source>
          <target state="translated">SQLite가 -DSQLITE_HAS_CODEC로 컴파일 될 때 발생할 수있는 사용 후 수정을 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="65b8ad24259b51f708505579d558096b74643e0f" translate="yes" xml:space="preserve">
          <source>Fix an 64-bit alignment bug on HP/UX and Sparc</source>
          <target state="translated">HP / UX 및 Sparc에서 64 비트 정렬 버그 수정</target>
        </trans-unit>
        <trans-unit id="8d3940a154d321cca0d2eb2aa13ea157138409fd" translate="yes" xml:space="preserve">
          <source>Fix an &lt;a href=&quot;fts5&quot;&gt;FTS5&lt;/a&gt; issue in which the 'optimize' command could cause index corruption.</source>
          <target state="translated">'optimize'명령으로 인덱스가 손상 될 수 있는 &lt;a href=&quot;fts5&quot;&gt;FTS5&lt;/a&gt; 문제를 해결하십시오.</target>
        </trans-unit>
        <trans-unit id="cf27be06b87f8658f160d75e065a66b3575cb593" translate="yes" xml:space="preserve">
          <source>Fix an &lt;a href=&quot;http://www.sqlite.org/src/info/5e10420e8d&quot;&gt; old and very obscure bug&lt;/a&gt; that can lead to corruption of the database &lt;a href=&quot;fileformat2#freelist&quot;&gt;free-page list&lt;/a&gt; when &lt;a href=&quot;pragma#pragma_incremental_vacuum&quot;&gt;incremental_vacuum&lt;/a&gt; is used.</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_incremental_vacuum&quot;&gt;incremental_vacuum&lt;/a&gt; 을 사용할 때 데이터베이스 &lt;a href=&quot;fileformat2#freelist&quot;&gt;무료 페이지 목록&lt;/a&gt; 이 손상 될 수 있는 &lt;a href=&quot;http://www.sqlite.org/src/info/5e10420e8d&quot;&gt;오래되고 매우 모호한 버그&lt;/a&gt; 를 수정 하십시오 .</target>
        </trans-unit>
        <trans-unit id="2b834d02e62a3f123a1b8d14a7dd0d0f55d7a363" translate="yes" xml:space="preserve">
          <source>Fix an alignment problem on 64-bit machines</source>
          <target state="translated">64 비트 컴퓨터에서 정렬 문제 해결</target>
        </trans-unit>
        <trans-unit id="22b28f14aad0849b7f089af3e0ae2de83c9cc448" translate="yes" xml:space="preserve">
          <source>Fix an assertion failure that occurred when deleting all rows of a table with the &quot;count_changes&quot; pragma turned on.</source>
          <target state="translated">&quot;count_changes&quot;pragma가 설정된 테이블의 모든 행을 삭제할 때 발생하는 어설 션 오류를 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="24c083d9fe654c2c6b13e8a4783ebdcf071478d1" translate="yes" xml:space="preserve">
          <source>Fix an assertion fault that can occur when updating the NULL value of a field at the end of a table that was added using &lt;a href=&quot;lang_altertable&quot;&gt;ALTER TABLE ADD COLUMN&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;lang_altertable&quot;&gt;ALTER TABLE ADD COLUMN을&lt;/a&gt; 사용하여 추가 된 테이블 끝에서 필드의 NULL 값을 업데이트 할 때 발생할 수있는 어설 션 결함을 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="24c0b7a3124e531d424b372570a621483ca0c334" translate="yes" xml:space="preserve">
          <source>Fix an assertion fault that could occur following &lt;a href=&quot;pragma#pragma_reverse_unordered_selects&quot;&gt;PRAGMA reverse_unordered_selects&lt;/a&gt;. Ticket &lt;a href=&quot;https://sqlite.org/src/info/cb91bf4290c211d&quot;&gt;cb91bf4290c211d&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_reverse_unordered_selects&quot;&gt;PRAGMA reverse_unordered_selects&lt;/a&gt; 다음에 발생할 수있는 어설 션 오류를 수정하십시오 . 티켓 &lt;a href=&quot;https://sqlite.org/src/info/cb91bf4290c211d&quot;&gt;cb91bf4290c211d&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="28b592fe11bf16075b14f304072980cfa741f4d3" translate="yes" xml:space="preserve">
          <source>Fix an assertion fault that occurred on deeply nested views.</source>
          <target state="translated">깊이 중첩 된 뷰에서 발생한 어설 션 오류를 수정합니다.</target>
        </trans-unit>
        <trans-unit id="5a204d98c949cf8975212c05340c51bd92e0547a" translate="yes" xml:space="preserve">
          <source>Fix an assertion fault that was coming up when the expression in an index-on-expressions is really a constant. Ticket &lt;a href=&quot;https://sqlite.org/src/info/aa98619ad08ddca&quot;&gt;aa98619ad08ddca&lt;/a&gt;</source>
          <target state="translated">식에 대한 인덱스식이 실제로 일정 할 때 발생하는 어설 션 오류를 수정하십시오. 티켓 &lt;a href=&quot;https://sqlite.org/src/info/aa98619ad08ddca&quot;&gt;aa98619ad08ddca&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5edfc637acd59a3db220a001c5781ab4bd7de9b5" translate="yes" xml:space="preserve">
          <source>Fix an index corruption issue introduced by &lt;a href=&quot;#version_3_8_7&quot;&gt;version 3.8.7&lt;/a&gt;. An index with a TEXT key can be corrupted by an &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt; into the corresponding table if the table has two nested triggers that convert the key value to INTEGER and back to TEXT again. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/34cd55d68e0e6e7c9a0711aab81a2ee3c354b4c0&quot;&gt;34cd55d68e0&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#version_3_8_7&quot;&gt;버전 3.8.7에서&lt;/a&gt; 소개 된 색인 손상 문제를 해결하십시오 . 테이블에 키 값을 INTEGER로 변환하고 다시 TEXT로 변환하는 두 개의 중첩 트리거가있는 경우 &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt; 에 의해 TEXT 키가있는 인덱스가 해당 테이블로 손상 될 수 있습니다 . 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/34cd55d68e0e6e7c9a0711aab81a2ee3c354b4c0&quot;&gt;34cd55d68e0&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8eeeaac39b440e493474edfe8a18c8edd3970590" translate="yes" xml:space="preserve">
          <source>Fix an infinite-loop in the query planner that could occur on malformed &lt;a href=&quot;lang_with&quot;&gt;common table expressions&lt;/a&gt;.</source>
          <target state="translated">쿼리 플래너에서 잘못된 &lt;a href=&quot;lang_with&quot;&gt;공통 테이블 표현식&lt;/a&gt; 에서 발생할 수있는 무한 루프를 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="e7f2f6913b7c03deeb2b6b41e2ed3b92c354b90f" translate="yes" xml:space="preserve">
          <source>Fix an internal code generator problem that was causing some &lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt; operations to no-op. Ticket &lt;a href=&quot;https://sqlite.org/src/info/ef360601&quot;&gt;ef360601&lt;/a&gt;</source>
          <target state="translated">일부 &lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt; 조작이 작동하지 않는 내부 코드 생성기 문제점을 수정하십시오 . 티켓 &lt;a href=&quot;https://sqlite.org/src/info/ef360601&quot;&gt;ef360601&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="337ef48955d3bd9a0a84bd4a9dd181f41e6cabab" translate="yes" xml:space="preserve">
          <source>Fix an issue in the fsdir(PATH) &lt;a href=&quot;vtab#tabfunc2&quot;&gt;table-valued function&lt;/a&gt; to the &lt;a href=&quot;https://sqlite.org/src/file/ext/misc/fileio.c&quot;&gt;fileio.c&lt;/a&gt; extension, that caused a segfault if the fsdir() table was used as the inner table of a join. Problem reported on the mailing list and fixed by check-in &lt;a href=&quot;https://www.sqlite.org/src/info/7ce4e71c1b7251be&quot;&gt;7ce4e71c1b7251be&lt;/a&gt;</source>
          <target state="translated">fsdir (PATH) &lt;a href=&quot;vtab#tabfunc2&quot;&gt;테이블 반환 함수&lt;/a&gt; 에서 &lt;a href=&quot;https://sqlite.org/src/file/ext/misc/fileio.c&quot;&gt;fileio.c&lt;/a&gt; 확장명으로 fsdir () 테이블이 조인의 내부 테이블로 사용 된 경우 segfault가 발생하는 문제를 해결하십시오. 메일 링리스트에보고되었으며 체크인 &lt;a href=&quot;https://www.sqlite.org/src/info/7ce4e71c1b7251be&quot;&gt;7ce4e71c1b7251be로&lt;/a&gt; 해결되는 문제</target>
        </trans-unit>
        <trans-unit id="6f2b91637b2c2c39f1dab693ce0e485fd3cd7d63" translate="yes" xml:space="preserve">
          <source>Fix an issue with incorrect sharing of VDBE temporary registers between co-routines that could cause incorrect query results in obscure cases. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/d06a25c84454a&quot;&gt;d06a25c84454a&lt;/a&gt;.</source>
          <target state="translated">공동 루틴간에 VDBE 임시 레지스터를 잘못 공유하여 잘못된 쿼리 결과가 불명확 할 수있는 문제를 해결하십시오. 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/d06a25c84454a&quot;&gt;d06a25c84454a&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7c984a9789b89b098bf54d9a87bf8ad24379596a" translate="yes" xml:space="preserve">
          <source>Fix an obscure and relatively harmless problem that might have caused a resource leak following an I/O error.</source>
          <target state="translated">I / O 오류 후 리소스 누수를 유발할 수있는 불분명하고 비교적 무해한 문제를 해결합니다.</target>
        </trans-unit>
        <trans-unit id="9af5e2e7bb886d04f6d1d3a91c18b1bcfc2e680c" translate="yes" xml:space="preserve">
          <source>Fix an obscure bug that can cause database corruption under the following unusual circumstances: A large INSERT or UPDATE statement which is part of an even larger transaction fails due to a uniqueness constraint but the containing transaction commits.</source>
          <target state="translated">다음과 같은 비정상적인 상황에서 데이터베이스 손상을 유발할 수있는 모호한 버그를 수정하십시오. 더 큰 트랜잭션의 일부인 큰 INSERT 또는 UPDATE 문은 고유 제한 조건으로 인해 실패하지만 포함하는 트랜잭션 커밋으로 인해 실패합니다.</target>
        </trans-unit>
        <trans-unit id="0096a0fca1b6b43797d06b363272bd306cbf7ce9" translate="yes" xml:space="preserve">
          <source>Fix an obscure bug that can cause database corruption under the following unusual circumstances: A large INSERT or UPDATE statement which is part of an even larger transaction fails due to a uniqueness contraint but the containing transaction commits.</source>
          <target state="translated">다음과 같은 비정상적인 상황에서 데이터베이스 손상을 일으킬 수있는 모호한 버그를 수정하십시오. 더 큰 트랜잭션의 일부인 큰 INSERT 또는 UPDATE 문은 고유 제약 조건으로 인해 실패하지만 포함하는 트랜잭션 커밋으로 인해 실패합니다.</target>
        </trans-unit>
        <trans-unit id="ce8d90d9be96ff29e6eda51d841a97e900370a1d" translate="yes" xml:space="preserve">
          <source>Fix an obscure memory leak in &lt;a href=&quot;c3ref/result_blob&quot;&gt;sqlite3_result_pointer()&lt;/a&gt;. Ticket &lt;a href=&quot;https://sqlite.org/src/info/7486aa54b968e9b&quot;&gt;7486aa54b968e9b&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;c3ref/result_blob&quot;&gt;sqlite3_result_pointer ()&lt;/a&gt; 에서 메모리 누수를 수정하십시오 . 티켓 &lt;a href=&quot;https://sqlite.org/src/info/7486aa54b968e9b&quot;&gt;7486aa54b968e9b&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a9faef411a2ddeadaf79ebd73389c10f7af52120" translate="yes" xml:space="preserve">
          <source>Fix an obscure segfault in UTF-8 to UTF-16 conversions</source>
          <target state="translated">UTF-8에서 UTF-16으로의 변환에서 애매한 segfault 수정</target>
        </trans-unit>
        <trans-unit id="b5c1f0802c64a77b99076bfc9059cf131dd55807" translate="yes" xml:space="preserve">
          <source>Fix an off-by-one error that caused quoted empty string at the end of a CRNL-terminated line of CSV input to be misread by the command-line shell.</source>
          <target state="translated">CRNL 종료 CSV 입력 행 끝에있는 따옴표가없는 빈 문자열이 명령 행 쉘에 의해 잘못 읽히도록하는 일대일 오류를 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="30b0fd93ee02b86cc24f6cc7bd2523397f033eee" translate="yes" xml:space="preserve">
          <source>Fix an optimizer bug involving subqueries in a compound SELECT that has both an ORDER BY and a LIMIT clause. Ticket #2339.</source>
          <target state="translated">ORDER BY와 LIMIT 절이 모두있는 복합 SELECT의 하위 쿼리와 관련된 최적화 프로그램 버그를 수정합니다. 티켓 # 2339.</target>
        </trans-unit>
        <trans-unit id="683ed4e4563f819c0aec9579fc2147e259103b73" translate="yes" xml:space="preserve">
          <source>Fix an optimizer bug that could have caused some unusual LEFT OUTER JOINs to give incorrect results.</source>
          <target state="translated">비정상적인 LEFT OUTER JOIN이 잘못된 결과를 초래할 수있는 최적화 버그를 수정합니다.</target>
        </trans-unit>
        <trans-unit id="762e5ec5f054c66d660a449bf35057af7025d512" translate="yes" xml:space="preserve">
          <source>Fix an uninitialized variable in pager.c which could (with a probability of about 1 in 4 billion) result in a corrupted database.</source>
          <target state="translated">pager.c에서 초기화되지 않은 변수를 수정하여 (40 억에서 약 1의 확률로) 데이터베이스가 손상 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4ff50f16c16225e491f827922f36f0a1b00ee9e8" translate="yes" xml:space="preserve">
          <source>Fix another bug in the IS NULL optimization that was added in version 3.3.9.</source>
          <target state="translated">버전 3.3.9에서 추가 된 IS NULL 최적화의 다른 버그를 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="e8f06a6dcd8a035bb10d1fb00994a8c1617f3e5c" translate="yes" xml:space="preserve">
          <source>Fix another bug in the implementation of the new &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt; API. We'll get it right eventually...</source>
          <target state="translated">새로운 &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2 ()&lt;/a&gt; API 구현에서 다른 버그를 수정했습니다 . 우리는 결국 그것을 얻을 것입니다 ...</target>
        </trans-unit>
        <trans-unit id="6f129ae803d9883975a2438f98f71935a3f57c27" translate="yes" xml:space="preserve">
          <source>Fix bugs in pager.c that could lead to database corruption if two processes both try to recover a hot journal at the same instant</source>
          <target state="translated">두 프로세스가 모두 같은 순간에 핫 저널을 복구하려고하면 pager.c의 버그로 인해 데이터베이스가 손상 될 수있는 버그 수정</target>
        </trans-unit>
        <trans-unit id="e51c167c962ab37e883d84e10e98aee9dad05d15" translate="yes" xml:space="preserve">
          <source>Fix bugs in the implementation of the new &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt; API that can lead to segfaults.</source>
          <target state="translated">segfault로 이어질 수 있는 새로운 &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2 ()&lt;/a&gt; API 구현에서 버그를 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="15b10b87ff343116def15b81c85457d634788432" translate="yes" xml:space="preserve">
          <source>Fix bugs that can (rarely) lead to incorrect query results when the CAST or OR operators are used in the WHERE clause of a query.</source>
          <target state="translated">CAST 또는 OR 연산자가 쿼리의 WHERE 절에 사용될 때 잘못된 쿼리 결과를 초래할 수있는 버그를 수정합니다.</target>
        </trans-unit>
        <trans-unit id="3d935fe3f3737292749bd1972d56f443d7c93968" translate="yes" xml:space="preserve">
          <source>Fix byte alignment problems on 64-bit architectures.</source>
          <target state="translated">64 비트 아키텍처에서 바이트 정렬 문제를 해결합니다.</target>
        </trans-unit>
        <trans-unit id="7bca40ab59e8b9695f58ea94f5115e8c80d7a7c3" translate="yes" xml:space="preserve">
          <source>Fix commenting errors and improve the comments generated on &lt;a href=&quot;lang_explain&quot;&gt;EXPLAIN&lt;/a&gt; listings when the &lt;a href=&quot;compile#enable_explain_comments&quot;&gt;-DSQLITE_ENABLE_EXPLAIN_COMMENTS&lt;/a&gt; compile-time option is used.</source>
          <target state="translated">&lt;a href=&quot;compile#enable_explain_comments&quot;&gt;-DSQLITE_ENABLE_EXPLAIN_COMMENTS&lt;/a&gt; 컴파일 타임 옵션이 사용될 때 주석 오류를 수정하고 &lt;a href=&quot;lang_explain&quot;&gt;EXPLAIN&lt;/a&gt; 목록에서 생성 된 주석을 개선하십시오 .</target>
        </trans-unit>
        <trans-unit id="f6a563b99fee018f87bcc6d45b57949ce6d02874" translate="yes" xml:space="preserve">
          <source>Fix data races that might occur under stress when running with many threads in &lt;a href=&quot;sharedcache&quot;&gt;shared cache mode&lt;/a&gt; where some of the threads are opening and closing connections.</source>
          <target state="translated">일부 스레드가 연결을 열고 닫는 &lt;a href=&quot;sharedcache&quot;&gt;공유 캐시 모드&lt;/a&gt; 에서 많은 스레드로 실행할 때 스트레스가 발생할 수있는 데이터 경쟁 문제를 해결하십시오 .</target>
        </trans-unit>
        <trans-unit id="3810fcb3cfb91e5274e7723b80500a70b2e4eef7" translate="yes" xml:space="preserve">
          <source>Fix data structure alignment issues on Sparc. Ticket #3777.</source>
          <target state="translated">Sparc에서 데이터 구조 정렬 문제를 해결합니다. 티켓 # 3777.</target>
        </trans-unit>
        <trans-unit id="a7f89cd0a1f20da8469d2ab54509c35e86684ab3" translate="yes" xml:space="preserve">
          <source>Fix editline support in the command-line shell.</source>
          <target state="translated">명령 행 쉘에서 편 집행 지원을 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="87d44c2123224749ec741fa602897daad30b0e0b" translate="yes" xml:space="preserve">
          <source>Fix for a bug in the ORDER BY optimizer that was introduced in &lt;a href=&quot;#version_3_7_15&quot;&gt;version 3.7.15&lt;/a&gt; which would sometimes optimize out the sorting step when in fact the sort was required. Ticket &lt;a href=&quot;http://www.sqlite.org/src/info/a179fe7465&quot;&gt;a179fe7465&lt;/a&gt;</source>
          <target state="translated">사실 정렬이 필요할 때 정렬 단계를 최적화하는 &lt;a href=&quot;#version_3_7_15&quot;&gt;버전 3.7.15&lt;/a&gt; 에 도입 된 ORDER BY 최적화 프로그램의 버그가 수정되었습니다 . 티켓 &lt;a href=&quot;http://www.sqlite.org/src/info/a179fe7465&quot;&gt;a179fe7465&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0a782f7686d7d9707b5dc5190d2cb994db1da8ac" translate="yes" xml:space="preserve">
          <source>Fix for a bug in the SELECT DISTINCT logic that was introduced by the prior version.</source>
          <target state="translated">이전 버전에서 도입 된 SELECT DISTINCT 논리의 버그가 수정되었습니다.</target>
        </trans-unit>
        <trans-unit id="293d91bd4dad89365956202fbbdc05193695a217" translate="yes" xml:space="preserve">
          <source>Fix for another problem (unrelated to the one fixed in 2.1.4) that sometimes causes &lt;b&gt;sqlite_exec()&lt;/b&gt; to return SQLITE_PROTOCOL unnecessarily. This time the bug was in the POSIX locking code and should not effect Windows users.</source>
          <target state="translated">&lt;b&gt;sqlite_exec ()&lt;/b&gt; 가 불필요하게 SQLITE_PROTOCOL을 반환 하는 다른 문제 (2.1.4에서 수정 된 문제와 관련이 없음)를 수정했습니다 . 이번에는 버그가 POSIX 잠금 코드에 있었고 Windows 사용자에게는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="692cc3acdf11cc382c710566eb5e8d41ae9a76e6" translate="yes" xml:space="preserve">
          <source>Fix inconsistent integer to floating-point comparison operations that could result in a corrupt index if the index is created on a table column that contains both large integers and floating point values of similar magnitude. Ticket &lt;a href=&quot;https://www.sqlite.org/src/tktview?name=38a97a87a6&quot;&gt;38a97a87a6&lt;/a&gt;.</source>
          <target state="translated">큰 정수와 비슷한 크기의 부동 소수점 값을 모두 포함하는 테이블 열에서 인덱스가 작성 될 경우 인덱스가 손상 될 수있는 일치하지 않는 정수를 부동 소수점 비교 연산으로 수정하십시오. 티켓 &lt;a href=&quot;https://www.sqlite.org/src/tktview?name=38a97a87a6&quot;&gt;38a97a87a6&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cbe4713574b5e7e1bf3ea574e5968f7da369b174" translate="yes" xml:space="preserve">
          <source>Fix incorrect result with complex OR-connected WHERE and STAT4. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/ec32177c99ccac2&quot;&gt;ec32177c99ccac2&lt;/a&gt;</source>
          <target state="translated">복잡한 OR 연결 WHERE 및 STAT4로 잘못된 결과를 수정하십시오. 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/ec32177c99ccac2&quot;&gt;ec32177c99ccac2&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="32ba32659ea655886bad57a0dd08fbe5d98856b9" translate="yes" xml:space="preserve">
          <source>Fix locking behavior under Windows</source>
          <target state="translated">Windows에서 잠금 동작 수정</target>
        </trans-unit>
        <trans-unit id="1f35665eab7b4eb2d565f64daa7ab9de3e2952ac" translate="yes" xml:space="preserve">
          <source>Fix many obscure problems discovered while &lt;a href=&quot;testing#fuzztesting&quot;&gt;SQL fuzzing&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;testing#fuzztesting&quot;&gt;SQL 퍼징&lt;/a&gt; 중에 발견 된 많은 모호한 문제점을 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="8e786cb80b44d5b0bc787df47e982713af4c0ff9" translate="yes" xml:space="preserve">
          <source>Fix many potential segfaults that could be caused by malicious SQL statements.</source>
          <target state="translated">악의적 인 SQL 문으로 인해 발생할 수있는 많은 잠재적 segfault를 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="0ab2336b4ec301e575c6d8af5dd4486d9002cf92" translate="yes" xml:space="preserve">
          <source>Fix memory leaks that used to occur after a malloc() failure.</source>
          <target state="translated">malloc () 실패 후 발생했던 메모리 누수를 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="6b6c482ed533b8d025b0b530bd86fd284d9ab805" translate="yes" xml:space="preserve">
          <source>Fix memory size tracking so that it works even if SQLite uses more than 2GiB of memory.</source>
          <target state="translated">SQLite가 2GiB 이상의 메모리를 사용하는 경우에도 작동하도록 메모리 크기 추적을 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="83c4e0c639eeed5339ef3f3550050703ea306329" translate="yes" xml:space="preserve">
          <source>Fix minor issues with the &lt;a href=&quot;dbstat&quot;&gt;dbstat virtual table&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;dbstat&quot;&gt;dbstat 가상 테이블&lt;/a&gt; 의 사소한 문제를 해결 하십시오 .</target>
        </trans-unit>
        <trans-unit id="6d8fc1c13727f748ff40e9e6be94b0b7005ead11" translate="yes" xml:space="preserve">
          <source>Fix misbehavior of the FTS5 xBestIndex method. Ticket &lt;a href=&quot;https://sqlite.org/src/info/2b8aed9f7c9e61e8&quot;&gt;2b8aed9f7c9e61e8&lt;/a&gt;.</source>
          <target state="translated">FTS5 xBestIndex 메소드의 오작동을 수정하십시오. 티켓 &lt;a href=&quot;https://sqlite.org/src/info/2b8aed9f7c9e61e8&quot;&gt;2b8aed9f7c9e61e8&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d6aeb35ac1eb7c66584445cf87b55f99254ca966" translate="yes" xml:space="preserve">
          <source>Fix more bugs in the LEFT JOIN &lt;a href=&quot;optoverview#flattening&quot;&gt;flattening optimization&lt;/a&gt;. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/7fde638e94287d2c&quot;&gt;7fde638e94287d2c&lt;/a&gt;.</source>
          <target state="translated">LEFT JOIN &lt;a href=&quot;optoverview#flattening&quot;&gt;병합 최적화&lt;/a&gt; 에서 더 많은 버그 수정 . 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/7fde638e94287d2c&quot;&gt;7fde638e94287d2c&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1506d1bb252e85d5b0e36b68a46cf1665d4a7c8f" translate="yes" xml:space="preserve">
          <source>Fix more problems with rollback. Enhance the test suite to exercise the rollback logic extensively in order to prevent any future problems.</source>
          <target state="translated">롤백 관련 문제를 해결하십시오. 향후 문제가 발생하지 않도록 테스트 스위트를 강화하여 롤백 로직을 광범위하게 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="3fb27e5b00960417518969df0f918d06f25d9624" translate="yes" xml:space="preserve">
          <source>Fix multiple bugs that can occur following a malloc() failure.</source>
          <target state="translated">malloc () 실패 후 발생할 수있는 여러 버그를 수정합니다.</target>
        </trans-unit>
        <trans-unit id="8252f0ee7c2b56c6e1d2a3ae12fb9ec74fcaf061" translate="yes" xml:space="preserve">
          <source>Fix obscure crash bugs found by &lt;a href=&quot;http://lcamtuf.coredump.cx/afl/&quot;&gt;american fuzzy lop&lt;/a&gt;. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/a59ae93ee990a55&quot;&gt;a59ae93ee990a55&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://lcamtuf.coredump.cx/afl/&quot;&gt;미국 퍼지 lop에&lt;/a&gt; 의해 발견 된 모호한 충돌 버그 수정 . 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/a59ae93ee990a55&quot;&gt;a59ae93ee990a55&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="029dc6c7c9dc876556264390601510f43467cb42" translate="yes" xml:space="preserve">
          <source>Fix other minor problems with using small soft heap limits.</source>
          <target state="translated">작은 소프트 힙 제한 사용과 관련된 기타 사소한 문제를 해결하십시오.</target>
        </trans-unit>
        <trans-unit id="2953bbeca888101c80fba41134554ee3b46a5872" translate="yes" xml:space="preserve">
          <source>Fix portability problems for MinGW/MSYS.</source>
          <target state="translated">MinGW / MSYS의 이식성 문제를 해결하십시오.</target>
        </trans-unit>
        <trans-unit id="46269c4cd0e4bb26c3e434c946d6ad61c56e3d22" translate="yes" xml:space="preserve">
          <source>Fix potential corruption in &lt;a href=&quot;expridx&quot;&gt;indexes on expressions&lt;/a&gt; due to automatic datatype conversions. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/343634942dd54ab&quot;&gt;343634942dd54ab&lt;/a&gt;</source>
          <target state="translated">자동 데이터 유형 변환으로 인한 &lt;a href=&quot;expridx&quot;&gt;표현식 색인의&lt;/a&gt; 잠재적 손상을 수정 합니다. 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/343634942dd54ab&quot;&gt;343634942dd54ab&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6e4b60b2ce1e9e806c6a1d1ab2efe5b7b8417ffc" translate="yes" xml:space="preserve">
          <source>Fix problems found on 64-bit systems.</source>
          <target state="translated">64 비트 시스템에서 발견 된 문제를 해결하십시오.</target>
        </trans-unit>
        <trans-unit id="07f0a4d00027e8a55978e27f100b7e116a031b97" translate="yes" xml:space="preserve">
          <source>Fix problems with the handling of ORDER BY expressions on compound SELECT statements in subqueries.</source>
          <target state="translated">하위 쿼리의 복합 SELECT 문에서 ORDER BY 식 처리 문제를 해결합니다.</target>
        </trans-unit>
        <trans-unit id="3f1665257f79bd93e546dd7e3d88c5139efb7056" translate="yes" xml:space="preserve">
          <source>Fix rare false-positives in &lt;a href=&quot;pragma#pragma_integrity_check&quot;&gt;PRAGMA integrity_check&lt;/a&gt; when run on a database connection with &lt;a href=&quot;lang_attach&quot;&gt;attached databases&lt;/a&gt;. Ticket &lt;a href=&quot;https://sqlite.org/src/info/a4e06e75a9ab61a12&quot;&gt;a4e06e75a9ab61a12&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;lang_attach&quot;&gt;연결된 데이터베이스가&lt;/a&gt; 있는 데이터베이스 연결에서 실행될 때 &lt;a href=&quot;pragma#pragma_integrity_check&quot;&gt;PRAGMA integrity_check&lt;/a&gt; 에서 드문 거짓 양성을 수정하십시오 . 티켓 &lt;a href=&quot;https://sqlite.org/src/info/a4e06e75a9ab61a12&quot;&gt;A4E06E75A9AB61A12&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="715572171eb76d3d2c9de665f3a896a9b21d3581" translate="yes" xml:space="preserve">
          <source>Fix several important bugs in the new ATTACH and DETACH commands.</source>
          <target state="translated">새로운 ATTACH 및 DETACH 명령에서 몇 가지 중요한 버그를 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="ddb3a4c421a408022b093da748a9383a9c659be4" translate="yes" xml:space="preserve">
          <source>Fix several nuisance bugs.</source>
          <target state="translated">몇 가지 귀찮은 버그를 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="893a9bc034bf998aa3ff5b40cdc26495f66e42a9" translate="yes" xml:space="preserve">
          <source>Fix table rename feature so that it also updates references to the renamed table in &lt;a href=&quot;lang_createtrigger&quot;&gt;triggers&lt;/a&gt; and &lt;a href=&quot;lang_createview&quot;&gt;views&lt;/a&gt;.</source>
          <target state="translated">테이블 이름 바꾸기 기능을 수정하여 &lt;a href=&quot;lang_createtrigger&quot;&gt;트리거&lt;/a&gt; 및 &lt;a href=&quot;lang_createview&quot;&gt;뷰&lt;/a&gt; 에서 이름이 바뀐 테이블에 대한 참조도 업데이트 합니다 .</target>
        </trans-unit>
        <trans-unit id="6c93787ec12e369e67cea4716187fa506565c4de" translate="yes" xml:space="preserve">
          <source>Fix the &quot;.import&quot; command of the shell so that it ignores \r characters at the end of lines.</source>
          <target state="translated">셸의 &quot;.import&quot;명령을 수정하여 줄 끝의 \ r 문자를 무시하십시오.</target>
        </trans-unit>
        <trans-unit id="efa608a017df9d7fa42cace30fce54f90785e7c6" translate="yes" xml:space="preserve">
          <source>Fix the &quot;.read&quot; command in the &lt;a href=&quot;cli&quot;&gt;command-line shell&lt;/a&gt; so that it understands that its input is not interactive.</source>
          <target state="translated">입력이 대화식이 아님을 이해하도록 &lt;a href=&quot;cli&quot;&gt;명령 행 쉘&lt;/a&gt; 에서 &quot;.read&quot;명령을 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="7dd018e621c55cac03b1d82cf14914c81075f182" translate="yes" xml:space="preserve">
          <source>Fix the --enable-threadsafe option on the configure script</source>
          <target state="translated">configure 스크립트에서 --enable-threadsafe 옵션 수정</target>
        </trans-unit>
        <trans-unit id="4f27e177384472d9d1a0c017bbab8f18de27d2fa" translate="yes" xml:space="preserve">
          <source>Fix the &lt;a href=&quot;c3ref/db_readonly&quot;&gt;sqlite3_db_readonly()&lt;/a&gt; interface so that it returns true if the database is read-only due to the file format write version number being too large.</source>
          <target state="translated">&lt;a href=&quot;c3ref/db_readonly&quot;&gt;sqlite3_db_readonly ()&lt;/a&gt; 수정파일 형식 쓰기 버전 번호가 너무 커서 데이터베이스가 읽기 전용 인 경우 true를 리턴하도록 인터페이스를 .</target>
        </trans-unit>
        <trans-unit id="bec6839af346a0afcfd8b6b2618aee85250ace7f" translate="yes" xml:space="preserve">
          <source>Fix the &lt;a href=&quot;c3ref/memory_highwater&quot;&gt;sqlite3_memory_used()&lt;/a&gt; and &lt;a href=&quot;c3ref/memory_highwater&quot;&gt;sqlite3_memory_highwater()&lt;/a&gt; interfaces so that they actually do provide a 64-bit answer.</source>
          <target state="translated">&lt;a href=&quot;c3ref/memory_highwater&quot;&gt;sqlite3_memory_used ()&lt;/a&gt; 및 &lt;a href=&quot;c3ref/memory_highwater&quot;&gt;sqlite3_memory_highwater ()&lt;/a&gt; 인터페이스가 실제로 64 비트 응답을 제공하도록 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="9ba95583c49ccb4f7efb59b2718e52202fa58e8d" translate="yes" xml:space="preserve">
          <source>Fix the &lt;a href=&quot;c3ref/stmt_busy&quot;&gt;sqlite3_stmt_busy()&lt;/a&gt; interface so that it gives the correct answer for &lt;a href=&quot;lang_transaction&quot;&gt;ROLLBACK&lt;/a&gt; statements that have been stepped but never reset.</source>
          <target state="translated">&lt;a href=&quot;c3ref/stmt_busy&quot;&gt;sqlite3_stmt_busy ()&lt;/a&gt; 인터페이스를 수정하여 단계 화되었지만 재설정되지 않은 &lt;a href=&quot;lang_transaction&quot;&gt;ROLLBACK&lt;/a&gt; 문에 대한 올바른 응답을 제공하십시오 .</target>
        </trans-unit>
        <trans-unit id="0d8b77554fdfe7204548bebac009120f0ab4ce5d" translate="yes" xml:space="preserve">
          <source>Fix the &lt;a href=&quot;c3ref/trace_v2&quot;&gt;sqlite3_trace_v2()&lt;/a&gt; interface so that it is disabled if either the callback or the mask arguments are zero, in accordance with the documentation.</source>
          <target state="translated">설명서에 따라 &lt;a href=&quot;c3ref/trace_v2&quot;&gt;sqlite3_trace_v2 ()&lt;/a&gt; 인터페이스가 콜백 또는 마스크 인수가 0 인 경우 비활성화되도록 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="956e98f8a5992e566b23150a8321e220d594d919" translate="yes" xml:space="preserve">
          <source>Fix the &lt;a href=&quot;c3ref/value_blob&quot;&gt;sqlite3_value_text()&lt;/a&gt; interface so that it correctly translates content generated by &lt;a href=&quot;lang_corefunc#zeroblob&quot;&gt;zeroblob()&lt;/a&gt; into a string of all 0x00 characters. This is a long-standing issue discovered after the 3.16.1 release by &lt;a href=&quot;https://github.com/google/oss-fuzz&quot;&gt;OSS-Fuzz&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;c3ref/value_blob&quot;&gt;sqlite3_value_text ()&lt;/a&gt; 인터페이스를 수정하여 &lt;a href=&quot;lang_corefunc#zeroblob&quot;&gt;zeroblob ()&lt;/a&gt; 에 의해 생성 된 컨텐츠 를 모든 0x00 문자의 문자열로 올바르게 변환하십시오 . 이것은 &lt;a href=&quot;https://github.com/google/oss-fuzz&quot;&gt;OSS-Fuzz&lt;/a&gt; 에서 3.16.1 릴리스 이후에 발견 된 오랜 문제입니다.</target>
        </trans-unit>
        <trans-unit id="56c77cb746417e9f9c249b6c4c57b8b0bd6b303c" translate="yes" xml:space="preserve">
          <source>Fix the &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt; so that it builds with -DSQLITE_UNTESTABLE</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt; 가 -DSQLITE_UNTESTABLE로 빌드되도록 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="2ac07a1bdc161b16f3469a85c1d0b7329721b6d7" translate="yes" xml:space="preserve">
          <source>Fix the &lt;a href=&quot;cli#fileio&quot;&gt;readfile()&lt;/a&gt; function so that it returns an empty BLOB rather than throwing an out-of-memory error when reading an empty file.</source>
          <target state="translated">빈 파일을 읽을 때 메모리 부족 오류가 발생하지 않고 빈 BLOB를 반환하도록 &lt;a href=&quot;cli#fileio&quot;&gt;readfile ()&lt;/a&gt; 함수를 수정 하십시오.</target>
        </trans-unit>
        <trans-unit id="403d90d10026656bd2341e3610eb64ec19d4191d" translate="yes" xml:space="preserve">
          <source>Fix the &lt;a href=&quot;cli#fileio&quot;&gt;writefile()&lt;/a&gt; function so that when it creates new directories along the path of a new file, it gives them umask permissions rather than the same permissions as the file.</source>
          <target state="translated">새 파일의 경로를 따라 새 디렉토리를 작성할 때 파일과 동일한 권한 대신 umask 권한을 부여하도록 &lt;a href=&quot;cli#fileio&quot;&gt;writefile ()&lt;/a&gt; 함수를 수정 하십시오.</target>
        </trans-unit>
        <trans-unit id="c637b1ba45c5e9182867d4d4a220fb33c1f49c9d" translate="yes" xml:space="preserve">
          <source>Fix the &lt;a href=&quot;https://sqlite.org/src/file/ext/misc/eval.c&quot;&gt;eval.c&lt;/a&gt; extension so that it works with &lt;a href=&quot;pragma#pragma_empty_result_callbacks&quot;&gt;PRAGMA empty_result_callbacks=ON&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://sqlite.org/src/file/ext/misc/eval.c&quot;&gt;eval.c&lt;/a&gt; 확장명이 작동하도록 수정하십시오.&lt;a href=&quot;pragma#pragma_empty_result_callbacks&quot;&gt;PRAGMA empty_result_callbacks = ON&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="742c65bbfe2ba6c5ffb22d31b0549c4b28db3ce5" translate="yes" xml:space="preserve">
          <source>Fix the &lt;a href=&quot;json1#jeach&quot;&gt;json_each()&lt;/a&gt; function so that it returns valid results on its &quot;fullkey&quot; column when the input is a simple value rather than an array or object.</source>
          <target state="translated">&lt;a href=&quot;json1#jeach&quot;&gt;json_each ()&lt;/a&gt; 수정입력이 배열이나 객체가 아닌 단순한 값일 때 &quot;풀키&quot;열에 유효한 결과를 반환하도록 함수를 .</target>
        </trans-unit>
        <trans-unit id="6faddebbbfb3cf6bd640c7723cc149f43cca6d2e" translate="yes" xml:space="preserve">
          <source>Fix the &lt;a href=&quot;lang_altertable&quot;&gt;ALTER TABLE&lt;/a&gt; command so that it does not corrupt &lt;a href=&quot;lang_createindex#descidx&quot;&gt;descending indexes&lt;/a&gt; when adding a column to a &lt;a href=&quot;pragma#pragma_legacy_file_format&quot;&gt;legacy file format&lt;/a&gt; database. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/f68bf68513a1c15f&quot;&gt;f68bf68513a1c15f&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;pragma#pragma_legacy_file_format&quot;&gt;레거시 파일 형식&lt;/a&gt; 데이터베이스에 열을 추가 할 때 &lt;a href=&quot;lang_createindex#descidx&quot;&gt;내림차순 인덱스&lt;/a&gt; 가 손상되지 않도록 &lt;a href=&quot;lang_altertable&quot;&gt;ALTER TABLE&lt;/a&gt; 명령을 수정하십시오 . 티켓&lt;a href=&quot;https://www.sqlite.org/src/info/f68bf68513a1c15f&quot;&gt; F68BF68513A1C15F&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="02f53a9fc9d770e6300288b8428f8e92433fe895" translate="yes" xml:space="preserve">
          <source>Fix the &lt;a href=&quot;lang_altertable#altertabmvcol&quot;&gt;ALTER TABLE RENAME COLUMN&lt;/a&gt; command so that it works for tables that have redundant UNIQUE constraints. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/bc8d94f0fbd633fd9a&quot;&gt;bc8d94f0fbd633fd9a&lt;/a&gt;</source>
          <target state="translated">중복 UNIQUE 제한 조건이있는 테이블에 대해 작동하도록 &lt;a href=&quot;lang_altertable#altertabmvcol&quot;&gt;ALTER TABLE RENAME COLUMN&lt;/a&gt; 명령을 수정하십시오 . 티켓&lt;a href=&quot;https://www.sqlite.org/src/info/bc8d94f0fbd633fd9a&quot;&gt; bc8d94f0fbd633fd9a&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="97c52dd1e73a0efdc1a5a635f402eb42bf6e057e" translate="yes" xml:space="preserve">
          <source>Fix the &lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt; command so that it adds correct samples for &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; tables in the &lt;a href=&quot;fileformat2#stat4tab&quot;&gt;sqlite_stat4&lt;/a&gt; table. Ticket &lt;a href=&quot;http://www.sqlite.org/src/info/b2fa5424e6fcb15&quot;&gt;b2fa5424e6fcb15&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;fileformat2#stat4tab&quot;&gt;sqlite_stat4&lt;/a&gt; 테이블에서 &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; 테이블에 대한 올바른 샘플을 추가하도록 &lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt; 명령을 수정하십시오 . 티켓 &lt;a href=&quot;http://www.sqlite.org/src/info/b2fa5424e6fcb15&quot;&gt;b2fa5424e6fcb15&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8d872c8e6bb3c85572831647367d9180d6f56948" translate="yes" xml:space="preserve">
          <source>Fix the &lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt; command so that it computes statistics on tables whose names begin with &quot;sqlite&quot;. Check-in &lt;a href=&quot;https://sqlite.org/src/info/0249d9aecf69948d&quot;&gt;0249d9aecf69948d&lt;/a&gt;</source>
          <target state="translated">이름이 &quot;sqlite&quot;로 시작하는 테이블에서 통계를 계산하도록 &lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt; 명령을 수정하십시오 . 체크인 &lt;a href=&quot;https://sqlite.org/src/info/0249d9aecf69948d&quot;&gt;0249d9aecf69948d&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bc9460bbb01c2af9870b809ff07c3b2b7356fe99" translate="yes" xml:space="preserve">
          <source>Fix the &lt;a href=&quot;lang_replace&quot;&gt;REPLACE&lt;/a&gt; command so that it is no longer able to sneak a NULL value into a NOT NULL column even if the NOT NULL column has a default value of NULL. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/e6f1f2e34dceeb1ed6&quot;&gt;e6f1f2e34dceeb1ed6&lt;/a&gt;</source>
          <target state="translated">NOT NULL 열의 기본값이 NULL 인 경우에도 더 이상 NULL 값을 NOT NULL 열로 몰래 이동할 수 없도록 &lt;a href=&quot;lang_replace&quot;&gt;REPLACE&lt;/a&gt; 명령을 수정하십시오 . 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/e6f1f2e34dceeb1ed6&quot;&gt;e6f1f2e34dceeb1ed6&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0d54e2533360cb4659b717a0226d2d7a1dbf1bbf" translate="yes" xml:space="preserve">
          <source>Fix the &lt;a href=&quot;lang_replace&quot;&gt;REPLACE&lt;/a&gt; statement for &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; tables that lack secondary indexes so that it works correctly with triggers and foreign keys. This was a new bug caused by performance optimizations added in version 3.16.0. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/30027b613b4&quot;&gt;30027b613b4&lt;/a&gt;</source>
          <target state="translated">2 차 인덱스가없는 &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; 테이블 의 &lt;a href=&quot;lang_replace&quot;&gt;REPLACE&lt;/a&gt; 문을 수정하여 트리거 및 외래 키와 올바르게 작동하도록하십시오. 버전 3.16.0에 추가 된 성능 최적화로 인해 발생한 새로운 버그입니다. 티켓&lt;a href=&quot;https://www.sqlite.org/src/info/30027b613b4&quot;&gt; 30027b613b4&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d509397fe960e4575a2e26f651dde6ff90b84a19" translate="yes" xml:space="preserve">
          <source>Fix the &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; command so that it spills excess content to disk rather than holding everything in memory, and possible causing an out-of-memory error for larger database files. This fixes an issue introduced by version 3.15.0.</source>
          <target state="translated">&lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; 명령을 수정하여 메모리에있는 모든 것을 보유하지 않고 디스크에 초과 컨텐츠를 쏟아서 더 큰 데이터베이스 파일에 대해 메모리 부족 오류가 발생할 수 있도록 수정하십시오. 버전 3.15.0에서 소개 된 문제를 해결합니다.</target>
        </trans-unit>
        <trans-unit id="b036730fcf1ecafecf0573d1d74619be57162b96" translate="yes" xml:space="preserve">
          <source>Fix the &lt;a href=&quot;optoverview#flattening&quot;&gt;query flattener&lt;/a&gt; so that it works on queries that contain subqueries that use &lt;a href=&quot;windowfunctions&quot;&gt;window functions&lt;/a&gt;. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/f09fcd17810f65f717&quot;&gt;709fcd17810f65f717&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;windowfunctions&quot;&gt;창 기능&lt;/a&gt; 을 사용하는 하위 쿼리가 포함 된 쿼리에서 작동하도록 &lt;a href=&quot;optoverview#flattening&quot;&gt;쿼리 병합기를&lt;/a&gt; 수정하십시오 . 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/f09fcd17810f65f717&quot;&gt;709fcd17810f65f717&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7a295aba8a2bc4b671641db0bf3a60e0d6006706" translate="yes" xml:space="preserve">
          <source>Fix the &lt;a href=&quot;optoverview#or_opt&quot;&gt;OR optimization&lt;/a&gt; so that it always ignores subplans that do not use an index.</source>
          <target state="translated">&lt;a href=&quot;optoverview#or_opt&quot;&gt;OR 최적화를&lt;/a&gt; 수정하여 인덱스를 사용하지 않는 하위 계획을 항상 무시하십시오.</target>
        </trans-unit>
        <trans-unit id="69a683f5bb13785c6e99f6455ca83c519f9c2e7d" translate="yes" xml:space="preserve">
          <source>Fix the &lt;a href=&quot;optoverview#skipscan&quot;&gt;skip-scan optimization&lt;/a&gt; so that it works correctly when the &lt;a href=&quot;optoverview#or_opt&quot;&gt;OR optimization&lt;/a&gt; is used on &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; tables. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/8fd39115d8f46&quot;&gt;8fd39115d8f46&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; 테이블 에서 &lt;a href=&quot;optoverview#or_opt&quot;&gt;OR 최적화&lt;/a&gt; 를 사용할 때 &lt;a href=&quot;optoverview#skipscan&quot;&gt;스킵 스캔 최적화&lt;/a&gt; 가 올바르게 작동하도록 수정하십시오 . 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/8fd39115d8f46&quot;&gt;8fd39115d8f46&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d64c703876098dc69084f33c7133d65be1531802" translate="yes" xml:space="preserve">
          <source>Fix the &lt;a href=&quot;pragma#pragma_foreign_key_check&quot;&gt;PRAGMA foreign_key_check&lt;/a&gt; command so that it works correctly with foreign keys on &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; tables.</source>
          <target state="translated">&lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; 테이블 에서 외래 키와 올바르게 작동하도록 &lt;a href=&quot;pragma#pragma_foreign_key_check&quot;&gt;PRAGMA foreign_key_check&lt;/a&gt; 명령을 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="0d608a4f7657ad4f577e7889d266b51e07ca7fe6" translate="yes" xml:space="preserve">
          <source>Fix the &lt;a href=&quot;series&quot;&gt;generate_series&lt;/a&gt; virtual table so that it correctly returns no rows if any of its constraints are NULL.</source>
          <target state="translated">제약 조건이 NULL 인 경우 행을 올바르게 반환하지 않도록 &lt;a href=&quot;series&quot;&gt;generate_series&lt;/a&gt; 가상 테이블을 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="16b43b19be563d99895b6b7aa73c97080f1c15c0" translate="yes" xml:space="preserve">
          <source>Fix the REPLACE() function so that it returns NULL if the second argument is an empty string. Ticket #2324.</source>
          <target state="translated">두 번째 인수가 빈 문자열 인 경우 NULL을 리턴하도록 REPLACE () 함수를 수정하십시오. 티켓 # 2324.</target>
        </trans-unit>
        <trans-unit id="b71b83145fe1ea70f5f98014557a62cf7f2c2ec4" translate="yes" xml:space="preserve">
          <source>Fix the TCL interface so that the &quot;nullvalue&quot; setting is honored for TCL implementations of SQL functions.</source>
          <target state="translated">SQL 함수의 TCL 구현에 &quot;널값&quot;설정이 적용되도록 TCL 인터페이스를 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="681e860e148ced87ec9dd7b3cfb9b43a75c2065d" translate="yes" xml:space="preserve">
          <source>Fix the behavior of &lt;a href=&quot;c3ref/column_name&quot;&gt;sqlite3_column_name()&lt;/a&gt; for queries that use the &lt;a href=&quot;optoverview#flattening&quot;&gt;flattening optimization&lt;/a&gt; so that the result is consistent with other queries that do not use that optimization, and with PostgreSQL, MySQL, and SQLServer. Ticket &lt;a href=&quot;https://sqlite.org/src/info/de3403bf5ae&quot;&gt;de3403bf5ae&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;optoverview#flattening&quot;&gt;병합 최적화&lt;/a&gt; 를 사용하는 쿼리에 대해 &lt;a href=&quot;c3ref/column_name&quot;&gt;sqlite3_column_name ()&lt;/a&gt; 의 동작을 수정하여 결과가 해당 최적화를 사용하지 않는 다른 쿼리와 PostgreSQL, MySQL 및 SQLServer와 일치하도록하십시오. 티켓 &lt;a href=&quot;https://sqlite.org/src/info/de3403bf5ae&quot;&gt;de3403bf5ae&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7e2fb92f8546f34175b1dda79777c363dd68d103" translate="yes" xml:space="preserve">
          <source>Fix the behavior of comparison operators (ex: &quot;&lt;b&gt;&amp;amp;lt&lt;/b&gt;&quot;, &quot;&lt;b&gt;==&lt;/b&gt;&quot;, etc.) so that they are consistent with the order of entries in an index.</source>
          <target state="translated">인덱스의 항목 순서와 일치하도록 비교 연산자 (예 : &quot; &lt;b&gt;&amp;amp; lt&lt;/b&gt; &quot;, &quot; &lt;b&gt;==&lt;/b&gt; &quot;등) 의 동작을 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="a6cdb1736bb68b0b3c4ede9fdba04199758b7855" translate="yes" xml:space="preserve">
          <source>Fix the behavior of comparison operators (ex: &quot;&lt;b&gt;&amp;lt;&lt;/b&gt;&quot;, &quot;&lt;b&gt;==&lt;/b&gt;&quot;, etc.) so that they are consistent with the order of entries in an index.</source>
          <target state="translated">인덱스의 항목 순서와 일치하도록 비교 연산자 (예 : &quot; &lt;b&gt;&amp;lt;&lt;/b&gt; &quot;, &quot; &lt;b&gt;==&lt;/b&gt; &quot;등) 의 동작을 수정합니다 .</target>
        </trans-unit>
        <trans-unit id="6a8e8cd65707752281f4a6188d7da381520e451a" translate="yes" xml:space="preserve">
          <source>Fix the behavior of typeof() and length() on virtual tables. Ticket &lt;a href=&quot;https://sqlite.org/src/info/69d642332d25aa3b7315a6d385&quot;&gt;69d642332d25aa3b7315a6d385&lt;/a&gt;</source>
          <target state="translated">가상 테이블에서 typeof () 및 length ()의 동작을 수정하십시오. 티켓 &lt;a href=&quot;https://sqlite.org/src/info/69d642332d25aa3b7315a6d385&quot;&gt;69d642332d25aa3b7315a6d385&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="df05e2dc4f6d16d80624e7984c8465e501af7d3b" translate="yes" xml:space="preserve">
          <source>Fix the build so that it works with -DSQLITE_OMIT_WAL.</source>
          <target state="translated">-DSQLITE_OMIT_WAL과 작동하도록 빌드를 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="2766a0c67ddd6ed7f5aaccb304bc1ba6ad153261" translate="yes" xml:space="preserve">
          <source>Fix the built-in printf logic so that it prints &quot;NaN&quot; not &quot;Inf&quot; for floating-point NaNs. Ticket #2345</source>
          <target state="translated">부동 소수점 NaN에 대해 &quot;Inf&quot;가 아닌 &quot;NaN&quot;을 인쇄하도록 내장 printf 논리를 수정하십시오. 티켓 # 2345</target>
        </trans-unit>
        <trans-unit id="5bfcd9ce8f5df54205f92dd3b6c0521e656224b0" translate="yes" xml:space="preserve">
          <source>Fix the bytecode generator to deal with a subquery in the FROM clause that is itself a UNION ALL where one side of the UNION ALL is a view that contains an ORDER BY. This is a long-standing issue that was discovered after the release of 3.16.1. See ticket &lt;a href=&quot;https://www.sqlite.org/src/info/190c2507&quot;&gt;190c2507&lt;/a&gt;.</source>
          <target state="translated">UNION ALL의 한 쪽이 ORDER BY를 포함하는 뷰인 FUN 절에서 하위 쿼리를 처리하도록 바이트 코드 생성기를 수정하십시오. 이것은 3.16.1 릴리스 이후에 발견 된 오랜 문제입니다. 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/190c2507&quot;&gt;190c2507을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d203309fb6041974c7687fc93bbf99d6e93873bc" translate="yes" xml:space="preserve">
          <source>Fix the code generator for expressions of the form &quot;x IN (SELECT...)&quot; where the SELECT statement on the RHS is a correlated subquery. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/5e3c886796e5512e&quot;&gt;5e3c886796e5512e&lt;/a&gt;.</source>
          <target state="translated">RHS의 SELECT 문이 상관 부속 조회 인 &quot;x IN (SELECT ...)&quot;형식의 표현식에 대한 코드 생성기를 수정하십시오. 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/5e3c886796e5512e&quot;&gt;5e3c886796e5512e&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="13a43d34f4444938ebdb413873a4acf48769174e" translate="yes" xml:space="preserve">
          <source>Fix the configure script for the amalgamation so that the --readline option works again on Raspberry PIs.</source>
          <target state="translated">--readline 옵션이 Raspberry PI에서 다시 작동하도록 합병에 대한 구성 스크립트를 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="0dffaab8602b04f745c3456ad0e79054b8bf2a09" translate="yes" xml:space="preserve">
          <source>Fix the function prototype for the open(2) system call to agree with POSIX. Without this fix, pthreads does not work correctly on NetBSD.</source>
          <target state="translated">POSIX와 일치하도록 open (2) 시스템 호출의 함수 프로토 타입을 수정하십시오. 이 수정 사항이 없으면 NetBSD에서 pthread가 제대로 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0cdcb447680d92da840bf449347a30236662eba4" translate="yes" xml:space="preserve">
          <source>Fix the locking mechanism yet again to prevent &lt;b&gt;sqlite_exec()&lt;/b&gt; from returning SQLITE_PROTOCOL unnecessarily. This time the bug was a race condition in the locking code. This change affects both POSIX and Windows users.</source>
          <target state="translated">&lt;b&gt;sqlite_exec ()&lt;/b&gt; 가 불필요하게 SQLITE_PROTOCOL을 리턴 하지 않도록 잠금 메커니즘을 다시 수정하십시오 . 이번에는 버그가 잠금 코드의 경쟁 조건이었습니다. 이 변경은 POSIX 및 Windows 사용자 모두에게 영향을줍니다.</target>
        </trans-unit>
        <trans-unit id="007c6c873e32f4b431e8ac6f01127288ee55c964" translate="yes" xml:space="preserve">
          <source>Fix the min() and max() optimizer so that it works when the FROM clause consists of a subquery.</source>
          <target state="translated">FROM 절이 서브 쿼리로 구성 될 때 작동하도록 min () 및 max () 최적화 프로그램을 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="b12f6e9f1f8f67709743497fbebb71ef8c53459f" translate="yes" xml:space="preserve">
          <source>Fix the parser to accept valid &lt;a href=&quot;rowvalue&quot;&gt;row value&lt;/a&gt; syntax. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/7310e2fb3d046a5&quot;&gt;7310e2fb3d046a5&lt;/a&gt;</source>
          <target state="translated">유효한 &lt;a href=&quot;rowvalue&quot;&gt;행 값&lt;/a&gt; 구문 을 허용하도록 구문 분석기를 수정하십시오 . 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/7310e2fb3d046a5&quot;&gt;7310e2fb3d046a5&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="13f421298ab97922575edd88af10f5d60d0152b2" translate="yes" xml:space="preserve">
          <source>Fix the query optimizer to correctly handle constant expressions in the ON clause of a LEFT JOIN. Ticket #2403</source>
          <target state="translated">LEFT JOIN의 ON 절에서 상수 표현식을 올바르게 처리하도록 쿼리 최적화 프로그램을 수정하십시오. 티켓 # 2403</target>
        </trans-unit>
        <trans-unit id="40584ba785f1b7ac57821c3d2f85216f2b32614c" translate="yes" xml:space="preserve">
          <source>Fix the query optimizer to handle rowid comparisons to NULL correctly. Ticket #2404</source>
          <target state="translated">rowid 비교를 NULL로 올바르게 처리하도록 쿼리 최적화 프로그램을 수정하십시오. 티켓 # 2404</target>
        </trans-unit>
        <trans-unit id="dfa9a47acf25a2f05ea48c9410e4c4747561d320" translate="yes" xml:space="preserve">
          <source>Fix the query planner so that IS and IS NULL operators are able to drive an index on a LEFT OUTER JOIN.</source>
          <target state="translated">IS 및 IS NULL 연산자가 LEFT OUTER JOIN에서 인덱스를 구동 할 수 있도록 쿼리 플래너를 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="5653a698bc06b9d4be42b0c1c2f59e7a1e2b1d3a" translate="yes" xml:space="preserve">
          <source>Fix the query planner so that it knows not to use &lt;a href=&quot;optoverview#autoindex&quot;&gt;automatic indexes&lt;/a&gt; on the right table of LEFT JOIN if the WHERE clause uses the &lt;a href=&quot;lang_expr#isisnot&quot;&gt;IS operator&lt;/a&gt;. Fix for &lt;a href=&quot;https://sqlite.org/src/info/ce68383bf6aba&quot;&gt;ce68383bf6aba&lt;/a&gt;.</source>
          <target state="translated">WHERE 절이 &lt;a href=&quot;lang_expr#isisnot&quot;&gt;IS 연산자를&lt;/a&gt; 사용하는 경우 LEFT JOIN의 오른쪽 테이블에서 &lt;a href=&quot;optoverview#autoindex&quot;&gt;자동 인덱스&lt;/a&gt; 를 사용하지 않도록 쿼리 플래너를 수정하십시오 . &lt;a href=&quot;https://sqlite.org/src/info/ce68383bf6aba&quot;&gt;ce68383bf6aba&lt;/a&gt; 수정 .</target>
        </trans-unit>
        <trans-unit id="f099fcbe9d8c0841133d0c1acb48be9e9aec8aff" translate="yes" xml:space="preserve">
          <source>Fix the query planner so that it takes into account dependencies in the arguments to table-valued functions in subexpressions in the WHERE clause. Ticket &lt;a href=&quot;https://www.sqlite.org/src/info/80177f0c226ff54&quot;&gt;80177f0c226ff54&lt;/a&gt;</source>
          <target state="translated">WHERE 절의 하위 표현식에서 테이블 값 함수에 대한 인수의 종속성을 고려하도록 쿼리 플래너를 수정하십시오. 티켓 &lt;a href=&quot;https://www.sqlite.org/src/info/80177f0c226ff54&quot;&gt;80177f0c226ff54&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c51036bc7729aa3fd5a9f1ed633c206de4f498ea" translate="yes" xml:space="preserve">
          <source>Fix the query planner so that it works correctly for IS NOT NULL operators in the ON clause of a LEFT JOIN with the SQLITE_ENABLE_STAT4 compile-time option. &lt;a href=&quot;https://sqlite.org/src/info/65eb38f6e46de8c75e188a17ec&quot;&gt;65eb38f6e46de8c75e188a17ec&lt;/a&gt;</source>
          <target state="translated">SQLITE_ENABLE_STAT4 컴파일 시간 옵션을 사용하여 LEFT JOIN의 ON 절에서 IS NOT NULL 연산자에 대해 올바르게 작동하도록 쿼리 플래너를 수정하십시오. &lt;a href=&quot;https://sqlite.org/src/info/65eb38f6e46de8c75e188a17ec&quot;&gt;65eb38f6e46de8c75e188a17ec&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2e67f4820003d691c4c8b5a0ce32d382b50cc512" translate="yes" xml:space="preserve">
          <source>Fix the regression test suite so that it works with Tcl8.5</source>
          <target state="translated">Tcl8.5에서 작동하도록 회귀 테스트 스위트 수정</target>
        </trans-unit>
        <trans-unit id="6d468d38a1ed912125e5b1192b25781bdc29bb56" translate="yes" xml:space="preserve">
          <source>Fix the schema parser so that it interprets certain (obscure and ill-formed) CREATE TABLE statements the same as legacy. Fix for ticket &lt;a href=&quot;https://www.sqlite.org/src/info/ac661962a2aeab3c331&quot;&gt;ac661962a2aeab3c331&lt;/a&gt;</source>
          <target state="translated">스키마 구문 분석기가 레거시와 동일하게 특정 (불분명하고 형식이 잘못된) CREATE TABLE 문을 해석하도록 수정하십시오. 티켓 수정&lt;a href=&quot;https://www.sqlite.org/src/info/ac661962a2aeab3c331&quot;&gt; ac661962a2aeab3c331에&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="29c5cfa4d69ee4c85bc560fdea69b6008202a144" translate="yes" xml:space="preserve">
          <source>Fix to UPDATE triggers on TEMP tables.</source>
          <target state="translated">TEMP 테이블에서 UPDATE 트리거로 수정되었습니다.</target>
        </trans-unit>
        <trans-unit id="8ac8e543b0bc738b6dc67d65d9b587bde27a9189" translate="yes" xml:space="preserve">
          <source>Fix to the --rbu option of &lt;a href=&quot;sqldiff&quot;&gt;sqldiff&lt;/a&gt;.</source>
          <target state="translated">sqldiff --rbu 옵션으로 &lt;a href=&quot;sqldiff&quot;&gt;수정하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="dce0daf2e8b6a6a74ce23add5bf251c814f89da9" translate="yes" xml:space="preserve">
          <source>Fix two bugs in the locking protocol. (One was masking the other.)</source>
          <target state="translated">잠금 프로토콜에서 두 가지 버그가 수정되었습니다. (하나는 다른 것을 가리고있었습니다.)</target>
        </trans-unit>
        <trans-unit id="140466bf745b30af0254a8472b1f139b069fbb53" translate="yes" xml:space="preserve">
          <source>Fix two bugs, which when combined might result in incorrect query results. Both bugs were harmless by themselves; only when they team up do they cause problems. Ticket #3581.</source>
          <target state="translated">두 가지 버그를 수정하여 결합하면 쿼리 결과가 잘못 될 수 있습니다. 두 버그 모두 스스로 무해했습니다. 그들이 팀을 구성 할 때만 문제를 일으 킵니다. 티켓 # 3581.</target>
        </trans-unit>
        <trans-unit id="e9669895532c079b8fe44ba1553500c34f15f036" translate="yes" xml:space="preserve">
          <source>Fix two long-standing bugs that allow malicious SQL statements to crash the process that is running SQLite. These bugs were announced by a third-party approximately 24 hours after the 3.32.0 release but are not specific to the 3.32.0 release.</source>
          <target state="translated">악의적 인 SQL 문이 SQLite를 실행하는 프로세스를 중단시킬 수있는 두 가지 오래된 버그를 수정합니다. 이러한 버그는 3.32.0 릴리스 이후 약 24 시간 후에 타사에 의해 발표되었지만 3.32.0 릴리스에만 국한된 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="c6b3c2eac5340186aa60ec6ef1bd320d9af1b4cf" translate="yes" xml:space="preserve">
          <source>Fix two problems in the new &lt;a href=&quot;optoverview#leftjoinreduction&quot;&gt;LEFT JOIN strength reduction optimization&lt;/a&gt;. Tickets &lt;a href=&quot;https://sqlite.org/src/info/1e39b966ae9ee739&quot;&gt;1e39b966ae9ee739&lt;/a&gt; and &lt;a href=&quot;https://sqlite.org/src/info/fac496b61722daf2&quot;&gt;fac496b61722daf2&lt;/a&gt;.</source>
          <target state="translated">새로운 &lt;a href=&quot;optoverview#leftjoinreduction&quot;&gt;LEFT JOIN 강도 감소 최적화&lt;/a&gt; 에서 두 가지 문제를 해결하십시오 . 티켓 &lt;a href=&quot;https://sqlite.org/src/info/1e39b966ae9ee739&quot;&gt;1e39b966ae9ee739&lt;/a&gt; 및 &lt;a href=&quot;https://sqlite.org/src/info/fac496b61722daf2&quot;&gt;fac496b61722daf2&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ce60dbf83ec6124a3874f74bb112313a53e7aca8" translate="yes" xml:space="preserve">
          <source>Fix type coercion rules for the IN operator</source>
          <target state="translated">IN 연산자에 대한 수정 유형 강제 규칙</target>
        </trans-unit>
        <trans-unit id="1ef59214b1b8979108ab36722686dbe71717d826" translate="yes" xml:space="preserve">
          <source>Fix typos in documentation.</source>
          <target state="translated">문서에서 오타를 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="c5df6889e7873170528ac5b7149060416fb8a48c" translate="yes" xml:space="preserve">
          <source>Fix typos in the documentation</source>
          <target state="translated">문서에서 오타 수정</target>
        </trans-unit>
        <trans-unit id="a8caeeab6423273de2d0f3b9037854eda089993c" translate="yes" xml:space="preserve">
          <source>Fix uninitialized variables causing malfunctions for various obscure queries</source>
          <target state="translated">불분명 한 다양한 쿼리에 대해 오작동을 일으키는 초기화되지 않은 변수 수정</target>
        </trans-unit>
        <trans-unit id="334faf48b2d08d39ac3f83df69ba4313064d2eca" translate="yes" xml:space="preserve">
          <source>Fix various documentation typos</source>
          <target state="translated">다양한 문서 오타 수정</target>
        </trans-unit>
        <trans-unit id="bfc06020350fd18063be73e1e193870b6478ef89" translate="yes" xml:space="preserve">
          <source>Fix various other minor test script problems.</source>
          <target state="translated">기타 여러 가지 사소한 테스트 스크립트 문제를 해결하십시오.</target>
        </trans-unit>
        <trans-unit id="04a80b08dce7f337318b3de8005ba6821f9088b9" translate="yes" xml:space="preserve">
          <source>Fix warning messages in VC++ 7.0. (Patches from nicolas352001)</source>
          <target state="translated">VC ++ 7.0의 경고 메시지를 수정하십시오. (nicolas352001의 패치)</target>
        </trans-unit>
        <trans-unit id="e356e2b704a2e01de653ed2ebbf706f69ff2717e" translate="yes" xml:space="preserve">
          <source>Fixed &lt;b&gt;sqlite.h&lt;/b&gt; so that it is usable from C++</source>
          <target state="translated">C ++에서 사용할 수 있도록 &lt;b&gt;sqlite.h를&lt;/b&gt; 수정 했습니다.</target>
        </trans-unit>
        <trans-unit id="79e373e30e82498299cb604bd835209f11c2361f" translate="yes" xml:space="preserve">
          <source>Fixed a bug in the &quot;copy&quot; method of the TCL interface.</source>
          <target state="translated">TCL 인터페이스의 &quot;복사&quot;방법의 버그가 수정되었습니다.</target>
        </trans-unit>
        <trans-unit id="c148872cc8b9ab806e9be600a6bc5019b39f4b73" translate="yes" xml:space="preserve">
          <source>Fixed a bug in the processing of LEFT OUTER JOIN</source>
          <target state="translated">LEFT OUTER JOIN 처리 과정에서 버그가 수정되었습니다.</target>
        </trans-unit>
        <trans-unit id="8958f58770783b2b2d9b98f41e760b01637c6fbf" translate="yes" xml:space="preserve">
          <source>Fixed a bug in the query planner that caused performance regressions relative to 3.6.23.1 on some complex joins.</source>
          <target state="translated">쿼리 플래너의 일부 복잡한 조인에서 3.6.23.1에 대한 성능 회귀를 유발하는 버그가 수정되었습니다.</target>
        </trans-unit>
        <trans-unit id="ce57a2f7dac9c404f24a8b0780affccd90fd36f4" translate="yes" xml:space="preserve">
          <source>Fixed a bug that caused database corruption when an &lt;a href=&quot;pragma#pragma_incremental_vacuum&quot;&gt;incremental_vacuum&lt;/a&gt; is rolled back in an in-memory database. Ticket #3761.</source>
          <target state="translated">메모리 내 데이터베이스에서 &lt;a href=&quot;pragma#pragma_incremental_vacuum&quot;&gt;incremental_vacuum&lt;/a&gt; 이 롤백 될 때 데이터베이스가 손상되는 버그를 수정했습니다 . 티켓 # 3761.</target>
        </trans-unit>
        <trans-unit id="47075269c498ed42295ff1e4b7548fb034943cbd" translate="yes" xml:space="preserve">
          <source>Fixed a bug that was causing updates to fail inside of transactions when the database contained a temporary table.</source>
          <target state="translated">데이터베이스에 임시 테이블이 포함되어있을 때 트랜잭션 내부에서 업데이트가 실패하는 버그를 수정했습니다.</target>
        </trans-unit>
        <trans-unit id="479bbff8b43af13fac5ef791395960b4f803b850" translate="yes" xml:space="preserve">
          <source>Fixed a critical bug in the &lt;a href=&quot;https://www.sqlite.org/see/doc/trunk/www/readme.wiki&quot;&gt;SQLite Encryption Extension&lt;/a&gt; that could cause the database to become unreadable and unrecoverable if a &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; command changed the size of the encryption nonce.</source>
          <target state="translated">&lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; 명령이 암호화 nonce의 크기를 변경 한 경우 데이터베이스를 읽을 수없고 복구 할 수없는 &lt;a href=&quot;https://www.sqlite.org/see/doc/trunk/www/readme.wiki&quot;&gt;SQLite Encryption Extension&lt;/a&gt; 의 중요한 버그가 수정 되었습니다.</target>
        </trans-unit>
        <trans-unit id="59729403a0ff39e62d5592f59ad0496bc74d3cb0" translate="yes" xml:space="preserve">
          <source>Fixed a typo in the OS/2 backend.</source>
          <target state="translated">OS / 2 백엔드에서 오타가 수정되었습니다.</target>
        </trans-unit>
        <trans-unit id="639269284376af975435d947ede551d59f7c8a90" translate="yes" xml:space="preserve">
          <source>Fixed an off-by-one error that was causing a coredump in the '%q' format directive of the new &lt;b&gt;sqlite_..._printf()&lt;/b&gt; routines.</source>
          <target state="translated">새로운 &lt;b&gt;sqlite _..._ printf ()&lt;/b&gt; 루틴 의 '% q'형식 지시문에서 코어 덤프를 발생시키는 &lt;b&gt;개별&lt;/b&gt; 오류를 수정했습니다 .</target>
        </trans-unit>
        <trans-unit id="2f93f642c24bc3ca9d72401aa0c30d511f868145" translate="yes" xml:space="preserve">
          <source>Fixed lots of spelling errors in the source-code comments</source>
          <target state="translated">소스 코드 주석에서 많은 철자 오류가 수정되었습니다.</target>
        </trans-unit>
        <trans-unit id="fd59e954365ccfc713ffa89ef7eee7b8910b50c3" translate="yes" xml:space="preserve">
          <source>Fixed naming conflicts so that versions 2.8 and 3.0 can be linked and used together in the same ANSI-C source file.</source>
          <target state="translated">버전 2.8 및 3.0을 동일한 ANSI-C 소스 파일에서 링크하여 함께 사용할 수 있도록 이름 충돌이 수정되었습니다.</target>
        </trans-unit>
        <trans-unit id="8dc0276046c4c36ea547c5cf770bbba66b28361f" translate="yes" xml:space="preserve">
          <source>Fixed performance problems and potential stack overflows when creating &lt;a href=&quot;lang_createview&quot;&gt;views&lt;/a&gt; from multi-row VALUES clauses with hundreds of thousands of rows.</source>
          <target state="translated">수십만 행의 여러 행 VALUES 절에서 &lt;a href=&quot;lang_createview&quot;&gt;뷰&lt;/a&gt; 를 만들 때 성능 문제 및 잠재적 인 스택 오버플로가 수정되었습니다 .</target>
        </trans-unit>
        <trans-unit id="48a5b411b131a16a7c3a81ff9ffe341d205ab7e3" translate="yes" xml:space="preserve">
          <source>Fixed some instances where &lt;b&gt;sqlite_exec()&lt;/b&gt; was returning the wrong error code.</source>
          <target state="translated">&lt;b&gt;sqlite_exec ()&lt;/b&gt; 가 잘못된 오류 코드를 반환하는 일부 인스턴스를 수정했습니다 .</target>
        </trans-unit>
        <trans-unit id="d2abd59d7529d7221419b75d94eed0ee9277c4cd" translate="yes" xml:space="preserve">
          <source>Fixed the &quot;.dump&quot; command in the command-line shell to show indices, triggers and views again.</source>
          <target state="translated">명령 줄 셸에서 &quot;.dump&quot;명령이 인덱스, 트리거 및 뷰를 다시 표시하도록 수정했습니다.</target>
        </trans-unit>
        <trans-unit id="923cc8fbcaf6842679b5f1e15d6df83e508e85ec" translate="yes" xml:space="preserve">
          <source>Fixed the &lt;a href=&quot;lang_delete#truncateopt&quot;&gt;truncate optimization&lt;/a&gt; so that &lt;a href=&quot;c3ref/changes&quot;&gt;sqlite3_changes()&lt;/a&gt; and &lt;a href=&quot;c3ref/total_changes&quot;&gt;sqlite3_total_changes()&lt;/a&gt; interfaces and the &lt;a href=&quot;pragma#pragma_count_changes&quot;&gt;count_changes pragma&lt;/a&gt; return the correct values.</source>
          <target state="translated">&lt;a href=&quot;c3ref/changes&quot;&gt;sqlite3_changes ()&lt;/a&gt; 및 &lt;a href=&quot;c3ref/total_changes&quot;&gt;sqlite3_total_changes ()&lt;/a&gt; 인터페이스와 &lt;a href=&quot;pragma#pragma_count_changes&quot;&gt;count_changes pragma&lt;/a&gt; 가 올바른 값을 반환 하도록 &lt;a href=&quot;lang_delete#truncateopt&quot;&gt;잘라 &lt;/a&gt;내기 최적화를 수정했습니다 .</target>
        </trans-unit>
        <trans-unit id="9e28c4773e158241fde9583f9f170c5ef9db0282" translate="yes" xml:space="preserve">
          <source>Fixed the operator precedence for the ~ operator.</source>
          <target state="translated">~ 연산자의 연산자 우선 순위를 수정했습니다.</target>
        </trans-unit>
        <trans-unit id="7effc13b7d809cd0670d65239ee3df045defba54" translate="yes" xml:space="preserve">
          <source>Fixes for various minor bugs.</source>
          <target state="translated">다양한 사소한 버그 수정.</target>
        </trans-unit>
        <trans-unit id="6db891bdea0dad81fb2181f92e7eface672bbf02" translate="yes" xml:space="preserve">
          <source>Fixes for various other compiler warnings and minor problems associated with obscure configurations.</source>
          <target state="translated">불분명 한 구성과 관련된 다양한 다른 컴파일러 경고 및 사소한 문제에 대한 수정.</target>
        </trans-unit>
        <trans-unit id="2582d7cc3520de6113cfebc05a4c0c40c10d2aea" translate="yes" xml:space="preserve">
          <source>Fixes to the rollback and locking behavior</source>
          <target state="translated">롤백 및 잠금 동작 수정</target>
        </trans-unit>
        <trans-unit id="300a0178f58415dda787e9c4b1d46e58f9cdc26d" translate="yes" xml:space="preserve">
          <source>FkCounter</source>
          <target state="translated">FkCounter</target>
        </trans-unit>
        <trans-unit id="a7826ae0da180dcf999c042085ef7ac58cfd77ff" translate="yes" xml:space="preserve">
          <source>FkIfZero</source>
          <target state="translated">FkIfZero</target>
        </trans-unit>
        <trans-unit id="a774409a00c21de377cf8ed5c6a56b8547973042" translate="yes" xml:space="preserve">
          <source>Flag</source>
          <target state="translated">Flag</target>
        </trans-unit>
        <trans-unit id="502eddf598188b96c0b40f89e8492bff9de3fa43" translate="yes" xml:space="preserve">
          <source>Flags For File Open Operations</source>
          <target state="translated">파일 열기 작업을위한 플래그</target>
        </trans-unit>
        <trans-unit id="9e0bdeb766ef28db46f01b095bdb326b4da9f972" translate="yes" xml:space="preserve">
          <source>Flags consist of zero or more characters that immediately follow the &quot;%&quot; that introduces the substitution. The various flags and their meanings are as follows:</source>
          <target state="translated">플래그는 대체를 소개하는 &quot;%&quot;바로 뒤에 오는 0 개 이상의 문자로 구성됩니다. 다양한 플래그와 그 의미는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e52973142fb5309e0599d0aece55b28093c55ec5" translate="yes" xml:space="preserve">
          <source>Flags for sqlite3_deserialize()</source>
          <target state="translated">sqlite3_deserialize ()의 플래그</target>
        </trans-unit>
        <trans-unit id="763319af81f124ab801773d718a34a5b48132717" translate="yes" xml:space="preserve">
          <source>Flags for sqlite3_serialize</source>
          <target state="translated">sqlite3_serialize에 대한 플래그</target>
        </trans-unit>
        <trans-unit id="f15088d96e03c231ed7711a618b87a23e40d38d1" translate="yes" xml:space="preserve">
          <source>Flags for sqlite3changeset_apply_v2</source>
          <target state="translated">sqlite3changeset_apply_v2에 대한 플래그</target>
        </trans-unit>
        <trans-unit id="9c6b7b2401c21ffe043e97decac28ab2c77bcf8f" translate="yes" xml:space="preserve">
          <source>Flags for sqlite3changeset_start_v2</source>
          <target state="translated">sqlite3changeset_start_v2에 대한 플래그</target>
        </trans-unit>
        <trans-unit id="8565c5e3d19dd91c15d8aea38675feb62cbfe94b" translate="yes" xml:space="preserve">
          <source>Flags for the xAccess VFS method</source>
          <target state="translated">xAccess VFS 메소드의 플래그</target>
        </trans-unit>
        <trans-unit id="caa91d141d9230cced8ac027e0837943663b4e27" translate="yes" xml:space="preserve">
          <source>Flags for the xShmLock VFS method</source>
          <target state="translated">xShmLock VFS 메소드의 플래그</target>
        </trans-unit>
        <trans-unit id="a4c5b52302ff6c09b0d29efa63650e0dd9711b0a" translate="yes" xml:space="preserve">
          <source>Flexible typing is considered a feature of SQLite, not a bug. Nevertheless, we recognize that this feature does sometimes cause confusion and pain for developers who are acustomed to working with other databases that are more judgemental with regard to data types. In retrospect, perhaps it would have been better if SQLite had merely implemented an ANY datatype so that developers could explicitly state when they wanted to use flexible typing, rather than making flexible typing the default. But that is not something that can be changed now without breaking the millions of applications and trillions of database files that already use SQLite's flexible typing feature.</source>
          <target state="translated">유연한 타이핑은 버그가 아닌 SQLite의 기능으로 간주됩니다. 그럼에도 불구하고, 우리는이 기능으로 인해 데이터 유형과 관련하여 더 판단력이있는 다른 데이터베이스를 다루는 데 익숙한 개발자에게 혼란과 고통을 유발할 수 있음을 알고 있습니다. 돌이켜 보면 SQLite가 ANY 데이터 유형을 구현 한 경우 개발자가 유연한 타이핑을 기본값으로 사용하는 대신 유연한 타이핑을 사용하고 싶을 때 명시 적으로 언급 할 수 있다면 더 좋을 것입니다. 그러나 이는 SQLite의 유연한 타이핑 기능을 이미 사용하고있는 수백만 개의 응용 프로그램과 수십억 개의 데이터베이스 파일을 손상시키지 않고 지금 변경할 수있는 것이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="f7fca84542efdc71814460460268fade242aaf16" translate="yes" xml:space="preserve">
          <source>Flexible typing is considered a feature of SQLite, not a bug. Nevertheless, we recognize that this feature does sometimes cause confusion and pain for developers who are acustomed to working with other databases that are more judgmental with regard to data types. In retrospect, perhaps it would have been better if SQLite had merely implemented an ANY datatype so that developers could explicitly state when they wanted to use flexible typing, rather than making flexible typing the default. But that is not something that can be changed now without breaking the millions of applications and trillions of database files that already use SQLite's flexible typing feature.</source>
          <target state="translated">유연한 타이핑은 버그가 아닌 SQLite의 기능으로 간주됩니다. 그럼에도 불구하고 우리는이 기능이 데이터 유형과 관련하여 더 판단적인 다른 데이터베이스로 작업하는 데 익숙한 개발자에게 때때로 혼란과 고통을 야기한다는 것을 알고 있습니다. 돌이켜 보면 SQLite가 단순히 ANY 데이터 유형을 구현하여 개발자가 유연한 입력을 기본값으로 설정하는 대신 유연한 입력을 사용하고 싶을 때 명시 적으로 명시 할 수 있도록했다면 더 좋았을 것입니다. 그러나 이것은 이미 SQLite의 유연한 타이핑 기능을 사용하고있는 수백만 개의 애플리케이션과 수조 개의 데이터베이스 파일을 손상시키지 않고는 지금 변경할 수있는 것이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="595acd952f7adef405182868a3f64d0a5da38dfd" translate="yes" xml:space="preserve">
          <source>Flock locking style. This is used for file-systems that do not support POSIX locking style. Locks are obtained and released using the flock() system call.</source>
          <target state="translated">무리 잠금 스타일. POSIX 잠금 스타일을 지원하지 않는 파일 시스템에 사용됩니다. 잠금은 flock () 시스템 호출을 사용하여 확보 및 해제됩니다.</target>
        </trans-unit>
        <trans-unit id="c57073033af4c5995ecd6e60b89e343929d9d2c9" translate="yes" xml:space="preserve">
          <source>Flush all database file changes to the disk. Wait for those changes to actually be written onto the disk surface.</source>
          <target state="translated">디스크에 대한 모든 데이터베이스 파일 변경 사항을 비 웁니다. 변경 사항이 실제로 디스크 표면에 기록 될 때까지 기다리십시오.</target>
        </trans-unit>
        <trans-unit id="de39ff51371c017e6227bb21dd0f83307b8a58ff" translate="yes" xml:space="preserve">
          <source>Flush caches to disk mid-transaction</source>
          <target state="translated">디스크 중간 트랜잭션으로 캐시 플러시</target>
        </trans-unit>
        <trans-unit id="f57e8f8a92192df5f1207764618acfad2559efdf" translate="yes" xml:space="preserve">
          <source>Follow these steps to create your own virtual table:</source>
          <target state="translated">다음 단계에 따라 고유 한 가상 테이블을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="95cf2c9a54fa89f9d97591c92b0397a9def66730" translate="yes" xml:space="preserve">
          <source>Following a successful call to this function, it is the responsibility of the caller to eventually free the buffer that *ppChangeset points to using &lt;a href=&quot;../c3ref/free&quot;&gt;sqlite3_free()&lt;/a&gt;.</source>
          <target state="translated">이 함수를 성공적으로 호출 한 후 호출자는 * ppChangeset이 &lt;a href=&quot;../c3ref/free&quot;&gt;sqlite3_free ()&lt;/a&gt; 사용을 가리키는 버퍼를 결국 해제해야합니다 .</target>
        </trans-unit>
        <trans-unit id="94243dad6fb7fd03cdf4ccdea9ad8045597be29a" translate="yes" xml:space="preserve">
          <source>Following a successful call to this function, it is the responsibility of the caller to eventually free the buffer that *ppChangeset points to using &lt;a href=&quot;c3ref/free&quot;&gt;sqlite3_free()&lt;/a&gt;.</source>
          <target state="translated">이 함수를 성공적으로 호출 한 후 호출자는 * ppChangeset이 &lt;a href=&quot;c3ref/free&quot;&gt;sqlite3_free ()&lt;/a&gt; 사용을 가리키는 버퍼를 결국 해제해야합니다 .</target>
        </trans-unit>
        <trans-unit id="6ecbb1f3edb4dd34a3fdff354068e2c4ff752166" translate="yes" xml:space="preserve">
          <source>Following a system recovery, if a device sector is deemed to be untrustworthy as defined by A21008 and neither A21011 or A21012 apply to the range of bytes written, then no assumption can be made about the content of the sector following recovery. It is assumed that it is possible for such a sector to be written correctly, not written at all, populated with garbage data or any combination thereof.</source>
          <target state="translated">시스템 복구 후, 장치 섹터가 A21008에 정의 된대로 신뢰할 수없는 것으로 간주되고 A21011 또는 A21012가 기록 된 바이트 범위에 적용되지 않으면 복구 후 섹터의 내용에 대한 가정을 할 수 없습니다. 이러한 섹터는 가비지 데이터 또는 이들의 조합으로 채워져 전혀 기록되지 않고 정확하게 기록 될 수 있다고 가정된다.</target>
        </trans-unit>
        <trans-unit id="1945818b9ff5e13872866426c7d8f1fe8a043f70" translate="yes" xml:space="preserve">
          <source>Following the header is the array of coordinate pairs. Each coordinate is a 32-bit floating point number. The use of 32-bit floating point values for coordinates means that any point on the earth's surface can be mapped with a resolution of approximately 2.5 meters. Higher resolutions are of course possible if the map is restricted to a single continent or country. Note that the resolution of coordinates in the geopoly module is similar in magnitude to daily movement of points on the earth's surface due to tidal forces.</source>
          <target state="translated">헤더 다음에는 좌표 쌍 배열이 있습니다. 각 좌표는 32 비트 부동 소수점 숫자입니다. 좌표에 32 비트 부동 소수점 값을 사용하면 지구 표면의 모든 지점을 약 2.5 미터의 해상도로 매핑 할 수 있습니다. 지도가 단일 대륙 또는 국가로 제한된 경우 더 높은 해상도가 가능합니다. 지오 폴리 모듈의 좌표 분해능은 조력으로 인한 지표면의 일일 점 이동과 크기가 비슷합니다.</target>
        </trans-unit>
        <trans-unit id="581c115a7d0dc8fd1981c305296d4c558b5b086c" translate="yes" xml:space="preserve">
          <source>Following the single big &quot;timeline&quot; query, there are additional queries for each timeline element. Fossil is using the &quot;N+1 Query&quot; pattern rather than trying to grab all the information in as few queries as possible. But that is ok because there is no unnecessary IPC overhead. At the bottom of each timeline page, Fossil shows approximately how long it took to generate the page. For a 50-entry timeline, the latency is usually less than 25 milliseconds. Profiling shows that few of those milliseconds were spent inside the database engine.</source>
          <target state="translated">하나의 큰 &quot;타임 라인&quot;쿼리 다음에 각 타임 라인 요소에 대한 추가 쿼리가 있습니다. Fossil은 가능한 적은 수의 쿼리로 모든 정보를 파악하려고 시도하기보다는 &quot;N + 1 쿼리&quot;패턴을 사용하고 있습니다. 그러나 불필요한 IPC 오버 헤드가 없기 때문에 괜찮습니다. 각 타임 라인 페이지 하단에 Fossil은 페이지를 생성하는 데 걸린 시간을 대략적으로 보여줍니다. 50 개 입력 타임 라인의 경우 대기 시간은 일반적으로 25 밀리 초 미만입니다. 프로파일 링에 따르면 데이터베이스 엔진 내부에서 소비되는 밀리 초는 거의 없습니다.</target>
        </trans-unit>
        <trans-unit id="19775ac9542956e84e3786d1a483a9c9a75b880c" translate="yes" xml:space="preserve">
          <source>For BLOBs smaller than 100KB, reads are faster when the BLOBs are stored directly in the database file. For BLOBs larger than 100KB, reads from a separate file are faster.</source>
          <target state="translated">100KB보다 작은 BLOB의 경우 BLOB를 데이터베이스 파일에 직접 저장하면 읽기 속도가 빨라집니다. 100KB보다 큰 BLOB의 경우 별도의 파일에서 읽는 것이 더 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="395ae193aa1eadd77633da6e02ed51db87786473" translate="yes" xml:space="preserve">
          <source>For SQLite</source>
          <target state="translated">SQLite의 경우</target>
        </trans-unit>
        <trans-unit id="f3c131948733abd40fff7115bdc1ab412d61d9a8" translate="yes" xml:space="preserve">
          <source>For SQLite version 2.6.3 and earlier, all values used the numeric datatype. The text datatype appears in version 2.7.0 and later. In the sequel it is assumed that you are using version 2.7.0 or later of SQLite.</source>
          <target state="translated">SQLite 버전 2.6.3 이하의 경우 모든 값이 숫자 데이터 유형을 사용했습니다. 텍스트 데이터 유형은 버전 2.7.0 이상에 나타납니다. 후속편에서는 버전 2.7.0 이상의 SQLite를 사용하고 있다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="942453851992f474fda1456f6f181f26cf640d20" translate="yes" xml:space="preserve">
          <source>For SQLite versions prior to 3.24.0 (2018-06-04), the only information that an R*Tree index stores about an object is its integer ID and its bounding box. Additional information needs to be stored in separate tables and related to the R*Tree index using the primary key. For the example above, one might create an auxiliary table as follows:</source>
          <target state="translated">3.24.0 (2018-06-04) 이전의 SQLite 버전의 경우 R * Tree 인덱스가 객체에 대해 저장하는 유일한 정보는 정수 ID 및 경계 상자입니다. 추가 정보는 별도의 테이블에 저장하고 기본 키를 사용하여 R * Tree 색인과 관련되어야합니다. 위의 예에서 다음과 같이 보조 테이블을 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="50f58131252372876ea89c95a887df9a9f6004ed" translate="yes" xml:space="preserve">
          <source>For UTF-16 databases, when using the &quot;simple&quot; tokenizer, it is possible to use malformed unicode strings to cause the &lt;a href=&quot;#integcheck&quot;&gt;integrity-check special command&lt;/a&gt; to falsely report corruption, or for &lt;a href=&quot;#snippet&quot;&gt;auxiliary functions&lt;/a&gt; to return incorrect results. More specifically, the bug can be triggered by any of the following:</source>
          <target state="translated">UTF-16 데이터베이스의 경우 &quot;단순&quot;토크 나이저를 사용할 때 잘못된 형식의 유니 코드 문자열을 사용하여 &lt;a href=&quot;#integcheck&quot;&gt;무결성 검사 특수 명령&lt;/a&gt; 이 손상을 잘못보고하거나 &lt;a href=&quot;#snippet&quot;&gt;보조 기능&lt;/a&gt; 이 잘못된 결과를 반환하도록 할 수 있습니다. 보다 구체적으로, 버그는 다음 중 하나에 의해 트리거 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a64fca4030b56c7de05a5fe2b410b314416229df" translate="yes" xml:space="preserve">
          <source>For UTF16 input text to the sqlite3_result_text16(), sqlite3_result_text16be(), sqlite3_result_text16le(), and sqlite3_result_text64() routines, if the text contains invalid UTF16 characters, the invalid characters might be converted into the unicode replacement character, U+FFFD.</source>
          <target state="translated">sqlite3_result_text16 (), sqlite3_result_text16be (), sqlite3_result_text16le () 및 sqlite3_result_text64 () 루틴에 대한 UTF16 입력 텍스트의 경우 텍스트에 잘못된 UTF16 문자가 포함되어 있으면 잘못된 문자가 유니 코드 대체 문자 U + FFFD로 변환 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="55b4a9ef398b6737e332f74269051f6a928aaf6c" translate="yes" xml:space="preserve">
          <source>For a &lt;b&gt;DELETE&lt;/b&gt; change, the payload consists of the PRIMARY KEY fields only. The original values of other fields are not stored as part of a patchset.</source>
          <target state="translated">A에 대한 &lt;b&gt;DELETE&lt;/b&gt; 변화, 페이로드 만 PRIMARY KEY 필드로 구성되어 있습니다. 다른 필드의 원래 값은 패치 세트의 일부로 저장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bad0ea706b018c5833dc966db96c3bbf3f0b2138" translate="yes" xml:space="preserve">
          <source>For a JOIN or INNER JOIN or CROSS JOIN, there is no difference between a constraint expression in the WHERE clause and one in the ON clause. However, for a LEFT JOIN or LEFT OUTER JOIN, the difference is very important. In a LEFT JOIN, the extra NULL row for the right-hand table is added after ON clause processing but before WHERE clause processing. A constraint of the form &quot;left.x=right.y&quot; in an ON clause will therefore allow through the added all-NULL rows of the right table. But if that same constraint is in the WHERE clause a NULL in &quot;right.y&quot; will prevent the expression &quot;left.x=right.y&quot; from being true, and thus exclude that row from the output.</source>
          <target state="translated">JOIN, INNER JOIN 또는 CROSS JOIN의 경우 WHERE 절의 제약 조건 식과 ON 절의 제약 조건 식에는 차이가 없습니다. 그러나 LEFT JOIN 또는 LEFT OUTER JOIN의 경우 그 차이가 매우 중요합니다. LEFT JOIN에서 오른쪽 테이블에 대한 추가 NULL 행은 ON 절 처리 후 WHERE 절 처리 전에 추가됩니다. ON 절에서 &quot;left.x = right.y&quot;형식의 제한 조건은 오른쪽 테이블의 추가 된 모든 NULL 행을 허용합니다. 그러나 동일한 제약 조건이 WHERE 절에있는 경우 &quot;right.y&quot;의 NULL은 &quot;left.x = right.y&quot;표현식이 true가되지 않도록하여 해당 행을 출력에서 ​​제외시킵니다.</target>
        </trans-unit>
        <trans-unit id="2837a8bb64314525a9077bf3440c2ed144dbb1b8" translate="yes" xml:space="preserve">
          <source>For a LEFT OUTER JOIN the situation is more complex. The following two queries are not equivalent:</source>
          <target state="translated">LEFT OUTER JOIN의 경우 상황이 더 복잡합니다. 다음 두 쿼리는 동일하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ad715a95908c984b7542ffaa9563f1288257e6ce" translate="yes" xml:space="preserve">
          <source>For a SELECT query that uses the full-text index, the offsets() function returns a text value containing a series of space-separated integers. For each term in each &lt;a href=&quot;#matchable&quot;&gt;phrase match&lt;/a&gt; of the current row, there are four integers in the returned list. Each set of four integers is interpreted as follows:</source>
          <target state="translated">전체 텍스트 인덱스를 사용하는 SELECT 쿼리의 경우 offsets () 함수는 일련의 공백으로 구분 된 정수를 포함하는 텍스트 값을 반환합니다. 현재 행 &lt;a href=&quot;#matchable&quot;&gt;과 일치&lt;/a&gt; 하는 각 구의 각 용어에 대해 반환 된 목록에 4 개의 정수가 있습니다. 4 개의 정수로 구성된 각 세트는 다음과 같이 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="6eca1d9c3f6f9db89f4bb4081945f8167605d308" translate="yes" xml:space="preserve">
          <source>For a command of the form &quot;REINDEX</source>
          <target state="translated">&quot;REINDEX 형식의 명령</target>
        </trans-unit>
        <trans-unit id="06d5551761da6c159b879a307caa21c04cdacf8a" translate="yes" xml:space="preserve">
          <source>For a commit involving multiple databases and a master journal, if the various databases were on different disk volumes and a power failure occurs during the commit, then when the machine comes back up the disks might be remounted with different names. Or some disks might not be mounted at all. When this happens the individual file journals and the master journal might not be able to find each other. The worst outcome from this scenario is that the commit ceases to be atomic. Some databases might be rolled back and others might not. All databases will continue to be self-consistent. To defend against this problem, keep all databases on the same disk volume and/or remount disks using exactly the same names after a power failure.</source>
          <target state="translated">여러 데이터베이스 및 마스터 저널과 관련된 커밋의 경우 다양한 데이터베이스가 다른 디스크 볼륨에 있고 커밋 중에 전원 장애가 발생하면 시스템이 다시 시작될 때 디스크가 다른 이름으로 다시 마운트 될 수 있습니다. 또는 일부 디스크가 전혀 마운트되지 않았을 수 있습니다. 이 경우 개별 파일 저널과 마스터 저널이 서로를 찾지 못할 수 있습니다. 이 시나리오에서 최악의 결과는 커밋이 원자 적이 지 않다는 것입니다. 일부 데이터베이스는 롤백되고 다른 데이터베이스는 롤백되지 않을 수 있습니다. 모든 데이터베이스는 계속 일관성을 유지합니다. 이 문제를 방지하려면 모든 데이터베이스를 동일한 디스크 볼륨에 유지하거나 정전 후에 정확히 동일한 이름을 사용하여 디스크를 다시 마운트하십시오.</target>
        </trans-unit>
        <trans-unit id="e40bdd6eb01aba5fc405b17e2bcc433fd88a3c9f" translate="yes" xml:space="preserve">
          <source>For a commit involving multiple databases and a super-journal, if the various databases were on different disk volumes and a power failure occurs during the commit, then when the machine comes back up the disks might be remounted with different names. Or some disks might not be mounted at all. When this happens the individual file journals and the super-journal might not be able to find each other. The worst outcome from this scenario is that the commit ceases to be atomic. Some databases might be rolled back and others might not. All databases will continue to be self-consistent. To defend against this problem, keep all databases on the same disk volume and/or remount disks using exactly the same names after a power failure.</source>
          <target state="translated">여러 데이터베이스 및 수퍼 저널을 포함하는 커밋의 경우 다양한 데이터베이스가 다른 디스크 볼륨에 있고 커밋 중에 정전이 발생하면 머신이 백업 될 때 디스크가 다른 이름으로 다시 마운트 될 수 있습니다. 또는 일부 디스크가 전혀 마운트되지 않을 수 있습니다. 이 경우 개별 파일 저널과 수퍼 저널이 서로를 찾지 못할 수 있습니다. 이 시나리오의 최악의 결과는 커밋이 원 자성이 아니라는 것입니다. 일부 데이터베이스는 롤백되고 다른 데이터베이스는 롤백되지 않을 수 있습니다. 모든 데이터베이스는 계속해서 자체 일관성을 유지합니다. 이 문제를 방지하려면 모든 데이터베이스를 동일한 디스크 볼륨에 유지하거나 정전 후 정확히 동일한 이름을 사용하여 디스크를 다시 마운트하십시오.</target>
        </trans-unit>
        <trans-unit id="bb9e9e569c28385b62c9d2cc5d8fba70bcf036db" translate="yes" xml:space="preserve">
          <source>For a directory entry, any value inserted into this field is ignored. Otherwise, if it is set to 0, then the file data or symbolic link target is stored as is in the zip archive and the compression method set to 0. If it is set to 8, then the file data or link target is compressed using deflate compression before it is stored and the compression method set to 8. Finally, if a NULL value is written to this field, the zipfile module automatically decides whether or not to compress the data before storing it.</source>
          <target state="translated">디렉토리 항목의 경우이 필드에 삽입 된 값은 무시됩니다. 그렇지 않으면, 0으로 설정되면 파일 데이터 또는 기호 링크 대상은 zip 아카이브에있는 그대로 저장되고 압축 방법은 0으로 설정됩니다. 8로 설정되면 파일 데이터 또는 링크 대상은 다음을 사용하여 압축됩니다. 압축을 저장하기 전에 압축을 풀고 압축 방법을 8로 설정하십시오. 마지막으로,이 필드에 NULL 값이 기록되면 zipfile 모듈은 데이터를 저장하기 전에 압축할지 여부를 자동으로 결정합니다.</target>
        </trans-unit>
        <trans-unit id="60b588cb6440e5757b3bffacb57c3da76e66f360" translate="yes" xml:space="preserve">
          <source>For a listing of the available dot commands, you can enter &quot;.help&quot; with no arguments. Or enter &quot;.help TOPIC&quot; for detailed information about TOPIC. The list of available dot-commands follows:</source>
          <target state="translated">사용 가능한 도트 명령 목록을 보려면 인수없이 &quot;.help&quot;를 입력하십시오. 또는 TOPIC에 대한 자세한 내용을 보려면 &quot;.help TOPIC&quot;을 입력하십시오. 사용 가능한 도트 명령 목록은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d4baaae0b83211d05bdb6a6f17481963667e90c7" translate="yes" xml:space="preserve">
          <source>For a program that uses an SQLite database as its &lt;a href=&quot;appfileformat&quot;&gt;application file-format&lt;/a&gt;, when a new database instance is first created the &lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt; command is ineffective because the database contain no data from which to gather statistics. In that case, one could construct a large prototype database containing typical data during development and run the &lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt; command on this prototype database to gather statistics, then save the prototype statistics as part of the application. After deployment, when the application goes to create a new database file, it can run the &lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt; command in order to create the statistics tables, then copy the precomputed statistics obtained from the prototype database into these new statistics tables. In that way, statistics from large working data sets can be preloaded into newly created application files.</source>
          <target state="translated">SQLite 데이터베이스를 &lt;a href=&quot;appfileformat&quot;&gt;애플리케이션 파일 형식&lt;/a&gt; 으로 사용하는 프로그램의 경우, 새 데이터베이스 인스턴스가 처음 작성 될 때 데이터베이스에 통계를 수집 할 데이터가 없으므로 &lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt; 명령이 유효하지 않습니다. 이 경우 개발 중에 일반적인 데이터를 포함하는 대형 프로토 타입 데이터베이스를 구성 하고이 프로토 타입 데이터베이스 에서 &lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE&lt;/a&gt; 명령을 실행하여 통계를 수집 한 다음 프로토 타입 통계를 애플리케이션의 일부로 저장할 수 있습니다. 배포 후 응용 프로그램이 새 데이터베이스 파일을 만들 때 &lt;a href=&quot;lang_analyze&quot;&gt;ANALYZE를&lt;/a&gt; 실행할 수 있습니다.명령을 사용하여 통계 테이블을 작성하고 프로토 타입 데이터베이스에서 얻은 사전 계산 된 통계를이 새 통계 테이블에 복사하십시오. 이러한 방식으로 대규모 작업 데이터 세트의 통계를 새로 작성된 애플리케이션 파일에 사전로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a94574556e6541171dc1e77628bd7786ebcc44a5" translate="yes" xml:space="preserve">
          <source>For a row-value &lt;a href=&quot;lang_expr#in_op&quot;&gt;IN operator&lt;/a&gt;, the left-hand side (hereafter &quot;LHS&quot;) can be either a parenthesized list of values or a subquery with multiple columns. But the right-hand side (hereafter &quot;RHS&quot;) must be a subquery expression.</source>
          <target state="translated">행 값 &lt;a href=&quot;lang_expr#in_op&quot;&gt;IN 연산자&lt;/a&gt; 의 경우 왼쪽 (이하 &quot;LHS&quot;)은 괄호로 묶은 값 목록이거나 여러 열이있는 하위 쿼리 일 수 있습니다. 그러나 오른쪽 (이하 &quot;RHS&quot;)은 하위 쿼리 식이어야합니다.</target>
        </trans-unit>
        <trans-unit id="1f6b45d36586c69d55b8983f8d799c1d8e89a8c6" translate="yes" xml:space="preserve">
          <source>For a string value X, the length(X) function returns the number of characters (not bytes) in X prior to the first NUL character. Since SQLite strings do not normally contain NUL characters, the length(X) function will usually return the total number of characters in the string X. For a blob value X, length(X) returns the number of bytes in the blob. If X is NULL then length(X) is NULL. If X is numeric then length(X) returns the length of a string representation of X.</source>
          <target state="translated">문자열 값 X의 경우 length (X) 함수는 첫 번째 NUL 문자 이전의 X에서 문자 수 (바이트가 아님)를 반환합니다. SQLite 문자열에는 일반적으로 NUL 문자가 포함되지 않으므로 length (X) 함수는 일반적으로 문자열 X의 총 문자 수를 반환합니다. Blob 값 X의 경우 length (X)는 Blob의 바이트 수를 반환합니다. X가 NULL이면 length (X)는 NULL입니다. X가 숫자이면 length (X)는 X의 문자열 표현 길이를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="d7e042b4a217a46e364221bac2287b2e16ce5e8f" translate="yes" xml:space="preserve">
          <source>For added readability, also set &quot;.echo on&quot; so that the output contains the original SQL text.</source>
          <target state="translated">가독성을 높이기 위해 출력에 원본 SQL 텍스트가 포함되도록 &quot;.echo on&quot;도 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="464bd448fbdde2a69f1880b4aadf91dc5c60e76e" translate="yes" xml:space="preserve">
          <source>For additional information on how the SQLite library functions, the reader is directed to look at the SQLite source code directly. If you understand the material in this article, you should not have much difficulty in following the sources. Serious students of the internals of SQLite will probably also want to make a careful study of the VDBE opcodes as documented &lt;a href=&quot;opcode&quot;&gt;here&lt;/a&gt;. Most of the opcode documentation is extracted from comments in the source code using a script so you can also get information about the various opcodes directly from the &lt;b&gt;vdbe.c&lt;/b&gt; source file. If you have successfully read this far, you should have little difficulty understanding the rest.</source>
          <target state="translated">SQLite 라이브러리 기능에 대한 추가 정보는 독자가 SQLite 소스 코드를 직접 보도록 지시합니다. 이 기사의 내용을 이해하면 소스를 따르는 데 많은 어려움이 없어야합니다. SQLite 내부의 심각한 학생들은 &lt;a href=&quot;opcode&quot;&gt;여기에&lt;/a&gt; 설명 된대로 VDBE opcode를 신중하게 연구하기를 원할 것입니다 . 대부분의 opcode 문서는 스크립트를 사용하여 소스 코드의 주석에서 추출되므로 &lt;b&gt;vdbe.c&lt;/b&gt; 소스 파일 에서 다양한 opcode에 대한 정보를 직접 얻을 수도 있습니다. 이 글을 성공적으로 읽었다면, 나머지를 이해하는데 어려움이 거의 없을 것입니다.</target>
        </trans-unit>
        <trans-unit id="5cc0c6c827845b6d255c4013e6ccd3c888188ba4" translate="yes" xml:space="preserve">
          <source>For aggregate functions, the &lt;b&gt;xStep&lt;/b&gt; callback is invoked once for each row in the result and then &lt;b&gt;xFinalize&lt;/b&gt; is invoked at the end to compute a final answer. The xStep routine can use the &lt;b&gt;sqlite_aggregate_context()&lt;/b&gt; interface to allocate memory that will be unique to that particular instance of the SQL function. This memory will be automatically deleted after xFinalize is called. The &lt;b&gt;sqlite_aggregate_count()&lt;/b&gt; routine can be used to find out how many rows of data were passed to the aggregate. The xFinalize callback should invoke one of the &lt;b&gt;sqlite_set_result_...&lt;/b&gt; interfaces to set the final result of the aggregate.</source>
          <target state="translated">집계 함수 의 경우 결과의 각 행에 대해 &lt;b&gt;xStep&lt;/b&gt; 콜백이 한 번 호출 된 다음 끝에 최종 응답을 계산하기 위해 &lt;b&gt;xFinalize&lt;/b&gt; 가 호출됩니다. xStep 루틴은 &lt;b&gt;sqlite_aggregate_context ()&lt;/b&gt; 인터페이스를 사용 하여 SQL 함수의 특정 인스턴스에 고유 한 메모리를 할당 할 수 있습니다. 이 메모리는 xFinalize가 호출 된 후 자동으로 삭제됩니다. &lt;b&gt;sqlite_aggregate_count ()&lt;/b&gt; 루틴은 많은 데이터 행이 집계에 전달 된 방법을 찾을 수 있습니다. xFinalize 콜백은 &lt;b&gt;sqlite_set_result _...&lt;/b&gt; 인터페이스 중 하나를 호출 하여 집계의 최종 결과를 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="4a2b8e655022b370f7bf1cade1de14d9df62358a" translate="yes" xml:space="preserve">
          <source>For all of these errors, SQLite attempts to undo just the one statement it was working on and leave changes from prior statements within the same transaction intact and continue with the transaction. However, depending on the statement being evaluated and the point at which the error occurs, it might be necessary for SQLite to rollback and cancel the entire transaction. An application can tell which course of action SQLite took by using the &lt;a href=&quot;c3ref/get_autocommit&quot;&gt;sqlite3_get_autocommit()&lt;/a&gt; C-language interface.</source>
          <target state="translated">이러한 모든 오류에 대해 SQLite는 작업중인 단일 명령문 만 실행 취소하고 동일한 트랜잭션 내에서 이전 명령문의 변경 사항을 그대로두고 트랜잭션을 계속합니다. 그러나 평가중인 명령문과 오류가 발생한 지점에 따라 SQLite가 전체 트랜잭션을 롤백하고 취소해야 할 수도 있습니다. 응용 프로그램은 &lt;a href=&quot;c3ref/get_autocommit&quot;&gt;sqlite3_get_autocommit ()&lt;/a&gt; C 언어 인터페이스 를 사용하여 SQLite가 수행 한 조치 과정을 알 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="edd867afbc99c464b46e982c8bdb271f01de00a1" translate="yes" xml:space="preserve">
          <source>For all versions of SQLite up to and including 3.6.23.1, a call to &lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset()&lt;/a&gt; was required after sqlite3_step() returned anything other than &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_ROW&lt;/a&gt; before any subsequent invocation of sqlite3_step(). Failure to reset the prepared statement using &lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset()&lt;/a&gt; would result in an &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_MISUSE&lt;/a&gt; return from sqlite3_step(). But after &lt;a href=&quot;https://sqlite.org/releaselog/3_6_23_1.html&quot;&gt;version 3.6.23.1&lt;/a&gt; (2010-03-26, sqlite3_step() began calling &lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset()&lt;/a&gt; automatically in this circumstance rather than returning &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_MISUSE&lt;/a&gt;. This is not considered a compatibility break because any application that ever receives an SQLITE_MISUSE error is broken by definition. The &lt;a href=&quot;compile#omit_autoreset&quot;&gt;SQLITE_OMIT_AUTORESET&lt;/a&gt; compile-time option can be used to restore the legacy behavior.</source>
          <target state="translated">SQLite는 모든 버전의 최대 및 3.6.23.1의 호출을 포함 들어 &lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset ()를&lt;/a&gt; sqlite3_step 후 요구되었다 () 이외의 반환 &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_ROW을&lt;/a&gt; sqlite3_step의 후속 호출하기 전에 (). &lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset ()을&lt;/a&gt; 사용하여 준비된 명령문을 재설정하지 못하면 sqlite3_step () 에서 &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_MISUSE가&lt;/a&gt; 리턴됩니다. 그러나 &lt;a href=&quot;https://sqlite.org/releaselog/3_6_23_1.html&quot;&gt;버전 3.6.23.1&lt;/a&gt; (2010-03-26 이후 ), sqlite3_step ()은 &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_MISUSE를&lt;/a&gt; 반환하지 않고이 상황에서 &lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset ()을&lt;/a&gt; 자동으로 호출하기 시작했습니다 . . &lt;a href=&quot;compile#omit_autoreset&quot;&gt;SQLITE_OMIT_AUTORESET&lt;/a&gt;컴파일 타임 옵션을 사용하여 레거시 동작을 복원 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c8ec8a08c58f886e596c21082f16011397cbdb2b" translate="yes" xml:space="preserve">
          <source>For all versions of SQLite up to and including 3.6.23.1, a call to &lt;a href=&quot;reset&quot;&gt;sqlite3_reset()&lt;/a&gt; was required after sqlite3_step() returned anything other than &lt;a href=&quot;../rescode#row&quot;&gt;SQLITE_ROW&lt;/a&gt; before any subsequent invocation of sqlite3_step(). Failure to reset the prepared statement using &lt;a href=&quot;reset&quot;&gt;sqlite3_reset()&lt;/a&gt; would result in an &lt;a href=&quot;../rescode#misuse&quot;&gt;SQLITE_MISUSE&lt;/a&gt; return from sqlite3_step(). But after &lt;a href=&quot;https://sqlite.org/releaselog/3_6_23_1.html&quot;&gt;version 3.6.23.1&lt;/a&gt; (2010-03-26, sqlite3_step() began calling &lt;a href=&quot;reset&quot;&gt;sqlite3_reset()&lt;/a&gt; automatically in this circumstance rather than returning &lt;a href=&quot;../rescode#misuse&quot;&gt;SQLITE_MISUSE&lt;/a&gt;. This is not considered a compatibility break because any application that ever receives an SQLITE_MISUSE error is broken by definition. The &lt;a href=&quot;../compile#omit_autoreset&quot;&gt;SQLITE_OMIT_AUTORESET&lt;/a&gt; compile-time option can be used to restore the legacy behavior.</source>
          <target state="translated">For all versions of SQLite up to and including 3.6.23.1, a call to &lt;a href=&quot;reset&quot;&gt;sqlite3_reset()&lt;/a&gt; was required after sqlite3_step() returned anything other than &lt;a href=&quot;../rescode#row&quot;&gt;SQLITE_ROW&lt;/a&gt; before any subsequent invocation of sqlite3_step(). Failure to reset the prepared statement using &lt;a href=&quot;reset&quot;&gt;sqlite3_reset()&lt;/a&gt; would result in an &lt;a href=&quot;../rescode#misuse&quot;&gt;SQLITE_MISUSE&lt;/a&gt; return from sqlite3_step(). But after &lt;a href=&quot;https://sqlite.org/releaselog/3_6_23_1.html&quot;&gt;version 3.6.23.1&lt;/a&gt; (2010-03-26, sqlite3_step() began calling &lt;a href=&quot;reset&quot;&gt;sqlite3_reset()&lt;/a&gt; automatically in this circumstance rather than returning &lt;a href=&quot;../rescode#misuse&quot;&gt;SQLITE_MISUSE&lt;/a&gt;. This is not considered a compatibility break because any application that ever receives an SQLITE_MISUSE error is broken by definition. The &lt;a href=&quot;../compile#omit_autoreset&quot;&gt;SQLITE_OMIT_AUTORESET&lt;/a&gt;컴파일 타임 옵션을 사용하여 레거시 동작을 복원 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cb3ef573edb29303f7422a9886c28f0ac60f646d" translate="yes" xml:space="preserve">
          <source>For allocators other than &lt;a href=&quot;malloc#memsys5&quot;&gt;memsys5&lt;/a&gt;, all memory allocations are of the same size. Hence, &lt;b&gt;n&lt;/b&gt;=1 and therefore &lt;b&gt;N&lt;/b&gt;=&lt;b&gt;M&lt;/b&gt;. In other words, the memory pool need be no larger than the largest amount of memory in use at any given moment.</source>
          <target state="translated">&lt;a href=&quot;malloc#memsys5&quot;&gt;memsys5&lt;/a&gt; 이외의 할당 자의 경우 모든 메모리 할당 크기가 동일합니다. 따라서 &lt;b&gt;n&lt;/b&gt; = 1이므로 &lt;b&gt;N&lt;/b&gt; = &lt;b&gt;M&lt;/b&gt; 입니다. 즉, 메모리 풀은 주어진 순간에 사용중인 최대 메모리 양보다 크지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="a2e786b5782b352cf04ddbf2d2c01d46af6ed148" translate="yes" xml:space="preserve">
          <source>For an &lt;b&gt;UPDATE&lt;/b&gt; change, the payload consists of the PRIMARY KEY fields and the new values of modified fields only. The original values of modified fields are not stored as part of a patchset.</source>
          <target state="translated">위해 &lt;b&gt;업데이트&lt;/b&gt; , 변경, 페이로드는 PRIMARY KEY 필드 만 변경되는 필드의 새로운 값으로 구성된다. 수정 된 필드의 원래 값은 패치 세트의 일부로 저장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="87c8bcb65c916a4e76edf02935c7238f192ed71f" translate="yes" xml:space="preserve">
          <source>For an UPDATE or DELETE operation on a &lt;a href=&quot;../rowidtable&quot;&gt;rowid table&lt;/a&gt;, the sixth parameter passed to the preupdate callback is the initial &lt;a href=&quot;../lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt; of the row being modified or deleted. For an INSERT operation on a rowid table, or any operation on a WITHOUT ROWID table, the value of the sixth parameter is undefined. For an INSERT or UPDATE on a rowid table the seventh parameter is the final rowid value of the row being inserted or updated. The value of the seventh parameter passed to the callback function is not defined for operations on WITHOUT ROWID tables, or for INSERT operations on rowid tables.</source>
          <target state="translated">&lt;a href=&quot;../rowidtable&quot;&gt;rowid 테이블&lt;/a&gt; 에 대한 UPDATE 또는 DELETE 조작의 경우 사전 갱신 콜백에 전달 된 여섯 번째 매개 변수 는 수정 또는 삭제되는 행 의 초기 &lt;a href=&quot;../lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt; 입니다. rowid 테이블에 대한 INSERT 조작 또는 WITHOUT ROWID 테이블에 대한 조작의 경우, 여섯 번째 매개 변수의 값은 정의되지 않습니다. rowid 테이블의 INSERT 또는 UPDATE의 경우 일곱 번째 매개 변수는 삽입 또는 업데이트되는 행의 최종 rowid 값입니다. 콜백 함수에 전달 된 7 번째 매개 변수의 값은 WITHOUT ROWID 테이블의 조작 또는 rowid 테이블의 INSERT 조작에 대해 정의되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="3fa74a389b030ce220f00901508abe1120507900" translate="yes" xml:space="preserve">
          <source>For an UPDATE or DELETE operation on a &lt;a href=&quot;rowidtable&quot;&gt;rowid table&lt;/a&gt;, the sixth parameter passed to the preupdate callback is the initial &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt; of the row being modified or deleted. For an INSERT operation on a rowid table, or any operation on a WITHOUT ROWID table, the value of the sixth parameter is undefined. For an INSERT or UPDATE on a rowid table the seventh parameter is the final rowid value of the row being inserted or updated. The value of the seventh parameter passed to the callback function is not defined for operations on WITHOUT ROWID tables, or for INSERT operations on rowid tables.</source>
          <target state="translated">&lt;a href=&quot;rowidtable&quot;&gt;rowid 테이블&lt;/a&gt; 에 대한 UPDATE 또는 DELETE 조작의 경우 사전 갱신 콜백에 전달 된 여섯 번째 매개 변수 는 수정 또는 삭제되는 행 의 초기 &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt; 입니다. rowid 테이블에 대한 INSERT 조작 또는 WITHOUT ROWID 테이블에 대한 조작의 경우, 여섯 번째 매개 변수의 값은 정의되지 않습니다. rowid 테이블의 INSERT 또는 UPDATE의 경우 일곱 번째 매개 변수는 삽입 또는 업데이트되는 행의 최종 rowid 값입니다. 콜백 함수에 전달 된 7 번째 매개 변수의 값은 WITHOUT ROWID 테이블의 조작 또는 rowid 테이블의 INSERT 조작에 대해 정의되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="6babaeb551e0ac84ca65632772689ec35209b982" translate="yes" xml:space="preserve">
          <source>For an example of an INSTEAD OF trigger, consider the following schema:</source>
          <target state="translated">INSTEAD OF 트리거의 예를 보려면 다음 스키마를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="1cb2ec7dc6172161d64c33e9d01d6ab6fb648efe" translate="yes" xml:space="preserve">
          <source>For an expression, the datatype of the result is often determined by the outermost operator. For example, arithmetic operators (&quot;+&quot;, &quot;*&quot;, &quot;%&quot;) always return a numeric results. The string concatenation operator (&quot;||&quot;) returns a text result. And so forth. If you are ever in doubt about the datatype of an expression you can use the special &lt;b&gt;typeof()&lt;/b&gt; SQL function to determine what the datatype is. For example:</source>
          <target state="translated">표현식의 경우 결과의 데이터 유형은 종종 가장 바깥 쪽 연산자에 의해 결정됩니다. 예를 들어, 산술 연산자 ( &quot;+&quot;, &quot;*&quot;, &quot;%&quot;)는 항상 숫자 결과를 반환합니다. 문자열 연결 연산자 ( &quot;||&quot;)는 텍스트 결과를 반환합니다. 기타 등등. 표현식의 데이터 유형에 대해 의문이있는 경우 특수 &lt;b&gt;typeof ()&lt;/b&gt; SQL 함수를 사용하여 데이터 유형이 무엇인지 판별 할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8771671648f56259c0348d58066fbd244a9f5761" translate="yes" xml:space="preserve">
          <source>For an inner join, the two queries above would be identical. But special processing applies to the ON and USING clauses of an OUTER join: specifically, the constraints in an ON or USING clause do not apply if the right table of the join is on a null row, but the constraints do apply in the WHERE clause. The net effect is that putting the ON or USING clause expressions for a LEFT JOIN in the WHERE clause effectively converts the query to an ordinary INNER JOIN - albeit an inner join that runs more slowly.</source>
          <target state="translated">내부 조인의 경우 위의 두 쿼리는 동일합니다. 그러나 특수 처리는 OUTER 조인의 ON 및 USING 절에 적용됩니다. 특히, 조인의 오른쪽 테이블이 널 (NULL) 행에있는 경우 ON 또는 USING 절의 제한 조건이 적용되지 않지만 WHERE 절에 제한 조건이 적용됩니다. . 결과적으로 WHERE 절에 LEFT JOIN에 ON 또는 USING 절 표현식을 넣으면 쿼리가 일반 INNER JOIN으로 효과적으로 변환됩니다 (내부 조인은 더 느리게 실행 됨).</target>
        </trans-unit>
        <trans-unit id="a4c04f89a73080a41ad80cd0704141b22ed403a6" translate="yes" xml:space="preserve">
          <source>For an ordinary on-disk database file, the serialization is just a copy of the disk file. For an in-memory database or a &quot;TEMP&quot; database, the serialization is the same sequence of bytes which would be written to disk if that database where backed up to disk.</source>
          <target state="translated">일반적인 온 디스크 데이터베이스 파일의 경우 직렬화는 디스크 파일의 사본 일뿐입니다. 메모리 내 데이터베이스 또는 &quot;TEMP&quot;데이터베이스의 경우 직렬화는 해당 데이터베이스가 디스크에 백업 된 경우 디스크에 기록되는 바이트 시퀀스와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="363689c9e649bf1c45ea48634a5a7f396dccdc2a" translate="yes" xml:space="preserve">
          <source>For any given SQL statement, there might be hundreds or thousands or even millions of different algorithms of performing the operation. All of these algorithms will get the correct answer, though some will run faster than others. The query planner is an &lt;a href=&quot;https://en.wikipedia.org/wiki/Artificial_intelligence&quot;&gt;AI&lt;/a&gt; that tries to pick the fastest and most efficient algorithm for each SQL statement.</source>
          <target state="translated">주어진 SQL 문에 대해 조작을 수행하는 수백 또는 수천 또는 수백만 가지의 다른 알고리즘이있을 수 있습니다. 이러한 알고리즘은 모두 정답을 얻지 만 일부 알고리즘은 다른 알고리즘보다 빠르게 실행됩니다. 쿼리 플래너는 각 SQL 문에 대해 가장 빠르고 효율적인 알고리즘을 선택하려고 하는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Artificial_intelligence&quot;&gt;AI&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="20178a76e031f6e0dd46cd965f669f77257d11d8" translate="yes" xml:space="preserve">
          <source>For any given query, the fact that the OR-clause optimization described here can be used does not guarantee that it will be used. SQLite uses a cost-based query planner that estimates the CPU and disk I/O costs of various competing query plans and chooses the plan that it thinks will be the fastest. If there are many OR terms in the WHERE clause or if some of the indices on individual OR-clause subterms are not very selective, then SQLite might decide that it is faster to use a different query algorithm, or even a full-table scan. Application developers can use the &lt;a href=&quot;lang_explain&quot;&gt;EXPLAIN QUERY PLAN&lt;/a&gt; prefix on a statement to get a high-level overview of the chosen query strategy.</source>
          <target state="translated">주어진 쿼리에 대해 여기에 설명 된 OR 절 최적화를 사용할 수 있다고해서 이것이 사용될 것이라는 보장은 없습니다. SQLite는 다양한 경쟁 쿼리 계획의 CPU 및 디스크 I / O 비용을 추정하고 가장 빠른 계획을 선택하는 비용 기반 쿼리 플래너를 사용합니다. WHERE 절에 많은 OR 용어가 있거나 개별 OR 절 하위 용어의 일부 인덱스가 매우 선택적이지 않은 경우 SQLite는 다른 쿼리 알고리즘 또는 전체 테이블 스캔을 사용하는 것이 더 빠르다고 결정할 수 있습니다. 응용 프로그램 개발자는 명령문 에서 &lt;a href=&quot;lang_explain&quot;&gt;EXPLAIN QUERY PLAN 접&lt;/a&gt; 두부를 사용 하여 선택된 조회 전략에 대한 상위 레벨 개요를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="16c7cb0ca5e5ce3a2a0070ff33c0953ef0a2395f" translate="yes" xml:space="preserve">
          <source>For any historical version of SQLite, the source tree can be obtained from the &lt;a href=&quot;http://www.fossil-scm.org/&quot;&gt;Fossil&lt;/a&gt; version control system, either downloading a tarball or ZIP archive for a specific version, or by cloning the entire project history.</source>
          <target state="translated">모든 SQLite 히스토리 버전의 경우 소스 트리는 특정 버전에 대한 tarball 또는 ZIP 아카이브를 다운로드하거나 전체 프로젝트 히스토리를 복제하여 &lt;a href=&quot;http://www.fossil-scm.org/&quot;&gt;Fossil&lt;/a&gt; 버전 제어 시스템 에서 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6136d5ebef73dfa5b00893d194ed16a2a41f54ee" translate="yes" xml:space="preserve">
          <source>For auxiliary columns, only the name of the column matters. The &lt;a href=&quot;datatype3#affinity&quot;&gt;type affinity&lt;/a&gt; is ignored. Constraints such as NOT NULL, UNIQUE, REFERENCES, or CHECK are also ignored. However, future versions of SQLite might start paying attention to the type affinity and constraints, so users of auxiliary columns are advised to leave both blank, to avoid future compatibility problems.</source>
          <target state="translated">보조 열의 경우 열 이름 만 중요합니다. &lt;a href=&quot;datatype3#affinity&quot;&gt;유형 선호도는&lt;/a&gt; 무시됩니다. NOT NULL, UNIQUE, REFERENCES 또는 CHECK와 같은 제약 조건도 무시됩니다. 그러나 향후 버전의 SQLite는 유형 선호도와 제약 조건에주의를 기울이기 시작할 수 있으므로 보조 열 사용자는 향후 호환성 문제를 방지하기 위해 두 열을 모두 비워 두는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="38f9906eb0f1f05679eef0c31ffe0e8cfcb13adf" translate="yes" xml:space="preserve">
          <source>For backwards compatibility with older versions of SQLite that lack the &lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_initialize()&lt;/a&gt; interface, the &lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_initialize()&lt;/a&gt; interface is called automatically upon entry to certain key interfaces such as &lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open()&lt;/a&gt;, &lt;a href=&quot;c3ref/vfs_find&quot;&gt;sqlite3_vfs_register()&lt;/a&gt;, and &lt;a href=&quot;c3ref/mprintf&quot;&gt;sqlite3_mprintf()&lt;/a&gt;. The overhead of invoking &lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_initialize()&lt;/a&gt; automatically in this way may be omitted by building SQLite with the SQLITE_OMIT_AUTOINIT C-preprocessor macro. When built using SQLITE_OMIT_AUTOINIT, SQLite will not automatically initialize itself and the application is required to invoke &lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_initialize()&lt;/a&gt; directly prior to beginning use of the SQLite library.</source>
          <target state="translated">&lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_initialize ()&lt;/a&gt; 인터페이스 가없는 이전 버전의 SQLite와의 호환성을 위해 &lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_initialize ()&lt;/a&gt; 인터페이스는 &lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open ()&lt;/a&gt; , &lt;a href=&quot;c3ref/vfs_find&quot;&gt;sqlite3_vfs_register ()&lt;/a&gt; 및 &lt;a href=&quot;c3ref/mprintf&quot;&gt;sqlite3_mprintf ()&lt;/a&gt; 와 같은 특정 키 인터페이스에 진입하면 자동으로 호출됩니다 . 이러한 방식으로 &lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_initialize ()를&lt;/a&gt; 자동으로 호출하는 오버 헤드는 SQLITE_OMIT_AUTOINIT C 전 처리기 매크로를 사용하여 SQLite를 빌드하여 생략 할 수 있습니다. SQLITE_OMIT_AUTOINIT를 사용하여 빌드 할 때 SQLite는 자동으로 자체 초기화되지 않으며 SQLite 라이브러리를 사용하기 전에 &lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_initialize ()를&lt;/a&gt; 직접 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="2d1531a5da60e68beb6877ebc84583e140b012b5" translate="yes" xml:space="preserve">
          <source>For best security, do not use this method unless truly needed, and run &lt;a href=&quot;pragma#pragma_trusted_schema&quot;&gt;PRAGMA trusted_schema=OFF&lt;/a&gt; or the &quot;&lt;a href=&quot;#config&quot;&gt;db config trusted_schema 0&lt;/a&gt;&quot; method &lt;u&gt;before&lt;/u&gt; invoking this method.</source>
          <target state="translated">최상의 보안을 위해 꼭 필요한 경우가 아니면이 메서드를 사용하지 &lt;a href=&quot;#config&quot;&gt;말고이&lt;/a&gt; 메서드 &lt;u&gt;를&lt;/u&gt; 호출 &lt;u&gt;하기 전에 &lt;/u&gt;&lt;a href=&quot;pragma#pragma_trusted_schema&quot;&gt;PRAGMA trusted_schema = OFF&lt;/a&gt; 또는 &quot; db config trusted_schema 0 &quot;메서드 &lt;u&gt;를&lt;/u&gt; 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="9c2a0d57a438475dac09b9669a68b59949b61514" translate="yes" xml:space="preserve">
          <source>For best security, the &lt;a href=&quot;#sqlitedirectonly&quot;&gt;SQLITE_DIRECTONLY&lt;/a&gt; flag is recommended for all application-defined SQL functions that do not need to be used inside of triggers, view, CHECK constraints, or other elements of the database schema. This flags is especially recommended for SQL functions that have side effects or reveal internal application state. Without this flag, an attacker might be able to modify the schema of a database file to include invocations of the function with parameters chosen by the attacker, which the application will then execute when the database file is opened and read.</source>
          <target state="translated">최상의 보안을 위해 &lt;a href=&quot;#sqlitedirectonly&quot;&gt;SQLITE_DIRECTONLY&lt;/a&gt; 플래그는 트리거, 뷰, CHECK 제약 조건 또는 데이터베이스 스키마의 다른 요소 내에서 사용할 필요가없는 모든 애플리케이션 정의 SQL 함수에 권장됩니다. 이 플래그는 특히 부작용이 있거나 내부 애플리케이션 상태를 나타내는 SQL 함수에 권장됩니다. 이 플래그가 없으면 공격자는 데이터베이스 파일의 스키마를 수정하여 공격자가 선택한 매개 변수를 사용하여 함수 호출을 포함 할 수 있으며, 데이터베이스 파일을 열고 읽을 때 애플리케이션이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="a82f5f85ed3a810b5bb82f46aed446a44b2ed973" translate="yes" xml:space="preserve">
          <source>For best security, the &lt;a href=&quot;c_deterministic#sqlitedirectonly&quot;&gt;SQLITE_DIRECTONLY&lt;/a&gt; flag is recommended for all application-defined SQL functions that do not need to be used inside of triggers, view, CHECK constraints, or other elements of the database schema. This flags is especially recommended for SQL functions that have side effects or reveal internal application state. Without this flag, an attacker might be able to modify the schema of a database file to include invocations of the function with parameters chosen by the attacker, which the application will then execute when the database file is opened and read.</source>
          <target state="translated">최상의 보안을 위해 &lt;a href=&quot;c_deterministic#sqlitedirectonly&quot;&gt;SQLITE_DIRECTONLY&lt;/a&gt; 플래그는 트리거, 뷰, CHECK 제약 조건 또는 데이터베이스 스키마의 다른 요소 내에서 사용할 필요가없는 모든 애플리케이션 정의 SQL 함수에 권장됩니다. 이 플래그는 특히 부작용이 있거나 내부 애플리케이션 상태를 나타내는 SQL 함수에 권장됩니다. 이 플래그가 없으면 공격자는 데이터베이스 파일의 스키마를 수정하여 공격자가 선택한 매개 변수를 사용하여 함수 호출을 포함 할 수 있으며, 데이터베이스 파일을 열고 읽을 때 애플리케이션이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="ad7a915b64d6fe6bb79ac5b4ba72d86b2b8e4dad" translate="yes" xml:space="preserve">
          <source>For bitmask tests, &lt;code&gt;testcase()&lt;/code&gt; macros are used to verify that every bit of the bitmask affects the outcome. For example, in the following block of code, the condition is true if the mask contains either of two bits indicating either a MAIN_DB or a TEMP_DB is being opened. The &lt;code&gt;testcase()&lt;/code&gt; macros that precede the if statement verify that both cases are tested:</source>
          <target state="translated">비트 마스크 테스트의 경우 &lt;code&gt;testcase()&lt;/code&gt; 매크로를 사용하여 비트 마스크의 모든 비트가 결과에 영향을 미치는지 확인합니다. 예를 들어, 다음 코드 블록에서 마스크에 MAIN_DB 또는 TEMP_DB가 열려 있음을 나타내는 두 비트 중 하나가 포함되어 있으면 조건이 참입니다. if 문 앞에 나오는 &lt;code&gt;testcase()&lt;/code&gt; 매크로는 두 경우 모두 테스트되었는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="1eab60de14b7b002b878e809e16b0c4001fb65d3" translate="yes" xml:space="preserve">
          <source>For both text and numeric values, NULL sorts before any other value. A comparison of any value against NULL using operators like &quot;&amp;lt;&quot; or &quot;&amp;gt;=&quot; is always false.</source>
          <target state="translated">텍스트 및 숫자 값의 경우 NULL은 다른 값보다 먼저 정렬됩니다. &quot;&amp;lt;&quot;또는 &quot;&amp;gt; =&quot;와 같은 연산자를 사용하여 NULL에 대한 값을 비교하는 것은 항상 false입니다.</target>
        </trans-unit>
        <trans-unit id="0001dc558eb2ab6e42a7bb8e2fadd29ee6f23dde" translate="yes" xml:space="preserve">
          <source>For brevity, the diagrams in this section are simplified from those that came before. Blue color still signifies original content and pink still signifies new content. But the individual pages in the rollback journal and the database file are not shown and we are not making the distinction between information in the operating system cache and information that is on disk. All of these factors still apply in a multi-file commit scenario. They just take up a lot of space in the diagrams and they do not add any new information, so they are omitted here.</source>
          <target state="translated">간결하게하기 위해이 섹션의 다이어그램은 이전의 다이어그램에서 단순화되었습니다. 파란색은 여전히 ​​원본 콘텐츠를 나타내고 분홍색은 여전히 ​​새 콘텐츠를 나타냅니다. 그러나 롤백 저널의 개별 페이지와 데이터베이스 파일은 표시되지 않으며 운영 체제 캐시의 정보와 디스크의 정보를 구분하지 않습니다. 이러한 모든 요소는 여전히 다중 파일 커밋 시나리오에 적용됩니다. 그들은 다이어그램에서 많은 공간을 차지하고 새로운 정보를 추가하지 않으므로 여기에서 생략됩니다.</target>
        </trans-unit>
        <trans-unit id="4e31069a755a0df659f64899fd564b4a8cf6e824" translate="yes" xml:space="preserve">
          <source>For command-line usage, add the short style command-line options immediately following the &quot;-A&quot;, without an intervening space. All subsequent arguments are considered to be part of the .archive command. For example, the following commands are equivalent:</source>
          <target state="translated">명령 줄 사용의 경우 공백없이 &quot;-A&quot;바로 다음에 짧은 스타일 명령 줄 옵션을 추가하십시오. 이후의 모든 인수는 .archive 명령의 일부로 간주됩니다. 예를 들어 다음 명령은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="b9d0d974a63b482f33f7f36907a5721a5611077f" translate="yes" xml:space="preserve">
          <source>For commit records, the size of the database file in pages after the commit. For all other records, zero.</source>
          <target state="translated">커밋 레코드의 경우 커밋 후 페이지의 데이터베이스 파일 크기입니다. 다른 모든 레코드의 경우 0입니다.</target>
        </trans-unit>
        <trans-unit id="e91c377baed35ec4162bb3c1ca2f7aeb4671aa6f" translate="yes" xml:space="preserve">
          <source>For compatibility with older &lt;a href=&quot;vtab&quot;&gt;virtual table&lt;/a&gt; implementations, this flag is turned on temporarily while the &lt;a href=&quot;vtab#xrename&quot;&gt;sqlite3_module.xRename&lt;/a&gt; method is being run. The value of this flag is restore after the &lt;a href=&quot;vtab#xrename&quot;&gt;sqlite3_module.xRename&lt;/a&gt; method finishes.</source>
          <target state="translated">이전 &lt;a href=&quot;vtab&quot;&gt;가상 테이블&lt;/a&gt; 구현 과의 호환성 을 위해 &lt;a href=&quot;vtab#xrename&quot;&gt;sqlite3_module.xRename&lt;/a&gt; 메소드가 실행되는 동안이 플래그가 일시적으로 켜집니다 . 이 플래그의 값은 &lt;a href=&quot;vtab#xrename&quot;&gt;sqlite3_module.xRename&lt;/a&gt; 메소드가 완료된 후 복원 됩니다.</target>
        </trans-unit>
        <trans-unit id="da9484ca4033054fc98b8e99fd5bf556ff20f8cb" translate="yes" xml:space="preserve">
          <source>For completeness, some of the higher level formatting information contains in the &lt;a href=&quot;fileformat2&quot;&gt;file format&lt;/a&gt; document and elsewhere is replicated here, when it pertains to WAL mode processing.</source>
          <target state="translated">완성도를 높이기 위해 일부 상위 레벨 형식화 정보는 &lt;a href=&quot;fileformat2&quot;&gt;파일 형식&lt;/a&gt; 문서에 포함되며 WAL 모드 처리와 관련하여 여기에 복제됩니다.</target>
        </trans-unit>
        <trans-unit id="e99fbef35a40e331c478cf6f191e30ae20bee3b1" translate="yes" xml:space="preserve">
          <source>For correct operation of the &lt;a href=&quot;cli#sqlar&quot;&gt;.archive command&lt;/a&gt;, make a copy of the &lt;a href=&quot;https://zlib.net&quot;&gt;zlib source code&lt;/a&gt; into the compat/zlib subdirectory of the source tree and compile this way:</source>
          <target state="translated">&lt;a href=&quot;cli#sqlar&quot;&gt;.archive 명령이&lt;/a&gt; 올바르게 작동 하려면 &lt;a href=&quot;https://zlib.net&quot;&gt;zlib 소스 코드&lt;/a&gt; 의 사본을 소스 트리의 compat / zlib 서브 디렉토리에 작성하고 다음과 같이 컴파일하십시오.</target>
        </trans-unit>
        <trans-unit id="a28c51fc9c57d328cc18317fd43208e2e391d0d1" translate="yes" xml:space="preserve">
          <source>For device-local storage with low writer concurrency and less than a terabyte of content, SQLite is almost always a better solution. SQLite is fast and reliable and it requires no configuration or maintenance. It keeps thing simple. SQLite &quot;just works&quot;.</source>
          <target state="translated">라이터 동시성이 적고 테라 바이트 미만의 컨텐츠를 가진 장치 로컬 스토리지의 경우 SQLite는 거의 항상 더 나은 솔루션입니다. SQLite는 빠르고 안정적이며 구성이나 유지 관리가 필요 없습니다. 일을 단순하게 유지합니다. SQLite는 &quot;그냥 작동합니다.&quot;</target>
        </trans-unit>
        <trans-unit id="72afef4549faaf3eb91dc5ed7c4f9e5ba9217a77" translate="yes" xml:space="preserve">
          <source>For device-local storage with low writer concurrency and less than a terabyte of content, SQLite is almost always a better solution. SQLite is fast and reliable and it requires no configuration or maintenance. It keeps things simple. SQLite &quot;just works&quot;.</source>
          <target state="translated">쓰기 동시성이 낮고 테라 바이트 미만의 콘텐츠를 사용하는 장치 로컬 저장소의 경우 SQLite가 거의 항상 더 나은 솔루션입니다. SQLite는 빠르고 안정적이며 구성이나 유지 관리가 필요하지 않습니다. 그것은 일을 간단하게 유지합니다. SQLite는 &quot;그냥 작동&quot;합니다.</target>
        </trans-unit>
        <trans-unit id="14026abb0078c30fcbc6bf88b3e2948c23e3f5c6" translate="yes" xml:space="preserve">
          <source>For doclists for which the term appears in more than one column of the FTS virtual table, term-offset lists within the doclist are stored in column number order. This ensures that the term-offset list associated with column 0 (if any) is always first, allowing the first two fields of the term-offset list to be omitted in this case.</source>
          <target state="translated">용어가 FTS 가상 테이블의 둘 이상의 열에 나타나는 문서 목록의 경우 문서 목록 내의 용어 오프셋 목록은 열 번호 순서로 저장됩니다. 이렇게하면 열 0과 연관된 용어 오프셋 목록 (있는 경우)이 항상 첫 번째이므로 용어 오프셋 목록의 처음 두 필드를 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="89b4ec40df531b5b987432b4a7fed5ea5b3e27ac" translate="yes" xml:space="preserve">
          <source>For each DELETE change, the function checks if the target database contains a row with the same primary key value (or values) as the original row values stored in the changeset. If it does, and the values stored in all non-primary key columns also match the values stored in the changeset the row is deleted from the target database.</source>
          <target state="translated">각 DELETE 변경에 대해 함수는 대상 데이터베이스에 변경 세트에 저장된 원래 행 값과 동일한 기본 키 값이있는 행이 있는지 확인합니다. 일치하는 경우 기본이 아닌 모든 키 열에 저장된 값도 변경 세트에 저장된 값과 일치하며 행이 대상 데이터베이스에서 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="1fb2d165bb57742263f5c19d2ad3dc7e863bddd8" translate="yes" xml:space="preserve">
          <source>For each FTS virtual table in a database, three to five real (non-virtual) tables are created to store the underlying data. These real tables are called &quot;shadow tables&quot;. The real tables are named &quot;%_content&quot;, &quot;%_segdir&quot;, &quot;%_segments&quot;, &quot;%_stat&quot;, and &quot;%_docsize&quot;, where &quot;%&quot; is replaced by the name of the FTS virtual table.</source>
          <target state="translated">데이터베이스의 각 FTS 가상 테이블에 대해 기본 데이터를 저장하기 위해 3 ~ 5 개의 실제 (가상이 아닌) 테이블이 생성됩니다. 이러한 실제 테이블을 &quot;새도우 테이블&quot;이라고합니다. 실제 테이블의 이름은 &quot;% _content&quot;, &quot;% _segdir&quot;, &quot;% _segments&quot;, &quot;% _stat&quot;및 &quot;% _docsize&quot;입니다. 여기서 &quot;%&quot;는 FTS 가상 테이블의 이름으로 바뀝니다.</target>
        </trans-unit>
        <trans-unit id="ca14bfe0c8ef783300da3fae2f2faf6123712788" translate="yes" xml:space="preserve">
          <source>For each INSERT change, an attempt is made to insert the new row into the database. If the changeset row contains fewer fields than the database table, the trailing fields are populated with their default values.</source>
          <target state="translated">각 INSERT 변경에 대해 데이터베이스에 새 행을 삽입하려고 시도합니다. 변경 세트 행에 데이터베이스 테이블보다 적은 수의 필드가 포함 된 경우 후행 필드가 기본값으로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="af26a43594c40c8d5075b1d213281d1a0d5d674e" translate="yes" xml:space="preserve">
          <source>For each UPDATE change, the function checks if the target database contains a row with the same primary key value (or values) as the original row values stored in the changeset. If it does, and the values stored in all modified non-primary key columns also match the values stored in the changeset the row is updated within the target database.</source>
          <target state="translated">각 UPDATE 변경에 대해 함수는 대상 데이터베이스에 변경 세트에 저장된 원래 행 값과 동일한 기본 키 값이있는 행이 있는지 확인합니다. 일치하는 경우 수정 된 기본이 아닌 모든 키 열에 저장된 값도 변경 집합에 저장된 값과 일치하며 대상 데이터베이스 내에서 행이 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="4c2b6b338ac313921ef720ea9cbd33ced2c0a043" translate="yes" xml:space="preserve">
          <source>For each UPDATE change, the old.* and new.* values are exchanged.</source>
          <target state="translated">각 UPDATE 변경에 대해 old. * 및 new. * 값이 교환됩니다.</target>
        </trans-unit>
        <trans-unit id="d2a86ead2de9a7fdab60caec05b45cc30754d41b" translate="yes" xml:space="preserve">
          <source>For each cell in the r-tree structure (%_node table), that:</source>
          <target state="translated">r- 트리 구조 (% _node 테이블)의 각 셀에 대해 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="44564b0e8d37eeca09117cb0ce5677dfdd15f643" translate="yes" xml:space="preserve">
          <source>For each change for which there is a compatible table, an attempt is made to modify the table contents according to the UPDATE, INSERT or DELETE change. If a change cannot be applied cleanly, the conflict handler function passed as the fifth argument to sqlite3changeset_apply() may be invoked. A description of exactly when the conflict handler is invoked for each type of change is below.</source>
          <target state="translated">호환 가능한 테이블이있는 각 변경에 대해 UPDATE, INSERT 또는 DELETE 변경에 따라 테이블 내용을 수정하려고 시도합니다. 변경 사항을 완전히 적용 할 수 없으면 sqlite3changeset_apply ()에 다섯 번째 인수로 전달 된 충돌 처리기 함수가 호출 될 수 있습니다. 각 유형의 변경에 대해 충돌 핸들러가 호출되는시기에 대한 설명은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fabf5b0df1d79746c4d3b0f7c3d3e26095a89ed6" translate="yes" xml:space="preserve">
          <source>For each column in a row of the result, the name of that column is used as an index in to array and the value of the column is stored in the corresponding array entry. (Caution: If two or more columns in the result set of a query have the same name, then the last column with that name will overwrite prior values and earlier columns with the same name will be inaccessible.) The special array index * is used to store a list of column names in the order that they appear.</source>
          <target state="translated">결과 행의 각 열에 대해 해당 열의 이름이 배열에 대한 인덱스로 사용되며 열의 값은 해당 배열 항목에 저장됩니다. (주의 : 쿼리 결과 집합의 둘 이상의 열에 동일한 이름이 있으면 해당 이름을 가진 마지막 열이 이전 값을 덮어 쓰고 같은 이름을 가진 이전 열에 액세스 할 수 없습니다.) 특수 배열 인덱스 *가 사용됩니다. 표시되는 순서대로 열 이름 목록을 저장합니다.</target>
        </trans-unit>
        <trans-unit id="c334738444e4ad47d383e7911a76c91bc19cd2c6" translate="yes" xml:space="preserve">
          <source>For each column, the average number of tokens in the text values stored in the column (considering all rows in the FTS4 table). This value is only available when querying FTS4 tables, not FTS3.</source>
          <target state="translated">각 열에 대해 열에 저장된 텍스트 값의 평균 토큰 수 (FTS4 테이블의 모든 행을 고려). 이 값은 FTS3이 아닌 FTS4 테이블을 쿼리 할 때만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7a8f829d184d100e174a5aa5857d53deb24e800d" translate="yes" xml:space="preserve">
          <source>For each column, the length of the longest subsequence of phrase matches that the column value has in common with the query text. For example, if a table column contains the text 'a b c d e' and the query is 'a c &quot;d e&quot;', then the length of the longest common subsequence is 2 (phrase &quot;c&quot; followed by phrase &quot;d e&quot;).</source>
          <target state="translated">각 열에 대해 구문의 가장 긴 하위 시퀀스의 길이는 열 값이 쿼리 텍스트와 공통으로 일치합니다. 예를 들어, 테이블 열에 텍스트 'abcde'가 포함되고 쿼리가 'ac &quot;d e'인 경우 가장 긴 공통 하위 시퀀스의 길이는 2입니다 (구문&quot;c &quot;뒤에 구&quot;d e &quot;).</target>
        </trans-unit>
        <trans-unit id="a1353b0cd18d624357976b5c201f2ed175d084b1" translate="yes" xml:space="preserve">
          <source>For each column, the length of the value stored in the current row of the FTS4 table, in tokens. This value is only available when querying FTS4 tables, not FTS3. And only if the &quot;matchinfo=fts3&quot; directive was not specified as part of the &quot;CREATE VIRTUAL TABLE&quot; statement used to create the FTS4 table.</source>
          <target state="translated">각 열에 대해 FTS4 테이블의 현재 행에 저장된 값의 길이 (토큰)입니다. 이 값은 FTS3이 아닌 FTS4 테이블을 쿼리 할 때만 사용할 수 있습니다. &quot;matchinfo = fts3&quot;지시문이 FTS4 테이블을 작성하는 데 사용 된 &quot;CREATE VIRTUAL TABLE&quot;문의 일부로 지정되지 않은 경우에만 해당됩니다.</target>
        </trans-unit>
        <trans-unit id="6e8b6483ba6be5818f8c523c79ce85a1e7ccc3ba" translate="yes" xml:space="preserve">
          <source>For each distinct combination of a phrase and table column, the following three values:</source>
          <target state="translated">구와 테이블 열의 각 고유 조합에 대해 다음 세 가지 값이 있습니다.</target>
        </trans-unit>
        <trans-unit id="cf92fe281dadfcf306551aea2a8a2fccc4c37192" translate="yes" xml:space="preserve">
          <source>For each distinct combination of a phrase and table column, the number of usable phrase matches that appear in the column. This is usually identical to the first value in each set of three returned by the &lt;a href=&quot;fts3#matchinfo-x&quot; id=&quot;matchinfo-y&quot;&gt;matchinfo 'x' flag&lt;/a&gt;. However, the number of hits reported by the 'y' flag is zero for any phrase that is part of a sub-expression that does not match the current row. This makes a difference for expressions that contain AND operators that are descendants of OR operators. For example, consider the expression:</source>
          <target state="translated">구와 테이블 열의 각 고유 한 조합에 대해 열에 나타나는 사용 가능한 구의 수가 일치합니다. 이것은 보통 &lt;a href=&quot;fts3#matchinfo-x&quot; id=&quot;matchinfo-y&quot;&gt;matchinfo 'x'플래그에&lt;/a&gt; 의해 반환되는 각 세 세트의 첫 번째 값과 동일합니다 . 그러나 'y'플래그로보고되는 적중 수는 현재 행과 일치하지 않는 하위 표현식의 일부인 구에 대해 0입니다. 이는 OR 연산자의 자손 인 AND 연산자를 포함하는 표현식에 차이를 만듭니다. 예를 들어, 다음 표현식을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="fffbd38440022e9244e6e0693275b0d19d1857ad" translate="yes" xml:space="preserve">
          <source>For each modified table, a changeset includes the following:</source>
          <target state="translated">수정 된 각 테이블에 대해 변경 세트에는 다음이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="a24f08d30b83fb31d42fefd2e7c6a4eb2dab4115" translate="yes" xml:space="preserve">
          <source>For each pair of columns identified by a USING clause, the column from the right-hand dataset is omitted from the joined dataset. This is the only difference between a USING clause and its equivalent ON constraint.</source>
          <target state="translated">USING 절로 식별 된 각 열 쌍에 대해 오른쪽 데이터 세트의 열이 결합 된 데이터 세트에서 생략됩니다. 이것은 USING 절과 동등한 ON 제한 조건의 유일한 차이점입니다.</target>
        </trans-unit>
        <trans-unit id="9c5c3e6a930debab2d5dd5b538d4a23999481e17" translate="yes" xml:space="preserve">
          <source>For each primary key recorded as a result of an INSERT operation, the sessions module checks if there is a row with a matching primary key still in the table. If so, an INSERT change is added to the changeset.</source>
          <target state="translated">INSERT 조작의 결과로 기록 된 각 기본 키에 대해 세션 모듈은 테이블에 일치하는 기본 키가있는 행이 있는지 확인합니다. 그렇다면 INSERT 변경 사항이 변경 집합에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="829855e999389ecdd1577f6b633317b639cef854" translate="yes" xml:space="preserve">
          <source>For each primary key recorded as a result of an UPDATE or DELETE operation, the sessions module also checks for a row with a matching primary key within the table. If one can be found, but one or more of the non-PRIMARY KEY fields does not match the original recorded value, an UPDATE is added to the changeset. Or, if there is no row at all with the specified primary key, a DELETE is added to the changeset. If the row does exist but none of the non-PRIMARY KEY fields have been modified, no change is added to the changeset.</source>
          <target state="translated">UPDATE 또는 DELETE 조작의 결과로 기록 된 각 기본 키에 대해 세션 모듈은 또한 테이블 내에서 일치하는 기본 키가있는 행을 확인합니다. 하나를 찾을 수 있지만 기본이 아닌 키 필드 중 하나 이상이 원래 기록 된 값과 일치하지 않으면 UPDATE가 변경 세트에 추가됩니다. 또는 지정된 기본 키가있는 행이 없으면 변경 세트에 DELETE가 추가됩니다. 행이 존재하지만 기본이 아닌 키 필드가 수정되지 않은 경우 변경 세트에 변경 사항이 추가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d07e7398b3da8e6434d5c2443839062a6f35040b" translate="yes" xml:space="preserve">
          <source>For each record generated by an insert, the database is queried for a row with a matching primary key. If one is found, an INSERT change is added to the changeset. If no such row is found, no change is added to the changeset.</source>
          <target state="translated">삽입에 의해 생성 된 각 레코드에 대해 일치하는 기본 키가있는 행에 대해 데이터베이스가 조회됩니다. 발견되면 INSERT 변경 사항이 변경 세트에 추가됩니다. 그러한 행이 없으면 변경 세트에 변경 사항이 추가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9651a17487870ac448b95f61451215a9e031bca7" translate="yes" xml:space="preserve">
          <source>For each record generated by an update or delete, the database is queried for a row with a matching primary key. If such a row is found and one or more of the non-primary key fields have been modified from their original values, an UPDATE change is added to the changeset. Or, if no such row is found in the table, a DELETE change is added to the changeset. If there is a row with a matching primary key in the database, but all fields contain their original values, no change is added to the changeset.</source>
          <target state="translated">업데이트 또는 삭제로 생성 된 각 레코드에 대해 일치하는 기본 키가있는 행에 대해 데이터베이스가 쿼리됩니다. 이러한 행이 발견되고 기본이 아닌 키 필드 중 하나 이상이 원래 값에서 수정 된 경우 UPDATE 변경 사항이 변경 세트에 추가됩니다. 또는 테이블에 해당 행이 없으면 DELETE 변경 사항이 변경 집합에 추가됩니다. 데이터베이스에 일치하는 기본 키가있는 행이 있지만 모든 필드에 원래 값이 포함되어 있으면 변경 세트에 변경 사항이 추가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1d85944e801be901ece01bab4a06681779097370" translate="yes" xml:space="preserve">
          <source>For each record in the first table, do:</source>
          <target state="translated">첫 번째 테이블의 각 레코드에 대해 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="db1b960f818a6af8cfaa2c24a19e780d2703af81" translate="yes" xml:space="preserve">
          <source>For each record in the second table do:</source>
          <target state="translated">두 번째 테이블의 각 레코드에 대해 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="07832e91f880502fa8c96087f4d7417bdd043461" translate="yes" xml:space="preserve">
          <source>For each record in the table, do:</source>
          <target state="translated">테이블의 각 레코드에 대해 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="87586acdd8d3aae53c73008136985fcb94271fa7" translate="yes" xml:space="preserve">
          <source>For each row (primary key) that exists in both tables, but features different non-PK values in each, an UPDATE record is added to the session.</source>
          <target state="translated">두 테이블에 존재하지만 각각 다른 비 PK 값을 갖는 각 행 (기본 키)에 대해 UPDATE 레코드가 세션에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="6b65ebd60d0a165260cae83ea942ac1bc3113efb" translate="yes" xml:space="preserve">
          <source>For each row (primary key) that exists in the to-table but not in the from-table, a DELETE record is added to the session object.</source>
          <target state="translated">To 테이블에는 있지만 From 테이블에는없는 각 행 (1 차 키)에 대해 DELETE 레코드가 세션 오브젝트에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="9d14fe0322a1c66d129265052088ccffec38ab12" translate="yes" xml:space="preserve">
          <source>For each row (primary key) that exists in the to-table but not in the from-table, an INSERT record is added to the session object.</source>
          <target state="translated">To 테이블에는 있지만 From 테이블에는없는 각 행 (1 차 키)에 대해 INSERT 레코드가 세션 오브젝트에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="cf4da03b9da8c161d1cf42bd495a3368247989f4" translate="yes" xml:space="preserve">
          <source>For each row in the FTS table, the %_docsize table contains a corresponding row with the same &quot;docid&quot; value. The &quot;size&quot; field contains a blob consisting of</source>
          <target state="translated">FTS 테이블의 각 행에 대해 % _docsize 테이블에는 동일한 &quot;docid&quot;값을 가진 해당 행이 포함됩니다. &quot;크기&quot;필드는 다음으로 구성된 얼룩을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="a8c233269c53521f30c5ffc0bf77144b7402512d" translate="yes" xml:space="preserve">
          <source>For each row to DELETE from the target database as part of the RBU update, the corresponding data_% table should contain a single record with the &quot;rbu_control&quot; column set to contain integer value 1. The real primary key values of the row to delete should be stored in the corresponding columns of the data_% table. The values stored in the other columns are not used.</source>
          <target state="translated">RBU 업데이트의 일부로 대상 데이터베이스에서 각 행을 삭제하려면 해당 data_ % 테이블에 정수 값 1을 포함하도록 설정된 &quot;rbu_control&quot;열이있는 단일 레코드가 포함되어야합니다. 삭제할 행의 실제 기본 키 값은 data_ % 테이블의 해당 열에 저장됩니다. 다른 열에 저장된 값은 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6a5706b24e2b237dcb339a0ad1090fb73a23781f" translate="yes" xml:space="preserve">
          <source>For each row to INSERT into the target database as part of the RBU update, the corresponding data_% table should contain a single record with the &quot;rbu_control&quot; column set to contain integer value 0. The other columns should be set to the values that make up the new record to insert.</source>
          <target state="translated">RBU 업데이트의 일부로 대상 데이터베이스에 삽입 할 각 행에 대해 해당 data_ % 테이블에는 정수 값 0을 포함하도록 설정된 &quot;rbu_control&quot;열이있는 단일 레코드가 포함되어야합니다. 다른 열은 다음 값을 설정해야합니다. 삽입 할 새 레코드를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="34669c17538b482482cba6957b264502d60d1060" translate="yes" xml:space="preserve">
          <source>For each row to UPDATE from the target database as part of the RBU update, the corresponding data_% table should contain a single record with the &quot;rbu_control&quot; column set to contain a value of type text. The real primary key values identifying the row to update should be stored in the corresponding columns of the data_% table row, as should the new values of all columns being update. The text value in the &quot;rbu_control&quot; column must contain the same number of characters as there are columns in the target database table, and must consist entirely of 'x' and '.' characters (or in some special cases 'd' - see below). For each column that is being updated, the corresponding character is set to 'x'. For those that remain as they are, the corresponding character of the rbu_control value should be set to '.'. For example, given the tables above, the update statement:</source>
          <target state="translated">RBU 업데이트의 일부로 대상 데이터베이스에서 UPDATE 할 각 행에 대해 해당 data_ % 테이블에는 &quot;rbu_control&quot;열이 text 유형의 값을 포함하도록 설정된 단일 레코드가 포함되어야합니다. 업데이트 할 행을 식별하는 실제 기본 키 값은 업데이트중인 모든 열의 새 값과 마찬가지로 data_ % 테이블 행의 해당 열에 저장해야합니다. &quot;rbu_control&quot;열의 텍스트 값은 대상 데이터베이스 테이블의 열과 동일한 수의 문자를 포함해야하며 'x'와 '.'로만 이루어져야합니다. 문자 (또는 특수한 경우 'd'-아래 참조) 업데이트중인 각 열에 대해 해당 문자가 'x'로 설정됩니다. 그대로 남아있는 사람들에게는rbu_control 값의 해당 문자는 '.'로 설정되어야합니다. 예를 들어, 위의 표에서 update 문은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a430b6812c406e37a693a08685ab05caa617b118" translate="yes" xml:space="preserve">
          <source>For each such constraint, the aConstraint[].iColumn field indicates which column appears on the left-hand side of the constraint. The first column of the virtual table is column 0. The rowid of the virtual table is column -1. The aConstraint[].op field indicates which operator is used. The SQLITE_INDEX_CONSTRAINT_* constants map integer constants into operator values. Columns occur in the order they were defined by the call to &lt;a href=&quot;c3ref/declare_vtab&quot;&gt;sqlite3_declare_vtab()&lt;/a&gt; in the &lt;a href=&quot;vtab#xcreate&quot;&gt;xCreate&lt;/a&gt; or &lt;a href=&quot;vtab#xconnect&quot;&gt;xConnect&lt;/a&gt; method. Hidden columns are counted when determining the column index.</source>
          <target state="translated">이러한 각 제약 조건에 대해 aConstraint []. iColumn 필드는 제약 조건의 왼쪽에 표시되는 열을 나타냅니다. 가상 테이블의 첫 번째 열은 열 0입니다. 가상 테이블의 rowid는 열 -1입니다. aConstraint []. op 필드는 사용되는 연산자를 나타냅니다. SQLITE_INDEX_CONSTRAINT_ * 상수는 정수 상수를 연산자 값에 맵핑합니다. &lt;a href=&quot;vtab#xcreate&quot;&gt;xCreate&lt;/a&gt; 또는 &lt;a href=&quot;vtab#xconnect&quot;&gt;xConnect&lt;/a&gt; 메소드 에서 &lt;a href=&quot;c3ref/declare_vtab&quot;&gt;sqlite3_declare_vtab ()&lt;/a&gt; 호출에 의해 정의 된 순서대로 열이 발생합니다 . 열 인덱스를 결정할 때 숨겨진 열이 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="f5aad29ac204438525f336e09bd7bc093d292717" translate="yes" xml:space="preserve">
          <source>For each table in the target database that will be modified by the update, a corresponding table is created within the RBU database. The RBU database table schema is not the same as that of the target database, but is derived from it as &lt;a href=&quot;rbu#database_tables&quot;&gt;described below&lt;/a&gt;.</source>
          <target state="translated">업데이트로 수정 될 대상 데이터베이스의 각 테이블에 대해 해당 테이블이 RBU 데이터베이스 내에 작성됩니다. RBU 데이터베이스 테이블 스키마는 대상 데이터베이스의 스키마와 동일하지 않지만 &lt;a href=&quot;rbu#database_tables&quot;&gt;아래에 설명 된대로&lt;/a&gt; 파생 됩니다 .</target>
        </trans-unit>
        <trans-unit id="f11dacd70a0954440fff36de5fbb6ca308465c38" translate="yes" xml:space="preserve">
          <source>For each table in the target database, the RBU database should contain a table named &quot;data&amp;lt;</source>
          <target state="translated">대상 데이터베이스의 각 테이블에 대해 RBU 데이터베이스에는 &quot;data &amp;lt;</target>
        </trans-unit>
        <trans-unit id="42f788bf7b6ac170ed8ce05feddfec2cba592bef" translate="yes" xml:space="preserve">
          <source>For each table read by the query, the output of EXPLAIN QUERY PLAN includes a record for which the value in the &quot;detail&quot; column begins with either &quot;SCAN&quot; or &quot;SEARCH&quot;. &quot;SCAN&quot; is used for a full-table scan, including cases where SQLite iterates through all records in a table in an order defined by an index. &quot;SEARCH&quot; indicates that only a subset of the table rows are visited. Each SCAN or SEARCH record includes the following information:</source>
          <target state="translated">쿼리에서 읽은 각 테이블에 대해 EXPLAIN QUERY PLAN의 출력에는 &quot;세부 사항&quot;열의 값이 &quot;SCAN&quot;또는 &quot;SEARCH&quot;로 시작하는 레코드가 포함됩니다. &quot;SCAN&quot;은 SQLite가 인덱스에 의해 정의 된 순서대로 테이블의 모든 레코드를 반복하는 경우를 포함하여 전체 테이블 스캔에 사용됩니다. &quot;SEARCH&quot;는 테이블 행의 서브 세트 만 방문 함을 나타냅니다. 각 스캔 또는 검색 레코드에는 다음 정보가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="ecba2625cd566548c3eee164f8360eb376f2aaad" translate="yes" xml:space="preserve">
          <source>For each table that is not excluded by the filter callback, this function tests that the target database contains a compatible table. A table is considered compatible if all of the following are true:</source>
          <target state="translated">필터 콜백에서 제외되지 않은 각 테이블에 대해이 함수는 대상 데이터베이스에 호환 가능한 테이블이 포함되어 있는지 테스트합니다. 다음 모두에 해당하면 테이블이 호환 가능한 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="a67fb3e6d59fc22a676badf1b731424e48e59895" translate="yes" xml:space="preserve">
          <source>For each term in a document, the FTS index maintained by FTS5 stores the rowid of the document, the column number of the column that contains the term and the offset of the term within the column value. The &quot;detail&quot; option may be used to omit some of this information. This reduces the space that the index consumes within the database file, but also reduces the capability and efficiency of the system.</source>
          <target state="translated">문서의 각 용어에 대해 FTS5가 유지 관리하는 FTS 인덱스는 문서의 rowid, 용어를 포함하는 열의 열 번호 및 열 값 내에 용어의 오프셋을 저장합니다. &quot;상세 정보&quot;옵션은이 정보 중 일부를 생략하는 데 사용될 수 있습니다. 이렇게하면 인덱스가 데이터베이스 파일 내에서 사용하는 공간이 줄어들지 만 시스템의 기능과 효율성도 줄어 듭니다.</target>
        </trans-unit>
        <trans-unit id="ec159e8f6dc1a68285f736b240d086ca832050e3" translate="yes" xml:space="preserve">
          <source>For each term present in the FTS table, there are between 2 and N+1 rows in the fts4aux table, where N is the number of user-defined columns in the associated FTS table. An fts4aux table always has the same four columns, as follows, from left to right:</source>
          <target state="translated">FTS 테이블에있는 각 용어에 대해 fts4aux 테이블에 2와 N + 1 개의 행이 있습니다. 여기서 N은 연관된 FTS 테이블의 사용자 정의 열 수입니다. fts4aux 테이블에는 왼쪽에서 오른쪽으로 항상 다음과 같은 네 개의 열이 있습니다.</target>
        </trans-unit>
        <trans-unit id="2bdf0037f493d99e63f11ef023d4ede2161885e4" translate="yes" xml:space="preserve">
          <source>For each token in the input string, the supplied callback xToken() must be invoked. The first argument to it should be a copy of the pointer passed as the second argument to xTokenize(). The third and fourth arguments are a pointer to a buffer containing the token text, and the size of the token in bytes. The 4th and 5th arguments are the byte offsets of the first byte of and first byte immediately following the text from which the token is derived within the input.</source>
          <target state="translated">입력 문자열의 각 토큰에 대해 제공된 콜백 xToken ()을 호출해야합니다. 첫 번째 인수는 xTokenize ()에 두 번째 인수로 전달 된 포인터의 사본이어야합니다. 세 번째와 네 번째 인수는 토큰 텍스트와 토큰 크기 (바이트)를 포함하는 버퍼에 대한 포인터입니다. 4 번째와 5 번째 인수는 입력에서 토큰이 파생 된 텍스트 바로 다음의 첫 번째 바이트와 첫 번째 바이트의 바이트 오프셋입니다.</target>
        </trans-unit>
        <trans-unit id="77d69c67e1a2a185641c2031933b357307710ee5" translate="yes" xml:space="preserve">
          <source>For each token in the text fragment that is part of a phrase match, the &quot;start match&quot; text is inserted into the fragment before the token, and the &quot;end match&quot; text is inserted immediately after it.</source>
          <target state="translated">문구 일치의 일부인 텍스트 조각의 각 토큰에 대해 &quot;시작 일치&quot;텍스트가 토큰 앞에 조각에 삽입되고 &quot;끝 일치&quot;텍스트가 바로 뒤에 삽입됩니다.</target>
        </trans-unit>
        <trans-unit id="4d08b18694ad651bc6411787c4cb9cda3d56703c" translate="yes" xml:space="preserve">
          <source>For embedded systems, consider compiling SQLite with the &lt;a href=&quot;compile#enable_memsys5&quot;&gt;-DSQLITE_ENABLE_MEMSYS5&lt;/a&gt; option and then providing SQLite with a fixed chunk of memory to use as its heap via the &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config&lt;/a&gt;(&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigheap&quot;&gt;SQLITE_CONFIG_HEAP&lt;/a&gt;) interface. This will prevent malicious SQL from executing a denial-of-service attack by using an excessive amount of memory. If (say) 5 MB of memory is provided for SQLite to use, once that much has been consumed, SQLite will start returning SQLITE_NOMEM errors rather than soaking up memory needed by other parts of the application. This also sandboxes SQLite's memory so that a write-after-free error in some other part of the application will not cause problems for SQLite, or vice versa.</source>
          <target state="translated">임베디드 시스템의 경우 &lt;a href=&quot;compile#enable_memsys5&quot;&gt;-DSQLITE_ENABLE_MEMSYS5&lt;/a&gt; 옵션으로 SQLite를 컴파일 한 다음 &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config&lt;/a&gt; ( &lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigheap&quot;&gt;SQLITE_CONFIG_HEAP&lt;/a&gt; ) 인터페이스 를 통해 힙으로 사용할 고정 된 메모리 청크를 SQLite에 제공하는 것을 고려 하십시오 . 이렇게하면 악의적 인 SQL이 과도한 양의 메모리를 사용하여 서비스 거부 공격을 실행하는 것을 방지 할 수 있습니다. (예를 들어) SQLite에 5MB의 메모리가 제공되면 그 양이 소비되면 SQLite는 응용 프로그램의 다른 부분에 필요한 메모리를 채우는 대신 SQLITE_NOMEM 오류를 반환하기 시작합니다. 이것은 또한 SQLite의 메모리를 샌드 박스 화하여 응용 프로그램의 다른 부분에있는 write-after-free 오류가 SQLite에 문제를 일으키지 않거나 그 반대의 경우도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="4c5274d9826ac0360165a29a3e66a8506f1ab799" translate="yes" xml:space="preserve">
          <source>For every successful call to this method, the SQLite core will later invoke the &lt;a href=&quot;vtab#xclose&quot;&gt;xClose&lt;/a&gt; method to destroy the allocated cursor.</source>
          <target state="translated">이 메소드를 성공적으로 호출 할 때마다 SQLite 코어는 나중에 &lt;a href=&quot;vtab#xclose&quot;&gt;xClose&lt;/a&gt; 메소드를 호출 하여 할당 된 커서를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="c6c48664cbefae23df70df3591300d92263e5f4c" translate="yes" xml:space="preserve">
          <source>For example to find the highest paid employee:</source>
          <target state="translated">예를 들어 가장 높은 급여를받는 직원을 찾으려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="2479f1e642da058be56d1001ffac81d069a0ba6c" translate="yes" xml:space="preserve">
          <source>For example, a &lt;a href=&quot;lang_droptable&quot;&gt;DROP TABLE&lt;/a&gt; statement cannot be run while another thread is reading from that table on the same &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; because dropping the table would delete the table out from under the concurrent reader.</source>
          <target state="translated">예를 들어, 테이블을 삭제하면 동시 판독기 아래에서 테이블이 삭제되므로 다른 &lt;a href=&quot;c3ref/sqlite3&quot;&gt;데이터베이스&lt;/a&gt; 가 동일한 데이터베이스 연결 의 해당 테이블에서 다른 스레드를 읽는 동안 &lt;a href=&quot;lang_droptable&quot;&gt;DROP TABLE&lt;/a&gt; 문을 실행할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="6761f7f398c5e173f6115ef00ea11329cb9f3d54" translate="yes" xml:space="preserve">
          <source>For example, a query like the following might be used to find all R*Tree entries that overlap with a circle centered a 45.3,22.9 with a radius of 5.0:</source>
          <target state="translated">예를 들어, 다음과 같은 쿼리를 사용하여 반경이 5.0 인 45.3,22.9를 중심으로하는 원과 겹치는 모든 R * Tree 항목을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="42fbeb339bf81a5c29e36447b781a19ea1d40440" translate="yes" xml:space="preserve">
          <source>For example, adding an &quot;ON UPDATE CASCADE&quot; clause to the foreign key as shown below enhances the example schema from section 1 to allow the user to update the artistid (the parent key of the foreign key constraint) column without breaking referential integrity:</source>
          <target state="translated">예를 들어, 아래 표시된 것처럼 외래 키에 &quot;ON UPDATE CASCADE&quot;절을 추가하면 섹션 1의 예제 스키마가 향상되어 참조 무결성을 손상시키지 않고 아티스트 ID (외래 키 제약 조건의 부모 키) 열을 업데이트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="68a7b041107b28bf1e4e9feea5241e1ae83cb4f3" translate="yes" xml:space="preserve">
          <source>For example, as currently implemented, if writes are happening at a steady stream that exceeds the I/O capability of the background writer thread, the queue of pending write operations will grow without bound. If this goes on for long enough, the host system could run out of memory. A more sophisticated module could to keep track of the quantity of pending writes and stop accepting new write requests when the queue of pending writes grows too large.</source>
          <target state="translated">예를 들어, 현재 구현 된대로 백그라운드 기록기 스레드의 I / O 기능을 초과하는 꾸준한 스트림에서 쓰기가 발생하면 보류중인 쓰기 작업 대기열이 제한없이 커집니다. 이것이 오랫동안 지속되면 호스트 시스템의 메모리가 부족할 수 있습니다. 보다 정교한 모듈은 보류중인 쓰기 수를 추적하고 보류중인 쓰기 큐가 너무 커지면 새 쓰기 요청 수락을 중지 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="74530ffba7f866870009106e3c8e5c0a0af944ca" translate="yes" xml:space="preserve">
          <source>For example, given the database schema:</source>
          <target state="translated">예를 들어 데이터베이스 스키마가 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c7f52cca71f3aa80082462a01861b0a720f46594" translate="yes" xml:space="preserve">
          <source>For example, if a prepared statement is created using the SQL text &quot;SELECT $abc,:xyz&quot; and if parameter $abc is bound to integer 2345 and parameter :xyz is unbound, then sqlite3_sql() will return the original string, &quot;SELECT $abc,:xyz&quot; but sqlite3_expanded_sql() will return &quot;SELECT 2345,NULL&quot;.</source>
          <target state="translated">예를 들어, SQL 문 &quot;SELECT $ abc, : xyz&quot;를 사용하여 준비된 명령문을 작성하고 $ abc 매개 변수가 정수 2345에 바인딩되고 매개 변수 : xyz가 바인딩되지 않은 경우 sqlite3_sql ()은 원래 문자열 &quot;SELECT를 리턴합니다. $ abc, : xyz &quot;이지만 sqlite3_expanded_sql ()은&quot;SELECT 2345, NULL &quot;을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="06bed93067ff2c82141c677c5fde8b31f46e4d93" translate="yes" xml:space="preserve">
          <source>For example, if both the local and remote changesets contain an INSERT of the same key on &quot;CREATE TABLE t1(a PRIMARY KEY, b)&quot;:</source>
          <target state="translated">예를 들어, 로컬 및 원격 변경 세트 모두 &quot;CREATE TABLE t1 (a PRIMARY KEY, b)&quot;에서 동일한 키의 INSERT를 포함하는 경우 :</target>
        </trans-unit>
        <trans-unit id="336ff6fc840939163a24ab8fbcfd1876f5d7462b" translate="yes" xml:space="preserve">
          <source>For example, if each of the 517430 documents in the &quot;&lt;a href=&quot;http://www.cs.cmu.edu/~enron/&quot;&gt;Enron E-Mail Dataset&lt;/a&gt;&quot; is inserted into both an FTS table and an ordinary SQLite table created using the following SQL script:</source>
          <target state="translated">예를 들어 &quot; &lt;a href=&quot;http://www.cs.cmu.edu/~enron/&quot;&gt;Enron E-Mail Dataset&lt;/a&gt; &quot;의 각 517430 문서 가 FTS 테이블과 다음 SQL 스크립트를 사용하여 생성 된 일반 SQLite 테이블에 모두 삽입 된 경우 :</target>
        </trans-unit>
        <trans-unit id="9af2b0a0be2507f901ab349b61afc42441edaa60" translate="yes" xml:space="preserve">
          <source>For example, if nCol is the number of columns in the table, to determine if phrase p is present in column c:</source>
          <target state="translated">예를 들어, nCol이 테이블의 열 수인 경우 구 p에 구 p가 있는지 확인하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="4ff402b57bb3c7de072fb37615e2f1f44b822435" translate="yes" xml:space="preserve">
          <source>For example, if process A is in the middle of a large write transaction and at the same time process B attempts to start a new write transaction, process B will get back an SQLITE_BUSY result because SQLite only supports one writer at a time. Process B will need to wait for process A to finish its transaction before starting a new transaction. The &lt;a href=&quot;c3ref/busy_timeout&quot;&gt;sqlite3_busy_timeout()&lt;/a&gt; and &lt;a href=&quot;c3ref/busy_handler&quot;&gt;sqlite3_busy_handler()&lt;/a&gt; interfaces and the &lt;a href=&quot;pragma#pragma_busy_timeout&quot;&gt;busy_timeout pragma&lt;/a&gt; are available to process B to help it deal with SQLITE_BUSY errors.</source>
          <target state="translated">예를 들어, 프로세스 A가 대규모 쓰기 트랜잭션의 중간에 있고 프로세스 B가 새 쓰기 트랜잭션을 시작하려고 시도하는 경우 SQLite는 한 번에 하나의 작성자 만 지원하므로 프로세스 B는 SQLITE_BUSY 결과를 다시 가져옵니다. 프로세스 B는 새 트랜잭션을 시작하기 전에 프로세스 A가 트랜잭션을 완료 할 때까지 기다려야합니다. &lt;a href=&quot;c3ref/busy_timeout&quot;&gt;sqlite3_busy_timeout ()&lt;/a&gt; 및 &lt;a href=&quot;c3ref/busy_handler&quot;&gt;sqlite3_busy_handler ()&lt;/a&gt; 인터페이스와 &lt;a href=&quot;pragma#pragma_busy_timeout&quot;&gt;busy_timeout pragma는&lt;/a&gt; 이 SQLITE_BUSY 오류를 처리하는 데 도움 프로세스 B를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d347b5f74f99e1b9952eb3244ae0159feff20d3e" translate="yes" xml:space="preserve">
          <source>For example, if the</source>
          <target state="translated">예를 들어</target>
        </trans-unit>
        <trans-unit id="c3622449954a6635d6d6221d72610b7472bd6c7b" translate="yes" xml:space="preserve">
          <source>For example, if the aConstraint[3].argvIndex is set to 1, then when xFilter is called, the argv[0] passed to xFilter will have the EXPR value of the aConstraint[3] constraint.</source>
          <target state="translated">예를 들어, aConstraint [3] .argvIndex가 1로 설정된 경우 xFilter가 호출되면 xFilter에 전달 된 argv [0]은 aConstraint [3] 제약 조건의 EXPR 값을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="7f637c26bc4431eea662487596dfe6901f17e071" translate="yes" xml:space="preserve">
          <source>For example, if the following SQL is passed to &lt;a href=&quot;c3ref/declare_vtab&quot;&gt;sqlite3_declare_vtab()&lt;/a&gt;:</source>
          <target state="translated">예를 들어, 다음 SQL이 &lt;a href=&quot;c3ref/declare_vtab&quot;&gt;sqlite3_declare_vtab ()에&lt;/a&gt; 전달 된 경우 :</target>
        </trans-unit>
        <trans-unit id="9d9a182c3de2bb26679903dabe753f3a90f09588" translate="yes" xml:space="preserve">
          <source>For example, if you have a table column declared to be of type &quot;INTEGER&quot; and you try to insert a string, the column will look at the text string and see if it looks like a number. If the string does look like a number it is converted into a number and into an integer if the number does not have a fractional part, and stored that way. But if the string is not a well-formed number it is still stored as a string. A column with a type of &quot;TEXT&quot; tries to convert numbers into an ASCII-Text representation before storing them. But BLOBs are stored in TEXT columns as BLOBs because you cannot in general convert a BLOB into text.</source>
          <target state="translated">예를 들어 &quot;INTEGER&quot;유형으로 선언 된 테이블 열이 있고 문자열을 삽입하려고하면 열이 텍스트 문자열을보고 숫자처럼 보이는지 확인합니다. 문자열이 숫자처럼 보이면 숫자에 소수 부분이 없으면 숫자와 정수로 변환되어 저장됩니다. 그러나 문자열이 올바른 형식이 아닌 경우 여전히 문자열로 저장됩니다. &quot;TEXT&quot;유형의 열은 저장하기 전에 숫자를 ASCII 텍스트 표현으로 변환하려고합니다. 그러나 BLOB는 일반적으로 BLOB를 텍스트로 변환 할 수 없기 때문에 TEXT 열에 BLOB으로 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="2e8d78d9a4a4ef5a078d77893775dee024ca144a" translate="yes" xml:space="preserve">
          <source>For example, in gdb, to see the complete hierarchy of an Expr node (that is to say, the Expr node and all of its children), given a pointer &quot;pExpr&quot; to that node, type:</source>
          <target state="translated">예를 들어 gdb에서 해당 노드에 대한 &quot;pExpr&quot;포인터가 주어지면 Expr 노드 (즉, Expr 노드 및 모든 하위)의 전체 계층을 보려면 다음을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="65de8cd85e7f9352044ea42fa34fc26263f7d653" translate="yes" xml:space="preserve">
          <source>For example, in the following call to json_object(), the</source>
          <target state="translated">예를 들어, json_object ()에 대한 다음 호출에서</target>
        </trans-unit>
        <trans-unit id="376c3a63c2d900eda2a882017f3f3a33aef34667" translate="yes" xml:space="preserve">
          <source>For example, information about the columns in an index can be read using the &lt;a href=&quot;pragma#pragma_index_info&quot;&gt;index_info pragma&lt;/a&gt; as follows:</source>
          <target state="translated">예를 들어 &lt;a href=&quot;pragma#pragma_index_info&quot;&gt;index_info pragma&lt;/a&gt; 를 사용하여 인덱스의 열에 대한 정보를 읽을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6bccea8458a0de711e349540a29ecfcb98a65f40" translate="yes" xml:space="preserve">
          <source>For example, let the index be</source>
          <target state="translated">예를 들어, 색인이</target>
        </trans-unit>
        <trans-unit id="3da423bea60d2f28b9bd6c6b606ccc9294140d5b" translate="yes" xml:space="preserve">
          <source>For example, many words of Greek origin begin with letters &quot;ps&quot; where the &quot;p&quot; is silent. Ex: psalm, pseudonym, psoriasis, psyche. In another example, many Scottish surnames can be spelled with an initial &quot;Mac&quot; or &quot;Mc&quot;. Thus, &quot;MacKay&quot; and &quot;McKay&quot; are both pronounced the same.</source>
          <target state="translated">예를 들어, 그리스어 원어의 많은 단어는 &quot;p&quot;가 침묵 인 &quot;ps&quot;문자로 시작합니다. 예 : 시편, 가명, 건선, 정신. 다른 예에서, 많은 스코틀랜드 성은 초기 &quot;Mac&quot;또는 &quot;Mc&quot;로 철자를 지정할 수 있습니다. 따라서 &quot;MacKay&quot;와 &quot;McKay&quot;는 모두 동일하게 발음됩니다.</target>
        </trans-unit>
        <trans-unit id="20083fcfe31a171e687fd7f98763b1bd15a6a1ec" translate="yes" xml:space="preserve">
          <source>For example, say the SQL statement returns the following data when executed:</source>
          <target state="translated">예를 들어, SQL 문이 실행될 때 다음 데이터를 리턴한다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="2fbaaa7d12d4edb21ff19c0963b0289115f32a55" translate="yes" xml:space="preserve">
          <source>For example, suppose an additional database is attached to the database connection using a statement like this:</source>
          <target state="translated">예를 들어, 다음과 같은 명령문을 사용하여 추가 데이터베이스가 데이터베이스 연결에 접속되었다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="81c47bbba7e6d3bcfa83f9d58601629924b27df8" translate="yes" xml:space="preserve">
          <source>For example, suppose the input word is &quot;Paskagula&quot;. The phonetic key is &quot;BACACALA&quot; which is then truncated to 4 characters &quot;BACA&quot;. The edit distance is then run on the 4980 entries (out of 272,597 entries total) of the vocabulary whose k2 values begin with BACA, yielding &quot;Pascagoula&quot; as the best match.</source>
          <target state="translated">예를 들어, 입력 단어가 &quot;Paskagula&quot;라고 가정하십시오. 발음 키는 &quot;BACACALA&quot;이며 4 자로 &quot;BACA&quot;로 잘립니다. 그런 다음 편집 거리는 k2 값이 BACA로 시작하는 어휘의 4980 개 항목 (총 272,597 개 항목)에서 실행되어 &quot;Pascagoula&quot;가 가장 일치합니다.</target>
        </trans-unit>
        <trans-unit id="bd462d6a706c77e5432cc4b960d8cc42361a6e96" translate="yes" xml:space="preserve">
          <source>For example, suppose you have a database of the members of a large organization where each person is assigned to a particular &quot;team&quot;. Each team has a &quot;leader&quot; who is also a member of that team. The table might look something like this:</source>
          <target state="translated">예를 들어, 각 개인이 특정 &quot;팀&quot;에 할당 된 대규모 조직 구성원의 데이터베이스가 있다고 가정하십시오. 각 팀에는 해당 팀의 구성원 인 &quot;리더&quot;가 있습니다. 테이블은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2d2ab8533e293c8a84090c9b6694f2a969c007bb" translate="yes" xml:space="preserve">
          <source>For example, suppose you have a table named &quot;t1&quot; with columns names &quot;a&quot;, &quot;b&quot;, and &quot;c&quot; and that you want to delete column &quot;c&quot; from this table. The following steps illustrate how this could be done:</source>
          <target state="translated">예를 들어, 열 이름이 &quot;a&quot;, &quot;b&quot;및 &quot;c&quot;인 &quot;t1&quot;이라는 테이블이 있고이 테이블에서 &quot;c&quot;열을 삭제하려고한다고 가정하십시오. 다음 단계는이를 수행하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="e8c74e845df3aa4e4554ece864cf2478aa417801" translate="yes" xml:space="preserve">
          <source>For example, suppose you wanted undo/redo on a class (table) that looks like this:</source>
          <target state="translated">예를 들어 다음과 같은 클래스 (테이블)에서 실행 취소 / 다시 실행을 원한다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="c888ac7552fad64c94327f4d9dde6c1939c79ffa" translate="yes" xml:space="preserve">
          <source>For example, the &quot;generate_series&quot; extension (located in the &lt;a href=&quot;http://www.sqlite.org/src/artifact?ci=trunk&amp;amp;filename=ext/misc/series.c&quot;&gt;ext/misc/series.c&lt;/a&gt; file in the &lt;a href=&quot;http://www.sqlite.org/src/tree?ci=trunk&quot;&gt;source tree&lt;/a&gt;) implements an &lt;a href=&quot;vtab#epovtab&quot;&gt;eponymous virtual table&lt;/a&gt; with the following schema:</source>
          <target state="translated">예를 들어, &quot;generate_series&quot;확장자 ( &lt;a href=&quot;http://www.sqlite.org/src/tree?ci=trunk&quot;&gt;소스 트리&lt;/a&gt; 의 &lt;a href=&quot;http://www.sqlite.org/src/artifact?ci=trunk&amp;amp;filename=ext/misc/series.c&quot;&gt;ext / misc / series.c&lt;/a&gt; 파일에 있음 ) 는 다음 스키마를 사용하여 시상 &lt;a href=&quot;vtab#epovtab&quot;&gt;가상 테이블&lt;/a&gt; 을 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="a41d4a0a2c571159c4d3d9a9bcfe397816127e93" translate="yes" xml:space="preserve">
          <source>For example, the first argument to the &lt;a href=&quot;fts3#snippet&quot;&gt;snippet()&lt;/a&gt; function is supposed to be a special column of the FTS3 table that contains a pointer to an fts3cursor object that contains information about the current full text search match. That pointer was formerly passed as a BLOB. For example, if the FTS3 table is named &quot;t1&quot; and has a column named &quot;cx&quot;, one might write:</source>
          <target state="translated">예를 들어, &lt;a href=&quot;fts3#snippet&quot;&gt;snippet ()&lt;/a&gt; 함수에 대한 첫 번째 인수 는 현재 전체 텍스트 검색 일치에 대한 정보를 포함하는 fts3cursor 오브젝트에 대한 포인터를 포함하는 FTS3 테이블의 특수 열이어야합니다. 그 포인터는 이전에 BLOB으로 전달되었습니다. 예를 들어, FTS3 테이블의 이름이 &quot;t1&quot;이고 이름이 &quot;cx&quot;인 열이 있으면 다음과 같이 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a1719c0fad0c46d95494599fc76472814afb3096" translate="yes" xml:space="preserve">
          <source>For example, the following EXPLAIN QUERY PLAN command operates on a SELECT statement that is implemented by performing a full-table scan on table t1:</source>
          <target state="translated">예를 들어, 다음 EXPLAIN QUERY PLAN 명령은 테이블 t1에서 전체 테이블 스캔을 수행하여 구현 된 SELECT 문에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="f54bfe9858a294d74efc1029b390f83e76127bc5" translate="yes" xml:space="preserve">
          <source>For example, the following JSON describes an isosceles triangle, sitting on the X axis and with an area of 0.5:</source>
          <target state="translated">예를 들어 다음 JSON은 X 축에 0.5의 면적을 갖는 이등변 삼각형을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="83a6fbeea816f56be60daf62a9ac68c383f63398" translate="yes" xml:space="preserve">
          <source>For example, the following code implements a collating sequence called &quot;NOCASE&quot; that sorts in text order without regard to case:</source>
          <target state="translated">예를 들어 다음 코드는 대소 문자와 상관없이 텍스트 순서로 정렬되는 &quot;NOCASE&quot;라는 조합 순서를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="9c27a0d3845f1eceb95943662637d42bbbaddf2a" translate="yes" xml:space="preserve">
          <source>For example, the following statement is valid in SQLite:</source>
          <target state="translated">예를 들어, 다음 명령문은 SQLite에서 유효합니다.</target>
        </trans-unit>
        <trans-unit id="c949165d26ebc110da68da66e13bc86685e04c18" translate="yes" xml:space="preserve">
          <source>For example, the values NULL, 0.0, 0, 'english' and '0' are all considered to be false. Values 1, 1.0, 0.1, -0.1 and '1english' are considered to be true.</source>
          <target state="translated">예를 들어, NULL, 0.0, 0, 'english'및 '0'값은 모두 false로 간주됩니다. 1, 1.0, 0.1, -0.1 및 '1english'값은 true로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="a80abcae23d48d4d5c71b5964b931b771a14df0d" translate="yes" xml:space="preserve">
          <source>For example, this row:</source>
          <target state="translated">예를 들어이 행은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f0774215613f5a93e554bf719be214f376054f20" translate="yes" xml:space="preserve">
          <source>For example, to avoid adding the contents of the &quot;uuid&quot; field to the FTS index:</source>
          <target state="translated">예를 들어, &quot;uuid&quot;필드의 내용을 FTS 색인에 추가하지 않으려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="e25e9fcbc6cbbe4aa86a860fba9ee3e23406906c" translate="yes" xml:space="preserve">
          <source>For example, to create a new SQLite database named &quot;ex1&quot; with a single table named &quot;tbl1&quot;, you might do this:</source>
          <target state="translated">예를 들어, &quot;tbl1&quot;이라는 단일 테이블을 사용하여 &quot;ex1&quot;이라는 새 SQLite 데이터베이스를 만들려면 다음과 같이하십시오.</target>
        </trans-unit>
        <trans-unit id="0a8b8eec2dca22f4460d3c1b6d1607de62d83c18" translate="yes" xml:space="preserve">
          <source>For example, to create an archive containing two text files, &quot;a.txt&quot; and &quot;b.txt&quot;, containing the text &quot;abc&quot; and &quot;123&quot; respectively:</source>
          <target state="translated">예를 들어, 텍스트 &quot;abc&quot;및 &quot;123&quot;을 각각 포함하는 &quot;a.txt&quot;및 &quot;b.txt&quot;라는 두 개의 텍스트 파일을 포함하는 아카이브를 작성하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="e1c45bec4422b2834e5d74273014f0905a33b70e" translate="yes" xml:space="preserve">
          <source>For example, to inspect the contents of zip archive &quot;test.zip&quot; from the current directory:</source>
          <target state="translated">예를 들어, 현재 디렉토리에서 zip 아카이브 &quot;test.zip&quot;의 내용을 검사하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="460920e6960fc9166bdf09c3d3e3d2d1b9cb1172" translate="yes" xml:space="preserve">
          <source>For example, to optimize the full-text index for an FTS table named &quot;docs&quot;:</source>
          <target state="translated">예를 들어 &quot;docs&quot;라는 FTS 테이블의 전체 텍스트 인덱스를 최적화하려면</target>
        </trans-unit>
        <trans-unit id="8112859719fda223d11dd9ecc671a2d731113a48" translate="yes" xml:space="preserve">
          <source>For example, to see a list of the tables in the database, you can enter &quot;.tables&quot;.</source>
          <target state="translated">예를 들어, 데이터베이스의 테이블 목록을 보려면 &quot;.tables&quot;를 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="3403f20bef06b9f62c829264d38a448f07fbf25f" translate="yes" xml:space="preserve">
          <source>For example, using the tables created above:</source>
          <target state="translated">예를 들어 위에서 만든 테이블을 사용하면</target>
        </trans-unit>
        <trans-unit id="8baebd4e0fce8f0dca8a23890fbbeb7b6c6bd6f4" translate="yes" xml:space="preserve">
          <source>For example, when a document containing the text &quot;Right now, they're very frustrated.&quot;, the terms extracted from the document and added to the full-text index are, in order, &quot;right now they re very frustrated&quot;. Such a document would match a full-text query such as &quot;MATCH 'Frustrated'&quot;, as the simple tokenizer transforms the term in the query to lowercase before searching the full-text index.</source>
          <target state="translated">예를 들어, &quot;지금 바로, 지금 당황합니다.&quot;라는 텍스트가 포함 된 문서의 경우, 문서에서 추출하여 전체 텍스트 색인에 추가 된 용어는 &quot;지금 당장 매우 실망&quot;입니다. 간단한 토크 나이 저는 전체 텍스트 인덱스를 검색하기 전에 쿼리의 용어를 소문자로 변환하므로 이러한 문서는 &quot;MATCH 'Frustrated'&quot;와 같은 전체 텍스트 쿼리와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0dc693a709e03c8a242ebc99f829d5a5f0d7f07e" translate="yes" xml:space="preserve">
          <source>For examples of how the SQLite C/C++ interface can be used, refer to the source code for the &lt;b&gt;sqlite&lt;/b&gt; program in the file &lt;a href=&quot;https://sqlite.org/src/file/src/shell.c.in&quot;&gt;src/shell.c&lt;/a&gt; of the source tree. Additional information about sqlite is available at &lt;a href=&quot;cli&quot;&gt;cli.html&lt;/a&gt;. See also the sources to the Tcl interface for SQLite in the source file &lt;a href=&quot;https://sqlite.org/src/file/src/tclsqlite.c&quot;&gt;src/tclsqlite.c&lt;/a&gt;.</source>
          <target state="translated">SQLite C / C ++ 인터페이스 사용 방법에 대한 예제 는 소스 트리의 &lt;a href=&quot;https://sqlite.org/src/file/src/shell.c.in&quot;&gt;src / shell.c&lt;/a&gt; 파일에서 &lt;b&gt;sqlite&lt;/b&gt; 프로그램 의 소스 코드를 참조하십시오 . sqlite에 대한 추가 정보는 &lt;a href=&quot;cli&quot;&gt;cli.html&lt;/a&gt; 에서 볼 수 있습니다 . 소스 파일 &lt;a href=&quot;https://sqlite.org/src/file/src/tclsqlite.c&quot;&gt;src / tclsqlite.c의&lt;/a&gt; SQLite 용 Tcl 인터페이스에 대한 소스도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="db416b5f222a1960fcc408837e83b440afa98ccd" translate="yes" xml:space="preserve">
          <source>For floating-point substitutions (%e, %E, %f, %g, %G) the precision specifies the number of digits to display to the right of the decimal point.</source>
          <target state="translated">부동 소수점 대체 (% e, % E, % f, % g, % G)의 경우 정밀도는 소수점 오른쪽에 표시 할 자릿수를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="cf9d217953f034811d5791d9759455b504d70d86" translate="yes" xml:space="preserve">
          <source>For full prefix support, method (3) may be preferred. In this case, because the index contains entries for both &quot;first&quot; and &quot;1st&quot;, prefix queries such as 'fi*' or '1s*' will match correctly. However, because extra entries are added to the FTS index, this method uses more space within the database.</source>
          <target state="translated">완전한 접두사 지원을 위해, 방법 (3)이 바람직 할 수있다. 이 경우 인덱스에 &quot;first&quot;및 &quot;1st&quot;에 대한 항목이 포함되므로 'fi *'또는 '1s *'와 같은 접두사 쿼리가 올바르게 일치합니다. 그러나 추가 항목이 FTS 인덱스에 추가되므로이 방법은 데이터베이스 내에서 더 많은 공간을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="af625b5ec940a13ac3f0b796c61917d55c083bf9" translate="yes" xml:space="preserve">
          <source>For functions that accept &quot;</source>
          <target state="translated">&quot;를받는 기능</target>
        </trans-unit>
        <trans-unit id="8e0c304ceb8d93d914d671ff91751c10ea1ee104" translate="yes" xml:space="preserve">
          <source>For functions that accept JSON as their first argument, that argument can be a JSON object, array, number, string, or null. SQLite numeric values and NULL values are interpreted as JSON numbers and nulls, respectively. SQLite text values can be understood as JSON objects, arrays, or strings. If an SQLite text value that is not a well-formed JSON object, array, or string is passed into json1 function, that function will usually throw an error. (Exceptions to this rule are &lt;a href=&quot;json1#jvalid&quot;&gt;json_valid()&lt;/a&gt; and &lt;a href=&quot;json1#jquote&quot;&gt;json_quote()&lt;/a&gt;.)</source>
          <target state="translated">JSON을 첫 번째 인수로 허용하는 함수의 경우 해당 인수는 JSON 객체, 배열, 숫자, 문자열 또는 null 일 수 있습니다. SQLite 숫자 값과 NULL 값은 각각 JSON 숫자와 널로 해석됩니다. SQLite 텍스트 값은 JSON 객체, 배열 또는 문자열로 이해 될 수 있습니다. 올바르게 구성된 JSON 객체, 배열 또는 문자열이 아닌 SQLite 텍스트 값이 json1 함수에 전달되면 해당 함수는 일반적으로 오류를 발생시킵니다. (이 규칙의 예외는 &lt;a href=&quot;json1#jvalid&quot;&gt;json_valid ()&lt;/a&gt; 및 &lt;a href=&quot;json1#jquote&quot;&gt;json_quote ()&lt;/a&gt; 입니다.)</target>
        </trans-unit>
        <trans-unit id="f4454df1a142f9ac3cdff944002d68d2bfdcbcbb" translate="yes" xml:space="preserve">
          <source>For functions that accept PATH arguments, that PATH must be well-formed or else the function will throw an error. A well-formed PATH is a text value that begins with exactly one '$' character followed by zero or more instances of &quot;.</source>
          <target state="translated">PATH 인수를 허용하는 함수의 경우 해당 PATH의 형식이 양호해야합니다. 그렇지 않으면 함수에서 오류가 발생합니다. 올바른 형식의 PATH는 정확히 하나의 '$'문자로 시작하고 0 개 이상의 &quot;&quot;인스턴스로 시작하는 텍스트 값입니다.</target>
        </trans-unit>
        <trans-unit id="8848d7d3d9820023afd4f5c595baf809ffcb7c92" translate="yes" xml:space="preserve">
          <source>For general use in cases where the workload contains few UPDATE or DELETE operations, a good choice for automerge is 8. If the workload contains many UPDATE or DELETE commands, or if query speed is a concern, it may be advantageous to reduce automerge to 2.</source>
          <target state="translated">작업 부하에 UPDATE 또는 DELETE 작업이 거의없는 경우 일반적인 사용의 경우 자동 병합에 적합한 선택은 8입니다. 작업 부하에 많은 UPDATE 또는 DELETE 명령이 있거나 쿼리 속도가 중요한 경우 자동 병합을 2로 줄이는 것이 유리할 수 있습니다. .</target>
        </trans-unit>
        <trans-unit id="bf5110604d852a2448723644607996c9499bf3c7" translate="yes" xml:space="preserve">
          <source>For historic compatibility, the C-language interfaces return primary result codes by default. The extended result code for the most recent error can be retrieved using the &lt;a href=&quot;c3ref/errcode&quot;&gt;sqlite3_extended_errcode()&lt;/a&gt; interface. The &lt;a href=&quot;c3ref/extended_result_codes&quot;&gt;sqlite3_extended_result_codes()&lt;/a&gt; interface can be used to put a &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; into a mode where it returns the extended result codes instead of the primary result codes.</source>
          <target state="translated">기록 호환성을 위해 C 언어 인터페이스는 기본적으로 기본 결과 코드를 반환합니다. &lt;a href=&quot;c3ref/errcode&quot;&gt;sqlite3_extended_errcode ()&lt;/a&gt; 인터페이스를 사용하여 가장 최근의 오류에 대한 확장 결과 코드를 검색 할 수 있습니다 . &lt;a href=&quot;c3ref/extended_result_codes&quot;&gt;sqlite3_extended_result_codes ()&lt;/a&gt; 인터페이스는 넣어 사용할 수있는 &lt;a href=&quot;c3ref/sqlite3&quot;&gt;데이터베이스 연결&lt;/a&gt; 이 확장 된 결과 코드 대신의 주요 결과 코드를 반환하는 모드로합니다.</target>
        </trans-unit>
        <trans-unit id="17b53a99ea41c50893270b0043884f065027650e" translate="yes" xml:space="preserve">
          <source>For historical reasons, and for efficiency, all sorting is currently done in memory.</source>
          <target state="translated">역사적 이유로 그리고 효율성을 위해 모든 정렬은 현재 메모리에서 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="eeed22fa30af9d54901acfbf4c1ce1f017feb462" translate="yes" xml:space="preserve">
          <source>For integer substitutions (%d, %i, %x, %X, %o, and %p) the precision specifies minimum number of digits to display. Leading zeros are added if necessary, to expand the output to the minimum number of digits.</source>
          <target state="translated">정수 대체 (% d, % i, % x, % X, % o 및 % p)의 경우 정밀도는 표시 할 최소 자릿수를 지정합니다. 필요한 경우 선행 0이 추가되어 출력을 최소 자릿수로 확장합니다.</target>
        </trans-unit>
        <trans-unit id="6f753dacad85542947673dd8fa7db3bccc0a7592" translate="yes" xml:space="preserve">
          <source>For maximum reliability and for robustness against database corruption, SQLite should always be run with its default synchronous setting of FULL.</source>
          <target state="translated">안정성을 최대화하고 데이터베이스 손상에 대한 견고성을 유지하려면 SQLite는 항상 기본 동기 설정 인 FULL로 실행해야합니다.</target>
        </trans-unit>
        <trans-unit id="489e54409f8b7e0829c336efb96f4282b5ccf13a" translate="yes" xml:space="preserve">
          <source>For more details, refer to the comments in &lt;a href=&quot;http://sqlite.org/src/doc/trunk/ext/rbu/sqlite3rbu.h&quot;&gt;header file sqlite3rbu.h&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;http://sqlite.org/src/doc/trunk/ext/rbu/sqlite3rbu.h&quot;&gt;헤더 파일 sqlite3rbu.h&lt;/a&gt; 의 주석을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4e6f70ecf49e4210656602d693e569fcb03d8193" translate="yes" xml:space="preserve">
          <source>For most applications, the recommended method for building SQLite is to use &lt;a href=&quot;amalgamation&quot;&gt;the amalgamation&lt;/a&gt; code file, &lt;b&gt;sqlite3.c&lt;/b&gt;, and its corresponding header file &lt;b&gt;sqlite3.h&lt;/b&gt;. The sqlite3.c code file should compile and run on any unix, Windows system without any changes or special compiler options. Most applications can simply include the sqlite3.c file together with the other C code files that make up the application, compile them all together, and have working and well configured version of SQLite.</source>
          <target state="translated">대부분의 애플리케이션에서 SQLite를 빌드하기 위해 권장되는 방법 &lt;a href=&quot;amalgamation&quot;&gt;은 통합&lt;/a&gt; 코드 파일 인 &lt;b&gt;sqlite3.c&lt;/b&gt; 및 해당 헤더 파일 인 &lt;b&gt;sqlite3.h를 사용하는 것&lt;/b&gt; 입니다. sqlite3.c 코드 파일은 변경 또는 특수 컴파일러 옵션없이 UNIX 시스템에서 컴파일 및 실행되어야합니다. 대부분의 응용 프로그램은 sqlite3.c 파일을 다른 C 코드 파일과 함께 포함하여 응용 프로그램을 구성하고 모두 함께 컴파일하며 SQLite 버전이 제대로 작동하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="99e3c9a88b32764d83bb0da10699b12fcd9a531f" translate="yes" xml:space="preserve">
          <source>For most applications, upgrading from the legacy query planner to the NGQP requires little thought or effort. Simply replace the older SQLite version with the newer version of SQLite and recompile and the application will run faster. There are no API changes nor modifications to compilation procedures.</source>
          <target state="translated">대부분의 응용 프로그램에서 레거시 쿼리 플래너에서 NGQP로 업그레이드하는 데는 약간의 노력이나 노력이 필요합니다. 이전 SQLite 버전을 최신 버전의 SQLite로 바꾸고 다시 컴파일하면 응용 프로그램이 더 빨리 실행됩니다. 컴파일 절차에 대한 API 변경이나 수정은 없습니다.</target>
        </trans-unit>
        <trans-unit id="0efe87a820fa8cd327d2f74d3e3f1deb32107fb9" translate="yes" xml:space="preserve">
          <source>For most cases, it is true that potential attackers have no way of injecting arbitrary SQL, and so most uses of SQLite are immune to the attack above. But there are some notable exceptions. To wit:</source>
          <target state="translated">대부분의 경우 잠재적 인 공격자는 임의의 SQL을 주입 할 방법이 없으므로 대부분의 SQLite 사용은 위의 공격에 영향을받지 않습니다. 그러나 몇 가지 주목할만한 예외가 있습니다. 재치 :</target>
        </trans-unit>
        <trans-unit id="c86754da6df36988096aed27dea948d5f58eceba" translate="yes" xml:space="preserve">
          <source>For most non-trivial SQL databases, the key to performance is creating the right SQL indexes. In this context &quot;the right SQL indexes&quot; means those that cause the queries that an application needs to optimize run fast. The &quot;.expert&quot; command can assist with this by proposing indexes that might assist with specific queries, were they present in the database.</source>
          <target state="translated">사소한 SQL 데이터베이스의 경우 성능의 핵심은 올바른 SQL 인덱스를 작성하는 것입니다. 이와 관련하여 &quot;올바른 SQL 인덱스&quot;는 응용 프로그램이 최적화해야하는 쿼리를 빠르게 실행하는 쿼리를 의미합니다. &quot;.expert&quot;명령은 데이터베이스에있는 특정 쿼리를 지원할 수있는 인덱스를 제안하여이를 지원할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e0fd582fdc761484a0a0ca3bb5f583aafab7cdf5" translate="yes" xml:space="preserve">
          <source>For most purposes, SQLite can be built just fine using the default compilation options. However, if required, the compile-time options documented below can be used to &lt;a href=&quot;#omitfeatures&quot;&gt;omit SQLite features&lt;/a&gt; (resulting in a &lt;a href=&quot;footprint&quot;&gt;smaller compiled library size&lt;/a&gt;) or to change the &lt;a href=&quot;#defaults&quot;&gt;default values&lt;/a&gt; of some parameters.</source>
          <target state="translated">대부분의 경우 기본 컴파일 옵션을 사용하여 SQLite를 올바르게 빌드 할 수 있습니다. 그러나 필요한 경우 아래에 설명 된 컴파일 시간 옵션을 사용하여 &lt;a href=&quot;#omitfeatures&quot;&gt;SQLite 기능&lt;/a&gt; 을 생략 하거나 ( &lt;a href=&quot;footprint&quot;&gt;컴파일 된 라이브러리 크기&lt;/a&gt; 가 더 작음 ) 일부 매개 변수 의 &lt;a href=&quot;#defaults&quot;&gt;기본값&lt;/a&gt; 을 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="932b2392df531ace28cd032a80948aba14e668af" translate="yes" xml:space="preserve">
          <source>For much of its history SQLite has been focused on 100% MC/DC testing. Resistance to fuzzing attacks only became a concern with the introduction of AFL in 2014. For a while there, fuzzers were finding many problems in SQLite. In more recent years, the testing strategy of SQLite has evolved to place more emphasis on fuzz testing. We still maintain 100% MC/DC of the core SQLite code, but most testing CPU cycles are now devoted to fuzzing.</source>
          <target state="translated">그 역사의 대부분 동안 SQLite는 100 % MC / DC 테스트에 중점을 두었습니다. 퍼징 공격에 대한 저항은 2014 년에 AFL이 도입 된 이후에만 관심사가되었습니다. 한동안 퍼 저는 SQLite에서 많은 문제를 발견했습니다. 최근 몇 년 동안 SQLite의 테스트 전략은 퍼즈 테스트에 더 중점을 두도록 발전했습니다. 우리는 여전히 핵심 SQLite 코드의 MC / DC를 100 % 유지하지만 대부분의 테스트 CPU주기는 이제 퍼징에 전념합니다.</target>
        </trans-unit>
        <trans-unit id="be3d8fa3ad8b3f16b5f81b3d35db241bab90e030" translate="yes" xml:space="preserve">
          <source>For multi-threaded applications that are careful about how they manage threads, SQLite supports an alternative run-time configuration that is half way between not using any mutexes and the default situation of mutexing everything in sight. This in-the-middle mutex alignment can be established as follows:</source>
          <target state="translated">스레드 관리 방식에주의를 기울이는 멀티 스레드 응용 프로그램의 경우 SQLite는 뮤텍스를 사용하지 않는 것과 모든 것을 뮤텍스 팅하는 기본 상황 사이의 절반에 이르는 대체 런타임 구성을 지원합니다. 이 중간 뮤텍스 정렬은 다음과 같이 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5bfaf72720042391e9725050a2097ea765a5277e" translate="yes" xml:space="preserve">
          <source>For newer applications, FTS4 is recommended; though if compatibility with older versions of SQLite is important, then FTS3 will usually serve just as well.</source>
          <target state="translated">최신 응용 프로그램의 경우 FTS4가 권장됩니다. 이전 버전의 SQLite와의 호환성이 중요한 경우 FTS3도 일반적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="74f1cec569d928f5163be03c8f3a97d88c4bb5d9" translate="yes" xml:space="preserve">
          <source>For non-TEMP triggers, the table to be modified or queried must exist in the same database as the table or view to which the trigger is attached. TEMP triggers are not subject to the same-database rule. A TEMP trigger is allowed to query or modify any table in any &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt;-ed database.</source>
          <target state="translated">TEMP가 아닌 트리거의 경우 수정 또는 쿼리 할 테이블이 트리거가 연결된 테이블 또는 뷰와 동일한 데이터베이스에 있어야합니다. TEMP 트리거에는 동일한 데이터베이스 규칙이 적용되지 않습니다. TEMP 트리거는 &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt; 데이터베이스 에서 테이블을 쿼리하거나 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eaf4afda655b698c5089cf162bb3637b1ddce067" translate="yes" xml:space="preserve">
          <source>For numeric data, this situation is more complex. If both inputs look like well-formed numbers, then they are converted into floating point values using &lt;b&gt;atof()&lt;/b&gt; and compared numerically. If one input is not a well-formed number but the other is, then the number is considered to be less than the non-number. If neither inputs is a well-formed number, then &lt;b&gt;strcmp()&lt;/b&gt; is used to do the comparison.</source>
          <target state="translated">숫자 데이터의 경우이 상황이 더 복잡합니다. 두 입력이 올바르게 구성된 숫자 인 경우 &lt;b&gt;atof ()를&lt;/b&gt; 사용하여 부동 소수점 값으로 변환되어 숫자로 비교됩니다. 하나의 입력이 올바른 형식의 숫자는 아니지만 다른 입력은 숫자가 아닌 숫자보다 작은 것으로 간주됩니다. 입력이 올바른 형식의 숫자가 아닌 경우 &lt;b&gt;strcmp ()&lt;/b&gt; 를 사용하여 비교합니다.</target>
        </trans-unit>
        <trans-unit id="11d66790f63457992337a522f75d0ba8c19d49c3" translate="yes" xml:space="preserve">
          <source>For ordinary FTS3/FTS4 queries, the search tree depth is approximately the base-2 logarithm of the number of terms in the right-hand side of the MATCH operator. However, for &lt;a href=&quot;fts3#phrase&quot;&gt;phrase queries&lt;/a&gt; and &lt;a href=&quot;fts3#near&quot;&gt;NEAR queries&lt;/a&gt; the search tree depth is linear in the number of right-hand side terms. So the default depth limit of 12 is sufficient for up to 4095 ordinary terms on a MATCH, it is only sufficient for 11 or 12 phrase or NEAR terms. Even so, the default is more than enough for most application.</source>
          <target state="translated">일반적인 FTS3 / FTS4 쿼리의 경우 검색 트리 깊이는 대략 MATCH 연산자의 오른쪽에있는 용어 수의 기본 2 로그입니다. 그러나 &lt;a href=&quot;fts3#phrase&quot;&gt;구문 쿼리&lt;/a&gt; 및 &lt;a href=&quot;fts3#near&quot;&gt;NEAR 쿼리의&lt;/a&gt; 경우 검색 트리 깊이는 오른쪽 항의 수에서 선형입니다. 따라서 기본 깊이 제한 12는 MATCH에서 최대 4095 개의 일반 용어에 충분하고 11 또는 12 구 또는 NEAR 용어에 충분합니다. 그럼에도 불구하고 기본값은 대부분의 응용 프로그램에 충분합니다.</target>
        </trans-unit>
        <trans-unit id="87e6be4eb608f1997fb25355e4537ee88db28dd4" translate="yes" xml:space="preserve">
          <source>For performance measurement, SQLite is compiled in approximately the same way as it would be for use in production systems. The compile-time configuration is &quot;approximate&quot; in the sense that every production use of SQLite is different. Compile-time options used by one system are not necessarily the same as those used by others. The key point is that options that significantly impact the generated machine code are avoided. For example, the -DSQLITE_DEBUG option is omitted because that option inserts thousands of assert() statements in the middle of performance critical sections of the SQLite library. The -pg option (on GCC) is omitted because it causes the compiler to emit extra probabilistic performance measuring code which interferes with actual performance measurements.</source>
          <target state="translated">성능 측정을 위해 SQLite는 프로덕션 시스템에서 사용하는 것과 거의 같은 방식으로 컴파일됩니다. 컴파일 타임 구성은 SQLite의 모든 프로덕션 용도가 다르다는 점에서 &quot;대략&quot;입니다. 한 시스템에서 사용하는 컴파일 시간 옵션이 다른 시스템에서 사용되는 옵션과 반드시 ​​같을 필요는 없습니다. 요점은 생성 된 기계 코드에 큰 영향을주는 옵션을 피하는 것입니다. 예를 들어, -DSQLITE_DEBUG 옵션은 해당 옵션이 SQLite 라이브러리의 성능 중요 섹션 중간에 수천 개의 assert () 문을 삽입하므로 생략됩니다. -pg 옵션 (GCC에서)은 컴파일러가 실제 성능 측정을 방해하는 추가적인 확률 적 성능 측정 코드를 생성하게하므로 생략됩니다.</target>
        </trans-unit>
        <trans-unit id="f448cd989ab34ec0bc46f3d775e49bf2cb96fd96" translate="yes" xml:space="preserve">
          <source>For performance measurements, the -Os option is used (optimize for size) rather than -O2 because the -O2 option creates so much code movement that it is difficult to associate specific CPU instructions to C source code lines.</source>
          <target state="translated">성능 측정의 경우 -O2 옵션이 너무 많은 코드 이동을 생성하여 특정 CPU 명령어를 C 소스 코드 라인에 연결하기 어렵 기 때문에 -Os 옵션이 -O2 대신에 사용됩니다 (크기에 최적화).</target>
        </trans-unit>
        <trans-unit id="5c184bd0f5295912e4ff3123f4057a4db6895161" translate="yes" xml:space="preserve">
          <source>For performance reasons, it is advantageous to &lt;b&gt;minimize the quantity of data read and written&lt;/b&gt; to and from the file-system.</source>
          <target state="translated">성능상의 이유로 파일 시스템에서 &lt;b&gt;읽고 쓰는 데이터의 양&lt;/b&gt; 을 &lt;b&gt;최소화하는&lt;/b&gt; 것이 유리 합니다.</target>
        </trans-unit>
        <trans-unit id="07b863ed3fe569c9ef5b6a594040618449a6d03c" translate="yes" xml:space="preserve">
          <source>For programs that have a lot of data that must be sifted and sorted in diverse ways, it is often easier and quicker to load the data into an in-memory SQLite database and use queries with joins and ORDER BY clauses to extract the data in the form and order needed rather than to try to code the same operations manually. Using an SQL database internally in this way also gives the program greater flexibility since new columns and indices can be added without having to recode every query.</source>
          <target state="translated">다양한 방식으로 선별 및 정렬해야하는 데이터가 많은 프로그램의 경우 데이터를 메모리 내 SQLite 데이터베이스에로드하고 조인 및 ORDER BY 절과 함께 쿼리를 사용하여 데이터를 추출하는 것이 더 쉽고 빠릅니다. 동일한 작업을 수동으로 코딩하기보다는 양식 및 순서가 필요합니다. 이러한 방식으로 SQL 데이터베이스를 내부적으로 사용하면 모든 쿼리를 다시 코딩하지 않고도 새로운 열과 인덱스를 추가 할 수 있으므로 프로그램의 유연성이 향상됩니다.</target>
        </trans-unit>
        <trans-unit id="9dd6714e0fb0a2d212f83820882b4bc1eae38324" translate="yes" xml:space="preserve">
          <source>For queries that use OR expressions, or those that use LIMIT or return many rows, the 'y' matchinfo option may be faster than 'x'.</source>
          <target state="translated">OR 표현식을 사용하거나 LIMIT를 사용하거나 많은 행을 리턴하는 쿼리의 경우 'y'matchinfo 옵션이 'x'보다 빠를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c9ccc0a52d5200b9388c921b60acbab7d6fb34e" translate="yes" xml:space="preserve">
          <source>For queries, extract results by calling &lt;a href=&quot;c3ref/column_blob&quot;&gt;sqlite3_column()&lt;/a&gt; in between two calls to &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt;.</source>
          <target state="translated">쿼리의 경우, 호출에 의해 추출 결과 &lt;a href=&quot;c3ref/column_blob&quot;&gt;sqlite3_column ()&lt;/a&gt; 를 두 번 호출 사이에서 &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step ()&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c5bf18084dc0d97ae369c3088b48ef4a87de7f25" translate="yes" xml:space="preserve">
          <source>For reading database files that are unusually high-risk, such as database files that are received from remote machines, and possibly from anonymous contributors, the following extra precautions might be justified. These added defenses come with performance costs, however, and so may not be appropriate in every situation:</source>
          <target state="translated">원격 시스템 및 익명 기고자로부터받은 데이터베이스 파일과 같이 비정상적으로 위험이 높은 데이터베이스 파일을 읽으려면 다음과 같은 추가 예방 조치가 필요합니다. 그러나 이러한 추가 방어에는 성능 비용이 발생하므로 모든 상황에 적합하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="85d9929e5f003ec622c68d9ac564cf73c6c4c155" translate="yes" xml:space="preserve">
          <source>For reading existing zip archives, the Zipfile module provides a &lt;a href=&quot;vtab#tabfunc2&quot;&gt;table-valued function&lt;/a&gt; that accepts a single argument. If the argument is a text value, then it is a path to a zip archive to read from the file-system. Or, if the argument is an SQL blob, then it is the zip archive data itself.</source>
          <target state="translated">기존 zip 아카이브를 읽기 위해 Zipfile 모듈은 단일 인수를 허용하는 &lt;a href=&quot;vtab#tabfunc2&quot;&gt;테이블 반환 함수&lt;/a&gt; 를 제공합니다 . 인수가 텍스트 값인 경우 파일 시스템에서 읽을 zip 아카이브의 경로입니다. 또는 인수가 SQL Blob 인 경우 zip 아카이브 데이터 자체입니다.</target>
        </trans-unit>
        <trans-unit id="9867027f324defd1a582c5a9d9007cb8936fd6ce" translate="yes" xml:space="preserve">
          <source>For reasons of backwards compatibility, the &quot;automerge=1&quot; command sets the automerge parameter to 8, not 1 (a value of 1 would make no sense anyway, as merging data from a single segment is a no-op).</source>
          <target state="translated">이전 버전과의 호환성을 위해 &quot;automerge = 1&quot;명령은 automerge 매개 변수를 1이 아닌 8로 설정합니다 (단일 세그먼트에서 데이터를 병합하는 것은 아무 작업도 없으므로 1 값은 의미가 없습니다).</target>
        </trans-unit>
        <trans-unit id="a23d1c74ece13b6a1e6d02aa92a4e6d015b8a626" translate="yes" xml:space="preserve">
          <source>For regular functions, the &lt;b&gt;xFunc&lt;/b&gt; callback is invoked once for each function call. The implementation of xFunc should call one of the &lt;b&gt;sqlite_set_result_...&lt;/b&gt; interfaces to return its result. The &lt;b&gt;sqlite_user_data()&lt;/b&gt; routine can be used to retrieve the &lt;b&gt;pUserData&lt;/b&gt; pointer that was passed in when the function was registered.</source>
          <target state="translated">일반 함수의 경우 &lt;b&gt;xFunc&lt;/b&gt; 콜백은 각 함수 호출마다 한 번씩 호출됩니다. xFunc의 구현은 &lt;b&gt;sqlite_set_result _...&lt;/b&gt; 인터페이스 중 하나를 호출 하여 결과를 반환해야합니다. &lt;b&gt;sqlite_user_data ()&lt;/b&gt; 루틴은 검색하는 데 사용할 수 있습니다 &lt;b&gt;pUserData의&lt;/b&gt; 기능을 등록 할 때 전달 된 포인터.</target>
        </trans-unit>
        <trans-unit id="d0ed67ff8b79adf22c16c2b1f3556a389aea4a01" translate="yes" xml:space="preserve">
          <source>For resilience when confronted with historical SQL statements, SQLite will sometimes bend the quoting rules above:</source>
          <target state="translated">과거 SQL 문에 직면했을 때의 탄력성을 위해 SQLite는 때때로 위의 인용 규칙을 구부릴 것입니다.</target>
        </trans-unit>
        <trans-unit id="e7eae9c3102a4115cf6fa58568800e787b48e7a4" translate="yes" xml:space="preserve">
          <source>For security reasons, extension loaded is turned off by default and must be enabled by a prior call to &lt;a href=&quot;c3ref/enable_load_extension&quot;&gt;sqlite3_enable_load_extension()&lt;/a&gt;.</source>
          <target state="translated">보안상의 이유로로드 된 확장은 기본적으로 해제되어 있으며 &lt;a href=&quot;c3ref/enable_load_extension&quot;&gt;sqlite3_enable_load_extension ()&lt;/a&gt; 에 대한 사전 호출로 활성화해야합니다 .</target>
        </trans-unit>
        <trans-unit id="c4880044a5796d62d55405bede28ef5f4f52805b" translate="yes" xml:space="preserve">
          <source>For security reasons, extension loading is turned off by default. In order to use either the C-language or SQL extension loading functions, one must first enable extension loading using the &lt;a href=&quot;c3ref/db_config&quot;&gt;sqlite3_db_config&lt;/a&gt;(db,&lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigenableloadextension&quot;&gt;SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION&lt;/a&gt;,1,NULL) C-language API in your application.</source>
          <target state="translated">보안상의 이유로 확장 프로그램로드는 기본적으로 해제되어 있습니다. C 언어 또는 SQL 확장로드 기능을 사용하려면 먼저 응용 프로그램에서 &lt;a href=&quot;c3ref/db_config&quot;&gt;sqlite3_db_config&lt;/a&gt; (db, &lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigenableloadextension&quot;&gt;SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION&lt;/a&gt; , 1, NULL) C 언어 API를 사용하여 확장로드를 사용 가능하게해야합니다 .</target>
        </trans-unit>
        <trans-unit id="90f079fcf7344dc268fa3af2372e90f48b6aca40" translate="yes" xml:space="preserve">
          <source>For security reasons, it is recommended that applications first set &lt;a href=&quot;pragma#pragma_trusted_schema&quot;&gt;PRAGMA trusted_schema=OFF&lt;/a&gt; or run the &quot;&lt;a href=&quot;#config&quot;&gt;db config trusted_schema 0&lt;/a&gt;&quot; method before using this method.</source>
          <target state="translated">보안상의 이유로 응용 프로그램은 이 방법을 사용하기 전에 먼저 &lt;a href=&quot;pragma#pragma_trusted_schema&quot;&gt;PRAGMA trusted_schema = OFF를&lt;/a&gt; 설정 하거나 &quot; &lt;a href=&quot;#config&quot;&gt;db config trusted_schema 0&lt;/a&gt; &quot;방법을 실행하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="92cbc8f2d6b97260523c5a56f27aa3c653ce65fe" translate="yes" xml:space="preserve">
          <source>For signed numeric substitutions, include a &quot;+&quot; sign before positive numbers. A &quot;-&quot; sign always appears before negative numbers regardless of flag settings.</source>
          <target state="translated">부호있는 숫자 대체의 경우 양수 앞에 &quot;+&quot;부호를 포함하십시오. 플래그 설정에 관계없이 &quot;-&quot;기호는 항상 음수 앞에 나타납니다.</target>
        </trans-unit>
        <trans-unit id="0a389ef1f84e1f5ea12705422f16f304415d7e84" translate="yes" xml:space="preserve">
          <source>For signed numeric substitutions, prepend a single space before positive numbers.</source>
          <target state="translated">부호있는 숫자 대체의 경우 양수 앞에 단일 공백을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="8361cfb2d567750344a1d16c228e8f02d706a6ad" translate="yes" xml:space="preserve">
          <source>For simple queries against a single table with few indexes, there is usually an obvious choice for the best algorithm. But for larger and more complex queries, such as multi-way joins with many indexes and subqueries, there can be hundreds, thousands, or millions of reasonable algorithms for computing the result. The job of the query planner is to choose the single &quot;best&quot; query plan from this multitude of possibilities.</source>
          <target state="translated">인덱스가 적은 단일 테이블에 대한 간단한 쿼리의 경우 일반적으로 최상의 알고리즘을 선택하는 것이 분명합니다. 그러나 많은 인덱스 및 하위 쿼리와의 다 방향 조인과 같은 더 크고 복잡한 쿼리의 경우 결과 계산을위한 수백, 수천 또는 수백만 개의 합리적인 알고리즘이있을 수 있습니다. 쿼리 플래너의 역할은이 다양한 가능성 중에서 단일 &quot;최상의&quot;쿼리 계획을 선택하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="a9d77b186d3d3bf7ae8219371bcb8b76fedae519" translate="yes" xml:space="preserve">
          <source>For small databases and modern CPUs, there is usually no reason not to pass &quot;--sample 100&quot;. However, gathering data distribution statistics can be expensive for large database tables. If the operation is too slow, try passing a smaller value for the --sample option.</source>
          <target state="translated">소규모 데이터베이스 및 최신 CPU의 경우 일반적으로 &quot;--sample 100&quot;을 통과하지 않을 이유가 없습니다. 그러나 큰 데이터베이스 테이블의 경우 데이터 분산 통계를 수집하면 비용이 많이들 수 있습니다. 작업이 너무 느리면 --sample 옵션에 더 작은 값을 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="a4a24ddee4d5daf8ddd5ba8dfd7d48787ebb03b7" translate="yes" xml:space="preserve">
          <source>For string substitutions (%s, %z, %q, %Q, or %w) the precision is the number of byte or character used from the argument. The number is bytes by default but is characters if the &quot;!&quot; flag is present. If there is no precision, then the entire string is substituted. Examples: &quot;%.3s&quot; substitutes the first 3 bytes of the argument string. &quot;%!.3s&quot; substitutes the first three characters of the argument string.</source>
          <target state="translated">문자열 대체 (% s, % z, % q, % Q 또는 % w)의 경우 정밀도는 인수에서 사용 된 바이트 또는 문자 수입니다. 기본적으로 숫자는 바이트이지만 &quot;!&quot; 플래그가 존재합니다. 정밀도가 없으면 전체 문자열이 대체됩니다. 예 : &quot;% .3s&quot;는 인수 문자열의 처음 3 바이트를 대체합니다. &quot;% !. 3s&quot;는 인수 문자열의 처음 세 문자를 대체합니다.</target>
        </trans-unit>
        <trans-unit id="e7573ff9c5daeb6537cacfee96e59061a43495a3" translate="yes" xml:space="preserve">
          <source>For subprograms, there is a bitmask in the VdbeFrame that determines whether or not the jump should be taken. The bitmask is necessary because the self-altering code trick does not work for recursive triggers.</source>
          <target state="translated">서브 프로그램의 경우 VdbeFrame에는 점프를 수행할지 여부를 결정하는 비트 마스크가 있습니다. 자체 변경 코드 트릭은 재귀 트리거에 작동하지 않기 때문에 비트 마스크가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="1ef6b92612835372e131287be2c793df5805bcf9" translate="yes" xml:space="preserve">
          <source>For table columns, the datatype is determined by the type declaration of the CREATE TABLE statement. The datatype is text if and only if the type declaration contains one or more of the following strings:</source>
          <target state="translated">테이블 컬럼의 경우, 데이터 유형은 CREATE TABLE 문의 유형 선언에 의해 결정됩니다. 데이터 유형은 유형 선언에 다음 문자열 중 하나 이상이 포함 된 경우에만 텍스트입니다.</target>
        </trans-unit>
        <trans-unit id="7117d5cbbb5730360ccac5d30c1470b52beef293" translate="yes" xml:space="preserve">
          <source>For testing on embedded systems, the mkth3.tcl script and the compiler steps shown above are performed on an ordinary workstation using a cross-compiler, then the resulting test program is transferred onto the device to be run.</source>
          <target state="translated">임베디드 시스템에서 테스트하기 위해 mkth3.tcl 스크립트와 위에 표시된 컴파일러 단계는 크로스 컴파일러를 사용하여 일반 워크 스테이션에서 수행 된 후 결과 테스트 프로그램이 실행될 장치로 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="d2eb4ede923268e657583d146fd6fd411d8b52aa" translate="yes" xml:space="preserve">
          <source>For the --insert command, all files listed are inserted into the archive. For the --update command, files are only inserted if they do not previously exist in the archive, or if their &quot;mtime&quot; or &quot;mode&quot; is different from what is currently in the archive.</source>
          <target state="translated">--insert 명령의 경우 나열된 모든 파일이 아카이브에 삽입됩니다. --update 명령의 경우 파일이 이전에 아카이브에 없거나 &quot;mtime&quot;또는 &quot;mode&quot;가 현재 아카이브에있는 파일과 다른 경우에만 파일이 삽입됩니다.</target>
        </trans-unit>
        <trans-unit id="0d9d2265812b12b9762e700ccc4ceb3931ebf930" translate="yes" xml:space="preserve">
          <source>For the C-language interfaces, the argument is an integer which is interpreted as a character. For the &lt;a href=&quot;lang_corefunc#printf&quot;&gt;printf() SQL function&lt;/a&gt; the argument is a string from which the first character is extracted and displayed.</source>
          <target state="translated">C 언어 인터페이스의 경우 인수는 문자로 해석되는 정수입니다. 내용 &lt;a href=&quot;lang_corefunc#printf&quot;&gt;의 printf () SQL 함수&lt;/a&gt; 의 인수는 첫 번째 문자가 추출되어 표시되는 문자열이다.</target>
        </trans-unit>
        <trans-unit id="c95ceb997c597a8e6a21b33cbd1c20d5ac14d94b" translate="yes" xml:space="preserve">
          <source>For the GLOB operator, the column must be indexed using the built-in BINARY collating sequence.</source>
          <target state="translated">GLOB 연산자의 경우 내장 BINARY 조합 순서를 사용하여 열을 색인화해야합니다.</target>
        </trans-unit>
        <trans-unit id="8b7943406433a1489b27536ff1cedb40c6a83fc4" translate="yes" xml:space="preserve">
          <source>For the LIKE operator, if &lt;a href=&quot;pragma#pragma_case_sensitive_like&quot;&gt;case_sensitive_like&lt;/a&gt; mode is enabled then the column must indexed using BINARY collating sequence, or if &lt;a href=&quot;pragma#pragma_case_sensitive_like&quot;&gt;case_sensitive_like&lt;/a&gt; mode is disabled then the column must indexed using built-in NOCASE collating sequence.</source>
          <target state="translated">LIKE 연산자의 경우 &lt;a href=&quot;pragma#pragma_case_sensitive_like&quot;&gt;case_sensitive_like&lt;/a&gt; 모드가 사용 가능한 경우 BINARY 조합 순서를 사용하여 열을 색인화해야하거나 &lt;a href=&quot;pragma#pragma_case_sensitive_like&quot;&gt;case_sensitive_like&lt;/a&gt; 모드가 사용 불가능한 경우 내장 NOCASE 조합 순서를 사용하여 열이 색인화되어야합니다.</target>
        </trans-unit>
        <trans-unit id="394b73aae0d0953d9f85a4d75a67f00c2d16e226" translate="yes" xml:space="preserve">
          <source>For the SELECT statement above, the optimizer can use the ex2i1 index to lookup rows of ex2 that contain x=5 and then test each row against the y=6 term. Or it can use the ex2i2 index to lookup rows of ex2 that contain y=6 then test each of those rows against the x=5 term.</source>
          <target state="translated">위의 SELECT 문에서 옵티마이 저는 ex2i1 색인을 사용하여 x = 5를 포함하는 ex2의 행을 찾은 다음 y = 6 항에 대해 각 행을 테스트 할 수 있습니다. 또는 ex2i2 색인을 사용하여 y = 6을 포함하는 ex2의 행을 찾은 다음 x = 5 항에 대해 각 행을 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6880a2956aa62196c20844c37991ebf1c9cc0265" translate="yes" xml:space="preserve">
          <source>For the character substitution (%c) a precision N greater than 1 causes the character to be repeated N times. This is a non-standard extension found only in SQLite.</source>
          <target state="translated">문자 치환 (% c)의 경우 1보다 큰 정밀도 N은 문자가 N 번 반복되도록합니다. 이것은 SQLite에서만 발견되는 비표준 확장입니다.</target>
        </trans-unit>
        <trans-unit id="cbfa8c438ab75aa5b53746b3a61a2493fdc0fcad" translate="yes" xml:space="preserve">
          <source>For the common case where we want the busy callback to sleep, the SQLite library provides a convenience routine &lt;b&gt;sqlite_busy_timeout&lt;/b&gt;. The first argument to &lt;b&gt;sqlite_busy_timeout&lt;/b&gt; is a pointer to an open SQLite database and the second argument is a number of milliseconds. After &lt;b&gt;sqlite_busy_timeout&lt;/b&gt; has been executed, the SQLite library will wait for the lock to clear for at least the number of milliseconds specified before it returns SQLITE_BUSY. Specifying zero milliseconds for the timeout restores the default behavior.</source>
          <target state="translated">통화 중 콜백을 휴면 상태로 유지하려는 일반적인 경우 SQLite 라이브러리는 편리한 루틴 &lt;b&gt;sqlite_busy_timeout을&lt;/b&gt; 제공합니다 . &lt;b&gt;sqlite_busy_timeout에&lt;/b&gt; 대한 첫 번째 인수 는 열린 SQLite 데이터베이스에 대한 포인터이고 두 번째 인수는 수 밀리 초입니다. &lt;b&gt;sqlite_busy_timeout&lt;/b&gt; 이 실행 된 후 SQLite 라이브러리는 SQLITE_BUSY를 리턴하기 전에 지정된 밀리 초 동안 잠금이 해제 될 때까지 대기합니다. 시간 초과에 0 밀리 초를 지정하면 기본 동작이 복원됩니다.</target>
        </trans-unit>
        <trans-unit id="77995af2794868d5e3e1a545ee53f68c9abf9c9a" translate="yes" xml:space="preserve">
          <source>For the index above and WHERE clause like this:</source>
          <target state="translated">위의 색인과 다음과 같은 WHERE 절의 경우 :</target>
        </trans-unit>
        <trans-unit id="bb541928f8f21ef53252b3fcd58c0333fdfa446f" translate="yes" xml:space="preserve">
          <source>For the most part, ordinary rowid tables and WITHOUT ROWID tables are interchangeable. But there are some additional restrictions on WITHOUT ROWID tables that do not apply to ordinary rowid tables:</source>
          <target state="translated">대부분의 경우 일반 rowid 테이블과 WITHOUT ROWID 테이블은 서로 호환됩니다. 그러나 WITHOUT ROWID 테이블에는 일반 rowid 테이블에 적용되지 않는 몇 가지 추가 제한 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="bee902327ddee3eaa34014db30d1eb9d18663957" translate="yes" xml:space="preserve">
          <source>For the purpose of computing window functions, the result set of a query is divided into one or more &quot;partitions&quot;. A partition consists of all rows that have the same value for all terms of the PARTITION BY clause in the window-defn. If there is no PARTITION BY clause, then the entire result set of the query is a single partition. Window-function processing is performed separately for each partition.</source>
          <target state="translated">창 기능 계산을 위해 쿼리 결과 집합은 하나 이상의 &quot;파티션&quot;으로 나뉩니다. 파티션은 window-defn에서 PARTITION BY 절의 모든 용어에 대해 동일한 값을 갖는 모든 행으로 구성됩니다. PARTITION BY 절이 없으면 쿼리의 전체 결과 집합이 단일 파티션입니다. 창 기능 처리는 각 파티션마다 별도로 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="b3fd877f7b6778afbc1e68eb5017d97a2b27eeb2" translate="yes" xml:space="preserve">
          <source>For the purpose of the &lt;b&gt;sqlite_complete&lt;/b&gt; function, an SQL statement is complete if it ends in a semicolon.</source>
          <target state="translated">&lt;b&gt;sqlite_complete&lt;/b&gt; 함수 의 목적으로 SQL 문이 세미콜론으로 끝나면 SQL 문이 완료됩니다.</target>
        </trans-unit>
        <trans-unit id="3bdae1911eb2b3c855db66c9e8e796a26c988410" translate="yes" xml:space="preserve">
          <source>For the purposes of determining duplicate rows for the results of compound SELECT operators, NULL values are considered equal to other NULL values and distinct from all non-NULL values. The collation sequence used to compare two text values is determined as if the columns of the left and right-hand SELECT statements were the left and right-hand operands of the equals (=) operator, except that greater precedence is not assigned to a collation sequence specified with the postfix COLLATE operator. No affinity transformations are applied to any values when comparing rows as part of a compound SELECT.</source>
          <target state="translated">복합 SELECT 연산자의 결과에 대한 중복 행을 결정하기 위해 NULL 값은 다른 NULL 값과 같으며 NULL이 아닌 모든 값과는 다른 것으로 간주됩니다. 두 개의 텍스트 값을 비교하는 데 사용되는 데이터 정렬 시퀀스는 왼쪽 및 오른쪽 SELECT 문의 열이 등호 (=) 연산자의 왼쪽 및 오른쪽 피연산자 인 것처럼 결정됩니다 (단, 더 큰 우선 순위가 데이터 정렬에 할당되지 않음) 접미사 COLLATE 연산자로 지정된 순서. 복합 SELECT의 일부로 행을 비교할 때는 선호도 변환이 값에 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="593804fd692754b9bd9050d15e0853bf78663ff7" translate="yes" xml:space="preserve">
          <source>For the purposes of determining validity, leading and trailing whitespace on JSON inputs is ignored. Interior whitespace is also ignored, in accordance with the JSON spec. These routines accept exactly the &lt;a href=&quot;http://www.rfc-editor.org/rfc/rfc7159.txt&quot;&gt;rfc-7159 JSON syntax&lt;/a&gt; &amp;mdash; no more and no less.</source>
          <target state="translated">유효성을 확인하기 위해 JSON 입력의 선행 및 후행 공백은 무시됩니다. JSON 사양에 따라 내부 공백도 무시됩니다. 이 루틴은 &lt;a href=&quot;http://www.rfc-editor.org/rfc/rfc7159.txt&quot;&gt;rfc-7159 JSON 구문을&lt;/a&gt; 그대로 받아들 입니다.</target>
        </trans-unit>
        <trans-unit id="4f71629a5f8d309dcb7934e2a9e496e90193e44f" translate="yes" xml:space="preserve">
          <source>For the purposes of sorting rows, values are compared in the same way as for &lt;a href=&quot;datatype3#comparisons&quot;&gt;comparison expressions&lt;/a&gt;. The collation sequence used to compare two text values is determined as follows:</source>
          <target state="translated">행을 정렬하기 위해 &lt;a href=&quot;datatype3#comparisons&quot;&gt;비교 표현식&lt;/a&gt; 과 같은 방식으로 값을 비교합니다 . 두 텍스트 값을 비교하는 데 사용되는 데이터 정렬 순서는 다음과 같이 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="15ea441aee0df5dfef81b948679ce855bde68d24" translate="yes" xml:space="preserve">
          <source>For the purposes of the previous four items, two database connections that use the same &lt;a href=&quot;sharedcache&quot;&gt;shared cache&lt;/a&gt; and which enable &lt;a href=&quot;pragma#pragma_read_uncommitted&quot;&gt;PRAGMA read_uncommitted&lt;/a&gt; are considered to be the same database connection, not separate database connections.</source>
          <target state="translated">이전 4 개 항목의 목적 상, 동일한 &lt;a href=&quot;sharedcache&quot;&gt;공유 캐시&lt;/a&gt; 를 사용하고 &lt;a href=&quot;pragma#pragma_read_uncommitted&quot;&gt;PRAGMA read_uncommitted&lt;/a&gt; 를 가능하게 하는 두 개의 데이터베이스 연결은 별도의 데이터베이스 연결이 아니라 동일한 데이터베이스 연결로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="206270d8fd15072121eb3d0a56144d865640f2b5" translate="yes" xml:space="preserve">
          <source>For the purposes of the previous two paragraphs, two database connections that have the same &lt;a href=&quot;sharedcache&quot;&gt;shared cache&lt;/a&gt; and which have enabled &lt;a href=&quot;pragma#pragma_read_uncommitted&quot;&gt;PRAGMA read_uncommitted&lt;/a&gt; are considered to be the same database connection.</source>
          <target state="translated">이전 두 단락의 목적을 위해 &lt;a href=&quot;sharedcache&quot;&gt;공유 캐시&lt;/a&gt; 가 동일 하고 &lt;a href=&quot;pragma#pragma_read_uncommitted&quot;&gt;PRAGMA read_uncommitted를&lt;/a&gt; 활성화 한 두 데이터베이스 연결 은 동일한 데이터베이스 연결로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="a17e59e38b9d3bf2b2df3849089638f1437b4d1e" translate="yes" xml:space="preserve">
          <source>For the purposes of this API, a transaction is said to have been rolled back if an explicit &quot;ROLLBACK&quot; statement is executed, or an error or constraint causes an implicit rollback to occur. The rollback callback is not invoked if a transaction is automatically rolled back because the database connection is closed.</source>
          <target state="translated">이 API의 목적 상, 명시적인 &quot;ROLLBACK&quot;문이 실행되거나 오류 또는 제한 조건으로 인해 내재적 롤백이 발생하면 트랜잭션이 롤백되었다고합니다. 데이터베이스 연결이 닫혀서 트랜잭션이 자동으로 롤백되면 롤백 콜백이 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="57f69f1f3e95239c1d08d8e626c461a431a40ba6" translate="yes" xml:space="preserve">
          <source>For the purposes of this pragma, the &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; command is considered a schema change, since &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; will usual alter the &quot;rootpage&quot; values for entries in the &lt;a href=&quot;fileformat2#sqlite_master&quot;&gt;sqlite_master table&lt;/a&gt;.</source>
          <target state="translated">이 pragma의 목적으로 &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; 명령은 스키마 변경으로 간주됩니다. &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; 은 일반적으로 &lt;a href=&quot;fileformat2#sqlite_master&quot;&gt;sqlite_master 테이블의&lt;/a&gt; 항목에 대한 &quot;루트 페이지&quot;값을 변경하기 때문 입니다.</target>
        </trans-unit>
        <trans-unit id="a9b750853d344854f9aa1e24acbcd47fcdfc4ad1" translate="yes" xml:space="preserve">
          <source>For the purposes of this pragma, the &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; command is considered a schema change, since &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; will usual alter the &quot;rootpage&quot; values for entries in the &lt;a href=&quot;schematab&quot;&gt;sqlite_schema table&lt;/a&gt;.</source>
          <target state="translated">이 pragma의 목적을 위해, &lt;a href=&quot;lang_vacuum&quot;&gt;진공&lt;/a&gt; 때문에 명령은, 스키마 변경으로 간주됩니다 &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM는&lt;/a&gt; 일반적인의 항목에 대해 &quot;rootpage&quot;값을 변경합니다 &lt;a href=&quot;schematab&quot;&gt;sqlite_schema 테이블&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4e03b6c7391fbf0bc56188a8c09cd4a7c0b4cdfb" translate="yes" xml:space="preserve">
          <source>For the purposes of this routine, an &lt;a href=&quot;../lang_insert&quot;&gt;INSERT&lt;/a&gt; is considered to be successful even if it is subsequently rolled back.</source>
          <target state="translated">이 루틴의 목적 상, &lt;a href=&quot;../lang_insert&quot;&gt;INSERT&lt;/a&gt; 는 나중에 롤백 되더라도 성공한 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="4c58e719af76025bd3937a17763f87efc5e13c1f" translate="yes" xml:space="preserve">
          <source>For the purposes of this routine, an &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt; is considered to be successful even if it is subsequently rolled back.</source>
          <target state="translated">이 루틴의 목적 상, &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt; 는 나중에 롤백 되더라도 성공한 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="105a62f9f913b7c3c03726a4a42a2b6ed86624fa" translate="yes" xml:space="preserve">
          <source>For the purposes of unique indices, all NULL values are considered different from all other NULL values and are thus unique. This is one of the two possible interpretations of the SQL-92 standard (the language in the standard is ambiguous). The interpretation used by SQLite is the same and is the interpretation followed by PostgreSQL, MySQL, Firebird, and Oracle. Informix and Microsoft SQL Server follow the other interpretation of the standard, which is that all NULL values are equal to one another.</source>
          <target state="translated">고유 색인의 목적을 위해 모든 NULL 값은 다른 모든 NULL 값과 다른 것으로 간주되므로 고유합니다. 이것은 SQL-92 표준의 두 가지 가능한 해석 중 하나입니다 (표준의 언어는 모호함). SQLite에서 사용하는 해석은 동일하며 PostgreSQL, MySQL, Firebird 및 Oracle이 따르는 해석입니다. Informix 및 Microsoft SQL Server는 모든 NULL 값이 서로 같다는 표준의 다른 해석을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="713e891998daa01c37d2616d81cfb2bf2962ac1e" translate="yes" xml:space="preserve">
          <source>For the right-hand table of a LEFT JOIN, compute the values of expressions directly rather than loading precomputed values out of an &lt;a href=&quot;expridx&quot;&gt;expression index&lt;/a&gt; as the expression index might not contain the correct value. Ticket &lt;a href=&quot;https://sqlite.org/src/info/7fa8049685b50b5aeb0c2&quot;&gt;7fa8049685b50b5aeb0c2&lt;/a&gt;</source>
          <target state="translated">LEFT JOIN의 오른쪽 테이블의 경우 &lt;a href=&quot;expridx&quot;&gt;식 인덱스&lt;/a&gt; 에 올바른 값이 포함되어 있지 않을 수 있으므로 식 인덱스에서 미리 계산 된 값을로드하지 않고 식의 값을 직접 계산 하십시오. 티켓 &lt;a href=&quot;https://sqlite.org/src/info/7fa8049685b50b5aeb0c2&quot;&gt;7fa8049685b50b5aeb0c2&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5c9ca201b99a3489f4b36f53a1d0536e05b123a3" translate="yes" xml:space="preserve">
          <source>For the second case, when the table already exists, every row of the CSV file, including the first row, is assumed to be actual content. If the CSV file contains an initial row of column labels, that row will be read as data and inserted into the table. To avoid this, make sure that table does not previously exist.</source>
          <target state="translated">두 번째 경우, 테이블이 이미 존재하면 첫 번째 행을 포함하여 CSV 파일의 모든 행이 실제 컨텐츠 인 것으로 가정합니다. CSV 파일에 열 레이블의 초기 행이 포함 된 경우 해당 행은 데이터로 읽히고 테이블에 삽입됩니다. 이를 피하려면 테이블이 이전에 존재하지 않는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="7bf6df3d98c9980bb0d46166ad84f0bd8834c9ba" translate="yes" xml:space="preserve">
          <source>For the second case, when the table already exists, every row of the CSV file, including the first row, is assumed to be actual content. If the CSV file contains an initial row of column labels, you can cause the .import command to skip that initial row using the &quot;--skip 1&quot; option.</source>
          <target state="translated">두 번째 경우에는 테이블이 이미있는 경우 첫 번째 행을 포함하여 CSV 파일의 모든 행이 실제 콘텐츠로 간주됩니다. CSV 파일에 열 레이블의 초기 행이 포함되어있는 경우 .import 명령이 &quot;--skip 1&quot;옵션을 사용하여 해당 초기 행을 건너 뛰도록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5d66c18babb7715bc31a6fed2788e6b8d32bfce2" translate="yes" xml:space="preserve">
          <source>For the sqlite3_result_text16(), sqlite3_result_text16le(), and sqlite3_result_text16be() routines, and for sqlite3_result_text64() when the encoding is not UTF8, if the input UTF16 begins with a byte-order mark (BOM, U+FEFF) then the BOM is removed from the string and the rest of the string is interpreted according to the byte-order specified by the BOM. The byte-order specified by the BOM at the beginning of the text overrides the byte-order specified by the interface procedure. So, for example, if sqlite3_result_text16le() is invoked with text that begins with bytes 0xfe, 0xff (a big-endian byte-order mark) then the first two bytes of input are skipped and the remaining input is interpreted as UTF16BE text.</source>
          <target state="translated">sqlite3_result_text16 (), sqlite3_result_text16le () 및 sqlite3_result_text16be () 루틴의 경우, 인코딩이 UTF8이 아닌 경우 sqlite3_result_text64 ()의 경우 입력 UTF16이 바이트 순서 표시 (BOM, U + FEFF)로 시작하면 BOM은 다음과 같습니다. 문자열에서 제거되고 나머지 문자열은 BOM에 지정된 바이트 순서에 따라 해석됩니다. 텍스트 시작 부분에서 BOM에 지정된 바이트 순서는 인터페이스 프로 시저에 지정된 바이트 순서를 대체합니다. 따라서 예를 들어 sqlite3_result_text16le ()이 바이트 0xfe, 0xff (빅 엔디안 바이트 순서 표시)로 시작하는 텍스트로 호출되면 입력의 처음 2 바이트를 건너 뛰고 나머지 입력은 UTF16BE 텍스트로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="814f69ac0546d66f0db75207e5064bf283a12829" translate="yes" xml:space="preserve">
          <source>For these reasons, many complex queries may use less memory and run faster using FTS5.</source>
          <target state="translated">이러한 이유로 많은 복잡한 쿼리는 메모리를 적게 사용하고 FTS5를 사용하여 더 빠르게 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7fe943bac7177b3cc26bc016acdb488812414486" translate="yes" xml:space="preserve">
          <source>For these substitutions, the precision is the number of bytes or characters taken from the argument, not the number of bytes or characters that are written into the output.</source>
          <target state="translated">이러한 대체의 경우 정밀도는 출력에 기록되는 바이트 또는 문자 수가 아닌 인수에서 가져온 바이트 또는 문자 수입니다.</target>
        </trans-unit>
        <trans-unit id="ddecb7fc6ac9ebf678a969f318e2c93050dc15ef" translate="yes" xml:space="preserve">
          <source>For this first experiment, nothing else about the file format is changed. The OpenDocument is still a pile-of-files, only now each file is a row in an SQLite database rather than an entry in a ZIP archive. This simple change does not use the power of a relational database. Even so, this simple change shows some improvements.</source>
          <target state="translated">이 첫 번째 실험에서는 파일 형식에 대한 다른 내용이 변경되지 않았습니다. OpenDocument는 여전히 파일 더미이며, 이제는 각 파일 만 ZIP 아카이브의 항목이 아니라 SQLite 데이터베이스의 행입니다. 이 간단한 변경은 관계형 데이터베이스의 힘을 사용하지 않습니다. 그럼에도 불구하고이 간단한 변화는 약간의 개선점을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="fbfd34ac3082b66cb73eae2395605bfffd9afee2" translate="yes" xml:space="preserve">
          <source>For this form, the &amp;lt;expr&amp;gt; does not have to be an integer. It can evaluate to a real number as long as it is constant and non-negative.</source>
          <target state="translated">이 형식의 경우 &amp;lt;expr&amp;gt;은 정수일 필요는 없습니다. 일정하고 음이 아닌 한 실수로 평가할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="752d2cd19688f392b69d1efc9ea4707b6423ad4e" translate="yes" xml:space="preserve">
          <source>For this particular UPDATE test, MySQL is consistently five or ten times slower than PostgreSQL and SQLite. I do not know why. MySQL is normally a very fast engine. Perhaps this problem has been addressed in later versions of MySQL.</source>
          <target state="translated">이 특정 UPDATE 테스트의 경우 MySQL은 PostgreSQL 및 SQLite보다 일관되게 5-10 배 느립니다. 이유를 모르겠습니다. MySQL은 일반적으로 매우 빠른 엔진입니다. 아마도이 문제는 이후 버전의 MySQL에서 해결되었습니다.</target>
        </trans-unit>
        <trans-unit id="9db0e6302461b7556c4838a4a6492fc335414fcc" translate="yes" xml:space="preserve">
          <source>For usage hints and a summary of all options, simply give the &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt; the -A option with no additional arguments:</source>
          <target state="translated">사용법 힌트 및 모든 옵션 요약을 보려면 추가 인수없이 &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt; 에 -A 옵션을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="c9239816897eb996f78a6efe04536d4eaf0b8d55" translate="yes" xml:space="preserve">
          <source>Force the value in register P1 to be an integer. If the value in P1 is not an integer and cannot be converted into an integer without data loss, then jump immediately to P2, or if P2==0 raise an SQLITE_MISMATCH exception.</source>
          <target state="translated">레지스터 P1의 값을 정수로 만듭니다. P1의 값이 정수가 아니고 데이터 손실없이 정수로 변환 될 수 없으면 즉시 P2로 건너 뛰거나 P2 == 0 인 경우 SQLITE_MISMATCH 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e1652af1b46a8724b09c6398e58d043cf684e88e" translate="yes" xml:space="preserve">
          <source>Force the value in register P1 to be the type defined by P2.</source>
          <target state="translated">레지스터 P1의 값이 P2에 의해 정의 된 유형이되도록합니다.</target>
        </trans-unit>
        <trans-unit id="c3788028d350f50070224e2ffa767d1574a8ab2d" translate="yes" xml:space="preserve">
          <source>Foreign Key Constraints</source>
          <target state="translated">외래 키 제약</target>
        </trans-unit>
        <trans-unit id="8ea9876246ba7c653355a0ce27076bc76b4c8469" translate="yes" xml:space="preserve">
          <source>Foreign key ON DELETE and ON UPDATE clauses are used to configure actions that take place when deleting rows from the parent table (ON DELETE), or modifying the parent key values of existing rows (ON UPDATE). A single foreign key constraint may have different actions configured for ON DELETE and ON UPDATE. Foreign key actions are similar to triggers in many ways.</source>
          <target state="translated">외래 키 ON DELETE 및 ON UPDATE 절은 부모 테이블에서 행을 삭제하거나 (ON DELETE) 기존 행의 부모 키 값을 수정 (ON UPDATE) 할 때 수행되는 작업을 구성하는 데 사용됩니다. 단일 외래 키 제약 조건은 ON DELETE 및 ON UPDATE에 대해 서로 다른 동작을 구성 할 수 있습니다. 외래 키 동작은 여러 가지면에서 트리거와 유사합니다.</target>
        </trans-unit>
        <trans-unit id="474365badbb1f3b57e5eb366037b4f712db8f5d1" translate="yes" xml:space="preserve">
          <source>Foreign key actions</source>
          <target state="translated">외래 핵심 행동</target>
        </trans-unit>
        <trans-unit id="d3465e4f63b19b36c358f39673e35fd218b96287" translate="yes" xml:space="preserve">
          <source>Foreign key constraints are disabled by default (for backwards compatibility), so must be enabled separately for each &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt;. (Note, however, that future releases of SQLite might change so that foreign key constraints enabled by default. Careful developers will not make any assumptions about whether or not foreign keys are enabled by default but will instead enable or disable them as necessary.) The application can also use a &lt;a href=&quot;pragma#pragma_foreign_keys&quot;&gt;PRAGMA foreign_keys&lt;/a&gt; statement to determine if foreign keys are currently enabled. The following command-line session demonstrates this:</source>
          <target state="translated">외래 키 제약 조건은 기본적으로 비활성화되어 있으므로 (이전 버전과의 호환성을 위해) 각 &lt;a href=&quot;c3ref/sqlite3&quot;&gt;데이터베이스 연결&lt;/a&gt; 에 대해 별도로 활성화해야합니다 . 그러나 이후의 SQLite 릴리스에서는 기본적으로 외래 키 제약 조건이 활성화되도록 변경 될 수 있습니다.주의 깊은 개발자는 외래 키가 기본적으로 활성화되어 있는지 여부를 가정하지 않고 대신 필요에 따라 외래 키를 활성화하거나 비활성화합니다. 응용 프로그램은 &lt;a href=&quot;pragma#pragma_foreign_keys&quot;&gt;PRAGMA foreign_keys&lt;/a&gt; 문을 사용하여 외래 키가 현재 활성화되어 있는지 확인할 수 있습니다. 다음 명령 줄 세션에서이를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="fadb49ecb31870fa195b79a63507d69332246c87" translate="yes" xml:space="preserve">
          <source>Foreign key constraints are enabled</source>
          <target state="translated">외래 키 제약 조건이 활성화되었습니다</target>
        </trans-unit>
        <trans-unit id="ce28942b103c42389428127f519c6795e562c011" translate="yes" xml:space="preserve">
          <source>Format 1 is understood by all versions of SQLite back to &lt;a href=&quot;https://sqlite.org/releaselog/3_0_0.html&quot;&gt;version 3.0.0&lt;/a&gt; (2004-06-18).</source>
          <target state="translated">형식 1은 모든 버전의 SQLite에서 &lt;a href=&quot;https://sqlite.org/releaselog/3_0_0.html&quot;&gt;버전 3.0.0&lt;/a&gt; (2004-06-18)으로 다시 이해됩니다 .</target>
        </trans-unit>
        <trans-unit id="bb846b850c6fa3ff33f8d13f455d688d28aa22d8" translate="yes" xml:space="preserve">
          <source>Format 2 adds the ability of rows within the same table to have a varying number of columns, in order to support the &lt;a href=&quot;lang_altertable&quot;&gt;ALTER TABLE ... ADD COLUMN&lt;/a&gt; functionality. Support for reading and writing format 2 was added in SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_1_3.html&quot;&gt;version 3.1.3&lt;/a&gt; on 2005-02-20.</source>
          <target state="translated">형식 2는 &lt;a href=&quot;lang_altertable&quot;&gt;ALTER TABLE ... ADD COLUMN&lt;/a&gt; 기능 을 지원하기 위해 동일한 테이블 내의 행이 다양한 수의 열을 갖도록하는 기능을 추가 합니다. 읽기 및 쓰기 형식 2에 대한 지원은 2005-02-20의 SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_1_3.html&quot;&gt;버전 3.1.3&lt;/a&gt; 에서 추가되었습니다 .</target>
        </trans-unit>
        <trans-unit id="e74a0202e30c00da07d8e3f647ad619d797750ee" translate="yes" xml:space="preserve">
          <source>Format 3 adds the ability of extra columns added by &lt;a href=&quot;lang_altertable&quot;&gt;ALTER TABLE ... ADD COLUMN&lt;/a&gt; to have non-NULL default values. This capability was added in SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_1_4.html&quot;&gt;version 3.1.4&lt;/a&gt; on 2005-03-11.</source>
          <target state="translated">형식 3은 &lt;a href=&quot;lang_altertable&quot;&gt;ALTER TABLE ... ADD COLUMN&lt;/a&gt; 에 의해 추가 된 추가 열 이 NULL이 아닌 기본값을 갖도록합니다. 이 기능은 2005-03-11의 SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_1_4.html&quot;&gt;버전 3.1.4&lt;/a&gt; 에서 추가 되었습니다.</target>
        </trans-unit>
        <trans-unit id="6f87214a5c89d4a264dcabc8b3ff76d0ecb7e6ab" translate="yes" xml:space="preserve">
          <source>Format 4 causes SQLite to respect the &lt;a href=&quot;lang_createindex#descidx&quot;&gt;DESC keyword&lt;/a&gt; on index declarations. (The DESC keyword is ignored in indexes for formats 1, 2, and 3.) Format 4 also adds two new boolean record type values (&lt;a href=&quot;fileformat2#serialtype&quot;&gt;serial types&lt;/a&gt; 8 and 9). Support for format 4 was added in SQLite 3.3.0 on 2006-01-10.</source>
          <target state="translated">형식 4는 SQLite가 인덱스 선언 에서 &lt;a href=&quot;lang_createindex#descidx&quot;&gt;DESC 키워드&lt;/a&gt; 를 존중하게합니다 . (DESC 키워드는 형식 1, 2 및 3의 색인에서 무시됩니다.) 형식 4는 두 개의 새로운 부울 레코드 유형 값 ( &lt;a href=&quot;fileformat2#serialtype&quot;&gt;직렬 유형&lt;/a&gt; 8 및 9) 도 추가합니다 . 형식 4에 대한 지원이 2006-01-10의 SQLite 3.3.0에 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="d2e4ea8f983e7648b4500b3c2517f1581f43edb0" translate="yes" xml:space="preserve">
          <source>Formats 2 through 10 may be optionally followed by a timezone indicator of the form &quot;</source>
          <target state="translated">형식 2부터 10까지는 선택적으로 &quot;&quot;형식의 시간대 표시기가 올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff2a0eb4d03de61d70053787eab6804fcec445da" translate="yes" xml:space="preserve">
          <source>Formatted String Printing Functions</source>
          <target state="translated">형식화 된 문자열 인쇄 기능</target>
        </trans-unit>
        <trans-unit id="73cdbab7825af4beabbe4e8fccce8b346886e89f" translate="yes" xml:space="preserve">
          <source>Fossil gives me peace of mind that I have everything ... synced to the server with a single command.... I never get this peace of mind with git.</source>
          <target state="translated">화석은 하나의 명령으로 서버에 동기화 된 모든 것을 가지고 있다는 확신을주었습니다 .... 나는 결코 git으로 마음의 평화를 얻지 못합니다.</target>
        </trans-unit>
        <trans-unit id="968f45bf8ccf7ca67b780b2bdd22df3354350003" translate="yes" xml:space="preserve">
          <source>Fossil is a completely stand-alone program, so install it simply by putting the &quot;fossil&quot; or &quot;fossil.exe&quot; executable someplace on your $PATH or %PATH%. After you have Fossil installed, do this:</source>
          <target state="translated">Fossil은 완전 독립형 프로그램이므로 &quot;FOssil&quot;또는 &quot;fossil.exe&quot;실행 파일을 $ PATH 또는 % PATH %에 설치하면됩니다. 화석을 설치 한 후 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="94257cd970f113fc11ecc5cc6011f7bfff67e319" translate="yes" xml:space="preserve">
          <source>Fossil is easy to install and use. Here are the steps for unix. (Windows is similar.)</source>
          <target state="translated">화석은 설치 및 사용이 쉽습니다. 유닉스에 대한 단계는 다음과 같습니다. (Windows도 비슷합니다.)</target>
        </trans-unit>
        <trans-unit id="233904fc6b6c8ee70d33af66e4cb04bfc0af5c1f" translate="yes" xml:space="preserve">
          <source>Fossil vs. Git</source>
          <target state="translated">화석 대 Git</target>
        </trans-unit>
        <trans-unit id="bbba84135de6b052c2210e74e0cc5b2a9d359ddb" translate="yes" xml:space="preserve">
          <source>Found</source>
          <target state="translated">Found</target>
        </trans-unit>
        <trans-unit id="71c33b1cffd26b04e4533bd5c542bd8028125150" translate="yes" xml:space="preserve">
          <source>Four independently developed test harnesses</source>
          <target state="translated">4 개의 독립적으로 개발 된 테스트 장치</target>
        </trans-unit>
        <trans-unit id="a9521a3d73988a064707ebf1e7a52b3d8155b49c" translate="yes" xml:space="preserve">
          <source>Frame boundary</source>
          <target state="translated">프레임 경계</target>
        </trans-unit>
        <trans-unit id="77433082b8e51b0f02140d5bb2ad80c6960db0b1" translate="yes" xml:space="preserve">
          <source>Frame type</source>
          <target state="translated">프레임 타입</target>
        </trans-unit>
        <trans-unit id="6e84d556b35797f261b67f9c140d77ba6a16046e" translate="yes" xml:space="preserve">
          <source>Free Memory Used By A Database Connection</source>
          <target state="translated">데이터베이스 연결에 사용 된 여유 메모리</target>
        </trans-unit>
        <trans-unit id="c3f00513ee103316a9c102f8d540f97f3d93a05d" translate="yes" xml:space="preserve">
          <source>Freelist leaf pages contain no information. SQLite avoids reading or writing freelist leaf pages in order to reduce disk I/O.</source>
          <target state="translated">프리리스트 리프 페이지에는 정보가 없습니다. SQLite는 디스크 I / O를 줄이기 위해 프리리스트 리프 페이지를 읽거나 쓰지 않습니다.</target>
        </trans-unit>
        <trans-unit id="71c292b702c9c6ddbea2af4ccdda270456dc5dd4" translate="yes" xml:space="preserve">
          <source>Frequent inserts, updates, and deletes can cause the database file to become fragmented - where data for a single table or index is scattered around the database file. Running VACUUM ensures that each table and index is largely stored contiguously within the database file. In some cases, VACUUM may also reduce the number of partially filled pages in the database, reducing the size of the database file further.</source>
          <target state="translated">빈번한 삽입, 업데이트 및 삭제로 인해 데이터베이스 파일이 조각 날 수 있습니다. 단일 테이블 또는 인덱스에 대한 데이터가 데이터베이스 파일 주위에 분산되어 있습니다. VACUUM을 실행하면 각 테이블과 인덱스가 데이터베이스 파일 내에 연속적으로 저장됩니다. 경우에 따라 VACUUM은 데이터베이스에서 부분적으로 채워진 페이지 수를 줄여 데이터베이스 파일의 크기를 더 줄일 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="d790b402d79ac1a723c790313bcd679999474630" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions</source>
          <target state="translated">자주 묻는 질문</target>
        </trans-unit>
        <trans-unit id="4dca8789d725335eabc320e5fd334c48abe46050" translate="yes" xml:space="preserve">
          <source>From the &lt;a href=&quot;cli&quot;&gt;command-line shell&lt;/a&gt;, extensions can be loaded using the &quot;.load&quot; dot-command. For example:</source>
          <target state="translated">로부터 &lt;a href=&quot;cli&quot;&gt;명령 줄 셸&lt;/a&gt; , 확장은 &quot;.load&quot;점 명령을 사용하여로드 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9622d74f0a066cde3991b933210f9d9f6547b468" translate="yes" xml:space="preserve">
          <source>From the point of view of a single process, a database file can be in one of five locking states:</source>
          <target state="translated">단일 프로세스의 관점에서 데이터베이스 파일은 5 가지 잠금 상태 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f2bf6ce9c451768f240ac82fe10e69d266839161" translate="yes" xml:space="preserve">
          <source>From the point of view of the uppers layers of the SQLite stack, each open database file uses exactly one VFS. But in practice, a particular VFS might just be a thin wrapper around another VFS that does the real work. We call a wrapper VFS a &quot;shim&quot;.</source>
          <target state="translated">SQLite 스택의 상위 계층 관점에서 볼 때 열려있는 각 데이터베이스 파일은 정확히 하나의 VFS를 사용합니다. 그러나 실제로 특정 VFS는 실제 작업을 수행하는 다른 VFS를 둘러싼 얇은 래퍼 일 수 있습니다. 래퍼 VFS를 &quot;심&quot;이라고합니다.</target>
        </trans-unit>
        <trans-unit id="b51b364d89abfa3baa92bcc31eb6e45de7419ef6" translate="yes" xml:space="preserve">
          <source>From the users point of view, FTS tables are similar to ordinary SQLite tables in many ways. Data may be added to, modified within and removed from FTS tables using the INSERT, UPDATE and DELETE commands just as it may be with ordinary tables. Similarly, the SELECT command may be used to query data. The following list summarizes the differences between FTS and ordinary tables:</source>
          <target state="translated">사용자 관점에서 FTS 테이블은 여러 가지면에서 일반 SQLite 테이블과 유사합니다. INSERT, UPDATE 및 DELETE 명령을 사용하여 일반 테이블에서와 마찬가지로 FTS 테이블에서 데이터를 추가, 수정 및 제거 할 수 있습니다. 마찬가지로 SELECT 명령을 사용하여 데이터를 쿼리 할 수 ​​있습니다. 다음 목록은 FTS와 일반 테이블의 차이점을 요약 한 것입니다.</target>
        </trans-unit>
        <trans-unit id="27c4a8e9b8642a933f67723d0e4be1b9a0f44d80" translate="yes" xml:space="preserve">
          <source>From this we get the following output</source>
          <target state="translated">이것으로부터 우리는 다음과 같은 결과를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="2180268f2a9a9fda782b57bf8e01a18a029a7a96" translate="yes" xml:space="preserve">
          <source>Fulfill God's commandments daily in your deeds.</source>
          <target state="translated">당신의 행동으로 매일 하나님의 계명을 완수하십시오.</target>
        </trans-unit>
        <trans-unit id="b471a096b84cc0494684e033a051e31af5d4baaa" translate="yes" xml:space="preserve">
          <source>Fulfill not the desires of the flesh; hate your own will.</source>
          <target state="translated">육체의 욕망을 충족시키지 마십시오. 자신의 의지를 싫어하십시오.</target>
        </trans-unit>
        <trans-unit id="c55154da9bee9185f44dff21df8abc2c3aabdcae" translate="yes" xml:space="preserve">
          <source>Full unicode case folding is supported in SQLite if it is compiled with the &lt;a href=&quot;compile#enable_icu&quot;&gt;-DSQLITE_ENABLE_ICU&lt;/a&gt; option and linked against the &lt;a href=&quot;http://site.icu-project.org/&quot;&gt;International Components for Unicode&lt;/a&gt; library.</source>
          <target state="translated">전체 유니 코드 케이스 폴딩은 &lt;a href=&quot;compile#enable_icu&quot;&gt;-DSQLITE_ENABLE_ICU&lt;/a&gt; 옵션으로 컴파일되고 &lt;a href=&quot;http://site.icu-project.org/&quot;&gt;International Components for Unicode&lt;/a&gt; 라이브러리에 링크 된 경우 SQLite에서 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="90b0c8025a15a6f38263adcf72861e6ab67a9305" translate="yes" xml:space="preserve">
          <source>Full-Featured SQL</source>
          <target state="translated">모든 기능을 갖춘 SQL</target>
        </trans-unit>
        <trans-unit id="9e0f1c37b71547a59fac0e69533c4df840ff38fe" translate="yes" xml:space="preserve">
          <source>Full-Text Search</source>
          <target state="translated">전문 검색</target>
        </trans-unit>
        <trans-unit id="369603a7ebe96771eca2b1d07435e9996bd963f3" translate="yes" xml:space="preserve">
          <source>Full-text search</source>
          <target state="translated">전체 텍스트 검색</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="9365da4d7427ae049cd7228599ffdbf56ca765df" translate="yes" xml:space="preserve">
          <source>Function &lt;a href=&quot;c3ref/backup_finish#sqlite3backupfinish&quot;&gt;sqlite3_backup_finish()&lt;/a&gt; is called to clean up resources allocated by &lt;a href=&quot;c3ref/backup_finish#sqlite3backupinit&quot;&gt;sqlite3_backup_init()&lt;/a&gt;.</source>
          <target state="translated">기능 &lt;a href=&quot;c3ref/backup_finish#sqlite3backupfinish&quot;&gt;sqlite3_backup_finish은 ()&lt;/a&gt; 에 의해 할당 정리 자원에 대한라고 &lt;a href=&quot;c3ref/backup_finish#sqlite3backupinit&quot;&gt;sqlite3_backup_init ()&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6ee739a58d0601e439d67d32ce677eb6f284f6f0" translate="yes" xml:space="preserve">
          <source>Function &lt;a href=&quot;c3ref/backup_finish#sqlite3backupinit&quot;&gt;sqlite3_backup_init()&lt;/a&gt; is called to create an &lt;a href=&quot;c3ref/backup&quot;&gt;sqlite3_backup&lt;/a&gt; object to copy data between the two databases (either from a file and into the in-memory database, or vice-versa).</source>
          <target state="translated">&lt;a href=&quot;c3ref/backup_finish#sqlite3backupinit&quot;&gt;sqlite3_backup_init ()&lt;/a&gt; 함수 는 &lt;a href=&quot;c3ref/backup&quot;&gt;sqlite3_backup&lt;/a&gt; 오브젝트 를 작성 하여 두 데이터베이스 사이에서 파일과 메모리 내 데이터베이스로 또는 그 반대로 데이터를 복사합니다.</target>
        </trans-unit>
        <trans-unit id="3518bc62cbd77290edb8df852902f3d26b669db7" translate="yes" xml:space="preserve">
          <source>Function &lt;a href=&quot;c3ref/backup_finish#sqlite3backupinit&quot;&gt;sqlite3_backup_init()&lt;/a&gt; is called to create an &lt;a href=&quot;c3ref/backup&quot;&gt;sqlite3_backup&lt;/a&gt; object to copy data from database pDb to the backup database file identified by zFilename.</source>
          <target state="translated">&lt;a href=&quot;c3ref/backup_finish#sqlite3backupinit&quot;&gt;sqlite3_backup_init ()&lt;/a&gt; 함수 는 &lt;a href=&quot;c3ref/backup&quot;&gt;sqlite3_backup&lt;/a&gt; 오브젝트 를 작성하여 데이터베이스 pDb에서 zFilename으로 식별 된 백업 데이터베이스 파일로 데이터를 복사합니다.</target>
        </trans-unit>
        <trans-unit id="391bd2c3bef8e5815ac8dc9e143dc5e9f29edc4b" translate="yes" xml:space="preserve">
          <source>Function &lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step()&lt;/a&gt; is called with a parameter of 5 to copy 5 pages of database pDb to the backup database (file zFilename).</source>
          <target state="translated">&lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step ()&lt;/a&gt; 함수 는 매개 변수 5로 호출되어 데이터베이스 pDb의 5 페이지를 백업 데이터베이스 (파일 zFilename)에 복사합니다.</target>
        </trans-unit>
        <trans-unit id="38d0016fe914d4211802e56c1b039ba739bf3a21" translate="yes" xml:space="preserve">
          <source>Function &lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step()&lt;/a&gt; is called with a parameter of &lt;code&gt;-1&lt;/code&gt; to copy the entire source database to the destination.</source>
          <target state="translated">&lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step ()&lt;/a&gt; 함수 는 매개 변수 &lt;code&gt;-1&lt;/code&gt; 로 호출되어 전체 소스 데이터베이스를 대상으로 복사합니다.</target>
        </trans-unit>
        <trans-unit id="a019467e942226e7593baeafe04451d52208ddbd" translate="yes" xml:space="preserve">
          <source>Function Auxiliary Data</source>
          <target state="translated">기능 보조 데이터</target>
        </trans-unit>
        <trans-unit id="95b0294dd891e754097881615649b65fc6ba31c5" translate="yes" xml:space="preserve">
          <source>Function Flags</source>
          <target state="translated">기능 플래그</target>
        </trans-unit>
        <trans-unit id="17555700d9f22f47c91cbb0e6dcdac3a03a90e07" translate="yes" xml:space="preserve">
          <source>Function implementations use the following APIs to acquire context and to report results:</source>
          <target state="translated">함수 구현은 다음 API를 사용하여 컨텍스트를 획득하고 결과를보고합니다.</target>
        </trans-unit>
        <trans-unit id="7db899803172ac5c12cb30190a927b06044d501c" translate="yes" xml:space="preserve">
          <source>Function sqlite3_backup_step(B,N) will copy up to N pages between the source and destination databases specified by &lt;a href=&quot;#sqlite3_backup&quot;&gt;sqlite3_backup&lt;/a&gt; object B. If N is negative, all remaining source pages are copied. If sqlite3_backup_step(B,N) successfully copies N pages and there are still more pages to be copied, then the function returns &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OK&lt;/a&gt;. If sqlite3_backup_step(B,N) successfully finishes copying all pages from source to destination, then it returns &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_DONE&lt;/a&gt;. If an error occurs while running sqlite3_backup_step(B,N), then an &lt;a href=&quot;rescode&quot;&gt;error code&lt;/a&gt; is returned. As well as &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OK&lt;/a&gt; and &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_DONE&lt;/a&gt;, a call to sqlite3_backup_step() may return &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_READONLY&lt;/a&gt;, &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_NOMEM&lt;/a&gt;, &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_BUSY&lt;/a&gt;, &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_LOCKED&lt;/a&gt;, or an &lt;a href=&quot;#SQLITE_ABORT_ROLLBACK&quot;&gt;SQLITE_IOERR_XXX&lt;/a&gt; extended error code.</source>
          <target state="translated">sqlite3_backup_step (B, N) 함수는 &lt;a href=&quot;#sqlite3_backup&quot;&gt;sqlite3_backup&lt;/a&gt; 오브젝트 B에 의해 지정된 소스 및 대상 데이터베이스 사이에서 최대 N 페이지를 복사 합니다. N이 음수이면 나머지 모든 소스 페이지가 복사됩니다. sqlite3_backup_step (B, N)이 N 페이지를 성공적으로 복사하고 여전히 복사 할 페이지가 더 있으면 함수는 &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OK를&lt;/a&gt; 리턴합니다 . sqlite3_backup_step (B, N)이 모든 페이지를 소스에서 대상으로 복사를 완료하면 &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_DONE&lt;/a&gt; 을 리턴합니다 . sqlite3_backup_step (B, N)을 실행하는 동안 오류가 발생하면 &lt;a href=&quot;rescode&quot;&gt;오류 코드&lt;/a&gt; 가 리턴됩니다. 뿐만 아니라 &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OK&lt;/a&gt; 및 &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_DONE&lt;/a&gt; , sqlite3_backup_step ()에 대한 호출이 반환 할 수 있습니다 &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_READONLY&lt;/a&gt; ,&lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_NOMEM&lt;/a&gt; , &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_BUSY&lt;/a&gt; , &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_LOCKED&lt;/a&gt; 또는 &lt;a href=&quot;#SQLITE_ABORT_ROLLBACK&quot;&gt;SQLITE_IOERR_XXX&lt;/a&gt; 확장 오류 코드.</target>
        </trans-unit>
        <trans-unit id="9255837a8368562d39b56b025c25a117e386acd6" translate="yes" xml:space="preserve">
          <source>Function sqlite3_backup_step(B,N) will copy up to N pages between the source and destination databases specified by &lt;a href=&quot;backup&quot;&gt;sqlite3_backup&lt;/a&gt; object B. If N is negative, all remaining source pages are copied. If sqlite3_backup_step(B,N) successfully copies N pages and there are still more pages to be copied, then the function returns &lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OK&lt;/a&gt;. If sqlite3_backup_step(B,N) successfully finishes copying all pages from source to destination, then it returns &lt;a href=&quot;../rescode#done&quot;&gt;SQLITE_DONE&lt;/a&gt;. If an error occurs while running sqlite3_backup_step(B,N), then an &lt;a href=&quot;../rescode&quot;&gt;error code&lt;/a&gt; is returned. As well as &lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OK&lt;/a&gt; and &lt;a href=&quot;../rescode#done&quot;&gt;SQLITE_DONE&lt;/a&gt;, a call to sqlite3_backup_step() may return &lt;a href=&quot;../rescode#readonly&quot;&gt;SQLITE_READONLY&lt;/a&gt;, &lt;a href=&quot;../rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt;, &lt;a href=&quot;../rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;, &lt;a href=&quot;../rescode#locked&quot;&gt;SQLITE_LOCKED&lt;/a&gt;, or an &lt;a href=&quot;../rescode#ioerr_access&quot;&gt;SQLITE_IOERR_XXX&lt;/a&gt; extended error code.</source>
          <target state="translated">sqlite3_backup_step (B, N) 함수는 &lt;a href=&quot;backup&quot;&gt;sqlite3_backup&lt;/a&gt; 오브젝트 B에 의해 지정된 소스 및 대상 데이터베이스 사이에서 최대 N 페이지를 복사 합니다. N이 음수이면 나머지 모든 소스 페이지가 복사됩니다. sqlite3_backup_step (B, N)이 N 페이지를 성공적으로 복사하고 여전히 복사 할 페이지가 더 있으면 함수는 &lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OK를&lt;/a&gt; 리턴합니다 . sqlite3_backup_step (B, N)이 모든 페이지를 소스에서 대상으로 복사를 완료하면 &lt;a href=&quot;../rescode#done&quot;&gt;SQLITE_DONE&lt;/a&gt; 을 리턴합니다 . sqlite3_backup_step (B, N)을 실행하는 동안 오류가 발생하면 &lt;a href=&quot;../rescode&quot;&gt;오류 코드&lt;/a&gt; 가 리턴됩니다. 뿐만 아니라 &lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OK&lt;/a&gt; 및 &lt;a href=&quot;../rescode#done&quot;&gt;SQLITE_DONE&lt;/a&gt; , sqlite3_backup_step ()에 대한 호출이 반환 할 수 있습니다 &lt;a href=&quot;../rescode#readonly&quot;&gt;SQLITE_READONLY&lt;/a&gt; ,&lt;a href=&quot;../rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt; , &lt;a href=&quot;../rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt; , &lt;a href=&quot;../rescode#locked&quot;&gt;SQLITE_LOCKED&lt;/a&gt; 또는 &lt;a href=&quot;../rescode#ioerr_access&quot;&gt;SQLITE_IOERR_XXX&lt;/a&gt; 확장 오류 코드.</target>
        </trans-unit>
        <trans-unit id="02506e4ca51a17167d74a2f8b901e6d46a621915" translate="yes" xml:space="preserve">
          <source>Function sqlite3rbu_step() is called on the RBU handle until either the RBU vacuum is finished, an error occurs or the application wishes to suspend the RBU vacuum.</source>
          <target state="translated">sqlite3rbu_step () 함수는 RBU 진공이 완료되거나 오류가 발생하거나 응용 프로그램이 RBU 진공을 일시 중단하려고 할 때까지 RBU 핸들에서 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="c29dbde42f9e09b5fa1fe9e874978bd60461ca23" translate="yes" xml:space="preserve">
          <source>Function0</source>
          <target state="translated">Function0</target>
        </trans-unit>
        <trans-unit id="885fce7082ac7fe77b80dbde8d190b12ddbee6ea" translate="yes" xml:space="preserve">
          <source>Functionality Testing</source>
          <target state="translated">기능 테스트</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="5a1198fbca49df3b9353761343f6ab00ba7526e3" translate="yes" xml:space="preserve">
          <source>Functions:</source>
          <target state="translated">Functions:</target>
        </trans-unit>
        <trans-unit id="1ddc4309220e5ca80653bda487622cf643ea376d" translate="yes" xml:space="preserve">
          <source>Fundamental Datatypes</source>
          <target state="translated">기본 데이터 유형</target>
        </trans-unit>
        <trans-unit id="f728c83ebd508ddfa64fa9b670d3c24c116a1c08" translate="yes" xml:space="preserve">
          <source>Further performance improves can be made by using the &lt;a href=&quot;mmap&quot;&gt;memory-mapped I/O&lt;/a&gt; feature of SQLite. In the next chart, the entire 1GB database file is memory mapped and blobs are read (in random order) using the &lt;a href=&quot;c3ref/blob_read&quot;&gt;sqlite3_blob_read()&lt;/a&gt; interface. With these optimizations, SQLite is twice as fast as Android or MacOS-X and over 10 times faster than Windows.</source>
          <target state="translated">SQLite 의 &lt;a href=&quot;mmap&quot;&gt;메모리 매핑 된 I / O&lt;/a&gt; 기능을 사용하면 성능을 더욱 향상시킬 수 있습니다 . 다음 차트에서 전체 1GB 데이터베이스 파일은 메모리 매핑되고 &lt;a href=&quot;c3ref/blob_read&quot;&gt;sqlite3_blob_read ()&lt;/a&gt; 인터페이스를 사용하여 블로 브 를 임의 순서대로 읽습니다 . 이러한 최적화를 통해 SQLite는 Android 또는 MacOS-X보다 2 배 빠르며 Windows보다 10 배 이상 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="215d209e37d2a11fed7e914dfee16f71ee55be90" translate="yes" xml:space="preserve">
          <source>Further suppose that column x contains values spread out between 0 and 1,000,000 and column y contains values that span between 0 and 1,000. In that scenario, the range constraint on column x should reduce the search space by a factor of 10,000 whereas the range constraint on column y should reduce the search space by a factor of only 10. So the ex2i1 index should be preferred.</source>
          <target state="translated">또한 x 열에 0에서 1,000,000 사이의 값이 포함되고 y 열에 0에서 1,000 사이의 값이 포함되어 있다고 가정합니다. 이 시나리오에서 x 열의 범위 제한은 검색 공간을 10,000 배로 줄여야하는 반면 y 열의 범위 제한은 검색 공간을 10 배로 줄여야합니다. 따라서 ex2i1 색인이 선호됩니다.</target>
        </trans-unit>
        <trans-unit id="09aabcfb38f7cb10806136de02a602b19c076fd6" translate="yes" xml:space="preserve">
          <source>Further to keeping &lt;b&gt;n&lt;/b&gt; small, one desires to keep the size of the largest memory allocations under control. Large requests to the general-purpose memory allocator might come from several sources:</source>
          <target state="translated">&lt;b&gt;n을&lt;/b&gt; 작게 유지하는 것 외에도, 가장 큰 메모리 할당의 크기를 제어하기를 원한다. 범용 메모리 할당 자에 대한 대량 요청은 여러 소스에서 온 것일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4a74f247651044b2313a36316a7929616b6d570a" translate="yes" xml:space="preserve">
          <source>Furthermore, a single SQLite database holding 10-kilobyte blobs uses about 20% less disk space than storing the blobs in individual files.</source>
          <target state="translated">또한 10KB의 Blob을 보유한 단일 SQLite 데이터베이스는 개별 파일에 Blob을 저장하는 것보다 디스크 공간을 약 20 % 적게 사용합니다.</target>
        </trans-unit>
        <trans-unit id="8bd50359d3a17558a2d398e2f44b82ca134e4e80" translate="yes" xml:space="preserve">
          <source>Future releases may add new output columns and may change the order of legacy columns. Further detail about the meaning of each column in the SQLITE_STMT virtual table is provided below:</source>
          <target state="translated">향후 릴리스에서는 새로운 출력 열이 추가 될 수 있으며 레거시 열의 순서가 변경 될 수 있습니다. SQLITE_STMT 가상 테이블에서 각 열의 의미에 대한 자세한 내용은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6831b46470717c86c7d25cb9cedff9f9bee20302" translate="yes" xml:space="preserve">
          <source>Future releases of SQLite might enable those interfaces by default and instead offer an SQLITE_OMIT_DESERIALIZE option to leave them out.</source>
          <target state="translated">이후 릴리스의 SQLite는 기본적으로 해당 인터페이스를 사용 가능하게하고 대신 SQLITE_OMIT_DESERIALIZE 옵션을 제공하여이를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="69eed414fd6ede90f6e232a4b640df2129c7213e" translate="yes" xml:space="preserve">
          <source>Future versions of SQLite may extend the list of errors which might cause automatic transaction rollback. Future versions of SQLite might change the error response. In particular, we may choose to simplify the interface in future versions of SQLite by causing the errors above to force an unconditional rollback.</source>
          <target state="translated">이후 버전의 SQLite는 오류 목록을 확장하여 자동 트랜잭션 롤백을 유발할 수 있습니다. 이후 버전의 SQLite는 오류 응답을 변경할 수 있습니다. 특히, 위의 오류로 인해 무조건 롤백이 발생하도록하여 향후 버전의 SQLite에서 인터페이스를 단순화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b0b58ce3a5e420ed148b6052399ca3a065dfe3cb" translate="yes" xml:space="preserve">
          <source>Future versions of SQLite might enable the batch-atomic-write capability by default, at which point this compile-time option will become superfluous.</source>
          <target state="translated">이후 버전의 SQLite는 기본적으로 일괄 원자 쓰기 기능을 활성화 할 수 있으며이 시점에서이 컴파일 타임 옵션이 불필요 해집니다.</target>
        </trans-unit>
        <trans-unit id="75a65696cc2dd88673f048a8e620acbe3511d286" translate="yes" xml:space="preserve">
          <source>Fuzz testing and &lt;a href=&quot;testing#mcdc&quot;&gt;100% MC/DC testing&lt;/a&gt; are in tension with one another. That is to say, code tested to 100% MC/DC will tend to be more vulnerable to problems found by fuzzing and code that performs well during fuzz testing will tend to have (much) less than 100% MC/DC. This is because MC/DC testing discourages &lt;a href=&quot;testing#defcode&quot;&gt;defensive code&lt;/a&gt; with unreachable branches, but without defensive code, a fuzzer is more likely to find a path that causes problems. MC/DC testing seems to work well for building code that is robust during typical normal use, whereas fuzz testing is good for building code that is robust against malicious attack.</source>
          <target state="translated">퍼즈 테스트와 &lt;a href=&quot;testing#mcdc&quot;&gt;100 % MC / DC 테스트&lt;/a&gt; 는 서로 긴장 상태에 있습니다. 즉, 100 % MC / DC로 테스트 된 코드는 퍼징으로 발견되는 문제에 더 취약한 경향이 있으며, 퍼지 테스트 중에 잘 수행되는 코드는 MC / DC가 100 % 미만인 경향이 있습니다. MC / DC는 스타일을 장려을 테스트하기 때문이다 &lt;a href=&quot;testing#defcode&quot;&gt;방어 코드&lt;/a&gt; 에 연결할 지사를 가지고있는,하지만 방어 코드없이 fuzzer는 가능성이 문제가 발생 경로를 찾을 수 있습니다. MC / DC 테스트는 일반적인 일반적인 사용 중에 강력한 코드를 빌드하는 데 잘 작동하는 반면 퍼즈 테스트는 악의적 인 공격에 대해 강력한 코드를 빌드하는 데 좋습니다.</target>
        </trans-unit>
        <trans-unit id="7aac4860a695a884103c23bef4fe10cea8ac21a0" translate="yes" xml:space="preserve">
          <source>Fuzz tests</source>
          <target state="translated">퍼지 테스트</target>
        </trans-unit>
        <trans-unit id="cbf13864eb622e042fd70afc25b332a98febed1d" translate="yes" xml:space="preserve">
          <source>GCC-7 generates binaries that are smaller and faster than GCC-5, though the difference is not that great.</source>
          <target state="translated">GCC-7은 GCC-5보다 작고 빠른 이진 파일을 생성하지만 그 차이는 크지 않습니다.</target>
        </trans-unit>
        <trans-unit id="82cb2940a14f458fe56d211dffdcd12595e8b940" translate="yes" xml:space="preserve">
          <source>GENERATED</source>
          <target state="translated">GENERATED</target>
        </trans-unit>
        <trans-unit id="3c1c8852a41864ea17cea1296e10f38e7d36f590" translate="yes" xml:space="preserve">
          <source>GIT - Git source code repository</source>
          <target state="translated">GIT-Git 소스 코드 저장소</target>
        </trans-unit>
        <trans-unit id="801660e770a91f34fb13ac91a9b5cbd2d98c6d3a" translate="yes" xml:space="preserve">
          <source>GLOB</source>
          <target state="translated">GLOB</target>
        </trans-unit>
        <trans-unit id="ea5a383494f81c4f464965d03bf916c41d68ced5" translate="yes" xml:space="preserve">
          <source>GROUP</source>
          <target state="translated">GROUP</target>
        </trans-unit>
        <trans-unit id="992f3cd91fffb522eba0b5e27b68c643f2967283" translate="yes" xml:space="preserve">
          <source>GROUP BY now considers NULLs to be equal again, as it should</source>
          <target state="translated">GROUP BY는 이제 NULL을 다시 같은 것으로 간주합니다.</target>
        </trans-unit>
        <trans-unit id="1f8969d436579977f5b13e27e290ffdb25736672" translate="yes" xml:space="preserve">
          <source>GROUPS</source>
          <target state="translated">GROUPS</target>
        </trans-unit>
        <trans-unit id="47abf252888b506642430a87f17ad2e364853ea7" translate="yes" xml:space="preserve">
          <source>GROUPS frames</source>
          <target state="translated">그룹 프레임</target>
        </trans-unit>
        <trans-unit id="5023fde21a93efcc45f3ef1278a03020db274d7f" translate="yes" xml:space="preserve">
          <source>Ge</source>
          <target state="translated">Ge</target>
        </trans-unit>
        <trans-unit id="5f5383c13d2f60a6733afafdeaf91505cfcc253b" translate="yes" xml:space="preserve">
          <source>Generalized ALTER TABLE procedure</source>
          <target state="translated">일반화 된 ALTER TABLE 프로 시저</target>
        </trans-unit>
        <trans-unit id="200f1a824c74356136271be8f5cec761b8361890" translate="yes" xml:space="preserve">
          <source>Generalized the IS and IS NOT operators to take arbitrary expressions on their right-hand side.</source>
          <target state="translated">IS 및 IS NOT 연산자를 일반화하여 오른쪽에 임의의 표현을 취했습니다.</target>
        </trans-unit>
        <trans-unit id="b3419155244f27d32ab3d7f4be3add6bd08da9d5" translate="yes" xml:space="preserve">
          <source>Generally speaking, there are three separate subsystems within SQLite that can be modified or overridden at compile-time. The mutex subsystem is used to serialize access to SQLite resources that are shared among threads. The memory allocation subsystem is used to allocate memory required by SQLite objects and for the database cache. Finally, the &lt;a href=&quot;c3ref/vfs&quot;&gt;Virtual File System&lt;/a&gt; subsystem is used to provide a portable interface between SQLite and the underlying operating system and especially the file system. We call these three subsystems the &quot;interface&quot; subsystems of SQLite.</source>
          <target state="translated">일반적으로 SQLite에는 컴파일 타임에 수정하거나 재정의 할 수있는 세 개의 개별 하위 시스템이 있습니다. mutex 서브 시스템은 스레드간에 공유되는 SQLite 자원에 대한 액세스를 직렬화하는 데 사용됩니다. 메모리 할당 서브 시스템은 SQLite 오브젝트 및 데이터베이스 캐시에 필요한 메모리를 할당하는 데 사용됩니다. 마지막으로 &lt;a href=&quot;c3ref/vfs&quot;&gt;가상 파일 시스템&lt;/a&gt; 하위 시스템은 SQLite와 기본 운영 체제, 특히 파일 시스템 간의 이식 가능한 인터페이스를 제공하는 데 사용됩니다. 우리는이 세 가지 서브 시스템을 SQLite의 &quot;인터페이스&quot;서브 시스템이라고합니다.</target>
        </trans-unit>
        <trans-unit id="03b11aad395b9bb3b854450c1f0acff0112439bd" translate="yes" xml:space="preserve">
          <source>Generate A Changeset From A Session Object</source>
          <target state="translated">세션 객체에서 변경 세트 생성</target>
        </trans-unit>
        <trans-unit id="771f6c81129288bd0dca35edc653f4896b8a38b9" translate="yes" xml:space="preserve">
          <source>Generate A Patchset From A Session Object</source>
          <target state="translated">세션 객체에서 패치 세트 생성</target>
        </trans-unit>
        <trans-unit id="c543fcc61a656cc087657032229c13b299493cc4" translate="yes" xml:space="preserve">
          <source>Generate all multiples of 5 less than or equal to 100:</source>
          <target state="translated">100보다 작거나 같은 5의 배수를 모두 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="79e208b13cb09ea92286261229fb60357b5683cd" translate="yes" xml:space="preserve">
          <source>Generate the 20 random integer values:</source>
          <target state="translated">20 개의 임의의 정수 값을 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="46614740c9601066a8714b11664b1eb75a5a0bb4" translate="yes" xml:space="preserve">
          <source>Generating the results of a simple SELECT statement is presented as a four step process in the description below:</source>
          <target state="translated">간단한 SELECT 문의 결과 생성은 아래 설명에서 4 단계 프로세스로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="0060bdc4470d529ca18bce37edc0d7a0701d9b10" translate="yes" xml:space="preserve">
          <source>Geopoly</source>
          <target state="translated">Geopoly</target>
        </trans-unit>
        <trans-unit id="c4340d254981277ce14859ec23653c0dac4e3963" translate="yes" xml:space="preserve">
          <source>Geopoly operates on &quot;simple&quot; polygons - that is, polygons for which the boundary does not intersect itself. Geopoly thus extends the capabilities of the &lt;a href=&quot;rtree&quot;&gt;R-Tree extension&lt;/a&gt; which can only deal with rectangular areas. On the other hand, the &lt;a href=&quot;rtree&quot;&gt;R-Tree extension&lt;/a&gt; is able to handle between 1 and 5 coordinate dimensions, whereas Geopoly is restricted to 2-dimensional shapes only.</source>
          <target state="translated">Geopoly는 &quot;간단한&quot;다각형, 즉 경계가 서로 교차하지 않는 다각형에서 작동합니다. 따라서 Geopoly 는 직사각형 영역 만 처리 할 수 있는 &lt;a href=&quot;rtree&quot;&gt;R-Tree 확장 기능&lt;/a&gt; 을 확장 합니다. 반면 &lt;a href=&quot;rtree&quot;&gt;R-Tree 확장&lt;/a&gt; 은 1에서 5까지의 좌표 치수를 처리 할 수있는 반면 Geopoly는 2 차원 형태로만 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="6dd9a0429b5e12a110f96aed0989c67466586ea1" translate="yes" xml:space="preserve">
          <source>Geopoly stores all polygons internally using a binary format. A binary polygon consists of a 4-byte header following by an array of coordinate pairs in which each dimension of each coordinate is a 32-bit floating point number.</source>
          <target state="translated">Geopoly는 이진 형식을 사용하여 모든 다각형을 내부적으로 저장합니다. 이진 다각형은 각 좌표의 각 차원이 32 비트 부동 소수점 숫자 인 좌표 쌍 배열이 뒤에 오는 4 바이트 헤더로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="230fd79e9ac234b116998f305ec36a626773a0c1" translate="yes" xml:space="preserve">
          <source>Get a copy of the prebuilt binaries for your machine, or get a copy of the sources and compile them yourself. Visit the &lt;a href=&quot;https://sqlite.org/download.html&quot;&gt;download&lt;/a&gt; page for more information.</source>
          <target state="translated">머신의 사전 빌드 된 바이너리 사본을 얻거나 소스 사본을 가져 와서 직접 컴파일하십시오. 자세한 내용 은 &lt;a href=&quot;https://sqlite.org/download.html&quot;&gt;다운로드&lt;/a&gt; 페이지를 방문 하십시오.</target>
        </trans-unit>
        <trans-unit id="f22b4172b2caeb752e5b6845137b0e1c3132162f" translate="yes" xml:space="preserve">
          <source>Get a new integer record number (a.k.a &quot;rowid&quot;) used as the key to a table. The record number is not previously used as a key in the database table that cursor P1 points to. The new record number is written written to register P2.</source>
          <target state="translated">테이블의 키로 사용되는 새로운 정수 레코드 번호 (일명 &quot;rowid&quot;)를 가져옵니다. 레코드 번호는 이전에 커서 P1이 가리키는 데이터베이스 테이블에서 키로 사용되지 않았습니다. 새로운 레코드 번호가 레지스터 P2에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="2c8ad3eda2ae8758b9937a69c2cdf3d37bc6a82b" translate="yes" xml:space="preserve">
          <source>Get extension loading working on Cygwin.</source>
          <target state="translated">Cygwin에서 확장 로딩을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="70d300a9221d054ecf73f3a432c241cce5538fb1" translate="yes" xml:space="preserve">
          <source>Get the SQLITE_ENABLE_LOCKING_STYLE macro working again on Mac OS X.</source>
          <target state="translated">Mac OS X에서 SQLITE_ENABLE_LOCKING_STYLE 매크로를 다시 작동 시키십시오.</target>
        </trans-unit>
        <trans-unit id="191ab3ffcff8c3d125f02fa19cf1b4772a774563" translate="yes" xml:space="preserve">
          <source>Get the library working correctly when compiled with GCC option &quot;-fstrict-aliasing&quot;.</source>
          <target state="translated">GCC 옵션 &quot;-fstrict-aliasing&quot;으로 컴파일 할 때 라이브러리가 올바르게 작동하도록하십시오.</target>
        </trans-unit>
        <trans-unit id="e33fe52a421a08f566920837d8eaa9b7577c26cc" translate="yes" xml:space="preserve">
          <source>Git allows you to go backwards in time easily. Given the latest check-in on a branch, Git lets you see all the ancestors of that check-in. But Git makes it difficult to move in the other direction. Given some historical check-in, it is quite challenging in Git to find out what came next. It can be done, but it is sufficiently difficult that people rarely do it. Common interfaces for Git, such as GitHub, do not support the ability.</source>
          <target state="translated">힘내 당신이 쉽게 시간을 거꾸로 갈 수 있습니다. 지점에서 최신 체크인을 한 경우 Git을 사용하면 해당 체크인의 모든 조상을 볼 수 있습니다. 그러나 Git은 다른 방향으로 움직이기가 어렵습니다. 역사적으로 체크인을한다면 Git에서 다음에 무엇이 올 것인지 알아내는 것은 매우 어려운 일입니다. 할 수는 있지만 사람들이 거의하지 않는 것은 충분히 어렵다. GitHub와 같은 Git의 공통 인터페이스는이 기능을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b6fbc2ab6d8b00135f72a297ae81133b9c538d92" translate="yes" xml:space="preserve">
          <source>Git commands (and/or options on commands) for moving and comparing content between all of these locations.</source>
          <target state="translated">이 모든 위치 사이에서 컨텐츠를 이동하고 비교하기위한 Git 명령 (및 / 또는 명령 옵션).</target>
        </trans-unit>
        <trans-unit id="913e20aa0e82cacccbed30743753b5fea41f9dd9" translate="yes" xml:space="preserve">
          <source>Git is complex software. One needs an installer of some kind to put Git on a developer workstation, or to upgrade to a newer version of Git. Setting up a Git server is non-trivial, and so most users have to use a third-party service such as GitHub or GitLab, and thus introduce additional (unnecessary) dependencies into the project.</source>
          <target state="translated">힘내는 복잡한 소프트웨어입니다. 개발자 워크 스테이션에 Git을 설치하거나 최신 버전의 Git으로 업그레이드하려면 일종의 설치 프로그램이 필요합니다. Git 서버를 설정하는 것은 쉬운 일이 아니므로 대부분의 사용자는 GitHub 또는 GitLab과 같은 타사 서비스를 사용해야하므로 프로젝트에 추가 (필요하지 않은) 종속성을 도입해야합니다.</target>
        </trans-unit>
        <trans-unit id="ee613d9b4f6dfc0f80be0bd2cfff2ea77808bbb6" translate="yes" xml:space="preserve">
          <source>Git keeps the complete DAG of the check-in sequence. But branch tags are local information that is not synced and not retained once a branch closes. This makes review of historical branches tedious.</source>
          <target state="translated">Git은 체크인 순서의 완전한 DAG를 유지합니다. 그러나 지점 태그는 지점이 닫히면 동기화되지 않고 유지되지 않는 로컬 정보입니다. 이것은 역사적 지점에 대한 검토를 지루하게 만듭니다.</target>
        </trans-unit>
        <trans-unit id="48b3160f0b763f1616179debce43562e664f02d9" translate="yes" xml:space="preserve">
          <source>GitHub and GitLab offer nothing comparable. The closest I have found is the &lt;a href=&quot;https://github.com/sqlite/sqlite/network&quot;&gt;network&lt;/a&gt;, which is slow to render (unless it is already cached), does not offer nearly as much details, and scarcely works on mobile. The &lt;a href=&quot;https://github.com/sqlite/sqlite/commits/master&quot;&gt;commits&lt;/a&gt; view of GitHub provides more detail, renders quickly, and works on mobile, but only shows a single branch at a time, so I cannot easily know if I've seen all of the recent changes. And even if GitHub/GitLab did offer better interfaces, both are third-party services. They are not a core part of Git. Hence, using them introduces yet another dependency into the project.</source>
          <target state="translated">GitHub와 GitLab은 비교할만한 것을 제공하지 않습니다. 내가 찾은 가장 가까운 &lt;a href=&quot;https://github.com/sqlite/sqlite/network&quot;&gt;네트워크&lt;/a&gt; 는 렌더링이 느리고 (이미 캐시되지 않은 한) 거의 세부 정보를 제공하지 않으며 모바일에서 거의 작동하지 않습니다. GitHub 의 &lt;a href=&quot;https://github.com/sqlite/sqlite/commits/master&quot;&gt;커밋&lt;/a&gt; 보기는 더 자세한 정보를 제공하고 신속하게 렌더링하며 모바일에서 작동하지만 한 번에 하나의 지점 만 표시하므로 최근의 모든 변경 사항을 보았는지 쉽게 알 수 없습니다. 그리고 GitHub / GitLab이 더 나은 인터페이스를 제공 했더라도 타사 서비스입니다. 그것들은 Git의 핵심 부분이 아닙니다. 따라서 그것들을 사용하면 프로젝트에 또 다른 의존성이 생깁니다.</target>
        </trans-unit>
        <trans-unit id="ba7606fea498a9e876c11c77be2a94dc96cb33f9" translate="yes" xml:space="preserve">
          <source>Given a page number P and a maximum WAL frame index M, return the largest WAL frame index for page P that does not exceed M, or return NULL if there are no frames for page P that do not exceed M.</source>
          <target state="translated">페이지 번호 P와 최대 WAL 프레임 인덱스 M이 주어지면 M을 초과하지 않는 페이지 P에 대해 가장 큰 WAL 프레임 인덱스를 리턴하거나 페이지 P에 대해 M을 초과하지 않는 프레임이 없으면 NULL을 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="d4a9375f517c74831802a20b14cf1be5743c9399" translate="yes" xml:space="preserve">
          <source>Given a single SQL statement, there might be dozens, hundreds, or even thousands of ways to implement that statement, depending on the complexity of the statement itself and of the underlying database schema. The task of the query planner is to select an algorithm from among the many choices that provides the answer with a minimum of disk I/O and CPU overhead.</source>
          <target state="translated">단일 SQL 문이 제공되면 명령문 자체와 기본 데이터베이스 스키마의 복잡도에 따라 해당 명령문을 구현하는 데 수십, 수백 또는 수천 가지 방법이있을 수 있습니다. 쿼리 플래너의 임무는 최소의 디스크 I / O 및 CPU 오버 헤드를 제공하는 다양한 선택 중에서 알고리즘을 선택하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="f6bcca46f0f74a9ae01ce42d9f7404d2419d51ad" translate="yes" xml:space="preserve">
          <source>Given all of the information above, the job of the xBestIndex method it to figure out the best way to search the virtual table.</source>
          <target state="translated">위의 모든 정보가 주어지면 xBestIndex 메서드의 작업은 가상 테이블을 검색하는 가장 좋은 방법을 찾는 것입니다.</target>
        </trans-unit>
        <trans-unit id="3214b13dd0b542c059230864a7a5bcd2b12ab804" translate="yes" xml:space="preserve">
          <source>Given an input string X, this routine attempts to determine the dominant script of that input and returns the ISO-15924 numeric code for that script. The current implementation understands the following scripts:</source>
          <target state="translated">입력 문자열 X가 주어지면이 루틴은 해당 입력의 주요 스크립트를 판별하려고 시도하고 해당 스크립트의 ISO-15924 숫자 코드를 리턴합니다. 현재 구현은 다음 스크립트를 이해합니다.</target>
        </trans-unit>
        <trans-unit id="c57b59e0dd1b427eb5c7b60fabfb8b9d76033a70" translate="yes" xml:space="preserve">
          <source>Given the definition of X1 above, the following expressions have historically evaluated to FALSE in SQLite, though the correct answer is actually NULL:</source>
          <target state="translated">위의 X1의 정의를 감안할 때 다음 표현식은 역사적으로 SQLite에서 FALSE로 평가되었지만 정답은 실제로 NULL입니다.</target>
        </trans-unit>
        <trans-unit id="bd2ada8cc33bdc4785b371a48d725c0e9ca58446" translate="yes" xml:space="preserve">
          <source>Given the new multi-column Idx3 index, it is now possible for SQLite to find the price of California oranges using only 2 binary searches:</source>
          <target state="translated">새로운 다중 열 Idx3 인덱스를 감안할 때 이제 SQLite는 2 개의 이진 검색 만 사용하여 캘리포니아 오렌지의 가격을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7427cf697be16a4ec1d916910128a59d920125e7" translate="yes" xml:space="preserve">
          <source>Glossary</source>
          <target state="translated">Glossary</target>
        </trans-unit>
        <trans-unit id="617490ec40d56766edf8aff111990bee9834d1c1" translate="yes" xml:space="preserve">
          <source>Gosub</source>
          <target state="translated">Gosub</target>
        </trans-unit>
        <trans-unit id="0a9ffc4a328e6d21b11f3b8312d08e5b413aec49" translate="yes" xml:space="preserve">
          <source>Goto</source>
          <target state="translated">Goto</target>
        </trans-unit>
        <trans-unit id="1dee13ac09a18c736a85fb7212501ca3f0535655" translate="yes" xml:space="preserve">
          <source>Gt</source>
          <target state="translated">Gt</target>
        </trans-unit>
        <trans-unit id="60f4e65b35154fc853b0c67ac464ba87691c1af9" translate="yes" xml:space="preserve">
          <source>Guard your tongue against evil and depraved speech.</source>
          <target state="translated">악하고 타락한 말로부터 혀를 지키십시오.</target>
        </trans-unit>
        <trans-unit id="3472b7100ee6c34d2c985ec6e738e904962356df" translate="yes" xml:space="preserve">
          <source>HAVING</source>
          <target state="translated">HAVING</target>
        </trans-unit>
        <trans-unit id="a4c7ee9ba5c961273e153da9b6004699add74ac0" translate="yes" xml:space="preserve">
          <source>HH:MM</source>
          <target state="translated">HH:MM</target>
        </trans-unit>
        <trans-unit id="4a05a9c514dbbe7b13aeee7ffbbac9804dba7f74" translate="yes" xml:space="preserve">
          <source>HH:MM:SS</source>
          <target state="translated">HH:MM:SS</target>
        </trans-unit>
        <trans-unit id="4fe76e489c6dd906a0f1a9c53aab6e472da095e8" translate="yes" xml:space="preserve">
          <source>HH:MM:SS.SSS</source>
          <target state="translated">HH:MM:SS.SSS</target>
        </trans-unit>
        <trans-unit id="65f5a5cdef2d1220d932d3711961b5f933bef00b" translate="yes" xml:space="preserve">
          <source>HHHHHHHH</source>
          <target state="translated">HHHHHHHH</target>
        </trans-unit>
        <trans-unit id="cbc6ab8d850f8cff446447123804da23a703c293" translate="yes" xml:space="preserve">
          <source>Halt</source>
          <target state="translated">Halt</target>
        </trans-unit>
        <trans-unit id="c9efb4e35e5411aedaf0542890d4f34de7fdc553" translate="yes" xml:space="preserve">
          <source>HaltIfNull</source>
          <target state="translated">HaltIfNull</target>
        </trans-unit>
        <trans-unit id="eda901a16a2ed9d0d0e178d305fa51f41c885dd9" translate="yes" xml:space="preserve">
          <source>Has the same PRIMARY KEY definition.</source>
          <target state="translated">동일한 기본 키 정의를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="7b3c15bec716c58e30bb9a01cc52d490760b69bf" translate="yes" xml:space="preserve">
          <source>Has the same name,</source>
          <target state="translated">이름이 같고</target>
        </trans-unit>
        <trans-unit id="96ee9d0e4b354db6f1aac2ad6a31abd4bc3e74ca" translate="yes" xml:space="preserve">
          <source>Has the same set of columns declared in the same order, and</source>
          <target state="translated">동일한 순서로 동일한 열 집합이 선언되어 있으며</target>
        </trans-unit>
        <trans-unit id="71024d7461751155928cb62c4bbb4edb8155f4cb" translate="yes" xml:space="preserve">
          <source>Hate no one.</source>
          <target state="translated">아무도 싫어</target>
        </trans-unit>
        <trans-unit id="f5e9b1bebb569eb2b57a7ab4d85d0681e37d4262" translate="yes" xml:space="preserve">
          <source>Having SQLite take ownership of the type strings would impose a performance cost on all applications, even applications that do not use the pointer-passing interfaces. SQLite passes values around as instances of the &lt;a href=&quot;c3ref/value&quot;&gt;sqlite3_value&lt;/a&gt; object. That object has a destructor, which because of the fact that sqlite3_value objects are used for nearly everything, is invoked frequently. If the destructor needs to check to see if there is a pointer type string that needs to be freed, that is a few extra CPU cycles that need to be burned on each call to the destructor. Those cycles add up. We would be willing to bear the cost of the extra CPU cycles if pointer-passing was a commonly used programming paradigm, but pointer-passing is rare, and so it seems unwise to impose a run-time cost on billions and billions of applications that do not use pointer passing just for convenience of a few applications that do.</source>
          <target state="translated">SQLite가 형식 문자열의 소유권을 갖도록하면 포인터 전달 인터페이스를 사용하지 않는 응용 프로그램까지도 모든 응용 프로그램에 성능 비용이 부과됩니다. SQLite는 &lt;a href=&quot;c3ref/value&quot;&gt;sqlite3_value의&lt;/a&gt; 인스턴스로 값을 전달합니다.목적. 이 객체에는 소멸자가 있습니다. sqlite3_value 객체가 거의 모든 용도로 사용되기 때문에 자주 호출됩니다. 소멸자가 해제해야하는 포인터 유형 문자열이 있는지 확인해야하는 경우 소멸자를 호출 할 때마다 레코딩해야하는 추가 CPU주기가 몇 개 있습니다. 그 사이클이 더해집니다. 포인터 전달이 일반적으로 사용되는 프로그래밍 패러다임 인 경우 추가 CPU주기의 비용을 부담 할 의향이 있지만 포인터 전달이 드물기 때문에 수십억 및 수십억 개의 응용 프로그램에 런타임 비용을 부과하는 것은 현명하지 않은 것 같습니다. 몇 가지 응용 프로그램의 편의를 위해 포인터 전달을 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="3880fcd08d24da661937a86693cfca26882a3b4e" translate="yes" xml:space="preserve">
          <source>Hazards of upgrading to the NGQP</source>
          <target state="translated">NGQP 로의 업그레이드 위험</target>
        </trans-unit>
        <trans-unit id="5050e4d38d7df11eb3b253f0629fcc46c260dc76" translate="yes" xml:space="preserve">
          <source>Header string: 0xd9, 0xd5, 0x05, 0xf9, 0x20, 0xa1, 0x63, 0xd7</source>
          <target state="translated">헤더 문자열 : 0xd9, 0xd5, 0x05, 0xf9, 0x20, 0xa1, 0x63, 0xd7</target>
        </trans-unit>
        <trans-unit id="4bc19fb4af9f917cd00992c6391f45202ff0d0ec" translate="yes" xml:space="preserve">
          <source>Hence, a good rule of thumb is that your database schema should never contain two indices where one index is a prefix of the other. Drop the index with fewer columns. SQLite will still be able to do efficient lookups with the longer index.</source>
          <target state="translated">따라서 데이터베이스 스키마에는 한 인덱스가 다른 인덱스의 접두사 인 두 개의 인덱스를 포함해서는 안된다는 것이 좋습니다. 더 적은 열로 인덱스를 삭제하십시오. SQLite는 여전히 더 긴 인덱스로 효율적인 조회를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e3f076946ec3be55b66dffc59ab395c4e63eeb8f" translate="yes" xml:space="preserve">
          <source>Hence, by adding extra &quot;output&quot; columns onto the end of an index, one can avoid having to reference the original table and thereby cut the number of binary searches for a query in half. This is a constant-factor improvement in performance (roughly a doubling of the speed). But on the other hand, it is also just a refinement; A two-fold performance increase is not nearly as dramatic as the one-million-fold increase seen when the table was first indexed. And for most queries, the difference between 1 microsecond and 2 microseconds is unlikely to be noticed.</source>
          <target state="translated">따라서 인덱스 끝에 추가 &quot;출력&quot;열을 추가하면 원래 테이블을 참조하지 않아도되므로 쿼리에 대한 이진 검색 수를 절반으로 줄일 수 있습니다. 이것은 성능의 지속적인 요소 개선 (대략 속도의 두 배)입니다. 그러나 다른 한편으로, 그것은 또한 단지 개선 일뿐입니다. 2 배의 성능 향상은 테이블을 처음 인덱스 할 때 백만배 증가한 것만 큼 크게 크지 않습니다. 그리고 대부분의 쿼리에서 1 마이크로 초와 2 마이크로 초의 차이는 눈에 띄지 않을 것입니다.</target>
        </trans-unit>
        <trans-unit id="b665f7a53251e88b80c18ae95a6e2a7570ff2c9e" translate="yes" xml:space="preserve">
          <source>Hence, in comparison to other approaches, the use of an SQLite database as an application file format has compelling advantages. Here are a few of these advantages, enumerated and expounded:</source>
          <target state="translated">따라서 다른 접근 방식과 비교하여 SQLite 데이터베이스를 응용 프로그램 파일 형식으로 사용하면 강력한 이점이 있습니다. 다음은 이러한 장점 중 몇 가지를 열거하고 설명합니다.</target>
        </trans-unit>
        <trans-unit id="39e8db1d33a3457396e45de0c0793052727a641e" translate="yes" xml:space="preserve">
          <source>Hence, the content encoding for a WITHOUT ROWID table is the same as the content encoding for an ordinary rowid table, except that the order of the columns is rearranged so that PRIMARY KEY columns come first, and the content is used as the key in an index b-tree rather than as the data in a table b-tree. The special encoding rules for columns with REAL affinity apply to WITHOUT ROWID tables the same as they do with rowid tables.</source>
          <target state="translated">따라서 WITHOUT ROWID 테이블의 컨텐츠 인코딩은 일반 rowid 테이블의 컨텐츠 인코딩과 동일하지만 PRIMARY KEY 컬럼이 먼저 오도록 컬럼 순서가 재 배열되고 컨텐츠가 테이블 b- 트리의 데이터가 아닌 인덱스 b- 트리. REAL 선호도가있는 열의 특수 인코딩 규칙은 rowid 테이블에서와 동일하게 WITHOUT ROWID 테이블에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="999cfa83416c7b736dc3f3dfa6e7f25b9ba6e98f" translate="yes" xml:space="preserve">
          <source>Here again, version 2.7.0 of SQLite used to run at about the same speed as MySQL. But now version 2.7.6 is over two times faster than MySQL and over twenty times faster than PostgreSQL.</source>
          <target state="translated">여기서도 SQLite 버전 2.7.0은 MySQL과 거의 같은 속도로 실행되었습니다. 그러나 이제 버전 2.7.6은 MySQL보다 2 배, PostgreSQL보다 20 배 이상 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="c79a9d1055558ef2d9992c6424392d62b259c2a6" translate="yes" xml:space="preserve">
          <source>Here are some existing and postulated uses for virtual tables:</source>
          <target state="translated">다음은 가상 테이블에 대한 기존 및 가정 된 사용법입니다.</target>
        </trans-unit>
        <trans-unit id="f0580ad7def68334eac7c2c033faae47fa33aa31" translate="yes" xml:space="preserve">
          <source>Here are the syntax details:</source>
          <target state="translated">구문 세부 사항은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c84ee5f5403083ecda923ec1470b2d4f31fd0f00" translate="yes" xml:space="preserve">
          <source>Here is a complete template extension that you can copy/paste to get started:</source>
          <target state="translated">다음은 시작하기 위해 복사 / 붙여 넣기 할 수있는 완전한 템플릿 확장입니다.</target>
        </trans-unit>
        <trans-unit id="537d394cf0d1eecb92a9cbe8efc7e1a703bdd18e" translate="yes" xml:space="preserve">
          <source>Here is a query that computes the average height over everyone in Alice's organization, including Alice:</source>
          <target state="translated">다음은 Alice를 포함하여 Alice 조직의 모든 사람에 대한 평균 키를 계산하는 쿼리입니다.</target>
        </trans-unit>
        <trans-unit id="dd42feed9698b376dcb10e9aa54e385c734b65a6" translate="yes" xml:space="preserve">
          <source>Here is a query to show the tree structure in a breadth-first pattern:</source>
          <target state="translated">다음은 너비 우선 패턴으로 트리 구조를 보여주는 쿼리입니다.</target>
        </trans-unit>
        <trans-unit id="b68ea20ab0a8004dffe949b080033114856a05ba" translate="yes" xml:space="preserve">
          <source>Here is a simple example of omitting a LEFT JOIN:</source>
          <target state="translated">LEFT JOIN을 생략하는 간단한 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="22d888f42ada11de3c14b5860a924536cf19b222" translate="yes" xml:space="preserve">
          <source>Here is a slightly different way to describe the aPgno values: If you think of all aPgno values as a contiguous array, then the database page number stored in the i-th frame of the WAL file is stored in aPgno[i]. Of course, aPgno is not a contiguous array. The first 4062 entries are on the first 32768-byte unit of the shm file and subsequent values are in 4096 entry chunks in later units of the shm file.</source>
          <target state="translated">다음은 aPgno 값을 설명하는 약간 다른 방법입니다. 모든 aPgno 값을 연속 배열로 생각하면 WAL 파일의 i 번째 프레임에 저장된 데이터베이스 페이지 번호가 aPgno [i]에 저장됩니다. 물론 aPgno는 연속 배열이 아닙니다. 첫 번째 4062 항목은 shm 파일의 첫 번째 32768 바이트 단위에 있으며 후속 값은 shm 파일의 이후 단위에서 4096 개의 입력 청크에 있습니다.</target>
        </trans-unit>
        <trans-unit id="eeed83aeb26a72a7167e0caa92d0a130551072b7" translate="yes" xml:space="preserve">
          <source>Here is a summary of what the core interfaces do:</source>
          <target state="translated">핵심 인터페이스의 기능은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8a2373a91d98c2486bbd1ed6e2138a7e77394ed5" translate="yes" xml:space="preserve">
          <source>Here is a variation on the previous example:</source>
          <target state="translated">이전 예의 변형은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1319ba3fc57ef36ac27efdbc47123bdd4cb7f431" translate="yes" xml:space="preserve">
          <source>Here is an alternative description of the same computation:</source>
          <target state="translated">동일한 계산에 대한 대체 설명은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="44eacff0724c9f996876f69099ca0b2726a97ade" translate="yes" xml:space="preserve">
          <source>Here is an alternative way of describing the hash look-up algorithm: Start with h = (P * 383)%8192 and look at aHash[h] and subsequent entries, wrapping around to zero when h reaches 8192, until finding an entry with aHash[h]==0. All aPgno entries having a page number of P will have an index that is one of the aHash[h] values thusly computed. But not all the computed aHash[h] values will meet the matching criteria, so you must check them independently. The speed advantage comes about because normally this set of h values is very small.</source>
          <target state="translated">해시 조회 알고리즘을 설명하는 다른 방법은 다음과 같습니다. h = (P * 383) % 8192로 시작하여 aHash [h] 및 후속 항목을 확인합니다. 해시 [h] == 0. 페이지 번호가 P 인 모든 aPgno 항목에는 계산 된 aHash [h] 값 중 하나 인 인덱스가 있습니다. 그러나 모든 계산 된 aHash [h] 값이 일치 기준을 충족하지는 않으므로 독립적으로 확인해야합니다. 일반적으로이 h 값 세트가 매우 작기 때문에 속도 이점이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="1a49c4bb8c6fe24c99e1160edbe5f45003dd833d" translate="yes" xml:space="preserve">
          <source>Here is an example using the built-in row_number() window function:</source>
          <target state="translated">다음은 내장 row_number () 창 함수를 사용하는 예입니다.</target>
        </trans-unit>
        <trans-unit id="1ed2d64e0577782df2f1f708b1c461ee5ebea46a" translate="yes" xml:space="preserve">
          <source>Here is what is going to happen: The first SELECT statement will construct rows of the result and save each row as the key of an entry in the transient table. The data for each entry in the transient table is a never used so we fill it in with an empty string. The second SELECT statement also constructs rows, but the rows constructed by the second SELECT are removed from the transient table. That is why we want the rows to be stored in the key of the SQLite file instead of in the data -- so they can be easily located and deleted.</source>
          <target state="translated">다음과 같은 상황이 발생합니다. 첫 번째 SELECT 문은 결과의 행을 구성하고 각 행을 임시 테이블의 항목 키로 저장합니다. 임시 테이블의 각 항목에 대한 데이터는 사용되지 않으므로 빈 문자열로 채 웁니다. 두 번째 SELECT 문도 행을 구성하지만 두 번째 SELECT로 구성된 행은 임시 테이블에서 제거됩니다. 그렇기 때문에 행이 데이터가 아닌 SQLite 파일의 키에 저장되기를 원하므로 쉽게 찾고 삭제할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7a844050eead2e7f9a21cd042c8a0efba1c399bc" translate="yes" xml:space="preserve">
          <source>Here is what the program must do. First it has to locate all of the records in the table &quot;examp&quot; that are to be deleted. This is done using a loop very much like the loop used in the SELECT examples above. Once all records have been located, then we can go back through and delete them one by one. Note that we cannot delete each record as soon as we find it. We have to locate all records first, then go back and delete them. This is because the SQLite database backend might change the scan order after a delete operation. And if the scan order changes in the middle of the scan, some records might be visited more than once and other records might not be visited at all.</source>
          <target state="translated">프로그램이해야 할 일은 다음과 같습니다. 먼저 &quot;examp&quot;테이블에서 삭제할 모든 레코드를 찾아야합니다. 이것은 위의 SELECT 예제에서 사용 된 루프와 매우 유사한 루프를 사용하여 수행됩니다. 모든 기록을 찾은 후에는 다시 돌아가서 하나씩 삭제할 수 있습니다. 각 레코드를 찾 자마자 삭제할 수는 없습니다. 먼저 모든 레코드를 찾은 다음 돌아가서 삭제해야합니다. 삭제 조작 후 SQLite 데이터베이스 백엔드가 스캔 순서를 변경할 수 있기 때문입니다. 스캔 중간에 스캔 순서가 변경되면 일부 레코드가 두 번 이상 방문되고 다른 레코드가 전혀 방문되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ed0e64b4172a16a9716e7e75ddd35007c4f6e5a" translate="yes" xml:space="preserve">
          <source>Here is what you do to start experimenting with SQLite without having to do a lot of tedious reading and configuration:</source>
          <target state="translated">많은 지루한 읽기 및 구성을 수행하지 않고도 SQLite를 실험하기 시작하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c11a956fd1daf361e07b9a2963b5331668a6cb09" translate="yes" xml:space="preserve">
          <source>Here the apostrophe has been escaped and the SQL statement is well-formed. When generating SQL on-the-fly from data that might contain a single-quote character ('), it is always a good idea to use the SQLite printf routines and the %q formatting option instead of &lt;b&gt;sprintf&lt;/b&gt;.</source>
          <target state="translated">여기서 아포스트로피가 이스케이프되었으며 SQL 문이 올바르게 구성되었습니다. 작은 따옴표 문자 ( ')를 포함 할 수있는 데이터에서 SQL을 즉석에서 생성 할 때는 항상 &lt;b&gt;sprintf&lt;/b&gt; 대신 SQLite printf 루틴 및 % q 형식 옵션을 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="53844b42e0f15c4e9c92f326da701e5edff51b64" translate="yes" xml:space="preserve">
          <source>Here the inequalities are on columns x and y which are not the left-most index columns. Hence, the histogram data which is collected no left-most column of indices is useless in helping to choose between the range constraints on columns x and y.</source>
          <target state="translated">여기서 불평등은 가장 왼쪽의 인덱스 열이 아닌 x 및 y 열에 있습니다. 따라서, 가장 왼쪽의 열 열에서 수집되지 않은 히스토그램 데이터는 열 x와 y의 범위 제한 중에서 선택하는 데 도움이되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="54b1a90f72334cf67c79da3608b8cff7cc194a79" translate="yes" xml:space="preserve">
          <source>Hexadecimal</source>
          <target state="translated">Hexadecimal</target>
        </trans-unit>
        <trans-unit id="f3f781093bc605abee81ccbeb636a20f530bbe5d" translate="yes" xml:space="preserve">
          <source>Hexadecimal integer literals</source>
          <target state="translated">16 진 정수 리터럴</target>
        </trans-unit>
        <trans-unit id="35e13960711ca47c62471d92f2b4029ee7852496" translate="yes" xml:space="preserve">
          <source>Hexadecimal integer literals follow the C-language notation of &quot;0x&quot; or &quot;0X&quot; followed by hexadecimal digits. For example, 0x1234 means the same as 4660 and 0x8000000000000000 means the same as -9223372036854775808. Hexadecimal integer literals are interpreted as 64-bit two's-complement integers and are thus limited to sixteen significant digits of precision. Support for hexadecimal integers was added to SQLite version 3.8.6 (2014-08-15). For backwards compatibility, the &quot;0x&quot; hexadecimal integer notation is only understood by the SQL language parser, not by the type conversions routines. String variables that contain text formatted like hexadecimal integers are not interpreted as hexadecimal integers when coercing the string value into an integer due to a &lt;a href=&quot;lang_expr#castexpr&quot;&gt;CAST expression&lt;/a&gt; or for a &lt;a href=&quot;datatype3#affinity&quot;&gt;column affinity&lt;/a&gt; transformation or prior to performing a numeric operation or for any other run-time conversions. When coercing a string value in the format of a hexadecimal integer into an integer value, the conversion process stops when the 'x' character is seen so the resulting integer value is always zero. SQLite only understands the hexadecimal integer notation when it appears in the SQL statement text, not when it appears as part of the content of the database.</source>
          <target state="translated">16 진 정수 리터럴은 &quot;0x&quot;또는 &quot;0X&quot;의 C 언어 표기법 뒤에 16 진 숫자를 따릅니다. 예를 들어 0x1234는 4660과 동일하고 0x8000000000000000은 -9223372036854775808과 동일합니다. 16 진 정수 리터럴은 64 비트 2의 보수 정수로 해석되므로 16 자리의 유효 자릿수로 제한됩니다. 16 진수 정수에 대한 지원이 SQLite 버전 3.8.6 (2014-08-15)에 추가되었습니다. 이전 버전과의 호환성을 위해 &quot;0x&quot;16 진 정수 표기법은 형식 변환 루틴이 아니라 SQL 언어 파서 만 이해합니다.&lt;a href=&quot;lang_expr#castexpr&quot;&gt;CAST 표현식&lt;/a&gt; 또는 &lt;a href=&quot;datatype3#affinity&quot;&gt;열 선호도 로 인해 문자열 값을 정수로 강제 변환 할 때 16 진 정수와 같은 형식의 텍스트를 포함하는 문자열 변수는 16 진 정수로 해석되지 않습니다.&lt;/a&gt;변환 또는 숫자 연산을 수행하기 전 또는 기타 런타임 변환을 위해. 16 진 정수 형식의 문자열 값을 정수 값으로 강제 변환 할 때 'x'문자가 표시되면 변환 프로세스가 중지되므로 결과 정수 값은 항상 0입니다. SQLite는 16 진수 정수 표기법이 데이터베이스 내용의 일부로 나타날 때가 아니라 SQL 문 텍스트에 나타날 때만 이해합니다.</target>
        </trans-unit>
        <trans-unit id="4413e5afdd76b08f7a57f3501dcd353af75c6909" translate="yes" xml:space="preserve">
          <source>Hexadecimal integers</source>
          <target state="translated">16 진 정수</target>
        </trans-unit>
        <trans-unit id="34ad49fd08b5d8ebfe6309e8a94dbdda68560346" translate="yes" xml:space="preserve">
          <source>Hidden column</source>
          <target state="translated">숨겨진 열</target>
        </trans-unit>
        <trans-unit id="47adea5ce487ea3890476b37d1c95b4a2f866391" translate="yes" xml:space="preserve">
          <source>Hidden columns are not included in the expansion of a &quot;*&quot; expression in the result set of a &lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt;, and</source>
          <target state="translated">숨겨진 열은 결과 집합에서 &quot;*&quot;표현의 확장에 포함되지 &lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt; 및</target>
        </trans-unit>
        <trans-unit id="20096dd8d3b8c2cfd4d3a69c38df377eed777771" translate="yes" xml:space="preserve">
          <source>Hidden columns are not included in the implicit column-list used by an &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt; statement that lacks an explicit column-list.</source>
          <target state="translated">숨겨진 열은 명시적인 열 목록이없는 &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt; 문에서 사용하는 암시 적 열 목록에 포함되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="b7668a93e533ae2c015270865d5e714d07d437f1" translate="yes" xml:space="preserve">
          <source>Hidden columns are not listed in the dataset returned by &quot;&lt;a href=&quot;pragma#pragma_table_info&quot;&gt;PRAGMA table_info&lt;/a&gt;&quot;,</source>
          <target state="translated">숨겨진 열은 &quot; &lt;a href=&quot;pragma#pragma_table_info&quot;&gt;PRAGMA table_info&lt;/a&gt; &quot;에 의해 반환 된 데이터 집합에 나열되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="c4cf7b97c327f9d39106315e4a050c0b0f137cef" translate="yes" xml:space="preserve">
          <source>Hierarchical Query Examples</source>
          <target state="translated">계층 적 쿼리 예</target>
        </trans-unit>
        <trans-unit id="62ae978c372dd625e1ad5bee3c09efecd27ef87c" translate="yes" xml:space="preserve">
          <source>High Reliability</source>
          <target state="translated">높은 신뢰성</target>
        </trans-unit>
        <trans-unit id="5b43fa59ed80a4a74e2345ca9a7be4d00498a5de" translate="yes" xml:space="preserve">
          <source>High-Level Query Language</source>
          <target state="translated">고급 쿼리 언어</target>
        </trans-unit>
        <trans-unit id="f0be6eee61b3f35036173bb461da267d072410b3" translate="yes" xml:space="preserve">
          <source>High-security Value</source>
          <target state="translated">높은 보안 가치</target>
        </trans-unit>
        <trans-unit id="d4e0f8e3d3d0dc08399c35d69b24eda9dfffeab6" translate="yes" xml:space="preserve">
          <source>Higher level logic within SQLite will normally intercept the error code and create a temporary in-memory shared memory region so that the current process can at least read the content of the database. This result code should not reach the application interface layer.</source>
          <target state="translated">SQLite 내의 높은 수준의 논리는 일반적으로 오류 코드를 가로 채고 임시 프로세스 내 메모리 공유 메모리 영역을 만들어 현재 프로세스가 최소한 데이터베이스의 내용을 읽을 수 있도록합니다. 이 결과 코드는 응용 프로그램 인터페이스 계층에 도달하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="8ec8e6f8b27cff894766ae4e4215e6f333126ae8" translate="yes" xml:space="preserve">
          <source>Highest precedence (tightest grouping).</source>
          <target state="translated">가장 높은 우선 순위 (가장 엄격한 그룹화).</target>
        </trans-unit>
        <trans-unit id="9d8bc8b9f1a6b46c231d4505eec0f99894497892" translate="yes" xml:space="preserve">
          <source>Hint: applications can generate globally unique identifiers using this function together with &lt;a href=&quot;lang_corefunc#hex&quot;&gt;hex()&lt;/a&gt; and/or &lt;a href=&quot;lang_corefunc#lower&quot;&gt;lower()&lt;/a&gt; like this:</source>
          <target state="translated">힌트 : 응용 프로그램은 다음과 같이 &lt;a href=&quot;lang_corefunc#hex&quot;&gt;hex ()&lt;/a&gt; 및 / 또는 &lt;a href=&quot;lang_corefunc#lower&quot;&gt;lower ()&lt;/a&gt; 와 함께이 함수를 사용하여 전역 고유 식별자를 생성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="13895cc550db90756c2c44f981469cdd85261a1d" translate="yes" xml:space="preserve">
          <source>Hints for Debugging SQLite</source>
          <target state="translated">SQLite 디버깅을위한 힌트</target>
        </trans-unit>
        <trans-unit id="6b205a779ffaeec5fb12feda7165de7c06e54bbe" translate="yes" xml:space="preserve">
          <source>Historical test cases from &lt;a href=&quot;testing#aflfuzz&quot;&gt;AFL&lt;/a&gt;, &lt;a href=&quot;testing#ossfuzz&quot;&gt;OSS Fuzz&lt;/a&gt;, and &lt;a href=&quot;testing#dbsqlfuzz&quot;&gt;dbsqlfuzz&lt;/a&gt; are collected in a set of database files in the main SQLite source tree and then rerun by the &quot;fuzzcheck&quot; utility program whenever one runs &quot;make test&quot;. Fuzzcheck only runs a few thousand &quot;interesting&quot; cases out of the hundreds of millions of cases that the various fuzzers have examined over the years. &quot;Interesting&quot; cases are cases that exhibit previously unseen behavior. Actual bugs found by fuzzers are always included among the interesting test cases, but most of the cases run by fuzzcheck were never actual bugs.</source>
          <target state="translated">&lt;a href=&quot;testing#aflfuzz&quot;&gt;AFL&lt;/a&gt; , &lt;a href=&quot;testing#ossfuzz&quot;&gt;OSS Fuzz&lt;/a&gt; 및 &lt;a href=&quot;testing#dbsqlfuzz&quot;&gt;dbsqlfuzz의&lt;/a&gt; 히스토리 테스트 케이스 는 기본 SQLite 소스 트리의 데이터베이스 파일 세트에서 수집 된 후 &quot;make test&quot;를 실행할 때마다 &quot;fuzzcheck&quot;유틸리티 프로그램으로 다시 실행됩니다. Fuzzcheck는 다양한 퍼 저가 수년에 걸쳐 조사한 수억 건의 사례 중 수천 건의 &quot;흥미로운&quot;사례 만 실행합니다. &quot;흥미로운&quot;사례는 이전에 보지 못한 행동을 보이는 사례입니다. fuzzers에서 발견 한 실제 버그는 항상 흥미로운 테스트 사례에 포함되지만 fuzzcheck으로 실행되는 대부분의 사례는 실제 버그가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="67fec9a6d19b7573beec194f9c1e57c883f7bff1" translate="yes" xml:space="preserve">
          <source>Historically, backups (copies) of SQLite databases have been created using the following method:</source>
          <target state="translated">역사적으로 SQLite 데이터베이스의 백업 (복사본)은 다음 방법을 사용하여 작성되었습니다.</target>
        </trans-unit>
        <trans-unit id="a7796946d81b3e384b117135d383fc5e5877941f" translate="yes" xml:space="preserve">
          <source>Historically, the bytecode engine in SQLite is called the &quot;Virtual DataBase Engine&quot; or &quot;VDBE&quot;. This website uses the terms &quot;bytecode engine&quot;, &quot;VDBE&quot;, &quot;virtual machine&quot;, and &quot;bytecode virtual machine&quot; interchangeably, as they all mean the same thing.</source>
          <target state="translated">역사적으로 SQLite의 바이트 코드 엔진을 &quot;가상 데이터베이스 엔진&quot;또는 &quot;VDBE&quot;라고합니다. 이 웹 사이트는 &quot;바이트 코드 엔진&quot;, &quot;VDBE&quot;, &quot;가상 머신&quot;및 &quot;바이트 코드 가상 머신&quot;이라는 용어를 모두 같은 의미로 사용하므로 상호 교환 적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="186352c9ed4b1d5538fac7c967930c7dfb52b78f" translate="yes" xml:space="preserve">
          <source>Historically, the return value from xFindFunction() was either zero or one. Zero means that the function is not overloaded and one means that it is overload. The ability to return values of &lt;a href=&quot;c3ref/c_index_constraint_eq&quot;&gt;SQLITE_INDEX_CONSTRAINT_FUNCTION&lt;/a&gt; or greater was added in version 3.25.0 (2018-09-15). If xFindFunction returns &lt;a href=&quot;c3ref/c_index_constraint_eq&quot;&gt;SQLITE_INDEX_CONSTRAINT_FUNCTION&lt;/a&gt; or greater, than means that the function takes two arguments and the function can be used as a boolean in the WHERE clause of a query and that the virtual table is able to exploit that function to speed up the query result. When xFindFunction returns &lt;a href=&quot;c3ref/c_index_constraint_eq&quot;&gt;SQLITE_INDEX_CONSTRAINT_FUNCTION&lt;/a&gt; or larger, the value returned becomes the sqlite3_index_info.aConstraint.op value for one of the constraints passed into &lt;a href=&quot;vtab#xbestindex&quot;&gt;xBestIndex()&lt;/a&gt; and the second argument becomes the value corresponding to that constraint that is passed to &lt;a href=&quot;vtab#xfilter&quot;&gt;xFilter()&lt;/a&gt;. This enables the xBestIndex()/xFilter implementations to use the function to speed its search.</source>
          <target state="translated">역사적으로 xFindFunction ()의 반환 값은 0 또는 1이었습니다. 0은 함수에 과부하가 걸리지 않았 음을 의미하고, 하나는 과부하가 걸린 것을 의미합니다. &lt;a href=&quot;c3ref/c_index_constraint_eq&quot;&gt;SQLITE_INDEX_CONSTRAINT_FUNCTION&lt;/a&gt; 이상의 값을 반환하는 기능 은 버전 3.25.0 (2018-09-15)에 추가되었습니다. xFindFunction이 &lt;a href=&quot;c3ref/c_index_constraint_eq&quot;&gt;SQLITE_INDEX_CONSTRAINT_FUNCTION&lt;/a&gt; 이상을 리턴하는 경우 보다 함수가 두 개의 인수를 사용하며 쿼리의 WHERE 절에서 부울로 함수를 사용할 수 있으며 가상 테이블이 해당 함수를 이용하여 쿼리 결과를 가속화 할 수 있음을 의미합니다. xFindFunction이 &lt;a href=&quot;c3ref/c_index_constraint_eq&quot;&gt;SQLITE_INDEX_CONSTRAINT_FUNCTION&lt;/a&gt; 이상을 리턴하면 리턴 된 값은 &lt;a href=&quot;vtab#xbestindex&quot;&gt;xBestIndex ()에&lt;/a&gt; 전달 된 제한 조건 중 하나에 대한 sqlite3_index_info.aConstraint.op 값이됩니다.두 번째 인수는 &lt;a href=&quot;vtab#xfilter&quot;&gt;xFilter ()에&lt;/a&gt; 전달 된 해당 제약 조건에 해당하는 값이됩니다 . 이를 통해 xBestIndex () / xFilter 구현이 함수를 사용하여 검색 속도를 높일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="48f87256a37f996b34f071b6b4ef5f1805966dbd" translate="yes" xml:space="preserve">
          <source>Historically, this was not considered a threat. The argument was that if a hostile agent is able to inject arbitrary SQL text into the application, then that agent is already in full control of the application, so letting the hostile agent forge a pointer does not give the agent any new capability.</source>
          <target state="translated">역사적으로 이것은 위협으로 간주되지 않았습니다. 적대적인 에이전트가 임의의 SQL 텍스트를 애플리케이션에 삽입 할 수 있으면 해당 에이전트는 이미 애플리케이션을 완전히 제어 할 수 있으므로 적대적인 에이전트가 포인터를 위조하도록하면 에이전트에 새로운 기능이 제공되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bfbddd574d4f950742d8e5d7a49607c23d347f95" translate="yes" xml:space="preserve">
          <source>Honor all.</source>
          <target state="translated">모두 존중하십시오.</target>
        </trans-unit>
        <trans-unit id="645a5172c51f2105b78cb24101222af4c2581b31" translate="yes" xml:space="preserve">
          <source>Honor the &lt;a href=&quot;c3ref/c_deserialize_freeonclose&quot;&gt;SQLITE_DESERIALIZE_READONLY&lt;/a&gt; flag, which was previously described in the documentation, but was previously a no-op.</source>
          <target state="translated">명예 &lt;a href=&quot;c3ref/c_deserialize_freeonclose&quot;&gt;SQLITE_DESERIALIZE_READONLY의&lt;/a&gt; 이전 문서에 설명하지만, 이전에 어떤 조합 없었다되었다 플래그입니다.</target>
        </trans-unit>
        <trans-unit id="2fff26aa56e0db9e63e42ae6a74896b210340408" translate="yes" xml:space="preserve">
          <source>Honor the ORDER BY and LIMIT clause of a SELECT even if the result set is used for an INSERT.</source>
          <target state="translated">결과 세트가 INSERT에 사용 되더라도 SELECT의 ORDER BY 및 LIMIT 절을 존중하십시오.</target>
        </trans-unit>
        <trans-unit id="972205ef02943c809b85189066f29ea5a922b1d8" translate="yes" xml:space="preserve">
          <source>Host parameter names can begin with '@' for compatibility with SQL Server.</source>
          <target state="translated">SQL Server와의 호환성을 위해 호스트 매개 변수 이름은 '@'로 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2107ab6c47208816e9f85a68b6f666b821dd323b" translate="yes" xml:space="preserve">
          <source>Hot Journal Detection</source>
          <target state="translated">핫 저널 감지</target>
        </trans-unit>
        <trans-unit id="387adc1437f284bb8f7d821272256c3791f7c532" translate="yes" xml:space="preserve">
          <source>Hot Journal Rollback</source>
          <target state="translated">핫 저널 롤백</target>
        </trans-unit>
        <trans-unit id="51a2396551270d6b1b9b0daa06c843f02294bf7a" translate="yes" xml:space="preserve">
          <source>Hot journal files</source>
          <target state="translated">인기 저널 파일</target>
        </trans-unit>
        <trans-unit id="33f85488d44d0b31b265f227edf83b283232673c" translate="yes" xml:space="preserve">
          <source>Hot journal rollback</source>
          <target state="translated">핫 저널 롤백</target>
        </trans-unit>
        <trans-unit id="72b9d3b59a2cd3c6b5726c2ec8f20f5cbd8fc2c8" translate="yes" xml:space="preserve">
          <source>How &lt;a href=&quot;queryplanner&quot;&gt;indexing&lt;/a&gt; works.</source>
          <target state="translated">어떻게 &lt;a href=&quot;queryplanner&quot;&gt;색인&lt;/a&gt; 작품.</target>
        </trans-unit>
        <trans-unit id="de544e283cfebc5d70d3d7b590e023e13a9bf879" translate="yes" xml:space="preserve">
          <source>How Memory-Mapped I/O Works</source>
          <target state="translated">메모리 매핑 된 I / O 작동 방식</target>
        </trans-unit>
        <trans-unit id="56b803311ab7e3e616ef538b11ad7fad3dcd0741" translate="yes" xml:space="preserve">
          <source>How SQLite Is Tested</source>
          <target state="translated">SQLite 테스트 방법</target>
        </trans-unit>
        <trans-unit id="f0b874a1265664f2f8c8240dcb0a141334e57668" translate="yes" xml:space="preserve">
          <source>How To Compile SQLite</source>
          <target state="translated">SQLite를 컴파일하는 방법</target>
        </trans-unit>
        <trans-unit id="bac0366a300ac4acaffdcf4c3d4ee83a4619271d" translate="yes" xml:space="preserve">
          <source>How To Corrupt</source>
          <target state="translated">부패하는 방법</target>
        </trans-unit>
        <trans-unit id="07961a03bdae1448ec20af2c6389f109c109cecd" translate="yes" xml:space="preserve">
          <source>How To Corrupt An SQLite Database File</source>
          <target state="translated">SQLite 데이터베이스 파일을 손상시키는 방법</target>
        </trans-unit>
        <trans-unit id="ac75035a65466ee12d9ad12dabe0ea72bf4078bd" translate="yes" xml:space="preserve">
          <source>How To Corrupt Your Database Files</source>
          <target state="translated">데이터베이스 파일을 손상시키는 방법</target>
        </trans-unit>
        <trans-unit id="6c4dc04d73e3b62534455f3b1b128df4687ca99e" translate="yes" xml:space="preserve">
          <source>How To Download Canonical SQLite Source Code</source>
          <target state="translated">정식 SQLite 소스 코드를 다운로드하는 방법</target>
        </trans-unit>
        <trans-unit id="023a32566bba30a34815129fd5e3cc90c1e899ca" translate="yes" xml:space="preserve">
          <source>How VACUUM works</source>
          <target state="translated">VACUUM 작동 방식</target>
        </trans-unit>
        <trans-unit id="996ef93cbabdf3a445d79226e8fa6d9c24a881f0" translate="yes" xml:space="preserve">
          <source>How are the syntax diagrams (a.k.a. &quot;railroad&quot; diagrams) for SQLite generated?</source>
          <target state="translated">SQLite에 대한 구문 다이어그램 (일명 &quot;철도&quot;다이어그램)은 어떻게 생성됩니까?</target>
        </trans-unit>
        <trans-unit id="fc0899650d804dfcac8dc2104606bf9268efcf1e" translate="yes" xml:space="preserve">
          <source>How collation is determined</source>
          <target state="translated">콜 레이션 결정 방법</target>
        </trans-unit>
        <trans-unit id="9a3218133ebd28240c94b4e7364a4f7e2e221ee5" translate="yes" xml:space="preserve">
          <source>How do I add or delete columns from an existing table in SQLite.</source>
          <target state="translated">SQLite의 기존 테이블에서 열을 추가하거나 삭제하는 방법</target>
        </trans-unit>
        <trans-unit id="30aeec19cd6396142e3416e018900e8041d11cdb" translate="yes" xml:space="preserve">
          <source>How do I create an AUTOINCREMENT field?</source>
          <target state="translated">AUTOINCREMENT 필드는 어떻게 만듭니 까?</target>
        </trans-unit>
        <trans-unit id="a6cedc80b4e8057201d930bd24da72e7284f5f18" translate="yes" xml:space="preserve">
          <source>How do I list all tables/indices contained in an SQLite database</source>
          <target state="translated">SQLite 데이터베이스에 포함 된 모든 테이블 / 표시를 나열하는 방법</target>
        </trans-unit>
        <trans-unit id="94a002c7d3ab3f319a7a958c2ffad735eae889c1" translate="yes" xml:space="preserve">
          <source>How do I use a string literal that contains an embedded single-quote (') character?</source>
          <target state="translated">작은 따옴표 ( ') 문자가 포함 된 문자열 리터럴을 어떻게 사용합니까?</target>
        </trans-unit>
        <trans-unit id="df2742c7cfd9e0aab79b47f5b91d0027a0daa0fc" translate="yes" xml:space="preserve">
          <source>How many executable files are in the archive?</source>
          <target state="translated">아카이브에 몇 개의 실행 파일이 있습니까?</target>
        </trans-unit>
        <trans-unit id="463cdf2e00bc03ffb0a58ce75a36b28173bad1d1" translate="yes" xml:space="preserve">
          <source>How vacuum works</source>
          <target state="translated">진공 작동 방식</target>
        </trans-unit>
        <trans-unit id="c2ebee163b547a5e69c6b8f18b3ce7ade428f296" translate="yes" xml:space="preserve">
          <source>However, client/server database engines (such as PostgreSQL, MySQL, or Oracle) usually support a higher level of concurrency and allow multiple processes to be writing to the same database at the same time. This is possible in a client/server database because there is always a single well-controlled server process available to coordinate access. If your application has a need for a lot of concurrency, then you should consider using a client/server database. But experience suggests that most applications need much less concurrency than their designers imagine.</source>
          <target state="translated">그러나 클라이언트 / 서버 데이터베이스 엔진 (예 : PostgreSQL, MySQL 또는 Oracle)은 일반적으로 높은 수준의 동시성을 지원하며 여러 프로세스가 동시에 동일한 데이터베이스에 쓸 수 있도록합니다. 액세스를 조정할 수있는 잘 제어 된 단일 서버 프로세스가 항상 있기 때문에 클라이언트 / 서버 데이터베이스에서 가능합니다. 응용 프로그램에 많은 동시성이 필요한 경우 클라이언트 / 서버 데이터베이스 사용을 고려해야합니다. 그러나 경험에 따르면 대부분의 응용 프로그램은 디자이너가 생각하는 것보다 훨씬 적은 동시성이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="a6ddbe53650906819e58dd27910958633c3e2cfa" translate="yes" xml:space="preserve">
          <source>However, for a &quot;contained-within&quot; style query, rounding the bounding boxes outward might cause some entries to be excluded from the result set if the edge of the entry bounding box corresponds to the edge of the query bounding box. To guard against this, applications should expand their contained-within query boxes slightly (by 0.000012%) by rounding down the lower coordinates and rounding up the top coordinates, in each dimension.</source>
          <target state="translated">그러나 &quot;포함 된&quot;스타일 쿼리의 경우 경계 상자를 바깥쪽으로 반올림하면 항목 경계 상자의 가장자리가 쿼리 경계 상자의 가장자리에 해당하는 경우 일부 항목이 결과 집합에서 제외 될 수 있습니다. 이를 방지하기 위해 응용 프로그램은 각 차원에서 하위 좌표를 반올림하고 최상위 좌표를 반올림하여 포함 된 쿼리 상자를 약간 (0.000012 %) 확장해야합니다.</target>
        </trans-unit>
        <trans-unit id="036059da8b4b48b5c802bde550324a35ba2a35da" translate="yes" xml:space="preserve">
          <source>However, highly tuned and specialized applications may want or need to replace some of SQLite's built-in system interfaces with alternative implementations more suitable for the needs of the application. SQLite is designed to be easily reconfigured at compile-time to meet the specific needs of individual projects. Among the compile-time configuration options for SQLite are these:</source>
          <target state="translated">그러나 고도로 조정되고 전문화 된 응용 프로그램은 SQLite의 기본 제공 시스템 인터페이스 중 일부를 응용 프로그램 요구에보다 적합한 대체 구현으로 대체하거나 원할 수도 있습니다. SQLite는 개별 프로젝트의 특정 요구를 충족시키기 위해 컴파일 타임에 쉽게 재구성 할 수 있도록 설계되었습니다. SQLite의 컴파일 타임 구성 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9070a26476fc8018912ec09ceeee6b8f4a55c4f3" translate="yes" xml:space="preserve">
          <source>However, if a</source>
          <target state="translated">그러나</target>
        </trans-unit>
        <trans-unit id="96aad563dbeff373bd60c0d93a4ac2c049bba808" translate="yes" xml:space="preserve">
          <source>However, if a &lt;a href=&quot;vtab&quot;&gt;virtual table&lt;/a&gt; implementation creates real tables (sometimes referred to as &quot;shadow&quot; tables) within the database to store its data in, then sqldiff.exe does calculate the difference between these. This can have surprising effects if the resulting SQL script is then run on a database that is not</source>
          <target state="translated">그러나 &lt;a href=&quot;vtab&quot;&gt;가상 테이블&lt;/a&gt; 구현이 데이터베이스 내에 데이터를 저장하기 위해 실제 테이블 (때때로 &quot;섀도우&quot;테이블이라고도 함)을 생성하면 sqldiff.exe는 이들 간의 차이를 계산합니다. 결과 SQL 스크립트가 그렇지 않은 데이터베이스에서 실행될 경우 이는 놀라운 영향을 미칠 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="90ac212208b638040cc57dde761531e1857cf547" translate="yes" xml:space="preserve">
          <source>However, if a database has many concurrent overlapping readers and there is always at least one active reader, then no checkpoints will be able to complete and hence the WAL file will grow without bound.</source>
          <target state="translated">그러나 데이터베이스에 동시 겹치는 판독기 수가 많고 항상 활성 판독기가 하나 이상 있으면 체크 포인트를 완료 할 수 없으므로 WAL 파일이 제한없이 커집니다.</target>
        </trans-unit>
        <trans-unit id="908b33a654e5b5eaa50e924611f16debc0d52007" translate="yes" xml:space="preserve">
          <source>However, if in-memory database pInMemory has just been opened (and is therefore completely empty) before being passed to function loadOrSaveDb(), then it is still possible to change its page size using an SQLite &quot;PRAGMA page_size&quot; command. Function loadOrSaveDb() could detect this case, and attempt to set the page-size of the in-memory database to the page-size of database zFilename before invoking the online backup API functions.</source>
          <target state="translated">그러나 메모리 내 데이터베이스 pInMemory가 loadOrSaveDb () 함수로 전달되기 전에 방금 열렸으므로 완전히 비어있는 경우에도 SQLite &quot;PRAGMA page_size&quot;명령을 사용하여 페이지 크기를 변경할 수 있습니다. loadOrSaveDb () 함수는이 경우를 감지하고 온라인 백업 API 함수를 호출하기 전에 인 메모리 데이터베이스의 페이지 크기를 데이터베이스 zFilename의 페이지 크기로 설정하려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="9282d84ef089a46651581dc23d9984a0b853a197" translate="yes" xml:space="preserve">
          <source>However, the application must guarantee that the destination &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt; is not passed to any other API (by any thread) after sqlite3_backup_init() is called and before the corresponding call to sqlite3_backup_finish(). SQLite does not currently check to see if the application incorrectly accesses the destination &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt; and so no error code is reported, but the operations may malfunction nevertheless. Use of the destination database connection while a backup is in progress might also also cause a mutex deadlock.</source>
          <target state="translated">그러나 응용 프로그램은 sqlite3_backup_init ()가 호출 된 후 및 sqlite3_backup_finish ()에 대한 해당 호출 전에 대상 &lt;a href=&quot;#sqlite3&quot;&gt;데이터베이스 연결&lt;/a&gt; 이 다른 API로 스레드에 의해 전달되지 않도록해야합니다. SQLite는 현재 응용 프로그램이 대상 &lt;a href=&quot;#sqlite3&quot;&gt;데이터베이스 연결에&lt;/a&gt; 잘못 액세스하는지 확인하지 않으므로 오류 코드가보고되지 않지만 그럼에도 불구하고 작업이 오작동 할 수 있습니다. 백업이 진행되는 동안 대상 데이터베이스 연결을 사용하면 뮤텍스 교착 상태가 발생할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="6bd67d83c5ac9c5a6146085621d60822aa5f256c" translate="yes" xml:space="preserve">
          <source>However, the application must guarantee that the destination &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt; is not passed to any other API (by any thread) after sqlite3_backup_init() is called and before the corresponding call to sqlite3_backup_finish(). SQLite does not currently check to see if the application incorrectly accesses the destination &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt; and so no error code is reported, but the operations may malfunction nevertheless. Use of the destination database connection while a backup is in progress might also also cause a mutex deadlock.</source>
          <target state="translated">그러나 응용 프로그램은 sqlite3_backup_init ()가 호출 된 후 및 sqlite3_backup_finish ()에 대한 해당 호출 전에 대상 &lt;a href=&quot;sqlite3&quot;&gt;데이터베이스 연결&lt;/a&gt; 이 다른 API로 스레드에 의해 전달되지 않도록해야합니다. SQLite는 현재 응용 프로그램이 대상 &lt;a href=&quot;sqlite3&quot;&gt;데이터베이스 연결에&lt;/a&gt; 잘못 액세스하는지 확인하지 않으므로 오류 코드가보고되지 않지만 그럼에도 불구하고 작업이 오작동 할 수 있습니다. 백업이 진행되는 동안 대상 데이터베이스 연결을 사용하면 뮤텍스 교착 상태가 발생할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="2051ec90af96c4dbbb12c8a2bb3921b04fb0a7f2" translate="yes" xml:space="preserve">
          <source>However, the b-tree for a &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; table is in the same format as an index b-tree. Thus, an index b-tree can be accessed as if it were a WITHOUT ROWID table.</source>
          <target state="translated">그러나 &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; 테이블의 b- 트리는 인덱스 b- 트리와 같은 형식입니다. 따라서 인덱스 b- 트리는 마치 WITHOUT ROWID 테이블 인 것처럼 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bdab598cbadf7cd7b2bb8bc0bda2ecbe3c4ceb3a" translate="yes" xml:space="preserve">
          <source>Hundreds of virtual tables that publish various aspects of the host computer, such as the process table, user lists, active network connections, and so forth. OsQuery is a separate project, started by Facebook, hosted on &lt;a href=&quot;https://github.com/facebook/osquery&quot;&gt;GitHub&lt;/a&gt;, and intended for security analysis and intrusion detection OsQuery is not a part of the SQLite project, but is included in this list because it demonstrates how the SQL language and the SQLite virtual table mechanism can be leveraged to provide elegant solutions to important real-world problems.</source>
          <target state="translated">프로세스 테이블, 사용자 목록, 활성 네트워크 연결 등과 같은 호스트 컴퓨터의 다양한 측면을 게시하는 수백 개의 가상 테이블. OsQuery는 Facebook에서 시작하여 &lt;a href=&quot;https://github.com/facebook/osquery&quot;&gt;GitHub&lt;/a&gt; 에서 호스팅되는 별도의 프로젝트이며 보안 분석 및 침입 감지를 위해 설계되었습니다. OsQuery는 SQLite 프로젝트의 일부가 아니지만 SQL 언어 및 SQLite 가상 테이블의 방법을 보여주기 때문에이 목록에 포함됩니다. 중요한 실제 문제에 대한 우아한 솔루션을 제공하기 위해 메커니즘을 활용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6d245e7140689124e74b20cb072465076d95b006" translate="yes" xml:space="preserve">
          <source>I accidentally deleted some important information from my SQLite database. How can I recover it?</source>
          <target state="translated">실수로 SQLite 데이터베이스에서 중요한 정보를 삭제했습니다. 어떻게 복구 할 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="dc9c3207dff5659b4c310cd90f15260ed36f68c7" translate="yes" xml:space="preserve">
          <source>I am told that Git users commonly install third-party graphical viewers for Git, many of which do a better job of showing recent activity on the project. That is great, but these are still more third-party applications that must be installed and managed separately. Many are platform-specific. (One of the better ones, &lt;a href=&quot;https://gitup.co/&quot;&gt;GitUp&lt;/a&gt;, only works on Mac, for example.) All require that you first sync your local repository then bring up their graphical interface on your desktop. And even with all that, I still cannot see what I typically want to see without multiple clicks. Checking on project status from a phone while away from the office is not an option.</source>
          <target state="translated">Git 사용자는 일반적으로 Git 용 타사 그래픽 뷰어를 설치한다고 들었는데, 그 중 상당수는 프로젝트에서 최근 활동을 더 잘 보여줍니다. 훌륭하지만 이것들은 여전히 ​​별도로 설치하고 관리 해야하는 더 많은 타사 응용 프로그램입니다. 많은 플랫폼에 따라 다릅니다. 더 나은 것 중 하나 인 &lt;a href=&quot;https://gitup.co/&quot;&gt;GitUp&lt;/a&gt; 은 예를 들어 Mac에서만 작동합니다. 먼저 로컬 리포지토리를 동기화 한 다음 데스크톱에서 그래픽 인터페이스를 불러 와야합니다. 그리고 그 모든 것에도 불구하고 여전히 여러 번의 클릭없이 일반적으로보고 싶은 것을 볼 수 없습니다. 사무실 밖에서 전화로 프로젝트 상태를 확인하는 것은 옵션이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="a5d8bfaba744d8865014e1b5776daef69b8ba64a" translate="yes" xml:space="preserve">
          <source>I am told that the default PostgreSQL configuration in RedHat 7.3 is unnecessarily conservative (it is designed to work on a machine with 8MB of RAM) and that PostgreSQL could be made to run a lot faster with some knowledgeable configuration tuning. Matt Sergeant reports that he has tuned his PostgreSQL installation and rerun the tests shown below. His results show that PostgreSQL and MySQL run at about the same speed. For Matt's results, visit</source>
          <target state="translated">RedHat 7.3의 기본 PostgreSQL 구성은 불필요하게 보수적이며 (8MB의 RAM이있는 컴퓨터에서 작동하도록 설계되었습니다) PostgreSQL은 지식이 풍부한 구성 조정으로 훨씬 빠르게 실행될 수 있다고 들었습니다. Matt Sergeant는 자신의 PostgreSQL 설치를 조정했으며 아래 표시된 테스트를 다시 실행한다고보고합니다. 그의 결과에 따르면 PostgreSQL과 MySQL은 거의 같은 속도로 실행됩니다. Matt의 결과를 보려면 방문</target>
        </trans-unit>
        <trans-unit id="c4b4aed72c495e6b69cc90a12c1002093ba09a73" translate="yes" xml:space="preserve">
          <source>I deleted a lot of data but the database file did not get any smaller. Is this a bug?</source>
          <target state="translated">많은 데이터를 삭제했지만 데이터베이스 파일이 더 작아지지 않았습니다. 이것이 버그입니까?</target>
        </trans-unit>
        <trans-unit id="30c131b4d60b85b44b7c7e76894246c9eeed47f8" translate="yes" xml:space="preserve">
          <source>I get a compiler error if I use the SQLITE_OMIT_... compile-time options when building SQLite.</source>
          <target state="translated">SQLite를 빌드 할 때 SQLITE_OMIT _... 컴파일 타임 옵션을 사용하면 컴파일러 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="96380689d1c266e443557fac220e162eb248fe7f" translate="yes" xml:space="preserve">
          <source>I get some compiler warnings when I compile SQLite. Isn't this a problem? Doesn't it indicate poor code quality?</source>
          <target state="translated">SQLite를 컴파일 할 때 컴파일러 경고가 나타납니다. 이것이 문제가되지 않습니까? 코드 품질이 좋지 않습니까?</target>
        </trans-unit>
        <trans-unit id="b0631d514fcfd330a2105540a0b813b7c7b65c3f" translate="yes" xml:space="preserve">
          <source>I/O error testing is similar in concept to OOM testing; I/O errors are simulated and checks are made to verify that SQLite responds correctly to the simulated errors. I/O errors are simulated in both the TCL and TH3 test harnesses by inserting a new &lt;a href=&quot;c3ref/vfs&quot;&gt;Virtual File System object&lt;/a&gt; that is specially rigged to simulate an I/O error after a set number of I/O operations. As with OOM error testing, the I/O error simulators can be set to fail just once, or to fail continuously after the first failure. Tests are run in a loop, slowly increasing the point of failure until the test case runs to completion without error. The loop is run twice, once with the I/O error simulator set to simulate only a single failure and a second time with it set to fail all I/O operations after the first failure.</source>
          <target state="translated">I / O 오류 테스트는 개념적으로 OOM 테스트와 유사합니다. I / O 오류가 시뮬레이션되고 SQLite가 시뮬레이션 된 오류에 올바르게 응답하는지 확인합니다. I / O 오류는 정해진 수의 I / O 작업 후 I / O 오류를 시뮬레이션하기 위해 특별히 조작 된 새로운 &lt;a href=&quot;c3ref/vfs&quot;&gt;가상 파일 시스템 개체&lt;/a&gt; 를 삽입하여 TCL 및 TH3 테스트 하니스 모두에서 시뮬레이션됩니다. OOM 오류 테스트와 마찬가지로 I / O 오류 시뮬레이터는 한 번만 실패하거나 첫 번째 실패 후에 지속적으로 실패하도록 설정할 수 있습니다. 테스트는 루프에서 실행되며 테스트 케이스가 오류없이 완료 될 때까지 실패 지점을 천천히 증가시킵니다. 루프는 단일 오류 만 시뮬레이션하도록 설정된 I / O 오류 시뮬레이터로 한 번 두 번 실행되고 첫 번째 장애 후 모든 I / O 조작이 실패하도록 두 번째로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="7e39c1a666c2fd143f11a87457de9e9888317484" translate="yes" xml:space="preserve">
          <source>I/O error testing seeks to verify that SQLite responds sanely to failed I/O operations. I/O errors might result from a full disk drive, malfunctioning disk hardware, network outages when using a network file system, system configuration or permission changes that occur in the middle of an SQL operation, or other hardware or operating system malfunctions. Whatever the cause, it is important that SQLite be able to respond correctly to these errors and I/O error testing seeks to verify that it does.</source>
          <target state="translated">I / O 오류 테스트는 SQLite가 실패한 I / O 작업에 제대로 응답하는지 확인합니다. I / O 오류는 전체 디스크 드라이브, 디스크 하드웨어 오작동, 네트워크 파일 시스템 사용 중 네트워크 중단, SQL 조작 중에 발생하는 시스템 구성 또는 권한 변경 또는 기타 하드웨어 또는 운영 체제 오작동으로 인해 발생할 수 있습니다. 원인이 무엇이든, SQLite가 이러한 오류에 올바르게 응답 할 수 있어야하며 I / O 오류 테스트는 해당 오류가 있는지 확인하려고합니다.</target>
        </trans-unit>
        <trans-unit id="8d8651647c9490ad914b1a9a6e6d44929ce46c04" translate="yes" xml:space="preserve">
          <source>I/O error tests</source>
          <target state="translated">I / O 오류 테스트</target>
        </trans-unit>
        <trans-unit id="35d92e9f60aece05bafa666d5e6093c27b070d38" translate="yes" xml:space="preserve">
          <source>I/O errors in the OS-interface generate error logging events. The message to these events gives the line number in the source code where the error originated and the filename associated with the event when there is a corresponding file.</source>
          <target state="translated">OS 인터페이스의 I / O 오류는 오류 로깅 이벤트를 생성합니다. 이러한 이벤트에 대한 메시지는 오류가 발생한 소스 코드의 행 번호와 해당 파일이있을 때 이벤트와 연관된 파일 이름을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d998ed8c49ae368254ded62fce1c76a6c0d44f30" translate="yes" xml:space="preserve">
          <source>I/O performance is measured using the &lt;a href=&quot;https://www.sqlite.org/src/file/test/kvtest.c&quot;&gt;kvtest.c&lt;/a&gt; program from the SQLite source tree. To compile this test program, first gather the kvtest.c source file into a directory with the &lt;a href=&quot;amalgamation&quot;&gt;SQLite amalgamation&lt;/a&gt; source files &quot;sqlite3.c&quot; and &quot;sqlite3.h&quot;. Then on unix, run a command like the following:</source>
          <target state="translated">I / O 성능은 SQLite 소스 트리 의 &lt;a href=&quot;https://www.sqlite.org/src/file/test/kvtest.c&quot;&gt;kvtest.c&lt;/a&gt; 프로그램을 사용하여 측정됩니다 . 이 테스트 프로그램을 컴파일하려면 먼저 kvtest.c 소스 파일을 &lt;a href=&quot;amalgamation&quot;&gt;SQLite amalgamation&lt;/a&gt; 소스 파일 &quot;sqlite3.c&quot;및 &quot;sqlite3.h&quot;가 있는 디렉토리에 수집하십시오 . 그런 다음 유닉스에서 다음과 같은 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="e779dca751c9ced361a0eadbe7916be59d02dc09" translate="yes" xml:space="preserve">
          <source>I/O performance varies widely depending on operating system and hardware. Make your own measurements before drawing conclusions.</source>
          <target state="translated">I / O 성능은 운영 체제 및 하드웨어에 따라 크게 다릅니다. 결론을 내리기 전에 직접 측정하십시오.</target>
        </trans-unit>
        <trans-unit id="267e452e4d048aacef682e30a9d368c22e7501e4" translate="yes" xml:space="preserve">
          <source>IDF(q&lt;sub&gt;i&lt;/sub&gt;)</source>
          <target state="translated">IDF(q&lt;sub&gt;i&lt;/sub&gt;)</target>
        </trans-unit>
        <trans-unit id="7be63e2881f7da8faa393bfe0ce4667f10916b66" translate="yes" xml:space="preserve">
          <source>IF</source>
          <target state="translated">IF</target>
        </trans-unit>
        <trans-unit id="235cae5b9c97fbc3364fb92af44d64b71392dbb2" translate="yes" xml:space="preserve">
          <source>IF EXISTS and IF NOT EXISTS clauses on CREATE/DROP TABLE/INDEX.</source>
          <target state="translated">CREATE / DROP TABLE / INDEX의 IF EXISTS 및 IF NOT EXISTS 절</target>
        </trans-unit>
        <trans-unit id="c9226f99dd645a71848cf0585c15059d7de868f4" translate="yes" xml:space="preserve">
          <source>IGNORE</source>
          <target state="translated">IGNORE</target>
        </trans-unit>
        <trans-unit id="8ae3e8381a64e36db57a5344790db89d7de90954" translate="yes" xml:space="preserve">
          <source>IMMEDIATE</source>
          <target state="translated">IMMEDIATE</target>
        </trans-unit>
        <trans-unit id="3b63a4da1415c242da17f132d0e00d086153fa66" translate="yes" xml:space="preserve">
          <source>IMMEDIATE cause the database connection to start a new write immediately, without waiting for a write statement. The BEGIN IMMEDIATE might fail with &lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt; if another write transaction is already active on another database connection.</source>
          <target state="translated">IMMEDIATE는 데이터베이스 연결이 쓰기 명령문을 기다리지 않고 즉시 새 쓰기를 시작하도록합니다. 다른 쓰기 트랜잭션이 이미 다른 데이터베이스 연결에서 활성화 된 경우 BEGIN IMMEDIATE가 &lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY로&lt;/a&gt; 실패 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1f94ea3de1605903ae5123660f5457eb8bd32e9f" translate="yes" xml:space="preserve">
          <source>IMMEDIATE cause the database connection to start a new write immediately, without waiting for a writes statement. The BEGIN IMMEDIATE might fail with &lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt; if another write transaction is already active on another database connection.</source>
          <target state="translated">IMMEDIATE는 데이터베이스 연결이 writes 문을 기다리지 않고 즉시 새 쓰기를 시작하게합니다. 다른 데이터베이스 연결에서 다른 쓰기 트랜잭션이 이미 활성화 된 경우 BEGIN IMMEDIATE가 &lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt; 와 함께 실패 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a4db76ad8831e1ebbbc52031b1ae484c99975878" translate="yes" xml:space="preserve">
          <source>IMPORTANT: The estimatedRows field was added to the sqlite3_index_info structure for SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_8_2.html&quot;&gt;version 3.8.2&lt;/a&gt; (2013-12-06). If a virtual table extension is used with an SQLite version earlier than 3.8.2, the results of attempting to read or write the estimatedRows field are undefined (but are likely to include crashing the application). The estimatedRows field should therefore only be used if &lt;a href=&quot;#sqlite3_libversion&quot;&gt;sqlite3_libversion_number()&lt;/a&gt; returns a value greater than or equal to 3008002. Similarly, the idxFlags field was added for &lt;a href=&quot;https://sqlite.org/releaselog/3_9_0.html&quot;&gt;version 3.9.0&lt;/a&gt; (2015-10-14). It may therefore only be used if sqlite3_libversion_number() returns a value greater than or equal to 3009000.</source>
          <target state="translated">중요 : expectedRows 필드는 SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_8_2.html&quot;&gt;버전 3.8.2&lt;/a&gt; (2013-12-06) 의 sqlite3_index_info 구조에 추가되었습니다 . 3.8.2 이전의 SQLite 버전에서 가상 테이블 확장을 사용하는 경우 expectedRows 필드를 읽거나 쓰려고 시도한 결과는 정의되지 않습니다 (하지만 응용 프로그램 충돌을 포함 할 수 있음). 그러므로 expectedRows 필드는 &lt;a href=&quot;#sqlite3_libversion&quot;&gt;sqlite3_libversion_number ()&lt;/a&gt; 가 3008002보다 크거나 같은 값을 반환하는 경우에만 사용해야 합니다. 마찬가지로 &lt;a href=&quot;https://sqlite.org/releaselog/3_9_0.html&quot;&gt;버전 3.9.0&lt;/a&gt; (2015-10-14)에 대해 idxFlags 필드가 추가되었습니다 . 따라서 sqlite3_libversion_number ()가 3009000보다 크거나 같은 값을 반환하는 경우에만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0f10a7701656ba82f20f9690db33f263b9944c35" translate="yes" xml:space="preserve">
          <source>IMPORTANT: The estimatedRows field was added to the sqlite3_index_info structure for SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_8_2.html&quot;&gt;version 3.8.2&lt;/a&gt; (2013-12-06). If a virtual table extension is used with an SQLite version earlier than 3.8.2, the results of attempting to read or write the estimatedRows field are undefined (but are likely to include crashing the application). The estimatedRows field should therefore only be used if &lt;a href=&quot;libversion&quot;&gt;sqlite3_libversion_number()&lt;/a&gt; returns a value greater than or equal to 3008002. Similarly, the idxFlags field was added for &lt;a href=&quot;https://sqlite.org/releaselog/3_9_0.html&quot;&gt;version 3.9.0&lt;/a&gt; (2015-10-14). It may therefore only be used if sqlite3_libversion_number() returns a value greater than or equal to 3009000.</source>
          <target state="translated">중요 : expectedRows 필드는 SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_8_2.html&quot;&gt;버전 3.8.2&lt;/a&gt; (2013-12-06) 의 sqlite3_index_info 구조에 추가되었습니다 . 3.8.2 이전의 SQLite 버전에서 가상 테이블 확장을 사용하는 경우 expectedRows 필드를 읽거나 쓰려고 시도한 결과는 정의되지 않습니다 (하지만 응용 프로그램 충돌을 포함 할 수 있음). 그러므로 expectedRows 필드는 &lt;a href=&quot;libversion&quot;&gt;sqlite3_libversion_number ()&lt;/a&gt; 가 3008002보다 크거나 같은 값을 반환하는 경우에만 사용해야 합니다. 마찬가지로 &lt;a href=&quot;https://sqlite.org/releaselog/3_9_0.html&quot;&gt;버전 3.9.0&lt;/a&gt; (2015-10-14)에 대해 idxFlags 필드가 추가되었습니다 . 따라서 sqlite3_libversion_number ()가 3009000보다 크거나 같은 값을 반환하는 경우에만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ac8fb933cd53d38ff3f25855409c3725df641570" translate="yes" xml:space="preserve">
          <source>IMPORTANT: The estimatedRows field was added to the sqlite3_index_info structure for SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_8_2.html&quot;&gt;version 3.8.2&lt;/a&gt; (2013-12-06). If a virtual table extension is used with an SQLite version earlier than 3.8.2, the results of attempting to read or write the estimatedRows field are undefined (but are likely to included crashing the application). The estimatedRows field should therefore only be used if &lt;a href=&quot;#sqlite3_libversion&quot;&gt;sqlite3_libversion_number()&lt;/a&gt; returns a value greater than or equal to 3008002. Similarly, the idxFlags field was added for &lt;a href=&quot;https://sqlite.org/releaselog/3_9_0.html&quot;&gt;version 3.9.0&lt;/a&gt; (2015-10-14). It may therefore only be used if sqlite3_libversion_number() returns a value greater than or equal to 3009000.</source>
          <target state="translated">중요 : 추정 행 필드가 SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_8_2.html&quot;&gt;버전 3.8.2&lt;/a&gt; (2013-12-06) 의 sqlite3_index_info 구조에 추가되었습니다 . 가상 테이블 확장이 3.8.2 이전의 SQLite 버전과 함께 사용되는 경우 추정 행 필드를 읽거나 쓰려고 시도한 결과는 정의되지 않지만 응용 프로그램이 충돌하는 경우가 있습니다. 추정 행 필드는 따라서 다음과 같은 경우에만 사용해야합니다&lt;a href=&quot;#sqlite3_libversion&quot;&gt; sqlite3_libversion_number ()&lt;/a&gt; 가 3008002 이상의 값을 반환하는 합니다. 마찬가지로 idxFlags 필드는 &lt;a href=&quot;https://sqlite.org/releaselog/3_9_0.html&quot;&gt;버전 3.9.0&lt;/a&gt; (2015-10-14) 에 추가되었습니다 . 따라서 sqlite3_libversion_number ()가 3009000 이상의 값을 반환하는 경우에만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f7788b148a07ca2844906ea43293afae622f959f" translate="yes" xml:space="preserve">
          <source>IMPORTANT: The estimatedRows field was added to the sqlite3_index_info structure for SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_8_2.html&quot;&gt;version 3.8.2&lt;/a&gt; (2013-12-06). If a virtual table extension is used with an SQLite version earlier than 3.8.2, the results of attempting to read or write the estimatedRows field are undefined (but are likely to included crashing the application). The estimatedRows field should therefore only be used if &lt;a href=&quot;libversion&quot;&gt;sqlite3_libversion_number()&lt;/a&gt; returns a value greater than or equal to 3008002. Similarly, the idxFlags field was added for &lt;a href=&quot;https://sqlite.org/releaselog/3_9_0.html&quot;&gt;version 3.9.0&lt;/a&gt; (2015-10-14). It may therefore only be used if sqlite3_libversion_number() returns a value greater than or equal to 3009000.</source>
          <target state="translated">중요 : 추정 행 필드가 SQLite &lt;a href=&quot;https://sqlite.org/releaselog/3_8_2.html&quot;&gt;버전 3.8.2&lt;/a&gt; (2013-12-06) 의 sqlite3_index_info 구조에 추가되었습니다 . 가상 테이블 확장이 3.8.2 이전의 SQLite 버전과 함께 사용되는 경우 추정 행 필드를 읽거나 쓰려고 시도한 결과는 정의되지 않지만 응용 프로그램 충돌을 포함 할 수 있습니다. 추정 된 행 필드는&lt;a href=&quot;libversion&quot;&gt; sqlite3_libversion_number ()&lt;/a&gt; 가 3008002 이상의 값을 반환하는 경우에만 사용해야 합니다. 마찬가지로 idxFlags 필드는 &lt;a href=&quot;https://sqlite.org/releaselog/3_9_0.html&quot;&gt;버전 3.9.0&lt;/a&gt; (2015-10-14) 에 추가되었습니다 . 따라서 sqlite3_libversion_number ()가 3009000 이상의 값을 반환하는 경우에만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6fca55ca3c828a46bfe96a10e69f572b61ce540c" translate="yes" xml:space="preserve">
          <source>IN</source>
          <target state="translated">IN</target>
        </trans-unit>
        <trans-unit id="9e93d8e547641024337c9f88c37aeeb56b09cfd4" translate="yes" xml:space="preserve">
          <source>IN operator</source>
          <target state="translated">IN 연산자</target>
        </trans-unit>
        <trans-unit id="2704c1d8c3fc215c38ee176f6cc30e434a22b7d7" translate="yes" xml:space="preserve">
          <source>INDEX</source>
          <target state="translated">INDEX</target>
        </trans-unit>
        <trans-unit id="d34941b7cef935d2b4b0705a24e87fad9ef16cef" translate="yes" xml:space="preserve">
          <source>INDEXED</source>
          <target state="translated">INDEXED</target>
        </trans-unit>
        <trans-unit id="0a477a77f065212096e980b210eda0227cabf37c" translate="yes" xml:space="preserve">
          <source>INDEXED BY</source>
          <target state="translated">INDEXED BY</target>
        </trans-unit>
        <trans-unit id="fd4d2f0d5aa850e30c0830c19e27d0fa4c65c7a7" translate="yes" xml:space="preserve">
          <source>INITIALLY</source>
          <target state="translated">INITIALLY</target>
        </trans-unit>
        <trans-unit id="88d86d54436967d4b4599d22d53c2a3db38390e6" translate="yes" xml:space="preserve">
          <source>INNER</source>
          <target state="translated">INNER</target>
        </trans-unit>
        <trans-unit id="c20ea07e32d25c072a65368c234d6f5a88f4521a" translate="yes" xml:space="preserve">
          <source>INSERT</source>
          <target state="translated">INSERT</target>
        </trans-unit>
        <trans-unit id="06c4e866c3ade62ba74b04b1ef54dce90603c067" translate="yes" xml:space="preserve">
          <source>INSERT Changes</source>
          <target state="translated">INSERT 변경</target>
        </trans-unit>
        <trans-unit id="4e7c6a59e9c103dd735d95fe84726b20fe104acf" translate="yes" xml:space="preserve">
          <source>INSERT INTO demo2(command) VALUES(&quot;reset&quot;);</source>
          <target state="translated">INSERT INTO demo2 (명령) VALUES ( &quot;reset&quot;);</target>
        </trans-unit>
        <trans-unit id="ed9844477a7bb01e976b863376804eb769331989" translate="yes" xml:space="preserve">
          <source>INSERT INTO t1 SELECT b,a,c FROM t2;</source>
          <target state="translated">t1에 삽입 선택 b, a, c from t2;</target>
        </trans-unit>
        <trans-unit id="767dcfed1e7a66d267a3220fbe439232373351ee" translate="yes" xml:space="preserve">
          <source>INSERT INTO t1 VALUES(1,10719,'ten thousand seven hundred nineteen');</source>
          <target state="translated">t1 값에 삽입 (1,10719, '만 천 칠십 구');</target>
        </trans-unit>
        <trans-unit id="a30ee5b0b970fc276bf5d3453cfa994508fd0177" translate="yes" xml:space="preserve">
          <source>INSERT INTO t1 VALUES(1,13153,'thirteen thousand one hundred fifty three');</source>
          <target state="translated">t1 값에 삽입 (1,13153, '13, 000 1 억 쉰 3 ');</target>
        </trans-unit>
        <trans-unit id="4bc6de27aceadc240c8dd43059a82f9a9561379b" translate="yes" xml:space="preserve">
          <source>INSERT INTO t1 VALUES(1000,94142,'ninety four thousand one hundred forty two');</source>
          <target state="translated">t1 값에 삽입 (1000,94142, '94 만 사십 사십이 ');</target>
        </trans-unit>
        <trans-unit id="62d9636f68aa675dabacb22b938d9f2be06b55e0" translate="yes" xml:space="preserve">
          <source>INSERT INTO t1 VALUES(11999,72836,'seventy two thousand eight hundred thirty six');</source>
          <target state="translated">t1 값에 삽입 (11999,72836, 'seventy 이천 팔백 삼십 육');</target>
        </trans-unit>
        <trans-unit id="f0fbe2df8c33450eafb90fd96d71291641e02aa4" translate="yes" xml:space="preserve">
          <source>INSERT INTO t1 VALUES(12000,64231,'sixty four thousand two hundred thirty one');</source>
          <target state="translated">t1 값에 삽입 (12000,64231, '64 만 이백 삼십 삼 ');</target>
        </trans-unit>
        <trans-unit id="31a76630ad88d2e05dde2c415d8576db8ec6caf9" translate="yes" xml:space="preserve">
          <source>INSERT INTO t1 VALUES(2,75560,'seventy five thousand five hundred sixty');</source>
          <target state="translated">t1 값에 삽입 (2,75560, 'seventy 5 천오백 육십');</target>
        </trans-unit>
        <trans-unit id="215d5732ce27fd223582c712aaa4660a83a173d4" translate="yes" xml:space="preserve">
          <source>INSERT INTO t1 VALUES(998,66289,'sixty six thousand two hundred eighty nine');</source>
          <target state="translated">t1 값에 삽입 (998,66289, '육십 육 이백 팔십 구');</target>
        </trans-unit>
        <trans-unit id="4b533e1d2a14d2013c249801c64abee1873ad0e7" translate="yes" xml:space="preserve">
          <source>INSERT INTO t1 VALUES(999,24322,'twenty four thousand three hundred twenty two');</source>
          <target state="translated">t1 값에 삽입 (999,24322, '이만 사천 삼백이');</target>
        </trans-unit>
        <trans-unit id="c97d31d96ba9608129ccb018853e9ea9cb6076d1" translate="yes" xml:space="preserve">
          <source>INSERT INTO t2 SELECT * FROM t1;</source>
          <target state="translated">t2에 삽입 * 선택 t1;</target>
        </trans-unit>
        <trans-unit id="18573be7d634b7266c9f3fabe6799c0e9de399b2" translate="yes" xml:space="preserve">
          <source>INSERT INTO t2 SELECT b,a,c FROM t1;</source>
          <target state="translated">t2에 삽입 SELECT b, a, c from t1;</target>
        </trans-unit>
        <trans-unit id="6654bc4310d1eef443b5f0f2c1641262634e1e66" translate="yes" xml:space="preserve">
          <source>INSERT INTO t2 VALUES(1,59672,'fifty nine thousand six hundred seventy two');</source>
          <target state="translated">t2 값에 삽입 (1,59672, '오천 구백 칠십이');</target>
        </trans-unit>
        <trans-unit id="94d1d27ed943c864c7cfd96715bf162e7beab100" translate="yes" xml:space="preserve">
          <source>INSERT INTO t2 VALUES(24999,89569,'eighty nine thousand five hundred sixty nine');</source>
          <target state="translated">t2 값에 삽입 (24999,89569, '80 만 백만 오십 육십 ');</target>
        </trans-unit>
        <trans-unit id="253860cdd49bceb80fa941fa6a7a8aa222a2af3e" translate="yes" xml:space="preserve">
          <source>INSERT INTO t2 VALUES(25000,94666,'ninety four thousand six hundred sixty six');</source>
          <target state="translated">t2 값에 삽입 (25000,94666, '96 만 육백 육십 ');</target>
        </trans-unit>
        <trans-unit id="0e8f253b1b555988f2df4dcb60865d19307f1b0c" translate="yes" xml:space="preserve">
          <source>INSERT INTO t3 VALUES(24999,88509,'eighty eight thousand five hundred nine');</source>
          <target state="translated">t3 값에 삽입 (24999,88509, '80 8000 쉰 9 ');</target>
        </trans-unit>
        <trans-unit id="00be643bf7f738dedf700c9b2a35f10694c7941a" translate="yes" xml:space="preserve">
          <source>INSERT INTO t3 VALUES(25000,84791,'eighty four thousand seven hundred ninety one');</source>
          <target state="translated">t3 값에 삽입 (25000,84791, '팔십 사천 칠십 구');</target>
        </trans-unit>
        <trans-unit id="eb2365c71aa4f9cd4a1bfec486fd83fcbdda7977" translate="yes" xml:space="preserve">
          <source>INSERT INTO tab1 VALUES(?,?,?);</source>
          <target state="translated">tab1에 삽입 값 VALUES (?,?,?);</target>
        </trans-unit>
        <trans-unit id="0666a7f2affc6b3653a4c2bdf54c9b4bb98361ed" translate="yes" xml:space="preserve">
          <source>INSERT INTO xyz(xyz) VALUES('automerge=N');</source>
          <target state="translated">INSERT INTO xyz (xyz) 값 ( 'automerge = N');</target>
        </trans-unit>
        <trans-unit id="4e8b9a8e297bede64cc05b119a6cea847e694a59" translate="yes" xml:space="preserve">
          <source>INSERT INTO xyz(xyz) VALUES('integrity-check');</source>
          <target state="translated">xyz (xyz) 값에 삽입 ( 'integrity-check');</target>
        </trans-unit>
        <trans-unit id="f5e0d229ccc9b20df140de91fa55ac169f3840fe" translate="yes" xml:space="preserve">
          <source>INSERT INTO xyz(xyz) VALUES('merge=X,Y');</source>
          <target state="translated">INSERT INTO xyz (xyz) 값 ( 'merge = X, Y');</target>
        </trans-unit>
        <trans-unit id="5af88d4a59ba50ff893198ed67ae451d74a117e2" translate="yes" xml:space="preserve">
          <source>INSERT INTO xyz(xyz) VALUES('optimize');</source>
          <target state="translated">INSERT INTO xyz (xyz) 값 ( 'optimize');</target>
        </trans-unit>
        <trans-unit id="13f47444da210de43c60aab402a316dfe2becb56" translate="yes" xml:space="preserve">
          <source>INSERT INTO xyz(xyz) VALUES('rebuild');</source>
          <target state="translated">INSERT INTO xyz (xyz) 값 ( '재 구축');</target>
        </trans-unit>
        <trans-unit id="631e931c19e40aa3da1ce6f0902d43d9a508af25" translate="yes" xml:space="preserve">
          <source>INSERT and UPDATE statements now always apply &lt;a href=&quot;datatype3#affinity&quot;&gt;column affinity&lt;/a&gt; before computing &lt;a href=&quot;lang_createtable#ckconst&quot;&gt;CHECK constraints&lt;/a&gt;. This bug fix could, in theory, cause problems for legacy databases with unorthodox CHECK constraints the require the input type for an INSERT is different from the declared column type. See ticket &lt;a href=&quot;https://sqlite.org/src/info/86ba67afafded936&quot;&gt;86ba67afafded936&lt;/a&gt; for more information.</source>
          <target state="translated">INSERT 및 UPDATE 문은 이제 &lt;a href=&quot;lang_createtable#ckconst&quot;&gt;CHECK 제약 조건을&lt;/a&gt; 계산하기 전에 항상 &lt;a href=&quot;datatype3#affinity&quot;&gt;열 선호도&lt;/a&gt; 를 적용 합니다 . 이론적으로이 버그 수정은 INSERT에 대한 입력 유형이 선언 된 열 유형과 다르기 때문에 비 정통적인 CHECK 제약 조건이있는 레거시 데이터베이스에 문제를 일으킬 수 있습니다. 자세한 내용은 &lt;a href=&quot;https://sqlite.org/src/info/86ba67afafded936&quot;&gt;86ba67afafded936&lt;/a&gt; 티켓 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2f103f7920401a2a0647c3f2159a7c89eabff571" translate="yes" xml:space="preserve">
          <source>INSERT is really slow - I can only do few dozen INSERTs per second</source>
          <target state="translated">INSERT는 실제로 느리다-초당 수십 개의 INSERT 만 할 수있다</target>
        </trans-unit>
        <trans-unit id="62d1399645f66158b7511abeddf89f395dea5fde" translate="yes" xml:space="preserve">
          <source>INSERT runs a little faster when the source is a SELECT statement.</source>
          <target state="translated">소스가 SELECT 문인 경우 INSERT가 약간 더 빠르게 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="aeb597e62b4ad26deac5b62c60062c710ea90371" translate="yes" xml:space="preserve">
          <source>INSTEAD</source>
          <target state="translated">INSTEAD</target>
        </trans-unit>
        <trans-unit id="2300ac39d09a99728ae682403c03797ee8da658b" translate="yes" xml:space="preserve">
          <source>INSTEAD OF trigger</source>
          <target state="translated">INSTEAD OF 트리거</target>
        </trans-unit>
        <trans-unit id="d8374d53c837e126cb6abc0132fba2a1f9a3a9c8" translate="yes" xml:space="preserve">
          <source>INSTEAD OF triggers</source>
          <target state="translated">INSTEAD OF 트리거</target>
        </trans-unit>
        <trans-unit id="793985cddb68d46ef51b688aecf85864c9e06813" translate="yes" xml:space="preserve">
          <source>INT</source>
          <target state="translated">INT</target>
        </trans-unit>
        <trans-unit id="a3a0ec55e3e26ee54417c786dfad5d709ecb7c40" translate="yes" xml:space="preserve">
          <source>INT2</source>
          <target state="translated">INT2</target>
        </trans-unit>
        <trans-unit id="021a30ffe1ce8750cb57ce941d7fb3d04090b37c" translate="yes" xml:space="preserve">
          <source>INT8</source>
          <target state="translated">INT8</target>
        </trans-unit>
        <trans-unit id="0fe37e40e5dab3ac411c2ddca6d21991e811acfa" translate="yes" xml:space="preserve">
          <source>INTEGER</source>
          <target state="translated">INTEGER</target>
        </trans-unit>
        <trans-unit id="e3752510d6a9d0fb8f3974168ca6bea1a562a9ac" translate="yes" xml:space="preserve">
          <source>INTEGER PRIMARY KEY columns can be used to implement the equivalent of AUTOINCREMENT. If you try to insert a NULL into an INTEGER PRIMARY KEY column, the column will actually be filled with an integer that is one greater than the largest key already in the table. Or if the largest key is 2147483647, then the column will be filled with a random integer. Either way, the INTEGER PRIMARY KEY column will be assigned a unique integer. You can retrieve this integer using the &lt;b&gt;sqlite_last_insert_rowid()&lt;/b&gt; API function or using the &lt;b&gt;last_insert_rowid()&lt;/b&gt; SQL function in a subsequent SELECT statement.</source>
          <target state="translated">INTEGER PRIMARY KEY 열을 사용하여 동일한 AUTOINCREMENT를 구현할 수 있습니다. INTEGER PRIMARY KEY 열에 NULL을 삽입하려고하면 열이 실제로 테이블에서 이미 가장 큰 키보다 큰 정수로 채워집니다. 또는 가장 큰 키가 2147483647이면 열이 임의의 정수로 채워집니다. 어느 쪽이든 INTEGER PRIMARY KEY 열에는 고유 한 정수가 할당됩니다. &lt;b&gt;sqlite_last_insert_rowid ()&lt;/b&gt; API 함수를 사용하거나 후속 SELECT 문에서 &lt;b&gt;last_insert_rowid ()&lt;/b&gt; SQL 함수를 사용하여이 정수를 검색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6f436e25f27f33e27c6053472309a17baa61d133" translate="yes" xml:space="preserve">
          <source>INTERFACE</source>
          <target state="translated">INTERFACE</target>
        </trans-unit>
        <trans-unit id="3230de938114213aa9c2d1e95f291cad51ede171" translate="yes" xml:space="preserve">
          <source>INTERSECT</source>
          <target state="translated">INTERSECT</target>
        </trans-unit>
        <trans-unit id="ce45b16212fe00c28d1a00de9cdfe954aa5bdc83" translate="yes" xml:space="preserve">
          <source>INTO</source>
          <target state="translated">INTO</target>
        </trans-unit>
        <trans-unit id="ec4a2a5056d72d8e03345caaebf4607d163e6dd7" translate="yes" xml:space="preserve">
          <source>IS</source>
          <target state="translated">IS</target>
        </trans-unit>
        <trans-unit id="819809f7649d3da66fd65a40dff83509ed2b98d0" translate="yes" xml:space="preserve">
          <source>IS NOT</source>
          <target state="translated">아니다</target>
        </trans-unit>
        <trans-unit id="437390c0773d23a0b0e272480ef7204b356f23ad" translate="yes" xml:space="preserve">
          <source>IS operator</source>
          <target state="translated">IS 연산자</target>
        </trans-unit>
        <trans-unit id="4e93120a53b25e7642cc15924ececcc7c79ac693" translate="yes" xml:space="preserve">
          <source>ISNULL</source>
          <target state="translated">ISNULL</target>
        </trans-unit>
        <trans-unit id="c8c6b6fe3176986c9e57f2648e139dfd273d0908" translate="yes" xml:space="preserve">
          <source>Ideally, all changes for an entire write transaction are buffered in the page cache until the end of the transaction. When the user commits the transaction, all changes are applied to the database file in the most efficient way possible, taking into account the assumptions enumerated in section</source>
          <target state="translated">이상적으로는 전체 쓰기 트랜잭션에 대한 모든 변경 사항이 트랜잭션이 끝날 때까지 페이지 캐시에 버퍼링됩니다. 사용자가 트랜잭션을 커밋하면 모든 변경 사항이 섹션에 열거 된 가정을 고려하여 가장 효율적인 방식으로 데이터베이스 파일에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="3aa28748de853653631eccc0d256aed420f0eed1" translate="yes" xml:space="preserve">
          <source>Ideally, applications should &lt;a href=&quot;#sqlite3_finalize&quot;&gt;finalize&lt;/a&gt; all &lt;a href=&quot;#sqlite3_stmt&quot;&gt;prepared statements&lt;/a&gt;, &lt;a href=&quot;#sqlite3_blob_close&quot;&gt;close&lt;/a&gt; all &lt;a href=&quot;#sqlite3_blob&quot;&gt;BLOB handles&lt;/a&gt;, and &lt;a href=&quot;#sqlite3backupfinish&quot;&gt;finish&lt;/a&gt; all &lt;a href=&quot;#sqlite3_backup&quot;&gt;sqlite3_backup&lt;/a&gt; objects associated with the &lt;a href=&quot;#sqlite3&quot;&gt;sqlite3&lt;/a&gt; object prior to attempting to close the object. If the database connection is associated with unfinalized prepared statements, BLOB handlers, and/or unfinished sqlite3_backup objects then sqlite3_close() will leave the database connection open and return &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_BUSY&lt;/a&gt;. If sqlite3_close_v2() is called with unfinalized prepared statements, unclosed BLOB handlers, and/or unfinished sqlite3_backups, it returns &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OK&lt;/a&gt; regardless, but instead of deallocating the database connection immediately, it marks the database connection as an unusable &quot;zombie&quot; and makes arrangements to automatically deallocate the database connection after all prepared statements are finalized, all BLOB handles are closed, and all backups have finished. The sqlite3_close_v2() interface is intended for use with host languages that are garbage collected, and where the order in which destructors are called is arbitrary.</source>
          <target state="translated">이상적으로, 응용 프로그램이 있어야 &lt;a href=&quot;#sqlite3_finalize&quot;&gt;완료&lt;/a&gt; 모든 &lt;a href=&quot;#sqlite3_stmt&quot;&gt;준비된 문&lt;/a&gt; , &lt;a href=&quot;#sqlite3_blob_close&quot;&gt;가까운&lt;/a&gt; 모든 &lt;a href=&quot;#sqlite3_blob&quot;&gt;BLOB 핸들을&lt;/a&gt; 하고, &lt;a href=&quot;#sqlite3backupfinish&quot;&gt;마무리&lt;/a&gt; 모두 &lt;a href=&quot;#sqlite3_backup&quot;&gt;sqlite3_backup이&lt;/a&gt; 과 관련된 객체 &lt;a href=&quot;#sqlite3&quot;&gt;sqlite3를&lt;/a&gt; 이전 개체를 닫기 시도에 객체입니다. 데이터베이스 연결이 완료되지 않은 준비된 문, BLOB 처리기 및 / 또는 완료되지 않은 sqlite3_backup 개체와 연결되어있는 경우 sqlite3_close ()는 데이터베이스 연결을 열린 상태로두고 &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_BUSY를&lt;/a&gt; 반환 합니다 . 완료되지 않은 준비된 명령문, 닫히지 않은 BLOB 핸들러 및 / 또는 완료되지 않은 sqlite3_backups와 함께 sqlite3_close_v2 ()가 호출되면 &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OK를&lt;/a&gt; 반환합니다 .그러나 데이터베이스 연결을 즉시 할당 해제하는 대신 데이터베이스 연결을 사용할 수없는 &quot;좀비&quot;로 표시하고 준비된 모든 명령문이 완료되고 모든 BLOB 핸들이 닫히고 모든 백업이 완료된 후 데이터베이스 연결을 자동으로 할당 해제하도록 준비합니다. sqlite3_close_v2 () 인터페이스는 가비지 수집되는 호스트 언어와 함께 사용하기위한 것이며 소멸자가 호출되는 순서는 임의적입니다.</target>
        </trans-unit>
        <trans-unit id="c6a04cc62fe27e532be18f141495602f090fc2e2" translate="yes" xml:space="preserve">
          <source>Ideally, applications should &lt;a href=&quot;finalize&quot;&gt;finalize&lt;/a&gt; all &lt;a href=&quot;stmt&quot;&gt;prepared statements&lt;/a&gt;, &lt;a href=&quot;blob_close&quot;&gt;close&lt;/a&gt; all &lt;a href=&quot;blob&quot;&gt;BLOB handles&lt;/a&gt;, and &lt;a href=&quot;backup_finish#sqlite3backupfinish&quot;&gt;finish&lt;/a&gt; all &lt;a href=&quot;backup&quot;&gt;sqlite3_backup&lt;/a&gt; objects associated with the &lt;a href=&quot;sqlite3&quot;&gt;sqlite3&lt;/a&gt; object prior to attempting to close the object. If the database connection is associated with unfinalized prepared statements, BLOB handlers, and/or unfinished sqlite3_backup objects then sqlite3_close() will leave the database connection open and return &lt;a href=&quot;../rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;. If sqlite3_close_v2() is called with unfinalized prepared statements, unclosed BLOB handlers, and/or unfinished sqlite3_backups, it returns &lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OK&lt;/a&gt; regardless, but instead of deallocating the database connection immediately, it marks the database connection as an unusable &quot;zombie&quot; and makes arrangements to automatically deallocate the database connection after all prepared statements are finalized, all BLOB handles are closed, and all backups have finished. The sqlite3_close_v2() interface is intended for use with host languages that are garbage collected, and where the order in which destructors are called is arbitrary.</source>
          <target state="translated">이상적으로, 응용 프로그램이 있어야 &lt;a href=&quot;finalize&quot;&gt;완료&lt;/a&gt; 모든 &lt;a href=&quot;stmt&quot;&gt;준비된 문&lt;/a&gt; , &lt;a href=&quot;blob_close&quot;&gt;가까운&lt;/a&gt; 모든 &lt;a href=&quot;blob&quot;&gt;BLOB 핸들을&lt;/a&gt; 하고, &lt;a href=&quot;backup_finish#sqlite3backupfinish&quot;&gt;마무리&lt;/a&gt; 모두 &lt;a href=&quot;backup&quot;&gt;sqlite3_backup이&lt;/a&gt; 과 관련된 객체 &lt;a href=&quot;sqlite3&quot;&gt;sqlite3를&lt;/a&gt; 이전 개체를 닫기 시도에 객체입니다. 데이터베이스 연결이 완료되지 않은 준비된 문, BLOB 처리기 및 / 또는 완료되지 않은 sqlite3_backup 개체와 연결되어있는 경우 sqlite3_close ()는 데이터베이스 연결을 열린 상태로두고 &lt;a href=&quot;../rescode#busy&quot;&gt;SQLITE_BUSY를&lt;/a&gt; 반환 합니다 . 완료되지 않은 준비된 명령문, 닫히지 않은 BLOB 핸들러 및 / 또는 완료되지 않은 sqlite3_backups와 함께 sqlite3_close_v2 ()가 호출되면 &lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OK를&lt;/a&gt; 반환합니다 .그러나 데이터베이스 연결을 즉시 할당 해제하는 대신 데이터베이스 연결을 사용할 수없는 &quot;좀비&quot;로 표시하고 준비된 모든 명령문이 완료되고 모든 BLOB 핸들이 닫히고 모든 백업이 완료된 후 데이터베이스 연결을 자동으로 할당 해제하도록 준비합니다. sqlite3_close_v2 () 인터페이스는 가비지 수집되는 호스트 언어와 함께 사용하기위한 것이며 소멸자가 호출되는 순서는 임의적입니다.</target>
        </trans-unit>
        <trans-unit id="6acc0ba610f36525f417357719583f041f6f89df" translate="yes" xml:space="preserve">
          <source>Identify all methods for important objects in the interface documentation. (&lt;a href=&quot;c3ref/context&quot;&gt;example&lt;/a&gt;)</source>
          <target state="translated">인터페이스 문서에서 중요한 객체에 대한 모든 방법을 식별하십시오. ( &lt;a href=&quot;c3ref/context&quot;&gt;예&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="b22904746b6da6e6da1cdf65a007a3a92ddeb189" translate="yes" xml:space="preserve">
          <source>IdxDelete</source>
          <target state="translated">IdxDelete</target>
        </trans-unit>
        <trans-unit id="366f895979adef772b50f0a751ee770dc166bab5" translate="yes" xml:space="preserve">
          <source>IdxGE</source>
          <target state="translated">IdxGE</target>
        </trans-unit>
        <trans-unit id="267d8b7b66c2e63c7420b46c7edd1ef118e13442" translate="yes" xml:space="preserve">
          <source>IdxGT</source>
          <target state="translated">IdxGT</target>
        </trans-unit>
        <trans-unit id="bdc0a8ea07737acbd00822ec9e49840776244c14" translate="yes" xml:space="preserve">
          <source>IdxInsert</source>
          <target state="translated">IdxInsert</target>
        </trans-unit>
        <trans-unit id="ba9bc003fbf28927e55ed674e6312a7b981c1435" translate="yes" xml:space="preserve">
          <source>IdxLE</source>
          <target state="translated">IdxLE</target>
        </trans-unit>
        <trans-unit id="11ede54300baae62726a3150e6c2f825098c4577" translate="yes" xml:space="preserve">
          <source>IdxLT</source>
          <target state="translated">IdxLT</target>
        </trans-unit>
        <trans-unit id="c82f35a450e8e6ba85d6a5ba639866e8424ba8d9" translate="yes" xml:space="preserve">
          <source>IdxRowid</source>
          <target state="translated">IdxRowid</target>
        </trans-unit>
        <trans-unit id="751c68a3471b1c791efaee0a8e7c24ea0c266efd" translate="yes" xml:space="preserve">
          <source>If</source>
          <target state="translated">If</target>
        </trans-unit>
        <trans-unit id="7194c23292e4ec0e7bfbbaa15bc21cc90107f2f5" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#sqlite3_value&quot;&gt;sqlite3_value&lt;/a&gt; object V was initialized using &lt;a href=&quot;#sqlite3_bind_blob&quot;&gt;sqlite3_bind_pointer(S,I,P,X,D)&lt;/a&gt; or &lt;a href=&quot;#sqlite3_result_blob&quot;&gt;sqlite3_result_pointer(C,P,X,D)&lt;/a&gt; and if X and Y are strings that compare equal according to strcmp(X,Y), then sqlite3_value_pointer(V,Y) will return the pointer P. Otherwise, sqlite3_value_pointer(V,Y) returns a NULL. The sqlite3_bind_pointer() routine is part of the &lt;a href=&quot;bindptr&quot;&gt;pointer passing interface&lt;/a&gt; added for SQLite 3.20.0.</source>
          <target state="translated">경우 &lt;a href=&quot;#sqlite3_value&quot;&gt;sqlite3_value&lt;/a&gt; 물체 V를 사용하여 초기화시켰다 &lt;a href=&quot;#sqlite3_bind_blob&quot;&gt;(S, I, P, X, D) sqlite3_bind_pointer을&lt;/a&gt; 하거나 &lt;a href=&quot;#sqlite3_result_blob&quot;&gt;sqlite3_result_pointer (C, P, X, D)&lt;/a&gt; 과 X 및 Y는 STRCMP 동등한있어서 비교 문자열 (X, Y)를, 있다면 sqlite3_value_pointer (V, Y)는 포인터 P를 반환합니다. 그렇지 않으면 sqlite3_value_pointer (V, Y)는 NULL을 반환합니다. sqlite3_bind_pointer () 루틴은 &lt;a href=&quot;bindptr&quot;&gt;포인터 전달 인터페이스의&lt;/a&gt; 일부입니다 SQLite 3.20.0에 추가 된 .</target>
        </trans-unit>
        <trans-unit id="6f26b5b5b34df807b99862702ef8a28042e009ca" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../uri&quot;&gt;URI filename&lt;/a&gt; interpretation is enabled, and the filename argument begins with &quot;file:&quot;, then the filename is interpreted as a URI. URI filename interpretation is enabled if the &lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_URI&lt;/a&gt; flag is set in the third argument to sqlite3_open_v2(), or if it has been enabled globally using the &lt;a href=&quot;c_config_covering_index_scan#sqliteconfiguri&quot;&gt;SQLITE_CONFIG_URI&lt;/a&gt; option with the &lt;a href=&quot;config&quot;&gt;sqlite3_config()&lt;/a&gt; method or by the &lt;a href=&quot;../compile#use_uri&quot;&gt;SQLITE_USE_URI&lt;/a&gt; compile-time option. URI filename interpretation is turned off by default, but future releases of SQLite might enable URI filename interpretation by default. See &quot;&lt;a href=&quot;../uri&quot;&gt;URI filenames&lt;/a&gt;&quot; for additional information.</source>
          <target state="translated">경우 &lt;a href=&quot;../uri&quot;&gt;URI 파일 이름의&lt;/a&gt; 해석이 가능하며, 파일 이름 인수로 시작 &quot;파일 :&quot;다음 파일 이름은 URI로 해석됩니다. &lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_URI&lt;/a&gt; 플래그가 세 번째 인수에서 sqlite3_open_v2 ()로 설정 되거나 &lt;a href=&quot;config&quot;&gt;sqlite3_config ()&lt;/a&gt; 메소드 와 함께 또는 &lt;a href=&quot;../compile#use_uri&quot;&gt;SQLITE_USE_URI&lt;/a&gt; 컴파일 타임 옵션으로 &lt;a href=&quot;c_config_covering_index_scan#sqliteconfiguri&quot;&gt;SQLITE_CONFIG_URI&lt;/a&gt; 옵션을 사용하여 전체적으로 사용 가능한 경우 URI 파일 이름 해석이 사용 가능합니다 . URI 파일 이름 해석은 기본적으로 해제되어 있지만 향후 릴리스의 SQLite에서는 기본적으로 URI 파일 이름 해석을 활성화 할 수 있습니다. &quot; &lt;a href=&quot;../uri&quot;&gt;URI 파일 이름&lt;/a&gt; 참조 추가 정보는 &quot;을 .</target>
        </trans-unit>
        <trans-unit id="05071756ec11a7890791b184fe1e16795132ff77" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;foreignkeys&quot;&gt;foreign key constraints&lt;/a&gt; are &lt;a href=&quot;pragma#pragma_foreign_keys&quot;&gt;enabled&lt;/a&gt; and a column with a &lt;a href=&quot;syntax/foreign-key-clause&quot;&gt;REFERENCES clause&lt;/a&gt; is added, the column must have a default value of NULL.</source>
          <target state="translated">경우 &lt;a href=&quot;foreignkeys&quot;&gt;외래 키 제약 조건이&lt;/a&gt; 된다 &lt;a href=&quot;pragma#pragma_foreign_keys&quot;&gt;활성화&lt;/a&gt; 하고있는 열 &lt;a href=&quot;syntax/foreign-key-clause&quot;&gt;참조 절&lt;/a&gt; 추가, 열이 NULL의 디폴트 값이 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="4f1ff78b03ab38bd9d7bc0c0b70bf71a047d9c7f" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;foreignkeys&quot;&gt;foreign key constraints&lt;/a&gt; are enabled, a DROP TABLE command performs an implicit &lt;a href=&quot;lang_delete&quot;&gt;DELETE FROM&lt;/a&gt; command before removing the table from the database schema. Any triggers attached to the table are dropped from the database schema before the implicit DELETE FROM is executed, so this cannot cause any triggers to fire. By contrast, an implicit DELETE FROM does cause any configured &lt;a href=&quot;foreignkeys#fk_actions&quot;&gt;foreign key actions&lt;/a&gt; to take place. If the implicit DELETE FROM executed as part of a DROP TABLE command violates any immediate foreign key constraints, an error is returned and the table is not dropped. If the implicit DELETE FROM causes any deferred foreign key constraints to be violated, and the violations still exist when the transaction is committed, an error is returned at the time of commit.</source>
          <target state="translated">경우 &lt;a href=&quot;foreignkeys&quot;&gt;외래 키 제약 조건을&lt;/a&gt; 활성화하는 DROP TABLE 명령이 암시 수행 &lt;a href=&quot;lang_delete&quot;&gt;에서 삭제&lt;/a&gt; 데이터베이스 스키마에서 테이블을 제거하기 전에 명령을. 암시 적 DELETE FROM이 실행되기 전에 테이블에 연결된 모든 트리거가 데이터베이스 스키마에서 삭제되므로 트리거가 실행될 수 없습니다. 반대로, 암시 적 DELETE FROM은 구성된 &lt;a href=&quot;foreignkeys#fk_actions&quot;&gt;외래 키 동작을&lt;/a&gt; 유발합니다. 을 발생시킵니다. DROP TABLE 명령의 일부로 실행 된 내재적 DELETE FROM이 즉시 외부 키 제한 조건을 위반하면 오류가 리턴되고 테이블이 삭제되지 않습니다. 내재 된 DELETE FROM으로 인해 지연된 외래 키 제약 조건이 위반되고 트랜잭션이 커밋 될 때 위반이 여전히 존재하면 커밋시 오류가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="5f1e27999e2bb2ba42de86bd45d31998c0603f29" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;pragma#pragma_journal_mode&quot;&gt;PRAGMA journal_mode&lt;/a&gt; is set to OFF (thus disabling the rollback journal file) then the behavior of the ROLLBACK command is undefined.</source>
          <target state="translated">경우 &lt;a href=&quot;pragma#pragma_journal_mode&quot;&gt;PRAGMA의 journal_mode는&lt;/a&gt; (따라서 롤백 저널 파일을 해제)를 OFF로 설정 한 후 ROLLBACK 명령의 동작은 보증되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ff29cd60491f93076673fb75bedc0744960c9309" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;pragma#pragma_locking_mode&quot;&gt;EXCLUSIVE locking mode&lt;/a&gt; is set prior to the first WAL-mode database access, then SQLite never attempts to call any of the shared-memory methods and hence no shared-memory wal-index is ever created. In that case, the database connection remains in EXCLUSIVE mode as long as the journal mode is WAL; attempts to change the locking mode using &quot;&lt;code&gt;PRAGMA locking_mode=NORMAL;&lt;/code&gt;&quot; are no-ops. The only way to change out of EXCLUSIVE locking mode is to first change out of WAL journal mode.</source>
          <target state="translated">경우 &lt;a href=&quot;pragma#pragma_locking_mode&quot;&gt;배타적 잠금 모드가&lt;/a&gt; 이전에 최초의 WAL-모드 데이터베이스 액세스로 설정되어, 다음 SQLite는 결코 시도는 공유 메모리의 방법 중 하나 따라서 어떤 공유 메모리 월마트 인덱스 이제까지 생성을 호출합니다. 이 경우, 저널 모드가 WAL 인 한 데이터베이스 연결은 EXCLUSIVE 모드로 유지됩니다. &quot; &lt;code&gt;PRAGMA locking_mode=NORMAL;&lt;/code&gt; &quot;을 사용하여 잠금 모드를 변경하려고 시도 하지 않습니다. 독점 잠금 모드를 변경하는 유일한 방법은 먼저 WAL 저널 모드를 변경하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="53ecc95d367e022d4f668ded862caf4b37a61a3f" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;uri&quot;&gt;URI filename&lt;/a&gt; interpretation is enabled, and the filename argument begins with &quot;file:&quot;, then the filename is interpreted as a URI. URI filename interpretation is enabled if the &lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_URI&lt;/a&gt; flag is set in the third argument to sqlite3_open_v2(), or if it has been enabled globally using the &lt;a href=&quot;#sqliteconfiguri&quot;&gt;SQLITE_CONFIG_URI&lt;/a&gt; option with the &lt;a href=&quot;#sqlite3_config&quot;&gt;sqlite3_config()&lt;/a&gt; method or by the &lt;a href=&quot;compile#use_uri&quot;&gt;SQLITE_USE_URI&lt;/a&gt; compile-time option. URI filename interpretation is turned off by default, but future releases of SQLite might enable URI filename interpretation by default. See &quot;&lt;a href=&quot;uri&quot;&gt;URI filenames&lt;/a&gt;&quot; for additional information.</source>
          <target state="translated">경우 &lt;a href=&quot;uri&quot;&gt;URI 파일 이름의&lt;/a&gt; 해석이 가능하며, 파일 이름 인수로 시작 &quot;파일 :&quot;다음 파일 이름은 URI로 해석됩니다. &lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_URI&lt;/a&gt; 플래그가 세 번째 인수에서 sqlite3_open_v2 ()로 설정 되거나 &lt;a href=&quot;#sqlite3_config&quot;&gt;sqlite3_config ()&lt;/a&gt; 메소드 와 함께 또는 &lt;a href=&quot;compile#use_uri&quot;&gt;SQLITE_USE_URI&lt;/a&gt; 컴파일 타임 옵션으로 &lt;a href=&quot;#sqliteconfiguri&quot;&gt;SQLITE_CONFIG_URI&lt;/a&gt; 옵션을 사용하여 전체적으로 사용 가능한 경우 URI 파일 이름 해석이 사용 가능합니다 . URI 파일 이름 해석은 기본적으로 해제되어 있지만 향후 릴리스의 SQLite에서는 기본적으로 URI 파일 이름 해석을 활성화 할 수 있습니다. 추가 정보는 &quot; &lt;a href=&quot;uri&quot;&gt;URI 파일 이름&lt;/a&gt; &quot;을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0b1cbecea1bfc84769a23d468c11c6578d2f04c8" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;value&quot;&gt;sqlite3_value&lt;/a&gt; object V was initialized using &lt;a href=&quot;bind_blob&quot;&gt;sqlite3_bind_pointer(S,I,P,X,D)&lt;/a&gt; or &lt;a href=&quot;result_blob&quot;&gt;sqlite3_result_pointer(C,P,X,D)&lt;/a&gt; and if X and Y are strings that compare equal according to strcmp(X,Y), then sqlite3_value_pointer(V,Y) will return the pointer P. Otherwise, sqlite3_value_pointer(V,Y) returns a NULL. The sqlite3_bind_pointer() routine is part of the &lt;a href=&quot;../bindptr&quot;&gt;pointer passing interface&lt;/a&gt; added for SQLite 3.20.0.</source>
          <target state="translated">경우 &lt;a href=&quot;value&quot;&gt;sqlite3_value&lt;/a&gt; 물체 V를 사용하여 초기화시켰다 &lt;a href=&quot;bind_blob&quot;&gt;(S, I, P, X, D) sqlite3_bind_pointer을&lt;/a&gt; 하거나 &lt;a href=&quot;result_blob&quot;&gt;sqlite3_result_pointer (C, P, X, D)&lt;/a&gt; 과 X 및 Y는 STRCMP 동등한있어서 비교 문자열 (X, Y)를, 있다면 sqlite3_value_pointer (V, Y)는 포인터 P를 반환합니다. 그렇지 않으면 sqlite3_value_pointer (V, Y)는 NULL을 반환합니다. sqlite3_bind_pointer () 루틴은 SQLite 3.20.0에 추가 된 &lt;a href=&quot;../bindptr&quot;&gt;포인터 전달 인터페이스의&lt;/a&gt; 일부입니다 .</target>
        </trans-unit>
        <trans-unit id="efa51497a7f80ea6cb0e82aee000934c754a4257" translate="yes" xml:space="preserve">
          <source>If A&amp;lt;B THEN B&amp;gt;A.</source>
          <target state="translated">A &amp;lt;B THEN B&amp;gt; A 인 경우.</target>
        </trans-unit>
        <trans-unit id="af85ab5198e03592c9a1e93f75055ff7f7b4d432" translate="yes" xml:space="preserve">
          <source>If A&amp;lt;B and B&amp;lt;C then A&amp;lt;C.</source>
          <target state="translated">A &amp;lt;B 및 B &amp;lt;C이면 A &amp;lt;C.</target>
        </trans-unit>
        <trans-unit id="ee7bb0a19c51474ba2d6ea010cd538d977b0b7a6" translate="yes" xml:space="preserve">
          <source>If A==B and B==C then A==C.</source>
          <target state="translated">A == B이고 B == C이면 A == C입니다.</target>
        </trans-unit>
        <trans-unit id="ad62f244096def890ab26a681e8f0120126f5af5" translate="yes" xml:space="preserve">
          <source>If A==B then B==A.</source>
          <target state="translated">A == B이면 B == A입니다.</target>
        </trans-unit>
        <trans-unit id="215c914a1a9a516e367b5ac91682005ac659922c" translate="yes" xml:space="preserve">
          <source>If AUTOVACUUM is enabled then it is possible that another root page might be moved into the newly deleted root page in order to keep all root pages contiguous at the beginning of the database. The former value of the root page that moved - its value before the move occurred - is stored in register P2. If no page movement was required (because the table being dropped was already the last one in the database) then a zero is stored in register P2. If AUTOVACUUM is disabled then a zero is stored in register P2.</source>
          <target state="translated">AUTOVACUUM이 사용 가능한 경우 데이터베이스의 시작 부분에서 모든 루트 페이지를 연속적으로 유지하기 위해 다른 루트 페이지가 새로 삭제 된 루트 페이지로 이동 될 수 있습니다. 이동 한 루트 페이지의 이전 값 (이동이 발생하기 전의 값)은 레지스터 P2에 저장됩니다. 페이지 이동이 필요하지 않은 경우 (삭제되는 테이블이 이미 데이터베이스의 마지막 테이블이므로) 레지스터 P2에 0이 저장됩니다. AUTOVACUUM이 비활성화되면 레지스터 P2에 0이 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="ed950ba22e4eb6cfb3232df6ec7b67b59a4df463" translate="yes" xml:space="preserve">
          <source>If CHANGESET_REPLACE is returned by an SQLITE_CHANGESET_CONFLICT conflict handler, then the conflicting row is removed from the database and a second attempt to apply the change is made. If this second attempt fails, the original row is restored to the database before continuing.</source>
          <target state="translated">SQLITE_CHANGESET_CONFLICT 충돌 핸들러가 CHANGESET_REPLACE를 리턴하면 충돌하는 행이 데이터베이스에서 제거되고 두 번째로 변경 사항을 적용하려고 시도합니다. 이 두 번째 시도가 실패하면 계속하기 전에 원래 행이 데이터베이스로 복원됩니다.</target>
        </trans-unit>
        <trans-unit id="30467096b4dd78c0d45cf667e992ae71e7009c64" translate="yes" xml:space="preserve">
          <source>If CHANGESET_REPLACE is returned by an SQLITE_CHANGESET_DATA conflict handler, then the conflicting row is either updated or deleted, depending on the type of change.</source>
          <target state="translated">CHANGESET_REPLACE가 SQLITE_CHANGESET_DATA 충돌 핸들러에 의해 리턴되면 충돌 유형은 변경 유형에 따라 업데이트되거나 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="1a6c0fd79d5064239e68ae7d0df720319dab8e2b" translate="yes" xml:space="preserve">
          <source>If F is a NULL pointer, then sqlite3_uri_parameter(F,P) returns NULL and sqlite3_uri_boolean(F,P,B) returns B. If F is not a NULL pointer and is not a database file pathname pointer that SQLite passed into the xOpen VFS method, then the behavior of this routine is undefined and probably undesirable.</source>
          <target state="translated">F가 NULL 포인터 인 경우 sqlite3_uri_parameter (F, P)는 NULL을 리턴하고 sqlite3_uri_boolean (F, P, B)는 B를 리턴합니다. F가 NULL 포인터가 아니며 SQLite가 xOpen VFS로 전달한 데이터베이스 파일 경로 이름 포인터가 아닌 경우 이 루틴의 동작은 정의되지 않았으며 바람직하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7f60624c5c0f9adef9d93c9ed8179bc298264376" translate="yes" xml:space="preserve">
          <source>If F is a NULL pointer, then sqlite3_uri_parameter(F,P) returns NULL and sqlite3_uri_boolean(F,P,B) returns B. If F is not a NULL pointer and is not a database file pathname pointer that the SQLite core passed into the xOpen VFS method, then the behavior of this routine is undefined and probably undesirable.</source>
          <target state="translated">F가 NULL 포인터이면 sqlite3_uri_parameter (F, P)는 NULL을 반환하고 sqlite3_uri_boolean (F, P, B)는 B를 반환합니다 .F가 NULL 포인터가 아니고 SQLite 코어가 전달한 데이터베이스 파일 경로 이름 포인터가 아닌 경우 xOpen VFS 메서드를 사용하는 경우이 루틴의 동작이 정의되지 않았으며 바람직하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4646f7a7f8236532256725ec4112b997f511c7d6" translate="yes" xml:space="preserve">
          <source>If F is a suitable filename (as described in the previous paragraph) and if P is the name of the query parameter, then sqlite3_uri_parameter(F,P) returns the value of the P parameter if it exists or a NULL pointer if P does not appear as a query parameter on F. If P is a query parameter of F and it has no explicit value, then sqlite3_uri_parameter(F,P) returns a pointer to an empty string.</source>
          <target state="translated">F가 적절한 파일 이름 (이전 단락에서 설명 됨)이고 P가 쿼리 매개 변수의 이름이면 sqlite3_uri_parameter (F, P)는 P 매개 변수가 있으면 P 매개 변수의 값을 반환하고 P가 없으면 NULL 포인터를 반환합니다. F에 쿼리 매개 변수로 나타납니다. P가 F의 쿼리 매개 변수이고 명시적인 값이없는 경우 sqlite3_uri_parameter (F, P)는 빈 문자열에 대한 포인터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9276605b0b0a889bb4c7aa5fcec85c6fc6240625" translate="yes" xml:space="preserve">
          <source>If F is the database filename pointer passed into the xOpen() method of a VFS implementation when the flags parameter to xOpen() has one or more of the &lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_URI&lt;/a&gt; or &lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_MAIN_DB&lt;/a&gt; bits set and P is the name of the query parameter, then sqlite3_uri_parameter(F,P) returns the value of the P parameter if it exists or a NULL pointer if P does not appear as a query parameter on F. If P is a query parameter of F has no explicit value, then sqlite3_uri_parameter(F,P) returns a pointer to an empty string.</source>
          <target state="translated">F가 xOpen ()에 대한 플래그 매개 변수에 하나 이상의 &lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_URI&lt;/a&gt; 또는 &lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_MAIN_DB&lt;/a&gt; 비트 세트가 있고 P가 조회 매개 변수의 이름 인 경우 VFS 구현의 xOpen () 메소드에 전달 된 데이터베이스 파일 이름 포인터 인 경우 sqlite3_uri_parameter ( F, P)는 P 매개 변수가 존재하는 경우 P 매개 변수의 값을 리턴하고, P가 F에 조회 매개 변수로 나타나지 않으면 NULL 포인터를 리턴합니다. 빈 문자열에 대한 포인터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8ba138ee3e59443a69735dbcd87f0f8269dd9564" translate="yes" xml:space="preserve">
          <source>If F is the database filename pointer passed into the xOpen() method of a VFS implementation when the flags parameter to xOpen() has one or more of the &lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_URI&lt;/a&gt; or &lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_MAIN_DB&lt;/a&gt; bits set and P is the name of the query parameter, then sqlite3_uri_parameter(F,P) returns the value of the P parameter if it exists or a NULL pointer if P does not appear as a query parameter on F. If P is a query parameter of F has no explicit value, then sqlite3_uri_parameter(F,P) returns a pointer to an empty string.</source>
          <target state="translated">F가 xOpen ()에 대한 플래그 매개 변수에 하나 이상의 &lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_URI&lt;/a&gt; 또는 &lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_MAIN_DB&lt;/a&gt; 비트 세트가 있고 P가 조회 매개 변수의 이름 인 경우 VFS 구현의 xOpen () 메소드에 전달 된 데이터베이스 파일 이름 포인터 인 경우 sqlite3_uri_parameter ( F, P)는 P 매개 변수가 존재하는 경우 P 매개 변수의 값을 리턴하고, P가 F에 조회 매개 변수로 나타나지 않으면 NULL 포인터를 리턴합니다. 빈 문자열에 대한 포인터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="96db4246a2920821a0342bd0eb3ee7ac297124f4" translate="yes" xml:space="preserve">
          <source>If F is the name of an sqlite database file, journal file, or WAL file passed by the SQLite core into the VFS, or if F is a database filename obtained from &lt;a href=&quot;#sqlite3_db_filename&quot;&gt;sqlite3_db_filename()&lt;/a&gt;, then sqlite3_filename_journal(F) returns the name of the corresponding rollback journal file.</source>
          <target state="translated">F가 SQLite 코어가 VFS로 전달한 sqlite 데이터베이스 파일, 저널 파일 또는 WAL 파일의 이름이거나 F가 &lt;a href=&quot;#sqlite3_db_filename&quot;&gt;sqlite3_db_filename ()&lt;/a&gt; 에서 얻은 데이터베이스 파일 이름 이면 sqlite3_filename_journal (F)은 해당 파일의 이름을 반환합니다. 롤백 저널 파일.</target>
        </trans-unit>
        <trans-unit id="c5222d2f3de406b301b9d249247c656c5b47394f" translate="yes" xml:space="preserve">
          <source>If F is the name of an sqlite database file, journal file, or WAL file passed by the SQLite core into the VFS, then sqlite3_filename_database(F) returns the name of the corresponding database file.</source>
          <target state="translated">F가 SQLite 코어에서 VFS로 전달한 sqlite 데이터베이스 파일, 저널 파일 또는 WAL 파일의 이름이면 sqlite3_filename_database (F)는 해당 데이터베이스 파일의 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="dbbd8f58db83b28c968f4a1fd0df5ad504ea9fa0" translate="yes" xml:space="preserve">
          <source>If F is the name of an sqlite database file, journal file, or WAL file that was passed by the SQLite core into the VFS, or if F is a database filename obtained from &lt;a href=&quot;#sqlite3_db_filename&quot;&gt;sqlite3_db_filename()&lt;/a&gt;, then sqlite3_filename_wal(F) returns the name of the corresponding WAL file.</source>
          <target state="translated">F가 SQLite 코어에서 VFS로 전달한 sqlite 데이터베이스 파일, 저널 파일 또는 WAL 파일의 이름이거나 F가 &lt;a href=&quot;#sqlite3_db_filename&quot;&gt;sqlite3_db_filename ()&lt;/a&gt; 에서 얻은 데이터베이스 파일 이름 이면 sqlite3_filename_wal (F)는 다음 이름을 반환합니다. 해당 WAL 파일.</target>
        </trans-unit>
        <trans-unit id="298246b211caead4a1410b71d74279a5d314bec4" translate="yes" xml:space="preserve">
          <source>If FILE is a ZIP archive rather than an SQLite Archive, the &quot;.archive&quot; command and the &quot;-A&quot; command-line option still work. This is accomplished using of the &lt;a href=&quot;zipfile&quot;&gt;zipfile&lt;/a&gt; extension. Hence, the following commands are roughly equivalent, differing only in output formatting:</source>
          <target state="translated">FILE이 SQLite 아카이브가 아닌 ZIP 아카이브 인 경우 &quot;.archive&quot;명령 및 &quot;-A&quot;명령 행 옵션이 계속 작동합니다. 이것은 &lt;a href=&quot;zipfile&quot;&gt;zip 파일&lt;/a&gt; 확장자를 사용하여 수행됩니다 . 따라서 다음 명령은 출력 형식에서만 다른 거의 동일합니다.</target>
        </trans-unit>
        <trans-unit id="d860543f88997bfbcee9b4b76e89b05bba6e3e47" translate="yes" xml:space="preserve">
          <source>If M is -1 in the initial journal header, then the number of page records that follow is computed by computing how many page records will fit in the available space of the remainder of the journal file.</source>
          <target state="translated">초기 저널 헤더에서 M이 -1이면 후속 저널 파일 수는 나머지 저널 파일의 사용 가능한 공간에 얼마나 많은 페이지 레코드가 들어갈 지 계산하여 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="9d3a57a4870ed12272e250deed6ea841c224df1b" translate="yes" xml:space="preserve">
          <source>If NORMAL locking mode is in effect for the first WAL-mode database access, then the shared-memory wal-index is created. This means that the underlying VFS must support the &quot;version 2&quot; shared-memory. If the VFS does not support shared-memory methods, then the attempt to open a database that is already in WAL mode, or the attempt convert a database into WAL mode, will fail. As long as exactly one connection is using a shared-memory wal-index, the locking mode can be changed freely between NORMAL and EXCLUSIVE. It is only when the shared-memory wal-index is omitted, when the locking mode is EXCLUSIVE prior to the first WAL-mode database access, that the locking mode is stuck in EXCLUSIVE.</source>
          <target state="translated">첫 번째 WAL 모드 데이터베이스 액세스에 NORMAL 잠금 모드가 적용되는 경우 공유 메모리 wal-index가 작성됩니다. 이는 기본 VFS가 &quot;버전 2&quot;공유 메모리를 지원해야 함을 의미합니다. VFS가 공유 메모리 방법을 지원하지 않으면 이미 WAL 모드에있는 데이터베이스를 열거 나 데이터베이스를 WAL 모드로 변환하지 못합니다. 정확히 하나의 연결이 공유 메모리 wal-index를 사용하는 한, 잠금 모드는 NORMAL과 EXCLUSIVE 사이에서 자유롭게 변경할 수 있습니다. 공유 메모리 wal-index가 생략 된 경우에만, 잠금 모드가 첫 번째 WAL 모드 데이터베이스 액세스 이전에 독점적 일 때 잠금 모드는 독점적입니다.</target>
        </trans-unit>
        <trans-unit id="084a98d24eb789b16e0f410999491d6ca6f68655" translate="yes" xml:space="preserve">
          <source>If NULL is inserted into the mode column, then the mode of the new archive entry is automatically set to either 33188 (-rw-r--r--) or 16877 (drwxr-xr-x), depending on whether or not the values specified for columns &quot;sz&quot;, &quot;data&quot; and &quot;rawdata&quot; indicate that the new entry is a directory.</source>
          <target state="translated">NULL이 모드 열에 삽입되면 새 아카이브 항목의 모드는 자동으로 33188 (-rw-r--r--) 또는 16877 (drwxr-xr-x)로 설정됩니다. &quot;sz&quot;, &quot;data&quot;및 &quot;rawdata&quot;열에 지정된 값은 새 항목이 디렉토리임을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4101f8cb88698edd15d7c951de1289b2d8eaa71c" translate="yes" xml:space="preserve">
          <source>If NULL is inserted into the mtime column, then the timestamp of the new entry is set to the current time. Otherwise, the specified value is interpreted as an integer and used as is.</source>
          <target state="translated">mtime 열에 NULL이 삽입되면 새 항목의 타임 스탬프가 현재 시간으로 설정됩니다. 그렇지 않으면 지정된 값이 정수로 해석되어 그대로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="43806989f629698fba47d7f7a7bc8a167120b2e8" translate="yes" xml:space="preserve">
          <source>If P is a polygon, then geopoly_area(P) returns the area enclosed by that polygon. If P is not a polygon, geopoly_area(P) returns NULL.</source>
          <target state="translated">P가 다각형이면 geopoly_area (P)는 해당 다각형으로 둘러싸인 영역을 반환합니다. P가 다각형이 아닌 경우 geopoly_area (P)는 NULL을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7923fadf3f55cd9b6d47a16ad18e97575f464043" translate="yes" xml:space="preserve">
          <source>If P is a polygon, then geopoly_bbox(P) returns a new polygon that is the smallest (axis-aligned) rectangle completely enclosing P. If P is not a polygon, geopoly_bbox(P) returns NULL.</source>
          <target state="translated">P가 다각형 인 경우 geopoly_bbox (P)는 P를 완전히 둘러싸는 가장 작은 (축 정렬) 사각형 인 새 다각형을 반환합니다. P가 다각형이 아닌 경우 geopoly_bbox (P)는 NULL을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="231cf86fd88561789cf32053e3b5a58ac30a1c90" translate="yes" xml:space="preserve">
          <source>If P is a polygon, then geopoly_blob(P) returns the binary encoding of that polygon as a BLOB. If P is not a polygon, geopoly_blob(P) returns NULL.</source>
          <target state="translated">P가 다각형이면 geopoly_blob (P)는 해당 다각형의 이진 인코딩을 BLOB으로 반환합니다. P가 다각형이 아닌 경우 geopoly_blob (P)는 NULL을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="85466629c4fd74bf6816a1cb264ff5557384a47f" translate="yes" xml:space="preserve">
          <source>If P is a polygon, then geopoly_contains_point(P,X,Y) returns a non-zero integer if and only if the coordinate X,Y is inside or on the boundary of the polygon P. If P is not a polygon, geopoly_contains_point(P,X,Y) returns NULL.</source>
          <target state="translated">P가 다각형 인 경우 geopoly_contains_point (P, X, Y)는 좌표 X, Y가 다각형 P의 내부 또는 경계에있는 경우에만 0이 아닌 정수를 반환합니다. P가 다각형이 아닌 경우 geopoly_contains_point ( P, X, Y)는 NULL을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="01d01cedd541548c033da5a76ae2b943d566e364" translate="yes" xml:space="preserve">
          <source>If P is a polygon, then geopoly_json(P) returns the GeoJSON representation of that polygon as a TEXT string. If P is not a polygon, geopoly_json(P) returns NULL.</source>
          <target state="translated">P가 다각형이면 geopoly_json (P)는 해당 다각형의 GeoJSON 표현을 TEXT 문자열로 반환합니다. P가 다각형이 아닌 경우 geopoly_json (P)는 NULL을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4d96f5fac84b02e3eed71829015c2301166a1102" translate="yes" xml:space="preserve">
          <source>If P is a polygon, then geopoly_svg(P,...) returns a text string which is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Scalable_Vector_Graphics&quot;&gt;Scalable Vector Graphics (SVG)&lt;/a&gt; representation of that polygon. If there is more one argument, then second and subsequent arguments are added as attributes to each SVG glyph. For example:</source>
          <target state="translated">P가 다각형이면 geopoly_svg (P, ...)는 해당 다각형의 &lt;a href=&quot;https://en.wikipedia.org/wiki/Scalable_Vector_Graphics&quot;&gt;SVG (Scalable Vector Graphics)&lt;/a&gt; 표현 인 텍스트 문자열을 반환합니다 . 하나 이상의 인수가 있으면 두 번째 이후의 인수가 각 SVG 글리프에 속성으로 추가됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8bf89c8791c7886430f52d199af4522be0892c2c" translate="yes" xml:space="preserve">
          <source>If P is not a polygon, geopoly_svg(P,...) returns NULL.</source>
          <target state="translated">P가 다각형이 아닌 경우 geopoly_svg (P, ...)는 NULL을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8d6c1d000f406140de377a0a6166c3f4f4ee6ecf" translate="yes" xml:space="preserve">
          <source>If P&amp;gt;X and K&amp;gt;X then the first M bytes of P are stored on the btree page and the remaining P-M bytes are stored on overflow pages.</source>
          <target state="translated">P&amp;gt; X 및 K&amp;gt; X이면 P의 첫 번째 M 바이트는 btree 페이지에 저장되고 나머지 PM 바이트는 오버플로 페이지에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="40c35ab59089c6d8a3b822955c4be859755a9e2b" translate="yes" xml:space="preserve">
          <source>If P&amp;gt;X and K&amp;lt;=X then the first K bytes of P are stored on the btree page and the remaining P-K bytes are stored on overflow pages.</source>
          <target state="translated">P&amp;gt; X 및 K &amp;lt;= X이면 P의 첫 번째 K 바이트는 btree 페이지에 저장되고 나머지 PK 바이트는 오버플로 페이지에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="fa33ffa92f81891eff9dffa21d7e8d38e3faa786" translate="yes" xml:space="preserve">
          <source>If P&amp;lt;=X then all P bytes of payload are stored directly on the btree page without overflow.</source>
          <target state="translated">P &amp;lt;= X이면 페이로드의 모든 P 바이트가 오버플로없이 btree 페이지에 직접 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="a69350651a4faef3f95c007babd7352f8f77d85e" translate="yes" xml:space="preserve">
          <source>If P1 and P2 are both polygons, then the geopoly_overlap(P1,P2) function returns a non-zero integer if there is any overlap between P1 and P2, or it returns zero if P1 and P2 completely disjoint. If either P1 or P2 is not a polygon, this routine returns NULL.</source>
          <target state="translated">P1과 P2가 모두 다각형 인 경우 geopoly_overlap (P1, P2) 함수는 P1과 P2간에 겹치는 부분이 있으면 0이 아닌 정수를 반환하거나 P1과 P2가 완전히 분리 된 경우 0을 반환합니다. P1 또는 P2가 다각형이 아닌 경우이 루틴은 NULL을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3222b98590b837273b0d4239ca32f6bb0d30ac83" translate="yes" xml:space="preserve">
          <source>If P1 and P2 are both polygons, then the geopoly_within(P1,P2) function returns a non-zero integer if P1 is completely contained within P2, or it returns zero if any part of P1 is outside of P2. If P1 and P2 are the same polygon, this routine returns non-zero. If either P1 or P2 is not a polygon, this routine returns NULL.</source>
          <target state="translated">P1과 P2가 모두 다각형이면 geopoly_within (P1, P2) 함수는 P1이 P2 내에 완전히 포함 된 경우 0이 아닌 정수를 반환하고 P1의 일부가 P2 외부에 있으면 0을 반환합니다. P1과 P2가 동일한 다각형이면이 루틴은 0이 아닌 값을 반환합니다. P1 또는 P2가 다각형이 아닌 경우이 루틴은 NULL을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="dd9f5db9ef38463d2501fa9dc6b70e3f4750a4f2" translate="yes" xml:space="preserve">
          <source>If P1 and P2 are both polygons, then the geopoly_within(P1,P2) function returns a non-zero integer if P2 is completely contained within P1, or it returns zero if any part of P2 is outside of P1. If P1 and P2 are the same polygon, this routine returns non-zero. If either P1 or P2 is not a polygon, this routine returns NULL.</source>
          <target state="translated">P1과 P2가 둘 다 다각형 인 경우 geopoly_within (P1, P2) 함수는 P2가 P1에 완전히 포함되어 있으면 0이 아닌 정수를 반환하거나 P2의 일부가 P1 밖에 있으면 0을 반환합니다. P1과 P2가 동일한 다각형이면이 루틴은 0이 아닌 값을 반환합니다. P1 또는 P2가 다각형이 아닌 경우이 루틴은 NULL을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4157b5ffd90247cfe9008c1ae67666efa84d2bdb" translate="yes" xml:space="preserve">
          <source>If P1 is 0, then all SQL statements become expired. If P1 is non-zero, then only the currently executing statement is expired.</source>
          <target state="translated">P1이 0이면 모든 SQL 문이 만료됩니다. P1이 0이 아닌 경우 현재 실행중인 명령문 만 만료됩니다.</target>
        </trans-unit>
        <trans-unit id="7196e8103cc1b57f49e64f9cffafd04bf56cea94" translate="yes" xml:space="preserve">
          <source>If P1 is non-zero, then the jump is taken if the database constraint-counter is zero (the one that counts deferred constraint violations). If P1 is zero, the jump is taken if the statement constraint-counter is zero (immediate foreign key constraint violations).</source>
          <target state="translated">P1이 0이 아닌 경우, 데이터베이스 제한 카운터가 0 (지연된 제한 위반을 계산하는 것) 인 경우 점프가 수행됩니다. P1이 0 인 경우 명령문 제한 조건 카운터가 0 인 경우 점프가 수행됩니다 (즉각 외래 키 제한 조건 위반).</target>
        </trans-unit>
        <trans-unit id="e76da0aa98d442426a710c17ffdd5c83f500e5de" translate="yes" xml:space="preserve">
          <source>If P1 is not zero, then it is a register that a subsequent min() or max() aggregate will set to 1 if the current row is not the minimum or maximum. The P1 register is initialized to 0 by this instruction.</source>
          <target state="translated">P1이 0이 아닌 경우 현재 행이 최소값 또는 최대 값이 아닌 경우 후속 min () 또는 max () 집계가 1로 설정되는 것은 레지스터입니다. P1 레지스터는이 명령어에 의해 0으로 초기화됩니다.</target>
        </trans-unit>
        <trans-unit id="12e05de4c2b1f6e3dffb8fed2e435034a63c1753" translate="yes" xml:space="preserve">
          <source>If P2 is 0, then SQL statements are expired immediately. If P2 is 1, then running SQL statements are allowed to continue to run to completion. The P2==1 case occurs when a CREATE INDEX or similar schema change happens that might help the statement run faster but which does not affect the correctness of operation.</source>
          <target state="translated">P2가 0이면 SQL 문이 즉시 만료됩니다. P2가 1이면 실행중인 SQL 문을 계속 실행하여 완료 할 수 있습니다. P2 == 1의 경우는 CREATE INDEX 또는 유사한 스키마 변경이 발생하면 명령문이 더 빨리 실행하는 데 도움이 될 수 있지만 조작의 정확성에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b95c82eece8cdb232cd3c969e9f714560a3483ed" translate="yes" xml:space="preserve">
          <source>If P2 is not zero, jump to instruction P2.</source>
          <target state="translated">P2가 0이 아니면 명령어 P2로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="624ae34f34a46b97a6ede8c6928e2854d808cc50" translate="yes" xml:space="preserve">
          <source>If P2 is not zero, then it is a register holding a string which is the file into which the result of vacuum should be written. When P2 is zero, the vacuum overwrites the original database.</source>
          <target state="translated">P2가 0이 아닌 경우, 진공 결과를 기록 할 파일 인 문자열을 보유하는 레지스터입니다. P2가 0이면 진공이 원본 데이터베이스를 덮어 씁니다.</target>
        </trans-unit>
        <trans-unit id="7f685a86b5e506b77efdf72c9ec8070a39f8b40d" translate="yes" xml:space="preserve">
          <source>If P2 is the SCHEMA_VERSION cookie (cookie number 1) then the internal schema version is set to P3-P5. The &quot;PRAGMA schema_version=N&quot; statement has P5 set to 1, so that the internal schema version will be different from the database schema version, resulting in a schema reset.</source>
          <target state="translated">P2가 SCHEMA_VERSION 쿠키 (쿠키 번호 1) 인 경우 내부 스키마 버전은 P3-P5로 설정됩니다. &quot;PRAGMA schema_version = N&quot;문에는 P5가 1로 설정되어 있으므로 내부 스키마 버전이 데이터베이스 스키마 버전과 다르므로 스키마가 재설정됩니다.</target>
        </trans-unit>
        <trans-unit id="4101c4124c3fe6e483990efc85814b11a364af14" translate="yes" xml:space="preserve">
          <source>If P2!=0 then the coroutine implementation immediately follows this opcode. So jump over the coroutine implementation to address P2.</source>
          <target state="translated">P2! = 0이면 코 루틴 구현은이 opcode 바로 뒤에옵니다. 따라서 코 루틴 구현을 뛰어 넘어 P2를 해결하십시오.</target>
        </trans-unit>
        <trans-unit id="95acd6cd81e68312a7b3f200adb71394407e2187" translate="yes" xml:space="preserve">
          <source>If P2==1 then no insert is performed. argv[0] is the rowid of a row to delete.</source>
          <target state="translated">P2 == 1이면 삽입이 수행되지 않습니다. argv [0]은 삭제할 행의 rowid입니다.</target>
        </trans-unit>
        <trans-unit id="4b3305a3179f27393cd2b3c6dff28468fd2e27f2" translate="yes" xml:space="preserve">
          <source>If P3 is not zero and the content of register P3 is equal to P5, then the datatype of the register P2 is converted to BLOB. The content is the same sequence of bytes, it is merely interpreted as a BLOB instead of a string, as if it had been CAST. In other words:</source>
          <target state="translated">P3이 0이 아니고 레지스터 P3의 내용이 P5와 같으면 레지스터 P2의 데이터 유형이 BLOB로 변환됩니다. 내용은 동일한 바이트 시퀀스이며 마치 마치 CAST 인 것처럼 문자열 대신 BLOB로 해석됩니다. 다시 말해:</target>
        </trans-unit>
        <trans-unit id="7b12a88585bcaf8799451da77eaddd8eae80e136" translate="yes" xml:space="preserve">
          <source>If P3 is not zero, then it is an address to jump to if an SQLITE_CORRUPT error is encountered.</source>
          <target state="translated">P3이 0이 아니면 SQLITE_CORRUPT 오류가 발생하면 바로 이동할 주소입니다.</target>
        </trans-unit>
        <trans-unit id="c8b8a297f15c969bf51cec7bd085ee38d68f8af2" translate="yes" xml:space="preserve">
          <source>If P3!=0 then the content of the P2 register is unsuitable for use in OP_Result and any OP_Result will invalidate the P2 register content. The P2 register content is invalidated by opcodes like &lt;a href=&quot;opcode#Function&quot;&gt;Function&lt;/a&gt; or by any use of another cursor pointing to the same table.</source>
          <target state="translated">P3! = 0이면 P2 레지스터의 내용이 OP_Result에서 사용하기에 적합하지 않으며 OP_Result가 P2 레지스터 내용을 무효화합니다. P2 레지스터 내용은 &lt;a href=&quot;opcode#Function&quot;&gt;Function&lt;/a&gt; 과 같은 opcode 또는 동일한 테이블을 가리키는 다른 커서를 사용하여 무효화됩니다 .</target>
        </trans-unit>
        <trans-unit id="f0e377e900f9f81e14b13484040277f239153040" translate="yes" xml:space="preserve">
          <source>If P3!=0 then this opcode is allowed to make an ephemeral pointer into the database page. That means that the content of the output register will be invalidated as soon as the cursor moves - including moves caused by other cursors that &quot;save&quot; the current cursors position in order that they can write to the same table. If P3==0 then a copy of the data is made into memory. P3!=0 is faster, but P3==0 is safer.</source>
          <target state="translated">P3! = 0이면이 opcode는 데이터베이스 페이지에 임시 포인터를 만들 수 있습니다. 즉, 커서가 동일한 테이블에 쓸 수 있도록 현재 커서 위치를 &quot;저장&quot;하는 다른 커서로 인한 이동을 포함하여 커서가 이동하자마자 출력 레지스터의 내용이 무효화됩니다. P3 == 0이면 데이터 사본이 메모리에 작성됩니다. P3! = 0이 빠르지 만 P3 == 0이 더 안전합니다.</target>
        </trans-unit>
        <trans-unit id="261dff5d4c60a753fca80ceb7a30b1ccde835d53" translate="yes" xml:space="preserve">
          <source>If P3&amp;gt;0 then P3 is a register in the root frame of this VDBE that holds the largest previously generated record number. No new record numbers are allowed to be less than this value. When this value reaches its maximum, an SQLITE_FULL error is generated. The P3 register is updated with the ' generated record number. This P3 mechanism is used to help implement the AUTOINCREMENT feature.</source>
          <target state="translated">P3&amp;gt; 0이면 P3은이 VDBE의 루트 프레임에있는 레지스터로, 이전에 생성 된 가장 큰 레코드 번호를 보유합니다. 새 레코드 번호는이 값보다 작을 수 없습니다. 이 값이 최대 값에 도달하면 SQLITE_FULL 오류가 생성됩니다. P3 레지스터는 생성 된 레코드 번호로 업데이트됩니다. 이 P3 메커니즘은 AUTOINCREMENT 기능을 구현하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b537aafa079e151774c7dbac498d69a9800ce496" translate="yes" xml:space="preserve">
          <source>If P3==0 and P4==0 then r[P2] := r[P1] IS TRUE</source>
          <target state="translated">P3 == 0이고 P4 == 0이면 r [P2] : = r [P1]은 참</target>
        </trans-unit>
        <trans-unit id="4abb01d048e9054de1718b2c97d7bca8f72ca3fd" translate="yes" xml:space="preserve">
          <source>If P3==0 and P4==1 then r[P2] := r[P1] IS NOT TRUE</source>
          <target state="translated">P3 == 0이고 P4 == 1이면 r [P2] : = r [P1]이 참이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="dffd9f3f7dcda52e1f25f401261075e7728503f3" translate="yes" xml:space="preserve">
          <source>If P3==0, then an exact count is obtained, which involves visiting every btree page of the table. But if P3 is non-zero, an estimate is returned based on the current cursor position.</source>
          <target state="translated">P3 == 0이면 테이블의 모든 btree 페이지를 방문하는 정확한 개수를 얻습니다. 그러나 P3이 0이 아니면 현재 커서 위치를 기준으로 추정값이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="e0f5592c3dfac53b5b17bcf906b1b3d9b28a160a" translate="yes" xml:space="preserve">
          <source>If P3==1 and P4==0 then r[P2] := r[P1] IS NOT FALSE</source>
          <target state="translated">P3 == 1이고 P4 == 0이면 r [P2] : = r [P1]은 거짓이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="ec92d66dd345ec321132b256dce88d1a72413c5f" translate="yes" xml:space="preserve">
          <source>If P3==1 and P4==1 then r[P2] := r[P1] IS FALSE</source>
          <target state="translated">P3 == 1이고 P4 == 1이면 r [P2] : = r [P1]은 거짓입니다.</target>
        </trans-unit>
        <trans-unit id="ec8063043e0a9cad56cc57c55e1e58a5f2b9e719" translate="yes" xml:space="preserve">
          <source>If P4 is NULL then all index fields have the affinity BLOB.</source>
          <target state="translated">P4가 NULL이면 모든 인덱스 필드는 선호도 BLOB를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="0409d4d0ae010acb4eb82b5c67e7d26a4e78a377" translate="yes" xml:space="preserve">
          <source>If P4 is not NULL then it points to a Table object. In this case either the update or pre-update hook, or both, may be invoked. The P1 cursor must have been positioned using &lt;a href=&quot;opcode#NotFound&quot;&gt;NotFound&lt;/a&gt; prior to invoking this opcode in this case. Specifically, if one is configured, the pre-update hook is invoked if P4 is not NULL. The update-hook is invoked if one is configured, P4 is not NULL, and the OPFLAG_NCHANGE flag is set in P2.</source>
          <target state="translated">P4가 NULL이 아니면 Table 객체를 가리 킵니다. 이 경우 업데이트 또는 사전 업데이트 후크 또는 둘 다 호출 될 수 있습니다. 이 경우이 opcode를 호출하기 전에 &lt;a href=&quot;opcode#NotFound&quot;&gt;NotFound를&lt;/a&gt; 사용하여 P1 커서를 배치해야합니다 . 특히 하나가 구성된 경우 P4가 NULL이 아닌 경우 사전 업데이트 후크가 호출됩니다. 업데이트 훅이 구성되고 P4가 NULL이 아니고 OPFLAG_NCHANGE 플래그가 P2에 설정된 경우 업데이트 훅이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="833039fcfc9ba1341a8bac648d6011bebc9ef640" translate="yes" xml:space="preserve">
          <source>If P4 is not null then it is an error message string.</source>
          <target state="translated">P4가 널이 아니면 오류 메시지 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="323b07c0a29678efca20be714e85be9034012831" translate="yes" xml:space="preserve">
          <source>If P4 is not zero, then it is the number of values in the unpacked key of reg(P2). In that case, P3 is the index of the first register for the unpacked key. The availability of the unpacked key can sometimes be an optimization.</source>
          <target state="translated">P4가 0이 아닌 경우 압축 해제 된 reg (P2) 키의 값 수입니다. 이 경우 P3은 압축 해제 된 키에 대한 첫 번째 레지스터의 인덱스입니다. 압축 해제 된 키의 가용성은 때때로 최적화 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7f6b94d7be2c05fd8f0bc6b7de40e344824f8d5b" translate="yes" xml:space="preserve">
          <source>If P4==0 then register P3 holds a blob constructed by &lt;a href=&quot;opcode#MakeRecord&quot;&gt;MakeRecord&lt;/a&gt;. If P4&amp;gt;0 then register P3 is the first of P4 registers that form an unpacked record.</source>
          <target state="translated">P4 == 0 인 경우 레지스터 P3은 &lt;a href=&quot;opcode#MakeRecord&quot;&gt;MakeRecord로&lt;/a&gt; 구성된 Blob을 보유합니다 . P4&amp;gt; 0이면 레지스터 P3은 압축 해제 된 레코드를 형성하는 P4 레지스터 중 첫 번째입니다.</target>
        </trans-unit>
        <trans-unit id="ea0d786e8193b3191b8e71dcd7cd40efa9daf92e" translate="yes" xml:space="preserve">
          <source>If P5 has the OPFLAG_APPEND bit set, that is a hint to the b-tree layer that this insert is likely to be an append.</source>
          <target state="translated">P5에 OPFLAG_APPEND 비트가 설정되어 있으면 b- 트리 레이어에이 힌트가 추가 될 가능성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="b63e95392a3322ead1cda4df48bfef1df78fcfb5" translate="yes" xml:space="preserve">
          <source>If P5 has the OPFLAG_NCHANGE bit set, then the change counter is incremented by this instruction. If the OPFLAG_NCHANGE bit is clear, then the change counter is unchanged.</source>
          <target state="translated">P5에 OPFLAG_NCHANGE 비트가 설정되어 있으면이 명령에 의해 변경 카운터가 증가합니다. OPFLAG_NCHANGE 비트가 지워지면 변경 카운터는 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1ea732c0486f9121ffc851f241dea7753a429516" translate="yes" xml:space="preserve">
          <source>If P5 has the OPFLAG_PERMUTE bit set, then the order of comparison is determined by the most recent &lt;a href=&quot;opcode#Permutation&quot;&gt;Permutation&lt;/a&gt; operator. If the OPFLAG_PERMUTE bit is clear, then register are compared in sequential order.</source>
          <target state="translated">P5에 OPFLAG_PERMUTE 비트가 설정되어 있으면 비교 순서는 가장 최근 &lt;a href=&quot;opcode#Permutation&quot;&gt;순열&lt;/a&gt; 연산자에 의해 결정됩니다 . OPFLAG_PERMUTE 비트가 지워지면 레지스터가 순차적으로 비교됩니다.</target>
        </trans-unit>
        <trans-unit id="d566e20d0304652ba9b826870e3331951b73f1a1" translate="yes" xml:space="preserve">
          <source>If P5 is non-zero, then recursive program invocation is enabled.</source>
          <target state="translated">P5가 0이 아닌 경우 재귀 프로그램 호출이 사용 가능합니다.</target>
        </trans-unit>
        <trans-unit id="8cc4989073012226802ebb0b0b0287d0ebbc4c24" translate="yes" xml:space="preserve">
          <source>If P5 is not zero and P4 is NULL, then everything after the &quot;:&quot; is omitted.</source>
          <target state="translated">P5가 0이 아니고 P4가 NULL이면 &quot;:&quot;뒤의 모든 항목이 생략됩니다.</target>
        </trans-unit>
        <trans-unit id="6140b6bc786ef6328163c583ea74afbbf1b0203f" translate="yes" xml:space="preserve">
          <source>If P5 is not zero, the check is done on the auxiliary database file, not the main database file.</source>
          <target state="translated">P5가 0이 아닌 경우 점검은 기본 데이터베이스 파일이 아닌 보조 데이터베이스 파일에서 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="4031180a3fa926570f402abdb205aa9088ecbac2" translate="yes" xml:space="preserve">
          <source>If P5 is not zero, then raise an SQLITE_CORRUPT_INDEX error if no matching index entry is found. This happens when running an UPDATE or DELETE statement and the index entry to be updated or deleted is not found. For some uses of &lt;a href=&quot;opcode#IdxDelete&quot;&gt;IdxDelete&lt;/a&gt; (example: the EXCEPT operator) it does not matter that no matching entry is found. For those cases, P5 is zero.</source>
          <target state="translated">P5가 0이 아닌 경우 일치하는 인덱스 항목이 없으면 SQLITE_CORRUPT_INDEX 오류가 발생합니다. 이는 UPDATE 또는 DELETE 문을 실행하고 업데이트 또는 삭제할 색인 항목을 찾을 수 없을 때 발생합니다. &lt;a href=&quot;opcode#IdxDelete&quot;&gt;IdxDelete&lt;/a&gt; (예 : EXCEPT 연산자) 를 일부 사용 하는 경우 일치하는 항목이 없어도 상관 없습니다. 이러한 경우 P5는 0입니다.</target>
        </trans-unit>
        <trans-unit id="6f3d5e8ef0f60d316b59356518575a2f176eb4d7" translate="yes" xml:space="preserve">
          <source>If P5 is positive and the jump is taken, then event counter number P5-1 in the prepared statement is incremented.</source>
          <target state="translated">P5가 양수이고 점프가 수행되면 준비된 명령문의 이벤트 카운터 번호 P5-1이 증가합니다.</target>
        </trans-unit>
        <trans-unit id="e77300f272721b16413737d1f5909b28a7b7a6ee" translate="yes" xml:space="preserve">
          <source>If P5 is set, then all released registers have their type set to MEM_Undefined so that any subsequent attempt to read the released register (before it is reinitialized) will generate an assertion fault.</source>
          <target state="translated">P5가 설정되면 해제 된 모든 레지스터의 유형이 MEM_Undefined로 설정되므로 이후에 해제 된 레지스터를 읽으려는 시도 (재 초기화 전)가 어설 션 오류를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="6d64a234f707179617701bb23c32b6ab90539344" translate="yes" xml:space="preserve">
          <source>If P5!=0 then this opcode also checks the schema cookie against P3 and the schema generation counter against P4. The cookie changes its value whenever the database schema changes. This operation is used to detect when that the cookie has changed and that the current process needs to reread the schema. If the schema cookie in P3 differs from the schema cookie in the database header or if the schema generation counter in P4 differs from the current generation counter, then an SQLITE_SCHEMA error is raised and execution halts. The sqlite3_step() wrapper function might then reprepare the statement and rerun it from the beginning.</source>
          <target state="translated">P5! = 0이면이 opcode는 P3에 대한 스키마 쿠키와 P4에 대한 스키마 생성 카운터도 검사합니다. 쿠키는 데이터베이스 스키마가 변경 될 때마다 값을 변경합니다. 이 작업은 쿠키가 변경된시기와 현재 프로세스가 스키마를 다시 읽어야하는 시점을 감지하는 데 사용됩니다. P3의 스키마 쿠키가 데이터베이스 헤더의 스키마 쿠키와 다르거 나 P4의 스키마 생성 카운터가 현재 생성 카운터와 다른 경우 SQLITE_SCHEMA 오류가 발생하고 실행이 중지됩니다. sqlite3_step () 랩퍼 함수는 명령문을 다시 준비하고 처음부터 다시 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="79b8df381ad1ae2bdf21bac462376aead762296f" translate="yes" xml:space="preserve">
          <source>If RBU is used to update a large BLOB value within a target database, it may be more efficient to store a patch or delta that can be used to modify the existing BLOB instead of an entirely new value within the RBU database. RBU allows deltas to be specified in two ways:</source>
          <target state="translated">RBU를 사용하여 대상 데이터베이스 내에서 큰 BLOB 값을 업데이트하는 경우 RBU 데이터베이스 내에서 완전히 새로운 값 대신 기존 BLOB를 수정하는 데 사용할 수있는 패치 또는 델타를 저장하는 것이 더 효율적일 수 있습니다. RBU를 사용하면 델타를 두 가지 방법으로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f32404d913415ab312a2d32bca5267050dc55433" translate="yes" xml:space="preserve">
          <source>If SQLITE_DEFAULT_WAL_SYNCHRONOUS differs from SQLITE_DEFAULT_SYNCHRONOUS, and if the application has not modified the synchronous setting for the database file using the &lt;a href=&quot;pragma#pragma_synchronous&quot;&gt;PRAGMA synchronous&lt;/a&gt; statement, then the synchronous setting is changed to value defined by SQLITE_DEFAULT_WAL_SYNCHRONOUS when the database connection switches into WAL mode for the first time. If the SQLITE_DEFAULT_WAL_SYNCHRONOUS value is not overridden at compile-time, then it will always be the same as &lt;a href=&quot;compile#default_synchronous&quot;&gt;SQLITE_DEFAULT_SYNCHRONOUS&lt;/a&gt; and so no automatic synchronous setting changes will ever occur.</source>
          <target state="translated">SQLITE_DEFAULT_WAL_SYNCHRONOUS가 SQLITE_DEFAULT_SYNCHRONOUS와 다르고 응용 프로그램이 &lt;a href=&quot;pragma#pragma_synchronous&quot;&gt;PRAGMA 동기&lt;/a&gt; 명령문을 사용하여 데이터베이스 파일의 동기 설정을 수정하지 않은 경우 데이터베이스 연결이 처음으로 WAL 모드로 전환 될 때 동기 설정은 SQLITE_DEFAULT_WAL_SYNCHRONOUS에 의해 정의 된 값으로 변경됩니다. SQLITE_DEFAULT_WAL_SYNCHRONOUS 값이 컴파일시 재정의되지 않으면 항상 &lt;a href=&quot;compile#default_synchronous&quot;&gt;SQLITE_DEFAULT_SYNCHRONOUS&lt;/a&gt; 와 동일 하므로 자동 동기 설정 변경이 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="35daf76480440bed2a0456819e4a2256b8e77c1e" translate="yes" xml:space="preserve">
          <source>If SQLITE_NULLEQ is set in P5 then the result of comparison is always either true or false and is never NULL. If both operands are NULL then the result of comparison is true. If either operand is NULL then the result is false. If neither operand is NULL the result is the same as it would be if the SQLITE_NULLEQ flag were omitted from P5.</source>
          <target state="translated">SQLITE_NULLEQ가 P5에 설정되면 비교 결과는 항상 true 또는 false이며 절대 NULL이 아닙니다. 두 피연산자가 모두 NULL이면 비교 결과는 true입니다. 피연산자 중 하나가 NULL이면 결과는 false입니다. 피연산자가 NULL이 아니면 결과는 SQLITE_NULLEQ 플래그가 P5에서 생략 된 경우와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="b5e1e68a469214facd1d655d6dbff18739ace55a" translate="yes" xml:space="preserve">
          <source>If SQLite discovers that the sqlite_sequence table has any other format, it returns the SQLITE_CORRUPT_SEQUENCE error.</source>
          <target state="translated">SQLite가 sqlite_sequence 테이블에 다른 형식이 있음을 발견하면 SQLITE_CORRUPT_SEQUENCE 오류를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="015569a0e55d69ecf2d3dec3d6ece8f0bde61846" translate="yes" xml:space="preserve">
          <source>If SQLite ever returns SQLITE_MISUSE from any interface, that means that the application is incorrectly coded and needs to be fixed. Do not ship an application that sometimes returns SQLITE_MISUSE from a standard SQLite interface because that application contains potentially serious bugs.</source>
          <target state="translated">SQLite가 인터페이스에서 SQLITE_MISUSE를 반환하면 응용 프로그램이 잘못 코딩되어 수정되어야 함을 의미합니다. 표준 SQLite 인터페이스에서 SQLITE_MISUSE를 반환하는 응용 프로그램은 해당 응용 프로그램에 잠재적으로 심각한 버그가있을 수 있으므로 제공하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="60b69a270887c8a40e3999f62767f4e29079be3d" translate="yes" xml:space="preserve">
          <source>If SQLite has been compiled with the &lt;a href=&quot;compile#debug&quot;&gt;SQLITE_DEBUG&lt;/a&gt; compile-time option, then the parser_trace pragma can be used to turn on tracing for the SQL parser used internally by SQLite. This feature is used for debugging SQLite itself.</source>
          <target state="translated">SQLite가 &lt;a href=&quot;compile#debug&quot;&gt;SQLITE_DEBUG&lt;/a&gt; 컴파일 타임 옵션 으로 컴파일 된 경우 parser_trace pragma를 사용하여 SQLite가 내부적으로 사용하는 SQL 파서에 대한 추적을 설정할 수 있습니다. 이 기능은 SQLite 자체를 디버깅하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3e93855bd0fdb13d2772a4cf88fefeb516093bf0" translate="yes" xml:space="preserve">
          <source>If SQLite has been compiled with the &lt;a href=&quot;compile#debug&quot;&gt;SQLITE_DEBUG&lt;/a&gt; compile-time option, then the vdbe_addoptrace pragma can be used to cause a complete VDBE opcodes to be displayed as they are created during code generation. This feature is used for debugging SQLite itself. See the &lt;a href=&quot;vdbe#trace&quot;&gt;VDBE documentation&lt;/a&gt; for more information.</source>
          <target state="translated">SQLite가 &lt;a href=&quot;compile#debug&quot;&gt;SQLITE_DEBUG&lt;/a&gt; 컴파일 타임 옵션 으로 컴파일 된 경우 vdbe_addoptrace pragma를 사용하여 코드 생성 중에 완전한 VDBE opcode가 작성 될 때 표시 될 수 있습니다. 이 기능은 SQLite 자체를 디버깅하는 데 사용됩니다. 자세한 내용은 &lt;a href=&quot;vdbe#trace&quot;&gt;VDBE 설명서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ed1cfc408ef29e4c5084ed94c91a1453ae1e7d68" translate="yes" xml:space="preserve">
          <source>If SQLite has been compiled with the &lt;a href=&quot;compile#debug&quot;&gt;SQLITE_DEBUG&lt;/a&gt; compile-time option, then the vdbe_debug pragma is a shorthand for three other debug-only pragmas: vdbe_addoptrace, vdbe_listing, and vdbe_trace. This feature is used for debugging SQLite itself. See the &lt;a href=&quot;vdbe#trace&quot;&gt;VDBE documentation&lt;/a&gt; for more information.</source>
          <target state="translated">SQLite가 &lt;a href=&quot;compile#debug&quot;&gt;SQLITE_DEBUG&lt;/a&gt; 컴파일 타임 옵션 으로 컴파일 된 경우 , vdbe_debug pragma는 vdbe_addoptrace, vdbe_listing 및 vdbe_trace의 세 가지 다른 디버그 전용 pragma의 약어입니다. 이 기능은 SQLite 자체를 디버깅하는 데 사용됩니다. 자세한 내용은 &lt;a href=&quot;vdbe#trace&quot;&gt;VDBE 설명서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1e32eb3dd2a790d29e0b70974d295922571079df" translate="yes" xml:space="preserve">
          <source>If SQLite has been compiled with the &lt;a href=&quot;compile#debug&quot;&gt;SQLITE_DEBUG&lt;/a&gt; compile-time option, then the vdbe_listing pragma can be used to cause a complete listing of the virtual machine opcodes to appear on standard output as each statement is evaluated. With listing is on, the entire content of a program is printed just prior to beginning execution. The statement executes normally after the listing is printed. This feature is used for debugging SQLite itself. See the &lt;a href=&quot;vdbe#trace&quot;&gt;VDBE documentation&lt;/a&gt; for more information.</source>
          <target state="translated">SQLite가 &lt;a href=&quot;compile#debug&quot;&gt;SQLITE_DEBUG&lt;/a&gt; 컴파일 타임 옵션 으로 컴파일 된 경우 , vdbe_listing pragma를 사용하여 각 명령문이 평가 될 때 가상 머신 opcode의 전체 목록을 표준 출력에 표시 할 수 있습니다. 리스팅이 켜져 있으면 프로그램의 전체 내용이 실행을 시작하기 직전에 인쇄됩니다. 목록은 인쇄 된 후에 정상적으로 실행됩니다. 이 기능은 SQLite 자체를 디버깅하는 데 사용됩니다. 자세한 내용은 &lt;a href=&quot;vdbe#trace&quot;&gt;VDBE 설명서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="cefc8fedb890f68ef15ff1358f045bdc3b72901b" translate="yes" xml:space="preserve">
          <source>If SQLite has been compiled with the &lt;a href=&quot;compile#debug&quot;&gt;SQLITE_DEBUG&lt;/a&gt; compile-time option, then the vdbe_trace pragma can be used to cause virtual machine opcodes to be printed on standard output as they are evaluated. This feature is used for debugging SQLite. See the &lt;a href=&quot;vdbe#trace&quot;&gt;VDBE documentation&lt;/a&gt; for more information.</source>
          <target state="translated">SQLite가 &lt;a href=&quot;compile#debug&quot;&gt;SQLITE_DEBUG&lt;/a&gt; 컴파일 타임 옵션 으로 컴파일 된 경우 vdbe_trace pragma를 사용하여 가상 머신 opcode가 평가 될 때 표준 출력에 인쇄되도록 할 수 있습니다. 이 기능은 SQLite를 디버깅하는 데 사용됩니다. 자세한 내용은 &lt;a href=&quot;vdbe#trace&quot;&gt;VDBE 설명서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5153e53873f4aff61d1f8d367f68545fed69c0e7" translate="yes" xml:space="preserve">
          <source>If SQLite has not been initialized using &lt;a href=&quot;#sqlite3_initialize&quot;&gt;sqlite3_initialize()&lt;/a&gt; prior to invoking sqlite3_complete16() then sqlite3_initialize() is invoked automatically by sqlite3_complete16(). If that initialization fails, then the return value from sqlite3_complete16() will be non-zero regardless of whether or not the input SQL is complete.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_initialize&quot;&gt;sqlite3_complete16 ()&lt;/a&gt; 을 호출하기 전에 sqlite3_initialize ()를 사용하여 SQLite를 초기화하지 않은 경우 sqlite3_initialize ()는 sqlite3_complete16 ()에 의해 자동으로 호출됩니다. 초기화에 실패하면 sqlite3_complete16 ()의 리턴 값은 입력 SQL의 완료 여부에 관계없이 0이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="3c965f677e7c54456f9a69dea9325df1caaec3d9" translate="yes" xml:space="preserve">
          <source>If SQLite has not been initialized using &lt;a href=&quot;initialize&quot;&gt;sqlite3_initialize()&lt;/a&gt; prior to invoking sqlite3_complete16() then sqlite3_initialize() is invoked automatically by sqlite3_complete16(). If that initialization fails, then the return value from sqlite3_complete16() will be non-zero regardless of whether or not the input SQL is complete.</source>
          <target state="translated">&lt;a href=&quot;initialize&quot;&gt;sqlite3_complete16 ()&lt;/a&gt; 을 호출하기 전에 sqlite3_initialize ()를 사용하여 SQLite를 초기화하지 않은 경우 sqlite3_initialize ()는 sqlite3_complete16 ()에 의해 자동으로 호출됩니다. 초기화에 실패하면 sqlite3_complete16 ()의 리턴 값은 입력 SQL의 완료 여부에 관계없이 0이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="6d6bbb3059e334920732ba9450708b663008dcc7" translate="yes" xml:space="preserve">
          <source>If SQLite is built with the &lt;a href=&quot;compile#enable_update_delete_limit&quot;&gt;SQLITE_ENABLE_UPDATE_DELETE_LIMIT&lt;/a&gt; compile-time option then the syntax of the UPDATE statement is extended with optional ORDER BY and LIMIT clauses as follows:</source>
          <target state="translated">SQLite가 &lt;a href=&quot;compile#enable_update_delete_limit&quot;&gt;SQLITE_ENABLE_UPDATE_DELETE_LIMIT&lt;/a&gt; 컴파일 시간 옵션으로 빌드 된 경우 UPDATE 문의 구문은 다음과 같이 선택적 ORDER BY 및 LIMIT 절로 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="44ff2e47de1d4a52252bdf0898ff4b68826c3d7a" translate="yes" xml:space="preserve">
          <source>If SQLite is compiled for Windows with the &lt;a href=&quot;compile#win32_malloc&quot;&gt;SQLITE_WIN32_MALLOC&lt;/a&gt; compile-time option, then a different, thin wrapper is used around HeapAlloc(), HeapReAlloc(), and HeapFree(). The thin wrapper uses the configured SQLite heap, which will be different from the default process heap if the &lt;a href=&quot;compile#win32_heap_create&quot;&gt;SQLITE_WIN32_HEAP_CREATE&lt;/a&gt; compile-time option is used. In addition, when an allocation is made or freed, HeapValidate() will be called if SQLite is compiled with assert() enabled and the &lt;a href=&quot;compile#win32_malloc_validate&quot;&gt;SQLITE_WIN32_MALLOC_VALIDATE&lt;/a&gt; compile-time option.</source>
          <target state="translated">SQLite가 &lt;a href=&quot;compile#win32_malloc&quot;&gt;SQLITE_WIN32_MALLOC&lt;/a&gt; 컴파일 타임 옵션으로 Windows 용으로 컴파일 된 경우 HeapAlloc (), HeapReAlloc () 및 HeapFree () 주위에 다른 얇은 래퍼가 사용됩니다. 씬 랩퍼는 구성된 SQLite 힙을 사용하며, &lt;a href=&quot;compile#win32_heap_create&quot;&gt;SQLITE_WIN32_HEAP_CREATE&lt;/a&gt; 컴파일 타임 옵션이 사용되는 경우 기본 프로세스 힙과 다릅니다 . 또한 할당이 이루어 지거나 해제되면 SQLite가 assert ()를 사용하도록 설정되고 &lt;a href=&quot;compile#win32_malloc_validate&quot;&gt;SQLITE_WIN32_MALLOC_VALIDATE&lt;/a&gt; 컴파일 시간 옵션 이 컴파일 된 경우 HeapValidate ()가 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="517e1af932491e30c32e06c4fd9e534300edd652" translate="yes" xml:space="preserve">
          <source>If SQLite is compiled with &lt;a href=&quot;compile#enable_memsys3&quot;&gt;SQLITE_ENABLE_MEMSYS3&lt;/a&gt; then another zero-malloc memory allocator, similar to memsys5, is included in the source tree. The memsys3 allocator, like memsys5, must be activated by a call to &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config&lt;/a&gt;(&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigheap&quot;&gt;SQLITE_CONFIG_HEAP&lt;/a&gt;,...). Memsys3 uses the memory buffer supplied as its source for all memory allocations. The difference between memsys3 and memsys5 is that memsys3 uses a different memory allocation algorithm that seems to work well in practice, but which does not provide mathematical guarantees against memory fragmentation and breakdown. Memsys3 was a predecessor to memsys5. The SQLite developers now believe that memsys5 is superior to memsys3 and that all applications that need a zero-malloc memory allocator should use memsys5 in preference to memsys3. Memsys3 is considered both experimental and deprecated and will likely be removed from the source tree in a future release of SQLite.</source>
          <target state="translated">SQLite가 &lt;a href=&quot;compile#enable_memsys3&quot;&gt;SQLITE_ENABLE_MEMSYS3&lt;/a&gt; 으로 컴파일되면 memsys5 와 유사한 또 다른 zero-malloc 메모리 할당자가 소스 트리에 포함됩니다. memsys5와 같은 memsys3 할당자는 &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config를&lt;/a&gt; 호출하여 활성화해야합니다 ( &lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigheap&quot;&gt;SQLITE_CONFIG_HEAP&lt;/a&gt;, ...). Memsys3는 모든 메모리 할당을 위해 소스로 제공된 메모리 버퍼를 사용합니다. memsys3와 memsys5의 차이점은 memsys3가 실제로는 잘 작동하는 것처럼 보이지만 메모리 조각화 및 분석에 대해 수학적인 보장을 제공하지 않는 다른 메모리 할당 알고리즘을 사용한다는 것입니다. Memsys3은 memsys5의 전신입니다. SQLite 개발자는 이제 memsys5가 memsys3보다 우수하며, 말로 메모리 할당자가 필요한 모든 응용 프로그램은 memsys3보다 memsys5를 사용해야한다고 생각합니다. Memsys3는 실험용 및 폐기 된 것으로 간주되며 향후 SQLite 릴리스에서 소스 트리에서 제거 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a20ff9c15584045a4ca98d16d24d41c5ba218767" translate="yes" xml:space="preserve">
          <source>If SQLite is compiled with the &lt;a href=&quot;compile#enable_update_delete_limit&quot;&gt;SQLITE_ENABLE_UPDATE_DELETE_LIMIT&lt;/a&gt; compile-time option, then the syntax of the DELETE statement is extended by the addition of optional ORDER BY and LIMIT clauses:</source>
          <target state="translated">SQLite가 &lt;a href=&quot;compile#enable_update_delete_limit&quot;&gt;SQLITE_ENABLE_UPDATE_DELETE_LIMIT&lt;/a&gt; 컴파일 시간 옵션으로 컴파일 된 경우 선택적 ORDER BY 및 LIMIT 절을 추가하여 DELETE 문의 구문이 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="0e66b56024c7560826b0783e73206c696c2fa3db" translate="yes" xml:space="preserve">
          <source>If SQLite is compiled with the &lt;a href=&quot;compile#memdebug&quot;&gt;SQLITE_MEMDEBUG&lt;/a&gt; compile-time option, then a different, heavy wrapper is used around system malloc(), realloc(), and free(). The heavy wrapper allocates around 100 bytes of extra space with each allocation. The extra space is used to place sentinel values at both ends of the allocation returned to the SQLite core. When an allocation is freed, these sentinels are checked to make sure the SQLite core did not overrun the buffer in either direction. When the system library is GLIBC, the heavy wrapper also makes use of the GNU backtrace() function to examine the stack and record the ancestor functions of the malloc() call. When running the SQLite test suite, the heavy wrapper also records the name of the current test case. These latter two features are useful for tracking down the source of memory leaks detected by the test suite.</source>
          <target state="translated">SQLite가 &lt;a href=&quot;compile#memdebug&quot;&gt; SQLITE_MEMDEBUG&lt;/a&gt;컴파일 타임 옵션 다음 시스템 malloc (), realloc () 및 free () 주위에 다른 무거운 래퍼가 사용됩니다. 무거운 래퍼는 각 할당마다 약 100 바이트의 추가 공간을 할당합니다. 여분의 공간은 SQLite 코어에 반환 된 할당의 양쪽 끝에 센티넬 값을 배치하는 데 사용됩니다. 할당이 해제되면이 센티넬을 검사하여 SQLite 코어가 버퍼를 어느 방향 으로든 오버런하지 않았는지 확인합니다. 시스템 라이브러리가 GLIBC 인 경우, 무거운 래퍼는 GNU backtrace () 함수를 사용하여 스택을 검사하고 malloc () 호출의 조상 함수를 기록합니다. SQLite 테스트 스위트를 실행할 때 무거운 래퍼도 현재 테스트 케이스의 이름을 기록합니다. 이 두 가지 기능은 테스트 스위트가 감지 한 메모리 누수 소스를 추적하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="bdb5f255b340a7c8ea5f9ec1a27271eaa4afef49" translate="yes" xml:space="preserve">
          <source>If SQLite is compiled with the &lt;a href=&quot;compile#zero_malloc&quot;&gt;SQLITE_ZERO_MALLOC&lt;/a&gt; option, then the &lt;a href=&quot;malloc#defaultalloc&quot;&gt;default memory allocator&lt;/a&gt; is omitted and replaced by a stub memory allocator that never allocates any memory. Any calls to the stub memory allocator will report back that no memory is available.</source>
          <target state="translated">SQLite가 &lt;a href=&quot;compile#zero_malloc&quot;&gt;SQLITE_ZERO_MALLOC&lt;/a&gt; 옵션으로 컴파일 된 경우 , &lt;a href=&quot;malloc#defaultalloc&quot;&gt;기본 메모리 할당자는&lt;/a&gt; 생략되고 메모리를 할당하지 않는 스텁 메모리 할당 자로 대체됩니다. 스텁 메모리 할당 자에 대한 모든 호출은 사용 가능한 메모리가 없음을 다시보고합니다.</target>
        </trans-unit>
        <trans-unit id="a81969949fdea82f85b5652d9dfeed54c87f7d37" translate="yes" xml:space="preserve">
          <source>If SQLite is compiled with the SQLITE_MUTEX_APPDEF preprocessor macro defined (with &quot;-DSQLITE_MUTEX_APPDEF=1&quot;), then no mutex implementation is included with the library. In this case the application must supply a custom mutex implementation using the &lt;a href=&quot;#sqliteconfigmutex&quot;&gt;SQLITE_CONFIG_MUTEX&lt;/a&gt; option of the sqlite3_config() function before calling sqlite3_initialize() or any other public sqlite3_ function that calls sqlite3_initialize().</source>
          <target state="translated">SQLite가 SQLITE_MUTEX_APPDEF 프리 프로세서 매크로가 정의 된 ( &quot;-DSQLITE_MUTEX_APPDEF = 1&quot;로) 컴파일 된 경우 뮤텍스 구현이 라이브러리에 포함되지 않습니다. 이 경우 응용 프로그램은 sqlite3_initialize () 또는 sqlite3_initialize ()를 호출하는 다른 공개 sqlite3_ 함수를 호출하기 전에 sqlite3_config () 함수 의 &lt;a href=&quot;#sqliteconfigmutex&quot;&gt;SQLITE_CONFIG_MUTEX&lt;/a&gt; 옵션을 사용하여 사용자 정의 mutex 구현을 제공해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3612fbeb4e5912d3519c058afb830d2ca96819e8" translate="yes" xml:space="preserve">
          <source>If SQLite is compiled with the SQLITE_MUTEX_APPDEF preprocessor macro defined (with &quot;-DSQLITE_MUTEX_APPDEF=1&quot;), then no mutex implementation is included with the library. In this case the application must supply a custom mutex implementation using the &lt;a href=&quot;c_config_covering_index_scan#sqliteconfigmutex&quot;&gt;SQLITE_CONFIG_MUTEX&lt;/a&gt; option of the sqlite3_config() function before calling sqlite3_initialize() or any other public sqlite3_ function that calls sqlite3_initialize().</source>
          <target state="translated">SQLite가 SQLITE_MUTEX_APPDEF 프리 프로세서 매크로가 정의 된 ( &quot;-DSQLITE_MUTEX_APPDEF = 1&quot;로) 컴파일 된 경우 뮤텍스 구현이 라이브러리에 포함되지 않습니다. 이 경우 응용 프로그램은 sqlite3_initialize () 또는 sqlite3_initialize ()를 호출하는 다른 공개 sqlite3_ 함수를 호출하기 전에 sqlite3_config () 함수 의 &lt;a href=&quot;c_config_covering_index_scan#sqliteconfigmutex&quot;&gt;SQLITE_CONFIG_MUTEX&lt;/a&gt; 옵션을 사용하여 사용자 정의 mutex 구현을 제공해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3e4d7ea4d24bcad6503f112a75cb8cf3b594762c" translate="yes" xml:space="preserve">
          <source>If SQLite is compiled with the THREADSAFE preprocessor macro set to 1, then it is safe to use SQLite from two or more threads of the same process at the same time. But each thread should have its own &lt;b&gt;sqlite*&lt;/b&gt; pointer returned from &lt;b&gt;sqlite_open&lt;/b&gt;. It is never safe for two or more threads to access the same &lt;b&gt;sqlite*&lt;/b&gt; pointer at the same time.</source>
          <target state="translated">THREADSAFE 전 처리기 매크로를 1로 설정하여 SQLite를 컴파일하면 같은 프로세스의 두 개 이상의 스레드에서 동시에 SQLite를 사용하는 것이 안전합니다. 그러나 각 스레드에는 &lt;b&gt;sqlite_open&lt;/b&gt; 에서 반환 된 자체 &lt;b&gt;sqlite *&lt;/b&gt; 포인터가 &lt;b&gt;있어야&lt;/b&gt; 합니다. 둘 이상의 스레드가 동일한 &lt;b&gt;sqlite *&lt;/b&gt; 포인터에 동시에 액세스하는 것은 결코 안전하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="710dfc358000c04c6f29b5a8b9d1e58f09170c01" translate="yes" xml:space="preserve">
          <source>If SQLite is working with multiple databases at the same time (using the &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt; command) then each database has its own rollback journal. But there is also a separate aggregate journal called the &lt;em&gt;master journal&lt;/em&gt;. The master journal does not contain page data used for rolling back changes. Instead the master journal contains the names of the individual database rollback journals for each of the ATTACHed databases. Each of the individual database rollback journals also contain the name of the master journal. If there are no ATTACHed databases (or if none of the ATTACHed database is participating in the current transaction) no master journal is created and the normal rollback journal contains an empty string in the place normally reserved for recording the name of the master journal.</source>
          <target state="translated">SQLite가 동시에 여러 데이터베이스에서 작업하는 경우 ( &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt; 명령 사용) 각 데이터베이스에는 고유 한 롤백 저널이 있습니다. 그러나 &lt;em&gt;마스터 저널&lt;/em&gt; 이라는 별도의 집계 저널도 있습니다 . 마스터 분개에는 변경 사항을 롤백하는 데 사용되는 페이지 데이터가 없습니다. 대신 마스터 저널에는 각 첨부 된 데이터베이스에 대한 개별 데이터베이스 롤백 저널의 이름이 포함됩니다. 각 개별 데이터베이스 롤백 저널에는 마스터 저널의 이름도 포함됩니다. 첨부 된 데이터베이스가 없거나 (또는 ​​현재 트랜잭션에 참여하는 첨부 된 데이터베이스가없는 경우) 마스터 저널이 작성되지 않으며 일반 롤백 저널에는 일반적으로 마스터 저널의 이름을 기록하기 위해 예약 된 곳에 빈 문자열이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="e3d682297850435cbed4a4f23333530d1946cfd2" translate="yes" xml:space="preserve">
          <source>If SQLite is working with multiple databases at the same time (using the &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt; command) then each database has its own rollback journal. But there is also a separate aggregate journal called the &lt;em&gt;super-journal&lt;/em&gt;. The super-journal does not contain page data used for rolling back changes. Instead the super-journal contains the names of the individual database rollback journals for each of the ATTACHed databases. Each of the individual database rollback journals also contain the name of the super-journal. If there are no ATTACHed databases (or if none of the ATTACHed database is participating in the current transaction) no super-journal is created and the normal rollback journal contains an empty string in the place normally reserved for recording the name of the super-journal.</source>
          <target state="translated">SQLite가 동시에 여러 데이터베이스에서 작업하는 경우 ( &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt; 명령 사용) 각 데이터베이스에는 자체 롤백 저널이 있습니다. 그러나 &lt;em&gt;super-journal&lt;/em&gt; 이라는 별도의 집계 저널도 있습니다 . 수퍼 저널에는 변경 사항을 롤백하는 데 사용되는 페이지 데이터가 포함되어 있지 않습니다. 대신 수퍼 저널에는 첨부 된 각 데이터베이스에 대한 개별 데이터베이스 롤백 저널의 이름이 포함됩니다. 각 개별 데이터베이스 롤백 저널에는 수퍼 저널의 이름도 포함됩니다. ATTACH 된 데이터베이스가없는 경우 (또는 ATTACH 된 데이터베이스가 현재 트랜잭션에 참여하지 않는 경우) 수퍼 저널이 생성되지 않고 일반 롤백 저널은 수퍼 저널의 이름을 기록하기 위해 일반적으로 예약 된 위치에 빈 문자열을 포함합니다. .</target>
        </trans-unit>
        <trans-unit id="5896c61835dd6f9792c99d8e8f334dcf5e7f29e5" translate="yes" xml:space="preserve">
          <source>If SQLite needs a page-cache entry that is larger than &quot;sz&quot; bytes or if it needs more than N entries, it falls back to using the general-purpose memory allocator.</source>
          <target state="translated">SQLite에 &quot;sz&quot;바이트보다 큰 페이지 캐시 항목이 필요하거나 N 개보다 많은 항목이 필요한 경우 범용 메모리 할당자를 사용하는 것으로 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="4aa68767277ee1001967243f3227f1d8f761e4eb" translate="yes" xml:space="preserve">
          <source>If SQLite recognizes a table as a shadow table, and if the &lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigdefensive&quot;&gt;SQLITE_DBCONFIG_DEFENSIVE&lt;/a&gt; flag is set, then the shadow table is read-only for ordinary SQL statements. The shadow table can still be written, but only by SQL that is invoked from within one of the methods of some virtual table implementation.</source>
          <target state="translated">SQLite가 테이블을 새도우 테이블로 인식하고 &lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigdefensive&quot;&gt;SQLITE_DBCONFIG_DEFENSIVE&lt;/a&gt; 플래그가 설정된 경우 새도우 테이블은 일반 SQL 문에 대해 읽기 전용입니다. 새도우 테이블은 여전히 ​​쓸 수 있지만 일부 가상 테이블 구현의 메소드 중 하나에서 호출 된 SQL에 의해서만 가능합니다.</target>
        </trans-unit>
        <trans-unit id="c334cbe953204cf334f3f0300d4576308ac4cfdc" translate="yes" xml:space="preserve">
          <source>If URI filenames are recognized when the database connection is originally opened, then URI filenames will also be recognized on &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt; statements. Similarly, if URI filenames are not recognized when the database connection is first opened, they will not be recognized by &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt;.</source>
          <target state="translated">데이터베이스 연결이 처음 열렸을 때 URI 파일 이름이 인식되면 &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt; 문 에서도 URI 파일 이름이 인식됩니다 . 마찬가지로 데이터베이스 연결을 처음 열 때 URI 파일 이름이 인식되지 않으면 &lt;a href=&quot;lang_attach&quot;&gt;ATTACH에서&lt;/a&gt; 인식하지 못합니다 .</target>
        </trans-unit>
        <trans-unit id="20f2ccdd4e7b5b66dd50ba0f757be7113d0c9526" translate="yes" xml:space="preserve">
          <source>If W is AND-connected terms and X is OR-connected terms and if any term of W appears as a term of X, then the partial index is usable.</source>
          <target state="translated">W가 AND로 연결된 항이고 X가 OR로 연결된 항이고 W의 항이 X의 항으로 나타나면 부분 인덱스를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5ee5624c5ac84e77c145fe142470f12976a4d91a" translate="yes" xml:space="preserve">
          <source>If X is a memory allocation previously obtained from sqlite3_malloc(), sqlite3_malloc64(), sqlite3_realloc(), or sqlite3_realloc64(), then sqlite3_msize(X) returns the size of that memory allocation in bytes. The value returned by sqlite3_msize(X) might be larger than the number of bytes requested when X was allocated. If X is a NULL pointer then sqlite3_msize(X) returns zero. If X points to something that is not the beginning of memory allocation, or if it points to a formerly valid memory allocation that has now been freed, then the behavior of sqlite3_msize(X) is undefined and possibly harmful.</source>
          <target state="translated">X가 sqlite3_malloc (), sqlite3_malloc64 (), sqlite3_realloc () 또는 sqlite3_realloc64 ()에서 이전에 얻은 메모리 할당 인 경우 sqlite3_msize (X)는 해당 메모리 할당 크기를 바이트 단위로 리턴합니다. sqlite3_msize (X)에 의해 리턴 된 값은 X가 할당 될 때 요청 된 바이트 수보다 클 수 있습니다. X가 NULL 포인터이면 sqlite3_msize (X)는 0을 반환합니다. X가 메모리 할당의 시작이 아닌 것을 가리 키거나 현재 해제 된 이전의 유효한 메모리 할당을 가리키는 경우 sqlite3_msize (X)의 동작은 정의되지 않았으며 유해 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1b66964d31ddb28c71bf027a0d38468bda02bb0" translate="yes" xml:space="preserve">
          <source>If X is greater than or equal to zero, go back to step 3.</source>
          <target state="translated">X가 0보다 크거나 같은 경우 3 단계로 돌아가십시오.</target>
        </trans-unit>
        <trans-unit id="b3fb68847c867d6e5aec8b5513dabb7e57278079" translate="yes" xml:space="preserve">
          <source>If X is non-zero, then the virtual table implementation guarantees that if &lt;a href=&quot;../vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt; returns &lt;a href=&quot;../rescode#constraint&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt;, it will do so before any modifications to internal or persistent data structures have been made. If the &lt;a href=&quot;../lang_conflict&quot;&gt;ON CONFLICT&lt;/a&gt; mode is ABORT, FAIL, IGNORE or ROLLBACK, SQLite is able to roll back a statement or database transaction, and abandon or continue processing the current SQL statement as appropriate. If the ON CONFLICT mode is REPLACE and the &lt;a href=&quot;../vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt; method returns &lt;a href=&quot;../rescode#constraint&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt;, SQLite handles this as if the ON CONFLICT mode had been ABORT.</source>
          <target state="translated">X가 0이 아닌 경우 가상 테이블 구현은 &lt;a href=&quot;../vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt; 가 &lt;a href=&quot;../rescode#constraint&quot;&gt;SQLITE_CONSTRAINT를&lt;/a&gt; 리턴 하면 내부 또는 지속적 데이터 구조를 수정하기 전에이를 수행함을 보장합니다 . 는 IF &lt;a href=&quot;../lang_conflict&quot;&gt;ON 충돌&lt;/a&gt; 모드가 ABORT, FAIL이고, 무시하거나 ROLLBACK은, SQLite는 성명 또는 데이터베이스 트랜잭션을 롤백하고 포기 또는 적절한 현재 SQL 문을 계속 처리 할 수 있습니다. ON CONFLICT 모드가 REPLACE이고 &lt;a href=&quot;../vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt; 메소드가 &lt;a href=&quot;../rescode#constraint&quot;&gt;SQLITE_CONSTRAINT를&lt;/a&gt; 리턴 하면 SQLite는 ON CONFLICT 모드가 ABORT 인 것처럼이를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="c0b29678a870c29e379cb0f8c76e93d5c6f694fd" translate="yes" xml:space="preserve">
          <source>If X is non-zero, then the virtual table implementation guarantees that if &lt;a href=&quot;vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt; returns &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt;, it will do so before any modifications to internal or persistent data structures have been made. If the &lt;a href=&quot;lang_conflict&quot;&gt;ON CONFLICT&lt;/a&gt; mode is ABORT, FAIL, IGNORE or ROLLBACK, SQLite is able to roll back a statement or database transaction, and abandon or continue processing the current SQL statement as appropriate. If the ON CONFLICT mode is REPLACE and the &lt;a href=&quot;vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt; method returns &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_CONSTRAINT&lt;/a&gt;, SQLite handles this as if the ON CONFLICT mode had been ABORT.</source>
          <target state="translated">X가 0이 아닌 경우 가상 테이블 구현은 &lt;a href=&quot;vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt; 가 &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_CONSTRAINT를&lt;/a&gt; 리턴 하면 내부 또는 지속적 데이터 구조를 수정하기 전에이를 수행함을 보장합니다 . 는 IF &lt;a href=&quot;lang_conflict&quot;&gt;ON 충돌&lt;/a&gt; 모드가 ABORT, FAIL이고, 무시하거나 ROLLBACK은, SQLite는 성명 또는 데이터베이스 트랜잭션을 롤백하고 포기 또는 적절한 현재 SQL 문을 계속 처리 할 수 있습니다. ON CONFLICT 모드가 REPLACE이고 &lt;a href=&quot;vtab#xupdate&quot;&gt;xUpdate&lt;/a&gt; 메소드가 &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_CONSTRAINT를&lt;/a&gt; 리턴 하면 SQLite는 ON CONFLICT 모드가 ABORT 인 것처럼이를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="30772a96ac944f5d807fde7afed09facbb4c72a3" translate="yes" xml:space="preserve">
          <source>If X is the name of a rollback or WAL-mode journal file that is passed into the xOpen method of &lt;a href=&quot;#sqlite3_vfs&quot;&gt;sqlite3_vfs&lt;/a&gt;, then sqlite3_database_file_object(X) returns a pointer to the &lt;a href=&quot;#sqlite3_file&quot;&gt;sqlite3_file&lt;/a&gt; object that represents the main database file.</source>
          <target state="translated">X가 &lt;a href=&quot;#sqlite3_vfs&quot;&gt;sqlite3_vfs&lt;/a&gt; 의 xOpen 메소드로 전달되는 롤백 또는 WAL 모드 저널 파일의 이름 이면 sqlite3_database_file_object (X)는 기본 데이터베이스 파일을 나타내는 &lt;a href=&quot;#sqlite3_file&quot;&gt;sqlite3_file&lt;/a&gt; 객체에 대한 포인터를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="90405f680f9fd6c0b9fd6e8fd54aba076154778a" translate="yes" xml:space="preserve">
          <source>If X starts a transaction that will initially only read but X knows it will eventually want to write and does not want to be troubled with possible SQLITE_BUSY_SNAPSHOT errors that arise because another connection jumped ahead of it in line, then X can issue &lt;a href=&quot;lang_transaction#immediate&quot;&gt;BEGIN IMMEDIATE&lt;/a&gt; to start its transaction instead of just an ordinary BEGIN. The &lt;a href=&quot;lang_transaction#immediate&quot;&gt;BEGIN IMMEDIATE&lt;/a&gt; command goes ahead and starts a write transaction, and thus blocks all other writers. If the &lt;a href=&quot;lang_transaction#immediate&quot;&gt;BEGIN IMMEDIATE&lt;/a&gt; operation succeeds, then no subsequent operations in that transaction will ever fail with an &lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt; error.</source>
          <target state="translated">X가 처음에는 읽기만하는 트랜잭션을 시작하지만 X는 결국 쓰기를 원하고 다른 연결이 줄을 넘어서 발생하여 발생할 수있는 SQLITE_BUSY_SNAPSHOT 오류로 문제를 일으키고 싶지 않다는 것을 알고 있으면 X는 &lt;a href=&quot;lang_transaction#immediate&quot;&gt;BEGIN IMMEDIATE&lt;/a&gt; 를 발행 하여 시작할 수 있습니다. 평범한 BEGIN 대신 거래. 는 &lt;a href=&quot;lang_transaction#immediate&quot;&gt;IMMEDIATE BEGIN&lt;/a&gt; 명령은 모든 다른 작가를 강행하고 쓰기 트랜잭션을 시작하고, 따라서 블록. (가) 경우 &lt;a href=&quot;lang_transaction#immediate&quot;&gt;IMMEDIATE BEGIN&lt;/a&gt; 작업이 성공, 그 거래의 후속 작업은 이제까지와 함께 실패하지 않습니다 &lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY의&lt;/a&gt; 오류입니다.</target>
        </trans-unit>
        <trans-unit id="0eea241e4d0bdc37c50e93c325fbb23bd791a257" translate="yes" xml:space="preserve">
          <source>If a &quot;*&quot; character follows a string within an FTS expression, then the final token extracted from the string is marked as a &lt;b&gt;prefix token&lt;/b&gt;. As you might expect, a prefix token matches any document token of which it is a prefix. For example, the first two queries in the following block will match any document that contains the token &quot;one&quot; immediately followed by the token &quot;two&quot; and then any token that begins with &quot;thr&quot;.</source>
          <target state="translated">&quot;*&quot;문자가 FTS 표현식 내의 문자열 뒤에 오는 경우 문자열에서 추출 된 최종 토큰은 접 &lt;b&gt;두부 token으로&lt;/b&gt; 표시됩니다 . 예상 한대로 접두사 토큰은 접두사 인 모든 문서 토큰과 일치합니다. 예를 들어, 다음 블록의 처음 두 쿼리는 &quot;one&quot;토큰 바로 다음에 &quot;two&quot;토큰과 &quot;thr&quot;로 시작하는 토큰이 포함 된 모든 문서와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="3fc71a5654e7dbcda099553445308929a409041e" translate="yes" xml:space="preserve">
          <source>If a &quot;DROP TABLE&quot; or &quot;DROP INDEX&quot; SQL command is executed, and the same database connection currently has one or more actively executing SELECT statements, then SQLITE_LOCKED is returned. If &lt;a href=&quot;c3ref/unlock_notify&quot;&gt;sqlite3_unlock_notify()&lt;/a&gt; is called in this case, then the specified callback will be invoked immediately. Re-attempting the &quot;DROP TABLE&quot; or &quot;DROP INDEX&quot; statement will return another SQLITE_LOCKED error. In the implementation of sqlite3_blocking_step() shown to the left, this could cause an infinite loop.</source>
          <target state="translated">&quot;DROP TABLE&quot;또는 &quot;DROP INDEX&quot;SQL 명령이 실행되고 동일한 데이터베이스 연결에 현재 하나 이상의 활성 SELECT 문이있는 경우 SQLITE_LOCKED가 리턴됩니다. 이 경우 &lt;a href=&quot;c3ref/unlock_notify&quot;&gt;sqlite3_unlock_notify ()&lt;/a&gt; 가 호출되면 지정된 콜백이 즉시 호출됩니다. &quot;DROP TABLE&quot;또는 &quot;DROP INDEX&quot;문을 다시 시도하면 다른 SQLITE_LOCKED 오류가 반환됩니다. 왼쪽에 표시된 sqlite3_blocking_step () 구현에서 무한 루프가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="12bc34a5236123febe1cd1188da174890c26f97b" translate="yes" xml:space="preserve">
          <source>If a &quot;^&quot; character appears immediately before a phrase that is not part of a NEAR query, then that phrase only matches a document only if it starts at the first token in a column. The &quot;^&quot; syntax may be combined with a &lt;a href=&quot;fts5#fts5_column_filters&quot;&gt;column filter&lt;/a&gt;, but may not be inserted into the middle of a phrase.</source>
          <target state="translated">&quot;^&quot;문자가 NEAR 쿼리의 일부가 아닌 문구 바로 앞에 나타나는 경우 해당 문구는 문서가 열의 첫 번째 토큰에서 시작하는 경우에만 문서와 일치합니다. &quot;^&quot;구문은 &lt;a href=&quot;fts5#fts5_column_filters&quot;&gt;열 필터&lt;/a&gt; 와 결합 할 수 있지만 구문 중간에 삽입 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="73147d85cef7d3f5b1649d52c7fae3bdc6d30054" translate="yes" xml:space="preserve">
          <source>If a &quot;create file&quot; operation is executed by SQLite, and then the created file</source>
          <target state="translated">&quot;파일 작성&quot;조작이 SQLite에 의해 실행 된 후 작성된 파일</target>
        </trans-unit>
        <trans-unit id="84d99b586ac4808874504752037c1f68b1dc681c" translate="yes" xml:space="preserve">
          <source>If a &quot;truncate file&quot; operation is executed by SQLite, and then the truncated file</source>
          <target state="translated">&quot;파일 잘라 내기&quot;작업이 SQLite에 의해 실행 된 다음 잘린 파일</target>
        </trans-unit>
        <trans-unit id="a177cd3b97251df1bda061d91a729d6e25be393e" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;../wal#walfile&quot;&gt;WAL file&lt;/a&gt; remains on disk after all database connections close (either through the use of the &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlpersistwal&quot;&gt;SQLITE_FCNTL_PERSIST_WAL&lt;/a&gt;&lt;a href=&quot;file_control&quot;&gt;file control&lt;/a&gt; or because the last process to have the database opened exited without calling &lt;a href=&quot;close&quot;&gt;sqlite3_close()&lt;/a&gt;) and a new connection is subsequently opened on that database and &lt;a href=&quot;../wal#walfile&quot;&gt;WAL file&lt;/a&gt;, the &lt;a href=&quot;snapshot_open&quot;&gt;sqlite3_snapshot_open()&lt;/a&gt; interface will only be able to open the last transaction added to the WAL file even though the WAL file contains other valid transactions.</source>
          <target state="translated">모든 데이터베이스 연결을 닫은 후 ( &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlpersistwal&quot;&gt;SQLITE_FCNTL_PERSIST_WAL &lt;/a&gt;&lt;a href=&quot;file_control&quot;&gt;파일 제어를 사용&lt;/a&gt; 하거나 &lt;a href=&quot;close&quot;&gt;sqlite3_close ()&lt;/a&gt; 를 호출하지 않고 데이터베이스를 마지막으로 열었던 프로세스가 종료 되었기 때문에) &lt;a href=&quot;../wal#walfile&quot;&gt;WAL 파일&lt;/a&gt; 이 디스크에 남아 있는 경우 해당 데이터베이스 에서 새 연결이 열린 후 &lt;a href=&quot;../wal#walfile&quot;&gt;WAL 파일&lt;/a&gt; , &lt;a href=&quot;snapshot_open&quot;&gt;sqlite3_snapshot_open ()&lt;/a&gt; 인터페이스는 WAL 파일에 다른 유효한 트랜잭션이 포함되어 있어도 WAL 파일에 추가 된 마지막 트랜잭션 만 열 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ce5e78d94d5947b9e328c1516e3f265b0f48637a" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statement&lt;/a&gt; is generated from &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt; then the statement is automatically re-prepared if the schema changes, up to &lt;a href=&quot;compile#max_schema_retry&quot;&gt;SQLITE_MAX_SCHEMA_RETRY&lt;/a&gt; times (default: 50). The &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt; interface will only return SQLITE_SCHEMA back to the application if the failure persists after these many retries.</source>
          <target state="translated">경우 &lt;a href=&quot;c3ref/stmt&quot;&gt;준비된 문&lt;/a&gt; 에서 생성됩니다 &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2 ()&lt;/a&gt; 다음 문은 준비된 자동으로 다시 경우 최대 스키마 변경, &lt;a href=&quot;compile#max_schema_retry&quot;&gt;SQLITE_MAX_SCHEMA_RETRY의&lt;/a&gt; 시간 (기본값 : 50). &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step ()&lt;/a&gt; 인터페이스는 응용 프로그램에 SQLITE_SCHEMA 백을 반환하는 경우 이러한 많은 시도 후 실패 지속됩니다.</target>
        </trans-unit>
        <trans-unit id="3249186023e31b2ef81a917670edb42184c4e1e6" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;lang_transaction&quot;&gt;ROLLBACK&lt;/a&gt; operation occurs on the same &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; as a pending read or write, then the pending read or write may fail with an SQLITE_ABORT or &lt;a href=&quot;rescode#abort_rollback&quot;&gt;SQLITE_ABORT_ROLLBACK&lt;/a&gt; error.</source>
          <target state="translated">경우 &lt;a href=&quot;lang_transaction&quot;&gt;롤백&lt;/a&gt; 작업이 동일한에서 발생 &lt;a href=&quot;c3ref/sqlite3&quot;&gt;데이터베이스 연결&lt;/a&gt; 보류중인 읽기 또는 쓰기로하고 보류중인 읽기 나 쓰기는 SQLITE_ABORT 또는 실패 할 수 있습니다 &lt;a href=&quot;rescode#abort_rollback&quot;&gt;SQLITE_ABORT_ROLLBACK의&lt;/a&gt; 오류입니다.</target>
        </trans-unit>
        <trans-unit id="a092e1c1463db0502720c4f04f6df73156ddbd46" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;wal#walfile&quot;&gt;WAL file&lt;/a&gt; remains on disk after all database connections close (either through the use of the &lt;a href=&quot;#sqlitefcntlpersistwal&quot;&gt;SQLITE_FCNTL_PERSIST_WAL&lt;/a&gt;&lt;a href=&quot;#sqlite3_file_control&quot;&gt;file control&lt;/a&gt; or because the last process to have the database opened exited without calling &lt;a href=&quot;#sqlite3_close&quot;&gt;sqlite3_close()&lt;/a&gt;) and a new connection is subsequently opened on that database and &lt;a href=&quot;wal#walfile&quot;&gt;WAL file&lt;/a&gt;, the &lt;a href=&quot;#sqlite3_snapshot_open&quot;&gt;sqlite3_snapshot_open()&lt;/a&gt; interface will only be able to open the last transaction added to the WAL file even though the WAL file contains other valid transactions.</source>
          <target state="translated">모든 데이터베이스 연결을 닫은 후 ( &lt;a href=&quot;#sqlitefcntlpersistwal&quot;&gt;SQLITE_FCNTL_PERSIST_WAL &lt;/a&gt;&lt;a href=&quot;#sqlite3_file_control&quot;&gt;파일 제어를 사용&lt;/a&gt; 하거나 &lt;a href=&quot;#sqlite3_close&quot;&gt;sqlite3_close ()&lt;/a&gt; 를 호출하지 않고 데이터베이스를 마지막으로 열었던 프로세스가 종료 되었기 때문에) &lt;a href=&quot;wal#walfile&quot;&gt;WAL 파일&lt;/a&gt; 이 디스크에 남아 있는 경우 해당 데이터베이스 에서 새 연결이 열린 후 &lt;a href=&quot;wal#walfile&quot;&gt;WAL 파일&lt;/a&gt; , &lt;a href=&quot;#sqlite3_snapshot_open&quot;&gt;sqlite3_snapshot_open ()&lt;/a&gt; 인터페이스는 WAL 파일에 다른 유효한 트랜잭션이 포함되어 있어도 WAL 파일에 추가 된 마지막 트랜잭션 만 열 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fa0658f406309a7c36c783a199e98aa7bfe2c3be" translate="yes" xml:space="preserve">
          <source>If a BEFORE UPDATE or BEFORE DELETE trigger modifies or deletes a row that was to have been updated or deleted, then the result of the subsequent update or delete operation is undefined. Furthermore, if a BEFORE trigger modifies or deletes a row, then it is undefined whether or not AFTER triggers that would have otherwise run on those rows will in fact run.</source>
          <target state="translated">BEFORE UPDATE 또는 BEFORE DELETE 트리거가 업데이트되거나 삭제 된 행을 수정하거나 삭제하면 후속 업데이트 또는 삭제 조작의 결과가 정의되지 않습니다. 또한 BEFORE 트리거가 행을 수정 또는 삭제하는 경우 해당 행에서 실행 된 AFTER 트리거가 실제로 실행 될지 여부는 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a3ab52a71f2c1fab71f9f4f7d4dd870ab7b02c55" translate="yes" xml:space="preserve">
          <source>If a COMMIT statement (or the RELEASE of a transaction SAVEPOINT) fails because the database is currently in a state that violates a deferred foreign key constraint and there are currently &lt;a href=&quot;lang_savepoint&quot;&gt;nested savepoints&lt;/a&gt;, the nested savepoints remain open.</source>
          <target state="translated">데이터베이스가 현재 지연된 외래 키 제약 조건을 위반하는 상태에 있고 현재 &lt;a href=&quot;lang_savepoint&quot;&gt;중첩 된 저장 점이&lt;/a&gt; 있으므로 COMMIT 문 (또는 트랜잭션 SAVEPOINT의 RELEASE)이 실패 하면 중첩 된 저장 점이 계속 열려 있습니다.</target>
        </trans-unit>
        <trans-unit id="4862567128635ae0bf91b3eee8827f7e081e0187" translate="yes" xml:space="preserve">
          <source>If a DELETE statement has a LIMIT clause, the maximum number of rows that will be deleted is found by evaluating the accompanying expression and casting it to an integer value. If the result of the evaluating the LIMIT clause cannot be losslessly converted to an integer value, it is an error. A negative LIMIT value is interpreted as &quot;no limit&quot;. If the DELETE statement also has an OFFSET clause, then it is similarly evaluated and cast to an integer value. Again, it is an error if the value cannot be losslessly converted to an integer. If there is no OFFSET clause, or the calculated integer value is negative, the effective OFFSET value is zero.</source>
          <target state="translated">DELETE 문에 LIMIT 절이 있으면 삭제 될 최대 행 수는 수반되는 표현식을 평가하고이를 정수 값으로 캐스트하여 찾습니다. LIMIT 절을 평가 한 결과를 손실없이 정수 값으로 변환 할 수 없으면 오류입니다. 음의 LIMIT 값은 &quot;제한 없음&quot;으로 해석됩니다. DELETE 문에도 OFFSET 절이 있으면, 유사하게 평가되어 정수 값으로 캐스트됩니다. 값을 손실없이 정수로 변환 할 수없는 경우 오류가 다시 발생합니다. OFFSET 절이 없거나 계산 된 정수 값이 음수이면 유효 OFFSET 값은 0입니다.</target>
        </trans-unit>
        <trans-unit id="a8ebe41fb4265f7abee56db5ee7b5c4f78f4ea2f" translate="yes" xml:space="preserve">
          <source>If a FILTER clause is provided, then only rows for which the</source>
          <target state="translated">FILTER 절이 제공되는 경우</target>
        </trans-unit>
        <trans-unit id="94816fac33b04eac89bfe331f82f9493ef356c93" translate="yes" xml:space="preserve">
          <source>If a FROM clause is specified, the data on which a simple SELECT query operates comes from the one or more tables or subqueries (SELECT statements in parentheses) specified following the FROM keyword. A subquery specified in the table-or-subquery following the FROM clause in a simple SELECT statement is handled as if it was a table containing the data returned by executing the subquery statement. Each column of the subquery has the &lt;a href=&quot;datatype3#collation&quot;&gt;collation sequence&lt;/a&gt; and &lt;a href=&quot;datatype3#affinity&quot;&gt;affinity&lt;/a&gt; of the corresponding expression in the subquery statement.</source>
          <target state="translated">FROM 절이 지정된 경우 단순 SELECT 조회가 작동하는 데이터는 FROM 키워드 다음에 지정된 하나 이상의 테이블 또는 서브 쿼리 (괄호 안의 SELECT 문)에서 가져옵니다. 단순 SELECT 문에서 FROM 절 다음에 테이블 또는 서브 쿼리에 지정된 서브 쿼리는 서브 쿼리 명령문을 실행하여 리턴 된 데이터를 포함하는 테이블 인 것처럼 처리됩니다. 서브 쿼리의 각 컬럼은 서브 쿼리 명령문에서 해당 표현식 의 &lt;a href=&quot;datatype3#collation&quot;&gt;조합 순서&lt;/a&gt; 및 &lt;a href=&quot;datatype3#affinity&quot;&gt;선호도&lt;/a&gt; 를 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="257e2a863a3526135a72b7350cb70ec4620d0ce5" translate="yes" xml:space="preserve">
          <source>If a HAVING clause is specified, it is evaluated once for each group of rows as a &lt;a href=&quot;lang_expr#booleanexpr&quot;&gt;boolean expression&lt;/a&gt;. If the result of evaluating the HAVING clause is false, the group is discarded. If the HAVING clause is an aggregate expression, it is evaluated across all rows in the group. If a HAVING clause is a non-aggregate expression, it is evaluated with respect to an arbitrarily selected row from the group. The HAVING expression may refer to values, even aggregate functions, that are not in the result.</source>
          <target state="translated">HAVING 절이 지정되면 각 행 그룹에 대해 &lt;a href=&quot;lang_expr#booleanexpr&quot;&gt;부울 표현식&lt;/a&gt; 으로 한 번 평가 됩니다. HAVING 절 평가 결과가 false이면 그룹이 삭제됩니다. HAVING 절이 집계 표현식 인 경우 그룹의 모든 행에서 평가됩니다. HAVING 절이 집계되지 않은 표현식 인 경우 그룹에서 임의로 선택된 행과 관련하여 평가됩니다. HAVING 표현식은 결과에없는 값, 집계 함수까지도 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="30445e74b001ab802719baf4ad36071ade7519f0" translate="yes" xml:space="preserve">
          <source>If a LIMIT clause is present, it might be possible to avoid scanning the entire table.</source>
          <target state="translated">LIMIT 절이 존재하면 전체 테이블을 스캔하지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="948b4ac14d2baa3362d0ca28f059b73564c6f3e7" translate="yes" xml:space="preserve">
          <source>If a Linux &lt;a href=&quot;http://en.wikipedia.org/wiki/Ext3&quot;&gt;ext3&lt;/a&gt; filesystem is mounted without the &quot;barrier=1&quot; option in the &lt;a href=&quot;http://en.wikipedia.org/wiki/fstab&quot;&gt;/etc/fstab&lt;/a&gt; and the disk drive write cache is enabled then filesystem corruption can occur following a power loss or OS crash. Whether or not corruption can occur depends on the details of the disk control hardware; corruption is more likely with inexpensive consumer-grade disks and less of a problem for enterprise-class storage devices with advanced features such as non-volatile write caches. Various ext3 experts &lt;a href=&quot;http://www.redhat.com/archives/ext3-users/2010-July/msg00001.html&quot;&gt; confirm this behavior&lt;/a&gt;. We are told that most Linux distributions do not use barrier=1 and do not disable the write cache so most Linux distributions are vulnerable to this problem. Note that this is an operating system and hardware issue and that there is nothing that SQLite can do to work around it. &lt;a href=&quot;http://ozlabs.org/~rusty/index.cgi/tech/2009-10-20.html&quot;&gt; Other database engines&lt;/a&gt; have also run into this same problem.</source>
          <target state="translated">리눅스라면 &lt;a href=&quot;http://en.wikipedia.org/wiki/Ext3&quot;&gt; ext3&lt;/a&gt; 파일 시스템이 &lt;a href=&quot;http://en.wikipedia.org/wiki/fstab&quot;&gt;/ etc / fstab&lt;/a&gt; 에서 &quot;barrier = 1&quot;옵션없이 마운트 되고 디스크 드라이브 쓰기 캐시가 활성화 된 경우 전원 손실 또는 OS 충돌로 인해 파일 시스템 손상이 발생할 수 있습니다. 손상이 발생할 수 있는지 여부는 디스크 제어 하드웨어의 세부 사항에 따라 다릅니다. 저렴한 소비자 급 디스크로 인해 손상이 발생할 가능성이 높으며 비 휘발성 쓰기 캐시와 같은 고급 기능을 갖춘 엔터프라이즈 급 스토리지 장치에서는 문제가 적습니다. 다양한 ext3 전문가&lt;a href=&quot;http://www.redhat.com/archives/ext3-users/2010-July/msg00001.html&quot;&gt; 가이 동작을 확인합니다&lt;/a&gt;. 대부분의 Linux 배포판은 barrier = 1을 사용하지 않고 쓰기 캐시를 비활성화하지 않으므로 대부분의 Linux 배포판은이 문제에 취약합니다. 이것은 운영 체제 및 하드웨어 문제이며 SQLite가이 문제를 해결하기 위해 수행 할 수있는 작업이 없습니다. &lt;a href=&quot;http://ozlabs.org/~rusty/index.cgi/tech/2009-10-20.html&quot;&gt;다른 데이터베이스 엔진&lt;/a&gt; 도 같은 문제가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="99b0a8e8602a0a06983153315092cfd9796ad41e" translate="yes" xml:space="preserve">
          <source>If a NOT NULL constraint is specified, then the column must have a default value other than NULL.</source>
          <target state="translated">NOT NULL 제약 조건이 지정되면 열의 기본값은 NULL 이외의 값이어야합니다.</target>
        </trans-unit>
        <trans-unit id="55be5a331b8cf28f9f746d3f7eb6341aa17eff02" translate="yes" xml:space="preserve">
          <source>If a SELECT query contains an ORDER BY, GROUP BY or DISTINCT clause, SQLite may need to use a temporary b-tree structure to sort the output rows. Or, it might &lt;a href=&quot;queryplanner#sorting&quot;&gt;use an index&lt;/a&gt;. Using an index is almost always much more efficient than performing a sort. If a temporary b-tree is required, a record is added to the EXPLAIN QUERY PLAN output with the &quot;detail&quot; field set to a string value of the form &quot;USE TEMP B-TREE FOR xxx&quot;, where xxx is one of &quot;ORDER BY&quot;, &quot;GROUP BY&quot; or &quot;DISTINCT&quot;. For example:</source>
          <target state="translated">SELECT 쿼리에 ORDER BY, GROUP BY 또는 DISTINCT 절이 포함 된 경우 SQLite는 임시 b- 트리 구조를 사용하여 출력 행을 정렬해야 할 수 있습니다. 또는 &lt;a href=&quot;queryplanner#sorting&quot;&gt;색인을 사용할&lt;/a&gt; 수도 있습니다 . 인덱스를 사용하는 것이 정렬을 수행하는 것보다 거의 항상 훨씬 효율적입니다. 임시 b- 트리가 필요한 경우 &quot;detail&quot;필드를 &quot;USE TEMP B-TREE FOR xxx&quot;형식의 문자열 값으로 설정하여 EXPLAIN QUERY PLAN 출력에 레코드가 추가됩니다. 여기서 xxx는 &quot;ORDER 중 하나입니다. BY &quot;,&quot;GROUP BY &quot;또는&quot;DISTINCT &quot;. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5b44dbe4fb9e1c6ef0606b8af702048ca0e438cc" translate="yes" xml:space="preserve">
          <source>If a SELECT statement that returns more than one row does not have an ORDER BY clause, the order in which the rows are returned is undefined. Or, if a SELECT statement does have an ORDER BY clause, then the list of expressions attached to the ORDER BY determine the order in which rows are returned to the user.</source>
          <target state="translated">둘 이상의 행을 리턴하는 SELECT 문에 ORDER BY 절이 없으면 행이 리턴되는 순서가 정의되지 않습니다. 또는 SELECT 문에 ORDER BY 절이있는 경우 ORDER BY에 첨부 된 표현식 목록에 따라 행이 사용자에게 리턴되는 순서가 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="1b3cef981ef6c33ad4faa712cdaf3b903f15861f" translate="yes" xml:space="preserve">
          <source>If a UNION operator connects the initial-select with the recursive-select, then only add rows to the queue if no identical row has been previously added to the queue. Repeated rows are discarded before being added to the queue even if the repeated rows have already been extracted from the queue by the recursion step. If the operator is UNION ALL, then all rows generated by both the initial-select and the recursive-select are always added to the queue even if they are repeats. When determining if a row is repeated, NULL values compare equal to one another and not equal to any other value.</source>
          <target state="translated">UNION 연산자가 초기 선택을 재귀 선택과 연결하는 경우 이전에 대기열에 동일한 행이 추가되지 않은 경우에만 행을 대기열에 추가하십시오. 반복 된 행이 재귀 단계에 의해 큐에서 이미 추출 된 경우에도 반복 된 행은 큐에 추가되기 전에 삭제됩니다. 연산자가 UNION ALL이면 초기 선택과 재귀 선택에 의해 생성 된 모든 행이 반복 되더라도 항상 큐에 추가됩니다. 행이 반복되는지 판별 할 때 NULL 값은 서로 같고 다른 값과 같지 않습니다.</target>
        </trans-unit>
        <trans-unit id="56d92b47e4081e5a6e548ebb6f898e186d052899" translate="yes" xml:space="preserve">
          <source>If a WHEN clause is supplied, the SQL statements specified are only executed if the WHEN clause is true. If no WHEN clause is supplied, the SQL statements are executed every time the trigger fires.</source>
          <target state="translated">WHEN 절이 제공되면 지정된 SQL 문은 WHEN 절이 true 인 경우에만 실행됩니다. WHEN 절이 제공되지 않으면 트리거가 실행될 때마다 SQL 문이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="85a070271019d9b24039a7b30649256cb4c49fd9" translate="yes" xml:space="preserve">
          <source>If a WHERE clause is specified, the WHERE expression is evaluated for each row in the input data as a &lt;a href=&quot;lang_expr#booleanexpr&quot;&gt;boolean expression&lt;/a&gt;. Only rows for which the WHERE clause expression evaluates to true are included from the dataset before continuing. Rows are excluded from the result if the WHERE clause evaluates to either false or NULL.</source>
          <target state="translated">WHERE 절이 지정되면 WHERE 표현식은 입력 데이터의 각 행에 대해 &lt;a href=&quot;lang_expr#booleanexpr&quot;&gt;부울 표현식으로 평가&lt;/a&gt; 됩니다. 계속하기 전에 WHERE 절 표현식이 true로 평가되는 행만 데이터 세트에 포함됩니다. WHERE 절이 false 또는 NULL로 평가되면 행이 결과에서 제외됩니다.</target>
        </trans-unit>
        <trans-unit id="99314068471e46954e8f897765afda682981e6bc" translate="yes" xml:space="preserve">
          <source>If a build of SQLite does not include the FTS modules, then any attempt to prepare an SQL statement to create an FTS3 or FTS4 table or to drop or access an existing FTS table in any way will fail. The error message returned will be similar to &quot;no such module: ftsN&quot; (where N is either 3 or 4).</source>
          <target state="translated">SQLite 빌드에 FTS 모듈이 포함되어 있지 않으면 FTS3 또는 FTS4 테이블을 작성하거나 어떤 식 으로든 기존 FTS 테이블을 삭제하거나 액세스하기 위해 SQL 문을 준비하려는 시도가 실패합니다. 반환 된 오류 메시지는 &quot;no such module : ftsN&quot;과 유사합니다 (여기서 N은 3 또는 4 임).</target>
        </trans-unit>
        <trans-unit id="c07dc39ee71e6a6e8537165278b706aabd6e81bd" translate="yes" xml:space="preserve">
          <source>If a call to sqlite3_step() that attempts to write to a database table returns SQLITE_LOCKED, then more than one other connection may be holding a read-lock on the database table in question. In this case SQLite simply selects one of those other connections arbitrarily and issues the unlock-notify callback when that connection's transaction is finished. Whether the call to sqlite3_step() was blocked by one or many connections, when the corresponding unlock-notify callback is issued it is not guaranteed that the required lock is available, only that it may be.</source>
          <target state="translated">데이터베이스 테이블에 쓰려고 시도하는 sqlite3_step () 호출이 SQLITE_LOCKED를 리턴하면, 하나 이상의 다른 연결이 해당 데이터베이스 테이블에 대한 읽기 잠금을 보유 할 수 있습니다. 이 경우 SQLite는 단순히 다른 연결 중 하나를 임의로 선택하고 해당 연결의 트랜잭션이 완료되면 잠금 해제 알림 콜백을 발행합니다. sqlite3_step ()에 대한 호출이 하나 이상의 연결에 의해 차단되었는지 여부에 따라 해당 잠금 해제 알림 콜백이 발행 될 때 필요한 잠금이 사용 가능하다는 보장은 없습니다.</target>
        </trans-unit>
        <trans-unit id="12e866adc40a794d5a50cd7647771628a0fe472b" translate="yes" xml:space="preserve">
          <source>If a character specified as part of the argument to &quot;tokenchars=&quot; is considered to be a token character by default, it is ignored. This is true even if it has been marked as a separator by an earlier &quot;separators=&quot; option. Similarly, if a character specified as part of a &quot;separators=&quot; option is treated as a separator character by default, it is ignored. If multiple &quot;tokenchars=&quot; or &quot;separators=&quot; options are specified, all are processed. For example:</source>
          <target state="translated">&quot;tokenchars =&quot;에 대한 인수의 일부로 지정된 문자가 기본적으로 토큰 문자로 간주되면 무시됩니다. 이전의 &quot;separators =&quot;옵션에 의해 구분자로 표시되어 있어도 마찬가지입니다. 마찬가지로 &quot;separators =&quot;옵션의 일부로 지정된 문자가 기본적으로 구분 문자로 취급되는 경우 무시됩니다. &quot;tokenchars =&quot;또는 &quot;separators =&quot;옵션이 여러 개 지정된 경우 모두 처리됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4047a69992390b90bb1e651abb363899dad3ce20" translate="yes" xml:space="preserve">
          <source>If a collating function fails any of the above constraints and that collating function is registered and used, then the behavior of SQLite is undefined.</source>
          <target state="translated">조합 함수가 위의 제한 조건 중 하나에 실패하고 해당 조합 함수가 등록되어 사용되면 SQLite의 동작이 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4a25d30fe6f01a94e32b9a3c4b8ab96f2806f18f" translate="yes" xml:space="preserve">
          <source>If a column datatype contains the special keyword &quot;HIDDEN&quot; (in any combination of upper and lower case letters) then that keyword it is omitted from the column datatype name and the column is marked as a hidden column internally. A hidden column differs from a normal column in three respects:</source>
          <target state="translated">열 데이터 유형에 특수 키워드 &quot;HIDDEN&quot;(대문자와 소문자 조합)이 포함 된 경우 해당 키워드는 열 데이터 유형 이름에서 생략되고 열은 내부적으로 숨겨진 열로 표시됩니다. 숨겨진 열은 세 가지 측면에서 일반 열과 다릅니다.</target>
        </trans-unit>
        <trans-unit id="4a3060f5f06633a8fd81221c196cda03a0efe5c5" translate="yes" xml:space="preserve">
          <source>If a column filter specification is preceded by a &quot;-&quot; character, then it is interpreted as a list of column not to match against. For example:</source>
          <target state="translated">열 필터 스펙 앞에 &quot;-&quot;문자가 있으면 일치하지 않는 열 목록으로 해석됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4784be250e1d29a9c62d93440a67186e8f2d433e" translate="yes" xml:space="preserve">
          <source>If a column has the type INTEGER PRIMARY KEY AUTOINCREMENT then a slightly different ROWID selection algorithm is used. The ROWID chosen for the new row is at least one larger than the largest ROWID that has ever before existed in that same table. If the table has never before contained any data, then a ROWID of 1 is used. If the largest possible ROWID has previously been inserted, then new INSERTs are not allowed and any attempt to insert a new row will fail with an SQLITE_FULL error. Only ROWID values from previous transactions that were committed are considered. ROWID values that were rolled back are ignored and can be reused.</source>
          <target state="translated">컬럼에 INTEGER PRIMARY KEY AUTOINCREMENT 유형이 있으면 약간 다른 ROWID 선택 알고리즘이 사용됩니다. 새 행에 대해 선택된 ROWID는 이전에 동일한 테이블에 존재했던 가장 큰 ROWID보다 하나 이상 큽니다. 테이블에 데이터가 포함 된 적이 없으면 ROWID 1이 사용됩니다. 가장 큰 가능한 ROWID가 이전에 삽입 된 경우 새 INSERT가 허용되지 않으며 새 행을 삽입하려는 시도는 SQLITE_FULL 오류와 함께 실패합니다. 커밋 된 이전 트랜잭션의 ROWID 값만 고려됩니다. 롤백 된 ROWID 값은 무시되며 재사용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="85779fa11fd249fc0a9433b1c9e912b143d1abd7" translate="yes" xml:space="preserve">
          <source>If a column-name list follows the view-name, then that list determines the names of the columns for the view. If the column-name list is omitted, then the names of the columns in the view are derived from the names of the result-set columns in the &lt;a href=&quot;syntax/select-stmt&quot;&gt;select-stmt&lt;/a&gt;. The use of column-name list is recommended. Or, if column-name list is omitted, then the result columns in the &lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt; statement that defines the view should have well-defined names using the &quot;&lt;a href=&quot;syntax/result-column&quot;&gt;AS column-alias&lt;/a&gt;&quot; syntax. SQLite allows you to create views that depend on automatically generated column names, but you should avoid using them since the rules used to generate column names are not a defined part of the interface and might change in future releases of SQLite.</source>
          <target state="translated">열 이름 목록이 view-name 뒤에 오면 해당 목록이보기의 열 이름을 결정합니다. column-name 목록이 생략되면 뷰의 열 이름은 &lt;a href=&quot;syntax/select-stmt&quot;&gt;select-stmt&lt;/a&gt; 의 결과 집합 열 이름에서 파생됩니다 . 열 이름 목록을 사용하는 것이 좋습니다. 또는 column-name list를 생략 하면 뷰를 정의하는 &lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt; 문의 결과 열에 &quot; &lt;a href=&quot;syntax/result-column&quot;&gt;AS column-alias&lt;/a&gt; &quot;구문을 사용하여 잘 정의 된 이름이 있어야 합니다. SQLite를 사용하면 자동으로 생성 된 열 이름에 의존하는 뷰를 만들 수 있지만 열 이름을 생성하는 데 사용되는 규칙은 인터페이스의 정의 된 부분이 아니며 향후 SQLite 릴리스에서 변경 될 수 있으므로 사용하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="7f7aaafed42977493a2413f4303512821df4e3b2" translate="yes" xml:space="preserve">
          <source>If a conflict handler returns this value no special action is taken. The change that caused the conflict is not applied. The session module continues to the next change in the changeset.</source>
          <target state="translated">충돌 핸들러가이 값을 리턴하면 특별한 조치가 수행되지 않습니다. 충돌을 일으킨 변경 사항이 적용되지 않습니다. 세션 모듈은 다음 변경 세트에서 계속 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="a40b2d39f56dad1b134a26af2fe2ae696281adc1" translate="yes" xml:space="preserve">
          <source>If a covering index can be used for a query, then the multiple rowid lookups can be avoided and the cost of the query drops dramatically.</source>
          <target state="translated">커버링 인덱스를 쿼리에 사용할 수 있으면 여러 rowid 조회를 피할 수 있고 쿼리 비용이 크게 줄어 듭니다.</target>
        </trans-unit>
        <trans-unit id="653b4381ff1ad3607fbc3061d7b4f5d80ed74deb" translate="yes" xml:space="preserve">
          <source>If a crash or power failure occurs and results in a hot journal but that journal is deleted, the next process to open the database will not know that it contains changes that need to be rolled back. The rollback will not occur and the database will be left in an inconsistent state. Rollback journals might be deleted for any number of reasons:</source>
          <target state="translated">충돌 또는 전원 장애가 발생하여 저널이 뜨거워 지지만 해당 저널이 삭제 된 경우, 데이터베이스를 여는 다음 프로세스는 롤백해야하는 변경 사항이 포함되어 있음을 알 수 없습니다. 롤백이 발생하지 않고 데이터베이스가 일관성이없는 상태로 남아 있습니다. 롤백 저널은 여러 가지 이유로 삭제 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dbc53ced19579b45a05b723b3063167292a44232" translate="yes" xml:space="preserve">
          <source>If a crash or power loss does occur and a hot journal is left on the disk, it is essential that the original database file and the hot journal remain on disk with their original names until the database file is opened by another SQLite process and rolled back. During recovery at &lt;a href=&quot;#section_4_2&quot;&gt;step 4.2&lt;/a&gt; SQLite locates the hot journal by looking for a file in the same directory as the database being opened and whose name is derived from the name of the file being opened. If either the original database file or the hot journal have been moved or renamed, then the hot journal will not be seen and the database will not be rolled back.</source>
          <target state="translated">충돌 또는 전원 손실이 발생하고 핫 저널이 디스크에 남아있는 경우 데이터베이스 파일이 다른 SQLite 프로세스에 의해 열리고 롤백 될 때까지 원본 데이터베이스 파일 및 핫 저널이 원래 이름으로 디스크에 남아 있어야합니다. . &lt;a href=&quot;#section_4_2&quot;&gt;4.2 단계&lt;/a&gt; 에서 복구하는 동안 SQLite는 열려는 데이터베이스와 동일한 디렉토리에서 파일을 찾아서 열 저널을 찾습니다. 원본 데이터베이스 파일 또는 핫 저널이 이동되거나 이름이 바뀐 경우 핫 저널이 표시되지 않고 데이터베이스가 롤백되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fb8183919d1fc07417b2707b8092ba7a7a08090d" translate="yes" xml:space="preserve">
          <source>If a crash or power loss occurs in the middle of a transaction, then the rollback journal file is left on disk. The next time another application attempts to open the database file, it notices the presence of the abandoned rollback journal (we call it a &quot;hot journal&quot; in this circumstance) and uses the information in the journal to restore the database to its state prior to the start of the incomplete transaction. This is how SQLite implements atomic commit.</source>
          <target state="translated">트랜잭션 도중에 충돌 또는 전원 손실이 발생하면 롤백 저널 파일이 디스크에 남아 있습니다. 다음에 다른 응용 프로그램에서 데이터베이스 파일을 열려고하면이 롤백 된 저널 저널 (이 상황에서는 &quot;핫 저널&quot;이라고 함)이 있음을 확인하고 저널의 정보를 사용하여 데이터베이스를 이전 상태로 복원합니다. 불완전한 거래의 시작 이것이 SQLite가 원자 커밋을 구현하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="ac9f0e2592a2df4c51e939a4b5d49b41b7d7ebcb" translate="yes" xml:space="preserve">
          <source>If a database connection is opened with the &quot;-uri 1&quot; option, then &lt;a href=&quot;uri&quot;&gt;URI filenames&lt;/a&gt; are honored by the &quot;backup&quot; and &quot;restore&quot; commands.</source>
          <target state="translated">&quot;-uri 1&quot;옵션을 사용하여 데이터베이스 연결을 열면 &quot;backup&quot;및 &quot;restore&quot;명령이 &lt;a href=&quot;uri&quot;&gt;URI 파일 이름&lt;/a&gt; 을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="d5923feff2a2aef8fc7abf4f600aff34fc785066" translate="yes" xml:space="preserve">
          <source>If a database connection is operating in &lt;a href=&quot;pragma#pragma_locking_mode&quot;&gt;exclusive locking mode&lt;/a&gt; or in &lt;a href=&quot;pragma#pragma_journal_mode&quot;&gt;persistent journal mode&lt;/a&gt; (PRAGMA journal_mode=persist) then after committing a transaction the &lt;a href=&quot;lockingv3#rollback&quot;&gt;rollback journal&lt;/a&gt; file may remain in the file-system. This increases performance for subsequent transactions since overwriting an existing file is faster than append to a file, but it also consumes file-system space. After a large transaction (e.g. a &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt;), the rollback journal file may consume a very large amount of space.</source>
          <target state="translated">데이터베이스 연결이 &lt;a href=&quot;pragma#pragma_locking_mode&quot;&gt;독점 잠금 모드&lt;/a&gt; 또는 &lt;a href=&quot;pragma#pragma_journal_mode&quot;&gt;지속적 저널 모드&lt;/a&gt; (PRAGMA journal_mode = persist)에서 작동하는 경우 트랜잭션을 커밋 한 후 &lt;a href=&quot;lockingv3#rollback&quot;&gt;롤백 저널&lt;/a&gt; 파일이 파일 시스템에 남아있을 수 있습니다. 기존 파일을 덮어 쓰는 것이 파일에 추가하는 것보다 빠르기 때문에 후속 트랜잭션의 성능이 향상되지만 파일 시스템 공간도 소비합니다. 큰 트랜잭션 (예 : &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt; ) 후에 롤백 저널 파일은 매우 많은 공간을 소비 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f55f04439258c2d344a35f29269aa9db3e5202b" translate="yes" xml:space="preserve">
          <source>If a database file is accessed using 8+3 naming rather than the default long filename, then it must be consistently accessed using 8+3 naming by every database connection every time it is opened, or else there is a risk of database corruption. The auxiliary &lt;a href=&quot;lockingv3#rollback&quot;&gt;rollback journal&lt;/a&gt; and &lt;a href=&quot;wal&quot;&gt;write-ahead log&lt;/a&gt; files are essential to SQLite for being about to recover from a crash. If an application is using 8+3 names and crashes, then the information needed to safely recover from the crash is stored in files with the &quot;&lt;code&gt;.nal&lt;/code&gt;&quot; or &quot;&lt;code&gt;.wal&lt;/code&gt;&quot; extension. If the next application to open the database does not specify the &quot;&lt;code&gt;8_3_names=1&lt;/code&gt;&quot; URI parameter, then SQLite will use the long filenames to try to locate the rollback journal or write-ahead log files. It will not find them, since they were saved using 8+3 names by the application that crashed, and hence the database will not be properly recovered and will likely go corrupt.</source>
          <target state="translated">기본 긴 파일 이름이 아닌 8 + 3 이름을 사용하여 데이터베이스 파일에 액세스하는 경우 파일을 열 때마다 모든 데이터베이스 연결에서 8 + 3 이름을 사용하여 일관되게 액세스해야합니다. 그렇지 않으면 데이터베이스가 손상 될 위험이 있습니다. 보조 &lt;a href=&quot;lockingv3#rollback&quot;&gt;롤백 저널&lt;/a&gt; 및 &lt;a href=&quot;wal&quot;&gt;미리 쓰기 로그&lt;/a&gt; 파일은 SQLite가 충돌로부터 복구 되려면 필수적입니다. 응용 프로그램이 8 + 3 이름을 사용하고 충돌하는 경우 충돌에서 안전하게 복구하는 데 필요한 정보는 &quot; &lt;code&gt;.nal&lt;/code&gt; &quot;또는 &quot; &lt;code&gt;.wal&lt;/code&gt; &quot;확장자를 가진 파일에 저장됩니다 . 다음에 데이터베이스를 열 응용 프로그램이 &quot; &lt;code&gt;8_3_names=1&lt;/code&gt; 을 지정하지 않은 경우&quot;URI 매개 변수를 사용하면 SQLite는 긴 파일 이름을 사용하여 롤백 저널 또는 미리 쓰기 로그 파일을 찾습니다. 충돌 한 응용 프로그램에서 8 + 3 이름을 사용하여 저장했기 때문에 데이터베이스를 찾지 못하므로 데이터베이스를 찾지 못합니다. 제대로 복구되지 않고 손상 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bd70a20b8f5f47bbbe011a3bee3a583fecc50caa" translate="yes" xml:space="preserve">
          <source>If a database is written by SQLite version 3.7.0 or later and then written again by SQLite version 3.6.23 or earlier in such a way as to make the size of the database file decrease, then the next time that SQLite version 3.7.0 access the database file, it might report that the database file is corrupt. The database file is not really corrupt, however. Version 3.7.0 was simply being overly zealous in its corruption detection.</source>
          <target state="translated">데이터베이스가 SQLite 버전 3.7.0 이상에서 작성된 후 데이터베이스 파일의 크기를 줄 이도록 SQLite 버전 3.6.23 이하에서 다시 작성된 경우 다음 번에 해당 SQLite 버전 3.7.0 데이터베이스 파일에 액세스하면 데이터베이스 파일이 손상되었다고보고 할 수 있습니다. 그러나 데이터베이스 파일은 실제로 손상되지 않았습니다. 버전 3.7.0은 손상 감지에서 지나치게 열성적이었습니다.</target>
        </trans-unit>
        <trans-unit id="c0e8b12ff7ad15986137c5d5f01f4e0ef949a4a6" translate="yes" xml:space="preserve">
          <source>If a database were originally created using SQLite version 3.7.0, then written by SQLite version 3.6.23.1 such that the size of the database file increased, then written again by SQLite version 3.7.0, the database file could go corrupt.</source>
          <target state="translated">데이터베이스가 원래 SQLite 버전 3.7.0을 사용하여 작성된 후 SQLite 버전 3.6.23.1로 데이터베이스 파일의 크기가 증가한 다음 SQLite 버전 3.7.0으로 다시 작성된 경우 데이터베이스 파일이 손상 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f7f861f58b781638426cc97ad65bbe6addfa6a62" translate="yes" xml:space="preserve">
          <source>If a keyword in double quotes (ex: &lt;b&gt;&quot;key&quot;&lt;/b&gt; or &lt;b&gt;&quot;glob&quot;&lt;/b&gt;) is used in a context where it cannot be resolved to an identifier but where a string literal is allowed, then the token is understood to be a string literal instead of an identifier.</source>
          <target state="translated">큰 따옴표로 묶인 키워드 (예 : &lt;b&gt;&quot;key&quot;&lt;/b&gt; 또는 &lt;b&gt;&quot;glob&quot;&lt;/b&gt; )가 식별자로 해석 될 수 없지만 문자열 리터럴이 허용되는 컨텍스트에서 사용되는 경우 토큰은 대신 문자열 리터럴로 이해됩니다. 식별자.</target>
        </trans-unit>
        <trans-unit id="ff734731d1dd61e745b8c19a93e379fd051ea7fb" translate="yes" xml:space="preserve">
          <source>If a keyword in single quotes (ex: &lt;b&gt;'key'&lt;/b&gt; or &lt;b&gt;'glob'&lt;/b&gt;) is used in a context where an identifier is allowed but where a string literal is not allowed, then the token is understood to be an identifier instead of a string literal.</source>
          <target state="translated">작은 따옴표 (예 : &lt;b&gt;'key'&lt;/b&gt; 또는 &lt;b&gt;'glob'&lt;/b&gt; )로 된 키워드 가 식별자는 허용되지만 문자열 리터럴은 허용되지 않는 컨텍스트에서 사용되는 경우 토큰은 문자열 리터럴 대신 식별자로 이해됩니다 .</target>
        </trans-unit>
        <trans-unit id="fd8582b07f28c43cf6305e6462fb4a6db23b8ea7" translate="yes" xml:space="preserve">
          <source>If a matchable phrase is part of a series of phrases connected by NEAR operators in the FTS query expression, then each phrase match must be sufficiently close to other phrase matches of the relevant types to satisfy the NEAR condition.</source>
          <target state="translated">일치하는 문구가 FTS 쿼리 표현식에서 NEAR 연산자로 연결된 일련의 문구의 일부인 경우, 각 문구 일치는 NEAR 조건을 충족시키기 위해 관련 유형의 다른 문구 일치에 충분히 근접해야합니다.</target>
        </trans-unit>
        <trans-unit id="a2a6d03cae632eedbf962d2919113c9e0642d81c" translate="yes" xml:space="preserve">
          <source>If a memory allocation error occurs, sqlite3_create_filename() might return a NULL pointer. The memory obtained from sqlite3_create_filename(X) must be released by a corresponding call to sqlite3_free_filename(Y).</source>
          <target state="translated">메모리 할당 오류가 발생하면 sqlite3_create_filename ()은 NULL 포인터를 반환 할 수 있습니다. sqlite3_create_filename (X)에서 얻은 메모리는 sqlite3_free_filename (Y)에 대한 해당 호출에 의해 해제되어야합니다.</target>
        </trans-unit>
        <trans-unit id="16ba62507a795aad87688bd7a66b598560ff99c0" translate="yes" xml:space="preserve">
          <source>If a named virtual table that uses the dbstat module is desired, then the recommended way to create an instance of the dbstat virtual table is as follows:</source>
          <target state="translated">dbstat 모듈을 사용하는 이름 지정된 가상 테이블이 필요한 경우 dbstat 가상 테이블의 인스턴스를 작성하는 권장 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f0a2ba4a4cc7d08c018b4dbe8137dc10439214b7" translate="yes" xml:space="preserve">
          <source>If a numeric literal has a decimal point or an exponentiation clause or if its magnitude is less than -9223372036854775808 or greater than 9223372036854775807, then it is a floating point literal. Otherwise is it is an integer literal. The &quot;E&quot; character that begins the exponentiation clause of a floating point literal can be either upper or lower case. The &quot;.&quot; character is always used as the decimal point even if the locale setting specifies &quot;,&quot; for this role - the use of &quot;,&quot; for the decimal point would result in syntactic ambiguity.</source>
          <target state="translated">숫자 리터럴에 소수점 또는 지수 절이 있거나 크기가 -9223372036854775808보다 작거나 9223372036854775807보다 큰 경우 부동 소수점 리터럴입니다. 그렇지 않으면 정수 리터럴입니다. 부동 소수점 리터럴의 지수 절을 시작하는 &quot;E&quot;문자는 대문자 또는 소문자 일 수 있습니다. &quot;.&quot; 로케일 설정이이 역할에 &quot;,&quot;를 지정하더라도 문자는 항상 소수점으로 사용됩니다. 소수점에 &quot;,&quot;를 사용하면 구문 상 모호함이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8cf3813aebca15b6b5e1583aeffa06f6925412e6" translate="yes" xml:space="preserve">
          <source>If a page contains no cells (which is only possible for a root page of a table that contains no rows) then the offset to the cell content area will equal the page size minus the bytes of reserved space. If the database uses a 65536-byte page size and the reserved space is zero (the usual value for reserved space) then the cell content offset of an empty page wants to be 65536. However, that integer is too large to be stored in a 2-byte unsigned integer, so a value of 0 is used in its place.</source>
          <target state="translated">페이지에 셀이없는 경우 (행이없는 테이블의 루트 페이지에만 가능) 셀 내용 영역에 대한 오프셋은 페이지 크기에서 예약 된 공간의 바이트를 뺀 값과 같습니다. 데이터베이스가 65536 바이트 페이지 크기를 사용하고 예약 된 공간이 0 (예약 된 공간의 일반적인 값) 인 경우 빈 페이지의 셀 내용 오프셋은 65536이 되려고합니다. 그러나 해당 정수가 너무 커서 부호없는 2 바이트 정수이므로 0 대신 값이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c99e07bc95c7e7eeb5ce8d8ce056128a45cab0ab" translate="yes" xml:space="preserve">
          <source>If a parameter name begins with a &quot;:&quot;, then it is assumed to be a value to bind to the SQL statement before executing it. The value is always bound as text. It is an error if the specified SQL parameter does not exist. For example:</source>
          <target state="translated">매개 변수 이름이 &quot;:&quot;으로 시작하면 실행하기 전에 SQL 문에 바인드 할 값으로 간주됩니다. 값은 항상 텍스트로 바인딩됩니다. 지정된 SQL 매개 변수가 없으면 오류입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a3a6677c34d1c31ace005a4fa6f3930c2040066e" translate="yes" xml:space="preserve">
          <source>If a power failure or operating system crash occurs at this point, the transaction will not rollback when the system reboots even though there are rollback journals present. The difference is the master journal pathname in the header of the rollback journal. Upon restart, SQLite only considers a journal to be hot and will only playback the journal if there is no master journal filename in the header (which is the case for a single-file commit) or if the master journal file still exists on disk.</source>
          <target state="translated">이 시점에서 정전 또는 운영 체제 충돌이 발생하면 롤백 저널이 있어도 시스템을 재부팅 할 때 트랜잭션이 롤백되지 않습니다. 차이점은 롤백 저널의 헤더에있는 마스터 저널 경로 이름입니다. 다시 시작하면 SQLite는 저널이 핫한 것으로 간주하고 헤더에 마스터 저널 파일 이름이 없거나 (단일 파일 커밋의 경우) 마스터 저널 파일이 디스크에 여전히 존재하는 경우에만 저널을 재생합니다.</target>
        </trans-unit>
        <trans-unit id="df0966ae095afce680bcbe564721893f2e27c89b" translate="yes" xml:space="preserve">
          <source>If a power failure or operating system crash occurs at this point, the transaction will not rollback when the system reboots even though there are rollback journals present. The difference is the super-journal pathname in the header of the rollback journal. Upon restart, SQLite only considers a journal to be hot and will only playback the journal if there is no super-journal filename in the header (which is the case for a single-file commit) or if the super-journal file still exists on disk.</source>
          <target state="translated">이 시점에서 정전 또는 운영 체제 충돌이 발생하면 롤백 저널이 있어도 시스템이 재부팅 될 때 트랜잭션이 롤백되지 않습니다. 차이점은 롤백 저널 헤더에있는 수퍼 저널 경로 이름입니다. 다시 시작할 때 SQLite는 저널이 핫이라고 간주하고 헤더에 수퍼 저널 파일 이름이 없거나 (단일 파일 커밋의 경우) 수퍼 저널 파일이 여전히 존재하는 경우에만 저널을 재생합니다. 디스크.</target>
        </trans-unit>
        <trans-unit id="f031e4113363c1780559d56fb503c736f7031cb4" translate="yes" xml:space="preserve">
          <source>If a power failure or operating system failure occurs while copying the database file the backup database may be corrupted following system recovery.</source>
          <target state="translated">데이터베이스 파일을 복사하는 동안 정전 또는 운영 체제 오류가 발생하면 시스템 복구 후 백업 데이터베이스가 손상 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d63fd60747c59caf947d214389cf965d0e528d08" translate="yes" xml:space="preserve">
          <source>If a query contains an ORDER BY clause with multiple terms, it might be that SQLite can use indices to cause rows to come out in the order of some prefix of the terms in the ORDER BY but that later terms in the ORDER BY are not satisfied. In that case, SQLite does block sorting. Suppose the ORDER BY clause has four terms and the natural order of the query results in rows appearing in order of the first two terms. As each row is output by the query engine and enters the sorter, the outputs in the current row corresponding to the first two terms of the ORDER BY are compared against the previous row. If they have changed, the current sort is finished and output and a new sort is started. This results in a slightly faster sort. But the bigger advantages are that many fewer rows need to be held in memory, reducing memory requirements, and outputs can begin to appear before the core query has run to completion.</source>
          <target state="translated">쿼리에 여러 용어가 포함 된 ORDER BY 절이 포함 된 경우 SQLite는 인덱스를 사용하여 ORDER BY에있는 용어의 접두사 순서대로 행이 나오지만 ORDER BY의 이후 용어는 충족되지 않을 수 있습니다. . 이 경우 SQLite는 정렬을 차단합니다. ORDER BY 절에 4 개의 용어가 있고 쿼리의 자연 순서가 처음 두 용어의 순서로 행을 표시한다고 가정하십시오. 각 행이 쿼리 엔진에 의해 출력되고 분류기에 들어가면 ORDER BY의 처음 두 항에 해당하는 현재 행의 출력이 이전 행과 비교됩니다. 변경된 경우 현재 정렬이 완료되고 출력되고 새로운 정렬이 시작됩니다. 이것은 약간 더 빠른 정렬을 초래합니다. 그러나 더 큰 장점은 메모리에 적은 수의 행을 유지하여 메모리 요구 사항을 줄이며핵심 쿼리가 완료되기 전에 출력이 나타나기 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec318f6e2d2904b05a3f02946f0559cc8fefaa28" translate="yes" xml:space="preserve">
          <source>If a query contains no aggregate functions at all, then a GROUP BY clause can be added as a substitute for the DISTINCT ON clause. In other words, output rows are filtered so that only one row is shown for each distinct set of values in the GROUP BY clause. If two or more output rows would have otherwise had the same set of values for the GROUP BY columns, then one of the rows is chosen arbitrarily. (SQLite supports DISTINCT but not DISTINCT ON, whose functionality is provided instead by GROUP BY.)</source>
          <target state="translated">쿼리에 집계 함수가 전혀 포함되지 않은 경우 GROUP BY 절을 DISTINCT ON 절의 대체물로 추가 할 수 있습니다. 즉, 출력 행이 필터링되어 GROUP BY 절의 개별 값 집합마다 하나의 행만 표시됩니다. 두 개 이상의 출력 행에 GROUP BY 열에 대해 동일한 값 세트가있는 경우 행 중 하나가 임의로 선택됩니다. (SQLite는 DISTINCT를 지원하지만 DISTINCT ON은 지원하지 않습니다. 기능은 GROUP BY가 대신 제공합니다.)</target>
        </trans-unit>
        <trans-unit id="bdf63c23188158127b26cd2c4807de45ccf6dea6" translate="yes" xml:space="preserve">
          <source>If a query contains no aggregate functions at all, then a GROUP BY clause can be added as a substitute of DISTINCT ON clause. In other words, output rows are filtered so that only one row is shows for each distinct set of values in the GROUP BY clause. If two or more output rows would have otherwise had the same set of values for the GROUP BY columns, then one of the rows is chosen arbitrarily.</source>
          <target state="translated">쿼리에 집계 함수가 전혀 없으면 DISTINCT ON 절 대신 GROUP BY 절을 추가 할 수 있습니다. 다시 말해, 출력 행은 필터링되어 GROUP BY 절의 각 고유 값 세트에 대해 하나의 행만 표시됩니다. 두 개 이상의 출력 행에 GROUP BY 열에 대해 동일한 값 세트가있는 경우 행 중 하나가 임의로 선택됩니다.</target>
        </trans-unit>
        <trans-unit id="cab66c0bca9a377eb02b4b0ac5090404c2d874c0" translate="yes" xml:space="preserve">
          <source>If a read/write client invokes &lt;a href=&quot;c3ref/file_control&quot;&gt;sqlite3_file_control&lt;/a&gt;(&lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntlpersistwal&quot;&gt;SQLITE_FCNTL_PERSIST_WAL&lt;/a&gt;) prior to shutdown, then at shutdown a checkpoint is still run, but the shm file and wal file are not deleted. This allows subsequent read-only clients to connect to and read the database.</source>
          <target state="translated">읽기 / 쓰기 클라이언트가 종료 전에 &lt;a href=&quot;c3ref/file_control&quot;&gt;sqlite3_file_control&lt;/a&gt; ( &lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntlpersistwal&quot;&gt;SQLITE_FCNTL_PERSIST_WAL&lt;/a&gt; )을 호출하면 종료시 체크 포인트는 여전히 실행되지만 shm 파일 및 wal 파일은 삭제되지 않습니다. 따라서 후속 읽기 전용 클라이언트가 데이터베이스에 연결하여 데이터베이스를 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="337133b7d09a387cf87665a4c7d79ff39c533386" translate="yes" xml:space="preserve">
          <source>If a row with matching primary key values is found, but one or more of the modified non-primary key fields contains a value different from an original row value stored in the changeset, the conflict-handler function is invoked with &lt;a href=&quot;#SQLITE_CHANGESET_CONFLICT&quot;&gt;SQLITE_CHANGESET_DATA&lt;/a&gt; as the second argument. Since UPDATE changes only contain values for non-primary key fields that are to be modified, only those fields need to match the original values to avoid the SQLITE_CHANGESET_DATA conflict-handler callback.</source>
          <target state="translated">기본 키 값이 일치하는 행을 찾았지만 하나 이상의 수정 된 기본이 아닌 키 필드 중 하나 이상이 변경 세트에 저장된 원래 행 값과 다른 값을 포함하는 경우 &lt;a href=&quot;#SQLITE_CHANGESET_CONFLICT&quot;&gt;SQLITE_CHANGESET_DATA&lt;/a&gt; 를 두 번째 인수로 사용하여 충돌 핸들러 함수가 호출됩니다. . UPDATE 변경 사항에는 수정 될 기본이 아닌 키 필드의 값만 포함되므로 SQLITE_CHANGESET_DATA 충돌 핸들러 콜백을 피하기 위해 해당 필드 만 원래 값과 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="35c7138a2b7260bc49d6f60cf430df710c00202b" translate="yes" xml:space="preserve">
          <source>If a row with matching primary key values is found, but one or more of the modified non-primary key fields contains a value different from an original row value stored in the changeset, the conflict-handler function is invoked with &lt;a href=&quot;c_changeset_conflict&quot;&gt;SQLITE_CHANGESET_DATA&lt;/a&gt; as the second argument. Since UPDATE changes only contain values for non-primary key fields that are to be modified, only those fields need to match the original values to avoid the SQLITE_CHANGESET_DATA conflict-handler callback.</source>
          <target state="translated">기본 키 값이 일치하는 행을 찾았지만 하나 이상의 수정 된 기본이 아닌 키 필드 중 하나 이상이 변경 세트에 저장된 원래 행 값과 다른 값을 포함하는 경우 &lt;a href=&quot;c_changeset_conflict&quot;&gt;SQLITE_CHANGESET_DATA&lt;/a&gt; 를 두 번째 인수로 사용하여 충돌 핸들러 함수가 호출됩니다. . UPDATE 변경 사항에는 수정 될 기본이 아닌 키 필드의 값만 포함되므로 SQLITE_CHANGESET_DATA 충돌 핸들러 콜백을 피하기 위해 해당 필드 만 원래 값과 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="1b234b4b89cfdd9943a23340845cb2723771c58a" translate="yes" xml:space="preserve">
          <source>If a row with matching primary key values is found, but one or more of the non-primary key fields contains a value different from the original row value stored in the changeset, the conflict-handler function is invoked with &lt;a href=&quot;#SQLITE_CHANGESET_CONFLICT&quot;&gt;SQLITE_CHANGESET_DATA&lt;/a&gt; as the second argument. If the database table has more columns than are recorded in the changeset, only the values of those non-primary key fields are compared against the current database contents - any trailing database table columns are ignored.</source>
          <target state="translated">기본 키 값이 일치하는 행을 찾았지만 기본 키가 아닌 하나 이상의 필드에 변경 세트에 저장된 원래 행 값과 다른 값이 포함 된 경우 &lt;a href=&quot;#SQLITE_CHANGESET_CONFLICT&quot;&gt;SQLITE_CHANGESET_DATA&lt;/a&gt; 를 두 번째 인수로 사용하여 충돌 핸들러 함수가 호출됩니다 . 데이터베이스 테이블에 변경 세트에 기록 된 것보다 많은 열이있는 경우 기본이 아닌 키 필드의 값만 현재 데이터베이스 내용과 비교되며 후행 데이터베이스 테이블 열은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="ca3b8d6b7470e9a00b63341bcac487b0076109fe" translate="yes" xml:space="preserve">
          <source>If a row with matching primary key values is found, but one or more of the non-primary key fields contains a value different from the original row value stored in the changeset, the conflict-handler function is invoked with &lt;a href=&quot;c_changeset_conflict&quot;&gt;SQLITE_CHANGESET_DATA&lt;/a&gt; as the second argument. If the database table has more columns than are recorded in the changeset, only the values of those non-primary key fields are compared against the current database contents - any trailing database table columns are ignored.</source>
          <target state="translated">기본 키 값이 일치하는 행을 찾았지만 기본 키가 아닌 하나 이상의 필드에 변경 세트에 저장된 원래 행 값과 다른 값이 포함 된 경우 &lt;a href=&quot;c_changeset_conflict&quot;&gt;SQLITE_CHANGESET_DATA&lt;/a&gt; 를 두 번째 인수로 사용하여 충돌 핸들러 함수가 호출됩니다 . 데이터베이스 테이블에 변경 세트에 기록 된 것보다 많은 열이있는 경우 기본이 아닌 키 필드의 값만 현재 데이터베이스 내용과 비교되며 후행 데이터베이스 테이블 열은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="e400ae567f256dbdcc0abe528516e66e2c791942" translate="yes" xml:space="preserve">
          <source>If a schema name is specified as part of an object reference, it must be either &quot;main&quot;, or &quot;temp&quot; or the schema-name of an attached database. Like other SQL identifiers, schema names are case-insensitive. If a schema name is specified, then only that one schema is searched for the named object.</source>
          <target state="translated">스키마 이름이 객체 참조의 일부로 지정된 경우 &quot;main&quot;또는 &quot;temp&quot;또는 연결된 데이터베이스의 스키마 이름이어야합니다. 다른 SQL 식별자와 마찬가지로 스키마 이름은 대소 문자를 구분하지 않습니다. 스키마 이름이 지정되면 해당 스키마에서만 이름 지정된 오브젝트를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="a287d9b64545db85e7dfa26422162809454f183b" translate="yes" xml:space="preserve">
          <source>If a schema-name is specified, it must be either &quot;main&quot;, &quot;temp&quot;, or the name of an &lt;a href=&quot;lang_attach&quot;&gt;attached database&lt;/a&gt;. In this case the new table is created in the named database. If the &quot;TEMP&quot; or &quot;TEMPORARY&quot; keyword occurs between the &quot;CREATE&quot; and &quot;TABLE&quot; then the new table is created in the temp database. It is an error to specify both a schema-name and the TEMP or TEMPORARY keyword, unless the schema-name is &quot;temp&quot;. If no schema name is specified and the TEMP keyword is not present then the table is created in the main database.</source>
          <target state="translated">schema-name이 지정된 경우 &quot;main&quot;, &quot;temp&quot;또는 &lt;a href=&quot;lang_attach&quot;&gt;연결된 데이터베이스&lt;/a&gt; 이름이어야 합니다 . 이 경우 새 테이블이 명명 된 데이터베이스에 생성됩니다. &quot;CREATE&quot;와 &quot;TABLE&quot;사이에 &quot;TEMP&quot;또는 &quot;TEMPORARY&quot;키워드가 발생하면 임시 데이터베이스에 새 테이블이 작성됩니다. schema-name이 &quot;temp&quot;가 아닌 경우 schema-name과 TEMP 또는 TEMPORARY 키워드를 모두 지정하면 오류가 발생합니다. 스키마 이름을 지정하지 않고 TEMP 키워드가 없으면 테이블이 기본 데이터베이스에 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="d186fac3c43b0ebe9fb52f2e0bcd9b8dc9321942" translate="yes" xml:space="preserve">
          <source>If a schema-name is specified, then the view is created in the specified database. It is an error to specify both a schema-name and the TEMP keyword on a VIEW, unless the schema-name is &quot;temp&quot;. If no schema name is specified, and the TEMP keyword is not present, the VIEW is created in the main database.</source>
          <target state="translated">schema-name을 지정하면 지정된 데이터베이스에보기가 작성됩니다. schema-name이 &quot;temp&quot;가 아닌 한 VIEW에서 schema-name과 TEMP 키워드를 모두 지정하면 오류가 발생합니다. 스키마 이름을 지정하지 않고 TEMP 키워드가 없으면 기본 데이터베이스에 VIEW가 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="5a3b25f9ef77a5c2a55ede994e4212a6c3bae634" translate="yes" xml:space="preserve">
          <source>If a search token (on the right-hand side of the MATCH operator) in &lt;a href=&quot;fts3#fts4&quot;&gt;FTS4&lt;/a&gt; begins with &quot;^&quot; then that token must be the first in its field of the document. &lt;b&gt;** Potentially Incompatible Change **&lt;/b&gt;</source>
          <target state="translated">&lt;a href=&quot;fts3#fts4&quot;&gt;FTS4&lt;/a&gt; 의 검색 토큰 (MATCH 연산자의 오른쪽에 있음) 이 &quot;^&quot;로 시작하면 해당 토큰은 문서 필드에서 첫 번째 토큰이어야합니다. &lt;b&gt;** 잠재적으로 호환되지 않는 변경 **&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="e0b0e745b5660b6e63d47617f06b59c6fe2aec60" translate="yes" xml:space="preserve">
          <source>If a separate thread makes changes on the same database connection while &lt;a href=&quot;#sqlite3_changes&quot;&gt;sqlite3_changes()&lt;/a&gt; is running then the value returned is unpredictable and not meaningful.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_changes&quot;&gt;sqlite3_changes ()&lt;/a&gt; 가 실행되는 동안 별도의 스레드가 동일한 데이터베이스 연결을 변경하면 반환 된 값을 예측할 수없고 의미가 없습니다.</target>
        </trans-unit>
        <trans-unit id="e161385bf705ff3ca3325998e8904218252e0a24" translate="yes" xml:space="preserve">
          <source>If a separate thread makes changes on the same database connection while &lt;a href=&quot;#sqlite3_total_changes&quot;&gt;sqlite3_total_changes()&lt;/a&gt; is running then the value returned is unpredictable and not meaningful.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_total_changes&quot;&gt;sqlite3_total_changes ()&lt;/a&gt; 가 실행되는 동안 별도의 스레드가 동일한 데이터베이스 연결을 변경하면 반환 된 값을 예측할 수없고 의미가 없습니다.</target>
        </trans-unit>
        <trans-unit id="48949b30f7cc8dfe518df452770028dcf8268e04" translate="yes" xml:space="preserve">
          <source>If a separate thread makes changes on the same database connection while &lt;a href=&quot;changes&quot;&gt;sqlite3_changes()&lt;/a&gt; is running then the value returned is unpredictable and not meaningful.</source>
          <target state="translated">&lt;a href=&quot;changes&quot;&gt;sqlite3_changes ()&lt;/a&gt; 가 실행되는 동안 별도의 스레드가 동일한 데이터베이스 연결을 변경하면 반환 된 값을 예측할 수없고 의미가 없습니다.</target>
        </trans-unit>
        <trans-unit id="e69017ebf8db42f4c918537142f058b4e1e4b99c" translate="yes" xml:space="preserve">
          <source>If a separate thread makes changes on the same database connection while &lt;a href=&quot;total_changes&quot;&gt;sqlite3_total_changes()&lt;/a&gt; is running then the value returned is unpredictable and not meaningful.</source>
          <target state="translated">&lt;a href=&quot;total_changes&quot;&gt;sqlite3_total_changes ()&lt;/a&gt; 가 실행되는 동안 별도의 스레드가 동일한 데이터베이스 연결을 변경하면 반환 된 값을 예측할 수없고 의미가 없습니다.</target>
        </trans-unit>
        <trans-unit id="67e0dff317f2ea719a9272889d4afc4730b1b5fc" translate="yes" xml:space="preserve">
          <source>If a separate thread performs a new &lt;a href=&quot;../lang_insert&quot;&gt;INSERT&lt;/a&gt; on the same database connection while the &lt;a href=&quot;last_insert_rowid&quot;&gt;sqlite3_last_insert_rowid()&lt;/a&gt; function is running and thus changes the last insert &lt;a href=&quot;../lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt;, then the value returned by &lt;a href=&quot;last_insert_rowid&quot;&gt;sqlite3_last_insert_rowid()&lt;/a&gt; is unpredictable and might not equal either the old or the new last insert &lt;a href=&quot;../lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;last_insert_rowid&quot;&gt;sqlite3_last_insert_rowid ()&lt;/a&gt; 함수가 실행되는 동안 별도의 스레드 가 동일한 데이터베이스 연결에서 새 &lt;a href=&quot;../lang_insert&quot;&gt;INSERT&lt;/a&gt; 를 수행 하여 마지막 삽입 &lt;a href=&quot;../lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt; 를 변경하면 &lt;a href=&quot;last_insert_rowid&quot;&gt;sqlite3_last_insert_rowid ()에&lt;/a&gt; 의해 리턴 된 값을 예측할 수없고 이전 또는 새로운 마지막 값과 같지 않을 수 있습니다 &lt;a href=&quot;../lang_createtable#rowid&quot;&gt;rowid를&lt;/a&gt; 삽입하십시오 .</target>
        </trans-unit>
        <trans-unit id="f8a05ae1d1d14adcdf537d4865ddc934cf60a0a4" translate="yes" xml:space="preserve">
          <source>If a separate thread performs a new &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt; on the same database connection while the &lt;a href=&quot;#sqlite3_last_insert_rowid&quot;&gt;sqlite3_last_insert_rowid()&lt;/a&gt; function is running and thus changes the last insert &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt;, then the value returned by &lt;a href=&quot;#sqlite3_last_insert_rowid&quot;&gt;sqlite3_last_insert_rowid()&lt;/a&gt; is unpredictable and might not equal either the old or the new last insert &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_last_insert_rowid&quot;&gt;sqlite3_last_insert_rowid ()&lt;/a&gt; 함수가 실행되는 동안 별도의 스레드 가 동일한 데이터베이스 연결에서 새 &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt; 를 수행 하여 마지막 삽입 &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt; 를 변경하면 &lt;a href=&quot;#sqlite3_last_insert_rowid&quot;&gt;sqlite3_last_insert_rowid ()에&lt;/a&gt; 의해 리턴 된 값을 예측할 수없고 이전 또는 새로운 마지막 값과 같지 않을 수 있습니다 &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid를&lt;/a&gt; 삽입하십시오 .</target>
        </trans-unit>
        <trans-unit id="9c0a40f4902327b395568a304aa57a5c4039b9e5" translate="yes" xml:space="preserve">
          <source>If a single database file has multiple links (either hard or soft links) then that is just another way of saying that the file has multiple names. If two or more processes open the database using different names, then they will use different rollback journals and WAL files. That means that if one process crashes, the other process will be unable to recover the transaction in progress because it will be looking in the wrong place for the appropriate journal.</source>
          <target state="translated">단일 데이터베이스 파일에 여러 개의 링크 (하드 또는 소프트 링크)가있는 경우 파일 이름이 여러 개인 것입니다. 둘 이상의 프로세스가 다른 이름을 사용하여 데이터베이스를 열면 다른 롤백 저널 및 WAL 파일을 사용합니다. 즉, 한 프로세스가 충돌하면 다른 프로세스가 해당 저널에 대해 잘못된 위치를 찾고 있기 때문에 진행중인 트랜잭션을 복구 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="54992194ecdfbf1a36948d0111a0401fc51b1ec9" translate="yes" xml:space="preserve">
          <source>If a single row is affected by more than one operation within a session, then the change is considered indirect if all operations meet the criteria for an indirect change above, or direct otherwise.</source>
          <target state="translated">단일 행이 세션 내에서 둘 이상의 작업에 의해 영향을받는 경우 모든 작업이 위의 간접 변경 기준을 충족하면 변경이 간접적 인 것으로 간주되거나 그렇지 않으면 직접 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="8aed35bc8fc658c89e5539bc9b828e9558656314" translate="yes" xml:space="preserve">
          <source>If a statement modifies the contents of the database so that an immediate foreign key constraint is in violation at the conclusion the statement, an exception is thrown and the effects of the statement are reverted. By contrast, if a statement modifies the contents of the database such that a deferred foreign key constraint is violated, the violation is not reported immediately. Deferred foreign key constraints are not checked until the transaction tries to &lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt;. For as long as the user has an open transaction, the database is allowed to exist in a state that violates any number of deferred foreign key constraints. However, &lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt; will fail as long as foreign key constraints remain in violation.</source>
          <target state="translated">명령문이 결론을 내릴 때 즉시 외래 키 제한 조건이 위반되도록 명령문이 데이터베이스의 컨텐츠를 수정하면 예외가 발생하고 명령문의 영향이 되돌려집니다. 반대로, 지연된 외래 키 제약 조건을 위반하도록 명령문이 데이터베이스의 내용을 수정하면 위반이 즉시보고되지 않습니다. 트랜잭션이 &lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt; 하려고 시도 할 때까지 지연된 외래 키 제한 조건이 점검되지 않습니다 . 사용자에게 공개 트랜잭션이있는 한 지연된 외래 키 제약 조건을 위반하는 상태로 데이터베이스가 존재할 수 있습니다. 그러나 외래 키 제약 조건을 위반하지 않으면 &lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt; 가 실패합니다.</target>
        </trans-unit>
        <trans-unit id="4a9fe68ac2f3c48ea32a43f2c5cf9be89d342ee4" translate="yes" xml:space="preserve">
          <source>If a subquery cannot be &lt;a href=&quot;optoverview#flattening&quot;&gt;flattened&lt;/a&gt; into the outer query, it might still be possible to enhance performance by &quot;pushing down&quot; WHERE clause terms from the outer query into the subquery. Consider an example:</source>
          <target state="translated">하위 쿼리를 외부 쿼리 로 &lt;a href=&quot;optoverview#flattening&quot;&gt;병합&lt;/a&gt; 할 수없는 경우 WHERE 절 용어를 외부 쿼리에서 하위 쿼리로 &quot;푸시 다운&quot;하여 성능을 향상시킬 수 있습니다. 예를 보자.</target>
        </trans-unit>
        <trans-unit id="cfbdc72faddc3dd92eaf2d66d72d9166e0ce65e3" translate="yes" xml:space="preserve">
          <source>If a system failure occurs at any time after a &quot;delete file&quot; operation (call to the VFS xDelete() method) returns successfully, it is assumed that the file-system will not contain the deleted file following system recovery.</source>
          <target state="translated">&quot;파일 삭제&quot;조작 (VFS xDelete () 메소드 호출)이 성공적으로 리턴 된 후 시스템 장애가 발생하면 시스템 복구 후 파일 시스템에 삭제 된 파일이 포함되지 않는 것으로 가정합니다.</target>
        </trans-unit>
        <trans-unit id="c32e1e0b557aefde59c28d931cf3e5d6733099fd" translate="yes" xml:space="preserve">
          <source>If a system failure occurs during a &quot;delete file&quot; operation, it is assumed that following system recovery the file-system will either contain the file being deleted in the state it was in before the operation was attempted, or not contain the file at all. It is assumed that it is not possible for the file to have become corrupted purely as a result of a failure occurring during a &quot;delete file&quot; operation.</source>
          <target state="translated">&quot;파일 삭제&quot;작업 중 시스템 오류가 발생하면 시스템 복구 후 파일 시스템에 작업을 시도하기 전의 상태에서 삭제중인 파일이 포함되거나 파일이 전혀 포함되지 않은 것으로 가정합니다. . &quot;파일 삭제&quot;조작 중에 발생하는 실패로 인해 파일이 완전히 손상된 것은 불가능하다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="91f96ef24748138cdd82c09ceabe7f648ae9cf43" translate="yes" xml:space="preserve">
          <source>If a system failure occurs during or after a &quot;create file&quot; operation, but before the created file has been</source>
          <target state="translated">&quot;파일 작성&quot;조작 중 또는 이후, 그러나 작성된 파일이 작성되기 전에 시스템 장애가 발생한 경우</target>
        </trans-unit>
        <trans-unit id="1fcfee495c57582bc4c6e63019680717056464ec" translate="yes" xml:space="preserve">
          <source>If a system failure occurs during or after a &quot;truncate file&quot; operation, but before the truncated file has been</source>
          <target state="translated">&quot;파일 자르기&quot;조작 중 또는 후에 시스템이 잘 리거나 잘린 파일 이전에 시스템 장애가 발생한 경우</target>
        </trans-unit>
        <trans-unit id="e3c60bc044d7ebf2be0e926e292ed7263d6ed54a" translate="yes" xml:space="preserve">
          <source>If a system failure occurs during or after a &quot;write file&quot; operation that causes the file to grow, but before the corresponding file has been</source>
          <target state="translated">&quot;파일 쓰기&quot;조작 중 또는 후에 시스템 장애가 발생하여 파일이 커지지 만 해당 파일이 커지기 전에</target>
        </trans-unit>
        <trans-unit id="0de8e98595413448f2b535870f8da207b8048237" translate="yes" xml:space="preserve">
          <source>If a system failure occurs during or after a &quot;write file&quot; operation, but before the corresponding file has been</source>
          <target state="translated">&quot;파일 쓰기&quot;작업 중 또는 이후에 해당 파일이 실행되기 전에 시스템 오류가 발생한 경우</target>
        </trans-unit>
        <trans-unit id="12d84c274c03171c71b26275c99f75f3392362a6" translate="yes" xml:space="preserve">
          <source>If a system failure occurs on a system that supports the</source>
          <target state="translated">시스템을 지원하는 시스템에서 시스템 오류가 발생한 경우</target>
        </trans-unit>
        <trans-unit id="70f739b455c168080412690c97f5940222b8f766" translate="yes" xml:space="preserve">
          <source>If a system supports</source>
          <target state="translated">시스템이 지원하는 경우</target>
        </trans-unit>
        <trans-unit id="ec9800aa0fd4fbf6e94d5e57566c8304e2f2782b" translate="yes" xml:space="preserve">
          <source>If a system supports the</source>
          <target state="translated">시스템이</target>
        </trans-unit>
        <trans-unit id="16f55a3959edd0a92c0395b9cf4c3468da074f4f" translate="yes" xml:space="preserve">
          <source>If a table contains a column of type &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt;, then that column becomes an alias for the ROWID. You can then access the ROWID using any of four different names, the original three names described above or the name given to the &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt; column. All these names are aliases for one another and work equally well in any context.</source>
          <target state="translated">테이블에 &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt; 유형의 열이 포함 된 경우 해당 열은 ROWID의 별명이됩니다. 그런 다음 네 가지 다른 이름, 위에서 설명한 원래 세 가지 이름 또는 &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt; 열에 지정된 이름을 사용하여 ROWID에 액세스 할 수 있습니다 . 이 모든 이름은 서로의 별명이며 모든 상황에서 동일하게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="a73b6736040e74c7d625fd213eca9757c75eee19" translate="yes" xml:space="preserve">
          <source>If a table has a single column primary key and the declared type of that column is &quot;INTEGER&quot; and the table is not a &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; table, then the column is known as an &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt;. See &lt;a href=&quot;lang_createtable#rowid&quot;&gt;below&lt;/a&gt; for a description of the special properties and behaviors associated with an &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt;.</source>
          <target state="translated">테이블에 단일 컬럼 기본 키가 있고 해당 컬럼의 선언 된 유형이 &quot;INTEGER&quot;이고 테이블이 &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; 테이블 이 아닌 경우 컬럼을 &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY라고&lt;/a&gt; 합니다. &lt;a href=&quot;lang_createtable#rowid&quot;&gt;정수 PRIMARY KEY&lt;/a&gt; 와 관련된 특수 속성 및 동작에 대한 설명은 &lt;a href=&quot;lang_createtable#rowid&quot;&gt;아래&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5e353db8a7a970978b864076f23349bbe29b3cd1" translate="yes" xml:space="preserve">
          <source>If a term in X is of the form &quot;z IS NOT NULL&quot; and if a term in W is a comparison operator on &quot;z&quot; other than &quot;IS&quot;, then those terms match.</source>
          <target state="translated">X의 용어가 &quot;z IS NOT NULL&quot;형식이고 W의 용어가 &quot;IS&quot;이외의 &quot;z&quot;의 비교 연산자 인 경우 해당 용어가 일치합니다.</target>
        </trans-unit>
        <trans-unit id="d7704041f8ff8a11a4c662eef3d671025a3e5ebe" translate="yes" xml:space="preserve">
          <source>If a term of the WHERE clause is of the following form:</source>
          <target state="translated">WHERE 절의 용어가 다음 형식 인 경우 :</target>
        </trans-unit>
        <trans-unit id="e5d671a1040d0448cbcd3997833359da102571a4" translate="yes" xml:space="preserve">
          <source>If a transaction involves multiple databases, then a more complex commit sequence is used, as follows:</source>
          <target state="translated">트랜잭션에 여러 데이터베이스가 포함 된 경우 다음과 같이 더 복잡한 커밋 시퀀스가 ​​사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1b08d45fd51c4591fce14d3b424e9dccc579bef5" translate="yes" xml:space="preserve">
          <source>If a transaction is aborted due to an application crash, an operating system crash, or a hardware power failure or crash, then the database may be left in an inconsistent state. The next time SQLite attempts to open the database file, the presence of the rollback journal file will be detected and the journal will be automatically played back to restore the database to its state at the start of the incomplete transaction.</source>
          <target state="translated">응용 프로그램 충돌, 운영 체제 충돌 또는 하드웨어 정전 또는 충돌로 인해 트랜잭션이 중단되면 데이터베이스가 일관성이없는 상태로 남아있을 수 있습니다. 다음에 SQLite가 데이터베이스 파일을 열려고 시도하면 롤백 저널 파일이 있는지 감지하고 저널이 자동으로 재생되어 데이터베이스가 불완전한 트랜잭션이 시작될 때의 상태로 복원됩니다.</target>
        </trans-unit>
        <trans-unit id="b139c7ece8944c0ce3ad448cfb0c14ea14a36c67" translate="yes" xml:space="preserve">
          <source>If a write-transaction is open on &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt; D when the &lt;a href=&quot;#sqlite3_db_cacheflush&quot;&gt;sqlite3_db_cacheflush(D)&lt;/a&gt; interface invoked, any dirty pages in the pager-cache that are not currently in use are written out to disk. A dirty page may be in use if a database cursor created by an active SQL statement is reading from it, or if it is page 1 of a database file (page 1 is always &quot;in use&quot;). The &lt;a href=&quot;#sqlite3_db_cacheflush&quot;&gt;sqlite3_db_cacheflush(D)&lt;/a&gt; interface flushes caches for all schemas - &quot;main&quot;, &quot;temp&quot;, and any &lt;a href=&quot;lang_attach&quot;&gt;attached&lt;/a&gt; databases.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3_db_cacheflush&quot;&gt;sqlite3_db_cacheflush (D)&lt;/a&gt; 인터페이스가 호출 될 때 &lt;a href=&quot;#sqlite3&quot;&gt;데이터베이스 연결&lt;/a&gt; D 에서 쓰기 트랜잭션이 열린 경우 현재 사용 중이 아닌 pager-cache의 더티 페이지는 디스크에 기록됩니다. 활성 SQL 문으로 작성된 데이터베이스 커서가이를 읽거나 데이터베이스 파일의 1 페이지 인 경우 (1 페이지는 항상 &quot;사용 중&quot;) 더티 페이지가 사용 중일 수 있습니다. &lt;a href=&quot;#sqlite3_db_cacheflush&quot;&gt;sqlite3_db_cacheflush (D)&lt;/a&gt; 인터페이스는 모든 스키마에 대한 캐시를 플러시 - &quot;주&quot;, &quot;온도&quot;, 및 &lt;a href=&quot;lang_attach&quot;&gt;부착&lt;/a&gt; 데이터베이스.</target>
        </trans-unit>
        <trans-unit id="94598ac271e5cdca4a0d9c950ece2e2fde3c85ae" translate="yes" xml:space="preserve">
          <source>If a write-transaction is open on &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt; D when the &lt;a href=&quot;db_cacheflush&quot;&gt;sqlite3_db_cacheflush(D)&lt;/a&gt; interface invoked, any dirty pages in the pager-cache that are not currently in use are written out to disk. A dirty page may be in use if a database cursor created by an active SQL statement is reading from it, or if it is page 1 of a database file (page 1 is always &quot;in use&quot;). The &lt;a href=&quot;db_cacheflush&quot;&gt;sqlite3_db_cacheflush(D)&lt;/a&gt; interface flushes caches for all schemas - &quot;main&quot;, &quot;temp&quot;, and any &lt;a href=&quot;../lang_attach&quot;&gt;attached&lt;/a&gt; databases.</source>
          <target state="translated">&lt;a href=&quot;db_cacheflush&quot;&gt;sqlite3_db_cacheflush (D)&lt;/a&gt; 인터페이스가 호출 될 때 &lt;a href=&quot;sqlite3&quot;&gt;데이터베이스 연결&lt;/a&gt; D 에서 쓰기 트랜잭션이 열린 경우 현재 사용 중이 아닌 pager-cache의 더티 페이지는 디스크에 기록됩니다. 활성 SQL 문으로 작성된 데이터베이스 커서가이를 읽거나 데이터베이스 파일의 1 페이지 인 경우 (1 페이지는 항상 &quot;사용 중&quot;) 더티 페이지가 사용 중일 수 있습니다. &lt;a href=&quot;db_cacheflush&quot;&gt;sqlite3_db_cacheflush (D)&lt;/a&gt; 인터페이스는 모든 스키마에 대한 캐시를 플러시 - &quot;주&quot;, &quot;온도&quot;, 및 &lt;a href=&quot;../lang_attach&quot;&gt;부착&lt;/a&gt; 데이터베이스.</target>
        </trans-unit>
        <trans-unit id="9d687ea67d2673f11d5b429c0195a169c2caa77a" translate="yes" xml:space="preserve">
          <source>If a write-transaction is started and the Vdbe.usesStmtJournal flag is true (this flag is set if the Vdbe may modify more than one row and may throw an ABORT exception), a statement transaction may also be opened. More specifically, a statement transaction is opened iff the database connection is currently not in autocommit mode, or if there are other active statements. A statement transaction allows the changes made by this VDBE to be rolled back after an error without having to roll back the entire transaction. If no error is encountered, the statement transaction will automatically commit when the VDBE halts.</source>
          <target state="translated">쓰기 트랜잭션이 시작되고 Vdbe.usesStmtJournal 플래그가 true 인 경우 (이 플래그는 Vdbe가 둘 이상의 행을 수정하고 ABORT 예외를 발생시킬 수있는 경우 설정 됨) 명령문 트랜잭션도 열 수 있습니다. 보다 구체적으로, 데이터베이스 연결이 현재 자동 커미트 모드가 아니거나 다른 활성 명령문이있는 경우 명령문 트랜잭션이 열립니다. 명령문 트랜잭션을 사용하면 전체 트랜잭션을 롤백 할 필요없이 오류가 발생한 후이 VDBE에 의해 작성된 변경 사항을 롤백 할 수 있습니다. 오류가 발생하지 않으면 VDBE가 중지 될 때 명령문 트랜잭션이 자동으로 커미트됩니다.</target>
        </trans-unit>
        <trans-unit id="7e874d6b40d57619d9fa5fb8dd75a92de53ed059" translate="yes" xml:space="preserve">
          <source>If all three of the steps enumerated above are executed successfully, then it is safe to modify the content of the</source>
          <target state="translated">위에 열거 된 세 단계가 모두 성공적으로 실행되면 내용을 수정하는 것이 안전합니다.</target>
        </trans-unit>
        <trans-unit id="8a9cfb8256efd43eaa74ef64ff226cfbf427865f" translate="yes" xml:space="preserve">
          <source>If an &quot;ALTER TABLE ... RENAME TO&quot; command is used to rename a table that is the parent table of one or more foreign key constraints, the definitions of the foreign key constraints are modified to refer to the parent table by its new name. The text of the child CREATE TABLE statement or statements stored in the &lt;a href=&quot;schematab&quot;&gt;sqlite_schema table&lt;/a&gt; are modified to reflect the new parent table name.</source>
          <target state="translated">&quot;ALTER TABLE ... RENAME TO&quot;명령을 사용하여 하나 이상의 외래 키 제약 조건의 부모 테이블 인 테이블의 이름을 바꾸면 외래 키 제약 조건의 정의가 새 이름으로 부모 테이블을 참조하도록 수정됩니다. . &lt;a href=&quot;schematab&quot;&gt;sqlite_schema 테이블에&lt;/a&gt; 저장된 하위 CREATE TABLE 문의 텍스트 는 새 상위 테이블 이름을 반영하도록 수정됩니다.</target>
        </trans-unit>
        <trans-unit id="76124bb023821e31ac6f5cbf1f8b54083a3ec643" translate="yes" xml:space="preserve">
          <source>If an &quot;ALTER TABLE ... RENAME TO&quot; command is used to rename a table that is the parent table of one or more foreign key constraints, the definitions of the foreign key constraints are modified to refer to the parent table by its new name. The text of the child CREATE TABLE statement or statements stored in the sqlite_master table are modified to reflect the new parent table name.</source>
          <target state="translated">&quot;ALTER TABLE ... RENAME TO&quot;명령을 사용하여 하나 이상의 외래 키 제약 조건의 부모 테이블 인 테이블의 이름을 바꾸면 외래 키 제약 조건의 정의가 새 이름으로 부모 테이블을 참조하도록 수정됩니다. . 자식 CREATE TABLE 문의 텍스트 또는 sqlite_master 테이블에 저장된 명령문은 새 부모 테이블 이름을 반영하도록 수정됩니다.</target>
        </trans-unit>
        <trans-unit id="7603e9a69b7a72c62bbc679327133633953ff9aa" translate="yes" xml:space="preserve">
          <source>If an &lt;a href=&quot;#sqlite3&quot;&gt;sqlite3&lt;/a&gt; object is destroyed while a transaction is open, the transaction is automatically rolled back.</source>
          <target state="translated">는 IF &lt;a href=&quot;#sqlite3&quot;&gt;sqlite3를&lt;/a&gt; 트랜잭션이 열려있는 동안 개체가 소멸 트랜잭션이 자동으로 롤백됩니다.</target>
        </trans-unit>
        <trans-unit id="53a3481d0fa9e30b2f0d27a6044ee94e1a62bb9b" translate="yes" xml:space="preserve">
          <source>If an &lt;a href=&quot;../lang_insert&quot;&gt;INSERT&lt;/a&gt; occurs within a trigger then this routine will return the &lt;a href=&quot;../lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt; of the inserted row as long as the trigger is running. Once the trigger program ends, the value returned by this routine reverts to what it was before the trigger was fired.</source>
          <target state="translated">경우 &lt;a href=&quot;../lang_insert&quot;&gt;INSERT는&lt;/a&gt; 트리거 내에서 발생하는 다음이 루틴은 반환 &lt;a href=&quot;../lang_createtable#rowid&quot;&gt;ROWID&lt;/a&gt; 한 트리거가 실행되는 삽입 된 행의를. 트리거 프로그램이 종료되면이 루틴이 리턴 한 값이 트리거가 시작되기 전의 값으로 되돌아갑니다.</target>
        </trans-unit>
        <trans-unit id="877e1b4a7430ba11b48b32c5598ad0c65dc34442" translate="yes" xml:space="preserve">
          <source>If an &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt; occurs within a trigger then this routine will return the &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt; of the inserted row as long as the trigger is running. Once the trigger program ends, the value returned by this routine reverts to what it was before the trigger was fired.</source>
          <target state="translated">경우 &lt;a href=&quot;lang_insert&quot;&gt;INSERT는&lt;/a&gt; 트리거 내에서 발생하는 다음이 루틴은 반환 &lt;a href=&quot;lang_createtable#rowid&quot;&gt;ROWID&lt;/a&gt; 한 트리거가 실행되는 삽입 된 행의를. 트리거 프로그램이 종료되면이 루틴이 리턴 한 값이 트리거가 시작되기 전의 값으로 되돌아갑니다.</target>
        </trans-unit>
        <trans-unit id="b95cb40fc8352b696796b3bff79e2f006b1ce07a" translate="yes" xml:space="preserve">
          <source>If an &lt;a href=&quot;sqlite3&quot;&gt;sqlite3&lt;/a&gt; object is destroyed while a transaction is open, the transaction is automatically rolled back.</source>
          <target state="translated">는 IF &lt;a href=&quot;sqlite3&quot;&gt;sqlite3를&lt;/a&gt; 트랜잭션이 열려있는 동안 개체가 소멸 트랜잭션이 자동으로 롤백됩니다.</target>
        </trans-unit>
        <trans-unit id="9f62d9384e44621989efc3c00f1a3ba721b2e39d" translate="yes" xml:space="preserve">
          <source>If an FTS5 table is configured with columnsize=0 but is not a &lt;a href=&quot;fts5#contentless_tables&quot;&gt;contentless table&lt;/a&gt;, the xColumnSize API function still works, but runs much more slowly. In this case, instead of reading the value to return directly from the database, it reads the text value itself and count the tokens within it on demand.</source>
          <target state="translated">FTS5 테이블이 columnsize = 0으로 구성되었지만 컨텐츠가없는 &lt;a href=&quot;fts5#contentless_tables&quot;&gt;테이블&lt;/a&gt; 이 아닌 경우 xColumnSize API 함수는 여전히 작동하지만 훨씬 느리게 실행됩니다. 이 경우 데이터베이스에서 직접 리턴 할 값을 읽는 대신 텍스트 값 자체를 읽고 요청시 해당 값 내의 토큰을 계산합니다.</target>
        </trans-unit>
        <trans-unit id="a593df8166351f80d07eb58cb262614d9dbc8634" translate="yes" xml:space="preserve">
          <source>If an INSERT statement attempts to insert a NULL value into a rowid or integer primary key column, the system chooses an integer value to use as the rowid automatically. A detailed description of how this is done is provided &lt;a href=&quot;autoinc&quot;&gt;separately&lt;/a&gt;.</source>
          <target state="translated">INSERT 문이 rowid 또는 integer 기본 키 열에 NULL 값을 삽입하려고 시도하면 시스템은 rowid로 자동 사용할 정수 값을 선택합니다. 이 작업을 수행하는 방법에 대한 자세한 설명은 &lt;a href=&quot;autoinc&quot;&gt;별도로&lt;/a&gt; 제공 됩니다 .</target>
        </trans-unit>
        <trans-unit id="ba4158b1467dce3a1f2ceab9abb8de00b0fe4463" translate="yes" xml:space="preserve">
          <source>If an ORDER BY clause is present, it determines the order in which rows are extracted from the queue in step 2a. If there is no ORDER BY clause, then the order in which rows are extracted is undefined. (In the current implementation, the queue becomes a FIFO if the ORDER BY clause is omitted, but applications should not depend on that fact since it might change.)</source>
          <target state="translated">ORDER BY 절이 존재하면 2a 단계에서 큐에서 행이 추출되는 순서를 판별합니다. ORDER BY 절이 없으면 행이 추출되는 순서가 정의되지 않습니다. 현재 구현에서 ORDER BY 절을 생략하면 대기열이 FIFO가되지만 응용 프로그램은 변경 될 수 있으므로 해당 사실에 의존해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="22141c686821647d4155d6b151a8d8fa154cd1a8" translate="yes" xml:space="preserve">
          <source>If an SQL operation is very nearly finished at the time when sqlite3_interrupt() is called, then it might not have an opportunity to be interrupted and might continue to completion.</source>
          <target state="translated">sqlite3_interrupt ()가 호출 될 때 SQL 조작이 거의 완료된 경우 중단 될 기회가없고 계속 완료 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="923eabd2cf996c975383b0dccd3e5fb8dc063dde" translate="yes" xml:space="preserve">
          <source>If an SQL statement is limited to be a million bytes in length, then obviously you will not be able to insert multi-million byte strings by embedding them as literals inside of INSERT statements. But you should not do that anyway. Use host &lt;a href=&quot;lang_expr#varparam&quot;&gt;parameters&lt;/a&gt; for your data. Prepare short SQL statements like this:</source>
          <target state="translated">SQL 문의 길이가 백만 바이트로 제한되면 수백만 바이트 문자열을 INSERT 문에 리터럴로 삽입하여 삽입 할 수 없습니다. 그러나 어쨌든 그렇게해서는 안됩니다. 데이터에 호스트 &lt;a href=&quot;lang_expr#varparam&quot;&gt;매개 변수&lt;/a&gt; 를 사용하십시오 . 다음과 같은 짧은 SQL 문을 준비하십시오.</target>
        </trans-unit>
        <trans-unit id="a519000750401db43c985f6fefc862d71c74bede" translate="yes" xml:space="preserve">
          <source>If an SQL table is created using the &quot;WITHOUT ROWID&quot; clause at the end of its CREATE TABLE statement, then that table is a &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; table and uses a different on-disk representation. A WITHOUT ROWID table uses an index b-tree rather than a table b-tree for storage. The key for each entry in the WITHOUT ROWID b-tree is a record composed of the columns of the PRIMARY KEY followed by all remaining columns of the table. The primary key columns appear in the order they they were declared in the PRIMARY KEY clause and the remaining columns appear in the order they occur in the CREATE TABLE statement.</source>
          <target state="translated">CREATE TABLE 문 끝에서 &quot;WITHOUT ROWID&quot;절을 사용하여 SQL 테이블을 작성하는 경우 해당 테이블은 &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; 테이블이며 다른 디스크 상 표현을 사용합니다. WITHOUT ROWID 테이블은 저장을 위해 테이블 ​​b- 트리 대신 인덱스 b- 트리를 사용합니다. WITHOUT ROWID b- 트리의 각 항목에 대한 키는 PRIMARY KEY의 열과 테이블의 나머지 열이 모두 포함 된 레코드입니다. 기본 키 열은 PRIMARY KEY 절에서 선언 된 순서대로 나타나고 나머지 열은 CREATE TABLE 문에서 나타나는 순서대로 나타납니다.</target>
        </trans-unit>
        <trans-unit id="7a1f15ef308e23ec2fc80a29e25882265ebf0786" translate="yes" xml:space="preserve">
          <source>If an UPDATE statement attempts to set an integer primary key or rowid column to a NULL or blob value, or to a string or real value that cannot be losslessly converted to an integer, a &quot;datatype mismatch&quot; error occurs and the statement is aborted. If an INSERT statement attempts to insert a blob value, or a string or real value that cannot be losslessly converted to an integer into an integer primary key or rowid column, a &quot;datatype mismatch&quot; error occurs and the statement is aborted.</source>
          <target state="translated">UPDATE 문이 정수 기본 키 또는 rowid 열을 NULL 또는 BLOB 값으로 설정하거나 손실없이 정수로 변환 할 수없는 문자열 또는 실수 값으로 설정하려고하면 &quot;데이터 유형 불일치&quot;오류가 발생하고 명령문이 중단됩니다. INSERT 문이 정수로 정수로 변환 할 수없는 BLOB 값 또는 문자열 또는 실수 값을 정수 기본 키 또는 rowid 열에 삽입하려고하면 &quot;데이터 유형 불일치&quot;오류가 발생하고 명령문이 중단됩니다.</target>
        </trans-unit>
        <trans-unit id="284b34da69fbf9cd89926df318af7634184253b9" translate="yes" xml:space="preserve">
          <source>If an UPDATE statement has a LIMIT clause, the maximum number of rows that will be updated is found by evaluating the accompanying expression and casting it to an integer value. A negative value is interpreted as &quot;no limit&quot;.</source>
          <target state="translated">UPDATE 문에 LIMIT 절이 있으면 갱신 될 최대 행 수는 수반되는 표현식을 평가하고이를 정수 값으로 캐스트하여 찾습니다. 음수 값은 &quot;제한 없음&quot;으로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="35654cca0e06875d8f71c06cdb825a502007ac27" translate="yes" xml:space="preserve">
          <source>If an application issues a SELECT statement on a single table like &quot;</source>
          <target state="translated">응용 프로그램이 &quot;와 같은 단일 테이블에서 SELECT 문을 발행하는 경우</target>
        </trans-unit>
        <trans-unit id="3c9847a3fc8345f21ef2aae877b6da29936db6dc" translate="yes" xml:space="preserve">
          <source>If an application puts SQLite in &lt;a href=&quot;pragma#pragma_locking_mode&quot;&gt;exclusive locking mode&lt;/a&gt; using the pragma:</source>
          <target state="translated">애플리케이션이 pragma를 사용하여 SQLite를 &lt;a href=&quot;pragma#pragma_locking_mode&quot;&gt;독점 잠금 모드로 설정&lt;/a&gt; 하는 경우 :</target>
        </trans-unit>
        <trans-unit id="16930c87a89e5aa4dacec21b97a534c286412312" translate="yes" xml:space="preserve">
          <source>If an application using asynchronous IO executes transactions in quick succession, other database users may be effectively locked out of the database. This is because when a &lt;a href=&quot;lang_transaction&quot;&gt;BEGIN&lt;/a&gt; is executed, a database lock is established immediately. But when the corresponding COMMIT or ROLLBACK occurs, the lock is not released until the relevant part of the write-queue has been flushed through. As a result, if a COMMIT is followed by a BEGIN before the write-queue is flushed through, the database is never unlocked,preventing other processes from accessing the database.</source>
          <target state="translated">비동기 IO를 사용하는 응용 프로그램이 트랜잭션을 빠르게 연속으로 실행하면 다른 데이터베이스 사용자가 데이터베이스에서 효과적으로 잠길 수 있습니다. &lt;a href=&quot;lang_transaction&quot;&gt;BEGIN&lt;/a&gt; 이 실행될 때 데이터베이스 잠금이 즉시 설정되기 때문입니다. 그러나 해당 COMMIT 또는 ROLLBACK이 발생하면 쓰기 큐의 관련 부분이 비워 질 때까지 잠금이 해제되지 않습니다. 결과적으로 쓰기 큐를 비우기 전에 COMMIT 다음에 BEGIN이 오는 경우 데이터베이스가 잠금 해제되지 않으므로 다른 프로세스가 데이터베이스에 액세스하지 못합니다.</target>
        </trans-unit>
        <trans-unit id="dec67a679cc10b4fb4ca0df679f1b42a8a809bf0" translate="yes" xml:space="preserve">
          <source>If an attempt to acquire a</source>
          <target state="translated">취득하려는 경우</target>
        </trans-unit>
        <trans-unit id="ae2dad7a2ac6f9639d4f707a82a9b585c9a56bd8" translate="yes" xml:space="preserve">
          <source>If an attempt to upgrade to an</source>
          <target state="translated">로 업그레이드하려는 경우</target>
        </trans-unit>
        <trans-unit id="0f4ee50fd2b5b886cf93345554e2cb331273f09d" translate="yes" xml:space="preserve">
          <source>If an error (e.g. an OOM condition) occurs within this function, the auxiliary data is set to NULL and an error code returned. If the xDelete parameter was not NULL, it is invoked on the auxiliary data pointer before returning.</source>
          <target state="translated">이 기능 내에서 오류 (예 : OOM 조건)가 발생하면 보조 데이터가 NULL로 설정되고 오류 코드가 반환됩니다. xDelete 매개 변수가 NULL이 아닌 경우, 리턴하기 전에 보조 데이터 포인터에서 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="8045cc0ef3fd13ca44d5e4369a94674b9f7300cd" translate="yes" xml:space="preserve">
          <source>If an error occurs in any of the three main backup API routines then the &lt;a href=&quot;rescode&quot;&gt;error code&lt;/a&gt; and &lt;a href=&quot;c3ref/errcode&quot;&gt;message&lt;/a&gt; are attached to the destination &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt;. Additionally, if &lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step()&lt;/a&gt; encounters an error, then the &lt;a href=&quot;rescode&quot;&gt;error code&lt;/a&gt; is returned by both the &lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step()&lt;/a&gt; call itself, and by the subsequent call to &lt;a href=&quot;c3ref/backup_finish#sqlite3backupfinish&quot;&gt;sqlite3_backup_finish()&lt;/a&gt;. So a call to &lt;a href=&quot;c3ref/backup_finish#sqlite3backupfinish&quot;&gt;sqlite3_backup_finish()&lt;/a&gt; does not overwrite an &lt;a href=&quot;rescode&quot;&gt;error code&lt;/a&gt; stored in the destination &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; by &lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step()&lt;/a&gt;. This feature is used in the example code to reduce amount of error handling required. The return values of the &lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step()&lt;/a&gt; and &lt;a href=&quot;c3ref/backup_finish#sqlite3backupfinish&quot;&gt;sqlite3_backup_finish()&lt;/a&gt; calls are ignored and the error code indicating the success or failure of the copy operation collected from the destination &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt; afterward.</source>
          <target state="translated">세 가지 기본 백업 API 루틴 중 하나에서 오류가 발생하면 &lt;a href=&quot;rescode&quot;&gt;오류 코드&lt;/a&gt; 및 &lt;a href=&quot;c3ref/errcode&quot;&gt;메시지&lt;/a&gt; 가 대상 &lt;a href=&quot;c3ref/sqlite3&quot;&gt;데이터베이스 연결에&lt;/a&gt; 첨부됩니다 . 또한 경우 &lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step ()는&lt;/a&gt; 에러 발생 후, &lt;a href=&quot;rescode&quot;&gt;에러 코드&lt;/a&gt; 모두에서 반환 &lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step ()&lt;/a&gt; 자신을 호출 한 이후에 호출 &lt;a href=&quot;c3ref/backup_finish#sqlite3backupfinish&quot;&gt;sqlite3_backup_finish ()&lt;/a&gt; . 를 호출 그래서 &lt;a href=&quot;c3ref/backup_finish#sqlite3backupfinish&quot;&gt;sqlite3_backup_finish ()는&lt;/a&gt; 덮어 쓰기하지 않는 &lt;a href=&quot;rescode&quot;&gt;오류 코드가&lt;/a&gt; 대상에 저장된 &lt;a href=&quot;c3ref/sqlite3&quot;&gt;데이터베이스 연결&lt;/a&gt; 에 의한 &lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;) (sqlite3_backup_step를&lt;/a&gt;. 이 기능은 예제 코드에서 필요한 오류 처리량을 줄이기 위해 사용됩니다. &lt;a href=&quot;c3ref/backup_finish#sqlite3backupstep&quot;&gt;sqlite3_backup_step ()&lt;/a&gt; 및 &lt;a href=&quot;c3ref/backup_finish#sqlite3backupfinish&quot;&gt;sqlite3_backup_finish ()&lt;/a&gt; 호출 의 리턴 값 은 무시되고 이후에 대상 &lt;a href=&quot;c3ref/sqlite3&quot;&gt;데이터베이스 연결&lt;/a&gt; 에서 수집 된 복사 조작의 성공 또는 실패를 나타내는 오류 코드가 무시 됩니다.</target>
        </trans-unit>
        <trans-unit id="e8416d9f169797cd1d1df3d689a0f3981d1e1914" translate="yes" xml:space="preserve">
          <source>If an error occurs while evaluating the SQL statements passed into sqlite3_exec(), then execution of the current statement stops and subsequent statements are skipped. If the 5th parameter to sqlite3_exec() is not NULL then any error message is written into memory obtained from &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc()&lt;/a&gt; and passed back through the 5th parameter. To avoid memory leaks, the application should invoke &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_free()&lt;/a&gt; on error message strings returned through the 5th parameter of sqlite3_exec() after the error message string is no longer needed. If the 5th parameter to sqlite3_exec() is not NULL and no errors occur, then sqlite3_exec() sets the pointer in its 5th parameter to NULL before returning.</source>
          <target state="translated">sqlite3_exec ()에 전달 된 SQL 문을 평가하는 동안 오류가 발생하면 현재 명령문의 실행이 중지되고 후속 명령문은 건너 뜁니다. sqlite3_exec ()에 대한 5 번째 매개 변수가 NULL이 아니면 &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_malloc ()&lt;/a&gt; 에서 얻은 메모리에 오류 메시지가 기록되고 5 번째 매개 변수를 통해 다시 전달됩니다. 메모리 누수를 피하려면 오류 메시지 문자열이 더 이상 필요하지 않은 후 응용 프로그램은 &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_exec ()&lt;/a&gt; 의 다섯 번째 매개 변수를 통해 리턴 된 오류 메시지 문자열에서 sqlite3_free () 를 호출해야 합니다. sqlite3_exec ()에 대한 5 번째 매개 변수가 NULL이 아니고 오류가 발생하지 않으면 sqlite3_exec ()는 5 번째 매개 변수의 포인터를 리턴하기 전에 NULL로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="67c739deca1fc659fe9011cffdf430f71e9a737b" translate="yes" xml:space="preserve">
          <source>If an error occurs while evaluating the SQL statements passed into sqlite3_exec(), then execution of the current statement stops and subsequent statements are skipped. If the 5th parameter to sqlite3_exec() is not NULL then any error message is written into memory obtained from &lt;a href=&quot;free&quot;&gt;sqlite3_malloc()&lt;/a&gt; and passed back through the 5th parameter. To avoid memory leaks, the application should invoke &lt;a href=&quot;free&quot;&gt;sqlite3_free()&lt;/a&gt; on error message strings returned through the 5th parameter of sqlite3_exec() after the error message string is no longer needed. If the 5th parameter to sqlite3_exec() is not NULL and no errors occur, then sqlite3_exec() sets the pointer in its 5th parameter to NULL before returning.</source>
          <target state="translated">sqlite3_exec ()에 전달 된 SQL 문을 평가하는 동안 오류가 발생하면 현재 명령문의 실행이 중지되고 후속 명령문은 건너 뜁니다. sqlite3_exec ()에 대한 5 번째 매개 변수가 NULL이 아니면 &lt;a href=&quot;free&quot;&gt;sqlite3_malloc ()&lt;/a&gt; 에서 얻은 메모리에 오류 메시지가 기록되고 5 번째 매개 변수를 통해 다시 전달됩니다. 메모리 누수를 피하려면 오류 메시지 문자열이 더 이상 필요하지 않은 후 응용 프로그램은 &lt;a href=&quot;free&quot;&gt;sqlite3_exec ()&lt;/a&gt; 의 다섯 번째 매개 변수를 통해 리턴 된 오류 메시지 문자열에서 sqlite3_free () 를 호출해야 합니다. sqlite3_exec ()에 대한 5 번째 매개 변수가 NULL이 아니고 오류가 발생하지 않으면 sqlite3_exec ()는 5 번째 매개 변수의 포인터를 리턴하기 전에 NULL로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="194a0b44e46a56e474b265407cd79a961ab1ee3b" translate="yes" xml:space="preserve">
          <source>If an error occurs within sqlite3_backup_init(D,N,S,M), then NULL is returned and an error code and error message are stored in the destination &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt; D. The error code and message for the failed call to sqlite3_backup_init() can be retrieved using the &lt;a href=&quot;#sqlite3_errcode&quot;&gt;sqlite3_errcode()&lt;/a&gt;, &lt;a href=&quot;#sqlite3_errcode&quot;&gt;sqlite3_errmsg()&lt;/a&gt;, and/or &lt;a href=&quot;#sqlite3_errcode&quot;&gt;sqlite3_errmsg16()&lt;/a&gt; functions. A successful call to sqlite3_backup_init() returns a pointer to an &lt;a href=&quot;#sqlite3_backup&quot;&gt;sqlite3_backup&lt;/a&gt; object. The &lt;a href=&quot;#sqlite3_backup&quot;&gt;sqlite3_backup&lt;/a&gt; object may be used with the sqlite3_backup_step() and sqlite3_backup_finish() functions to perform the specified backup operation.</source>
          <target state="translated">sqlite3_backup_init (D, N, S, M) 내에서 오류가 발생하면 NULL이 리턴되고 오류 코드 및 오류 메시지가 대상 &lt;a href=&quot;#sqlite3&quot;&gt;데이터베이스 연결&lt;/a&gt; D에 저장됩니다. sqlite3_backup_init ()에 대한 호출 실패에 대한 오류 코드 및 메시지는 &lt;a href=&quot;#sqlite3_errcode&quot;&gt;sqlite3_errcode ()&lt;/a&gt; , &lt;a href=&quot;#sqlite3_errcode&quot;&gt;sqlite3_errmsg ()&lt;/a&gt; 및 / 또는 &lt;a href=&quot;#sqlite3_errcode&quot;&gt;sqlite3_errmsg16 ()&lt;/a&gt; 함수를 사용하여 검색 됩니다. sqlite3_backup_init ()를 성공적으로 호출하면 &lt;a href=&quot;#sqlite3_backup&quot;&gt;sqlite3_backup&lt;/a&gt; 객체에 대한 포인터가 반환 됩니다. &lt;a href=&quot;#sqlite3_backup&quot;&gt;sqlite3_backup의&lt;/a&gt; 목적은 특정 백업 작업을 수행 할 sqlite3_backup_step () 및 sqlite3_backup_finish () 함수를 사용할 수있다.</target>
        </trans-unit>
        <trans-unit id="1200818faf5a8fe2f6854c6a6851d33b2f623b3d" translate="yes" xml:space="preserve">
          <source>If an error occurs within sqlite3_backup_init(D,N,S,M), then NULL is returned and an error code and error message are stored in the destination &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt; D. The error code and message for the failed call to sqlite3_backup_init() can be retrieved using the &lt;a href=&quot;errcode&quot;&gt;sqlite3_errcode()&lt;/a&gt;, &lt;a href=&quot;errcode&quot;&gt;sqlite3_errmsg()&lt;/a&gt;, and/or &lt;a href=&quot;errcode&quot;&gt;sqlite3_errmsg16()&lt;/a&gt; functions. A successful call to sqlite3_backup_init() returns a pointer to an &lt;a href=&quot;backup&quot;&gt;sqlite3_backup&lt;/a&gt; object. The &lt;a href=&quot;backup&quot;&gt;sqlite3_backup&lt;/a&gt; object may be used with the sqlite3_backup_step() and sqlite3_backup_finish() functions to perform the specified backup operation.</source>
          <target state="translated">sqlite3_backup_init (D, N, S, M) 내에서 오류가 발생하면 NULL이 리턴되고 오류 코드 및 오류 메시지가 대상 &lt;a href=&quot;sqlite3&quot;&gt;데이터베이스 연결&lt;/a&gt; D에 저장됩니다. sqlite3_backup_init ()에 대한 호출 실패에 대한 오류 코드 및 메시지는 &lt;a href=&quot;errcode&quot;&gt;sqlite3_errcode ()&lt;/a&gt; , &lt;a href=&quot;errcode&quot;&gt;sqlite3_errmsg ()&lt;/a&gt; 및 / 또는 &lt;a href=&quot;errcode&quot;&gt;sqlite3_errmsg16 ()&lt;/a&gt; 함수를 사용하여 검색 됩니다. sqlite3_backup_init ()를 성공적으로 호출하면 &lt;a href=&quot;backup&quot;&gt;sqlite3_backup&lt;/a&gt; 객체에 대한 포인터가 반환 됩니다. &lt;a href=&quot;backup&quot;&gt;sqlite3_backup의&lt;/a&gt; 목적은 특정 백업 작업을 수행 할 sqlite3_backup_step () 및 sqlite3_backup_finish () 함수를 사용할 수있다.</target>
        </trans-unit>
        <trans-unit id="100ded69e0a780b44961df68d1032c0e7c075797" translate="yes" xml:space="preserve">
          <source>If an error occurs, an SQLite error code is returned and the output variables (*pnData) and (*ppData) are set to 0. Otherwise, SQLITE_OK is returned and the output variables are set to the size of and a pointer to the output buffer, respectively. In this case it is the responsibility of the caller to eventually free the buffer using a call to sqlite3_free().</source>
          <target state="translated">오류가 발생하면 SQLite 오류 코드가 리턴되고 출력 변수 (* pnData) 및 (* ppData)가 0으로 설정됩니다. 그렇지 않으면 SQLITE_OK가 리턴되고 출력 변수가 크기 및 출력에 대한 포인터로 설정됩니다. 버퍼. 이 경우 호출자는 sqlite3_free () 호출을 사용하여 버퍼를 해제해야합니다.</target>
        </trans-unit>
        <trans-unit id="622e26e115262f02ac7f60da2462323cdc540b9f" translate="yes" xml:space="preserve">
          <source>If an error occurs, an SQLite error code is returned. Possible error codes include SQLITE_CORRUPT (if the changeset buffer is corrupt) or SQLITE_NOMEM.</source>
          <target state="translated">오류가 발생하면 SQLite 오류 코드가 리턴됩니다. 가능한 오류 코드에는 SQLITE_CORRUPT (변경 세트 버퍼가 손상된 경우) 또는 SQLITE_NOMEM이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="e455ebdd54ae8a16893e6de74ee6f1db7c5e35d7" translate="yes" xml:space="preserve">
          <source>If an error was encountered within a call to an sqlite3changeset_xxx() function (for example an &lt;a href=&quot;../rescode#corrupt&quot;&gt;SQLITE_CORRUPT&lt;/a&gt; in &lt;a href=&quot;sqlite3changeset_next&quot;&gt;sqlite3changeset_next()&lt;/a&gt; or an &lt;a href=&quot;../rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt; in &lt;a href=&quot;sqlite3changeset_new&quot;&gt;sqlite3changeset_new()&lt;/a&gt;) then an error code corresponding to that error is returned by this function. Otherwise, SQLITE_OK is returned. This is to allow the following pattern (pseudo-code):</source>
          <target state="translated">에러는 sqlite3changeset_xxx () 함수 호출 (예를 들면 내에서 발생했을 경우 &lt;a href=&quot;../rescode#corrupt&quot;&gt;SQLITE_CORRUPT&lt;/a&gt; 에 &lt;a href=&quot;sqlite3changeset_next&quot;&gt;sqlite3changeset_next ()&lt;/a&gt; 또는 &lt;a href=&quot;../rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt; 에서 &lt;a href=&quot;sqlite3changeset_new&quot;&gt;() sqlite3changeset_new&lt;/a&gt; ) 그 에러에 대응하는 에러 코드는이 함수에 의해 리턴된다. 그렇지 않으면 SQLITE_OK가 리턴됩니다. 다음 패턴 (의사 코드)을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="1bc5bca387ff960fe9687401573a47507a4fa49f" translate="yes" xml:space="preserve">
          <source>If an error was encountered within a call to an sqlite3changeset_xxx() function (for example an &lt;a href=&quot;rescode#corrupt&quot;&gt;SQLITE_CORRUPT&lt;/a&gt; in &lt;a href=&quot;#sqlite3changeset_next&quot;&gt;sqlite3changeset_next()&lt;/a&gt; or an &lt;a href=&quot;rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt; in &lt;a href=&quot;#sqlite3changeset_new&quot;&gt;sqlite3changeset_new()&lt;/a&gt;) then an error code corresponding to that error is returned by this function. Otherwise, SQLITE_OK is returned. This is to allow the following pattern (pseudo-code):</source>
          <target state="translated">에러는 sqlite3changeset_xxx () 함수 호출 (예를 들면 내에서 발생했을 경우 &lt;a href=&quot;rescode#corrupt&quot;&gt;SQLITE_CORRUPT&lt;/a&gt; 에 &lt;a href=&quot;#sqlite3changeset_next&quot;&gt;sqlite3changeset_next ()&lt;/a&gt; 또는 &lt;a href=&quot;rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt; 에서 &lt;a href=&quot;#sqlite3changeset_new&quot;&gt;() sqlite3changeset_new&lt;/a&gt; ) 그 에러에 대응하는 에러 코드는이 함수에 의해 리턴된다. 그렇지 않으면 SQLITE_OK가 리턴됩니다. 다음 패턴 (의사 코드)을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="1b680ceb7d64040ce2b6564485c5ca5b1c9689a0" translate="yes" xml:space="preserve">
          <source>If an fts5vocab table is created in the temp database, it may be associated with an FTS5 table in any attached database. In order to attach the fts5vocab table to an FTS5 table located in a database other than &quot;temp&quot;, the name of the database is inserted before the FTS5 table name in the CREATE VIRTUAL TABLE arguments. For example:</source>
          <target state="translated">fts5vocab 테이블이 임시 데이터베이스에 작성되면 연결된 데이터베이스의 FTS5 테이블과 연관 될 수 있습니다. fts5vocab 테이블을 &quot;temp&quot;이외의 데이터베이스에있는 FTS5 테이블에 첨부하기 위해 데이터베이스 이름이 CREATE VIRTUAL TABLE 인수에서 FTS5 테이블 이름 앞에 삽입됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3334fd5a8f49d3b3b23387e0ded39340f08eab83" translate="yes" xml:space="preserve">
          <source>If an index is available on the ORDER BY column, that index can be used for sorting. Consider the request for all items sorted by &quot;fruit&quot;:</source>
          <target state="translated">ORDER BY 열에서 인덱스를 사용할 수있는 경우 해당 인덱스를 사용하여 정렬 할 수 있습니다. &quot;과일&quot;로 정렬 된 모든 품목에 대한 요청을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="7ff3ecb138d9749f1bf1bb734a03098e601b851c" translate="yes" xml:space="preserve">
          <source>If an index is created using a statement like this:</source>
          <target state="translated">다음과 같은 명령문을 사용하여 색인을 작성하는 경우 :</target>
        </trans-unit>
        <trans-unit id="19ed5776fff64746115879da20e80724a2114442" translate="yes" xml:space="preserve">
          <source>If an instance-list grows so large that it exceeds the &lt;a href=&quot;limits#max_length&quot;&gt;SQLITE_MAX_LENGTH&lt;/a&gt; limit, FTS3/4 is unable to handle it. FTS5 does not have this problem.</source>
          <target state="translated">인스턴스 목록이 너무 커서 &lt;a href=&quot;limits#max_length&quot;&gt;SQLITE_MAX_LENGTH&lt;/a&gt; 제한을 초과하면 FTS3 / 4가이를 처리 할 수 ​​없습니다. FTS5에는이 문제가 없습니다.</target>
        </trans-unit>
        <trans-unit id="e669868d5fcfe552cb1dbbc9c2998f5505f629e6" translate="yes" xml:space="preserve">
          <source>If an interface fails with SQLITE_MISUSE, that means the interface was invoked incorrectly by the application. In that case, the error code and message may or may not be set.</source>
          <target state="translated">SQLITE_MISUSE로 인터페이스가 실패하면 응용 프로그램이 인터페이스를 잘못 호출했음을 의미합니다. 이 경우 오류 코드와 메시지가 설정되거나 설정되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="582fb0780f4838faf9f9c1524bd108b2fc64370c" translate="yes" xml:space="preserve">
          <source>If an out-of-memory error occurs, then the return value from these routines is the same as if the column had contained an SQL NULL value. Valid SQL NULL returns can be distinguished from out-of-memory errors by invoking the &lt;a href=&quot;#sqlite3_errcode&quot;&gt;sqlite3_errcode()&lt;/a&gt; immediately after the suspect return value is obtained and before any other SQLite interface is called on the same &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt;.</source>
          <target state="translated">메모리 부족 오류가 발생하면 이러한 루틴의 리턴 값은 열에 SQL NULL 값이 포함 된 것과 같습니다. 유효한 SQL NULL 리턴은 의심되는 리턴 값을 얻은 직후와 동일한 &lt;a href=&quot;#sqlite3&quot;&gt;데이터베이스 연결&lt;/a&gt; 에서 다른 SQLite 인터페이스를 호출하기 전에 &lt;a href=&quot;#sqlite3_errcode&quot;&gt;sqlite3_errcode ()&lt;/a&gt; 를 호출하여 메모리 부족 오류와 구별 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5851016a3fb15ec26147b80722e832005884d3e4" translate="yes" xml:space="preserve">
          <source>If an out-of-memory error occurs, then the return value from these routines is the same as if the column had contained an SQL NULL value. Valid SQL NULL returns can be distinguished from out-of-memory errors by invoking the &lt;a href=&quot;errcode&quot;&gt;sqlite3_errcode()&lt;/a&gt; immediately after the suspect return value is obtained and before any other SQLite interface is called on the same &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt;.</source>
          <target state="translated">메모리 부족 오류가 발생하면 이러한 루틴의 리턴 값은 열에 SQL NULL 값이 포함 된 것과 같습니다. 유효한 SQL NULL 리턴은 의심되는 리턴 값을 얻은 직후와 동일한 &lt;a href=&quot;sqlite3&quot;&gt;데이터베이스 연결&lt;/a&gt; 에서 다른 SQLite 인터페이스를 호출하기 전에 &lt;a href=&quot;errcode&quot;&gt;sqlite3_errcode ()&lt;/a&gt; 를 호출하여 메모리 부족 오류와 구별 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="53a860ff4ceaa780f514879a263f3e2bd7a64b45" translate="yes" xml:space="preserve">
          <source>If an sqlite3_exec() callback returns non-zero, the sqlite3_exec() routine returns SQLITE_ABORT without invoking the callback again and without running any subsequent SQL statements.</source>
          <target state="translated">sqlite3_exec () 콜백이 0이 아닌 값을 리턴하면, sqlite3_exec () 루틴은 콜백을 다시 호출하지 않고 후속 SQL 문을 실행하지 않고 SQLITE_ABORT를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="86f2a1856f49f287cef6815b989e3bcfc9f7c019" translate="yes" xml:space="preserve">
          <source>If an update is only partially applied to the target database by the time sqlite3rbu_close() is called, state information is saved within the state database if it exists, or otherwise in the RBU database. This allows subsequent processes to automatically resume the RBU update from where it left off. If state information is stored in the RBU database, it can be removed by dropping all tables whose names begin with &quot;rbu_&quot;.</source>
          <target state="translated">sqlite3rbu_close ()가 호출 될 때까지 업데이트가 대상 데이터베이스에만 부분적으로 적용되는 경우 상태 정보는 상태 데이터베이스 (있는 경우) 또는 RBU 데이터베이스에 저장됩니다. 이를 통해 후속 프로세스는 중단 된 위치에서 RBU 업데이트를 자동으로 재개 할 수 있습니다. 상태 정보가 RBU 데이터베이스에 저장된 경우 이름이 &quot;rbu_&quot;로 시작하는 모든 테이블을 삭제하여 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bd175412c5f187514ee87168844f1bedfa975635" translate="yes" xml:space="preserve">
          <source>If an xToken() callback returns any value other than SQLITE_OK, then the tokenization should be abandoned and the xTokenize() method should immediately return a copy of the xToken() return value. Or, if the input buffer is exhausted, xTokenize() should return SQLITE_OK. Finally, if an error occurs with the xTokenize() implementation itself, it may abandon the tokenization and return any error code other than SQLITE_OK or SQLITE_DONE.</source>
          <target state="translated">xToken () 콜백이 SQLITE_OK 이외의 다른 값을 리턴하면 토큰 화가 취소되고 xTokenize () 메소드가 즉시 xToken () 리턴 값의 사본을 리턴해야합니다. 또는 입력 버퍼가 소진되면 xTokenize ()는 SQLITE_OK를 반환해야합니다. 마지막으로, xTokenize () 구현 자체에서 오류가 발생하면 토큰 화를 포기하고 SQLITE_OK 또는 SQLITE_DONE 이외의 오류 코드를 리턴 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0be452758cf5838f411f1a08b26770962254070e" translate="yes" xml:space="preserve">
          <source>If and only if the previously described conversion of OR to an IN operator does not work, the second OR-clause optimization is attempted. Suppose the OR clause consists of multiple subterms as follows:</source>
          <target state="translated">이전에 설명 된 OR의 IN 연산자로의 변환이 작동하지 않는 경우에만 두 번째 OR 절 최적화가 시도됩니다. OR 절이 다음과 같이 여러 하위 용어로 구성되어 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="1d92fd7f31be8d1f3061a17050b41ab1479f4bcd" translate="yes" xml:space="preserve">
          <source>If another database connection has the database mode open in &lt;a href=&quot;pragma#pragma_locking_mode&quot;&gt;exclusive locking mode&lt;/a&gt; then all queries against the database will return &lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;. Both Chrome and Firefox open their database files in exclusive locking mode, so attempts to read Chrome or Firefox databases while the applications are running will run into this problem, for example.</source>
          <target state="translated">다른 데이터베이스 연결의 데이터베이스 모드가 &lt;a href=&quot;pragma#pragma_locking_mode&quot;&gt;독점 잠금 모드&lt;/a&gt; 로 열린 경우 데이터베이스에 대한 모든 쿼리는 &lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt; 를 반환 합니다 . Chrome과 Firefox는 모두 독점 잠금 모드로 데이터베이스 파일을 열므로 응용 프로그램이 실행되는 동안 Chrome 또는 Firefox 데이터베이스를 읽으려고하면이 문제가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="52c07a908a81f106b3dd1bc1b1492081c7a35d47" translate="yes" xml:space="preserve">
          <source>If another thread changes the autocommit status of the database connection while this routine is running, then the return value is undefined.</source>
          <target state="translated">이 루틴이 실행되는 동안 다른 스레드가 데이터베이스 연결의 자동 커미트 상태를 변경하면 리턴 값이 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8503a498072091f7cabc2db6a10e976de9bc12b1" translate="yes" xml:space="preserve">
          <source>If another thread or process writes to the source database while this function is sleeping, then SQLite detects this and usually restarts the backup process when sqlite3_backup_step() is next called. There is one exception to this rule: If the source database is not an in-memory database, and the write is performed from within the same process as the backup operation and uses the same database handle (pDb), then the destination database (the one opened using connection pFile) is automatically updated along with the source. The backup process may then be continued after the sqlite3_sleep() call returns as if nothing had happened.</source>
          <target state="translated">이 함수가 휴면 상태 인 동안 다른 스레드 또는 프로세스가 소스 데이터베이스에 쓰면 SQLite는이를 감지하여 다음에 sqlite3_backup_step ()이 호출 될 때 백업 프로세스를 다시 시작합니다. 이 규칙에는 한 가지 예외가 있습니다. 소스 데이터베이스가 메모리 내 데이터베이스가 아니고 쓰기가 백업 조작과 동일한 프로세스 내에서 수행되고 동일한 데이터베이스 핸들 (pDb)을 사용하는 경우 대상 데이터베이스 ( 연결 pFile을 사용하여 열린 파일)은 소스와 함께 자동으로 업데이트됩니다. 그런 다음 sqlite3_sleep () 호출이 아무 일도없는 것처럼 리턴 된 후에 백업 프로세스가 계속 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b9f8be087686590dab771595e5bd54b7d246dba5" translate="yes" xml:space="preserve">
          <source>If any errors are encountered during compilation, an error message is written into memory obtained from &lt;b&gt;malloc&lt;/b&gt; and the 5th parameter is made to point to that memory. If the 5th parameter is NULL, then no error message is generated. If the 5th parameter is not NULL, then the calling function should dispose of the memory containing the error message by calling &lt;b&gt;sqlite_freemem&lt;/b&gt;.</source>
          <target state="translated">컴파일 중에 오류가 발생하면 &lt;b&gt;malloc&lt;/b&gt; 에서 확보 한 메모리에 오류 메시지가 작성되고 5 번째 매개 변수는 해당 메모리를 가리 키도록 만들어집니다. 5 번째 매개 변수가 NULL이면 오류 메시지가 생성되지 않습니다. 5 번째 매개 변수가 NULL이 아니면 호출 함수는 &lt;b&gt;sqlite_freemem&lt;/b&gt; 을 호출하여 오류 메시지가 포함 된 메모리를 &lt;b&gt;삭제해야&lt;/b&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="83125f64332cc16259858298cfafac27aca598bf" translate="yes" xml:space="preserve">
          <source>If any of the special-case entries shows above are omitted, then the value of 100 is used for insertion and deletion and 150 is used for substitution. To disable the default insertion, deletion, and/or substitution set their respective cost to 10000 or more.</source>
          <target state="translated">위에 표시된 특수 사례 항목 중 하나라도 생략하면 값 100은 삽입 및 삭제에 사용되고 150은 대체에 사용됩니다. 기본 삽입, 삭제 및 / 또는 대체를 비활성화하려면 각각의 비용을 10000 이상으로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="8b09289d91105f4036d96455156f97ad8f84efdf" translate="yes" xml:space="preserve">
          <source>If any of the sqlite3_bind_*() routines are called with a NULL pointer for the &lt;a href=&quot;#sqlite3_stmt&quot;&gt;prepared statement&lt;/a&gt; or with a prepared statement for which &lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step()&lt;/a&gt; has been called more recently than &lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset()&lt;/a&gt;, then the call will return &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_MISUSE&lt;/a&gt;. If any sqlite3_bind_() routine is passed a &lt;a href=&quot;#sqlite3_stmt&quot;&gt;prepared statement&lt;/a&gt; that has been finalized, the result is undefined and probably harmful.</source>
          <target state="translated">sqlite3_bind 중 하나가 _ * () 루틴이에 대한 NULL 포인터로 호출하는 경우 &lt;a href=&quot;#sqlite3_stmt&quot;&gt;준비된 문&lt;/a&gt; 이나되는 준비된 문 &lt;a href=&quot;#sqlite3_step&quot;&gt;sqlite3_step ()&lt;/a&gt; 보다 더 최근에 호출 된 &lt;a href=&quot;#sqlite3_reset&quot;&gt;sqlite3_reset ()&lt;/a&gt; , 다음 호출이 반환됩니다 &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_MISUSE을&lt;/a&gt; . sqlite3_bind_ () 루틴 에 완료된 &lt;a href=&quot;#sqlite3_stmt&quot;&gt;준비된 명령문&lt;/a&gt; 이 전달 되면 결과는 정의되지 않으며 아마도 유해 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d6ffdf1dd2e882d0d92b18297a217958bf3b943" translate="yes" xml:space="preserve">
          <source>If any of the sqlite3_bind_*() routines are called with a NULL pointer for the &lt;a href=&quot;stmt&quot;&gt;prepared statement&lt;/a&gt; or with a prepared statement for which &lt;a href=&quot;step&quot;&gt;sqlite3_step()&lt;/a&gt; has been called more recently than &lt;a href=&quot;reset&quot;&gt;sqlite3_reset()&lt;/a&gt;, then the call will return &lt;a href=&quot;../rescode#misuse&quot;&gt;SQLITE_MISUSE&lt;/a&gt;. If any sqlite3_bind_() routine is passed a &lt;a href=&quot;stmt&quot;&gt;prepared statement&lt;/a&gt; that has been finalized, the result is undefined and probably harmful.</source>
          <target state="translated">sqlite3_bind 중 하나가 _ * () 루틴이에 대한 NULL 포인터로 호출하는 경우 &lt;a href=&quot;stmt&quot;&gt;준비된 문&lt;/a&gt; 이나되는 준비된 문 &lt;a href=&quot;step&quot;&gt;sqlite3_step ()&lt;/a&gt; 보다 더 최근에 호출 된 &lt;a href=&quot;reset&quot;&gt;sqlite3_reset ()&lt;/a&gt; , 다음 호출이 반환됩니다 &lt;a href=&quot;../rescode#misuse&quot;&gt;SQLITE_MISUSE을&lt;/a&gt; . sqlite3_bind_ () 루틴 에 완료된 &lt;a href=&quot;stmt&quot;&gt;준비된 명령문&lt;/a&gt; 이 전달 되면 결과는 정의되지 않으며 아마도 유해 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ecc451199e804c2d9bbaab7eeb8ae7260c861c03" translate="yes" xml:space="preserve">
          <source>If any of these options are defined, then the same set of SQLITE_OMIT_* options must also be defined when using the &lt;a href=&quot;lemon&quot;&gt;Lemon parser generator&lt;/a&gt; tool to generate the parse.c file and when compiling the 'mkkeywordhash' tool which generates the keywordhash.h file. Because of this, these options may only be used when the library is built from canonical source, not from the &lt;a href=&quot;amalgamation&quot;&gt;amalgamation&lt;/a&gt;. Some SQLITE_OMIT_* options might work, or appear to work, when used with the &lt;a href=&quot;amalgamation&quot;&gt;amalgamation&lt;/a&gt;. But this is not guaranteed. In general, always compile from canonical sources in order to take advantage of SQLITE_OMIT_* options.</source>
          <target state="translated">이러한 옵션 중 하나라도 정의 된 경우 &lt;a href=&quot;lemon&quot;&gt;레몬 구문 분석기 생성기&lt;/a&gt; 도구를 사용하여 parse.c 파일을 생성 할 때와 keywordhash.h 파일을 생성하는 'mkkeywordhash'도구를 컴파일 할 때 동일한 SQLITE_OMIT_ * 옵션 세트도 정의해야 합니다. 이 때문에 이러한 옵션은 라이브러리가 &lt;a href=&quot;amalgamation&quot;&gt;합병이&lt;/a&gt; 아닌 표준 소스로 빌드 된 경우에만 사용할 수 있습니다 . &lt;a href=&quot;amalgamation&quot;&gt;amalgamation&lt;/a&gt; 과 함께 사용하면 일부 SQLITE_OMIT_ * 옵션이 작동하거나 작동하는 것처럼 보일 수 있습니다 . 그러나 이것이 보장되지는 않습니다. 일반적으로 SQLITE_OMIT_ * 옵션을 이용하려면 항상 표준 소스에서 컴파일하십시오.</target>
        </trans-unit>
        <trans-unit id="066af8ac5653f5f78e3e77b86a9535152f8106eb" translate="yes" xml:space="preserve">
          <source>If any other constraint violation occurs while applying a change (i.e. a UNIQUE, CHECK or NOT NULL constraint), the conflict handler is invoked with CHANGESET_CONSTRAINT as the second argument.</source>
          <target state="translated">변경 사항을 적용하는 동안 다른 제약 조건 위반 (예 : UNIQUE, CHECK 또는 NOT NULL 제약 조건)이 발생하면 충돌 처리기는 두 번째 인수로 CHANGESET_CONSTRAINT를 사용하여 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="c1ffcbd8edc1e59c920bc1e42ef8ae6a08f1c489" translate="yes" xml:space="preserve">
          <source>If any other error occurs while flushing dirty pages to disk (for example an IO error or out-of-memory condition), then processing is abandoned and an SQLite &lt;a href=&quot;../rescode&quot;&gt;error code&lt;/a&gt; is returned to the caller immediately.</source>
          <target state="translated">더티 페이지를 디스크로 플러시하는 동안 다른 오류가 발생하면 (예 : IO 오류 또는 메모리 부족 상태) 처리가 중단되고 SQLite &lt;a href=&quot;../rescode&quot;&gt;오류 코드&lt;/a&gt; 가 즉시 호출자에게 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="547159ba42f3dd194cd2ac6c73df9dfb51226b89" translate="yes" xml:space="preserve">
          <source>If any other error occurs while flushing dirty pages to disk (for example an IO error or out-of-memory condition), then processing is abandoned and an SQLite &lt;a href=&quot;rescode&quot;&gt;error code&lt;/a&gt; is returned to the caller immediately.</source>
          <target state="translated">더티 페이지를 디스크로 플러시하는 동안 다른 오류가 발생하면 (예 : IO 오류 또는 메모리 부족 상태) 처리가 중단되고 SQLite &lt;a href=&quot;rescode&quot;&gt;오류 코드&lt;/a&gt; 가 즉시 호출자에게 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="ed9a42f661215804821abb386ff5f31ffa1294e2" translate="yes" xml:space="preserve">
          <source>If any prior errors have occurred while constructing the dynamic string in sqlite3_str X, then the &lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_errcode(X)&lt;/a&gt; method will return an appropriate error code. The &lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_errcode(X)&lt;/a&gt; method returns &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_NOMEM&lt;/a&gt; following any out-of-memory error, or &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_TOOBIG&lt;/a&gt; if the size of the dynamic string exceeds &lt;a href=&quot;limits#max_length&quot;&gt;SQLITE_MAX_LENGTH&lt;/a&gt;, or &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OK&lt;/a&gt; if there have been no errors.</source>
          <target state="translated">sqlite3_str X에서 동적 문자열을 구성하는 동안 이전 오류가 발생한 경우 &lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_errcode (X)&lt;/a&gt; 메소드는 적절한 오류 코드를 리턴합니다. &lt;a href=&quot;#sqlite3_str_errcode&quot;&gt;sqlite3_str_errcode (X)&lt;/a&gt; 메소드가 반환 &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_NOMEM&lt;/a&gt; 어떤 메모리 부족 오류가 다음 또는 &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_TOOBIG은&lt;/a&gt; 동적 문자열의 크기를 초과하는 경우 &lt;a href=&quot;limits#max_length&quot;&gt;SQLITE_MAX_LENGTH&lt;/a&gt; , 또는 &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_OK을&lt;/a&gt; 오류가 없었을 경우.</target>
        </trans-unit>
        <trans-unit id="2797997123bd9f48d4b03d213989316f5ee2db3a" translate="yes" xml:space="preserve">
          <source>If any prior errors have occurred while constructing the dynamic string in sqlite3_str X, then the &lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_errcode(X)&lt;/a&gt; method will return an appropriate error code. The &lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_errcode(X)&lt;/a&gt; method returns &lt;a href=&quot;../rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt; following any out-of-memory error, or &lt;a href=&quot;../rescode#toobig&quot;&gt;SQLITE_TOOBIG&lt;/a&gt; if the size of the dynamic string exceeds &lt;a href=&quot;../limits#max_length&quot;&gt;SQLITE_MAX_LENGTH&lt;/a&gt;, or &lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OK&lt;/a&gt; if there have been no errors.</source>
          <target state="translated">sqlite3_str X에서 동적 문자열을 구성하는 동안 이전 오류가 발생한 경우 &lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_errcode (X)&lt;/a&gt; 메소드는 적절한 오류 코드를 리턴합니다. &lt;a href=&quot;str_errcode&quot;&gt;sqlite3_str_errcode (X)&lt;/a&gt; 메소드가 반환 &lt;a href=&quot;../rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt; 어떤 메모리 부족 오류가 다음 또는 &lt;a href=&quot;../rescode#toobig&quot;&gt;SQLITE_TOOBIG은&lt;/a&gt; 동적 문자열의 크기를 초과하는 경우 &lt;a href=&quot;../limits#max_length&quot;&gt;SQLITE_MAX_LENGTH&lt;/a&gt; , 또는 &lt;a href=&quot;../rescode#ok&quot;&gt;SQLITE_OK을&lt;/a&gt; 오류가 없었을 경우.</target>
        </trans-unit>
        <trans-unit id="8cf62e1e5822970ab1a0772544bba1f6a9886bdb" translate="yes" xml:space="preserve">
          <source>If any views refer to table X in a way that is affected by the schema change, then drop those views using &lt;a href=&quot;lang_dropview&quot;&gt;DROP VIEW&lt;/a&gt; and recreate them with whatever changes are necessary to accommodate the schema change using &lt;a href=&quot;lang_createview&quot;&gt;CREATE VIEW&lt;/a&gt;.</source>
          <target state="translated">뷰가 스키마 변경의 영향을받는 방식으로 테이블 X를 참조하는 경우 &lt;a href=&quot;lang_dropview&quot;&gt;DROP VIEW를&lt;/a&gt; 사용하여 해당 뷰를 삭제하고 &lt;a href=&quot;lang_createview&quot;&gt;CREATE VIEW를&lt;/a&gt; 사용하여 스키마 변경을 수용하는 데 필요한 변경 사항으로 다시 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="f4bcba20e82a98be0954f7a995f190f8be3b9e76" translate="yes" xml:space="preserve">
          <source>If argument P3 is non-zero, then it indicates that the sorter may assume that a stable sort considering the first P3 fields of each key is sufficient to produce the required results.</source>
          <target state="translated">인수 P3이 0이 아닌 경우 분류기는 각 키의 첫 번째 P3 필드를 고려하여 안정적인 정렬이 필요한 결과를 생성하기에 충분하다고 가정 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="35693c95846989c47eb6a922b6389598e5e5c2ef" translate="yes" xml:space="preserve">
          <source>If argument pnCol is not NULL, then *pnCol is set to the number of columns in the table.</source>
          <target state="translated">인수 pnCol이 NULL이 아닌 경우 * pnCol은 테이블의 열 수로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="6eebf7ee5a909998cdac6e1af93d8bf0c4b9e6a9" translate="yes" xml:space="preserve">
          <source>If argument pzTab is not NULL, then *pzTab is set to point to a nul-terminated utf-8 encoded string containing the name of the table affected by the current change. The buffer remains valid until either sqlite3changeset_next() is called on the iterator or until the conflict-handler function returns. If pnCol is not NULL, then *pnCol is set to the number of columns in the table affected by the change. If pbIndirect is not NULL, then *pbIndirect is set to true (1) if the change is an indirect change, or false (0) otherwise. See the documentation for &lt;a href=&quot;#sqlite3session_indirect&quot;&gt;sqlite3session_indirect()&lt;/a&gt; for a description of direct and indirect changes. Finally, if pOp is not NULL, then *pOp is set to one of &lt;a href=&quot;c3ref/c_alter_table&quot;&gt;SQLITE_INSERT&lt;/a&gt;, &lt;a href=&quot;c3ref/c_alter_table&quot;&gt;SQLITE_DELETE&lt;/a&gt; or &lt;a href=&quot;c3ref/c_alter_table&quot;&gt;SQLITE_UPDATE&lt;/a&gt;, depending on the type of change that the iterator currently points to.</source>
          <target state="translated">pzTab 인수가 NULL이 아닌 경우, * pzTab은 현재 변경의 영향을받는 테이블 이름을 포함하는 널 종료 utf-8 인코딩 문자열을 가리 키도록 설정됩니다. 버퍼는 반복자에서 sqlite3changeset_next ()가 호출 될 때까지 또는 충돌 핸들러 함수가 리턴 될 때까지 유효합니다. pnCol이 NULL이 아닌 경우 * pnCol은 변경의 영향을받는 테이블의 열 수로 설정됩니다. pbIndirect가 NULL이 아니면 변경이 간접 변경 인 경우 * pbIndirect가 true (1)로 설정되고 그렇지 않으면 false (0)로 설정됩니다. 직접 및 간접 변경에 대한 설명은 &lt;a href=&quot;#sqlite3session_indirect&quot;&gt;sqlite3session_indirect ()&lt;/a&gt; 설명서를 참조하십시오 . 마지막으로 pOp가 NULL이 아닌 경우 * pOp는 &lt;a href=&quot;c3ref/c_alter_table&quot;&gt;SQLITE_INSERT&lt;/a&gt; , &lt;a href=&quot;c3ref/c_alter_table&quot;&gt;SQLITE_DELETE&lt;/a&gt; 또는 &lt;a href=&quot;c3ref/c_alter_table&quot;&gt;SQLITE_UPDATE&lt;/a&gt; 중 하나로 설정됩니다.반복자가 현재 가리키는 변경 유형에 따라</target>
        </trans-unit>
        <trans-unit id="eeb423ada7e3f3af8ece536280a90cde13ccf0f0" translate="yes" xml:space="preserve">
          <source>If argument pzTab is not NULL, then *pzTab is set to point to a nul-terminated utf-8 encoded string containing the name of the table affected by the current change. The buffer remains valid until either sqlite3changeset_next() is called on the iterator or until the conflict-handler function returns. If pnCol is not NULL, then *pnCol is set to the number of columns in the table affected by the change. If pbIndirect is not NULL, then *pbIndirect is set to true (1) if the change is an indirect change, or false (0) otherwise. See the documentation for &lt;a href=&quot;sqlite3session_indirect&quot;&gt;sqlite3session_indirect()&lt;/a&gt; for a description of direct and indirect changes. Finally, if pOp is not NULL, then *pOp is set to one of &lt;a href=&quot;../c3ref/c_alter_table&quot;&gt;SQLITE_INSERT&lt;/a&gt;, &lt;a href=&quot;../c3ref/c_alter_table&quot;&gt;SQLITE_DELETE&lt;/a&gt; or &lt;a href=&quot;../c3ref/c_alter_table&quot;&gt;SQLITE_UPDATE&lt;/a&gt;, depending on the type of change that the iterator currently points to.</source>
          <target state="translated">pzTab 인수가 NULL이 아닌 경우, * pzTab은 현재 변경의 영향을받는 테이블 이름을 포함하는 널 종료 utf-8 인코딩 문자열을 가리 키도록 설정됩니다. 버퍼는 반복자에서 sqlite3changeset_next ()가 호출 될 때까지 또는 충돌 핸들러 함수가 리턴 될 때까지 유효합니다. pnCol이 NULL이 아닌 경우 * pnCol은 변경의 영향을받는 테이블의 열 수로 설정됩니다. pbIndirect가 NULL이 아니면 변경이 간접 변경 인 경우 * pbIndirect가 true (1)로 설정되고 그렇지 않으면 false (0)로 설정됩니다. 직접 및 간접 변경에 대한 설명은 &lt;a href=&quot;sqlite3session_indirect&quot;&gt;sqlite3session_indirect ()&lt;/a&gt; 설명서를 참조하십시오 . 마지막으로 pOp가 NULL이 아닌 경우 * pOp는 &lt;a href=&quot;../c3ref/c_alter_table&quot;&gt;SQLITE_INSERT&lt;/a&gt; , &lt;a href=&quot;../c3ref/c_alter_table&quot;&gt;SQLITE_DELETE&lt;/a&gt; 또는 &lt;a href=&quot;../c3ref/c_alter_table&quot;&gt;SQLITE_UPDATE&lt;/a&gt; 중 하나로 설정됩니다.반복자가 현재 가리키는 변경 유형에 따라</target>
        </trans-unit>
        <trans-unit id="012db9d404feeb7b242a5f104e807e9ebcf5e6cc" translate="yes" xml:space="preserve">
          <source>If argument zTab is not NULL, then it is the name of a table to attach to the session object passed as the first argument. All subsequent changes made to the table while the session object is enabled will be recorded. See documentation for &lt;a href=&quot;#sqlite3session_changeset&quot;&gt;sqlite3session_changeset()&lt;/a&gt; for further details.</source>
          <target state="translated">zTab 인수가 NULL이 아닌 경우, 첫 번째 인수로 전달 된 세션 오브젝트에 첨부 할 테이블의 이름입니다. 세션 개체가 활성화 된 동안 테이블에 대한 모든 후속 변경 사항이 기록됩니다. 자세한 내용은 &lt;a href=&quot;#sqlite3session_changeset&quot;&gt;sqlite3session_changeset ()&lt;/a&gt; 설명서를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="1874355cfa55a648a95d55d6cc4ad4d5d5a5435f" translate="yes" xml:space="preserve">
          <source>If argument zTab is not NULL, then it is the name of a table to attach to the session object passed as the first argument. All subsequent changes made to the table while the session object is enabled will be recorded. See documentation for &lt;a href=&quot;sqlite3session_changeset&quot;&gt;sqlite3session_changeset()&lt;/a&gt; for further details.</source>
          <target state="translated">zTab 인수가 NULL이 아닌 경우, 첫 번째 인수로 전달 된 세션 오브젝트에 첨부 할 테이블의 이름입니다. 세션 개체가 활성화 된 동안 테이블에 대한 모든 후속 변경 사항이 기록됩니다. 자세한 내용은 &lt;a href=&quot;sqlite3session_changeset&quot;&gt;sqlite3session_changeset ()&lt;/a&gt; 설명서를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="21fcaf7a804fb18a6bdf460073dabd9a55d816ad" translate="yes" xml:space="preserve">
          <source>If both SQLITE_STOREP2 and SQLITE_KEEPNULL flags are set then the content of r[P2] is only changed if the new value is NULL or 0 (false). In other words, a prior r[P2] value will not be overwritten by 1 (true).</source>
          <target state="translated">SQLITE_STOREP2 및 SQLITE_KEEPNULL 플래그가 모두 설정되면 r [P2]의 내용은 새 값이 NULL 또는 0 (false) 인 경우에만 변경됩니다. 즉, 이전 r [P2] 값은 1 (true)로 덮어 쓰지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f091230c98fc9fb42f84687fff668e2e8782487e" translate="yes" xml:space="preserve">
          <source>If both SQLITE_STOREP2 and SQLITE_KEEPNULL flags are set then the content of r[P2] is only changed if the new value is NULL or 1 (true). In other words, a prior r[P2] value will not be overwritten by 0 (false).</source>
          <target state="translated">SQLITE_STOREP2 및 SQLITE_KEEPNULL 플래그가 둘 다 설정되면 r [P2]의 내용은 새 값이 NULL 또는 1 (true) 인 경우에만 변경됩니다. 즉, 이전 r [P2] 값을 0 (거짓)으로 덮어 쓰지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b35b42f8226135f60e30979149548acecdb3cd9a" translate="yes" xml:space="preserve">
          <source>If both pragmas &lt;a href=&quot;pragma#pragma_short_column_names&quot;&gt;short_column_names&lt;/a&gt; and &lt;a href=&quot;pragma#pragma_full_column_names&quot;&gt;full_column_names&lt;/a&gt; are OFF then case (2) applies.</source>
          <target state="translated">If both pragmas &lt;a href=&quot;pragma#pragma_short_column_names&quot;&gt;short_column_names&lt;/a&gt; and &lt;a href=&quot;pragma#pragma_full_column_names&quot;&gt;full_column_names&lt;/a&gt; are OFF then case (2) applies.</target>
        </trans-unit>
        <trans-unit id="c1ea5de7bdcea197233ed39232910d2d33159cd2" translate="yes" xml:space="preserve">
          <source>If certain kinds of errors occur on a statement within a multi-statement transaction (errors including &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_FULL&lt;/a&gt;, &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_IOERR&lt;/a&gt;, &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_NOMEM&lt;/a&gt;, &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_BUSY&lt;/a&gt;, and &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_INTERRUPT&lt;/a&gt;) then the transaction might be rolled back automatically. The only way to find out whether SQLite automatically rolled back the transaction after an error is to use this function.</source>
          <target state="translated">다중 명령문 트랜잭션 내의 명령문에서 특정 종류의 오류가 발생하면 ( &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_FULL&lt;/a&gt; , &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_IOERR&lt;/a&gt; , &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_NOMEM&lt;/a&gt; , &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_BUSY&lt;/a&gt; 및 &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_INTERRUPT&lt;/a&gt; 포함 오류 ) 트랜잭션이 자동으로 롤백 될 수 있습니다. 오류 후 SQLite가 트랜잭션을 자동으로 롤백했는지 여부를 확인하는 유일한 방법은이 함수를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="063cf3d6b1f8d89a285c8317271a90d08b9bd66c" translate="yes" xml:space="preserve">
          <source>If certain kinds of errors occur on a statement within a multi-statement transaction (errors including &lt;a href=&quot;../rescode#full&quot;&gt;SQLITE_FULL&lt;/a&gt;, &lt;a href=&quot;../rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt;, &lt;a href=&quot;../rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt;, &lt;a href=&quot;../rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;, and &lt;a href=&quot;../rescode#interrupt&quot;&gt;SQLITE_INTERRUPT&lt;/a&gt;) then the transaction might be rolled back automatically. The only way to find out whether SQLite automatically rolled back the transaction after an error is to use this function.</source>
          <target state="translated">다중 명령문 트랜잭션 내의 명령문에서 특정 종류의 오류가 발생하면 ( &lt;a href=&quot;../rescode#full&quot;&gt;SQLITE_FULL&lt;/a&gt; , &lt;a href=&quot;../rescode#ioerr&quot;&gt;SQLITE_IOERR&lt;/a&gt; , &lt;a href=&quot;../rescode#nomem&quot;&gt;SQLITE_NOMEM&lt;/a&gt; , &lt;a href=&quot;../rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt; 및 &lt;a href=&quot;../rescode#interrupt&quot;&gt;SQLITE_INTERRUPT&lt;/a&gt; 포함 오류 ) 트랜잭션이 자동으로 롤백 될 수 있습니다. 오류 후 SQLite가 트랜잭션을 자동으로 롤백했는지 여부를 확인하는 유일한 방법은이 함수를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="65b57925e204e3ebe11c23e15127d898a0e33ca6" translate="yes" xml:space="preserve">
          <source>If certain kinds of errors occur within a transaction, the transaction may or may not be rolled back automatically. The errors that can cause an automatic rollback include:</source>
          <target state="translated">트랜잭션 내에서 특정 종류의 오류가 발생하면 트랜잭션이 자동으로 롤백되거나 롤백되지 않을 수 있습니다. 자동 롤백을 유발할 수있는 오류는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="debbf4ee0f449f15f2b2fad59057f8a4eccd847a" translate="yes" xml:space="preserve">
          <source>If changes occur on the same database connection after a query starts running but before the query completes, then it is undefined whether or not the query will see those changes.</source>
          <target state="translated">쿼리 실행이 시작된 후 쿼리가 완료되기 전에 동일한 데이터베이스 연결에서 변경이 발생하면 쿼리에 해당 변경 내용이 표시되는지 여부는 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="92abf58210ebaa6ec510b645429d6e91e6ca04d8" translate="yes" xml:space="preserve">
          <source>If changes occur on the same database connection after a query starts running but before the query completes, then the query might return a changed row more than once, or it might return a row that was previously deleted.</source>
          <target state="translated">쿼리 실행이 시작된 후 쿼리가 완료되기 전에 동일한 데이터베이스 연결에서 변경이 발생하면 쿼리는 변경된 행을 두 번 이상 반환하거나 이전에 삭제 된 행을 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="437112dad4bafb7626f6351c41b7b34b2abfaca6" translate="yes" xml:space="preserve">
          <source>If changing into or out of WAL mode the procedure is more complicated.</source>
          <target state="translated">WAL 모드로 들어가거나 나가면 절차가 더 복잡해집니다.</target>
        </trans-unit>
        <trans-unit id="f754396c33d700ad2fd9dbdfe823fd9ae27672f4" translate="yes" xml:space="preserve">
          <source>If column names are explicitly provided for the FTS table as part of the CREATE VIRTUAL TABLE statement, then a datatype name may be optionally specified for each column. This is pure syntactic sugar, the supplied typenames are not used by FTS or the SQLite core for any purpose. The same applies to any constraints specified along with an FTS column name - they are parsed but not used or recorded by the system in any way.</source>
          <target state="translated">CREATE VIRTUAL TABLE 문의 일부로 FTS 테이블에 열 이름이 명시 적으로 제공되는 경우 각 열에 대해 데이터 유형 이름을 선택적으로 지정할 수 있습니다. 이것은 순수한 구문 설탕이며 제공된 유형 이름은 FTS 또는 SQLite 코어에서 어떤 목적으로도 사용되지 않습니다. FTS 열 이름과 함께 지정된 모든 제약 조건에도 동일하게 적용됩니다. 구문 분석은하지만 시스템에서 어떤 식 으로든 사용하거나 기록하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="4ec154d4b803f19da5aae8c26059349f5ffc0b8b" translate="yes" xml:space="preserve">
          <source>If conflict is with a remote UPDATE and the resolution is OMIT, then the old.* values are rebased using the new.* values in the remote change. Or, if the resolution is REPLACE, then the change is copied into the rebased changeset with updates to columns also updated by the conflicting remote UPDATE removed. If this means no columns would be updated, the change is omitted.</source>
          <target state="translated">충돌이 원격 UPDATE와 충돌하고 해상도가 OMIT 인 경우, old. * 값은 원격 변경의 new. * 값을 사용하여 리베이스됩니다. 또는 해결 방법이 REPLACE 인 경우 충돌하는 원격 UPDATE에 의해 업데이트 된 열에 대한 업데이트가 제거 된 상태에서 변경 사항이 rebased changeset에 복사됩니다. 이 경우 열이 업데이트되지 않으면 변경이 생략됩니다.</target>
        </trans-unit>
        <trans-unit id="eacad9fb0a3ce1ea1edfa735ab3f942dbf9e8cd8" translate="yes" xml:space="preserve">
          <source>If cursor P1 is an index, then the content is the key of the row. If cursor P2 is a table, then the content extracted is the data.</source>
          <target state="translated">커서 P1이 인덱스이면 내용이 행의 키입니다. 커서 P2가 테이블이면 추출 된 컨텐츠가 데이터입니다.</target>
        </trans-unit>
        <trans-unit id="ecd4bc0795e5315c7b840830ae1ae10db7944fd7" translate="yes" xml:space="preserve">
          <source>If cursor P1 is not open, jump to instruction P2. Otherwise, fall through.</source>
          <target state="translated">커서 P1이 열려 있지 않으면 명령 P2로 이동합니다. 그렇지 않으면 넘어집니다.</target>
        </trans-unit>
        <trans-unit id="b0e0c624719d0c72631b398ea85cd293212feef6" translate="yes" xml:space="preserve">
          <source>If cursor P1 refers to an SQL table (B-Tree that uses integer keys), use the value in register P3 as a key. If cursor P1 refers to an SQL index, then P3 is the first in an array of P4 registers that are used as an unpacked index key.</source>
          <target state="translated">커서 P1이 SQL 테이블 (정수 키를 사용하는 B- 트리)을 참조하는 경우 레지스터 P3의 값을 키로 사용하십시오. 커서 P1이 SQL 인덱스를 참조하면 P3은 압축 해제 된 인덱스 키로 사용되는 P4 레지스터 배열에서 첫 번째입니다.</target>
        </trans-unit>
        <trans-unit id="eed3ade81291c8b1e43812aa13b2f866776f9f36" translate="yes" xml:space="preserve">
          <source>If cursor P1 refers to an SQL table (B-Tree that uses integer keys), use the value in register P3 as the key. If cursor P1 refers to an SQL index, then P3 is the first in an array of P4 registers that are used as an unpacked index key.</source>
          <target state="translated">커서 P1이 SQL 테이블 (정수 키를 사용하는 B- 트리)을 참조하는 경우 레지스터 P3의 값을 키로 사용하십시오. 커서 P1이 SQL 인덱스를 참조하면 P3은 압축 해제 된 인덱스 키로 사용되는 P4 레지스터 배열에서 첫 번째입니다.</target>
        </trans-unit>
        <trans-unit id="bde1d5766ee802e72c51189e7fb68596781976ad" translate="yes" xml:space="preserve">
          <source>If cursor P1 was previously moved via &lt;a href=&quot;opcode#DeferredSeek&quot;&gt;DeferredSeek&lt;/a&gt;, complete that seek operation now, without further delay. If the cursor seek has already occurred, this instruction is a no-op.</source>
          <target state="translated">커서 P1이 이전에 &lt;a href=&quot;opcode#DeferredSeek&quot;&gt;DeferredSeek&lt;/a&gt; 를 통해 이동 된 경우 추가 지연없이 지금 검색 작업을 완료합니다. 커서 탐색이 이미 발생한 경우이 명령은 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b9a382b280888652763d650554446d773be05c07" translate="yes" xml:space="preserve">
          <source>If data is of type &lt;b&gt;text&lt;/b&gt; then the comparison is determined by the standard C data comparison functions &lt;b&gt;memcmp()&lt;/b&gt; or &lt;b&gt;strcmp()&lt;/b&gt;. The comparison looks at bytes from two inputs one by one and returns the first non-zero difference. Strings are '\000' terminated so shorter strings sort before longer strings, as you would expect.</source>
          <target state="translated">데이터가 &lt;b&gt;text&lt;/b&gt; 유형 인 경우 표준 C 데이터 비교 함수 &lt;b&gt;memcmp ()&lt;/b&gt; 또는 &lt;b&gt;strcmp ()에&lt;/b&gt; 의해 비교가 결정됩니다 . 비교는 두 입력의 바이트를 하나씩보고 0이 아닌 첫 번째 차이를 반환합니다. 문자열은 '\ 000'으로 끝나므로 짧은 문자열은 더 긴 문자열보다 먼저 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="0120d2592940874456695d5517c48510978290bc" translate="yes" xml:space="preserve">
          <source>If database zDb is the name of an attached database that is not in WAL mode, SQLITE_OK is returned and both *pnLog and *pnCkpt set to -1. If zDb is not NULL (or a zero length string) and is not the name of any attached database, SQLITE_ERROR is returned to the caller.</source>
          <target state="translated">데이터베이스 zDb가 WAL 모드가 아닌 접속 된 데이터베이스의 이름 인 경우 SQLITE_OK가 리턴되고 * pnLog 및 * pnCkpt가 -1로 설정됩니다. zDb가 NULL (또는 길이가 0 인 문자열)이 아니고 접속 된 데이터베이스의 이름이 아닌 경우 SQLITE_ERROR가 호출자에게 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="ed9f3d01c8cb63f65cf1f8cb1ada863d801c5821" translate="yes" xml:space="preserve">
          <source>If defined, support for sub-selects and the IN() operator are omitted.</source>
          <target state="translated">정의 된 경우 하위 선택 및 IN () 연산자에 대한 지원은 생략됩니다.</target>
        </trans-unit>
        <trans-unit id="5f4710e921e7c9706b1a7d0affff80c102083b4a" translate="yes" xml:space="preserve">
          <source>If desired, you can verify the new database by running this command:</source>
          <target state="translated">원하는 경우 다음 명령을 실행하여 새 데이터베이스를 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d0b0b6a44b8709f88072f86b2bad9194c580b896" translate="yes" xml:space="preserve">
          <source>If either P1 or P2 is 0 (false) then the result is 0 even if the other input is NULL. A NULL and true or two NULLs give a NULL output.</source>
          <target state="translated">P1 또는 P2가 0 (거짓)이면 다른 입력이 NULL 인 경우에도 결과는 0입니다. NULL 및 true 또는 두 개의 NULL은 NULL 출력을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="0c5f4e14888f22c44de9608417d3500cbb09c876" translate="yes" xml:space="preserve">
          <source>If either P1 or P2 is nonzero (true) then the result is 1 (true) even if the other input is NULL. A NULL and false or two NULLs give a NULL output.</source>
          <target state="translated">P1 또는 P2가 0이 아닌 경우 (true) 다른 입력이 NULL 인 경우에도 결과는 1입니다 (true). NULL 및 false 또는 두 개의 NULL은 NULL 출력을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f718f36fc0872a36f2f90015ef098011701953fd" translate="yes" xml:space="preserve">
          <source>If either P3 or the sorter contains a NULL in one of their significant fields (not counting the P4 fields at the end which are ignored) then the comparison is assumed to be equal.</source>
          <target state="translated">P3 또는 정렬 기가 중요한 필드 중 하나에 NULL을 포함하는 경우 (끝의 P4 필드는 무시되지 않음) 비교는 동일한 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="cb70cc2d7081446ae1bd92c809ed77dcb6489c40" translate="yes" xml:space="preserve">
          <source>If either X&lt;sub&gt;&lt;small&gt;i&lt;/small&gt;&lt;/sub&gt; or X&lt;sub&gt;&lt;small&gt;c&lt;/small&gt;&lt;/sub&gt; are non-numeric, then the boundary is the first row for which the expression &quot;X&lt;sub&gt;&lt;small&gt;i&lt;/small&gt;&lt;/sub&gt; IS X&lt;sub&gt;&lt;small&gt;c&lt;/small&gt;&lt;/sub&gt;&quot; is true.</source>
          <target state="translated">X &lt;sub&gt;&lt;small&gt;i&lt;/small&gt;&lt;/sub&gt; 또는 X &lt;sub&gt;&lt;small&gt;c&lt;/small&gt;&lt;/sub&gt; 가 숫자가 아닌 경우 경계는 표현식 &quot;X &lt;sub&gt;&lt;small&gt;i&lt;/small&gt;&lt;/sub&gt; IS X &lt;sub&gt;&lt;small&gt;c&lt;/small&gt;&lt;/sub&gt; &quot;가 참인 첫 번째 행입니다 .</target>
        </trans-unit>
        <trans-unit id="40afda50342c1866ef5c9245fe131f4faa8b196a" translate="yes" xml:space="preserve">
          <source>If either operand has an explicit collating function assignment using the postfix &lt;a href=&quot;lang_expr#collateop&quot;&gt;COLLATE operator&lt;/a&gt;, then the explicit collating function is used for comparison, with precedence to the collating function of the left operand.</source>
          <target state="translated">두 피연산자에 postfix &lt;a href=&quot;lang_expr#collateop&quot;&gt;COLLATE 연산자&lt;/a&gt; 를 사용하여 명시 적 조합 함수가 지정된 경우, 명시 적 조합 함수가 왼쪽 피연산자의 조합 함수보다 우선하여 비교에 사용됩니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
