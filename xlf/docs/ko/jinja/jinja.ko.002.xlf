<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="jinja">
    <body>
      <group id="jinja">
        <trans-unit id="d863a180346740ce1d314cf60f269ee2723042db" translate="yes" xml:space="preserve">
          <source>This loader works like the &lt;code&gt;PrefixLoader&lt;/code&gt; just that no prefix is specified. If a template could not be found by one loader the next one is tried.</source>
          <target state="translated">이 로더는 접두사가 지정되지 않은 경우 &lt;code&gt;PrefixLoader&lt;/code&gt; 처럼 작동 합니다. 한 로더에서 템플릿을 찾을 수없는 경우 다음 로더가 시도됩니다.</target>
        </trans-unit>
        <trans-unit id="e0e66997f51455243847651035951e136b3c9d1a" translate="yes" xml:space="preserve">
          <source>This makes it safe to embed such strings in any place in HTML with the notable exception of double quoted attributes. In that case single quote your attributes or HTML escape it in addition.</source>
          <target state="translated">따라서 큰 따옴표 속성을 제외하고는 HTML의 어느 위치 에나 이러한 문자열을 포함하는 것이 안전합니다. 이 경우 작은 따옴표로 속성 또는 HTML을 추가로 이스케이프하십시오.</target>
        </trans-unit>
        <trans-unit id="6a448d331371a7ef73401ac7192d33af1a406db3" translate="yes" xml:space="preserve">
          <source>This means that the name &lt;code&gt;some_name&lt;/code&gt; is not defined. If the name was from an attribute of an object it makes sense to tell the undefined object the holder object to improve the error message:</source>
          <target state="translated">이는 &lt;code&gt;some_name&lt;/code&gt; 이라는 이름 이 정의되지 않았 음을 의미합니다 . 이름이 개체의 속성에서 나온 경우 정의되지 않은 개체에 홀더 개체를 알려 주어 오류 메시지를 개선하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="fa953140b486807f24abafdd8d3b9f80cf7ac1d3" translate="yes" xml:space="preserve">
          <source>This method accepts the same arguments as the &lt;code&gt;dict&lt;/code&gt; constructor: A dict, a dict subclass or some keyword arguments. If no arguments are given the context will be empty. These two calls do the same:</source>
          <target state="translated">이 메서드는 &lt;code&gt;dict&lt;/code&gt; 생성자 와 동일한 인수 ( dict, dict 하위 클래스 또는 일부 키워드 인수)를받습니다. 인수가 제공되지 않으면 컨텍스트가 비어 있습니다. 이 두 호출은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="41120f5a688cd11840518ec9be94e2a5ced7cc9c" translate="yes" xml:space="preserve">
          <source>This method is called before the actual lexing and can be used to preprocess the source. The &lt;code&gt;filename&lt;/code&gt; is optional. The return value must be the preprocessed source.</source>
          <target state="translated">이 메서드는 실제 렉싱 전에 호출되며 소스를 전처리하는 데 사용할 수 있습니다. &lt;code&gt;filename&lt;/code&gt; 선택 사항입니다. 반환 값은 전처리 된 소스 여야합니다.</target>
        </trans-unit>
        <trans-unit id="b91b05d8b88323b58367484528ba1154cba157e4" translate="yes" xml:space="preserve">
          <source>This method iterates over all fields that are defined and yields &lt;code&gt;(key, value)&lt;/code&gt; tuples. Per default all fields are returned, but it&amp;rsquo;s possible to limit that to some fields by providing the &lt;code&gt;only&lt;/code&gt; parameter or to exclude some using the &lt;code&gt;exclude&lt;/code&gt; parameter. Both should be sets or tuples of field names.</source>
          <target state="translated">이 메서드는 정의 된 모든 필드를 반복하고 &lt;code&gt;(key, value)&lt;/code&gt; 튜플을 생성합니다. 기본적으로 모든 필드가 반환되지만 &lt;code&gt;only&lt;/code&gt; 매개 변수 를 제공하여 일부 필드로 제한 하거나 &lt;code&gt;exclude&lt;/code&gt; 매개 변수를 사용하여 일부를 제외 할 수 있습니다. 둘 다 필드 이름의 집합 또는 튜플이어야합니다.</target>
        </trans-unit>
        <trans-unit id="c7ce894162589691116d32ef84a704b44546e509" translate="yes" xml:space="preserve">
          <source>This method works like the &lt;a href=&quot;#jinja2.Template.module&quot;&gt;&lt;code&gt;module&lt;/code&gt;&lt;/a&gt; attribute when called without arguments but it will evaluate the template on every call rather than caching it. It&amp;rsquo;s also possible to provide a dict which is then used as context. The arguments are the same as for the &lt;a href=&quot;#jinja2.Template.new_context&quot;&gt;&lt;code&gt;new_context()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">이 메서드는 인수없이 호출 될 때 &lt;a href=&quot;#jinja2.Template.module&quot;&gt; &lt;code&gt;module&lt;/code&gt; &lt;/a&gt; 속성 처럼 작동 하지만 캐싱하는 대신 모든 호출에서 템플릿을 평가합니다. 컨텍스트로 사용되는 dict를 제공하는 것도 가능합니다. 인수는 &lt;a href=&quot;#jinja2.Template.new_context&quot;&gt; &lt;code&gt;new_context()&lt;/code&gt; &lt;/a&gt; 메소드 와 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="a3816f33506ba930548940043ebae20dc1f01d60" translate="yes" xml:space="preserve">
          <source>This node applies a filter on an expression. &lt;code&gt;name&lt;/code&gt; is the name of the filter, the rest of the fields are the same as for &lt;a href=&quot;#jinja2.nodes.Call&quot;&gt;&lt;code&gt;Call&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 노드는 표현식에 필터를 적용합니다. &lt;code&gt;name&lt;/code&gt; 은 필터의 이름이고 나머지 필드는 &lt;a href=&quot;#jinja2.nodes.Call&quot;&gt; &lt;code&gt;Call&lt;/code&gt; &lt;/a&gt; 과 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="b30b493009ea72051006219b424e9aeb524000d5" translate="yes" xml:space="preserve">
          <source>This node is usually constructed by calling the &lt;a href=&quot;#jinja2.ext.Extension.attr&quot;&gt;&lt;code&gt;attr()&lt;/code&gt;&lt;/a&gt; method on an extension.</source>
          <target state="translated">이 노드는 일반적으로 확장 에서 &lt;a href=&quot;#jinja2.ext.Extension.attr&quot;&gt; &lt;code&gt;attr()&lt;/code&gt; &lt;/a&gt; 메서드를 호출하여 구성됩니다 .</target>
        </trans-unit>
        <trans-unit id="ccd4eb4166f8316fada789daf3cae14564978778" translate="yes" xml:space="preserve">
          <source>This part of the documentation shows some tips and tricks for Jinja templates.</source>
          <target state="translated">설명서의이 부분에서는 Jinja 템플릿에 대한 몇 가지 팁과 요령을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="5079cc270d59d333b4911c28cde2f5cb528b7689" translate="yes" xml:space="preserve">
          <source>This results in &lt;code&gt;This is %(book_title)s. You should read it!&lt;/code&gt; in the translation file.</source>
          <target state="translated">결과적으로 &lt;code&gt;This is %(book_title)s. You should read it!&lt;/code&gt; 번역 파일에서.</target>
        </trans-unit>
        <trans-unit id="a17d91aee55372ef0b1fb75df2f2eb544a2c2ace" translate="yes" xml:space="preserve">
          <source>This section gives you a brief introduction to the Python API for Jinja templates.</source>
          <target state="translated">이 섹션에서는 Jinja 용 Python API 템플릿에 대해 간략하게 소개합니다.</target>
        </trans-unit>
        <trans-unit id="f037b21f321db73b38de4bdaf85c55632903bc27" translate="yes" xml:space="preserve">
          <source>This set contains all the names the template exports. The values for the names are in the &lt;a href=&quot;#jinja2.runtime.Context.vars&quot;&gt;&lt;code&gt;vars&lt;/code&gt;&lt;/a&gt; dict. In order to get a copy of the exported variables as dict, &lt;a href=&quot;#jinja2.runtime.Context.get_exported&quot;&gt;&lt;code&gt;get_exported()&lt;/code&gt;&lt;/a&gt; can be used.</source>
          <target state="translated">이 세트에는 템플릿이 내보내는 모든 이름이 포함됩니다. 이름 값은 &lt;a href=&quot;#jinja2.runtime.Context.vars&quot;&gt; &lt;code&gt;vars&lt;/code&gt; &lt;/a&gt; dict에 있습니다. 내 보낸 변수의 사본을 dict로 가져 오기 위해 &lt;a href=&quot;#jinja2.runtime.Context.get_exported&quot;&gt; &lt;code&gt;get_exported()&lt;/code&gt; &lt;/a&gt; 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="de4612db81e3ff1c3012bb68a49b36db02984fca" translate="yes" xml:space="preserve">
          <source>This template, which we&amp;rsquo;ll call &lt;code&gt;base.html&lt;/code&gt;, defines a simple HTML skeleton document that you might use for a simple two-column page. It&amp;rsquo;s the job of &amp;ldquo;child&amp;rdquo; templates to fill the empty blocks with content:</source>
          <target state="translated">&lt;code&gt;base.html&lt;/code&gt; 이라고 부르는이 템플릿 은 간단한 2 열 페이지에 사용할 수있는 간단한 HTML 스켈레톤 문서를 정의합니다. 빈 블록을 내용으로 채우는 것이 &quot;자식&quot;템플릿의 역할입니다.</target>
        </trans-unit>
        <trans-unit id="435ab8f84aa59ee6319fa6c6fa98b81a6e979657" translate="yes" xml:space="preserve">
          <source>This will create a template environment with the default settings and a loader that looks up the templates in the &lt;code&gt;templates&lt;/code&gt; folder inside the &lt;code&gt;yourapplication&lt;/code&gt; python package. Different loaders are available and you can also write your own if you want to load templates from a database or other resources. This also enables autoescaping for HTML and XML files.</source>
          <target state="translated">그러면 기본 설정과 &lt;code&gt;yourapplication&lt;/code&gt; python 패키지 내의 &lt;code&gt;templates&lt;/code&gt; 폴더 에서 템플릿을 찾는 로더가있는 템플릿 환경이 생성 됩니다. 다양한 로더를 사용할 수 있으며 데이터베이스 또는 기타 리소스에서 템플릿을로드하려는 경우 직접 작성할 수도 있습니다. 또한 HTML 및 XML 파일에 대한 자동 이스케이프를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c13cba2e710a375d0d0879417c4f2afd93911364" translate="yes" xml:space="preserve">
          <source>This will install Jinja in your Python installation&amp;rsquo;s site-packages directory.</source>
          <target state="translated">그러면 Python 설치의 site-packages 디렉토리에 Jinja가 설치됩니다.</target>
        </trans-unit>
        <trans-unit id="78c7ddc3a887ed1d5667c2ac4827c6b8348edfc3" translate="yes" xml:space="preserve">
          <source>This will output the value of &lt;code&gt;my_variable&lt;/code&gt; if the variable was defined, otherwise &lt;code&gt;'my_variable is not defined'&lt;/code&gt;. If you want to use default with variables that evaluate to false you have to set the second parameter to &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="translated">변수가 정의 된 경우 &lt;code&gt;my_variable&lt;/code&gt; 값을 출력하고 , 그렇지 않으면 &lt;code&gt;'my_variable is not defined'&lt;/code&gt; 를 출력 합니다. false로 평가되는 변수에 기본값을 사용하려면 두 번째 매개 변수를 &lt;code&gt;true&lt;/code&gt; 로 설정해야 합니다 .</target>
        </trans-unit>
        <trans-unit id="2fb7104fa7558036a6a879189a644056e99cbbf2" translate="yes" xml:space="preserve">
          <source>This will return the rendered template as unicode string.</source>
          <target state="translated">이렇게하면 렌더링 된 템플릿이 유니 코드 문자열로 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="b96ca0cdefd4eae6c986997d05c7eb845381b8f9" translate="yes" xml:space="preserve">
          <source>This will yield all elements without whitespace between them. If &lt;code&gt;seq&lt;/code&gt; was a list of numbers from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt;, the output would be &lt;code&gt;123456789&lt;/code&gt;.</source>
          <target state="translated">이렇게하면 공백없이 모든 요소가 생성됩니다. 경우 &lt;code&gt;seq&lt;/code&gt; 에서 번호 목록이었다 &lt;code&gt;1&lt;/code&gt; 에 &lt;code&gt;9&lt;/code&gt; , 출력 될 &lt;code&gt;123456789&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="cd03e14f67d12333c783b1f577ac18588d4e5f54" translate="yes" xml:space="preserve">
          <source>This works for methods on user-defined types. For example, if variable &lt;code&gt;f&lt;/code&gt; of type &lt;code&gt;Foo&lt;/code&gt; has a method &lt;code&gt;bar&lt;/code&gt; defined on it, you can do the following:</source>
          <target state="translated">이것은 사용자 정의 유형의 메소드에 대해 작동합니다. 예를 들어 &lt;code&gt;Foo&lt;/code&gt; 유형의 변수 &lt;code&gt;f&lt;/code&gt; 에 메서드 &lt;code&gt;bar&lt;/code&gt; 정의되어있는 경우 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="401fb4e52603a15d4acef87b4f6a785d6a20c7bc" translate="yes" xml:space="preserve">
          <source>This works similar to &lt;a href=&quot;#jinja2.Template.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; but returns a coroutine that when awaited returns the entire rendered template string. This requires the async feature to be enabled.</source>
          <target state="translated">이것은 &lt;a href=&quot;#jinja2.Template.render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt; 와 유사하게 작동 하지만 대기 할 때 렌더링 된 전체 템플릿 문자열을 반환하는 코 루틴을 반환합니다. 이를 위해서는 비동기 기능을 활성화해야합니다.</target>
        </trans-unit>
        <trans-unit id="092da30065f07adb4a08c52dc1aaf646aa06aee4" translate="yes" xml:space="preserve">
          <source>Tips and Tricks</source>
          <target state="translated">팁과 요령</target>
        </trans-unit>
        <trans-unit id="0289557ddcc5c7f3711bd523a200ccbf6a985671" translate="yes" xml:space="preserve">
          <source>To bind more than one expression, separate each with a comma (&lt;code&gt;,&lt;/code&gt;).</source>
          <target state="translated">둘 이상의 표현식을 바인딩하려면 각 표현식을 쉼표 ( &lt;code&gt;,&lt;/code&gt; ) 로 구분하십시오 .</target>
        </trans-unit>
        <trans-unit id="c66efdf9966e95162ab9c3cbf18c2a6f6bc0bba0" translate="yes" xml:space="preserve">
          <source>To comment-out part of a line in a template, use the comment syntax which is by default set to &lt;code&gt;{# ... #}&lt;/code&gt;. This is useful to comment out parts of the template for debugging or to add information for other template designers or yourself:</source>
          <target state="translated">템플릿에서 줄의 일부를 주석 처리하려면 기본적으로 &lt;code&gt;{# ... #}&lt;/code&gt; 설정된 주석 구문을 사용하십시오 . 이는 디버깅을 위해 템플릿의 일부를 주석 처리하거나 다른 템플릿 디자이너 또는 자신을위한 정보를 추가하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="c4de284a7f6b24428fa64c4d101bc3ac26df6333" translate="yes" xml:space="preserve">
          <source>To disallow a method, just override it and raise &lt;a href=&quot;#jinja2.Undefined._undefined_exception&quot;&gt;&lt;code&gt;_undefined_exception&lt;/code&gt;&lt;/a&gt;. Because this is a very common idiom in undefined objects there is the helper method &lt;a href=&quot;#jinja2.Undefined._fail_with_undefined_error&quot;&gt;&lt;code&gt;_fail_with_undefined_error()&lt;/code&gt;&lt;/a&gt; that does the error raising automatically. Here a class that works like the regular &lt;a href=&quot;#jinja2.Undefined&quot;&gt;&lt;code&gt;Undefined&lt;/code&gt;&lt;/a&gt; but chokes on iteration:</source>
          <target state="translated">메서드를 허용하지 않으려면 메서드를 재정의하고 &lt;a href=&quot;#jinja2.Undefined._undefined_exception&quot;&gt; &lt;code&gt;_undefined_exception&lt;/code&gt; 을 발생&lt;/a&gt; 시킵니다. 이것은 정의되지 않은 객체에서 매우 일반적인 관용구이기 때문에 자동으로 오류를 발생 시키는 도우미 메서드 &lt;a href=&quot;#jinja2.Undefined._fail_with_undefined_error&quot;&gt; &lt;code&gt;_fail_with_undefined_error()&lt;/code&gt; &lt;/a&gt; 가 있습니다. 다음은 일반 &lt;a href=&quot;#jinja2.Undefined&quot;&gt; &lt;code&gt;Undefined&lt;/code&gt; &lt;/a&gt; 처럼 작동 하지만 반복에 질식 하는 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="ce1e6faf005b121bc54f8ca521afc54f82c7e218" translate="yes" xml:space="preserve">
          <source>To explicitly use a Unicode string you have to prefix the string literal with a &lt;code&gt;u&lt;/code&gt;: &lt;code&gt;u'H&amp;auml;nsel und Gretel sagen Hallo'&lt;/code&gt;. That way Python will store the string as Unicode by decoding the string with the character encoding from the current Python module. If no encoding is specified this defaults to &amp;lsquo;ASCII&amp;rsquo; which means that you can&amp;rsquo;t use any non ASCII identifier.</source>
          <target state="translated">유니 코드 문자열을 명시 적으로 사용하려면 문자열 리터럴 앞에 &lt;code&gt;u&lt;/code&gt; : &lt;code&gt;u'H&amp;auml;nsel und Gretel sagen Hallo'&lt;/code&gt; 접두사를 붙여야합니다 . 그런 식으로 파이썬은 현재 파이썬 모듈의 문자 인코딩으로 문자열을 디코딩하여 문자열을 유니 코드로 저장합니다. 인코딩이 지정되지 않은 경우 기본값은 'ASCII'이며 이는 ASCII가 아닌 식별자를 사용할 수 없음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="8b1ac6ad1be2d9a63552d16227b8f5fa7ef74501" translate="yes" xml:space="preserve">
          <source>To follow symbolic links, set the &lt;em&gt;followlinks&lt;/em&gt; parameter to &lt;code&gt;True&lt;/code&gt;:</source>
          <target state="translated">기호 링크를 따르려면 &lt;em&gt;followlinks&lt;/em&gt; 매개 변수를 &lt;code&gt;True&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="d4e97b13167a456e1073250a2a6070060ab86b39" translate="yes" xml:space="preserve">
          <source>To implement your own bytecode cache you have to subclass this class and override &lt;a href=&quot;#jinja2.BytecodeCache.load_bytecode&quot;&gt;&lt;code&gt;load_bytecode()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#jinja2.BytecodeCache.dump_bytecode&quot;&gt;&lt;code&gt;dump_bytecode()&lt;/code&gt;&lt;/a&gt;. Both of these methods are passed a &lt;a href=&quot;#jinja2.bccache.Bucket&quot;&gt;&lt;code&gt;Bucket&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">고유 한 바이트 코드 캐시를 구현하려면이 클래스를 하위 클래스로 만들고 &lt;a href=&quot;#jinja2.BytecodeCache.load_bytecode&quot;&gt; &lt;code&gt;load_bytecode()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#jinja2.BytecodeCache.dump_bytecode&quot;&gt; &lt;code&gt;dump_bytecode()&lt;/code&gt; &lt;/a&gt; 재정의 해야 합니다. 이 두 메서드는 모두 &lt;a href=&quot;#jinja2.bccache.Bucket&quot;&gt; &lt;code&gt;Bucket&lt;/code&gt; 에&lt;/a&gt; 전달 됩니다.</target>
        </trans-unit>
        <trans-unit id="49b72212876f7d2a430fe5d30cc97c33d2df273c" translate="yes" xml:space="preserve">
          <source>To load a template from this environment you just have to call the &lt;code&gt;get_template()&lt;/code&gt; method which then returns the loaded &lt;a href=&quot;#jinja2.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">이 환경에서 템플릿을로드하려면 &lt;code&gt;get_template()&lt;/code&gt; 메서드 를 호출 한 다음로드 된 &lt;a href=&quot;#jinja2.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt; 을 반환하면됩니다 .</target>
        </trans-unit>
        <trans-unit id="65a64d447fa9e0f2b41b984aacad91053cf058f8" translate="yes" xml:space="preserve">
          <source>To pluralize, specify both the singular and plural forms separated by the &lt;code&gt;pluralize&lt;/code&gt; tag.</source>
          <target state="translated">복수형하려면로 구분하여 모두 단수 및 복수 형태 지정 &lt;code&gt;pluralize&lt;/code&gt; 태그를.</target>
        </trans-unit>
        <trans-unit id="30732c04f90856fcd1db99ec5e20979fb5e0fde2" translate="yes" xml:space="preserve">
          <source>To render it with some variables, just call the &lt;code&gt;render()&lt;/code&gt; method:</source>
          <target state="translated">일부 변수로 렌더링하려면 render &lt;code&gt;render()&lt;/code&gt; 메서드를 호출하면됩니다 .</target>
        </trans-unit>
        <trans-unit id="d599683645bba59783c07c84e753d89e879f7e3c" translate="yes" xml:space="preserve">
          <source>To set a better module encoding add the following comment to the first or second line of the Python module using the Unicode literal:</source>
          <target state="translated">더 나은 모듈 인코딩을 설정하려면 유니 코드 리터럴을 사용하여 Python 모듈의 첫 번째 또는 두 번째 줄에 다음 주석을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="232aef14aa557620e6b5d5bca55c569c309c8874" translate="yes" xml:space="preserve">
          <source>To use a bytecode cache, instantiate it and pass it to the &lt;a href=&quot;#jinja2.Environment&quot;&gt;&lt;code&gt;Environment&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">바이트 코드 캐시를 사용하려면 인스턴스화하고 &lt;a href=&quot;#jinja2.Environment&quot;&gt; &lt;code&gt;Environment&lt;/code&gt; &lt;/a&gt; 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="10d7f85efa22c50ef3f3a1940e7b5c79b3541be8" translate="yes" xml:space="preserve">
          <source>To use placeholders, use the &lt;code&gt;format&lt;/code&gt; filter.</source>
          <target state="translated">자리 표시자를 사용하려면 &lt;code&gt;format&lt;/code&gt; 필터를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="1fc587f5d81d8408612c7dbbe5bd4506caf84d58" translate="yes" xml:space="preserve">
          <source>Token class.</source>
          <target state="translated">토큰 클래스.</target>
        </trans-unit>
        <trans-unit id="9ae3e54400c68a53cfb69eb8a401f0cc16d61ac9" translate="yes" xml:space="preserve">
          <source>True if first iteration.</source>
          <target state="translated">첫 번째 반복 인 경우 True입니다.</target>
        </trans-unit>
        <trans-unit id="17da1863aedb099a79d1af3502d728a77a99fa54" translate="yes" xml:space="preserve">
          <source>True if last iteration.</source>
          <target state="translated">마지막 반복 인 경우 참입니다.</target>
        </trans-unit>
        <trans-unit id="9f3dbea9ce0d2761d47d975bfe507d2d61683c08" translate="yes" xml:space="preserve">
          <source>True if previously called with a different value (or not called at all).</source>
          <target state="translated">이전에 다른 값으로 호출 된 경우 (또는 전혀 호출되지 않은 경우) 참입니다.</target>
        </trans-unit>
        <trans-unit id="388efa43b6e1f54a8694a98b7c0080e4ed13703f" translate="yes" xml:space="preserve">
          <source>Tuples are like lists that cannot be modified (&amp;ldquo;immutable&amp;rdquo;). If a tuple only has one item, it must be followed by a comma (&lt;code&gt;('1-tuple',)&lt;/code&gt;). Tuples are usually used to represent items of two or more elements. See the list example above for more details.</source>
          <target state="translated">튜플은 수정할 수없는 ( &quot;불변&quot;) 목록과 같습니다. 튜플에 항목이 하나만있는 경우 뒤에 쉼표 ( &lt;code&gt;('1-tuple',)&lt;/code&gt; ) 가 와야합니다 . 튜플은 일반적으로 둘 이상의 요소 항목을 나타내는 데 사용됩니다. 자세한 내용은 위의 목록 예를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="370d9cbd3a52b9c2f60d4383c7c3354bccd616a8" translate="yes" xml:space="preserve">
          <source>Undefined Types</source>
          <target state="translated">정의되지 않은 유형</target>
        </trans-unit>
        <trans-unit id="abfcccf4fe252b1909864b8194e9d8258e4ef10e" translate="yes" xml:space="preserve">
          <source>Undefined objects are created by calling &lt;a href=&quot;../templates/index#undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">정의되지 않은 객체는 &lt;a href=&quot;../templates/index#undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 를 호출하여 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="9ab0bd9a6126ee4b9d7538d5c6cba7aa587f31ed" translate="yes" xml:space="preserve">
          <source>Unicode</source>
          <target state="translated">Unicode</target>
        </trans-unit>
        <trans-unit id="e295763a7638694a2dfd6c5e9a9ce4471772ea4d" translate="yes" xml:space="preserve">
          <source>Uninstall the environment&amp;rsquo;s globally installed translation.</source>
          <target state="translated">환경에 전역 적으로 설치된 번역을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="d18fc92749b88d7dd9b2b1c4f6324e9c462c2dd3" translate="yes" xml:space="preserve">
          <source>Unlike in Python, it&amp;rsquo;s not possible to &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; in a loop. You can, however, filter the sequence during iteration, which allows you to skip items. The following example skips all the users which are hidden:</source>
          <target state="translated">Python과 달리 루프에서 &lt;code&gt;break&lt;/code&gt; 하거나 &lt;code&gt;continue&lt;/code&gt; 수 없습니다 . 그러나 반복 중에 시퀀스를 필터링하여 항목을 건너 뛸 수 있습니다. 다음 예에서는 숨겨진 모든 사용자를 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="203eeb94fb74da04005ae86bf33b632a032480a2" translate="yes" xml:space="preserve">
          <source>Use the built-in &lt;a href=&quot;https://docs.python.org/3/library/functions.html#next&quot;&gt;&lt;code&gt;next()&lt;/code&gt;&lt;/a&gt; instead of calling this directly.</source>
          <target state="translated">이것을 직접 호출하는 대신 내장 &lt;a href=&quot;https://docs.python.org/3/library/functions.html#next&quot;&gt; &lt;code&gt;next()&lt;/code&gt; &lt;/a&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="9d85cc02bf8ed68283b794a190a8f0b81b5c1126" translate="yes" xml:space="preserve">
          <source>Using a template loader rather than passing strings to &lt;a href=&quot;#jinja2.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#jinja2.Environment.from_string&quot;&gt;&lt;code&gt;Environment.from_string()&lt;/code&gt;&lt;/a&gt; has multiple advantages. Besides being a lot easier to use it also enables template inheritance.</source>
          <target state="translated">&lt;a href=&quot;#jinja2.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#jinja2.Environment.from_string&quot;&gt; &lt;code&gt;Environment.from_string()&lt;/code&gt; &lt;/a&gt; 문자열을 전달하는 대신 템플릿 로더를 사용하면 여러 가지 이점이 있습니다. 사용하기가 훨씬 쉬울뿐만 아니라 템플릿 상속도 가능합니다.</target>
        </trans-unit>
        <trans-unit id="50b1a9711e82018cd5ae87b99630b91ae170bc8a" translate="yes" xml:space="preserve">
          <source>Usually child templates extend from one template that adds a basic HTML skeleton. However it&amp;rsquo;s possible to put the &lt;code&gt;extends&lt;/code&gt; tag into an &lt;code&gt;if&lt;/code&gt; tag to only extend from the layout template if the &lt;code&gt;standalone&lt;/code&gt; variable evaluates to false which it does per default if it&amp;rsquo;s not defined. Additionally a very basic skeleton is added to the file so that if it&amp;rsquo;s indeed rendered with &lt;code&gt;standalone&lt;/code&gt; set to &lt;code&gt;True&lt;/code&gt; a very basic HTML skeleton is added:</source>
          <target state="translated">일반적으로 하위 템플릿은 기본 HTML 스켈레톤을 추가하는 하나의 템플릿에서 확장됩니다. 그러나 &lt;code&gt;standalone&lt;/code&gt; 변수가 정의되지 않은 경우 기본값에 따라 수행되는 false로 평가되는 경우 레이아웃 템플릿에서만 확장하도록 &lt;code&gt;if&lt;/code&gt; 태그에 &lt;code&gt;extends&lt;/code&gt; 태그 를 넣을 수 있습니다 . 추가적으로 매우 기본적인 뼈대가 파일에 추가되어 실제로 &lt;code&gt;standalone&lt;/code&gt; 이 &lt;code&gt;True&lt;/code&gt; 로 설정된 상태로 렌더링 되면 매우 기본적인 HTML 뼈대가 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="18fdc5ee8b1f8fba8dabaa933373c0483ab7fad7" translate="yes" xml:space="preserve">
          <source>Utilities</source>
          <target state="translated">Utilities</target>
        </trans-unit>
        <trans-unit id="19de69cb601f53a4ea7af22a65c71ae63251365c" translate="yes" xml:space="preserve">
          <source>Variable</source>
          <target state="translated">Variable</target>
        </trans-unit>
        <trans-unit id="4d860d4c0fd0cabeb7ac0adacac062804aa6b6df" translate="yes" xml:space="preserve">
          <source>Variable tags can only be a name, not attribute access, filters, or other expressions. To use an expression, bind it to a name in the &lt;code&gt;trans&lt;/code&gt; tag for use in the block.</source>
          <target state="translated">변수 태그는 속성 액세스, 필터 또는 기타 표현식이 아닌 이름 만 될 수 있습니다. 표현식을 사용하려면 블록에서 사용할 수 있도록 &lt;code&gt;trans&lt;/code&gt; 태그 의 이름에 바인딩하십시오 .</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="ee1f96ac809548e8406325e875bc67e8e0a29f8e" translate="yes" xml:space="preserve">
          <source>Variables can be modified by &lt;strong&gt;filters&lt;/strong&gt;. Filters are separated from the variable by a pipe symbol (&lt;code&gt;|&lt;/code&gt;) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.</source>
          <target state="translated">변수는 &lt;strong&gt;필터&lt;/strong&gt; 로 수정할 수 있습니다 . 필터는 파이프 기호 ( &lt;code&gt;|&lt;/code&gt; )로 변수와 구분 되며 괄호 안에 선택적 인수가있을 수 있습니다. 여러 필터를 연결할 수 있습니다. 한 필터의 출력이 다음 필터에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="84a7c91c114ed328e433fe6c1ad61f2c728590b0" translate="yes" xml:space="preserve">
          <source>Variables stored in the &lt;a href=&quot;#jinja2.Environment.globals&quot;&gt;&lt;code&gt;Environment.globals&lt;/code&gt;&lt;/a&gt; dict are special as they are available for imported templates too, even if they are imported without context. This is the place where you can put variables and functions that should be available all the time. Additionally &lt;a href=&quot;#jinja2.Template.globals&quot;&gt;&lt;code&gt;Template.globals&lt;/code&gt;&lt;/a&gt; exist that are variables available to a specific template that are available to all &lt;a href=&quot;#jinja2.Template.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; calls.</source>
          <target state="translated">&lt;a href=&quot;#jinja2.Environment.globals&quot;&gt; &lt;code&gt;Environment.globals&lt;/code&gt; &lt;/a&gt; dict에 저장된 변수 는 컨텍스트없이 가져온 경우에도 가져온 템플릿에도 사용할 수 있으므로 특별합니다. 항상 사용할 수 있어야하는 변수와 함수를 넣을 수있는 곳입니다. 또한 모든 &lt;a href=&quot;#jinja2.Template.render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt; 호출에 사용할 수있는 특정 템플릿에 사용할 수있는 변수 인 &lt;a href=&quot;#jinja2.Template.globals&quot;&gt; &lt;code&gt;Template.globals&lt;/code&gt; &lt;/a&gt; 가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3c9533bbf506370bc431d8dd5af8f1f02b5a86a3" translate="yes" xml:space="preserve">
          <source>Version 2.0</source>
          <target state="translated">버전 2.0</target>
        </trans-unit>
        <trans-unit id="070adba55d29ed981d1f1e6207ac09ccc10202a9" translate="yes" xml:space="preserve">
          <source>Version 2.0rc1</source>
          <target state="translated">버전 2.0rc1</target>
        </trans-unit>
        <trans-unit id="8870139b38dc6dbcc333e4720c5638bbcccaba57" translate="yes" xml:space="preserve">
          <source>Version 2.1</source>
          <target state="translated">버전 2.1</target>
        </trans-unit>
        <trans-unit id="bd4f2774b366cbed95d0a7d13164f8676f0ff5c3" translate="yes" xml:space="preserve">
          <source>Version 2.1.1</source>
          <target state="translated">버전 2.1.1</target>
        </trans-unit>
        <trans-unit id="a3a7991228eaa939714e990a914842c05ca4a0b7" translate="yes" xml:space="preserve">
          <source>Version 2.10</source>
          <target state="translated">버전 2.10</target>
        </trans-unit>
        <trans-unit id="fcab7738b0573fe3cb859b83a3f481edbccb981c" translate="yes" xml:space="preserve">
          <source>Version 2.10.1</source>
          <target state="translated">버전 2.10.1</target>
        </trans-unit>
        <trans-unit id="1f8fed4e8d7fbd46cd466a9ff8f76ea8f142d48f" translate="yes" xml:space="preserve">
          <source>Version 2.10.2</source>
          <target state="translated">버전 2.10.2</target>
        </trans-unit>
        <trans-unit id="778c5bdabc06f62e694f8be0c4128d6b77eec4bb" translate="yes" xml:space="preserve">
          <source>Version 2.10.3</source>
          <target state="translated">버전 2.10.3</target>
        </trans-unit>
        <trans-unit id="c60ae66db641a8fcb2810943b7c2dcad5043c81e" translate="yes" xml:space="preserve">
          <source>Version 2.11.0</source>
          <target state="translated">버전 2.11.0</target>
        </trans-unit>
        <trans-unit id="25e8e912bdf47d61972f9252933a1256a9d358f6" translate="yes" xml:space="preserve">
          <source>Version 2.11.1</source>
          <target state="translated">버전 2.11.1</target>
        </trans-unit>
        <trans-unit id="c622c84f9489b56a200431f2ef9dce4948ee9319" translate="yes" xml:space="preserve">
          <source>Version 2.11.2</source>
          <target state="translated">버전 2.11.2</target>
        </trans-unit>
        <trans-unit id="e43c274ed1836390b89e98fe2af4aadc1ee8831c" translate="yes" xml:space="preserve">
          <source>Version 2.2</source>
          <target state="translated">버전 2.2</target>
        </trans-unit>
        <trans-unit id="3a4a6411852004de31df001ddf4bae1614388376" translate="yes" xml:space="preserve">
          <source>Version 2.2.1</source>
          <target state="translated">버전 2.2.1</target>
        </trans-unit>
        <trans-unit id="3b990092a3cd719217a9e9bcd8bf065a916f5649" translate="yes" xml:space="preserve">
          <source>Version 2.3</source>
          <target state="translated">버전 2.3</target>
        </trans-unit>
        <trans-unit id="d705fb43f14029e4816a54f82bb5391e5bc59b44" translate="yes" xml:space="preserve">
          <source>Version 2.3.1</source>
          <target state="translated">버전 2.3.1</target>
        </trans-unit>
        <trans-unit id="2eb307439b7ee3925eb3d57a7e7e158d89b63311" translate="yes" xml:space="preserve">
          <source>Version 2.4</source>
          <target state="translated">버전 2.4</target>
        </trans-unit>
        <trans-unit id="c1932fa65d9d61503bcc31bc5baa75a4968d4d56" translate="yes" xml:space="preserve">
          <source>Version 2.4.1</source>
          <target state="translated">버전 2.4.1</target>
        </trans-unit>
        <trans-unit id="5798d2ecf3d692bd045cddb819913462a795016f" translate="yes" xml:space="preserve">
          <source>Version 2.5</source>
          <target state="translated">버전 2.5</target>
        </trans-unit>
        <trans-unit id="d3783f9f9c3bb43ea810f78251407d9d2613a52d" translate="yes" xml:space="preserve">
          <source>Version 2.5.1</source>
          <target state="translated">버전 2.5.1</target>
        </trans-unit>
        <trans-unit id="401dc128069e032d519044032a6de1f1efc3ecbe" translate="yes" xml:space="preserve">
          <source>Version 2.5.2</source>
          <target state="translated">버전 2.5.2</target>
        </trans-unit>
        <trans-unit id="e814465a1fef080dfa16e3485985a60a9aa40c43" translate="yes" xml:space="preserve">
          <source>Version 2.5.3</source>
          <target state="translated">버전 2.5.3</target>
        </trans-unit>
        <trans-unit id="873707f782e8416465dffde41a60a178ed4d4638" translate="yes" xml:space="preserve">
          <source>Version 2.5.4</source>
          <target state="translated">버전 2.5.4</target>
        </trans-unit>
        <trans-unit id="c7e9350267cea083824626334162520d75a69523" translate="yes" xml:space="preserve">
          <source>Version 2.5.5</source>
          <target state="translated">버전 2.5.5</target>
        </trans-unit>
        <trans-unit id="ea10181b14c07b137c942cf742cdc859f26f90bf" translate="yes" xml:space="preserve">
          <source>Version 2.6</source>
          <target state="translated">버전 2.6</target>
        </trans-unit>
        <trans-unit id="cc7ad3d5f1c2442cfa86b6b65464e4f7556fa86b" translate="yes" xml:space="preserve">
          <source>Version 2.7</source>
          <target state="translated">버전 2.7</target>
        </trans-unit>
        <trans-unit id="fe567d1a8e10ef203e78704f86189c4bc7077744" translate="yes" xml:space="preserve">
          <source>Version 2.7.1</source>
          <target state="translated">버전 2.7.1</target>
        </trans-unit>
        <trans-unit id="c5281b51bfe8f3cfcfca4f18649793bca39a542a" translate="yes" xml:space="preserve">
          <source>Version 2.7.2</source>
          <target state="translated">버전 2.7.2</target>
        </trans-unit>
        <trans-unit id="5468550eeefeb675e304e9a7346f5d49c415328a" translate="yes" xml:space="preserve">
          <source>Version 2.7.3</source>
          <target state="translated">버전 2.7.3</target>
        </trans-unit>
        <trans-unit id="de4f2f90d5f626fbc2ba47ad08498e7acf8b68a6" translate="yes" xml:space="preserve">
          <source>Version 2.8</source>
          <target state="translated">버전 2.8</target>
        </trans-unit>
        <trans-unit id="c0c88e8f785e624a3b1fb7b9203bcf2e7831c4d1" translate="yes" xml:space="preserve">
          <source>Version 2.8.1</source>
          <target state="translated">버전 2.8.1</target>
        </trans-unit>
        <trans-unit id="baf08fe5f92c1ff95d913b584ac5d14142d2ec01" translate="yes" xml:space="preserve">
          <source>Version 2.9</source>
          <target state="translated">버전 2.9</target>
        </trans-unit>
        <trans-unit id="76761f60d52505fe978e54f7db493a67e1b3caa8" translate="yes" xml:space="preserve">
          <source>Version 2.9.1</source>
          <target state="translated">버전 2.9.1</target>
        </trans-unit>
        <trans-unit id="c4b32273c76130003b7bd3ca6ed202b04f1198ec" translate="yes" xml:space="preserve">
          <source>Version 2.9.2</source>
          <target state="translated">버전 2.9.2</target>
        </trans-unit>
        <trans-unit id="490f26664bf58693e608a0029183d05f9723bf21" translate="yes" xml:space="preserve">
          <source>Version 2.9.3</source>
          <target state="translated">버전 2.9.3</target>
        </trans-unit>
        <trans-unit id="43c34f9e6a6cdf1f937d501e0cc01a5994f3c657" translate="yes" xml:space="preserve">
          <source>Version 2.9.4</source>
          <target state="translated">버전 2.9.4</target>
        </trans-unit>
        <trans-unit id="839036bd12a2f036ef5c192558c1b473b97ed9ba" translate="yes" xml:space="preserve">
          <source>Version 2.9.5</source>
          <target state="translated">버전 2.9.5</target>
        </trans-unit>
        <trans-unit id="7c79ad8293320c020da554fa118afc595febe8a9" translate="yes" xml:space="preserve">
          <source>Version 2.9.6</source>
          <target state="translated">버전 2.9.6</target>
        </trans-unit>
        <trans-unit id="a78ad277616170813560c5fab7aabae8ac9cfb23" translate="yes" xml:space="preserve">
          <source>Vim</source>
          <target state="translated">Vim</target>
        </trans-unit>
        <trans-unit id="7d17aed63c47d3d9d9217c714b560b04ae520de7" translate="yes" xml:space="preserve">
          <source>We recommend utf-8 as Encoding for Python modules and templates as it&amp;rsquo;s possible to represent every Unicode character in utf-8 and because it&amp;rsquo;s backwards compatible to ASCII. For Jinja the default encoding of templates is assumed to be utf-8.</source>
          <target state="translated">모든 유니 코드 문자를 utf-8로 표현할 수 있고 ASCII와 역 호환되기 때문에 Python 모듈 및 템플릿 용 인코딩으로 utf-8을 권장합니다. Jinja의 경우 템플릿의 기본 인코딩은 utf-8로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="c3a471f0b1befd61e4a8345b4a2bf9206a32a7e5" translate="yes" xml:space="preserve">
          <source>What you can see here is that Jinja is using unicode internally and the return value is an unicode string. So make sure that your application is indeed using unicode internally.</source>
          <target state="translated">여기서 볼 수있는 것은 Jinja가 내부적으로 유니 코드를 사용하고 있고 반환 값이 유니 코드 문자열이라는 것입니다. 따라서 애플리케이션이 실제로 내부적으로 유니 코드를 사용하고 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="9c771cd1490b6429f2cd6f18b9a8e29b35796071" translate="yes" xml:space="preserve">
          <source>When a template accesses a variable the template does not define, Jinja looks up the variable in the context, after that the variable is treated as if it was defined in the template.</source>
          <target state="translated">템플릿이 템플릿이 정의하지 않은 변수에 액세스하면 Jinja는 컨텍스트에서 변수를 조회 한 후 변수가 템플릿에 정의 된 것처럼 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="44ed5980ecea965e81d91eccb3eedcf083c390cb" translate="yes" xml:space="preserve">
          <source>When automatic escaping is enabled, everything is escaped by default except for values explicitly marked as safe. Variables and expressions can be marked as safe either in:</source>
          <target state="translated">자동 이스케이프가 활성화되면 명시 적으로 안전한 것으로 표시된 값을 제외하고 모든 것이 기본적으로 이스케이프됩니다. 변수와 표현식은 다음에서 안전한 것으로 표시 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ffa3de20b027e3f802bded3c653c9cde1659ffbd" translate="yes" xml:space="preserve">
          <source>When called with any arguments this method raises &lt;a href=&quot;#jinja2.Undefined._undefined_exception&quot;&gt;&lt;code&gt;_undefined_exception&lt;/code&gt;&lt;/a&gt; with an error message generated from the undefined hints stored on the undefined object.</source>
          <target state="translated">인수와 함께 호출 될 때이 메서드 는 정의되지 않은 개체에 저장된 정의되지 않은 힌트에서 생성 된 오류 메시지와 함께 &lt;a href=&quot;#jinja2.Undefined._undefined_exception&quot;&gt; &lt;code&gt;_undefined_exception&lt;/code&gt; &lt;/a&gt; 을 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="7248a1b998eb98b108a577cb0515e48f5a015f7a" translate="yes" xml:space="preserve">
          <source>When generating HTML from templates, there&amp;rsquo;s always a risk that a variable will include characters that affect the resulting HTML. There are two approaches:</source>
          <target state="translated">템플릿에서 HTML을 생성 할 때 변수에 결과 HTML에 영향을주는 문자가 포함될 위험이 항상 있습니다. 두 가지 접근 방식이 있습니다.</target>
        </trans-unit>
        <trans-unit id="8474c2f3dcfb1e2d1c78172487d53a47df40b14b" translate="yes" xml:space="preserve">
          <source>When given a string, &amp;ldquo;/&amp;rdquo; is not quoted. HTTP servers treat &amp;ldquo;/&amp;rdquo; and &amp;ldquo;%2F&amp;rdquo; equivalently in paths. If you need quoted slashes, use the &lt;code&gt;|replace(&quot;/&quot;, &quot;%2F&quot;)&lt;/code&gt; filter.</source>
          <target state="translated">문자열이 주어지면 &quot;/&quot;는 인용되지 않습니다. HTTP 서버는 경로에서 &quot;/&quot;및 &quot;% 2F&quot;를 동등하게 처리합니다. 따옴표로 묶인 슬래시가 필요한 경우 &lt;code&gt;|replace(&quot;/&quot;, &quot;%2F&quot;)&lt;/code&gt; 필터를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="100e86460ec2b5894f6a12e9d8a858feff03d7d9" translate="yes" xml:space="preserve">
          <source>When implementing a guessing autoescape function, make sure you also accept &lt;code&gt;None&lt;/code&gt; as valid template name. This will be passed when generating templates from strings. You should always configure autoescaping as defaults in the future might change.</source>
          <target state="translated">추측 자동 이스케이프 기능을 구현할 때 유효한 템플릿 이름으로 &lt;code&gt;None&lt;/code&gt; 도 허용해야합니다 . 이것은 문자열에서 템플릿을 생성 할 때 전달됩니다. 나중에 기본값이 변경 될 수 있으므로 항상 자동 이스케이프를 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="8e09047531972b492a1fdff47123e9020512eee6" translate="yes" xml:space="preserve">
          <source>When overriding a block, the &lt;code&gt;scoped&lt;/code&gt; modifier does not have to be provided.</source>
          <target state="translated">블록을 재정의 할 때 &lt;code&gt;scoped&lt;/code&gt; 수정자를 제공 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="0c192bf9628e7c17df274ce25feb7578e5be46ac" translate="yes" xml:space="preserve">
          <source>When translating blocks of text, whitespace and linebreaks result in hard to read and error-prone translation strings. To avoid this, a trans block can be marked as trimmed, which will replace all linebreaks and the whitespace surrounding them with a single space and remove leading and trailing whitespace.</source>
          <target state="translated">텍스트 블록을 번역 할 때 공백과 줄 바꿈으로 인해 읽기 어렵고 오류가 발생하기 쉬운 번역 문자열이 생성됩니다. 이를 방지하기 위해 trans 블록을 트리밍으로 표시 할 수 있습니다. 그러면 모든 줄 바꿈과 그 주변의 공백이 단일 공백으로 대체되고 선행 및 후행 공백이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="471e6718a6106366dbd1f164f850bfddb2c89eb7" translate="yes" xml:space="preserve">
          <source>When writing extensions you have to keep in mind that you are working with the Jinja template compiler which does not validate the node tree you are passing to it. If the AST is malformed you will get all kinds of compiler or runtime errors that are horrible to debug. Always make sure you are using the nodes you create correctly. The API documentation below shows which nodes exist and how to use them.</source>
          <target state="translated">확장 기능을 작성할 때 전달하는 노드 트리의 유효성을 검사하지 않는 Jinja 템플릿 컴파일러를 사용하고 있다는 점을 명심해야합니다. ㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ AST의 형식이 잘못된 경우 디버그하기 끔찍한 모든 종류의 컴파일러 또는 런타임 오류가 발생합니다. 항상 올바르게 만든 노드를 사용하고 있는지 확인하십시오. 아래의 API 문서는 존재하는 노드와 사용 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="8e3fb6b9dddf2cf75633e30c42b159d65aafe736" translate="yes" xml:space="preserve">
          <source>Whitespace Control</source>
          <target state="translated">공백 제어</target>
        </trans-unit>
        <trans-unit id="acb8c8571ba1d553c4339630042c47cccacab1bd" translate="yes" xml:space="preserve">
          <source>Whitespace Trimming</source>
          <target state="translated">공백 트리밍</target>
        </trans-unit>
        <trans-unit id="3b7175103b4bbcc8c29a212001ff385c82292b79" translate="yes" xml:space="preserve">
          <source>Why is Autoescaping not the Default?</source>
          <target state="translated">자동 이스케이프가 기본값이 아닌 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="53e593357ff7c37c96df85c1c64684fa4661713c" translate="yes" xml:space="preserve">
          <source>Why is it called Jinja?</source>
          <target state="translated">진자라고하는 이유는?</target>
        </trans-unit>
        <trans-unit id="28f22c57ae86b3f336b17f51a23eb77b8000d660" translate="yes" xml:space="preserve">
          <source>Why is the Context immutable?</source>
          <target state="translated">컨텍스트가 변경 불가능한 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="a21fc625d926c5668d019f7730a6798c17366b88" translate="yes" xml:space="preserve">
          <source>Why is there no Python 2.3/2.4/2.5/2.6/3.1/3.2/3.3 support?</source>
          <target state="translated">Python 2.3 / 2.4 / 2.5 / 2.6 / 3.1 / 3.2 / 3.3 지원이없는 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="4f747eec2503d6726ff783e2c71441d263e7f811" translate="yes" xml:space="preserve">
          <source>With Jinja 1.2 onwards you can pass it a parameter. If this parameter is truthy the output will be more verbose (this requires &lt;code&gt;pretty&lt;/code&gt;)</source>
          <target state="translated">Jinja 1.2 이상에서는 매개 변수를 전달할 수 있습니다. 이 매개 변수가 사실이면 출력이 더 장황해질 것입니다 (이것은 &lt;code&gt;pretty&lt;/code&gt; 필요 ).</target>
        </trans-unit>
        <trans-unit id="8340348dbbf58b7680830fde938050ec5ca6fff2" translate="yes" xml:space="preserve">
          <source>With Jinja 2.6 there is now support for explicit operator intercepting. This can be used to customize specific operators as necessary. In order to intercept an operator one has to override the &lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.intercepted_binops&quot;&gt;&lt;code&gt;SandboxedEnvironment.intercepted_binops&lt;/code&gt;&lt;/a&gt; attribute. Once the operator that needs to be intercepted is added to that set Jinja will generate bytecode that calls the &lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.call_binop&quot;&gt;&lt;code&gt;SandboxedEnvironment.call_binop()&lt;/code&gt;&lt;/a&gt; function. For unary operators the &lt;code&gt;unary&lt;/code&gt; attributes and methods have to be used instead.</source>
          <target state="translated">Jinja 2.6에서는 이제 명시 적 연산자 가로 채기를 지원합니다. 필요에 따라 특정 연산자를 사용자 정의하는 데 사용할 수 있습니다. 연산자를 가로 채려면 &lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.intercepted_binops&quot;&gt; &lt;code&gt;SandboxedEnvironment.intercepted_binops&lt;/code&gt; &lt;/a&gt; 속성 을 재정의해야 합니다. 가로 채야하는 연산자가 해당 집합에 추가되면 Jinja는 &lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.call_binop&quot;&gt; &lt;code&gt;SandboxedEnvironment.call_binop()&lt;/code&gt; &lt;/a&gt; 함수 를 호출하는 바이트 코드를 생성 합니다. 단항 연산자의 경우 &lt;code&gt;unary&lt;/code&gt; 속성 및 메서드를 대신 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="60be3f1caf4fea17050a14a88440a0b64f55ed06" translate="yes" xml:space="preserve">
          <source>With Statement</source>
          <target state="translated">With 문</target>
        </trans-unit>
        <trans-unit id="6d8bbf9ce991c935ab4841d4a68537a65b4678e5" translate="yes" xml:space="preserve">
          <source>With both &lt;code&gt;trim_blocks&lt;/code&gt; and &lt;code&gt;lstrip_blocks&lt;/code&gt; enabled, you can put block tags on their own lines, and the entire block line will be removed when rendered, preserving the whitespace of the contents. For example, without the &lt;code&gt;trim_blocks&lt;/code&gt; and &lt;code&gt;lstrip_blocks&lt;/code&gt; options, this template:</source>
          <target state="translated">&lt;code&gt;trim_blocks&lt;/code&gt; 및 &lt;code&gt;lstrip_blocks&lt;/code&gt; 를 모두 활성화하면 블록 태그를 자체 줄에 배치 할 수 있으며 전체 블록 줄은 렌더링 될 때 제거되어 내용의 공백을 유지합니다. 예를 들어, &lt;code&gt;trim_blocks&lt;/code&gt; 및 &lt;code&gt;lstrip_blocks&lt;/code&gt; 옵션이없는 경우이 템플릿은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e06d61c76ddcb3749fbf031530a6e6a0824795c4" translate="yes" xml:space="preserve">
          <source>With in a nutshell:</source>
          <target state="translated">간단히 말해서 :</target>
        </trans-unit>
        <trans-unit id="ddb0605c91f2013653d5dd7d0cb843640c08402b" translate="yes" xml:space="preserve">
          <source>With standard &lt;code&gt;gettext&lt;/code&gt; calls, string formatting is a separate step done with the &lt;code&gt;|format&lt;/code&gt; filter. This requires duplicating work for &lt;code&gt;ngettext&lt;/code&gt; calls.</source>
          <target state="translated">표준 &lt;code&gt;gettext&lt;/code&gt; 호출에서 문자열 형식화는 &lt;code&gt;|format&lt;/code&gt; 필터로 수행되는 별도의 단계 입니다. 이를 위해서는 &lt;code&gt;ngettext&lt;/code&gt; 호출에 대한 복제 작업이 필요 합니다.</target>
        </trans-unit>
        <trans-unit id="e5fd5b4a075dee9613d6bdc08a8585b9141e35b6" translate="yes" xml:space="preserve">
          <source>Within &lt;code&gt;{% trans %}&lt;/code&gt; blocks, it can be useful to trim line breaks and whitespace so that the block of text looks like a simple string with single spaces in the translation file.</source>
          <target state="translated">&lt;code&gt;{% trans %}&lt;/code&gt; 블록 내에서 텍스트 블록이 번역 파일에서 단일 공백이있는 단순한 문자열처럼 보이도록 줄 바꿈과 공백을 제거하는 것이 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8ee1c896a40a845612f9f4bc55f004fe4252aafd" translate="yes" xml:space="preserve">
          <source>Within a for-loop, it&amp;rsquo;s possible to cycle among a list of strings/variables each time through the loop by using the special &lt;code&gt;loop.cycle&lt;/code&gt; helper:</source>
          <target state="translated">for 루프 내에서 특별한 &lt;code&gt;loop.cycle&lt;/code&gt; 도우미를 사용하여 루프를 통해 매번 문자열 / 변수 목록 사이를 순환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="da90ccd243d299c65a2697d5ea61cdc25d4bcb15" translate="yes" xml:space="preserve">
          <source>Working with Automatic Escaping</source>
          <target state="translated">자동 이스케이프 작업</target>
        </trans-unit>
        <trans-unit id="426206ad1379d0ba97fdb478fba1088b1e8604e3" translate="yes" xml:space="preserve">
          <source>Working with Manual Escaping</source>
          <target state="translated">수동 이스케이프 작업</target>
        </trans-unit>
        <trans-unit id="5c618e8cd8265165d2a999488c7f04ab6894f26f" translate="yes" xml:space="preserve">
          <source>Works exactly like &lt;a href=&quot;#jinja2.Template.generate&quot;&gt;&lt;code&gt;generate()&lt;/code&gt;&lt;/a&gt; but returns a &lt;code&gt;TemplateStream&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#jinja2.Template.generate&quot;&gt; &lt;code&gt;generate()&lt;/code&gt; &lt;/a&gt; 와 똑같이 작동 하지만 &lt;code&gt;TemplateStream&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="152ec7abfd2b848e23574095cdb946fad78a60f9" translate="yes" xml:space="preserve">
          <source>Works exactly like the regular &lt;code&gt;SandboxedEnvironment&lt;/code&gt; but does not permit modifications on the builtin mutable objects &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, and &lt;code&gt;dict&lt;/code&gt; by using the &lt;a href=&quot;#jinja2.sandbox.modifies_known_mutable&quot;&gt;&lt;code&gt;modifies_known_mutable()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">일반 &lt;code&gt;SandboxedEnvironment&lt;/code&gt; 와 똑같이 작동 하지만 &lt;a href=&quot;#jinja2.sandbox.modifies_known_mutable&quot;&gt; &lt;code&gt;modifies_known_mutable()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 내장 변경 가능 객체 &lt;code&gt;list&lt;/code&gt; , &lt;code&gt;set&lt;/code&gt; 및 &lt;code&gt;dict&lt;/code&gt; 에 대한 수정을 허용하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="0770e357ed08d0da033e946e980d4f1bc1626bc1" translate="yes" xml:space="preserve">
          <source>Works like &lt;a href=&quot;#jinja2.Environment.get_template&quot;&gt;&lt;code&gt;get_template()&lt;/code&gt;&lt;/a&gt; but tries a number of templates before it fails. If it cannot find any of the templates, it will raise a &lt;a href=&quot;#jinja2.TemplatesNotFound&quot;&gt;&lt;code&gt;TemplatesNotFound&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">&lt;a href=&quot;#jinja2.Environment.get_template&quot;&gt; &lt;code&gt;get_template()&lt;/code&gt; &lt;/a&gt; 처럼 작동 하지만 실패하기 전에 여러 템플릿을 시도합니다. 템플릿을 찾을 수없는 경우 &lt;a href=&quot;#jinja2.TemplatesNotFound&quot;&gt; &lt;code&gt;TemplatesNotFound&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="74afa3b8b45cba49e5b2836375ecf0f9927f5890" translate="yes" xml:space="preserve">
          <source>Works like &lt;code&gt;parse_expression&lt;/code&gt; but if multiple expressions are delimited by a comma a &lt;a href=&quot;#jinja2.nodes.Tuple&quot;&gt;&lt;code&gt;Tuple&lt;/code&gt;&lt;/a&gt; node is created. This method could also return a regular expression instead of a tuple if no commas where found.</source>
          <target state="translated">&lt;code&gt;parse_expression&lt;/code&gt; 처럼 작동 하지만 여러식이 쉼표로 구분되면 &lt;a href=&quot;#jinja2.nodes.Tuple&quot;&gt; &lt;code&gt;Tuple&lt;/code&gt; &lt;/a&gt; 노드가 생성됩니다. 이 메서드는 쉼표가없는 경우 튜플 대신 정규식을 반환 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="dc491d272d1ca7e5cb986282d2fb27b6717d2b39" translate="yes" xml:space="preserve">
          <source>Wrap a string to the given width. Existing newlines are treated as paragraphs to be wrapped separately.</source>
          <target state="translated">주어진 너비로 문자열을 감 쌉니다. 기존 줄 바꿈은 개별적으로 줄 바꿈 할 단락으로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="e5ae30c4c760ae11a888dc86150087c8ab9a17af" translate="yes" xml:space="preserve">
          <source>Writing Extensions</source>
          <target state="translated">확장 작성</target>
        </trans-unit>
        <trans-unit id="59055f1fe7db957a9cf71d0d507a8a490f255894" translate="yes" xml:space="preserve">
          <source>You can also provide a list of templates that are checked for existence before inclusion. The first template that exists will be included. If &lt;code&gt;ignore missing&lt;/code&gt; is given, it will fall back to rendering nothing if none of the templates exist, otherwise it will raise an exception.</source>
          <target state="translated">포함하기 전에 존재 여부를 확인하는 템플릿 목록을 제공 할 수도 있습니다. 존재하는 첫 번째 템플릿이 포함됩니다. 경우 &lt;code&gt;ignore missing&lt;/code&gt; 주어, 그렇지 않으면 예외를 올릴 것이다, 템플릿의 어느 것도 존재하지 않는 경우 아무것도 렌더링하지 다시 떨어질 것이다.</target>
        </trans-unit>
        <trans-unit id="cf27fe68023bcb8138ae06418e5a76cf0c247e1d" translate="yes" xml:space="preserve">
          <source>You can also strip whitespace in templates by hand. If you add a minus sign (&lt;code&gt;-&lt;/code&gt;) to the start or end of a block (e.g. a &lt;a href=&quot;#for-loop&quot;&gt;For&lt;/a&gt; tag), a comment, or a variable expression, the whitespaces before or after that block will be removed:</source>
          <target state="translated">템플릿의 공백을 직접 제거 할 수도 있습니다. 블록 (예 : &lt;a href=&quot;#for-loop&quot;&gt;For&lt;/a&gt; 태그), 주석 또는 변수 표현식 의 시작 또는 끝에 빼기 기호 ( &lt;code&gt;-&lt;/code&gt; )를 추가하면 해당 블록 앞뒤의 공백이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="f2c8a60cf68e1780970216768c70f2346c9340df" translate="yes" xml:space="preserve">
          <source>You can also use any of the methods of defined on a variable&amp;rsquo;s type. The value returned from the method invocation is used as the value of the expression. Here is an example that uses methods defined on strings (where &lt;code&gt;page.title&lt;/code&gt; is a string):</source>
          <target state="translated">변수 유형에 정의 된 모든 메소드를 사용할 수도 있습니다. 메소드 호출에서 리턴 된 값이 표현식의 값으로 사용됩니다. 다음은 문자열에 정의 된 메서드를 사용하는 예입니다 (여기서 &lt;code&gt;page.title&lt;/code&gt; 은 문자열 임).</target>
        </trans-unit>
        <trans-unit id="431a695150fca29f0842bb14172174c7b47d5e09" translate="yes" xml:space="preserve">
          <source>You can install the most recent Jinja version using &lt;a href=&quot;https://pypi.org/project/pip/&quot;&gt;pip&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://pypi.org/project/pip/&quot;&gt;pip를&lt;/a&gt; 사용하여 최신 Jinja 버전을 설치할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="58d247bf99b8e106753dc5522b4a639b9792117f" translate="yes" xml:space="preserve">
          <source>You can manually disable the &lt;code&gt;lstrip_blocks&lt;/code&gt; behavior by putting a plus sign (&lt;code&gt;+&lt;/code&gt;) at the start of a block:</source>
          <target state="translated">블록 시작 부분에 더하기 기호 ( &lt;code&gt;+&lt;/code&gt; )를 넣어 &lt;code&gt;lstrip_blocks&lt;/code&gt; 동작을 수동으로 비활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ff9db9249567d5fe151821333bae5c78dd13ba45" translate="yes" xml:space="preserve">
          <source>You can mess around with the variables in templates provided they are passed in by the application. Variables may have attributes or elements on them you can access too. What attributes a variable has depends heavily on the application providing that variable.</source>
          <target state="translated">응용 프로그램에서 전달 된 템플릿의 변수를 다룰 수 있습니다. 변수에는 액세스 할 수있는 속성이나 요소가있을 수 있습니다. 변수의 속성은 해당 변수를 제공하는 응용 프로그램에 따라 크게 달라집니다.</target>
        </trans-unit>
        <trans-unit id="04fde26ca07f3fc96f23714f25db2561bc79e220" translate="yes" xml:space="preserve">
          <source>You can print a translated string like this:</source>
          <target state="translated">다음과 같이 번역 된 문자열을 인쇄 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ab3041114d617100de5fafbbd9aecf7ff237df1d" translate="yes" xml:space="preserve">
          <source>You can register it on the template environment by updating the &lt;a href=&quot;#jinja2.Environment.filters&quot;&gt;&lt;code&gt;filters&lt;/code&gt;&lt;/a&gt; dict on the environment:</source>
          <target state="translated">환경에서 &lt;a href=&quot;#jinja2.Environment.filters&quot;&gt; &lt;code&gt;filters&lt;/code&gt; &lt;/a&gt; dict를 업데이트하여 템플릿 환경에 등록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aa90abd999c0b1a162f92ef4fd55f447554b2c37" translate="yes" xml:space="preserve">
          <source>You can register it on the template environment by updating the &lt;a href=&quot;#jinja2.Environment.tests&quot;&gt;&lt;code&gt;tests&lt;/code&gt;&lt;/a&gt; dict on the environment:</source>
          <target state="translated">환경에서 &lt;a href=&quot;#jinja2.Environment.tests&quot;&gt; &lt;code&gt;tests&lt;/code&gt; &lt;/a&gt; 사전을 업데이트하여 템플릿 환경에 등록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b4875c454b800bad0d60f7ebd78e4eae343f8292" translate="yes" xml:space="preserve">
          <source>You can specify a &lt;code&gt;default&lt;/code&gt; value to use if an object in the list does not have the given attribute.</source>
          <target state="translated">목록의 개체에 지정된 속성이없는 경우 사용할 &lt;code&gt;default&lt;/code&gt; 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2a3f719bcea6d4118694492ae91b14a630e08148" translate="yes" xml:space="preserve">
          <source>You can use &amp;ldquo;new style&amp;rdquo; gettext calls by setting &lt;code&gt;env.newstyle_gettext = True&lt;/code&gt; or passing &lt;code&gt;newstyle=True&lt;/code&gt; to &lt;code&gt;env.install_translations&lt;/code&gt;. They are fully supported by the Babel extraction tool, but might not work as expected with other extraction tools.</source>
          <target state="translated">당신은 설정하여 &quot;새로운 스타일&quot;gettext를 호출 사용할 수 있습니다 &lt;code&gt;env.newstyle_gettext = True&lt;/code&gt; 하거나 통과 &lt;code&gt;newstyle=True&lt;/code&gt; 에 &lt;code&gt;env.install_translations&lt;/code&gt; 을 . Babel 추출 도구에서 완전히 지원되지만 다른 추출 도구에서는 예상대로 작동하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="35b7c3cfa2282ed86bc7427097139f84da72a325" translate="yes" xml:space="preserve">
          <source>You can use a dot (&lt;code&gt;.&lt;/code&gt;) to access attributes of a variable in addition to the standard Python &lt;code&gt;__getitem__&lt;/code&gt; &amp;ldquo;subscript&amp;rdquo; syntax (&lt;code&gt;[]&lt;/code&gt;).</source>
          <target state="translated">표준 Python &lt;code&gt;__getitem__&lt;/code&gt; &amp;ldquo;subscript&amp;rdquo;구문 ( &lt;code&gt;[]&lt;/code&gt; ) 외에도 점 ( &lt;code&gt;.&lt;/code&gt; )을 사용하여 변수의 속성에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f94f5ac43f2ee0088eb1786f717f014c78d7f414" translate="yes" xml:space="preserve">
          <source>You can&amp;rsquo;t define multiple &lt;code&gt;{% block %}&lt;/code&gt; tags with the same name in the same template. This limitation exists because a block tag works in &amp;ldquo;both&amp;rdquo; directions. That is, a block tag doesn&amp;rsquo;t just provide a placeholder to fill - it also defines the content that fills the placeholder in the &lt;em&gt;parent&lt;/em&gt;. If there were two similarly-named &lt;code&gt;{% block %}&lt;/code&gt; tags in a template, that template&amp;rsquo;s parent wouldn&amp;rsquo;t know which one of the blocks&amp;rsquo; content to use.</source>
          <target state="translated">동일한 템플릿에서 이름이 같은 여러 &lt;code&gt;{% block %}&lt;/code&gt; 태그를 정의 할 수 없습니다 . 이 제한은 블록 태그가 &quot;양쪽&quot;방향으로 작동하기 때문에 존재합니다. 즉, 블록 태그는 채울 자리 표시자를 제공 할뿐만 아니라 &lt;em&gt;부모&lt;/em&gt; 에서 자리 표시자를 채우는 내용도 정의합니다 . 템플릿에 비슷한 이름의 &lt;code&gt;{% block %}&lt;/code&gt; 태그 가 두 개 있으면 해당 템플릿의 부모는 사용할 블록의 내용을 알 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="74eadea32be11349a44c579193d6d9ab87ba397f" translate="yes" xml:space="preserve">
          <source>You must not add whitespace between the tag and the minus sign.</source>
          <target state="translated">태그와 빼기 기호 사이에 공백을 추가해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="13923307f1654c55ef8cfb47131464b8e505b22f" translate="yes" xml:space="preserve">
          <source>a set of binary operators that should be intercepted. Each operator that is added to this set (empty by default) is delegated to the &lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.call_binop&quot;&gt;&lt;code&gt;call_binop()&lt;/code&gt;&lt;/a&gt; method that will perform the operator. The default operator callback is specified by &lt;code&gt;binop_table&lt;/code&gt;.</source>
          <target state="translated">가로 채야하는 이항 연산자 집합입니다. 이 집합에 추가 된 각 연산자 (기본적으로 비어 있음)는 연산자를 수행 할 &lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.call_binop&quot;&gt; &lt;code&gt;call_binop()&lt;/code&gt; &lt;/a&gt; 메서드에 위임됩니다 . 기본 연산자 콜백은 &lt;code&gt;binop_table&lt;/code&gt; 로 지정됩니다 .</target>
        </trans-unit>
        <trans-unit id="a255e312b696b1e797a00ef452448b9a1153980f" translate="yes" xml:space="preserve">
          <source>a set of unary operators that should be intercepted. Each operator that is added to this set (empty by default) is delegated to the &lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.call_unop&quot;&gt;&lt;code&gt;call_unop()&lt;/code&gt;&lt;/a&gt; method that will perform the operator. The default operator callback is specified by &lt;code&gt;unop_table&lt;/code&gt;.</source>
          <target state="translated">가로 채야하는 단항 연산자 집합입니다. 이 집합에 추가 된 각 연산자 (기본적으로 비어 있음)는 연산자를 수행 할 &lt;a href=&quot;#jinja2.sandbox.SandboxedEnvironment.call_unop&quot;&gt; &lt;code&gt;call_unop()&lt;/code&gt; &lt;/a&gt; 메서드에 위임됩니다 . 기본 연산자 콜백은 &lt;code&gt;unop_table&lt;/code&gt; 로 지정됩니다 .</target>
        </trans-unit>
        <trans-unit id="42beb35807c646daf6918c26acf48547615ebd6a" translate="yes" xml:space="preserve">
          <source>a single trailing newline is stripped if present</source>
          <target state="translated">단일 후행 줄 바꿈이 있으면 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="9494aaa45171514e3583c89447971c4b3be2b8d3" translate="yes" xml:space="preserve">
          <source>automatically escaping everything by default.</source>
          <target state="translated">기본적으로 모든 것을 자동으로 이스케이프합니다.</target>
        </trans-unit>
        <trans-unit id="32a5489930c65bff700821a1b93ae8134d010759" translate="yes" xml:space="preserve">
          <source>cachelib</source>
          <target state="translated">cachelib</target>
        </trans-unit>
        <trans-unit id="44e78f1623f3302341f2501c539a1cd138d166fc" translate="yes" xml:space="preserve">
          <source>check for an attribute called &lt;code&gt;bar&lt;/code&gt; on &lt;code&gt;foo&lt;/code&gt; (&lt;code&gt;getattr(foo, 'bar')&lt;/code&gt;)</source>
          <target state="translated">속성이라고 확인 &lt;code&gt;bar&lt;/code&gt; 에 &lt;code&gt;foo&lt;/code&gt; 는 ( &lt;code&gt;getattr(foo, 'bar')&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="b668da94d5a9af0b70541b952d6d5bc7f4a3027f" translate="yes" xml:space="preserve">
          <source>check for an item &lt;code&gt;'bar'&lt;/code&gt; in &lt;code&gt;foo&lt;/code&gt;. (&lt;code&gt;foo.__getitem__('bar')&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;foo&lt;/code&gt; 에서 항목 &lt;code&gt;'bar'&lt;/code&gt; 를 확인하십시오 . ( &lt;code&gt;foo.__getitem__('bar')&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="d8376a39d898829bfa38eba22e05df90ea91a85f" translate="yes" xml:space="preserve">
          <source>compiles down to the optimal python code just in time</source>
          <target state="translated">적시에 최적의 파이썬 코드로 컴파일합니다.</target>
        </trans-unit>
        <trans-unit id="c201a672d12e53335aaccf6ace3f5dc90c048fe4" translate="yes" xml:space="preserve">
          <source>configurable syntax</source>
          <target state="translated">구성 가능한 구문</target>
        </trans-unit>
        <trans-unit id="9dec6be3f830340902d233c1d347fa6cf3fc909f" translate="yes" xml:space="preserve">
          <source>default callback table for the binary operators. A copy of this is available on each instance of a sandboxed environment as &lt;code&gt;binop_table&lt;/code&gt;</source>
          <target state="translated">이항 연산자에 대한 기본 콜백 테이블. 이 복사본은 샌드 박스 환경의 각 인스턴스에서 &lt;code&gt;binop_table&lt;/code&gt; 로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="165948fca58f7097dddb9afa89fb153ce47fc495" translate="yes" xml:space="preserve">
          <source>default callback table for the unary operators. A copy of this is available on each instance of a sandboxed environment as &lt;code&gt;unop_table&lt;/code&gt;</source>
          <target state="translated">단항 연산자에 대한 기본 콜백 테이블. 이 사본은 &lt;code&gt;unop_table&lt;/code&gt; 로 샌드 박스 환경의 각 인스턴스에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e5eb7fde0db86350f80297994baba7028ee3d1b1" translate="yes" xml:space="preserve">
          <source>easy to debug. Line numbers of exceptions directly point to the correct line in the template.</source>
          <target state="translated">디버그하기 쉽습니다. 예외의 줄 번호는 템플릿의 올바른 줄을 직접 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="24429cb5388118ac349a1ac7641df06f6bc1c5a1" translate="yes" xml:space="preserve">
          <source>gets rendered with blank lines inside the div:</source>
          <target state="translated">div 내부에 빈 줄로 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="61d28b9c49fe6bd41e16f0703f3cf81ed9aa8f8e" translate="yes" xml:space="preserve">
          <source>i18n</source>
          <target state="translated">i18n</target>
        </trans-unit>
        <trans-unit id="02978cf72d92af3344b2c257aa4d1be99c08cc1f" translate="yes" xml:space="preserve">
          <source>i18n Extension</source>
          <target state="translated">i18n 확장</target>
        </trans-unit>
        <trans-unit id="d46b700cae03a843a9afcfbee4a998344d4d9fd0" translate="yes" xml:space="preserve">
          <source>if there is not, check for an attribute called &lt;code&gt;bar&lt;/code&gt; on &lt;code&gt;foo&lt;/code&gt;. (&lt;code&gt;getattr(foo, 'bar')&lt;/code&gt;)</source>
          <target state="translated">존재하지 않는 경우, 속성에 대한 검사라는 &lt;code&gt;bar&lt;/code&gt; 에 &lt;code&gt;foo&lt;/code&gt; 는 . ( &lt;code&gt;getattr(foo, 'bar')&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="847863b8865639d52e536747ba97aaccca9fbff1" translate="yes" xml:space="preserve">
          <source>if there is not, check for an item &lt;code&gt;'bar'&lt;/code&gt; in &lt;code&gt;foo&lt;/code&gt; (&lt;code&gt;foo.__getitem__('bar')&lt;/code&gt;)</source>
          <target state="translated">없는 경우 &lt;code&gt;foo&lt;/code&gt; ( &lt;code&gt;foo.__getitem__('bar')&lt;/code&gt; ) 에서 &lt;code&gt;'bar'&lt;/code&gt; 항목을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="4a03a9f06b9718f22d1420fcf74c793baabfac17" translate="yes" xml:space="preserve">
          <source>if there is not, return an undefined object.</source>
          <target state="translated">없는 경우 정의되지 않은 개체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="990ea6875c1633846a6a4f70d79ab8d17e6ae299" translate="yes" xml:space="preserve">
          <source>manually escaping each variable; or</source>
          <target state="translated">각 변수를 수동으로 이스케이프합니다. 또는</target>
        </trans-unit>
        <trans-unit id="b235bce70d2a77ce3f6cc2c1ad32b6c6253da478" translate="yes" xml:space="preserve">
          <source>negate a statement (see below).</source>
          <target state="translated">진술을 부정합니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="536b53d5d6328baa30d97e9fcb58045092a24eb4" translate="yes" xml:space="preserve">
          <source>optional ahead-of-time template compilation</source>
          <target state="translated">선택적 사전 템플릿 컴파일</target>
        </trans-unit>
        <trans-unit id="79c71c59972cea03ef2bf403225d1662be2d9b15" translate="yes" xml:space="preserve">
          <source>other whitespace (spaces, tabs, newlines etc.) is returned unchanged</source>
          <target state="translated">다른 공백 (공백, 탭, 줄 바꿈 등)은 변경되지 않고 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="6f664f997200739766b847485914f9f874caf22d" translate="yes" xml:space="preserve">
          <source>powerful automatic HTML escaping system for XSS prevention</source>
          <target state="translated">XSS 방지를위한 강력한 자동 HTML 이스케이프 시스템</target>
        </trans-unit>
        <trans-unit id="bc659233930eda5f90b19a38e332b514fd0f2a3a" translate="yes" xml:space="preserve">
          <source>python-memcached</source>
          <target state="translated">python-memcached</target>
        </trans-unit>
        <trans-unit id="2b428a0d1d9929271b90db32d41bc9d51b3fda38" translate="yes" xml:space="preserve">
          <source>sandboxed execution</source>
          <target state="translated">샌드 박스 실행</target>
        </trans-unit>
        <trans-unit id="1086f9dc61a1f0e947b61e0ab72c5faf71eba6b7" translate="yes" xml:space="preserve">
          <source>should the optimizer be enabled? Default is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">옵티 마이저를 활성화해야합니까? 기본값은 &lt;code&gt;True&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f2af9f8c7b57d80d2c64ace65e49b3aec750cf50" translate="yes" xml:space="preserve">
          <source>template inheritance</source>
          <target state="translated">템플릿 상속</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
