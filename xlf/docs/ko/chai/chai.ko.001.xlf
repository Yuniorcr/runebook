<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="chai">
    <body>
      <group id="chai">
        <trans-unit id="cda99ac798dfc50ea347e6f4f1e1141f969d50f2" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2017 Chai.js Assertion Library</source>
          <target state="translated">&amp;copy; 2017 Chai.js 어설 션 라이브러리</target>
        </trans-unit>
        <trans-unit id="0dcb4063e1134d8a85941becb97b992dfcbe0231" translate="yes" xml:space="preserve">
          <source>(&lt;a href=&quot;https://babeljs.io/docs/usage/caveats/#classes&quot;&gt;Babel&lt;/a&gt;)</source>
          <target state="translated">(&lt;a href=&quot;https://babeljs.io/docs/usage/caveats/#classes&quot;&gt;Babel&lt;/a&gt;)</target>
        </trans-unit>
        <trans-unit id="a55db03687c8b883dfaa331e67455361ab851fa0" translate="yes" xml:space="preserve">
          <source>(&lt;a href=&quot;https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work&quot;&gt;TypeScript&lt;/a&gt;)</source>
          <target state="translated">(&lt;a href=&quot;https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work&quot;&gt;TypeScript&lt;/a&gt;)</target>
        </trans-unit>
        <trans-unit id="57ba7f7d388f8d4d48d9f0d6248dcef0dd8bae7a" translate="yes" xml:space="preserve">
          <source>(optional) a boolean which indicates whether to display a diff in addition to the message if the first argument is &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">(선택 사항) 첫 번째 인수가 &lt;code&gt;false&lt;/code&gt; 인 경우 메시지 외에 diff를 표시할지 여부를 나타내는 부울</target>
        </trans-unit>
        <trans-unit id="322edbcd3ca581011471138cbdb5b0ff2bd25111" translate="yes" xml:space="preserve">
          <source>(optional) the actual value, which will default to &lt;code&gt;_obj&lt;/code&gt;</source>
          <target state="translated">(선택 사항) 실제 값이며 기본값은 &lt;code&gt;_obj&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c6e64285635b7e1a93ae2d4cf19835dad442c846" translate="yes" xml:space="preserve">
          <source>(optional) the expected value</source>
          <target state="translated">(선택 사항) 예상 값</target>
        </trans-unit>
        <trans-unit id="4f03924680130721b21efdc37611cf3b0732fdd9" translate="yes" xml:space="preserve">
          <source>.NaN</source>
          <target state="translated">.NaN</target>
        </trans-unit>
        <trans-unit id="d313e1ac091d4889645e1119b1c5950c86b03aa2" translate="yes" xml:space="preserve">
          <source>.a(type[, msg])</source>
          <target state="translated">.a (유형 [, msg])</target>
        </trans-unit>
        <trans-unit id="7180f175e982d59d9b5c472068dcadbf1d3cc72c" translate="yes" xml:space="preserve">
          <source>.above(n[, msg])</source>
          <target state="translated">.above (n [, msg])</target>
        </trans-unit>
        <trans-unit id="704d56a03ebec8a05609d9af57fe4147a211900d" translate="yes" xml:space="preserve">
          <source>.addChainableMethod(ctx, name, method, chainingBehavior)</source>
          <target state="translated">.addChainableMethod (ctx, 이름, 메소드, chainingBehavior)</target>
        </trans-unit>
        <trans-unit id="02d4163467c033bbf4bb5bc246855b5a2b76c0c6" translate="yes" xml:space="preserve">
          <source>.addLengthGuard(fn, assertionName, isChainable)</source>
          <target state="translated">.addLengthGuard (fn, assertionName, isChainable)</target>
        </trans-unit>
        <trans-unit id="e29409c422770dcdd5712282352fd3889fd2d58a" translate="yes" xml:space="preserve">
          <source>.addMethod(ctx, name, method)</source>
          <target state="translated">.addMethod (ctx, 이름, 메소드)</target>
        </trans-unit>
        <trans-unit id="e284b0cdc67aa38e35742ec625a1c5bd3e5989e0" translate="yes" xml:space="preserve">
          <source>.addProperty(ctx, name, getter)</source>
          <target state="translated">.addProperty (ctx, 이름, 게터)</target>
        </trans-unit>
        <trans-unit id="7c902a83e91a094073c82562050ff61f6cf5f360" translate="yes" xml:space="preserve">
          <source>.all</source>
          <target state="translated">.all</target>
        </trans-unit>
        <trans-unit id="0cc0bb04411a7e2b555fca6f3fbef88195713467" translate="yes" xml:space="preserve">
          <source>.any</source>
          <target state="translated">.any</target>
        </trans-unit>
        <trans-unit id="81a3ca8554528575cdf3647ea7299132f9074f2f" translate="yes" xml:space="preserve">
          <source>.approximately(actual, expected, delta, [message])</source>
          <target state="translated">. 대략 (실제, 예상, 델타, [메시지])</target>
        </trans-unit>
        <trans-unit id="308fd6c0175f0f0fd071329de6e4819464cd677a" translate="yes" xml:space="preserve">
          <source>.arguments</source>
          <target state="translated">.arguments</target>
        </trans-unit>
        <trans-unit id="042e30c177bd1499a314774842969070682bf72f" translate="yes" xml:space="preserve">
          <source>.below(n[, msg])</source>
          <target state="translated">. 아래 (n [, msg])</target>
        </trans-unit>
        <trans-unit id="87fafbebf2f694665e23265ee69f784d8d60e21f" translate="yes" xml:space="preserve">
          <source>.by(delta[, msg])</source>
          <target state="translated">.by (델타 [, msg])</target>
        </trans-unit>
        <trans-unit id="9dbbf7de2fedd88fcb9faee812a9e284b2473683" translate="yes" xml:space="preserve">
          <source>.change(subject[, prop[, msg]])</source>
          <target state="translated">.change (제목 [, prop [, msg]])</target>
        </trans-unit>
        <trans-unit id="6c36fb2c91c984780c25b9c93b09be7eb839c382" translate="yes" xml:space="preserve">
          <source>.changes(function, object, property, [message])</source>
          <target state="translated">.changes (함수, 객체, 속성, [메시지])</target>
        </trans-unit>
        <trans-unit id="2b5fdf701cc65f2651369132e81baff6ae6e0898" translate="yes" xml:space="preserve">
          <source>.changesButNotBy(function, object, property, delta, [message])</source>
          <target state="translated">.changesButNotBy (함수, 객체, 속성, 델타, [메시지])</target>
        </trans-unit>
        <trans-unit id="37879ec6fb142256e17cd500197a721d2966cddf" translate="yes" xml:space="preserve">
          <source>.changesBy(function, object, property, delta, [message])</source>
          <target state="translated">.changesBy (함수, 객체, 속성, 델타, [메시지])</target>
        </trans-unit>
        <trans-unit id="d5d22d8b6bdff79bc0eb243aad3fb6d30be7bffd" translate="yes" xml:space="preserve">
          <source>.closeTo(actual, expected, delta, [message])</source>
          <target state="translated">.closeTo (실제, 예상, 델타, [메시지])</target>
        </trans-unit>
        <trans-unit id="d251c1c6f0df5235f46b3bd5ce5bbd7e5d8ece88" translate="yes" xml:space="preserve">
          <source>.closeTo(expected, delta[, msg])</source>
          <target state="translated">.closeTo (예상, 델타 [, msg])</target>
        </trans-unit>
        <trans-unit id="8ff6df6f53420a9b825986062fc8f544dd6dead4" translate="yes" xml:space="preserve">
          <source>.compareByInspect(mixed, mixed)</source>
          <target state="translated">.compareByInspect (혼합, 혼합)</target>
        </trans-unit>
        <trans-unit id="fdf6a48fb589b6af42e9c70c14d5892103f14af4" translate="yes" xml:space="preserve">
          <source>.compatibleConstructor(thrown, errorLike)</source>
          <target state="translated">.compatibleConstructor (thrown, errorLike)</target>
        </trans-unit>
        <trans-unit id="140844d53b719438b09bd0e981380253591441f9" translate="yes" xml:space="preserve">
          <source>.compatibleInstance(thrown, errorLike)</source>
          <target state="translated">.compatibleInstance (thrown, errorLike)</target>
        </trans-unit>
        <trans-unit id="02f375fd8366812cfb9e26dae79a2c1190a1b927" translate="yes" xml:space="preserve">
          <source>.compatibleMessage(thrown, errMatcher)</source>
          <target state="translated">.compatibleMessage (thrown, errMatcher)</target>
        </trans-unit>
        <trans-unit id="08f51e91bad1c71457c7e9a2db0dfcfe66676111" translate="yes" xml:space="preserve">
          <source>.containsAllDeepKeys(object, [keys], [message])</source>
          <target state="translated">.containsAllDeepKeys (개체, [키], [메시지])</target>
        </trans-unit>
        <trans-unit id="f1a0e9ec1a9016127ef11619beb67c0dca879b78" translate="yes" xml:space="preserve">
          <source>.containsAllKeys(object, [keys], [message])</source>
          <target state="translated">.containsAllKeys (개체, [키], [메시지])</target>
        </trans-unit>
        <trans-unit id="13cc95ad8e66f66074aba9423fb369338a9399fa" translate="yes" xml:space="preserve">
          <source>.decrease(subject[, prop[, msg]])</source>
          <target state="translated">.decrease (제목 [, prop [, msg]])</target>
        </trans-unit>
        <trans-unit id="2a52b6f2bed8cb1a98c84bad7e44237052144391" translate="yes" xml:space="preserve">
          <source>.decreases(function, object, property, [message])</source>
          <target state="translated">. 감소 (함수, 객체, 속성, [메시지])</target>
        </trans-unit>
        <trans-unit id="f0874765fa59e71a0227966d23c57a1645e2029c" translate="yes" xml:space="preserve">
          <source>.decreasesButNotBy(function, object, property, delta, [message])</source>
          <target state="translated">.decreasesButNotBy (함수, 객체, 속성, 델타, [메시지])</target>
        </trans-unit>
        <trans-unit id="06cf02ce44763ed72ded5a9d76f7bf71d6fa46a1" translate="yes" xml:space="preserve">
          <source>.decreasesBy(function, object, property, delta, [message])</source>
          <target state="translated">.decreasesBy (함수, 객체, 속성, 델타, [메시지])</target>
        </trans-unit>
        <trans-unit id="7631d4539d1fb745e6a45c36941dc9e5e4d90eef" translate="yes" xml:space="preserve">
          <source>.deep</source>
          <target state="translated">.deep</target>
        </trans-unit>
        <trans-unit id="058a2d1ff632d170c9583a37997da97fd42fbba1" translate="yes" xml:space="preserve">
          <source>.deepEqual(actual, expected, [message])</source>
          <target state="translated">.deepEqual (실제, 예상, [메시지])</target>
        </trans-unit>
        <trans-unit id="3aa8956b6cc55dd5d8660b7f223a8e6bf8977335" translate="yes" xml:space="preserve">
          <source>.deepInclude(haystack, needle, [message])</source>
          <target state="translated">.deepInclude (haystack, needle, [메시지])</target>
        </trans-unit>
        <trans-unit id="65ab5e02541498b79178244ad5bf93e9ca51312b" translate="yes" xml:space="preserve">
          <source>.deepNestedInclude(haystack, needle, [message])</source>
          <target state="translated">.deepNestedInclude (haystack, needle, [메시지])</target>
        </trans-unit>
        <trans-unit id="73b0365dbfbbe0406fec759391bd48052f9a8b4d" translate="yes" xml:space="preserve">
          <source>.deepNestedPropertyVal(object, property, value, [message])</source>
          <target state="translated">.deepNestedPropertyVal (객체, 속성, 값, [메시지])</target>
        </trans-unit>
        <trans-unit id="298fdfe6b1e9476d0de578376647bdaf188b7919" translate="yes" xml:space="preserve">
          <source>.deepOwnInclude(haystack, needle, [message])</source>
          <target state="translated">.deepOwnInclude (haystack, needle, [메시지])</target>
        </trans-unit>
        <trans-unit id="8966a041d1cf4a2ec6ffb8a6636daa690d49b483" translate="yes" xml:space="preserve">
          <source>.deepPropertyVal(object, property, value, [message])</source>
          <target state="translated">.deepPropertyVal (객체, 속성, 값, [메시지])</target>
        </trans-unit>
        <trans-unit id="d599a8187bee9780797a6e32f612c4f454f10df8" translate="yes" xml:space="preserve">
          <source>.doesNotChange(function, object, property, [message])</source>
          <target state="translated">.doesNotChange (함수, 객체, 속성, [메시지])</target>
        </trans-unit>
        <trans-unit id="1ef73680b0b2135f0a8bf25de5cb5b5e348fb8e1" translate="yes" xml:space="preserve">
          <source>.doesNotDecrease(function, object, property, [message])</source>
          <target state="translated">.doesNotDecrease (함수, 객체, 속성, [메시지])</target>
        </trans-unit>
        <trans-unit id="f02f861c56db24e0e8417265771e0169045ef936" translate="yes" xml:space="preserve">
          <source>.doesNotDecreaseBy(function, object, property, delta, [message])</source>
          <target state="translated">.doesNotDecreaseBy (함수, 객체, 속성, 델타, [메시지])</target>
        </trans-unit>
        <trans-unit id="dfd27593adb00ccb949acc93baf484d81ba26e6f" translate="yes" xml:space="preserve">
          <source>.doesNotHaveAllDeepKeys(object, [keys], [message])</source>
          <target state="translated">.doesNotHaveAllDeepKeys (개체, [키], [메시지])</target>
        </trans-unit>
        <trans-unit id="0b4aae76a2b6d23b3efb6baaa94b8cc8595234cf" translate="yes" xml:space="preserve">
          <source>.doesNotHaveAllKeys(object, [keys], [message])</source>
          <target state="translated">.doesNotHaveAllKeys (개체, [키], [메시지])</target>
        </trans-unit>
        <trans-unit id="173414cac53bbbc4a994281a6ce37bbf41cb2af8" translate="yes" xml:space="preserve">
          <source>.doesNotHaveAnyDeepKeys(object, [keys], [message])</source>
          <target state="translated">.doesNotHaveAnyDeepKeys (개체, [키], [메시지])</target>
        </trans-unit>
        <trans-unit id="efd0fe899cb0a791ca92e080ce642e7a20a2106b" translate="yes" xml:space="preserve">
          <source>.doesNotHaveAnyKeys(object, [keys], [message])</source>
          <target state="translated">.doesNotHaveAnyKeys (개체, [키], [메시지])</target>
        </trans-unit>
        <trans-unit id="93adc6369c12d4ce02f4cf0d206f34beaddf9cf8" translate="yes" xml:space="preserve">
          <source>.doesNotIncrease(function, object, property, [message])</source>
          <target state="translated">.doesNotIncrease (함수, 객체, 속성, [메시지])</target>
        </trans-unit>
        <trans-unit id="e67971be7f260f75591ef1e1f7244630c5aa5263" translate="yes" xml:space="preserve">
          <source>.doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])</source>
          <target state="translated">.doesNotThrow (fn, [errorLike / string / regexp], [string / regexp], [message])</target>
        </trans-unit>
        <trans-unit id="214488f508fc36ff7cd1748f42c18154b01ea0a4" translate="yes" xml:space="preserve">
          <source>.empty</source>
          <target state="translated">.empty</target>
        </trans-unit>
        <trans-unit id="cc5a365ac8ec2ce99a7c594d6dd93d5ace120d17" translate="yes" xml:space="preserve">
          <source>.eql(obj[, msg])</source>
          <target state="translated">.eql (obj [, msg])</target>
        </trans-unit>
        <trans-unit id="2b8736e4b737c561af93676eea42c56f1b62b0e1" translate="yes" xml:space="preserve">
          <source>.equal(actual, expected, [message])</source>
          <target state="translated">.equal (실제, 예상, [메시지])</target>
        </trans-unit>
        <trans-unit id="9b3dc9cf05f65561b9b54e6e7187eabb8db3910c" translate="yes" xml:space="preserve">
          <source>.equal(val[, msg])</source>
          <target state="translated">.equal (val [, msg])</target>
        </trans-unit>
        <trans-unit id="89f92326abdcf4c842759fac883f9184ff2a6bbf" translate="yes" xml:space="preserve">
          <source>.exist</source>
          <target state="translated">.exist</target>
        </trans-unit>
        <trans-unit id="cf98c0e491e8df3c494f374c39346ed4efe2e55b" translate="yes" xml:space="preserve">
          <source>.exists</source>
          <target state="translated">.exists</target>
        </trans-unit>
        <trans-unit id="0dea4be5cfaa6e265f9bb50efe7926347344eb3e" translate="yes" xml:space="preserve">
          <source>.expectTypes(obj, types)</source>
          <target state="translated">.expectTypes (obj, types)</target>
        </trans-unit>
        <trans-unit id="00ff6551b23eed85f1601ab9e8a23761b63cafb3" translate="yes" xml:space="preserve">
          <source>.extensible</source>
          <target state="translated">.extensible</target>
        </trans-unit>
        <trans-unit id="18201037d55f06a582cdeaec9f257d649402486d" translate="yes" xml:space="preserve">
          <source>.fail([message])</source>
          <target state="translated">.fail([message])</target>
        </trans-unit>
        <trans-unit id="26654464b3d1a81292a4486c042ee2453aa6f1a0" translate="yes" xml:space="preserve">
          <source>.fail(actual, expected, [message], [operator])</source>
          <target state="translated">.fail (실제, 예상, [메시지], [운영자])</target>
        </trans-unit>
        <trans-unit id="5f208792b74ffe4dab485d15e89f17b2fced69c8" translate="yes" xml:space="preserve">
          <source>.false</source>
          <target state="translated">.false</target>
        </trans-unit>
        <trans-unit id="831ba2d06b42ce45d1231ad210dcd1f127c8ed19" translate="yes" xml:space="preserve">
          <source>.finite</source>
          <target state="translated">.finite</target>
        </trans-unit>
        <trans-unit id="f74a8373bfc219e3f435dce18329901a1572e97e" translate="yes" xml:space="preserve">
          <source>.flag(object, key, [value])</source>
          <target state="translated">.flag (객체, 키, [값])</target>
        </trans-unit>
        <trans-unit id="32f54d7f89850d462387b766f93531bcec9a60a2" translate="yes" xml:space="preserve">
          <source>.frozen</source>
          <target state="translated">.frozen</target>
        </trans-unit>
        <trans-unit id="5ac7726237f1498b00479a964c3a8dff28d555af" translate="yes" xml:space="preserve">
          <source>.getActual(object, [actual])</source>
          <target state="translated">.getActual (오브젝트, [실제])</target>
        </trans-unit>
        <trans-unit id="9017b3ab3dedfe7472e3e3239b190aa33a0705b2" translate="yes" xml:space="preserve">
          <source>.getConstructorName(errorLike)</source>
          <target state="translated">.getConstructorName(errorLike)</target>
        </trans-unit>
        <trans-unit id="932539782daa90f0ca1fd28899768fec0583baa8" translate="yes" xml:space="preserve">
          <source>.getEnumerableProperties(object)</source>
          <target state="translated">.getEnumerableProperties(object)</target>
        </trans-unit>
        <trans-unit id="8dbba1e09f104b595c30dca863d007c771b2a2eb" translate="yes" xml:space="preserve">
          <source>.getFuncName(constructorFn)</source>
          <target state="translated">.getFuncName(constructorFn)</target>
        </trans-unit>
        <trans-unit id="fbd1ca236e45821e1a160aa7c3aea9f6302801dc" translate="yes" xml:space="preserve">
          <source>.getFunctionName(constructorFn)</source>
          <target state="translated">.getFunctionName(constructorFn)</target>
        </trans-unit>
        <trans-unit id="3e25152de543cc58fb5a947b0564081eff1d44b6" translate="yes" xml:space="preserve">
          <source>.getMessage(errorLike)</source>
          <target state="translated">.getMessage(errorLike)</target>
        </trans-unit>
        <trans-unit id="255405e2390cdf1ca6e2d6dd64c422cdb432a8b9" translate="yes" xml:space="preserve">
          <source>.getMessage(object, message, negateMessage)</source>
          <target state="translated">.getMessage (객체, 메시지, negateMessage)</target>
        </trans-unit>
        <trans-unit id="68261a7405b34910ef87ccca768f6e5e5fe5c216" translate="yes" xml:space="preserve">
          <source>.getOwnEnumerableProperties(object)</source>
          <target state="translated">.getOwnEnumerableProperties(object)</target>
        </trans-unit>
        <trans-unit id="c687671d48b027a9f3f25ade5646b7f1ca4ce942" translate="yes" xml:space="preserve">
          <source>.getOwnEnumerablePropertySymbols(object)</source>
          <target state="translated">.getOwnEnumerablePropertySymbols(object)</target>
        </trans-unit>
        <trans-unit id="b26c95798f71284437eff5566df5fe598947ac56" translate="yes" xml:space="preserve">
          <source>.getPathInfo(object, path)</source>
          <target state="translated">.getPathInfo (객체, 경로)</target>
        </trans-unit>
        <trans-unit id="1759d2d70953d8f6e5422775f03b4cfc75dc355b" translate="yes" xml:space="preserve">
          <source>.getPathValue(object, path)</source>
          <target state="translated">.getPathValue (객체, 경로)</target>
        </trans-unit>
        <trans-unit id="a43c5ee591cfc481b8932fbae0f1fa739ec1b7bf" translate="yes" xml:space="preserve">
          <source>.getProperties(object)</source>
          <target state="translated">.getProperties(object)</target>
        </trans-unit>
        <trans-unit id="50adf48d9e7404d391285231b40d66c166cf5d39" translate="yes" xml:space="preserve">
          <source>.hasAllDeepKeys(object, [keys], [message])</source>
          <target state="translated">.hasAllDeepKeys (개체, [키], [메시지])</target>
        </trans-unit>
        <trans-unit id="4f44bb9874575bde056bb8dd2ab0fef9f3629f3a" translate="yes" xml:space="preserve">
          <source>.hasAllKeys(object, [keys], [message])</source>
          <target state="translated">.hasAllKeys (개체, [키], [메시지])</target>
        </trans-unit>
        <trans-unit id="6b4b94f930e384a47109b910a6e06e606c0bfb52" translate="yes" xml:space="preserve">
          <source>.hasAnyDeepKeys(object, [keys], [message])</source>
          <target state="translated">.hasAnyDeepKeys (개체, [키], [메시지])</target>
        </trans-unit>
        <trans-unit id="fc63a9b76b2c5a2de00f2624373adfeee7d3766b" translate="yes" xml:space="preserve">
          <source>.hasAnyKeys(object, [keys], [message])</source>
          <target state="translated">.hasAnyKeys (개체, [키], [메시지])</target>
        </trans-unit>
        <trans-unit id="e381b8d05ede9a334d745dd10f591726995aeb4a" translate="yes" xml:space="preserve">
          <source>.hasProperty(object, name)</source>
          <target state="translated">.hasProperty (객체, 이름)</target>
        </trans-unit>
        <trans-unit id="b3b91dd73e1a01292d2114d58d0b244b94d1db36" translate="yes" xml:space="preserve">
          <source>.ifError(object)</source>
          <target state="translated">.ifError(object)</target>
        </trans-unit>
        <trans-unit id="573eb917e522c2f7faa766532c8b434efad69a79" translate="yes" xml:space="preserve">
          <source>.include(haystack, needle, [message])</source>
          <target state="translated">.include (건초 더미, 바늘, [메시지])</target>
        </trans-unit>
        <trans-unit id="b10ccb37ef64b453dba0f87c3358c34d5693bd82" translate="yes" xml:space="preserve">
          <source>.include(val[, msg])</source>
          <target state="translated">.include (val [, msg])</target>
        </trans-unit>
        <trans-unit id="22131fb2adb82afbdc42e8c7028137750fc160a3" translate="yes" xml:space="preserve">
          <source>.includeDeepMembers(superset, subset, [message])</source>
          <target state="translated">.includeDeepMembers (슈퍼 셋, 서브 세트, [메시지])</target>
        </trans-unit>
        <trans-unit id="0a36e2fc218333f4c4a7467cd3893ee77d84eb8c" translate="yes" xml:space="preserve">
          <source>.includeDeepOrderedMembers(superset, subset, [message])</source>
          <target state="translated">.includeDeepOrderedMembers (슈퍼 셋, 서브 세트, [메시지])</target>
        </trans-unit>
        <trans-unit id="df99512db175c57bf20909d6f85fd5ee35e537eb" translate="yes" xml:space="preserve">
          <source>.includeMembers(superset, subset, [message])</source>
          <target state="translated">.includeMembers (슈퍼 셋, 서브 세트, [메시지])</target>
        </trans-unit>
        <trans-unit id="7ee3da6cdb5d339222061f72aca061f0f95723b2" translate="yes" xml:space="preserve">
          <source>.includeOrderedMembers(superset, subset, [message])</source>
          <target state="translated">.includeOrderedMembers (슈퍼 셋, 서브 세트, [메시지])</target>
        </trans-unit>
        <trans-unit id="149754d848cdd6a754961738c11f5d715fb58632" translate="yes" xml:space="preserve">
          <source>.increase(subject[, prop[, msg]])</source>
          <target state="translated">. 증가 (subject [, prop [, msg]])</target>
        </trans-unit>
        <trans-unit id="c6d1fe116e274b7657af3ba1b1a932b9a23543ec" translate="yes" xml:space="preserve">
          <source>.increases(function, object, property, [message])</source>
          <target state="translated">.increases (함수, 객체, 속성, [메시지])</target>
        </trans-unit>
        <trans-unit id="b8a465a70f86607114c8640aee9271b571fad5a9" translate="yes" xml:space="preserve">
          <source>.increasesButNotBy(function, object, property, [message])</source>
          <target state="translated">.increasesButNotBy (함수, 객체, 속성, [메시지])</target>
        </trans-unit>
        <trans-unit id="a5c9eaa944b07997694c2818bc378d40c9494456" translate="yes" xml:space="preserve">
          <source>.increasesBy(function, object, property, delta, [message])</source>
          <target state="translated">.increasesBy (함수, 객체, 속성, 델타, [메시지])</target>
        </trans-unit>
        <trans-unit id="3e0d77e7a407d6ba32c0d2950cae029dbce76373" translate="yes" xml:space="preserve">
          <source>.inspect(obj, [showHidden], [depth], [colors])</source>
          <target state="translated">.inspect (obj, [showHidden], [depth], [colors])</target>
        </trans-unit>
        <trans-unit id="7f0d52793852049f2c63fa88972c2d6f9cca187b" translate="yes" xml:space="preserve">
          <source>.instanceOf(object, constructor, [message])</source>
          <target state="translated">.instanceOf (객체, 생성자, [메시지])</target>
        </trans-unit>
        <trans-unit id="61e2c7e5dc115da484529eadc9fefdf5f6077273" translate="yes" xml:space="preserve">
          <source>.instanceof(constructor[, msg])</source>
          <target state="translated">.instanceof (생성자 [, msg])</target>
        </trans-unit>
        <trans-unit id="614c41923276516b2897cf24c9304e6c3fc012e1" translate="yes" xml:space="preserve">
          <source>.isAbove(valueToCheck, valueToBeAbove, [message])</source>
          <target state="translated">.isAbove (valueToCheck, valueToBeAbove, [메시지])</target>
        </trans-unit>
        <trans-unit id="05d7d5ad61f6a702921fd894f8f2563aad8e587c" translate="yes" xml:space="preserve">
          <source>.isArray(value, [message])</source>
          <target state="translated">.isArray (값, [메시지])</target>
        </trans-unit>
        <trans-unit id="566c8bbd4fcd6cb7491855e4e5b0e131482e175e" translate="yes" xml:space="preserve">
          <source>.isAtLeast(valueToCheck, valueToBeAtLeast, [message])</source>
          <target state="translated">.isAtLeast (valueToCheck, valueToBeAtLeast, [메시지])</target>
        </trans-unit>
        <trans-unit id="f477a440cab15b68ed145b2be01db486b96f74c1" translate="yes" xml:space="preserve">
          <source>.isAtMost(valueToCheck, valueToBeAtMost, [message])</source>
          <target state="translated">.isAtMost (valueToCheck, valueToBeAtMost, [메시지])</target>
        </trans-unit>
        <trans-unit id="63581fdd6d89bb316932ed4f5824b7470ac2e91e" translate="yes" xml:space="preserve">
          <source>.isBelow(valueToCheck, valueToBeBelow, [message])</source>
          <target state="translated">.isBelow (valueToCheck, valueToBeBelow, [메시지])</target>
        </trans-unit>
        <trans-unit id="bdbcfd3dc1a9e1c79814d2064313f5dbddbc56b1" translate="yes" xml:space="preserve">
          <source>.isBoolean(value, [message])</source>
          <target state="translated">.isBoolean (값, [메시지])</target>
        </trans-unit>
        <trans-unit id="30312afaff32cd5b92c621ed6e4693d44fca6a6f" translate="yes" xml:space="preserve">
          <source>.isDefined(value, [message])</source>
          <target state="translated">.isDefined (값, [메시지])</target>
        </trans-unit>
        <trans-unit id="ab48e545f1165a5e104e7b7c02e128d7c84233c3" translate="yes" xml:space="preserve">
          <source>.isEmpty(target)</source>
          <target state="translated">.isEmpty(target)</target>
        </trans-unit>
        <trans-unit id="3fca410486418bf15c9417e31971b7701c5ba715" translate="yes" xml:space="preserve">
          <source>.isExtensible(object)</source>
          <target state="translated">.isExtensible(object)</target>
        </trans-unit>
        <trans-unit id="cfaa0351bca7b3b69bda13d7815bc11c28951225" translate="yes" xml:space="preserve">
          <source>.isFalse(value, [message])</source>
          <target state="translated">.isFalse (값, [메시지])</target>
        </trans-unit>
        <trans-unit id="90107d5ff1a2704e4a9938abb15c731cc7cac445" translate="yes" xml:space="preserve">
          <source>.isFinite(value, [message])</source>
          <target state="translated">.isFinite (값, [메시지])</target>
        </trans-unit>
        <trans-unit id="70f0f473bc7e292c057c9e99c2b09c1328d66709" translate="yes" xml:space="preserve">
          <source>.isFrozen(object)</source>
          <target state="translated">.isFrozen(object)</target>
        </trans-unit>
        <trans-unit id="014b58cf5da57cc69a876db51026460bb7d5cb35" translate="yes" xml:space="preserve">
          <source>.isFunction(value, [message])</source>
          <target state="translated">.isFunction (값, [메시지])</target>
        </trans-unit>
        <trans-unit id="4120ab2e7cef73616c5c1fa1433597b6adf81ae2" translate="yes" xml:space="preserve">
          <source>.isNaN</source>
          <target state="translated">.isNaN</target>
        </trans-unit>
        <trans-unit id="26d91106532daa4d7d559d35412eccbcc34d73d7" translate="yes" xml:space="preserve">
          <source>.isNotArray(value, [message])</source>
          <target state="translated">.isNotArray (값, [메시지])</target>
        </trans-unit>
        <trans-unit id="d9fb047ff833fb1c2e0cec9fced4e608a8ea283a" translate="yes" xml:space="preserve">
          <source>.isNotBoolean(value, [message])</source>
          <target state="translated">.isNotBoolean (값, [메시지])</target>
        </trans-unit>
        <trans-unit id="3f970878121e716df8ba3acc3bbab8b995995ae7" translate="yes" xml:space="preserve">
          <source>.isNotEmpty(target)</source>
          <target state="translated">.isNotEmpty(target)</target>
        </trans-unit>
        <trans-unit id="172a64762af0c8c9e2334c0006d75d7771fda46a" translate="yes" xml:space="preserve">
          <source>.isNotExtensible(object)</source>
          <target state="translated">.isNotExtensible(object)</target>
        </trans-unit>
        <trans-unit id="6edfbae84e030fb1991670b6d797beb67444c039" translate="yes" xml:space="preserve">
          <source>.isNotFalse(value, [message])</source>
          <target state="translated">.isNotFalse (값, [메시지])</target>
        </trans-unit>
        <trans-unit id="b0d66177613ca0a85f34e0e44729411854208e9a" translate="yes" xml:space="preserve">
          <source>.isNotFrozen(object)</source>
          <target state="translated">.isNotFrozen(object)</target>
        </trans-unit>
        <trans-unit id="e079d629086aec276501809bc2b930c5d4f09350" translate="yes" xml:space="preserve">
          <source>.isNotFunction(value, [message])</source>
          <target state="translated">.isNotFunction (값, [메시지])</target>
        </trans-unit>
        <trans-unit id="3a6a1eaf0fb6c067f979e6074b8a3190c60f9ebd" translate="yes" xml:space="preserve">
          <source>.isNotNaN</source>
          <target state="translated">.isNotNaN</target>
        </trans-unit>
        <trans-unit id="6137da43a64098c664d2572bef3716a07547c76b" translate="yes" xml:space="preserve">
          <source>.isNotNull(value, [message])</source>
          <target state="translated">.isNotNull (값, [메시지])</target>
        </trans-unit>
        <trans-unit id="8656d8c0ba8421ff3922f0e914bb5380a45ee74e" translate="yes" xml:space="preserve">
          <source>.isNotNumber(value, [message])</source>
          <target state="translated">.isNotNumber (값, [메시지])</target>
        </trans-unit>
        <trans-unit id="9a77d463713f26a732dace74287078690b7fdf2a" translate="yes" xml:space="preserve">
          <source>.isNotObject(value, [message])</source>
          <target state="translated">.isNotObject (값, [메시지])</target>
        </trans-unit>
        <trans-unit id="0626d4ef895bcf4a5f12ff4d039a7bebcf1806ef" translate="yes" xml:space="preserve">
          <source>.isNotOk(object, [message])</source>
          <target state="translated">.isNotOk (개체, [메시지])</target>
        </trans-unit>
        <trans-unit id="d5eca78cbb1303f09dce5f97910ebe2b80dbfd92" translate="yes" xml:space="preserve">
          <source>.isNotSealed(object)</source>
          <target state="translated">.isNotSealed(object)</target>
        </trans-unit>
        <trans-unit id="1424b65b55e8c158ab70b606c4d8fd7f7c3e7976" translate="yes" xml:space="preserve">
          <source>.isNotString(value, [message])</source>
          <target state="translated">.isNotString (값, [메시지])</target>
        </trans-unit>
        <trans-unit id="2a297c41af4f915642a52392930b1f45b201fecd" translate="yes" xml:space="preserve">
          <source>.isNotTrue(value, [message])</source>
          <target state="translated">.isNotTrue (값, [메시지])</target>
        </trans-unit>
        <trans-unit id="b4e973b8ebf6be2887ed5c559541de136915e197" translate="yes" xml:space="preserve">
          <source>.isNull(value, [message])</source>
          <target state="translated">.isNull (값, [메시지])</target>
        </trans-unit>
        <trans-unit id="f1e939c9b93ed436f26a7cc2198d204a9e6af32f" translate="yes" xml:space="preserve">
          <source>.isNumber(value, [message])</source>
          <target state="translated">.isNumber (값, [메시지])</target>
        </trans-unit>
        <trans-unit id="f10266870e293186552c39044ccf6e01f2018265" translate="yes" xml:space="preserve">
          <source>.isObject(value, [message])</source>
          <target state="translated">.isObject (값, [메시지])</target>
        </trans-unit>
        <trans-unit id="20d985ced421d250cbf34c419d229abb78698f5b" translate="yes" xml:space="preserve">
          <source>.isOk(object, [message])</source>
          <target state="translated">.isOk (개체, [메시지])</target>
        </trans-unit>
        <trans-unit id="eda449d577350c9073ed4a3b54bbb1f802c52f35" translate="yes" xml:space="preserve">
          <source>.isProxyEnabled()</source>
          <target state="translated">.isProxyEnabled()</target>
        </trans-unit>
        <trans-unit id="5434a11eab4d8c2fbabf26759107f13be57cf20c" translate="yes" xml:space="preserve">
          <source>.isSealed(object)</source>
          <target state="translated">.isSealed(object)</target>
        </trans-unit>
        <trans-unit id="07475ddd2f97fa79b44645e21ea7964536859b04" translate="yes" xml:space="preserve">
          <source>.isString(value, [message])</source>
          <target state="translated">.isString (값, [메시지])</target>
        </trans-unit>
        <trans-unit id="a40c9cc832fd1772d3ed25e2d22867cc4b0cef49" translate="yes" xml:space="preserve">
          <source>.isTrue(value, [message])</source>
          <target state="translated">.isTrue (값, [메시지])</target>
        </trans-unit>
        <trans-unit id="7bb521f0e0cf87a3644cba1851acce7d9cbed9cd" translate="yes" xml:space="preserve">
          <source>.isUndefined(value, [message])</source>
          <target state="translated">.isUndefined (값, [메시지])</target>
        </trans-unit>
        <trans-unit id="b947cf80bf7978357fc9faced5ee4c490082cc59" translate="yes" xml:space="preserve">
          <source>.itself</source>
          <target state="translated">.itself</target>
        </trans-unit>
        <trans-unit id="bfa882c540644ab619407bf6192e33860d580bc0" translate="yes" xml:space="preserve">
          <source>.keys(key1[, key2[, &amp;hellip;]])</source>
          <target state="translated">.keys (key1 [, key2 [,&amp;hellip;]])</target>
        </trans-unit>
        <trans-unit id="81e13e2a1e296bd63cd35265fe857749d0e3392a" translate="yes" xml:space="preserve">
          <source>.least(n[, msg])</source>
          <target state="translated">.least (n [, msg])</target>
        </trans-unit>
        <trans-unit id="b303168dbb570289a4a5b0be716e0fb5f68a5f96" translate="yes" xml:space="preserve">
          <source>.lengthOf(n[, msg])</source>
          <target state="translated">.lengthOf (n [, msg])</target>
        </trans-unit>
        <trans-unit id="f7bebea45f3280141cc1539e005e44d6a767ffa1" translate="yes" xml:space="preserve">
          <source>.lengthOf(object, length, [message])</source>
          <target state="translated">.lengthOf (객체, 길이, [메시지])</target>
        </trans-unit>
        <trans-unit id="0f23949f5efa21a9b1b5b90de5bfc71c45516593" translate="yes" xml:space="preserve">
          <source>.match(re[, msg])</source>
          <target state="translated">.match (re [, msg])</target>
        </trans-unit>
        <trans-unit id="b68c7b03448b23e2db47f0fe05426dcfa20e9537" translate="yes" xml:space="preserve">
          <source>.match(value, regexp, [message])</source>
          <target state="translated">.match (값, 정규 표현식, [메시지])</target>
        </trans-unit>
        <trans-unit id="cb3a5943ae1839dc39f120019375b3e8f1616919" translate="yes" xml:space="preserve">
          <source>.members(set[, msg])</source>
          <target state="translated">.members (set [, msg])</target>
        </trans-unit>
        <trans-unit id="52e14bc5486bf349e6cb5f9c72e9f817893b83c1" translate="yes" xml:space="preserve">
          <source>.most(n[, msg])</source>
          <target state="translated">.most (n [, msg])</target>
        </trans-unit>
        <trans-unit id="dd37d7f2c7737f19ca5adb0c253213f9a4ce1883" translate="yes" xml:space="preserve">
          <source>.nested</source>
          <target state="translated">.nested</target>
        </trans-unit>
        <trans-unit id="98221c924fd59fcab163e65ff1db32f52c1d9c55" translate="yes" xml:space="preserve">
          <source>.nestedInclude(haystack, needle, [message])</source>
          <target state="translated">.nestedInclude (haystack, needle, [메시지])</target>
        </trans-unit>
        <trans-unit id="31a947ab96869a258881a6c7bc9f90e98dc10724" translate="yes" xml:space="preserve">
          <source>.nestedProperty(object, property, [message])</source>
          <target state="translated">.nestedProperty (개체, 속성, [메시지])</target>
        </trans-unit>
        <trans-unit id="be2982f23b6f93947cc574103f2d10da3b2eba20" translate="yes" xml:space="preserve">
          <source>.nestedPropertyVal(object, property, value, [message])</source>
          <target state="translated">.nestedPropertyVal (객체, 속성, 값, [메시지])</target>
        </trans-unit>
        <trans-unit id="af6ed7ba3a77d9c9041d1f9f34a1c12b90a41d5b" translate="yes" xml:space="preserve">
          <source>.not</source>
          <target state="translated">.not</target>
        </trans-unit>
        <trans-unit id="9ced2768c740ab162662ccf0a4ca2d2caa993152" translate="yes" xml:space="preserve">
          <source>.notDeepEqual(actual, expected, [message])</source>
          <target state="translated">.notDeepEqual (실제, 예상, [메시지])</target>
        </trans-unit>
        <trans-unit id="d9abfb3d5afc99580fc414488e0bd342af0d24b2" translate="yes" xml:space="preserve">
          <source>.notDeepInclude(haystack, needle, [message])</source>
          <target state="translated">.notDeepInclude (haystack, needle, [메시지])</target>
        </trans-unit>
        <trans-unit id="4547e76a5ffda098c0b52cd67337e7acdc28d786" translate="yes" xml:space="preserve">
          <source>.notDeepNestedInclude(haystack, needle, [message])</source>
          <target state="translated">.notDeepNestedInclude (haystack, needle, [message])</target>
        </trans-unit>
        <trans-unit id="750e169ab3b0a82fe7ac84f83f854bf2c1b932e3" translate="yes" xml:space="preserve">
          <source>.notDeepNestedPropertyVal(object, property, value, [message])</source>
          <target state="translated">.notDeepNestedPropertyVal (객체, 속성, 값, [메시지])</target>
        </trans-unit>
        <trans-unit id="e8091bae00c86f3c0d3904f53e9a1324f3940671" translate="yes" xml:space="preserve">
          <source>.notDeepOwnInclude(haystack, needle, [message])</source>
          <target state="translated">.notDeepOwnInclude (haystack, needle, [message])</target>
        </trans-unit>
        <trans-unit id="dd1557a47a7c9b2c7aeb057fc45559450f389fe4" translate="yes" xml:space="preserve">
          <source>.notDeepPropertyVal(object, property, value, [message])</source>
          <target state="translated">.notDeepPropertyVal (객체, 속성, 값, [메시지])</target>
        </trans-unit>
        <trans-unit id="ab52c54957199d721e78a56f373a89578d22813c" translate="yes" xml:space="preserve">
          <source>.notEqual(actual, expected, [message])</source>
          <target state="translated">.notEqual (실제, 예상, [메시지])</target>
        </trans-unit>
        <trans-unit id="18f364bce25133b175da9c885f69d548b13ecc33" translate="yes" xml:space="preserve">
          <source>.notExists</source>
          <target state="translated">.notExists</target>
        </trans-unit>
        <trans-unit id="cb22d4e4551aa0e3770b6824fe6df8571af7de3f" translate="yes" xml:space="preserve">
          <source>.notInclude(haystack, needle, [message])</source>
          <target state="translated">.notInclude (haystack, needle, [메시지])</target>
        </trans-unit>
        <trans-unit id="777adf64eb8e20f1f2c1375b73c9dced04000480" translate="yes" xml:space="preserve">
          <source>.notIncludeDeepMembers(superset, subset, [message])</source>
          <target state="translated">.notIncludeDeepMembers (슈퍼 셋, 서브셋, [메시지])</target>
        </trans-unit>
        <trans-unit id="55869a825b2b215f0e519b8f37a2ba58b8f15a83" translate="yes" xml:space="preserve">
          <source>.notIncludeDeepOrderedMembers(superset, subset, [message])</source>
          <target state="translated">.notIncludeDeepOrderedMembers (슈퍼 셋, 서브셋, [메시지])</target>
        </trans-unit>
        <trans-unit id="7ca870068cc25c6cbf001f5487e4dfc876943292" translate="yes" xml:space="preserve">
          <source>.notIncludeMembers(superset, subset, [message])</source>
          <target state="translated">.notIncludeMembers (슈퍼 셋, 서브셋, [메시지])</target>
        </trans-unit>
        <trans-unit id="a0e8647e04c35ef9e5efe759fc912dfcfe3da86b" translate="yes" xml:space="preserve">
          <source>.notIncludeOrderedMembers(superset, subset, [message])</source>
          <target state="translated">.notIncludeOrderedMembers (슈퍼 셋, 서브셋, [메시지])</target>
        </trans-unit>
        <trans-unit id="4f80337ac3f7d6b0eda9516b1187bcb9d78e1920" translate="yes" xml:space="preserve">
          <source>.notInstanceOf(object, constructor, [message])</source>
          <target state="translated">.notInstanceOf (객체, 생성자, [메시지])</target>
        </trans-unit>
        <trans-unit id="6955e567ac1c4eb9fe18464cbef74590715d93b8" translate="yes" xml:space="preserve">
          <source>.notMatch(value, regexp, [message])</source>
          <target state="translated">.notMatch (값, 정규 표현식, [메시지])</target>
        </trans-unit>
        <trans-unit id="fcd26f2a9b151f527e7bc27455975044b5e00b6b" translate="yes" xml:space="preserve">
          <source>.notNestedInclude(haystack, needle, [message])</source>
          <target state="translated">.notNestedInclude (haystack, needle, [메시지])</target>
        </trans-unit>
        <trans-unit id="7a2627b08f1072329297c66a46542bafe9b049d7" translate="yes" xml:space="preserve">
          <source>.notNestedProperty(object, property, [message])</source>
          <target state="translated">.notNestedProperty (개체, 속성, [메시지])</target>
        </trans-unit>
        <trans-unit id="2d63c50946eda10a310483d0096b5c8b94edb723" translate="yes" xml:space="preserve">
          <source>.notNestedPropertyVal(object, property, value, [message])</source>
          <target state="translated">.notNestedPropertyVal (객체, 속성, 값, [메시지])</target>
        </trans-unit>
        <trans-unit id="10d58df208c0c16938e61a8d7ca404ff3de8a88c" translate="yes" xml:space="preserve">
          <source>.notOwnInclude(haystack, needle, [message])</source>
          <target state="translated">.notOwnInclude (haystack, needle, [메시지])</target>
        </trans-unit>
        <trans-unit id="ec9987849878437f92229808cdd32c743a1bd373" translate="yes" xml:space="preserve">
          <source>.notProperty(object, property, [message])</source>
          <target state="translated">.notProperty (객체, 속성, [메시지])</target>
        </trans-unit>
        <trans-unit id="14002e037244d3ad846fa15db3b9e219c81d9aa8" translate="yes" xml:space="preserve">
          <source>.notPropertyVal(object, property, value, [message])</source>
          <target state="translated">.notPropertyVal (객체, 속성, 값, [메시지])</target>
        </trans-unit>
        <trans-unit id="f5d36577f3a6c4ed0635d1cd694a1506dcb455ca" translate="yes" xml:space="preserve">
          <source>.notSameDeepMembers(set1, set2, [message])</source>
          <target state="translated">.notSameDeepMembers (set1, set2, [메시지])</target>
        </trans-unit>
        <trans-unit id="83b76388f920ed839f7b7d5709e8767ac9f8a16e" translate="yes" xml:space="preserve">
          <source>.notSameDeepOrderedMembers(set1, set2, [message])</source>
          <target state="translated">.notSameDeepOrderedMembers (set1, set2, [메시지])</target>
        </trans-unit>
        <trans-unit id="f129ab1c6e8dd4efae568a6a7d2758974e6639f2" translate="yes" xml:space="preserve">
          <source>.notSameMembers(set1, set2, [message])</source>
          <target state="translated">.notSameMembers (set1, set2, [메시지])</target>
        </trans-unit>
        <trans-unit id="699b9e200846f443e9fca8d8a62de3c37406a50a" translate="yes" xml:space="preserve">
          <source>.notSameOrderedMembers(set1, set2, [message])</source>
          <target state="translated">.notSameOrderedMembers (set1, set2, [메시지])</target>
        </trans-unit>
        <trans-unit id="2dd700179db366a82748c98ab686c5587555a0bb" translate="yes" xml:space="preserve">
          <source>.notStrictEqual(actual, expected, [message])</source>
          <target state="translated">.notStrictEqual (실제, 예상, [메시지])</target>
        </trans-unit>
        <trans-unit id="f217807021d5b7f09d2b67ccf45f25e0ad28301b" translate="yes" xml:space="preserve">
          <source>.notTypeOf(value, name, [message])</source>
          <target state="translated">.notTypeOf (값, 이름, [메시지])</target>
        </trans-unit>
        <trans-unit id="b1a3da532623bdbc9ea825bc84ae456e4b2ecd0b" translate="yes" xml:space="preserve">
          <source>.null</source>
          <target state="translated">.null</target>
        </trans-unit>
        <trans-unit id="b9e66e097bfda41094819f19b30fa201f2ea6a57" translate="yes" xml:space="preserve">
          <source>.objDisplay(object)</source>
          <target state="translated">.objDisplay(object)</target>
        </trans-unit>
        <trans-unit id="deb3056f882aba2f8eb0980a4814300b088f9682" translate="yes" xml:space="preserve">
          <source>.ok</source>
          <target state="translated">.ok</target>
        </trans-unit>
        <trans-unit id="52082617c8f2e27c624be5f2156bdb3a19f1bd57" translate="yes" xml:space="preserve">
          <source>.oneOf(inList, list, [message])</source>
          <target state="translated">.oneOf (목록, 목록, [메시지])</target>
        </trans-unit>
        <trans-unit id="b1c286c781cfccb0134ef2dea3822600a929adb5" translate="yes" xml:space="preserve">
          <source>.oneOf(list[, msg])</source>
          <target state="translated">.oneOf (list [, msg])</target>
        </trans-unit>
        <trans-unit id="567408740498e6efb62846e3410af3e94c19236c" translate="yes" xml:space="preserve">
          <source>.operator(val1, operator, val2, [message])</source>
          <target state="translated">.operator (val1, operator, val2, [메시지])</target>
        </trans-unit>
        <trans-unit id="e76258c35dfc645529e2a0bb7a95a009fa21ca69" translate="yes" xml:space="preserve">
          <source>.ordered</source>
          <target state="translated">.ordered</target>
        </trans-unit>
        <trans-unit id="206e85737bc2d0016a2c81e6bad20255dd66647c" translate="yes" xml:space="preserve">
          <source>.overwriteChainableMethod(ctx, name, method, chainingBehavior)</source>
          <target state="translated">.overwriteChainableMethod (ctx, 이름, 메소드, chainingBehavior)</target>
        </trans-unit>
        <trans-unit id="dc75aa666846b097a2f2b2d5e8ec25ead16adea2" translate="yes" xml:space="preserve">
          <source>.overwriteMethod(ctx, name, fn)</source>
          <target state="translated">.overwriteMethod (ctx, 이름, fn)</target>
        </trans-unit>
        <trans-unit id="1ea489fa25cec91afcfaaac73f10b7914235712b" translate="yes" xml:space="preserve">
          <source>.overwriteProperty(ctx, name, fn)</source>
          <target state="translated">.overwriteProperty (ctx, 이름, fn)</target>
        </trans-unit>
        <trans-unit id="8bba0e3a076cb3d10c2406396b81e9c979076c73" translate="yes" xml:space="preserve">
          <source>.own</source>
          <target state="translated">.own</target>
        </trans-unit>
        <trans-unit id="718f7ebc3c9f87a1afa92da2c323880bc56aac4b" translate="yes" xml:space="preserve">
          <source>.ownInclude(haystack, needle, [message])</source>
          <target state="translated">.ownInclude (haystack, needle, [메시지])</target>
        </trans-unit>
        <trans-unit id="e59c14e4b78816826ae96d1bf4704c016a0aa1b3" translate="yes" xml:space="preserve">
          <source>.ownPropertyDescriptor(name[, descriptor[, msg]])</source>
          <target state="translated">.ownPropertyDescriptor (name [, descriptor [, msg]])</target>
        </trans-unit>
        <trans-unit id="ceac64d0430ff8a03795e8930983dae3b294a06a" translate="yes" xml:space="preserve">
          <source>.property(name[, val[, msg]])</source>
          <target state="translated">.property (이름 [, val [, msg]])</target>
        </trans-unit>
        <trans-unit id="3a916968692554bc5639539ea319cb3baac8559f" translate="yes" xml:space="preserve">
          <source>.property(object, property, [message])</source>
          <target state="translated">.property (객체, 속성, [메시지])</target>
        </trans-unit>
        <trans-unit id="aed07f54b97b12ffacbaaa65142d541b4ac121f7" translate="yes" xml:space="preserve">
          <source>.propertyVal(object, property, value, [message])</source>
          <target state="translated">.propertyVal (객체, 속성, 값, [메시지])</target>
        </trans-unit>
        <trans-unit id="f4f0430c686f86e11a66fa9ce7b283f285c24dfa" translate="yes" xml:space="preserve">
          <source>.proxify(object)</source>
          <target state="translated">.proxify(object)</target>
        </trans-unit>
        <trans-unit id="25ccd7a8066932527072677f7ad350a834bfcc34" translate="yes" xml:space="preserve">
          <source>.respondTo(method[, msg])</source>
          <target state="translated">.respondTo (방법 [, msg])</target>
        </trans-unit>
        <trans-unit id="780b345ec2498de28742239d013bf33b22483283" translate="yes" xml:space="preserve">
          <source>.sameDeepMembers(set1, set2, [message])</source>
          <target state="translated">.sameDeepMembers (set1, set2, [메시지])</target>
        </trans-unit>
        <trans-unit id="d46be743b858eccf1368f6355b8d7aad5589d651" translate="yes" xml:space="preserve">
          <source>.sameDeepOrderedMembers(set1, set2, [message])</source>
          <target state="translated">.sameDeepOrderedMembers (set1, set2, [메시지])</target>
        </trans-unit>
        <trans-unit id="384d489b4f54d444a4d470681ce7c88058360f16" translate="yes" xml:space="preserve">
          <source>.sameMembers(set1, set2, [message])</source>
          <target state="translated">.sameMembers (set1, set2, [메시지])</target>
        </trans-unit>
        <trans-unit id="687acf6e1836f926aeab92dc34d23f5e408e3ea9" translate="yes" xml:space="preserve">
          <source>.sameOrderedMembers(set1, set2, [message])</source>
          <target state="translated">.sameOrderedMembers (set1, set2, [메시지])</target>
        </trans-unit>
        <trans-unit id="2b78363ce9850ed5f97eb3d9f9e6c932dab782bc" translate="yes" xml:space="preserve">
          <source>.satisfy(matcher[, msg])</source>
          <target state="translated">.satisfy (매처 [, msg])</target>
        </trans-unit>
        <trans-unit id="9045dfbee5bf51bf61b3bbf55fbc41dc6facebf4" translate="yes" xml:space="preserve">
          <source>.sealed</source>
          <target state="translated">.sealed</target>
        </trans-unit>
        <trans-unit id="9917b7ff0a79d12a9f534eda32902bd9f95c4931" translate="yes" xml:space="preserve">
          <source>.strictEqual(actual, expected, [message])</source>
          <target state="translated">.strictEqual (실제, 예상, [메시지])</target>
        </trans-unit>
        <trans-unit id="d0886799d82739296b1a4b18ec7ecdfa88fb2ff3" translate="yes" xml:space="preserve">
          <source>.string(str[, msg])</source>
          <target state="translated">.string (str [, msg])</target>
        </trans-unit>
        <trans-unit id="e00cad4ec003b762c5e683bbba04751378bf945d" translate="yes" xml:space="preserve">
          <source>.test(object, expression)</source>
          <target state="translated">.test (객체, 표현)</target>
        </trans-unit>
        <trans-unit id="ec82ed85130efcf9786d90aa39275b2d68e5e82c" translate="yes" xml:space="preserve">
          <source>.throw([errorLike], [errMsgMatcher], [msg])</source>
          <target state="translated">.throw ([errorLike], [errMsgMatcher], [msg])</target>
        </trans-unit>
        <trans-unit id="9d2d0116a9e5f10e839168d7bbf1d1d17c0b4f26" translate="yes" xml:space="preserve">
          <source>.throws(fn, [errorLike/string/regexp], [string/regexp], [message])</source>
          <target state="translated">.throws (fn, [errorLike / string / regexp], [string / regexp], [message])</target>
        </trans-unit>
        <trans-unit id="d3229cc62d1560788c88af7d9310ca17b9cb1cad" translate="yes" xml:space="preserve">
          <source>.transferFlags(assertion, object, includeAll = true)</source>
          <target state="translated">.transferFlags (어설 션, 오브젝트, includeAll = true)</target>
        </trans-unit>
        <trans-unit id="86041180a1e83bd4db8a9074d94fe783bdda0498" translate="yes" xml:space="preserve">
          <source>.true</source>
          <target state="translated">.true</target>
        </trans-unit>
        <trans-unit id="d631a9818639891d718ba77a0ca1c4eed9a5f47a" translate="yes" xml:space="preserve">
          <source>.typeOf(value, name, [message])</source>
          <target state="translated">.typeOf (값, 이름, [메시지])</target>
        </trans-unit>
        <trans-unit id="87471b86a5d5fd1e04574b8401f586879fdfed92" translate="yes" xml:space="preserve">
          <source>.undefined</source>
          <target state="translated">.undefined</target>
        </trans-unit>
        <trans-unit id="0796c8086fdab2ec2f75e1aa5dcd9253addde9ee" translate="yes" xml:space="preserve">
          <source>.within(start, finish[, msg])</source>
          <target state="translated">.within (시작, 완료 [, msg])</target>
        </trans-unit>
        <trans-unit id="4517979ebf5fab47b32b8e50ec268cd032bcb683" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#{act}&lt;/code&gt; actual value</source>
          <target state="translated">&lt;code&gt;#{act}&lt;/code&gt; 실제 가치 # {act}</target>
        </trans-unit>
        <trans-unit id="0aeeed2a1648a098c8f8ccee034159d390a779d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#{act}&lt;/code&gt;: the actual value, defaults to &lt;code&gt;_obj&lt;/code&gt; but can be overwritten by value provided in &lt;code&gt;assert&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;#{act}&lt;/code&gt; : 실제 값, 기본값은 &lt;code&gt;_obj&lt;/code&gt; 이지만 &lt;code&gt;assert&lt;/code&gt; 에서 제공 한 값으로 덮어 쓸 수 있음</target>
        </trans-unit>
        <trans-unit id="24b2fd08eb7d54b6f8c6af386a7d369dd0625343" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#{exp}&lt;/code&gt; expected value</source>
          <target state="translated">&lt;code&gt;#{exp}&lt;/code&gt; 예상 값</target>
        </trans-unit>
        <trans-unit id="9fb67e603df08b2c9b8900cfd9915a594639d2e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#{exp}&lt;/code&gt;: the expected value, if it was provided in &lt;code&gt;assert&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;#{exp}&lt;/code&gt; : &lt;code&gt;assert&lt;/code&gt; 로 제공된 경우 예상 값</target>
        </trans-unit>
        <trans-unit id="b3c21131f9d81e128ed5a9876270906abf99b40e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#{this}&lt;/code&gt; current asserted object</source>
          <target state="translated">&lt;code&gt;#{this}&lt;/code&gt; 현재 주장 된 개체</target>
        </trans-unit>
        <trans-unit id="14405b25be97a30df07c4ddc04f358a5c4da954e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#{this}&lt;/code&gt;: the &lt;code&gt;_obj&lt;/code&gt; of the assertion</source>
          <target state="translated">&lt;code&gt;#{this}&lt;/code&gt; : 어설 션 의 &lt;code&gt;_obj&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="011e6b6c79977f306a26094583591e5ac4259e2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.a&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.a&lt;/code&gt; 는 어설 션이 실패 할 때 표시하는 사용자 정의 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7a99bb993f980d013289ce5eecd322f4a987c1f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.a&lt;/code&gt; can also be used as a language chain to improve the readability of your assertions.</source>
          <target state="translated">&lt;code&gt;.a&lt;/code&gt; 는 어설 션의 가독성을 향상시키기 위해 언어 체인으로 사용될 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="39ca1704a188cd36e3038c1b314cbf40c90dceff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.a&lt;/code&gt; supports objects that have a custom type set via &lt;code&gt;Symbol.toStringTag&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.a&lt;/code&gt; 는 &lt;code&gt;Symbol.toStringTag&lt;/code&gt; 를 통해 사용자 정의 유형이 설정된 객체를 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="78612695e08443a3c543fe8317bcbff29043b7e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.above&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.above&lt;/code&gt; 는 어설 션이 실패 할 때 표시하는 사용자 지정 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e8ad5e4b6bf45b0e5bf807f09d5964bae01232ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.below&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.below&lt;/code&gt; 는 어설 션이 실패 할 때 표시되는 사용자 지정 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="71561e0c74a86acd3084a69773342561296c7248" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.by&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.by&lt;/code&gt; 는 어설 션이 실패 할 때 표시되는 사용자 지정 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="049758e5d60dddc6865eb031a5123a3a80aaf09d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.change&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;. When not providing two arguments, always use the second form.</source>
          <target state="translated">&lt;code&gt;.change&lt;/code&gt; 는 어설 션이 실패 할 때 표시되는 사용자 지정 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; . 두 개의 인수를 제공하지 않을 때는 항상 두 번째 양식을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="343da1ffaac2fd60bb330510adc0a75e040be426" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.change&lt;/code&gt; also causes all &lt;code&gt;.by&lt;/code&gt; assertions that follow in the chain to assert how much a numeric subject was increased or decreased by. However, it&amp;rsquo;s dangerous to use &lt;code&gt;.change.by&lt;/code&gt;. The problem is that it creates uncertain expectations by asserting that the subject either increases by the given delta, or that it decreases by the given delta. It&amp;rsquo;s often best to identify the exact output that&amp;rsquo;s expected, and then write an assertion that only accepts that exact output.</source>
          <target state="translated">&lt;code&gt;.change&lt;/code&gt; 모든 원인이 &lt;code&gt;.by&lt;/code&gt; 숫자 피사체가 증가 또는 감소 얼마나 많은 주장 체인에 따라 주장을. 그러나 &lt;code&gt;.change.by&lt;/code&gt; 를 사용하는 것은 위험합니다 . 문제는 피험자가 주어진 델타에 의해 증가하거나 주어진 델타에 의해 감소한다고 주장함으로써 불확실한 기대를 창출한다는 것이다. 예상되는 정확한 출력을 식별 한 다음 정확한 출력 만 허용하는 어설 션을 작성하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="6267669e7927c4c56e1e5a6d4abc3fde0f52307f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.closeTo&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.closeTo&lt;/code&gt; 는 어설 션이 실패 할 때 표시되는 사용자 지정 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="94000669f34810cd95e387ead8d06320f2c2778c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.decrease&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;. When not providing two arguments, always use the second form.</source>
          <target state="translated">&lt;code&gt;.decrease&lt;/code&gt; 는 어설 션이 실패 할 때 표시하는 사용자 지정 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; . 두 개의 인수를 제공하지 않을 때는 항상 두 번째 양식을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7c96da68514b7282943906cfe61aead4971f0908" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.deep&lt;/code&gt; and &lt;code&gt;.nested&lt;/code&gt; can be combined.</source>
          <target state="translated">&lt;code&gt;.deep&lt;/code&gt; 과 &lt;code&gt;.nested&lt;/code&gt; 를 결합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="96e0ff911d377cd5acf84cd198764bea01804903" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.deep&lt;/code&gt; and &lt;code&gt;.own&lt;/code&gt; can be combined.</source>
          <target state="translated">&lt;code&gt;.deep&lt;/code&gt; 과 &lt;code&gt;.own&lt;/code&gt; 을 결합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f6ab75b9cb058c573dc5b31240958d28e9705745" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.deep&lt;/code&gt;, &lt;code&gt;.ordered&lt;/code&gt;, and &lt;code&gt;.include&lt;/code&gt; can all be combined. However, if &lt;code&gt;.include&lt;/code&gt; and &lt;code&gt;.ordered&lt;/code&gt; are combined, the ordering begins at the start of both arrays.</source>
          <target state="translated">&lt;code&gt;.deep&lt;/code&gt; , &lt;code&gt;.ordered&lt;/code&gt; 및 &lt;code&gt;.include&lt;/code&gt; 는 모든 결합 될 수있다. 그러나 &lt;code&gt;.include&lt;/code&gt; 와 &lt;code&gt;.ordered&lt;/code&gt; 가 결합 된 경우 두 배열의 시작에서 순서가 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="cbf19d7885b86b769fded84be537236d71283040" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.eql&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.eql&lt;/code&gt; 은 어설 션이 실패 할 때 표시되는 사용자 지정 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1f2b7be9583b15d7887fb026bcd1fd6c3cc67fa4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.equal&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.equal&lt;/code&gt; 은 어설 션이 실패 할 때 표시되는 사용자 지정 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b9dc395a2a87091bfa497609b250a03c002c22b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.include&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.include&lt;/code&gt; 는 어설 션이 실패 할 때 표시되는 사용자 지정 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2faafd6c0f17544c296976cf6528631c474d3e1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.include&lt;/code&gt; can also be used as a language chain, causing all &lt;code&gt;.members&lt;/code&gt; and &lt;code&gt;.keys&lt;/code&gt; assertions that follow in the chain to require the target to be a superset of the expected set, rather than an identical set. Note that &lt;code&gt;.members&lt;/code&gt; ignores duplicates in the subset when &lt;code&gt;.include&lt;/code&gt; is added.</source>
          <target state="translated">&lt;code&gt;.include&lt;/code&gt; 또한 .include 는 언어 체인으로 사용될 수 있으므로 체인에서 뒤 따르는 모든 &lt;code&gt;.members&lt;/code&gt; 및 &lt;code&gt;.keys&lt;/code&gt; 어설 션이 대상이 동일한 세트가 아니라 예상 세트의 상위 세트가되도록 요구합니다. 참고 &lt;code&gt;.members&lt;/code&gt; 의 부분 집합에서 무시 중복이 &lt;code&gt;.include&lt;/code&gt; 가 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="d52851a684bfe1f18cb087d7ad10cddcd36f9604" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.increase&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;. When not providing two arguments, always use the second form.</source>
          <target state="translated">&lt;code&gt;.increase&lt;/code&gt; 는 어설 션이 실패 할 때 표시하는 사용자 정의 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; . 두 개의 인수를 제공하지 않을 때는 항상 두 번째 양식을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="0de49854665f9a1e126da99a80bf5bc072e14c04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.instanceof&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.instanceof&lt;/code&gt; 는 어설 션이 실패 할 때 표시되는 사용자 지정 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="160abc2c129e20b764b2afcf7999f527bc562c5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.least&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.least&lt;/code&gt; 는 어설 션이 실패 할 때 표시되는 사용자 지정 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0e102b3fb4fcd814a59115d5af66d274ed9a60e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.lengthOf&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.lengthOf&lt;/code&gt; 는 어설 션이 실패 할 때 표시하는 사용자 지정 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6758c67c922d08c70634c4f6f5d879fab4bfeda2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.lengthOf&lt;/code&gt; can also be used as a language chain, causing all &lt;code&gt;.above&lt;/code&gt;, &lt;code&gt;.below&lt;/code&gt;, &lt;code&gt;.least&lt;/code&gt;, &lt;code&gt;.most&lt;/code&gt;, and &lt;code&gt;.within&lt;/code&gt; assertions that follow in the chain to use the target&amp;rsquo;s &lt;code&gt;length&lt;/code&gt; property as the target. However, it&amp;rsquo;s often best to assert that the target&amp;rsquo;s &lt;code&gt;length&lt;/code&gt; property is equal to its expected length, rather than asserting that its &lt;code&gt;length&lt;/code&gt; property falls within some range of values.</source>
          <target state="translated">&lt;code&gt;.lengthOf&lt;/code&gt; 은 모든 원인이 언어 사슬로 사용할 수 있습니다 &lt;code&gt;.above&lt;/code&gt; 는 , &lt;code&gt;.below&lt;/code&gt; , &lt;code&gt;.least&lt;/code&gt; , &lt;code&gt;.most&lt;/code&gt; 및 &lt;code&gt;.within&lt;/code&gt; 체인에 따라 주장이 대상의 사용 &lt;code&gt;length&lt;/code&gt; 대상으로 속성을. 그러나 &lt;code&gt;length&lt;/code&gt; 속성이 일부 값 범위 내에 속 한다고 가정하기보다는 대상의 &lt;code&gt;length&lt;/code&gt; 속성이 예상 길이와 동일하다고 주장하는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="003bae4e78b183ab6c0a2789cfd76574c4439f85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.match&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.match&lt;/code&gt; 는 어설 션이 실패 할 때 표시되는 사용자 지정 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="752ca7f9594208169251222683bbbd8cd7d6a228" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.members&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.members&lt;/code&gt; 는 어설 션이 실패 할 때 표시되는 사용자 지정 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6df584045cc4786940908dbb714b86477244a893" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.most&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.most&lt;/code&gt; 는 어설 션이 실패 할 때 표시하는 사용자 지정 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="30f180296f02d4ddd1eec9bd453a35db75d39e67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.nested&lt;/code&gt; cannot be combined with &lt;code&gt;.own&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.nested&lt;/code&gt; 는 함께 사용할 수 없습니다 &lt;code&gt;.own&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7c9ec6ac1cad4cccc866be1e2937695c2ac68af4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.oneOf&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.oneOf&lt;/code&gt; 는 어설 션이 실패 할 때 표시하는 사용자 지정 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a917c28e033eb20297c0f94b294920ae40a55f5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.own&lt;/code&gt; and &lt;code&gt;.nested&lt;/code&gt; cannot be combined.</source>
          <target state="translated">&lt;code&gt;.own&lt;/code&gt; 과 &lt;code&gt;.nested&lt;/code&gt; 는 결합 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="8f8900f5ee7d40c2ba729756d09fc884bdf2cbfc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.own&lt;/code&gt; cannot be combined with &lt;code&gt;.nested&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.own&lt;/code&gt; 은 함께 사용할 수 없습니다 &lt;code&gt;.nested&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ea26c39ad6992ab55a96306233e8491c35ace241" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.ownPropertyDescriptor&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;. When not providing &lt;code&gt;descriptor&lt;/code&gt;, only use the second form.</source>
          <target state="translated">&lt;code&gt;.ownPropertyDescriptor&lt;/code&gt; 는 어설 션이 실패 할 때 표시되는 사용자 지정 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; . &lt;code&gt;descriptor&lt;/code&gt; 를 제공하지 않을 때는 두 번째 양식 만 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="08e9130126b6521cf68df0ca28d6a7f2dbb8adfd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.ownPropertyDescriptor&lt;/code&gt; changes the target of any assertions that follow in the chain to be the value of the property descriptor from the original target object.</source>
          <target state="translated">&lt;code&gt;.ownPropertyDescriptor&lt;/code&gt; 는 체인에서 따르는 어설 션의 대상을 원래 대상 개체의 속성 설명자 값으로 변경합니다.</target>
        </trans-unit>
        <trans-unit id="bcc3747cac55cf077a635d1218e608d68b455b71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.property&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;. When not providing &lt;code&gt;val&lt;/code&gt;, only use the second form.</source>
          <target state="translated">&lt;code&gt;.property&lt;/code&gt; 는 어설 션이 실패 할 때 표시되는 사용자 지정 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; . &lt;code&gt;val&lt;/code&gt; 을 제공하지 않으면 두 번째 양식 만 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="aab4341e968f96986a9dfeb27c2b4e0c963def4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.property&lt;/code&gt; changes the target of any assertions that follow in the chain to be the value of the property from the original target object.</source>
          <target state="translated">&lt;code&gt;.property&lt;/code&gt; 는 체인에서 뒤 따르는 어설 션의 대상을 원래 대상 개체의 속성 값으로 변경합니다.</target>
        </trans-unit>
        <trans-unit id="f48b7c57ea7cf151928ffe4448f97d140203b579" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.respondTo&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.respondTo&lt;/code&gt; 는 어설 션이 실패 할 때 표시되는 사용자 지정 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="59490a595a1bff5a3e03f3fbc7853f0135313079" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.satisfy&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.satisfy&lt;/code&gt; 는 어설 션이 실패 할 때 표시되는 사용자 지정 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d60f8c0cec5754a5a8f4d70e21ddca1779d1854d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.string&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.string&lt;/code&gt; 은 어설 션이 실패 할 때 표시되는 사용자 정의 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5ee120d314435d93063a99c75738dc6cc9e74a13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.throw&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;. When not providing two arguments, always use the second form.</source>
          <target state="translated">&lt;code&gt;.throw&lt;/code&gt; 는 어설 션이 실패 할 때 표시되는 사용자 지정 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; . 두 개의 인수를 제공하지 않을 때는 항상 두 번째 양식을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7e136c59e27dff48a349ed611db3d0f64bb3c376" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.throw&lt;/code&gt; changes the target of any assertions that follow in the chain to be the error object that&amp;rsquo;s thrown.</source>
          <target state="translated">&lt;code&gt;.throw&lt;/code&gt; 는 체인에서 뒤 따르는 어설 션의 대상을 발생 된 오류 개체로 변경합니다.</target>
        </trans-unit>
        <trans-unit id="c54ce75b7adada99da1bd5b9b75d9bfc4ab794e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.within&lt;/code&gt; accepts an optional &lt;code&gt;msg&lt;/code&gt; argument which is a custom error message to show when the assertion fails. The message can also be given as the second argument to &lt;code&gt;expect&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.within&lt;/code&gt; 은 어설 션이 실패 할 때 표시하는 사용자 지정 오류 메시지 인 선택적 &lt;code&gt;msg&lt;/code&gt; 인수를 허용 합니다. 이 메시지는 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7ffeedd64e5f0f4c53cd03657406e5d4581e3f56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chai.Assertion&lt;/code&gt; assigned to the &lt;code&gt;Assertion&lt;/code&gt; variable</source>
          <target state="translated">&lt;code&gt;chai.Assertion&lt;/code&gt; &lt;code&gt;Assertion&lt;/code&gt; 변수에 지정된 chai . 어설 션</target>
        </trans-unit>
        <trans-unit id="f363ba14ec3abcefb3a3a9b1b2c1e6aa2db27147" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;contains&lt;/code&gt;: set when &lt;code&gt;include&lt;/code&gt; or &lt;code&gt;contain&lt;/code&gt; is used as a property. changes the behavior of &lt;code&gt;keys&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;contains&lt;/code&gt; : 경우에 설정 &lt;code&gt;include&lt;/code&gt; 또는 &lt;code&gt;contain&lt;/code&gt; 속성으로 사용된다. &lt;code&gt;keys&lt;/code&gt; 의 동작을 변경합니다 .</target>
        </trans-unit>
        <trans-unit id="90bfd4448de38c0ee6b0d845c54f7370fef1f3ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deep&lt;/code&gt;: set when &lt;code&gt;.deep&lt;/code&gt; is included in the chain. used by &lt;code&gt;equal&lt;/code&gt; and &lt;code&gt;property&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;deep&lt;/code&gt; : 체인에 &lt;code&gt;.deep&lt;/code&gt; 이 포함 된 경우 설정됩니다 . &lt;code&gt;equal&lt;/code&gt; 과 &lt;code&gt;property&lt;/code&gt; 의해 사용</target>
        </trans-unit>
        <trans-unit id="86ce2baef48174ea31085fc973c366fcbb9dca41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lengthOf&lt;/code&gt;: set when &lt;code&gt;length&lt;/code&gt; is used as a property. changes the behavior of &lt;code&gt;above&lt;/code&gt;, &lt;code&gt;below&lt;/code&gt;, and &lt;code&gt;within&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lengthOf&lt;/code&gt; : &lt;code&gt;length&lt;/code&gt; 가 속성으로 사용될 때 설정됩니다 . &lt;code&gt;above&lt;/code&gt; , &lt;code&gt;below&lt;/code&gt; 및 &lt;code&gt;within&lt;/code&gt; 의 동작을 변경합니다 .</target>
        </trans-unit>
        <trans-unit id="d99c3aeeb54358e9ebf7a2e306c3379376c4d541" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message&lt;/code&gt;: additional information to include with an error when using &lt;code&gt;assert&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt; : &lt;code&gt;assert&lt;/code&gt; 인터페이스 사용시 오류와 함께 추가 정보 .</target>
        </trans-unit>
        <trans-unit id="793b1aeddb57b9788270c43aee6f9648ed2193f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;negate&lt;/code&gt;: set when &lt;code&gt;.not&lt;/code&gt; is included in the chain.</source>
          <target state="translated">&lt;code&gt;negate&lt;/code&gt; : 체인에 &lt;code&gt;.not&lt;/code&gt; 이 포함 된 경우 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="e2a0b99a3909ffeef3a341cbe96359b8ddfd05cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;object&lt;/code&gt;: (see above)</source>
          <target state="translated">&lt;code&gt;object&lt;/code&gt; : (위 참조)</target>
        </trans-unit>
        <trans-unit id="6b0ba73c48e5949bdd9c5a2a7407a1743c14f701" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ssfi&lt;/code&gt;: start stack function - used to prevent callback stacks from being shown in errors.</source>
          <target state="translated">&lt;code&gt;ssfi&lt;/code&gt; : 스택 시작 기능-콜백 스택이 오류로 표시되지 않도록하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="358456a16a6dbfa68a2af345925279019813b005" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@default&lt;/strong&gt;&lt;code&gt;40&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;@default&lt;/strong&gt;&lt;code&gt;40&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="99c751dd4ffd85f96ee94940864868ad2a10bc31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@default&lt;/strong&gt;&lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;@default&lt;/strong&gt;&lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="769fa692a695572560794ce85250b5a5f58b5071" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@default&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;@default&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6a024117874e893b27613ae4289757561917947a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@param&lt;/strong&gt;&lt;em&gt;{Boolean}&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;@param&lt;/strong&gt;&lt;em&gt;{Boolean}&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a6fcbe5fbbabe17cbca0ef4fa41d2a8844e00bb6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@param&lt;/strong&gt;&lt;em&gt;{Number}&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;@param&lt;/strong&gt;&lt;em&gt;{Number}&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="56bd09dbb46f0de8eefe1a86165fabf393657adf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Chains&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Chains&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1a6ffe4370bb4182f75194ee1f108db07bb4ee10" translate="yes" xml:space="preserve">
          <source>@param{ Arguments }chai.Assertion.prototype.assertarguments</source>
          <target state="translated">@param {인수} chai.Assertion.prototype.assertarguments</target>
        </trans-unit>
        <trans-unit id="16a3c1cc1c37e552b34234635b03f518bc55b0d0" translate="yes" xml:space="preserve">
          <source>@param{ Array | Object }keys</source>
          <target state="translated">@param {배열 | 객체} 키</target>
        </trans-unit>
        <trans-unit id="fbc7f91e9e6f297f16f7b30f45b0c754d1467b21" translate="yes" xml:space="preserve">
          <source>@param{ Array | String }haystack</source>
          <target state="translated">@param {배열 | 문자열} 건초 더미</target>
        </trans-unit>
        <trans-unit id="99abd1b6d93127e63e7ca8868ed90486c78219d8" translate="yes" xml:space="preserve">
          <source>@param{ Array }set</source>
          <target state="translated">@param {배열} set</target>
        </trans-unit>
        <trans-unit id="e742cf008016a402b1760c820638cbc12d472ef3" translate="yes" xml:space="preserve">
          <source>@param{ Array }set1</source>
          <target state="translated">@param {배열} set1</target>
        </trans-unit>
        <trans-unit id="57ab7a3b016aefd0108eb9cb3747fade1f997e34" translate="yes" xml:space="preserve">
          <source>@param{ Array }set2</source>
          <target state="translated">@param {배열} set2</target>
        </trans-unit>
        <trans-unit id="6e439c484bf4d1187be0dacee5799665258926c5" translate="yes" xml:space="preserve">
          <source>@param{ Array }subset</source>
          <target state="translated">@param {배열} 서브셋</target>
        </trans-unit>
        <trans-unit id="86683c3cb482867445ccad36bdb4029819effe52" translate="yes" xml:space="preserve">
          <source>@param{ Array }superset</source>
          <target state="translated">@param {배열} 슈퍼 셋</target>
        </trans-unit>
        <trans-unit id="54399ec0abf639687bdf97bdee7e1da78f134d3b" translate="yes" xml:space="preserve">
          <source>@param{ Array }typeA list of allowed types for this assertion</source>
          <target state="translated">@param {Array} type이 어설 션에 허용되는 유형 목록</target>
        </trans-unit>
        <trans-unit id="a04338de7b580026bb5323fd69e5196777e40d27" translate="yes" xml:space="preserve">
          <source>@param{ Array.</source>
          <target state="translated">@param {배열.</target>
        </trans-unit>
        <trans-unit id="c62d83adcec9276b5a77f37953b88827cfe726b1" translate="yes" xml:space="preserve">
          <source>@param{ Array. }list</source>
          <target state="translated">@param {배열. }명부</target>
        </trans-unit>
        <trans-unit id="bbf02e9353516cf0ed8cc6c854a2b094027a1454" translate="yes" xml:space="preserve">
          <source>@param{ Assertion }assertionthe assertion to transfer the flags from</source>
          <target state="translated">@param {Assertion} 어설 션 플래그를 전송할 어설 션</target>
        </trans-unit>
        <trans-unit id="56bb6a6d3a6d48bbeecacb85e7b6bbcb9080cb72" translate="yes" xml:space="preserve">
          <source>@param{ Boolean }colorsFlag to turn on ANSI escape codes to color the output. Default is false (no coloring).</source>
          <target state="translated">@param {Boolean} colorsFlag는 ANSI 이스케이프 코드를 설정하여 출력 색상을 지정합니다. 기본값은 false입니다 (채색 없음).</target>
        </trans-unit>
        <trans-unit id="1ca8ea7c7c39a3be64e3f9e25539a02f81f47c98" translate="yes" xml:space="preserve">
          <source>@param{ Boolean }includeAll</source>
          <target state="translated">@param {부울} includeAll</target>
        </trans-unit>
        <trans-unit id="473617eb22be3d3b8e2563fcb57a6b14e1b78ea6" translate="yes" xml:space="preserve">
          <source>@param{ Boolean }isChainable</source>
          <target state="translated">@param {부울} isChainable</target>
        </trans-unit>
        <trans-unit id="c97646663e5a06dac5a45fcc900c16e43d038e01" translate="yes" xml:space="preserve">
          <source>@param{ Boolean }showHiddenFlag that shows hidden (not enumerable) properties of objects. Default is false.</source>
          <target state="translated">@param {Boolean} showHiddenFlag는 객체의 숨겨진 (열거 불가능한) 속성을 보여줍니다. 기본값은 false입니다.</target>
        </trans-unit>
        <trans-unit id="d5b0905d4eda92382d4a14c9472eb8326c0cb3f9" translate="yes" xml:space="preserve">
          <source>@param{ Constructor }constructor</source>
          <target state="translated">@param {생성자} 생성자</target>
        </trans-unit>
        <trans-unit id="994172288c4ff0cda971986afaadfe1272af3b1d" translate="yes" xml:space="preserve">
          <source>@param{ Error | ErrorConstructor }errorLike</source>
          <target state="translated">@param {오류 | ErrorConstructor} errorLike</target>
        </trans-unit>
        <trans-unit id="7d5a239c3f25945c0f4400aacf5749c3f826936e" translate="yes" xml:space="preserve">
          <source>@param{ Error | ErrorConstructor }errorLikeobject to compare against</source>
          <target state="translated">@param {오류 | ErrorConstructor} 오류와 비교할 객체</target>
        </trans-unit>
        <trans-unit id="7dcf1aac0aeae43ecc8dc1a6d9b9db37b266a72f" translate="yes" xml:space="preserve">
          <source>@param{ Error | String }errorLike</source>
          <target state="translated">@param {오류 | 문자열} errorLike</target>
        </trans-unit>
        <trans-unit id="a88e4ab1440ba733a4b98ab0231e46a75f759510" translate="yes" xml:space="preserve">
          <source>@param{ Error }thrownerror</source>
          <target state="translated">@param {오류} thrownerror</target>
        </trans-unit>
        <trans-unit id="9d11d6fac45ca3d8e73c495d8f3f2d633c43cb43" translate="yes" xml:space="preserve">
          <source>@param{ ErrorConstructor | Error }errorLike</source>
          <target state="translated">@param {ErrorConstructor | 오류} errorLike</target>
        </trans-unit>
        <trans-unit id="d1ab086792f1857b8955c265d006dc64541ad85d" translate="yes" xml:space="preserve">
          <source>@param{ ErrorConstructor }errorLike</source>
          <target state="translated">@param {ErrorConstructor} errorLike</target>
        </trans-unit>
        <trans-unit id="6fd16a2d49055d7dd2ee7275b1ee4a73b18c945c" translate="yes" xml:space="preserve">
          <source>@param{ Function }chainingBehaviorfunction that returns a function to be used for property</source>
          <target state="translated">@param {함수} 속성에 사용될 함수를 반환하는 chainingBehaviorfunction</target>
        </trans-unit>
        <trans-unit id="4c30b185a1bd26e888d070d836058b142eba3c18" translate="yes" xml:space="preserve">
          <source>@param{ Function }chainingBehaviorfunction to be called every time the property is accessed</source>
          <target state="translated">@param {Function} chainingBehaviorfunction 속성에 액세스 할 때마다 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="291850a4d86e22201aeadafa11892e948dd2da9f" translate="yes" xml:space="preserve">
          <source>@param{ Function }constructorFn</source>
          <target state="translated">@param {함수} constructorFn</target>
        </trans-unit>
        <trans-unit id="4381700bf93b0ec3b3f8ad63aab196f24d5e9db6" translate="yes" xml:space="preserve">
          <source>@param{ Function }fn</source>
          <target state="translated">@param {함수} fn</target>
        </trans-unit>
        <trans-unit id="a4ab34ef07148dc450eb726b8c43e2281ef14140" translate="yes" xml:space="preserve">
          <source>@param{ Function }funct</source>
          <target state="translated">@param {함수} 기능</target>
        </trans-unit>
        <trans-unit id="64e7de53c69837616fd01ac94ab05ca2aed935d1" translate="yes" xml:space="preserve">
          <source>@param{ Function }getterfunction that returns a getter function to be used for name</source>
          <target state="translated">@param {함수} 이름에 사용될 게터 함수를 반환하는 getterfunction</target>
        </trans-unit>
        <trans-unit id="d317e3a3ce81c35f8aedebca7eef14f9cc6f5a1b" translate="yes" xml:space="preserve">
          <source>@param{ Function }getterfunction to be used for name</source>
          <target state="translated">@param {함수} 이름에 사용될 getterfunction</target>
        </trans-unit>
        <trans-unit id="9b4565971d4c292b78dade0aee75aca81c7baeb5" translate="yes" xml:space="preserve">
          <source>@param{ Function }matcher</source>
          <target state="translated">@param {함수} 매처</target>
        </trans-unit>
        <trans-unit id="a4252d473a8e34686ffe8718b7f85d66a58a0d7c" translate="yes" xml:space="preserve">
          <source>@param{ Function }methodfunction that returns a function to be used for name</source>
          <target state="translated">@param {함수} 이름에 사용될 함수를 반환하는 methodfunction</target>
        </trans-unit>
        <trans-unit id="638896da60617339aa20ceccd8f71f1a3964edba" translate="yes" xml:space="preserve">
          <source>@param{ Function }methodfunction to be used for `name`, when called</source>
          <target state="translated">@param {함수} 호출 될 때`name`에 사용될 메소드 함수</target>
        </trans-unit>
        <trans-unit id="8b16d271334497bd6f0e21af0cce43bf7a17abb8" translate="yes" xml:space="preserve">
          <source>@param{ Function }methodfunction to be used for name</source>
          <target state="translated">@param {함수} 이름에 사용될 메소드 함수</target>
        </trans-unit>
        <trans-unit id="deb3ca81db26229af2c96e40ff390c00ba476573" translate="yes" xml:space="preserve">
          <source>@param{ Function }modifierfunction</source>
          <target state="translated">@param {함수} modifierfunction</target>
        </trans-unit>
        <trans-unit id="6d0d425d6807eb6a50d233a79861dbf62f726629" translate="yes" xml:space="preserve">
          <source>@param{ Mixed }actual</source>
          <target state="translated">@param {혼합} 실제</target>
        </trans-unit>
        <trans-unit id="13474450d2aa85ab744dfc36999f651a675e85fd" translate="yes" xml:space="preserve">
          <source>@param{ Mixed }expected</source>
          <target state="translated">@param {혼합} 예상</target>
        </trans-unit>
        <trans-unit id="e9c99fe2f08fb4b374954ba0a10d523c2ca6654c" translate="yes" xml:space="preserve">
          <source>@param{ Mixed }expressionto test for truthiness</source>
          <target state="translated">@param {혼합} 진실성 테스트</target>
        </trans-unit>
        <trans-unit id="d6dbd7bc872c5f316f261a7feb731864e5d91b21" translate="yes" xml:space="preserve">
          <source>@param{ Mixed }firstelement to compare</source>
          <target state="translated">@param {Mixed} 첫번째 요소 비교</target>
        </trans-unit>
        <trans-unit id="8e0e404b0e0a0f305bb0088a1e02d238ba5bb001" translate="yes" xml:space="preserve">
          <source>@param{ Mixed }javascriptobject to inspect</source>
          <target state="translated">@param {Mixed} 검사 할 자바 스크립트 객체</target>
        </trans-unit>
        <trans-unit id="ab6c078a8942c16b20d1972e41dcd574c80edbab" translate="yes" xml:space="preserve">
          <source>@param{ Mixed }needle</source>
          <target state="translated">@param {혼합} 바늘</target>
        </trans-unit>
        <trans-unit id="8d1928ce1e87a7bf99b416b23dc9573d30c0c324" translate="yes" xml:space="preserve">
          <source>@param{ Mixed }obj</source>
          <target state="translated">@param {혼합} obj</target>
        </trans-unit>
        <trans-unit id="ea5981b264fbf5ce05b03510736174e8d7250729" translate="yes" xml:space="preserve">
          <source>@param{ Mixed }objconstructed Assertion</source>
          <target state="translated">@param {Mixed} objconstructed 어설 션</target>
        </trans-unit>
        <trans-unit id="dff653ffafaef0b564b68684ae294c22e2d5081f" translate="yes" xml:space="preserve">
          <source>@param{ Mixed }object</source>
          <target state="translated">@param {혼합} 개체</target>
        </trans-unit>
        <trans-unit id="679ce8fa3a320ca0e165be6d859b757fe2fd4e31" translate="yes" xml:space="preserve">
          <source>@param{ Mixed }objectto test</source>
          <target state="translated">@param {혼합} objectto 테스트</target>
        </trans-unit>
        <trans-unit id="49a290f27af8679b18330edb0f71cbc2f76a3fdb" translate="yes" xml:space="preserve">
          <source>@param{ Mixed }secondelement to compare</source>
          <target state="translated">@param {Mixed} 두 번째 요소 비교</target>
        </trans-unit>
        <trans-unit id="d36fbd42f5840a343b488525884c03da7a05e166" translate="yes" xml:space="preserve">
          <source>@param{ Mixed }val</source>
          <target state="translated">@param {혼합} val</target>
        </trans-unit>
        <trans-unit id="4bafc11c947f12a865d0096bdd065a5c0c6d58af" translate="yes" xml:space="preserve">
          <source>@param{ Mixed }val(optional)</source>
          <target state="translated">@param {Mixed} val (선택 사항)</target>
        </trans-unit>
        <trans-unit id="b32e7a24ac3971d38ea58d508758f433165533de" translate="yes" xml:space="preserve">
          <source>@param{ Mixed }val1</source>
          <target state="translated">@param {혼합} val1</target>
        </trans-unit>
        <trans-unit id="fef7a3aa901efdf6b105c633ded797ed7f7faf2a" translate="yes" xml:space="preserve">
          <source>@param{ Mixed }val2</source>
          <target state="translated">@param {혼합} val2</target>
        </trans-unit>
        <trans-unit id="424e974210a62cae88d8edab2a3ebc0429282bd5" translate="yes" xml:space="preserve">
          <source>@param{ Mixed }value</source>
          <target state="translated">@param {혼합} 값</target>
        </trans-unit>
        <trans-unit id="69127a0c5c42b86c7531f9fc76eeff5f2b087d69" translate="yes" xml:space="preserve">
          <source>@param{ Mixed }value(optional)</source>
          <target state="translated">@param {혼합} 값 (선택 사항)</target>
        </trans-unit>
        <trans-unit id="aa88e82a8c8a6c007e7f9d646c7cc7fe9ac50126" translate="yes" xml:space="preserve">
          <source>@param{ Mixed }valueToBeAbove</source>
          <target state="translated">@param {혼합} valueToBeAbove</target>
        </trans-unit>
        <trans-unit id="8e66a64add831a01fd1e27cc433f685690d551de" translate="yes" xml:space="preserve">
          <source>@param{ Mixed }valueToBeAtLeast</source>
          <target state="translated">@param {혼합} valueToBeAtLeast</target>
        </trans-unit>
        <trans-unit id="df722fe67c34c6bb31f186b641e944769c44de5c" translate="yes" xml:space="preserve">
          <source>@param{ Mixed }valueToBeAtMost</source>
          <target state="translated">@param {혼합} valueToBeAtMost</target>
        </trans-unit>
        <trans-unit id="5d334db8f1976a2bd6f3bfa7f3d8314362ef043c" translate="yes" xml:space="preserve">
          <source>@param{ Mixed }valueToBeBelow</source>
          <target state="translated">@param {혼합} valueToBeBelow</target>
        </trans-unit>
        <trans-unit id="5abf87c2ba59ab42ca7321d66a8870bcc2846569" translate="yes" xml:space="preserve">
          <source>@param{ Mixed }valueToCheck</source>
          <target state="translated">@param {혼합} valueToCheck</target>
        </trans-unit>
        <trans-unit id="ddb3cfa89ff2ff2ecde878d75aeb8418b7079df8" translate="yes" xml:space="preserve">
          <source>@param{ Number }actual</source>
          <target state="translated">@param {숫자} 실제</target>
        </trans-unit>
        <trans-unit id="5569db93556640a95a6a904955b286f004c686a2" translate="yes" xml:space="preserve">
          <source>@param{ Number }changeamount (delta)</source>
          <target state="translated">@param {번호} 변경 금액 (델타)</target>
        </trans-unit>
        <trans-unit id="bd7d366e6a1c1c82e674599a1c0245acacdd963b" translate="yes" xml:space="preserve">
          <source>@param{ Number }delta</source>
          <target state="translated">@param {번호} 델타</target>
        </trans-unit>
        <trans-unit id="58d6557f58f1ae76aa3a125acba56cd29cb6c1ca" translate="yes" xml:space="preserve">
          <source>@param{ Number }depthDepth in which to descend in object. Default is 2.</source>
          <target state="translated">@param {Number} depthDepth는 객체에서 내림차순입니다. 기본값은 2입니다.</target>
        </trans-unit>
        <trans-unit id="90444d729e049af18f321fe5f9cafb32a9936b74" translate="yes" xml:space="preserve">
          <source>@param{ Number }expected</source>
          <target state="translated">@param {Number} 예상</target>
        </trans-unit>
        <trans-unit id="699d3bb7a293629b1db1369c6c9622ac3b11d2aa" translate="yes" xml:space="preserve">
          <source>@param{ Number }finishupper bound inclusive</source>
          <target state="translated">@param {Number} 완료 상한 포함</target>
        </trans-unit>
        <trans-unit id="803ea0e76ad62deb146cd97f77cc4e3000692799" translate="yes" xml:space="preserve">
          <source>@param{ Number }length</source>
          <target state="translated">@param {수} 길이</target>
        </trans-unit>
        <trans-unit id="beef2e46fa3fb047fa058029664defe638db2e2d" translate="yes" xml:space="preserve">
          <source>@param{ Number }n</source>
          <target state="translated">@param {번호} n</target>
        </trans-unit>
        <trans-unit id="e88d0e9f4c602159050ae205e3a63c7977bb4d9f" translate="yes" xml:space="preserve">
          <source>@param{ Number }startlower bound inclusive</source>
          <target state="translated">@param {Number} 시작하 한계</target>
        </trans-unit>
        <trans-unit id="adcb9676a3e00f7d33be4c22483076a97fa42647" translate="yes" xml:space="preserve">
          <source>@param{ Number }value</source>
          <target state="translated">@param {숫자} 값</target>
        </trans-unit>
        <trans-unit id="71abadce2d49944bdd75434f792597e732b6eeac" translate="yes" xml:space="preserve">
          <source>@param{ Object | Array | String | Map | Set }target</source>
          <target state="translated">@param {객체 | 배열 | 문자열 | 지도 | } 목표 설정</target>
        </trans-unit>
        <trans-unit id="47e2a325b80e340f8b1240ea99df19f462dacce6" translate="yes" xml:space="preserve">
          <source>@param{ Object }ctxobject to which the method is added</source>
          <target state="translated">@param {Object} 메소드가 추가 된 ctxobject</target>
        </trans-unit>
        <trans-unit id="6a66f2a893f7875f62c014e58152820dab20a2fa" translate="yes" xml:space="preserve">
          <source>@param{ Object }ctxobject to which the property is added</source>
          <target state="translated">@param {Object} 속성이 추가되는 ctxobject</target>
        </trans-unit>
        <trans-unit id="8788e270f0ccaf7b732c808f61b5506fb46f030b" translate="yes" xml:space="preserve">
          <source>@param{ Object }ctxobject whose method / property is to be overwritten</source>
          <target state="translated">@param {Object} ctxobject는 메소드 / 속성을 덮어 씁니다.</target>
        </trans-unit>
        <trans-unit id="29419384fa2df38ddcb2ed5c07c9b3d5f447562e" translate="yes" xml:space="preserve">
          <source>@param{ Object }ctxobject whose method is to be overwritten</source>
          <target state="translated">@param {Object} ctxobject의 메소드를 덮어 씁니다</target>
        </trans-unit>
        <trans-unit id="678cd8f523fd36621e2e46fae24623678753b37e" translate="yes" xml:space="preserve">
          <source>@param{ Object }ctxobject whose property is to be overwritten</source>
          <target state="translated">@param {Object} 속성을 덮어 쓰는 ctxobject</target>
        </trans-unit>
        <trans-unit id="1bf66c776219d4b2883e325b99c2b0cb47782c1f" translate="yes" xml:space="preserve">
          <source>@param{ Object }descriptor_optional_</source>
          <target state="translated">@param {객체} descriptor_optional_</target>
        </trans-unit>
        <trans-unit id="df71cb0252cadb0517245372b83fc0ab0f2ce9bf" translate="yes" xml:space="preserve">
          <source>@param{ Object }haystack</source>
          <target state="translated">@param {객체} haystack</target>
        </trans-unit>
        <trans-unit id="8a905ed9c31df0a4d11afd7d77760ef98a940346" translate="yes" xml:space="preserve">
          <source>@param{ Object }needle</source>
          <target state="translated">@param {객체} 바늘</target>
        </trans-unit>
        <trans-unit id="72ea6426b654cfabf3780789e01a6f0fe5dcfeda" translate="yes" xml:space="preserve">
          <source>@param{ Object }obj</source>
          <target state="translated">@param {객체} obj</target>
        </trans-unit>
        <trans-unit id="2c45fee2b7c7d2b558c8a6bea03f0fa949902e7a" translate="yes" xml:space="preserve">
          <source>@param{ Object }objThe object to print out.</source>
          <target state="translated">@param {Object} obj 인쇄 할 개체입니다.</target>
        </trans-unit>
        <trans-unit id="a109ff51d4a4c5c07799342a25d7f806fab8a198" translate="yes" xml:space="preserve">
          <source>@param{ Object }object</source>
          <target state="translated">@param {객체} 개체</target>
        </trans-unit>
        <trans-unit id="34f37afd4057a7b06b2f0201cf06800b7d074175" translate="yes" xml:space="preserve">
          <source>@param{ Object }object(constructed Assertion)</source>
          <target state="translated">@param {Object} object (구성된 어설 션)</target>
        </trans-unit>
        <trans-unit id="bea388b4174780b45637e028dee43110ec44c589" translate="yes" xml:space="preserve">
          <source>@param{ Object }objectconstructed Assertion</source>
          <target state="translated">@param {Object} 개체로 구성된 어설 션</target>
        </trans-unit>
        <trans-unit id="394fab3c6f85de525dbeb3cb8de4a57007a3359f" translate="yes" xml:space="preserve">
          <source>@param{ Object }objector getter function</source>
          <target state="translated">@param {Object} objector getter 함수</target>
        </trans-unit>
        <trans-unit id="e02557c3888fe3dfb39bd81f0e03e7e405764c3f" translate="yes" xml:space="preserve">
          <source>@param{ Object }objectthe object to transfer the flags to; usually a new assertion</source>
          <target state="translated">@param {Object} object 플래그를 전송할 객체; 일반적으로 새로운 주장</target>
        </trans-unit>
        <trans-unit id="26df4bcc74bc737ebfc4ef78a94d2386e0b57b64" translate="yes" xml:space="preserve">
          <source>@param{ RegExp | String }errMsgMatcher</source>
          <target state="translated">@param {RegExp | 문자열} errMsgMatcher</target>
        </trans-unit>
        <trans-unit id="2989a7a4e27f9dda96f327334d44dba1df01183b" translate="yes" xml:space="preserve">
          <source>@param{ RegExp }re</source>
          <target state="translated">@param {RegExp} re</target>
        </trans-unit>
        <trans-unit id="0c0a5e36a31a6d5e9d31818dbbe33e26a7e390c2" translate="yes" xml:space="preserve">
          <source>@param{ RegExp }regexp</source>
          <target state="translated">@param {RegExp} regexp</target>
        </trans-unit>
        <trans-unit id="f0565980c387eb9a70afb08327b29dba8240bd0e" translate="yes" xml:space="preserve">
          <source>@param{ String | Array | Object }keys</source>
          <target state="translated">@param {문자열 | 배열 | 객체} 키</target>
        </trans-unit>
        <trans-unit id="6785e417d9cf6735b7b8521efadc1d6bb9bf2f14" translate="yes" xml:space="preserve">
          <source>@param{ String | Function }subject</source>
          <target state="translated">@param {문자열 | 기능} 제목</target>
        </trans-unit>
        <trans-unit id="1f07be5feb287cf0701b8bbd49599b8f8053ae37" translate="yes" xml:space="preserve">
          <source>@param{ String | RegExp }errMatcherto look for into the message</source>
          <target state="translated">@param {문자열 | RegExp} errMatcher는 메시지를 찾는다</target>
        </trans-unit>
        <trans-unit id="47a7fc00f58b7de03474ca3944b537a188767902" translate="yes" xml:space="preserve">
          <source>@param{ String | RegExp }errMsgMatchererror message</source>
          <target state="translated">@param {문자열 | RegExp} errMsgMatchererror 메시지</target>
        </trans-unit>
        <trans-unit id="ddad3cd0e7fdbf6a83711e2b6e804178ac51f8ca" translate="yes" xml:space="preserve">
          <source>@param{ String | Symbol }name</source>
          <target state="translated">@param {문자열 | 기호} 이름</target>
        </trans-unit>
        <trans-unit id="1e0368a5afcac3d7c5feae7f4fea056ab3ab50a6" translate="yes" xml:space="preserve">
          <source>@param{ String }assertionName</source>
          <target state="translated">@param {문자열} 어설 션 이름</target>
        </trans-unit>
        <trans-unit id="7133a8e04bada2e4ff4cd0e8d5db31d4ba6ce1bb" translate="yes" xml:space="preserve">
          <source>@param{ String }key</source>
          <target state="translated">@param {문자열} 키</target>
        </trans-unit>
        <trans-unit id="a89907540200df25563e6528bd95d4e7e5a2d538" translate="yes" xml:space="preserve">
          <source>@param{ String }message</source>
          <target state="translated">@param {문자열} 메시지</target>
        </trans-unit>
        <trans-unit id="b7c0136311cb4ed409cfb4b92d63e6e0675b7005" translate="yes" xml:space="preserve">
          <source>@param{ String }message_optional_</source>
          <target state="translated">@param {문자열} message_optional_</target>
        </trans-unit>
        <trans-unit id="4014f8df79ae29a5d933e9ee4e7a77ca780eda29" translate="yes" xml:space="preserve">
          <source>@param{ String }messageto display on error</source>
          <target state="translated">@param {String} 메시지 오류시 표시</target>
        </trans-unit>
        <trans-unit id="0ba6a2f635b84958fd54e71af7f068341c2ac278" translate="yes" xml:space="preserve">
          <source>@param{ String }method</source>
          <target state="translated">@param {문자열} 방법</target>
        </trans-unit>
        <trans-unit id="cbb8e1ff34a3aa6e267a1fb2e6516ade504e94d0" translate="yes" xml:space="preserve">
          <source>@param{ String }msg_optional_</source>
          <target state="translated">@param {문자열} msg_optional_</target>
        </trans-unit>
        <trans-unit id="4ea3b864ab22e7f52e869240ffd99fd13ef44bc6" translate="yes" xml:space="preserve">
          <source>@param{ String }name</source>
          <target state="translated">@param {문자열} 이름</target>
        </trans-unit>
        <trans-unit id="1c6fe3f17c73e13ce450067e2618f62ce119a417" translate="yes" xml:space="preserve">
          <source>@param{ String }nameof method / property to overwrite</source>
          <target state="translated">@param {String} 덮어 쓸 메소드 / 속성 이름</target>
        </trans-unit>
        <trans-unit id="a3e04271c8af2d85e6500669ce98dd8c5b610dc5" translate="yes" xml:space="preserve">
          <source>@param{ String }nameof method to add</source>
          <target state="translated">@param {String} 추가 할 메소드 이름</target>
        </trans-unit>
        <trans-unit id="5bf579bc0a85b11cd36c0e039850179f58b1b854" translate="yes" xml:space="preserve">
          <source>@param{ String }nameof method to overwrite</source>
          <target state="translated">@param {String} 덮어 쓸 메소드 이름</target>
        </trans-unit>
        <trans-unit id="5b0b22388911b1557600cd34fd122ee5fef07be5" translate="yes" xml:space="preserve">
          <source>@param{ String }nameof property to add</source>
          <target state="translated">@param {String} 추가 할 속성 이름</target>
        </trans-unit>
        <trans-unit id="d165202b0dc199fa7410c3668900a0a8483b99ca" translate="yes" xml:space="preserve">
          <source>@param{ String }nameof property to overwrite</source>
          <target state="translated">@param {String} 덮어 쓸 속성 이름</target>
        </trans-unit>
        <trans-unit id="f2bc0ac23bdd6c71afe5689e64fa1733a312fb45" translate="yes" xml:space="preserve">
          <source>@param{ String }nonChainableMethodName</source>
          <target state="translated">@param {문자열} nonChainableMethodName</target>
        </trans-unit>
        <trans-unit id="c3277e783035cb1f81d10e3ca6c502eb8e711181" translate="yes" xml:space="preserve">
          <source>@param{ String }operator</source>
          <target state="translated">@param {문자열} 연산자</target>
        </trans-unit>
        <trans-unit id="b1f610354acd45c9cdfe6129cbbe1fa799d6ebc7" translate="yes" xml:space="preserve">
          <source>@param{ String }path</source>
          <target state="translated">@param {문자열} 경로</target>
        </trans-unit>
        <trans-unit id="c7db0f48b0752608f6586e0acf3f7d37dc25bd3c" translate="yes" xml:space="preserve">
          <source>@param{ String }property</source>
          <target state="translated">@param {문자열} 속성</target>
        </trans-unit>
        <trans-unit id="7f90e2341f5c5aaeaa9c58da84a93d139ab2adda" translate="yes" xml:space="preserve">
          <source>@param{ String }propertyname _optional_</source>
          <target state="translated">@param {문자열} propertyname _optional_</target>
        </trans-unit>
        <trans-unit id="97e99a5b4bca9353353ffead6f6bce9e5f6bb961" translate="yes" xml:space="preserve">
          <source>@param{ String }propname _optional_</source>
          <target state="translated">@param {문자열} propname _optional_</target>
        </trans-unit>
        <trans-unit id="4dd5bb3990a8c87aa249b50c18490ba379b4c1f3" translate="yes" xml:space="preserve">
          <source>@param{ String }str</source>
          <target state="translated">@param {문자열} str</target>
        </trans-unit>
        <trans-unit id="8de629191ae742ca2d488a6a4de69f6bf0af883e" translate="yes" xml:space="preserve">
          <source>@param{ String }subject</source>
          <target state="translated">@param {문자열} 제목</target>
        </trans-unit>
        <trans-unit id="e2603ba0f0f00a6e5fbd1105cefa36156ee2beb6" translate="yes" xml:space="preserve">
          <source>@param{ String }type</source>
          <target state="translated">@param {문자열} 유형</target>
        </trans-unit>
        <trans-unit id="77ab372bc51a21ca6c530944c7ee7077919437e2" translate="yes" xml:space="preserve">
          <source>@param{ String }typeofname</source>
          <target state="translated">@param {문자열} typeofname</target>
        </trans-unit>
        <trans-unit id="102b7a85f0233abd51defbddc6faade5d4c3fd1c" translate="yes" xml:space="preserve">
          <source>@param{ }inList</source>
          <target state="translated">@param {} 목록에</target>
        </trans-unit>
        <trans-unit id="7d67c2f2c6c14d342620e54add8cf070f85ef3cb" translate="yes" xml:space="preserve">
          <source>@see&lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types&quot;&gt;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types&lt;/a&gt;</source>
          <target state="translated">@see&lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types&quot;&gt;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a76487643a63352a6de42ded0fd5f7441c8e133a" translate="yes" xml:space="preserve">
          <source>A custom error message can be given as the second argument to &lt;code&gt;expect&lt;/code&gt;.</source>
          <target state="translated">사용자 지정 오류 메시지가 두 번째 인수로 제공 할 수 있습니다 &lt;code&gt;expect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b276f94cd8d0e74a21de6e5939b8c10ca9a975d6" translate="yes" xml:space="preserve">
          <source>API Reference</source>
          <target state="translated">API 참조</target>
        </trans-unit>
        <trans-unit id="81cb24d662d8d67e75379a6e323043b42cdde754" translate="yes" xml:space="preserve">
          <source>Accessing Utilities</source>
          <target state="translated">유틸리티에 액세스</target>
        </trans-unit>
        <trans-unit id="dcb7cb1519ce4127ded1c67887f5bb7f162c5db8" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.deep&lt;/code&gt; earlier in the chain to use deep equality instead. See the &lt;code&gt;deep-eql&lt;/code&gt; project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.</source>
          <target state="translated">대신 체인에 &lt;code&gt;.deep&lt;/code&gt; 을 추가 하여 깊은 평등을 대신 사용하십시오. 딥 평등 알고리즘에 대한 자세한 내용은 &lt;code&gt;deep-eql&lt;/code&gt; 프로젝트 페이지 (https://github.com/chaijs/deep-eql)를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="47095b60554e2b952ce961121c5504c9930dc61e" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.include&lt;/code&gt; earlier in the chain to require that the target&amp;rsquo;s keys be a superset of the expected keys, rather than identical sets.</source>
          <target state="translated">체인의 앞부분에 &lt;code&gt;.include&lt;/code&gt; 를 추가 하여 대상 키가 동일한 세트가 아닌 예상 키의 슈퍼 세트가되도록합니다.</target>
        </trans-unit>
        <trans-unit id="53b22b6d67bfca071a3c9db900329eeadeab0d31" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.itself&lt;/code&gt; earlier in the chain to force &lt;code&gt;.respondTo&lt;/code&gt; to treat the target as a non-function object, even if it&amp;rsquo;s a function. Thus, it asserts that the target has a method with the given name &lt;code&gt;method&lt;/code&gt;, rather than asserting that the target&amp;rsquo;s &lt;code&gt;prototype&lt;/code&gt; property has a method with the given name &lt;code&gt;method&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.itself&lt;/code&gt; 가 대상이 기능 이 &lt;code&gt;.respondTo&lt;/code&gt; 대상을 기능이없는 객체로 취급 하도록하려면 체인의 앞에 .itself를 추가하십시오 . 따라서, 대상이 주어진 이름을 가진 방법이 주장 &lt;code&gt;method&lt;/code&gt; 오히려 대상의 것을 주장하는 것보다, &lt;code&gt;prototype&lt;/code&gt; 속성이 주어진 이름을 가진 방법이 &lt;code&gt;method&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="12a11ee3a0e652270f422fb8d9ab20ef3de1b0a8" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.lengthOf&lt;/code&gt; earlier in the chain to assert that the target&amp;rsquo;s &lt;code&gt;length&lt;/code&gt; or &lt;code&gt;size&lt;/code&gt; is greater than or equal to the given number &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="translated">체인의 &lt;code&gt;.lengthOf&lt;/code&gt; 추가 하여 대상의 &lt;code&gt;length&lt;/code&gt; 또는 &lt;code&gt;size&lt;/code&gt; 가 주어진 수 &lt;code&gt;n&lt;/code&gt; 이상인지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="1a5576521f78c033e7b90eba9347a3a1399d7ad8" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.lengthOf&lt;/code&gt; earlier in the chain to assert that the target&amp;rsquo;s &lt;code&gt;length&lt;/code&gt; or &lt;code&gt;size&lt;/code&gt; is greater than or equal to the given number &lt;code&gt;start&lt;/code&gt;, and less than or equal to the given number &lt;code&gt;finish&lt;/code&gt;.</source>
          <target state="translated">체인의 &lt;code&gt;.lengthOf&lt;/code&gt; 추가 하여 대상의 &lt;code&gt;length&lt;/code&gt; 또는 &lt;code&gt;size&lt;/code&gt; 가 주어진 숫자 &lt;code&gt;start&lt;/code&gt; 이상이고 주어진 숫자 &lt;code&gt;finish&lt;/code&gt; 이하인지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="40a23a03e64a1f60cc7451b8d008fbb6e72f54c2" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.lengthOf&lt;/code&gt; earlier in the chain to assert that the target&amp;rsquo;s &lt;code&gt;length&lt;/code&gt; or &lt;code&gt;size&lt;/code&gt; is greater than the given number &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="translated">체인의 초기에 &lt;code&gt;.lengthOf&lt;/code&gt; 를 추가 하여 대상의 &lt;code&gt;length&lt;/code&gt; 또는 &lt;code&gt;size&lt;/code&gt; 가 주어진 수 &lt;code&gt;n&lt;/code&gt; 보다 큰지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="ecc923df455bcdab092d67deefe3f63feceedd7d" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.lengthOf&lt;/code&gt; earlier in the chain to assert that the target&amp;rsquo;s &lt;code&gt;length&lt;/code&gt; or &lt;code&gt;size&lt;/code&gt; is less than or equal to the given number &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="translated">체인의 초기에 &lt;code&gt;.lengthOf&lt;/code&gt; 를 추가 하여 대상의 &lt;code&gt;length&lt;/code&gt; 또는 &lt;code&gt;size&lt;/code&gt; 가 주어진 수 &lt;code&gt;n&lt;/code&gt; 이하인지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="ea0c2b8e5ef8e8717f6d8ee9d28cb9efb8f714f2" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.lengthOf&lt;/code&gt; earlier in the chain to assert that the target&amp;rsquo;s &lt;code&gt;length&lt;/code&gt; or &lt;code&gt;size&lt;/code&gt; is less than the given number &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="translated">체인의 &lt;code&gt;.lengthOf&lt;/code&gt; 추가 하여 대상의 &lt;code&gt;length&lt;/code&gt; 또는 &lt;code&gt;size&lt;/code&gt; 가 주어진 수 &lt;code&gt;n&lt;/code&gt; 보다 작도록합니다 .</target>
        </trans-unit>
        <trans-unit id="01527a2f8fb78d4d4b2b5224cd159bcafd6049b5" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.nested&lt;/code&gt; earlier in the chain to enable dot- and bracket-notation when referencing nested properties.</source>
          <target state="translated">중첩 된 속성을 참조 할 때 점과 괄호 표기법을 사용하려면 체인의 &lt;code&gt;.nested&lt;/code&gt; 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="b90da70a681c38e0c4c7a0723e7e8a55f355435f" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.NaN&lt;/code&gt;. However, it&amp;rsquo;s often best to assert that the target is equal to its expected value, rather than not equal to &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.NaN&lt;/code&gt; 을 . 그러나 대상이 &lt;code&gt;NaN&lt;/code&gt; 과 같지 않고 예상 값과 동일하다고 주장하는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="3bbbc799900921160fa651064d7e41b82f620d53" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.a&lt;/code&gt;. However, it&amp;rsquo;s often best to assert that the target is the expected type, rather than asserting that it isn&amp;rsquo;t one of many unexpected types.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.a&lt;/code&gt; . 그러나 대상이 예상치 못한 유형이 아니라고 주장하는 대신 대상이 예상 유형이라고 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="70671071283d3adb4542a16c8cd7098d9db0400a" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.above&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.above&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="91e8484d9c6df921477dc1e861d3a56003a3b9f9" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.arguments&lt;/code&gt;. However, it&amp;rsquo;s often best to assert which type the target is expected to be, rather than asserting that its not an &lt;code&gt;arguments&lt;/code&gt; object.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.arguments&lt;/code&gt; . 그러나 &lt;code&gt;arguments&lt;/code&gt; 오브젝트 가 아니라고 주장하기보다는 대상이 어떤 유형이 될 것으로 예상되는지를 주장하는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="e44396bb02a13e8451706f9dbcc4ad2f69f3a777" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.below&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.below&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="904ea60acc1d792b7942579a51d80623fe4e5828" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.by&lt;/code&gt;. However, it&amp;rsquo;s often best to assert that the subject changed by its expected delta, rather than asserting that it didn&amp;rsquo;t change by one of countless unexpected deltas.</source>
          <target state="translated">&lt;code&gt;.by&lt;/code&gt; 를 무효화하려면 체인에 &lt;code&gt;.not&lt;/code&gt; 을 미리 추가하십시오 . 그러나 예상치 못한 델타 중 하나에 의해 변하지 않았다고 주장하기보다는 예상 델타에 의해 변경되었다고 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="601c73556df66b075f6e1bfc379f9bbb20afda20" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.change&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.change&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2056c92102045a8a78d9b6615691436843cec49e" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.closeTo&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.closeTo&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="b8b629a19c9454a04b920333bfb6e2bb17c584b0" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.decrease&lt;/code&gt;. However, it&amp;rsquo;s dangerous to do so. The problem is that it creates uncertain expectations by asserting that the subject either increases, or that it stays the same. It&amp;rsquo;s often best to identify the exact output that&amp;rsquo;s expected, and then write an assertion that only accepts that exact output.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.decrease&lt;/code&gt; . 그러나 그렇게하는 것은 위험합니다. 문제는 피험자가 증가하거나 동일하게 유지한다고 주장함으로써 불확실한 기대를 불러 일으킨다는 것입니다. 예상되는 정확한 출력을 식별 한 다음 정확한 출력 만 허용하는 어설 션을 작성하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="8457b09e7f03ef52481dd9e375770db089689cd2" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.empty&lt;/code&gt;. However, it&amp;rsquo;s often best to assert that the target contains its expected number of values, rather than asserting that it&amp;rsquo;s not empty.</source>
          <target state="translated">체인에 &lt;code&gt;.not&lt;/code&gt; 을 추가 하여 &lt;code&gt;.empty&lt;/code&gt; 를 무효화하십시오 . 그러나 대상이 비어 ​​있지 않다고 주장하기보다는 대상에 예상되는 수의 값이 포함되어 있다고 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="5c7a746f76d5368218d9d9176d41396d7dcdb879" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.eql&lt;/code&gt;. However, it&amp;rsquo;s often best to assert that the target is deeply equal to its expected value, rather than not deeply equal to one of countless unexpected values.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.eql&lt;/code&gt; . 그러나 목표가 셀 수없는 예기치 않은 값 중 하나와 크게 같지 않고 예상 값과 깊이 동일하다고 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="1f53e480f3e42c5a427685336cb393ed703fb595" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.equal&lt;/code&gt;. However, it&amp;rsquo;s often best to assert that the target is equal to its expected value, rather than not equal to one of countless unexpected values.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.equal&lt;/code&gt; . 그러나 목표가 셀 수없는 예기치 않은 값 중 하나와 같지 않고 예상 값과 동일하다고 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="8cc02a2916ab028258ac040acb3096c427605c6a" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.exist&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.exist&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="79b0f6de64e5bff103359a66751dfdb527d1d6e5" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.extensible&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.extensible&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="421bfaadd617973db974aafa4246a33f93ab022e" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.false&lt;/code&gt;. However, it&amp;rsquo;s often best to assert that the target is equal to its expected value, rather than not equal to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.false&lt;/code&gt; . 그러나 대상이 &lt;code&gt;false&lt;/code&gt; 와 같지 않고 예상 값과 동일하다고 주장하는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="952a527b4dae7949753c710c4bb38039f1062f9d" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.finite&lt;/code&gt;. However, it&amp;rsquo;s dangerous to do so. The problem is that it creates uncertain expectations by asserting that the subject either isn&amp;rsquo;t a number, or that it&amp;rsquo;s &lt;code&gt;NaN&lt;/code&gt;, or that it&amp;rsquo;s positive &lt;code&gt;Infinity&lt;/code&gt;, or that it&amp;rsquo;s negative &lt;code&gt;Infinity&lt;/code&gt;. It&amp;rsquo;s often best to identify the exact output that&amp;rsquo;s expected, and then write an assertion that only accepts that exact output.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.finite&lt;/code&gt; . 그러나 그렇게하는 것은 위험합니다. 문제는 주제가 숫자가 아니거나 &lt;code&gt;NaN&lt;/code&gt; 이거나 양의 &lt;code&gt;Infinity&lt;/code&gt; 이거나 음의 &lt;code&gt;Infinity&lt;/code&gt; 라고 주장함으로써 불확실한 기대를 창출 한다는 것 입니다. 예상되는 정확한 출력을 식별 한 다음 정확한 출력 만 허용하는 어설 션을 작성하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="14b6f93ee32c26da795a1ec8f0771a2288f21d21" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.frozen&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.frozen&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e84215c7597eb5de2e2fa3422626e5c779a96855" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.include&lt;/code&gt;.</source>
          <target state="translated">체인에 &lt;code&gt;.not&lt;/code&gt; 을 추가 하여 &lt;code&gt;.include&lt;/code&gt; 를 무효화하십시오 .</target>
        </trans-unit>
        <trans-unit id="26d975771e762f8456424257520b025fbad1399b" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.increase&lt;/code&gt;. However, it&amp;rsquo;s dangerous to do so. The problem is that it creates uncertain expectations by asserting that the subject either decreases, or that it stays the same. It&amp;rsquo;s often best to identify the exact output that&amp;rsquo;s expected, and then write an assertion that only accepts that exact output.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.increase&lt;/code&gt; . 그러나 그렇게하는 것은 위험합니다. 문제는 피험자가 감소하거나 동일하게 유지한다고 주장함으로써 불확실한 기대를 불러 일으킨다는 것입니다. 예상되는 정확한 출력을 식별 한 다음 정확한 출력 만 허용하는 어설 션을 작성하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="d405837f00092c9d5ed65a7b092714963d2b66cd" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.instanceof&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.instanceof&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1b22e1573c3edf49ddd0d6e79b19f2382031b4d9" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.least&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.least&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a92896789f88d18717b61bbe2ffc4b0d0934033f" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.lengthOf&lt;/code&gt;. However, it&amp;rsquo;s often best to assert that the target&amp;rsquo;s &lt;code&gt;length&lt;/code&gt; property is equal to its expected value, rather than not equal to one of many unexpected values.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.lengthOf&lt;/code&gt; . 그러나 대상의 &lt;code&gt;length&lt;/code&gt; 속성이 예상치 않은 많은 값 중 하나와 같지 않고 예상 값과 동일하다고 주장하는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="79642c52bed2a416d7e04467a1147155cad13b66" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.match&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.match&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8f5ea0cf1535193b445581295bf926d802a84dae" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.members&lt;/code&gt;. However, it&amp;rsquo;s dangerous to do so. The problem is that it creates uncertain expectations by asserting that the target array doesn&amp;rsquo;t have all of the same members as the given array &lt;code&gt;set&lt;/code&gt; but may or may not have some of them. It&amp;rsquo;s often best to identify the exact output that&amp;rsquo;s expected, and then write an assertion that only accepts that exact output.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.members&lt;/code&gt; . 그러나 그렇게하는 것은 위험합니다. 문제는 대상 배열에 지정된 배열 &lt;code&gt;set&lt;/code&gt; 동일한 구성원이 모두 없지만 일부가있을 수도 있고 없을 수도 있다고 주장함으로써 불확실한 기대치를 창출한다는 것입니다. 예상되는 정확한 출력을 식별 한 다음 정확한 출력 만 허용하는 어설 션을 작성하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="1573563d6052eec04aad74dca4e735dfda18413c" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.most&lt;/code&gt;.</source>
          <target state="translated">체인에 &lt;code&gt;.not&lt;/code&gt; 을 추가 하여 &lt;code&gt;.most&lt;/code&gt; 를 부정하십시오 .</target>
        </trans-unit>
        <trans-unit id="a28e525398823cc5d295d37e40b684e345ce718d" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.null&lt;/code&gt;. However, it&amp;rsquo;s often best to assert that the target is equal to its expected value, rather than not equal to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.null&lt;/code&gt; . 그러나 대상이 &lt;code&gt;null&lt;/code&gt; 과 같지 않고 예상 값과 동일하다고 주장하는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="7dedb5fa750e4afc0271f78fbd3152ab83daed02" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.ok&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.ok&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="405db9d012f147ac7f0586c646e993f54f82cf8a" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.oneOf&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.oneOf&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="29a43379b4c257087ea60c1579e83e11e50ac168" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.ownPropertyDescriptor&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.ownPropertyDescriptor&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8c77c60db051e86d0c30f0e16b235fda69dfc25a" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.property&lt;/code&gt;.</source>
          <target state="translated">체인에 &lt;code&gt;.not&lt;/code&gt; 을 추가 하여 &lt;code&gt;.property&lt;/code&gt; 를 무효화하십시오 .</target>
        </trans-unit>
        <trans-unit id="00bf5038aa96e4972d8ceafa424374ec9a90fb9e" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.respondTo&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.respondTo&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="f9a6b1d4afc1eb6b65dbb8eb01498205cbe79245" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.satisfy&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.satisfy&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ce33be8d6ff8e7e5fa76eb4b6b67de9edc4d801b" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.sealed&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 체인에 이전하는 것은 부정 &lt;code&gt;.sealed&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="66e16a521e49cd125f2c8bf34f06ef188c089a88" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.string&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.string&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4b4ef9731a2512802a54710f91cfa31deeeeebf2" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.throw&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.throw&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="740ad4850abd01b56aeb64b24a7b30c898b4f2ae" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.true&lt;/code&gt;. However, it&amp;rsquo;s often best to assert that the target is equal to its expected value, rather than not equal to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.true&lt;/code&gt; . 그러나 대상이 &lt;code&gt;true&lt;/code&gt; 가 아닌 예상 값과 동일하다고 주장하는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="c21736110841bf0595d210cf30be1db5a6db987a" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.undefined&lt;/code&gt;. However, it&amp;rsquo;s often best to assert that the target is equal to its expected value, rather than not equal to &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 체인에 이전하는 것은 부정 &lt;code&gt;.undefined&lt;/code&gt; . 그러나 대상이 &lt;code&gt;undefined&lt;/code&gt; 와 같지 않고 예상 값과 동일하다고 주장하는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="a235f6693aaf36362465c88eebb0f1a56584961f" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.within&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.within&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f7d170b7d5ed8211272a26adae5934f359ef02fc" translate="yes" xml:space="preserve">
          <source>Adding Language Chains</source>
          <target state="translated">언어 체인 추가</target>
        </trans-unit>
        <trans-unit id="d6826f5013f3e45b0fcdd72f0ca068fb2f2dd364" translate="yes" xml:space="preserve">
          <source>Adding Methods</source>
          <target state="translated">메소드 추가</target>
        </trans-unit>
        <trans-unit id="d87cfdd8de48ce385fe652926751a5813a9f582b" translate="yes" xml:space="preserve">
          <source>Adding Properties</source>
          <target state="translated">속성 추가</target>
        </trans-unit>
        <trans-unit id="165c0632939ea10341152162d3d6870b619b4728" translate="yes" xml:space="preserve">
          <source>Adds a method to an object, such that the method can also be chained.</source>
          <target state="translated">메소드를 체인화 할 수 있도록 메소드를 오브젝트에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="2b07a194cb92b04fe3c7a10076ba5c35f171b2e9" translate="yes" xml:space="preserve">
          <source>Adds a method to the prototype of an object.</source>
          <target state="translated">객체의 프로토 타입에 메소드를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="567fe9b28e10d4d5b560f07fbcb4cd23898f9325" translate="yes" xml:space="preserve">
          <source>Adds a property to the prototype of an object.</source>
          <target state="translated">객체의 프로토 타입에 속성을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="3e75f3f36aee539f67d52c3e50a52ae98c844b12" translate="yes" xml:space="preserve">
          <source>All calls to &lt;code&gt;assert&lt;/code&gt; are synchronous, so if the first one fails the &lt;code&gt;AssertionError&lt;/code&gt; is thrown and the second one will not be reached. It is up to the test runner to interpret the message and handle display of any failed assertions.</source>
          <target state="translated">&lt;code&gt;assert&lt;/code&gt; 에 대한 모든 호출 은 동기식이므로 첫 번째 호출이 실패하면 &lt;code&gt;AssertionError&lt;/code&gt; 가 발생하고 두 번째 호출에 도달하지 않습니다. 메시지를 해석하고 실패한 어설 션의 표시를 처리하는 것은 테스트 실행자에게 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="0f29af3e5fa8c1190edd712b2a33bf76ab898554" translate="yes" xml:space="preserve">
          <source>All chain extension utilities are provided both as part of the &lt;code&gt;utils&lt;/code&gt; object and directly on the Assertion constructor. For the rest of this document, however, we will be calling the methods directly from &lt;code&gt;Assertion&lt;/code&gt;.</source>
          <target state="translated">모든 체인 확장 유틸리티는 &lt;code&gt;utils&lt;/code&gt; 객체의 일부로 그리고 Assertion 생성자에서 직접 제공됩니다. 그러나이 문서의 나머지 부분에서는 &lt;code&gt;Assertion&lt;/code&gt; 에서 직접 메서드를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="13dc01975c8808abc6c476c9b96fde1d9ea610ec" translate="yes" xml:space="preserve">
          <source>An Appropriate Example</source>
          <target state="translated">적절한 예</target>
        </trans-unit>
        <trans-unit id="03468b752e716b807ba4bcf5da9cd8e75f1b32b2" translate="yes" xml:space="preserve">
          <source>And, for our actual test: &lt;code&gt;test/person.js&lt;/code&gt;</source>
          <target state="translated">실제 테스트에서는 &lt;code&gt;test/person.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="efc88b89b9298db487c4c519a5c700aa87171115" translate="yes" xml:space="preserve">
          <source>Another common mistake is to provide an object method (or any stand-alone function that relies on &lt;code&gt;this&lt;/code&gt;) as the target of the assertion. Doing so is problematic because the &lt;code&gt;this&lt;/code&gt; context will be lost when the function is invoked by &lt;code&gt;.throw&lt;/code&gt;; there&amp;rsquo;s no way for it to know what &lt;code&gt;this&lt;/code&gt; is supposed to be. There are two ways around this problem. One solution is to wrap the method or function call inside of another function. Another solution is to use &lt;code&gt;bind&lt;/code&gt;.</source>
          <target state="translated">또 다른 일반적인 실수는 어설 션의 대상으로 오브젝트 메소드 (또는 &lt;code&gt;this&lt;/code&gt; 의존하는 독립형 함수 )를 제공하는 것입니다. &lt;code&gt;.throw&lt;/code&gt; 에 의해 함수가 호출 될 &lt;code&gt;this&lt;/code&gt; 컨텍스트가 손실 되므로 문제 가됩니다 . 이것이 무엇인지 알 방법 &lt;code&gt;this&lt;/code&gt; 없습니다. 이 문제를 해결하는 데는 두 가지 방법이 있습니다. 한 가지 해결책은 메소드 또는 함수 호출을 다른 함수 안에 래핑하는 것입니다. 또 다른 해결책은 &lt;code&gt;bind&lt;/code&gt; 를 사용 하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="169b86e044747c4220ffce8f5bb758d6889648d3" translate="yes" xml:space="preserve">
          <source>As you can see from the above example, Chai can accept template tags to dynamically compose the error message. When used, these template tags will be replaced with a stringified replacement of the object in question. There are three template tags available.</source>
          <target state="translated">위의 예에서 볼 수 있듯이 Chai는 템플릿 태그를 수락하여 오류 메시지를 동적으로 작성할 수 있습니다. 이 템플릿 태그를 사용하면 해당 개체를 문자열로 대체하여 대체합니다. 사용 가능한 템플릿 태그는 세 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="f88c6084b6b40a536f0e4e96754847e02e6be777" translate="yes" xml:space="preserve">
          <source>As you can see, the main difference in overwriting is that the first function passes just one argument of &lt;code&gt;_super&lt;/code&gt;. This is the function that originally existed, and you should be sure to call that if your criteria doesn&amp;rsquo;t match. Secondly, you will notice that we immediately return a new function that will serve as the actual assertion.</source>
          <target state="translated">보다시피 덮어 쓰기의 주요 차이점은 첫 번째 함수는 &lt;code&gt;_super&lt;/code&gt; 의 인수 하나만 전달 한다는 것 입니다. 이것은 원래 존재했던 기능이므로 기준이 일치하지 않으면이를 호출해야합니다. 둘째, 실제 어설 션으로 사용할 새 함수를 즉시 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4141add45a26459c4bd39909388482311f6fe29a" translate="yes" xml:space="preserve">
          <source>Assert</source>
          <target state="translated">Assert</target>
        </trans-unit>
        <trans-unit id="aeec43ba4bf9e8e983bbd80981a87fca6c083b0f" translate="yes" xml:space="preserve">
          <source>Assert that &lt;code&gt;actual&lt;/code&gt; is not deeply equal to &lt;code&gt;expected&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;actual&lt;/code&gt; 가 &lt;code&gt;expected&lt;/code&gt; 과 크게 같지 않다고 주장하십시오 .</target>
        </trans-unit>
        <trans-unit id="48075c7745848f6b5ffba4fe477e11aad495df4d" translate="yes" xml:space="preserve">
          <source>Assertion Styles</source>
          <target state="translated">어설 션 스타일</target>
        </trans-unit>
        <trans-unit id="db40faa3fc71c81d74039162f8a281ee0e0b2496" translate="yes" xml:space="preserve">
          <source>Asserts &lt;code&gt;value&lt;/code&gt; is not an instance of &lt;code&gt;constructor&lt;/code&gt;.</source>
          <target state="translated">Asserts &lt;code&gt;value&lt;/code&gt; 는 &lt;code&gt;constructor&lt;/code&gt; 의 인스턴스가 아닙니다 .</target>
        </trans-unit>
        <trans-unit id="af04eb2e815a26ed3e03af0b01ed1b07c1cbf496" translate="yes" xml:space="preserve">
          <source>Asserts &lt;code&gt;valueToCheck&lt;/code&gt; is greater than or equal to (&amp;gt;=) &lt;code&gt;valueToBeAtLeast&lt;/code&gt;.</source>
          <target state="translated">어서 &lt;code&gt;valueToCheck&lt;/code&gt; 이 보다 크거나 같음 (&amp;gt; =)이다 &lt;code&gt;valueToBeAtLeast&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d82368ac24952ab7116394c7d5700563d1b92cd7" translate="yes" xml:space="preserve">
          <source>Asserts &lt;code&gt;valueToCheck&lt;/code&gt; is less than or equal to (&amp;lt;=) &lt;code&gt;valueToBeAtMost&lt;/code&gt;.</source>
          <target state="translated">어서 &lt;code&gt;valueToCheck&lt;/code&gt; 은 (&amp;lt;=)로 같거나 작 &lt;code&gt;valueToBeAtMost&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="36f821e930aa7d96c4a3a94242a6fbf977ed961a" translate="yes" xml:space="preserve">
          <source>Asserts &lt;code&gt;valueToCheck&lt;/code&gt; is strictly greater than (&amp;gt;) &lt;code&gt;valueToBeAbove&lt;/code&gt;.</source>
          <target state="translated">어서 &lt;code&gt;valueToCheck&lt;/code&gt; 는 (&amp;gt;)보다 확실히 크다 &lt;code&gt;valueToBeAbove&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="09dd1f9c4a61f09a37751997fb9ffdf7d2b0455f" translate="yes" xml:space="preserve">
          <source>Asserts &lt;code&gt;valueToCheck&lt;/code&gt; is strictly less than (&amp;lt;) &lt;code&gt;valueToBeBelow&lt;/code&gt;.</source>
          <target state="translated">어서 &lt;code&gt;valueToCheck&lt;/code&gt; 은 (&amp;lt;)보다 확실히 작다 &lt;code&gt;valueToBeBelow&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d9cf2977cc01b3a45869e194e6e9ce3d811b6706" translate="yes" xml:space="preserve">
          <source>Asserts if value is not a false value, and throws if it is a true value. This is added to allow for chai to be a drop-in replacement for Node&amp;rsquo;s assert class.</source>
          <target state="translated">value가 false가 아닌지 확인하고 true 인 경우 발생합니다. 이는 chai가 Node의 어설트 클래스를 대체 할 수 있도록 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="1895db6157eef9345fd63aa30a3e6bf5016ef243" translate="yes" xml:space="preserve">
          <source>Asserts non-strict equality (&lt;code&gt;==&lt;/code&gt;) of &lt;code&gt;actual&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;actual&lt;/code&gt; 및 &lt;code&gt;expected&lt;/code&gt; 의 비 균등 평등 ( &lt;code&gt;==&lt;/code&gt; )을 확인 합니다.</target>
        </trans-unit>
        <trans-unit id="c0f6462274b72991bf5c9ab659e1cd8d7306bff4" translate="yes" xml:space="preserve">
          <source>Asserts non-strict inequality (&lt;code&gt;!=&lt;/code&gt;) of &lt;code&gt;actual&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;actual&lt;/code&gt; 및 &lt;code&gt;expected&lt;/code&gt; 의 엄격하지 않은 불평등 ( &lt;code&gt;!=&lt;/code&gt; )을 확인 합니다.</target>
        </trans-unit>
        <trans-unit id="ffb3b07afe2ac89c48ab7c51900e01ee568b79c8" translate="yes" xml:space="preserve">
          <source>Asserts strict equality (&lt;code&gt;===&lt;/code&gt;) of &lt;code&gt;actual&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;actual&lt;/code&gt; 및 &lt;code&gt;expected&lt;/code&gt; 의 엄격한 동등성 ( &lt;code&gt;===&lt;/code&gt; )을 확인 합니다.</target>
        </trans-unit>
        <trans-unit id="7187c9497df872427b4a6009cc5c9001d864e6a2" translate="yes" xml:space="preserve">
          <source>Asserts strict inequality (&lt;code&gt;!==&lt;/code&gt;) of &lt;code&gt;actual&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;actual&lt;/code&gt; 및 &lt;code&gt;expected&lt;/code&gt; 의 엄격한 부등식 ( &lt;code&gt;!==&lt;/code&gt; )을 확인 합니다.</target>
        </trans-unit>
        <trans-unit id="39b436735cd174d60a81d6f65c3d9d179af56a1c" translate="yes" xml:space="preserve">
          <source>Asserts that &amp;lsquo;haystack&amp;rsquo; does not include &amp;lsquo;needle&amp;rsquo;. Can be used to assert the absence of a subset of properties in an object while checking for deep equality. Enables the use of dot- and bracket-notation for referencing nested properties. &amp;lsquo;[]&amp;rsquo; and &amp;lsquo;.&amp;rsquo; in property names can be escaped using double backslashes.</source>
          <target state="translated">'haystack'에는 'needle'이 포함되지 않는다고 주장합니다. 깊은 평등을 확인하면서 개체에 속성의 하위 집합이 없음을 주장하는 데 사용할 수 있습니다. 중첩 속성을 참조하기 위해 점 및 괄호 표기법을 사용할 수 있습니다. '[]'및 '.' 속성 이름에서 이중 백 슬래시를 사용하여 이스케이프 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="86d2dace87f85815dd730d42492bb65c43ea7147" translate="yes" xml:space="preserve">
          <source>Asserts that &amp;lsquo;haystack&amp;rsquo; does not include &amp;lsquo;needle&amp;rsquo;. Can be used to assert the absence of a subset of properties in an object. Enables the use of dot- and bracket-notation for referencing nested properties. &amp;lsquo;[]&amp;rsquo; and &amp;lsquo;.&amp;rsquo; in property names can be escaped using double backslashes.</source>
          <target state="translated">'haystack'에는 'needle'이 포함되지 않는다고 주장합니다. 객체에 속성의 하위 집합이 없음을 주장하는 데 사용할 수 있습니다. 중첩 속성을 참조하기 위해 점 및 괄호 표기법을 사용할 수 있습니다. '[]'및 '.' 속성 이름에서 이중 백 슬래시를 사용하여 이스케이프 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="69ecd92a4141b601e040430bded8c3265fecf963" translate="yes" xml:space="preserve">
          <source>Asserts that &amp;lsquo;haystack&amp;rsquo; includes &amp;lsquo;needle&amp;rsquo;. Can be used to assert the absence of a subset of properties in an object while ignoring inherited properties and checking for deep equality.</source>
          <target state="translated">'haystack'에 'needle'이 포함되어 있다고 주장합니다. 상속 된 속성을 무시하고 깊은 평등을 확인하면서 개체에 속성의 하위 집합이 없음을 확인하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="be391319e8b2f08de0550eb19caa9f30593c277b" translate="yes" xml:space="preserve">
          <source>Asserts that &amp;lsquo;haystack&amp;rsquo; includes &amp;lsquo;needle&amp;rsquo;. Can be used to assert the absence of a subset of properties in an object while ignoring inherited properties.</source>
          <target state="translated">'haystack'에 'needle'이 포함되어 있다고 주장합니다. 상속 된 속성을 무시하고 개체에 속성의 하위 집합이없는 것을 확인하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec3515e00a43f2c98751e981a42ca4e0c0d683df" translate="yes" xml:space="preserve">
          <source>Asserts that &amp;lsquo;haystack&amp;rsquo; includes &amp;lsquo;needle&amp;rsquo;. Can be used to assert the inclusion of a subset of properties in an object while checking for deep equality. Enables the use of dot- and bracket-notation for referencing nested properties. &amp;lsquo;[]&amp;rsquo; and &amp;lsquo;.&amp;rsquo; in property names can be escaped using double backslashes.</source>
          <target state="translated">'haystack'에 'needle'이 포함되어 있다고 주장합니다. 깊은 평등을 확인하면서 개체에 속성의 하위 집합을 포함시키는 데 사용할 수 있습니다. 중첩 속성을 참조하기 위해 점 및 괄호 표기법을 사용할 수 있습니다. '[]'및 '.' 속성 이름에서 이중 백 슬래시를 사용하여 이스케이프 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="48e7a41a26ec9635010e4779d109252a19a9953f" translate="yes" xml:space="preserve">
          <source>Asserts that &amp;lsquo;haystack&amp;rsquo; includes &amp;lsquo;needle&amp;rsquo;. Can be used to assert the inclusion of a subset of properties in an object while ignoring inherited properties and checking for deep equality.</source>
          <target state="translated">'haystack'에 'needle'이 포함되어 있다고 주장합니다. 상속 된 속성을 무시하고 깊은 평등을 확인하면서 개체에 속성의 하위 집합을 포함시키는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="790802e2bb3704a09387b3168b37a0af5e3079c3" translate="yes" xml:space="preserve">
          <source>Asserts that &amp;lsquo;haystack&amp;rsquo; includes &amp;lsquo;needle&amp;rsquo;. Can be used to assert the inclusion of a subset of properties in an object while ignoring inherited properties.</source>
          <target state="translated">'haystack'에 'needle'이 포함되어 있다고 주장합니다. 상속 된 속성을 무시하고 객체에 속성의 하위 집합을 포함시키는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c8f95aae56fed1116316045c79d39c75d35055aa" translate="yes" xml:space="preserve">
          <source>Asserts that &amp;lsquo;haystack&amp;rsquo; includes &amp;lsquo;needle&amp;rsquo;. Can be used to assert the inclusion of a subset of properties in an object. Enables the use of dot- and bracket-notation for referencing nested properties. &amp;lsquo;[]&amp;rsquo; and &amp;lsquo;.&amp;rsquo; in property names can be escaped using double backslashes.</source>
          <target state="translated">'haystack'에 'needle'이 포함되어 있다고 주장합니다. 개체에 속성의 하위 집합을 포함시키는 데 사용할 수 있습니다. 중첩 속성을 참조하기 위해 점 및 괄호 표기법을 사용할 수 있습니다. '[]'및 '.' 속성 이름에서 이중 백 슬래시를 사용하여 이스케이프 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a5a9fb9f4b331fd6329771daba62d0c3a69144a8" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;actual&lt;/code&gt; is deeply equal to &lt;code&gt;expected&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;actual&lt;/code&gt; 가 &lt;code&gt;expected&lt;/code&gt; 과 완전히 동일하다고 주장 합니다.</target>
        </trans-unit>
        <trans-unit id="e81a2701feeb2db1e8c259e6b03605c70a541bd3" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;haystack&lt;/code&gt; does not include &lt;code&gt;needle&lt;/code&gt;. Can be used to assert the absence of a value in an array or a subset of properties in an object. Deep equality is used.</source>
          <target state="translated">&lt;code&gt;haystack&lt;/code&gt; &lt;code&gt;needle&lt;/code&gt; 포함되어 있지 않다고 주장 합니다. 배열에 값이 없거나 객체에 속성의 하위 집합이 있다고 주장하는 데 사용할 수 있습니다. 깊은 평등이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="55483a5b3e3230dbb3576b671c0848ce28353210" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;haystack&lt;/code&gt; does not include &lt;code&gt;needle&lt;/code&gt;. Can be used to assert the absence of a value in an array, a substring in a string, or a subset of properties in an object.</source>
          <target state="translated">&lt;code&gt;haystack&lt;/code&gt; &lt;code&gt;needle&lt;/code&gt; 포함되어 있지 않다고 주장 합니다. 배열, 문자열의 하위 문자열 또는 객체의 속성 하위 집합에 값이 없음을 주장하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="54f0b94d0c9d0ae9cec72a6857604a5d4dc79896" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;haystack&lt;/code&gt; includes &lt;code&gt;needle&lt;/code&gt;. Can be used to assert the inclusion of a value in an array or a subset of properties in an object. Deep equality is used.</source>
          <target state="translated">&lt;code&gt;haystack&lt;/code&gt; &lt;code&gt;needle&lt;/code&gt; 이 포함되어 있다고 주장 합니다. 배열에 값을 포함 시키거나 객체에 속성의 하위 집합을 포함시키는 데 사용할 수 있습니다. 깊은 평등이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3e4b77efeac065556f3c015a4d14724057c091c7" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;haystack&lt;/code&gt; includes &lt;code&gt;needle&lt;/code&gt;. Can be used to assert the inclusion of a value in an array, a substring in a string, or a subset of properties in an object.</source>
          <target state="translated">&lt;code&gt;haystack&lt;/code&gt; &lt;code&gt;needle&lt;/code&gt; 이 포함되어 있다고 주장 합니다. 배열에 값, 문자열의 하위 문자열 또는 객체의 속성 하위 집합을 포함시키는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d867f640fc4f566db2c0262c108363312260a42" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; contains all of the &lt;code&gt;keys&lt;/code&gt; provided. Since Sets and Maps can have objects as keys you can use this assertion to perform a deep comparison. You can also provide a single object instead of a &lt;code&gt;keys&lt;/code&gt; array and its keys will be used as the expected set of keys.</source>
          <target state="translated">&lt;code&gt;object&lt;/code&gt; 에 제공된 모든 &lt;code&gt;keys&lt;/code&gt; 가 포함되어 있는지 확인 합니다 . 세트와 맵에는 객체를 키로 사용할 수 있으므로이 어설 션을 사용하여 심도있는 비교를 수행 할 수 있습니다. &lt;code&gt;keys&lt;/code&gt; 배열 대신 단일 객체를 제공 할 수 있으며 해당 키가 예상 키 세트로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e6491a5d21b8ff4f4101e5611ae4ef2444070956" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; have a direct or inherited property named by &lt;code&gt;property&lt;/code&gt; with value given by &lt;code&gt;value&lt;/code&gt;. Uses a deep equality check.</source>
          <target state="translated">주장 &lt;code&gt;object&lt;/code&gt; 않습니다 &lt;em&gt;하지&lt;/em&gt; 로 이름을 직접 또는 상속 재산이 &lt;code&gt;property&lt;/code&gt; 에 의해 주어진 값으로 &lt;code&gt;value&lt;/code&gt; . 깊은 평등 검사를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="af0919132f8122ad8a4b4ae85c8ac9224498a07d" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; have a direct or inherited property named by &lt;code&gt;property&lt;/code&gt; with value given by &lt;code&gt;value&lt;/code&gt;. Uses a strict equality check (===).</source>
          <target state="translated">주장 &lt;code&gt;object&lt;/code&gt; 않습니다 &lt;em&gt;하지&lt;/em&gt; 로 이름을 직접 또는 상속 재산이 &lt;code&gt;property&lt;/code&gt; 에 의해 주어진 값으로 &lt;code&gt;value&lt;/code&gt; . 엄격한 동등성 검사 (===)를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="c7a25bbbef0ee6257d33c34616fb17f73724099a" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; have a direct or inherited property named by &lt;code&gt;property&lt;/code&gt;.</source>
          <target state="translated">주장 &lt;code&gt;object&lt;/code&gt; 않습니다 &lt;em&gt;하지&lt;/em&gt; 로 이름을 직접 또는 상속 재산이 &lt;code&gt;property&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9fed37c5dafbafa17c5a23dcb92aead9de56766f" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; have a property named by &lt;code&gt;property&lt;/code&gt; with value given by &lt;code&gt;value&lt;/code&gt;. &lt;code&gt;property&lt;/code&gt; can use dot- and bracket-notation for nested reference. Uses a deep equality check.</source>
          <target state="translated">주장 &lt;code&gt;object&lt;/code&gt; 않습니다 &lt;em&gt;하지&lt;/em&gt; 에 의해 명명 속성이 &lt;code&gt;property&lt;/code&gt; 에 의해 주어진 값으로 &lt;code&gt;value&lt;/code&gt; . &lt;code&gt;property&lt;/code&gt; 은 중첩 참조에 도트 및 괄호 표기법을 사용할 수 있습니다. 깊은 평등 검사를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="c970229bb862680507d457748441926adf569957" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; have a property named by &lt;code&gt;property&lt;/code&gt; with value given by &lt;code&gt;value&lt;/code&gt;. &lt;code&gt;property&lt;/code&gt; can use dot- and bracket-notation for nested reference. Uses a strict equality check (===).</source>
          <target state="translated">주장 &lt;code&gt;object&lt;/code&gt; 않습니다 &lt;em&gt;하지&lt;/em&gt; 에 의해 명명 속성이 &lt;code&gt;property&lt;/code&gt; 에 의해 주어진 값으로 &lt;code&gt;value&lt;/code&gt; . &lt;code&gt;property&lt;/code&gt; 은 중첩 참조에 도트 및 괄호 표기법을 사용할 수 있습니다. 엄격한 동등성 검사 (===)를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1d98e70e5ef7f3b9c759ce07de4b8b84e5b667da" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; have a property named by &lt;code&gt;property&lt;/code&gt;, which can be a string using dot- and bracket-notation for nested reference. The property cannot exist on the object nor anywhere in its prototype chain.</source>
          <target state="translated">주장 &lt;code&gt;object&lt;/code&gt; 않습니다 &lt;em&gt;하지&lt;/em&gt; 에 의해이라는 속성이 &lt;code&gt;property&lt;/code&gt; 중첩 된 참조 용 도트 형 및 브라켓 표기법을 사용하여 문자열이 될 수 있습니다. 이 속성은 객체 나 프로토 타입 체인의 어느 곳에도 존재할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="661a3360d2360582b6f74ab1b29c06e49233a6a7" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; does not have at least one of the &lt;code&gt;keys&lt;/code&gt; provided. Since Sets and Maps can have objects as keys you can use this assertion to perform a deep comparison. You can also provide a single object instead of a &lt;code&gt;keys&lt;/code&gt; array and its keys will be used as the expected set of keys.</source>
          <target state="translated">&lt;code&gt;object&lt;/code&gt; 제공된 &lt;code&gt;keys&lt;/code&gt; 중 하나 이상이 없어야합니다 . 세트와 맵에는 객체를 키로 사용할 수 있으므로이 어설 션을 사용하여 심도있는 비교를 수행 할 수 있습니다. &lt;code&gt;keys&lt;/code&gt; 배열 대신 단일 객체를 제공 할 수 있으며 해당 키가 예상 키 세트로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6b029caabf943e7f6663ec94c27d16bee6f4305f" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; does not have at least one of the &lt;code&gt;keys&lt;/code&gt; provided. You can also provide a single object instead of a &lt;code&gt;keys&lt;/code&gt; array and its keys will be used as the expected set of keys.</source>
          <target state="translated">&lt;code&gt;object&lt;/code&gt; 제공된 &lt;code&gt;keys&lt;/code&gt; 중 하나 이상이 없어야합니다 . &lt;code&gt;keys&lt;/code&gt; 배열 대신 단일 객체를 제공 할 수 있으며 해당 키가 예상 키 세트로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="49399dd6e9318b0329801a9736d9e1b7478c9078" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; has a &lt;code&gt;length&lt;/code&gt; or &lt;code&gt;size&lt;/code&gt; with the expected value.</source>
          <target state="translated">주장 &lt;code&gt;object&lt;/code&gt; 이 &lt;code&gt;length&lt;/code&gt; 또는 &lt;code&gt;size&lt;/code&gt; 예상 값을.</target>
        </trans-unit>
        <trans-unit id="621c3e3bb8567a37803599ad213dcc649c8705b5" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; has a direct or inherited property named by &lt;code&gt;property&lt;/code&gt; with a value given by &lt;code&gt;value&lt;/code&gt;. Uses a deep equality check.</source>
          <target state="translated">주장 &lt;code&gt;object&lt;/code&gt; 에 의해 명명 직접 또는 상속 속성을 가지고 &lt;code&gt;property&lt;/code&gt; 에 의해 지정된 값으로 &lt;code&gt;value&lt;/code&gt; . 깊은 평등 검사를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="f1ee066de5033777ddaf68267e4aefcfb15e2321" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; has a direct or inherited property named by &lt;code&gt;property&lt;/code&gt; with a value given by &lt;code&gt;value&lt;/code&gt;. Uses a strict equality check (===).</source>
          <target state="translated">주장 &lt;code&gt;object&lt;/code&gt; 에 의해 명명 직접 또는 상속 속성을 가지고 &lt;code&gt;property&lt;/code&gt; 에 의해 지정된 값으로 &lt;code&gt;value&lt;/code&gt; . 엄격한 동등성 검사 (===)를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="0139156450fb9a9d0c589cfd48312f3daeae0624" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; has a direct or inherited property named by &lt;code&gt;property&lt;/code&gt;, which can be a string using dot- and bracket-notation for nested reference.</source>
          <target state="translated">주장 &lt;code&gt;object&lt;/code&gt; 에 의해 명명 직접 또는 상속 속성을 갖는 &lt;code&gt;property&lt;/code&gt; 중첩 참조 도트 형 브래킷 표기법을 사용하여 문자열 일 수있다.</target>
        </trans-unit>
        <trans-unit id="1472aeb487e1f5de9d5f65380be672744264d77a" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; has a direct or inherited property named by &lt;code&gt;property&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;object&lt;/code&gt; 가 property로 명명 된 직접 또는 상속 된 특성을 갖도록 지정 &lt;code&gt;property&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4b27d0d21bf97643ceaaf5eac1589791e0541c03" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; has a property named by &lt;code&gt;property&lt;/code&gt; with a value given by &lt;code&gt;value&lt;/code&gt;. &lt;code&gt;property&lt;/code&gt; can use dot- and bracket-notation for nested reference. Uses a deep equality check.</source>
          <target state="translated">주장 &lt;code&gt;object&lt;/code&gt; 에 의해 명명 속성이 &lt;code&gt;property&lt;/code&gt; 에 의해 주어진 값으로 &lt;code&gt;value&lt;/code&gt; . &lt;code&gt;property&lt;/code&gt; 은 중첩 참조에 도트 및 괄호 표기법을 사용할 수 있습니다. 깊은 평등 검사를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="01d4d5f71452d33c062b807d421723f732079cf8" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; has a property named by &lt;code&gt;property&lt;/code&gt; with value given by &lt;code&gt;value&lt;/code&gt;. &lt;code&gt;property&lt;/code&gt; can use dot- and bracket-notation for nested reference. Uses a strict equality check (===).</source>
          <target state="translated">&lt;code&gt;object&lt;/code&gt; 가 value에 의해 주어진 &lt;code&gt;value&lt;/code&gt; 가진 &lt;code&gt;property&lt;/code&gt; 에 의해 명명 된 속성 을 갖도록 지정 합니다 . &lt;code&gt;property&lt;/code&gt; 은 중첩 참조에 도트 및 괄호 표기법을 사용할 수 있습니다. 엄격한 동등성 검사 (===)를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="98f4aee11b89220299f36f04effab2e0ab8d2b31" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; has all and only all of the &lt;code&gt;keys&lt;/code&gt; provided. Since Sets and Maps can have objects as keys you can use this assertion to perform a deep comparison. You can also provide a single object instead of a &lt;code&gt;keys&lt;/code&gt; array and its keys will be used as the expected set of keys.</source>
          <target state="translated">&lt;code&gt;object&lt;/code&gt; 제공된 &lt;code&gt;keys&lt;/code&gt; 가 모두 있고 모든 키만 있다고 주장 합니다 . 세트와 맵에는 객체를 키로 사용할 수 있으므로이 어설 션을 사용하여 심도있는 비교를 수행 할 수 있습니다. &lt;code&gt;keys&lt;/code&gt; 배열 대신 단일 객체를 제공 할 수 있으며 해당 키가 예상 키 세트로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a16a12bd612171cc5d039fbb71c2d87e18816312" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; has all and only all of the &lt;code&gt;keys&lt;/code&gt; provided. You can also provide a single object instead of a &lt;code&gt;keys&lt;/code&gt; array and its keys will be used as the expected set of keys.</source>
          <target state="translated">&lt;code&gt;object&lt;/code&gt; 제공된 &lt;code&gt;keys&lt;/code&gt; 가 모두 있고 모든 키만 있다고 주장 합니다 . &lt;code&gt;keys&lt;/code&gt; 배열 대신 단일 객체를 제공 할 수 있으며 해당 키가 예상 키 세트로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="50fe72d2809df142edd6b9b0fa09a2264dd6f31b" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; has all of the &lt;code&gt;keys&lt;/code&gt; provided but may have more keys not listed. You can also provide a single object instead of a &lt;code&gt;keys&lt;/code&gt; array and its keys will be used as the expected set of keys.</source>
          <target state="translated">주장 &lt;code&gt;object&lt;/code&gt; 의 모든이 &lt;code&gt;keys&lt;/code&gt; 제공을하지만, 더 키가 표시되지있을 수 있습니다. &lt;code&gt;keys&lt;/code&gt; 배열 대신 단일 객체를 제공 할 수 있으며 해당 키가 예상 키 세트로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b69cd80978f780d8c3b2881465128f6832c0d085" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; has at least one of the &lt;code&gt;keys&lt;/code&gt; provided. Since Sets and Maps can have objects as keys you can use this assertion to perform a deep comparison. You can also provide a single object instead of a &lt;code&gt;keys&lt;/code&gt; array and its keys will be used as the expected set of keys.</source>
          <target state="translated">&lt;code&gt;object&lt;/code&gt; 제공된 &lt;code&gt;keys&lt;/code&gt; 중 하나 이상이 있다고 주장 합니다 . 세트와 맵에는 객체를 키로 사용할 수 있으므로이 어설 션을 사용하여 심도있는 비교를 수행 할 수 있습니다. &lt;code&gt;keys&lt;/code&gt; 배열 대신 단일 객체를 제공 할 수 있으며 해당 키가 예상 키 세트로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a9bfc4eeec03fc8e546d036aece17ef270578e13" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; has at least one of the &lt;code&gt;keys&lt;/code&gt; provided. You can also provide a single object instead of a &lt;code&gt;keys&lt;/code&gt; array and its keys will be used as the expected set of keys.</source>
          <target state="translated">&lt;code&gt;object&lt;/code&gt; 제공된 &lt;code&gt;keys&lt;/code&gt; 중 하나 이상이 있다고 주장 합니다 . &lt;code&gt;keys&lt;/code&gt; 배열 대신 단일 객체를 제공 할 수 있으며 해당 키가 예상 키 세트로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="89f0bab14346eb963409ac02451f23b9d5072d48" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; has none of the &lt;code&gt;keys&lt;/code&gt; provided. Since Sets and Maps can have objects as keys you can use this assertion to perform a deep comparison. You can also provide a single object instead of a &lt;code&gt;keys&lt;/code&gt; array and its keys will be used as the expected set of keys.</source>
          <target state="translated">해당 &lt;code&gt;object&lt;/code&gt; 주장 의 아무도 없습니다 &lt;code&gt;keys&lt;/code&gt; 제공합니다. 세트와 맵에는 객체를 키로 사용할 수 있으므로이 어설 션을 사용하여 심도있는 비교를 수행 할 수 있습니다. &lt;code&gt;keys&lt;/code&gt; 배열 대신 단일 객체를 제공 할 수 있으며 해당 키가 예상 키 세트로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b22f68db6b52363181174f46239366ecdbcafb1e" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; has none of the &lt;code&gt;keys&lt;/code&gt; provided. You can also provide a single object instead of a &lt;code&gt;keys&lt;/code&gt; array and its keys will be used as the expected set of keys.</source>
          <target state="translated">주장 &lt;code&gt;object&lt;/code&gt; 의 아무도가 없습니다 &lt;code&gt;keys&lt;/code&gt; 제공합니다. &lt;code&gt;keys&lt;/code&gt; 배열 대신 단일 객체를 제공 할 수 있으며 해당 키가 예상 키 세트로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ecd367275cf5e7d399c3631490faeebd1c261abb" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; extensible.</source>
          <target state="translated">그것을 주장 &lt;code&gt;object&lt;/code&gt; 를 확장 할 수 &lt;em&gt;없다고&lt;/em&gt; 합니다 .</target>
        </trans-unit>
        <trans-unit id="3ea0f91fd48d6379485d07adaf0103002ac27ca6" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; frozen.</source>
          <target state="translated">그것을 주장 &lt;code&gt;object&lt;/code&gt; 가 고정 &lt;em&gt;되지 않았 음&lt;/em&gt; 합니다 .</target>
        </trans-unit>
        <trans-unit id="b88e4b5f3f087da0d465c06b3345ca55fb5ba8c8" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; sealed.</source>
          <target state="translated">그것을 주장 &lt;code&gt;object&lt;/code&gt; 가 봉인 &lt;em&gt;되지 않았 음&lt;/em&gt; 합니다 .</target>
        </trans-unit>
        <trans-unit id="4988a92d60ae989bd8fe522bbb996b3c1b013ea8" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; is extensible (can have new properties added to it).</source>
          <target state="translated">&lt;code&gt;object&lt;/code&gt; 가 확장 가능한지 확인 합니다 (새 속성을 추가 할 수 있음).</target>
        </trans-unit>
        <trans-unit id="1a0e464ca3cc3482065d4aec33c8fe28af0c0369" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; is falsy.</source>
          <target state="translated">그것을 주장 &lt;code&gt;object&lt;/code&gt; 가 허위임을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="11bcd2c122a4fba5b0afa68708547ffecfb8582e" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; is frozen (cannot have new properties added to it and its existing properties cannot be modified).</source>
          <target state="translated">그것을 주장 &lt;code&gt;object&lt;/code&gt; 가 고정 합니다 (새 속성을 추가 할 수없고 기존 속성을 수정할 수 없음).</target>
        </trans-unit>
        <trans-unit id="856b863626b461cfc2892d3417de8d2fa99b4498" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; is sealed (cannot have new properties added to it and its existing properties cannot be removed).</source>
          <target state="translated">그것을 주장 &lt;code&gt;object&lt;/code&gt; 가 봉인되어 합니다 (새 속성을 추가 할 수없고 기존 속성을 제거 할 수 없음).</target>
        </trans-unit>
        <trans-unit id="2778a4f6b2ab54039fe5071efde1ebdc1ccad3b6" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;object&lt;/code&gt; is truthy.</source>
          <target state="translated">그것을 주장 &lt;code&gt;object&lt;/code&gt; 이 진실하다고 주장한다.</target>
        </trans-unit>
        <trans-unit id="b16be0d0de1804a0c228024978156d4c198dd703" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;set1&lt;/code&gt; and &lt;code&gt;set2&lt;/code&gt; don&amp;rsquo;t have the same members in any order. Uses a deep equality check.</source>
          <target state="translated">그 &lt;code&gt;set1&lt;/code&gt; 을 주장 하고 &lt;code&gt;set2&lt;/code&gt; 순서에 상관없이 동일한 회원이 없습니다. 깊은 평등 검사를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="0fc2a5259c7f0c030e02a7bfdbe4e5067ff7628a" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;set1&lt;/code&gt; and &lt;code&gt;set2&lt;/code&gt; don&amp;rsquo;t have the same members in any order. Uses a strict equality check (===).</source>
          <target state="translated">그 &lt;code&gt;set1&lt;/code&gt; 을 주장 하고 &lt;code&gt;set2&lt;/code&gt; 순서에 상관없이 동일한 회원이 없습니다. 엄격한 동등성 검사 (===)를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="d24bfa184783e0dd7b43b13a9d074e5630879aeb" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;set1&lt;/code&gt; and &lt;code&gt;set2&lt;/code&gt; don&amp;rsquo;t have the same members in the same order. Uses a deep equality check.</source>
          <target state="translated">그 &lt;code&gt;set1&lt;/code&gt; 을 주장 하고 &lt;code&gt;set2&lt;/code&gt; 같은 순서로 같은 회원이 없습니다. 깊은 평등 검사를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="51cc762dedf116b774f28a0b76ee065d4b57e2f8" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;set1&lt;/code&gt; and &lt;code&gt;set2&lt;/code&gt; don&amp;rsquo;t have the same members in the same order. Uses a strict equality check (===).</source>
          <target state="translated">그 &lt;code&gt;set1&lt;/code&gt; 과 &lt;code&gt;set2&lt;/code&gt; 를 주장한다 같은 순서로 같은 회원이 없습니다. 엄격한 동등성 검사 (===)를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="9bd500b93a1068ded9783ce927ad7501dc81fb64" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;set1&lt;/code&gt; and &lt;code&gt;set2&lt;/code&gt; have the same members in any order. Uses a deep equality check.</source>
          <target state="translated">그 &lt;code&gt;set1&lt;/code&gt; 과 &lt;code&gt;set2&lt;/code&gt; 를 주장한다 순서에 상관없이 같은 멤버가 있습니다. 깊은 평등 검사를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="9c0e59e22a737f8241f3e05f2613ccac737a7171" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;set1&lt;/code&gt; and &lt;code&gt;set2&lt;/code&gt; have the same members in any order. Uses a strict equality check (===).</source>
          <target state="translated">그 &lt;code&gt;set1&lt;/code&gt; 과 &lt;code&gt;set2&lt;/code&gt; 를 주장한다 순서에 상관없이 같은 멤버가 있습니다. 엄격한 동등성 검사 (===)를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="f81cc56b24b039403c733044debf1230b23b7b70" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;set1&lt;/code&gt; and &lt;code&gt;set2&lt;/code&gt; have the same members in the same order. Uses a deep equality check.</source>
          <target state="translated">그 &lt;code&gt;set1&lt;/code&gt; 과 &lt;code&gt;set2&lt;/code&gt; 를 주장한다 같은 순서로 같은 멤버가 있습니다. 깊은 평등 검사를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="46ea92b5c717fb3e03d4dfc675895e582ac6597d" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;set1&lt;/code&gt; and &lt;code&gt;set2&lt;/code&gt; have the same members in the same order. Uses a strict equality check (===).</source>
          <target state="translated">그 &lt;code&gt;set1&lt;/code&gt; 과 &lt;code&gt;set2&lt;/code&gt; 를 주장한다 같은 순서로 같은 멤버가 있습니다. 엄격한 동등성 검사 (===)를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e810cbd790eba7dae35130e25e99e1bca8364053" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;subset&lt;/code&gt; is included in &lt;code&gt;superset&lt;/code&gt; in any order. Uses a deep equality check. Duplicates are ignored.</source>
          <target state="translated">주장이 &lt;code&gt;subset&lt;/code&gt; 에 포함되어 &lt;code&gt;superset&lt;/code&gt; 순서입니다. 깊은 평등 검사를 사용합니다. 중복은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="17685687a17773ae4598fa1b4f13635fb68bb4b6" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;subset&lt;/code&gt; is included in &lt;code&gt;superset&lt;/code&gt; in any order. Uses a strict equality check (===). Duplicates are ignored.</source>
          <target state="translated">주장이 &lt;code&gt;subset&lt;/code&gt; 에 포함되어 &lt;code&gt;superset&lt;/code&gt; 순서입니다. 엄격한 동등성 검사 (===)를 사용합니다. 중복은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="4dbae663ff5295bda19f87985c5bc03cbd01803a" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;subset&lt;/code&gt; is included in &lt;code&gt;superset&lt;/code&gt; in the same order beginning with the first element in &lt;code&gt;superset&lt;/code&gt;. Uses a deep equality check.</source>
          <target state="translated">주장 &lt;code&gt;subset&lt;/code&gt; 에 포함되어있는 &lt;code&gt;superset&lt;/code&gt; 의 첫 번째 요소로 시작하는 동일한 순서로 &lt;code&gt;superset&lt;/code&gt; . 깊은 평등 검사를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="fa298224480dee1d7448ebb90055c67d1b18a44b" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;subset&lt;/code&gt; is included in &lt;code&gt;superset&lt;/code&gt; in the same order beginning with the first element in &lt;code&gt;superset&lt;/code&gt;. Uses a strict equality check (===).</source>
          <target state="translated">주장 &lt;code&gt;subset&lt;/code&gt; 에 포함되어있는 &lt;code&gt;superset&lt;/code&gt; 의 첫 번째 요소로 시작하는 동일한 순서로 &lt;code&gt;superset&lt;/code&gt; . 엄격한 동등성 검사 (===)를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="4672f5f7cceaf3c0ebd1342b1a04e1cb0deecdb6" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;subset&lt;/code&gt; isn&amp;rsquo;t included in &lt;code&gt;superset&lt;/code&gt; in any order. Uses a deep equality check. Duplicates are ignored.</source>
          <target state="translated">주장 &lt;code&gt;subset&lt;/code&gt; 에 포함되지 않은 &lt;code&gt;superset&lt;/code&gt; 순서입니다. 깊은 평등 검사를 사용합니다. 중복은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="f26362fadcccfdba303b47e23f63522477322b5c" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;subset&lt;/code&gt; isn&amp;rsquo;t included in &lt;code&gt;superset&lt;/code&gt; in any order. Uses a strict equality check (===). Duplicates are ignored.</source>
          <target state="translated">주장 &lt;code&gt;subset&lt;/code&gt; 에 포함되지 않은 &lt;code&gt;superset&lt;/code&gt; 순서입니다. 엄격한 동등성 검사 (===)를 사용합니다. 중복은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="99777369bc7cb2a21e195cb8e900fc6aaff16a9f" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;subset&lt;/code&gt; isn&amp;rsquo;t included in &lt;code&gt;superset&lt;/code&gt; in the same order beginning with the first element in &lt;code&gt;superset&lt;/code&gt;. Uses a deep equality check.</source>
          <target state="translated">주장 &lt;code&gt;subset&lt;/code&gt; 에 포함되지 않는 &lt;code&gt;superset&lt;/code&gt; 의 첫 번째 요소로 시작하는 동일한 순서로 &lt;code&gt;superset&lt;/code&gt; . 깊은 평등 검사를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="f2554277dcaba5ec74f0e232563b48e9613e3717" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;subset&lt;/code&gt; isn&amp;rsquo;t included in &lt;code&gt;superset&lt;/code&gt; in the same order beginning with the first element in &lt;code&gt;superset&lt;/code&gt;. Uses a strict equality check (===).</source>
          <target state="translated">주장 &lt;code&gt;subset&lt;/code&gt; 에 포함되지 않는 &lt;code&gt;superset&lt;/code&gt; 의 첫 번째 요소로 시작하는 동일한 순서로 &lt;code&gt;superset&lt;/code&gt; . 엄격한 동등성 검사 (===)를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="3b4a5d8455e484672260e4e9ff223f11af312991" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; does not match the regular expression &lt;code&gt;regexp&lt;/code&gt;.</source>
          <target state="translated">주장 &lt;code&gt;value&lt;/code&gt; 정규 표현식과 일치하지 않습니다 &lt;code&gt;regexp&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="40e2fb8566409ee84296d5adafe3f576e8cbe910" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">주장 &lt;code&gt;value&lt;/code&gt; 된다 &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e4d59cd308795553810901b064ea45e9231067e5" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; a boolean.</source>
          <target state="translated">해당 &lt;code&gt;value&lt;/code&gt; 이 부울 이 &lt;em&gt;아니라고&lt;/em&gt; 주장 합니다 .</target>
        </trans-unit>
        <trans-unit id="dfc3239b6bd2cc58fcab7a5d6c45b43432525b20" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; a function.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 이 함수 가 &lt;em&gt;아니라고&lt;/em&gt; 주장 합니다.</target>
        </trans-unit>
        <trans-unit id="2b6c4f6fd0eae36c5668b3dda2fa3d812b2934cd" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; a number.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 이 숫자 가 &lt;em&gt;아니라고&lt;/em&gt; 주장 합니다 .</target>
        </trans-unit>
        <trans-unit id="30de3f1e516813cf51a6fe72e7b8244a4d634b85" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; a string.</source>
          <target state="translated">해당 &lt;code&gt;value&lt;/code&gt; 이 문자열 이 &lt;em&gt;아니라고&lt;/em&gt; 주장 합니다.</target>
        </trans-unit>
        <trans-unit id="ba75e84e022a9ac91a487e8f91669191f3590310" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; an array.</source>
          <target state="translated">그것을 주장 &lt;code&gt;value&lt;/code&gt; 이 배열 이 &lt;em&gt;아니라고&lt;/em&gt; 합니다 .</target>
        </trans-unit>
        <trans-unit id="36cefac27d378cc486afe59c22c90323a0313f7f" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; an object of type &amp;lsquo;Object&amp;rsquo; (as revealed by &lt;code&gt;Object.prototype.toString&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 이 &lt;em&gt;아닌&lt;/em&gt; 것을 주장&lt;em&gt;&lt;/em&gt; (의해 계시 된 타입 '객체의 객체 &lt;code&gt;Object.prototype.toString&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="e8f8525add4b7fdcc81694d3cd5346cc0cdc2fff" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; is a boolean.</source>
          <target state="translated">그것을 주장 &lt;code&gt;value&lt;/code&gt; 이 부울 합니다 .</target>
        </trans-unit>
        <trans-unit id="67e89087ad25981c6da85b944606a67cf01c81e1" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; is a finite number. Unlike &lt;code&gt;.isNumber&lt;/code&gt;, this will fail for &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;Infinity&lt;/code&gt;.</source>
          <target state="translated">주장 &lt;code&gt;value&lt;/code&gt; 유한 수있다. &lt;code&gt;.isNumber&lt;/code&gt; 와 달리 &lt;code&gt;NaN&lt;/code&gt; 에서는 실패합니다. 및 &lt;code&gt;Infinity&lt;/code&gt; 에서는 .</target>
        </trans-unit>
        <trans-unit id="5493ee0c09363bf06d1c2f5619d8ec33ef4a83bc" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; is a function.</source>
          <target state="translated">그것을 주장 &lt;code&gt;value&lt;/code&gt; 이 함수 합니다.</target>
        </trans-unit>
        <trans-unit id="91fa9388fbd7d16895c328f4c361c0f24c258821" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; is a number.</source>
          <target state="translated">그것을 주장 &lt;code&gt;value&lt;/code&gt; 이 숫자 합니다 .</target>
        </trans-unit>
        <trans-unit id="a68c362946b1407a30af3287e7d04571569f8fa0" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; is a string.</source>
          <target state="translated">그것을 주장 &lt;code&gt;value&lt;/code&gt; 이 문자열 합니다.</target>
        </trans-unit>
        <trans-unit id="ab348c29942dcca1371c248e286a176606e4a408" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; is an array.</source>
          <target state="translated">그것을 주장 &lt;code&gt;value&lt;/code&gt; 이 배열 합니다 .</target>
        </trans-unit>
        <trans-unit id="04e389fd0c0cc392cac1f29ca05f26d703c52299" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; is an instance of &lt;code&gt;constructor&lt;/code&gt;.</source>
          <target state="translated">그 &lt;code&gt;value&lt;/code&gt; 주장 이 &lt;code&gt;constructor&lt;/code&gt; 의 인스턴스라고 가정 합니다.</target>
        </trans-unit>
        <trans-unit id="41b633a58b9eafc52c2e22d4d5012eaa7c64d803" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; is an object of type &amp;lsquo;Object&amp;rsquo; (as revealed by &lt;code&gt;Object.prototype.toString&lt;/code&gt;). &lt;em&gt;The assertion does not match subclassed objects.&lt;/em&gt;</source>
          <target state="translated">주장 &lt;code&gt;value&lt;/code&gt; (의해 계시 된 타입 '객체의 목적 &lt;code&gt;Object.prototype.toString&lt;/code&gt; ).&lt;em&gt;어설 션이 하위 클래스 객체와 일치하지 않습니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="34979a8d617962469f745c7735e98eea69f2edb1" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; is false.</source>
          <target state="translated">그것을 주장 &lt;code&gt;value&lt;/code&gt; 이 false임을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="ce3c076ff146bb774a10fb7c1f07af931c9beb85" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; is not &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 이 아닌 것을 주장 &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="72d92a696113d22b897360529dd3562fff136e90" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; is not false.</source>
          <target state="translated">그것을 주장 &lt;code&gt;value&lt;/code&gt; 거짓이 아니다.</target>
        </trans-unit>
        <trans-unit id="7436d0db4db11afc6fa19d702aef80b81b463ea5" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; is not null.</source>
          <target state="translated">그것을 주장 &lt;code&gt;value&lt;/code&gt; 이 널이 아닌지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="6abaa6ff033955995b673c94c25ddd024304f197" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; is not true.</source>
          <target state="translated">그것을 주장 &lt;code&gt;value&lt;/code&gt; 이 참이 아니라고 주장합니다.</target>
        </trans-unit>
        <trans-unit id="c26924293ca913034310cb6088d3833593456424" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; is null.</source>
          <target state="translated">그것을 주장 &lt;code&gt;value&lt;/code&gt; 이 널 합니다 .</target>
        </trans-unit>
        <trans-unit id="1fa51e605f202c6cc6621090c94744ce7eecd21d" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; is true.</source>
          <target state="translated">그것을 주장 &lt;code&gt;value&lt;/code&gt; 이 참 합니다.</target>
        </trans-unit>
        <trans-unit id="e096022f96446b71d829439144694e5466ed5a9f" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt; matches the regular expression &lt;code&gt;regexp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 이 정규식과 일치 한다고 주장 &lt;code&gt;regexp&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="557f3ebf50eeedb92b27fd8f701f45b9d299f79c" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt;&amp;rsquo;s type is &lt;code&gt;name&lt;/code&gt;, as determined by &lt;code&gt;Object.prototype.toString&lt;/code&gt;.</source>
          <target state="translated">주장이 &lt;code&gt;value&lt;/code&gt; 의 형식은 &lt;code&gt;name&lt;/code&gt; 에 의해 결정되는, &lt;code&gt;Object.prototype.toString&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7ff7fcac1c33938166ee9037f60c831d86d6c139" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value&lt;/code&gt;&amp;rsquo;s type is &lt;em&gt;not&lt;/em&gt;&lt;code&gt;name&lt;/code&gt;, as determined by &lt;code&gt;Object.prototype.toString&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Object.prototype.toString&lt;/code&gt; 에 의해 결정된대로 &lt;code&gt;value&lt;/code&gt; 의 유형이 &lt;code&gt;name&lt;/code&gt; 이 &lt;em&gt;아니라고&lt;/em&gt; 주장 합니다. .</target>
        </trans-unit>
        <trans-unit id="ca43ce624e51966c6aa1179dc2820bb04b9a2c76" translate="yes" xml:space="preserve">
          <source>Asserts that a function changes the value of a property by an amount (delta).</source>
          <target state="translated">함수가 속성 값을 양 (델타)로 변경한다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="4b46e82a1cc5ceaddde0880b0a2ed2e3006bc9ac" translate="yes" xml:space="preserve">
          <source>Asserts that a function changes the value of a property.</source>
          <target state="translated">함수가 속성 값을 변경하도록 지정합니다.</target>
        </trans-unit>
        <trans-unit id="9e1296a5a630ea97adac0d3fd0e015cd0167c53d" translate="yes" xml:space="preserve">
          <source>Asserts that a function decreases a numeric object property or a function&amp;rsquo;s return value by an amount (delta)</source>
          <target state="translated">함수가 숫자 객체 속성 또는 함수의 반환 값을 양 (델타)만큼 줄 이도록 지정합니다.</target>
        </trans-unit>
        <trans-unit id="dd0a6a47236d7fb47971ac9a155b77aae1e05d2a" translate="yes" xml:space="preserve">
          <source>Asserts that a function decreases a numeric object property.</source>
          <target state="translated">함수가 숫자 객체 속성을 줄 이도록 지정합니다.</target>
        </trans-unit>
        <trans-unit id="38c27998bd278771387b5657c4db8629b28056d3" translate="yes" xml:space="preserve">
          <source>Asserts that a function does not change the value of a property or of a function&amp;rsquo;s return value by an amount (delta)</source>
          <target state="translated">함수가 속성의 값이나 함수의 반환 값을 양 (델타)만큼 변경하지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="0389d8ab4a79aaaa10e8f7018367896cd9e1f20f" translate="yes" xml:space="preserve">
          <source>Asserts that a function does not change the value of a property.</source>
          <target state="translated">함수가 속성 값을 변경하지 않도록 지정합니다.</target>
        </trans-unit>
        <trans-unit id="a99b727fa1b3ad2e3ce7657e90549e3d58fffffc" translate="yes" xml:space="preserve">
          <source>Asserts that a function does not decreases a numeric object property or a function&amp;rsquo;s return value by an amount (delta)</source>
          <target state="translated">함수가 숫자 객체 속성이나 함수의 반환 값을 양 (델타)만큼 줄이지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="3e788f04fb19a15b1e0a1a1f3f07dd9a90754751" translate="yes" xml:space="preserve">
          <source>Asserts that a function does not decreases a numeric object property.</source>
          <target state="translated">함수가 숫자 객체 속성을 줄이지 않도록 지정합니다.</target>
        </trans-unit>
        <trans-unit id="3874cb6ee9d451c679661d4154e0f55307cb7546" translate="yes" xml:space="preserve">
          <source>Asserts that a function does not increase a numeric object property or function&amp;rsquo;s return value by an amount (delta).</source>
          <target state="translated">함수가 숫자 객체 속성 또는 함수의 반환 값을 양 (델타)만큼 늘리지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="e360f51f3ca30b94601969dbc8b67f637370b44c" translate="yes" xml:space="preserve">
          <source>Asserts that a function does not increase a numeric object property.</source>
          <target state="translated">함수가 숫자 객체 속성을 증가시키지 않도록 지정합니다.</target>
        </trans-unit>
        <trans-unit id="748fef5c502f5d43c094b66433042cbe964f9e4c" translate="yes" xml:space="preserve">
          <source>Asserts that a function increases a numeric object property or a function&amp;rsquo;s return value by an amount (delta).</source>
          <target state="translated">함수가 숫자 객체 속성 또는 함수의 반환 값을 양 (델타)만큼 증가 시키도록 지정합니다.</target>
        </trans-unit>
        <trans-unit id="fe84adf83da13a1ac3c232bcc018edcd4851f753" translate="yes" xml:space="preserve">
          <source>Asserts that a function increases a numeric object property.</source>
          <target state="translated">함수가 숫자 객체 속성을 증가 시킨다고 주장합니다.</target>
        </trans-unit>
        <trans-unit id="e0c380e79d39350ad067390ead13134f35157e1d" translate="yes" xml:space="preserve">
          <source>Asserts that non-object, non-array value &lt;code&gt;inList&lt;/code&gt; appears in the flat array &lt;code&gt;list&lt;/code&gt;.</source>
          <target state="translated">객체가 아닌 비 배열 값 &lt;code&gt;inList&lt;/code&gt; 가 평면 배열 &lt;code&gt;list&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="36296302652a165c12643e0f520c77eb04ff104c" translate="yes" xml:space="preserve">
          <source>Asserts that the target array has the same members as the given array &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="translated">대상 배열에 지정된 배열 &lt;code&gt;set&lt;/code&gt; 동일한 멤버가 있다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="150f36caa3bf4ed5a46be4cd8d02cf98c8c2d420" translate="yes" xml:space="preserve">
          <source>Asserts that the target contains values. For arrays and strings, it checks the &lt;code&gt;length&lt;/code&gt; property. For &lt;code&gt;Map&lt;/code&gt; and &lt;code&gt;Set&lt;/code&gt; instances, it checks the &lt;code&gt;size&lt;/code&gt; property. For non-function objects, it gets the count of own enumerable string keys.</source>
          <target state="translated">대상에 값이 포함되어 있는지 확인합니다. 배열과 문자열의 경우 &lt;code&gt;length&lt;/code&gt; 속성을 확인합니다 . 들어 &lt;code&gt;Map&lt;/code&gt; 및 &lt;code&gt;Set&lt;/code&gt; 인스턴스, 그것은 확인 &lt;code&gt;size&lt;/code&gt; 속성을. 함수가 아닌 객체의 경우 자체 열거 가능한 문자열 키의 개수를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="fffc293df24a24e7da6797b45076a2a2e6cc898d" translate="yes" xml:space="preserve">
          <source>Asserts that the target does not contain any values. For arrays and strings, it checks the &lt;code&gt;length&lt;/code&gt; property. For &lt;code&gt;Map&lt;/code&gt; and &lt;code&gt;Set&lt;/code&gt; instances, it checks the &lt;code&gt;size&lt;/code&gt; property. For non-function objects, it gets the count of own enumerable string keys.</source>
          <target state="translated">대상에 값이 포함되어 있지 않다고 가정합니다. 배열과 문자열의 경우 &lt;code&gt;length&lt;/code&gt; 속성을 확인합니다 . 들어 &lt;code&gt;Map&lt;/code&gt; 및 &lt;code&gt;Set&lt;/code&gt; 인스턴스, 그것은 확인 &lt;code&gt;size&lt;/code&gt; 속성을. 함수가 아닌 객체의 경우 열거 가능한 자체 문자열 키의 개수를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="8cec78b8fdeef4a04b965c34940439bc821a6fcd" translate="yes" xml:space="preserve">
          <source>Asserts that the target has a property with the given key &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">대상에 지정된 키 &lt;code&gt;name&lt;/code&gt; 가진 속성이 있다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="d599fc8a00be19c7b3b785f4fe48fb2bb3540229" translate="yes" xml:space="preserve">
          <source>Asserts that the target has its own property descriptor with the given key &lt;code&gt;name&lt;/code&gt;. Enumerable and non-enumerable properties are included in the search.</source>
          <target state="translated">대상에 지정된 키 &lt;code&gt;name&lt;/code&gt; 가진 고유 한 속성 설명자가 있다고 가정합니다 . 열거 가능하고 열거 불가능한 속성이 검색에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="273890179db960ea55f400c9a1f17fe7d7cb47db" translate="yes" xml:space="preserve">
          <source>Asserts that the target is a member of the given array &lt;code&gt;list&lt;/code&gt;. However, it&amp;rsquo;s often best to assert that the target is equal to its expected value.</source>
          <target state="translated">대상이 지정된 배열 &lt;code&gt;list&lt;/code&gt; 의 구성원임을 확인합니다 . 그러나 목표가 예상 값과 동일하다고 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="a94f96c6acc817fdbaf53f09488f96257bbd3849" translate="yes" xml:space="preserve">
          <source>Asserts that the target is a number or a date greater than or equal to the given number or date &lt;code&gt;n&lt;/code&gt; respectively. However, it&amp;rsquo;s often best to assert that the target is equal to its expected value.</source>
          <target state="translated">대상이 각각 주어진 수 또는 날짜 &lt;code&gt;n&lt;/code&gt; 보다 크거나 같은 날짜인지 확인합니다 . 그러나 목표가 예상 값과 동일하다고 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="7496044cfd4bc3af37939ffea3a6ab8517c8f936" translate="yes" xml:space="preserve">
          <source>Asserts that the target is a number or a date greater than or equal to the given number or date &lt;code&gt;start&lt;/code&gt;, and less than or equal to the given number or date &lt;code&gt;finish&lt;/code&gt; respectively. However, it&amp;rsquo;s often best to assert that the target is equal to its expected value.</source>
          <target state="translated">대상이 주어진 숫자 또는 날짜 &lt;code&gt;start&lt;/code&gt; 보다 크거나 같고 주어진 숫자 또는 날짜 &lt;code&gt;finish&lt;/code&gt; 보다 작거나 같은 날짜임을 확인합니다 . 그러나 목표가 예상 값과 동일하다고 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="3079453fd42b3aba4cf04686b76cc9f73437141a" translate="yes" xml:space="preserve">
          <source>Asserts that the target is a number or a date greater than the given number or date &lt;code&gt;n&lt;/code&gt; respectively. However, it&amp;rsquo;s often best to assert that the target is equal to its expected value.</source>
          <target state="translated">대상이 각각 주어진 수 또는 날짜 &lt;code&gt;n&lt;/code&gt; 보다 큰 수 또는 날짜임을 가정합니다 . 그러나 목표가 예상 값과 동일하다고 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="94b08919a4e61ca44fd2ada6b8765f0357877d12" translate="yes" xml:space="preserve">
          <source>Asserts that the target is a number or a date less than or equal to the given number or date &lt;code&gt;n&lt;/code&gt; respectively. However, it&amp;rsquo;s often best to assert that the target is equal to its expected value.</source>
          <target state="translated">대상이 주어진 숫자 또는 날짜 &lt;code&gt;n&lt;/code&gt; 이하인 숫자 또는 날짜임을 가정합니다 . 그러나 목표가 예상 값과 동일하다고 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="0057ac975e0721ad87d36bbd02b6a79a0307ab03" translate="yes" xml:space="preserve">
          <source>Asserts that the target is a number or a date less than the given number or date &lt;code&gt;n&lt;/code&gt; respectively. However, it&amp;rsquo;s often best to assert that the target is equal to its expected value.</source>
          <target state="translated">대상이 각각 주어진 수 또는 날짜 &lt;code&gt;n&lt;/code&gt; 보다 작은 수 또는 날짜임을 가정합니다 . 그러나 목표가 예상 값과 동일하다고 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="898a15bec9301852519d7ce84930da44fb034090" translate="yes" xml:space="preserve">
          <source>Asserts that the target is a number that&amp;rsquo;s within a given +/- &lt;code&gt;delta&lt;/code&gt; range of the given number &lt;code&gt;expected&lt;/code&gt;. However, it&amp;rsquo;s often best to assert that the target is equal to its expected value.</source>
          <target state="translated">대상이 소정 +/- 이내의 수이다 주장 &lt;code&gt;delta&lt;/code&gt; 주어진 숫자 범위 &lt;code&gt;expected&lt;/code&gt; . 그러나 목표가 예상 값과 동일하다고 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="6b9d90b24a8f75faad0c1db89cf40fbddb852390" translate="yes" xml:space="preserve">
          <source>Asserts that the target is a number, and isn&amp;rsquo;t &lt;code&gt;NaN&lt;/code&gt; or positive/negative &lt;code&gt;Infinity&lt;/code&gt;.</source>
          <target state="translated">대상이 숫자이고 &lt;code&gt;NaN&lt;/code&gt; 또는 양수 / 음수 &lt;code&gt;Infinity&lt;/code&gt; 수가 아님을 확인 합니다.</target>
        </trans-unit>
        <trans-unit id="63f8eb364e487a4ac0aeda47b989bd4382783f4a" translate="yes" xml:space="preserve">
          <source>Asserts that the target is a truthy value (considered &lt;code&gt;true&lt;/code&gt; in boolean context). However, it&amp;rsquo;s often best to assert that the target is strictly (&lt;code&gt;===&lt;/code&gt;) or deeply equal to its expected value.</source>
          <target state="translated">대상이 진실한 값임을 확인합니다 ( 부울 컨텍스트 에서는 &lt;code&gt;true&lt;/code&gt; 로 간주 됨 ). 그러나 대상이 예상 값과 완전히 같거나 ( &lt;code&gt;===&lt;/code&gt; ) 동일하다고 주장하는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="67bbe3b8e577d49e712d3cdd4e4793ca7bd2a2de" translate="yes" xml:space="preserve">
          <source>Asserts that the target is an &lt;code&gt;arguments&lt;/code&gt; object.</source>
          <target state="translated">대상이 &lt;code&gt;arguments&lt;/code&gt; 객체 임을 확인 합니다.</target>
        </trans-unit>
        <trans-unit id="e3dfe5ec0ad0890fc7bb3c50a81c2dfd00f86fb3" translate="yes" xml:space="preserve">
          <source>Asserts that the target is an instance of the given &lt;code&gt;constructor&lt;/code&gt;.</source>
          <target state="translated">대상이 지정된 &lt;code&gt;constructor&lt;/code&gt; 의 인스턴스임을 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="8348737cb7f1b1eb0aa84ff9df07e3b7f9d354c3" translate="yes" xml:space="preserve">
          <source>Asserts that the target is deeply equal to the given &lt;code&gt;obj&lt;/code&gt;. See the &lt;code&gt;deep-eql&lt;/code&gt; project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.</source>
          <target state="translated">대상이 지정된 &lt;code&gt;obj&lt;/code&gt; 와 깊이 동일하다고 가정합니다 . 딥 평등 알고리즘에 대한 자세한 내용은 &lt;code&gt;deep-eql&lt;/code&gt; 프로젝트 페이지 (https://github.com/chaijs/deep-eql)를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9d8e910a4c236be911e8e3680d5f8823762b9e5a" translate="yes" xml:space="preserve">
          <source>Asserts that the target is either &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">대상이 &lt;code&gt;null&lt;/code&gt; 또는 &lt;code&gt;undefined&lt;/code&gt; 임을 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="67df2ea72f9045e610401941511623b7b62f10c3" translate="yes" xml:space="preserve">
          <source>Asserts that the target is equal &lt;code&gt;expected&lt;/code&gt;, to within a +/- &lt;code&gt;delta&lt;/code&gt; range.</source>
          <target state="translated">목표가 +/- &lt;code&gt;delta&lt;/code&gt; 범위 내에서 동일한 &lt;code&gt;expected&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="84bd232998040ac6d5eee89c0928f2b151c5c48a" translate="yes" xml:space="preserve">
          <source>Asserts that the target is exactly &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">대상이 정확히 &lt;code&gt;NaN&lt;/code&gt; 이라고 가정 합니다.</target>
        </trans-unit>
        <trans-unit id="f2973bbdb82bf7da8fa64ee69d607c30259164f6" translate="yes" xml:space="preserve">
          <source>Asserts that the target is extensible, which means that new properties can be added to it. Primitives are never extensible.</source>
          <target state="translated">대상이 확장 가능하다는 것을 확인하여 새로운 속성을 추가 할 수 있습니다. 프리미티브는 확장 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="fe5921578508e0b269b513ca97b78bf2aafa17d7" translate="yes" xml:space="preserve">
          <source>Asserts that the target is frozen, which means that new properties can&amp;rsquo;t be added to it, and its existing properties can&amp;rsquo;t be reassigned to different values, reconfigured, or deleted. Primitives are always frozen.</source>
          <target state="translated">대상이 고정되어 새 속성을 추가 할 수 없으며 기존 속성을 다른 값으로 다시 할당하거나 재구성하거나 삭제할 수 없습니다. 프리미티브는 항상 동결됩니다.</target>
        </trans-unit>
        <trans-unit id="5d319cf14e441dc6133db74f34e2441924d483aa" translate="yes" xml:space="preserve">
          <source>Asserts that the target is neither &lt;code&gt;null&lt;/code&gt; nor &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">대상이 &lt;code&gt;null&lt;/code&gt; 또는 &lt;code&gt;undefined&lt;/code&gt; 가 아닌지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="41e4d23b3c18a0a49bff74052439534e3c7bfbe1" translate="yes" xml:space="preserve">
          <source>Asserts that the target is not strictly (&lt;code&gt;===&lt;/code&gt;) equal to either &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;. However, it&amp;rsquo;s often best to assert that the target is equal to its expected value.</source>
          <target state="translated">대상이 &lt;code&gt;null&lt;/code&gt; 또는 &lt;code&gt;undefined&lt;/code&gt; 와 엄격하게 ( &lt;code&gt;===&lt;/code&gt; ) 같지 않다고 가정 합니다. 그러나 목표가 예상 값과 동일하다고 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="5d350dfd3cf5a67fef7e6e933960416d2ebf389e" translate="yes" xml:space="preserve">
          <source>Asserts that the target is sealed, which means that new properties can&amp;rsquo;t be added to it, and its existing properties can&amp;rsquo;t be reconfigured or deleted. However, it&amp;rsquo;s possible that its existing properties can still be reassigned to different values. Primitives are always sealed.</source>
          <target state="translated">대상이 봉인되어 새 속성을 추가 할 수 없으며 기존 속성을 다시 구성하거나 삭제할 수 없습니다. 그러나 기존 속성을 여전히 다른 값으로 재 할당 할 수 있습니다. 프리미티브는 항상 봉인되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e543fd4d9468b7112665b75df638d0ad6250a90" translate="yes" xml:space="preserve">
          <source>Asserts that the target is strictly (&lt;code&gt;===&lt;/code&gt;) equal to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">대상이 엄격하게 ( &lt;code&gt;===&lt;/code&gt; ) &lt;code&gt;false&lt;/code&gt; 와 같다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="3ae3dea86477062c2c21e36beca837f0e0ae8911" translate="yes" xml:space="preserve">
          <source>Asserts that the target is strictly (&lt;code&gt;===&lt;/code&gt;) equal to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">대상이 ( &lt;code&gt;===&lt;/code&gt; ) 엄격하게 &lt;code&gt;null&lt;/code&gt; 과 같다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="89fd888305c1cd9e9170431b579e6558565322b5" translate="yes" xml:space="preserve">
          <source>Asserts that the target is strictly (&lt;code&gt;===&lt;/code&gt;) equal to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">대상이 엄격하게 ( &lt;code&gt;===&lt;/code&gt; ) &lt;code&gt;true&lt;/code&gt; 와 같다고 가정 합니다 .</target>
        </trans-unit>
        <trans-unit id="359f24a51e27196c3b5816e21a6ec77307fb6fe2" translate="yes" xml:space="preserve">
          <source>Asserts that the target is strictly (&lt;code&gt;===&lt;/code&gt;) equal to &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">대상이 &lt;code&gt;undefined&lt;/code&gt; 와 엄격하게 ( &lt;code&gt;===&lt;/code&gt; ) 동일하다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="b7e4fa1d81216b5a308a7d7031861eaee895e05b" translate="yes" xml:space="preserve">
          <source>Asserts that the target is strictly (&lt;code&gt;===&lt;/code&gt;) equal to the given &lt;code&gt;val&lt;/code&gt;.</source>
          <target state="translated">대상이 주어진 &lt;code&gt;val&lt;/code&gt; 과 엄격하게 ( &lt;code&gt;===&lt;/code&gt; ) 같다고 주장합니다 .</target>
        </trans-unit>
        <trans-unit id="7f13cc6f3d69eca5030566518b4469bcd784878f" translate="yes" xml:space="preserve">
          <source>Asserts that the target matches the given regular expression &lt;code&gt;re&lt;/code&gt;.</source>
          <target state="translated">대상이 주어진 정규 표현식 &lt;code&gt;re&lt;/code&gt; 와 일치하는지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="adb46f4114109bb35c5fd0c18eb0857fd857979d" translate="yes" xml:space="preserve">
          <source>Asserts that the target object, array, map, or set has the given keys. Only the target&amp;rsquo;s own inherited properties are included in the search.</source>
          <target state="translated">대상 객체, 배열, 맵 또는 세트에 지정된 키가 있는지 확인합니다. 대상 자체의 상속 된 속성 만 검색에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="9132f7d0a6aacdd4d6c87a30594d30c9903639e4" translate="yes" xml:space="preserve">
          <source>Asserts that the target string contains the given substring &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">대상 문자열에 지정된 하위 문자열 &lt;code&gt;str&lt;/code&gt; 이 포함되어 있는지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="bdeaf45ba20954bf86d66428a180111dbdce3cc6" translate="yes" xml:space="preserve">
          <source>Asserts that the target&amp;rsquo;s &lt;code&gt;length&lt;/code&gt; or &lt;code&gt;size&lt;/code&gt; is equal to the given number &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="translated">대상의 &lt;code&gt;length&lt;/code&gt; 또는 &lt;code&gt;size&lt;/code&gt; 가 주어진 수 &lt;code&gt;n&lt;/code&gt; 과 같다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="51ae86b07b7f2dd18b20cea1b0902e586fcb8a44" translate="yes" xml:space="preserve">
          <source>Asserts that the target&amp;rsquo;s type is equal to the given string &lt;code&gt;type&lt;/code&gt;. Types are case insensitive. See the &lt;code&gt;type-detect&lt;/code&gt; project page for info on the type detection algorithm: https://github.com/chaijs/type-detect.</source>
          <target state="translated">대상의 유형이 주어진 문자열 &lt;code&gt;type&lt;/code&gt; 과 같다고 가정 합니다 . 유형은 대소 문자를 구분하지 않습니다. 유형 감지 알고리즘에 대한 정보 는 &lt;code&gt;type-detect&lt;/code&gt; 프로젝트 페이지 (https://github.com/chaijs/type-detect)를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7f5fd15d3d88982784f5e6730085285fa71ab74e" translate="yes" xml:space="preserve">
          <source>Asserts that value is NaN.</source>
          <target state="translated">값이 NaN임을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="63d4fb6fd2b625c8c0782d291975cf8f30015645" translate="yes" xml:space="preserve">
          <source>Asserts that value is not NaN.</source>
          <target state="translated">값이 NaN이 아니라고 주장합니다.</target>
        </trans-unit>
        <trans-unit id="38b5d0dd2a1d99cba157a215ae014edf10488b48" translate="yes" xml:space="preserve">
          <source>BDD</source>
          <target state="translated">BDD</target>
        </trans-unit>
        <trans-unit id="2bcf9283ff942623c0fc4d14df3c0c0886766f14" translate="yes" xml:space="preserve">
          <source>Basic Assertion</source>
          <target state="translated">기본 어설 션</target>
        </trans-unit>
        <trans-unit id="90bc2fc815d0e93c10c1ee0c8e5d57c6754cbdb9" translate="yes" xml:space="preserve">
          <source>Basically does the same thing as the &lt;code&gt;in&lt;/code&gt; operator but works properly with null/undefined values and other primitives.</source>
          <target state="translated">기본적으로 &lt;code&gt;in&lt;/code&gt; 연산자 와 동일한 기능을 수행 하지만 null / 정의되지 않은 값 및 기타 기본 요소와 올바르게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="2ef32c1c3649a77affdab59564b072b69a07b5bc" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;.empty&lt;/code&gt; does different things based on the target&amp;rsquo;s type, it&amp;rsquo;s important to check the target&amp;rsquo;s type before using &lt;code&gt;.empty&lt;/code&gt;. See the &lt;code&gt;.a&lt;/code&gt; doc for info on testing a target&amp;rsquo;s type.</source>
          <target state="translated">때문에 &lt;code&gt;.empty&lt;/code&gt; 가 대상의 유형에 따라 서로 다른 일을, 그것을 사용하기 전에 대상의 종류를 확인하는 것이 중요합니다 &lt;code&gt;.empty&lt;/code&gt; 을 . 대상 유형 테스트에 대한 정보 는 &lt;code&gt;.a&lt;/code&gt; 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8b56ec6b8ca065d3535e59fec8faeb29dca4921e" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;.include&lt;/code&gt; does different things based on the target&amp;rsquo;s type, it&amp;rsquo;s important to check the target&amp;rsquo;s type before using &lt;code&gt;.include&lt;/code&gt;. See the &lt;code&gt;.a&lt;/code&gt; doc for info on testing a target&amp;rsquo;s type.</source>
          <target state="translated">때문에 &lt;code&gt;.include&lt;/code&gt; 는 대상의 유형에 따라 서로 다른 일을, 그것을 사용하기 전에 대상의 종류를 확인하는 것이 중요합니다 &lt;code&gt;.include&lt;/code&gt; 을 . 대상 유형 테스트에 대한 정보 는 &lt;code&gt;.a&lt;/code&gt; 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3490c2e31594c081b924d4bddbda39bb6315eb38" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;.keys&lt;/code&gt; does different things based on the target&amp;rsquo;s type, it&amp;rsquo;s important to check the target&amp;rsquo;s type before using &lt;code&gt;.keys&lt;/code&gt;. See the &lt;code&gt;.a&lt;/code&gt; doc for info on testing a target&amp;rsquo;s type.</source>
          <target state="translated">때문에 &lt;code&gt;.keys&lt;/code&gt; 가 대상의 유형에 따라 서로 다른 일을, 그것을 사용하기 전에 대상의 종류를 확인하는 것이 중요합니다 &lt;code&gt;.keys&lt;/code&gt; 을 . 대상 유형 테스트에 대한 정보 는 &lt;code&gt;.a&lt;/code&gt; 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="122e6aa1ededee68d388393e1e6fdae7deb63b63" translate="yes" xml:space="preserve">
          <source>Before we begin adding methods and properties to the language chain, we should first examine how to invoke an assertion, and the expected behavior should it fail.</source>
          <target state="translated">언어 체인에 메서드와 속성을 추가하기 전에 먼저 어설 션을 호출하는 방법을 살펴보고 실패 할 경우 예상되는 동작을 검사해야합니다.</target>
        </trans-unit>
        <trans-unit id="9dc6c6b0c8ac939ecd26f91d4292d2b6a3507178" translate="yes" xml:space="preserve">
          <source>Beware of some common mistakes when using the &lt;code&gt;throw&lt;/code&gt; assertion. One common mistake is to accidentally invoke the function yourself instead of letting the &lt;code&gt;throw&lt;/code&gt; assertion invoke the function for you. For example, when testing if a function named &lt;code&gt;fn&lt;/code&gt; throws, provide &lt;code&gt;fn&lt;/code&gt; instead of &lt;code&gt;fn()&lt;/code&gt; as the target for the assertion.</source>
          <target state="translated">&lt;code&gt;throw&lt;/code&gt; 어설 션을 사용할 때 발생하는 일반적인 실수에주의하십시오 . 일반적인 실수 중 하나는 &lt;code&gt;throw&lt;/code&gt; 어설 션이 함수를 호출 하도록하는 대신 실수로 함수를 직접 호출하는 것입니다. 예를 들어, &lt;code&gt;fn&lt;/code&gt; 이라는 함수 가 throw 되는지 테스트 할 때 어설 션의 대상으로 &lt;code&gt;fn()&lt;/code&gt; 대신 &lt;code&gt;fn&lt;/code&gt; 을 제공 하십시오.</target>
        </trans-unit>
        <trans-unit id="54a2cf5e634dbba0be2bf8a55f79252f5c790bdb" translate="yes" xml:space="preserve">
          <source>Browser</source>
          <target state="translated">Browser</target>
        </trans-unit>
        <trans-unit id="2844dec5e79992d9f59d1b2b59ba168205221d9f" translate="yes" xml:space="preserve">
          <source>Building a Helper</source>
          <target state="translated">도우미 만들기</target>
        </trans-unit>
        <trans-unit id="2d07183d2f366ec9513382b2ad608fd4ae367374" translate="yes" xml:space="preserve">
          <source>But the following would not&amp;hellip;</source>
          <target state="translated">그러나 다음은 ...</target>
        </trans-unit>
        <trans-unit id="537728e01ec79be7e98a77a38d092bda1a36ed4b" translate="yes" xml:space="preserve">
          <source>By default, all of the target&amp;rsquo;s properties are searched when working with objects. This includes properties that are inherited and/or non-enumerable. Add &lt;code&gt;.own&lt;/code&gt; earlier in the chain to exclude the target&amp;rsquo;s inherited properties from the search.</source>
          <target state="translated">기본적으로 객체 작업시 대상의 모든 속성이 검색됩니다. 여기에는 상속 및 / 또는 열거 불가능한 속성이 포함됩니다. 체인에서 이전에 &lt;code&gt;.own&lt;/code&gt; 을 추가 하여 검색에서 대상의 상속 된 속성을 제외하십시오.</target>
        </trans-unit>
        <trans-unit id="2c40b590b68a59c217cd6ff51c57ec8b669a7abe" translate="yes" xml:space="preserve">
          <source>By default, both arrays must be the same size. Add &lt;code&gt;.include&lt;/code&gt; earlier in the chain to require that the target&amp;rsquo;s members be a superset of the expected members. Note that duplicates are ignored in the subset when &lt;code&gt;.include&lt;/code&gt; is added.</source>
          <target state="translated">기본적으로 두 배열의 크기는 같아야합니다. 체인의 이전에 &lt;code&gt;.include&lt;/code&gt; 를 추가 하여 대상의 멤버가 예상 멤버의 상위 집합이되도록합니다. &lt;code&gt;.include&lt;/code&gt; 가 추가 되면 서브 세트에서 중복이 무시 됩니다.</target>
        </trans-unit>
        <trans-unit id="6032aaf5259932df1a08a38b077a8bdec11af786" translate="yes" xml:space="preserve">
          <source>By default, members are compared using strict (&lt;code&gt;===&lt;/code&gt;) equality. Add &lt;code&gt;.deep&lt;/code&gt; earlier in the chain to use deep equality instead. See the &lt;code&gt;deep-eql&lt;/code&gt; project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.</source>
          <target state="translated">기본적으로 멤버는 엄격한 ( &lt;code&gt;===&lt;/code&gt; ) 동등성을 사용하여 비교됩니다 . 대신 체인에 &lt;code&gt;.deep&lt;/code&gt; 을 추가 하여 깊은 평등을 대신 사용하십시오. 딥 평등 알고리즘에 대한 자세한 내용은 &lt;code&gt;deep-eql&lt;/code&gt; 프로젝트 페이지 (https://github.com/chaijs/deep-eql)를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="11bc2c0a0d255eddb90894da552baa53d5da33db" translate="yes" xml:space="preserve">
          <source>By default, order doesn&amp;rsquo;t matter. Add &lt;code&gt;.ordered&lt;/code&gt; earlier in the chain to require that members appear in the same order.</source>
          <target state="translated">기본적으로 순서는 중요하지 않습니다. 멤버를 동일한 순서로 표시하려면 체인의 앞부분에 &lt;code&gt;.ordered&lt;/code&gt; 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="458edf5884d9824448780817106b439b67138186" translate="yes" xml:space="preserve">
          <source>By default, strict (&lt;code&gt;===&lt;/code&gt;) equality is used to compare array members and object properties. Add &lt;code&gt;.deep&lt;/code&gt; earlier in the chain to use deep equality instead (WeakSet targets are not supported). See the &lt;code&gt;deep-eql&lt;/code&gt; project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.</source>
          <target state="translated">기본적으로 엄격한 ( &lt;code&gt;===&lt;/code&gt; ) 동등성은 배열 멤버와 객체 속성을 비교하는 데 사용됩니다. 대신 체인에 &lt;code&gt;.deep&lt;/code&gt; 을 추가 하여 깊은 평등을 대신 사용하십시오 (WeakSet 대상은 지원되지 않음). 딥 평등 알고리즘에 대한 자세한 내용은 &lt;code&gt;deep-eql&lt;/code&gt; 프로젝트 페이지 (https://github.com/chaijs/deep-eql)를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="081ef4a7efb28b087082c16b84b7ea7e0b383ac4" translate="yes" xml:space="preserve">
          <source>By default, strict (&lt;code&gt;===&lt;/code&gt;) equality is used to compare keys of maps and sets. Add &lt;code&gt;.deep&lt;/code&gt; earlier in the chain to use deep equality instead. See the &lt;code&gt;deep-eql&lt;/code&gt; project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.</source>
          <target state="translated">기본적 으로 맵과 세트의 키를 비교하는 데 엄격한 ( &lt;code&gt;===&lt;/code&gt; ) 동등성이 사용됩니다. 대신 체인에 &lt;code&gt;.deep&lt;/code&gt; 을 추가 하여 깊은 평등을 대신 사용하십시오. 딥 평등 알고리즘에 대한 자세한 내용은 &lt;code&gt;deep-eql&lt;/code&gt; 프로젝트 페이지 (https://github.com/chaijs/deep-eql)를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="604cd3c3b499c0f93876dc1f32aa32fcc6503eac" translate="yes" xml:space="preserve">
          <source>By default, strict (&lt;code&gt;===&lt;/code&gt;) equality is used. Add &lt;code&gt;.deep&lt;/code&gt; earlier in the chain to use deep equality instead. See the &lt;code&gt;deep-eql&lt;/code&gt; project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.</source>
          <target state="translated">기본적으로 엄격한 ( &lt;code&gt;===&lt;/code&gt; ) 동등성이 사용됩니다. 대신 체인에 &lt;code&gt;.deep&lt;/code&gt; 을 추가 하여 깊은 평등을 대신 사용하십시오. 딥 평등 알고리즘에 대한 자세한 내용은 &lt;code&gt;deep-eql&lt;/code&gt; 프로젝트 페이지 (https://github.com/chaijs/deep-eql)를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0852703a922e3f70b9818fa25666cc7d0cbd8d84" translate="yes" xml:space="preserve">
          <source>By default, the target must have all of the given keys and no more. Add &lt;code&gt;.any&lt;/code&gt; earlier in the chain to only require that the target have at least one of the given keys. Also, add &lt;code&gt;.not&lt;/code&gt; earlier in the chain to negate &lt;code&gt;.keys&lt;/code&gt;. It&amp;rsquo;s often best to add &lt;code&gt;.any&lt;/code&gt; when negating &lt;code&gt;.keys&lt;/code&gt;, and to use &lt;code&gt;.all&lt;/code&gt; when asserting &lt;code&gt;.keys&lt;/code&gt; without negation.</source>
          <target state="translated">기본적으로 대상은 주어진 키를 모두 가지고 있어야합니다. 체인에 &lt;code&gt;.any&lt;/code&gt; 를 추가 하면 대상에 지정된 키 중 하나 이상이 필요합니다. 또한, 추가 &lt;code&gt;.not&lt;/code&gt; 부정 체인에 이전 &lt;code&gt;.keys&lt;/code&gt; . &lt;code&gt;.keys&lt;/code&gt; 를 부정 할 때 &lt;code&gt;.any&lt;/code&gt; 를 추가 하고 부정없이 &lt;code&gt;.keys&lt;/code&gt; 를 주장 할 때 &lt;code&gt;.all&lt;/code&gt; 을 사용 하는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="017dfec72e13f0aeae1d25715c3bbd7b643b8d43" translate="yes" xml:space="preserve">
          <source>By now, that should be self-explanatory. Now for our property function.</source>
          <target state="translated">지금까지는 설명이 필요합니다. 이제 우리의 속성 함수입니다.</target>
        </trans-unit>
        <trans-unit id="71077d035a6f340742238c7fe8230ab71f827378" translate="yes" xml:space="preserve">
          <source>Can also be accessed directly from &lt;code&gt;chai.Assertion&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;chai.Assertion&lt;/code&gt; 에서 직접 액세스 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b2a81f75e14d90f013f47dd0ccccc6cee5095664" translate="yes" xml:space="preserve">
          <source>Causes all &lt;code&gt;.equal&lt;/code&gt;, &lt;code&gt;.include&lt;/code&gt;, &lt;code&gt;.members&lt;/code&gt;, &lt;code&gt;.keys&lt;/code&gt;, and &lt;code&gt;.property&lt;/code&gt; assertions that follow in the chain to use deep equality instead of strict (&lt;code&gt;===&lt;/code&gt;) equality. See the &lt;code&gt;deep-eql&lt;/code&gt; project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.</source>
          <target state="translated">체인에서 뒤 따르는 모든 &lt;code&gt;.equal&lt;/code&gt; , &lt;code&gt;.include&lt;/code&gt; , &lt;code&gt;.members&lt;/code&gt; , &lt;code&gt;.keys&lt;/code&gt; 및 &lt;code&gt;.property&lt;/code&gt; 어설 션이 엄격한 ( &lt;code&gt;===&lt;/code&gt; ) 평등 대신 깊은 평등을 사용하도록합니다 . 딥 평등 알고리즘에 대한 자세한 내용은 &lt;code&gt;deep-eql&lt;/code&gt; 프로젝트 페이지 (https://github.com/chaijs/deep-eql)를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e28e2fabfb3b849ef1ebd1ceba7e099579721b58" translate="yes" xml:space="preserve">
          <source>Causes all &lt;code&gt;.keys&lt;/code&gt; assertions that follow in the chain to only require that the target have at least one of the given keys. This is the opposite of &lt;code&gt;.all&lt;/code&gt;, which requires that the target have all of the given keys.</source>
          <target state="translated">체인에서 뒤 따르는 모든 &lt;code&gt;.keys&lt;/code&gt; 어설 션이 대상에 지정된 키 중 하나 이상 만 요구하도록합니다. 이는 &lt;code&gt;.all&lt;/code&gt; 과 반대이며 , 대상에 지정된 키가 모두 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="6d019124f5d39cc716affdb900218b7b731e8579" translate="yes" xml:space="preserve">
          <source>Causes all &lt;code&gt;.keys&lt;/code&gt; assertions that follow in the chain to require that the target have all of the given keys. This is the opposite of &lt;code&gt;.any&lt;/code&gt;, which only requires that the target have at least one of the given keys.</source>
          <target state="translated">체인에서 뒤에 오는 모든 &lt;code&gt;.keys&lt;/code&gt; 어설 션이 대상에 지정된 키가 모두 있어야합니다. 이것은 &lt;code&gt;.any&lt;/code&gt; 와 반대이며 , 대상에 지정된 키 중 하나 이상 만 있으면됩니다.</target>
        </trans-unit>
        <trans-unit id="81a80b2f83b5d16e32d2c1325a67aa3ccab23d03" translate="yes" xml:space="preserve">
          <source>Causes all &lt;code&gt;.members&lt;/code&gt; assertions that follow in the chain to require that members be in the same order.</source>
          <target state="translated">체인에서 뒤 따르는 모든 &lt;code&gt;.members&lt;/code&gt; 어설 션이 멤버의 순서가 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="3ec7fca46257e5db64277b05d906a8ac573390ad" translate="yes" xml:space="preserve">
          <source>Causes all &lt;code&gt;.property&lt;/code&gt; and &lt;code&gt;.include&lt;/code&gt; assertions that follow in the chain to ignore inherited properties.</source>
          <target state="translated">체인에서 뒤에 나오는 모든 &lt;code&gt;.property&lt;/code&gt; 및 &lt;code&gt;.include&lt;/code&gt; 어설 션이 상속 된 속성을 무시하도록합니다.</target>
        </trans-unit>
        <trans-unit id="d10525a99b239e81e31412cc7b4c5dc1217f3627" translate="yes" xml:space="preserve">
          <source>Chai</source>
          <target state="translated">Chai</target>
        </trans-unit>
        <trans-unit id="f1f03ea1ce6a98534c55d479a3a76b0f2a8a123e" translate="yes" xml:space="preserve">
          <source>Chai Assertion Library</source>
          <target state="translated">차이 어설 션 라이브러리</target>
        </trans-unit>
        <trans-unit id="44510db9ecea5825c60d4f84c4255af69dbfbb15" translate="yes" xml:space="preserve">
          <source>Chai comes with a number of utilities to assist in the construction of assertions, but it does not provide these directly on the &lt;code&gt;chai&lt;/code&gt; export. These can be accessed by using the &lt;code&gt;use&lt;/code&gt; method of the chai export, which accepts a single function as an argument.</source>
          <target state="translated">차이는 주장을 구성하는 데 도움이되는 여러 유틸리티를 제공하지만 &lt;code&gt;chai&lt;/code&gt; 수출 에 직접 제공하지는 않는다 . 이것들은 chai export 의 &lt;code&gt;use&lt;/code&gt; 메소드를 사용 하여 액세스 할 수 있으며 , 단일 함수를 인수로 허용합니다.</target>
        </trans-unit>
        <trans-unit id="cebcae2dac717b61563d8c80b005f0832a2ea14b" translate="yes" xml:space="preserve">
          <source>Chai includes a unique utility that allows you to construct a language chain that can function as either a property or a method. We call these &amp;ldquo;chainable methods&amp;rdquo;. Despite the fact that we demonstrated the &amp;ldquo;is model of model&amp;rdquo; as both a property and a method, these assertions are NOT a good use case for chainable methods.</source>
          <target state="translated">Chai에는 속성 또는 메서드로 기능 할 수있는 언어 체인을 구성 할 수있는 고유 한 유틸리티가 포함되어 있습니다. 우리는 이것을 &quot;체인 가능한 방법&quot;이라고 부릅니다. 우리는 속성과 방법으로&amp;ldquo;모델의 모델&amp;rdquo;을 보여 주었음에도 불구하고 이러한 주장은 연쇄 가능한 방법의 좋은 사용 사례가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="0571bbd9129673deddd35b23944d3878612fe7b0" translate="yes" xml:space="preserve">
          <source>Chai is available for both node.js and the browser using any test framework you like. There are also a number of other tools that include Chai.</source>
          <target state="translated">Chai는 원하는 테스트 프레임 워크를 사용하여 node.js와 브라우저 모두에서 사용할 수 있습니다. Chai를 포함하는 다른 도구들도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f63f3e6a19dd7503d460ac2ca7bc699a3d3c2132" translate="yes" xml:space="preserve">
          <source>Chai provides a number of utilities that allow you to overwrite existing behavior of an already existing assertion, but revert to the already defined assertion behavior if the subject of the assertion does not meet your criteria.</source>
          <target state="translated">Chai는 기존 어설 션의 기존 동작을 덮어 쓸 수 있지만 어설 션의 주제가 기준을 충족하지 않는 경우 이미 정의 된 어설 션 동작으로 되돌릴 수있는 여러 유틸리티를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="3570bc1a8df218d79836087c7a427a3f2e9364ac" translate="yes" xml:space="preserve">
          <source>Chai will check the first argument; if it is &lt;code&gt;true&lt;/code&gt; then the assertion passed, but if it is &lt;code&gt;false&lt;/code&gt; the assertion failed and the first error message will be thrown as part of a &lt;code&gt;chai.AssertionError&lt;/code&gt;. Conversely, if the language chain was negated, it will consider &lt;code&gt;false&lt;/code&gt; a pass and &lt;code&gt;true&lt;/code&gt; a failure. The second error message will be included in the thrown error instead.</source>
          <target state="translated">차이는 첫 번째 주장을 점검 할 것이다. 이 경우 &lt;code&gt;true&lt;/code&gt; 다음 주장은 통과하지만,이 경우 &lt;code&gt;false&lt;/code&gt; 주장에 실패하고 첫 번째 오류 메시지가의 한 부분으로 발생합니다 &lt;code&gt;chai.AssertionError&lt;/code&gt; . 언어 체인이 무효가 된 경우 반대로, 그것은 고려하게됩니다 &lt;code&gt;false&lt;/code&gt; 패스와 &lt;code&gt;true&lt;/code&gt; 실패. 두 번째 오류 메시지는 대신 발생한 오류에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="51414eda909f8ae7306e0e83b94401337b77ad35" translate="yes" xml:space="preserve">
          <source>Checks if an error&amp;rsquo;s message is compatible with a matcher (String or RegExp). If the message contains the String or passes the RegExp test, it is considered compatible.</source>
          <target state="translated">오류 메시지가 매처 (문자열 또는 RegExp)와 호환되는지 확인합니다. 메시지에 문자열이 포함되어 있거나 RegExp 테스트를 통과하면 호환되는 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="c6563256f3a8623366987cf93835b428593c615c" translate="yes" xml:space="preserve">
          <source>Checks if two constructors are compatible. This function can receive either an error constructor or an error instance as the &lt;code&gt;errorLike&lt;/code&gt; argument. Constructors are compatible if they&amp;rsquo;re the same or if one is an instance of another.</source>
          <target state="translated">두 생성자가 호환되는지 확인합니다. 이 함수는 &lt;code&gt;errorLike&lt;/code&gt; 인수 로 오류 생성자 또는 오류 인스턴스를 수신 할 수 있습니다 . 생성자가 동일하거나 다른 인스턴스 인 경우 호환됩니다.</target>
        </trans-unit>
        <trans-unit id="258a64dcf7da2074326f32328a831ff60111b96d" translate="yes" xml:space="preserve">
          <source>Checks if two instances are compatible (strict equal). Returns false if errorLike is not an instance of Error, because instances can only be compatible if they&amp;rsquo;re both error instances.</source>
          <target state="translated">두 인스턴스가 호환되는지 확인합니다 (엄격히 동일). errorLike가 Error의 인스턴스가 아닌 경우 false를 리턴합니다. 인스턴스는 두 개의 오류 인스턴스 인 경우에만 호환 가능하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="3204e3e3b4f17aa811cffa01603110f291c0ccb8" translate="yes" xml:space="preserve">
          <source>Compares two values using &lt;code&gt;operator&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;operator&lt;/code&gt; 를 사용하여 두 값을 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="c635be5b79fa820ea21fcde413bd41c853a31c64" translate="yes" xml:space="preserve">
          <source>Comparisons are performed using strict (&lt;code&gt;===&lt;/code&gt;) equality.</source>
          <target state="translated">엄격한 ( &lt;code&gt;===&lt;/code&gt; ) 동등성을 사용하여 비교를 수행 합니다.</target>
        </trans-unit>
        <trans-unit id="f3dcd2d707d66b242a116921295d344f79269ba2" translate="yes" xml:space="preserve">
          <source>Composing Error Messages</source>
          <target state="translated">오류 메시지 작성</target>
        </trans-unit>
        <trans-unit id="809b2576a8bda8fff4ffa104ad0052601f19b82b" translate="yes" xml:space="preserve">
          <source>Composing an Assertion</source>
          <target state="translated">어설 션 작성</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">Configuration</target>
        </trans-unit>
        <trans-unit id="a57b46a37436b00ad1cca928ab074cccc2b14897" translate="yes" xml:space="preserve">
          <source>Construct the error message based on flags and template tags. Template tags will return a stringified inspection of the object referenced.</source>
          <target state="translated">플래그 및 템플릿 태그를 기반으로 오류 메시지를 구성하십시오. 템플릿 태그는 참조 된 객체의 문자열 검사를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d401d4c1f693e01bd2506195908b91b95bd4bbfb" translate="yes" xml:space="preserve">
          <source>Core Plugin Concepts</source>
          <target state="translated">핵심 플러그인 개념</target>
        </trans-unit>
        <trans-unit id="dc8968bddfc28324f5f2272a9983184d953daaf1" translate="yes" xml:space="preserve">
          <source>Currently supports all modern browsers: IE 9+, Chrome 7+, FireFox 4+, Safari 5+. Please note that the &lt;code&gt;should&lt;/code&gt; style is currently not compatible with IE9.</source>
          <target state="translated">현재 모든 최신 브라우저 (IE 9+, Chrome 7+, FireFox 4+, Safari 5+)를 지원합니다. (가) 있습니다 &lt;code&gt;should&lt;/code&gt; 스타일이 현재 IE9와 호환되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="188fbce35055e31aee5f5598ad66dbd0b1025516" translate="yes" xml:space="preserve">
          <source>Define &lt;code&gt;length&lt;/code&gt; as a getter on the given uninvoked method assertion. The getter acts as a guard against chaining &lt;code&gt;length&lt;/code&gt; directly off of an uninvoked method assertion, which is a problem because it references &lt;code&gt;function&lt;/code&gt;&amp;rsquo;s built-in &lt;code&gt;length&lt;/code&gt; property instead of Chai&amp;rsquo;s &lt;code&gt;length&lt;/code&gt; assertion. When the getter catches the user making this mistake, it throws an error with a helpful message.</source>
          <target state="translated">주어진 호출되지 않은 메소드 어설 션에서 &lt;code&gt;length&lt;/code&gt; 를 getter로 정의하십시오 . getter는 &lt;code&gt;function&lt;/code&gt; 되지 않은 메소드 어설 션에서 직접 체인 &lt;code&gt;length&lt;/code&gt; 에 대한 보호 역할을합니다 . 이는 Chai의 &lt;code&gt;length&lt;/code&gt; 어설 션 대신 함수 의 내장 &lt;code&gt;length&lt;/code&gt; 특성을 참조하기 때문에 문제가 됩니다. getter가이 실수를하는 사용자를 잡으면 유용한 메시지와 함께 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a16f975f7a2c54854483b5444a70c8be624863b4" translate="yes" xml:space="preserve">
          <source>Determines if an object or an array matches criteria to be inspected in-line for error messages or should be truncated.</source>
          <target state="translated">객체 또는 배열이 오류 메시지에 대해 인라인으로 검사 할 기준과 일치하는지 또는 잘 려야하는지 여부를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="af858e1241391fd569b50d644bb00507f74f4034" translate="yes" xml:space="preserve">
          <source>Differences</source>
          <target state="translated">Differences</target>
        </trans-unit>
        <trans-unit id="ef58fdd39beb463d6169c67739c7c2cd0fcffa03" translate="yes" xml:space="preserve">
          <source>Done. Now we can assert Arthur&amp;rsquo;s exact age. We will pick up again with this example when learning how to overwrite methods.</source>
          <target state="translated">끝난. 이제 우리는 Arthur의 정확한 나이를 주장 할 수 있습니다. 메소드 덮어 쓰기 방법을 학습 할 때이 예제를 다시 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="c9bae6a8782d7be2def57af817be5142d75bf4e5" translate="yes" xml:space="preserve">
          <source>Due to a compatibility issue, the alias &lt;code&gt;.length&lt;/code&gt; can&amp;rsquo;t be chained directly off of an uninvoked method such as &lt;code&gt;.a&lt;/code&gt;. Therefore, &lt;code&gt;.length&lt;/code&gt; can&amp;rsquo;t be used interchangeably with &lt;code&gt;.lengthOf&lt;/code&gt; in every situation. It&amp;rsquo;s recommended to always use &lt;code&gt;.lengthOf&lt;/code&gt; instead of &lt;code&gt;.length&lt;/code&gt;.</source>
          <target state="translated">호환성 문제로 인해 별칭 &lt;code&gt;.length&lt;/code&gt; 는 &lt;code&gt;.a&lt;/code&gt; 와 같은 호출 되지 않은 메서드에서 직접 체인으로 연결할 수 없습니다 . 따라서, &lt;code&gt;.length&lt;/code&gt; 는 와 상호 교환 사용할 수 없습니다 &lt;code&gt;.lengthOf&lt;/code&gt; 모든 상황에서. 항상 사용하는 것이 좋습니다 &lt;code&gt;.lengthOf&lt;/code&gt; 을 대신 &lt;code&gt;.length&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8fe23500465c4069f8d63e53c055308a625f1ab8" translate="yes" xml:space="preserve">
          <source>Due to limitations in ES5, &lt;code&gt;.instanceof&lt;/code&gt; may not always work as expected when using a transpiler such as Babel or TypeScript. In particular, it may produce unexpected results when subclassing built-in object such as &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Error&lt;/code&gt;, and &lt;code&gt;Map&lt;/code&gt;. See your transpiler&amp;rsquo;s docs for details:</source>
          <target state="translated">ES5의 제한으로 인해 &lt;code&gt;.instanceof&lt;/code&gt; 는 Babel 또는 TypeScript와 같은 변환기를 사용할 때 항상 예상대로 작동하지 않을 수 있습니다. 특히 &lt;code&gt;Array&lt;/code&gt; , &lt;code&gt;Error&lt;/code&gt; 및 &lt;code&gt;Map&lt;/code&gt; 과 같은 내장 객체를 서브 클래 싱 할 때 예기치 않은 결과가 발생할 수 있습니다 . 자세한 내용은 트랜스 필러 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e5f992b11e86a663ed79fa39e02082eae070fbd5" translate="yes" xml:space="preserve">
          <source>Due to limitations in ES5, &lt;code&gt;.throw&lt;/code&gt; may not always work as expected when using a transpiler such as Babel or TypeScript. In particular, it may produce unexpected results when subclassing the built-in &lt;code&gt;Error&lt;/code&gt; object and then passing the subclassed constructor to &lt;code&gt;.throw&lt;/code&gt;. See your transpiler&amp;rsquo;s docs for details:</source>
          <target state="translated">ES5의 제한으로 인해 Babel 또는 TypeScript와 같은 변환기를 사용할 때 &lt;code&gt;.throw&lt;/code&gt; 가 항상 예상대로 작동하지 않을 수 있습니다. 특히 내장 &lt;code&gt;Error&lt;/code&gt; 객체를 서브 클래 싱 한 다음 서브 클래스 생성자를 &lt;code&gt;.throw&lt;/code&gt; 에 전달할 때 예기치 않은 결과가 발생할 수 있습니다 . 자세한 내용은 트랜스 필러 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8bd8bb4834285716231df2e0d430fd6f93582a58" translate="yes" xml:space="preserve">
          <source>Echoes the value of a value. Tries to print the value out in the best way possible given the different types.</source>
          <target state="translated">값의 값을 에코합니다. 다른 유형에 따라 가능한 최상의 방법으로 값을 인쇄하려고합니다.</target>
        </trans-unit>
        <trans-unit id="316a73bd344a7f94860eb45bc6e9229eff59a605" translate="yes" xml:space="preserve">
          <source>Enables dot- and bracket-notation in all &lt;code&gt;.property&lt;/code&gt; and &lt;code&gt;.include&lt;/code&gt; assertions that follow in the chain.</source>
          <target state="translated">체인에서 따르는 모든 &lt;code&gt;.property&lt;/code&gt; 및 &lt;code&gt;.include&lt;/code&gt; 어설 션 에서 점 및 괄호 표기법을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="022d37a968278017e3d10d1609a8b1e9c50cc1b9" translate="yes" xml:space="preserve">
          <source>Enhancing Error Messages</source>
          <target state="translated">오류 메시지 향상</target>
        </trans-unit>
        <trans-unit id="5b3addd864c52ca8afa136b1159986fd48c52220" translate="yes" xml:space="preserve">
          <source>Ensures that the object being tested against is of a valid type.</source>
          <target state="translated">테스트중인 오브젝트가 유효한 유형인지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="58fc1be971a32518b08bb4967f47c3e29fc379b9" translate="yes" xml:space="preserve">
          <source>Expect</source>
          <target state="translated">Expect</target>
        </trans-unit>
        <trans-unit id="fe25cc8f1c123e9269c4d6f0ab03e7eafd00fa2d" translate="yes" xml:space="preserve">
          <source>Expect also allows you to include arbitrary messages to prepend to any failed assertions that might occur.</source>
          <target state="translated">또한 예상 할 수있는 어설 션 앞에 추가 할 임의의 메시지를 포함 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="bddeb72888cd1290f401146a884fed5f4f754f38" translate="yes" xml:space="preserve">
          <source>Finally, it&amp;rsquo;s worth mentioning that it&amp;rsquo;s a best practice in JavaScript to only throw &lt;code&gt;Error&lt;/code&gt; and derivatives of &lt;code&gt;Error&lt;/code&gt; such as &lt;code&gt;ReferenceError&lt;/code&gt;, &lt;code&gt;TypeError&lt;/code&gt;, and user-defined objects that extend &lt;code&gt;Error&lt;/code&gt;. No other type of value will generate a stack trace when initialized. With that said, the &lt;code&gt;throw&lt;/code&gt; assertion does technically support any type of value being thrown, not just &lt;code&gt;Error&lt;/code&gt; and its derivatives.</source>
          <target state="translated">마지막으로 JavaScript에서 &lt;code&gt;Error&lt;/code&gt; 및 &lt;code&gt;ReferenceError&lt;/code&gt; , &lt;code&gt;TypeError&lt;/code&gt; 및 &lt;code&gt;Error&lt;/code&gt; 를 확장하는 사용자 정의 객체와 같은 &lt;code&gt;Error&lt;/code&gt; 파생물 만 throw하는 것이 가장 좋습니다 . 다른 유형의 값은 초기화 될 때 스택 추적을 생성하지 않습니다. 그렇게 말은 &lt;code&gt;throw&lt;/code&gt; 주장은 기술적으로, 모든 유형의 값이 슬로우 지원 단지하지 않는 &lt;code&gt;Error&lt;/code&gt; 및 그 유도체.</target>
        </trans-unit>
        <trans-unit id="42f2daa75d1595c2e522c401734dd4e7cebff7f9" translate="yes" xml:space="preserve">
          <source>First of all, notice that the &lt;code&gt;expect&lt;/code&gt; require is just a reference to the &lt;code&gt;expect&lt;/code&gt; function, whereas with the &lt;code&gt;should&lt;/code&gt; require, the function is being executed.</source>
          <target state="translated">우선, 그 통지 &lt;code&gt;expect&lt;/code&gt; (가)에 필요한 단지 참조가 &lt;code&gt;expect&lt;/code&gt; (가)와, 반면 기능 &lt;code&gt;should&lt;/code&gt; 필요 기능이 실행되고있다.</target>
        </trans-unit>
        <trans-unit id="20c5b32250396e3982e8d833e2855a771f6197ca" translate="yes" xml:space="preserve">
          <source>For a cleaner look, you can do this instead:</source>
          <target state="translated">깔끔하게 보이려면 대신 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="607982372170b58bb3456ed9934f8ea03afdec89" translate="yes" xml:space="preserve">
          <source>For our helper file: &lt;code&gt;test/helpers/model.js&lt;/code&gt;</source>
          <target state="translated">도우미 파일 : &lt;code&gt;test/helpers/model.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a4fee40ef37b68166a5b6e4fb69448746cbceb20" translate="yes" xml:space="preserve">
          <source>For testing your Ruby on Rails application using Chai assertions and the Mocha test framework, check out Konacha &amp;ndash; a modern test harness that takes full advantage of Rails 3 features such as the asset pipeline and engines.</source>
          <target state="translated">Chai 어설 션 및 Mocha 테스트 프레임 워크를 사용하여 Ruby on Rails 애플리케이션을 테스트하려면 자산 파이프 라인 및 엔진과 같은 Rails 3 기능을 최대한 활용하는 최신 테스트 하니스 인 Konacha를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="7ae9a5d0631d1bc261131aead02ba696df65b778" translate="yes" xml:space="preserve">
          <source>For the rest of this document, we will assume this structure&amp;hellip;</source>
          <target state="translated">이 문서의 나머지 부분에서는이 구조를 가정합니다.</target>
        </trans-unit>
        <trans-unit id="63b1c71bf6c93cffcfeae0ca2d2505b97d631edb" translate="yes" xml:space="preserve">
          <source>For this example, we are going to overwrite the &lt;code&gt;ok&lt;/code&gt; property provided by Chai&amp;rsquo;s core. The default behavior is that &lt;code&gt;ok&lt;/code&gt; will pass if an object is truthy. We want to change that behavior so then when &lt;code&gt;ok&lt;/code&gt; is used with an instance of a model, it validates that the model is well formed. In our example, we will consider a model &lt;code&gt;ok&lt;/code&gt; if it has an &lt;code&gt;id&lt;/code&gt; attribute.</source>
          <target state="translated">이 예에서는 Chai의 코어에서 제공 하는 &lt;code&gt;ok&lt;/code&gt; 속성 을 덮어 씁니다 . 기본 동작은 객체가 진실한 경우 &lt;code&gt;ok&lt;/code&gt; 가 전달되는 것입니다. 우리는 그 행동을 바꾸고 싶어서 &lt;code&gt;ok&lt;/code&gt; 가 모델의 인스턴스와 함께 사용될 때 , 모델이 잘 구성되어 있는지 확인합니다. 이 예에서는 &lt;code&gt;id&lt;/code&gt; 속성 이있는 경우 &lt;code&gt;ok&lt;/code&gt; 모델을 고려 합니다.</target>
        </trans-unit>
        <trans-unit id="2fbcea3500028a6f1f30176f0367c0272106574f" translate="yes" xml:space="preserve">
          <source>For this example, we want the following test case to pass:</source>
          <target state="translated">이 예제에서는 다음 테스트 사례를 통과하려고합니다.</target>
        </trans-unit>
        <trans-unit id="2da7db4e89b9a22187350f6a90080a97f7d75b7e" translate="yes" xml:space="preserve">
          <source>For this to work, two separate functions are needed. One that will be invoked when the chain is used as either a property or a method, and one that will be invoked when only used as a method.</source>
          <target state="translated">이것이 작동하려면 두 가지 별도의 기능이 필요합니다. 하나는 체인이 속성이나 메서드로 사용될 때 호출되고 다른 하나는 메서드로만 사용될 때 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="2201bfbc1ad95dae8ce1566ed3149f1d83eef06b" translate="yes" xml:space="preserve">
          <source>For this we will expand on this assertion by transferring all of the flags from the original assertion to our new assertion. The final property overwrite would look like this.</source>
          <target state="translated">이를 위해 모든 플래그를 원래 어설 션에서 새 어설 션으로 전송하여이 어설 션을 확장합니다. 최종 속성 덮어 쓰기는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="21a0e05b1327801d20698912be0f14c2ba6a91dc" translate="yes" xml:space="preserve">
          <source>For this, each constructed &lt;code&gt;Assertion&lt;/code&gt; has a method called simply &lt;code&gt;assert&lt;/code&gt;. It accepts many parameters and its behavior can change depending on whether an assertion was negated or not.</source>
          <target state="translated">이를 위해 구성된 각 &lt;code&gt;Assertion&lt;/code&gt; 에는 simply &lt;code&gt;assert&lt;/code&gt; 라는 메소드가 있습니다. 많은 매개 변수를 허용하며 어설 션의 무효 여부에 따라 동작이 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e7f08d6d30b60090a7ecb35836dee143a258ecbe" translate="yes" xml:space="preserve">
          <source>For this, we will use the &lt;code&gt;addProperty&lt;/code&gt; utility.</source>
          <target state="translated">이를 위해 &lt;code&gt;addProperty&lt;/code&gt; 유틸리티를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="669cdb53f2fba12233a9719cf8befae0e708496c" translate="yes" xml:space="preserve">
          <source>For use with our model example, we are going to construct an example that allows us to test Arthur&amp;rsquo;s age exactly, or chain into Chai&amp;rsquo;s numerical comparators, such as &lt;code&gt;above&lt;/code&gt;, &lt;code&gt;below&lt;/code&gt;, and &lt;code&gt;within&lt;/code&gt;. You will need to learn how to overwrite methods without destroying core functionality, but we get to that a bit later.</source>
          <target state="translated">모델 예제와 함께 사용하기 위해 Arthur의 연령을 정확하게 테스트하거나 &lt;code&gt;above&lt;/code&gt; , &lt;code&gt;below&lt;/code&gt; 및 &lt;code&gt;within&lt;/code&gt; 와 같은 Chai의 숫자 비교기에 연결할 수있는 예제를 구성하려고합니다 . 핵심 기능을 손상시키지 않으면 서 메소드를 덮어 쓰는 방법을 배워야하지만, 조금 후에 그 사실을 알게됩니다.</target>
        </trans-unit>
        <trans-unit id="eedd01a9ea76c0be0868aff8f990750d39a4e0e3" translate="yes" xml:space="preserve">
          <source>Forces all &lt;code&gt;.respondTo&lt;/code&gt; assertions that follow in the chain to behave as if the target is a non-function object, even if it&amp;rsquo;s a function. Thus, it causes &lt;code&gt;.respondTo&lt;/code&gt; to assert that the target has a method with the given name, rather than asserting that the target&amp;rsquo;s &lt;code&gt;prototype&lt;/code&gt; property has a method with the given name.</source>
          <target state="translated">체인에서 뒤 따르는 모든 &lt;code&gt;.respondTo&lt;/code&gt; 어설 션이 대상이 함수가 아니더라도 대상이 함수가 아닌 오브젝트처럼 작동하도록합니다. 따라서 &lt;code&gt;.respondTo&lt;/code&gt; 는 대상의 &lt;code&gt;prototype&lt;/code&gt; 속성에 지정된 이름의 메서드가 있다고 주장하기보다는 대상에 지정된 이름의 메서드가 있다고 주장합니다 .</target>
        </trans-unit>
        <trans-unit id="d76cf6a2da9e61b9b72113e187e2e066f2239f93" translate="yes" xml:space="preserve">
          <source>Get or set a flag value on an object. If a value is provided it will be set, else it will return the currently set value or &lt;code&gt;undefined&lt;/code&gt; if the value is not set.</source>
          <target state="translated">객체의 플래그 값을 가져 오거나 설정합니다. 값이 제공되면 설정되고, 그렇지 않으면 현재 설정된 값을 반환하거나 값이 설정 &lt;code&gt;undefined&lt;/code&gt; 경우 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="33a1cf16d769738c2756510771a01b5565e7f9ae" translate="yes" xml:space="preserve">
          <source>Gets the constructor name for an Error instance or constructor itself.</source>
          <target state="translated">Error 인스턴스 또는 생성자 자체의 생성자 이름을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="d3870442aa7acaa4e8d15a6306a04e001599a7b9" translate="yes" xml:space="preserve">
          <source>Gets the error message from an error. If &lt;code&gt;err&lt;/code&gt; is a String itself, we return it. If the error has no message, we return an empty string.</source>
          <target state="translated">오류에서 오류 메시지를 가져옵니다. 경우 &lt;code&gt;err&lt;/code&gt; 문자열 자체가, 우리는 그것을 돌려줍니다. 오류에 메시지가 없으면 빈 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f0ab6e375bd59a7d3681f8ecf89c5f1eaaebd1a0" translate="yes" xml:space="preserve">
          <source>Given that &lt;code&gt;err&lt;/code&gt; should be null or undefined, &lt;code&gt;err.should.not.exist&lt;/code&gt; is not a valid statement as &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; haven&amp;rsquo;t been extended with a &lt;code&gt;should&lt;/code&gt; chain starter. As such, the appropriate few assertions for this scenario are as follows:</source>
          <target state="translated">점을 감안 &lt;code&gt;err&lt;/code&gt; null 또는 정의되지 않은 있어야 &lt;code&gt;err.should.not.exist&lt;/code&gt; 는 같은 유효한 문이 아닌 &lt;code&gt;undefined&lt;/code&gt; 및 &lt;code&gt;null&lt;/code&gt; 으로 확장되지 않은 &lt;code&gt;should&lt;/code&gt; 체인 스타터. 따라서이 시나리오에 적합한 몇 가지 주장은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2682b30689a6b2d57420dfeafa3aff0f68d78cff" translate="yes" xml:space="preserve">
          <source>Given that &lt;code&gt;should&lt;/code&gt; works by extending &lt;code&gt;Object.prototype&lt;/code&gt;, there are some scenarios where &lt;code&gt;should&lt;/code&gt; will not work. Mainly, if you are trying to check the existence of an object. Take the following pseudocode:</source>
          <target state="translated">&lt;code&gt;Object.prototype&lt;/code&gt; 을 확장하여 작동 &lt;code&gt;should&lt;/code&gt; 가정하면 작동 하지 &lt;code&gt;should&lt;/code&gt; 할 몇 가지 시나리오가 있습니다. 주로 개체의 존재를 확인하려는 경우. 다음 의사 코드를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="929a28d261428029e61c0f81c6161fd71ba0b2fe" translate="yes" xml:space="preserve">
          <source>Guides</source>
          <target state="translated">Guides</target>
        </trans-unit>
        <trans-unit id="d1f61654218ec662034ea3656467ba1a97e82535" translate="yes" xml:space="preserve">
          <source>Helper function to check if Chai&amp;rsquo;s proxy protection feature is enabled. If proxies are unsupported or disabled via the user&amp;rsquo;s Chai config, then return false. Otherwise, return true.</source>
          <target state="translated">Chai의 프록시 보호 기능이 활성화되어 있는지 확인하는 도우미 기능. 사용자의 Chai 구성을 통해 프록시가 지원되지 않거나 비활성화 된 경우 false를 반환합니다. 그렇지 않으면 true를 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="8b5f4207603374c5b11685d84226cd4b7e26dd1b" translate="yes" xml:space="preserve">
          <source>Hopefully our &lt;code&gt;Model&lt;/code&gt; class is self explanatory, but as an example, here we construct a person object.</source>
          <target state="translated">바라건대 &lt;code&gt;Model&lt;/code&gt; 클래스는 자명 한 설명이지만, 여기에서는 person 객체를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="f5b7337a0ea5b0d679cd386711797c4992eb6efc" translate="yes" xml:space="preserve">
          <source>However, if &lt;code&gt;.any&lt;/code&gt; and &lt;code&gt;.include&lt;/code&gt; are combined, only the &lt;code&gt;.any&lt;/code&gt; takes effect. The &lt;code&gt;.include&lt;/code&gt; is ignored in this case.</source>
          <target state="translated">그러나 &lt;code&gt;.any&lt;/code&gt; 와 &lt;code&gt;.include&lt;/code&gt; 를 결합하면 &lt;code&gt;.any&lt;/code&gt; 만 적용됩니다. &lt;code&gt;.include&lt;/code&gt; 은 이 경우에 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="d6ba20883f7b01a70159353b6d985a7fe588df16" translate="yes" xml:space="preserve">
          <source>However, it&amp;rsquo;s dangerous to negate &lt;code&gt;.include&lt;/code&gt; when the target is an object. The problem is that it creates uncertain expectations by asserting that the target object doesn&amp;rsquo;t have all of &lt;code&gt;val&lt;/code&gt;&amp;rsquo;s key/value pairs but may or may not have some of them. It&amp;rsquo;s often best to identify the exact output that&amp;rsquo;s expected, and then write an assertion that only accepts that exact output.</source>
          <target state="translated">그러나 대상이 객체 일 때 &lt;code&gt;.include&lt;/code&gt; 를 부정 하면 위험 합니다. 문제는 대상 객체에 &lt;code&gt;val&lt;/code&gt; 키 / 값 쌍이 모두 없지만 일부가 있거나 없을 수 있다고 주장함으로써 불확실한 기대를 불러 일으킨다 는 것입니다. 예상되는 정확한 출력을 식별 한 다음 정확한 출력 만 허용하는 어설 션을 작성하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="da42968157d94ca73235e43790de19cde0511f2b" translate="yes" xml:space="preserve">
          <source>However, it&amp;rsquo;s dangerous to negate &lt;code&gt;.ownPropertyDescriptor&lt;/code&gt; when providing a &lt;code&gt;descriptor&lt;/code&gt;. The problem is that it creates uncertain expectations by asserting that the target either doesn&amp;rsquo;t have a property descriptor with the given key &lt;code&gt;name&lt;/code&gt;, or that it does have a property descriptor with the given key &lt;code&gt;name&lt;/code&gt; but its not deeply equal to the given &lt;code&gt;descriptor&lt;/code&gt;. It&amp;rsquo;s often best to identify the exact output that&amp;rsquo;s expected, and then write an assertion that only accepts that exact output.</source>
          <target state="translated">그러나 &lt;code&gt;descriptor&lt;/code&gt; 제공 할 때 &lt;code&gt;.ownPropertyDescriptor&lt;/code&gt; 를 부정하는 것은 위험합니다 . 문제는 대상이 지정된 키를 가진 속성 설명이없는 어느 것을 주장하여 불확실한 기대를 생성한다는 것이다 &lt;code&gt;name&lt;/code&gt; , 또는 지정된 키 속성 설명 가지고 있음을 &lt;code&gt;name&lt;/code&gt; 하지만이 아닌 깊이 주어진 동일한 &lt;code&gt;descriptor&lt;/code&gt; . 예상되는 정확한 출력을 식별 한 다음 정확한 출력 만 허용하는 어설 션을 작성하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="ad35540484ec525318d85c19a746fde678f05537" translate="yes" xml:space="preserve">
          <source>However, it&amp;rsquo;s dangerous to negate &lt;code&gt;.property&lt;/code&gt; when providing &lt;code&gt;val&lt;/code&gt;. The problem is that it creates uncertain expectations by asserting that the target either doesn&amp;rsquo;t have a property with the given key &lt;code&gt;name&lt;/code&gt;, or that it does have a property with the given key &lt;code&gt;name&lt;/code&gt; but its value isn&amp;rsquo;t equal to the given &lt;code&gt;val&lt;/code&gt;. It&amp;rsquo;s often best to identify the exact output that&amp;rsquo;s expected, and then write an assertion that only accepts that exact output.</source>
          <target state="translated">그러나 &lt;code&gt;val&lt;/code&gt; 을 제공 할 때 &lt;code&gt;.property&lt;/code&gt; 를 부정하는 것은 위험합니다 . 문제는 대상이 지정된 키를 가진 특성이없는 어느 것을 주장하여 불확실한 기대를 생성한다는 것이다 &lt;code&gt;name&lt;/code&gt; , 또는 지정된 키 속성 가지고 있음을 &lt;code&gt;name&lt;/code&gt; 하지만, 그 값이 주어진 같지 않은 &lt;code&gt;val&lt;/code&gt; . 예상되는 정확한 출력을 식별 한 다음 정확한 출력 만 허용하는 어설 션을 작성하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="774eb230a234ac9a75db412b1cc478d3a7014203" translate="yes" xml:space="preserve">
          <source>However, it&amp;rsquo;s dangerous to negate &lt;code&gt;.throw&lt;/code&gt; when providing any arguments. The problem is that it creates uncertain expectations by asserting that the target either doesn&amp;rsquo;t throw an error, or that it throws an error but of a different type than the given type, or that it throws an error of the given type but with a message that doesn&amp;rsquo;t include the given string. It&amp;rsquo;s often best to identify the exact output that&amp;rsquo;s expected, and then write an assertion that only accepts that exact output.</source>
          <target state="translated">그러나 인수를 제공 할 때 &lt;code&gt;.throw&lt;/code&gt; 를 부정하는 것은 위험합니다 . 문제는 대상이 오류를 발생시키지 않거나 오류를 던지지 만 주어진 유형과는 다른 유형을 가지거나 주어진 유형의 오류를 던지지 만 주어진 문자열을 포함하지 않는 메시지. 예상되는 정확한 출력을 식별 한 다음 정확한 출력 만 허용하는 어설 션을 작성하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="6bf3a0a107c3080cbf22194ce0d738655c8484ad" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;[]&lt;/code&gt; are part of an actual property name, they can be escaped by adding two backslashes before them.</source>
          <target state="translated">만약 &lt;code&gt;.&lt;/code&gt; 또는 &lt;code&gt;[]&lt;/code&gt; 는 실제 속성 이름의 일부이므로 두 개의 백 슬래시를 추가하여 이스케이프 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4313ade1ba633355c51c861964c4c4f4713a0913" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;errorLike&lt;/code&gt; is an &lt;code&gt;Error&lt;/code&gt; constructor, asserts that &lt;code&gt;fn&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; throw an error that is an instance of &lt;code&gt;errorLike&lt;/code&gt;. If &lt;code&gt;errorLike&lt;/code&gt; is an &lt;code&gt;Error&lt;/code&gt; instance, asserts that the error thrown is &lt;em&gt;not&lt;/em&gt; the same instance as &lt;code&gt;errorLike&lt;/code&gt;. If &lt;code&gt;errMsgMatcher&lt;/code&gt; is provided, it also asserts that the error thrown will &lt;em&gt;not&lt;/em&gt; have a message matching &lt;code&gt;errMsgMatcher&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;errorLike&lt;/code&gt; 가 &lt;code&gt;Error&lt;/code&gt; 생성자 인 경우 &lt;code&gt;fn&lt;/code&gt; 은 &lt;code&gt;errorLike&lt;/code&gt; 의 인스턴스 인 오류를 발생 &lt;em&gt;시키지 않습니다&lt;/em&gt; . 경우 &lt;code&gt;errorLike&lt;/code&gt; 가 인 &lt;code&gt;Error&lt;/code&gt; 인스턴스가, 발생 오류가 있음을 주장 &lt;em&gt;하지&lt;/em&gt; 과 같은 예를 &lt;code&gt;errorLike&lt;/code&gt; . 경우 &lt;code&gt;errMsgMatcher&lt;/code&gt; 가 제공되며, 또한 던져 오류가 것이라고 주장 &lt;em&gt;하지&lt;/em&gt; 메시지 일치가 &lt;code&gt;errMsgMatcher&lt;/code&gt; 을 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6da8a3cd6a7e16180cc706a212c1a3de02902cf7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;errorLike&lt;/code&gt; is an &lt;code&gt;Error&lt;/code&gt; constructor, asserts that &lt;code&gt;fn&lt;/code&gt; will throw an error that is an instance of &lt;code&gt;errorLike&lt;/code&gt;. If &lt;code&gt;errorLike&lt;/code&gt; is an &lt;code&gt;Error&lt;/code&gt; instance, asserts that the error thrown is the same instance as &lt;code&gt;errorLike&lt;/code&gt;. If &lt;code&gt;errMsgMatcher&lt;/code&gt; is provided, it also asserts that the error thrown will have a message matching &lt;code&gt;errMsgMatcher&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;errorLike&lt;/code&gt; 가 &lt;code&gt;Error&lt;/code&gt; 생성자 인 경우 &lt;code&gt;fn&lt;/code&gt; 은 &lt;code&gt;errorLike&lt;/code&gt; 의 인스턴스 인 오류를 발생 시킵니다 . 경우 &lt;code&gt;errorLike&lt;/code&gt; 가 인 &lt;code&gt;Error&lt;/code&gt; 인스턴스가, 발생 오류가 같은 인스턴스 주장 &lt;code&gt;errorLike&lt;/code&gt; . &lt;code&gt;errMsgMatcher&lt;/code&gt; 가 제공되는 경우 , 발생한 오류에 &lt;code&gt;errMsgMatcher&lt;/code&gt; 와 일치하는 메시지가 있다고 주장합니다 .</target>
        </trans-unit>
        <trans-unit id="b5dff98196e1cbca8616804416a40fef85bbafd3" translate="yes" xml:space="preserve">
          <source>If proxies are unsupported or disabled via the user&amp;rsquo;s Chai config, then return object without modification.</source>
          <target state="translated">사용자의 Chai 구성을 통해 프록시가 지원되지 않거나 비활성화 된 경우 수정없이 객체를 반환하십시오.</target>
        </trans-unit>
        <trans-unit id="dae983c3f9669b653390992146c544a2d1886b07" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;length&lt;/code&gt; property of functions is unconfigurable, then return &lt;code&gt;fn&lt;/code&gt; without modification.</source>
          <target state="translated">함수 의 &lt;code&gt;length&lt;/code&gt; 속성을 구성 할 수 없으면 수정하지 않고 &lt;code&gt;fn&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="dc867eb75d0173a765ae8a754d96a2a4de275607" translate="yes" xml:space="preserve">
          <source>If you need to assert that your function &lt;code&gt;fn&lt;/code&gt; throws when passed certain arguments, then wrap a call to &lt;code&gt;fn&lt;/code&gt; inside of another function.</source>
          <target state="translated">특정 인수를 전달할 때 함수 &lt;code&gt;fn&lt;/code&gt; 이 발생 한다고 주장해야하는 경우 다른 함수 내부 에서 &lt;code&gt;fn&lt;/code&gt; 에 대한 호출을 래핑하십시오 .</target>
        </trans-unit>
        <trans-unit id="83f6ebe341d0525bd1a36e16557ecd2d6730d607" translate="yes" xml:space="preserve">
          <source>If you want to know if your browser is compatible, run the &lt;a href=&quot;https://www.chaijs.com/api/test/&quot;&gt;online test suite&lt;/a&gt;.</source>
          <target state="translated">브라우저가 호환되는지 확인하려면 &lt;a href=&quot;https://www.chaijs.com/api/test/&quot;&gt;온라인 테스트 스위트를&lt;/a&gt; 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="891efb41ccd3b7885d3c613c324973f79f6fc4a1" translate="yes" xml:space="preserve">
          <source>In all cases, the assert style allows you to include an optional message as the last parameter in the &lt;code&gt;assert&lt;/code&gt; statement. These will be included in the error messages should your assertion not pass.</source>
          <target state="translated">모든 경우에 assert 스타일을 사용하면 &lt;code&gt;assert&lt;/code&gt; 문의 마지막 매개 변수로 선택적 메시지를 포함 할 수 있습니다 . 어설 션이 전달되지 않으면 오류 메시지에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="84ab0999d766b09aa3fda92cd512d19a54243aa5" translate="yes" xml:space="preserve">
          <source>In all, the &lt;code&gt;assert&lt;/code&gt; method accepts six arguments:</source>
          <target state="translated">모두에서 &lt;code&gt;assert&lt;/code&gt; 방법은 여섯 개 인수를 허용합니다</target>
        </trans-unit>
        <trans-unit id="525f27f3ddb8a6943bd7fbe3c5c42ea7fd8a22c7" translate="yes" xml:space="preserve">
          <source>In essence, defining a property can be done using &lt;code&gt;Object.defineProperty&lt;/code&gt;, but we encourage you to use Chai&amp;rsquo;s utility helpers to ensure a standard implementation throughout.</source>
          <target state="translated">본질적으로 속성 정의는 &lt;code&gt;Object.defineProperty&lt;/code&gt; 를 사용하여 수행 할 수 있지만 Chai의 유틸리티 도우미를 사용하여 표준 구현을 보장하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="bced0003c05b6dba08bb140c44c9f1322ef11875" translate="yes" xml:space="preserve">
          <source>In these examples, and with all of the other chainable methods in core, the only function of &lt;code&gt;contain&lt;/code&gt; as a property is to set a &lt;code&gt;contains&lt;/code&gt; flag to true. This indicates to &lt;code&gt;keys&lt;/code&gt; to behave differently. In this case, when &lt;code&gt;key&lt;/code&gt; is used in conjunction with &lt;code&gt;contain&lt;/code&gt;, it will check for the inclusion of a key, instead of checking the exact match to all keys.</source>
          <target state="translated">이러한 예에서, 핵심에있는 다른 체인 방식 모든 메소드로의 유일한 기능을 &lt;code&gt;contain&lt;/code&gt; 속성으로는이 설정하는 것입니다 &lt;code&gt;contains&lt;/code&gt; true로 플래그를. 이는 &lt;code&gt;keys&lt;/code&gt; 가 다르게 작동 함을 나타냅니다 . 이 경우, &lt;code&gt;key&lt;/code&gt; 와 함께 사용되는 &lt;code&gt;contain&lt;/code&gt; , 대신 모든 키에 정확히 일치를 체크하는 키의 포함을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="0572580f8a3dac039cbfcf25a6717711ff1ad1e5" translate="yes" xml:space="preserve">
          <source>Include the chai browser build in your testing suite.</source>
          <target state="translated">chai 브라우저 빌드를 테스트 스위트에 포함 시키십시오.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="d8f56d371aa030cb9a6bdcb228eb9a0978ae373b" translate="yes" xml:space="preserve">
          <source>Invokes the given &lt;code&gt;matcher&lt;/code&gt; function with the target being passed as the first argument, and asserts that the value returned is truthy.</source>
          <target state="translated">대상이 첫 번째 인수로 전달 된 상태 에서 지정된 &lt;code&gt;matcher&lt;/code&gt; 함수 를 호출하고 리턴 된 값이 사실임을 주장합니다.</target>
        </trans-unit>
        <trans-unit id="c88754ba9acdd402c905303f4aa91910904bf1eb" translate="yes" xml:space="preserve">
          <source>It isn&amp;rsquo;t possible to chain a function call from an ES2015 &lt;code&gt;import&lt;/code&gt; statement &amp;ndash; it has to go on its own line, which looks a little verbose:</source>
          <target state="translated">ES2015 &lt;code&gt;import&lt;/code&gt; 문 에서 함수 호출을 연결할 수 없습니다. 자체 행을 따라야합니다 .</target>
        </trans-unit>
        <trans-unit id="f8f1c811a0e368ab26ec305bb3564f8590afa747" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s often best to use &lt;code&gt;.a&lt;/code&gt; to check a target&amp;rsquo;s type before making more assertions on the same target. That way, you avoid unexpected behavior from any assertion that does different things based on the target&amp;rsquo;s type.</source>
          <target state="translated">동일한 대상에 대해 더 많은 어설 션을 만들기 전에 &lt;code&gt;.a&lt;/code&gt; 를 사용 하여 대상의 유형을 확인하는 것이 가장 좋습니다 . 이렇게하면 대상 유형에 따라 다른 작업을 수행하는 어설 션에서 예기치 않은 동작이 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6ff1278c54a147ecb0ae14d5e8d1783003c9de45" translate="yes" xml:space="preserve">
          <source>Just because you can negate any assertion with &lt;code&gt;.not&lt;/code&gt; doesn&amp;rsquo;t mean you should. With great power comes great responsibility. It&amp;rsquo;s often best to assert that the one expected output was produced, rather than asserting that one of countless unexpected outputs wasn&amp;rsquo;t produced. See individual assertions for specific guidance.</source>
          <target state="translated">&lt;code&gt;.not&lt;/code&gt; 으로 어설 션을 무효화 할 수 있다고 해서 반드시 그렇게해야하는 것은 아닙니다. 큰 힘에는 큰 책임이 따른다. 수많은 예상치 못한 출력 중 하나가 생성되지 않았다고 주장하기보다는 하나의 예상 출력이 생성되었다고 주장하는 것이 가장 좋습니다. 구체적인 지침은 개별 주장을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4d2e1ef8fd66ab44ac7103e85571d95ac6ae7253" translate="yes" xml:space="preserve">
          <source>Konacha</source>
          <target state="translated">Konacha</target>
        </trans-unit>
        <trans-unit id="0846f7121c0b96f8c4a251af8396daa119236c27" translate="yes" xml:space="preserve">
          <source>Language Chains</source>
          <target state="translated">언어 체인</target>
        </trans-unit>
        <trans-unit id="acfdd92b03b16b7258cca4af9a72899dbbfa5ca3" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say we set up a chainable method for &lt;code&gt;model&lt;/code&gt; to behave as we indicated above: do an &lt;code&gt;instanceof&lt;/code&gt; check if used as a property, and a &lt;code&gt;_type&lt;/code&gt; check if used as a method. The following conflict would occur&amp;hellip;</source>
          <target state="translated">위에서 설명한대로 &lt;code&gt;model&lt;/code&gt; 이 동작하도록 체인 가능한 메소드를 설정했다고 가정 해 봅시다 . 속성으로 사용되는 경우 &lt;code&gt;instanceof&lt;/code&gt; 검사를 수행 하고 메소드로 사용되는 경우 &lt;code&gt;_type&lt;/code&gt; 검사를 수행하십시오. 다음과 같은 충돌이 발생합니다&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="d0245d659b7619569950d8b258375892bf2b7bd2" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start first by composing the two functions needed for a chainable method. First up is the function to use when invoking the &lt;code&gt;age&lt;/code&gt; method.</source>
          <target state="translated">연결 가능한 방법에 필요한 두 가지 기능을 구성하여 먼저 시작하겠습니다. 첫 번째는 &lt;code&gt;age&lt;/code&gt; 메소드 를 호출 할 때 사용할 함수 입니다.</target>
        </trans-unit>
        <trans-unit id="d44255943b55e1671c21fe8e2dfdeedac9506f2a" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start out with the basic overwrite utility and a basic assertion.</source>
          <target state="translated">기본 덮어 쓰기 유틸리티와 기본 어설 션으로 시작하겠습니다.</target>
        </trans-unit>
        <trans-unit id="553bb06b50e91a9a4079849995ac465188cf625c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start with a simple example of overwriting a property.</source>
          <target state="translated">속성을 덮어 쓰는 간단한 예제부터 시작하겠습니다.</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">MIT 라이센스에 따라 라이센스가 부여되었습니다.</target>
        </trans-unit>
        <trans-unit id="f8e2865402fa5b988e0bf5d06db6990f139450f8" translate="yes" xml:space="preserve">
          <source>Message template tags:</source>
          <target state="translated">메시지 템플릿 태그 :</target>
        </trans-unit>
        <trans-unit id="a16f22be51d34c9a92ee0e64ac21138599e765ee" translate="yes" xml:space="preserve">
          <source>Methods as Properties</source>
          <target state="translated">속성으로서의 메소드</target>
        </trans-unit>
        <trans-unit id="f7fd9c68f804acda665d2ab082217bb1583318f2" translate="yes" xml:space="preserve">
          <source>NaN</source>
          <target state="translated">NaN</target>
        </trans-unit>
        <trans-unit id="c0fdd40218d24ad920ce20ca7d242030bdc05d12" translate="yes" xml:space="preserve">
          <source>Negates all assertions that follow in the chain.</source>
          <target state="translated">체인에서 따르는 모든 어설 션을 무효화합니다.</target>
        </trans-unit>
        <trans-unit id="10b3493287f831e81a438811a1ffba01f8cec4b7" translate="yes" xml:space="preserve">
          <source>Node.js</source>
          <target state="translated">Node.js</target>
        </trans-unit>
        <trans-unit id="d4efa29dfebe5fb84f242dcaa85af3405c8570cd" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;.all&lt;/code&gt; is used by default when neither &lt;code&gt;.all&lt;/code&gt; nor &lt;code&gt;.any&lt;/code&gt; appear earlier in the chain. However, it&amp;rsquo;s often best to add &lt;code&gt;.all&lt;/code&gt; anyway because it improves readability.</source>
          <target state="translated">참고 &lt;code&gt;.all&lt;/code&gt; 어느 때 기본적으로 사용되는 &lt;code&gt;.all&lt;/code&gt; 도 &lt;code&gt;.any&lt;/code&gt; 이전 체인에서 나타납니다. 그러나 가독성을 향상시키기 때문에 어쨌든 &lt;code&gt;.all&lt;/code&gt; 을 추가하는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="44576cd1015484cdfbd84a7aaa5fa521af52580a" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;.all&lt;/code&gt; is used by default when neither &lt;code&gt;.all&lt;/code&gt; nor &lt;code&gt;.any&lt;/code&gt; are added earlier in the chain. However, it&amp;rsquo;s often best to add &lt;code&gt;.all&lt;/code&gt; anyway because it improves readability.</source>
          <target state="translated">참고 &lt;code&gt;.all&lt;/code&gt; 어느 때 기본적으로 사용되는 &lt;code&gt;.all&lt;/code&gt; 도 &lt;code&gt;.any&lt;/code&gt; 체인의 이전에 추가됩니다. 그러나 가독성을 향상시키기 때문에 어쨌든 &lt;code&gt;.all&lt;/code&gt; 을 추가하는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="0c5f9dd231465d63cdd0fb0f8e1066bba11b6d7f" translate="yes" xml:space="preserve">
          <source>Note that a target object is always only searched for &lt;code&gt;val&lt;/code&gt;&amp;rsquo;s own enumerable properties.</source>
          <target state="translated">대상 객체는 항상 &lt;code&gt;val&lt;/code&gt; 자신의 열거 가능한 속성 만 검색 합니다.</target>
        </trans-unit>
        <trans-unit id="80d6e22f5389d8dc94f9e42a93cfbb59298ff9a5" translate="yes" xml:space="preserve">
          <source>Note that adding &lt;code&gt;.any&lt;/code&gt; earlier in the chain causes the &lt;code&gt;.keys&lt;/code&gt; assertion to ignore &lt;code&gt;.include&lt;/code&gt;.</source>
          <target state="translated">체인의 이전에 &lt;code&gt;.any&lt;/code&gt; 를 추가 하면 &lt;code&gt;.keys&lt;/code&gt; 어설 션이 &lt;code&gt;.include&lt;/code&gt; 를 무시 합니다.</target>
        </trans-unit>
        <trans-unit id="9f71c98d9d5cae672962c091664dd394ae4b106c" translate="yes" xml:space="preserve">
          <source>Note that in ES6, the function&amp;rsquo;s &lt;code&gt;length&lt;/code&gt; property is configurable, so once support for legacy environments is dropped, Chai&amp;rsquo;s &lt;code&gt;length&lt;/code&gt; property can replace the built-in function&amp;rsquo;s &lt;code&gt;length&lt;/code&gt; property, and this length guard will no longer be necessary. In the mean time, maintaining consistency across all environments is the priority.</source>
          <target state="translated">ES6에서는 함수의 &lt;code&gt;length&lt;/code&gt; 속성을 구성 할 수 있으므로 레거시 환경에 대한 지원이 중단되면 Chai의 &lt;code&gt;length&lt;/code&gt; 속성이 내장 함수의 &lt;code&gt;length&lt;/code&gt; 속성을 대체 할 수 있으며이 길이 보호 장치는 더 이상 필요하지 않습니다. 그 동안 모든 환경에서 일관성을 유지하는 것이 우선 순위입니다.</target>
        </trans-unit>
        <trans-unit id="b2b861212bf61b19cc553c3c84fc62ce9e76cc63" translate="yes" xml:space="preserve">
          <source>Note: Multiple plugins defining the same method name using &lt;code&gt;addMethod&lt;/code&gt; will conflict, with the last-registered plugin winning. The plugin API is pending a major overhaul in future versions of Chai that will, among other things, deal with this conflict. In the mean time, please prefer using &lt;code&gt;overwriteMethod&lt;/code&gt;.</source>
          <target state="translated">참고 : &lt;code&gt;addMethod&lt;/code&gt; 를 사용하여 동일한 메소드 이름을 정의하는 여러 플러그인 이 마지막으로 등록 된 플러그인과 충돌합니다. 플러그인 API는 Chai의 차기 버전에서 무엇보다도이 충돌을 다룰 주요 개편을 기다리고 있습니다. 그동안 &lt;code&gt;overwriteMethod&lt;/code&gt; 사용을 선호하십시오 .</target>
        </trans-unit>
        <trans-unit id="dbfc3fe18bcf107777ff19d02fe058daff62686b" translate="yes" xml:space="preserve">
          <source>Now that we can successfully add assertions to the language chain, we should work on being able to safely overwrite existing assertions, such as those from Chai&amp;rsquo;s core or other plugins.</source>
          <target state="translated">언어 체인에 어설 션을 성공적으로 추가 할 수있게되었으므로 Chai의 핵심 또는 기타 플러그인의 어설 션과 같은 기존 어설 션을 안전하게 덮어 쓸 수 있도록 노력해야합니다.</target>
        </trans-unit>
        <trans-unit id="8a8d91176c0aacbf70201cfa8514673eb8df7f45" translate="yes" xml:space="preserve">
          <source>Now that we have our subject, we can move on to the basics of plugins.</source>
          <target state="translated">이제 주제를 다뤘으므로 플러그인의 기본 사항으로 넘어갈 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e2e16d4d5811b35d6740ada99a390527365137c" translate="yes" xml:space="preserve">
          <source>Now we are getting to the fun part! Adding properties and methods are what Chai&amp;rsquo;s plugin API is really for.</source>
          <target state="translated">이제 우리는 재미있는 부분에 도달하고 있습니다! 속성과 메소드를 추가하는 것은 Chai의 플러그인 API가 실제로하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="e2c150d1ff2001c0966873452ea7c5f0b3ed6829" translate="yes" xml:space="preserve">
          <source>Now, the negation flag is included in your new assertion and we can successfully handle both positive and negative assertions on the type of id. We left the property assertion as it was as we always want it to fail if the id is not present.</source>
          <target state="translated">이제 부정 플래그가 새 어설 션에 포함되어 있으며 ID 유형에 대해 긍정적 및 부정적 주장을 모두 성공적으로 처리 할 수 ​​있습니다. 우리는 ID가 존재하지 않으면 항상 실패하기를 원했던 것처럼 속성 어설 션을 남겼습니다.</target>
        </trans-unit>
        <trans-unit id="7d7b273c546bcd47d10b3d2d1bd621926ae03c3e" translate="yes" xml:space="preserve">
          <source>Other Platforms</source>
          <target state="translated">다른 플랫폼</target>
        </trans-unit>
        <trans-unit id="55902886d0f47d03df8bbf2c15a2c347077f0cf4" translate="yes" xml:space="preserve">
          <source>Our goal will allow for all of the following to pass.</source>
          <target state="translated">우리의 목표는 다음을 모두 통과하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="31b2094436a37504301288617cfd5d2ca1a89c01" translate="yes" xml:space="preserve">
          <source>Overwrite Structure</source>
          <target state="translated">덮어 쓰기 구조</target>
        </trans-unit>
        <trans-unit id="a11ac043895c1177170d3c38d25231744feed52d" translate="yes" xml:space="preserve">
          <source>Overwrites an already existing chainable method and provides access to the previous function or property. Must return functions to be used for name.</source>
          <target state="translated">기존의 연결 가능한 메서드를 덮어 쓰고 이전 함수 또는 속성에 대한 액세스를 제공합니다. 이름에 사용할 함수를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="0c5ec0fe8cf484b492142ab0e7dbdab81a28e483" translate="yes" xml:space="preserve">
          <source>Overwrites an already existing method and provides access to previous function. Must return function to be used for name.</source>
          <target state="translated">기존 방법을 덮어 쓰고 이전 기능에 대한 액세스를 제공합니다. 이름에 사용할 함수를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="b206b9eb1087ab4fb85aa9f81582c760d7c7ecd6" translate="yes" xml:space="preserve">
          <source>Overwrites an already existing property getter and provides access to previous value. Must return function to use as getter.</source>
          <target state="translated">이미 존재하는 속성 게터를 덮어 쓰고 이전 값에 대한 액세스를 제공합니다. getter로 사용하려면 함수를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="b71f16757c05b2416a869215c74f13a396fc97e2" translate="yes" xml:space="preserve">
          <source>Overwriting Language Chains</source>
          <target state="translated">언어 체인 덮어 쓰기</target>
        </trans-unit>
        <trans-unit id="4cdfdcb406fe777148e1430b6fed46668709f337" translate="yes" xml:space="preserve">
          <source>Overwriting Methods</source>
          <target state="translated">덮어 쓰기 방법</target>
        </trans-unit>
        <trans-unit id="f1b05ee905570824c5b6726b3f9d5f7043d2fbb1" translate="yes" xml:space="preserve">
          <source>Overwriting Properties</source>
          <target state="translated">덮어 쓰기 속성</target>
        </trans-unit>
        <trans-unit id="eed1520d12e3f47a0c232ab5ca0c1f77378ca3e0" translate="yes" xml:space="preserve">
          <source>Overwriting methods follow the same structure of overwriting properties. For this example we will be returning to our example of asserting Arthur&amp;rsquo;s age to be above a minimum threshold.</source>
          <target state="translated">덮어 쓰기 방법은 동일한 속성의 덮어 쓰기 속성을 따릅니다. 이 예에서는 Arthur의 연령을 최소 임계 값 이상으로 설정하는 예로 돌아갑니다.</target>
        </trans-unit>
        <trans-unit id="b182d46302032ddf36ae3c8ceab62e2f646b7e7e" translate="yes" xml:space="preserve">
          <source>Package is available through &lt;a href=&quot;http://npmjs.org&quot;&gt;npm&lt;/a&gt;:</source>
          <target state="translated">패키지는 &lt;a href=&quot;http://npmjs.org&quot;&gt;npm을&lt;/a&gt; 통해 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="befff38ea4062c7969232a2e903f7b14b64f1886" translate="yes" xml:space="preserve">
          <source>Package is available through &lt;a href=&quot;https://npmjs.org&quot;&gt;npm&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc8cdedc61153b7581fb9ac390490514835a88dd" translate="yes" xml:space="preserve">
          <source>Plugin Utilities</source>
          <target state="translated">플러그인 유틸리티</target>
        </trans-unit>
        <trans-unit id="ab2e26dd8b8868a3969cb3321e0c983c0d9d67d4" translate="yes" xml:space="preserve">
          <source>Plugins</source>
          <target state="translated">Plugins</target>
        </trans-unit>
        <trans-unit id="a350fb42516d569977302cf5432a219ecbf9d8d8" translate="yes" xml:space="preserve">
          <source>Plugins are for more than just writing vendor integrations. As a tester, one can write a plugin to validate input data, assert schema validation on an object, or ensure proper behavior on a DOM element. The API is flexible enough that any synchronous tasks can easily be encapsulated within a single assertion and reused throughout your tests.</source>
          <target state="translated">플러그인은 단순히 공급 업체 통합을 작성하는 것 이상을위한 것입니다. 테스터는 플러그인을 작성하여 입력 데이터의 유효성을 검사하고 객체에 대한 스키마 유효성 검사를 주장하거나 DOM 요소에 대한 올바른 동작을 보장 할 수 있습니다. API는 모든 동기 작업이 단일 어설 션 내에 쉽게 캡슐화되어 테스트 전체에서 재사용 될 수있을 정도로 유연합니다.</target>
        </trans-unit>
        <trans-unit id="dc452b43c096cc030c1664a7b6c414801d83612d" translate="yes" xml:space="preserve">
          <source>Practically speaking, this could be any data model object returned from an ORM database in node or constructed from your MVC framework of choice in the browser.</source>
          <target state="translated">실제로, 이것은 노드의 ORM 데이터베이스에서 리턴되거나 브라우저에서 선택한 MVC 프레임 워크에서 구성되는 모든 데이터 모델 오브젝트 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d2030ad8a9f20a400255453192a5f79eaac3435" translate="yes" xml:space="preserve">
          <source>Provided you assigned &lt;code&gt;should&lt;/code&gt; to a var, you have access to several quick helpers to keep you out of trouble when using &lt;code&gt;should&lt;/code&gt;.</source>
          <target state="translated">당신이 할당 제공 &lt;code&gt;should&lt;/code&gt; var에, 당신이 사용하는 경우 문제의 당신을 유지하는 몇 가지 빠른 도우미에 액세스 할 수 있습니다 &lt;code&gt;should&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3732270c1a7c29d2c41c8ee5a2b1d1c31d073e3c" translate="yes" xml:space="preserve">
          <source>Providing chainable helper assertions is the most common use of the plugin utilities that Chai exposes. Before we get into the basics, we are going to need a topic for which we will extend Chai&amp;rsquo;s assertions to comprehend. For this, we will be using a very minimal data model object.</source>
          <target state="translated">체인 가능한 도우미 어설 션을 제공하는 것이 Chai가 제공하는 플러그인 유틸리티의 가장 일반적인 사용입니다. 기본에 들어가기 전에 Chai의 주장을 이해하기 위해 확장 할 주제가 필요합니다. 이를 위해 우리는 매우 작은 데이터 모델 객체를 사용할 것입니다.</target>
        </trans-unit>
        <trans-unit id="2812102236552bf8cb518ac59a91f6c985699406" translate="yes" xml:space="preserve">
          <source>Recommend adding it to &lt;code&gt;package.json&lt;/code&gt; devDependencies using a &lt;code&gt;*&lt;/code&gt; as the version tag. This will ensure that you always have the most recent version after running &lt;code&gt;npm install&lt;/code&gt;, which can be especially powerful when paired with a continuous integration tool.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; 를 버전 태그로 사용하여 &lt;code&gt;package.json&lt;/code&gt; devDependencies에 추가하는 것이 좋습니다 . 이렇게하면 &lt;code&gt;npm install&lt;/code&gt; 을 실행 한 후 항상 최신 버전 을 유지할 수 있습니다. 이는 지속적인 통합 도구와 함께 사용할 때 특히 강력합니다.</target>
        </trans-unit>
        <trans-unit id="6b6db374b1df5ae7b00d453d6638ecd7b39dc029" translate="yes" xml:space="preserve">
          <source>Remember, since the function used as the property assertion is invoked when also used as a method, and negation impacts ALL assertions after it is set, we would receive an error message resembling &lt;code&gt;expected [object Model] not to be instance of [object Model]&lt;/code&gt;. As such, please obey this general guideline when constructing chainable methods.</source>
          <target state="translated">속성 어설 션으로 사용되는 함수는 메서드로 사용될 때도 호출되며, 설정 후 모든 어설 션에 부정이 영향을 미치기 때문에 &lt;code&gt;expected [object Model] not to be instance of [object Model]&lt;/code&gt; 과 유사한 오류 메시지가 나타납니다 . . 따라서 체인 가능한 메소드를 구성 할 때이 일반 지침을 따르십시오.</target>
        </trans-unit>
        <trans-unit id="319c18c485a41e0a4ced34ec14cebdc38a5945f7" translate="yes" xml:space="preserve">
          <source>Return a proxy of given object that throws an error when a non-existent property is read. By default, the root cause is assumed to be a misspelled property, and thus an attempt is made to offer a reasonable suggestion from the list of existing properties. However, if a nonChainableMethodName is provided, then the root cause is instead a failure to invoke a non-chainable method prior to reading the non-existent property.</source>
          <target state="translated">존재하지 않는 속성을 읽을 때 오류가 발생하는 지정된 객체의 프록시를 반환합니다. 기본적으로 근본 원인은 철자가 틀린 속성으로 간주되므로 기존 속성 목록에서 합리적인 제안을 제공하려고합니다. 그러나 nonChainableMethodName이 제공되면 근본 원인은 존재하지 않는 특성을 읽기 전에 체인 불가능한 메소드를 호출하지 못하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="f30817d85fe17217ce27f35a83c34dfe23d24e41" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;actual&lt;/code&gt; value for an Assertion.</source>
          <target state="translated">어설 션 의 &lt;code&gt;actual&lt;/code&gt; 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="405410ce9ee575c89425aba08cbdcc05369fdac0" translate="yes" xml:space="preserve">
          <source>Returns the name of a function. This also includes a polyfill function if &lt;code&gt;constructorFn.name&lt;/code&gt; is not defined.</source>
          <target state="translated">함수 이름을 반환합니다. &lt;code&gt;constructorFn.name&lt;/code&gt; 이 정의되지 않은 경우 polyfill 함수도 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="654935b2e94b75a5a4ffec9df51fa41e7f3184e6" translate="yes" xml:space="preserve">
          <source>Returns the name of a function. When a non-function instance is passed, returns &lt;code&gt;null&lt;/code&gt;. This also includes a polyfill function if &lt;code&gt;aFunc.name&lt;/code&gt; is not defined.</source>
          <target state="translated">함수 이름을 반환합니다. 비 기능 인스턴스가 전달되면 &lt;code&gt;null&lt;/code&gt; 을 반환합니다 . &lt;code&gt;aFunc.name&lt;/code&gt; 이 정의되지 않은 경우 polyfill 함수도 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="b217e98c3bf70f3cf4633a5447d6587eea974ba1" translate="yes" xml:space="preserve">
          <source>Ruby</source>
          <target state="translated">Ruby</target>
        </trans-unit>
        <trans-unit id="40d9321ff5c9f892b0fbb3ec4dd2cdcc9d72ae3d" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;.keys&lt;/code&gt; doc for guidance on when to use &lt;code&gt;.any&lt;/code&gt; or &lt;code&gt;.all&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.any&lt;/code&gt; 또는 &lt;code&gt;.all&lt;/code&gt; 사용시기에 대한 지침 은 &lt;code&gt;.keys&lt;/code&gt; 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9a7b5e02106e57b839b4184c9a2914652260981e" translate="yes" xml:space="preserve">
          <source>Set it to zero if you want to disable truncating altogether.</source>
          <target state="translated">잘림을 비활성화하려면 0으로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="e912c200d2410e97a952bccd1ca3bef442ae3c06" translate="yes" xml:space="preserve">
          <source>Should</source>
          <target state="translated">Should</target>
        </trans-unit>
        <trans-unit id="5bf69a6c20c064e86d63e24be6798b5c57d76d6e" translate="yes" xml:space="preserve">
          <source>Should Extras</source>
          <target state="translated">여분의 것</target>
        </trans-unit>
        <trans-unit id="67370934577f5761dc873f707334304e03b7be23" translate="yes" xml:space="preserve">
          <source>Simple and concise. Chai can take it from here. It is also worth mentioning that because this extension pattern is used so often, Chai makes it just a bit easier. The following can be used in place of the first line above:</source>
          <target state="translated">간단하고 간결합니다. 차이는 여기에서 가져갈 수 있습니다. 이 확장 패턴이 너무 자주 사용되기 때문에 Chai는 조금 더 쉽게 만들 수 있습니다. 위의 첫 번째 줄 대신 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="97f7ef1a81b38be39f7dfb7019f50f8c393fe37d" translate="yes" xml:space="preserve">
          <source>Strict (&lt;code&gt;===&lt;/code&gt;) equality is used to compare before and after values.</source>
          <target state="translated">엄격한 ( &lt;code&gt;===&lt;/code&gt; ) 동등성은 전후 값을 비교하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="532934b3f1d1d72e25258ddd310ab8d763c6a3fe" translate="yes" xml:space="preserve">
          <source>Strict equality (===) is used. When asserting the absence of a value in an array, the array is searched to confirm the absence of an element that&amp;rsquo;s strictly equal to the given value. When asserting a subset of properties in an object, the object is searched to confirm that at least one of the given property keys is either not present or not strictly equal to the given property value. For instance:</source>
          <target state="translated">엄격한 평등 (===)이 사용됩니다. 배열에 값이 없다고 주장하면 주어진 값과 엄격하게 동일한 요소가 없는지 확인하기 위해 배열을 검색합니다. 오브젝트에서 특성의 서브 세트를 어설 션 할 때, 주어진 특성 키 중 하나 이상이 존재하지 않거나 주어진 특성 값과 엄격하게 동일하지 않은지 확인하기 위해 오브젝트를 검색합니다. 예를 들어 :</target>
        </trans-unit>
        <trans-unit id="3d21282057b1f72a37cdddc76395c6d11cfc39cb" translate="yes" xml:space="preserve">
          <source>Strict equality (===) is used. When asserting the inclusion of a value in an array, the array is searched for an element that&amp;rsquo;s strictly equal to the given value. When asserting a subset of properties in an object, the object is searched for the given property keys, checking that each one is present and strictly equal to the given property value. For instance:</source>
          <target state="translated">엄격한 평등 (===)이 사용됩니다. 배열에 값의 포함을 주장하면 주어진 값과 엄격하게 동일한 요소를 배열에서 검색합니다. 개체의 속성 하위 집합을 어설 션 할 때 개체는 지정된 속성 키를 검색하여 각 속성 키가 존재하며 주어진 속성 값과 엄격하게 동일한 지 확인합니다. 예를 들어 :</target>
        </trans-unit>
        <trans-unit id="b1605a937fa8c2a6b0663986d2e0243a9f9a9df7" translate="yes" xml:space="preserve">
          <source>Test and object for expression.</source>
          <target state="translated">표현을위한 테스트와 객체.</target>
        </trans-unit>
        <trans-unit id="d49fac85eb5509adf6d2b314fe369aa3743910a2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;api/assert/index&quot;&gt;Assert&lt;/a&gt; API covers the TDD assertion style.</source>
          <target state="translated">&lt;a href=&quot;api/assert/index&quot;&gt;어설의&lt;/a&gt; API는 TDD 어설 스타일을 다룹니다.</target>
        </trans-unit>
        <trans-unit id="d6d9870822ba5a35d96f9530ed81ae1f022ffb1b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;api/bdd/index&quot;&gt;Expect / Should&lt;/a&gt; API covers the BDD assertion styles.</source>
          <target state="translated">는 &lt;a href=&quot;api/bdd/index&quot;&gt;기대 /해야의&lt;/a&gt; API 커버 BDD에 주장 스타일을.</target>
        </trans-unit>
        <trans-unit id="8b3e80b093bdf3fec88db1b4848dc5938a80a32f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;api/plugins/index&quot;&gt;Plugin API&lt;/a&gt; will be of use to anyone interested in building plugins as helpers to DRY up your tests, or for release to the community.</source>
          <target state="translated">&lt;a href=&quot;api/plugins/index&quot;&gt;플러그인 API는&lt;/a&gt; 테스트를 건조, 또는 지역 사회에 릴리스하는 도우미로 플러그인을 구축에 관심이있는 사람에게 유용 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="bf4e6faf5f6d2c1616f87bee2830673e0ef29bb5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.chaijs.com/api/test/&quot;&gt;Online Test Suite&lt;/a&gt; is a live run of Chai&amp;rsquo;s test suite. Use it to ensure browser compatibility.</source>
          <target state="translated">&lt;a href=&quot;https://www.chaijs.com/api/test/&quot;&gt;온라인 테스트 스위트는&lt;/a&gt; 차이 티의 테스트 스위트의 라이브 실행됩니다. 브라우저 호환성을 위해 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="f0e93eed5bc12088166768acde0c97148f7e968c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.deep.equal&lt;/code&gt; assertion is almost identical to &lt;code&gt;.eql&lt;/code&gt; but with one difference: &lt;code&gt;.deep.equal&lt;/code&gt; causes deep equality comparisons to also be used for any other assertions that follow in the chain.</source>
          <target state="translated">&lt;code&gt;.deep.equal&lt;/code&gt; 주장은 거의 동일하다 &lt;code&gt;.eql&lt;/code&gt; 하지만 한 가지 차이점 : &lt;code&gt;.deep.equal&lt;/code&gt; 원인 깊은 동등 비교는 체인에 따라 다른 주장에 사용되는.</target>
        </trans-unit>
        <trans-unit id="9dc57dd9da14ac6786493e20868eff32d8e4681c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Assertion&lt;/code&gt; variable is now a constructor for an assertion chain; &lt;code&gt;new Assertion(obj)&lt;/code&gt; is now equivalent to &lt;code&gt;expect(obj)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Assertion&lt;/code&gt; 변수는 이제 주장의 생성자 쇄이고; &lt;code&gt;new Assertion(obj)&lt;/code&gt; 은 이제 &lt;code&gt;expect(obj)&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="74618b8231236140d8f20da4eb17109378b842c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;assert&lt;/code&gt; style is very similar to node.js&amp;rsquo; included assert module, with a bit of extra sugar. Of the three style options, &lt;code&gt;assert&lt;/code&gt; is the only one that is not chainable. Check out the &lt;a href=&quot;../../guide/styles/index&quot;&gt;Style Guide&lt;/a&gt; for a comparison.</source>
          <target state="translated">&lt;code&gt;assert&lt;/code&gt; 스타일은 추가 설탕의 비트와 함께, Node.js를 '포함 어설 션 모듈과 매우 유사합니다. 세 가지 스타일 옵션 중 &lt;code&gt;assert&lt;/code&gt; 는 연결할 수없는 유일한 옵션 입니다. &lt;a href=&quot;../../guide/styles/index&quot;&gt;스타일 가이드&lt;/a&gt; 에서 비교를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="47411df1644e5508403fec584ba525c10d36bb97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chai&lt;/code&gt; export is included so that you can build helpers that can be used in multiple test files, or package your helpers as a plugin to share with the community. A more appropriate pattern for creating helpers is as follows&amp;hellip;</source>
          <target state="translated">&lt;code&gt;chai&lt;/code&gt; 는 지역 사회와 공유에 플러그인으로 사용자의 도우미를 여러 테스트 파일에 사용할 수있는 헬퍼를 구축하거나 포장 할 수 있도록 수출이 포함되어 있습니다. 헬퍼를 생성하기위한보다 적절한 패턴은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="74ef4b5b303270392d7a1ab743a1673f5c65a150" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;expect&lt;/code&gt; interface provides a function as a starting point for chaining your language assertions. It works on node.js and in all browsers.</source>
          <target state="translated">는 &lt;code&gt;expect&lt;/code&gt; 인터페이스 언어 주장 체인을위한 시작 지점으로 기능을 제공합니다. node.js와 모든 브라우저에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="8557704ddccfd175fdaf8d3a54a7f9203c3fb891" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;should&lt;/code&gt; interface extends &lt;code&gt;Object.prototype&lt;/code&gt; to provide a single getter as the starting point for your language assertions. It works on node.js and in all modern browsers except Internet Explorer.</source>
          <target state="translated">&lt;code&gt;should&lt;/code&gt; 인터페이스를 확장 &lt;code&gt;Object.prototype&lt;/code&gt; 에를 언어 주장의 시작 지점으로 하나의 게터를 제공 할 수 있습니다. node.js와 Internet Explorer를 제외한 모든 최신 브라우저에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="125317cd5c69a0f75b22f2610760b61732d40cff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;should&lt;/code&gt; style allows for the same chainable assertions as the &lt;code&gt;expect&lt;/code&gt; interface, however it extends each object with a &lt;code&gt;should&lt;/code&gt; property to start your chain. This style has some issues when used with Internet Explorer, so be aware of browser compatibility.</source>
          <target state="translated">&lt;code&gt;should&lt;/code&gt; 스타일은 같은 체인 방식 주장을 가능하게 &lt;code&gt;expect&lt;/code&gt; 하지만 그것은 함께 각 개체를 확장 인터페이스 &lt;code&gt;should&lt;/code&gt; 당신의 체인을 시작하는 속성입니다. 이 스타일에는 Internet Explorer와 함께 사용할 때 몇 가지 문제가 있으므로 브라우저 호환성에주의하십시오.</target>
        </trans-unit>
        <trans-unit id="d12964f7af7536c46bb9c94383504e6a046f425d" translate="yes" xml:space="preserve">
          <source>The BDD style comes in two flavors: &lt;code&gt;expect&lt;/code&gt; and &lt;code&gt;should&lt;/code&gt;. Both use the same chainable language to construct assertions, but they differ in the way an assertion is initially constructed. In the case of &lt;code&gt;should&lt;/code&gt;, there are also some caveats and additional tools to overcome the caveats.</source>
          <target state="translated">BDD 스타일은 두 가지 맛이 있습니다 : &lt;code&gt;expect&lt;/code&gt; 와 &lt;code&gt;should&lt;/code&gt; . 둘 다 동일한 체인 가능 언어를 사용하여 어설 션을 구성하지만 처음에는 어설 션이 구성되는 방식이 다릅니다. &lt;code&gt;should&lt;/code&gt; 의 경우 , 경고를 극복하기위한 몇 가지주의 사항과 추가 도구도 있습니다.</target>
        </trans-unit>
        <trans-unit id="74919a9430f44b9d0ddf78c7cddf4531029d6c29" translate="yes" xml:space="preserve">
          <source>The BDD style is exposed through &lt;code&gt;expect&lt;/code&gt; or &lt;code&gt;should&lt;/code&gt; interfaces. In both scenarios, you chain together natural language assertions.</source>
          <target state="translated">BDD 스타일은 &lt;code&gt;expect&lt;/code&gt; 또는 &lt;code&gt;should&lt;/code&gt; 인터페이스를 통해 노출됩니다 . 두 시나리오에서 모두 자연어 어설 션을 연결합니다.</target>
        </trans-unit>
        <trans-unit id="0a3584ceb928876666a0eae36f5567051a2e2900" translate="yes" xml:space="preserve">
          <source>The BDD styles are &lt;code&gt;expect&lt;/code&gt; and &lt;code&gt;should&lt;/code&gt;. Both use the same chainable language to construct assertions, but they differ in the way an assertion is initially constructed. Check out the &lt;a href=&quot;../../guide/styles/index&quot;&gt;Style Guide&lt;/a&gt; for a comparison.</source>
          <target state="translated">BDD 스타일은 &lt;code&gt;expect&lt;/code&gt; 하고 &lt;code&gt;should&lt;/code&gt; . 둘 다 동일한 체인 가능 언어를 사용하여 어설 션을 구성하지만 처음에는 어설 션이 구성되는 방식이 다릅니다. &lt;a href=&quot;../../guide/styles/index&quot;&gt;스타일 가이드&lt;/a&gt; 에서 비교를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="a26fc63ab43a54b415b885b49ab06f549a956a26" translate="yes" xml:space="preserve">
          <source>The Chai API is broken down by style or task.</source>
          <target state="translated">Chai API는 스타일 또는 작업별로 분류됩니다.</target>
        </trans-unit>
        <trans-unit id="37695f5f5e18942c67f8f85d95855ee5bb207b20" translate="yes" xml:space="preserve">
          <source>The above assertion isn&amp;rsquo;t the same thing as not providing &lt;code&gt;descriptor&lt;/code&gt;. Instead, it&amp;rsquo;s asserting that the target object has a &lt;code&gt;b&lt;/code&gt; property descriptor that&amp;rsquo;s deeply equal to &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">위의 주장은 &lt;code&gt;descriptor&lt;/code&gt; 를 제공하지 않는 것과 다릅니다 . 대신 대상 객체 에 &lt;code&gt;undefined&lt;/code&gt; 와 깊이 동일한 &lt;code&gt;b&lt;/code&gt; 속성 설명자가 있다고 주장합니다 .</target>
        </trans-unit>
        <trans-unit id="a1b9b77a727bcb24e260c75980334f7da245fa20" translate="yes" xml:space="preserve">
          <source>The above assertion isn&amp;rsquo;t the same thing as not providing &lt;code&gt;val&lt;/code&gt;. Instead, it&amp;rsquo;s asserting that the target object has a &lt;code&gt;b&lt;/code&gt; property that&amp;rsquo;s equal to &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">위의 주장은 &lt;code&gt;val&lt;/code&gt; 을 제공하지 않는 것과 다릅니다 . 대신 대상 객체 에 &lt;code&gt;undefined&lt;/code&gt; 와 동일한 &lt;code&gt;b&lt;/code&gt; 속성 이 있다고 주장합니다 .</target>
        </trans-unit>
        <trans-unit id="c1a9e518400dc4f36b6d644ad8ecf195d54b9bf1" translate="yes" xml:space="preserve">
          <source>The above expectations will pass. When working with a model it will run our custom assertion, and when working with non-models it will revert to the original behavior. We will, however, run into a bit of trouble if we try to negate an &lt;code&gt;ok&lt;/code&gt; assertion on a model.</source>
          <target state="translated">위의 기대는 통과 될 것입니다. 모델 작업시 사용자 지정 어설 ​​션이 실행되고 비 모델 작업시 원래 동작으로 돌아갑니다. 그러나 우리는 약간의 문제로 실행 우리는 부정하려고합니다 경우 &lt;code&gt;ok&lt;/code&gt; 모델에 주장.</target>
        </trans-unit>
        <trans-unit id="ff902bc32b6a8fecb785624b3fd445c893b153d1" translate="yes" xml:space="preserve">
          <source>The alias &lt;code&gt;.Arguments&lt;/code&gt; can be used interchangeably with &lt;code&gt;.arguments&lt;/code&gt;.</source>
          <target state="translated">별명 &lt;code&gt;.Arguments&lt;/code&gt; 는 &lt;code&gt;.arguments&lt;/code&gt; 와 호환 가능하게 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1815a399081ce7a0893c1b2aac104f7a1c497258" translate="yes" xml:space="preserve">
          <source>The alias &lt;code&gt;.an&lt;/code&gt; can be used interchangeably with &lt;code&gt;.a&lt;/code&gt;.</source>
          <target state="translated">별명 &lt;code&gt;.an&lt;/code&gt; 은 &lt;code&gt;.a&lt;/code&gt; 와 상호 교환하여 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2150a403c0b22715d382f99b231e08f43fbd6d2f" translate="yes" xml:space="preserve">
          <source>The alias &lt;code&gt;.approximately&lt;/code&gt; can be used interchangeably with &lt;code&gt;.closeTo&lt;/code&gt;.</source>
          <target state="translated">별명은 &lt;code&gt;.approximately&lt;/code&gt; 와 상호 교환 사용할 수 있습니다 &lt;code&gt;.closeTo&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="621138bbfe7d60f266e0c989fb64ff022c1879b3" translate="yes" xml:space="preserve">
          <source>The alias &lt;code&gt;.changes&lt;/code&gt; can be used interchangeably with &lt;code&gt;.change&lt;/code&gt;.</source>
          <target state="translated">별명 &lt;code&gt;.changes&lt;/code&gt; 와 상호 교환 사용할 수 있습니다 &lt;code&gt;.change&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8de998d18ba6b5353e321b4f016553ed6d9f6347" translate="yes" xml:space="preserve">
          <source>The alias &lt;code&gt;.decreases&lt;/code&gt; can be used interchangeably with &lt;code&gt;.decrease&lt;/code&gt;.</source>
          <target state="translated">별명 &lt;code&gt;.decreases&lt;/code&gt; 는 &lt;code&gt;.decrease&lt;/code&gt; 와 상호 교환하여 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a1bcebac6714c98a2943208ab0c61b07b524c8c3" translate="yes" xml:space="preserve">
          <source>The alias &lt;code&gt;.eqls&lt;/code&gt; can be used interchangeably with &lt;code&gt;.eql&lt;/code&gt;.</source>
          <target state="translated">별명 &lt;code&gt;.eqls&lt;/code&gt; 는 &lt;code&gt;.eql&lt;/code&gt; 과 호환 가능하게 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="086ef9729ad9e73123e117b62298e29045c5cebc" translate="yes" xml:space="preserve">
          <source>The alias &lt;code&gt;.gte&lt;/code&gt; can be used interchangeably with &lt;code&gt;.least&lt;/code&gt;.</source>
          <target state="translated">별명 &lt;code&gt;.gte&lt;/code&gt; 는 &lt;code&gt;.least&lt;/code&gt; 와 호환 가능하게 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9b6599582c35b5ff37e9edc825c1ecc66f6392b7" translate="yes" xml:space="preserve">
          <source>The alias &lt;code&gt;.haveOwnPropertyDescriptor&lt;/code&gt; can be used interchangeably with &lt;code&gt;.ownPropertyDescriptor&lt;/code&gt;.</source>
          <target state="translated">별명 &lt;code&gt;.haveOwnPropertyDescriptor&lt;/code&gt; 는 &lt;code&gt;.ownPropertyDescriptor&lt;/code&gt; 와 상호 교환하여 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="464a03168481b826b433145d766826afba2bd1a1" translate="yes" xml:space="preserve">
          <source>The alias &lt;code&gt;.increases&lt;/code&gt; can be used interchangeably with &lt;code&gt;.increase&lt;/code&gt;.</source>
          <target state="translated">별명 &lt;code&gt;.increases&lt;/code&gt; 는 &lt;code&gt;.increase&lt;/code&gt; 와 상호 교환하여 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0de9f18fd61b82208fd1dd4bf32ee559bed5248a" translate="yes" xml:space="preserve">
          <source>The alias &lt;code&gt;.instanceOf&lt;/code&gt; can be used interchangeably with &lt;code&gt;.instanceof&lt;/code&gt;.</source>
          <target state="translated">별명 &lt;code&gt;.instanceOf&lt;/code&gt; 는 &lt;code&gt;.instanceof&lt;/code&gt; 와 상호 교환하여 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="23bc70f60f0a621e02da84f643aafbe523e4f38d" translate="yes" xml:space="preserve">
          <source>The alias &lt;code&gt;.key&lt;/code&gt; can be used interchangeably with &lt;code&gt;.keys&lt;/code&gt;.</source>
          <target state="translated">별명 &lt;code&gt;.key&lt;/code&gt; 는 &lt;code&gt;.keys&lt;/code&gt; 와 상호 교환하여 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1ac083e15b7b8424b430e1b868f7805eafe71533" translate="yes" xml:space="preserve">
          <source>The alias &lt;code&gt;.lte&lt;/code&gt; can be used interchangeably with &lt;code&gt;.most&lt;/code&gt;.</source>
          <target state="translated">별명 &lt;code&gt;.lte&lt;/code&gt; 는 &lt;code&gt;.most&lt;/code&gt; 와 상호 교환 가능하게 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b2fe311934e82c35b689fdbb92540937b50c96ac" translate="yes" xml:space="preserve">
          <source>The alias &lt;code&gt;.matches&lt;/code&gt; can be used interchangeably with &lt;code&gt;.match&lt;/code&gt;.</source>
          <target state="translated">별명 &lt;code&gt;.matches&lt;/code&gt; 이 와 상호 교환 사용할 수 있습니다 &lt;code&gt;.match&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9e41058d308f91c24c01265d2791e9d236e2380b" translate="yes" xml:space="preserve">
          <source>The alias &lt;code&gt;.respondsTo&lt;/code&gt; can be used interchangeably with &lt;code&gt;.respondTo&lt;/code&gt;.</source>
          <target state="translated">별명 &lt;code&gt;.respondsTo&lt;/code&gt; 는 &lt;code&gt;.respondTo&lt;/code&gt; 와 상호 교환하여 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="150f638fd640c8a1d2a7092c4be9fe72459df739" translate="yes" xml:space="preserve">
          <source>The alias &lt;code&gt;.satisfies&lt;/code&gt; can be used interchangeably with &lt;code&gt;.satisfy&lt;/code&gt;.</source>
          <target state="translated">별명 &lt;code&gt;.satisfies&lt;/code&gt; 는 &lt;code&gt;.satisfy&lt;/code&gt; 와 상호 교환하여 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="144cf04c82b0f9248cce87875908a48e7af5bbe1" translate="yes" xml:space="preserve">
          <source>The aliases &lt;code&gt;.equals&lt;/code&gt; and &lt;code&gt;eq&lt;/code&gt; can be used interchangeably with &lt;code&gt;.equal&lt;/code&gt;.</source>
          <target state="translated">별명 &lt;code&gt;.equals&lt;/code&gt; 및 &lt;code&gt;eq&lt;/code&gt; 는 &lt;code&gt;.equal&lt;/code&gt; 과 호환 가능하게 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="abb2fe56f79b9820c60d704dcff74afc134e3ea8" translate="yes" xml:space="preserve">
          <source>The aliases &lt;code&gt;.gt&lt;/code&gt; and &lt;code&gt;.greaterThan&lt;/code&gt; can be used interchangeably with &lt;code&gt;.above&lt;/code&gt;.</source>
          <target state="translated">별명 &lt;code&gt;.gt&lt;/code&gt; 와 &lt;code&gt;.greaterThan&lt;/code&gt; 이 와 상호 교환 사용할 수 있습니다 &lt;code&gt;.above&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fadc5780b8da8614a8e805a2fa75236b9833a56d" translate="yes" xml:space="preserve">
          <source>The aliases &lt;code&gt;.includes&lt;/code&gt;, &lt;code&gt;.contain&lt;/code&gt;, and &lt;code&gt;.contains&lt;/code&gt; can be used interchangeably with &lt;code&gt;.include&lt;/code&gt;.</source>
          <target state="translated">별명의 &lt;code&gt;.includes&lt;/code&gt; 는 , &lt;code&gt;.contain&lt;/code&gt; 및 &lt;code&gt;.contains&lt;/code&gt; 이 와 상호 교환 사용할 수 있습니다 &lt;code&gt;.include&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d6e649ae80362589938785e7338bcf98775ad85e" translate="yes" xml:space="preserve">
          <source>The aliases &lt;code&gt;.lt&lt;/code&gt; and &lt;code&gt;.lessThan&lt;/code&gt; can be used interchangeably with &lt;code&gt;.below&lt;/code&gt;.</source>
          <target state="translated">별명 &lt;code&gt;.lt&lt;/code&gt; 및 &lt;code&gt;.lessThan&lt;/code&gt; 은 &lt;code&gt;.below&lt;/code&gt; 와 상호 교환하여 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fd8df363e7585a66979be16efb67b213e53a5805" translate="yes" xml:space="preserve">
          <source>The aliases &lt;code&gt;.throws&lt;/code&gt; and &lt;code&gt;.Throw&lt;/code&gt; can be used interchangeably with &lt;code&gt;.throw&lt;/code&gt;.</source>
          <target state="translated">별칭 &lt;code&gt;.throws&lt;/code&gt; 및 &lt;code&gt;.Throw&lt;/code&gt; 이 와 상호 교환 사용할 수 있습니다 &lt;code&gt;.throw&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="038f6268c1b281893a080b7e7475cb7ca2bb6da8" translate="yes" xml:space="preserve">
          <source>The assert style is exposed through &lt;code&gt;assert&lt;/code&gt; interface. This provides the classic assert-dot notation, similar to that packaged with node.js. This assert module, however, provides several additional tests and is browser compatible.</source>
          <target state="translated">assert 스타일은 &lt;code&gt;assert&lt;/code&gt; 인터페이스를 통해 노출됩니다 . 이것은 node.js로 패키지 된 것과 유사한 고전 단언 법을 제공합니다. 그러나이 어설 션 모듈은 몇 가지 추가 테스트를 제공하며 브라우저와 호환됩니다.</target>
        </trans-unit>
        <trans-unit id="19c6a76b048ca2f6976fcbbbd21f79962c6a01d5" translate="yes" xml:space="preserve">
          <source>The assertions &lt;code&gt;.ownProperty&lt;/code&gt; and &lt;code&gt;.haveOwnProperty&lt;/code&gt; can be used interchangeably with &lt;code&gt;.own.property&lt;/code&gt;.</source>
          <target state="translated">어설 &lt;code&gt;.ownProperty&lt;/code&gt; 및 &lt;code&gt;.haveOwnProperty&lt;/code&gt; 이 와 상호 교환 사용할 수 있습니다 &lt;code&gt;.own.property&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="575c9195bdd0f72e63ed36ff98bda9d1476aa36f" translate="yes" xml:space="preserve">
          <source>The flag utility is exposed as &lt;code&gt;utils.flag&lt;/code&gt; from within our &lt;code&gt;use&lt;/code&gt; function. It can function as either a getter or a setter, depending on the number of arguments passed to it.</source>
          <target state="translated">플래그 유틸리티는 &lt;code&gt;use&lt;/code&gt; 함수 내에서 &lt;code&gt;utils.flag&lt;/code&gt; 로 노출됩니다 . 전달 된 인수 수에 따라 getter 또는 setter로 기능 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="82c5a8f1600060adb1ad333378ac7434517018d6" translate="yes" xml:space="preserve">
          <source>The following are provided as chainable getters to improve the readability of your assertions.</source>
          <target state="translated">다음은 어설 션의 가독성을 향상시키기 위해 체인 가능한 게터로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="5ef44826ddaba6ca006a9ed6bdb346ff62a4f2e7" translate="yes" xml:space="preserve">
          <source>The following flags are used by Chai&amp;rsquo;s core assertions. Side effects may occur should you interfere with these.</source>
          <target state="translated">다음 플래그는 Chai의 핵심 어설 션에서 사용됩니다. 이를 방해하면 부작용이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="413148f0eb161734a945416b02c73edebfba0173" translate="yes" xml:space="preserve">
          <source>The following would be the results.</source>
          <target state="translated">결과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="17c055d3bb527c8def557b6e5b0f61e08063e98b" translate="yes" xml:space="preserve">
          <source>The following would work&amp;hellip;</source>
          <target state="translated">다음은 효과가 있습니다.</target>
        </trans-unit>
        <trans-unit id="b52bd94d7d7a54945faf8f771334bb60c5d6f6f6" translate="yes" xml:space="preserve">
          <source>The function which will be used gets passed two parameters to its scope. The first is the &lt;code&gt;chai&lt;/code&gt; export, the second is an object containing a number of utility methods (we&amp;rsquo;ll get to those in a minute).</source>
          <target state="translated">사용될 함수는 두 개의 매개 변수를 해당 범위로 전달합니다. 첫 번째는 &lt;code&gt;chai&lt;/code&gt; 내보내기이고 두 번째는 많은 유틸리티 메소드를 포함하는 오브젝트입니다 (분 후에 메소드를 가져옵니다).</target>
        </trans-unit>
        <trans-unit id="51c8574406864004f56fdcd0103ea06cab77d539" translate="yes" xml:space="preserve">
          <source>The latest tagged version will be available for hot-linking at &lt;a href=&quot;https://www.chaijs.com/chai.js&quot;&gt;http://chaijs.com/chai.js&lt;/a&gt;. If you prefer to host yourself, use the &lt;code&gt;chai.js&lt;/code&gt; file from the root of the github project. We recommend that you always use a version tag as your starting point, so the &lt;a href=&quot;https://github.com/chaijs/chai/tags&quot;&gt;tag download list&lt;/a&gt; is the best place to start.</source>
          <target state="translated">최신 태그 버전은 &lt;a href=&quot;https://www.chaijs.com/chai.js&quot;&gt;http://chaijs.com/chai.js&lt;/a&gt; 에서 핫 링크 할 수 있습니다 . 직접 호스트 하고 싶다면 github 프로젝트의 루트에서 &lt;code&gt;chai.js&lt;/code&gt; 파일을 사용하십시오 . 항상 버전 태그를 시작 지점으로 사용하는 것이 좋습니다. 따라서 &lt;a href=&quot;https://github.com/chaijs/chai/tags&quot;&gt;태그 다운로드 목록&lt;/a&gt; 을 시작하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="79f3bbf4c775d50ecb2bcd6eb57dd48b6a6c6ec6" translate="yes" xml:space="preserve">
          <source>The most important of Chai&amp;rsquo;s reserved flags is the &lt;code&gt;object&lt;/code&gt; flag. This is the subject of an assertion.</source>
          <target state="translated">Chai의 예약 플래그 중 가장 중요한 것은 &lt;code&gt;object&lt;/code&gt; 플래그입니다. 이것이 주장의 주제입니다.</target>
        </trans-unit>
        <trans-unit id="6c44436f95e25befe68716227f0f2c4a5df636fe" translate="yes" xml:space="preserve">
          <source>The path info consists of an object with the following properties:</source>
          <target state="translated">경로 정보는 다음과 같은 속성을 가진 객체로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="d793d467ae5ab9913a2abe0b92062eec92cb2cbd" translate="yes" xml:space="preserve">
          <source>The plugin utilities are for those who want to extend Chai with their own set of assertions. The &lt;a href=&quot;../../guide/plugins/index&quot;&gt;Code Plugin Concepts&lt;/a&gt; and &lt;a href=&quot;../../guide/helpers/index&quot;&gt;Building a Helper&lt;/a&gt; guide tutorials are a great reference on how to get started with your own assertions.</source>
          <target state="translated">플러그인 유틸리티는 자체 어설 션 세트로 Chai를 확장하려는 사용자를위한 것입니다. &lt;a href=&quot;../../guide/plugins/index&quot;&gt;코드 플러그인의 개념&lt;/a&gt; 과 &lt;a href=&quot;../../guide/helpers/index&quot;&gt;구축 도우미&lt;/a&gt; 가이드 튜토리얼은 자신의 주장을 시작하는 방법에 대한 좋은 참조입니다.</target>
        </trans-unit>
        <trans-unit id="de83ff9433df34d21863479ea46c2c7141fdd9c1" translate="yes" xml:space="preserve">
          <source>The result can then be used as both a method assertion, executing both &lt;code&gt;method&lt;/code&gt; and &lt;code&gt;chainingBehavior&lt;/code&gt;, or as a language chain, which only executes &lt;code&gt;chainingBehavior&lt;/code&gt;.</source>
          <target state="translated">그런 다음 &lt;code&gt;method&lt;/code&gt; 와 &lt;code&gt;chainingBehavior&lt;/code&gt; 를 모두 실행하는 메소드 어설 션 또는 &lt;code&gt;chainingBehavior&lt;/code&gt; 만 실행하는 언어 체인으로 결과를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f4ec1dd098fc32631ac57593578bc25d93f93cda" translate="yes" xml:space="preserve">
          <source>The target&amp;rsquo;s enumerable and non-enumerable properties are always included in the search. By default, both own and inherited properties are included. Add &lt;code&gt;.own&lt;/code&gt; earlier in the chain to exclude inherited properties from the search.</source>
          <target state="translated">대상의 열거 가능하고 열거 불가능한 속성은 항상 검색에 포함됩니다. 기본적으로 자체 속성과 상속 된 속성이 모두 포함됩니다. 체인에서 이전에 &lt;code&gt;.own&lt;/code&gt; 을 추가 하여 검색에서 상속 된 속성을 제외합니다.</target>
        </trans-unit>
        <trans-unit id="92663fd053cd56c22ff6dbc7493e54c08ac5e061" translate="yes" xml:space="preserve">
          <source>The upper-most core concept of how assertions work internally is the concept of flags. Each assertion has a set of mostly arbitrary flags - key:value pairs - associated with it. Chai uses a small number of these internally, but the store is also available for developers to expand on.</source>
          <target state="translated">어설 션이 내부적으로 작동하는 방식의 최상위 핵심 개념은 플래그 개념입니다. 각 어설 션에는 주로 관련된 임의의 플래그 (키 : 값 쌍)가 있습니다. Chai는 내부적으로 소수를 사용하지만 개발자가 확장 할 수있는 상점도 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b257e8ea411e6789b1cfd7e979a239f4ba2bece" translate="yes" xml:space="preserve">
          <source>Then can be used as any other assertion.</source>
          <target state="translated">그런 다음 다른 어설 션으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="07c71f1d6a8a2fd7824616466f6c1e4f58ae6256" translate="yes" xml:space="preserve">
          <source>There are two ways in which this mistake can be made. The first way is by chaining the &lt;code&gt;length&lt;/code&gt; assertion directly off of an uninvoked chainable method. In this case, Chai suggests that the user use &lt;code&gt;lengthOf&lt;/code&gt; instead. The second way is by chaining the &lt;code&gt;length&lt;/code&gt; assertion directly off of an uninvoked non-chainable method. Non-chainable methods must be invoked prior to chaining. In this case, Chai suggests that the user consult the docs for the given assertion.</source>
          <target state="translated">이 실수는 두 가지 방법으로 이루어질 수 있습니다. 첫 번째 방법은 &lt;code&gt;length&lt;/code&gt; 어설 션을 호출되지 않은 체인 가능 메소드에서 직접 체인화하는 것입니다. 이 경우 Chai는 사용자가 &lt;code&gt;lengthOf&lt;/code&gt; 를 대신 사용하도록 제안합니다 . 두 번째 방법은 &lt;code&gt;length&lt;/code&gt; 어설 션을 호출되지 않은 비체 인 가능 메소드에서 직접 연결하는 것입니다. 연결하기 전에 연결 불가능한 메소드를 호출해야합니다. 이 경우 Chai는 사용자가 지정된 어설 션에 대한 문서를 참조 할 것을 제안합니다.</target>
        </trans-unit>
        <trans-unit id="e8839831053cf075f332d3694f60034c4d81d74e" translate="yes" xml:space="preserve">
          <source>This allows checking whether an object has own or inherited from prototype chain named property.</source>
          <target state="translated">이를 통해 객체가 property라는 프로토 타입 체인을 소유하거나 상속했는지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="df5463af4368270a1f6cbcf8070383e181344d8b" translate="yes" xml:space="preserve">
          <source>This allows the retrieval of directly-owned enumerable property names and symbols of an object. This function is necessary because Object.keys only returns enumerable property names, not enumerable property symbols.</source>
          <target state="translated">이를 통해 직접 소유 한 열거 가능 특성 이름 및 오브젝트의 기호를 검색 할 수 있습니다. 이 함수는 Object.keys가 열거 가능한 속성 기호가 아닌 열거 가능한 속성 이름 만 반환하기 때문에 필요합니다.</target>
        </trans-unit>
        <trans-unit id="bdcc35d53a2e9343c2be10d73c0b080112ebdc7e" translate="yes" xml:space="preserve">
          <source>This allows the retrieval of directly-owned enumerable property symbols of an object. This function is necessary because Object.getOwnPropertySymbols returns both enumerable and non-enumerable property symbols.</source>
          <target state="translated">이를 통해 객체의 직접 소유 할 수있는 열거 가능한 속성 기호를 검색 할 수 있습니다. Object.getOwnPropertySymbols는 열거 가능하고 열거 불가능한 특성 기호를 모두 리턴하므로이 함수가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="ae6a86bf41f5c7313e5eaf3210df3d0e4ab56157" translate="yes" xml:space="preserve">
          <source>This allows the retrieval of enumerable property names of an object, inherited or not.</source>
          <target state="translated">이를 통해 상속 가능 여부에 관계없이 객체의 열거 가능한 속성 이름을 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="50f22f13703225c8e5da9893b8050e0838d61bbd" translate="yes" xml:space="preserve">
          <source>This allows the retrieval of property info in an object given a string path.</source>
          <target state="translated">이를 통해 문자열 경로가 지정된 객체에서 속성 정보를 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1a7af74eaa39d721e29c7813d909762d29ab6a5" translate="yes" xml:space="preserve">
          <source>This allows the retrieval of property names of an object, enumerable or not, inherited or not.</source>
          <target state="translated">이것에 의해, 열거 가능한지 아닌지, 상속 된지 아닌지의 오브젝트의 프로퍼티 명을 취득 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d886c62561a03543d45afbf27c84ca13d9712b4f" translate="yes" xml:space="preserve">
          <source>This allows the retrieval of values in an object given a string path.</source>
          <target state="translated">이를 통해 문자열 경로가 지정된 객체에서 값을 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="34e15b1908b4ece202116174488323efba2c1d3c" translate="yes" xml:space="preserve">
          <source>This comes in handy when being used with non-descript topics such as booleans or numbers.</source>
          <target state="translated">부울 또는 숫자와 같이 설명이 아닌 주제와 함께 사용할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="746300ebcddb4c6418a93d7dec0e051dc5972f4e" translate="yes" xml:space="preserve">
          <source>This covers both positive and negative scenarios. No need to transfer flags in this case as &lt;code&gt;this.assert&lt;/code&gt; handles that automatically. The same pattern can also be used for &lt;code&gt;below&lt;/code&gt; and &lt;code&gt;within&lt;/code&gt;.</source>
          <target state="translated">여기에는 긍정적 시나리오와 부정적인 시나리오가 모두 포함됩니다. &lt;code&gt;this.assert&lt;/code&gt; 가 자동으로 처리 하므로이 경우 플래그를 전송할 필요가 없습니다 . &lt;code&gt;below&lt;/code&gt; 및 &lt;code&gt;within&lt;/code&gt; 동일한 패턴을 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d57512e302bd82417d7891aade2259573a73fee5" translate="yes" xml:space="preserve">
          <source>This flag is so often used that a shortcut was provided as the &lt;code&gt;_obj&lt;/code&gt; property of a constructed assertion.</source>
          <target state="translated">이 플래그는 너무 자주 사용되어 생성 된 어설 션 의 &lt;code&gt;_obj&lt;/code&gt; 속성 으로 바로 가기가 제공되었습니다 .</target>
        </trans-unit>
        <trans-unit id="657c0c39f6626db922933009f40ed03a3ef18f6a" translate="yes" xml:space="preserve">
          <source>This section of the guide introduces you to the three different assertion styles that you may use in your testing environment. Once you have made your selection, it is recommended that you look at the API Documentation for your selected style.</source>
          <target state="translated">이 가이드 섹션에서는 테스트 환경에서 사용할 수있는 세 가지 다른 어설 션 스타일을 소개합니다. 선택한 후에는 선택한 스타일에 대한 API 설명서를 보는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="1e0d50bc8f5015d834659552efbb4ac6fe55fdae" translate="yes" xml:space="preserve">
          <source>This tutorial assumes that you are familiar with the plugin &lt;a href=&quot;../plugins/index&quot;&gt;core concepts&lt;/a&gt;. If you have not yet read that article, it is recommended that you do so before continuing.</source>
          <target state="translated">이 학습서에서는 플러그인 &lt;a href=&quot;../plugins/index&quot;&gt;핵심 개념에&lt;/a&gt; 익숙하다고 가정합니다 . 해당 기사를 아직 읽지 않은 경우 계속하기 전에 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="a7374765997783860acd87f963f84e6884f79b1a" translate="yes" xml:space="preserve">
          <source>This tutorial will show you how to access Chai&amp;rsquo;s plugin API, use flags to transfer data through the language chain, and write your first assertion (and thorough error messages). Once you have finished here, &lt;a href=&quot;../helpers/index&quot;&gt;Building a Helper&lt;/a&gt; will show you how to compose properties and methods for use on the Chai language chain.</source>
          <target state="translated">이 튜토리얼에서는 Chai의 플러그인 API에 액세스하고, 플래그를 사용하여 언어 체인을 통해 데이터를 전송하고, 첫 번째 어설 션 (및 철저한 오류 메시지)을 작성하는 방법을 보여줍니다. 여기에서 작업을 마치면 &lt;a href=&quot;../helpers/index&quot;&gt;헬퍼 빌드&lt;/a&gt; 는 차이 언어 체인에서 사용할 속성과 메서드를 구성하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="ce03dfa2cc30de006d508958b4017f86e16cb891" translate="yes" xml:space="preserve">
          <source>This will change our error message to be a more informative &lt;code&gt;model assert ok id type:
expected 'dont panic' to [not] be a number&lt;/code&gt;. Much more informative!</source>
          <target state="translated">이것은 오류 메시지를보다 유익한 &lt;code&gt;model assert ok id type: expected 'dont panic' to [not] be a number&lt;/code&gt; 로 확인하여 ok id 유형을 확인합니다. 'not panic'은 숫자가 아닌 것으로 예상 됩니다. 훨씬 더 유익한!</target>
        </trans-unit>
        <trans-unit id="126ae29b4dbea8768271f38f452b1ef653fb6291" translate="yes" xml:space="preserve">
          <source>This will provide &lt;code&gt;chai&lt;/code&gt; as a global object, or &lt;code&gt;define&lt;/code&gt; it if you are using AMD.</source>
          <target state="translated">이것은 &lt;code&gt;chai&lt;/code&gt; 를 전역 객체로 제공 하거나 AMD를 사용하는 경우이를 &lt;code&gt;define&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="216b1594fec568ae4c5edbbd83f462eb48d9fa0a" translate="yes" xml:space="preserve">
          <source>Though a property is an elegant solution, it is likely not specific enough for the helper we are constructing. As our models have types, it would be beneficial to assert that our model is of a specific type. For this, we need a method.</source>
          <target state="translated">속성은 훌륭한 솔루션이지만 우리가 구성하는 도우미에게는 충분하지 않을 수 있습니다. 모델에 유형이 있으므로 모델이 특정 유형임을 주장하는 것이 좋습니다. 이를 위해서는 방법이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="b2b99591dfae0f0fde0b1099ff8ddfab27b58260" translate="yes" xml:space="preserve">
          <source>Though, we have one more small modification to make. Should our assertion fail for the wrong type of id attribute, we would get an error message that states &lt;code&gt;expected 'dont panic' to [not] be a number&lt;/code&gt;. Not entirely useful when running a large test suite, so we will provide it with a bit more information.</source>
          <target state="translated">그러나 우리는 조금 더 수정해야합니다. 잘못된 유형의 id 속성에 대해 어설 션이 실패하면 &lt;code&gt;expected 'dont panic' to [not] be a number&lt;/code&gt; 되는 오류 메시지가 표시 됩니다. 대규모 테스트 스위트를 실행할 때 전적으로 유용하지는 않으므로 조금 더 많은 정보를 제공 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="af0da72ba70c721dbb95d8de27f4f755bf057556" translate="yes" xml:space="preserve">
          <source>Throw a failure.</source>
          <target state="translated">실패를 던져라.</target>
        </trans-unit>
        <trans-unit id="10e66f7b84a722d2d17924f0820f783ba39e24fc" translate="yes" xml:space="preserve">
          <source>Throw a failure. Node.js &lt;code&gt;assert&lt;/code&gt; module-compatible.</source>
          <target state="translated">실패를 던져라. Node.js는 모듈 호환을 &lt;code&gt;assert&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="e66dfca20ff6497f5904d79b966944dea06085dc" translate="yes" xml:space="preserve">
          <source>To be used as a compareFunction with Array.prototype.sort. Compares elements using inspect instead of default behavior of using toString so that Symbols and objects with irregular/missing toString can still be sorted without a TypeError.</source>
          <target state="translated">Array.prototype.sort와 함께 compareFunction으로 사용됩니다. toString을 사용하는 기본 동작 대신 inspect를 사용하여 요소를 비교하여 불규칙하거나 누락 된 toString이있는 기호 및 객체를 TypeError없이 정렬 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a42f241b667dbe432af58b4aff68ccbec99b399a" translate="yes" xml:space="preserve">
          <source>To begin, we will construct Arthur again, then we can assert that he is who he says he is.</source>
          <target state="translated">시작하기 위해 우리는 다시 Arthur를 구성 할 것이고, 그가 그가 말하는 사람이라고 주장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="042a69f8d6ce62c31b61fae28d0eb8bf75906b18" translate="yes" xml:space="preserve">
          <source>To understand when to best use chainable methods we will examine a chainable method from Chai&amp;rsquo;s core.</source>
          <target state="translated">체인 가능한 방법을 가장 잘 사용해야하는시기를 이해하기 위해 Chai의 핵심에서 체인 가능한 방법을 검토 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="4fa8cc860c52b268dc6a3adcde7305e9415db5bb" translate="yes" xml:space="preserve">
          <source>Tools</source>
          <target state="translated">Tools</target>
        </trans-unit>
        <trans-unit id="83934880ac66905e4d74393b72af93596e51bf66" translate="yes" xml:space="preserve">
          <source>Transfer all the flags for &lt;code&gt;assertion&lt;/code&gt; to &lt;code&gt;object&lt;/code&gt;. If &lt;code&gt;includeAll&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;, then the base Chai assertion flags (namely &lt;code&gt;object&lt;/code&gt;, &lt;code&gt;ssfi&lt;/code&gt;, &lt;code&gt;lockSsfi&lt;/code&gt;, and &lt;code&gt;message&lt;/code&gt;) will not be transferred.</source>
          <target state="translated">&lt;code&gt;assertion&lt;/code&gt; 에 대한 모든 플래그 를 &lt;code&gt;object&lt;/code&gt; 로 전송하십시오 . 경우 &lt;code&gt;includeAll&lt;/code&gt; 가 설정되어 &lt;code&gt;false&lt;/code&gt; , 다음 기본 차이 어설 플래그 (즉, &lt;code&gt;object&lt;/code&gt; , &lt;code&gt;ssfi&lt;/code&gt; , &lt;code&gt;lockSsfi&lt;/code&gt; 및 &lt;code&gt;message&lt;/code&gt; ) 전송되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3430df3c8724ce68a77a6d178f51d6195cbcb21b" translate="yes" xml:space="preserve">
          <source>Transferring Flags</source>
          <target state="translated">깃발 전송</target>
        </trans-unit>
        <trans-unit id="1cf7eca1e0d03b05f7493110ceae5f8112218b6e" translate="yes" xml:space="preserve">
          <source>User configurable property, influences whether or not the &lt;code&gt;showDiff&lt;/code&gt; flag should be included in the thrown AssertionErrors. &lt;code&gt;false&lt;/code&gt; will always be &lt;code&gt;false&lt;/code&gt;; &lt;code&gt;true&lt;/code&gt; will be true when the assertion has requested a diff be shown.</source>
          <target state="translated">사용자 구성 가능 속성은 &lt;code&gt;showDiff&lt;/code&gt; 플래그가 발생 된 AssertionErrors에 포함되어야 하는지 여부에 영향 을줍니다. &lt;code&gt;false&lt;/code&gt; 는 항상 &lt;code&gt;false&lt;/code&gt; 입니다 . 어설 션이 diff를 표시하도록 요청하면 &lt;code&gt;true&lt;/code&gt; 가됩니다.</target>
        </trans-unit>
        <trans-unit id="350d4f92b8b57d91f8c37de9ee6c84616353f369" translate="yes" xml:space="preserve">
          <source>User configurable property, influences whether stack trace is included in Assertion error message. Default of &lt;code&gt;false&lt;/code&gt; suppresses stack trace in the error message.</source>
          <target state="translated">사용자 구성 가능 속성은 스택 추적이 어설 션 오류 메시지에 포함되는지 여부에 영향을줍니다. 기본값 &lt;code&gt;false&lt;/code&gt; 는 오류 메시지에서 스택 추적을 억제합니다.</target>
        </trans-unit>
        <trans-unit id="bb21498878978534f94f501c858dc7916e6b3f60" translate="yes" xml:space="preserve">
          <source>User configurable property, sets length threshold for actual and expected values in assertion errors. If this threshold is exceeded, the value is truncated.</source>
          <target state="translated">사용자 구성 가능 속성은 어설 션 오류에서 실제 및 예상 값의 길이 임계 값을 설정합니다. 이 임계 값을 초과하면 값이 잘립니다.</target>
        </trans-unit>
        <trans-unit id="6542a6db685a9b217c73dc3db93e7f16ff54abf6" translate="yes" xml:space="preserve">
          <source>Using Flags</source>
          <target state="translated">플래그 사용</target>
        </trans-unit>
        <trans-unit id="b2a5424a31449d257263fda9c8990c67428f790a" translate="yes" xml:space="preserve">
          <source>Using Should in ES2015</source>
          <target state="translated">ES2015에서 should 사용</target>
        </trans-unit>
        <trans-unit id="5c3a22493a46073bdeba3df6152a08247c890067" translate="yes" xml:space="preserve">
          <source>View addChainableMethod API</source>
          <target state="translated">addChainableMethod API보기</target>
        </trans-unit>
        <trans-unit id="ac21e4de5fa2bccc099d30873c0c2130aca34fda" translate="yes" xml:space="preserve">
          <source>View addMethod API</source>
          <target state="translated">addMethod API보기</target>
        </trans-unit>
        <trans-unit id="2670f9cd7b63bf74869ae7db5e879b12d42e5ac8" translate="yes" xml:space="preserve">
          <source>View addProperty API</source>
          <target state="translated">addProperty API보기</target>
        </trans-unit>
        <trans-unit id="17d32af6ca9c1024a458e957b4fa384ad6596409" translate="yes" xml:space="preserve">
          <source>View full Assert API</source>
          <target state="translated">Assert API 전체보기</target>
        </trans-unit>
        <trans-unit id="e48012a73516ed104de3c197ceb380cd10da964c" translate="yes" xml:space="preserve">
          <source>View full BDD API</source>
          <target state="translated">전체 BDD API보기</target>
        </trans-unit>
        <trans-unit id="2a7941d3a1c77b7f60692afa2931b72d73175f5a" translate="yes" xml:space="preserve">
          <source>View overwriteMethod API</source>
          <target state="translated">overwriteMethod API보기</target>
        </trans-unit>
        <trans-unit id="2064fc277d9d196cdb6ce9c4d62942fb95756952" translate="yes" xml:space="preserve">
          <source>View overwriteProperty API</source>
          <target state="translated">overwriteProperty API보기</target>
        </trans-unit>
        <trans-unit id="242d9780ad37cba27a468227a52fc8a819cad904" translate="yes" xml:space="preserve">
          <source>We already have our &lt;code&gt;age&lt;/code&gt; chain in place to flag the assertion with &lt;code&gt;model.age&lt;/code&gt; so all we have to do is check if that exists.</source>
          <target state="translated">우리는 이미 &lt;code&gt;model.age&lt;/code&gt; 로 어설 션에 플래그를 지정할 &lt;code&gt;age&lt;/code&gt; 체인을 가지고 있으므로 존재하는지 확인하기 만하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="7cffc63fb1f6482978c4d1b5e4e663ce5481637e" translate="yes" xml:space="preserve">
          <source>We will later teach our numerical comparators to look for that flag and change its behavior. Since we don&amp;rsquo;t want to break the core methods, we will need to safely override that method, but we&amp;rsquo;ll get to that in a minute. Let&amp;rsquo;s finish up here first&amp;hellip;</source>
          <target state="translated">우리는 나중에 우리의 수치 비교기들에게 그 깃발을 찾고 그 행동을 바꾸도록 가르 칠 것입니다. 핵심 메소드를 중단하고 싶지 않기 때문에 해당 메소드를 안전하게 재정의해야하지만 1 분 후에 도달 할 것입니다. 여기서 먼저 마무리합시다&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="2bdaa64d7b0025a1fb38289c28f4c70795df90bb" translate="yes" xml:space="preserve">
          <source>We would expect this expectation to pass as well, as our statement is negated and the id is not a number. Unfortunately, the negation flag was not passed to our number assertion, so it still expects the value to be a number.</source>
          <target state="translated">우리는 성명서가 부정되고 id가 숫자가 아니기 때문에이 기대도 통과 할 것으로 기대합니다. 불행하게도 부정 플래그는 우리의 숫자 주장에 전달되지 않았으므로 여전히 값이 숫자가 될 것으로 기대합니다.</target>
        </trans-unit>
        <trans-unit id="4082f57a36c55dc9cf49a29f528bb3cd3929d59a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;.include&lt;/code&gt; and &lt;code&gt;.ordered&lt;/code&gt; are combined, the ordering begins at the start of both arrays.</source>
          <target state="translated">때 &lt;code&gt;.include&lt;/code&gt; 및 &lt;code&gt;.ordered&lt;/code&gt; 이 결합되어, 순서는 두 배열의 시작 부분에서 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="f17ca215dca8cafd476438be1a46a03d32e197ed" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;descriptor&lt;/code&gt; is provided, &lt;code&gt;.ownPropertyDescriptor&lt;/code&gt; also asserts that the property&amp;rsquo;s descriptor is deeply equal to the given &lt;code&gt;descriptor&lt;/code&gt;. See the &lt;code&gt;deep-eql&lt;/code&gt; project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.</source>
          <target state="translated">&lt;code&gt;descriptor&lt;/code&gt; 가 제공 될 때 , &lt;code&gt;.ownPropertyDescriptor&lt;/code&gt; 는 또한 속성의 디스크립터가 주어진 &lt;code&gt;descriptor&lt;/code&gt; 깊이 동일하다고 주장합니다 . 딥 평등 알고리즘에 대한 자세한 내용은 &lt;code&gt;deep-eql&lt;/code&gt; 프로젝트 페이지 (https://github.com/chaijs/deep-eql)를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4fba6bf1f4b425dc637247d85b6558406e704ba4" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;val&lt;/code&gt; is provided, &lt;code&gt;.property&lt;/code&gt; also asserts that the property&amp;rsquo;s value is equal to the given &lt;code&gt;val&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;val&lt;/code&gt; 제공된다 &lt;code&gt;.property&lt;/code&gt; 은 또한 속성의 값은 주어진 동일하다고 주장 &lt;code&gt;val&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5580100136cf66eff15ac01a2ad3e23bd04664d6" translate="yes" xml:space="preserve">
          <source>When NOT to Use</source>
          <target state="translated">사용하지 않을 때</target>
        </trans-unit>
        <trans-unit id="53b503ba7fb44589c3d1e130abcf20552a39f92c" translate="yes" xml:space="preserve">
          <source>When asserting &lt;code&gt;.keys&lt;/code&gt; without negation, &lt;code&gt;.all&lt;/code&gt; is preferred because &lt;code&gt;.all.keys&lt;/code&gt; asserts exactly what&amp;rsquo;s expected of the output, whereas &lt;code&gt;.any.keys&lt;/code&gt; creates uncertain expectations.</source>
          <target state="translated">주장하면 &lt;code&gt;.keys&lt;/code&gt; 을 부정하지 않고, &lt;code&gt;.all&lt;/code&gt; 있기 때문에 선호된다 &lt;code&gt;.all.keys&lt;/code&gt; 는 출력의 예상 정확히 무엇을 주장하는 반면, &lt;code&gt;.any.keys&lt;/code&gt; 가 불확실한 기대를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="c145cc15d31e00d23dde4360e21aa8b2e89579a4" translate="yes" xml:space="preserve">
          <source>When constructing chainable methods, the property function should only serve to set a flag for later modifying the behavior of an existing assertion.</source>
          <target state="translated">체인 가능한 메소드를 구성 할 때 특성 함수는 나중에 기존 어설 션의 동작을 수정하기위한 플래그를 설정하는 역할 만합니다.</target>
        </trans-unit>
        <trans-unit id="44a99c5a96e2db1c6a0fe08ccfa4fb9af8034323" translate="yes" xml:space="preserve">
          <source>When following a &lt;code&gt;.change&lt;/code&gt; assertion in the chain, &lt;code&gt;.by&lt;/code&gt; asserts that the subject of the &lt;code&gt;.change&lt;/code&gt; assertion either increased or decreased by the given &lt;code&gt;delta&lt;/code&gt;. However, it&amp;rsquo;s dangerous to use &lt;code&gt;.change.by&lt;/code&gt;. The problem is that it creates uncertain expectations. It&amp;rsquo;s often best to identify the exact output that&amp;rsquo;s expected, and then write an assertion that only accepts that exact output.</source>
          <target state="translated">후속 경우 &lt;code&gt;.change&lt;/code&gt; 의 체인의 주장을 &lt;code&gt;.by&lt;/code&gt; 의 피사체 주장 &lt;code&gt;.change&lt;/code&gt; 의 어설 하나 증가 또는 감소 주어진 &lt;code&gt;delta&lt;/code&gt; . 그러나 &lt;code&gt;.change.by&lt;/code&gt; 를 사용하는 것은 위험합니다 . 문제는 불확실한 기대를 불러 일으킨다는 것입니다. 예상되는 정확한 출력을 식별 한 다음 정확한 출력 만 허용하는 어설 션을 작성하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="0c800ddfbecbffc586cd85fe7c0a39ad92499098" translate="yes" xml:space="preserve">
          <source>When following a &lt;code&gt;.decrease&lt;/code&gt; assertion in the chain, &lt;code&gt;.by&lt;/code&gt; asserts that the subject of the &lt;code&gt;.decrease&lt;/code&gt; assertion decreased by the given &lt;code&gt;delta&lt;/code&gt;.</source>
          <target state="translated">후속 경우 &lt;code&gt;.decrease&lt;/code&gt; 체인 주장을 &lt;code&gt;.by&lt;/code&gt; 의 피사체 주장 &lt;code&gt;.decrease&lt;/code&gt; 어서 지정된 감소한 &lt;code&gt;delta&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="251d16eb03e76308f6ec66c7cf02a6958b57c586" translate="yes" xml:space="preserve">
          <source>When following an &lt;code&gt;.increase&lt;/code&gt; assertion in the chain, &lt;code&gt;.by&lt;/code&gt; asserts that the subject of the &lt;code&gt;.increase&lt;/code&gt; assertion increased by the given &lt;code&gt;delta&lt;/code&gt;.</source>
          <target state="translated">다음 때 &lt;code&gt;.increase&lt;/code&gt; 체인 주장을 &lt;code&gt;.by&lt;/code&gt; 의 피사체 주장 &lt;code&gt;.increase&lt;/code&gt; 주장 주어진 증가 &lt;code&gt;delta&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f6f7b69fc8c8743f48e57a25cc82aeb606b1a734" translate="yes" xml:space="preserve">
          <source>When negating &lt;code&gt;.keys&lt;/code&gt;, &lt;code&gt;.any&lt;/code&gt; is preferred because &lt;code&gt;.not.any.keys&lt;/code&gt; asserts exactly what&amp;rsquo;s expected of the output, whereas &lt;code&gt;.not.all.keys&lt;/code&gt; creates uncertain expectations.</source>
          <target state="translated">부정하면 &lt;code&gt;.keys&lt;/code&gt; 을 , &lt;code&gt;.any&lt;/code&gt; 있기 때문에 선호된다 &lt;code&gt;.not.any.keys&lt;/code&gt; 는 출력의 예상 정확히 무엇을 주장하는 반면, &lt;code&gt;.not.all.keys&lt;/code&gt; 가 불확실한 기대를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="43c6587348382c8a6ba8deb0d630cde03e7d6ae3" translate="yes" xml:space="preserve">
          <source>When no arguments are provided, &lt;code&gt;.throw&lt;/code&gt; invokes the target function and asserts that an error is thrown.</source>
          <target state="translated">인수가 제공되지 않으면 &lt;code&gt;.throw&lt;/code&gt; 는 대상 함수를 호출하고 오류가 발생한다고 주장합니다.</target>
        </trans-unit>
        <trans-unit id="307e523d163be613117539a359fbaf169eb773d3" translate="yes" xml:space="preserve">
          <source>When not adding &lt;code&gt;.itself&lt;/code&gt;, it&amp;rsquo;s important to check the target&amp;rsquo;s type before using &lt;code&gt;.respondTo&lt;/code&gt;. See the &lt;code&gt;.a&lt;/code&gt; doc for info on checking a target&amp;rsquo;s type.</source>
          <target state="translated">추가하지 않을 경우 &lt;code&gt;.itself&lt;/code&gt; 을 , 그것을 사용하기 전에 대상의 종류를 확인하는 것이 중요합니다 &lt;code&gt;.respondTo&lt;/code&gt; 을 . 대상 유형 확인에 대한 정보 는 &lt;code&gt;.a&lt;/code&gt; 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="15285ab5b216f0b4a9c8f9aa915a1f36d51b63de" translate="yes" xml:space="preserve">
          <source>When one argument is provided, &lt;code&gt;.change&lt;/code&gt; asserts that the given function &lt;code&gt;subject&lt;/code&gt; returns a different value when it&amp;rsquo;s invoked before the target function compared to when it&amp;rsquo;s invoked afterward. However, it&amp;rsquo;s often best to assert that &lt;code&gt;subject&lt;/code&gt; is equal to its expected value.</source>
          <target state="translated">하나의 인수가 제공되면 &lt;code&gt;.change&lt;/code&gt; 는 지정된 함수 &lt;code&gt;subject&lt;/code&gt; 대상 함수 전에 호출 될 때와 나중에 호출 될 때와 다른 값을 리턴 한다고 주장합니다 . 그러나 &lt;code&gt;subject&lt;/code&gt; 예상 값과 동일하다고 주장하는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="60ba21bd5e1d42981679403ac3ff6b6ae1616bab" translate="yes" xml:space="preserve">
          <source>When one argument is provided, &lt;code&gt;.decrease&lt;/code&gt; asserts that the given function &lt;code&gt;subject&lt;/code&gt; returns a lesser number when it&amp;rsquo;s invoked after invoking the target function compared to when it&amp;rsquo;s invoked beforehand. &lt;code&gt;.decrease&lt;/code&gt; also causes all &lt;code&gt;.by&lt;/code&gt; assertions that follow in the chain to assert how much lesser of a number is returned. It&amp;rsquo;s often best to assert that the return value decreased by the expected amount, rather than asserting it decreased by any amount.</source>
          <target state="translated">하나의 인수가 제공되면 &lt;code&gt;.decrease&lt;/code&gt; 는 대상 함수를 호출 한 후 호출 될 때 주어진 함수 &lt;code&gt;subject&lt;/code&gt; 사전 호출 된 경우와 비교하여 더 적은 수를 리턴 한다고 주장 합니다. &lt;code&gt;.decrease&lt;/code&gt; 는 또한 체인에서 뒤 따르는 모든 &lt;code&gt;.by&lt;/code&gt; 어설 션이 더 적은 수의 숫자를 반환하도록합니다. 반환 값이 임의의 양만큼 감소했다고 주장하기보다는 기 대량만큼 감소했다고 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="24c63fa2dd2ced2b9d3e1a265aac07cfd85ba1e1" translate="yes" xml:space="preserve">
          <source>When one argument is provided, &lt;code&gt;.increase&lt;/code&gt; asserts that the given function &lt;code&gt;subject&lt;/code&gt; returns a greater number when it&amp;rsquo;s invoked after invoking the target function compared to when it&amp;rsquo;s invoked beforehand. &lt;code&gt;.increase&lt;/code&gt; also causes all &lt;code&gt;.by&lt;/code&gt; assertions that follow in the chain to assert how much greater of a number is returned. It&amp;rsquo;s often best to assert that the return value increased by the expected amount, rather than asserting it increased by any amount.</source>
          <target state="translated">하나의 인수가 제공되면 &lt;code&gt;.increase&lt;/code&gt; 는 대상 함수를 호출 한 후 호출 될 때 주어진 함수 &lt;code&gt;subject&lt;/code&gt; 사전 호출 된 경우와 비교하여 더 큰 숫자를 리턴 한다고 주장 합니다. &lt;code&gt;.increase&lt;/code&gt; 는 또한 체인에서 뒤 따르는 모든 &lt;code&gt;.by&lt;/code&gt; 어설 션이 얼마나 큰 숫자가 리턴되는지를 주장하게합니다. 반환 값이 임의의 양만큼 증가했다고 주장하기보다는 기 대량만큼 증가했다고 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="744d40c8a20b18e0ac358d5abea0954f5595964e" translate="yes" xml:space="preserve">
          <source>When one argument is provided, and it&amp;rsquo;s a regular expression, &lt;code&gt;.throw&lt;/code&gt; invokes the target function and asserts that an error is thrown with a message that matches that regular expression.</source>
          <target state="translated">하나의 인수가 제공되고 정규식 인 경우 &lt;code&gt;.throw&lt;/code&gt; 는 대상 함수를 호출하고 해당 정규식과 일치하는 메시지와 함께 오류가 발생한다고 주장합니다.</target>
        </trans-unit>
        <trans-unit id="021283f1cc0b93785992fdec7bce30edf5867f0a" translate="yes" xml:space="preserve">
          <source>When one argument is provided, and it&amp;rsquo;s a string, &lt;code&gt;.throw&lt;/code&gt; invokes the target function and asserts that an error is thrown with a message that contains that string.</source>
          <target state="translated">하나의 인수가 제공되고 문자열 인 경우 &lt;code&gt;.throw&lt;/code&gt; 는 대상 함수를 호출하고 해당 문자열이 포함 된 메시지와 함께 오류가 발생한다고 주장합니다.</target>
        </trans-unit>
        <trans-unit id="7a8557f8ba66e27978ea2a767623c4b6ca70f50e" translate="yes" xml:space="preserve">
          <source>When one argument is provided, and it&amp;rsquo;s an error constructor, &lt;code&gt;.throw&lt;/code&gt; invokes the target function and asserts that an error is thrown that&amp;rsquo;s an instance of that error constructor.</source>
          <target state="translated">하나의 인수가 제공되고 오류 생성자 인 경우 &lt;code&gt;.throw&lt;/code&gt; 는 대상 함수를 호출하고 해당 오류 생성자의 인스턴스 인 오류가 발생한다고 주장합니다.</target>
        </trans-unit>
        <trans-unit id="67d1466b3f2f4950d78f88e4d38210bbecdf518c" translate="yes" xml:space="preserve">
          <source>When one argument is provided, and it&amp;rsquo;s an error instance, &lt;code&gt;.throw&lt;/code&gt; invokes the target function and asserts that an error is thrown that&amp;rsquo;s strictly (&lt;code&gt;===&lt;/code&gt;) equal to that error instance.</source>
          <target state="translated">하나의 인수가 제공되고 오류 인스턴스 인 경우 &lt;code&gt;.throw&lt;/code&gt; 는 대상 함수를 호출하고 해당 오류 인스턴스 와 정확히 같은 ( &lt;code&gt;===&lt;/code&gt; ) 오류가 발생한다고 주장 합니다.</target>
        </trans-unit>
        <trans-unit id="5993617136a1b55efb5b276edf47d3df1971a73d" translate="yes" xml:space="preserve">
          <source>When the subject is expected to decrease, it&amp;rsquo;s often best to assert that it decreased by the expected amount.</source>
          <target state="translated">피험자가 감소 할 것으로 예상되는 경우, 예상되는 양만큼 감소했다고 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="b015fda0bbd2948ac6bf44d1663bc95b826522a1" translate="yes" xml:space="preserve">
          <source>When the subject is expected to increase, it&amp;rsquo;s often best to assert that it increased by the expected amount.</source>
          <target state="translated">피험자가 증가 할 것으로 예상되면, 종종 예상량만큼 증가 시켰다고 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="8f2e66de07a4863cda94457280aca3d63cf40d9a" translate="yes" xml:space="preserve">
          <source>When the subject is expected to stay the same, it&amp;rsquo;s often best to assert exactly that.</source>
          <target state="translated">주제가 동일하게 유지 될 것으로 예상되는 경우, 종종 정확하게 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="2e48e36f7897f2638b6e9831a2591b34812057d7" translate="yes" xml:space="preserve">
          <source>When the target is a Map, &lt;code&gt;.include&lt;/code&gt; asserts that the given &lt;code&gt;val&lt;/code&gt; is one of the values of the target. SameValueZero equality algorithm is used.</source>
          <target state="translated">대상이 Map 인 경우 &lt;code&gt;.include&lt;/code&gt; 는 지정된 &lt;code&gt;val&lt;/code&gt; 이 대상의 값 중 하나 라고 주장합니다 . SameValueZero 동등 알고리즘이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="426e255b0e88de78c1d9aeec7f345a17a3d90be2" translate="yes" xml:space="preserve">
          <source>When the target is a Set or WeakSet, &lt;code&gt;.include&lt;/code&gt; asserts that the given &lt;code&gt;val&lt;/code&gt; is a member of the target. SameValueZero equality algorithm is used.</source>
          <target state="translated">대상이 Set 또는 WeakSet 인 경우 &lt;code&gt;.include&lt;/code&gt; 는 지정된 &lt;code&gt;val&lt;/code&gt; 이 대상의 구성원임을 확인합니다. SameValueZero 동등 알고리즘이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3833eabae2eb5680791cea92e801b482f5a14cb3" translate="yes" xml:space="preserve">
          <source>When the target is a function, &lt;code&gt;.respondTo&lt;/code&gt; asserts that the target&amp;rsquo;s &lt;code&gt;prototype&lt;/code&gt; property has a method with the given name &lt;code&gt;method&lt;/code&gt;. Again, the method can be own or inherited, and it can be enumerable or non-enumerable.</source>
          <target state="translated">대상이 함수 인 경우 &lt;code&gt;.respondTo&lt;/code&gt; 는 대상의 &lt;code&gt;prototype&lt;/code&gt; 속성에 이름이 &lt;code&gt;method&lt;/code&gt; 인 메소드가 있다고 주장합니다 . 다시 말하지만, 메소드는 소유 또는 상속 될 수 있으며 열거 가능하거나 열거 불가능할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a0e464b0140b7e11188884f6b79f16bfcba41bb2" translate="yes" xml:space="preserve">
          <source>When the target is a map or set, &lt;code&gt;.empty&lt;/code&gt; asserts that the target&amp;rsquo;s &lt;code&gt;size&lt;/code&gt; property is strictly equal to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">대상이지도 또는 집합 인 경우 &lt;code&gt;.empty&lt;/code&gt; 는 대상의 &lt;code&gt;size&lt;/code&gt; 속성이 &lt;code&gt;0&lt;/code&gt; 과 엄격하게 같다고 주장합니다 .</target>
        </trans-unit>
        <trans-unit id="a631a992a19cb18ec7c9d41534eb1554fa1f2722" translate="yes" xml:space="preserve">
          <source>When the target is a map or set, each key must be provided as a separate argument.</source>
          <target state="translated">대상이 맵 또는 세트 인 경우 각 키는 별도의 인수로 제공되어야합니다.</target>
        </trans-unit>
        <trans-unit id="b04372ab9fceba78618ff029589233831f785399" translate="yes" xml:space="preserve">
          <source>When the target is a non-function object, &lt;code&gt;.empty&lt;/code&gt; asserts that the target doesn&amp;rsquo;t have any own enumerable properties. Properties with Symbol-based keys are excluded from the count.</source>
          <target state="translated">대상이 함수가 아닌 객체 인 경우 &lt;code&gt;.empty&lt;/code&gt; 는 대상에 열거 가능한 속성이 없다고 주장합니다. 기호 기반 키가있는 속성은 개수에서 제외됩니다.</target>
        </trans-unit>
        <trans-unit id="659d9ad5ae434d3cd1b61f3aedfa7c74f0b8a92c" translate="yes" xml:space="preserve">
          <source>When the target is a non-function object, &lt;code&gt;.respondTo&lt;/code&gt; asserts that the target has a method with the given name &lt;code&gt;method&lt;/code&gt;. The method can be own or inherited, and it can be enumerable or non-enumerable.</source>
          <target state="translated">대상이 함수가 아닌 객체 인 경우 &lt;code&gt;.respondTo&lt;/code&gt; 는 대상에 이름이 &lt;code&gt;method&lt;/code&gt; 인 메소드가 있다고 주장합니다 . 이 메소드는 소유하거나 상속 할 수 있으며 열거 가능하거나 열거 불가능할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e6cfac9670a2f3479ebf7caf0ec2828c74f1aa9" translate="yes" xml:space="preserve">
          <source>When the target is a string or array, &lt;code&gt;.empty&lt;/code&gt; asserts that the target&amp;rsquo;s &lt;code&gt;length&lt;/code&gt; property is strictly (&lt;code&gt;===&lt;/code&gt;) equal to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">대상이 문자열 또는 배열 인 경우 &lt;code&gt;.empty&lt;/code&gt; 는 대상의 &lt;code&gt;length&lt;/code&gt; 속성이 엄격하게 ( &lt;code&gt;===&lt;/code&gt; ) &lt;code&gt;0&lt;/code&gt; 과 같다고 주장합니다 .</target>
        </trans-unit>
        <trans-unit id="119034ee0659f885809d1e14795ae8d47f8f158a" translate="yes" xml:space="preserve">
          <source>When the target is a string, &lt;code&gt;.include&lt;/code&gt; asserts that the given string &lt;code&gt;val&lt;/code&gt; is a substring of the target.</source>
          <target state="translated">대상이 문자열 인 경우 &lt;code&gt;.include&lt;/code&gt; 는 지정된 문자열 &lt;code&gt;val&lt;/code&gt; 이 대상의 하위 문자열임을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="f3c81bcce3c12194a9e10831aa4a6e5fbf44b108" translate="yes" xml:space="preserve">
          <source>When the target is an array, &lt;code&gt;.include&lt;/code&gt; asserts that the given &lt;code&gt;val&lt;/code&gt; is a member of the target.</source>
          <target state="translated">대상이 배열 인 경우 &lt;code&gt;.include&lt;/code&gt; 는 지정된 &lt;code&gt;val&lt;/code&gt; 이 대상의 구성원임을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="234ecf8ad8a069e884a06a138d8cb5b8e3ee243d" translate="yes" xml:space="preserve">
          <source>When the target is an object or array, keys can be provided as one or more string arguments, a single array argument, or a single object argument. In the latter case, only the keys in the given object matter; the values are ignored.</source>
          <target state="translated">대상이 객체 또는 배열 인 경우 키는 하나 이상의 문자열 인수, 단일 배열 인수 또는 단일 객체 인수로 제공 될 수 있습니다. 후자의 경우 주어진 객체의 키만 중요합니다. 값은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="eeaa48973020f4870fe840980d2d1db9eca0ede7" translate="yes" xml:space="preserve">
          <source>When the target is an object, &lt;code&gt;.include&lt;/code&gt; asserts that the given object &lt;code&gt;val&lt;/code&gt;&amp;rsquo;s properties are a subset of the target&amp;rsquo;s properties.</source>
          <target state="translated">대상이 객체 인 경우 &lt;code&gt;.include&lt;/code&gt; 는 지정된 객체 &lt;code&gt;val&lt;/code&gt; 의 속성이 타겟 속성의 하위 집합임을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="23305527ba394124fe61d0f0d8447851544d5496" translate="yes" xml:space="preserve">
          <source>When the target is expected to be &lt;code&gt;NaN&lt;/code&gt;, it&amp;rsquo;s often best to assert exactly that.</source>
          <target state="translated">목표가 &lt;code&gt;NaN&lt;/code&gt; 이 될 것으로 예상되는 경우 ,이를 정확하게 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="6f2ae95945b0126db0c508c54c39e2049e63537c" translate="yes" xml:space="preserve">
          <source>When the target is expected to be negative infinity, it&amp;rsquo;s often best to assert exactly that.</source>
          <target state="translated">목표가 음의 무한대가 될 것으로 예상되는 경우, 종종 그것을 정확하게 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="425d1629ec34560cbc8996bdd188c41c27fcba37" translate="yes" xml:space="preserve">
          <source>When the target is expected to be positive infinity, it&amp;rsquo;s often best to assert exactly that.</source>
          <target state="translated">목표가 양의 무한대가 될 것으로 예상 될 때, 정확하게 그것을 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="ba295f3c63476f6048812423beeaf39be3eed9d8" translate="yes" xml:space="preserve">
          <source>When the target is expected to have a property descriptor with the given key &lt;code&gt;name&lt;/code&gt;, it&amp;rsquo;s often best to assert that the property has its expected descriptor, rather than asserting that it doesn&amp;rsquo;t have one of many unexpected descriptors.</source>
          <target state="translated">대상에 지정된 키 &lt;code&gt;name&lt;/code&gt; 가진 속성 설명자가 있을 것으로 예상되는 경우 예상치 못한 많은 설명자 중 하나가 없다고 주장하는 대신 속성에 예상되는 설명자가 있는지 확인하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="a87c35e16fe978ecb7a5d04f06fa24c3a6fa2470" translate="yes" xml:space="preserve">
          <source>When the target is expected to have a property with the given key &lt;code&gt;name&lt;/code&gt;, it&amp;rsquo;s often best to assert that the property has its expected value, rather than asserting that it doesn&amp;rsquo;t have one of many unexpected values.</source>
          <target state="translated">대상에 지정된 키 &lt;code&gt;name&lt;/code&gt; 을 가진 속성이있을 것으로 예상되는 경우 예상치 못한 값이 많지 않다고 주장하는 대신 속성에 예상 값이 있다고 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="c2faca5fb8e97a9ef4e00d3582072b94e0d344cd" translate="yes" xml:space="preserve">
          <source>When the target is expected to throw an error, it&amp;rsquo;s often best to assert that the error is of its expected type, and has a message that includes an expected string, rather than asserting that it doesn&amp;rsquo;t have one of many unexpected types, and doesn&amp;rsquo;t have a message that includes some string.</source>
          <target state="translated">대상에 오류가 발생할 것으로 예상되는 경우 오류가 예상되는 유형이고 많은 예상치 못한 유형 중 하나가 없다고 주장하는 대신 예상 문자열이 포함 된 메시지를 갖는 것이 가장 좋습니다. 문자열이 포함 된 메시지가 없습니다.</target>
        </trans-unit>
        <trans-unit id="ccaee536e8094740d823ad55d02cd959ff2993ea" translate="yes" xml:space="preserve">
          <source>When the target isn&amp;rsquo;t expected to be a number, it&amp;rsquo;s often best to assert that it&amp;rsquo;s the expected type, rather than asserting that it isn&amp;rsquo;t one of many unexpected types.</source>
          <target state="translated">대상이 숫자가 아닐 것으로 예상되는 경우 예상치 못한 유형 중 하나가 아니라고 가정하는 것이 아니라 예상 된 유형이라고 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="9d78ae3197eb08339ca338084d9f62229cc42420" translate="yes" xml:space="preserve">
          <source>When the target isn&amp;rsquo;t expected to have a property descriptor with the given key &lt;code&gt;name&lt;/code&gt;, it&amp;rsquo;s often best to assert exactly that.</source>
          <target state="translated">대상에 지정된 키 &lt;code&gt;name&lt;/code&gt; 가진 속성 설명자가 없을 것으로 예상되는 경우에는이 를 정확하게 지정하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="4a7fd56d7bafae3528f3ff96f955c6a4497017bc" translate="yes" xml:space="preserve">
          <source>When the target isn&amp;rsquo;t expected to have a property with the given key &lt;code&gt;name&lt;/code&gt;, it&amp;rsquo;s often best to assert exactly that.</source>
          <target state="translated">대상에 지정된 키 &lt;code&gt;name&lt;/code&gt; 가진 속성이 없을 것으로 예상되는 경우에는 정확하게 정확히 지정하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="cd67c4f85845eaf4612bf61c0ed6f4bace56ba4b" translate="yes" xml:space="preserve">
          <source>When the target isn&amp;rsquo;t expected to throw an error, it&amp;rsquo;s often best to assert exactly that.</source>
          <target state="translated">대상에 오류가 발생하지 않을 것으로 예상되는 경우에는 종종 정확하게 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="3fd6b7fc0d0f387ba8110a4c29a090a849fab595" translate="yes" xml:space="preserve">
          <source>When the target object is expected to have &lt;code&gt;val&lt;/code&gt;&amp;rsquo;s keys, it&amp;rsquo;s often best to assert that each of the properties has its expected value, rather than asserting that each property doesn&amp;rsquo;t have one of many unexpected values.</source>
          <target state="translated">대상 객체에 &lt;code&gt;val&lt;/code&gt; 키가있을 것으로 예상되는 경우 각 속성에 예기치 않은 값이 하나도 없다고 주장하는 대신 각 속성에 예상 값이 있다고 주장하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="ab1e276f23e30d5cb4c52625bc5f4f04942b5f3b" translate="yes" xml:space="preserve">
          <source>When the target object isn&amp;rsquo;t even expected to have &lt;code&gt;val&lt;/code&gt;&amp;rsquo;s keys, it&amp;rsquo;s often best to assert exactly that.</source>
          <target state="translated">대상 객체에 &lt;code&gt;val&lt;/code&gt; 키 가 없을 것으로 예상되는 경우에는 정확하게 해당 키를 사용하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="2c9e3a2394f6da4e7bd0711de8dd438ef7204332" translate="yes" xml:space="preserve">
          <source>When to Use</source>
          <target state="translated">사용시기</target>
        </trans-unit>
        <trans-unit id="88e6d2ec4e94f977dfa4cb3e98b44ce1134e2c1e" translate="yes" xml:space="preserve">
          <source>When two arguments are provided, &lt;code&gt;.change&lt;/code&gt; asserts that the value of the given object &lt;code&gt;subject&lt;/code&gt;&amp;rsquo;s &lt;code&gt;prop&lt;/code&gt; property is different before invoking the target function compared to afterward.</source>
          <target state="translated">두 개의 인수가 제공되면 &lt;code&gt;.change&lt;/code&gt; 는 대상 함수를 호출하기 전에 주어진 오브젝트 &lt;code&gt;subject&lt;/code&gt; 의 &lt;code&gt;prop&lt;/code&gt; 속성 값이 이후와 비교하여 다르다고 주장합니다 .</target>
        </trans-unit>
        <trans-unit id="d3a936986223568863a11edf3191f354d75656ce" translate="yes" xml:space="preserve">
          <source>When two arguments are provided, &lt;code&gt;.decrease&lt;/code&gt; asserts that the value of the given object &lt;code&gt;subject&lt;/code&gt;&amp;rsquo;s &lt;code&gt;prop&lt;/code&gt; property is lesser after invoking the target function compared to beforehand.</source>
          <target state="translated">두 개의 인수가 제공되면 &lt;code&gt;.decrease&lt;/code&gt; 는 사전에 비해 대상 함수를 호출 한 후 주어진 오브젝트 &lt;code&gt;subject&lt;/code&gt; 의 &lt;code&gt;prop&lt;/code&gt; 속성 값이 더 작다고 주장 합니다.</target>
        </trans-unit>
        <trans-unit id="3126be589b77a3f548be0e303c527b805eb331a0" translate="yes" xml:space="preserve">
          <source>When two arguments are provided, &lt;code&gt;.increase&lt;/code&gt; asserts that the value of the given object &lt;code&gt;subject&lt;/code&gt;&amp;rsquo;s &lt;code&gt;prop&lt;/code&gt; property is greater after invoking the target function compared to beforehand.</source>
          <target state="translated">두 개의 인수가 제공되면 &lt;code&gt;.increase&lt;/code&gt; 는 대상 함수를 호출 한 후 사전에 비해 주어진 오브젝트 &lt;code&gt;subject&lt;/code&gt; 의 &lt;code&gt;prop&lt;/code&gt; 속성 값이 더 크다고 주장 합니다.</target>
        </trans-unit>
        <trans-unit id="4414389eaa5dcbf19ec5b64a5b8789aea19c14cc" translate="yes" xml:space="preserve">
          <source>When two arguments are provided, and the first is an error instance or constructor, and the second is a string or regular expression, &lt;code&gt;.throw&lt;/code&gt; invokes the function and asserts that an error is thrown that fulfills both conditions as described above.</source>
          <target state="translated">두 개의 인수가 제공되고 첫 번째 인수가 오류 인스턴스 또는 생성자이고 두 번째 인수가 문자열 또는 정규식 인 경우 &lt;code&gt;.throw&lt;/code&gt; 는 함수를 호출하고 위에서 설명한대로 두 조건을 모두 충족하는 오류가 발생한다고 주장합니다.</target>
        </trans-unit>
        <trans-unit id="5dcaed02b18d024afc923b674e41f44a8ef02348" translate="yes" xml:space="preserve">
          <source>With this in place, we can write positive assertions.</source>
          <target state="translated">이를 통해 긍정적 인 주장을 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="baca3b2286a7d171c2d9aa3b2655f884584ca1b1" translate="yes" xml:space="preserve">
          <source>Write your own test expressions.</source>
          <target state="translated">자신 만의 테스트 표현을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="86f7e437faa5a7fce15d1ddcb9eaeaea377667b8" translate="yes" xml:space="preserve">
          <source>a</source>
          <target state="translated">a</target>
        </trans-unit>
        <trans-unit id="84434f356504f9e02dd0c9ec9f4b1349714c57c3" translate="yes" xml:space="preserve">
          <source>a boolean (result of a truth test)</source>
          <target state="translated">부울 (진실 테스트 결과)</target>
        </trans-unit>
        <trans-unit id="fe99f25c6b1a82227938fa11cf1245760ec995e5" translate="yes" xml:space="preserve">
          <source>a string error message to be used if the assertion is negated and the first argument is &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">어설 션이 부정되고 첫 번째 인수가 &lt;code&gt;true&lt;/code&gt; 인 경우 사용되는 문자열 오류 메시지</target>
        </trans-unit>
        <trans-unit id="07f0a2224d1a96b338092da4dda056acbc9a066d" translate="yes" xml:space="preserve">
          <source>a string error message to be used if the first argument is &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">최초의 인수가 &lt;code&gt;false&lt;/code&gt; 의 경우에 사용되는 캐릭터 라인 에러 메세지</target>
        </trans-unit>
        <trans-unit id="9fbb397449fabe7370de4e726a586750c0e025d4" translate="yes" xml:space="preserve">
          <source>above</source>
          <target state="translated">above</target>
        </trans-unit>
        <trans-unit id="8ca6f34dccc5bac40b8f96c556e47ba59f4396c3" translate="yes" xml:space="preserve">
          <source>addChainableMethod</source>
          <target state="translated">addChainableMethod</target>
        </trans-unit>
        <trans-unit id="cb7f003673eff3972286bcdb0d84c4e7f5a3af93" translate="yes" xml:space="preserve">
          <source>addLengthGuard</source>
          <target state="translated">addLengthGuard</target>
        </trans-unit>
        <trans-unit id="cc67e7bf62ec85a16eadfe35cd81cac21c17c473" translate="yes" xml:space="preserve">
          <source>addMethod</source>
          <target state="translated">addMethod</target>
        </trans-unit>
        <trans-unit id="f2ea503d55ed6f79e08646a02e24ef14860a0d54" translate="yes" xml:space="preserve">
          <source>addProperty</source>
          <target state="translated">addProperty</target>
        </trans-unit>
        <trans-unit id="d87c448044defb778f33158d8ccf94a20531d600" translate="yes" xml:space="preserve">
          <source>all</source>
          <target state="translated">all</target>
        </trans-unit>
        <trans-unit id="4e299cf49fb182b23b2c3aa0efaa58a8be6d1067" translate="yes" xml:space="preserve">
          <source>all of our helpers will be inside exported function, located where indicated</source>
          <target state="translated">우리의 모든 도우미는 표시된 곳에 위치한 내 보낸 함수 안에 있습니다.</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="c5fe0200d1c7a5139bd18fd22268c4ca8bf45e90" translate="yes" xml:space="preserve">
          <source>any</source>
          <target state="translated">any</target>
        </trans-unit>
        <trans-unit id="3802a68da20f566d7fb269f15c34508be3676bf9" translate="yes" xml:space="preserve">
          <source>approximately</source>
          <target state="translated">approximately</target>
        </trans-unit>
        <trans-unit id="536f158f6dfd529865dcb865a97bb16804e34d70" translate="yes" xml:space="preserve">
          <source>arguments</source>
          <target state="translated">arguments</target>
        </trans-unit>
        <trans-unit id="64b5daad5073849378993ba34e058d7008293097" translate="yes" xml:space="preserve">
          <source>assert</source>
          <target state="translated">assert</target>
        </trans-unit>
        <trans-unit id="895659088d1e99e936268cb44501b31af130b30d" translate="yes" xml:space="preserve">
          <source>assert(expression, message)</source>
          <target state="translated">주장 (표현, 메시지)</target>
        </trans-unit>
        <trans-unit id="e0577e7c8e8585d16f60e4e540ecc4ef9ed7523e" translate="yes" xml:space="preserve">
          <source>assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], &amp;lsquo;not same deep ordered members&amp;rsquo;); assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], &amp;lsquo;not same deep ordered members&amp;rsquo;);</source>
          <target state="translated">assert.notSameDeepOrderedMembers ([{a : 1}, {b : 2}, {c : 3}], [{a : 1}, {b : 2}, {z : 5}], '동일한 딥 정렬 된 멤버가 아님 '); assert.notSameDeepOrderedMembers ([{a : 1}, {b : 2}, {c : 3}], [{b : 2}, {a : 1}, {c : 3}], '동일한 딥 정렬 멤버는 아님 ');</target>
        </trans-unit>
        <trans-unit id="8b99e55691f8069087174311951d07682af4c17c" translate="yes" xml:space="preserve">
          <source>assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], &amp;lsquo;same deep ordered members&amp;rsquo;);</source>
          <target state="translated">assert.sameDeepOrderedMembers ([{a : 1}, {b : 2}, {c : 3}], [{a : 1}, {b : 2}, {c : 3}], '동일한 심층 정렬 된 멤버' );</target>
        </trans-unit>
        <trans-unit id="27e90dfa57c358acfaf470860f6f72c9282ce995" translate="yes" xml:space="preserve">
          <source>at</source>
          <target state="translated">at</target>
        </trans-unit>
        <trans-unit id="986b1bc1eb8de89643c50722910f99001c232865" translate="yes" xml:space="preserve">
          <source>be</source>
          <target state="translated">be</target>
        </trans-unit>
        <trans-unit id="0d25cda1b818a2e50d4579f120289663ef8d25aa" translate="yes" xml:space="preserve">
          <source>been</source>
          <target state="translated">been</target>
        </trans-unit>
        <trans-unit id="489c7fc8339f7c44efa172c21d3dbf41ad08c7e4" translate="yes" xml:space="preserve">
          <source>below</source>
          <target state="translated">below</target>
        </trans-unit>
        <trans-unit id="786e97b3ee9fc4b292d5852c2c5943153c4ce91a" translate="yes" xml:space="preserve">
          <source>but</source>
          <target state="translated">but</target>
        </trans-unit>
        <trans-unit id="408158643ed564c72fa0921826f8294d71ccbf7c" translate="yes" xml:space="preserve">
          <source>by</source>
          <target state="translated">by</target>
        </trans-unit>
        <trans-unit id="7550b672e162c224c309bdea5d48ca975081a904" translate="yes" xml:space="preserve">
          <source>change</source>
          <target state="translated">change</target>
        </trans-unit>
        <trans-unit id="49a04ba4469678c38e0f6a327f8702ea61d9e8a4" translate="yes" xml:space="preserve">
          <source>changes</source>
          <target state="translated">changes</target>
        </trans-unit>
        <trans-unit id="d99d827b2c08a91d6c82c24fa280c64cf38999fb" translate="yes" xml:space="preserve">
          <source>changesButNotBy</source>
          <target state="translated">changesButNotBy</target>
        </trans-unit>
        <trans-unit id="5ec4e68b362eb6fc0c84c5fb5b00ca2e9917048b" translate="yes" xml:space="preserve">
          <source>changesBy</source>
          <target state="translated">changesBy</target>
        </trans-unit>
        <trans-unit id="e627e786d190a95be22ecc613c4bd7a076c44af1" translate="yes" xml:space="preserve">
          <source>closeTo</source>
          <target state="translated">closeTo</target>
        </trans-unit>
        <trans-unit id="2a33ebf9be884ef73e7ec8c70ad4922e08c85ae0" translate="yes" xml:space="preserve">
          <source>compareByInspect</source>
          <target state="translated">compareByInspect</target>
        </trans-unit>
        <trans-unit id="cdf8bbac6ab1935f4e361781036b2a1a452ba25c" translate="yes" xml:space="preserve">
          <source>compatibleConstructor</source>
          <target state="translated">compatibleConstructor</target>
        </trans-unit>
        <trans-unit id="592235f0e33846cfe79ee71d65476c138c5e7eed" translate="yes" xml:space="preserve">
          <source>compatibleInstance</source>
          <target state="translated">compatibleInstance</target>
        </trans-unit>
        <trans-unit id="82ba3d2635ca449601881bf94f5f50e3be740144" translate="yes" xml:space="preserve">
          <source>compatibleMessage</source>
          <target state="translated">compatibleMessage</target>
        </trans-unit>
        <trans-unit id="918391bdb0c6f8fa338075e0e33db8913639a139" translate="yes" xml:space="preserve">
          <source>config.includeStack</source>
          <target state="translated">config.includeStack</target>
        </trans-unit>
        <trans-unit id="6a2f8635e1cfcee4c2f56c288fbe021245718691" translate="yes" xml:space="preserve">
          <source>config.showDiff</source>
          <target state="translated">config.showDiff</target>
        </trans-unit>
        <trans-unit id="fa287a8237164cb6889e6695f4e08ed2dc8f3981" translate="yes" xml:space="preserve">
          <source>config.truncateThreshold</source>
          <target state="translated">config.truncateThreshold</target>
        </trans-unit>
        <trans-unit id="7a802668e6bb9e7372974df78abfdd2970719df1" translate="yes" xml:space="preserve">
          <source>containsAllDeepKeys</source>
          <target state="translated">containsAllDeepKeys</target>
        </trans-unit>
        <trans-unit id="c8faaa170b15d8f094ce3c7424008f86292f4d30" translate="yes" xml:space="preserve">
          <source>containsAllKeys</source>
          <target state="translated">containsAllKeys</target>
        </trans-unit>
        <trans-unit id="110dd32f93067b267a92f786e1d128eb18830c64" translate="yes" xml:space="preserve">
          <source>decrease</source>
          <target state="translated">decrease</target>
        </trans-unit>
        <trans-unit id="4f2383585be3de2fb99127823282195d47e03d72" translate="yes" xml:space="preserve">
          <source>decreases</source>
          <target state="translated">decreases</target>
        </trans-unit>
        <trans-unit id="d303d01495ce5d00744d065e03ebc2c2b118def1" translate="yes" xml:space="preserve">
          <source>decreasesButNotBy</source>
          <target state="translated">decreasesButNotBy</target>
        </trans-unit>
        <trans-unit id="65eb7986715b7446fb1756bb18651431e19a0864" translate="yes" xml:space="preserve">
          <source>decreasesBy</source>
          <target state="translated">decreasesBy</target>
        </trans-unit>
        <trans-unit id="3dde59ff3d79fc2322f4192f74c1d1af30d32cc6" translate="yes" xml:space="preserve">
          <source>deep</source>
          <target state="translated">deep</target>
        </trans-unit>
        <trans-unit id="e47428c5b945d7eda4e2f1480da4fca38b03f79d" translate="yes" xml:space="preserve">
          <source>deepEqual</source>
          <target state="translated">deepEqual</target>
        </trans-unit>
        <trans-unit id="0206fe9368248c0da84f2cf2aece8c8f71417b7e" translate="yes" xml:space="preserve">
          <source>deepInclude</source>
          <target state="translated">deepInclude</target>
        </trans-unit>
        <trans-unit id="7f5fecb4ea8877d7ae697d8971bc6986f739d5a7" translate="yes" xml:space="preserve">
          <source>deepNestedInclude</source>
          <target state="translated">deepNestedInclude</target>
        </trans-unit>
        <trans-unit id="203f7319a3422488466d63a9577541eab1d79b93" translate="yes" xml:space="preserve">
          <source>deepNestedPropertyVal</source>
          <target state="translated">deepNestedPropertyVal</target>
        </trans-unit>
        <trans-unit id="43990def409845b133a07f559820762f91399e57" translate="yes" xml:space="preserve">
          <source>deepOwnInclude</source>
          <target state="translated">deepOwnInclude</target>
        </trans-unit>
        <trans-unit id="31b9dd85f1017a5e88d81913738b69cef2856650" translate="yes" xml:space="preserve">
          <source>deepPropertyVal</source>
          <target state="translated">deepPropertyVal</target>
        </trans-unit>
        <trans-unit id="f0d521a5dc37493901c869e3f3753ee3ac06b9c0" translate="yes" xml:space="preserve">
          <source>does</source>
          <target state="translated">does</target>
        </trans-unit>
        <trans-unit id="ae8dc794e9315437d3e45ba053ebff300747126e" translate="yes" xml:space="preserve">
          <source>doesNotChange</source>
          <target state="translated">doesNotChange</target>
        </trans-unit>
        <trans-unit id="8e2b63a5bb31efe33d9539520bac33fe6ba8ec28" translate="yes" xml:space="preserve">
          <source>doesNotDecrease</source>
          <target state="translated">doesNotDecrease</target>
        </trans-unit>
        <trans-unit id="fb80ff8b7996befa826e0fb9b910d796d307d4c0" translate="yes" xml:space="preserve">
          <source>doesNotHaveAllDeepKeys</source>
          <target state="translated">doesNotHaveAllDeepKeys</target>
        </trans-unit>
        <trans-unit id="a46fff481b7e86bda250b5d850d3b4b0b711df05" translate="yes" xml:space="preserve">
          <source>doesNotHaveAllKeys</source>
          <target state="translated">doesNotHaveAllKeys</target>
        </trans-unit>
        <trans-unit id="657e1cba755a75429faa73ac6883b8d54874f22e" translate="yes" xml:space="preserve">
          <source>doesNotHaveAnyDeepKeys</source>
          <target state="translated">doesNotHaveAnyDeepKeys</target>
        </trans-unit>
        <trans-unit id="e0d4da6907a8dfeebf3399abef74a56986e3b61d" translate="yes" xml:space="preserve">
          <source>doesNotHaveAnyKeys</source>
          <target state="translated">doesNotHaveAnyKeys</target>
        </trans-unit>
        <trans-unit id="b73c5d38045e3f7de19660a6d24aa82aceabe544" translate="yes" xml:space="preserve">
          <source>doesNotIncrease</source>
          <target state="translated">doesNotIncrease</target>
        </trans-unit>
        <trans-unit id="e6b2b808b23f9c55e268b88235a97aac1ee67b5e" translate="yes" xml:space="preserve">
          <source>doesNotThrow</source>
          <target state="translated">doesNotThrow</target>
        </trans-unit>
        <trans-unit id="ad87109bfff0765f4dd8cf4943b04d16a4070fea" translate="yes" xml:space="preserve">
          <source>empty</source>
          <target state="translated">empty</target>
        </trans-unit>
        <trans-unit id="28142869bc5eb232725e70fe353465417a650cea" translate="yes" xml:space="preserve">
          <source>eql</source>
          <target state="translated">eql</target>
        </trans-unit>
        <trans-unit id="f57b2d312d9efe8fe993c8eb1f3e19d41ad04030" translate="yes" xml:space="preserve">
          <source>equal</source>
          <target state="translated">equal</target>
        </trans-unit>
        <trans-unit id="7e89f2472eea0797f15896f1658417395dcaae35" translate="yes" xml:space="preserve">
          <source>exist</source>
          <target state="translated">exist</target>
        </trans-unit>
        <trans-unit id="4d68c8f13459c0edb40504de5003ec2a6b74e613" translate="yes" xml:space="preserve">
          <source>exists</source>
          <target state="translated">exists</target>
        </trans-unit>
        <trans-unit id="8da6daf44287e2e9c3df11f0ecd44ace44b0ad01" translate="yes" xml:space="preserve">
          <source>exists - Whether the property exists or not</source>
          <target state="translated">존재-속성 존재 여부</target>
        </trans-unit>
        <trans-unit id="bf509734c0763da613e2e937edd5d022dcb0ad4c" translate="yes" xml:space="preserve">
          <source>expectTypes</source>
          <target state="translated">expectTypes</target>
        </trans-unit>
        <trans-unit id="44cae7a68a2a5dfb26c2af2ae40c23a532445034" translate="yes" xml:space="preserve">
          <source>extensible</source>
          <target state="translated">extensible</target>
        </trans-unit>
        <trans-unit id="a602e216eb44a3ac5e096036eeaaef6bb9159677" translate="yes" xml:space="preserve">
          <source>fail</source>
          <target state="translated">fail</target>
        </trans-unit>
        <trans-unit id="7cb6efb98ba5972a9b5090dc2e517fe14d12cb04" translate="yes" xml:space="preserve">
          <source>false</source>
          <target state="translated">false</target>
        </trans-unit>
        <trans-unit id="a461405ddc31939e6da12cfa6f66387c7858584b" translate="yes" xml:space="preserve">
          <source>finite</source>
          <target state="translated">finite</target>
        </trans-unit>
        <trans-unit id="112f3a99b283a4e1788dedd8e0e5d35375c33747" translate="yes" xml:space="preserve">
          <source>flag</source>
          <target state="translated">flag</target>
        </trans-unit>
        <trans-unit id="3dd98f9fdc13cc5249e288ae7280b974afa4df5b" translate="yes" xml:space="preserve">
          <source>flag usage</source>
          <target state="translated">플래그 사용법</target>
        </trans-unit>
        <trans-unit id="c405fd1117e8f4f85f4c194257fc9ca62d7dffd3" translate="yes" xml:space="preserve">
          <source>frozen</source>
          <target state="translated">frozen</target>
        </trans-unit>
        <trans-unit id="c338b4bea8fd5eacd4b53bfedbb2224fed70e6bd" translate="yes" xml:space="preserve">
          <source>getActual</source>
          <target state="translated">getActual</target>
        </trans-unit>
        <trans-unit id="b3f441191feb23e915c16c64022599123cf8a7b9" translate="yes" xml:space="preserve">
          <source>getConstructorName</source>
          <target state="translated">getConstructorName</target>
        </trans-unit>
        <trans-unit id="01dcefaacff1d5614de12d0e841fc03ed79eaadf" translate="yes" xml:space="preserve">
          <source>getEnumerableProperties</source>
          <target state="translated">getEnumerableProperties</target>
        </trans-unit>
        <trans-unit id="d35eb9238395398980f4a280950ffbdae516f765" translate="yes" xml:space="preserve">
          <source>getFuncName</source>
          <target state="translated">getFuncName</target>
        </trans-unit>
        <trans-unit id="b66c28c40ea65e05dd3a79dcad502ec4edd1398c" translate="yes" xml:space="preserve">
          <source>getFunctionName</source>
          <target state="translated">getFunctionName</target>
        </trans-unit>
        <trans-unit id="480ad770f1e625f0b3f3ba43715afc47ef236659" translate="yes" xml:space="preserve">
          <source>getMessage</source>
          <target state="translated">getMessage</target>
        </trans-unit>
        <trans-unit id="95ad01166daaed50bf89278093ea944998530bd7" translate="yes" xml:space="preserve">
          <source>getOwnEnumerableProperties</source>
          <target state="translated">getOwnEnumerableProperties</target>
        </trans-unit>
        <trans-unit id="0d2923da46152cbe4b8adb0774aae7cd2b861ba1" translate="yes" xml:space="preserve">
          <source>getOwnEnumerablePropertySymbols</source>
          <target state="translated">getOwnEnumerablePropertySymbols</target>
        </trans-unit>
        <trans-unit id="d5d666e5bd0d0f7a90dce2b76b128bfd01bcb092" translate="yes" xml:space="preserve">
          <source>getPathInfo</source>
          <target state="translated">getPathInfo</target>
        </trans-unit>
        <trans-unit id="2f82861fa56e56014e484a901ef95925671534da" translate="yes" xml:space="preserve">
          <source>getPathValue</source>
          <target state="translated">getPathValue</target>
        </trans-unit>
        <trans-unit id="7cdb40c4f0fdc7e090b73711f643cd1d9e5742d1" translate="yes" xml:space="preserve">
          <source>getProperties</source>
          <target state="translated">getProperties</target>
        </trans-unit>
        <trans-unit id="f6f39fbf678d4c03ca72f7d0c7b4f56fb09eb765" translate="yes" xml:space="preserve">
          <source>has</source>
          <target state="translated">has</target>
        </trans-unit>
        <trans-unit id="f6abe5fa435282236e7f4df52ea5b08c0f2ff6d5" translate="yes" xml:space="preserve">
          <source>hasAllDeepKeys</source>
          <target state="translated">hasAllDeepKeys</target>
        </trans-unit>
        <trans-unit id="52644b2a75bc30cdb73c2a60c73f8f6273d120a5" translate="yes" xml:space="preserve">
          <source>hasAllKeys</source>
          <target state="translated">hasAllKeys</target>
        </trans-unit>
        <trans-unit id="4196517cc6e0c1ef1c9aff568711a593ecf8d113" translate="yes" xml:space="preserve">
          <source>hasAnyKeys</source>
          <target state="translated">hasAnyKeys</target>
        </trans-unit>
        <trans-unit id="e0331e4b0b7d1f1963d70d592a62e8eeb69da509" translate="yes" xml:space="preserve">
          <source>hasProperty</source>
          <target state="translated">hasProperty</target>
        </trans-unit>
        <trans-unit id="ff87cea4a48b77342a2dbef29133a128abc52679" translate="yes" xml:space="preserve">
          <source>have</source>
          <target state="translated">have</target>
        </trans-unit>
        <trans-unit id="ff8d3b4b6f6552cdf27360377d4aa959f20de408" translate="yes" xml:space="preserve">
          <source>helper in external file</source>
          <target state="translated">외부 파일의 도우미</target>
        </trans-unit>
        <trans-unit id="43abccd827fe6db165a1e973879ba0c86244d95f" translate="yes" xml:space="preserve">
          <source>ifError</source>
          <target state="translated">ifError</target>
        </trans-unit>
        <trans-unit id="d3ecb0d890368d7659ee54010045b835dacb8efe" translate="yes" xml:space="preserve">
          <source>include</source>
          <target state="translated">include</target>
        </trans-unit>
        <trans-unit id="d3a814bf3f5ed8b11d2b11a1517d6c34473726cd" translate="yes" xml:space="preserve">
          <source>includeDeepMembers</source>
          <target state="translated">includeDeepMembers</target>
        </trans-unit>
        <trans-unit id="4b0445297b35ad1926945a6e49c039c1c5d52e0f" translate="yes" xml:space="preserve">
          <source>includeDeepOrderedMembers</source>
          <target state="translated">includeDeepOrderedMembers</target>
        </trans-unit>
        <trans-unit id="dc7b91b1c62423a807b4f3c0718c8ff152484f7a" translate="yes" xml:space="preserve">
          <source>includeMembers</source>
          <target state="translated">includeMembers</target>
        </trans-unit>
        <trans-unit id="6f16fd45b07430eaaca4b2a7a08e79a41d5bc7ea" translate="yes" xml:space="preserve">
          <source>includeOrderedMembers</source>
          <target state="translated">includeOrderedMembers</target>
        </trans-unit>
        <trans-unit id="f9c9758ad2e54db886666711b1457afc61a8f3de" translate="yes" xml:space="preserve">
          <source>increase</source>
          <target state="translated">increase</target>
        </trans-unit>
        <trans-unit id="f8f2f1b9c717e6f61aee1096e11e669af4df3b31" translate="yes" xml:space="preserve">
          <source>increases</source>
          <target state="translated">increases</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
