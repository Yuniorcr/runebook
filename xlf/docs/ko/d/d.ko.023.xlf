<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="d">
    <body>
      <group id="d">
        <trans-unit id="c47fc2f4dad35c7e07dd9ed3c2d29ef84ea7cc74" translate="yes" xml:space="preserve">
          <source>Operand swap</source>
          <target state="translated">피연산자 스왑</target>
        </trans-unit>
        <trans-unit id="a2b8c4621b34e3c27498c6c8832719e530f09634" translate="yes" xml:space="preserve">
          <source>Operands</source>
          <target state="translated">Operands</target>
        </trans-unit>
        <trans-unit id="27ca5c239713ff8f578577200fe8706af71773d3" translate="yes" xml:space="preserve">
          <source>Operates on all threads currently being tracked by the system. The result of deleting any Thread object is undefined. Note that threads passed to the callback might no longer run (see &lt;code&gt;Thread.&lt;/code&gt;&lt;a href=&quot;#isRunning&quot;&gt;&lt;code&gt;isRunning&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">시스템에서 현재 추적중인 모든 스레드에서 작동합니다. Thread 객체를 삭제 한 결과는 정의되지 않습니다. 콜백에 전달 된 스레드가 더 이상 실행되지 않을 수 있습니다 ( &lt;code&gt;Thread.&lt;/code&gt; &lt;a href=&quot;#isRunning&quot;&gt; &lt;code&gt;isRunning&lt;/code&gt; &lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="1ceccd51e36cd099776635232a115dbf0c8ddbbd" translate="yes" xml:space="preserve">
          <source>Operates on all threads currently tracked by this object.</source>
          <target state="translated">이 객체가 현재 추적하고있는 모든 스레드에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="5fab1578993e130d7e185a769a8e7d10165a4ce2" translate="yes" xml:space="preserve">
          <source>Operating system error code.</source>
          <target state="translated">운영 체제 오류 코드</target>
        </trans-unit>
        <trans-unit id="8f5dbd7c97b01eae443b983fcb062faa3e56f50c" translate="yes" xml:space="preserve">
          <source>Operating system.</source>
          <target state="translated">운영 체제.</target>
        </trans-unit>
        <trans-unit id="5cc46d2eac1c8b0a848f98a788fe90ffd7043281" translate="yes" xml:space="preserve">
          <source>Operation NULL</source>
          <target state="translated">작업 NULL</target>
        </trans-unit>
        <trans-unit id="7c206b387173fa63aaa15f71f0e946eceea43069" translate="yes" xml:space="preserve">
          <source>Operation Savepoint Name</source>
          <target state="translated">작업 저장 점 이름</target>
        </trans-unit>
        <trans-unit id="dc2db8ab152ae696d77bdc87d45929deb94de5dc" translate="yes" xml:space="preserve">
          <source>Operation terminated by sqlite3_interrupt()</source>
          <target state="translated">sqlite3_interrupt ()에 의해 종료 된 작업</target>
        </trans-unit>
        <trans-unit id="d0e687b079fb70f2208d1f8d2c75d64d74925496" translate="yes" xml:space="preserve">
          <source>Operator</source>
          <target state="translated">Operator</target>
        </trans-unit>
        <trans-unit id="b2c30e50457298624b96ccb9dc57c58e04b9cd54" translate="yes" xml:space="preserve">
          <source>Operator &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; support.</source>
          <target state="translated">연산자 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 지원.</target>
        </trans-unit>
        <trans-unit id="c056556bd6106804af09418fad3513c58dd3ce25" translate="yes" xml:space="preserve">
          <source>Operator &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt; support.</source>
          <target state="translated">연산자 &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt; 지원.</target>
        </trans-unit>
        <trans-unit id="f299c884a708c75ca75144e361f0c5cf282b235f" translate="yes" xml:space="preserve">
          <source>Operator Overloading</source>
          <target state="translated">연산자 오버로딩</target>
        </trans-unit>
        <trans-unit id="658fcb31752209aa14d15f945731a7c73323992e" translate="yes" xml:space="preserve">
          <source>Operator overload. Check for operator overload, if so, replace with function call.</source>
          <target state="translated">운영자 과부하. 운전자 과부하가 있는지 점검하고, 그렇다면 기능 호출로 교체하십시오.</target>
        </trans-unit>
        <trans-unit id="0881519d8f6e3133862fd99cd3f26c97bd8c5241" translate="yes" xml:space="preserve">
          <source>Operator overloading for a number of operators can be done at the same time. For example, if only the + or - operators are supported:</source>
          <target state="translated">여러 운영자에 대한 운영자 과부하가 동시에 수행 될 수 있습니다. 예를 들어 + 또는-연산자 만 지원되는 경우 :</target>
        </trans-unit>
        <trans-unit id="a79cd265a6b171f4cb1a52d3f639986ca2f05ce4" translate="yes" xml:space="preserve">
          <source>Operator overloading is accomplished by rewriting operators whose operands are class or struct objects into calls to specially named members. No additional syntax is used.</source>
          <target state="translated">연산자 오버로드는 피연산자가 클래스이거나 구조체 인 연산자를 특별히 명명 된 멤버에 대한 호출로 다시 작성하여 수행됩니다. 추가 구문이 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="eacd76902a11d7e0e3df7b94d293ad81fec39f59" translate="yes" xml:space="preserve">
          <source>Operator sets &lt;code&gt;value&lt;/code&gt; for element of JSON object by &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">연산자는 JSON 객체의 요소 &lt;code&gt;value&lt;/code&gt; 을 &lt;code&gt;key&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="942d310c4eece12c0b6eb787bdd18914ed43a921" translate="yes" xml:space="preserve">
          <source>Operators not listed are not supported at all.</source>
          <target state="translated">목록에없는 연산자는 전혀 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="105f14774b9dc4fd12fb78b69309a3c1d98f98f5" translate="yes" xml:space="preserve">
          <source>Optical Character Recognition</source>
          <target state="translated">광학 문자 인식</target>
        </trans-unit>
        <trans-unit id="4635b8a94bf8d2a8157ac8f48eae6326d6299a58" translate="yes" xml:space="preserve">
          <source>Optimisation hints for assembly code.</source>
          <target state="translated">어셈블리 코드에 대한 최적화 힌트.</target>
        </trans-unit>
        <trans-unit id="6c185f29401844f73973bbf456cd1a89e77f21fa" translate="yes" xml:space="preserve">
          <source>Optimization is an optional pass that attempts to rewrite the program in a semantically equivalent, more performant, version.</source>
          <target state="translated">최적화는 의미 상 동등하고 성능이 더 우수한 버전으로 프로그램을 다시 작성하려는 선택적 패스입니다.</target>
        </trans-unit>
        <trans-unit id="2a03d18f56e01d18b8faf1e7c5daa696b62b96a8" translate="yes" xml:space="preserve">
          <source>Optimization is an optional pass that tries to rewrite the program in a semantically equivalent, but faster executing, version.</source>
          <target state="translated">최적화는 의미 적으로 동등하지만 실행 속도가 더 빠른 버전으로 프로그램을 다시 작성하는 선택적 단계입니다.</target>
        </trans-unit>
        <trans-unit id="e7750f07400d449f606de01fdfb52aae1fd21fce" translate="yes" xml:space="preserve">
          <source>Optimize common special case alignSize(2)</source>
          <target state="translated">일반적인 특수 사례 alignSize (2) 최적화</target>
        </trans-unit>
        <trans-unit id="af308e3b0590ac25521d185bafdd2fc15fc1c44b" translate="yes" xml:space="preserve">
          <source>Optimize common special case alignSize(4)</source>
          <target state="translated">일반적인 특수 사례 alignSize (4) 최적화</target>
        </trans-unit>
        <trans-unit id="e4a193f0de6267241861c2d42d5a4c6cc2a9b046" translate="yes" xml:space="preserve">
          <source>Option[] &lt;code&gt;opt&lt;/code&gt;</source>
          <target state="translated">옵션 [] &lt;code&gt;opt&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8d1a750a57d5ed1164a68ce6fe48eb75219856e9" translate="yes" xml:space="preserve">
          <source>Option[] &lt;strong id=&quot;options&quot;&gt;options&lt;/strong&gt;;</source>
          <target state="translated">옵션 [] &lt;strong id=&quot;options&quot;&gt;옵션&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="7d85f397e20f87376d5a77c0d5a7c922b7e4be12" translate="yes" xml:space="preserve">
          <source>Optional 4 char array to put the resulting Soundex characters into. If null, the return value buffer will be allocated on the heap.</source>
          <target state="translated">선택적인 4 문자 배열로 결과 Soundex 문자를 넣습니다. null의 경우, 반환 값 버퍼는 힙에 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="d00ac75ec10fc459fe79ad686a447767b4094900" translate="yes" xml:space="preserve">
          <source>Optional Parentheses</source>
          <target state="translated">선택적 괄호</target>
        </trans-unit>
        <trans-unit id="038e563ee642144905db080ffd8ae1bf79d33e01" translate="yes" xml:space="preserve">
          <source>Optional arguments used for initializing the created object. If not present, the object is default constructed.</source>
          <target state="translated">작성된 오브젝트를 초기화하는 데 사용되는 선택적 인수입니다. 존재하지 않으면 오브젝트가 기본적으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="fdcdde29a4f281b516f2ccc0b86b05e8a9f79eaa" translate="yes" xml:space="preserve">
          <source>Optional initial value for the new type.</source>
          <target state="translated">새 유형의 선택적 초기 값입니다.</target>
        </trans-unit>
        <trans-unit id="6d59ad8cf4d8ef8301a7aaf80bd895b2ba04a3f4" translate="yes" xml:space="preserve">
          <source>Optional message to output on test failure.</source>
          <target state="translated">테스트 실패시 출력 할 선택적 메시지.</target>
        </trans-unit>
        <trans-unit id="f30ef832425c5a7898fe008b0347b287bbe11286" translate="yes" xml:space="preserve">
          <source>Optional message to output on test failure. If msg is empty, and the thrown exception has a non-empty msg field, the exception's msg field will be output on test failure.</source>
          <target state="translated">테스트 실패시 출력 할 선택적 메시지. msg가 비어 있고 던져진 예외에 비어 있지 않은 msg 필드가 있으면 예외의 msg 필드가 테스트 실패시 출력됩니다.</target>
        </trans-unit>
        <trans-unit id="e22e0e7dfcab51210e2c1324ad28b24761a1cc15" translate="yes" xml:space="preserve">
          <source>Optional parentheses are not applied to delegates or function pointers.</source>
          <target state="translated">선택적 괄호는 대리자 또는 함수 포인터에 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="092c132b404aff7b3204e00316cdb117ca456851" translate="yes" xml:space="preserve">
          <source>Optional string with wildcards, such as  &quot;*.d&quot;. When present, it is used to filter the results by their file name. The supported wildcard strings are described under &lt;a href=&quot;std_path#globMatch&quot;&gt;&lt;code&gt; std.path.globMatch&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">와일드 카드가 포함 된 선택적 문자열 (예 : &quot;* .d&quot;) 존재하는 경우 파일 이름으로 결과를 필터링하는 데 사용됩니다. 지원되는 와일드 카드 문자열은 &lt;a href=&quot;std_path#globMatch&quot;&gt; &lt;code&gt; std.path.globMatch&lt;/code&gt; 에&lt;/a&gt; 설명되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5003de64d53361cf50d9ac6aa9cf977dcc7c6c5a" translate="yes" xml:space="preserve">
          <source>Optional, used to create multiple unique types which are based on the same origin type &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">선택 사항, 동일한 원본 유형 &lt;code&gt;T&lt;/code&gt; 를 기반으로하는 여러 고유 유형을 작성하는 데 사용</target>
        </trans-unit>
        <trans-unit id="d4544162ebd3cc17060bab5af2189803c9093909" translate="yes" xml:space="preserve">
          <source>Optionally a string literal or manifest constant can be used to provide additional information in the deprecation message.</source>
          <target state="translated">선택적으로 문자열 리터럴 또는 매니페스트 상수를 사용하여 사용 중단 메시지에 추가 정보를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3fcf22d9a17be7e076745071fa3d0b3148122d91" translate="yes" xml:space="preserve">
          <source>Options Terminator</source>
          <target state="translated">옵션 터미네이터</target>
        </trans-unit>
        <trans-unit id="e7e6cd13772f7d3104b04440c2ae1e1e64c992b1" translate="yes" xml:space="preserve">
          <source>Options for &lt;a href=&quot;#SortedRange&quot;&gt;&lt;code&gt;SortedRange&lt;/code&gt;&lt;/a&gt; ranges (below).</source>
          <target state="translated">&lt;a href=&quot;#SortedRange&quot;&gt; &lt;code&gt;SortedRange&lt;/code&gt; &lt;/a&gt; 범위 옵션 (아래).</target>
        </trans-unit>
        <trans-unit id="84ad00011b95818e19ed121e47fc0a5a9da924de" translate="yes" xml:space="preserve">
          <source>Options for &lt;code&gt;StatsCollector&lt;/code&gt; defined below. Each enables during compilation one specific counter, statistic, or other piece of information.</source>
          <target state="translated">&lt;code&gt;StatsCollector&lt;/code&gt; 에 대한 옵션은 아래에 정의되어 있습니다. 각각은 하나의 특정 카운터, 통계 또는 기타 정보를 컴파일하는 동안 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="2c3004f998d37dff4cdd5bfe04bd588d9585293d" translate="yes" xml:space="preserve">
          <source>Options for the &lt;a href=&quot;#FrontTransversal&quot;&gt;&lt;code&gt;FrontTransversal&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#Transversal&quot;&gt;&lt;code&gt;Transversal&lt;/code&gt;&lt;/a&gt; ranges (below).</source>
          <target state="translated">&lt;a href=&quot;#FrontTransversal&quot;&gt; &lt;code&gt;FrontTransversal&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#Transversal&quot;&gt; &lt;code&gt;Transversal&lt;/code&gt; &lt;/a&gt; 범위에 대한 옵션 (아래).</target>
        </trans-unit>
        <trans-unit id="e73dd1bfc6de45893094d39a0b8c52fd15136773" translate="yes" xml:space="preserve">
          <source>Options regarding auto-initialization of a &lt;code&gt;RefCounted&lt;/code&gt; object (see the definition of &lt;code&gt;RefCounted&lt;/code&gt; below).</source>
          <target state="translated">&lt;code&gt;RefCounted&lt;/code&gt; 객체 의 자동 초기화에 관한 옵션 ( 아래 &lt;code&gt;RefCounted&lt;/code&gt; 정의 참조).</target>
        </trans-unit>
        <trans-unit id="fa0185ff06c2b5e2963d7b06c5172c58d05f4dc8" translate="yes" xml:space="preserve">
          <source>Options supported by -check</source>
          <target state="translated">-check에 의해 지원되는 옵션</target>
        </trans-unit>
        <trans-unit id="d52742178e23e949c60c1d5e040ad60b9387322e" translate="yes" xml:space="preserve">
          <source>Options supported by -checkaction=</source>
          <target state="translated">-checkaction =에서 지원하는 옵션</target>
        </trans-unit>
        <trans-unit id="363dac403a2a83e25797a3d9c9ee22f4611eaac4" translate="yes" xml:space="preserve">
          <source>Options supported by -extern-std</source>
          <target state="translated">-extern-std가 지원하는 옵션</target>
        </trans-unit>
        <trans-unit id="60f84bb401de02d865a716cc0a5e1289035f7821" translate="yes" xml:space="preserve">
          <source>Options with multiple names</source>
          <target state="translated">여러 이름을 가진 옵션</target>
        </trans-unit>
        <trans-unit id="19c159a25d07edf6bd220009e32de0cdee356e75" translate="yes" xml:space="preserve">
          <source>Options[] &lt;strong id=&quot;opts&quot;&gt;opts&lt;/strong&gt;;</source>
          <target state="translated">옵션 [] &lt;strong id=&quot;opts&quot;&gt;opts&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="edace25305092565e308d9146174a0a2938df434" translate="yes" xml:space="preserve">
          <source>Or Expressions</source>
          <target state="translated">또는 표현</target>
        </trans-unit>
        <trans-unit id="4f2ce19ebdea19c7f2e73deccf0f96bba95a0a64" translate="yes" xml:space="preserve">
          <source>OrOr Expressions</source>
          <target state="translated">OrOr 식</target>
        </trans-unit>
        <trans-unit id="2386e5c9e2c936e53415bc77759add97d38ae88d" translate="yes" xml:space="preserve">
          <source>OrOrExpression</source>
          <target state="translated">OrOrExpression</target>
        </trans-unit>
        <trans-unit id="7845f6223be30b5297bf59f283a22a525e6c7aca" translate="yes" xml:space="preserve">
          <source>Order Of Evaluation</source>
          <target state="translated">평가 순서</target>
        </trans-unit>
        <trans-unit id="972733ae150ac5a0d4141ce4b0e555b5149be952" translate="yes" xml:space="preserve">
          <source>Order did not match that found in the input</source>
          <target state="translated">입력이 주문과 일치하지 않습니다</target>
        </trans-unit>
        <trans-unit id="15526c521fbddfecba053d2b9bd9f4f2d40a4fcf" translate="yes" xml:space="preserve">
          <source>Order of Static Construction</source>
          <target state="translated">정적 시공 순서</target>
        </trans-unit>
        <trans-unit id="c3fec94dee877456604b578bf17a9f503a832939" translate="yes" xml:space="preserve">
          <source>Order of Static Construction within a Module</source>
          <target state="translated">모듈 내 정적 구성 순서</target>
        </trans-unit>
        <trans-unit id="b07e4919a91d40cd506173a6c238d70b4d2b5a5c" translate="yes" xml:space="preserve">
          <source>Order of Static Destruction</source>
          <target state="translated">정적 파괴의 순서</target>
        </trans-unit>
        <trans-unit id="03669ae8e7b2e4ca8ca78be6c322b755b43c766a" translate="yes" xml:space="preserve">
          <source>Order of Unit tests</source>
          <target state="translated">단위 테스트 순서</target>
        </trans-unit>
        <trans-unit id="c478a3b39efae7d0d0a63d69e6666965308c26b2" translate="yes" xml:space="preserve">
          <source>Order the provided members to minimize size while preserving alignment. Alignment is not always optimal for 80-bit reals, nor for structs declared as align(1).</source>
          <target state="translated">정렬을 유지하면서 크기를 최소화하도록 제공된 멤버를 주문하십시오. 정렬이 80 비트 실수 나 align (1)로 선언 된 구조체에 항상 최적 인 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="c3d3d13178dc609ab5facd250c988ab12f4ba7bb" translate="yes" xml:space="preserve">
          <source>Ordering comparison used by the &quot;&amp;lt;&quot;, &quot;&amp;lt;=&quot;, &quot;&amp;gt;&quot;, and &quot;&amp;gt;=&quot; operators. In case comparison is not sensible between the held value and &lt;code&gt;rhs&lt;/code&gt;, an exception is thrown.</source>
          <target state="translated">&quot;&amp;lt;&quot;, &quot;&amp;lt;=&quot;, &quot;&amp;gt;&quot;및 &quot;&amp;gt; =&quot;연산자가 사용하는 순서 비교. 유지 된 값과 &lt;code&gt;rhs&lt;/code&gt; 사이의 비교가 적절하지 않은 경우 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="483f66f6d26b7cb776d522769f431003c3f9bfb5" translate="yes" xml:space="preserve">
          <source>Organizes one contiguous chunk of memory in equal-size blocks and tracks allocation status at the cost of one bit per block.</source>
          <target state="translated">동일한 크기의 블록에서 하나의 연속 된 메모리 청크를 구성하고 블록 당 1 비트의 비용으로 할당 상태를 추적합니다.</target>
        </trans-unit>
        <trans-unit id="0111ae8997cfd3379765a4a4e0e5efb36400d9f8" translate="yes" xml:space="preserve">
          <source>OriginalType!E &lt;strong id=&quot;asOriginalType&quot;&gt;asOriginalType&lt;/strong&gt;(E)(E value)</source>
          <target state="translated">OriginalType! E &lt;strong id=&quot;asOriginalType&quot;&gt;asOriginalType&lt;/strong&gt; (E) (E 값)</target>
        </trans-unit>
        <trans-unit id="c10643b85fbfbd4fbb63e61c52588993e2ffbfa5" translate="yes" xml:space="preserve">
          <source>Oriya</source>
          <target state="translated">Oriya</target>
        </trans-unit>
        <trans-unit id="42cb2600c161bf7bf85310fb50b63266488059bf" translate="yes" xml:space="preserve">
          <source>Osmanya</source>
          <target state="translated">Osmanya</target>
        </trans-unit>
        <trans-unit id="6e6a6f2086bb5fe5dbfd17d8d5f502d48759834b" translate="yes" xml:space="preserve">
          <source>Other</source>
          <target state="translated">Other</target>
        </trans-unit>
        <trans-unit id="9aaa73eee9cf49714bdd9258a2956f335d4eeec0" translate="yes" xml:space="preserve">
          <source>Other &lt;a href=&quot;https://python.org/sigs/doc-sig/otherlangs.html&quot;&gt;documentation tools&lt;/a&gt;</source>
          <target state="translated">다른 &lt;a href=&quot;https://python.org/sigs/doc-sig/otherlangs.html&quot;&gt;문서 도구&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bd6313338475c9071259ef3238ae97dbbd791a4d" translate="yes" xml:space="preserve">
          <source>Other Posix Systems</source>
          <target state="translated">다른 Posix 시스템</target>
        </trans-unit>
        <trans-unit id="5e7b0a895f475b6f28b441a465421ad29d8e0322" translate="yes" xml:space="preserve">
          <source>Other date types</source>
          <target state="translated">다른 날짜 유형</target>
        </trans-unit>
        <trans-unit id="26fa36aba9abb20b0516eee338a081a64cf71284" translate="yes" xml:space="preserve">
          <source>Other early CPUs (Nx586, AMD K5, K6, Centaur C3, Transmeta, Cyrix, Rise) were mostly in-order.</source>
          <target state="translated">다른 초기 CPU (Nx586, AMD K5, K6, Centaur C3, Transmeta, Cyrix, Rise)가 대부분 순서대로있었습니다.</target>
        </trans-unit>
        <trans-unit id="b65c561a3ed0f4f2558514b426246a99c9d341a5" translate="yes" xml:space="preserve">
          <source>Other functionality</source>
          <target state="translated">다른 기능들</target>
        </trans-unit>
        <trans-unit id="f3ce46edeed2ba5081d15973ee7b8fd78b33a5e9" translate="yes" xml:space="preserve">
          <source>Other non-binary properties (once supported) follow the same notation - &lt;code&gt;unicode.propertyName.propertyValue&lt;/code&gt; for compile-time checked access and &lt;code&gt;unicode.propertyName(propertyValue)&lt;/code&gt; for run-time checked one.</source>
          <target state="translated">(한 번 지원) 기타 비 이진 속성은 같은 표기법을 따라 - &lt;code&gt;unicode.propertyName.propertyValue&lt;/code&gt; 컴파일 시간이 액세스 및 확인을 위해 &lt;code&gt;unicode.propertyName(propertyValue)&lt;/code&gt; 을 확인 실행 시간을.</target>
        </trans-unit>
        <trans-unit id="315b2283e70ed5c9b3a32d956573fa52bcf2327a" translate="yes" xml:space="preserve">
          <source>Other_Alphabetic</source>
          <target state="translated">Other_Alphabetic</target>
        </trans-unit>
        <trans-unit id="3576c30ed2a7456b454a6df0f1d356a6a5b81854" translate="yes" xml:space="preserve">
          <source>Other_Default_Ignorable_Code_Point</source>
          <target state="translated">Other_Default_Ignorable_Code_Point</target>
        </trans-unit>
        <trans-unit id="b8a4e9e3315108565913f1214d70e6ab06305fea" translate="yes" xml:space="preserve">
          <source>Other_Grapheme_Extend</source>
          <target state="translated">Other_Grapheme_Extend</target>
        </trans-unit>
        <trans-unit id="1eafede4d641ad77c5e7696525a5726a3b1e25e2" translate="yes" xml:space="preserve">
          <source>Other_ID_Continue</source>
          <target state="translated">Other_ID_Continue</target>
        </trans-unit>
        <trans-unit id="20de61891c461dc1d0740d06823ad7c655241aae" translate="yes" xml:space="preserve">
          <source>Other_ID_Start</source>
          <target state="translated">Other_ID_Start</target>
        </trans-unit>
        <trans-unit id="28d3f28453d83a9d4de7288e2adc6832cacb17eb" translate="yes" xml:space="preserve">
          <source>Other_Letter</source>
          <target state="translated">Other_Letter</target>
        </trans-unit>
        <trans-unit id="01c4b64406b7699bf365d87632f6ecac32fc9e72" translate="yes" xml:space="preserve">
          <source>Other_Lowercase</source>
          <target state="translated">Other_Lowercase</target>
        </trans-unit>
        <trans-unit id="85b8947a3c801b69f490df8abb132c7f38d3815e" translate="yes" xml:space="preserve">
          <source>Other_Math</source>
          <target state="translated">Other_Math</target>
        </trans-unit>
        <trans-unit id="05fb43438f8add5bc5e520c7162cafcff5568073" translate="yes" xml:space="preserve">
          <source>Other_Number</source>
          <target state="translated">Other_Number</target>
        </trans-unit>
        <trans-unit id="6a6c035052d2fcea5bd0994c7e06947db784b476" translate="yes" xml:space="preserve">
          <source>Other_Punctuation</source>
          <target state="translated">Other_Punctuation</target>
        </trans-unit>
        <trans-unit id="ecc700e8bf50c329823e4432669e2e0f13941414" translate="yes" xml:space="preserve">
          <source>Other_Symbol</source>
          <target state="translated">Other_Symbol</target>
        </trans-unit>
        <trans-unit id="8f9fafd248962959d08eb0fc0b6409cc5836d1a0" translate="yes" xml:space="preserve">
          <source>Other_Uppercase</source>
          <target state="translated">Other_Uppercase</target>
        </trans-unit>
        <trans-unit id="45d9c732939826aeca03102c6b35f994d91fb0c2" translate="yes" xml:space="preserve">
          <source>Others will be added as they make sense and new implementations appear.</source>
          <target state="translated">다른 것이 합리적이고 새로운 구현이 나타날 때 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="1b108b5414366434a06640c1cfb85f59ec1fb998" translate="yes" xml:space="preserve">
          <source>Otherwise if set to &lt;code&gt;CheckDns.yes&lt;/code&gt;, isEmail performs DNS checking.</source>
          <target state="translated">그렇지 않으면 &lt;code&gt;CheckDns.yes&lt;/code&gt; 로 설정된 경우 isEmail은 DNS 확인을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="4feb189ac05b2fa8c8a6112ed39f3df4fa83a432" translate="yes" xml:space="preserve">
          <source>Otherwise if set to &lt;code&gt;OpenRight.no&lt;/code&gt;, then the interval is closed to the right (last element included).</source>
          <target state="translated">그렇지 않으면 &lt;code&gt;OpenRight.no&lt;/code&gt; 로 설정 하면 간격이 오른쪽으로 닫힙니다 (마지막 요소 포함).</target>
        </trans-unit>
        <trans-unit id="631af2017187f4c3448d0a2a40a3b795c4cc9643" translate="yes" xml:space="preserve">
          <source>Otherwise if set to &lt;code&gt;SortOutput.yes&lt;/code&gt;, the output should be sorted.</source>
          <target state="translated">그렇지 않으면 &lt;code&gt;SortOutput.yes&lt;/code&gt; 로 설정된 경우 출력을 정렬해야합니다.</target>
        </trans-unit>
        <trans-unit id="49e81a26951cdd4a294c1a637fe5c96588287a18" translate="yes" xml:space="preserve">
          <source>Otherwise the expressions &lt;code&gt;a.opEquals(b)&lt;/code&gt; and &lt;code&gt;b.opEquals(a)&lt;/code&gt; are tried. If both resolve to the same &lt;code&gt;opEquals&lt;/code&gt; function, then the expression is rewritten to be &lt;code&gt;a.opEquals(b)&lt;/code&gt;.</source>
          <target state="translated">그렇지 않으면 표현의 &lt;code&gt;a.opEquals(b)&lt;/code&gt; 와 &lt;code&gt;b.opEquals(a)&lt;/code&gt; 시도됩니다. 둘 다 동일한 &lt;code&gt;opEquals&lt;/code&gt; 함수로 해석 되면 표현식은 &lt;code&gt;a.opEquals(b)&lt;/code&gt; 다시 작성됩니다 .</target>
        </trans-unit>
        <trans-unit id="fad059114d46d5cf546ef929c09cba6cc729966b" translate="yes" xml:space="preserve">
          <source>Otherwise, a &lt;a href=&quot;expression#CastExpression&quot;&gt;&lt;i&gt;CastExpression&lt;/i&gt;&lt;/a&gt; can be used to force a conversion when an implicit version is disallowed, but this cannot be done in &lt;code&gt;@safe&lt;/code&gt; code, and the correctness of it must be verified by the user.</source>
          <target state="translated">그렇지 않으면 암시 적 버전이 허용되지 않을 때 &lt;a href=&quot;expression#CastExpression&quot;&gt;&lt;i&gt;CastExpression&lt;/i&gt;&lt;/a&gt; 을 사용하여 강제로 변환 할 수 있지만 &lt;code&gt;@safe&lt;/code&gt; 코드에서는 수행 할 수 없으며 사용자가 정확성을 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="e27183018d554dc439f94eb91f969f3c9943015f" translate="yes" xml:space="preserve">
          <source>Otherwise, a new memory block of size &lt;code&gt;sz&lt;/code&gt; will be allocated as if by a call to &lt;code&gt;malloc&lt;/code&gt;, or the implementation may instead resize or shrink the memory block in place. The contents of the new memory block will be the same as the contents of the old memory block, up to the lesser of the new and old sizes.</source>
          <target state="translated">그렇지 않으면, 크기가 &lt;code&gt;sz&lt;/code&gt; 인 새 메모리 블록이 &lt;code&gt;malloc&lt;/code&gt; 호출에 의해 할당 되거나 대신 구현시 메모리 블록의 크기가 조정되거나 축소 될 수 있습니다. 새 메모리 블록의 내용은 이전 메모리 블록의 내용과 동일하며 새 크기와 이전 크기보다 작습니다.</target>
        </trans-unit>
        <trans-unit id="20322615ab9d65b2f51081694c4503aec51c6ded" translate="yes" xml:space="preserve">
          <source>Otherwise, an error results.</source>
          <target state="translated">그렇지 않으면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e0dc160c40a7011aff692c332c1e49596e1e4b69" translate="yes" xml:space="preserve">
          <source>Otherwise, append &lt;code&gt;path&lt;/code&gt; to &lt;code&gt;base&lt;/code&gt; and return the result. If &lt;code&gt;base&lt;/code&gt; is not specified, the current working directory is used.</source>
          <target state="translated">그렇지 않으면 &lt;code&gt;base&lt;/code&gt; 에 &lt;code&gt;path&lt;/code&gt; 를 추가 하고 결과를 반환하십시오. 경우 &lt;code&gt;base&lt;/code&gt; 지정하지 않으면 현재 작업 디렉토리가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4cd7b69fd1f55506fef8b49f409733c40cf8d99e" translate="yes" xml:space="preserve">
          <source>Otherwise, append &lt;code&gt;path&lt;/code&gt; to the current working directory, which allocates memory.</source>
          <target state="translated">그렇지 않으면 현재 작업 디렉토리에 &lt;code&gt;path&lt;/code&gt; 를 추가 하여 메모리를 할당하십시오.</target>
        </trans-unit>
        <trans-unit id="93d2d0917f1e44edec12baf0dd8089b83f8b9dfd" translate="yes" xml:space="preserve">
          <source>Otherwise, are formatted just as their type name.</source>
          <target state="translated">그렇지 않으면 형식 이름으로 형식이 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="d3b40053dd280e0bf88f12f740348b76f024645a" translate="yes" xml:space="preserve">
          <source>Otherwise, both constructors are defined. The &lt;code&gt;data&lt;/code&gt;-based constructor assumes memory has been allocated with the parent allocator. The &lt;code&gt;capacity&lt;/code&gt;-based constructor uses &lt;code&gt;ParentAllocator&lt;/code&gt; to allocate an appropriate contiguous hunk of memory. Regardless of the constructor used, the destructor releases the memory by using &lt;code&gt;ParentAllocator.deallocate&lt;/code&gt;.</source>
          <target state="translated">그렇지 않으면 두 생성자가 모두 정의됩니다. &lt;code&gt;data&lt;/code&gt; 기반 생성자는 메모리가 부모의 할당과 할당 된 가정합니다. &lt;code&gt;capacity&lt;/code&gt; 기반 생성자 사용 &lt;code&gt;ParentAllocator&lt;/code&gt; 를 메모리의 적절한 인접 덩어리를 할당. 사용 된 생성자에 관계없이 소멸자는 &lt;code&gt;ParentAllocator.deallocate&lt;/code&gt; 를 사용하여 메모리를 해제합니다 .</target>
        </trans-unit>
        <trans-unit id="98265553c41f7942d874dfa06e7085c989a0b6c9" translate="yes" xml:space="preserve">
          <source>Otherwise, elements are moved incrementally towards the front of &lt;code&gt;range&lt;/code&gt;; a given element is never moved several times, but more elements are moved than in the previous cases.</source>
          <target state="translated">그렇지 않으면 요소가 &lt;code&gt;range&lt;/code&gt; 의 앞쪽으로 점차 이동 합니다 . 주어진 요소는 여러 번 이동되지 않지만 이전의 경우보다 더 많은 요소가 이동합니다.</target>
        </trans-unit>
        <trans-unit id="d7b4269e42ae4fd84359bf3507bfdbea02d65c5e" translate="yes" xml:space="preserve">
          <source>Otherwise, if &lt;code&gt;S&lt;/code&gt; defines a postblit, the generated code for &lt;code&gt;opAssign&lt;/code&gt; is:</source>
          <target state="translated">그렇지 않으면, &lt;code&gt;S&lt;/code&gt; 는 postblit을 정의의 생성 된 코드 &lt;code&gt;opAssign&lt;/code&gt; 가 있습니다 :</target>
        </trans-unit>
        <trans-unit id="34d83f38a3798f99d8cf552fcbf4e3fb59e56355" translate="yes" xml:space="preserve">
          <source>Otherwise, if &lt;code&gt;s == SwapStrategy.unstable &amp;amp;&amp;amp; isBidirectionalRange!Range &amp;amp;&amp;amp; hasLength!Range &amp;amp;&amp;amp; hasLvalueElements!Range&lt;/code&gt;, then elements are still moved from the end of the range, but time is spent on advancing between slots by repeated calls to &lt;code&gt;range.popFront&lt;/code&gt;.</source>
          <target state="translated">그렇지 않은 경우, &lt;code&gt;s == SwapStrategy.unstable &amp;amp;&amp;amp; isBidirectionalRange!Range &amp;amp;&amp;amp; hasLength!Range &amp;amp;&amp;amp; hasLvalueElements!Range&lt;/code&gt; 이면 요소는 범위의 끝에서 계속 이동하지만 &lt;code&gt;range.popFront&lt;/code&gt; 를 반복해서 호출하여 슬롯 간 진행에 시간이 소요됩니다 .</target>
        </trans-unit>
        <trans-unit id="ba7fb1afa41d072823200e973c8318d1043c883c" translate="yes" xml:space="preserve">
          <source>Otherwise, if set to &lt;code&gt;AllowDayOverflow.yes&lt;/code&gt;, then day overflow is allowed.</source>
          <target state="translated">그렇지 않으면 &lt;code&gt;AllowDayOverflow.yes&lt;/code&gt; 로 설정하면 day overflow가 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="be83c3911232bf57584017e6a89fc54168a20468" translate="yes" xml:space="preserve">
          <source>Otherwise, if set to &lt;code&gt;AutoStart.yes&lt;/code&gt;, then the StopWatch is started when it is constructed.</source>
          <target state="translated">그렇지 않으면 &lt;code&gt;AutoStart.yes&lt;/code&gt; 로 설정 하면 StopWatch가 구성 될 때 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="d43b8e9c68a2b3e8bf2cef3f5678116c8f717c33" translate="yes" xml:space="preserve">
          <source>Otherwise, if set to &lt;code&gt;AutoStart.yes&lt;/code&gt;, then the stopwatch is started when it is constructed.</source>
          <target state="translated">그렇지 않으면 &lt;code&gt;AutoStart.yes&lt;/code&gt; 로 설정 하면 스톱워치가 구성 될 때 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="10c743c1cc7b3a7cf0661dbb3eeb470fb9ca7f88" translate="yes" xml:space="preserve">
          <source>Otherwise, if set to &lt;code&gt;PopFirst.yes&lt;/code&gt;, then popFront is called before returning the range.</source>
          <target state="translated">그렇지 않으면 &lt;code&gt;PopFirst.yes&lt;/code&gt; 로 설정된 경우 범위를 리턴하기 전에 popFront가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="1dea9b190a18c52440448cc36e1cc9a993d73f06" translate="yes" xml:space="preserve">
          <source>Otherwise, set &lt;code&gt;overflow&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; and return an unspecified value</source>
          <target state="translated">그렇지 않으면 &lt;code&gt;overflow&lt;/code&gt; 를 &lt;code&gt;true&lt;/code&gt; 로 설정 하고 지정되지 않은 값을 반환</target>
        </trans-unit>
        <trans-unit id="d7ea80b1a0955b07a0a71599fa3c435b5c6f752e" translate="yes" xml:space="preserve">
          <source>Otherwise, set summarize to true, and runMain to false.</source>
          <target state="translated">그렇지 않으면, summary를 true로 설정하고 runMain을 false로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="df4b2321350bd78d5e59c9f4b65b664ab9f798a6" translate="yes" xml:space="preserve">
          <source>Otherwise, the garbage collector is called to immediately free the memory allocated for the class instance or struct instance.</source>
          <target state="translated">그렇지 않으면 가비지 수집기가 호출되어 클래스 인스턴스 또는 구조체 인스턴스에 할당 된 메모리를 즉시 해제합니다.</target>
        </trans-unit>
        <trans-unit id="51f2bf5052af0a341395b6e5f55714745316c9a3" translate="yes" xml:space="preserve">
          <source>Otherwise, the matching delimiter is the same as the delimiter character:</source>
          <target state="translated">그렇지 않으면, 일치하는 분리 문자는 분리 문자와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="5e12d941f654871ede52074458d874bcdb81f831" translate="yes" xml:space="preserve">
          <source>Otherwise, the objects are formatted as input range.</source>
          <target state="translated">그렇지 않으면 개체가 입력 범위로 형식화됩니다.</target>
        </trans-unit>
        <trans-unit id="96b3aee374e1357ece2d5f44dff187e4382dceae" translate="yes" xml:space="preserve">
          <source>Otherwise, the operator first evaluates &lt;code&gt;auto result = opBinary!op(payload, rhs).payload&lt;/code&gt;, which is subject to the hooks in &lt;code&gt;opBinary&lt;/code&gt;. Then, if &lt;code&gt;result&lt;/code&gt; is less than &lt;code&gt;Checked!(T, Hook).min&lt;/code&gt; and if &lt;code&gt;Hook&lt;/code&gt; defines &lt;code&gt;onLowerBound&lt;/code&gt;, the payload is assigned from &lt;code&gt; hook.onLowerBound(result, min)&lt;/code&gt;. If &lt;code&gt;result&lt;/code&gt; is greater than &lt;code&gt;Checked!(T, Hook).max&lt;/code&gt; and if &lt;code&gt;Hook&lt;/code&gt; defines &lt;code&gt;onUpperBound&lt;/code&gt;, the payload is assigned from &lt;code&gt;hook.onUpperBound(result, min)&lt;/code&gt;.</source>
          <target state="translated">그렇지 않으면 연산자는 먼저 &lt;code&gt;auto result = opBinary!op(payload, rhs).payload&lt;/code&gt; 를 &lt;code&gt;opBinary&lt;/code&gt; 하며 opBinary 의 후크에 영향을받습니다 . 만약 그렇다면, &lt;code&gt;result&lt;/code&gt; 이하이며 &lt;code&gt;Checked!(T, Hook).min&lt;/code&gt; 경우 &lt;code&gt;Hook&lt;/code&gt; 가 정의 &lt;code&gt;onLowerBound&lt;/code&gt; , 페이로드로부터 할당 &lt;code&gt; hook.onLowerBound(result, min)&lt;/code&gt; . 경우에 &lt;code&gt;result&lt;/code&gt; 보다 큰 &lt;code&gt;Checked!(T, Hook).max&lt;/code&gt; 경우 &lt;code&gt;Hook&lt;/code&gt; 가 정의 &lt;code&gt;onUpperBound&lt;/code&gt; 상기 페이로드로부터 할당 &lt;code&gt;hook.onUpperBound(result, min)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="48528efcc3f9a77bb45e05946e171bb9ab922461" translate="yes" xml:space="preserve">
          <source>Otherwise, they are formatted like &lt;code&gt;Type(field1, filed2, ...)&lt;/code&gt;.</source>
          <target state="translated">그렇지 않으면 &lt;code&gt;Type(field1, filed2, ...)&lt;/code&gt; 과 같은 형식 입니다.</target>
        </trans-unit>
        <trans-unit id="a6ad8c0de5c848abc87bb5a19ad55877fbb13f5f" translate="yes" xml:space="preserve">
          <source>Otherwise, walks the range through its length and returns the number of elements seen. Performes &amp;Omicron;(&lt;code&gt;n&lt;/code&gt;) evaluations of &lt;code&gt;range.empty&lt;/code&gt; and &lt;code&gt;range.popFront()&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the effective length of &lt;code&gt;range&lt;/code&gt;.</source>
          <target state="translated">그렇지 않으면, 길이를 통해 범위를 탐색하고 표시된 요소 수를 리턴합니다. Performes &amp;Omicron; ( &lt;code&gt;n&lt;/code&gt; )의 평가 &lt;code&gt;range.empty&lt;/code&gt; 및 &lt;code&gt;range.popFront()&lt;/code&gt; , 여기서, &lt;code&gt;n&lt;/code&gt; 의 유효 길이 &lt;code&gt;range&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ff8db6ada06f83227eed246c83cc3693d4063c57" translate="yes" xml:space="preserve">
          <source>Our label symbol, with vector to keep track of forward references.</source>
          <target state="translated">전방 참조를 추적하기위한 벡터가있는 레이블 기호.</target>
        </trans-unit>
        <trans-unit id="84996582614366aed96d409996a95b59874ed607" translate="yes" xml:space="preserve">
          <source>Out of disk space.</source>
          <target state="translated">디스크 공간이 부족합니다.</target>
        </trans-unit>
        <trans-unit id="8287615f2ac89aad252242dec878907206c5210b" translate="yes" xml:space="preserve">
          <source>Out of memory.</source>
          <target state="translated">메모리가 부족합니다.</target>
        </trans-unit>
        <trans-unit id="4ec60c716ead5ac12059fc839ab1f661a44d5058" translate="yes" xml:space="preserve">
          <source>OutBuffer &lt;code&gt;buf&lt;/code&gt;</source>
          <target state="translated">아웃 &lt;code&gt;buf&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f0ab7a95451a4e0b671e325269d07a5d314844a6" translate="yes" xml:space="preserve">
          <source>OutBuffer provides a way to build up an array of bytes out of raw data. It is useful for things like preparing an array of bytes to write out to a file. OutBuffer's byte order is the format native to the computer. To control the byte order (endianness), use a class derived from OutBuffer. OutBuffer's internal buffer is allocated with the GC. Pointers stored into the buffer are scanned by the GC, but you have to ensure proper alignment, e.g. by using alignSize((void*).sizeof).</source>
          <target state="translated">OutBuffer는 원시 데이터에서 바이트 배열을 구축하는 방법을 제공합니다. 파일에 쓸 바이트 배열을 준비하는 등의 작업에 유용합니다. OutBuffer의 바이트 순서는 컴퓨터 고유의 형식입니다. 바이트 순서 (엔디안)를 제어하려면 OutBuffer에서 파생 된 클래스를 사용하십시오. OutBuffer의 내부 버퍼는 GC와 함께 할당됩니다. 버퍼에 저장된 포인터는 GC에 의해 스캔되지만 alignSize ((void *). sizeof)와 같은 적절한 정렬을 보장해야합니다.</target>
        </trans-unit>
        <trans-unit id="d15970d277dc3b3ea6e3907fe5ae14f4e7d68498" translate="yes" xml:space="preserve">
          <source>OutBuffer* &lt;code&gt;buf&lt;/code&gt;</source>
          <target state="translated">아웃 &lt;code&gt;buf&lt;/code&gt; * buf</target>
        </trans-unit>
        <trans-unit id="52d9787a72c9469cdbcb944e5fe679a9d46f4b4d" translate="yes" xml:space="preserve">
          <source>OutOfMemoryError on allocation failure.</source>
          <target state="translated">할당 실패시 OutOfMemoryError.</target>
        </trans-unit>
        <trans-unit id="7e451bc39b00e365a897773c4075f46ce2440988" translate="yes" xml:space="preserve">
          <source>Outbuffer &lt;strong id=&quot;objbuf&quot;&gt;objbuf&lt;/strong&gt;;</source>
          <target state="translated">아웃 버퍼 &lt;strong id=&quot;objbuf&quot;&gt;objbuf&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="2c747a01339ff37505e527737a9546e3714554ca" translate="yes" xml:space="preserve">
          <source>Output &lt;code&gt;ans&lt;/code&gt;</source>
          <target state="translated">출력 &lt;code&gt;ans&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d14ab80d73c6910ed8c82cf0b5de89687b958ffe" translate="yes" xml:space="preserve">
          <source>Output &lt;code&gt;output&lt;/code&gt;</source>
          <target state="translated">출력 &lt;code&gt;output&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e311d4b15d04097b72fdbeebaf0cb4db252e1942" translate="yes" xml:space="preserve">
          <source>Output is sent to this writer. Typical output writers include &lt;a href=&quot;std_array#Appender!string&quot;&gt;&lt;code&gt;std.array.Appender!string&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;std_stdio#LockingTextWriter&quot;&gt;&lt;code&gt;std.stdio.LockingTextWriter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">출력은이 라이터에게 보내집니다. 일반적인 출력 작가는 포함 &lt;a href=&quot;std_array#Appender!string&quot;&gt; &lt;code&gt;std.array.Appender!string&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;std_stdio#LockingTextWriter&quot;&gt; &lt;code&gt;std.stdio.LockingTextWriter&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9a955eff9acd789cc5203dc93f25956ae2aba50f" translate="yes" xml:space="preserve">
          <source>Output range which locks the file when created, and unlocks the file when it goes out of scope.</source>
          <target state="translated">생성시 파일을 잠그고 범위를 벗어나면 파일을 잠금 해제하는 출력 범위입니다.</target>
        </trans-unit>
        <trans-unit id="feaa8d97ca89d32a72e3374b3d9efe87224820f5" translate="yes" xml:space="preserve">
          <source>Output range.</source>
          <target state="translated">출력 범위.</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="bd2c85794fdb242bd898f477b91a4d9ddc3f1715" translate="yes" xml:space="preserve">
          <source>OutputRange &lt;code&gt;writer&lt;/code&gt;</source>
          <target state="translated">OutputRange &lt;code&gt;writer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f87baece393f11d2ebd7d34364434c48c4a02484" translate="yes" xml:space="preserve">
          <source>OutputRange or writeable array at least 36 entries long</source>
          <target state="translated">36 개 이상의 항목이있는 OutputRange 또는 쓰기 가능한 배열</target>
        </trans-unit>
        <trans-unit id="13e210f0c6fb1ed7f5c6dbe5107c577b2e60ca5f" translate="yes" xml:space="preserve">
          <source>OutputRangeObject!(R, E) &lt;strong id=&quot;outputRangeObject&quot;&gt;outputRangeObject&lt;/strong&gt;(R)(R range);</source>
          <target state="translated">OutputRangeObject! (R, E) &lt;strong id=&quot;outputRangeObject&quot;&gt;outputRangeObject&lt;/strong&gt; (R) (R 범위);</target>
        </trans-unit>
        <trans-unit id="e85d6164bf319f351741910ab97e716a962afc3a" translate="yes" xml:space="preserve">
          <source>Outputs &lt;code&gt;e&lt;/code&gt; to &lt;code&gt;r&lt;/code&gt;. The exact effect is dependent upon the two types. Several cases are accepted, as described below. The code snippets are attempted in order, and the first to compile &quot;wins&quot; and gets evaluated.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; 를 &lt;code&gt;r&lt;/code&gt; 로 출력합니다 . 정확한 효과는 두 가지 유형에 따라 다릅니다. 아래에 설명 된대로 여러 경우가 허용됩니다. 코드 스 니펫은 순서대로 시도되고 가장 먼저 컴파일 된 &quot;wins&quot;가 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="a1bb1dbd2d84148a196dd74f5ae5a0467c419f1c" translate="yes" xml:space="preserve">
          <source>Outputs element &lt;code&gt;e&lt;/code&gt; to a range.</source>
          <target state="translated">요소 &lt;code&gt;e&lt;/code&gt; 를 범위로 출력 합니다.</target>
        </trans-unit>
        <trans-unit id="4da7bc9200c71949eae8135d4a25bb5b299cf7cc" translate="yes" xml:space="preserve">
          <source>Overflow</source>
          <target state="translated">Overflow</target>
        </trans-unit>
        <trans-unit id="cf31b736962d25ed4317259b0c7493d64da74b0f" translate="yes" xml:space="preserve">
          <source>Overlapping Copying</source>
          <target state="translated">겹치는 복사</target>
        </trans-unit>
        <trans-unit id="1df91417e6e2a1e93fd773916d0eacc3cee16a1e" translate="yes" xml:space="preserve">
          <source>Overlapping copies are an error:</source>
          <target state="translated">겹치는 사본은 오류입니다.</target>
        </trans-unit>
        <trans-unit id="26c78f2170e31758038f3bb0a52b3d4d222f938f" translate="yes" xml:space="preserve">
          <source>Overload A Function For A Virtual Table</source>
          <target state="translated">가상 테이블에 대한 함수 과부하</target>
        </trans-unit>
        <trans-unit id="158045726a48723e8e24b0a391a82a31e3194519" translate="yes" xml:space="preserve">
          <source>Overload Set</source>
          <target state="translated">과부하 세트</target>
        </trans-unit>
        <trans-unit id="8886e8c38f58ad0262aa71aa1b3e45c6e90e8134" translate="yes" xml:space="preserve">
          <source>Overload Sets</source>
          <target state="translated">과부하 세트</target>
        </trans-unit>
        <trans-unit id="67ecd6530cb09f0a6a1016e4b467ebf1b14e8282" translate="yes" xml:space="preserve">
          <source>Overload existing TemplateDeclaration 'this' with the new one 's'. Return true if successful; i.e. no conflict.</source>
          <target state="translated">기존 TemplateDeclaration 'this'를 새 's'로 오버로드하십시오. 성공하면 true를 반환합니다. 즉 충돌이 없습니다.</target>
        </trans-unit>
        <trans-unit id="eae487bc2f0194066ba0b4a013c5fcf7636c06a2" translate="yes" xml:space="preserve">
          <source>Overload of &lt;a href=&quot;#rename&quot;&gt;&lt;code&gt;rename&lt;/code&gt;&lt;/a&gt; that takes an associative array &lt;code&gt;translate&lt;/code&gt; as a template parameter, where the keys are either the names or indices of the members to be changed and the new names are the corresponding values. Every key in &lt;code&gt;translate&lt;/code&gt; must be the name of a member of the &lt;a href=&quot;#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;. The same rules for empty strings apply as for the variadic template overload of &lt;a href=&quot;#rename&quot;&gt;&lt;code&gt;rename&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">연관 배열을 사용하는 &lt;a href=&quot;#rename&quot;&gt; &lt;code&gt;rename&lt;/code&gt; &lt;/a&gt; 과부하는 템플리트 매개 변수로 &lt;code&gt;translate&lt;/code&gt; 되며, 여기서 키는 변경할 멤버의 이름 또는 색인이며 새 이름은 해당 값입니다. &lt;code&gt;translate&lt;/code&gt; 모든 키 는 &lt;a href=&quot;#tuple&quot;&gt; &lt;code&gt;tuple&lt;/code&gt; &lt;/a&gt; 멤버의 이름이어야합니다 . 빈 문자열에 대해 동일한 규칙이 바리새 템플릿 오버로드 &lt;a href=&quot;#rename&quot;&gt; &lt;code&gt;rename&lt;/code&gt; &lt;/a&gt; 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="bb1730cb64cea0f7fd90a729f4e52146c5ec87e6" translate="yes" xml:space="preserve">
          <source>Overload of HMAC to be used if H doesn't provide information about its block size.</source>
          <target state="translated">H가 블록 크기에 대한 정보를 제공하지 않는 경우 사용되는 HMAC의 과부하.</target>
        </trans-unit>
        <trans-unit id="d69b02266b4564b8b1a2868be5966a7c16753f43" translate="yes" xml:space="preserve">
          <source>Overload sets can be merged with an alias declaration:</source>
          <target state="translated">오버로드 세트는 별명 선언과 병합 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0dfd02f023aa40beb746d9cc077ec573c5ad785e" translate="yes" xml:space="preserve">
          <source>Overload taking &lt;code&gt;CodepointSet&lt;/code&gt;s will naturally convert only to bool mapping &lt;code&gt;Trie&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;CodepointSet&lt;/code&gt; 을 사용하는 과부하 는 자연스럽게 부울 매핑 &lt;code&gt;Trie&lt;/code&gt; 로만 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="c42a6c022fe7418d8db213b725de386aa93c918b" translate="yes" xml:space="preserve">
          <source>Overload this FuncDeclaration with the new one f. Return true if successful; i.e. no conflict.</source>
          <target state="translated">이 FuncDeclaration을 새로운 것으로 오버로드하십시오. f. 성공하면 true를 반환합니다. 즉 충돌이 없습니다.</target>
        </trans-unit>
        <trans-unit id="c5ecac5efe300a95c2fed1c87f55f61b868e7be6" translate="yes" xml:space="preserve">
          <source>Overloadable Binary Operators</source>
          <target state="translated">과부하 이진 연산자</target>
        </trans-unit>
        <trans-unit id="0c91984df423d8adc0ea28e04634eb6436d66740" translate="yes" xml:space="preserve">
          <source>Overloadable Index Unary Operators</source>
          <target state="translated">과부하 인덱스 단항 연산자</target>
        </trans-unit>
        <trans-unit id="40c29eefdaaea03e00d053015d5c30e435d99ba5" translate="yes" xml:space="preserve">
          <source>Overloadable Op Assignment Operators</source>
          <target state="translated">과부하 연산 할당 연산자</target>
        </trans-unit>
        <trans-unit id="868004b3cb4783ac2e0f7bbd6f12e4efe1b9741d" translate="yes" xml:space="preserve">
          <source>Overloadable Slice Unary Operators</source>
          <target state="translated">오버로드 가능한 슬라이스 단항 연산자</target>
        </trans-unit>
        <trans-unit id="187c02a81ab8dd7735cd108b2d2d5d80603a58c8" translate="yes" xml:space="preserve">
          <source>Overloadable Unary Operators</source>
          <target state="translated">오버로드 가능한 단항 연산자</target>
        </trans-unit>
        <trans-unit id="0c7d142daaca9406f218da735b2626a59df3fc79" translate="yes" xml:space="preserve">
          <source>Overloading &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;</source>
          <target state="translated">오버로드 &lt;code&gt;&amp;lt;&lt;/code&gt; , &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;code&gt;=&lt;/code&gt; , &lt;code&gt;&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;code&gt;=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="82107b43f4305c149a257571647eee584e5a427e" translate="yes" xml:space="preserve">
          <source>Overloading &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;=&lt;/code&gt;</source>
          <target state="translated">과부하 &lt;code&gt;&amp;lt;&lt;/code&gt; , &lt;code&gt;&amp;lt;=&lt;/code&gt; , &lt;code&gt;&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;gt;=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ba3190914d282ad78492c1e46480b8bf4e1649b2" translate="yes" xml:space="preserve">
          <source>Overloading &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;</source>
          <target state="translated">과부하 &lt;code&gt;==&lt;/code&gt; 및 &lt;code&gt;!=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d9bb19726f9a0a8594fcdb690b64ba87e32bcce1" translate="yes" xml:space="preserve">
          <source>Overloading Index Unary Operators</source>
          <target state="translated">인덱스 단항 연산자 오버로드</target>
        </trans-unit>
        <trans-unit id="452176c507c63d99fdcd25f67549f4401bd31c52" translate="yes" xml:space="preserve">
          <source>Overloading Slice Unary Operators</source>
          <target state="translated">슬라이스 단항 연산자 오버로드</target>
        </trans-unit>
        <trans-unit id="04d7d655cce557095f8ad6c19c35e3d39b26d4ac" translate="yes" xml:space="preserve">
          <source>Overloading the Comparison Operators</source>
          <target state="translated">비교 연산자 오버로드</target>
        </trans-unit>
        <trans-unit id="343733174446e2662ee66d02bbdff2d89203838e" translate="yes" xml:space="preserve">
          <source>Overloading the slicing operator means overloading expressions like &lt;code&gt;a[]&lt;/code&gt; or &lt;code&gt;a[&lt;/code&gt;</source>
          <target state="translated">슬라이싱 연산자를 오버로드한다는 것은 &lt;code&gt;a[]&lt;/code&gt; 또는 &lt;code&gt;a[&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="28e9f60b000902c4ad6c539ce60cae3d5517be74" translate="yes" xml:space="preserve">
          <source>Override so it can work even if semantic() hasn't yet been run.</source>
          <target state="translated">semantic ()이 아직 실행되지 않은 경우에도 작동 할 수 있도록 재정의하십시오.</target>
        </trans-unit>
        <trans-unit id="1225901c0967c3137622abc4eda5e2ca4282d06d" translate="yes" xml:space="preserve">
          <source>Override to use a derived class. The returned socket's handle must not be set.</source>
          <target state="translated">파생 클래스를 사용하도록 재정의합니다. 반환 된 소켓의 핸들을 설정하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="7b278a3abe635e243893eb9ee9520d47934c806e" translate="yes" xml:space="preserve">
          <source>Overrides &lt;code&gt;Object.toString&lt;/code&gt; and returns the error message. Internally this forwards to the &lt;code&gt;toString&lt;/code&gt; overload that takes a sink delegate.</source>
          <target state="translated">&lt;code&gt;Object.toString&lt;/code&gt; 을 재정의 하고 오류 메시지를 반환합니다. 내부적으로 이것은 싱크 위임 을받는 &lt;code&gt;toString&lt;/code&gt; 오버로드로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="434b5085b3ba9a70b1f949c6e9087acb372b2be9" translate="yes" xml:space="preserve">
          <source>Overrides the default collect hander with a user-supplied version. This routine will be called for each resource object that is finalized in a non-deterministic manner--typically during a garbage collection cycle. If the supplied routine returns true then the object's dtor will called as normal, but if the routine returns false than the dtor will not be called. The default behavior is for all object dtors to be called.</source>
          <target state="translated">사용자가 제공 한 버전으로 기본 수집 처리기를 대체합니다. 이 루틴은 일반적으로 가비지 수집주기 동안 결정적이지 않은 방식으로 완료되는 각 자원 객체에 대해 호출됩니다. 제공된 루틴이 true를 리턴하면 오브젝트의 dtor가 정상적으로 호출되지만 루틴이 false를 리턴하면 dtor가 호출되지 않습니다. 기본 동작은 모든 객체 dtor를 호출하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="c2a6071ecd521a52b7d732960a323e428b0a4624" translate="yes" xml:space="preserve">
          <source>Overrides the default mangling for a symbol.</source>
          <target state="translated">심볼의 기본 맹 글링을 무시합니다.</target>
        </trans-unit>
        <trans-unit id="bf25c93e3d705c28b6d8ec638ddf35dc53074d1e" translate="yes" xml:space="preserve">
          <source>Overrides the default module unit tester with a user-supplied version. This routine will be called once on program initialization. The return value of this routine indicates to the runtime whether the tests ran without error.</source>
          <target state="translated">기본 모듈 장치 테스터를 사용자 제공 버전으로 대체합니다. 이 루틴은 프로그램 초기화시 한 번 호출됩니다. 이 루틴의 리턴 값은 테스트가 오류없이 실행되었는지 런타임에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="e40ec95fc8ad1ad3aefaa28bd8731b6a04320d70" translate="yes" xml:space="preserve">
          <source>Overrides the default trace hander with a user-supplied version.</source>
          <target state="translated">사용자 제공 버전으로 기본 추적 처리기를 대체합니다.</target>
        </trans-unit>
        <trans-unit id="cf266c19b70edb5e7f009d3790d662d578ec4941" translate="yes" xml:space="preserve">
          <source>Overrides the default trace mechanism with a user-supplied version. A trace represents the context from which an exception was thrown, and the trace handler will be called when this occurs. The pointer supplied to this routine indicates the base address from which tracing should occur. If the supplied pointer is null then the trace routine should determine an appropriate calling context from which to begin the trace.</source>
          <target state="translated">사용자 제공 버전으로 기본 추적 메커니즘을 대체합니다. 추적은 예외가 발생한 컨텍스트를 나타내며,이 상황이 발생하면 추적 핸들러가 호출됩니다. 이 루틴에 제공된 포인터는 추적이 발생해야하는 기본 주소를 나타냅니다. 제공된 포인터가 널인 경우 추적 루틴은 추적을 시작할 적절한 호출 컨텍스트를 결정해야합니다.</target>
        </trans-unit>
        <trans-unit id="89ff31225c5f042fff61e92ec8cf80e417a7140c" translate="yes" xml:space="preserve">
          <source>Owner</source>
          <target state="translated">Owner</target>
        </trans-unit>
        <trans-unit id="f4d48b875c14540f7cebd9c7470e1acc8e3b934a" translate="yes" xml:space="preserve">
          <source>Ownership/Borrowing</source>
          <target state="translated">Ownership/Borrowing</target>
        </trans-unit>
        <trans-unit id="74feeb6178fa5b23446dfd16c8978129d74b1bd2" translate="yes" xml:space="preserve">
          <source>Owns a (rmem-managed) file buffer.</source>
          <target state="translated">(rmem 관리) 파일 버퍼를 소유합니다.</target>
        </trans-unit>
        <trans-unit id="511993d3c99719e38a6779073019dacd7178ddb9" translate="yes" xml:space="preserve">
          <source>P</source>
          <target state="translated">P</target>
        </trans-unit>
        <trans-unit id="16309e2b3bedf0b1c2ca1cd681b84c8d2ee0bc98" translate="yes" xml:space="preserve">
          <source>PARC Universal Packet Protocol</source>
          <target state="translated">PARC 범용 패킷 프로토콜</target>
        </trans-unit>
        <trans-unit id="11850638f643ba7850d11f7ddcec0964d655b890" translate="yes" xml:space="preserve">
          <source>PARC Universal Packet Protocol level</source>
          <target state="translated">PARC 범용 패킷 프로토콜 수준</target>
        </trans-unit>
        <trans-unit id="328336a5067c796e3099da705902a551e91ac694" translate="yes" xml:space="preserve">
          <source>PHOBOS_VERSION</source>
          <target state="translated">PHOBOS_VERSION</target>
        </trans-unit>
        <trans-unit id="bd6d55722c91f9838a18dc678fa82fff08090ff7" translate="yes" xml:space="preserve">
          <source>PIException if the segment body is illegal (contains &quot;?&amp;gt;&quot;)</source>
          <target state="translated">PIException 세그먼트 본문이 잘못된 경우 ( &quot;?&amp;gt;&quot;포함)</target>
        </trans-unit>
        <trans-unit id="b79d0f29fffcde427896ae2e08789531e1def379" translate="yes" xml:space="preserve">
          <source>POD is defined as:</source>
          <target state="translated">POD는 다음과 같이 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="fec3b8a0dd6b51f5966e330783d67a4a5db1cc08" translate="yes" xml:space="preserve">
          <source>POSIX specific</source>
          <target state="translated">POSIX 특정</target>
        </trans-unit>
        <trans-unit id="5920724eeffca91f7f6adab2e15742b13168e721" translate="yes" xml:space="preserve">
          <source>POST static input fields.</source>
          <target state="translated">POST 정적 입력 필드.</target>
        </trans-unit>
        <trans-unit id="9111ca243bfe057abc22f66b97b7e326a80a3a08" translate="yes" xml:space="preserve">
          <source>POST volatile input fields.</source>
          <target state="translated">POST 휘발성 입력 필드.</target>
        </trans-unit>
        <trans-unit id="536eb8d5f513c1dccc601b700a5bc1cf4cff7823" translate="yes" xml:space="preserve">
          <source>PREC[TOK.max_] &lt;strong id=&quot;precedence&quot;&gt;precedence&lt;/strong&gt;;</source>
          <target state="translated">PREC [TOK.max_] &lt;strong id=&quot;precedence&quot;&gt;우선 순위&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="9b655813c0be05ad826fd70e726125de35fc2f50" translate="yes" xml:space="preserve">
          <source>PUBLIC FUNCTIONS</source>
          <target state="translated">퍼블릭 기능</target>
        </trans-unit>
        <trans-unit id="6edd3b1108776883868715a89627fccc1922179c" translate="yes" xml:space="preserve">
          <source>Package &lt;code&gt;p&lt;/code&gt;</source>
          <target state="translated">패키지 &lt;code&gt;p&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fe45845b0cf0e4b5ad1d088d74ee6c6714a4e668" translate="yes" xml:space="preserve">
          <source>Package &lt;code&gt;pkg&lt;/code&gt;</source>
          <target state="translated">패키지 &lt;code&gt;pkg&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c1c83923c5bf4fb42b6715d534ec4a4410b11428" translate="yes" xml:space="preserve">
          <source>Package &lt;strong id=&quot;resolveIsPackage&quot;&gt;resolveIsPackage&lt;/strong&gt;(Dsymbol sym);</source>
          <target state="translated">패키지 &lt;strong id=&quot;resolveIsPackage&quot;&gt;resolveIsPackage&lt;/strong&gt; (기호);</target>
        </trans-unit>
        <trans-unit id="2f81d5fc2134a962ec93de8ce6eebd789d867168" translate="yes" xml:space="preserve">
          <source>Package Module</source>
          <target state="translated">패키지 모듈</target>
        </trans-unit>
        <trans-unit id="0a999012ffb87b3edac99adbdfc498b12831a1e2" translate="yes" xml:space="preserve">
          <source>Packages</source>
          <target state="translated">Packages</target>
        </trans-unit>
        <trans-unit id="5bf83a475305a8a5e5f13b2d29274d98303c1d0f" translate="yes" xml:space="preserve">
          <source>Packing and Alignment</source>
          <target state="translated">포장 및 정렬</target>
        </trans-unit>
        <trans-unit id="527b6c0dc92a4c896664b2f08b6671179844b2cb" translate="yes" xml:space="preserve">
          <source>Pads a range to a specified length by adding a given element to the front of the range. Is lazy if the range has a known length.</source>
          <target state="translated">지정된 요소를 범위 앞에 추가하여 범위를 지정된 길이로 채 웁니다. 범위의 길이가 알려진 경우 게으름</target>
        </trans-unit>
        <trans-unit id="1a3fe2a8ab75f618f4a19bf2dac2c84e666392b1" translate="yes" xml:space="preserve">
          <source>Pairs of test expressions and return expressions. The test expressions will be the second argument for the predicate, and the return expression will be returned if the predicate yields true with &lt;code&gt;switchExpression&lt;/code&gt; and the test expression as arguments. May also have a default return expression, that needs to be the last expression without a test expression before it. A return expression may be of void type only if it always throws.</source>
          <target state="translated">테스트 표현식과 리턴 표현식의 쌍입니다. 테스트 표현식은 술어의 두 번째 &lt;code&gt;switchExpression&lt;/code&gt; 되고 switchExpression 및 테스트 표현식을 인수 로 사용하여 술어가 true를 리턴하면 리턴 표현식이 리턴됩니다 . 또한 기본 리턴 표현식이있을 수 있으며 테스트 표현식이없는 마지막 표현식이어야합니다. 리턴 표현식은 항상 발생하는 경우에만 void 유형일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a59f0eb1f60143691b85b6c69dd1f1a53159158" translate="yes" xml:space="preserve">
          <source>Paragraph_Separator</source>
          <target state="translated">Paragraph_Separator</target>
        </trans-unit>
        <trans-unit id="e32c4eb3da79aeddb942c05de64aaff19b75096a" translate="yes" xml:space="preserve">
          <source>Parallel marking</source>
          <target state="translated">평행 마킹</target>
        </trans-unit>
        <trans-unit id="acc6f793dede04624d00eb05042ec34065c433d0" translate="yes" xml:space="preserve">
          <source>Parallel reduce on a random access range. Except as otherwise noted, usage is similar to &lt;a href=&quot;std_algorithm_iteration#reduce&quot;&gt;&lt;code&gt;std.algorithm.iteration.reduce&lt;/code&gt;&lt;/a&gt;. There is also &lt;a href=&quot;#fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; which does the same thing with a different parameter order.</source>
          <target state="translated">랜덤 액세스 범위에서 병렬 감소. 달리 언급 된 것을 제외하고는 사용법은 &lt;a href=&quot;std_algorithm_iteration#reduce&quot;&gt; &lt;code&gt;std.algorithm.iteration.reduce&lt;/code&gt; &lt;/a&gt; 와 유사합니다 . 다른 매개 변수 순서로 동일한 작업을 수행하는 &lt;a href=&quot;#fold&quot;&gt; &lt;code&gt;fold&lt;/code&gt; &lt;/a&gt; 도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="64c0a305b25b3c5cd3ace12be0a7a18b3ad03f48" translate="yes" xml:space="preserve">
          <source>Parallel reduce supports multiple functions, like &lt;code&gt;std.algorithm.reduce&lt;/code&gt;.</source>
          <target state="translated">병렬 축소는 &lt;code&gt;std.algorithm.reduce&lt;/code&gt; 와 같은 여러 기능을 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="7564a5560d76d7619eabad0cf5b241d011ae8e5e" translate="yes" xml:space="preserve">
          <source>ParallelForeach!R &lt;strong id=&quot;parallel&quot;&gt;parallel&lt;/strong&gt;(R)(R range);</source>
          <target state="translated">ParallelForeach! R &lt;strong id=&quot;parallel&quot;&gt;병렬&lt;/strong&gt; (R) (R 범위);</target>
        </trans-unit>
        <trans-unit id="706e0f72ea7909cb27d89524808db6808cb50661" translate="yes" xml:space="preserve">
          <source>ParallelForeach!R &lt;strong id=&quot;parallel&quot;&gt;parallel&lt;/strong&gt;(R)(R range, size_t workUnitSize);</source>
          <target state="translated">ParallelForeach! R &lt;strong id=&quot;parallel&quot;&gt;병렬&lt;/strong&gt; (R) (R 범위, size_t workUnitSize);</target>
        </trans-unit>
        <trans-unit id="c65074d6db6bccb661f4773c38d3324964921272" translate="yes" xml:space="preserve">
          <source>Param &lt;code&gt;params&lt;/code&gt;</source>
          <target state="translated">매개 &lt;code&gt;params&lt;/code&gt; 매개 변수</target>
        </trans-unit>
        <trans-unit id="19f29f198f4dec4eb5c8f9b8be59082811067ae8" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;p&lt;/code&gt;</source>
          <target state="translated">매개 변수 &lt;code&gt;p&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4b71e169e1a186fb6f6f76028af43dfbd5d2d9bc" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;par&lt;/code&gt;</source>
          <target state="translated">파라미터 &lt;code&gt;par&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="84083975aaa4d13fa2983979d72578766d2ff82b" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;parameter&lt;/code&gt;</source>
          <target state="translated">파라미터 &lt;code&gt;parameter&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="23c85a1fcaf0a5cf78d51f0fe59e5d98d3c0a372" translate="yes" xml:space="preserve">
          <source>Parameter Storage Classes</source>
          <target state="translated">파라미터 저장 클래스</target>
        </trans-unit>
        <trans-unit id="db82d68363ec6e38305dc78db53ba4671015a864" translate="yes" xml:space="preserve">
          <source>Parameter may be returned or copied to the first parameter, but otherwise does not escape from the function. Such copies are required not to outlive the argument(s) they were derived from. Ignored for parameters with no references. See &lt;a href=&quot;memory-safe-d#scope-return-params&quot;&gt;Scope Parameters&lt;/a&gt;.</source>
          <target state="translated">매개 변수는 첫 번째 매개 변수로 리턴되거나 복사 될 수 있지만 그렇지 않으면 함수에서 이탈하지 않습니다. 그러한 사본은 그 주장에서 나온 주장보다 오래 지속되지 않아야합니다. 참조가없는 매개 변수에 대해서는 무시됩니다. &lt;a href=&quot;memory-safe-d#scope-return-params&quot;&gt;범위 매개 변수를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1a8ada0f324dda2754e9706db00c66db9f30cac7" translate="yes" xml:space="preserve">
          <source>Parameter storage classes are &lt;code&gt;in&lt;/code&gt;, &lt;code&gt;out&lt;/code&gt;, &lt;code&gt;ref&lt;/code&gt;, &lt;code&gt;lazy&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;immutable&lt;/code&gt;, &lt;code&gt;shared&lt;/code&gt;, &lt;code&gt;inout&lt;/code&gt; or &lt;code&gt;scope&lt;/code&gt;. For example:</source>
          <target state="translated">매개 변수 저장소 클래스는 &lt;code&gt;in&lt;/code&gt; , &lt;code&gt;out&lt;/code&gt; , &lt;code&gt;ref&lt;/code&gt; , &lt;code&gt;lazy&lt;/code&gt; , &lt;code&gt;const&lt;/code&gt; , &lt;code&gt;immutable&lt;/code&gt; , &lt;code&gt;shared&lt;/code&gt; , &lt;code&gt;inout&lt;/code&gt; 또는 &lt;code&gt;scope&lt;/code&gt; 입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="004e5a295e2f487773343c35732d9eecbd50322f" translate="yes" xml:space="preserve">
          <source>Parameter storage classes are &lt;code&gt;in&lt;/code&gt;, &lt;code&gt;out&lt;/code&gt;, &lt;code&gt;ref&lt;/code&gt;, &lt;code&gt;lazy&lt;/code&gt;, &lt;code&gt;scope&lt;/code&gt; and &lt;code&gt;inout&lt;/code&gt;. Parameters can also take the type constructors &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;immutable&lt;/code&gt; and &lt;code&gt;shared&lt;/code&gt;.</source>
          <target state="translated">매개 변수 저장 클래스는 &lt;code&gt;in&lt;/code&gt; , &lt;code&gt;out&lt;/code&gt; , &lt;code&gt;ref&lt;/code&gt; , &lt;code&gt;lazy&lt;/code&gt; , &lt;code&gt;scope&lt;/code&gt; 및 &lt;code&gt;inout&lt;/code&gt; 입니다. 매개 변수는 유형 생성자 &lt;code&gt;const&lt;/code&gt; , &lt;code&gt;immutable&lt;/code&gt; 및 &lt;code&gt;shared&lt;/code&gt; 를 취할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a71c366db210cd4901a72bb5ff201e1d4ea42b76" translate="yes" xml:space="preserve">
          <source>Parameter to compare with</source>
          <target state="translated">비교할 매개 변수</target>
        </trans-unit>
        <trans-unit id="4bef6f8918d2b6dbb2184051845a0c285876469b" translate="yes" xml:space="preserve">
          <source>Parameter* nth Parameter NULL not found, *pn gets incremented by the number of Parameters</source>
          <target state="translated">매개 변수 * n 번째 매개 변수 NULL을 찾을 수 없습니다. * pn은 매개 변수 수만큼 증가합니다.</target>
        </trans-unit>
        <trans-unit id="acdf35da4c553e1dfc2210109486c37c589cbf86" translate="yes" xml:space="preserve">
          <source>ParameterList</source>
          <target state="translated">ParameterList</target>
        </trans-unit>
        <trans-unit id="dc69505d72ec1dc997f6344835bf90cc49a5fc7d" translate="yes" xml:space="preserve">
          <source>ParameterList &lt;code&gt;pl&lt;/code&gt;</source>
          <target state="translated">파라미터 &lt;code&gt;pl&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="e23226b56e57669c7eee387e75bb0eeb4eacb099" translate="yes" xml:space="preserve">
          <source>Parameters are always pushed as multiples of 4 bytes, rounding upwards, so the stack is always aligned on 4 byte boundaries. They are pushed most significant first. &lt;b&gt;out&lt;/b&gt; and &lt;b&gt;ref&lt;/b&gt; are passed as pointers. Static arrays are passed as pointers to their first element. On Windows, a real is pushed as a 10 byte quantity, a creal is pushed as a 20 byte quantity. On Linux, a real is pushed as a 12 byte quantity, a creal is pushed as two 12 byte quantities. The extra two bytes of pad occupy the &amp;lsquo;most significant&amp;rsquo; position.</source>
          <target state="translated">매개 변수는 항상 4 바이트의 배수로 푸시되어 위쪽으로 반올림되므로 스택은 항상 4 바이트 경계에 정렬됩니다. 그들은 가장 중요하게 먼저 추진됩니다. &lt;b&gt;out&lt;/b&gt; 과 &lt;b&gt;ref&lt;/b&gt; 는 포인터로 전달됩니다. 정적 배열은 첫 번째 요소에 대한 포인터로 전달됩니다. Windows에서는 실수가 10 바이트 수량으로 푸시되고, creal은 20 바이트 수량으로 푸시됩니다. Linux에서 실제는 12 바이트 수량으로 푸시되고, creal은 2 개의 12 바이트 수량으로 푸시됩니다. 추가 2 바이트의 pad는 '가장 중요한'위치를 차지합니다.</target>
        </trans-unit>
        <trans-unit id="2788d7232604fa7de143f891d6677fee828b587d" translate="yes" xml:space="preserve">
          <source>Parameters for the generator.</source>
          <target state="translated">발전기에 대한 매개 변수.</target>
        </trans-unit>
        <trans-unit id="d306b7545fffdce649df065d88dd5bff37d729ec" translate="yes" xml:space="preserve">
          <source>Parameters marked as &lt;code&gt;ref return scope&lt;/code&gt; come in two forms:</source>
          <target state="translated">&lt;code&gt;ref return scope&lt;/code&gt; 로 표시된 매개 변수 는 두 가지 형태로 나타납니다.</target>
        </trans-unit>
        <trans-unit id="9cbfd0370d2df7813205bb7b748f4a1db07a858e" translate="yes" xml:space="preserve">
          <source>Parameters marked as &lt;code&gt;return scope&lt;/code&gt; that contain indirections can only escape those indirections via the function's return value.</source>
          <target state="translated">간접 &lt;code&gt;return scope&lt;/code&gt; 를 포함하는 반환 범위 로 표시된 매개 변수 는 함수의 반환 값을 통해서만 해당 간접 경로를 이스케이프 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="502a49319f9747d485d0e90ac781bf4a89a3c3b9" translate="yes" xml:space="preserve">
          <source>Parameters passed to SQL geom function</source>
          <target state="translated">SQL geom 함수에 전달 된 매개 변수</target>
        </trans-unit>
        <trans-unit id="25ba1dff4c429f0d3704cf2f68f66eb3b3ee6f38" translate="yes" xml:space="preserve">
          <source>Parameters that will be used to call &lt;code&gt;Hook&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Hook&lt;/code&gt; 를 호출하는 데 사용될 매개 변수</target>
        </trans-unit>
        <trans-unit id="069dcf15e5fa7ccfab22c19c69c59b0dc2aac4bf" translate="yes" xml:space="preserve">
          <source>Parameters!Hook &lt;code&gt;parameters&lt;/code&gt;</source>
          <target state="translated">매개 변수! 후크 &lt;code&gt;parameters&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="381c775599d6e4185d4410725809e360928357cd" translate="yes" xml:space="preserve">
          <source>Parameters:</source>
          <target state="translated">Parameters:</target>
        </trans-unit>
        <trans-unit id="dc124689c7040d627a2c6490eec999443990ba30" translate="yes" xml:space="preserve">
          <source>Params</source>
          <target state="translated">Params</target>
        </trans-unit>
        <trans-unit id="4ed743af9079012d0a99ea8273ea7148ae91ca44" translate="yes" xml:space="preserve">
          <source>Parent allocator. For construction from stateless allocators, use their &lt;code&gt;instance&lt;/code&gt; static member.</source>
          <target state="translated">부모 할당 자. 상태 비 할당 할당 자에서 생성하려면 &lt;code&gt;instance&lt;/code&gt; 정적 멤버를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="d4de297e82ffd6596306e4e19bbc9ab418447bf3" translate="yes" xml:space="preserve">
          <source>Parent in hierarchy</source>
          <target state="translated">계층 구조의 부모</target>
        </trans-unit>
        <trans-unit id="a02d47ba7fa60fd2ab7f1a415fe78a36422c1536" translate="yes" xml:space="preserve">
          <source>ParentAllocator</source>
          <target state="translated">ParentAllocator</target>
        </trans-unit>
        <trans-unit id="5208ea3f897cc37caf351c89b3fed673268fa9dc" translate="yes" xml:space="preserve">
          <source>ParentAllocator &lt;code&gt;parent&lt;/code&gt;</source>
          <target state="translated">ParentAllocator &lt;code&gt;parent&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b0ef7ffe567a6538a14ef66b4087f755c7083c14" translate="yes" xml:space="preserve">
          <source>ParentAllocator &lt;strong id=&quot;parent&quot;&gt;parent&lt;/strong&gt;;</source>
          <target state="translated">ParentAllocator &lt;strong id=&quot;parent&quot;&gt;부모&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="20cf2e4a28aece4982d86333c6a7c89937b5f638" translate="yes" xml:space="preserve">
          <source>Parse a Type or an Expression</source>
          <target state="translated">형식 또는 식 구문 분석</target>
        </trans-unit>
        <trans-unit id="0e5ba08ab31df24d5fcda076622754be8a9e95a4" translate="yes" xml:space="preserve">
          <source>Parse a UUID from its canonical string form. An UUID in its canonical form looks like this: 8ab3060e-2cba-4f23-b74c-b52db3bdfb46</source>
          <target state="translated">표준 문자열 형식에서 UUID를 구문 분석하십시오. 표준 형식의 UUID는 다음과 같습니다. 8ab3060e-2cba-4f23-b74c-b52db3bdfb46</target>
        </trans-unit>
        <trans-unit id="b51f894038d0008dfbaa74d81a6b8df2bd125491" translate="yes" xml:space="preserve">
          <source>Parse a module from a string.</source>
          <target state="translated">문자열에서 모듈을 구문 분석하십시오.</target>
        </trans-unit>
        <trans-unit id="b116297c1a492c7acb3eb37d11ee586ead05b0ff" translate="yes" xml:space="preserve">
          <source>Parse an IPv4 address string in the dotted-decimal form</source>
          <target state="translated">점 분리 십진수 형식으로 IPv4 주소 문자열을 구문 분석하십시오.</target>
        </trans-unit>
        <trans-unit id="67d488bcba9b3f579efe720c5d6e269019c76b78" translate="yes" xml:space="preserve">
          <source>Parse an IPv6 host address string as described in RFC 2373, and return the address.</source>
          <target state="translated">RFC 2373에 설명 된대로 IPv6 호스트 주소 문자열을 구문 분석하고 주소를 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="0c6ef6ffd6736f6311741aad939e47729e152363" translate="yes" xml:space="preserve">
          <source>Parse an XML element.</source>
          <target state="translated">XML 요소를 구문 분석하십시오.</target>
        </trans-unit>
        <trans-unit id="89da31932d3708e3b7f3503b77f46c37056d3caf" translate="yes" xml:space="preserve">
          <source>Parse and remove command line options from a string array.</source>
          <target state="translated">문자열 배열에서 명령 행 옵션을 구문 분석하고 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="e78dfe1951ae384f0bb186772bb44b9d1b41fc31" translate="yes" xml:space="preserve">
          <source>Parse and run semantic analysis on a GccAsmStatement.</source>
          <target state="translated">GccAsmStatement에서 의미 분석을 구문 분석하고 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="d6a83ca7d0d7d4947b1a0c1ec0d979ee479df908" translate="yes" xml:space="preserve">
          <source>Parse command line arguments for the last instance of -conf=path.</source>
          <target state="translated">-conf = path의 마지막 인스턴스에 대한 명령 행 인수를 구문 분석하십시오.</target>
        </trans-unit>
        <trans-unit id="3da392b34053839507509c2ba69da833f60b469e" translate="yes" xml:space="preserve">
          <source>Parse command line arguments for the last instance of -m32, -m64 or -m32mscoff to detect the desired architecture.</source>
          <target state="translated">원하는 아키텍처를 감지하려면 -m32, -m64 또는 -m32mscoff의 마지막 인스턴스에 대한 명령 행 인수를 구문 분석하십시오.</target>
        </trans-unit>
        <trans-unit id="16dac6c4d17dadf18f0e007b7333e3ad86945a6a" translate="yes" xml:space="preserve">
          <source>Parse command line arguments.</source>
          <target state="translated">명령 행 인수를 구문 분석하십시오.</target>
        </trans-unit>
        <trans-unit id="76560b479dcbd840417cf615a5d133fe4aeeebec" translate="yes" xml:space="preserve">
          <source>Parse escapes of the form: /c/string/ where c is a single character. Multiple escapes can be separated by whitespace and/or commas.</source>
          <target state="translated">이스케이프 구문 분석 : / c / string / 여기서 c는 단일 문자입니다. 여러 개의 이스케이프는 공백 및 / 또는 쉼표로 구분할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="94b991a478ac4b7e91a93538b4ab0b1f64db972e" translate="yes" xml:space="preserve">
          <source>Parse macros out of Macros: section. Macros are of the form: name1 = value1</source>
          <target state="translated">매크로에서 매크로 구문 분석 : 섹션. 매크로는 다음과 같은 형식입니다. name1 = value1</target>
        </trans-unit>
        <trans-unit id="ae17436f43a711859e6e5f23964c5153a1bfdd8e" translate="yes" xml:space="preserve">
          <source>Parse next paragraph out of *pcomment. Update *pcomment to point past paragraph. Returns NULL if no more paragraphs. If paragraph ends in 'identifier:', then (*pcomment)[0 .. idlen] is the identifier.</source>
          <target state="translated">* pcomment에서 다음 단락을 구문 분석하십시오. 단락을 가리 키도록 * pcomment를 업데이트하십시오. 더 이상 단락이 없으면 NULL을 반환합니다. 단락이 'identifier :'로 끝나면 (* pcomment) [0 .. idlen]이 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="450dba0c77946e5c69e86c55b859d9b21735d00b" translate="yes" xml:space="preserve">
          <source>Parse the given &lt;code&gt;fieldName&lt;/code&gt; and return its corresponding JsonFieldFlags value.</source>
          <target state="translated">제공된 &lt;code&gt;fieldName&lt;/code&gt; 을 구문 분석 하고 해당 JsonFieldFlags 값을 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="7f72edc0b8c3b6f31c38aaff9b2735f81dc8dd93" translate="yes" xml:space="preserve">
          <source>Parse unicode codepoint set from given &lt;code&gt;range&lt;/code&gt; using standard regex syntax '[...]'. The range is advanced skiping over regex set definition. &lt;code&gt;casefold&lt;/code&gt; parameter determines if the set should be casefolded - that is include both lower and upper case versions for any letters in the set.</source>
          <target state="translated">표준 정규식 구문 '[...]'을 사용하여 지정된 &lt;code&gt;range&lt;/code&gt; 에서 설정 한 유니 코드 코드 포인트를 구문 분석하십시오 . 범위는 정규식 세트 정의를 건너 뛰고 고급입니다. &lt;code&gt;casefold&lt;/code&gt; 매개 변수는 세트를 대소 문자로 묶어야하는지 여부를 결정합니다. 즉, 세트의 문자에 대한 소문자 및 대문자 버전이 모두 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="a01a2b8150c64549e9cd4c96ee16b8a26bcdaaf2" translate="yes" xml:space="preserve">
          <source>ParserHandler[string] &lt;strong id=&quot;onStartTag&quot;&gt;onStartTag&lt;/strong&gt;;</source>
          <target state="translated">파서 핸들러 [문자열] &lt;strong id=&quot;onStartTag&quot;&gt;onStartTag&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="8b0d0e766dced46908a81c9cd127077bfd46fd30" translate="yes" xml:space="preserve">
          <source>Parses a &lt;code&gt;dmd.conf&lt;/code&gt; or &lt;code&gt;ldc2.conf&lt;/code&gt; config file and returns defined import paths.</source>
          <target state="translated">&lt;code&gt;dmd.conf&lt;/code&gt; 또는 &lt;code&gt;ldc2.conf&lt;/code&gt; 구성 파일을 구문 분석하고 정의 된 가져 오기 경로를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f512da601d22b0ee2b2cf1c48af79181f827811e" translate="yes" xml:space="preserve">
          <source>Parses a character &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; to an integral value.</source>
          <target state="translated">문자 &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;입력 범위&lt;/a&gt; 를 정수 값으로 구문 분석 합니다.</target>
        </trans-unit>
        <trans-unit id="2fd2971a74ccde0fbdc27f87fc034b74ba2c4cde" translate="yes" xml:space="preserve">
          <source>Parses a character range to a floating point number.</source>
          <target state="translated">문자 범위를 부동 소수점 숫자로 구문 분석합니다.</target>
        </trans-unit>
        <trans-unit id="9e8db731dd580734da1b87439d32c23c6c0b87c3" translate="yes" xml:space="preserve">
          <source>Parses a serialized string and returns a tree of JSON values.</source>
          <target state="translated">직렬화 된 문자열을 구문 분석하고 JSON 값의 트리를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="010c8d1e4fe323ec58d09feb50b1819dc73f74ee" translate="yes" xml:space="preserve">
          <source>Parses an array from a string given the left bracket (default &lt;code&gt; '['&lt;/code&gt;), right bracket (default &lt;code&gt;']'&lt;/code&gt;), and element separator (by default &lt;code&gt;','&lt;/code&gt;). A trailing separator is allowed.</source>
          <target state="translated">왼쪽 대괄호 (기본 &lt;code&gt; '['&lt;/code&gt; ), 오른쪽 대괄호 (기본 &lt;code&gt;']'&lt;/code&gt; ) 및 요소 구분 기호 (기본적으로 &lt;code&gt;','&lt;/code&gt; )가 지정된 문자열에서 배열을 구문 분석합니다 . 후행 구분 기호가 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="fea81b03a9b6108256fd6dbd49ffa4e506987c1b" translate="yes" xml:space="preserve">
          <source>Parses an associative array from a string given the left bracket (default &lt;code&gt; '['&lt;/code&gt;), right bracket (default &lt;code&gt;']'&lt;/code&gt;), key-value separator (default &lt;code&gt; ':'&lt;/code&gt;), and element seprator (by default &lt;code&gt;','&lt;/code&gt;).</source>
          <target state="translated">왼쪽 대괄호 (기본값 &lt;code&gt; '['&lt;/code&gt; ), 오른쪽 대괄호 (기본 &lt;code&gt;']'&lt;/code&gt; ), 키-값 구분 기호 (기본값 &lt;code&gt; ':'&lt;/code&gt; ) 및 요소 구분자 (기본적으로 &lt;code&gt;','&lt;/code&gt; )가 지정된 문자열에서 연관 배열을 구문 분석합니다 .</target>
        </trans-unit>
        <trans-unit id="29a5987ba0d6709de3c0fabafe685ca0830538a2" translate="yes" xml:space="preserve">
          <source>Parses an environment variable containing command-line flags and append them to &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">명령 행 플래그를 포함하는 환경 변수를 구문 분석하여 &lt;code&gt;args&lt;/code&gt; 에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="7294d33710169103141018bfcb0ee5ad3daa81e2" translate="yes" xml:space="preserve">
          <source>Parsing</source>
          <target state="translated">Parsing</target>
        </trans-unit>
        <trans-unit id="01fb58e60a8182fb22f2e27607c68467bfc3bdb1" translate="yes" xml:space="preserve">
          <source>Parsing - documentation comments are associated with specific declarations and combined.</source>
          <target state="translated">구문 분석-문서 주석은 특정 선언과 연관되어 결합됩니다.</target>
        </trans-unit>
        <trans-unit id="671420d39349223d076271ea629f4c237238047b" translate="yes" xml:space="preserve">
          <source>Parsing UUIDs</source>
          <target state="translated">UUID 파싱</target>
        </trans-unit>
        <trans-unit id="c3a20404291f5cb0bb0fa13bb84a38c285e4f8ae" translate="yes" xml:space="preserve">
          <source>Parsing a character range to &lt;code&gt;typeof(null)&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt; if the range spells &lt;code&gt;&quot;null&quot;&lt;/code&gt;. This function is case insensitive.</source>
          <target state="translated">문자 범위를 &lt;code&gt;typeof(null)&lt;/code&gt; 로 구문 분석하면 범위가 &lt;code&gt;&quot;null&quot;&lt;/code&gt; 인 경우 &lt;code&gt;null&lt;/code&gt; 리턴합니다 . 이 기능은 대소 문자를 구분하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="acb8728b53850d44b474cf8209395699a79a166a" translate="yes" xml:space="preserve">
          <source>Parsing of command-line arguments.</source>
          <target state="translated">명령 줄 인수 구문 분석</target>
        </trans-unit>
        <trans-unit id="2e18e65dcec5e7545a8602e57cc211ae0081392b" translate="yes" xml:space="preserve">
          <source>Parsing one character off a range returns the first element and calls &lt;code&gt;popFront&lt;/code&gt;.</source>
          <target state="translated">한 문자를 범위 밖으로 파싱하면 첫 번째 요소가 반환되고 &lt;code&gt;popFront&lt;/code&gt; 가 호출 됩니다 .</target>
        </trans-unit>
        <trans-unit id="2dad0714188f44cd45907047ae561e99a63a08c9" translate="yes" xml:space="preserve">
          <source>Parsing will continue until the end of the current element. Any items encountered for which a handler has been registered will invoke that handler.</source>
          <target state="translated">현재 요소가 끝날 때까지 구문 분석이 계속됩니다. 핸들러가 등록 된 모든 항목은 해당 핸들러를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="a46e9f47f04b2771004f9c356a6d8ef5ab1cf5ec" translate="yes" xml:space="preserve">
          <source>Part of the compiler implementation of the &lt;a href=&quot;http://www.dlang.org&quot;&gt;D programming language&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://www.dlang.org&quot;&gt;D 프로그래밍 언어&lt;/a&gt; 의 컴파일러 구현의 일부 .</target>
        </trans-unit>
        <trans-unit id="2c7d58db405da47a0ea70ef1084b0193adb3b219" translate="yes" xml:space="preserve">
          <source>Partial initialization is done for types with indirections, for preservation of memory safety. Note that elements will only be initialized to 0, but not necessarily the element type's &lt;code&gt;.init&lt;/code&gt;.</source>
          <target state="translated">메모리 안전을 유지하기 위해 간접적 인 유형의 경우 부분 초기화가 수행됩니다. 요소는 0으로 만 초기화되지만 요소 유형의 &lt;code&gt;.init&lt;/code&gt; 일 필요는 없습니다 .</target>
        </trans-unit>
        <trans-unit id="e5c165ff2135d9bd04e4f69754b1ce23000c2a39" translate="yes" xml:space="preserve">
          <source>Partial instantiation</source>
          <target state="translated">부분 인스턴스화</target>
        </trans-unit>
        <trans-unit id="552793e4d3491d3b039b2e499862419408241568" translate="yes" xml:space="preserve">
          <source>Partially shuffles the elements of &lt;code&gt;r&lt;/code&gt; such that upon returning &lt;code&gt;r[0 .. n]&lt;/code&gt; is a random subset of &lt;code&gt;r&lt;/code&gt; and is randomly ordered. &lt;code&gt;r[n .. r.length]&lt;/code&gt; will contain the elements not in &lt;code&gt;r[0 .. n]&lt;/code&gt;. These will be in an undefined order, but will not be random in the sense that their order after &lt;code&gt;partialShuffle&lt;/code&gt; returns will not be independent of their order before &lt;code&gt;partialShuffle&lt;/code&gt; was called.</source>
          <target state="translated">일부의 요소 셔플 &lt;code&gt;r&lt;/code&gt; 등 돌아온 즉 &lt;code&gt;r[0 .. n]&lt;/code&gt; 무작위 서브 세트 &lt;code&gt;r&lt;/code&gt; 무작위 정렬된다. &lt;code&gt;r[n .. r.length]&lt;/code&gt; 는 &lt;code&gt;r[0 .. n]&lt;/code&gt; 없는 요소를 포함합니다 . 이것들은 정의되지 않은 순서이지만, &lt;code&gt;partialShuffle&lt;/code&gt; 반환 후의 순서 는 &lt;code&gt;partialShuffle&lt;/code&gt; 이 호출 되기 전에 순서와 무관 하다는 점에서 무작위 가 아닙니다 .</target>
        </trans-unit>
        <trans-unit id="6deb7e3f7b32019949732214ec87ba853c993108" translate="yes" xml:space="preserve">
          <source>Particular keys in an associative array can be removed with the &lt;code&gt;remove&lt;/code&gt; function:</source>
          <target state="translated">연관 배열의 특정 키는 &lt;code&gt;remove&lt;/code&gt; 기능 으로 제거 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4d8d29c37cfa9d2ee47bae5429be39d9f989f27b" translate="yes" xml:space="preserve">
          <source>Partitioning</source>
          <target state="translated">Partitioning</target>
        </trans-unit>
        <trans-unit id="b04b13ef82480fe65f509b932faa4e4d3aa51b27" translate="yes" xml:space="preserve">
          <source>Partitions &lt;code&gt;r&lt;/code&gt; around &lt;code&gt;pivot&lt;/code&gt; using comparison function &lt;code&gt;less&lt;/code&gt;, algorithm akin to &lt;a href=&quot;https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme&quot;&gt;Hoare partition&lt;/a&gt;. Specifically, permutes elements of &lt;code&gt;r&lt;/code&gt; and returns an index &lt;code&gt;k &amp;lt; r.length&lt;/code&gt; such that:</source>
          <target state="translated">비교 기능을 사용 &lt;code&gt;less&lt;/code&gt; &lt;code&gt;pivot&lt;/code&gt; 주변의 파티션 &lt;code&gt;r&lt;/code&gt; 은 &lt;a href=&quot;https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme&quot;&gt;Hoare 파티션&lt;/a&gt; 과 유사한 알고리즘을 사용 합니다 . 특히, &lt;code&gt;r&lt;/code&gt; 의 요소를 치환 하고 다음과 같이 인덱스 &lt;code&gt;k &amp;lt; r.length&lt;/code&gt; 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="f79755d9888b3272c0008f26ee250ed68d156755" translate="yes" xml:space="preserve">
          <source>Partitions a range according to a binary predicate in three parts (less than, equal, greater than the given pivot). Pivot is not given as an index, but instead as an element independent from the range's content.</source>
          <target state="translated">이진 술어에 따라 범위를 세 부분으로 나눕니다 (주어진 피벗보다 작거나 같음). 피벗은 인덱스가 아닌 범위의 내용과 독립적 인 요소로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="93b7b53fcf2afd03f0b9c28b1730d679f111ebc2" translate="yes" xml:space="preserve">
          <source>Partitions a range according to a binary predicate in two parts: less than or equal, and greater than or equal to the given pivot, passed as an index in the range.</source>
          <target state="translated">범위의 인덱스로 전달 된 주어진 피벗보다 작거나 같은 두 가지 부분으로 이진 조건 자에 따라 범위를 분할합니다.</target>
        </trans-unit>
        <trans-unit id="ac2a297ca539adc310f95ab7029aa05a0e235c5d" translate="yes" xml:space="preserve">
          <source>Partitions a range according to a unary predicate.</source>
          <target state="translated">단항 술어에 따라 범위를 분할합니다.</target>
        </trans-unit>
        <trans-unit id="f25bf3d69c2aa505fafd2a2553231a4df6e4f1b8" translate="yes" xml:space="preserve">
          <source>Partitions a range in two using the given &lt;code&gt;predicate&lt;/code&gt;. Specifically, reorders the range &lt;code&gt;r = [left, right)&lt;/code&gt; using &lt;code&gt;swap&lt;/code&gt; such that all elements &lt;code&gt;i&lt;/code&gt; for which &lt;code&gt;predicate(i)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; come before all elements &lt;code&gt;j&lt;/code&gt; for which &lt;code&gt;predicate(j)&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;predicate&lt;/code&gt; 사용하여 범위를 2로 분할합니다 . 구체적으로, 범위 재정렬 &lt;code&gt;r = [left, right)&lt;/code&gt; 하여 &lt;code&gt;swap&lt;/code&gt; 이러한 모든 요소 즉 &lt;code&gt;i&lt;/code&gt; 하는 &lt;code&gt;predicate(i)&lt;/code&gt; 인 &lt;code&gt;true&lt;/code&gt; 모든 요소 앞에 오는 &lt;code&gt;j&lt;/code&gt; 하는 &lt;code&gt;predicate(j)&lt;/code&gt; 반환 &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0f75fc950076ea23262b37e57dc6555e4d8852e7" translate="yes" xml:space="preserve">
          <source>Pass a long set to 1 to get the date of the requested document (if possible)! Pass a zero to shut it off.</source>
          <target state="translated">요청한 문서의 날짜를 얻으려면 long을 1로 전달하십시오 (가능한 경우)! 종료하려면 0을 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="3f5674a1b58ad7659cf778d1abbfee0c9e1ed868" translate="yes" xml:space="preserve">
          <source>Pass a pointer to string of the output using full variable-replacement as described elsewhere.</source>
          <target state="translated">다른 곳에서 설명한대로 전체 변수 교체를 사용하여 출력 문자열에 포인터를 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="52eba02333e380244052de14b336d30251cdb44e" translate="yes" xml:space="preserve">
          <source>Pass a range by reference. Both the original range and the RefRange will always have the exact same elements. Any operation done on one will affect the other.</source>
          <target state="translated">참조로 범위를 전달하십시오. 원래 범위와 RefRange 모두 항상 동일한 요소를 갖습니다. 하나의 작업은 다른 작업에 영향을 미칩니다.</target>
        </trans-unit>
        <trans-unit id="ac35e3c93500b335f934dc933300ae8ca4d024c6" translate="yes" xml:space="preserve">
          <source>Pass unrecognized arguments through</source>
          <target state="translated">인식 할 수없는 인수를 통해 전달</target>
        </trans-unit>
        <trans-unit id="44bd5cb378ee1ee4f1228ce102d89ccec6984f72" translate="yes" xml:space="preserve">
          <source>Passing &lt;code&gt;NullAllocator&lt;/code&gt; as &lt;code&gt;ParentAllocator&lt;/code&gt; (the default) means user code manages allocation of the memory block from the outside; in that case &lt;code&gt;BitmappedBlock&lt;/code&gt; must be constructed with a &lt;code&gt;ubyte[]&lt;/code&gt; preallocated block and has no responsibility regarding the lifetime of its support underlying storage. If another allocator type is passed, &lt;code&gt;BitmappedBlock&lt;/code&gt; defines a destructor that uses the parent allocator to release the memory block. That makes the combination of &lt;code&gt;AllocatorList&lt;/code&gt;, &lt;code&gt;BitmappedBlock&lt;/code&gt;, and a back-end allocator such as &lt;code&gt;MmapAllocator&lt;/code&gt; a simple and scalable solution for memory allocation.</source>
          <target state="translated">&lt;code&gt;NullAllocator&lt;/code&gt; 를 &lt;code&gt;ParentAllocator&lt;/code&gt; (기본값) 로 전달하면 사용자 코드가 외부에서 메모리 블록 할당을 관리합니다. 이 경우 &lt;code&gt;BitmappedBlock&lt;/code&gt; 은 &lt;code&gt;ubyte[]&lt;/code&gt; 사전 할당 블록 으로 구성되어야하며 지원 기본 스토리지의 수명에 대해 책임을지지 않습니다. 다른 할당 자 유형이 전달되면 &lt;code&gt;BitmappedBlock&lt;/code&gt; 은 부모 할당자를 사용하여 메모리 블록을 해제하는 소멸자를 정의합니다. 따라서 &lt;code&gt;AllocatorList&lt;/code&gt; , &lt;code&gt;BitmappedBlock&lt;/code&gt; 및 &lt;code&gt;MmapAllocator&lt;/code&gt; 와 같은 백엔드 할당 자의 조합은 메모리 할당을위한 간단하고 확장 가능한 솔루션입니다.</target>
        </trans-unit>
        <trans-unit id="5d0b17b99c1c31f95b843582b717ee3647838d67" translate="yes" xml:space="preserve">
          <source>Passing D Array Arguments to C Functions</source>
          <target state="translated">C 함수에 D 배열 인수 전달</target>
        </trans-unit>
        <trans-unit id="eab9975f41d5c74a2370c8f84743e69843a5e474" translate="yes" xml:space="preserve">
          <source>Passing unrecognized options through</source>
          <target state="translated">인식 할 수없는 옵션을 통해 전달</target>
        </trans-unit>
        <trans-unit id="245e083e1de3b281962953ef4c8bba890cc16972" translate="yes" xml:space="preserve">
          <source>Path separator string. A colon under POSIX, a semicolon under Windows.</source>
          <target state="translated">경로 구분자 문자열. POSIX에서는 콜론, Windows에서는 세미콜론</target>
        </trans-unit>
        <trans-unit id="8a0630dfd701136ea97bb93baa3f48f2f71f6dea" translate="yes" xml:space="preserve">
          <source>Path to append the extension to</source>
          <target state="translated">확장자를 추가 할 경로</target>
        </trans-unit>
        <trans-unit id="7879e48604fb8a9352e65e81497109347fdf13ce" translate="yes" xml:space="preserve">
          <source>Path to append to</source>
          <target state="translated">추가 할 경로</target>
        </trans-unit>
        <trans-unit id="871b729292ecc14b245e2db0bdadacebeffad0e9" translate="yes" xml:space="preserve">
          <source>Path to escape</source>
          <target state="translated">탈출로</target>
        </trans-unit>
        <trans-unit id="ee9a42a975678be8d750fa1e306adc2573e3c20e" translate="yes" xml:space="preserve">
          <source>Path to file</source>
          <target state="translated">파일 경로</target>
        </trans-unit>
        <trans-unit id="d5c2c7b442d98245aa2f83265a1b4bf791a5b2fe" translate="yes" xml:space="preserve">
          <source>Path to the output file. Empty means stdout.</source>
          <target state="translated">출력 파일의 경로입니다. 비어 있음은 표준 출력을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="ead499111ecd4dc6ec4cbcffe1b1a34907e01dae" translate="yes" xml:space="preserve">
          <source>Pattern element</source>
          <target state="translated">패턴 요소</target>
        </trans-unit>
        <trans-unit id="bc76225c74f5799424ec5c0bcc1a8bb1758d6b49" translate="yes" xml:space="preserve">
          <source>Pattern syntax</source>
          <target state="translated">패턴 구문</target>
        </trans-unit>
        <trans-unit id="ae34ebfd21aa731bd17545dfb65562d51ef9cefc" translate="yes" xml:space="preserve">
          <source>Pattern_Syntax</source>
          <target state="translated">Pattern_Syntax</target>
        </trans-unit>
        <trans-unit id="fa2b00d38cc48111285d15ff11e6749be9586681" translate="yes" xml:space="preserve">
          <source>Pattern_White_Space</source>
          <target state="translated">Pattern_White_Space</target>
        </trans-unit>
        <trans-unit id="2773f73c1260fdec728435d456edb08be91eaf8e" translate="yes" xml:space="preserve">
          <source>Pausing and continuing transfers.</source>
          <target state="translated">전송 일시 중지 및 계속.</target>
        </trans-unit>
        <trans-unit id="a9825d613366c20e6809b1ce3e60e5a34a14dd1a" translate="yes" xml:space="preserve">
          <source>Pavel &quot;EvilOne&quot; Minayev, Alex R&amp;oslash;nne Petersen, Johannes Pfau</source>
          <target state="translated">Pavel &quot;EvilOne&quot;Minayev, Alex R&amp;oslash;nne Petersen, 요하네스 푸우</target>
        </trans-unit>
        <trans-unit id="fa22cd0363497002cc358c8b4b6ff84f5941b5c4" translate="yes" xml:space="preserve">
          <source>Pc</source>
          <target state="translated">Pc</target>
        </trans-unit>
        <trans-unit id="76a62826607c85765e35f282cd82db5a3e6bbe06" translate="yes" xml:space="preserve">
          <source>Pd</source>
          <target state="translated">Pd</target>
        </trans-unit>
        <trans-unit id="b5034c4cb6e7781f4f1616341f8f6731b9bca6e2" translate="yes" xml:space="preserve">
          <source>Pe</source>
          <target state="translated">Pe</target>
        </trans-unit>
        <trans-unit id="737b6ba72b87c53c37d0b001c2aa00d7d1551419" translate="yes" xml:space="preserve">
          <source>Peek at the amount of time that the the StopWatch has been running.</source>
          <target state="translated">스톱워치가 실행 된 시간을 들여다보십시오.</target>
        </trans-unit>
        <trans-unit id="ba8e29927006e6152b4f643044adfec962f7e76c" translate="yes" xml:space="preserve">
          <source>Peek at the amount of time which has passed since the stop watch was started.</source>
          <target state="translated">스톱워치가 시작된 이후 경과 한 시간을 들여다보십시오.</target>
        </trans-unit>
        <trans-unit id="c291bbfff282d82d34ba5468ffd4ea28a98b87c3" translate="yes" xml:space="preserve">
          <source>Pentium 4 (Prescott) Opcodes Supported</source>
          <target state="translated">Pentium 4 (Prescott) Opcode 지원</target>
        </trans-unit>
        <trans-unit id="0a5cbdbd4ebf4f323d8c911e71d85e0d86957bd0" translate="yes" xml:space="preserve">
          <source>Pentium 4 Opcodes</source>
          <target state="translated">펜티엄 4 오피 코드</target>
        </trans-unit>
        <trans-unit id="9704c847ebabc174a51703f8d46bb87c126e50e9" translate="yes" xml:space="preserve">
          <source>Per the C99 Standard, extra arguments are ignored.</source>
          <target state="translated">C99 표준에 따라 추가 인수는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="b95531d61182885c855fd4e357f3a17ac6875cfe" translate="yes" xml:space="preserve">
          <source>Per thread record to store thread associated data for garbage collection.</source>
          <target state="translated">가비지 수집을 위해 스레드 관련 데이터를 저장하는 스레드 별 레코드입니다.</target>
        </trans-unit>
        <trans-unit id="03a06ad8bd49d2e4b75d4adff803a56ee9bba6c2" translate="yes" xml:space="preserve">
          <source>Perform &lt;code&gt;static foreach&lt;/code&gt; lowerings that are necessary in order to finally expand the &lt;code&gt;static foreach&lt;/code&gt; using &lt;code&gt;dmd.statementsem.makeTupleForeach&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dmd.statementsem.makeTupleForeach&lt;/code&gt; 를 사용하여 &lt;code&gt;static foreach&lt;/code&gt; 를 최종 확장하기 위해 필요한 &lt;code&gt;static foreach&lt;/code&gt; 하강을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="6881379825244d35d3e8d9a76db4341cbfb7cf3b" translate="yes" xml:space="preserve">
          <source>Perform a http request.</source>
          <target state="translated">http 요청을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="9e8bf93c00f6d0187fa920c5e2e73b433a1a8816" translate="yes" xml:space="preserve">
          <source>Perform a semantic equivalent 2 operations: decoding a &lt;a href=&quot;#Code%20point&quot;&gt;code point&lt;/a&gt; at front of &lt;code&gt;inp&lt;/code&gt; and testing if it belongs to the set of &lt;a href=&quot;#Code%20point&quot;&gt;code points&lt;/a&gt; of this matcher.</source>
          <target state="translated">의미 상 동등한 2 연산을 수행하십시오. &lt;code&gt;inp&lt;/code&gt; 앞의 &lt;a href=&quot;#Code%20point&quot;&gt;코드 포인트&lt;/a&gt; 를 디코딩 하고이 매처 의 &lt;a href=&quot;#Code%20point&quot;&gt;코드 포인트&lt;/a&gt; 세트에 속하는지 테스트하십시오 .</target>
        </trans-unit>
        <trans-unit id="270a7cd4b73a5b4c8e1329fbcbf3a7a8d8f1d4a2" translate="yes" xml:space="preserve">
          <source>Perform buffered I/O.</source>
          <target state="translated">버퍼링 된 I / O를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="3dce937804704adcedb8a3097f48c2d0bc2d294f" translate="yes" xml:space="preserve">
          <source>Perform semantic analysis and CTFE on expressions to produce a string.</source>
          <target state="translated">표현식에서 의미 분석 및 CTFE를 수행하여 문자열을 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="a3329e2a22d0cffbeb60b029314ab72b31e6cebc" translate="yes" xml:space="preserve">
          <source>Perform semantic analysis on InlineAsmStatement.</source>
          <target state="translated">InlineAsmStatement에서 의미 분석을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="9770620faed7403bb8c0ecc06d0e36a7f5251164" translate="yes" xml:space="preserve">
          <source>Perform semantic analysis on a type.</source>
          <target state="translated">유형에 대한 의미 분석을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="a7f660ada612d7566103025f0017720a6ab15950" translate="yes" xml:space="preserve">
          <source>Perform semantic analysis on init.</source>
          <target state="translated">init에서 시맨틱 분석을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="f3bec592477a6e10ca8657fca997d67349936f34" translate="yes" xml:space="preserve">
          <source>Perform semantic() on an array of Expressions.</source>
          <target state="translated">Expression 배열에서 semantic ()을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="d80d3e557db27f6dafd2b8a5e1f5d0b5a1124a0a" translate="yes" xml:space="preserve">
          <source>Perform the &quot;inline copying&quot; of a default argument for a function parameter.</source>
          <target state="translated">함수 매개 변수에 대한 기본 인수의 &quot;인라인 복사&quot;를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="69cc04c0fc19d1f6ca88e58a0f4c875dd2042d44" translate="yes" xml:space="preserve">
          <source>Perform the operation in infinite precision</source>
          <target state="translated">무한정의 작업 수행</target>
        </trans-unit>
        <trans-unit id="dbb33629b27f400be6080e4a52ca1b7eeddba75f" translate="yes" xml:space="preserve">
          <source>Performance is optimized for numbers below ~1000 decimal digits. For X86 machines, highly optimised assembly routines are used.</source>
          <target state="translated">~ 1000 소수 이하의 숫자에 대해 성능이 최적화됩니다. X86 머신의 경우 고도로 최적화 된 조립 루틴이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0fcaad6a9538475080af9cc6d30bbac007d9ec46" translate="yes" xml:space="preserve">
          <source>Performing parallel reductions with an imperative, as opposed to functional, programming style. In this case, it's useful to treat &lt;code&gt;WorkerLocalStorageStorage&lt;/code&gt; as local to each thread for only the parallel portion of an algorithm.</source>
          <target state="translated">기능적인 프로그래밍 스타일과 달리 명령형으로 병렬 축소를 수행합니다. 이 경우 &lt;code&gt;WorkerLocalStorageStorage&lt;/code&gt; 를 알고리즘의 병렬 부분에 대해서만 각 스레드의 로컬로 처리하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="a79e877a4a8d751b334bc1205fab1f501d2da5e7" translate="yes" xml:space="preserve">
          <source>Performs &amp;Omicron;(&lt;code&gt;max(front.length, back.length)&lt;/code&gt;) evaluations of &lt;code&gt;swap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;swap&lt;/code&gt; 의 &amp;Omicron; ( &lt;code&gt;max(front.length, back.length)&lt;/code&gt; ) 평가를 수행 합니다.</target>
        </trans-unit>
        <trans-unit id="27b39dff0e45fd8fe7d05db83b932261b700cb97" translate="yes" xml:space="preserve">
          <source>Performs &amp;Omicron;(&lt;code&gt;r.length&lt;/code&gt;) (if unstable or semistable) or &amp;Omicron;(&lt;code&gt;r.length * log(r.length)&lt;/code&gt;) (if stable) evaluations of &lt;code&gt;less&lt;/code&gt; and &lt;code&gt;swap&lt;/code&gt;. The unstable version computes the minimum possible evaluations of &lt;code&gt;swap&lt;/code&gt; (roughly half of those performed by the semistable version).</source>
          <target state="translated">&lt;code&gt;less&lt;/code&gt; 및 &lt;code&gt;swap&lt;/code&gt; 의 &amp;Omicron; ( &lt;code&gt;r.length&lt;/code&gt; ) (안정적이거나 준 안정적인 경우 ) 또는 &amp;Omicron; ( &lt;code&gt;r.length * log(r.length)&lt;/code&gt; ) (안정적인 경우) 평가를 수행 합니다. 불안정한 버전은 가능한 최소 &lt;code&gt;swap&lt;/code&gt; 평가를 계산합니다 (대략 안정 버전에서 수행 된 것의 거의 절반).</target>
        </trans-unit>
        <trans-unit id="7049fba4f4d6daf9ed4727bd1cf2d991410e1334" translate="yes" xml:space="preserve">
          <source>Performs a &lt;a href=&quot;https://en.wikipedia.org/wiki/Exponential_search&quot;&gt; galloping search algorithm&lt;/a&gt;, i.e. searches with a step that doubles every time, (1, 2, 4, 8, ...) leading to an exponential search schedule (indexes tried are 0, 1, 3, 7, 15, 31, 63,...) Once the search overshoots its target, the remaining interval is searched using binary search. A value is found in &amp;Omicron;(&lt;code&gt;log(n)&lt;/code&gt;) time.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Exponential_search&quot;&gt;급격한 검색 알고리즘을&lt;/a&gt; 수행합니다 . 즉, (1, 2, 4, 8, ...)마다 두 배씩 증가하는 단계로 검색하여 지수 검색 스케줄 (시도 된 색인은 0, 1, 3, 7, 15, 31) , 63, ...) 검색이 대상을 초과하면 이진 검색을 사용하여 나머지 간격을 검색합니다. 값은 &amp;Omicron; ( &lt;code&gt;log(n)&lt;/code&gt; ) 시간에 있습니다.</target>
        </trans-unit>
        <trans-unit id="a4b95a2b7c7b269fa91631feadfef7e99a6021a5" translate="yes" xml:space="preserve">
          <source>Performs a lexicographical comparison on two &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input ranges&lt;/a&gt;. Iterating &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt; in lockstep, &lt;code&gt;cmp&lt;/code&gt; compares each element &lt;code&gt;e1&lt;/code&gt; of &lt;code&gt;r1&lt;/code&gt; with the corresponding element &lt;code&gt;e2&lt;/code&gt; in &lt;code&gt;r2&lt;/code&gt;. If one of the ranges has been finished, &lt;code&gt;cmp&lt;/code&gt; returns a negative value if &lt;code&gt;r1&lt;/code&gt; has fewer elements than &lt;code&gt;r2&lt;/code&gt;, a positive value if &lt;code&gt;r1&lt;/code&gt; has more elements than &lt;code&gt;r2&lt;/code&gt;, and &lt;code&gt;0&lt;/code&gt; if the ranges have the same number of elements.</source>
          <target state="translated">두 &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;입력 범위&lt;/a&gt; 에 대한 사전 사전 비교를 수행 합니다 . 반복 &lt;code&gt;r1&lt;/code&gt; 과 &lt;code&gt;r2&lt;/code&gt; 록 스텝에서, &lt;code&gt;cmp&lt;/code&gt; 각 요소 비교 &lt;code&gt;e1&lt;/code&gt; 의 &lt;code&gt;r1&lt;/code&gt; 대응하는 요소와 &lt;code&gt;e2&lt;/code&gt; 에서 &lt;code&gt;r2&lt;/code&gt; . 범위 중 하나가 종료 한 경우, &lt;code&gt;cmp&lt;/code&gt; 경우 음의 값을 반환 &lt;code&gt;r1&lt;/code&gt; 보다 적은 요소를 갖고 &lt;code&gt;r2&lt;/code&gt; , 경우에 양의 값 &lt;code&gt;r1&lt;/code&gt; 보다 많은 요소가 갖는 &lt;code&gt;r2&lt;/code&gt; , 그리고 &lt;code&gt;0&lt;/code&gt; 범위가 같은 수의 요소가있는 경우를.</target>
        </trans-unit>
        <trans-unit id="932aa4f60fe6023c69792e4a248e389ddc01276a" translate="yes" xml:space="preserve">
          <source>Performs either compare-and-set or compare-and-swap (or exchange).</source>
          <target state="translated">비교 및 설정 또는 비교 및 ​​교환 (또는 교환)을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="125bedfc6490366279c7f8e529677bc639cfff43" translate="yes" xml:space="preserve">
          <source>Performs read-modify-write operation at specified index into the container.</source>
          <target state="translated">지정된 인덱스에서 컨테이너에 대한 읽기-수정-쓰기 작업을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="a3373eec995027ee6a7bacd42ba54d403267caec" translate="yes" xml:space="preserve">
          <source>Performs semantic on TemplateParameter AST nodes.</source>
          <target state="translated">TemplateParameter AST 노드에서 시맨틱을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="2c7b10877a602224a5ce8fabad8229c99d42b2b7" translate="yes" xml:space="preserve">
          <source>Performs the binary operation 'op' on val using 'mod' as the modifier.</source>
          <target state="translated">'mod'를 수정 자로 사용하여 val에서 'op'이진 연산을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="8fb9c991fb0173deed6c7ec1a030027befb93171" translate="yes" xml:space="preserve">
          <source>Performs the ftp request as it has been configured.</source>
          <target state="translated">ftp 요청이 구성된대로 수행합니다.</target>
        </trans-unit>
        <trans-unit id="49a882c0eaebe773b4d43b5c1340a25d26b54f1a" translate="yes" xml:space="preserve">
          <source>Performs the lookup of set of &lt;a href=&quot;#Code%20point&quot;&gt;code points&lt;/a&gt; with compile-time correctness checking. This short-cut version combines 3 searches: across blocks, scripts, and common binary properties.</source>
          <target state="translated">컴파일 타임 정확성 검사를 통해 &lt;a href=&quot;#Code%20point&quot;&gt;코드 포인트&lt;/a&gt; 세트의 조회를 수행합니다 . 이 바로 가기 버전은 블록, 스크립트 및 공통 이진 속성에 대한 3 가지 검색을 결합합니다.</target>
        </trans-unit>
        <trans-unit id="adceff9860a6c21999e0bdf69ad270c04b8f427c" translate="yes" xml:space="preserve">
          <source>Performs the request as configured.</source>
          <target state="translated">구성된대로 요청을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="45a792110f052e24be5dc1e7a32ab8481f32dde5" translate="yes" xml:space="preserve">
          <source>Performs the same task as &lt;a href=&quot;#buildPath&quot;&gt;&lt;code&gt;buildPath&lt;/code&gt;&lt;/a&gt;, while at the same time resolving current/parent directory symbols (&lt;code&gt;&quot;.&quot;&lt;/code&gt; and &lt;code&gt;&quot;..&quot;&lt;/code&gt;) and removing superfluous directory separators. It will return &quot;.&quot; if the path leads to the starting directory. On Windows, slashes are replaced with backslashes.</source>
          <target state="translated">현재 / 부모 디렉토리 기호 ( &lt;code&gt;&quot;.&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;..&quot;&lt;/code&gt; )를 해결하고 불필요한 디렉토리 구분 기호를 제거 하는 동시에 &lt;a href=&quot;#buildPath&quot;&gt; &lt;code&gt;buildPath&lt;/code&gt; &lt;/a&gt; 와 동일한 작업을 수행합니다 . &quot;.&quot;를 반환합니다. 경로가 시작 디렉토리로 연결되는 경우 Windows에서 슬래시는 백 슬래시로 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="2d95c20aebc021d83537913ab5e8c2caaa3c4c7f" translate="yes" xml:space="preserve">
          <source>Performs tilde expansion in paths on POSIX systems. On Windows, this function does nothing.</source>
          <target state="translated">POSIX 시스템에서 경로에서 물결 확장을 수행합니다. Windows에서이 기능은 아무 것도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1a08bc377528194036561375e26f9d9fa5984f3c" translate="yes" xml:space="preserve">
          <source>Period is &lt;code&gt;2 ^^ nbits - 1&lt;/code&gt; except for a legacy 192-bit uint version (see note below).</source>
          <target state="translated">주기는 &lt;code&gt;2 ^^ nbits - 1&lt;/code&gt; 입니다 (레거시 192 비트 uint 버전을 제외하고 (아래 참고 참조).</target>
        </trans-unit>
        <trans-unit id="171c5560fc34e8a8a4af348c5e5f4ecdb2765fc4" translate="yes" xml:space="preserve">
          <source>Permission used when creating new files and directories on the remote server for protocols that support it, SFTP/SCP/FILE</source>
          <target state="translated">SFTP / SCP / FILE을 지원하는 프로토콜에 대해 원격 서버에서 새 파일 및 디렉토리를 작성할 때 사용되는 권한</target>
        </trans-unit>
        <trans-unit id="20240c4f510895ba885486432888b65c0241d82d" translate="yes" xml:space="preserve">
          <source>PermissiveVisitor overrides all the visit methods in the parent class that assert(0) in order to facilitate the traversal of subsets of the AST. It does not implement any visiting logic.</source>
          <target state="translated">PermissiveVisitor는 AST 서브 세트의 순회를 용이하게하기 위해 assert (0) 인 상위 클래스의 모든 방문 메소드를 대체합니다. 방문 로직을 구현하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f4f192f4cb2e3ed05cc4e9839c0ce15a34e4dec6" translate="yes" xml:space="preserve">
          <source>Permutations!Range &lt;strong id=&quot;permutations&quot;&gt;permutations&lt;/strong&gt;(Range)(Range r)</source>
          <target state="translated">순열! 범위 &lt;strong id=&quot;permutations&quot;&gt;순열&lt;/strong&gt; (범위) (범위 r)</target>
        </trans-unit>
        <trans-unit id="9814ff21659d24b67c90ccf4b1670f3530e3e4ea" translate="yes" xml:space="preserve">
          <source>Permutes &lt;code&gt;range&lt;/code&gt; in-place to the next lexicographically greater</source>
          <target state="translated">순열 &lt;code&gt;range&lt;/code&gt; 는 다음 어휘 적으로 더 큰 범위 입니다.</target>
        </trans-unit>
        <trans-unit id="47d68c1d1d8f096dc79c29a375f3002be6a50e66" translate="yes" xml:space="preserve">
          <source>Permutes &lt;code&gt;range&lt;/code&gt; in-place to the next lexicographically greater permutation.</source>
          <target state="translated">순열의 &lt;code&gt;range&lt;/code&gt; 는 다음 어휘 적으로 큰 순열입니다.</target>
        </trans-unit>
        <trans-unit id="bc4059a2c730084630f46b548fe60ee6f2f7260d" translate="yes" xml:space="preserve">
          <source>Permutes &lt;code&gt;range&lt;/code&gt; into the &lt;code&gt;perm&lt;/code&gt; permutation. The algorithm has a constant runtime complexity with respect to the number of permutations created. Due to the number of unique values of &lt;code&gt;ulong&lt;/code&gt; only the first 21 elements of &lt;code&gt;range&lt;/code&gt; can be permuted. The rest of the range will therefore not be permuted. This algorithm uses the &lt;a href=&quot;http://en.wikipedia.org/wiki/Lehmer_code&quot;&gt;Lehmer Code&lt;/a&gt;.</source>
          <target state="translated">순서를 무작위로 바꾸어 넣은 &lt;code&gt;range&lt;/code&gt; 에 &lt;code&gt;perm&lt;/code&gt; 순열. 이 알고리즘은 생성 된 순열 수와 관련하여 런타임 복잡성이 일정합니다. &lt;code&gt;ulong&lt;/code&gt; 의 고유 한 값의 수로 인해 &lt;code&gt;range&lt;/code&gt; 의 처음 21 개 요소 만 순열 될 수 있습니다. 따라서 나머지 범위는 변경되지 않습니다. 이 알고리즘은 &lt;a href=&quot;http://en.wikipedia.org/wiki/Lehmer_code&quot;&gt;Lehmer 코드를&lt;/a&gt; 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="a622b04f0075ee8f74f7b83a671a79ee4cbd7fc0" translate="yes" xml:space="preserve">
          <source>Permutes &lt;code&gt;range&lt;/code&gt; into the &lt;code&gt;perm&lt;/code&gt; permutation. The algorithm has a constant runtime complexity with respect to the number of permutations created. Due to the number of unique values of &lt;code&gt;ulong&lt;/code&gt; only the first 21 elements of &lt;code&gt;range&lt;/code&gt; can be permuted. The rest of the range will therefore not be permuted. This algorithm uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/Lehmer_code&quot;&gt;Lehmer Code&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d6660e437b349bdcacf2f3e77734577c86a86d" translate="yes" xml:space="preserve">
          <source>Pf</source>
          <target state="translated">Pf</target>
        </trans-unit>
        <trans-unit id="0b8800ca3abc78cb24f838a046a98f359b8f828e" translate="yes" xml:space="preserve">
          <source>Phags-pa</source>
          <target state="translated">Phags-pa</target>
        </trans-unit>
        <trans-unit id="a1fbe41a1fd16bc593d390402b8a1d609687aad4" translate="yes" xml:space="preserve">
          <source>Phags_Pa</source>
          <target state="translated">Phags_Pa</target>
        </trans-unit>
        <trans-unit id="690f59d7fc7811f820e457a94560e3193f08fc84" translate="yes" xml:space="preserve">
          <source>Phaistos Disc</source>
          <target state="translated">파이 토스 디스크</target>
        </trans-unit>
        <trans-unit id="2f8d593b2f2f827f8bfaa4cd70608d331d03efeb" translate="yes" xml:space="preserve">
          <source>Phases of Compilation</source>
          <target state="translated">컴파일 단계</target>
        </trans-unit>
        <trans-unit id="2de5476a4ccc050377fe5448cfcedc724b906da9" translate="yes" xml:space="preserve">
          <source>Phases of Processing</source>
          <target state="translated">처리 단계</target>
        </trans-unit>
        <trans-unit id="75f01355c8572c29448739b8c1da01c02b9b2517" translate="yes" xml:space="preserve">
          <source>Phobos Runtime Library</source>
          <target state="translated">포보스 런타임 라이브러리</target>
        </trans-unit>
        <trans-unit id="4bf0ae86028cd4735fa6d30d00b782060cf1c131" translate="yes" xml:space="preserve">
          <source>Phobos is the standard runtime library that comes with the D language compiler.</source>
          <target state="translated">Phobos는 D 언어 컴파일러와 함께 제공되는 표준 런타임 라이브러리입니다.</target>
        </trans-unit>
        <trans-unit id="2f182fe170adaf16b14bcef0b9bb20b231bf94f0" translate="yes" xml:space="preserve">
          <source>Phobos provides the following functionality for time:    This functionality is separated into the following modules</source>
          <target state="translated">Phobos는 시간에 따라 다음 기능을 제공합니다.이 기능은 다음과 같은 모듈로 구분됩니다.</target>
        </trans-unit>
        <trans-unit id="6908ab9bda0e225ecfd064a3d987f42cfc69e74c" translate="yes" xml:space="preserve">
          <source>Phoenician</source>
          <target state="translated">Phoenician</target>
        </trans-unit>
        <trans-unit id="39ead51340b227e68cc17352e9842e3846b38635" translate="yes" xml:space="preserve">
          <source>Phonetic Extensions</source>
          <target state="translated">음성 확장</target>
        </trans-unit>
        <trans-unit id="652915d71b26e32e7a6a196e8ba77ddfdb77afcf" translate="yes" xml:space="preserve">
          <source>Phonetic Extensions Supplement</source>
          <target state="translated">음성 확장 기능 보충</target>
        </trans-unit>
        <trans-unit id="a13438854aceabf5a965c5bd61f9c40684610db5" translate="yes" xml:space="preserve">
          <source>Pi</source>
          <target state="translated">Pi</target>
        </trans-unit>
        <trans-unit id="f398c7e78f56808cbcbff7a50fe6e2ac8277c2b8" translate="yes" xml:space="preserve">
          <source>Pick off one of the storage classes from stc, and return a string representation of it. stc is reduced by the one picked.</source>
          <target state="translated">stc에서 스토리지 클래스 중 하나를 선택하고 해당 문자열을 리턴하십시오. stc는 선택된 것만 큼 줄어 듭니다.</target>
        </trans-unit>
        <trans-unit id="8244da7920c1ba38d0c027418ea1aae6493f1225" translate="yes" xml:space="preserve">
          <source>Picking a good initial guess is an art, but you usually can pick a value covering 99% of the cases. For example, when gathering user input from the console - it's unlikely to be longer than 80.</source>
          <target state="translated">좋은 초기 추측을 선택하는 것은 예술이지만 일반적으로 사례의 99 %를 포괄하는 값을 선택할 수 있습니다. 예를 들어 콘솔에서 사용자 입력을 수집 할 때 80보다 길지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e53f69a39919b0a915ebc9873dad685de7a8a9ff" translate="yes" xml:space="preserve">
          <source>Picks one value in an unspecified position in the container, removes it from the container, and returns it. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated.</source>
          <target state="translated">컨테이너의 지정되지 않은 위치에서 하나의 값을 선택하여 컨테이너에서 제거한 후 반환합니다. 안정적인 버전은 동일하게 작동하지만 컨테이너를 반복하는 범위가 무효화되지 않도록 보장합니다.</target>
        </trans-unit>
        <trans-unit id="ff2655a1a6e1bb2c64ceacb981dca367486334be" translate="yes" xml:space="preserve">
          <source>Piotr Szturmaj, Kai Nacke, Johannes Pfau</source>
          <target state="translated">Piotr Szturmaj, 카이 나케, 요하네스 포</target>
        </trans-unit>
        <trans-unit id="56cdfa6aa8a28243be7e1b4e2cea18c6dba33f79" translate="yes" xml:space="preserve">
          <source>Pipes can, for example, be used for interprocess communication by spawning a new process and passing one end of the pipe to the child, while the parent uses the other end. (See also &lt;a href=&quot;#pipeProcess&quot;&gt;&lt;code&gt;pipeProcess&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pipeShell&quot;&gt;&lt;code&gt;pipeShell&lt;/code&gt;&lt;/a&gt; for an easier way of doing this.)</source>
          <target state="translated">예를 들어 파이프는 새 프로세스를 생성하고 파이프의 한쪽 끝을 자식에게 전달하는 반면 부모는 다른 쪽 끝을 사용하여 프로세스 간 통신에 사용될 수 있습니다. 더 쉬운 방법은 &lt;a href=&quot;#pipeProcess&quot;&gt; &lt;code&gt;pipeProcess&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#pipeShell&quot;&gt; &lt;code&gt;pipeShell&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f1162801a99a1678f4365b1437f7ee26e2b17365" translate="yes" xml:space="preserve">
          <source>Pipes functions in sequence. Offers the same functionality as &lt;code&gt; compose&lt;/code&gt;, but with functions specified in reverse order. This may lead to more readable code in some situation because the order of execution is the same as lexical order.</source>
          <target state="translated">파이프 기능을 순서대로 수행합니다. &lt;code&gt; compose&lt;/code&gt; 와 동일한 기능을 제공 하지만 역순으로 지정된 기능을 제공합니다. 실행 순서가 어휘 순서와 동일하기 때문에 상황에 따라 더 읽기 쉬운 코드가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dc1a73c3606a15a51213cdf1942786e4857d3599" translate="yes" xml:space="preserve">
          <source>Place a member (mem) into an aggregate (agg), which can be a struct, union or class</source>
          <target state="translated">구조체, 공용체 또는 클래스가 될 수있는 집계 (agg)에 멤버 (mem)를 배치합니다.</target>
        </trans-unit>
        <trans-unit id="695bd0b5f8fdfe3e3a5361a7c79d6090a91b51df" translate="yes" xml:space="preserve">
          <source>Places &lt;code&gt;b&lt;/code&gt; into the free tree.</source>
          <target state="translated">장소는 &lt;code&gt;b&lt;/code&gt; 무료 트리에.</target>
        </trans-unit>
        <trans-unit id="e0d23f9eee6541877d2307c6f58578451428b4f6" translate="yes" xml:space="preserve">
          <source>Places the values as a message at the back of tid's message queue.</source>
          <target state="translated">tid의 메시지 큐 뒤에 메시지로 값을 배치합니다.</target>
        </trans-unit>
        <trans-unit id="a5b257314e0f4709f60ae804ac7e7f2b742ae21e" translate="yes" xml:space="preserve">
          <source>Places the values as a message on the front of tid's message queue.</source>
          <target state="translated">tid의 메시지 큐 앞에 메시지로 값을 배치합니다.</target>
        </trans-unit>
        <trans-unit id="94226d2878e7c617f3b3f1f3719eb4bde4fad02b" translate="yes" xml:space="preserve">
          <source>Plain Old Data</source>
          <target state="translated">평범한 오래된 데이터</target>
        </trans-unit>
        <trans-unit id="a1493d685490e2464f09fa1850399f813e512165" translate="yes" xml:space="preserve">
          <source>Plain string(s), in which case it's compiled to bytecode before matching.</source>
          <target state="translated">일반 문자열.이 경우 일치하기 전에 바이트 코드로 컴파일됩니다.</target>
        </trans-unit>
        <trans-unit id="cb23ee720e4a8686c2c10bf8539ba0643cdd0071" translate="yes" xml:space="preserve">
          <source>Platform-specific error code.</source>
          <target state="translated">플랫폼 별 오류 코드</target>
        </trans-unit>
        <trans-unit id="027a81920a729c2258e1d82d39649acdc7dffe11" translate="yes" xml:space="preserve">
          <source>Playing Cards</source>
          <target state="translated">카드 놀이</target>
        </trans-unit>
        <trans-unit id="03706f3dc028771782bc46899efa2883e38b6817" translate="yes" xml:space="preserve">
          <source>Please note that this mutex is not recursive and is intended to guard access to data only. Also, no deadlock checking is in place because doing so would require dynamic memory allocation, which would reduce performance by an unacceptable amount. As a result, any attempt to recursively acquire this mutex may well deadlock the caller, particularly if a write lock is acquired while holding a read lock, or vice-versa. In practice, this should not be an issue however, because it is uncommon to call deeply into unknown code while holding a lock that simply protects data.</source>
          <target state="translated">이 뮤텍스는 재귀 적이 지 않으며 데이터에 대한 액세스만을 보호하기위한 것입니다. 또한 교착 상태 검사가 수행되지 않으므로 동적 메모리 할당이 필요하므로 성능이 허용 할 수 없을 정도로 줄어 듭니다. 결과적으로,이 뮤텍스를 재귀 적으로 획득하려는 시도는 특히 읽기 잠금을 유지하면서 쓰기 잠금이 획득되는 경우 호출자를 교착 상태로 만들 수 있으며 그 반대의 경우도 마찬가지입니다. 그러나 실제로는 데이터를 단순히 보호하는 잠금을 유지하면서 알 수없는 코드를 깊이 호출하는 것은 일반적이지 않으므로 문제가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5d56891bc4466df536e092c37941f4065e37d9b8" translate="yes" xml:space="preserve">
          <source>Please see the documentation of function &lt;a href=&quot;#formattedWrite&quot;&gt;&lt;code&gt;formattedWrite&lt;/code&gt;&lt;/a&gt; for a description of the format string.</source>
          <target state="translated">형식 문자열에 대한 설명은 &lt;a href=&quot;#formattedWrite&quot;&gt; &lt;code&gt;formattedWrite&lt;/code&gt; &lt;/a&gt; 함수 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1cddd8e6f160f9c012ad14047eb479084fe64ddb" translate="yes" xml:space="preserve">
          <source>Po</source>
          <target state="translated">Po</target>
        </trans-unit>
        <trans-unit id="98c8146cc9957cbbd6191153319b7d3f7d45b96d" translate="yes" xml:space="preserve">
          <source>Pointer Arithmetic</source>
          <target state="translated">포인터 산술</target>
        </trans-unit>
        <trans-unit id="e6a2fdb11c42c1ae52e79abd0552ecd4e047a046" translate="yes" xml:space="preserve">
          <source>Pointer Conversions</source>
          <target state="translated">포인터 변환</target>
        </trans-unit>
        <trans-unit id="856c91ff14adec92ce2bc660c71d5eac79f08ca9" translate="yes" xml:space="preserve">
          <source>Pointer State Transitions</source>
          <target state="translated">포인터 상태 전환</target>
        </trans-unit>
        <trans-unit id="149c3d09326d64bbad62958afe8efc64374edd93" translate="yes" xml:space="preserve">
          <source>Pointer States</source>
          <target state="translated">포인터 상태</target>
        </trans-unit>
        <trans-unit id="969e7d33b963ce1f275892b62721d3ce0b9f1543" translate="yes" xml:space="preserve">
          <source>Pointer comparisons between independent memory blocks will generate a compile-time error, unless two such comparisons are combined using &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;|&lt;/code&gt;&lt;code&gt;|&lt;/code&gt; to yield a result which is independent of the ordering of memory blocks. Each comparison must consist of two pointer expressions compared with &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;, and may optionally be negated with &lt;code&gt;!&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 또는 &lt;code&gt;|&lt;/code&gt; 를 사용하여 두 개의 비교를 결합하지 않으면 독립 메모리 블록 간의 포인터 비교에서 컴파일 타임 오류가 발생합니다. &lt;code&gt;|&lt;/code&gt; 메모리 블록의 순서와 무관 한 결과를 산출합니다. 각 비교는 &lt;code&gt;&amp;lt;&lt;/code&gt; , &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;code&gt;=&lt;/code&gt; , &lt;code&gt;&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;code&gt;=&lt;/code&gt; 과 비교할 때 두 개의 포인터 표현식으로 구성되어야하며 선택적으로 &lt;code&gt;!&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8d8ba274f62726cd16cfdb74920784e055bc3fed" translate="yes" xml:space="preserve">
          <source>Pointer operations</source>
          <target state="translated">포인터 조작</target>
        </trans-unit>
        <trans-unit id="f73f4002533a013222fe5260f3358d17ac5e821c" translate="yes" xml:space="preserve">
          <source>Pointer to an array. Must not be null.</source>
          <target state="translated">배열의 포인터. null이 아니어야합니다.</target>
        </trans-unit>
        <trans-unit id="5076bca24670e24c6621a2cb89582af335d5f43f" translate="yes" xml:space="preserve">
          <source>Pointer to command string to send if USER/PASS fails.</source>
          <target state="translated">USER / PASS가 실패한 경우 보낼 명령 문자열의 포인터.</target>
        </trans-unit>
        <trans-unit id="06f9d51c1c7abebe17ab3977ba3899554ca3ab4c" translate="yes" xml:space="preserve">
          <source>Pointer to freeing function for the data pointer (use FPNULL if none)</source>
          <target state="translated">데이터 포인터의 해제 기능을 가리키는 포인터 (없는 경우 FPNULL 사용)</target>
        </trans-unit>
        <trans-unit id="dc0cefd5a5a7541421f720b0bffc14b9f52d1fb1" translate="yes" xml:space="preserve">
          <source>Pointer to list to free</source>
          <target state="translated">무료로 나열하는 포인터</target>
        </trans-unit>
        <trans-unit id="9190dc9c093562a49c468d28217d7e00753efdb2" translate="yes" xml:space="preserve">
          <source>Pointer to string conversions convert the pointer to a &lt;code&gt;size_t&lt;/code&gt; value. If pointer is &lt;code&gt;char*&lt;/code&gt;, treat it as C-style strings. In that case, this function is &lt;code&gt;@system&lt;/code&gt;.</source>
          <target state="translated">포인터-문자열 변환은 포인터를 &lt;code&gt;size_t&lt;/code&gt; 값으로 변환합니다 . 포인터가 &lt;code&gt;char*&lt;/code&gt; 이면 C 스타일 문자열로 취급합니다. 이 경우이 함수는 &lt;code&gt;@system&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="68f4cf9a19016a952bc2822c32f67d451b70e07f" translate="yes" xml:space="preserve">
          <source>Pointer to string conversions prints the pointer as a &lt;code&gt;size_t&lt;/code&gt; value. If pointer is &lt;code&gt;char*&lt;/code&gt;, treat it as C-style strings. In that case, this function is &lt;code&gt;@system&lt;/code&gt;.</source>
          <target state="translated">포인터를 문자열로 변환하면 포인터를 &lt;code&gt;size_t&lt;/code&gt; 값 으로 인쇄합니다 . pointer가 &lt;code&gt;char*&lt;/code&gt; 인 경우 C 스타일 문자열로 취급하십시오. 이 경우이 함수는 &lt;code&gt;@system&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c5b722fc5ad9faac57dfe90f51b7e6e51ad5a968" translate="yes" xml:space="preserve">
          <source>Pointers</source>
          <target state="translated">Pointers</target>
        </trans-unit>
        <trans-unit id="ff4be6e4f9b5590ddf9dfe02916964c4f8ab7d67" translate="yes" xml:space="preserve">
          <source>Pointers and object references will increase in size from 4 bytes to 8 bytes going from 32 to 64 bit code.</source>
          <target state="translated">포인터와 객체 참조의 크기는 32 바이트에서 64 비트로 4 바이트에서 8 바이트로 증가합니다.</target>
        </trans-unit>
        <trans-unit id="7f833d9959f6dc21eb0139b1e1d09ff93afcd672" translate="yes" xml:space="preserve">
          <source>Pointers and the Garbage Collector</source>
          <target state="translated">포인터와 가비지 수집기</target>
        </trans-unit>
        <trans-unit id="b62503261da1d0e85d8812c54a796b3826868e30" translate="yes" xml:space="preserve">
          <source>Pointers are 32 bits, but words are still 64 bits (x32 ABI) (This can be defined in parallel to &lt;code&gt;X86_64&lt;/code&gt;)</source>
          <target state="translated">포인터는 32 비트이지만 단어는 여전히 64 비트 (x32 ABI)입니다 ( &lt;code&gt;X86_64&lt;/code&gt; 와 병렬로 정의 할 수 있음 )</target>
        </trans-unit>
        <trans-unit id="ee00272ddc3bae06ffd868c358f7dc324ab87c5e" translate="yes" xml:space="preserve">
          <source>Pointers are 64 bits (command line switch &lt;a href=&quot;https://dlang.org/dmd.html#switch-m64&quot;&gt;&lt;em&gt;-m64&lt;/em&gt;&lt;/a&gt;). (Do not confuse this with C's LP64 model)</source>
          <target state="translated">포인터는 64 비트입니다 (명령 행 스위치 &lt;a href=&quot;https://dlang.org/dmd.html#switch-m64&quot;&gt;&lt;em&gt;-m64&lt;/em&gt;&lt;/a&gt; ). (C의 LP64 모델과 혼동하지 마십시오)</target>
        </trans-unit>
        <trans-unit id="8299cb78e9d5361ffb94a50c6be3064ecd777f86" translate="yes" xml:space="preserve">
          <source>Pointers are formatted as hex integers.</source>
          <target state="translated">포인터는 16 진 정수로 형식화됩니다.</target>
        </trans-unit>
        <trans-unit id="81beea5be49de828523c7b83cb83e263a8c723ad" translate="yes" xml:space="preserve">
          <source>Pointers are initialized to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">포인터는 &lt;code&gt;null&lt;/code&gt; 로 초기화됩니다 .</target>
        </trans-unit>
        <trans-unit id="b564720393e1a126ee7c19e9b2ab29ecee13c4aa" translate="yes" xml:space="preserve">
          <source>Pointers are permitted in CTFE, provided they are used safely:</source>
          <target state="translated">CTFE에서는 포인터를 안전하게 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="33b50f6cb0549c10f645097a33ea92d4e40b3b8e" translate="yes" xml:space="preserve">
          <source>Pointers in D can be broadly divided into two categories: Those that point to garbage collected memory, and those that do not. Examples of the latter are pointers created by calls to C's malloc(), pointers received from C library routines, pointers to static data, pointers to objects on the stack, etc. For those pointers, anything that is legal in C can be done with them.</source>
          <target state="translated">D의 포인터는 크게 두 가지 범주로 나눌 수 있습니다. 가비지 수집 메모리를 가리키는 포인터와 그렇지 않은 포인터. 후자의 예로는 C의 malloc ()에 대한 호출, C 라이브러리 루틴에서 수신 된 포인터, 정적 데이터에 대한 포인터, 스택의 객체에 대한 포인터 등이 있습니다. 이러한 포인터의 경우 C에서 유효한 모든 것을 그들.</target>
        </trans-unit>
        <trans-unit id="07f1578da80dda793e1b2a12af8d61bddaecaaca" translate="yes" xml:space="preserve">
          <source>Pointers to data</source>
          <target state="translated">데이터에 대한 포인터</target>
        </trans-unit>
        <trans-unit id="3e95a08c7f10554dbb4f1d987f31459800a05579" translate="yes" xml:space="preserve">
          <source>Pointers to functions are declared using the &lt;code&gt;function&lt;/code&gt; keyword:</source>
          <target state="translated">함수에 대한 포인터는 &lt;code&gt;function&lt;/code&gt; 키워드를 사용하여 선언됩니다 .</target>
        </trans-unit>
        <trans-unit id="ba2ae989bf15107b84383ac16b45e244a6749266" translate="yes" xml:space="preserve">
          <source>Points in Time</source>
          <target state="translated">시점</target>
        </trans-unit>
        <trans-unit id="8d61184962dda249c7c096096c40ff46b825f4a7" translate="yes" xml:space="preserve">
          <source>Policies</source>
          <target state="translated">Policies</target>
        </trans-unit>
        <trans-unit id="af58401ee9469729541dac0b751cce965eea718d" translate="yes" xml:space="preserve">
          <source>Policy &lt;code&gt;policy&lt;/code&gt;</source>
          <target state="translated">정책 &lt;code&gt;policy&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fc91f995ebb93a2f7e56c21f73e82fc61f5b2a4c" translate="yes" xml:space="preserve">
          <source>Policy used with the searching primitives &lt;code&gt;lowerBound&lt;/code&gt;, &lt;code&gt; upperBound&lt;/code&gt;, and &lt;code&gt;equalRange&lt;/code&gt; of &lt;a href=&quot;#SortedRange&quot;&gt;&lt;code&gt;SortedRange&lt;/code&gt;&lt;/a&gt; below.</source>
          <target state="translated">아래 의 &lt;a href=&quot;#SortedRange&quot;&gt; &lt;code&gt;SortedRange&lt;/code&gt; &lt;/a&gt; 의 검색 프리미티브 &lt;code&gt;lowerBound&lt;/code&gt; , &lt;code&gt; upperBound&lt;/code&gt; 및 &lt;code&gt;equalRange&lt;/code&gt; 와 함께 사용되는 정책 .</target>
        </trans-unit>
        <trans-unit id="3a08168a4a6e709754913e5ffddfbc3155fa15c7" translate="yes" xml:space="preserve">
          <source>Pop and return top of chained exception stack.</source>
          <target state="translated">연결 예외 스택의 상단 및 상단 반환</target>
        </trans-unit>
        <trans-unit id="e3b2083d9073caa149a44c741a28f14a49836e82" translate="yes" xml:space="preserve">
          <source>PopFirst &lt;code&gt;popFirst&lt;/code&gt;</source>
          <target state="translated">PopFirst &lt;code&gt;popFirst&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="39b1331a2764ebac317450573122cb14748e0954" translate="yes" xml:space="preserve">
          <source>Pops &lt;code&gt;front&lt;/code&gt; from the range, using &lt;code&gt;func&lt;/code&gt; to generate the next time point in the range.</source>
          <target state="translated">팝 &lt;code&gt;front&lt;/code&gt; 사용 범위에서, &lt;code&gt;func&lt;/code&gt; 범위 내의 다음 시점을 생성한다.</target>
        </trans-unit>
        <trans-unit id="dcdc71ebe929973a390e8aff45bb2f4747f7dcd1" translate="yes" xml:space="preserve">
          <source>Pops &lt;code&gt;front&lt;/code&gt; from the range, using &lt;code&gt;func&lt;/code&gt; to generate the next time point in the range. If the generated time point is beyond the edge of the range, then &lt;code&gt;front&lt;/code&gt; is set to that edge, and the range is then empty. So, if iterating forwards, and the generated time point is greater than the interval's &lt;code&gt;end&lt;/code&gt;, then &lt;code&gt;front&lt;/code&gt; is set to &lt;code&gt;end&lt;/code&gt;. If iterating backwards, and the generated time point is less than the interval's &lt;code&gt;begin&lt;/code&gt;, then &lt;code&gt;front&lt;/code&gt; is set to &lt;code&gt;begin&lt;/code&gt;.</source>
          <target state="translated">팝 &lt;code&gt;front&lt;/code&gt; 사용 범위에서, &lt;code&gt;func&lt;/code&gt; 범위 내의 다음 시점을 생성한다. 생성 된 시점이 범위의 가장자리를 벗어나면 &lt;code&gt;front&lt;/code&gt; 이 해당 가장자리로 설정되고 범위가 비어 있습니다. 전방으로 반복하고, 상기 생성하는 시점의 간격보다 큰 경우에 따라서, &lt;code&gt;end&lt;/code&gt; 다음 &lt;code&gt;front&lt;/code&gt; 으로 설정된 &lt;code&gt;end&lt;/code&gt; . 거꾸로 반복하고, 생성 된 시점 것은 간격의이보다 작 으면 &lt;code&gt;begin&lt;/code&gt; 후 &lt;code&gt;front&lt;/code&gt; 으로 설정되어 &lt;code&gt;begin&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9bd2debd0b1b27ed7de52611ae792c23ffd10295" translate="yes" xml:space="preserve">
          <source>Populates the identifier pool with all predefined symbols.</source>
          <target state="translated">미리 정의 된 모든 기호로 식별자 풀을 채 웁니다.</target>
        </trans-unit>
        <trans-unit id="f5507f8b7f675f44d3633ef363280afbef63c166" translate="yes" xml:space="preserve">
          <source>Port number to connect to, if other than default.</source>
          <target state="translated">기본값이 아닌 경우 연결할 포트 번호입니다.</target>
        </trans-unit>
        <trans-unit id="5c5ce787a818b8d8650eac948c2f4482fe2163c4" translate="yes" xml:space="preserve">
          <source>Port of the proxy, can be set in the proxy string as well with: &lt;code&gt;[host]:[port]&lt;/code&gt;</source>
          <target state="translated">프록시의 포트는 다음과 함께 프록시 문자열에 설정할 수 있습니다. &lt;code&gt;[host]:[port]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b307b88c84327b1804aee227595be53342245965" translate="yes" xml:space="preserve">
          <source>Portability</source>
          <target state="translated">Portability</target>
        </trans-unit>
        <trans-unit id="5fc28461e5419ac5858beeeb37e698425c2fea75" translate="yes" xml:space="preserve">
          <source>PosInfInterval &lt;code&gt;interval&lt;/code&gt;</source>
          <target state="translated">PosInfInterval &lt;code&gt;interval&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d5085fcde3a9c261b3b04bd4f501bcfa1288c06" translate="yes" xml:space="preserve">
          <source>PosInfInterval &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="translated">간격 간격 &lt;code&gt;rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="129a356d8768561b072b73ccccbf992888bea8b7" translate="yes" xml:space="preserve">
          <source>PosInfInterval!TP &lt;code&gt;interval&lt;/code&gt;</source>
          <target state="translated">PosInfInterval! TP &lt;code&gt;interval&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fd0df76a280f9a11a50dd203f053db771fafee40" translate="yes" xml:space="preserve">
          <source>PosInfIntervalRange &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="translated">PosInfIntervalRange &lt;code&gt;rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f9877fc3f2623b3f50c8f3184bd7c3fe011d61d3" translate="yes" xml:space="preserve">
          <source>Position Independent Code (command line switch &lt;a href=&quot;https://dlang.org/dmd-linux.html#switch-fPIC&quot;&gt;&lt;em&gt;-fPIC&lt;/em&gt;&lt;/a&gt;) is being generated</source>
          <target state="translated">위치 독립 코드 (명령 행 스위치 &lt;a href=&quot;https://dlang.org/dmd-linux.html#switch-fPIC&quot;&gt;&lt;em&gt;-fPIC&lt;/em&gt;&lt;/a&gt; )가 생성되고 있습니다.</target>
        </trans-unit>
        <trans-unit id="94ff21187708025ec06734808a8ffcba3f1255a0" translate="yes" xml:space="preserve">
          <source>Position in source file</source>
          <target state="translated">소스 파일에서의 위치</target>
        </trans-unit>
        <trans-unit id="1c7d2a41182aaf6cac883c7a26f3e0458f6613a7" translate="yes" xml:space="preserve">
          <source>Positive and negative zeroes are distinct.</source>
          <target state="translated">양수와 음수 0은 서로 다릅니다.</target>
        </trans-unit>
        <trans-unit id="0d9f8a6fbaa2f747fe41cdbb5779f42c76054a43" translate="yes" xml:space="preserve">
          <source>Possible to cast to one type while painting to another type</source>
          <target state="translated">다른 유형으로 페인팅하는 동안 한 유형으로 캐스트 가능</target>
        </trans-unit>
        <trans-unit id="a595496b70e4ac0dcaad132b95d982296d4ece9c" translate="yes" xml:space="preserve">
          <source>Postblits</source>
          <target state="translated">Postblits</target>
        </trans-unit>
        <trans-unit id="b67cda929c621b7238e8e7b18624e89e3d600ab4" translate="yes" xml:space="preserve">
          <source>Postblits cannot be overloaded. If two or more postblits are defined, even if the signatures differ, the compiler assigns the &lt;code&gt;__postblit&lt;/code&gt; name to both and later issues a conflicting function name error:</source>
          <target state="translated">포스트 블리트는 오버로드 될 수 없습니다. 둘 이상의 포스트 블리트가 정의 된 경우 서명이 다르더라도 컴파일러는 &lt;code&gt;__postblit&lt;/code&gt; 이름을 둘 다에 할당 하고 나중에 충돌하는 함수 이름 오류를 발행합니다.</target>
        </trans-unit>
        <trans-unit id="03b0a5668a78a6c73799b480ad3c40d5053795e5" translate="yes" xml:space="preserve">
          <source>Postcondition</source>
          <target state="translated">Postcondition</target>
        </trans-unit>
        <trans-unit id="fd99975cb3b791e05b83de3f8d3df7dec73b171c" translate="yes" xml:space="preserve">
          <source>Postcondition checks (out contract).</source>
          <target state="translated">사후 점검 (계약).</target>
        </trans-unit>
        <trans-unit id="82ecf35c1a8706936b0e8617bb976a01dca6b88c" translate="yes" xml:space="preserve">
          <source>Postconditions</source>
          <target state="translated">Postconditions</target>
        </trans-unit>
        <trans-unit id="040b4a736abe1da53bd8406f166c0e2e85d95807" translate="yes" xml:space="preserve">
          <source>Postfix Expressions</source>
          <target state="translated">접미사 표현식</target>
        </trans-unit>
        <trans-unit id="da4d207f33d1c8c4edafd10628aaf54446134448" translate="yes" xml:space="preserve">
          <source>Postfix Operator Rewrites</source>
          <target state="translated">접미사 연산자 다시 쓰기</target>
        </trans-unit>
        <trans-unit id="b4dbcceb0733332ed7b3413421a4224fc70b00ed" translate="yes" xml:space="preserve">
          <source>PostfixExpression</source>
          <target state="translated">PostfixExpression</target>
        </trans-unit>
        <trans-unit id="18a58057ccb77e5dd8b91625ed5dc6fc94061fa7" translate="yes" xml:space="preserve">
          <source>Postincrement</source>
          <target state="translated">Postincrement</target>
        </trans-unit>
        <trans-unit id="bf82bfcd8a75fe25a9a0c5cbb6104e08332d21e4" translate="yes" xml:space="preserve">
          <source>Postincrement &lt;i&gt;e&lt;/i&gt;&lt;code&gt;++&lt;/code&gt; and Postdecrement &lt;i&gt;e&lt;/i&gt;&lt;code&gt;--&lt;/code&gt; Operators</source>
          <target state="translated">후행 &lt;i&gt;전자 &lt;/i&gt; &lt;code&gt;++&lt;/code&gt; 및 Postdecrement의 &lt;i&gt;전자 &lt;/i&gt; &lt;code&gt;--&lt;/code&gt; 연산자</target>
        </trans-unit>
        <trans-unit id="0df8c37cc9a164b7729795ce2b2b74064c3959ba" translate="yes" xml:space="preserve">
          <source>Pow Expressions</source>
          <target state="translated">펑 표현</target>
        </trans-unit>
        <trans-unit id="b53ac0458a706a39c9484ec5fec9c84db97eddcc" translate="yes" xml:space="preserve">
          <source>PowExpression</source>
          <target state="translated">PowExpression</target>
        </trans-unit>
        <trans-unit id="aa445acda25547a9330f5709468bd87dd13af4d6" translate="yes" xml:space="preserve">
          <source>Practical Example</source>
          <target state="translated">실제 예</target>
        </trans-unit>
        <trans-unit id="3e092163716f376bb86566aa4ec6fc840c95baff" translate="yes" xml:space="preserve">
          <source>Practically &lt;code&gt;Nullable!T&lt;/code&gt; stores a &lt;code&gt;T&lt;/code&gt; and a &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="translated">실제로 &lt;code&gt;Nullable!T&lt;/code&gt; 는 &lt;code&gt;T&lt;/code&gt; 와 &lt;code&gt;bool&lt;/code&gt; 을 저장합니다 .</target>
        </trans-unit>
        <trans-unit id="38f93d32853eca4603a582eb7a404079e10b855d" translate="yes" xml:space="preserve">
          <source>Pragma</source>
          <target state="translated">Pragma</target>
        </trans-unit>
        <trans-unit id="4228470908b356987cf1925969b1a8dc591738f4" translate="yes" xml:space="preserve">
          <source>Pragma Name 1st arg or NULL</source>
          <target state="translated">Pragma 이름 첫 번째 인수 또는 NULL</target>
        </trans-unit>
        <trans-unit id="fa87f38bf7181908ef6bd8c17c24a2033e6d6d85" translate="yes" xml:space="preserve">
          <source>Pragma Statement</source>
          <target state="translated">프라 그마 진술</target>
        </trans-unit>
        <trans-unit id="d857c4a3cba6bb11f909b140e46311890f7f21c4" translate="yes" xml:space="preserve">
          <source>Pragmas</source>
          <target state="translated">Pragmas</target>
        </trans-unit>
        <trans-unit id="6100c56545314ca2ea6d26d66d469384e927114e" translate="yes" xml:space="preserve">
          <source>Pragmas are a way to pass special information to the compiler and to add vendor specific extensions to D. Pragmas can be used by themselves terminated with a &amp;lsquo;;&amp;rsquo;, they can influence a statement, a block of statements, a declaration, or a block of declarations.</source>
          <target state="translated">Pragma는 컴파일러에 특수 정보를 전달하고 공급 업체 특정 확장명을 D에 추가하는 방법입니다. Pragma는 ';'으로 끝나서 사용할 수 있으며, 명령문, 명령문 블록, 선언 또는 블록에 영향을 줄 수 있습니다. 선언.</target>
        </trans-unit>
        <trans-unit id="f20744406e393916e9a8767156242954d148dbd7" translate="yes" xml:space="preserve">
          <source>Pragmas can appear as either declarations,</source>
          <target state="translated">Pragma는 선언으로 나타날 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8561ddc56be7aa47f035e75aa500fe4607b514ed" translate="yes" xml:space="preserve">
          <source>Pre and Post Contracts</source>
          <target state="translated">사전 및 사후 계약</target>
        </trans-unit>
        <trans-unit id="2e4d2b399ceb179d2394b94e69e13a5a0cfc7116" translate="yes" xml:space="preserve">
          <source>Pre and post contracts can be written either in expression form (feature introduced in DMD 2.081.0), with a syntax similar to &lt;b&gt;assert&lt;/b&gt;, or as block statements containing arbitrary code.</source>
          <target state="translated">사전 및 사후 계약은 &lt;b&gt;assert&lt;/b&gt; 와 유사한 구문으로 표현 형식 (DMD 2.081.0에 도입 된 기능)으로 작성 될 수 있습니다.&lt;b&gt;&lt;/b&gt; 하거나 임의 코드를 포함하는 블록 명령문으로 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="baaef1b79330fb3733e1029bb05c865b513dfa63" translate="yes" xml:space="preserve">
          <source>Preallocate more memory than requested such that later on, when reallocation is needed (e.g. to grow an array), expansion can be done quickly in place. Reallocation to smaller sizes is also fast (in-place) when the new size requested is within the same quantum as the existing size. Code that's reallocation-heavy can therefore benefit from fronting a generic allocator with a &lt;code&gt;Quantizer&lt;/code&gt;. These advantages are present even if &lt;code&gt;ParentAllocator&lt;/code&gt; does not support reallocation at all.</source>
          <target state="translated">나중에 재 할당이 필요할 때 (예 : 어레이 확장) 필요할 때 신속하게 확장을 수행 할 수 있도록 요청 된 것보다 더 많은 메모리를 사전 할당하십시오. 요청 된 새로운 크기가 기존 크기와 동일한 양자 내에있을 때 더 작은 크기로의 재 할당도 빠릅니다. 재 할당량이 많은 코드는 &lt;code&gt;Quantizer&lt;/code&gt; 로 일반 할당자를 앞에두면 도움이 될 수 있습니다 . &lt;code&gt;ParentAllocator&lt;/code&gt; 가 재 할당을 전혀 지원하지 않는 경우에도 이러한 장점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b802de09c547c0729edb51e5e2e3cebfb6707e5" translate="yes" xml:space="preserve">
          <source>Preallocate nbytes more to the size of the internal buffer.</source>
          <target state="translated">내부 버퍼의 크기에 nbyte를 미리 할당하십시오.</target>
        </trans-unit>
        <trans-unit id="67791177460b7a42d60af39e539c1ca510749619" translate="yes" xml:space="preserve">
          <source>Precise Heap Scanning</source>
          <target state="translated">정확한 힙 스캔</target>
        </trans-unit>
        <trans-unit id="1ddcbf2bc07417bcf100ff586767615466b08676" translate="yes" xml:space="preserve">
          <source>Precise Scanning of the DATA and TLS segment</source>
          <target state="translated">DATA 및 TLS 세그먼트의 정밀 스캔</target>
        </trans-unit>
        <trans-unit id="825cff2fca8c64366258f1a1ce51f8e555e73a45" translate="yes" xml:space="preserve">
          <source>Precise scanning can be enabled with the D runtime option &quot;scanDataSeg&quot;. Possible option values are &quot;conservative&quot; (default) and &quot;precise&quot;. As with the GC options, it can be specified on the command line, in the environment or embedded into the executable, e.g.</source>
          <target state="translated">D 런타임 옵션 &quot;scanDataSeg&quot;를 사용하여 정밀 스캔을 활성화 할 수 있습니다. 가능한 옵션 값은 &quot;보수적&quot;(기본값) 및 &quot;정확한&quot;입니다. GC 옵션과 마찬가지로 환경에서 명령 줄에 지정하거나 실행 파일에 포함시킬 수 있습니다 (예 :</target>
        </trans-unit>
        <trans-unit id="3dd4db5ce7ea626f59e720f0c27096a22aa1ecd0" translate="yes" xml:space="preserve">
          <source>Precision</source>
          <target state="translated">Precision</target>
        </trans-unit>
        <trans-unit id="ddb5cb78dc037fe6c2aeded0e6b974e03a4651fe" translate="yes" xml:space="preserve">
          <source>Precision. Its semantics depends on the argument type. For floating point numbers, precision dictates the number of decimals printed.</source>
          <target state="translated">정도. 그 의미는 인수 유형에 따라 다릅니다. 부동 소수점 숫자의 경우 정밀도는 인쇄 된 소수 자릿수를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="646ad9740d80073615a87f1e15d4c39112839036" translate="yes" xml:space="preserve">
          <source>Precondition</source>
          <target state="translated">Precondition</target>
        </trans-unit>
        <trans-unit id="030e7d448ce8d11254c73a2fd0da828600bdd8f4" translate="yes" xml:space="preserve">
          <source>Precondition checks (in contract).</source>
          <target state="translated">전제 조건 점검 (계약).</target>
        </trans-unit>
        <trans-unit id="eec67145e07c78272a2a8e16aa54643dd652ed96" translate="yes" xml:space="preserve">
          <source>Preconditions</source>
          <target state="translated">Preconditions</target>
        </trans-unit>
        <trans-unit id="69c23fde13319243d13a72e36ae957a78f698a9e" translate="yes" xml:space="preserve">
          <source>Predefined Formatting Macros</source>
          <target state="translated">사전 정의 된 포맷팅 매크로</target>
        </trans-unit>
        <trans-unit id="f574f2822e5c3af2cfb42d326ba7b141732bc4e6" translate="yes" xml:space="preserve">
          <source>Predefined Macros</source>
          <target state="translated">미리 정의 된 매크로</target>
        </trans-unit>
        <trans-unit id="ba0569b596744d1ce75b051b455ee817f31fc211" translate="yes" xml:space="preserve">
          <source>Predefined Pragmas</source>
          <target state="translated">사전 정의 된 Pragma</target>
        </trans-unit>
        <trans-unit id="f694c553eb504db7a181a57928a8f49aff6fc3c5" translate="yes" xml:space="preserve">
          <source>Predefined Version Identifiers</source>
          <target state="translated">사전 정의 된 버전 식별자</target>
        </trans-unit>
        <trans-unit id="650eab2526d17b9e8d42a3dbc822ea4d5cc1cab0" translate="yes" xml:space="preserve">
          <source>Predefined Version Identifiers (deprecated)</source>
          <target state="translated">사전 정의 된 버전 식별자 (더 이상 사용되지 않음)</target>
        </trans-unit>
        <trans-unit id="db1fc02b034fcc8cf516995fb58bfacb21d666ee" translate="yes" xml:space="preserve">
          <source>Predefined Versions</source>
          <target state="translated">사전 정의 된 버전</target>
        </trans-unit>
        <trans-unit id="6d6fa6ffb57b4fc430272a48656dc44e4d33384e" translate="yes" xml:space="preserve">
          <source>Predefined how-policies for &lt;code&gt;AutoImplement&lt;/code&gt;. These templates are also used by &lt;code&gt;BlackHole&lt;/code&gt; and &lt;code&gt;WhiteHole&lt;/code&gt;, respectively.</source>
          <target state="translated">에 대한 방법-정책을 미리 정의 된 &lt;code&gt;AutoImplement&lt;/code&gt; . 이러한 템플릿은 사용하는 &lt;code&gt;BlackHole&lt;/code&gt; 과 &lt;code&gt;WhiteHole&lt;/code&gt; 각각.</target>
        </trans-unit>
        <trans-unit id="18360332b07be143cc4f1da02b06ba76ff2987a0" translate="yes" xml:space="preserve">
          <source>Predefined macros.</source>
          <target state="translated">사전 정의 된 매크로</target>
        </trans-unit>
        <trans-unit id="d210d4faef2ed863019beead1daefcae8123fa30" translate="yes" xml:space="preserve">
          <source>Predicate for determining equivalence between range elements.</source>
          <target state="translated">범위 요소 간의 동등성을 결정하기위한 술어.</target>
        </trans-unit>
        <trans-unit id="f19fd9d32d5055cf82846584da77887fff117d42" translate="yes" xml:space="preserve">
          <source>Predicate for determining equivalence.</source>
          <target state="translated">동등성을 결정하기위한 술어.</target>
        </trans-unit>
        <trans-unit id="a93b98110ad3e2b516ed91d743153796a0e28ab9" translate="yes" xml:space="preserve">
          <source>Predicate that returns a &amp;gt; b. Correctly compares signed and unsigned integers, ie. 2U &amp;gt; -1.</source>
          <target state="translated">a&amp;gt; b를 리턴하는 술어. 부호있는 정수와 부호없는 정수를 올바르게 비교합니다. 2U&amp;gt; -1.</target>
        </trans-unit>
        <trans-unit id="2247c29ba644eef54ffa265596621906f85bd2d2" translate="yes" xml:space="preserve">
          <source>Predicate that returns a &amp;lt; b. Correctly compares signed and unsigned integers, ie. -1 &amp;lt; 2U.</source>
          <target state="translated">a &amp;lt;b를 리턴하는 술어. 부호있는 정수와 부호없는 정수를 올바르게 비교합니다. -1 &amp;lt;2U.</target>
        </trans-unit>
        <trans-unit id="26756cd5052d3a034d5614a5454264ad1e804a2e" translate="yes" xml:space="preserve">
          <source>Predicate that returns a == b. Correctly compares signed and unsigned integers, ie. !(-1 == ~0U).</source>
          <target state="translated">a ==를 반환하는 술어 b. 부호있는 정수와 부호없는 정수를 올바르게 비교합니다. ! (-1 == ~ 0U).</target>
        </trans-unit>
        <trans-unit id="aec40ac3dd710bdedb7c27ab3c63cbe9f18eca0e" translate="yes" xml:space="preserve">
          <source>Predicate that reverses the order of its arguments.</source>
          <target state="translated">인수의 순서를 반대로하는 술어.</target>
        </trans-unit>
        <trans-unit id="16636ca0b74fb2ab0a70fb6627626ffc2cf1d0e7" translate="yes" xml:space="preserve">
          <source>Predicate the given ranges are sorted by.</source>
          <target state="translated">주어진 범위가 정렬되어 있다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="1a38d124cb8a3b1e47307840e450ae91589d602f" translate="yes" xml:space="preserve">
          <source>Predicate the range should be sorted by.</source>
          <target state="translated">범위를 정렬해야한다는 것을 선언하십시오.</target>
        </trans-unit>
        <trans-unit id="b2a7231686de07e79eb8b0d9844880c7ef14cedf" translate="yes" xml:space="preserve">
          <source>Predicate to determine when to stop.</source>
          <target state="translated">중지시기를 결정하는 술어.</target>
        </trans-unit>
        <trans-unit id="546312872400f2b7fe55f05c3ab6277445097f85" translate="yes" xml:space="preserve">
          <source>Predicate to use for comparing needle against haystack.</source>
          <target state="translated">바늘과 건초 더미를 비교하는 데 사용하는 술어.</target>
        </trans-unit>
        <trans-unit id="70a5a11e1d7c6f98b55a8869acfad5cf195cf8e4" translate="yes" xml:space="preserve">
          <source>Predicate to use in comparing the elements of the haystack and the needle(s). Mandatory if no needles are given.</source>
          <target state="translated">건초 더미와 바늘의 요소를 비교하는 데 사용하는 술어. 바늘이 없으면 필수입니다.</target>
        </trans-unit>
        <trans-unit id="3412ea0e9183eafcad5437bc1beda80c905fce06" translate="yes" xml:space="preserve">
          <source>Predicate used for comparison. Without a predicate specified the ordering implied by &lt;code&gt;opCmp&lt;/code&gt; is used.</source>
          <target state="translated">비교에 사용되는 술어. 술어를 지정하지 않으면 &lt;code&gt;opCmp&lt;/code&gt; 에 의해 암시 된 순서 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="bb58a86d3182e26b59f94be7cbbda2124f6c452f" translate="yes" xml:space="preserve">
          <source>Predicate used to compare elements.</source>
          <target state="translated">요소를 비교하는 데 사용되는 술어.</target>
        </trans-unit>
        <trans-unit id="b0cca7e5cdbdfdcfacaf2626d35398cb9ce852dc" translate="yes" xml:space="preserve">
          <source>Prefix Sum</source>
          <target state="translated">접두사 합계</target>
        </trans-unit>
        <trans-unit id="4440f6ead8de15bb428fb83460c2f9fb1d3d6664" translate="yes" xml:space="preserve">
          <source>Prefix positive numbers in a signed conversion with a +. It overrides any</source>
          <target state="translated">부호있는 변환에서 +로 시작하는 양수. 그것은 무엇보다 우선합니다</target>
        </trans-unit>
        <trans-unit id="9d20134bf9ae9a5a55d77e7c52ee03334b676050" translate="yes" xml:space="preserve">
          <source>Prefix positive numbers in a signed conversion with a space.</source>
          <target state="translated">공백이있는 부호있는 변환에서 양수 접두사</target>
        </trans-unit>
        <trans-unit id="4b62ff682f634c873eaf7673a8c2dfbc17ca9e6e" translate="yes" xml:space="preserve">
          <source>Prepare a string with as many &lt;code&gt;../&lt;/code&gt; or &lt;code&gt;..\&lt;/code&gt; as necessary to reach the common root from base path.</source>
          <target state="translated">기본 경로에서 공통 루트에 도달하는 데 필요한만큼 &lt;code&gt;../&lt;/code&gt; 또는 &lt;code&gt;..\&lt;/code&gt; 로 문자열을 준비하십시오 .</target>
        </trans-unit>
        <trans-unit id="415f781b04702ed4c2fb18fdbfc0c62c0bfdfc34" translate="yes" xml:space="preserve">
          <source>Prepare for generating obj file.</source>
          <target state="translated">obj 파일 생성을 준비하십시오.</target>
        </trans-unit>
        <trans-unit id="2f5da103100b3440f26c60eb3e05807f62717d70" translate="yes" xml:space="preserve">
          <source>Prepared Statement Status</source>
          <target state="translated">준비된 진술서 상태</target>
        </trans-unit>
        <trans-unit id="8a00f68e210aed91d87587585896acbb4f68a3e9" translate="yes" xml:space="preserve">
          <source>Prepend integer item to list.</source>
          <target state="translated">정수 항목 앞에 나열하십시오.</target>
        </trans-unit>
        <trans-unit id="2bc658c404b7b5169d7e796d80f53ca674f8dbcd" translate="yes" xml:space="preserve">
          <source>Prepend ptr to *plist.</source>
          <target state="translated">ptr을 * plist 앞에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="a7e0dfaf80613ad95f56924d0ddc7d620003b7ee" translate="yes" xml:space="preserve">
          <source>Preserve the relative ordering of elements to the largest extent allowed by the algorithm's requirements.</source>
          <target state="translated">알고리즘의 요구 사항에서 허용하는 최대 범위까지 요소의 상대적 순서를 유지합니다.</target>
        </trans-unit>
        <trans-unit id="7d7712a544e0581dd899ab39e86edb57d9684fe7" translate="yes" xml:space="preserve">
          <source>PreserveAttributes &lt;code&gt;preserve&lt;/code&gt;</source>
          <target state="translated">보존 &lt;code&gt;preserve&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2f9b1f72e64b514a1faab078b4c60a83aa1be354" translate="yes" xml:space="preserve">
          <source>PreserveAttributes &lt;strong id=&quot;preserveAttributesDefault&quot;&gt;preserveAttributesDefault&lt;/strong&gt;;</source>
          <target state="translated">PreserveAttributes &lt;strong id=&quot;preserveAttributesDefault&quot;&gt;preserveAttributesDefault&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="3625fc12c04fb48d484d9798778432e4646c44a6" translate="yes" xml:space="preserve">
          <source>Pretty advanced function for building multi-part formposts. Each invoke adds one part that together construct a full post. Then use CURLOPT_HTTPPOST to send it off to libcurl.</source>
          <target state="translated">여러 부분으로 구성된 폼 포스트 작성을위한 고급 기능. 각 호출은 전체 게시물을 구성하는 하나의 부분을 추가합니다. 그런 다음 CURLOPT_HTTPPOST를 사용하여 libcurl로 전송하십시오.</target>
        </trans-unit>
        <trans-unit id="7c6267ddd51b4b8a86f5124efee427639efeca08" translate="yes" xml:space="preserve">
          <source>Pretty print a module.</source>
          <target state="translated">모듈을 예쁘게 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="000bfc178c61f018242fa09e44055036aac73316" translate="yes" xml:space="preserve">
          <source>Pretty print function parameter.</source>
          <target state="translated">예쁜 인쇄 기능 매개 변수.</target>
        </trans-unit>
        <trans-unit id="446abdf27012e485e2e624c0190dfffb42d444b3" translate="yes" xml:space="preserve">
          <source>Pretty print function parameters.</source>
          <target state="translated">예쁜 인쇄 기능 매개 변수.</target>
        </trans-unit>
        <trans-unit id="adf658a27711e59b6f616cbc30d0286f5d85f134" translate="yes" xml:space="preserve">
          <source>Pretty printed module as string.</source>
          <target state="translated">문자열로 인쇄 된 모듈.</target>
        </trans-unit>
        <trans-unit id="bbe02dc8d90c522cd731d7f77d7a60e956659ce7" translate="yes" xml:space="preserve">
          <source>Previous versions of &lt;code&gt;XorshiftEngine&lt;/code&gt; did not provide any mechanism to specify the directions of the shifts, taking each shift as an unsigned magnitude. For backwards compatibility, because three shifts in the same direction cannot result in a full-period XorshiftEngine, when all three of &lt;code&gt;sa&lt;/code&gt;, &lt;code&gt;sb&lt;/code&gt;, &lt;code&gt;sc, are positive &lt;/code&gt;XorshiftEngine` treats them as unsigned magnitudes and uses shift directions to match the old behavior of &lt;code&gt;XorshiftEngine&lt;/code&gt;.  Not every set of shifts results in a full-period xorshift generator. The template does not currently at compile-time perform a full check for maximum period but in a future version might reject parameters resulting in shorter periods.</source>
          <target state="translated">이전 버전의 &lt;code&gt;XorshiftEngine&lt;/code&gt; 은 각 시프트를 부호없는 크기로 사용하여 시프트의 방향을 지정하는 메커니즘을 제공하지 않았습니다. 이전 버전과의 호환성을 위해 &lt;code&gt;sa&lt;/code&gt; , &lt;code&gt;sb&lt;/code&gt; 및 &lt;code&gt;sc, are positive &lt;/code&gt; 세 가지 모두가 양수인 경우 동일한 방향으로 3 개의 시프트로 인해 전체 기간의 XorshiftEngine을 생성 할 수 없기 때문에 XorshiftEngine이이를 부호없는 크기로 취급하고 시프트 방향을 사용하여 &lt;code&gt;XorshiftEngine&lt;/code&gt; 의 이전 동작과 일치 시킵니다. . 모든 교대조가 전체주기의 교대 발생기를 생성하는 것은 아닙니다. 템플릿은 현재 컴파일 타임에 최대 기간 동안 전체 검사를 수행하지 않지만 이후 버전에서는 매개 변수를 거부하여 기간이 짧아 질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3499b7593c8190fb7c47376aee73c9e820543602" translate="yes" xml:space="preserve">
          <source>Primary &lt;strong id=&quot;primary&quot;&gt;primary&lt;/strong&gt;;</source>
          <target state="translated">일차 &lt;strong id=&quot;primary&quot;&gt;일차&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="b3a2f356577f35c5a2c27fdf8b798609c666a3cb" translate="yes" xml:space="preserve">
          <source>Primary Expressions</source>
          <target state="translated">기본 표현</target>
        </trans-unit>
        <trans-unit id="4e8f8df8afc826ac060bfb0d62e551d0ff99da1a" translate="yes" xml:space="preserve">
          <source>PrimaryAllocator</source>
          <target state="translated">PrimaryAllocator</target>
        </trans-unit>
        <trans-unit id="d857a8da372b74a1cc781b95e1edf9b095a2c086" translate="yes" xml:space="preserve">
          <source>Primitive flow analysis for constructors</source>
          <target state="translated">생성자를위한 기본 흐름 분석</target>
        </trans-unit>
        <trans-unit id="e444e1937adba3a1cfd5d90963ca115ff04f5ee0" translate="yes" xml:space="preserve">
          <source>Print AST data structure in a nice format.</source>
          <target state="translated">좋은 형식으로 AST 데이터 구조를 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="52d58b69adddcbb01a0d9fb00892b30fc79f820b" translate="yes" xml:space="preserve">
          <source>Print DMD's logo with more debug information and error-reporting pointers.</source>
          <target state="translated">더 많은 디버그 정보와 오류보고 포인터로 DMD 로고를 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="741a8cf16a2a94a93e81f8799e908f88729eaa78" translate="yes" xml:space="preserve">
          <source>Print a deprecation message, may increase the global warning or error count depending on whether deprecations are ignored.</source>
          <target state="translated">지원 중단 메시지를 인쇄하면 지원 중단 여부에 따라 전체 경고 또는 오류 수가 증가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="781d287d963aa57ac1be0813cd2b7893ed3e2f42" translate="yes" xml:space="preserve">
          <source>Print a tip message with the prefix and highlighting.</source>
          <target state="translated">접두사와 강조 표시가있는 팁 메시지를 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="5c7e6858b23f26e525078100ff725440333b762c" translate="yes" xml:space="preserve">
          <source>Print a verbose message. Doesn't prefix or highlight messages.</source>
          <target state="translated">자세한 메시지를 인쇄하십시오. 메시지를 접두사 또는 강조 표시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="939daf2f0bcc7e74350bd013cf922548480474bd" translate="yes" xml:space="preserve">
          <source>Print a warning message, increasing the global warning count.</source>
          <target state="translated">전체 경고 수를 늘리면서 경고 메시지를 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="a5099c933532cca0e3d4637739e21ce65a47b1f3" translate="yes" xml:space="preserve">
          <source>Print additional details about a deprecation message. Doesn't increase the error count, or print an additional deprecation prefix.</source>
          <target state="translated">지원 중단 메시지에 대한 추가 정보를 인쇄하십시오. 오류 수를 늘리거나 추가 지원 중단 접두사를 인쇄하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0133338c129646ea634be83fd6cd4d3657feeeb0" translate="yes" xml:space="preserve">
          <source>Print additional details about a warning message. Doesn't increase the warning count or print an additional warning prefix.</source>
          <target state="translated">경고 메시지에 대한 추가 정보를 인쇄하십시오. 경고 수를 늘리거나 추가 경고 접두사를 인쇄하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="33c24f38922d7036946f23bec89d0ce87ce561bc" translate="yes" xml:space="preserve">
          <source>Print additional details about an error message. Doesn't increase the error count or print an additional error prefix.</source>
          <target state="translated">오류 메시지에 대한 추가 세부 사항을 인쇄하십시오. 오류 수를 늘리거나 추가 오류 접두사를 인쇄하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="058c115cad6e2e81008fb7ad2950801f7eec7c85" translate="yes" xml:space="preserve">
          <source>Print an error message, increasing the global error count.</source>
          <target state="translated">오류 메시지를 인쇄하여 전체 오류 수를 늘리십시오.</target>
        </trans-unit>
        <trans-unit id="32c85c57b0adc1c6b315e954d6c08dd2ae33e959" translate="yes" xml:space="preserve">
          <source>Print error message about invalid array operation.</source>
          <target state="translated">잘못된 배열 작업에 대한 오류 메시지를 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="2134fe32d9505f6bba77dbd00ce388244749ad04" translate="yes" xml:space="preserve">
          <source>Print out debugging information.</source>
          <target state="translated">디버깅 정보를 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="8057a71a3d3cdf62ae7ce1600345941a68ef4657" translate="yes" xml:space="preserve">
          <source>Printf Style Logging</source>
          <target state="translated">Printf 스타일 로깅</target>
        </trans-unit>
        <trans-unit id="301a2e2f71f4f27f14ddfdaf8e1d9264bd94293c" translate="yes" xml:space="preserve">
          <source>Printing values works as it does in C:</source>
          <target state="translated">값 인쇄는 C에서와 같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="a4ad095c527676644a2ddd8b5dfe7833cc2fa256" translate="yes" xml:space="preserve">
          <source>Prints message(s) if there are errors.</source>
          <target state="translated">오류가있는 경우 메시지를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="53bea7b855c92761fc53db7e7e657329722ff553" translate="yes" xml:space="preserve">
          <source>Prints:</source>
          <target state="translated">Prints:</target>
        </trans-unit>
        <trans-unit id="200585a082f7fe89384cf8d9108f15dc9692123d" translate="yes" xml:space="preserve">
          <source>Private Use Area</source>
          <target state="translated">개인 사용 영역</target>
        </trans-unit>
        <trans-unit id="e67d49b8486a78488c9fa13a7655377f61af5ded" translate="yes" xml:space="preserve">
          <source>Private_Use</source>
          <target state="translated">Private_Use</target>
        </trans-unit>
        <trans-unit id="0588b71974aef4ab5b2e1fdf75767f0460174967" translate="yes" xml:space="preserve">
          <source>Process handling</source>
          <target state="translated">공정 처리</target>
        </trans-unit>
        <trans-unit id="81e395fd50ec55eed1a5348cc557a1f4263ca816" translate="yes" xml:space="preserve">
          <source>Processing of command line options.</source>
          <target state="translated">명령 행 옵션 처리</target>
        </trans-unit>
        <trans-unit id="79ead62511e5ad3925246bd4a8ac726a0bf71b22" translate="yes" xml:space="preserve">
          <source>ProcessingInstruction &lt;code&gt;item&lt;/code&gt;</source>
          <target state="translated">처리 지침 &lt;code&gt;item&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e2f47028d237ad837b8d24f2b1944ca76172bb96" translate="yes" xml:space="preserve">
          <source>ProcessingInstruction[] &lt;strong id=&quot;pis&quot;&gt;pis&lt;/strong&gt;;</source>
          <target state="translated">ProcessingInstruction [] &lt;strong id=&quot;pis&quot;&gt;pis&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="c489df222ae40007dc782a56c157e5129ac37a34" translate="yes" xml:space="preserve">
          <source>Processor type (vendor-dependent). This should be visible ONLY for display purposes.</source>
          <target state="translated">프로세서 유형 (공급 업체에 따라 다름) 표시 목적으로 만 표시되어야합니다.</target>
        </trans-unit>
        <trans-unit id="1eed910bf79a6d98b77187f35780c01e434b332a" translate="yes" xml:space="preserve">
          <source>Produce a grayscale image of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Mandelbrot_set&quot;&gt;Mandelbrot set&lt;/a&gt; in binary &lt;a href=&quot;https://en.wikipedia.org/wiki/Netpbm_format&quot;&gt;Netpbm format&lt;/a&gt; to standard output.</source>
          <target state="translated">바이너리 &lt;a href=&quot;https://en.wikipedia.org/wiki/Netpbm_format&quot;&gt;Netpbm 형식&lt;/a&gt; 으로 &lt;a href=&quot;https://en.wikipedia.org/wiki/Mandelbrot_set&quot;&gt;설정된 Mandelbrot&lt;/a&gt; 의 회색조 이미지 를 표준 출력으로 생성합니다.</target>
        </trans-unit>
        <trans-unit id="3862ac3aed81b0f225a849a90d5cc5f40be9aa3c" translate="yes" xml:space="preserve">
          <source>Produce elem which increments the usage count for a particular line. Sets corresponding bit in bitmap &lt;code&gt;m.covb[linnum]&lt;/code&gt;. Used to implement -cov switch (coverage analysis).</source>
          <target state="translated">특정 라인의 사용량을 증가시키는 elem을 생성합니다. 비트 맵 &lt;code&gt;m.covb[linnum]&lt;/code&gt; 에 해당 비트를 설정합니다 . -cov 스위치 (범위 분석)를 구현하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="2ee701351b350f0300426cd783822031fe44f5fb" translate="yes" xml:space="preserve">
          <source>Programmers accustomed to explicitly managing memory allocation and deallocation will likely be skeptical of the benefits and efficacy of garbage collection. Experience both with new projects written with garbage collection in mind, and converting existing projects to garbage collection shows that:</source>
          <target state="translated">메모리 할당 및 할당 해제를 명시 적으로 관리하는 데 익숙한 프로그래머는 가비지 수집의 이점과 효능에 회의적 일 것입니다. 가비지 수집을 염두에두고 작성된 새 프로젝트와 기존 프로젝트를 가비지 수집으로 변환하면 다음과 같은 결과를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="dd387eddd2291f436a15934f732eb070c13f983c" translate="yes" xml:space="preserve">
          <source>Properties are functions that can be syntactically treated as if they were fields or variables. Properties can be read from or written to. A property is read by calling a method or function with no arguments; a property is written by calling a method or function with its argument being the value it is set to.</source>
          <target state="translated">속성은 마치 필드 또는 변수 인 것처럼 구문 적으로 처리 할 수있는 함수입니다. 속성을 읽거나 쓸 수 있습니다. 인수없이 메소드 나 함수를 호출하여 특성을 읽습니다. 속성은 인수가 설정된 값인 메소드 또는 함수를 호출하여 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="6d46d3190705bb371f9868ed9bf90c5d4d753b97" translate="yes" xml:space="preserve">
          <source>Properties for All Types</source>
          <target state="translated">모든 유형의 속성</target>
        </trans-unit>
        <trans-unit id="272b8921ce7d353cb8f3cf4775d9f488ee2f569c" translate="yes" xml:space="preserve">
          <source>Properties for Class Types</source>
          <target state="translated">클래스 타입의 프로퍼티</target>
        </trans-unit>
        <trans-unit id="895079fe34a3fbf080ac0e62bf915acb42b2bc99" translate="yes" xml:space="preserve">
          <source>Properties for Floating Point Types</source>
          <target state="translated">부동 소수점 유형의 속성</target>
        </trans-unit>
        <trans-unit id="fc0bfcb689361cebbe86638a9e8cd2b0d58550ef" translate="yes" xml:space="preserve">
          <source>Properties for Integral Types</source>
          <target state="translated">정수 유형의 속성</target>
        </trans-unit>
        <trans-unit id="7c12bf8aa65674a95589ff691b3585505400d756" translate="yes" xml:space="preserve">
          <source>Properties for associative arrays are:</source>
          <target state="translated">연관 배열의 속성은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ebb627686689409a93bdc19fa3a749dd5b3039f5" translate="yes" xml:space="preserve">
          <source>Properties for getting (and possibly setting) the approximate maximum length of a shared freelist.</source>
          <target state="translated">공유 프리리스트의 대략적인 최대 길이를 가져오고 설정하기위한 특성.</target>
        </trans-unit>
        <trans-unit id="d8ca5bf11ef59c3e8e3df9efe7fd4dd627f9d892" translate="yes" xml:space="preserve">
          <source>Properties for getting (and possibly setting) the bounds. Setting bounds is allowed only once , and before any allocation takes place. Otherwise, the primitives have the same semantics as those of &lt;code&gt;FreeList&lt;/code&gt;.</source>
          <target state="translated">범위를 가져오고 설정하기위한 속성입니다. 범위 설정은 한 번만 허용되며 할당이 발생하기 전에 허용됩니다. 그렇지 않으면 프리미티브는 &lt;code&gt;FreeList&lt;/code&gt; 와 동일한 의미를 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="2b393346b666625fd355fd7149a1980f7d9e6881" translate="yes" xml:space="preserve">
          <source>Property Examples</source>
          <target state="translated">속성 예</target>
        </trans-unit>
        <trans-unit id="14fa0a936b7797ccd49640d8abe1784758e3862e" translate="yes" xml:space="preserve">
          <source>Property Functions</source>
          <target state="translated">속성 함수</target>
        </trans-unit>
        <trans-unit id="5dbcb2d0cc6ae723ca2eccf347d83251ccd8b303" translate="yes" xml:space="preserve">
          <source>Property returning &lt;code&gt;true&lt;/code&gt; if and only if the array has no elements.</source>
          <target state="translated">배열에 요소가없는 경우에만 속성을 반환 &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="065210cf38be02dc39be511bd0b3551ba9de6228" translate="yes" xml:space="preserve">
          <source>Property returning &lt;code&gt;true&lt;/code&gt; if and only if the container has no elements.</source>
          <target state="translated">컨테이너에 요소가없는 경우에만 &lt;code&gt;true&lt;/code&gt; 를 반환하는 속성 입니다.</target>
        </trans-unit>
        <trans-unit id="40a7205dce63e4d8a540ba5fc2d7d36f2cc7edd8" translate="yes" xml:space="preserve">
          <source>Property that indicates if this is a valid, alive socket.</source>
          <target state="translated">유효한 살아있는 소켓인지 나타내는 속성입니다.</target>
        </trans-unit>
        <trans-unit id="aafe895a0026094ff428b9d225a89af65181ecb4" translate="yes" xml:space="preserve">
          <source>Prot &lt;code&gt;protection&lt;/code&gt;</source>
          <target state="translated">단백질 &lt;code&gt;protection&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1ed77c3f7ffc41a33eadccef5727dc7c97079235" translate="yes" xml:space="preserve">
          <source>Protocol</source>
          <target state="translated">Protocol</target>
        </trans-unit>
        <trans-unit id="07c6a3380801fe033fe48fab273c8c480f2ce675" translate="yes" xml:space="preserve">
          <source>ProtocolType &lt;strong id=&quot;protocol&quot;&gt;protocol&lt;/strong&gt;;</source>
          <target state="translated">ProtocolType &lt;strong id=&quot;protocol&quot;&gt;프로토콜&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="1acbf21228a87baaefe83afa17793b9744907136" translate="yes" xml:space="preserve">
          <source>ProtocolType &lt;strong id=&quot;type&quot;&gt;type&lt;/strong&gt;;</source>
          <target state="translated">프로토콜 &lt;strong id=&quot;type&quot;&gt;타입&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="7c56749d7bcd9cdca2934b133e033e63522d618f" translate="yes" xml:space="preserve">
          <source>Provide a CURLShare for mutexing non-ts data</source>
          <target state="translated">비 ts 데이터를 뮤텍스 팅하기위한 CURLShare 제공</target>
        </trans-unit>
        <trans-unit id="1929edddaabf41eee663a24b280cada674c28d3e" translate="yes" xml:space="preserve">
          <source>Provide a human readable representation</source>
          <target state="translated">사람이 읽을 수있는 표현 제공</target>
        </trans-unit>
        <trans-unit id="e164562de1900a7450845d929e5ec99bafad7e86" translate="yes" xml:space="preserve">
          <source>Provide out-of-band access to the original C argc/argv passed to this program via main(argc,argv).</source>
          <target state="translated">main (argc, argv)를 통해이 프로그램으로 전달 된 원래 C argc / argv에 대한 대역 외 액세스를 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="b0d43391e49e267e8e9c3011757825bb2e5aba5c" translate="yes" xml:space="preserve">
          <source>Provide the .dup array property.</source>
          <target state="translated">.dup 배열 특성을 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="884cd93143fb3cc6d0b5ce44736f5e3b20a102a8" translate="yes" xml:space="preserve">
          <source>Provide the .idup array property.</source>
          <target state="translated">.idup 배열 특성을 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="f41856ba90560f011a0a6b5a85e291fe656f3fca" translate="yes" xml:space="preserve">
          <source>Provided Logger</source>
          <target state="translated">제공된 로거</target>
        </trans-unit>
        <trans-unit id="e1a88ee373473fd057a8492c11452ee411c1a4f5" translate="yes" xml:space="preserve">
          <source>Provided for de-allocation in the same translation unit that did the allocation. Added in libcurl 7.10</source>
          <target state="translated">할당을 수행 한 동일한 변환 단위에서 할당 해제를 제공합니다. libcurl 7.10에서 추가됨</target>
        </trans-unit>
        <trans-unit id="1f2030ef991f6e1b4bbd9b294ac641d24cefdf25" translate="yes" xml:space="preserve">
          <source>Provides a list of all threads currently being tracked by the system. Note that threads in the returned array might no longer run (see &lt;code&gt;Thread.&lt;/code&gt;&lt;a href=&quot;#isRunning&quot;&gt;&lt;code&gt;isRunning&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">시스템에서 현재 추적중인 모든 스레드 목록을 제공합니다. 반환 된 배열의 스레드가 더 이상 실행되지 않을 수 있습니다 ( &lt;code&gt;Thread.&lt;/code&gt; &lt;a href=&quot;#isRunning&quot;&gt; &lt;code&gt;isRunning&lt;/code&gt; &lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="4c7af553837fa20372e82bd10fd1fbdacc0fefe6" translate="yes" xml:space="preserve">
          <source>Provides a new scope with &lt;code&gt;STC.deprecated_&lt;/code&gt; and &lt;code&gt;Scope.depdecl&lt;/code&gt; set</source>
          <target state="translated">&lt;code&gt;STC.deprecated_&lt;/code&gt; 및 &lt;code&gt;Scope.depdecl&lt;/code&gt; 세트를 사용하여 새 범위를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="8bf9f03cd2cf31405fbc05f388ba616c27769697" translate="yes" xml:space="preserve">
          <source>Provides a reference to the calling fiber or null if no fiber is currently active.</source>
          <target state="translated">발신 파이버에 대한 참조를 제공하거나 현재 활성화 된 파이버가없는 경우 null을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="23bb9371df7b9c17559203a212a9ba678642eb9a" translate="yes" xml:space="preserve">
          <source>Provides a reference to the calling thread.</source>
          <target state="translated">호출 스레드에 대한 참조를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ee41bee9bb183a410298e4abe02e56b8aa459d71" translate="yes" xml:space="preserve">
          <source>Provides an explanation for and corrective action to take if the associated declaration is marked as deprecated.</source>
          <target state="translated">관련 선언이 더 이상 사용되지 않는 것으로 표시되는 경우 설명 및 수정 조치를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="7acadd30bb0f6451e04d1ebd324866714956a1be" translate="yes" xml:space="preserve">
          <source>Provides convenient access to date and time representations.</source>
          <target state="translated">날짜 및 시간 표현에 편리하게 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e43a7b7c99235aea804390e292b91087037668d" translate="yes" xml:space="preserve">
          <source>Provides indexed access into the container. The index type is container-defined. A container may define several index types (and consequently overloaded indexing).</source>
          <target state="translated">컨테이너에 대한 인덱스 액세스를 제공합니다. 인덱스 유형은 컨테이너 정의입니다. 컨테이너는 여러 인덱스 유형을 정의 할 수 있습니다 (따라서 오버로드 된 인덱싱).</target>
        </trans-unit>
        <trans-unit id="6421abde57ae539842411bf094700ed30d80091f" translate="yes" xml:space="preserve">
          <source>Provides protocol-independent parsing of network addresses. Does not attempt name resolution. Uses &lt;code&gt;getAddressInfo&lt;/code&gt; with &lt;code&gt;AddressInfoFlags.NUMERICHOST&lt;/code&gt; if the current system supports it, and &lt;code&gt;InternetAddress&lt;/code&gt; otherwise.</source>
          <target state="translated">네트워크 주소의 프로토콜 독립적 구문 분석을 제공합니다. 이름 확인을 시도하지 않습니다. 현재 시스템에서 지원하는 경우 &lt;code&gt;getAddressInfo&lt;/code&gt; 를 &lt;code&gt;AddressInfoFlags.NUMERICHOST&lt;/code&gt; 와 함께 사용 하고 그렇지 않으면 &lt;code&gt;InternetAddress&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="31663ee024ce588c5fc30aa3c89a97bcb8794f25" translate="yes" xml:space="preserve">
          <source>Provides protocol-independent translation from host names to socket addresses. If advanced functionality is not required, consider using &lt;code&gt;getAddress&lt;/code&gt; for compatibility with older systems.</source>
          <target state="translated">호스트 이름에서 소켓 주소로 프로토콜 독립적 변환을 제공합니다. 고급 기능이 필요하지 않은 경우 이전 시스템과의 호환성을 위해 &lt;code&gt;getAddress&lt;/code&gt; 사용을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="35232085e7ae211b046c3d788222344964d18067" translate="yes" xml:space="preserve">
          <source>Provides protocol-independent translation from host names to socket addresses. Uses &lt;code&gt;getAddressInfo&lt;/code&gt; if the current system supports it, and &lt;code&gt;InternetHost&lt;/code&gt; otherwise.</source>
          <target state="translated">호스트 이름에서 소켓 주소로 프로토콜 독립적 변환을 제공합니다. 현재 시스템에서 지원하는 경우 &lt;code&gt;getAddressInfo&lt;/code&gt; 를 사용 하고 그렇지 않으면 &lt;code&gt;InternetHost&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="a49a0184f0557159ebb6d84a10307308b1e09f15" translate="yes" xml:space="preserve">
          <source>Provides the conversions between the IANA time zone database time zone names (which POSIX systems use) and the time zone names that Windows uses.</source>
          <target state="translated">IANA 표준 시간대 데이터베이스 표준 시간대 이름 (POSIX 시스템에서 사용)과 Windows에서 사용하는 표준 시간대 이름 간의 변환을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c0979b8d4efc2e480740645f6f1ca0dee4fd8c8b" translate="yes" xml:space="preserve">
          <source>Providing a sub-name narrows down the list of time zones (which can number in the thousands). For example, passing in &quot;America&quot; as the sub-name returns only the time zones which begin with &quot;America&quot;.</source>
          <target state="translated">하위 이름을 제공하면 시간대 목록이 좁아집니다 (수천 개까지 가능). 예를 들어 하위 이름으로 &quot;America&quot;를 전달하면 &quot;America&quot;로 시작하는 시간대 만 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="9db0b745b6fa2951c35528cc5a431b74d851a2e8" translate="yes" xml:space="preserve">
          <source>Proxies</source>
          <target state="translated">Proxies</target>
        </trans-unit>
        <trans-unit id="d1cea344353e26ba6f1565ed661d94f610ce9e4f" translate="yes" xml:space="preserve">
          <source>Proxy</source>
          <target state="translated">Proxy</target>
        </trans-unit>
        <trans-unit id="b9644c1f78e0b772779a500097a7b6c2cd225a38" translate="yes" xml:space="preserve">
          <source>Proxy port</source>
          <target state="translated">프록시 포트</target>
        </trans-unit>
        <trans-unit id="8ee0476a1b3f68f2a8b1652de253e3231c5a30a9" translate="yes" xml:space="preserve">
          <source>Proxy type</source>
          <target state="translated">프록시 유형</target>
        </trans-unit>
        <trans-unit id="b269c29253f44a590c2375615bb821fb27b24ed8" translate="yes" xml:space="preserve">
          <source>Pruning and Filling</source>
          <target state="translated">가지 치기 및 채우기</target>
        </trans-unit>
        <trans-unit id="7e4b062c9df92c18899e0d640bf2c977c25ac1c4" translate="yes" xml:space="preserve">
          <source>Ps</source>
          <target state="translated">Ps</target>
        </trans-unit>
        <trans-unit id="bfec143c19b8a7da8ef2986bfdff976c6539b3dc" translate="yes" xml:space="preserve">
          <source>Pseudo-Random Number Generator</source>
          <target state="translated">의사 난수 생성기</target>
        </trans-unit>
        <trans-unit id="2275514eead6bd6a3b3aecc0fd0641f0d282d668" translate="yes" xml:space="preserve">
          <source>Pseudo-random number generators.</source>
          <target state="translated">의사 난수 생성기.</target>
        </trans-unit>
        <trans-unit id="1d68a19c2870443aa0522030150bb71ec07a7c22" translate="yes" xml:space="preserve">
          <source>Public API enums for RTSP requests</source>
          <target state="translated">RTSP 요청을위한 퍼블릭 API 열거 형</target>
        </trans-unit>
        <trans-unit id="c0ddaff13e39f258c8525deac888ae91ddab69de" translate="yes" xml:space="preserve">
          <source>Public Imports</source>
          <target state="translated">공공 수입</target>
        </trans-unit>
        <trans-unit id="3bc0e9d0786bebb377ec905ced131e92536f610b" translate="yes" xml:space="preserve">
          <source>Public or exported non-static member functions cannot be called from within an invariant.</source>
          <target state="translated">고정 또는 내 보낸 비 정적 멤버 함수는 고정 변수 내에서 호출 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="68fc7bd4bc44e3818645b5f17ee1089ffb95b680" translate="yes" xml:space="preserve">
          <source>Punctuation</source>
          <target state="translated">Punctuation</target>
        </trans-unit>
        <trans-unit id="531399b1b6f34aa45ee64387cb3aca5b2ccb7f93" translate="yes" xml:space="preserve">
          <source>Punctuation Escapes</source>
          <target state="translated">문장 부호 탈출</target>
        </trans-unit>
        <trans-unit id="84cc29a9cb3f424e51bf299820cc87ee23488159" translate="yes" xml:space="preserve">
          <source>Pure Constructors</source>
          <target state="translated">순수 생성자</target>
        </trans-unit>
        <trans-unit id="ea63ccb580688f825b1a702a02a1126819fcc769" translate="yes" xml:space="preserve">
          <source>Pure Functions</source>
          <target state="translated">순수한 기능</target>
        </trans-unit>
        <trans-unit id="315b76c64c484cf690522b3a45fd3980c19e88bf" translate="yes" xml:space="preserve">
          <source>Pure destructors do not benefit of special elision.</source>
          <target state="translated">순수한 소멸자는 특별한 제거 효과를 얻지 못합니다.</target>
        </trans-unit>
        <trans-unit id="6dfc0292d2db1992a61938a7d5118720b35feada" translate="yes" xml:space="preserve">
          <source>Pure functions are functions that cannot directly access global or static mutable state. &lt;code&gt;pure&lt;/code&gt; guarantees that a pure function call won't access or modify any implicit state in the program.</source>
          <target state="translated">순수한 함수는 전역 또는 정적 변경 가능 상태에 직접 액세스 할 수없는 함수입니다. &lt;code&gt;pure&lt;/code&gt; 는 순수 함수 호출이 프로그램의 암시 적 상태에 액세스하거나 수정하지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="117c6cb152c7552d6af480d72545b235ac1e0db2" translate="yes" xml:space="preserve">
          <source>Pure real FFTs are automatically detected and the relevant optimizations are performed.</source>
          <target state="translated">순수 실제 FFT가 자동으로 감지되고 관련 최적화가 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="dc905a4c2483255a5cc6406f4bafbb5f6c6e5b25" translate="yes" xml:space="preserve">
          <source>Pure variants of C's memory allocation functions &lt;code&gt;malloc&lt;/code&gt;, &lt;code&gt;calloc&lt;/code&gt;, and &lt;code&gt;realloc&lt;/code&gt; and deallocation function &lt;code&gt;free&lt;/code&gt;.</source>
          <target state="translated">C 메모리 할당 함수의 순수 변형 인 &lt;code&gt;malloc&lt;/code&gt; , &lt;code&gt;calloc&lt;/code&gt; 및 &lt;code&gt;realloc&lt;/code&gt; 및 deallocation 함수는 &lt;code&gt;free&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="5338b2491e024cedccb4669dda5e88c429cbc759" translate="yes" xml:space="preserve">
          <source>Push this onto stack of chained exceptions.</source>
          <target state="translated">이것을 체인 예외 스택에 푸시하십시오.</target>
        </trans-unit>
        <trans-unit id="6c8ff93bbe2e1f6cd06cf16810831791e43f1aba" translate="yes" xml:space="preserve">
          <source>Pushes an array of elements at once. It is more efficient to push as much data as possible in a single call. On platforms that do not support unaligned reads (MIPS or old ARM chips), the compiler may produce slower code to ensure correctness.</source>
          <target state="translated">요소 배열을 한 번에 푸시합니다. 한 번의 호출로 최대한 많은 데이터를 푸시하는 것이 더 효율적입니다. 정렬되지 않은 읽기 (MIPS 또는 이전 ARM 칩)를 지원하지 않는 플랫폼에서 컴파일러는 정확성을 보장하기 위해 느린 코드를 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f02cd2c1d42500d205a7a9f6e31677df9e57402e" translate="yes" xml:space="preserve">
          <source>Put a &lt;code&gt;Task&lt;/code&gt; object on the back of the task queue. The &lt;code&gt;Task&lt;/code&gt; object may be passed by pointer or reference.</source>
          <target state="translated">작업 대기열 뒤에 &lt;code&gt;Task&lt;/code&gt; 개체를 넣습니다 . &lt;code&gt;Task&lt;/code&gt; 객체는 포인터 또는 참조에 의해 전달 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8aff8881ff753eff33815e662bf18604194c6243" translate="yes" xml:space="preserve">
          <source>Put remainder bytes. This must be called only once after &lt;code&gt;putElement&lt;/code&gt; and before &lt;code&gt;finalize&lt;/code&gt;.</source>
          <target state="translated">나머지 바이트를 넣습니다. &lt;code&gt;putElement&lt;/code&gt; 다음 과 &lt;code&gt;finalize&lt;/code&gt; 전에 한 번만 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="13df9524e7a06f1a5560da8f072fec09f3ee42e5" translate="yes" xml:space="preserve">
          <source>Put with data senders:</source>
          <target state="translated">데이터 발신자 포함 :</target>
        </trans-unit>
        <trans-unit id="7c24540773c24c1085b8ed53542711eb6b9d88cc" translate="yes" xml:space="preserve">
          <source>Puts the formatting result into a preallocated array.</source>
          <target state="translated">서식 결과를 미리 할당 된 배열에 넣습니다.</target>
        </trans-unit>
        <trans-unit id="c3156e00d3c2588c639e0d3cf6821258b05761c7" translate="yes" xml:space="preserve">
          <source>Q</source>
          <target state="translated">Q</target>
        </trans-unit>
        <trans-unit id="fbeba94c4e9b16a43991c5615fab8c4406d33231" translate="yes" xml:space="preserve">
          <source>Qt</source>
          <target state="translated">Qt</target>
        </trans-unit>
        <trans-unit id="0648eeac65ea5d646b0dae2aea4416b279c9f6d0" translate="yes" xml:space="preserve">
          <source>QualifiedIdentifier</source>
          <target state="translated">QualifiedIdentifier</target>
        </trans-unit>
        <trans-unit id="e1acf66aec4ab7e4378cf35aa85b3c0a8f0caa32" translate="yes" xml:space="preserve">
          <source>Qualifier Groups</source>
          <target state="translated">예선 그룹</target>
        </trans-unit>
        <trans-unit id="e3dc7b91ec0fe4c470a2d5bf2412ad40efa0845e" translate="yes" xml:space="preserve">
          <source>Qualifying an entire struct as &lt;code&gt;shared&lt;/code&gt; correctly propagates the attribute to the generated postblits:</source>
          <target state="translated">전체 구조체를 &lt;code&gt;shared&lt;/code&gt; 로 규정하면 생성 된 포스트 블리트로 속성이 올바르게 전파됩니다.</target>
        </trans-unit>
        <trans-unit id="6078532ab203b30b0c8e32bb799fd87d65f55236" translate="yes" xml:space="preserve">
          <source>Quantifiers</source>
          <target state="translated">Quantifiers</target>
        </trans-unit>
        <trans-unit id="325b570b7ef26f5fe5603d9f1c6c1cfed0baf35b" translate="yes" xml:space="preserve">
          <source>Queries the GC whether the current thread is running object finalization as part of a GC collection, or an explicit call to runFinalizers.</source>
          <target state="translated">현재 스레드가 GC 컬렉션의 일부로 개체 마무리를 실행하는지 아니면 runFinalizers에 대한 명시 적 호출을 실행하는지 GC에 쿼리합니다.</target>
        </trans-unit>
        <trans-unit id="aa41452b81cfc8871bafa9d988f53a1bb4ce356d" translate="yes" xml:space="preserve">
          <source>Queries whether &lt;code&gt;b&lt;/code&gt; has been allocated with this region.</source>
          <target state="translated">이 지역에 &lt;code&gt;b&lt;/code&gt; 가 할당 되었는지 여부를 쿼리합니다 .</target>
        </trans-unit>
        <trans-unit id="57517f03e9aaf59c82ec84806650edb8f5d7492d" translate="yes" xml:space="preserve">
          <source>Queries whether a &lt;code&gt;Checked!(T, WithNaN)&lt;/code&gt; object is not a number (NaN).</source>
          <target state="translated">&lt;code&gt;Checked!(T, WithNaN)&lt;/code&gt; 개체가 숫자 (NaN)가 아닌지 쿼리합니다 .</target>
        </trans-unit>
        <trans-unit id="625af40606e435d60c7571eb3eaed21802aa70ee" translate="yes" xml:space="preserve">
          <source>Query Progress Callbacks</source>
          <target state="translated">쿼리 진행 콜백</target>
        </trans-unit>
        <trans-unit id="e1fe6e5e1618fc5d36b948e04dffddb60ff1e31e" translate="yes" xml:space="preserve">
          <source>Query the text for a Windows error code, as returned by &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms679360.aspx&quot;&gt; &lt;code&gt;GetLastError&lt;/code&gt;&lt;/a&gt;, as a D string.</source>
          <target state="translated">&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms679360.aspx&quot;&gt; &lt;code&gt;GetLastError&lt;/code&gt; &lt;/a&gt; 에서 반환 한 Windows 오류 코드의 텍스트를 D 문자열로 쿼리합니다.</target>
        </trans-unit>
        <trans-unit id="67ae067d4b34a9534ef6fc12c8532dc45490f123" translate="yes" xml:space="preserve">
          <source>Query the text for a Windows error code, as returned by &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms679360.aspx&quot;&gt; &lt;code&gt;GetLastError&lt;/code&gt;&lt;/a&gt;, as a D string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be0224eb0002c0644b5fe076b5840980c58dd4dc" translate="yes" xml:space="preserve">
          <source>Queueing all unreachable memory that needs destructors to run.</source>
          <target state="translated">소멸자를 실행해야하는 도달 할 수없는 모든 메모리를 큐에 넣습니다.</target>
        </trans-unit>
        <trans-unit id="a56dc6a151cbc05cb8609d8f932b0767b30f6d0e" translate="yes" xml:space="preserve">
          <source>Quick and dirty code need not write any error handling code at all, and don't need to check for errors. The errors will be caught, an appropriate message displayed, and the program gracefully shut down all by default.</source>
          <target state="translated">빠르고 더러운 코드는 오류 처리 코드를 전혀 작성할 필요가 없으며 오류를 확인할 필요가 없습니다. 오류가 발생하고 적절한 메시지가 표시되며 프로그램은 기본적으로 모두 정상적으로 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="f833b1b092080445c51762180493fddf5376651b" translate="yes" xml:space="preserve">
          <source>Quick and dirty programs are not worth writing tedious error handling code for, and so such utilities tend to be like using a table saw with no blade guards.</source>
          <target state="translated">빠르고 더러운 프로그램은 지루한 오류 처리 코드를 작성할 가치가 없으므로 이러한 유틸리티는 블레이드 가드가없는 테이블 톱을 사용하는 경향이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c8b0af5874919bbda28b1f5afc70b825a7fdc39" translate="yes" xml:space="preserve">
          <source>Quotation_Mark</source>
          <target state="translated">Quotation_Mark</target>
        </trans-unit>
        <trans-unit id="7b0257ce75add65485cb879a8ababbebc2270b68" translate="yes" xml:space="preserve">
          <source>Quotes</source>
          <target state="translated">Quotes</target>
        </trans-unit>
        <trans-unit id="8cf3dc59ab6c635606edde6eb01c2303741881c7" translate="yes" xml:space="preserve">
          <source>Quotes a command-line argument in a manner conforming to the behavior of &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/bb776391(v=vs.85).aspx&quot;&gt;CommandLineToArgvW&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/bb776391(v=vs.85).aspx&quot;&gt;CommandLineToArgvW&lt;/a&gt; 의 동작에 맞는 방식으로 명령 행 인수를 인용합니다 .</target>
        </trans-unit>
        <trans-unit id="514d330f764abab7f39f80f5e6630ad5cf282d09" translate="yes" xml:space="preserve">
          <source>Quotes a command-line argument in a manner conforming to the behavior of &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/bb776391(v=vs.85).aspx&quot;&gt;CommandLineToArgvW&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06576556d1ad802f247cad11ae748be47b70cd9c" translate="yes" xml:space="preserve">
          <source>R</source>
          <target state="translated">R</target>
        </trans-unit>
        <trans-unit id="46b2a3379a4b9c621f2cae3cf633f16ef00c9de0" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;choices&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;choices&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7266e22ca42368c5ac28f6cdad79f6a1c7516362" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;fax&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;fax&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e25e4996cd19545180422dc753d9814e4b846890" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;fbx&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;fbx&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e55fb466207612f43c06a1f232ada1085268cc4e" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;haystack&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;haystack&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="424b7c75c63229e3fcc721a2f15ae19e6dbfa620" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;input&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;input&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="71188bd33ad186c201291e74f2ea18f5a3641f40" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;name&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;name&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="13640b2ef57c08e53edacc90554f201319c4bd93" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;path&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;path&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cfca0b9b62f6dec32b0f106ee7bd90408f6db66d" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;pathname&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;pathname&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ebe092c47cea2696cd458501faa3c0952875efca" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;r&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;r&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ab468fbdc306faaa419a93d0688406232175b4c8" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;range&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;range&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e695ad661c9be1e85180c63d44f9ddf593365841" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;re&lt;/code&gt;</source>
          <target state="translated">R의 &lt;code&gt;re&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="97fe6c090c86e02140df1df65d1dc3a2d3f9a4bd" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4452828287fae2c2221b85f0d6fd57783e9416bf" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;sep&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;sep&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d10d6d4b9dfbf3470b6476d9b518976a16168f99" translate="yes" xml:space="preserve">
          <source>R &lt;code&gt;to&lt;/code&gt;</source>
          <target state="translated">R &lt;code&gt;to&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="50863302124895c67709c985bbc8750a0dc5ed66" translate="yes" xml:space="preserve">
          <source>R &lt;strong id=&quot;drop&quot;&gt;drop&lt;/strong&gt;(R)(R range, size_t n)</source>
          <target state="translated">R &lt;strong id=&quot;drop&quot;&gt;드롭&lt;/strong&gt; (R) (R 범위, size_t n)</target>
        </trans-unit>
        <trans-unit id="fb325cd844a163a42462ecda91c85f8764d32e50" translate="yes" xml:space="preserve">
          <source>R &lt;strong id=&quot;dropBack&quot;&gt;dropBack&lt;/strong&gt;(R)(R range, size_t n)</source>
          <target state="translated">R &lt;strong id=&quot;dropBack&quot;&gt;드롭 백&lt;/strong&gt; (R) (R 범위, size_t n)</target>
        </trans-unit>
        <trans-unit id="1a4956e36adf7f6c345474abdad19d0416fb6771" translate="yes" xml:space="preserve">
          <source>R &lt;strong id=&quot;dropBackExactly&quot;&gt;dropBackExactly&lt;/strong&gt;(R)(R range, size_t n)</source>
          <target state="translated">R &lt;strong id=&quot;dropBackExactly&quot;&gt;dropBack 정확하게&lt;/strong&gt; (R) (R 범위, size_t n)</target>
        </trans-unit>
        <trans-unit id="5636cd7e75f55155f0813afda029b296c014e5f0" translate="yes" xml:space="preserve">
          <source>R &lt;strong id=&quot;dropBackOne&quot;&gt;dropBackOne&lt;/strong&gt;(R)(R range)</source>
          <target state="translated">R &lt;strong id=&quot;dropBackOne&quot;&gt;dropBackOne&lt;/strong&gt; (R) (R 범위)</target>
        </trans-unit>
        <trans-unit id="85883c8c957d5efc82ef442a74c58c532150dd43" translate="yes" xml:space="preserve">
          <source>R &lt;strong id=&quot;dropExactly&quot;&gt;dropExactly&lt;/strong&gt;(R)(R range, size_t n)</source>
          <target state="translated">R &lt;strong id=&quot;dropExactly&quot;&gt;드롭 정확히&lt;/strong&gt; (R) (R 범위, size_t n)</target>
        </trans-unit>
        <trans-unit id="f9cad92fc189a821863e6343ed3112c5c45f7ef5" translate="yes" xml:space="preserve">
          <source>R &lt;strong id=&quot;dropOne&quot;&gt;dropOne&lt;/strong&gt;(R)(R range)</source>
          <target state="translated">R &lt;strong id=&quot;dropOne&quot;&gt;드롭 원&lt;/strong&gt; (R) (R 범위)</target>
        </trans-unit>
        <trans-unit id="11e2a417124b25e85e961d2746bff4dcf2ee0fa8" translate="yes" xml:space="preserve">
          <source>R &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt;(String)(String i)</source>
          <target state="translated">R &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt; (문자열) (문자열 i)</target>
        </trans-unit>
        <trans-unit id="e8c816cd865443df3fb58bfeee9cf533972311c0" translate="yes" xml:space="preserve">
          <source>R &lt;strong id=&quot;replace&quot;&gt;replace&lt;/strong&gt;(alias fun, R, RegEx)(R input, RegEx re)</source>
          <target state="translated">R &lt;strong id=&quot;replace&quot;&gt;바꾸기&lt;/strong&gt; (별칭 재미, R, RegEx) (R 입력, RegEx re)</target>
        </trans-unit>
        <trans-unit id="366f82d7690e508f3f12c24c9b5263e1348fd152" translate="yes" xml:space="preserve">
          <source>R &lt;strong id=&quot;replace&quot;&gt;replace&lt;/strong&gt;(alias scheme = match, R, C, RegEx)(R input, RegEx re, const(C)[] format)</source>
          <target state="translated">R &lt;strong id=&quot;replace&quot;&gt;바꾸기&lt;/strong&gt; (별칭 체계 = 일치, R, C, RegEx) (R 입력, RegEx re, const (C) [] 형식)</target>
        </trans-unit>
        <trans-unit id="7d01ce94655a4a56f469c103c1d6a5369ff08a56" translate="yes" xml:space="preserve">
          <source>R &lt;strong id=&quot;replaceFirst&quot;&gt;replaceFirst&lt;/strong&gt;(R, C, RegEx)(R input, RegEx re, const(C)[] format)</source>
          <target state="translated">R &lt;strong id=&quot;replaceFirst&quot;&gt;replaceFirst&lt;/strong&gt; (R, C, RegEx) (R 입력, RegEx re, const (C) [] 형식)</target>
        </trans-unit>
        <trans-unit id="20a08fddc23874fdd02d8fa4d8a4a5267450724d" translate="yes" xml:space="preserve">
          <source>R &lt;strong id=&quot;replaceFirst&quot;&gt;replaceFirst&lt;/strong&gt;(alias fun, R, RegEx)(R input, RegEx re)</source>
          <target state="translated">R &lt;strong id=&quot;replaceFirst&quot;&gt;replaceFirst&lt;/strong&gt; (별명 fun, R, RegEx) (R 입력, RegEx re)</target>
        </trans-unit>
        <trans-unit id="067f32da0babc4ff738d19aab110dc4b8e9152a3" translate="yes" xml:space="preserve">
          <source>R r</source>
          <target state="translated">R r</target>
        </trans-unit>
        <trans-unit id="8a02cd9a7652426a1cc33b70edf17e072b64bb13" translate="yes" xml:space="preserve">
          <source>R* &lt;code&gt;range&lt;/code&gt;</source>
          <target state="translated">R * &lt;code&gt;range&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d3c006177515d161711463dc36ea326d00dd6c50" translate="yes" xml:space="preserve">
          <source>R-03371-37637</source>
          <target state="translated">R-03371-37637</target>
        </trans-unit>
        <trans-unit id="ed224262865068e4e98f69898960d0c04f8bcdf2" translate="yes" xml:space="preserve">
          <source>R-37514-35566</source>
          <target state="translated">R-37514-35566</target>
        </trans-unit>
        <trans-unit id="aa18ab4548b06f1904b620f598aa53d4dd7a5133" translate="yes" xml:space="preserve">
          <source>R-51971-34154</source>
          <target state="translated">R-51971-34154</target>
        </trans-unit>
        <trans-unit id="791a7d0746cccccb32d298c2a7ae029256ba4f41" translate="yes" xml:space="preserve">
          <source>R1 &lt;code&gt;from&lt;/code&gt;</source>
          <target state="translated">R1 &lt;code&gt;from&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a50f0d4d22cfd7772851244d5316a7272acc327a" translate="yes" xml:space="preserve">
          <source>R1 &lt;code&gt;haystack&lt;/code&gt;</source>
          <target state="translated">R1 &lt;code&gt;haystack&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3d30d08fbaf4f299a6ce6f18a5caaa4b5e3a4bc8" translate="yes" xml:space="preserve">
          <source>R1 &lt;code&gt;inputRange&lt;/code&gt;</source>
          <target state="translated">R1 입력 &lt;code&gt;inputRange&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="56e3536a8b44d4a1bd8b6852808418db9282c982" translate="yes" xml:space="preserve">
          <source>R1 &lt;code&gt;path&lt;/code&gt;</source>
          <target state="translated">R1 &lt;code&gt;path&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8ce974c87042be5646c37a9d903e4dc28ffe45da" translate="yes" xml:space="preserve">
          <source>R1 &lt;code&gt;r1&lt;/code&gt;</source>
          <target state="translated">R1 &lt;code&gt;r1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f79e33e37a7032419b3c7f02e2aeab2ab3a99cb8" translate="yes" xml:space="preserve">
          <source>R1 &lt;code&gt;range1&lt;/code&gt;</source>
          <target state="translated">R1 &lt;code&gt;range1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b7bb559e01e420d7f99325c9034331e25d0feda" translate="yes" xml:space="preserve">
          <source>R1 &lt;code&gt;source&lt;/code&gt;</source>
          <target state="translated">R1 &lt;code&gt;source&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cec38db6f44458a89fca4706fe9db3eeb0925121" translate="yes" xml:space="preserve">
          <source>R1 &lt;strong id=&quot;find&quot;&gt;find&lt;/strong&gt;(alias pred = &quot;a == b&quot;, R1, R2)(R1 haystack, scope R2 needle)</source>
          <target state="translated">R1 &lt;strong id=&quot;find&quot;&gt;찾기&lt;/strong&gt; (별칭 pred = &quot;a == b&quot;, R1, R2) (R1 건초 더미, 스코프 R2 바늘)</target>
        </trans-unit>
        <trans-unit id="416e9ded6d684411bfae7ab98068a6cf65ed7a00" translate="yes" xml:space="preserve">
          <source>R2 &lt;code&gt;base&lt;/code&gt;</source>
          <target state="translated">R2 &lt;code&gt;base&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d762f078c8aae67290247417557af653d4c9d42" translate="yes" xml:space="preserve">
          <source>R2 &lt;code&gt;buffer&lt;/code&gt;</source>
          <target state="translated">R2 &lt;code&gt;buffer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6e17c192b2f05c757416a29ee552d3ef90c36764" translate="yes" xml:space="preserve">
          <source>R2 &lt;code&gt;needle&lt;/code&gt;</source>
          <target state="translated">R2 &lt;code&gt;needle&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d8a873ced34d741501067e5dbac4f4230c5409e3" translate="yes" xml:space="preserve">
          <source>R2 &lt;code&gt;outputRange&lt;/code&gt;</source>
          <target state="translated">R2 &lt;code&gt;outputRange&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd423d90d919393604a7c9af9f9e726e3ee924bf" translate="yes" xml:space="preserve">
          <source>R2 &lt;code&gt;r2&lt;/code&gt;</source>
          <target state="translated">R2 &lt;code&gt;r2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="712752c9f8be3668be2612d41bc3fc1045f791e0" translate="yes" xml:space="preserve">
          <source>R2 &lt;code&gt;range2&lt;/code&gt;</source>
          <target state="translated">R2의 &lt;code&gt;range2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="10ae534e9e912c0a565bb612503cd04d4b6c3d8e" translate="yes" xml:space="preserve">
          <source>R2 &lt;code&gt;range&lt;/code&gt;</source>
          <target state="translated">R2 &lt;code&gt;range&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="33874d4fed4fab1462ae102319663b9a069aac22" translate="yes" xml:space="preserve">
          <source>R2 &lt;code&gt;to&lt;/code&gt;</source>
          <target state="translated">R2 &lt;code&gt;to&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c90742e8cb6203dd2bfb9d9c4ee46c6e76e62bea" translate="yes" xml:space="preserve">
          <source>R2 &lt;code&gt;withThis&lt;/code&gt;</source>
          <target state="translated">R2 &lt;code&gt;withThis&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="78316945c53052fc58821336460ed4634e4ff00a" translate="yes" xml:space="preserve">
          <source>RAII (yes, it can work without exceptions)</source>
          <target state="translated">RAII (예, ​​예외없이 작동 할 수 있음)</target>
        </trans-unit>
        <trans-unit id="09dca383176e1e45e99b3ee60b7d74333cc1901f" translate="yes" xml:space="preserve">
          <source>RCIAllocator &lt;strong id=&quot;allocatorObject&quot;&gt;allocatorObject&lt;/strong&gt;(A)(A* pa);</source>
          <target state="translated">RCIAllocator &lt;strong id=&quot;allocatorObject&quot;&gt;할당 자&lt;/strong&gt; 객체 (A) (A * pa);</target>
        </trans-unit>
        <trans-unit id="91d7fa94c935a86a5398825578e63ee422be5ec3" translate="yes" xml:space="preserve">
          <source>RCIAllocator &lt;strong id=&quot;allocatorObject&quot;&gt;allocatorObject&lt;/strong&gt;(A)(auto ref A a)</source>
          <target state="translated">RCIAllocator &lt;strong id=&quot;allocatorObject&quot;&gt;할당 자&lt;/strong&gt; 객체 (A) (자동 참조 A a)</target>
        </trans-unit>
        <trans-unit id="7fcf7b01d91c0309ab3dab25512ada436e2044db" translate="yes" xml:space="preserve">
          <source>RCISharedAllocator &lt;strong id=&quot;sharedAllocatorObject&quot;&gt;sharedAllocatorObject&lt;/strong&gt;(A)(A* pa);</source>
          <target state="translated">RCISharedAllocator &lt;strong id=&quot;sharedAllocatorObject&quot;&gt;sharedAllocatorObject&lt;/strong&gt; (A) (A * pa);</target>
        </trans-unit>
        <trans-unit id="9a0b08a17aafe0f3eeef32e8158e597e5049b0db" translate="yes" xml:space="preserve">
          <source>REM is the value of x - y * n, where n is the integer nearest the exact value of x / y. If |n - x / y| == 0.5, n is even. If the result is zero, it has the same sign as x. Otherwise, the sign of the result is the sign of x / y. Precision mode has no effect on the remainder functions.</source>
          <target state="translated">REM은 x-y * n의 값입니다. 여기서 n은 x / y의 정확한 값에 가장 가까운 정수입니다. | n-x / y | 인 경우 == 0.5, n은 짝수입니다. 결과가 0이면 x와 같은 부호를 갖습니다. 그렇지 않으면 결과의 부호는 x / y의 부호입니다. 정밀 모드는 나머지 기능에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8c1185861af34828e57540e154679254cc1de862" translate="yes" xml:space="preserve">
          <source>RET &lt;strong id=&quot;retStyle&quot;&gt;retStyle&lt;/strong&gt;(TypeFunction tf, bool needsThis);</source>
          <target state="translated">RET &lt;strong id=&quot;retStyle&quot;&gt;retStyle&lt;/strong&gt; (TypeFunction tf, bool needsThis);</target>
        </trans-unit>
        <trans-unit id="d19cf5985fafdd0a13c43f47452c23390522b7bc" translate="yes" xml:space="preserve">
          <source>RET.stack if return value from function is on the stack, RET.regs otherwise</source>
          <target state="translated">함수의 반환 값이 스택에 있으면 RET.stack, 그렇지 않으면 RET.regs</target>
        </trans-unit>
        <trans-unit id="f3ae8b4785072e6df524d9714369c48076e4136a" translate="yes" xml:space="preserve">
          <source>RF &lt;code&gt;from&lt;/code&gt;</source>
          <target state="translated">RF &lt;code&gt;from&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf48f3d5bf7ea08ce5e6f45d9f362f9581e8b3b2" translate="yes" xml:space="preserve">
          <source>RFC 3986</source>
          <target state="translated">RFC 3986</target>
        </trans-unit>
        <trans-unit id="49e1bc88b1068da52ec405c6f119b166edb798fc" translate="yes" xml:space="preserve">
          <source>RFC 4122</source>
          <target state="translated">RFC 4122</target>
        </trans-unit>
        <trans-unit id="bc2b02e103b8e9f27fd35f47002cfdd117ae54d6" translate="yes" xml:space="preserve">
          <source>RFC 4122 defines different UUID versions. The version shows how a UUID was generated, e.g. a version 4 UUID was generated from a random number, a version 3 UUID from an MD5 hash of a name.</source>
          <target state="translated">RFC 4122는 다른 UUID 버전을 정의합니다. 버전은 UUID 생성 방법을 보여줍니다. 예를 들어 버전 4 UUID는 난수에서 생성되고 버전 3 UUID는 이름의 MD5 해시에서 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="5bd1d852604ecbde96eb1630eca7b030029c114a" translate="yes" xml:space="preserve">
          <source>RFC 4122 defines different UUID versions. The version shows how a UUID was generated, e.g. a version 4 UUID was generated from a random number, a version 3 UUID from an MD5 hash of a name. Returns the version used by this UUID.</source>
          <target state="translated">RFC 4122는 다른 UUID 버전을 정의합니다. 버전은 UUID 생성 방법을 보여줍니다. 예를 들어 버전 4 UUID는 난수에서 생성되고 버전 3 UUID는 이름의 MD5 해시에서 생성됩니다. 이 UUID가 사용하는 버전을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="573781f662bff5ee3bf9c4d12104558f4082fb6a" translate="yes" xml:space="preserve">
          <source>RFC 4122 defines different internal data layouts for UUIDs. Returns the format used by this UUID.</source>
          <target state="translated">RFC 4122는 UUID에 대한 다양한 내부 데이터 레이아웃을 정의합니다. 이 UUID에 의해 사용되는 형식을 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="2a95bd082af00e19a4610e5ef939415c5ce11021" translate="yes" xml:space="preserve">
          <source>RFC 4122 defines different internal data layouts for UUIDs. These are the UUID formats supported by this module. It's possible to read, compare and use all these Variants, but UUIDs generated by this module will always be in rfc4122 format.</source>
          <target state="translated">RFC 4122는 UUID에 대한 다양한 내부 데이터 레이아웃을 정의합니다. 이 모듈에서 지원하는 UUID 형식입니다. 이러한 모든 변형을 읽고 비교하고 사용할 수 있지만이 모듈에서 생성 된 UUID는 항상 rfc4122 형식입니다.</target>
        </trans-unit>
        <trans-unit id="0cc5b6f4e8fb3030bdcc57b4e95bb25566697f85" translate="yes" xml:space="preserve">
          <source>RFC 4122 isn't very clear on how UUIDs should be generated from names. It is possible that different implementations return different UUIDs for the same input, so be warned. The implementation for UTF-8 strings and byte arrays used by &lt;code&gt;std.uuid&lt;/code&gt; is compatible with Boost's implementation. &lt;code&gt;std.uuid&lt;/code&gt; guarantees that the same input to this function will generate the same output at any time, on any system (this especially means endianness doesn't matter).</source>
          <target state="translated">RFC 4122는 이름에서 UUID를 생성하는 방법에 대해 명확하지 않습니다. 다른 구현에서는 동일한 입력에 대해 다른 UUID를 반환 할 수 있으므로주의하십시오. &lt;code&gt;std.uuid&lt;/code&gt; 에서 사용하는 UTF-8 문자열 및 바이트 배열 의 구현은 Boost의 구현과 호환됩니다. &lt;code&gt;std.uuid&lt;/code&gt; 는이 기능에 대한 동일한 입력이 시스템에서 언제든지 동일한 출력을 생성하도록 보장합니다 (특히 엔디안이 중요하지 않음을 의미 함).</target>
        </trans-unit>
        <trans-unit id="2c7a893b503cfc38ba16ceb5692dcd724ac88416" translate="yes" xml:space="preserve">
          <source>RFC 4122 recommends to use Version 5 UUIDs (SHA-1) instead of Version 3 UUIDs (MD5) for new applications.</source>
          <target state="translated">RFC 4122는 새 응용 프로그램에 MD3 (Version 3 UUID) 대신 SHA-1 (Version 5 UUID)을 사용하도록 권장합니다.</target>
        </trans-unit>
        <trans-unit id="1a2e2c899753e0a3c51ae9565a6de46bc63deb6f" translate="yes" xml:space="preserve">
          <source>RFC 4648 - The Base16, Base32, and Base64 Data Encodings</source>
          <target state="translated">RFC 4648-Base16, Base32 및 Base64 데이터 인코딩</target>
        </trans-unit>
        <trans-unit id="aa203fcac8070f03e3861b552ee96fa7f237bae2" translate="yes" xml:space="preserve">
          <source>RFC 5321</source>
          <target state="translated">RFC 5321</target>
        </trans-unit>
        <trans-unit id="17c58504badf8c1787c4ac4f95c466fc696f2e50" translate="yes" xml:space="preserve">
          <source>RFC 5322</source>
          <target state="translated">RFC 5322</target>
        </trans-unit>
        <trans-unit id="735daace003912b5fecc445075fdfb455d272749" translate="yes" xml:space="preserve">
          <source>RFC 822 was the original spec (hence the function's name), whereas RFC 5322 is the current spec.</source>
          <target state="translated">RFC 822는 원래 스펙 (따라서 함수 이름) 인 반면 RFC 5322는 현재 스펙입니다.</target>
        </trans-unit>
        <trans-unit id="34df16ec4e939a336be88d7c573d53bfe4242745" translate="yes" xml:space="preserve">
          <source>RFC2616</source>
          <target state="translated">RFC2616</target>
        </trans-unit>
        <trans-unit id="3b6ff39841eb9f66194b85cd2a429c407a8477ca" translate="yes" xml:space="preserve">
          <source>RFC2616 Section 14.25</source>
          <target state="translated">RFC2616 섹션 14.25</target>
        </trans-unit>
        <trans-unit id="bb23083cf84c9e20bfaaa1a7cafd26ba2c9a83c9" translate="yes" xml:space="preserve">
          <source>RFC2821</source>
          <target state="translated">RFC2821</target>
        </trans-unit>
        <trans-unit id="42ae0d93633168fee4fb705fef08465852bd57ff" translate="yes" xml:space="preserve">
          <source>RFC2822</source>
          <target state="translated">RFC2822</target>
        </trans-unit>
        <trans-unit id="3a9c7d888d2bed3deb431ff0cc9d29e832520d5d" translate="yes" xml:space="preserve">
          <source>RFC959</source>
          <target state="translated">RFC959</target>
        </trans-unit>
        <trans-unit id="2266413cb2b4c8845ed65b52f018ce1dc3aa89f6" translate="yes" xml:space="preserve">
          <source>RL &lt;code&gt;link&lt;/code&gt;</source>
          <target state="translated">RL &lt;code&gt;link&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a27ea486b7c697c55d2af33caf990409623e9366" translate="yes" xml:space="preserve">
          <source>RNG &lt;code&gt;randomGen&lt;/code&gt;</source>
          <target state="translated">RNG &lt;code&gt;randomGen&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="938b07b987d5d15811806534d8bfeeabeb06c72a" translate="yes" xml:space="preserve">
          <source>RO &lt;code&gt;original&lt;/code&gt;</source>
          <target state="translated">RO &lt;code&gt;original&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="39d1aa776b7a255f3d807b5b8897d1bed0511d44" translate="yes" xml:space="preserve">
          <source>RR &lt;code&gt;otherRanges&lt;/code&gt;</source>
          <target state="translated">RR의 &lt;code&gt;otherRanges&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a850436297b1d82629832bb29adfcf30f1fc1cd8" translate="yes" xml:space="preserve">
          <source>RR &lt;code&gt;ranges&lt;/code&gt;</source>
          <target state="translated">RR &lt;code&gt;ranges&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="16de3e81671885dc0f6c6bce4baf66346a366ed5" translate="yes" xml:space="preserve">
          <source>RSA Data Security, Inc. MD5 Message-Digest Algorithm</source>
          <target state="translated">RSA Data Security, Inc. MD5 메시지 다이제스트 알고리즘</target>
        </trans-unit>
        <trans-unit id="b8f6115b2e975b7d1e3bf5fac034e18302031d6e" translate="yes" xml:space="preserve">
          <source>RT &lt;code&gt;to&lt;/code&gt;</source>
          <target state="translated">RT &lt;code&gt;to&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dd5f8a5117f61c39a5204172f35f9cae1983e553" translate="yes" xml:space="preserve">
          <source>RTSP request method (OPTIONS, SETUP, PLAY, etc...)</source>
          <target state="translated">RTSP 요청 방법 (OPTIONS, SETUP, PLAY 등)</target>
        </trans-unit>
        <trans-unit id="371bf1c52e812b6b49ae51cbb46d07593674f96f" translate="yes" xml:space="preserve">
          <source>Radical</source>
          <target state="translated">Radical</target>
        </trans-unit>
        <trans-unit id="204a8eb40a4bd8af4678da109de683c6a1f65eb0" translate="yes" xml:space="preserve">
          <source>Rainer Schuetze</source>
          <target state="translated">레이너 슈체</target>
        </trans-unit>
        <trans-unit id="d019a6997366fd64d4e2e18529510a7f45eb8edb" translate="yes" xml:space="preserve">
          <source>Raises an error if a version identifier is reserved.</source>
          <target state="translated">버전 식별자가 예약되어 있으면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="4dc5d6b0d4a5b8f3e3b4cbc848f0214ae661809b" translate="yes" xml:space="preserve">
          <source>Random access range with slicing and everything</source>
          <target state="translated">슬라이싱 및 모든 것을 포함한 랜덤 액세스 범위</target>
        </trans-unit>
        <trans-unit id="daf87088c3240e4a9a9584a1049d3548474219fc" translate="yes" xml:space="preserve">
          <source>Random number generators for internal usage.</source>
          <target state="translated">내부 사용을위한 난수 생성기.</target>
        </trans-unit>
        <trans-unit id="a894f9ef66fee642a62aec7c8de8b1d7ab1bb2ee" translate="yes" xml:space="preserve">
          <source>Random variate drawn from the index values [0, ... &lt;code&gt;proportions.length&lt;/code&gt; - 1], with the probability of getting an individual index value &lt;code&gt;i&lt;/code&gt; being proportional to &lt;code&gt;proportions[i]&lt;/code&gt;.</source>
          <target state="translated">인덱스 값 [0, ... &lt;code&gt;proportions.length&lt;/code&gt; -1] 에서 추출한 임의의 변이 로 개별 인덱스 값 &lt;code&gt;i&lt;/code&gt; 를 얻을 확률은 &lt;code&gt;proportions[i]&lt;/code&gt; 에 비례합니다 .</target>
        </trans-unit>
        <trans-unit id="fe974058f76f0bd197fe8cd84da0586782e2e9ca" translate="yes" xml:space="preserve">
          <source>Random variate drawn from the uniform distribution across all possible values of the integral, character or enum type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">정수형, 문자형 또는 열거 형 &lt;code&gt;T&lt;/code&gt; 의 가능한 모든 값에 대한 균일 분포에서 도출 된 랜덤 변이 입니다.</target>
        </trans-unit>
        <trans-unit id="9c0ab3c4414e6a52d0de45047951538395311a24" translate="yes" xml:space="preserve">
          <source>Random-access primitive. It is offered if &lt;code&gt; isRandomAccessRange!RangeOfRanges &amp;amp;&amp;amp; (opt == TransverseOptions.assumeNotJagged || opt == TransverseOptions.enforceNotJagged)&lt;/code&gt;.</source>
          <target state="translated">랜덤 액세스 프리미티브. &lt;code&gt; isRandomAccessRange!RangeOfRanges &amp;amp;&amp;amp; (opt == TransverseOptions.assumeNotJagged || opt == TransverseOptions.enforceNotJagged)&lt;/code&gt; 경우 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="a5f170f45a67325667fa9e118360d9450236d377" translate="yes" xml:space="preserve">
          <source>Random-access range over Grapheme's &lt;a href=&quot;#Character&quot;&gt;characters&lt;/a&gt;.</source>
          <target state="translated">Grapheme의 &lt;a href=&quot;#Character&quot;&gt;문자에&lt;/a&gt; 대한 임의 접근 범위 .</target>
        </trans-unit>
        <trans-unit id="05605c8f58501d21613f455df459e82081c3cdc7" translate="yes" xml:space="preserve">
          <source>RandomAccessFinite!E &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;(size_t, size_t);</source>
          <target state="translated">RandomAccessFinite! E &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt; (size_t, size_t);</target>
        </trans-unit>
        <trans-unit id="2558f9c390a433acd2a5f9d5a6cda985cdc6b00a" translate="yes" xml:space="preserve">
          <source>RandomAccessRange &lt;code&gt;haystack&lt;/code&gt;</source>
          <target state="translated">RandomAccessRange &lt;code&gt;haystack&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="36786d6240b8deeb5c7ce659046f8b88c692e5ce" translate="yes" xml:space="preserve">
          <source>RandomAccessRange &lt;strong id=&quot;find&quot;&gt;find&lt;/strong&gt;(RandomAccessRange, alias pred, InputRange)(RandomAccessRange haystack, scope BoyerMooreFinder!(pred, InputRange) needle);</source>
          <target state="translated">RandomAccessRange &lt;strong id=&quot;find&quot;&gt;find&lt;/strong&gt; (RandomAccessRange, alias pred, InputRange) (RandomAccessRange haystack, scope BoyerMooreFinder! (pred, InputRange) needle);</target>
        </trans-unit>
        <trans-unit id="222ef9f907f129a56ec254183f3ff4dc6d45278d" translate="yes" xml:space="preserve">
          <source>RandomGen &lt;code&gt;gen&lt;/code&gt;</source>
          <target state="translated">랜덤 젠 &lt;code&gt;gen&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b77d02793d6a139d9a2b3d2d97494bc2270ca425" translate="yes" xml:space="preserve">
          <source>RandomGen &lt;code&gt;urng&lt;/code&gt;</source>
          <target state="translated">RandomGen &lt;code&gt;urng&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a16c5bbe4bf996740f257aa1e81bd57e4c52c8dd" translate="yes" xml:space="preserve">
          <source>Range</source>
          <target state="translated">Range</target>
        </trans-unit>
        <trans-unit id="bdc00a10e731625034468db23e692559a5ae1f69" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;doesThisEnd&lt;/code&gt;</source>
          <target state="translated">범위는이 &lt;code&gt;doesThisEnd&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c6459a8a608d380da143d17584f95660d532fc6d" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;doesThisStart&lt;/code&gt;</source>
          <target state="translated">Range &lt;code&gt;doesThisStart&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1ae8a55dd9bb3b7d6c3722fe1726f400b996eba3" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;filename&lt;/code&gt;</source>
          <target state="translated">범위 &lt;code&gt;filename&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b893bf3e72d1de5c2698b1bf1165ebf7ba8ea021" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;haystack&lt;/code&gt;</source>
          <target state="translated">레인지 &lt;code&gt;haystack&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fab70957ac55da835b218bcbb7da119da5da0694" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;input&lt;/code&gt;</source>
          <target state="translated">범위 &lt;code&gt;input&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b449f4abbe52b829a268a0611f72dbd66bf08520" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;items&lt;/code&gt;</source>
          <target state="translated">레인지 &lt;code&gt;items&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3a7401fad972256451b5418dea7bd2245fc501ba" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;magnitude&lt;/code&gt;</source>
          <target state="translated">범위 &lt;code&gt;magnitude&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bc112cfba33c9e26d641dc22c4809b4b608180e3" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;needle&lt;/code&gt;</source>
          <target state="translated">레인지 &lt;code&gt;needle&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a1e47737bbac3975754a3eca700ddd881c3a70e7" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;path&lt;/code&gt;</source>
          <target state="translated">범위 &lt;code&gt;path&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="765b7acfeb236a5d946cff8513b18b77080f38e3" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;r&lt;/code&gt;</source>
          <target state="translated">범위 &lt;code&gt;r&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b8cb3e3f4922e3ac872f84f7fbe039683f1fc007" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;range&lt;/code&gt;</source>
          <target state="translated">범위 &lt;code&gt;range&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7730cf02532e3c48c2cc95f48183a04b086e350b" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">범위 &lt;code&gt;s&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7c59c250a7f0c3582bafe2d7cc9507cd1bfb2b4c" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;segments&lt;/code&gt;</source>
          <target state="translated">범위 &lt;code&gt;segments&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="98caacb48def81b9a800ce6e242ac737eae9b7e6" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;source&lt;/code&gt;</source>
          <target state="translated">범위 &lt;code&gt;source&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b223975eedc441a181b2d83e0a620e372555573" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;str&lt;/code&gt;</source>
          <target state="translated">범위 &lt;code&gt;str&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="942c1c1d42b71f9968f58bccd5c762229b58a106" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;stuff&lt;/code&gt;</source>
          <target state="translated">레인지 &lt;code&gt;stuff&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="958dc324f88870b31b40c243dd1ecf447384d41c" translate="yes" xml:space="preserve">
          <source>Range &lt;code&gt;tgt&lt;/code&gt;</source>
          <target state="translated">범위 &lt;code&gt;tgt&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dd6d020deb1cc093e6b3d4f3f4c6acba70a62219" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;chomp&quot;&gt;chomp&lt;/strong&gt;(Range)(Range str)</source>
          <target state="translated">레인지 &lt;strong id=&quot;chomp&quot;&gt;mp 프&lt;/strong&gt; (범위) (Range str)</target>
        </trans-unit>
        <trans-unit id="958a969c8d619dd2e21dd942e24dc74bfc9137eb" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;chomp&quot;&gt;chomp&lt;/strong&gt;(Range, C2)(Range str, const(C2)[] delimiter)</source>
          <target state="translated">레인지 &lt;strong id=&quot;chomp&quot;&gt;촘프&lt;/strong&gt; (범위, C2) (범위 str, const (C2) [] 구분 기호)</target>
        </trans-unit>
        <trans-unit id="387b549e3439c27c5968eadec0e4210d080a7d80" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;chompPrefix&quot;&gt;chompPrefix&lt;/strong&gt;(Range, C2)(Range str, const(C2)[] delimiter)</source>
          <target state="translated">범위 &lt;strong id=&quot;chompPrefix&quot;&gt;chompPrefix&lt;/strong&gt; (범위, C2) (범위 str, const (C2) [] 분리 문자)</target>
        </trans-unit>
        <trans-unit id="7d750d9399cda1002cbc697092da98fe61feb3fa" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;chop&quot;&gt;chop&lt;/strong&gt;(Range)(Range str)</source>
          <target state="translated">범위 &lt;strong id=&quot;chop&quot;&gt;절단&lt;/strong&gt; (범위) (범위 STR)</target>
        </trans-unit>
        <trans-unit id="5374aa394be302873be7b9e5f298b412424fd0c2" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;findAdjacent&quot;&gt;findAdjacent&lt;/strong&gt;(alias pred = &quot;a == b&quot;, Range)(Range r)</source>
          <target state="translated">범위 &lt;strong id=&quot;findAdjacent&quot;&gt;찾기 인접&lt;/strong&gt; (별칭 : &lt;strong id=&quot;findAdjacent&quot;&gt;prea&lt;/strong&gt; = &quot;a == b&quot;, 범위) (범위 r)</target>
        </trans-unit>
        <trans-unit id="c61e9a986955ab73c7c51b7c6290309881a726d0" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;linearRemove&quot;&gt;linearRemove&lt;/strong&gt;(Range r);</source>
          <target state="translated">&lt;strong id=&quot;linearRemove&quot;&gt;선형&lt;/strong&gt; 범위 &lt;strong id=&quot;linearRemove&quot;&gt;제거&lt;/strong&gt; (범위 r);</target>
        </trans-unit>
        <trans-unit id="8a4737705e7cd61fe5be23dbe69e47363f785ea9" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;linearRemove&quot;&gt;linearRemove&lt;/strong&gt;(Take!Range r);</source>
          <target state="translated">범위 &lt;strong id=&quot;linearRemove&quot;&gt;선형 제거&lt;/strong&gt; (Take! Range r);</target>
        </trans-unit>
        <trans-unit id="483463cf9312055d259a327156d9725d80165b39" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;lowerBound&quot;&gt;lowerBound&lt;/strong&gt;(Elem e);</source>
          <target state="translated">범위 &lt;strong id=&quot;lowerBound&quot;&gt;하한&lt;/strong&gt; (Elem e);</target>
        </trans-unit>
        <trans-unit id="daf2b8c4e51410249a2cddb780dde47dfd56c9f2" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;maxPos&quot;&gt;maxPos&lt;/strong&gt;(alias pred = &quot;a &amp;lt; b&quot;, Range)(Range range)</source>
          <target state="translated">범위 &lt;strong id=&quot;maxPos&quot;&gt;maxPos&lt;/strong&gt; (별칭 : &lt;strong id=&quot;maxPos&quot;&gt;prea&lt;/strong&gt; = &quot;a &amp;lt;b&quot;, 범위) (범위 범위)</target>
        </trans-unit>
        <trans-unit id="8d001c4e9b0a367012727ac2d8a9eff83c387f7b" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;minPos&quot;&gt;minPos&lt;/strong&gt;(alias pred = &quot;a &amp;lt; b&quot;, Range)(Range range)</source>
          <target state="translated">범위 &lt;strong id=&quot;minPos&quot;&gt;minPos&lt;/strong&gt; (별칭 : &lt;strong id=&quot;minPos&quot;&gt;prea&lt;/strong&gt; = &quot;a &amp;lt;b&quot;, 범위) (범위 범위)</target>
        </trans-unit>
        <trans-unit id="d284bc77e731a0b9a6d12df2a5238c3a06464947" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;();</source>
          <target state="translated">범위 &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="bc2a5d0466c36ffd67337b24e664ae0f79c874ca" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;(size_t a, size_t b);</source>
          <target state="translated">범위 &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt; (size_t a, size_t b);</target>
        </trans-unit>
        <trans-unit id="c11b4e7b6b47c28df5004fd6ddf7a545a426ca49" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;(size_t i, size_t j);</source>
          <target state="translated">범위 &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt; (size_t i, size_t j);</target>
        </trans-unit>
        <trans-unit id="39f32596eb8aca6da2ab14245d948d6847ce050e" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;(size_t low, size_t high);</source>
          <target state="translated">범위 &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt; (size_t 낮음, size_t 높음);</target>
        </trans-unit>
        <trans-unit id="d42de6f1841b39c620b9c8a2ea05d1f76c726764" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;partialShuffle&quot;&gt;partialShuffle&lt;/strong&gt;(Range)(Range r, in size_t n)</source>
          <target state="translated">범위 부분 &lt;strong id=&quot;partialShuffle&quot;&gt;셔플&lt;/strong&gt; (범위) (범위 r, size_t n)</target>
        </trans-unit>
        <trans-unit id="6903f88dabb579ebb843ddd5140458c35c9704e5" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;partialShuffle&quot;&gt;partialShuffle&lt;/strong&gt;(Range, RandomGen)(Range r, in size_t n, ref RandomGen gen)</source>
          <target state="translated">Range &lt;strong id=&quot;partialShuffle&quot;&gt;Shuffle&lt;/strong&gt; (Range, RandomGen) 범위 (Range r, size_t n, ref RandomGen gen)</target>
        </trans-unit>
        <trans-unit id="9142d2d0e717f4080c77ae59566752d24bd34d36" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;partition&quot;&gt;partition&lt;/strong&gt;(alias predicate, SwapStrategy ss = SwapStrategy.unstable, Range)(Range r)</source>
          <target state="translated">범위 &lt;strong id=&quot;partition&quot;&gt;분할&lt;/strong&gt; (별칭 술어, SwapStrategy ss = SwapStrategy. 불안정, 범위) (범위 r)</target>
        </trans-unit>
        <trans-unit id="3bcc5c63d8cc77c95d8df1c024b2432266bd79b7" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;partition&quot;&gt;partition&lt;/strong&gt;(alias predicate, SwapStrategy ss, Range)(Range r)</source>
          <target state="translated">범위 &lt;strong id=&quot;partition&quot;&gt;파티션&lt;/strong&gt; (별칭 술어, SwapStrategy ss, 범위) (범위 r)</target>
        </trans-unit>
        <trans-unit id="341436ba0e810d212a6a1812137bb20b5c206fc6" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;randomShuffle&quot;&gt;randomShuffle&lt;/strong&gt;(Range)(Range r)</source>
          <target state="translated">&lt;strong id=&quot;randomShuffle&quot;&gt;임의&lt;/strong&gt; 범위 &lt;strong id=&quot;randomShuffle&quot;&gt;셔플&lt;/strong&gt; (범위) (범위 r)</target>
        </trans-unit>
        <trans-unit id="9bfa4950aa7b637010c51a6ca464ea0c1b28b280" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;randomShuffle&quot;&gt;randomShuffle&lt;/strong&gt;(Range, RandomGen)(Range r, ref RandomGen gen)</source>
          <target state="translated">범위 &lt;strong id=&quot;randomShuffle&quot;&gt;랜덤 셔플&lt;/strong&gt; (Range, RandomGen) (Range r, ref RandomGen gen)</target>
        </trans-unit>
        <trans-unit id="be8785c63fd8f14c56f2f13abbae759e756c0a19" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;remove&quot;&gt;remove&lt;/strong&gt;(Range r);</source>
          <target state="translated">범위 &lt;strong id=&quot;remove&quot;&gt;제거&lt;/strong&gt; (범위 r);</target>
        </trans-unit>
        <trans-unit id="e2981773ba184620c192e5177874cbcd5df9d535" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;remove&quot;&gt;remove&lt;/strong&gt;(SwapStrategy s = SwapStrategy.stable, Range, Offset...)(Range range, Offset offset)</source>
          <target state="translated">범위 &lt;strong id=&quot;remove&quot;&gt;제거&lt;/strong&gt; (SwapStrategy s = SwapStrategy.stable, Range, Offset ...) (범위 범위, 오프셋 오프셋)</target>
        </trans-unit>
        <trans-unit id="f70143fb0f43c9d5f880ec91b1b8e94d2535149a" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;remove&quot;&gt;remove&lt;/strong&gt;(Take!Range r);</source>
          <target state="translated">레인지 &lt;strong id=&quot;remove&quot;&gt;제거&lt;/strong&gt; (Take! Range r);</target>
        </trans-unit>
        <trans-unit id="dc8629ec9f5b7067218b999012871cedb67cee47" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;remove&quot;&gt;remove&lt;/strong&gt;(alias pred, SwapStrategy s = SwapStrategy.stable, Range)(Range range);</source>
          <target state="translated">범위 &lt;strong id=&quot;remove&quot;&gt;제거&lt;/strong&gt; (별칭 : pred, SwapStrategy s = SwapStrategy.stable, Range) (범위 범위);</target>
        </trans-unit>
        <trans-unit id="59fdc553edeb4d0d3d3ac64cb93ae52f0640a2d9" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;reverse&quot;&gt;reverse&lt;/strong&gt;(Range)(Range r)</source>
          <target state="translated">레인지 &lt;strong id=&quot;reverse&quot;&gt;리버스&lt;/strong&gt; (범위) (범위 r)</target>
        </trans-unit>
        <trans-unit id="1f67ade8615231c9e6f1eceec74eb881945beec1" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;strip&quot;&gt;strip&lt;/strong&gt;(Range, E)(Range range, E element)</source>
          <target state="translated">레인지 &lt;strong id=&quot;strip&quot;&gt;스트립&lt;/strong&gt; (범위, E) (범위 범위, E 요소)</target>
        </trans-unit>
        <trans-unit id="1fb46d0c90f5b292ffca7c031b1dc38906b51867" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;strip&quot;&gt;strip&lt;/strong&gt;(alias pred, Range)(Range range)</source>
          <target state="translated">레인지 &lt;strong id=&quot;strip&quot;&gt;스트립&lt;/strong&gt; (별칭 : pred, Range) (범위 범위)</target>
        </trans-unit>
        <trans-unit id="3614af376bd06ba88949586c27df5bf9080807f7" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;stripLeft&quot;&gt;stripLeft&lt;/strong&gt;(Range, E)(Range range, E element)</source>
          <target state="translated">레인지 &lt;strong id=&quot;stripLeft&quot;&gt;스트립 왼쪽&lt;/strong&gt; (범위, E) (범위 범위, E 요소)</target>
        </trans-unit>
        <trans-unit id="6885e77726b545d7302e685cf148f4d98fbe84a1" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;stripLeft&quot;&gt;stripLeft&lt;/strong&gt;(alias pred, Range)(Range range)</source>
          <target state="translated">레인지 &lt;strong id=&quot;stripLeft&quot;&gt;스트립 왼쪽&lt;/strong&gt; (별칭 범위, 범위) (범위 범위)</target>
        </trans-unit>
        <trans-unit id="ce33d5d4abc1be9b6b923d9319b04bb93b60e3b9" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;stripRight&quot;&gt;stripRight&lt;/strong&gt;(Range, E)(Range range, E element)</source>
          <target state="translated">레인지 &lt;strong id=&quot;stripRight&quot;&gt;스트립 오른쪽&lt;/strong&gt; (범위, E) (범위 범위, E 요소)</target>
        </trans-unit>
        <trans-unit id="22cc986d97351e10d1dbeeba473b9aeec680758f" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;stripRight&quot;&gt;stripRight&lt;/strong&gt;(alias pred, Range)(Range range)</source>
          <target state="translated">Range &lt;strong id=&quot;stripRight&quot;&gt;stripRight&lt;/strong&gt; (별칭 : pred, Range) (범위 범위)</target>
        </trans-unit>
        <trans-unit id="8922aa2733c368de22e8bfd1b73084f8c48c862f" translate="yes" xml:space="preserve">
          <source>Range &lt;strong id=&quot;upperBound&quot;&gt;upperBound&lt;/strong&gt;(Elem e);</source>
          <target state="translated">범위 &lt;strong id=&quot;upperBound&quot;&gt;상한&lt;/strong&gt; (Elem e);</target>
        </trans-unit>
        <trans-unit id="4e07b5b6833aaedcc15663d77743676b9312f065" translate="yes" xml:space="preserve">
          <source>Range Y</source>
          <target state="translated">범위 Y</target>
        </trans-unit>
        <trans-unit id="f48019e5bf7ec363745690f4e315480b20a5136a" translate="yes" xml:space="preserve">
          <source>Range error?</source>
          <target state="translated">레인지 에러?</target>
        </trans-unit>
        <trans-unit id="7fe97179ce97a6e49548e8ed3307493377b319d0" translate="yes" xml:space="preserve">
          <source>Range for Lists.</source>
          <target state="translated">목록의 범위.</target>
        </trans-unit>
        <trans-unit id="eba68d314890b6f6a70e36a43c74d5ce32405e46" translate="yes" xml:space="preserve">
          <source>Range for blocks.</source>
          <target state="translated">블록의 범위.</target>
        </trans-unit>
        <trans-unit id="c89a73bed4c8cbf35f6dcfd9a40f20e25db682af" translate="yes" xml:space="preserve">
          <source>Range from which the chunks will be selected</source>
          <target state="translated">청크를 선택할 범위</target>
        </trans-unit>
        <trans-unit id="817d0998dd4c5bb46a7e6021d86c9c99c245a844" translate="yes" xml:space="preserve">
          <source>Range from which the slide will be selected</source>
          <target state="translated">슬라이드를 선택할 범위</target>
        </trans-unit>
        <trans-unit id="a0f235889bbcb32d2a6ce4f5c086ecc8aaff6b64" translate="yes" xml:space="preserve">
          <source>Range functions</source>
          <target state="translated">범위 기능</target>
        </trans-unit>
        <trans-unit id="985230fe57670eee6d480371e5539885e9d2193e" translate="yes" xml:space="preserve">
          <source>Range interface.</source>
          <target state="translated">범위 인터페이스.</target>
        </trans-unit>
        <trans-unit id="581a55513996060c488e2dcd565e8b46f3a2b154" translate="yes" xml:space="preserve">
          <source>Range of all sliding windows with propagated bi-directionality, forwarding, random access, and slicing.</source>
          <target state="translated">전파 된 양방향성, 전달, 랜덤 액세스 및 슬라이싱이있는 모든 슬라이딩 윈도우의 범위.</target>
        </trans-unit>
        <trans-unit id="137cc21ae1fc638dcb51e74df73a2d56e1f9c67b" translate="yes" xml:space="preserve">
          <source>Range of chunks.</source>
          <target state="translated">청크의 범위.</target>
        </trans-unit>
        <trans-unit id="a7a76727b30bcd8da9b8a6edd30afc51c870bcb3" translate="yes" xml:space="preserve">
          <source>Range of ranges</source>
          <target state="translated">범위의 범위</target>
        </trans-unit>
        <trans-unit id="5555dfd39b2edc98ced9f7334c9a6392f14cf52b" translate="yes" xml:space="preserve">
          <source>Range or string specifying the directory name</source>
          <target state="translated">디렉토리 이름을 지정하는 범위 또는 문자열</target>
        </trans-unit>
        <trans-unit id="a1ddf1e045360a472de28705a5205e74f1573574" translate="yes" xml:space="preserve">
          <source>Range over bit set. Each element is the bit number that is set.</source>
          <target state="translated">비트 범위 설정. 각 요소는 설정된 비트 번호입니다.</target>
        </trans-unit>
        <trans-unit id="77e67487e9cb8bf2a5778f171bf816c7161b5db1" translate="yes" xml:space="preserve">
          <source>Range primitives</source>
          <target state="translated">레인지 프리미티브</target>
        </trans-unit>
        <trans-unit id="3c31ca8b15dc9b218b4e66fc66e0b896406fabf3" translate="yes" xml:space="preserve">
          <source>Range primitives are carried over to the returned range if all of the ranges provide them</source>
          <target state="translated">범위 프리미티브는 모든 범위가 제공하는 경우 리턴 된 범위로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="b16f736ad7fe0991fb122f8c903cf0a4cbbbe6fb" translate="yes" xml:space="preserve">
          <source>Range primitives for worker-local storage. The purpose of this is to access results produced by each worker thread from a single thread once you are no longer using the worker-local storage from multiple threads. Do not use this struct in the parallel portion of your algorithm.</source>
          <target state="translated">작업자 로컬 스토리지를위한 범위 프리미티브. 다중 스레드의 작업자 로컬 스토리지를 더 이상 사용하지 않는 경우 단일 스레드에서 각 작업자 스레드가 생성 한 결과에 액세스하는 것이 목적입니다. 알고리즘의 병렬 부분에서는이 구조체를 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="31dcddbb1c2c353cd8249a666fee5a2f0432234f" translate="yes" xml:space="preserve">
          <source>Range primitives may throw &lt;code&gt;StdioException&lt;/code&gt; on I/O error.</source>
          <target state="translated">범위 프리미티브는 I / O 오류에서 &lt;code&gt;StdioException&lt;/code&gt; 을 발생시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5386fccbcb76f4112f36ee49b1376281ebad0cc7" translate="yes" xml:space="preserve">
          <source>Range primitives.</source>
          <target state="translated">범위 프리미티브.</target>
        </trans-unit>
        <trans-unit id="a23d722689f8ff7700f014fabb7100a7edace801" translate="yes" xml:space="preserve">
          <source>Range r</source>
          <target state="translated">범위 r</target>
        </trans-unit>
        <trans-unit id="a188ed7de729e7ba08e4510d12d5fbc93676c14c" translate="yes" xml:space="preserve">
          <source>Range sampling</source>
          <target state="translated">범위 샘플링</target>
        </trans-unit>
        <trans-unit id="bdb3b810511da6b4ebbfc639e29a1653d7944da1" translate="yes" xml:space="preserve">
          <source>Range that iterates the indices of the set bits in &lt;code&gt;value&lt;/code&gt;. Index 0 corresponds to the least significant bit. For signed integers, the highest index corresponds to the sign bit.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 에서 설정된 비트의 인덱스를 반복하는 범위입니다 . 인덱스 0은 최하위 비트에 해당합니다. 부호있는 정수의 경우 가장 높은 색인은 부호 비트에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="2cd92460ddb1556aa3ff68a514d0c6002ee43410" translate="yes" xml:space="preserve">
          <source>Range to get, specified as an ASCII string.</source>
          <target state="translated">가져올 범위로, ASCII 문자열로 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="707606956aa2aad968b9a1b08feec62ccba19236" translate="yes" xml:space="preserve">
          <source>Range whose elements consist of a randomly selected subset of the elements of &lt;code&gt;r&lt;/code&gt;, in the same order as these elements appear in &lt;code&gt;r&lt;/code&gt; itself. Will be a forward range if both &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;rng&lt;/code&gt; are forward ranges, an input range otherwise.  &lt;code&gt;RandomSample&lt;/code&gt; implements Jeffrey Scott Vitter's Algorithm D (see Vitter &lt;a href=&quot;http://dx.doi.org/10.1145/358105.893&quot;&gt;1984&lt;/a&gt;, &lt;a href=&quot;http://dx.doi.org/10.1145/23002.23003&quot;&gt;1987&lt;/a&gt;), which selects a sample of size &lt;code&gt;n&lt;/code&gt; in O(n) steps and requiring O(n) random variates, regardless of the size of the data being sampled. The exception to this is if traversing k elements on the input range is itself an O(k) operation (e.g. when sampling lines from an input file), in which case the sampling calculation will inevitably be of O(total).  RandomSample will throw an exception if &lt;code&gt;total&lt;/code&gt; is verifiably less than the total number of elements available in the input, or if &lt;code&gt;n &amp;gt; total&lt;/code&gt;.  If no random number generator is passed to &lt;code&gt;randomSample&lt;/code&gt;, the thread-global RNG rndGen will be used internally.</source>
          <target state="translated">이 요소가 &lt;code&gt;r&lt;/code&gt; 자체에 나타나는 순서와 동일한 순서로 &lt;code&gt;r&lt;/code&gt; 의 요소 중 임의로 선택된 하위 집합으로 구성되는 범위입니다 . &lt;code&gt;r&lt;/code&gt; 과 &lt;code&gt;rng&lt;/code&gt; 가 모두 포워드 범위이면 포워드 범위가되고, 그렇지 않으면 입력 범위가됩니다. &lt;code&gt;RandomSample&lt;/code&gt; 은 샘플 크기를 선택하는 Jeffrey Scott Vitter의 알고리즘 D (Vitter &lt;a href=&quot;http://dx.doi.org/10.1145/358105.893&quot;&gt;1984&lt;/a&gt; , &lt;a href=&quot;http://dx.doi.org/10.1145/23002.23003&quot;&gt;1987&lt;/a&gt; 참조 )를 구현합니다. &lt;code&gt;n&lt;/code&gt; 샘플링되는 데이터의 크기에 관계없이 O (n) 단계에서 O (n) 임의의 변이를 요구합니다. 입력 범위에서 k 요소를 순회하는 것 자체가 O (k) 연산 인 경우 (예를 들어 입력 파일에서 라인을 샘플링 할 때) 샘플링 계산이 필연적으로 O (total) 인 경우는 예외입니다. RandomSample 경우는 예외를 발생 &lt;code&gt;total&lt;/code&gt; 검증 가능한 적은 입력 가능 요소의 총 개수보다 경우 나 인 &lt;code&gt;n &amp;gt; total&lt;/code&gt; . 난수 생성기가 &lt;code&gt;randomSample&lt;/code&gt; 로 전달되지 않으면 스레드 전역 RNG rndGen이 내부적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="42b101d7dca383ee220afe442b88458be2e50a7f" translate="yes" xml:space="preserve">
          <source>Range whose elements consist of a randomly selected subset of the elements of &lt;code&gt;r&lt;/code&gt;, in the same order as these elements appear in &lt;code&gt;r&lt;/code&gt; itself. Will be a forward range if both &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;rng&lt;/code&gt; are forward ranges, an input range otherwise.  &lt;code&gt;RandomSample&lt;/code&gt; implements Jeffrey Scott Vitter's Algorithm D (see Vitter &lt;a href=&quot;https://dx.doi.org/10.1145/358105.893&quot;&gt;1984&lt;/a&gt;, &lt;a href=&quot;https://dx.doi.org/10.1145/23002.23003&quot;&gt;1987&lt;/a&gt;), which selects a sample of size &lt;code&gt;n&lt;/code&gt; in O(n) steps and requiring O(n) random variates, regardless of the size of the data being sampled. The exception to this is if traversing k elements on the input range is itself an O(k) operation (e.g. when sampling lines from an input file), in which case the sampling calculation will inevitably be of O(total).  RandomSample will throw an exception if &lt;code&gt;total&lt;/code&gt; is verifiably less than the total number of elements available in the input, or if &lt;code&gt;n &amp;gt; total&lt;/code&gt;.  If no random number generator is passed to &lt;code&gt;randomSample&lt;/code&gt;, the thread-global RNG rndGen will be used internally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da898b85342ec8bed1bcedc57734a9570d8506e9" translate="yes" xml:space="preserve">
          <source>Range whose elements consist of the elements of &lt;code&gt;r&lt;/code&gt;, in random order. Will be a forward range if both &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;rng&lt;/code&gt; are forward ranges, an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; otherwise.</source>
          <target state="translated">임의의 순서로 요소가 &lt;code&gt;r&lt;/code&gt; 의 요소로 구성되는 범위입니다 . &lt;code&gt;r&lt;/code&gt; 과 &lt;code&gt;rng&lt;/code&gt; 가 모두 포워드 범위이면 포워드 범위가되고, 그렇지 않으면 &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;입력 범위가&lt;/a&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="5e28d7706622cb0ade852ece3b071a320897761a" translate="yes" xml:space="preserve">
          <source>Range with &lt;code&gt;path&lt;/code&gt;'s extension (if any) replaced with &lt;code&gt;ext&lt;/code&gt;. The element encoding type of the returned range will be the same as &lt;code&gt;path&lt;/code&gt;'s.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 확장 (있는 경우)이 &lt;code&gt;ext&lt;/code&gt; 로 대체 된 범위입니다 . 반환되는 범위의 요소 인코딩 유형은 &lt;code&gt;path&lt;/code&gt; 와 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="116ac105826a244bad9f22ac660f735b392e1f85" translate="yes" xml:space="preserve">
          <source>Range-checking integral arithmetic primitives.</source>
          <target state="translated">범위 점검 필수 산술 기본 요소.</target>
        </trans-unit>
        <trans-unit id="63b0dce7a81bbf27d07ec74cffd13b62bccbd329" translate="yes" xml:space="preserve">
          <source>Range-generating function.</source>
          <target state="translated">범위 생성 기능.</target>
        </trans-unit>
        <trans-unit id="776b24fc4d7da279e8b47ad2f5463b819a8f755a" translate="yes" xml:space="preserve">
          <source>Range1 &lt;code&gt;filename1&lt;/code&gt;</source>
          <target state="translated">Range1 &lt;code&gt;filename1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="47df8501644cae0437fd342841ac8295a7fd91e1" translate="yes" xml:space="preserve">
          <source>Range1 &lt;code&gt;r1&lt;/code&gt;</source>
          <target state="translated">Range1 &lt;code&gt;r1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0980e211f154684c7c46a51fe24ce8151e9f12d8" translate="yes" xml:space="preserve">
          <source>Range1 &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">범위 1 &lt;code&gt;s&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="530d96382074b2a96b8d2dbeb5513c5515282c2c" translate="yes" xml:space="preserve">
          <source>Range2 &lt;code&gt;filename2&lt;/code&gt;</source>
          <target state="translated">Range2 &lt;code&gt;filename2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="146251698eace2c34854524a27ab059a70e0d910" translate="yes" xml:space="preserve">
          <source>Range2 &lt;code&gt;r2&lt;/code&gt;</source>
          <target state="translated">Range2 &lt;code&gt;r2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="71efb0fda574fd881c8571530c85ca491f3c5777" translate="yes" xml:space="preserve">
          <source>Range2 &lt;code&gt;t&lt;/code&gt;</source>
          <target state="translated">사거리 2 &lt;code&gt;t&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b36f6cc426c7e4986d8d9dc005e3e53da9e0cf17" translate="yes" xml:space="preserve">
          <source>RangeElementType &lt;code&gt;seed&lt;/code&gt;</source>
          <target state="translated">RangeElementType &lt;code&gt;seed&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5ee35853bdc357f54f009f3a254a4c03179806f1" translate="yes" xml:space="preserve">
          <source>RangeIndex &lt;code&gt;index&lt;/code&gt;</source>
          <target state="translated">RangeIndex &lt;code&gt;index&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9cf9b28262ece92730f8184b32499cd27d72d4c2" translate="yes" xml:space="preserve">
          <source>RangeOfRanges &lt;code&gt;ror&lt;/code&gt;</source>
          <target state="translated">RangeOfRanges &lt;code&gt;ror&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b442bcb1aa8cfdb401a404b0f481728a04ecf1b4" translate="yes" xml:space="preserve">
          <source>RangeOfRanges &lt;code&gt;rr&lt;/code&gt;</source>
          <target state="translated">RangeOfRanges &lt;code&gt;rr&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b53699547b38575c831f9690dd54cd38036de3a0" translate="yes" xml:space="preserve">
          <source>Ranges &lt;code&gt;needles&lt;/code&gt;</source>
          <target state="translated">레인지 &lt;code&gt;needles&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4d1121f255b3ef8af7acd07bdf41b901a70672ba" translate="yes" xml:space="preserve">
          <source>Ranges &lt;code&gt;ranges&lt;/code&gt;</source>
          <target state="translated">범위 &lt;code&gt;ranges&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2480f843b2cebe904b4544aa5e115caedcfbd07f" translate="yes" xml:space="preserve">
          <source>Ranges &lt;code&gt;rs&lt;/code&gt;</source>
          <target state="translated">범위 &lt;code&gt;rs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="af1fe47aab0c9297bebfe22698519fd0f658a583" translate="yes" xml:space="preserve">
          <source>Ranges whose elements are sorted afford better efficiency with certain operations. For this, the &lt;a href=&quot;#assumeSorted&quot;&gt;&lt;code&gt;assumeSorted&lt;/code&gt;&lt;/a&gt; function can be used to construct a &lt;a href=&quot;#SortedRange&quot;&gt;&lt;code&gt;SortedRange&lt;/code&gt;&lt;/a&gt; from a pre-sorted range. The &lt;a href=&quot;std_algorithm_sorting#sort&quot;&gt;&lt;code&gt;std.algorithm.sorting.sort&lt;/code&gt;&lt;/a&gt; function also conveniently returns a &lt;a href=&quot;#SortedRange&quot;&gt;&lt;code&gt;SortedRange&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#SortedRange&quot;&gt;&lt;code&gt;SortedRange&lt;/code&gt;&lt;/a&gt; objects provide some additional range operations that take advantage of the fact that the range is sorted.</source>
          <target state="translated">요소가 정렬 된 범위는 특정 작업에서 효율성을 향상시킵니다. 이를 위해 &lt;a href=&quot;#assumeSorted&quot;&gt; &lt;code&gt;assumeSorted&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 미리 정렬 된 범위에서 &lt;a href=&quot;#SortedRange&quot;&gt; &lt;code&gt;SortedRange&lt;/code&gt; &lt;/a&gt; 를 구성 할 수 있습니다 . &lt;a href=&quot;std_algorithm_sorting#sort&quot;&gt; &lt;code&gt;std.algorithm.sorting.sort&lt;/code&gt; 의&lt;/a&gt; 기능은 편리하게 반환 &lt;a href=&quot;#SortedRange&quot;&gt; &lt;code&gt;SortedRange&lt;/code&gt; 을&lt;/a&gt; . &lt;a href=&quot;#SortedRange&quot;&gt; &lt;code&gt;SortedRange&lt;/code&gt; &lt;/a&gt; 객체는 범위가 정렬되어 있다는 사실을 활용하는 몇 가지 추가 범위 작업을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="4740ea44823bfbe9405519b4bac22e0e17b64f14" translate="yes" xml:space="preserve">
          <source>Raw IP packet level</source>
          <target state="translated">원시 IP 패킷 레벨</target>
        </trans-unit>
        <trans-unit id="dbbd161ce31773e9cd7b945bc7c7210cbae7218a" translate="yes" xml:space="preserve">
          <source>Raw IP packets</source>
          <target state="translated">원시 IP 패킷</target>
        </trans-unit>
        <trans-unit id="e4b566448bd7650313465965b6cfafb1bb7cafcb" translate="yes" xml:space="preserve">
          <source>Raw protocol access</source>
          <target state="translated">원시 프로토콜 액세스</target>
        </trans-unit>
        <trans-unit id="dd5b5b23b8ce8fa52896e2ac4a4a4e0047ad5df9" translate="yes" xml:space="preserve">
          <source>Re-initializes a CURL handle to the default values. This puts back the handle to the same state as it was in when it was just created.</source>
          <target state="translated">CURL 핸들을 기본값으로 다시 초기화합니다. 핸들을 방금 생성했을 때와 같은 상태로 되돌립니다.</target>
        </trans-unit>
        <trans-unit id="0204268fc36b05e74ba6d24bf32f0f7225031176" translate="yes" xml:space="preserve">
          <source>Read Comma Separated Values and its variants from an input range of &lt;code&gt;dchar&lt;/code&gt;.</source>
          <target state="translated">입력 범위 &lt;code&gt;dchar&lt;/code&gt; 에서 쉼표로 구분 된 값 및 해당 변형을 읽습니다 .</target>
        </trans-unit>
        <trans-unit id="7bf4a534bd19935da933046f9a9ff7be5b6a7965" translate="yes" xml:space="preserve">
          <source>Read Data From A BLOB Incrementally</source>
          <target state="translated">BLOB에서 증 분식으로 데이터 읽기</target>
        </trans-unit>
        <trans-unit id="2a6216eecafd2c0e1689cf072f1f9d4d4eff5c9c" translate="yes" xml:space="preserve">
          <source>Read Only</source>
          <target state="translated">읽기 전용</target>
        </trans-unit>
        <trans-unit id="f13b46f1bcaa3336f76a4bb1c927333935e045b8" translate="yes" xml:space="preserve">
          <source>Read Only: 0 since multi-disk zip archives are not supported</source>
          <target state="translated">다중 디스크 zip 아카이브는 지원되지 않으므로 읽기 전용 : 0</target>
        </trans-unit>
        <trans-unit id="daeb93574c14c16e847fb4873cf6dd9d978f1654" translate="yes" xml:space="preserve">
          <source>Read Only: 0 since multi-disk zip archives are not supported.</source>
          <target state="translated">다중 디스크 zip 아카이브는 지원되지 않으므로 읽기 전용 : 0입니다.</target>
        </trans-unit>
        <trans-unit id="aeb6efe451bea0c8d7d3781b81b4f628fe0b1d54" translate="yes" xml:space="preserve">
          <source>Read Only: array indexed by the name of each member of the archive. All the members of the archive can be accessed with a foreach loop:</source>
          <target state="translated">읽기 전용 : 아카이브의 각 멤버 이름으로 인덱스 된 배열. 아카이브의 모든 멤버는 foreach 루프로 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="941b068be2efd168f5138f0b0c523d28d89195f0" translate="yes" xml:space="preserve">
          <source>Read Only: array representing the entire contents of the archive.</source>
          <target state="translated">읽기 전용 : 아카이브의 전체 내용을 나타내는 배열입니다.</target>
        </trans-unit>
        <trans-unit id="c707160f130f3d61727e553912479baa11023fa3" translate="yes" xml:space="preserve">
          <source>Read Only: cyclic redundancy check (CRC) value</source>
          <target state="translated">읽기 전용 : CRC (Cyclic Redundancy Check) 값</target>
        </trans-unit>
        <trans-unit id="37523ba068074fb34f80a786c59f0949a0bd4bfe" translate="yes" xml:space="preserve">
          <source>Read Only: data of member in compressed form.</source>
          <target state="translated">읽기 전용 : 압축 형식의 멤버 데이터</target>
        </trans-unit>
        <trans-unit id="f7d00fd7a00060d6f384892e8759fd7504161cf5" translate="yes" xml:space="preserve">
          <source>Read Only: number of ArchiveMembers in the directory.</source>
          <target state="translated">읽기 전용 : 디렉토리의 ArchiveMembers 수</target>
        </trans-unit>
        <trans-unit id="500f35484e9abbf530f32db5d83ac4f5091547c0" translate="yes" xml:space="preserve">
          <source>Read Only: should be 0.</source>
          <target state="translated">읽기 전용 : 0이어야합니다.</target>
        </trans-unit>
        <trans-unit id="76fa98f53d73cc0c406390c18045e7868350c349" translate="yes" xml:space="preserve">
          <source>Read Only: size of data of member in compressed form.</source>
          <target state="translated">읽기 전용 : 압축 형식의 멤버 데이터 크기.</target>
        </trans-unit>
        <trans-unit id="65f6768887290d477790036287a9bbef818da0b4" translate="yes" xml:space="preserve">
          <source>Read Only: size of data of member in expanded form.</source>
          <target state="translated">읽기 전용 : 확장 형식의 멤버 데이터 크기.</target>
        </trans-unit>
        <trans-unit id="bcb56aa9801ff39c7c5c53b9416551690e5ddef9" translate="yes" xml:space="preserve">
          <source>Read and analyze .ini file. Write the entries into environment as well as any entries in one of the specified section(s).</source>
          <target state="translated">.ini 파일을 읽고 분석하십시오. 지정된 섹션 중 하나의 항목뿐만 아니라 항목을 환경에 씁니다.</target>
        </trans-unit>
        <trans-unit id="6482d751184571d336715e5ce98ca71e679af2fb" translate="yes" xml:space="preserve">
          <source>Read and extract information from the LSDA (aka gcc_except_table section). The dmd Call Site Table is structurally different from other implementations. It is organized as nested ranges, and one ip can map to multiple ranges. The most nested candidate is selected when searched. Other implementations have one candidate per ip.</source>
          <target state="translated">LSDA (일명 gcc_except_table 섹션)에서 정보를 읽고 추출하십시오. dmd 호출 사이트 테이블은 다른 구현과 구조적으로 다릅니다. 중첩 된 범위로 구성되며 하나의 IP가 여러 범위에 매핑 될 수 있습니다. 가장 중첩 된 후보가 검색 될 때 선택됩니다. 다른 구현에는 ip 당 하나의 후보가 있습니다.</target>
        </trans-unit>
        <trans-unit id="21fc65d288482d1e8b6dd9c97e5b05c7bbbb91fa" translate="yes" xml:space="preserve">
          <source>Read and write data in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Zip_%28file_format%29&quot;&gt;zip archive&lt;/a&gt; format.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Zip_%28file_format%29&quot;&gt;zip 아카이브&lt;/a&gt; 형식으로 데이터를 읽고 씁니다 .</target>
        </trans-unit>
        <trans-unit id="1ca36a6d1a8024ba4e6382a71d1b05bf29a17256" translate="yes" xml:space="preserve">
          <source>Read and write memory mapped files.</source>
          <target state="translated">메모리 매핑 파일을 읽고 씁니다.</target>
        </trans-unit>
        <trans-unit id="b5129a39480a3d2b242d64db6d87355e637b5720" translate="yes" xml:space="preserve">
          <source>Read compression method used for this member</source>
          <target state="translated">이 멤버에 사용되는 읽기 압축 방법</target>
        </trans-unit>
        <trans-unit id="a11dbc73850fcef58bf265b2adb7abd5a96fb618" translate="yes" xml:space="preserve">
          <source>Read data of member in uncompressed form.</source>
          <target state="translated">비 압축 형태로 회원의 데이터를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="15e729183b6bbb3c96de02707732c85d58fc57e3" translate="yes" xml:space="preserve">
          <source>Read entire contents of file &lt;code&gt;name&lt;/code&gt; and returns it as an untyped array. If the file size is larger than &lt;code&gt;upTo&lt;/code&gt;, only &lt;code&gt;upTo&lt;/code&gt; bytes are read.</source>
          <target state="translated">파일 &lt;code&gt;name&lt;/code&gt; 의 전체 내용을 읽고 형식화되지 않은 배열로 반환합니다. 파일 크기가보다 큰 경우 &lt;code&gt;upTo&lt;/code&gt; 만 &lt;code&gt;upTo&lt;/code&gt; 바이트를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="e50a3835e7ed3805683e79e2f0b67243a73a025e" translate="yes" xml:space="preserve">
          <source>Read existing file</source>
          <target state="translated">기존 파일 읽기</target>
        </trans-unit>
        <trans-unit id="d2bd0cb4091355445f011133c7426913211afbad" translate="yes" xml:space="preserve">
          <source>Read file with UTF-8 text.</source>
          <target state="translated">UTF-8 텍스트로 파일을 읽습니다.</target>
        </trans-unit>
        <trans-unit id="7255add54c8b431c5ee373b24cdada7d3a659620" translate="yes" xml:space="preserve">
          <source>Read from environment, looking for cached value first.</source>
          <target state="translated">캐시 된 값을 먼저 찾아 환경에서 읽습니다.</target>
        </trans-unit>
        <trans-unit id="a47b81ebcf1543263ad72fe2f768ac67a71b73dc" translate="yes" xml:space="preserve">
          <source>Read line from &lt;code&gt;stdin&lt;/code&gt; and write it to buf[], including terminating character.</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; 에서 행을 읽고 종료 문자를 포함하여 buf []에 씁니다.</target>
        </trans-unit>
        <trans-unit id="d8f811ca8b7536e2bd18e121930035ea9d87e604" translate="yes" xml:space="preserve">
          <source>Read line from &lt;code&gt;stdin&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; 에서 줄을 읽습니다 .</target>
        </trans-unit>
        <trans-unit id="7167a92897a624e8504adb4cd2a5a34e4de7474b" translate="yes" xml:space="preserve">
          <source>Read line from the file handle and return it as a specified type.</source>
          <target state="translated">파일 핸들에서 행을 읽고 지정된 유형으로 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="3626936104de340f9dc657d57e3e205a91742a48" translate="yes" xml:space="preserve">
          <source>Read line from the file handle and write it to &lt;code&gt;buf[]&lt;/code&gt;, including terminating character.</source>
          <target state="translated">파일 핸들에서 행을 읽고 종료 문자를 포함하여 &lt;code&gt;buf[]&lt;/code&gt; 씁니다 .</target>
        </trans-unit>
        <trans-unit id="f126d6e5ba18f6b69cd4a89774a06f3c5bbdb803" translate="yes" xml:space="preserve">
          <source>Read only column &quot;b&quot;</source>
          <target state="translated">&quot;b&quot;열만 읽기</target>
        </trans-unit>
        <trans-unit id="3bdb33401fe4b455f64f2355674da6381ea3dcf1" translate="yes" xml:space="preserve">
          <source>Read the full content of a file.</source>
          <target state="translated">파일의 전체 내용을 읽습니다.</target>
        </trans-unit>
        <trans-unit id="fe36e093f9131fcd50814e2c651fcef59428379e" translate="yes" xml:space="preserve">
          <source>Read while rearranging the columns by specifying a header with a different order&quot;</source>
          <target state="translated">순서가 다른 헤더를 지정하여 열을 재정렬하면서 읽으십시오. &quot;</target>
        </trans-unit>
        <trans-unit id="be7bf71bf64bf5ca7c3921558df8d8639ad9a2a3" translate="yes" xml:space="preserve">
          <source>Read-only property returning the file mode.</source>
          <target state="translated">파일 모드를 반환하는 읽기 전용 속성입니다.</target>
        </trans-unit>
        <trans-unit id="54fbc1f4a81c75722e5054ba2699b77b89eb33d4" translate="yes" xml:space="preserve">
          <source>Read/Write</source>
          <target state="translated">Read/Write</target>
        </trans-unit>
        <trans-unit id="793ac345cad21d2b3a829536767f3b084b7fcb7b" translate="yes" xml:space="preserve">
          <source>Read/Write existing file, copy on write</source>
          <target state="translated">기존 파일 읽기 / 쓰기, 쓰기시 복사</target>
        </trans-unit>
        <trans-unit id="571a60bf0099eb1f30ed179832005e81ec663545" translate="yes" xml:space="preserve">
          <source>Read/Write existing file, create if not existing</source>
          <target state="translated">기존 파일 읽기 / 쓰기, 존재하지 않는 경우 생성</target>
        </trans-unit>
        <trans-unit id="7fe06b399c58642e4de81a3f82d07fbe4afe74a1" translate="yes" xml:space="preserve">
          <source>Read/Write: Usually the file name of the archive member; it is used to index the archive directory for the member. Each member must have a unique name[]. Do not change without removing member from the directory first.</source>
          <target state="translated">읽기 / 쓰기 : 일반적으로 아카이브 멤버의 파일 이름입니다. 멤버의 아카이브 디렉토리를 색인화하는 데 사용됩니다. 각 멤버는 고유 한 이름을 가져야합니다 []. 먼저 디렉토리에서 멤버를 제거하지 않고 변경하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="3a008a6fccbdd299dfd851251b1534db30fd0f3e" translate="yes" xml:space="preserve">
          <source>Read/Write: comment associated with this member.</source>
          <target state="translated">읽기 / 쓰기 :이 멤버와 관련된 주석입니다.</target>
        </trans-unit>
        <trans-unit id="d383128b0f051fe35d791444c1d6fe4cd41e3c05" translate="yes" xml:space="preserve">
          <source>Read/Write: extra data for this member.</source>
          <target state="translated">읽기 / 쓰기 :이 멤버에 대한 추가 데이터.</target>
        </trans-unit>
        <trans-unit id="98a17bcae0cd7700026db1303aefc632686b92aa" translate="yes" xml:space="preserve">
          <source>Read/Write: normally set to 0</source>
          <target state="translated">읽기 / 쓰기 : 일반적으로 0으로 설정</target>
        </trans-unit>
        <trans-unit id="3a672fd0925e6494dab48c64aa0ff9efb8bb8842" translate="yes" xml:space="preserve">
          <source>Read/Write: the archive comment. Must be less than 65536 bytes in length.</source>
          <target state="translated">읽기 / 쓰기 : 아카이브 주석. 길이는 65536 바이트보다 작아야합니다.</target>
        </trans-unit>
        <trans-unit id="a34abcab13dc3b37844a4a869596072b4312f7c5" translate="yes" xml:space="preserve">
          <source>Read/write data in JSON format.</source>
          <target state="translated">JSON 형식의 데이터 읽기 / 쓰기</target>
        </trans-unit>
        <trans-unit id="2d37d83a47a9d418dccdd946b1e2fcc90f05a71a" translate="yes" xml:space="preserve">
          <source>Read/write data in XML format.</source>
          <target state="translated">XML 형식의 데이터 읽기 / 쓰기</target>
        </trans-unit>
        <trans-unit id="8c46f78031b7950f9e7d9673ba0df2dfe13afc98" translate="yes" xml:space="preserve">
          <source>Read/write data in the &lt;a href=&quot;http://www.info-zip.org&quot;&gt;zip archive&lt;/a&gt; format. Makes use of the etc.c.zlib compression library.</source>
          <target state="translated">&lt;a href=&quot;http://www.info-zip.org&quot;&gt;zip 아카이브&lt;/a&gt; 형식으로 데이터를 읽거나 씁니다 . etc.c.zlib 압축 라이브러리를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="bcb7a7d852fe72a0b67997abe377c1452bcf06c2" translate="yes" xml:space="preserve">
          <source>Read/write data in the ZIP archive format.</source>
          <target state="translated">ZIP 보관 형식으로 데이터를 읽거나 씁니다.</target>
        </trans-unit>
        <trans-unit id="896a8af6369e03daade58ae0948e0a69e86551d9" translate="yes" xml:space="preserve">
          <source>Read/write value from/to the memory location indicated by ptr.</source>
          <target state="translated">ptr로 표시된 메모리 위치에서 값을 읽거나 씁니다.</target>
        </trans-unit>
        <trans-unit id="29320f79883d1853fbce071c212f5c5744be2f6e" translate="yes" xml:space="preserve">
          <source>Readers get preference. This may starve writers.</source>
          <target state="translated">독자는 선호를 얻는다. 이로 인해 작가가 굶주릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cffa2af0a3a67cf2123e3411d020161abc01fc05" translate="yes" xml:space="preserve">
          <source>Reading</source>
          <target state="translated">Reading</target>
        </trans-unit>
        <trans-unit id="1d920fff58ef0d0f937aa8908a1de256cc4799ab" translate="yes" xml:space="preserve">
          <source>Readonly</source>
          <target state="translated">Readonly</target>
        </trans-unit>
        <trans-unit id="18d8a220aa279e4eb04bfb2f9eda0af845a3d548" translate="yes" xml:space="preserve">
          <source>Reads &lt;code&gt;stdin&lt;/code&gt; and writes it to &lt;code&gt;stdout&lt;/code&gt; with a argument counter.</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; 을 읽고 인수 카운터 를 사용하여 &lt;code&gt;stdout&lt;/code&gt; 에 씁니다 .</target>
        </trans-unit>
        <trans-unit id="26b3984875d670d5e743016573bc157db0855be6" translate="yes" xml:space="preserve">
          <source>Reads &lt;code&gt;stdin&lt;/code&gt; and writes it to &lt;code&gt;stdout&lt;/code&gt; with an argument counter.</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; 을 읽고 인수 카운터 를 사용하여 &lt;code&gt;stdout&lt;/code&gt; 에 씁니다 .</target>
        </trans-unit>
        <trans-unit id="c03ee569a80e822a17cdfa9040b93b3d08ce8229" translate="yes" xml:space="preserve">
          <source>Reads &lt;code&gt;stdin&lt;/code&gt; and writes it to &lt;code&gt;stdout&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; 을 읽고 &lt;code&gt;stdout&lt;/code&gt; 에 씁니다 .</target>
        </trans-unit>
        <trans-unit id="d108f6e16abea10d9fb4947ccc236e24041d31dd" translate="yes" xml:space="preserve">
          <source>Reads I/O port at port_address.</source>
          <target state="translated">port_address에서 I / O 포트를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="49cb4212fc28223325da7d9c58c5aaefd148c02c" translate="yes" xml:space="preserve">
          <source>Reads a file line by line and parses the line into a single value or a &lt;a href=&quot;std_typecons#Tuple&quot;&gt;&lt;code&gt;std.typecons.Tuple&lt;/code&gt;&lt;/a&gt; of values depending on the length of &lt;code&gt;Types&lt;/code&gt;. The lines are parsed using the specified format string. The format string is passed to &lt;a href=&quot;std_format#formattedRead&quot;&gt;&lt;code&gt;std.format.formattedRead&lt;/code&gt;&lt;/a&gt;, and therefore must conform to the format string specification outlined in &lt;a href=&quot;std_format&quot;&gt;&lt;code&gt;std.format&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">파일을 줄을 판독하고, 단일 값 또는로 라인 파싱 &lt;a href=&quot;std_typecons#Tuple&quot;&gt; &lt;code&gt;std.typecons.Tuple&lt;/code&gt; &lt;/a&gt; 의 길이에 따라 값 &lt;code&gt;Types&lt;/code&gt; . 지정된 형식 문자열을 사용하여 행을 구문 분석합니다. 형식 문자열은 &lt;a href=&quot;std_format#formattedRead&quot;&gt; &lt;code&gt;std.format.formattedRead&lt;/code&gt; 에&lt;/a&gt; 전달 되므로 &lt;a href=&quot;std_format&quot;&gt; &lt;code&gt;std.format&lt;/code&gt; 에&lt;/a&gt; 요약 된 형식 문자열 스펙을 준수해야합니다 .</target>
        </trans-unit>
        <trans-unit id="f40a973dcb25e5ede27e5aac103cea1b0db87b35" translate="yes" xml:space="preserve">
          <source>Reads a file, terminate the program on error</source>
          <target state="translated">파일을 읽고 오류가 발생하면 프로그램을 종료합니다</target>
        </trans-unit>
        <trans-unit id="d8bb597f2dda425a5e5ea130e0bc100fab704034" translate="yes" xml:space="preserve">
          <source>Reads a value from the given input range according to spec and returns it as type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">스펙에 따라 지정된 입력 범위에서 값을 읽고 &lt;code&gt;T&lt;/code&gt; 유형으로 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="fe9af776ce0213a2d633f3fe45cfb534ec9ac7fb" translate="yes" xml:space="preserve">
          <source>Reads an object module from base[] and passes the names of any exported symbols to (*pAddSymbol)().</source>
          <target state="translated">base []에서 객체 모듈을 읽고 내 보낸 심볼의 이름을 (* pAddSymbol) ()에 전달합니다.</target>
        </trans-unit>
        <trans-unit id="a9a36b275679d0e70daad4cad40c7a7d537f1582" translate="yes" xml:space="preserve">
          <source>Reads and validates (using &lt;a href=&quot;std_utf#validate&quot;&gt;&lt;code&gt;std.utf.validate&lt;/code&gt;&lt;/a&gt;) a text file. S can be an array of any character type. However, no width or endian conversions are performed. So, if the width or endianness of the characters in the given file differ from the width or endianness of the element type of S, then validation will fail.</source>
          <target state="translated">텍스트 파일을 읽고 유효성 검증합니다 ( &lt;a href=&quot;std_utf#validate&quot;&gt; &lt;code&gt;std.utf.validate&lt;/code&gt; &lt;/a&gt; 사용 ). S는 모든 문자 유형의 배열이 될 수 있습니다. 그러나 너비 또는 엔디안 변환은 수행되지 않습니다. 따라서 주어진 파일에서 문자의 너비 또는 엔디안이 S 유형의 요소 유형의 너비 또는 엔디안과 다른 경우 유효성 검사가 실패합니다.</target>
        </trans-unit>
        <trans-unit id="9873cf676e4ad0a9b2f4951a3e2128cef4ddc619" translate="yes" xml:space="preserve">
          <source>Reads characters from &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt;&lt;code&gt;r&lt;/code&gt;, converts them according to &lt;code&gt;fmt&lt;/code&gt;, and writes them to &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;입력 범위 &lt;/a&gt; &lt;code&gt;r&lt;/code&gt; 에서 문자를 읽고 &lt;code&gt;fmt&lt;/code&gt; 에 따라 변환 한 다음 &lt;code&gt;args&lt;/code&gt; 에 씁니다 .</target>
        </trans-unit>
        <trans-unit id="72a110505374f57a1f54b6f7fdd1bd89dff1480a" translate="yes" xml:space="preserve">
          <source>Reads formatted data from &lt;code&gt;stdin&lt;/code&gt; using &lt;a href=&quot;std_format#formattedRead&quot;&gt;&lt;code&gt;std.format.formattedRead&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;std_format#formattedRead&quot;&gt; &lt;code&gt;std.format.formattedRead&lt;/code&gt; 를&lt;/a&gt; 사용하여 &lt;code&gt;stdin&lt;/code&gt; 에서 형식화 된 데이터를 읽 습니다 .</target>
        </trans-unit>
        <trans-unit id="f0b3e3d070da32ebbebc915ce449f0f887bdc340" translate="yes" xml:space="preserve">
          <source>Reads formatted data from the file using &lt;a href=&quot;std_format#formattedRead&quot;&gt;&lt;code&gt;std.format.formattedRead&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;std_format#formattedRead&quot;&gt; &lt;code&gt;std.format.formattedRead&lt;/code&gt; 를&lt;/a&gt; 사용하여 파일에서 형식화 된 데이터를 읽 습니다 .</target>
        </trans-unit>
        <trans-unit id="b8de846f2f646cdf61597148ce44078d0aec9ef3" translate="yes" xml:space="preserve">
          <source>Reads one full grapheme cluster from an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of dchar &lt;code&gt;inp&lt;/code&gt;.</source>
          <target state="translated">dchar &lt;code&gt;inp&lt;/code&gt; 의 &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;입력 범위&lt;/a&gt; 에서 하나의 전체 grapheme 클러스터를 읽습니다 .</target>
        </trans-unit>
        <trans-unit id="63176e821ee6fb97ffd79dbfd971c2e359909db2" translate="yes" xml:space="preserve">
          <source>Reads the file from &lt;code&gt;srcfile&lt;/code&gt; and loads the source buffer.</source>
          <target state="translated">&lt;code&gt;srcfile&lt;/code&gt; 에서 파일을 읽고 소스 버퍼를로드합니다.</target>
        </trans-unit>
        <trans-unit id="d66adb30a59f74a0595960a81c8fa1185e3cac95" translate="yes" xml:space="preserve">
          <source>Reads values according to the format string from an InputRange.</source>
          <target state="translated">InputRange에서 형식 문자열에 따라 값을 읽습니다.</target>
        </trans-unit>
        <trans-unit id="fab1e24f991774bddf40367f9e156ce01d7843b7" translate="yes" xml:space="preserve">
          <source>Ready-made predicate functions to compare two values.</source>
          <target state="translated">기성 술어 함수는 두 값을 비교합니다.</target>
        </trans-unit>
        <trans-unit id="cab51a15bffa042cbc4510d8ab0c3275285bc68c" translate="yes" xml:space="preserve">
          <source>Reallocates &lt;code&gt;b&lt;/code&gt; to new size &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">재 할당 &lt;code&gt;b&lt;/code&gt; 의 새로운 크기에 &lt;code&gt;s&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="23686a2e44a73b949efd61ec6a53e06f541eaa5e" translate="yes" xml:space="preserve">
          <source>Reallocates &lt;code&gt;b&lt;/code&gt; to size &lt;code&gt;s&lt;/code&gt;, possibly moving memory around. &lt;code&gt;b&lt;/code&gt; must be &lt;code&gt;null&lt;/code&gt; or a buffer allocated with the same allocator. If reallocation was successful, &lt;code&gt;reallocate&lt;/code&gt; changes &lt;code&gt;b&lt;/code&gt; appropriately and returns &lt;code&gt;true&lt;/code&gt;. Upon failure, the call effects no change upon the allocator object, leaves &lt;code&gt;b&lt;/code&gt; unchanged, and returns &lt;code&gt;false&lt;/code&gt;. An allocator should implement &lt;code&gt;reallocate&lt;/code&gt; if it can derive some advantage from doing so; otherwise, this module defines a &lt;code&gt;reallocate&lt;/code&gt; free function implemented in terms of &lt;code&gt;expand&lt;/code&gt;, &lt;code&gt;allocate&lt;/code&gt;, and &lt;code&gt;deallocate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; 를 size &lt;code&gt;s&lt;/code&gt; 로 재 할당 하여 메모리를 이동할 수 있습니다. &lt;code&gt;b&lt;/code&gt; 는 &lt;code&gt;null&lt;/code&gt; 이거나 동일한 할당 자로 할당 된 버퍼 여야합니다 . 재 할당이 성공하면 변경 사항 &lt;code&gt;b&lt;/code&gt; 를 적절하게 &lt;code&gt;reallocate&lt;/code&gt; 하고 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 . 실패하면 호출은 할당 자 객체에 아무런 변화를주지 않으며 &lt;code&gt;b&lt;/code&gt; 를 변경하지 않고 &lt;code&gt;false&lt;/code&gt; 를 반환합니다 . 할당자는 그렇게함으로써 어떤 이점을 얻을 수 있다면 &lt;code&gt;reallocate&lt;/code&gt; 할당을 구현해야한다 . 그렇지 않으면,이 모듈은 정의 &lt;code&gt;reallocate&lt;/code&gt; 의 측면에서 구현 무료로 기능을 &lt;code&gt;expand&lt;/code&gt; , &lt;code&gt;allocate&lt;/code&gt; ,과 &lt;code&gt;deallocate&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d23aabd138f3b9a3380f8a3c9397aa4757a27130" translate="yes" xml:space="preserve">
          <source>Reallocates a block previously allocated with &lt;code&gt;alignedAllocate&lt;/code&gt;. Contractions do not occur in place.</source>
          <target state="translated">&lt;code&gt;alignedAllocate&lt;/code&gt; 이전에 할당 된 블록을 재 할당합니다 . 수축이 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e0477ffd1001aa8fef0b44f8b7b7bfdbdd0f52b7" translate="yes" xml:space="preserve">
          <source>Reallocates a memory block with specified alignment.</source>
          <target state="translated">지정된 정렬로 메모리 블록을 재 할당합니다.</target>
        </trans-unit>
        <trans-unit id="bb582920b89e35f47891a53d95ae14c32e375aab" translate="yes" xml:space="preserve">
          <source>Reallocates a memory block.</source>
          <target state="translated">메모리 블록을 재 할당합니다.</target>
        </trans-unit>
        <trans-unit id="255724aaef111ccd96dea7a8cd7a8bf558ede2b3" translate="yes" xml:space="preserve">
          <source>Reallocates a previously-allocated block. Contractions occur in place.</source>
          <target state="translated">이전에 할당 된 블록을 재 할당합니다. 수축이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8f515dad658f77a733680500f8d84e939a8562c8" translate="yes" xml:space="preserve">
          <source>Rearranges elements in &lt;code&gt;r&lt;/code&gt; in three adjacent ranges and returns them. The first and leftmost range only contains elements in &lt;code&gt;r&lt;/code&gt; less than &lt;code&gt;pivot&lt;/code&gt;. The second and middle range only contains elements in &lt;code&gt;r&lt;/code&gt; that are equal to &lt;code&gt;pivot&lt;/code&gt;. Finally, the third and rightmost range only contains elements in &lt;code&gt;r&lt;/code&gt; that are greater than &lt;code&gt;pivot&lt;/code&gt;. The less-than test is defined by the binary function &lt;code&gt;less&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; 의 요소를 3 개의 인접한 범위로 재 배열 하고 반환합니다. 첫 번째와 가장 왼쪽 범위에는 &lt;code&gt;pivot&lt;/code&gt; 보다 작은 &lt;code&gt;r&lt;/code&gt; 요소 만 포함 됩니다. 두 번째 및 중간 범위에는 &lt;code&gt;r&lt;/code&gt; 의 &lt;code&gt;pivot&lt;/code&gt; 과 같은 요소 만 포함 됩니다. 마지막으로, 세 번째 및 가장 오른쪽 범위에는 &lt;code&gt;r&lt;/code&gt; 의 &lt;code&gt;pivot&lt;/code&gt; 보다 큰 요소 만 포함 됩니다. 보다 작은 테스트는 이진 함수 &lt;code&gt;less&lt;/code&gt; 로 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="028e13bd0298376bf31316a3db976d1f8d73160a" translate="yes" xml:space="preserve">
          <source>Reason &lt;strong id=&quot;reason&quot;&gt;reason&lt;/strong&gt;;</source>
          <target state="translated">이유 &lt;strong id=&quot;reason&quot;&gt;이유&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="38a2132f7d06a3de3c8f482a30348e738425b184" translate="yes" xml:space="preserve">
          <source>Rebindable!T &lt;code&gt;obj&lt;/code&gt;</source>
          <target state="translated">리 바인딩 가능! T &lt;code&gt;obj&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7dfd63b70a6c7e705a4445213f0cca37c1792b78" translate="yes" xml:space="preserve">
          <source>Rebindable!T &lt;strong id=&quot;rebindable&quot;&gt;rebindable&lt;/strong&gt;(T)(Rebindable!T obj);</source>
          <target state="translated">재결합 가능! T &lt;strong id=&quot;rebindable&quot;&gt;재결합 가능&lt;/strong&gt; (T) (Rebindable! T obj);</target>
        </trans-unit>
        <trans-unit id="1bc1917f2d07d2c9a111dd45e98efe3841e1c509" translate="yes" xml:space="preserve">
          <source>Rebindable!T &lt;strong id=&quot;rebindable&quot;&gt;rebindable&lt;/strong&gt;(T)(T obj)</source>
          <target state="translated">리 바인딩 가능! T 리 &lt;strong id=&quot;rebindable&quot;&gt;바인딩 가능&lt;/strong&gt; (T) (T obj)</target>
        </trans-unit>
        <trans-unit id="d331e630b2896b20a876047a4c30e580c4e0b158" translate="yes" xml:space="preserve">
          <source>Receive a message from another thread, or block if no messages of the specified types are available. This function works by pattern matching a message against a set of delegates and executing the first match found.</source>
          <target state="translated">다른 스레드에서 메시지를 받거나 지정된 유형의 메시지가없는 경우 차단합니다. 이 기능은 메시지를 일련의 델리게이트와 일치시키고 발견 된 첫 번째 일치를 실행하여 작동합니다.</target>
        </trans-unit>
        <trans-unit id="6905aea09db96a1168eed83db3ff77aad0c4651b" translate="yes" xml:space="preserve">
          <source>Receive a message from another thread, or block until &lt;code&gt;duration&lt;/code&gt; exceeds, if no messages of the specified types are available. This function works by pattern matching a message against a set of delegates and executing the first match found.</source>
          <target state="translated">다른 스레드에서 메시지를 받거나 지정된 유형의 메시지를 사용할 수없는 경우 &lt;code&gt;duration&lt;/code&gt; 이 초과 될 때까지 차단 합니다. 이 함수는 델리게이트 집합에 대해 메시지를 패턴 일치시키고 발견 된 첫 번째 일치 항목을 실행하여 작동합니다.</target>
        </trans-unit>
        <trans-unit id="9965bf28e85415bb8f63bacd2e9f47d2c22ec76b" translate="yes" xml:space="preserve">
          <source>Receive buffer size</source>
          <target state="translated">수신 버퍼 크기</target>
        </trans-unit>
        <trans-unit id="8b1387a64dcd22aaaab5eec91298777b523da5ea" translate="yes" xml:space="preserve">
          <source>Receive data and get the remote endpoint &lt;code&gt;Address&lt;/code&gt;. If the socket is blocking, &lt;code&gt;receiveFrom&lt;/code&gt; waits until there is data to be received.</source>
          <target state="translated">데이터를 수신하고 원격 엔드 포인트 &lt;code&gt;Address&lt;/code&gt; 를 확보하십시오 . 소켓이 블로킹하는 경우 &lt;code&gt;receiveFrom&lt;/code&gt; 은 수신 할 데이터가있을 때까지 기다립니다.</target>
        </trans-unit>
        <trans-unit id="1d55cf19e7769478d5e838fbbb6306259dd64f58" translate="yes" xml:space="preserve">
          <source>Receive data on the connection. If the socket is blocking, &lt;code&gt;receive&lt;/code&gt; waits until there is data to be received.</source>
          <target state="translated">연결에서 데이터를 수신하십시오. 소켓이 블로킹중인 경우 &lt;code&gt;receive&lt;/code&gt; 는 수신 할 데이터가있을 때까지 기다립니다.</target>
        </trans-unit>
        <trans-unit id="84f50b3ba0f36e6f16be3df90ac3abf9c5a37ad4" translate="yes" xml:space="preserve">
          <source>Receive out-of-band data in band</source>
          <target state="translated">대역 내 대역 외 데이터 수신</target>
        </trans-unit>
        <trans-unit id="e48814461f501b48cd0f2672a164a1c8547c1c5a" translate="yes" xml:space="preserve">
          <source>Receive timeout</source>
          <target state="translated">시간 초과 수신</target>
        </trans-unit>
        <trans-unit id="1de54dc910afb04eede004cd1e30c3c21ae9c402" translate="yes" xml:space="preserve">
          <source>Receives a message from another thread and gives up if no match arrives within a specified duration.</source>
          <target state="translated">다른 스레드에서 메시지를 수신하고 지정된 기간 내에 일치하는 항목이 없으면 포기합니다.</target>
        </trans-unit>
        <trans-unit id="c8c96dab7a595e26ee5bfe55d132ef127b4461ed" translate="yes" xml:space="preserve">
          <source>Receives a message from another thread.</source>
          <target state="translated">다른 스레드로부터 메시지를받습니다.</target>
        </trans-unit>
        <trans-unit id="1ef50d47b70da48b55093a57f6ce6bbce8de63f5" translate="yes" xml:space="preserve">
          <source>Receives a string key as argument. The result is an expression describing the requested target information.</source>
          <target state="translated">문자열 키를 인수로받습니다. 결과는 요청 된 대상 정보를 설명하는 표현식입니다.</target>
        </trans-unit>
        <trans-unit id="7e73f9083a3fcdc41737d365f5ca155b818a6aec" translate="yes" xml:space="preserve">
          <source>Receives data from the connected socket. Use after successful curl_easy_perform() with CURLOPT_CONNECT_ONLY option.</source>
          <target state="translated">연결된 소켓에서 데이터를받습니다. CURLOPT_CONNECT_ONLY 옵션과 함께 curl_easy_perform ()을 사용한 후에 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="583529bfc00d6827dec4ffe687631f874fe53d08" translate="yes" xml:space="preserve">
          <source>Receives only messages with arguments of the specified types.</source>
          <target state="translated">지정된 유형의 인수가있는 메시지 만 수신합니다.</target>
        </trans-unit>
        <trans-unit id="033c316ca5ee67eb25d34d41cddc41a48f5386f5" translate="yes" xml:space="preserve">
          <source>Receives only messages with arguments of types &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 유형의 인수가있는 메시지 만 수신합니다 .</target>
        </trans-unit>
        <trans-unit id="347a8e34dcdfe0c261bbae1b232251ad673cf4a9" translate="yes" xml:space="preserve">
          <source>Record debugging information</source>
          <target state="translated">디버깅 정보 기록</target>
        </trans-unit>
        <trans-unit id="1f96545aca9f95a449dc3f5d1c56c54871ec8af3" translate="yes" xml:space="preserve">
          <source>Record separator</source>
          <target state="translated">레코드 구분</target>
        </trans-unit>
        <trans-unit id="b867c7900a8ddf139368afe948cced43cd8de4b0" translate="yes" xml:space="preserve">
          <source>Rectangular Arrays</source>
          <target state="translated">직사각형 배열</target>
        </trans-unit>
        <trans-unit id="6e974f9bd66c81587b1db5a9b54ad777181a0b76" translate="yes" xml:space="preserve">
          <source>Recurrence!(fun, CommonType!State, State.length) &lt;strong id=&quot;recurrence&quot;&gt;recurrence&lt;/strong&gt;(alias fun, State...)(State initial);</source>
          <target state="translated">재발! (fun, CommonType! State, State.length) &lt;strong id=&quot;recurrence&quot;&gt;재발&lt;/strong&gt; (별명 fun, State ...) (상태 초기);</target>
        </trans-unit>
        <trans-unit id="4a622afbcf711dd746ebf0dc2eb33902db5a905a" translate="yes" xml:space="preserve">
          <source>Recursive Templates</source>
          <target state="translated">재귀 템플릿</target>
        </trans-unit>
        <trans-unit id="fd645005541e35822634b62f9cf07c4841702213" translate="yes" xml:space="preserve">
          <source>Recursively calls the &lt;code&gt;opPostMove&lt;/code&gt; callbacks of a struct and its members if they're defined.</source>
          <target state="translated">구조체와 해당 멤버가 정의 된 경우 &lt;code&gt;opPostMove&lt;/code&gt; 콜백을 재귀 적으로 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="f7ddc39eecf352c1e235c0728bb6fd43812d50da" translate="yes" xml:space="preserve">
          <source>Recursively look at every module this module imports, return true if it imports m. Can be used to detect circular imports.</source>
          <target state="translated">이 모듈이 가져 오는 모든 모듈을 재귀 적으로보고 m을 가져 오면 true를 반환합니다. 순환 수입을 감지하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c08948c7f09d89104efa65883fc39648db73808" translate="yes" xml:space="preserve">
          <source>Recursively scanning all allocated memory pointed to by roots looking for more pointers into GC allocated memory.</source>
          <target state="translated">루트가 가리키는 모든 할당 된 메모리를 재귀 적으로 스캔하여 GC 할당 메모리에 대한 더 많은 포인터를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="c1a0c000cb1b2ae85456d0a51e79e682d551f1f8" translate="yes" xml:space="preserve">
          <source>Recycling temporary buffers across iterations of a parallel foreach loop.</source>
          <target state="translated">병렬 foreach 루프 반복에서 임시 버퍼를 재활용합니다.</target>
        </trans-unit>
        <trans-unit id="8dcc8f0ea09d6b329c32ee33bce8b233e4de04a7" translate="yes" xml:space="preserve">
          <source>Redirect &lt;code&gt;redirect&lt;/code&gt;</source>
          <target state="translated">리디렉션 &lt;code&gt;redirect&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e46b7f03c259fa26e24f1d796394f5dca85e2df6" translate="yes" xml:space="preserve">
          <source>Redirect all three streams. This is equivalent to &lt;code&gt;Redirect.stdin | Redirect.stdout | Redirect.stderr&lt;/code&gt;.</source>
          <target state="translated">세 개 스트림을 모두 리디렉션하십시오. 이것은 &lt;code&gt;Redirect.stdin | Redirect.stdout | Redirect.stderr&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9845ed195b026191f64bea3adcb719aff1093dda" translate="yes" xml:space="preserve">
          <source>Redirect the standard error stream into the standard output stream. This can not be combined with &lt;code&gt;Redirect.stderr&lt;/code&gt;.</source>
          <target state="translated">표준 오류 스트림을 표준 출력 스트림으로 리디렉션하십시오. &lt;code&gt;Redirect.stderr&lt;/code&gt; 과 함께 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="42baec091b8bacb781758c8fc0c08592e8ffddc3" translate="yes" xml:space="preserve">
          <source>Redirect the standard input, output or error streams, respectively.</source>
          <target state="translated">표준 입력, 출력 또는 오류 스트림을 각각 리디렉션하십시오.</target>
        </trans-unit>
        <trans-unit id="80fbb398850ffc67d552f8c380bb4aa84a0ac302" translate="yes" xml:space="preserve">
          <source>Redirect the standard output stream into the standard error stream. This can not be combined with &lt;code&gt;Redirect.stdout&lt;/code&gt;.</source>
          <target state="translated">표준 출력 스트림을 표준 오류 스트림으로 리디렉션하십시오. &lt;code&gt;Redirect.stdout&lt;/code&gt; 과 함께 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="9ced0df5f00cdd338d0d1abe97f8c296ab289eda" translate="yes" xml:space="preserve">
          <source>Reduces the length of the &lt;a href=&quot;std_range_primitives#isBidirectionalRange&quot;&gt;bidirectional range&lt;/a&gt;&lt;code&gt;range&lt;/code&gt; by removing elements that satisfy &lt;code&gt;pred&lt;/code&gt;. If &lt;code&gt;s = SwapStrategy.unstable&lt;/code&gt;, elements are moved from the right end of the range over the elements to eliminate. If &lt;code&gt;s = SwapStrategy.stable&lt;/code&gt; (the default), elements are moved progressively to front such that their relative order is preserved. Returns the filtered range.</source>
          <target state="translated">의 길이 감소 &lt;a href=&quot;std_range_primitives#isBidirectionalRange&quot;&gt;양방향 범위의 &lt;/a&gt; &lt;code&gt;range&lt;/code&gt; 충족 요소 제거 &lt;code&gt;pred&lt;/code&gt; . 경우 &lt;code&gt;s = SwapStrategy.unstable&lt;/code&gt; , 요소 제거의 요소 범위의 우측 단부로부터 이동된다. 경우 &lt;code&gt;s = SwapStrategy.stable&lt;/code&gt; (디폴트), 요소의 상대적인 순서가 유지되도록 앞 등으로 점진적으로 이동한다. 필터링 된 범위를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a38ed0ebd88e5865ccf3df6d0f1c1a6214e613a7" translate="yes" xml:space="preserve">
          <source>Ref Functions</source>
          <target state="translated">참조 기능</target>
        </trans-unit>
        <trans-unit id="93a3795b3f7bea3488bc980a00ebb42b7f194f23" translate="yes" xml:space="preserve">
          <source>Ref Return Scope Parameters</source>
          <target state="translated">참조 반환 범위 매개 변수</target>
        </trans-unit>
        <trans-unit id="2adad0226b3a33fb57b1f7508d1353c72a0c3052" translate="yes" xml:space="preserve">
          <source>Ref and Out Parameters</source>
          <target state="translated">Ref 및 Out 매개 변수</target>
        </trans-unit>
        <trans-unit id="ffb8735c2880ff82932bdca464eb4f0ca4ed037e" translate="yes" xml:space="preserve">
          <source>Ref functions allow functions to return by reference. This is analogous to ref function parameters.</source>
          <target state="translated">Ref 함수는 함수가 참조로 리턴하도록합니다. 이것은 ref 기능 매개 변수와 유사합니다.</target>
        </trans-unit>
        <trans-unit id="218cfb31767f23e1b298ff28247fa438c5c3eba2" translate="yes" xml:space="preserve">
          <source>RefAppender!(E[]) &lt;strong id=&quot;appender&quot;&gt;appender&lt;/strong&gt;(P : E[]*, E)(P arrayPtr);</source>
          <target state="translated">RefAppender! (E []) &lt;strong id=&quot;appender&quot;&gt;어 펜더&lt;/strong&gt; (P : E [] *, E) (P arrayPtr);</target>
        </trans-unit>
        <trans-unit id="2e3d9fdbfb40928983e19824181527eeea7cd51c" translate="yes" xml:space="preserve">
          <source>RefCounted!(T, RefCountedAutoInitialize.no) &lt;strong id=&quot;refCounted&quot;&gt;refCounted&lt;/strong&gt;(T)(T val);</source>
          <target state="translated">RefCounted! (T, RefCountedAutoInitialize.no) &lt;strong id=&quot;refCounted&quot;&gt;refCounted&lt;/strong&gt; (T) (T val);</target>
        </trans-unit>
        <trans-unit id="c7095fa996b8aea93416332641555e8ef550acca" translate="yes" xml:space="preserve">
          <source>Refer to the &lt;a href=&quot;std_uni&quot;&gt;&lt;code&gt;std.uni&lt;/code&gt;&lt;/a&gt; docs for a reference on Unicode terminology.  For a range that iterates by grapheme cluster (written character) see &lt;a href=&quot;std_uni#byGrapheme&quot;&gt;&lt;code&gt;std.uni.byGrapheme&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">유니 코드 용어에 대한 참조 는 &lt;a href=&quot;std_uni&quot;&gt; &lt;code&gt;std.uni&lt;/code&gt; &lt;/a&gt; 문서를 참조하십시오 . grapheme 클러스터 (문자 쓰기)로 반복되는 범위는 &lt;a href=&quot;std_uni#byGrapheme&quot;&gt; &lt;code&gt;std.uni.byGrapheme&lt;/code&gt; 을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5c95d85c5af695bcdab44f180e8c12e772a641c9" translate="yes" xml:space="preserve">
          <source>Refer to the page for &lt;a href=&quot;lex&quot;&gt;lexical syntax&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;lex&quot;&gt;어휘 구문&lt;/a&gt; 에 대한 페이지를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="b526c61314d0201e1fe9face79911a4659cd51ac" translate="yes" xml:space="preserve">
          <source>Reference Links</source>
          <target state="translated">참조 링크</target>
        </trans-unit>
        <trans-unit id="5f8843090009dc1b1594827e9439fcc612a46af4" translate="yes" xml:space="preserve">
          <source>Reference Types</source>
          <target state="translated">참조 유형</target>
        </trans-unit>
        <trans-unit id="bda0985509ec7a10650d2f5fca41cb601751ac0d" translate="yes" xml:space="preserve">
          <source>Reference counting is a common solution to solve explicit memory allocation problems. The code to implement the increment and decrement operations whenever assignments are made is one source of slowdown. Hiding it behind smart pointer classes doesn't help the speed. (Reference counting methods are not a general solution anyway, as circular references never get deleted.)</source>
          <target state="translated">레퍼런스 카운팅은 명시적인 메모리 할당 문제를 해결하는 일반적인 솔루션입니다. 할당이 이루어질 때마다 증가 및 감소 작업을 구현하는 코드는 속도 저하의 원인 중 하나입니다. 스마트 포인터 클래스 뒤에 숨기는 것은 속도에 도움이되지 않습니다. 순환 참조는 절대 삭제되지 않으므로 참조 계산 방법은 일반적인 솔루션이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="3795199e8f73e2699416b487db6aaeec12a18d75" translate="yes" xml:space="preserve">
          <source>Reference definitions start with a label in square brackets, followed by a colon, a URL and an optional title wrapped in single or double quotes, or in parentheses. If a reference label would match both a D symbol and a reference definition then the reference definition is used.</source>
          <target state="translated">참조 정의는 대괄호로 묶인 레이블로 시작하고 콜론, URL 및 선택적인 제목은 작은 따옴표 나 큰 따옴표로 묶거나 괄호로 묶습니다. 참조 레이블이 D 기호 및 참조 정의 모두와 일치하면 참조 정의가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="54b77a25f697c22c19da5ef6e50539b70edbf0ba" translate="yes" xml:space="preserve">
          <source>Reference implementation</source>
          <target state="translated">참조 구현</target>
        </trans-unit>
        <trans-unit id="df573c8374802ff7828171ecfa830069f2e20d19" translate="yes" xml:space="preserve">
          <source>Reference semantics</source>
          <target state="translated">참조 의미론</target>
        </trans-unit>
        <trans-unit id="4cf6bd8acab3ec3e28f9007df34a799a3db2218a" translate="yes" xml:space="preserve">
          <source>Reference to the value to modify.</source>
          <target state="translated">수정할 값에 대한 참조입니다.</target>
        </trans-unit>
        <trans-unit id="1e3df644b1a1f905d3fe996f46169357b5db04a5" translate="yes" xml:space="preserve">
          <source>Reference type demonstration</source>
          <target state="translated">참조 유형 데모</target>
        </trans-unit>
        <trans-unit id="f6a204f70b64ec3f8579cf4b86c716eaafd78572" translate="yes" xml:space="preserve">
          <source>Reference value.</source>
          <target state="translated">기준값.</target>
        </trans-unit>
        <trans-unit id="4d8843c1f2464c8fbd8ab73886eb0b41d1123f3b" translate="yes" xml:space="preserve">
          <source>Reference-style links enclose a reference label in square brackets. They may optionally be preceded by some link text, also enclosed in square brackets.</source>
          <target state="translated">참조 스타일 링크는 참조 레이블을 대괄호로 묶습니다. 선택적으로 일부 링크 텍스트가 앞에 올 수 있으며 대괄호로 묶일 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c7eb20a38241775d11ec59ff96fa6049a5057e8" translate="yes" xml:space="preserve">
          <source>Reference-style links enclose a reference label in square brackets. They may optionally be preceeded by some link text, also enclosed in square brackets.</source>
          <target state="translated">참조 스타일 링크는 참조 레이블을 대괄호로 묶습니다. 선택적으로 대괄호로 묶인 일부 링크 텍스트가 앞에 올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">References</target>
        </trans-unit>
        <trans-unit id="c04696f070001bb45d8888b617ed2619a4af2b35" translate="yes" xml:space="preserve">
          <source>References are returned as pointers in EAX.</source>
          <target state="translated">참조는 EAX에서 포인터로 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="8d0e6a6826b7d67307b20fb43d95d4dff93aa1ec" translate="yes" xml:space="preserve">
          <source>References cannot be upcast to the enclosing class object, nor can they be downcast to a derived interface.</source>
          <target state="translated">참조는 포함 클래스 객체로 업 캐스트 할 수 없으며 파생 된 인터페이스로 다운 캐스트 할 수도 없습니다.</target>
        </trans-unit>
        <trans-unit id="6669ef424ffa4627fac553bacbabacd10635aac0" translate="yes" xml:space="preserve">
          <source>References cannot be upcast to the enclosing class object, nor can they be downcast to a derived interface. To accomplish this, an appropriate &lt;code&gt;QueryInterface()&lt;/code&gt; would have to be implemented for that interface in standard COM fashion.</source>
          <target state="translated">참조는 포함 클래스 객체로 업 캐스트 할 수 없으며 파생 된 인터페이스로 다운 캐스트 할 수도 없습니다. 이를 위해서는 표준 COM 방식으로 해당 인터페이스에 대해 적절한 &lt;code&gt;QueryInterface()&lt;/code&gt; 를 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="4adc5738020ba312244b8258df3427e9630d5d4e" translate="yes" xml:space="preserve">
          <source>References to qualified objects can be implicitly converted according to the following rules:</source>
          <target state="translated">규정 된 객체에 대한 참조는 다음 규칙에 따라 암시 적으로 변환 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f33780efd6728fcd99948641510ca4e234624e70" translate="yes" xml:space="preserve">
          <source>Referring to data that has been the operand of &lt;code&gt;delete&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; 피연산자 인 데이터를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="aaf0bd26771aff6f50e1ae9c308ad3ffcf6e4371" translate="yes" xml:space="preserve">
          <source>RegEx &lt;code&gt;pat&lt;/code&gt;</source>
          <target state="translated">정규식 &lt;code&gt;pat&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="848bb51730ef072173b58615dfd1973ad43dc475" translate="yes" xml:space="preserve">
          <source>RegEx &lt;code&gt;re&lt;/code&gt;</source>
          <target state="translated">정규식 &lt;code&gt;re&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="69be2807346525566191c968086f61243d7e70d6" translate="yes" xml:space="preserve">
          <source>Regardless of the overload, &lt;code&gt;count&lt;/code&gt; will not accept infinite ranges for &lt;code&gt;haystack&lt;/code&gt;.</source>
          <target state="translated">과부하에 관계없이 &lt;code&gt;count&lt;/code&gt; 는 &lt;code&gt;haystack&lt;/code&gt; 에 대해 무한 범위를 허용하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="47288da0c24aadd7ef41246fbb262ce667ca883e" translate="yes" xml:space="preserve">
          <source>Regardless of the type of the operands, floating point constant folding is done in &lt;code&gt;real&lt;/code&gt; or greater precision. It is always done following IEEE 754 rules and round-to-nearest is used.</source>
          <target state="translated">피연산자의 유형에 관계없이 부동 소수점 상수 폴딩은 &lt;code&gt;real&lt;/code&gt; 또는 더 정밀하게 수행됩니다 . IEEE 754 규칙에 따라 항상 수행되며 가장 가까운 라운드가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a6a1edfebd5a70df8537ef07e2e286ead2d3f845" translate="yes" xml:space="preserve">
          <source>Regex flags</source>
          <target state="translated">정규식 플래그</target>
        </trans-unit>
        <trans-unit id="6d1ba653d653ecbd9c15e355d9133be994f123db" translate="yes" xml:space="preserve">
          <source>Regex string to extract UUIDs from text.</source>
          <target state="translated">텍스트에서 UUID를 추출하는 정규식 문자열</target>
        </trans-unit>
        <trans-unit id="12b60328a2fd45d355e7273c8c9ae9964c151e58" translate="yes" xml:space="preserve">
          <source>Regex!char (wchar/dchar) that contains a pattern in the form of compiled bytecode.</source>
          <target state="translated">컴파일 된 바이트 코드 형식의 패턴을 포함하는 Regex! char (wchar / dchar).</target>
        </trans-unit>
        <trans-unit id="85d320fbafaf5ef943535d080c82dd16ad56fafb" translate="yes" xml:space="preserve">
          <source>Region allocator organizes a chunk of memory as a simple bump-the-pointer allocator.</source>
          <target state="translated">지역 할당자는 간단한 덩어리 포인터 할당 자로 메모리 청크를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="79beea57b62dcf23132f27bfe4b48bf4320df97d" translate="yes" xml:space="preserve">
          <source>Region holding its own allocation, most often on the stack. Has statically-determined size.</source>
          <target state="translated">스택에서 자체 할당을 보유하는 영역입니다. 정적으로 결정된 크기가 있습니다.</target>
        </trans-unit>
        <trans-unit id="66ecfb00e68a58fbfcd954a0645b5e8762c0c475" translate="yes" xml:space="preserve">
          <source>Region using &lt;code&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Sbrk&quot;&gt;sbrk&lt;/a&gt;&lt;/code&gt; for allocating memory.</source>
          <target state="translated">메모리 할당에 &lt;code&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Sbrk&quot;&gt;sbrk&lt;/a&gt;&lt;/code&gt; 를 사용하는 지역 .</target>
        </trans-unit>
        <trans-unit id="16168729e57b855923c7a71a802959676ea3a2be" translate="yes" xml:space="preserve">
          <source>Register A Callback To Handle SQLITE_BUSY Errors</source>
          <target state="translated">SQLITE_BUSY 오류를 처리하기위한 콜백 등록</target>
        </trans-unit>
        <trans-unit id="d7ada71741a5c5efe7fce5b9acb6e7cf75421e75" translate="yes" xml:space="preserve">
          <source>Register A Virtual Table Implementation</source>
          <target state="translated">가상 테이블 구현 등록</target>
        </trans-unit>
        <trans-unit id="dec56350bae0a4e19968f3a800e057cd6e40fed8" translate="yes" xml:space="preserve">
          <source>Register Conventions</source>
          <target state="translated">등록 규칙</target>
        </trans-unit>
        <trans-unit id="d6a9176e21963e771db7ce035be039cfe634a245" translate="yes" xml:space="preserve">
          <source>Register a GC factory under the given &lt;code&gt;name&lt;/code&gt;. This function must be called from a C constructor before druntime is initialized.</source>
          <target state="translated">지정된 &lt;code&gt;name&lt;/code&gt; 으로 GC 팩토리를 등록하십시오 . druntime이 초기화되기 전에 C 생성자에서이 함수를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="27e9d001ff844d0976d90d94aa0606ae2ed35c58" translate="yes" xml:space="preserve">
          <source>Register a geometry callback named zGeom that can be used as part of an R-Tree geometry query as follows:</source>
          <target state="translated">다음과 같이 R-Tree 기하학 쿼리의 일부로 사용할 수있는 zGeom이라는 기하학 콜백을 등록하십시오.</target>
        </trans-unit>
        <trans-unit id="f7cd9ee60c35e855fd66e1ccd4c6ccf8e5a9a9d2" translate="yes" xml:space="preserve">
          <source>Register a handler which will be called whenever a character data segment is encountered.</source>
          <target state="translated">문자 데이터 세그먼트가 발생할 때마다 호출 될 핸들러를 등록하십시오.</target>
        </trans-unit>
        <trans-unit id="3f86fc9f835fccf504415dd945037249586048b2" translate="yes" xml:space="preserve">
          <source>Register a handler which will be called whenever a comment is encountered.</source>
          <target state="translated">주석이 발생할 때마다 호출 될 핸들러를 등록하십시오.</target>
        </trans-unit>
        <trans-unit id="5f49cc41b1a6ebd2be84f56709ff95c463e05d78" translate="yes" xml:space="preserve">
          <source>Register a handler which will be called whenever a processing instruction is encountered.</source>
          <target state="translated">처리 명령이 발생할 때마다 호출 될 핸들러를 등록하십시오.</target>
        </trans-unit>
        <trans-unit id="53ed0b4171eece2331ed206c51947ec94b63e3db" translate="yes" xml:space="preserve">
          <source>Register a handler which will be called whenever a start tag is encountered which matches the specified name. You can also pass null as the name, in which case the handler will be called for any unmatched start tag.</source>
          <target state="translated">지정된 이름과 일치하는 시작 태그가 발견 될 때마다 호출 될 핸들러를 등록하십시오. 이름으로 null을 전달할 수도 있습니다.이 경우 일치하지 않는 시작 태그에 대해 핸들러가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="e39c563e7a313c1ade7ea45c931c9334285e8ae0" translate="yes" xml:space="preserve">
          <source>Register a handler which will be called whenever an XML instruction is encountered.</source>
          <target state="translated">XML 명령어가 발생할 때마다 호출 될 핸들러를 등록하십시오.</target>
        </trans-unit>
        <trans-unit id="efed3344dfe3f1bba75833c0811baa022c7151ab" translate="yes" xml:space="preserve">
          <source>Register a handler which will be called whenever an end tag is encountered which matches the specified name. You can also pass null as the name, in which case the handler will be called for any unmatched end tag.</source>
          <target state="translated">지정된 이름과 일치하는 종료 태그가 발견 될 때마다 호출 될 핸들러를 등록하십시오. 이름으로 null을 전달할 수도 있습니다.이 경우 일치하지 않는 종료 태그에 대해 핸들러가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="3cae7781266253f344125f060ac6212ca49c80d9" translate="yes" xml:space="preserve">
          <source>Register a handler which will be called whenever text is encountered.</source>
          <target state="translated">텍스트가 나타날 때마다 호출 될 핸들러를 등록하십시오.</target>
        </trans-unit>
        <trans-unit id="6955c69b515fc5975384fa61e641237d355e91b3" translate="yes" xml:space="preserve">
          <source>Register an alternative handler which will be called whenever text is encountered. This differs from onText in that onText will decode the text, whereas onTextRaw will not. This allows you to make design choices, since onText will be more accurate, but slower, while onTextRaw will be faster, but less accurate. Of course, you can still call decode() within your handler, if you want, but you'd probably want to use onTextRaw only in circumstances where you know that decoding is unnecessary.</source>
          <target state="translated">텍스트가 나타날 때마다 호출 될 대체 핸들러를 등록하십시오. onText는 텍스트를 디코딩하지만 onTextRaw는 그렇지 않으므로 onText와 다릅니다. onText는 더 정확하지만 느리지 만 onTextRaw는 빠르지 만 덜 정확하기 때문에 디자인을 선택할 수 있습니다. 물론 원하는 경우 처리기 내에서 decode ()를 계속 호출 할 수 있지만 디코딩이 필요하지 않은 상황에서만 onTextRaw를 사용하고 싶을 것입니다.</target>
        </trans-unit>
        <trans-unit id="6a0a5ccb889da412cbc873c52366af12314ec3cd" translate="yes" xml:space="preserve">
          <source>Register an event handler that gets called to inform of upload/download progress.</source>
          <target state="translated">업로드 / 다운로드 진행 상황을 알리기 위해 호출되는 이벤트 핸들러를 등록하십시오.</target>
        </trans-unit>
        <trans-unit id="ff1854677201186d9c9212f2b4e865b72f837176" translate="yes" xml:space="preserve">
          <source>Register save state.</source>
          <target state="translated">저장 상태를 등록하십시오.</target>
        </trans-unit>
        <trans-unit id="01d6516676cc4761c62be5bf5476c1abfdd730cf" translate="yes" xml:space="preserve">
          <source>Register the thread with the GC using &lt;a href=&quot;core_thread#thread_attachThis&quot;&gt;&lt;code&gt;core.thread.thread_attachThis&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;core_thread#thread_detachThis&quot;&gt;&lt;code&gt;core.thread.thread_detachThis&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;core_thread#thread_attachThis&quot;&gt; &lt;code&gt;core.thread.thread_attachThis&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;core_thread#thread_detachThis&quot;&gt; &lt;code&gt;core.thread.thread_detachThis&lt;/code&gt; 를&lt;/a&gt; 사용하여 스레드를 GC에 등록하십시오 .</target>
        </trans-unit>
        <trans-unit id="edea0b832f387410c45fe6d1c0257549b09c8463" translate="yes" xml:space="preserve">
          <source>Register/unregister such data with calls to &lt;a href=&quot;#addRoot&quot;&gt;&lt;code&gt;addRoot&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#removeRoot&quot;&gt;&lt;code&gt;removeRoot&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#addRange&quot;&gt;&lt;code&gt;addRange&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#removeRange&quot;&gt;&lt;code&gt;removeRange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#addRoot&quot;&gt; &lt;code&gt;addRoot&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#removeRoot&quot;&gt; &lt;code&gt;removeRoot&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#addRange&quot;&gt; &lt;code&gt;addRange&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#removeRange&quot;&gt; &lt;code&gt;removeRange&lt;/code&gt; &lt;/a&gt; 호출로 이러한 데이터를 등록 / 등록 취소 합니다.</target>
        </trans-unit>
        <trans-unit id="b897a95101b262c6489ef352de771c8b1571a339" translate="yes" xml:space="preserve">
          <source>Registering the pointer with the garbage collector using the &lt;code&gt;core.memory.GC.addRoot&lt;/code&gt; or &lt;code&gt;core.memory.GC.addRange&lt;/code&gt; functions.</source>
          <target state="translated">&lt;code&gt;core.memory.GC.addRoot&lt;/code&gt; 또는 &lt;code&gt;core.memory.GC.addRange&lt;/code&gt; 함수를 사용하여 가비지 수집기에 포인터를 등록합니다 .</target>
        </trans-unit>
        <trans-unit id="9456a7585dbba6618e38e2cf0c1b40317705af1f" translate="yes" xml:space="preserve">
          <source>Registering the pointer with the garbage collector with the  &lt;a href=&quot;https://dlang.org/phobos/core_memory.html#addRoot&quot;&gt;std.gc.addRoot()&lt;/a&gt; or  &lt;a href=&quot;https://dlang.org/phobos/core_memory.html#addRange&quot;&gt;std.gc.addRange()&lt;/a&gt; calls.</source>
          <target state="translated">&lt;a href=&quot;https://dlang.org/phobos/core_memory.html#addRoot&quot;&gt;std.gc.addRoot ()&lt;/a&gt; 또는 &lt;a href=&quot;https://dlang.org/phobos/core_memory.html#addRange&quot;&gt;std.gc.addRange ()&lt;/a&gt; 호출로 가비지 수집기에 포인터를 등록 합니다.</target>
        </trans-unit>
        <trans-unit id="90bf4d614bb16f0559935e0886c7ffb4188be7a3" translate="yes" xml:space="preserve">
          <source>Registers a subclass of EncodingScheme.</source>
          <target state="translated">EncodingScheme의 서브 클래스를 등록합니다.</target>
        </trans-unit>
        <trans-unit id="b7e857971158f12b16058966ec09aca7b8486cbc" translate="yes" xml:space="preserve">
          <source>Registers the calling thread for use with the D Runtime. If this routine is called for a thread which is already registered, no action is performed.</source>
          <target state="translated">D 런타임과 함께 사용할 호출 스레드를 등록합니다. 이 루틴이 이미 등록 된 스레드에 대해 호출되면 조치가 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0d807038b92eb05d2d4d996579e00a6bf77015a3" translate="yes" xml:space="preserve">
          <source>Registers, the stack, and any other memory locations added through the &lt;code&gt;GC.&lt;a href=&quot;#addRange&quot;&gt;addRange&lt;/a&gt;&lt;/code&gt; function are always scanned conservatively. This means that even if a variable is e.g. of type &lt;code&gt;float&lt;/code&gt;, it will still be scanned for possible GC pointers. And, if the word-interpreted representation of the variable matches a GC-managed memory block's address, that memory block is considered live.</source>
          <target state="translated">&lt;code&gt;GC.&lt;a href=&quot;#addRange&quot;&gt;addRange&lt;/a&gt;&lt;/code&gt; 통해 추가 된 레지스터, 스택 및 기타 메모리 위치 addRange 함수는 항상 보수적으로 스캔됩니다. 이는 변수가 예를 들어 &lt;code&gt;float&lt;/code&gt; 유형 인 경우에도 가능한 GC 포인터가 있는지 여전히 스캔 됨을 의미합니다 . 그리고 변수의 단어 해석 해석이 GC 관리 메모리 블록의 주소와 일치하면 해당 메모리 블록은 활성 상태로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="5b77408c10909bc0e4a1441a15652a3747f0e210" translate="yes" xml:space="preserve">
          <source>Regular &lt;code&gt;const&lt;/code&gt; object references cannot be reassigned.</source>
          <target state="translated">일반 &lt;code&gt;const&lt;/code&gt; 객체 참조는 재 할당 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="cdfc76a8a310b7e8a9f6d61d4031ccd974b4fe97" translate="yes" xml:space="preserve">
          <source>Regular expression</source>
          <target state="translated">정규식</target>
        </trans-unit>
        <trans-unit id="088c8e28a39e0058c13e1b8ee79195564f351b32" translate="yes" xml:space="preserve">
          <source>Regular expressions.</source>
          <target state="translated">정규식.</target>
        </trans-unit>
        <trans-unit id="fd6d66abf1a8ee45e161caa22d14d8ff00b9253c" translate="yes" xml:space="preserve">
          <source>Rehash AA</source>
          <target state="translated">AA 리해시</target>
        </trans-unit>
        <trans-unit id="06c2ca43698227e0fcb6a7292c225e67ef6b66a5" translate="yes" xml:space="preserve">
          <source>Reimplement the C++ code in the other language.</source>
          <target state="translated">다른 언어로 C ++ 코드를 다시 구현하십시오.</target>
        </trans-unit>
        <trans-unit id="84b24ec52a5a43fadddf1e2db347899274e99845" translate="yes" xml:space="preserve">
          <source>Reinitializes the digest, making it ready for reuse.</source>
          <target state="translated">다이제스트를 다시 초기화하여 재사용 준비를합니다.</target>
        </trans-unit>
        <trans-unit id="317e3bbd4de02d1f0fdb5403ae3e2fd76d3e03bc" translate="yes" xml:space="preserve">
          <source>Reinterpretation of overlapped fields in a Union is not permitted.</source>
          <target state="translated">Union에서 겹친 필드의 재 해석은 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="13bed85e379f26741bf756020202c97a912d20f5" translate="yes" xml:space="preserve">
          <source>Rejang</source>
          <target state="translated">Rejang</target>
        </trans-unit>
        <trans-unit id="57b70c2469abaef03dad4e83ea9bb219f9fc54a1" translate="yes" xml:space="preserve">
          <source>Relational Expressions</source>
          <target state="translated">관계식</target>
        </trans-unit>
        <trans-unit id="150f549109a3258102c45788bb4ad19927962624" translate="yes" xml:space="preserve">
          <source>Relative tolerance.</source>
          <target state="translated">상대 공차.</target>
        </trans-unit>
        <trans-unit id="319ce06e27d0813f037c481a41b87a9a39ab0a62" translate="yes" xml:space="preserve">
          <source>Release and deallocate the string.</source>
          <target state="translated">문자열을 해제하고 할당을 해제하십시오.</target>
        </trans-unit>
        <trans-unit id="12ce12c0a47c490c07a3f2a6fc77a3c4d085937a" translate="yes" xml:space="preserve">
          <source>Releases a read lock on the enclosing mutex.</source>
          <target state="translated">둘러싸는 뮤텍스에서 읽기 잠금을 해제합니다.</target>
        </trans-unit>
        <trans-unit id="407ba71dd655b8bec16ad1bb13ead45c2966e1d4" translate="yes" xml:space="preserve">
          <source>Releases a write lock on the enclosing mutex.</source>
          <target state="translated">둘러싸는 뮤텍스에서 쓰기 잠금을 해제합니다.</target>
        </trans-unit>
        <trans-unit id="77b301bef933459296e302975b05bd47a1ea9666" translate="yes" xml:space="preserve">
          <source>Releases the controlled range and returns it.</source>
          <target state="translated">제어 된 범위를 해제하고 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fe5cc4d52ac22fbad50329229957a797b645b197" translate="yes" xml:space="preserve">
          <source>Reliably-delivered message datagrams</source>
          <target state="translated">안정적으로 전달 된 메시지 데이터 그램</target>
        </trans-unit>
        <trans-unit id="d7020f448aaf8aacc8b4d63537e375e865fff9d8" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">Remarks</target>
        </trans-unit>
        <trans-unit id="b685a7378dfdac22312b42db0dd99b4c40578868" translate="yes" xml:space="preserve">
          <source>Remote endpoint &lt;code&gt;Address&lt;/code&gt;.</source>
          <target state="translated">원격 엔드 포인트 &lt;code&gt;Address&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6b863d8a2db82afa5de2c971ac69ebf4948e3391" translate="yes" xml:space="preserve">
          <source>Remove TemplateInstance from table of instances.</source>
          <target state="translated">인스턴스 테이블에서 TemplateInstance를 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="911efbaa270338e46274d0437cfd895711d3b921" translate="yes" xml:space="preserve">
          <source>Remove Unnecessary Virtual Table Implementations</source>
          <target state="translated">불필요한 가상 테이블 구현 제거</target>
        </trans-unit>
        <trans-unit id="b9f1335d8dabb3f2ac77dc497547d4995b437d34" translate="yes" xml:space="preserve">
          <source>Remove a slot from the list of slots to be called when emit() is called.</source>
          <target state="translated">emit ()가 호출 될 때 호출 될 슬롯 목록에서 슬롯을 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="75c75293ff88caf368db2e508c8e1161c864acea" translate="yes" xml:space="preserve">
          <source>Remove all elements from AA.</source>
          <target state="translated">AA에서 모든 요소를 ​​제거하십시오.</target>
        </trans-unit>
        <trans-unit id="eb8a35f077465bebcc48319892d3eb238d336255" translate="yes" xml:space="preserve">
          <source>Remove an element from the container and return its value.</source>
          <target state="translated">컨테이너에서 요소를 제거하고 해당 값을 반환하십시오.</target>
        </trans-unit>
        <trans-unit id="2ef8e1749b1fc437ff3dd8997a6863e34ef9b467" translate="yes" xml:space="preserve">
          <source>Remove current item from the target.</source>
          <target state="translated">대상에서 현재 항목을 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="ef520f86e83572f8100d972f9ff0fca73044fe5b" translate="yes" xml:space="preserve">
          <source>Remove directory &lt;code&gt;pathname&lt;/code&gt;.</source>
          <target state="translated">디렉토리 &lt;code&gt;pathname&lt;/code&gt; 제거하십시오 .</target>
        </trans-unit>
        <trans-unit id="fc42c333904a152e0371e3be4d6f7919bec779ea" translate="yes" xml:space="preserve">
          <source>Remove directory and all of its content and subdirectories, recursively.</source>
          <target state="translated">재귀 적으로 디렉토리와 모든 컨텐츠 및 서브 디렉토리를 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="631a5717be79d54a0f16f3bed5d4ad090c4d25b3" translate="yes" xml:space="preserve">
          <source>Remove extension from path.</source>
          <target state="translated">경로에서 확장자를 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="cd762caea3eabb789e6ab4d0e09af278ebb8a90b" translate="yes" xml:space="preserve">
          <source>Remove first element in list pointed to by *plist.</source>
          <target state="translated">* plist가 가리키는 목록에서 첫 번째 요소를 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="a1d96d78926d702cadc6baa739e5e800797a01cf" translate="yes" xml:space="preserve">
          <source>Remove ptr from the list pointed to by *plist.</source>
          <target state="translated">* plist가 가리키는 목록에서 ptr을 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="0c6e9538ea69883d3ecf28f9d62eeee3a4133338" translate="yes" xml:space="preserve">
          <source>Remove the back element from the container.</source>
          <target state="translated">용기에서 뒷면 요소를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="5f6f354b54c230d18d3298b80d72e9218a763a5c" translate="yes" xml:space="preserve">
          <source>Remove the front element from the container.</source>
          <target state="translated">컨테이너에서 앞면 요소를 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="6900d371c19fc14c228483aaf602f3b566bac1e3" translate="yes" xml:space="preserve">
          <source>Remove this &lt;code&gt;Socket&lt;/code&gt; from the collection. Does nothing if the socket is not in the collection already.</source>
          <target state="translated">컬렉션 에서이 &lt;code&gt;Socket&lt;/code&gt; 을 제거하십시오 . 소켓이 이미 컬렉션에 없으면 아무 것도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d805766d2be060b325c570e416be292b8eacdf84" translate="yes" xml:space="preserve">
          <source>Removes &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;inout&lt;/code&gt; and &lt;code&gt;immutable&lt;/code&gt; qualifiers, if any, from type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; , &lt;code&gt;inout&lt;/code&gt; 및 &lt;code&gt;immutable&lt;/code&gt; 한정자를 &lt;code&gt;T&lt;/code&gt; 형식에서 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="e3559a0d3d649dde4006e69577d56dd5d58334be" translate="yes" xml:space="preserve">
          <source>Removes &lt;code&gt;howMany&lt;/code&gt; values at the front or back of the container. Unlike the unparameterized versions above, these functions do not throw if they could not remove &lt;code&gt;howMany&lt;/code&gt; elements. Instead, if &lt;code&gt;howMany &amp;gt; n&lt;/code&gt;, all elements are removed. The returned value is the effective number of elements removed. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated.</source>
          <target state="translated">컨테이너의 앞면 또는 뒷면에있는 &lt;code&gt;howMany&lt;/code&gt; 값을 제거합니다 . 그들은 제거 할 수없는 경우 위의 unparameterized 버전과는 달리,이 기능은 포기하지 &lt;code&gt;howMany&lt;/code&gt; 요소를. 대신 &lt;code&gt;howMany &amp;gt; n&lt;/code&gt; 경우 모든 요소가 제거됩니다. 반환 된 값은 제거 된 유효 요소 수입니다. 안정적인 버전은 동일하게 작동하지만 컨테이너를 반복하는 범위가 무효화되지 않도록 보장합니다.</target>
        </trans-unit>
        <trans-unit id="fd9a9235e5cccef072272c7923dca8d8b8f07aae" translate="yes" xml:space="preserve">
          <source>Removes &lt;code&gt;howMany&lt;/code&gt; values from the back of the array. Unlike the unparameterized versions above, these functions do not throw if they could not remove &lt;code&gt;howMany&lt;/code&gt; elements. Instead, if &lt;code&gt;howMany &amp;gt; n&lt;/code&gt;, all elements are removed. The returned value is the effective number of elements removed. Both stable and non-stable versions behave the same and guarantee that ranges iterating over the array are never invalidated.</source>
          <target state="translated">배열의 뒷면에서 &lt;code&gt;howMany&lt;/code&gt; 값을 제거합니다 . 그들은 제거 할 수없는 경우 위의 unparameterized 버전과는 달리,이 기능은 포기하지 &lt;code&gt;howMany&lt;/code&gt; 요소를. 대신 &lt;code&gt;howMany &amp;gt; n&lt;/code&gt; 경우 모든 요소가 제거됩니다. 반환 된 값은 제거 된 유효 요소 수입니다. 안정 버전과 비 안정 버전은 모두 동일하게 작동하며 어레이에서 반복되는 범위가 무효화되지 않도록 보장합니다.</target>
        </trans-unit>
        <trans-unit id="addb914fa84c3dfd2a72159ee45446c0b9555156" translate="yes" xml:space="preserve">
          <source>Removes a &lt;code&gt;Take!Range&lt;/code&gt; from the list in linear time.</source>
          <target state="translated">선형 시간으로 목록에서 &lt;code&gt;Take!Range&lt;/code&gt; 를 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="dc8eb20e88cf67b206b1391540476e846637572f" translate="yes" xml:space="preserve">
          <source>Removes a range from the list in linear time.</source>
          <target state="translated">선형 시간으로 목록에서 범위를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="1a9007b9058ef9a3903e0d1fb414c46ab4c82ff7" translate="yes" xml:space="preserve">
          <source>Removes adjacent duplicates in the replaced characters</source>
          <target state="translated">교체 된 문자에서 인접한 사본을 제거합니다</target>
        </trans-unit>
        <trans-unit id="82e07e864b86b15ec0cc3fba83690f2c78c43614" translate="yes" xml:space="preserve">
          <source>Removes all contents from the &lt;code&gt;DList&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DList&lt;/code&gt; 에서 모든 내용을 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="8175fe2e2ec533fb2f3ea71d6a45a80e5440f359" translate="yes" xml:space="preserve">
          <source>Removes all contents from the &lt;code&gt;SList&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SList&lt;/code&gt; 에서 모든 내용을 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="75a0a6b20196bebd245c2ff665536f61dadef567" translate="yes" xml:space="preserve">
          <source>Removes all elements belonging to &lt;code&gt;r&lt;/code&gt;, which must be a range obtained originally from this array.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; 에 속하는 모든 요소를 ​​제거합니다 .이 배열은 원래이 배열에서 얻은 범위 여야합니다.</target>
        </trans-unit>
        <trans-unit id="0e97a7143be5fd7ae56f54b099fdd911c66752ab" translate="yes" xml:space="preserve">
          <source>Removes all elements belonging to &lt;code&gt;r&lt;/code&gt;, which must be a range obtained originally from this container.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; 에 속하는 모든 요소를 ​​제거합니다.이 요소 는 원래이 컨테이너에서 얻은 범위 여야합니다.</target>
        </trans-unit>
        <trans-unit id="074271442d6e43c7b52454c97a1ae8585ac07608" translate="yes" xml:space="preserve">
          <source>Removes all elements from the container.</source>
          <target state="translated">컨테이너에서 모든 요소를 ​​제거합니다.</target>
        </trans-unit>
        <trans-unit id="cfe7abf427175ea51be638f2e8dcfba88e79ecb6" translate="yes" xml:space="preserve">
          <source>Removes all elements in &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 의 모든 요소를 ​​제거합니다 .</target>
        </trans-unit>
        <trans-unit id="1820e48ea8075f93dbc2ec4a43a2a49c33ceea08" translate="yes" xml:space="preserve">
          <source>Removes all qualifiers, if any, from type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">유형 &lt;code&gt;T&lt;/code&gt; 에서 모든 규정자를 제거합니다 (있는 경우) .</target>
        </trans-unit>
        <trans-unit id="fd8f4dfcc1465521c65a643873e1ea126d72af99" translate="yes" xml:space="preserve">
          <source>Removes all remaining keys and values from an associative array.</source>
          <target state="translated">연관 배열에서 나머지 키와 값을 모두 제거합니다.</target>
        </trans-unit>
        <trans-unit id="be15e0fe1f9b54312d80c112a03dc732d3756fc0" translate="yes" xml:space="preserve">
          <source>Removes all remaining keys and values from an associative array. The array is not rehashed after removal, to allow for the existing storage to be reused. This will affect all references to the same instance and is not equivalent to &lt;code&gt;destroy(aa)&lt;/code&gt; which only sets the current reference to &lt;code&gt;null&lt;/code&gt;</source>
          <target state="translated">연관 배열에서 나머지 키와 값을 모두 제거합니다. 기존 스토리지를 재사용 할 수 있도록 제거 후 어레이를 다시 해시하지 않습니다. 이것은 동일한 인스턴스에 대한 모든 참조에 영향을 미치며 현재 참조 만 &lt;code&gt;null&lt;/code&gt; 로 설정하는 &lt;code&gt;destroy(aa)&lt;/code&gt; 와 동일하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2539889e4a74104395775fc90c686d35222e93f9" translate="yes" xml:space="preserve">
          <source>Removes all the elements from the array and releases allocated memory.</source>
          <target state="translated">배열에서 모든 요소를 ​​제거하고 할당 된 메모리를 해제합니다.</target>
        </trans-unit>
        <trans-unit id="47e7efc48f66745492317dd0c9d48a2d48b3f8e8" translate="yes" xml:space="preserve">
          <source>Removes an element from &lt;code&gt;c&lt;/code&gt; by using its key &lt;code&gt;k&lt;/code&gt;. The key's type is defined by the container.</source>
          <target state="translated">키 &lt;code&gt;k&lt;/code&gt; 를 사용하여 &lt;code&gt;c&lt;/code&gt; 에서 요소를 제거합니다 . 키의 유형은 컨테이너에 의해 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="dae543f0af9eec290f3eb7fdbbc40f6e017b4fb3" translate="yes" xml:space="preserve">
          <source>Removes elements from a range in-place, and returns the shortened range.</source>
          <target state="translated">내부 범위에서 요소를 제거하고 단축 된 범위를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c493f84cfc3c4feee7c79564596fe7fdcb5c63bf" translate="yes" xml:space="preserve">
          <source>Removes elements from the container that are equal to the given values according to the less comparator. One element is removed for each value given which is in the container. If &lt;code&gt;allowDuplicates&lt;/code&gt; is true, duplicates are removed only if duplicate values are given.</source>
          <target state="translated">덜 비교기에 따라 주어진 값과 동일한 요소를 컨테이너에서 제거합니다. 컨테이너에있는 각 값에 대해 하나의 요소가 제거됩니다. 경우 &lt;code&gt;allowDuplicates&lt;/code&gt; 는 사실, 중복 중복 값이 주어진 경우에만 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="d3a3a979612bf67fc2aa4b68f4c12df6bbd7d178" translate="yes" xml:space="preserve">
          <source>Removes first element of &lt;code&gt;r&lt;/code&gt;, wich must be a range obtained originally from this container, from both DList instance and range &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; 의 첫 번째 요소를 제거 합니다. 즉,이 컨테이너에서 DList 인스턴스와 범위 &lt;code&gt;r&lt;/code&gt; 모두에서 원래 얻은 범위 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="95935f8457aff7b5a968195ed76aa4bcc48a8f64" translate="yes" xml:space="preserve">
          <source>Removes last element of &lt;code&gt;r&lt;/code&gt;, wich must be a range obtained originally from this container, from both DList instance and range &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; 의 마지막 요소를 제거 합니다. 즉,이 컨테이너에서 DList 인스턴스와 범위 &lt;code&gt;r&lt;/code&gt; 모두에서 원래 얻은 범위 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="6684e70de240c57633f3587686dfebd4c3d3a9a9" translate="yes" xml:space="preserve">
          <source>Removes matching characters with no corresponding replacement in &lt;code&gt;to&lt;/code&gt;</source>
          <target state="translated">어떤에서 교체 대응과 일치하는 문자들을 제거합니다 &lt;code&gt;to&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a36e8bc52f0cb7fc5c28528b40cbb5d9beca0a7" translate="yes" xml:space="preserve">
          <source>Removes one level of indentation from a multi-line string.</source>
          <target state="translated">여러 줄 문자열에서 한 수준의 들여 쓰기를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="c9ac994ea3d66d3ae9bb1c1409c6a95c45a3430a" translate="yes" xml:space="preserve">
          <source>Removes one level of indentation from an array of single-line strings.</source>
          <target state="translated">한 줄짜리 문자열 배열에서 한 수준의 들여 쓰기를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="8d03d645309a888edd15ae678f3a8f2547f961ab" translate="yes" xml:space="preserve">
          <source>Removes range &lt;code&gt;r&lt;/code&gt; from &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 에서 범위 &lt;code&gt;r&lt;/code&gt; 을 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="c41329deed9a4efcf10b2176fe664a54a868889b" translate="yes" xml:space="preserve">
          <source>Removes some element from &lt;code&gt;c&lt;/code&gt; and returns it.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 에서 일부 요소를 제거 하고 반환합니다.</target>
        </trans-unit>
        <trans-unit id="795d2a2abe70d609076ec29434081e4af8f7996d" translate="yes" xml:space="preserve">
          <source>Removes t from the list of tracked threads. No operation will be performed if t is not currently being tracked by this object.</source>
          <target state="translated">추적 된 스레드 목록에서 t를 제거합니다. 현재이 객체가 t를 추적하고 있지 않으면 아무 작업도 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="70aedbf39f8f6fcd708877752a1af453718e4db0" translate="yes" xml:space="preserve">
          <source>Removes the</source>
          <target state="translated">제거</target>
        </trans-unit>
        <trans-unit id="13848bdb3a5c4c945e8d9cbbcd02b78456d6dbbc" translate="yes" xml:space="preserve">
          <source>Removes the back element of a bidirectional range.</source>
          <target state="translated">양방향 범위의 후면 요소를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="9b25f64637087f5bc835983e78f87843694c7284" translate="yes" xml:space="preserve">
          <source>Removes the element at the front of &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 앞의 요소를 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="fca4fdd739d47d6c1b34541a0791727eff309f4b" translate="yes" xml:space="preserve">
          <source>Removes the environment variable with the given &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;name&lt;/code&gt; 환경 변수를 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="6324e03d9ca2678306eaf46ea102878a3613739d" translate="yes" xml:space="preserve">
          <source>Removes the first occurence of an element from the list in linear time.</source>
          <target state="translated">선형 시간으로 목록에서 요소의 첫 항목을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="652d4bcd6c0fc440c5d0b59e40bce2ada610fab1" translate="yes" xml:space="preserve">
          <source>Removes the front element of a range.</source>
          <target state="translated">범위의 앞 요소를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="31c8ae15c1926b56286e17a3190d64eeb4f25b68" translate="yes" xml:space="preserve">
          <source>Removes the given &lt;code&gt;Take!Range&lt;/code&gt; from the container</source>
          <target state="translated">컨테이너에서 주어진 &lt;code&gt;Take!Range&lt;/code&gt; 를 제거합니다</target>
        </trans-unit>
        <trans-unit id="c383d74900ae2bcccad5a644d221fce85c312a43" translate="yes" xml:space="preserve">
          <source>Removes the given range from the container.</source>
          <target state="translated">컨테이너에서 지정된 범위를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="86c9b1ac5622dfeb8165992599f02a61fa32e5d6" translate="yes" xml:space="preserve">
          <source>Removes the largest element from the heap and returns a copy of it. The element still resides in the heap's store. For performance reasons you may want to use &lt;code&gt;removeFront&lt;/code&gt; with heaps of objects that are expensive to copy.</source>
          <target state="translated">힙에서 가장 큰 요소를 제거하고 사본을 리턴합니다. 요소는 여전히 힙 저장소에 있습니다. 성능상의 이유로 복사 비용이 많이 드는 힙이있는 &lt;code&gt;removeFront&lt;/code&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="472ee9cd76c07924e78135a137e5d8d96adefe30" translate="yes" xml:space="preserve">
          <source>Removes the largest element from the heap.</source>
          <target state="translated">힙에서 가장 큰 요소를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="8b4b3acb6c78ef961701e3874973b44eb7f03d0b" translate="yes" xml:space="preserve">
          <source>Removes the last element from the array and returns it. Both stable and non-stable versions behave the same and guarantee that ranges iterating over the array are never invalidated.</source>
          <target state="translated">배열에서 마지막 요소를 제거하고 반환합니다. 안정 버전과 비 안정 버전은 모두 동일하게 작동하며 어레이에서 반복되는 범위가 무효화되지 않도록 보장합니다.</target>
        </trans-unit>
        <trans-unit id="cbfc6a524cbf983c49e24e9a353029ae2447c16d" translate="yes" xml:space="preserve">
          <source>Removes the lock over the specified file segment.</source>
          <target state="translated">지정된 파일 세그먼트에 대한 잠금을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="9f480d4e378340c1a84ecb186d38dcd03da28157" translate="yes" xml:space="preserve">
          <source>Removes the memory block referenced by p from an internal list of roots to be scanned during a collection. If p is null or is not a value previously passed to addRoot() then no operation is performed.</source>
          <target state="translated">콜렉션 중에 스캔 할 내부 루트 목록에서 p가 참조하는 메모리 블록을 제거합니다. p가 널이거나 이전에 addRoot ()에 전달 된 값이 아닌 경우 조작이 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="39ee0e4eeade1b792b1844870c943280497316dc" translate="yes" xml:space="preserve">
          <source>Removes the memory mapping causing all physical memory to be decommited and the virtual address space to be reclaimed.</source>
          <target state="translated">모든 물리적 메모리가 커밋되고 가상 주소 공간이 회수되도록하는 메모리 매핑을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="ba9c920fa73d4e35936a77ebc5bf0f649f228b82" translate="yes" xml:space="preserve">
          <source>Removes the memory range starting at p from an internal list of ranges to be scanned during a collection. If p is null or does not represent a value previously passed to addRange() then no operation is performed.</source>
          <target state="translated">컬렉션 중에 스캔 할 내부 범위 목록에서 p에서 시작하는 메모리 범위를 제거합니다. p가 null이거나 이전에 addRange ()에 전달 된 값을 나타내지 않으면 작업이 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="81d852ce25ceb246e735f784209b6e858afa3347" translate="yes" xml:space="preserve">
          <source>Removes the registered name associated with a tid.</source>
          <target state="translated">tid와 관련된 등록 된 이름을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="0c60420ccfdbfc083a2df49308225876e57a8c42" translate="yes" xml:space="preserve">
          <source>Removes the value at the back of &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 뒤에있는 값을 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="c9a77b02f79effe6f57835d97c27484ed5fcbae5" translate="yes" xml:space="preserve">
          <source>Removes the value at the front of the container. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated.</source>
          <target state="translated">컨테이너 앞면의 값을 제거합니다. 안정적인 버전은 동일하게 작동하지만 컨테이너를 반복하는 범위가 무효화되지 않도록 보장합니다.</target>
        </trans-unit>
        <trans-unit id="eadd2b6a6ae0fdbbe767f971e4e3f148b99d9df6" translate="yes" xml:space="preserve">
          <source>Removes the value at the front/back of the container. The stable version behaves the same, but guarantees that ranges iterating over the container are never invalidated.</source>
          <target state="translated">컨테이너의 앞 / 뒤에있는 값을 제거합니다. 안정적인 버전은 동일하게 작동하지만 컨테이너를 반복하는 범위가 무효화되지 않도록 보장합니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
