<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="d">
    <body>
      <group id="d">
        <trans-unit id="d900deb1527f0011ed753db4ca48cefc07c96afd" translate="yes" xml:space="preserve">
          <source>Removes the value from the back of the array. Both stable and non-stable versions behave the same and guarantee that ranges iterating over the array are never invalidated.</source>
          <target state="translated">배열의 뒷면에서 값을 제거합니다. 안정 버전과 비 안정 버전은 모두 동일하게 작동하며 어레이에서 반복되는 범위가 무효화되지 않도록 보장합니다.</target>
        </trans-unit>
        <trans-unit id="4436837a957bd66609b37183ee307dcfa2107e76" translate="yes" xml:space="preserve">
          <source>Removing Immutable or Const with a Cast</source>
          <target state="translated">캐스트로 불변 또는 불변 제거</target>
        </trans-unit>
        <trans-unit id="1956e1d291b4925492f6f19c22212b769e17b004" translate="yes" xml:space="preserve">
          <source>Removing Keys</source>
          <target state="translated">키 제거</target>
        </trans-unit>
        <trans-unit id="a8c4af8493e80b02a246117533ff5d93a66f0ed0" translate="yes" xml:space="preserve">
          <source>Removing the need to ensure that Druntime is properly initialized on calls to the library, for situations when an initialization step is not performed or would be difficult to insert before the library is used.</source>
          <target state="translated">초기화 단계가 수행되지 않거나 라이브러리를 사용하기 전에 삽입하기 어려운 상황에서 라이브러리 호출시 Druntime이 올바르게 초기화되도록 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="615a81bbcb0f0fb40dff346fcc5d1c5d76be785c" translate="yes" xml:space="preserve">
          <source>Rename file &lt;code&gt;from&lt;/code&gt; to &lt;code&gt;to&lt;/code&gt;, moving it between directories if required. If the target file exists, it is overwritten.</source>
          <target state="translated">파일 이름 바꾸기 &lt;code&gt;from&lt;/code&gt; 에 &lt;code&gt;to&lt;/code&gt; 필요한 경우 디렉토리 사이를 이동. 대상 파일이 있으면 덮어 씁니다.</target>
        </trans-unit>
        <trans-unit id="72d2ea7d71c7337c5f32dfe9de60569c8bb4f7e7" translate="yes" xml:space="preserve">
          <source>Rename file &lt;code&gt;from&lt;/code&gt; to &lt;code&gt;to&lt;/code&gt;. If the target file exists, it is overwritten.</source>
          <target state="translated">파일의 이름을 바꿉니다 &lt;code&gt;from&lt;/code&gt; 에 &lt;code&gt;to&lt;/code&gt; . 대상 파일이 있으면 덮어 씁니다.</target>
        </trans-unit>
        <trans-unit id="a6a2b2ae27b46e065f541c1730f231403c853815" translate="yes" xml:space="preserve">
          <source>Renamed Imports</source>
          <target state="translated">이름이 바뀐 수입품</target>
        </trans-unit>
        <trans-unit id="195092f497acfd79b395280ba71e508accf6a5d3" translate="yes" xml:space="preserve">
          <source>Renamed and Selective Imports</source>
          <target state="translated">이름이 바뀌고 선택적인 수입품</target>
        </trans-unit>
        <trans-unit id="85da1ab2956f6cb95897f3c01f96cccb6210bd74" translate="yes" xml:space="preserve">
          <source>Renames the elements of a &lt;a href=&quot;#Tuple&quot;&gt;&lt;code&gt;Tuple&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#Tuple&quot;&gt; &lt;code&gt;Tuple&lt;/code&gt; &lt;/a&gt; 의 요소 이름을 바꿉니다 .</target>
        </trans-unit>
        <trans-unit id="6cd7560b9ee83b5295805b38930388ee9edbeb39" translate="yes" xml:space="preserve">
          <source>Reorders the random-access range &lt;code&gt;r&lt;/code&gt; such that the range &lt;code&gt;r[0 .. mid]&lt;/code&gt; is the same as if the entire &lt;code&gt;r&lt;/code&gt; were sorted, and leaves the range &lt;code&gt;r[mid .. r.length]&lt;/code&gt; in no particular order. Performs &amp;Omicron;(&lt;code&gt;r.length * log(mid)&lt;/code&gt;) evaluations of &lt;code&gt;pred&lt;/code&gt;. The implementation simply calls &lt;code&gt;topN!(less, ss)(r, n)&lt;/code&gt; and then &lt;code&gt;sort!(less, ss)(r[0 .. n])&lt;/code&gt;.</source>
          <target state="translated">범위 &lt;code&gt;r[0 .. mid]&lt;/code&gt; 가 전체 &lt;code&gt;r&lt;/code&gt; 이 정렬 된 것과 동일 하도록 랜덤 액세스 범위 &lt;code&gt;r&lt;/code&gt; 을 &lt;code&gt;r[mid .. r.length]&lt;/code&gt; 하고, r [mid .. r.length] 범위를 특별한 순서로 두지 마십시오 . 수행합니다 &amp;Omicron; ( &lt;code&gt;r.length * log(mid)&lt;/code&gt; )의 평가 &lt;code&gt;pred&lt;/code&gt; . 구현은 단순히 &lt;code&gt;topN!(less, ss)(r, n)&lt;/code&gt; 호출 한 다음 &lt;code&gt;sort!(less, ss)(r[0 .. n])&lt;/code&gt; 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="8038fb87bf153233f30456c9053a8cdde880ad70" translate="yes" xml:space="preserve">
          <source>Reorders the range &lt;code&gt;r&lt;/code&gt; using &lt;code&gt;swap&lt;/code&gt; such that &lt;code&gt;r[nth]&lt;/code&gt; refers to the element that would fall there if the range were fully sorted. In addition, it also partitions &lt;code&gt;r&lt;/code&gt; such that all elements &lt;code&gt;e1&lt;/code&gt; from &lt;code&gt;r[0]&lt;/code&gt; to &lt;code&gt;r[nth]&lt;/code&gt; satisfy &lt;code&gt;!less(r[nth], e1)&lt;/code&gt;, and all elements &lt;code&gt;e2&lt;/code&gt; from &lt;code&gt;r[nth]&lt;/code&gt; to &lt;code&gt;r[r.length]&lt;/code&gt; satisfy &lt;code&gt;!less(e2, r[nth])&lt;/code&gt;. Effectively, it finds the nth smallest (according to &lt;code&gt;less&lt;/code&gt;) elements in &lt;code&gt;r&lt;/code&gt;. Performs an expected &amp;Omicron;(&lt;code&gt;r.length&lt;/code&gt;) (if unstable) or &amp;Omicron;(&lt;code&gt;r.length * log(r.length)&lt;/code&gt;) (if stable) evaluations of &lt;code&gt;less&lt;/code&gt; and &lt;code&gt;swap&lt;/code&gt;.</source>
          <target state="translated">재 배열 범위 &lt;code&gt;r&lt;/code&gt; 하여 &lt;code&gt;swap&lt;/code&gt; 하도록 &lt;code&gt;r[nth]&lt;/code&gt; 범위가 완전히 정렬된다면이 떨어질 것이다 요소를 지칭한다. 또한,도 파티션 &lt;code&gt;r&lt;/code&gt; 에 모든 요소가되도록 &lt;code&gt;e1&lt;/code&gt; 으로부터 &lt;code&gt;r[0]&lt;/code&gt; 에 대한 &lt;code&gt;r[nth]&lt;/code&gt; 충족 &lt;code&gt;!less(r[nth], e1)&lt;/code&gt; , 모든 요소가 &lt;code&gt;e2&lt;/code&gt; 에 에서 &lt;code&gt;r[nth]&lt;/code&gt; 에 &lt;code&gt;r[r.length]&lt;/code&gt; &lt;code&gt;!less(e2, r[nth])&lt;/code&gt; 충족하십시오 . 효과적으로, 이는 (따른 n 번째 가장 작은 발견 &lt;code&gt;less&lt;/code&gt; 의 요소) &lt;code&gt;r&lt;/code&gt; . 예상되는 &amp;Omicron; ( &lt;code&gt;r.length&lt;/code&gt; ) ( 안정된 경우) 또는 &amp;Omicron; ( &lt;code&gt;r.length * log(r.length)&lt;/code&gt; &lt;code&gt;less&lt;/code&gt; 와 &lt;code&gt;swap&lt;/code&gt; 의 r.length * log (r.length) ) (안정적인 경우) 평가 .</target>
        </trans-unit>
        <trans-unit id="de24de649aea23a9bd651f6497986efa24e8227f" translate="yes" xml:space="preserve">
          <source>Reorganizes the associative array in place so that lookups are more efficient.</source>
          <target state="translated">조회가보다 효율적으로 이루어질 수 있도록 연관 배열을 재구성합니다.</target>
        </trans-unit>
        <trans-unit id="98df419e01e1f124bfb5c8dae37de763c48f0fe0" translate="yes" xml:space="preserve">
          <source>Reorganizes the associative array in place so that lookups are more efficient. &lt;code&gt;rehash&lt;/code&gt; is effective when, for example, the program is done loading up a symbol table and now needs fast lookups in it. Returns a reference to the reorganized array.</source>
          <target state="translated">조회가보다 효율적으로 이루어질 수 있도록 연관 배열을 재구성합니다. &lt;code&gt;rehash&lt;/code&gt; 는 예를 들어 프로그램이 심볼 테이블로드를 완료하고 빠른 검색이 필요한 경우에 효과적입니다. 재구성 된 배열에 대한 참조를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="99a71dbb730bee0ec8b3946c012b2412dfb67ac6" translate="yes" xml:space="preserve">
          <source>Repeat a list of dt_t's count times.</source>
          <target state="translated">dt_t의 카운트 횟수 목록을 반복하십시오.</target>
        </trans-unit>
        <trans-unit id="fa5270aa9f7862a9975dafc310721f15e957c201" translate="yes" xml:space="preserve">
          <source>Repeat the process for each character until the attacker has the whole correct token and the server accepts the harmful data. This can be done in a week with the attacker pacing the attack to 10 requests per second with only one client.</source>
          <target state="translated">공격자가 전체 토큰을 가지고 서버가 유해한 데이터를 수락 할 때까지 각 문자에 대해 프로세스를 반복하십시오. 공격자는 단 한 명의 클라이언트로 초당 10 건의 요청에 대한 공격을 한 주에 완료 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cdb1a2a478b2a5cb7ca163524e5848919392e356" translate="yes" xml:space="preserve">
          <source>Repeat!T &lt;strong id=&quot;repeat&quot;&gt;repeat&lt;/strong&gt;(T)(T value);</source>
          <target state="translated">반복! T &lt;strong id=&quot;repeat&quot;&gt;반복&lt;/strong&gt; (T) (T 값);</target>
        </trans-unit>
        <trans-unit id="7067badd8dd97b0c84af9ca2ddae890cba0074e1" translate="yes" xml:space="preserve">
          <source>Repeated calls to this function will return a new struct each time, until a special &quot;end of msgs&quot; struct is returned as a signal that there is no more to get at this point.  The data the returned pointer points to will not survive calling curl_multi_cleanup().  The 'CURLMsg' struct is meant to be very simple and only contain very basic informations. If more involved information is wanted, we will provide the particular &quot;transfer handle&quot; in that struct and that should/could/would be used in subsequent curl_easy_getinfo() calls (or similar). The point being that we must never expose complex structs to applications, as then we'll undoubtably get backwards compatibility problems in the future.</source>
          <target state="translated">이 함수를 반복해서 호출하면 특별한 &quot;msgs of ends&quot;구조체가이 시점에서 더 이상 얻을 수 없다는 신호로 반환 될 때까지 매번 새 구조체를 반환합니다. 반환 된 포인터가 가리키는 데이터는 curl_multi_cleanup ()을 호출해도 살아남지 않습니다. 'CURLMsg'구조체는 매우 단순하고 기본적인 정보 만 포함합니다. 더 많은 관련 정보가 필요한 경우 해당 구조체에 특정 &quot;전송 핸들&quot;을 제공하고 후속 curl_easy_getinfo () 호출 (또는 이와 유사한)에 사용할 수 있습니다. 요점은 복잡한 구조체를 응용 프로그램에 노출해서는 안된다는 것입니다. 따라서 앞으로 호환성 문제가 의심 할 여지가 없습니다.</target>
        </trans-unit>
        <trans-unit id="d7112e0d287788ea5f4451548ee0fc207ecdc29d" translate="yes" xml:space="preserve">
          <source>Repeats the given forward range ad infinitum. If the original range is infinite (fact that would make &lt;code&gt;Cycle&lt;/code&gt; the identity application), &lt;code&gt;Cycle&lt;/code&gt; detects that and aliases itself to the range type itself. That works for non-forward ranges too. If the original range has random access, &lt;code&gt;Cycle&lt;/code&gt; offers random access and also offers a constructor taking an initial position &lt;code&gt;index&lt;/code&gt;. &lt;code&gt;Cycle&lt;/code&gt; works with static arrays in addition to ranges, mostly for performance reasons.</source>
          <target state="translated">지정된 순방향 광고를 무한 반복합니다. 원래 범위가 무한한 경우 ( &lt;code&gt;Cycle&lt;/code&gt; 을 ID 응용 프로그램으로 만드는 사실 ) &lt;code&gt;Cycle&lt;/code&gt; 은이를 감지하여 범위 유형 자체로 별칭을 지정합니다. 비 포워드 범위에서도 작동합니다. 원래 범위에 임의 액세스 권한이 있으면 &lt;code&gt;Cycle&lt;/code&gt; 은 임의 액세스 권한을 제공하고 초기 위치 &lt;code&gt;index&lt;/code&gt; 취하는 생성자를 제공합니다 . &lt;code&gt;Cycle&lt;/code&gt; 는 주로 성능상의 이유로 범위 외에 정적 배열과 함께 작동합니다.</target>
        </trans-unit>
        <trans-unit id="a7cf7b25a703b308887c7f1d100c4326ef20ac46" translate="yes" xml:space="preserve">
          <source>Replace</source>
          <target state="translated">Replace</target>
        </trans-unit>
        <trans-unit id="33c10388cfe9be7baae806c9effeecf88bf645c8" translate="yes" xml:space="preserve">
          <source>Replace call to GC allocator with call to tracing GC allocator.</source>
          <target state="translated">GC 할당 자 호출을 GC 할당 자 추적 호출로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="1ff95b2b7bbcf8ce58f88097e74c325fa1730e9f" translate="yes" xml:space="preserve">
          <source>Replace each tab character in &lt;code&gt;r&lt;/code&gt; with the number of spaces necessary to align the following character at the next tab stop.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; 의 각 탭 문자를 다음 탭 정지에서 다음 문자를 맞추는 데 필요한 공백 수로 바꾸십시오.</target>
        </trans-unit>
        <trans-unit id="ef40c4ff7d6a1b668fd3f06a49a8871d21fae529" translate="yes" xml:space="preserve">
          <source>Replace each tab character in &lt;code&gt;s&lt;/code&gt; with the number of spaces necessary to align the following character at the next tab stop.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 의 각 탭 문자를 다음 탭 정지에서 다음 문자를 정렬하는 데 필요한 공백 수로 바꾸십시오.</target>
        </trans-unit>
        <trans-unit id="f49a854f543f88eda87bf74688858dc39878b2f9" translate="yes" xml:space="preserve">
          <source>Replace existing extension on filespec with new one.</source>
          <target state="translated">filespec의 기존 확장명을 새 확장명으로 바꾸십시오.</target>
        </trans-unit>
        <trans-unit id="0cdc355d0ae07533d5cb199d26f7afde21eadacb" translate="yes" xml:space="preserve">
          <source>Replace filename portion of path.</source>
          <target state="translated">경로의 파일 이름 부분을 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="92d1c292c2daecbb83e4e323e2b960d187e80417" translate="yes" xml:space="preserve">
          <source>Replace format string</source>
          <target state="translated">형식 문자열 바꾸기</target>
        </trans-unit>
        <trans-unit id="70ea7b845eb8a19cdbf746d15b0bb9479f589172" translate="yes" xml:space="preserve">
          <source>Replace next in chain with &lt;code&gt;tail&lt;/code&gt;. Use &lt;code&gt;chainTogether&lt;/code&gt; instead if at all possible.</source>
          <target state="translated">체인에서 다음을 &lt;code&gt;tail&lt;/code&gt; 교체하십시오 . 가능하면 &lt;code&gt;chainTogether&lt;/code&gt; 를 대신 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="c4d2e965595586bd1d65b369659c32a9fb3f221a" translate="yes" xml:space="preserve">
          <source>Replace occurrences of &lt;code&gt;from&lt;/code&gt; with &lt;code&gt;to&lt;/code&gt; in &lt;code&gt;subject&lt;/code&gt; and output the result into &lt;code&gt;sink&lt;/code&gt;.</source>
          <target state="translated">의 발생 교체 &lt;code&gt;from&lt;/code&gt; 와 &lt;code&gt;to&lt;/code&gt; 의 &lt;code&gt;subject&lt;/code&gt; 로 결과를 출력 &lt;code&gt;sink&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3d3607275774f4c09d1155f81daaa8e260ff7594" translate="yes" xml:space="preserve">
          <source>Replace occurrences of &lt;code&gt;from&lt;/code&gt; with &lt;code&gt;to&lt;/code&gt; in &lt;code&gt;subject&lt;/code&gt; in a new array.</source>
          <target state="translated">의 발생 교체 &lt;code&gt;from&lt;/code&gt; 와 &lt;code&gt;to&lt;/code&gt; 에서 &lt;code&gt;subject&lt;/code&gt; 새로운 배열에.</target>
        </trans-unit>
        <trans-unit id="4db98af9e39320a953bbea6bb998fe7493c40e5e" translate="yes" xml:space="preserve">
          <source>Replaced by</source>
          <target state="translated">로 교체되다</target>
        </trans-unit>
        <trans-unit id="e7e220393c76af6d6fb391eec888ad956f8e84d1" translate="yes" xml:space="preserve">
          <source>Replaces all occurrences of &lt;code&gt;From&lt;/code&gt; into &lt;code&gt;To&lt;/code&gt;, in one or more types &lt;code&gt;T&lt;/code&gt;. For example, &lt;code&gt;ReplaceType!(int, uint, Tuple!(int, float)[string])&lt;/code&gt; yields &lt;code&gt;Tuple!(uint, float)[string]&lt;/code&gt;. The types in which replacement is performed may be arbitrarily complex, including qualifiers, built-in type constructors (pointers, arrays, associative arrays, functions, and delegates), and template instantiations; replacement proceeds transitively through the type definition. However, member types in &lt;code&gt;struct&lt;/code&gt;s or &lt;code&gt;class&lt;/code&gt;es are not replaced because there are no ways to express the types resulting after replacement.</source>
          <target state="translated">하나 이상의 유형 &lt;code&gt;T&lt;/code&gt; 에서 &lt;code&gt;From&lt;/code&gt; 의 모든 항목 을 &lt;code&gt;To&lt;/code&gt; 로 바꿉니다 . 예를 들어 &lt;code&gt;ReplaceType!(int, uint, Tuple!(int, float)[string])&lt;/code&gt; 은 &lt;code&gt;Tuple!(uint, float)[string]&lt;/code&gt; 합니다. 대체가 수행되는 유형은 한정자, 내장 유형 생성자 (포인터, 배열, 연관 배열, 함수 및 대리자) 및 템플릿 인스턴스화를 포함하여 임의로 복잡 할 수 있습니다. 대체는 유형 정의를 통해 전 이적으로 진행됩니다. 그러나 &lt;code&gt;struct&lt;/code&gt; 또는 &lt;code&gt;class&lt;/code&gt; es 의 멤버 유형은 교체 후 결과 유형을 표현할 방법이 없으므로 대체되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a4b6beb7a0a463fb9056fff096906a36b6d0941f" translate="yes" xml:space="preserve">
          <source>Replaces all occurrences of a certain subrange and puts the result into a given array.</source>
          <target state="translated">특정 하위 범위의 모든 발생을 대체하고 결과를 지정된 배열에 넣습니다.</target>
        </trans-unit>
        <trans-unit id="bf828817df8146a134e38863d3145a56771d5f8a" translate="yes" xml:space="preserve">
          <source>Replaces all occurrences of a certain subrange and puts the result into an output range.</source>
          <target state="translated">특정 하위 범위의 모든 발생을 대체하고 결과를 출력 범위에 넣습니다.</target>
        </trans-unit>
        <trans-unit id="55ccf52982737ac1fda98a235d9e0724b221555b" translate="yes" xml:space="preserve">
          <source>Replaces elements from &lt;code&gt;array&lt;/code&gt; with indices ranging from &lt;code&gt;from&lt;/code&gt; (inclusive) to &lt;code&gt;to&lt;/code&gt; (exclusive) with the range &lt;code&gt;stuff&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;array&lt;/code&gt; 요소를 range &lt;code&gt;stuff&lt;/code&gt; 범위 &lt;code&gt;from&lt;/code&gt; (포함) &lt;code&gt;to&lt;/code&gt; (제외) 까지의 인덱스로 바꿉니다 .</target>
        </trans-unit>
        <trans-unit id="bfd1260e1bd773dfd9e919a9dfabe839a5a20bb2" translate="yes" xml:space="preserve">
          <source>Replaces elements from &lt;code&gt;array&lt;/code&gt; with indices ranging from &lt;code&gt;from&lt;/code&gt; (inclusive) to &lt;code&gt;to&lt;/code&gt; (exclusive) with the range &lt;code&gt;stuff&lt;/code&gt;. Expands or shrinks the array as needed.</source>
          <target state="translated">&lt;code&gt;array&lt;/code&gt; 요소를 range &lt;code&gt;stuff&lt;/code&gt; 범위 &lt;code&gt;from&lt;/code&gt; (포함) &lt;code&gt;to&lt;/code&gt; (제외) 까지의 인덱스로 바꿉니다 . 필요에 따라 배열을 확장하거나 축소합니다.</target>
        </trans-unit>
        <trans-unit id="1947ec58f5d919ec2b4a4834cc9c7502d8a2dc55" translate="yes" xml:space="preserve">
          <source>Replaces spaces in &lt;code&gt;s&lt;/code&gt; with the optimal number of tabs. All spaces and tabs at the end of a line are removed.</source>
          <target state="translated">공간에 대체 &lt;code&gt;s&lt;/code&gt; 탭 최적 번호. 줄 끝에있는 모든 공백과 탭이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="664cf6cd043b2df4d63c3eb11246f8f03ec929f4" translate="yes" xml:space="preserve">
          <source>Replaces spaces in range &lt;code&gt;r&lt;/code&gt; with the optimal number of tabs. All spaces and tabs at the end of a line are removed.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; 범위의 공백을 최적의 탭 수로 바꿉니다 . 줄 끝에있는 모든 공백과 탭이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="184818cdd37cead38c95b37b3c881bb052eed284" translate="yes" xml:space="preserve">
          <source>Replaces the characters in &lt;code&gt;str&lt;/code&gt; which are in &lt;code&gt;from&lt;/code&gt; with the the corresponding characters in &lt;code&gt;to&lt;/code&gt; and returns the resulting string.</source>
          <target state="translated">의 문자 대체 &lt;code&gt;str&lt;/code&gt; 에 &lt;code&gt;from&lt;/code&gt; 하여 해당 문자와 &lt;code&gt;to&lt;/code&gt; 돌아갑니다 결과 문자열을.</target>
        </trans-unit>
        <trans-unit id="bbb6ea7a2e39be3f3f162a9089a3b3b6a5f6a339" translate="yes" xml:space="preserve">
          <source>Replaces the characters in &lt;code&gt;str&lt;/code&gt; which are keys in &lt;code&gt;transTable&lt;/code&gt; with their corresponding values in &lt;code&gt;transTable&lt;/code&gt;. &lt;code&gt;transTable&lt;/code&gt; is an AA where its keys are &lt;code&gt;dchar&lt;/code&gt; and its values are either &lt;code&gt;dchar&lt;/code&gt; or some type of string. Also, if &lt;code&gt;toRemove&lt;/code&gt; is given, the characters in it are removed from &lt;code&gt;str&lt;/code&gt; prior to translation. &lt;code&gt;str&lt;/code&gt; itself is unaltered. A copy with the changes is returned.</source>
          <target state="translated">의 문자 대체 &lt;code&gt;str&lt;/code&gt; 의 열쇠 &lt;code&gt;transTable&lt;/code&gt; 에서 그에 상응하는 값 &lt;code&gt;transTable&lt;/code&gt; 을 . &lt;code&gt;transTable&lt;/code&gt; 은 키가 &lt;code&gt;dchar&lt;/code&gt; 이고 값이 &lt;code&gt;dchar&lt;/code&gt; 또는 일부 유형의 문자열 인 AA 입니다. 또한 &lt;code&gt;toRemove&lt;/code&gt; 가 제공되면 번역 전에 &lt;code&gt;str&lt;/code&gt; 에서 문자가 제거됩니다 . &lt;code&gt;str&lt;/code&gt; 자체는 변경되지 않았습니다. 변경 사항이있는 사본이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="b67c7d6419c0b6d65cce4096b33223cdb74d94dc" translate="yes" xml:space="preserve">
          <source>Replaces the current process by executing a command, &lt;code&gt;pathname&lt;/code&gt;, with the arguments in &lt;code&gt;argv&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pathname&lt;/code&gt; 명령 을 &lt;code&gt;argv&lt;/code&gt; 의 인수 로 실행하여 현재 프로세스를 대체합니다 .</target>
        </trans-unit>
        <trans-unit id="de6da5c60de5b4049095b17ff61908901be4b1c4" translate="yes" xml:space="preserve">
          <source>Replaces the first occurrence of &lt;code&gt;from&lt;/code&gt; with &lt;code&gt;to&lt;/code&gt; in &lt;code&gt;subject&lt;/code&gt;.</source>
          <target state="translated">처음 나타나는 대체 &lt;code&gt;from&lt;/code&gt; 와를 &lt;code&gt;to&lt;/code&gt; 의 &lt;code&gt;subject&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9d3a3bb457bba010b3b52570b9bb0a550ae3615e" translate="yes" xml:space="preserve">
          <source>Replaces the largest element in the store with &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">상점에서 가장 큰 요소를 &lt;code&gt;value&lt;/code&gt; 로 바꿉니다 .</target>
        </trans-unit>
        <trans-unit id="c36a9864cb0a1cd773ab41f070bdc81b08637be8" translate="yes" xml:space="preserve">
          <source>Replaces the last occurrence of &lt;code&gt;from&lt;/code&gt; with &lt;code&gt;to&lt;/code&gt; in &lt;code&gt;subject&lt;/code&gt;.</source>
          <target state="translated">마지막에 출현 대체 &lt;code&gt;from&lt;/code&gt; 와를 &lt;code&gt;to&lt;/code&gt; 의 &lt;code&gt;subject&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="65c45a14662409a9d291ba06667b4b3194f648f2" translate="yes" xml:space="preserve">
          <source>Reports a deprecation message.</source>
          <target state="translated">지원 중단 메시지를보고합니다.</target>
        </trans-unit>
        <trans-unit id="05358ad0b424161c32a66a44e0020bb807267356" translate="yes" xml:space="preserve">
          <source>Reports a warning message.</source>
          <target state="translated">경고 메시지를보고합니다.</target>
        </trans-unit>
        <trans-unit id="7a48be9d9eb142198b9a33e6a7aaf8aa49ec8c1b" translate="yes" xml:space="preserve">
          <source>Reports additional details about a deprecation message.</source>
          <target state="translated">지원 중단 메시지에 대한 추가 세부 사항을보고합니다.</target>
        </trans-unit>
        <trans-unit id="2a4d2035187510232a3473688b6375c5eb79f697" translate="yes" xml:space="preserve">
          <source>Reports additional details about a warning message.</source>
          <target state="translated">경고 메시지에 대한 추가 세부 사항을보고합니다.</target>
        </trans-unit>
        <trans-unit id="a03879877c2a56ddc9a9590c7c4c5a5c5aaf9cb8" translate="yes" xml:space="preserve">
          <source>Reports additional details about an error message.</source>
          <target state="translated">오류 메시지에 대한 추가 세부 사항을보고합니다.</target>
        </trans-unit>
        <trans-unit id="ec241f1e6c9915f6c6293da092090ed4d21a4bbb" translate="yes" xml:space="preserve">
          <source>Reports an error message.</source>
          <target state="translated">오류 메시지를보고합니다.</target>
        </trans-unit>
        <trans-unit id="478f99752de9b4f7cb081cc52d1232afb58024ab" translate="yes" xml:space="preserve">
          <source>Reports per instance statistics to &lt;code&gt;output&lt;/code&gt; (e.g. &lt;code&gt;stdout&lt;/code&gt;). The format is simple: one kind and value per line, separated by a colon, e.g. &lt;code&gt;bytesAllocated:7395404&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;output&lt;/code&gt; 할 인스턴스 별 통계를보고 합니다 (예 : &lt;code&gt;stdout&lt;/code&gt; ). 형식은 간단합니다. 한 줄에 하나의 종류와 값이 있으며 콜론으로 구분됩니다 (예 : &lt;code&gt;bytesAllocated:7395404&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="360bc539904b3901915f57b0aead8cb40373f0de" translate="yes" xml:space="preserve">
          <source>Representation</source>
          <target state="translated">Representation</target>
        </trans-unit>
        <trans-unit id="d21307f7991db0e3fc8f33a263ac9d7f2b5db9b8" translate="yes" xml:space="preserve">
          <source>Representation of a CLI &lt;code&gt;Option&lt;/code&gt;</source>
          <target state="translated">CLI &lt;code&gt;Option&lt;/code&gt; 표현</target>
        </trans-unit>
        <trans-unit id="9f92787a18e484b1f06aa503c11813f8381ada33" translate="yes" xml:space="preserve">
          <source>Representation of a CLI feature</source>
          <target state="translated">CLI 기능 표현</target>
        </trans-unit>
        <trans-unit id="a41ccd008f21cc3982d56b449404fb2d0eedc651" translate="yes" xml:space="preserve">
          <source>Represents a date in the &lt;a href=&quot;http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar&quot;&gt;Proleptic Gregorian Calendar&lt;/a&gt; ranging from 32,768 B.C. to 32,767 A.D. Positive years are A.D. Non-positive years are B.C.</source>
          <target state="translated">기원전 32,768 년에서 32,767 년까지 의 &lt;a href=&quot;http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar&quot;&gt;Proleptic Gregorian Calendar&lt;/a&gt; 의 날짜를 나타냅니다. AD 긍정적 인 년은 AD Non-positive 년은 BC</target>
        </trans-unit>
        <trans-unit id="684c66525aae6b405588ae167cf7f2c52d92e206" translate="yes" xml:space="preserve">
          <source>Represents a date in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar&quot;&gt;Proleptic Gregorian Calendar&lt;/a&gt; ranging from 32,768 B.C. to 32,767 A.D. Positive years are A.D. Non-positive years are B.C.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="871a404467b23544526d5d0d73e9c4edf6a9c058" translate="yes" xml:space="preserve">
          <source>Represents a duration of time in system clock ticks, using the highest precision that the system provides.</source>
          <target state="translated">시스템이 제공하는 최고 정밀도를 사용하여 시스템 클록 틱의 지속 시간을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="c840abcc54eb77d8ea1c639dc35b7df6160fc73e" translate="yes" xml:space="preserve">
          <source>Represents a duration of time in system clock ticks.</source>
          <target state="translated">시스템 클럭 틱의 지속 시간을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="69976046e97e811393a3d9cb1d39633bdaf4173e" translate="yes" xml:space="preserve">
          <source>Represents a duration of time of weeks or less (kept internally as hnsecs). (e.g. 22 days or 700 seconds).</source>
          <target state="translated">몇 주 이하 (내부적으로 hnsecs로 유지됨)의 지속 시간을 나타냅니다. (예 : 22 일 또는 700 초).</target>
        </trans-unit>
        <trans-unit id="263f8bb3c0db9af3066ba4528d3da4d266b09197" translate="yes" xml:space="preserve">
          <source>Represents a list of predefined symbols the compiler knows about.</source>
          <target state="translated">컴파일러가 알고있는 사전 정의 된 기호 목록을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="af9de86424e71110be890008e402a1244b1288d6" translate="yes" xml:space="preserve">
          <source>Represents a monotonic timestamp in system clock ticks, using the highest precision that the system provides.</source>
          <target state="translated">시스템이 제공하는 최고 정밀도를 사용하여 시스템 클럭 틱의 단조로운 타임 스탬프를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2aaffeda235d62749f5afc55a2b2b3ade5271bd5" translate="yes" xml:space="preserve">
          <source>Represents a reference to &lt;code&gt;T&lt;/code&gt;. Resolves to &lt;code&gt;T*&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a value type.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 에 대한 참조를 나타 냅니다. &lt;code&gt;T&lt;/code&gt; 가 값 유형 인 경우 &lt;code&gt;T*&lt;/code&gt; 해결됩니다 .</target>
        </trans-unit>
        <trans-unit id="947b758a0794342a8ef5583824799b05a8c3491f" translate="yes" xml:space="preserve">
          <source>Represents a sorted range. In addition to the regular range primitives, supports additional operations that take advantage of the ordering, such as merge and binary search. To obtain a &lt;code&gt; SortedRange&lt;/code&gt; from an unsorted range &lt;code&gt;r&lt;/code&gt;, use &lt;a href=&quot;std_algorithm_sorting#sort&quot;&gt;&lt;code&gt;std.algorithm.sorting.sort&lt;/code&gt;&lt;/a&gt; which sorts &lt;code&gt;r&lt;/code&gt; in place and returns the corresponding &lt;code&gt;SortedRange&lt;/code&gt;. To construct a &lt;code&gt;SortedRange&lt;/code&gt; from a range &lt;code&gt;r&lt;/code&gt; that is known to be already sorted, use &lt;a href=&quot;#assumeSorted&quot;&gt;&lt;code&gt;assumeSorted&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">정렬 된 범위를 나타냅니다. 일반 범위 프리미티브 외에도 병합 및 이진 검색과 같은 순서 지정을 활용하는 추가 작업을 지원합니다. 얻으려면 &lt;code&gt; SortedRange&lt;/code&gt; 를 정렬되지 않은 범위에서 &lt;code&gt;r&lt;/code&gt; , 사용 &lt;a href=&quot;std_algorithm_sorting#sort&quot;&gt; &lt;code&gt;std.algorithm.sorting.sort&lt;/code&gt; &lt;/a&gt; 종류가 &lt;code&gt;r&lt;/code&gt; 에 장소와 해당 반환 &lt;code&gt;SortedRange&lt;/code&gt; 을 . 이미 정렬 된 것으로 알려진 범위 &lt;code&gt;r&lt;/code&gt; 에서 &lt;code&gt;SortedRange&lt;/code&gt; 를 생성하려면 assumeSorted 를 사용 &lt;a href=&quot;#assumeSorted&quot;&gt; &lt;code&gt;assumeSorted&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="675c8aab11817ec1f023800d80f3d56a8cd24056" translate="yes" xml:space="preserve">
          <source>Represents a sorted range. In addition to the regular range primitives, supports additional operations that take advantage of the ordering, such as merge and binary search. To obtain a &lt;code&gt;SortedRange&lt;/code&gt; from an unsorted range &lt;code&gt;r&lt;/code&gt;, use &lt;a href=&quot;std_algorithm_sorting#sort&quot;&gt;&lt;code&gt;std.algorithm.sorting.sort&lt;/code&gt;&lt;/a&gt; which sorts &lt;code&gt;r&lt;/code&gt; in place and returns the corresponding &lt;code&gt;SortedRange&lt;/code&gt;. To construct a &lt;code&gt;SortedRange&lt;/code&gt; from a range &lt;code&gt;r&lt;/code&gt; that is known to be already sorted, use &lt;a href=&quot;#assumeSorted&quot;&gt;&lt;code&gt;assumeSorted&lt;/code&gt;&lt;/a&gt; described below.</source>
          <target state="translated">정렬 된 범위를 나타냅니다. 일반 범위 프리미티브 외에도 병합 및 이진 검색과 같이 순서를 활용하는 추가 작업을 지원합니다. 얻으려면 &lt;code&gt;SortedRange&lt;/code&gt; 를 정렬되지 않은 범위에서 &lt;code&gt;r&lt;/code&gt; , 사용 &lt;a href=&quot;std_algorithm_sorting#sort&quot;&gt; &lt;code&gt;std.algorithm.sorting.sort&lt;/code&gt; &lt;/a&gt; 종류가 &lt;code&gt;r&lt;/code&gt; 에 장소와 해당 반환 &lt;code&gt;SortedRange&lt;/code&gt; 을 . 컨스하기 &lt;code&gt;SortedRange&lt;/code&gt; 를 레인지에서 &lt;code&gt;r&lt;/code&gt; 이미 정렬 공지되어 사용 &lt;a href=&quot;#assumeSorted&quot;&gt; &lt;code&gt;assumeSorted&lt;/code&gt; 는&lt;/a&gt; 후술.</target>
        </trans-unit>
        <trans-unit id="4683c526686e490d8e710633c776f72b86b86126" translate="yes" xml:space="preserve">
          <source>Represents a time of day with hours, minutes, and seconds. It uses 24 hour time.</source>
          <target state="translated">시간, 분 및 초로 시간을 나타냅니다. 24 시간을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="810410978c698991ef4eb4c9ef7a97a314fab610" translate="yes" xml:space="preserve">
          <source>Represents a time zone from a TZ Database time zone file. Files from the TZ Database are how Posix systems hold their time zone information. Unfortunately, Windows does not use the TZ Database. To use the TZ Database, use &lt;code&gt;PosixTimeZone&lt;/code&gt; (which reads its information from the TZ Database files on disk) on Windows by providing the TZ Database files and telling &lt;code&gt;PosixTimeZone.getTimeZone&lt;/code&gt; where the directory holding them is.</source>
          <target state="translated">TZ 데이터베이스 시간대 파일에서 시간대를 나타냅니다. TZ 데이터베이스의 파일은 Posix 시스템이 시간대 정보를 보유하는 방법입니다. 불행히도 Windows는 TZ 데이터베이스를 사용하지 않습니다. TZ 데이터베이스를 사용하려면 &lt;code&gt;PosixTimeZone&lt;/code&gt; (디스크의 TZ 데이터베이스 파일에서 정보를 읽음)을 사용 하여 TZ 데이터베이스 파일을 제공하고 &lt;code&gt;PosixTimeZone.getTimeZone&lt;/code&gt; 에 파일 이있는 디렉토리를 알려 주십시오 .</target>
        </trans-unit>
        <trans-unit id="b54798fff510046bc6fca58ccdbefaeeca610e06" translate="yes" xml:space="preserve">
          <source>Represents a time zone from the Windows registry. Unfortunately, Windows does not use the TZ Database. To use the TZ Database, use &lt;a href=&quot;#PosixTimeZone&quot;&gt;&lt;code&gt;PosixTimeZone&lt;/code&gt;&lt;/a&gt; (which reads its information from the TZ Database files on disk) on Windows by providing the TZ Database files and telling &lt;code&gt;PosixTimeZone.getTimeZone&lt;/code&gt; where the directory holding them is.</source>
          <target state="translated">Windows 레지스트리의 시간대를 나타냅니다. 불행히도 Windows는 TZ 데이터베이스를 사용하지 않습니다. TZ 데이터베이스를 사용하려면 &lt;a href=&quot;#PosixTimeZone&quot;&gt; &lt;code&gt;PosixTimeZone&lt;/code&gt; &lt;/a&gt; (디스크의 TZ 데이터베이스 파일에서 정보를 읽음)을 사용 하여 TZ 데이터베이스 파일을 제공하고 &lt;code&gt;PosixTimeZone.getTimeZone&lt;/code&gt; 에 파일 이있는 디렉토리를 알려 주십시오 .</target>
        </trans-unit>
        <trans-unit id="e60b7030b2ce1a65110e9777db7c8df88b7b17a4" translate="yes" xml:space="preserve">
          <source>Represents a time zone with an offset (in minutes, west is negative) from UTC but no DST.</source>
          <target state="translated">UTC와의 오프셋 (분, 서쪽은 음수)을 갖지만 DST는없는 시간대를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="92f2f3f34a9bb6cd26c387edc0c38b2e94b17c7e" translate="yes" xml:space="preserve">
          <source>Represents a time zone. It is used with &lt;a href=&quot;std_datetime_systime#SysTime&quot;&gt;&lt;code&gt;std.datetime.systime.SysTime&lt;/code&gt;&lt;/a&gt; to indicate the time zone of a &lt;a href=&quot;std_datetime_systime#SysTime&quot;&gt;&lt;code&gt;std.datetime.systime.SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">시간대를 나타냅니다. 사용됩니다 &lt;a href=&quot;std_datetime_systime#SysTime&quot;&gt; &lt;code&gt;std.datetime.systime.SysTime&lt;/code&gt; &lt;/a&gt; a의 시간대를 표시하는 &lt;a href=&quot;std_datetime_systime#SysTime&quot;&gt; &lt;code&gt;std.datetime.systime.SysTime&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="abac93691afbfe26bfc279c427091400b5a61da6" translate="yes" xml:space="preserve">
          <source>Represents a timestamp of the system's monotonic clock.</source>
          <target state="translated">시스템의 단조로운 시계의 타임 스탬프를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="7c5e078407eec9db2ab1960187d144ea3f3ab12f" translate="yes" xml:space="preserve">
          <source>Represents an interval of time which has negative infinity as its starting point.</source>
          <target state="translated">음의 무한대를 시작점으로하는 시간 간격을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="1aaad8c85cc38e4f5132fe337e5717985acbb7ee" translate="yes" xml:space="preserve">
          <source>Represents an interval of time which has positive infinity as its end point.</source>
          <target state="translated">끝점으로 양의 무한대를 갖는 시간 간격을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="f47e3054af7c4a67ba742112accf07afc3d56019" translate="yes" xml:space="preserve">
          <source>Represents an interval of time.</source>
          <target state="translated">시간 간격을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2d721bcbf347e19a4d297b8d77ad757d2ffbda05" translate="yes" xml:space="preserve">
          <source>Represents fractional seconds (portions of time smaller than a second).</source>
          <target state="translated">분수 초 (1 초보다 작은 시간 부분)를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="a99c9af937a58a8fe433fd7c418c634ff3532cc9" translate="yes" xml:space="preserve">
          <source>Represents the 12 months of the Gregorian year (January is 1).</source>
          <target state="translated">그레고리력 연도의 12 개월을 나타냅니다 (1 월 1 일).</target>
        </trans-unit>
        <trans-unit id="cafb2741e0101355880a4369d423d57cbeaca7a1" translate="yes" xml:space="preserve">
          <source>Represents the 7 days of the Gregorian week (Sunday is 0).</source>
          <target state="translated">그레고리오주의 7 일을 나타냅니다 (일요일은 0 임).</target>
        </trans-unit>
        <trans-unit id="3cfcc553f5907a03417254ec92d33a339d24d302" translate="yes" xml:space="preserve">
          <source>Represents the ID of a thread, as returned by &lt;code&gt;Thread.&lt;/code&gt;&lt;a href=&quot;#id&quot;&gt;&lt;code&gt;id&lt;/code&gt;&lt;/a&gt;. The exact type varies from platform to platform.</source>
          <target state="translated">&lt;code&gt;Thread.&lt;/code&gt; 리턴 한 스레드의 ID를 나타냅니다 . &lt;a href=&quot;#id&quot;&gt; &lt;code&gt;id&lt;/code&gt; &lt;/a&gt; . 정확한 유형은 플랫폼마다 다릅니다.</target>
        </trans-unit>
        <trans-unit id="79592dd80802f56e45673837462680efc10a659d" translate="yes" xml:space="preserve">
          <source>Represents the program counter of the start of the next instruction. So,</source>
          <target state="translated">다음 명령어 시작의 프로그램 카운터를 나타냅니다. 그래서,</target>
        </trans-unit>
        <trans-unit id="9612141a5f05008d3fc5bfabff3f29e0c723430f" translate="yes" xml:space="preserve">
          <source>Represents the status of an email address</source>
          <target state="translated">이메일 주소의 상태를 나타냅니다</target>
        </trans-unit>
        <trans-unit id="66c903fc3505843fc3f5a55e911bfe6cb8fd51ea" translate="yes" xml:space="preserve">
          <source>Request additional semantic analysis for TypeInfo generation.</source>
          <target state="translated">TypeInfo 생성을위한 추가 의미 분석을 요청하십시오.</target>
        </trans-unit>
        <trans-unit id="5129f8c370fa885b85ac26897f294272ff8ac1e9" translate="yes" xml:space="preserve">
          <source>Request internal information from the curl session with this function. The third argument MUST be a pointer to a long, a pointer to a char * or a pointer to a double (as the documentation describes elsewhere). The data pointed to will be filled in accordingly and can be relied upon only if the function returns CURLE_OK. This function is intended to get used &lt;em&gt;AFTER&lt;/em&gt; a performed transfer, all results from this function are undefined until the transfer is completed.</source>
          <target state="translated">이 기능으로 curl 세션에서 내부 정보를 요청하십시오. 세 번째 인수는 long에 대한 포인터, char에 대한 포인터 또는 이중에 대한 포인터 여야합니다 (문서가 다른 곳에 설명되어 있음). 지시 된 데이터는 그에 따라 채워지고 함수가 CURLE_OK를 반환하는 경우에만 신뢰할 수 있습니다. 이 기능은 전송을 수행 한 &lt;em&gt;후에&lt;/em&gt; 사용하기위한 것이며 ,이 기능의 모든 결과는 전송이 완료 될 때까지 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6d4fbad80cc3367d293c2d0f03d7f36df4053772" translate="yes" xml:space="preserve">
          <source>Requested target field alignment size of the given type.</source>
          <target state="translated">지정된 유형의 요청 된 대상 필드 정렬 크기입니다.</target>
        </trans-unit>
        <trans-unit id="4e550276bb6c1cdbcf2e2907624ca453de5cd98a" translate="yes" xml:space="preserve">
          <source>Requested target memory alignment size of the given type.</source>
          <target state="translated">지정된 유형의 요청 된 대상 메모리 정렬 크기입니다.</target>
        </trans-unit>
        <trans-unit id="b6b39777910b6aa0f8bea5d47f04ada6b3d29ea9" translate="yes" xml:space="preserve">
          <source>Requesting a system service that is not supported.</source>
          <target state="translated">지원되지 않는 시스템 서비스 요청</target>
        </trans-unit>
        <trans-unit id="cedd2e25c6537b54aec40e6247f1349ccc85d882" translate="yes" xml:space="preserve">
          <source>Requests an aligned block of managed memory from the garbage collector, which is initialized with all bits set to zero. This memory may be deleted at will with a call to free, or it may be discarded and cleaned up automatically during a collection run. If allocation fails, this function will call onOutOfMemory which is expected to throw an OutOfMemoryError.</source>
          <target state="translated">가비지 수집기에서 정렬 된 관리 메모리 블록을 요청합니다. 가비지 수집기는 모든 비트가 0으로 설정되어 초기화됩니다. 이 메모리는 무료 통화로 마음대로 삭제되거나 수집 실행 중에 자동으로 삭제 및 정리 될 수 있습니다. 할당이 실패하면이 함수는 onOfOfMemory를 호출하여 OutOfMemoryError를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="3372c028eacd246cc56044aa7a3733e04a6d6f6f" translate="yes" xml:space="preserve">
          <source>Requests an aligned block of managed memory from the garbage collector. This memory may be deleted at will with a call to free, or it may be discarded and cleaned up automatically during a collection run. If allocation fails, this function will call onOutOfMemory which is expected to throw an OutOfMemoryError.</source>
          <target state="translated">가비지 수집기에서 정렬 된 관리 메모리 블록을 요청합니다. 이 메모리는 무료 통화로 마음대로 삭제되거나 수집 실행 중에 자동으로 삭제 및 정리 될 수 있습니다. 할당이 실패하면이 함수는 onOfOfMemory를 호출하여 OutOfMemoryError를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="0f27acb273e8e867abce7f89b11502031e9b54ef" translate="yes" xml:space="preserve">
          <source>Requests that at least sz bytes of memory be obtained from the operating system and marked as free.</source>
          <target state="translated">운영 체제에서 최소 sz 바이트의 메모리를 확보하여 사용 가능으로 표시하도록 요청합니다.</target>
        </trans-unit>
        <trans-unit id="139378ece9cc043d995703caf8c0d054566cc3a2" translate="yes" xml:space="preserve">
          <source>Requests that the managed memory block referenced by p be extended in place by at least mx bytes, with a desired extension of sz bytes. If an extension of the required size is not possible or if p references memory not originally allocated by this garbage collector, no action will be taken.</source>
          <target state="translated">p가 참조하는 관리 메모리 블록이 원하는 sz 바이트의 확장자로 mx 바이트 이상 확장되도록 요청합니다. 필요한 크기의 확장이 불가능하거나 p가이 가비지 수집기에 의해 원래 할당되지 않은 메모리를 참조하는 경우 아무런 작업도 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="52c504ab52de6623939f9c90c2748efd2ee46879" translate="yes" xml:space="preserve">
          <source>Require that all ranges are equal</source>
          <target state="translated">모든 범위가 동일해야 함</target>
        </trans-unit>
        <trans-unit id="eed6bfb41051ed5b74447340f3c2e29d11e99a7c" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="translated">Required</target>
        </trans-unit>
        <trans-unit id="4d3f97223e0e772af6b4e15662af447e7861d0d7" translate="yes" xml:space="preserve">
          <source>Requiring errno to be checked.</source>
          <target state="translated">errno를 점검해야합니다.</target>
        </trans-unit>
        <trans-unit id="b7605a40c901f4f03a81488eb7f88474e985a327" translate="yes" xml:space="preserve">
          <source>Requiring that a function be called to check if the previous function failed.</source>
          <target state="translated">이전 함수가 실패했는지 확인하기 위해 함수를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="2c7bb842b37a84d17d9f3688eaa255e6c0f8625b" translate="yes" xml:space="preserve">
          <source>Reserve at least newCapacity elements for appending. Note that more elements may be reserved than requested. If &lt;code&gt;newCapacity &amp;lt;= capacity&lt;/code&gt;, then nothing is done.</source>
          <target state="translated">추가를 위해 최소한 newCapacity 요소를 예약하십시오. 요청한 것보다 많은 요소가 예약 될 수 있습니다. 경우 &lt;code&gt;newCapacity &amp;lt;= capacity&lt;/code&gt; , 다음, 아무것도 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7bc2f0e2bcb2ad253290193bf73eb0c5a63f16c2" translate="yes" xml:space="preserve">
          <source>Reserved for future use</source>
          <target state="translated">나중에 사용하기 위해 예약 됨</target>
        </trans-unit>
        <trans-unit id="f6fc57a2e78be889f385b7b6aa59f1f303e40117" translate="yes" xml:space="preserve">
          <source>Reserves capacity for a slice. The capacity is the size that the slice can grow to before the underlying array must be reallocated or extended.</source>
          <target state="translated">슬라이스 용량을 예약합니다. 용량은 기본 배열을 재 할당하거나 확장하기 전에 슬라이스가 커질 수있는 크기입니다.</target>
        </trans-unit>
        <trans-unit id="d95494e07a6a9549bcea26b9d9f2fbf0deb1f69a" translate="yes" xml:space="preserve">
          <source>Reset A Prepared Statement Object</source>
          <target state="translated">준비된 명령문 오브젝트 재설정</target>
        </trans-unit>
        <trans-unit id="42eeaddac57cdadd9740ee6589dcc8b8aa539cc7" translate="yes" xml:space="preserve">
          <source>Reset All Bindings On A Prepared Statement</source>
          <target state="translated">준비된 명령문에서 모든 바인딩 재설정</target>
        </trans-unit>
        <trans-unit id="73a14bd471f06173f0ae50ee3cde4ad48b429415" translate="yes" xml:space="preserve">
          <source>Reset Automatic Extension Loading</source>
          <target state="translated">자동 확장 로딩 재설정</target>
        </trans-unit>
        <trans-unit id="8523ebb069ab7e3bc472ae3359c34dc47b6ce750" translate="yes" xml:space="preserve">
          <source>Reset stringTab[] between object files being emitted, because the symbols are local.</source>
          <target state="translated">심볼이 로컬이기 때문에 방출되는 오브젝트 파일 사이에서 stringTab []을 재설정하십시오.</target>
        </trans-unit>
        <trans-unit id="f2111437cc95f234e7f61c74a64fa99a6e79c53e" translate="yes" xml:space="preserve">
          <source>Reset the &lt;code&gt;SocketSet&lt;/code&gt; so that there are 0 &lt;code&gt;Socket&lt;/code&gt;s in the collection.</source>
          <target state="translated">컬렉션에 0 &lt;code&gt;Socket&lt;/code&gt; 이 있도록 &lt;code&gt;SocketSet&lt;/code&gt; 을 재설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="6acfbb95f80f439e77f66baaa4feda1989c06608" translate="yes" xml:space="preserve">
          <source>Reset the event manually</source>
          <target state="translated">이벤트를 수동으로 재설정</target>
        </trans-unit>
        <trans-unit id="d0e6ffc296492170be6eaac941a0209ac5feb33f" translate="yes" xml:space="preserve">
          <source>Reset this status line</source>
          <target state="translated">이 상태 표시 줄을 재설정</target>
        </trans-unit>
        <trans-unit id="c5f2b07df79684f7e6099777d42617cad068c5ee" translate="yes" xml:space="preserve">
          <source>Resets the StopWatch.</source>
          <target state="translated">스톱워치를 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="1dd9486f880f808a919c8718480623a1605b1ba6" translate="yes" xml:space="preserve">
          <source>Resets the digest and returns the finished hash.</source>
          <target state="translated">다이제스트를 재설정하고 완성 된 해시를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="471712629a58202496aecedf4cc8cd07ce039c66" translate="yes" xml:space="preserve">
          <source>Resets the internal state of the digest.</source>
          <target state="translated">다이제스트의 내부 상태를 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="29105a822505923cb74156d62ee974c45964160f" translate="yes" xml:space="preserve">
          <source>Resets the stop watch.</source>
          <target state="translated">스톱워치를 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="3c746f0be60df50f256627441fa28d9489afec36" translate="yes" xml:space="preserve">
          <source>Resets this fiber so that it may be re-used, optionally with a new function/delegate. This routine should only be called for fibers that have terminated, as doing otherwise could result in scope-dependent functionality that is not executed. Stack-based classes, for example, may not be cleaned up properly if a fiber is reset before it has terminated.</source>
          <target state="translated">선택적으로 새로운 기능 / 위임에서 다시 사용할 수 있도록이 광섬유를 재설정합니다. 이 루틴은 종료 된 파이버에 대해서만 호출해야합니다. 그렇지 않으면 범위에 따라 기능이 실행되지 않을 수 있습니다. 예를 들어, 스택 기반 클래스는 파이버가 종료되기 전에 재설정되면 제대로 정리되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="19d9849184e53be1b62b075e33412496cbeca20e" translate="yes" xml:space="preserve">
          <source>Resilience</source>
          <target state="translated">Resilience</target>
        </trans-unit>
        <trans-unit id="7c6950b5d0d5619c182f3a5ca7fbf452af59df0e" translate="yes" xml:space="preserve">
          <source>Resize an allocation</source>
          <target state="translated">할당 크기 조정</target>
        </trans-unit>
        <trans-unit id="b7bd018ef0421ace4cb12ea37baabb0ca4638f29" translate="yes" xml:space="preserve">
          <source>Resize arrays for non-zero initializers. p pointer to array lvalue to be updated newlength new .length property of array sizeelem size of each element of array initsize size of initializer ... initializer</source>
          <target state="translated">0이 아닌 이니셜 라이저의 배열 크기를 조정하십시오. p 배열 lvalue에 대한 포인터 업데이트 newlength 배열의 각 요소의 sizeelem 크기의 newlength new .length 속성 initsize size of initializer ... initializer</target>
        </trans-unit>
        <trans-unit id="065447bf2ca7decda27ef1819524c1a96f73dfc5" translate="yes" xml:space="preserve">
          <source>Resize dynamic array</source>
          <target state="translated">동적 배열 크기 조정</target>
        </trans-unit>
        <trans-unit id="1d5f16a39b451a1be358daae7e9ae7fdd49590f3" translate="yes" xml:space="preserve">
          <source>Resize dynamic arrays with 0 initializers.</source>
          <target state="translated">0 개의 이니셜 라이저로 동적 배열의 크기를 조정하십시오.</target>
        </trans-unit>
        <trans-unit id="5dfe5740d7a2956a571c9a469730fb7c99e7b009" translate="yes" xml:space="preserve">
          <source>Resizing a dynamic array is a relatively expensive operation. So, while the following method of filling an array:</source>
          <target state="translated">동적 배열의 크기를 조정하는 것은 상대적으로 비용이 많이 드는 작업입니다. 따라서 배열을 채우는 다음 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d6c383a5217dccf2c0952e72df95ef983342db52" translate="yes" xml:space="preserve">
          <source>Resolve &lt;code&gt;exp&lt;/code&gt; as a compile-time known string.</source>
          <target state="translated">컴파일 타임 알려진 문자열로 &lt;code&gt;exp&lt;/code&gt; 를 해결하십시오 .</target>
        </trans-unit>
        <trans-unit id="add8852f4a8b9d5cd73a4a3a41a11636bdfefb85" translate="yes" xml:space="preserve">
          <source>Resolve IPv4 address number.</source>
          <target state="translated">IPv4 주소 번호를 해결하십시오.</target>
        </trans-unit>
        <trans-unit id="f2816c55ac2f1ed78c8b9a440f1edb45919393c5" translate="yes" xml:space="preserve">
          <source>Resolve __FILE__, __LINE__, __MODULE__, __FUNCTION__, __PRETTY_FUNCTION__, _FILE_FULL_PATH__ to loc.</source>
          <target state="translated">__FILE__, __LINE__, __MODULE__, __FUNCTION__, __PRETTY_FUNCTION__, _FILE_FULL_PATH__를 로케이 트로 해결하십시오.</target>
        </trans-unit>
        <trans-unit id="4294036a0eac97bbc8b92b3759fc5cad311871ac" translate="yes" xml:space="preserve">
          <source>Resolve forward reference of function body. Returns false if any errors exist in the body.</source>
          <target state="translated">함수 본문의 정방향 참조를 해결하십시오. 본문에 오류가 있으면 false를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a6291a59121e164606457ba4c505c08e2b5452ce" translate="yes" xml:space="preserve">
          <source>Resolve forward reference of function signature - parameter types, return type, and attributes. Returns false if any errors exist in the signature.</source>
          <target state="translated">함수 시그니처-매개 변수 유형, 리턴 유형 및 속성의 정방향 참조를 해결하십시오. 서명에 오류가 있으면 false를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="23e626fe9c2ba60d897513a49a174cca86f33c64" translate="yes" xml:space="preserve">
          <source>Resolve host name.</source>
          <target state="translated">호스트 이름을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="b746fa36d41b47804bf593057295da4f57fde063" translate="yes" xml:space="preserve">
          <source>Resolve recursive tuple expansion in eponymous template.</source>
          <target state="translated">시연 템플릿에서 재귀 튜플 확장을 해결합니다.</target>
        </trans-unit>
        <trans-unit id="d171f89f8496b90f48d29067d7a3b8eeb38cbfd1" translate="yes" xml:space="preserve">
          <source>Resolve type 'mt' to either type, symbol, or expression. If errors happened, resolved to Type.terror.</source>
          <target state="translated">'mt'유형을 유형, 기호 또는 표현식으로 분석하십시오. 오류가 발생하면 Type.terror로 해결하십시오.</target>
        </trans-unit>
        <trans-unit id="480c7d8304d6e54ca530b156b2111b7eaf5daca1" translate="yes" xml:space="preserve">
          <source>Resolves an internal pointer to the full block allocated. Implementations that don't support this primitive should always return &lt;code&gt;Ternary.unknown&lt;/code&gt;.</source>
          <target state="translated">할당 된 전체 블록에 대한 내부 포인터를 확인합니다. 이 프리미티브를 지원하지 않는 구현은 항상 &lt;code&gt;Ternary.unknown&lt;/code&gt; 을 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="0d7b2996046749e7b1014897e894a93ba894c735" translate="yes" xml:space="preserve">
          <source>Restore the original environment.</source>
          <target state="translated">원래 환경을 복원하십시오.</target>
        </trans-unit>
        <trans-unit id="0e3a9c5b62f2be2064d3d964a9ef961f37a03948" translate="yes" xml:space="preserve">
          <source>Result Values From A Query</source>
          <target state="translated">쿼리의 결과 값</target>
        </trans-unit>
        <trans-unit id="14e9a8a65f95d4830439c26d294fabe9a68ef5c5" translate="yes" xml:space="preserve">
          <source>Result of &lt;code&gt;prefix&lt;/code&gt;/&lt;code&gt;suffix&lt;/code&gt; depending on argument (&lt;code&gt;U&lt;/code&gt; is any unqualified type, &lt;code&gt;Affix&lt;/code&gt; is &lt;code&gt;Prefix&lt;/code&gt; or &lt;code&gt;Suffix&lt;/code&gt;)</source>
          <target state="translated">의 결과 &lt;code&gt;prefix&lt;/code&gt; / &lt;code&gt;suffix&lt;/code&gt; 인수에 따라 ( &lt;code&gt;U&lt;/code&gt; 는 어떤 자격이 유형의 &lt;code&gt;Affix&lt;/code&gt; 있다 &lt;code&gt;Prefix&lt;/code&gt; 나 &lt;code&gt;Suffix&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="00745696fca51d33fca520d4f9fe669ebe681576" translate="yes" xml:space="preserve">
          <source>Results are undefined if |x| &amp;gt;= 2&lt;sup&gt;64&lt;/sup&gt;.</source>
          <target state="translated">| x | &amp;gt; = 2 &lt;sup&gt;64&lt;/sup&gt; .</target>
        </trans-unit>
        <trans-unit id="20a4ed4ef565e8f5c963baf1f9915922d80dd17b" translate="yes" xml:space="preserve">
          <source>Resume all threads but the calling thread for &quot;stop the world&quot; garbage collection runs. This function must be called once for each preceding call to thread_suspendAll before the threads are actually resumed.</source>
          <target state="translated">&quot;세계 중지&quot;가비지 콜렉션 실행을위한 호출 스레드를 제외한 모든 스레드를 재개하십시오. 스레드가 실제로 재개되기 전에 thread_suspendAll에 대한 각 선행 호출에 대해이 함수를 한 번 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="bc0928161ff41e4d7d7a001aa80dafe900b42465" translate="yes" xml:space="preserve">
          <source>Resuming all other threads.</source>
          <target state="translated">다른 모든 스레드를 재개합니다.</target>
        </trans-unit>
        <trans-unit id="703e161b48645d69ebec4c98b02ec6d09910e568" translate="yes" xml:space="preserve">
          <source>Retained Features</source>
          <target state="translated">유지 된 기능</target>
        </trans-unit>
        <trans-unit id="9436610ae339b49f56637a6888f78a3bf39116b2" translate="yes" xml:space="preserve">
          <source>Rethrow &lt;code&gt;rethrow&lt;/code&gt;</source>
          <target state="translated">다시 던지다 다시 &lt;code&gt;rethrow&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="98d578ae439e1b092e4a4e615d7b7397ef0334e7" translate="yes" xml:space="preserve">
          <source>Rethrow any unhandled exception which may have caused the current thread to terminate.</source>
          <target state="translated">현재 스레드를 종료시킬 수있는 처리되지 않은 예외를 다시 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="9130a10856483bfab6387863e636df689c68f2a7" translate="yes" xml:space="preserve">
          <source>Rethrow any unhandled exception which may have caused this fiber to terminate.</source>
          <target state="translated">이 파이버를 종료시킬 수있는 처리되지 않은 예외를 다시 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="b192f2c54c63617f6ccccf4f1ccbcc987da3dfb4" translate="yes" xml:space="preserve">
          <source>Rethrow any unhandled exception which may have caused this thread to terminate.</source>
          <target state="translated">이 스레드를 종료시킬 수있는 처리되지 않은 예외를 다시 발생 시키십시오.</target>
        </trans-unit>
        <trans-unit id="f5afb7b65ef8795be2a474133d2b845f5c63d16f" translate="yes" xml:space="preserve">
          <source>Rethrows any exception thrown during the execution of the &lt;code&gt;Task&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Task&lt;/code&gt; 실행 중에 발생한 예외를 다시 발생시킵니다 .</target>
        </trans-unit>
        <trans-unit id="04939179a95512f6a50b3cd0097445c75c03c0c5" translate="yes" xml:space="preserve">
          <source>Retrieve and clear error status</source>
          <target state="translated">오류 상태 검색 및 지우기</target>
        </trans-unit>
        <trans-unit id="0b8be3a295e236f6ec47e43018fad28da700853d" translate="yes" xml:space="preserve">
          <source>Retrieve and return the next value that is of type T.</source>
          <target state="translated">T 유형의 다음 값을 검색하고 반환합니다.</target>
        </trans-unit>
        <trans-unit id="bfff5e27469c834715c537fdaa06f3d69dbc3529" translate="yes" xml:space="preserve">
          <source>Retrieve and store in parmn the next value that is of type T.</source>
          <target state="translated">T 유형의 다음 값을 검색하고 parmn에 저장합니다.</target>
        </trans-unit>
        <trans-unit id="e0d24e9ee5fe0654e7043b0779b9118f6c0254dc" translate="yes" xml:space="preserve">
          <source>Retrieve and store through parmn the next value that is of TypeInfo ti. Used when the static type is not known.</source>
          <target state="translated">TypeInfo ti의 다음 값을 parmn을 통해 검색하고 저장합니다. 정적 유형을 알 수 없을 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fb1a4d2ddb091e2ed5c1df8126e43168969a2ea2" translate="yes" xml:space="preserve">
          <source>Retrieve the error message for the most recently encountered network error.</source>
          <target state="translated">가장 최근에 발생한 네트워크 오류에 대한 오류 메시지를 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="3ccfcce95184dd63b688eab71bd3c81c72b77f02" translate="yes" xml:space="preserve">
          <source>Retrieve the mutex for a database connection</source>
          <target state="translated">데이터베이스 연결을위한 뮤텍스 검색</target>
        </trans-unit>
        <trans-unit id="fd054d14944b7f8962b0dae166fba959f6ef5524" translate="yes" xml:space="preserve">
          <source>Retrieves the members of an enumerated type &lt;code&gt;enum E&lt;/code&gt;.</source>
          <target state="translated">열거 형 &lt;code&gt;enum E&lt;/code&gt; 의 멤버를 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="07a895e230fd42b88e4f200ba2424bd521ff0150" translate="yes" xml:space="preserve">
          <source>Retrieves the value of the environment variable with the given &lt;code&gt;name&lt;/code&gt;, or a default value if the variable doesn't exist.</source>
          <target state="translated">주어진 &lt;code&gt;name&lt;/code&gt; 을 가진 환경 변수의 값을 가져 오거나 변수가 존재하지 않는 경우 기본값을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="fe03c3b4a6a960b5acf0f284f07d69430246cd47" translate="yes" xml:space="preserve">
          <source>Retrieves the value of the environment variable with the given &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;name&lt;/code&gt; 환경 변수의 값을 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="d1327c9133feffd8b254491a96ec4b023b23972e" translate="yes" xml:space="preserve">
          <source>Retrieving Statement SQL</source>
          <target state="translated">명령문 SQL 검색</target>
        </trans-unit>
        <trans-unit id="24f096b221f9534bcad007f2b5a32b490950b5b5" translate="yes" xml:space="preserve">
          <source>Return</source>
          <target state="translated">Return</target>
        </trans-unit>
        <trans-unit id="5076efac4add13272bee6ddd5339fd9cda299560" translate="yes" xml:space="preserve">
          <source>Return !=0 if expression is an lvalue.</source>
          <target state="translated">expression이 lvalue이면! = 0을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8e1581a5f169c76fa8c14988eaaae171290c12aa" translate="yes" xml:space="preserve">
          <source>Return !=0 if extensions match.</source>
          <target state="translated">확장명이 일치하면! = 0을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="dacbd18f9e3c60c211bc1336b50a6100f6993589" translate="yes" xml:space="preserve">
          <source>Return !=0 if modfrom can be implicitly converted to modto</source>
          <target state="translated">modfrom을 암시 적으로 modto로 변환 할 수 있으면! = 0을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5eaea1adde418b1924b1f691d2ffcede135bc038" translate="yes" xml:space="preserve">
          <source>Return !=0 if the type or any of its subtypes is wild.</source>
          <target state="translated">유형 또는 하위 유형이 야생이면! = 0을 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="813830fa39348b3cac6aa17105d4deb19aac21bb" translate="yes" xml:space="preserve">
          <source>Return !=0 if type has pointers that need to be scanned by the GC during a collection cycle.</source>
          <target state="translated">유형에 수집주기 동안 GC가 스캔해야하는 포인터가있는 경우! = 0을 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="2d22ef1555d405cb20620e62b486706f65de39cb" translate="yes" xml:space="preserve">
          <source>Return !=0 if unicode alpha. Use table from C99 Appendix D.</source>
          <target state="translated">유니 코드 알파인 경우! = 0을 반환합니다. C99 부록 D의 표를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7fb67cbae9c13ed76633b46abf739b76f9c294e1" translate="yes" xml:space="preserve">
          <source>Return 0 from the callback to signal success, return 1 to signal error and make curl close the socket</source>
          <target state="translated">콜백에서 0을 리턴하여 신호 성공을 표시하고 1을 신호 오류로 리턴하고 컬을 소켓에서 닫으십시오.</target>
        </trans-unit>
        <trans-unit id="466cf5e4eacffab4b5439c5f4c484cff12bded87" translate="yes" xml:space="preserve">
          <source>Return 0 from the callback to signal success, return non-zero to abort transfer</source>
          <target state="translated">성공을 알리기 위해 콜백에서 0을 반환하고 전송을 중단하려면 0이 아닌 값을 반환</target>
        </trans-unit>
        <trans-unit id="3363b44414c7c859cdedb1714e3b8af576d7fa24" translate="yes" xml:space="preserve">
          <source>Return 0 from the callback to signal success, return non-zero to abort transfer.</source>
          <target state="translated">성공을 알리기 위해 콜백에서 0을 반환하고 전송을 중단하려면 0이 아닌 값을 반환하십시오.</target>
        </trans-unit>
        <trans-unit id="c9646219088fb7ede96a566f8d70a3a4eec4c914" translate="yes" xml:space="preserve">
          <source>Return 0 to signal success, return non-zero to abort transfer.</source>
          <target state="translated">성공을 알리려면 0을 리턴하고 전송을 중단하려면 0이 아닌 값을 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="5735756d12a32be153ec40823e5e91495fbf0fff" translate="yes" xml:space="preserve">
          <source>Return 1 if sign bit of e is set, 0 if not.</source>
          <target state="translated">e의 부호 비트가 설정되어 있으면 1을 리턴하고 그렇지 않으면 0을 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="82f89a6b75799e6fbe68dea890823428de349d71" translate="yes" xml:space="preserve">
          <source>Return MATCH level of implicitly converting e to type t. Don't do the actual cast; don't change e.</source>
          <target state="translated">내재적으로 e를 유형 t로 변환하는 MATCH 레벨을 리턴하십시오. 실제 출연을하지 마십시오. 변경하지 마십시오. e.</target>
        </trans-unit>
        <trans-unit id="24e287b96c21c16dc00195e6a2518bac14d25d32" translate="yes" xml:space="preserve">
          <source>Return MATCH.exact or MATCH.constant if a method of type '() modfrom' can call a method of type '() modto'.</source>
          <target state="translated">'() modfrom'유형의 메소드가 '() modto'유형의 메소드를 호출 할 수있는 경우 MATCH.exact 또는 MATCH.constant를 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="6b5a1d52cb44bff3d519554e6603c5f2ef79882f" translate="yes" xml:space="preserve">
          <source>Return Ref Parameters</source>
          <target state="translated">참조 매개 변수 반환</target>
        </trans-unit>
        <trans-unit id="40f3a4705ebbb407ee0cdc99059fa5fe5300eb28" translate="yes" xml:space="preserve">
          <source>Return Scope Parameters</source>
          <target state="translated">반환 범위 매개 변수</target>
        </trans-unit>
        <trans-unit id="b568fd0cda9a73719dc7007f78b5366b6ca2051e" translate="yes" xml:space="preserve">
          <source>Return Statement</source>
          <target state="translated">반품 명세서</target>
        </trans-unit>
        <trans-unit id="8cfd6fed2b7cd44c8a1d3921d26de3c89f4137b3" translate="yes" xml:space="preserve">
          <source>Return The Filename For A Database Connection</source>
          <target state="translated">데이터베이스 연결을위한 파일 이름 반환</target>
        </trans-unit>
        <trans-unit id="7605e4b76df0d8f628e31f2c3d6b09f231afd493" translate="yes" xml:space="preserve">
          <source>Return The Size Of An Open BLOB</source>
          <target state="translated">열린 BLOB의 크기를 반환</target>
        </trans-unit>
        <trans-unit id="4ed1a51e3c7c6cf43a3633b3e58f69e74b9dd263" translate="yes" xml:space="preserve">
          <source>Return Value</source>
          <target state="translated">반환 값</target>
        </trans-unit>
        <trans-unit id="dd6416148e17adaeaccfc9b6b7d1e682c603bb71" translate="yes" xml:space="preserve">
          <source>Return a GC allocated array of all keys</source>
          <target state="translated">모든 키의 GC 할당 배열을 반환</target>
        </trans-unit>
        <trans-unit id="e51ad1ab975119086f7ac92aca0a3e9b0bc6500f" translate="yes" xml:space="preserve">
          <source>Return a GC allocated array of all values</source>
          <target state="translated">모든 값의 GC 할당 배열을 반환</target>
        </trans-unit>
        <trans-unit id="85b29e7222f48991ae7292690eb4ff4d837309db" translate="yes" xml:space="preserve">
          <source>Return a copy of this type with all attributes null-initialized. Useful for creating a type with different modifiers.</source>
          <target state="translated">모든 속성이 널 초기화 된 상태로이 유형의 사본을 리턴하십시오. 다른 수정자를 사용하여 유형을 작성하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="f10d29706c4a0fdf4790fac9d2887fe37bc15218" translate="yes" xml:space="preserve">
          <source>Return a lazy range of the indices of set bits.</source>
          <target state="translated">설정된 비트 인덱스의 게으른 범위를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3c3bd314993cb4f7ebe64ce8ccdfda96b5e89c4f" translate="yes" xml:space="preserve">
          <source>Return a range advanced to within &lt;code&gt;_n&lt;/code&gt; elements of the end of &lt;code&gt;range&lt;/code&gt;.</source>
          <target state="translated">내 진출 범위로 돌아 &lt;code&gt;_n&lt;/code&gt; 의 끝의 요소 &lt;code&gt;range&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5347c17867337569c491fc8294864697ba1401bd" translate="yes" xml:space="preserve">
          <source>Return a range advanced to within &lt;code&gt;n&lt;/code&gt; elements of the end of the given range.</source>
          <target state="translated">주어진 범위의 끝 에서 &lt;code&gt;n&lt;/code&gt; 개의 요소 내로 확장 된 범위를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="64584cef9fbdd944a607b7c32156e3abfbfa767a" translate="yes" xml:space="preserve">
          <source>Return a string representation of this BitArray.</source>
          <target state="translated">이 BitArray 캐릭터 라인 표현을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="909366bd83575cfd59995d950c2eec03f130a564" translate="yes" xml:space="preserve">
          <source>Return aligned 'offset' if it is of size 'size'.</source>
          <target state="translated">크기가 'size'인 경우 정렬 된 'offset'을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7bac63114467240663566e592e5e86e0bef9bef2" translate="yes" xml:space="preserve">
          <source>Return alignment of type</source>
          <target state="translated">타입의 리턴 정렬</target>
        </trans-unit>
        <trans-unit id="14099585f9505605deb2190e1aae416384628c38" translate="yes" xml:space="preserve">
          <source>Return alignment to use for this type.</source>
          <target state="translated">이 유형에 사용할 정렬을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="78bd5594d8bf94c5bb250c8135cb0038193e109d" translate="yes" xml:space="preserve">
          <source>Return back end type corresponding to D front end type.</source>
          <target state="translated">D 프론트 엔드 유형에 해당하는 백엔드 유형을 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="82367e299b290bd0a098fc1001f08ec0e0513303" translate="yes" xml:space="preserve">
          <source>Return canonical version of name in a malloc'd buffer. This code is high risk.</source>
          <target state="translated">malloc'd 버퍼에 정식 버전의 이름을 반환합니다. 이 코드는 위험이 높습니다.</target>
        </trans-unit>
        <trans-unit id="9c156771844298d98d35a5f40c30a796e519426a" translate="yes" xml:space="preserve">
          <source>Return code of the application</source>
          <target state="translated">응용 프로그램의 리턴 코드</target>
        </trans-unit>
        <trans-unit id="944e1e4d489d2d2acdea588d0a19a936485871df" translate="yes" xml:space="preserve">
          <source>Return default initializer. If the type should be initialized to all zeros, an array with a null ptr and a length equal to the type size will be returned. For static arrays, this returns the default initializer for a single element of the array, use &lt;code&gt;tsize&lt;/code&gt; to get the correct size.</source>
          <target state="translated">기본 이니셜 라이저를 반환합니다. 형식을 모두 0으로 초기화해야하는 경우 null ptr과 형식 크기와 길이가 같은 배열이 반환됩니다. 정적 배열의 경우 배열의 단일 요소에 대한 기본 초기화 프로그램을 반환합니다 . 올바른 크기를 얻으려면 &lt;code&gt;tsize&lt;/code&gt; 를 사용 하십시오.</target>
        </trans-unit>
        <trans-unit id="4053dc0e9bdb3ffb335d94322fd6ee14fabd7bb6" translate="yes" xml:space="preserve">
          <source>Return elem that evaluates to the static frame pointer for function fd. If fd is a member function, the returned expression will compute the value of fd's 'this' variable. 'fdp' is the parent of 'fd' if the frame pointer is being used to call 'fd'. 'origSc' is the original scope we inlined from. This routine is critical for implementing nested functions.</source>
          <target state="translated">함수 fd에 대한 정적 프레임 포인터로 평가되는 요소를 리턴하십시오. fd가 멤버 함수 인 경우 반환 된 표현식은 fd의 'this'변수 값을 계산합니다. 프레임 포인터를 사용하여 'fd'를 호출하는 경우 'fdp'는 'fd'의 부모입니다. 'origSc'는 우리가 인라인 한 원래 범위입니다. 이 루틴은 중첩 함수를 구현하는 데 중요합니다.</target>
        </trans-unit>
        <trans-unit id="9fd03b424640910e6278c70e669b1d4e876e9f5f" translate="yes" xml:space="preserve">
          <source>Return file name without extension.</source>
          <target state="translated">확장자없이 파일 이름을 반환하십시오.</target>
        </trans-unit>
        <trans-unit id="07fe9514789d2f4cd0e9b4e57ce0ed5505c13b37" translate="yes" xml:space="preserve">
          <source>Return filename name excluding path (read-only).</source>
          <target state="translated">경로를 제외한 파일 이름을 반환합니다 (읽기 전용).</target>
        </trans-unit>
        <trans-unit id="22c4aed7f4185313b77e553930796acded83814f" translate="yes" xml:space="preserve">
          <source>Return first parameter &lt;code&gt;p&lt;/code&gt; that passes an &lt;code&gt;if (p)&lt;/code&gt; test, e.g. &lt;code&gt;either(0, 42, 43)&lt;/code&gt; returns &lt;code&gt;42&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;if (p)&lt;/code&gt; 테스트 를 통과 한 첫 번째 매개 변수 &lt;code&gt;p&lt;/code&gt; 를 반환합니다 . 예를 들어, &lt;code&gt;either(0, 42, 43)&lt;/code&gt; 는 &lt;code&gt;42&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="161ebf2251616309e44b6d0f705eb7df9207ac30" translate="yes" xml:space="preserve">
          <source>Return info used by the garbage collector to do precise collection.</source>
          <target state="translated">가비지 수집기에서 정확한 수집을 위해 사용하는 정보를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1edd17a195e17c6d1c9dfaec1964d158a7594886" translate="yes" xml:space="preserve">
          <source>Return internal info on arguments fitting into 8byte. See X86-64 ABI 3.2.3</source>
          <target state="translated">8 바이트에 적합한 인수에 대한 내부 정보를 리턴하십시오. X86-64 ABI 3.2.3 참조</target>
        </trans-unit>
        <trans-unit id="52ee2244a124dcf6a3442090efe2b150aad23b24" translate="yes" xml:space="preserve">
          <source>Return nonzero if this &lt;code&gt;Socket&lt;/code&gt; is in the collection.</source>
          <target state="translated">이 &lt;code&gt;Socket&lt;/code&gt; 이 컬렉션에있는 경우 0이 아닌 값을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="5bcb75882578fa152d0a3b8228a6bba059bb03c0" translate="yes" xml:space="preserve">
          <source>Return number of bytes in UTF character.</source>
          <target state="translated">바이트 수를 UTF 문자로 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="6b00e7eeba7dd7b1983912d6619513007b5842a8" translate="yes" xml:space="preserve">
          <source>Return path portion of str. returned string is newly allocated Path does not include trailing path separator.</source>
          <target state="translated">str의 리턴 경로 부분 반환 된 문자열이 새로 할당 됨 경로에 후행 경로 구분 기호가 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9e32c0be2d58d4be865d007c41bc8ed55177dfba" translate="yes" xml:space="preserve">
          <source>Return ref parameters are used with &lt;a href=&quot;#ref-functions&quot;&gt;ref functions&lt;/a&gt; to ensure that the returned reference will not outlive the matching argument's lifetime.</source>
          <target state="translated">리턴 참조 매개 변수는 리턴 참조가 일치하는 인수의 수명보다 오래 걸리지 않도록 &lt;a href=&quot;#ref-functions&quot;&gt;ref 함수&lt;/a&gt; 와 함께 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="618c532a610bb89f14f3a07343fb126a0476acfe" translate="yes" xml:space="preserve">
          <source>Return size of data.</source>
          <target state="translated">데이터의 크기를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6d6fc86109cd8c5c3e47783737daf2ca750d004d" translate="yes" xml:space="preserve">
          <source>Return string that is the 'successor' to s[]. If the rightmost character is a-zA-Z0-9, it is incremented within its case or digits. If it generates a carry, the process is repeated with the one to its immediate left.</source>
          <target state="translated">s []에 '성공자'인 문자열을 리턴하십시오. 가장 오른쪽 문자가 a-zA-Z0-9이면 대소 문자 내에서 증가합니다. 캐리를 생성하는 경우 프로세스가 바로 왼쪽으로 반복됩니다.</target>
        </trans-unit>
        <trans-unit id="44c54a5951a97047f68a283b62e636ee8bfac1cb" translate="yes" xml:space="preserve">
          <source>Return the Tid of the thread which spawned the caller's thread.</source>
          <target state="translated">호출자의 스레드를 생성 한 스레드의 Tid를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="dae6425ebb00694c8e2b8f43749eb65eb305e7fc" translate="yes" xml:space="preserve">
          <source>Return the UUID as a string in the canonical form.</source>
          <target state="translated">정식 형식으로 UUID를 문자열로 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="f5d15e798ef426e1020ac0483edb55fff7505a66" translate="yes" xml:space="preserve">
          <source>Return the current trace handler</source>
          <target state="translated">현재 트레이스 핸들러를 반환</target>
        </trans-unit>
        <trans-unit id="5124903d5287a5fa60d6aa7723c70c0683f914e9" translate="yes" xml:space="preserve">
          <source>Return the given name as an absolute path</source>
          <target state="translated">주어진 이름을 절대 경로로 반환</target>
        </trans-unit>
        <trans-unit id="6712230d551ab31ce097306bbbc187117b86954e" translate="yes" xml:space="preserve">
          <source>Return the greatest number less than x that is representable as a real; thus, it gives the previous point on the IEEE number line.</source>
          <target state="translated">실수로 표현할 수있는 x보다 작은 최대 값을 반환합니다. 따라서 IEEE 번호 라인의 이전 지점을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="50cbdb762f2bb55c31094ad5fc1de24f5b8a351f" translate="yes" xml:space="preserve">
          <source>Return the least number greater than x that is representable as a real; thus, it gives the next point on the IEEE number line.</source>
          <target state="translated">실수로 표현할 수있는 x보다 큰 최소 숫자를 반환합니다. 따라서 IEEE 번호 라인에서 다음 지점을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="9961e81d7ecf72d3873e2aee6f0f99fd21867c8e" translate="yes" xml:space="preserve">
          <source>Return the mask that an integral type will fit into.</source>
          <target state="translated">정수형에 맞는 마스크를 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="b37d2aa3fd3373873e57e3b908a867dc0ec62fd7" translate="yes" xml:space="preserve">
          <source>Return the number of code units the string would be if it were re-encoded as tynto.</source>
          <target state="translated">문자열을 tynto로 다시 인코딩 한 경우 문자열의 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="64be8221f99567047f7d41a30b0f7a629422450c" translate="yes" xml:space="preserve">
          <source>Return the size of an allocation</source>
          <target state="translated">할당의 크기를 반환</target>
        </trans-unit>
        <trans-unit id="e3de1268dd617a3c170c29afc19a38c699eb49aa" translate="yes" xml:space="preserve">
          <source>Return the value of x rounded to the nearest integer.</source>
          <target state="translated">가장 가까운 정수로 반올림 한 x 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="77386a55b3af47db5d6720fdbb34821632594ea1" translate="yes" xml:space="preserve">
          <source>Return the value of x rounded to the nearest integer. If the fractional part of x is exactly 0.5, the return value is rounded away from zero.</source>
          <target state="translated">가장 가까운 정수로 반올림 한 x 값을 반환합니다. x의 소수 부분이 정확히 0.5이면 반환 값은 0에서 반올림됩니다.</target>
        </trans-unit>
        <trans-unit id="eba0bf1594868083254398a7aeb4b4f670dfbd1e" translate="yes" xml:space="preserve">
          <source>Return this type's modifier name.</source>
          <target state="translated">이 타입의 수식 자명을 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="815f69369aee2a4e4634f0ce87bd2dced618858c" translate="yes" xml:space="preserve">
          <source>Return true if agg1 and agg2 are pointers to the same memory block</source>
          <target state="translated">agg1과 agg2가 동일한 메모리 블록에 대한 포인터 인 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="bb42b6838897246be79e8ac1836c1c9893f5258e" translate="yes" xml:space="preserve">
          <source>Return true if any of the members are static ctors or static dtors, or if any members have members that are.</source>
          <target state="translated">멤버가 정적 ctor 또는 정적 dtor이거나 멤버가있는 멤버가 있으면 true를 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="a2affd967703203aa22f06ba3f47f616207aaf70" translate="yes" xml:space="preserve">
          <source>Return true if dt contains pointers (requires relocations).</source>
          <target state="translated">dt에 포인터가 포함 된 경우 true를 리턴합니다 (이전이 필요함).</target>
        </trans-unit>
        <trans-unit id="a704680e5a2358a4b21f56a8e14e64261e3a1fb8" translate="yes" xml:space="preserve">
          <source>Return true if dt is all zeros.</source>
          <target state="translated">dt가 모두 0이면 true를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a4b6c1fc0091c1a3a5bb73cc9fc2a1b7c342228c" translate="yes" xml:space="preserve">
          <source>Return true if e could be valid only as a template value parameter. Return false if it might be an alias or tuple. (Note that even in this case, it could still turn out to be a value).</source>
          <target state="translated">e가 템플리트 값 매개 변수로만 유효 할 수 있으면 true를 리턴하십시오. 별명 또는 튜플 일 경우 false를 리턴하십시오. (이 경우에도 여전히 값이 될 수 있습니다).</target>
        </trans-unit>
        <trans-unit id="84791c44b623e37860c47666951c5280ba6fc7be" translate="yes" xml:space="preserve">
          <source>Return true if module imports itself.</source>
          <target state="translated">모듈 자체를 가져 오는 경우 true를 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="dc1399a76e32df10691c532a68ee824eb2a87c93" translate="yes" xml:space="preserve">
          <source>Return true if module imports root module.</source>
          <target state="translated">모듈이 루트 모듈을 가져 오는 경우 true를 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="b8d1cff003fcd386ae3bf958175ea899758e9ab2" translate="yes" xml:space="preserve">
          <source>Return true if size of data is 0.</source>
          <target state="translated">데이터 크기가 0이면 true를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6e045f7f2adea7c61e3f3faafea8ac2112270ae8" translate="yes" xml:space="preserve">
          <source>Return true if there are lazy parameters.</source>
          <target state="translated">게으른 매개 변수가 있으면 true를 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="e83369e1edea2b1de00e12e9114bab39ec8a35b1" translate="yes" xml:space="preserve">
          <source>Return true if variable needs to call the destructor.</source>
          <target state="translated">변수가 소멸자를 호출해야하는 경우 true를 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="e6f382b6d6732c45656ed7d192c05094bace1124" translate="yes" xml:space="preserve">
          <source>Return true if we can take the address of this variable.</source>
          <target state="translated">이 변수의 주소를 사용할 수 있으면 true를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="96335248606b0ff777f182f31ffdf9d3299473ff" translate="yes" xml:space="preserve">
          <source>Return type with the top level of it being mutable.</source>
          <target state="translated">최상위 레벨이 변경 가능한 리턴 유형.</target>
        </trans-unit>
        <trans-unit id="e7370338afdd3f0d3caf67e9c25b67a935b91773" translate="yes" xml:space="preserve">
          <source>Return whether &lt;code&gt;c&lt;/code&gt; is a Unicode lowercase &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt;.</source>
          <target state="translated">반환 여부를 &lt;code&gt;c&lt;/code&gt; 유니 코드 소문자입니다 &lt;a href=&quot;#Character&quot;&gt;문자&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8d5dd30c83ee35b4f635ccc0ec48b106e9b9c166" translate="yes" xml:space="preserve">
          <source>Return whether &lt;code&gt;c&lt;/code&gt; is a Unicode uppercase &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt;.</source>
          <target state="translated">반환 여부를 &lt;code&gt;c&lt;/code&gt; 유니 코드 대문자 &lt;a href=&quot;#Character&quot;&gt;문자&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="aa6f79138c08ba3706b95a32d76889ad1576f327" translate="yes" xml:space="preserve">
          <source>ReturnStatement</source>
          <target state="translated">ReturnStatement</target>
        </trans-unit>
        <trans-unit id="9fee2a258147624ebdf57aeaaa981ddfd6b4674c" translate="yes" xml:space="preserve">
          <source>ReturnType!fun &lt;strong id=&quot;memoize&quot;&gt;memoize&lt;/strong&gt;(alias fun)(Parameters!fun args);</source>
          <target state="translated">ReturnType! fun &lt;strong id=&quot;memoize&quot;&gt;memoize&lt;/strong&gt; (별칭 fun) (매개 변수! fun args);</target>
        </trans-unit>
        <trans-unit id="f0413c4ab273e98a4edc165fa833c49ffe92fc6d" translate="yes" xml:space="preserve">
          <source>ReturnType!fun &lt;strong id=&quot;memoize&quot;&gt;memoize&lt;/strong&gt;(alias fun, uint maxSize)(Parameters!fun args);</source>
          <target state="translated">ReturnType! fun &lt;strong id=&quot;memoize&quot;&gt;memoize&lt;/strong&gt; (별칭 fun, uint maxSize) (매개 변수! fun args);</target>
        </trans-unit>
        <trans-unit id="9c6c9e9250bee2a67f71ce0b8269b7c304840e28" translate="yes" xml:space="preserve">
          <source>Returned values are strictly typed with &lt;code&gt;E&lt;/code&gt;. Thus, the following code does not work without the explicit cast:</source>
          <target state="translated">반환 된 값은 &lt;code&gt;E&lt;/code&gt; 로 엄격하게 입력됩니다 . 따라서 다음 코드는 명시 적 캐스트 없이는 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a6ac97e5a779ad777b193998ab3efe07d29d58c5" translate="yes" xml:space="preserve">
          <source>Returning a 0 value.</source>
          <target state="translated">0 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c73e68bfada258b418ac816e2d5d678f4463decc" translate="yes" xml:space="preserve">
          <source>Returning a &lt;code&gt;ubyte[n]&lt;/code&gt; helps prevent accidentally using a swapped value as a regular one (and in the case of floating point values, it's necessary, because the FPU will mess up any swapped floating point values. So, you can't actually have swapped floating point values as floating point values).</source>
          <target state="translated">&lt;code&gt;ubyte[n]&lt;/code&gt; 반환하면 실수로 스왑 된 값을 일반 값으로 사용하는 것을 방지 할 수 있습니다 (부동 소수점 값의 경우 FPU가 스왑 된 부동 소수점 값을 엉망으로 만들기 때문에 필요합니다). 부동 소수점 값을 부동 소수점 값으로 바)).</target>
        </trans-unit>
        <trans-unit id="93145fea4e51302eb070f8da6bb9a6d60e8f08fa" translate="yes" xml:space="preserve">
          <source>Returning a NULL pointer.</source>
          <target state="translated">NULL 포인터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c2b3f353baca74d789f1759c6379b6dde0b73242" translate="yes" xml:space="preserve">
          <source>Returning a non-zero error code.</source>
          <target state="translated">0이 아닌 오류 코드를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2e985b58b9c2ef6cf6a8831e1ffcc745302653df" translate="yes" xml:space="preserve">
          <source>Returning a subtype of &lt;a href=&quot;std_typecons#Tuple&quot;&gt;&lt;code&gt;std.typecons.Tuple&lt;/code&gt;&lt;/a&gt; enables the following convenient idiom:</source>
          <target state="translated">&lt;a href=&quot;std_typecons#Tuple&quot;&gt; &lt;code&gt;std.typecons.Tuple&lt;/code&gt; &lt;/a&gt; 의 하위 유형을 반환 하면 다음과 같은 편리한 관용구를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="182cd17c7c23cdc09eba2a4f2e7e149460a4f29b" translate="yes" xml:space="preserve">
          <source>Returning the address of a &lt;code&gt;ref&lt;/code&gt; variable is also checked.</source>
          <target state="translated">&lt;code&gt;ref&lt;/code&gt; 변수 의 주소 반환 도 확인됩니다.</target>
        </trans-unit>
        <trans-unit id="6c27c79f2e4552af535e1d49e91664f690a08cee" translate="yes" xml:space="preserve">
          <source>Returning the current thread to whatever work it was doing.</source>
          <target state="translated">현재 스레드를 수행중인 작업으로 되돌립니다.</target>
        </trans-unit>
        <trans-unit id="6984d70f1bef25da719e6dc8594bb161e58e8dd9" translate="yes" xml:space="preserve">
          <source>Returning values in registers is often faster, so this can be used as a check on a hot function to ensure it is using the fastest method.</source>
          <target state="translated">레지스터에서 값을 반환하는 것이 더 빠르기 때문에 가장 빠른 방법을 사용하고 있는지 확인하기 위해 핫 기능을 검사하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ed1d0baa1befb7365f80c956f685b4164ce4abc4" translate="yes" xml:space="preserve">
          <source>Returns (x * y) + z, rounding only once according to the current rounding mode.</source>
          <target state="translated">현재 반올림 모드에 따라 한 번만 반올림하여 (x * y) + z를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="60778e683e6a3e85209303f22d279d8091b6677d" translate="yes" xml:space="preserve">
          <source>Returns -1 if &amp;Gamma;(x) &amp;lt; 0, +1 if &amp;Gamma;(x) &amp;gt; 0, NAN if sign is indeterminate.</source>
          <target state="translated">&amp;Gamma; (x) &amp;lt;0이면 -1, &amp;Gamma; (x)&amp;gt; 0이면 +1, 부호가 불확실한 경우 NAN을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ec98e787d4dd28ab0e557aa099033d515eca2e4c" translate="yes" xml:space="preserve">
          <source>Returns &lt;a href=&quot;http://en.wikipedia.org/wiki/Sine&quot;&gt;sine&lt;/a&gt; of x. x is in &lt;a href=&quot;http://en.wikipedia.org/wiki/Radian&quot;&gt;radians&lt;/a&gt;.</source>
          <target state="translated">x의 &lt;a href=&quot;http://en.wikipedia.org/wiki/Sine&quot;&gt;사인&lt;/a&gt; 을 반환합니다 . x는 &lt;a href=&quot;http://en.wikipedia.org/wiki/Radian&quot;&gt;라디안&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1f304135c9b17f42eed04bfcd408990b880be215" translate="yes" xml:space="preserve">
          <source>Returns &lt;a href=&quot;https://en.wikipedia.org/wiki/Sine&quot;&gt;sine&lt;/a&gt; of x. x is in &lt;a href=&quot;https://en.wikipedia.org/wiki/Radian&quot;&gt;radians&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="534252ff9584903ee29007cae24024402e5d5549" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;-1&lt;/code&gt; if &lt;code&gt;x &amp;lt; 0&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; if &lt;code&gt;x == 0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; if &lt;code&gt;x &amp;gt; 0&lt;/code&gt;, and NAN if x==NAN.</source>
          <target state="translated">반환 &lt;code&gt;-1&lt;/code&gt; 경우, &lt;code&gt;x &amp;lt; 0&lt;/code&gt; , &lt;code&gt;x&lt;/code&gt; 의 경우 &lt;code&gt;x == 0&lt;/code&gt; , &lt;code&gt;1&lt;/code&gt; 의 경우 &lt;code&gt;x &amp;gt; 0&lt;/code&gt; 그리고 X NAN == NAN 경우.</target>
        </trans-unit>
        <trans-unit id="56ad949e95f8129ac1bdde6e3c05a3b620f35036" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.no&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Ternary.no&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="162c4b360f19eb0223970b32348aa2468143ae82" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if &lt;code&gt;b&lt;/code&gt; belongs to the &lt;code&gt;BitmappedBlock&lt;/code&gt; object, &lt;code&gt;Ternary.no&lt;/code&gt; otherwise. Never returns &lt;code&gt;Ternary.unkown&lt;/code&gt;. (This method is somewhat tolerant in that accepts an interior slice.)</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; 가 &lt;code&gt;BitmappedBlock&lt;/code&gt; 객체에 속하는 경우 &lt;code&gt;Ternary.yes&lt;/code&gt; 를 반환 하고 , 그렇지 않으면 &lt;code&gt;Ternary.no&lt;/code&gt; 를 반환합니다. &lt;code&gt;Ternary.unkown&lt;/code&gt; 을 반환하지 않습니다 . (이 방법은 내부 슬라이스를 허용한다는 점에서 다소 관대합니다.)</target>
        </trans-unit>
        <trans-unit id="8ceb97bd9a5df5ae709b59070999702eafaa3c90" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if &lt;code&gt;b&lt;/code&gt; belongs to the &lt;code&gt;SharedBitmappedBlock&lt;/code&gt; object, &lt;code&gt;Ternary.no&lt;/code&gt; otherwise. Never returns &lt;code&gt;Ternary.unkown&lt;/code&gt;. (This method is somewhat tolerant in that accepts an interior slice.)</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; 가 &lt;code&gt;SharedBitmappedBlock&lt;/code&gt; 객체에 속하는 경우 &lt;code&gt;Ternary.yes&lt;/code&gt; 를 반환 하고 , 그렇지 않으면 &lt;code&gt;Ternary.no&lt;/code&gt; 를 반환합니다. &lt;code&gt;Ternary.unkown&lt;/code&gt; 을 반환하지 않습니다 . (이 방법은 내부 슬라이스를 허용한다는 점에서 다소 관대합니다.)</target>
        </trans-unit>
        <trans-unit id="aa0ae7e27a4d74ee8d3cc9b782715b16198cb676" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if &lt;code&gt;b&lt;/code&gt; has been allocated with this allocator. An allocator should define this method only if it can decide on ownership precisely and fast (in constant time, logarithmic time, or linear time with a low multiplication factor). Traditional allocators such as the C heap do not define such functionality. If &lt;code&gt;b is null&lt;/code&gt;, the allocator shall return &lt;code&gt;Ternary.no&lt;/code&gt;, i.e. no allocator owns the &lt;code&gt;null&lt;/code&gt; slice.</source>
          <target state="translated">이 할당 &lt;code&gt;Ternary.yes&lt;/code&gt; &lt;code&gt;b&lt;/code&gt; 가 할당 된 경우 Ternary.yes를 리턴 합니다. 할당자는 소유권을 정확하고 빠르게 (상수, 로그 시간 또는 곱셈 계수가 낮은 선형 시간으로) 결정할 수있는 경우에만이 방법을 정의해야합니다. C 힙과 같은 기존 할당자는 이러한 기능을 정의하지 않습니다. 경우 &lt;code&gt;b is null&lt;/code&gt; 의 할당 반환하여야한다 &lt;code&gt;Ternary.no&lt;/code&gt; 을 더 할당이 소유하지 않습니다 즉, &lt;code&gt;null&lt;/code&gt; 조각.</target>
        </trans-unit>
        <trans-unit id="cc43b850aae4fdfc4d7d9d18eab4228e8c3f8f7a" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if &lt;code&gt;b&lt;/code&gt; is the result of a previous allocation, &lt;code&gt;Ternary.no&lt;/code&gt; otherwise.</source>
          <target state="translated">반환 &lt;code&gt;Ternary.yes&lt;/code&gt; 을 경우 &lt;code&gt;b&lt;/code&gt; 는 이전 할당의 결과입니다 &lt;code&gt;Ternary.no&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="1428bbb4302db4dd1b3f636985f6ddcbfc4d61a2" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if and only if the allocator holds no memory (i.e. no allocation has occurred, or all allocations have been deallocated).</source>
          <target state="translated">할당자가 메모리를 보유하지 않은 경우 (즉, 할당이 발생하지 않았거나 모든 할당이 할당 해제 된 경우에만) &lt;code&gt;Ternary.yes&lt;/code&gt; 를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="c1c97d1779f0a6a9209ed489a0132919b1507b6d" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if no allocators are currently active, &lt;code&gt;Ternary.no&lt;/code&gt; otherwise. This methods never returns &lt;code&gt;Ternary.unknown&lt;/code&gt;.</source>
          <target state="translated">반환 &lt;code&gt;Ternary.yes&lt;/code&gt; 더 할당 자 현재 활성화,없는 경우 &lt;code&gt;Ternary.no&lt;/code&gt; 그렇지. 이 메소드는 &lt;code&gt;Ternary.unknown&lt;/code&gt; 을 리턴하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="0df29a7d41d84a915ace0d89d94e1699b80dcff7" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if no memory has been allocated in this region, &lt;code&gt;Ternary.no&lt;/code&gt; otherwise. (Never returns &lt;code&gt;Ternary.unknown&lt;/code&gt;.)</source>
          <target state="translated">반환 &lt;code&gt;Ternary.yes&lt;/code&gt; 을 더 메모리가이 지역에 할당되어 있지 않은 경우 &lt;code&gt;Ternary.no&lt;/code&gt; 그렇지. &lt;code&gt;Ternary.unknown&lt;/code&gt; 을 반환하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="22641d942273ad1a77fc2a90f950d47345bb9533" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if no memory is currently allocated from this allocator, &lt;code&gt;Ternary.no&lt;/code&gt; if some allocations are currently active, or &lt;code&gt;Ternary.unknown&lt;/code&gt; if not supported.</source>
          <target state="translated">반환 &lt;code&gt;Ternary.yes&lt;/code&gt; 을 더 메모리가 현재이 할당에서 할당되지 않은 경우 &lt;code&gt;Ternary.no&lt;/code&gt; 일부 할당이 현재 활성화 된 경우, 또는 &lt;code&gt;Ternary.unknown&lt;/code&gt; 지원하지 않을 경우.</target>
        </trans-unit>
        <trans-unit id="28f123241a0a7eec0cc32c965f3372769e98b360" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if no memory is currently allocated with this allocator, &lt;code&gt;Ternary.no&lt;/code&gt; otherwise. This method never returns &lt;code&gt;Ternary.unknown&lt;/code&gt;.</source>
          <target state="translated">반환 &lt;code&gt;Ternary.yes&lt;/code&gt; 을 더 메모리가 현재이 할당, 할당되지 않은 경우 &lt;code&gt;Ternary.no&lt;/code&gt; 그렇지. 이 메소드는 &lt;code&gt;Ternary.unknown&lt;/code&gt; 을 리턴하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="576821022eb07e0ae2aa13aa41f01f8ddabdaa3d" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if no memory is currently allocated with this allocator, otherwise &lt;code&gt;Ternary.no&lt;/code&gt;. This method never returns &lt;code&gt;Ternary.unknown&lt;/code&gt;.</source>
          <target state="translated">현재이 할당 자에 할당 된 메모리가 없으면 &lt;code&gt;Ternary.yes&lt;/code&gt; 를 리턴 하고, 그렇지 않으면 &lt;code&gt;Ternary.no&lt;/code&gt; 를 리턴 합니다. 이 메소드는 &lt;code&gt;Ternary.unknown&lt;/code&gt; 을 리턴하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="e8e5a2d686354e28ac99624b57803cbe311a5bfc" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if the allocator does not contain any alive objects and &lt;code&gt;Ternary.no&lt;/code&gt; otherwise.</source>
          <target state="translated">반환 &lt;code&gt;Ternary.yes&lt;/code&gt; 을 할당자가 모든 살아있는 개체와 포함하지 않는 경우 &lt;code&gt;Ternary.no&lt;/code&gt; 을 그렇지.</target>
        </trans-unit>
        <trans-unit id="5c75eda55e19b85a866dcdacb4846513741b45d7" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if the allocator owns &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;Ternary.no&lt;/code&gt; if the allocator doesn't own &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;Ternary.unknown&lt;/code&gt; if ownership cannot be determined. Implementations that don't support this primitive should always return &lt;code&gt;Ternary.unknown&lt;/code&gt;.</source>
          <target state="translated">반환이 &lt;code&gt;Ternary.yes&lt;/code&gt; 할당자가 소유하는 경우 &lt;code&gt;b&lt;/code&gt; , &lt;code&gt;Ternary.no&lt;/code&gt; 는 할당자가 소유하지 않는 경우 &lt;code&gt;b&lt;/code&gt; , 그리고 &lt;code&gt;Ternary.unknown&lt;/code&gt; 소유권을 결정할 수없는 경우. 이 프리미티브를 지원하지 않는 구현은 항상 &lt;code&gt;Ternary.unknown&lt;/code&gt; 을 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="7c3466939fa67b53a7a75df18791cd8a27669629" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if the buffer belongs to the parent allocator and &lt;code&gt;Ternary.no&lt;/code&gt; otherwise.</source>
          <target state="translated">반환 &lt;code&gt;Ternary.yes&lt;/code&gt; 버퍼가 부모의 할당과에 속하는 경우 &lt;code&gt;Ternary.no&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="39020cc870cb247dce8f9c94879adcaa6a57c96a" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if the passed buffer is inside the range of virtual adresses. Does not guarantee that the passed buffer is still valid.</source>
          <target state="translated">전달 된 버퍼가 가상 주소 범위 내에 있으면 &lt;code&gt;Ternary.yes&lt;/code&gt; 를 반환 합니다. 전달 된 버퍼가 여전히 유효한 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="303082f8c158d6170e928d785a87c6c26ee45a1e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt; if this allocator is not responsible for any memory, &lt;code&gt;Ternary.no&lt;/code&gt; otherwise. (Never returns &lt;code&gt;Ternary.unknown&lt;/code&gt;.)</source>
          <target state="translated">반환 &lt;code&gt;Ternary.yes&lt;/code&gt; 를 이 할당 어떤 메모리에 대한 책임을지지 않습니다 경우 &lt;code&gt;Ternary.no&lt;/code&gt; 그렇지. &lt;code&gt;Ternary.unknown&lt;/code&gt; 을 반환하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="3e0da7ed620f30a5c0b0c0b0cc2ad4c453d99eeb" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Ternary.yes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Ternary.yes&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="171e90d1a5e9b217cfbadc1fe4981e6e561b6e1f" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;lhs == WithNaN.defaultValue!Lhs&lt;/code&gt;, &lt;code&gt;lhs == rhs&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;lhs == WithNaN.defaultValue!Lhs&lt;/code&gt; 이면 &lt;code&gt;false&lt;/code&gt; 를 반환 하고 , 그렇지 않으면 &lt;code&gt;lhs == rhs&lt;/code&gt; 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6b531ec06a4a58e5849f228457943c156e4c192c" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;impl.alignment&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;impl.alignment&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="2321cc4ffc700d49cca6939f5369564e066de21e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;impl.allocate(s)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;impl.allocate(s)&lt;/code&gt; 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="aa2eecf7d0145c17dcaf88a38b4e20c63af0f54a" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;impl.allocateAll()&lt;/code&gt; if present, &lt;code&gt;null&lt;/code&gt; otherwise.</source>
          <target state="translated">있는 경우 &lt;code&gt;impl.allocateAll()&lt;/code&gt; 반환하고 , 그렇지 않으면 &lt;code&gt;null&lt;/code&gt; 을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5a1226dde654c77a4a80edc348feb411c699d92f" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;impl.expand(b, s)&lt;/code&gt; if defined, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">정의 된 경우 &lt;code&gt;impl.expand(b, s)&lt;/code&gt; 리턴 &lt;code&gt;false&lt;/code&gt; 그렇지 않으면 false를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="59e12fcd550e930e0350a5b77d09a89da92d5237" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;impl.goodAllocSize(s)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;impl.goodAllocSize(s)&lt;/code&gt; 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="a9ab643c87da7f4f802b4b6f621bd1cdf5d2cafd" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;impl.reallocate(b, s)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;impl.reallocate(b, s)&lt;/code&gt; 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="297f733fd8829c297b46be1b6dbcda567e215b5e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;input&lt;/code&gt; string normalized to the chosen form. Form C is used by default.</source>
          <target state="translated">선택한 형식으로 정규화 된 &lt;code&gt;input&lt;/code&gt; 문자열을 반환 합니다 . 양식 C가 기본적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f65e4dedfaf54f3f539e6a37bd3034786d7d9e2d" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 을 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="0fd314bf9de358fea53410f95a2f026dab84699d" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;parent.goodAllocSize(max(Node.sizeof, s))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;parent.goodAllocSize(max(Node.sizeof, s))&lt;/code&gt; 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="72d8fb1eb1b6183b12d4ee09405418cca7db2cac" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;roundingFunction(n)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;roundingFunction(n)&lt;/code&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a6abd4a9b1f3a77730da058c3f5c3e546560b2ae" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;str&lt;/code&gt; without its last character, if there is one. If &lt;code&gt;str&lt;/code&gt; ends with &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt;, then both are removed. If &lt;code&gt;str&lt;/code&gt; is empty, then it is returned unchanged.</source>
          <target state="translated">마지막 문자가 없으면 &lt;code&gt;str&lt;/code&gt; 을 마지막 문자없이 반환 합니다. 경우 &lt;code&gt;str&lt;/code&gt; 과 끝 &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt; 다음 모두 제거됩니다. &lt;code&gt;str&lt;/code&gt; 이 비어 있으면 변경되지 않은 상태로 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="c1c161f31f56a32344444a0b2419c5d4c9202e0b" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R&lt;/code&gt; is a bidirectional range. A bidirectional range is a forward range that also offers the primitives &lt;code&gt;back&lt;/code&gt; and &lt;code&gt;popBack&lt;/code&gt;. The following code should compile for any bidirectional range.</source>
          <target state="translated">반환 &lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;R&lt;/code&gt; 은 양방향 범위입니다. 양방향 범위는 기본 범위 &lt;code&gt;back&lt;/code&gt; 및 &lt;code&gt;popBack&lt;/code&gt; 을 제공하는 순방향 범위입니다 . 다음 코드는 양방향 범위에 대해 컴파일해야합니다.</target>
        </trans-unit>
        <trans-unit id="2f059b10cfb16deb0e5638727bb38a6b9ac52201" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R&lt;/code&gt; is a forward range. A forward range is an input range &lt;code&gt;r&lt;/code&gt; that can save &quot;checkpoints&quot; by saving &lt;code&gt;r.save&lt;/code&gt; to another value of type &lt;code&gt;R&lt;/code&gt;. Notable examples of input ranges that are</source>
          <target state="translated">반환 &lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;R&lt;/code&gt; 은 전진 기어입니다. 순방향 범위는 &lt;code&gt;r.save&lt;/code&gt; 를 &lt;code&gt;R&lt;/code&gt; 유형의 다른 값으로 저장하여 &quot;검사 점&quot;을 저장할 수 있는 입력 범위 &lt;code&gt;r&lt;/code&gt; 입니다 . 입력 범위의 주목할만한 예</target>
        </trans-unit>
        <trans-unit id="3b467330b4203940d2a4e8d37c8f0a276e36681b" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R&lt;/code&gt; is a random-access range. A random-access range is a bidirectional range that also offers the primitive &lt;code&gt;opIndex&lt;/code&gt;, OR an infinite forward range that offers &lt;code&gt;opIndex&lt;/code&gt;. In either case, the range must either offer &lt;code&gt;length&lt;/code&gt; or be infinite. The following code should compile for any random-access range.</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; 이 임의 액세스 범위 인 경우 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 . 랜덤 액세스 범위는 기본 &lt;code&gt;opIndex&lt;/code&gt; 를 제공하는 양방향 범위 또는 &lt;code&gt;opIndex&lt;/code&gt; 를 제공하는 무한 순방향 범위입니다 . 두 경우 모두 범위는 &lt;code&gt;length&lt;/code&gt; 를 제공 하거나 무한대 여야합니다 . 다음 코드는 임의 액세스 범위에 맞게 컴파일해야합니다.</target>
        </trans-unit>
        <trans-unit id="f7149a6f275dcde465622cbefd719bfe0d50441e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R&lt;/code&gt; is an infinite input range. An infinite input range is an input range that has a statically-defined enumerated member called &lt;code&gt;empty&lt;/code&gt; that is always &lt;code&gt;false&lt;/code&gt;, for example:</source>
          <target state="translated">반환 &lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;R&lt;/code&gt; 은 무한 입력 범위이다. 무한 입력 범위라는 정적으로 정의 된 열거 부재 갖는 입력 범위 &lt;code&gt;empty&lt;/code&gt; 항상 &lt;code&gt;false&lt;/code&gt; 예를 들어 :</target>
        </trans-unit>
        <trans-unit id="fbe9c1eac882faaa1dcf8e8f6dece76a2c0658c1" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R&lt;/code&gt; is an input range and has mutable elements. The following code should compile for any range with assignable elements.</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; 이 입력 범위이고 변경 가능한 요소가있는 경우 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 . 다음 코드는 할당 가능한 요소가있는 모든 범위에 대해 컴파일해야합니다.</target>
        </trans-unit>
        <trans-unit id="92a385254815ac53aec42359b923e3af33cc4d6e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R&lt;/code&gt; is an input range and has swappable elements. The following code should compile for any range with swappable elements.</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; 이 입력 범위이고 교체 가능한 요소가있는 경우 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 . 다음 코드는 교체 가능한 요소가있는 모든 범위에 대해 컴파일해야합니다.</target>
        </trans-unit>
        <trans-unit id="a58ab4a20ee140833f55835772fc3940265454f2" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R&lt;/code&gt; is an input range. An input range must define the primitives &lt;code&gt;empty&lt;/code&gt;, &lt;code&gt;popFront&lt;/code&gt;, and &lt;code&gt;front&lt;/code&gt;. The following code should compile for any input range.</source>
          <target state="translated">반환 &lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;R&lt;/code&gt; 은 입력 범위이다. 입력 범위는 프리미티브를 &lt;code&gt;empty&lt;/code&gt; , &lt;code&gt;popFront&lt;/code&gt; 및 &lt;code&gt;front&lt;/code&gt; 로 정의해야합니다 . 다음 코드는 모든 입력 범위에 대해 컴파일해야합니다.</target>
        </trans-unit>
        <trans-unit id="bf713c5ba61ab267f431d59647761609af6d7365" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R&lt;/code&gt; is an output range for elements of type &lt;code&gt;E&lt;/code&gt;. An output range is defined functionally as a range that supports the operation &lt;code&gt;put(r, e)&lt;/code&gt; as defined above.</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; 이 &lt;code&gt;E&lt;/code&gt; 유형의 요소에 대한 출력 범위 인 경우 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 . 출력 범위는 기능적으로 위에서 정의한대로 &lt;code&gt;put(r, e)&lt;/code&gt; 연산을 지원하는 범위 로 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="4f58a311b2afe419c192251695a872d19ddd072e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R&lt;/code&gt; offers a slicing operator with integral boundaries that returns a forward range type.</source>
          <target state="translated">반환 &lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;R&lt;/code&gt; 의 전진 기어의 형식을 반환하는 통합 경계가 제공하는 슬라이스 연산자.</target>
        </trans-unit>
        <trans-unit id="be2339a5e762f38e486b357b996cc8c0afa8d2ab" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if T can be iterated over using a &lt;code&gt;foreach&lt;/code&gt; loop with a single loop variable of automatically inferred type, regardless of how the &lt;code&gt;foreach&lt;/code&gt; loop is implemented. This includes ranges, structs/classes that define &lt;code&gt;opApply&lt;/code&gt; with a single loop variable, and builtin dynamic, static and associative arrays.</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; 루프의 구현 방식에 관계없이 자동 유추 유형의 단일 루프 변수가 있는 &lt;code&gt;foreach&lt;/code&gt; 루프를 사용하여 T를 반복 할 수 있으면 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 . 여기에는 단일 루프 변수로 &lt;code&gt;opApply&lt;/code&gt; 를 정의하는 범위, 구조체 / 클래스 및 내장 된 동적, 정적 및 연관 배열이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="19db28355f8adaae7fe54281e6a7169d6254e95e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if and only if</source>
          <target state="translated">다음 과 같은 경우에만 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다</target>
        </trans-unit>
        <trans-unit id="e866f26aa80809c3ecd57b506c084fc3221ce4c4" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;T&lt;/code&gt; is an instance of &lt;code&gt;std.typecons.Tuple&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 &lt;code&gt;std.typecons.Tuple&lt;/code&gt; 의 인스턴스 인 경우에만 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="91662a20ad55e5e239dca338af4ceba2ee60f7b9" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;T&lt;/code&gt;'s representation includes at least one of the following:</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 의 표현에 다음 중 하나 이상이 포함 된 경우에만 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="f748607acecd90cf140bfeadc5d3b94f97aeb287" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;needle&lt;/code&gt; can be found in &lt;code&gt; range&lt;/code&gt;. Performs &amp;Omicron;(&lt;code&gt;haystack.length&lt;/code&gt;) evaluations of &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt; range&lt;/code&gt; 에서 &lt;code&gt;needle&lt;/code&gt; 을 찾을 수있는 경우에만 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 . &lt;code&gt;pred&lt;/code&gt; 의 &amp;Omicron; ( &lt;code&gt;haystack.length&lt;/code&gt; ) 평가를 수행합니다 .</target>
        </trans-unit>
        <trans-unit id="8347b9ae1247a48045e91dfed1e8ae3a959989ce" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;this&lt;/code&gt; is in the null state.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; null 상태 인 경우에만 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="4f8617e5b686b8968816a74420a58a1764a1a20e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;value&lt;/code&gt; can be found in &lt;code&gt;range&lt;/code&gt;, which is assumed to be sorted. Performs &amp;Omicron;(&lt;code&gt;log(r.length)&lt;/code&gt;) evaluations of &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; 에서 &lt;code&gt;value&lt;/code&gt; 을 찾을 수 있고 정렬 된 것으로 가정 한 경우에만 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 . &lt;code&gt;pred&lt;/code&gt; 의 &amp;Omicron; ( &lt;code&gt;log(r.length)&lt;/code&gt; ) 평가를 수행 합니다.</target>
        </trans-unit>
        <trans-unit id="99281d985e62377f2701006146fe6b1540d92251" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if and only if any value &lt;code&gt;v&lt;/code&gt; found in the input range &lt;code&gt;range&lt;/code&gt; satisfies the predicate &lt;code&gt;pred&lt;/code&gt;. Performs (at most) &amp;Omicron;(&lt;code&gt;haystack.length&lt;/code&gt;) evaluations of &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">입력 범위 &lt;code&gt;range&lt;/code&gt; 에서 찾은 값 &lt;code&gt;v&lt;/code&gt; 가 술어 &lt;code&gt;pred&lt;/code&gt; 를 만족하는 경우에만 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 . &lt;code&gt;pred&lt;/code&gt; 의 (최대) &amp;Omicron; ( &lt;code&gt;haystack.length&lt;/code&gt; ) 평가를 수행 합니다.</target>
        </trans-unit>
        <trans-unit id="340045aa6f5419b6c3fb24aa3c63b00d481f7099" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if and only if the &lt;code&gt;VariantN&lt;/code&gt; object holds an object implicitly convertible to type &lt;code&gt;T&lt;/code&gt;. Implicit convertibility is defined as per &lt;a href=&quot;std_traits#ImplicitConversionTargets&quot;&gt;ImplicitConversionTargets&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;VariantN&lt;/code&gt; 객체가 &lt;code&gt;T&lt;/code&gt; 형으로 암시 적으로 변환 가능한 객체를 보유하는 경우에만 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 . 암시 적 태환이에 따라 정의된다 &lt;a href=&quot;std_traits#ImplicitConversionTargets&quot;&gt;ImplicitConversionTargets&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="dcf1ed6589d8954612b9eba8096e270605501dd0" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if and only if the underlying store has been allocated and initialized.</source>
          <target state="translated">기본 저장소가 할당되고 초기화 된 경우에만 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="502c0e6d9996c8a042d2f011a9cb56c056f24a67" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;Allocator&lt;/code&gt; has the alignment known at compile time; otherwise it returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Allocator&lt;/code&gt; 에게 컴파일 타임에 알려진 정렬이있는 경우 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 . 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="7fd5d1f607579d73eccdba6a3b899b6b84dae6e8" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;Task&lt;/code&gt; is finished executing.</source>
          <target state="translated">&lt;code&gt;Task&lt;/code&gt; 실행이 완료 되면 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="44dbc6fa301e5cd342bc3c260e5ae09d5b2e4f74" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the container has no elements, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">반환 &lt;code&gt;true&lt;/code&gt; 용기가 더 요소가없는 경우 &lt;code&gt;false&lt;/code&gt; , 그렇지.</target>
        </trans-unit>
        <trans-unit id="81df5d82b8bc145a8725b6ceb8cab02d15e7cc84" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the file is at end (see &lt;a href=&quot;http://cplusplus.com/reference/clibrary/cstdio/feof.html&quot;&gt;feof&lt;/a&gt;).</source>
          <target state="translated">파일이 끝나면 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 ( &lt;a href=&quot;http://cplusplus.com/reference/clibrary/cstdio/feof.html&quot;&gt;feof&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="5e8ab4a2d65c2af4af5b6475b8db6edfd8781050" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the file is opened.</source>
          <target state="translated">파일이 열려 있으면 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="ab57a086ed171ce09531125c96424a6adc9c55f8" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the heap is empty, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">반환 &lt;code&gt;true&lt;/code&gt; 힙이 비어있는 경우, &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="4abb8088d0bc3163191e40379de13d1ecff0fd98" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the range is at end. The test depends on the stopping policy.</source>
          <target state="translated">범위가 끝나면 &lt;code&gt;true&lt;/code&gt; 반환 합니다 . 테스트는 중지 정책에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="d4d3ed4fff3e3f0475cffd560a4e179d73353fb1" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;R&lt;/code&gt; is an input range that supports the &lt;code&gt;moveFront&lt;/code&gt; primitive, as well as &lt;code&gt;moveBack&lt;/code&gt; and &lt;code&gt;moveAt&lt;/code&gt; if it's a bidirectional or random access range. These may be explicitly implemented, or may work via the default behavior of the module level functions &lt;code&gt;moveFront&lt;/code&gt; and friends. The following code should compile for any range with mobile elements.</source>
          <target state="translated">반환 &lt;code&gt;true&lt;/code&gt; IFF의 &lt;code&gt;R&lt;/code&gt; 은 지지대 입력 범위 &lt;code&gt;moveFront&lt;/code&gt; 을 뿐만 아니라, 원시 &lt;code&gt;moveBack&lt;/code&gt; 및 &lt;code&gt;moveAt&lt;/code&gt; 가 양방향 또는 랜덤 액세스 범위 인 경우. 이들은 명시 적으로 구현되거나 모듈 수준 함수 &lt;code&gt;moveFront&lt;/code&gt; 및 friends 의 기본 동작을 통해 작동 할 수 있습니다 . 다음 코드는 모바일 요소가있는 모든 범위에 대해 컴파일해야합니다.</target>
        </trans-unit>
        <trans-unit id="b3920946f073a05433b592c6d88bad79ae413585" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; iff a value of type &lt;code&gt;Rhs&lt;/code&gt; can be assigned to a variable of type &lt;code&gt;Lhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Rhs&lt;/code&gt; 유형의 값을 &lt;code&gt;Lhs&lt;/code&gt; 유형의 변수에 지정할 수있는 경우 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="be6a353019484efaaa663c32966fbd10e552629c" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;val&lt;/code&gt;, if it is between &lt;code&gt;lower&lt;/code&gt; and &lt;code&gt;upper&lt;/code&gt;. Otherwise returns the nearest of the two.</source>
          <target state="translated">&lt;code&gt;lower&lt;/code&gt; 과 &lt;code&gt;upper&lt;/code&gt; 사이에 있으면 &lt;code&gt;val&lt;/code&gt; 을 반환 합니다. 그렇지 않으면 둘 중 가장 가까운 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5e77f105096e10dff599ded9fcbbd0ec957a4b39" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;x&lt;/code&gt; rounded to a &lt;code&gt;long&lt;/code&gt; value using the &lt;code&gt;FE_TONEAREST&lt;/code&gt; rounding mode. If the integer value of &lt;code&gt;x&lt;/code&gt; is greater than &lt;code&gt;long.max&lt;/code&gt;, the result is indeterminate.</source>
          <target state="translated">반환 &lt;code&gt;x&lt;/code&gt; 를 A를 반올림 &lt;code&gt;long&lt;/code&gt; 사용하여 값 &lt;code&gt;FE_TONEAREST&lt;/code&gt; 반올림 모드를. &lt;code&gt;x&lt;/code&gt; 의 정수 값 이 &lt;code&gt;long.max&lt;/code&gt; 보다 큰 경우 결과는 불확실합니다.</target>
        </trans-unit>
        <trans-unit id="191bae5fc0041b9a2f632c289a94cb1fad5c5888" translate="yes" xml:space="preserve">
          <source>Returns T if the type is one of the following forms: T delegate()[] T delegate()[dim]</source>
          <target state="translated">형식이 다음 형식 중 하나 인 경우 T를 반환합니다. T delegate () [] T delegate () [dim]</target>
        </trans-unit>
        <trans-unit id="1ae9eec54bc5f2bb441d40598d1cfc8da340394c" translate="yes" xml:space="preserve">
          <source>Returns ThreadInfo.thisInfo, since it is a thread-local instance of ThreadInfo, which is the correct behavior for this scheduler.</source>
          <target state="translated">ThreadInfo.thisInfo는이 스케줄러에 대한 올바른 동작 인 ThreadInfo의 스레드 로컬 인스턴스이므로이 정보를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="17845a5485dfed66e424a7ba2c7281d3c351c812" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;#Duration&quot;&gt;&lt;code&gt;Duration&lt;/code&gt;&lt;/a&gt; with the same number of hnsecs as this &lt;code&gt;TickDuration&lt;/code&gt;. Note that the conventional way to convert between &lt;code&gt;TickDuration&lt;/code&gt; and &lt;code&gt;Duration&lt;/code&gt; is using &lt;a href=&quot;std_conv#to&quot;&gt;&lt;code&gt;std.conv.to&lt;/code&gt;&lt;/a&gt;, e.g.: &lt;code&gt;tickDuration.to!Duration()&lt;/code&gt;</source>
          <target state="translated">이 &lt;code&gt;TickDuration&lt;/code&gt; 과 같은 hnsec 수의 &lt;a href=&quot;#Duration&quot;&gt; &lt;code&gt;Duration&lt;/code&gt; &lt;/a&gt; 을 리턴합니다 . &lt;code&gt;TickDuration&lt;/code&gt; 과 &lt;code&gt;Duration&lt;/code&gt; 사이를 변환하는 일반적인 방법은 std.conv.to 를 사용하는 &lt;a href=&quot;std_conv#to&quot;&gt; &lt;code&gt;std.conv.to&lt;/code&gt; &lt;/a&gt; . 예 : &lt;code&gt;tickDuration.to!Duration()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="632ed79f72c9b3ce7cf08f75c7d5bad1099d1a33" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; with the same std time as this one, but with &lt;a href=&quot;std_datetime_timezone#LocalTime&quot;&gt;&lt;code&gt;std.datetime.timezone.LocalTime&lt;/code&gt;&lt;/a&gt; as its time zone.</source>
          <target state="translated">리턴 &lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt; 이 하나와 같은 표준 시간 만에 &lt;a href=&quot;std_datetime_timezone#LocalTime&quot;&gt; &lt;code&gt;std.datetime.timezone.LocalTime&lt;/code&gt; &lt;/a&gt; 의 시간대로.</target>
        </trans-unit>
        <trans-unit id="eb485c36046da604f605fa92ea00c815c886fefb" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; with the same std time as this one, but with &lt;code&gt;UTC&lt;/code&gt; as its time zone.</source>
          <target state="translated">이 시간과 std 시간은 동일하지만 &lt;code&gt;UTC&lt;/code&gt; 는 표준 시간대 인 &lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="71b042c5535eceb8a0181a5120d750356c50df5f" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; with the same std time as this one, but with given time zone as its time zone.</source>
          <target state="translated">이 시간과 동일한 표준 시간을 갖지만 시간대는 시간대로 지정된 &lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt; 을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="4c42c4ffa645f14b85ca525e085d8ad6101ea548" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;#TickDuration&quot;&gt;&lt;code&gt;TickDuration&lt;/code&gt;&lt;/a&gt; with the same number of hnsecs as this &lt;code&gt;Duration&lt;/code&gt;. Note that the conventional way to convert between &lt;code&gt;Duration&lt;/code&gt; and &lt;code&gt;TickDuration&lt;/code&gt; is using &lt;a href=&quot;std_conv#to&quot;&gt;&lt;code&gt;std.conv.to&lt;/code&gt;&lt;/a&gt;, e.g.: &lt;code&gt;duration.to!TickDuration()&lt;/code&gt;</source>
          <target state="translated">반환 &lt;a href=&quot;#TickDuration&quot;&gt; &lt;code&gt;TickDuration&lt;/code&gt; &lt;/a&gt; 이 같은 hnsecs의 번호가 동일한 &lt;code&gt;Duration&lt;/code&gt; . &lt;code&gt;Duration&lt;/code&gt; 과 &lt;code&gt;TickDuration&lt;/code&gt; 사이를 변환하는 일반적인 방법 은 std.conv.to 를 사용하는 &lt;a href=&quot;std_conv#to&quot;&gt; &lt;code&gt;std.conv.to&lt;/code&gt; &lt;/a&gt; . 예를 들어 &lt;code&gt;duration.to!TickDuration()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b5ea13434018601f6e922ebff9fdd27c660b68bd" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;#TimeZone&quot;&gt;&lt;code&gt;TimeZone&lt;/code&gt;&lt;/a&gt; with the give name per the TZ Database. The time zone information is fetched from the TZ Database time zone files in the given directory.</source>
          <target state="translated">TZ 데이터베이스 당 이름을 가진 &lt;a href=&quot;#TimeZone&quot;&gt; &lt;code&gt;TimeZone&lt;/code&gt; &lt;/a&gt; 을 리턴합니다 . 시간대 정보는 제공된 디렉토리의 TZ 데이터베이스 시간대 파일에서 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="09668336c60b52b4ed1aa2667de901b8a5329540" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;#TimeZone&quot;&gt;&lt;code&gt;TimeZone&lt;/code&gt;&lt;/a&gt; with the given name per the Windows time zone names. The time zone information is fetched from the Windows registry.</source>
          <target state="translated">Windows 표준 시간대 이름별로 지정된 이름 의 &lt;a href=&quot;#TimeZone&quot;&gt; &lt;code&gt;TimeZone&lt;/code&gt; &lt;/a&gt; 을 반환 합니다. 표준 시간대 정보는 Windows 레지스트리에서 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="90051d586b426535fb226d796a0084dfa240e45a" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt; of 0.</source>
          <target state="translated">&lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; &lt;/a&gt; 의 0을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="6f58268073e6b6ab3643180e88e877c65456ef76" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;std_datetime_date#Date&quot;&gt;&lt;code&gt;std.datetime.date.Date&lt;/code&gt;&lt;/a&gt; equivalent to this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">리턴 &lt;a href=&quot;std_datetime_date#Date&quot;&gt; &lt;code&gt;std.datetime.date.Date&lt;/code&gt; 의&lt;/a&gt; 이 동등 &lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="215ca70788743fb43bffe630def0286fd5de28ba" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;std_datetime_date#DateTime&quot;&gt;&lt;code&gt;std.datetime.date.DateTime&lt;/code&gt;&lt;/a&gt; equivalent to this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">리턴 &lt;a href=&quot;std_datetime_date#DateTime&quot;&gt; &lt;code&gt;std.datetime.date.DateTime&lt;/code&gt; 의&lt;/a&gt; 이 동등 &lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f45b89cde1bd0f7cfd15e8eea90e50fcbe5d6c6a" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;std_datetime_date#TimeOfDay&quot;&gt;&lt;code&gt;std.datetime.date.TimeOfDay&lt;/code&gt;&lt;/a&gt; equivalent to this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">리턴 &lt;a href=&quot;std_datetime_date#TimeOfDay&quot;&gt; &lt;code&gt;std.datetime.date.TimeOfDay&lt;/code&gt; 의&lt;/a&gt; 이 동등 &lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a275216af63e773f0fb7362f374c9e89a80a46d3" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;AliasSeq&lt;/code&gt; of the template arguments used to instantiate &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 인스턴스화에 사용 된 템플릿 인수 의 &lt;code&gt;AliasSeq&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="1aa0bc9c6fc6bf59c35507a0a3dd271e25109fab" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;BOMSeq&lt;/code&gt; for a given &lt;code&gt;input&lt;/code&gt;. If no &lt;code&gt;BOM&lt;/code&gt; is present the &lt;code&gt;BOMSeq&lt;/code&gt; for &lt;code&gt;BOM.none&lt;/code&gt; is returned. The &lt;code&gt;BOM&lt;/code&gt; sequence at the beginning of the range will not be comsumed from the passed range. If you pass a reference type range make sure that &lt;code&gt;save&lt;/code&gt; creates a deep copy.</source>
          <target state="translated">주어진 &lt;code&gt;input&lt;/code&gt; 대한 &lt;code&gt;BOMSeq&lt;/code&gt; 를 반환합니다 . &lt;code&gt;BOM&lt;/code&gt; 이 없으면 &lt;code&gt;BOMSeq&lt;/code&gt; 대한 &lt;code&gt;BOM.none&lt;/code&gt; 가 리턴됩니다. &lt;code&gt;BOM&lt;/code&gt; 의 범위의 시작 시퀀스가 전달 범위에서 소모되는하지 않는다. 참조 유형 범위를 통과하면 &lt;code&gt;save&lt;/code&gt; 가 깊은 사본을 작성 하는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="271a5129a4614264e0826270bc01f1ec9a6666bf" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;timespec&lt;/code&gt; which represents this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">반환 &lt;code&gt;timespec&lt;/code&gt; 이 대표 &lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a975692c0ad818e3dbbf204ae9adcd7dc55e218b" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;timeval&lt;/code&gt; which represents this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">리턴 &lt;code&gt;timeval&lt;/code&gt; 형 이 대표 &lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ca13d4c66a0e5eb5f62a8c851e391479433ab671" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;tm&lt;/code&gt; which represents this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 &lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt; 을 나타내는 &lt;code&gt;tm&lt;/code&gt; 을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="0b68167263e8112959a914b6724f23bf4be1a30c" translate="yes" xml:space="preserve">
          <source>Returns a C-style zero-terminated string equivalent to &lt;code&gt;str&lt;/code&gt;. &lt;code&gt;str&lt;/code&gt; must not contain embedded &lt;code&gt;'\0'&lt;/code&gt;'s as any C function will treat the first &lt;code&gt;'\0'&lt;/code&gt; that it sees as the end of the string. If &lt;code&gt;str.empty&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, then a string containing only &lt;code&gt;'\0'&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; 과 동등한 C 스타일의 0으로 끝나는 문자열을 반환합니다 . C 함수는 문자열의 끝으로 보이는 첫 번째 &lt;code&gt;'\0'&lt;/code&gt; 을 처리하므로 &lt;code&gt;str&lt;/code&gt; 에는 포함 된 &lt;code&gt;'\0'&lt;/code&gt; 포함되어서는 안됩니다 . 경우 &lt;code&gt;str.empty&lt;/code&gt; 이 있다 &lt;code&gt;true&lt;/code&gt; , 다음 문자열만을 포함하는 &lt;code&gt;'\0'&lt;/code&gt; 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="22582f61782b071673de2012022abb41b3a88086" translate="yes" xml:space="preserve">
          <source>Returns a Condition analog that yields when wait or notify is called.</source>
          <target state="translated">대기 또는 통지가 호출 될 때 생성되는 조건 아날로그를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="391290c4a753b240f1d69b198a696aac936ffc55" translate="yes" xml:space="preserve">
          <source>Returns a GC-allocated string with the formatting result.</source>
          <target state="translated">서식이 지정된 GC 할당 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2d011ef5c1a2c68b3a67ff25c14a92bd9bd1228f" translate="yes" xml:space="preserve">
          <source>Returns a ThreadInfo instance specific to the calling Fiber if the Fiber was created by this dispatcher, otherwise it returns ThreadInfo.thisInfo.</source>
          <target state="translated">이 디스패처가 파이버를 작성한 경우 호출하는 파이버에 특정한 ThreadInfo 인스턴스를 리턴하고, 그렇지 않으면 ThreadInfo.thisInfo를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="c5dcf9c5990afb4cfa134627952c63721d7c2b80" translate="yes" xml:space="preserve">
          <source>Returns a bit field representing all block attributes set for the memory referenced by p. If p references memory not originally allocated by this garbage collector, points to the interior of a memory block, or if p is null, zero will be returned.</source>
          <target state="translated">p가 참조하는 메모리에 대해 설정된 모든 블록 속성을 나타내는 비트 필드를 리턴합니다. p가이 가비지 수집기에 의해 원래 할당되지 않은 메모리를 참조하면 메모리 블록의 내부를 가리 키거나 p가 null이면 0이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="254edba3b71eec2c6ba87bea00c8d6db0a877e9f" translate="yes" xml:space="preserve">
          <source>Returns a bool &lt;code&gt;true&lt;/code&gt; if all of the arguments compile (are semantically correct). The arguments can be symbols, types, or expressions that are syntactically correct. The arguments cannot be statements or declarations.</source>
          <target state="translated">모든 인수가 컴파일 된 경우 (부적 적으로 올바른 경우) 부울 &lt;code&gt;true&lt;/code&gt; 를 리턴합니다 . 인수는 구문 상 올바른 기호, 유형 또는 표현식 일 수 있습니다. 인수는 진술이나 선언이 될 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="ffd13d4440c5733a6fe8f0131e774995e4323d49" translate="yes" xml:space="preserve">
          <source>Returns a chunk of memory of size &lt;code&gt;n&lt;/code&gt; It finds the first node in the &lt;code&gt;AlignedBlockNode&lt;/code&gt; list which has available memory, and moves it to the front of the list.</source>
          <target state="translated">크기가 &lt;code&gt;n&lt;/code&gt; 인 메모리 청크를 반환합니다. 사용 가능한 메모리가 있는 &lt;code&gt;AlignedBlockNode&lt;/code&gt; 목록 에서 첫 번째 노드를 찾아서 목록의 맨 앞으로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="ca5f3b79353818150cbba86f5b049bf05770db58" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">의 카피를 돌려줍니다 &lt;code&gt;this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2fe881c498a908bed43ec9dadc634df537aa888f" translate="yes" xml:space="preserve">
          <source>Returns a copy of the front of the heap, which is the largest element according to &lt;code&gt;less&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;less&lt;/code&gt; 에 따라 가장 큰 요소 인 힙 앞의 사본을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="6286d1351fccddad37f0656a2a2cd1cc7539ba85" translate="yes" xml:space="preserve">
          <source>Returns a copy of the input in a newly allocated dynamic array.</source>
          <target state="translated">새로 할당 된 동적 배열에서 입력 사본을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="60d8d877d89b38bd95e1988b71e936bdc4210ca0" translate="yes" xml:space="preserve">
          <source>Returns a copy of the underlying value.</source>
          <target state="translated">기본 값의 복사본을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3a7d4c032948f3c6a5acf16d0e41938ff551815c" translate="yes" xml:space="preserve">
          <source>Returns a delegate which returns the next time point which is the given duration later.</source>
          <target state="translated">주어진 시간 인 다음 시점을 반환하는 델리게이트를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="bbe4a37c066b825fa1932453b9b1f48a3c29ebb9" translate="yes" xml:space="preserve">
          <source>Returns a delegate which returns the next time point which is the given number of years, month, and duration later.</source>
          <target state="translated">주어진 연도, 월 및 기간 인 다음 시점을 반환하는 대리자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c953b23de84d9eb4ce510c7dbce5e764946b8318" translate="yes" xml:space="preserve">
          <source>Returns a delegate which returns the next time point with the given &lt;code&gt;DayOfWeek&lt;/code&gt; in a range.</source>
          <target state="translated">지정된 &lt;code&gt;DayOfWeek&lt;/code&gt; 를 사용하여 다음 시점을 범위에서 반환하는 대리자를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="35590143903b1dbbbd2749e2bbedfd5bb37ef887" translate="yes" xml:space="preserve">
          <source>Returns a delegate which returns the next time point with the given month which would be reached by adding months to the given time point.</source>
          <target state="translated">주어진 시점에 월을 추가하여 도달하는 주어진 달의 다음 시점을 반환하는 델리게이트를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="aef8aee5d89e4d89effa37afed2b636d43a3cb23" translate="yes" xml:space="preserve">
          <source>Returns a duplicate of the container.</source>
          <target state="translated">컨테이너의 복제본을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2284455b20a74066c9b69f2df1803a0a15701997" translate="yes" xml:space="preserve">
          <source>Returns a duplicate of the heap. The &lt;code&gt;dup&lt;/code&gt; method is available only if the underlying store supports it.</source>
          <target state="translated">힙 복제본을 반환합니다. &lt;code&gt;dup&lt;/code&gt; 방법은 기본 저장소가 지원하는 경우에만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6516a2d44fbc6e2b5df03f5721ee57c58059e4d8" translate="yes" xml:space="preserve">
          <source>Returns a dynamic array, the elements of which are the keys in the associative array.</source>
          <target state="translated">요소가 연관 배열의 키인 동적 배열을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="b196a2fb8c2fc705d4c1259ee071e1f46e4c626a" translate="yes" xml:space="preserve">
          <source>Returns a dynamic array, the elements of which are the values in the associative array.</source>
          <target state="translated">요소가 연관 배열의 값인 동적 배열을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="11bef7ff752edd080a72e6a67e1c0c034d43ed83" translate="yes" xml:space="preserve">
          <source>Returns a dynamically-typed &lt;code&gt;CAllocator&lt;/code&gt; built around a given statically- typed allocator &lt;code&gt;a&lt;/code&gt; of type &lt;code&gt;A&lt;/code&gt;. Passing a pointer to the allocator creates a dynamic allocator around the allocator pointed to by the pointer, without attempting to copy or move it. Passing the allocator by value or reference behaves as follows.</source>
          <target state="translated">정적 유형이 지정된 할당 자 &lt;code&gt;a&lt;/code&gt; 유형 &lt;code&gt;A&lt;/code&gt; 주위에 빌드 된 동적 유형의 &lt;code&gt;CAllocator&lt;/code&gt; 를 리턴합니다 . 할당 자에 포인터를 전달하면 복사 또는 이동을 시도하지 않고 포인터가 가리키는 할당 자 주위에 동적 할당자를 만듭니다. 값 또는 참조로 할당자를 전달하면 다음과 같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="cc9a6befd23b881d297f7e49adb40f16660fb0b3" translate="yes" xml:space="preserve">
          <source>Returns a dynamically-typed &lt;code&gt;CSharedAllocator&lt;/code&gt; built around a given statically- typed allocator &lt;code&gt;a&lt;/code&gt; of type &lt;code&gt;A&lt;/code&gt;. Passing a pointer to the allocator creates a dynamic allocator around the allocator pointed to by the pointer, without attempting to copy or move it. Passing the allocator by value or reference behaves as follows.</source>
          <target state="translated">&lt;code&gt;A&lt;/code&gt; 유형 의 지정된 정적 유형 할당 자 &lt;code&gt;a&lt;/code&gt; 주위에 빌드 된 동적 유형 &lt;code&gt;CSharedAllocator&lt;/code&gt; 를 리턴합니다 . 할당 자에 포인터를 전달하면 복사 또는 이동을 시도하지 않고 포인터가 가리키는 할당 자 주위에 동적 할당자를 만듭니다. 값 또는 참조로 할당자를 전달하면 다음과 같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="61a5d295f782705eb1946d051714c5c361203f4e" translate="yes" xml:space="preserve">
          <source>Returns a foreachable struct which can bidirectionally iterate over all code points in a string.</source>
          <target state="translated">문자열의 모든 코드 포인트를 양방향으로 반복 할 수있는 foreachable 구조체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7fa0f26c7b91c94b3e5dbd456e87a043fa5e41de" translate="yes" xml:space="preserve">
          <source>Returns a foreachable struct which can bidirectionally iterate over all code units in a code point.</source>
          <target state="translated">코드 포인트의 모든 코드 단위를 양방향으로 반복 할 수있는 foreachable 구조체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b76c0e62da6014dae96a44335ca5d6aeb5506838" translate="yes" xml:space="preserve">
          <source>Returns a forward range over the key value pairs of the associative array.</source>
          <target state="translated">연관 배열의 키 값 쌍에 대한 포워드 범위를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="7b5dba5e7f3a556437ea8f8c8d90dbd433af0a1f" translate="yes" xml:space="preserve">
          <source>Returns a forward range over the keys of the associative array.</source>
          <target state="translated">연관 배열의 키에 대한 포워드 범위를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="84185358b377de7a023911467b7342401fc77869" translate="yes" xml:space="preserve">
          <source>Returns a forward range over the values of the associative array.</source>
          <target state="translated">연관 배열의 값에 대한 포워드 범위를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="3fffeecef265b33c3680f96e5357d15268e0b6f0" translate="yes" xml:space="preserve">
          <source>Returns a forward range suitable for use as a</source>
          <target state="translated">로 사용하기에 적합한 앞으로 범위를 반환합니다</target>
        </trans-unit>
        <trans-unit id="9cb54cf24074402c237bfc551792b63c2a094850" translate="yes" xml:space="preserve">
          <source>Returns a full &lt;a href=&quot;#Canonical%20decomposition&quot;&gt;Canonical&lt;/a&gt; (by default) or &lt;a href=&quot;#Compatibility%20decomposition&quot;&gt;Compatibility&lt;/a&gt; decomposition of &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt;&lt;code&gt;ch&lt;/code&gt;. If no decomposition is available returns a &lt;a href=&quot;#Grapheme&quot;&gt;&lt;code&gt;Grapheme&lt;/code&gt;&lt;/a&gt; with the &lt;code&gt;ch&lt;/code&gt; itself.</source>
          <target state="translated">&lt;a href=&quot;#Character&quot;&gt;문자 &lt;/a&gt; &lt;code&gt;ch&lt;/code&gt; 의 전체 &lt;a href=&quot;#Canonical%20decomposition&quot;&gt;정식&lt;/a&gt; (기본) 또는 &lt;a href=&quot;#Compatibility%20decomposition&quot;&gt;호환성&lt;/a&gt; 분해를 리턴합니다 . 분해 할 수없는 경우 &lt;code&gt;ch&lt;/code&gt; 자체 가있는 &lt;a href=&quot;#Grapheme&quot;&gt; &lt;code&gt;Grapheme&lt;/code&gt; &lt;/a&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="ce840e5c8fdaeae1dd38ef04182625583e131205" translate="yes" xml:space="preserve">
          <source>Returns a lazily initialized global instantiation of &lt;code&gt;TaskPool&lt;/code&gt;. This function can safely be called concurrently from multiple non-worker threads. The worker threads in this pool are daemon threads, meaning that it is not necessary to call &lt;code&gt;TaskPool.stop&lt;/code&gt; or &lt;code&gt;TaskPool.finish&lt;/code&gt; before terminating the main thread.</source>
          <target state="translated">지연 초기화 된 &lt;code&gt;TaskPool&lt;/code&gt; 전역 인스턴스화를 반환합니다 . 이 기능은 여러 비 작업 스레드에서 동시에 안전하게 호출 할 수 있습니다. 이 풀의 작업자 스레드는 데몬 스레드이므로 기본 스레드를 종료하기 전에 &lt;code&gt;TaskPool.stop&lt;/code&gt; 또는 &lt;code&gt;TaskPool.finish&lt;/code&gt; 를 호출 할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="d07334167a74510fcb87a0bbe4b54cb005c1171d" translate="yes" xml:space="preserve">
          <source>Returns a list of the names of the time zones installed on the system.</source>
          <target state="translated">시스템에 설치된 시간대 이름 목록을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="3fb9a85a3bd5fb10fa0810307dc66461f5fc1035" translate="yes" xml:space="preserve">
          <source>Returns a list of the names of the time zones installed on the system. The list returned by WindowsTimeZone contains the Windows TZ names, not the TZ Database names. However, &lt;code&gt;TimeZone.getinstalledTZNames&lt;/code&gt; will return the TZ Database names which are equivalent to the Windows TZ names.</source>
          <target state="translated">시스템에 설치된 시간대 이름 목록을 리턴합니다. WindowsTimeZone에서 반환 한 목록에는 TZ 데이터베이스 이름이 아니라 Windows TZ 이름이 포함됩니다. 그러나 &lt;code&gt;TimeZone.getinstalledTZNames&lt;/code&gt; 는 Windows TZ 이름과 동일한 TZ 데이터베이스 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7990a271946971aeb81924fa28441f7c1a9d6465" translate="yes" xml:space="preserve">
          <source>Returns a malloc()'ed string that MUST be curl_free()ed after usage is complete. DEPRECATED - see lib/README.curlx</source>
          <target state="translated">사용이 완료된 후 curl_free ()되어야하는 malloc () 문자열을 반환합니다. 더 이상 사용되지 않음-lib / README.curlx 참조</target>
        </trans-unit>
        <trans-unit id="3e1fa45142e060d0d318087ea05ea86bb02a6066" translate="yes" xml:space="preserve">
          <source>Returns a new &lt;a href=&quot;#Appender&quot;&gt;&lt;code&gt;Appender&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#RefAppender&quot;&gt;&lt;code&gt;RefAppender&lt;/code&gt;&lt;/a&gt; initialized with a given array.</source>
          <target state="translated">지정된 배열로 초기화 된 새로운 &lt;a href=&quot;#Appender&quot;&gt; &lt;code&gt;Appender&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#RefAppender&quot;&gt; &lt;code&gt;RefAppender&lt;/code&gt; 를&lt;/a&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e52e719b9f80569172479c3836f702a9fcb768c9" translate="yes" xml:space="preserve">
          <source>Returns a new &lt;code&gt;DList&lt;/code&gt; that's the concatenation of &lt;code&gt;this&lt;/code&gt; and its argument &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 과 인수 &lt;code&gt;rhs&lt;/code&gt; 의 연결 인 새로운 &lt;code&gt;DList&lt;/code&gt; 를 돌려 줍니다 .</target>
        </trans-unit>
        <trans-unit id="229384c3a62e6e998762e855ba510b0f93fb0231" translate="yes" xml:space="preserve">
          <source>Returns a new &lt;code&gt;DList&lt;/code&gt; that's the concatenation of the argument &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">인수 &lt;code&gt;lhs&lt;/code&gt; 와 &lt;code&gt;this&lt;/code&gt; 의 연결 인 새 &lt;code&gt;DList&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="fcd633998e8e6235f98b482e529ca8ae6f2d5f66" translate="yes" xml:space="preserve">
          <source>Returns a new &lt;code&gt;SList&lt;/code&gt; that's the concatenation of &lt;code&gt;this&lt;/code&gt; and its argument. &lt;code&gt;opBinaryRight&lt;/code&gt; is only defined if &lt;code&gt;Stuff&lt;/code&gt; does not define &lt;code&gt;opBinary&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 과 그 인수를 연결 한 새로운 &lt;code&gt;SList&lt;/code&gt; 를 돌려 줍니다 . &lt;code&gt;opBinaryRight&lt;/code&gt; 는 &lt;code&gt;Stuff&lt;/code&gt; 가 &lt;code&gt;opBinary&lt;/code&gt; 를 정의하지 않은 경우에만 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="53d930f3d86b0f613238f01d6141ea696149dd69" translate="yes" xml:space="preserve">
          <source>Returns a new array of type &lt;code&gt;T&lt;/code&gt; allocated on the garbage collected heap without initializing its elements. This can be a useful optimization if every element will be immediately initialized. &lt;code&gt;T&lt;/code&gt; may be a multidimensional array. In this case sizes may be specified for any number of dimensions from 0 to the number in &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">요소를 초기화하지 않고 가비지 수집 힙에 할당 된 &lt;code&gt;T&lt;/code&gt; 유형의 새 배열을 반환합니다 . 모든 요소가 즉시 초기화되는 경우 유용한 최적화가 될 수 있습니다. &lt;code&gt;T&lt;/code&gt; 는 다차원 어레이 일 수있다. 이 경우 크기는 0에서 &lt;code&gt;T&lt;/code&gt; 의 숫자까지 임의의 수의 차원에 대해 지정 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b9a0023d51da997f35311b6d254c0383fc9e1dc6" translate="yes" xml:space="preserve">
          <source>Returns a new array of type &lt;code&gt;T&lt;/code&gt; allocated on the garbage collected heap.</source>
          <target state="translated">가비지 수집 힙에 할당 된 &lt;code&gt;T&lt;/code&gt; 유형의 새 배열을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="abf7392fba549c659e501fb5a0955fa6c151e1c3" translate="yes" xml:space="preserve">
          <source>Returns a new array of type &lt;code&gt;T&lt;/code&gt; without initializing its elements.</source>
          <target state="translated">요소를 초기화하지 않고 &lt;code&gt;T&lt;/code&gt; 유형의 새 배열을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ec8b7d3a89d7573b011ce662e56a466678333f35" translate="yes" xml:space="preserve">
          <source>Returns a new array of type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 형의 새로운 배열을 돌려 줍니다.</target>
        </trans-unit>
        <trans-unit id="fb460665d1aa8cdb9eb35459df7f67c5dae4e9fd" translate="yes" xml:space="preserve">
          <source>Returns a new array with a given slice replaced.</source>
          <target state="translated">주어진 슬라이스가 교체 된 새 배열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f398156d6d51631038e97ecfa3f6419a052d13bb" translate="yes" xml:space="preserve">
          <source>Returns a new array with all occurrences of a certain subrange replaced.</source>
          <target state="translated">특정 하위 범위의 모든 항목이 교체 된 새 배열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="32eea38fcf0e52b318aafbc12837466730e446ea" translate="yes" xml:space="preserve">
          <source>Returns a new array with the first occurrence of a certain subrange replaced.</source>
          <target state="translated">특정 하위 범위가 처음으로 교체 된 새 배열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9f0b4b62fab60c86a583814c0b0cddc8d07616c9" translate="yes" xml:space="preserve">
          <source>Returns a new array with the last occurrence of a certain subrange replaced.</source>
          <target state="translated">특정 하위 범위의 마지막 항목이 바뀐 새 배열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c3459f8069902eb0604e4fe85b03e28ea6da536c" translate="yes" xml:space="preserve">
          <source>Returns a newly allocated associative array from a range of key/value tuples or from a range of keys and a range of values.</source>
          <target state="translated">키 / 값 튜플 범위 또는 키 범위와 값 범위에서 새로 할당 된 연관 배열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ff59becca2ed801e30637f44c1bffce2ee1a27f6" translate="yes" xml:space="preserve">
          <source>Returns a newly allocated associative array from a range of key/value tuples.</source>
          <target state="translated">키 / 값 튜플 범위에서 새로 할당 된 연관 배열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b90c85529c4d19d03fce05ef3fb359ef230d8513" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the first element of the array.</source>
          <target state="translated">배열의 첫 번째 요소에 대한 포인터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f98a854ad963487f4f4ca41ba1b7b32cdd1b8cbf" translate="yes" xml:space="preserve">
          <source>Returns a random, uniformly chosen, element &lt;code&gt;e&lt;/code&gt; from the supplied &lt;code&gt;Range range&lt;/code&gt;. If no random number generator is passed, the default &lt;code&gt;rndGen&lt;/code&gt; is used.</source>
          <target state="translated">제공된 &lt;code&gt;Range range&lt;/code&gt; 에서 무작위로 균일하게 선택된 요소 &lt;code&gt;e&lt;/code&gt; 를 반환합니다 . 난수 생성기가 전달되지 않으면 기본 &lt;code&gt;rndGen&lt;/code&gt; 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="bf8faeebafd2d68821de1399878ebab570453980" translate="yes" xml:space="preserve">
          <source>Returns a range iterating over the entire container, in a container-defined order.</source>
          <target state="translated">컨테이너 정의 순서대로 전체 컨테이너에서 반복되는 범위를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c77aca72cb7dd37b81c1c03fc57dea6c00d19c65" translate="yes" xml:space="preserve">
          <source>Returns a range of all elements in &lt;code&gt;c&lt;/code&gt; that are equal to &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 에서 &lt;code&gt;v&lt;/code&gt; 와 동일한 모든 요소의 범위를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="7b408d250a95e25681c58f0fc9865b83e81a9a32" translate="yes" xml:space="preserve">
          <source>Returns a range of all elements strictly greater than &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;v&lt;/code&gt; 보다 큰 모든 요소의 범위를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="b8b0b648f4bf17a28c57ddf30b04786a54a23191" translate="yes" xml:space="preserve">
          <source>Returns a range of all elements strictly less than &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;v&lt;/code&gt; 보다 엄격히 작은 모든 요소의 범위를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="78abb6e57a58770219e4d3f846f04d97912f8a9b" translate="yes" xml:space="preserve">
          <source>Returns a range of subranges of elements that are equivalent according to the sorting relation.</source>
          <target state="translated">정렬 관계에 따라 동등한 요소의 하위 범위 범위를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6c2a75d33659bb11b9aeec9563041ac1635f2987" translate="yes" xml:space="preserve">
          <source>Returns a range that iterates over all elements of the container, in forward order.</source>
          <target state="translated">컨테이너의 모든 요소를 ​​순회하는 범위를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4effc5e0a10068b4c02001d5d1ad7c0cc2ba897f" translate="yes" xml:space="preserve">
          <source>Returns a range view of the values for all threads, which can be used to further process the results of each thread after running the parallel part of your algorithm. Do not use this method in the parallel portion of your algorithm.</source>
          <target state="translated">알고리즘의 병렬 부분을 실행 한 후 각 스레드의 결과를 추가로 처리하는 데 사용할 수있는 모든 스레드 값의 범위보기를 리턴합니다. 알고리즘의 병렬 부분에서는이 방법을 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="c965d435a8b64438b242d03d8b509ef207bed8c4" translate="yes" xml:space="preserve">
          <source>Returns a range which iterates backwards over the interval, starting at &lt;code&gt;end&lt;/code&gt;, using func to generate each successive time point.</source>
          <target state="translated">func을 사용하여 각 연속적인 시점을 생성하는 &lt;code&gt;end&lt;/code&gt; 에서 시작하여 간격을 거꾸로 반복하는 범위를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="eefca2b162eae18d961fd1f9e644b6e3aef6c85c" translate="yes" xml:space="preserve">
          <source>Returns a range which iterates forward over the interval, starting at &lt;code&gt;begin&lt;/code&gt;, using func to generate each successive time point.</source>
          <target state="translated">func을 사용하여 각 연속적인 시점을 생성하여 &lt;code&gt;begin&lt;/code&gt; 에서 시작 하여 간격 동안 앞으로 반복되는 범위를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ec14721454b609e82da95155553e35ebce3fc48a" translate="yes" xml:space="preserve">
          <source>Returns a range with all occurrences of &lt;code&gt;substs&lt;/code&gt; in &lt;code&gt;r&lt;/code&gt;. replaced with their substitution.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; 에 모든 &lt;code&gt;substs&lt;/code&gt; 된 범위를 반환합니다 . 대체로 대체되었습니다.</target>
        </trans-unit>
        <trans-unit id="336708258920b687458732523280df42e0072783" translate="yes" xml:space="preserve">
          <source>Returns a range with at most one element; for example, &lt;code&gt;takeOne([42, 43, 44])&lt;/code&gt; returns a range consisting of the integer &lt;code&gt;42&lt;/code&gt;. Calling &lt;code&gt;popFront()&lt;/code&gt; off that range renders it empty.</source>
          <target state="translated">최대 하나의 요소가있는 범위를 반환합니다. 예를 들어 &lt;code&gt;takeOne([42, 43, 44])&lt;/code&gt; 은 정수 &lt;code&gt;42&lt;/code&gt; 로 구성된 범위를 반환합니다 . 해당 범위에서 &lt;code&gt;popFront()&lt;/code&gt; 호출 하면 해당 범위가 비워집니다.</target>
        </trans-unit>
        <trans-unit id="c4e2977b61b18f0458c1a4e9748ec5cc5c064c39" translate="yes" xml:space="preserve">
          <source>Returns a reference to the payload. If (autoInit == RefCountedAutoInitialize.yes), calls &lt;code&gt; refCountedStore.ensureInitialized&lt;/code&gt;. Otherwise, just issues &lt;code&gt; assert(refCountedStore.isInitialized)&lt;/code&gt;. Used with &lt;code&gt;alias refCountedPayload this;&lt;/code&gt;, so callers can just use the &lt;code&gt;RefCounted&lt;/code&gt; object as a &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">페이로드에 대한 참조를 리턴합니다. (autoInit == RefCountedAutoInitialize.yes)이면 &lt;code&gt; refCountedStore.ensureInitialized&lt;/code&gt; 를 호출 합니다 . 그렇지 않으면, &lt;code&gt; assert(refCountedStore.isInitialized)&lt;/code&gt; 만 발행하십시오 . &lt;code&gt;alias refCountedPayload this;&lt;/code&gt; 와 함께 사용 ; 따라서 호출자는 &lt;code&gt;RefCounted&lt;/code&gt; 객체를 &lt;code&gt;T&lt;/code&gt; 로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9045b10d14b481e711cada67087362b1682054da" translate="yes" xml:space="preserve">
          <source>Returns a slice of the range. Defined only if all range define slicing.</source>
          <target state="translated">범위의 슬라이스를 리턴합니다. 모든 범위가 슬라이싱을 정의하는 경우에만 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="f64251d3015e05479b9426febfe95d2f0401ef9d" translate="yes" xml:space="preserve">
          <source>Returns a static ascii string of the libcurl version.</source>
          <target state="translated">libcurl 버전의 정적 ASCII 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="beccf3ad45d4948b358959975f27759c4561af07" translate="yes" xml:space="preserve">
          <source>Returns a string of all available CLI options for the current targetOS. Options are separated by newlines.</source>
          <target state="translated">현재 targetOS에 사용 가능한 모든 CLI 옵션의 문자열을 리턴합니다. 옵션은 개행으로 구분됩니다.</target>
        </trans-unit>
        <trans-unit id="3158e51069f70338fe6f0f3c3a6731a2ead51cfd" translate="yes" xml:space="preserve">
          <source>Returns a string representation of this CData section</source>
          <target state="translated">이 CData 섹션의 문자열 표현을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="97f28b169cc066e4b567fd10b57b028837bab1c0" translate="yes" xml:space="preserve">
          <source>Returns a string representation of this ProcessingInstruction</source>
          <target state="translated">이 ProcessingInstruction의 캐릭터 라인 표현을 돌려줍니다</target>
        </trans-unit>
        <trans-unit id="c0855bdf6807250230f6b7b764ed38b8f25f5814" translate="yes" xml:space="preserve">
          <source>Returns a string representation of this Text section</source>
          <target state="translated">이 텍스트 섹션의 캐릭터 라인 표현을 돌려줍니다</target>
        </trans-unit>
        <trans-unit id="7dc7a2b9391879e36c5974df49f174a86ccc960d" translate="yes" xml:space="preserve">
          <source>Returns a string representation of this XmlInstruction</source>
          <target state="translated">이 XmlInstruction의 문자열 표현을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="855a592ad52a573b2270f2cd4e9eb6e24d8b6d14" translate="yes" xml:space="preserve">
          <source>Returns a string representation of this comment</source>
          <target state="translated">이 주석의 캐릭터 라인 표현을 돌려줍니다</target>
        </trans-unit>
        <trans-unit id="3c9e30fc57574cb8186eb91b3136b92cd5023cc1" translate="yes" xml:space="preserve">
          <source>Returns a string representation of this item</source>
          <target state="translated">이 아이템의 캐릭터 라인 표현을 돌려줍니다</target>
        </trans-unit>
        <trans-unit id="90bd32093189453221779ee2ccd338845cc232a4" translate="yes" xml:space="preserve">
          <source>Returns a temporary file by calling &lt;a href=&quot;http://cplusplus.com/reference/clibrary/cstdio/tmpfile.html&quot;&gt;tmpfile&lt;/a&gt;. Note that the created file has no &lt;a href=&quot;#name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://cplusplus.com/reference/clibrary/cstdio/tmpfile.html&quot;&gt;tmpfile&lt;/a&gt; 을 호출하여 임시 파일을 리턴합니다 . 작성된 파일에는 &lt;a href=&quot;#name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 이 없습니다 .</target>
        </trans-unit>
        <trans-unit id="d8c8af7d3856b0bbd9bc3cc92813854b9973b7c1" translate="yes" xml:space="preserve">
          <source>Returns a tuple &lt;code&gt;r&lt;/code&gt; such that &lt;code&gt;r[0]&lt;/code&gt; is the same as the result of &lt;code&gt;lowerBound(value)&lt;/code&gt;, &lt;code&gt;r[1]&lt;/code&gt; is the same as the result of &lt;code&gt;equalRange(value)&lt;/code&gt;, and &lt;code&gt;r[2]&lt;/code&gt; is the same as the result of &lt;code&gt;upperBound(value)&lt;/code&gt;. The call is faster than computing all three separately. Uses a search schedule similar to &lt;code&gt;equalRange&lt;/code&gt;. Completes the entire search in &amp;Omicron;(&lt;code&gt;log(n)&lt;/code&gt;) time.</source>
          <target state="translated">반환 튜플 &lt;code&gt;r&lt;/code&gt; 되도록 &lt;code&gt;r[0]&lt;/code&gt; 의 결과와 동일한 &lt;code&gt;lowerBound(value)&lt;/code&gt; , &lt;code&gt;r[1]&lt;/code&gt; 의 결과와 동일한 &lt;code&gt;equalRange(value)&lt;/code&gt; 하고, &lt;code&gt;r[2]&lt;/code&gt; 의 결과와 동일 &lt;code&gt;upperBound(value)&lt;/code&gt; . 세 가지를 모두 별도로 계산하는 것보다 호출이 빠릅니다. &lt;code&gt;equalRange&lt;/code&gt; 와 유사한 검색 일정을 사용합니다 . &amp;Omicron; ( &lt;code&gt;log(n)&lt;/code&gt; ) 시간 내에 전체 검색을 완료합니다 .</target>
        </trans-unit>
        <trans-unit id="790d773d570c5e954a4674836170e4f431d2f7c1" translate="yes" xml:space="preserve">
          <source>Returns a tuple of non-static functions with the name &lt;code&gt;name&lt;/code&gt; declared in the class or interface &lt;code&gt;C&lt;/code&gt;. Covariant duplicates are shrunk into the most derived one.</source>
          <target state="translated">클래스 또는 인터페이스 &lt;code&gt;C&lt;/code&gt; 에 선언 된 이름 &lt;code&gt;name&lt;/code&gt; 가진 비 정적 함수의 튜플을 반환합니다 . 공변량 복제본은 가장 많이 파생 된 복제본으로 축소됩니다.</target>
        </trans-unit>
        <trans-unit id="72aa67a13c982eedb6f77841d173bc55ab7adbc6" translate="yes" xml:space="preserve">
          <source>Returns actual size of underlying &lt;code&gt;sockaddr&lt;/code&gt; structure.</source>
          <target state="translated">기본 &lt;code&gt;sockaddr&lt;/code&gt; 구조 의 실제 크기를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="3d4e6f0dcafeee9acfc42b3956c272aaeda9e313" translate="yes" xml:space="preserve">
          <source>Returns aggregate information about the memory block containing p. If p references memory not originally allocated by this garbage collector, if p is null, or if the garbage collector does not support this operation, BlkInfo.init will be returned. Typically, support for this operation is dependent on support for addrOf.</source>
          <target state="translated">p를 포함하는 메모리 블록에 대한 집계 정보를 반환합니다. p가이 가비지 수집기에 의해 원래 할당되지 않은 메모리를 참조하거나 p가 null이거나 가비지 수집기가이 작업을 지원하지 않으면 BlkInfo.init가 반환됩니다. 일반적으로이 작업에 대한 지원은 addrOf 지원에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="547f2030a516f33d20565081851ea6d38f393ab1" translate="yes" xml:space="preserve">
          <source>Returns all available CLI options</source>
          <target state="translated">사용 가능한 모든 CLI 옵션을 반환</target>
        </trans-unit>
        <trans-unit id="e3e291fc50b149bf34d2e99f3491379752d7871b" translate="yes" xml:space="preserve">
          <source>Returns all available previews</source>
          <target state="translated">사용 가능한 모든 미리보기를 반환합니다</target>
        </trans-unit>
        <trans-unit id="49cd6455b1d4a20296abe2aa926ff0fde3d659c1" translate="yes" xml:space="preserve">
          <source>Returns all available reverts</source>
          <target state="translated">사용 가능한 모든 되돌리기를 반환합니다</target>
        </trans-unit>
        <trans-unit id="f9ae2fbd398addbe739b6c44bfa43ba201627972" translate="yes" xml:space="preserve">
          <source>Returns all available transitions</source>
          <target state="translated">사용 가능한 모든 전환을 반환합니다</target>
        </trans-unit>
        <trans-unit id="de8280489e19586a87adf21d1db50e77b285274b" translate="yes" xml:space="preserve">
          <source>Returns an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; for iterating over records found in &lt;code&gt;input&lt;/code&gt;.</source>
          <target state="translated">반환 값은 &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;입력 범위&lt;/a&gt; 기록을 통해 반복에 대한이 발견 &lt;code&gt;input&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="948ee06c9c866197d5eb7dfe97ceda73ffae4bb4" translate="yes" xml:space="preserve">
          <source>Returns an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of &lt;code&gt;DirEntry&lt;/code&gt; that lazily iterates a given directory, also provides two ways of foreach iteration. The iteration variable can be of type &lt;code&gt;string&lt;/code&gt; if only the name is needed, or &lt;code&gt;DirEntry&lt;/code&gt; if additional details are needed. The span mode dictates how the directory is traversed. The name of each iterated directory entry contains the absolute or relative path (depending on pathname).</source>
          <target state="translated">주어진 디렉토리를 느리게 반복하는 &lt;code&gt;DirEntry&lt;/code&gt; 의 &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;입력 범위&lt;/a&gt; 를 반환하고 두 가지 방법으로 foreach 반복을 제공합니다. 반복 변수는 이름 만 필요한 경우 &lt;code&gt;string&lt;/code&gt; 유형 이거나 추가 세부 사항이 필요한 경우 &lt;code&gt;DirEntry&lt;/code&gt; 일 수 있습니다. 범위 모드는 디렉토리가 이동하는 방법을 나타냅니다. 각 반복 된 디렉토리 항목의 이름에는 절대 또는 상대 경로가 포함됩니다 (경로 이름에 따라 다름).</target>
        </trans-unit>
        <trans-unit id="f82c2424c6fff8b7a7a516bb19ee2710d86285bc" translate="yes" xml:space="preserve">
          <source>Returns an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; set up to read from the file handle a chunk at a time.</source>
          <target state="translated">파일 핸들에서 한 번에 청크를 읽도록 설정된 &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;입력 범위를&lt;/a&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e9c75cc67698ecc1945008a92df85a5774f6335f" translate="yes" xml:space="preserve">
          <source>Returns an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; set up to read from the file handle one line at a time.</source>
          <target state="translated">파일 핸들에서 한 번에 한 줄씩 읽도록 설정된 &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;입력 범위를&lt;/a&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="637bd45f69dbff13a464ee7d0b167448d7fd0753" translate="yes" xml:space="preserve">
          <source>Returns an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; set up to read from the file handle one line at a time. Each line will be newly allocated. &lt;code&gt;front&lt;/code&gt; will cache its value to allow repeated calls without unnecessary allocations.</source>
          <target state="translated">파일 핸들에서 한 번에 한 줄씩 읽도록 설정된 &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;입력 범위를&lt;/a&gt; 반환합니다 . 각 줄이 새로 할당됩니다. &lt;code&gt;front&lt;/code&gt; 는 불필요한 할당없이 반복 된 호출을 허용하기 위해 값을 캐시합니다.</target>
        </trans-unit>
        <trans-unit id="b8074654e34efaa6ddbebb1aaab2611e2ca850d6" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;AliasSeq&lt;/code&gt; created from TList with all occurrences of T, if found, replaced with U.</source>
          <target state="translated">T의 모든 발생이 발견되면 U로 대체 된 TList에서 생성 된 &lt;code&gt;AliasSeq&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a9ba3b84333b451cddeb0f31f90a974eae02222d" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;AliasSeq&lt;/code&gt; created from TList with all occurrences of type T, if found, replaced with type U.</source>
          <target state="translated">T 유형에서 발견 된 모든 유형 (발견 된 경우)이 U 유형으로 대체 된 TList에서 작성된 &lt;code&gt;AliasSeq&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="95ffa9932c89a1a2c78114fd151186b2a3fa7044" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;AliasSeq&lt;/code&gt; created from TList with the all duplicate types removed.</source>
          <target state="translated">모든 중복 유형이 제거 된 TList에서 작성된 &lt;code&gt;AliasSeq&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="0ec9178bff2b45f05e74fcd30f72b2cd23ed61b5" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;AliasSeq&lt;/code&gt; created from TList with the all occurrences, if any, of T removed.</source>
          <target state="translated">T의 모든 발생이 있으면 TList에서 작성된 &lt;code&gt;AliasSeq&lt;/code&gt; 를 리턴합니다 (있는 경우).</target>
        </trans-unit>
        <trans-unit id="b707da3072dc01ee26fcc801678667c3b3143910" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;AliasSeq&lt;/code&gt; created from TList with the first occurrence of T, if found, replaced with U.</source>
          <target state="translated">T가 처음 발생하는 경우 T가 발견 된 경우 U로 대체 된 TList에서 생성 된 &lt;code&gt;AliasSeq&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="8c3320bad74eb24381bb4132ab3e05ebdeb849d9" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;AliasSeq&lt;/code&gt; created from TList with the first occurrence of type T, if found, replaced with type U.</source>
          <target state="translated">T 유형으로 처음 발견 된 T 유형으로 발견 된 &lt;code&gt;AliasSeq&lt;/code&gt; 를 발견하면 U 유형으로 대체합니다.</target>
        </trans-unit>
        <trans-unit id="87b0bceb710648d9eaefe66e839ee1fa911e3037" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;AliasSeq&lt;/code&gt; created from TList with the first occurrence, if any, of T removed.</source>
          <target state="translated">T의 첫 번째 항목 (있는 경우)을 제거하고 TList에서 만든 &lt;code&gt;AliasSeq&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="81769798ab1d8e4547d87293fde0e9f953d5950b" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;AliasSeq&lt;/code&gt; created from TList with the order reversed.</source>
          <target state="translated">순서가 반대 인 TList에서 작성된 &lt;code&gt;AliasSeq&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="d223fedb93decc9e25baa0f1772f6e2a622b8c8e" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;AliasSeq&lt;/code&gt; expression of &lt;code&gt;Func&lt;/code&gt; being applied to every variadic template argument.</source>
          <target state="translated">모든 가변 템플릿 인수에 적용되는 &lt;code&gt;Func&lt;/code&gt; 의 &lt;code&gt;AliasSeq&lt;/code&gt; 표현식을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="02adeee6d7a4139da18cf929102784cddbcce11d" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;AliasSeq&lt;/code&gt; with the elements of TList sorted so that the most derived types come first.</source>
          <target state="translated">가장 많이 파생 된 형식이 먼저 오도록 TList 요소가 정렬 된 &lt;code&gt;AliasSeq&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="4f261cd72136edc2dc9d06ce0f0820a1f9e43f21" translate="yes" xml:space="preserve">
          <source>Returns an AggregateDeclaration when toParent() is that.</source>
          <target state="translated">toParent ()가 그런 경우 AggregateDeclaration을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c66e70830bf3581ee05b63fa397c6a247650d99c" translate="yes" xml:space="preserve">
          <source>Returns an AggregateDeclaration when toParent2() is that.</source>
          <target state="translated">toParent2 ()가 그런 경우 AggregateDeclaration을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b63a2bef70d49ca42f41b2f703578a4b160c47e3" translate="yes" xml:space="preserve">
          <source>Returns an AggregateDeclaration when toParentDecl() is that.</source>
          <target state="translated">toParentDecl ()이 그런 경우 AggregateDeclaration을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a24ebb418526d4ea1c9c523a5550f2f492ebfb54" translate="yes" xml:space="preserve">
          <source>Returns an AggregateDeclaration when toParentLocal() is that.</source>
          <target state="translated">toParentLocal ()이 그런 경우 AggregateDeclaration을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8bd6ee4aba8d8369c0390b34882aa7518acea2d6" translate="yes" xml:space="preserve">
          <source>Returns an alias to the template that &lt;code&gt;T&lt;/code&gt; is an instance of. It will return &lt;code&gt;void&lt;/code&gt; if a symbol without a template is given.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 인스턴스 인 템플릿에 대한 별칭을 반환합니다 . 템플릿이없는 심볼이 제공되면 &lt;code&gt;void&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="32eeaebd0b9b4b2e20a6c1415518d77091f44840" translate="yes" xml:space="preserve">
          <source>Returns an appropriate ThreadInfo instance.</source>
          <target state="translated">적절한 ThreadInfo 인스턴스를 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="bcc12ef4c76afdb516aeb007ed7aa8abad047604" translate="yes" xml:space="preserve">
          <source>Returns an array literal with each element of the literal being the &lt;code&gt;.init&lt;/code&gt; property of the array element type.</source>
          <target state="translated">리터럴의 각 요소가 배열 요소 유형 의 &lt;code&gt;.init&lt;/code&gt; 특성 인 배열 리터럴을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="d9e5f612e7beec996567db962234883ae6bc99de" translate="yes" xml:space="preserve">
          <source>Returns an array of all known names for this encoding scheme</source>
          <target state="translated">이 인코딩 체계에 대해 알려진 모든 이름의 배열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d9060005afabd71371b4c96b9e17f7a9dd77986e" translate="yes" xml:space="preserve">
          <source>Returns an array of variants constructed from &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;args&lt;/code&gt; 로 구성된 변형 배열을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="50a5ba547b51f3721f191cd04b59276c858d2120" translate="yes" xml:space="preserve">
          <source>Returns an empty range which is statically known to be empty and is guaranteed to have &lt;code&gt;length&lt;/code&gt; and be random access regardless of &lt;code&gt;R&lt;/code&gt;'s capabilities.</source>
          <target state="translated">정적으로 비어있는 것으로 알려진 &lt;code&gt;R&lt;/code&gt; 의 기능에 관계없이 &lt;code&gt;length&lt;/code&gt; 가 있고 임의 액세스 권한 이있는 빈 범위를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="a2db67fddaa2ff9367099794304809390991b8c9" translate="yes" xml:space="preserve">
          <source>Returns an indented string representation of this item</source>
          <target state="translated">이 항목의 들여 쓰기 된 문자열 표현을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="90d2752e4e2d3333f90b26bff116e635c498afb5" translate="yes" xml:space="preserve">
          <source>Returns an indirect type one step from t.</source>
          <target state="translated">t에서 한 단계 씩 간접 유형을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="0032b41f11fc5c384912ed7a8525357ea39f9f6e" translate="yes" xml:space="preserve">
          <source>Returns an initialized object. This function is mainly for eliminating construction differences between structs and classes. It allows code to not worry about whether the type it's constructing is a struct or a class.</source>
          <target state="translated">초기화 된 객체를 반환합니다. 이 함수는 주로 구조체와 클래스의 구조적 차이를 없애기위한 것입니다. 코드가 생성하는 유형이 구조 체인지 클래스인지 걱정하지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="b1c2d5368d6347f59a26a11ee3d9835dd0af0dc8" translate="yes" xml:space="preserve">
          <source>Returns an instance of ThreadInfo specific to the logical thread that is calling this routine or, if the calling thread was not create by this scheduler, returns ThreadInfo.thisInfo instead.</source>
          <target state="translated">이 루틴을 호출하는 논리 스레드에 특정한 ThreadInfo의 인스턴스를 리턴하거나,이 스케줄러가 호출 스레드를 작성하지 않은 경우 ThreadInfo.thisInfo를 대신 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="0ae0415de0ccef54833a72e85f53f9141a38fdb3" translate="yes" xml:space="preserve">
          <source>Returns an interval that covers from the earliest time point of two intervals up to (but not including) the latest time point of two intervals.</source>
          <target state="translated">두 간격의 가장 빠른 시점부터 두 간격의 최신 시점까지 (포함하지는 않음)를 포함하는 간격을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e7d37bf7d60fa80601c3b31ae0851a49b472889a" translate="yes" xml:space="preserve">
          <source>Returns an output range that locks the file and allows fast writing to it.</source>
          <target state="translated">파일을 잠그고 빠르게 기록 할 수있는 출력 범위를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a0c5ef877564042ce05279bfaa0058766c89f7af" translate="yes" xml:space="preserve">
          <source>Returns byte at index i in file.</source>
          <target state="translated">파일의 인덱스 i에서 바이트를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8077519e3d799a5540868221c3fd94b5e38799f1" translate="yes" xml:space="preserve">
          <source>Returns class instance alignment.</source>
          <target state="translated">클래스 인스턴스 정렬을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d0d8ee3e2d3218aaa364d114f57797b2d90dd17d" translate="yes" xml:space="preserve">
          <source>Returns cmp OP 0; where OP is ==, !=, &amp;lt;, &amp;gt;=, etc. Result is 0 or 1</source>
          <target state="translated">cmp OP 0을 반환합니다. 여기서 OP는 ==,! =, &amp;lt;,&amp;gt; = 등입니다. 결과는 0 또는 1입니다.</target>
        </trans-unit>
        <trans-unit id="4b2d520bcd5b7fe413af70438b8b9387edccb14f" translate="yes" xml:space="preserve">
          <source>Returns code for curl_formadd()</source>
          <target state="translated">curl_formadd ()에 대한 코드를 반환</target>
        </trans-unit>
        <trans-unit id="3271d44e1d89579a34e8e621ef6a5dadbc24c6be" translate="yes" xml:space="preserve">
          <source>Returns cosine of x. x is in radians.</source>
          <target state="translated">x의 코사인을 반환합니다. x는 라디안입니다.</target>
        </trans-unit>
        <trans-unit id="ec7b9a230e216f026f6bbc20d87e29fe18cbb8d4" translate="yes" xml:space="preserve">
          <source>Returns dynamic array, the elements of which are the keys in the associative array.</source>
          <target state="translated">연관 배열의 키인 요소 인 동적 배열을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="a321b50df478fd8b75cbeb825d72294b4d8afe42" translate="yes" xml:space="preserve">
          <source>Returns dynamic array, the elements of which are the values in the associative array.</source>
          <target state="translated">요소가 연관 배열의 값인 동적 배열을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="992f29577d41e3669ad205a1ac555feb12d094bc" translate="yes" xml:space="preserve">
          <source>Returns e1 OP e2; where OP is ==, !=, &amp;lt;, &amp;gt;=, etc. Result is 0 or 1</source>
          <target state="translated">e1 OP e2를 리턴합니다. 여기서 OP는 ==,! =, &amp;lt;,&amp;gt; = 등입니다. 결과는 0 또는 1입니다.</target>
        </trans-unit>
        <trans-unit id="25fc6148e44f0a204beb233c0e998d8935f66a07" translate="yes" xml:space="preserve">
          <source>Returns entire file contents as an array.</source>
          <target state="translated">전체 파일 내용을 배열로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2302eb686d55db1684e3931086ac4fa5129c134d" translate="yes" xml:space="preserve">
          <source>Returns exact mangled name of function.</source>
          <target state="translated">정확한 맹 글링 된 함수 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="740a3ce35c35ab6f2d1182323a12c3dce61abfd8" translate="yes" xml:space="preserve">
          <source>Returns false always</source>
          <target state="translated">항상 false를 반환</target>
        </trans-unit>
        <trans-unit id="ff2f90368a361d1c8bc3d23da1c1ddaf975121dc" translate="yes" xml:space="preserve">
          <source>Returns hnsecs in the local time zone using the standard C function calls on Posix systems and the standard Windows system calls on Windows systems to adjust the time to the appropriate time zone from std time.</source>
          <target state="translated">Posix 시스템의 표준 C 함수 호출과 Windows 시스템의 표준 Windows 시스템 호출을 사용하여 표준 시간대에서 적절한 시간대로 시간을 조정하여 로컬 시간대의 hnsec을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="324edb56de4911b04cacfe0a8f3e5388ba66e6ed" translate="yes" xml:space="preserve">
          <source>Returns incomplete beta integral of the arguments, evaluated from zero to x. The regularized incomplete beta function is defined as</source>
          <target state="translated">인수의 불완전한 베타 적분을 0에서 x로 평가합니다. 정규화 된 불완전 베타 기능은 다음과 같이 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="2a90c38cdc48542d6a62371935faec39ef5c38bb" translate="yes" xml:space="preserve">
          <source>Returns midnight.</source>
          <target state="translated">자정을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="97f87cbe8cd887a66a7de26e9826323b7e508d02" translate="yes" xml:space="preserve">
          <source>Returns nonzero if e is found in &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 에서 e가 발견되면 0이 아닌 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e49c58203f85f22a358092aadf3e729bbc5db241" translate="yes" xml:space="preserve">
          <source>Returns number of cores in CPU</source>
          <target state="translated">CPU의 코어 수를 반환</target>
        </trans-unit>
        <trans-unit id="32ab6c0900cf2cafed0d6cd4b43b8557f44a75d7" translate="yes" xml:space="preserve">
          <source>Returns number of threads per CPU</source>
          <target state="translated">CPU 당 스레드 수를 반환</target>
        </trans-unit>
        <trans-unit id="bab2cb38d1f647405ab83bfb5ea8dfd3e2ed714a" translate="yes" xml:space="preserve">
          <source>Returns number of values in the associative array. Unlike for dynamic arrays, it is read-only.</source>
          <target state="translated">연관 배열의 값 수를 반환합니다. 동적 배열과 달리 읽기 전용입니다.</target>
        </trans-unit>
        <trans-unit id="21d708c58ed912c7bc21c2298cf5655f917be8b9" translate="yes" xml:space="preserve">
          <source>Returns one of a collection of expressions based on the value of the switch expression.</source>
          <target state="translated">스위치 식의 값을 기반으로 식 모음 중 하나를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="deca66d33e8a1dd7d736a253db97e7667b9e6b34" translate="yes" xml:space="preserve">
          <source>Returns one second short of midnight.</source>
          <target state="translated">자정의 1 초 짧은 것을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e5f064227947f38ad15a46c5756f86fcec988d4d" translate="yes" xml:space="preserve">
          <source>Returns pointer to underlying &lt;code&gt;sockaddr&lt;/code&gt; structure.</source>
          <target state="translated">기본 &lt;code&gt;sockaddr&lt;/code&gt; 구조에 대한 포인터를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="9306efcd51f99fec396c2c46d81607172571eed7" translate="yes" xml:space="preserve">
          <source>Returns processor string, for display purposes only</source>
          <target state="translated">표시 목적으로 만 프로세서 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="cc0b14fb53d2f5a5602879c4de2b3a707c7529ef" translate="yes" xml:space="preserve">
          <source>Returns runtime profile stats for currently active GC implementation See &lt;code&gt;core.memory.GC.ProfileStats&lt;/code&gt; for list of available metrics.</source>
          <target state="translated">현재 활성화 된 GC 구현에 대한 런타임 프로파일 통계를 리턴합니다 . 사용 가능한 메트릭 목록은 &lt;code&gt;core.memory.GC.ProfileStats&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d3e62d6037c0e63f8a83fb2003a74125453d61ef" translate="yes" xml:space="preserve">
          <source>Returns runtime stats for currently active GC implementation See &lt;code&gt;core.memory.GC.Stats&lt;/code&gt; for list of available metrics.</source>
          <target state="translated">현재 활성화 된 GC 구현에 대한 런타임 통계를 반환합니다 . 사용 가능한 메트릭 목록은 &lt;code&gt;core.memory.GC.Stats&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="80a001519cbf8d51d6bfe95b96c1bf1bc2a2240e" translate="yes" xml:space="preserve">
          <source>Returns sine of x. x is in radians.</source>
          <target state="translated">x의 사인을 반환합니다. x는 라디안입니다.</target>
        </trans-unit>
        <trans-unit id="661c398de9351ae7788c64f5c998cd25ac7e5e45" translate="yes" xml:space="preserve">
          <source>Returns size of the type.</source>
          <target state="translated">유형의 크기를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f88530269c33a2ecb15b4c398506263adb7194e7" translate="yes" xml:space="preserve">
          <source>Returns slice of file contents as an array.</source>
          <target state="translated">파일 내용의 슬라이스를 배열로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="bbe508fc76d05bfe400089b46c25ef1854e4f576" translate="yes" xml:space="preserve">
          <source>Returns static array representation</source>
          <target state="translated">정적 배열 표현을 반환</target>
        </trans-unit>
        <trans-unit id="6a04d3cce76b0b9fa6130ec7125341d85c2586b8" translate="yes" xml:space="preserve">
          <source>Returns std time using the standard C function calls on Posix systems and the standard Windows system calls on Windows systems to adjust the time to UTC from the appropriate time zone.</source>
          <target state="translated">Posix 시스템의 표준 C 함수 호출 및 Windows 시스템의 표준 Windows 시스템 호출을 사용하여 표준 시간대를 표준 시간대로 반환하여 적절한 시간대에서 UTC로 시간을 조정합니다.</target>
        </trans-unit>
        <trans-unit id="049ab194623f5b5d997c099672563eb20601b1e9" translate="yes" xml:space="preserve">
          <source>Returns storage implementation struct.</source>
          <target state="translated">스토리지 구현 구조체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4d11cb1f5285eace9f0da6f72821436f23103eff" translate="yes" xml:space="preserve">
          <source>Returns tangent of x. x is in radians.</source>
          <target state="translated">x의 탄젠트를 반환합니다. x는 라디안입니다.</target>
        </trans-unit>
        <trans-unit id="ba66f3be48c6467f353f5efd9891c6627cdb89ab" translate="yes" xml:space="preserve">
          <source>Returns that part of the element which has already been parsed</source>
          <target state="translated">이미 파싱 된 요소의 해당 부분을 반환</target>
        </trans-unit>
        <trans-unit id="b608edc397452544804144ad78bbe52ab5fc2029" translate="yes" xml:space="preserve">
          <source>Returns the 1-based index of the first needle found in &lt;code&gt;haystack&lt;/code&gt;. If no needle is found, then &lt;code&gt;0&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;haystack&lt;/code&gt; 에서 발견 된 첫 번째 바늘의 1 기반 색인을 리턴합니다 . 바늘이 없으면 &lt;code&gt;0&lt;/code&gt; 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="7aaa8e97c1413fd2bd543e9004e05b5cf5c4f371" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;#Combining%20class&quot;&gt;combining class&lt;/a&gt; of &lt;code&gt;ch&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ch&lt;/code&gt; 의 &lt;a href=&quot;#Combining%20class&quot;&gt;결합 클래스&lt;/a&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d8be721db94c04e472c94307aecfdfe427375b92" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; farthest in the future which is representable by &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">반환 &lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 로 표현할 수있는 미래의 먼 &lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5c1def76d6ce884cce4d4c98ab3a2fabda5822d2" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; farthest in the past which is representable by &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">반환 &lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 로 표현할 수있는 과거의 먼 &lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ab0c4a5962794ed68c3814267d8b274bfc7e912b" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; farthest in the future which is representable by &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">반환 값은 &lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt; 으로 표현할 수있는 미래의 먼 &lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0d6cfbf56336eb14c68e9c4e005d3c238efe7d8a" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; farthest in the past which is representable by &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">반환 값은 &lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt; 으로 표현할 수있는 과거에 먼 &lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="509916d34bf387cddcb67bcb14780b3e260c02f2" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; farthest in the future which is representable by &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">반환은 &lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt; 로 표현할 수있는 미래의 먼 &lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1e9fb79b3cb15b2a01f1101a7e66c7413cf60d04" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; farthest in the past which is representable by &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">반환은 &lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt; 로 표현할 수있는 과거에 먼 &lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6098d975abe5b5502583c0eb337b8cf5e7991403" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;http://wikipedia.org/wiki/Levenshtein_distance&quot;&gt;Levenshtein distance&lt;/a&gt; between &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;. The Levenshtein distance computes the minimal amount of edit operations necessary to transform &lt;code&gt;s&lt;/code&gt; into &lt;code&gt;t&lt;/code&gt;. Performs &amp;Omicron;(&lt;code&gt;s.length * t.length&lt;/code&gt;) evaluations of &lt;code&gt;equals&lt;/code&gt; and occupies &amp;Omicron;(&lt;code&gt;min(s.length, t.length)&lt;/code&gt;) storage.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 와 &lt;code&gt;t&lt;/code&gt; 사이 의 &lt;a href=&quot;http://wikipedia.org/wiki/Levenshtein_distance&quot;&gt;Levenshtein 거리를&lt;/a&gt; 반환합니다 . Levenshtein 거리 변환에 필요한 편집 작업의 최소한의 계산 &lt;code&gt;s&lt;/code&gt; 에 &lt;code&gt;t&lt;/code&gt; 를 . &lt;code&gt;equals&lt;/code&gt; 하고 &amp;Omicron; ( &lt;code&gt;min(s.length, t.length)&lt;/code&gt; ) 저장 영역의 &amp;Omicron; ( &lt;code&gt;s.length * t.length&lt;/code&gt; ) 평가를 수행 합니다 .</target>
        </trans-unit>
        <trans-unit id="32ce9ea773dc9871c7287efedcda9cb2e7f3acdb" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;https://wikipedia.org/wiki/Levenshtein_distance&quot;&gt;Levenshtein distance&lt;/a&gt; between &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;. The Levenshtein distance computes the minimal amount of edit operations necessary to transform &lt;code&gt;s&lt;/code&gt; into &lt;code&gt;t&lt;/code&gt;. Performs &amp;Omicron;(&lt;code&gt;s.length * t.length&lt;/code&gt;) evaluations of &lt;code&gt;equals&lt;/code&gt; and occupies &amp;Omicron;(&lt;code&gt;min(s.length, t.length)&lt;/code&gt;) storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f6a32a8e8e296b1d3ccd0da949b1aac7471ca63" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;FILE*&lt;/code&gt; corresponding to this object.</source>
          <target state="translated">반품 &lt;code&gt;FILE*&lt;/code&gt; 이 객체에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="257f9050b4dfb4d53f237029d2536b3e3101b2ba" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;th element in the composite range. Defined if all ranges offer random access.</source>
          <target state="translated">합성 범위 의 &lt;code&gt;n&lt;/code&gt; 번째 요소를 반환합니다 . 모든 범위가 임의 액세스를 제공하는지 정의합니다.</target>
        </trans-unit>
        <trans-unit id="0b59ae7fbd96d7d27b3f0e2f2cf1c051ba985c19" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;shared&lt;/code&gt; global instance of the &lt;code&gt;NullAllocator&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NullAllocator&lt;/code&gt; 의 &lt;code&gt;shared&lt;/code&gt; 전역 인스턴스를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ce6e1c2ff99eaab11519ce3ee941b2f29633ee4b" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;typeid&lt;/code&gt; of the currently held value.</source>
          <target state="translated">현재 보유한 값 의 &lt;code&gt;typeid&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="9ca240f5c1017fb9b7d3e3febde06ae0b4f5b4d4" translate="yes" xml:space="preserve">
          <source>Returns the FunctionAttribute mask for function &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;func&lt;/code&gt; 함수의 FunctionAttribute 마스크를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="1d42a93b48c21969d8cb340934a7c100cc9b7231" translate="yes" xml:space="preserve">
          <source>Returns the IPv4 address number (in host byte order).</source>
          <target state="translated">IPv4 주소 번호를 호스트 바이트 순서로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="45baaf9601220b1e25ad558814402648ada571ca" translate="yes" xml:space="preserve">
          <source>Returns the IPv4 port number (in host byte order).</source>
          <target state="translated">IPv4 포트 번호를 호스트 바이트 순서로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="23c37a04b925d1835fba17fa23f45825ee624aa3" translate="yes" xml:space="preserve">
          <source>Returns the IPv6 address.</source>
          <target state="translated">IPv6 주소를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="cbe7a9fcaba392224d10bfe292c3ee68c2a2a8ee" translate="yes" xml:space="preserve">
          <source>Returns the IPv6 port number.</source>
          <target state="translated">IPv6 포트 번호를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="58c93b39819a6af0f07c9d344cc49d548d1bf175" translate="yes" xml:space="preserve">
          <source>Returns the JSONType of the value stored in this structure.</source>
          <target state="translated">이 구조에 저장된 값의 JSONType을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e743c49645b9efc621fefcedde424e322a718efa" translate="yes" xml:space="preserve">
          <source>Returns the Levenshtein distance and the edit path between &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">Levenshtein 거리와 &lt;code&gt;s&lt;/code&gt; 와 &lt;code&gt;t&lt;/code&gt; 사이 의 편집 경로를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="81b4aeabdccf76b9b4ea6ea89fc307eb4334e212" translate="yes" xml:space="preserve">
          <source>Returns the absolute value of a duration.</source>
          <target state="translated">지속 시간의 절대 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e570495f978a68cd4bcc7ebeafb6cd038aae9b65" translate="yes" xml:space="preserve">
          <source>Returns the absolute value of x converted to the corresponding unsigned type.</source>
          <target state="translated">해당 부호없는 형식으로 변환 된 x의 절대 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1cc10390f78435ed9830cbc4df9f01154f2f0b33" translate="yes" xml:space="preserve">
          <source>Returns the actual bytes allocated when &lt;code&gt;n&lt;/code&gt; bytes are requested, i.e. &lt;code&gt;n.roundUpToMultipleOf(blockSize)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 바이트가 요청 될 때 할당 된 실제 바이트 , 즉 &lt;code&gt;n.roundUpToMultipleOf(blockSize)&lt;/code&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a6997f16ab28630fa41ce604ab7a7c130397f707" translate="yes" xml:space="preserve">
          <source>Returns the alignment offered.</source>
          <target state="translated">제공된 정렬을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="196851e7c8f7265b2099a4234f1e49f8e2183ee7" translate="yes" xml:space="preserve">
          <source>Returns the argument, x, for which the area under the Normal probability density function (integrated from minus infinity to x) is equal to p.</source>
          <target state="translated">정규 확률 밀도 함수 아래의 면적 (마이너스 무한대에서 x로 통합)이 p와 같은 인수 x를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="57478ab50bf3787cb5fea44777273680e0c4914f" translate="yes" xml:space="preserve">
          <source>Returns the arguments supplied when the process was started.</source>
          <target state="translated">프로세스가 시작될 때 제공된 인수를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="caddd809a5c7082d66bc12eafd8233866c8fdd55" translate="yes" xml:space="preserve">
          <source>Returns the array index at which the (n+1)th code point begins.</source>
          <target state="translated">(n + 1) 번째 코드 포인트가 시작되는 배열 인덱스를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c32d42172aeb065d7243d264818252792375c5cc" translate="yes" xml:space="preserve">
          <source>Returns the array length multiplied by the number of bytes per array element.</source>
          <target state="translated">배열 길이에 배열 요소 당 바이트 수를 곱한 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c9d41878aa69ec140443d5bdd50b1df8caa2f4c8" translate="yes" xml:space="preserve">
          <source>Returns the attributes of the file represented by this &lt;code&gt;DirEntry&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;DirEntry&lt;/code&gt; 로 나타내지는 파일의 속성을 돌려 줍니다 .</target>
        </trans-unit>
        <trans-unit id="094eb86ed26e7ff7b39ed1c60d218ec0cb6f8669" translate="yes" xml:space="preserve">
          <source>Returns the attributes of the given file.</source>
          <target state="translated">주어진 파일의 속성을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8c871e611c4b78aace5fde79e51a6afac50905d9" translate="yes" xml:space="preserve">
          <source>Returns the available disk space based on a given path. On Windows, &lt;code&gt;path&lt;/code&gt; must be a directory; on POSIX systems, it can be a file or directory.</source>
          <target state="translated">주어진 경로를 기반으로 사용 가능한 디스크 공간을 반환합니다. Windows에서 &lt;code&gt;path&lt;/code&gt; 는 디렉토리 여야합니다. POSIX 시스템에서는 파일 또는 디렉토리 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f46326e3c81a7e2aa110ff84039dd607a22b74f5" translate="yes" xml:space="preserve">
          <source>Returns the available disk space based on a given path. On Windows, &lt;code&gt;path&lt;/code&gt; must be a directory; on Posix systems, it can be a file or directory.</source>
          <target state="translated">주어진 경로에 따라 사용 가능한 디스크 공간을 반환합니다. Windows에서 &lt;code&gt;path&lt;/code&gt; 는 디렉토리 여야합니다. Posix 시스템에서는 파일 또는 디렉토리 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a5a77c34a5774ea86ceddcc9f783845770a9aa8d" translate="yes" xml:space="preserve">
          <source>Returns the available size for further allocations in bytes.</source>
          <target state="translated">추가 할당에 사용 가능한 크기 (바이트)를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="33db445e3ce8a2d6d803f52279746f7aa60d2fc5" translate="yes" xml:space="preserve">
          <source>Returns the base address of the memory block containing p. This value is useful to determine whether p is an interior pointer, and the result may be passed to routines such as sizeOf which may otherwise fail. If p references memory not originally allocated by this garbage collector, if p is null, or if the garbage collector does not support this operation, null will be returned.</source>
          <target state="translated">p를 포함하는 메모리 블록의 기본 주소를 반환합니다. 이 값은 p가 내부 포인터인지 여부를 결정하는 데 유용하며 결과는 sizeOf와 같은 루틴으로 전달 될 수 있으며 그렇지 않으면 실패 할 수 있습니다. p가이 가비지 수집기에 의해 원래 할당되지 않은 메모리를 참조하는 경우 p가 null이거나 가비지 수집기가이 작업을 지원하지 않으면 null이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="d829600059cc6d895e0a04268346ed1bba620a88" translate="yes" xml:space="preserve">
          <source>Returns the base e (2.718...) logarithm of the absolute value of the gamma function of the argument.</source>
          <target state="translated">인수의 감마 함수 절대 값의 기본 e (2.718 ...) 로그를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="93475ffa06ff0a318625b6980908fdc9945ae0b4" translate="yes" xml:space="preserve">
          <source>Returns the capacity of the array (the maximum number of elements the managed array can accommodate before triggering a reallocation). If any appending will reallocate, &lt;code&gt;capacity&lt;/code&gt; returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">어레이의 용량 (재 할당을 트리거하기 전에 관리 형 어레이가 수용 할 수있는 최대 요소 수)을 반환합니다. 추가가 재 할당되면 &lt;code&gt;capacity&lt;/code&gt; 는 &lt;code&gt;0&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="7cd88ebd34fb9d666f1281686d2cf10bd812d12f" translate="yes" xml:space="preserve">
          <source>Returns the capacity of the heap, which is the length of the underlying store (if the store is a range) or the capacity of the underlying store (if the store is a container).</source>
          <target state="translated">기본 저장소의 길이 (저장소가 범위 인 경우) 또는 기본 저장소의 용량 (저장소가 컨테이너 인 경우) 인 힙 용량을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="5544e04dfcc3c86cc8c55e7a6573acb213f91559" translate="yes" xml:space="preserve">
          <source>Returns the code length of c in code units for the encoding. sz is the encoding: 1 = utf8, 2 = utf16, 4 = utf32.</source>
          <target state="translated">인코딩의 코드 단위로 c의 코드 길이를 리턴합니다. sz는 인코딩입니다 : 1 = utf8, 2 = utf16, 4 = utf32</target>
        </trans-unit>
        <trans-unit id="6a077755062985e986914e8c259ac848491d8b8e" translate="yes" xml:space="preserve">
          <source>Returns the code length of c in code units.</source>
          <target state="translated">c의 코드 길이를 코드 단위로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="219b4c31cab22d2577f34d0a0da0c17190131039" translate="yes" xml:space="preserve">
          <source>Returns the common prefix of two ranges.</source>
          <target state="translated">두 범위의 공통 접두사를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="728b4e05fb8b0f9c59e347e6977095f89332001f" translate="yes" xml:space="preserve">
          <source>Returns the concatenation of &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;r&lt;/code&gt;. &lt;code&gt;x&lt;/code&gt; may be a single element or an input range.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 와 &lt;code&gt;r&lt;/code&gt; 의 연결을 반환합니다 . &lt;code&gt;x&lt;/code&gt; 는 단일 요소 또는 입력 범위 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea0c4e9d22c1a50602a0199f4850469755760e82" translate="yes" xml:space="preserve">
          <source>Returns the concatenation of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;. &lt;code&gt;x&lt;/code&gt; may be a single element or an input range type.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;c&lt;/code&gt; 의 연결을 반환합니다 . &lt;code&gt;x&lt;/code&gt; 는 단일 요소 또는 입력 범위 유형일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e42c6644bd4a3579479c7e0bc4f63694376ecd9" translate="yes" xml:space="preserve">
          <source>Returns the corresponding signed type for T. T must be a numeric integral type, otherwise a compile-time error occurs.</source>
          <target state="translated">T에 해당하는 부호있는 유형을 리턴합니다. T는 숫자 정수 유형이어야합니다. 그렇지 않으면 컴파일 타임 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="79e5c0231d51031f2d202e464e73ae44600f2359" translate="yes" xml:space="preserve">
          <source>Returns the corresponding signed value for &lt;code&gt;x&lt;/code&gt; (e.g. if &lt;code&gt;x&lt;/code&gt; has type &lt;code&gt;uint&lt;/code&gt;, it returns &lt;code&gt;cast(int) x&lt;/code&gt;). The advantage compared to the cast is that you do not need to rewrite the cast if &lt;code&gt;x&lt;/code&gt; later changes type (e.g from &lt;code&gt;uint&lt;/code&gt; to &lt;code&gt;ulong&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 에 해당하는 부호있는 값을 반환합니다 (예 : &lt;code&gt;x&lt;/code&gt; 에 &lt;code&gt;uint&lt;/code&gt; 유형이있는 경우 &lt;code&gt;cast(int) x&lt;/code&gt; 반환 ). 캐스트와 비교했을 때의 이점은 나중에 &lt;code&gt;x&lt;/code&gt; 가 유형을 변경 하면 (예 : &lt;code&gt;uint&lt;/code&gt; 에서 &lt;code&gt;ulong&lt;/code&gt; 으로 ) 캐스트를 다시 작성할 필요가 없다는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="e0c7cfaa654c9cafcf15a0f23f1488d7a5472921" translate="yes" xml:space="preserve">
          <source>Returns the corresponding unsigned value for &lt;code&gt;x&lt;/code&gt; (e.g. if &lt;code&gt;x&lt;/code&gt; has type &lt;code&gt;int&lt;/code&gt;, it returns &lt;code&gt;cast(uint) x&lt;/code&gt;). The advantage compared to the cast is that you do not need to rewrite the cast if &lt;code&gt;x&lt;/code&gt; later changes type (e.g from &lt;code&gt;int&lt;/code&gt; to &lt;code&gt;long&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 에 해당하는 부호없는 값을 반환합니다 (예 : &lt;code&gt;x&lt;/code&gt; 에 &lt;code&gt;int&lt;/code&gt; 유형이있는 경우 &lt;code&gt;cast(uint) x&lt;/code&gt; 반환 ). 캐스트와 비교했을 때의 이점은 &lt;code&gt;x&lt;/code&gt; 나중에 유형이 변경 되면 (예 : &lt;code&gt;int&lt;/code&gt; 에서 &lt;code&gt;long&lt;/code&gt; ) 캐스트를 다시 작성할 필요가 없다는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="93c8ff19291982433fb8e58bc74d1305cf3d3d6b" translate="yes" xml:space="preserve">
          <source>Returns the creation time of the file represented by this &lt;code&gt;DirEntry&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;DirEntry&lt;/code&gt; 로 나타내지는 파일의 작성 시간을 돌려 줍니다 .</target>
        </trans-unit>
        <trans-unit id="0bc5e97841eee44f7e192aec2d0c900432b1d24f" translate="yes" xml:space="preserve">
          <source>Returns the current hashed value as an ubyte array.</source>
          <target state="translated">현재 해시 값을 ubyte 배열로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="68e5edc996727c03a46e20f3828e25d19770ed5d" translate="yes" xml:space="preserve">
          <source>Returns the current iterated element.</source>
          <target state="translated">현재 반복 된 요소를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="694c91992a7cd9a589268dc0b599c9e30217ee47" translate="yes" xml:space="preserve">
          <source>Returns the current number in the random sequence.</source>
          <target state="translated">임의의 순서로 현재 숫자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="cf614e2cf305b5a6c219be7d0f159e463b6a471a" translate="yes" xml:space="preserve">
          <source>Returns the current random value.</source>
          <target state="translated">현재 임의의 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="bd225b42fd192befda1703e4a048ac4c02f68a09" translate="yes" xml:space="preserve">
          <source>Returns the current time in the given time zone.</source>
          <target state="translated">주어진 시간대의 현재 시간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="667c7645c12244d2978ecd63544e99b3b04e054e" translate="yes" xml:space="preserve">
          <source>Returns the decoded interior of an element.</source>
          <target state="translated">요소의 디코딩 된 내부를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a8a27e3ff6fcfae053871df190c003ba8b0decb7" translate="yes" xml:space="preserve">
          <source>Returns the difference between the two &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;s in months.</source>
          <target state="translated">두 &lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 사이의 차이를 월 단위로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ace8ca94508ab7b3c40df8f7c875267d12ce842b" translate="yes" xml:space="preserve">
          <source>Returns the difference between the two &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;s in months.</source>
          <target state="translated">두 &lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt; 의 차이를 월 단위로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="b1a5d62e20b24fe7c30bfb712ac567819896873f" translate="yes" xml:space="preserve">
          <source>Returns the difference between the two &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;s in months.</source>
          <target state="translated">두 &lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt; 의 차이 를 개월 단위로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="08265990114304116123a83a291ea4f348f1c3a1" translate="yes" xml:space="preserve">
          <source>Returns the duration between &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;begin&lt;/code&gt; 과 &lt;code&gt;end&lt;/code&gt; 사이의 지속 시간을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a353d4f8b3242008c7d6549132f8ef2dcdd8363e" translate="yes" xml:space="preserve">
          <source>Returns the element type of a given range.</source>
          <target state="translated">주어진 범위의 요소 유형을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="85bc1cdc4a1c465dc09c15d9aad74129f2ed9a69" translate="yes" xml:space="preserve">
          <source>Returns the encoding element type of a given range.</source>
          <target state="translated">주어진 범위의 인코딩 요소 유형을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c652de2806a607191d794853e018776beb310aa3" translate="yes" xml:space="preserve">
          <source>Returns the file number corresponding to this object.</source>
          <target state="translated">이 객체에 대응하는 파일 번호를 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="037c9b8f48e4fe12a5d5c13bebaf2bfd864713de" translate="yes" xml:space="preserve">
          <source>Returns the finished CRC hash. This also calls &lt;a href=&quot;#start&quot;&gt;&lt;code&gt;start&lt;/code&gt;&lt;/a&gt; to reset the internal state.</source>
          <target state="translated">완성 된 CRC 해시를 반환합니다. 또한 내부 상태를 재설정 &lt;a href=&quot;#start&quot;&gt; &lt;code&gt;start&lt;/code&gt; &lt;/a&gt; 위해 start 를 호출 합니다 .</target>
        </trans-unit>
        <trans-unit id="1b806b45f0f49c45cfe5429b9d0a5ecd137b2191" translate="yes" xml:space="preserve">
          <source>Returns the finished MD5 hash. This also calls &lt;a href=&quot;#start&quot;&gt;&lt;code&gt;start&lt;/code&gt;&lt;/a&gt; to reset the internal state.</source>
          <target state="translated">완성 된 MD5 해시를 반환합니다. 또한 내부 상태를 재설정 &lt;a href=&quot;#start&quot;&gt; &lt;code&gt;start&lt;/code&gt; &lt;/a&gt; 위해 start 를 호출 합니다 .</target>
        </trans-unit>
        <trans-unit id="b7c7d50613428f96baa5c9b9724d5388e68313dc" translate="yes" xml:space="preserve">
          <source>Returns the finished RIPEMD160 hash. This also calls &lt;a href=&quot;#start&quot;&gt;&lt;code&gt;start&lt;/code&gt;&lt;/a&gt; to reset the internal state.</source>
          <target state="translated">완성 된 RIPEMD160 해시를 반환합니다. 또한 내부 상태를 재설정 &lt;a href=&quot;#start&quot;&gt; &lt;code&gt;start&lt;/code&gt; &lt;/a&gt; 위해 start 를 호출 합니다 .</target>
        </trans-unit>
        <trans-unit id="dea8c0070ef5fe4ab0db856146f0106a3e3562dd" translate="yes" xml:space="preserve">
          <source>Returns the finished SHA hash. This also calls &lt;a href=&quot;#start&quot;&gt;&lt;code&gt;start&lt;/code&gt;&lt;/a&gt; to reset the internal state.</source>
          <target state="translated">완성 된 SHA 해시를 반환합니다. 또한 내부 상태를 재설정 &lt;a href=&quot;#start&quot;&gt; &lt;code&gt;start&lt;/code&gt; &lt;/a&gt; 위해 start 를 호출 합니다 .</target>
        </trans-unit>
        <trans-unit id="28e136de73953fc61a3a088d3f57bebe2d0e4e54" translate="yes" xml:space="preserve">
          <source>Returns the first element of the container, in a container-defined order.</source>
          <target state="translated">컨테이너의 첫 번째 요소를 컨테이너 정의 순서로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4714e9158c318abdd86a87254da5520e1a86d92a" translate="yes" xml:space="preserve">
          <source>Returns the full path of the current executable.</source>
          <target state="translated">현재 실행 파일의 전체 경로를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7ff4d778149aefa73277256ef7b4774ab307cc89" translate="yes" xml:space="preserve">
          <source>Returns the given hnsecs without changing them at all.</source>
          <target state="translated">주어진 hnsec을 전혀 변경하지 않고 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0630a073d930fd678380d4e8dc6ef00af366e6ac" translate="yes" xml:space="preserve">
          <source>Returns the global instance of this allocator type. The C heap allocator is thread-safe, therefore all of its methods and &lt;code&gt;instance&lt;/code&gt; itself are &lt;code&gt;shared&lt;/code&gt;.</source>
          <target state="translated">이 할당 자 유형의 전역 인스턴스를 반환합니다. C 힙 할당자는 스레드로부터 안전하므로 모든 메소드와 &lt;code&gt;instance&lt;/code&gt; 자체가 &lt;code&gt;shared&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="532b7a8ef32828945116d58255668b248151d31a" translate="yes" xml:space="preserve">
          <source>Returns the global instance of this allocator type. The C heap allocator is thread-safe, therefore all of its methods and &lt;code&gt;it&lt;/code&gt; itself are &lt;code&gt;shared&lt;/code&gt;.</source>
          <target state="translated">이 할당 자 유형의 전역 인스턴스를 반환합니다. 는 C 힙 할당 그러므로 모든 방법으로, 스레드 안전하고 &lt;code&gt;it&lt;/code&gt; 자체가되어 &lt;code&gt;shared&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2895802e94fc2b99238a662c48e664762c727c4c" translate="yes" xml:space="preserve">
          <source>Returns the global instance of this allocator type. The garbage collected allocator is thread-safe, therefore all of its methods and &lt;code&gt;instance&lt;/code&gt; itself are &lt;code&gt;shared&lt;/code&gt;.</source>
          <target state="translated">이 할당 자 유형의 전역 인스턴스를 반환합니다. 가비지 수집 할당자는 스레드로부터 안전하므로 모든 메서드와 &lt;code&gt;instance&lt;/code&gt; 자체가 &lt;code&gt;shared&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="7e7e95e8836e55e0ec878d1ca0df5344c77da1b1" translate="yes" xml:space="preserve">
          <source>Returns the good allocation size that guarantees zero internal fragmentation.</source>
          <target state="translated">내부 조각화가없는 적절한 할당 크기를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="761ce3cb0c363cd752d6f37bf64ee9bf23d20ff3" translate="yes" xml:space="preserve">
          <source>Returns the hash as an uint value.</source>
          <target state="translated">해시를 uint 값으로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="43702045b3eca7cf2498797e1306c82ad1750c21" translate="yes" xml:space="preserve">
          <source>Returns the hash of a CData</source>
          <target state="translated">CData의 해시를 반환</target>
        </trans-unit>
        <trans-unit id="2f9ae23bc6367b9df14868b1db260da7bcf8721c" translate="yes" xml:space="preserve">
          <source>Returns the hash of a Comment</source>
          <target state="translated">주석의 해시를 반환</target>
        </trans-unit>
        <trans-unit id="2ecb60c7d5597660ed6f2efa04c3fa44f7526861" translate="yes" xml:space="preserve">
          <source>Returns the hash of a Document</source>
          <target state="translated">문서의 해시를 반환</target>
        </trans-unit>
        <trans-unit id="c18bf4f15890b55835846a7ee93b31c53d4df9fc" translate="yes" xml:space="preserve">
          <source>Returns the hash of a ProcessingInstruction</source>
          <target state="translated">ProcessingInstruction의 해시를 반환합니다</target>
        </trans-unit>
        <trans-unit id="36fc578ccf9adb115f7ba61024828b87b4f3726b" translate="yes" xml:space="preserve">
          <source>Returns the hash of a Tag</source>
          <target state="translated">태그의 해시를 반환</target>
        </trans-unit>
        <trans-unit id="fc39c8c90907974b818c8e42b40d3d4678023682" translate="yes" xml:space="preserve">
          <source>Returns the hash of a text section</source>
          <target state="translated">텍스트 섹션의 해시를 반환</target>
        </trans-unit>
        <trans-unit id="f122d9bed5829b092eff21cc9e0e5455257e65a2" translate="yes" xml:space="preserve">
          <source>Returns the hash of an Element</source>
          <target state="translated">요소의 해시를 반환</target>
        </trans-unit>
        <trans-unit id="d90b5c3a81082239c4289ae3ace4f9dbff839e8d" translate="yes" xml:space="preserve">
          <source>Returns the hash of an XMLInstruction</source>
          <target state="translated">XMLInstruction의 해시를 반환</target>
        </trans-unit>
        <trans-unit id="f538327a2675d7baf16cb9ba4c2248eda2a819ca" translate="yes" xml:space="preserve">
          <source>Returns the hash of this item</source>
          <target state="translated">이 아이템의 해시를 돌려줍니다</target>
        </trans-unit>
        <trans-unit id="1934f7bb63803e44822e77c02a07f7a51ac0e4dd" translate="yes" xml:space="preserve">
          <source>Returns the index of the first occurrence of T in the sequence TList. If not found, -1 is returned.</source>
          <target state="translated">시퀀스 TList에서 T가 처음 나타나는 인덱스를 반환합니다. 찾을 수없는 경우 -1이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="5d679540ab0aea358f64b4706760d37047c35ebd" translate="yes" xml:space="preserve">
          <source>Returns the index of the first occurrence of any character not an elements in &lt;code&gt;needles&lt;/code&gt; in &lt;code&gt;haystack&lt;/code&gt;. If all element of &lt;code&gt;haystack&lt;/code&gt; are element of &lt;code&gt;needles&lt;/code&gt;&lt;code&gt;-1&lt;/code&gt; is returned.</source>
          <target state="translated">모든 문자하지의 요소가 최초로 나타나는 인덱스 돌려 &lt;code&gt;needles&lt;/code&gt; 의 &lt;code&gt;haystack&lt;/code&gt; . 모든 요소 경우 &lt;code&gt;haystack&lt;/code&gt; 의 요소입니다 &lt;code&gt;needles&lt;/code&gt; &lt;code&gt;-1&lt;/code&gt; 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="d67bbb7827ae15fb753424306aaec63cc979ea9e" translate="yes" xml:space="preserve">
          <source>Returns the index of the first occurrence of any of the elements in &lt;code&gt; needles&lt;/code&gt; in &lt;code&gt;haystack&lt;/code&gt;. If no element of &lt;code&gt;needles&lt;/code&gt; is found, then &lt;code&gt;-1&lt;/code&gt; is returned. The &lt;code&gt;startIdx&lt;/code&gt; slices &lt;code&gt;haystack&lt;/code&gt; in the following way &lt;code&gt;haystack[startIdx .. $]&lt;/code&gt;. &lt;code&gt;startIdx&lt;/code&gt; represents a codeunit index in &lt;code&gt;haystack&lt;/code&gt;. If the sequence ending at &lt;code&gt;startIdx&lt;/code&gt; does not represent a well formed codepoint, then a &lt;a href=&quot;std_utf#UTFException&quot;&gt;&lt;code&gt;std.utf.UTFException&lt;/code&gt;&lt;/a&gt; may be thrown.</source>
          <target state="translated">의 임의의 구성 요소가 최초로 나타나는 인덱스 돌려 &lt;code&gt; needles&lt;/code&gt; 의 &lt;code&gt;haystack&lt;/code&gt; . 의 어떤 요소 경우 &lt;code&gt;needles&lt;/code&gt; 발견되지 않는, 다음 &lt;code&gt;-1&lt;/code&gt; 반환됩니다. &lt;code&gt;startIdx&lt;/code&gt; 조각 &lt;code&gt;haystack&lt;/code&gt; 다음과 같은 방법에 &lt;code&gt;haystack[startIdx .. $]&lt;/code&gt; . &lt;code&gt;startIdx&lt;/code&gt; 는 &lt;code&gt;haystack&lt;/code&gt; 의 코드 단위 색인을 나타냅니다 . &lt;code&gt;startIdx&lt;/code&gt; 로 끝나는 시퀀스 가 올바르게 구성된 코드 포인트를 나타내지 않으면 &lt;a href=&quot;std_utf#UTFException&quot;&gt; &lt;code&gt;std.utf.UTFException&lt;/code&gt; 이&lt;/a&gt; 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="889c0950d259fdd1770d4352caaa61ee9bbab7af" translate="yes" xml:space="preserve">
          <source>Returns the index of the first occurrence of type T in the sequence of zero or more types TList. If not found, -1 is returned.</source>
          <target state="translated">0 개 이상의 유형 TList 순서로 T 유형이 처음 나타나는 색인을 리턴합니다. 찾을 수 없으면 -1이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="e931d883ec5d22b5c4835731ae9c1d50e68c80c7" translate="yes" xml:space="preserve">
          <source>Returns the index of the last occurrence of any of the elements in &lt;code&gt; needles&lt;/code&gt; in &lt;code&gt;haystack&lt;/code&gt;. If no element of &lt;code&gt;needles&lt;/code&gt; is found, then &lt;code&gt;-1&lt;/code&gt; is returned. The &lt;code&gt;stopIdx&lt;/code&gt; slices &lt;code&gt;haystack&lt;/code&gt; in the following way &lt;code&gt;s[0 .. stopIdx]&lt;/code&gt;. &lt;code&gt;stopIdx&lt;/code&gt; represents a codeunit index in &lt;code&gt;haystack&lt;/code&gt;. If the sequence ending at &lt;code&gt;startIdx&lt;/code&gt; does not represent a well formed codepoint, then a &lt;a href=&quot;std_utf#UTFException&quot;&gt;&lt;code&gt;std.utf.UTFException&lt;/code&gt;&lt;/a&gt; may be thrown.</source>
          <target state="translated">의 요소의 마지막에 검출 된 위치의 인덱스를 돌려 &lt;code&gt; needles&lt;/code&gt; 에서 &lt;code&gt;haystack&lt;/code&gt; . 의 어떤 요소 경우 &lt;code&gt;needles&lt;/code&gt; 발견되지 않는, 다음 &lt;code&gt;-1&lt;/code&gt; 반환됩니다. &lt;code&gt;stopIdx&lt;/code&gt; 슬라이스 &lt;code&gt;haystack&lt;/code&gt; 다음과 같은 방법으로 &lt;code&gt;s[0 .. stopIdx]&lt;/code&gt; . &lt;code&gt;stopIdx&lt;/code&gt; 는 &lt;code&gt;haystack&lt;/code&gt; 의 코드 단위 색인을 나타냅니다 . &lt;code&gt;startIdx&lt;/code&gt; 로 끝나는 시퀀스 가 올바르게 구성된 코드 포인트를 나타내지 않으면 &lt;a href=&quot;std_utf#UTFException&quot;&gt; &lt;code&gt;std.utf.UTFException&lt;/code&gt; 이&lt;/a&gt; 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="44899dea6e6a128d15b3d41dff6d69cd60cf0bad" translate="yes" xml:space="preserve">
          <source>Returns the index of the visited record.</source>
          <target state="translated">방문한 레코드의 색인을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f6209ce86a43f6337d98185a61c24687906bf36b" translate="yes" xml:space="preserve">
          <source>Returns the indices range.</source>
          <target state="translated">인덱스 범위를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b915b1c9abc6423470a88454652ad086fbaa08c5" translate="yes" xml:space="preserve">
          <source>Returns the inferred type of the loop variable when a variable of type T is iterated over using a &lt;code&gt;foreach&lt;/code&gt; loop with a single loop variable and automatically inferred return type. Note that this may not be the same as &lt;code&gt;std.range.ElementType!Range&lt;/code&gt; in the case of narrow strings, or if T has both opApply and a range interface.</source>
          <target state="translated">단일 루프 변수가 있는 &lt;code&gt;foreach&lt;/code&gt; 루프를 사용하여 자동으로 유추 된 리턴 유형 인 foreach 루프를 사용하여 T 유형의 변수가 반복 될 때 루프 변수의 유추 된 유형을 리턴합니다. 좁은 문자열의 경우 또는 T에 opApply 및 범위 인터페이스가 모두있는 경우 &lt;code&gt;std.range.ElementType!Range&lt;/code&gt; 와 동일하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd94a60676de8ad7ed4575e7867ec54c92dcf156" translate="yes" xml:space="preserve">
          <source>Returns the integer portion of x, dropping the fractional portion. This is also known as &quot;chop&quot; rounding. &lt;code&gt;pure&lt;/code&gt; on all platforms.</source>
          <target state="translated">소수 부분을 제거하면서 x의 정수 부분을 반환합니다. &quot;잘라 내기&quot;라운딩이라고도합니다. 모든 플랫폼에서 &lt;code&gt;pure&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="e46b47aed6b380cc1ff8e57b7645e1319703edf2" translate="yes" xml:space="preserve">
          <source>Returns the interface type that best matches &lt;code&gt;R&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; 과 가장 일치하는 인터페이스 유형을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="671b7d7586b93eba9a32749549e3f1c69838f496" translate="yes" xml:space="preserve">
          <source>Returns the interface type that best matches the range.</source>
          <target state="translated">범위와 가장 일치하는 인터페이스 유형을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="05299cf602d66c99fc042a596c6adba159f570dc" translate="yes" xml:space="preserve">
          <source>Returns the intersection of two intervals</source>
          <target state="translated">두 구간의 교점을 반환</target>
        </trans-unit>
        <trans-unit id="3ba6218a4e90558e8658ad1c2d3e4f6bec2b347c" translate="yes" xml:space="preserve">
          <source>Returns the larger of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 및 &lt;code&gt;y&lt;/code&gt; 중 더 큰 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="774530114a94286cd0a12e5cfdbef5af41dda063" translate="yes" xml:space="preserve">
          <source>Returns the larger of x and y.</source>
          <target state="translated">x와 y 중 큰 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b82b6b14a6999ef79ef83d3e6cd2bc95774d605f" translate="yes" xml:space="preserve">
          <source>Returns the largest allocation size eligible for allocation from the freelist. (If &lt;code&gt;maxSize != chooseAtRuntime&lt;/code&gt;, this is simply an alias for &lt;code&gt;maxSize&lt;/code&gt;.) All allocation requests for sizes greater than or equal to &lt;code&gt;min&lt;/code&gt; and less than or equal to &lt;code&gt;max&lt;/code&gt; are rounded to &lt;code&gt; max&lt;/code&gt; and forwarded to the parent allocator. When the block fitting the same constraint gets deallocated, it is put in the freelist with the allocated size assumed to be &lt;code&gt;max&lt;/code&gt;.</source>
          <target state="translated">자유 목록에서 할당 할 수있는 최대 할당 크기를 반환합니다. (만약 &lt;code&gt;maxSize != chooseAtRuntime&lt;/code&gt; , 이것은 단순히의 별칭 &lt;code&gt;maxSize&lt;/code&gt; .) 이상의 크기 모든 할당 요청은 동일한 &lt;code&gt;min&lt;/code&gt; 미만 또는 동등한 &lt;code&gt;max&lt;/code&gt; 로 반올림 &lt;code&gt; max&lt;/code&gt; 부모 할당 전달. 동일한 구속 조건에 맞는 블록이 할당 해제되면 할당 된 크기가 &lt;code&gt;max&lt;/code&gt; 로 가정 된 프리리스트에 배치됩니다 .</target>
        </trans-unit>
        <trans-unit id="36bda4b3c965a21e06a23f18801ae5d094e0d776" translate="yes" xml:space="preserve">
          <source>Returns the largest type, i.e. T such that T.sizeof is the largest. If more than one type is of the same size, the leftmost argument of these in will be returned.</source>
          <target state="translated">가장 큰 유형, 즉 T.sizeof가 가장 큰 T를 반환합니다. 둘 이상의 유형이 동일한 크기 인 경우 이들의 가장 왼쪽 인수가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="25d9f1c295934166f494926a87ba1444dd4c6d91" translate="yes" xml:space="preserve">
          <source>Returns the last element of the container, in a container-defined order.</source>
          <target state="translated">컨테이너의 마지막 요소를 컨테이너 정의 순서로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="99fd077dd70806ab6bf64e940a35ff0e09376df5" translate="yes" xml:space="preserve">
          <source>Returns the last index of the first occurence of any character that is not an elements in &lt;code&gt;needles&lt;/code&gt; in &lt;code&gt;haystack&lt;/code&gt;. If all element of &lt;code&gt;haystack&lt;/code&gt; are element of &lt;code&gt;needles&lt;/code&gt;&lt;code&gt;-1&lt;/code&gt; is returned.</source>
          <target state="translated">의 요소가 아닌 모든 문자를 선두의 마지막 인덱스를 돌려 &lt;code&gt;needles&lt;/code&gt; 에서 &lt;code&gt;haystack&lt;/code&gt; . 모든 요소 경우 &lt;code&gt;haystack&lt;/code&gt; 의 요소입니다 &lt;code&gt;needles&lt;/code&gt; &lt;code&gt;-1&lt;/code&gt; 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="c7ea8577a6f254fdcb3635f541103bf57268587d" translate="yes" xml:space="preserve">
          <source>Returns the length of the first encoded sequence.</source>
          <target state="translated">첫 번째 인코딩 된 시퀀스의 길이를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1aa3226fa62013c37bb0b319518a9fd77b811ebf" translate="yes" xml:space="preserve">
          <source>Returns the length of the heap.</source>
          <target state="translated">힙의 길이를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="c18db291eab47f7cea157698943589f9d164feda" translate="yes" xml:space="preserve">
          <source>Returns the length of the last encoded sequence.</source>
          <target state="translated">마지막으로 인코딩 된 시퀀스의 길이를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d282c9f383d2a33ead62f10ecc5e1ac3d569e223" translate="yes" xml:space="preserve">
          <source>Returns the length of the longest possible substring, starting from the first code unit, which is validly encoded.</source>
          <target state="translated">유효한 첫 번째 코드 단위부터 시작하여 가능한 가장 긴 하위 문자열의 길이를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3344cd849734a78abc071ab3b801f34d9c70a4a0" translate="yes" xml:space="preserve">
          <source>Returns the length of the longest possible substring, starting from the first element, which is validly encoded.</source>
          <target state="translated">유효한 첫 번째 요소부터 시작하여 가능한 가장 긴 하위 문자열의 길이를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d80b3e23eca7f81cdfc8fe4a3741af9f063e0987" translate="yes" xml:space="preserve">
          <source>Returns the length of this range. Defined only if all ranges define &lt;code&gt;length&lt;/code&gt;.</source>
          <target state="translated">이 범위의 길이를 돌려줍니다. 모든 범위가 &lt;code&gt;length&lt;/code&gt; 를 정의하는 경우에만 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="f375ec26e829d0c6341e7bdb2dac4c8cd869d04b" translate="yes" xml:space="preserve">
          <source>Returns the mangled name of symbol or type &lt;code&gt;sth&lt;/code&gt;.</source>
          <target state="translated">맹 글링 된 기호 이름 또는 &lt;code&gt;sth&lt;/code&gt; 유형을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="249712de91cee0e6e352a45df0d10104d9153b82" translate="yes" xml:space="preserve">
          <source>Returns the maximum number of elements that can be stored in the container without triggering a reallocation.</source>
          <target state="translated">재 할당을 트리거하지 않고 컨테이너에 저장할 수있는 최대 요소 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f6bcc56ddd4b16c4ee0924ae1ede125e43f8b6cc" translate="yes" xml:space="preserve">
          <source>Returns the maximum number of milliseconds the app is allowed to wait before curl_multi_socket() or curl_multi_perform() must be called (to allow libcurl's timed events to take place).</source>
          <target state="translated">curl_multi_socket () 또는 curl_multi_perform ()을 호출하기 전에 앱에서 대기 할 수있는 최대 시간 (밀리 초)을 반환합니다 (libcurl의 시간 초과 이벤트가 발생하도록 허용).</target>
        </trans-unit>
        <trans-unit id="d01eb1576c0fd6a07fe4aff157995910714f0579" translate="yes" xml:space="preserve">
          <source>Returns the minimum alignment of all data returned by the allocator. An allocator may implement &lt;code&gt;alignment&lt;/code&gt; as a statically-known &lt;code&gt;enum&lt;/code&gt; value only. Applications that need dynamically-chosen alignment values should use the &lt;code&gt;alignedAllocate&lt;/code&gt; and &lt;code&gt;alignedReallocate&lt;/code&gt; APIs.</source>
          <target state="translated">할당자가 반환 한 모든 데이터의 최소 정렬을 반환합니다. 할당자는 정적으로 알려진 &lt;code&gt;enum&lt;/code&gt; 값으로 만 &lt;code&gt;alignment&lt;/code&gt; 을 구현할 수 있습니다 . 동적으로 선택된 정렬 값이 필요한 애플리케이션은 &lt;code&gt;alignedAllocate&lt;/code&gt; 및 &lt;code&gt;alignedReallocate&lt;/code&gt; API를 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="92eeacc8559b5212b274f6522dbca789ac07ae56" translate="yes" xml:space="preserve">
          <source>Returns the most negative value of the numeric type T.</source>
          <target state="translated">숫자 유형 T의 가장 음수 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6e703aa68d3677a6418df0b63a2e273835fbb77c" translate="yes" xml:space="preserve">
          <source>Returns the most recently generated value by shallow copy.</source>
          <target state="translated">얕은 복사로 가장 최근에 생성 된 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5c299edf68821ee75ebc479b8a7d41e944e4f992" translate="yes" xml:space="preserve">
          <source>Returns the most recently generated value without executing a copy contructor. Will not compile for element types defining a postblit, because Generator does not return by reference.</source>
          <target state="translated">복사 생성자를 실행하지 않고 가장 최근에 생성 된 값을 반환합니다. Generator는 참조로 반환되지 않으므로 포스트 블릿을 정의하는 요소 유형에 대해 컴파일되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6aacddb5a82569ad984f219b925a73293d924072" translate="yes" xml:space="preserve">
          <source>Returns the name last used to initialize this &lt;code&gt;File&lt;/code&gt;, if any.</source>
          <target state="translated">이 &lt;code&gt;File&lt;/code&gt; 을 초기화하는 데 마지막으로 사용 된 이름을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="16eace4791215ab06073b1dcea3407f98975712f" translate="yes" xml:space="preserve">
          <source>Returns the name of an encoding.</source>
          <target state="translated">인코딩 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4f014efde2b3af5b22e278b2fe5bbf58862e18c6" translate="yes" xml:space="preserve">
          <source>Returns the name of the last opened file, if any. If a &lt;code&gt;File&lt;/code&gt; was created with &lt;a href=&quot;#tmpfile&quot;&gt;&lt;code&gt;tmpfile&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#wrapFile&quot;&gt;&lt;code&gt;wrapFile&lt;/code&gt;&lt;/a&gt; it has no name.</source>
          <target state="translated">마지막으로 열린 파일의 이름을 반환합니다 (있는 경우). &lt;a href=&quot;#tmpfile&quot;&gt; &lt;code&gt;tmpfile&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#wrapFile&quot;&gt; &lt;code&gt;wrapFile&lt;/code&gt; &lt;/a&gt; 로 &lt;code&gt;File&lt;/code&gt; 을 작성한 경우 이름이 없습니다.</target>
        </trans-unit>
        <trans-unit id="95b9032427f64ceb299627ebe4699571e45b3ca8" translate="yes" xml:space="preserve">
          <source>Returns the negation of this &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;Duration&lt;/code&gt; 의 부정을 돌려 줍니다.</target>
        </trans-unit>
        <trans-unit id="9ed1896d37e33436313b41b09305da4a2f64f069" translate="yes" xml:space="preserve">
          <source>Returns the negation of this &lt;code&gt;TickDuration&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;TickDuration&lt;/code&gt; 의 부정을 돌려줍니다 .</target>
        </trans-unit>
        <trans-unit id="84f861de072e3568536c62569d2e605a957f3f3c" translate="yes" xml:space="preserve">
          <source>Returns the number of arguments of function &lt;code&gt;func&lt;/code&gt;. arity is undefined for variadic functions.</source>
          <target state="translated">&lt;code&gt;func&lt;/code&gt; 함수의 인수 개수를 반환합니다 . 가변성 함수에는 arity가 정의되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="da1255b03babc2c68019abedb893d51a4db6a8fa" translate="yes" xml:space="preserve">
          <source>Returns the number of bytes allocated for the current thread since program start. It is the same as GC.stats().allocatedInCurrentThread, but faster.</source>
          <target state="translated">프로그램 시작 이후 현재 스레드에 할당 된 바이트 수를 반환합니다. GC.stats (). allocatedInCurrentThread와 동일하지만 더 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="8bee738dc938b7cdffacfbf7540aaaf7c9d8d8f6" translate="yes" xml:space="preserve">
          <source>Returns the number of code units required to encode a single code point.</source>
          <target state="translated">단일 코드 포인트를 인코딩하는 데 필요한 코드 단위 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f042289c8e7065924d012ee4a845daf060371493" translate="yes" xml:space="preserve">
          <source>Returns the number of code units that are required to encode &lt;code&gt;str&lt;/code&gt; in a string whose character type is &lt;code&gt;C&lt;/code&gt;. This is particularly useful when slicing one string with the length of another and the two string types use different character types.</source>
          <target state="translated">문자 유형이 &lt;code&gt;C&lt;/code&gt; 인 문자열에서 &lt;code&gt;str&lt;/code&gt; 을 인코딩하는 데 필요한 코드 단위 수를 리턴합니다 . 이것은 한 문자열을 다른 문자열의 길이로 슬라이스 할 때 특히 유용하며 두 문자열 유형은 서로 다른 문자 유형을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="77d4f76badcda8e9ded16546440aeb406137898c" translate="yes" xml:space="preserve">
          <source>Returns the number of code units that are required to encode the code point &lt;code&gt;c&lt;/code&gt; when &lt;code&gt;C&lt;/code&gt; is the character type used to encode it.</source>
          <target state="translated">&lt;code&gt;C&lt;/code&gt; 가 인코딩에 사용 된 문자 유형 인 경우 코드 포인트 &lt;code&gt;c&lt;/code&gt; 를 인코딩하는 데 필요한 코드 단위 수를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="ca33c0bd21f5610ff9748493c387c61f2fda847c" translate="yes" xml:space="preserve">
          <source>Returns the number of days from the current day of the week to the given day of the week. If they are the same, then the result is 0.</source>
          <target state="translated">현재 요일에서 주어진 요일까지의 일 수를 반환합니다. 동일한 경우 결과는 0입니다.</target>
        </trans-unit>
        <trans-unit id="2d4beed58f26f66976d2d26980a8559d762abfa2" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the array.</source>
          <target state="translated">배열의 요소 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8a57716287a6a9521e772d7a1fd31448a83d0c77" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the array. This is a fixed quantity for static arrays. It is of type &lt;code&gt;size_t&lt;/code&gt;.</source>
          <target state="translated">배열의 요소 수를 반환합니다. 정적 배열의 고정 수량입니다. &lt;code&gt;size_t&lt;/code&gt; 유형 입니다.</target>
        </trans-unit>
        <trans-unit id="1106e6d14a4d6f822e0e0f8561de2bb8ca0c3ec8" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the container.</source>
          <target state="translated">컨테이너의 요소 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="199c64409bc79be2571c309155abb0254bfd3129" translate="yes" xml:space="preserve">
          <source>Returns the number of hnsecs since midnight, January 1st, 1 A.D. for the current time.</source>
          <target state="translated">현재 시간으로 AD 1 월 1 일 자정 이후의 hnsec 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="00b2ac0315bafc2024b732f9828782865eb3741e" translate="yes" xml:space="preserve">
          <source>Returns the number of months from the current months of the year to the given month of the year. If they are the same, then the result is 0.</source>
          <target state="translated">해당 연도의 현재 달에서 주어진 달의 월 수를 반환합니다. 동일한 경우 결과는 0입니다.</target>
        </trans-unit>
        <trans-unit id="4d054fab054046589eb612181607ff62f554a611" translate="yes" xml:space="preserve">
          <source>Returns the number of ubytes required to encode this code point.</source>
          <target state="translated">이 코드 포인트를 인코딩하는 데 필요한 바이트 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="81661f7f4bce89ee3210938161109929ef601ef8" translate="yes" xml:space="preserve">
          <source>Returns the number of worker threads in the pool.</source>
          <target state="translated">풀의 작업자 스레드 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ec295b8b797d90565601839fb8e33f1e2e669939" translate="yes" xml:space="preserve">
          <source>Returns the overlapping portion, if any, of two arrays. Unlike &lt;code&gt;equal&lt;/code&gt;, &lt;code&gt;overlap&lt;/code&gt; only compares the pointers and lengths in the ranges, not the values referred by them. If &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt; have an overlapping slice, returns that slice. Otherwise, returns the null slice.</source>
          <target state="translated">두 배열의 겹치는 부분을 반환합니다 (있는 경우). &lt;code&gt;equal&lt;/code&gt; 과 달리 , &lt;code&gt;overlap&lt;/code&gt; 은 포인터가 참조하는 값이 아니라 범위의 포인터와 길이 만 비교합니다. 경우 &lt;code&gt;r1&lt;/code&gt; 과 &lt;code&gt;r2&lt;/code&gt; 중복 슬라이스, 반환하는 조각이있다. 그렇지 않으면 널 슬라이스를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="321af17a1a8b3524d2b5469db55cf50acd8d3868" translate="yes" xml:space="preserve">
          <source>Returns the parent directory of &lt;code&gt;path&lt;/code&gt;. On Windows, this includes the drive letter if present. If &lt;code&gt;path&lt;/code&gt; is a relative path and the parent directory is the current working directory, returns &lt;code&gt;&quot;.&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 의 상위 디렉토리를 반환합니다 . Windows에서는 드라이브 문자 (있는 경우)가 포함됩니다. 경우 &lt;code&gt;path&lt;/code&gt; 상대 경로이며, 부모 디렉토리가 현재 작업 디렉토리, 반환이다 &lt;code&gt;&quot;.&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4578fae06fb06a91735f645190d40809e2f11b95" translate="yes" xml:space="preserve">
          <source>Returns the parent directory of path. On Windows, this includes the drive letter if present.</source>
          <target state="translated">경로의 부모 디렉토리를 반환합니다. Windows의 경우 드라이브 문자가있는 경우 드라이브 문자가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="9512270ccd2cfcb2d7f82e03f39252859250ba10" translate="yes" xml:space="preserve">
          <source>Returns the path to a directory for temporary files.</source>
          <target state="translated">임시 파일의 디렉토리 경로를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="56224efa181d714853658dcc0e19b52cef28aa09" translate="yes" xml:space="preserve">
          <source>Returns the path to the file pointed to by a symlink. Note that the path could be either relative or absolute depending on the symlink. If the path is relative, it's relative to the symlink, not the current working directory.</source>
          <target state="translated">심볼릭 링크가 가리키는 파일의 경로를 반환합니다. 심볼릭 링크에 따라 경로는 상대적이거나 절대적 일 수 있습니다. 경로가 상대 경로 인 경우 경로는 현재 작업 디렉토리가 아닌 심볼릭 링크를 기준으로합니다.</target>
        </trans-unit>
        <trans-unit id="3c71e7cca19c90198675c769f0518c4563bf0bf6" translate="yes" xml:space="preserve">
          <source>Returns the path to the file represented by this &lt;code&gt;DirEntry&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;DirEntry&lt;/code&gt; 로 나타내지는 파일의 패스를 돌려 줍니다 .</target>
        </trans-unit>
        <trans-unit id="73f82fd82f087a2d8b1562865447419684dd7227" translate="yes" xml:space="preserve">
          <source>Returns the physical index into the source range corresponding to a given logical index. This is useful, for example, when indexing an &lt;code&gt;Indexed&lt;/code&gt; without adding another layer of indirection.</source>
          <target state="translated">지정된 논리적 인덱스에 해당하는 물리적 인덱스를 소스 범위로 반환합니다. 예를 들어 다른 간접 레이어를 추가하지 않고 &lt;code&gt;Indexed&lt;/code&gt; 를 인덱싱 할 때 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="09b8ad97be41c76b883bd81d1751cfdd2c8451a4" translate="yes" xml:space="preserve">
          <source>Returns the positive difference between x and y.</source>
          <target state="translated">x와 y의 양의 차이를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6db0cbcc3cc3604c5299ef581ce233e24c1d82b6" translate="yes" xml:space="preserve">
          <source>Returns the process ID of the calling process, which is guaranteed to be unique on the system. This call is always successful.</source>
          <target state="translated">시스템에서 고유 한 호출 프로세스의 프로세스 ID를 리턴합니다. 이 전화는 항상 성공합니다.</target>
        </trans-unit>
        <trans-unit id="8dd04640c0b938a634b031ccbda38f7904013729" translate="yes" xml:space="preserve">
          <source>Returns the process ID of the current process, which is guaranteed to be unique on the system.</source>
          <target state="translated">현재 프로세스의 프로세스 ID를 반환하며 시스템에서 고유해야합니다.</target>
        </trans-unit>
        <trans-unit id="4e9bc0a024c6ee761be8d5d5c4e1e0821e589fa4" translate="yes" xml:space="preserve">
          <source>Returns the process ID of the current thread, which is guaranteed to be unique within the current process.</source>
          <target state="translated">현재 프로세스 내에서 고유 한 것이 보장되는 현재 스레드의 프로세스 ID를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="45dbdafb829d5aeae4f7251a3a8ea958fdf69767" translate="yes" xml:space="preserve">
          <source>Returns the projection of &lt;code&gt;z&lt;/code&gt; onto the Riemann sphere.</source>
          <target state="translated">리만 구 에 &lt;code&gt;z&lt;/code&gt; 의 투영을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="96fdff33f644f52d834920298f651dfa04b1b8f5" translate="yes" xml:space="preserve">
          <source>Returns the representation of a string, which has the same type as the string except the character type is replaced by &lt;code&gt;ubyte&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt;, or &lt;code&gt;uint&lt;/code&gt; depending on the character width.</source>
          <target state="translated">문자 유형이 문자 너비에 따라 &lt;code&gt;ubyte&lt;/code&gt; , &lt;code&gt;ushort&lt;/code&gt; 또는 &lt;code&gt;uint&lt;/code&gt; 로 대체된다는 점을 제외하고 문자열과 동일한 유형의 문자열 표현을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="fbfb1494265bb90efa067ca3a8d809221a83c406" translate="yes" xml:space="preserve">
          <source>Returns the representation of an enumerated value, i.e. the value converted to the base type of the enumeration.</source>
          <target state="translated">열거 된 값의 표현, 즉 열거의 기본 유형으로 변환 된 값을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="eacbf053d05df4a98ab19bdf1a2baacfc82885bb" translate="yes" xml:space="preserve">
          <source>Returns the rightmost element.</source>
          <target state="translated">가장 오른쪽에있는 요소를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d1aaff92f7ac14d8d8413f0b432ac0871d86e2ef" translate="yes" xml:space="preserve">
          <source>Returns the root directory of the specified path, or &lt;code&gt;null&lt;/code&gt; if the path is not rooted.</source>
          <target state="translated">지정된 경로의 루트 디렉토리를 반환하거나 경로가 루팅되지 않은 경우 &lt;code&gt;null&lt;/code&gt; 을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7ac3232dbb34dd85e2aafffdad48fc59828f2927" translate="yes" xml:space="preserve">
          <source>Returns the scoped object.</source>
          <target state="translated">범위가 지정된 개체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="493325a3d5dab747bf95d9f4e75f748c30885086" translate="yes" xml:space="preserve">
          <source>Returns the sequence of ubytes to be used to represent any character which cannot be represented in the encoding scheme.</source>
          <target state="translated">인코딩 체계로 표현할 수없는 문자를 나타내는 데 사용되는 일련의 ubyte를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="96303d78aae7a3eb2d5802a6d0222688f9d3ce90" translate="yes" xml:space="preserve">
          <source>Returns the size in bytes of the state that needs to be allocated to hold an object of type &lt;code&gt;T&lt;/code&gt;. &lt;code&gt;stateSize!T&lt;/code&gt; is zero for &lt;code&gt;struct&lt;/code&gt;s that are not nested and have no nonstatic member variables.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 유형의 객체를 보유하기 위해 할당해야하는 상태의 크기를 바이트 단위로 반환합니다 . 중첩되지 않고 비 정적 멤버 변수가없는 &lt;code&gt;struct&lt;/code&gt; 의 경우 &lt;code&gt;stateSize!T&lt;/code&gt; 는 0입니다 .</target>
        </trans-unit>
        <trans-unit id="e87852a3e8a4a6fc449246d5c78ae917e2c7c8b9" translate="yes" xml:space="preserve">
          <source>Returns the size of the dynamic array reference, which is 8 in 32-bit builds and 16 on 64-bit builds.</source>
          <target state="translated">32 비트 빌드에서 8, 64 비트 빌드에서 16 인 동적 배열 참조의 크기를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="8ca27f7e922328e0fb10faffa49cf072fe4695e1" translate="yes" xml:space="preserve">
          <source>Returns the size of the file in bytes, ulong.max if file is not searchable or throws if the operation fails.</source>
          <target state="translated">파일 크기를 바이트 단위로 반환하고, 파일을 검색 할 수 없으면 ulong.max를 반환하고 작업이 실패하면 throw합니다.</target>
        </trans-unit>
        <trans-unit id="f79656b0cc42593d4401d973a3d027503402e732" translate="yes" xml:space="preserve">
          <source>Returns the size of the reference to the associative array; it is 4 in 32-bit builds and 8 on 64-bit builds.</source>
          <target state="translated">연관 배열에 대한 참조의 크기를 리턴합니다. 32 비트 빌드에서는 4 개, 64 비트 빌드에서는 8 개입니다.</target>
        </trans-unit>
        <trans-unit id="601c25350e5245a238d4b931b4d1fddb2b7ecc83" translate="yes" xml:space="preserve">
          <source>Returns the size of the the file represented by this &lt;code&gt;DirEntry&lt;/code&gt; in bytes.</source>
          <target state="translated">이 &lt;code&gt;DirEntry&lt;/code&gt; 로 나타내지는 파일의 사이즈를 바이트 단위로 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="31534bf9e90fc4bdc3997da282f5c5b6cc34c918" translate="yes" xml:space="preserve">
          <source>Returns the smaller of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 및 &lt;code&gt;y&lt;/code&gt; 중 더 작은 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="1e59811a73811118f24b9562e672888954bba9c3" translate="yes" xml:space="preserve">
          <source>Returns the smaller of x and y.</source>
          <target state="translated">x와 y 중 작은 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e603fd939a4c87b988df58c7cfb79623f4360f1e" translate="yes" xml:space="preserve">
          <source>Returns the smallest allocation size eligible for allocation from the freelist. (If &lt;code&gt;minSize != chooseAtRuntime&lt;/code&gt;, this is simply an alias for &lt;code&gt;minSize&lt;/code&gt;.)</source>
          <target state="translated">자유 목록에서 할당 할 수있는 가장 작은 할당 크기를 반환합니다. (경우 &lt;code&gt;minSize != chooseAtRuntime&lt;/code&gt; ,이 단지의 별칭입니다 &lt;code&gt;minSize&lt;/code&gt; .)</target>
        </trans-unit>
        <trans-unit id="ef6232c466247ae9de666013ca5c3a93a69fa2ba" translate="yes" xml:space="preserve">
          <source>Returns the source range.</source>
          <target state="translated">소스 범위를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="591f6c56efd9acbfdec07185df39a5b4a3e28087" translate="yes" xml:space="preserve">
          <source>Returns the stack bottom of the currently active stack within the calling thread.</source>
          <target state="translated">호출 스레드 내에서 현재 활성 스택의 스택 맨 아래를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="93c6bbcacf562ff819cd9ac347d742eb0bf6819b" translate="yes" xml:space="preserve">
          <source>Returns the stack top of the currently active stack within the calling thread.</source>
          <target state="translated">호출 스레드 내에서 현재 활성 스택의 스택 맨을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="d690f4e2e0ce175d0cb0849639d9c24d3eb70975" translate="yes" xml:space="preserve">
          <source>Returns the standard name of the encoding scheme</source>
          <target state="translated">인코딩 체계의 표준 이름을 반환</target>
        </trans-unit>
        <trans-unit id="32420c2bb7df1a4f61f11f0c93c63a3593e1b183" translate="yes" xml:space="preserve">
          <source>Returns the string representation of a Document. (That is, the complete XML of a document).</source>
          <target state="translated">Document의 캐릭터 라인 표현을 돌려줍니다. (즉, 문서의 완전한 XML입니다).</target>
        </trans-unit>
        <trans-unit id="f48a3f0285b5c3854854b7d954a862bbf8dc6fa1" translate="yes" xml:space="preserve">
          <source>Returns the string representation of a Tag</source>
          <target state="translated">태그의 문자열 표현을 반환</target>
        </trans-unit>
        <trans-unit id="7adbfbc0dd01ac5fbde4a960d0c7893ef13eef88" translate="yes" xml:space="preserve">
          <source>Returns the string representation of an Element</source>
          <target state="translated">요소의 문자열 표현을 반환</target>
        </trans-unit>
        <trans-unit id="3feae15df05810e505c4845a2fe9c2db9e1ab993" translate="yes" xml:space="preserve">
          <source>Returns the subrange containing all elements &lt;code&gt;e&lt;/code&gt; for which both &lt;code&gt; pred(e, value)&lt;/code&gt; and &lt;code&gt;pred(value, e)&lt;/code&gt; evaluate to &lt;code&gt;false&lt;/code&gt; (e.g., if &lt;code&gt;pred&lt;/code&gt; is &quot;less than&quot;, returns the portion of the range with elements equal to &lt;code&gt;value&lt;/code&gt;). Uses a classic binary search with interval halving until it finds a value that satisfies the condition, then uses &lt;code&gt;SearchPolicy.gallopBackwards&lt;/code&gt; to find the left boundary and &lt;code&gt;SearchPolicy.gallop&lt;/code&gt; to find the right boundary. These policies are justified by the fact that the two boundaries are likely to be near the first found value (i.e., equal ranges are relatively small). Completes the entire search in &amp;Omicron;(&lt;code&gt;log(n)&lt;/code&gt;) time.</source>
          <target state="translated">&lt;code&gt; pred(e, value)&lt;/code&gt; 및 &lt;code&gt;pred(value, e)&lt;/code&gt; 가 모두 &lt;code&gt;false&lt;/code&gt; 로 평가 되는 모든 요소 &lt;code&gt;e&lt;/code&gt; 가 포함 된 하위 범위를 반환합니다 (예 : &lt;code&gt;pred&lt;/code&gt; 가 &quot;보다 작음&quot;인 경우 요소가 &lt;code&gt;value&lt;/code&gt; 와 동일한 범위의 일부를 반환 ). 용도 간격 반감을 가진 고전적인 이진 검색을이 조건이 다음 사용을 만족하는 값 찾을 때까지 &lt;code&gt;SearchPolicy.gallopBackwards&lt;/code&gt; 을 왼쪽 경계 찾을 &lt;code&gt;SearchPolicy.gallop&lt;/code&gt; 을 적절한 경계를 찾을 수 있습니다. 이러한 정책은 두 경계가 처음 발견 된 값에 근접 할 가능성이 높다는 사실에 의해 정당화됩니다 (즉, 동일한 범위는 상대적으로 작습니다). &amp;Omicron; ( &lt;code&gt;log(n)&lt;/code&gt; 에서 전체 검색 완료) 시각.</target>
        </trans-unit>
        <trans-unit id="888f212e68c70b549e5a35b8b7b97bff1b381c73" translate="yes" xml:space="preserve">
          <source>Returns the tail of &lt;code&gt;range&lt;/code&gt; augmented with length information</source>
          <target state="translated">길이 정보로 보강 된 &lt;code&gt;range&lt;/code&gt; 의 꼬리를 반환</target>
        </trans-unit>
        <trans-unit id="9244c816e0f2c52d4d4ee859f67b142bc1bf8cc7" translate="yes" xml:space="preserve">
          <source>Returns the target type of a pointer.</source>
          <target state="translated">포인터의 대상 유형을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d8c28e5955ca04b50866b4585fe591a09c3f37a3" translate="yes" xml:space="preserve">
          <source>Returns the time that the file represented by this &lt;code&gt;DirEntry&lt;/code&gt; was last accessed.</source>
          <target state="translated">이 &lt;code&gt;DirEntry&lt;/code&gt; 가 나타내는 파일 이 마지막으로 액세스 된 시간을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="5f119cf7d21455fbe20f1d432bc51a054d2388b1" translate="yes" xml:space="preserve">
          <source>Returns the time that the file represented by this &lt;code&gt;DirEntry&lt;/code&gt; was last changed (not only in contents, but also in permissions or ownership).</source>
          <target state="translated">이 &lt;code&gt;DirEntry&lt;/code&gt; 가 나타내는 파일 이 마지막으로 변경된 시간을 반환합니다 (내용뿐만 아니라 권한 또는 소유권도).</target>
        </trans-unit>
        <trans-unit id="ac35c19630d6ddeda76160c5b47e01dc09e4a04d" translate="yes" xml:space="preserve">
          <source>Returns the time that the file represented by this &lt;code&gt;DirEntry&lt;/code&gt; was last modified.</source>
          <target state="translated">이 &lt;code&gt;DirEntry&lt;/code&gt; 가 나타내는 파일 이 마지막으로 수정 된 시간을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="6688282669b705a2b55a3647db89fd9441e933d5" translate="yes" xml:space="preserve">
          <source>Returns the time that the given file was last accessed.</source>
          <target state="translated">주어진 파일에 마지막으로 액세스 한 시간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1ff602a4bf2c63582b21dac98a0d7e10d15ff14a" translate="yes" xml:space="preserve">
          <source>Returns the time that the given file was last changed.</source>
          <target state="translated">주어진 파일이 마지막으로 변경된 시간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="688f9686503d322c7ee15caecd64dff61aa00317" translate="yes" xml:space="preserve">
          <source>Returns the time that the given file was last modified.</source>
          <target state="translated">주어진 파일이 마지막으로 수정 된 시간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a44c44de2d516914dc5397a80c7b4afcba2dc3a5" translate="yes" xml:space="preserve">
          <source>Returns the time that the given file was last modified. If the file does not exist, returns &lt;code&gt;returnIfMissing&lt;/code&gt;.</source>
          <target state="translated">주어진 파일이 마지막으로 수정 된 시간을 반환합니다. 파일이 존재하지 않으면 &lt;code&gt;returnIfMissing&lt;/code&gt; 을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="0ddf312cc43f1db53aed7724668c2e84910528ab" translate="yes" xml:space="preserve">
          <source>Returns the time, in seconds since 1 Jan 1970 of the time string given in the first argument. The time argument in the second parameter is unused and should be set to NULL.</source>
          <target state="translated">첫 번째 인수에 제공된 시간 문자열의 1970 년 1 월 1 일 이후의 시간을 초 단위로 반환합니다. 두 번째 매개 변수의 시간 인수는 사용되지 않으며 NULL로 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="89c704f29b2f36050d81767dc5fd00a04bedc644" translate="yes" xml:space="preserve">
          <source>Returns the total number of code points encoded in &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; 로 인코딩 된 총 코드 포인트 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="f03f9b4a973225346d2de60b005a12c3a18a7233" translate="yes" xml:space="preserve">
          <source>Returns the total number of code points encoded in a ubyte array.</source>
          <target state="translated">ubyte 배열로 인코딩 된 총 코드 포인트 수를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="432c8ff552adeafe874cdfb7c72ef94e4a6306de" translate="yes" xml:space="preserve">
          <source>Returns the total number of hecto-nanoseconds in this &lt;code&gt;TickDuration&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;TickDuration&lt;/code&gt; 의 총 hecto -nanoseconds 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="6c865f4d77e9800572e98a2f1a5d9b39a0d7efc0" translate="yes" xml:space="preserve">
          <source>Returns the total number of microseconds in this &lt;code&gt;TickDuration&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;TickDuration&lt;/code&gt; 의 총 마이크로 초 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="648fc3b3189535dd15c9a6a00e81e8095cc6bed5" translate="yes" xml:space="preserve">
          <source>Returns the total number of milliseconds in this &lt;code&gt;TickDuration&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;TickDuration&lt;/code&gt; 의 총 밀리 초 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a8cd34fbc38761c3f13e5c165c425b258ccd54b6" translate="yes" xml:space="preserve">
          <source>Returns the total number of nanoseconds in this &lt;code&gt;TickDuration&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;TickDuration&lt;/code&gt; 의 총 나노초 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="8854f536858e89b78eb3d04de3465d6d35dea0b7" translate="yes" xml:space="preserve">
          <source>Returns the total number of seconds in this &lt;code&gt;TickDuration&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;TickDuration&lt;/code&gt; 의 총 시간 (초)을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="9abcff9844851c2944de9152e2bcfed4b6e58b33" translate="yes" xml:space="preserve">
          <source>Returns the total number of the given units in this &lt;code&gt;Duration&lt;/code&gt;. So, unlike &lt;code&gt;split&lt;/code&gt;, it does not strip out the larger units.</source>
          <target state="translated">이 &lt;code&gt;Duration&lt;/code&gt; 내의 지정된 단위의 총수를 돌려 줍니다. 따라서 &lt;code&gt;split&lt;/code&gt; 과 달리 더 큰 단위를 제거하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="37e7f4820738c99b6518e081fb070ea7c6f748f3" translate="yes" xml:space="preserve">
          <source>Returns the true size of the memory block referenced by p. This value represents the maximum number of bytes for which a call to realloc may resize the existing block in place. If p references memory not originally allocated by this garbage collector, points to the interior of a memory block, or if p is null, zero will be returned.</source>
          <target state="translated">p가 참조하는 메모리 블록의 실제 크기를 반환합니다. 이 값은 realloc 호출이 기존 블록의 크기를 조정할 수있는 최대 바이트 수를 나타냅니다. p가이 가비지 수집기에 의해 원래 할당되지 않은 메모리를 참조하면 메모리 블록의 내부를 가리 키거나 p가 null이면 0이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="5d9315a66df13738ae6d32b7a4329655f0950696" translate="yes" xml:space="preserve">
          <source>Returns the type from TList that is the most derived from type T. If none are found, T is returned.</source>
          <target state="translated">T 유형에서 가장 많이 파생 된 TList에서 유형을 반환합니다. 찾을 수없는 경우 T가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="7dab75c2d8a3b6409914b5370705b9824076cf3b" translate="yes" xml:space="preserve">
          <source>Returns the type of &lt;code&gt;Target&lt;/code&gt; with the &quot;constness&quot; of &lt;code&gt;Source&lt;/code&gt;. A type's &lt;b&gt;constness&lt;/b&gt; refers to whether it is &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;immutable&lt;/code&gt;, or &lt;code&gt;inout&lt;/code&gt;. If &lt;code&gt;source&lt;/code&gt; has no constness, the returned type will be the same as &lt;code&gt;Target&lt;/code&gt;.</source>
          <target state="translated">&quot;constness&quot;가 &lt;code&gt;Source&lt;/code&gt; 인 &lt;code&gt;Target&lt;/code&gt; 유형을 리턴합니다 . 유형의 &lt;b&gt;constness&lt;/b&gt; 는 그것이 &lt;code&gt;const&lt;/code&gt; , &lt;code&gt;immutable&lt;/code&gt; 또는 &lt;code&gt;inout&lt;/code&gt; 인지를 나타냅니다 . 경우 &lt;code&gt;source&lt;/code&gt; 더 const와이없는, 반환 타입과 동일합니다 &lt;code&gt;Target&lt;/code&gt; .&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="55ead0fcda6b56f722ae8ffb4c7253a168827618" translate="yes" xml:space="preserve">
          <source>Returns the type of &lt;code&gt;ToType&lt;/code&gt; with the &quot;constness&quot; of &lt;code&gt;FromType&lt;/code&gt;. A type's &lt;b&gt;constness&lt;/b&gt; refers to whether it is &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;immutable&lt;/code&gt;, or &lt;code&gt;inout&lt;/code&gt;. If &lt;code&gt;FromType&lt;/code&gt; has no constness, the returned type will be the same as &lt;code&gt;ToType&lt;/code&gt;.</source>
          <target state="translated">의 형태를 돌려줍니다 &lt;code&gt;ToType&lt;/code&gt; 의 &quot;const와&quot;와 &lt;code&gt;FromType&lt;/code&gt; 을 . 유형의 &lt;b&gt;constness&lt;/b&gt; 는 그것이 &lt;code&gt;const&lt;/code&gt; , &lt;code&gt;immutable&lt;/code&gt; 또는 &lt;code&gt;inout&lt;/code&gt; 인지를 나타냅니다 . &lt;code&gt;FromType&lt;/code&gt; 에 constness 가없는 경우 반환 된 유형은 &lt;code&gt;ToType&lt;/code&gt; 과 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="a2aeb4e0b982459aef2c815d392bf403ce3c4473" translate="yes" xml:space="preserve">
          <source>Returns the underlying operating system &lt;code&gt;HANDLE&lt;/code&gt; (Windows only).</source>
          <target state="translated">기본 운영 체제 &lt;code&gt;HANDLE&lt;/code&gt; 을 반환합니다 (Windows 만 해당).</target>
        </trans-unit>
        <trans-unit id="17b2b4a9c5c7bcd9a7354071cc3a5232d4231e10" translate="yes" xml:space="preserve">
          <source>Returns the union of two intervals</source>
          <target state="translated">두 구간의 합집합을 반환합니다</target>
        </trans-unit>
        <trans-unit id="e7c501dac1b7268ced06dc85b80d7924de744411" translate="yes" xml:space="preserve">
          <source>Returns the unprocessed C arguments supplied when the process was started. Use this when you need to supply argc and argv to C libraries.</source>
          <target state="translated">프로세스가 시작될 때 제공된 처리되지 않은 C 인수를 리턴합니다. argc 및 argv를 C 라이브러리에 제공해야 할 때 이것을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="c007f1a37fe33fed3c561280b7a895e57a158e23" translate="yes" xml:space="preserve">
          <source>Returns the value of x rounded downward to the next integer (toward negative infinity).</source>
          <target state="translated">x의 값을 다음 정수 (음의 무한대로)로 내림합니다.</target>
        </trans-unit>
        <trans-unit id="c0c00c639831eba70113ddd96d75683fb58d7421" translate="yes" xml:space="preserve">
          <source>Returns the value of x rounded upward to the next integer (toward positive infinity).</source>
          <target state="translated">x의 값을 다음 정수로 반올림합니다 (양의 무한대로).</target>
        </trans-unit>
        <trans-unit id="445a499f1640526d65d5a8f139903046c3786ff6" translate="yes" xml:space="preserve">
          <source>Returns the value stored in the &lt;code&gt;VariantN&lt;/code&gt; object, either by specifying the needed type or the index in the list of allowed types. The latter overload only applies to bounded variants (e.g. &lt;a href=&quot;#Algebraic&quot;&gt;&lt;code&gt;Algebraic&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">필요한 유형을 지정하거나 허용 된 유형 목록에 색인을 지정 하여 &lt;code&gt;VariantN&lt;/code&gt; 객체에 저장된 값을 반환합니다 . 후자의 과부하는 경계 변형 (예 : &lt;a href=&quot;#Algebraic&quot;&gt; &lt;code&gt;Algebraic&lt;/code&gt; &lt;/a&gt; ) 에만 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="53f9fd0298da963256576aa88b5974b5fec2ec49" translate="yes" xml:space="preserve">
          <source>Returns the value stored in the &lt;code&gt;VariantN&lt;/code&gt; object, explicitly converted (coerced) to the requested type &lt;code&gt; T&lt;/code&gt;. If &lt;code&gt;T&lt;/code&gt; is a string type, the value is formatted as a string. If the &lt;code&gt;VariantN&lt;/code&gt; object is a string, a parse of the string to type &lt;code&gt;T&lt;/code&gt; is attempted. If a conversion is not possible, throws a &lt;code&gt; VariantException&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;VariantN&lt;/code&gt; 객체에 저장된 값 을 요청 된 유형 &lt;code&gt; T&lt;/code&gt; 로 명시 적으로 변환 (강제)합니다 . 경우 &lt;code&gt;T&lt;/code&gt; 는 문자열 유형, 값은 문자열로 지정됩니다. 는 IF &lt;code&gt;VariantN&lt;/code&gt; 의 객체가 문자열, 문자열의 구문 분석을 입력하는 &lt;code&gt;T&lt;/code&gt; 가 시도됩니다. 변환 할 수없는 경우 &lt;code&gt; VariantException&lt;/code&gt; 을 발생시킵니다 .</target>
        </trans-unit>
        <trans-unit id="48189500a40f8c94061c43ce5944a3669d6bfa4e" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;code&gt;fn&lt;/code&gt; accepts variables of type T1 and T2 in any order. The following code should compile:</source>
          <target state="translated">&lt;code&gt;fn&lt;/code&gt; 이 T1 및 T2 유형의 변수를 임의의 순서로 허용하는 경우 true를 리턴합니다 . 다음 코드는 컴파일해야합니다.</target>
        </trans-unit>
        <trans-unit id="d870c305b9b513fe09e9c721a070b449320af29c" translate="yes" xml:space="preserve">
          <source>Returns true if T can be converted to boolean value.</source>
          <target state="translated">T를 부울 값으로 변환 할 수 있으면 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="92392ba9585b402967ab099601644ad8bd94b55e" translate="yes" xml:space="preserve">
          <source>Returns true if T is an instance of the template S.</source>
          <target state="translated">T가 템플릿 S의 인스턴스이면 true를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6539c25106b4f2005acb105be2b679719cddee45" translate="yes" xml:space="preserve">
          <source>Returns true if T is not const or immutable. Note that isMutable is true for string, or immutable(char)[], because the 'head' is mutable.</source>
          <target state="translated">T가 const가 아니거나 불변 인 경우 true를 리턴합니다. 'head'가 변경 가능하므로 isMutable은 문자열 또는 immutable (char) []에 대해 true입니다.</target>
        </trans-unit>
        <trans-unit id="2198152aab84ea1a6b609fc9bd4b6cc95d387179" translate="yes" xml:space="preserve">
          <source>Returns true if all input data has been decompressed and no further data can be decompressed (inflate() returned Z_STREAM_END)</source>
          <target state="translated">모든 입력 데이터가 압축 해제되었고 더 이상 데이터를 압축 해제 할 수없는 경우 true를 리턴합니다 (inflate ()이 Z_STREAM_END를 리턴 함)</target>
        </trans-unit>
        <trans-unit id="fd36125606afbfcb1797e463d3605d76f3b24284" translate="yes" xml:space="preserve">
          <source>Returns true if and only if the &lt;code&gt;VariantN&lt;/code&gt; object holds a valid value (has been initialized with, or assigned from, a valid value).</source>
          <target state="translated">&lt;code&gt;VariantN&lt;/code&gt; 객체에 유효한 값이 있거나 유효한 값으로 초기화되었거나 지정된 값이있는 경우에만 true를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d43c784814e287a641bf4db270b5cbd743297de6" translate="yes" xml:space="preserve">
          <source>Returns true if and only if the UUID is equal to {00000000-0000-0000-0000-000000000000}</source>
          <target state="translated">UUID가 {00000000-0000-0000-0000-000000000000} 인 경우에만 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="c0dbc3cc30ee131794229d2fb5db22ec243b5fb1" translate="yes" xml:space="preserve">
          <source>Returns true if any of the symbols &lt;code&gt;p&lt;/code&gt; resides in the enclosing instantiation scope of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">기호 &lt;code&gt;p&lt;/code&gt; 중 하나 가 &lt;code&gt;s&lt;/code&gt; 의 엔 클로징 인스턴스화 범위에있는 경우 true를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="22613bad77cef50f9c9046836f0a47434aa4b19c" translate="yes" xml:space="preserve">
          <source>Returns true if c is a valid code point</source>
          <target state="translated">c가 유효한 코드 포인트 인 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="23810ab31c324d9a98c14b96b7f48dbc629ea7e1" translate="yes" xml:space="preserve">
          <source>Returns true if function was declared directly or indirectly in a unittest block</source>
          <target state="translated">unittest 블록에서 함수가 직접 또는 간접적으로 선언 된 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="e7b192a44d290f22b2a52787d75d812455e1a7ff" translate="yes" xml:space="preserve">
          <source>Returns true if lhs and rhs are equal.</source>
          <target state="translated">lhs와 rhs가 같으면 true를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7ab2f0f2963444c95e5d2134154cb97c261debda" translate="yes" xml:space="preserve">
          <source>Returns true if the Tag is a start tag</source>
          <target state="translated">태그가 시작 태그 인 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="0bc937d2d630c04cee3d009eb64466e23e412ab9" translate="yes" xml:space="preserve">
          <source>Returns true if the Tag is an empty tag</source>
          <target state="translated">태그가 빈 태그 인 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="d3185a01a1ab62171d02a2ad80c7513b2d9264cb" translate="yes" xml:space="preserve">
          <source>Returns true if the Tag is an end tag</source>
          <target state="translated">태그가 종료 태그 인 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="3b17e172a7b60c4716b624a4986e53e7b2f1b546" translate="yes" xml:space="preserve">
          <source>Returns true if the array is encoded correctly</source>
          <target state="translated">배열이 올바르게 인코딩 된 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="72846752e712dd8b0400faa570281eb1dc2027b2" translate="yes" xml:space="preserve">
          <source>Returns true if the character c can be represented in this encoding scheme.</source>
          <target state="translated">이 인코딩 체계에서 문자 c를 표현할 수 있으면 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="ee11f868a93433cf3721bba9ada0c0e23161b4d7" translate="yes" xml:space="preserve">
          <source>Returns true if the character is a base character according to the XML standard</source>
          <target state="translated">문자가 XML 표준에 따라 기본 문자이면 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="6ed6e26873b798abcb2be5a23ca0eb9d4ce764bc" translate="yes" xml:space="preserve">
          <source>Returns true if the character is a character according to the XML standard</source>
          <target state="translated">문자가 XML 표준에 따라 문자이면 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="bb5377ef48ea29e7c3ddbde117c30414bca2a914" translate="yes" xml:space="preserve">
          <source>Returns true if the character is a combining character according to the XML standard</source>
          <target state="translated">문자가 XML 표준에 따라 결합 문자이면 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="581a5bb1cb76c27bc05a09665dff669924e51288" translate="yes" xml:space="preserve">
          <source>Returns true if the character is a digit according to the XML standard</source>
          <target state="translated">문자가 XML 표준에 따라 숫자 인 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="cc80edd02d4ba33cf3880e92daca03f6488bb791" translate="yes" xml:space="preserve">
          <source>Returns true if the character is a letter according to the XML standard</source>
          <target state="translated">문자가 XML 표준에 따라 문자이면 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="4d4254190cbc9ee3956d0b9d34e37b6f91bbceb6" translate="yes" xml:space="preserve">
          <source>Returns true if the character is an extender according to the XML standard</source>
          <target state="translated">XML 표준에 따라 문자가 익스텐더 인 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="98b812df609439a4618cf65118e80281a06d8ef7" translate="yes" xml:space="preserve">
          <source>Returns true if the character is an ideographic character according to the XML standard</source>
          <target state="translated">XML 표준에 따라 문자가 표의 문자 인 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="4d4fefd3a3c0f8d257980f4b1799fcfb3a7786cd" translate="yes" xml:space="preserve">
          <source>Returns true if the character is whitespace according to the XML standard</source>
          <target state="translated">XML 표준에 따라 문자가 공백이면 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="d5013acf48f139e3639053d68ef9b6757f89433c" translate="yes" xml:space="preserve">
          <source>Returns true if the class described by &lt;code&gt;child&lt;/code&gt; derives from or is the class described by this &lt;code&gt;TypeInfo_Class&lt;/code&gt;. Always returns false if the argument is null.</source>
          <target state="translated">&lt;code&gt;child&lt;/code&gt; 가 설명하는 클래스가이 &lt;code&gt;TypeInfo_Class&lt;/code&gt; 가 설명하는 클래스에서 파생되거나 해당 클래스 인 경우 true를 리턴합니다 . 인수가 null이면 항상 false를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="47569ca8b39615ed1ad3396b701a1654b91c2512" translate="yes" xml:space="preserve">
          <source>Returns true if the code unit is legal. For example, the byte 0x80 would not be legal in ASCII, because ASCII code units must always be in the range 0x00 to 0x7F.</source>
          <target state="translated">코드 단위가 유효한 경우 true를 리턴합니다. 예를 들어 ASCII 코드 단위는 항상 0x00 ~ 0x7F 범위에 있어야하므로 바이트 0x80은 ASCII에서 유효하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="90a6fe546782a21f3ba7df3f1dadc4d54092a388" translate="yes" xml:space="preserve">
          <source>Returns true if the content is the empty string</source>
          <target state="translated">내용이 빈 문자열이면 true를 반환</target>
        </trans-unit>
        <trans-unit id="200466eecc8eeb7f6712610d6e36be7c216a97d3" translate="yes" xml:space="preserve">
          <source>Returns true if the current thread is in a critical region; otherwise, false.</source>
          <target state="translated">현재 스레드가 위험 지역에있는 경우 true를 리턴합니다. 그렇지 않으면 거짓입니다.</target>
        </trans-unit>
        <trans-unit id="3ff81a00af8120911ce1e06c2641b13a285ec41f" translate="yes" xml:space="preserve">
          <source>Returns true if the expression may throw exceptions. If 'mustNotThrow' is true, generate an error if it throws</source>
          <target state="translated">식에서 예외가 발생할 수있는 경우 true를 반환합니다. 'mustNotThrow'가 true 인 경우, 오류가 발생하면 오류를 생성하십시오</target>
        </trans-unit>
        <trans-unit id="defec8929bbdd9c3e56c330cda0ff8c4a8f0b0fd" translate="yes" xml:space="preserve">
          <source>Returns true if the generator is empty.</source>
          <target state="translated">생성기가 비어 있으면 true를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c69b80a2c5f787a14025c77620c70d4748cec24e" translate="yes" xml:space="preserve">
          <source>Returns true if the item represents empty XML text</source>
          <target state="translated">항목이 빈 XML 텍스트를 나타내는 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="f49062b1b1da8d0386864b39946993407faf2743" translate="yes" xml:space="preserve">
          <source>Returns true if the string is encoded correctly</source>
          <target state="translated">문자열이 올바르게 인코딩 된 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="c92c02a0a49dde438909607e2409e70c09bc3f51" translate="yes" xml:space="preserve">
          <source>Returns true if there's an extra member which is the 'this' pointer to the enclosing context (enclosing aggregate or function)</source>
          <target state="translated">엔 클로징 컨텍스트 (집계 또는 함수 포함)에 대한 'this'포인터 인 추가 멤버가있는 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="b2a91a6c9819f50c117c6dcfa975ecc94517bac5" translate="yes" xml:space="preserve">
          <source>Returns true if this is not instantiated in non-root module, and is a part of non-speculative instantiatiation.</source>
          <target state="translated">루트가 아닌 모듈에서 인스턴스화되지 않았으며 비 추측 인스턴스화의 일부인 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="d739611ad1542e81fbbbd7f6c69182a53332b0f4" translate="yes" xml:space="preserve">
          <source>Returns true if this symbol is defined in a non-root module without instantiation.</source>
          <target state="translated">이 심볼이 인스턴스화없이 루트가 아닌 모듈에 정의되어 있으면 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="0b9f2680319b7e6a64c0bbb56b7501127db51d33" translate="yes" xml:space="preserve">
          <source>Returns true iff it is possible to represent the specified codepoint in the encoding.</source>
          <target state="translated">인코딩에서 지정된 코드 포인트를 나타낼 수있는 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="b73f6993cc90995562085700b23d2b9d1a31bdc3" translate="yes" xml:space="preserve">
          <source>Returns underlying reference count if it is allocated and initialized (a positive integer), and &lt;code&gt;0&lt;/code&gt; otherwise.</source>
          <target state="translated">기본 참조 카운트가 할당되고 초기화되면 (양의 정수), 그렇지 않으면 &lt;code&gt;0&lt;/code&gt; 을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="47e84ff3cc0a2906d4557a0807365b812012feef" translate="yes" xml:space="preserve">
          <source>Returns utcOffset as a &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">(UTC) OFFSET은로 반환 &lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c0cea6c0c8bb9a0927ce744433ca3aac4b38a0de" translate="yes" xml:space="preserve">
          <source>Returns vendor string, for display purposes only. Do NOT use this to determine features! Note that some CPUs have programmable vendorIDs.</source>
          <target state="translated">표시 목적으로 만 공급 업체 문자열을 반환합니다. 기능을 결정하기 위해 이것을 사용하지 마십시오! 일부 CPU에는 프로그래밍 가능한 vendorID가 있습니다.</target>
        </trans-unit>
        <trans-unit id="e321e4464ea0729c55bacf6d6488ae23c4a221c1" translate="yes" xml:space="preserve">
          <source>Returns what the offset from UTC is at the given std time. It includes the DST offset in effect at that time (if any).</source>
          <target state="translated">주어진 std 시간에 UTC로부터 오프셋이 무엇인지 반환합니다. 해당 시점에 유효한 DST 오프셋이 포함됩니다 (있는 경우).</target>
        </trans-unit>
        <trans-unit id="48510e171f2259637b410e1d6ec7f710f8e1d10b" translate="yes" xml:space="preserve">
          <source>Returns what the offset from UTC is for this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;. It includes the DST offset in effect at that time (if any).</source>
          <target state="translated">이 &lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; 에&lt;/a&gt; 대한 UTC 오프셋을 반환합니다 . 해당 시점에 유효한 DST 오프셋이 포함됩니다 (있는 경우).</target>
        </trans-unit>
        <trans-unit id="3c10cabaff5e9865a97c1d29e61edfcde6f67545" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode Private Use &lt;a href=&quot;#Code%20point&quot;&gt;code point&lt;/a&gt; (general Unicode category: Co).</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 가 유니 코드 개인용 &lt;a href=&quot;#Code%20point&quot;&gt;코드 포인트&lt;/a&gt; 인지 여부를 리턴합니다 (일반 유니 코드 범주 : Co).</target>
        </trans-unit>
        <trans-unit id="8b1c413347814e12626e1a890ec0821fce680f1c" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode alphabetic &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt; (general Unicode category: Alphabetic).</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 가 유니 코드 알파벳 &lt;a href=&quot;#Character&quot;&gt;문자&lt;/a&gt; 인지 여부를 리턴합니다 (일반 유니 코드 카테고리 : 알파벳).</target>
        </trans-unit>
        <trans-unit id="20412304893875ea3e018f7a726da2a8f8476f14" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode alphabetic &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt; or number. (general Unicode category: Alphabetic, Nd, Nl, No).</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 가 유니 코드 알파벳 &lt;a href=&quot;#Character&quot;&gt;문자&lt;/a&gt; 인지 숫자 인지를 반환합니다 . (일반 유니 코드 범주 : 알파벳, Nd, Nl, 아니요).</target>
        </trans-unit>
        <trans-unit id="8052a83c24e57dc4e4444167682783731f57df26" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode control &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt; (general Unicode category: Cc).</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 가 유니 코드 제어 &lt;a href=&quot;#Character&quot;&gt;문자&lt;/a&gt; 인지 여부를 리턴합니다 (일반 유니 코드 범주 : Cc).</target>
        </trans-unit>
        <trans-unit id="48123650fef8c5fbb7ca07365c2df319be52309c" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode formatting &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt; (general Unicode category: Cf).</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 가 유니 코드 형식 &lt;a href=&quot;#Character&quot;&gt;문자&lt;/a&gt; 인지 여부를 리턴합니다 (일반 유니 코드 범주 : Cf).</target>
        </trans-unit>
        <trans-unit id="52cb9f5fdcef562bfd57e037cbe7e5c7fa96ae53" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode graphical &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt; (general Unicode category: L, M, N, P, S, Zs).</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 가 유니 코드 그래픽 &lt;a href=&quot;#Character&quot;&gt;문자&lt;/a&gt; 인지 여부를 리턴합니다 (일반 유니 코드 범주 : L, M, N, P, S, Zs).</target>
        </trans-unit>
        <trans-unit id="e328e581ac0dc24314f31ecbc0908c7abb2f7127" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode high surrogate (lead surrogate).</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 가 유니 코드 상위 대리 (리드 대리) 인지 여부를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="0fe00a23eff6a644a0c6ba70189cfa530b7b6903" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode low surrogate (trail surrogate).</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 가 유니 코드 낮은 대리 (트레일 대리) 인지 여부를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="8c2ff9ed3fdd9c4b449a64051aeedb338901e989" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode mark (general Unicode category: Mn, Me, Mc).</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 가 유니 코드 마크 인지 여부를 리턴합니다 (일반 유니 코드 카테고리 : Mn, Me, Mc).</target>
        </trans-unit>
        <trans-unit id="5edcb59636f6ab1fc5ccf2d42a7f3a7b301dadc8" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode non-character i.e. a &lt;a href=&quot;#Code%20point&quot;&gt;code point&lt;/a&gt; with no assigned abstract character. (general Unicode category: Cn)</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 가 유니 코드가 아닌 문자, 즉 추상 문자가 할당되지 않은 &lt;a href=&quot;#Code%20point&quot;&gt;코드 포인트&lt;/a&gt; 인지 여부를 반환합니다 . (일반 유니 코드 범주 : Cn)</target>
        </trans-unit>
        <trans-unit id="7595af263e47d4b9c34550528bb8edf7a07b170f" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode numerical &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt; (general Unicode category: Nd, Nl, No).</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 가 유니 코드 숫자 &lt;a href=&quot;#Character&quot;&gt;문자&lt;/a&gt; 인지 여부를 리턴합니다 (일반 유니 코드 범주 : Nd, Nl, No).</target>
        </trans-unit>
        <trans-unit id="1478faa31958f0238c5486524214089322f5cd36" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode punctuation &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt; (general Unicode category: Pd, Ps, Pe, Pc, Po, Pi, Pf).</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 가 유니 코드 문장 부호 &lt;a href=&quot;#Character&quot;&gt;문자&lt;/a&gt; 인지 여부를 리턴합니다 (일반 유니 코드 범주 : Pd, Ps, Pe, Pc, Po, Pi, Pf).</target>
        </trans-unit>
        <trans-unit id="156a9001b6ee458850080b18ed8a855adfe5a1e0" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode space &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt; (general Unicode category: Zs)</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 가 유니 코드 공백 &lt;a href=&quot;#Character&quot;&gt;문자&lt;/a&gt; 인지 여부를 리턴합니다 (일반 유니 코드 범주 : Zs).</target>
        </trans-unit>
        <trans-unit id="9c80de8e3306b8da6b9918d9184b2f0b65b08d16" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode surrogate &lt;a href=&quot;#Code%20point&quot;&gt;code point&lt;/a&gt; (general Unicode category: Cs).</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 가 유니 코드 대리 &lt;a href=&quot;#Code%20point&quot;&gt;코드 포인트&lt;/a&gt; 인지 여부를 리턴합니다 (일반 유니 코드 범주 : Cs).</target>
        </trans-unit>
        <trans-unit id="adc7a749d9ed08ffd6fb11619e94adc5df751f73" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode symbol &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt; (general Unicode category: Sm, Sc, Sk, So).</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 가 유니 코드 기호 &lt;a href=&quot;#Character&quot;&gt;문자&lt;/a&gt; 인지 여부를 리턴합니다 (일반 유니 코드 범주 : Sm, Sc, Sk, So).</target>
        </trans-unit>
        <trans-unit id="e9d0b0a92175f6ed528c435f87183e3751be3f32" translate="yes" xml:space="preserve">
          <source>Returns whether DST is in effect for this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 &lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; &lt;/a&gt; 에 DST가 유효 한지 어떤지를 돌려줍니다 .</target>
        </trans-unit>
        <trans-unit id="6ab4d3d13a4b9e6532ff34435c6a4689b5a02a38" translate="yes" xml:space="preserve">
          <source>Returns whether the &lt;code&gt;back&lt;/code&gt;s of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; both refer to the same place in memory, making one of the arrays a slice of the other which end at index &lt;code&gt;$&lt;/code&gt;.</source>
          <target state="translated">여부를 반환 &lt;code&gt;back&lt;/code&gt; 의 s의 &lt;code&gt;lhs&lt;/code&gt; 과 &lt;code&gt;rhs&lt;/code&gt; 모두 배열 한 인덱스에서 끝나는 다른 조각 만들기, 메모리에 같은 장소를 참조 &lt;code&gt;$&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="6be7cfa2f1bb7e4991fc4a28bb92409c19aae932" translate="yes" xml:space="preserve">
          <source>Returns whether the &lt;code&gt;front&lt;/code&gt;s of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; both refer to the same place in memory, making one of the arrays a slice of the other which starts at index &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; 및 &lt;code&gt;rhs&lt;/code&gt; 의 &lt;code&gt;front&lt;/code&gt; s가 모두 메모리에서 동일한 위치를 참조 하는지 여부를 리턴 하여 배열 중 하나를 인덱스 &lt;code&gt;0&lt;/code&gt; 에서 시작하는 다른 슬라이스로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="14de15801224be248dd002e5742a8ce6e00309c9" translate="yes" xml:space="preserve">
          <source>Returns whether the file represented by this &lt;code&gt;DirEntry&lt;/code&gt; is a directory.</source>
          <target state="translated">이 &lt;code&gt;DirEntry&lt;/code&gt; 로 나타내지는 파일이 디렉토리 인지 어떤지를 돌려 줍니다.</target>
        </trans-unit>
        <trans-unit id="e3b0014cf0e4c483c081ccc8b96dc40ccc447a6b" translate="yes" xml:space="preserve">
          <source>Returns whether the file represented by this &lt;code&gt;DirEntry&lt;/code&gt; is a file.</source>
          <target state="translated">이 &lt;code&gt;DirEntry&lt;/code&gt; 로 나타내지 는 파일 이 파일인지 어떤지를 돌려 줍니다.</target>
        </trans-unit>
        <trans-unit id="bbddd3a269a6acf94608d7b485670c33ca54303f" translate="yes" xml:space="preserve">
          <source>Returns whether the file represented by this &lt;code&gt;DirEntry&lt;/code&gt; is a symbolic link.</source>
          <target state="translated">이 &lt;code&gt;DirEntry&lt;/code&gt; 에 의해 나타내지는 파일이 심볼 링크 일지 어떨지를 돌려 줍니다.</target>
        </trans-unit>
        <trans-unit id="ba3db36224e13e2474d0dd4f5c75bcb323efc167" translate="yes" xml:space="preserve">
          <source>Returns whether the given day is valid for the given year and month.</source>
          <target state="translated">주어진 날짜가 주어진 연도 및 월에 유효한지 여부를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fd0cae71c12ced837f12efb8bed85b2d663584ad" translate="yes" xml:space="preserve">
          <source>Returns whether the given file (or directory) is a file.</source>
          <target state="translated">주어진 파일 (또는 디렉토리)이 파일인지 여부를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b1d9f2dd278102b2a31cc3434c73368266665cd1" translate="yes" xml:space="preserve">
          <source>Returns whether the given file attributes are for a directory.</source>
          <target state="translated">주어진 파일 속성이 디렉토리에 대한 것인지 여부를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="9a80b5fb681696719b08f9c26c6949cdacb39962" translate="yes" xml:space="preserve">
          <source>Returns whether the given file attributes are for a file.</source>
          <target state="translated">주어진 파일 속성이 파일에 대한 것인지 여부를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="77ccc710157d8864fb9582400cce8aec394abde3" translate="yes" xml:space="preserve">
          <source>Returns whether the given file attributes are for a symbolic link.</source>
          <target state="translated">주어진 파일 속성이 기호 링크에 대한 것인지 여부를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="b361d0b04b5b5842232aa78493d9985b18b232ca" translate="yes" xml:space="preserve">
          <source>Returns whether the given file is a directory.</source>
          <target state="translated">주어진 파일이 디렉토리인지 여부를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="da5a0bad39028a7d4481de8d65e49dfcb3c95276" translate="yes" xml:space="preserve">
          <source>Returns whether the given file is a symbolic link.</source>
          <target state="translated">주어진 파일이 기호 링크인지 여부를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="8fe6f4c2454ab20247885739acba1adb4cad2ec8" translate="yes" xml:space="preserve">
          <source>Returns whether the given value is valid for the given unit type when in a time point. Naturally, a duration is not held to a particular range, but the values in a time point are (e.g. a month must be in the range of 1 - 12 inclusive).</source>
          <target state="translated">특정 시점에 지정된 단위 유형에 대해 지정된 값이 유효한지 여부를 리턴합니다. 당연히 기간은 특정 범위로 유지되지 않지만 특정 시점의 값은 (예 : 한 달은 1-12 범위에 있어야 함)</target>
        </trans-unit>
        <trans-unit id="e5626c162db92c34f6c67b7210f42c09088f14eb" translate="yes" xml:space="preserve">
          <source>Returns whether the resource exists.</source>
          <target state="translated">자원이 존재하는지 여부를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="547f6e36f8abd95e8ba99e550f4f1f4c7bd5746d" translate="yes" xml:space="preserve">
          <source>Returns whether this &lt;code&gt;Duration&lt;/code&gt; is negative.</source>
          <target state="translated">이 &lt;code&gt;Duration&lt;/code&gt; 가 마이너스 인지를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="0afcdbd574ed97c633aeb99e4d6e73fb6c95ac45" translate="yes" xml:space="preserve">
          <source>Returns whether this StopWatch is currently running.</source>
          <target state="translated">이 StopWatch가 현재 실행 중인지 여부를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="838ce6f04b144643d883aba09cab9cea3aa97645" translate="yes" xml:space="preserve">
          <source>Returns x rounded to a long value using the FE_TONEAREST rounding mode. If the integer value of x is greater than long.max, the result is indeterminate.</source>
          <target state="translated">FE_TONEAREST 반올림 모드를 사용하여 x를 긴 값으로 반올림합니다. x의 정수 값이 long.max보다 크면 결과가 결정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0a95802367fe5f1b74a0d9f770d25f2f23e46b59" translate="yes" xml:space="preserve">
          <source>Returns x rounded to a long value using the current rounding mode. If the integer value of x is greater than long.max, the result is indeterminate.</source>
          <target state="translated">현재 반올림 모드를 사용하여 x를 긴 값으로 반올림합니다. x의 정수 값이 long.max보다 크면 결과가 결정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="80b52c39509623a517e5744a3fafec2a8b652469" translate="yes" xml:space="preserve">
          <source>Returns |x|</source>
          <target state="translated">리턴 | x |</target>
        </trans-unit>
        <trans-unit id="7749fcf802c472b6c2f5bd0556805e456ffd5674" translate="yes" xml:space="preserve">
          <source>Returns:</source>
          <target state="translated">Returns:</target>
        </trans-unit>
        <trans-unit id="042600f6d61956e81270c4621932f5503cc00b56" translate="yes" xml:space="preserve">
          <source>Reuses the &lt;code&gt;File&lt;/code&gt; object to either open a different file, or change the file mode. If &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the mode of the currently open file is changed; otherwise, a new file is opened, reusing the C &lt;code&gt;FILE*&lt;/code&gt;. The function has the same semantics as in the C standard library &lt;a href=&quot;http://cplusplus.com/reference/cstdio/freopen/&quot;&gt;freopen&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; 객체를 재사용하여 다른 파일을 열거 나 파일 모드를 변경합니다. 경우 &lt;code&gt;name&lt;/code&gt; 이다 &lt;code&gt;null&lt;/code&gt; , 현재 열려있는 파일의 모드가 변경됩니다; 그렇지 않으면 C &lt;code&gt;FILE*&lt;/code&gt; 재사용하여 새 파일이 열립니다 . 이 함수는 C 표준 라이브러리 &lt;a href=&quot;http://cplusplus.com/reference/cstdio/freopen/&quot;&gt;freopen&lt;/a&gt; 함수 와 동일한 의미를 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="81f6a2c4d287154f1ce5316a434686509dd8c2c4" translate="yes" xml:space="preserve">
          <source>Reverse a list in place.</source>
          <target state="translated">목록을 뒤집습니다.</target>
        </trans-unit>
        <trans-unit id="02bba980f228add0c93063c7e5848dfa4b43823a" translate="yes" xml:space="preserve">
          <source>Reverse an array in-place.</source>
          <target state="translated">배열을 제자리로 뒤집습니다.</target>
        </trans-unit>
        <trans-unit id="486fcc000e3e1c1b7111db7b98eb05fe4c35e9ea" translate="yes" xml:space="preserve">
          <source>Reverses &lt;code&gt;r&lt;/code&gt; in-place. Performs &lt;code&gt;r.length / 2&lt;/code&gt; evaluations of &lt;code&gt;swap&lt;/code&gt;. UTF sequences consisting of multiple code units are preserved properly.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; 을 제자리로 되돌 립니다. &lt;code&gt;r.length / 2&lt;/code&gt; &lt;code&gt;swap&lt;/code&gt; 평가를 수행합니다 . 여러 코드 단위로 구성된 UTF 시퀀스는 올바르게 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="36b64711436f6dd1804041259ae5426a477f2fe3" translate="yes" xml:space="preserve">
          <source>Reverses SList in-place. Performs no memory allocation.</source>
          <target state="translated">SList를 현재 위치로 되돌립니다. 메모리 할당을 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e2c24b3de5bc34f6bc17f9d7532084a2887cdd6e" translate="yes" xml:space="preserve">
          <source>Reverses the bits of the &lt;code&gt;BitArray&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BitArray&lt;/code&gt; 의 비트를 반전시킵니다 .</target>
        </trans-unit>
        <trans-unit id="7cb19a0522bebe49634bd788f59866fd3167457e" translate="yes" xml:space="preserve">
          <source>Reverses the order of bits in a 32-bit integer.</source>
          <target state="translated">32 비트 정수에서 비트 순서를 반대로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="52b779a914b388fa595c14cb18714aac8a12728d" translate="yes" xml:space="preserve">
          <source>Reverses the order of bits in a 64-bit integer.</source>
          <target state="translated">64 비트 정수에서 비트 순서를 반대로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="913c17e6f3ea1b0c8c04639c0711b667473adbb7" translate="yes" xml:space="preserve">
          <source>Revert to a default value upon an error:</source>
          <target state="translated">오류가 발생하면 기본값으로 되돌립니다.</target>
        </trans-unit>
        <trans-unit id="7e92da2a9db5a146a33de55a03086369ae07d386" translate="yes" xml:space="preserve">
          <source>Reviewed by Brad Roberts. Daniel Keep provided a detailed code review prompting the following improvements: (1) better support for arrays; (2) support for associative arrays; (3) friendlier behavior towards the garbage collector.</source>
          <target state="translated">Brad Roberts에 의해 검토되었습니다. Daniel Keep은 세부적인 코드 검토를 통해 다음과 같이 개선되었습니다. (1) 어레이에 대한 더 나은 지원; (2) 연관 배열에 대한 지원; (3) 가비지 수집기에 대한보다 친숙한 행동.</target>
        </trans-unit>
        <trans-unit id="f976e9a2195ccad9e07346e959b4ecc76c325eff" translate="yes" xml:space="preserve">
          <source>Revision history.</source>
          <target state="translated">개정 이력.</target>
        </trans-unit>
        <trans-unit id="646189a1955445c94d7221e00a651a2046c1c871" translate="yes" xml:space="preserve">
          <source>Rewrite contracts as statements.</source>
          <target state="translated">계약서를 진술로 다시 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="89b5d5e37f6f56a29c2561c072dc241cd55931aa" translate="yes" xml:space="preserve">
          <source>Rewriting of comparison operations</source>
          <target state="translated">비교 연산 재 작성</target>
        </trans-unit>
        <trans-unit id="e2def1680135bf4b47297c8087f4620ec0b2e4a9" translate="yes" xml:space="preserve">
          <source>Rhs</source>
          <target state="translated">Rhs</target>
        </trans-unit>
        <trans-unit id="5e526ff266e522a5426ba99295485c6b8af7b831" translate="yes" xml:space="preserve">
          <source>Rhs &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="translated">Rhs &lt;code&gt;rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bde1c79b7d3fd6e3d0fb5b38d93ff6a5d75715e7" translate="yes" xml:space="preserve">
          <source>Right bound of initial range of &lt;code&gt;f&lt;/code&gt; known to contain the root.</source>
          <target state="translated">루트를 포함하는 것으로 알려진 초기 범위 &lt;code&gt;f&lt;/code&gt; 의 오른쪽 경계 .</target>
        </trans-unit>
        <trans-unit id="a51ab2c4a960026caf59b69b53b43b1ec73a88f5" translate="yes" xml:space="preserve">
          <source>Right bound of initial range of f known to contain the minimum.</source>
          <target state="translated">최소값을 포함하는 것으로 알려진 초기 범위 f의 오른쪽 경계.</target>
        </trans-unit>
        <trans-unit id="afb13751cbca853ef0a548421c5ad4469c798c3d" translate="yes" xml:space="preserve">
          <source>Right justify &lt;code&gt;s&lt;/code&gt; in a field &lt;code&gt;width&lt;/code&gt; characters wide. &lt;code&gt;fillChar&lt;/code&gt; is the character that will be used to fill up the space in the field that &lt;code&gt;s&lt;/code&gt; doesn't fill.</source>
          <target state="translated">필드 &lt;code&gt;width&lt;/code&gt; 문자의 너비를 &lt;code&gt;s&lt;/code&gt; 로 맞 춥니 다 . &lt;code&gt;fillChar&lt;/code&gt; 는 그 분야에서 공간을 채우기 위해 사용되는 문자 &lt;code&gt;s&lt;/code&gt; 기입하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cc84b9f323c969ed747f63616d18cb0e2559eefa" translate="yes" xml:space="preserve">
          <source>Rng &lt;code&gt;rnd&lt;/code&gt;</source>
          <target state="translated">RNG &lt;code&gt;rnd&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="18748a54bf90fc0b5a4a3a7527f67a3a4d953d4a" translate="yes" xml:space="preserve">
          <source>RoR &lt;code&gt;r&lt;/code&gt;</source>
          <target state="translated">RoR &lt;code&gt;r&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="64c2bd3f7cd65ceac20ebd1622a287b9466bc72e" translate="yes" xml:space="preserve">
          <source>RoR &lt;code&gt;ror&lt;/code&gt;</source>
          <target state="translated">RoR &lt;code&gt;ror&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="18ba044430e02f2958be80a25158f225f656d9b1" translate="yes" xml:space="preserve">
          <source>Robert burner Schadek</source>
          <target state="translated">로버트 버너 샤덱</target>
        </trans-unit>
        <trans-unit id="c0c828eded61ec9ce66ca119b9686e81b389c44d" translate="yes" xml:space="preserve">
          <source>Rolls a dice with relative probabilities stored in &lt;code&gt;proportions&lt;/code&gt;. Returns the index in &lt;code&gt;proportions&lt;/code&gt; that was chosen.</source>
          <target state="translated">&lt;code&gt;proportions&lt;/code&gt; 저장된 상대 확률로 주사위를 굴립니다 . 선택한 &lt;code&gt;proportions&lt;/code&gt; 인덱스를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="12c0a4d87f9da9ea7c5d02b3d258368b74939baf" translate="yes" xml:space="preserve">
          <source>RootObject &lt;code&gt;id&lt;/code&gt;</source>
          <target state="translated">RootObject &lt;code&gt;id&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8cd58c4c77682fa001856e18b08987d9c7304449" translate="yes" xml:space="preserve">
          <source>RootObject &lt;code&gt;o&lt;/code&gt;</source>
          <target state="translated">RootObject &lt;code&gt;o&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="581ba447c0a648c09593b4209f69b921e66e29fb" translate="yes" xml:space="preserve">
          <source>RootObject &lt;strong id=&quot;aliasParameterSemantic&quot;&gt;aliasParameterSemantic&lt;/strong&gt;(Loc loc, Scope* sc, RootObject o, TemplateParameters* parameters);</source>
          <target state="translated">RootObject &lt;strong id=&quot;aliasParameterSemantic&quot;&gt;aliasParameterSemantic&lt;/strong&gt; (Loc loc, Scope * sc, RootObject o, TemplateParameters * 매개 변수);</target>
        </trans-unit>
        <trans-unit id="1d593553b26c6fd5515161b0277225d93c8a2251" translate="yes" xml:space="preserve">
          <source>RootObject &lt;strong id=&quot;declareParameter&quot;&gt;declareParameter&lt;/strong&gt;(Scope* sc, TemplateParameter tp, RootObject o);</source>
          <target state="translated">RootObject &lt;strong id=&quot;declareParameter&quot;&gt;선언&lt;/strong&gt; 매개 변수 (Scope * sc, TemplateParameter tp, RootObject o);</target>
        </trans-unit>
        <trans-unit id="cd5e5447f2a2e34e3141a1bcd21ba5c605ed9ef2" translate="yes" xml:space="preserve">
          <source>RootObject &lt;strong id=&quot;parseTypeOrAssignExp&quot;&gt;parseTypeOrAssignExp&lt;/strong&gt;();</source>
          <target state="translated">RootObject &lt;strong id=&quot;parseTypeOrAssignExp&quot;&gt;parseTypeOrAssignExp&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="b41a314bf17040d8b5e323877c0e8fe02f9fba89" translate="yes" xml:space="preserve">
          <source>RootObject representing the AST</source>
          <target state="translated">AST를 나타내는 RootObject</target>
        </trans-unit>
        <trans-unit id="5ba043d4ad1fd9feaa94d824a766c624f78a67ee" translate="yes" xml:space="preserve">
          <source>Round &lt;code&gt;val&lt;/code&gt; to a multiple of &lt;code&gt;pow(base, exp)&lt;/code&gt;. &lt;code&gt;rfunc&lt;/code&gt; specifies the rounding function to use; by default this is &lt;code&gt;rint&lt;/code&gt;, which uses the current rounding mode.</source>
          <target state="translated">&lt;code&gt;val&lt;/code&gt; 을 &lt;code&gt;pow(base, exp)&lt;/code&gt; 의 배수로 반올림 합니다. &lt;code&gt;rfunc&lt;/code&gt; 는 사용할 반올림 함수를 지정합니다. 기본적으로 이것은 현재 반올림 모드를 사용하는 &lt;code&gt;rint&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="729404f7fdd29f46bc8030966e8df9381b6f53f0" translate="yes" xml:space="preserve">
          <source>Round &lt;code&gt;val&lt;/code&gt; to a multiple of &lt;code&gt;unit&lt;/code&gt;. &lt;code&gt;rfunc&lt;/code&gt; specifies the rounding function to use; by default this is &lt;code&gt;rint&lt;/code&gt;, which uses the current rounding mode.</source>
          <target state="translated">&lt;code&gt;val&lt;/code&gt; 을 &lt;code&gt;unit&lt;/code&gt; 의 배수로 반올림합니다 . &lt;code&gt;rfunc&lt;/code&gt; 는 사용할 반올림 함수를 지정합니다. 기본적으로 이것은 현재 반올림 모드를 사용하는 &lt;code&gt;rint&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="02029a6283cea7d7aaa033d87c3e02f700840712" translate="yes" xml:space="preserve">
          <source>Round argument to a specific precision.</source>
          <target state="translated">인수를 특정 정밀도로 반올림합니다.</target>
        </trans-unit>
        <trans-unit id="2c9fcd821c05596d6a4e9e2c37c9b79af458d2d7" translate="yes" xml:space="preserve">
          <source>Round up request size to allocation size</source>
          <target state="translated">요청 크기를 할당 크기로 올림</target>
        </trans-unit>
        <trans-unit id="9fd5c41f6700ee519edf618656bada84a4f1c15e" translate="yes" xml:space="preserve">
          <source>Rounded conversion from floating point to integral.</source>
          <target state="translated">부동 소수점에서 정수로의 반올림 변환.</target>
        </trans-unit>
        <trans-unit id="659e3ebceec95fe76068b19e1defb6c7ca41b740" translate="yes" xml:space="preserve">
          <source>Rounded conversions do not work with non-integral target types.</source>
          <target state="translated">비 완전 타겟 유형에서는 반올림 변환이 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="905cc3792492961c10eb158788a7c9f956d57aa5" translate="yes" xml:space="preserve">
          <source>Rounding</source>
          <target state="translated">Rounding</target>
        </trans-unit>
        <trans-unit id="ed8aff3fee04dc785e0009447efda6debf75523d" translate="yes" xml:space="preserve">
          <source>Rounding Control</source>
          <target state="translated">반올림 제어</target>
        </trans-unit>
        <trans-unit id="aeed6fe8c51a6405741f8ef593b5d5d33c5ff47d" translate="yes" xml:space="preserve">
          <source>Rounding when casting to floating point</source>
          <target state="translated">부동 소수점으로 캐스팅 할 때 반올림</target>
        </trans-unit>
        <trans-unit id="bcb5ec50f2ff4848cbdf10cd3aca75df1aae70d8" translate="yes" xml:space="preserve">
          <source>RoundingMode &lt;code&gt;newMode&lt;/code&gt;</source>
          <target state="translated">반올림 &lt;code&gt;newMode&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bc46ee2c4198eaa115c62825b2bc01d30bf3319e" translate="yes" xml:space="preserve">
          <source>Rounds the allocation size to the next multiple of the page size. The allocation only reserves a range of virtual pages but the actual physical memory is allocated on demand, when accessing the memory.</source>
          <target state="translated">할당 크기를 페이지 크기의 다음 배수로 올림합니다. 할당은 가상 페이지 범위 만 예약하지만 메모리에 액세스 할 때 실제 물리적 메모리는 요청시 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="9330049c8ecb309df4b4f2448f62c07ca3a5bfc1" translate="yes" xml:space="preserve">
          <source>Rounds the given size to a multiple of the &lt;code&gt;alignment&lt;/code&gt;</source>
          <target state="translated">주어진 크기를 &lt;code&gt;alignment&lt;/code&gt; 의 배수로 반올림합니다.</target>
        </trans-unit>
        <trans-unit id="cf6bdd959037cb97c60373b1c6c57fbce0f61cd1" translate="yes" xml:space="preserve">
          <source>Rounds the given size to a multiple of thew &lt;code&gt;alignment&lt;/code&gt;</source>
          <target state="translated">주어진 크기를 여러 &lt;code&gt;alignment&lt;/code&gt; 로 반올림합니다.</target>
        </trans-unit>
        <trans-unit id="014f4474c49fd6651e10ead6abedbffd20a6b747" translate="yes" xml:space="preserve">
          <source>Rounds the mapping size to the next multiple of the page size and calls the OS primitive responsible for creating memory mappings: &lt;code&gt;mmap&lt;/code&gt; on POSIX and &lt;code&gt;VirtualAlloc&lt;/code&gt; on Windows.</source>
          <target state="translated">맵핑 크기를 페이지 크기의 다음 배수로 반올림하고 메모리 맵핑 작성을 담당하는 OS 기본 요소 ( POSIX의 경우 &lt;code&gt;mmap&lt;/code&gt; , Windows의 &lt;code&gt;VirtualAlloc&lt;/code&gt; ) 를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="91034be1d9b5696626eca72339485ed35eb1c32c" translate="yes" xml:space="preserve">
          <source>Rounds the requested size to the next multiple of the page size.</source>
          <target state="translated">요청 된 크기를 다음 페이지 크기의 배수로 반올림합니다.</target>
        </trans-unit>
        <trans-unit id="bb30f3b3a072315c39d8c23f795265f803a1f40a" translate="yes" xml:space="preserve">
          <source>Rounds up to the maximum size of the bucket in which &lt;code&gt;bytes&lt;/code&gt; falls.</source>
          <target state="translated">&lt;code&gt;bytes&lt;/code&gt; 가 떨어지는 버킷의 최대 크기로 올림합니다 .</target>
        </trans-unit>
        <trans-unit id="731df05540a9b4da46134227754879d50511760e" translate="yes" xml:space="preserve">
          <source>Rounds x to the nearest integer value, using the current rounding mode.</source>
          <target state="translated">현재 반올림 모드를 사용하여 x를 가장 가까운 정수 값으로 반올림합니다.</target>
        </trans-unit>
        <trans-unit id="d63adc049eca9d725dc69dc2d8ec8d8ff1fcd9bf" translate="yes" xml:space="preserve">
          <source>Rounds x to the nearest integer value, using the current rounding mode. If the return value is not equal to x, the FE_INEXACT exception is raised. &lt;b&gt;nearbyint&lt;/b&gt; performs the same operation, but does not set the FE_INEXACT exception.</source>
          <target state="translated">현재 반올림 모드를 사용하여 x를 가장 가까운 정수 값으로 반올림합니다. 반환 값이 x와 같지 않으면 FE_INEXACT 예외가 발생합니다. &lt;b&gt;nearint&lt;/b&gt; 는 동일한 작업을 수행하지만 FE_INEXACT 예외를 설정하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="284a7f5e42a363953a5a0c3e60335230917805e7" translate="yes" xml:space="preserve">
          <source>Routines specific to the ASCII subset of Unicode.</source>
          <target state="translated">유니 코드의 ASCII 하위 집합에 특정한 루틴.</target>
        </trans-unit>
        <trans-unit id="6805fd1202106fd7a5b33f7938919a99122b9436" translate="yes" xml:space="preserve">
          <source>Rs &lt;code&gt;needles&lt;/code&gt;</source>
          <target state="translated">RS &lt;code&gt;needles&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="70d98aa2b860f17dc12cc094ee367ed29d25899f" translate="yes" xml:space="preserve">
          <source>Rs &lt;code&gt;ranges&lt;/code&gt;</source>
          <target state="translated">Rs &lt;code&gt;ranges&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30691c304c0236788193b6f2b9255d54b7feeef4" translate="yes" xml:space="preserve">
          <source>Rs &lt;code&gt;rs&lt;/code&gt;</source>
          <target state="translated">RS &lt;code&gt;rs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c4649e75ce0ca5e2108b66926fc94b55756d33ca" translate="yes" xml:space="preserve">
          <source>Rumi Numeral Symbols</source>
          <target state="translated">루미 숫자 기호</target>
        </trans-unit>
        <trans-unit id="89df0e63db6dedf1067d015771af8537f9f0a5c7" translate="yes" xml:space="preserve">
          <source>Run full semantic analysis on a module.</source>
          <target state="translated">모듈에서 전체 의미 분석을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="67bb6e4e60e2ed7434c05e6c4fd8fe82d7918af4" translate="yes" xml:space="preserve">
          <source>Run semantic of tiargs as arguments of template.</source>
          <target state="translated">tiarg의 시맨틱을 템플리트의 인수로 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="c2f1578ded20a82e135ec7d157cd65eda0b27068" translate="yes" xml:space="preserve">
          <source>Run semantic on the elements of tiargs.</source>
          <target state="translated">tiargs 요소에서 시맨틱을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="24c47178385ae643551870f725edd4d44000744c" translate="yes" xml:space="preserve">
          <source>Run semantic() on deferred symbols.</source>
          <target state="translated">지연된 기호에 대해 semantic ()을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="487018e035aa1a925c09e288af33a70420405da7" translate="yes" xml:space="preserve">
          <source>Run the compiled program. Return exit status.</source>
          <target state="translated">컴파일 된 프로그램을 실행하십시오. 종료 상태를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a442da74d9b7a844e73f5eb10b3afcd2d4b6c59c" translate="yes" xml:space="preserve">
          <source>Run the destructor on the object and all its sub-objects</source>
          <target state="translated">객체와 모든 하위 객체에서 소멸자를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="65155cef6176c6b4a7372235d02b5318ebb48bd7" translate="yes" xml:space="preserve">
          <source>Run the linker. Return status of execution.</source>
          <target state="translated">링커를 실행하십시오. 실행 상태를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8684492770a34ac36f41175eeb606cbd485765c3" translate="yes" xml:space="preserve">
          <source>Run the postblit on the object and all its sub-objects</source>
          <target state="translated">오브젝트와 모든 하위 오브젝트에서 포스트 블리트 실행</target>
        </trans-unit>
        <trans-unit id="a404918f75e1c621a9e51e540dea6b35ddf73cd9" translate="yes" xml:space="preserve">
          <source>Run-Time Library Compilation Options Diagnostics</source>
          <target state="translated">런타임 라이브러리 컴파일 옵션 진단</target>
        </trans-unit>
        <trans-unit id="b3a1ab24d28a4516dc6367fed9cebd2e03e59a70" translate="yes" xml:space="preserve">
          <source>Run-Time Library Version Numbers</source>
          <target state="translated">런타임 라이브러리 버전 번호</target>
        </trans-unit>
        <trans-unit id="4574000a6e96e607432e6012acf5a8e676d5db3e" translate="yes" xml:space="preserve">
          <source>Run-time Limits</source>
          <target state="translated">런타임 제한</target>
        </trans-unit>
        <trans-unit id="10edb70120d58b585eb716dac04179f10c05bfdd" translate="yes" xml:space="preserve">
          <source>Runic</source>
          <target state="translated">Runic</target>
        </trans-unit>
        <trans-unit id="f23108daf10fc3ed86df2bb60d044dcbc323f158" translate="yes" xml:space="preserve">
          <source>Running destructors for all queued memory.</source>
          <target state="translated">대기중인 모든 메모리에 대해 소멸자를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="076c12c94d5b2e24f616a54dcfe8c9154603b9ed" translate="yes" xml:space="preserve">
          <source>Running unittests in &lt;code&gt;-betterC&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;-betterC&lt;/code&gt; 에서 단위 테스트 실행</target>
        </trans-unit>
        <trans-unit id="4ba8bd6c28554c6202fef1066cc234eae87487bf" translate="yes" xml:space="preserve">
          <source>Runs any finalizer that is located in address range of the given code segment. This is used before unloading shared libraries. All matching objects which have a finalizer in this code segment are assumed to be dead, using them while or after calling this method has undefined behavior.</source>
          <target state="translated">주어진 코드 세그먼트의 주소 범위에있는 종료자를 실행합니다. 공유 라이브러리를 언로드하기 전에 사용됩니다. 이 코드 세그먼트에 종료자가있는 모든 일치하는 오브젝트는이 메소드를 호출하는 동안 또는 호출 한 후에 정의되지 않은 동작을 갖는 오브젝트를 사용하여 죽은 것으로 가정합니다.</target>
        </trans-unit>
        <trans-unit id="470a6d23ca6f426b222731ede8c4aa789158b8dc" translate="yes" xml:space="preserve">
          <source>Runs program directly</source>
          <target state="translated">프로그램을 직접 실행</target>
        </trans-unit>
        <trans-unit id="c9d3311dbe287dca576c90f42488f7c77856b7ac" translate="yes" xml:space="preserve">
          <source>Runs semantic on ae.arguments. Declares temporary variables if '$' was used.</source>
          <target state="translated">ae.arguments에서 시맨틱을 실행합니다. '$'가 사용 된 경우 임시 변수를 선언합니다.</target>
        </trans-unit>
        <trans-unit id="e4e7cb34c2ab1babf604d85da7c5d6cb4fd0dc24" translate="yes" xml:space="preserve">
          <source>Runs semantic on se.lwr and se.upr. Declares a temporary variable if '$' was used.</source>
          <target state="translated">se.lwr 및 se.upr에서 시맨틱을 실행합니다. '$'가 사용 된 경우 임시 변수를 선언합니다.</target>
        </trans-unit>
        <trans-unit id="eef5fd1918e9d70b9d5f48364fcaaf084f45f2b2" translate="yes" xml:space="preserve">
          <source>Runs semantic() for all instance field variables, but also the field types can remain yet not resolved forward references, except direct recursive definitions. After the process sizeok is set to Sizeok.fwd.</source>
          <target state="translated">모든 인스턴스 필드 변수에 대해 semantic ()을 실행하지만 직접 재귀 정의를 제외하고 필드 유형은 여전히 ​​정방향 참조를 확인할 수 없습니다. 프로세스 sizeok가 Sizeok.fwd로 설정된 후.</target>
        </trans-unit>
        <trans-unit id="6e842f74109e182d726417475c208ddf41aa30d0" translate="yes" xml:space="preserve">
          <source>Runs shell command</source>
          <target state="translated">쉘 명령을 실행합니다</target>
        </trans-unit>
        <trans-unit id="66945c04f3e95699c5fdec4cf7dd394fe1c7d455" translate="yes" xml:space="preserve">
          <source>Runtime Helper Functions</source>
          <target state="translated">런타임 헬퍼 함수</target>
        </trans-unit>
        <trans-unit id="19429dc4f33b4606e69944f9c03a5f91e1716396" translate="yes" xml:space="preserve">
          <source>Runtime Initialization of Immutable AAs</source>
          <target state="translated">불변 AA의 런타임 초기화</target>
        </trans-unit>
        <trans-unit id="0cd0c965651550e6b7d802c00c94f2266c77cfe0" translate="yes" xml:space="preserve">
          <source>Runtime Type Identification</source>
          <target state="translated">런타임 타입 식별</target>
        </trans-unit>
        <trans-unit id="c144d6087854e8cbe0377f690fa84167ea88336c" translate="yes" xml:space="preserve">
          <source>Runtime definitions generated by Ddoc.</source>
          <target state="translated">Ddoc에 의해 생성 된 런타임 정의.</target>
        </trans-unit>
        <trans-unit id="4cce066c267be49d859d26b1e82f47342169d76d" translate="yes" xml:space="preserve">
          <source>Runtime environment, such as OS type and endianness.</source>
          <target state="translated">OS 유형 및 엔디안과 같은 런타임 환경</target>
        </trans-unit>
        <trans-unit id="629014c630c14ebdb1feb763095453ae92ce0c74" translate="yes" xml:space="preserve">
          <source>Runtime support for complex arithmetic code generation (for Posix).</source>
          <target state="translated">복잡한 산술 코드 생성을위한 런타임 지원 (Posix 용).</target>
        </trans-unit>
        <trans-unit id="98c8a9d894097346cd0b357382518ce28e5bf6f3" translate="yes" xml:space="preserve">
          <source>Runtime type information (a.k.a &lt;code&gt;TypeInfo&lt;/code&gt;) is supported. Evaluates to &lt;code&gt;false&lt;/code&gt; when compiling with command line switch &lt;a href=&quot;https://dlang.org/dmd.html#switch-betterC&quot;&gt;&lt;em&gt;-betterC&lt;/em&gt;&lt;/a&gt;</source>
          <target state="translated">런타임 유형 정보 (일명 &lt;code&gt;TypeInfo&lt;/code&gt; )가 지원됩니다. 평가 &lt;code&gt;false&lt;/code&gt; 명령 줄 스위치를 사용하여 컴파일 할 때 &lt;a href=&quot;https://dlang.org/dmd.html#switch-betterC&quot;&gt;&lt;em&gt;-betterC&lt;/em&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7909f3e2a880ec8330c6e14e5d738f440fdbd059" translate="yes" xml:space="preserve">
          <source>Runtime type information about a class. Can be retrieved from an object instance by using the &lt;a href=&quot;https://dlang.org/spec/property.html#classinfo&quot;&gt;.classinfo&lt;/a&gt; property.</source>
          <target state="translated">클래스에 대한 런타임 유형 정보 &lt;a href=&quot;https://dlang.org/spec/property.html#classinfo&quot;&gt;.classinfo&lt;/a&gt; 특성 을 사용하여 오브젝트 인스턴스에서 검색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0b2db9e635e2be76be75ebc790eef0550a4049d2" translate="yes" xml:space="preserve">
          <source>Runtime type information about a type. Can be retrieved for any type using a &lt;a href=&quot;https://dlang.org/spec/expression.html#TypeidExpression&quot;&gt;&lt;i&gt;TypeidExpression&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">유형에 대한 런타임 유형 정보. &lt;a href=&quot;https://dlang.org/spec/expression.html#TypeidExpression&quot;&gt;&lt;i&gt;TypeidExpression을&lt;/i&gt;&lt;/a&gt; 사용하여 모든 유형에 대해 검색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="02aa629c8b16cd17a44f3a0efec2feed43937642" translate="yes" xml:space="preserve">
          <source>S</source>
          <target state="translated">S</target>
        </trans-unit>
        <trans-unit id="e382de0e0fb44a2437e2cafcf5204582a3adea25" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;args&lt;/code&gt;</source>
          <target state="translated">S &lt;code&gt;args&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9dbe2bde1e0e339ad7404569dc9b29ac5d3dc2c0" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;firstindent&lt;/code&gt;</source>
          <target state="translated">S &lt;code&gt;firstindent&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a11859009423adbef61f15df07771c3ab6ebf08f" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;indent&lt;/code&gt;</source>
          <target state="translated">S의 &lt;code&gt;indent&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8f4406f8ac105ec20618542297c575d74db7e0d4" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;input&lt;/code&gt;</source>
          <target state="translated">S &lt;code&gt;input&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="699d25e2b0ab4544fad7df604e63a857fced9182" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;isoExtString&lt;/code&gt;</source>
          <target state="translated">S &lt;code&gt;isoExtString&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4763442f1fcdb7c934956ed0c078ca94cecb4b69" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;isoString&lt;/code&gt;</source>
          <target state="translated">S &lt;code&gt;isoString&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="87c2a614b00f9d46a131e521b1c970e87e284981" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;newLocation&lt;/code&gt;</source>
          <target state="translated">S &lt;code&gt;newLocation&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="864d7c2b61b468f3d87395f5b343509939e3d3b2" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;oldLocation&lt;/code&gt;</source>
          <target state="translated">S &lt;code&gt;oldLocation&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4594949c12176e425e44b2503e0be257a46d9771" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;pattern&lt;/code&gt;</source>
          <target state="translated">S &lt;code&gt;pattern&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c58fb4ceef8dbb498c32322ef5a373c844e63f9a" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">S &lt;code&gt;s&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7560f20d4834fa9d42d83d64caa71bf12ee60dd4" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;seed&lt;/code&gt;</source>
          <target state="translated">S &lt;code&gt;seed&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="572e91654bcf8c42d0bb05a4baf68154c349006f" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;simpleString&lt;/code&gt;</source>
          <target state="translated">S &lt;code&gt;simpleString&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b0748e7ed68d912b4985ea58f1801865321ed280" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;source&lt;/code&gt;</source>
          <target state="translated">S &lt;code&gt;source&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="22085ab23c0a2c2b457708dc398e2151f27afd63" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;step&lt;/code&gt;</source>
          <target state="translated">S &lt;code&gt;step&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bcd939c73571bdbf9811413c52cedd8170546d1b" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;str&lt;/code&gt;</source>
          <target state="translated">S &lt;code&gt;str&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ea8e3ebcf296d0466ec5b83431c3f508a1129aed" translate="yes" xml:space="preserve">
          <source>S &lt;strong id=&quot;center&quot;&gt;center&lt;/strong&gt;(S)(S s, size_t width, dchar fillChar = ' ')</source>
          <target state="translated">S &lt;strong id=&quot;center&quot;&gt;중심&lt;/strong&gt; (S) (S s, size_t 너비, dchar fillChar = '')</target>
        </trans-unit>
        <trans-unit id="ff194ac8e1659fb1ef55f84ca193edab71e46fe9" translate="yes" xml:space="preserve">
          <source>S &lt;strong id=&quot;encode&quot;&gt;encode&lt;/strong&gt;(S)(S s);</source>
          <target state="translated">S &lt;strong id=&quot;encode&quot;&gt;인코딩&lt;/strong&gt; (S) (Ss);</target>
        </trans-unit>
        <trans-unit id="45bede8d40f4ea2b9d66eb19c9f1bb74d28dece7" translate="yes" xml:space="preserve">
          <source>S &lt;strong id=&quot;leftJustify&quot;&gt;leftJustify&lt;/strong&gt;(S)(S s, size_t width, dchar fillChar = ' ')</source>
          <target state="translated">S &lt;strong id=&quot;leftJustify&quot;&gt;왼쪽 Justify&lt;/strong&gt; (S) (S s, size_t 너비, dchar fillChar = '')</target>
        </trans-unit>
        <trans-unit id="faacb70ba561f5eaab2d93d9e1ff8fec17106215" translate="yes" xml:space="preserve">
          <source>S &lt;strong id=&quot;readText&quot;&gt;readText&lt;/strong&gt;(S = string, R)(auto ref R name)</source>
          <target state="translated">S &lt;strong id=&quot;readText&quot;&gt;readText&lt;/strong&gt; (S = 문자열, R) (자동 참조 R 이름)</target>
        </trans-unit>
        <trans-unit id="e1f793c68a84ebeeb87f9b20a9fe015b979293d4" translate="yes" xml:space="preserve">
          <source>S &lt;strong id=&quot;readln&quot;&gt;readln&lt;/strong&gt;(S = string)(dchar terminator = '\x0a')</source>
          <target state="translated">S &lt;strong id=&quot;readln&quot;&gt;readln&lt;/strong&gt; (S = 문자열) (dchar terminator = '\ x0a')</target>
        </trans-unit>
        <trans-unit id="684aa7427e974eb85fd33b4bb65ae99bcfd64843" translate="yes" xml:space="preserve">
          <source>S &lt;strong id=&quot;rightJustify&quot;&gt;rightJustify&lt;/strong&gt;(S)(S s, size_t width, dchar fillChar = ' ')</source>
          <target state="translated">S &lt;strong id=&quot;rightJustify&quot;&gt;rightJustify&lt;/strong&gt; (S) (S s, size_t 너비, dchar fillChar = '')</target>
        </trans-unit>
        <trans-unit id="0393059fed805e5ef642dd11255c12523350d4b3" translate="yes" xml:space="preserve">
          <source>S &lt;strong id=&quot;wrap&quot;&gt;wrap&lt;/strong&gt;(S)(S s, in size_t columns = 80, S firstindent = null, S indent = null, in size_t tabsize = 8)</source>
          <target state="translated">S &lt;strong id=&quot;wrap&quot;&gt;랩&lt;/strong&gt; (S) (S, size_t 열 = 80, S firstindent = null, S 들여 쓰기 = null, size_t tabsize = 8)</target>
        </trans-unit>
        <trans-unit id="e917cf6ebf99c11da0b0aa44342f6a56c3838c33" translate="yes" xml:space="preserve">
          <source>S1 &lt;code&gt;r1&lt;/code&gt;</source>
          <target state="translated">S1 &lt;code&gt;r1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7f5aa57d10094e07762a865607ca3aebaebcfaf1" translate="yes" xml:space="preserve">
          <source>S2 &lt;code&gt;r2&lt;/code&gt;</source>
          <target state="translated">S2 &lt;code&gt;r2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="90f7dcbe0a7adc29f1b7883d9998068696ebe5c2" translate="yes" xml:space="preserve">
          <source>SDC (Stupid D Compiler) is the compiler</source>
          <target state="translated">SDC (Stupid D Compiler)는 컴파일러입니다</target>
        </trans-unit>
        <trans-unit id="aaad61307e238135c76b878cf7f2b76b019102a4" translate="yes" xml:space="preserve">
          <source>SELECT ... FROM &amp;lt;rtree&amp;gt; WHERE &amp;lt;rtree col&amp;gt; MATCH zGeom(... params ...)</source>
          <target state="translated">&amp;lt;rtree&amp;gt; WHERE &amp;lt;rtree col&amp;gt; MATCH zGeom (... params ...)에서 선택 ...</target>
        </trans-unit>
        <trans-unit id="9dea28f2424de76cbec5c0f706b39a3a24402ebb" translate="yes" xml:space="preserve">
          <source>SHA alias for SHA-1, hash is ubyte[20]</source>
          <target state="translated">SHA-1의 SHA 별명, 해시는 ubyte [20]</target>
        </trans-unit>
        <trans-unit id="f6ba60d6057db7ffbde7428d5efb7ca39d8e5a8d" translate="yes" xml:space="preserve">
          <source>SHA alias for SHA-224, hash is ubyte[28]</source>
          <target state="translated">SHA-224의 SHA 별칭, 해시는 ubyte [28]</target>
        </trans-unit>
        <trans-unit id="ef412b0408f1131601bc1d081c71753f55a6f5f5" translate="yes" xml:space="preserve">
          <source>SHA alias for SHA-256, hash is ubyte[32]</source>
          <target state="translated">SHA-256의 SHA 별명, 해시는 ubyte [32]</target>
        </trans-unit>
        <trans-unit id="9e1c0999aff0e08d1cc34cb7c8be49144fdf7d19" translate="yes" xml:space="preserve">
          <source>SHA alias for SHA-384, hash is ubyte[48]</source>
          <target state="translated">SHA-384의 SHA 별칭, 해시는 ubyte [48]</target>
        </trans-unit>
        <trans-unit id="be1e06763922a87658d0515fcb65953b951af771" translate="yes" xml:space="preserve">
          <source>SHA alias for SHA-512, hash is ubyte[64]</source>
          <target state="translated">SHA-512의 SHA 별칭, 해시는 ubyte [64]</target>
        </trans-unit>
        <trans-unit id="83d47a665aa11f19470eabbe4ad0c6a468a784c5" translate="yes" xml:space="preserve">
          <source>SHA alias for SHA-512/224, hash is ubyte[28]</source>
          <target state="translated">SHA-512 / 224의 SHA 별칭, 해시는 ubyte [28]</target>
        </trans-unit>
        <trans-unit id="edb9edf7cba4777e2af2817cdc003dc252ec2048" translate="yes" xml:space="preserve">
          <source>SHA alias for SHA-512/256, hash is ubyte[32]</source>
          <target state="translated">SHA-512 / 256의 SHA 별명, 해시는 ubyte [32]</target>
        </trans-unit>
        <trans-unit id="218e949ab000eedecd7f5be2181af475d7a28bf4" translate="yes" xml:space="preserve">
          <source>SHA initialization. Begins an SHA1/SHA2 operation.</source>
          <target state="translated">SHA 초기화. SHA1 / SHA2 작업을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="377b0c5330ca180363130716108279f340ca8914" translate="yes" xml:space="preserve">
          <source>SHA2 comes in several different versions, all supported by this module: SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224 and SHA-512/256.</source>
          <target state="translated">SHA2는 SHA-224, SHA-256, SHA-384, SHA-512, SHA-512 / 224 및 SHA-512 / 256과 같은 여러 가지 버전으로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="6de691384f5963f51651150662473268acfe159d" translate="yes" xml:space="preserve">
          <source>SIMD</source>
          <target state="translated">SIMD</target>
        </trans-unit>
        <trans-unit id="8ae7a444746a4694c1f810fd55c72594ceaefb23" translate="yes" xml:space="preserve">
          <source>SIMD intrinsics</source>
          <target state="translated">SIMD 내장 함수</target>
        </trans-unit>
        <trans-unit id="585340cadbd70b05ddcce6b79f008a8cfde57213" translate="yes" xml:space="preserve">
          <source>SIMD vectors are formatted as arrays.</source>
          <target state="translated">SIMD 벡터는 배열 형식입니다.</target>
        </trans-unit>
        <trans-unit id="988fdc325bf41ddaa8687b657a22220f9b0cf25e" translate="yes" xml:space="preserve">
          <source>SIZE_INVALID when the size cannot be determined</source>
          <target state="translated">크기를 결정할 수없는 경우 SIZE_INVALID</target>
        </trans-unit>
        <trans-unit id="86abe807b4ad4886d4e603cb7e82f1ea78f0b47d" translate="yes" xml:space="preserve">
          <source>SList &lt;strong id=&quot;opBinary&quot;&gt;opBinary&lt;/strong&gt;(string op, Stuff)(Stuff rhs)</source>
          <target state="translated">SList &lt;strong id=&quot;opBinary&quot;&gt;opBinary&lt;/strong&gt; (스트링 op, 재료) (Stuff rhs)</target>
        </trans-unit>
        <trans-unit id="787bca980009633361375ca85176c51bdd5eafe3" translate="yes" xml:space="preserve">
          <source>SList &lt;strong id=&quot;opBinaryRight&quot;&gt;opBinaryRight&lt;/strong&gt;(string op, Stuff)(Stuff lhs)</source>
          <target state="translated">opBinaryRight &lt;strong id=&quot;opBinaryRight&quot;&gt;Sstring&lt;/strong&gt; op, Stuff) (Stuff lhs)</target>
        </trans-unit>
        <trans-unit id="96f382d010f0023803a2572f0d3691ad7e5ef724" translate="yes" xml:space="preserve">
          <source>SPNEGO auth</source>
          <target state="translated">SPNEGO 인증</target>
        </trans-unit>
        <trans-unit id="5e9ce45942cc7e9d26f3a46fe1708d35956c0bbd" translate="yes" xml:space="preserve">
          <source>SParent &lt;strong id=&quot;parent&quot;&gt;parent&lt;/strong&gt;;</source>
          <target state="translated">유능한 &lt;strong id=&quot;parent&quot;&gt;부모&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="0a4d6cf316fc8dd03be409de229b75e6a4445a50" translate="yes" xml:space="preserve">
          <source>SQL Function Context Object</source>
          <target state="translated">SQL 함수 컨텍스트 객체</target>
        </trans-unit>
        <trans-unit id="c354013bd3ec56e8aa2a52a6efc8e220327d20d0" translate="yes" xml:space="preserve">
          <source>SQL Keyword Checking</source>
          <target state="translated">SQL 키워드 확인</target>
        </trans-unit>
        <trans-unit id="ba1a0225e63388b5a990690d4b4fb5821830e1d8" translate="yes" xml:space="preserve">
          <source>SQL Statement Object</source>
          <target state="translated">SQL 문 객체</target>
        </trans-unit>
        <trans-unit id="d284e692561007ebb69fa47dc5417ac0d2e8670c" translate="yes" xml:space="preserve">
          <source>SQL Trace Hook</source>
          <target state="translated">SQL 추적 후크</target>
        </trans-unit>
        <trans-unit id="2b61cfd89697cf1e4c1606af934cf897a3a7e3c3" translate="yes" xml:space="preserve">
          <source>SQLite Runtime Status</source>
          <target state="translated">SQLite 런타임 상태</target>
        </trans-unit>
        <trans-unit id="2e7ef778859b488d78ccefae8b84f6a54088b1fa" translate="yes" xml:space="preserve">
          <source>SRCFILENAME</source>
          <target state="translated">SRCFILENAME</target>
        </trans-unit>
        <trans-unit id="0460781581237ef65859a0682e556728b2150b0a" translate="yes" xml:space="preserve">
          <source>SRange &lt;code&gt;source&lt;/code&gt;</source>
          <target state="translated">SRange &lt;code&gt;source&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5d69c2ff3c2f8e2e33ba27b1f75b0e8bda6f0441" translate="yes" xml:space="preserve">
          <source>SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2 and AVX are supported.</source>
          <target state="translated">SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2 및 AVX가 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="9c2137290ddc17e1bf47aba75e1fa887c3bb0d0b" translate="yes" xml:space="preserve">
          <source>SSL for all communication or fail</source>
          <target state="translated">모든 통신에 대한 SSL 또는 실패</target>
        </trans-unit>
        <trans-unit id="94c18953250ee18df93c40e56974f7303e0e4b86" translate="yes" xml:space="preserve">
          <source>SSL for the control connection or fail</source>
          <target state="translated">제어 연결을위한 SSL 또는 실패</target>
        </trans-unit>
        <trans-unit id="34a8103eb62af3cb2a59c7412e2ef9c7225d5a2f" translate="yes" xml:space="preserve">
          <source>SSL options are present</source>
          <target state="translated">SSL 옵션이 있습니다</target>
        </trans-unit>
        <trans-unit id="3d903d50621cb00ff243d594748c29302fa3665e" translate="yes" xml:space="preserve">
          <source>SSPI is supported</source>
          <target state="translated">SSPI가 지원됩니다</target>
        </trans-unit>
        <trans-unit id="bec5a021426205f4bcb6e907edee1eeb124b5cad" translate="yes" xml:space="preserve">
          <source>ST1 real part ST0 imaginary part</source>
          <target state="translated">ST1 실수 부 ST0 허수 부</target>
        </trans-unit>
        <trans-unit id="7196e7c29d205cf35657781e59674fc592b0e1d5" translate="yes" xml:space="preserve">
          <source>START</source>
          <target state="translated">START</target>
        </trans-unit>
        <trans-unit id="ead9d31f2913387ea670737a1d22aa3db8997291" translate="yes" xml:space="preserve">
          <source>STL's &lt;code&gt;adjacent_find&lt;/code&gt;</source>
          <target state="translated">STL의 &lt;code&gt;adjacent_find&lt;/code&gt; _ 찾기</target>
        </trans-unit>
        <trans-unit id="3d433c1de58ad88f4a0ab9475db3fbc3a187c129" translate="yes" xml:space="preserve">
          <source>STL's &lt;code&gt;rotate&lt;/code&gt;</source>
          <target state="translated">STL의 &lt;code&gt;rotate&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c52da2e75828833f502383caea12087d8488f445" translate="yes" xml:space="preserve">
          <source>STRICT</source>
          <target state="translated">STRICT</target>
        </trans-unit>
        <trans-unit id="f8704c48de99f629f97125ecc53909c6abff4468" translate="yes" xml:space="preserve">
          <source>STerm</source>
          <target state="translated">STerm</target>
        </trans-unit>
        <trans-unit id="ed77febc58c1f597f3bbfc31c0982965457b2d93" translate="yes" xml:space="preserve">
          <source>SYSTEMTIME* &lt;code&gt;st&lt;/code&gt;</source>
          <target state="translated">SYSTEMTIME * &lt;code&gt;st&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4b60f7266895adacdf4bfc664cfeee4d1a844556" translate="yes" xml:space="preserve">
          <source>S[] &lt;code&gt;lines&lt;/code&gt;</source>
          <target state="translated">S [] &lt;code&gt;lines&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d3f35d2d44b26e7ed2fcf89c8e36d5bd36488aae" translate="yes" xml:space="preserve">
          <source>S[] &lt;code&gt;patterns&lt;/code&gt;</source>
          <target state="translated">S [] &lt;code&gt;patterns&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cba907670e663432d7647ede5695a243fd25e987" translate="yes" xml:space="preserve">
          <source>Safe Aliasing</source>
          <target state="translated">안전한 앨리어싱</target>
        </trans-unit>
        <trans-unit id="ec0bf6a312a9f40f412a6beb9121f50c2ef0d6ef" translate="yes" xml:space="preserve">
          <source>Safe External Functions</source>
          <target state="translated">안전한 외부 기능</target>
        </trans-unit>
        <trans-unit id="6d4a129672b620efc79c9478b37bd02b09f23063" translate="yes" xml:space="preserve">
          <source>Safe Functions</source>
          <target state="translated">안전한 기능</target>
        </trans-unit>
        <trans-unit id="fe9c5a1edff00d7447ccc334c14287fb6479ec8f" translate="yes" xml:space="preserve">
          <source>Safe Interfaces</source>
          <target state="translated">안전한 인터페이스</target>
        </trans-unit>
        <trans-unit id="9faf57fc4ed8683e442e06aa290692f2e3a512c4" translate="yes" xml:space="preserve">
          <source>Safe Values</source>
          <target state="translated">안전한 가치</target>
        </trans-unit>
        <trans-unit id="c922825bf9f43cf96017af296ca65b80d35299b0" translate="yes" xml:space="preserve">
          <source>Safe functions</source>
          <target state="translated">안전한 기능</target>
        </trans-unit>
        <trans-unit id="eb258855cc717eb39d618134eb80322fd4721cb0" translate="yes" xml:space="preserve">
          <source>Safe functions are covariant with trusted or system functions.</source>
          <target state="translated">안전한 기능은 신뢰할 수있는 기능 또는 시스템 기능과 공변합니다.</target>
        </trans-unit>
        <trans-unit id="af004793aec7230c86f503125f1c07aba86a96df" translate="yes" xml:space="preserve">
          <source>Safe functions are marked with the &lt;code&gt;@safe&lt;/code&gt; attribute.</source>
          <target state="translated">안전 기능은 &lt;code&gt;@safe&lt;/code&gt; 속성으로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="eb9bc845265935cb5c82599a60cf8ab82cb89c2d" translate="yes" xml:space="preserve">
          <source>Safe functions have &lt;a href=&quot;#safe-interfaces&quot;&gt;safe interfaces&lt;/a&gt;. An implementation must enforce this by restricting the function's body to operations that are known safe.</source>
          <target state="translated">안전한 기능에는 &lt;a href=&quot;#safe-interfaces&quot;&gt;안전한 인터페이스가&lt;/a&gt; 있습니다. 구현시 함수의 본문을 안전한 것으로 알려진 작업으로 제한하여이를 시행해야합니다.</target>
        </trans-unit>
        <trans-unit id="b5666ba4ff9ee05db0c478f56571ac6677e83dab" translate="yes" xml:space="preserve">
          <source>Samaritan</source>
          <target state="translated">Samaritan</target>
        </trans-unit>
        <trans-unit id="99bd6516e5bd61924dcf1c10ab4f7049ad6403d4" translate="yes" xml:space="preserve">
          <source>Same as !(x.empty), provided for its convenience in conditional statements.</source>
          <target state="translated">조건 문의 편의를 위해 제공되는! (x.empty)와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="727481a8b962fc466248dedb31261f069b953503" translate="yes" xml:space="preserve">
          <source>Same as .front, provided for compatibility with original std.regex.</source>
          <target state="translated">.front와 동일하며 원래 std.regex와의 호환성을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="fd3ad512eab2f944941edd64a482d503631baaf1" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#moveSome&quot;&gt;&lt;code&gt;moveSome&lt;/code&gt;&lt;/a&gt; but assumes all elements in &lt;code&gt;tgt&lt;/code&gt; are uninitialized. Uses &lt;a href=&quot;#moveEmplace&quot;&gt;&lt;code&gt;moveEmplace&lt;/code&gt;&lt;/a&gt; to move elements from &lt;code&gt;src&lt;/code&gt; over elements from &lt;code&gt;tgt&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#moveSome&quot;&gt; &lt;code&gt;moveSome&lt;/code&gt; &lt;/a&gt; 과 동일 하지만 &lt;code&gt;tgt&lt;/code&gt; 의 모든 요소 가 초기화되지 않은 것으로 가정합니다 . &lt;a href=&quot;#moveEmplace&quot;&gt; &lt;code&gt;moveEmplace&lt;/code&gt; &lt;/a&gt; 를 사용 하여 &lt;code&gt;src&lt;/code&gt; 의 요소를 &lt;code&gt;tgt&lt;/code&gt; 의 요소 위로 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="78d4c9aecdc6038f22eef6a6ff18f5537f1170ac" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;c.insert(v)&lt;/code&gt; but relaxes complexity to linear.</source>
          <target state="translated">&lt;code&gt;c.insert(v)&lt;/code&gt; 와 동일 하지만 선형으로 복잡성을 완화합니다.</target>
        </trans-unit>
        <trans-unit id="75a9773be000b0028e154f6bb028458e9b68ee7d" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;c.insert(x)&lt;/code&gt;, but is guaranteed to not invalidate any ranges.</source>
          <target state="translated">&lt;code&gt;c.insert(x)&lt;/code&gt; 와 동일 하지만 범위를 무효화하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="3cbb07b2f250984e910a19b183cea054456f94d7" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;c.insertBack(v)&lt;/code&gt;, but guarantees no ranges will be invalidated.</source>
          <target state="translated">&lt;code&gt;c.insertBack(v)&lt;/code&gt; 와 동일 하지만 범위가 무효화되지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="b7b832c907a3c8e2c88fd08867c961e0660e4dc4" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;c.insertFront(v)&lt;/code&gt;, but guarantees no ranges will be invalidated.</source>
          <target state="translated">&lt;code&gt;c.insertFront(v)&lt;/code&gt; 와 동일 하지만 범위가 무효화되지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="c4511bbf2dc51a3f2a6ed286e36440cb10f6b4fa" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;c.linearRemove(r)&lt;/code&gt;, but guarantees iterators are not invalidated.</source>
          <target state="translated">&lt;code&gt;c.linearRemove(r)&lt;/code&gt; 와 동일 하지만 반복자가 무효화되지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="33a4e65e5aca4c9b1c52f16398b17a822156c321" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;c.remove(r)&lt;/code&gt;, but guarantees iterators are not invalidated.</source>
          <target state="translated">&lt;code&gt;c.remove(r)&lt;/code&gt; 와 동일 하지만 반복자가 무효화되지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="b75d756c31c9feaab2cdaef81d897d243a886269" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;c.removeAny()&lt;/code&gt;, but is guaranteed to not invalidate any iterators.</source>
          <target state="translated">&lt;code&gt;c.removeAny()&lt;/code&gt; 와 동일 하지만 반복자를 무효화하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="4df85d259bba8c69823d7406dfe7ba0f09b5800f" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;c.removeBack()&lt;/code&gt;, but guarantees no ranges will be invalidated.</source>
          <target state="translated">&lt;code&gt;c.removeBack()&lt;/code&gt; 과 동일 하지만 범위가 무효화되지 않도록 보장합니다.</target>
        </trans-unit>
        <trans-unit id="3948eac36809d043a27f12e3ecdcee465617ea58" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;c.removeFront()&lt;/code&gt;, but guarantees no ranges will be invalidated.</source>
          <target state="translated">&lt;code&gt;c.removeFront()&lt;/code&gt; 와 동일 하지만 범위가 무효화되지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="dd0144d3023f6044dfa1ded65b6882f70a32dd7e" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;c.stableInsert(v)&lt;/code&gt; but relaxes complexity to linear.</source>
          <target state="translated">&lt;code&gt;c.stableInsert(v)&lt;/code&gt; 와 동일 하지만 복잡성을 선형으로 완화합니다.</target>
        </trans-unit>
        <trans-unit id="3ab6de85a2865e49e64d621a96ffa42c153da266" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;deprecation&lt;/code&gt;, but takes a va_list parameter, and optionally additional message prefixes.</source>
          <target state="translated">&lt;code&gt;deprecation&lt;/code&gt; 과 동일 하지만 va_list 매개 변수 및 선택적으로 추가 메시지 접 두부를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="a19728bd700823f3dce9f62e0e300f7b45545b66" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;deprecationSupplemental&lt;/code&gt;, but takes a va_list parameter.</source>
          <target state="translated">&lt;code&gt;deprecationSupplemental&lt;/code&gt; 과 동일 하지만 va_list 매개 변수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="297b5301668c075c062dde99e98da1f1b3af4f6b" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;error&lt;/code&gt;, but takes a va_list parameter, and optionally additional message prefixes.</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; 와 동일 하지만 va_list 매개 변수 및 선택적으로 추가 메시지 접 두부를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="37b532d31065c6d359d467676f9d969d2815ef54" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;errorSupplemental&lt;/code&gt;, but takes a va_list parameter.</source>
          <target state="translated">&lt;code&gt;errorSupplemental&lt;/code&gt; 과 동일 하지만 va_list 매개 변수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="f384e1f2863a2aeebc9dd8f5c5d2184416ff5cbc" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;fold&lt;/code&gt;, but specialized for accurate summation.</source>
          <target state="translated">&lt;code&gt;fold&lt;/code&gt; 와 동일 하지만 정확한 합산에 특화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="032c9e0e823b8183cf4d02cceba81d25aad65725" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;message&lt;/code&gt;, but takes a va_list parameter.</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt; 와 동일 하지만 va_list 매개 변수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="71490da7d6c15740278024bfb9cca42797f20b8b" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;receive&lt;/code&gt; except that rather than wait forever for a message, it waits until either it receives a message or the given &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt; has passed. It returns &lt;code&gt;true&lt;/code&gt; if it received a message and &lt;code&gt;false&lt;/code&gt; if it timed out waiting for one.</source>
          <target state="translated">메시지를 영원히 기다리지 않고 메시지를 받거나 지정된 &lt;a href=&quot;core_time#Duration&quot;&gt; &lt;code&gt;core.time.Duration&lt;/code&gt; &lt;/a&gt; 이 끝날 때까지 기다린다는 점을 제외하면 &lt;code&gt;receive&lt;/code&gt; 와 같습니다 . 메시지를 받으면 &lt;code&gt;false&lt;/code&gt; 를, 시간 초과하면 false를 리턴 &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c7a3019ce60733d0ce7b4dc634b679a1d4891785" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;tip&lt;/code&gt;, but takes a va_list parameter.</source>
          <target state="translated">&lt;code&gt;tip&lt;/code&gt; 과 동일 하지만 va_list 매개 변수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e5c4fbf85f3beb6de49795fef02185002ad63624" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;warning&lt;/code&gt;, but takes a va_list parameter.</source>
          <target state="translated">&lt;code&gt;warning&lt;/code&gt; 과 동일 하지만 va_list 매개 변수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="4c48b5bda54b35c0efd762ae2341da89fa913ce1" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;warningSupplemental&lt;/code&gt;, but takes a va_list parameter.</source>
          <target state="translated">&lt;code&gt;warningSupplemental&lt;/code&gt; 과 동일 하지만 va_list 매개 변수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="751f77d7da736194060538a83757f294ac637c7b" translate="yes" xml:space="preserve">
          <source>Same as ==, except that positive and negative zero are not identical, and two NANs are identical if they have the same 'payload'.</source>
          <target state="translated">양수와 음수 0이 같지 않고 두 개의 NAN이 동일한 '페이로드'를 갖는 경우를 제외하고 ==와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="6d61bd76cf8c63963304e90e422617e5e5227083" translate="yes" xml:space="preserve">
          <source>Same as Dsymbol::oneMember(), but look at an array of Dsymbols.</source>
          <target state="translated">Dsymbol :: oneMember ()와 동일하지만 Dsymbol의 배열을 살펴보십시오.</target>
        </trans-unit>
        <trans-unit id="3f83382eba02336641c8e8bb79a1282343a63f02" translate="yes" xml:space="preserve">
          <source>Same as TIMEOUT and CONNECTTIMEOUT, but with ms resolution</source>
          <target state="translated">TIMEOUT 및 CONNECTTIMEOUT과 동일하지만 ms 해상도</target>
        </trans-unit>
        <trans-unit id="ffb011bf8703e4764378cf5a0a0bf448f82d9b15" translate="yes" xml:space="preserve">
          <source>Same as above but also checks for protected symbols visible from scope &lt;code&gt;sc&lt;/code&gt;. Used for qualified name lookup.</source>
          <target state="translated">위와 동일하지만 범위 &lt;code&gt;sc&lt;/code&gt; 에서 보이는 보호 된 심볼을 확인합니다 . 정규화 된 이름 조회에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8efe3f62051383a075e76337100acf0e39cbebb0" translate="yes" xml:space="preserve">
          <source>Same as above, but allows Loc() literals to be passed.</source>
          <target state="translated">위와 동일하지만 Loc () 리터럴을 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e9308ddbd8fba34c5d92529f2a71ce3a97c679fc" translate="yes" xml:space="preserve">
          <source>Same as above, but determines the lookup module from symbols &lt;code&gt;origin&lt;/code&gt;.</source>
          <target state="translated">위와 동일하지만 심볼 &lt;code&gt;origin&lt;/code&gt; 에서 조회 모듈을 결정합니다 .</target>
        </trans-unit>
        <trans-unit id="755f3e16e6c0eccc99c51dc60992931000e6c820" translate="yes" xml:space="preserve">
          <source>Same as above, but doesn't take a location argument.</source>
          <target state="translated">위와 동일하지만 위치 인수를 취하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8a5d84d8c80211114b7047ff1d9ff284dbeb9850" translate="yes" xml:space="preserve">
          <source>Same as above, but takes a filename and line information arguments as separate parameters.</source>
          <target state="translated">위와 동일하지만 파일 이름 및 줄 정보 인수를 별도의 매개 변수로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="4148bec1f4d9c3025435fe1637b31f691f714c80" translate="yes" xml:space="preserve">
          <source>Same as above, but takes a separate mutex instead of sharing one among all initOnce instances.</source>
          <target state="translated">위와 동일하지만 모든 initOnce 인스턴스 중 하나를 공유하는 대신 별도의 뮤텍스를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="6ef3b765e0b83339c93f08100b26d393bcd759f2" translate="yes" xml:space="preserve">
          <source>Same as above, for item with non-zero initializer.</source>
          <target state="translated">0이 아닌 이니셜 라이저가있는 항목의 경우 위와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="5dedd4e173847bb02bce0989d35ee088225c2966" translate="yes" xml:space="preserve">
          <source>Same as above, zero initializes the item.</source>
          <target state="translated">위와 동일하게 0은 항목을 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="d718b33c18604b3f2825d9a34893682fd36cbcb8" translate="yes" xml:space="preserve">
          <source>Same as aggregates and functions, variable declarations with &lt;a href=&quot;declaration#Initializer&quot;&gt;&lt;i&gt;Initializer&lt;/i&gt;&lt;/a&gt; can have optional template parameters:</source>
          <target state="translated">집계 및 함수와 마찬가지로 &lt;a href=&quot;declaration#Initializer&quot;&gt;&lt;i&gt;Initializer&lt;/i&gt;&lt;/a&gt; 를 사용한 변수 선언 에는 선택적 템플릿 매개 변수가있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="df42bab69a32a505468aa4d21852e1296728537a" translate="yes" xml:space="preserve">
          <source>Same as getFieldIndex, but checks for a direct match with the VarDeclaration</source>
          <target state="translated">getFieldIndex와 동일하지만 VarDeclaration과 직접 일치하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="87a0a5b05ee89501954d4b629bf09767caba736f" translate="yes" xml:space="preserve">
          <source>Same as previous, but addr is an IPv4 address string in the dotted-decimal form</source>
          <target state="translated">이전과 동일하지만 addr은 점으로 구분 된 십진 형식의 IPv4 주소 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="d9bfe9476663fc816dde2351073538df50c0def9" translate="yes" xml:space="preserve">
          <source>Same as the overload, but allows for the results to be stored in a user- provided buffer. The buffer must be of the same length as range, must be a random-access range, must have slicing, and must contain elements that are complex-like. This means that they must have a .re and a .im member or property that can be both read and written and are floating point numbers.</source>
          <target state="translated">과부하와 동일하지만 결과를 사용자 제공 버퍼에 저장할 수 있습니다. 버퍼는 범위와 길이가 같아야하고, 랜덤 액세스 범위 여야하고, 슬라이싱이 있어야하며, 복잡한 요소를 포함해야합니다. 즉, 읽고 쓸 수 있고 부동 소수점 숫자 인 .re 및 .im 멤버 또는 속성이 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="490fc4a66e27c7b7fee23222da4c9d9a1088faff" translate="yes" xml:space="preserve">
          <source>Same features as &lt;code&gt;FreeList&lt;/code&gt;, but packaged as a &lt;code&gt;shared&lt;/code&gt; structure that is accessible to several threads.</source>
          <target state="translated">&lt;code&gt;FreeList&lt;/code&gt; 와 동일한 기능 이지만 여러 스레드가 액세스 할 수 있는 &lt;code&gt;shared&lt;/code&gt; 구조 로 패키지되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="33e1356035ce5d0eb2ee979799006e6fb53631bb" translate="yes" xml:space="preserve">
          <source>Sample Assembly</source>
          <target state="translated">샘플 조립</target>
        </trans-unit>
        <trans-unit id="a55a0fc647ab82f0d156dbe48832b224670188d1" translate="yes" xml:space="preserve">
          <source>Sanitizes a string by replacing malformed code unit sequences with valid code unit sequences. The result is guaranteed to be valid for this encoding.</source>
          <target state="translated">잘못된 코드 단위 시퀀스를 유효한 코드 단위 시퀀스로 대체하여 문자열을 삭제합니다. 결과는이 인코딩에 유효합니다.</target>
        </trans-unit>
        <trans-unit id="588fb4501b6744b77a958bd12f00e2d300ddbedb" translate="yes" xml:space="preserve">
          <source>Sanitizes an array by replacing malformed ubyte sequences with valid ubyte sequences. The result is guaranteed to be valid for this encoding scheme.</source>
          <target state="translated">조작 된 ubyte 시퀀스를 유효한 ubyte 시퀀스로 교체하여 어레이를 삭제합니다. 결과는이 인코딩 체계에 유효합니다.</target>
        </trans-unit>
        <trans-unit id="640306121d4405dbfeb73bb587411093702f90f8" translate="yes" xml:space="preserve">
          <source>Saturation is not sticky; if a value reaches its saturation value, another operation may take it back to normal range.</source>
          <target state="translated">채도가 끈적 거리지 않습니다. 값이 채도 값에 도달하면 다른 작업에서 다시 정상 범위로 돌아갈 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c04544993d1d8f789981802f89231df026eb2cfc" translate="yes" xml:space="preserve">
          <source>Saurashtra</source>
          <target state="translated">Saurashtra</target>
        </trans-unit>
        <trans-unit id="a6cf92931d2174dd1c0e30bb678dd9a1781b9fac" translate="yes" xml:space="preserve">
          <source>Save the current iteration state of the range.</source>
          <target state="translated">범위의 현재 반복 상태를 저장하십시오.</target>
        </trans-unit>
        <trans-unit id="0b2b51abae62959c4f172203815c976a3e0e3c7d" translate="yes" xml:space="preserve">
          <source>Save the environment variable &lt;code&gt;name&lt;/code&gt; if not saved already.</source>
          <target state="translated">환경 변수 &lt;code&gt;name&lt;/code&gt; 아직 저장하지 않은 경우 저장하십시오 .</target>
        </trans-unit>
        <trans-unit id="109607031a9b2768a10f71f63027aa34e30b8964" translate="yes" xml:space="preserve">
          <source>Saves the current iteration state.</source>
          <target state="translated">현재 반복 상태를 저장합니다.</target>
        </trans-unit>
        <trans-unit id="6367ce3e46fb723629c15b19a2aa7445e9b5134f" translate="yes" xml:space="preserve">
          <source>Saving a range is not duplicating it; in the example above, &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt; still refer to the same underlying data. They just navigate that data independently.</source>
          <target state="translated">범위를 저장해도 중복되지 않습니다. 위의 예에서 &lt;code&gt;r1&lt;/code&gt; 과 &lt;code&gt;r2&lt;/code&gt; 는 여전히 동일한 기본 데이터를 나타냅니다. 그들은 그 데이터를 독립적으로 탐색합니다.</target>
        </trans-unit>
        <trans-unit id="0cc8cc783b9bed9065864d3ac7dc001f239a0ecd" translate="yes" xml:space="preserve">
          <source>Saving the &lt;code&gt;IAllocator&lt;/code&gt; Reference For Later Use</source>
          <target state="translated">나중에 사용하기 위해 &lt;code&gt;IAllocator&lt;/code&gt; 참조 저장</target>
        </trans-unit>
        <trans-unit id="9552773249da4fe207e8bf1ff0fb9fd855f56a8c" translate="yes" xml:space="preserve">
          <source>Sc</source>
          <target state="translated">Sc</target>
        </trans-unit>
        <trans-unit id="16d7763f80d8f9d31be0bdc44b2bb5a243164311" translate="yes" xml:space="preserve">
          <source>Scalar expression sub-trees of &lt;code&gt;e&lt;/code&gt; are evaluated before calling into druntime to hoist them out of the loop. This is a valid evaluation order as the actual array operations have no side-effect.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; 의 스칼라 표현식 서브 트리는 druntime을 호출하기 전에 평가하여 루프 밖으로 끌어 올립니다. 실제 어레이 작업에는 부작용이 없으므로 유효한 평가 순서입니다.</target>
        </trans-unit>
        <trans-unit id="b22d31e72e19c5dabc897823cb6fdb3fd44f49eb" translate="yes" xml:space="preserve">
          <source>Scale addition/subtraction to/from pointer.</source>
          <target state="translated">포인터에 대한 스케일 추가 / 빼기.</target>
        </trans-unit>
        <trans-unit id="c6b7e412b3d18473712a0b7f4a6d02a01db4204b" translate="yes" xml:space="preserve">
          <source>Scan forward to one of: start of identifier beginning of next line end of buf</source>
          <target state="translated">buf의 다음 행 끝의 식별자 시작으로 시작</target>
        </trans-unit>
        <trans-unit id="a8bac0de981f93a8ab291e2720acf8b97063ff17" translate="yes" xml:space="preserve">
          <source>Scan function implementations in Module m looking for functions that can be inlined, and inline them in situ.</source>
          <target state="translated">모듈 m에서 기능 구현을 스캔하여 인라인 될 수있는 기능을 찾고 인 시츄로 인라인합니다.</target>
        </trans-unit>
        <trans-unit id="4ddbc9228342b01ba225e91715e7b177ad4b7a3a" translate="yes" xml:space="preserve">
          <source>ScanAllThreadsFn &lt;code&gt;scan&lt;/code&gt;</source>
          <target state="translated">ScanAllThreadsFn &lt;code&gt;scan&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="264479eda458a0b0320ed850cc6eaac5667ad0b3" translate="yes" xml:space="preserve">
          <source>ScanAllThreadsTypeFn &lt;code&gt;scan&lt;/code&gt;</source>
          <target state="translated">ScanAllThreadsTypeFn &lt;code&gt;scan&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7faa1d62cca1d532292ea70ecc03becc2e5fdc9a" translate="yes" xml:space="preserve">
          <source>Scanning all &amp;lsquo;root&amp;rsquo; memory ranges for pointers into GC allocated memory.</source>
          <target state="translated">GC 할당 메모리에 대한 포인터에 대한 모든 '루트'메모리 범위를 스캔합니다.</target>
        </trans-unit>
        <trans-unit id="3dd5be73b688b9a1c111e4512ec7b5b9a208c35d" translate="yes" xml:space="preserve">
          <source>Scans the bits in v from the most significant bit to the least significant bit, looking for the first set bit.</source>
          <target state="translated">최상위 비트에서 최하위 비트까지 v의 비트를 스캔하여 첫 번째 세트 비트를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="fab7bc0eb467c6a0a3f3550b4413fe32726a2d8f" translate="yes" xml:space="preserve">
          <source>Scans the bits in v starting with bit 0, looking for the first set bit.</source>
          <target state="translated">비트 0부터 시작하여 v의 비트를 스캔하여 첫 번째 설정 비트를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="569aae5b47e464b83049959de67717fbf2ff4407" translate="yes" xml:space="preserve">
          <source>Scenario</source>
          <target state="translated">Scenario</target>
        </trans-unit>
        <trans-unit id="c8d0fd7d6c36cdbcb6f334d0410d40ef7a6c465c" translate="yes" xml:space="preserve">
          <source>Scheduled for deprecation. Please use &lt;code&gt;dataCaches&lt;/code&gt; instead.</source>
          <target state="translated">지원 중단 예정 사용하십시오 &lt;code&gt;dataCaches&lt;/code&gt; 을 대신.</target>
        </trans-unit>
        <trans-unit id="4e489cc0f7231aff9d2f32dae249c97a424d884b" translate="yes" xml:space="preserve">
          <source>Scheduler &lt;strong id=&quot;scheduler&quot;&gt;scheduler&lt;/strong&gt;;</source>
          <target state="translated">스케줄러 &lt;strong id=&quot;scheduler&quot;&gt;스케줄러&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="4057abdd4ada17d51ad3de8bfe7399eb8ec6b4b9" translate="yes" xml:space="preserve">
          <source>Scope &lt;code&gt;sc&lt;/code&gt;</source>
          <target state="translated">범위 &lt;code&gt;sc&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="feeeb5ea742e01f78e79d82899cf5470dd9ceda4" translate="yes" xml:space="preserve">
          <source>Scope Block Statements</source>
          <target state="translated">범위 블록 설명</target>
        </trans-unit>
        <trans-unit id="efddbb9da8296c76dccb4126bfe638c8368ab8e1" translate="yes" xml:space="preserve">
          <source>Scope Classes</source>
          <target state="translated">범위 클래스</target>
        </trans-unit>
        <trans-unit id="ff37f38826365912c58038af9027c9b58c85cbb3" translate="yes" xml:space="preserve">
          <source>Scope Guard Statement</source>
          <target state="translated">스코프 가드 선언문</target>
        </trans-unit>
        <trans-unit id="bc56e8088b13525d0a4a3b4b47c7ab89044a4be8" translate="yes" xml:space="preserve">
          <source>Scope Parameters</source>
          <target state="translated">범위 매개 변수</target>
        </trans-unit>
        <trans-unit id="ef7bff657e6b17b6bdf5df55e7c5e8449a231f32" translate="yes" xml:space="preserve">
          <source>Scope Statements</source>
          <target state="translated">범위 설명</target>
        </trans-unit>
        <trans-unit id="bbea6fb6b090070290dd113beb8a61b82be2ca72" translate="yes" xml:space="preserve">
          <source>Scope Table</source>
          <target state="translated">범위 테이블</target>
        </trans-unit>
        <trans-unit id="9eb6a47f1c65e6eab0b311403716abb5d2986340" translate="yes" xml:space="preserve">
          <source>Scope and Return Parameters</source>
          <target state="translated">범위 및 반환 매개 변수</target>
        </trans-unit>
        <trans-unit id="93c85a0c24e024cf624c6cd55b5bf042d8a27202" translate="yes" xml:space="preserve">
          <source>Scope in which the call occurs</source>
          <target state="translated">통화가 발생하는 범위</target>
        </trans-unit>
        <trans-unit id="18f1215f452aa02e3d371abc03ee7220bd6faee8" translate="yes" xml:space="preserve">
          <source>Scope which triggered the generation of the C main, used to get the module where the D main is.</source>
          <target state="translated">C 메인 생성을 트리거 한 범위는 D 메인이있는 모듈을 얻는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="530a514d37623d594f817863dd9345f32171dbc7" translate="yes" xml:space="preserve">
          <source>Scope* &lt;code&gt;sc&lt;/code&gt;</source>
          <target state="translated">범위 * &lt;code&gt;sc&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c18627f4598d0f0fadc7bafaad6d84963b0115f7" translate="yes" xml:space="preserve">
          <source>Scope* &lt;strong id=&quot;newScope&quot;&gt;newScope&lt;/strong&gt;(Scope* sc);</source>
          <target state="translated">Scope * &lt;strong id=&quot;newScope&quot;&gt;newScope&lt;/strong&gt; (Scope * sc);</target>
        </trans-unit>
        <trans-unit id="a72527b2f4d99350413c59a6d59f72142044189a" translate="yes" xml:space="preserve">
          <source>Scope* &lt;strong id=&quot;scopeForTemplateParameters&quot;&gt;scopeForTemplateParameters&lt;/strong&gt;(TemplateInstance ti, Scope* sc);</source>
          <target state="translated">Scope * &lt;strong id=&quot;scopeForTemplateParameters&quot;&gt;scopeForTemplateParameters&lt;/strong&gt; (TemplateInstance ti, Scope * sc);</target>
        </trans-unit>
        <trans-unit id="2079a397ee6263a2f96e01550925b0a932f092ec" translate="yes" xml:space="preserve">
          <source>ScopeDsymbol &lt;strong id=&quot;forward&quot;&gt;forward&lt;/strong&gt;;</source>
          <target state="translated">ScopeDsymbol &lt;strong id=&quot;forward&quot;&gt;forward&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="4169d5fa8946da60036063bbb0f697953c5d62d1" translate="yes" xml:space="preserve">
          <source>ScopeDsymbol &lt;strong id=&quot;scopesym&quot;&gt;scopesym&lt;/strong&gt;;</source>
          <target state="translated">ScopeDsymbol &lt;strong id=&quot;scopesym&quot;&gt;scopesym&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="1b3f28294e22c837eef3daf20e8c0c69bfbe6033" translate="yes" xml:space="preserve">
          <source>ScopeGuardStatement</source>
          <target state="translated">ScopeGuardStatement</target>
        </trans-unit>
        <trans-unit id="e229afc1cfbd552b13db67a7a57ecb7a9e1eaf4f" translate="yes" xml:space="preserve">
          <source>ScopeStatement</source>
          <target state="translated">ScopeStatement</target>
        </trans-unit>
        <trans-unit id="30d85dc75fd3ccdc187797c4e4326534883fa5d7" translate="yes" xml:space="preserve">
          <source>Scoped Imports</source>
          <target state="translated">범위 수입</target>
        </trans-unit>
        <trans-unit id="eb4353978bb23faf444b47d21dc8ed624e11238c" translate="yes" xml:space="preserve">
          <source>Scoped class instances can be embedded in a parent &lt;code&gt;class&lt;/code&gt; or &lt;code&gt;struct&lt;/code&gt;, just like a child struct instance. Scoped member variables must have type &lt;code&gt;typeof(scoped!Class(args))&lt;/code&gt;, and be initialized with a call to scoped. See below for an example.</source>
          <target state="translated">범위가 지정된 클래스 인스턴스는 자식 구조체 인스턴스와 마찬가지로 부모 &lt;code&gt;class&lt;/code&gt; 또는 &lt;code&gt;struct&lt;/code&gt; 포함될 수 있습니다 . 범위가 지정된 멤버 변수는 &lt;code&gt;typeof(scoped!Class(args))&lt;/code&gt; 유형이어야 하며 범위를 호출하여 초기화됩니다. 예는 아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5070c3b950a719e474a1f4d51b687331b1a946ab" translate="yes" xml:space="preserve">
          <source>Sean Kelly</source>
          <target state="translated">숀 켈리</target>
        </trans-unit>
        <trans-unit id="112db5f7c7defff70dd52c960e759d2d7d3cef37" translate="yes" xml:space="preserve">
          <source>Sean Kelly and &lt;a href=&quot;http://jmdavisprog.com&quot;&gt;Jonathan M Davis&lt;/a&gt;</source>
          <target state="translated">숀 켈리와 &lt;a href=&quot;http://jmdavisprog.com&quot;&gt;조나단 M 데이비스&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="03df2b6aaf7455322223689bbd7461f8d6f32167" translate="yes" xml:space="preserve">
          <source>Sean Kelly, Alex R&amp;oslash;nne Petersen</source>
          <target state="translated">숀 켈리, 알렉스 로네 피터슨</target>
        </trans-unit>
        <trans-unit id="3d1f410b20137253a90aa187e04a5819bc443cbe" translate="yes" xml:space="preserve">
          <source>Sean Kelly, Alex R&amp;oslash;nne Petersen, Manu Evans</source>
          <target state="translated">Sean Kelly, Alex R&amp;oslash;nne Petersen, 마누 에반스</target>
        </trans-unit>
        <trans-unit id="67e666191ebe7fef8960d4e0a33c23b48d0af3c6" translate="yes" xml:space="preserve">
          <source>Sean Kelly, Alex R&amp;oslash;nne Petersen, Martin Nowak</source>
          <target state="translated">Sean Kelly, Alex R&amp;oslash;nne Petersen, 마틴 노박</target>
        </trans-unit>
        <trans-unit id="b0e67e3650a9a7ee96fc07c10b9f845794beae3f" translate="yes" xml:space="preserve">
          <source>Sean Kelly, Walter Bright, Alex R&amp;oslash;nne Petersen, Martin Nowak</source>
          <target state="translated">션 켈리, 월터 브라이트, 알렉스 로네 피터슨, 마틴 노박</target>
        </trans-unit>
        <trans-unit id="5b9d8e641c6ac9a092d9254127af696506298508" translate="yes" xml:space="preserve">
          <source>Search Path for file in a safe manner.</source>
          <target state="translated">안전한 방법으로 파일을 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="c54b4aeec03de5bf3ac5445a6032756655918bbe" translate="yes" xml:space="preserve">
          <source>Search all modules for TypeInfo_Class corresponding to classname.</source>
          <target state="translated">모든 모듈에서 classname에 해당하는 TypeInfo_Class를 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="40dc545655470ed0c0f91741de8d7603008ed400" translate="yes" xml:space="preserve">
          <source>Search base classes in depth-first, left-to-right order for a class or interface named 'ident'. Stops at first found. Does not look for additional matches.</source>
          <target state="translated">'ident'라는 클래스 또는 인터페이스에 대해 깊이 우선, 왼쪽에서 오른쪽 순서로 기본 클래스를 검색하십시오. 처음 발견되면 멈 춥니 다. 추가 일치 항목을 찾지 않습니다.</target>
        </trans-unit>
        <trans-unit id="05a0c94b71eaa6145a54d9861efafeac514433c9" translate="yes" xml:space="preserve">
          <source>Search for function funcid in aggregate ad.</source>
          <target state="translated">집계 광고에서 함수 funcid를 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="b3457640c7fb124ed8ee7343562a3881696029a7" translate="yes" xml:space="preserve">
          <source>Search for ident as member of s.</source>
          <target state="translated">s의 구성원으로 ident을 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="4e4e80f1ee35dec2575daec97fba0228e833b557" translate="yes" xml:space="preserve">
          <source>Search for identifier id as a member of &lt;code&gt;this&lt;/code&gt;. &lt;code&gt;id&lt;/code&gt; may be a template instance.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 의 멤버로 식별자 ID를 검색 하십시오 . &lt;code&gt;id&lt;/code&gt; 는 템플릿 인스턴스 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="91eea3a437111e0a36b219519cd9b5506cc5af2c" translate="yes" xml:space="preserve">
          <source>Search for mutliple items in an array of items (search for needles in an array of hay stacks)</source>
          <target state="translated">항목 배열에서 여러 항목 검색 (건초 더미 배열에서 바늘 검색)</target>
        </trans-unit>
        <trans-unit id="f973c551ba9b74d7cdf6f7aec752fd9b8047cc53" translate="yes" xml:space="preserve">
          <source>Search for ptr in list.</source>
          <target state="translated">목록에서 ptr을 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="7b082131e5aaa638d89e81072e02fa0a35938d5d" translate="yes" xml:space="preserve">
          <source>Search paths for file.</source>
          <target state="translated">파일의 검색 경로.</target>
        </trans-unit>
        <trans-unit id="e66d80f386edb12b19c4e812c05579c4fd4e5f45" translate="yes" xml:space="preserve">
          <source>Search sd for a member function of the form: &lt;code&gt;extern (D) string toString();&lt;/code&gt;</source>
          <target state="translated">sd에서 다음 형식의 멤버 함수를 검색하십시오. &lt;code&gt;extern (D) string toString();&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b515692596497e8eac06050b176bd5e7c7688df8" translate="yes" xml:space="preserve">
          <source>Search the list of all threads for a thread with the given thread identifier.</source>
          <target state="translated">주어진 스레드 식별자를 가진 스레드에 대한 모든 스레드 목록을 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="92ad6483a2bd4aa98d97199db784db2ac78880e1" translate="yes" xml:space="preserve">
          <source>Searches for a &lt;code&gt;dmd.conf&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dmd.conf&lt;/code&gt; 를 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="b451945774b0c2a5083e60fde704989ae7cc56af" translate="yes" xml:space="preserve">
          <source>Searches for a &lt;code&gt;ldc2.conf&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ldc2.conf&lt;/code&gt; 를 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="f834eba1b2192f6c7c68e67fc2fd6e10437feb42" translate="yes" xml:space="preserve">
          <source>Searches for character in range.</source>
          <target state="translated">범위 내의 문자를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="bede4e788f7625375b2f02fbd23f4cfc34d7a3f4" translate="yes" xml:space="preserve">
          <source>Searches for substring in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 에서 하위 문자열을 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="27f4ce89033bc50eaffbd3f0b0ae0ce07bab14ae" translate="yes" xml:space="preserve">
          <source>Searches in a linear fashion.</source>
          <target state="translated">선형 방식으로 검색합니다.</target>
        </trans-unit>
        <trans-unit id="d230169534309838c9ee27aeebc1cc36fa9bd660" translate="yes" xml:space="preserve">
          <source>Searches the given range for an element that matches one of the given choices.</source>
          <target state="translated">주어진 선택 사항 중 하나와 일치하는 요소에 대해 주어진 범위를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="33b05da4acf3c73cb3c0816fc3f2780f769acf20" translate="yes" xml:space="preserve">
          <source>Searches using a classic interval halving policy. The search starts in the middle of the range, and each search step cuts the range in half. This policy finds a value in &amp;Omicron;(&lt;code&gt;log(n)&lt;/code&gt;) time but is less cache friendly than &lt;code&gt;gallop&lt;/code&gt; for large ranges. The &lt;code&gt;binarySearch&lt;/code&gt; policy is used as the last step of &lt;code&gt;trot&lt;/code&gt;, &lt;code&gt;gallop&lt;/code&gt;, &lt;code&gt;trotBackwards&lt;/code&gt;, and &lt;code&gt; gallopBackwards&lt;/code&gt; strategies.</source>
          <target state="translated">고전적인 간격 반감 정책을 사용하여 검색합니다. 검색은 범위의 중간에서 시작되며 각 검색 단계는 범위를 반으로 줄입니다. 이 정책은 &amp;Omicron; ( &lt;code&gt;log(n)&lt;/code&gt; ) 시간에 값을 찾지 만 넓은 범위 에서는 &lt;code&gt;gallop&lt;/code&gt; 보다 캐시 친화적이지 않습니다 . &lt;code&gt;binarySearch&lt;/code&gt; 의 정책의 마지막 단계에서 사용되는 &lt;code&gt;trot&lt;/code&gt; , &lt;code&gt;gallop&lt;/code&gt; , &lt;code&gt;trotBackwards&lt;/code&gt; 및 &lt;code&gt; gallopBackwards&lt;/code&gt; 의 전략.</target>
        </trans-unit>
        <trans-unit id="f3ab2b30008072787361f41cd64ea2a6e111bffc" translate="yes" xml:space="preserve">
          <source>Searches with a step that is grows linearly (1, 2, 3,...) leading to a quadratic search schedule (indexes tried are 0, 1, 3, 6, 10, 15, 21, 28,...) Once the search overshoots its target, the remaining interval is searched using binary search. The search is completed in &amp;Omicron;(&lt;code&gt;sqrt(n)&lt;/code&gt;) time. Use it when you are reasonably confident that the value is around the beginning of the range.</source>
          <target state="translated">선형으로 증가하는 단계 (1, 2, 3, ...)를 사용하여 2 차 검색 일정으로 이동하는 검색 (시도 된 색인은 0, 1, 3, 6, 10, 15, 21, 28, ...) 검색이 대상을 초과하면 나머지 간격은 이진 검색을 사용하여 검색됩니다. 검색은 &amp;Omicron; ( &lt;code&gt;sqrt(n)&lt;/code&gt; ) 시간 내에 완료됩니다 . 값이 범위의 시작 부분에 있다고 확신 할 때 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="98cc363c0119e35d1c8070755fc4d4c2387aad71" translate="yes" xml:space="preserve">
          <source>Searching</source>
          <target state="translated">Searching</target>
        </trans-unit>
        <trans-unit id="ef61693f1051e67a96d1ce21e9dcd2a80ac5564a" translate="yes" xml:space="preserve">
          <source>Second item to compare.</source>
          <target state="translated">비교할 두 번째 항목입니다.</target>
        </trans-unit>
        <trans-unit id="f586a64b1d3b5d9a3b47f03ad11ea20e586672d3" translate="yes" xml:space="preserve">
          <source>Second of the minute [0 - 60).</source>
          <target state="translated">분의 초 [0-60).</target>
        </trans-unit>
        <trans-unit id="fe1f701c6b405860b6f7ed99a47d792a19b3cedf" translate="yes" xml:space="preserve">
          <source>Seconds from midnight, January 1st, 1970 in UTC.</source>
          <target state="translated">1970 년 1 월 1 일 자정부터 UTC까지의 초입니다.</target>
        </trans-unit>
        <trans-unit id="05c6552589f2957076213d53542c5cdb3a02f4aa" translate="yes" xml:space="preserve">
          <source>Seconds past the current minute.</source>
          <target state="translated">현재 분을 초로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="99ba5a2231f8aafc56b315f631420d5225ea6f90" translate="yes" xml:space="preserve">
          <source>Seconds past the minute.</source>
          <target state="translated">분 초.</target>
        </trans-unit>
        <trans-unit id="f2c6b564bd8119e16a3e573a6f9e7c6d1ac7820f" translate="yes" xml:space="preserve">
          <source>Section</source>
          <target state="translated">Section</target>
        </trans-unit>
        <trans-unit id="15b04a3f72bbdbc8b42c3ac02343c26f2ef292f6" translate="yes" xml:space="preserve">
          <source>Section names starting with 'http://' or 'https://' are not recognized as section names.</source>
          <target state="translated">'http : //'또는 'https : //'로 시작하는 섹션 이름은 섹션 이름으로 인식되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7ff5a6dafd806f6d95302657c480d07703b64604" translate="yes" xml:space="preserve">
          <source>Sections</source>
          <target state="translated">Sections</target>
        </trans-unit>
        <trans-unit id="da2860612425cb47d412d63bf2c0cebeeaefae10" translate="yes" xml:space="preserve">
          <source>Sections - each documentation comment is divided up into a sequence of sections.</source>
          <target state="translated">섹션-각 문서 주석은 일련의 섹션으로 나뉩니다.</target>
        </trans-unit>
        <trans-unit id="c545787818a72c6d5ce007559a5e3149a9e514f8" translate="yes" xml:space="preserve">
          <source>Secure Hash Signature Standard (SHS) (FIPS PUB 180-2)</source>
          <target state="translated">보안 해시 서명 표준 (SHS) (FIPS PUB 180-2)</target>
        </trans-unit>
        <trans-unit id="af266f84929c03de0e05203de3b2d71c6cb59fe7" translate="yes" xml:space="preserve">
          <source>Securely compares two digest representations while protecting against timing attacks. Do not use &lt;code&gt;==&lt;/code&gt; to compare digest representations.</source>
          <target state="translated">타이밍 공격으로부터 보호하면서 2 개의 다이제스트 표현을 안전하게 비교합니다. 다이제스트 표현을 비교 하기 위해 &lt;code&gt;==&lt;/code&gt; 를 사용하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="2931d5d3232f2248933a3926c6bcfde0392f4223" translate="yes" xml:space="preserve">
          <source>Security considerations</source>
          <target state="translated">보안 고려 사항</target>
        </trans-unit>
        <trans-unit id="ce3df4d818316dd10c7bca5ae8539c894dc07dbb" translate="yes" xml:space="preserve">
          <source>See</source>
          <target state="translated">See</target>
        </trans-unit>
        <trans-unit id="a9c497a4daa0646e69f125d8bf30206df914d1e8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Base64Impl&quot;&gt;&lt;code&gt;Base64Impl&lt;/code&gt;&lt;/a&gt; for a description of available methods.</source>
          <target state="translated">사용 가능한 방법에 대한 설명은 &lt;a href=&quot;#Base64Impl&quot;&gt; &lt;code&gt;Base64Impl&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b2b36bac617e3ef9c16d20e91dac6a3645ccd73c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#FormatSpec&quot;&gt;&lt;code&gt;FormatSpec&lt;/code&gt;&lt;/a&gt; for an example, how to use &lt;code&gt;writeUpToNextSpec&lt;/code&gt;.</source>
          <target state="translated">참조 &lt;a href=&quot;#FormatSpec&quot;&gt; &lt;code&gt;FormatSpec&lt;/code&gt; 를&lt;/a&gt; 예를 들어, 사용하는 방법 &lt;code&gt;writeUpToNextSpec&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="b3ff2ba441e1e884d06b5826c3de15889410a086" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#MatcherConcept&quot;&gt;&lt;code&gt;MatcherConcept&lt;/code&gt;&lt;/a&gt; for API outline.</source>
          <target state="translated">API 개요는 &lt;a href=&quot;#MatcherConcept&quot;&gt; &lt;code&gt;MatcherConcept&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bd0537aaaa43f315e782023eaca639a88ef05803" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Unicode%20properties&quot;&gt;table of properties&lt;/a&gt; for available sets.</source>
          <target state="translated">사용 가능한 세트에 대해서는 &lt;a href=&quot;#Unicode%20properties&quot;&gt;특성 테이블을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="afb94a061cbb4efc100483cf8c401b22b3e7f513" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#array-ops&quot;&gt;Array Indexing and Slicing Operators Overloading&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;#array-ops&quot;&gt;어레이 인덱싱 및 슬라이싱 연산자 오버로드&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
