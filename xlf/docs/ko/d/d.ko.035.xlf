<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="d">
    <body>
      <group id="d">
        <trans-unit id="f010ec40a0c80f5b81cf3f8f388aefdb8aaf3541" translate="yes" xml:space="preserve">
          <source>final Type &lt;strong id=&quot;merge2&quot;&gt;merge2&lt;/strong&gt;();</source>
          <target state="translated">최종 유형 &lt;strong id=&quot;merge2&quot;&gt;merge2&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="95067da3c5834afed1d660ad4f09386ab725b501" translate="yes" xml:space="preserve">
          <source>final Type &lt;strong id=&quot;mutableOf&quot;&gt;mutableOf&lt;/strong&gt;();</source>
          <target state="translated">최종 유형 &lt;strong id=&quot;mutableOf&quot;&gt;mutableOf&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="c7cc45aaf22b0ffc22d06ced6b062bc12148c88b" translate="yes" xml:space="preserve">
          <source>final Type &lt;strong id=&quot;nextOf&quot;&gt;nextOf&lt;/strong&gt;();</source>
          <target state="translated">최종 유형 &lt;strong id=&quot;nextOf&quot;&gt;nextOf&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="90c23c40706502586a004978bac4db2604e4bc48" translate="yes" xml:space="preserve">
          <source>final Type &lt;strong id=&quot;unSharedOf&quot;&gt;unSharedOf&lt;/strong&gt;();</source>
          <target state="translated">최종 유형 &lt;strong id=&quot;unSharedOf&quot;&gt;unSharedOf&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="9a5afb58b1e465b6c90b6d72fcc216622dc8bb80" translate="yes" xml:space="preserve">
          <source>final Type &lt;strong id=&quot;wildOf&quot;&gt;wildOf&lt;/strong&gt;();</source>
          <target state="translated">최종 유형 &lt;strong id=&quot;wildOf&quot;&gt;wildOf&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="5cc76c0581c144afe9d8345c6116f4547543a066" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;canInferAttributes&quot;&gt;canInferAttributes&lt;/strong&gt;(Scope* sc);</source>
          <target state="translated">최종 bool &lt;strong id=&quot;canInferAttributes&quot;&gt;canInferAttributes&lt;/strong&gt; (Scope * sc);</target>
        </trans-unit>
        <trans-unit id="a3e061206dffd817d7ddf71edcc03b2d0c495891" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;canTakeAddressOf&quot;&gt;canTakeAddressOf&lt;/strong&gt;();</source>
          <target state="translated">최종 bool &lt;strong id=&quot;canTakeAddressOf&quot;&gt;canTakeAddressOf&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="481dc681991dc7cf9adb2aad15b1b6259f4edac7" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;checkClosure&quot;&gt;checkClosure&lt;/strong&gt;();</source>
          <target state="translated">최종 부울 &lt;strong id=&quot;checkClosure&quot;&gt;체크 클로저&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="62493fd7df2099b64459a43759f2606fcd100c67" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;checkComplexTransition&quot;&gt;checkComplexTransition&lt;/strong&gt;(ref const Loc loc, Scope* sc);</source>
          <target state="translated">최종 bool &lt;strong id=&quot;checkComplexTransition&quot;&gt;checkComplexTransition&lt;/strong&gt; (참조 const Loc loc, Scope * sc);</target>
        </trans-unit>
        <trans-unit id="7a93717b798a9388c9fb4488d455340662901dfd" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;checkDisabled&quot;&gt;checkDisabled&lt;/strong&gt;(Loc loc, Scope* sc, bool isAliasedDeclaration = false);</source>
          <target state="translated">최종 bool &lt;strong id=&quot;checkDisabled&quot;&gt;checkDisabled&lt;/strong&gt; (Loc loc, Scope * sc, bool isAliasedDeclaration = false);</target>
        </trans-unit>
        <trans-unit id="01b18d7318ed9eefdb4b5f67de7e3daee083e22e" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;checkForwardRef&quot;&gt;checkForwardRef&lt;/strong&gt;(ref const Loc loc);</source>
          <target state="translated">최종 bool &lt;strong id=&quot;checkForwardRef&quot;&gt;checkForwardRef&lt;/strong&gt; (ref const Loc loc 참조);</target>
        </trans-unit>
        <trans-unit id="68aacc469f8d11f7ae545d89ebed5d887b562bd4" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;checkNestedReference&quot;&gt;checkNestedReference&lt;/strong&gt;(Scope* sc, Loc loc);</source>
          <target state="translated">최종 bool &lt;strong id=&quot;checkNestedReference&quot;&gt;checkNestedReference&lt;/strong&gt; (Scope * sc, Loc loc);</target>
        </trans-unit>
        <trans-unit id="d89e582160945d49a7cba1c0208d31fb4f027f73" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;checkNestedReference&quot;&gt;checkNestedReference&lt;/strong&gt;(Scope* sc, ref const Loc loc);</source>
          <target state="translated">최종 bool &lt;strong id=&quot;checkNestedReference&quot;&gt;checkNestedReference&lt;/strong&gt; (Scope * sc, ref const Loc loc);</target>
        </trans-unit>
        <trans-unit id="f81b9354aa05bb6ee7c0147b2f4bfbd46e278007" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;checkNogc&quot;&gt;checkNogc&lt;/strong&gt;(Scope* sc, FuncDeclaration f);</source>
          <target state="translated">최종 bool &lt;strong id=&quot;checkNogc&quot;&gt;checkNogc&lt;/strong&gt; (Scope * sc, FuncDeclaration f);</target>
        </trans-unit>
        <trans-unit id="31d332f9ee56d9770969ed622d3a99e5feca24ea" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;checkOverlappedFields&quot;&gt;checkOverlappedFields&lt;/strong&gt;();</source>
          <target state="translated">최종 bool &lt;strong id=&quot;checkOverlappedFields&quot;&gt;checkOverlappedFields&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="9cff06aaa578f8feb27ec0ba4908b6dc3b74fa89" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;checkPostblit&quot;&gt;checkPostblit&lt;/strong&gt;(Scope* sc, Type t);</source>
          <target state="translated">최종 bool &lt;strong id=&quot;checkPostblit&quot;&gt;checkPostblit&lt;/strong&gt; (Scope * sc, 유형 t);</target>
        </trans-unit>
        <trans-unit id="32c337b502db45dd0d41296f59211367053067bc" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;checkPurity&quot;&gt;checkPurity&lt;/strong&gt;(Scope* sc, FuncDeclaration f);</source>
          <target state="translated">최종 bool &lt;strong id=&quot;checkPurity&quot;&gt;checkPurity&lt;/strong&gt; (Scope * sc, FuncDeclaration f);</target>
        </trans-unit>
        <trans-unit id="bc71c7aee3c55ea8c9059b62ee02a051e591e784" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;checkPurity&quot;&gt;checkPurity&lt;/strong&gt;(Scope* sc, VarDeclaration v);</source>
          <target state="translated">최종 bool &lt;strong id=&quot;checkPurity&quot;&gt;checkPurity&lt;/strong&gt; (Scope * sc, VarDeclaration v);</target>
        </trans-unit>
        <trans-unit id="59f6ec531c3790847a2005dbbf7fa60f0d0ce222" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;checkReadModifyWrite&quot;&gt;checkReadModifyWrite&lt;/strong&gt;(TOK rmwOp, Expression ex = null);</source>
          <target state="translated">최종 bool &lt;strong id=&quot;checkReadModifyWrite&quot;&gt;checkReadModifyWrite&lt;/strong&gt; (TOK rmwOp, 식 ex = null);</target>
        </trans-unit>
        <trans-unit id="0df14a1d634c1f34b3ca78efed7ef876110b45df" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;checkSafety&quot;&gt;checkSafety&lt;/strong&gt;(Scope* sc, FuncDeclaration f);</source>
          <target state="translated">최종 bool &lt;strong id=&quot;checkSafety&quot;&gt;checkSafety&lt;/strong&gt; (Scope * sc, FuncDeclaration f);</target>
        </trans-unit>
        <trans-unit id="ba40010dee7ab373f1de71e498b180a3c5eed9fc" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;comeFrom&quot;&gt;comeFrom&lt;/strong&gt;();</source>
          <target state="translated">마지막 bool &lt;strong id=&quot;comeFrom&quot;&gt;comeFrom&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="2e5cd7e4a9c19fa716fc20eb685f4b03e8e0f3fa" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;determineFields&quot;&gt;determineFields&lt;/strong&gt;();</source>
          <target state="translated">최종 부울 &lt;strong id=&quot;determineFields&quot;&gt;결정 필드&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="6c6fab368b5e77d86d963fe8516f8b346dbd659b" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;determineSize&quot;&gt;determineSize&lt;/strong&gt;(Loc loc);</source>
          <target state="translated">최종 부울 &lt;strong id=&quot;determineSize&quot;&gt;결정 크기&lt;/strong&gt; (Loc loc);</target>
        </trans-unit>
        <trans-unit id="29d04f9c8cda5c938f0024f47d62313536c4b82e" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;equalsx&quot;&gt;equalsx&lt;/strong&gt;(TemplateInstance ti);</source>
          <target state="translated">최종 bool &lt;strong id=&quot;equalsx&quot;&gt;equalsx&lt;/strong&gt; (TemplateInstance ti);</target>
        </trans-unit>
        <trans-unit id="dc02d711f207c549c77bde9e47f218092f64e8be" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;fill&quot;&gt;fill&lt;/strong&gt;(Loc loc, Expressions* elements, bool ctorinit);</source>
          <target state="translated">최종 부울 &lt;strong id=&quot;fill&quot;&gt;채우기&lt;/strong&gt; (Loc loc, Expressions * 요소, 부울 ctorinit);</target>
        </trans-unit>
        <trans-unit id="97c7e95fe2bfa4091384931686da0ffbcc078065" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;findTempDecl&quot;&gt;findTempDecl&lt;/strong&gt;(Scope* sc, WithScopeSymbol* pwithsym);</source>
          <target state="translated">최종 bool &lt;strong id=&quot;findTempDecl&quot;&gt;findTempDecl&lt;/strong&gt; (Scope * sc, WithScopeSymbol * pwithsym);</target>
        </trans-unit>
        <trans-unit id="741db69dab9c751bf6f8a20cd7f28c65f48fe56b" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;fit&quot;&gt;fit&lt;/strong&gt;(ref const Loc loc, Scope* sc, Expressions* elements, Type stype);</source>
          <target state="translated">최종 bool &lt;strong id=&quot;fit&quot;&gt;fit&lt;/strong&gt; (참조 const Loc loc, Scope * sc, Expressions * 요소, 유형 stype);</target>
        </trans-unit>
        <trans-unit id="2339eeccc8b90a997b2e5a3fbb01b63dc2fea6f7" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;functionSemantic&quot;&gt;functionSemantic&lt;/strong&gt;();</source>
          <target state="translated">최종 부울 &lt;strong id=&quot;functionSemantic&quot;&gt;함수 의미&lt;/strong&gt; 론적 ();</target>
        </trans-unit>
        <trans-unit id="ade74d8988e95549807e17fede426470175b0111" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;functionSemantic3&quot;&gt;functionSemantic3&lt;/strong&gt;();</source>
          <target state="translated">최종 부울 &lt;strong id=&quot;functionSemantic3&quot;&gt;함수&lt;/strong&gt; 시맨틱 3 ();</target>
        </trans-unit>
        <trans-unit id="7790b09f0ab895ccd25deb5430220ccd6b58808e" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;hasCode&quot;&gt;hasCode&lt;/strong&gt;();</source>
          <target state="translated">마지막 bool &lt;strong id=&quot;hasCode&quot;&gt;hasCode&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="dd330a64acf1bacaed9cb94efc8cc7aea2f42970" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;hasMonitor&quot;&gt;hasMonitor&lt;/strong&gt;();</source>
          <target state="translated">최종 부울 &lt;strong id=&quot;hasMonitor&quot;&gt;hasMonitor&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="b6e4990a82c7140551568282b18ef2d8860be9fa" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;hasNestedArgs&quot;&gt;hasNestedArgs&lt;/strong&gt;(Objects* args, bool isstatic);</source>
          <target state="translated">최종 bool &lt;strong id=&quot;hasNestedArgs&quot;&gt;hasNestedArgs&lt;/strong&gt; (Objects * args, bool isstatic);</target>
        </trans-unit>
        <trans-unit id="7bc1e93a3834d96ba46f4f42b5bafbe1302525e9" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;hasNestedFrameRefs&quot;&gt;hasNestedFrameRefs&lt;/strong&gt;();</source>
          <target state="translated">마지막 bool &lt;strong id=&quot;hasNestedFrameRefs&quot;&gt;hasNestedFrameRefs&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="81c6c62f9b8afb83d81e20ea24c5077f56109870" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;inNonRoot&quot;&gt;inNonRoot&lt;/strong&gt;();</source>
          <target state="translated">마지막 부울 &lt;strong id=&quot;inNonRoot&quot;&gt;inNonRoot&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="c426c14d4e9c0b3998dedf4194c007b54115700c" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;inUnittest&quot;&gt;inUnittest&lt;/strong&gt;();</source>
          <target state="translated">최종 부울 &lt;strong id=&quot;inUnittest&quot;&gt;inUnittest&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="902808a513fa14e2b6a6bb7737758290003b8d20" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;isAbstract&quot;&gt;isAbstract&lt;/strong&gt;();</source>
          <target state="translated">최종 부울 &lt;strong id=&quot;isAbstract&quot;&gt;isAbstract&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="0ebee1ab8043729289b919f076c51511e0259bd1" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;isBaseOf2&quot;&gt;isBaseOf2&lt;/strong&gt;(ClassDeclaration cd);</source>
          <target state="translated">최종 부울 &lt;strong id=&quot;isBaseOf2&quot;&gt;isBaseOf2&lt;/strong&gt; (ClassDeclaration cd);</target>
        </trans-unit>
        <trans-unit id="05f35d99c833f4acc49cc24c28221df71738c4ff" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;isCTFE&quot;&gt;isCTFE&lt;/strong&gt;();</source>
          <target state="translated">최종 부울 &lt;strong id=&quot;isCTFE&quot;&gt;isCTFE&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="a6f0bdd22e14c80c8754525b888a86a064df0d63" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;isDataseg&quot;&gt;isDataseg&lt;/strong&gt;();</source>
          <target state="translated">최종 부울 &lt;strong id=&quot;isDataseg&quot;&gt;isDataseg&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="15ec4f59aefec96196467afeeffd59161833f8e4" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;isPOD&quot;&gt;isPOD&lt;/strong&gt;();</source>
          <target state="translated">최종 bool &lt;strong id=&quot;isPOD&quot;&gt;isPOD&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="fad3a0bfc11457298229e79244c72c62efe654d6" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;isReturnIsolated&quot;&gt;isReturnIsolated&lt;/strong&gt;();</source>
          <target state="translated">최종 부울 &lt;strong id=&quot;isReturnIsolated&quot;&gt;isReturnIsolated&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="347dcb15912cb79db531489eba4390ec13d3085e" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;isThreadlocal&quot;&gt;isThreadlocal&lt;/strong&gt;();</source>
          <target state="translated">최종 부울 &lt;strong id=&quot;isThreadlocal&quot;&gt;isThreadlocal&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="cf5f5635e8748efcb3cb90a9e9d76e3740e2e3cf" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;isTypeIsolated&quot;&gt;isTypeIsolated&lt;/strong&gt;(Type t);</source>
          <target state="translated">최종 부울 &lt;strong id=&quot;isTypeIsolated&quot;&gt;isTypeIsolated&lt;/strong&gt; (Type t);</target>
        </trans-unit>
        <trans-unit id="abdd7e1fff6eb6f79873540472fb4b284b8df22b" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;isUnique&quot;&gt;isUnique&lt;/strong&gt;();</source>
          <target state="translated">최종 bool &lt;strong id=&quot;isUnique&quot;&gt;isUnique&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="ef95eda0a40e0b44e8b318c4b2eedb7227cc95fa" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;needsClosure&quot;&gt;needsClosure&lt;/strong&gt;();</source>
          <target state="translated">최종 bool &lt;strong id=&quot;needsClosure&quot;&gt;요구 클로저&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="ba4e6cf81ea0205ddc580dd832d8f638a16725aa" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;needsCodegen&quot;&gt;needsCodegen&lt;/strong&gt;();</source>
          <target state="translated">최종 bool 필요 &lt;strong id=&quot;needsCodegen&quot;&gt;Codegen&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="ceb88ce41587fd7c11000fd3d1d8abd3479d5278" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;needsScopeDtor&quot;&gt;needsScopeDtor&lt;/strong&gt;();</source>
          <target state="translated">최종 bool &lt;strong id=&quot;needsScopeDtor&quot;&gt;needsScopeDtor&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="b7f884335adf00cda20f1d1bff4c25d2cf4eb90f" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;needsTypeInference&quot;&gt;needsTypeInference&lt;/strong&gt;(Scope* sc, int flag = 0);</source>
          <target state="translated">최종 bool &lt;strong id=&quot;needsTypeInference&quot;&gt;needsTypeInference&lt;/strong&gt; (Scope * sc, int 플래그 = 0);</target>
        </trans-unit>
        <trans-unit id="8fdc6c5239ed57e020e205a6b7c2101f231d3364" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;semanticTiargs&quot;&gt;semanticTiargs&lt;/strong&gt;(Scope* sc);</source>
          <target state="translated">최종 bool &lt;strong id=&quot;semanticTiargs&quot;&gt;시맨틱 Tiargs&lt;/strong&gt; (Scope * sc);</target>
        </trans-unit>
        <trans-unit id="a7df5839431fa5284a4c0aed430b59b2c0a215dd" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;setGC&quot;&gt;setGC&lt;/strong&gt;();</source>
          <target state="translated">최종 부울 &lt;strong id=&quot;setGC&quot;&gt;세트 GC&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="cfe7a45dc77170d693a2e626d52a11d429479df2" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;setImpure&quot;&gt;setImpure&lt;/strong&gt;();</source>
          <target state="translated">최종 부울 &lt;strong id=&quot;setImpure&quot;&gt;setImpure&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="ceabf6657f9b001a8c63341b489808e33b51cdfb" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;setUnsafe&quot;&gt;setUnsafe&lt;/strong&gt;();</source>
          <target state="translated">마지막 부울 &lt;strong id=&quot;setUnsafe&quot;&gt;setUnsafe&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="3e2941a53204413dafc91362913c6b9c4eab1582" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;updateTempDecl&quot;&gt;updateTempDecl&lt;/strong&gt;(Scope* sc, Dsymbol s);</source>
          <target state="translated">최종 bool &lt;strong id=&quot;updateTempDecl&quot;&gt;updateTempDecl&lt;/strong&gt; (Scope * sc, Dsymbol s);</target>
        </trans-unit>
        <trans-unit id="34b6938e21b61006f97dff132dd72f3c36cbe671" translate="yes" xml:space="preserve">
          <source>final bool &lt;strong id=&quot;usesEH&quot;&gt;usesEH&lt;/strong&gt;();</source>
          <target state="translated">최종 부울은 &lt;strong id=&quot;usesEH&quot;&gt;EH&lt;/strong&gt; ()를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ad90945e90df63bc4d54deca075ec17483ea0466" translate="yes" xml:space="preserve">
          <source>final char* &lt;strong id=&quot;toPrettyChars&quot;&gt;toPrettyChars&lt;/strong&gt;(bool QualifyTypes = false);</source>
          <target state="translated">최종 문자 * &lt;strong id=&quot;toPrettyChars&quot;&gt;toPrettyChars&lt;/strong&gt; (bool QualifyTypes = false);</target>
        </trans-unit>
        <trans-unit id="0eb8089fca72ceda0a29ddea26ee11cfbe04b258" translate="yes" xml:space="preserve">
          <source>final const bool &lt;strong id=&quot;isAncestorPackageOf&quot;&gt;isAncestorPackageOf&lt;/strong&gt;(const Package pkg);</source>
          <target state="translated">최종 const bool &lt;strong id=&quot;isAncestorPackageOf&quot;&gt;isAncestorPackageOf&lt;/strong&gt; (const 패키지 pkg);</target>
        </trans-unit>
        <trans-unit id="51dab273b9212d7e9f9184b93846c26356255031" translate="yes" xml:space="preserve">
          <source>final const bool &lt;strong id=&quot;isBaseInfoComplete&quot;&gt;isBaseInfoComplete&lt;/strong&gt;();</source>
          <target state="translated">마지막 const bool &lt;strong id=&quot;isBaseInfoComplete&quot;&gt;isBaseInfoComplete&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="990f384eb23f29ca0cc30e05d6669910af316b0a" translate="yes" xml:space="preserve">
          <source>final const bool &lt;strong id=&quot;isCOMclass&quot;&gt;isCOMclass&lt;/strong&gt;();</source>
          <target state="translated">마지막 const bool &lt;strong id=&quot;isCOMclass&quot;&gt;isCOMclass&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="d71a00b5f0b682e16452651c5ba705f90d27e1de" translate="yes" xml:space="preserve">
          <source>final const bool &lt;strong id=&quot;isNested&quot;&gt;isNested&lt;/strong&gt;();</source>
          <target state="translated">최종 const bool &lt;strong id=&quot;isNested&quot;&gt;isNested&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="cfedd379176fe5051f5a546585d359b2209c856a" translate="yes" xml:space="preserve">
          <source>final const nothrow Type &lt;strong id=&quot;nullAttributes&quot;&gt;nullAttributes&lt;/strong&gt;();</source>
          <target state="translated">마지막 const nothrow 유형 &lt;strong id=&quot;nullAttributes&quot;&gt;nullAttributes&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="4a1ab15b03f7d947b701a43b275790e124c7c961" translate="yes" xml:space="preserve">
          <source>final const nothrow char* &lt;strong id=&quot;modToChars&quot;&gt;modToChars&lt;/strong&gt;();</source>
          <target state="translated">마지막 const nothrow char * &lt;strong id=&quot;modToChars&quot;&gt;modToChars&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="4046d03c5623311a0c175afa0ce09bee136bbe6c" translate="yes" xml:space="preserve">
          <source>final const nothrow void &lt;strong id=&quot;modToBuffer&quot;&gt;modToBuffer&lt;/strong&gt;(OutBuffer* buf);</source>
          <target state="translated">최종 const nothrow void &lt;strong id=&quot;modToBuffer&quot;&gt;modToBuffer&lt;/strong&gt; (OutBuffer * buf);</target>
        </trans-unit>
        <trans-unit id="2c5f56e9bfdabe78ff28572d017ac7f6923026a9" translate="yes" xml:space="preserve">
          <source>final const pure @nogc @property @safe LogLevel &lt;strong id=&quot;logLevel&quot;&gt;logLevel&lt;/strong&gt;();</source>
          <target state="translated">마지막 const 순수 @nogc @property @safe LogLevel &lt;strong id=&quot;logLevel&quot;&gt;logLevel&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="fdc51a0273271f498b209948ccaf0b7f53dba562" translate="yes" xml:space="preserve">
          <source>final const pure bool &lt;strong id=&quot;enclosesLifetimeOf&quot;&gt;enclosesLifetimeOf&lt;/strong&gt;(VarDeclaration v);</source>
          <target state="translated">최종 const 순수 부울 &lt;strong id=&quot;enclosesLifetimeOf&quot;&gt;은&lt;/strong&gt; LifetimeOf (VarDeclaration v)를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="50cb55742e603bd604a8c2840acf8686500ad9a5" translate="yes" xml:space="preserve">
          <source>final const pure nothrow @nogc @property @safe State &lt;strong id=&quot;state&quot;&gt;state&lt;/strong&gt;();</source>
          <target state="translated">마지막 const 순수 nothrow @nogc @property @safe &lt;strong id=&quot;state&quot;&gt;상태&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="a4153918347ac3cf6c4bf031b08108904b37febf" translate="yes" xml:space="preserve">
          <source>final const pure nothrow @nogc @trusted bool &lt;strong id=&quot;isBaseOf&quot;&gt;isBaseOf&lt;/strong&gt;(scope const TypeInfo_Class child);</source>
          <target state="translated">최종 const 순수 nothrow @nogc @trusted bool &lt;strong id=&quot;isBaseOf&quot;&gt;isBaseOf&lt;/strong&gt; (범위 const TypeInfo_Class 자식);</target>
        </trans-unit>
        <trans-unit id="5bdd0b660ae0dfc7d54aa3153dbbfa004781548b" translate="yes" xml:space="preserve">
          <source>final const(char)* &lt;strong id=&quot;toChars&quot;&gt;toChars&lt;/strong&gt;();</source>
          <target state="translated">마지막 const (char) * &lt;strong id=&quot;toChars&quot;&gt;toChars&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="6ab0a9df19ff7539db7e7a14326678c98f3af6c8" translate="yes" xml:space="preserve">
          <source>final const(char)* &lt;strong id=&quot;toFullSignature&quot;&gt;toFullSignature&lt;/strong&gt;();</source>
          <target state="translated">마지막 const (char) * &lt;strong id=&quot;toFullSignature&quot;&gt;toFullSignature&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="8bc9819161d4b3f23d7edd60df59acc31e1e4dd4" translate="yes" xml:space="preserve">
          <source>final inout inout(AggregateDeclaration) &lt;strong id=&quot;isMember&quot;&gt;isMember&lt;/strong&gt;();</source>
          <target state="translated">최종 인아웃 인아웃 (AggregateDeclaration) &lt;strong id=&quot;isMember&quot;&gt;isMember&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="89f924df914ac9a42ed7472000e49bef4434ca87" translate="yes" xml:space="preserve">
          <source>final inout inout(AggregateDeclaration) &lt;strong id=&quot;isMember2&quot;&gt;isMember2&lt;/strong&gt;();</source>
          <target state="translated">최종 인아웃 인아웃 (AggregateDeclaration) &lt;strong id=&quot;isMember2&quot;&gt;isMember2&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="59c13c977b8933a5d31c07f4cc33d9c5a26f6e28" translate="yes" xml:space="preserve">
          <source>final inout inout(AggregateDeclaration) &lt;strong id=&quot;isMemberDecl&quot;&gt;isMemberDecl&lt;/strong&gt;();</source>
          <target state="translated">최종 인아웃 인아웃 (AggregateDeclaration) &lt;strong id=&quot;isMemberDecl&quot;&gt;isMemberDecl&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="8923039ca68530f53d935aca4633e0d90a82a0a3" translate="yes" xml:space="preserve">
          <source>final inout inout(AggregateDeclaration) &lt;strong id=&quot;isMemberLocal&quot;&gt;isMemberLocal&lt;/strong&gt;();</source>
          <target state="translated">최종 인아웃 인아웃 (AggregateDeclaration) &lt;strong id=&quot;isMemberLocal&quot;&gt;isMemberLocal&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="a1e6df36977dec7e3770f28a6f641f3b7c080deb" translate="yes" xml:space="preserve">
          <source>final inout inout(Dsymbol) &lt;strong id=&quot;pastMixin&quot;&gt;pastMixin&lt;/strong&gt;();</source>
          <target state="translated">최종 입출력 (Dsymbol) &lt;strong id=&quot;pastMixin&quot;&gt;pastMixin&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="704d48bffc0a81a056d63c9a620578102715e634" translate="yes" xml:space="preserve">
          <source>final inout inout(Dsymbol) &lt;strong id=&quot;toParent&quot;&gt;toParent&lt;/strong&gt;();</source>
          <target state="translated">최종 입출력 (Dsymbol) &lt;strong id=&quot;toParent&quot;&gt;toParent&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="c0cd9c0036cde3824b01ceac72ed5e2fa4924146" translate="yes" xml:space="preserve">
          <source>final inout inout(Dsymbol) &lt;strong id=&quot;toParent2&quot;&gt;toParent2&lt;/strong&gt;();</source>
          <target state="translated">최종 입출력 (Dsymbol) &lt;strong id=&quot;toParent2&quot;&gt;toParent2&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="f42c32c3cbafeef01556edfb17b80e930c43c728" translate="yes" xml:space="preserve">
          <source>final inout inout(Dsymbol) &lt;strong id=&quot;toParentDecl&quot;&gt;toParentDecl&lt;/strong&gt;();</source>
          <target state="translated">최종 입출력 (Dsymbol) &lt;strong id=&quot;toParentDecl&quot;&gt;toParentDecl&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="e49a4e639c46a627154807709e289519c363fc6c" translate="yes" xml:space="preserve">
          <source>final inout inout(Dsymbol) &lt;strong id=&quot;toParentLocal&quot;&gt;toParentLocal&lt;/strong&gt;();</source>
          <target state="translated">최종 입출력 (Dsymbol) &lt;strong id=&quot;toParentLocal&quot;&gt;toParentLocal&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="53780e75ca510b71a2b09898c584b3f63d7af7bb" translate="yes" xml:space="preserve">
          <source>final inout pure nothrow @nogc inout(ErrorStatement) &lt;strong id=&quot;isErrorStatement&quot;&gt;isErrorStatement&lt;/strong&gt;();</source>
          <target state="translated">최종 입력 순수 nothrow @nogc inout (ErrorStatement) &lt;strong id=&quot;isErrorStatement&quot;&gt;isErrorStatement&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="8e26fee9ee387c73ba269979721345ddf2908dd7" translate="yes" xml:space="preserve">
          <source>final int &lt;strong id=&quot;covariant&quot;&gt;covariant&lt;/strong&gt;(Type t, StorageClass* pstc = null, bool fix17349 = true);</source>
          <target state="translated">최종 int &lt;strong id=&quot;covariant&quot;&gt;공변량&lt;/strong&gt; (Type t, StorageClass * pstc = null, bool fix17349 = true);</target>
        </trans-unit>
        <trans-unit id="8d6d4e39bfd9d013d0653315a8f1c41dd1806390" translate="yes" xml:space="preserve">
          <source>final int &lt;strong id=&quot;findVtblIndex&quot;&gt;findVtblIndex&lt;/strong&gt;(Dsymbols* vtbl, int dim, bool fix17349 = true);</source>
          <target state="translated">최종 int &lt;strong id=&quot;findVtblIndex&quot;&gt;findVtblIndex&lt;/strong&gt; (Dsymbols * vtbl, int dim, bool fix17349 = true);</target>
        </trans-unit>
        <trans-unit id="9665fd25523cea15243c7e65a4852893a2a293a5" translate="yes" xml:space="preserve">
          <source>final int &lt;strong id=&quot;getLevel&quot;&gt;getLevel&lt;/strong&gt;(FuncDeclaration fd, int intypeof);</source>
          <target state="translated">final int &lt;strong id=&quot;getLevel&quot;&gt;getLevel&lt;/strong&gt; (FuncDeclaration fd, int intypeof);</target>
        </trans-unit>
        <trans-unit id="06e50a085f85dcebaa3e8561b7f49a5b051ced46" translate="yes" xml:space="preserve">
          <source>final int &lt;strong id=&quot;getLevelAndCheck&quot;&gt;getLevelAndCheck&lt;/strong&gt;(ref const Loc loc, Scope* sc, FuncDeclaration fd);</source>
          <target state="translated">final int &lt;strong id=&quot;getLevelAndCheck&quot;&gt;getLevelAndCheck&lt;/strong&gt; (참조 const Loc loc, Scope * sc, FuncDeclaration fd);</target>
        </trans-unit>
        <trans-unit id="094dbccef96e17b855e867359d3773a8b1f17e52" translate="yes" xml:space="preserve">
          <source>final int &lt;strong id=&quot;opApply&quot;&gt;opApply&lt;/strong&gt;(scope int delegate(ref Thread) dg);</source>
          <target state="translated">final int &lt;strong id=&quot;opApply&quot;&gt;opApply&lt;/strong&gt; (scope int delegate (ref Thread) dg);</target>
        </trans-unit>
        <trans-unit id="e0ce38e8e3e42198b86c2bd6ba8a75c37d13ff83" translate="yes" xml:space="preserve">
          <source>final int &lt;strong id=&quot;overrides&quot;&gt;overrides&lt;/strong&gt;(FuncDeclaration fd);</source>
          <target state="translated">최종 int &lt;strong id=&quot;overrides&quot;&gt;재정의&lt;/strong&gt; (FuncDeclaration fd);</target>
        </trans-unit>
        <trans-unit id="9147c108bf7f87ccaf4d97f6b0122325bfed828b" translate="yes" xml:space="preserve">
          <source>final nothrow @nogc @property bool &lt;strong id=&quot;isMainThread&quot;&gt;isMainThread&lt;/strong&gt;();</source>
          <target state="translated">마지막 nothrow @nogc @property bool &lt;strong id=&quot;isMainThread&quot;&gt;isMainThread&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="d123f7519d90eb80d047c1632887ea18028e68de" translate="yes" xml:space="preserve">
          <source>final nothrow @nogc @property bool &lt;strong id=&quot;isRunning&quot;&gt;isRunning&lt;/strong&gt;();</source>
          <target state="translated">마지막 nothrow @nogc @property bool &lt;strong id=&quot;isRunning&quot;&gt;isRunning&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="eab109f4d0215d47cd49196bffe79384341e2cc7" translate="yes" xml:space="preserve">
          <source>final nothrow @nogc @trusted bool &lt;strong id=&quot;tryLock_nothrow&quot;&gt;tryLock_nothrow&lt;/strong&gt;(this Q)()</source>
          <target state="translated">마지막 nothrow @nogc @trusted bool &lt;strong id=&quot;tryLock_nothrow&quot;&gt;tryLock_nothrow&lt;/strong&gt; (this Q) ()</target>
        </trans-unit>
        <trans-unit id="501541d9926d5c059972b4254e64d670f4c302cd" translate="yes" xml:space="preserve">
          <source>final nothrow @nogc @trusted void &lt;strong id=&quot;lock_nothrow&quot;&gt;lock_nothrow&lt;/strong&gt;(this Q)()</source>
          <target state="translated">마지막 nothrow @nogc @trusted void &lt;strong id=&quot;lock_nothrow&quot;&gt;lock_nothrow&lt;/strong&gt; (this Q) ()</target>
        </trans-unit>
        <trans-unit id="d4a11d7e87b208bcb54538e7581c0a3423711064" translate="yes" xml:space="preserve">
          <source>final nothrow @nogc @trusted void &lt;strong id=&quot;unlock_nothrow&quot;&gt;unlock_nothrow&lt;/strong&gt;(this Q)()</source>
          <target state="translated">마지막 nothrow @nogc @trusted void &lt;strong id=&quot;unlock_nothrow&quot;&gt;unlock_nothrow&lt;/strong&gt; (this Q) ()</target>
        </trans-unit>
        <trans-unit id="a4895232ab7bf855e250745c3bc5ddf98cfc958b" translate="yes" xml:space="preserve">
          <source>final nothrow @nogc void &lt;strong id=&quot;reset&quot;&gt;reset&lt;/strong&gt;();</source>
          <target state="translated">최종 노쓰 로우 @nogc void &lt;strong id=&quot;reset&quot;&gt;reset&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="27c1cd33394c1b736b1752be34f8e6afcc573194" translate="yes" xml:space="preserve">
          <source>final nothrow @nogc void &lt;strong id=&quot;reset&quot;&gt;reset&lt;/strong&gt;(void delegate() dg);</source>
          <target state="translated">최종 통지 @nogc void &lt;strong id=&quot;reset&quot;&gt;reset&lt;/strong&gt; (void delegate () dg);</target>
        </trans-unit>
        <trans-unit id="018962c7e43ac636faa3daccf1d385e8bb5efeb4" translate="yes" xml:space="preserve">
          <source>final nothrow @nogc void &lt;strong id=&quot;reset&quot;&gt;reset&lt;/strong&gt;(void function() fn);</source>
          <target state="translated">최종 노쓰 로우 @nogc void &lt;strong id=&quot;reset&quot;&gt;reset&lt;/strong&gt; (void function () fn);</target>
        </trans-unit>
        <trans-unit id="c62efb5bc40c3edb0c08eb6ec3cbe1db73a63f32" translate="yes" xml:space="preserve">
          <source>final nothrow @trusted ubyte[] &lt;strong id=&quot;digest&quot;&gt;digest&lt;/strong&gt;(scope const(void[])[] data...);</source>
          <target state="translated">마지막 nothrow @trusted ubyte [] &lt;strong id=&quot;digest&quot;&gt;다이제스트&lt;/strong&gt; (scope const (void []) [] data ...);</target>
        </trans-unit>
        <trans-unit id="67e66a99e2598cd74b28d1a1c54265a5f8beaee6" translate="yes" xml:space="preserve">
          <source>final nothrow TOK &lt;strong id=&quot;peekNext&quot;&gt;peekNext&lt;/strong&gt;();</source>
          <target state="translated">마지막 nothrow TOK &lt;strong id=&quot;peekNext&quot;&gt;peekNext&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="535fc8ee79b82af42604be91f9776546e9dc4483" translate="yes" xml:space="preserve">
          <source>final nothrow TOK &lt;strong id=&quot;peekNext2&quot;&gt;peekNext2&lt;/strong&gt;();</source>
          <target state="translated">최종 nothrow TOK &lt;strong id=&quot;peekNext2&quot;&gt;peekNext2&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="8feb8f322b45065ca712100a872785f6701aeea2" translate="yes" xml:space="preserve">
          <source>final nothrow Thread &lt;strong id=&quot;start&quot;&gt;start&lt;/strong&gt;();</source>
          <target state="translated">마지막 nothrow 스레드 &lt;strong id=&quot;start&quot;&gt;시작&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="ceed47221c33ccc941da0d599f4f16d0196447a6" translate="yes" xml:space="preserve">
          <source>final nothrow Token* &lt;strong id=&quot;peekPastParen&quot;&gt;peekPastParen&lt;/strong&gt;(Token* tk);</source>
          <target state="translated">최종 nothrow 토큰 * &lt;strong id=&quot;peekPastParen&quot;&gt;peekPastParen&lt;/strong&gt; (토큰 * tk);</target>
        </trans-unit>
        <trans-unit id="e7ef80518a1e273ba66f5b66109777f5c1d10735" translate="yes" xml:space="preserve">
          <source>final nothrow bool &lt;strong id=&quot;errors&quot;&gt;errors&lt;/strong&gt;();</source>
          <target state="translated">최종 nothrow 부울 &lt;strong id=&quot;errors&quot;&gt;오류&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="f2b589cd909a6c4aeca48f1152fa75dccc5af847" translate="yes" xml:space="preserve">
          <source>final nothrow void &lt;strong id=&quot;deprecation&quot;&gt;deprecation&lt;/strong&gt;(ref const Loc loc, const(char)* format, ...);</source>
          <target state="translated">최종 nothrow void &lt;strong id=&quot;deprecation&quot;&gt;deprecation&lt;/strong&gt; (ref const Loc loc, const (char) * format, ...);</target>
        </trans-unit>
        <trans-unit id="5934d992f30c9df1130baf7c1440b8a753388729" translate="yes" xml:space="preserve">
          <source>final nothrow void &lt;strong id=&quot;deprecationSupplemental&quot;&gt;deprecationSupplemental&lt;/strong&gt;(ref const Loc loc, const(char)* format, ...);</source>
          <target state="translated">final nothrow void &lt;strong id=&quot;deprecationSupplemental&quot;&gt;deprecationSupplemental&lt;/strong&gt; (ref const Loc loc, const (char) * format, ...);</target>
        </trans-unit>
        <trans-unit id="008c8e49287a3ea34c8e20ee453f7e1990f655d7" translate="yes" xml:space="preserve">
          <source>final nothrow void &lt;strong id=&quot;error&quot;&gt;error&lt;/strong&gt;(ref const Loc loc, const(char)* format, ...);</source>
          <target state="translated">최종 nothrow void &lt;strong id=&quot;error&quot;&gt;error&lt;/strong&gt; (ref const Loc loc, const (char) * format, ...);</target>
        </trans-unit>
        <trans-unit id="e9a842be494e30236109bc16db95c6674452e12e" translate="yes" xml:space="preserve">
          <source>final nothrow void &lt;strong id=&quot;errorSupplemental&quot;&gt;errorSupplemental&lt;/strong&gt;(ref const Loc loc, const(char)* format, ...);</source>
          <target state="translated">final nothrow void &lt;strong id=&quot;errorSupplemental&quot;&gt;errorSupplemental&lt;/strong&gt; (ref const Loc loc, const (char) * format, ...);</target>
        </trans-unit>
        <trans-unit id="6fbffdba7767bfd6a4bf88cfb0ac7f9e232f6ce4" translate="yes" xml:space="preserve">
          <source>final nothrow void &lt;strong id=&quot;scan&quot;&gt;scan&lt;/strong&gt;(Token* t);</source>
          <target state="translated">최종 nothrow void &lt;strong id=&quot;scan&quot;&gt;scan&lt;/strong&gt; (토큰 * t);</target>
        </trans-unit>
        <trans-unit id="cb05635fe2975c50ef79afa107bf05b029fca780" translate="yes" xml:space="preserve">
          <source>final nothrow void &lt;strong id=&quot;warning&quot;&gt;warning&lt;/strong&gt;(ref const Loc loc, const(char)* format, ...);</source>
          <target state="translated">최종 nothrow void &lt;strong id=&quot;warning&quot;&gt;경고&lt;/strong&gt; (ref const Loc loc, const (char) * format, ...);</target>
        </trans-unit>
        <trans-unit id="801adbf0e24265731dd09695fa68602040703f56" translate="yes" xml:space="preserve">
          <source>final nothrow void &lt;strong id=&quot;warningSupplemental&quot;&gt;warningSupplemental&lt;/strong&gt;(ref const Loc loc, const(char)* format, ...);</source>
          <target state="translated">final nothrow void &lt;strong id=&quot;warningSupplemental&quot;&gt;warningSupplemental&lt;/strong&gt; (ref const Loc loc, const (char) * format, ...);</target>
        </trans-unit>
        <trans-unit id="16561712cb9c53a9a40aa906a8bc9b9e6b68cf8d" translate="yes" xml:space="preserve">
          <source>final pure nothrow @nogc @property @safe uint &lt;strong id=&quot;errno&quot;&gt;errno&lt;/strong&gt;();</source>
          <target state="translated">최종 순수 nothrow @nogc @property @safe uint &lt;strong id=&quot;errno&quot;&gt;errno&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="bfd0ae41ff40b7b58f9217cc4aa50ff9937a8943" translate="yes" xml:space="preserve">
          <source>final pure nothrow @nogc ref scope @system uint &lt;strong id=&quot;refcount&quot;&gt;refcount&lt;/strong&gt;() return;</source>
          <target state="translated">최종 순수 nothrow @nogc 참조 범위 @system uint &lt;strong id=&quot;refcount&quot;&gt;refcount&lt;/strong&gt; () 반환;</target>
        </trans-unit>
        <trans-unit id="fc5ac1fce545b9b3bf7662a6e1bb9b3d206abd1e" translate="yes" xml:space="preserve">
          <source>final size_t &lt;strong id=&quot;nonHiddenFields&quot;&gt;nonHiddenFields&lt;/strong&gt;();</source>
          <target state="translated">최종 size_t &lt;strong id=&quot;nonHiddenFields&quot;&gt;nonHiddenFields&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="6a2c9edf351ba459f2d88bc857ede947c9360f1a" translate="yes" xml:space="preserve">
          <source>final this(ref const Loc loc, Statement[] sts...);</source>
          <target state="translated">최종 this (ref const Loc loc, Statement [] sts ...);</target>
        </trans-unit>
        <trans-unit id="bc9fe52eff0d5185369c1a28cceed4495c028d6e" translate="yes" xml:space="preserve">
          <source>final this(ref const Loc loc, Statements* statements);</source>
          <target state="translated">최종 this (ref const Loc loc, Statements * statement);</target>
        </trans-unit>
        <trans-unit id="64f8a8f52c356d243251323ce43957c6670f996c" translate="yes" xml:space="preserve">
          <source>final type of result (can be different from sd's type)</source>
          <target state="translated">최종 결과 유형 (sd 유형과 다를 수 있음)</target>
        </trans-unit>
        <trans-unit id="a28aa53209a595f87a7081165021a468fb9d3206" translate="yes" xml:space="preserve">
          <source>final uint &lt;strong id=&quot;numberOfElems&quot;&gt;numberOfElems&lt;/strong&gt;(ref const Loc loc);</source>
          <target state="translated">최종 uint &lt;strong id=&quot;numberOfElems&quot;&gt;numberOfElems&lt;/strong&gt; (const const Loc loc 참조);</target>
        </trans-unit>
        <trans-unit id="91772362a9a56fde85d8f9f9cf8c6ddeb090857b" translate="yes" xml:space="preserve">
          <source>final uinteger_t &lt;strong id=&quot;sizemask&quot;&gt;sizemask&lt;/strong&gt;();</source>
          <target state="translated">최종 uinteger_t의 &lt;strong id=&quot;sizemask&quot;&gt;sizemask&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="53b3fd5d41f4304ca9103e6b310901920d957928" translate="yes" xml:space="preserve">
          <source>final void &lt;strong id=&quot;add&quot;&gt;add&lt;/strong&gt;(Thread t);</source>
          <target state="translated">최종 보이드 &lt;strong id=&quot;add&quot;&gt;추가&lt;/strong&gt; (스레드 t);</target>
        </trans-unit>
        <trans-unit id="2408fb8ea7247c7f96870c3aafaf5865c041ca3c" translate="yes" xml:space="preserve">
          <source>final void &lt;strong id=&quot;addLocalClass&quot;&gt;addLocalClass&lt;/strong&gt;(ClassDeclarations* aclasses);</source>
          <target state="translated">final void &lt;strong id=&quot;addLocalClass&quot;&gt;addLocalClass&lt;/strong&gt; (ClassDeclarations * aclasses);</target>
        </trans-unit>
        <trans-unit id="c984d2baf43af282d6fd6557192afaf6ec979195" translate="yes" xml:space="preserve">
          <source>final void &lt;strong id=&quot;addMaybe&quot;&gt;addMaybe&lt;/strong&gt;(VarDeclaration v);</source>
          <target state="translated">최종 무효 &lt;strong id=&quot;addMaybe&quot;&gt;addMaybe&lt;/strong&gt; (VarDeclaration v);</target>
        </trans-unit>
        <trans-unit id="4c05e24a3c578bfd5463a5722faa655d91b7cf7c" translate="yes" xml:space="preserve">
          <source>final void &lt;strong id=&quot;buildEnsureRequire&quot;&gt;buildEnsureRequire&lt;/strong&gt;();</source>
          <target state="translated">최종 void &lt;strong id=&quot;buildEnsureRequire&quot;&gt;buildEnsureRequire&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="2a3921104954f64450c37ea7e2ad9f26f2e561a5" translate="yes" xml:space="preserve">
          <source>final void &lt;strong id=&quot;buildResultVar&quot;&gt;buildResultVar&lt;/strong&gt;(Scope* sc, Type tret);</source>
          <target state="translated">최종 void &lt;strong id=&quot;buildResultVar&quot;&gt;buildResultVar&lt;/strong&gt; (Scope * sc, 유형 tret);</target>
        </trans-unit>
        <trans-unit id="285047d7fcc8b8048f8257c5fe58ab8d6460c9aa" translate="yes" xml:space="preserve">
          <source>final void &lt;strong id=&quot;check&quot;&gt;check&lt;/strong&gt;();</source>
          <target state="translated">최종 무효 &lt;strong id=&quot;check&quot;&gt;점검&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="4944d42f3f463a65ccb7bb9e35359d7119e11eba" translate="yes" xml:space="preserve">
          <source>final void &lt;strong id=&quot;checkDmain&quot;&gt;checkDmain&lt;/strong&gt;();</source>
          <target state="translated">최종 void &lt;strong id=&quot;checkDmain&quot;&gt;checkDmain&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="cfa7865a62a1600c08a51825ce9e4783b54a91bc" translate="yes" xml:space="preserve">
          <source>final void &lt;strong id=&quot;connect&quot;&gt;connect&lt;/strong&gt;(slot_t slot);</source>
          <target state="translated">최종 무효 &lt;strong id=&quot;connect&quot;&gt;연결&lt;/strong&gt; (slot_t slot);</target>
        </trans-unit>
        <trans-unit id="a5dde06a48e7cc62484ab89bd60df91315ec9e20" translate="yes" xml:space="preserve">
          <source>final void &lt;strong id=&quot;declareParameters&quot;&gt;declareParameters&lt;/strong&gt;(Scope* sc);</source>
          <target state="translated">최종 무효 &lt;strong id=&quot;declareParameters&quot;&gt;선언 매개 변수&lt;/strong&gt; (Scope * sc);</target>
        </trans-unit>
        <trans-unit id="5dcf09f98b5b8eeaa7a4b9a48eacc95ddc9502e9" translate="yes" xml:space="preserve">
          <source>final void &lt;strong id=&quot;disconnect&quot;&gt;disconnect&lt;/strong&gt;(slot_t slot);</source>
          <target state="translated">최종 공극 &lt;strong id=&quot;disconnect&quot;&gt;단절&lt;/strong&gt; (slot_t slot);</target>
        </trans-unit>
        <trans-unit id="ddf62a83684f37cc479b1cfcf525358f48906e0f" translate="yes" xml:space="preserve">
          <source>final void &lt;strong id=&quot;disconnectAll&quot;&gt;disconnectAll&lt;/strong&gt;();</source>
          <target state="translated">최종 void &lt;strong id=&quot;disconnectAll&quot;&gt;disconnectAll&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="d16ced778b0355fae0458901c980068a298af51c" translate="yes" xml:space="preserve">
          <source>final void &lt;strong id=&quot;emit&quot;&gt;emit&lt;/strong&gt;(T1 i);</source>
          <target state="translated">최종 보이드 &lt;strong id=&quot;emit&quot;&gt;방출&lt;/strong&gt; (T1 i);</target>
        </trans-unit>
        <trans-unit id="7bd3f5d916876071345a42bca457ee6cae41b4eb" translate="yes" xml:space="preserve">
          <source>final void &lt;strong id=&quot;fixTo&quot;&gt;fixTo&lt;/strong&gt;(Type t);</source>
          <target state="translated">최종 void &lt;strong id=&quot;fixTo&quot;&gt;fixTo&lt;/strong&gt; (타입 t);</target>
        </trans-unit>
        <trans-unit id="ac5c1742765bc43644f38074dfe2c15e9150e39e" translate="yes" xml:space="preserve">
          <source>final void &lt;strong id=&quot;initInferAttributes&quot;&gt;initInferAttributes&lt;/strong&gt;();</source>
          <target state="translated">최종 무효 &lt;strong id=&quot;initInferAttributes&quot;&gt;initInferAttributes&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="a520b2445f45ef88b7e00e6471bffb3c665bd110" translate="yes" xml:space="preserve">
          <source>final void &lt;strong id=&quot;joinAll&quot;&gt;joinAll&lt;/strong&gt;(bool rethrow = true);</source>
          <target state="translated">최종 void &lt;strong id=&quot;joinAll&quot;&gt;joinAll&lt;/strong&gt; ( &lt;strong id=&quot;joinAll&quot;&gt;both&lt;/strong&gt; rethrow = true);</target>
        </trans-unit>
        <trans-unit id="036f6113a50e5f5accea2200ae0143f1d6028834" translate="yes" xml:space="preserve">
          <source>final void &lt;strong id=&quot;popFront&quot;&gt;popFront&lt;/strong&gt;();</source>
          <target state="translated">최종 공극 &lt;strong id=&quot;popFront&quot;&gt;popFront&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="be509e433c26e5009f472a8c947dd8df91cb94b5" translate="yes" xml:space="preserve">
          <source>final void &lt;strong id=&quot;printInstantiationTrace&quot;&gt;printInstantiationTrace&lt;/strong&gt;();</source>
          <target state="translated">최종 void &lt;strong id=&quot;printInstantiationTrace&quot;&gt;printInstantiationTrace&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="388bb8e6be03425c50af743ca4c151525e3cbf92" translate="yes" xml:space="preserve">
          <source>final void &lt;strong id=&quot;remove&quot;&gt;remove&lt;/strong&gt;(Thread t);</source>
          <target state="translated">최종 보이드 &lt;strong id=&quot;remove&quot;&gt;제거&lt;/strong&gt; (스레드 t);</target>
        </trans-unit>
        <trans-unit id="1ae85c067a8377c397ebe372446f3f3aaebf3caa" translate="yes" xml:space="preserve">
          <source>final void &lt;strong id=&quot;resolvePKGunknown&quot;&gt;resolvePKGunknown&lt;/strong&gt;();</source>
          <target state="translated">최종 무효 해결 &lt;strong id=&quot;resolvePKGunknown&quot;&gt;PKGunknown&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="2f78c288b3856557a82f7d51bbc8ae6054a6cb15" translate="yes" xml:space="preserve">
          <source>final void &lt;strong id=&quot;setNoderefOperand&quot;&gt;setNoderefOperand&lt;/strong&gt;();</source>
          <target state="translated">최종 무효 &lt;strong id=&quot;setNoderefOperand&quot;&gt;setNoderefOperand&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="98c5e48ae807b524235762d693661c61542343ec" translate="yes" xml:space="preserve">
          <source>final void &lt;strong id=&quot;setNoderefOperands&quot;&gt;setNoderefOperands&lt;/strong&gt;();</source>
          <target state="translated">최종 무효 &lt;strong id=&quot;setNoderefOperands&quot;&gt;setNoderefOperands&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="75e98f6bb86bb9c2b9b4a9553d1eca5098d01aab" translate="yes" xml:space="preserve">
          <source>finalize: all live objects are finalized unconditionally</source>
          <target state="translated">마무리 : 모든 라이브 객체가 무조건 마무리됩니다</target>
        </trans-unit>
        <trans-unit id="2faff47aeedebbc3dce09006edc0244e5caca9e0" translate="yes" xml:space="preserve">
          <source>find function template root in overload list</source>
          <target state="translated">과부하 목록에서 함수 템플릿 루트 찾기</target>
        </trans-unit>
        <trans-unit id="163d8ed08449827df6a1a251df914b272088c5b0" translate="yes" xml:space="preserve">
          <source>finite, nonintegral</source>
          <target state="translated">유한 비 적분</target>
        </trans-unit>
        <trans-unit id="2dbe6f3c10b37170135626c4983a634b6c270ef7" translate="yes" xml:space="preserve">
          <source>first block in function</source>
          <target state="translated">기능의 첫 번째 블록</target>
        </trans-unit>
        <trans-unit id="5eda4c4cde8a20a3e8c9e6104b7654684a063995" translate="yes" xml:space="preserve">
          <source>first elements of each range, in turn, then the second element of each range, and so on, in a round-robin fashion.</source>
          <target state="translated">각 범위의 첫 번째 요소, 차례로 각 범위의 두 번째 요소 등이 라운드 로빈 방식입니다.</target>
        </trans-unit>
        <trans-unit id="095e9c416e7a2984e515687201dd7365b32a867f" translate="yes" xml:space="preserve">
          <source>first index</source>
          <target state="translated">첫 번째 색인</target>
        </trans-unit>
        <trans-unit id="3a73caf96caaa0152233e755e7c119bd1451bd2f" translate="yes" xml:space="preserve">
          <source>first lambda to be compared</source>
          <target state="translated">비교할 첫 번째 람다</target>
        </trans-unit>
        <trans-unit id="c5c3d3df9e58ec8124c95f39f28b039b9882a7a7" translate="yes" xml:space="preserve">
          <source>first operand</source>
          <target state="translated">첫 번째 피연산자</target>
        </trans-unit>
        <trans-unit id="bfc2f7c5b1293832871a70ec6bdda6d0f0652d92" translate="yes" xml:space="preserve">
          <source>first part of the identifier name.</source>
          <target state="translated">식별자 이름의 첫 부분.</target>
        </trans-unit>
        <trans-unit id="62df7401fd456c952a43dc61f9213770f071ec2b" translate="yes" xml:space="preserve">
          <source>first segment</source>
          <target state="translated">첫 번째 세그먼트</target>
        </trans-unit>
        <trans-unit id="2a045509f56e53dc5a9335f5f59f04a7a0763357" translate="yes" xml:space="preserve">
          <source>first, no error</source>
          <target state="translated">첫째, 오류 없음</target>
        </trans-unit>
        <trans-unit id="d767df26c879e3f6e96197d7a060e4e59c392e04" translate="yes" xml:space="preserve">
          <source>fix &lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=12516&quot;&gt;https://issues.dlang.org/show_bug.cgi?id=12516&lt;/a&gt; e.g. by changing this to a truly safe interface.</source>
          <target state="translated">&lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=12516&quot;&gt;https://issues.dlang.org/show_bug.cgi?id=12516&lt;/a&gt; 예를 들어 이것을 진정으로 안전한 인터페이스로 변경하여 수정 하십시오 .</target>
        </trans-unit>
        <trans-unit id="91b4e427c7048669e94c52f3cfde8b38ebb16a56" translate="yes" xml:space="preserve">
          <source>fixed number of arguments</source>
          <target state="translated">고정 된 수의 인수</target>
        </trans-unit>
        <trans-unit id="488ebceaf0f770e616eee894681858eab2dbbc2c" translate="yes" xml:space="preserve">
          <source>fixes the comparison operators &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;=&lt;/code&gt; to return correct results in all circumstances, at a slight cost in efficiency. For example, &lt;code&gt;Checked!(uint, ProperCompare)(1) &amp;gt; -1&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, which is not the case for the built-in comparison. Also, comparing numbers for equality with floating-point numbers only passes if the integral can be converted to the floating-point number precisely, so as to preserve transitivity of equality.</source>
          <target state="translated">수정 비교 연산자 &lt;code&gt;==&lt;/code&gt; , &lt;code&gt;!=&lt;/code&gt; , &lt;code&gt;&amp;lt;&lt;/code&gt; , &lt;code&gt;&amp;lt;=&lt;/code&gt; , &lt;code&gt;&amp;gt;&lt;/code&gt; , 및 &lt;code&gt;&amp;gt;=&lt;/code&gt; 효율 약간의 비용으로, 모든 상황에서 올바른 결과를 반환합니다. 예를 들어 &lt;code&gt;Checked!(uint, ProperCompare)(1) &amp;gt; -1&lt;/code&gt; 은 &lt;code&gt;true&lt;/code&gt; 이며 내장 비교의 경우에는 해당되지 않습니다. 또한, 정수의 부동 소수점 숫자를 정확하게 비교할 수있는 정수를 부동 소수점 숫자로 정확하게 변환 할 수있는 경우에만 등가의 숫자를 부동 소수점 숫자와 비교하면 통과합니다.</target>
        </trans-unit>
        <trans-unit id="668452a5cd7edeb310389ec4faee95eea2ffcbfb" translate="yes" xml:space="preserve">
          <source>flag 1: don't do semantic() because of dummy types 2: don't change types in matchArg()</source>
          <target state="translated">플래그 1 : 더미 유형으로 인해 semantic ()을 수행하지 않음 2 : matchArg ()에서 유형을 변경하지 않음</target>
        </trans-unit>
        <trans-unit id="e3f217e51828a30c0c7e515c1673d76f629d50f6" translate="yes" xml:space="preserve">
          <source>flag to specify if the matches should be in the resulting range</source>
          <target state="translated">일치하는 결과 범위에 있어야하는지 지정하는 플래그</target>
        </trans-unit>
        <trans-unit id="964992a57d111bb0865d708e942f8599f79c480d" translate="yes" xml:space="preserve">
          <source>flag.</source>
          <target state="translated">flag.</target>
        </trans-unit>
        <trans-unit id="c16186badaffeb7e2d350479d5c4fe91fc0be2e1" translate="yes" xml:space="preserve">
          <source>flags</source>
          <target state="translated">flags</target>
        </trans-unit>
        <trans-unit id="ee96859ccc38bc2ae72893a5cc7668e29d5538db" translate="yes" xml:space="preserve">
          <source>flags 0 don't add value signature 1 add value signature</source>
          <target state="translated">플래그 0은 값 서명을 추가하지 않습니다 1 값 서명을 추가합니다</target>
        </trans-unit>
        <trans-unit id="80aae17c830f03ad86af36a1268e9bec17a06da6" translate="yes" xml:space="preserve">
          <source>flags PSxxxx</source>
          <target state="translated">PSxxxx 플래그</target>
        </trans-unit>
        <trans-unit id="685e80366130387cb75c055248326976d16fdf8d" translate="yes" xml:space="preserve">
          <source>float</source>
          <target state="translated">float</target>
        </trans-unit>
        <trans-unit id="b9404ee03f45d49f29c2dab8f9f5085310794c77" translate="yes" xml:space="preserve">
          <source>float (32bit - 4x ubyte)</source>
          <target state="translated">float (32 비트-4x ubyte)</target>
        </trans-unit>
        <trans-unit id="4b0e64afdf49bd86589c4fbeece1d087900cbefd" translate="yes" xml:space="preserve">
          <source>float &lt;code&gt;f&lt;/code&gt;</source>
          <target state="translated">플로트 &lt;code&gt;f&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ad3f3320fd71e5453646c03bd0aaf389d30a3236" translate="yes" xml:space="preserve">
          <source>float &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">부동 &lt;code&gt;x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="baba59460790299c8ffb17c4e52e3581186dc9e8" translate="yes" xml:space="preserve">
          <source>float double</source>
          <target state="translated">플로트 더블</target>
        </trans-unit>
        <trans-unit id="8061829363b9ba1ff31f89f4767b12fc2c7eaf81" translate="yes" xml:space="preserve">
          <source>float, double, real, ifloat, idouble, ireal are returned in ST0.</source>
          <target state="translated">float, double, real, ifloat, idouble, ireal이 ST0에 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="fe0d54bb26ae8fa26f6f4af78e4ac67431dc9396" translate="yes" xml:space="preserve">
          <source>float4</source>
          <target state="translated">float4</target>
        </trans-unit>
        <trans-unit id="9670b3cbc15e10544ea3c2f0562c6c0ad5913404" translate="yes" xml:space="preserve">
          <source>float8</source>
          <target state="translated">float8</target>
        </trans-unit>
        <trans-unit id="f1c6f2a988096d2f732f80117b66826eddf315b9" translate="yes" xml:space="preserve">
          <source>floating</source>
          <target state="translated">floating</target>
        </trans-unit>
        <trans-unit id="008d70830513afadff734ff7f54267809e699f57" translate="yes" xml:space="preserve">
          <source>floating point</source>
          <target state="translated">부동 소수점</target>
        </trans-unit>
        <trans-unit id="88425fb1fa6e69e34e56183bfadc2bbe1b2872b9" translate="yes" xml:space="preserve">
          <source>floating point computations may be done at a higher precision than run time</source>
          <target state="translated">부동 소수점 계산은 런타임보다 높은 정밀도로 수행 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9be840b003c7ac1629fd6f7f05f532e36efc0487" translate="yes" xml:space="preserve">
          <source>floating point types</source>
          <target state="translated">부동 소수점 유형</target>
        </trans-unit>
        <trans-unit id="7b5312e630e9fa2325bfdd7d2ba9c02645f26dcb" translate="yes" xml:space="preserve">
          <source>floating point value</source>
          <target state="translated">부동 소수점 값</target>
        </trans-unit>
        <trans-unit id="9d46cca77bf31cb32c56aa80530dffe5182de3b7" translate="yes" xml:space="preserve">
          <source>fmod(x, y)</source>
          <target state="translated">fmod (x, y)</target>
        </trans-unit>
        <trans-unit id="47fdd9283ded80c62bb5e40ce65b0e49a48675b3" translate="yes" xml:space="preserve">
          <source>fn</source>
          <target state="translated">fn</target>
        </trans-unit>
        <trans-unit id="a500bf4d2323a6908a95151055b83b9b8ed66288" translate="yes" xml:space="preserve">
          <source>fn must not be null.</source>
          <target state="translated">fn은 null이 아니어야합니다.</target>
        </trans-unit>
        <trans-unit id="6cbf68c50f73c84678b2d08307c10e5dc93dd3c4" translate="yes" xml:space="preserve">
          <source>following</source>
          <target state="translated">following</target>
        </trans-unit>
        <trans-unit id="3c93eb748de75e9a9626e578bd29c2cff14d36ac" translate="yes" xml:space="preserve">
          <source>foo!(args) =&amp;gt; name = foo tiargs = args</source>
          <target state="translated">foo! (args) =&amp;gt; 이름 = foo tiargs = args</target>
        </trans-unit>
        <trans-unit id="6f7c7c35c975e13052b66b5d28832df1d7b8f352" translate="yes" xml:space="preserve">
          <source>foo.bar!(args)</source>
          <target state="translated">foo.bar!(args)</target>
        </trans-unit>
        <trans-unit id="1795e7af835a75ad0d4d8335d7f392a1d959283c" translate="yes" xml:space="preserve">
          <source>for a nested function 'fd' return the type of the closure of an outer function or aggregate. If the function is a member function the 'this' type is expected to be stored in 'sthis.Sthis'. It is always returned if it is not a void pointer. buildClosure() must have been called on the outer function before.</source>
          <target state="translated">중첩 함수 'fd'의 경우 외부 함수 또는 집계의 클로저 유형을 반환합니다. 함수가 멤버 함수 인 경우 'this'유형은 'sthis.Sthis'에 저장됩니다. void 포인터가 아닌 경우 항상 반환됩니다. 전에 외부 함수에서 buildClosure ()를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="0fd88d49ef2c786fd316b1654259cb113a50c31f" translate="yes" xml:space="preserve">
          <source>for a program is defined as it being impossible for the program to corrupt memory. Therefore, the safe subset of D consists only of programming language features that are guaranteed to never result in memory corruption. See &lt;a href=&quot;https://dlang.org/safed.html&quot;&gt;this article&lt;/a&gt; for a rationale.</source>
          <target state="translated">프로그램이 메모리를 손상시키는 것은 불가능한 것으로 정의됩니다. 따라서 D의 안전한 하위 집합은 메모리 손상을 초래하지 않는 프로그래밍 언어 기능으로 만 구성됩니다. 이론적 근거는 &lt;a href=&quot;https://dlang.org/safed.html&quot;&gt;이 기사&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a580012ae45ac5731fef3cceadbbe252fb2b57d1" translate="yes" xml:space="preserve">
          <source>for an array is &lt;code&gt;void&lt;/code&gt;. What it means is that no initialization is done, i.e. the contents of the array will be undefined. This is most useful as an efficiency optimization. Void initializations are an advanced technique and should only be used when profiling indicates that it matters.</source>
          <target state="translated">배열은 &lt;code&gt;void&lt;/code&gt; 입니다. 이는 초기화가 수행되지 않음을 의미합니다. 즉, 배열의 내용이 정의되지 않습니다. 이것은 효율성 최적화로 가장 유용합니다. 무효 초기화는 고급 기술이며 프로파일 링이 중요 함을 나타내는 경우에만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="cbe0c71a6a7408e2289f21aa5e138b4732dfc638" translate="yes" xml:space="preserve">
          <source>for deprecations</source>
          <target state="translated">더 이상 사용되지 않는</target>
        </trans-unit>
        <trans-unit id="fe8e1f9d82f741b398a9509a32e501a5281f1114" translate="yes" xml:space="preserve">
          <source>for diagnostics, e.g. 'int foo(int x, int y) pure'</source>
          <target state="translated">진단을 위해, 예를 들어 'int foo (int x, int y) pure'</target>
        </trans-unit>
        <trans-unit id="1425fb571db638cd803222c312b39c65516d4b7a" translate="yes" xml:space="preserve">
          <source>for each index in this array, there's a linked list with textual information in the format &quot;name: value&quot;</source>
          <target state="translated">이 배열의 각 색인에 대해 &quot;name : value&quot;형식의 텍스트 정보가있는 링크 된 목록이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c89da61be0af42e286b491a1fa483e93efea0df" translate="yes" xml:space="preserve">
          <source>for error message</source>
          <target state="translated">오류 메시지</target>
        </trans-unit>
        <trans-unit id="e8d0a49ecc65634292d303910b26260a71c9f14e" translate="yes" xml:space="preserve">
          <source>for errors</source>
          <target state="translated">오류</target>
        </trans-unit>
        <trans-unit id="e0508d44543014c0a786671aeae84f930a8d350a" translate="yes" xml:space="preserve">
          <source>for gagged errors</source>
          <target state="translated">재갈 오류</target>
        </trans-unit>
        <trans-unit id="ede92b768e6b3a58e5a2ae9d4814c48f6387509f" translate="yes" xml:space="preserve">
          <source>for initializing zalloc, zfree, opaque (extern(D) for mangling)</source>
          <target state="translated">zalloc, zfree, opaque 초기화 용 (mangling의 extern (D))</target>
        </trans-unit>
        <trans-unit id="8d033e971d8b3a8fee4fb9ad863a340f11bbbdd6" translate="yes" xml:space="preserve">
          <source>for iteration over code points and functions from &lt;a href=&quot;https://dlang.org/phobos/std_uni.html&quot;&gt;std.uni&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://dlang.org/phobos/std_uni.html&quot;&gt;std.uni의&lt;/a&gt; 코드 포인트 및 함수를 반복 합니다.</target>
        </trans-unit>
        <trans-unit id="2541a45c1a81e8e7f46edbdae2d444f0c7462ba6" translate="yes" xml:space="preserve">
          <source>for member functions, index into vtbl[]</source>
          <target state="translated">멤버 함수의 경우 vtbl에 색인</target>
        </trans-unit>
        <trans-unit id="a57679609f0c41e7bed73bf5e8bdbd7079143469" translate="yes" xml:space="preserve">
          <source>for powmod</source>
          <target state="translated">powmod를 위해</target>
        </trans-unit>
        <trans-unit id="82b5225d403b9636487c6f96a4fabf8ac04d5dc0" translate="yes" xml:space="preserve">
          <source>for read perhaps</source>
          <target state="translated">아마 읽을</target>
        </trans-unit>
        <trans-unit id="09a24b8fb83595efb35511b2f001d4a2fb5751a2" translate="yes" xml:space="preserve">
          <source>for recursive expansion detection</source>
          <target state="translated">재귀 확장 감지</target>
        </trans-unit>
        <trans-unit id="9929a33b941ada3f80d438f92c0d7cc69c2b46c6" translate="yes" xml:space="preserve">
          <source>for static links see &lt;a href=&quot;https://en.wikipedia.org/wiki/Call_stack#Functions_of_the_call_stack&quot;&gt;https://en.wikipedia.org/wiki/Call_stack#Functions_of_the_call_stack&lt;/a&gt;</source>
          <target state="translated">정적 링크는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Call_stack#Functions_of_the_call_stack&quot;&gt;https://en.wikipedia.org/wiki/Call_stack#Functions_of_the_call_stack을&lt;/a&gt; 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="042959d6f07d32f4b78d55148276b9b7a7f27639" translate="yes" xml:space="preserve">
          <source>for tip messages</source>
          <target state="translated">팁 메시지</target>
        </trans-unit>
        <trans-unit id="da0e9282f30338ee492d7cb69a7341b97bb816f3" translate="yes" xml:space="preserve">
          <source>for warnings</source>
          <target state="translated">경고</target>
        </trans-unit>
        <trans-unit id="6e6d21d9f8305ef1eccb13decc6ac107420ae1d5" translate="yes" xml:space="preserve">
          <source>for which &lt;code&gt;TargetOS&lt;/code&gt; the flags are applicable</source>
          <target state="translated">어떤 &lt;code&gt;TargetOS&lt;/code&gt; 에 플래그를 적용 할 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="f434754c1d256e4074ff4fa94c9545f308a58461" translate="yes" xml:space="preserve">
          <source>for write perhaps</source>
          <target state="translated">아마도 쓰기</target>
        </trans-unit>
        <trans-unit id="d1293c58a4adeb082065ba06181a62aef79f04b6" translate="yes" xml:space="preserve">
          <source>forbid construction from infinite range</source>
          <target state="translated">무한대의 건축 금지</target>
        </trans-unit>
        <trans-unit id="18f23e3f0af3fd4850774d0bd64bb51a0d0c37cd" translate="yes" xml:space="preserve">
          <source>foreach opApply over all key/value pairs</source>
          <target state="translated">모든 키 / 값 쌍에 대해 forApp opApply</target>
        </trans-unit>
        <trans-unit id="62ec2299684e572c5775cd927ca8798b0caa2715" translate="yes" xml:space="preserve">
          <source>foreach opApply over all values</source>
          <target state="translated">모든 값에 대해 forApp opApply</target>
        </trans-unit>
        <trans-unit id="5f9f11a318984c3a1db8f3d5fd0b43e076de8e21" translate="yes" xml:space="preserve">
          <source>format specifications</source>
          <target state="translated">형식 사양</target>
        </trans-unit>
        <trans-unit id="24fc30325ed20ccf5b564b39ab6635b559fe5b4f" translate="yes" xml:space="preserve">
          <source>format string arguments</source>
          <target state="translated">형식 문자열 인수</target>
        </trans-unit>
        <trans-unit id="9972e571f2d602999f223d6f11f31e4c56f5be70" translate="yes" xml:space="preserve">
          <source>format string as described in &lt;a href=&quot;std_format#formattedWrite&quot;&gt;&lt;code&gt;std.format.formattedWrite&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;std_format#formattedWrite&quot;&gt; &lt;code&gt;std.format.formattedWrite&lt;/code&gt; 에&lt;/a&gt; 설명 된대로 형식 문자열</target>
        </trans-unit>
        <trans-unit id="9332213a2f41ea52e8325b77072e53956ab48d05" translate="yes" xml:space="preserve">
          <source>format string for error</source>
          <target state="translated">오류의 형식 문자열</target>
        </trans-unit>
        <trans-unit id="77c3e90e2d41d4dabd36c42ed9653f092c93572d" translate="yes" xml:space="preserve">
          <source>format string for supplemental message</source>
          <target state="translated">보충 메시지의 형식 문자열</target>
        </trans-unit>
        <trans-unit id="f5cfd3cb2d90cc21cefa00f37a52261bc49d0d96" translate="yes" xml:space="preserve">
          <source>format string for the deprecation</source>
          <target state="translated">더 이상 사용되지 않는 형식 문자열</target>
        </trans-unit>
        <trans-unit id="84a93c251f023a5285107885fc60a73c8b7d4f59" translate="yes" xml:space="preserve">
          <source>format string for warning</source>
          <target state="translated">경고를위한 형식 문자열</target>
        </trans-unit>
        <trans-unit id="18c01c8b98bdb2c62fdfac8907bc1509f7c5ef55" translate="yes" xml:space="preserve">
          <source>format string to generate replacements from, see &lt;a href=&quot;#Replace%20format%20string&quot;&gt;the format string&lt;/a&gt;.</source>
          <target state="translated">에서 교체를 생성 볼 문자열을 포맷 &lt;a href=&quot;#Replace%20format%20string&quot;&gt;형식 문자열을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7876d8c9b8b6f4add08c1efeb2654da3ba55d0ef" translate="yes" xml:space="preserve">
          <source>formatted string or &lt;code&gt;null&lt;/code&gt; if the expressions were &lt;code&gt;null&lt;/code&gt;, or if the instantiated expression is not based on the original one</source>
          <target state="translated">포맷 문자열이나 &lt;code&gt;null&lt;/code&gt; 의 표현이 있다면 &lt;code&gt;null&lt;/code&gt; , 또는 인스턴스화 된 표현은 원래 하나를 기반으로하지 않은 경우</target>
        </trans-unit>
        <trans-unit id="14575ebbd16c3a7cdb6c9f81a1451455537ff286" translate="yes" xml:space="preserve">
          <source>formed from the upper and lower bounds, which must statically evaluate to integral constants. It is an error if those bounds are out of range.</source>
          <target state="translated">상한과 하한으로 구성되며 정수를 정적으로 계산해야합니다. 해당 범위가 범위를 벗어나면 오류입니다.</target>
        </trans-unit>
        <trans-unit id="ed393b19ce7451be033621906ef6a97fc75b0a2d" translate="yes" xml:space="preserve">
          <source>forward range</source>
          <target state="translated">앞으로 범위</target>
        </trans-unit>
        <trans-unit id="2c65f329feb33b297cbb0138b9f7432af2e83764" translate="yes" xml:space="preserve">
          <source>forward range of import paths found in &lt;code&gt;iniFile&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;iniFile&lt;/code&gt; 에있는 가져 오기 경로의 전달 범위</target>
        </trans-unit>
        <trans-unit id="de21c20e12a91fda6d2bd892e15ea7b925b8dfd8" translate="yes" xml:space="preserve">
          <source>forward range or list of individual values whose elements correspond to the probabilities with which to choose the corresponding index value</source>
          <target state="translated">요소가 해당 인덱스 값을 선택하는 확률에 해당하는 개별 범위의 순방향 범위 또는 목록</target>
        </trans-unit>
        <trans-unit id="b0758163467b8528bd244a7a4c07e709409daf13" translate="yes" xml:space="preserve">
          <source>forward ranges are file/socket ranges; copying such a range will not save the position in the stream, and they most likely reuse an internal buffer as the entire stream does not sit in memory. Subsequently, advancing either the original or the copy will advance the stream, so the copies are not independent.</source>
          <target state="translated">순방향 범위는 파일 / 소켓 범위입니다. 이러한 범위를 복사하면 스트림의 위치가 저장되지 않으며 전체 스트림이 메모리에 저장되지 않으므로 내부 버퍼를 재사용 할 가능성이 높습니다. 결과적으로 원본 또는 사본을 진행하면 스트림이 진행되므로 사본이 독립적이지 않습니다.</target>
        </trans-unit>
        <trans-unit id="00ad007127d59043ea8dc9ff33c31b7c5d775cf9" translate="yes" xml:space="preserve">
          <source>frame pointer</source>
          <target state="translated">프레임 포인터</target>
        </trans-unit>
        <trans-unit id="d11ade75c0d7abd378d993fe68b8ebb261a1288b" translate="yes" xml:space="preserve">
          <source>free a previously built curl_slist.</source>
          <target state="translated">이전에 빌드 한 curl_slist를 해제하십시오.</target>
        </trans-unit>
        <trans-unit id="67c81f1ac3901bb1a038fcbcab6c832c3827caee" translate="yes" xml:space="preserve">
          <source>frexp</source>
          <target state="translated">frexp</target>
        </trans-unit>
        <trans-unit id="0b1e95cfd9775191a7224d0a218ae79187e80c1d" translate="yes" xml:space="preserve">
          <source>from</source>
          <target state="translated">from</target>
        </trans-unit>
        <trans-unit id="1cc3d13fcc072df9ffa96b02cb69d42b7bf09207" translate="yes" xml:space="preserve">
          <source>from which the type can be inferred, the type on the declaration can be omitted.</source>
          <target state="translated">형식을 유추 할 수있는 선언에서 형식을 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="33227a98cfbe13f8ccb4c0e9c323149838d911bc" translate="yes" xml:space="preserve">
          <source>from/to</source>
          <target state="translated">from/to</target>
        </trans-unit>
        <trans-unit id="44969ebd6572854d6eef5ca7ab2ab7ff4713d4ae" translate="yes" xml:space="preserve">
          <source>front end &lt;code&gt;Type&lt;/code&gt;</source>
          <target state="translated">프런트 엔드 &lt;code&gt;Type&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bd46432ace62062b8638393ec93db89ec255c07d" translate="yes" xml:space="preserve">
          <source>fsincos</source>
          <target state="translated">fsincos</target>
        </trans-unit>
        <trans-unit id="52e6d8ab88471af82da12a0eae7aab01357e3881" translate="yes" xml:space="preserve">
          <source>full</source>
          <target state="translated">full</target>
        </trans-unit>
        <trans-unit id="d50122ce04d43ee876c01343d4e20d8e1ae5105c" translate="yes" xml:space="preserve">
          <source>full path to the executable of the found compiler, &lt;code&gt;null&lt;/code&gt; otherwise.</source>
          <target state="translated">찾은 컴파일러의 실행 파일에 대한 전체 경로, 그렇지 않으면 &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4d0365afa40501166ab3ccc6d7eff679e8617c7d" translate="yes" xml:space="preserve">
          <source>full path to the found &lt;code&gt;dmd.conf&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; otherwise.</source>
          <target state="translated">찾은 &lt;code&gt;dmd.conf&lt;/code&gt; 의 전체 경로 , 그렇지 않으면 &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="79d35c9c5e14fc0d57e8aa65022cd87b6d5500e0" translate="yes" xml:space="preserve">
          <source>full path to the found &lt;code&gt;ldc2.conf&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; otherwise.</source>
          <target state="translated">찾은 &lt;code&gt;ldc2.conf&lt;/code&gt; 의 전체 경로 , 그렇지 않으면 &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0ca62526153e7414c13dbbb69061c644ad803896" translate="yes" xml:space="preserve">
          <source>fullexpr</source>
          <target state="translated">fullexpr</target>
        </trans-unit>
        <trans-unit id="c84c50d5a767a23bda0ea5ca348fed54c6db9aab" translate="yes" xml:space="preserve">
          <source>fun</source>
          <target state="translated">fun</target>
        </trans-unit>
        <trans-unit id="99fdb3623cf5c6ad0283ca5c096018dd2f2ff5ad" translate="yes" xml:space="preserve">
          <source>func</source>
          <target state="translated">func</target>
        </trans-unit>
        <trans-unit id="2ad78d27196cd4f92c26793756ee0a8d26aa1d1c" translate="yes" xml:space="preserve">
          <source>func must be logically pure. Ideally, func would be a function pointer to a pure function, but forcing func to be pure is far too restrictive to be useful, and in order to have the ease of use of having functions which generate functions to pass to &lt;code&gt;fwdRange&lt;/code&gt;, func must be a delegate.</source>
          <target state="translated">func은 논리적으로 순수해야합니다. 이상적으로 func은 순수한 함수를 가리키는 함수 포인터이지만 func을 순수하게 만드는 것은 너무 제한적이어서 유용하지 &lt;code&gt;fwdRange&lt;/code&gt; 에 전달할 함수를 생성하는 함수를 쉽게 사용할 수 있으려면 func가 있어야합니다. 대의원.</target>
        </trans-unit>
        <trans-unit id="bf11b151a4ca5c9d7ef83841ff7c81ef4edb6f9d" translate="yes" xml:space="preserve">
          <source>func.d</source>
          <target state="translated">func.d</target>
        </trans-unit>
        <trans-unit id="c218e39efa2e1aae69f39d2054528369ce1e1f46" translate="yes" xml:space="preserve">
          <source>function</source>
          <target state="translated">function</target>
        </trans-unit>
        <trans-unit id="051836ff39c149abff72ecd0326f8e344a2d0d0a" translate="yes" xml:space="preserve">
          <source>function (an example would be assigning</source>
          <target state="translated">기능 (예를 들면</target>
        </trans-unit>
        <trans-unit id="a37bcb5b4c55677d18db1e6ffcb07b121afb51f0" translate="yes" xml:space="preserve">
          <source>function being called, &lt;code&gt;null&lt;/code&gt; if called indirectly</source>
          <target state="translated">호출중인 함수, 간접적으로 호출 된 경우 &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b253208daf852a872797f9a920520b2b2ad5e736" translate="yes" xml:space="preserve">
          <source>function body</source>
          <target state="translated">기능 몸</target>
        </trans-unit>
        <trans-unit id="0978c9027bbc10b55e9ef1497177bd2a561509ad" translate="yes" xml:space="preserve">
          <source>function parameter (&lt;code&gt;this&lt;/code&gt; if null)</source>
          <target state="translated">함수 파라미터 ( &lt;code&gt;this&lt;/code&gt; 경우 NULL)</target>
        </trans-unit>
        <trans-unit id="7879b302809eab2a7db9d1c88a81b675e9dc1b5a" translate="yes" xml:space="preserve">
          <source>function pointer</source>
          <target state="translated">함수 포인터</target>
        </trans-unit>
        <trans-unit id="12a38b25a790317d896cfbc55c54431575fae7f5" translate="yes" xml:space="preserve">
          <source>function pointer to process the iterated symbol. If it returns nonzero, the iteration will be aborted.</source>
          <target state="translated">반복 된 심볼을 처리하기위한 함수 포인터. 0이 아닌 값을 반환하면 반복이 중단됩니다.</target>
        </trans-unit>
        <trans-unit id="fc264d2ca230411d10ff0e159662a9fe3770eb9c" translate="yes" xml:space="preserve">
          <source>function pointer type.</source>
          <target state="translated">함수 포인터 타입.</target>
        </trans-unit>
        <trans-unit id="bea2c1aca1e4fddca62bcfb93cb9f3c174aca38c" translate="yes" xml:space="preserve">
          <source>function symbol</source>
          <target state="translated">기능 기호</target>
        </trans-unit>
        <trans-unit id="2d61f25823d2e537dde2a694228ad678242500ab" translate="yes" xml:space="preserve">
          <source>function symbol if found, null if not</source>
          <target state="translated">발견되면 함수 기호, 그렇지 않으면 null</target>
        </trans-unit>
        <trans-unit id="e80c66779939e79c32b629bab14f74809cf4186b" translate="yes" xml:space="preserve">
          <source>function symbol or type of function, delegate, or pointer to function</source>
          <target state="translated">함수 심볼 또는 함수 유형, 델리게이트 또는 함수 포인터</target>
        </trans-unit>
        <trans-unit id="e466cb91fe1337c84737b06dbaada00a7eb6cd88" translate="yes" xml:space="preserve">
          <source>function that does the in contract</source>
          <target state="translated">계약을 수행하는 기능</target>
        </trans-unit>
        <trans-unit id="178f2366a1b4a49bd9b25f323539cc0d68aa975d" translate="yes" xml:space="preserve">
          <source>function that does the out contract</source>
          <target state="translated">아웃 계약을 수행하는 기능</target>
        </trans-unit>
        <trans-unit id="89fc59d1c3a23922e15627153f946c1fd765a0a6" translate="yes" xml:space="preserve">
          <source>function that statement s is in</source>
          <target state="translated">진술 문이있는 기능</target>
        </trans-unit>
        <trans-unit id="1b8564953a98bc5a131b0311a7b14a776ee97f63" translate="yes" xml:space="preserve">
          <source>function to apply to each element of the range</source>
          <target state="translated">범위의 각 요소에 적용하는 기능</target>
        </trans-unit>
        <trans-unit id="65c93ac468fc3e0ede92a3386e0f6e5ed0081472" translate="yes" xml:space="preserve">
          <source>function to determine cost of</source>
          <target state="translated">비용을 결정하는 기능</target>
        </trans-unit>
        <trans-unit id="a5031c567ee0625e01e7f4c9bf97f12e6c37ad80" translate="yes" xml:space="preserve">
          <source>function to instantiate the implementation</source>
          <target state="translated">구현을 인스턴스화하는 함수</target>
        </trans-unit>
        <trans-unit id="c7cf01da5786cd508d7803288d2b3fe6e0cebc68" translate="yes" xml:space="preserve">
          <source>function to pass the names to</source>
          <target state="translated">이름을 전달하는 기능</target>
        </trans-unit>
        <trans-unit id="162e25918f92cbfbb57939667991651f0c883645" translate="yes" xml:space="preserve">
          <source>function type to check</source>
          <target state="translated">확인할 기능 유형</target>
        </trans-unit>
        <trans-unit id="99ee479f04d4b113139849ff7ec402267f6495bc" translate="yes" xml:space="preserve">
          <source>function's identifier</source>
          <target state="translated">함수의 식별자</target>
        </trans-unit>
        <trans-unit id="9c8753a4072439de1eaaeb923a5d665149eac889" translate="yes" xml:space="preserve">
          <source>function's type</source>
          <target state="translated">함수 타입</target>
        </trans-unit>
        <trans-unit id="0d1f0492c1abb95c2a37fdef9d2066720196baea" translate="yes" xml:space="preserve">
          <source>function(</source>
          <target state="translated">function(</target>
        </trans-unit>
        <trans-unit id="5a4adf2ceba9d1693a9310d3e37665a70d537777" translate="yes" xml:space="preserve">
          <source>function. If the</source>
          <target state="translated">함수. 만약</target>
        </trans-unit>
        <trans-unit id="d27536ee0ad2e623a4599a46b23b8fe9e20d79e2" translate="yes" xml:space="preserve">
          <source>functions in this document. Note that a strongly pure function may still have behavior inconsistent with memoization by e.g. using &lt;code&gt;cast&lt;/code&gt;s or by changing behavior depending on the address of its parameters. An implementation is currently not required to enforce validity of memoization in all cases.</source>
          <target state="translated">이 문서의 기능. 강력하게 순수한 함수는 &lt;code&gt;cast&lt;/code&gt; 사용 하거나 매개 변수의 주소에 따라 동작을 변경 하여 메모와 일치하지 않는 동작을 가질 수 있습니다 . 모든 경우에 메모의 유효성을 강제하기 위해 현재 구현이 필요하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="9aa5f970c0d597ebeb3af394db1fc71b67390fc4" translate="yes" xml:space="preserve">
          <source>functions this function overrides</source>
          <target state="translated">이 함수가 재정의하는 함수</target>
        </trans-unit>
        <trans-unit id="54fd1711209fb1c0781092374132c66e79e2241b" translate="yes" xml:space="preserve">
          <source>g</source>
          <target state="translated">g</target>
        </trans-unit>
        <trans-unit id="e2974f7b5030599c933505bf2f022e92f7037434" translate="yes" xml:space="preserve">
          <source>g++ and clang++ differ in how empty structs are handled. Both return &lt;code&gt;1&lt;/code&gt; from &lt;code&gt;sizeof&lt;/code&gt;, however, clang++ does not push them onto the parameter stack while g++ does. This is a binary incompatibility between g++ and clang++. dmd follows clang++ behavior for OSX and FreeBSD, and g++ behavior for Linux and other Posix platforms.</source>
          <target state="translated">g ++와 clang ++은 빈 구조체를 처리하는 방법이 다릅니다. 둘 다 &lt;code&gt;sizeof&lt;/code&gt; 에서 &lt;code&gt;1&lt;/code&gt; 을 반환 하지만, clang ++은 g ++이 수행하는 동안 매개 변수 스택으로 밀어 넣지 않습니다. 이것은 g ++와 clang ++의 이진 비 호환성입니다. dmd는 OSX 및 FreeBSD의 clang ++ 동작과 Linux 및 기타 Posix 플랫폼의 g ++ 동작을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="a19f20245c0451e11ddb339866e33d9e0e63b244" translate="yes" xml:space="preserve">
          <source>gammaIncomplete = ( &lt;em&gt;&amp;int;&lt;sub&gt;&lt;small&gt;0&lt;/small&gt;&lt;/sub&gt;&lt;sup&gt;x&lt;/sup&gt;&lt;/em&gt; e&lt;sup&gt;-t&lt;/sup&gt; t&lt;sup&gt;a-1&lt;/sup&gt; dt )/ &amp;Gamma;(a)</source>
          <target state="translated">감마 불완전 = ( &lt;em&gt;&amp;int; &lt;sub&gt;&lt;small&gt;0&lt;/small&gt;&lt;/sub&gt;&lt;sup&gt; x&lt;/sup&gt;&lt;/em&gt; e &lt;sup&gt;-t&lt;/sup&gt; t &lt;sup&gt;a-1&lt;/sup&gt; dt) / &amp;Gamma; (a)</target>
        </trans-unit>
        <trans-unit id="6f8210298bb7359bec883b013abed779bbc45a0d" translate="yes" xml:space="preserve">
          <source>gammaIncompleteCompl( a, x ) = p.</source>
          <target state="translated">gammaIncompleteCompl (a, x) = p.</target>
        </trans-unit>
        <trans-unit id="f145d7d440f488260c11374669faf4618fbaf14a" translate="yes" xml:space="preserve">
          <source>gammaIncompleteCompl(a,x) = 1 - gammaIncomplete(a,x) = (&lt;em&gt;&amp;int;&lt;sub&gt;&lt;small&gt;x&lt;/small&gt;&lt;/sub&gt;&lt;sup&gt;&amp;infin;&lt;/sup&gt;&lt;/em&gt; e&lt;sup&gt;-t&lt;/sup&gt; t&lt;sup&gt;a-1&lt;/sup&gt; dt )/ &amp;Gamma;(a)</source>
          <target state="translated">gammaIncompleteCompl (a, x) = 1-gammaIncomplete (a, x) = ( &lt;em&gt;&amp;int; &lt;sub&gt;&lt;small&gt;x&lt;/small&gt;&lt;/sub&gt;&lt;sup&gt; &amp;infin;&lt;/sup&gt;&lt;/em&gt; e &lt;sup&gt;-t&lt;/sup&gt; t &lt;sup&gt;a-1&lt;/sup&gt; dt) / &amp;Gamma; (a)</target>
        </trans-unit>
        <trans-unit id="e467943ace0a158538b958eeb88a80a8e8bb4b36" translate="yes" xml:space="preserve">
          <source>gc:conservative|precise|manual - select gc implementation (default = conservative)</source>
          <target state="translated">gc : 보수적 | 정확한 | 수동-gc 구현 선택 (기본값 = 보수적)</target>
        </trans-unit>
        <trans-unit id="40d569fd2b1cc15e90f26c1eb7d337b0536eda61" translate="yes" xml:space="preserve">
          <source>gcc asm statement being parsed</source>
          <target state="translated">구문 분석되는 gcc asm 문</target>
        </trans-unit>
        <trans-unit id="d7799897542e9ab068fb8980b4be6e21d652f9b5" translate="yes" xml:space="preserve">
          <source>generate an error if it throws</source>
          <target state="translated">발생하면 오류를 생성</target>
        </trans-unit>
        <trans-unit id="4f8ee36c565b07622da736046a51794785b9701f" translate="yes" xml:space="preserve">
          <source>generate clickable link on argument</source>
          <target state="translated">인수시 클릭 가능한 링크 생성</target>
        </trans-unit>
        <trans-unit id="8c4a98abc2dd6755a623c02f4b3a47e898e0fae5" translate="yes" xml:space="preserve">
          <source>generate clickable link, first arg is address</source>
          <target state="translated">클릭 가능한 링크 생성, 첫 번째 인수는 주소입니다</target>
        </trans-unit>
        <trans-unit id="54ea345e6872c6fc73de8677f84c2aea081590cc" translate="yes" xml:space="preserve">
          <source>generated &lt;code&gt;opAssign&lt;/code&gt; function</source>
          <target state="translated">생성 된 &lt;code&gt;opAssign&lt;/code&gt; 함수</target>
        </trans-unit>
        <trans-unit id="8ce6c57dc1bff4c699ecbd3916b989cadce134f3" translate="yes" xml:space="preserve">
          <source>generated call</source>
          <target state="translated">생성 된 호출</target>
        </trans-unit>
        <trans-unit id="1d4de32437a7b9b4359f29702baa54810a488455" translate="yes" xml:space="preserve">
          <source>generated elem</source>
          <target state="translated">생성 된 요소</target>
        </trans-unit>
        <trans-unit id="b161de4a54c1b683ccef3d027a7308a62568b894" translate="yes" xml:space="preserve">
          <source>generated elem tree</source>
          <target state="translated">생성 된 느릅 나무</target>
        </trans-unit>
        <trans-unit id="87fa760353338cbfe8a4add32e79978225be0b5d" translate="yes" xml:space="preserve">
          <source>generated function, null if none needed</source>
          <target state="translated">생성 된 함수, 필요없는 경우 null</target>
        </trans-unit>
        <trans-unit id="ffa121f6801a3db88dc5aad9f29af630d8933baa" translate="yes" xml:space="preserve">
          <source>generated instruction</source>
          <target state="translated">생성 된 명령</target>
        </trans-unit>
        <trans-unit id="d32329aa772cf41411f9e272ff315904b688fcc9" translate="yes" xml:space="preserve">
          <source>generated list</source>
          <target state="translated">생성 된 목록</target>
        </trans-unit>
        <trans-unit id="aca0dba3bd3a4a0b8e5aa13bf952e16abd6a2817" translate="yes" xml:space="preserve">
          <source>get a druntime config option using standard configuration options opt name of the option to retrieve dg if non-null, passes the option through this delegate and only returns its return value if non-null reverse reverse the default processing order cmdline/envvar/rt_options to allow overwriting settings in the delegate with values from higher priority</source>
          <target state="translated">표준 구성 옵션을 사용하여 druntime 구성 옵션을 가져옵니다. opt null이 아닌 경우 dg를 검색하는 옵션의 이름을 지정하고이 대리자를 통해 옵션을 전달하고 null이 아닌 경우 기본 처리 순서를 반대로 되돌릴 경우에만 리턴 값을 리턴합니다. cmdline / envvar / rt_options 우선 순위가 높은 값으로 델리게이트의 설정을 덮어 쓸 수 있습니다</target>
        </trans-unit>
        <trans-unit id="a9f75241aeabfeb4c44053eba18ca829dd66b6b1" translate="yes" xml:space="preserve">
          <source>get an array of size_t values that indicate possible pointer words in memory if interpreted as the type given as argument</source>
          <target state="translated">인수로 주어진 타입으로 해석 될 경우 메모리에 가능한 포인터 단어를 나타내는 size_t 값의 배열을 얻는다</target>
        </trans-unit>
        <trans-unit id="7a5629011a71dffc69a33343e21959437d607cbb" translate="yes" xml:space="preserve">
          <source>get the allocation size of the array for the given block (without padding or type info)</source>
          <target state="translated">주어진 블록에 대한 배열의 할당 크기를 얻습니다 (패딩 또는 유형 정보 없음)</target>
        </trans-unit>
        <trans-unit id="76fbf378384d2546a51a080841c846140712ca1a" translate="yes" xml:space="preserve">
          <source>get the padding required to allocate size bytes. Note that the padding is NOT included in the passed in size. Therefore, do NOT call this function with the size of an allocated block.</source>
          <target state="translated">크기 바이트를 할당하는 데 필요한 패딩을 가져옵니다. 패딩은 전달 된 크기에 포함되지 않습니다. 따라서 할당 된 블록 크기로이 함수를 호출하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="00a9015d0d5dcd84262dd84e2980eebbc125a8c9" translate="yes" xml:space="preserve">
          <source>get the start of the array for the given block</source>
          <target state="translated">주어진 블록에 대한 배열의 시작을 얻는다</target>
        </trans-unit>
        <trans-unit id="8c0788029ed0a42c58756e222fa15228c55a5110" translate="yes" xml:space="preserve">
          <source>getAliasThis</source>
          <target state="translated">getAliasThis</target>
        </trans-unit>
        <trans-unit id="57cde0199bf01965136f006158f9b178b35223bb" translate="yes" xml:space="preserve">
          <source>getAttributes</source>
          <target state="translated">getAttributes</target>
        </trans-unit>
        <trans-unit id="2cb2679aad7c94a8532ef0565707640e46247549" translate="yes" xml:space="preserve">
          <source>getAttributes with a directory</source>
          <target state="translated">디렉토리가있는 getAttributes</target>
        </trans-unit>
        <trans-unit id="8f34a78129c738a31d301e3f164c6c24199486c4" translate="yes" xml:space="preserve">
          <source>getAttributes with a file</source>
          <target state="translated">파일이있는 getAttributes</target>
        </trans-unit>
        <trans-unit id="9d6b7d6cc0f8b3bee0663c6f764f214393d2ac2c" translate="yes" xml:space="preserve">
          <source>getCppNamespaces</source>
          <target state="translated">getCppNamespaces</target>
        </trans-unit>
        <trans-unit id="bb67791975b7d4aedf9a13cfb9a8574c3120e547" translate="yes" xml:space="preserve">
          <source>getEthis() and NewExp::toElem need to use sclosure, if set, rather than the current frame pointer.</source>
          <target state="translated">getEthis () 및 NewExp :: toElem은 설정된 경우 현재 프레임 포인터 대신 sclosure를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="2b791cf8ff72212c4ca7b956391343969b151298" translate="yes" xml:space="preserve">
          <source>getFunctionAttributes</source>
          <target state="translated">getFunctionAttributes</target>
        </trans-unit>
        <trans-unit id="da38eb3ad1f961c080ab4aedc80a308d45a2793e" translate="yes" xml:space="preserve">
          <source>getFunctionVariadicStyle</source>
          <target state="translated">getFunctionVariadicStyle</target>
        </trans-unit>
        <trans-unit id="0ee7849f2a093148f7be761d5a6c9c92d7393e6b" translate="yes" xml:space="preserve">
          <source>getLinkage</source>
          <target state="translated">getLinkage</target>
        </trans-unit>
        <trans-unit id="99c1500da691cfa21d96bfad67e3c848175d4ae9" translate="yes" xml:space="preserve">
          <source>getLocation</source>
          <target state="translated">getLocation</target>
        </trans-unit>
        <trans-unit id="0a0143d1ba7f724c4fbea58aafe9cf99d8817eec" translate="yes" xml:space="preserve">
          <source>getMember</source>
          <target state="translated">getMember</target>
        </trans-unit>
        <trans-unit id="75eca269fbb560a69d5e9f3f925eb51124bf2f0c" translate="yes" xml:space="preserve">
          <source>getOverloads</source>
          <target state="translated">getOverloads</target>
        </trans-unit>
        <trans-unit id="aac82e8a683739ba31f956c598df6a58f9bfb982" translate="yes" xml:space="preserve">
          <source>getParameterStorageClasses</source>
          <target state="translated">getParameterStorageClasses</target>
        </trans-unit>
        <trans-unit id="414f1f666ac4a5052c2698c452ec1de5ce21fe39" translate="yes" xml:space="preserve">
          <source>getPointerBitmap</source>
          <target state="translated">getPointerBitmap</target>
        </trans-unit>
        <trans-unit id="a44985cb19a863e66d2140631bba21af8ab74a2b" translate="yes" xml:space="preserve">
          <source>getProtection</source>
          <target state="translated">getProtection</target>
        </trans-unit>
        <trans-unit id="13bc4cbd31506f43e1bd250b2d1e68650c8a90f6" translate="yes" xml:space="preserve">
          <source>getTargetInfo</source>
          <target state="translated">getTargetInfo</target>
        </trans-unit>
        <trans-unit id="9a192290db95a97d2c642f67ea67a248f29cbed2" translate="yes" xml:space="preserve">
          <source>getUnitTests</source>
          <target state="translated">getUnitTests</target>
        </trans-unit>
        <trans-unit id="cb83594617998531fae6dd932b5ec2d2bfa3eca2" translate="yes" xml:space="preserve">
          <source>getVirtualFunctions</source>
          <target state="translated">getVirtualFunctions</target>
        </trans-unit>
        <trans-unit id="3076b9c651c82054316d6460c6e0f6a069cbf536" translate="yes" xml:space="preserve">
          <source>getVirtualIndex</source>
          <target state="translated">getVirtualIndex</target>
        </trans-unit>
        <trans-unit id="24ddf2f2e28c0bae4968db35bba8f143d404783c" translate="yes" xml:space="preserve">
          <source>getVirtualMethods</source>
          <target state="translated">getVirtualMethods</target>
        </trans-unit>
        <trans-unit id="e77be57c79610b84542d4cd54abc14ae72b590b4" translate="yes" xml:space="preserve">
          <source>gives the number of code units processed</source>
          <target state="translated">처리 된 코드 단위 수를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="113913f856985a7871f6d8abfb20a98c72f9c371" translate="yes" xml:space="preserve">
          <source>globals.d</source>
          <target state="translated">globals.d</target>
        </trans-unit>
        <trans-unit id="6d2d7812933c0caaa1c3fd0ac21329b8571b1dc1" translate="yes" xml:space="preserve">
          <source>glue.d</source>
          <target state="translated">glue.d</target>
        </trans-unit>
        <trans-unit id="d1b013c81236b9afdc1d5e395046a71195f60186" translate="yes" xml:space="preserve">
          <source>gluelayer.d</source>
          <target state="translated">gluelayer.d</target>
        </trans-unit>
        <trans-unit id="2626668292e94187b32942821d7932ec86d5d407" translate="yes" xml:space="preserve">
          <source>grammatical construct &lt;code&gt;.&lt;/code&gt; (left side may be missing) when the rightmost side of the dot is a variable, field (direct or &lt;code&gt;static&lt;/code&gt;), function name, or invocation of a function that returns by reference;</source>
          <target state="translated">문법적 구성 &lt;code&gt;.&lt;/code&gt; 점의 가장 오른쪽이 변수, 필드 (직접 또는 &lt;code&gt;static&lt;/code&gt; ), 함수 이름 또는 참조로 반환되는 함수의 호출 인 경우 (왼쪽이 누락 될 수 있음) ;</target>
        </trans-unit>
        <trans-unit id="a314ae085ff525a96e8d655b6f31e4550219157e" translate="yes" xml:space="preserve">
          <source>graphically</source>
          <target state="translated">graphically</target>
        </trans-unit>
        <trans-unit id="8f10c18db3f9f217ce5b202a602ddc634eedd3b4" translate="yes" xml:space="preserve">
          <source>greater</source>
          <target state="translated">greater</target>
        </trans-unit>
        <trans-unit id="81d4129199f5b879d8657b0f2a41c995056ac4e5" translate="yes" xml:space="preserve">
          <source>greater or equal</source>
          <target state="translated">크거나 같음</target>
        </trans-unit>
        <trans-unit id="8126b19f2815053ff2aca18cefd3201c0cdb3aed" translate="yes" xml:space="preserve">
          <source>guaranteed to still have sub-second precision (just not as high as with &lt;code&gt;ClockType.normal&lt;/code&gt;).</source>
          <target state="translated">여전히 초 미만의 정밀도를 보장합니다 ( &lt;code&gt;ClockType.normal&lt;/code&gt; 만큼 높지 않음 ).</target>
        </trans-unit>
        <trans-unit id="ca91a9c618c050022ed0760873cbc29f79ba99a0" translate="yes" xml:space="preserve">
          <source>h.hhhhhh</source>
          <target state="translated">h.hhhhhh</target>
        </trans-unit>
        <trans-unit id="a5670df2182978501aac624cb2e3ff9eb6610b92" translate="yes" xml:space="preserve">
          <source>handle documentation comments</source>
          <target state="translated">문서 주석 처리</target>
        </trans-unit>
        <trans-unit id="6132d522d40d3c2405b4e1ece7cb7cd2ef06017c" translate="yes" xml:space="preserve">
          <source>handle returned by addInstance()</source>
          <target state="translated">addInstance ()에 의해 리턴 된 핸들</target>
        </trans-unit>
        <trans-unit id="31a81ec93db3740ee3984fc40e34a60b0412643d" translate="yes" xml:space="preserve">
          <source>handler</source>
          <target state="translated">handler</target>
        </trans-unit>
        <trans-unit id="db51761312a38e8aaa3b5d71458b75f4f4db2f0c" translate="yes" xml:space="preserve">
          <source>handling of contract inheritance</source>
          <target state="translated">계약 상속 처리</target>
        </trans-unit>
        <trans-unit id="96ee88576e78640c8a671809920ee8a52b5a8d18" translate="yes" xml:space="preserve">
          <source>has a &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;immutable&lt;/code&gt; or &lt;code&gt;shared&lt;/code&gt; storage class, then it is as if each member of the class was declared with that storage class. If a base class is const, immutable or shared, then all classes derived from it are also const, immutable or shared.</source>
          <target state="translated">갖는다 &lt;code&gt;const&lt;/code&gt; , &lt;code&gt;immutable&lt;/code&gt; 또는 &lt;code&gt;shared&lt;/code&gt; 클래스의 각 부재가 스토리지 클래스로 선언 된 경우로서 스토리지 클래스를 다음이다. 기본 클래스가 const, 불변 또는 공유 인 경우 기본 클래스에서 파생 된 모든 클래스도 const, 불변 또는 공유입니다.</target>
        </trans-unit>
        <trans-unit id="7cd0c946e10748b1e8bb736ca760049a9ee9d9e1" translate="yes" xml:space="preserve">
          <source>has a dual-context 'this' parameter</source>
          <target state="translated">이중 문맥 'this'매개 변수가 있습니다</target>
        </trans-unit>
        <trans-unit id="bcf3116218431ac0135e8f49127910c689c7df55" translate="yes" xml:space="preserve">
          <source>has a value which is a reference (address) to another object of type</source>
          <target state="translated">다른 유형의 객체에 대한 참조 (주소) 값을 가짐</target>
        </trans-unit>
        <trans-unit id="d3f9e5ec3ceb20b059f6b94f68041052a4292793" translate="yes" xml:space="preserve">
          <source>has an &lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt;, it is set to the type of that &lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt;. Otherwise, it defaults to type &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt; 이 있으면 해당 &lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt; 의 유형으로 설정됩니다 . 그렇지 않으면, 기본값은 &lt;code&gt;int&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="17c370bc5b91d99ff399a74752e5a21f06651a3f" translate="yes" xml:space="preserve">
          <source>has attribute pragma(crt_constructor(1)/crt_destructor(2))</source>
          <target state="translated">pragma (crt_constructor (1) / crt_destructor (2)) 속성이 있습니다</target>
        </trans-unit>
        <trans-unit id="bb9a5235ef3e378c249e646408d55085e24ec1ef" translate="yes" xml:space="preserve">
          <source>has different semantics if it is in a &lt;a href=&quot;unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;contracts&quot;&gt;&lt;code&gt;in&lt;/code&gt; contract&lt;/a&gt;.</source>
          <target state="translated">그것은 인 경우 다른 의미를 갖는다 &lt;a href=&quot;unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;contracts&quot;&gt; &lt;code&gt;in&lt;/code&gt; 계약&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="dd1ca51166dfabe172e4a49569574f93a4c744c7" translate="yes" xml:space="preserve">
          <source>has no parameters, the mixin form that has no !(</source>
          <target state="translated">매개 변수가없는 믹스 인 형식은 없습니다! (</target>
        </trans-unit>
        <trans-unit id="75d5d5fd147911bd358e3dd6cdcd70fff0f259e9" translate="yes" xml:space="preserve">
          <source>has no value; it is executed for its effects.</source>
          <target state="translated">가치가 없다. 그 효과를 위해 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="24eb3f19fcb0678a1972c887d2cc7814f42a94fd" translate="yes" xml:space="preserve">
          <source>has occurred and the program enters an</source>
          <target state="translated">발생했고 프로그램은</target>
        </trans-unit>
        <trans-unit id="f447384928be373da37fe3b93e2dd468c3ca628b" translate="yes" xml:space="preserve">
          <source>has same sign as value.</source>
          <target state="translated">값과 같은 부호를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="3d68145da53de6e36be00afb2e8cc24b48109ca5" translate="yes" xml:space="preserve">
          <source>hasCopyConstructor</source>
          <target state="translated">hasCopyConstructor</target>
        </trans-unit>
        <trans-unit id="b27f6ad8b68aabc4f890884fc8cdc2532d49fdab" translate="yes" xml:space="preserve">
          <source>hasMember</source>
          <target state="translated">hasMember</target>
        </trans-unit>
        <trans-unit id="69b6191bbd92ff73d2443189b34aa74a35f10e51" translate="yes" xml:space="preserve">
          <source>hasNonConstPointers is running</source>
          <target state="translated">hasNonConstPointers가 실행 중입니다</target>
        </trans-unit>
        <trans-unit id="8948990e72818f18606478951c6d7a50e45986c4" translate="yes" xml:space="preserve">
          <source>hasPostblit</source>
          <target state="translated">hasPostblit</target>
        </trans-unit>
        <trans-unit id="8b1303cc03f78d0fbe2f4efe9bdf5000d68f03d4" translate="yes" xml:space="preserve">
          <source>have relaxed semantic checks in that &lt;code&gt;pure&lt;/code&gt;, &lt;code&gt;@nogc&lt;/code&gt;, &lt;code&gt;nothrow&lt;/code&gt; and &lt;code&gt;@safe&lt;/code&gt; checks are not done. Neither do</source>
          <target state="translated">&lt;code&gt;pure&lt;/code&gt; , &lt;code&gt;@nogc&lt;/code&gt; , &lt;code&gt;nothrow&lt;/code&gt; 및 &lt;code&gt;@safe&lt;/code&gt; 확인이 수행되지 않았 으므로 의미 론적 검사가 완화 되었습니다. 둘 다</target>
        </trans-unit>
        <trans-unit id="8f0af858ab8dec1ae6ffb76d417cf738e7a56e00" translate="yes" xml:space="preserve">
          <source>have that type.</source>
          <target state="translated">그 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c90a983eb496a65dc53242ddece4a09c70fbbd1" translate="yes" xml:space="preserve">
          <source>hdrgen.d</source>
          <target state="translated">hdrgen.d</target>
        </trans-unit>
        <trans-unit id="76cffead8b715f86e4846df1765128e9b9c8a0e8" translate="yes" xml:space="preserve">
          <source>heap building blocks</source>
          <target state="translated">힙 빌딩 블록</target>
        </trans-unit>
        <trans-unit id="31a73f95c5de16ca83b9581f130507b6661fc161" translate="yes" xml:space="preserve">
          <source>heapSizeFactor:N - targeted heap size to used memory ratio</source>
          <target state="translated">heapSizeFactor : N-사용 된 메모리 비율에 대한 대상 힙 크기</target>
        </trans-unit>
        <trans-unit id="d0dadd78733c8bba2c20e8473473e3ee9a73902a" translate="yes" xml:space="preserve">
          <source>hex numbers are always two hexdigits([0-9a-fA-F])</source>
          <target state="translated">16 진수는 항상 2 개의 16 진수입니다 ([0-9a-fA-F])</target>
        </trans-unit>
        <trans-unit id="14f9a69d627678dad7afee0975f0e6c5dde0d432" translate="yes" xml:space="preserve">
          <source>hexData</source>
          <target state="translated">hexData</target>
        </trans-unit>
        <trans-unit id="a0863489d5b83d6020d036416f545b1539624e4b" translate="yes" xml:space="preserve">
          <source>hh:mm:ss</source>
          <target state="translated">hh:mm:ss</target>
        </trans-unit>
        <trans-unit id="99d72c7fc3e2e145870beab37c0b70e343ea9c3b" translate="yes" xml:space="preserve">
          <source>hidden</source>
          <target state="translated">hidden</target>
        </trans-unit>
        <trans-unit id="c3778900572082081b921cacb4abfdf2e724eb8d" translate="yes" xml:space="preserve">
          <source>hidden pointer passed to function</source>
          <target state="translated">숨겨진 포인터가 함수에 전달되었습니다.</target>
        </trans-unit>
        <trans-unit id="43c88f6f2c6e76a184d95f9dc52d4724577e0aa9" translate="yes" xml:space="preserve">
          <source>hold</source>
          <target state="translated">hold</target>
        </trans-unit>
        <trans-unit id="667d42d31384085cc2df1ab617a4dcd49ee49ddc" translate="yes" xml:space="preserve">
          <source>host found, key mismatch!</source>
          <target state="translated">호스트를 찾았습니다. 키가 일치하지 않습니다!</target>
        </trans-unit>
        <trans-unit id="612b42bf07803f29829c772e12a5bbd51f6c5c1a" translate="yes" xml:space="preserve">
          <source>host key files</source>
          <target state="translated">호스트 키 파일</target>
        </trans-unit>
        <trans-unit id="1f8f69cd80a7100e667a7df500b94d7cd3b464f7" translate="yes" xml:space="preserve">
          <source>hours since midnight [0-23]</source>
          <target state="translated">자정 이후의 시간 [0-23]</target>
        </trans-unit>
        <trans-unit id="0b064373fb4dd7356db6e83ec9c39e31ba9c335c" translate="yes" xml:space="preserve">
          <source>how</source>
          <target state="translated">how</target>
        </trans-unit>
        <trans-unit id="ed1e2f5d50f8bd7caf98fb42728563a0e6daa0bf" translate="yes" xml:space="preserve">
          <source>how many new elements to extend it with</source>
          <target state="translated">확장 할 새로운 요소 수</target>
        </trans-unit>
        <trans-unit id="b5d13a9715bb7e8e61c07ae4e189cd9dbba74c4a" translate="yes" xml:space="preserve">
          <source>human readable string</source>
          <target state="translated">사람이 읽을 수있는 문자열</target>
        </trans-unit>
        <trans-unit id="f5e9135db4eed28acce19591faa3338e73336d30" translate="yes" xml:space="preserve">
          <source>hypot(x, y)</source>
          <target state="translated">hypot (x, y)</target>
        </trans-unit>
        <trans-unit id="042dc4512fa3d391c5170cf3aa61e6a638f84342" translate="yes" xml:space="preserve">
          <source>i</source>
          <target state="translated">i</target>
        </trans-unit>
        <trans-unit id="c909b47681a5667facac14437c71719b4c69f777" translate="yes" xml:space="preserve">
          <source>i (on input)</source>
          <target state="translated">i (입력시)</target>
        </trans-unit>
        <trans-unit id="00aed9628be93e39a7798567d8a495c9429edea6" translate="yes" xml:space="preserve">
          <source>i (on return)</source>
          <target state="translated">나는 (복귀)</target>
        </trans-unit>
        <trans-unit id="6413e837d316aafcf260786cd21a849f88ae3069" translate="yes" xml:space="preserve">
          <source>iOS</source>
          <target state="translated">iOS</target>
        </trans-unit>
        <trans-unit id="42bef156b68e80c3b2e2d7f1e6bc5960bb10702e" translate="yes" xml:space="preserve">
          <source>iasm.d</source>
          <target state="translated">iasm.d</target>
        </trans-unit>
        <trans-unit id="79fa41f0ef2186d5ea28aefc95663451057ebe09" translate="yes" xml:space="preserve">
          <source>iasmdmd.d</source>
          <target state="translated">iasmdmd.d</target>
        </trans-unit>
        <trans-unit id="a1eba7cfd630be724d6ddbe935028bb0a2e65eb0" translate="yes" xml:space="preserve">
          <source>iasmgcc.d</source>
          <target state="translated">iasmgcc.d</target>
        </trans-unit>
        <trans-unit id="ee21ddf7ec5db073a36abb47a297ad5fabb47ef8" translate="yes" xml:space="preserve">
          <source>id.d</source>
          <target state="translated">id.d</target>
        </trans-unit>
        <trans-unit id="c31a910e9556bb578dd5b9f062cfd9b376a2cb16" translate="yes" xml:space="preserve">
          <source>ident ...</source>
          <target state="translated">정체성 ...</target>
        </trans-unit>
        <trans-unit id="f8d2387ec313b1422791aba01c9fb56bc43473a8" translate="yes" xml:space="preserve">
          <source>ident : specType = defaultType</source>
          <target state="translated">ident : specType = defaultType</target>
        </trans-unit>
        <trans-unit id="fae9fd39301eb7e657d4dad32a828cda5d7399e5" translate="yes" xml:space="preserve">
          <source>identifier</source>
          <target state="translated">identifier</target>
        </trans-unit>
        <trans-unit id="6ce9bdb65316990c9871b2f896dbf51b94d7906a" translate="yes" xml:space="preserve">
          <source>identifier being checked (ident[$] must be '\0')</source>
          <target state="translated">확인중인 식별자 (ident [$]는 '\ 0'이어야 함)</target>
        </trans-unit>
        <trans-unit id="49c868cc7b455da6ad24a9dd89f96321ac4640f2" translate="yes" xml:space="preserve">
          <source>identifier being used</source>
          <target state="translated">사용중인 식별자</target>
        </trans-unit>
        <trans-unit id="137c2d59451eca06908d4456dc16fbf6b351a671" translate="yes" xml:space="preserve">
          <source>identifier to add</source>
          <target state="translated">추가 할 식별자</target>
        </trans-unit>
        <trans-unit id="6dfd82e4b1d5500ff9a0635e6551fd0e71c679d8" translate="yes" xml:space="preserve">
          <source>identifier to add (ident[$] must be '\0')</source>
          <target state="translated">추가 할 식별자 (ident [$]는 '\ 0'이어야 함)</target>
        </trans-unit>
        <trans-unit id="a47c045f7eb51bbc1e1a92fa3b84f23ac14f335d" translate="yes" xml:space="preserve">
          <source>identifier to check for specialness</source>
          <target state="translated">특수성을 확인하는 식별자</target>
        </trans-unit>
        <trans-unit id="c4241dac6b25abe7a36623e96c84209ee8740738" translate="yes" xml:space="preserve">
          <source>identifier to search for</source>
          <target state="translated">검색 할 식별자</target>
        </trans-unit>
        <trans-unit id="a3aaf5ca79dfae627b15ae453cb1d3f50c7c1b5c" translate="yes" xml:space="preserve">
          <source>identifier.d</source>
          <target state="translated">identifier.d</target>
        </trans-unit>
        <trans-unit id="958f57f57d72a30f329ee5538f21b0257a49a46e" translate="yes" xml:space="preserve">
          <source>if</source>
          <target state="translated">if</target>
        </trans-unit>
        <trans-unit id="2ca54905ab1ba49d45815cf1c3488a6edd27fe24" translate="yes" xml:space="preserve">
          <source>if != 0 offset to DCatchInfo data from start of table</source>
          <target state="translated">! = 0이 테이블 시작에서 DCatchInfo 데이터로 오프셋 된 경우</target>
        </trans-unit>
        <trans-unit id="a07594fc7982f5a26fb642cb79520d97e7666312" translate="yes" xml:space="preserve">
          <source>if !=NULL, then this is the type of the 'introducing' function this one is overriding</source>
          <target state="translated">! = NULL 인 경우이 함수는이 함수가 재정의하는 '소개'함수의 유형입니다.</target>
        </trans-unit>
        <trans-unit id="3cd33fd6ad562dc1c42759596294ce7de5a189fc" translate="yes" xml:space="preserve">
          <source>if !NULL, the 'this' pointer argument</source>
          <target state="translated">! NULL 인 경우 'this'포인터 인수</target>
        </trans-unit>
        <trans-unit id="a29f7408721b4ad8087a94b8f5ecef6131c161a9" translate="yes" xml:space="preserve">
          <source>if !NULL, the &lt;code&gt;this&lt;/code&gt; argument type</source>
          <target state="translated">! NULL 인 경우 &lt;code&gt;this&lt;/code&gt; 인수 유형</target>
        </trans-unit>
        <trans-unit id="2d5b067ea96f5d9bb9bd5e3ca5b6c562a7b60d0d" translate="yes" xml:space="preserve">
          <source>if !null, then t converted to C type</source>
          <target state="translated">! null 인 경우 t는 C 유형으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="95ecfc403c5ddbe3178ca2984d29ad92bb7ff771" translate="yes" xml:space="preserve">
          <source>if &lt;code&gt;true&lt;/code&gt; searches overload set</source>
          <target state="translated">만약 &lt;code&gt;true&lt;/code&gt; 검색 과부하 세트</target>
        </trans-unit>
        <trans-unit id="51ad24abd5a50b9895bf5cf4837720c3a40aea03" translate="yes" xml:space="preserve">
          <source>if CTFE needs to be run on this, such as if it is the initializer for a const declaration</source>
          <target state="translated">CTFE가 const 선언의 초기화 프로그램과 같이 CTFE를 실행 해야하는 경우</target>
        </trans-unit>
        <trans-unit id="8e11b2f46f408acd329596de49e2940eb8fc0c58" translate="yes" xml:space="preserve">
          <source>if a handler encloses a cleanup, prefer the handler</source>
          <target state="translated">처리기가 정리를 묶는 경우 처리기를 선호합니다.</target>
        </trans-unit>
        <trans-unit id="332bed221cd234bb69fd0dfc38543ab7bb57760e" translate="yes" xml:space="preserve">
          <source>if access is read-only</source>
          <target state="translated">액세스가 읽기 전용 인 경우</target>
        </trans-unit>
        <trans-unit id="519b8753e616d5686c1120a566576da7af42c457" translate="yes" xml:space="preserve">
          <source>if all the &lt;a href=&quot;expression#AssertExpression&quot;&gt;&lt;i&gt;AssertExpression&lt;/i&gt;&lt;/a&gt;s within the invariant that are executed succeed.</source>
          <target state="translated">불변의 모든 &lt;a href=&quot;expression#AssertExpression&quot;&gt;&lt;i&gt;AssertExpression&lt;/i&gt;&lt;/a&gt; 이 실행되는 경우</target>
        </trans-unit>
        <trans-unit id="f76bd88432ab5ac6e315c4c239388941a56b13ff" translate="yes" xml:space="preserve">
          <source>if any fields have an &lt;code&gt;opEquals()&lt;/code&gt;</source>
          <target state="translated">필드에 &lt;code&gt;opEquals()&lt;/code&gt; 가있는 경우</target>
        </trans-unit>
        <trans-unit id="5f25c7566db4236fdb2538a90ea8b76ee0db55fb" translate="yes" xml:space="preserve">
          <source>if flag &amp;amp; 1, don't report &quot;not a property&quot; error and just return NULL.</source>
          <target state="translated">플래그 &amp;amp; 1 인 경우 &quot;속성 아님&quot;오류를보고하지 않고 NULL 만 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c1b28e1cfff244d58cc606e57b8d96ce82cb4403" translate="yes" xml:space="preserve">
          <source>if foreach body, this is the foreach</source>
          <target state="translated">foreach 몸이라면, 이것은 foreach입니다</target>
        </trans-unit>
        <trans-unit id="1d10be46d75cc2babee5164ddb1363628f9eb60a" translate="yes" xml:space="preserve">
          <source>if found, filename combined with path, otherwise null</source>
          <target state="translated">발견되면, 파일 이름이 경로와 결합되고, 그렇지 않으면 null</target>
        </trans-unit>
        <trans-unit id="f45144fcbb800c7181387014e3de98fa175b798e" translate="yes" xml:space="preserve">
          <source>if found, returns FuncDeclaration of opAssign, otherwise null</source>
          <target state="translated">발견되면 opAssign의 FuncDeclaration을 반환하고, 그렇지 않으면 null</target>
        </trans-unit>
        <trans-unit id="d5f6b65a5833c8d6ec13804f924d415d30b16d54" translate="yes" xml:space="preserve">
          <source>if generating a header file</source>
          <target state="translated">헤더 파일을 생성하는 경우</target>
        </trans-unit>
        <trans-unit id="3b76b8d7827911f12ad755bfe75eaff2a3489d16" translate="yes" xml:space="preserve">
          <source>if invalid UTF, return &lt;code&gt;replacementDchar&lt;/code&gt; rather than throwing</source>
          <target state="translated">UTF가 유효하지 않은 경우, 던지기보다는 &lt;code&gt;replacementDchar&lt;/code&gt; 를 반환하십시오.</target>
        </trans-unit>
        <trans-unit id="4fe8127c3f8fff9177841e6096c0c7d1993aab0e" translate="yes" xml:space="preserve">
          <source>if invalid UTF, return replacementDchar rather than throwing</source>
          <target state="translated">UTF가 유효하지 않은 경우, 던지기보다는 replacementDchar를 반환하십시오.</target>
        </trans-unit>
        <trans-unit id="3284e4b4b19e1969e8d66af6e8f8c922b09b8643" translate="yes" xml:space="preserve">
          <source>if key was in the aa, a mutable pointer to the existing value. If key was not in the aa, a mutable pointer to newly inserted value which is set to all zeros</source>
          <target state="translated">키가 aa에 있으면 기존 값을 변경할 수있는 포인터입니다. 키가 aa에 없으면 새로 삽입 된 값에 대한 가변 포인터가 모두 0으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="61784626b16ee7547e065517a95ee91cbafb221b" translate="yes" xml:space="preserve">
          <source>if match is found, then function symbol, else null</source>
          <target state="translated">일치하는 것이 있으면 함수 기호, 그렇지 않으면 null</target>
        </trans-unit>
        <trans-unit id="409ce75ba96143ba6bd6653bf1308de1919673cf" translate="yes" xml:space="preserve">
          <source>if not &lt;code&gt;null&lt;/code&gt;, type to coerce expression to</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 이 아닌 경우 식을 강제 변환하려면 입력</target>
        </trans-unit>
        <trans-unit id="5eb02e3e3c4a6bf6ee6ce4aced1ecaf59fab82af" translate="yes" xml:space="preserve">
          <source>if not null expression to test (not evaluated, but converted to a string)</source>
          <target state="translated">테스트 할 null 표현식이 아닌 경우 (평가되지 않지만 문자열로 변환 됨)</target>
        </trans-unit>
        <trans-unit id="5a813420f87098cb56d2f5ee5fe4b07e2ea22b4f" translate="yes" xml:space="preserve">
          <source>if not null then informative message string</source>
          <target state="translated">널이 아닌 경우 정보 메시지 문자열</target>
        </trans-unit>
        <trans-unit id="1a15901d28cea22cb6d9e0faecd0ed5beff6ef1d" translate="yes" xml:space="preserve">
          <source>if not null then informative message to be computed at run time</source>
          <target state="translated">널이 아닌 경우 런타임에 정보 메시지를 계산합니다.</target>
        </trans-unit>
        <trans-unit id="436fa63ae1cb4820538f4d67f89b7b1360769446" translate="yes" xml:space="preserve">
          <source>if not null, is set to the operator that was actually overloaded, which may not be &lt;code&gt;e.op&lt;/code&gt;. Happens when operands are reversed to to match an overload</source>
          <target state="translated">null이 아닌 경우 실제로 오버로드 된 연산자로 설정되며 &lt;code&gt;e.op&lt;/code&gt; 가 아닐 수 있습니다 . 피연산자가 오버로드와 일치하도록 반전 될 때 발생</target>
        </trans-unit>
        <trans-unit id="99c6c40a970b3a7cdd45ddca489c16993facb665" translate="yes" xml:space="preserve">
          <source>if not null, pointer to finally code to execute</source>
          <target state="translated">null이 아닌 경우, 마지막으로 실행할 코드를 가리키는 포인터</target>
        </trans-unit>
        <trans-unit id="501dbc9d049e0633733fdb4f205a33d9e62c51e5" translate="yes" xml:space="preserve">
          <source>if not null, store STCxxxx which would make it covariant</source>
          <target state="translated">널이 아닌 경우 STCxxxx를 저장하여 공변량으로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="8cff7400ba11f5736360f3fd2777e313e3ceba38" translate="yes" xml:space="preserve">
          <source>if not null, store resulting expression here</source>
          <target state="translated">널이 아닌 경우 결과 표현식을 여기에 저장하십시오.</target>
        </trans-unit>
        <trans-unit id="775ff6242415a51ec6a1ba5110b1fa2a03f0f19f" translate="yes" xml:space="preserve">
          <source>if one field name has more than one file, this link should link to following files</source>
          <target state="translated">하나의 필드 이름에 둘 이상의 파일이있는 경우이 링크는 다음 파일에 링크되어야합니다.</target>
        </trans-unit>
        <trans-unit id="45af8c2bdd59d07bc362cfb5092e433c4e549960" translate="yes" xml:space="preserve">
          <source>if present, the maximum number of bytes to read</source>
          <target state="translated">존재하는 경우 읽을 최대 바이트 수</target>
        </trans-unit>
        <trans-unit id="825297a68e4cafd863cf02c0eca4ded6ef6545c4" translate="yes" xml:space="preserve">
          <source>if splitting of data transfer is enabled, this callback is called before download of an individual chunk started. Note that parameter &quot;remains&quot; works only for FTP wildcard downloading (for now), otherwise is not used</source>
          <target state="translated">데이터 전송 분할이 활성화 된 경우 개별 청크 다운로드가 시작되기 전에이 콜백이 호출됩니다. 매개 변수 &quot;remains&quot;는 FTP 와일드 카드 다운로드 (현재)에만 작동하며, 그렇지 않으면 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ef26b5af891ebe255e9d3ddc5fc66d443b6e9e4f" translate="yes" xml:space="preserve">
          <source>if the file is no symlink, getLinkAttributes behaves like getAttributes</source>
          <target state="translated">파일이 심볼릭 링크가 아닌 경우 getLinkAttributes는 getAttributes와 같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="ba82086f32c8eef89db349f0b3f7f1bccb15edcc" translate="yes" xml:space="preserve">
          <source>if the first port is occupied then try this many port number forwards</source>
          <target state="translated">첫 번째 포트가 사용 중이면이 많은 포트 번호를 전달해보십시오.</target>
        </trans-unit>
        <trans-unit id="bbd18544a7b1d8d8e6b427dd917d8fa8f3104007" translate="yes" xml:space="preserve">
          <source>if the function call has explicit 'this' expression</source>
          <target state="translated">함수 호출에 명시적인 'this'표현식이있는 경우</target>
        </trans-unit>
        <trans-unit id="7977b41c070297e5496dbd45f3621c5568cdc986" translate="yes" xml:space="preserve">
          <source>if the function is callable in a &lt;code&gt;nothrow&lt;/code&gt; scope.</source>
          <target state="translated">&lt;code&gt;nothrow&lt;/code&gt; 범위 에서 함수를 호출 할 수있는 경우</target>
        </trans-unit>
        <trans-unit id="2ec752b248b6840dc7ed4577a9c90172fe735ff9" translate="yes" xml:space="preserve">
          <source>if the number of arguments doesn't match the number of format parameters and vice-versa.</source>
          <target state="translated">인수의 수가 형식 매개 변수의 수와 일치하지 않으면 반대의 경우도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="649c4071588d59f78afef7f10b8b3ac580e9be14" translate="yes" xml:space="preserve">
          <source>if the postblit is callable in a &lt;code&gt;nothrow&lt;/code&gt; scope, if it exist. if it does not exist, return true.</source>
          <target state="translated">postblit는 호출의 경우 &lt;code&gt;nothrow&lt;/code&gt; 의 범위는 존재할 경우. 존재하지 않으면 true를 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="d326395521339a4e7faa43685fcd4c4cda09e05e" translate="yes" xml:space="preserve">
          <source>if the struct defines a copy constructor, the type of the destination</source>
          <target state="translated">구조체가 복사 생성자를 정의하면 대상의 유형</target>
        </trans-unit>
        <trans-unit id="870e722a7b08e77ff510dda5ddc2fe52bad6a0a2" translate="yes" xml:space="preserve">
          <source>if this is a C++ class, this is the slot reserved for the virtual destructor</source>
          <target state="translated">이것이 C ++ 클래스 인 경우 가상 소멸자를 위해 예약 된 슬롯입니다.</target>
        </trans-unit>
        <trans-unit id="feab7f9627e93018aff0a397d2c9a669ea0b7c9d" translate="yes" xml:space="preserve">
          <source>if this is true, use the StructDeclaration's init symbol</source>
          <target state="translated">이것이 사실이라면 StructDeclaration의 초기화 기호를 사용하십시오</target>
        </trans-unit>
        <trans-unit id="d632a1f1f7da305cadd5d8f546d5401f880c8801" translate="yes" xml:space="preserve">
          <source>if true, build new temporary variable even if e is trivial.</source>
          <target state="translated">참이면 e가 사소한 경우에도 새로운 임시 변수를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="8fbed1d5aa6205bf5390a9071dc387800400ced2" translate="yes" xml:space="preserve">
          <source>if true, return &lt;code&gt;null&lt;/code&gt; instead of throwing an error</source>
          <target state="translated">true 인 경우 오류를 발생시키는 대신 &lt;code&gt;null&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="211168e6da3a680711d2ea2994177a194a2aeca2" translate="yes" xml:space="preserve">
          <source>if virtual, but only appears in base interface vtbl[]</source>
          <target state="translated">가상 인 경우 기본 인터페이스 vtbl []에만 나타남</target>
        </trans-unit>
        <trans-unit id="17d1bbd5a5151259dc7cdc15eae74fdd759a1c2c" translate="yes" xml:space="preserve">
          <source>if yes and fn contains a folder name, this folder will be created.</source>
          <target state="translated">예이고 fn에 폴더 이름이 있으면이 폴더가 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="5b417cdbcc42280c36e9127f761ab6e6e81ef2c8" translate="yes" xml:space="preserve">
          <source>if you ever get this, you're in deep sh*t</source>
          <target state="translated">당신이 이것을 얻는다면, 당신은 깊은 sh * t에있어</target>
        </trans-unit>
        <trans-unit id="ee1c009e739422e31e9b8751d38140479224ffe9" translate="yes" xml:space="preserve">
          <source>iff</source>
          <target state="translated">iff</target>
        </trans-unit>
        <trans-unit id="25e5a392c2d1eaae040113071531d72250d11fed" translate="yes" xml:space="preserve">
          <source>ignore Content-Length</source>
          <target state="translated">콘텐츠 길이 무시</target>
        </trans-unit>
        <trans-unit id="0121bc05e0945dfa630b80cba86e207b6d4ca829" translate="yes" xml:space="preserve">
          <source>ignored</source>
          <target state="translated">ignored</target>
        </trans-unit>
        <trans-unit id="d20779326906f6893f2e6b7f5f2ae42eb0a4e886" translate="yes" xml:space="preserve">
          <source>ilogb(x)</source>
          <target state="translated">ilogb(x)</target>
        </trans-unit>
        <trans-unit id="ac2f11967ff6801ab9cbad10f2aff789bef42cbd" translate="yes" xml:space="preserve">
          <source>imaginary double</source>
          <target state="translated">허수의 두 배</target>
        </trans-unit>
        <trans-unit id="0f96f53583de89f0d9554d31e85b700adaacf50e" translate="yes" xml:space="preserve">
          <source>imaginary float</source>
          <target state="translated">허수</target>
        </trans-unit>
        <trans-unit id="5166ced8a579a38a845f88d5673146d61ff8017a" translate="yes" xml:space="preserve">
          <source>imaginary part</source>
          <target state="translated">허수 부</target>
        </trans-unit>
        <trans-unit id="408d3ac427f755393e1bc321d874090ee5dc0730" translate="yes" xml:space="preserve">
          <source>imaginary real</source>
          <target state="translated">상상의 실제</target>
        </trans-unit>
        <trans-unit id="f151405db06abfb3ecc7537defbba6abb0234fcf" translate="yes" xml:space="preserve">
          <source>immediately halting via execution of a special CPU instruction</source>
          <target state="translated">특수 CPU 명령의 실행을 통해 즉시 정지</target>
        </trans-unit>
        <trans-unit id="faf6664cc839329d7bc696207fa32b7d381e0afc" translate="yes" xml:space="preserve">
          <source>immutable Endian &lt;strong id=&quot;endian&quot;&gt;endian&lt;/strong&gt;;</source>
          <target state="translated">불변 엔디안 &lt;strong id=&quot;endian&quot;&gt;엔디안&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="7bed240368d22eee7031030851cedfb6727278de" translate="yes" xml:space="preserve">
          <source>immutable ImmutableRange &lt;strong id=&quot;lowerBound&quot;&gt;lowerBound&lt;/strong&gt;(Elem e);</source>
          <target state="translated">불변 ImmutableRange &lt;strong id=&quot;lowerBound&quot;&gt;lowerBound&lt;/strong&gt; (Elem e);</target>
        </trans-unit>
        <trans-unit id="419908045e188630cfd97218b8b8776510c9a949" translate="yes" xml:space="preserve">
          <source>immutable ImmutableRange &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;();</source>
          <target state="translated">불변 ImmutableRange &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="72fa1fff75775b6f7c6cfe0d89142409635b7dfc" translate="yes" xml:space="preserve">
          <source>immutable ImmutableRange &lt;strong id=&quot;upperBound&quot;&gt;upperBound&lt;/strong&gt;(Elem e);</source>
          <target state="translated">불변 ImmutableRange &lt;strong id=&quot;upperBound&quot;&gt;upperBound&lt;/strong&gt; (Elem e);</target>
        </trans-unit>
        <trans-unit id="cb82881cba050d9a5558c90744df4f67f57ded88" translate="yes" xml:space="preserve">
          <source>immutable OS &lt;strong id=&quot;os&quot;&gt;os&lt;/strong&gt;;</source>
          <target state="translated">불변 OS &lt;strong id=&quot;os&quot;&gt;OS&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="f8fa86b6308549d682d75c313aebcd281d541ccf" translate="yes" xml:space="preserve">
          <source>immutable Tuple!(BOM, &quot;schema&quot;, ubyte[], &quot;sequence&quot;)[] &lt;strong id=&quot;bomTable&quot;&gt;bomTable&lt;/strong&gt;;</source>
          <target state="translated">불변의 터플! (BOM, &quot;schema&quot;, ubyte [], &quot;sequence&quot;) [] &lt;strong id=&quot;bomTable&quot;&gt;bomTable&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="68b18f19c9b869735654a553ad46c94f634c609d" translate="yes" xml:space="preserve">
          <source>immutable Vendor &lt;strong id=&quot;vendor&quot;&gt;vendor&lt;/strong&gt;;</source>
          <target state="translated">불변의 벤더 &lt;strong id=&quot;vendor&quot;&gt;벤더&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="e12fec0be105a76c6845bb35b54e80ccc67ed4d7" translate="yes" xml:space="preserve">
          <source>immutable bool &lt;strong id=&quot;hasErrors&quot;&gt;hasErrors&lt;/strong&gt;();</source>
          <target state="translated">불변 부울 &lt;strong id=&quot;hasErrors&quot;&gt;hasErrors&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="48346773ed93de0d771fca9eb39a36348753e872" translate="yes" xml:space="preserve">
          <source>immutable bool &lt;strong id=&quot;hasWarnings&quot;&gt;hasWarnings&lt;/strong&gt;();</source>
          <target state="translated">불변의 bool &lt;strong id=&quot;hasWarnings&quot;&gt;hasWarnings&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="25b09e80160ccb6a0bedbd4c7ca3410b9bf9140c" translate="yes" xml:space="preserve">
          <source>immutable int &lt;strong id=&quot;_aaVersion&quot;&gt;_aaVersion&lt;/strong&gt;;</source>
          <target state="translated">불변의 int &lt;strong id=&quot;_aaVersion&quot;&gt;_aaVersion&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="075384234928a7464cb59049d7d745af6648d431" translate="yes" xml:space="preserve">
          <source>immutable int &lt;strong id=&quot;status&quot;&gt;status&lt;/strong&gt;;</source>
          <target state="translated">불변의 int &lt;strong id=&quot;status&quot;&gt;상태&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="d91c7d037f5a416e8a09abd9f7217522f8eb793e" translate="yes" xml:space="preserve">
          <source>immutable pure @safe this(Duration utcOffset, string stdName = &quot;&quot;);</source>
          <target state="translated">불변의 순수한 @safe this (Duration utcOffset, string stdName = &quot;&quot;);</target>
        </trans-unit>
        <trans-unit id="f06b7e39cbd30afa5445ba9d238ea8174c38711f" translate="yes" xml:space="preserve">
          <source>immutable size_t &lt;strong id=&quot;pageSize&quot;&gt;pageSize&lt;/strong&gt;;</source>
          <target state="translated">변경 불가능한 size_t &lt;strong id=&quot;pageSize&quot;&gt;pageSize&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="183cff4984d8af1f897689feded3b89cd2101208" translate="yes" xml:space="preserve">
          <source>immutable size_t[pointerBitmap.length] &lt;strong id=&quot;RTInfoImpl&quot;&gt;RTInfoImpl&lt;/strong&gt;(size_t[] pointerBitmap);</source>
          <target state="translated">불변의 size_t [pointerBitmap.length] &lt;strong id=&quot;RTInfoImpl&quot;&gt;RTInfoImpl&lt;/strong&gt; (size_t [] pointerBitmap);</target>
        </trans-unit>
        <trans-unit id="a508741c57f48d33898e663f30820742ed2e8038" translate="yes" xml:space="preserve">
          <source>immutable string &lt;strong id=&quot;digits&quot;&gt;digits&lt;/strong&gt;;</source>
          <target state="translated">불변 문자열 &lt;strong id=&quot;digits&quot;&gt;숫자&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="e36f613c20b1099cd7e9e9e9f4d760a31673cfaa" translate="yes" xml:space="preserve">
          <source>immutable string &lt;strong id=&quot;fullHexDigits&quot;&gt;fullHexDigits&lt;/strong&gt;;</source>
          <target state="translated">불변 문자열 &lt;strong id=&quot;fullHexDigits&quot;&gt;fullHexDigits&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="8c3c66922bd32bc9feeef107aea7afc33d8ee01e" translate="yes" xml:space="preserve">
          <source>immutable string &lt;strong id=&quot;hexDigits&quot;&gt;hexDigits&lt;/strong&gt;;</source>
          <target state="translated">불변 문자열 &lt;strong id=&quot;hexDigits&quot;&gt;hexDigits&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="f2a7e0e692ef586008aac68b9d668cf41d0614ba" translate="yes" xml:space="preserve">
          <source>immutable string &lt;strong id=&quot;letters&quot;&gt;letters&lt;/strong&gt;;</source>
          <target state="translated">불변 문자열 &lt;strong id=&quot;letters&quot;&gt;문자&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="8cd6bc725ae9c8cbea041e045808446bbd6ed1b2" translate="yes" xml:space="preserve">
          <source>immutable string &lt;strong id=&quot;lowerHexDigits&quot;&gt;lowerHexDigits&lt;/strong&gt;;</source>
          <target state="translated">불변 문자열 &lt;strong id=&quot;lowerHexDigits&quot;&gt;lowerHexDigits&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="e8c071987af128ab6cdf9d8870a2ad823e257368" translate="yes" xml:space="preserve">
          <source>immutable string &lt;strong id=&quot;lowercase&quot;&gt;lowercase&lt;/strong&gt;;</source>
          <target state="translated">불변 문자열 &lt;strong id=&quot;lowercase&quot;&gt;소문자&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="147a9249e2cb3e04dcd634c1184f88e5f1167c9b" translate="yes" xml:space="preserve">
          <source>immutable string &lt;strong id=&quot;name&quot;&gt;name&lt;/strong&gt;;</source>
          <target state="translated">불변 문자열 &lt;strong id=&quot;name&quot;&gt;이름&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="14848336efdb370ca640013a45141b290b19e11b" translate="yes" xml:space="preserve">
          <source>immutable string &lt;strong id=&quot;newline&quot;&gt;newline&lt;/strong&gt;;</source>
          <target state="translated">불변 문자열 &lt;strong id=&quot;newline&quot;&gt;개행&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="5f18916086044e9398b42666ca0fbba1641686c2" translate="yes" xml:space="preserve">
          <source>immutable string &lt;strong id=&quot;octalDigits&quot;&gt;octalDigits&lt;/strong&gt;;</source>
          <target state="translated">불변 문자열 &lt;strong id=&quot;octalDigits&quot;&gt;octalDigits&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="65380df690620eeb1bff3da5f20008d09861776a" translate="yes" xml:space="preserve">
          <source>immutable string &lt;strong id=&quot;uppercase&quot;&gt;uppercase&lt;/strong&gt;;</source>
          <target state="translated">불변 문자열 &lt;strong id=&quot;uppercase&quot;&gt;대문자&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="ff2a711d6dbb2daef11318ee4cb50e8d82e8eeb9" translate="yes" xml:space="preserve">
          <source>immutable string &lt;strong id=&quot;whitespace&quot;&gt;whitespace&lt;/strong&gt;;</source>
          <target state="translated">불변 문자열 &lt;strong id=&quot;whitespace&quot;&gt;공백&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="cda99ae2d2c07d6c7cdfe4ced4174c2b057476d7" translate="yes" xml:space="preserve">
          <source>immutable string[] &lt;strong id=&quot;timeStrings&quot;&gt;timeStrings&lt;/strong&gt;;</source>
          <target state="translated">불변 문자열 [] &lt;strong id=&quot;timeStrings&quot;&gt;timeStrings&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="36147238dd06cb318441a676ea19443fba982509" translate="yes" xml:space="preserve">
          <source>immutable ubyte[OPMAX] &lt;strong id=&quot;opcost&quot;&gt;opcost&lt;/strong&gt;;</source>
          <target state="translated">불변 ubyte [OPMAX] &lt;strong id=&quot;opcost&quot;&gt;opcost&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="fd3f6ca3dfa9c29ddb3c6ad456341d2926b736e1" translate="yes" xml:space="preserve">
          <source>immutable ubyte[OPMAX] &lt;strong id=&quot;optab1&quot;&gt;optab1&lt;/strong&gt;;</source>
          <target state="translated">불변 ubyte [OPMAX] &lt;strong id=&quot;optab1&quot;&gt;optab1&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="1fc824b11a42823a8ef842707f5461bf46ca04a2" translate="yes" xml:space="preserve">
          <source>immutable ubyte[OPMAX] &lt;strong id=&quot;optab2&quot;&gt;optab2&lt;/strong&gt;;</source>
          <target state="translated">불변의 ubyte [OPMAX] &lt;strong id=&quot;optab2&quot;&gt;optab2&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="a54901dbd753455e7e8b49f376eab3836512e219" translate="yes" xml:space="preserve">
          <source>immutable ubyte[OPMAX] &lt;strong id=&quot;optab3&quot;&gt;optab3&lt;/strong&gt;;</source>
          <target state="translated">불변의 ubyte [OPMAX] &lt;strong id=&quot;optab3&quot;&gt;optab3&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="b71004f64bb3dac72a4a63af72ff8f8f039f39a8" translate="yes" xml:space="preserve">
          <source>immutable ubyte[RELMAX] &lt;strong id=&quot;_rel_exception&quot;&gt;_rel_exception&lt;/strong&gt;;</source>
          <target state="translated">불변의 ubyte [RELMAX] &lt;strong id=&quot;_rel_exception&quot;&gt;_rel_exception&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="6ba99c3a576a2202579545db485350038c8a3435" translate="yes" xml:space="preserve">
          <source>immutable ubyte[RELMAX] &lt;strong id=&quot;_rel_integral&quot;&gt;_rel_integral&lt;/strong&gt;;</source>
          <target state="translated">불변 ubyte [RELMAX] &lt;strong id=&quot;_rel_integral&quot;&gt;_rel_integral&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="780f068c998e2534723578a9bacee4751ee4e0d7" translate="yes" xml:space="preserve">
          <source>immutable ubyte[RELMAX] &lt;strong id=&quot;_rel_not&quot;&gt;_rel_not&lt;/strong&gt;;</source>
          <target state="translated">불변의 ubyte [RELMAX] &lt;strong id=&quot;_rel_not&quot;&gt;_rel_not&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="aa6a9e1da95e83d4f9a9cce762a68d13c90ace41" translate="yes" xml:space="preserve">
          <source>immutable ubyte[RELMAX] &lt;strong id=&quot;_rel_swap&quot;&gt;_rel_swap&lt;/strong&gt;;</source>
          <target state="translated">불변의 ubyte [RELMAX] &lt;strong id=&quot;_rel_swap&quot;&gt;_rel_swap&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="2cb88ea3bc3bbea7030e4c9dc88ec0fd2558c0c0" translate="yes" xml:space="preserve">
          <source>immutable ubyte[RELMAX] &lt;strong id=&quot;_rel_unord&quot;&gt;_rel_unord&lt;/strong&gt;;</source>
          <target state="translated">불변의 ubyte [RELMAX] &lt;strong id=&quot;_rel_unord&quot;&gt;_rel_unord&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="937b5c3ebc7100a3fb5f664925d330eacec2255a" translate="yes" xml:space="preserve">
          <source>immutable uint &lt;strong id=&quot;D_major&quot;&gt;D_major&lt;/strong&gt;;</source>
          <target state="translated">불변의 uint &lt;strong id=&quot;D_major&quot;&gt;D_major&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="0d3ce40ddb58680a54e1241d5985d64863f4663c" translate="yes" xml:space="preserve">
          <source>immutable uint &lt;strong id=&quot;errno&quot;&gt;errno&lt;/strong&gt;;</source>
          <target state="translated">불변의 uint &lt;strong id=&quot;errno&quot;&gt;errno&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="4f507ee2b4ca53e56f37565d13ad6825df3a780a" translate="yes" xml:space="preserve">
          <source>immutable uint &lt;strong id=&quot;errors&quot;&gt;errors&lt;/strong&gt;;</source>
          <target state="translated">불변의 uint &lt;strong id=&quot;errors&quot;&gt;에러&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="c17e72b9be9729725b9c33c9ecda705c9a961db0" translate="yes" xml:space="preserve">
          <source>immutable uint &lt;strong id=&quot;version_major&quot;&gt;version_major&lt;/strong&gt;;</source>
          <target state="translated">불변의 uint &lt;strong id=&quot;version_major&quot;&gt;version_major&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="07000adfd91dd81e4220376fab93379bf5d4cfbf" translate="yes" xml:space="preserve">
          <source>immutable uint &lt;strong id=&quot;version_minor&quot;&gt;version_minor&lt;/strong&gt;;</source>
          <target state="translated">불변의 uint &lt;strong id=&quot;version_minor&quot;&gt;version_minor&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="4407ca63e53acef3715feca03a3606d332ae02b2" translate="yes" xml:space="preserve">
          <source>immutable uint &lt;strong id=&quot;warnings&quot;&gt;warnings&lt;/strong&gt;;</source>
          <target state="translated">불변의 uint &lt;strong id=&quot;warnings&quot;&gt;경고&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="753084213b0f815969ecd0489ee1661e330ee321" translate="yes" xml:space="preserve">
          <source>immutable void* &lt;strong id=&quot;Z_NULL&quot;&gt;Z_NULL&lt;/strong&gt;;</source>
          <target state="translated">불변의 void * &lt;strong id=&quot;Z_NULL&quot;&gt;Z_NULL&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="a244ff93501b6dd973a85468410a0430965f518a" translate="yes" xml:space="preserve">
          <source>immutable(BOMSeq) &lt;strong id=&quot;getBOM&quot;&gt;getBOM&lt;/strong&gt;(Range)(Range input)</source>
          <target state="translated">불변 (BOMSeq) &lt;strong id=&quot;getBOM&quot;&gt;getBOM&lt;/strong&gt; (범위) (범위 입력)</target>
        </trans-unit>
        <trans-unit id="9f180640c7bc56eb82767c34745fb667b371fdf7" translate="yes" xml:space="preserve">
          <source>immutable(C1)[] &lt;strong id=&quot;defaultExtension&quot;&gt;defaultExtension&lt;/strong&gt;(C1, C2)(in C1[] path, in C2[] ext)</source>
          <target state="translated">immutable(C1)[] &lt;strong id=&quot;defaultExtension&quot;&gt;defaultExtension&lt;/strong&gt;(C1, C2)(in C1[] path, in C2[] ext)</target>
        </trans-unit>
        <trans-unit id="31e75233d5e49725517ec8f59babfe1e2666ec82" translate="yes" xml:space="preserve">
          <source>immutable(C1)[] &lt;strong id=&quot;setExtension&quot;&gt;setExtension&lt;/strong&gt;(C1, C2)(immutable(C1)[] path, const(C2)[] ext)</source>
          <target state="translated">불변 (C1) [] &lt;strong id=&quot;setExtension&quot;&gt;setExtension&lt;/strong&gt; (C1, C2) (불변 (C1) [] 경로, const (C2) [] ext)</target>
        </trans-unit>
        <trans-unit id="a207f98721f15312a3fd6a47b1bfba9066716750" translate="yes" xml:space="preserve">
          <source>immutable(C1)[] &lt;strong id=&quot;setExtension&quot;&gt;setExtension&lt;/strong&gt;(C1, C2)(in C1[] path, in C2[] ext)</source>
          <target state="translated">immutable(C1)[] &lt;strong id=&quot;setExtension&quot;&gt;setExtension&lt;/strong&gt;(C1, C2)(in C1[] path, in C2[] ext)</target>
        </trans-unit>
        <trans-unit id="fdada9680e73cc1fa27672c40740f8d7acb64a9d" translate="yes" xml:space="preserve">
          <source>immutable(Char)[] &lt;strong id=&quot;format&quot;&gt;format&lt;/strong&gt;(Char, Args...)(in Char[] fmt, Args args)</source>
          <target state="translated">불변 (Char) [] &lt;strong id=&quot;format&quot;&gt;형식&lt;/strong&gt; (Char, Args ...) (Char [] fmt, Args args)</target>
        </trans-unit>
        <trans-unit id="a3805b289e49ad7d53d9c7aac6202d805abfe34f" translate="yes" xml:space="preserve">
          <source>immutable(E)[] &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">불변 (E) [] &lt;code&gt;s&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bd20a3bd6b9ec2b4bafecdf2831cc65fab9fa79a" translate="yes" xml:space="preserve">
          <source>immutable(E)[] &lt;strong id=&quot;sanitize&quot;&gt;sanitize&lt;/strong&gt;(E)(immutable(E)[] s);</source>
          <target state="translated">불변 (E) [] &lt;strong id=&quot;sanitize&quot;&gt;살균&lt;/strong&gt; (E) (불변 (E) [] s);</target>
        </trans-unit>
        <trans-unit id="fac8a80bf503ccafc487a46ecfa1419d5a4143b4" translate="yes" xml:space="preserve">
          <source>immutable(ElementEncodingType!(ElementType!Range))[] &lt;strong id=&quot;buildPath&quot;&gt;buildPath&lt;/strong&gt;(Range)(Range segments)</source>
          <target state="translated">불변 (ElementEncodingType! (ElementType! Range)) [] &lt;strong id=&quot;buildPath&quot;&gt;buildPath&lt;/strong&gt; (범위) (범위 세그먼트)</target>
        </trans-unit>
        <trans-unit id="f07aa591fb5b1da8266b8f1c927b8942250eafce" translate="yes" xml:space="preserve">
          <source>immutable(FuncTable)* &lt;strong id=&quot;__eh_finddata&quot;&gt;__eh_finddata&lt;/strong&gt;(void* address);</source>
          <target state="translated">불변 (FuncTable) * &lt;strong id=&quot;__eh_finddata&quot;&gt;__eh_finddata&lt;/strong&gt; (void * 주소);</target>
        </trans-unit>
        <trans-unit id="a0227fa458a12bb96395dd8a842c8a09123a3433" translate="yes" xml:space="preserve">
          <source>immutable(Unqual!C1)[] &lt;strong id=&quot;defaultExtension&quot;&gt;defaultExtension&lt;/strong&gt;(C1, C2)(in C1[] path, in C2[] ext)</source>
          <target state="translated">불변 (Unqual! C1) [] &lt;strong id=&quot;defaultExtension&quot;&gt;defaultExtension&lt;/strong&gt; (C1, C2) (C1 [] 경로, C2 [] 내선)</target>
        </trans-unit>
        <trans-unit id="89b40e6e4c9a5a86f1e6e98f69f400a45dfa989e" translate="yes" xml:space="preserve">
          <source>immutable(Unqual!C1)[] &lt;strong id=&quot;setExtension&quot;&gt;setExtension&lt;/strong&gt;(C1, C2)(in C1[] path, in C2[] ext)</source>
          <target state="translated">불변 (Unqual! C1) [] &lt;strong id=&quot;setExtension&quot;&gt;setExtension&lt;/strong&gt; (C1, C2) (C1 [] 경로, C2 [] 내선)</target>
        </trans-unit>
        <trans-unit id="54c4c951e9cd7a0b5b43202ff5cd7f25b554c5bb" translate="yes" xml:space="preserve">
          <source>immutable(char)* &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">불변 (char) * &lt;code&gt;s&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ee63be25940848331204e7245c99b3dc67b841fd" translate="yes" xml:space="preserve">
          <source>immutable(char)* &lt;strong id=&quot;sqlite3_version&quot;&gt;sqlite3_version&lt;/strong&gt;;</source>
          <target state="translated">불변 (char) * &lt;strong id=&quot;sqlite3_version&quot;&gt;sqlite3_version&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="a8cbf3b2bfbe54282adec0f26c8d7872b2bfa3c6" translate="yes" xml:space="preserve">
          <source>immutable(ubyte)[] &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">불변 (ubyte) [] &lt;code&gt;s&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c3ccaabc070a9022294c67f88e97e16710f31122" translate="yes" xml:space="preserve">
          <source>immutable(ubyte)[] &lt;strong id=&quot;sanitize&quot;&gt;sanitize&lt;/strong&gt;()(immutable(ubyte)[] s);</source>
          <target state="translated">불변 (ubyte) [] &lt;strong id=&quot;sanitize&quot;&gt;살균&lt;/strong&gt; () (불변 (ubyte) [] s);</target>
        </trans-unit>
        <trans-unit id="0c9382cb6ef5d6c09599ba47d64104fd5e5a1e17" translate="yes" xml:space="preserve">
          <source>immutable/mutable aliasing</source>
          <target state="translated">불변 / 불변 앨리어싱</target>
        </trans-unit>
        <trans-unit id="ec97a3c91a8119810bdbe3f8d403ea229bd42f08" translate="yes" xml:space="preserve">
          <source>impcnvtab.d</source>
          <target state="translated">impcnvtab.d</target>
        </trans-unit>
        <trans-unit id="8f3d355870186e3887d4841ee60845702ac81df4" translate="yes" xml:space="preserve">
          <source>imphint.d</source>
          <target state="translated">imphint.d</target>
        </trans-unit>
        <trans-unit id="1ec43d88be8b5ec8e3eb2be56735a05b6d9adce8" translate="yes" xml:space="preserve">
          <source>implementation defined floating point value, for x86 it is 80 bit IEEE 754 extended real</source>
          <target state="translated">구현 정의 부동 소수점 값, x86의 경우 80 비트 IEEE 754 확장 실수</target>
        </trans-unit>
        <trans-unit id="3fdd748d0c1e7981b562688cf139cf18b5f2d30b" translate="yes" xml:space="preserve">
          <source>implements a simple loop.</source>
          <target state="translated">간단한 루프를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="77c3ee0af0e723665b5fb506b25060dffdfd2679" translate="yes" xml:space="preserve">
          <source>implements saturating arithmetic, i.e. &lt;code&gt;Checked!(int, Saturate)&lt;/code&gt; &quot;stops&quot; at &lt;code&gt;int.max&lt;/code&gt; for all operations that would cause an &lt;code&gt;int&lt;/code&gt; to overflow toward infinity, and at &lt;code&gt;int.min&lt;/code&gt; for all operations that would correspondingly overflow toward negative infinity.</source>
          <target state="translated">포화 연산을 구현합니다. 즉, &lt;code&gt;Checked!(int, Saturate)&lt;/code&gt; 는 &lt;code&gt;int&lt;/code&gt; 가 무한대로 오버 플로우 되는 모든 연산에 대해 &lt;code&gt;int.max&lt;/code&gt; 에서 &quot;중지&quot;되고 , 음의 무한대로 오버 플로우되는 모든 연산에 대해 &lt;code&gt;int.min&lt;/code&gt; 에서 &quot;정지&quot;됩니다 .</target>
        </trans-unit>
        <trans-unit id="baffffc9fcb4755e746b2241c6dcfce0d0ea125c" translate="yes" xml:space="preserve">
          <source>implicitly convertible to &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">암시 적으로 &lt;code&gt;T&lt;/code&gt; 로 변환 가능</target>
        </trans-unit>
        <trans-unit id="470cec587602b47395a317eb72d14272f9628412" translate="yes" xml:space="preserve">
          <source>implies</source>
          <target state="translated">implies</target>
        </trans-unit>
        <trans-unit id="62fdfbd55d19b2a4671102ad7bca17d875f8207a" translate="yes" xml:space="preserve">
          <source>import</source>
          <target state="translated">import</target>
        </trans-unit>
        <trans-unit id="53355f5de410fb9f73b7dfd453feaf43abdd7265" translate="yes" xml:space="preserve">
          <source>import to add</source>
          <target state="translated">추가하여 가져 오기</target>
        </trans-unit>
        <trans-unit id="60ff0eb6aa767acbe6b702b41d824a93a44955f7" translate="yes" xml:space="preserve">
          <source>imports module C, names from C will be visible in A as well.</source>
          <target state="translated">모듈 C를 가져 오면 C의 이름이 A에도 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="128d23a4328316363b5bb939c029111d22954419" translate="yes" xml:space="preserve">
          <source>in case one is not supplied.</source>
          <target state="translated">하나가 공급되지 않은 경우.</target>
        </trans-unit>
        <trans-unit id="9b798f98de8eb5d8987f1eeb815717af61c9472c" translate="yes" xml:space="preserve">
          <source>in contracts</source>
          <target state="translated">계약으로</target>
        </trans-unit>
        <trans-unit id="b2bf53e83640ecba1082df5cb9098f9852dbe084" translate="yes" xml:space="preserve">
          <source>in effect (e.g. PDT). It is not necessarily unique.</source>
          <target state="translated">실제로 (예 : PDT). 반드시 고유하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="a3be98fcab703a9b8ea8f7dc132cdf883b684aa1" translate="yes" xml:space="preserve">
          <source>in effect (e.g. PST). It is not necessarily unique.</source>
          <target state="translated">사실상 (예 : PST). 반드시 고유하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="898a4a4c55553252311858d771b398b8cd82c2d1" translate="yes" xml:space="preserve">
          <source>in the following ways:</source>
          <target state="translated">다음과 같은 방법으로 :</target>
        </trans-unit>
        <trans-unit id="2dcb288726695a7ad42e4bd4969d411dc47a3941" translate="yes" xml:space="preserve">
          <source>in the parent process when this function returns. See the &lt;a href=&quot;#Config&quot;&gt;&lt;code&gt;Config&lt;/code&gt;&lt;/a&gt; documentation below for information about how to disable this behaviour.  Beware of buffering issues when passing &lt;code&gt;File&lt;/code&gt; objects to &lt;code&gt;spawnProcess&lt;/code&gt;. The child process will inherit the low-level raw read/write offset associated with the underlying file descriptor, but it will not be aware of any buffered data. In cases where this matters (e.g. when a file should be aligned before being passed on to the child process), it may be a good idea to use unbuffered streams, or at least ensure all relevant buffers are flushed.</source>
          <target state="translated">이 함수가 반환 될 때 부모 프로세스에서 이 동작을 비활성화하는 방법에 대한 자세한 내용은 아래 &lt;a href=&quot;#Config&quot;&gt; &lt;code&gt;Config&lt;/code&gt; &lt;/a&gt; 설명서를 참조하십시오 . &lt;code&gt;File&lt;/code&gt; 객체를 &lt;code&gt;spawnProcess&lt;/code&gt; 로 전달할 때 버퍼링 문제에주의하십시오 . 하위 프로세스는 기본 파일 디스크립터와 연관된 하위 레벨 원시 읽기 / 쓰기 오프셋을 상속하지만 버퍼링 된 데이터는 인식하지 못합니다. 이것이 중요한 경우 (예 : 자식 프로세스로 전달되기 전에 파일을 정렬해야하는 경우) 버퍼되지 않은 스트림을 사용하거나 최소한 모든 관련 버퍼가 플러시되도록하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="1069ab4840867e88a6bb1b09a3c006f02e0c48a8" translate="yes" xml:space="preserve">
          <source>in this documentation. The store contains a reference count and the &lt;code&gt;T&lt;/code&gt; payload. &lt;code&gt;RefCounted&lt;/code&gt; uses &lt;code&gt;malloc&lt;/code&gt; to allocate the store. As instances of &lt;code&gt;RefCounted&lt;/code&gt; are copied or go out of scope, they will automatically increment or decrement the reference count. When the reference count goes down to zero, &lt;code&gt;RefCounted&lt;/code&gt; will call &lt;code&gt;destroy&lt;/code&gt; against the payload and call &lt;code&gt;free&lt;/code&gt; to deallocate the store. If the &lt;code&gt;T&lt;/code&gt; payload contains any references to GC-allocated memory, then &lt;code&gt;RefCounted&lt;/code&gt; will add it to the GC memory that is scanned for pointers, and remove it from GC scanning before &lt;code&gt;free&lt;/code&gt; is called on the store.</source>
          <target state="translated">이 문서에서. 상점에는 참조 계수와 &lt;code&gt;T&lt;/code&gt; 페이로드가 있습니다. &lt;code&gt;RefCounted&lt;/code&gt; 는 &lt;code&gt;malloc&lt;/code&gt; 을 사용 하여 상점을 할당합니다. &lt;code&gt;RefCounted&lt;/code&gt; 의 인스턴스 가 복사되거나 범위를 벗어나면 참조 카운트가 자동으로 증가하거나 감소합니다. 참조 카운트가 0으로 내려 가면 &lt;code&gt;RefCounted&lt;/code&gt; 는 페이로드에 대해 &lt;code&gt;destroy&lt;/code&gt; 를 호출 하고 상점을 할당 해제하기 위해 &lt;code&gt;free&lt;/code&gt; 를 호출 합니다. 는 IF &lt;code&gt;T&lt;/code&gt; 의 페이로드는 GC-할당 된 메모리에 대한 참조를 포함하고 &lt;code&gt;RefCounted&lt;/code&gt; 는 포인터를 검사하는 GC 메모리에 추가하기 전에 GC 스캔에서 제거합니다 &lt;code&gt;free&lt;/code&gt; 상점에서 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="9833a7e64647059a704bd66d93793602e87ea191" translate="yes" xml:space="preserve">
          <source>incPoolSize:N - pool size increment MB</source>
          <target state="translated">incPoolSize : N-풀 크기 단위 (MB)</target>
        </trans-unit>
        <trans-unit id="baf7cdc1a77ca6ceabe684f0d49bf7e39d4bcebf" translate="yes" xml:space="preserve">
          <source>include the conditional code</source>
          <target state="translated">조건부 코드 포함</target>
        </trans-unit>
        <trans-unit id="15ed38e737b7811718cbf9d21ef10a05fa65da52" translate="yes" xml:space="preserve">
          <source>incompatible sizes which may cause argument misalignment</source>
          <target state="translated">인수가 잘못 정렬 될 수있는 호환되지 않는 크기</target>
        </trans-unit>
        <trans-unit id="702ca8a9a9244d13777a48fe3ca678c2c49ccb3d" translate="yes" xml:space="preserve">
          <source>indentation level</source>
          <target state="translated">들여 쓰기 수준</target>
        </trans-unit>
        <trans-unit id="e540cdd1328b2b21e29a95405c301b9313b7c346" translate="yes" xml:space="preserve">
          <source>index</source>
          <target state="translated">index</target>
        </trans-unit>
        <trans-unit id="a62568a058e2edc549a96e8857c55b40051ac574" translate="yes" xml:space="preserve">
          <source>index of the field, or -1 if not found</source>
          <target state="translated">필드의 인덱스. 발견되지 않은 경우는 -1</target>
        </trans-unit>
        <trans-unit id="4e87da4abe4f55c94728d867ebca8858a979c8bd" translate="yes" xml:space="preserve">
          <source>index one past end of UTF sequence (default: &lt;code&gt;str.length&lt;/code&gt;)</source>
          <target state="translated">UTF 시퀀스의 마지막 끝을 색인화합니다 (기본값 : &lt;code&gt;str.length&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="5bf3c7bbeeedf1c1d02045c13320fd72e0a507e5" translate="yes" xml:space="preserve">
          <source>index variable</source>
          <target state="translated">인덱스 변수</target>
        </trans-unit>
        <trans-unit id="13af049687d9f44e507c4a33491393c71790dc17" translate="yes" xml:space="preserve">
          <source>indicates how deprecation diagnostics should be handled</source>
          <target state="translated">지원 중단 진단을 처리하는 방법을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d1050f345b312f95362a713d5ab1593ee43ddbd1" translate="yes" xml:space="preserve">
          <source>indicates type of proxy. accepted values are CURLPROXY_HTTP (default), CURLPROXY_SOCKS4, CURLPROXY_SOCKS4A and CURLPROXY_SOCKS5.</source>
          <target state="translated">프록시 유형을 나타냅니다. 허용되는 값은 CURLPROXY_HTTP (기본값), CURLPROXY_SOCKS4, CURLPROXY_SOCKS4A 및 CURLPROXY_SOCKS5입니다.</target>
        </trans-unit>
        <trans-unit id="39c184f424bbcca6f475ae046b4d4828967483e0" translate="yes" xml:space="preserve">
          <source>infinite range</source>
          <target state="translated">무한 범위</target>
        </trans-unit>
        <trans-unit id="875a0f26deb2709b4f647d835ac9c4e97144cf7c" translate="yes" xml:space="preserve">
          <source>infinity value</source>
          <target state="translated">무한대 가치</target>
        </trans-unit>
        <trans-unit id="e92f9d0f1dfa780a17b18bf3eb2137b626903015" translate="yes" xml:space="preserve">
          <source>influence the inference of &lt;code&gt;pure&lt;/code&gt;, &lt;code&gt;@nogc&lt;/code&gt;, &lt;code&gt;nothrow&lt;/code&gt; and &lt;code&gt;@safe&lt;/code&gt; attributes.</source>
          <target state="translated">&lt;code&gt;pure&lt;/code&gt; , &lt;code&gt;@nogc&lt;/code&gt; , &lt;code&gt;nothrow&lt;/code&gt; 및 &lt;code&gt;@safe&lt;/code&gt; 속성 의 유추에 영향을줍니다 .</target>
        </trans-unit>
        <trans-unit id="59bd0a3ff43b32849b319e645d4798d8a5d1e889" translate="yes" xml:space="preserve">
          <source>info</source>
          <target state="translated">info</target>
        </trans-unit>
        <trans-unit id="b86ced6870c2e1378b024ab08749d586672a36ce" translate="yes" xml:space="preserve">
          <source>info about the certificate chain, only for OpenSSL builds. Asked for with CURLOPT_CERTINFO / CURLINFO_CERTINFO</source>
          <target state="translated">인증서 체인에 대한 정보 (OpenSSL 빌드 전용). CURLOPT_CERTINFO / CURLINFO_CERTINFO와 함께 요청</target>
        </trans-unit>
        <trans-unit id="fa819862fcdc2796d814228f95ef63a1b9524fe1" translate="yes" xml:space="preserve">
          <source>information about the field's callees</source>
          <target state="translated">필드의 수신자에 대한 정보</target>
        </trans-unit>
        <trans-unit id="1b47fce86d8a267023faafb7c9416161f47f143a" translate="yes" xml:space="preserve">
          <source>inherit the parent's environment. Its entire environment will then be determined by &lt;code&gt;env&lt;/code&gt;.</source>
          <target state="translated">부모의 환경을 물려받습니다. 그러면 전체 환경이 &lt;code&gt;env&lt;/code&gt; 에 의해 결정됩니다 .</target>
        </trans-unit>
        <trans-unit id="966533b9cfd3e8fbdad4ac9a334416f0b32dc6c1" translate="yes" xml:space="preserve">
          <source>iniFile to parse imports from</source>
          <target state="translated">가져 오기를 파싱하는 iniFile</target>
        </trans-unit>
        <trans-unit id="fd62812fbd9ec4c7f99aa4f6253fead2388eb238" translate="yes" xml:space="preserve">
          <source>init</source>
          <target state="translated">init</target>
        </trans-unit>
        <trans-unit id="f16f4e8015c01281692574d5f46ab9eae660cf79" translate="yes" xml:space="preserve">
          <source>init.d</source>
          <target state="translated">init.d</target>
        </trans-unit>
        <trans-unit id="d0445d7cf1e074fcebdf208a88df5674f3507f86" translate="yes" xml:space="preserve">
          <source>initReserve:N - initial memory to reserve in MB</source>
          <target state="translated">initReserve : N-MB 단위로 예약 할 초기 메모리</target>
        </trans-unit>
        <trans-unit id="e939b5e7e2e0c55f88e7d0d53f11a69ac41cc84f" translate="yes" xml:space="preserve">
          <source>initial list of template arguments</source>
          <target state="translated">템플릿 인수의 초기 목록</target>
        </trans-unit>
        <trans-unit id="07d26302206ab3e1586db4d119bde36663d6cf87" translate="yes" xml:space="preserve">
          <source>initial state of the signal</source>
          <target state="translated">신호의 초기 상태</target>
        </trans-unit>
        <trans-unit id="44d847cec8e66300b699672c99b31d21ba8a8adb" translate="yes" xml:space="preserve">
          <source>initialization (treated as assignment)</source>
          <target state="translated">초기화 (할당으로 처리)</target>
        </trans-unit>
        <trans-unit id="736bd3c03459d8671b775d1991923c2d770573e9" translate="yes" xml:space="preserve">
          <source>initialization of a static variable or a &lt;a href=&quot;enum#manifest_constants&quot;&gt;manifest constant&lt;/a&gt;</source>
          <target state="translated">정적 변수 또는 &lt;a href=&quot;enum#manifest_constants&quot;&gt;매니페스트 상수의&lt;/a&gt; 초기화</target>
        </trans-unit>
        <trans-unit id="d1e5671576679c9c26af5735e25a3cc5651ae1d4" translate="yes" xml:space="preserve">
          <source>initializer</source>
          <target state="translated">initializer</target>
        </trans-unit>
        <trans-unit id="3cec2809ffb9b6a7a799f970bce0836147fcd6b9" translate="yes" xml:space="preserve">
          <source>initializer (NaN)</source>
          <target state="translated">이니셜 라이저 (NaN)</target>
        </trans-unit>
        <trans-unit id="71faa78f18eaf317ee92455bbdfd7aabb5ecd658" translate="yes" xml:space="preserve">
          <source>initializer for param</source>
          <target state="translated">param의 이니셜 라이저</target>
        </trans-unit>
        <trans-unit id="b87577f8cb46ccea4dc7aae59c3715e56e9c8a4d" translate="yes" xml:space="preserve">
          <source>initializer for parameter</source>
          <target state="translated">매개 변수의 이니셜 라이저</target>
        </trans-unit>
        <trans-unit id="97dbef62f48f3c0adea4c6ecbf448bce5868c7ff" translate="yes" xml:space="preserve">
          <source>initializer if there is one, null if not, ErrorExp if error</source>
          <target state="translated">이니셜 라이저가있는 경우 이니셜 라이저,없는 경우 null, 오류 인 경우 ErrorExp</target>
        </trans-unit>
        <trans-unit id="6f36cb5ff5ef1328ecb813b297ebca3faef915f0" translate="yes" xml:space="preserve">
          <source>initiate a GC cycle or free any GC memory. If &lt;code&gt;initialize&lt;/code&gt; is supplied &lt;code&gt;false&lt;/code&gt;, the object is considered invalid after destruction, and should not be referenced.</source>
          <target state="translated">GC주기를 시작하거나 GC 메모리를 비 웁니다. 경우 &lt;code&gt;initialize&lt;/code&gt; 공급되고 &lt;code&gt;false&lt;/code&gt; , 개체가 파괴 후 유효하지 않은 것으로 간주되며, 참조 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="cf02c4dba8d7dac7e4f760f9ca5d02f8de1bb2fc" translate="yes" xml:space="preserve">
          <source>initiates</source>
          <target state="translated">initiates</target>
        </trans-unit>
        <trans-unit id="c3c1067a71bd527865a258bf2a1f50fe22b06ff6" translate="yes" xml:space="preserve">
          <source>inititalize multi-style curl usage</source>
          <target state="translated">멀티 스타일 컬 사용법을 초기화</target>
        </trans-unit>
        <trans-unit id="67bec8491699b47ab27671cc9e60960746684825" translate="yes" xml:space="preserve">
          <source>initsem.d</source>
          <target state="translated">initsem.d</target>
        </trans-unit>
        <trans-unit id="8be5809bd27d3694002679854238936aeb577058" translate="yes" xml:space="preserve">
          <source>inline asm statement</source>
          <target state="translated">인라인 asm 문</target>
        </trans-unit>
        <trans-unit id="001b128f1d44ce51c8197c5d3b4405d632e96784" translate="yes" xml:space="preserve">
          <source>inline.d</source>
          <target state="translated">inline.d</target>
        </trans-unit>
        <trans-unit id="a2f6c13cbc564da832ade97badacf5f7559e86c1" translate="yes" xml:space="preserve">
          <source>inlineScan is running</source>
          <target state="translated">inlineScan이 실행 중입니다</target>
        </trans-unit>
        <trans-unit id="317f09eac8dfee7a665bacecae7d86c96a249d09" translate="yes" xml:space="preserve">
          <source>inlinecost.d</source>
          <target state="translated">inlinecost.d</target>
        </trans-unit>
        <trans-unit id="8fd138f0fdb5c410cfee13c929e5c39dd18a438b" translate="yes" xml:space="preserve">
          <source>inner context</source>
          <target state="translated">내부 맥락</target>
        </trans-unit>
        <trans-unit id="f7ccaa1e5aaf562712375f83aa9888fb8e173592" translate="yes" xml:space="preserve">
          <source>inout @property auto &lt;strong id=&quot;get&quot;&gt;get&lt;/strong&gt;(uint index)()</source>
          <target state="translated">inout @property auto &lt;strong id=&quot;get&quot;&gt;get&lt;/strong&gt; (uint index) ()</target>
        </trans-unit>
        <trans-unit id="4ad2929d061210f0400c1e9d1d1e4de60684eb01" translate="yes" xml:space="preserve">
          <source>inout @property auto &lt;strong id=&quot;save&quot;&gt;save&lt;/strong&gt;();</source>
          <target state="translated">inout @property 자동 &lt;strong id=&quot;save&quot;&gt;저장&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="022ce4d7f3feed39445f097d8275daf48b46dfb6" translate="yes" xml:space="preserve">
          <source>inout @property inout(Captures!R) &lt;strong id=&quot;captures&quot;&gt;captures&lt;/strong&gt;();</source>
          <target state="translated">inout @property inout (Captures! R) &lt;strong id=&quot;captures&quot;&gt;캡처&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="e8a3145eaf5ce4c0359b452a9fa2a1f579954399" translate="yes" xml:space="preserve">
          <source>inout @property inout(Captures!R) &lt;strong id=&quot;front&quot;&gt;front&lt;/strong&gt;();</source>
          <target state="translated">inout @property inout (Captures! R) &lt;strong id=&quot;front&quot;&gt;프론트&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="300ca694152cfbd75c436e427416cc63226285c8" translate="yes" xml:space="preserve">
          <source>inout @property inout(ElementEncodingType!A)[] &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;();</source>
          <target state="translated">inout @property inout (ElementEncodingType! A) [] &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="b4b44a834bb21e01c9483ca488614c1221d9860a" translate="yes" xml:space="preserve">
          <source>inout @property inout(T) &lt;strong id=&quot;back&quot;&gt;back&lt;/strong&gt;();</source>
          <target state="translated">inout @property inout (T) &lt;strong id=&quot;back&quot;&gt;뒤로&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="897029f898cb6fe6208622c1cafd60ee2e153e65" translate="yes" xml:space="preserve">
          <source>inout @property inout(T) &lt;strong id=&quot;front&quot;&gt;front&lt;/strong&gt;();</source>
          <target state="translated">inout @property inout (T) &lt;strong id=&quot;front&quot;&gt;앞면&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="348ef4d4d420549f027b6a1241f24b464d5e0723" translate="yes" xml:space="preserve">
          <source>inout @property inout(T) &lt;strong id=&quot;get&quot;&gt;get&lt;/strong&gt;(T)();</source>
          <target state="translated">inout @property inout (T) &lt;strong id=&quot;get&quot;&gt;get&lt;/strong&gt; (T) ();</target>
        </trans-unit>
        <trans-unit id="c7555526e0f4e23fd7b856443d20a4c59d6226de" translate="yes" xml:space="preserve">
          <source>inout @property inout(T)* &lt;strong id=&quot;peek&quot;&gt;peek&lt;/strong&gt;(T)();</source>
          <target state="translated">inout @property inout (T) * &lt;strong id=&quot;peek&quot;&gt;엿보기&lt;/strong&gt; (T) ();</target>
        </trans-unit>
        <trans-unit id="b7d4a4c8722ce44efead93fbf1d3dbd22abc5e8a" translate="yes" xml:space="preserve">
          <source>inout @property ref @trusted inout(Tuple!(sliceSpecs!(from, to))) &lt;strong id=&quot;slice&quot;&gt;slice&lt;/strong&gt;(size_t from, size_t to)()</source>
          <target state="translated">inout @property ref @trusted inout (Tuple! (sliceSpecs! (from, to))) &lt;strong id=&quot;slice&quot;&gt;slice&lt;/strong&gt; (size_t from, size_t to) ()</target>
        </trans-unit>
        <trans-unit id="b9149913e025e0876ccf65cf9b158fd95ee35a01" translate="yes" xml:space="preserve">
          <source>inout @property ref inout(T) &lt;strong id=&quot;back&quot;&gt;back&lt;/strong&gt;();</source>
          <target state="translated">inout @property ref inout (T) &lt;strong id=&quot;back&quot;&gt;뒤로&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="d4608e199ba0212dcff18544e9edae1742c8b8d3" translate="yes" xml:space="preserve">
          <source>inout @property ref inout(T) &lt;strong id=&quot;front&quot;&gt;front&lt;/strong&gt;();</source>
          <target state="translated">inout @property ref inout (T) &lt;strong id=&quot;front&quot;&gt;앞면&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="5274c93d6ed756597044304e727061d96261ba99" translate="yes" xml:space="preserve">
          <source>inout @property ref inout(T) &lt;strong id=&quot;get&quot;&gt;get&lt;/strong&gt;();</source>
          <target state="translated">inout @property ref inout (T) &lt;strong id=&quot;get&quot;&gt;get&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="120496e5362c70be8ff2eceb96864ef52234db5a" translate="yes" xml:space="preserve">
          <source>inout @safe inout(T)* &lt;strong id=&quot;data&quot;&gt;data&lt;/strong&gt;();</source>
          <target state="translated">inout @ 안전한 inout (T) * &lt;strong id=&quot;data&quot;&gt;데이터&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="fe691c02e44a276983dc51c54edbcb9a0de7b2af" translate="yes" xml:space="preserve">
          <source>inout auto &lt;strong id=&quot;get&quot;&gt;get&lt;/strong&gt;();</source>
          <target state="translated">입력 자동 &lt;strong id=&quot;get&quot;&gt;가져 오기&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="0b648835c90fc9621089aaaf431ab17ccfe17e9f" translate="yes" xml:space="preserve">
          <source>inout auto &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;(size_t, DollarToken);</source>
          <target state="translated">인 &lt;strong id=&quot;opSlice&quot;&gt;아웃&lt;/strong&gt; 자동 &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt; (size_t, DollarToken);</target>
        </trans-unit>
        <trans-unit id="a9fd73c2b1edbd50155d0a9043b07294485d9c76" translate="yes" xml:space="preserve">
          <source>inout const pure @property @safe inout(T) &lt;strong id=&quot;get&quot;&gt;get&lt;/strong&gt;(T)();</source>
          <target state="translated">inout const 순수 @property @safe inout (T) &lt;strong id=&quot;get&quot;&gt;get&lt;/strong&gt; (T) ();</target>
        </trans-unit>
        <trans-unit id="e453d045705a6ca359ba8be05aae505968412405" translate="yes" xml:space="preserve">
          <source>inout inout(AggregateDeclaration) &lt;strong id=&quot;isThis&quot;&gt;isThis&lt;/strong&gt;();</source>
          <target state="translated">inout inout (AggregateDeclaration) &lt;strong id=&quot;isThis&quot;&gt;isThis&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="d5b9090c5c9adfb7b2afe91e6a0b8e1db2b1f1c9" translate="yes" xml:space="preserve">
          <source>inout inout(R) &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt;()(size_t i);</source>
          <target state="translated">inout inout (R) &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt; () ( &lt;strong id=&quot;opIndex&quot;&gt;크기 _i&lt;/strong&gt; );</target>
        </trans-unit>
        <trans-unit id="f9a5ef0231af058f7c5a0bee207ed99440e9a0d2" translate="yes" xml:space="preserve">
          <source>inout inout(T) &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt;(size_t);</source>
          <target state="translated">inout inout (T) &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt; ( &lt;strong id=&quot;opIndex&quot;&gt;크기 _t&lt;/strong&gt; );</target>
        </trans-unit>
        <trans-unit id="a599d7903129e23baab2025643f86141306ef6bd" translate="yes" xml:space="preserve">
          <source>inout inout(Variant) &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt;(K)(K i);</source>
          <target state="translated">inout inout (Variant) &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt; (K) (K i);</target>
        </trans-unit>
        <trans-unit id="10aef8af5c8a9ca3c0829815dc7afe7d83f7e7fc" translate="yes" xml:space="preserve">
          <source>inout nothrow @property ref @safe inout(RefCountedStore) &lt;strong id=&quot;refCountedStore&quot;&gt;refCountedStore&lt;/strong&gt;();</source>
          <target state="translated">inout nothrow @property ref @safe inout (RefCountedStore) &lt;strong id=&quot;refCountedStore&quot;&gt;refCountedStore&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="80aecb6a3e378baea83dd8aaa33d4f986c7beee5" translate="yes" xml:space="preserve">
          <source>inout nothrow @trusted inout(T)[] &lt;strong id=&quot;as_array&quot;&gt;as_array&lt;/strong&gt;();</source>
          <target state="translated">inout nothrow @trusted inout (T) [] &lt;strong id=&quot;as_array&quot;&gt;as_array&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="2ec69784f9ae240cd0db70b7b55fe8a5e09b0f41" translate="yes" xml:space="preserve">
          <source>inout nothrow ref @safe inout(T) &lt;strong id=&quot;back&quot;&gt;back&lt;/strong&gt;();</source>
          <target state="translated">inout nothrow ref @safe inout (T) &lt;strong id=&quot;back&quot;&gt;뒤로&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="af3a58ce54f8bad311da8c3430226dfacc5d2440" translate="yes" xml:space="preserve">
          <source>inout nothrow ref @safe inout(T) &lt;strong id=&quot;front&quot;&gt;front&lt;/strong&gt;();</source>
          <target state="translated">inout nothrow ref @safe inout (T) &lt;strong id=&quot;front&quot;&gt;front&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="7c6517f408daed95c5812042e3fb53fb3c63235c" translate="yes" xml:space="preserve">
          <source>inout nothrow ref @trusted inout(T) &lt;strong id=&quot;at&quot;&gt;at&lt;/strong&gt;(size_type i);</source>
          <target state="translated">inout nothrow ref @trusted inout (T) &lt;strong id=&quot;at&quot;&gt; at&lt;/strong&gt; (size_type i);</target>
        </trans-unit>
        <trans-unit id="ab91d823df07c015b1a32ceec7941f82135cccf4" translate="yes" xml:space="preserve">
          <source>inout pure @property @trusted inout(JSONValue[]) &lt;strong id=&quot;arrayNoRef&quot;&gt;arrayNoRef&lt;/strong&gt;();</source>
          <target state="translated">inout 순수한 @property @trusted inout (JSONValue []) &lt;strong id=&quot;arrayNoRef&quot;&gt;arrayNoRef&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="195c1960a604ca96a6a615d7304ec9dd7c95e2d8" translate="yes" xml:space="preserve">
          <source>inout pure @property @trusted inout(JSONValue[string]) &lt;strong id=&quot;objectNoRef&quot;&gt;objectNoRef&lt;/strong&gt;();</source>
          <target state="translated">inout 순수한 @property @trusted inout (JSONValue [string]) &lt;strong id=&quot;objectNoRef&quot;&gt;objectNoRef&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="9660ff9af5cb6242bc88a2e461b74459ceb11145" translate="yes" xml:space="preserve">
          <source>inout pure @property @trusted inout(T) &lt;strong id=&quot;get&quot;&gt;get&lt;/strong&gt;(T : JSONValue[string])();</source>
          <target state="translated">inout 순수 @property @trusted inout (T) &lt;strong id=&quot;get&quot;&gt;get&lt;/strong&gt; (T : JSONValue [문자열]) ();</target>
        </trans-unit>
        <trans-unit id="e83b13e60af3cfedb6d2803bc92c944c006fdda0" translate="yes" xml:space="preserve">
          <source>inout pure @property ref @system inout(JSONValue[]) &lt;strong id=&quot;array&quot;&gt;array&lt;/strong&gt;();</source>
          <target state="translated">inout 순수 @ 프로퍼티 참조 @system inout (JSONValue []) &lt;strong id=&quot;array&quot;&gt;배열&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="bdcc7ba8e001dba66bb1f1b214bea7dcef86c7d4" translate="yes" xml:space="preserve">
          <source>inout pure @property ref @system inout(JSONValue[string]) &lt;strong id=&quot;object&quot;&gt;object&lt;/strong&gt;();</source>
          <target state="translated">inout 순수 @ 프로퍼티 참조 @system inout (JSONValue [string]) &lt;strong id=&quot;object&quot;&gt;객체&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="5015d9de25a4231cfbe7adf5c7bd0467bf804974" translate="yes" xml:space="preserve">
          <source>inout pure nothrow @nogc @property inout(TypeInfo) &lt;strong id=&quot;next&quot;&gt;next&lt;/strong&gt;();</source>
          <target state="translated">inout 순수 nothrow @nogc @property inout (TypeInfo) &lt;strong id=&quot;next&quot;&gt;다음&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="0559629882ce5f9ab84a58ba3ea008bba894e70f" translate="yes" xml:space="preserve">
          <source>inout pure nothrow @nogc @property ref @safe inout(T) &lt;strong id=&quot;refCountedPayload&quot;&gt;refCountedPayload&lt;/strong&gt;() return;</source>
          <target state="translated">@outgrow @nogc @property ref @safe inout (T) &lt;strong id=&quot;refCountedPayload&quot;&gt;refCountedPayload&lt;/strong&gt; () 반환;</target>
        </trans-unit>
        <trans-unit id="4e99fd29860e673951ce75ff1febc47d266cf8a7" translate="yes" xml:space="preserve">
          <source>inout pure nothrow @nogc @property scope @safe inout(Throwable) &lt;strong id=&quot;next&quot;&gt;next&lt;/strong&gt;() return;</source>
          <target state="translated">inout pure nothrow @nogc @property scope @safe inout (Throwable) &lt;strong id=&quot;next&quot;&gt;다음&lt;/strong&gt; () 반환;</target>
        </trans-unit>
        <trans-unit id="aa344b34972b0c01fa365638e75c8bde1692a8a4" translate="yes" xml:space="preserve">
          <source>inout pure nothrow @nogc @safe inout(T)[] &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt;();</source>
          <target state="translated">@notgrow @nogc @safe inout (T) [] &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="c483e1aaa02beb88ac7d342d07b8f5b909a16b0c" translate="yes" xml:space="preserve">
          <source>inout pure nothrow @nogc @safe inout(T)[] &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt;(size_t[2] slice);</source>
          <target state="translated">@notgrow @nogc @safe inout (T) [] &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt; (size_t [2] 슬라이스);</target>
        </trans-unit>
        <trans-unit id="141e5b34c27a061e0e0007e2fc82a7b3244e0fff" translate="yes" xml:space="preserve">
          <source>inout pure nothrow @nogc inout(ReturnStatement) &lt;strong id=&quot;endsWithReturnStatement&quot;&gt;endsWithReturnStatement&lt;/strong&gt;();</source>
          <target state="translated">inout 순수 nothrow @nogc inout (ReturnStatement) &lt;strong id=&quot;endsWithReturnStatement&quot;&gt;endsWithReturnStatement&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="8a28918fecd1b1dde4681d2f08b5543803c359ec" translate="yes" xml:space="preserve">
          <source>inout pure nothrow @nogc inout(size_t)[] &lt;strong id=&quot;opCast&quot;&gt;opCast&lt;/strong&gt;(T : const(size_t[]))();</source>
          <target state="translated">inout 순수 nothrow @nogc inout (size_t) [] &lt;strong id=&quot;opCast&quot;&gt;opCast&lt;/strong&gt; (T : const (size_t [])) ();</target>
        </trans-unit>
        <trans-unit id="d8a1fabe665e6252b57b7c8f084e6c95d30e6638" translate="yes" xml:space="preserve">
          <source>inout pure nothrow @nogc inout(void)[] &lt;strong id=&quot;opCast&quot;&gt;opCast&lt;/strong&gt;(T : const(void[]))();</source>
          <target state="translated">inout 순수 nothrow @nogc inout (void) [] &lt;strong id=&quot;opCast&quot;&gt;opCast&lt;/strong&gt; (T : const (void [])) ();</target>
        </trans-unit>
        <trans-unit id="82836b8beb50bff0132fa1533e5dc3bb378a4d41" translate="yes" xml:space="preserve">
          <source>inout pure nothrow @nogc ref @safe inout(T) &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt;(size_t index);</source>
          <target state="translated">inout 순수 nothrow @nogc ref @safe inout (T) &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt; (size_t 인덱스);</target>
        </trans-unit>
        <trans-unit id="29109c821d096a714684ae8a68f66c385ed98517" translate="yes" xml:space="preserve">
          <source>inout pure nothrow @property @safe auto &lt;strong id=&quot;get&quot;&gt;get&lt;/strong&gt;(U)(inout(U) fallback);</source>
          <target state="translated">inout pure nothrow @property @safe auto &lt;strong id=&quot;get&quot;&gt;get&lt;/strong&gt; (U) (inout (U) 폴백);</target>
        </trans-unit>
        <trans-unit id="73e77ee8378bb7e38346ec02559cbe62935cfecc" translate="yes" xml:space="preserve">
          <source>inout pure nothrow @property @safe inout(R*) &lt;strong id=&quot;ptr&quot;&gt;ptr&lt;/strong&gt;();</source>
          <target state="translated">inout pure nothrow @property @safe inout (R *) &lt;strong id=&quot;ptr&quot;&gt;ptr&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="11135b2297ad46bcb49ad01224ce6201cbb472dd" translate="yes" xml:space="preserve">
          <source>inout pure nothrow @property @safe inout(T) &lt;strong id=&quot;get&quot;&gt;get&lt;/strong&gt;()(inout(T) fallback);</source>
          <target state="translated">inout 순수 nothrow @property @safe inout (T) &lt;strong id=&quot;get&quot;&gt;get&lt;/strong&gt; () (inout (T) fallback);</target>
        </trans-unit>
        <trans-unit id="e251552ea6c941852d38e0457b8cb9658fbaf6a6" translate="yes" xml:space="preserve">
          <source>inout pure nothrow @property @trusted inout(ElementEncodingType!A)[] &lt;strong id=&quot;data&quot;&gt;data&lt;/strong&gt;();</source>
          <target state="translated">inout 순수 nothrow @property @trusted inout (ElementEncodingType! A) [] &lt;strong id=&quot;data&quot;&gt;data&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="47f847ff2e8c835ecb2e9efabb7be5cecbd0543f" translate="yes" xml:space="preserve">
          <source>inout pure nothrow @property @trusted inout(ElementEncodingType!A)[] &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt;();</source>
          <target state="translated">inout 순수 nothrow @property @trusted inout (ElementEncodingType! A) [] &lt;strong id=&quot;opSlice&quot;&gt;opSlice&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="de4e2267900d4a25090234c2fedca8ec716d8d03" translate="yes" xml:space="preserve">
          <source>inout pure nothrow @property ref @safe inout(T) &lt;strong id=&quot;get&quot;&gt;get&lt;/strong&gt;();</source>
          <target state="translated">inout 순수한 nothrow @property ref @safe inout (T) &lt;strong id=&quot;get&quot;&gt;get&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="fd66138682c9855265ee69dc9fcd0199dad9e46f" translate="yes" xml:space="preserve">
          <source>inout pure nothrow inout(Statement) &lt;strong id=&quot;last&quot;&gt;last&lt;/strong&gt;();</source>
          <target state="translated">inout 순수한 nothrow inout (Statement) &lt;strong id=&quot;last&quot;&gt;last&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="e73faa5c3a27bcd2f47ee0833f3f4d07ce0e7863" translate="yes" xml:space="preserve">
          <source>inout pure nothrow scope @safe inout(ubyte)[] &lt;strong id=&quot;toBytes&quot;&gt;toBytes&lt;/strong&gt;();</source>
          <target state="translated">inout 순수한 nothrow 범위 @safe inout (ubyte) [] &lt;strong id=&quot;toBytes&quot;&gt;toBytes&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="62abc8652e56b3a712a765e8ba02facf890ff031" translate="yes" xml:space="preserve">
          <source>inout pure ref @safe inout(JSONValue) &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt;(size_t i);</source>
          <target state="translated">inout 순수 참조 @safe inout (JSONValue) &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt; (size_t i);</target>
        </trans-unit>
        <trans-unit id="3211253a3afdd4d1e43ba8b25e0727ce91ead043" translate="yes" xml:space="preserve">
          <source>inout pure ref @safe inout(JSONValue) &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt;(string k);</source>
          <target state="translated">inout 순수 참조 @safe inout (JSONValue) &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt; (문자열 k);</target>
        </trans-unit>
        <trans-unit id="212e4d97c9b54b795433d99b2fb606fd193e57c5" translate="yes" xml:space="preserve">
          <source>inout ref @safe inout(T) &lt;strong id=&quot;at&quot;&gt;at&lt;/strong&gt;(size_type i);</source>
          <target state="translated">inout ref @safe inout (T) &lt;strong id=&quot;at&quot;&gt;at&lt;/strong&gt; (size_type i);</target>
        </trans-unit>
        <trans-unit id="cbf5825322e222cbf1437d59a4665fb01b1d4b06" translate="yes" xml:space="preserve">
          <source>inout ref @safe inout(T) &lt;strong id=&quot;back&quot;&gt;back&lt;/strong&gt;();</source>
          <target state="translated">inout ref @safe inout (T) &lt;strong id=&quot;back&quot;&gt;뒤로&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="3a7a1a04b388ce504e842ddd26cd2bd952a2ec65" translate="yes" xml:space="preserve">
          <source>inout ref @safe inout(T) &lt;strong id=&quot;front&quot;&gt;front&lt;/strong&gt;();</source>
          <target state="translated">inout ref @safe inout (T) &lt;strong id=&quot;front&quot;&gt;앞면&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="8c4b2c1c4cb477021a55cd87777019310208d72b" translate="yes" xml:space="preserve">
          <source>inout ref @safe inout(T)[N] &lt;strong id=&quot;as_array&quot;&gt;as_array&lt;/strong&gt;();</source>
          <target state="translated">inout ref @safe inout (T) [N] &lt;strong id=&quot;as_array&quot;&gt;as_array&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="464d45bc5cd25457ac95b0a963f1a84cc41921a3" translate="yes" xml:space="preserve">
          <source>inout ref auto &lt;strong id=&quot;rename&quot;&gt;rename&lt;/strong&gt;(alias translate)()</source>
          <target state="translated">inout ref 자동 &lt;strong id=&quot;rename&quot;&gt;이름 바꾸기&lt;/strong&gt; (별칭으로 번역) ()</target>
        </trans-unit>
        <trans-unit id="29c92edbf1ceafe83bcdd0115bd01a3749afab65" translate="yes" xml:space="preserve">
          <source>inout ref auto &lt;strong id=&quot;rename&quot;&gt;rename&lt;/strong&gt;(names...)() return</source>
          <target state="translated">inout ref 자동 &lt;strong id=&quot;rename&quot;&gt;이름 바꾸기&lt;/strong&gt; (이름 ...) () 반환</target>
        </trans-unit>
        <trans-unit id="361554c9b1b107ea831c75b15f0f0eb26759dd1d" translate="yes" xml:space="preserve">
          <source>inout ref inout(Alloc) &lt;strong id=&quot;get_allocator&quot;&gt;get_allocator&lt;/strong&gt;();</source>
          <target state="translated">inout ref inout (Alloc) &lt;strong id=&quot;get_allocator&quot;&gt;get_allocator&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="fd2cf6eb671db21e9484ffab1ba6bd8c5a9a0133" translate="yes" xml:space="preserve">
          <source>inout ref inout(T) &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt;(size_t i);</source>
          <target state="translated">inout ref inout (T) &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt; (size_t i);</target>
        </trans-unit>
        <trans-unit id="f87da9b7383fe9a182e3997fc74696ad8f246823" translate="yes" xml:space="preserve">
          <source>inout this(T : JSONValue)(inout T arg);</source>
          <target state="translated">inout this (T : JSONValue) (inout T arg);</target>
        </trans-unit>
        <trans-unit id="1376e8c612a200941e62851acce35df1a3f7a228" translate="yes" xml:space="preserve">
          <source>inout this(inout T value);</source>
          <target state="translated">inout this (inout T 값);</target>
        </trans-unit>
        <trans-unit id="5507adbe08ab8f4dff77d9f370b06f7cd4befce3" translate="yes" xml:space="preserve">
          <source>inout(Array!T)* &lt;code&gt;array&lt;/code&gt;</source>
          <target state="translated">inout (Array! T) * &lt;code&gt;array&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c589fd2b60666460a7cfe3af5018e5dc9331baaf" translate="yes" xml:space="preserve">
          <source>inout(C)[] &lt;strong id=&quot;normalize&quot;&gt;normalize&lt;/strong&gt;(NormalizationForm norm = NFC, C)(inout(C)[] input);</source>
          <target state="translated">inout (C) [] &lt;strong id=&quot;normalize&quot;&gt;정규화&lt;/strong&gt; (NormalizationForm norm = NFC, C) (inout (C) [] 입력);</target>
        </trans-unit>
        <trans-unit id="7656a993e72e075e40a1c585e1019f4dcb6e3cbb" translate="yes" xml:space="preserve">
          <source>inout(Char)* &lt;code&gt;cString&lt;/code&gt;</source>
          <target state="translated">inout (Char) * &lt;code&gt;cString&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3a72e7e4c0bbd029cd56fd594e33831052b250de" translate="yes" xml:space="preserve">
          <source>inout(Expression) &lt;strong id=&quot;firstComma&quot;&gt;firstComma&lt;/strong&gt;(inout Expression e);</source>
          <target state="translated">inout (표현식) &lt;strong id=&quot;firstComma&quot;&gt;firstComma&lt;/strong&gt; (표현식 e);</target>
        </trans-unit>
        <trans-unit id="145be1800a90ec7ead29ac126bb16789a7a19618" translate="yes" xml:space="preserve">
          <source>inout(Expression) &lt;strong id=&quot;lastComma&quot;&gt;lastComma&lt;/strong&gt;(inout Expression e);</source>
          <target state="translated">inout (표현식) &lt;strong id=&quot;lastComma&quot;&gt;lastComma&lt;/strong&gt; (표현식 e);</target>
        </trans-unit>
        <trans-unit id="4577b0dfcb0c79d0d27bcacd3a2931fffb041c10" translate="yes" xml:space="preserve">
          <source>inout(T) &lt;code&gt;fallback&lt;/code&gt;</source>
          <target state="translated">inout(T) &lt;code&gt;fallback&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="60c3c2fa4bcb247f8537357f7664a3a8688e63dc" translate="yes" xml:space="preserve">
          <source>inout(T)[] &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">inout (T) [] &lt;code&gt;s&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b8f40eb87c00aa005e87bed734601303df526d8" translate="yes" xml:space="preserve">
          <source>inout(T)[] &lt;strong id=&quot;replaceSlice&quot;&gt;replaceSlice&lt;/strong&gt;(T)(inout(T)[] s, in T[] slice, in T[] replacement);</source>
          <target state="translated">inout (T) [] &lt;strong id=&quot;replaceSlice&quot;&gt;replaceSlice&lt;/strong&gt; (T) (T [] 슬라이스의 inout (T) [] s, T [] 교체);</target>
        </trans-unit>
        <trans-unit id="39310fd92807436c977157126eb2b9500eea6b1a" translate="yes" xml:space="preserve">
          <source>inout(Target) &lt;strong id=&quot;unwrap&quot;&gt;unwrap&lt;/strong&gt;(Target, Source)(inout Source src);</source>
          <target state="translated">inout (대상) &lt;strong id=&quot;unwrap&quot;&gt;풀기&lt;/strong&gt; (대상, 소스) (입력 소스 src);</target>
        </trans-unit>
        <trans-unit id="636b5e43c5a790dac4ff70610bf9a11770581976" translate="yes" xml:space="preserve">
          <source>inout(U)&lt;code&gt;fallback&lt;/code&gt;</source>
          <target state="translated">inout(U)&lt;code&gt;fallback&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a59b156774b11bc99e57da7484b88e43dc4dc779" translate="yes" xml:space="preserve">
          <source>inout(V) &lt;code&gt;defaultValue&lt;/code&gt;</source>
          <target state="translated">inout (V) &lt;code&gt;defaultValue&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dd3d33c44950afd95b00a7ad3f12cbe6dc1e7c8e" translate="yes" xml:space="preserve">
          <source>inout(V) &lt;strong id=&quot;get&quot;&gt;get&lt;/strong&gt;(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue);</source>
          <target state="translated">입출력 (V) &lt;strong id=&quot;get&quot;&gt;GET&lt;/strong&gt; (K, V) (inout (V [K]) aa, K 키, lazy inout (V) defaultValue);</target>
        </trans-unit>
        <trans-unit id="d841ed5b660457a8db4df0ef650d6f24b26bbb7e" translate="yes" xml:space="preserve">
          <source>inout(V[K]) &lt;code&gt;aa&lt;/code&gt;</source>
          <target state="translated">입력 (V [K]) &lt;code&gt;aa&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b2fa01c74c341b9f34b1c89714d3660982a49f61" translate="yes" xml:space="preserve">
          <source>inout(void)* &lt;code&gt;p&lt;/code&gt;</source>
          <target state="translated">입력 (void) * &lt;code&gt;p&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="09f0716ae13962282772dc2cac21fc8863b2dcf9" translate="yes" xml:space="preserve">
          <source>inout(void)* &lt;strong id=&quot;_aaGetRvalueX&quot;&gt;_aaGetRvalueX&lt;/strong&gt;(inout AA aa, in TypeInfo keyti, in size_t valsz, in void* pkey);</source>
          <target state="translated">inout (void) * &lt;strong id=&quot;_aaGetRvalueX&quot;&gt;_aaGetRvalueX&lt;/strong&gt; (AA aa, TypeInfo keyti, size_t valsz, void * pkey);</target>
        </trans-unit>
        <trans-unit id="66dc9b976181c723743878d018f90312b67c48d0" translate="yes" xml:space="preserve">
          <source>inout(void)* &lt;strong id=&quot;_aaGetRvalueX&quot;&gt;_aaGetRvalueX&lt;/strong&gt;(inout AA aa, scope const TypeInfo keyti, const size_t valsz, scope const void* pkey);</source>
          <target state="translated">inout (void) * &lt;strong id=&quot;_aaGetRvalueX&quot;&gt;_aaGetRvalueX&lt;/strong&gt; (inout AA aa, 범위 const TypeInfo keyti, const size_t valsz, 범위 const void * pkey);</target>
        </trans-unit>
        <trans-unit id="211c0e226d017cd0a747579ee006690e25ae8dd3" translate="yes" xml:space="preserve">
          <source>inout(void)* &lt;strong id=&quot;_aaInX&quot;&gt;_aaInX&lt;/strong&gt;(inout AA aa, in TypeInfo keyti, in void* pkey);</source>
          <target state="translated">inout (void) * &lt;strong id=&quot;_aaInX&quot;&gt;_aaInX&lt;/strong&gt; (AA aa, TypeInfo keyti, void * pkey);</target>
        </trans-unit>
        <trans-unit id="77d82b1103cd6e41d45faa18daf1d2d7a3752ab7" translate="yes" xml:space="preserve">
          <source>inout(void)* &lt;strong id=&quot;_aaInX&quot;&gt;_aaInX&lt;/strong&gt;(inout AA aa, scope const TypeInfo keyti, scope const void* pkey);</source>
          <target state="translated">inout (void) * &lt;strong id=&quot;_aaInX&quot;&gt;_aaInX&lt;/strong&gt; (inout AA aa, 범위 const TypeInfo keyti, 범위 const void * pkey);</target>
        </trans-unit>
        <trans-unit id="4868c25c7818c32ba4dcdb914b446ba0cd1a7dbf" translate="yes" xml:space="preserve">
          <source>input range</source>
          <target state="translated">입력 범위</target>
        </trans-unit>
        <trans-unit id="2e338045ab688cd7f7e34deff85bc24401f95545" translate="yes" xml:space="preserve">
          <source>input range of characters, or array of characters</source>
          <target state="translated">입력 문자 범위 또는 문자 배열</target>
        </trans-unit>
        <trans-unit id="f3f581a34d29fd359ecd9d4caefe4a2e6476e0ad" translate="yes" xml:space="preserve">
          <source>input string or bidirectional Range</source>
          <target state="translated">입력 문자열 또는 양방향 범위</target>
        </trans-unit>
        <trans-unit id="6d9a9c665cf2995eda1979c0728d0859ea8752a4" translate="yes" xml:space="preserve">
          <source>input string or indexable Range</source>
          <target state="translated">입력 문자열 또는 인덱서 블 범위</target>
        </trans-unit>
        <trans-unit id="ec8de0a4c21cc7aeceacae68cc966c9cde83962c" translate="yes" xml:space="preserve">
          <source>input/output</source>
          <target state="translated">input/output</target>
        </trans-unit>
        <trans-unit id="689518e5ce8213a2d962432507179e2bd63fb897" translate="yes" xml:space="preserve">
          <source>insert characters fully lazily into a string</source>
          <target state="translated">문자열에 느긋하게 문자를 삽입</target>
        </trans-unit>
        <trans-unit id="e868329f617d225e265877ff599bd5c624141f54" translate="yes" xml:space="preserve">
          <source>instLoc location that the template is instantiated. tiargs[] actual arguments to template instance i i'th argument parameters[] template parameters dedtypes[] deduced arguments to template instance *psparam set to symbol declared and initialized to dedtypes[i]</source>
          <target state="translated">템플릿이 인스턴스화되는 instLoc 위치입니다. tiargs [] 템플리트 인스턴스에 대한 실제 인수 i i 번째 인수 매개 변수 [] 템플리트 매개 변수 dedtypes [] 템플리트 인스턴스에 대한 인수를 추론 * psparam 기호로 선언되고 dedtypes로 초기화 됨 [i]</target>
        </trans-unit>
        <trans-unit id="ca514bb620a826c52a0cb4e930698af5b9dccde4" translate="yes" xml:space="preserve">
          <source>instance of ErrorExp</source>
          <target state="translated">ErrorExp 인스턴스</target>
        </trans-unit>
        <trans-unit id="2a16e57b5f3f2983f83086d956312e48a64a6710" translate="yes" xml:space="preserve">
          <source>instantiated expression</source>
          <target state="translated">인스턴스화 된 표현</target>
        </trans-unit>
        <trans-unit id="92078f068edb091d5abc268e85146050551bd81c" translate="yes" xml:space="preserve">
          <source>instantiating scope</source>
          <target state="translated">인스턴스화 범위</target>
        </trans-unit>
        <trans-unit id="1cfb6cf7b7357391bfe865c49bebaddd8fdfdead" translate="yes" xml:space="preserve">
          <source>instantiation location</source>
          <target state="translated">인스턴스화 위치</target>
        </trans-unit>
        <trans-unit id="8fd629f60df839513be98322a1a210d3a695da1d" translate="yes" xml:space="preserve">
          <source>instantiation scope</source>
          <target state="translated">인스턴스화 범위</target>
        </trans-unit>
        <trans-unit id="392455c67e7f1707e1cec3abc2199eeb0205d81f" translate="yes" xml:space="preserve">
          <source>instantiation symbol</source>
          <target state="translated">인스턴스화 기호</target>
        </trans-unit>
        <trans-unit id="dccb10a6b2afc0961b7e7149fc86bad7e658f760" translate="yes" xml:space="preserve">
          <source>instruction when possible, this function is no faster than calculating cos(y) and sin(y) separately.</source>
          <target state="translated">가능한 경우이 함수는 cos (y)와 sin (y)를 별도로 계산하는 것보다 빠르지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8fa10f1f56bd2ac8e42e957802a990bdb9427c7f" translate="yes" xml:space="preserve">
          <source>insufficient number of arguments</source>
          <target state="translated">불충분 한 수의 인수</target>
        </trans-unit>
        <trans-unit id="46f8ab7c0cff9df7cd124852e26022a6bf89e315" translate="yes" xml:space="preserve">
          <source>int</source>
          <target state="translated">int</target>
        </trans-unit>
        <trans-unit id="f432feba1468c878f9f8cac6c1ac3f73f247b105" translate="yes" xml:space="preserve">
          <source>int *psz</source>
          <target state="translated">int * psz</target>
        </trans-unit>
        <trans-unit id="053f5197645102670adc74a1df6456d4f6a3c5e7" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;charnum&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;charnum&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2e64d998c6c12b79264ce14f23bfdb9c62a89d17" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;codePage&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;codePage&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b5e478ba2bfb6858286b546532c799b0cc1f29a0" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;cost&lt;/code&gt;</source>
          <target state="translated">INT &lt;code&gt;cost&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bfcb5e1e85846d3869b924f5751fdaba4d72fb2c" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;currMonth&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;currMonth&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9ec0d8ffd9336b5555d2baecc78599fa69e84949" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;day&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;day&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="266e3ba184effee28f68ef7ee11a1b83169997e8" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;days&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;days&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6c8461c419191c9b67a87c51c7ad5eb196994991" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;dim&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;dim&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8d47026c93207f4ff133b79c3731b2b6aa14c5e4" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;fd&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;fd&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c39762ed244f8259614044c40f15c23b036c7485" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;flag&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;flag&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eefb1a5c1b033403dcfad28133bb656adc106ef0" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;flags&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;flags&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a15abd9fbadd49862eef8a452da9c2a50bfa91fc" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;handler&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;handler&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="09453f270ffac2f41810282b18e20f0aecac1926" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;hour&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;hour&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1273a60326ddce6e1670192ea19eab5da5164ba9" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;indent&lt;/code&gt;</source>
          <target state="translated">INT &lt;code&gt;indent&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="50c4c4f14bdfebdf604a348b1f9713eb5ade8391" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;interval&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;interval&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="742d0c9cd84865521f6137538f056d168f84a151" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;intypeof&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;intypeof&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a80a518f5debd4918d0d6670a55635df18f33413" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;level&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;level&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7a304cd8a76af4da35796f0e9449d11767646132" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;line&lt;/code&gt;</source>
          <target state="translated">INT &lt;code&gt;line&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4a7f93f068352af46ea22008665b5df925c3c294" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;maxDepth&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;maxDepth&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="94886344f390b9e360500cd705cb7fabe5da911c" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;minute&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;minute&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="75ebf0b20675c09d7009d8d1fe86e88994360965" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;mode&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;mode&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d9166c3df3a133151352dee1357da84dcb26883d" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;month&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;month&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d3581173bae3cebc4a345ea58d7e03621d8e42fb" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;months&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;months&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9f950c560d286c74d3b897b0948f48e94dc88925" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;n&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;n&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c945a9a13a6f3105554cceb9ce092518acbe8603" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;origin&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;origin&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="114fd438c8d60a57535fd1f4e340f03f510e236b" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;result&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;result&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d89491f2b94596d56e73a30aec98895fdff0ac50" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;second&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;second&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="92505827ab14939b4fce84441f5911bad8decc02" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;status&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;status&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="51c4c4f8f96b306704a73ca292f78f176bf91777" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;sz&lt;/code&gt;</source>
          <target state="translated">INT &lt;code&gt;sz&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c5930cc35f258e035edc4f7974c5448fbadb1192" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;time&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;time&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e3ff4b08322260bc095347a5ead7b10920c2d5e2" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;tynto&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;tynto&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c752f93639d90f3737c132424b8b8a3bc5dd35b6" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;tyto&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;tyto&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ec1fa05817d904823998e4bf4c9e3a163c03bd1a" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;val&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;val&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ea65be2c9fdaac2710df07644773b24c6e1a3138" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;value&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;value&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="12db42fe0697881cdcce999f0e003e8ea8e50d53" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;ver&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;ver&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="40241a269bd7301363d74f433fb32220678b4c90" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;winbits&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;winbits&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d7b438d7edb5403d81a268a26271383b6d5938c2" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8388230e060e278b30c0621cc4f60d81f6cca2f4" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;y&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;y&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="af1934188b2e6eb44769faa2045708c601a444a5" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;year&lt;/code&gt;</source>
          <target state="translated">INT &lt;code&gt;year&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ef60bd8da41d1d4d75c656711424ca417de43afd" translate="yes" xml:space="preserve">
          <source>int &lt;code&gt;years&lt;/code&gt;</source>
          <target state="translated">int &lt;code&gt;years&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0fd8ee32169f107db6fe419b742512233e53d928" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;RealIdentical&quot;&gt;RealIdentical&lt;/strong&gt;(real_t x1, real_t x2);</source>
          <target state="translated">int &lt;strong id=&quot;RealIdentical&quot;&gt;RealIdentical&lt;/strong&gt; (real_t x1, real_t x2);</target>
        </trans-unit>
        <trans-unit id="16080ff3f4f46aa5026902ae2f5689d421a0b3bd" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_Dmain&quot;&gt;_Dmain&lt;/strong&gt;(char[][]);</source>
          <target state="translated">INT &lt;strong id=&quot;_Dmain&quot;&gt;_Dmain&lt;/strong&gt; (CHAR [] []);</target>
        </trans-unit>
        <trans-unit id="c43485afe9764cb0dd3d0182adfb80ac5090428c" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aApplyRcw1&quot;&gt;_aApplyRcw1&lt;/strong&gt;(in char[] aa, dg_t dg);</source>
          <target state="translated">INT &lt;strong id=&quot;_aApplyRcw1&quot;&gt;_aApplyRcw1&lt;/strong&gt; (숯에서 [] 단, dg_t DG);</target>
        </trans-unit>
        <trans-unit id="74e51f4ae14f2e04c71f8881c57e8d2b9e365140" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aApplyRcw2&quot;&gt;_aApplyRcw2&lt;/strong&gt;(in char[] aa, dg2_t dg);</source>
          <target state="translated">INT &lt;strong id=&quot;_aApplyRcw2&quot;&gt;_aApplyRcw2&lt;/strong&gt; (숯에서 [] 단, dg2_t DG);</target>
        </trans-unit>
        <trans-unit id="2f44caddb599f7a630599dac70cfd7fcb8ea7ede" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aApplyRdc1&quot;&gt;_aApplyRdc1&lt;/strong&gt;(in dchar[] aa, dg_t dg);</source>
          <target state="translated">INT &lt;strong id=&quot;_aApplyRdc1&quot;&gt;_aApplyRdc1&lt;/strong&gt; (dchar에서 [] 단, dg_t DG);</target>
        </trans-unit>
        <trans-unit id="b20d49b94191fd2ce5798f4add70ed8aea17e395" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aApplyRdc2&quot;&gt;_aApplyRdc2&lt;/strong&gt;(in dchar[] aa, dg2_t dg);</source>
          <target state="translated">INT &lt;strong id=&quot;_aApplyRdc2&quot;&gt;_aApplyRdc2&lt;/strong&gt; (dchar에서 [] 단, dg2_t DG);</target>
        </trans-unit>
        <trans-unit id="a2ede26accb897b03171a20125c1d6a2212f55f9" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aApplyRdw1&quot;&gt;_aApplyRdw1&lt;/strong&gt;(in dchar[] aa, dg_t dg);</source>
          <target state="translated">INT &lt;strong id=&quot;_aApplyRdw1&quot;&gt;_aApplyRdw1&lt;/strong&gt; (dchar에서 [] 단, dg_t DG);</target>
        </trans-unit>
        <trans-unit id="06c488170900c13b1c0b52a096675d02f7dce68a" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aApplyRdw2&quot;&gt;_aApplyRdw2&lt;/strong&gt;(in dchar[] aa, dg2_t dg);</source>
          <target state="translated">INT &lt;strong id=&quot;_aApplyRdw2&quot;&gt;_aApplyRdw2&lt;/strong&gt; (dchar에서 [] 단, dg2_t DG);</target>
        </trans-unit>
        <trans-unit id="324884ec98e25167a936081c4c9bac20603790b2" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aApplyRwc1&quot;&gt;_aApplyRwc1&lt;/strong&gt;(in wchar[] aa, dg_t dg);</source>
          <target state="translated">INT &lt;strong id=&quot;_aApplyRwc1&quot;&gt;_aApplyRwc1&lt;/strong&gt; (WCHAR에서 [] 단, dg_t DG);</target>
        </trans-unit>
        <trans-unit id="bffbaa11e80e78192e1801122eaa6ec1bbfbf719" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aApplyRwc2&quot;&gt;_aApplyRwc2&lt;/strong&gt;(in wchar[] aa, dg2_t dg);</source>
          <target state="translated">INT &lt;strong id=&quot;_aApplyRwc2&quot;&gt;_aApplyRwc2&lt;/strong&gt; (WCHAR에서 [] 단, dg2_t DG);</target>
        </trans-unit>
        <trans-unit id="d674ca88ee117ee3101016cd14c83016951144af" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aApplyRwd1&quot;&gt;_aApplyRwd1&lt;/strong&gt;(in wchar[] aa, dg_t dg);</source>
          <target state="translated">INT &lt;strong id=&quot;_aApplyRwd1&quot;&gt;_aApplyRwd1&lt;/strong&gt; (WCHAR에서 [] 단, dg_t DG);</target>
        </trans-unit>
        <trans-unit id="d0e4e2f78593a8c2deda7cd014f40afa4553d717" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aApplyRwd2&quot;&gt;_aApplyRwd2&lt;/strong&gt;(in wchar[] aa, dg2_t dg);</source>
          <target state="translated">INT &lt;strong id=&quot;_aApplyRwd2&quot;&gt;_aApplyRwd2&lt;/strong&gt; (WCHAR에서 [] 단, dg2_t DG);</target>
        </trans-unit>
        <trans-unit id="2e2ccad6c9a28b9973c9ded77d950ad76c17b621" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aApplycw1&quot;&gt;_aApplycw1&lt;/strong&gt;(in char[] aa, dg_t dg);</source>
          <target state="translated">INT &lt;strong id=&quot;_aApplycw1&quot;&gt;_aApplycw1&lt;/strong&gt; (숯에서 [] 단, dg_t DG);</target>
        </trans-unit>
        <trans-unit id="0edc39022978ee37d0550bd664c33f26a58071b6" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aApplycw2&quot;&gt;_aApplycw2&lt;/strong&gt;(in char[] aa, dg2_t dg);</source>
          <target state="translated">INT &lt;strong id=&quot;_aApplycw2&quot;&gt;_aApplycw2&lt;/strong&gt; (숯에서 [] 단, dg2_t DG);</target>
        </trans-unit>
        <trans-unit id="a7ff747b520d2d37de5df7265be9e9fff108497f" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aApplydc1&quot;&gt;_aApplydc1&lt;/strong&gt;(in dchar[] aa, dg_t dg);</source>
          <target state="translated">INT &lt;strong id=&quot;_aApplydc1&quot;&gt;_aApplydc1&lt;/strong&gt; (dchar에서 [] 단, dg_t DG);</target>
        </trans-unit>
        <trans-unit id="42f97e4598f292345b0133895c783f3f7f9121e8" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aApplydc2&quot;&gt;_aApplydc2&lt;/strong&gt;(in dchar[] aa, dg2_t dg);</source>
          <target state="translated">INT &lt;strong id=&quot;_aApplydc2&quot;&gt;_aApplydc2&lt;/strong&gt; (dchar에서 [] 단, dg2_t DG);</target>
        </trans-unit>
        <trans-unit id="8d0664c6ed52558bc2eb1167b54db054600c39cf" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aApplydw1&quot;&gt;_aApplydw1&lt;/strong&gt;(in dchar[] aa, dg_t dg);</source>
          <target state="translated">INT &lt;strong id=&quot;_aApplydw1&quot;&gt;_aApplydw1&lt;/strong&gt; (dchar에서 [] 단, dg_t DG);</target>
        </trans-unit>
        <trans-unit id="4ea9e440f991914ebabb8a35b01fa0beb7f72a75" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aApplydw2&quot;&gt;_aApplydw2&lt;/strong&gt;(in dchar[] aa, dg2_t dg);</source>
          <target state="translated">INT &lt;strong id=&quot;_aApplydw2&quot;&gt;_aApplydw2&lt;/strong&gt; (dchar에서 [] 단, dg2_t DG);</target>
        </trans-unit>
        <trans-unit id="7f168d09eb7f8b49d6fb830ad1b3e5b3ac9ceb3b" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aApplywc1&quot;&gt;_aApplywc1&lt;/strong&gt;(in wchar[] aa, dg_t dg);</source>
          <target state="translated">INT &lt;strong id=&quot;_aApplywc1&quot;&gt;_aApplywc1&lt;/strong&gt; (WCHAR에서 [] 단, dg_t DG);</target>
        </trans-unit>
        <trans-unit id="11e7c82e67345e6b8897e93056db45dce68b8627" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aApplywc2&quot;&gt;_aApplywc2&lt;/strong&gt;(in wchar[] aa, dg2_t dg);</source>
          <target state="translated">INT &lt;strong id=&quot;_aApplywc2&quot;&gt;_aApplywc2&lt;/strong&gt; (WCHAR에서 [] 단, dg2_t DG);</target>
        </trans-unit>
        <trans-unit id="77a307847b966394f44c7c661696df77b2a4002e" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aApplywd1&quot;&gt;_aApplywd1&lt;/strong&gt;(in wchar[] aa, dg_t dg);</source>
          <target state="translated">INT &lt;strong id=&quot;_aApplywd1&quot;&gt;_aApplywd1&lt;/strong&gt; (WCHAR에서 [] 단, dg_t DG);</target>
        </trans-unit>
        <trans-unit id="a57f1be08e4aba17ddbec15a20a88d7e71458b47" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aApplywd2&quot;&gt;_aApplywd2&lt;/strong&gt;(in wchar[] aa, dg2_t dg);</source>
          <target state="translated">INT &lt;strong id=&quot;_aApplywd2&quot;&gt;_aApplywd2&lt;/strong&gt; (WCHAR에서 [] 단, dg2_t DG);</target>
        </trans-unit>
        <trans-unit id="4972239e212365fd3df9e222d2ba2ecdb1a560ff" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aaApply&quot;&gt;_aaApply&lt;/strong&gt;(AA aa, const size_t keysz, dg_t dg);</source>
          <target state="translated">int &lt;strong id=&quot;_aaApply&quot;&gt;_aaApply&lt;/strong&gt;(AA aa, const size_t keysz, dg_t dg);</target>
        </trans-unit>
        <trans-unit id="a04ff773bcb605484c532945178a3cca41eb0f08" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aaApply&quot;&gt;_aaApply&lt;/strong&gt;(AA aa, in size_t keysz, dg_t dg);</source>
          <target state="translated">INT &lt;strong id=&quot;_aaApply&quot;&gt;_aaApply&lt;/strong&gt; (AA 단,이 size_t keysz에서 dg_t DG);</target>
        </trans-unit>
        <trans-unit id="5775be6c311bbfe7100d36dba5b437e749e79355" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aaApply2&quot;&gt;_aaApply2&lt;/strong&gt;(AA aa, const size_t keysz, dg2_t dg);</source>
          <target state="translated">int &lt;strong id=&quot;_aaApply2&quot;&gt;_aaApply2&lt;/strong&gt;(AA aa, const size_t keysz, dg2_t dg);</target>
        </trans-unit>
        <trans-unit id="772ca7c991e122d28b924b4f43bb63b76bddeb86" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aaApply2&quot;&gt;_aaApply2&lt;/strong&gt;(AA aa, in size_t keysz, dg2_t dg);</source>
          <target state="translated">INT &lt;strong id=&quot;_aaApply2&quot;&gt;_aaApply2&lt;/strong&gt; (AA 단,이 size_t keysz에서 dg2_t DG);</target>
        </trans-unit>
        <trans-unit id="8cb96220bcb11e4b4f86dbcf833af0b80d46a323" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aaEqual&quot;&gt;_aaEqual&lt;/strong&gt;(in TypeInfo tiRaw, in AA aa1, in AA aa2);</source>
          <target state="translated">INT &lt;strong id=&quot;_aaEqual&quot;&gt;_aaEqual&lt;/strong&gt; (소속 카테고리 tiRaw에서 AA의 AA2에서 AA의 AA1에서);</target>
        </trans-unit>
        <trans-unit id="56e66f6c2a3223be06ad83b5c7f431f00003abe2" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_aaEqual&quot;&gt;_aaEqual&lt;/strong&gt;(scope const TypeInfo tiRaw, scope const AA aa1, scope const AA aa2);</source>
          <target state="translated">int &lt;strong id=&quot;_aaEqual&quot;&gt;_aaEqual&lt;/strong&gt; (범위 const TypeInfo tiRaw, 범위 const AA aa1, 범위 const AA aa2);</target>
        </trans-unit>
        <trans-unit id="13cfea9760badd4ed262065622558d789a31c47f" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_adEq2&quot;&gt;_adEq2&lt;/strong&gt;(void[] a1, void[] a2, TypeInfo ti);</source>
          <target state="translated">INT &lt;strong id=&quot;_adEq2&quot;&gt;_adEq2&lt;/strong&gt; (보이드 [] A1 무효 [] (A2), 소속 카테고리 TI);</target>
        </trans-unit>
        <trans-unit id="41ca32b78f171e7a5775e5c0021c6d54bc62098c" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;_d_run_main&quot;&gt;_d_run_main&lt;/strong&gt;(int argc, char** argv, MainFunc mainFunc);</source>
          <target state="translated">int &lt;strong id=&quot;_d_run_main&quot;&gt;_d_run_main&lt;/strong&gt; (int argc, char ** argv, MainFunc mainFunc);</target>
        </trans-unit>
        <trans-unit id="96634d0d6b78847d703459b126ef7c0cd922a2dc" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;actionTableLookup&quot;&gt;actionTableLookup&lt;/strong&gt;(_Unwind_Exception* exceptionObject, uint actionRecordPtr, const(ubyte)* pActionTable, const(ubyte)* tt, ubyte TType, _Unwind_Exception_Class exceptionClass, const(ubyte)* lsda);</source>
          <target state="translated">int &lt;strong id=&quot;actionTableLookup&quot;&gt;actionTableLookup&lt;/strong&gt; (_Unwind_Exception * exceptionObject, uint actionRecordPtr, const (ubyte) * pActionTable, const (ubyte) * tt, ubyte TType, _Unwind_Exception_Class exceptionClass, const (ubyte) * lsda);</target>
        </trans-unit>
        <trans-unit id="367cafc18385efc6223f0fb08d7479d4532a86d9" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;adds&quot;&gt;adds&lt;/strong&gt;()(int x, int y, ref bool overflow);</source>
          <target state="translated">int &lt;strong id=&quot;adds&quot;&gt;는&lt;/strong&gt; () (int x, int y, ref bool overflow)를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="6f9640d7872e90718a53396baeedb4e58e3d9ede" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;apply&quot;&gt;apply&lt;/strong&gt;(Dsymbol_apply_ft_t fp, void* param);</source>
          <target state="translated">int &lt;strong id=&quot;apply&quot;&gt;apply&lt;/strong&gt; (Dsymbol_apply_ft_t fp, void * param);</target>
        </trans-unit>
        <trans-unit id="68d52036653bd0442d6af0bd8f50ecacd76e941f" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;argc&quot;&gt;argc&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;argc&quot;&gt;argc&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="e07732077a4f1454eec9b1f1062099b0d89977f1" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;blockExit&quot;&gt;blockExit&lt;/strong&gt;(Statement s, FuncDeclaration func, bool mustNotThrow);</source>
          <target state="translated">int &lt;strong id=&quot;blockExit&quot;&gt;blockExit&lt;/strong&gt; (Statement s, FuncDeclaration func, bool mustNotThrow);</target>
        </trans-unit>
        <trans-unit id="ad8445dda8ee9604a97b5f8629606000d8ce34ea" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;callSideEffectLevel&quot;&gt;callSideEffectLevel&lt;/strong&gt;(FuncDeclaration f);</source>
          <target state="translated">int &lt;strong id=&quot;callSideEffectLevel&quot;&gt;callSideEffectLevel&lt;/strong&gt; (FuncDeclaration f);</target>
        </trans-unit>
        <trans-unit id="347e39e7bba717be563a3087719972ac102948ef" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;cmp&quot;&gt;cmp&lt;/strong&gt;(alias pred, R1, R2)(R1 r1, R2 r2)</source>
          <target state="translated">int &lt;strong id=&quot;cmp&quot;&gt;cmp&lt;/strong&gt; (별칭 pred, R1, R2) (R1 r1, R2 r2)</target>
        </trans-unit>
        <trans-unit id="417b5339edbe8f73bce398a1de824229a46b9ae0" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;cppDtorVtblIndex&quot;&gt;cppDtorVtblIndex&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;cppDtorVtblIndex&quot;&gt;cppDtorVtblIndex&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="04bfcf663a606c17fc1428ef1a7fb8f2788dad05" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;ctfeCmp&quot;&gt;ctfeCmp&lt;/strong&gt;(ref const Loc loc, TOK op, Expression e1, Expression e2);</source>
          <target state="translated">int &lt;strong id=&quot;ctfeCmp&quot;&gt;ctfeCmp&lt;/strong&gt; (참조 const Loc loc, TOK op, Expression e1, Expression e2);</target>
        </trans-unit>
        <trans-unit id="7dac9311d2dfaf0d6b892927d49540fcb730f49f" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;ctfeEqual&quot;&gt;ctfeEqual&lt;/strong&gt;(ref const Loc loc, TOK op, Expression e1, Expression e2);</source>
          <target state="translated">int &lt;strong id=&quot;ctfeEqual&quot;&gt;ctfeEqual&lt;/strong&gt; (참조 const Loc loc, TOK op, Expression e1, Expression e2);</target>
        </trans-unit>
        <trans-unit id="9830d829295f8c1f4727bd4de8a019b52166daf4" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;ctfeIdentity&quot;&gt;ctfeIdentity&lt;/strong&gt;(ref const Loc loc, TOK op, Expression e1, Expression e2);</source>
          <target state="translated">int &lt;strong id=&quot;ctfeIdentity&quot;&gt;ctfeIdentity&lt;/strong&gt; (참조 const Loc loc, TOK op, Expression e1, Expression e2);</target>
        </trans-unit>
        <trans-unit id="28c2aacfd4910a6700b083491f376a8e9b7f6bb6" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;curl_formget&quot;&gt;curl_formget&lt;/strong&gt;(curl_httppost* form, void* arg, curl_formget_callback append);</source>
          <target state="translated">int &lt;strong id=&quot;curl_formget&quot;&gt;curl_formget&lt;/strong&gt; (curl_httppost * 양식, void * arg, curl_formget_callback 추가);</target>
        </trans-unit>
        <trans-unit id="2770cde0d26dab4ace6c11a45cdb32df00bb8118" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;curl_strequal&quot;&gt;curl_strequal&lt;/strong&gt;(in const(char)* s1, in const(char)* s2);</source>
          <target state="translated">int &lt;strong id=&quot;curl_strequal&quot;&gt;curl_strequal&lt;/strong&gt; (const (char) * s1, const (char) * s2);</target>
        </trans-unit>
        <trans-unit id="7c3bef000cd955b7d278917f9d6d4f8cf3fa3c0a" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;curl_strnequal&quot;&gt;curl_strnequal&lt;/strong&gt;(in const(char)* s1, in const(char)* s2, size_t n);</source>
          <target state="translated">int &lt;strong id=&quot;curl_strnequal&quot;&gt;curl_strnequal&lt;/strong&gt; (const (char) * s1, const (char) * s2, size_t n);</target>
        </trans-unit>
        <trans-unit id="39d3b43a6ecc22ea8cdac349dce9799e63dcc0d6" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;errorCode&quot;&gt;errorCode&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;errorCode&quot;&gt;errorCode&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="55c4d7bfb6e2a51616fc3969c83fd2aa61bb7642" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;execv&quot;&gt;execv&lt;/strong&gt;(in string pathname, in string[] argv);</source>
          <target state="translated">int &lt;strong id=&quot;execv&quot;&gt;execv&lt;/strong&gt; (문자열 경로명, 문자열 [] argv);</target>
        </trans-unit>
        <trans-unit id="0c63169e2943b45558dcb60d2c6c2f977711d42f" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;execve&quot;&gt;execve&lt;/strong&gt;(in string pathname, in string[] argv, in string[] envp);</source>
          <target state="translated">int &lt;strong id=&quot;execve&quot;&gt;execve&lt;/strong&gt; (문자열 경로명, 문자열 [] argv, 문자열 [] envp);</target>
        </trans-unit>
        <trans-unit id="3bfac5d442446429b617a22c90fe90de203ec51d" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;execvp&quot;&gt;execvp&lt;/strong&gt;(in string pathname, in string[] argv);</source>
          <target state="translated">int &lt;strong id=&quot;execvp&quot;&gt;execvp&lt;/strong&gt; (문자열 경로 이름, 문자열 [] argv);</target>
        </trans-unit>
        <trans-unit id="904509e8a7cd3fe6c22de1d089caabfb65b4e47a" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;execvpe&quot;&gt;execvpe&lt;/strong&gt;(in string pathname, in string[] argv, in string[] envp);</source>
          <target state="translated">int &lt;strong id=&quot;execvpe&quot;&gt;execvpe&lt;/strong&gt; (문자열 경로명, 문자열 [] argv, 문자열 [] envp);</target>
        </trans-unit>
        <trans-unit id="af60045f1722e01ba87661b688c399d1fc033a04" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;family&quot;&gt;family&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;family&quot;&gt;가족&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="f75b586a4ec76f3c2617e35e0edd36e1252ae7a4" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;features&quot;&gt;features&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;features&quot;&gt;기능&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="09f11722765089db618404b36b6cc894baa45e55" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;filenameCmp&quot;&gt;filenameCmp&lt;/strong&gt;(CaseSensitive cs = CaseSensitive.osDefault, Range1, Range2)(Range1 filename1, Range2 filename2)</source>
          <target state="translated">int &lt;strong id=&quot;filenameCmp&quot;&gt;filenameCmp&lt;/strong&gt; (CaseSensitive cs = CaseSensitive.osDefault, Range1, Range2) (Range1 filename1, Range2 filename2)</target>
        </trans-unit>
        <trans-unit id="846d87b3fb71dd78a1eb5e5f0cd4ae2a1de6e387" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;foreachDsymbol&quot;&gt;foreachDsymbol&lt;/strong&gt;(Dsymbols* symbols, scope int delegate(Dsymbol) dg);</source>
          <target state="translated">int &lt;strong id=&quot;foreachDsymbol&quot;&gt;foreachDsymbol&lt;/strong&gt; (Dsymbols * 기호, scope int delegate (Dsymbol) dg);</target>
        </trans-unit>
        <trans-unit id="6bca36c8556ad39d83e8aa5583ffe8db7fc93061" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;getFieldIndex&quot;&gt;getFieldIndex&lt;/strong&gt;(Type type, uint offset);</source>
          <target state="translated">int &lt;strong id=&quot;getFieldIndex&quot;&gt;getFieldIndex&lt;/strong&gt; (유형 유형, uint 오프셋);</target>
        </trans-unit>
        <trans-unit id="43d67c1e36e5eb6bf1c4e5cb70f156287aee88f2" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;getc&quot;&gt;getc&lt;/strong&gt;()(FILE* stream);</source>
          <target state="translated">int &lt;strong id=&quot;getc&quot;&gt;getc&lt;/strong&gt; () (FILE * 스트림);</target>
        </trans-unit>
        <trans-unit id="0c7a9b2740a7a79221d60e641c2af71112878025" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;getchar&quot;&gt;getchar&lt;/strong&gt;()();</source>
          <target state="translated">int &lt;strong id=&quot;getchar&quot;&gt;getchar&lt;/strong&gt; () ();</target>
        </trans-unit>
        <trans-unit id="3501b605e84f36a9edf7ad3676043ff73d3a676d" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;gid&quot;&gt;gid&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;gid&quot;&gt;gid&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="afffbce4798c1b9d39e1268ad160ad108cc4ddc3" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;hasNoDefault&quot;&gt;hasNoDefault&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;hasNoDefault&quot;&gt;hasNoDefault&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="747f2fbfd358cab4c2593fe76774893a637f0dbb" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;hasReturnExp&quot;&gt;hasReturnExp&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;hasReturnExp&quot;&gt;hasReturnExp&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="5ee738f7ae80c3d3c8171958d063f4ee8e0f6f9c" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;hasVars&quot;&gt;hasVars&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;hasVars&quot;&gt;hasVars&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="7ae2df04ec6cc36acf4141787662ceacd9aac915" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;hookOpCmp&quot;&gt;hookOpCmp&lt;/strong&gt;(Lhs, Rhs)(Lhs lhs, Rhs rhs);</source>
          <target state="translated">int &lt;strong id=&quot;hookOpCmp&quot;&gt;hookOpCmp&lt;/strong&gt; (Lhs, Rhs) (Lhs lhs, Rhs rhs);</target>
        </trans-unit>
        <trans-unit id="12526bf78d456bbf93453807a11c02b868315417" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;icmp&quot;&gt;icmp&lt;/strong&gt;(S1, S2)(S1 r1, S2 r2)</source>
          <target state="translated">int &lt;strong id=&quot;icmp&quot;&gt;icmp&lt;/strong&gt; (S1, S2) (S1 r1, S2 r2)</target>
        </trans-unit>
        <trans-unit id="523542060827aada49749b5710fc92d19a29ecb1" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;iconv_ver_num&quot;&gt;iconv_ver_num&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;iconv_ver_num&quot;&gt;iconv_ver_num&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="184594f9509dfe986c0f154ef3b1346a6671d16b" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;idxNum&quot;&gt;idxNum&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;idxNum&quot;&gt;idxNum&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="cd9ebc7365ddf3a35672d55111d5e2ef794cf39e" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;imports&quot;&gt;imports&lt;/strong&gt;(Module m);</source>
          <target state="translated">int &lt;strong id=&quot;imports&quot;&gt;수입품&lt;/strong&gt; (모듈 m);</target>
        </trans-unit>
        <trans-unit id="cdd433fb36490a178c50baedbba119d3b0a85679" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;inlineCostExpression&quot;&gt;inlineCostExpression&lt;/strong&gt;(Expression e);</source>
          <target state="translated">int &lt;strong id=&quot;inlineCostExpression&quot;&gt;inlineCostExpression&lt;/strong&gt; (식 e);</target>
        </trans-unit>
        <trans-unit id="8f18938aa5ea2940116d0c7a18e21c83fc359d26" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;inlineCostFunction&quot;&gt;inlineCostFunction&lt;/strong&gt;(FuncDeclaration fd, bool hasthis, bool hdrscan);</source>
          <target state="translated">int &lt;strong id=&quot;inlineCostFunction&quot;&gt;inlineCostFunction&lt;/strong&gt; (FuncDeclaration fd, bool hasthis, bool hdrscan);</target>
        </trans-unit>
        <trans-unit id="11fec9043602149b923752e5947a8375e5df5c19" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;inlineNest&quot;&gt;inlineNest&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;inlineNest&quot;&gt;inlineNest&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="6c019b21872caa87443c5dd4e0104be2205d7a1e" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;intSignedCmp&quot;&gt;intSignedCmp&lt;/strong&gt;(TOK op, sinteger_t n1, sinteger_t n2);</source>
          <target state="translated">int &lt;strong id=&quot;intSignedCmp&quot;&gt;intSignedCmp&lt;/strong&gt; (TOK op, sinteger_t n1, sinteger_t n2);</target>
        </trans-unit>
        <trans-unit id="0000e1d83814ad46c38370b4d9d2708f83e2990b" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;intUnsignedCmp&quot;&gt;intUnsignedCmp&lt;/strong&gt;(TOK op, dinteger_t n1, dinteger_t n2);</source>
          <target state="translated">int &lt;strong id=&quot;intUnsignedCmp&quot;&gt;intUnsignedCmp&lt;/strong&gt; (TOK op, dinteger_t n1, dinteger_t n2);</target>
        </trans-unit>
        <trans-unit id="0e6af5941987ebe941c6d114d2497fd2538aaa67" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;intrinsic_op&quot;&gt;intrinsic_op&lt;/strong&gt;(FuncDeclaration fd);</source>
          <target state="translated">int &lt;strong id=&quot;intrinsic_op&quot;&gt;intrinsic_op&lt;/strong&gt; (FuncDeclaration fd);</target>
        </trans-unit>
        <trans-unit id="de17c49337969a52877ce59232329c1e3666241d" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;inuse&quot;&gt;inuse&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;inuse&quot;&gt;inuse&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="86c369124b752423a98b6d1b25f09f21bb6e71d6" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;isConst&quot;&gt;isConst&lt;/strong&gt;(Expression e);</source>
          <target state="translated">int &lt;strong id=&quot;isConst&quot;&gt;isConst&lt;/strong&gt; (식 e);</target>
        </trans-unit>
        <trans-unit id="be379f2515a860213ff5cc0f7d7664e3366c66d6" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;isVectorTypeSupported&quot;&gt;isVectorTypeSupported&lt;/strong&gt;(int sz, Type type);</source>
          <target state="translated">int &lt;strong id=&quot;isVectorTypeSupported&quot;&gt;isVectorTypeSupported&lt;/strong&gt; (int sz, 타입 타입);</target>
        </trans-unit>
        <trans-unit id="655d4714f837ac4fc4179aa0c976516ab607be17" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;line&quot;&gt;line&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;line&quot;&gt;라인&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="51d9b67264d7e26ec673410c716287bbd364580d" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;main&quot;&gt;main&lt;/strong&gt;(int argc, char** argv);</source>
          <target state="translated">int &lt;strong id=&quot;main&quot;&gt;main&lt;/strong&gt; (int argc, char ** argv);</target>
        </trans-unit>
        <trans-unit id="ac1ea29318c260c7aaa3bfe036f4db92ff6daa92" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;moduleinfos_apply&quot;&gt;moduleinfos_apply&lt;/strong&gt;(scope int delegate(immutable(ModuleInfo*)) dg);</source>
          <target state="translated">int &lt;strong id=&quot;moduleinfos_apply&quot;&gt;moduleinfos_apply&lt;/strong&gt; (scope int delegate (immutable (ModuleInfo *)) dg);</target>
        </trans-unit>
        <trans-unit id="c53bee2aae6b53a2c8b607fecad282e7c919b425" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;muls&quot;&gt;muls&lt;/strong&gt;()(int x, int y, ref bool overflow);</source>
          <target state="translated">int &lt;strong id=&quot;muls&quot;&gt;muls&lt;/strong&gt; () (int x, int y, ref bool overflow);</target>
        </trans-unit>
        <trans-unit id="eeeaa147d29a6904265220e3923d966433753aaa" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;nConstraint&quot;&gt;nConstraint&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;nConstraint&quot;&gt;nConstraint&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="661dc6e03c9342e63d0be88155d00c74d284d0ee" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;nOrderBy&quot;&gt;nOrderBy&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;nOrderBy&quot;&gt;nOrderBy&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="415ec5b9c114b385b342bc26f3bb7c0c20040138" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;nParam&quot;&gt;nParam&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;nParam&quot;&gt;nParam&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="edf50f635a3390a29579afddbb7dac9190cb880b" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;nRef&quot;&gt;nRef&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;nRef&quot;&gt;nRef&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="bddb2222b3faa5d57cf4659dffb43697aef5d219" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;needModuleInfo&quot;&gt;needModuleInfo&lt;/strong&gt;();</source>
          <target state="translated">int &lt;strong id=&quot;needModuleInfo&quot;&gt;needModuleInfo&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="b762a5b8021d4bb1fb7de856a03eeac5afe865bd" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;needToFreeIdxStr&quot;&gt;needToFreeIdxStr&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;needToFreeIdxStr&quot;&gt;needToFreeIdxStr&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="cca070b81d833f3fe1299a4347d05127b03b5fe4" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;negs&quot;&gt;negs&lt;/strong&gt;()(int x, ref bool overflow);</source>
          <target state="translated">int &lt;strong id=&quot;negs&quot;&gt;negs&lt;/strong&gt; () (int x, ref bool overflow);</target>
        </trans-unit>
        <trans-unit id="f865d0a2b5fe5b667cccbdb2d0add324053ca14f" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;num_of_certs&quot;&gt;num_of_certs&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;num_of_certs&quot;&gt;num_of_certs&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="903ea9bb11bf7291e07bead472044c626b35de26" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;opApply&quot;&gt;opApply&lt;/strong&gt;(Delegate)(scope Delegate dg)</source>
          <target state="translated">int &lt;strong id=&quot;opApply&quot;&gt;opApply&lt;/strong&gt; (위임자) (범위 위임 dg)</target>
        </trans-unit>
        <trans-unit id="819a9f91607253f46fc9c29b06f2eb3020014fea" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;opApply&quot;&gt;opApply&lt;/strong&gt;(scope int delegate(E));</source>
          <target state="translated">int &lt;strong id=&quot;opApply&quot;&gt;opApply&lt;/strong&gt; (scope int delegate (E));</target>
        </trans-unit>
        <trans-unit id="779971de3edd6a41cea048a9f33b70bc3ed20a4b" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;opApply&quot;&gt;opApply&lt;/strong&gt;(scope int delegate(Throwable) dg);</source>
          <target state="translated">int &lt;strong id=&quot;opApply&quot;&gt;opApply&lt;/strong&gt; (scope int delegate (Throwable) dg);</target>
        </trans-unit>
        <trans-unit id="4535d80470a2c75f0465985c077ea908aad944ea" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;opApply&quot;&gt;opApply&lt;/strong&gt;(scope int delegate(ref bool) dg);</source>
          <target state="translated">int &lt;strong id=&quot;opApply&quot;&gt;opApply&lt;/strong&gt; (scope int delegate (ref bool) dg);</target>
        </trans-unit>
        <trans-unit id="466cd07bc3b8eb50962cfe51f778ee130b4536b3" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;opApply&quot;&gt;opApply&lt;/strong&gt;(scope int delegate(size_t, E));</source>
          <target state="translated">int &lt;strong id=&quot;opApply&quot;&gt;opApply&lt;/strong&gt; (scope int delegate (size_t, E));</target>
        </trans-unit>
        <trans-unit id="1a1ca6f898b216ea68434c783ecf93bfd61ddcbf" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;opApply&quot;&gt;opApply&lt;/strong&gt;(scope int delegate(size_t, ref bool) dg);</source>
          <target state="translated">int &lt;strong id=&quot;opApply&quot;&gt;opApply&lt;/strong&gt; (scope int delegate (size_t, ref bool) dg);</target>
        </trans-unit>
        <trans-unit id="2475193658dfca826d840040c373b573979677cf" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;opCmp&quot;&gt;opCmp&lt;/strong&gt;(Object o);</source>
          <target state="translated">int &lt;strong id=&quot;opCmp&quot;&gt;opCmp&lt;/strong&gt; (오브젝트 o);</target>
        </trans-unit>
        <trans-unit id="85c57a17a26320062ba9da0f9779f22f68f3fb07" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;opCmp&quot;&gt;opCmp&lt;/strong&gt;(R)(R rhs)</source>
          <target state="translated">int &lt;strong id=&quot;opCmp&quot;&gt;opCmp&lt;/strong&gt; (R) (R rhs)</target>
        </trans-unit>
        <trans-unit id="c16e9e4d78f327121b14329190002f989144f84d" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;opCmp&quot;&gt;opCmp&lt;/strong&gt;(T)(T rhs)</source>
          <target state="translated">int &lt;strong id=&quot;opCmp&quot;&gt;opCmp&lt;/strong&gt; (T) (T rhs)</target>
        </trans-unit>
        <trans-unit id="c0c7a76b9d266811f589b09cef64b2b633b155f1" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;orderByConsumed&quot;&gt;orderByConsumed&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;orderByConsumed&quot;&gt;orderByConsumed&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="41cd5482e4b4a4cc6b147dbe3c36c007b8f4919f" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;overloadApply&quot;&gt;overloadApply&lt;/strong&gt;(Dsymbol fstart, scope int delegate(Dsymbol) dg, Scope* sc = null);</source>
          <target state="translated">int &lt;strong id=&quot;overloadApply&quot;&gt;overloadApply&lt;/strong&gt; (Dsymbol fstart, scope int delegate (Dsymbol) dg, Scope * sc = null);</target>
        </trans-unit>
        <trans-unit id="65f43a7516af12f7ad2194f0fa11e57f057dac36" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;precision&quot;&gt;precision&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;precision&quot;&gt;정밀도&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="39faa7bd7cbaf32af379ccaaf0fe47dab1ef6754" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;protocol&quot;&gt;protocol&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;protocol&quot;&gt;프로토콜&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="9d69cf2eac4185bde7c48abcaad974468631e96a" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;putc&quot;&gt;putc&lt;/strong&gt;()(int c, FILE* stream);</source>
          <target state="translated">int &lt;strong id=&quot;putc&quot;&gt;putc&lt;/strong&gt; () (int c, FILE * 스트림);</target>
        </trans-unit>
        <trans-unit id="bd36cfbae3b29f6ec39239307dab5f3a4c9a6d31" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;putchar&quot;&gt;putchar&lt;/strong&gt;()(int c);</source>
          <target state="translated">int &lt;strong id=&quot;putchar&quot;&gt;putchar&lt;/strong&gt; () (int c);</target>
        </trans-unit>
        <trans-unit id="9cbdb4a623b5f8841813a9190747073516e90ebe" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;realCmp&quot;&gt;realCmp&lt;/strong&gt;(TOK op, real_t r1, real_t r2);</source>
          <target state="translated">int &lt;strong id=&quot;realCmp&quot;&gt;realCmp&lt;/strong&gt; (TOK op, real_t r1, real_t r2);</target>
        </trans-unit>
        <trans-unit id="dc7a3335b78725fe2721db621577a6ef84897db6" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;rt_init&quot;&gt;rt_init&lt;/strong&gt;();</source>
          <target state="translated">int &lt;strong id=&quot;rt_init&quot;&gt;rt_init&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="89297d129177c5f3be980082712c1c7568b456e6" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;rt_term&quot;&gt;rt_term&lt;/strong&gt;();</source>
          <target state="translated">int &lt;strong id=&quot;rt_term&quot;&gt;rt_term&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="9ec9c984e10f943527ff096f050b0fb911ba6118" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;rt_unloadLibrary&quot;&gt;rt_unloadLibrary&lt;/strong&gt;(void* ptr);</source>
          <target state="translated">int &lt;strong id=&quot;rt_unloadLibrary&quot;&gt;rt_unloadLibrary&lt;/strong&gt; (void * ptr);</target>
        </trans-unit>
        <trans-unit id="e8ef024b8bf95bc63da3919a712069f42daecc0a" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;runLINK&quot;&gt;runLINK&lt;/strong&gt;();</source>
          <target state="translated">int &lt;strong id=&quot;runLINK&quot;&gt;runLINK&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="bfadb8eeaa3f9b5d40a96bb571df75ac71044f1c" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;runProgram&quot;&gt;runProgram&lt;/strong&gt;();</source>
          <target state="translated">int &lt;strong id=&quot;runProgram&quot;&gt;runProgram&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="85652a2dbfa285571c9ebbdb483eeb285b64140b" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;separatorCharPos&quot;&gt;separatorCharPos&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;separatorCharPos&quot;&gt;separatorCharPos&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="fac236181b38bd2a86179d345878a5d2261730ed" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;separators&quot;&gt;separators&lt;/strong&gt;;</source>
          <target state="translated">정수 &lt;strong id=&quot;separators&quot;&gt;분리기들&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="90ea8b003b63bef83f5564e8c56ecb24567787e2" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;sicmp&quot;&gt;sicmp&lt;/strong&gt;(S1, S2)(scope S1 r1, scope S2 r2)</source>
          <target state="translated">int &lt;strong id=&quot;sicmp&quot;&gt;sicmp&lt;/strong&gt; (S1, S2) (범위 S1 r1, 범위 S2 r2)</target>
        </trans-unit>
        <trans-unit id="11b12bfbede24fa737478205b5931be10bff4c48" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;socktype&quot;&gt;socktype&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;socktype&quot;&gt;양말 형&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="5b062fb99cf937b70682856fd4d822020b0522c5" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;specificCmp&quot;&gt;specificCmp&lt;/strong&gt;(TOK op, int rawCmp);</source>
          <target state="translated">int &lt;strong id=&quot;specificCmp&quot;&gt;specificCmp&lt;/strong&gt; (TOK op, int rawCmp);</target>
        </trans-unit>
        <trans-unit id="1938fc0c60809337cf334a1bd199464dc70bf4c7" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;stageflags&quot;&gt;stageflags&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;stageflags&quot;&gt;stageflags&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="947afed3a0c2c4e27a50e078ceda6d70340839d0" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;subs&quot;&gt;subs&lt;/strong&gt;()(int x, int y, ref bool overflow);</source>
          <target state="translated">int &lt;strong id=&quot;subs&quot;&gt;subs&lt;/strong&gt; () (int x, int y, ref bool overflow);</target>
        </trans-unit>
        <trans-unit id="a9545f2841e5f4e66522023eafe57d8e89493a3d" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;tm_hour&quot;&gt;tm_hour&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;tm_hour&quot;&gt;tm_hour&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="3f3c83c78b0a248c733f299161b0bc55ec84290c" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;tm_isdst&quot;&gt;tm_isdst&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;tm_isdst&quot;&gt;tm_isdst&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="001e90fb8207ec7538b9874e4d9727ef9f9b63aa" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;tm_mday&quot;&gt;tm_mday&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;tm_mday&quot;&gt;tm_mday&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="0f48e9cd8c2854ef9ea92b0c6663e83b178044ab" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;tm_min&quot;&gt;tm_min&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;tm_min&quot;&gt;tm_min&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="3725899ec4ef8ed8edad88665e404c3ea32d651a" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;tm_mon&quot;&gt;tm_mon&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;tm_mon&quot;&gt;tm_mon&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="9166d4ab1b7be0c9c1882bbc96d46e1d06137c09" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;tm_sec&quot;&gt;tm_sec&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;tm_sec&quot;&gt;tm_sec&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="3f6dfd78618b9758f94014194dc87a328b791570" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;tm_wday&quot;&gt;tm_wday&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;tm_wday&quot;&gt;tm_wday&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="ed0da5a7d8d0e076bed4e22d325c18d618c3a1a6" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;tm_yday&quot;&gt;tm_yday&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;tm_yday&quot;&gt;tm_yday&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="a51b361a7187953d71343b36d50148a58bc3a4bc" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;tm_year&quot;&gt;tm_year&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;tm_year&quot;&gt;tm_year&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="2b964638e70b363e07daffc1b8c4b5e8d4a04964" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;tookAddressOf&quot;&gt;tookAddressOf&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;tookAddressOf&quot;&gt;tookAddressOf&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="36a4f94cb76443b097a1d3c1b29e4bb2486e9631" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;uid&quot;&gt;uid&lt;/strong&gt;;</source>
          <target state="translated">INT는 &lt;strong id=&quot;uid&quot;&gt;uid를&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="345414d80c480f420381b80e56dab6be866547ab" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;utfStride&quot;&gt;utfStride&lt;/strong&gt;(const(char)* p);</source>
          <target state="translated">int &lt;strong id=&quot;utfStride&quot;&gt;utfStride&lt;/strong&gt; (const (char) * p);</target>
        </trans-unit>
        <trans-unit id="e253185faaca63d49ef7534379cfadb7cb61c1e3" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;vtblIndex&quot;&gt;vtblIndex&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;vtblIndex&quot;&gt;vtblIndex&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="1c22d1dcd70d4029991670462b5753a14ff52d17" translate="yes" xml:space="preserve">
          <source>int &lt;strong id=&quot;width&quot;&gt;width&lt;/strong&gt;;</source>
          <target state="translated">int &lt;strong id=&quot;width&quot;&gt;너비&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="e5114fd445da580ce813319e5d41877e5a283c43" translate="yes" xml:space="preserve">
          <source>int &lt;u&gt;add&lt;/u&gt;(int</source>
          <target state="translated">int &lt;u&gt;추가&lt;/u&gt; (int</target>
        </trans-unit>
        <trans-unit id="e24e9c92549eba8d2a066e045bbcd8d9f0c1b722" translate="yes" xml:space="preserve">
          <source>int delegate(Dsymbol) &lt;code&gt;dg&lt;/code&gt;</source>
          <target state="translated">int delegate (Dsymbol) &lt;code&gt;dg&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="af4e6ec00515507a4f7bf741934736d41dcef449" translate="yes" xml:space="preserve">
          <source>int delegate(const(char)*) nothrow &lt;code&gt;sink&lt;/code&gt;</source>
          <target state="translated">int delegate (const (char) *) nothrow &lt;code&gt;sink&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a55dab833d5e7b0c1f0966bcf02c7f694f7a07f2" translate="yes" xml:space="preserve">
          <source>int delegate(curl_socket_t, CurlSockType) &lt;code&gt;callback&lt;/code&gt;</source>
          <target state="translated">int delegate (curl_socket_t, CurlSockType) &lt;code&gt;callback&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a038225bccce1ee70597d1a5e5369d4a22a8936" translate="yes" xml:space="preserve">
          <source>int delegate(ref Thread) &lt;code&gt;dg&lt;/code&gt;</source>
          <target state="translated">int delegate (ref Thread) &lt;code&gt;dg&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d41a6ff05d7ace8b407ecc5b76d3789e704b1499" translate="yes" xml:space="preserve">
          <source>int delegate(size_t dlTotal, size_t dlNow, size_t ulTotal, size_t ulNow) &lt;code&gt;callback&lt;/code&gt;</source>
          <target state="translated">int delegate (size_t dlTotal, size_t dlNow, size_t ulTotal, size_t ulNow) &lt;code&gt;callback&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="39a28f46c2acdae8fb1a3fcf3daa937011acb099" translate="yes" xml:space="preserve">
          <source>int function(int) &lt;strong id=&quot;xRoundup&quot;&gt;xRoundup&lt;/strong&gt;;</source>
          <target state="translated">int function (int) &lt;strong id=&quot;xRoundup&quot;&gt;xRoundup&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="fae7fc3e2b644603d141809bb231b3973a7d9994" translate="yes" xml:space="preserve">
          <source>int function(void*) &lt;strong id=&quot;xInit&quot;&gt;xInit&lt;/strong&gt;;</source>
          <target state="translated">int 함수 (void *) &lt;strong id=&quot;xInit&quot;&gt;xInit&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="56783f3b4d68daf3487563f810ff833da0e3fded" translate="yes" xml:space="preserve">
          <source>int function(void*) &lt;strong id=&quot;xSize&quot;&gt;xSize&lt;/strong&gt;;</source>
          <target state="translated">int 함수 (void *) &lt;strong id=&quot;xSize&quot;&gt;xSize&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="adf9d924fe21a9928c2553c91725c28f0e3fe739" translate="yes" xml:space="preserve">
          <source>int int</source>
          <target state="translated">int int</target>
        </trans-unit>
        <trans-unit id="18379a569b15c1204a734453a71260c86fdbb11d" translate="yes" xml:space="preserve">
          <source>int int*</source>
          <target state="translated">int int *</target>
        </trans-unit>
        <trans-unit id="4addda534d99cb6b9853a9ac221fccb0390c19ea" translate="yes" xml:space="preserve">
          <source>int nByte</source>
          <target state="translated">int nByte</target>
        </trans-unit>
        <trans-unit id="0dcc52921ec940f108d1fe3b93344ee1ae5154cb" translate="yes" xml:space="preserve">
          <source>int response_expand(int *pargc,char ***pargv);</source>
          <target state="translated">int response_expand (int * pargc, char *** pargv);</target>
        </trans-unit>
        <trans-unit id="46851c3803dd45f76fca6d9f0ab0fdb289beb2e3" translate="yes" xml:space="preserve">
          <source>int.max</source>
          <target state="translated">int.max</target>
        </trans-unit>
        <trans-unit id="40040637360ed8ae0dca6c7906c5821569302155" translate="yes" xml:space="preserve">
          <source>int.min</source>
          <target state="translated">int.min</target>
        </trans-unit>
        <trans-unit id="19baa746e8062b67575eda40a9423a65c520ff96" translate="yes" xml:space="preserve">
          <source>int16_t</source>
          <target state="translated">int16_t</target>
        </trans-unit>
        <trans-unit id="8fcdcefeb8f1bbab3f3ff2567ecad9be78779217" translate="yes" xml:space="preserve">
          <source>int32_t</source>
          <target state="translated">int32_t</target>
        </trans-unit>
        <trans-unit id="44057bed4938503a9978286d634561eb55751eea" translate="yes" xml:space="preserve">
          <source>int4</source>
          <target state="translated">int4</target>
        </trans-unit>
        <trans-unit id="f6311168933725d3149f768d180f96c9c216469f" translate="yes" xml:space="preserve">
          <source>int64_t</source>
          <target state="translated">int64_t</target>
        </trans-unit>
        <trans-unit id="b74777c55db0fb6707ffab4f3db006eb69c34c57" translate="yes" xml:space="preserve">
          <source>int8</source>
          <target state="translated">int8</target>
        </trans-unit>
        <trans-unit id="fb861bce0ed1d239ae09cac8c3fbccef93edc62f" translate="yes" xml:space="preserve">
          <source>int8_t</source>
          <target state="translated">int8_t</target>
        </trans-unit>
        <trans-unit id="df63469e19bf67abdeee7649d7f983a2d2241f1a" translate="yes" xml:space="preserve">
          <source>int[][] &lt;code&gt;edges&lt;/code&gt;</source>
          <target state="translated">int [] [] &lt;code&gt;edges&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="220fc836b9f56a15987638324cb26cc2596ee572" translate="yes" xml:space="preserve">
          <source>int_fast16_t</source>
          <target state="translated">int_fast16_t</target>
        </trans-unit>
        <trans-unit id="ffff0e736b85a43966641403cc9ad67a363ac5b2" translate="yes" xml:space="preserve">
          <source>int_fast32_t</source>
          <target state="translated">int_fast32_t</target>
        </trans-unit>
        <trans-unit id="d956a8cae2b4af40dededf90a0b42eb33627aa64" translate="yes" xml:space="preserve">
          <source>int_fast64_t</source>
          <target state="translated">int_fast64_t</target>
        </trans-unit>
        <trans-unit id="13de7e996eae18435a9940512c587085307fd28d" translate="yes" xml:space="preserve">
          <source>int_fast8_t</source>
          <target state="translated">int_fast8_t</target>
        </trans-unit>
        <trans-unit id="42b10118d056c23218d273a88494c2bdeb626a27" translate="yes" xml:space="preserve">
          <source>int_least16_t</source>
          <target state="translated">int_least16_t</target>
        </trans-unit>
        <trans-unit id="d62b5ab27f5565c8cb3c5c0971753f3a435de873" translate="yes" xml:space="preserve">
          <source>int_least32_t</source>
          <target state="translated">int_least32_t</target>
        </trans-unit>
        <trans-unit id="78e88850e9c4bc574e7912669af99e6447aa7632" translate="yes" xml:space="preserve">
          <source>int_least64_t</source>
          <target state="translated">int_least64_t</target>
        </trans-unit>
        <trans-unit id="7aeb47c6ae0816168f16d3d3fd93aac7f9617920" translate="yes" xml:space="preserve">
          <source>int_least8_t</source>
          <target state="translated">int_least8_t</target>
        </trans-unit>
        <trans-unit id="1178cafbd64bbbfa77f5ac0a9d5032ed88162781" translate="yes" xml:space="preserve">
          <source>integer</source>
          <target state="translated">integer</target>
        </trans-unit>
        <trans-unit id="0eddf036b72e603c8a49bde65293d6c2248146b4" translate="yes" xml:space="preserve">
          <source>integer &amp;gt; 0</source>
          <target state="translated">정수&amp;gt; 0</target>
        </trans-unit>
        <trans-unit id="09a1ba23bcea3a310f72eaa07047a3971253eb9c" translate="yes" xml:space="preserve">
          <source>integer &amp;lt; 0</source>
          <target state="translated">정수 &amp;lt;0</target>
        </trans-unit>
        <trans-unit id="c8826406b61eda5314a2416a74e230efbfb4d481" translate="yes" xml:space="preserve">
          <source>integer &amp;lt;= 0</source>
          <target state="translated">정수 &amp;lt;= 0</target>
        </trans-unit>
        <trans-unit id="03cf66742b9e5675a0d1d00f66532a007a8718a5" translate="yes" xml:space="preserve">
          <source>integer item from list entry.</source>
          <target state="translated">목록 항목의 정수 항목.</target>
        </trans-unit>
        <trans-unit id="99575d7c55c14e7f69e2fdb0a717c8037329a0e9" translate="yes" xml:space="preserve">
          <source>integer to convert. Can be uint or ulong. If radix is 10, can also be int or long.</source>
          <target state="translated">변환 할 정수. uint 또는 ulong 일 수 있습니다. 기수가 10이면 int 또는 long 일 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="919f1b7fbbbafd5e904c82add2ebe19e8c9d4ec4" translate="yes" xml:space="preserve">
          <source>integral ('o')</source>
          <target state="translated">적분 ( 'o')</target>
        </trans-unit>
        <trans-unit id="64d8544d95fd9035f3da941299c0e6e40519a85e" translate="yes" xml:space="preserve">
          <source>integral ('x', 'X')</source>
          <target state="translated">적분 ( 'x', 'X')</target>
        </trans-unit>
        <trans-unit id="f02b3535776daf3501abc4657d860e221c6a3ce5" translate="yes" xml:space="preserve">
          <source>integral promotion mismatches, where the format specifies a smaller integral type than &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;uint&lt;/code&gt;, such as printing a &lt;code&gt;short&lt;/code&gt; with the &lt;code&gt;%d&lt;/code&gt; format rather than &lt;code&gt;%hd&lt;/code&gt;</source>
          <target state="translated">포맷은보다 작은 일체형 지정 일체 추진 불일치 &lt;code&gt;int&lt;/code&gt; 또는 &lt;code&gt;uint&lt;/code&gt; 같은 인쇄 등, &lt;code&gt;short&lt;/code&gt; 와 &lt;code&gt;%d&lt;/code&gt; 보다는 형식 &lt;code&gt;%hd&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="721fc25e002a982faf0b2dac1687b79c3758ced8" translate="yes" xml:space="preserve">
          <source>integral types</source>
          <target state="translated">일체형</target>
        </trans-unit>
        <trans-unit id="affcd6354b9e7b3e300ed0c379876c2e2cb83de9" translate="yes" xml:space="preserve">
          <source>intended for verifying the logic of your program. That is what &lt;code&gt;assert&lt;/code&gt; is for. Also, do not use &lt;code&gt;enforce&lt;/code&gt; inside of contracts (i.e. inside of &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;out&lt;/code&gt; blocks and &lt;code&gt;invariant&lt;/code&gt;s), because contracts are compiled out when compiling with</source>
          <target state="translated">프로그램의 논리를 확인하기위한 것입니다. 그것이 &lt;code&gt;assert&lt;/code&gt; 대상입니다. 또한, 사용하지 않는 &lt;code&gt;enforce&lt;/code&gt; 계약의 내부 (의 즉, 내부 &lt;code&gt;in&lt;/code&gt; 와 &lt;code&gt;out&lt;/code&gt; 블록과 &lt;code&gt;invariant&lt;/code&gt; 계약이로 컴파일 할 때 밖으로 컴파일되어 있기 때문에,들)</target>
        </trans-unit>
        <trans-unit id="e3dcb120f4e18ae0d807358de02f0576e7e1adab" translate="yes" xml:space="preserve">
          <source>interface &lt;strong id=&quot;BidirectionalAssignable&quot;&gt;BidirectionalAssignable&lt;/strong&gt;(E): ForwardAssignable!E, BidirectionalRange!E;</source>
          <target state="translated">&lt;strong id=&quot;BidirectionalAssignable&quot;&gt;BidirectionalAssignable&lt;/strong&gt; (E) 인터페이스 : ForwardAssignable! E, BidirectionalRange! E;</target>
        </trans-unit>
        <trans-unit id="473eaa2fc02469fafa66d5a690254ea87220ab74" translate="yes" xml:space="preserve">
          <source>interface &lt;strong id=&quot;BidirectionalRange&quot;&gt;BidirectionalRange&lt;/strong&gt;(E): ForwardRange!E;</source>
          <target state="translated">&lt;strong id=&quot;BidirectionalRange&quot;&gt;BidirectionalRange&lt;/strong&gt; (E) 인터페이스 : ForwardRange! E;</target>
        </trans-unit>
        <trans-unit id="4d7ee9c5edcc04fc0ca7d88c228bf701b15b1cff" translate="yes" xml:space="preserve">
          <source>interface &lt;strong id=&quot;CppTypeInfo&quot;&gt;CppTypeInfo&lt;/strong&gt;;</source>
          <target state="translated">&lt;strong id=&quot;CppTypeInfo&quot;&gt;CppTypeInfo&lt;/strong&gt; 인터페이스 ;</target>
        </trans-unit>
        <trans-unit id="63ad8a1058c301bac880fc1eb982978660e3e4cb" translate="yes" xml:space="preserve">
          <source>interface &lt;strong id=&quot;Digest&quot;&gt;Digest&lt;/strong&gt;;</source>
          <target state="translated">인터페이스 &lt;strong id=&quot;Digest&quot;&gt;다이제스트&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="2bce2b7be1dbd540256a777842e6bb50e9bd799b" translate="yes" xml:space="preserve">
          <source>interface &lt;strong id=&quot;ForwardAssignable&quot;&gt;ForwardAssignable&lt;/strong&gt;(E): InputAssignable!E, ForwardRange!E;</source>
          <target state="translated">&lt;strong id=&quot;ForwardAssignable&quot;&gt;ForwardAssignable&lt;/strong&gt; (E) 인터페이스 : InputAssignable! E, ForwardRange! E;</target>
        </trans-unit>
        <trans-unit id="859721fca6f798f2909d8be3b4bd9ff337df9663" translate="yes" xml:space="preserve">
          <source>interface &lt;strong id=&quot;ForwardRange&quot;&gt;ForwardRange&lt;/strong&gt;(E): InputRange!E;</source>
          <target state="translated">&lt;strong id=&quot;ForwardRange&quot;&gt;ForwardRange&lt;/strong&gt; 인터페이스 (E) : InputRange! E;</target>
        </trans-unit>
        <trans-unit id="3e81a4de834d4c4b8738f69918e1dba0b24c9ab8" translate="yes" xml:space="preserve">
          <source>interface &lt;strong id=&quot;IAllocator&quot;&gt;IAllocator&lt;/strong&gt;;</source>
          <target state="translated">인터페이스 &lt;strong id=&quot;IAllocator&quot;&gt;IAllocator&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="f9077e9d0fcaa733507fa5e8f1de37e58e43281d" translate="yes" xml:space="preserve">
          <source>interface &lt;strong id=&quot;ISharedAllocator&quot;&gt;ISharedAllocator&lt;/strong&gt;;</source>
          <target state="translated">인터페이스 &lt;strong id=&quot;ISharedAllocator&quot;&gt;ISharedAllocator&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="276e9c8821028bfab2d57e1967b1a749cca8c519" translate="yes" xml:space="preserve">
          <source>interface &lt;strong id=&quot;InputAssignable&quot;&gt;InputAssignable&lt;/strong&gt;(E): InputRange!E;</source>
          <target state="translated">&lt;strong id=&quot;InputAssignable&quot;&gt;InputAssignable&lt;/strong&gt; (E) 인터페이스 : InputRange! E;</target>
        </trans-unit>
        <trans-unit id="1825297ba762bea4970a9f01dc8cd3def4be68e6" translate="yes" xml:space="preserve">
          <source>interface &lt;strong id=&quot;InputRange&quot;&gt;InputRange&lt;/strong&gt;(E);</source>
          <target state="translated">&lt;strong id=&quot;InputRange&quot;&gt;InputRange&lt;/strong&gt; 인터페이스 (E);</target>
        </trans-unit>
        <trans-unit id="c93b1263f92aa258819c5be7fa372202678f5bc0" translate="yes" xml:space="preserve">
          <source>interface &lt;strong id=&quot;OutputRange&quot;&gt;OutputRange&lt;/strong&gt;(E);</source>
          <target state="translated">인터페이스 &lt;strong id=&quot;OutputRange&quot;&gt;OutputRange&lt;/strong&gt; (E);</target>
        </trans-unit>
        <trans-unit id="57f49cfba2482564f9744afe7f4b20ae76255c76" translate="yes" xml:space="preserve">
          <source>interface &lt;strong id=&quot;RandomAccessFinite&quot;&gt;RandomAccessFinite&lt;/strong&gt;(E): BidirectionalRange!E;</source>
          <target state="translated">&lt;strong id=&quot;RandomAccessFinite&quot;&gt;RandomAccessFinite&lt;/strong&gt; (E) 인터페이스 : BidirectionalRange! E;</target>
        </trans-unit>
        <trans-unit id="5b7a048e95d2f27a63654a94c08bd831d03c07e5" translate="yes" xml:space="preserve">
          <source>interface &lt;strong id=&quot;RandomAccessInfinite&quot;&gt;RandomAccessInfinite&lt;/strong&gt;(E): ForwardRange!E;</source>
          <target state="translated">&lt;strong id=&quot;RandomAccessInfinite&quot;&gt;RandomAccessInfinite&lt;/strong&gt; (E) 인터페이스 : ForwardRange! E;</target>
        </trans-unit>
        <trans-unit id="4e0460af959c61242076661914fe25c1d2153fc3" translate="yes" xml:space="preserve">
          <source>interface &lt;strong id=&quot;RandomFiniteAssignable&quot;&gt;RandomFiniteAssignable&lt;/strong&gt;(E): RandomAccessFinite!E, BidirectionalAssignable!E;</source>
          <target state="translated">&lt;strong id=&quot;RandomFiniteAssignable&quot;&gt;RandomFiniteAssignable&lt;/strong&gt; (E) 인터페이스 : RandomAccessFinite! E, BidirectionalAssignable! E;</target>
        </trans-unit>
        <trans-unit id="62a63440ede312459dd4ff7065308350530fb33a" translate="yes" xml:space="preserve">
          <source>interface &lt;strong id=&quot;Scheduler&quot;&gt;Scheduler&lt;/strong&gt;;</source>
          <target state="translated">인터페이스 &lt;strong id=&quot;Scheduler&quot;&gt;스케줄러&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="2f14b01401eafd18084d4014b8ac51a7808d110d" translate="yes" xml:space="preserve">
          <source>interfaces</source>
          <target state="translated">interfaces</target>
        </trans-unit>
        <trans-unit id="a9249a8c0e935c08f57680d64b0e0b96e6ee1f20" translate="yes" xml:space="preserve">
          <source>interfaces this class implements</source>
          <target state="translated">이 클래스가 구현하는 인터페이스</target>
        </trans-unit>
        <trans-unit id="4b6914c620d2daa62ebe5994f36f361b3a759bf8" translate="yes" xml:space="preserve">
          <source>intersection</source>
          <target state="translated">intersection</target>
        </trans-unit>
        <trans-unit id="c5c7aa1df4fb5e68977d7dd5dfc6a6b0d80ac027" translate="yes" xml:space="preserve">
          <source>intmax_t</source>
          <target state="translated">intmax_t</target>
        </trans-unit>
        <trans-unit id="391d728e774cc0b4d2ae1b6b460fc89d8fe0137d" translate="yes" xml:space="preserve">
          <source>intptr_t</source>
          <target state="translated">intptr_t</target>
        </trans-unit>
        <trans-unit id="2bc3440791cf409ef91ed20acec3d50ac7188bb9" translate="yes" xml:space="preserve">
          <source>intrange.d</source>
          <target state="translated">intrange.d</target>
        </trans-unit>
        <trans-unit id="e5a0780be493d704c9a3b09c0cb3715d4267be8a" translate="yes" xml:space="preserve">
          <source>invalid operation</source>
          <target state="translated">유효하지 않은 조작</target>
        </trans-unit>
        <trans-unit id="7af8daef77eb809f9703314faa2df51ca7316ead" translate="yes" xml:space="preserve">
          <source>invalid?</source>
          <target state="translated">invalid?</target>
        </trans-unit>
        <trans-unit id="f2f2e84f037f6b89065ab3bfc540b307700da8a4" translate="yes" xml:space="preserve">
          <source>invalidException</source>
          <target state="translated">invalidException</target>
        </trans-unit>
        <trans-unit id="1738bf069670b36628a08189f5beaed0726dba4b" translate="yes" xml:space="preserve">
          <source>invariant</source>
          <target state="translated">invariant</target>
        </trans-unit>
        <trans-unit id="6f2ee6e8a32bc62e2a2b0adfecd168724d8a2b84" translate="yes" xml:space="preserve">
          <source>ireal</source>
          <target state="translated">ireal</target>
        </trans-unit>
        <trans-unit id="2a79dd6421ba2165421d8b1aaaab6edb8b7eabe9" translate="yes" xml:space="preserve">
          <source>irstate.d</source>
          <target state="translated">irstate.d</target>
        </trans-unit>
        <trans-unit id="b47f363e2b430c0647f14deea3eced9b0ef300ce" translate="yes" xml:space="preserve">
          <source>is</source>
          <target state="translated">is</target>
        </trans-unit>
        <trans-unit id="5aa4656f18610a026e3bbdeea07348f95913567e" translate="yes" xml:space="preserve">
          <source>is &amp;plusmn;0 and rounding is towards -&amp;infin;</source>
          <target state="translated">&amp;plusmn; 0이고 반올림은 -&amp;infin;입니다.</target>
        </trans-unit>
        <trans-unit id="4e1b4529afe52ccf9e38a096d9f881069dd0ebcc" translate="yes" xml:space="preserve">
          <source>is +0</source>
          <target state="translated">+0</target>
        </trans-unit>
        <trans-unit id="9dc190d226bfe5b3c3f389f86af150024bdc0993" translate="yes" xml:space="preserve">
          <source>is -0</source>
          <target state="translated">-0</target>
        </trans-unit>
        <trans-unit id="f37a9ef6d8ad416ad66456be0459486ab8a47ac0" translate="yes" xml:space="preserve">
          <source>is 0 and the number is 0, no digits result.</source>
          <target state="translated">숫자는 0이고 숫자는 0이며 숫자는 없습니다.</target>
        </trans-unit>
        <trans-unit id="9266cb61cf3ca2c04313372e6004edeb1c993066" translate="yes" xml:space="preserve">
          <source>is 0, no decimal point is generated.</source>
          <target state="translated">0이면 소수점이 생성되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ad39c19e6768b2099731d9ffb12a361aaf1d894a" translate="yes" xml:space="preserve">
          <source>is &lt;a href=&quot;#EnumBaseType&quot;&gt;&lt;i&gt;EnumBaseType&lt;/i&gt;&lt;/a&gt;&lt;code&gt;.max&lt;/code&gt;, it is an error. If the value of the previous</source>
          <target state="translated">이다 &lt;a href=&quot;#EnumBaseType&quot;&gt;&lt;i&gt;EnumBaseType&lt;/i&gt;&lt;/a&gt; &lt;code&gt;.max&lt;/code&gt; 가 , 이는 잘못이다. 이전 값이</target>
        </trans-unit>
        <trans-unit id="7a95638f56df7fc991005e407167d2f0f4046b3a" translate="yes" xml:space="preserve">
          <source>is &lt;b&gt;d&lt;/b&gt; it is converted to a signed string of characters, otherwise it is treated as unsigned. An argument of type &lt;b&gt;bool&lt;/b&gt; is formatted as '1' or '0'. The base used is binary for &lt;b&gt;b&lt;/b&gt;, octal for &lt;b&gt;o&lt;/b&gt;, decimal for &lt;b&gt;d&lt;/b&gt;, and hexadecimal for &lt;b&gt;x&lt;/b&gt; or &lt;b&gt;X&lt;/b&gt;. &lt;b&gt;x&lt;/b&gt; formats using lower case letters, &lt;b&gt;X&lt;/b&gt; uppercase. If there are fewer resulting digits than the</source>
          <target state="translated">되는 &lt;b&gt;거라고&lt;/b&gt; 그렇지 않으면 부호로 처리됩니다, 그것은 문자의 서명 문자열로 변환됩니다. &lt;b&gt;bool&lt;/b&gt; 유형의 인수는 '1'또는 '0'으로 형식화됩니다. 사용 된 기수는 &lt;b&gt;b&lt;/b&gt; 에 대해서는 2 진수, &lt;b&gt;o&lt;/b&gt; 에 대해서는 8 진수 , &lt;b&gt;d&lt;/b&gt; 에 대해서는 10 진수, &lt;b&gt;x&lt;/b&gt; 또는 &lt;b&gt;X에&lt;/b&gt; 대해서는 16 진수입니다 . 소문자를 사용하는 &lt;b&gt;x&lt;/b&gt; 형식, &lt;b&gt;X&lt;/b&gt; 대문자. 결과 자릿수가보다 적은 경우</target>
        </trans-unit>
        <trans-unit id="c664cd9c8f996c052a7910eec2dd16bd1d5fdbd8" translate="yes" xml:space="preserve">
          <source>is &lt;code&gt;bool&lt;/code&gt; then the result of the expression is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">인 &lt;code&gt;bool&lt;/code&gt; 다음 식의 결과는 &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b145d8130393191c6c1cf4da73c73123a2aea387" translate="yes" xml:space="preserve">
          <source>is &lt;code&gt;bool&lt;/code&gt; then the result of the expression is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">인 &lt;code&gt;bool&lt;/code&gt; 식의 결과는 다음 &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="67b4f792425599cbe918d1253a7dd23b02b2523c" translate="yes" xml:space="preserve">
          <source>is &lt;code&gt;bool&lt;/code&gt; then the result of the expression is the right operand converted to type &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="translated">인 &lt;code&gt;bool&lt;/code&gt; 다음 식의 결과가 오른쪽 피연산자 입력으로 변환된다 &lt;code&gt;bool&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6c135539262b75c0a8a431071e9eb0a1d8e461ce" translate="yes" xml:space="preserve">
          <source>is &lt;code&gt;bool&lt;/code&gt;, unless the right operand has type &lt;code&gt;void&lt;/code&gt;, when the result is type &lt;code&gt;void&lt;/code&gt;.</source>
          <target state="translated">인 &lt;code&gt;bool&lt;/code&gt; 오른쪽 피연산자를 입력하지 않는 한, &lt;code&gt;void&lt;/code&gt; 결과가 입력되면, &lt;code&gt;void&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="182270569133b7865896d9a52b1fae657e9f6471" translate="yes" xml:space="preserve">
          <source>is &lt;code&gt;foreach&lt;/code&gt;, then the variable is set to</source>
          <target state="translated">되고 &lt;code&gt;foreach&lt;/code&gt; 는 다음 변수로 설정</target>
        </trans-unit>
        <trans-unit id="aba54c9b5aba141424cb00177d2b5217bb030e99" translate="yes" xml:space="preserve">
          <source>is &lt;code&gt;foreach_reverse&lt;/code&gt;, then the variable is set to</source>
          <target state="translated">되고 &lt;code&gt;foreach_reverse&lt;/code&gt; 다음 변수로 설정</target>
        </trans-unit>
        <trans-unit id="d4990966e54b209cd79513a7ec19533eaa4340e3" translate="yes" xml:space="preserve">
          <source>is &lt;code&gt;null&lt;/code&gt; if the element is not in the array; if it is in the array it is a pointer to the element.</source>
          <target state="translated">인 &lt;code&gt;null&lt;/code&gt; 소자가 배열되지 않은 경우; 배열에 있으면 요소에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="fdd2603b14da2ae5666b1eb4cbd5460eb45103f4" translate="yes" xml:space="preserve">
          <source>is &lt;code&gt;void&lt;/code&gt;, however, the variable is not initialized. If its value is used before it is set, undefined program behavior will result.</source>
          <target state="translated">되어 &lt;code&gt;void&lt;/code&gt; 하지만, 변수가 초기화되지 않습니다. 값을 설정하기 전에 사용하면 정의되지 않은 프로그램 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="856f63bc8c330d651941b7c1b35a029fe9ada7e5" translate="yes" xml:space="preserve">
          <source>is &lt;code&gt;void&lt;/code&gt;.</source>
          <target state="translated">이다 &lt;code&gt;void&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9b2d89012197b074067f83377c255f3d87d4c99e" translate="yes" xml:space="preserve">
          <source>is NaN or &amp;plusmn;&amp;infin;</source>
          <target state="translated">NaN 또는 &amp;plusmn; &amp;infin;</target>
        </trans-unit>
        <trans-unit id="794ad1aad63c28435a73babc53a4d5a9997d3622" translate="yes" xml:space="preserve">
          <source>is a</source>
          <target state="translated">이다</target>
        </trans-unit>
        <trans-unit id="05bc5ab4014dd78a5db5e8446dfba45ae711f82a" translate="yes" xml:space="preserve">
          <source>is a NaN</source>
          <target state="translated">NaN입니다</target>
        </trans-unit>
        <trans-unit id="95cde741982715c6cabf1575ea574a534123a79f" translate="yes" xml:space="preserve">
          <source>is a base class or base interface of it. The</source>
          <target state="translated">기본 클래스 또는 기본 인터페이스입니다. 그만큼</target>
        </trans-unit>
        <trans-unit id="866331c6bb9a980c7ed6c583389a80bca7645fd8" translate="yes" xml:space="preserve">
          <source>is a boolean of value &lt;code&gt;true&lt;/code&gt; if the condition is satisfied. If the condition is not satisfied, the result is a boolean of value &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">조건이 충족되면 &lt;code&gt;true&lt;/code&gt; 값의 부울입니다 . 조건이 충족되지 않으면 결과는 부울 값 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="fd3477873f1833820f09f2313aa417ba4d53980d" translate="yes" xml:space="preserve">
          <source>is a class and</source>
          <target state="translated">수업이고</target>
        </trans-unit>
        <trans-unit id="f417696f6559d82855636ea4a43b23a3ac61ed13" translate="yes" xml:space="preserve">
          <source>is a class object reference, and there is a destructor for that class, the destructor is called for that object instance.</source>
          <target state="translated">은 클래스 객체 참조이며 해당 클래스에 대한 소멸자가 있으며 해당 객체 인스턴스에 대해 소멸자가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="431f0a0aae9fe3b9b0ed3565c319c91765342367" translate="yes" xml:space="preserve">
          <source>is a class object reference, or a pointer to a struct instance, and the class or struct has overloaded operator delete, then that operator delete is called for that class object instance or struct instance.</source>
          <target state="translated">은 클래스 객체 참조 또는 구조체 인스턴스에 대한 포인터이며 클래스 또는 구조체에 연산자 delete가 오버로드 된 경우 해당 연산자는 해당 클래스 개체 인스턴스 또는 구조체 인스턴스에 대해 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="fd841bf328476f081c647618e1f5fae3224a2534" translate="yes" xml:space="preserve">
          <source>is a class that is declared inside the scope of a function or another class. A nested class has access to the variables and other symbols of the classes and functions it is nested inside:</source>
          <target state="translated">함수 또는 다른 클래스의 범위 내에서 선언 된 클래스입니다. 중첩 클래스는 내부에 중첩 된 클래스 및 함수의 변수 및 기타 기호에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="67ee2f6a7de8782402d7d043fdc25f23037e2697" translate="yes" xml:space="preserve">
          <source>is a delegate, the compiler does not try to implement reverse traversal of the results returned by the delegate when &lt;code&gt;foreach_reverse&lt;/code&gt; is used. This may result in code that is confusing to read. Therefore, using &lt;code&gt;foreach_reverse&lt;/code&gt; with a delegate is now deprecated, and will be rejected in the future.</source>
          <target state="translated">대리자이며, 컴파일러는 &lt;code&gt;foreach_reverse&lt;/code&gt; 가 사용될 때 대리자가 반환 한 결과의 역방향 순회를 구현하지 않습니다 . 이로 인해 코드가 읽기 어려울 수 있습니다. 따라서 델리게이트와 함께 &lt;code&gt;foreach_reverse&lt;/code&gt; 를 사용하는 것은 이제 더 이상 사용되지 않으며 향후 거부 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="c08371356fdd881ccbf5db9c300fe9328c5d11d1" translate="yes" xml:space="preserve">
          <source>is a delegate, the type signature of the delegate is of the same as for &lt;code&gt;opApply&lt;/code&gt;. This enables many different named looping strategies to coexist in the same class or struct.</source>
          <target state="translated">대리자 인 경우 대리자의 형식 서명은 &lt;code&gt;opApply&lt;/code&gt; 와 동일 합니다. 이것은 많은 다른 명명 된 루핑 전략이 같은 클래스 나 구조체에 공존 할 수있게합니다.</target>
        </trans-unit>
        <trans-unit id="3d98b9bfb1c3e7d970f9a5e850bf8483547ece18" translate="yes" xml:space="preserve">
          <source>is a name that is the first non-blank character on a line immediately followed by a ':'. This name forms the section name. The section name is not case sensitive.</source>
          <target state="translated">행에서 첫 번째 공백이 아닌 문자이며 바로 뒤에 ':'이 붙은 이름입니다. 이 이름은 섹션 이름을 형성합니다. 섹션 이름은 대소 문자를 구분하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="64e19ffc99e2b04c2cd6518019a75d7e5897efe2" translate="yes" xml:space="preserve">
          <source>is a pointer or a dynamic array, the garbage collector is called to immediately release the memory.</source>
          <target state="translated">포인터 또는 동적 배열 인 경우 가비지 수집기가 즉시 메모리를 해제하도록 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="64ae414713b8234be80314af021ffb94e377b288" translate="yes" xml:space="preserve">
          <source>is a pointer to a struct instance for which a</source>
          <target state="translated">구조체 인스턴스에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="46e6d2c5e0b0bb069238f170bfbe797fbe46653d" translate="yes" xml:space="preserve">
          <source>is a reference to a class instance for which a &lt;a href=&quot;class#invariants&quot;&gt;Class Invariant&lt;/a&gt; exists, the</source>
          <target state="translated">&lt;a href=&quot;class#invariants&quot;&gt;Class Invariant&lt;/a&gt; 가 존재 하는 클래스 인스턴스에 대한 참조입니다 .</target>
        </trans-unit>
        <trans-unit id="f66e4d58765b067dd28deb3b00da93229002750f" translate="yes" xml:space="preserve">
          <source>is a sequence of one or more bytes of the exact size required to hold a scalar type. Multiple threads can access separate memory locations without interference.</source>
          <target state="translated">스칼라 유형을 보유하는 데 필요한 정확한 크기의 하나 이상의 바이트 시퀀스입니다. 다중 스레드는 간섭없이 별도의 메모리 위치에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="22e547eb4f3ab0193d27056238f7107b33c5fac6" translate="yes" xml:space="preserve">
          <source>is a shorthand for listing a series of case statements from</source>
          <target state="translated">에서 일련의 사례 진술을 나열하는 약칭입니다.</target>
        </trans-unit>
        <trans-unit id="e374cd8b531805bbe894f1142b758fe06bd1da48" translate="yes" xml:space="preserve">
          <source>is a struct or union type, a default mechanism is used to compute the hash and comparisons of it based on the binary data within the struct value. A custom mechanism can be used by providing the following functions as struct members:</source>
          <target state="translated">구조체 또는 공용체 유형 인 경우 기본 메커니즘을 사용하여 구조체 값 내의 이진 데이터를 기반으로 해시와 비교를 계산합니다. 구조체 멤버로 다음 기능을 제공하여 사용자 지정 메커니즘을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7c8308aa887b7020fddb4f6862a78f85cbc212f9" translate="yes" xml:space="preserve">
          <source>is a struct or union type, a default mechanism is used to compute the hash and comparisons of it based on the fields of the struct value. A custom mechanism can be used by providing the following functions as struct members:</source>
          <target state="translated">구조체 또는 공용체 유형 인 경우 기본 메커니즘은 구조체 값의 필드를 기반으로 해시 및 비교를 계산하는 데 사용됩니다. 사용자 지정 메커니즘은 구조체 멤버로 다음 함수를 제공하여 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1c002dff23afbbccd2f1b8d90a295d90c596ec43" translate="yes" xml:space="preserve">
          <source>is a struct that is declared inside the scope of a function or a templated struct that has aliases to local functions as a template argument. Nested structs have member functions. It has access to the context of its enclosing scope (via an added hidden field).</source>
          <target state="translated">함수의 범위 내에서 선언 된 구조체 또는 템플릿 인수로 로컬 함수에 대한 별칭이있는 템플릿 구조체입니다. 중첩 구조체에는 멤버 함수가 있습니다. 숨겨진 범위를 통해 엔 클로징 범위의 컨텍스트에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1dc639ebbef63747f752ba5662302d407719914c" translate="yes" xml:space="preserve">
          <source>is a subexpression of</source>
          <target state="translated">의 하위 표현입니다</target>
        </trans-unit>
        <trans-unit id="f4565cd16ad9204dc2fc4dbd1330538f26c91fae" translate="yes" xml:space="preserve">
          <source>is a variable allocated on the stack, the class destructor (if any) is called for that instance. Neither the garbage collector nor any class deallocator is called.</source>
          <target state="translated">스택에 할당 된 변수이며 해당 인스턴스에 대해 클래스 소멸자 (있는 경우)가 호출됩니다. 가비지 수집기 나 클래스 할당 취소 기가 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f59607cd03a81bc8f49db6f7342e92e37345958b" translate="yes" xml:space="preserve">
          <source>is a way to specify a type based on the type of an expression. For example:</source>
          <target state="translated">식의 유형에 따라 유형을 지정하는 방법입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dd5017ef7d227eb654985dd009a387f20696fe26" translate="yes" xml:space="preserve">
          <source>is actually accessing to the outer context.</source>
          <target state="translated">실제로 외부 컨텍스트에 액세스하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="e3e7981114e9b959e5bd5be357362d14acb9ce90" translate="yes" xml:space="preserve">
          <source>is always executed, whether the &lt;code&gt;try&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; 여부에 관계없이 항상 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="1635d546546fadb6212824ad561a49e316a0c3b7" translate="yes" xml:space="preserve">
          <source>is always executed.</source>
          <target state="translated">항상 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="1c787e435833ffd155d544e6969588e71023e903" translate="yes" xml:space="preserve">
          <source>is an expression of type static array or dynamic array, the special variable &amp;amp;dollar; is declared and set to be the length of the array. A new declaration scope is created for the evaluation of the &lt;a href=&quot;#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt;..&lt;a href=&quot;#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt; and &amp;amp;dollar; appears in that scope only.</source>
          <target state="translated">정적 배열 또는 동적 배열, 특수 변수 &amp;amp; dollar; 선언되고 배열의 길이로 설정됩니다. &lt;a href=&quot;#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt; 의 평가를 위해 새로운 선언 범위가 생성됩니다 . &lt;a href=&quot;#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt; 및 &amp;amp; dollar; 해당 범위에만 나타납니다.</target>
        </trans-unit>
        <trans-unit id="8b8149c243fbf46b5365a04d417d423cbb00e714" translate="yes" xml:space="preserve">
          <source>is an expression of type static array or dynamic array, the symbol &amp;amp;dollar; is set to be the number of elements in the array. If</source>
          <target state="translated">정적 배열 또는 동적 배열, &amp;amp; dollar; 배열의 요소 수로 설정됩니다. 만약</target>
        </trans-unit>
        <trans-unit id="d66f60fcfb5a38f23cc9a78251e266a9984365e5" translate="yes" xml:space="preserve">
          <source>is an lvalue of type &lt;code&gt;T&lt;/code&gt; and the other has and &lt;code&gt;alias this&lt;/code&gt; converting it to &lt;code&gt;ref T&lt;/code&gt;;</source>
          <target state="translated">는 &lt;code&gt;T&lt;/code&gt; 타입의 lvalue이고 다른 하나는 &lt;code&gt;alias this&lt;/code&gt; &lt;code&gt;ref T&lt;/code&gt; 로 변환하는 별칭을 가지고 ;</target>
        </trans-unit>
        <trans-unit id="263dbd0c0d4188ee6bfbfee764b12bd0bbbfcdcb" translate="yes" xml:space="preserve">
          <source>is associated with the innermost if statement which does not already have an associated</source>
          <target state="translated">관련이없는 가장 안쪽의 if 문과 연관되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="167b47661f60a2b1d5d001642c6b40a22c1773be" translate="yes" xml:space="preserve">
          <source>is being compared against.</source>
          <target state="translated">비교되고 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a84e96c92ceed9318ed544c711d1a43065f909c" translate="yes" xml:space="preserve">
          <source>is called a class allocator. The class allocator can have any number of parameters, provided the first one is of type &lt;code&gt;size_t&lt;/code&gt;. Any number can be defined for a class, the correct one is determined by the usual function overloading rules. When a new expression:</source>
          <target state="translated">클래스 할당 자라고합니다. 클래스 할당자는 첫 번째가 &lt;code&gt;size_t&lt;/code&gt; 유형 인 경우 여러 매개 변수를 가질 수 있습니다 . 클래스에 대해 임의의 숫자를 정의 할 수 있으며 올바른 숫자는 일반적인 함수 오버로딩 규칙에 의해 결정됩니다. 새 표현식 :</target>
        </trans-unit>
        <trans-unit id="b779acb99428c80b18247638899fbf5c5f162de5" translate="yes" xml:space="preserve">
          <source>is called a class allocator. The class allocator can have any number of parameters, provided the first one is of type uint. Any number can be defined for a class, the correct one is determined by the usual function overloading rules. When a new expression:</source>
          <target state="translated">클래스 할당 자라고합니다. 클래스 할당자는 첫 번째 매개 변수가 uint 유형 인 경우 여러 매개 변수를 가질 수 있습니다. 클래스에 대해 임의의 숫자를 정의 할 수 있으며 올바른 숫자는 일반적인 함수 오버로드 규칙에 의해 결정됩니다. 새로운 표현 일 때 :</target>
        </trans-unit>
        <trans-unit id="6a641aa26a96a1457ba39d2f48c89495d93c002d" translate="yes" xml:space="preserve">
          <source>is called a class deallocator. The deallocator must have exactly one parameter of type &lt;code&gt;void*&lt;/code&gt;. Only one can be specified for a class. When a delete expression:</source>
          <target state="translated">클래스 할당 기라고합니다. 할당 해제 기는 &lt;code&gt;void*&lt;/code&gt; 유형의 정확히 하나의 매개 변수를 가져야합니다 . 클래스에는 하나만 지정할 수 있습니다. 삭제 표현식 인 경우 :</target>
        </trans-unit>
        <trans-unit id="697b26715a52ae958675b70734e0d2164f8840d7" translate="yes" xml:space="preserve">
          <source>is case sensitive, and is meant to be extensible by the implementation (&lt;code&gt;they are not keywords&lt;/code&gt;). &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt; must be supplied, the others are what makes sense for the implementation. &lt;code&gt;C++&lt;/code&gt; offers limited compatibility with C++. &lt;code&gt;Objective-C&lt;/code&gt; offers limited compatibility with Objective-C, see the &lt;a href=&quot;objc_interface&quot;&gt;Interfacing to Objective-C&lt;/a&gt; documentation for more information. &lt;code&gt;System&lt;/code&gt; is the same as &lt;code&gt;Windows&lt;/code&gt; on Windows platforms, and &lt;code&gt;C&lt;/code&gt; on other platforms. &lt;code&gt;Implementation Note:&lt;/code&gt; for Win32 platforms, &lt;code&gt;Windows&lt;/code&gt; should exist.</source>
          <target state="translated">는 대소 문자를 구분하며 구현에 의해 확장 가능합니다 ( &lt;code&gt;they are not keywords&lt;/code&gt; ). &lt;code&gt;C&lt;/code&gt; 와 &lt;code&gt;D&lt;/code&gt; 가 제공되어야하며, 나머지는 구현에 적합한 것입니다. &lt;code&gt;C++&lt;/code&gt; 는 C ++ 과의 호환성이 제한되어 있습니다. &lt;code&gt;Objective-C&lt;/code&gt; 는 Objective-C 와의 호환성이 제한되어 있습니다. 자세한 내용 은 Objective-C와의 &lt;a href=&quot;objc_interface&quot;&gt;인터페이스&lt;/a&gt; 설명서를 참조하십시오. &lt;code&gt;System&lt;/code&gt; 과 동일한 &lt;code&gt;Windows&lt;/code&gt; 윈도우 플랫폼에서, 그리고 &lt;code&gt;C&lt;/code&gt; 다른 플랫폼. &lt;code&gt;Implementation Note:&lt;/code&gt; Win32 플랫폼의 경우 &lt;code&gt;Windows&lt;/code&gt; 가 존재해야합니다.</target>
        </trans-unit>
        <trans-unit id="810a4259c86f0cc4762e614269797550f5c1d5b5" translate="yes" xml:space="preserve">
          <source>is compiled in. If it is not satisfied, the</source>
          <target state="translated">만족하지 않으면</target>
        </trans-unit>
        <trans-unit id="f0ea9b8a846c04f30a2286c03358eeff01c564bd" translate="yes" xml:space="preserve">
          <source>is computed at compile time and returns a result that is converted to a boolean value. If that value is true, then the template is matched, otherwise the template is not matched.</source>
          <target state="translated">컴파일 타임에 계산되고 부울 값으로 변환 된 결과를 반환합니다. 해당 값이 true이면 템플릿이 일치하고 그렇지 않으면 템플릿이 일치하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ee67499a8a96b221f90229427825a840e64a23ae" translate="yes" xml:space="preserve">
          <source>is covariant with an impure function</source>
          <target state="translated">불순 함수와 공변량</target>
        </trans-unit>
        <trans-unit id="5f113b0a163ce47fe512f229d06cfcf93f7c6c0f" translate="yes" xml:space="preserve">
          <source>is created in the following circumstances:</source>
          <target state="translated">다음과 같은 상황에서 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="519d9adbb5f5cec3d7301564c51fd1d30e7107c7" translate="yes" xml:space="preserve">
          <source>is currently unimplemented.</source>
          <target state="translated">현재 구현되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="37ba8e396436fb1cb5c46f8542c32dd19d110446" translate="yes" xml:space="preserve">
          <source>is declared as a</source>
          <target state="translated">로 선언</target>
        </trans-unit>
        <trans-unit id="0a5bb421c9a65e238faabe97bdef25ec36c5af31" translate="yes" xml:space="preserve">
          <source>is declared to be an alias of</source>
          <target state="translated">의 별칭으로 선언</target>
        </trans-unit>
        <trans-unit id="63e1e1c677dd78965773ed57266f8669d65800fe" translate="yes" xml:space="preserve">
          <source>is declared to be either an alias of the</source>
          <target state="translated">의 별칭으로 선언</target>
        </trans-unit>
        <trans-unit id="e4b7b4720572ba1503d046c4390fd7cf191aaa40" translate="yes" xml:space="preserve">
          <source>is declared, with the addition of the template parameters being declared as aliases for their deduced types.</source>
          <target state="translated">템플릿 매개 변수를 추가하여 추론 된 유형의 별명으로 선언됩니다.</target>
        </trans-unit>
        <trans-unit id="a195cab88ca624710bbee5e48aee2da9436879bf" translate="yes" xml:space="preserve">
          <source>is deduced from the types of the function arguments:</source>
          <target state="translated">함수 인수의 유형에서 추론됩니다.</target>
        </trans-unit>
        <trans-unit id="50eefa1f3c7499f74988194018f969a74b3e0565" translate="yes" xml:space="preserve">
          <source>is defined as follows. If</source>
          <target state="translated">다음과 같이 정의됩니다. 만약</target>
        </trans-unit>
        <trans-unit id="004b4775e4f970b03dd4051d124d9c264ab97115" translate="yes" xml:space="preserve">
          <source>is defined as initializing a struct instance from another struct of the same type. Copy construction is divided into two parts:</source>
          <target state="translated">같은 유형의 다른 구조체에서 구조체 인스턴스를 초기화하는 것으로 정의됩니다. 사본 구성은 두 부분으로 나뉩니다.</target>
        </trans-unit>
        <trans-unit id="a89462bdd9113e5bbf78d82e2f42aabb745b82c6" translate="yes" xml:space="preserve">
          <source>is dependent on</source>
          <target state="translated">~에 의존</target>
        </trans-unit>
        <trans-unit id="b3a67510f9c6418a361e44cc9fd77fb39005d225" translate="yes" xml:space="preserve">
          <source>is dereferenced, it must either contain a</source>
          <target state="translated">역 참조 된 경우</target>
        </trans-unit>
        <trans-unit id="088a7b4bf7dfb86f59ae0a63858067b646a79acd" translate="yes" xml:space="preserve">
          <source>is determined is analogous to the way template parameter types are determined by &lt;a href=&quot;template#TemplateTypeParameterSpecialization&quot;&gt;&lt;i&gt;TemplateTypeParameterSpecialization&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">결정에 의해 결정되는 방식 템플릿 매개 변수 형식과 유사하다 &lt;a href=&quot;template#TemplateTypeParameterSpecialization&quot;&gt;&lt;i&gt;TemplateTypeParameterSpecialization&lt;/i&gt;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="99a6ab1ec01ddbcea7ce906c767c590bf32b5fa5" translate="yes" xml:space="preserve">
          <source>is eligible, the ambiguity is disallowed by raising an error. Note: Multiple</source>
          <target state="translated">오류가 발생하여 모호성이 허용되지 않습니다. 참고 : 여러</target>
        </trans-unit>
        <trans-unit id="d97073fdaaefdb5c3d8764b3fa852c1ad8a7eb17" translate="yes" xml:space="preserve">
          <source>is enabled, a hardware trap will be generated whenever an uninitialized floating-point variable is used.</source>
          <target state="translated">활성화 된 경우 초기화되지 않은 부동 소수점 변수가 사용될 때마다 하드웨어 트랩이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="6c4814dd133ed511b3f7a607629048cb8d0b75d5" translate="yes" xml:space="preserve">
          <source>is enclosed by &lt;code&gt;{ }&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{ }&lt;/code&gt; 로 묶습니다 .</target>
        </trans-unit>
        <trans-unit id="d7075d366fa23cebaaf1545d13ee5c4bb2281cce" translate="yes" xml:space="preserve">
          <source>is equivalent to (as far as the monitors go):</source>
          <target state="translated">(모니터가 이동하는 한) :</target>
        </trans-unit>
        <trans-unit id="18ab6ac7001b131bc4dc74bd619c612205dff372" translate="yes" xml:space="preserve">
          <source>is equivalent to:</source>
          <target state="translated">다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dac08ba9560b66c28da835b224804a088219f9d7" translate="yes" xml:space="preserve">
          <source>is evaluated again, and if true the statement is executed again. This continues until the</source>
          <target state="translated">이 다시 평가되고, 참이면 명령문이 다시 실행됩니다. 이 때까지 계속</target>
        </trans-unit>
        <trans-unit id="072a8edfa4f762a369c62f81d4396193b91f89b9" translate="yes" xml:space="preserve">
          <source>is evaluated and is false is also typically set with a compiler switch and may include these options:</source>
          <target state="translated">평가되고 false 인 경우 일반적으로 컴파일러 스위치로 설정되며 다음 옵션이 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="33f4d0e62bca3a15588f932418e335de63fdb978" translate="yes" xml:space="preserve">
          <source>is evaluated and must have a type that can be converted to a boolean. If it's true the statement is executed. After the statement is executed, the</source>
          <target state="translated">평가되고 부울로 변환 될 수있는 유형이 있어야합니다. 그것이 사실이라면, 문장이 실행됩니다. 명령문이 실행 된 후</target>
        </trans-unit>
        <trans-unit id="3fb754cd805186b5a560e88e972c7d2f5e14d5f8" translate="yes" xml:space="preserve">
          <source>is evaluated at compile time, and the result must be representable as a string. The resulting strings are concatenated to form a string. The text contents of the string must be compilable as a valid &lt;a href=&quot;#DeclDefs&quot;&gt;&lt;i&gt;DeclDefs&lt;/i&gt;&lt;/a&gt;, and is compiled as such.</source>
          <target state="translated">컴파일 타임에 평가되며 결과는 문자열로 표현 가능해야합니다. 결과 문자열은 연결되어 문자열을 형성합니다. 문자열의 텍스트 내용은 유효한 &lt;a href=&quot;#DeclDefs&quot;&gt;&lt;i&gt;DeclDefs&lt;/i&gt;&lt;/a&gt; 로 컴파일 할 수 있어야하며 그렇게 컴파일됩니다 .</target>
        </trans-unit>
        <trans-unit id="8d3290561a3e3fff5c0c01b8fcbb1f346e336a84" translate="yes" xml:space="preserve">
          <source>is evaluated at compile time, and the result must be representable as a string. The resulting strings are concatenated to form a string. The text contents of the string must be compilable as a valid &lt;a href=&quot;#Expression&quot;&gt;&lt;i&gt;Expression&lt;/i&gt;&lt;/a&gt;, and is compiled as such.</source>
          <target state="translated">컴파일 타임에 평가되며 결과는 문자열로 표현 가능해야합니다. 결과 문자열은 연결되어 문자열을 형성합니다. 문자열의 텍스트 내용은 유효한 &lt;a href=&quot;#Expression&quot;&gt;&lt;i&gt;Expression&lt;/i&gt;&lt;/a&gt; 으로 컴파일 가능해야하며 그렇게 컴파일됩니다 .</target>
        </trans-unit>
        <trans-unit id="4f178bcf522d7bc078b86ce5bc73fb9c5307d589" translate="yes" xml:space="preserve">
          <source>is evaluated at compile time, and the result must be representable as a string. The resulting strings are concatenated to form a string. The text contents of the string must be compilable as a valid &lt;a href=&quot;#StatementList&quot;&gt;&lt;i&gt;StatementList&lt;/i&gt;&lt;/a&gt;, and is compiled as such.</source>
          <target state="translated">컴파일 타임에 평가되며 결과는 문자열로 표현 가능해야합니다. 결과 문자열은 연결되어 문자열을 형성합니다. 문자열의 텍스트 내용은 유효한 &lt;a href=&quot;#StatementList&quot;&gt;&lt;i&gt;StatementList&lt;/i&gt;&lt;/a&gt; 로 컴파일 할 수 있어야하며 이와 같이 컴파일됩니다.</target>
        </trans-unit>
        <trans-unit id="dd54e103dacc676c00c40203478cd2f26f5aedfb" translate="yes" xml:space="preserve">
          <source>is evaluated at compile time, and the result must be representable as a string. The resulting strings are concatenated to form a string. The text contents of the string must be compilable as a valid &lt;a href=&quot;declaration#Type&quot;&gt;&lt;i&gt;Type&lt;/i&gt;&lt;/a&gt;, and is compiled as such.</source>
          <target state="translated">컴파일 타임에 평가되며 결과는 문자열로 표현 가능해야합니다. 결과 문자열은 연결되어 문자열을 형성합니다. 문자열의 텍스트 내용은 유효한 &lt;a href=&quot;declaration#Type&quot;&gt;&lt;i&gt;Type&lt;/i&gt;&lt;/a&gt; 으로 컴파일 할 수 있어야하며 그렇게 컴파일됩니다 .</target>
        </trans-unit>
        <trans-unit id="9c2803f61d2455894be3c4040fce7a7e22137a6b" translate="yes" xml:space="preserve">
          <source>is evaluated at compile time.</source>
          <target state="translated">컴파일 타임에 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="03ef2f5c60b645ebb7552833ca73019c265e4db4" translate="yes" xml:space="preserve">
          <source>is evaluated or not at runtime is typically set with a compiler switch. If it is not evaluated, any side effects specified by the</source>
          <target state="translated">런타임시 평가 여부는 일반적으로 컴파일러 스위치로 설정됩니다. 평가되지 않으면 부작용으로 지정된 부작용</target>
        </trans-unit>
        <trans-unit id="64d94132378e2fbc0792decac9a82bcc714ccc80" translate="yes" xml:space="preserve">
          <source>is evaluated. If</source>
          <target state="translated">평가됩니다. 만약</target>
        </trans-unit>
        <trans-unit id="7a2239c9e6ec58954766c2baa840f66744c1e6e1" translate="yes" xml:space="preserve">
          <source>is evaluated. It must evaluate to an expression of type static array, dynamic array, associative array, struct, class, delegate, or sequence. The &lt;a href=&quot;#NoScopeNonEmptyStatement&quot;&gt;&lt;i&gt;NoScopeNonEmptyStatement&lt;/i&gt;&lt;/a&gt; is executed, once for each element of the aggregate. At the start of each iteration, the variables declared by the</source>
          <target state="translated">평가됩니다. 정적 배열, 동적 배열, 연관 배열, 구조체, 클래스, 대리자 또는 시퀀스 유형의 표현식으로 평가해야합니다. &lt;a href=&quot;#NoScopeNonEmptyStatement&quot;&gt;&lt;i&gt;NoScopeNonEmptyStatement은&lt;/i&gt;&lt;/a&gt; 한 번 집합의 각 요소에 대해 실행됩니다. 각 반복이 시작될 때</target>
        </trans-unit>
        <trans-unit id="8e45ce275947b73751020aa63cbcbb399421cd17" translate="yes" xml:space="preserve">
          <source>is evaluated. if</source>
          <target state="translated">평가됩니다. 만약</target>
        </trans-unit>
        <trans-unit id="d4fde1cd35ca41eda97d122694b70dcb585240a9" translate="yes" xml:space="preserve">
          <source>is exactly equivalent to:</source>
          <target state="translated">정확히 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f77712ad5ba4f3d6be5112686e7b1ffe1b00605e" translate="yes" xml:space="preserve">
          <source>is executed at runtime or not. This is typically controlled with a compiler switch.</source>
          <target state="translated">런타임에 실행됩니다. 이것은 일반적으로 컴파일러 스위치로 제어됩니다.</target>
        </trans-unit>
        <trans-unit id="f471c2ce1dfb5ffce5bf62f0bb68876fb9421970" translate="yes" xml:space="preserve">
          <source>is executed zero times. If</source>
          <target state="translated">0 번 실행됩니다. 만약</target>
        </trans-unit>
        <trans-unit id="85b81c9a44a06831a759a8d887a9b082d523ac91" translate="yes" xml:space="preserve">
          <source>is executed, and Foo is a class that has an allocator, the allocator is called with the first argument set to the size in bytes of the memory to be allocated for the instance. The allocator must allocate the memory and return it as a &lt;code&gt;void*&lt;/code&gt;. If the allocator fails, it must not return a &lt;code&gt;null&lt;/code&gt;, but must throw an exception. If there is more than one parameter to the allocator, the additional arguments are specified within parentheses after the &lt;code&gt;new&lt;/code&gt; in the</source>
          <target state="translated">Foo는 할당자가있는 클래스이며, 할당자는 첫 번째 인수가 인스턴스에 할당 될 메모리의 바이트 크기로 설정되어 호출됩니다. 할당자는 메모리를 할당하고 &lt;code&gt;void*&lt;/code&gt; 로 반환해야합니다 . 할당자가 실패하면 &lt;code&gt;null&lt;/code&gt; 을 반환하지 말고 예외를 발생시켜야합니다. 할당 자에 둘 이상의 매개 변수가있는 경우 추가 인수는 &lt;code&gt;new&lt;/code&gt; 인수 다음에 괄호 안에 지정됩니다 .</target>
        </trans-unit>
        <trans-unit id="4e92754a12ef55da12bb4b7fe4e9c32420729055" translate="yes" xml:space="preserve">
          <source>is executed, and f is a reference to a class instance that has a deallocator, the deallocator is called with a pointer to the class instance after the destructor (if any) for the class is called. It is the responsibility of the deallocator to free the memory.</source>
          <target state="translated">f가 할당 취소기를 가진 클래스 인스턴스에 대한 참조이고, 할당 취소 기는 클래스에 대한 소멸자 (있는 경우)가 호출 된 후 클래스 인스턴스에 대한 포인터와 함께 호출됩니다. 메모리를 해제하는 것은 할당 해제 자의 책임입니다.</target>
        </trans-unit>
        <trans-unit id="8b38795def5638afc7bb29bd8bdd5bfd918a5981" translate="yes" xml:space="preserve">
          <source>is executed.</source>
          <target state="translated">실행됩니다.</target>
        </trans-unit>
        <trans-unit id="76e5752a4a91c67cf3a59c293151c4563e45c961" translate="yes" xml:space="preserve">
          <source>is executed. Then</source>
          <target state="translated">실행됩니다. 그때</target>
        </trans-unit>
        <trans-unit id="15c8631516af4309d16b282ffb40c5d8058e6ad0" translate="yes" xml:space="preserve">
          <source>is for &lt;b&gt;null&lt;/b&gt; arguments.</source>
          <target state="translated">입니다 &lt;b&gt;널&lt;/b&gt; 인수.</target>
        </trans-unit>
        <trans-unit id="bbb58f457354398d67e1b08d4e4fc333662362a2" translate="yes" xml:space="preserve">
          <source>is for complex floating point literals.</source>
          <target state="translated">복잡한 부동 소수점 리터럴을위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="c999072dc7d2d84014953f907089274a83215fee" translate="yes" xml:space="preserve">
          <source>is for negative numeric literals.</source>
          <target state="translated">음수 리터럴입니다.</target>
        </trans-unit>
        <trans-unit id="3496be06200954887502c4fb4fdea6a24aa8275b" translate="yes" xml:space="preserve">
          <source>is for positive numeric literals (including character literals).</source>
          <target state="translated">양수 리터럴 (문자 리터럴 포함)을위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="35d6e052ac5fb220d5de4d72989bed3cb656aef6" translate="yes" xml:space="preserve">
          <source>is for real and imaginary floating point literals.</source>
          <target state="translated">실수와 허수 부동 소수점 리터럴을위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="b82762464a09471245806bdfa6334d7a7d09014a" translate="yes" xml:space="preserve">
          <source>is given by its &lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt;. If there is no &lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt; and it is the first</source>
          <target state="translated">&lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression에&lt;/i&gt;&lt;/a&gt; 의해 제공됩니다 . &lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt; 이없고 처음 인 경우</target>
        </trans-unit>
        <trans-unit id="19fc2de772b7b7238c86c0565468690a1d53b524" translate="yes" xml:space="preserve">
          <source>is greater than or equal to the current</source>
          <target state="translated">전류보다 크거나 같다</target>
        </trans-unit>
        <trans-unit id="b0888d6dab7bff1b872900a78935ee937d25ffc4" translate="yes" xml:space="preserve">
          <source>is illegal, because the runtime code for &lt;code&gt;foo&lt;/code&gt; cannot be generated. A function template would be the appropriate method to implement this sort of thing.</source>
          <target state="translated">&lt;code&gt;foo&lt;/code&gt; 의 런타임 코드를 생성 할 수 없기 때문에 불법 입니다. 함수 템플릿은 이런 종류의 것을 구현하는 적절한 방법입니다.</target>
        </trans-unit>
        <trans-unit id="5f86cd1e64dc851146f8d4c6fda10f6808d2a67b" translate="yes" xml:space="preserve">
          <source>is implicit, and when a type is not specified, it is inferred. In that case, &lt;code&gt;auto&lt;/code&gt; is implied, and it is not necessary (and actually forbidden) to use it.</source>
          <target state="translated">암시 적이며 유형을 지정하지 않으면 유추됩니다. 이 경우 &lt;code&gt;auto&lt;/code&gt; 이 암시 되며 자동 으로 사용할 필요는 없습니다 (실제로는 금지되어 있음).</target>
        </trans-unit>
        <trans-unit id="64bc8f4d5241816001afd259a67f86210c1dc256" translate="yes" xml:space="preserve">
          <source>is its own full expression.</source>
          <target state="translated">자체 표현입니다.</target>
        </trans-unit>
        <trans-unit id="4a20ea95ad4d608c59d5a0d31ebb5593469905f0" translate="yes" xml:space="preserve">
          <source>is less than or equal to</source>
          <target state="translated">이하</target>
        </trans-unit>
        <trans-unit id="49d0d1cfcfe46ecdcbc0e28efaf4792d9f659b05" translate="yes" xml:space="preserve">
          <source>is lower case, or &lt;b&gt;INF&lt;/b&gt; or &lt;b&gt;INFINITY&lt;/b&gt; if upper.  The positional and non-positional styles can be mixed in the same format string. (POSIX leaves this behavior undefined.) The internal counter for non-positional parameters tracks the next parameter after the largest positional parameter already used.  Example using array and nested array formatting:</source>
          <target state="translated">소문자이거나 대문자 인 경우 &lt;b&gt;INF&lt;/b&gt; 또는 &lt;b&gt;INFINITY&lt;/b&gt; 입니다. 위치 및 비 위치 스타일은 동일한 형식 문자열로 혼합 될 수 있습니다. (POSIX는이 동작을 정의하지 않은 상태로 둡니다.) 비 위치 매개 변수의 내부 카운터는 이미 사용 된 가장 큰 위치 매개 변수 다음에 다음 매개 변수를 추적합니다. 배열 및 중첩 배열 형식을 사용하는 예 :</target>
        </trans-unit>
        <trans-unit id="6f013e0849250f19d780c6fda5ab2d35cb6bb847" translate="yes" xml:space="preserve">
          <source>is lower case, or &lt;b&gt;NAN&lt;/b&gt; if upper. Floating point infinities are formatted as &lt;b&gt;inf&lt;/b&gt; or &lt;b&gt;infinity&lt;/b&gt; if the</source>
          <target state="translated">소문자이거나 대문자 인 경우 &lt;b&gt;NAN&lt;/b&gt; 입니다. 부동 소수점 무한대는 다음과 같이 포맷 &lt;b&gt;INF&lt;/b&gt; 또는 &lt;b&gt;무한대&lt;/b&gt; 은 if</target>
        </trans-unit>
        <trans-unit id="391e8003c0e1de2536aa29b40207d802d082403f" translate="yes" xml:space="preserve">
          <source>is most useful in writing generic template code.</source>
          <target state="translated">일반 템플릿 코드를 작성하는 데 가장 유용합니다.</target>
        </trans-unit>
        <trans-unit id="151afd9933b397952c87932b8659ad520d0d86a0" translate="yes" xml:space="preserve">
          <source>is no longer</source>
          <target state="translated">더 이상</target>
        </trans-unit>
        <trans-unit id="09be1944552db48bd404aaf90487bfa1244784ea" translate="yes" xml:space="preserve">
          <source>is not a modifiable lvalue.</source>
          <target state="translated">수정 가능한 lvalue가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="93d2156bb4c8b3647fca4dfc542c571f24ecee1f" translate="yes" xml:space="preserve">
          <source>is not a special case although it evaluates expressions conditionally:</source>
          <target state="translated">조건부로 표현식을 평가하지만 특별한 경우는 아닙니다.</target>
        </trans-unit>
        <trans-unit id="e4f00eb451feeb588c4754de00da0ba2341f9008" translate="yes" xml:space="preserve">
          <source>is not detected.</source>
          <target state="translated">감지되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="601e93f41a5ad6ad71ce9f8205ebbf107d6370d8" translate="yes" xml:space="preserve">
          <source>is not evaluated, it is used purely to generate the type:</source>
          <target state="translated">평가되지 않고 순수하게 유형을 생성하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9465bb83247ceba94fedba2e07fcbfcdc625de78" translate="yes" xml:space="preserve">
          <source>is not evaluated, just the type of it is generated:</source>
          <target state="translated">평가되지 않고 유형 만 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="164d861c142327b546ba483d607efc80188e69ed" translate="yes" xml:space="preserve">
          <source>is not explicitly set, and the first</source>
          <target state="translated">명시 적으로 설정되지 않은 첫 번째</target>
        </trans-unit>
        <trans-unit id="9cf94b4dd11fa9e10109b67d2a9839c99d958994" translate="yes" xml:space="preserve">
          <source>is not itself a type, value, or symbol. It is a compile-time sequence of any mix of types, values or symbols.</source>
          <target state="translated">자체는 유형, 값 또는 기호가 아닙니다. 유형, 값 또는 기호가 혼합 된 컴파일 타임 시퀀스입니다.</target>
        </trans-unit>
        <trans-unit id="e9b4832da4cc458c15bb54d97498ca4c42d92a09" translate="yes" xml:space="preserve">
          <source>is not present, then the enum is an</source>
          <target state="translated">존재하지 않으면 열거 형은</target>
        </trans-unit>
        <trans-unit id="68dc1c3ccea4385f7042b472fc1ace71f6d77ece" translate="yes" xml:space="preserve">
          <source>is not used, the derived class's functions completely override all the functions of the same name in the base class, even if the types of the parameters in the base class functions are different. If, through implicit conversions to the base class, those other functions do get called, a compile-time error will be given:</source>
          <target state="translated">기본 클래스 함수의 매개 변수 유형이 다르더라도 파생 클래스의 함수는 기본 클래스에서 동일한 이름의 모든 함수를 완전히 대체합니다. 기본 클래스로의 암시 적 변환을 통해 다른 함수가 호출되면 컴파일 타임 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e0f1bc5df376b1a6cdd813e31819841b147625dc" translate="yes" xml:space="preserve">
          <source>is one for which there are no other references to the value of the expression and all expressions it transitively refers to are either also unique or are immutable. For example:</source>
          <target state="translated">는 표현식의 값에 대한 다른 참조가 없으며 전 이적으로 참조하는 모든 표현식도 고유하거나 불변입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5bab94d0f8277d98a7835f1c633b369498c224b2" translate="yes" xml:space="preserve">
          <source>is one of  &lt;code&gt;struct&lt;/code&gt;&lt;code&gt;union&lt;/code&gt;&lt;code&gt;class&lt;/code&gt;&lt;code&gt;interface&lt;/code&gt;&lt;code&gt;enum&lt;/code&gt;&lt;code&gt;function&lt;/code&gt;&lt;code&gt;delegate&lt;/code&gt;&lt;code&gt;const&lt;/code&gt;&lt;code&gt;immutable&lt;/code&gt;&lt;code&gt;shared&lt;/code&gt;&lt;code&gt;module&lt;/code&gt;&lt;code&gt;package&lt;/code&gt;  then the condition is satisfied if</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; &lt;code&gt;union&lt;/code&gt; &lt;code&gt;class&lt;/code&gt; &lt;code&gt;interface&lt;/code&gt; &lt;code&gt;enum&lt;/code&gt; &lt;code&gt;function&lt;/code&gt; &lt;code&gt;delegate&lt;/code&gt; &lt;code&gt;const&lt;/code&gt; &lt;code&gt;immutable&lt;/code&gt; &lt;code&gt;shared&lt;/code&gt; &lt;code&gt;module&lt;/code&gt; &lt;code&gt;package&lt;/code&gt; 중 하나 인 경우 조건이 충족되는 경우</target>
        </trans-unit>
        <trans-unit id="41afa26d423e48a2e4b4d118d2a2c2fb9c1dc01a" translate="yes" xml:space="preserve">
          <source>is one of &lt;code&gt;struct&lt;/code&gt;&lt;code&gt;union&lt;/code&gt;&lt;code&gt;class&lt;/code&gt;&lt;code&gt;interface&lt;/code&gt;&lt;code&gt;enum&lt;/code&gt;&lt;code&gt;function&lt;/code&gt;&lt;code&gt;delegate&lt;/code&gt;&lt;code&gt;const&lt;/code&gt;&lt;code&gt;immutable&lt;/code&gt;&lt;code&gt;shared&lt;/code&gt;  then the condition is satisfied if</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; &lt;code&gt;union&lt;/code&gt; &lt;code&gt;class&lt;/code&gt; &lt;code&gt;interface&lt;/code&gt; &lt;code&gt;enum&lt;/code&gt; &lt;code&gt;function&lt;/code&gt; &lt;code&gt;delegate&lt;/code&gt; &lt;code&gt;const&lt;/code&gt; &lt;code&gt;immutable&lt;/code&gt; &lt;code&gt;shared&lt;/code&gt; 중 하나 인 경우 조건이 충족되는 경우</target>
        </trans-unit>
        <trans-unit id="a5579c67d2ab09ba8316e0951996822eddb51d50" translate="yes" xml:space="preserve">
          <source>is one of those. &lt;a href=&quot;https://dlang.org/%20%20%20%20%20%20%20%20spec/module.html#package-module&quot;&gt;Package modules&lt;/a&gt; are considered to be both packages and modules.</source>
          <target state="translated">그 중 하나입니다. &lt;a href=&quot;https://dlang.org/%20%20%20%20%20%20%20%20spec/module.html#package-module&quot;&gt;패키지 모듈&lt;/a&gt; 은 패키지와 모듈 모두로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="cfcfeaf9b25a6aa1f4a0fb17eda163af2b3bc79b" translate="yes" xml:space="preserve">
          <source>is one of those. Furthermore,</source>
          <target state="translated">그 중 하나입니다. 더욱이,</target>
        </trans-unit>
        <trans-unit id="f5a831dd9c0d2cf013420180a7437911ef3a3a05" translate="yes" xml:space="preserve">
          <source>is only allowed to be a</source>
          <target state="translated">만 될 수 있습니다</target>
        </trans-unit>
        <trans-unit id="2919bdbf20faa2a4a34bfbf4fdea095b2eb75e56" translate="yes" xml:space="preserve">
          <source>is out of bounds of the</source>
          <target state="translated">의 범위를 벗어남</target>
        </trans-unit>
        <trans-unit id="d0f15322e8d887d867b2b09e009133cef57d4460" translate="yes" xml:space="preserve">
          <source>is possible only on Sun Solaris now</source>
          <target state="translated">Sun Solaris에서만 가능합니다</target>
        </trans-unit>
        <trans-unit id="2ef3d449203cd28441ede27818de3e7ef1442737" translate="yes" xml:space="preserve">
          <source>is present if needed as the this pointer for a member function or the context pointer for a nested function.</source>
          <target state="translated">필요한 경우 멤버 함수에 대한 this 포인터 또는 중첩 함수에 대한 컨텍스트 포인터로 존재합니다.</target>
        </trans-unit>
        <trans-unit id="e175f8e3d6df8d6953f1179f304e34acbb4c9f56" translate="yes" xml:space="preserve">
          <source>is present if needed to return a struct value, and</source>
          <target state="translated">구조체 값을 반환하는 데 필요한 경우</target>
        </trans-unit>
        <trans-unit id="f12696edb5046399c9a50b46c751baf42055f6db" translate="yes" xml:space="preserve">
          <source>is provided, it is declared and initialized to the value and type of the &lt;a href=&quot;expression#Expression&quot;&gt;&lt;i&gt;Expression&lt;/i&gt;&lt;/a&gt;. Its scope extends from when it is initialized to the end of the</source>
          <target state="translated">제공된 경우, &lt;a href=&quot;expression#Expression&quot;&gt;&lt;i&gt;Expression&lt;/i&gt;&lt;/a&gt; 의 값과 유형으로 선언되고 초기화됩니다 . 범위는 초기화 될 때부터 끝까지 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="8502148b1140c751858bc32bfbd5d716cc8a7312" translate="yes" xml:space="preserve">
          <source>is provided, it is declared and initialized to the value of the &lt;a href=&quot;expression#Expression&quot;&gt;&lt;i&gt;Expression&lt;/i&gt;&lt;/a&gt;. Its scope extends from when it is initialized to the end of the</source>
          <target state="translated">제공된 경우 &lt;a href=&quot;expression#Expression&quot;&gt;&lt;i&gt;Expression&lt;/i&gt;&lt;/a&gt; 의 값으로 선언되고 초기화됩니다 . 범위는 초기화 될 때부터 끝까지 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="bcb4e55cdd6ef59ff09b4729f556006bb717b466" translate="yes" xml:space="preserve">
          <source>is provided, it is declared to be of the type specified by</source>
          <target state="translated">제공된 경우에 의해 지정된 유형으로 선언됩니다.</target>
        </trans-unit>
        <trans-unit id="3343c7465631e72f9023f8cbfdb182307972e4be" translate="yes" xml:space="preserve">
          <source>is provided, the implementation may evaluate it and print the resulting message upon assert failure:</source>
          <target state="translated">제공된 경우 구현시이를 평가하고 어설 션 실패시 결과 메시지를 인쇄 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0e07e180e3276bbd8af2549877c612354337125" translate="yes" xml:space="preserve">
          <source>is reset to the default when entering a function scope or a non-anonymous struct, union, class, and restored when exiting that scope. It is not inherited from a base class.</source>
          <target state="translated">함수 범위 또는 익명이 아닌 구조체, 공용체, 클래스를 입력하면 기본값으로 재설정되고 해당 범위를 종료하면 복원됩니다. 기본 클래스에서 상속되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d395a533e6348f0a4c1a3c35c76daf6814babcf2" translate="yes" xml:space="preserve">
          <source>is rewritten as both:</source>
          <target state="translated">둘 다로 다시 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="3be44891c83531c37378d99bf51eb3f11d62f0ae" translate="yes" xml:space="preserve">
          <source>is rewritten as:</source>
          <target state="translated">다음과 같이 다시 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="256f1548c9c375e66907587c0e86ea7d3d52342e" translate="yes" xml:space="preserve">
          <source>is rewritten to &lt;a href=&quot;#FunctionLiteralBody&quot;&gt;&lt;i&gt;FunctionLiteralBody&lt;/i&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#FunctionLiteralBody&quot;&gt;&lt;i&gt;FunctionLiteralBody&lt;/i&gt;&lt;/a&gt; 로 다시 작성되었습니다 .</target>
        </trans-unit>
        <trans-unit id="38b34aad2100a57dea5ed186229371b0f43c6c49" translate="yes" xml:space="preserve">
          <source>is satisfied if the</source>
          <target state="translated">경우에 만족</target>
        </trans-unit>
        <trans-unit id="095bf58171e303e0c7e2a3424e17713d93d1db5f" translate="yes" xml:space="preserve">
          <source>is selected.</source>
          <target state="translated">가 선택되었습니다.</target>
        </trans-unit>
        <trans-unit id="47f47126c8ebf369463118fb2d9134c0b4074d53" translate="yes" xml:space="preserve">
          <source>is semantically correct and is the same as</source>
          <target state="translated">의미 적으로 정확하며</target>
        </trans-unit>
        <trans-unit id="b48fae287409b9ea3d029dc8d2751e900068a4bc" translate="yes" xml:space="preserve">
          <source>is semantically correct and is the same type as</source>
          <target state="translated">의미 적으로 정확하며 다음과 같은 유형입니다.</target>
        </trans-unit>
        <trans-unit id="47c8b797a3fd5b23b7914040fae3d24c0a41d129" translate="yes" xml:space="preserve">
          <source>is semantically correct and it is the same as or can be implicitly converted to</source>
          <target state="translated">의미 상 올 바르며 다음과 같거나 내재적으로 변환 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d970ed709afc1ac923d442f2b1f03e90f9572aa" translate="yes" xml:space="preserve">
          <source>is semantically correct. If so,</source>
          <target state="translated">의미 적으로 정확합니다. 그렇다면,</target>
        </trans-unit>
        <trans-unit id="96c97c8875107120e560564e3aebf4818eacba8c" translate="yes" xml:space="preserve">
          <source>is semantically equivalent to:</source>
          <target state="translated">의미 적으로 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4e7df0d03266b3592743aa99cb8b48fef22c4fc3" translate="yes" xml:space="preserve">
          <source>is set if t is a symbol</source>
          <target state="translated">t가 기호이면 설정</target>
        </trans-unit>
        <trans-unit id="402487feb158220d90d26d88304132e5f46912ba" translate="yes" xml:space="preserve">
          <source>is set if t is a type</source>
          <target state="translated">t가 타입이면 설정</target>
        </trans-unit>
        <trans-unit id="ad49b6d74c2dd5469022a0d72dad26b2b1676890" translate="yes" xml:space="preserve">
          <source>is set if t is an expression</source>
          <target state="translated">t가 표현식이면 설정</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
