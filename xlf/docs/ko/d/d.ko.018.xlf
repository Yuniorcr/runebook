<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="d">
    <body>
      <group id="d">
        <trans-unit id="076ea0cddc7cd8818920bc029904f93dd150a22a" translate="yes" xml:space="preserve">
          <source>D understands how C function names are &quot;mangled&quot; and the correct C function call/return sequence.</source>
          <target state="translated">D는 C 함수 이름이 어떻게 &quot;혼합&quot;되고 올바른 C 함수 호출 / 반환 순서를 이해합니다.</target>
        </trans-unit>
        <trans-unit id="bfdb702abc09e4bf6af6f33ee84d8a6561bdb436" translate="yes" xml:space="preserve">
          <source>D understands how C++ function names are &quot;mangled&quot; and the correct C++ function call/return sequence.</source>
          <target state="translated">D는 C ++ 함수 이름이 어떻게 &quot;혼합&quot;되고 올바른 C ++ 함수 호출 / 반환 순서를 이해합니다.</target>
        </trans-unit>
        <trans-unit id="f2ca0b27fd611ef015ce14be30794acd4f9a7076" translate="yes" xml:space="preserve">
          <source>D x86 Inline Assembler</source>
          <target state="translated">D x86 인라인 어셈블러</target>
        </trans-unit>
        <trans-unit id="5cdfa72ceece084d32cc919a274b9cba8fcd894f" translate="yes" xml:space="preserve">
          <source>D's allocators have a layered structure in both implementation and documentation:</source>
          <target state="translated">D의 할당자는 구현과 문서 모두에서 계층 구조를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="6829dc591dc54cea15edb61fe39f95e34f7f3982" translate="yes" xml:space="preserve">
          <source>D's built-in garbage-collected allocator.</source>
          <target state="translated">D의 내장 가비지 수집 할당 자.</target>
        </trans-unit>
        <trans-unit id="b8187ee85e129e1f90db421cc9a29c74c3da265a" translate="yes" xml:space="preserve">
          <source>D's goals for embedded documentation are:</source>
          <target state="translated">임베디드 문서에 대한 D의 목표는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="40a87633288b39dd560b9503d0951d9deec4c501" translate="yes" xml:space="preserve">
          <source>D, being a systems programming language, provides an inline assembler. The inline assembler is standardized for D implementations across the same CPU family, for example, the Intel Pentium inline assembler for a Win32 D compiler will be syntax compatible with the inline assembler for Linux running on an Intel Pentium.</source>
          <target state="translated">시스템 프로그래밍 언어 인 D는 인라인 어셈블러를 제공합니다. 인라인 어셈블러는 동일한 CPU 제품군에서 D 구현에 대해 표준화되어 있습니다. 예를 들어 Win32 D 컴파일러 용 인텔 펜티엄 인라인 어셈블러는 인텔 펜티엄에서 실행되는 Linux 용 인라인 어셈블러와 구문 호환됩니다.</target>
        </trans-unit>
        <trans-unit id="f121662d3ed579c4262cd8ee742f37a867894743" translate="yes" xml:space="preserve">
          <source>D-style Variadic Functions</source>
          <target state="translated">D 스타일 가변 기능</target>
        </trans-unit>
        <trans-unit id="85f3cd4f9bad02d84690368f648e490c0fb00c1d" translate="yes" xml:space="preserve">
          <source>D-style variadic functions cannot be marked as &lt;code&gt;@safe&lt;/code&gt;.</source>
          <target state="translated">D 스타일의 가변 함수는 &lt;code&gt;@safe&lt;/code&gt; 로 표시 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="1ff8c600ebb573fe27a75c1d69933fce59916bff" translate="yes" xml:space="preserve">
          <source>D.NET</source>
          <target state="translated">D.NET</target>
        </trans-unit>
        <trans-unit id="32d5e09780df47e67febb678521d8abe246ef7f3" translate="yes" xml:space="preserve">
          <source>D1 style operator overloading</source>
          <target state="translated">D1 스타일 연산자 과부하</target>
        </trans-unit>
        <trans-unit id="6e915cae90d2c29f2358559dc05c3df58595f55d" translate="yes" xml:space="preserve">
          <source>DATETIME</source>
          <target state="translated">DATETIME</target>
        </trans-unit>
        <trans-unit id="1814daa949d9be12578d550487601b3ffb0f3294" translate="yes" xml:space="preserve">
          <source>DCatchBlock</source>
          <target state="translated">DCatchBlock</target>
        </trans-unit>
        <trans-unit id="c35aab27f1f16d077844d1e2e843f5ad7a4d74b4" translate="yes" xml:space="preserve">
          <source>DCatchInfo</source>
          <target state="translated">DCatchInfo</target>
        </trans-unit>
        <trans-unit id="149aac94bd27b95bb54c837312e06b3ff1e01797" translate="yes" xml:space="preserve">
          <source>DELETE, TRACE and others</source>
          <target state="translated">삭제, 추적 및 기타</target>
        </trans-unit>
        <trans-unit id="ed03c1e6eea87bb52507c25ade7ebb2cf71c59b0" translate="yes" xml:space="preserve">
          <source>DEPRECATED: Use &lt;a href=&quot;#reverseArgs&quot;&gt;&lt;code&gt;reverseArgs&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">더 이상 사용되지 않음 : &lt;a href=&quot;#reverseArgs&quot;&gt; &lt;code&gt;reverseArgs&lt;/code&gt; &lt;/a&gt; 사용</target>
        </trans-unit>
        <trans-unit id="5684aeb3ce6e6bbccefbe8970e6bd7ea5a037735" translate="yes" xml:space="preserve">
          <source>DF &lt;code&gt;f&lt;/code&gt;</source>
          <target state="translated">DF &lt;code&gt;f&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c26f4629698733a6034fa75e0b7268c2d40e6d7a" translate="yes" xml:space="preserve">
          <source>DG &lt;code&gt;sink&lt;/code&gt;</source>
          <target state="translated">DG &lt;code&gt;sink&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fea0a308507e8c0ea8d5406ec3aa47072ac89917" translate="yes" xml:space="preserve">
          <source>DHandlerInfo</source>
          <target state="translated">DHandlerInfo</target>
        </trans-unit>
        <trans-unit id="8ac04a874fab478591710648015b2cab5ac04e7a" translate="yes" xml:space="preserve">
          <source>DHandlerTable</source>
          <target state="translated">DHandlerTable</target>
        </trans-unit>
        <trans-unit id="281b3e844c7c9ebd0f0700420e0eca42f1c07f3d" translate="yes" xml:space="preserve">
          <source>DList &lt;strong id=&quot;opBinary&quot;&gt;opBinary&lt;/strong&gt;(string op, Stuff)(Stuff rhs)</source>
          <target state="translated">DList &lt;strong id=&quot;opBinary&quot;&gt;opBinary&lt;/strong&gt; (스트링 op, Stuff) (Stuff rhs)</target>
        </trans-unit>
        <trans-unit id="db5bf0255282647c454fa59e6c8c5eb7735233ea" translate="yes" xml:space="preserve">
          <source>DList &lt;strong id=&quot;opBinaryRight&quot;&gt;opBinaryRight&lt;/strong&gt;(string op, Stuff)(Stuff lhs)</source>
          <target state="translated">DList &lt;strong id=&quot;opBinaryRight&quot;&gt;opBinaryRight&lt;/strong&gt; (문자열 op, 항목) (Stuff lhs)</target>
        </trans-unit>
        <trans-unit id="25c0b6803c5bf3452395c58abf6779ae685c3351" translate="yes" xml:space="preserve">
          <source>DList &lt;strong id=&quot;opOpAssign&quot;&gt;opOpAssign&lt;/strong&gt;(string op, Stuff)(Stuff rhs)</source>
          <target state="translated">DList &lt;strong id=&quot;opOpAssign&quot;&gt;opOpAssign&lt;/strong&gt; (문자열 op, 항목) (Stuff rhs)</target>
        </trans-unit>
        <trans-unit id="73220b6fc86e8444477fc3e4a8f1ac57ede8ba51" translate="yes" xml:space="preserve">
          <source>DMD (Digital Mars D) is the compiler</source>
          <target state="translated">DMD (Digital Mars D)는 컴파일러입니다</target>
        </trans-unit>
        <trans-unit id="2252ec1f6791e8118b0737f8262fe59003241113" translate="yes" xml:space="preserve">
          <source>DMD's entry point, C main.</source>
          <target state="translated">DMD의 진입 점, C main.</target>
        </trans-unit>
        <trans-unit id="20cf49a295826203fca48874eadc25984298220f" translate="yes" xml:space="preserve">
          <source>DMD-generated module &lt;code&gt;__entrypoint&lt;/code&gt; where the C main resides</source>
          <target state="translated">C main이 상주하는 DMD 생성 모듈 &lt;code&gt;__entrypoint&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a40af10594b1fe393f992683f992876e5b82c830" translate="yes" xml:space="preserve">
          <source>DNS cache timeout</source>
          <target state="translated">DNS 캐시 시간 초과</target>
        </trans-unit>
        <trans-unit id="839b4d242b27d4e00dc0979927fcbe8223225c0f" translate="yes" xml:space="preserve">
          <source>DNS lookup timeout.</source>
          <target state="translated">DNS 조회 시간 초과.</target>
        </trans-unit>
        <trans-unit id="05360ae598da60f4c6ea48e2bd59a360ad627b22" translate="yes" xml:space="preserve">
          <source>DOCFILENAME</source>
          <target state="translated">DOCFILENAME</target>
        </trans-unit>
        <trans-unit id="527d9c071bb7a8c959e3b30d96d47f285f9bf286" translate="yes" xml:space="preserve">
          <source>DT &lt;code&gt;tolerance&lt;/code&gt;</source>
          <target state="translated">DT &lt;code&gt;tolerance&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3b61e056a09b75ddaa3d4ded4da051df87ba437b" translate="yes" xml:space="preserve">
          <source>DWARF Version</source>
          <target state="translated">DWARF 버전</target>
        </trans-unit>
        <trans-unit id="24942523bd10801ae5b643487a7c28eba38f21f5" translate="yes" xml:space="preserve">
          <source>Dash</source>
          <target state="translated">Dash</target>
        </trans-unit>
        <trans-unit id="876c81de0c2e26d99cf08d9a14af93e711b19f5c" translate="yes" xml:space="preserve">
          <source>Dash_Punctuation</source>
          <target state="translated">Dash_Punctuation</target>
        </trans-unit>
        <trans-unit id="f4ad2706fa87a802352efdbb422cb64dbe61c91c" translate="yes" xml:space="preserve">
          <source>Data &lt;code&gt;data&lt;/code&gt;</source>
          <target state="translated">데이터 &lt;code&gt;data&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="352953a16a74f0790135416ee3270f630371240c" translate="yes" xml:space="preserve">
          <source>Data Change Notification Callbacks</source>
          <target state="translated">데이터 변경 알림 콜백</target>
        </trans-unit>
        <trans-unit id="df6ebe7969c4d5202b832d782941362c6e0cae9d" translate="yes" xml:space="preserve">
          <source>Data Type Compatibility</source>
          <target state="translated">데이터 타입 호환성</target>
        </trans-unit>
        <trans-unit id="300eccfd0c54c3aa5cc0df22eac803dbe88630e3" translate="yes" xml:space="preserve">
          <source>Data definitions DTibytes 1..7 bytes DTabytes offset of bytes of data a { a data bytes } DTnbytes bytes of data a { a data bytes } a = offset DTazeros # of 0 bytes a DTsymsize same as DTazeros, but the type of the symbol gives the size DTcommon # of 0 bytes (in a common block) a DTxoff offset from symbol w a w = symbol number (pointer for CPP) a = offset DTcoff offset into code segment</source>
          <target state="translated">데이터 정의 DTibytes 1..7 bytes DTabytes 바이트의 데이터 오프셋 a {data bytes} DTnbytes 바이트의 데이터 a {a data bytes} a = offset DTazeros # 0의 바이트 DTazeros와 동일한 DTsymsize이지만 기호의 유형 코드 커먼으로의 코드 waw = 심볼 번호 (CPP에 대한 포인터)로부터 DTxoff 오프셋을 0 바이트 (공통 블록으로)의 DTxoff 오프셋에 제공 a = 오프셋 DTcoff 오프셋</target>
        </trans-unit>
        <trans-unit id="5938adc1e4b8fc6c4fa6aeefb38d094858c6ba03" translate="yes" xml:space="preserve">
          <source>Data for a class declaration that is needed for the Objective-C integration.</source>
          <target state="translated">Objective-C 통합에 필요한 클래스 선언에 대한 데이터입니다.</target>
        </trans-unit>
        <trans-unit id="6a01abb210c956c2e12e9ccb27efc6f5697b4642" translate="yes" xml:space="preserve">
          <source>Data is shared across threads and the affix follows suit.</source>
          <target state="translated">데이터는 여러 스레드에서 공유되며 접두사가 적합합니다.</target>
        </trans-unit>
        <trans-unit id="775e1e628cf251b049c3fa9bfe1977a634c74e05" translate="yes" xml:space="preserve">
          <source>Data is written to one end of the pipe and read from the other.</source>
          <target state="translated">데이터는 파이프의 한쪽 끝에 쓰여지고 다른 쪽 끝에서 읽습니다.</target>
        </trans-unit>
        <trans-unit id="b510f83fb9e39f1a10ce10e2dd7b90e9a99c4178" translate="yes" xml:space="preserve">
          <source>Data link escape</source>
          <target state="translated">데이터 링크 이스케이프</target>
        </trans-unit>
        <trans-unit id="09d7927bd586a435c13e162ffd8e2037761ee143" translate="yes" xml:space="preserve">
          <source>Data may be placed into a table. Tables consist of a single header row, a delimiter row, and zero or more data rows. Cells in each row are separated by pipe (&lt;code&gt;|&lt;/code&gt;) characters. Initial and trailing &lt;code&gt;|&lt;/code&gt;'s are optional. The number of cells in the delimiter row must match the number of cells in the header row:</source>
          <target state="translated">데이터는 테이블에 배치 될 수 있습니다. 테이블은 단일 헤더 행, 구분자 행 및 0 개 이상의 데이터 행으로 구성됩니다. 각 행의 셀은 파이프 ( &lt;code&gt;|&lt;/code&gt; ) 문자 로 구분됩니다 . 초기 및 후행 &lt;code&gt;|&lt;/code&gt; 는 선택 사항입니다. 구분자 행의 셀 수는 헤더 행의 셀 수와 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="35e3ae602f557832691821f2a5d7c7c5a9884f67" translate="yes" xml:space="preserve">
          <source>Data of member in compressed form.</source>
          <target state="translated">압축 된 형태의 회원 데이터.</target>
        </trans-unit>
        <trans-unit id="796c0736ccd7880cc5a54a71c908e1c0408f3f88" translate="yes" xml:space="preserve">
          <source>Data of the entire contents of the archive.</source>
          <target state="translated">아카이브의 전체 내용에 대한 데이터.</target>
        </trans-unit>
        <trans-unit id="b20bde9629e5c99004ca74941e9b23c3a1df877c" translate="yes" xml:space="preserve">
          <source>Data passed to the progress callback</source>
          <target state="translated">진행 콜백으로 전달 된 데이터</target>
        </trans-unit>
        <trans-unit id="cc3e0536ab13aed2fb72da353c6d1b107881a065" translate="yes" xml:space="preserve">
          <source>Data pulled from input before finding a problem</source>
          <target state="translated">문제를 발견하기 전에 입력에서 가져온 데이터</target>
        </trans-unit>
        <trans-unit id="a46a83973f1d5005a51cff8503ad3554d15739dd" translate="yes" xml:space="preserve">
          <source>Data that will never change its value can be typed as immutable. The immutable keyword can be used as a</source>
          <target state="translated">값을 변경하지 않는 데이터는 변경 불가능한 것으로 입력 할 수 있습니다. 변경 불가능한 키워드는</target>
        </trans-unit>
        <trans-unit id="bd76809af8087d8bf86bccfefc1fce2214a3765e" translate="yes" xml:space="preserve">
          <source>Data to HTTP Post</source>
          <target state="translated">데이터를 HTTP 포스트로</target>
        </trans-unit>
        <trans-unit id="0be170abfdf228097d8fd04a092e2e686eb56209" translate="yes" xml:space="preserve">
          <source>Data to be swapped with &lt;code&gt;lhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; 로 교체 할 데이터 .</target>
        </trans-unit>
        <trans-unit id="e4c961498463f7e0d6c406d9c8008486428ab14e" translate="yes" xml:space="preserve">
          <source>Data to be swapped with &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;rhs&lt;/code&gt; 와 교체 될 데이터 .</target>
        </trans-unit>
        <trans-unit id="0c3a807b2afb3a1c7be0e9b4ae52d8810bae9911" translate="yes" xml:space="preserve">
          <source>Data to copy.</source>
          <target state="translated">복사 할 데이터.</target>
        </trans-unit>
        <trans-unit id="1dfd2ee1303ec46c31262cfa19e2f7fb06dc1a8b" translate="yes" xml:space="preserve">
          <source>Data to post.</source>
          <target state="translated">게시 할 데이터입니다.</target>
        </trans-unit>
        <trans-unit id="797bc05b357305e1932e73a7d36b5c5d9e636a5c" translate="yes" xml:space="preserve">
          <source>Data type definition of curl_off_t.</source>
          <target state="translated">curl_off_t의 데이터 유형 정의.</target>
        </trans-unit>
        <trans-unit id="805e631b2c4331634631ab9d3d378e6f37ae988c" translate="yes" xml:space="preserve">
          <source>Data type mismatch</source>
          <target state="translated">데이터 타입 불일치</target>
        </trans-unit>
        <trans-unit id="87ad120a4ba60c79863260e10eca7015248baadd" translate="yes" xml:space="preserve">
          <source>Database Connection For Functions</source>
          <target state="translated">함수를위한 데이터베이스 연결</target>
        </trans-unit>
        <trans-unit id="f77d22fb96d5dfa5073b2fe8ffcf8caa0f1f055f" translate="yes" xml:space="preserve">
          <source>Database Connection Handle</source>
          <target state="translated">데이터베이스 연결 핸들</target>
        </trans-unit>
        <trans-unit id="ed913bb076648fca64b8de1c707bbce02bda0945" translate="yes" xml:space="preserve">
          <source>Database Connection Status</source>
          <target state="translated">데이터베이스 연결 상태</target>
        </trans-unit>
        <trans-unit id="74cbb2ae7b134d31108d39d85d470240bf8ec748" translate="yes" xml:space="preserve">
          <source>Database Name NULL</source>
          <target state="translated">데이터베이스 이름 NULL</target>
        </trans-unit>
        <trans-unit id="9c74d7c4589947e1f0611e10551aa7c9e1f5efa2" translate="yes" xml:space="preserve">
          <source>Database Name Table Name</source>
          <target state="translated">데이터베이스 이름 테이블 이름</target>
        </trans-unit>
        <trans-unit id="08868372fcc6df03923ff0a62b6740aab4b59a1d" translate="yes" xml:space="preserve">
          <source>Database lock protocol error</source>
          <target state="translated">데이터베이스 잠금 프로토콜 오류</target>
        </trans-unit>
        <trans-unit id="eb9a4bc1c0c153e4e4b042a79113b815b7e3021d" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="translated">Date</target>
        </trans-unit>
        <trans-unit id="e41c9dca2333fa788b5cf30714ffc607513d2701" translate="yes" xml:space="preserve">
          <source>Date &lt;code&gt;date&lt;/code&gt;</source>
          <target state="translated">날짜 &lt;code&gt;date&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30ef0df6fd820e100e2b862329873127bc101367" translate="yes" xml:space="preserve">
          <source>Date &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="translated">날짜 &lt;code&gt;rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0992381fbd2ed819a8d85ebd8c5f3c4e046a291c" translate="yes" xml:space="preserve">
          <source>Date checking</source>
          <target state="translated">날짜 확인</target>
        </trans-unit>
        <trans-unit id="f9a570306f04512676b4ec99a692b20b053ab81b" translate="yes" xml:space="preserve">
          <source>Date conversion</source>
          <target state="translated">날짜 변환</target>
        </trans-unit>
        <trans-unit id="f1e5baf5ecc3589631088c40cbdd43061976ed8f" translate="yes" xml:space="preserve">
          <source>DateTime</source>
          <target state="translated">DateTime</target>
        </trans-unit>
        <trans-unit id="7bd0a645e83d6293f2ac658ba2c541a128f65160" translate="yes" xml:space="preserve">
          <source>DateTime &lt;code&gt;dateTime&lt;/code&gt;</source>
          <target state="translated">DateTime &lt;code&gt;dateTime&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="50c465a7e603d7f34f3bc92280dabffaa722ae0b" translate="yes" xml:space="preserve">
          <source>DateTime &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="translated">DateTime &lt;code&gt;rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="102540d9bb31a7bb0220b673237b8d10f7c7275f" translate="yes" xml:space="preserve">
          <source>David Simcha</source>
          <target state="translated">데이비드 심차</target>
        </trans-unit>
        <trans-unit id="23c1a4a564924c404275ccc90f9032d7bc610cd3" translate="yes" xml:space="preserve">
          <source>Day of a Gregorian Month.</source>
          <target state="translated">그레고리력의 달.</target>
        </trans-unit>
        <trans-unit id="232f188c18baa6ec73f240c2283edac2e895ead4" translate="yes" xml:space="preserve">
          <source>Day of the month.</source>
          <target state="translated">달의 일.</target>
        </trans-unit>
        <trans-unit id="626768dfcc6b9633ecc6a7e7e7bf8195db816514" translate="yes" xml:space="preserve">
          <source>Day of the week this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="translated">일주일이의 날 &lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c331185171d5b8b397558aeeba86ec31a95daba4" translate="yes" xml:space="preserve">
          <source>Day of the week this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="translated">이 &lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt; 요일 이 입니다.</target>
        </trans-unit>
        <trans-unit id="88e734266606869df957a7c0f140482b5dc9240d" translate="yes" xml:space="preserve">
          <source>Day of the week this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="translated">이 &lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; 요일&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="5adf2e7dce3355a8b43b9e02348a4d264604444a" translate="yes" xml:space="preserve">
          <source>Day of the year this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="translated">이 &lt;a href=&quot;#Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 요일 가 입니다.</target>
        </trans-unit>
        <trans-unit id="d8cf70c5944db45b0744da7bbc738777a7ad789e" translate="yes" xml:space="preserve">
          <source>Day of the year this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="translated">이 &lt;a href=&quot;#DateTime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt; 의 연도 이 입니다.</target>
        </trans-unit>
        <trans-unit id="f9c83570b5900ee02a21939abef960bd71f7ebe0" translate="yes" xml:space="preserve">
          <source>Day of the year this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="translated">이 &lt;a href=&quot;#SysTime&quot;&gt; &lt;code&gt;SysTime&lt;/code&gt; 의 일&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9d217acf15d9c91018c040a87e1a6703ff4783db" translate="yes" xml:space="preserve">
          <source>Day of the year.</source>
          <target state="translated">올해의 날.</target>
        </trans-unit>
        <trans-unit id="5556bda98087587c3fd3795ebf53b124789c5586" translate="yes" xml:space="preserve">
          <source>DayOfWeek &lt;code&gt;currDoW&lt;/code&gt;</source>
          <target state="translated">DayOfWeek &lt;code&gt;currDoW&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f233ca1cd32606c49e90bb687b290b377c3fa09c" translate="yes" xml:space="preserve">
          <source>DayOfWeek &lt;code&gt;dayOfWeek&lt;/code&gt;</source>
          <target state="translated">DayOfWeek &lt;code&gt;dayOfWeek&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fe0c0bef273fca4c1fc04dfe682d2fed5f5b8c28" translate="yes" xml:space="preserve">
          <source>DayOfWeek &lt;code&gt;dow&lt;/code&gt;</source>
          <target state="translated">DayOfWeek &lt;code&gt;dow&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8064b01fec4de1e986ae9989edb52515cfd892bb" translate="yes" xml:space="preserve">
          <source>Daylight Savings Time flag</source>
          <target state="translated">일광 절약 시간제 플래그</target>
        </trans-unit>
        <trans-unit id="86ccd9040e164f6b31eff441e1b4ddc44e72847d" translate="yes" xml:space="preserve">
          <source>Ddoc Section Formatting Macros</source>
          <target state="translated">Ddoc 섹션 서식 매크로</target>
        </trans-unit>
        <trans-unit id="6ac46f279a1fa0133478a64489b3104466715043" translate="yes" xml:space="preserve">
          <source>Ddoc can automatically generate usage examples for declarations using unit tests. If a declaration is followed by a documented unit test, the code from the test will be inserted into the example section of the declaration. This avoids the frequent problem of having outdated documentation for pieces of code.</source>
          <target state="translated">Ddoc은 단위 테스트를 사용하여 선언의 사용 예제를 자동으로 생성 할 수 있습니다. 선언에 문서화 된 단위 테스트가 뒤 따르면 테스트 코드가 선언의 예제 섹션에 삽입됩니다. 이렇게하면 코드 조각에 대한 오래된 문서가 자주 발생하는 문제를 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c18b6736ff9c9b5405dba716c1075e7224dff8e0" translate="yes" xml:space="preserve">
          <source>Ddoc does not generate HTML code. It formats into the basic formatting macros, which (in their predefined form) are then expanded into HTML. If output other than HTML is desired, then these macros need to be redefined.</source>
          <target state="translated">Ddoc은 HTML 코드를 생성하지 않습니다. 기본 형식 매크로로 형식을 지정한 다음 사전 정의 된 형식으로 HTML로 확장됩니다. HTML 이외의 출력이 필요한 경우 이러한 매크로를 다시 정의해야합니다.</target>
        </trans-unit>
        <trans-unit id="e9840b40bb80bed37d395f716bc6b09d4d6c01d5" translate="yes" xml:space="preserve">
          <source>Ddoc is primarily designed for use in producing documentation from embedded comments. It can also, however, be used for processing other general documentation. The reason for doing this would be to take advantage of the macro capability of Ddoc and the D code syntax highlighting capability.</source>
          <target state="translated">Ddoc은 주로 포함 된 주석에서 문서를 작성하는 데 사용하도록 설계되었습니다. 그러나 다른 일반 문서를 처리하는 데에도 사용할 수 있습니다. 이를 수행하는 이유는 Ddoc의 매크로 기능과 D 코드 구문 강조 기능을 활용하기 위함입니다.</target>
        </trans-unit>
        <trans-unit id="1fb7c1687832d0818c78d9fb05c4ecb341d15249" translate="yes" xml:space="preserve">
          <source>Deallocates &lt;code&gt;b&lt;/code&gt;, which is assumed to have been previously allocated with this allocator. Deallocation performs a linear search in the free list to preserve its sorting order. It follows that blocks with higher addresses in allocators with many free blocks are slower to deallocate.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; 를 할당 해제이전에이 할당 자로 할당 된 것으로 가정되는 합니다. 할당 해제는 사용 가능한 목록에서 선형 검색을 수행하여 정렬 순서를 유지합니다. 사용 가능한 블록이 많은 할당 자에서 주소가 높은 블록은 할당 취소 속도가 느립니다.</target>
        </trans-unit>
        <trans-unit id="3d01931f745782a57d8fca7493bd853c4a9ddce7" translate="yes" xml:space="preserve">
          <source>Deallocates &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; 를 할당 해제 합니다.</target>
        </trans-unit>
        <trans-unit id="e7fadc0e35dabce1bf9846c81d69446d932164cd" translate="yes" xml:space="preserve">
          <source>Deallocates &lt;code&gt;b&lt;/code&gt;. If it's of eligible size, it's put on the free list. Otherwise, it's returned to &lt;code&gt;parent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; 를 할당 해제 합니다. 적합한 크기이면 무료 목록에 추가됩니다. 그렇지 않으면 &lt;code&gt;parent&lt;/code&gt; 로 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="4dedb91c6fcf841105df2821d7153a890b807f6b" translate="yes" xml:space="preserve">
          <source>Deallocates &lt;code&gt;b&lt;/code&gt;. This works only if &lt;code&gt;b&lt;/code&gt; was obtained as the last call to &lt;code&gt;allocate&lt;/code&gt;; otherwise (i.e. another allocation has occurred since) it does nothing.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; 를 할당 해제 합니다. 이것은 마지막 &lt;code&gt;allocate&lt;/code&gt; 호출로 &lt;code&gt;b&lt;/code&gt; 를 얻은 경우에만 작동합니다 . 그렇지 않으면 (즉, 다른 할당이 발생한 이후) 아무 것도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="81959fcf2b1407376d1d5051d3ba64c2b39ce9b1" translate="yes" xml:space="preserve">
          <source>Deallocates &lt;code&gt;b&lt;/code&gt;. This works only if &lt;code&gt;b&lt;/code&gt; was obtained as the last call to &lt;code&gt;allocate&lt;/code&gt;; otherwise (i.e. another allocation has occurred since) it does nothing. This semantics is tricky and therefore &lt;code&gt;deallocate&lt;/code&gt; is defined only if &lt;code&gt;Region&lt;/code&gt; is instantiated with &lt;code&gt;Yes.defineDeallocate&lt;/code&gt; as the third template argument.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; 를 할당 해제 합니다. 이것은 마지막 &lt;code&gt;allocate&lt;/code&gt; 호출로 &lt;code&gt;b&lt;/code&gt; 를 얻은 경우에만 작동합니다 . 그렇지 않으면 (즉, 다른 할당이 이후에 발생) 아무것도하지 않습니다. 이 의미는 까다로운이므로 &lt;code&gt;deallocate&lt;/code&gt; 경우에만 정의 된 &lt;code&gt;Region&lt;/code&gt; 인스턴스화됩니다 &lt;code&gt;Yes.defineDeallocate&lt;/code&gt; 세 번째 템플릿 인수 로 .</target>
        </trans-unit>
        <trans-unit id="00417f5823644f33bf5edec704252ae474e90607" translate="yes" xml:space="preserve">
          <source>Deallocates a block previously allocated with this allocator.</source>
          <target state="translated">이 할당기로 이전에 할당 된 블록을 할당 해제합니다.</target>
        </trans-unit>
        <trans-unit id="e60dbe0f533b075afd615147044f432f563e90fc" translate="yes" xml:space="preserve">
          <source>Deallocates a memory block. Implementations that don't support this primitive should always return &lt;code&gt;false&lt;/code&gt;. A simple way to check that an allocator supports deallocation is to call &lt;code&gt;deallocate(null)&lt;/code&gt;.</source>
          <target state="translated">메모리 블록을 할당 해제합니다. 이 프리미티브를 지원하지 않는 구현은 항상 &lt;code&gt;false&lt;/code&gt; 를 반환해야합니다 . 할당자가 할당 해제를 지원하는지 확인하는 간단한 방법은 &lt;code&gt;deallocate(null)&lt;/code&gt; 을 호출하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="1aecd159fca1c4e67fecc7d26fe360b4f5fa379d" translate="yes" xml:space="preserve">
          <source>Deallocates all memory allocated by this region, which can be subsequently reused for new allocations.</source>
          <target state="translated">이 영역에 의해 할당 된 모든 메모리를 할당 해제하고, 이후에 새로운 할당에 재사용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="29e7515d0b0fa1aa05fab0cdf677555556bd1ab2" translate="yes" xml:space="preserve">
          <source>Deallocates all memory allocated with this allocator.</source>
          <target state="translated">이 할당 자로 할당 된 모든 메모리를 할당 해제합니다.</target>
        </trans-unit>
        <trans-unit id="13ee72b94b0c3a01c2b39dc74bddd998b6f54bff" translate="yes" xml:space="preserve">
          <source>Deallocates all memory allocated with this allocator. If an allocator implements this method, it must specify whether its destructor calls it, too.</source>
          <target state="translated">이 할당 자로 할당 된 모든 메모리를 할당 해제합니다. 할당자가이 메소드를 구현하면 소멸자가 호출 할 것인지도 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="c8b0dd85166c453cf047322a1d701f8f0774ce61" translate="yes" xml:space="preserve">
          <source>Deallocates all memory allocated.</source>
          <target state="translated">할당 된 모든 메모리를 할당 해제합니다.</target>
        </trans-unit>
        <trans-unit id="dc581d2fbe01bbad449340bd78f6d3905d3d52bc" translate="yes" xml:space="preserve">
          <source>Deallocates all memory currently allocated, making the allocator ready for other allocations. This is a &amp;Omicron;(&lt;code&gt;1&lt;/code&gt;) operation.</source>
          <target state="translated">현재 할당 된 모든 메모리를 할당 해제하여 할당자를 다른 할당에 사용할 수 있도록합니다. 이것은 &amp;Omicron; ( &lt;code&gt;1&lt;/code&gt; ) 연산입니다.</target>
        </trans-unit>
        <trans-unit id="375eb34e6b4c58d529175cc75b6080a5179fa77c" translate="yes" xml:space="preserve">
          <source>Deallocates all memory. Implementations that don't support this primitive should always return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">모든 메모리를 할당 해제합니다. 이 프리미티브를 지원하지 않는 구현은 항상 &lt;code&gt;false&lt;/code&gt; 를 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="693611e2f31c3d686f38d8d59ef91ed8a58f5e60" translate="yes" xml:space="preserve">
          <source>Deallocates everything from the parent.</source>
          <target state="translated">부모로부터 모든 것을 할당 해제합니다.</target>
        </trans-unit>
        <trans-unit id="28e790db63e16ffb73cddf977ba22e95426db2d3" translate="yes" xml:space="preserve">
          <source>Deallocates the buffer &lt;code&gt;b&lt;/code&gt; given as parameter. Deallocations take place in constant time, regardless of the number of nodes in the list. &lt;code&gt;b.ptr&lt;/code&gt; is rounded down to the nearest multiple of the &lt;code&gt;alignment&lt;/code&gt; to quickly find the corresponding &lt;code&gt;AlignedBlockNode&lt;/code&gt;.</source>
          <target state="translated">매개 변수로 제공된 버퍼 &lt;code&gt;b&lt;/code&gt; 를 할당 해제합니다 . 할당 해제는 목록의 노드 수에 관계없이 일정한 시간에 발생합니다. &lt;code&gt;b.ptr&lt;/code&gt; 은 가장 가까운 &lt;code&gt;alignment&lt;/code&gt; 배수로 반올림 되어 해당 &lt;code&gt;AlignedBlockNode&lt;/code&gt; 를 빠르게 찾습니다. .</target>
        </trans-unit>
        <trans-unit id="e6ed360d4abba38f3529f274c0f497df84327d1f" translate="yes" xml:space="preserve">
          <source>Deallocates the given buffer &lt;code&gt;b&lt;/code&gt;, by atomically setting the corresponding bit to &lt;code&gt;0&lt;/code&gt;. &lt;code&gt;b&lt;/code&gt; must be valid, and cannot contain multiple adjacent &lt;code&gt;blocks&lt;/code&gt;.</source>
          <target state="translated">해당 비트를 &lt;code&gt;0&lt;/code&gt; 으로 원자 적으로 설정 하여 지정된 버퍼 &lt;code&gt;b&lt;/code&gt; 를 할당 해제합니다 . &lt;code&gt;b&lt;/code&gt; 는 유효해야하며 여러 개의 인접한 &lt;code&gt;blocks&lt;/code&gt; 포함 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="6756d0c2656d83a2c4a40d0c6c294083d6454148" translate="yes" xml:space="preserve">
          <source>Deallocates the memory referenced by p. If p is null, no action occurs. If p references memory not originally allocated by this garbage collector, if p points to the interior of a memory block, or if this method is called from a finalizer, no action will be taken. The block will not be finalized regardless of whether the FINALIZE attribute is set. If finalization is desired, call &lt;a href=&quot;object#destroy&quot;&gt;&lt;code&gt;destroy&lt;/code&gt;&lt;/a&gt; prior to &lt;code&gt;GC.free&lt;/code&gt;.</source>
          <target state="translated">p가 참조하는 메모리를 할당 해제합니다. p가 null이면 아무런 작업도 수행되지 않습니다. p가이 가비지 수집기에 의해 원래 할당되지 않은 메모리를 참조하는 경우, p가 메모리 블록의 내부를 가리 키거나이 메서드가 종료 자에서 호출되면 아무 작업도 수행되지 않습니다. FINALIZE 속성의 설정 여부에 관계없이 블록이 완료되지 않습니다. 마무리가 필요한 경우 &lt;code&gt;GC.free&lt;/code&gt; 전에 &lt;a href=&quot;object#destroy&quot;&gt; &lt;code&gt;destroy&lt;/code&gt; 를&lt;/a&gt; 호출 하십시오 .</target>
        </trans-unit>
        <trans-unit id="91420f5f3acdf53b1f959f067447b487323b2d18" translate="yes" xml:space="preserve">
          <source>Deallocation removes any read/write permissions from the target pages and notifies the OS to reclaim the physical memory, while keeping the virtual memory.</source>
          <target state="translated">할당 해제는 대상 페이지에서 읽기 / 쓰기 권한을 제거하고 가상 메모리를 유지하면서 물리적 메모리를 회수하도록 OS에 알립니다.</target>
        </trans-unit>
        <trans-unit id="978410b97d8a330550445ffa9ad9d811af65a9f4" translate="yes" xml:space="preserve">
          <source>Debug Condition</source>
          <target state="translated">디버그 조건</target>
        </trans-unit>
        <trans-unit id="14a5529bad4b06400e8ae61ab912a7cd0d10cc37" translate="yes" xml:space="preserve">
          <source>Debug Specification</source>
          <target state="translated">디버그 사양</target>
        </trans-unit>
        <trans-unit id="06a1228bc1a2b90a6f69119da7257f1a1ab45207" translate="yes" xml:space="preserve">
          <source>Debug Statement</source>
          <target state="translated">디버그 문장</target>
        </trans-unit>
        <trans-unit id="e0c2c1850c4f5c7487bbcf707447288586061665" translate="yes" xml:space="preserve">
          <source>Debug identifiers and levels are set either by the command line switch &lt;code&gt;-debug&lt;/code&gt; or by a</source>
          <target state="translated">디버그 식별자와 레벨은 명령 행 스위치 &lt;code&gt;-debug&lt;/code&gt; 또는</target>
        </trans-unit>
        <trans-unit id="f2acd488deeb1960df8e4e199af113ed6c4248b5" translate="yes" xml:space="preserve">
          <source>Debug specifications only affect the module they appear in, they do not affect any imported modules. Debug identifiers are in their own namespace, independent from version identifiers and other symbols.</source>
          <target state="translated">디버그 사양은 표시되는 모듈에만 영향을 미치며 가져온 모듈에는 영향을 미치지 않습니다. 디버그 식별자는 버전 식별자 및 기타 기호와 독립적으로 자체 네임 스페이스에 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e4e870be69d39ebaf5be79f4a5e8a28e4a8f09b" translate="yes" xml:space="preserve">
          <source>DebugSpecification</source>
          <target state="translated">DebugSpecification</target>
        </trans-unit>
        <trans-unit id="3d2007a7dd8aa1714c20fa92fcc1113b1137a313" translate="yes" xml:space="preserve">
          <source>DebugStatement</source>
          <target state="translated">DebugStatement</target>
        </trans-unit>
        <trans-unit id="54b7fa5fd17a033513aa4603fe16f3295eb20cde" translate="yes" xml:space="preserve">
          <source>DebugStatements</source>
          <target state="translated">DebugStatements</target>
        </trans-unit>
        <trans-unit id="4d93d7d3dbfcebf8261ee800b21d2d60de831b8a" translate="yes" xml:space="preserve">
          <source>DebugSymbol's happen for statements like: debug = identifier; debug = integer;</source>
          <target state="translated">DebugSymbol은 다음과 같은 명령문에서 발생합니다. debug = identifier; 디버그 = 정수;</target>
        </trans-unit>
        <trans-unit id="a30a20c0780e4f65a6fbda30a51368b3ea650aeb" translate="yes" xml:space="preserve">
          <source>Decide if attributes for this function can be inferred from examining the function body.</source>
          <target state="translated">함수 본문을 검사하여이 함수의 속성을 유추 할 수 있는지 결정하십시오.</target>
        </trans-unit>
        <trans-unit id="e4c3a2d0cc24a4535ef91791064ffe989cbd382a" translate="yes" xml:space="preserve">
          <source>Decimal</source>
          <target state="translated">Decimal</target>
        </trans-unit>
        <trans-unit id="9e7ef50b518db60d788f6a66f520f096a5520932" translate="yes" xml:space="preserve">
          <source>Decimal Literal Types</source>
          <target state="translated">십진 리터럴 유형</target>
        </trans-unit>
        <trans-unit id="a474b82d29231d6f1ccbf54770e91331804b5e39" translate="yes" xml:space="preserve">
          <source>Decimal integers are a sequence of decimal digits.</source>
          <target state="translated">십진 정수는 십진 숫자의 시퀀스입니다.</target>
        </trans-unit>
        <trans-unit id="2de80026e02653cd40f376511faf80e503b57dad" translate="yes" xml:space="preserve">
          <source>Decimal_Number</source>
          <target state="translated">Decimal_Number</target>
        </trans-unit>
        <trans-unit id="902215ab9cce221464c82a811ffbf787aae569a5" translate="yes" xml:space="preserve">
          <source>Declaration &lt;code&gt;d&lt;/code&gt;</source>
          <target state="translated">선언 &lt;code&gt;d&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4a9836d7a1f0bfb09fb9f17d77609357ee100d20" translate="yes" xml:space="preserve">
          <source>Declaration Statement</source>
          <target state="translated">선언문</target>
        </trans-unit>
        <trans-unit id="0d29683a9ffa0394ace63543e28e006b48029722" translate="yes" xml:space="preserve">
          <source>Declaration Syntax</source>
          <target state="translated">선언 구문</target>
        </trans-unit>
        <trans-unit id="6dbd41224edfbe68c7f2bb4f6490fc6955007a5d" translate="yes" xml:space="preserve">
          <source>Declaration of a symbol</source>
          <target state="translated">심볼 선언</target>
        </trans-unit>
        <trans-unit id="4df4d0d514f56b499f06d9d0b79927ecf23d6473" translate="yes" xml:space="preserve">
          <source>Declaration statements define variables, and declare types, templates, functions, imports, conditionals, static foreaches, and static asserts.</source>
          <target state="translated">선언문은 변수를 정의하고 유형, 템플릿, 함수, 가져 오기, 조건부, 정적 foreaches 및 정적 어설 션을 선언합니다.</target>
        </trans-unit>
        <trans-unit id="f167d58fa1936ba9d8b8b66ebb917ff8a385b7fc" translate="yes" xml:space="preserve">
          <source>Declaration syntax generally reads right to left:</source>
          <target state="translated">선언 구문은 일반적으로 오른쪽에서 왼쪽으로 읽습니다.</target>
        </trans-unit>
        <trans-unit id="f529c46c42bf47385843447380f9083ea85ad933" translate="yes" xml:space="preserve">
          <source>DeclarationBlock</source>
          <target state="translated">DeclarationBlock</target>
        </trans-unit>
        <trans-unit id="5bb823617a62be17e705b335fba5d4aec48eeccc" translate="yes" xml:space="preserve">
          <source>DeclarationExp &lt;code&gt;e&lt;/code&gt;</source>
          <target state="translated">선언 Expe &lt;code&gt;e&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b9b846963186dedc9a34aab11fab9a0a092e2d1b" translate="yes" xml:space="preserve">
          <source>Declarations</source>
          <target state="translated">Declarations</target>
        </trans-unit>
        <trans-unit id="b2d470601a3d4487d9aa450f5db0b4407b71ec6f" translate="yes" xml:space="preserve">
          <source>Declarations appear before the identifier being declared and read right to left, so:</source>
          <target state="translated">선언은 식별자가 선언되기 전에 나타나고 오른쪽에서 왼쪽으로 읽습니다.</target>
        </trans-unit>
        <trans-unit id="792121f5e5959941aabdee1cc06fb17c681269dd" translate="yes" xml:space="preserve">
          <source>Declarations at module scope.</source>
          <target state="translated">모듈 범위에서의 선언.</target>
        </trans-unit>
        <trans-unit id="357cee9200ca080c7e1bb92afd3f56d835106b03" translate="yes" xml:space="preserve">
          <source>Declarations for interfacing with the ODBC library.</source>
          <target state="translated">ODBC 라이브러리와의 인터페이스 선언.</target>
        </trans-unit>
        <trans-unit id="6c8080422baab7c5dfd2ef7a7d95733d7d14dbd2" translate="yes" xml:space="preserve">
          <source>Declarations inside &lt;code&gt;BaseClass&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BaseClass&lt;/code&gt; 내부의 선언 .</target>
        </trans-unit>
        <trans-unit id="acbd57364da8ec4429f99f9abe1e2cf960f39c4c" translate="yes" xml:space="preserve">
          <source>Declarations inside &lt;code&gt;Foo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Foo&lt;/code&gt; 내부의 선언 .</target>
        </trans-unit>
        <trans-unit id="07073b60f0a5c321ba826fabc66323c4ccf44ef5" translate="yes" xml:space="preserve">
          <source>Declarations inside &lt;code&gt;bar&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bar&lt;/code&gt; 내부의 선언 .</target>
        </trans-unit>
        <trans-unit id="e39406434fba037956df51d317adc73db26ad763" translate="yes" xml:space="preserve">
          <source>Declarator</source>
          <target state="translated">Declarator</target>
        </trans-unit>
        <trans-unit id="4884a58f8854eaff9e14e4541fa2bfc15e139d8a" translate="yes" xml:space="preserve">
          <source>Declare The Schema Of A Virtual Table</source>
          <target state="translated">가상 테이블의 스키마 선언</target>
        </trans-unit>
        <trans-unit id="789b27945c32aa3b3dc27c3088dc1d56ef533c8f" translate="yes" xml:space="preserve">
          <source>Declare one or more of the functions to be function templates even if they take no specific template arguments:</source>
          <target state="translated">특정 템플릿 인수를 사용하지 않더라도 하나 이상의 함수를 함수 템플릿으로 선언합니다.</target>
        </trans-unit>
        <trans-unit id="d589e1ed3e4a83c9e3c689d35e6af4db16cf6a59" translate="yes" xml:space="preserve">
          <source>Declare parameters of template instance, initialize them with the template instance arguments.</source>
          <target state="translated">템플릿 인스턴스의 파라미터를 선언하고 템플릿 인스턴스 인수로 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="d8118e66aa0d9891f4571c1ab2494aaa3cdb7a6b" translate="yes" xml:space="preserve">
          <source>Declare result variable lazily.</source>
          <target state="translated">결과 변수를 느리게 선언하십시오.</target>
        </trans-unit>
        <trans-unit id="8ce51b37a7f81f5172fdac6a58f02604f2a69530" translate="yes" xml:space="preserve">
          <source>Declare template parameter tp with value o, and install it in the scope sc.</source>
          <target state="translated">템플릿 매개 변수 tp를 값 o로 선언하고 범위 sc에 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="13a40c01b2509965e38c4e58bf4f7081ffd728d9" translate="yes" xml:space="preserve">
          <source>Declare the functions inside of a mixin template:</source>
          <target state="translated">믹스 인 템플릿 내부의 함수를 선언하십시오.</target>
        </trans-unit>
        <trans-unit id="a85107bcac12057ef2b3cbc11e112f58d45e3a1d" translate="yes" xml:space="preserve">
          <source>Declare the functions to be static members of a nested struct:</source>
          <target state="translated">중첩 구조체의 정적 멤버가되도록 함수를 선언하십시오.</target>
        </trans-unit>
        <trans-unit id="23776085f3b27f84d9591be0a7aa80866f3538fd" translate="yes" xml:space="preserve">
          <source>Declare your own linear congruential engine</source>
          <target state="translated">자신 만의 선형 합동 엔진 선언</target>
        </trans-unit>
        <trans-unit id="c657d4e9ebee4c198c968bcba7aff6eeab9209c1" translate="yes" xml:space="preserve">
          <source>Declared Datatype Of A Query Result</source>
          <target state="translated">쿼리 결과의 선언 된 데이터 유형</target>
        </trans-unit>
        <trans-unit id="71a17a71a9f79cc8bd76ac0e7f0f13c4f0c8db81" translate="yes" xml:space="preserve">
          <source>Declaring an External Class</source>
          <target state="translated">외부 클래스 선언</target>
        </trans-unit>
        <trans-unit id="6c0d8f96cd8b374527e48fbd5b4e9fb411f6bca8" translate="yes" xml:space="preserve">
          <source>Declaring an instance variable looks exactly the same as for a regular D class.</source>
          <target state="translated">인스턴스 변수 선언은 일반 D 클래스와 동일하게 보입니다.</target>
        </trans-unit>
        <trans-unit id="df50d3b937b66b95438db0baeefd22f2c1fa73b6" translate="yes" xml:space="preserve">
          <source>Decode</source>
          <target state="translated">Decode</target>
        </trans-unit>
        <trans-unit id="dbba0fda2419c5ddfc2c1e2e7bf06860f6436900" translate="yes" xml:space="preserve">
          <source>Decode Signed LEB128.</source>
          <target state="translated">서명 된 LEB128을 디코딩합니다.</target>
        </trans-unit>
        <trans-unit id="6d4fd06fda3c2f0f209bfb521e76e6c96911badb" translate="yes" xml:space="preserve">
          <source>Decode Unsigned LEB128.</source>
          <target state="translated">부호없는 LEB128을 디코딩합니다.</target>
        </trans-unit>
        <trans-unit id="1331e16b2aa86b673e67d5de5aa0667a06e438f1" translate="yes" xml:space="preserve">
          <source>Decode a UTF-16 sequence as a single UTF-32 code point.</source>
          <target state="translated">UTF-16 시퀀스를 단일 UTF-32 코드 포인트로 디코딩하십시오.</target>
        </trans-unit>
        <trans-unit id="37b32b5db730690ed79c40536224b996ea9780ef" translate="yes" xml:space="preserve">
          <source>Decode a UTF-8 sequence as a single UTF-32 code point.</source>
          <target state="translated">UTF-8 시퀀스를 단일 UTF-32 코드 포인트로 디코딩하십시오.</target>
        </trans-unit>
        <trans-unit id="dfd3524c8c563b09008218fac3d408952ffb4b11" translate="yes" xml:space="preserve">
          <source>Decode, and throw exception on error</source>
          <target state="translated">디코딩하고 오류 발생시 예외 발생</target>
        </trans-unit>
        <trans-unit id="406bb62f3f33b8ee5964cf4ecafe3878f9b6291c" translate="yes" xml:space="preserve">
          <source>Decode, but ignore errors</source>
          <target state="translated">디코딩하지만 오류는 무시</target>
        </trans-unit>
        <trans-unit id="3821e20522daad9f57316f912fe1be7b26097318" translate="yes" xml:space="preserve">
          <source>DecodeException if decode fails</source>
          <target state="translated">디코딩에 실패한 경우 DecodeException</target>
        </trans-unit>
        <trans-unit id="46664e82aa4d152b87c49f64b8c12e4e9f3bfc63" translate="yes" xml:space="preserve">
          <source>DecodeException if mode == DecodeMode.STRICT and decode fails</source>
          <target state="translated">mode == DecodeMode.STRICT이고 디코딩에 실패한 경우 DecodeException</target>
        </trans-unit>
        <trans-unit id="f001d418c3a6a2090bdc0efd4a74748a8652ac76" translate="yes" xml:space="preserve">
          <source>DecodeMode &lt;code&gt;mode&lt;/code&gt;</source>
          <target state="translated">디코드 &lt;code&gt;mode&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e9f9cd86a51b3e2f8f8bb9ccc352699712738757" translate="yes" xml:space="preserve">
          <source>Decoder!Range &lt;strong id=&quot;decoder&quot;&gt;decoder&lt;/strong&gt;(Range)(Range range)</source>
          <target state="translated">디코더! 범위 &lt;strong id=&quot;decoder&quot;&gt;디코더&lt;/strong&gt; (범위) (범위 범위)</target>
        </trans-unit>
        <trans-unit id="1b1bd0df056cc5b05a9c21efd16cacfb012e0aa6" translate="yes" xml:space="preserve">
          <source>Decodes a single code point from the end of a string.</source>
          <target state="translated">문자열 끝에서 단일 코드 포인트를 디코딩합니다.</target>
        </trans-unit>
        <trans-unit id="3d5e319e3deb54e40422a2ff80fdffd0d465c77c" translate="yes" xml:space="preserve">
          <source>Decodes a single code point.</source>
          <target state="translated">단일 코드 포인트를 디코딩합니다.</target>
        </trans-unit>
        <trans-unit id="d605555fd554268d3f7092e4dfd739e804d6e4ff" translate="yes" xml:space="preserve">
          <source>Decodes a single code point. The input does not have to be valid.</source>
          <target state="translated">단일 코드 포인트를 디코딩합니다. 입력이 유효하지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="0f95dd9db2c1f3dc7f42ac75e283334b4487f4e0" translate="yes" xml:space="preserve">
          <source>Decodes a string by unescaping all predefined XML entities.</source>
          <target state="translated">미리 정의 된 모든 XML 엔터티를 이스케이프 처리하여 문자열을 디코딩합니다.</target>
        </trans-unit>
        <trans-unit id="394691f122913c450c1d979638fefc7f9b4936d9" translate="yes" xml:space="preserve">
          <source>Decodes and returns the code point starting at &lt;code&gt;str[index]&lt;/code&gt;. &lt;code&gt;index&lt;/code&gt; is advanced to one past the decoded code point. If the code point is not well-formed, then a &lt;code&gt;UTFException&lt;/code&gt; is thrown and &lt;code&gt;index&lt;/code&gt; remains unchanged.</source>
          <target state="translated">&lt;code&gt;str[index]&lt;/code&gt; 에서 시작하는 코드 포인트를 디코딩하고 리턴합니다 . &lt;code&gt;index&lt;/code&gt; 는 디코딩 된 코드 포인트를 지나서 1로 진행된다. 코드 포인트의 형식이 올바르지 않으면 &lt;code&gt;UTFException&lt;/code&gt; 이 발생하고 &lt;code&gt;index&lt;/code&gt; 은 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a966f90f685bee27fa037e2c88b5c7e4eaa16b77" translate="yes" xml:space="preserve">
          <source>Decodes source into a given &lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;output range&lt;/a&gt;.</source>
          <target state="translated">지정된 &lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;출력 범위&lt;/a&gt; 로 소스를 디코딩 합니다 .</target>
        </trans-unit>
        <trans-unit id="49d1787ea4b9bb131d20e33432426cfac5ed8daf" translate="yes" xml:space="preserve">
          <source>Decodes source into newly-allocated buffer.</source>
          <target state="translated">소스를 새로 할당 된 버퍼로 디코딩합니다.</target>
        </trans-unit>
        <trans-unit id="dc99eaa6f996cb24aaa9f16d927e74ca329a6edf" translate="yes" xml:space="preserve">
          <source>Decodes source into the given buffer.</source>
          <target state="translated">지정된 버퍼로 소스를 디코드합니다.</target>
        </trans-unit>
        <trans-unit id="ac1d3d72ef820f018eec0cf37be48d3fc07063e8" translate="yes" xml:space="preserve">
          <source>Decodes the URI string encodedURI into a UTF-8 string and returns it. All escape sequences are decoded.</source>
          <target state="translated">encodeURI URI 문자열을 UTF-8 문자열로 디코딩하여 리턴합니다. 모든 이스케이프 시퀀스가 ​​디코딩됩니다.</target>
        </trans-unit>
        <trans-unit id="475eb1f0fc19db39961b576c47d3442f49745df2" translate="yes" xml:space="preserve">
          <source>Decodes the URI string encodedURI into a UTF-8 string and returns it. Escape sequences that resolve to reserved URI characters are not replaced. Escape sequences that resolve to the '#' character are not replaced.</source>
          <target state="translated">encodeURI URI 문자열을 UTF-8 문자열로 디코딩하여 리턴합니다. 예약 된 URI 문자로 해석되는 이스케이프 시퀀스는 바뀌지 않습니다. '#'문자로 해석되는 이스케이프 시퀀스는 바뀌지 않습니다.</target>
        </trans-unit>
        <trans-unit id="73e4e91afe8b4f47795484e980cc395b572d9595" translate="yes" xml:space="preserve">
          <source>Decoding (&lt;a href=&quot;#decodeGrapheme&quot;&gt;&lt;code&gt;decodeGrapheme&lt;/code&gt;&lt;/a&gt;) and iteration (&lt;a href=&quot;#byGrapheme&quot;&gt;&lt;code&gt;byGrapheme&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#graphemeStride&quot;&gt;&lt;code&gt;graphemeStride&lt;/code&gt;&lt;/a&gt;) by user-perceived characters, that is by &lt;a href=&quot;#Grapheme&quot;&gt;&lt;code&gt;Grapheme&lt;/code&gt;&lt;/a&gt; clusters.</source>
          <target state="translated">사용자 인식 문자, 즉 &lt;a href=&quot;#Grapheme&quot;&gt; &lt;code&gt;Grapheme&lt;/code&gt; &lt;/a&gt; 클러스터에 의한 디코딩 ( &lt;a href=&quot;#decodeGrapheme&quot;&gt; &lt;code&gt;decodeGrapheme&lt;/code&gt; &lt;/a&gt; ) 및 반복 ( &lt;a href=&quot;#byGrapheme&quot;&gt; &lt;code&gt;byGrapheme&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#graphemeStride&quot;&gt; &lt;code&gt;graphemeStride&lt;/code&gt; &lt;/a&gt; ) .</target>
        </trans-unit>
        <trans-unit id="c8daa89a5a99e8ec115a0662f2e1660217e62ec8" translate="yes" xml:space="preserve">
          <source>Decommit all physical memory associated with the buffer given as parameter, but keep the range of virtual addresses.</source>
          <target state="translated">매개 변수로 제공된 버퍼와 연관된 모든 실제 메모리를 해제하지만 가상 주소의 범위는 유지하십시오.</target>
        </trans-unit>
        <trans-unit id="9b0a363a7d243d250d53b4cbfe3e066f33145e52" translate="yes" xml:space="preserve">
          <source>Decompose</source>
          <target state="translated">Decompose</target>
        </trans-unit>
        <trans-unit id="f696ff6edb97c27479dfeb370594310b979f4fdf" translate="yes" xml:space="preserve">
          <source>Decomposes a Hangul syllable. If &lt;code&gt;ch&lt;/code&gt; is not a composed syllable then this function returns &lt;a href=&quot;#Grapheme&quot;&gt;&lt;code&gt;Grapheme&lt;/code&gt;&lt;/a&gt; containing only &lt;code&gt;ch&lt;/code&gt; as is.</source>
          <target state="translated">한글 음절을 분해합니다. 경우 &lt;code&gt;ch&lt;/code&gt; 다음이 함수가 반환 합성 음절하지 &lt;a href=&quot;#Grapheme&quot;&gt; &lt;code&gt;Grapheme&lt;/code&gt; &lt;/a&gt; 포함 된 단지 &lt;code&gt;ch&lt;/code&gt; 로합니다.</target>
        </trans-unit>
        <trans-unit id="8e7b400681f356e884cec054477da6ae1fd30add" translate="yes" xml:space="preserve">
          <source>Decomposing and composing of individual character(s) according to canonical or compatibility rules, see &lt;a href=&quot;#compose&quot;&gt;&lt;code&gt;compose&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#decompose&quot;&gt;&lt;code&gt;decompose&lt;/code&gt;&lt;/a&gt;, including the specific version for Hangul syllables &lt;a href=&quot;#composeJamo&quot;&gt;&lt;code&gt;composeJamo&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#decomposeHangul&quot;&gt;&lt;code&gt;decomposeHangul&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">정식 또는 호환성 규칙에 따라 개별 문자를 분해하고 구성 하려면 한글 음절 &lt;a href=&quot;#composeJamo&quot;&gt; &lt;code&gt;composeJamo&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#decomposeHangul&quot;&gt; &lt;code&gt;decomposeHangul&lt;/code&gt; &lt;/a&gt; 의 특정 버전을 포함하여 &lt;a href=&quot;#compose&quot;&gt; &lt;code&gt;compose&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#decompose&quot;&gt; &lt;code&gt;decompose&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="64557b59c3e3b422b56194c79018a7a402df5f75" translate="yes" xml:space="preserve">
          <source>Decompress and return any remaining data. The returned data should be appended to that returned by uncompress(). The UnCompress object cannot be used further.</source>
          <target state="translated">나머지 데이터를 압축 해제하고 반환하십시오. 반환 된 데이터는 uncompress ()에 의해 반환 된 데이터에 추가되어야합니다. UnCompress 개체는 더 이상 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="f015adc95346148c234f8fb705aeca257d640460" translate="yes" xml:space="preserve">
          <source>Decompress the contents of a member.</source>
          <target state="translated">구성원의 내용을 압축 해제하십시오.</target>
        </trans-unit>
        <trans-unit id="758d2baadff9e7263131434184a3f463f60af9a5" translate="yes" xml:space="preserve">
          <source>Decompress the contents of archive member de and return the expanded data.</source>
          <target state="translated">아카이브 멤버 de의 컨텐츠를 압축 해제하고 확장 된 데이터를 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="331e56cb06cb518e2402ea3951b07bb690da1ffd" translate="yes" xml:space="preserve">
          <source>Decompress the data in buf and return the decompressed data. The buffers returned from successive calls to this should be concatenated together.</source>
          <target state="translated">buf의 데이터를 압축 해제하고 압축 해제 된 데이터를 리턴하십시오. 연속적인 호출에서 리턴 된 버퍼는 함께 연결되어야합니다.</target>
        </trans-unit>
        <trans-unit id="9ea10b070e9d7365e1dfb76f204e09a139b7b4bf" translate="yes" xml:space="preserve">
          <source>Decompresses the data in srcbuf[].</source>
          <target state="translated">srcbuf []에서 데이터를 압축 해제합니다.</target>
        </trans-unit>
        <trans-unit id="3e9abbc6f4724b8e785725d912f2aaa59750275e" translate="yes" xml:space="preserve">
          <source>Decreases the reference count of the concrete class that implements this interface. When the reference count is &lt;code&gt;0&lt;/code&gt;, the object self-destructs.</source>
          <target state="translated">이 인터페이스를 구현하는 구체적 클래스의 참조 횟수를 줄입니다. 참조 카운트가 &lt;code&gt;0&lt;/code&gt; 이면 객체가 자체 소멸됩니다.</target>
        </trans-unit>
        <trans-unit id="02c806f941459077b10b340cd9632e9a0cb538f5" translate="yes" xml:space="preserve">
          <source>Decrements the internal lock count by one. If this brings the count to zero, the lock is released.</source>
          <target state="translated">내부 잠금 수를 1 씩 줄입니다. 카운트가 0이되면 잠금이 해제됩니다.</target>
        </trans-unit>
        <trans-unit id="ef0d38f738fb21cfe095e1269d745948ad990bfd" translate="yes" xml:space="preserve">
          <source>Deduction from a specialization can provide values for more than one parameter:</source>
          <target state="translated">전문화에서 제외하면 둘 이상의 매개 변수에 대한 값을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e9d287d865171614d8dedf150d2d0836f7b7edd5" translate="yes" xml:space="preserve">
          <source>Deep interface inheritance causes compile error with messages like &quot;Error: function std.typecons.AutoImplement!(Foo).AutoImplement.bar does not override any function&quot;. [&lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=2525&quot;&gt;Bugzilla 2525&lt;/a&gt;]</source>
          <target state="translated">딥 인터페이스 상속은 &quot;오류 : function std.typecons.AutoImplement! (Foo) .AutoImplement.bar는 어떤 함수도 무시하지 않습니다&quot;와 같은 메시지와 함께 컴파일 오류를 발생시킵니다. [ &lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=2525&quot;&gt;버그질라 2525&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="c748de0e8bf8554aeb51f7845528d2e387d7b157" translate="yes" xml:space="preserve">
          <source>Default Initialization</source>
          <target state="translated">기본 초기화</target>
        </trans-unit>
        <trans-unit id="371d87a5f41a115cc6ae98f15bc16de04539f72f" translate="yes" xml:space="preserve">
          <source>Default Initialization of Structs</source>
          <target state="translated">구조체의 기본 초기화</target>
        </trans-unit>
        <trans-unit id="420b1de5ee5bd01f3bccad5941846b453e834c77" translate="yes" xml:space="preserve">
          <source>Default Initialization of Unions</source>
          <target state="translated">연합의 기본 초기화</target>
        </trans-unit>
        <trans-unit id="50c0422b1bd3c0cb85a3b10f878811736afd4f6f" translate="yes" xml:space="preserve">
          <source>Default Random Engines</source>
          <target state="translated">기본 랜덤 엔진</target>
        </trans-unit>
        <trans-unit id="4f3b4cf1b282f5e24851d2fc312835e2ee1126a7" translate="yes" xml:space="preserve">
          <source>Default constructor that initializes a &lt;code&gt;TaskPool&lt;/code&gt; with &lt;code&gt;totalCPUs&lt;/code&gt; - 1 worker threads. The minus 1 is included because the main thread will also be available to do work.</source>
          <target state="translated">초기화 기본 생성자 &lt;code&gt;TaskPool&lt;/code&gt; 을 가진 &lt;code&gt;totalCPUs&lt;/code&gt; 을 - 1 개 작업자 스레드. 마이너스 1은 메인 스레드가 작동하기 때문에 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="27d8f5b12b08679fa1ceeb7aa68b26b65ef2045f" translate="yes" xml:space="preserve">
          <source>Default formatting (same as &quot;d&quot;)</source>
          <target state="translated">기본 형식 ( &quot;d&quot;와 동일)</target>
        </trans-unit>
        <trans-unit id="e96836a37f607443c594efaed093035c05afe38b" translate="yes" xml:space="preserve">
          <source>Default highlighting of all the members of a class, struct, etc.</source>
          <target state="translated">클래스, 구조체 등의 모든 멤버에 대한 기본 강조 표시</target>
        </trans-unit>
        <trans-unit id="98f9ae2cc7e4e80454521f2ab1730089e9d6baa9" translate="yes" xml:space="preserve">
          <source>Default namespace from RFC 4122</source>
          <target state="translated">RFC 4122의 기본 네임 스페이스</target>
        </trans-unit>
        <trans-unit id="2c5cd1f0d1dcc8e95ce7f83f2ec37a797706dca3" translate="yes" xml:space="preserve">
          <source>Default parameters are resolved and semantically checked in the context of the function declaration.</source>
          <target state="translated">기본 매개 변수는 함수 선언의 컨텍스트에서 해석되고 의미 적으로 점검됩니다.</target>
        </trans-unit>
        <trans-unit id="dc75ea9274f6222114e96e9234906962c3ab1c51" translate="yes" xml:space="preserve">
          <source>Default system linkage for the target.</source>
          <target state="translated">대상의 기본 시스템 연결</target>
        </trans-unit>
        <trans-unit id="a76b4f3915cc1ec7629202bfab49b91d3e8811c7" translate="yes" xml:space="preserve">
          <source>Default value to use for architecture. Should be &quot;32&quot; or &quot;64&quot;</source>
          <target state="translated">아키텍처에 사용할 기본값입니다. &quot;32&quot;또는 &quot;64&quot;여야합니다</target>
        </trans-unit>
        <trans-unit id="0471388472434480b398dbbb1b529f53c8403a1a" translate="yes" xml:space="preserve">
          <source>DefaultStatement &lt;strong id=&quot;sdefault&quot;&gt;sdefault&lt;/strong&gt;;</source>
          <target state="translated">DefaultStatement &lt;strong id=&quot;sdefault&quot;&gt;sdefault&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="bc406dd5812a1993fbe6a79d3cd9b04e74387b96" translate="yes" xml:space="preserve">
          <source>Default_Ignorable_Code_Point</source>
          <target state="translated">Default_Ignorable_Code_Point</target>
        </trans-unit>
        <trans-unit id="f04a631e5fb8580ab675839a96ca7cd9782ddc95" translate="yes" xml:space="preserve">
          <source>Defaults to &quot;&quot; but can be assigned to prior to calling &lt;code&gt;getopt&lt;/code&gt;.</source>
          <target state="translated">기본값은 &quot;&quot;이지만 &lt;code&gt;getopt&lt;/code&gt; 를 호출하기 전에 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="df1395a4ccfcda2ee16159ff05ed2cc4232a297b" translate="yes" xml:space="preserve">
          <source>Defaults to &quot;--&quot; but can be assigned to prior to calling &lt;code&gt;getopt&lt;/code&gt;. Assigning an empty string to &lt;code&gt;endOfOptions&lt;/code&gt; effectively disables it.</source>
          <target state="translated">기본값은 &quot;-&quot;이지만 &lt;code&gt;getopt&lt;/code&gt; 를 호출하기 전에 지정할 수 있습니다 . &lt;code&gt;endOfOptions&lt;/code&gt; 에 빈 문자열을 할당하면 효과적으로 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="8aa51945574822bec5dcd1c3efc97549eb710c3f" translate="yes" xml:space="preserve">
          <source>Defaults to '-' but it can be assigned to prior to calling &lt;code&gt;getopt&lt;/code&gt;.</source>
          <target state="translated">기본값은 '-'이지만 &lt;code&gt;getopt&lt;/code&gt; 를 호출하기 전에 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9de2851fac6dd53ccefeb661bb98002fd0c199f4" translate="yes" xml:space="preserve">
          <source>Defaults to '=' but can be assigned to prior to calling &lt;code&gt;getopt&lt;/code&gt;.</source>
          <target state="translated">기본값은 '='이지만 &lt;code&gt;getopt&lt;/code&gt; 를 호출하기 전에 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8503b1ebf1456be871732701f4598afac98d9a38" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;Yes.preserveAttributes&lt;/code&gt; on Windows, and the opposite on all other platforms.</source>
          <target state="translated">Windows에서는 기본값이 &lt;code&gt;Yes.preserveAttributes&lt;/code&gt; 이고 다른 모든 플랫폼에서는 반대입니다.</target>
        </trans-unit>
        <trans-unit id="fd21e76d6af8f49e1eb6914fb6c49390fd8bd8c1" translate="yes" xml:space="preserve">
          <source>Define &lt;code&gt;XorshiftEngine&lt;/code&gt; generators with well-chosen parameters. See each bits examples of &quot;Xorshift RNGs&quot;. &lt;code&gt;Xorshift&lt;/code&gt; is a Xorshift128's alias because 128bits implementation is mostly used.</source>
          <target state="translated">잘 선택된 매개 변수로 &lt;code&gt;XorshiftEngine&lt;/code&gt; 생성기를 정의하십시오 . &quot;Xorshift RNG&quot;의 각 비트 예를 참조하십시오. &lt;code&gt;Xorshift&lt;/code&gt; 는 Xorshift128의 별칭이며 128 비트 구현이 대부분 사용되기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="81847ec7dd3ceb5453d0ee6884a6280e90c956b1" translate="yes" xml:space="preserve">
          <source>Define LinearCongruentialEngine generators with well-chosen parameters. &lt;code&gt;MinstdRand0&lt;/code&gt; implements Park and Miller's &quot;minimal standard&quot; &lt;a href=&quot;http://wikipedia.org/wiki/Park%E2%80%93Miller_random_number_generator&quot;&gt;generator&lt;/a&gt; that uses 16807 for the multiplier. &lt;code&gt;MinstdRand&lt;/code&gt; implements a variant that has slightly better spectral behavior by using the multiplier 48271. Both generators are rather simplistic.</source>
          <target state="translated">잘 선택된 매개 변수로 LinearCongruentialEngine 생성기를 정의하십시오. &lt;code&gt;MinstdRand0&lt;/code&gt; 은 곱셈기에 16807을 사용 하는 Park 및 Miller의 &quot;최소 표준&quot; &lt;a href=&quot;http://wikipedia.org/wiki/Park%E2%80%93Miller_random_number_generator&quot;&gt;생성기&lt;/a&gt; 를 구현합니다. &lt;code&gt;MinstdRand&lt;/code&gt; 는 승수 48271을 사용하여 약간 더 나은 스펙트럼 동작을 갖는 변형을 구현합니다. 두 생성기는 다소 단순합니다.</target>
        </trans-unit>
        <trans-unit id="2a32a694b454b48f0c6093b3ea95bcc7ae1e63ab" translate="yes" xml:space="preserve">
          <source>Define New Collating Sequences</source>
          <target state="translated">새로운 조합 순서 정의</target>
        </trans-unit>
        <trans-unit id="39097f9cdbdc9c13d9f7924e620c0870a6ab1f2d" translate="yes" xml:space="preserve">
          <source>Define base class for synchronization exceptions.</source>
          <target state="translated">동기화 예외의 기본 클래스를 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="1fe6ef7e4374fbc92435a3eb3a1da3f110264323" translate="yes" xml:space="preserve">
          <source>Define when building the standard library</source>
          <target state="translated">표준 라이브러리를 구축 할 때 정의</target>
        </trans-unit>
        <trans-unit id="3531e23462282b88161b0b09c4198f983f8f5d9c" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;Allocator.deallocate&lt;/code&gt; and &lt;code&gt;Allocator.owns&lt;/code&gt; are defined.</source>
          <target state="translated">&lt;code&gt;Allocator.deallocate&lt;/code&gt; 및 &lt;code&gt;Allocator.owns&lt;/code&gt; 가 정의 된 경우 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="a3e2600e60e43fcc7af73e79b544e721703b0e8b" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;ParentAllocator.deallocate&lt;/code&gt; exists and forwards to &lt;code&gt;parent.deallocate(b.ptr[0 .. goodAllocSize(b.length)])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ParentAllocator.deallocate&lt;/code&gt; 가 존재하고 &lt;code&gt;parent.deallocate(b.ptr[0 .. goodAllocSize(b.length)])&lt;/code&gt; 전달 되는지 여부를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="d5839c46fd4f57e4f4534cc94d889acf7302900a" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;ParentAllocator.deallocate&lt;/code&gt; exists, and returns to it all memory held in the free tree.</source>
          <target state="translated">&lt;code&gt;ParentAllocator.deallocate&lt;/code&gt; 가 존재하고 사용 가능한 트리에있는 모든 메모리를 반환하는 경우 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="ae7fc2022dee75f14540e1bb6b89db20bb6af50b" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;ParentAllocator.deallocateAll&lt;/code&gt; exists, and forwards to it. Also nullifies the free tree (it's assumed the parent frees all memory stil managed by the free tree).</source>
          <target state="translated">&lt;code&gt;ParentAllocator.deallocateAll&lt;/code&gt; 이 존재하고 전달하는 경우 정의됩니다 . 또한 사용 가능한 트리를 무효화합니다 (부모가 사용 가능한 트리에서 관리하는 모든 메모리를 사용 가능하게하는 것으로 가정).</target>
        </trans-unit>
        <trans-unit id="924b574b2f51f1f91bae0a753d7a3cd5e721d17d" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;ParentAllocator&lt;/code&gt; defines it. Checks whether the block belongs to this allocator.</source>
          <target state="translated">&lt;code&gt;ParentAllocator&lt;/code&gt; 가 정의한 경우 정의됩니다. 블록이이 할당 자에 속하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="22d483263bd2221c01661d83bf480b3a1978600e" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;perCallFlags&lt;/code&gt; is nonzero.</source>
          <target state="translated">&lt;code&gt;perCallFlags&lt;/code&gt; 가 0이 아닌 경우 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="80fb3bfe81400b11248d1a55abb8916e94447707" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;perCallFlags&lt;/code&gt; is nonzero. Iterates all monitored file/line instances. The order of iteration is not meaningful (items are inserted at the front of a list upon the first call), so preprocessing the statistics after collection might be appropriate.</source>
          <target state="translated">&lt;code&gt;perCallFlags&lt;/code&gt; 가 0이 아닌 경우 정의됩니다 . 모니터링 된 모든 파일 / 라인 인스턴스를 반복합니다. 반복 순서는 의미가 없으므로 (첫 번째 호출시 목록 앞에 항목이 삽입 됨) 수집 후 통계를 사전 처리하는 것이 적절할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="af0b04d11e256e5ba5a86b4d6ccc479ac3bb0733" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;perCallFlags&lt;/code&gt; is nonzero. Outputs (e.g. to a &lt;code&gt;File&lt;/code&gt;) a simple report of the collected per-call statistics.</source>
          <target state="translated">&lt;code&gt;perCallFlags&lt;/code&gt; 가 0이 아닌 경우 정의됩니다 . 수집 된 통화 별 통계에 대한 간단한 보고서 를 출력합니다 (예 : &lt;code&gt;File&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="0e6aad149de6e35db7818ba9e061e221c789d78e" translate="yes" xml:space="preserve">
          <source>Defined in RFC 4122 document</source>
          <target state="translated">RFC 4122 문서에 정의</target>
        </trans-unit>
        <trans-unit id="74bb7ab73b6be283bed5a27e4f9da6abe208f8a4" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;Allocator.deallocateAll&lt;/code&gt; is defined. Affects per instance and per call &lt;code&gt;numDeallocateAll&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Allocator.deallocateAll&lt;/code&gt; 이 정의 된 경우에만 정의됩니다. 인스턴스 및 호출 &lt;code&gt;numDeallocateAll&lt;/code&gt; 에 영향을줍니다 .</target>
        </trans-unit>
        <trans-unit id="880dd85210629b3db5a46cc41b73cc297fc347f0" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;Allocator.expand&lt;/code&gt; is defined. Finds the owner of &lt;code&gt;b&lt;/code&gt; and calls &lt;code&gt;expand&lt;/code&gt; for it. The owner is not brought to the head of the list.</source>
          <target state="translated">&lt;code&gt;Allocator.expand&lt;/code&gt; 가 정의 된 경우에만 정의됩니다. 의 소유자 찾습니다 &lt;code&gt;b&lt;/code&gt; 하고 호출 &lt;code&gt;expand&lt;/code&gt; 그것을 위해. 소유자는 목록의 머리로 가져 오지 않습니다.</target>
        </trans-unit>
        <trans-unit id="744c61edf3dc2f8cca313264c4f118c38c0b2a22" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;Allocator.owns&lt;/code&gt; and &lt;code&gt;Allocator.deallocateAll&lt;/code&gt; are defined.</source>
          <target state="translated">&lt;code&gt;Allocator.owns&lt;/code&gt; 및 &lt;code&gt;Allocator.deallocateAll&lt;/code&gt; 이 정의 된 경우에만 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="1fdfa394d06528a596ae4874c40d528d999bfd2b" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;Allocator.reallocate&lt;/code&gt; is defined. Finds the owner of &lt;code&gt;b&lt;/code&gt; and calls &lt;code&gt;reallocate&lt;/code&gt; for it. If that fails, calls the global &lt;code&gt;reallocate&lt;/code&gt;, which allocates a new block and moves memory.</source>
          <target state="translated">&lt;code&gt;Allocator.reallocate&lt;/code&gt; 가 정의 된 경우에만 정의됩니다. &lt;code&gt;b&lt;/code&gt; 의 소유자를 찾아 &lt;code&gt;reallocate&lt;/code&gt; 을 호출 합니다. 실패하면 전역 &lt;code&gt;reallocate&lt;/code&gt; 호출하여 새 블록을 할당하고 메모리를 이동시킵니다.</target>
        </trans-unit>
        <trans-unit id="ed697f6a88a630666af1c722afd39b1d0f4f4f19" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;Allocator&lt;/code&gt; defines &lt;code&gt;owns&lt;/code&gt;. Finds the owner of &lt;code&gt;b&lt;/code&gt; and forwards the call to it.</source>
          <target state="translated">경우에만 정의 &lt;code&gt;Allocator&lt;/code&gt; 정의가 &lt;code&gt;owns&lt;/code&gt; . &lt;code&gt;b&lt;/code&gt; 의 소유자를 찾아서 호출을 전달합니다.</target>
        </trans-unit>
        <trans-unit id="a0e6bc044e12c4e9611bf3580583040fda29e9b8" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;Allocator&lt;/code&gt; defines &lt;code&gt;owns&lt;/code&gt;. Tries each allocator in turn, in most-recently-used order. If the owner is found, it is moved to the front of the list as a side effect under the assumption it will be used soon.</source>
          <target state="translated">경우에만 정의 &lt;code&gt;Allocator&lt;/code&gt; 정의가 &lt;code&gt;owns&lt;/code&gt; . 가장 최근에 사용한 순서대로 각 할당자를 차례로 시도합니다. 소유자가 발견되면 곧 사용될 것이라는 가정하에 부작용으로 목록의 맨 앞으로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="2e24b737d8be4f0fce227702cdf2d4971d9bd548" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;Options.bytesUsed&lt;/code&gt; is defined. Returns &lt;code&gt;bytesUsed == 0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Options.bytesUsed&lt;/code&gt; 가 정의 된 경우에만 정의됩니다. &lt;code&gt;bytesUsed == 0&lt;/code&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e866186e044949f060cc13ede78f11571f00e878" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;ParentAllocator.alignedAllocate&lt;/code&gt; exists. Expansion occurs in place under the conditions required by &lt;code&gt;expand&lt;/code&gt;. Shrinking occurs in place if &lt;code&gt;goodAllocSize(b.length) == goodAllocSize(s)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ParentAllocator.alignedAllocate&lt;/code&gt; 가 존재하는 경우에만 정의됩니다 . 확장에 필요한 조건 하에서 장소에 발생합니다 &lt;code&gt;expand&lt;/code&gt; . &lt;code&gt;goodAllocSize(b.length) == goodAllocSize(s)&lt;/code&gt; 경우 축소가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="9de3285d7d12656c0f50a8bc0845b0e3663f1845" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;ParentAllocator&lt;/code&gt; defines &lt;code&gt;deallocateAll&lt;/code&gt;. If so, forwards to it and resets the freelist.</source>
          <target state="translated">&lt;code&gt;ParentAllocator&lt;/code&gt; 가 &lt;code&gt;deallocateAll&lt;/code&gt; 을 정의한 경우에만 정의됩니다 . 그렇다면 전달하고 프리리스트를 재설정하십시오.</target>
        </trans-unit>
        <trans-unit id="bb02e98056476e0ccf512cbbc349777443611e1f" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;parent.alignedAllocate&lt;/code&gt; exists and works similarly to &lt;code&gt;allocate&lt;/code&gt; by forwarding to &lt;code&gt;parent.alignedAllocate(goodAllocSize(n), a)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;parent.alignedAllocate&lt;/code&gt; 가 존재하고 &lt;code&gt;parent.alignedAllocate(goodAllocSize(n), a)&lt;/code&gt; 로 전달하여 &lt;code&gt;allocate&lt;/code&gt; 하는 것과 유사하게 작동하는 경우에만 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="3bdcfae19e6266cb37491298481490d18641857e" translate="yes" xml:space="preserve">
          <source>Defined when building the standard runtime</source>
          <target state="translated">표준 런타임을 구축 할 때 정의</target>
        </trans-unit>
        <trans-unit id="8603ace2093f41a5875c31508c40434bf1934d95" translate="yes" xml:space="preserve">
          <source>Defined whether or not &lt;code&gt;Allocator.deallocate&lt;/code&gt; is defined. Affects per instance: &lt;code&gt;numDeallocate&lt;/code&gt;, &lt;code&gt;bytesUsed&lt;/code&gt;, and &lt;code&gt;bytesSlack&lt;/code&gt;. Affects per call: &lt;code&gt;numDeallocate&lt;/code&gt; and &lt;code&gt;bytesContracted&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Allocator.deallocate&lt;/code&gt; 의 정의 여부를 정의합니다 . 인스턴스에 미치는 영향 : &lt;code&gt;numDeallocate&lt;/code&gt; , &lt;code&gt;bytesUsed&lt;/code&gt; 및 &lt;code&gt;bytesSlack&lt;/code&gt; 을 . 호출 당에 미치는 영향 : &lt;code&gt;numDeallocate&lt;/code&gt; 및 &lt;code&gt;bytesContracted&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="a10dcb53bbdef9f4f52f70eb8281de857ea0c04d" translate="yes" xml:space="preserve">
          <source>Defined whether or not &lt;code&gt;Allocator.expand&lt;/code&gt; is defined. Affects per instance: &lt;code&gt;numExpand&lt;/code&gt;, &lt;code&gt;numExpandOK&lt;/code&gt;, &lt;code&gt;bytesExpanded&lt;/code&gt;, &lt;code&gt;bytesSlack&lt;/code&gt;, &lt;code&gt;bytesAllocated&lt;/code&gt;, and &lt;code&gt;bytesUsed&lt;/code&gt;. Affects per call: &lt;code&gt;numExpand&lt;/code&gt;, &lt;code&gt;numExpandOK&lt;/code&gt;, &lt;code&gt;bytesExpanded&lt;/code&gt;, and &lt;code&gt;bytesAllocated&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Allocator.expand&lt;/code&gt; 의 정의 여부를 정의합니다 . 인스턴스 당 영향 : &lt;code&gt;numExpand&lt;/code&gt; , &lt;code&gt;numExpandOK&lt;/code&gt; , &lt;code&gt;bytesExpanded&lt;/code&gt; , &lt;code&gt;bytesSlack&lt;/code&gt; , &lt;code&gt;bytesAllocated&lt;/code&gt; 및 &lt;code&gt;bytesUsed&lt;/code&gt; . 호출 당 영향 : &lt;code&gt;numExpand&lt;/code&gt; , &lt;code&gt;numExpandOK&lt;/code&gt; , &lt;code&gt;bytesExpanded&lt;/code&gt; 및 &lt;code&gt;bytesAllocated&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b422af85c74e4035f60d8efe5ab2781d63622be3" translate="yes" xml:space="preserve">
          <source>Defined whether or not &lt;code&gt;Allocator.reallocate&lt;/code&gt; is defined. Affects per instance: &lt;code&gt;numReallocate&lt;/code&gt;, &lt;code&gt;numReallocateOK&lt;/code&gt;, &lt;code&gt; numReallocateInPlace&lt;/code&gt;, &lt;code&gt;bytesNotMoved&lt;/code&gt;, &lt;code&gt;bytesAllocated&lt;/code&gt;, &lt;code&gt; bytesSlack&lt;/code&gt;, &lt;code&gt;bytesExpanded&lt;/code&gt;, and &lt;code&gt;bytesContracted&lt;/code&gt;. Affects per call: &lt;code&gt;numReallocate&lt;/code&gt;, &lt;code&gt;numReallocateOK&lt;/code&gt;, &lt;code&gt;numReallocateInPlace&lt;/code&gt;, &lt;code&gt;bytesNotMoved&lt;/code&gt;, &lt;code&gt;bytesExpanded&lt;/code&gt;, &lt;code&gt;bytesContracted&lt;/code&gt;, and &lt;code&gt;bytesMoved&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Allocator.reallocate&lt;/code&gt; 의 정의 여부를 정의합니다 . 인스턴스 당 영향 : &lt;code&gt;numReallocate&lt;/code&gt; , &lt;code&gt;numReallocateOK&lt;/code&gt; , &lt;code&gt; numReallocateInPlace&lt;/code&gt; , &lt;code&gt;bytesNotMoved&lt;/code&gt; , &lt;code&gt;bytesAllocated&lt;/code&gt; , &lt;code&gt; bytesSlack&lt;/code&gt; , &lt;code&gt;bytesExpanded&lt;/code&gt; 및 &lt;code&gt;bytesContracted&lt;/code&gt; . 호출 당에 미치는 영향 : &lt;code&gt;numReallocate&lt;/code&gt; , &lt;code&gt;numReallocateOK&lt;/code&gt; , &lt;code&gt;numReallocateInPlace&lt;/code&gt; , &lt;code&gt;bytesNotMoved&lt;/code&gt; , &lt;code&gt;bytesExpanded&lt;/code&gt; , &lt;code&gt;bytesContracted&lt;/code&gt; 및 &lt;code&gt;bytesMoved&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e01f0090ee0730f66f1a15b18bea750a3d6fc2b4" translate="yes" xml:space="preserve">
          <source>Defines a Latin2-encoded character.</source>
          <target state="translated">라틴어 인코딩 된 문자를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="5e53ecfaa755cb1d4f19e088a8c9f00a6dbfc490" translate="yes" xml:space="preserve">
          <source>Defines a Windows1250-encoded character.</source>
          <target state="translated">Windows1250으로 인코딩 된 문자를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="9f1903090723311586df4cd37fbdf5f26e67079a" translate="yes" xml:space="preserve">
          <source>Defines a Windows1251-encoded character.</source>
          <target state="translated">Windows1251 인코딩 문자를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="cccb5b7d80539ad53bf55ca34e9f94b1953e89a5" translate="yes" xml:space="preserve">
          <source>Defines a Windows1252-encoded character.</source>
          <target state="translated">Windows1252 인코딩 문자를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="56254a36f29bce74ac63e1c814d120ccbdcc4a03" translate="yes" xml:space="preserve">
          <source>Defines a reference-counted object containing a &lt;code&gt;T&lt;/code&gt; value as payload.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 값을 포함하는 참조 횟수 개체를 페이로드로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="ba5e2fe31df68893adfb9e39176c913b0ab90b13" translate="yes" xml:space="preserve">
          <source>Defines a simple, self-documenting yes/no flag. This makes it easy for APIs to define functions accepting flags without resorting to &lt;code&gt;bool&lt;/code&gt;, which is opaque in calls, and without needing to define an enumerated type separately. Using &lt;code&gt;Flag!&quot;Name&quot;&lt;/code&gt; instead of &lt;code&gt;bool&lt;/code&gt; makes the flag's meaning visible in calls. Each yes/no flag has its own type, which makes confusions and mix-ups impossible.</source>
          <target state="translated">간단한 자체 문서화 예 / 아니오 플래그를 정의합니다. 이를 통해 API 는 &lt;code&gt;bool&lt;/code&gt; 에 의존하지 않고 호출에서 불투명하고 열거 형을 별도로 정의하지 않고도 플래그를 수락하는 함수를 쉽게 정의 할 수 있습니다 . 사용 &lt;code&gt;Flag!&quot;Name&quot;&lt;/code&gt; 대신 &lt;code&gt;bool&lt;/code&gt; 플래그의 통화에서 볼 의미한다. 각 예 / 아니오 플래그에는 고유 한 유형이 있으므로 혼동 및 혼합이 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="d037c0e93cb77eea8d259e298e9c276dd536788f" translate="yes" xml:space="preserve">
          <source>Defines a total order on all floating-point numbers.</source>
          <target state="translated">모든 부동 소수점 숫자의 총 순서를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="1b2fe2f27a3c2be6c4b5a0300512ceb77431cca8" translate="yes" xml:space="preserve">
          <source>Defines a value paired with a distinctive &quot;null&quot; state that denotes the absence of a value. If default constructed, a &lt;code&gt;Nullable!T&lt;/code&gt; object starts in the null state. Assigning it renders it non-null. Calling &lt;code&gt;nullify&lt;/code&gt; can nullify it again.</source>
          <target state="translated">값이 없음을 나타내는 고유 한 &quot;널&quot;상태와 쌍을 이루는 값을 정의합니다. 기본적으로 구성된 경우 &lt;code&gt;Nullable!T&lt;/code&gt; 객체는 null 상태에서 시작됩니다. 지정하면 널이 아닌 것으로 렌더링됩니다. &lt;code&gt;nullify&lt;/code&gt; 를 호출 하면 다시 nullize 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f49f1773a53446e251ede71ac0716adcb46d913" translate="yes" xml:space="preserve">
          <source>Defines an Latin1-encoded character.</source>
          <target state="translated">라틴어로 인코딩 된 문자를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="e57a29ea6d093696ef6c6f7d8afb730e34136a6d" translate="yes" xml:space="preserve">
          <source>Defines an Latin1-encoded string (as an array of &lt;code&gt;immutable(Latin1Char)&lt;/code&gt;).</source>
          <target state="translated">라틴어로 인코딩 된 문자열을 정의합니다 ( &lt;code&gt;immutable(Latin1Char)&lt;/code&gt; 의 배열로 ).</target>
        </trans-unit>
        <trans-unit id="011886a5161af4c4e37e5385fd27679cc8b830bd" translate="yes" xml:space="preserve">
          <source>Defines an Latin2-encoded string (as an array of &lt;code&gt; immutable(Latin2Char)&lt;/code&gt;).</source>
          <target state="translated">라틴어 인코딩 된 문자열을 정의합니다 ( &lt;code&gt; immutable(Latin2Char)&lt;/code&gt; 의 배열로 ).</target>
        </trans-unit>
        <trans-unit id="8d5cf26107dde7d6c09fcfb638d212a7bf2e12ba" translate="yes" xml:space="preserve">
          <source>Defines an Windows1250-encoded string (as an array of &lt;code&gt; immutable(Windows1250Char)&lt;/code&gt;).</source>
          <target state="translated">Windows1250으로 인코딩 된 문자열을 정의합니다 ( &lt;code&gt; immutable(Windows1250Char)&lt;/code&gt; 의 배열 (Windows1250Char) ).</target>
        </trans-unit>
        <trans-unit id="e8732904f5c920a3848f6eb11eb4689860b73df6" translate="yes" xml:space="preserve">
          <source>Defines an Windows1251-encoded string (as an array of &lt;code&gt; immutable(Windows1251Char)&lt;/code&gt;).</source>
          <target state="translated">Windows1251로 인코딩 된 문자열을 정의합니다 ( &lt;code&gt; immutable(Windows1251Char)&lt;/code&gt; 의 배열 (Windows1251Char) ).</target>
        </trans-unit>
        <trans-unit id="e4276c26be648ff75c1e818b48f26e071b93fc98" translate="yes" xml:space="preserve">
          <source>Defines an Windows1252-encoded string (as an array of &lt;code&gt; immutable(Windows1252Char)&lt;/code&gt;).</source>
          <target state="translated">Windows1252로 인코딩 된 문자열을 정의합니다 ( &lt;code&gt; immutable(Windows1252Char)&lt;/code&gt; 의 배열 (Windows1252Char) ).</target>
        </trans-unit>
        <trans-unit id="97ccdd739d5a34ddd79a07f475bf10a7ea2872af" translate="yes" xml:space="preserve">
          <source>Defines an early termination condition. Receives the current upper and lower bounds on the root. The delegate must return &lt;code&gt;true&lt;/code&gt; when these bounds are acceptable. If this function always returns &lt;code&gt;false&lt;/code&gt;, full machine precision will be achieved.</source>
          <target state="translated">조기 종료 조건을 정의합니다. 루트의 현재 상한 및 하한을받습니다. 이러한 범위가 허용되면 대리자는 &lt;code&gt;true&lt;/code&gt; 를 반환해야합니다 . 이 함수가 항상 &lt;code&gt;false&lt;/code&gt; 를 반환 하면 전체 기계 정밀도가 달성됩니다.</target>
        </trans-unit>
        <trans-unit id="5c3a4051688057309dd223cc23bc9904e0d4075a" translate="yes" xml:space="preserve">
          <source>Defines binary operations with overflow checking for any two integral types. The result type obeys the language rules (even when they may be counterintuitive), and &lt;code&gt;overflow&lt;/code&gt; is set if an overflow occurs (including inadvertent change of signedness, e.g. &lt;code&gt;-1&lt;/code&gt; is converted to &lt;code&gt;uint&lt;/code&gt;). Conceptually the behavior is:</source>
          <target state="translated">두 가지 정수 유형에 대한 오버 플로우 검사를 사용하여 이진 연산을 정의합니다. 결과 유형은 언어 규칙을 따르며 (반 직관적 일 수 있음에도 불구하고) &lt;code&gt;overflow&lt;/code&gt; 가 발생하면 오버플로 가 설정됩니다 (예 : &lt;code&gt;-1&lt;/code&gt; 이 &lt;code&gt;uint&lt;/code&gt; 로 변환 된 실수로 부호가 변경됨 ). 개념적으로 동작은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c6275d2a02318e95dbebc22c44c93c7e2829c06d" translate="yes" xml:space="preserve">
          <source>Defines binary operators &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;^^&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; for the case when a built-in numeric or Boolean type is on the left-hand side, and a &lt;code&gt;Checked&lt;/code&gt; instance is on the right-hand side.</source>
          <target state="translated">이진 연산자 &lt;code&gt;+&lt;/code&gt; , &lt;code&gt;-&lt;/code&gt; , &lt;code&gt;*&lt;/code&gt; , &lt;code&gt;/&lt;/code&gt; , &lt;code&gt;%&lt;/code&gt; , &lt;code&gt;^^&lt;/code&gt; , &lt;code&gt;&amp;amp;&lt;/code&gt; , &lt;code&gt;|&lt;/code&gt; 내장 숫자 또는 부울 유형이 왼쪽에 있고 &lt;code&gt;Checked&lt;/code&gt; 인스턴스가 오른쪽 에있는 경우 , &lt;code&gt;^&lt;/code&gt; , &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; , &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="deff15ac1ee86ba403037d1ba526c39f22f79b38" translate="yes" xml:space="preserve">
          <source>Defines binary operators &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;^^&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;. If &lt;code&gt;Hook&lt;/code&gt; defines &lt;code&gt;hookOpBinary&lt;/code&gt;, &lt;code&gt;opBinary&lt;/code&gt; forwards to &lt;code&gt; Checked!(typeof(hook.hookOpBinary!op(get, rhs)), Hook)(hook.hookOpBinary!op(get, rhs))&lt;/code&gt;.</source>
          <target state="translated">이진 연산자 &lt;code&gt;+&lt;/code&gt; , &lt;code&gt;-&lt;/code&gt; , &lt;code&gt;*&lt;/code&gt; , &lt;code&gt;/&lt;/code&gt; , &lt;code&gt;%&lt;/code&gt; , &lt;code&gt;^^&lt;/code&gt; , &lt;code&gt;&amp;amp;&lt;/code&gt; , &lt;code&gt;|&lt;/code&gt; , &lt;code&gt;^&lt;/code&gt; , &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; , &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; . 경우 &lt;code&gt;Hook&lt;/code&gt; 정의 &lt;code&gt;hookOpBinary&lt;/code&gt; , &lt;code&gt;opBinary&lt;/code&gt; 을 에 전달 &lt;code&gt; Checked!(typeof(hook.hookOpBinary!op(get, rhs)), Hook)(hook.hookOpBinary!op(get, rhs))&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="82d51c5b573b12f3ad98f02a60e2594b70eb07ed" translate="yes" xml:space="preserve">
          <source>Defines built-in exception types and low-level language hooks required by the compiler.</source>
          <target state="translated">컴파일러에 필요한 내장 예외 유형 및 저수준 언어 후크를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="4e91c153395398611d9ad588b394bf5e23ccda89" translate="yes" xml:space="preserve">
          <source>Defines hooks for binary operators &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;^^&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; for cases where a &lt;code&gt;Checked&lt;/code&gt; object is the left-hand side operand. If &lt;code&gt;lhs == WithNaN.defaultValue!Lhs&lt;/code&gt;, returns &lt;code&gt;WithNaN.defaultValue!(typeof(lhs + rhs))&lt;/code&gt; without evaluating the operand. Otherwise, evaluates the operand. If evaluation does not overflow, returns the result. Otherwise, returns &lt;code&gt;WithNaN.defaultValue!(typeof(lhs + rhs))&lt;/code&gt;.</source>
          <target state="translated">이진 연산자 &lt;code&gt;+&lt;/code&gt; , &lt;code&gt;-&lt;/code&gt; , &lt;code&gt;*&lt;/code&gt; , &lt;code&gt;/&lt;/code&gt; , &lt;code&gt;%&lt;/code&gt; , &lt;code&gt;^^&lt;/code&gt; , &lt;code&gt;&amp;amp;&lt;/code&gt; , &lt;code&gt;|&lt;/code&gt; &lt;code&gt;Checked&lt;/code&gt; 객체가 왼쪽 피연산자 인 경우 , &lt;code&gt;^&lt;/code&gt; , &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; , &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; . 경우 &lt;code&gt;lhs == WithNaN.defaultValue!Lhs&lt;/code&gt; , 반환 &lt;code&gt;WithNaN.defaultValue!(typeof(lhs + rhs))&lt;/code&gt; 피연산자를 평가하지 않고. 그렇지 않으면 피연산자를 평가합니다. 평가가 오버플로되지 않으면 결과를 반환합니다. 그렇지 않으면 &lt;code&gt;WithNaN.defaultValue!(typeof(lhs + rhs))&lt;/code&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="b4943eeb1bdb96455051418c789cfdb6862bc56c" translate="yes" xml:space="preserve">
          <source>Defines hooks for binary operators &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;^^&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; for cases where a &lt;code&gt;Checked&lt;/code&gt; object is the right-hand side operand. If &lt;code&gt;rhs == WithNaN.defaultValue!Rhs&lt;/code&gt;, returns &lt;code&gt;WithNaN.defaultValue!(typeof(lhs + rhs))&lt;/code&gt; without evaluating the operand. Otherwise, evaluates the operand. If evaluation does not overflow, returns the result. Otherwise, returns &lt;code&gt;WithNaN.defaultValue!(typeof(lhs + rhs))&lt;/code&gt;.</source>
          <target state="translated">이진 연산자 &lt;code&gt;+&lt;/code&gt; , &lt;code&gt;-&lt;/code&gt; , &lt;code&gt;*&lt;/code&gt; , &lt;code&gt;/&lt;/code&gt; , &lt;code&gt;%&lt;/code&gt; , &lt;code&gt;^^&lt;/code&gt; , &lt;code&gt;&amp;amp;&lt;/code&gt; , &lt;code&gt;|&lt;/code&gt; &lt;code&gt;Checked&lt;/code&gt; 객체가 오른쪽 피연산자 인 경우 , &lt;code&gt;^&lt;/code&gt; , &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; , &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; . 경우 &lt;code&gt;rhs == WithNaN.defaultValue!Rhs&lt;/code&gt; , 반환 &lt;code&gt;WithNaN.defaultValue!(typeof(lhs + rhs))&lt;/code&gt; 피연산자를 평가하지 않고. 그렇지 않으면 피연산자를 평가합니다. 평가가 오버플로되지 않으면 결과를 반환합니다. 그렇지 않으면 &lt;code&gt;WithNaN.defaultValue!(typeof(lhs + rhs))&lt;/code&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="344e4af67915b1da0a4f7b2eb4baa46168d0a009" translate="yes" xml:space="preserve">
          <source>Defines hooks for binary operators &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, &lt;code&gt;/=&lt;/code&gt;, &lt;code&gt;%=&lt;/code&gt;, &lt;code&gt;^^=&lt;/code&gt;, &lt;code&gt;&amp;amp;=&lt;/code&gt;, &lt;code&gt;|=&lt;/code&gt;, &lt;code&gt;^=&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;=&lt;/code&gt; for cases where a &lt;code&gt;Checked&lt;/code&gt; object is the left-hand side operand. If &lt;code&gt;lhs == WithNaN.defaultValue!Lhs&lt;/code&gt;, no action is carried. Otherwise, evaluates the operand. If evaluation does not overflow and fits in &lt;code&gt;Lhs&lt;/code&gt; without loss of information or change of sign, sets &lt;code&gt;lhs&lt;/code&gt; to the result. Otherwise, sets &lt;code&gt;lhs&lt;/code&gt; to &lt;code&gt;WithNaN.defaultValue!Lhs&lt;/code&gt;.</source>
          <target state="translated">이진 연산자 &lt;code&gt;+=&lt;/code&gt; , &lt;code&gt;-=&lt;/code&gt; , &lt;code&gt;*=&lt;/code&gt; , &lt;code&gt;/=&lt;/code&gt; , &lt;code&gt;%=&lt;/code&gt; , &lt;code&gt;^^=&lt;/code&gt; , &lt;code&gt;&amp;amp;=&lt;/code&gt; , &lt;code&gt;|=&lt;/code&gt; , &lt;code&gt;^=&lt;/code&gt; , &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt; , &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 및 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;=&lt;/code&gt; 에 대한 후크를 정의합니다 . &lt;code&gt;Checked&lt;/code&gt; 개체는 왼쪽 피연산자입니다. 경우 &lt;code&gt;lhs == WithNaN.defaultValue!Lhs&lt;/code&gt; , 조치가 수행되지 않습니다. 그렇지 않으면 피연산자를 평가합니다. 정보 손실이나 부호 변경없이 평가가 오버플로되지 않고 &lt;code&gt;Lhs&lt;/code&gt; 에 적합 하면 &lt;code&gt;lhs&lt;/code&gt; 를 결과로 설정합니다 . 그렇지 않으면 &lt;code&gt;lhs&lt;/code&gt; 를 &lt;code&gt;WithNaN.defaultValue!Lhs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1765c6ae1549ba0f78d30a2ebbb0c0bf7b13cc1d" translate="yes" xml:space="preserve">
          <source>Defines hooks for unary operators &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;, &lt;code&gt;++&lt;/code&gt;, and &lt;code&gt;--&lt;/code&gt;.</source>
          <target state="translated">단항 연산자 &lt;code&gt;-&lt;/code&gt; , &lt;code&gt;~&lt;/code&gt; , &lt;code&gt;++&lt;/code&gt; 및 &lt;code&gt;--&lt;/code&gt; 대한 후크를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="1062f11ecac31d0859fcc7cf5ec29909f863a7eb" translate="yes" xml:space="preserve">
          <source>Defines operators &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, &lt;code&gt;/=&lt;/code&gt;, &lt;code&gt;%=&lt;/code&gt;, &lt;code&gt;^^=&lt;/code&gt;, &lt;code&gt;&amp;amp;=&lt;/code&gt;, &lt;code&gt;|=&lt;/code&gt;, &lt;code&gt;^=&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;=&lt;/code&gt;.</source>
          <target state="translated">연산자 &lt;code&gt;+=&lt;/code&gt; , &lt;code&gt;-=&lt;/code&gt; , &lt;code&gt;*=&lt;/code&gt; , &lt;code&gt;/=&lt;/code&gt; , &lt;code&gt;%=&lt;/code&gt; , &lt;code&gt;^^=&lt;/code&gt; , &lt;code&gt;&amp;amp;=&lt;/code&gt; , &lt;code&gt;|=&lt;/code&gt; , &lt;code&gt;^=&lt;/code&gt; , &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt; , &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 및 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;=&lt;/code&gt; 을 정의 합니다.</target>
        </trans-unit>
        <trans-unit id="a84f96c56e07c3c0d4be57b930a8414c37127be8" translate="yes" xml:space="preserve">
          <source>Defines the array's primary range, which is a random-access range.</source>
          <target state="translated">랜덤 액세스 범위 인 어레이의 기본 범위를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="b9547918d0ec754aaa9e5611e63002c034456218" translate="yes" xml:space="preserve">
          <source>Defines the array's primary range.</source>
          <target state="translated">배열의 기본 범위를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="25307811d2b650458426086b1231b34b76190751" translate="yes" xml:space="preserve">
          <source>Defines the constants A=0, B=1, C=2, all of type &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">상수 A = 0, B = 1, C = 2 (모두 &lt;code&gt;int&lt;/code&gt; 유형)를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="5960422815ff02efca0bb0b0bc511d329a4df6b9" translate="yes" xml:space="preserve">
          <source>Defines the container's primary range, which embodies a bidirectional range.</source>
          <target state="translated">컨테이너의 기본 범위를 정의하며 양방향 범위를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="cfb64e179215d70a5466203268165ded0aa67b71" translate="yes" xml:space="preserve">
          <source>Defines the container's primary range, which embodies a forward range.</source>
          <target state="translated">컨테이너의 기본 범위를 정의합니다.이 범위는 전달 범위를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="7704b43cc8447527f7119f9c397053172e452d7c" translate="yes" xml:space="preserve">
          <source>Defines the fastest type to use when storing temporaries of a calculation intended to ultimately yield a result of type &lt;code&gt;F&lt;/code&gt; (where &lt;code&gt;F&lt;/code&gt; must be one of &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, or &lt;code&gt;real&lt;/code&gt;). When doing a multi-step computation, you may want to store intermediate results as &lt;code&gt;FPTemporary!F&lt;/code&gt;.</source>
          <target state="translated">궁극적으로 &lt;code&gt;F&lt;/code&gt; 유형의 결과를 산출하기 위해 계산의 임시를 저장할 때 사용할 가장 빠른 유형을 정의합니다 (여기서 &lt;code&gt;F&lt;/code&gt; 는 &lt;code&gt;float&lt;/code&gt; , &lt;code&gt;double&lt;/code&gt; 또는 &lt;code&gt;real&lt;/code&gt; 중 하나 여야 함 ). 다단계 계산을 수행 할 때 중간 결과를 &lt;code&gt;FPTemporary!F&lt;/code&gt; 로 저장할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7510c989e941b6308941ea24aee5fb7c86db407f" translate="yes" xml:space="preserve">
          <source>Defines the minimum and maximum. These values are hookable by defining &lt;code&gt;Hook.min&lt;/code&gt; and/or &lt;code&gt;Hook.max&lt;/code&gt;.</source>
          <target state="translated">최소 및 최대를 정의합니다. 이러한 값은 Hook.min 및 / 또는 &lt;code&gt;Hook.max&lt;/code&gt; 를 정의 &lt;code&gt;Hook.min&lt;/code&gt; 후크 가능 합니다.</target>
        </trans-unit>
        <trans-unit id="de7aa10564ec957fefcba6baa79ce725c7abf349" translate="yes" xml:space="preserve">
          <source>Defines the policy used by this mutex. Currently, two policies are defined.</source>
          <target state="translated">이 뮤텍스가 사용하는 정책을 정의합니다. 현재 두 가지 정책이 정의되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="b305949e5df45bb169d88a908bbe6d1143c90bf8" translate="yes" xml:space="preserve">
          <source>Defines the swapping strategy for algorithms that need to swap elements in a range (such as partition and sort). The strategy concerns the swapping of elements that are not the core concern of the algorithm. For example, consider an algorithm that sorts &lt;code&gt;[ &quot;abc&quot;, &quot;b&quot;, &quot;aBc&quot; ]&lt;/code&gt; according to &lt;code&gt;toUpper(a) &amp;lt; toUpper(b)&lt;/code&gt;. That algorithm might choose to swap the two equivalent strings &lt;code&gt;&quot;abc&quot;&lt;/code&gt; and &lt;code&gt;&quot;aBc&quot;&lt;/code&gt;. That does not affect the sorting since both &lt;code&gt;[&quot;abc&quot;, &quot;aBc&quot;, &quot;b&quot; ]&lt;/code&gt; and &lt;code&gt;[ &quot;aBc&quot;, &quot;abc&quot;, &quot;b&quot; ]&lt;/code&gt; are valid outcomes.</source>
          <target state="translated">범위의 요소 (예 : 파티션 및 정렬)를 교체해야하는 알고리즘의 교체 전략을 정의합니다. 이 전략은 알고리즘의 핵심 관심사가 아닌 요소의 교환과 관련이 있습니다. 예를 들어 &lt;code&gt;toUpper(a) &amp;lt; toUpper(b)&lt;/code&gt; 에 따라 &lt;code&gt;[ &quot;abc&quot;, &quot;b&quot;, &quot;aBc&quot; ]&lt;/code&gt; 를 정렬하는 알고리즘을 고려하십시오 . 해당 알고리즘은 두 개의 동등한 문자열 &lt;code&gt;&quot;abc&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;aBc&quot;&lt;/code&gt; 를 교체하도록 선택할 수 있습니다 . &lt;code&gt;[&quot;abc&quot;, &quot;aBc&quot;, &quot;b&quot; ]&lt;/code&gt; 및 &lt;code&gt;[ &quot;aBc&quot;, &quot;abc&quot;, &quot;b&quot; ]&lt;/code&gt; 모두 유효한 결과 이므로 정렬에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4ffb8042426740aa5362d442a645d2b525c7e4eb" translate="yes" xml:space="preserve">
          <source>Defines unary operators &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;, &lt;code&gt;++&lt;/code&gt;, and &lt;code&gt;--&lt;/code&gt;. Unary &lt;code&gt;+&lt;/code&gt; is not overridable and always has built-in behavior (returns &lt;code&gt;this&lt;/code&gt;). For the others, if &lt;code&gt;Hook&lt;/code&gt; defines &lt;code&gt;hookOpUnary&lt;/code&gt;, &lt;code&gt;opUnary&lt;/code&gt; forwards to &lt;code&gt; Checked!(typeof(hook.hookOpUnary!op(get)), Hook)(hook.hookOpUnary!op(get))&lt;/code&gt;.</source>
          <target state="translated">단항 연산자 &lt;code&gt;+&lt;/code&gt; , &lt;code&gt;-&lt;/code&gt; , &lt;code&gt;~&lt;/code&gt; , &lt;code&gt;++&lt;/code&gt; 및 &lt;code&gt;--&lt;/code&gt; 정의합니다 . 단항 &lt;code&gt;+&lt;/code&gt; 는 재정의 할 수 없으며 항상 기본 제공 동작 &lt;code&gt;this&lt;/code&gt; 있습니다 (이 값을 반환 함 ). 다른 경우, &lt;code&gt;Hook&lt;/code&gt; 가 &lt;code&gt;hookOpUnary&lt;/code&gt; 를 정의 하면 &lt;code&gt;opUnary&lt;/code&gt; 는 &lt;code&gt; Checked!(typeof(hook.hookOpUnary!op(get)), Hook)(hook.hookOpUnary!op(get))&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="c91bdc265815b43c5de3c96f45a415a58fc03b3a" translate="yes" xml:space="preserve">
          <source>Defines various character sets.</source>
          <target state="translated">다양한 문자 집합을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="91c4c727f1758e45e932ce0db96676cf294ad1a7" translate="yes" xml:space="preserve">
          <source>Defining a Class</source>
          <target state="translated">클래스 정의</target>
        </trans-unit>
        <trans-unit id="253771ce82d51dcb870328ec077ebadd1937c2b0" translate="yes" xml:space="preserve">
          <source>Defining an Objective-C class is exactly the same as declaring an external class but it should not be declared as &lt;code&gt;extern&lt;/code&gt;.</source>
          <target state="translated">Objective-C 클래스를 정의하는 것은 외부 클래스를 선언하는 것과 정확히 동일하지만 &lt;code&gt;extern&lt;/code&gt; 으로 선언해서는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="49228588f4c386e959561b07cb41a3da0cc8a81a" translate="yes" xml:space="preserve">
          <source>Definitions and Terms</source>
          <target state="translated">정의와 용어</target>
        </trans-unit>
        <trans-unit id="ebbaa67091704824d3f48a282a09651d409aa6bd" translate="yes" xml:space="preserve">
          <source>Definitions from *.ddoc files specified on the command line.</source>
          <target state="translated">명령 행에 지정된 * .ddoc 파일의 정의</target>
        </trans-unit>
        <trans-unit id="a576cd4219d3b8794f54a95b3ea7cef6eaff9c96" translate="yes" xml:space="preserve">
          <source>Definitions from any Macros: sections.</source>
          <target state="translated">모든 매크로에서 정의 : 섹션.</target>
        </trans-unit>
        <trans-unit id="56ddc5afa8fef3fcf012921b1f9dae5145cf3f46" translate="yes" xml:space="preserve">
          <source>Definitions from file specified by &lt;a href=&quot;https://dlang.org/dmd-windows.html&quot;&gt;sc.ini&lt;/a&gt;'s or &lt;a href=&quot;https://dlang.org/dmd-linux.html#dmd_conf&quot;&gt;dmd.conf&lt;/a&gt; DDOCFILE setting.</source>
          <target state="translated">&lt;a href=&quot;https://dlang.org/dmd-windows.html&quot;&gt;sc.ini&lt;/a&gt; 또는 &lt;a href=&quot;https://dlang.org/dmd-linux.html#dmd_conf&quot;&gt;dmd.conf&lt;/a&gt; DDOCFILE 설정으로 지정된 파일의 정의</target>
        </trans-unit>
        <trans-unit id="5248d2cbc097c85b5bf07bd79ad21d3dc04f00b6" translate="yes" xml:space="preserve">
          <source>Definitions of common Byte Order Marks. The elements of the &lt;code&gt;enum&lt;/code&gt; can used as indices into &lt;code&gt;bomTable&lt;/code&gt; to get matching &lt;code&gt;BOMSeq&lt;/code&gt;.</source>
          <target state="translated">일반적인 바이트 순서 마크의 정의. &lt;code&gt;enum&lt;/code&gt; 의 요소는 &lt;code&gt;bomTable&lt;/code&gt; 의 색인으로 사용하여 일치하는 &lt;code&gt;BOMSeq&lt;/code&gt; 를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7897876db0bd35868da0c36a32fa7a500fda668a" translate="yes" xml:space="preserve">
          <source>Definitions of special attributes recognized by the compiler.</source>
          <target state="translated">컴파일러가 인식하는 특수 속성의 정의.</target>
        </trans-unit>
        <trans-unit id="b21b82b54b0a65d096a65a8b2d7349eacef2dd27" translate="yes" xml:space="preserve">
          <source>Deflate algorithm. Use zlib library to compress</source>
          <target state="translated">알고리즘을 수축시킵니다. zlib 라이브러리를 사용하여 압축</target>
        </trans-unit>
        <trans-unit id="a05b529ef757005d2ca3fc1444fc2e68093e8860" translate="yes" xml:space="preserve">
          <source>Deflate algorithm. Use zlib library to compress.</source>
          <target state="translated">Deflate 알고리즘. 압축하려면 zlib 라이브러리를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="d3b60fd736fbc73cf4f2f050a5951f01d10ff552" translate="yes" xml:space="preserve">
          <source>Deinitialize the memory allocator</source>
          <target state="translated">메모리 할당 기 초기화 해제</target>
        </trans-unit>
        <trans-unit id="718411bfbf8f7d188783f4bac4960c2189d9cac7" translate="yes" xml:space="preserve">
          <source>Deinitializes the global state of the compiler.</source>
          <target state="translated">컴파일러의 전역 상태를 초기화 해제합니다.</target>
        </trans-unit>
        <trans-unit id="065cfc5102f580580f89796dcd1da1ae87b21082" translate="yes" xml:space="preserve">
          <source>Deinitializes the global variables of the DMD compiler.</source>
          <target state="translated">DMD 컴파일러의 전역 변수를 초기화 해제합니다.</target>
        </trans-unit>
        <trans-unit id="35ad6c0b40711e9f140e5814aaeef4e704df85cf" translate="yes" xml:space="preserve">
          <source>Delegate Layout</source>
          <target state="translated">델리게이트 레이아웃</target>
        </trans-unit>
        <trans-unit id="d47fb2fb1178c716e771f8849c7c3bc1aa8bb49f" translate="yes" xml:space="preserve">
          <source>Delegate constructor calls cannot appear after labels.</source>
          <target state="translated">레이블 뒤에 위임 생성자 호출을 표시 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="64b5c80659df5d38b23f9b3191515d8daefe2e21" translate="yes" xml:space="preserve">
          <source>Delegate to call afterwards</source>
          <target state="translated">나중에 전화를 위임</target>
        </trans-unit>
        <trans-unit id="7dcccba4f8856a9df41efcf1d5ea4f2cfd327cec" translate="yes" xml:space="preserve">
          <source>Delegates</source>
          <target state="translated">Delegates</target>
        </trans-unit>
        <trans-unit id="3cf9845d1e82b5c764efd1c97377bd5fd9ba42fb" translate="yes" xml:space="preserve">
          <source>Delegates are</source>
          <target state="translated">대리인은</target>
        </trans-unit>
        <trans-unit id="16abb00eb4427b3b72f26ec632c009b0430dcf6f" translate="yes" xml:space="preserve">
          <source>Delegates are an aggregate of two pieces of data: an object reference and a pointer to a non-static member function, or a pointer to a closure and a pointer to a nested function. The object reference forms the &lt;code&gt;this&lt;/code&gt; pointer when the function is called.</source>
          <target state="translated">델리게이트는 객체 참조와 비 정적 멤버 함수에 대한 포인터 또는 클로저에 대한 포인터와 중첩 된 함수에 대한 포인터라는 두 가지 데이터의 집합입니다. 함수가 호출 될 때 객체 참조가 &lt;code&gt;this&lt;/code&gt; 포인터를 형성합니다 .</target>
        </trans-unit>
        <trans-unit id="4aec14b7fdac5fb0ecec8f415ab6eb69aa261acb" translate="yes" xml:space="preserve">
          <source>Delegates are called analogously to function pointers:</source>
          <target state="translated">대표는 함수 포인터와 유사하게 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="2558e9f7d9f5526e4364edc3b8db3d61cf86460c" translate="yes" xml:space="preserve">
          <source>Delegates are declared similarly to function pointers:</source>
          <target state="translated">델리게이트는 함수 포인터와 유사하게 선언됩니다.</target>
        </trans-unit>
        <trans-unit id="aa625441b78d7acde925782444188a7c87208857" translate="yes" xml:space="preserve">
          <source>Delegates are formatted by &lt;code&gt;ReturnType delegate(Parameters) FunctionAttributes&lt;/code&gt;</source>
          <target state="translated">대리인은 &lt;code&gt;ReturnType delegate(Parameters) FunctionAttributes&lt;/code&gt; 로 형식이 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="5e1b39ccb37a9961d1255101485bf15889e010ca" translate="yes" xml:space="preserve">
          <source>Delegates are returned with the pointer to the function in EDX and the context pointer in EAX.</source>
          <target state="translated">EDX의 함수에 대한 포인터와 EAX의 컨텍스트 포인터와 함께 대리자가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="052b6f63bd5851cead5b4c172e8f935a644d89b8" translate="yes" xml:space="preserve">
          <source>Delegates cannot be initialized with static member functions or non-member functions.</source>
          <target state="translated">정적 멤버 함수 또는 비 멤버 함수로 대리자를 초기화 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="7c7d30725d61528bbe87347b21c48cb4af14cdd7" translate="yes" xml:space="preserve">
          <source>Delegates to non-static nested functions contain two pieces of data: the pointer to the stack frame of the lexically enclosing function (called the</source>
          <target state="translated">정적이 아닌 중첩 함수에 대한 위임에는 두 개의 데이터가 포함됩니다. 어휘 적으로 둘러싸는 함수의 스택 프레임에 대한 포인터 (</target>
        </trans-unit>
        <trans-unit id="df2bc9c8ae8ec095a651df2d9f40d26505be447e" translate="yes" xml:space="preserve">
          <source>Delegates vs interfaces</source>
          <target state="translated">대리인 대 인터페이스</target>
        </trans-unit>
        <trans-unit id="d54452ca4b1bb4f12762b945e239935abe5fa967" translate="yes" xml:space="preserve">
          <source>Delegates, Function Pointers, and Closures</source>
          <target state="translated">델리게이트, 함수 포인터 및 클로저</target>
        </trans-unit>
        <trans-unit id="412badc405df4381dd52a85e29141086798a8af9" translate="yes" xml:space="preserve">
          <source>Delegating Constructors</source>
          <target state="translated">생성자 위임</target>
        </trans-unit>
        <trans-unit id="0f5b0bb2508c13ddea64f445e0f902492dfb25f9" translate="yes" xml:space="preserve">
          <source>Delegating constructor calls cannot appear after labels.</source>
          <target state="translated">위임 생성자 호출은 레이블 뒤에 나타날 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="9c2f909da974c69b9255abf22c4ae5cb45c5d450" translate="yes" xml:space="preserve">
          <source>Delegating the kind of operation to &quot;g&quot; flag is soon to be phased out along with the ability to choose the exact matching scheme. The choice of matching scheme to use depends highly on the pattern kind and can done automatically on case by case basis.</source>
          <target state="translated">정확한 일치 체계를 선택할 수있는 기능과 함께 작업 종류를 &quot;g&quot;플래그로 위임하는 단계가 곧 중단됩니다. 사용할 매칭 방식의 선택은 패턴 종류에 따라 크게 달라지며 사례별로 자동으로 수행 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f6fdbe48dc54dd86f63097a03bd24094dedd713a" translate="yes" xml:space="preserve">
          <source>Delete</source>
          <target state="translated">Delete</target>
        </trans-unit>
        <trans-unit id="65ff71d2eb372c56b3f421a32122f09cb83f3b55" translate="yes" xml:space="preserve">
          <source>Delete Expressions</source>
          <target state="translated">식 삭제</target>
        </trans-unit>
        <trans-unit id="8f55705e486ea8516926708c08c13c9256e8a95e" translate="yes" xml:space="preserve">
          <source>Delete a file.</source>
          <target state="translated">파일을 삭제하십시오.</target>
        </trans-unit>
        <trans-unit id="972202c713fa07c93a56a91c10a0682843f3a8e5" translate="yes" xml:space="preserve">
          <source>Delete de from the archive.</source>
          <target state="translated">아카이브에서 de를 삭제하십시오.</target>
        </trans-unit>
        <trans-unit id="88fe1a4f86d7d55ef149bd6699c8cb4ae2ad5354" translate="yes" xml:space="preserve">
          <source>Delete entry in AA, return true if it was present</source>
          <target state="translated">AA에서 항목을 삭제하고 존재하면 true를 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="25daa8e189d0bc44a28d39ed353b7d7a29be2d4b" translate="yes" xml:space="preserve">
          <source>Delete entry scope const AA, return true if it was present</source>
          <target state="translated">항목 범위 const AA를 삭제하고 존재하는 경우 true를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2f7a502591586046031c9af95e9952db392fbf2f" translate="yes" xml:space="preserve">
          <source>Delete exception instance &lt;code&gt;t&lt;/code&gt; from the exception pool. Must have been allocated with &lt;code&gt;_d_newThrowable()&lt;/code&gt;. This is meant to be called at the close of a catch block. It's nothrow because otherwise any function with a catch block could not be nothrow.</source>
          <target state="translated">예외 풀에서 예외 인스턴스 &lt;code&gt;t&lt;/code&gt; 를 삭제 하십시오. &lt;code&gt;_d_newThrowable()&lt;/code&gt; 으로 할당되어 있어야합니다 . 캐치 블록이 닫힐 때 호출됩니다. 캐치 블록이있는 함수는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="5dfa5a5b1782a414f9933fb08f5b7f16627c244b" translate="yes" xml:space="preserve">
          <source>Delete existing file, write new file</source>
          <target state="translated">기존 파일 삭제, 새 파일 작성</target>
        </trans-unit>
        <trans-unit id="046b836f5646c2c23db59e441ec8c005c9a8f702" translate="yes" xml:space="preserve">
          <source>Delete file &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">파일 &lt;code&gt;name&lt;/code&gt; 삭제하십시오 .</target>
        </trans-unit>
        <trans-unit id="8cc031cb08c389041e65ed6ad302b03e5855448c" translate="yes" xml:space="preserve">
          <source>Delete member &lt;code&gt;de&lt;/code&gt; from the archive. Uses the name of the member to detect which element to delete.</source>
          <target state="translated">아카이브에서 &lt;code&gt;de&lt;/code&gt; 회원을 삭제 합니다. 멤버 이름을 사용하여 삭제할 요소를 감지합니다.</target>
        </trans-unit>
        <trans-unit id="d9e7b44b2cadf44f0c32b15240292c8452debe64" translate="yes" xml:space="preserve">
          <source>Deleting arrays</source>
          <target state="translated">배열 삭제</target>
        </trans-unit>
        <trans-unit id="0fdf5407bec76f65af9589ccf41be8c79bf847a1" translate="yes" xml:space="preserve">
          <source>Deleting arrays of structs</source>
          <target state="translated">구조체 배열 삭제</target>
        </trans-unit>
        <trans-unit id="4254b9286de9f21e4cee34675ef4eebdc65ff8c6" translate="yes" xml:space="preserve">
          <source>Deleting classes</source>
          <target state="translated">수업 삭제</target>
        </trans-unit>
        <trans-unit id="ed4c149e0b712f4e2bb72b0013511d6f061d5740" translate="yes" xml:space="preserve">
          <source>Deleting interfaces</source>
          <target state="translated">인터페이스 삭제</target>
        </trans-unit>
        <trans-unit id="ae17b3b5e7a92728accc290c8bf686e71c3e3517" translate="yes" xml:space="preserve">
          <source>Deleting structs</source>
          <target state="translated">구조체 삭제</target>
        </trans-unit>
        <trans-unit id="be9605dcb1e588f88c8bee392dc7b467d126321c" translate="yes" xml:space="preserve">
          <source>Delimited Strings</source>
          <target state="translated">구분 된 문자열</target>
        </trans-unit>
        <trans-unit id="9e387962609f0e1e964c7e568f72f9e7ae3c3956" translate="yes" xml:space="preserve">
          <source>Delimited strings use various forms of delimiters. The delimiter, whether a character or identifer, must immediately follow the &quot; without any intervening whitespace. The terminating delimiter must immediately precede the closing &quot; without any intervening whitespace. A</source>
          <target state="translated">구분 된 문자열은 다양한 형식의 구분자를 사용합니다. 문자 든 식별자 든 구분 기호는 중간에 공백없이 &quot;&quot;바로 뒤에 와야합니다. 종료 구분 기호는 중간에 공백없이 닫는 &quot;바로 앞에 와야합니다. ㅏ</target>
        </trans-unit>
        <trans-unit id="695cf84f7fd42be086fd3b6d5da97a93866813a5" translate="yes" xml:space="preserve">
          <source>Delimited strings use various forms of delimiters. The delimiter, whether a character or identifier, must immediately follow the &quot; without any intervening whitespace. The terminating delimiter must immediately precede the closing &quot; without any intervening whitespace. A</source>
          <target state="translated">구분 된 문자열은 다양한 형태의 구분자를 사용합니다. 구분 기호 (문자 또는 식별자)는 공백없이 &quot;바로 뒤에 와야합니다. 종료 구분 기호는 공백없이 닫는&quot;바로 앞에 와야합니다. ㅏ</target>
        </trans-unit>
        <trans-unit id="5dec72453c3798227c53d3e18645cc781f128098" translate="yes" xml:space="preserve">
          <source>Demangle D mangled names.</source>
          <target state="translated">얽힌 D 맹 글링 된 이름.</target>
        </trans-unit>
        <trans-unit id="ddfd9e8118efdecff8dd2d2af4b014f3b4804c01" translate="yes" xml:space="preserve">
          <source>Demangles D mangled names. If it is not a D mangled name, it returns its argument name.</source>
          <target state="translated">D 맹 글링 된 이름을 나타냅니다. D 맹 글링 된 이름이 아닌 경우 인수 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="debfefbb9cba46b7cd15ad0f72aee393c6142eb7" translate="yes" xml:space="preserve">
          <source>Demangles a D mangled type.</source>
          <target state="translated">D 맹 글링 유형을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="ef35d5b2d9137e56445dcb13b1926641ac1748d1" translate="yes" xml:space="preserve">
          <source>Denis Shelomovskij</source>
          <target state="translated">데니스 셸 로브 스키</target>
        </trans-unit>
        <trans-unit id="b119328fcf0f1a8506c71d6d5c90a4b602176677" translate="yes" xml:space="preserve">
          <source>Depending on the architecture, compiler flags may be required to activate support for SIMD types.</source>
          <target state="translated">아키텍처에 따라 SIMD 유형에 대한 지원을 활성화하기 위해 컴파일러 플래그가 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5800c53d5e6610496fae36318de2fc0ee48759c2" translate="yes" xml:space="preserve">
          <source>Depending on the sign, NANs go to either end of the spectrum.</source>
          <target state="translated">부호에 따라 NAN은 스펙트럼의 한쪽 끝으로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="eef926e2307412ea5d18dc2f434ab76df97c9426" translate="yes" xml:space="preserve">
          <source>Depending on the struct layout, the compiler may generate the following internal postblit functions:</source>
          <target state="translated">구조체 레이아웃에 따라 컴파일러는 다음과 같은 내부 포스트 블릿 함수를 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="527600bf0272b6bf3abcb495a99c6ee346bb82b2" translate="yes" xml:space="preserve">
          <source>Deprecated</source>
          <target state="translated">Deprecated</target>
        </trans-unit>
        <trans-unit id="42a66abe1669ce3ffad7695dbe407c22ed591eb2" translate="yes" xml:space="preserve">
          <source>Deprecated Functions</source>
          <target state="translated">더 이상 사용되지 않는 함수</target>
        </trans-unit>
        <trans-unit id="bfc32553e9a3941dedadb9fb40b33e7008f653d9" translate="yes" xml:space="preserve">
          <source>Deprecated Soft Heap Limit Interface</source>
          <target state="translated">더 이상 사용되지 않는 소프트 힙 제한 인터페이스</target>
        </trans-unit>
        <trans-unit id="b2a248487f391de50bfbecd25bb7aaa1ed569640" translate="yes" xml:space="preserve">
          <source>Deprecated. Please use &lt;a href=&quot;#enforce&quot;&gt;&lt;code&gt;enforce&lt;/code&gt;&lt;/a&gt; instead. This function will be removed 2.089.</source>
          <target state="translated">더 이상 사용되지 않습니다. 사용하시기 바랍니다 &lt;a href=&quot;#enforce&quot;&gt; &lt;code&gt;enforce&lt;/code&gt; &lt;/a&gt; 대신. 이 기능은 2.089에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="2c79ea7bd700047cc619e794290dc3e2dc523454" translate="yes" xml:space="preserve">
          <source>Deprecated. Please use &lt;a href=&quot;#round&quot;&gt;&lt;code&gt;round&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">더 이상 사용되지 않습니다. 사용하십시오 &lt;a href=&quot;#round&quot;&gt; &lt;code&gt;round&lt;/code&gt; &lt;/a&gt; 대신.</target>
        </trans-unit>
        <trans-unit id="1b9904893da49653e1dba2c46ecfb0656a693e60" translate="yes" xml:space="preserve">
          <source>DeprecatedAttribute</source>
          <target state="translated">DeprecatedAttribute</target>
        </trans-unit>
        <trans-unit id="ee777837c7008ab314d60ab6340d94b7bb481757" translate="yes" xml:space="preserve">
          <source>Dereferencing a pointer that is not</source>
          <target state="translated">그렇지 않은 포인터 역 참조</target>
        </trans-unit>
        <trans-unit id="0474d0915ec1aafb67985d6471d5cd7b881a0fc7" translate="yes" xml:space="preserve">
          <source>Deregisters the calling thread from use with the runtime. If this routine is called for a thread which is not registered, the result is undefined.</source>
          <target state="translated">런타임에서 사용하지 않는 호출 스레드를 등록 취소합니다. 이 루틴이 등록되지 않은 스레드에 대해 호출되면 결과는 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1ca49bb05cb1ee30fb0317e206c0b46b922133c6" translate="yes" xml:space="preserve">
          <source>Deregisters the given thread from use with the runtime. If this routine is called for a thread which is not registered, the result is undefined.</source>
          <target state="translated">주어진 스레드가 런타임과 함께 사용하지 않도록 등록 해제합니다. 이 루틴이 등록되지 않은 스레드에 대해 호출되면 결과는 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="081ea626fb636d13a422e02a8223b6bacf54ed06" translate="yes" xml:space="preserve">
          <source>Derived Data Types</source>
          <target state="translated">파생 데이터 형식</target>
        </trans-unit>
        <trans-unit id="dc979d243485252a4a9336b834ea499511e48f35" translate="yes" xml:space="preserve">
          <source>Derived classes inherit any allocator from their base class, if one is not specified.</source>
          <target state="translated">파생 클래스는 지정되지 않은 경우 기본 클래스에서 할당자를 상속합니다.</target>
        </trans-unit>
        <trans-unit id="ecdd58700bf7c79b9590aa6ba4f17a59fdf13cc5" translate="yes" xml:space="preserve">
          <source>Derived classes inherit any deallocator from their base class, if one is not specified.</source>
          <target state="translated">파생 클래스는 지정되지 않은 경우 기본 클래스에서 할당 취소기를 상속합니다.</target>
        </trans-unit>
        <trans-unit id="01e635f27ec24e2d0be75256adcfabf099c3a6e6" translate="yes" xml:space="preserve">
          <source>Desc</source>
          <target state="translated">Desc</target>
        </trans-unit>
        <trans-unit id="d55435d9dcbb175dba229d196e836af1eeb181cc" translate="yes" xml:space="preserve">
          <source>Describes a back-end target. At present it is incomplete, but in the future it should grow to contain most or all target machine and target O/S specific information.</source>
          <target state="translated">백엔드 대상을 설명합니다. 현재는 불완전하지만 앞으로는 대부분 또는 모든 대상 시스템과 대상 O / S 관련 정보를 포함하도록 성장해야합니다.</target>
        </trans-unit>
        <trans-unit id="17519f0a081d4de96e9a8327052145d4da388c05" translate="yes" xml:space="preserve">
          <source>Describes how an argument type is passed to a function on target.</source>
          <target state="translated">인수 유형이 대상의 함수에 전달되는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="04f0f87cdf30f41863595935bdd7b915c84a0c3d" translate="yes" xml:space="preserve">
          <source>Deseret</source>
          <target state="translated">Deseret</target>
        </trans-unit>
        <trans-unit id="5c22a4f35a8597f537d66c0b77083b1157bffb80" translate="yes" xml:space="preserve">
          <source>Destination string</source>
          <target state="translated">대상 문자열</target>
        </trans-unit>
        <trans-unit id="839c441dcc29d361bfacf38afa416f18a1637928" translate="yes" xml:space="preserve">
          <source>Destroy A Prepared Statement Object</source>
          <target state="translated">준비된 명령문 오브젝트 삭제</target>
        </trans-unit>
        <trans-unit id="2ac4f537d3b2f32d96a398d33d05ec08395a3c21" translate="yes" xml:space="preserve">
          <source>Destroys and then deallocates (using &lt;code&gt;alloc&lt;/code&gt;) the object pointed to by a pointer, the class object referred to by a &lt;code&gt;class&lt;/code&gt; or &lt;code&gt;interface&lt;/code&gt; reference, or an entire array. It is assumed the respective entities had been allocated with the same allocator.</source>
          <target state="translated">포인터가 가리키는 객체, &lt;code&gt;class&lt;/code&gt; 또는 &lt;code&gt;interface&lt;/code&gt; 참조가 참조 하는 클래스 객체 또는 전체 배열을 파괴 한 다음 할당을 해제합니다 ( &lt;code&gt;alloc&lt;/code&gt; 사용 ) . 각 엔티티에 동일한 할당자가 할당 된 것으로 가정합니다.</target>
        </trans-unit>
        <trans-unit id="c7c2581b265a4916c03d15bb749b173d1a0e008f" translate="yes" xml:space="preserve">
          <source>Destroys and then deallocates (using &lt;code&gt;allocatorFor!T&lt;/code&gt;) the object pointed to by a pointer, the class object referred to by a &lt;code&gt;class&lt;/code&gt; or &lt;code&gt;interface&lt;/code&gt; reference, or an entire array. It is assumed the respective entities had been allocated with the same allocator.</source>
          <target state="translated">포인터가 가리키는 객체, &lt;code&gt;class&lt;/code&gt; 또는 &lt;code&gt;interface&lt;/code&gt; 참조가 참조 하는 클래스 객체 또는 전체 배열 을 삭제 한 다음 할당을 해제합니다 ( &lt;code&gt;allocatorFor!T&lt;/code&gt; 사용하여 할당 ) . 각 엔티티에 동일한 할당자가 할당 된 것으로 가정합니다.</target>
        </trans-unit>
        <trans-unit id="461b0c4ed643cec21e62641f68d242b11940c0e4" translate="yes" xml:space="preserve">
          <source>Destroys and then deallocates a multidimensional array, assuming it was created with makeMultidimensionalArray and the same allocator was used.</source>
          <target state="translated">makeMultidimensionalArray로 생성되었고 동일한 할당자가 사용되었다고 가정하여 다차원 배열을 삭제 한 다음 할당 해제합니다.</target>
        </trans-unit>
        <trans-unit id="a2ba51b01f5575967e896aa687ec2875a9254daf" translate="yes" xml:space="preserve">
          <source>Destroys and then deallocates an object.</source>
          <target state="translated">객체를 파괴하고 할당 해제합니다.</target>
        </trans-unit>
        <trans-unit id="f22d78fd51640f5bf6ec9cfaee6fb8da07259389" translate="yes" xml:space="preserve">
          <source>Destroys the given object and optionally resets to initial state. It's used to destroy an object, calling its destructor or finalizer so it no longer references any other objects. It does</source>
          <target state="translated">주어진 객체를 파괴하고 선택적으로 초기 상태로 재설정합니다. 더 이상 다른 객체를 참조하지 않도록 객체를 소멸하거나 소멸자 또는 종료자를 호출하는 데 사용됩니다. 그렇습니다</target>
        </trans-unit>
        <trans-unit id="3eb34f7d8ff2a61c242722058a753cf673126c48" translate="yes" xml:space="preserve">
          <source>Destructively get the error message from the last constraint evaluation</source>
          <target state="translated">마지막 구속 조건 평가에서 오류 메시지를 파괴적으로 얻습니다.</target>
        </trans-unit>
        <trans-unit id="7d01bf1298a3c981415555afc1ef02f440504923" translate="yes" xml:space="preserve">
          <source>Destructively reads and returns the first element of the container. The slot is not removed from the container; it is left initialized with &lt;code&gt;T.init&lt;/code&gt;. This routine need not be defined if &lt;code&gt; front&lt;/code&gt; returns a &lt;code&gt;ref&lt;/code&gt;.</source>
          <target state="translated">컨테이너의 첫 번째 요소를 파괴적으로 읽고 반환합니다. 컨테이너에서 슬롯이 제거되지 않습니다. &lt;code&gt;T.init&lt;/code&gt; 로 초기화 된 상태로 남아 있습니다. &lt;code&gt; front&lt;/code&gt; 가 &lt;code&gt;ref&lt;/code&gt; 를 돌려주는 경우,이 루틴을 정의 할 필요는 없습니다 .</target>
        </trans-unit>
        <trans-unit id="9336266e721a28a2d92fc3dbf7f484300407b2c1" translate="yes" xml:space="preserve">
          <source>Destructively reads and returns the last element of the container. The slot is not removed from the container; it is left initialized with &lt;code&gt;T.init&lt;/code&gt;. This routine need not be defined if &lt;code&gt; front&lt;/code&gt; returns a &lt;code&gt;ref&lt;/code&gt;.</source>
          <target state="translated">컨테이너의 마지막 요소를 파괴적으로 읽고 반환합니다. 컨테이너에서 슬롯이 제거되지 않습니다. &lt;code&gt;T.init&lt;/code&gt; 로 초기화 된 상태로 남아 있습니다. &lt;code&gt; front&lt;/code&gt; 가 &lt;code&gt;ref&lt;/code&gt; 를 돌려주는 경우,이 루틴을 정의 할 필요는 없습니다 .</target>
        </trans-unit>
        <trans-unit id="7aac383021a816adb22bea815df65cb001f38245" translate="yes" xml:space="preserve">
          <source>Destructively reads and returns the value at position &lt;code&gt;x&lt;/code&gt;. The slot is not removed from the container; it is left initialized with &lt;code&gt; T.init&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 위치의 값을 파괴적으로 읽고 반환합니다 . 컨테이너에서 슬롯이 제거되지 않습니다. &lt;code&gt; T.init&lt;/code&gt; 로 초기화 된 상태로 남아 있습니다.</target>
        </trans-unit>
        <trans-unit id="84a4ecd4027e79f4330184a9d5c9d5af4500afab" translate="yes" xml:space="preserve">
          <source>Destructively reads the &lt;code&gt;n&lt;/code&gt;th element in the composite range. Defined if all ranges offer random access.</source>
          <target state="translated">복합 범위에서 &lt;code&gt;n&lt;/code&gt; 번째 요소를 파괴적으로 읽습니다 . 모든 범위가 임의 액세스를 제공하는지 정의합니다.</target>
        </trans-unit>
        <trans-unit id="bcf6c17f9da73e467a073ac5e6e487e5bdc36429" translate="yes" xml:space="preserve">
          <source>Destructors</source>
          <target state="translated">Destructors</target>
        </trans-unit>
        <trans-unit id="e919ed9bb70a46a3796a19890a326ae3da20095c" translate="yes" xml:space="preserve">
          <source>Destructors are attached to VarDeclarations. Hence, if expression returns a temp that needs a destructor, make sure and create a VarDeclaration for that temp.</source>
          <target state="translated">소멸자는 VarDeclarations에 첨부됩니다. 따라서 표현식에서 소멸자가 필요한 온도를 반환하면 해당 온도에 대한 VarDeclaration을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="1e1a2ce60b3d70cf2ae1ff1fc74a1778546c1572" translate="yes" xml:space="preserve">
          <source>Destructors are called when an object goes out of scope. Their purpose is to free up resources owned by the struct object.</source>
          <target state="translated">개체가 범위를 벗어날 때 소멸자가 호출됩니다. 그들의 목적은 구조체 객체가 소유 한 리소스를 확보하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="733aed473da33e2c79e767b165dc015afa760e13" translate="yes" xml:space="preserve">
          <source>Destructors are used to deallocate resources acquired by an object. For most classes, this resource is allocated memory. With garbage collection, most destructors then become empty and can be discarded entirely.</source>
          <target state="translated">소멸자는 개체가 획득 한 리소스를 할당 해제하는 데 사용됩니다. 대부분의 클래스에서이 리소스에는 메모리가 할당됩니다. 가비지 콜렉션을 사용하면 대부분의 소멸자가 비워져 완전히 버릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4193705fdcc17dae2da79691a2cff0a2916e3951" translate="yes" xml:space="preserve">
          <source>Destructors will always be executed while other threads are active; that is, an implementation that stops the world must not execute destructors until the world has been resumed.</source>
          <target state="translated">다른 스레드가 활성화되어있는 동안 항상 소멸자가 실행됩니다. 즉, 세계를 중단시키는 구현은 세계가 재개 될 때까지 소멸자를 실행해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="f9fe3defe21f65240e63a90d5c97a3f08cb63c9f" translate="yes" xml:space="preserve">
          <source>Detaches from the current file (throwing on failure), and then attempts to open file &lt;code&gt;name&lt;/code&gt; with mode &lt;code&gt;stdioOpenmode&lt;/code&gt;. The mode has the same semantics as in the C standard library &lt;a href=&quot;http://cplusplus.com/reference/clibrary/cstdio/fopen.html&quot;&gt;fopen&lt;/a&gt; function.</source>
          <target state="translated">현재 파일에서 분리하고 (실패시 발생) &lt;code&gt;stdioOpenmode&lt;/code&gt; 모드로 파일 &lt;code&gt;name&lt;/code&gt; 을 열려고 시도합니다 . 이 모드는 C 표준 라이브러리 &lt;a href=&quot;http://cplusplus.com/reference/clibrary/cstdio/fopen.html&quot;&gt;fopen&lt;/a&gt; 함수 와 동일한 의미를 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="43c99522dee5ed94beb8731d90acc43ed9c784ee" translate="yes" xml:space="preserve">
          <source>Detaches from the current file (throwing on failure), and then runs a command by calling the C standard library function &lt;a href=&quot;http://opengroup.org/onlinepubs/007908799/xsh/popen.html&quot;&gt;popen&lt;/a&gt;.</source>
          <target state="translated">현재 파일에서 분리 (실패시 발생) 한 다음 C 표준 라이브러리 함수 &lt;a href=&quot;http://opengroup.org/onlinepubs/007908799/xsh/popen.html&quot;&gt;popen&lt;/a&gt; 을 호출하여 명령을 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="bd15bb413d37f7450fabf4b76fbb1eddbcbd1e62" translate="yes" xml:space="preserve">
          <source>Detaches from the underlying file. If the sole owner, calls &lt;code&gt;close&lt;/code&gt;.</source>
          <target state="translated">기본 파일에서 분리합니다. 단독 소유자 인 경우 &lt;code&gt;close&lt;/code&gt; 를 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="dc3decbb93847518f1a049dcf49d0d7c6560bcc6" translate="yes" xml:space="preserve">
          <source>Details</source>
          <target state="translated">Details</target>
        </trans-unit>
        <trans-unit id="542386bcd7c66d08d9518931559ad4e0bf8fae14" translate="yes" xml:space="preserve">
          <source>Detect cases where pointers to the stack can escape the lifetime of the stack frame by being placed into a GC allocated object. Print error messages when these are detected.</source>
          <target state="translated">스택에 대한 포인터가 GC 할당 객체에 배치되어 스택 프레임의 수명을 벗어날 수있는 경우를 감지합니다. 오류 메시지가 감지되면 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="9076928999f6d4e94fb79f73da0c20fffef0d124" translate="yes" xml:space="preserve">
          <source>Detect cases where pointers to the stack can escape the lifetime of the stack frame by returning &lt;code&gt;e&lt;/code&gt; by value. Print error messages when these are detected.</source>
          <target state="translated">스택에 대한 포인터 가 값 으로 &lt;code&gt;e&lt;/code&gt; 를 반환하여 스택 프레임의 수명을 벗어날 수있는 경우를 감지 합니다. 오류 메시지가 감지되면 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="fdb923c0534e9e273b6936106d4812cf1cf38b9f" translate="yes" xml:space="preserve">
          <source>Detect cases where pointers to the stack can escape the lifetime of the stack frame when throwing &lt;code&gt;e&lt;/code&gt;. Print error messages when these are detected.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; 를 던질 때 스택에 대한 포인터가 스택 프레임의 수명을 벗어날 수있는 경우를 감지 합니다. 오류 메시지가 감지되면 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="499cb741a25cf7eada5e6336f956dbbc7666650a" translate="yes" xml:space="preserve">
          <source>Detect cases where returning &lt;code&gt;e&lt;/code&gt; by &lt;code&gt;ref&lt;/code&gt; can result in a reference to the stack being returned. Print error messages when these are detected.</source>
          <target state="translated">&lt;code&gt;ref&lt;/code&gt; 로 &lt;code&gt;e&lt;/code&gt; 를 반환하면 스택에 대한 참조가 반환 될 수 있는 경우를 감지 합니다. 오류 메시지가 감지되면 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="8d6a78255190ec428d4fad5f67efcbbc9ca2974e" translate="yes" xml:space="preserve">
          <source>Detect if type has pointer fields that are initialized to void. Local stack variables with such void fields can remain uninitialized, leading to pointer bugs.</source>
          <target state="translated">type에 void로 초기화 된 포인터 필드가 있는지 감지합니다. 이러한 void 필드를 가진 로컬 스택 변수는 초기화되지 않은 상태로 남아 포인터 버그로 이어질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="54df594c9eb6677b5114796db2da98d1c4d4d452" translate="yes" xml:space="preserve">
          <source>Detect the currently active compiler.</source>
          <target state="translated">현재 활성화 된 컴파일러를 감지하십시오.</target>
        </trans-unit>
        <trans-unit id="b51b71117c0828c840c8304d87dfac8964b64f84" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a basic type (scalar type or void).</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 기본 유형 인지 여부 (스칼라 유형 또는 공백)를 감지하십시오 .</target>
        </trans-unit>
        <trans-unit id="1e78a9491e067ba1200478bea4b6381af182bad4" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a built-in boolean type.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 내장 부울 유형 인지 여부를 감지하십시오 .</target>
        </trans-unit>
        <trans-unit id="bccc60c97e13b55d2259e4dd661f163277430aaf" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a built-in floating point type.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 내장 부동 소수점 유형 인지 감지합니다 .</target>
        </trans-unit>
        <trans-unit id="31e28e8d83f4150e30813b06f2f956381a78adee" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a built-in integral type. Types &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;wchar&lt;/code&gt;, and &lt;code&gt;dchar&lt;/code&gt; are not considered integral.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 내장 일체형 인지 여부를 감지합니다 . &lt;code&gt;bool&lt;/code&gt; , &lt;code&gt;char&lt;/code&gt; , &lt;code&gt;wchar&lt;/code&gt; 및 &lt;code&gt;dchar&lt;/code&gt; 유형 은 정수로 간주되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="de2d77424008998270c19608961463e73f92c7be" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a built-in numeric type (integral or floating point).</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 내장 숫자 유형인지 (적분 또는 부동 소수점) 감지합니다 .</target>
        </trans-unit>
        <trans-unit id="8c65089db015519f052bf159af96861d7372752d" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a built-in signed numeric type.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 내장 부호있는 숫자 유형 인지 감지합니다 .</target>
        </trans-unit>
        <trans-unit id="5a490a1efc5fe8f8c15db26ad0b4f95eab8eca53" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a built-in unsigned numeric type.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 부호없는 내장 숫자 유형 인지 감지합니다 .</target>
        </trans-unit>
        <trans-unit id="1b38352e7ad6b1a6fbdbccfb9ff4ad51beb73154" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a callable object, which can be called with the function call operator &lt;code&gt;(...)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 호출 가능한 객체 인지 여부를 감지 하고 함수 호출 연산자 &lt;code&gt;(...)&lt;/code&gt; 로 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9d45434827e487a9b6c8f41db71cdd120d62ea9e" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a final class.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 최종 클래스 인지 여부를 감지하십시오 .</target>
        </trans-unit>
        <trans-unit id="2f84ba682685f76cbf3408bf575477cd73c6327b" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a final function.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 최종 함수 인지 여부를 감지합니다 .</target>
        </trans-unit>
        <trans-unit id="8c52ac80711426de7e3c5c1cd6a0a7eb7e94d583" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a scalar type (a built-in numeric, character or boolean type).</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 스칼라 유형 (내장 숫자, 문자 또는 부울 유형) 인지 여부를 감지합니다 .</target>
        </trans-unit>
        <trans-unit id="bf13c75ae1dde7ee0304af6c7479fae0f687338c" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a struct, static array, or enum that is implicitly convertible to a string.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 구조체, 정적 배열 또는 문자열로 암시 적으로 변환 가능한 열거 인지 여부를 감지합니다 .</target>
        </trans-unit>
        <trans-unit id="2f245b54bbf6f96a3faf317a8a5dca85cbc461ba" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is an abstract class.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 추상 클래스 인지 여부를 감지하십시오 .</target>
        </trans-unit>
        <trans-unit id="a0b8e4c218376a5ae32d31d3e0a14bdfe6e6a841" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is an abstract function.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 추상 함수 인지 감지합니다 .</target>
        </trans-unit>
        <trans-unit id="b6b9086f224909a7c2bb4c56aba8c2ed79ca9706" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is an associative array type</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 연관 배열 유형 인지 감지</target>
        </trans-unit>
        <trans-unit id="0c1e7216bbcd9d1c115943f756e4d4417a836a18" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is one of the built-in character types.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 내장 문자 유형 중 하나 인지 감지합니다 .</target>
        </trans-unit>
        <trans-unit id="9077d0a75bafe1b3a2f13d1ff7c468b81df74dc7" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is one of the built-in string types.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 내장 문자열 유형 중 하나 인지 감지합니다 .</target>
        </trans-unit>
        <trans-unit id="4922c3a1a7b5dd1ae36c0c326672b28edec6d464" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;X&lt;/code&gt; is a final method or class.</source>
          <target state="translated">&lt;code&gt;X&lt;/code&gt; 가 최종 메소드인지 클래스 인지 감지하십시오 .</target>
        </trans-unit>
        <trans-unit id="827d13e51ef77f43eb8725193f558f8d3eaf26a4" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;X&lt;/code&gt; is a type. Analogous to &lt;code&gt;is(X)&lt;/code&gt;. This is useful when used in conjunction with other templates, e.g. &lt;code&gt;allSatisfy!(isType, X)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;X&lt;/code&gt; 가 유형 인지 감지합니다 . &lt;code&gt;is(X)&lt;/code&gt; 와 유사합니다 . 이것은 &lt;code&gt;allSatisfy!(isType, X)&lt;/code&gt; 와 같은 다른 템플릿과 함께 사용될 때 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="faf576f5d93ef682672e5244af28e0c3228a1ea4" translate="yes" xml:space="preserve">
          <source>Detect whether an enum is of integral type and has only &quot;flag&quot; values (i.e. values with a bit count of exactly 1). Additionally, a zero value is allowed for compatibility with enums including a &quot;None&quot; value.</source>
          <target state="translated">열거 형이 정수형이고 &quot;플래그&quot;값만 있는지 여부를 탐지합니다 (즉, 비트 수가 정확히 1 인 값). 또한 &quot;없음&quot;값을 포함하여 열거 형과의 호환성을 위해 0 값이 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="55ab7e461b66e319d8943fcc41de661d483907b2" translate="yes" xml:space="preserve">
          <source>Detect whether symbol or type &lt;code&gt;T&lt;/code&gt; is a delegate.</source>
          <target state="translated">기호 또는 유형 &lt;code&gt;T&lt;/code&gt; 가 델리게이트 인지 감지합니다 .</target>
        </trans-unit>
        <trans-unit id="064b283bb793e2f13ffab06a0541e23b98aa996d" translate="yes" xml:space="preserve">
          <source>Detect whether symbol or type &lt;code&gt;T&lt;/code&gt; is a function pointer.</source>
          <target state="translated">기호 또는 유형 &lt;code&gt;T&lt;/code&gt; 가 함수 포인터 인지 여부를 감지하십시오 .</target>
        </trans-unit>
        <trans-unit id="b905a78d7eaf504e70d41bac2fa8c3c5b9742831" translate="yes" xml:space="preserve">
          <source>Detect whether symbol or type &lt;code&gt;T&lt;/code&gt; is a function, a function pointer or a delegate.</source>
          <target state="translated">기호 또는 유형 &lt;code&gt;T&lt;/code&gt; 가 함수, 함수 포인터 또는 대리자 인지 감지합니다 .</target>
        </trans-unit>
        <trans-unit id="674c29e0e2e68606be876cc14e7e5e12719c9857" translate="yes" xml:space="preserve">
          <source>Detect whether symbol or type &lt;code&gt;X&lt;/code&gt; is a function. This is different that finding if a symbol is callable or satisfying &lt;code&gt;is(X == function)&lt;/code&gt;, it finds specifically if the symbol represents a normal function declaration, i.e. not a delegate or a function pointer.</source>
          <target state="translated">기호 또는 유형 &lt;code&gt;X&lt;/code&gt; 가 함수 인지 감지합니다 . 이것은 심볼이 호출 가능한지 또는 &lt;code&gt;is(X == function)&lt;/code&gt; 만족시키는지를 찾는 것과는 다르며, 심볼이 정상적인 함수 선언을 나타내는 지, 즉 델리게이트 또는 함수 포인터가 아닌지를 구체적으로 찾습니다.</target>
        </trans-unit>
        <trans-unit id="a18e26595656dc21ae2e7aa0da88d7f5461d5ee5" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is a SIMD vector type.</source>
          <target state="translated">타입 &lt;code&gt;T&lt;/code&gt; 가 SIMD 벡터 타입 인지 검출합니다 .</target>
        </trans-unit>
        <trans-unit id="6931021a7dd4235c4e43d4024655c4f753d99d87" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is a builtin type.</source>
          <target state="translated">유형 &lt;code&gt;T&lt;/code&gt; 가 내장 유형 인지 감지하십시오 .</target>
        </trans-unit>
        <trans-unit id="7d34991bc4b88a04f0d2dab2f2dc23c8c0accb03" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is a dynamic array.</source>
          <target state="translated">유형 &lt;code&gt;T&lt;/code&gt; 가 동적 배열 인지 감지합니다 .</target>
        </trans-unit>
        <trans-unit id="d70edfd1cd99f8159a2db9bad481855617e7d282" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is a narrow string.</source>
          <target state="translated">유형 &lt;code&gt;T&lt;/code&gt; 가 좁은 문자열 인지 감지합니다 .</target>
        </trans-unit>
        <trans-unit id="891aa6be5a4a83c8eb5f8d718cd4f28085867ec7" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is a pointer.</source>
          <target state="translated">타입 &lt;code&gt;T&lt;/code&gt; 가 포인터 인지 감지합니다 .</target>
        </trans-unit>
        <trans-unit id="43cee00a6b779541c408c81e19cef2a386e3e9ef" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is a static array.</source>
          <target state="translated">유형 &lt;code&gt;T&lt;/code&gt; 가 정적 배열 인지 감지합니다 .</target>
        </trans-unit>
        <trans-unit id="f8ace4bf5df650564f19304d71e5d174e7eb8a72" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is a string that will be autodecoded.</source>
          <target state="translated">유형 &lt;code&gt;T&lt;/code&gt; 가 자동 디코딩 될 문자열 인지 감지합니다 .</target>
        </trans-unit>
        <trans-unit id="9c8d24db5f10b60dbce755a6acb2ee42c46f0c75" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is an aggregate type.</source>
          <target state="translated">유형 &lt;code&gt;T&lt;/code&gt; 가 집계 유형 인지 여부를 감지하십시오 .</target>
        </trans-unit>
        <trans-unit id="231e9d409748bcfba060f2b94a81fb91cefc2633" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is an array (static or dynamic; for associative arrays see &lt;a href=&quot;#isAssociativeArray&quot;&gt;&lt;code&gt;isAssociativeArray&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">유형 &lt;code&gt;T&lt;/code&gt; 가 배열 인지 여부를 감지합니다 (정적 또는 동적, 연관 배열에 대해서는 &lt;a href=&quot;#isAssociativeArray&quot;&gt; &lt;code&gt;isAssociativeArray&lt;/code&gt; &lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="a570e3de4ebebd703f76578c10d24c5c6e1c0a0b" translate="yes" xml:space="preserve">
          <source>Detects whether &lt;code&gt;T&lt;/code&gt; is a comparable type. Basic types and structs and classes that implement opCmp are ordering comparable.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 비교 가능한 유형 인지 감지합니다 . opCmp를 구현하는 기본 유형과 구조체 및 클래스는 비슷한 순서로 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="0cb93bae74fdeaac6fc236f4e82d733ebb774f3f" translate="yes" xml:space="preserve">
          <source>Determine If A Prepared Statement Has Been Reset</source>
          <target state="translated">준비된 명령문이 재설정되었는지 판별</target>
        </trans-unit>
        <trans-unit id="db966195ad1f618275836e22992513b99d0a007c" translate="yes" xml:space="preserve">
          <source>Determine If An SQL Statement Is Complete</source>
          <target state="translated">SQL 문이 완전한지 판별</target>
        </trans-unit>
        <trans-unit id="c26787f0638276ef98ffe28bc01f913ce7cd577e" translate="yes" xml:space="preserve">
          <source>Determine backend tym bits corresponding to MOD</source>
          <target state="translated">MOD에 해당하는 백엔드 tym 비트 결정</target>
        </trans-unit>
        <trans-unit id="bd50d354bd2da7cac6650d8443206ebc8579e505" translate="yes" xml:space="preserve">
          <source>Determine cost of inlining Expression</source>
          <target state="translated">인라인 표현 비용 결정</target>
        </trans-unit>
        <trans-unit id="d999b41f32ac29b623afade74858ca9ac9b9eb82" translate="yes" xml:space="preserve">
          <source>Determine cost of inlining function</source>
          <target state="translated">인라인 기능 비용 결정</target>
        </trans-unit>
        <trans-unit id="b89883ad97d6e0f10f1d04a3963690958709c5b3" translate="yes" xml:space="preserve">
          <source>Determine file name extension as slice of input.</source>
          <target state="translated">파일 이름 확장자를 입력 조각으로 결정하십시오.</target>
        </trans-unit>
        <trans-unit id="4888046c30ec3c0e823a22287f94fe792cc1cee3" translate="yes" xml:space="preserve">
          <source>Determine if 'this' can be implicitly converted to type 'to'.</source>
          <target state="translated">'this'를 암시 적으로 'to'유형으로 변환 할 수 있는지 판별하십시오.</target>
        </trans-unit>
        <trans-unit id="9a6a487846cd439c760b867647167d0a43c8efda" translate="yes" xml:space="preserve">
          <source>Determine if 'this' has complete base class information. This is used to detect forward references in covariant overloads.</source>
          <target state="translated">'this'에 완전한 기본 클래스 정보가 있는지 판별하십시오. 공변량 과부하에서 순방향 참조를 감지하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="270a5778fa851b2c65d873ec35c4d21e8814dc94" translate="yes" xml:space="preserve">
          <source>Determine if 'this' is a base class of cd.</source>
          <target state="translated">'this'가 cd의 기본 클래스인지 판별하십시오.</target>
        </trans-unit>
        <trans-unit id="2fc64d96936ef03185e0f208f0407d2013e22a77" translate="yes" xml:space="preserve">
          <source>Determine if 'this' is a base class of cd. (Actually, if it is an interface supported by cd)</source>
          <target state="translated">'this'가 cd의 기본 클래스인지 판별하십시오. (실제로 cd가 지원하는 인터페이스 인 경우)</target>
        </trans-unit>
        <trans-unit id="1aabd0fe13df1f7a6451f2d0f8cb8e6f3ac45ccb" translate="yes" xml:space="preserve">
          <source>Determine if 'this' is a base class of cd. This is used to detect circular inheritance only.</source>
          <target state="translated">'this'가 cd의 기본 클래스인지 판별하십시오. 순환 상속 만 감지하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f1f9c46d3d7b73954da02f8483e442b459949365" translate="yes" xml:space="preserve">
          <source>Determine if 'this' overrides fd. Return !=0 if it does.</source>
          <target state="translated">'this'가 fd를 대체하는지 판별하십시오. 그렇다면! = 0을 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="d98d667440fab25729ff393e6749fc6bc7c803a8" translate="yes" xml:space="preserve">
          <source>Determine if &lt;code&gt;this&lt;/code&gt; has a lifetime that lasts past the destruction of &lt;code&gt;v&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; &lt;code&gt;v&lt;/code&gt; 의 파괴 이후 지속되는 수명 이 있는지 확인</target>
        </trans-unit>
        <trans-unit id="9deaf7e3761824d3a560f3a002c9cfc9bbdf30a8" translate="yes" xml:space="preserve">
          <source>Determine if &lt;code&gt;this&lt;/code&gt; is available by walking up the enclosing scopes until a function is found.</source>
          <target state="translated">함수가 발견 될 때까지 둘러싸는 범위를 걸어서 &lt;code&gt;this&lt;/code&gt; 사용 가능한지 판별하십시오 .</target>
        </trans-unit>
        <trans-unit id="9e7fe93e32fcd42c1ea43251fdd4c08fd9a92cb2" translate="yes" xml:space="preserve">
          <source>Determine if Expression has any side effects.</source>
          <target state="translated">Expression에 부작용이 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="f8e1b84bee581482cfd7496a29be083631594f1c" translate="yes" xml:space="preserve">
          <source>Determine if a &lt;code&gt;this&lt;/code&gt; is needed to access &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 에 액세스 &lt;code&gt;d&lt;/code&gt; 결정하십시오 d .</target>
        </trans-unit>
        <trans-unit id="378e53b0c9705af12aa3d20a3dfea2de180d3964" translate="yes" xml:space="preserve">
          <source>Determine if a database is read-only</source>
          <target state="translated">데이터베이스가 읽기 전용인지 확인</target>
        </trans-unit>
        <trans-unit id="fad2fb7deeb5e3b2b95e75834d1bd3d75cd9c9b5" translate="yes" xml:space="preserve">
          <source>Determine if a symbol has a given &lt;a href=&quot;https://dlang.org/spec/attribute.html#uda&quot;&gt;user-defined attribute&lt;/a&gt;.</source>
          <target state="translated">심볼에 지정된 &lt;a href=&quot;https://dlang.org/spec/attribute.html#uda&quot;&gt;사용자 정의 속성&lt;/a&gt; 이 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="49b7cd6a540b1533843dadd565bc412266929ade" translate="yes" xml:space="preserve">
          <source>Determine if an enclosed &lt;code&gt;break&lt;/code&gt; would apply to this statement, such as if it is a loop or switch statement.</source>
          <target state="translated">밀폐 여부를 결정 &lt;code&gt;break&lt;/code&gt; 등이 루프 또는 스위치 문 경우로,이 사항에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="fe4f7fc039e88d4d60f26ff9bde9881e60eed3ee" translate="yes" xml:space="preserve">
          <source>Determine if an enclosed &lt;code&gt;continue&lt;/code&gt; would apply to this statement, such as if it is a loop statement.</source>
          <target state="translated">루프 명령문과 같이 동봉 된 &lt;code&gt;continue&lt;/code&gt; 이이 명령문에 적용 되는지 판별하십시오 .</target>
        </trans-unit>
        <trans-unit id="7df92a453270a0ff75e532f40d676ac1a1b29c5c" translate="yes" xml:space="preserve">
          <source>Determine if converting 'this' to 'to' is an identity operation, a conversion to const operation, or the types aren't the same.</source>
          <target state="translated">'this'를 'to'로 변환하는 것이 항등 연산, const 연산으로 변환 또는 유형이 다른지 판별하십시오.</target>
        </trans-unit>
        <trans-unit id="7bb85eefd3529fbadfd10c398a5f02000661a8a5" translate="yes" xml:space="preserve">
          <source>Determine if enum is a special one.</source>
          <target state="translated">열거 형이 특수한지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="0be17bface398896e6fbb5e6eeae1cd6a535fed0" translate="yes" xml:space="preserve">
          <source>Determine if function is a builtin one that we can evaluate at compile time.</source>
          <target state="translated">함수가 컴파일 타임에 평가할 수있는 내장 함수인지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="98a5ca1cdf3c0ffd4595f295d0cd487fbda95cf5" translate="yes" xml:space="preserve">
          <source>Determine if function is a non-static member function that has an implicit 'this' expression.</source>
          <target state="translated">함수가 내재적 인 'this'표현식이있는 비 정적 멤버 함수인지 판별하십시오.</target>
        </trans-unit>
        <trans-unit id="ed50069e8eef8cb717d09f426afa76da9625f4d4" translate="yes" xml:space="preserve">
          <source>Determine if function needs a static frame pointer.</source>
          <target state="translated">함수에 정적 프레임 포인터가 필요한지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="9ac7fdfd8c90918c14e542343cc9f9687a8d9198" translate="yes" xml:space="preserve">
          <source>Determine if function's variables are referenced by a function nested within it.</source>
          <target state="translated">함수의 변수가 그 안에 중첩 된 함수에 의해 참조되는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="cfc2ffe7ef218b7a4686596124702195d226e9be" translate="yes" xml:space="preserve">
          <source>Determine if it is @safe to cast e from tfrom to tto.</source>
          <target state="translated">e를 tfrom에서 tto로 캐스팅하는 것이 @safe인지 판별하십시오.</target>
        </trans-unit>
        <trans-unit id="3f355a69378df7ca91f6d2fd1bab608b14d6b776" translate="yes" xml:space="preserve">
          <source>Determine if operands of binary op can be reversed to fit operator overload.</source>
          <target state="translated">연산자 오버로드에 맞게 이진 op의 피연산자를 뒤집을 수 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="be30b8b7412fc422b2330bdf9c0a92a776e5ce0e" translate="yes" xml:space="preserve">
          <source>Determine if p points to the rest of an identifier.</source>
          <target state="translated">p가 나머지 식별자를 가리키는 지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="8e5281a6c7319e91a2189a41c2ef29a176db9e6a" translate="yes" xml:space="preserve">
          <source>Determine if p points to the start of an identifier.</source>
          <target state="translated">p가 식별자의 시작을 가리키는 지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="316b506f6acfc382426ee0a988f166b0b6290256" translate="yes" xml:space="preserve">
          <source>Determine if parameter is a lazy array of delegates. If so, return the return type of those delegates. If not, return NULL.</source>
          <target state="translated">매개 변수가 지연 배열의 지연인지 판별하십시오. 그렇다면 해당 델리게이트의 리턴 유형을 리턴하십시오. 그렇지 않으면 NULL을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="cde324315a08ff1fbf62286d3c4e66f069818380" translate="yes" xml:space="preserve">
          <source>Determine if path is absolute.</source>
          <target state="translated">경로가 절대인지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="95b5299a192aa44d7a560f633dc8b34f81756716" translate="yes" xml:space="preserve">
          <source>Determine if slot 0 of the vtbl[] is reserved for something else. For class objects, yes, this is where the ClassInfo ptr goes. For COM interfaces, no. For non-COM interfaces, yes, this is where the Interface ptr goes.</source>
          <target state="translated">vtbl []의 슬롯 0이 다른 것으로 예약되어 있는지 확인하십시오. 클래스 객체의 경우 예, 여기에서 ClassInfo ptr이 이동합니다. COM 인터페이스의 경우 아니요. COM이 아닌 인터페이스의 경우 인터페이스 ptr이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="d6020afb22c7f7860bdfff6e4d49cee5acd1140e" translate="yes" xml:space="preserve">
          <source>Determine if slot 0 of the vtbl[] is reserved for something else. For class objects, yes, this is where the classinfo ptr goes. For COM interfaces, no. For non-COM interfaces, yes, this is where the Interface ptr goes.</source>
          <target state="translated">vtbl []의 슬롯 0이 다른 것으로 예약되어 있는지 확인하십시오. 클래스 객체의 경우 예, 여기에서 classinfo ptr이 이동합니다. COM 인터페이스의 경우 아니요. COM이 아닌 인터페이스의 경우 인터페이스 ptr이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f2c73dfba48a96e7f07a8203d457d63f496cd2f8" translate="yes" xml:space="preserve">
          <source>Determine if string is a valid Identifier.</source>
          <target state="translated">문자열이 유효한 식별자인지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="e40c18902c112b083f5b1bec1e5285cd185cca5e" translate="yes" xml:space="preserve">
          <source>Determine if struct is POD (Plain Old Data).</source>
          <target state="translated">struct가 POD (Plain Old Data)인지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="be392e8a57bd5dab891b2efd8f733e73d8ab6f6a" translate="yes" xml:space="preserve">
          <source>Determine if sym is the 'primary' destructor, that is, the most-aggregate destructor (the one that is defined as _xdtor)</source>
          <target state="translated">sym이 '기본'소멸자, 즉 가장 집계 된 소멸자 (_xdtor로 정의 된 소멸자)인지 판별하십시오.</target>
        </trans-unit>
        <trans-unit id="7bff0244a23527db485143f875cdc64b133c0e61" translate="yes" xml:space="preserve">
          <source>Determine if t is a struct that has destructor.</source>
          <target state="translated">t가 소멸자를 갖는 구조 체인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="2217bce6f22486903bfc5b61c828563f3e5a8066" translate="yes" xml:space="preserve">
          <source>Determine if t is a struct that has postblit.</source>
          <target state="translated">t가 포스트 블리트가있는 구조 체인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="c3729f2949c876b2a955a596117188b2288de9c2" translate="yes" xml:space="preserve">
          <source>Determine if template instance is really a template function, and that template function needs to infer types from the function arguments.</source>
          <target state="translated">템플릿 인스턴스가 실제로 템플릿 함수인지 확인하고 해당 템플릿 함수는 함수 인수에서 유형을 유추해야합니다.</target>
        </trans-unit>
        <trans-unit id="fce7a1efc6ef0138c637fced312783604e90c9f1" translate="yes" xml:space="preserve">
          <source>Determine if the call of f, or function type or delegate type t1, has any side effects.</source>
          <target state="translated">f의 호출 또는 함수 유형 또는 델리게이트 유형 t1에 부작용이 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="736a23aad28d59a837cc0c93fc2977a227e17fff" translate="yes" xml:space="preserve">
          <source>Determine if this symbol is only one.</source>
          <target state="translated">이 기호가 하나인지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="2fc16966011442d5b9df75d427210aafdacf2a82" translate="yes" xml:space="preserve">
          <source>Determine if too expensive to inline.</source>
          <target state="translated">인라인하기에 비용이 너무 많이 드는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="e99f6262aa8845662506231314521688e8fe7455" translate="yes" xml:space="preserve">
          <source>Determine if type t can be indexed or sliced given that it is not an aggregate with operator overloads.</source>
          <target state="translated">t가 연산자 오버로드가있는 집계가 아닌 경우 유형 t를 인덱스하거나 슬라이스 할 수 있는지 판별하십시오.</target>
        </trans-unit>
        <trans-unit id="c4724821c4fcf2478ae2d717f41aa91b34098b11" translate="yes" xml:space="preserve">
          <source>Determine if type t is copyable.</source>
          <target state="translated">유형 t를 복사 할 수 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="a624a8e85f794e2b9a00a2c6869bf76e1171cc66" translate="yes" xml:space="preserve">
          <source>Determine if we need to generate an instance of ModuleInfo for this Module.</source>
          <target state="translated">이 모듈에 대해 ModuleInfo 인스턴스를 생성해야하는지 결정하십시오.</target>
        </trans-unit>
        <trans-unit id="479aaf7dde32be79091b845d2f8777260b360556" translate="yes" xml:space="preserve">
          <source>Determine if zero bits need to be copied for this backend type</source>
          <target state="translated">이 백엔드 유형에 대해 0 비트를 복사해야하는지 결정</target>
        </trans-unit>
        <trans-unit id="24b28aafb862370e9bc9d9c3dd0d659eb032aa2f" translate="yes" xml:space="preserve">
          <source>Determine lexical level difference from &lt;code&gt;this&lt;/code&gt; to nested function &lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 함수와 중첩 함수 &lt;code&gt;fd&lt;/code&gt; 사이의 어휘 레벨 차이를 판별하십시오 .</target>
        </trans-unit>
        <trans-unit id="9747c00345ecadf5845fc493b2735fcff266bb22" translate="yes" xml:space="preserve">
          <source>Determine lexical level difference from &lt;code&gt;this&lt;/code&gt; to nested function &lt;code&gt;fd&lt;/code&gt;. Issue error if &lt;code&gt;this&lt;/code&gt; cannot call &lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 함수와 중첩 함수 &lt;code&gt;fd&lt;/code&gt; 사이의 어휘 레벨 차이를 판별하십시오 . 문제 오류 경우 &lt;code&gt;this&lt;/code&gt; 호출 할 수 없습니다 &lt;code&gt;fd&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ed3f29692e2dc50798983bef609614ff2b74448a" translate="yes" xml:space="preserve">
          <source>Determine mask of ways that a statement can exit.</source>
          <target state="translated">명령문이 종료 될 수있는 방법의 마스크를 판별하십시오.</target>
        </trans-unit>
        <trans-unit id="df7ed67f9ac0d29143623306e6d91138f580d975" translate="yes" xml:space="preserve">
          <source>Determine number of arguments, folding in tuples.</source>
          <target state="translated">튜플로 접는 인수의 수를 결정하십시오.</target>
        </trans-unit>
        <trans-unit id="9c1d788a86541433216b1cbe6cd800e359230a01" translate="yes" xml:space="preserve">
          <source>Determine number of entries in associative array.</source>
          <target state="translated">연관 배열의 항목 수를 결정하십시오.</target>
        </trans-unit>
        <trans-unit id="eb3a7a28aadc6ac9a24522fb1facbfd2499e9ebf" translate="yes" xml:space="preserve">
          <source>Determine partial specialization order of 'this' vs g. This is very similar to TemplateDeclaration::leastAsSpecialized().</source>
          <target state="translated">'this'대 g의 부분 특수화 순서를 결정하십시오. 이것은 TemplateDeclaration :: leastAsSpecialized ()와 매우 유사합니다.</target>
        </trans-unit>
        <trans-unit id="07fd5119c1c381fac5e9c06cace35914173ad2f6" translate="yes" xml:space="preserve">
          <source>Determine partial specialization order of 'this' vs td2.</source>
          <target state="translated">'this'대 td2의 부분 특수화 순서를 결정하십시오.</target>
        </trans-unit>
        <trans-unit id="e4a0c05f58058b8b1a23ad73ba5dbb12b1000809" translate="yes" xml:space="preserve">
          <source>Determine properties of an elem. EBIN binary node? EUNA unary node? EOP operator node (unary or binary)? ERTOL right to left evaluation (left to right is default) Eunambig unambiguous definition elem?</source>
          <target state="translated">요소의 속성을 결정하십시오. EBIN 바이너리 노드? EUNA 단항 노드? EOP 연산자 노드 (단항 또는 이진)? ERTOL 오른쪽에서 왼쪽으로 평가 (왼쪽에서 오른쪽으로 기본 설정) Eunambig 명확한 정의 elem?</target>
        </trans-unit>
        <trans-unit id="ec90df507605c588bbd907da1813711d1abfd953" translate="yes" xml:space="preserve">
          <source>Determine return style of function - whether in registers or through a hidden pointer to the caller's stack.</source>
          <target state="translated">레지스터에서 또는 호출자의 스택에 대한 숨겨진 포인터를 통해 함수의 반환 스타일을 결정하십시오.</target>
        </trans-unit>
        <trans-unit id="cb1ac0fdb6de60b29d0b485cddbfcca58a990ed6" translate="yes" xml:space="preserve">
          <source>Determine the cost of evaluating an operator.</source>
          <target state="translated">운영자 평가 비용을 결정하십시오.</target>
        </trans-unit>
        <trans-unit id="2a3db1976e3076dd125c7bfa90f65d53dd96bce3" translate="yes" xml:space="preserve">
          <source>Determine the linkage attribute of the function.</source>
          <target state="translated">함수의 연계 속성을 결정하십시오.</target>
        </trans-unit>
        <trans-unit id="4620ec5933c4cce452d632eaafeadcbe437b16d9" translate="yes" xml:space="preserve">
          <source>Determine the right symbol to look up an associative array element.</source>
          <target state="translated">연관 배열 요소를 찾을 올바른 기호를 결정하십시오.</target>
        </trans-unit>
        <trans-unit id="96ef7480200f4b221065970ed3935ac957722606" translate="yes" xml:space="preserve">
          <source>Determine the size a value of type &lt;code&gt;t&lt;/code&gt; will be when it is passed on the function parameter stack.</source>
          <target state="translated">함수 매개 변수 스택에 전달 될 때 &lt;code&gt;t&lt;/code&gt; 유형의 값 크기를 결정하십시오 .</target>
        </trans-unit>
        <trans-unit id="2ce82109b0eb275737e6626cc738e09d8757df3f" translate="yes" xml:space="preserve">
          <source>Determine things about relational operators.</source>
          <target state="translated">관계 연산자에 대한 사항을 결정하십시오.</target>
        </trans-unit>
        <trans-unit id="445eda42e7c74464d44ccd1620a2befb21ab9620" translate="yes" xml:space="preserve">
          <source>Determine whether an 'out' contract is declared inside the given function or any of its overrides.</source>
          <target state="translated">지정된 함수 또는 해당 대체 내에서 'out'계약이 선언되는지 판별하십시오.</target>
        </trans-unit>
        <trans-unit id="be63ebb9b04e4d8d615eca65e8535b3769ebecf8" translate="yes" xml:space="preserve">
          <source>Determine whether the given file (or directory) exists.</source>
          <target state="translated">주어진 파일 (또는 디렉토리)이 존재하는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="bfdac9bb32932094f4b0f47419554e0bafa2389e" translate="yes" xml:space="preserve">
          <source>Determine which Module a Dsymbol is in, as far as access rights go.</source>
          <target state="translated">액세스 권한이있는 한 Dsymbol이있는 모듈을 결정하십시오.</target>
        </trans-unit>
        <trans-unit id="723620b57dc29a2943525ce74b11aab59b3b93b8" translate="yes" xml:space="preserve">
          <source>Determine which Module a Dsymbol is in.</source>
          <target state="translated">기호가있는 모듈을 결정하십시오.</target>
        </trans-unit>
        <trans-unit id="3834ecc3aa1dad92da7b3401ec6af20392309d9e" translate="yes" xml:space="preserve">
          <source>Determines additional argument types for makeTupleForeach.</source>
          <target state="translated">makeTupleForeach에 대한 추가 인수 유형을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="cbda00b791b63020eacb383579930a0158c3cc64" translate="yes" xml:space="preserve">
          <source>Determines if &lt;code&gt;f&lt;/code&gt; is a function that requires a context pointer.</source>
          <target state="translated">만약 결정 &lt;code&gt;f&lt;/code&gt; 는 컨텍스트 포인터를 필요로하는 함수이다.</target>
        </trans-unit>
        <trans-unit id="2a8678bb77c2872e0adc65687e74251cccabf377" translate="yes" xml:space="preserve">
          <source>Determines if a TemplateInstance will need a nested generation of the TemplateDeclaration. Sets enclosing property if so, and returns != 0;</source>
          <target state="translated">TemplateInstance에 중첩 된 TemplateDeclaration 생성이 필요한지 여부를 결정합니다. 포함 된 속성을 설정하고! = 0을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c10a7e5581a17107fb508dd7d48da75fd37b44b8" translate="yes" xml:space="preserve">
          <source>Determines if x is &amp;plusmn;&amp;infin;.</source>
          <target state="translated">x가 &amp;plusmn; &amp;infin;인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="92eac75e8cbc6049ad92262b93532f4eee6c60d1" translate="yes" xml:space="preserve">
          <source>Determines if x is NaN.</source>
          <target state="translated">x가 NaN인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="af8200a58cdb4cd837802e4514a7145ed07fb505" translate="yes" xml:space="preserve">
          <source>Determines if x is finite.</source>
          <target state="translated">x가 유한인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="eaf6a6dd33d39ca2f85c693e18a10fe4ec497406" translate="yes" xml:space="preserve">
          <source>Determines if x is normalized.</source>
          <target state="translated">x가 정규화되는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="1530bf626bae0f80da40842bbc7b8e58caf37370" translate="yes" xml:space="preserve">
          <source>Determines if x is subnormal.</source>
          <target state="translated">x가 비정규인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="03a2ac6420b6f24c17fedf5d0c29dfeaa05227a0" translate="yes" xml:space="preserve">
          <source>Determines the behavior for when an error is detected.</source>
          <target state="translated">오류가 감지 될 때의 동작을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="291cdf30bdc4d2ceba2bd008be64b599519e85cc" translate="yes" xml:space="preserve">
          <source>Determines the boundary between valid and invalid addresses. Status codes above this number will be returned as-is, status codes below will be returned as EmailStatusCode.valid. Thus the calling program can simply look for EmailStatusCode.valid if it is only interested in whether an address is valid or not. The errorLevel will determine how &quot;picky&quot; isEmail() is about the address.  If omitted or passed as EmailStatusCode.none then isEmail() will not perform any finer grained error checking and an address is either considered valid or not. Email status code will either be EmailStatusCode.valid or EmailStatusCode.error.</source>
          <target state="translated">유효한 주소와 유효하지 않은 주소 사이의 경계를 결정합니다. 이 숫자보다 큰 상태 코드는있는 그대로 반환되고 아래 상태 코드는 EmailStatusCode.valid로 반환됩니다. 따라서 호출 프로그램은 주소가 유효한지 여부에만 관심이있는 경우 EmailStatusCode.valid를 찾을 수 있습니다. errorLevel은 &quot;picky&quot;isEmail ()이 주소에 관한 방법을 결정합니다. EmailStatusCode.none으로 생략되거나 전달 된 경우 isEmail ()은보다 세밀한 오류 검사를 수행하지 않으며 주소는 유효한 것으로 간주됩니다. 이메일 상태 코드는 EmailStatusCode.valid 또는 EmailStatusCode.error입니다.</target>
        </trans-unit>
        <trans-unit id="b08723c8d029e0808aad92158ef8f7cd9d5154cb" translate="yes" xml:space="preserve">
          <source>Determines the path to the current user's preferred command interpreter.</source>
          <target state="translated">현재 사용자가 선호하는 명령 해석기의 경로를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="9bd7ecbe5ae3fa4321dce2a69d3c85c5d1fb3689" translate="yes" xml:space="preserve">
          <source>Determines the return type of makeTupleForeach.</source>
          <target state="translated">makeTupleForeach의 반환 유형을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="8a2c0e82a4c82cf25e46b967e56429fa643e7957" translate="yes" xml:space="preserve">
          <source>Determines what kind of variadic parameters function has.</source>
          <target state="translated">함수에 어떤 종류의 변수가 있는지 결정합니다.</target>
        </trans-unit>
        <trans-unit id="d994ce5a973e87c8a98d2fc2edd4cd117663f111" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;T&lt;/code&gt; has its own context pointer. &lt;code&gt;T&lt;/code&gt; must be either &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;struct&lt;/code&gt;, or &lt;code&gt;union&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 에 자체 컨텍스트 포인터가 있는지 확인합니다 . &lt;code&gt;T&lt;/code&gt; 는 &lt;code&gt;class&lt;/code&gt; , &lt;code&gt;struct&lt;/code&gt; 또는 &lt;code&gt;union&lt;/code&gt; 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="79dcffbdac2699b8d56325ec6cc56e1b3aa1778e" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;T&lt;/code&gt; is a class nested inside another class and that &lt;code&gt;T.outer&lt;/code&gt; is the implicit reference to the outer class (i.e. &lt;code&gt;outer&lt;/code&gt; has not been used as a field or method name)</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 다른 클래스 내에 중첩 된 클래스인지 &lt;code&gt;T.outer&lt;/code&gt; 가 외부 클래스에 대한 암시 적 참조 인지 판별합니다 (즉, &lt;code&gt;outer&lt;/code&gt; 는 필드 또는 메소드 이름으로 사용되지 않음).</target>
        </trans-unit>
        <trans-unit id="528e814e2b44f7d34f9985d0baf099b0e6fea047" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;T&lt;/code&gt; or any of its representation types have a context pointer.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 또는 해당 표현 유형에 컨텍스트 포인터가 있는지 여부를 결정합니다 .</target>
        </trans-unit>
        <trans-unit id="01ed6a908c8924bcb05f62a2cc826cfe4cd7bb23" translate="yes" xml:space="preserve">
          <source>Determines whether a path is absolute or not.</source>
          <target state="translated">경로가 절대인지 여부를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="dcfeda9a254a089d6294c953e0491b65b7ef276d" translate="yes" xml:space="preserve">
          <source>Determines whether a path starts at a root directory.</source>
          <target state="translated">루트 디렉토리에서 경로가 시작되는지 여부를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="f4edc6bd929f6c3bbc4b5e9c6a10714bafa42804" translate="yes" xml:space="preserve">
          <source>Determines whether a symbol represents a module or package (Used as a helper for is(type == module) and is(type == package))</source>
          <target state="translated">기호가 모듈 또는 패키지를 나타내는 지 판별합니다 (is (type == module) 및 is (type == package)의 도우미로 사용됨)</target>
        </trans-unit>
        <trans-unit id="1c5c488163b93892028eaf2415c0fd1650901e2a" translate="yes" xml:space="preserve">
          <source>Determines whether the element for which the given predicate is true should be included in the resulting range (&lt;code&gt;No.openRight&lt;/code&gt;), or not (&lt;code&gt;Yes.openRight&lt;/code&gt;).</source>
          <target state="translated">주어진 술어가 참인 요소가 결과 범위에 포함 &lt;code&gt;No.openRight&lt;/code&gt; ( No.openRight ) 또는 포함되지 &lt;code&gt;Yes.openRight&lt;/code&gt; ( Yes.openRight )를 판별 합니다.</target>
        </trans-unit>
        <trans-unit id="543cbcdd8099f7a0b4e482266421c33c837a5831" translate="yes" xml:space="preserve">
          <source>Determines whether the function type &lt;code&gt;F&lt;/code&gt; is covariant with &lt;code&gt;G&lt;/code&gt;, i.e., functions of the type &lt;code&gt;F&lt;/code&gt; can override ones of the type &lt;code&gt;G&lt;/code&gt;.</source>
          <target state="translated">함수 타입 여부를 결정 &lt;code&gt;F&lt;/code&gt; 가 와 공변 인 &lt;code&gt;G&lt;/code&gt; , 즉, 유형의 기능 &lt;code&gt;F&lt;/code&gt; 는 유형의 사람 무시할 수 있습니다 &lt;code&gt;G&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="857bda4d26bbce771887b7d005e412fd90efa18b" translate="yes" xml:space="preserve">
          <source>Determines whether the given character is a directory separator.</source>
          <target state="translated">주어진 문자가 디렉토리 분리 자인지 판별합니다.</target>
        </trans-unit>
        <trans-unit id="d36b5cd65a97672003a0ec9584d46cf9f414ebf5" translate="yes" xml:space="preserve">
          <source>Determines whether the type &lt;code&gt;S&lt;/code&gt; can be copied. If a type cannot be copied, then code such as &lt;code&gt;MyStruct x; auto y = x;&lt;/code&gt; will fail to compile. Copying for structs can be disabled by using &lt;code&gt;@disable this(this)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;S&lt;/code&gt; 유형을 복사 할 수 있는지 여부를 결정합니다 . 유형을 복사 할 수없는 경우 &lt;code&gt;MyStruct x; auto y = x;&lt;/code&gt; 와 같은 코드 ; 자동 y = x; 컴파일에 실패합니다. &lt;code&gt;@disable this(this)&lt;/code&gt; 사용하여 구조체 복사를 비활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="061572172fa8b502ac5a30678cb22158f90cac0c" translate="yes" xml:space="preserve">
          <source>Determines whether to sort the index by the elements they refer to.</source>
          <target state="translated">참조하는 요소를 기준으로 색인을 정렬할지 여부를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="c3376a9770679682419b8a2b1d090a087ba2468b" translate="yes" xml:space="preserve">
          <source>Devanagari</source>
          <target state="translated">Devanagari</target>
        </trans-unit>
        <trans-unit id="f1d0b00583cf18e4f46c6f6a49928b18ac563eb8" translate="yes" xml:space="preserve">
          <source>Devanagari Extended</source>
          <target state="translated">데바 나가리 확장</target>
        </trans-unit>
        <trans-unit id="f2b6aad897453084e39c5b6cb348101052d037d6" translate="yes" xml:space="preserve">
          <source>Device control 1</source>
          <target state="translated">장치 제어 1</target>
        </trans-unit>
        <trans-unit id="c59c390789ea42b9e83bd6e9a087f7e7e19830c2" translate="yes" xml:space="preserve">
          <source>Device control 2</source>
          <target state="translated">장치 제어 2</target>
        </trans-unit>
        <trans-unit id="03d032304208a286ab590e6e0412ba2f32473099" translate="yes" xml:space="preserve">
          <source>Device control 3</source>
          <target state="translated">장치 제어 3</target>
        </trans-unit>
        <trans-unit id="99e66b66a02a1ee7e99342652890cd1ca85ebf30" translate="yes" xml:space="preserve">
          <source>Device control 4</source>
          <target state="translated">장치 제어 4</target>
        </trans-unit>
        <trans-unit id="dd45a760f4e395483865648f31fd4527b653a0e6" translate="yes" xml:space="preserve">
          <source>Dg &lt;code&gt;dg&lt;/code&gt;</source>
          <target state="translated">DG &lt;code&gt;dg&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="df416cb44acdc7ff67e4ace824b92780b273ed0c" translate="yes" xml:space="preserve">
          <source>Diacritic</source>
          <target state="translated">Diacritic</target>
        </trans-unit>
        <trans-unit id="2af2a931f99b70f76b1b6ecd5b006a779a09475c" translate="yes" xml:space="preserve">
          <source>Diagnosed incompatibilities are:</source>
          <target state="translated">진단 된 비 호환성은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e3846175845cdb013139d3c78211ff1af2ada56b" translate="yes" xml:space="preserve">
          <source>Diagnostic reporter which prints the diagnostic messages to stderr.</source>
          <target state="translated">진단 메시지를 stderr에 인쇄하는 진단 리포터.</target>
        </trans-unit>
        <trans-unit id="48b17d41a887daf56fbe376e53c33e4334d2b37f" translate="yes" xml:space="preserve">
          <source>DiagnosticReporter &lt;code&gt;diagnosticReporter&lt;/code&gt;</source>
          <target state="translated">DiagnosticReporter &lt;code&gt;diagnosticReporter&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7ca05e4035af5bf6a8530fc91b666a55254f9cf3" translate="yes" xml:space="preserve">
          <source>DiagnosticReporting &lt;code&gt;useDeprecated&lt;/code&gt;</source>
          <target state="translated">진단 &lt;code&gt;useDeprecated&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="abfa2f54c9cbb66bf41f52c2e1c10ea7cf7fc1c0" translate="yes" xml:space="preserve">
          <source>Dictates directory spanning policy for dirEntries (see below).</source>
          <target state="translated">dirEntries에 대한 디렉토리 범위 정책을 결정합니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="e6576da21cb057e550894290bd7fc9e18fb25046" translate="yes" xml:space="preserve">
          <source>Dictates how iteration in a &lt;a href=&quot;#zip&quot;&gt;&lt;code&gt;zip&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#lockstep&quot;&gt;&lt;code&gt;lockstep&lt;/code&gt;&lt;/a&gt; should stop. By default stop at the end of the shortest of all ranges.</source>
          <target state="translated">&lt;a href=&quot;#zip&quot;&gt; &lt;code&gt;zip&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#lockstep&quot;&gt; &lt;code&gt;lockstep&lt;/code&gt; &lt;/a&gt; 에서 반복 이 중지되는 방법을 결정합니다. 기본적으로 모든 범위 중 가장 짧은 끝에서 멈 춥니 다.</target>
        </trans-unit>
        <trans-unit id="5868229c99f342304e88e7ab77113b5de8a9b34d" translate="yes" xml:space="preserve">
          <source>Differences from the Kernighan-Ritchie allocator:</source>
          <target state="translated">Kernighan-Ritchie 할당 자와의 차이점 :</target>
        </trans-unit>
        <trans-unit id="00d0138195f4b82f95ed866a592bbdfe8acc72f4" translate="yes" xml:space="preserve">
          <source>Different compiler settings, optimization settings, and inlining settings can affect opportunities for constant folding, therefore the results of floating point calculations may differ depending on those settings.</source>
          <target state="translated">다른 컴파일러 설정, 최적화 설정 및 인라인 설정은 지속적인 폴딩 기회에 영향을 줄 수 있으므로 부동 소수점 계산 결과는 해당 설정에 따라 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e0f5b6944c2cb56e5841bec8be19999cd4103ab2" translate="yes" xml:space="preserve">
          <source>Different data locks for a single share</source>
          <target state="translated">단일 공유를위한 다양한 데이터 잠금</target>
        </trans-unit>
        <trans-unit id="e8b45432740c6a6295216b76e3f34067af96d73b" translate="yes" xml:space="preserve">
          <source>Different from other AttribDeclaration subclasses, include() call requires the completion of addMember and setScope phases.</source>
          <target state="translated">다른 AttribDeclaration 서브 클래스와 달리 include () 호출은 addMember 및 setScope 단계를 완료해야합니다.</target>
        </trans-unit>
        <trans-unit id="f5c695c1d733025cbaa13f8eaba5273501ba483e" translate="yes" xml:space="preserve">
          <source>Different lock access types</source>
          <target state="translated">다른 잠금 액세스 유형</target>
        </trans-unit>
        <trans-unit id="38c26e54dd81b5beb41841e49c13ad7a31bbab29" translate="yes" xml:space="preserve">
          <source>Different signals can be added to a class by naming the mixins.</source>
          <target state="translated">믹스 인의 이름을 지정하여 클래스에 다른 신호를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="41d219b83461231cfa58beb6fe7013a0c39674fb" translate="yes" xml:space="preserve">
          <source>Digamma function</source>
          <target state="translated">디 감마 기능</target>
        </trans-unit>
        <trans-unit id="47fdd58bee4dc86df2b978107102a22b9c44345b" translate="yes" xml:space="preserve">
          <source>Digest</source>
          <target state="translated">Digest</target>
        </trans-unit>
        <trans-unit id="e202731645b5903590a1721aec671ead010434dd" translate="yes" xml:space="preserve">
          <source>Digest with IE flavour</source>
          <target state="translated">IE 풍미로 소화</target>
        </trans-unit>
        <trans-unit id="347acdba548588bbd29c93b643717c5b619fc9dc" translate="yes" xml:space="preserve">
          <source>DigestType!H &lt;strong id=&quot;finish&quot;&gt;finish&lt;/strong&gt;();</source>
          <target state="translated">DigestType! H &lt;strong id=&quot;finish&quot;&gt;마감&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="7e055596d1a7dd6729a4ea844af3804a3000405b" translate="yes" xml:space="preserve">
          <source>DigestType!Hash &lt;strong id=&quot;digest&quot;&gt;digest&lt;/strong&gt;(Hash, Range)(auto ref Range range)</source>
          <target state="translated">&lt;strong id=&quot;digest&quot;&gt;다이제스트&lt;/strong&gt; 유형! 해시 &lt;strong id=&quot;digest&quot;&gt;다이제스트&lt;/strong&gt; (해시, 범위) (자동 참조 범위 범위)</target>
        </trans-unit>
        <trans-unit id="e3729bbf766b7afa198569d6497eb40e04441ade" translate="yes" xml:space="preserve">
          <source>DigestType!Hash &lt;strong id=&quot;digest&quot;&gt;digest&lt;/strong&gt;(Hash, T...)(scope const T data)</source>
          <target state="translated">&lt;strong id=&quot;digest&quot;&gt;다이제스트&lt;/strong&gt; 유형! 해시 &lt;strong id=&quot;digest&quot;&gt;다이제스트&lt;/strong&gt; (해시, T ...) (범위 const T 데이터)</target>
        </trans-unit>
        <trans-unit id="a62b295138ccc435d1119df6f358d56908f084eb" translate="yes" xml:space="preserve">
          <source>Digesting single bits (as opposed to bytes) is not implemented. This will be done as another template constraint helper (hasBitDigesting!T) and an additional interface (BitDigest)</source>
          <target state="translated">바이트와 ​​반대되는 단일 비트의 다이제스트는 구현되지 않습니다. 이것은 다른 템플릿 제약 도우미 (hasBitDigesting! T)와 추가 인터페이스 (BitDigest)로 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="bb3d49bc8e14b2dd94a418374cf376aa4e3689a1" translate="yes" xml:space="preserve">
          <source>Digests do not work in CTFE</source>
          <target state="translated">CTFE에서 다이제스트가 작동하지 않습니다</target>
        </trans-unit>
        <trans-unit id="3d267bf6104bc48ff02fae4aa1086207aeaf2f15" translate="yes" xml:space="preserve">
          <source>Digital Mars D (DMD)</source>
          <target state="translated">디지털 화성 D (DMD)</target>
        </trans-unit>
        <trans-unit id="860dec87a36aab409b5c7737ad322775f24b3873" translate="yes" xml:space="preserve">
          <source>Digital Mars's MAKE program can be notified that a program can accept long command lines via environment variables by preceding the rule line for the program with a *.</source>
          <target state="translated">Digital Mars의 MAKE 프로그램은 프로그램의 규칙 행 앞에 *를 붙여 환경 변수를 통해 긴 명령 행을 승인 할 수 있음을 알릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e2f6cb0f659da17abd54f5cdfc673931b59818ec" translate="yes" xml:space="preserve">
          <source>DigitalMars C runtime</source>
          <target state="translated">DigitalMars C 런타임</target>
        </trans-unit>
        <trans-unit id="62cefd338233e3a8f7eedd473ea4c0190b889a59" translate="yes" xml:space="preserve">
          <source>DigitalMars Cpp runtime</source>
          <target state="translated">DigitalMars Cpp 런타임</target>
        </trans-unit>
        <trans-unit id="0ceb1ec77714195da0fe4bcb3a48e59dc70dbfce" translate="yes" xml:space="preserve">
          <source>Dimension i.e. the number of native words backing this &lt;code&gt;BitArray&lt;/code&gt;.  Technically, this is the length of the underlying array storing bits, which is equal to &lt;code&gt;ceil(length / (size_t.sizeof * 8))&lt;/code&gt;, as bits are packed into &lt;code&gt;size_t&lt;/code&gt; units.</source>
          <target state="translated">차원, 즉이 &lt;code&gt;BitArray&lt;/code&gt; 를 지원하는 기본 단어의 수입니다 . 기술적으로 이것은 비트를 저장하는 기본 배열의 길이이며, 비트가 &lt;code&gt;size_t&lt;/code&gt; 단위 로 압축 &lt;code&gt;ceil(length / (size_t.sizeof * 8))&lt;/code&gt; 과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="3927412ea64e80f5a0cbe309d0aa4c42ecdc9065" translate="yes" xml:space="preserve">
          <source>Dingbats</source>
          <target state="translated">Dingbats</target>
        </trans-unit>
        <trans-unit id="759e0d815ae585fb8bac59addeabec46e631136b" translate="yes" xml:space="preserve">
          <source>DirEntry &lt;code&gt;de&lt;/code&gt;</source>
          <target state="translated">DirEntry &lt;code&gt;de&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="622c520ae1561df1c0e646d62ea55fd11213a490" translate="yes" xml:space="preserve">
          <source>Direction &lt;code&gt;dir&lt;/code&gt;</source>
          <target state="translated">방향 &lt;code&gt;dir&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1029544ae8b46287a52a74595462c217cf60a5a9" translate="yes" xml:space="preserve">
          <source>Directories</source>
          <target state="translated">Directories</target>
        </trans-unit>
        <trans-unit id="7f5cf49d5f14355579c48870159720b7e4cb8104" translate="yes" xml:space="preserve">
          <source>Directory matching callback called after the file (chunk) was downloaded, or skipped</source>
          <target state="translated">파일 (청크)을 다운로드하거나 건너 뛴 후 호출 된 디렉토리 일치 콜백</target>
        </trans-unit>
        <trans-unit id="62a1901037b83e3013b41d8cdfaeaf3b97e8ec0c" translate="yes" xml:space="preserve">
          <source>Directory matching callback called before downloading of an individual file (chunk) started</source>
          <target state="translated">개별 파일 (청크) 다운로드가 시작되기 전에 호출 된 디렉토리 일치 콜백</target>
        </trans-unit>
        <trans-unit id="c8ba486351bc5bc8f536c3684d649f6bba19fb09" translate="yes" xml:space="preserve">
          <source>Directs the call to either one of the &lt;code&gt;buckets&lt;/code&gt; allocators.</source>
          <target state="translated">&lt;code&gt;buckets&lt;/code&gt; 할당 자 중 하나에 통화를 보냅니다.</target>
        </trans-unit>
        <trans-unit id="673cf6ae82497c0bfb4b0257312c6ce0dff96771" translate="yes" xml:space="preserve">
          <source>Disable (mask) specific hardware exceptions. Multiple exceptions may be ORed together.</source>
          <target state="translated">특정 하드웨어 예외를 비활성화 (마스크)합니다. 여러 예외가 함께 OR 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="03145a3cc292c23bd2c39300c95f0daea5c2a86b" translate="yes" xml:space="preserve">
          <source>Disable GC collection cycles while that thread is active with &lt;a href=&quot;#disable&quot;&gt;&lt;code&gt;disable&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#enable&quot;&gt;&lt;code&gt;enable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#disable&quot;&gt; &lt;code&gt;disable&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#enable&quot;&gt; &lt;code&gt;enable&lt;/code&gt; 로&lt;/a&gt; 해당 스레드가 활성화되어있는 동안 GC 수집주기를 비활성화하십시오 .</target>
        </trans-unit>
        <trans-unit id="fc4db9a1df0ab57c1963989136455f78a06edbf2" translate="yes" xml:space="preserve">
          <source>Disable the Nagle algorithm for send coalescing</source>
          <target state="translated">전송 병합을위한 Nagle 알고리즘 비활성화</target>
        </trans-unit>
        <trans-unit id="0f18d15c436642bb1b6dc9007150b2e55250d957" translate="yes" xml:space="preserve">
          <source>Disables automatic garbage collections performed to minimize the process footprint. Collections may continue to occur in instances where the implementation deems necessary for correct program behavior, such as during an out of memory condition. This function is reentrant, but enable must be called once for each call to disable.</source>
          <target state="translated">프로세스 풋 프린트를 최소화하기 위해 수행 된 자동 가비지 콜렉션을 사용하지 않습니다. 구현이 메모리 부족 상태와 같은 올바른 프로그램 동작에 필요한 것으로 간주되는 경우 수집이 계속 발생할 수 있습니다. 이 기능은 재진입 가능하지만, 호출 할 때마다 enable을 한 번 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="4381e662a49e6eff28e950bf9b63b9397e0ff422" translate="yes" xml:space="preserve">
          <source>Disables sends and/or receives.</source>
          <target state="translated">보내기 및 / 또는 받기를 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="9a028268b53825265b1f96bf957d18423681846f" translate="yes" xml:space="preserve">
          <source>Disabling Array Bounds Checking</source>
          <target state="translated">배열 바운드 검사 비활성화</target>
        </trans-unit>
        <trans-unit id="92134947ba1f6ead2a7886f3c52a180f24e38c29" translate="yes" xml:space="preserve">
          <source>Disabling Default Struct Construction</source>
          <target state="translated">기본 구조 구성 비활성화</target>
        </trans-unit>
        <trans-unit id="2403aba30d80ac06cb16c5482b584bcc2fb8556f" translate="yes" xml:space="preserve">
          <source>Disabling exception will follow these rules:</source>
          <target state="translated">예외를 비활성화하면 다음 규칙을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="45b418f2ce93897cacff432a6407313616f0effc" translate="yes" xml:space="preserve">
          <source>Disabling struct postblit makes the object not copyable.</source>
          <target state="translated">struct postblit을 비활성화하면 객체를 복사 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="3dde1f923bce15988a141f95ecfb94c07dd719af" translate="yes" xml:space="preserve">
          <source>Disallow &lt;code&gt;@system&lt;/code&gt; asm statements.</source>
          <target state="translated">&lt;code&gt;@system&lt;/code&gt; asm 문을 허용하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="a58e3b7d7ec9e61c853624d42770760218e02be9" translate="yes" xml:space="preserve">
          <source>Disallowed Floating Point Transformations</source>
          <target state="translated">허용되지 않는 부동 소수점 변환</target>
        </trans-unit>
        <trans-unit id="95ae8922ce7ae02dfbd1162984b468693f6a563b" translate="yes" xml:space="preserve">
          <source>Disallowing overlapping makes it possible for more aggressive parallel code optimizations than possible with the serial semantics of C.</source>
          <target state="translated">중복을 허용하지 않으면 C의 직렬 의미론에서 가능한 것보다 더 적극적인 병렬 코드 최적화가 가능합니다.</target>
        </trans-unit>
        <trans-unit id="3b145cd26efec2371fbaebd6e59da0288cdb70a4" translate="yes" xml:space="preserve">
          <source>Disclaimer: The random number generators and API provided in this module are not designed to be cryptographically secure, and are therefore unsuitable for cryptographic or security-related purposes such as generating authentication tokens or network sequence numbers. For such needs, please use a reputable cryptographic library instead.</source>
          <target state="translated">고지 사항 :이 모듈에서 제공되는 난수 생성기 및 API는 암호화 보안을 위해 설계되지 않았으므로 인증 토큰 또는 네트워크 시퀀스 번호 생성과 같은 암호화 또는 보안 관련 목적에 적합하지 않습니다. 이러한 요구에 대해서는 평판이 좋은 암호화 라이브러리를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="07ce2fc6e101a8eec909001f12bbd0963c513e2d" translate="yes" xml:space="preserve">
          <source>Disconnect all the slots.</source>
          <target state="translated">모든 슬롯을 분리하십시오.</target>
        </trans-unit>
        <trans-unit id="696c96f0d428c1560921179cb1efd5002041994a" translate="yes" xml:space="preserve">
          <source>Discriminant for which kind of initializer</source>
          <target state="translated">이니셜 라이저 종류 판별 기</target>
        </trans-unit>
        <trans-unit id="3fd00c73c6b0c2fdb2f52597de39a96356605fab" translate="yes" xml:space="preserve">
          <source>Discriminated unions and algebraic types.</source>
          <target state="translated">차별적 노동 조합과 대수적 유형.</target>
        </trans-unit>
        <trans-unit id="0d4a9ae8f73ae60ae256d80c2349812a114d7d32" translate="yes" xml:space="preserve">
          <source>Dispatches allocations (and deallocations) between two allocators (&lt;code&gt;SmallAllocator&lt;/code&gt; and &lt;code&gt;LargeAllocator&lt;/code&gt;) depending on the size allocated, as follows. All allocations smaller than or equal to &lt;code&gt;threshold&lt;/code&gt; will be dispatched to &lt;code&gt;SmallAllocator&lt;/code&gt;. The others will go to &lt;code&gt;LargeAllocator&lt;/code&gt;.</source>
          <target state="translated">다음과 같이 할당 된 크기에 따라 두 할당 자 ( &lt;code&gt;SmallAllocator&lt;/code&gt; 및 &lt;code&gt;LargeAllocator&lt;/code&gt; ) 사이의 할당 (및 할당 해제) 을 전달합니다. &lt;code&gt;threshold&lt;/code&gt; 보다 작거나 같은 모든 할당 은 &lt;code&gt;SmallAllocator&lt;/code&gt; 로 발송됩니다 . 다른 사람은 &lt;code&gt;LargeAllocator&lt;/code&gt; 로 갑니다 .</target>
        </trans-unit>
        <trans-unit id="878767dea09dd65d9e99925d1bbf35b9ead4d939" translate="yes" xml:space="preserve">
          <source>Dispose</source>
          <target state="translated">Dispose</target>
        </trans-unit>
        <trans-unit id="86bcb9360235671e21ca43c426414e6c95361431" translate="yes" xml:space="preserve">
          <source>Dissecting the SS</source>
          <target state="translated">SS 해부</target>
        </trans-unit>
        <trans-unit id="eba01cc696856200a8e961304fb348e230176b24" translate="yes" xml:space="preserve">
          <source>Distinguishes between a Mailbox as defined by RFC 5321 and an addr-spec as defined by RFC 5322. Depending on the context, either can be regarded as a valid email address.</source>
          <target state="translated">RFC 5321에 의해 정의 된 사서함과 RFC 5322에 의해 정의 된 추가 사양을 구별합니다. 상황에 따라 유효한 전자 메일 주소로 간주 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b89e0561b370a9d9defb798c326cac4cbabab55c" translate="yes" xml:space="preserve">
          <source>Distributed under the &lt;a href=&quot;http://www.boost.org/LICENSE_1_0.txt&quot;&gt;Boost Software License 1.0&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://www.boost.org/LICENSE_1_0.txt&quot;&gt;Boost Software License 1.0에&lt;/a&gt; 따라 배포됩니다 .</target>
        </trans-unit>
        <trans-unit id="2ace81f9d94387dd1a13fbe82f4f33df38b3641a" translate="yes" xml:space="preserve">
          <source>Distributed under the &lt;a href=&quot;http://www.boost.org/LICENSE_1_0.txt&quot;&gt;Boost Software License 1.0&lt;/a&gt;. (See accompanying file LICENSE)</source>
          <target state="translated">&lt;a href=&quot;http://www.boost.org/LICENSE_1_0.txt&quot;&gt;Boost Software License 1.0에&lt;/a&gt; 따라 배포됩니다 . (동봉 된 파일 라이센스 참조)</target>
        </trans-unit>
        <trans-unit id="ba891575bb154c2b907934064ce520b42404b90b" translate="yes" xml:space="preserve">
          <source>Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at &lt;a href=&quot;http://%20boost.org/LICENSE_1_0.txt&quot;&gt;boost.org/LICENSE_1_0.txt&lt;/a&gt;).</source>
          <target state="translated">Boost 소프트웨어 라이센스 버전 1.0에 따라 배포됩니다. (첨부 파일 LICENSE_1_0.txt를 참조하거나 &lt;a href=&quot;http://%20boost.org/LICENSE_1_0.txt&quot;&gt;boost.org/LICENSE_1_0.txt&lt;/a&gt; 에서 복사하십시오 ).</target>
        </trans-unit>
        <trans-unit id="6ab74f49d93f10ad089666bb7d00d1c70aa92f62" translate="yes" xml:space="preserve">
          <source>Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at &lt;a href=&quot;http://boost.org/LICENSE_1_0.txt&quot;&gt;boost.org/LICENSE_1_0.txt&lt;/a&gt;).</source>
          <target state="translated">Boost 소프트웨어 라이센스 버전 1.0에 따라 배포됩니다. (첨부 파일 LICENSE_1_0.txt를 참조하거나 &lt;a href=&quot;http://boost.org/LICENSE_1_0.txt&quot;&gt;boost.org/LICENSE_1_0.txt&lt;/a&gt; 에서 복사하십시오 ).</target>
        </trans-unit>
        <trans-unit id="0a2d39b8d8ded48a2849b3ea1a1dcbcd9d0e8dbe" translate="yes" xml:space="preserve">
          <source>Ditto</source>
          <target state="translated">Ditto</target>
        </trans-unit>
        <trans-unit id="a816314180f7274708cea2cfeb5b4bf0a2c3d833" translate="yes" xml:space="preserve">
          <source>Divide two complex floating point numbers, x / y.</source>
          <target state="translated">두 개의 복잡한 부동 소수점 숫자 x / y를 나눕니다.</target>
        </trans-unit>
        <trans-unit id="5d913c09c6d3d954ae89f4b03b5517d485d50649" translate="yes" xml:space="preserve">
          <source>Divide-and-conquer division</source>
          <target state="translated">분할 정복</target>
        </trans-unit>
        <trans-unit id="b1eff6af42848eda7c48b15c9d38a5f1bae8908c" translate="yes" xml:space="preserve">
          <source>Divides allocation sizes in discrete buckets and uses an array of allocators, one per bucket, to satisfy requests.</source>
          <target state="translated">개별 버킷에서 할당 크기를 나누고 요청을 충족시키기 위해 버킷 당 하나씩 할당 자 배열을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="0a36c5ce128a07ea9566a1fde171f2200aeda2ed" translate="yes" xml:space="preserve">
          <source>Divides two durations.</source>
          <target state="translated">두 기간을 나눕니다.</target>
        </trans-unit>
        <trans-unit id="d59184e9b1f7fb2d487b23c37a8d0769b2b80f6e" translate="yes" xml:space="preserve">
          <source>Dmitry Olshansky</source>
          <target state="translated">드미트리 올샨 스키</target>
        </trans-unit>
        <trans-unit id="76dadc05139fc7b9bb55ebcce06ee30f3a6d580d" translate="yes" xml:space="preserve">
          <source>Dmitry Olshansky,  API and utility constructs are modeled after the original &lt;code&gt;std.regex&lt;/code&gt; by Walter Bright and Andrei Alexandrescu.</source>
          <target state="translated">API 및 유틸리티 구성물 인 Dmitry Olshansky는 Walter Bright와 Andrei Alexandrescu 의 원래 &lt;code&gt;std.regex&lt;/code&gt; 를 모델로합니다 .</target>
        </trans-unit>
        <trans-unit id="4bd083b2b3e187d89788105aa92f56163ce3b9bb" translate="yes" xml:space="preserve">
          <source>Do Statement</source>
          <target state="translated">진술</target>
        </trans-unit>
        <trans-unit id="afa88e9df2329969dfa74d520fd827ee0b4bb118" translate="yes" xml:space="preserve">
          <source>Do access check for member of this class, this class being the type of the 'this' pointer used to access smember. Returns true if the member is not accessible.</source>
          <target state="translated">이 클래스의 멤버에 대한 액세스 점검을 수행하십시오.이 클래스는 smember에 액세스하는 데 사용되는 'this'포인터의 유형입니다. 멤버에 액세스 할 수없는 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="8ced80b974abadd59803f313239db93fc65a5aef" translate="yes" xml:space="preserve">
          <source>Do an explicit cast. Assume that the 'this' expression does not have any indirections.</source>
          <target state="translated">노골적으로 캐스팅하십시오. 'this'표현식에는 간접 지정이 없다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="8cf5f7f93eb415898103ca45b53223874a94e907" translate="yes" xml:space="preserve">
          <source>Do an implicit cast. Issue error if it can't be done.</source>
          <target state="translated">암시 적 캐스트를 수행하십시오. 수행 할 수없는 경우 오류를 발행하십시오.</target>
        </trans-unit>
        <trans-unit id="49ad1ee743ebd2812afa41df4f17b41e99db9e93" translate="yes" xml:space="preserve">
          <source>Do assignment to an array. p[0 .. count] = value;</source>
          <target state="translated">배열에 할당하십시오. p [0 .. 카운트] = 값;</target>
        </trans-unit>
        <trans-unit id="2342a7521a0c9b6a4e6ba9b2d19061a24febfe06" translate="yes" xml:space="preserve">
          <source>Do byte or word alignment as necessary. Align sizes of 0, as we may not know array sizes yet.</source>
          <target state="translated">필요에 따라 바이트 또는 워드 정렬을 수행하십시오. 배열 크기를 아직 알지 못할 수 있으므로 크기를 0으로 정렬하십시오.</target>
        </trans-unit>
        <trans-unit id="f3c57d19eb68dddb9c7bee678b606c3b2b7c954b" translate="yes" xml:space="preserve">
          <source>Do char promotions. char -&amp;gt; dchar wchar -&amp;gt; dchar dchar -&amp;gt; dchar</source>
          <target state="translated">숯 프로모션을하십시오. char-&amp;gt; dchar wchar-&amp;gt; dchar dchar-&amp;gt; dchar</target>
        </trans-unit>
        <trans-unit id="d7efa78739a0a812ec969fd8c04cc8a58f93414c" translate="yes" xml:space="preserve">
          <source>Do construction of an array. ti[count] p = value;</source>
          <target state="translated">배열 구성을 수행하십시오. ti [count] p = 값;</target>
        </trans-unit>
        <trans-unit id="b160013f0a885bfb3ed7bf9da930f4023f015430" translate="yes" xml:space="preserve">
          <source>Do integral promotions (convertchk). Don't convert</source>
          <target state="translated">통합 프로모션 (전환)을 수행하십시오. 변환하지 마십시오</target>
        </trans-unit>
        <trans-unit id="bc9a100899d36229e4bd36b9da54ca644bcf9adb" translate="yes" xml:space="preserve">
          <source>Do mangling for C++ linkage. This is the POSIX side of the implementation. It exports two functions to C++, &lt;code&gt;toCppMangleItanium&lt;/code&gt; and &lt;code&gt;cppTypeInfoMangleItanium&lt;/code&gt;.</source>
          <target state="translated">C ++ 연결을 위해 mangling을 수행하십시오. 이것이 구현의 POSIX 측입니다. C ++에 &lt;code&gt;toCppMangleItanium&lt;/code&gt; 과 &lt;code&gt;cppTypeInfoMangleItanium&lt;/code&gt; 의 두 함수를 내 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="48f2007f86e365b8ec9f6adbb696ec1982a609ae" translate="yes" xml:space="preserve">
          <source>Do not add or subtract an offset to a pointer such that the result points outside of the bounds of the garbage collected object originally allocated.</source>
          <target state="translated">결과가 원래 할당 된 가비지 수집 된 객체의 범위를 벗어나도록 포인터에 오프셋을 더하거나 빼지 마십시오.</target>
        </trans-unit>
        <trans-unit id="81b778ac215108ff623547eace59a4ae9bb0b6fe" translate="yes" xml:space="preserve">
          <source>Do not align references or pointers that were allocated using &lt;a href=&quot;expression#NewExpression&quot;&gt;&lt;i&gt;NewExpression&lt;/i&gt;&lt;/a&gt; on boundaries that are not a multiple of &lt;code&gt;size_t&lt;/code&gt;. The garbage collector assumes that pointers and references to GC allocated objects will be on &lt;code&gt;size_t&lt;/code&gt; byte boundaries.</source>
          <target state="translated">&lt;code&gt;size_t&lt;/code&gt; 의 배수가 아닌 경계에서 &lt;a href=&quot;expression#NewExpression&quot;&gt;&lt;i&gt;NewExpression&lt;/i&gt;&lt;/a&gt; 을 사용하여 할당 된 참조 또는 포인터를 정렬하지 마십시오 . 가비지 수집기는 GC 할당 객체에 대한 포인터 및 참조가 &lt;code&gt;size_t&lt;/code&gt; 바이트 경계 에 있다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="caca04bc995d0c6eb8fc2349201d477b42dc5917" translate="yes" xml:space="preserve">
          <source>Do not attempt to resume normal execution after an</source>
          <target state="translated">이후 정상적인 실행을 재개하지 마십시오</target>
        </trans-unit>
        <trans-unit id="6dae81830baa5344537fe42e7999203b567a0ce3" translate="yes" xml:space="preserve">
          <source>Do not auto-initialize the object</source>
          <target state="translated">객체를 자동 초기화하지 마십시오</target>
        </trans-unit>
        <trans-unit id="77b2c3ee1b3b37ff4e1d1f86da4e93a8c9f01993" translate="yes" xml:space="preserve">
          <source>Do not call this from inside a callback handler e.g. &lt;code&gt;onReceive&lt;/code&gt;.</source>
          <target state="translated">콜백 핸들러 내부에서이를 호출하지 마십시오 (예 : &lt;code&gt;onReceive&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="3f58790833caa6a65a159ebf3ca17750973f0db4" translate="yes" xml:space="preserve">
          <source>Do not confuse function types with function pointer types; function types are usually used for compile-time reflection purposes.</source>
          <target state="translated">함수 타입을 함수 포인터 타입과 혼동하지 마십시오. 함수 타입은 보통 컴파일 타임 리플렉션 목적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="63e963b5f29077511474456af6492bdde1d38506" translate="yes" xml:space="preserve">
          <source>Do not confuse this with &lt;a href=&quot;std_variant#Variant&quot;&gt;&lt;code&gt;std.variant.Variant&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것을 &lt;a href=&quot;std_variant#Variant&quot;&gt; &lt;code&gt;std.variant.Variant&lt;/code&gt; &lt;/a&gt; 와 혼동하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="a3dd442e9ddf9950a928b468f82f2b3da4fe83b1" translate="yes" xml:space="preserve">
          <source>Do not confuse this with &lt;a href=&quot;std_variant#Variant&quot;&gt;&lt;code&gt;std.variant.Variant&lt;/code&gt;&lt;/a&gt;. The type of this property is &lt;a href=&quot;#Variant&quot;&gt;`std.uuid.UUID.Variant`&lt;/a&gt;.</source>
          <target state="translated">이것을 &lt;a href=&quot;std_variant#Variant&quot;&gt; &lt;code&gt;std.variant.Variant&lt;/code&gt; &lt;/a&gt; 와 혼동하지 마십시오 . 이 프로퍼티의 타입은 &lt;a href=&quot;#Variant&quot;&gt;`std.uuid.UUID.Variant`&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="29b494027d2c32b0eb23f6f091dc23e2a05787b4" translate="yes" xml:space="preserve">
          <source>Do not decode</source>
          <target state="translated">해독하지 마십시오</target>
        </trans-unit>
        <trans-unit id="73679fcab18429a879497ec92e92f528b9054737" translate="yes" xml:space="preserve">
          <source>Do not depend on the ordering of pointers:</source>
          <target state="translated">포인터의 순서에 의존하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="15214b550edaf6868002baab7a36d86b63fdbd52" translate="yes" xml:space="preserve">
          <source>Do not erase the endOfOptions separator from args</source>
          <target state="translated">인수에서 endOfOptions 구분 기호를 지우지 마십시오.</target>
        </trans-unit>
        <trans-unit id="ed54b943220a06fc33fbd41e84ae8d683cb32f84" translate="yes" xml:space="preserve">
          <source>Do not have pointers in a struct instance that point back to the same instance. The trouble with this is if the instance gets moved in memory, the pointer will point back to where it came from, with likely disastrous results.</source>
          <target state="translated">동일한 인스턴스를 가리키는 구조체 인스턴스에 포인터가 없습니다. 이 문제는 인스턴스가 메모리에서 이동하면 포인터가 원래 위치를 가리키고 비참한 결과를 초래할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9503045deb2713c12f10681d5a82c5e6dc3786b4" translate="yes" xml:space="preserve">
          <source>Do not have side effects in either</source>
          <target state="translated">어느 쪽에도 부작용이 없습니다</target>
        </trans-unit>
        <trans-unit id="a2207daa5237f7950ee2a24d7bad6178ad0c4eac" translate="yes" xml:space="preserve">
          <source>Do not hold references to GC allocated data in such threads.</source>
          <target state="translated">이러한 스레드에서 GC 할당 데이터에 대한 참조를 보유하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="75112ebefdc8bc7ab72ca5983be8d10945931a0b" translate="yes" xml:space="preserve">
          <source>Do not indirectly call exported or public member functions within a class invariant, as this can result in infinite recursion.</source>
          <target state="translated">무한 재귀가 발생할 수 있으므로 클래스 불변의 내 보낸 함수 또는 공개 멤버 함수를 간접적으로 호출하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="e1775975c4acb65a912112e3f08e4b4d3508929c" translate="yes" xml:space="preserve">
          <source>Do not indirectly call exported or public member functions within a struct invariant, as this can result in infinite recursion.</source>
          <target state="translated">무한 재귀를 초래할 수있는 구조체 불변 인 내에서 내 보낸 함수 또는 공개 멤버 함수를 간접적으로 호출하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="265e329368392df0768a84da95edc465b4f53d17" translate="yes" xml:space="preserve">
          <source>Do not misalign pointers if those pointers may point into the GC heap, such as:</source>
          <target state="translated">다음과 같은 포인터가 GC 힙을 가리킬 수있는 경우 포인터를 잘못 정렬하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="ae28e6f2bf434f35cfb2723801a49eb3b07894f4" translate="yes" xml:space="preserve">
          <source>Do not move this memory block on collect.</source>
          <target state="translated">수집시이 메모리 블록을 이동하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="252d61d2c9aaae3fa2855b13f421208eb1adfbab" translate="yes" xml:space="preserve">
          <source>Do not pass or return structs with no fields of non-zero size to &lt;code&gt;extern (C)&lt;/code&gt; functions. According to C11 6.7.2.1p8 this is undefined behavior.</source>
          <target state="translated">크기가 0이 아닌 필드가없는 구조체를 &lt;code&gt;extern (C)&lt;/code&gt; 함수에 전달하거나 반환하지 마십시오 . C11 6.7.2.1p8에 따르면 이것은 정의되지 않은 동작입니다.</target>
        </trans-unit>
        <trans-unit id="545f474f77e15c3644ea6498632a63e633d190ac" translate="yes" xml:space="preserve">
          <source>Do not route</source>
          <target state="translated">라우팅하지 마십시오</target>
        </trans-unit>
        <trans-unit id="dc0a76e6e9b0c6af0cc401f08c6346c5684c9a82" translate="yes" xml:space="preserve">
          <source>Do not scan through this block on collect.</source>
          <target state="translated">수집 할 때이 블록을 스캔하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="ee5948436f95ed6ca0018fa3d5ef4d60f9e4e270" translate="yes" xml:space="preserve">
          <source>Do not store into pointers values that may point into the garbage collected heap:</source>
          <target state="translated">가비지 수집 힙을 가리키는 포인터 값에 저장하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="4694aebab008c009fd2ade5c78c132624b4e3994" translate="yes" xml:space="preserve">
          <source>Do not store magic values into pointers, other than &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 이외의 포인터에 매직 값을 저장하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="1baaebf042ac12ef4083353631588e08e8ab3c7a" translate="yes" xml:space="preserve">
          <source>Do not store pointers into non-pointer variables using casts and other tricks.</source>
          <target state="translated">캐스트 및 기타 트릭을 사용하여 포인터를 비 포인터 변수에 저장하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="5518272732f9db527429d7b720c46d2567a0aeeb" translate="yes" xml:space="preserve">
          <source>Do not take advantage of alignment of pointers to store bit flags in the low order bits:</source>
          <target state="translated">비트 플래그를 하위 비트로 저장하기 위해 포인터 정렬을 이용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="b58865d06e7074ca80b26d076607e9c3e9f0a800" translate="yes" xml:space="preserve">
          <source>Do not use built-in appending (i.e. &lt;code&gt;~=&lt;/code&gt;) on the original array until you are done with the appender, because subsequent calls to the appender will reallocate the array data without those appends.</source>
          <target state="translated">어 펜더로 완료 될 때까지 어 펜더를 완료 할 때까지 원래 배열에 내장 어태치먼트 (예 : &lt;code&gt;~=&lt;/code&gt; )를 사용하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="f43c209d1eced41c1951e6622431f16dd6a92327" translate="yes" xml:space="preserve">
          <source>Do not use byte-by-byte memory copies to copy pointer values. This may result in intermediate conditions where there is not a valid pointer, and if the gc pauses the thread in such a condition, it can corrupt memory. Most implementations of &lt;code&gt;memcpy()&lt;/code&gt; will work since the internal implementation of it does the copy in aligned chunks greater than or equal to the pointer size, but since this kind of implementation is not guaranteed by the C standard, use &lt;code&gt;memcpy()&lt;/code&gt; only with extreme caution.</source>
          <target state="translated">바이트 단위 메모리 사본을 사용하여 포인터 값을 복사하지 마십시오. 이로 인해 유효한 포인터가없는 중간 조건이 발생할 수 있으며 gc가 그러한 조건에서 스레드를 일시 중지하면 메모리가 손상 될 수 있습니다. 대부분의 &lt;code&gt;memcpy()&lt;/code&gt; 구현은 내부 구현이 포인터 크기보다 크거나 같은 정렬 된 청크로 사본을 수행하기 때문에 작동하지만 C 표준에서는 이러한 종류의 구현이 보장되지 않으므로 &lt;code&gt;memcpy()&lt;/code&gt; 를 극단적으로 만 사용하십시오 주의.</target>
        </trans-unit>
        <trans-unit id="8fef94bc41deb275037bea8264e5ce1e16ff6601" translate="yes" xml:space="preserve">
          <source>Do not use pointer values to compute a hash function. A copying garbage collector can arbitrarily move objects around in memory, thus invalidating the computed hash value.</source>
          <target state="translated">해시 함수를 계산하기 위해 포인터 값을 사용하지 마십시오. 복사 가비지 수집기는 메모리에서 개체를 임의로 이동하여 계산 된 해시 값을 무효화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0fcdfeaf8d861d5921d7ae20a6aa8706d48e2502" translate="yes" xml:space="preserve">
          <source>Do not use the xor trick to swap two pointer values.</source>
          <target state="translated">xor 트릭을 사용하여 두 개의 포인터 값을 바꾸지 마십시오.</target>
        </trans-unit>
        <trans-unit id="9450a2a7f4c92d925d6ca19a49b85936cbddd9f4" translate="yes" xml:space="preserve">
          <source>Do not write pointer values out to disk and read them back in again.</source>
          <target state="translated">포인터 값을 디스크에 쓰지 않고 다시 읽지 마십시오.</target>
        </trans-unit>
        <trans-unit id="47e4f0210c15edd10b3e8dfae2c365e9ea492c46" translate="yes" xml:space="preserve">
          <source>Do not xor pointers with other values, like the xor pointer linked list trick used in C.</source>
          <target state="translated">C에서 사용되는 xor 포인터 연결 목록 트릭과 같은 다른 값으로 포인터를 xor하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="44cce4fe17e5532d7d769dc78edb2ce4bfb6d3c6" translate="yes" xml:space="preserve">
          <source>Do same thing as &lt;a href=&quot;#makeTransTable&quot;&gt;&lt;code&gt;makeTransTable&lt;/code&gt;&lt;/a&gt; but allocate the translation table on the GC heap.</source>
          <target state="translated">&lt;a href=&quot;#makeTransTable&quot;&gt; &lt;code&gt;makeTransTable&lt;/code&gt; &lt;/a&gt; 과 동일한 작업을 수행 하지만 변환 테이블을 GC 힙에 할당하십시오.</target>
        </trans-unit>
        <trans-unit id="c4aa62dd02825b617ff934fd70f3fd8af2008444" translate="yes" xml:space="preserve">
          <source>Do syntax copy of an array of Dsymbol's.</source>
          <target state="translated">Dsymbol 배열의 구문 복사를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="f7a07128b5b38f3860b8f68acb34a0025bf24ca2" translate="yes" xml:space="preserve">
          <source>Do syntax copy of an array of Ensure's.</source>
          <target state="translated">보장 배열의 구문 복사를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="19da1895e2f7ae31622d6bf9481e29416f91cc3f" translate="yes" xml:space="preserve">
          <source>Do syntax copy of an array of Statement's.</source>
          <target state="translated">Statement 배열의 구문 복사를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="8b79f267da0581c6563cba569790a61e0f1e62f8" translate="yes" xml:space="preserve">
          <source>Do while statements implement simple loops.</source>
          <target state="translated">while 문은 간단한 루프를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="e5cf7df46ec6959b440885b9ae093cdb071a4cdc" translate="yes" xml:space="preserve">
          <source>Documentation Generator</source>
          <target state="translated">문서 생성기</target>
        </trans-unit>
        <trans-unit id="2b55770552f067992cb153f9604359fff22e6d9a" translate="yes" xml:space="preserve">
          <source>Documentation may contain lists. Start an ordered list with a number followed by a period:</source>
          <target state="translated">설명서에는 목록이 포함될 수 있습니다. 숫자와 마침표로 순서가 지정된 목록을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="926e5491f782345c5ebce88e5158033ebc55572c" translate="yes" xml:space="preserve">
          <source>Documentation may include a section of quoted material by prefixing each line of the section with a &lt;code&gt;&amp;gt;&lt;/code&gt;. Quotes may include headings, lists, embedded code, etc.</source>
          <target state="translated">문서에는 섹션의 각 줄 앞에 &lt;code&gt;&amp;gt;&lt;/code&gt; 을 붙여 인용 된 자료 섹션이 포함될 수 있습니다 . 따옴표에는 제목, 목록, 포함 된 코드 등이 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fdb5a714ba58a87c2a7f2811a3ac36b770a2efdc" translate="yes" xml:space="preserve">
          <source>Documentation may link to other documentation or to a URL. There are four styles of links:</source>
          <target state="translated">설명서는 다른 설명서 나 URL에 연결될 수 있습니다. 링크에는 네 가지 스타일이 있습니다.</target>
        </trans-unit>
        <trans-unit id="6c528ec8a539858f2d0895db65fe8bac577f548f" translate="yes" xml:space="preserve">
          <source>Documented Unittests</source>
          <target state="translated">문서화 된 단위 테스트</target>
        </trans-unit>
        <trans-unit id="bb7221f475015c63e0d052b4eb162c85818223c5" translate="yes" xml:space="preserve">
          <source>Documented unittests allow the developer to deliver code examples to the user, while at the same time automatically verifying that the examples are valid. This avoids the frequent problem of having outdated documentation for some piece of code.</source>
          <target state="translated">문서화 된 단위 테스트를 통해 개발자는 코드 예제를 사용자에게 제공하는 동시에 예제가 유효한지 자동으로 확인할 수 있습니다. 이렇게하면 일부 코드에 대한 오래된 문서가 자주 발생하는 문제를 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="22157d9a8327c6cba20cc721270ec0fb147058d0" translate="yes" xml:space="preserve">
          <source>Does *not* do a deep copy.</source>
          <target state="translated">딥 카피를 *하지 * 않습니다.</target>
        </trans-unit>
        <trans-unit id="7880c3cdd7abd23aa1dab064c815cf8a6efc9dbd" translate="yes" xml:space="preserve">
          <source>Does array assignment (not construction) from another lvalue array of the same element type. Handles overlapping copies.</source>
          <target state="translated">동일한 요소 유형의 다른 lvalue 배열에서 배열 할당 (구성 아님)을 수행합니다. 겹치는 사본을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="bb326be1508b3558c9df2c127c6767a185c8e15f" translate="yes" xml:space="preserve">
          <source>Does array assignment (not construction) from another rvalue array of the same element type.</source>
          <target state="translated">동일한 요소 유형의 다른 rvalue 배열에서 배열을 지정하지 않습니다 (구성이 아님).</target>
        </trans-unit>
        <trans-unit id="d7b5e205d736eaa89aab0a993c404218452acec2" translate="yes" xml:space="preserve">
          <source>Does array initialization (not assignment) from another array of the same element type.</source>
          <target state="translated">동일한 요소 유형의 다른 배열에서 배열을 초기화 (할당 아님)합니다.</target>
        </trans-unit>
        <trans-unit id="1c341d6163b42492bc175f361de7f7e046b501b5" translate="yes" xml:space="preserve">
          <source>Does array initialization (not assignment) from another array of the same element type. ti is the element type.</source>
          <target state="translated">동일한 요소 유형의 다른 배열에서 배열을 초기화 (할당 아님)합니다. ti는 요소 유형입니다.</target>
        </trans-unit>
        <trans-unit id="4f48305c318afd30929190596a37b1449341dc48" translate="yes" xml:space="preserve">
          <source>Does basic case-insensitive comparison of &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt;. This function uses simpler comparison rule thus achieving better performance than &lt;a href=&quot;#icmp&quot;&gt;&lt;code&gt;icmp&lt;/code&gt;&lt;/a&gt;. However keep in mind the warning below.</source>
          <target state="translated">&lt;code&gt;r1&lt;/code&gt; 과 &lt;code&gt;r2&lt;/code&gt; 의 대소 문자를 구분하지 않는 기본 비교를 수행 합니다. 이 함수는 간단한 비교 규칙을 사용하므로 &lt;a href=&quot;#icmp&quot;&gt; &lt;code&gt;icmp&lt;/code&gt; &lt;/a&gt; 보다 성능이 향상됩니다 . 그러나 아래 경고를 명심하십시오.</target>
        </trans-unit>
        <trans-unit id="1541f9d0a1b7d7addfa9e467393388bf45331786" translate="yes" xml:space="preserve">
          <source>Does case insensitive comparison of &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt;. Follows the rules of full case-folding mapping. This includes matching as equal german &amp;szlig; with &quot;ss&quot; and other 1:M &lt;a href=&quot;#Code%20point&quot;&gt;code point&lt;/a&gt; mappings unlike &lt;a href=&quot;#sicmp&quot;&gt;&lt;code&gt;sicmp&lt;/code&gt;&lt;/a&gt;. The cost of &lt;code&gt;icmp&lt;/code&gt; being pedantically correct is slightly worse performance.</source>
          <target state="translated">&lt;code&gt;r1&lt;/code&gt; 과 &lt;code&gt;r2&lt;/code&gt; 의 대소 문자를 구분하지 않습니다 . 전체 대소 문자 매핑 규칙을 따릅니다. 여기에는 &lt;a href=&quot;#sicmp&quot;&gt; &lt;code&gt;sicmp&lt;/code&gt; &lt;/a&gt; 와 달리 &quot;ss&quot;및 다른 1 : M &lt;a href=&quot;#Code%20point&quot;&gt;코드 포인트&lt;/a&gt; 매핑과 동일한 독일어 &amp;szlig;로 일치하는 것이 포함됩니다 . &lt;code&gt;icmp&lt;/code&gt; 정확한 비용은 성능이 약간 떨어집니다.</target>
        </trans-unit>
        <trans-unit id="d227fda4244c2852330a21da3953b3ada54ec0a1" translate="yes" xml:space="preserve">
          <source>Does it have an x87 FPU on-chip?</source>
          <target state="translated">x87 FPU 온칩이 있습니까?</target>
        </trans-unit>
        <trans-unit id="83fba42bfa5a2255055c2e608e063da748b0f4c1" translate="yes" xml:space="preserve">
          <source>Does not allocate memory if it does not throw.</source>
          <target state="translated">던지지 않으면 메모리를 할당하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f5f60bc07826ab5afe9362b839574ccde8f21899" translate="yes" xml:space="preserve">
          <source>Does not allocate memory.</source>
          <target state="translated">메모리를 할당하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="48413fe4541dc1ee71e5310b4e9c41a5627c01cd" translate="yes" xml:space="preserve">
          <source>Does not allocate memory. Characters in UTF-8 or UTF-16 format that cannot be decoded are treated as &lt;a href=&quot;std_utf#replacementDchar&quot;&gt;&lt;code&gt;std.utf.replacementDchar&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">메모리를 할당하지 않습니다. 디코딩 할 수없는 UTF-8 또는 UTF-16 형식의 문자는 &lt;a href=&quot;std_utf#replacementDchar&quot;&gt; &lt;code&gt;std.utf.replacementDchar&lt;/code&gt; &lt;/a&gt; 로 처리됩니다 .</target>
        </trans-unit>
        <trans-unit id="dce2a3d4cb0e63320ae9bb41db9cf5f239c6203b" translate="yes" xml:space="preserve">
          <source>Does not resolve symbolic links.</source>
          <target state="translated">심볼릭 링크를 해결하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c740830c192296775600e4b476a2a4cd6515e7a8" translate="yes" xml:space="preserve">
          <source>Does not return on success (the current process will have been replaced). Returns -1 on failure with no indication of the underlying error.</source>
          <target state="translated">성공하면 돌아 오지 않습니다 (현재 프로세스가 교체 됨). 기본 오류 표시없이 실패시 -1을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f67d427a021b49d829af064322fcd164d0d520fe" translate="yes" xml:space="preserve">
          <source>Does not support encryption.</source>
          <target state="translated">암호화를 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="57647b73e9c332f36e028fa36bff18cf326e39ad" translate="yes" xml:space="preserve">
          <source>Does not throw on invalid UTF; such is simply passed unchanged to the output.</source>
          <target state="translated">유효하지 않은 UTF를 던지지 않습니다. 그러한 것은 단순히 출력으로 변경되지 않고 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="5e5419f6b87cc49ac2507077d7548ae9d6c064c5" translate="yes" xml:space="preserve">
          <source>Does not use GC if &lt;code&gt;useReplacementDchar&lt;/code&gt; is set to &lt;code&gt;UseReplacementDchar.no&lt;/code&gt;</source>
          <target state="translated">경우 GC를 사용하지 않습니다 &lt;code&gt;useReplacementDchar&lt;/code&gt; 이 설정되어 &lt;code&gt;UseReplacementDchar.no&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="37786dd9ad405e5b54d26d2bbe52bc54cf2418f3" translate="yes" xml:space="preserve">
          <source>Does not work correctly for signed intergal types and value &lt;code&gt;Num&lt;/code&gt;.min.</source>
          <target state="translated">서명 된 intergal 유형 및 값 &lt;code&gt;Num&lt;/code&gt; .min에 대해 올바르게 작동하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="56a999eccf87855de475f9001b77eaa33bebcc42" translate="yes" xml:space="preserve">
          <source>Does not work with &lt;code&gt;@safe&lt;/code&gt; functions.</source>
          <target state="translated">&lt;code&gt;@safe&lt;/code&gt; 함수 에서는 작동하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="2068fc4e744b5cb3b339dae23375f8492cf64188" translate="yes" xml:space="preserve">
          <source>Does not work with case insensitive strings where the mapping of tolower and toupper is not 1:1.</source>
          <target state="translated">tolower와 toupper의 매핑이 1 : 1이 아닌 대소 문자를 구분하지 않는 문자열에는 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="234e510cc603f08075d818203c3bd0a16b71e801" translate="yes" xml:space="preserve">
          <source>Does not yet verify that put takes scope parameters.</source>
          <target state="translated">put이 범위 매개 변수를 사용하는지 아직 검증하지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="b970936a7b0239e08cb29e7cc368f29721b67295" translate="yes" xml:space="preserve">
          <source>Does nothing if the directory specified by &lt;code&gt;pathname&lt;/code&gt; already exists.</source>
          <target state="translated">&lt;code&gt;pathname&lt;/code&gt; 으로 지정된 디렉토리 가 이미 존재 하면 아무 것도 수행하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="d14a56d6d7f137ebcec5fe42cb450c31b78d2d48" translate="yes" xml:space="preserve">
          <source>Does semantic analysis on function bodies.</source>
          <target state="translated">함수 본문에 대한 의미 분석을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="6fd2735e2d40ea539042c5be41e2050d6af1c881" translate="yes" xml:space="preserve">
          <source>Does semantic analysis on initializers and members of aggregates.</source>
          <target state="translated">이니셜 라이저 및 집계 멤버에 대한 의미 분석을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="7426f971998f7162437e092ad05d77db524d6ce4" translate="yes" xml:space="preserve">
          <source>Does semantic analysis on the public face of declarations.</source>
          <target state="translated">선언의 공개면에서 의미 론적 분석을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="5e7b66a0efda11b1a40d7f052dad77b19269e8c9" translate="yes" xml:space="preserve">
          <source>Does string s[] start with a URL?</source>
          <target state="translated">문자열 s []는 URL로 시작합니까?</target>
        </trans-unit>
        <trans-unit id="38868c2e83fb9b3a3cc81b391b385a673621f4ac" translate="yes" xml:space="preserve">
          <source>Does string s[] start with an email address?</source>
          <target state="translated">문자열 s []는 이메일 주소로 시작합니까?</target>
        </trans-unit>
        <trans-unit id="ee8fd059691124d36d3b2bf9c557a5b6992ef466" translate="yes" xml:space="preserve">
          <source>Does symbol go into data segment? Includes extern variables.</source>
          <target state="translated">심볼이 데이터 세그먼트로 이동합니까? extern 변수를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="6ea873f55def1751953aed891c21e1fd70621fb3" translate="yes" xml:space="preserve">
          <source>Does symbol go into thread local storage?</source>
          <target state="translated">기호가 스레드 로컬 저장소로 이동합니까?</target>
        </trans-unit>
        <trans-unit id="5f4245209de5aaf56cccd41911b16c063a174fee" translate="yes" xml:space="preserve">
          <source>Does this CPU perform better on AMD K7 code than PentiumPro..Core2 code?</source>
          <target state="translated">이 CPU는 PentiumPro..Core2 코드보다 AMD K7 코드에서 더 잘 수행됩니까?</target>
        </trans-unit>
        <trans-unit id="f93413c51da306bad6613f0c3dfb9485692526d8" translate="yes" xml:space="preserve">
          <source>Does this CPU perform better on Pentium I code than Pentium Pro code?</source>
          <target state="translated">이 CPU는 Pentium Pro 코드보다 Pentium I 코드에서 더 잘 수행됩니까?</target>
        </trans-unit>
        <trans-unit id="6beb25bfcb2d456e092bdcbcd4df3c0a4af2770f" translate="yes" xml:space="preserve">
          <source>Does this CPU perform better on Pentium4 code than PentiumPro..Core2 code?</source>
          <target state="translated">이 CPU는 PentiumPro..Core2 코드보다 Pentium4 코드에서 더 잘 수행됩니까?</target>
        </trans-unit>
        <trans-unit id="303dfd80025298b45e565827e0f7acdfb67e7adf" translate="yes" xml:space="preserve">
          <source>Does this expression statically evaluate to a boolean 'result' (true or false)?</source>
          <target state="translated">이 표현식은 부울 '결과'(true 또는 false)로 정적으로 평가됩니까?</target>
        </trans-unit>
        <trans-unit id="20fe1fb5a82d9f8293a5f142d362ade49a423c3b" translate="yes" xml:space="preserve">
          <source>Does this generator have a fixed range? (true).</source>
          <target state="translated">이 발전기의 범위는 고정되어 있습니까? (진실).</target>
        </trans-unit>
        <trans-unit id="c45ddb9e91921f4fb3ca128e8d434af1f9c44043" translate="yes" xml:space="preserve">
          <source>Does this statement end with a return statement?</source>
          <target state="translated">이 진술은 반환 진술로 끝나나요?</target>
        </trans-unit>
        <trans-unit id="602cff563bc9c1a99154cbe14ef76827c7b8bd0a" translate="yes" xml:space="preserve">
          <source>Doesn't run semantic() on the returned type.</source>
          <target state="translated">반환 된 형식에 대해 semantic ()을 실행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="65bae41fbf2bab9d6c517a5161d6f4e5c84b2f99" translate="yes" xml:space="preserve">
          <source>Doing a finer grained specialization than template partial specialization allows for.</source>
          <target state="translated">템플릿 부분 전문화보다 더 세분화 된 전문화를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7bf1581b3d79aef115fa984692a0f57e9b6391b0" translate="yes" xml:space="preserve">
          <source>Dollar Operator Overloading</source>
          <target state="translated">달러 연산자 과부하</target>
        </trans-unit>
        <trans-unit id="421fb059a6bf248f5571209ef5cbebb58961f8d1" translate="yes" xml:space="preserve">
          <source>Domain X</source>
          <target state="translated">도메인 X</target>
        </trans-unit>
        <trans-unit id="5c300ea4f935146cff3d8c2e417b69ad4286f5b3" translate="yes" xml:space="preserve">
          <source>Domain literal is missing its closing bracket</source>
          <target state="translated">도메인 리터럴에 닫는 괄호가 없습니다</target>
        </trans-unit>
        <trans-unit id="36a62fa1476d63a0f159cc1bcd228125da0bc26a" translate="yes" xml:space="preserve">
          <source>Dominic Sayers &amp;lt;dominic@sayers.cc&amp;gt;, Jacob Carlborg</source>
          <target state="translated">도미닉 세이 어스 &amp;lt;dominic@sayers.cc&amp;gt;, Jacob Carlborg</target>
        </trans-unit>
        <trans-unit id="6b8429a95f0eac205580ed220d9c90696f62766d" translate="yes" xml:space="preserve">
          <source>Domino Tiles</source>
          <target state="translated">도미노 타일</target>
        </trans-unit>
        <trans-unit id="fa09a73d5a2559992d8df50b14b202ba40b84989" translate="yes" xml:space="preserve">
          <source>Don Clugston</source>
          <target state="translated">돈 크러 스턴</target>
        </trans-unit>
        <trans-unit id="9d0b26b787f9f3785eca5ba583a0874a32c4dfc6" translate="yes" xml:space="preserve">
          <source>Don Clugston, Sean Kelly, Walter Bright, Alex R&amp;oslash;nne Petersen, Thomas Stuart Bockman</source>
          <target state="translated">Don Clugston, Sean Kelly, Walter Bright, Alex R&amp;oslash;nne Petersen, 토마스 스튜어트 복맨</target>
        </trans-unit>
        <trans-unit id="f0d862ef147328c2bdab8e47b939a7df16dbcb18" translate="yes" xml:space="preserve">
          <source>Don Clugston, Tomas Lindquist Olsen &amp;lt;tomas@famolsen.dk&amp;gt;</source>
          <target state="translated">Don Clugston, Tomas Lindquist Olsen &amp;lt;tomas@famolsen.dk&amp;gt;</target>
        </trans-unit>
        <trans-unit id="a588f29267f5677ec0874779bc43b4529049e908" translate="yes" xml:space="preserve">
          <source>Don't allow access, but don't generate an error</source>
          <target state="translated">액세스를 허용하지 않지만 오류를 생성하지 마십시오</target>
        </trans-unit>
        <trans-unit id="f5bedabd34c7a0b41762124d3fa68898fb512506" translate="yes" xml:space="preserve">
          <source>DosFileTime &lt;code&gt;dft&lt;/code&gt;</source>
          <target state="translated">DosFileTime의 &lt;code&gt;dft&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c9f917733056998a71b923495fed0aa216ff5bfd" translate="yes" xml:space="preserve">
          <source>DotExpFlag bit flags</source>
          <target state="translated">DotExpFlag 비트 플래그</target>
        </trans-unit>
        <trans-unit id="29452f8d098cfc522610ae95cc37fe7fabe7176a" translate="yes" xml:space="preserve">
          <source>DotIdExp &lt;strong id=&quot;typeDotIdExp&quot;&gt;typeDotIdExp&lt;/strong&gt;(ref const Loc loc, Type type, Identifier ident);</source>
          <target state="translated">DotIdExp &lt;strong id=&quot;typeDotIdExp&quot;&gt;typeDotIdExp&lt;/strong&gt; (참조 const Loc loc, Type type, Identifier ident 참조);</target>
        </trans-unit>
        <trans-unit id="f769255e26cd75e595da28495b1c1b062915615a" translate="yes" xml:space="preserve">
          <source>DotIdentifier</source>
          <target state="translated">DotIdentifier</target>
        </trans-unit>
        <trans-unit id="d02f752b78fa27af256bc9c9891df221a3c43cc3" translate="yes" xml:space="preserve">
          <source>Double Quoted Strings</source>
          <target state="translated">큰 따옴표로 묶인 문자열</target>
        </trans-unit>
        <trans-unit id="97ef51994f0551456726ff4652bec8fae2bae111" translate="yes" xml:space="preserve">
          <source>Double quoted strings are enclosed by &quot;&quot;. &lt;a href=&quot;#EscapeSequence&quot;&gt;&lt;i&gt;EscapeSequence&lt;/i&gt;&lt;/a&gt;s can be embedded in them.</source>
          <target state="translated">큰 따옴표로 묶인 문자열은 &quot;&quot;로 묶입니다. &lt;a href=&quot;#EscapeSequence&quot;&gt;&lt;i&gt;EscapeSequence를&lt;/i&gt;&lt;/a&gt; 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="58a15cf6ea8b9a28cb41169bfcd5ac8fbf81d48d" translate="yes" xml:space="preserve">
          <source>Double quoted strings are enclosed by &quot;&quot;. &lt;a href=&quot;#EscapeSequence&quot;&gt;&lt;i&gt;EscapeSequence&lt;/i&gt;&lt;/a&gt;s can be embedded into them.</source>
          <target state="translated">큰 따옴표로 묶인 문자열은 &quot;&quot;로 묶습니다. &lt;a href=&quot;#EscapeSequence&quot;&gt;&lt;i&gt;EscapeSequence를&lt;/i&gt;&lt;/a&gt; 포함시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b4c7f39c0dd52ca9e93b751cf3a268ca267083b" translate="yes" xml:space="preserve">
          <source>Double quotes in a field are escaped with a double quote</source>
          <target state="translated">필드의 큰 따옴표는 큰 따옴표로 이스케이프됩니다.</target>
        </trans-unit>
        <trans-unit id="39ada38f04cebecefb9b4425f65f5414bc2e5688" translate="yes" xml:space="preserve">
          <source>DragonFlyBSD</source>
          <target state="translated">DragonFlyBSD</target>
        </trans-unit>
        <trans-unit id="c6cfd9344502d0bda387e7aa2d5b236691470937" translate="yes" xml:space="preserve">
          <source>DragonFlyBSD,FreeBSD,OpenBSD-Only</source>
          <target state="translated">DragonFlyBSD,FreeBSD,OpenBSD-Only</target>
        </trans-unit>
        <trans-unit id="6762d5db4af81e5f2c77bcbf79bc1f395b8eb0a4" translate="yes" xml:space="preserve">
          <source>Drop an IP group membership</source>
          <target state="translated">IP 그룹 멤버쉽 삭제</target>
        </trans-unit>
        <trans-unit id="2344a954abca9d2ee9cc4c6e9c4befacdc6f6e79" translate="yes" xml:space="preserve">
          <source>Dst</source>
          <target state="translated">Dst</target>
        </trans-unit>
        <trans-unit id="b024af56227cbde4a86bf76b0bd08cc52aebe130" translate="yes" xml:space="preserve">
          <source>Dst &lt;strong id=&quot;onBadCast&quot;&gt;onBadCast&lt;/strong&gt;(Dst, Src)(Src src);</source>
          <target state="translated">Dst &lt;strong id=&quot;onBadCast&quot;&gt;onBadCast&lt;/strong&gt; (Dst, Src) (Src src);</target>
        </trans-unit>
        <trans-unit id="09e6401c31232a6fb2cc5ab8768ce235cdf1abe2" translate="yes" xml:space="preserve">
          <source>Dst[] &lt;code&gt;r&lt;/code&gt;</source>
          <target state="translated">Dst [] &lt;code&gt;r&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c5a9a4e4ef12e5629fa29318fc987f63c1263435" translate="yes" xml:space="preserve">
          <source>Dsymbol</source>
          <target state="translated">Dsymbol</target>
        </trans-unit>
        <trans-unit id="8b545778ae57876ecf0207ce6c8091ae91e982a7" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;code&gt;dstart&lt;/code&gt;</source>
          <target state="translated">기호 &lt;code&gt;dstart&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f906c5f387f9a40fce5e5a506c83c5ea11982076" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;code&gt;fstart&lt;/code&gt;</source>
          <target state="translated">기호 &lt;code&gt;fstart&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9e832a1f077874040d38633a04423fe25027820e" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;code&gt;p&lt;/code&gt;</source>
          <target state="translated">기호 &lt;code&gt;p&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="490e98cb5be1dc66bf96b3750e4de4b963606587" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">기호 &lt;code&gt;s&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="38f65a50fa64dd5ef5a05cc65e0cd98b7a44a10d" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;code&gt;sapply&lt;/code&gt;</source>
          <target state="translated">심볼 &lt;code&gt;sapply&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ad654599d75bbb9a0a04ad6c6a4c073c4440fbe1" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;code&gt;sym&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sym&lt;/code&gt; 심볼</target>
        </trans-unit>
        <trans-unit id="51c0a3fc988c10b5abd6f1880eec7b7da76ded32" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;code&gt;var&lt;/code&gt;</source>
          <target state="translated">기호 &lt;code&gt;var&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a455a913b2851eb9ab6f94cc3b97c5265722c6d" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;mostVisibleOverload&quot;&gt;mostVisibleOverload&lt;/strong&gt;(Dsymbol s, Module mod = null);</source>
          <target state="translated">Dsymbol &lt;strong id=&quot;mostVisibleOverload&quot;&gt;mostVisibleOverload&lt;/strong&gt; (Dsymbol s, 모듈 mod = null);</target>
        </trans-unit>
        <trans-unit id="6bc55e9116eca2e0a18110f594ccc1a1b222faee" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;overnext&quot;&gt;overnext&lt;/strong&gt;;</source>
          <target state="translated">기호 오버 &lt;strong id=&quot;overnext&quot;&gt;넥트&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="6f998ebe1daa0a42b7c8113385a9a3ff31e4e90e" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;search&quot;&gt;search&lt;/strong&gt;(ref const Loc loc, Identifier ident, int flags = IgnoreNone);</source>
          <target state="translated">기호 &lt;strong id=&quot;search&quot;&gt;검색&lt;/strong&gt; (참조 const Loc loc, 식별자 식별, int 플래그 = IgnoreNone 참조);</target>
        </trans-unit>
        <trans-unit id="d9aef60a1f0da381fa62cedea3e703d86c8caec5" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;search&quot;&gt;search&lt;/strong&gt;(ref const Loc loc, Identifier ident, int flags = SearchLocalsOnly);</source>
          <target state="translated">기호 &lt;strong id=&quot;search&quot;&gt;검색&lt;/strong&gt; (참조 const Loc loc, 식별자 식별, int 플래그 = SearchLocalsOnly 참조);</target>
        </trans-unit>
        <trans-unit id="02b208db776f82952606d59fc10c27ac71a372a1" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;search_function&quot;&gt;search_function&lt;/strong&gt;(ScopeDsymbol ad, Identifier funcid);</source>
          <target state="translated">기호 &lt;strong id=&quot;search_function&quot;&gt;검색 _&lt;/strong&gt; 함수 (ScopeDsymbol 광고, 식별자 funcid);</target>
        </trans-unit>
        <trans-unit id="c6f6da4481e29b43f5371dd381f64d16bb020eb2" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;sym&quot;&gt;sym&lt;/strong&gt;;</source>
          <target state="translated">Dsymbol의 &lt;strong id=&quot;sym&quot;&gt;SYM&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="3293e7c40b5953f617f5d49b0894e4f7726b94e8" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;symtabLookup&quot;&gt;symtabLookup&lt;/strong&gt;(Dsymbol s, Identifier id);</source>
          <target state="translated">Dymbol &lt;strong id=&quot;symtabLookup&quot;&gt;symtabLookup&lt;/strong&gt; (Dsymbol s, 식별자 ID);</target>
        </trans-unit>
        <trans-unit id="292d8088efaebd0453ef2ade829fbebf5d2ffa4d" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;syntaxCopy&quot;&gt;syntaxCopy&lt;/strong&gt;(Dsymbol s);</source>
          <target state="translated">Dsymbol &lt;strong id=&quot;syntaxCopy&quot;&gt;syntaxCopy&lt;/strong&gt; (Dsymbol s);</target>
        </trans-unit>
        <trans-unit id="4f2d964bc204331c0e5701b7d6577842b5d5d2c5" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;toAlias&quot;&gt;toAlias&lt;/strong&gt;();</source>
          <target state="translated">Dsymbol &lt;strong id=&quot;toAlias&quot;&gt;toAlias&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="d63aa4af0b5bd60b9f77db659b1759fbc7188d93" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;toAlias2&quot;&gt;toAlias2&lt;/strong&gt;();</source>
          <target state="translated">Dymbol &lt;strong id=&quot;toAlias2&quot;&gt;toAlias2&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="c616142ceaa6dd7c99efb38a7262dd9e4a74e2ff" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;toDsymbol&quot;&gt;toDsymbol&lt;/strong&gt;(Scope* sc);</source>
          <target state="translated">심볼 대 &lt;strong id=&quot;toDsymbol&quot;&gt;심볼&lt;/strong&gt; (Scope * sc);</target>
        </trans-unit>
        <trans-unit id="e066699810a3cfe4a775dc1614d4092e48b924c1" translate="yes" xml:space="preserve">
          <source>Dsymbol that generates a scope</source>
          <target state="translated">범위를 생성하는 기호</target>
        </trans-unit>
        <trans-unit id="cc0fbab1260d726e2460fb8256825878dd187711" translate="yes" xml:space="preserve">
          <source>Dsymbol* &lt;code&gt;ps&lt;/code&gt;</source>
          <target state="translated">기호 * &lt;code&gt;ps&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9bf3da6da4ac27f77ae668682aa5bbd52078beee" translate="yes" xml:space="preserve">
          <source>DsymbolTable &lt;strong id=&quot;labtab&quot;&gt;labtab&lt;/strong&gt;;</source>
          <target state="translated">DsymbolTable &lt;strong id=&quot;labtab&quot;&gt;labtab&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="5f805700e007097747cad69493643b293e2e10b6" translate="yes" xml:space="preserve">
          <source>Dsymbol_apply_ft_t &lt;code&gt;fp&lt;/code&gt;</source>
          <target state="translated">Dsymbol_apply_ft_t &lt;code&gt;fp&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="db8646dc08b819447ef527c06deac4cc9e003026" translate="yes" xml:space="preserve">
          <source>Dsymbols</source>
          <target state="translated">Dsymbols</target>
        </trans-unit>
        <trans-unit id="9b6c5433d304473effb9bafc5ebabea2c78462bf" translate="yes" xml:space="preserve">
          <source>Dsymbols &lt;strong id=&quot;obj_symbols_towrite&quot;&gt;obj_symbols_towrite&lt;/strong&gt;;</source>
          <target state="translated">기호 &lt;strong id=&quot;obj_symbols_towrite&quot;&gt;obj_symbols_towrite&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="4fd8c240eec48309328d40f64dfa4c80111856bd" translate="yes" xml:space="preserve">
          <source>Dsymbols* &lt;code&gt;decl&lt;/code&gt;</source>
          <target state="translated">기호 * &lt;code&gt;decl&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="020ceea6d0b7987843bd33375b6b8581024abf03" translate="yes" xml:space="preserve">
          <source>Dsymbols* &lt;code&gt;symbols&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;symbols&lt;/code&gt; * 기호</target>
        </trans-unit>
        <trans-unit id="f54f49b35574d76d126f9bf8be7e61d8604c8097" translate="yes" xml:space="preserve">
          <source>Dsymbols* &lt;code&gt;vtbl&lt;/code&gt;</source>
          <target state="translated">기호 * &lt;code&gt;vtbl&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="095218a7826af0ed580e41f7cac48851e6cfa475" translate="yes" xml:space="preserve">
          <source>Dsymbols* &lt;strong id=&quot;include&quot;&gt;include&lt;/strong&gt;(Scope* sc);</source>
          <target state="translated">기호 * &lt;strong id=&quot;include&quot;&gt;에는&lt;/strong&gt; (Scope * sc);</target>
        </trans-unit>
        <trans-unit id="a2e879bbecbe7013ea6be1dd6d3bde799d27cd35" translate="yes" xml:space="preserve">
          <source>Dsymbols* &lt;strong id=&quot;methodList&quot;&gt;methodList&lt;/strong&gt;;</source>
          <target state="translated">기호 * &lt;strong id=&quot;methodList&quot;&gt;methodList&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="85e56264d0ff9cd817a1e96f31730a6976842b9b" translate="yes" xml:space="preserve">
          <source>DtBuilder &lt;code&gt;dtb&lt;/code&gt;</source>
          <target state="translated">DtBuilder &lt;code&gt;dtb&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="84bc9a0f1bfa58783417cc630153b7860a875bc1" translate="yes" xml:space="preserve">
          <source>DtorDeclaration &lt;strong id=&quot;buildDtor&quot;&gt;buildDtor&lt;/strong&gt;(AggregateDeclaration ad, Scope* sc);</source>
          <target state="translated">DtorDeclaration &lt;strong id=&quot;buildDtor&quot;&gt;buildDtor&lt;/strong&gt; (AggregateDeclaration ad, Scope * sc);</target>
        </trans-unit>
        <trans-unit id="97b38c1c9b9dc77fcb289aa3909fd034cd23c5dc" translate="yes" xml:space="preserve">
          <source>DtorDeclaration &lt;strong id=&quot;buildExternDDtor&quot;&gt;buildExternDDtor&lt;/strong&gt;(AggregateDeclaration ad, Scope* sc);</source>
          <target state="translated">DtorDeclaration &lt;strong id=&quot;buildExternDDtor&quot;&gt;buildExternDDtor&lt;/strong&gt; (AggregateDeclaration ad, Scope * sc);</target>
        </trans-unit>
        <trans-unit id="881fe54811919601458a7e7d557dfc4aeab13911" translate="yes" xml:space="preserve">
          <source>Due to caching byLineCopy can be more memory-efficient than &lt;code&gt;File.byLine.map!idup&lt;/code&gt;.</source>
          <target state="translated">byLineCopy 캐싱으로 인해 &lt;code&gt;File.byLine.map!idup&lt;/code&gt; 보다 메모리 효율적일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b4db7a535677101ee5ada4f464ddc7e4b0fe1093" translate="yes" xml:space="preserve">
          <source>Due to safe type promotion in D, chaining together different character ranges results in a &lt;code&gt;uint&lt;/code&gt; range.  Use &lt;a href=&quot;std_utf#byChar&quot;&gt;byChar&lt;/a&gt;, &lt;a href=&quot;std_utf#byWchar&quot;&gt;byWchar&lt;/a&gt;, and &lt;a href=&quot;std_utf#byDchar&quot;&gt;byDchar&lt;/a&gt; on the ranges to get the type you need.</source>
          <target state="translated">D의 안전한 유형 승격으로 인해 다른 문자 범위를 함께 연결하면 &lt;code&gt;uint&lt;/code&gt; 범위가됩니다. 범위에서 &lt;a href=&quot;std_utf#byChar&quot;&gt;byChar&lt;/a&gt; , &lt;a href=&quot;std_utf#byWchar&quot;&gt;byWchar&lt;/a&gt; 및 &lt;a href=&quot;std_utf#byDchar&quot;&gt;byDchar&lt;/a&gt; 을 사용하여 필요한 유형을 얻으십시오.</target>
        </trans-unit>
        <trans-unit id="245263e86646b52a2631b15f2d5731286c30243f" translate="yes" xml:space="preserve">
          <source>Dumps the full contents of module &lt;code&gt;m&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt;.</source>
          <target state="translated">모듈 &lt;code&gt;m&lt;/code&gt; 의 전체 내용 을 &lt;code&gt;buf&lt;/code&gt; 로 덤프합니다 .</target>
        </trans-unit>
        <trans-unit id="66ae505d132b46de925c396bf17063ad737667f4" translate="yes" xml:space="preserve">
          <source>Duplicate functionality of D1's &lt;code&gt;std.file.listdir()&lt;/code&gt;:</source>
          <target state="translated">D1의 &lt;code&gt;std.file.listdir()&lt;/code&gt; 의 중복 기능 :</target>
        </trans-unit>
        <trans-unit id="0fe85129a7a4025418f0efa7eafb65196f6338fe" translate="yes" xml:space="preserve">
          <source>Duplicate overloads matching the same type in one of the visitors are disallowed.</source>
          <target state="translated">방문자 중 하나에서 동일한 유형과 일치하는 중복 과부하는 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fc16ad21d271cc28fc39654c94b04c509aaeeada" translate="yes" xml:space="preserve">
          <source>Duplicate this container. The resulting container contains a shallow copy of the elements.</source>
          <target state="translated">이 컨테이너를 복제하십시오. 결과 컨테이너에는 요소의 얕은 사본이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="3cff863af2ce18e996162a094cbaf327406df3ed" translate="yes" xml:space="preserve">
          <source>Duplicate this handle.</source>
          <target state="translated">이 핸들을 복제하십시오.</target>
        </trans-unit>
        <trans-unit id="889a9cca7b59b20e1a35bacd792adf966e23a88d" translate="yes" xml:space="preserve">
          <source>Duplicates</source>
          <target state="translated">Duplicates</target>
        </trans-unit>
        <trans-unit id="6e20b589aa6df2b4a8b01c6746eab8d8ca3617e0" translate="yes" xml:space="preserve">
          <source>Duplicates the &lt;code&gt;BitArray&lt;/code&gt; and its contents.</source>
          <target state="translated">&lt;code&gt;BitArray&lt;/code&gt; 와 해당 내용을 복제합니다 .</target>
        </trans-unit>
        <trans-unit id="c85af77478d7179a021e026a9b51351edc52f852" translate="yes" xml:space="preserve">
          <source>Duplicates the array. The elements themselves are not transitively duplicated.</source>
          <target state="translated">배열을 복제합니다. 요소 자체는 전 이적으로 복제되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5e7865574bd7823d0044616e1ee1d6d9cdff3d00" translate="yes" xml:space="preserve">
          <source>Duplicates the container. The elements themselves are not transitively duplicated.</source>
          <target state="translated">컨테이너를 복제합니다. 요소 자체는 전 이적으로 복제되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="70c6d18f48b358cf705cd9d32f4242396d57c82d" translate="yes" xml:space="preserve">
          <source>Duplicates this &lt;code&gt;frontTransversal&lt;/code&gt;. Note that only the encapsulating range of range will be duplicated. Underlying ranges will not be duplicated.</source>
          <target state="translated">이 &lt;code&gt;frontTransversal&lt;/code&gt; 을 복제합니다 . 캡슐화 범위의 범위 만 복제됩니다. 기본 범위는 복제되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1370004da76fa4f3b7a5180fd5436065ef4c7d5b" translate="yes" xml:space="preserve">
          <source>Duration</source>
          <target state="translated">Duration</target>
        </trans-unit>
        <trans-unit id="7c1132f35da45d5af85bf32b2cd42c739981fe8d" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;duration&lt;/code&gt;</source>
          <target state="translated">지속 &lt;code&gt;duration&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f43ea6515e3d20a727bc9ceb0ded3e3985bfea29" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;fracSecs&lt;/code&gt;</source>
          <target state="translated">기간 &lt;code&gt;fracSecs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4db07fc9d025d6dca122dcd081981f03faf8c06d" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;period&lt;/code&gt;</source>
          <target state="translated">기간 &lt;code&gt;period&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d1058c37a804c6465609fd319f856edc7b95cd41" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="translated">기간 &lt;code&gt;rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bd859acef007a458701d97ec4e9f4657ea6508a7" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;timeout&lt;/code&gt;</source>
          <target state="translated">기간 &lt;code&gt;timeout&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="acb4f6be6fa038d94a6684fa91b79637f83566a5" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;tmout&lt;/code&gt;</source>
          <target state="translated">지속 시간 &lt;code&gt;tmout&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="437f51f0e93fcf9a848d5569e4dfa0e920813016" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;utcOffset&lt;/code&gt;</source>
          <target state="translated">지속 시간 &lt;code&gt;utcOffset&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="768274ee3975a86c0844fdcb16d2a35285f29f34" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;val&lt;/code&gt;</source>
          <target state="translated">기간 &lt;code&gt;val&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="84d6dd410070e6a7e55306ddd911ce9d1fa874c6" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;value&lt;/code&gt;</source>
          <target state="translated">기간 &lt;code&gt;value&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4c2bafb9fe842c627b8e34a5a41cb92e24c037eb" translate="yes" xml:space="preserve">
          <source>Duration &lt;strong id=&quot;maxCollectionTime&quot;&gt;maxCollectionTime&lt;/strong&gt;;</source>
          <target state="translated">지속 시간 &lt;strong id=&quot;maxCollectionTime&quot;&gt;maxCollectionTime&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="615947f51ef7a81f57bc3da2067a415c70840e4d" translate="yes" xml:space="preserve">
          <source>Duration &lt;strong id=&quot;maxPauseTime&quot;&gt;maxPauseTime&lt;/strong&gt;;</source>
          <target state="translated">지속 시간 &lt;strong id=&quot;maxPauseTime&quot;&gt;maxPauseTime&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="5ad2215ff4ec69bcc4c35cb6884b6c2e949cde29" translate="yes" xml:space="preserve">
          <source>Duration &lt;strong id=&quot;totalCollectionTime&quot;&gt;totalCollectionTime&lt;/strong&gt;;</source>
          <target state="translated">기간 &lt;strong id=&quot;totalCollectionTime&quot;&gt;totalCollectionTime&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="b1d97bac08417469a47a741116e255e1ede2c38d" translate="yes" xml:space="preserve">
          <source>Duration &lt;strong id=&quot;totalPauseTime&quot;&gt;totalPauseTime&lt;/strong&gt;;</source>
          <target state="translated">기간 &lt;strong id=&quot;totalPauseTime&quot;&gt;totalPauseTime&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="365e9c607e20865c871c53952a3517838814d291" translate="yes" xml:space="preserve">
          <source>Duration timeout value.</source>
          <target state="translated">지속 시간 제한 시간 값</target>
        </trans-unit>
        <trans-unit id="7346ab1d5fb6d44aac4cf947a60e019f7fe10b6d" translate="yes" xml:space="preserve">
          <source>Duration, how long to wait. If &lt;code&gt;duration&lt;/code&gt; is negative, won't wait at all.</source>
          <target state="translated">기간, 기다릴 시간. 경우 &lt;code&gt;duration&lt;/code&gt; 음, 전혀 기다리지 않습니다.</target>
        </trans-unit>
        <trans-unit id="799b124c8daf8718469cbae4456491d6aecf27e8" translate="yes" xml:space="preserve">
          <source>Duration[fun.length] &lt;strong id=&quot;benchmark&quot;&gt;benchmark&lt;/strong&gt;(fun...)(uint n);</source>
          <target state="translated">기간 [fun.length] &lt;strong id=&quot;benchmark&quot;&gt;벤치 마크&lt;/strong&gt; (fun ...) (uint n);</target>
        </trans-unit>
        <trans-unit id="01a2cc2568b87a3a494bd2eafcbbdf44739d7fa2" translate="yes" xml:space="preserve">
          <source>Durations of Time</source>
          <target state="translated">지속 시간</target>
        </trans-unit>
        <trans-unit id="07bb208f468d8b3ddd81b6ffef4767871ab2e0b2" translate="yes" xml:space="preserve">
          <source>Dynamic Array Layout</source>
          <target state="translated">동적 배열 레이아웃</target>
        </trans-unit>
        <trans-unit id="b2b34c5b7f4476c5b543850932f16344548fc1d9" translate="yes" xml:space="preserve">
          <source>Dynamic Array Properties</source>
          <target state="translated">동적 배열 속성</target>
        </trans-unit>
        <trans-unit id="6589f7c7fc3ae1ddd6d9ea0628690494a52e6667" translate="yes" xml:space="preserve">
          <source>Dynamic Arrays</source>
          <target state="translated">동적 배열</target>
        </trans-unit>
        <trans-unit id="de7306215588ef2471751e42c6ef7a7796dbbd5c" translate="yes" xml:space="preserve">
          <source>Dynamic Initialization of Structs</source>
          <target state="translated">구조체의 동적 초기화</target>
        </trans-unit>
        <trans-unit id="6a1ec417f9656bfa58ac913f9a623361c31817a1" translate="yes" xml:space="preserve">
          <source>Dynamic String Object</source>
          <target state="translated">동적 문자열 객체</target>
        </trans-unit>
        <trans-unit id="8dfe7ac24e000242d3210236b955fc6d93f77174" translate="yes" xml:space="preserve">
          <source>Dynamic allocator interface. Code that defines allocators ultimately implements this interface. This should be used wherever a uniform type is required for encapsulating various allocator implementations.</source>
          <target state="translated">동적 할당 자 인터페이스. 할당자를 정의하는 코드는 궁극적으로이 인터페이스를 구현합니다. 이것은 다양한 할당 자 구현을 캡슐화하기 위해 균일 한 유형이 필요한 경우에 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="e6e94d0dd79dd4b04ec17eaa625ce2daf2263cb8" translate="yes" xml:space="preserve">
          <source>Dynamic array properties are:</source>
          <target state="translated">동적 배열 속성은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fcf3f6b5602d426a76e64859371a3b8e82326184" translate="yes" xml:space="preserve">
          <source>Dynamic array, no dimension</source>
          <target state="translated">치수가없는 동적 배열</target>
        </trans-unit>
        <trans-unit id="7d44854713dee942aa855be9529ca9049d1f51a4" translate="yes" xml:space="preserve">
          <source>Dynamic arrays</source>
          <target state="translated">동적 배열</target>
        </trans-unit>
        <trans-unit id="1b1f7143c558a88bd72bd07ce563ba1179684e46" translate="yes" xml:space="preserve">
          <source>Dynamic arrays (though slices of static arrays work) and associative arrays</source>
          <target state="translated">동적 배열 (정적 배열 조각은 작동하지만) 및 연관 배열</target>
        </trans-unit>
        <trans-unit id="6502e52c892b54fece51dcff086d445a369a930e" translate="yes" xml:space="preserve">
          <source>Dynamic arrays are formatted as input ranges.  Specializations:</source>
          <target state="translated">동적 배열은 입력 범위로 형식이 지정됩니다. 전문화 :</target>
        </trans-unit>
        <trans-unit id="fd2b48e308cffeab080f92b79babbd14ca12a9b6" translate="yes" xml:space="preserve">
          <source>Dynamic arrays are initialized to having 0 elements.</source>
          <target state="translated">동적 배열은 0 개의 요소를 갖도록 초기화됩니다.</target>
        </trans-unit>
        <trans-unit id="16a59a2d2944e36cc40d33dc27c3f04f2148ecb0" translate="yes" xml:space="preserve">
          <source>Dynamic arrays are returned with the pointer in EDX and the length in EAX.</source>
          <target state="translated">동적 배열은 포인터를 EDX로, 길이는 EAX로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4ce2caad71bf4dd56046e9edc2df9b7e23f1b563" translate="yes" xml:space="preserve">
          <source>Dynamic arrays consist of a length and a pointer to the array data. Multiple dynamic arrays can share all or parts of the array data.</source>
          <target state="translated">동적 배열은 길이와 배열 데이터에 대한 포인터로 구성됩니다. 여러 동적 배열은 배열 데이터의 전부 또는 일부를 공유 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b54578a708d1177bfc68570440611b3f68c4e3d7" translate="yes" xml:space="preserve">
          <source>Dynamic binding -- Qt's Signals and Slots vs Objective-C</source>
          <target state="translated">동적 바인딩-Qt의 신호 및 슬롯 대 Objective-C</target>
        </trans-unit>
        <trans-unit id="a26723c7c3553b927f3ca69df439741cc9ff45f0" translate="yes" xml:space="preserve">
          <source>Dynamic shared allocator interface. Code that defines allocators shareable across threads ultimately implements this interface. This should be used wherever a uniform type is required for encapsulating various allocator implementations.</source>
          <target state="translated">동적 공유 할당 자 인터페이스. 스레드간에 공유 가능한 할당자를 정의하는 코드는 궁극적으로이 인터페이스를 구현합니다. 이것은 다양한 할당 자 구현을 캡슐화하기 위해 균일 한 유형이 필요한 경우에 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="758e372147a13eab85e0e2348816aeca5a5cf87b" translate="yes" xml:space="preserve">
          <source>Dynamically Typed Value Object</source>
          <target state="translated">동적으로 입력 된 값 개체</target>
        </trans-unit>
        <trans-unit id="23e36053f3d03d5f62e159c1169e1004cb311b5b" translate="yes" xml:space="preserve">
          <source>Dynamically allocates (using &lt;code&gt;alloc&lt;/code&gt;) and then creates in the memory allocated an object of type &lt;code&gt;T&lt;/code&gt;, using &lt;code&gt;args&lt;/code&gt; (if any) for its initialization. Initialization occurs in the memory allocated and is otherwise semantically the same as &lt;code&gt;T(args)&lt;/code&gt;. (Note that using &lt;code&gt;alloc.make!(T[])&lt;/code&gt; creates a pointer to an (empty) array of &lt;code&gt;T&lt;/code&gt;s, not an array. To use an allocator to allocate and initialize an array, use &lt;code&gt;alloc.makeArray!T&lt;/code&gt; described below.)</source>
          <target state="translated">동적으로 할당 ( &lt;code&gt;alloc&lt;/code&gt; 사용 ) 한 다음 메모리에 초기화를 위해 &lt;code&gt;args&lt;/code&gt; (있는 경우)를 사용하여 &lt;code&gt;T&lt;/code&gt; 유형의 객체를 할당합니다 . 초기화는 할당 된 메모리에서 발생하며 의미 상 &lt;code&gt;T(args)&lt;/code&gt; 와 동일 합니다. (참고하여 해당 &lt;code&gt;alloc.make!(T[])&lt;/code&gt; 의 (빈) 배열 포인터 생성 &lt;code&gt;T&lt;/code&gt; . S 아니라 배열을 할당하고 어레이를 초기화 사용하도록 할당을 사용하기 &lt;code&gt;alloc.makeArray!T&lt;/code&gt; 후술. )</target>
        </trans-unit>
        <trans-unit id="34ce244b6bf5d752a3f5544473bfc0e3809802c5" translate="yes" xml:space="preserve">
          <source>Dynamically allocates (using the appropriate allocator chosen with &lt;code&gt;allocatorFor!T&lt;/code&gt;) and then creates in the memory allocated an object of type &lt;code&gt;T&lt;/code&gt;, using &lt;code&gt;args&lt;/code&gt; (if any) for its initialization. Initialization occurs in the memory allocated and is otherwise semantically the same as &lt;code&gt;T(args)&lt;/code&gt;. (Note that using &lt;code&gt;make!(T[])&lt;/code&gt; creates a pointer to an (empty) array of &lt;code&gt;T&lt;/code&gt;s, not an array. To allocate and initialize an array, use &lt;code&gt;makeArray!T&lt;/code&gt; described below.)</source>
          <target state="translated">동적으로 할당하고 ( &lt;code&gt;allocatorFor!T&lt;/code&gt; 선택한 적절한 할당자를 사용하여 ) 초기화를 위해 &lt;code&gt;args&lt;/code&gt; (있는 경우)를 사용하여 할당 된 &lt;code&gt;T&lt;/code&gt; 유형의 객체를 메모리에 만듭니다 . 초기화는 할당 된 메모리에서 발생하며 의미 상 &lt;code&gt;T(args)&lt;/code&gt; 와 동일 합니다. (참고하여 해당 &lt;code&gt;make!(T[])&lt;/code&gt; 의 (빈) 배열 포인터 생성 &lt;code&gt;T&lt;/code&gt; S 아닌 배열. 할당 및 배열을 초기화하기 위해 사용 &lt;code&gt;makeArray!T&lt;/code&gt; 후술).</target>
        </trans-unit>
        <trans-unit id="e0184adedf913b076626646d3f52c3b49c39ad6d" translate="yes" xml:space="preserve">
          <source>E</source>
          <target state="translated">E</target>
        </trans-unit>
        <trans-unit id="c87a673760938363adec32d38a7ce2e63ff06dc4" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;c&lt;/code&gt;</source>
          <target state="translated">전자 &lt;code&gt;c&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9cab13dd2ab0edecf5f07f49ff5c30ac749537ea" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;e&lt;/code&gt;</source>
          <target state="translated">E의 &lt;code&gt;e&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="654b3cd931994406b92e783e53bd21d8d15be1e3" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;element&lt;/code&gt;</source>
          <target state="translated">전자 &lt;code&gt;element&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6fa7346c4b309ed05ec509280861ca5282502720" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;end&lt;/code&gt;</source>
          <target state="translated">E &lt;code&gt;end&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="36696ce19b713f0e7192d8af3d4e8d66b818b117" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;expression&lt;/code&gt;</source>
          <target state="translated">E &lt;code&gt;expression&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="41178eef3b8d5ea8f259ae34efc32aa2178b878b" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;lPar&lt;/code&gt;</source>
          <target state="translated">E &lt;code&gt;lPar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f1451714e15dd7f03412e8b3df15c9865899b794" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;needle&lt;/code&gt;</source>
          <target state="translated">전자 &lt;code&gt;needle&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="da623f5b68b27f40326d87a65ee8eabbb9a543cb" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;pivot&lt;/code&gt;</source>
          <target state="translated">전자 &lt;code&gt;pivot&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3d579a7cdba3a442fd745d93d48ef920a780541e" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;rPar&lt;/code&gt;</source>
          <target state="translated">E &lt;code&gt;rPar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2e6d8c3d877bc4d0d225fa90451158b1d112a2ce" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;result&lt;/code&gt;</source>
          <target state="translated">E &lt;code&gt;result&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b49a3ab1144291faa187044ae19832f647014922" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;seed&lt;/code&gt;</source>
          <target state="translated">전자 &lt;code&gt;seed&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1c3d28f03f6fc526462dee33dea8868b1064430f" translate="yes" xml:space="preserve">
          <source>E &lt;strong id=&quot;moveAt&quot;&gt;moveAt&lt;/strong&gt;(size_t n);</source>
          <target state="translated">E &lt;strong id=&quot;moveAt&quot;&gt;moveAt&lt;/strong&gt; (size_t n);</target>
        </trans-unit>
        <trans-unit id="aeaa924cdd1fb426235a2a89796ef7f817847e58" translate="yes" xml:space="preserve">
          <source>E &lt;strong id=&quot;moveAt&quot;&gt;moveAt&lt;/strong&gt;(size_t);</source>
          <target state="translated">E &lt;strong id=&quot;moveAt&quot;&gt;moveAt&lt;/strong&gt; (size_t);</target>
        </trans-unit>
        <trans-unit id="4b6060bed99df55889fedcc7ebd1dda48edc20bc" translate="yes" xml:space="preserve">
          <source>E &lt;strong id=&quot;moveBack&quot;&gt;moveBack&lt;/strong&gt;();</source>
          <target state="translated">전자 &lt;strong id=&quot;moveBack&quot;&gt;이동&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="70ba5bb514291f484fb16aff803acb49985b81d2" translate="yes" xml:space="preserve">
          <source>E &lt;strong id=&quot;moveFront&quot;&gt;moveFront&lt;/strong&gt;();</source>
          <target state="translated">E &lt;strong id=&quot;moveFront&quot;&gt;moveFront&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="4bcc66f6ce127618b0ccfebf4dd0276bd0404552" translate="yes" xml:space="preserve">
          <source>E &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt;(size_t);</source>
          <target state="translated">E &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt; (size_t);</target>
        </trans-unit>
        <trans-unit id="22bec8dd2b08e66c06f91112cd2924b9824f4fbb" translate="yes" xml:space="preserve">
          <source>EAX allocated data, null if stack overflows</source>
          <target state="translated">EAX 할당 데이터, 스택이 오버플로되면 null</target>
        </trans-unit>
        <trans-unit id="5bd5f8d7ae14ebe0f410005fa0ee4a2df8d30846" translate="yes" xml:space="preserve">
          <source>EAX, ECX, EDX are scratch registers and can be destroyed by a function.</source>
          <target state="translated">EAX, ECX, EDX는 스크래치 레지스터이며 기능에 의해 파괴 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3a86e3e3cac4abfb1ddb991c6016eb447bfb5086" translate="yes" xml:space="preserve">
          <source>EBX, ESI, EDI, EBP must be preserved across function calls.</source>
          <target state="translated">EBX, ESI, EDI, EBP는 함수 호출에서 유지되어야합니다.</target>
        </trans-unit>
        <trans-unit id="fd8f8916ced6868f49d5edae3f52ca90edef07ea" translate="yes" xml:space="preserve">
          <source>EF BB BF</source>
          <target state="translated">EF BB BF</target>
        </trans-unit>
        <trans-unit id="2abe262f3d9c19b48e58a958d307e0e7e6c94f0f" translate="yes" xml:space="preserve">
          <source>EFLAGS is assumed destroyed across function calls, except for the direction flag which must be forward.</source>
          <target state="translated">EFLAGS는 전달되어야하는 방향 플래그를 제외하고 함수 호출에서 파괴 된 것으로 가정합니다.</target>
        </trans-unit>
        <trans-unit id="a415e9a8573efb1bbda1a90eb747ad5f4c19fa97" translate="yes" xml:space="preserve">
          <source>EH Table Entry</source>
          <target state="translated">EH 테이블 엔트리</target>
        </trans-unit>
        <trans-unit id="4c7a265fd1e6b68c05bde4f42c601389064c93ed" translate="yes" xml:space="preserve">
          <source>EH Table Segment</source>
          <target state="translated">EH 테이블 세그먼트</target>
        </trans-unit>
        <trans-unit id="5bc604777adb22ae457a5473c397202e00689e23" translate="yes" xml:space="preserve">
          <source>EMPTY</source>
          <target state="translated">EMPTY</target>
        </trans-unit>
        <trans-unit id="d205abee3d2a71688a6b66568be289a94050031c" translate="yes" xml:space="preserve">
          <source>END</source>
          <target state="translated">END</target>
        </trans-unit>
        <trans-unit id="b3b0bdfd557f6b7a88d34ecfb7cb2aafce7efc42" translate="yes" xml:space="preserve">
          <source>EXPERIMENTAL</source>
          <target state="translated">EXPERIMENTAL</target>
        </trans-unit>
        <trans-unit id="235f0479b81b99352344ba40f72272e7f500760e" translate="yes" xml:space="preserve">
          <source>E[] &lt;code&gt;array&lt;/code&gt;</source>
          <target state="translated">E [] &lt;code&gt;array&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30968cd89d2de89aae2990a42c8165e26f50f9a1" translate="yes" xml:space="preserve">
          <source>E[] &lt;code&gt;elems&lt;/code&gt;</source>
          <target state="translated">E [] &lt;code&gt;elems&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c044a741516f01488c89439ef580a3ff478233bf" translate="yes" xml:space="preserve">
          <source>E[] &lt;code&gt;subject&lt;/code&gt;</source>
          <target state="translated">E [] &lt;code&gt;subject&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f217d5beff31c1ca2b1848f38ef906faae597466" translate="yes" xml:space="preserve">
          <source>E[] &lt;strong id=&quot;encode&quot;&gt;encode&lt;/strong&gt;(E)(dchar c);</source>
          <target state="translated">E [] &lt;strong id=&quot;encode&quot;&gt;인코딩&lt;/strong&gt; (E) (dchar c);</target>
        </trans-unit>
        <trans-unit id="fd56c4205cae90ba13324d33630ab9d062248305" translate="yes" xml:space="preserve">
          <source>E[] &lt;strong id=&quot;replace&quot;&gt;replace&lt;/strong&gt;(E, R1, R2)(E[] subject, R1 from, R2 to)</source>
          <target state="translated">E [] &lt;strong id=&quot;replace&quot;&gt;대체&lt;/strong&gt; (E, R1, R2) (E [] 주제, R1에서 R2로)</target>
        </trans-unit>
        <trans-unit id="3f51610d23e4abe8c977115a859bbe3315b9eef7" translate="yes" xml:space="preserve">
          <source>E[] &lt;strong id=&quot;replaceFirst&quot;&gt;replaceFirst&lt;/strong&gt;(E, R1, R2)(E[] subject, R1 from, R2 to)</source>
          <target state="translated">E [] &lt;strong id=&quot;replaceFirst&quot;&gt;replaceFirst&lt;/strong&gt; (E, R1, R2) (E [] 주제, R1에서 R2로)</target>
        </trans-unit>
        <trans-unit id="eeafbf65fd3a9aa3deb4cbca03e3644a0587b086" translate="yes" xml:space="preserve">
          <source>E[] &lt;strong id=&quot;replaceLast&quot;&gt;replaceLast&lt;/strong&gt;(E, R1, R2)(E[] subject, R1 from, R2 to)</source>
          <target state="translated">E [] &lt;strong id=&quot;replaceLast&quot;&gt;replaceLast&lt;/strong&gt; (E, R1, R2) (E [] 주제, R1에서 R2로)</target>
        </trans-unit>
        <trans-unit id="e6ba4ade5ebf9a7e06a220ee8879663501891f2b" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt; in the</source>
          <target state="translated">각 &lt;a href=&quot;#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt; 에서</target>
        </trans-unit>
        <trans-unit id="970c6cbee0d5ba3d3d3bc667ccac13fe12be1735" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt; in the</source>
          <target state="translated">각 &lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt; 에서</target>
        </trans-unit>
        <trans-unit id="631d7ded095224de62f48a96e5644c6398acd903" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;Tuple&lt;/code&gt; is the same length.</source>
          <target state="translated">각 &lt;code&gt;Tuple&lt;/code&gt; 의 길이는 같습니다.</target>
        </trans-unit>
        <trans-unit id="e3399020b909958cac85e153ab516f6c7694ec40" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;front&lt;/code&gt; will not persist after &lt;code&gt;popFront&lt;/code&gt; is called, so the caller must copy its contents (e.g. by calling &lt;code&gt;to!string&lt;/code&gt;) when retention is needed. If the caller needs to retain a copy of every line, use the &lt;a href=&quot;#byLineCopy&quot;&gt;&lt;code&gt;byLineCopy&lt;/code&gt;&lt;/a&gt; function instead.</source>
          <target state="translated">&lt;code&gt;popFront&lt;/code&gt; 가 호출 된 후에는 각 &lt;code&gt;front&lt;/code&gt; 가 지속되지 않으므로 호출자는 보유가 필요할 때 내용을 복사해야합니다 (예 : &lt;code&gt;to!string&lt;/code&gt; ). 호출자가 모든 회선의 사본을 보유해야하는 경우, 대신 &lt;a href=&quot;#byLineCopy&quot;&gt; &lt;code&gt;byLineCopy&lt;/code&gt; &lt;/a&gt; 함수를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="b7a44f23b11cb96b96cd2ba0915faa0f052e0b5c" translate="yes" xml:space="preserve">
          <source>Each argument (including any &lt;code&gt;this&lt;/code&gt; pointer) is compared against the function's corresponding parameter, to determine the match level for that argument. The match level for a function is the</source>
          <target state="translated">각 인수 ( &lt;code&gt;this&lt;/code&gt; 포인터 포함)는 해당 인수의 일치 레벨을 판별하기 위해 함수의 해당 매개 변수와 비교됩니다. 함수의 일치 수준은</target>
        </trans-unit>
        <trans-unit id="bb45b718916691da1989010513d172008ff92bab" translate="yes" xml:space="preserve">
          <source>Each documentation comment is associated with a declaration. If the documentation comment is on a line by itself or with only whitespace to the left, it refers to the next declaration. Multiple documentation comments applying to the same declaration are concatenated. Documentation comments not associated with a declaration are ignored. Documentation comments preceding the</source>
          <target state="translated">각 문서 주석은 선언과 연관되어 있습니다. 문서 주석이 그 자체로 또는 왼쪽에 공백 만있는 경우 다음 선언을 나타냅니다. 동일한 선언에 적용되는 여러 문서 주석이 연결됩니다. 선언과 관련이없는 문서 주석은 무시됩니다. 이전의 설명서 주석</target>
        </trans-unit>
        <trans-unit id="edbe8fa5098bb9e7391f688ef6b6ee2314274823" translate="yes" xml:space="preserve">
          <source>Each element is a &lt;a href=&quot;std_typecons#Tuple&quot;&gt;&lt;code&gt;std.typecons.Tuple&lt;/code&gt;&lt;/a&gt; containing the index and the element, in that order, where the index member is named &lt;code&gt;index&lt;/code&gt; and the element member is named &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">각 요소는 인덱스와 요소를 순서대로 포함 하는 &lt;a href=&quot;std_typecons#Tuple&quot;&gt; &lt;code&gt;std.typecons.Tuple&lt;/code&gt; &lt;/a&gt; 이며 인덱스 멤버는 &lt;code&gt;index&lt;/code&gt; 이고 요소 멤버는 &lt;code&gt;value&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f713367635244c4763db8b557037fbd71862c126" translate="yes" xml:space="preserve">
          <source>Each expression has a unique full expression.</source>
          <target state="translated">각 표현식에는 고유 한 전체 표현식이 있습니다.</target>
        </trans-unit>
        <trans-unit id="045e249c636ce92b7d03d5926827a365b72e955d" translate="yes" xml:space="preserve">
          <source>Each flag represents a field that can be included in the JSON output.</source>
          <target state="translated">각 플래그는 JSON 출력에 포함될 수있는 필드를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="5177bac79e351e65e9f095012536f0d31e1946c9" translate="yes" xml:space="preserve">
          <source>Each record should contain the same number of fields</source>
          <target state="translated">각 레코드는 동일한 수의 필드를 포함해야합니다</target>
        </trans-unit>
        <trans-unit id="0442bfb8225327c8e19427dd3466d5d9e7bdf4e2" translate="yes" xml:space="preserve">
          <source>Each tracked pointer is in one of the following states:</source>
          <target state="translated">추적 된 각 포인터는 다음 상태 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="1ed967b9db86d0b5204db6ba5bddc65d5e95f444" translate="yes" xml:space="preserve">
          <source>Eager parallel map. The eagerness of this function means it has less overhead than the lazily evaluated &lt;code&gt;TaskPool.map&lt;/code&gt; and should be preferred where the memory requirements of eagerness are acceptable. &lt;code&gt;functions&lt;/code&gt; are the functions to be evaluated, passed as template alias parameters in a style similar to &lt;a href=&quot;std_algorithm_iteration#map&quot;&gt;&lt;code&gt;std.algorithm.iteration.map&lt;/code&gt;&lt;/a&gt;. The first argument must be a random access range. For performance reasons, amap will assume the range elements have not yet been initialized. Elements will be overwritten without calling a destructor nor doing an assignment. As such, the range must not contain meaningful data: either un-initialized objects, or objects in their &lt;code&gt;.init&lt;/code&gt; state.</source>
          <target state="translated">열렬한 병렬 맵. 이 기능의 간절함은 느리게 평가 된 &lt;code&gt;TaskPool.map&lt;/code&gt; 보다 오버 헤드가 적으며 간절한 메모리 요구 사항이 허용되는 경우 선호되어야합니다. &lt;code&gt;functions&lt;/code&gt; 는 &lt;a href=&quot;std_algorithm_iteration#map&quot;&gt; &lt;code&gt;std.algorithm.iteration.map&lt;/code&gt; &lt;/a&gt; 과 유사한 스타일로 템플리트 별명 매개 변수로 전달되는 평가할 함수 입니다. 첫 번째 인수는 랜덤 액세스 범위 여야합니다. 성능상의 이유로 amap은 범위 요소가 아직 초기화되지 않은 것으로 가정합니다. 소멸자를 호출하거나 할당하지 않고 요소를 덮어 씁니다. &lt;code&gt;.init&lt;/code&gt; 범위에는 초기화되지 않은 객체 또는 .init 상태의 객체와 같은 의미있는 데이터가 포함 되어서 는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="6c6575a18eb9b2fb3966e6ef26042f110228071b" translate="yes" xml:space="preserve">
          <source>Eagerly advances &lt;code&gt;r&lt;/code&gt; itself (not a copy) exactly &lt;code&gt;n&lt;/code&gt; times (by calling &lt;code&gt;r.popFront&lt;/code&gt;). &lt;code&gt;popFrontExactly&lt;/code&gt; takes &lt;code&gt;r&lt;/code&gt; by &lt;code&gt;ref&lt;/code&gt;, so it mutates the original range. Completes in &amp;Omicron;(&lt;code&gt;1&lt;/code&gt;) steps for ranges that support slicing, and have either length or are infinite. Completes in &amp;Omicron;(&lt;code&gt;n&lt;/code&gt;) time for all other ranges.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; 자체를 (복사본 아님) 정확하게 &lt;code&gt;n&lt;/code&gt; 번 ( &lt;code&gt;r.popFront&lt;/code&gt; 호출하여 ) 정확하게 진행 합니다 . &lt;code&gt;popFrontExactly&lt;/code&gt; 는 &lt;code&gt;r&lt;/code&gt; by &lt;code&gt;ref&lt;/code&gt; 를 취 하므로 원래 범위를 변경합니다. 슬라이싱을 지원하고 길이가 있거나 무한대의 범위에 대해 &amp;Omicron; ( &lt;code&gt;1&lt;/code&gt; ) 단계로 완료됩니다 . 다른 모든 범위에 대해 &amp;Omicron; ( &lt;code&gt;n&lt;/code&gt; ) 시간 내에 완료 합니다.</target>
        </trans-unit>
        <trans-unit id="013c49ea1dde714e0a3a2fb0379b67f24fba5a76" translate="yes" xml:space="preserve">
          <source>Eagerly concatenates all of the ranges in &lt;code&gt;ror&lt;/code&gt; together (with the GC) into one array using &lt;code&gt;sep&lt;/code&gt; as the separator if present.</source>
          <target state="translated">존재하는 경우 &lt;code&gt;sep&lt;/code&gt; 를 분리 자로 사용하여 (GC와 함께) &lt;code&gt;ror&lt;/code&gt; 의 모든 범위 를 하나의 배열로 열심히 연결합니다 .</target>
        </trans-unit>
        <trans-unit id="c0675dcff491ec3b808cdc7c8d2ede81bbb0ddeb" translate="yes" xml:space="preserve">
          <source>Eagerly evaluates and caches another range's &lt;code&gt;front&lt;/code&gt;.</source>
          <target state="translated">다른 범위의 &lt;code&gt;front&lt;/code&gt; 를 열심히 평가하고 캐시 합니다.</target>
        </trans-unit>
        <trans-unit id="34fb6db85c18082d6a3fa90368894fb8d976e6bd" translate="yes" xml:space="preserve">
          <source>Eagerly iterates over &lt;code&gt;r&lt;/code&gt; and calls &lt;code&gt;fun&lt;/code&gt; over each element.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; 을 반복적으로 반복하고 각 요소에 대해 &lt;code&gt;fun&lt;/code&gt; 을 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="f4e28a21c2fa843876b16d9be4d1cc2f403c77b2" translate="yes" xml:space="preserve">
          <source>Eagerly split a range or string into an array.</source>
          <target state="translated">범위 또는 문자열을 배열로 열심히 나눕니다.</target>
        </trans-unit>
        <trans-unit id="2d87236b0de760733175e1874c38a59c48b27028" translate="yes" xml:space="preserve">
          <source>Eagerly splits &lt;code&gt;range&lt;/code&gt; into an array, using &lt;code&gt;sep&lt;/code&gt; as the delimiter.</source>
          <target state="translated">&lt;code&gt;sep&lt;/code&gt; 를 구분 기호로 사용하여 &lt;code&gt;range&lt;/code&gt; 를 배열로 쉽게 분할 합니다 .</target>
        </trans-unit>
        <trans-unit id="d27eae008f59d8f1f91c00161f3159b86155fb96" translate="yes" xml:space="preserve">
          <source>Effectively a namespace to make it clear that the methods it contains are getting the time from the system clock. It cannot be instantiated.</source>
          <target state="translated">효과적으로 포함 된 메서드가 시스템 시계에서 시간을 가져오고 있음을 분명히하기위한 네임 스페이스입니다. 인스턴스화 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="a916cbf64fcae583b211aefc5aaa6379657e245f" translate="yes" xml:space="preserve">
          <source>Effectively it's a forward range of Captures!R, produced by lazily searching for matches in a given input.</source>
          <target state="translated">실제로 지정된 입력에서 일치하는 항목을 느리게 검색하여 생성 된 Captures! R의 순방향 범위입니다.</target>
        </trans-unit>
        <trans-unit id="aca7b73e0a41a8787ac878b76dda80e96536be1b" translate="yes" xml:space="preserve">
          <source>Effectively this creates a 'tester' lambda suitable for algorithms like std.algorithm.find that take unary predicates.</source>
          <target state="translated">효과적으로 이것은 단항 술어를 취하는 std.algorithm.find와 같은 알고리즘에 적합한 '테스터'람다를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="cd9f4825654c8b3616fba4aa5643f7ea0757d86c" translate="yes" xml:space="preserve">
          <source>Efficiently calculates x * 2&lt;sup&gt;n&lt;/sup&gt;.</source>
          <target state="translated">x * 2 &lt;sup&gt;n을&lt;/sup&gt; 효율적으로 계산 합니다.</target>
        </trans-unit>
        <trans-unit id="14aca9bf4e0924cef20dae33b10f37cdb469f89b" translate="yes" xml:space="preserve">
          <source>Egyptian Hieroglyphs</source>
          <target state="translated">이집트 상형 문자</target>
        </trans-unit>
        <trans-unit id="bb212465dbae7203df4ab62ae8863407da33e722" translate="yes" xml:space="preserve">
          <source>Egyptian_Hieroglyphs</source>
          <target state="translated">Egyptian_Hieroglyphs</target>
        </trans-unit>
        <trans-unit id="9bf6d61222f740d6395d5c0a917b01c65ac7a82e" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;SocketOption.SNDTIMEO&lt;/code&gt; or &lt;code&gt;SocketOption.RCVTIMEO&lt;/code&gt;.</source>
          <target state="translated">어느 &lt;code&gt;SocketOption.SNDTIMEO&lt;/code&gt; 또는 &lt;code&gt;SocketOption.RCVTIMEO&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b538213d432e073149fc8ce936d87efd13bbae8b" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;front&lt;/code&gt; and &lt;code&gt;back&lt;/code&gt; are disjoint, or &lt;code&gt;back&lt;/code&gt; is reachable from &lt;code&gt;front&lt;/code&gt; and &lt;code&gt;front&lt;/code&gt; is not reachable from &lt;code&gt;back&lt;/code&gt;.</source>
          <target state="translated">어느 쪽의 &lt;code&gt;front&lt;/code&gt; 과 &lt;code&gt;back&lt;/code&gt; 분리 된, 또는 &lt;code&gt;back&lt;/code&gt; 에서 연결할 수있는 &lt;code&gt;front&lt;/code&gt; 과 &lt;code&gt;front&lt;/code&gt; 에서 접근 할 수 없습니다 &lt;code&gt;back&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3bb6162d792c8db1e60f256982fb8e204e3145a0" translate="yes" xml:space="preserve">
          <source>Either a single element, or a &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;forward range&lt;/a&gt; of elements, to be evaluated in turn against each element in &lt;code&gt;haystack&lt;/code&gt; under the given predicate.</source>
          <target state="translated">주어진 술어 에서 &lt;code&gt;haystack&lt;/code&gt; 각 요소에 대해 단일 요소 또는 &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;순방향&lt;/a&gt; 요소 범위 를 차례로 평가 합니다.</target>
        </trans-unit>
        <trans-unit id="56799ecf425da0fe03950f720256493fc8f97323" translate="yes" xml:space="preserve">
          <source>Either a suitable block of &lt;code&gt;n&lt;/code&gt; bytes aligned at &lt;code&gt;a&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">어느 쪽의 적합한 블록 &lt;code&gt;n&lt;/code&gt; 로 정렬 된 바이트 또는 &lt;code&gt;null&lt;/code&gt; . &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cce4bcaf50fdceff52e6b76b4f40f1e91193a96c" translate="yes" xml:space="preserve">
          <source>Elem &lt;strong id=&quot;back&quot;&gt;back&lt;/strong&gt;();</source>
          <target state="translated">ELEM &lt;strong id=&quot;back&quot;&gt;다시&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="a64a0dd8f8de41ca8f9155d1c41f1246f2b78d16" translate="yes" xml:space="preserve">
          <source>Elem &lt;strong id=&quot;front&quot;&gt;front&lt;/strong&gt;();</source>
          <target state="translated">엘렘 &lt;strong id=&quot;front&quot;&gt;전선&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="07fc2178c4163e292259cfb2eeb452fa28ebb264" translate="yes" xml:space="preserve">
          <source>Elem &lt;strong id=&quot;removeAny&quot;&gt;removeAny&lt;/strong&gt;();</source>
          <target state="translated">Elem &lt;strong id=&quot;removeAny&quot;&gt;removeAny&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="815fed41d2b5c32373a2ba77bc841eb55036192a" translate="yes" xml:space="preserve">
          <source>Element &lt;code&gt;item&lt;/code&gt;</source>
          <target state="translated">요소 &lt;code&gt;item&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="617b6ad21e69ef0e23e6081aaddb2e46c0aa49f9" translate="yes" xml:space="preserve">
          <source>Element &lt;code&gt;needle&lt;/code&gt;</source>
          <target state="translated">요소 &lt;code&gt;needle&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5cc795bd839deb73768f3b2b378624de54ec5c8e" translate="yes" xml:space="preserve">
          <source>Element or range.</source>
          <target state="translated">요소 또는 범위.</target>
        </trans-unit>
        <trans-unit id="e5d3f7d287d7ac65d2f0d6c2698caa1155f2bb82" translate="yes" xml:space="preserve">
          <source>Element sampling</source>
          <target state="translated">요소 샘플링</target>
        </trans-unit>
        <trans-unit id="441f754d30b34ec6f455f3b63ab4e3ef12fa2567" translate="yes" xml:space="preserve">
          <source>Element type for the tree</source>
          <target state="translated">트리의 요소 유형</target>
        </trans-unit>
        <trans-unit id="2a017ecfbaef83e525a46dc1052a60ee1f7dcc34" translate="yes" xml:space="preserve">
          <source>Element type of &lt;code&gt;range&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; 요소 유형 .</target>
        </trans-unit>
        <trans-unit id="a9ad4909fe4e9413a21c83b4b347fd8272797126" translate="yes" xml:space="preserve">
          <source>Element types. These should be combined with storage classes.</source>
          <target state="translated">요소 유형. 이들은 스토리지 클래스와 결합되어야합니다.</target>
        </trans-unit>
        <trans-unit id="4a86309a78186d3dff495cf566f9a99d9a424ccb" translate="yes" xml:space="preserve">
          <source>ElementEncodingType!(ElementType!RoR)[] &lt;strong id=&quot;join&quot;&gt;join&lt;/strong&gt;(RoR)(RoR ror)</source>
          <target state="translated">ElementEncodingType! (ElementType! RoR) [] &lt;strong id=&quot;join&quot;&gt;조인&lt;/strong&gt; (RoR) (RoR ror)</target>
        </trans-unit>
        <trans-unit id="1ae890c2864d9cb7135c605192d53170ba9f48e8" translate="yes" xml:space="preserve">
          <source>ElementEncodingType!(ElementType!RoR)[] &lt;strong id=&quot;join&quot;&gt;join&lt;/strong&gt;(RoR, E)(RoR ror, scope E sep)</source>
          <target state="translated">ElementEncodingType! (ElementType! RoR) [] &lt;strong id=&quot;join&quot;&gt;결합&lt;/strong&gt; (RoR, E) (RoR ror, 범위 E sep)</target>
        </trans-unit>
        <trans-unit id="6cb7f607653348ef8248d1403fc1b7cb812dc41c" translate="yes" xml:space="preserve">
          <source>ElementEncodingType!(ElementType!RoR)[] &lt;strong id=&quot;join&quot;&gt;join&lt;/strong&gt;(RoR, R)(RoR ror, scope R sep)</source>
          <target state="translated">ElementEncodingType! (ElementType! RoR) [] &lt;strong id=&quot;join&quot;&gt;결합&lt;/strong&gt; (RoR, R) (RoR ro, 범위 R sep)</target>
        </trans-unit>
        <trans-unit id="702f931d0306af88b0823865552adc6fa0812c5d" translate="yes" xml:space="preserve">
          <source>ElementEncodingType!S[] &lt;strong id=&quot;replicate&quot;&gt;replicate&lt;/strong&gt;(S)(S s, size_t n)</source>
          <target state="translated">ElementEncodingType! S [] &lt;strong id=&quot;replicate&quot;&gt;복제&lt;/strong&gt; (S) (S s, size_t n)</target>
        </trans-unit>
        <trans-unit id="42a3ba77b8c17a1ef2ce9dcc9fd601cdaa03846f" translate="yes" xml:space="preserve">
          <source>ElementEncodingType!S[] &lt;strong id=&quot;toLower&quot;&gt;toLower&lt;/strong&gt;(S)(S s)</source>
          <target state="translated">ElementEncodingType! S [] &lt;strong id=&quot;toLower&quot;&gt;tolower를&lt;/strong&gt; (S) (S S)</target>
        </trans-unit>
        <trans-unit id="392acda9c596c467f63fe2c49f8758250301f4bd" translate="yes" xml:space="preserve">
          <source>ElementEncodingType!S[] &lt;strong id=&quot;toUpper&quot;&gt;toUpper&lt;/strong&gt;(S)(S s)</source>
          <target state="translated">ElementEncodingType! S [] &lt;strong id=&quot;toUpper&quot;&gt;TOUPPER&lt;/strong&gt; (S) (S S)</target>
        </trans-unit>
        <trans-unit id="5379158f2d181b7fa9f49b4b944d580681d55b28" translate="yes" xml:space="preserve">
          <source>ElementHandler[string] &lt;strong id=&quot;onEndTag&quot;&gt;onEndTag&lt;/strong&gt;;</source>
          <target state="translated">ElementHandler [문자열] &lt;strong id=&quot;onEndTag&quot;&gt;onEndTag&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="3509bab6a8e8df125122f531a5102572618ae319" translate="yes" xml:space="preserve">
          <source>ElementType &lt;strong id=&quot;moveAt&quot;&gt;moveAt&lt;/strong&gt;(size_t n);</source>
          <target state="translated">ElementType &lt;strong id=&quot;moveAt&quot;&gt;moveAt&lt;/strong&gt; (size_t n);</target>
        </trans-unit>
        <trans-unit id="33ef2617a32e997a8e380250ba77dae4b8b6d9fc" translate="yes" xml:space="preserve">
          <source>ElementType &lt;strong id=&quot;moveBack&quot;&gt;moveBack&lt;/strong&gt;();</source>
          <target state="translated">ElementType &lt;strong id=&quot;moveBack&quot;&gt;moveBack&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="a2be9443bfc1f887c0ddfce9a4c4bebf9beb84b9" translate="yes" xml:space="preserve">
          <source>ElementType &lt;strong id=&quot;moveFront&quot;&gt;moveFront&lt;/strong&gt;();</source>
          <target state="translated">ElementType &lt;strong id=&quot;moveFront&quot;&gt;moveFront&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="ab1735c15e6bbd4f47316c932e21c0b1884f9074" translate="yes" xml:space="preserve">
          <source>ElementType &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt;(size_t n);</source>
          <target state="translated">ElementType &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt; (size_t n);</target>
        </trans-unit>
        <trans-unit id="0ceae5422846c1850afe1536d2f161cc51bc15f2" translate="yes" xml:space="preserve">
          <source>ElementType!R &lt;strong id=&quot;moveAt&quot;&gt;moveAt&lt;/strong&gt;(R)(R r, size_t i);</source>
          <target state="translated">ElementType! R &lt;strong id=&quot;moveAt&quot;&gt;moveAt&lt;/strong&gt; (R) (R r, size_t i);</target>
        </trans-unit>
        <trans-unit id="6041d7706b79b33d558f662e1a591338bf754e6f" translate="yes" xml:space="preserve">
          <source>ElementType!R &lt;strong id=&quot;moveBack&quot;&gt;moveBack&lt;/strong&gt;(R)(R r);</source>
          <target state="translated">ElementType! R &lt;strong id=&quot;moveBack&quot;&gt;moveBack&lt;/strong&gt; (R) (R r);</target>
        </trans-unit>
        <trans-unit id="1ae77fbe5957fe1ff7bf65bc7bb4e202ac6e7310" translate="yes" xml:space="preserve">
          <source>ElementType!R &lt;strong id=&quot;moveFront&quot;&gt;moveFront&lt;/strong&gt;(R)(R r);</source>
          <target state="translated">ElementType! R &lt;strong id=&quot;moveFront&quot;&gt;moveFront&lt;/strong&gt; (R) (R r);</target>
        </trans-unit>
        <trans-unit id="dba97a41f5d9403a5379470ec77587dfe2b378ab" translate="yes" xml:space="preserve">
          <source>ElementType!Range &lt;strong id=&quot;entropy&quot;&gt;entropy&lt;/strong&gt;(Range)(Range r)</source>
          <target state="translated">ElementType! 범위 &lt;strong id=&quot;entropy&quot;&gt;엔트로피&lt;/strong&gt; (범위) (범위 r)</target>
        </trans-unit>
        <trans-unit id="54482da3f9235c6fbbbf0ed6a5f5744dc3f1fb04" translate="yes" xml:space="preserve">
          <source>ElementType!Range &lt;strong id=&quot;entropy&quot;&gt;entropy&lt;/strong&gt;(Range, F)(Range r, F max)</source>
          <target state="translated">ElementType! 범위 &lt;strong id=&quot;entropy&quot;&gt;엔트로피&lt;/strong&gt; (범위, F) (범위 r, F 최대)</target>
        </trans-unit>
        <trans-unit id="a1daac9d4b0263465c14fe15886ba68d3da513b2" translate="yes" xml:space="preserve">
          <source>ElementType!Range &lt;strong id=&quot;sumOfLog2s&quot;&gt;sumOfLog2s&lt;/strong&gt;(Range)(Range r)</source>
          <target state="translated">ElementType! Range &lt;strong id=&quot;sumOfLog2s&quot;&gt;sumOfLog2s&lt;/strong&gt; (범위) (범위 r)</target>
        </trans-unit>
        <trans-unit id="9f2f50d89dda35c54cbe17ed4d5bc5e3935e704e" translate="yes" xml:space="preserve">
          <source>ElementType!S[] &lt;strong id=&quot;replicate&quot;&gt;replicate&lt;/strong&gt;(S)(S s, size_t n)</source>
          <target state="translated">ElementType! S [] &lt;strong id=&quot;replicate&quot;&gt;복제&lt;/strong&gt; (S) (S s, size_t n)</target>
        </trans-unit>
        <trans-unit id="5af41717fc3e0c6b68c90ef101993c3de9cf4657" translate="yes" xml:space="preserve">
          <source>ElementType!Store &lt;strong id=&quot;removeAny&quot;&gt;removeAny&lt;/strong&gt;();</source>
          <target state="translated">ElementType! Store &lt;strong id=&quot;removeAny&quot;&gt;removeAny&lt;/strong&gt; ();</target>
        </trans-unit>
        <trans-unit id="81e6d0f4b8b168d02f8b5a91f64c39e265ade30e" translate="yes" xml:space="preserve">
          <source>ElementType!String[] &lt;strong id=&quot;array&quot;&gt;array&lt;/strong&gt;(String)(scope String str)</source>
          <target state="translated">ElementType! String [] &lt;strong id=&quot;array&quot;&gt;배열&lt;/strong&gt; (문자열) (범위 문자열 str)</target>
        </trans-unit>
        <trans-unit id="a3bd4e1dc80bf2ee2b709752575c9a0862156bc5" translate="yes" xml:space="preserve">
          <source>Element[] &lt;strong id=&quot;elements&quot;&gt;elements&lt;/strong&gt;;</source>
          <target state="translated">Element [] &lt;strong id=&quot;elements&quot;&gt;요소&lt;/strong&gt; ;</target>
        </trans-unit>
        <trans-unit id="bb9e481b91ab17d164bbd39e916a61e4b19723f7" translate="yes" xml:space="preserve">
          <source>Elementary mathematical functions (powers, roots, trigonometry).</source>
          <target state="translated">초등 수학 함수 (힘, 근, 삼각법).</target>
        </trans-unit>
        <trans-unit id="5f985b24fa425c8c26af762a28cd7fb06853f0e7" translate="yes" xml:space="preserve">
          <source>Elements can be swapped across ranges of different types:</source>
          <target state="translated">다양한 유형의 범위에서 요소를 교체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="13dd77bf1e66f2b40efa3b9e8d4d21e1130a5e9f" translate="yes" xml:space="preserve">
          <source>Elements for a bit field representing memory block attributes. These are manipulated via the getAttr, setAttr, clrAttr functions.</source>
          <target state="translated">메모리 블록 속성을 나타내는 비트 필드 요소. 이것들은 getAttr, setAttr, clrAttr 함수를 통해 조작됩니다.</target>
        </trans-unit>
        <trans-unit id="c838e4b542ac5aa6a62ecd0a260e0e5a1e61eb97" translate="yes" xml:space="preserve">
          <source>Elems</source>
          <target state="translated">Elems</target>
        </trans-unit>
        <trans-unit id="fc0ff864861865bae147c8715abde6277197adcb" translate="yes" xml:space="preserve">
          <source>Elems are the basic tree element. They can be either terminal elems (leaves), unary elems (left subtree exists) or binary elems (left and right subtrees exist).</source>
          <target state="translated">요소는 기본 트리 요소입니다. 이들은 터미널 요소 (잎), 단항 요소 (왼쪽 하위 트리가 있음) 또는 이진 요소 (왼쪽 및 오른쪽 하위 트리가 있음) 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="37137a150453c8341dc88dc5e4a24adeca9da8da" translate="yes" xml:space="preserve">
          <source>Eliminates elements at given offsets from &lt;code&gt;range&lt;/code&gt; and returns the shortened range.</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; 에서 주어진 오프셋에서 요소 제거 하고 단축 된 범위를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7961b40e09efce39bb1596a6f0073b30b5359e24" translate="yes" xml:space="preserve">
          <source>Else if either operand is &lt;code&gt;double&lt;/code&gt;, the other operand is converted to &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="translated">그렇지 않으면 두 피연산자가 &lt;code&gt;double&lt;/code&gt; 이면 다른 피연산자는 &lt;code&gt;double&lt;/code&gt; 로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="0f17ee232bd9cb197e4fd87f9507c3c4dbb560cd" translate="yes" xml:space="preserve">
          <source>Else if either operand is &lt;code&gt;float&lt;/code&gt;, the other operand is converted to &lt;code&gt;float&lt;/code&gt;.</source>
          <target state="translated">그렇지 않으면 두 피연산자가 &lt;code&gt;float&lt;/code&gt; 이면 다른 피연산자는 &lt;code&gt;float&lt;/code&gt; 로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="9609e0b7e6ea340dbf05465faf2ff6efe7d4b312" translate="yes" xml:space="preserve">
          <source>Else the integer promotions are done on each operand, followed by:</source>
          <target state="translated">그렇지 않으면 정수 승격이 각 피연산자에 대해 수행되고 다음이 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="893da40d8f9df3d0daa923e7df9a12d1a05b2a0c" translate="yes" xml:space="preserve">
          <source>ElseStatement</source>
          <target state="translated">ElseStatement</target>
        </trans-unit>
        <trans-unit id="6b2e0054898f373aae2215ecda0f85d8c9f14b1d" translate="yes" xml:space="preserve">
          <source>EmailStatus &lt;strong id=&quot;isEmail&quot;&gt;isEmail&lt;/strong&gt;(Char)(const(Char)[] email, CheckDns checkDNS = No.checkDns, EmailStatusCode errorLevel = EmailStatusCode.none)</source>
          <target state="translated">EmailStatus &lt;strong id=&quot;isEmail&quot;&gt;isEmail&lt;/strong&gt; (Char) (const (Char) [] email, CheckDns checkDNS = No.checkDns, EmailStatusCode errorLevel = EmailStatusCode.none)</target>
        </trans-unit>
        <trans-unit id="1295ed0c2f947c93f62b24a516ec70bae65910d9" translate="yes" xml:space="preserve">
          <source>EmailStatusCode &lt;code&gt;errorLevel&lt;/code&gt;</source>
          <target state="translated">EmailStatusCode &lt;code&gt;errorLevel&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ee568c86daa6658674d61b601ab68991b94f1e98" translate="yes" xml:space="preserve">
          <source>EmailStatusCode &lt;code&gt;statusCode&lt;/code&gt;</source>
          <target state="translated">EmailStatusCode &lt;code&gt;statusCode&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1ebe11a2c604519a279794e1deefdb918d19d099" translate="yes" xml:space="preserve">
          <source>Embed these highlighting commands in the text stream. HIGHLIGHT.Escape indicates a Color follows.</source>
          <target state="translated">이러한 강조 명령을 텍스트 스트림에 포함시킵니다. 하이라이트 : 이스케이프는 색상이 따름을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2957d7f1b575cf6674f3b9cd21c15484f7fb0b85" translate="yes" xml:space="preserve">
          <source>Embedded Code</source>
          <target state="translated">임베디드 코드</target>
        </trans-unit>
        <trans-unit id="9bff0882940fac652cad3dd1bc8ec9e7bd34c15e" translate="yes" xml:space="preserve">
          <source>Embedded Comments</source>
          <target state="translated">임베디드 댓글</target>
        </trans-unit>
        <trans-unit id="883b86e78b11fee2715119068e524fae48a93354" translate="yes" xml:space="preserve">
          <source>Embedded HTML</source>
          <target state="translated">임베디드 HTML</target>
        </trans-unit>
        <trans-unit id="afb3c8cf26049457eca4057cf4fd156dcc008d93" translate="yes" xml:space="preserve">
          <source>Embedded documentation comments are one of the following forms:</source>
          <target state="translated">포함 된 문서 주석은 다음 형식 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="043c2cfcce9821785484b7fc5bceb933d7a9060f" translate="yes" xml:space="preserve">
          <source>Embedded documentation comments are processed in a series of phases:</source>
          <target state="translated">내장 된 문서 주석은 일련의 단계로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="04a28bd6845e9c95330e13fd7f59f93dbf4e7b08" translate="yes" xml:space="preserve">
          <source>Emit prefetch instruction.</source>
          <target state="translated">프리 페치 명령어를 방출합니다.</target>
        </trans-unit>
        <trans-unit id="ac6ff37e2f54571cc60828ad2c5211775b2622b5" translate="yes" xml:space="preserve">
          <source>Emoticons</source>
          <target state="translated">Emoticons</target>
        </trans-unit>
        <trans-unit id="b55c446755b6bea6f311ce6517e64a2b1c2e459b" translate="yes" xml:space="preserve">
          <source>Empty Structs</source>
          <target state="translated">빈 구조</target>
        </trans-unit>
        <trans-unit id="1c6e2b73fed51429a5a892cd9c8056cf6678edd7" translate="yes" xml:space="preserve">
          <source>Empty and separator-only ranges.</source>
          <target state="translated">비우기 및 구분자 전용 범위.</target>
        </trans-unit>
        <trans-unit id="030c3429dfb8a61c15a21ebff544e445beb8e45e" translate="yes" xml:space="preserve">
          <source>Enable (unmask) specific hardware exceptions. Multiple exceptions may be ORed together.</source>
          <target state="translated">특정 하드웨어 예외를 활성화 (마스킹 해제)합니다. 여러 예외가 함께 OR 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="47209fc977a3d6844b590f95a2e890da8c62a167" translate="yes" xml:space="preserve">
          <source>Enable Or Disable Extended Result Codes</source>
          <target state="translated">확장 결과 코드 활성화 또는 비활성화</target>
        </trans-unit>
        <trans-unit id="2ae5828f55ab597198616d5a6a29272c5472108b" translate="yes" xml:space="preserve">
          <source>Enable Or Disable Extension Loading</source>
          <target state="translated">확장 로딩 활성화 또는 비활성화</target>
        </trans-unit>
        <trans-unit id="4f3889a08ab86ec8ddcc4be30913885c66215716" translate="yes" xml:space="preserve">
          <source>Enable Or Disable Shared Pager Cache</source>
          <target state="translated">공유 호출기 캐시 활성화 또는 비활성화</target>
        </trans-unit>
        <trans-unit id="4bce37c03cdb1ea1c2db7e72938269d734302d1b" translate="yes" xml:space="preserve">
          <source>Enable SSL/TLS for FTP, pick one of: CURLFTPSSL_TRY - try using SSL, proceed anyway otherwise CURLFTPSSL_CONTROL - SSL for the control connection or fail CURLFTPSSL_ALL - SSL for all communication or fail</source>
          <target state="translated">FTP에 SSL / TLS를 사용하도록 설정하고 다음 중 하나를 선택하십시오. CURLFTPSSL_TRY-SSL을 사용하여 시도하십시오.</target>
        </trans-unit>
        <trans-unit id="1cbf90ffe7b5043f00cb0b86caba37bb56558b58" translate="yes" xml:space="preserve">
          <source>Enable keep-alive packets</source>
          <target state="translated">연결 유지 패킷 사용</target>
        </trans-unit>
        <trans-unit id="10efdb46d610a542c9c965d276df321b68e5b03f" translate="yes" xml:space="preserve">
          <source>Enable merging of coverage reports with existing data.</source>
          <target state="translated">적용 범위 보고서를 기존 데이터와 병합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b84845f1dfde2cfcd609b3fdd44a1877a729e347" translate="yes" xml:space="preserve">
          <source>Enable/disable the TCP Nagle algorithm</source>
          <target state="translated">TCP Nagle 알고리즘 활성화 / 비활성화</target>
        </trans-unit>
        <trans-unit id="9d44a972ab5a45fa93d33bed969870132f92a36c" translate="yes" xml:space="preserve">
          <source>Enables TCP keep-alive with the specified parameters.</source>
          <target state="translated">지정된 매개 변수로 TCP 연결 유지를 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="79bcddb5a0eeb733d6cee82beff697e093ac845f" translate="yes" xml:space="preserve">
          <source>Enables automatic garbage collection behavior if collections have previously been suspended by a call to disable. This function is reentrant, and must be called once for every call to disable before automatic collections are enabled.</source>
          <target state="translated">비활성화 호출로 인해 컬렉션이 이전에 일시 중단 된 경우 자동 가비지 수집 동작을 활성화합니다. 이 기능은 재진입이며 자동 수집을 활성화하기 전에 모든 호출을 비활성화 할 때마다 한 번씩 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="b5b9df3f99d6bcd73bd5fffe2b0799d07c917202" translate="yes" xml:space="preserve">
          <source>Encapsulate Parameters* so .length and [i] can be used on it. &lt;a href=&quot;https://dlang.org/spec/function.html#ParameterList&quot;&gt;https://dlang.org/spec/function.html#ParameterList&lt;/a&gt;</source>
          <target state="translated">Encapsulate Parameters *를 사용하면 .length 및 [i]를 사용할 수 있습니다. &lt;a href=&quot;https://dlang.org/spec/function.html#ParameterList&quot;&gt;https://dlang.org/spec/function.html#ParameterList&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e9c7711e4b76eb88caee19cd84075750386f2e48" translate="yes" xml:space="preserve">
          <source>Encapsulate path and file names.</source>
          <target state="translated">경로 및 파일 이름을 캡슐화하십시오.</target>
        </trans-unit>
        <trans-unit id="0d4f5fbb3a956c798f6999285ecf9cf7a69251e8" translate="yes" xml:space="preserve">
          <source>Encapsulates a &lt;code&gt;FILE*&lt;/code&gt;. Generally D does not attempt to provide thin wrappers over equivalent functions in the C standard library, but manipulating &lt;code&gt;FILE*&lt;/code&gt; values directly is unsafe and error-prone in many ways. The &lt;code&gt;File&lt;/code&gt; type ensures safe manipulation, automatic file closing, and a lot of convenience.</source>
          <target state="translated">&lt;code&gt;FILE*&lt;/code&gt; 캡슐화합니다 . 일반적으로 D는 C 표준 라이브러리에서 동등한 함수에 대해 얇은 래퍼를 제공하지 않지만 &lt;code&gt;FILE*&lt;/code&gt; 값을 직접 조작 하는 것은 여러 가지면에서 안전하지 않으며 오류가 발생하기 쉽습니다. &lt;code&gt;File&lt;/code&gt; 형식은 안전한 조작, 자동 파일 폐쇄, 편리를 많이 보장합니다.</target>
        </trans-unit>
        <trans-unit id="42f3f54b4a70b84c3d0e6908ba2c470466ee4877" translate="yes" xml:space="preserve">
          <source>Encapsulates all implementation-level data needed for scheduling.</source>
          <target state="translated">스케줄링에 필요한 모든 구현 레벨 데이터를 캡슐화합니다.</target>
        </trans-unit>
        <trans-unit id="748e49eacf2c1a655647e4253e6a96c30a279303" translate="yes" xml:space="preserve">
          <source>Encapsulates unique ownership of a resource.</source>
          <target state="translated">리소스의 고유 한 소유권을 캡슐화합니다.</target>
        </trans-unit>
        <trans-unit id="e40ad790e55199e7d2ef0dbc7fabf2db622c12ec" translate="yes" xml:space="preserve">
          <source>Enclosed Alphanumeric Supplement</source>
          <target state="translated">동봉 된 영숫자 보충</target>
        </trans-unit>
        <trans-unit id="e6b4a28e228cf42e5ab146723e0937d7bf37431e" translate="yes" xml:space="preserve">
          <source>Enclosed Alphanumerics</source>
          <target state="translated">동봉 된 영숫자</target>
        </trans-unit>
        <trans-unit id="ecbd1232b7421472379e7dc4138275ac6aa868e1" translate="yes" xml:space="preserve">
          <source>Enclosed CJK Letters and Months</source>
          <target state="translated">동봉 된 CJK 편지 및 월</target>
        </trans-unit>
        <trans-unit id="c5214ea8b39e3e2f736d3259bf59f7b62a472bac" translate="yes" xml:space="preserve">
          <source>Enclosed Ideographic Supplement</source>
          <target state="translated">동봉 된 표의 문자 보충</target>
        </trans-unit>
        <trans-unit id="3b610eb478dd2651d7723bcf0f052053fc2c5033" translate="yes" xml:space="preserve">
          <source>Enclosing_Mark</source>
          <target state="translated">Enclosing_Mark</target>
        </trans-unit>
        <trans-unit id="782e817cf07d938d62f7f0517e130f19ec6b4cf1" translate="yes" xml:space="preserve">
          <source>Encode</source>
          <target state="translated">Encode</target>
        </trans-unit>
        <trans-unit id="3e475d947990d92a7a4d09f9a4707983b827e684" translate="yes" xml:space="preserve">
          <source>Encode and decode UTF-8, UTF-16 and UTF-32 strings.</source>
          <target state="translated">UTF-8, UTF-16 및 UTF-32 문자열을 인코딩하고 디코딩합니다.</target>
        </trans-unit>
        <trans-unit id="5a334ca888394778b3416c4aaed610512bec455a" translate="yes" xml:space="preserve">
          <source>Encode and decode Uniform Resource Identifiers (URIs).</source>
          <target state="translated">URI (Uniform Resource Identifier)를 인코딩하고 디코딩합니다.</target>
        </trans-unit>
        <trans-unit id="2a3ea83c8f7a80a45437a91f54c430d375ed83e9" translate="yes" xml:space="preserve">
          <source>Encode and decode Uniform Resource Identifiers (URIs). URIs are used in internet transfer protocols. Valid URI characters consist of letters, digits, and the characters &lt;b&gt;;/?:@&amp;amp;=+$,-.!~*'()&lt;/b&gt; Reserved URI characters are &lt;b&gt;;/?:@&amp;amp;=+$,&lt;/b&gt; Escape sequences consist of &lt;b&gt;%&lt;/b&gt; followed by two hex digits.</source>
          <target state="translated">URI (Uniform Resource Identifier)를 인코딩하고 디코딩합니다. URI는 인터넷 전송 프로토콜에서 사용됩니다. 유효한 URI 문자는 문자, 숫자 및 문자로 구성 &lt;b&gt;/ : @ &amp;amp; = + $, - ~ * '()?.!&lt;/b&gt; 예약 URI 문자는 &lt;b&gt;/ : @ &amp;amp; = + $는?&lt;/b&gt; 시퀀스로 구성 탈출 &lt;b&gt;%&lt;/b&gt; 다음 두 개의 16 진수로</target>
        </trans-unit>
        <trans-unit id="3441d10c6cc1bf3c5ff4b87a06f4ce4e76401654" translate="yes" xml:space="preserve">
          <source>Encode source into a &lt;code&gt;char[]&lt;/code&gt; buffer using Base64 encoding.</source>
          <target state="translated">Base64 인코딩을 사용하여 소스를 &lt;code&gt;char[]&lt;/code&gt; 버퍼로 인코딩하십시오.</target>
        </trans-unit>
        <trans-unit id="220162a6e5b325187b91acc2c02d19d314f1fd83" translate="yes" xml:space="preserve">
          <source>Encode the given expression, which is assumed to be an rvalue literal as another type for use in CTFE. This corresponds roughly to the idiom *(Type *)&amp;amp;e.</source>
          <target state="translated">CTFE에서 사용할 다른 유형으로 rvalue 리터럴 인 것으로 가정 된 주어진 표현식을 인코딩하십시오. 이것은 대략 관용구 * (Type *) &amp;amp; e에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="0ad8d5b089dad44fcb9b633792f5660c5a7cd53d" translate="yes" xml:space="preserve">
          <source>Encoded strings will not have any padding if the &lt;code&gt;Padding&lt;/code&gt; parameter is set to &lt;code&gt;NoPadding&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Padding&lt;/code&gt; 매개 변수가 &lt;code&gt;NoPadding&lt;/code&gt; 으로 설정된 경우 인코딩 된 문자열에는 패딩이 없습니다 .</target>
        </trans-unit>
        <trans-unit id="06c389c01cc77c1798feea52bafb6d47e85cf5d4" translate="yes" xml:space="preserve">
          <source>Encoder!Range &lt;strong id=&quot;encoder&quot;&gt;encoder&lt;/strong&gt;(Range)(Range range)</source>
          <target state="translated">엔코더! 범위 &lt;strong id=&quot;encoder&quot;&gt;엔코더&lt;/strong&gt; (범위) (범위)</target>
        </trans-unit>
        <trans-unit id="37bb3fd438866d7d6a800d64d5e82569366077ed" translate="yes" xml:space="preserve">
          <source>Encodes &lt;a href=&quot;http://realityinteractive.com/rgrzywinski/archives/000249.html&quot;&gt;edit operations&lt;/a&gt; necessary to transform one sequence into another. Given sequences &lt;code&gt;s&lt;/code&gt; (source) and &lt;code&gt;t&lt;/code&gt; (target), a sequence of &lt;code&gt;EditOp&lt;/code&gt; encodes the steps that need to be taken to convert &lt;code&gt;s&lt;/code&gt; into &lt;code&gt;t&lt;/code&gt;. For example, if &lt;code&gt;s = &quot;cat&quot;&lt;/code&gt; and &lt;code&gt;&quot;cars&quot;&lt;/code&gt;, the minimal sequence that transforms &lt;code&gt;s&lt;/code&gt; into &lt;code&gt;t&lt;/code&gt; is: skip two characters, replace 't' with 'r', and insert an 's'. Working with edit operations is useful in applications such as spell-checkers (to find the closest word to a given misspelled word), approximate searches, diff-style programs that compute the difference between files, efficient encoding of patches, DNA sequence analysis, and plagiarism detection.</source>
          <target state="translated">한 시퀀스를 다른 시퀀스로 변환하는 데 필요한 &lt;a href=&quot;http://realityinteractive.com/rgrzywinski/archives/000249.html&quot;&gt;편집 작업을&lt;/a&gt; 인코딩 합니다. 시퀀스 &lt;code&gt;s&lt;/code&gt; (소스) 및 &lt;code&gt;t&lt;/code&gt; (타겟)가 &lt;code&gt;EditOp&lt;/code&gt; 시퀀스는 &lt;code&gt;s&lt;/code&gt; 를 &lt;code&gt;t&lt;/code&gt; 로 변환하기 위해 수행해야하는 단계를 인코딩합니다 . 예를 들어, &lt;code&gt;s = &quot;cat&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;cars&quot;&lt;/code&gt; 인 경우 &lt;code&gt;s&lt;/code&gt; 를 &lt;code&gt;t&lt;/code&gt; is : 두 문자를 건너 뛰고 't'를 'r'로 바꾸고 's'를 삽입하십시오. 편집 작업에 대한 작업은 맞춤법 검사기 (주어진 철자가 틀린 단어와 가장 가까운 단어를 찾기 위해), 근사 검색, 파일 간의 차이를 계산하는 diff 스타일 프로그램, 효율적인 패치 인코딩, DNA 서열 분석 및 표절 탐지.</target>
        </trans-unit>
        <trans-unit id="3da8545dfc7cfa2cac1f67c4cdd8acd325688097" translate="yes" xml:space="preserve">
          <source>Encodes &lt;code&gt;c&lt;/code&gt; in &lt;code&gt;str&lt;/code&gt;'s encoding and appends it to &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">인코딩 &lt;code&gt;c&lt;/code&gt; 에서 &lt;code&gt;str&lt;/code&gt; 의 인코딩은하기 추가 &lt;code&gt;str&lt;/code&gt; 에 .</target>
        </trans-unit>
        <trans-unit id="a0154f11eaa6c395b0cc601aa424b12e43b6352b" translate="yes" xml:space="preserve">
          <source>Encodes &lt;code&gt;c&lt;/code&gt; into the static array, &lt;code&gt;buf&lt;/code&gt;, and returns the actual length of the encoded character (a number between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;4&lt;/code&gt; for &lt;code&gt;char[4]&lt;/code&gt; buffers and a number between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; for &lt;code&gt;wchar[2]&lt;/code&gt; buffers).</source>
          <target state="translated">인코딩 &lt;code&gt;c&lt;/code&gt; 정적 배열로 &lt;code&gt;buf&lt;/code&gt; 및 복귀 부호화 문자의 실제 길이 (사이 번호 &lt;code&gt;1&lt;/code&gt; 및 &lt;code&gt;4&lt;/code&gt; 에 대한 &lt;code&gt;char[4]&lt;/code&gt; 버퍼 사이의 번호 &lt;code&gt;1&lt;/code&gt; 과 &lt;code&gt;2&lt;/code&gt; 를위한 &lt;code&gt;wchar[2]&lt;/code&gt; 버퍼).</target>
        </trans-unit>
        <trans-unit id="2e6104a6ab2772f371922f3aaeaeb7d2389d06bb" translate="yes" xml:space="preserve">
          <source>Encodes a single code point into a user-supplied, fixed-size buffer.</source>
          <target state="translated">단일 코드 포인트를 사용자 제공 고정 크기 버퍼로 인코딩합니다.</target>
        </trans-unit>
        <trans-unit id="10ddb4f7dd523c4befc685a3e0632670f78d6f59" translate="yes" xml:space="preserve">
          <source>Encodes a single code point into an array.</source>
          <target state="translated">단일 코드 포인트를 배열로 인코딩합니다.</target>
        </trans-unit>
        <trans-unit id="bd958e479e5410a4cc921752fa501a1fa5bf4c58" translate="yes" xml:space="preserve">
          <source>Encodes a single code point to a delegate.</source>
          <target state="translated">단일 코드 포인트를 대리자로 인코딩합니다.</target>
        </trans-unit>
        <trans-unit id="e84d12b3e9a0bd7610b25c211345bfe28c02cc65" translate="yes" xml:space="preserve">
          <source>Encodes a single code point.</source>
          <target state="translated">단일 코드 포인트를 인코딩합니다.</target>
        </trans-unit>
        <trans-unit id="9fb3f11471ae30b471fb2d7c48448f96784bbdea" translate="yes" xml:space="preserve">
          <source>Encodes a string by replacing all characters which need to be escaped with appropriate predefined XML entities.</source>
          <target state="translated">이스케이프해야하는 모든 문자를 적절한 사전 정의 된 XML 엔티티로 바꾸어 문자열을 인코딩합니다.</target>
        </trans-unit>
        <trans-unit id="0311bab99351addf1e4e596241ca4f5800c003ee" translate="yes" xml:space="preserve">
          <source>Encodes source into an &lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;output range&lt;/a&gt; using Base64 encoding.</source>
          <target state="translated">Base64 인코딩을 사용하여 소스를 &lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;출력 범위로&lt;/a&gt; 인코딩합니다.</target>
        </trans-unit>
        <trans-unit id="c1c86a4c1f506295d95ffc6df9298ff289c2e793" translate="yes" xml:space="preserve">
          <source>Encodes source to newly-allocated buffer.</source>
          <target state="translated">소스를 새로 할당 된 버퍼로 인코딩합니다.</target>
        </trans-unit>
        <trans-unit id="70f275c65bf2cb900479221ec66705952ce2b93e" translate="yes" xml:space="preserve">
          <source>Encodes string &lt;code&gt;s&lt;/code&gt; into UTF-16 and returns the encoded string. &lt;code&gt;toUTF16z&lt;/code&gt; is suitable for calling the 'W' functions in the Win32 API that take an &lt;code&gt;LPCWSTR&lt;/code&gt; argument.</source>
          <target state="translated">인코딩 문자열 &lt;code&gt;s&lt;/code&gt; 의 UTF-16 및 반환 인코딩 된 문자열로. &lt;code&gt;toUTF16z&lt;/code&gt; 는 &lt;code&gt;LPCWSTR&lt;/code&gt; 인수 를 사용하는 Win32 API에서 'W'함수를 호출하는 데 적합합니다 .</target>
        </trans-unit>
        <trans-unit id="18e78253a5c62ee01707c07e6fe0d95281b69440" translate="yes" xml:space="preserve">
          <source>Encodes the UTF-8 string uri into a URI and returns that URI. Any character not a valid URI character is escaped. The '#' character is not escaped.</source>
          <target state="translated">UTF-8 문자열 URI를 URI로 인코딩하고 해당 URI를 반환합니다. 유효한 URI 문자가 아닌 문자는 이스케이프됩니다. '#'문자는 이스케이프되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="805d83a773804113c35b1c178f426b5d83bc5314" translate="yes" xml:space="preserve">
          <source>Encodes the UTF-8 string uriComponent into a URI and returns that URI. Any character not a letter, digit, or one of -.!~*'() is escaped.</source>
          <target state="translated">UTF-8 문자열 uriComponent를 URI로 인코딩하고 해당 URI를 리턴합니다. 문자, 숫자 또는-.! ~ * '() 중 하나가 아닌 문자는 이스케이프됩니다.</target>
        </trans-unit>
        <trans-unit id="1ce944cce4506abe10ef748e0dcaa7daa1599ca2" translate="yes" xml:space="preserve">
          <source>Encodes the contents of &lt;code&gt;s&lt;/code&gt; in units of type &lt;code&gt;Tgt&lt;/code&gt;, writing the result to an output range.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 의 내용을 &lt;code&gt;Tgt&lt;/code&gt; 유형의 단위로 인코딩하여 결과를 출력 범위에 씁니다.</target>
        </trans-unit>
        <trans-unit id="9c7e5df1b8876d8a4528edc6b37704fba0dde231" translate="yes" xml:space="preserve">
          <source>Encodes the elements of &lt;code&gt;s&lt;/code&gt; to UTF-16 and returns a newly GC allocated &lt;code&gt;wstring&lt;/code&gt; of the elements.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 의 요소 를 UTF-16으로 인코딩하고 요소의 새로 GC 할당 된 &lt;code&gt;wstring&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="b85ee0f06ef14a8b4983d595facf07889fcdeaa4" translate="yes" xml:space="preserve">
          <source>Encodes the elements of &lt;code&gt;s&lt;/code&gt; to UTF-32 and returns a newly GC allocated &lt;code&gt;dstring&lt;/code&gt; of the elements.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 의 요소 를 UTF-32로 인코딩하고 요소의 새로 GC 할당 된 &lt;code&gt;dstring&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="c4fa69cb4316c9e45077264d1be54ce0c8233a8d" translate="yes" xml:space="preserve">
          <source>Encodes the elements of &lt;code&gt;s&lt;/code&gt; to UTF-8 and returns a newly allocated string of the elements.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 의 요소 를 UTF-8로 인코딩하고 새로 할당 된 요소 문자열을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="8932888046af9bb1c9f4652f83ea1afc7f9a87cf" translate="yes" xml:space="preserve">
          <source>Encoding / decoding Base64 format.</source>
          <target state="translated">Base64 형식의 인코딩 / 디코딩</target>
        </trans-unit>
        <trans-unit id="0e7952fa5a4905bd0cbd5639a2acedee76ceca8d" translate="yes" xml:space="preserve">
          <source>Encoding schemes</source>
          <target state="translated">인코딩 체계</target>
        </trans-unit>
        <trans-unit id="9c4f36161365b1d3838bcbdd250887a7031a7e6b" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle ASCII</source>
          <target state="translated">ASCII를 처리하는 EncodingScheme</target>
        </trans-unit>
        <trans-unit id="446d406963616098f3653df4a74a7dddda5a039f" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle Latin-1</source>
          <target state="translated">Latin-1을 처리하기위한 EncodingScheme</target>
        </trans-unit>
        <trans-unit id="d6bf86f655741e69d6528dfdf4504b309aeec0a7" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle Latin-2</source>
          <target state="translated">Latin-2를 처리하기위한 EncodingScheme</target>
        </trans-unit>
        <trans-unit id="dd6227348bc30155f280725c96868620ad2230e9" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle UTF-16 in native byte order</source>
          <target state="translated">네이티브 바이트 순서로 UTF-16을 처리하기위한 EncodingScheme</target>
        </trans-unit>
        <trans-unit id="be2fba0adf5350ce6b87d427869b7d2551c0de7d" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle UTF-32 in native byte order</source>
          <target state="translated">원시 바이트 순서로 UTF-32를 처리하기위한 EncodingScheme</target>
        </trans-unit>
        <trans-unit id="b49746e2674f13df8a872f2e10e509856c176586" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle UTF-8</source>
          <target state="translated">UTF-8을 처리하기위한 EncodingScheme</target>
        </trans-unit>
        <trans-unit id="faeeae997244cadf686b50227182c2861e34762e" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle Windows-1250</source>
          <target state="translated">Windows-1250을 처리하기위한 EncodingScheme</target>
        </trans-unit>
        <trans-unit id="1ffb35bddfecbce77d9f1afe7c2504515c41a641" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle Windows-1251</source>
          <target state="translated">Windows-1251을 처리하는 EncodingScheme</target>
        </trans-unit>
        <trans-unit id="590090ad0ced92c41c7d0d87dd80d15aa2bc562b" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle Windows-1252</source>
          <target state="translated">Windows-1252를 처리하는 EncodingScheme</target>
        </trans-unit>
        <trans-unit id="0bc8157b0e896cd216388715ec7f6749ad576c53" translate="yes" xml:space="preserve">
          <source>Encodings currently supported are UTF-8, UTF-16, UTF-32, ASCII, ISO-8859-1 (also known as LATIN-1), ISO-8859-2 (LATIN-2), WINDOWS-1250, WINDOWS-1251 and WINDOWS-1252.</source>
          <target state="translated">현재 지원되는 인코딩은 UTF-8, UTF-16, UTF-32, ASCII, ISO-8859-1 (LATIN-1이라고도 함), ISO-8859-2 (LATIN-2), WINDOWS-1250, WINDOWS-1251입니다. WINDOWS-1252.</target>
        </trans-unit>
        <trans-unit id="1ae196dd0d55e616b5fc4ddc9c0045f6f5796717" translate="yes" xml:space="preserve">
          <source>Encountered an invalid character</source>
          <target state="translated">잘못된 캐릭터를 만났다</target>
        </trans-unit>
        <trans-unit id="3c563e61565c36beafce54d1011c140a395217b9" translate="yes" xml:space="preserve">
          <source>End of File</source>
          <target state="translated">파일 끝</target>
        </trans-unit>
        <trans-unit id="26f22eedf68e21f94951e1814a0ef555343a9a70" translate="yes" xml:space="preserve">
          <source>End of Line</source>
          <target state="translated">줄의 끝</target>
        </trans-unit>
        <trans-unit id="1922f8549c83f9841a0a3a96665a811403626eb9" translate="yes" xml:space="preserve">
          <source>End of medium</source>
          <target state="translated">매체의 끝</target>
        </trans-unit>
        <trans-unit id="4de459b167bc17b3a0e6bbfc5dba938d1d966746" translate="yes" xml:space="preserve">
          <source>End of text</source>
          <target state="translated">텍스트 끝</target>
        </trans-unit>
        <trans-unit id="8c7f307345f3f9f062b9e039589289044820b04a" translate="yes" xml:space="preserve">
          <source>End of transmission</source>
          <target state="translated">전송 끝</target>
        </trans-unit>
        <trans-unit id="d64987ee0b36791afc8558c7aa92bade6f37e738" translate="yes" xml:space="preserve">
          <source>End of transmission block</source>
          <target state="translated">전송 블록 끝</target>
        </trans-unit>
        <trans-unit id="02fe45e6afb4c80bc3451ca5beaedbe06e5b4573" translate="yes" xml:space="preserve">
          <source>End use of ap.</source>
          <target state="translated">ap의 사용 종료.</target>
        </trans-unit>
        <trans-unit id="ceebd323052ebae99407c57b0c539216799488af" translate="yes" xml:space="preserve">
          <source>End-of-line (U+000A).</source>
          <target state="translated">라인 끝 (U + 000A).</target>
        </trans-unit>
        <trans-unit id="322c5d3730703ae50125a473e7a7c3d0e9ef2301" translate="yes" xml:space="preserve">
          <source>Endianness</source>
          <target state="translated">Endianness</target>
        </trans-unit>
        <trans-unit id="13a5c5feafb1e854278095b06d5c23b1b6c39ea8" translate="yes" xml:space="preserve">
          <source>Endianness conversion</source>
          <target state="translated">엔디안 니스 변환</target>
        </trans-unit>
        <trans-unit id="46c0381e6bc545755b616831881040e1b2f21be9" translate="yes" xml:space="preserve">
          <source>Endianness refers to the order in which multibyte types are stored. The two main orders are</source>
          <target state="translated">엔디안은 멀티 바이트 유형이 저장되는 순서를 나타냅니다. 두 가지 주요 주문은</target>
        </trans-unit>
        <trans-unit id="077056a263e02ed818ae98bf1fa380acb11b14ed" translate="yes" xml:space="preserve">
          <source>Enforce</source>
          <target state="translated">Enforce</target>
        </trans-unit>
        <trans-unit id="b48fd47a6c0cd5f02c2e6251cb7c4497455891d8" translate="yes" xml:space="preserve">
          <source>Enforces that the given value is true, throwing an &lt;code&gt;ErrnoException&lt;/code&gt; if it is not.</source>
          <target state="translated">주어진 값이 true 가 아닌 경우 &lt;code&gt;ErrnoException&lt;/code&gt; 을 발생 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="4ea84a73fbc3cd4c8a0ef912e19036649eae80de" translate="yes" xml:space="preserve">
          <source>Enforces that the given value is true. If the given value is false, an exception is thrown. The</source>
          <target state="translated">주어진 값이 true가되도록합니다. 주어진 값이 false이면 예외가 발생합니다. 그만큼</target>
        </trans-unit>
        <trans-unit id="ff68eb68195a8071792a3ca526f37b8bcbc8ec51" translate="yes" xml:space="preserve">
          <source>Enquiry</source>
          <target state="translated">Enquiry</target>
        </trans-unit>
        <trans-unit id="1ae4e99b78a129f094edccddc69d35644252e904" translate="yes" xml:space="preserve">
          <source>Ensure that the provided path exists</source>
          <target state="translated">제공된 경로가 존재하는지 확인하십시오</target>
        </trans-unit>
        <trans-unit id="29ccbf8748c2fbce9ee3867511df1c6e53e16753" translate="yes" xml:space="preserve">
          <source>Ensure the root path (the path minus the name) of the provided path exists, and terminate the process if it doesn't.</source>
          <target state="translated">제공된 경로의 루트 경로 (경로에서 이름을 뺀)가 있는지 확인하고 존재하지 않는 경우 프로세스를 종료하십시오.</target>
        </trans-unit>
        <trans-unit id="5f56bd357515dfd89697384d6d4a430df26264c8" translate="yes" xml:space="preserve">
          <source>Ensures sufficient capacity to accommodate &lt;code&gt;e&lt;/code&gt; elements. If &lt;code&gt;e &amp;lt; capacity&lt;/code&gt;, this method does nothing.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; 요소 를 수용 할 수있는 충분한 용량을 보장 합니다. 경우 &lt;code&gt;e &amp;lt; capacity&lt;/code&gt; 이 메소드는 아무것도 실시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7496c87d8654c0d48379ac62a2d57a9cbf3195d3" translate="yes" xml:space="preserve">
          <source>Ensures* &lt;strong id=&quot;fensures&quot;&gt;fensures&lt;/strong&gt;;</source>
          <target state="translated">&lt;strong id=&quot;fensures&quot;&gt;펜치&lt;/strong&gt; 보장 ;</target>
        </trans-unit>
        <trans-unit id="1ecdf6feee54c3ecdc9ed86dd3b1d8d646d8d82e" translate="yes" xml:space="preserve">
          <source>Entry point for CTFE. A compile-time result is required. Give an error if not possible.</source>
          <target state="translated">CTFE의 진입 점. 컴파일 타임 결과가 필요합니다. 가능하지 않은 경우 오류를 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="1e2bd9cd17d10f67710426147be408571da46673" translate="yes" xml:space="preserve">
          <source>Enum &amp;amp; Variable Templates</source>
          <target state="translated">열거 형 및 변수 템플릿</target>
        </trans-unit>
        <trans-unit id="5a1be1c96f470256fed749b9334c204f6340eda9" translate="yes" xml:space="preserve">
          <source>Enum Default Initializer</source>
          <target state="translated">열거 형 기본 이니셜 라이저</target>
        </trans-unit>
        <trans-unit id="a1ea6e59090424af41c0589b36355a75f90aa3a0" translate="yes" xml:space="preserve">
          <source>Enum Properties</source>
          <target state="translated">열거 형 속성</target>
        </trans-unit>
        <trans-unit id="9c419b2f60d486073fc04f184ff556748d53e97b" translate="yes" xml:space="preserve">
          <source>Enum declarations are used to define a group of constants.</source>
          <target state="translated">열거 형 선언은 상수 그룹을 정의하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="465cd0ed52d2e368b8931b724a70ae413c97f797" translate="yes" xml:space="preserve">
          <source>Enum options.</source>
          <target state="translated">열거 형 옵션.</target>
        </trans-unit>
        <trans-unit id="4b2b0b99f8b474622498c40d642e3acadf238431" translate="yes" xml:space="preserve">
          <source>Enum properties only exist for named enums.</source>
          <target state="translated">열거 형 속성은 명명 된 열거 형에만 존재합니다.</target>
        </trans-unit>
        <trans-unit id="3b5232dbf7a0d383457da309b54268e5223b3cd1" translate="yes" xml:space="preserve">
          <source>EnumBaseType</source>
          <target state="translated">EnumBaseType</target>
        </trans-unit>
        <trans-unit id="5459409c4560a1853b8bcba1a6a798e678c27502" translate="yes" xml:space="preserve">
          <source>EnumMember</source>
          <target state="translated">EnumMember</target>
        </trans-unit>
        <trans-unit id="1cb2acbf0ed9c36886669ea0a63a81c566c074d5" translate="yes" xml:space="preserve">
          <source>EnumMembers</source>
          <target state="translated">EnumMembers</target>
        </trans-unit>
        <trans-unit id="fcd3434f3e84e6bf841e9b8a79d8c04bee767ab0" translate="yes" xml:space="preserve">
          <source>Enumerated types are converted to strings as their symbolic names.</source>
          <target state="translated">열거 된 유형은 기호 이름으로 문자열로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="7b3cd3ee7332b62ae93f10b73519c0675e0a4b7b" translate="yes" xml:space="preserve">
          <source>Enumeration type for normalization forms, passed as template parameter for functions like &lt;a href=&quot;#normalize&quot;&gt;&lt;code&gt;normalize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">같은 기능을위한 템플릿 매개 변수로 전달 정규화 형태에 대한 열거 형 &lt;a href=&quot;#normalize&quot;&gt; &lt;code&gt;normalize&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4135d93181c7c7b6f7eebfce73c4b88f3696363b" translate="yes" xml:space="preserve">
          <source>Enumerator &lt;code&gt;start&lt;/code&gt;</source>
          <target state="translated">열거 자 &lt;code&gt;start&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f3104dd45718e6d1ac6a03b91ae67193ae8361f0" translate="yes" xml:space="preserve">
          <source>Enums</source>
          <target state="translated">Enums</target>
        </trans-unit>
        <trans-unit id="91b5a4505ff4388b543e615403e943b213e146be" translate="yes" xml:space="preserve">
          <source>Enums must have at least one member.</source>
          <target state="translated">열거 형에는 멤버가 하나 이상 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="1173b2e11bd16e5dc36c119a4b84f02be11626b5" translate="yes" xml:space="preserve">
          <source>Environment variables</source>
          <target state="translated">환경 변수</target>
        </trans-unit>
        <trans-unit id="af2c16f78a14f7f4e0c19bb8444d3b5d1ddbd6bc" translate="yes" xml:space="preserve">
          <source>Eponymous Templates</source>
          <target state="translated">시조 템플릿</target>
        </trans-unit>
        <trans-unit id="98960d79731e92f6a1481f64f5023d43b91903f0" translate="yes" xml:space="preserve">
          <source>Equal to &lt;a href=&quot;etc_c_curl#CURLcode&quot;&gt;&lt;code&gt;etc.c.curl.CURLcode&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">등 &lt;a href=&quot;etc_c_curl#CURLcode&quot;&gt; &lt;code&gt;etc.c.curl.CURLcode&lt;/code&gt; &lt;/a&gt; 동일</target>
        </trans-unit>
        <trans-unit id="eb253eb5985c5dedcf6ea0e168a624316301f2da" translate="yes" xml:space="preserve">
          <source>Equality Expressions</source>
          <target state="translated">평등 표현</target>
        </trans-unit>
        <trans-unit id="d0f7f003b5eae761303767b178c5b32ad771e92d" translate="yes" xml:space="preserve">
          <source>Equality comparisons (==, !=, is, !is) are permitted between all pointers, without restriction.</source>
          <target state="translated">등호 비교 (==,! =, is,! is)는 모든 포인터간에 제한없이 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="d0efd94caf98a8617b53c3b12681dbbfdad08e3c" translate="yes" xml:space="preserve">
          <source>Equality expressions compare the two operands for equality (&lt;code&gt;==&lt;/code&gt;) or inequality (&lt;code&gt;!=&lt;/code&gt;). The type of the result is &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="translated">같음 식은 두 피연산자를 같음 ( &lt;code&gt;==&lt;/code&gt; ) 또는 부등식 ( &lt;code&gt;!=&lt;/code&gt; )으로 비교합니다. 결과 유형은 &lt;code&gt;bool&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a821b59480ce2414bd6165847b5c1fb14cb79065" translate="yes" xml:space="preserve">
          <source>Equivalence is defined by the predicate &lt;code&gt;pred&lt;/code&gt;, which can be either binary, which is passed to &lt;a href=&quot;std_functional#binaryFun&quot;&gt;&lt;code&gt;std.functional.binaryFun&lt;/code&gt;&lt;/a&gt;, or unary, which is passed to &lt;a href=&quot;std_functional#unaryFun&quot;&gt;&lt;code&gt;std.functional.unaryFun&lt;/code&gt;&lt;/a&gt;. In the binary form, two range elements &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are considered equivalent if &lt;code&gt;pred(a,b)&lt;/code&gt; is true. In unary form, two elements are considered equivalent if &lt;code&gt;pred(a) == pred(b)&lt;/code&gt; is true.</source>
          <target state="translated">등가는 술어에 의해 정의된다 &lt;code&gt;pred&lt;/code&gt; 에 전달하거나 바이너리 될 수 &lt;a href=&quot;std_functional#binaryFun&quot;&gt; &lt;code&gt;std.functional.binaryFun&lt;/code&gt; &lt;/a&gt; 에 전달하거나, 단항, &lt;a href=&quot;std_functional#unaryFun&quot;&gt; &lt;code&gt;std.functional.unaryFun&lt;/code&gt; &lt;/a&gt; . 이진 형식에서 &lt;code&gt;pred(a,b)&lt;/code&gt; 가 true 인 경우 두 범위 요소 &lt;code&gt;a&lt;/code&gt; 와 &lt;code&gt;b&lt;/code&gt; 는 동등한 것으로 간주됩니다 . 단항 형태에서 &lt;code&gt;pred(a) == pred(b)&lt;/code&gt; 가 true 인 경우 두 요소가 동등한 것으로 간주됩니다 .</target>
        </trans-unit>
        <trans-unit id="f3d4d9eeca49f09a17fcd8a54a0fa4787c33d0da" translate="yes" xml:space="preserve">
          <source>Equivalent elements separated by an intervening non-equivalent element will appear in separate subranges; this function only considers adjacent equivalence. Elements in the subranges will always appear in the same order they appear in the original range.</source>
          <target state="translated">개입하는 비등가 요소로 분리 된 동등한 요소는 별도의 하위 범위로 나타납니다. 이 함수는 인접한 동등성 만 고려합니다. 하위 범위의 요소는 항상 원래 범위와 동일한 순서로 나타납니다.</target>
        </trans-unit>
        <trans-unit id="15ed9b5cca8803ef06cb9688dbc5af4fe192a4a4" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;file.writef(fmt, args, '\n')&lt;/code&gt;.</source>
          <target state="translated">상당 &lt;code&gt;file.writef(fmt, args, '\n')&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ce6d1bc952023308db732f8f94e2b34d7940aa93" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;fmax(x-y, 0)&lt;/code&gt;.</source>
          <target state="translated">등가 &lt;code&gt;fmax(x-y, 0)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8e86802e906e78082747bcdbd4222e541b464705" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;write(args, '\n')&lt;/code&gt;. Calling &lt;code&gt;writeln&lt;/code&gt; without arguments is valid and just prints a newline to the standard output.</source>
          <target state="translated">상당 &lt;code&gt;write(args, '\n')&lt;/code&gt; . 호출하는 &lt;code&gt;writeln&lt;/code&gt; 인수없이하는 것은 유효하며, 단지 표준 출력에 개행 문자를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="d1a5bc7d4ab0b05ff1942fc426e894258a7dcb1a" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;writef(fmt, args, '\n')&lt;/code&gt;.</source>
          <target state="translated">상당 &lt;code&gt;writef(fmt, args, '\n')&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7f2f6a15cf8da2b27e5a4af47b58e7ad71c0b3d9" translate="yes" xml:space="preserve">
          <source>Error</source>
          <target state="translated">Error</target>
        </trans-unit>
        <trans-unit id="c73f93f4b9a02f4e5a949fd11052e3a166c6f2ac" translate="yes" xml:space="preserve">
          <source>Error Codes And Messages</source>
          <target state="translated">오류 코드 및 메시지</target>
        </trans-unit>
        <trans-unit id="7fc353a0378a6af6e63cb4e746bbbbd0e56d46cc" translate="yes" xml:space="preserve">
          <source>Error Logging Interface</source>
          <target state="translated">오류 로깅 인터페이스</target>
        </trans-unit>
        <trans-unit id="ebaf4b5ec788b16d6d54392acc5fde873dbc786a" translate="yes" xml:space="preserve">
          <source>Error exceptions get handled one way or another. There is nothing like a NULL pointer return indicating an error, followed by trying to use that NULL pointer.</source>
          <target state="translated">오류 예외는 어떤 방식 으로든 처리됩니다. 오류를 나타내는 NULL 포인터 리턴과 같은 것은 없으며 그 뒤에 NULL 포인터를 사용하려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="a623c8e1a198390969227d2d0b456f83bf23e21d" translate="yes" xml:space="preserve">
          <source>Error function</source>
          <target state="translated">에러 기능</target>
        </trans-unit>
        <trans-unit id="34d6de902e8eedf56209e7c63d5376af7cf4d10e" translate="yes" xml:space="preserve">
          <source>Error message</source>
          <target state="translated">에러 메시지</target>
        </trans-unit>
        <trans-unit id="50c855f2252890155a086cc4373ee4123aab7e7a" translate="yes" xml:space="preserve">
          <source>Error message from sqlite3_mprintf()</source>
          <target state="translated">sqlite3_mprintf ()의 오류 메시지</target>
        </trans-unit>
        <trans-unit id="2252ea1e4cbf7755de129147ae3fdbeb59b1c86e" translate="yes" xml:space="preserve">
          <source>ErrorExp</source>
          <target state="translated">ErrorExp</target>
        </trans-unit>
        <trans-unit id="813b5f9ec8deffdd987c925d7e6501434e44711b" translate="yes" xml:space="preserve">
          <source>ErrorExp &lt;strong id=&quot;arrayOpInvalidError&quot;&gt;arrayOpInvalidError&lt;/strong&gt;(Expression e);</source>
          <target state="translated">ErrorExp &lt;strong id=&quot;arrayOpInvalidError&quot;&gt;arrayOpInvalidError&lt;/strong&gt; (식 e);</target>
        </trans-unit>
        <trans-unit id="805e86a8cbf628e38e4c45612c005a504009e79a" translate="yes" xml:space="preserve">
          <source>Errors</source>
          <target state="translated">Errors</target>
        </trans-unit>
        <trans-unit id="36fd0b0b802c6a97f7436e7a54204bfe482a5123" translate="yes" xml:space="preserve">
          <source>Errors are not part of the normal flow of a program. Errors are exceptional, unusual, and unexpected.</source>
          <target state="translated">오류는 프로그램의 정상적인 흐름의 일부가 아닙니다. 오류는 예외적이며 비정상적이며 예기치 않은 것입니다.</target>
        </trans-unit>
        <trans-unit id="e66bc34f0c40669df2318f69c4904fa255dc47c1" translate="yes" xml:space="preserve">
          <source>Errors throw a ZlibException.</source>
          <target state="translated">에러는 ZlibException을 던집니다.</target>
        </trans-unit>
        <trans-unit id="21208fcb40762782f0bd5de0b94d3c459b091b72" translate="yes" xml:space="preserve">
          <source>Es &lt;code&gt;es&lt;/code&gt;</source>
          <target state="translated">Es &lt;code&gt;es&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b4cfe1f435f06beaae8e7d7c6d43e5dddbe640bb" translate="yes" xml:space="preserve">
          <source>Escape</source>
          <target state="translated">Escape</target>
        </trans-unit>
        <trans-unit id="3e13e2405c74a25265ee4e281ccf78feafc5234d" translate="yes" xml:space="preserve">
          <source>Escape Sequences</source>
          <target state="translated">이스케이프 시퀀스</target>
        </trans-unit>
        <trans-unit id="7a8244906137fd404125079316acd1c376574734" translate="yes" xml:space="preserve">
          <source>Escapes URL strings (converts all letters consider illegal in URLs to their %XX versions). This function returns a new allocated string or NULL if an error occurred.</source>
          <target state="translated">URL 문자열을 이스케이프합니다 (URL에서 잘못된 것으로 간주되는 모든 문자를 % XX 버전으로 변환). 이 함수는 새로운 할당 문자열을 반환하거나 오류가 발생하면 NULL을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c62c2a45ea9630e69c7b0296a18169ca1da2c6cd" translate="yes" xml:space="preserve">
          <source>Escapes a filename to be used for shell redirection with &lt;a href=&quot;#spawnShell&quot;&gt;&lt;code&gt;spawnShell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pipeShell&quot;&gt;&lt;code&gt;pipeShell&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#executeShell&quot;&gt;&lt;code&gt;executeShell&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#spawnShell&quot;&gt; &lt;code&gt;spawnShell&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#pipeShell&quot;&gt; &lt;code&gt;pipeShell&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#executeShell&quot;&gt; &lt;code&gt;executeShell&lt;/code&gt; 을&lt;/a&gt; 사용하여 셸 리디렉션에 사용할 파일 이름을 이스케이프합니다 .</target>
        </trans-unit>
        <trans-unit id="334839f3a4af8ebe642ad214739fca50dd79b867" translate="yes" xml:space="preserve">
          <source>Escapes an argv-style argument array to be used with &lt;a href=&quot;#spawnShell&quot;&gt;&lt;code&gt;spawnShell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pipeShell&quot;&gt;&lt;code&gt;pipeShell&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#executeShell&quot;&gt;&lt;code&gt;executeShell&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#spawnShell&quot;&gt; &lt;code&gt;spawnShell&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#pipeShell&quot;&gt; &lt;code&gt;pipeShell&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#executeShell&quot;&gt; &lt;code&gt;executeShell&lt;/code&gt; &lt;/a&gt; 과 함께 사용할 argv 스타일 인수 배열을 이스케이프합니다 .</target>
        </trans-unit>
        <trans-unit id="c42e53a2ef68cf047319483e6444a0150025a7f7" translate="yes" xml:space="preserve">
          <source>Essentially just calls &lt;code&gt;checkNestedReference() for each variable reference in &lt;/code&gt;e`.</source>
          <target state="translated">본질적으로 &lt;code&gt;checkNestedReference() for each variable reference in &lt;/code&gt; 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="37eefc2536d5ec542e4520a234de4d178700f2f2" translate="yes" xml:space="preserve">
          <source>Establish a connection. If the socket is blocking, connect waits for the connection to be made. If the socket is nonblocking, connect returns immediately and the connection attempt is still in progress.</source>
          <target state="translated">연결을 설정하십시오. 소켓이 막히면 connect는 연결될 때까지 기다립니다. 소켓이 비 블로킹 인 경우, connect가 즉시 리턴되고 연결 시도가 여전히 진행 중입니다.</target>
        </trans-unit>
        <trans-unit id="cb2a5e97585ee713b7b435ea0059ffc0b575e976" translate="yes" xml:space="preserve">
          <source>Estimated cost of using this index</source>
          <target state="translated">이 인덱스 사용에 대한 예상 비용</target>
        </trans-unit>
        <trans-unit id="4dc2b41f9f62ae24f4ee1bdb98221a2c0df13e48" translate="yes" xml:space="preserve">
          <source>Ethiopic</source>
          <target state="translated">Ethiopic</target>
        </trans-unit>
        <trans-unit id="50a8bee7f3f7f91e053f811fb77da91693c7dedd" translate="yes" xml:space="preserve">
          <source>Ethiopic Extended</source>
          <target state="translated">이디 오픽 확장</target>
        </trans-unit>
        <trans-unit id="0b1c5f04c3cf37f71157c85cf3538322e5bf9da1" translate="yes" xml:space="preserve">
          <source>Ethiopic Extended-A</source>
          <target state="translated">이디 오픽 확장 -A</target>
        </trans-unit>
        <trans-unit id="7c8438f345294d8ae21cfe001be4e6de5852f8b9" translate="yes" xml:space="preserve">
          <source>Ethiopic Supplement</source>
          <target state="translated">에티오피아 보충제</target>
        </trans-unit>
        <trans-unit id="ec4e1ce13e95c935383dc5219130b98c64fd292a" translate="yes" xml:space="preserve">
          <source>Evaluate &amp;gt;,&amp;lt;=, etc. Resolves slices before comparing. Returns 0 or 1</source>
          <target state="translated">&amp;gt;, &amp;lt;= 등을 평가하십시오. 비교하기 전에 슬라이스를 해결하십시오. 0 또는 1을 반환</target>
        </trans-unit>
        <trans-unit id="63a877dc2e3925ab0262cba5e336e32067b1f868" translate="yes" xml:space="preserve">
          <source>Evaluate ==, !=. Resolves slices before comparing. Returns 0 or 1</source>
          <target state="translated">==,! =를 평가하십시오. 비교하기 전에 슬라이스를 해결합니다. 0 또는 1을 반환</target>
        </trans-unit>
        <trans-unit id="b8465fee9c60fa18c66485376de57ad47eb492b1" translate="yes" xml:space="preserve">
          <source>Evaluate An SQL Statement</source>
          <target state="translated">SQL 문 평가</target>
        </trans-unit>
        <trans-unit id="f0a33e70cc28b1c16a65e2ac8b3f23349a36f271" translate="yes" xml:space="preserve">
          <source>Evaluate builtin function. Return result; NULL if cannot evaluate it.</source>
          <target state="translated">내장 함수를 평가하십시오. 결과 반환; 평가할 수 없으면 NULL입니다.</target>
        </trans-unit>
        <trans-unit id="ba342f0fe13aca65712f2259febed282817e389a" translate="yes" xml:space="preserve">
          <source>Evaluate is, !is. Resolves slices before comparing. Returns 0 or 1</source>
          <target state="translated">평가는!입니다. 비교하기 전에 슬라이스를 해결합니다. 0 또는 1을 반환</target>
        </trans-unit>
        <trans-unit id="0dfd6ef81633d9cb47cabec388bec88396961ba5" translate="yes" xml:space="preserve">
          <source>Evaluate polynomial A(x) = a&lt;sub&gt;0&lt;/sub&gt; + a&lt;sub&gt;1&lt;/sub&gt;x + a&lt;sub&gt;2&lt;/sub&gt;x&lt;sup&gt;2&lt;/sup&gt; + a&lt;sub&gt;3&lt;/sub&gt;x&lt;sup&gt;3&lt;/sup&gt;; ...</source>
          <target state="translated">다항식 평가 A (x) = a &lt;sub&gt;0&lt;/sub&gt; + a &lt;sub&gt;1&lt;/sub&gt; x + a &lt;sub&gt;2&lt;/sub&gt; x &lt;sup&gt;2&lt;/sup&gt; + a &lt;sub&gt;3&lt;/sub&gt; x &lt;sup&gt;3&lt;/sup&gt; ; ...</target>
        </trans-unit>
        <trans-unit id="a5be27aeb62439a889f10e6c829e770637dd9146" translate="yes" xml:space="preserve">
          <source>Evaluates to &lt;code&gt;AliasSeq!(F!(T[0]), F!(T[1]), ..., F!(T[$ - 1]))&lt;/code&gt;.</source>
          <target state="translated">평가 &lt;code&gt;AliasSeq!(F!(T[0]), F!(T[1]), ..., F!(T[$ - 1]))&lt;/code&gt; .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
