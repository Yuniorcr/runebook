<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="react_native">
    <body>
      <group id="react_native">
        <trans-unit id="4dce5e8a5780a0d999cb110e968f6ce86eadd905" translate="yes" xml:space="preserve">
          <source>If your app is targeting the Android &lt;code&gt;API level 23&lt;/code&gt; or greater, make sure you have the permission &lt;code&gt;android.permission.SYSTEM_ALERT_WINDOW&lt;/code&gt; enabled for the development build. You can check this with &lt;code&gt;Settings.canDrawOverlays(this);&lt;/code&gt;. This is required in dev builds because React Native development errors must be displayed above all the other windows. Due to the new permissions system introduced in the API level 23 (Android M), the user needs to approve it. This can be achieved by adding the following code to your Activity's in &lt;code&gt;onCreate()&lt;/code&gt; method.</source>
          <target state="translated">앱이 Android &lt;code&gt;API level 23&lt;/code&gt; 이상을 대상으로하는 경우 개발 빌드에 &lt;code&gt;android.permission.SYSTEM_ALERT_WINDOW&lt;/code&gt; 권한 이 활성화되어 있는지 확인하십시오 . &lt;code&gt;Settings.canDrawOverlays(this);&lt;/code&gt; 확인할 수 있습니다 . . 이는 React Native 개발 오류가 다른 모든 창 위에 표시되어야하므로 개발자 빌드에서 필요합니다. API 레벨 23 (Android M)에 도입 된 새로운 권한 시스템으로 인해 사용자는이를 승인해야합니다. 이것은 활동의 &lt;code&gt;onCreate()&lt;/code&gt; 메소드 에 다음 코드를 추가하여 달성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aaa442e9c8534c08d7ebc94f0ea858802d7e66dd" translate="yes" xml:space="preserve">
          <source>If your app is using &lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html&quot;&gt;Universal Links&lt;/a&gt;, you'll need to add the following code as well:</source>
          <target state="translated">앱이 &lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html&quot;&gt;유니버설 링크를&lt;/a&gt; 사용 하는 경우 다음 코드도 추가해야합니다.</target>
        </trans-unit>
        <trans-unit id="98f05ecc27e0540e6eadcbb6a7104c7b369c9d08" translate="yes" xml:space="preserve">
          <source>If your app was launched from an external url registered to your app you can access and handle it from any component you want with</source>
          <target state="translated">앱에 등록 된 외부 URL에서 앱을 시작한 경우 원하는 모든 구성 요소에서 액세스하고 처리 할 수 ​​있습니다</target>
        </trans-unit>
        <trans-unit id="4ee31af7ae001109d3dabcf23621de35076babd7" translate="yes" xml:space="preserve">
          <source>If your application needs to access HTTP resources on production, see &lt;a href=&quot;http://ste.vn/2015/06/10/configuring-app-transport-security-ios-9-osx-10-11/&quot;&gt;this post&lt;/a&gt; to learn how to configure ATS on your project.</source>
          <target state="translated">응용 프로그램 &lt;a href=&quot;http://ste.vn/2015/06/10/configuring-app-transport-security-ios-9-osx-10-11/&quot;&gt;이&lt;/a&gt; 프로덕션 환경에서 HTTP 리소스에 액세스해야하는 경우이 게시물 을 참조 하여 프로젝트에서 ATS를 구성하는 방법을 알아보십시오.</target>
        </trans-unit>
        <trans-unit id="de744dbb2078d4140232bc4870a395c91664c0b4" translate="yes" xml:space="preserve">
          <source>If your pull request is merged, a core contributor will update the &lt;a href=&quot;https://github.com/facebook/react-native/wiki/Breaking-Changes&quot;&gt;list of breaking changes&lt;/a&gt; which is then used to populate the release notes.</source>
          <target state="translated">풀 요청이 병합되면 핵심 컨트 리뷰 터가 &lt;a href=&quot;https://github.com/facebook/react-native/wiki/Breaking-Changes&quot;&gt;주요 변경 사항 목록을&lt;/a&gt; 업데이트 한 후 릴리스 정보를 채 웁니다.</target>
        </trans-unit>
        <trans-unit id="b071d71588767fbde5b53687390f45cfe83ec688" translate="yes" xml:space="preserve">
          <source>If your trace .html file isn't opening correctly, check your browser console for the following:</source>
          <target state="translated">추적 .html 파일이 올바르게 열리지 않으면 브라우저 콘솔에서 다음을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="50e19fda0d5b4b74a4a1a1d584e56578693a4ea4" translate="yes" xml:space="preserve">
          <source>Image</source>
          <target state="translated">Image</target>
        </trans-unit>
        <trans-unit id="8c5c533b00a53925bd9f4a98f7ccff66e76090ea" translate="yes" xml:space="preserve">
          <source>Image Style Props</source>
          <target state="translated">이미지 스타일 소품</target>
        </trans-unit>
        <trans-unit id="6360007aa3a70f902fe0a85400a1fb4956f0cc71" translate="yes" xml:space="preserve">
          <source>Image Style Props#backfaceVisibility</source>
          <target state="translated">이미지 스타일 소품 #backfaceVisibility</target>
        </trans-unit>
        <trans-unit id="56309d89b5b2b19b4623a34cb1f32940a76268c4" translate="yes" xml:space="preserve">
          <source>Image Style Props#backgroundColor</source>
          <target state="translated">이미지 스타일 소품 #backgroundColor</target>
        </trans-unit>
        <trans-unit id="9add8bde56efc96be61947f8609eb01acdc98836" translate="yes" xml:space="preserve">
          <source>Image Style Props#borderBottomLeftRadius</source>
          <target state="translated">이미지 스타일 소품 #borderBottomLeftRadius</target>
        </trans-unit>
        <trans-unit id="b3f7e6e54c04c772eb209d62fd7d3a60c4fcfa6a" translate="yes" xml:space="preserve">
          <source>Image Style Props#borderBottomRightRadius</source>
          <target state="translated">이미지 스타일 소품 #borderBottomRightRadius</target>
        </trans-unit>
        <trans-unit id="f7417cb47e7052835f80fabb0fb9936f7eba0a7a" translate="yes" xml:space="preserve">
          <source>Image Style Props#borderColor</source>
          <target state="translated">이미지 스타일 소품 #borderColor</target>
        </trans-unit>
        <trans-unit id="5c1de2555cfb05fcf4fab63060c8fac4e2e6d010" translate="yes" xml:space="preserve">
          <source>Image Style Props#borderRadius</source>
          <target state="translated">이미지 스타일 소품 #borderRadius</target>
        </trans-unit>
        <trans-unit id="33c9b9b05b4e5e5270f71b36df4ba5a1e463f972" translate="yes" xml:space="preserve">
          <source>Image Style Props#borderTopLeftRadius</source>
          <target state="translated">이미지 스타일 소품 #borderTopLeftRadius</target>
        </trans-unit>
        <trans-unit id="5a1593af2a4dfecb89ebfdaff451b00b4a4e9855" translate="yes" xml:space="preserve">
          <source>Image Style Props#borderTopRightRadius</source>
          <target state="translated">이미지 스타일 소품 #borderTopRightRadius</target>
        </trans-unit>
        <trans-unit id="07c66755304bfa5179cbe0078bcfd8130de636c1" translate="yes" xml:space="preserve">
          <source>Image Style Props#borderWidth</source>
          <target state="translated">이미지 스타일 소품 #borderWidth</target>
        </trans-unit>
        <trans-unit id="c39ce427826d1e92ee683fe8378673818561ca57" translate="yes" xml:space="preserve">
          <source>Image Style Props#opacity</source>
          <target state="translated">이미지 스타일 소품 # 불투명도</target>
        </trans-unit>
        <trans-unit id="80bb9b287f00435d399189076653ef5eb34954eb" translate="yes" xml:space="preserve">
          <source>Image Style Props#overflow</source>
          <target state="translated">이미지 스타일 소품</target>
        </trans-unit>
        <trans-unit id="755c426af6001cae6b96811ee1d4de390837e05a" translate="yes" xml:space="preserve">
          <source>Image Style Props#overlayColor</source>
          <target state="translated">이미지 스타일 소품 #overlayColor</target>
        </trans-unit>
        <trans-unit id="7dbe449e0816cbf8654e221a98937985d50f80e3" translate="yes" xml:space="preserve">
          <source>Image Style Props#resizeMode</source>
          <target state="translated">이미지 스타일 소품 #resizeMode</target>
        </trans-unit>
        <trans-unit id="34f54d48e1951db1b94b0d2631929017fbe4f2d4" translate="yes" xml:space="preserve">
          <source>Image Style Props#tintColor</source>
          <target state="translated">이미지 스타일 소품 #tintColor</target>
        </trans-unit>
        <trans-unit id="39267d96003d854c250bdbe985f15197d117936e" translate="yes" xml:space="preserve">
          <source>Image decoding can take more than a frame-worth of time. This is one of the major sources of frame drops on the web because decoding is done in the main thread. In React Native, image decoding is done in a different thread. In practice, you already need to handle the case when the image is not downloaded yet, so displaying the placeholder for a few more frames while it is decoding does not require any code change.</source>
          <target state="translated">이미지 디코딩에는 프레임보다 많은 시간이 소요될 수 있습니다. 디코딩은 메인 스레드에서 수행되므로 웹에서 프레임 드롭의 주요 소스 중 하나입니다. React Native에서 이미지 디코딩은 다른 스레드에서 수행됩니다. 실제로 이미지가 아직 다운로드되지 않은 경우를 처리해야하므로 디코딩하는 동안 몇 개의 프레임에 대한 자리 표시자를 표시하면 코드를 변경할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="b337e6c582ddf3b1ead5a398bf472e2119f7086d" translate="yes" xml:space="preserve">
          <source>Image#accessibilityLabel</source>
          <target state="translated">Image#accessibilityLabel</target>
        </trans-unit>
        <trans-unit id="f2464ea3c0bd176b9a319e4ae61b49739ca68977" translate="yes" xml:space="preserve">
          <source>Image#accessible</source>
          <target state="translated">Image#accessible</target>
        </trans-unit>
        <trans-unit id="c6ed678a566b4371d03963b648b886f3bc11d41e" translate="yes" xml:space="preserve">
          <source>Image#blurRadius</source>
          <target state="translated">Image#blurRadius</target>
        </trans-unit>
        <trans-unit id="61a49975b526248367fe350848473b0e1e0458cf" translate="yes" xml:space="preserve">
          <source>Image#capInsets</source>
          <target state="translated">Image#capInsets</target>
        </trans-unit>
        <trans-unit id="b1ac84e3bcfd56648a17c0b55c26b6350ee5842b" translate="yes" xml:space="preserve">
          <source>Image#defaultSource</source>
          <target state="translated">Image#defaultSource</target>
        </trans-unit>
        <trans-unit id="e8c59d23b11629f71fdc365a1c93c96b9e6d3506" translate="yes" xml:space="preserve">
          <source>Image#fadeDuration</source>
          <target state="translated">Image#fadeDuration</target>
        </trans-unit>
        <trans-unit id="ba2d64794aa5cb2a9d18ca73fc5731241b4f31ec" translate="yes" xml:space="preserve">
          <source>Image#loadingIndicatorSource</source>
          <target state="translated">Image#loadingIndicatorSource</target>
        </trans-unit>
        <trans-unit id="9b2ba4f63e98a02b5630f7513b4f3f192785eb79" translate="yes" xml:space="preserve">
          <source>Image#onError</source>
          <target state="translated">Image#onError</target>
        </trans-unit>
        <trans-unit id="6a59b3b2cec80aee0bdbe81cd49d8d0b41646ffc" translate="yes" xml:space="preserve">
          <source>Image#onLayout</source>
          <target state="translated">Image#onLayout</target>
        </trans-unit>
        <trans-unit id="6adb33e0f63e8c43ca6044c3c9fd1c51bf19ef9d" translate="yes" xml:space="preserve">
          <source>Image#onLoad</source>
          <target state="translated">Image#onLoad</target>
        </trans-unit>
        <trans-unit id="d858965720c8875e7a6d4c65d062a989d0996520" translate="yes" xml:space="preserve">
          <source>Image#onLoadEnd</source>
          <target state="translated">Image#onLoadEnd</target>
        </trans-unit>
        <trans-unit id="df7471b3cf3a087d2864b62d495b835b6926188d" translate="yes" xml:space="preserve">
          <source>Image#onLoadStart</source>
          <target state="translated">Image#onLoadStart</target>
        </trans-unit>
        <trans-unit id="0dd8618d167e58725426e54924b9ba510796389b" translate="yes" xml:space="preserve">
          <source>Image#onPartialLoad</source>
          <target state="translated">Image#onPartialLoad</target>
        </trans-unit>
        <trans-unit id="7d72e00914045da88c364ca5160503976eab5053" translate="yes" xml:space="preserve">
          <source>Image#onProgress</source>
          <target state="translated">Image#onProgress</target>
        </trans-unit>
        <trans-unit id="e0f72be811d2177d1bd9ab7a021afd525a42adda" translate="yes" xml:space="preserve">
          <source>Image#resizeMethod</source>
          <target state="translated">Image#resizeMethod</target>
        </trans-unit>
        <trans-unit id="69672407538424076770a069f0004ce302d2c707" translate="yes" xml:space="preserve">
          <source>Image#resizeMode</source>
          <target state="translated">Image#resizeMode</target>
        </trans-unit>
        <trans-unit id="51b5f35be8333f919a7cf0e8e06b5fd85883cb6c" translate="yes" xml:space="preserve">
          <source>Image#source</source>
          <target state="translated">Image#source</target>
        </trans-unit>
        <trans-unit id="ad81d87d1135201e22fdba829089f12d6ab706b2" translate="yes" xml:space="preserve">
          <source>Image#style</source>
          <target state="translated">Image#style</target>
        </trans-unit>
        <trans-unit id="71239bb48099edb1d4644fa02a95c0173b882443" translate="yes" xml:space="preserve">
          <source>Image#testID</source>
          <target state="translated">Image#testID</target>
        </trans-unit>
        <trans-unit id="8ca86e3bc27d617d3d6e586b4cc1696af8994643" translate="yes" xml:space="preserve">
          <source>Image.abortPrefetch()</source>
          <target state="translated">Image.abortPrefetch()</target>
        </trans-unit>
        <trans-unit id="355cf5ba48ce573fce95cc9c79a4686a05a2c55e" translate="yes" xml:space="preserve">
          <source>Image.getSize()</source>
          <target state="translated">Image.getSize()</target>
        </trans-unit>
        <trans-unit id="12caafdca3a045f516d15610dcbd2caba02bfe13" translate="yes" xml:space="preserve">
          <source>Image.prefetch()</source>
          <target state="translated">Image.prefetch()</target>
        </trans-unit>
        <trans-unit id="293951de4209dc5716afde3c99f6d635441142e8" translate="yes" xml:space="preserve">
          <source>Image.propTypes.source</source>
          <target state="translated">Image.propTypes.source</target>
        </trans-unit>
        <trans-unit id="dfb24e8ec9e1fed4b555d915c132c62e823c913a" translate="yes" xml:space="preserve">
          <source>Image.queryCache()</source>
          <target state="translated">Image.queryCache()</target>
        </trans-unit>
        <trans-unit id="8b59a6916d8b5acbadead1b04470f8d353ac02e6" translate="yes" xml:space="preserve">
          <source>Image.resolveAssetSource()</source>
          <target state="translated">Image.resolveAssetSource()</target>
        </trans-unit>
        <trans-unit id="a7dd41960b210947bc9f838a2420ec4d33803a0a" translate="yes" xml:space="preserve">
          <source>ImageEditor</source>
          <target state="translated">ImageEditor</target>
        </trans-unit>
        <trans-unit id="37aa9783e936dc421e1783409106a00e756beddf" translate="yes" xml:space="preserve">
          <source>ImageEditor.cropImage()</source>
          <target state="translated">ImageEditor.cropImage()</target>
        </trans-unit>
        <trans-unit id="a3772798520a741b08253540b5cc42d47b2b2f42" translate="yes" xml:space="preserve">
          <source>ImagePickerIOS</source>
          <target state="translated">ImagePickerIOS</target>
        </trans-unit>
        <trans-unit id="2c279cb5944d1b309d11f72907a0be7966c4c3a9" translate="yes" xml:space="preserve">
          <source>ImagePickerIOS.canRecordVideos()</source>
          <target state="translated">ImagePickerIOS.canRecordVideos()</target>
        </trans-unit>
        <trans-unit id="64bfcb1b4ceb9a9584337868d5d90fd06cbe4518" translate="yes" xml:space="preserve">
          <source>ImagePickerIOS.canUseCamera()</source>
          <target state="translated">ImagePickerIOS.canUseCamera()</target>
        </trans-unit>
        <trans-unit id="58016833b6085d003039c6dba28d6e65bae1398f" translate="yes" xml:space="preserve">
          <source>ImagePickerIOS.openCameraDialog()</source>
          <target state="translated">ImagePickerIOS.openCameraDialog()</target>
        </trans-unit>
        <trans-unit id="e7a8164d74a98ce5c8f764a29f58c3fc63c11423" translate="yes" xml:space="preserve">
          <source>ImagePickerIOS.openSelectDialog()</source>
          <target state="translated">ImagePickerIOS.openSelectDialog()</target>
        </trans-unit>
        <trans-unit id="95ca3be166241ae2ac9d1ef221159d431668c3ae" translate="yes" xml:space="preserve">
          <source>ImageSourcePropType</source>
          <target state="translated">ImageSourcePropType</target>
        </trans-unit>
        <trans-unit id="1070ca4be0a47e9e57f07e563e65f4b458a0c23a" translate="yes" xml:space="preserve">
          <source>ImageStore</source>
          <target state="translated">ImageStore</target>
        </trans-unit>
        <trans-unit id="d41b4164a5854a08896831496267bd263e4802d3" translate="yes" xml:space="preserve">
          <source>ImageStore.addImageFromBase64()</source>
          <target state="translated">ImageStore.addImageFromBase64()</target>
        </trans-unit>
        <trans-unit id="70786d2d1632277bd01c1713a2db93bce6702203" translate="yes" xml:space="preserve">
          <source>ImageStore.getBase64ForTag()</source>
          <target state="translated">ImageStore.getBase64ForTag()</target>
        </trans-unit>
        <trans-unit id="5e3f70c435dcaa51e435b99fc70d3c43ff9c55ff" translate="yes" xml:space="preserve">
          <source>ImageStore.hasImageForTag()</source>
          <target state="translated">ImageStore.hasImageForTag()</target>
        </trans-unit>
        <trans-unit id="5933651cb798d84b8726b19f0ce47b74be536673" translate="yes" xml:space="preserve">
          <source>ImageStore.removeImageForTag()</source>
          <target state="translated">ImageStore.removeImageForTag()</target>
        </trans-unit>
        <trans-unit id="7dce2b6efa909e6f8dcedec2f041b5e0a83839c9" translate="yes" xml:space="preserve">
          <source>ImageView example</source>
          <target state="translated">ImageView 예</target>
        </trans-unit>
        <trans-unit id="09e871c98fef3b901a775def173e4126aaf73b42" translate="yes" xml:space="preserve">
          <source>Images</source>
          <target state="translated">Images</target>
        </trans-unit>
        <trans-unit id="51638280417782dfdf7aba6b4e249182aab00a7e" translate="yes" xml:space="preserve">
          <source>Images From Hybrid App's Resources</source>
          <target state="translated">하이브리드 앱 리소스의 이미지</target>
        </trans-unit>
        <trans-unit id="a284be73b73b17edd9ab4e426ef62520cf9f80e8" translate="yes" xml:space="preserve">
          <source>Images can be distributed via &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; packages.</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; 패키지 를 통해 이미지를 배포 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2f60beeeabd90921cfba3a8f4a4654f41d91ab6d" translate="yes" xml:space="preserve">
          <source>Images live in the same folder as your JavaScript code. Components are self-contained.</source>
          <target state="translated">이미지는 JavaScript 코드와 동일한 폴더에 있습니다. 구성 요소는 독립적입니다.</target>
        </trans-unit>
        <trans-unit id="7b23118164c45f40d6a4161daedd82cb58b0ebb7" translate="yes" xml:space="preserve">
          <source>Imperative API</source>
          <target state="translated">명령형 API</target>
        </trans-unit>
        <trans-unit id="a79917180f909d9c0fc43e59c743a8410235813c" translate="yes" xml:space="preserve">
          <source>Implement the &lt;code&gt;-(UIView *)view&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;-(UIView *)view&lt;/code&gt; 메소드를 구현하십시오 .</target>
        </trans-unit>
        <trans-unit id="8526b1e6fb2eda76949ddbd26803bcefb0611c70" translate="yes" xml:space="preserve">
          <source>Implement the &lt;code&gt;createViewInstance&lt;/code&gt; method</source>
          <target state="translated">&lt;code&gt;createViewInstance&lt;/code&gt; 메소드 구현</target>
        </trans-unit>
        <trans-unit id="2d0a82af95db0ebb0c72ae688fcc12ba8e22cde7" translate="yes" xml:space="preserve">
          <source>Implement the JavaScript module</source>
          <target state="translated">자바 스크립트 모듈 구현</target>
        </trans-unit>
        <trans-unit id="235c00c42b79d6977766e986091bda5a3658ee7b" translate="yes" xml:space="preserve">
          <source>Importing the &lt;code&gt;AsyncStorage&lt;/code&gt; library:</source>
          <target state="translated">&lt;code&gt;AsyncStorage&lt;/code&gt; 라이브러리 가져 오기 :</target>
        </trans-unit>
        <trans-unit id="b5a413c6f8ac17cdc486b6f7d5ac5fdb0536f33f" translate="yes" xml:space="preserve">
          <source>Improving User Experience</source>
          <target state="translated">사용자 경험 향상</target>
        </trans-unit>
        <trans-unit id="9e692da0d96c8c8a03ea6bc2d2377e97d825d01d" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;integration-with-existing-apps&quot;&gt;Integrating with Existing Apps guide&lt;/a&gt; and &lt;a href=&quot;native-components-ios&quot;&gt;Native UI Components guide&lt;/a&gt; we learn how to embed React Native in a native component and vice versa. When we mix native and React Native components, we'll eventually find a need to communicate between these two worlds. Some ways to achieve that have been already mentioned in other guides. This article summarizes available techniques.</source>
          <target state="translated">에서 &lt;a href=&quot;integration-with-existing-apps&quot;&gt;애플리케이션 가이드 기존과의 통합&lt;/a&gt; 및 &lt;a href=&quot;native-components-ios&quot;&gt;기본 UI 구성 요소 안내&lt;/a&gt; 우리는 삽입에 반대 기본 구성 요소 및 부사장에 기본 반응 방법에 대해 알아보십시오. 네이티브 컴포넌트와 리 액트 네이티브 컴포넌트를 혼합하면 결국이 두 세계 사이의 커뮤니케이션이 필요하다는 것을 알게 될 것입니다. 이를 달성하기위한 몇 가지 방법은 이미 다른 안내서에서 언급되었습니다. 이 기사는 사용 가능한 기술을 요약합니다.</target>
        </trans-unit>
        <trans-unit id="a152f4512b64864e90c837df9e4edd46575f17d9" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;AppDelegate.m&lt;/code&gt;, change the default &lt;code&gt;jsCodeLocation&lt;/code&gt; to point to the static bundle that is built in Release.</source>
          <target state="translated">에서 &lt;code&gt;AppDelegate.m&lt;/code&gt; , 기본 변경 &lt;code&gt;jsCodeLocation&lt;/code&gt; 을 릴리스에 내장 된 정적 번들 점.</target>
        </trans-unit>
        <trans-unit id="a6bc0e0d593d24e4d4f970077db7780e069d167a" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;android/app/build.gradle&lt;/code&gt;, add these lines in the &lt;code&gt;dependencies&lt;/code&gt; section:</source>
          <target state="translated">에서 &lt;code&gt;android/app/build.gradle&lt;/code&gt; 는 이러한 라인 추가 &lt;code&gt;dependencies&lt;/code&gt; 섹션 :</target>
        </trans-unit>
        <trans-unit id="7926c883a0293675e8f8be78d90e4ae883635eff" translate="yes" xml:space="preserve">
          <source>In Android, Returns a Promise which always be resolved with action being &lt;code&gt;Share.sharedAction&lt;/code&gt;.</source>
          <target state="translated">Android에서는 동작이 &lt;code&gt;Share.sharedAction&lt;/code&gt; 인 경우 항상 해결되는 약속을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="19a28a2a7148e6164e937f61d200eb6c120eb390" translate="yes" xml:space="preserve">
          <source>In CI/Xcode, YellowBoxes can also be disabled by setting the &lt;code&gt;IS_TESTING&lt;/code&gt; environment variable.</source>
          <target state="translated">CI / Xcode에서 &lt;code&gt;IS_TESTING&lt;/code&gt; 환경 변수를 설정하여 YellowBox를 비활성화 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2b5821fa6b351916edb7d5a84b625bd8542c8a45" translate="yes" xml:space="preserve">
          <source>In React Native &lt;code&gt;flex&lt;/code&gt; does not work the same way that it does in CSS. &lt;code&gt;flex&lt;/code&gt; is a number rather than a string, and it works according to the &lt;code&gt;Yoga&lt;/code&gt; library at &lt;a href=&quot;https://github.com/facebook/yoga&quot;&gt;https://github.com/facebook/yoga&lt;/a&gt;</source>
          <target state="translated">React Native &lt;code&gt;flex&lt;/code&gt; 는 CSS에서와 동일한 방식으로 작동하지 않습니다. &lt;code&gt;flex&lt;/code&gt; 는 문자열이 아닌 숫자이며 &lt;a href=&quot;https://github.com/facebook/yoga&quot;&gt;https://github.com/facebook/yoga&lt;/a&gt; 의 &lt;code&gt;Yoga&lt;/code&gt; 라이브러리에 따라 작동합니다.</target>
        </trans-unit>
        <trans-unit id="76fcbd0e97162a2bcc2013ddc0ae752eb32ffba3" translate="yes" xml:space="preserve">
          <source>In React Native, everything in JavaScript and within the layout engine works with arbitrary precision numbers. It's only when we set the position and dimensions of the native element on the main thread that we round. Also, rounding is done relative to the root rather than the parent, again to avoid accumulating rounding errors.</source>
          <target state="translated">React Native에서 JavaScript 및 레이아웃 엔진의 모든 것은 임의의 정밀도 숫자로 작동합니다. 우리가 반올림하는 기본 스레드에서 기본 요소의 위치와 크기를 설정할 때만 가능합니다. 또한 반올림 오류가 누적되는 것을 피하기 위해 상위가 아닌 루트에 대해 반올림이 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="c46917940fef2c57973d76799b9a5ffc011e03f0" translate="yes" xml:space="preserve">
          <source>In React Native, one interesting decision is that the &lt;code&gt;src&lt;/code&gt; attribute is named &lt;code&gt;source&lt;/code&gt; and doesn't take a string but an object with a &lt;code&gt;uri&lt;/code&gt; attribute.</source>
          <target state="translated">React Native에서 흥미로운 결정 중 하나는 &lt;code&gt;src&lt;/code&gt; 속성의 이름이 &lt;code&gt;source&lt;/code&gt; 이고 문자열이 아니라 &lt;code&gt;uri&lt;/code&gt; 속성을 가진 객체를 취하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="d1b382d1720a60707916dcf8c7aa99f2b1a670f2" translate="yes" xml:space="preserve">
          <source>In React Native, we are more strict about it: &lt;strong&gt;you must wrap all the text nodes inside of a &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; component&lt;/strong&gt;. You cannot have a text node directly under a &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">React Native에서는 더 엄격합니다. &lt;strong&gt; &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt; 컴포넌트 &lt;/strong&gt;&lt;strong&gt;안에 모든 텍스트 노드를 래핑해야합니다&lt;/strong&gt; . &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; 바로 아래에 텍스트 노드를 가질 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="ac5120423c0eb7b5f46770a32594f0c289b45389" translate="yes" xml:space="preserve">
          <source>In Xcode, in the build phase, include &lt;code&gt;export BUNDLE_CONFIG=&quot;packager/config.js&quot;&lt;/code&gt;.</source>
          <target state="translated">Xcode의 빌드 단계에서 &lt;code&gt;export BUNDLE_CONFIG=&quot;packager/config.js&quot;&lt;/code&gt; 를 포함하십시오 .</target>
        </trans-unit>
        <trans-unit id="6097be63bbb1a85b6d0d9aea1f36f05239be49e0" translate="yes" xml:space="preserve">
          <source>In a new Chrome tab, open: &lt;code&gt;chrome://inspect&lt;/code&gt;, then click on the 'Inspect device' item next to &quot;Powered by Stetho&quot;.</source>
          <target state="translated">새 Chrome 탭에서 &lt;code&gt;chrome://inspect&lt;/code&gt; 를 연 다음 'Powered by Stetho'옆의 '기기 검사'항목을 클릭하십시오.</target>
        </trans-unit>
        <trans-unit id="4ccec902d198f16a24d269c65ded72bd7a9f322d" translate="yes" xml:space="preserve">
          <source>In a real application, you probably won't be setting state with a timer. You might set state when you have new data arrived from the server, or from user input. You can also use a state container like &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt; or &lt;a href=&quot;https://mobx.js.org/&quot;&gt;Mobx&lt;/a&gt; to control your data flow. In that case you would use Redux or Mobx to modify your state rather than calling &lt;code&gt;setState&lt;/code&gt; directly.</source>
          <target state="translated">실제 응용 프로그램에서는 아마도 타이머로 상태를 설정하지 않을 것입니다. 서버 또는 사용자 입력에서 새 데이터가 도착했을 때 상태를 설정할 수 있습니다. &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt; 또는 &lt;a href=&quot;https://mobx.js.org/&quot;&gt;Mobx&lt;/a&gt; 와 같은 상태 컨테이너 를 사용하여 데이터 흐름을 제어 할 수도 있습니다 . 이 경우 &lt;code&gt;setState&lt;/code&gt; 를 직접 호출하지 않고 Redux 또는 Mobx를 사용하여 상태를 수정합니다 .</target>
        </trans-unit>
        <trans-unit id="a7726cc8a97d77a415671bda45b864972c986975" translate="yes" xml:space="preserve">
          <source>In accordance with the ancient traditions of our people, we must first build an app that does nothing except say &quot;Hello world&quot;. Here it is:</source>
          <target state="translated">사람들의 고대 전통에 따라, &quot;Hello world&quot;라는 말 외에는 아무것도하지 않는 앱을 ​​먼저 만들어야합니다. 여기있어:</target>
        </trans-unit>
        <trans-unit id="b22b1af7d49ce0f6829b1f9db5d87a8afc4e4f24" translate="yes" xml:space="preserve">
          <source>In addition to implementing the &lt;code&gt;RCTBridgeModule&lt;/code&gt; protocol, your class must also include the &lt;code&gt;RCT_EXPORT_MODULE()&lt;/code&gt; macro. This takes an optional argument that specifies the name that the module will be accessible as in your JavaScript code (more on this later). If you do not specify a name, the JavaScript module name will match the Objective-C class name. If the Objective-C class name begins with RCT, the JavaScript module name will exclude the RCT prefix.</source>
          <target state="translated">&lt;code&gt;RCTBridgeModule&lt;/code&gt; 프로토콜 을 구현하는 것 외에도 클래스에는 &lt;code&gt;RCT_EXPORT_MODULE()&lt;/code&gt; 매크로가 포함되어야합니다 . 여기에는 JavaScript 코드에서와 같이 모듈에 액세스 할 수있는 이름을 지정하는 선택적 인수가 필요합니다 (나중에 자세히 설명). 이름을 지정하지 않으면 JavaScript 모듈 이름이 Objective-C 클래스 이름과 일치합니다. Objective-C 클래스 이름이 RCT로 시작하면 JavaScript 모듈 이름은 RCT 접 두부를 제외합니다.</target>
        </trans-unit>
        <trans-unit id="5ea038fc3028ad2e0507ab2903e4073435e0b31d" translate="yes" xml:space="preserve">
          <source>In addition to this documentation, you might find &lt;a href=&quot;https://code.facebook.com/posts/435862739941212/making-react-native-apps-accessible/&quot;&gt;this blog post&lt;/a&gt; about React Native accessibility to be useful.</source>
          <target state="translated">이 문서 외에도 React Native 내게 필요한 옵션에 대한 &lt;a href=&quot;https://code.facebook.com/posts/435862739941212/making-react-native-apps-accessible/&quot;&gt;이 블로그 게시물이&lt;/a&gt; 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8cb6bbac86f5ee212c137b07d10c9209532e725a" translate="yes" xml:space="preserve">
          <source>In general, for events that have capture equivalents, we update the gestureState once in the capture phase and can use it in the bubble phase as well.</source>
          <target state="translated">일반적으로 캡처에 해당하는 이벤트의 경우 캡처 단계에서 gestureState를 한 번 업데이트하고 버블 단계에서도 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ddb759ac682956e12deab7f3c66a75baa8c370df" translate="yes" xml:space="preserve">
          <source>In general, you should initialize &lt;code&gt;state&lt;/code&gt; in the constructor, and then call &lt;code&gt;setState&lt;/code&gt; when you want to change it.</source>
          <target state="translated">일반적으로 생성자에서 &lt;code&gt;state&lt;/code&gt; 를 초기화 한 다음 변경할 때 &lt;code&gt;setState&lt;/code&gt; 를 호출 해야합니다.</target>
        </trans-unit>
        <trans-unit id="81e8a0bc340ac9147d65ffcf339a7be218a45c99" translate="yes" xml:space="preserve">
          <source>In iOS, Returns a Promise which will be invoked an object containing &lt;code&gt;action&lt;/code&gt;, &lt;code&gt;activityType&lt;/code&gt;. If the user dismissed the dialog, the Promise will still be resolved with action being &lt;code&gt;Share.dismissedAction&lt;/code&gt; and all the other keys being undefined.</source>
          <target state="translated">iOS에서 &lt;code&gt;action&lt;/code&gt; , &lt;code&gt;activityType&lt;/code&gt; 을 포함하는 객체를 호출 할 Promise를 반환합니다 . 사용자가 대화 상자를 &lt;code&gt;Share.dismissedAction&lt;/code&gt; 약속은 여전히 ​​동작이 Share.dismissedAction 이고 다른 모든 키는 정의되지 않은 상태로 해결됩니다 .</target>
        </trans-unit>
        <trans-unit id="04102f59a613de1f9c1de0ed54266fef55ec5694" translate="yes" xml:space="preserve">
          <source>In iOS, invoking &lt;code&gt;vibrate(duration)&lt;/code&gt; will just ignore the duration and vibrate for a fixed time. While the &lt;code&gt;pattern&lt;/code&gt; array is used to define the duration between each vibration. See below example for more.</source>
          <target state="translated">iOS에서 &lt;code&gt;vibrate(duration)&lt;/code&gt; 호출 하면 지속 시간을 무시하고 고정 된 시간 동안 진동합니다. 그동안 &lt;code&gt;pattern&lt;/code&gt; 어레이는 각각 진동의 지속 시간을 정의하는 데 사용된다. 자세한 내용은 아래 예를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f10484f84cb375899f3cc9b98a2a11d0878eac08" translate="yes" xml:space="preserve">
          <source>In iOS, you can specify positions and dimensions for elements with arbitrary precision, for example 29.674825. But, ultimately the physical display only have a fixed number of pixels, for example 640&amp;times;960 for iPhone 4 or 750&amp;times;1334 for iPhone 6. iOS tries to be as faithful as possible to the user value by spreading one original pixel into multiple ones to trick the eye. The downside of this technique is that it makes the resulting element look blurry.</source>
          <target state="translated">iOS에서는 임의의 정밀도로 요소의 위치와 치수를 지정할 수 있습니다 (예 : 29.674825). 그러나 실제 디스플레이에는 고정 된 수의 픽셀 만 있습니다 (예 : iPhone 4의 경우 640x960, iPhone 6의 경우 750x1334). iOS는 하나의 원본 픽셀을 여러 픽셀로 분산시켜 사용자 가치에 최대한 충실하려고합니다. 눈을 속입니다. 이 기술의 단점은 결과 요소를 흐리게 보이게한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="674575eeee2b7537d14ef2a7098fd5a50863e02e" translate="yes" xml:space="preserve">
          <source>In most cases, React Native will use &lt;a href=&quot;http://trac.webkit.org/wiki/JavaScriptCore&quot;&gt;JavaScriptCore&lt;/a&gt;, the JavaScript engine that powers Safari. Note that on iOS, JavaScriptCore does not use JIT due to the absence of writable executable memory in iOS apps.</source>
          <target state="translated">대부분의 경우 React Native는 Safari를 구동하는 JavaScript 엔진 인 &lt;a href=&quot;http://trac.webkit.org/wiki/JavaScriptCore&quot;&gt;JavaScriptCore&lt;/a&gt; 를 사용 합니다. iOS에서 JavaScriptCore는 iOS 앱에 쓰기 가능한 실행 가능 메모리가 없기 때문에 JIT를 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bcbf4897c8e38bed0ff74ff7fb8a56357f8a33f4" translate="yes" xml:space="preserve">
          <source>In most cases, React Native will use &lt;a href=&quot;https://trac.webkit.org/wiki/JavaScriptCore&quot;&gt;JavaScriptCore&lt;/a&gt;, the JavaScript engine that powers Safari. Note that on iOS, JavaScriptCore does not use JIT due to the absence of writable executable memory in iOS apps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910211ee00a0e6209d566d965e74d12ab68f5189" translate="yes" xml:space="preserve">
          <source>In most cases, you will be using &lt;code&gt;timing()&lt;/code&gt;. By default, it uses a symmetric easeInOut curve that conveys the gradual acceleration of an object to full speed and concludes by gradually decelerating to a stop.</source>
          <target state="translated">대부분의 경우 &lt;code&gt;timing()&lt;/code&gt; 합니다. 기본적으로, 객체의 점진적인 가속을 최고 속도로 전달하고 점차적으로 정지로 감속하여 끝나는 대칭 easeInOut 곡선을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="bf2086f1e259a4a392acebbc3a9d1e6d5a728fdb" translate="yes" xml:space="preserve">
          <source>In order for this to work, the image name in &lt;code&gt;require&lt;/code&gt; has to be known statically.</source>
          <target state="translated">이것이 작동 &lt;code&gt;require&lt;/code&gt; 의 이미지 이름을 정적으로 알고 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="ea7a8c93b489323fadfdc7447991977d0d42c66d" translate="yes" xml:space="preserve">
          <source>In order to accept your pull request, we need you to submit a CLA. You only need to do this once, so if you've done this for another Facebook open source project, you're good to go. If you are submitting a pull request for the first time, the Facebook GitHub Bot will reply with a link to the CLA form. You may also &lt;a href=&quot;https://code.facebook.com/cla&quot;&gt;complete your CLA here&lt;/a&gt;.</source>
          <target state="translated">풀 요청을 수락하려면 CLA를 제출해야합니다. 이 작업은 한 번만 수행하면되므로 다른 Facebook 오픈 소스 프로젝트에서이 작업을 수행 한 경우 계속 진행하면됩니다. 풀 요청을 처음 제출하는 경우 Facebook GitHub Bot이 CLA 양식에 대한 링크로 응답합니다. &lt;a href=&quot;https://code.facebook.com/cla&quot;&gt;여기에서 CLA를 작성할&lt;/a&gt; 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="24a808e816613f43ed3d16624d26b8d64abd010a" translate="yes" xml:space="preserve">
          <source>In order to constrain memory and enable smooth scrolling, content is rendered asynchronously offscreen. This means it's possible to scroll faster than the fill rate and momentarily see blank content. This is a tradeoff that can be adjusted to suit the needs of each application, and we are working on improving it behind the scenes.</source>
          <target state="translated">메모리를 제한하고 부드러운 스크롤을 가능하게하기 위해 컨텐츠는 비동기 적으로 화면 외부로 렌더링됩니다. 즉, 유효 노출 률보다 빠르게 스크롤 할 수 있으며 빈 콘텐츠가 순간적으로 표시됩니다. 이는 각 응용 프로그램의 요구에 맞게 조정할 수있는 트레이드 오프이며, 배후에서 개선하기 위해 노력하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="92578a2e92ca35dc0d49ef7eb95d93bc7dc6b726" translate="yes" xml:space="preserve">
          <source>In order to constrain memory and enable smooth scrolling, content is rendered asynchronously offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see blank content. This is a tradeoff that can be adjusted to suit the needs of each application, and we are working on improving it behind the scenes.</source>
          <target state="translated">메모리를 제한하고 부드러운 스크롤을 가능하게하기 위해 컨텐츠는 비동기 적으로 화면 외부로 렌더링됩니다. 즉, 유효 노출 률보다 빠르게 스크롤 할 수 있으며 빈 콘텐츠가 순간적으로 표시됩니다. 이는 각 애플리케이션의 요구에 맞게 조정할 수있는 트레이드 오프이며, 우리는 배후에서 개선하기 위해 노력하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae7d1d9e6c828749514126ca7611a55d1a87f448" translate="yes" xml:space="preserve">
          <source>In order to embed a React Native view in a native component, we use &lt;code&gt;RCTRootView&lt;/code&gt;. &lt;code&gt;RCTRootView&lt;/code&gt; is a &lt;code&gt;UIView&lt;/code&gt; that holds a React Native app. It also provides an interface between native side and the hosted app.</source>
          <target state="translated">네이티브 컴포넌트에 React Native 뷰를 내장하기 위해 &lt;code&gt;RCTRootView&lt;/code&gt; 를 사용 합니다 . &lt;code&gt;RCTRootView&lt;/code&gt; 는 React Native 앱을 보유한 &lt;code&gt;UIView&lt;/code&gt; 입니다. 또한 네이티브와 호스팅 된 앱 사이의 인터페이스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="68d0661942c1a001aa6186d2733a4c0ccbc7723b" translate="yes" xml:space="preserve">
          <source>In order to enable geolocation in the background, you need to include the 'NSLocationAlwaysUsageDescription' key in Info.plist and add location as a background mode in the 'Capabilities' tab in Xcode.</source>
          <target state="translated">백그라운드에서 위치 정보를 사용하려면 Info.plist에 'NSLocationAlwaysUsageDescription'키를 포함하고 Xcode의 'Capabilities'탭에서 위치를 배경 모드로 추가해야합니다.</target>
        </trans-unit>
        <trans-unit id="36fac543a4f3bcf76fefb50e3f690f45adaa6f2a" translate="yes" xml:space="preserve">
          <source>In order to export the following &lt;code&gt;NS_ENUM&lt;/code&gt; definition:</source>
          <target state="translated">다음 &lt;code&gt;NS_ENUM&lt;/code&gt; 정의 를 내보내려면 다음을 수행 하십시오 .</target>
        </trans-unit>
        <trans-unit id="b2472ce0f77aa0308bc1d7c47297c235b38a4620" translate="yes" xml:space="preserve">
          <source>In order to fetch content from an arbitrary URL, just pass the URL to fetch:</source>
          <target state="translated">임의의 URL에서 콘텐츠를 가져 오려면 가져올 URL을 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="be6c3954eeda6cdbb0df5c0386e492c69eeeb985" translate="yes" xml:space="preserve">
          <source>In order to retrieve the image dimensions, the image may first need to be loaded or downloaded, after which it will be cached. This means that in principle you could use this method to preload images, however it is not optimized for that purpose, and may in future be implemented in a way that does not fully load/download the image data. A proper, supported way to preload images will be provided as a separate API.</source>
          <target state="translated">이미지 크기를 검색하려면 먼저 이미지를로드하거나 다운로드 한 후 캐시해야합니다. 이는 원칙적으로이 방법을 사용하여 이미지를 사전로드 할 수 있지만 해당 목적에 맞게 최적화되지 않았으며 나중에 이미지 데이터를 완전히로드 / 다운로드하지 않는 방식으로 구현 될 수 있음을 의미합니다. 이미지를 미리로드하는 적절한 지원 방법은 별도의 API로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="29de373c280ba153dfe015062b1f799c1e3e91cc" translate="yes" xml:space="preserve">
          <source>In order to use this feature, you must give the view a &lt;code&gt;width&lt;/code&gt; and a &lt;code&gt;height&lt;/code&gt;.</source>
          <target state="translated">이 기능을 사용하려면보기에 &lt;code&gt;width&lt;/code&gt; 와 &lt;code&gt;height&lt;/code&gt; 를 지정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="74b0b6ffa8c93d3c1e0c32ec01f2c02e93239f58" translate="yes" xml:space="preserve">
          <source>In our &lt;code&gt;CalendarManager&lt;/code&gt; example, we need to pass the event date to the native method. We can't send JavaScript Date objects over the bridge, so we need to convert the date to a string or number. We could write our native function like this:</source>
          <target state="translated">우리에 &lt;code&gt;CalendarManager&lt;/code&gt; 의 예를 들어, 우리는 네이티브 메소드에 이벤트 날짜를 통과해야합니다. 브리지를 통해 JavaScript Date 객체를 보낼 수 없으므로 날짜를 문자열 또는 숫자로 변환해야합니다. 다음과 같이 기본 함수를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="022980e672ff7b84cb386ae6cb34258309a93ccb" translate="yes" xml:space="preserve">
          <source>In our sample application, you should see the link to the &quot;High Scores&quot; and then when you click on that you will see the rendering of your React Native component.</source>
          <target state="translated">샘플 애플리케이션에서 &quot;High Scores&quot;에 대한 링크가 표시되면이를 클릭하면 React Native 컴포넌트의 렌더링이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="3f03f8653a3635d5a271846463ac8553d8b4a256" translate="yes" xml:space="preserve">
          <source>In practice, we found out that developers do not want this feature and they have to work around it by doing manual rounding in order to avoid having blurry elements. In React Native, we are rounding all the pixels automatically.</source>
          <target state="translated">실제로 개발자는이 기능을 원하지 않으며 흐릿한 요소를 피하기 위해 수동 반올림을 수행하여 해결해야합니다. React Native에서는 모든 픽셀을 자동으로 반올림합니다.</target>
        </trans-unit>
        <trans-unit id="91245c415738f88190d194b089e8353e6c47e94e" translate="yes" xml:space="preserve">
          <source>In some cases we'd like to render content of initially unknown size. Let's say the size will be defined dynamically in JS. We have two solutions to this problem.</source>
          <target state="translated">경우에 따라 처음에 알 수없는 크기의 콘텐츠를 렌더링하려고합니다. JS에서 크기가 동적으로 정의된다고 가정 해 봅시다. 이 문제에 대한 두 가지 해결책이 있습니다.</target>
        </trans-unit>
        <trans-unit id="812c3f8420156c0cc75addd461d5feb1fd470a4f" translate="yes" xml:space="preserve">
          <source>In some cases you might only want to display an image if it is already in the local cache, i.e. a low resolution placeholder until a higher resolution is available. In other cases you do not care if the image is outdated and are willing to display an outdated image to save bandwidth. The &lt;code&gt;cache&lt;/code&gt; source property gives you control over how the network layer interacts with the cache.</source>
          <target state="translated">경우에 따라 이미지가 이미 로컬 캐시에있는 경우에만 이미지를 표시 할 수 있습니다 (예 : 더 높은 해상도를 사용할 수있을 때까지 저해상도 자리 표시 자). 다른 경우에는 이미지가 오래된 지 걱정하지 않고 대역폭을 절약하기 위해 오래된 이미지를 표시하려고합니다. &lt;code&gt;cache&lt;/code&gt; 소스 속성은 캐시 방법 네트워크 계층의 상호 작용을 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="20f41cbb42d5b469c12597899795121442a53dbe" translate="yes" xml:space="preserve">
          <source>In some cases, we also want to alert the end user of the type of selected component (i.e., that it is a &amp;ldquo;button&amp;rdquo;). If we were using native buttons, this would work automatically. Since we are using javascript, we need to provide a bit more context for TalkBack. To do so, you must specify the &amp;lsquo;accessibilityComponentType&amp;rsquo; property for any UI component. We support 'none', &amp;lsquo;button&amp;rsquo;, &amp;lsquo;radiobutton_checked&amp;rsquo; and &amp;lsquo;radiobutton_unchecked&amp;rsquo;.</source>
          <target state="translated">경우에 따라 최종 사용자에게 선택한 구성 요소 유형 (예 : &quot;버튼&quot;)을 알려줄 수도 있습니다. 기본 버튼을 사용하는 경우 자동으로 작동합니다. 우리는 자바 스크립트를 사용하고 있기 때문에 TalkBack에 좀 더 많은 컨텍스트를 제공해야합니다. 그렇게하려면 UI 구성 요소에 대해 'accessibilityComponentType'특성을 지정해야합니다. '없음', '버튼', 'radiobutton_checked'및 'radiobutton_unchecked'를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="9abbf9f283b3679712e94067fa05f18e3f6b576a" translate="yes" xml:space="preserve">
          <source>In some cases, you may want to detect when a user presses and holds a view for a set amount of time. These long presses can be handled by passing a function to the &lt;code&gt;onLongPress&lt;/code&gt; props of any of the &quot;Touchable&quot; components.</source>
          <target state="translated">경우에 따라 사용자가 설정된 시간 동안보기를 누르고 유지하는 시점을 감지 할 수 있습니다. 이러한 긴 프레스는 &quot;터치 가능&quot;구성 요소 의 &lt;code&gt;onLongPress&lt;/code&gt; 소품에 기능을 전달하여 처리 할 수 ​​있습니다 .</target>
        </trans-unit>
        <trans-unit id="71f2337faa495ca5ef3e6ef54c6c71bf35b76e58" translate="yes" xml:space="preserve">
          <source>In the above example method _addOne changes the state.count variable. As soon as an end user clicks the TouchableWithoutFeedback, TalkBack reads text in the Text view because of its 'accessibilityLiveRegion=&amp;rdquo;polite&amp;rdquo;' property.</source>
          <target state="translated">위 예제에서 _addOne은 state.count 변수를 변경합니다. 최종 사용자가 TouchableWithoutFeedback을 클릭하면 TalkBack은 'accessibilityLiveRegion =&amp;rdquo;polite&amp;rdquo;속성으로 인해 텍스트보기에서 텍스트를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="92e9fe0f0d5385aa01b72b3513d93f471802231f" translate="yes" xml:space="preserve">
          <source>In the above example we've created a custom radio button that now behaves like a native one. More specifically, TalkBack now correctly announces changes to the radio button selection.</source>
          <target state="translated">위의 예에서 우리는 이제 기본 버튼처럼 동작하는 사용자 정의 라디오 버튼을 만들었습니다. 보다 구체적으로 말하면, TalkBack은 이제 라디오 버튼 선택에 대한 변경 사항을 올바르게 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="fbde756b5a311a1ef0ed5da7348f4d2a97e10530" translate="yes" xml:space="preserve">
          <source>In the above example, the &lt;code&gt;accessibilityLabel&lt;/code&gt; on the TouchableOpacity element would default to &quot;Press me!&quot;. The label is constructed by concatenating all Text node children separated by spaces.</source>
          <target state="translated">위의 예 에서 TouchableOpacity 요소 의 &lt;code&gt;accessibilityLabel&lt;/code&gt; 은 기본적으로 &quot;Press me!&quot;입니다. 레이블은 공백으로 구분 된 모든 텍스트 노드 자식을 연결하여 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="a5f596b1a0316184b41548a0fa2ecc0f8e471e41" translate="yes" xml:space="preserve">
          <source>In the above example, the TouchableWithoutFeedback is being announced by TalkBack as a native Button.</source>
          <target state="translated">위의 예에서 TouchableWithoutFeedback은 TalkBack에서 기본 버튼으로 발표됩니다.</target>
        </trans-unit>
        <trans-unit id="718e0bfdd3fbbc40f568bbe3e4517aaa53cdcf72" translate="yes" xml:space="preserve">
          <source>In the above example, the yellow layout and its descendants are completely invisible to TalkBack and all other accessibility services. So we can easily use overlapping views with the same parent without confusing TalkBack.</source>
          <target state="translated">위의 예에서 노란색 레이아웃과 해당 하위 항목은 TalkBack 및 기타 모든 접근성 서비스에 완전히 표시되지 않습니다. 따라서 음성 안내 지원을 혼동하지 않고 동일한 부모와 겹치는보기를 쉽게 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="01feb0a2e522d636fe742d956c44104228e0c524" translate="yes" xml:space="preserve">
          <source>In the above example, we can't get accessibility focus separately on 'text one' and 'text two'. Instead we get focus on a parent view with 'accessible' property.</source>
          <target state="translated">위의 예에서는 '텍스트 1'과 '텍스트 2'에 개별적으로 접근성에 초점을 맞출 수 없습니다. 대신 'accessible'속성을 사용하여 상위 뷰에 중점을 둡니다.</target>
        </trans-unit>
        <trans-unit id="8ec2d0e55cbf9bd6cfc55db5900a37f6ad0b5e24" translate="yes" xml:space="preserve">
          <source>In the case of two overlapping UI components with the same parent, default accessibility focus can have unpredictable behavior. The &amp;lsquo;importantForAccessibility&amp;rsquo; property will resolve this by controlling if a view fires accessibility events and if it is reported to accessibility services. It can be set to &amp;lsquo;auto&amp;rsquo;, &amp;lsquo;yes&amp;rsquo;, &amp;lsquo;no&amp;rsquo; and &amp;lsquo;no-hide-descendants&amp;rsquo; (the last value will force accessibility services to ignore the component and all of its children).</source>
          <target state="translated">부모가 동일한 두 개의 겹치는 UI 구성 요소의 경우 기본 접근성 포커스는 예측할 수없는 동작을 가질 수 있습니다. 'importantForAccessibility'속성은 뷰가 접근성 이벤트를 발생시키는 지 여부와 접근성 서비스에보고되는지 여부를 제어하여이를 해결합니다. 'auto', 'yes', 'no'및 'hide-descendants'로 설정할 수 있습니다 (마지막 값은 접근성 서비스가 구성 요소 및 모든 하위 항목을 무시하도록 강제 함).</target>
        </trans-unit>
        <trans-unit id="6b371653d647eec3c5f942f983f9a2a6b4018718" translate="yes" xml:space="preserve">
          <source>In the delegate method &lt;code&gt;-mapView:regionDidChangeAnimated:&lt;/code&gt; the event handler block is called on the corresponding view with the region data. Calling the &lt;code&gt;onRegionChange&lt;/code&gt; event handler block results in calling the same callback prop in JavaScript. This callback is invoked with the raw event, which we typically process in the wrapper component to make a simpler API:</source>
          <target state="translated">델리게이트 메소드 &lt;code&gt;-mapView:regionDidChangeAnimated:&lt;/code&gt; 이벤트 핸들러 블록은 리젼 데이터가있는 해당보기에서 호출됩니다. 호출 &lt;code&gt;onRegionChange&lt;/code&gt; 의 자바 스크립트에서 같은 콜백 소품을 호출에 이벤트 핸들러 블록 결과를. 이 콜백은 raw 이벤트와 함께 호출되며 일반적으로 더 간단한 API를 만들기 위해 래퍼 구성 요소에서 처리합니다.</target>
        </trans-unit>
        <trans-unit id="5ba2375a610362007ba5636123d0b7bfb9c912e5" translate="yes" xml:space="preserve">
          <source>In the example above the navigation bar color is changed when the new route is pushed.</source>
          <target state="translated">위의 예에서 새 경로를 누르면 탐색 모음 색상이 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="5520e97faf0abfd148a4360556289147cbf5e73e" translate="yes" xml:space="preserve">
          <source>In the example above, we prefixed our class name with &lt;code&gt;RNT&lt;/code&gt;. Prefixes are used to avoid name collisions with other frameworks. Apple frameworks use two-letter prefixes, and React Native uses &lt;code&gt;RCT&lt;/code&gt; as a prefix. In order to avoid name collisions, we recommend using a three-letter prefix other than &lt;code&gt;RCT&lt;/code&gt; in your own classes.</source>
          <target state="translated">위의 예에서 클래스 이름 앞에 &lt;code&gt;RNT&lt;/code&gt; 를 붙 였습니다. 접두사는 다른 프레임 워크와 이름 충돌을 피하기 위해 사용됩니다. Apple 프레임 워크는 두 문자 접두사를 사용하고 React Native는 &lt;code&gt;RCT&lt;/code&gt; 를 접두사로 사용 합니다. 이름 충돌을 피하려면 자신의 클래스에서 &lt;code&gt;RCT&lt;/code&gt; 이외의 3 글자 접두어를 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="8dc83eea3e42fcade3eb031c0e485bc1c530dfef" translate="yes" xml:space="preserve">
          <source>In the example we have a &lt;code&gt;FlexibleSizeExampleView&lt;/code&gt; view that holds a root view. We create the root view, initialize it and set the delegate. The delegate will handle size updates. Then, we set the root view's size flexibility to &lt;code&gt;RCTRootViewSizeFlexibilityHeight&lt;/code&gt;, which means that &lt;code&gt;rootViewDidChangeIntrinsicSize:&lt;/code&gt; method will be called every time the React Native content changes its height. Finally, we set the root view's width and position. Note that we set there height as well, but it has no effect as we made the height RN-dependent.</source>
          <target state="translated">이 예 에는 루트 뷰를 보유한 &lt;code&gt;FlexibleSizeExampleView&lt;/code&gt; 뷰가 있습니다. 우리는 루트 뷰를 생성하고 초기화하고 델리게이트를 설정합니다. 대리인이 크기 업데이트를 처리합니다. 그런 다음 루트 뷰의 크기 유연성을 &lt;code&gt;RCTRootViewSizeFlexibilityHeight&lt;/code&gt; 로 설정합니다 . 이는 React Native 컨텐츠의 높이가 변경 될 때마다 &lt;code&gt;rootViewDidChangeIntrinsicSize:&lt;/code&gt; 메소드가 호출 됨을 의미합니다 . 마지막으로 루트 뷰의 너비와 위치를 설정합니다. 높이를 설정했지만 높이 RN에 종속적으로 적용해도 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="ef14f61efa27c97c128e28fbf6e3b4bc16b8ae21" translate="yes" xml:space="preserve">
          <source>In the first scenario, you'll see a trace that has the UI thread and/or Render Thread looking like this:</source>
          <target state="translated">첫 번째 시나리오에서는 UI 스레드 및 / 또는 렌더 스레드가 다음과 같은 트레이스를 보게됩니다.</target>
        </trans-unit>
        <trans-unit id="2fb24c648b014c3c6f55bc2f8accb0f937d00e32" translate="yes" xml:space="preserve">
          <source>In the following example, the nested title and body text will inherit the &lt;code&gt;fontFamily&lt;/code&gt; from &lt;code&gt;styles.baseText&lt;/code&gt;, but the title provides its own additional styles. The title and body will stack on top of each other on account of the literal newlines:</source>
          <target state="translated">다음 예제에서 중첩 된 제목 및 본문 텍스트는 &lt;code&gt;styles.baseText&lt;/code&gt; 에서 &lt;code&gt;fontFamily&lt;/code&gt; 를 상속 하지만 제목은 고유 한 추가 스타일을 제공합니다. 리터럴 개행으로 인해 제목과 본문이 서로 겹쳐집니다.</target>
        </trans-unit>
        <trans-unit id="1db29320ad2a644811664259565ac031b500f30d" translate="yes" xml:space="preserve">
          <source>In the project's build settings, &lt;code&gt;User Search Header Paths&lt;/code&gt; and &lt;code&gt;Header Search Paths&lt;/code&gt; are two configs that specify where Xcode should look for &lt;code&gt;#import&lt;/code&gt; header files specified in the code. For Pods, CocoaPods uses a default array of specific folders to look in. Verify that this particular config is not overwritten, and that none of the folders configured are too large. If one of the folders is a large folder, Xcode will attempt to recursively search the entire directory and throw above error at some point.</source>
          <target state="translated">프로젝트 빌드 설정에서 &lt;code&gt;User Search Header Paths&lt;/code&gt; 및 &lt;code&gt;Header Search Paths&lt;/code&gt; 는 Xcode가 코드에 지정된 &lt;code&gt;#import&lt;/code&gt; 헤더 파일을 찾을 위치를 지정하는 두 가지 구성입니다 . 포드의 경우 CocoaPods는 특정 폴더의 기본 배열을 사용하여 찾습니다.이 특정 구성을 덮어 쓰지 않았으며 구성된 폴더가 너무 크지 않은지 확인하십시오. 폴더 중 하나가 큰 폴더 인 경우 Xcode는 전체 디렉토리를 재귀 적으로 검색하여 어느 시점에서 오류를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="d4e0f5941f1af14ba64867db13d3c6f8c78fb9cc" translate="yes" xml:space="preserve">
          <source>In the second scenario, you'll see something more like this:</source>
          <target state="translated">두 번째 시나리오에서는 다음과 같은 내용이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="4bce6a654261b36f6f04c718bd23ee5dcbd2f42c" translate="yes" xml:space="preserve">
          <source>In this case, it's &lt;code&gt;22b8&lt;/code&gt;. That's the identifier for Motorola.</source>
          <target state="translated">이 경우 &lt;code&gt;22b8&lt;/code&gt; 입니다. 이것이 Motorola의 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="0978da6376a20a6f4a3ed93f96c425e4fadd41fc" translate="yes" xml:space="preserve">
          <source>In this case, the UI and render threads are the ones that have work crossing frame boundaries. The UI that we're trying to render on each frame is requiring too much work to be done. In this case, &lt;strong&gt;the problem lies in the native views being rendered&lt;/strong&gt;.</source>
          <target state="translated">이 경우 UI 및 렌더 스레드는 프레임 경계를 넘어서 작동하는 스레드입니다. 각 프레임에서 렌더링하려는 UI에 너무 많은 작업이 필요합니다. 이 경우 &lt;strong&gt;문제는 렌더링되는 기본 뷰에&lt;/strong&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="d49228cb69cbf3ca0b41cd53e39476f8fa8f38a0" translate="yes" xml:space="preserve">
          <source>In this code, the navigator renders the component specified in initialRoute, which in this case is &lt;code&gt;MyScene&lt;/code&gt;. This component will receive a &lt;code&gt;route&lt;/code&gt; prop and a &lt;code&gt;navigator&lt;/code&gt; prop representing the navigator. The navigator's navigation bar will render the title for the current scene, &quot;My Initial Scene&quot;.</source>
          <target state="translated">이 코드는, 상기 네비게이터는,이 경우에 지정된 initialRoute 성분 렌더링 &lt;code&gt;MyScene&lt;/code&gt; 를 . 이 컴포넌트는 &lt;code&gt;navigator&lt;/code&gt; 나타내는 &lt;code&gt;route&lt;/code&gt; 소품과 네비게이터 소품 을받습니다 . 네비게이터의 탐색 모음은 현재 장면 &quot;My Initial Scene&quot;의 제목을 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="fcffc074574700c4b5752ca1d731ae11ed6616e7" translate="yes" xml:space="preserve">
          <source>In this example we create view manager class &lt;code&gt;ReactImageManager&lt;/code&gt; that extends &lt;code&gt;SimpleViewManager&lt;/code&gt; of type &lt;code&gt;ReactImageView&lt;/code&gt;. &lt;code&gt;ReactImageView&lt;/code&gt; is the type of object managed by the manager, this will be the custom native view. Name returned by &lt;code&gt;getName&lt;/code&gt; is used to reference the native view type from JavaScript.</source>
          <target state="translated">이 예에서 우리는보기 관리자 클래스를 만들 &lt;code&gt;ReactImageManager&lt;/code&gt; 확장 &lt;code&gt;SimpleViewManager&lt;/code&gt; 을 형의 &lt;code&gt;ReactImageView&lt;/code&gt; 를 . &lt;code&gt;ReactImageView&lt;/code&gt; 는 관리자가 관리하는 객체 유형이며, 이는 사용자 지정 기본 뷰입니다. &lt;code&gt;getName&lt;/code&gt; 에 의해 리턴 된 이름 은 JavaScript에서 기본보기 유형을 참조하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6f276780c1d539b20a76dfeb1db3389963a663c3" translate="yes" xml:space="preserve">
          <source>In this example, a component receives data in chunks, handled by &lt;code&gt;_onDataArrived&lt;/code&gt;, which concats the new data onto the old data and updates the data source. We use &lt;code&gt;concat&lt;/code&gt; to create a new array - mutating &lt;code&gt;this._data&lt;/code&gt;, e.g. with &lt;code&gt;this._data.push(newRowData)&lt;/code&gt;, would be an error. &lt;code&gt;_rowHasChanged&lt;/code&gt; understands the shape of the row data and knows how to efficiently compare it.</source>
          <target state="translated">이 예에서 구성 요소는 &lt;code&gt;_onDataArrived&lt;/code&gt; 가 처리하는 청크로 데이터를 수신합니다.이 데이터 는 새 데이터를 이전 데이터에 연결하고 데이터 소스를 업데이트합니다. 우리는 사용 &lt;code&gt;concat&lt;/code&gt; 돌연변이 - 새로운 배열을 만들 &lt;code&gt;this._data&lt;/code&gt; 으로 예를 들면, &lt;code&gt;this._data.push(newRowData)&lt;/code&gt; 오류가 될 것이다. &lt;code&gt;_rowHasChanged&lt;/code&gt; 는 행 데이터의 형태를 이해하고 효율적으로 비교하는 방법을 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="5598a1db2dccf9dfb75f90984f0d53c37c4127cf" translate="yes" xml:space="preserve">
          <source>In this example, we store &lt;code&gt;text&lt;/code&gt; in the state, because it changes over time.</source>
          <target state="translated">이 예에서는 시간이지나면서 &lt;code&gt;text&lt;/code&gt; 가 변경되므로 상태에 텍스트 를 저장 합니다 .</target>
        </trans-unit>
        <trans-unit id="18d3bcbbfca1f477203f8b4cbd8f39690863e6f3" translate="yes" xml:space="preserve">
          <source>In your &lt;code&gt;index.js&lt;/code&gt;, create your component. In our sample here, we will add simple &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; component within a styled &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt;</source>
          <target state="translated">당신에 &lt;code&gt;index.js&lt;/code&gt; , 구성 요소를 만들 수 있습니다. 여기 샘플에서는 스타일이 지정된 &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; 내에 간단한 &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; 구성 요소를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="5463a04a4410b5430481eceee902cd0dbb502bbe" translate="yes" xml:space="preserve">
          <source>In your &lt;code&gt;index.js&lt;/code&gt;, create your component. In our sample here, we will add simple &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; component within a styled &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">당신에 &lt;code&gt;index.js&lt;/code&gt; , 구성 요소를 만들 수 있습니다. 여기 샘플에서는 스타일이 지정된 &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; 내에 간단한 &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; 구성 요소를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="53b9b6e0de8eebc58f3778d0a5f6625210c9dc31" translate="yes" xml:space="preserve">
          <source>In your root file (index.(ios|android).js) you can add the following after the initial imports:</source>
          <target state="translated">루트 파일 (index. (ios | android) .js)에서 초기 가져 오기 후에 다음을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad137784b365a91e1b6b2bdda2171739bbc904e6" translate="yes" xml:space="preserve">
          <source>In-app Errors and Warnings</source>
          <target state="translated">인앱 오류 및 경고</target>
        </trans-unit>
        <trans-unit id="73e7397b069e3ef9c119eb4ab30aaac0ecaed554" translate="yes" xml:space="preserve">
          <source>In-app errors are displayed in a full screen alert with a red background inside your app. This screen is known as a RedBox. You can use &lt;code&gt;console.error()&lt;/code&gt; to manually trigger one.</source>
          <target state="translated">인앱 오류는 앱 내부에 빨간색 배경으로 전체 화면 알림으로 표시됩니다. 이 화면을 RedBox라고합니다. &lt;code&gt;console.error()&lt;/code&gt; 를 사용 하여 수동으로 트리거 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1b492a2fdae03e6c34538ee6af67d9a7abd129dc" translate="yes" xml:space="preserve">
          <source>Increase or decrease the spacing between characters. The default is 0, for no extra letter spacing.</source>
          <target state="translated">문자 간격을 늘리거나 줄입니다. 추가 문자 간격이없는 경우 기본값은 0입니다.</target>
        </trans-unit>
        <trans-unit id="7ba5c71c1f9b508f66fb544731c9860ac12f7368" translate="yes" xml:space="preserve">
          <source>Index of initial page that should be selected. Use &lt;code&gt;setPage&lt;/code&gt; method to update the page, and &lt;code&gt;onPageSelected&lt;/code&gt; to monitor page changes</source>
          <target state="translated">선택해야하는 초기 페이지의 색인입니다. 사용 &lt;code&gt;setPage&lt;/code&gt; 의 방법은 페이지를 업데이트하는 &lt;code&gt;onPageSelected&lt;/code&gt; 페이지 변경을 감시하기 위해서</target>
        </trans-unit>
        <trans-unit id="d3d5dcec1f69cbeabac88fcc4db11dd9f7a83083" translate="yes" xml:space="preserve">
          <source>Indicates to accessibility services to treat UI component like a native one. Works for Android only.</source>
          <target state="translated">UI 구성 요소를 기본 구성 요소처럼 취급하기 위해 접근성 서비스를 나타냅니다. Android에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="59f0ea358d82246ff3fb28ac0c0f2ff0b398178c" translate="yes" xml:space="preserve">
          <source>Indicates to accessibility services whether the user should be notified when this view changes. Works for Android API &amp;gt;= 19 only. Possible values:</source>
          <target state="translated">이보기가 변경 될 때 사용자에게 알려야하는지 여부를 내게 필요한 옵션 서비스에 나타냅니다. Android API&amp;gt; = 19에서만 작동합니다. 가능한 값 :</target>
        </trans-unit>
        <trans-unit id="328d06e18b9b31776e43800029c0715779c35348" translate="yes" xml:space="preserve">
          <source>Initial dimensions are set before &lt;code&gt;runApplication&lt;/code&gt; is called so they should be available before any other require's are run, but may be updated later.</source>
          <target state="translated">초기 크기는 &lt;code&gt;runApplication&lt;/code&gt; 이 호출 되기 전에 설정 되므로 다른 요구 사항을 실행하기 전에 사용 가능해야하지만 나중에 업데이트 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d3b164e592e0dc1bf85ae26e0a1200a10c16ee65" translate="yes" xml:space="preserve">
          <source>Initial maximum value of the slider. Default value is 1.</source>
          <target state="translated">슬라이더의 초기 최대 값. 기본값은 1입니다.</target>
        </trans-unit>
        <trans-unit id="b26e381da251427aa6dcdbbce9a51709f31e72d9" translate="yes" xml:space="preserve">
          <source>Initial minimum value of the slider. Default value is 0.</source>
          <target state="translated">슬라이더의 초기 최소값입니다. 기본값은 0입니다.</target>
        </trans-unit>
        <trans-unit id="3647c63fbc23a86ccc6b50061035554846092a0b" translate="yes" xml:space="preserve">
          <source>Initial value of the slider. The value should be between minimumValue and maximumValue, which default to 0 and 1 respectively. Default value is 0.</source>
          <target state="translated">슬라이더의 초기 값 값은 minimumValue와 maximumValue 사이 여야하며 기본값은 각각 0과 1입니다. 기본값은 0입니다.</target>
        </trans-unit>
        <trans-unit id="f8088d0ca41ea8969fb31eb88e4277a9ec48b89d" translate="yes" xml:space="preserve">
          <source>Inline Requires</source>
          <target state="translated">인라인 필요</target>
        </trans-unit>
        <trans-unit id="e3eab03ba6ed3dd28fceb2066a946849c7f3a550" translate="yes" xml:space="preserve">
          <source>Inline requires delay the requiring of a module or file until that file is actually needed. A basic example would look like this:</source>
          <target state="translated">인라인은 해당 파일이 실제로 필요할 때까지 모듈 또는 파일 요구를 지연시킵니다. 기본 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fb842b6ab3f9082a65e24efee79ee43aceeba93f" translate="yes" xml:space="preserve">
          <source>InputAccessoryView</source>
          <target state="translated">InputAccessoryView</target>
        </trans-unit>
        <trans-unit id="f48a138c853c8475bc5a11386471a7cd4b1c17d6" translate="yes" xml:space="preserve">
          <source>InputAccessoryView#backgroundColor</source>
          <target state="translated">InputAccessoryView#backgroundColor</target>
        </trans-unit>
        <trans-unit id="d4e21f28a56b3fcf39f2a07b88dfce4995e20122" translate="yes" xml:space="preserve">
          <source>InputAccessoryView#nativeID</source>
          <target state="translated">InputAccessoryView#nativeID</target>
        </trans-unit>
        <trans-unit id="c71910c3fe67ba735b4e5d923a31cdd7e3183097" translate="yes" xml:space="preserve">
          <source>InputAccessoryView#style</source>
          <target state="translated">InputAccessoryView#style</target>
        </trans-unit>
        <trans-unit id="e329674aca1b6a3ebade51157bf32886a2dc2a1f" translate="yes" xml:space="preserve">
          <source>Inside this &lt;code&gt;android/app/src/release/&lt;/code&gt; directory create a &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file. (path: &lt;code&gt;android/app/src/release/AndroidManifest.xml&lt;/code&gt;)</source>
          <target state="translated">이 &lt;code&gt;android/app/src/release/&lt;/code&gt; 디렉토리 안에 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 파일을 작성 하십시오. (경로 : &lt;code&gt;android/app/src/release/AndroidManifest.xml&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="41c83fe6591c7b8afc3658128e83971c628d138d" translate="yes" xml:space="preserve">
          <source>Inside this file paste the following conents. Note, make sure to update your package identifier from &quot;com.myapp&quot; to what yours is.</source>
          <target state="translated">이 파일 안에 다음 내용을 붙여 넣습니다. 패키지 식별자를 &quot;com.myapp&quot;에서 현재 상태로 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="21f8961f78a98a03e4279ee4179b07db15507b13" translate="yes" xml:space="preserve">
          <source>Inspecting Component Instances</source>
          <target state="translated">구성 요소 인스턴스 검사</target>
        </trans-unit>
        <trans-unit id="527cb51da5f8e949b63778dbece6dd45647a338c" translate="yes" xml:space="preserve">
          <source>Install a library with native dependencies:</source>
          <target state="translated">기본 종속성이있는 라이브러리를 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="bf23dd93277961f4300e9d99dca5959dd36b1ad6" translate="yes" xml:space="preserve">
          <source>Install the &lt;a href=&quot;https://expo.io&quot;&gt;Expo&lt;/a&gt; client app on your iOS or Android phone and connect to the same wireless network as your computer. On Android, use the Expo app to scan the QR code from your terminal to open your project. On iOS, follow on-screen instructions to get a link.</source>
          <target state="translated">iOS 또는 Android 전화에 &lt;a href=&quot;https://expo.io&quot;&gt;Expo&lt;/a&gt; 클라이언트 앱을 설치하고 컴퓨터와 동일한 무선 네트워크에 연결하십시오. Android에서는 Expo 앱을 사용하여 터미널에서 QR 코드를 스캔하여 프로젝트를 엽니 다. iOS에서는 화면의 지시에 따라 링크를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="2f0c02f41072e3442c7053758e6c7d88cbbcf430" translate="yes" xml:space="preserve">
          <source>Install the &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-native&lt;/code&gt; packages. Open a terminal or command prompt, then navigate to the directory with your &lt;code&gt;package.json&lt;/code&gt; file and run:</source>
          <target state="translated">&lt;code&gt;react&lt;/code&gt; 및 &lt;code&gt;react-native&lt;/code&gt; 패키지를 설치하십시오 . 터미널 또는 명령 프롬프트를 열고 &lt;code&gt;package.json&lt;/code&gt; 파일이 있는 디렉토리로 이동 한 후 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="f00685bfd3e0de33ba5f06b701de4f6dfc487ec0" translate="yes" xml:space="preserve">
          <source>Install the Command Line Tools. Choose &quot;Preferences...&quot; in the Xcode menu. Go to the Locations panel and install the tools by selecting the most recent version in the Command Line Tools dropdown.</source>
          <target state="translated">명령 행 도구를 설치하십시오. Xcode 메뉴에서 &quot;Preferences ...&quot;를 선택하십시오. 위치 패널로 이동하여 명령 행 도구 드롭 다운에서 최신 버전을 선택하여 도구를 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="2185bce3af0f7dfafcbb1cdcdd31a0ce17c7d717" translate="yes" xml:space="preserve">
          <source>Installing dependencies</source>
          <target state="translated">종속성 설치</target>
        </trans-unit>
        <trans-unit id="4e1c7535ccc4dc5054603097c0e79f8ebfe1fae9" translate="yes" xml:space="preserve">
          <source>Instead of recompiling your app every time you make a change, you can reload your app's JavaScript code instantly. To do so, select &quot;Reload&quot; from the Developer Menu. You can also press &lt;code&gt;⌘R&lt;/code&gt; in the iOS Simulator, or tap &lt;code&gt;R&lt;/code&gt; twice on Android emulators.</source>
          <target state="translated">변경할 때마다 앱을 다시 컴파일하는 대신 앱의 JavaScript 코드를 즉시 다시로드 할 수 있습니다. 그렇게하려면 개발자 메뉴에서 &quot;다시로드&quot;를 선택하십시오. iOS 시뮬레이터에서 &lt;code&gt;⌘R&lt;/code&gt; 을 누르 거나 Android 에뮬레이터에서 &lt;code&gt;R&lt;/code&gt; 을 두 번 탭할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="a212aaa86cc11e6e06b5ecc40e416e4a8ec24e4a" translate="yes" xml:space="preserve">
          <source>Instead of starting at the top with the first item, start at &lt;code&gt;initialScrollIndex&lt;/code&gt;. This disables the &quot;scroll to top&quot; optimization that keeps the first &lt;code&gt;initialNumToRender&lt;/code&gt; items always rendered and immediately renders the items starting at this initial index. Requires &lt;code&gt;getItemLayout&lt;/code&gt; to be implemented.</source>
          <target state="translated">첫 번째 항목부터 시작하는 대신 &lt;code&gt;initialScrollIndex&lt;/code&gt; 에서 시작하십시오 . 이렇게하면 첫 번째 &lt;code&gt;initialNumToRender&lt;/code&gt; 항목을 항상 렌더링하고이 초기 색인에서 시작하는 항목을 즉시 렌더링하는 &quot;위로 스크롤&quot;최적화가 비활성화 됩니다. 필요 &lt;code&gt;getItemLayout&lt;/code&gt; 구현되는가.</target>
        </trans-unit>
        <trans-unit id="036a5d47efaf84af91b96bca27d0e3394108b032" translate="yes" xml:space="preserve">
          <source>Integration Tests</source>
          <target state="translated">통합 테스트</target>
        </trans-unit>
        <trans-unit id="6a3a2d84703d50bdc047e78bfbddaabcd0492220" translate="yes" xml:space="preserve">
          <source>Integration with Existing Apps</source>
          <target state="translated">기존 앱과 통합</target>
        </trans-unit>
        <trans-unit id="500875684c0a02ca150a75642f8d83b3b104812d" translate="yes" xml:space="preserve">
          <source>Integration with React Native Inspector</source>
          <target state="translated">React Native Inspector와 통합</target>
        </trans-unit>
        <trans-unit id="733e2f15ad56d3b5b0e7d319eab9a176e5044bcc" translate="yes" xml:space="preserve">
          <source>InteractionManager</source>
          <target state="translated">InteractionManager</target>
        </trans-unit>
        <trans-unit id="4d36ebc18e85b7ac2d049fa7f9c5014eb1e46a96" translate="yes" xml:space="preserve">
          <source>InteractionManager allows long-running work to be scheduled after any interactions/animations have completed. In particular, this allows JavaScript animations to run smoothly.</source>
          <target state="translated">InteractionManager를 사용하면 상호 작용 / 애니메이션이 완료된 후 장기 실행 작업을 예약 할 수 있습니다. 특히 JavaScript 애니메이션을 원활하게 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f23accc3291002eef4949a6be814cc3daf5a0e2c" translate="yes" xml:space="preserve">
          <source>InteractionManager also allows applications to register animations by creating an interaction 'handle' on animation start, and clearing it upon completion:</source>
          <target state="translated">또한 InteractionManager를 통해 응용 프로그램은 애니메이션 시작시 상호 작용 '핸들'을 작성하고 완료시이를 지우 어 애니메이션을 등록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6c62a67dc1e39b09f327a0e595483cde3b5dc4ff" translate="yes" xml:space="preserve">
          <source>InteractionManager.clearInteractionHandle()</source>
          <target state="translated">InteractionManager.clearInteractionHandle()</target>
        </trans-unit>
        <trans-unit id="e75195a8ce42cce517a42bafd55fd8b748381363" translate="yes" xml:space="preserve">
          <source>InteractionManager.createInteractionHandle()</source>
          <target state="translated">InteractionManager.createInteractionHandle()</target>
        </trans-unit>
        <trans-unit id="e7e20e3af726676d9330c6e54e92565cec9a6dfd" translate="yes" xml:space="preserve">
          <source>InteractionManager.runAfterInteractions()</source>
          <target state="translated">InteractionManager.runAfterInteractions()</target>
        </trans-unit>
        <trans-unit id="12445987a03acddc09f2ed6cefc4029e84375d0a" translate="yes" xml:space="preserve">
          <source>InteractionManager.setDeadline()</source>
          <target state="translated">InteractionManager.setDeadline()</target>
        </trans-unit>
        <trans-unit id="b891b70877725ca1ca3335e99fbc7c0ad100b8df" translate="yes" xml:space="preserve">
          <source>Internal state is not preserved when content scrolls out of the render window. Make sure all your data is captured in the item data or external stores like Flux, Redux, or Relay.</source>
          <target state="translated">내용이 렌더 창 밖으로 스크롤 될 때 내부 상태가 유지되지 않습니다. 모든 데이터가 아이템 데이터 또는 Flux, Redux 또는 Relay와 같은 외부 상점에서 캡처되었는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="6a9858c9bf3149456595f98943cf88e41039822e" translate="yes" xml:space="preserve">
          <source>Interpolation</source>
          <target state="translated">Interpolation</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="bbe739383e01732d1ef85f7b7c6ea35c23b4e802" translate="yes" xml:space="preserve">
          <source>Inverse</source>
          <target state="translated">Inverse</target>
        </trans-unit>
        <trans-unit id="3e680a635c7d721185363e7dd202a581d5b2a7b6" translate="yes" xml:space="preserve">
          <source>Investigating the Loaded Modules</source>
          <target state="translated">로드 된 모듈 조사</target>
        </trans-unit>
        <trans-unit id="5515d44021412c42bda89984b2625840d5c8c18f" translate="yes" xml:space="preserve">
          <source>Invoked on content scroll with &lt;code&gt;{ nativeEvent: { contentOffset: { x, y } } }&lt;/code&gt;. May also contain other properties from ScrollEvent but on Android contentSize is not provided for performance reasons.</source>
          <target state="translated">&lt;code&gt;{ nativeEvent: { contentOffset: { x, y } } }&lt;/code&gt; 컨텐츠 스크롤에서 호출됩니다 . ScrollEvent의 다른 속성도 포함 할 수 있지만 성능상의 이유로 Android contentSize는 제공되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="32ce8a1aa8afe7b7d05b239d950e3cfaab99cdd8" translate="yes" xml:space="preserve">
          <source>Invoked on download progress with &lt;code&gt;{nativeEvent: {loaded, total}}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{nativeEvent: {loaded, total}}&lt;/code&gt; 으로 다운로드 진행시 호출되었습니다 .</target>
        </trans-unit>
        <trans-unit id="eb7a4bf89eb09e29cf26030451f9616714e9d90c" translate="yes" xml:space="preserve">
          <source>Invoked on load error with &lt;code&gt;{nativeEvent: {error}}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{nativeEvent: {error}}&lt;/code&gt; 로드 오류가 발생했습니다 .</target>
        </trans-unit>
        <trans-unit id="ddb41cfe6ced846e09db21fc14835de47a5bd4d0" translate="yes" xml:space="preserve">
          <source>Invoked on load start.</source>
          <target state="translated">로드 시작시 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="c361f9adfd481044e21c5c3911bf214d214b5fef" translate="yes" xml:space="preserve">
          <source>Invoked on mount and layout changes with</source>
          <target state="translated">마운트 및 레이아웃 변경시 호출</target>
        </trans-unit>
        <trans-unit id="f1e21c3ecb06cf8f8f4728e92539d821dc7e3fa2" translate="yes" xml:space="preserve">
          <source>Invoked on mount and layout changes with &lt;code&gt;{nativeEvent: {layout: {x, y, width, height}}}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{nativeEvent: {layout: {x, y, width, height}}}&lt;/code&gt; 마운트 및 레이아웃 변경시 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="75a7276f57fb9118c9ccf912307982532630341e" translate="yes" xml:space="preserve">
          <source>Invoked on mount and layout changes with &lt;code&gt;{x, y, width, height}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{x, y, width, height}&lt;/code&gt; 마운트 및 레이아웃 변경시 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="ab8ec03521b424dd4961a85356943bd68b014e2b" translate="yes" xml:space="preserve">
          <source>Invoked on mount and layout changes with:</source>
          <target state="translated">다음을 사용하여 마운트 및 레이아웃 변경시 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="13cb9bb794ff7d7653a7e1b57687ee31d6e3a383" translate="yes" xml:space="preserve">
          <source>Invoked when a partial load of the image is complete. The definition of what constitutes a &quot;partial load&quot; is loader specific though this is meant for progressive JPEG loads.</source>
          <target state="translated">이미지의 부분로드가 완료되면 호출됩니다. &quot;부분로드&quot;를 구성하는 것에 대한 정의는 로더마다 다르지만 점진적인 JPEG로드를위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="15dbb054216432b3cc742cbc638cde2de9b3f051" translate="yes" xml:space="preserve">
          <source>Invoked when load completes successfully.</source>
          <target state="translated">로드가 성공적으로 완료되면 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="79a6577b58f9fee4cb2546c7bd266cf79efc3b69" translate="yes" xml:space="preserve">
          <source>Invoked when load either succeeds or fails.</source>
          <target state="translated">로드가 성공하거나 실패 할 때 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="ce130a893a1f7b3938f023bf5a26bea414ea1da6" translate="yes" xml:space="preserve">
          <source>Invoked whenever an error is encountered.</source>
          <target state="translated">오류가 발생할 때마다 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="b6f1fed2554e0dd6f57f8a04f40508c15b8ae15e" translate="yes" xml:space="preserve">
          <source>Invoked whenever the location changes.</source>
          <target state="translated">위치가 변경 될 때마다 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="372bb9e5c054cc77eb356b8a5d2303f24b4f0556" translate="yes" xml:space="preserve">
          <source>Invoked with latest location info.</source>
          <target state="translated">최신 위치 정보로 호출했습니다.</target>
        </trans-unit>
        <trans-unit id="6b6a2984a77de589b57e3430c6b5398468a5d127" translate="yes" xml:space="preserve">
          <source>Invoked with the new value when the value changes.</source>
          <target state="translated">값이 변경되면 새 값으로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="32fa1ffb97d17fe590cde81f6e7431a686e5c833" translate="yes" xml:space="preserve">
          <source>Invokes the success callback once with the latest location info.</source>
          <target state="translated">최신 위치 정보로 성공 콜백을 한 번 호출합니다.</target>
        </trans-unit>
        <trans-unit id="59f8524388bc2bc776f867658e528dce00c62f73" translate="yes" xml:space="preserve">
          <source>Invokes the success callback whenever the location changes. Returns a &lt;code&gt;watchId&lt;/code&gt; (number).</source>
          <target state="translated">위치가 변경 될 때마다 성공 콜백을 호출합니다. &lt;code&gt;watchId&lt;/code&gt; (숫자)를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="7bb7064012ffb3570ad9e9438a076a59ac75f2f8" translate="yes" xml:space="preserve">
          <source>Is there a pull request that addressed this issue? Post a comment with the PR number so we can follow up.</source>
          <target state="translated">이 문제를 해결 한 풀 요청이 있습니까? PR 번호로 의견을 게시하여 후속 조치를 취할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="871dfa6ebe1395ffeb581b4bc709e93736ba7cf9" translate="yes" xml:space="preserve">
          <source>Issue caused by the number of directories &lt;a href=&quot;https://github.com/guard/listen/wiki/Increasing-the-amount-of-inotify-watchers&quot;&gt;inotify&lt;/a&gt; (used by watchman on Linux) can monitor. To solve it, just run this command in your terminal window</source>
          <target state="translated">&lt;a href=&quot;https://github.com/guard/listen/wiki/Increasing-the-amount-of-inotify-watchers&quot;&gt;inotify&lt;/a&gt; (Linux의 watchman이 사용) 디렉토리 수로 인해 발생하는 문제 를 모니터 할 수 있습니다. 해결하려면 터미널 창에서이 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="8cfc917f93912e5163999d63994a939593e683c9" translate="yes" xml:space="preserve">
          <source>Issues in the &quot;Needs more information&quot; state may be closed after a week with no followup from the author. Issues that have have had no activity in the last two months may be closed periodically. If your issue gets closed in this manner, it's nothing personal. If you strongly believe that the issue should remain open, just let us know why.</source>
          <target state="translated">&quot;추가 정보 필요&quot;상태의 문제는 작성자의 후속 조치없이 1 주일 후에 종료 될 수 있습니다. 지난 2 개월 동안 활동이 없었던 문제는 주기적으로 종결 될 수 있습니다. 이런 식으로 문제가 해결되면 개인적인 문제가 아닙니다. 문제가 계속 열려 있어야한다고 생각되면 이유를 알려주세요.</target>
        </trans-unit>
        <trans-unit id="2cda3d9c8bf4e335a3602c5771ca3c1cb84ae691" translate="yes" xml:space="preserve">
          <source>Issues should be relatively easy to reproduce. Sometimes the issue affects a particular app but a minimal repro is not provided, perhaps a crash is seen in the logs and the author is not sure where its coming from, maybe the issue is sporadic.</source>
          <target state="translated">문제는 비교적 쉽게 재현 할 수 있어야합니다. 때로는 문제가 특정 앱에 영향을 주지만 최소한의 재현이 제공되지 않을 수 있습니다. 로그에 충돌이 발생했을 수 있으며 저자는 출처가 어디인지 확실하지 않으며 문제가 산발적 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ae4429c9b1a2b0d204d25b8146be98c0032a128" translate="yes" xml:space="preserve">
          <source>Issues should provide clear, easy to follow steps alongside sample code to reproduce the issue. Ideally, provide a &lt;a href=&quot;http://snack.expo.io/&quot;&gt;Snack&lt;/a&gt;.</source>
          <target state="translated">문제는 문제를 재현하기 위해 샘플 코드와 함께 명확하고 따르기 쉬운 단계를 제공해야합니다. 이상적으로는 &lt;a href=&quot;http://snack.expo.io/&quot;&gt;간식을&lt;/a&gt; 제공하십시오 .</target>
        </trans-unit>
        <trans-unit id="7ad7f788d7fc0125c205b8b545a6982ab1d65410" translate="yes" xml:space="preserve">
          <source>Issues that do not meet the above criteria can be closed immediately, with a link to the &lt;a href=&quot;contributing&quot;&gt;contributor's guide&lt;/a&gt;.</source>
          <target state="translated">위의 기준을 충족하지 않는 문제는 &lt;a href=&quot;contributing&quot;&gt;기고자 안내서&lt;/a&gt; 링크를 통해 즉시 닫을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a9f26e88c9b8901dbb7aff783d69813f5b22676e" translate="yes" xml:space="preserve">
          <source>Issues with the 'Needs more information' label that have been open for more than a week without a response from the author can be closed.</source>
          <target state="translated">저자의 답변없이 일주일 이상 열려있는 '추가 정보 필요'레이블 문제는 종결 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="79e9658711c546ef5d21b6e27582f88fecbb1143" translate="yes" xml:space="preserve">
          <source>It also allows to send the style only once through the bridge. All subsequent uses are going to refer an id (not implemented yet).</source>
          <target state="translated">또한 브리지를 통해 스타일을 한 번만 보낼 수 있습니다. 이후의 모든 용도는 ID (아직 구현되지 않음)를 참조합니다.</target>
        </trans-unit>
        <trans-unit id="09f17f0546a285e6aa507296e45d34aed94bde32" translate="yes" xml:space="preserve">
          <source>It is a component to solve the common problem of views that need to move out of the way of the virtual keyboard. It can automatically adjust either its position or bottom padding based on the position of the keyboard.</source>
          <target state="translated">가상 키보드에서 벗어나야하는보기의 일반적인 문제를 해결하는 구성 요소입니다. 키보드의 위치에 따라 위치 또는 하단 패딩을 자동으로 조정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b4c875414047f611dd6e18245caec363481c2da4" translate="yes" xml:space="preserve">
          <source>It is fine to update properties anytime. However, updates have to be performed on the main thread. You use the getter on any thread.</source>
          <target state="translated">언제라도 속성을 업데이트하는 것이 좋습니다. 그러나 기본 스레드에서 업데이트를 수행해야합니다. 모든 스레드에서 게터를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="0ed4aa5105b38583f0a880c3e870d4ded64c4883" translate="yes" xml:space="preserve">
          <source>It is important all children are &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt;s and not composite components. You can set style properties like &lt;code&gt;padding&lt;/code&gt; or &lt;code&gt;backgroundColor&lt;/code&gt; for each child. It is also important that each child have a &lt;code&gt;key&lt;/code&gt; prop.</source>
          <target state="translated">모든 하위 요소가 &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; 이며 복합 구성 요소가 아닌 것이 중요합니다 . 각 자식에 대해 &lt;code&gt;padding&lt;/code&gt; 또는 &lt;code&gt;backgroundColor&lt;/code&gt; 와 같은 스타일 속성을 설정할 수 있습니다 . 또한 각 어린이에게 &lt;code&gt;key&lt;/code&gt; 소품 이 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="5c0094824f17a2198f4995a46792e35945ada090" translate="yes" xml:space="preserve">
          <source>It is possible to have multiple &lt;code&gt;StatusBar&lt;/code&gt; components mounted at the same time. The props will be merged in the order the &lt;code&gt;StatusBar&lt;/code&gt; components were mounted. One use case is to specify status bar styles per route using &lt;code&gt;Navigator&lt;/code&gt;.</source>
          <target state="translated">여러 개의 &lt;code&gt;StatusBar&lt;/code&gt; 구성 요소를 동시에 탑재 할 수 있습니다 . 소품은 &lt;code&gt;StatusBar&lt;/code&gt; 구성 요소가 장착 된 순서대로 병합됩니다 . 사용 사례 중 하나는 &lt;code&gt;Navigator&lt;/code&gt; 를 사용하여 경로당 상태 표시 줄 스타일을 지정하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="a87d868fbf82a105fe6bb13e47618a435b7f6391" translate="yes" xml:space="preserve">
          <source>It is recommended that you use an abstraction on top of &lt;code&gt;AsyncStorage&lt;/code&gt; instead of &lt;code&gt;AsyncStorage&lt;/code&gt; directly for anything more than light usage since it operates globally.</source>
          <target state="translated">당신이 위에 추상화를 사용하는 것이 좋습니다 &lt;code&gt;AsyncStorage&lt;/code&gt; 대신 &lt;code&gt;AsyncStorage&lt;/code&gt; 는 전 세계적으로 운영하고 있기 때문에 사용량이보다 더 직접적으로 아무것도.</target>
        </trans-unit>
        <trans-unit id="b3a865f73796cffd8919a4e0e2dd01655d63784e" translate="yes" xml:space="preserve">
          <source>It is sometimes necessary to make changes directly to a component without using state/props to trigger a re-render of the entire subtree. When using React in the browser for example, you sometimes need to directly modify a DOM node, and the same is true for views in mobile apps. &lt;code&gt;setNativeProps&lt;/code&gt; is the React Native equivalent to setting properties directly on a DOM node.</source>
          <target state="translated">전체 하위 트리를 다시 렌더링하기 위해 상태 / 프로 프를 사용하지 않고 구성 요소를 직접 변경해야하는 경우가 있습니다. 예를 들어 브라우저에서 React를 사용하는 경우 때때로 DOM 노드를 직접 수정해야하며 모바일 앱의보기에서도 마찬가지입니다. &lt;code&gt;setNativeProps&lt;/code&gt; 는 DOM 노드에서 직접 특성을 설정하는 것과 동등한 React Native입니다.</target>
        </trans-unit>
        <trans-unit id="c908d7885efd9a93d2d2e9eaa00cb7c6013054b3" translate="yes" xml:space="preserve">
          <source>It is technically possible not to use CocoaPods, but that would require manual library and linker additions that would overly complicate this process.</source>
          <target state="translated">기술적으로 CocoaPods를 사용하지 않는 것이 가능하지만이 과정을 지나치게 복잡하게하는 수동 라이브러리 및 링커 추가가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="d1340e6df58829a3083e28592b953b9af96a3c35" translate="yes" xml:space="preserve">
          <source>It is very important to highlight that the callback is not invoked immediately after the native function completes - remember that bridge communication is asynchronous, and this too is tied to the run loop.</source>
          <target state="translated">기본 함수가 완료된 직후에 콜백이 호출되지 않는다는 점을 강조하는 것이 매우 중요합니다. 브리지 통신은 비동기식이며 실행 루프와도 연결되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="b32ad908c62eab134b7a5a098ec5c8ac330e2151" translate="yes" xml:space="preserve">
          <source>It provides a predictable wrapper of the responder handlers provided by the &lt;a href=&quot;gesture-responder-system&quot;&gt;gesture responder system&lt;/a&gt;. For each handler, it provides a new &lt;code&gt;gestureState&lt;/code&gt; object alongside the native event object:</source>
          <target state="translated">&lt;a href=&quot;gesture-responder-system&quot;&gt;제스처 응답기 시스템&lt;/a&gt; 에서 제공하는 응답기 핸들러의 예측 가능한 래퍼를 제공 합니다 . 각 핸들러에 대해 기본 이벤트 객체와 함께 새로운 &lt;code&gt;gestureState&lt;/code&gt; 객체를 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="3aa86979f3ba1d64d144ffa96cd5ad23da3ea553" translate="yes" xml:space="preserve">
          <source>It should connect to your simulator within a few seconds.</source>
          <target state="translated">몇 초 내에 시뮬레이터에 연결해야합니다.</target>
        </trans-unit>
        <trans-unit id="abcbc84130123e4e4a51e5f5b6cd323e84b61af2" translate="yes" xml:space="preserve">
          <source>It specifies whether the children are visible or not. If you see a blank content, you probably forgot to add a selected one.</source>
          <target state="translated">자식 표시 여부를 지정합니다. 빈 내용이 표시되면 선택한 내용을 추가하지 않은 것입니다.</target>
        </trans-unit>
        <trans-unit id="913640267a13fd58d1b878ea7e1a74ee7c86f061" translate="yes" xml:space="preserve">
          <source>It works like the CSS &lt;code&gt;z-index&lt;/code&gt; property - components with a larger &lt;code&gt;zIndex&lt;/code&gt; will render on top. Think of the z-direction like it's pointing from the phone into your eyeball. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/z-index&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/z-index&lt;/a&gt; for more details.</source>
          <target state="translated">CSS &lt;code&gt;z-index&lt;/code&gt; 속성 처럼 작동합니다 . &lt;code&gt;zIndex&lt;/code&gt; 가 더 큰 구성 요소가 맨 위에 렌더링됩니다. z 방향이 전화기에서 안구를 향하고 있다고 생각하십시오. 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/z-index&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/z-index&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="95c06ebf35d772cb3c1072ad83b3fa671e70b079" translate="yes" xml:space="preserve">
          <source>It works similarly to &lt;code&gt;bottom&lt;/code&gt; in CSS, but in React Native you must use points or percentages. Ems and other units are not supported.</source>
          <target state="translated">CSS에서는 &lt;code&gt;bottom&lt;/code&gt; 과 비슷하게 작동 하지만 React Native에서는 점이나 백분율을 사용해야합니다. Em 및 기타 장치는 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8a83570744803efaf8059b9490a177a7936245c0" translate="yes" xml:space="preserve">
          <source>It works similarly to &lt;code&gt;display&lt;/code&gt; in CSS, but only support 'flex' and 'none'. 'flex' is the default.</source>
          <target state="translated">CSS 로 &lt;code&gt;display&lt;/code&gt; 하는 것과 비슷하게 작동 하지만 'flex'및 'none'만 지원합니다. 'flex'가 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="ea2ca31e6e607d24e860703a0b5b861109a3f1ac" translate="yes" xml:space="preserve">
          <source>It works similarly to &lt;code&gt;height&lt;/code&gt; in CSS, but in React Native you must use points or percentages. Ems and other units are not supported. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/height&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/height&lt;/a&gt; for more details.</source>
          <target state="translated">CSS에서는 &lt;code&gt;height&lt;/code&gt; 와 비슷하게 작동 하지만 React Native에서는 점 또는 백분율을 사용해야합니다. Em 및 기타 장치는 지원되지 않습니다. 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/height&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/height&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="85c0380ef1aa0ee77cccd229e12f8610ef968180" translate="yes" xml:space="preserve">
          <source>It works similarly to &lt;code&gt;left&lt;/code&gt; in CSS, but in React Native you must use points or percentages. Ems and other units are not supported.</source>
          <target state="translated">CSS에서는 &lt;code&gt;left&lt;/code&gt; 과 비슷하게 작동 하지만 React Native에서는 점이나 백분율을 사용해야합니다. Em 및 기타 장치는 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f4fc5ab89e50d86fc3308c4986d74f8250e2e0f5" translate="yes" xml:space="preserve">
          <source>It works similarly to &lt;code&gt;max-height&lt;/code&gt; in CSS, but in React Native you must use points or percentages. Ems and other units are not supported.</source>
          <target state="translated">CSS의 &lt;code&gt;max-height&lt;/code&gt; 와 비슷하게 작동 하지만 React Native에서는 점 또는 백분율을 사용해야합니다. Em 및 기타 장치는 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ac7edbea62d5fbdc43803ec753d373f2467999b7" translate="yes" xml:space="preserve">
          <source>It works similarly to &lt;code&gt;max-width&lt;/code&gt; in CSS, but in React Native you must use points or percentages. Ems and other units are not supported.</source>
          <target state="translated">CSS의 &lt;code&gt;max-width&lt;/code&gt; 와 비슷하게 작동 하지만 React Native에서는 점 또는 백분율을 사용해야합니다. Em 및 기타 장치는 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9af065d2d6c7d572fc017f7dffd1d4f1b56552aa" translate="yes" xml:space="preserve">
          <source>It works similarly to &lt;code&gt;min-height&lt;/code&gt; in CSS, but in React Native you must use points or percentages. Ems and other units are not supported.</source>
          <target state="translated">CSS의 &lt;code&gt;min-height&lt;/code&gt; 와 비슷하게 작동 하지만 React Native에서는 점 또는 백분율을 사용해야합니다. Em 및 기타 장치는 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9156cad2acd585f9965d401b316f09222c54af09" translate="yes" xml:space="preserve">
          <source>It works similarly to &lt;code&gt;min-width&lt;/code&gt; in CSS, but in React Native you must use points or percentages. Ems and other units are not supported.</source>
          <target state="translated">CSS의 &lt;code&gt;min-width&lt;/code&gt; 와 비슷하게 작동 하지만 React Native에서는 점 또는 백분율을 사용해야합니다. Em 및 기타 장치는 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="775eb66f25e168738fb7a35a4bac268537347898" translate="yes" xml:space="preserve">
          <source>It works similarly to &lt;code&gt;right&lt;/code&gt; in CSS, but in React Native you must use points or percentages. Ems and other units are not supported.</source>
          <target state="translated">CSS에서는 &lt;code&gt;right&lt;/code&gt; 과 비슷하게 작동 하지만 React Native에서는 점이나 백분율을 사용해야합니다. Em 및 기타 장치는 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9c64f1256b352092c84a42bc0d31c42f62ec389b" translate="yes" xml:space="preserve">
          <source>It works similarly to &lt;code&gt;top&lt;/code&gt; in CSS, but in React Native you must use points or percentages. Ems and other units are not supported.</source>
          <target state="translated">CSS에서는 &lt;code&gt;top&lt;/code&gt; 과 비슷하게 작동 하지만 React Native에서는 점이나 백분율을 사용해야합니다. Em 및 기타 장치는 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7a8f74d99a28ee30283f00e57f069ca27ce35182" translate="yes" xml:space="preserve">
          <source>It works similarly to &lt;code&gt;width&lt;/code&gt; in CSS, but in React Native you must use points or percentages. Ems and other units are not supported. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/width&lt;/a&gt; for more details.</source>
          <target state="translated">CSS의 &lt;code&gt;width&lt;/code&gt; 와 비슷하게 작동 하지만 React Native에서는 점 또는 백분율을 사용해야합니다. Em 및 기타 장치는 지원되지 않습니다. 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/width&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3de0b625c693efdc993422d8826e5fead680619e" translate="yes" xml:space="preserve">
          <source>It's a good idea to add a Jest test when you are working on a change that only modifies JavaScript code.</source>
          <target state="translated">JavaScript 코드 만 수정하는 변경 작업을 수행 할 때 Jest 테스트를 추가하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="0d007a49756bb9d54db954a0e7e16c5be5871a99" translate="yes" xml:space="preserve">
          <source>It's a good idea to add an Android integration test whenever you are working on code that needs both JavaScript and Java to be tested in conjunction. The Android integration tests live under &lt;a href=&quot;https://github.com/facebook/react-native/tree/master/ReactAndroid/src/androidTest/java/com/facebook/react/tests&quot;&gt;&lt;code&gt;ReactAndroid/src/androidTest&lt;/code&gt;&lt;/a&gt;, so you can browse through that directory for good examples of tests.</source>
          <target state="translated">JavaScript와 Java를 함께 테스트해야하는 코드로 작업 할 때마다 Android 통합 테스트를 추가하는 것이 좋습니다. Android 통합 테스트는 &lt;a href=&quot;https://github.com/facebook/react-native/tree/master/ReactAndroid/src/androidTest/java/com/facebook/react/tests&quot;&gt; &lt;code&gt;ReactAndroid/src/androidTest&lt;/code&gt; &lt;/a&gt; 에 있으므로 테스트의 좋은 예를 보려면 해당 디렉토리를 찾아 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0dccf5c290ff4fa52ba348eece4232ba143e769b" translate="yes" xml:space="preserve">
          <source>It's a good idea to add an Android unit test whenever you are working on code that can be tested by Java code alone. The Android unit tests live under &lt;a href=&quot;https://github.com/facebook/react-native/tree/master/ReactAndroid/src/test/java/com/facebook/react&quot;&gt;&lt;code&gt;ReactAndroid/src/tests&lt;/code&gt;&lt;/a&gt;, so you can browse through that directory for good examples of tests.</source>
          <target state="translated">Java 코드만으로 테스트 할 수있는 코드로 작업 할 때마다 Android 단위 테스트를 추가하는 것이 좋습니다. Android 단위 테스트는 &lt;a href=&quot;https://github.com/facebook/react-native/tree/master/ReactAndroid/src/test/java/com/facebook/react&quot;&gt; &lt;code&gt;ReactAndroid/src/tests&lt;/code&gt; &lt;/a&gt; 아래 에 있으므로 테스트의 좋은 예를 보려면 해당 디렉토리를 찾아 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="12db64911639df654960a96732b93077418bd67f" translate="yes" xml:space="preserve">
          <source>It's always a good idea to test your app on an actual device before releasing it to your users. This document will guide you through the necessary steps to run your React Native app on a device and to get it ready for production.</source>
          <target state="translated">앱을 사용자에게 공개하기 전에 실제 기기에서 앱을 테스트하는 것이 좋습니다. 이 문서는 장치에서 React Native 앱을 실행하고 생산 준비를하는 데 필요한 단계를 안내합니다.</target>
        </trans-unit>
        <trans-unit id="16cef7f412ef9c1cebb256cba395464f6dbd9c85" translate="yes" xml:space="preserve">
          <source>It's fine to change root view's size flexibility mode dynamically. Changing flexibility mode of a root view will schedule a layout recalculation and the delegate &lt;code&gt;rootViewDidChangeIntrinsicSize:&lt;/code&gt; method will be called once the content size is known.</source>
          <target state="translated">루트 뷰의 크기 유연성 모드를 동적으로 변경하는 것이 좋습니다. 루트 뷰의 유연성 모드를 변경하면 레이아웃 재 계산이 예약 되고 컨텐츠 크기를 &lt;code&gt;rootViewDidChangeIntrinsicSize:&lt;/code&gt; 대리자 rootViewDidChangeIntrinsicSize : 메서드가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="63a28e4aa8a08764cfe5119987a26d56a693d113" translate="yes" xml:space="preserve">
          <source>It's implemented using onLayout handler attached to the content container which this ScrollView renders.</source>
          <target state="translated">이 ScrollView가 렌더링하는 컨텐츠 컨테이너에 연결된 onLayout 핸들러를 사용하여 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="2620cff7a72a5dac9da1e132fb9abb74c723c406" translate="yes" xml:space="preserve">
          <source>It's totally fine to update root view's size dynamically by re-setting its frame property. React Native will take care of the content's layout.</source>
          <target state="translated">프레임 속성을 재설정하여 루트 뷰의 크기를 동적으로 업데이트하는 것이 좋습니다. React Native는 컨텐츠의 레이아웃을 관리합니다.</target>
        </trans-unit>
        <trans-unit id="515f086ba7eb6854eac063ab918f23ceb0aa013f" translate="yes" xml:space="preserve">
          <source>Item separator support.</source>
          <target state="translated">항목 구분자 지원.</target>
        </trans-unit>
        <trans-unit id="085c38344ab0c45160a4facf2be7cc10dff13288" translate="yes" xml:space="preserve">
          <source>Items comes with a few predefined system icons. Note that if you are using them, the title and selectedIcon will be overridden with the system ones.</source>
          <target state="translated">항목에는 몇 가지 사전 정의 된 시스템 아이콘이 있습니다. 당신이 그들을 사용하는 경우, 제목과 selectedIcon은 시스템과 함께 재정의됩니다.</target>
        </trans-unit>
        <trans-unit id="a87e5ac08cd1e4d2ab1963a42d798a7e83e5506e" translate="yes" xml:space="preserve">
          <source>JS FPS plunges when re-rendering a view that hardly changes</source>
          <target state="translated">거의 변경되지 않는 뷰를 다시 렌더링 할 때 JS FPS가 급감</target>
        </trans-unit>
        <trans-unit id="533b7ae140e515c2f226df587bf785f2752d4e92" translate="yes" xml:space="preserve">
          <source>JS frame rate (JavaScript thread)</source>
          <target state="translated">JS 프레임 속도 (자바 스크립트 스레드)</target>
        </trans-unit>
        <trans-unit id="0e4779d05c5a545a6bd2f3323d3fe430a37f5d7b" translate="yes" xml:space="preserve">
          <source>JSX</source>
          <target state="translated">JSX</target>
        </trans-unit>
        <trans-unit id="e027e57610f85225767aafbbf23fed7457e55828" translate="yes" xml:space="preserve">
          <source>Java</source>
          <target state="translated">Java</target>
        </trans-unit>
        <trans-unit id="276bbd673319b8da1c62a0b5bc42a2ddcf6f5f5f" translate="yes" xml:space="preserve">
          <source>Java Development Kit</source>
          <target state="translated">자바 개발 키트</target>
        </trans-unit>
        <trans-unit id="ee620923ff5fc510555dc37083a135ee93b5404b" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
          <target state="translated">JavaScript</target>
        </trans-unit>
        <trans-unit id="a2ffee171bf729d3e12756e458f1c783498cbc7e" translate="yes" xml:space="preserve">
          <source>JavaScript Environment</source>
          <target state="translated">자바 스크립트 환경</target>
        </trans-unit>
        <trans-unit id="87d2ca3cbeb0751ff390e381fdd8f7ad6916dbe0" translate="yes" xml:space="preserve">
          <source>JavaScript Runtime</source>
          <target state="translated">자바 스크립트 런타임</target>
        </trans-unit>
        <trans-unit id="a2a904a7a5cb189e618a71ed1db5353297a79f79" translate="yes" xml:space="preserve">
          <source>JavaScript Syntax Transformers</source>
          <target state="translated">자바 스크립트 문법 변환기</target>
        </trans-unit>
        <trans-unit id="196a94f9774fe3c715ef7a736ba70fda93c36b49" translate="yes" xml:space="preserve">
          <source>JavaScript can use this value right away, synchronously:</source>
          <target state="translated">JavaScript는이 값을 동 기적으로 즉시 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f82ab09a59b1c63a24c1342f040725aea9c6d385" translate="yes" xml:space="preserve">
          <source>JavaScript code can subscribe to these events by creating a new &lt;code&gt;NativeEventEmitter&lt;/code&gt; instance around your module.</source>
          <target state="translated">JavaScript 코드는 모듈 주위에 새 &lt;code&gt;NativeEventEmitter&lt;/code&gt; 인스턴스 를 작성하여 이러한 이벤트를 구독 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9e2ae45c99f600971f8f7c48c4c518ffdb82330e" translate="yes" xml:space="preserve">
          <source>JavaScript modules can then register to receive events by &lt;code&gt;addListenerOn&lt;/code&gt; using the &lt;code&gt;Subscribable&lt;/code&gt; mixin.</source>
          <target state="translated">자바 스크립트 모듈은 그때까지 이벤트 수신을 등록 할 수 있습니다 &lt;code&gt;addListenerOn&lt;/code&gt; 사용하여 &lt;code&gt;Subscribable&lt;/code&gt; 믹스 인을.</target>
        </trans-unit>
        <trans-unit id="2589f2075580d8c0b6f57b6f0772f6105755635c" translate="yes" xml:space="preserve">
          <source>JavaScript thread performance suffers greatly when running in dev mode. This is unavoidable: a lot more work needs to be done at runtime to provide you with good warnings and error messages, such as validating propTypes and various other assertions. Always make sure to test performance in &lt;a href=&quot;running-on-device#building-your-app-for-production&quot;&gt;release builds&lt;/a&gt;.</source>
          <target state="translated">개발자 모드에서 실행할 때 JavaScript 스레드 성능이 크게 저하됩니다. 이는 피할 수없는 일입니다. propTypes 유효성 검사 및 기타 다양한 어설 션과 같은 좋은 경고 및 오류 메시지를 제공하기 위해 런타임에 훨씬 더 많은 작업을 수행해야합니다. &lt;a href=&quot;running-on-device#building-your-app-for-production&quot;&gt;릴리스 빌드&lt;/a&gt; 에서 항상 성능을 테스트하십시오 .</target>
        </trans-unit>
        <trans-unit id="c7afff3f789cd350ad5ef2e0ccd58b4b677f1d64" translate="yes" xml:space="preserve">
          <source>Jest</source>
          <target state="translated">Jest</target>
        </trans-unit>
        <trans-unit id="16ca789cab6e9192d051fc2902682df3b557edf8" translate="yes" xml:space="preserve">
          <source>Jest tests are JavaScript-only tests run on the command line with node. You can run the existing React Native jest tests with:</source>
          <target state="translated">Jest 테스트는 명령 줄에서 node로 실행되는 JavaScript 전용 테스트입니다. 다음을 사용하여 기존 React Native jest 테스트를 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa47b7681aa35768715c6300771675b56639788a" translate="yes" xml:space="preserve">
          <source>Justify Content</source>
          <target state="translated">내용을 정당화하십시오</target>
        </trans-unit>
        <trans-unit id="1c68c1fc1dff2d27783a11d229d7d6c8d5ce57a4" translate="yes" xml:space="preserve">
          <source>Keep in mind that ScrollViews must have a bounded height in order to work, since they contain unbounded-height children into a bounded container (via a scroll interaction). In order to bound the height of a ScrollView, either set the height of the view directly (discouraged) or make sure all parent views have bounded height. Forgetting to transfer &lt;code&gt;{flex: 1}&lt;/code&gt; down the view stack can lead to errors here, which the element inspector makes easy to debug.</source>
          <target state="translated">ScrollViews는 작동하기 위해 높이가 제한되어 있어야합니다. 스크롤 상호 작용을 통해 바인딩되지 않은 높이의 자식이 바인딩 된 컨테이너에 포함되어 있기 때문입니다. ScrollView의 높이를 제한하려면보기의 높이를 직접 설정하거나 (감지 된) 모든 상위보기의 높이가 제한되어 있는지 확인하십시오. 뷰 스택 아래 로 &lt;code&gt;{flex: 1}&lt;/code&gt; 을 (를) 전송하지 않으면 여기에서 오류가 발생하여 요소 관리자가 쉽게 디버깅 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="65df2783bd6119d177a8840954b52dd8c04f2f4a" translate="yes" xml:space="preserve">
          <source>Keep in mind that if you use ES6 classes for your React components &lt;a href=&quot;https://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html#mixins&quot;&gt;there is no built-in API for mixins&lt;/a&gt;. To use &lt;code&gt;TimerMixin&lt;/code&gt; with ES6 classes, we recommend &lt;a href=&quot;https://github.com/brigand/react-mixin&quot;&gt;react-mixin&lt;/a&gt;.</source>
          <target state="translated">React 컴포넌트에 ES6 클래스를 사용하는 경우 &lt;a href=&quot;https://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html#mixins&quot;&gt;mixin 용 내장 API가 없습니다&lt;/a&gt; . ES6 클래스와 함께 &lt;code&gt;TimerMixin&lt;/code&gt; 을 사용하려면 &lt;a href=&quot;https://github.com/brigand/react-mixin&quot;&gt;react-mixin을&lt;/a&gt; 권장 합니다.</target>
        </trans-unit>
        <trans-unit id="a22c16410dc4eafc94fbc317a11af2903d7b50a3" translate="yes" xml:space="preserve">
          <source>Key Concepts</source>
          <target state="translated">주요 컨셉</target>
        </trans-unit>
        <trans-unit id="99bd4d8ac8f7c0f639f080954fed0907b2841b5a" translate="yes" xml:space="preserve">
          <source>Key of the item to fetch.</source>
          <target state="translated">가져올 아이템의 키.</target>
        </trans-unit>
        <trans-unit id="41f4914c8c00643d7ccf01ee5d687ad3d17bca7c" translate="yes" xml:space="preserve">
          <source>Key of the item to modify.</source>
          <target state="translated">수정할 아이템의 키.</target>
        </trans-unit>
        <trans-unit id="e8d4e48369a3a569e876ab42bf6231c5a348cb54" translate="yes" xml:space="preserve">
          <source>Key of the item to remove.</source>
          <target state="translated">제거 할 아이템의 키.</target>
        </trans-unit>
        <trans-unit id="94186f07a021840e4a55ca8d7ebd45be82f26db2" translate="yes" xml:space="preserve">
          <source>Key of the item to set.</source>
          <target state="translated">설정할 항목의 키입니다.</target>
        </trans-unit>
        <trans-unit id="6662c40bac78a8fe5e23219b77087fbe7647cb15" translate="yes" xml:space="preserve">
          <source>Keyboard</source>
          <target state="translated">Keyboard</target>
        </trans-unit>
        <trans-unit id="f8289d8df3c587bf36b13c5492f2bfa725997644" translate="yes" xml:space="preserve">
          <source>Keyboard.addListener()</source>
          <target state="translated">Keyboard.addListener()</target>
        </trans-unit>
        <trans-unit id="642f7b191acd1c6a34b968048dbba25a2a0f61d2" translate="yes" xml:space="preserve">
          <source>Keyboard.dismiss()</source>
          <target state="translated">Keyboard.dismiss()</target>
        </trans-unit>
        <trans-unit id="39f5ec5f64e23a579d05afee3528a2b1b4929377" translate="yes" xml:space="preserve">
          <source>Keyboard.removeAllListeners()</source>
          <target state="translated">Keyboard.removeAllListeners()</target>
        </trans-unit>
        <trans-unit id="72fd95ed96b351045a7c273fab5775faaec34c7a" translate="yes" xml:space="preserve">
          <source>Keyboard.removeListener()</source>
          <target state="translated">Keyboard.removeListener()</target>
        </trans-unit>
        <trans-unit id="a8a11b5963ad8959c953576b3cc2fa2dc3fc6d57" translate="yes" xml:space="preserve">
          <source>KeyboardAvoidingView</source>
          <target state="translated">KeyboardAvoidingView</target>
        </trans-unit>
        <trans-unit id="32dc9bb0b33c14c1ca529d3dd9220d0452ccd548" translate="yes" xml:space="preserve">
          <source>KeyboardAvoidingView#behavior</source>
          <target state="translated">KeyboardAvoidingView#behavior</target>
        </trans-unit>
        <trans-unit id="93b46893ecd1f99374cf3394e78afc25c23d2ac1" translate="yes" xml:space="preserve">
          <source>KeyboardAvoidingView#contentContainerStyle</source>
          <target state="translated">KeyboardAvoidingView#contentContainerStyle</target>
        </trans-unit>
        <trans-unit id="8802f1011ff3d33a82fd4025829403ebe871c442" translate="yes" xml:space="preserve">
          <source>KeyboardAvoidingView#enabled</source>
          <target state="translated">KeyboardAvoidingView#enabled</target>
        </trans-unit>
        <trans-unit id="8cbc3f4e6ad785d1ebc41901bb9e32a0af25baf9" translate="yes" xml:space="preserve">
          <source>KeyboardAvoidingView#keyboardVerticalOffset</source>
          <target state="translated">KeyboardAvoidingView#keyboardVerticalOffset</target>
        </trans-unit>
        <trans-unit id="88b5a8b16b6187f1b55a29fbab9d83dd2492423f" translate="yes" xml:space="preserve">
          <source>KeyboardAvoidingView.onKeyboardChange()</source>
          <target state="translated">KeyboardAvoidingView.onKeyboardChange()</target>
        </trans-unit>
        <trans-unit id="dadbac1c0b58f8432d436ec86fac5baa4fc87408" translate="yes" xml:space="preserve">
          <source>KeyboardAvoidingView.onLayout()</source>
          <target state="translated">KeyboardAvoidingView.onLayout()</target>
        </trans-unit>
        <trans-unit id="66e342aa668376ae5453a8fc143aa6baa7646ac4" translate="yes" xml:space="preserve">
          <source>KeyboardAvoidingView.relativeKeyboardHeight()</source>
          <target state="translated">KeyboardAvoidingView.relativeKeyboardHeight()</target>
        </trans-unit>
        <trans-unit id="738fd1d2452fc31a236c5ad511bfcc46b324365e" translate="yes" xml:space="preserve">
          <source>Large</source>
          <target state="translated">Large</target>
        </trans-unit>
        <trans-unit id="646fe6cc77fd33d55eace11a09dcefd28261c92f" translate="yes" xml:space="preserve">
          <source>LargeInverse</source>
          <target state="translated">LargeInverse</target>
        </trans-unit>
        <trans-unit id="4acd89c9121c620ff22ca9db62466684be2a35de" translate="yes" xml:space="preserve">
          <source>Launches an alert dialog with the specified title and message.</source>
          <target state="translated">지정된 제목과 메시지로 경고 대화 상자를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="72c480a8e7df537bc0dee3e1543f5c2e5785cee8" translate="yes" xml:space="preserve">
          <source>Layout Props</source>
          <target state="translated">레이아웃 소품</target>
        </trans-unit>
        <trans-unit id="38e68608bf1e56222d4240a30607adeed2a549b0" translate="yes" xml:space="preserve">
          <source>Layout Props#alignContent</source>
          <target state="translated">레이아웃 소품</target>
        </trans-unit>
        <trans-unit id="b70e2d28cdecaeb66b5539b0147ad0490af87695" translate="yes" xml:space="preserve">
          <source>Layout Props#alignItems</source>
          <target state="translated">레이아웃 소품 #alignItems</target>
        </trans-unit>
        <trans-unit id="3bfd49ce80962957b5baae993d83a3f7dbdb0712" translate="yes" xml:space="preserve">
          <source>Layout Props#alignSelf</source>
          <target state="translated">레이아웃 소품 #alignSelf</target>
        </trans-unit>
        <trans-unit id="a8d9f4804fd09fda3510250b9c24424bf549e27b" translate="yes" xml:space="preserve">
          <source>Layout Props#aspectRatio</source>
          <target state="translated">레이아웃 소품 #aspectRatio</target>
        </trans-unit>
        <trans-unit id="d6912ba0ba2488289d8a3044ae61e6dd5216c92d" translate="yes" xml:space="preserve">
          <source>Layout Props#borderBottomWidth</source>
          <target state="translated">레이아웃 소품 #borderBottomWidth</target>
        </trans-unit>
        <trans-unit id="b374f0aec4d1baf037613b6f01443fee2894b85d" translate="yes" xml:space="preserve">
          <source>Layout Props#borderEndWidth</source>
          <target state="translated">레이아웃 소품 #borderEndWidth</target>
        </trans-unit>
        <trans-unit id="daac083887b4d411865a638ac0e435d82b90df45" translate="yes" xml:space="preserve">
          <source>Layout Props#borderLeftWidth</source>
          <target state="translated">레이아웃 소품 #borderLeftWidth</target>
        </trans-unit>
        <trans-unit id="2df207144fa959a18061011d36fa42c1cfa60f94" translate="yes" xml:space="preserve">
          <source>Layout Props#borderRightWidth</source>
          <target state="translated">레이아웃 소품 #borderRightWidth</target>
        </trans-unit>
        <trans-unit id="276f28a3f7e609532b2a2055baf85a8e3132897a" translate="yes" xml:space="preserve">
          <source>Layout Props#borderStartWidth</source>
          <target state="translated">레이아웃 소품 #borderStartWidth</target>
        </trans-unit>
        <trans-unit id="4135cb13fad564c623e0e61fa25f127280f48cf2" translate="yes" xml:space="preserve">
          <source>Layout Props#borderTopWidth</source>
          <target state="translated">레이아웃 소품 #borderTopWidth</target>
        </trans-unit>
        <trans-unit id="9e7cec55d03d616e6417bab8e8552d0a7272ffda" translate="yes" xml:space="preserve">
          <source>Layout Props#borderWidth</source>
          <target state="translated">레이아웃 소품 #borderWidth</target>
        </trans-unit>
        <trans-unit id="f20437ee1a2438cd77d8c4317bd8d1120107d64d" translate="yes" xml:space="preserve">
          <source>Layout Props#bottom</source>
          <target state="translated">레이아웃 소품 #bottom</target>
        </trans-unit>
        <trans-unit id="b3cff8c2ee92c90dfe96644d71b2933cfcb06ab4" translate="yes" xml:space="preserve">
          <source>Layout Props#direction</source>
          <target state="translated">레이아웃 소품</target>
        </trans-unit>
        <trans-unit id="f708df23e267c5e28d64cadd68eb4bc4bbd23d02" translate="yes" xml:space="preserve">
          <source>Layout Props#display</source>
          <target state="translated">레이아웃 소품 #display</target>
        </trans-unit>
        <trans-unit id="cec42528899fdbd891408b1e2c681a27121db88f" translate="yes" xml:space="preserve">
          <source>Layout Props#end</source>
          <target state="translated">레이아웃 소품</target>
        </trans-unit>
        <trans-unit id="716ba470529f65ea7d9ae4752a3f2bf2f0c9d00c" translate="yes" xml:space="preserve">
          <source>Layout Props#flex</source>
          <target state="translated">레이아웃 소품</target>
        </trans-unit>
        <trans-unit id="7f4166ac0cbcc39fdd31745193e45a14d0772c6a" translate="yes" xml:space="preserve">
          <source>Layout Props#flexBasis</source>
          <target state="translated">레이아웃 소품</target>
        </trans-unit>
        <trans-unit id="49ad78d8a678c04188e36bdef56f8c7b3a6404f9" translate="yes" xml:space="preserve">
          <source>Layout Props#flexDirection</source>
          <target state="translated">레이아웃 소품 #flexDirection</target>
        </trans-unit>
        <trans-unit id="8487e19ba6358746ac4ccd59de91e68331c4d9b9" translate="yes" xml:space="preserve">
          <source>Layout Props#flexGrow</source>
          <target state="translated">레이아웃 소품 #flexGrow</target>
        </trans-unit>
        <trans-unit id="43e89178fc3166139e9e2934394255c621e38f64" translate="yes" xml:space="preserve">
          <source>Layout Props#flexShrink</source>
          <target state="translated">레이아웃 소품 #flexShrink</target>
        </trans-unit>
        <trans-unit id="a4900afaa94c73270a2e8cdf12b3522354ee1986" translate="yes" xml:space="preserve">
          <source>Layout Props#flexWrap</source>
          <target state="translated">레이아웃 소품</target>
        </trans-unit>
        <trans-unit id="d31e896f9e51a14eaa2c6015dfd7793255af3204" translate="yes" xml:space="preserve">
          <source>Layout Props#height</source>
          <target state="translated">레이아웃 소품</target>
        </trans-unit>
        <trans-unit id="d0c48457f77eeac2933650b62af54fdb67127f0d" translate="yes" xml:space="preserve">
          <source>Layout Props#justifyContent</source>
          <target state="translated">레이아웃 소품 #justifyContent</target>
        </trans-unit>
        <trans-unit id="334d23aff06e1cc645cce2e5901847540316a5d9" translate="yes" xml:space="preserve">
          <source>Layout Props#left</source>
          <target state="translated">레이아웃 소품 #left</target>
        </trans-unit>
        <trans-unit id="d452f039a3438217aba8d6dcd89436ff034cde2c" translate="yes" xml:space="preserve">
          <source>Layout Props#margin</source>
          <target state="translated">레이아웃 소품</target>
        </trans-unit>
        <trans-unit id="ba847a26d8d8bfa9d06a68a5b7d5a39c72a8b01a" translate="yes" xml:space="preserve">
          <source>Layout Props#marginBottom</source>
          <target state="translated">레이아웃 소품 #marginBottom</target>
        </trans-unit>
        <trans-unit id="193cf8cc22004dea3b809da7173fb6cfa16725be" translate="yes" xml:space="preserve">
          <source>Layout Props#marginEnd</source>
          <target state="translated">레이아웃 소품 #marginEnd</target>
        </trans-unit>
        <trans-unit id="c232b975a45eb78196fd88d34ee626a039ef1deb" translate="yes" xml:space="preserve">
          <source>Layout Props#marginHorizontal</source>
          <target state="translated">레이아웃 소품 #marginHorizontal</target>
        </trans-unit>
        <trans-unit id="2f0fd1776e2e04f8c04f1d109e97ee2cdc387e44" translate="yes" xml:space="preserve">
          <source>Layout Props#marginLeft</source>
          <target state="translated">레이아웃 소품 #marginLeft</target>
        </trans-unit>
        <trans-unit id="5da443f1ab0f878a2428406c730765ce2feb434e" translate="yes" xml:space="preserve">
          <source>Layout Props#marginRight</source>
          <target state="translated">레이아웃 소품 #marginRight</target>
        </trans-unit>
        <trans-unit id="9e46627b7297edce1ee4958e3ef4ecf89024ebc3" translate="yes" xml:space="preserve">
          <source>Layout Props#marginStart</source>
          <target state="translated">레이아웃 소품 #marginStart</target>
        </trans-unit>
        <trans-unit id="ae09625396e441db73943602a4fd9755d11a14e9" translate="yes" xml:space="preserve">
          <source>Layout Props#marginTop</source>
          <target state="translated">레이아웃 소품 #marginTop</target>
        </trans-unit>
        <trans-unit id="0fe08daf4ce4caf48358d2fa3c9a6359374751b5" translate="yes" xml:space="preserve">
          <source>Layout Props#marginVertical</source>
          <target state="translated">레이아웃 소품 #marginVertical</target>
        </trans-unit>
        <trans-unit id="29957f4a3fcc7904fab486a24e1595a2458d8b45" translate="yes" xml:space="preserve">
          <source>Layout Props#maxHeight</source>
          <target state="translated">레이아웃 소품 #maxHeight</target>
        </trans-unit>
        <trans-unit id="3f326672116bfd8a3db07186e7888bf020422705" translate="yes" xml:space="preserve">
          <source>Layout Props#maxWidth</source>
          <target state="translated">레이아웃 소품 #maxWidth</target>
        </trans-unit>
        <trans-unit id="82d1f8b0148385701d35b6d094e62db762680f57" translate="yes" xml:space="preserve">
          <source>Layout Props#minHeight</source>
          <target state="translated">레이아웃 소품 #minHeight</target>
        </trans-unit>
        <trans-unit id="4caf31131acbf672c35447802c94bbd107034c8e" translate="yes" xml:space="preserve">
          <source>Layout Props#minWidth</source>
          <target state="translated">레이아웃 소품 #minWidth</target>
        </trans-unit>
        <trans-unit id="9fa2ad8849bb862b4ab632a9fb63ffca505ca430" translate="yes" xml:space="preserve">
          <source>Layout Props#overflow</source>
          <target state="translated">레이아웃 소품</target>
        </trans-unit>
        <trans-unit id="1ef4fe04ddbe59484bf8d822830f20f9069956f5" translate="yes" xml:space="preserve">
          <source>Layout Props#padding</source>
          <target state="translated">레이아웃 소품</target>
        </trans-unit>
        <trans-unit id="a8517fb118b85ad951401d6ca0d8a14f618b5089" translate="yes" xml:space="preserve">
          <source>Layout Props#paddingBottom</source>
          <target state="translated">레이아웃 소품 #paddingBottom</target>
        </trans-unit>
        <trans-unit id="e1ada6197d2d0fce739e6e69bb3552c63fb55dd8" translate="yes" xml:space="preserve">
          <source>Layout Props#paddingEnd</source>
          <target state="translated">레이아웃 소품 #paddingEnd</target>
        </trans-unit>
        <trans-unit id="3143a88befa3ae33c150490d4eb7f73ea1e8c40f" translate="yes" xml:space="preserve">
          <source>Layout Props#paddingHorizontal</source>
          <target state="translated">레이아웃 소품 #paddingHorizontal</target>
        </trans-unit>
        <trans-unit id="ad99237c7cea01d54017b92042ed96f384248aa5" translate="yes" xml:space="preserve">
          <source>Layout Props#paddingLeft</source>
          <target state="translated">레이아웃 소품 #paddingLeft</target>
        </trans-unit>
        <trans-unit id="5a14da431decfe5249f549aa1cff2a10da1fc155" translate="yes" xml:space="preserve">
          <source>Layout Props#paddingRight</source>
          <target state="translated">레이아웃 소품 #paddingRight</target>
        </trans-unit>
        <trans-unit id="58d7763db27dcc40273fee6aba07f93038654953" translate="yes" xml:space="preserve">
          <source>Layout Props#paddingStart</source>
          <target state="translated">레이아웃 소품 #paddingStart</target>
        </trans-unit>
        <trans-unit id="97a9227216ef1f2bdd263b8e9926c0c2bc236c39" translate="yes" xml:space="preserve">
          <source>Layout Props#paddingTop</source>
          <target state="translated">레이아웃 소품</target>
        </trans-unit>
        <trans-unit id="f86fa12aca10bdbd2106bf3e5084096e5e9306c8" translate="yes" xml:space="preserve">
          <source>Layout Props#paddingVertical</source>
          <target state="translated">레이아웃 소품 #paddingVertical</target>
        </trans-unit>
        <trans-unit id="e0d8bbc28ffe9e5923f27caabd5d5601170f3748" translate="yes" xml:space="preserve">
          <source>Layout Props#position</source>
          <target state="translated">레이아웃 소품</target>
        </trans-unit>
        <trans-unit id="d279e1796248c538f2f0a5492ec75e7017424914" translate="yes" xml:space="preserve">
          <source>Layout Props#right</source>
          <target state="translated">레이아웃 소품</target>
        </trans-unit>
        <trans-unit id="02bc06431a731eab2b14ebeec33729229ac2911d" translate="yes" xml:space="preserve">
          <source>Layout Props#start</source>
          <target state="translated">레이아웃 소품</target>
        </trans-unit>
        <trans-unit id="177d84d553773c05a1edb0d8b6048f9bb01a02b3" translate="yes" xml:space="preserve">
          <source>Layout Props#top</source>
          <target state="translated">레이아웃 소품</target>
        </trans-unit>
        <trans-unit id="8114523435c0b3c09ce8d2ecb65cd5ac360e056d" translate="yes" xml:space="preserve">
          <source>Layout Props#width</source>
          <target state="translated">레이아웃 소품 #width</target>
        </trans-unit>
        <trans-unit id="294d2f8d65b7b9abba6935a9202e6fcca1a5d745" translate="yes" xml:space="preserve">
          <source>Layout Props#zIndex</source>
          <target state="translated">레이아웃 소품 #zIndex</target>
        </trans-unit>
        <trans-unit id="033b90f22444ece2f1065757217f80452f1d0585" translate="yes" xml:space="preserve">
          <source>Layout Props...</source>
          <target state="translated">레이아웃 소품 ...</target>
        </trans-unit>
        <trans-unit id="5678bca26c806fe01f39ecf19c32741f485f17d4" translate="yes" xml:space="preserve">
          <source>Layout computation flow</source>
          <target state="translated">레이아웃 계산 흐름</target>
        </trans-unit>
        <trans-unit id="aa6aa5d26fb80118a1177d7eabf7d9a2343d76c6" translate="yes" xml:space="preserve">
          <source>Layout of a React Native component embedded in native</source>
          <target state="translated">네이티브에 임베드 된 React Native 컴포넌트의 레이아웃</target>
        </trans-unit>
        <trans-unit id="c4eebd7328d5f0bbfcf2359d6e88ba0ad176bdc7" translate="yes" xml:space="preserve">
          <source>Layout of a native component embedded in React Native</source>
          <target state="translated">React Native에 임베드 된 기본 컴포넌트의 레이아웃</target>
        </trans-unit>
        <trans-unit id="740c1dbba7353d3244caa3c131d42dc26ba56e99" translate="yes" xml:space="preserve">
          <source>Layout with Flexbox</source>
          <target state="translated">Flexbox를 사용한 레이아웃</target>
        </trans-unit>
        <trans-unit id="bef3b046fddaeef8c3e1938f2b4cfd8cd2578187" translate="yes" xml:space="preserve">
          <source>LayoutAnimation</source>
          <target state="translated">LayoutAnimation</target>
        </trans-unit>
        <trans-unit id="60bffeeca7775d36b0da39265b82f5f7e6dc546f" translate="yes" xml:space="preserve">
          <source>LayoutAnimation only works for fire-and-forget animations (&quot;static&quot; animations) -- if it must be interruptible, you will need to use &lt;code&gt;Animated&lt;/code&gt;.</source>
          <target state="translated">LayoutAnimation은 화재 및 잊어 버린 애니메이션 ( &quot;정적&quot;애니메이션)에만 작동합니다. 인터럽트 가능해야하는 경우 &lt;code&gt;Animated&lt;/code&gt; 를 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="ef90824266d198251e74357ff6e86898488a6a34" translate="yes" xml:space="preserve">
          <source>LayoutAnimation.checkConfig()</source>
          <target state="translated">LayoutAnimation.checkConfig()</target>
        </trans-unit>
        <trans-unit id="7c33300001953a205255e14cf51eb2d4e1c09df5" translate="yes" xml:space="preserve">
          <source>LayoutAnimation.configureNext()</source>
          <target state="translated">LayoutAnimation.configureNext()</target>
        </trans-unit>
        <trans-unit id="4aa0db9f8d953665f99b555eeb6d21a4efdda010" translate="yes" xml:space="preserve">
          <source>LayoutAnimation.create()</source>
          <target state="translated">LayoutAnimation.create()</target>
        </trans-unit>
        <trans-unit id="824d76b124e6289f372e2ff6bcba91e8939343bd" translate="yes" xml:space="preserve">
          <source>Learn more</source>
          <target state="translated">더 알아보기</target>
        </trans-unit>
        <trans-unit id="9d3782d45c434ec4756ebd9c97100acd66ded41c" translate="yes" xml:space="preserve">
          <source>Learn the Basics</source>
          <target state="translated">기본 사항 배우기</target>
        </trans-unit>
        <trans-unit id="f6b8ebf6fc2dc317ab2ffb2a576a4a42a269d51e" translate="yes" xml:space="preserve">
          <source>Leave a comment saying the issue has been triaged.</source>
          <target state="translated">문제가 심사되었다는 의견을 남기십시오.</target>
        </trans-unit>
        <trans-unit id="26792865e21d084e1031e661b32d62602be4c7f5" translate="yes" xml:space="preserve">
          <source>Let's add some native code in order to start the React Native runtime and tell it to render our JS component. To do this, we're going to create an &lt;code&gt;Activity&lt;/code&gt; that creates a &lt;code&gt;ReactRootView&lt;/code&gt;, starts a React application inside it and sets it as the main content view.</source>
          <target state="translated">React Native 런타임을 시작하고 JS 컴포넌트를 렌더링하도록 알리기 위해 고유 코드를 추가해 보겠습니다. 이를 위해 &lt;code&gt;ReactRootView&lt;/code&gt; 를 생성하고 그 안에서 React 애플리케이션을 시작하고이를 메인 컨텐츠 뷰로 설정 하는 &lt;code&gt;Activity&lt;/code&gt; 를 작성합니다 .</target>
        </trans-unit>
        <trans-unit id="3ef0122ba85d31b104ef0e81010dd7aebeea42f2" translate="yes" xml:space="preserve">
          <source>Let's break down what's happening here. In the &lt;code&gt;FadeInView&lt;/code&gt; constructor, a new &lt;code&gt;Animated.Value&lt;/code&gt; called &lt;code&gt;fadeAnim&lt;/code&gt; is initialized as part of &lt;code&gt;state&lt;/code&gt;. The opacity property on the &lt;code&gt;View&lt;/code&gt; is mapped to this animated value. Behind the scenes, the numeric value is extracted and used to set opacity.</source>
          <target state="translated">여기서 무슨 일이 일어나고 있는지 봅시다. 에서 &lt;code&gt;FadeInView&lt;/code&gt; 의 생성자 새로운 &lt;code&gt;Animated.Value&lt;/code&gt; 라는 &lt;code&gt;fadeAnim&lt;/code&gt; 은 의 일환으로 초기화 &lt;code&gt;state&lt;/code&gt; . &lt;code&gt;View&lt;/code&gt; 의 불투명도 속성 이이 애니메이션 값에 매핑됩니다. 장면 뒤에서 숫자 값이 추출되어 불투명도를 설정하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b9a382d434fe049fb5745e05ca93b75219bef839" translate="yes" xml:space="preserve">
          <source>Let's do this thing.</source>
          <target state="translated">이 일을하자.</target>
        </trans-unit>
        <trans-unit id="47ab62b49c5c1e0af7b770c968a9eb6e9dc3a6ca" translate="yes" xml:space="preserve">
          <source>Let's imagine that &lt;code&gt;setNativeProps&lt;/code&gt; was not available. One way that we might implement it with that constraint is to store the opacity value in the state, then update that value whenever &lt;code&gt;onPress&lt;/code&gt; is fired:</source>
          <target state="translated">&lt;code&gt;setNativeProps&lt;/code&gt; 를 사용할 수 없다고 가정 해 봅시다 . 제약 조건으로 구현할 수있는 한 가지 방법은 상태에 불투명도 값을 저장 한 다음 &lt;code&gt;onPress&lt;/code&gt; 가 실행될 때마다 해당 값을 업데이트하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="31c999bfdb1e5c6513cf32fc9ce73e2869777a57" translate="yes" xml:space="preserve">
          <source>Let's look at an example.</source>
          <target state="translated">예를 봅시다.</target>
        </trans-unit>
        <trans-unit id="1e793074411896ba3a1c7bf261595445650b927f" translate="yes" xml:space="preserve">
          <source>Let's now set up an Android device to run our React Native projects. Go ahead and plug in your device via USB to your development machine.</source>
          <target state="translated">이제 React Native 프로젝트를 실행하도록 Android 장치를 설정하겠습니다. USB를 통해 개발 기기에 장치를 연결하십시오.</target>
        </trans-unit>
        <trans-unit id="d1cda670ea2a7c5c9630daa852b5578fc523738c" translate="yes" xml:space="preserve">
          <source>Let's say we have the same &lt;code&gt;CalendarManager&lt;/code&gt; but as a Swift class:</source>
          <target state="translated">&lt;code&gt;CalendarManager&lt;/code&gt; 는 같지만 Swift 클래스 와 같다고 가정 해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="e183d3bc3b67ea2b0830b749a9842a04e66a49df" translate="yes" xml:space="preserve">
          <source>Let's say we want to add an interactive Map to our app - might as well use &lt;a href=&quot;https://developer.apple.com/library/prerelease/mac/documentation/MapKit/Reference/MKMapView_Class/index.html&quot;&gt;&lt;code&gt;MKMapView&lt;/code&gt;&lt;/a&gt;, we just need to make it usable from JavaScript.</source>
          <target state="translated">앱에 대화 형 맵을 추가하고 싶다고 가정 해 봅시다. &lt;a href=&quot;https://developer.apple.com/library/prerelease/mac/documentation/MapKit/Reference/MKMapView_Class/index.html&quot;&gt; &lt;code&gt;MKMapView&lt;/code&gt; 를&lt;/a&gt; 사용할 수도 있고 JavaScript에서 사용할 수 있도록해야합니다.</target>
        </trans-unit>
        <trans-unit id="effbc95316004ace21e83c4f469cdfe7d7736e6b" translate="yes" xml:space="preserve">
          <source>Let's see all of these in action:</source>
          <target state="translated">이 모든 것들이 실제로 작동하는 것을 보자.</target>
        </trans-unit>
        <trans-unit id="b699cc89dcb3ffd15b5d60e04107b04f6b41c95f" translate="yes" xml:space="preserve">
          <source>Let's start by removing &lt;code&gt;READ_PHONE_STATE&lt;/code&gt;, &lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt;, and &lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt; from both production and debug APKs, as it is not required in either. These storage permissions are still not needed if &lt;code&gt;AsyncStorage&lt;/code&gt; module is in use, so it is safe to remove from both production and debug.</source>
          <target state="translated">프로덕션 및 디버그 APK 모두에서 필요하지 않으므로 &lt;code&gt;READ_PHONE_STATE&lt;/code&gt; , &lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt; 및 &lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt; 를 제거하여 시작하겠습니다 . &lt;code&gt;AsyncStorage&lt;/code&gt; 모듈을 사용중인 경우 이러한 스토리지 권한이 여전히 필요하지 않으므로 프로덕션 및 디버그에서 모두 제거해도 안전합니다.</target>
        </trans-unit>
        <trans-unit id="1aeef6a70baee7da6d57aa3b0a173922384cf77f" translate="yes" xml:space="preserve">
          <source>Lets the user select text, to use the native copy and paste functionality.</source>
          <target state="translated">기본 복사 및 붙여 넣기 기능을 사용하기 위해 사용자가 텍스트를 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">License</target>
        </trans-unit>
        <trans-unit id="40721cc170a6bfccd149edbfe1dc276de96ccd33" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution 4.0 International Public License.</source>
          <target state="translated">Creative Commons Attribution 4.0 International Public License에 따라 라이센스가 부여됩니다.</target>
        </trans-unit>
        <trans-unit id="016f46df0876a169cd69a076db472e106690ad5a" translate="yes" xml:space="preserve">
          <source>Lifecycle alternative:</source>
          <target state="translated">수명주기 대안 :</target>
        </trans-unit>
        <trans-unit id="718c33193610e8e004d5bafa3c0af2ae9de225c6" translate="yes" xml:space="preserve">
          <source>Lifecycle example:</source>
          <target state="translated">수명주기 예 :</target>
        </trans-unit>
        <trans-unit id="51c8d99c07be8fef2580bdc93253f5c38cafd280" translate="yes" xml:space="preserve">
          <source>Light background, dark texts and icons (requires API&amp;gt;=23 on Android)</source>
          <target state="translated">밝은 배경, 어두운 텍스트 및 아이콘 (Android에서 API&amp;gt; = 23 필요)</target>
        </trans-unit>
        <trans-unit id="02a020166c902190507a14f016c71915dd76af48" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;FlatList&lt;/code&gt;, but for sectioned lists.</source>
          <target state="translated">&lt;code&gt;FlatList&lt;/code&gt; 와 비슷 하지만 섹션화 된 목록 용입니다.</target>
        </trans-unit>
        <trans-unit id="aba548faac6f0545ce6299df7cb4c8205a4cb83e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;measure()&lt;/code&gt;, but measures the view relative an ancestor, specified as &lt;code&gt;relativeToNativeNode&lt;/code&gt;. This means that the returned x, y are relative to the origin x, y of the ancestor view.</source>
          <target state="translated">추천 &lt;code&gt;measure()&lt;/code&gt; 하지만 대책으로서 지정된 뷰 대하여 상위, &lt;code&gt;relativeToNativeNode&lt;/code&gt; . 이는 반환 된 x, y가 상위 뷰의 원점 x, y에 상대적임을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="0bedbcd918ad63ba0bd14366312d1fa169e514d9" translate="yes" xml:space="preserve">
          <source>Like other navigation systems, &lt;code&gt;NavigatorIOS&lt;/code&gt; uses routes to represent screens, with some important differences. The actual component that will be rendered can be specified using the &lt;code&gt;component&lt;/code&gt; key in the route, and any props that should be passed to this component can be specified in &lt;code&gt;passProps&lt;/code&gt;. A &quot;navigator&quot; object is automatically passed as a prop to the component, allowing you to call &lt;code&gt;push&lt;/code&gt; and &lt;code&gt;pop&lt;/code&gt; as needed.</source>
          <target state="translated">다른 탐색 시스템과 마찬가지로 &lt;code&gt;NavigatorIOS&lt;/code&gt; 는 경로를 사용하여 화면을 나타내며 몇 가지 중요한 차이점이 있습니다. 렌더링 될 실제 컴포넌트 는 라우트 의 &lt;code&gt;component&lt;/code&gt; 키를 사용하여 지정할 수 &lt;code&gt;passProps&lt;/code&gt; 컴포넌트에 전달되어야하는 모든 소품은 passProps에 지정할 수 있습니다 . &quot;네비게이터&quot;개체는 구성 요소에 소품으로 자동 전달 되어 필요에 따라 &lt;code&gt;push&lt;/code&gt; 및 &lt;code&gt;pop&lt;/code&gt; 을 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2a54c412631af203d31e6c5d114af98b8a42ee9b" translate="yes" xml:space="preserve">
          <source>Like the native module guide, this too is a more advanced guide that assumes you are somewhat familiar with Android SDK programming. This guide will show you how to build a native UI component, walking you through the implementation of a subset of the existing &lt;code&gt;ImageView&lt;/code&gt; component available in the core React Native library.</source>
          <target state="translated">기본 모듈 안내서와 마찬가지로이 안내서 역시 Android SDK 프로그래밍에 어느 정도 익숙하다고 가정하는 고급 안내서입니다. 이 안내서는 기본 React Native 라이브러리에서 사용 가능한 기존 &lt;code&gt;ImageView&lt;/code&gt; 구성 요소 의 서브 세트 구현을 안내하는 기본 UI 구성 요소를 빌드하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="5f6e49edea94c28ebffddc1b49c032894e4b199c" translate="yes" xml:space="preserve">
          <source>Like the native module guide, this too is a more advanced guide that assumes you are somewhat familiar with iOS programming. This guide will show you how to build a native UI component, walking you through the implementation of a subset of the existing &lt;code&gt;MapView&lt;/code&gt; component available in the core React Native library.</source>
          <target state="translated">기본 모듈 안내서와 마찬가지로이 안내서 역시 iOS 프로그래밍에 어느 정도 익숙하다고 가정하는 고급 안내서입니다. 이 안내서는 기본 React Native 라이브러리에서 사용 가능한 기존 &lt;code&gt;MapView&lt;/code&gt; 구성 요소 의 서브 세트 구현을 안내하는 기본 UI 구성 요소를 빌드하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="e1e7993a31ac09827a9d8c84017f1da27f598b3d" translate="yes" xml:space="preserve">
          <source>Limited Style Inheritance</source>
          <target state="translated">제한된 스타일 상속</target>
        </trans-unit>
        <trans-unit id="3ae1d3043f07f2f18fbb48af033023b1eafb7fc6" translate="yes" xml:space="preserve">
          <source>Limits of properties</source>
          <target state="translated">속성의 한계</target>
        </trans-unit>
        <trans-unit id="e39d5682b853690e7fea28ee928a8d7f3e97e954" translate="yes" xml:space="preserve">
          <source>Limits the maximum number of characters that can be entered. Use this instead of implementing the logic in JS to avoid flicker.</source>
          <target state="translated">입력 할 수있는 최대 문자 수를 제한합니다. 깜박임을 피하기 위해 JS에서 로직을 구현하는 대신 이것을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="61bbbe4c359b86828c0a8b7ade79152dc01e8eeb" translate="yes" xml:space="preserve">
          <source>Link your native dependencies:</source>
          <target state="translated">기본 종속성을 연결하십시오.</target>
        </trans-unit>
        <trans-unit id="a5f54e0f2d31735fc8356d4c643062d7468cc599" translate="yes" xml:space="preserve">
          <source>Linking</source>
          <target state="translated">Linking</target>
        </trans-unit>
        <trans-unit id="9e700acbf3051d037aa53517b87ce2f00dd20348" translate="yes" xml:space="preserve">
          <source>Linking Libraries</source>
          <target state="translated">라이브러리 연결</target>
        </trans-unit>
        <trans-unit id="901139f90516a4df774f868c364bd6a9a565fbd2" translate="yes" xml:space="preserve">
          <source>Linking.addEventListener()</source>
          <target state="translated">Linking.addEventListener()</target>
        </trans-unit>
        <trans-unit id="353e1d60bbecc26fe1c6fd59ef201c0931cf9bd3" translate="yes" xml:space="preserve">
          <source>Linking.canOpenURL()</source>
          <target state="translated">Linking.canOpenURL()</target>
        </trans-unit>
        <trans-unit id="9868a7fc3975af6bf935a6e2be3b4cbb96325468" translate="yes" xml:space="preserve">
          <source>Linking.constructor()</source>
          <target state="translated">Linking.constructor()</target>
        </trans-unit>
        <trans-unit id="11ee97c143b571d5731a921f9ee1db9db8140ad8" translate="yes" xml:space="preserve">
          <source>Linking.getInitialURL()</source>
          <target state="translated">Linking.getInitialURL()</target>
        </trans-unit>
        <trans-unit id="b414adad8bb96c142262bddd147b4e29265585cf" translate="yes" xml:space="preserve">
          <source>Linking.openURL()</source>
          <target state="translated">Linking.openURL()</target>
        </trans-unit>
        <trans-unit id="abca3a99341b96d8d288c507320f4a61aa45dd94" translate="yes" xml:space="preserve">
          <source>Linking.removeEventListener()</source>
          <target state="translated">Linking.removeEventListener()</target>
        </trans-unit>
        <trans-unit id="7e5260f57f81a2d53b3c28279032a8c98fa79dcb" translate="yes" xml:space="preserve">
          <source>Linux (64-bit) - &lt;a href=&quot;http://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip&quot;&gt;http://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip&lt;/a&gt;</source>
          <target state="translated">리눅스 (64 비트) &lt;a href=&quot;http://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip&quot;&gt;-http&lt;/a&gt; : //dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip</target>
        </trans-unit>
        <trans-unit id="5cc0edff424b271637253080d0d8e253f99dd20f" translate="yes" xml:space="preserve">
          <source>Linux (64-bit) - &lt;a href=&quot;https://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip&quot;&gt;http://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d28ace15581d25a0bc2e3781306393967a803c6" translate="yes" xml:space="preserve">
          <source>List Views</source>
          <target state="translated">리스트 뷰</target>
        </trans-unit>
        <trans-unit id="d7d2509e897132e6581d8230281a406f2c4e7c8a" translate="yes" xml:space="preserve">
          <source>List footer support.</source>
          <target state="translated">바닥 글 지원을 나열하십시오.</target>
        </trans-unit>
        <trans-unit id="77004090314048c76cb78a16b9043e3dcfdc111f" translate="yes" xml:space="preserve">
          <source>List header support.</source>
          <target state="translated">헤더 지원 목록.</target>
        </trans-unit>
        <trans-unit id="659ce848c84b25acf79175005272d0b877f4a138" translate="yes" xml:space="preserve">
          <source>List of &lt;code&gt;ViewabilityConfig&lt;/code&gt;/&lt;code&gt;onViewableItemsChanged&lt;/code&gt; pairs. A specific &lt;code&gt;onViewableItemsChanged&lt;/code&gt; will be called when its corresponding &lt;code&gt;ViewabilityConfig&lt;/code&gt;'s conditions are met. See &lt;code&gt;ViewabilityHelper.js&lt;/code&gt; for flow type and further documentation.</source>
          <target state="translated">목록 &lt;code&gt;ViewabilityConfig&lt;/code&gt; /는 &lt;code&gt;onViewableItemsChanged&lt;/code&gt; 쌍. 특정 &lt;code&gt;onViewableItemsChanged&lt;/code&gt; 은 그 해당 때 호출 될 &lt;code&gt;ViewabilityConfig&lt;/code&gt; 의 조건이 충족된다. 흐름 유형 및 추가 설명서는 &lt;code&gt;ViewabilityHelper.js&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="191bd84d0d5eb402a06731ce858ae6642efd3340" translate="yes" xml:space="preserve">
          <source>List of image URLs to check the cache for.</source>
          <target state="translated">캐시를 확인할 이미지 URL 목록입니다.</target>
        </trans-unit>
        <trans-unit id="3d473f5bba4918d300464f44ff1a8ec1aa1c14e8" translate="yes" xml:space="preserve">
          <source>List of origin strings to allow being navigated to. The strings allow wildcards and get matched against &lt;em&gt;just&lt;/em&gt; the origin (not the full URL). If the user taps to navigate to a new page but the new page is not in this whitelist, the URL will be handled by the OS. The default whitelisted origins are &quot;http://&lt;em&gt;&quot; and &quot;https://&lt;/em&gt;&quot;.</source>
          <target state="translated">탐색 할 수있는 원본 문자열 목록. 문자열은 와일드 카드를 허용 하며 전체 URL이 아닌 원본 &lt;em&gt;에만&lt;/em&gt; 일치 합니다. 사용자가 탭하여 새 페이지로 이동했지만 새 페이지가이 화이트리스트에없는 경우 URL은 OS에서 처리합니다. 허용 된 기본 출처는 &quot;http : // &lt;em&gt;&quot;및 &quot;https : //&lt;/em&gt; &quot;입니다.</target>
        </trans-unit>
        <trans-unit id="192847b15c33bd4913e8c554131ed60b7aeaed65" translate="yes" xml:space="preserve">
          <source>ListView</source>
          <target state="translated">ListView</target>
        </trans-unit>
        <trans-unit id="9ece0f85242cdc457a048818285819efd99192d2" translate="yes" xml:space="preserve">
          <source>ListView - A core component designed for efficient display of vertically scrolling lists of changing data. The minimal API is to create a &lt;a href=&quot;listviewdatasource&quot;&gt;&lt;code&gt;ListView.DataSource&lt;/code&gt;&lt;/a&gt;, populate it with a simple array of data blobs, and instantiate a &lt;code&gt;ListView&lt;/code&gt; component with that data source and a &lt;code&gt;renderRow&lt;/code&gt; callback which takes a blob from the data array and returns a renderable component.</source>
          <target state="translated">ListView-변경되는 데이터의 세로 스크롤 목록을 효율적으로 표시하도록 설계된 핵심 구성 요소입니다. 최소 API는 &lt;a href=&quot;listviewdatasource&quot;&gt; &lt;code&gt;ListView.DataSource&lt;/code&gt; &lt;/a&gt; 를 생성하고 이를 간단한 데이터 블롭 배열로 채우고 해당 데이터 소스와 데이터 배열에서 블롭을 가져오고 렌더링 가능한 컴포넌트를 리턴하는 &lt;code&gt;renderRow&lt;/code&gt; 콜백 으로 &lt;code&gt;ListView&lt;/code&gt; 컴포넌트를 인스턴스화하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="58a8497c6a245b994017f281b6a43a1935d35f60" translate="yes" xml:space="preserve">
          <source>ListView also supports more advanced features, including sections with sticky section headers, header and footer support, callbacks on reaching the end of the available data (&lt;code&gt;onEndReached&lt;/code&gt;) and on the set of rows that are visible in the device viewport change (&lt;code&gt;onChangeVisibleRows&lt;/code&gt;), and several performance optimizations.</source>
          <target state="translated">또한 ListView는 고정 섹션 헤더가있는 섹션, 헤더 및 바닥 글 지원, 사용 가능한 데이터의 끝에 도달 할 때의 콜백 ( &lt;code&gt;onEndReached&lt;/code&gt; ) 및 장치 뷰포트 변경 ( &lt;code&gt;onChangeVisibleRows&lt;/code&gt; )에 표시되는 행 집합에 대한 콜백 및 몇 가지 성능 최적화.</target>
        </trans-unit>
        <trans-unit id="df96466d0c27eff9229da86e144c2e1321322b57" translate="yes" xml:space="preserve">
          <source>ListView#dataSource</source>
          <target state="translated">ListView#dataSource</target>
        </trans-unit>
        <trans-unit id="03aca2595702fced90e7e682136665d5fb075aad" translate="yes" xml:space="preserve">
          <source>ListView#enableEmptySections</source>
          <target state="translated">ListView#enableEmptySections</target>
        </trans-unit>
        <trans-unit id="da8e54225bd8f7fce08a730b5a1df41b810622e6" translate="yes" xml:space="preserve">
          <source>ListView#initialListSize</source>
          <target state="translated">ListView#initialListSize</target>
        </trans-unit>
        <trans-unit id="60de8cb9e9273f53794d6d716179c8df6c4ec25e" translate="yes" xml:space="preserve">
          <source>ListView#onChangeVisibleRows</source>
          <target state="translated">ListView#onChangeVisibleRows</target>
        </trans-unit>
        <trans-unit id="c2b3bb8a640385fe1f91ddcb5f129fe3ee4d8828" translate="yes" xml:space="preserve">
          <source>ListView#onEndReached</source>
          <target state="translated">ListView#onEndReached</target>
        </trans-unit>
        <trans-unit id="25ed4fea6955781b29f413c3e1a58c7f46597cee" translate="yes" xml:space="preserve">
          <source>ListView#onEndReachedThreshold</source>
          <target state="translated">ListView#onEndReachedThreshold</target>
        </trans-unit>
        <trans-unit id="d9f912d31aaddc422ad901c0d0d5710680851d8d" translate="yes" xml:space="preserve">
          <source>ListView#pageSize</source>
          <target state="translated">ListView#pageSize</target>
        </trans-unit>
        <trans-unit id="77279d76fd0a47c0c697ed7130600562b60b7d61" translate="yes" xml:space="preserve">
          <source>ListView#removeClippedSubviews</source>
          <target state="translated">ListView#removeClippedSubviews</target>
        </trans-unit>
        <trans-unit id="f1d00fc4b1cfb1f2292169ad03398c508ea1cd36" translate="yes" xml:space="preserve">
          <source>ListView#renderFooter</source>
          <target state="translated">ListView#renderFooter</target>
        </trans-unit>
        <trans-unit id="c36ea5a36ac36c37d0f7e010123733b39a41c68f" translate="yes" xml:space="preserve">
          <source>ListView#renderHeader</source>
          <target state="translated">ListView#renderHeader</target>
        </trans-unit>
        <trans-unit id="a9da118d5fb75484574b9fa3fe82ee9c675ca1ba" translate="yes" xml:space="preserve">
          <source>ListView#renderRow</source>
          <target state="translated">ListView#renderRow</target>
        </trans-unit>
        <trans-unit id="f95f2cdf37c35c0de9ba21fa196a7889c378fcd2" translate="yes" xml:space="preserve">
          <source>ListView#renderScrollComponent</source>
          <target state="translated">ListView#renderScrollComponent</target>
        </trans-unit>
        <trans-unit id="6c7a54f6bbaf2c1c6c55668b44770a55c42a804e" translate="yes" xml:space="preserve">
          <source>ListView#renderSectionHeader</source>
          <target state="translated">ListView#renderSectionHeader</target>
        </trans-unit>
        <trans-unit id="cfdfa8bd4fe36d94d5e519b2cdad8b777c1ab425" translate="yes" xml:space="preserve">
          <source>ListView#renderSeparator</source>
          <target state="translated">ListView#renderSeparator</target>
        </trans-unit>
        <trans-unit id="8cf345da9b1e72dfb82496b72f7d68216f3dc40d" translate="yes" xml:space="preserve">
          <source>ListView#scrollRenderAheadDistance</source>
          <target state="translated">ListView#scrollRenderAheadDistance</target>
        </trans-unit>
        <trans-unit id="c53d7357196cbaaced5b1f4d0937a2fe4219a0b2" translate="yes" xml:space="preserve">
          <source>ListView#stickyHeaderIndices</source>
          <target state="translated">ListView#stickyHeaderIndices</target>
        </trans-unit>
        <trans-unit id="c801cb3b66241041c4e9b1b58c60343bb8fe3a5a" translate="yes" xml:space="preserve">
          <source>ListView#stickySectionHeadersEnabled</source>
          <target state="translated">ListView#stickySectionHeadersEnabled</target>
        </trans-unit>
        <trans-unit id="d3318afa832bbe584d7ea31ef96bab59f984af00" translate="yes" xml:space="preserve">
          <source>ListView.flashScrollIndicators()</source>
          <target state="translated">ListView.flashScrollIndicators()</target>
        </trans-unit>
        <trans-unit id="ebdd3fffd3585d7bda989dd0e6f6aadb93c79c5a" translate="yes" xml:space="preserve">
          <source>ListView.getMetrics()</source>
          <target state="translated">ListView.getMetrics()</target>
        </trans-unit>
        <trans-unit id="718ac07b5c7cc38d53151a1c0e360237b494b597" translate="yes" xml:space="preserve">
          <source>ListView.scrollTo()</source>
          <target state="translated">ListView.scrollTo()</target>
        </trans-unit>
        <trans-unit id="a4f096f0565a73db66a6cf5d988fc575b295fde7" translate="yes" xml:space="preserve">
          <source>ListView.scrollToEnd()</source>
          <target state="translated">ListView.scrollToEnd()</target>
        </trans-unit>
        <trans-unit id="e75271ee6f73e85b8fa699a941dc0c31d11dc261" translate="yes" xml:space="preserve">
          <source>ListViewDataSource</source>
          <target state="translated">ListViewDataSource</target>
        </trans-unit>
        <trans-unit id="b1bf1d85896db174a538b255e2c31a536708deab" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.cloneWithRows()</source>
          <target state="translated">ListViewDataSource.cloneWithRows()</target>
        </trans-unit>
        <trans-unit id="79086411adddcef34209110384af91543e259c8e" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.cloneWithRowsAndSections()</source>
          <target state="translated">ListViewDataSource.cloneWithRowsAndSections()</target>
        </trans-unit>
        <trans-unit id="b43fa99e5eef7bea8c7e18aa4256a5bb151e1d07" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.constructor()</source>
          <target state="translated">ListViewDataSource.constructor()</target>
        </trans-unit>
        <trans-unit id="2a8250e28989bd9332a8999550ef4ecea30b3136" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.getRowAndSectionCount()</source>
          <target state="translated">ListViewDataSource.getRowAndSectionCount()</target>
        </trans-unit>
        <trans-unit id="0e7008fd03757bdbd58cb8a919745f5b77ef46c4" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.getRowCount()</source>
          <target state="translated">ListViewDataSource.getRowCount()</target>
        </trans-unit>
        <trans-unit id="80f4d8b76abdb31851570360f70cd9ea0bb00506" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.getRowData()</source>
          <target state="translated">ListViewDataSource.getRowData()</target>
        </trans-unit>
        <trans-unit id="e8536b52fe13e7295cb44f8eac37086351a6d3ca" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.getRowIDForFlatIndex()</source>
          <target state="translated">ListViewDataSource.getRowIDForFlatIndex()</target>
        </trans-unit>
        <trans-unit id="b734f66b5aabcaaaa34df2bced7bf309a871f4f2" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.getSectionHeaderData()</source>
          <target state="translated">ListViewDataSource.getSectionHeaderData()</target>
        </trans-unit>
        <trans-unit id="5894ff6110f6f5ca47b510bf78f582915646e69a" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.getSectionIDForFlatIndex()</source>
          <target state="translated">ListViewDataSource.getSectionIDForFlatIndex()</target>
        </trans-unit>
        <trans-unit id="934b6a64c698103485c6cf740beed0ed046377c2" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.getSectionLengths()</source>
          <target state="translated">ListViewDataSource.getSectionLengths()</target>
        </trans-unit>
        <trans-unit id="dc86dbff9c6127b15c793be4517b5fb31c0fd422" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.rowShouldUpdate()</source>
          <target state="translated">ListViewDataSource.rowShouldUpdate()</target>
        </trans-unit>
        <trans-unit id="ee79491d4f8e0036f454b22ccfe4f94265ca4acf" translate="yes" xml:space="preserve">
          <source>ListViewDataSource.sectionHeaderShouldUpdate()</source>
          <target state="translated">ListViewDataSource.sectionHeaderShouldUpdate()</target>
        </trans-unit>
        <trans-unit id="bb332e733d9a77fa919f0edecdb64443db468fc0" translate="yes" xml:space="preserve">
          <source>Listener function.</source>
          <target state="translated">리스너 기능.</target>
        </trans-unit>
        <trans-unit id="c5ae4308fe0cfd658f0ea30fbe84a6cfaf6b3f32" translate="yes" xml:space="preserve">
          <source>Listener.</source>
          <target state="translated">Listener.</target>
        </trans-unit>
        <trans-unit id="9c8ca35e67db77549f3b066992c42dbf3d8a082e" translate="yes" xml:space="preserve">
          <source>Listening to LifeCycle events</source>
          <target state="translated">LifeCycle 이벤트 듣기</target>
        </trans-unit>
        <trans-unit id="e32b41aae163506aaaaff9c7d86b3e53cb6de4e1" translate="yes" xml:space="preserve">
          <source>Listening to the activity's LifeCycle events such as &lt;code&gt;onResume&lt;/code&gt;, &lt;code&gt;onPause&lt;/code&gt; etc. is very similar to how we implemented &lt;code&gt;ActivityEventListener&lt;/code&gt;. The module must implement &lt;code&gt;LifecycleEventListener&lt;/code&gt;. Then, you need to register a listener in the module's constructor,</source>
          <target state="translated">&lt;code&gt;onResume&lt;/code&gt; , &lt;code&gt;onPause&lt;/code&gt; 등과 같은 활동의 LifeCycle 이벤트를 듣는 것은 &lt;code&gt;ActivityEventListener&lt;/code&gt; 구현 방법과 매우 유사합니다 . 모듈은 &lt;code&gt;LifecycleEventListener&lt;/code&gt; 를 구현해야합니다 . 그런 다음 모듈의 생성자에 리스너를 등록해야합니다.</target>
        </trans-unit>
        <trans-unit id="0b69793bfae9ee38fefc5d19d22cd9e00b94e9fb" translate="yes" xml:space="preserve">
          <source>Little red bubble that sits at the top right of the icon.</source>
          <target state="translated">아이콘의 오른쪽 상단에있는 작은 빨간 거품.</target>
        </trans-unit>
        <trans-unit id="fa4e69b132cca05bea84f2ab26fd32de026d5d50" translate="yes" xml:space="preserve">
          <source>Loading JavaScript</source>
          <target state="translated">자바 스크립트로드</target>
        </trans-unit>
        <trans-unit id="f3dc4e9113c9120bc8c3fdba9b7465fd800c2cd8" translate="yes" xml:space="preserve">
          <source>Loading images:</source>
          <target state="translated">이미지 로딩 :</target>
        </trans-unit>
        <trans-unit id="01830da4103d3a0788c459aba26132ac342b6ecd" translate="yes" xml:space="preserve">
          <source>Loads static html or a uri (with optional headers) in the WebView.</source>
          <target state="translated">WebView에서 정적 HTML 또는 URI (선택적 헤더 포함)를로드합니다.</target>
        </trans-unit>
        <trans-unit id="394e02908822353cc2e775c2139ca7a61ea1a76b" translate="yes" xml:space="preserve">
          <source>Local Filesystem Images</source>
          <target state="translated">로컬 파일 시스템 이미지</target>
        </trans-unit>
        <trans-unit id="6aa07033dd27063d423e4d80ff372d2642771fe3" translate="yes" xml:space="preserve">
          <source>Login and password alert</source>
          <target state="translated">로그인 및 비밀번호 알림</target>
        </trans-unit>
        <trans-unit id="acd16c47ee3dbe2d488ef616e9bbab652657a3b5" translate="yes" xml:space="preserve">
          <source>Look through the &lt;a href=&quot;https://github.com/facebook/react-native/issues&quot;&gt;open issues&lt;/a&gt;. Provide workarounds, ask for clarification, or suggest labels. Help &lt;a href=&quot;http://facebook.github.io/react-native/docs/contributing.html#triaging-issues-and-pull-requests&quot;&gt;triage issues&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/facebook/react-native/issues&quot;&gt;열린 문제를&lt;/a&gt; 살펴보십시오 . 해결 방법을 제공하거나 설명을 요청하거나 레이블을 제안하십시오. 도움말 &lt;a href=&quot;http://facebook.github.io/react-native/docs/contributing.html#triaging-issues-and-pull-requests&quot;&gt;선별 문제&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="29f673a33934dd0c8ca9b5359d3747bea08463ba" translate="yes" xml:space="preserve">
          <source>Look through the &lt;a href=&quot;https://github.com/facebook/react-native/issues&quot;&gt;open issues&lt;/a&gt;. Provide workarounds, ask for clarification, or suggest labels. Help &lt;a href=&quot;https://facebook.github.io/react-native/docs/contributing.html#triaging-issues-and-pull-requests&quot;&gt;triage issues&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8142dd8b8f2a0362aa13c89e60f3f5f6ea49f073" translate="yes" xml:space="preserve">
          <source>Looking for a pre-built component? Check &lt;a href=&quot;https://js.coach/react-native&quot;&gt;JS.coach&lt;/a&gt;.</source>
          <target state="translated">사전 제작 된 부품을 찾고 계십니까? &lt;a href=&quot;https://js.coach/react-native&quot;&gt;JS.coach를&lt;/a&gt; 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="1b1955cdec93ea7438710bb40998b2a5567fd5bc" translate="yes" xml:space="preserve">
          <source>Loops a given animation continuously, so that each time it reaches the end, it resets and begins again from the start. Can specify number of times to loop using the key &lt;code&gt;iterations&lt;/code&gt; in the config. Will loop without blocking the UI thread if the child animation is set to &lt;code&gt;useNativeDriver: true&lt;/code&gt;. In addition, loops can prevent &lt;code&gt;VirtualizedList&lt;/code&gt;-based components from rendering more rows while the animation is running. You can pass &lt;code&gt;isInteraction: false&lt;/code&gt; in the child animation config to fix this.</source>
          <target state="translated">주어진 애니메이션을 계속 반복하여 애니메이션이 끝에 도달 할 때마다 재설정되고 처음부터 다시 시작됩니다. 구성에서 키 &lt;code&gt;iterations&lt;/code&gt; 을 사용하여 반복 횟수를 지정할 수 있습니다. 자식 애니메이션이 &lt;code&gt;useNativeDriver: true&lt;/code&gt; 설정된 경우 UI 스레드를 차단하지 않고 반복됩니다 . 또한 루프 를 사용하면 애니메이션이 실행되는 동안 &lt;code&gt;VirtualizedList&lt;/code&gt; 기반 구성 요소가 더 많은 행을 렌더링 하지 못할 수 있습니다 . 하위 애니메이션 구성에서 &lt;code&gt;isInteraction: false&lt;/code&gt; 를 전달 하여이 문제를 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb33d52a2a99868ebe9491c1227e9634142be77d" translate="yes" xml:space="preserve">
          <source>Mac OS (64-bit) - &lt;a href=&quot;http://dl.google.com/android/repository/android-ndk-r10e-darwin-x86_64.zip&quot;&gt;http://dl.google.com/android/repository/android-ndk-r10e-darwin-x86_64.zip&lt;/a&gt;</source>
          <target state="translated">Mac OS (64 비트) &lt;a href=&quot;http://dl.google.com/android/repository/android-ndk-r10e-darwin-x86_64.zip&quot;&gt;-http&lt;/a&gt; : //dl.google.com/android/repository/android-ndk-r10e-darwin-x86_64.zip</target>
        </trans-unit>
        <trans-unit id="45489d99482371e7c06c28f3222e7072212c8061" translate="yes" xml:space="preserve">
          <source>Mac OS (64-bit) - &lt;a href=&quot;https://dl.google.com/android/repository/android-ndk-r10e-darwin-x86_64.zip&quot;&gt;http://dl.google.com/android/repository/android-ndk-r10e-darwin-x86_64.zip&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e785076adcb8312ef07a90a78ceb2e72f80def1" translate="yes" xml:space="preserve">
          <source>Make sure all &lt;strong&gt;tests pass&lt;/strong&gt; on &lt;a href=&quot;http://circleci.com/gh/facebook/react-native&quot;&gt;Circle CI&lt;/a&gt;. PRs that break tests are unlikely to be merged. Learn more about &lt;a href=&quot;testing&quot;&gt;testing your changes here&lt;/a&gt;.</source>
          <target state="translated">모든 &lt;strong&gt;테스트&lt;/strong&gt; 가 &lt;a href=&quot;http://circleci.com/gh/facebook/react-native&quot;&gt;Circle CI를 &lt;/a&gt;&lt;strong&gt;통과&lt;/strong&gt; 하는지 확인하십시오 . 테스트를 중단 한 PR은 병합되지 않을 것입니다. &lt;a href=&quot;testing&quot;&gt;변경 사항 테스트에&lt;/a&gt; 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="172055a25c7db6d192a6956a1edf6f115c9aec20" translate="yes" xml:space="preserve">
          <source>Make sure all &lt;strong&gt;tests pass&lt;/strong&gt; on &lt;a href=&quot;https://circleci.com/gh/facebook/react-native&quot;&gt;Circle CI&lt;/a&gt;. PRs that break tests are unlikely to be merged. Learn more about &lt;a href=&quot;testing&quot;&gt;testing your changes here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="559cc977c35aa317f0dd6eabe16d1c6dad7c92cb" translate="yes" xml:space="preserve">
          <source>Make sure that the build script detected the IP address of your machine correctly (e.g. 10.0.1.123).</source>
          <target state="translated">빌드 스크립트가 머신의 IP 주소를 올바르게 감지했는지 확인하십시오 (예 : 10.0.1.123).</target>
        </trans-unit>
        <trans-unit id="4e62e1fd5e0fff74dd4a78102620d745cf89092a" translate="yes" xml:space="preserve">
          <source>Make sure that the dropdown in the top left corner of the Chrome console says &lt;code&gt;debuggerWorker.js&lt;/code&gt;. &lt;strong&gt;This step is essential.&lt;/strong&gt;</source>
          <target state="translated">Chrome 콘솔의 왼쪽 상단에 드롭 다운에 &lt;code&gt;debuggerWorker.js&lt;/code&gt; 라고 표시되어 있는지 확인합니다 . &lt;strong&gt;이 단계는 필수적입니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ffb08ede0a48da908ee7c2b16d1e1ba94a554f08" translate="yes" xml:space="preserve">
          <source>Make sure that the path is correct! You shouldn&amp;rsquo;t run into any &amp;ldquo;Failed to resolve: com.facebook.react:react-native:0.x.x&quot; errors after running Gradle sync in Android Studio.</source>
          <target state="translated">경로가 올바른지 확인하십시오! Android Studio에서 Gradle sync를 실행 한 후 &quot;해결 실패 : com.facebook.react : react-native : 0.xx&quot;오류가 발생하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="5fa0c9c32b43464c2f4ed67719b6325d01f1ec36" translate="yes" xml:space="preserve">
          <source>Make sure that you replace &lt;code&gt;22b8&lt;/code&gt; with the identifier you get in the above command.</source>
          <target state="translated">&lt;code&gt;22b8&lt;/code&gt; 을 위 명령에서 얻은 식별자로 바꾸십시오 .</target>
        </trans-unit>
        <trans-unit id="c6bab4ecee577a35e897d1185656a89fc5364d64" translate="yes" xml:space="preserve">
          <source>Make sure the return button focuses the next field or submits the form</source>
          <target state="translated">리턴 단추가 다음 필드에 초점을 맞추거나 양식을 제출하는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="09a7f654db471bc8469e5bdeaed7e71487161080" translate="yes" xml:space="preserve">
          <source>Make sure to use &lt;code&gt;RNTMap&lt;/code&gt; here. We want to require the manager here, which will expose the view of our manager for use in Javascript.</source>
          <target state="translated">여기서 &lt;code&gt;RNTMap&lt;/code&gt; 을 사용 하십시오. 여기에 관리자가 필요합니다. 여기에는 Javascript에서 사용할 관리자의보기가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="b7f8d148e72ff8defe802ba89c8b08a7f897e923" translate="yes" xml:space="preserve">
          <source>Make sure you have the following installed:</source>
          <target state="translated">다음이 설치되어 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="978d74a8daba86fc298a756267a051c48a004343" translate="yes" xml:space="preserve">
          <source>Make sure your code lints (&lt;code&gt;npm run lint&lt;/code&gt;).</source>
          <target state="translated">코드 보푸라기 ( &lt;code&gt;npm run lint&lt;/code&gt; )를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="95f4d7642b5b2a3110120fa0a0abab807b2aad02" translate="yes" xml:space="preserve">
          <source>Make sure your laptop and your phone are on the &lt;strong&gt;same&lt;/strong&gt; Wi-Fi network.</source>
          <target state="translated">랩톱과 휴대 전화가 &lt;strong&gt;동일한&lt;/strong&gt; Wi-Fi 네트워크 에 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="2aa557d0a1cf1e04d1707fb4a1fa983a48d710db" translate="yes" xml:space="preserve">
          <source>Make tappable areas larger</source>
          <target state="translated">탭 가능한 영역을 더 크게 만듭니다</target>
        </trans-unit>
        <trans-unit id="969a0f915136154cc4498f568f6576d46508f5e9" translate="yes" xml:space="preserve">
          <source>Make the drawer take the entire screen and draw the background of the status bar to allow it to open over the status bar. It will only have an effect on API 21+.</source>
          <target state="translated">드로어가 전체 화면을 차지하도록하고 상태 표시 줄의 배경을 그려 상태 표시 줄을여십시오. API 21+에만 영향을 미칩니다.</target>
        </trans-unit>
        <trans-unit id="0f903b20799bc68ad0572513d8059c8ed681daf2" translate="yes" xml:space="preserve">
          <source>Makes any easing function symmetrical. The easing function will run forwards for half of the duration, then backwards for the rest of the duration.</source>
          <target state="translated">여유 기능을 대칭으로 만듭니다. 여유 함수는 지속 시간의 절반 동안 앞으로 실행 된 다음 나머지 지속 시간 동안 뒤로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="045a80736d2cbc26f72559c6febba65f6ac92815" translate="yes" xml:space="preserve">
          <source>Makes section headers stick to the top of the screen until the next one pushes it off. Only enabled by default on iOS because that is the platform standard there.</source>
          <target state="translated">다음 헤더가 눌러 질 때까지 섹션 헤더를 화면 상단에 고정시킵니다. 플랫폼 표준이므로 iOS에서만 기본적으로 활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="05fd19fbe62a2e6b828058dfe275a89677a999a0" translate="yes" xml:space="preserve">
          <source>Makes the sections headers sticky. The sticky behavior means that it will scroll with the content at the top of the section until it reaches the top of the screen, at which point it will stick to the top until it is pushed off the screen by the next section header. This property is not supported in conjunction with &lt;code&gt;horizontal={true}&lt;/code&gt;. Only enabled by default on iOS because of typical platform standards.</source>
          <target state="translated">섹션 헤더를 고정시킵니다. 스티키 동작은 화면 상단에 도달 할 때까지 섹션 상단에있는 내용과 함께 스크롤되며, 다음 섹션 헤더에 의해 화면에서 밀릴 때까지 상단에 고정됩니다. 이 속성은 &lt;code&gt;horizontal={true}&lt;/code&gt; 와 함께 지원되지 않습니다 . 일반적인 플랫폼 표준으로 인해 iOS에서만 기본적으로 활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="d44b827292ad8a593a7e254241ec1ebd2a972fc6" translate="yes" xml:space="preserve">
          <source>Making Apps Accessible</source>
          <target state="translated">앱에 액세스 할 수 있도록 만들기</target>
        </trans-unit>
        <trans-unit id="0671db59b86fa0e2046bb02dbbad8489236b8d1d" translate="yes" xml:space="preserve">
          <source>Making a stylesheet from a style object makes it possible to refer to it by ID instead of creating a new style object every time.</source>
          <target state="translated">스타일 객체에서 스타일 시트를 만들면 매번 새 스타일 객체를 만드는 대신 ID로 스타일 시트를 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="22ac566b779ff8d653380ca62b3b4a487669c2f3" translate="yes" xml:space="preserve">
          <source>Making modules helps grow the React Native ecosystem and community. We recommend writing modules for your use cases and sharing them on npm.</source>
          <target state="translated">모듈을 만들면 React Native 생태계와 커뮤니티가 성장할 수 있습니다. 사용 사례에 맞는 모듈을 작성하고 npm에서 공유하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="f36af64091c8859d03f0c5912aa8c3e10b3dd9b4" translate="yes" xml:space="preserve">
          <source>Making requests</source>
          <target state="translated">요구하다</target>
        </trans-unit>
        <trans-unit id="65d30127cbbf310aa8799df5151fe513217b9912" translate="yes" xml:space="preserve">
          <source>Manage layout when keyboard is visible</source>
          <target state="translated">키보드가 표시 될 때 레이아웃 관리</target>
        </trans-unit>
        <trans-unit id="55b3be32d811f00f0a247bc0c0c61624c84387f4" translate="yes" xml:space="preserve">
          <source>Manual Upgrades</source>
          <target state="translated">수동 업그레이드</target>
        </trans-unit>
        <trans-unit id="c529302215981eae4a3f210fcdf95efcf923115d" translate="yes" xml:space="preserve">
          <source>Manual linking</source>
          <target state="translated">수동 연결</target>
        </trans-unit>
        <trans-unit id="ec039289b671aac168001d33f2694eea9f890411" translate="yes" xml:space="preserve">
          <source>Many mobile apps need to load resources from a remote URL. You may want to make a POST request to a REST API, or you may simply need to fetch a chunk of static content from another server.</source>
          <target state="translated">많은 모바일 앱은 원격 URL에서 리소스를로드해야합니다. REST API에 POST 요청을하거나 다른 서버에서 정적 컨텐츠 청크를 가져와야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="df9c9196499a65977f872419309d3fdbbc04d3b5" translate="yes" xml:space="preserve">
          <source>Many of the following components provide wrappers for commonly used Android classes.</source>
          <target state="translated">다음 구성 요소 중 다수는 일반적으로 사용되는 Android 클래스에 대한 랩퍼를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="6f1a9688d682196717612a4fd39e6ae8087ba3c8" translate="yes" xml:space="preserve">
          <source>Many of the following components provide wrappers for commonly used UIKit classes.</source>
          <target state="translated">다음 컴포넌트 중 다수는 일반적으로 사용되는 UIKit 클래스에 대한 랩퍼를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="587fd01392c66bde4aba686541338a5c6a8de96f" translate="yes" xml:space="preserve">
          <source>Many of the images you will display in your app will not be available at compile time, or you will want to load some dynamically to keep the binary size down. Unlike with static resources, &lt;em&gt;you will need to manually specify the dimensions of your image&lt;/em&gt;. It's highly recommended that you use https as well in order to satisfy &lt;a href=&quot;running-on-device#app-transport-security&quot;&gt;App Transport Security&lt;/a&gt; requirements on iOS.</source>
          <target state="translated">앱에 표시 할 많은 이미지는 컴파일 타임에 사용할 수 없거나 바이너리 크기를 낮추기 위해 일부를 동적으로로드하려고합니다. 정적 리소스와 달리 &lt;em&gt;이미지의 크기를 수동으로 지정해야합니다&lt;/em&gt; . iOS의 &lt;a href=&quot;running-on-device#app-transport-security&quot;&gt;App Transport Security&lt;/a&gt; 요구 사항 을 충족 시키려면 https를 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="e1e8e3ac4e8016400ce8b12ef944c7877a6abd63" translate="yes" xml:space="preserve">
          <source>Many people have noticed that performance of &lt;code&gt;NavigatorIOS&lt;/code&gt; is better out of the box than &lt;code&gt;Navigator&lt;/code&gt;. The reason for this is that the animations for the transitions are done entirely on the main thread, and so they are not interrupted by frame drops on the JavaScript thread.</source>
          <target state="translated">많은 사람들의 성능 것으로 나타났습니다 &lt;code&gt;NavigatorIOS&lt;/code&gt; 이 보다 상자 밖으로 더 &lt;code&gt;Navigator&lt;/code&gt; . 그 이유는 전환에 대한 애니메이션이 메인 스레드에서 완전히 수행되므로 JavaScript 스레드의 프레임 드롭으로 인해 중단되지 않기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="a08e0da898288e0b16cb67817014a3e1234c40bb" translate="yes" xml:space="preserve">
          <source>Many standards functions are also available on all the supported JavaScript runtimes.</source>
          <target state="translated">지원되는 모든 JavaScript 런타임에서 많은 표준 기능을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="141acaf59726ca8e2c52b1995b043cfd651d5ad7" translate="yes" xml:space="preserve">
          <source>MaskedViewIOS</source>
          <target state="translated">MaskedViewIOS</target>
        </trans-unit>
        <trans-unit id="ea27d4cf033f47c5d4969ba24ab54e0dece40865" translate="yes" xml:space="preserve">
          <source>MaskedViewIOS#maskElement</source>
          <target state="translated">MaskedViewIOS#maskElement</target>
        </trans-unit>
        <trans-unit id="963a19d2054b939ef8c289f7c7e013da00b2d3ef" translate="yes" xml:space="preserve">
          <source>Maximum date.</source>
          <target state="translated">최대 날짜.</target>
        </trans-unit>
        <trans-unit id="227051cf9066d90ec3c2d6dfb9de8f97078df1f0" translate="yes" xml:space="preserve">
          <source>May not have full feature parity and is meant for debugging and performance comparison.</source>
          <target state="translated">전체 기능 패리티가 없을 수 있으며 디버깅 및 성능 비교를위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="e348c8b70e5a5b403efe68b967662463cb493376" translate="yes" xml:space="preserve">
          <source>Measures multiple methods of a class. For example, the following will return the &lt;code&gt;parse&lt;/code&gt; and &lt;code&gt;stringify&lt;/code&gt; methods of the JSON class: Systrace.measureMethods(JSON, 'JSON', ['parse', 'stringify']);</source>
          <target state="translated">클래스의 여러 메소드를 측정합니다. 예를 들어, 다음은 JSON 클래스 의 &lt;code&gt;parse&lt;/code&gt; 및 문자열 &lt;code&gt;stringify&lt;/code&gt; 메소드를 리턴합니다 . Systrace.measureMethods (JSON, 'JSON', [ 'parse', 'stringify']);</target>
        </trans-unit>
        <trans-unit id="9848e675c39170236977da941f2b04f8c288dd1c" translate="yes" xml:space="preserve">
          <source>Memory use in extensions</source>
          <target state="translated">확장에서 메모리 사용</target>
        </trans-unit>
        <trans-unit id="99255d99f50feab5fa3739459f1d63324fb75f77" translate="yes" xml:space="preserve">
          <source>Merges an existing &lt;code&gt;key&lt;/code&gt; value with an input value, assuming both values are stringified JSON. Returns a &lt;code&gt;Promise&lt;/code&gt; object.</source>
          <target state="translated">두 값이 모두 JSON으로 가정 되면 기존 &lt;code&gt;key&lt;/code&gt; 값을 입력 값과 병합합니다 . &lt;code&gt;Promise&lt;/code&gt; 객체를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="f45c6bb0c9fd85d407278f0bc71193e0bc71e483" translate="yes" xml:space="preserve">
          <source>Method 1: Using adb reverse (recommended)</source>
          <target state="translated">방법 1 : adb 역방향 사용 (권장)</target>
        </trans-unit>
        <trans-unit id="2ad4e90fca993a8ee8521e45d5cba27258804c74" translate="yes" xml:space="preserve">
          <source>Method 2: Connect via Wi-Fi</source>
          <target state="translated">방법 2 : Wi-Fi를 통해 연결</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="b3cf1a0be1932b713c93e8523aa4e66c1c37b1b6" translate="yes" xml:space="preserve">
          <source>Minimal Example:</source>
          <target state="translated">최소 예 :</target>
        </trans-unit>
        <trans-unit id="a5ff5bed9d4638f83e3a8ec6c0e274d32ba66b6d" translate="yes" xml:space="preserve">
          <source>Minimal example:</source>
          <target state="translated">최소 예 :</target>
        </trans-unit>
        <trans-unit id="a73b08c2359172a597e16b5577183a152d652ffd" translate="yes" xml:space="preserve">
          <source>Minimum amount of time (in milliseconds) that an item must be physically viewable before the viewability callback will be fired. A high number means that scrolling through content without stopping will not mark the content as viewable.</source>
          <target state="translated">조회 가능성 콜백이 실행되기 전에 항목을 실제로 볼 수 있어야하는 최소 시간 (밀리 초)입니다. 숫자가 크면 컨텐츠를 스크롤하지 않고 스크롤해도 컨텐츠를 볼 수있는 것으로 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="807a5f2b75a8462c87b74605ee324a35ae97daad" translate="yes" xml:space="preserve">
          <source>Minimum date.</source>
          <target state="translated">최소 날짜.</target>
        </trans-unit>
        <trans-unit id="f67ca93c1a795078cb5ebbf4e084fd7c59068884" translate="yes" xml:space="preserve">
          <source>Missing libraries for React</source>
          <target state="translated">React를위한 누락 된 라이브러리</target>
        </trans-unit>
        <trans-unit id="ce22fa306e3981b084c3c1998892ccea74b9cf7e" translate="yes" xml:space="preserve">
          <source>Mobile apps are rarely made up of a single screen. Managing the presentation of, and transition between, multiple screens is typically handled by what is known as a navigator.</source>
          <target state="translated">모바일 앱은 거의 단일 화면으로 구성되지 않습니다. 여러 화면의 프레젠테이션 및 여러 화면 간 전환을 관리하는 작업은 일반적으로 탐색기라고합니다.</target>
        </trans-unit>
        <trans-unit id="d44c2c5216ec66ccb451d99a0f522a63e33ee785" translate="yes" xml:space="preserve">
          <source>Modal</source>
          <target state="translated">Modal</target>
        </trans-unit>
        <trans-unit id="6c97ebe45cb26df9e6bca3ab4e51e1958620ca1d" translate="yes" xml:space="preserve">
          <source>Modal#animationType</source>
          <target state="translated">Modal#animationType</target>
        </trans-unit>
        <trans-unit id="03c617eda42762c1e201714dd6c2acc39e126da1" translate="yes" xml:space="preserve">
          <source>Modal#hardwareAccelerated</source>
          <target state="translated">Modal#hardwareAccelerated</target>
        </trans-unit>
        <trans-unit id="ec39d7d7df672c3c66257fd37ccba086baf31738" translate="yes" xml:space="preserve">
          <source>Modal#onDismiss</source>
          <target state="translated">Modal#onDismiss</target>
        </trans-unit>
        <trans-unit id="6361a4c08c6bd0dc3d5ccf10f336aae0c2a25a94" translate="yes" xml:space="preserve">
          <source>Modal#onOrientationChange</source>
          <target state="translated">Modal#onOrientationChange</target>
        </trans-unit>
        <trans-unit id="49a308c035afe69abe7ed2fe7f53cc42f656ccb1" translate="yes" xml:space="preserve">
          <source>Modal#onRequestClose</source>
          <target state="translated">Modal#onRequestClose</target>
        </trans-unit>
        <trans-unit id="76535599549c59d94cd85618f63cb3d8e4a4849a" translate="yes" xml:space="preserve">
          <source>Modal#onShow</source>
          <target state="translated">Modal#onShow</target>
        </trans-unit>
        <trans-unit id="1f73e3446cdebc96c5d9cef737bc7f5363e24a18" translate="yes" xml:space="preserve">
          <source>Modal#presentationStyle</source>
          <target state="translated">Modal#presentationStyle</target>
        </trans-unit>
        <trans-unit id="22df8d71e59d2ab877df57873ab6f1c4ba645744" translate="yes" xml:space="preserve">
          <source>Modal#supportedOrientations</source>
          <target state="translated">Modal#supportedOrientations</target>
        </trans-unit>
        <trans-unit id="5e83a7aeb07a2d79b333bae25d325c3cbe9f768d" translate="yes" xml:space="preserve">
          <source>Modal#transparent</source>
          <target state="translated">Modal#transparent</target>
        </trans-unit>
        <trans-unit id="dde5b114a3188112163a2ce9f92d12873d4b3458" translate="yes" xml:space="preserve">
          <source>Modal#visible</source>
          <target state="translated">Modal#visible</target>
        </trans-unit>
        <trans-unit id="c52e450a87a95cfb4c1da916e78ab2c66fea7b10" translate="yes" xml:space="preserve">
          <source>Modify your &lt;code&gt;android/app/build.gradle&lt;/code&gt; to use the &lt;code&gt;:ReactAndroid&lt;/code&gt; project instead of the pre-compiled library, e.g. - replace &lt;code&gt;compile 'com.facebook.react:react-native:+'&lt;/code&gt; with &lt;code&gt;compile project(':ReactAndroid')&lt;/code&gt;:</source>
          <target state="translated">수정 당신의 &lt;code&gt;android/app/build.gradle&lt;/code&gt; 사용하기 &lt;code&gt;:ReactAndroid&lt;/code&gt; 대신 미리 컴파일 된 라이브러리의 프로젝트를, 예를 들어 - 대체 &lt;code&gt;compile 'com.facebook.react:react-native:+'&lt;/code&gt; 로 &lt;code&gt;compile project(':ReactAndroid')&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="06450d5d3120052fdc935df70ab310d5f854b198" translate="yes" xml:space="preserve">
          <source>Modify your &lt;code&gt;android/app/build.gradle&lt;/code&gt;, and add:</source>
          <target state="translated">&lt;code&gt;android/app/build.gradle&lt;/code&gt; 을 수정 하고 다음을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="4b719cc01af0a77c5bec71607136fc582d20ff6b" translate="yes" xml:space="preserve">
          <source>Modifying your app</source>
          <target state="translated">앱 수정</target>
        </trans-unit>
        <trans-unit id="bb101179b6d768145f738342dfe298b98e4b70e0" translate="yes" xml:space="preserve">
          <source>More Resources</source>
          <target state="translated">더 많은 자료</target>
        </trans-unit>
        <trans-unit id="887b2370b742ef10e530b0189147e24978ea5882" translate="yes" xml:space="preserve">
          <source>More complex, multi-select example demonstrating &lt;code&gt;PureComponent&lt;/code&gt; usage for perf optimization and avoiding bugs.</source>
          <target state="translated">성능 최적화 및 버그 방지를위한 &lt;code&gt;PureComponent&lt;/code&gt; 사용법을 보여주는보다 복잡한 다중 선택 예제 .</target>
        </trans-unit>
        <trans-unit id="5396ccaf317e448eb8c334a77e5121a3a5cb7e90" translate="yes" xml:space="preserve">
          <source>More details about &lt;code&gt;resize&lt;/code&gt; and &lt;code&gt;scale&lt;/code&gt; can be found at &lt;a href=&quot;http://frescolib.org/docs/resizing.html&quot;&gt;http://frescolib.org/docs/resizing.html&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;resize&lt;/code&gt; 및 &lt;code&gt;scale&lt;/code&gt; 에 대한 자세한 내용은 &lt;a href=&quot;http://frescolib.org/docs/resizing.html&quot;&gt;http://frescolib.org/docs/resizing.html&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0479a94a5c0771fdd1e9cf53771067f26eb12b96" translate="yes" xml:space="preserve">
          <source>Most Android devices can only install and run apps downloaded from Google Play, by default. You will need to enable USB Debugging on your device in order to install your app during development.</source>
          <target state="translated">대부분의 Android 기기는 기본적으로 Google Play에서 다운로드 한 앱만 설치하고 실행할 수 있습니다. 개발 중에 앱을 설치하려면 장치에서 USB 디버깅을 활성화해야합니다.</target>
        </trans-unit>
        <trans-unit id="56d6499ab2d2b1aec0fa3054bd37bbbd163a07df" translate="yes" xml:space="preserve">
          <source>Most apps will end up using one of these basic components. You'll want to get yourself familiarized with all of these if you're new to React Native.</source>
          <target state="translated">대부분의 앱은 이러한 기본 구성 요소 중 하나를 사용하게됩니다. React Native를 처음 사용한다면이 모든 것에 익숙해지기를 원할 것입니다.</target>
        </trans-unit>
        <trans-unit id="c122a28f479a87c7fb794fe465988a44b00c87c0" translate="yes" xml:space="preserve">
          <source>Most components can be customized when they are created, with different parameters. These creation parameters are called &lt;code&gt;props&lt;/code&gt;.</source>
          <target state="translated">대부분의 구성 요소는 다른 매개 변수를 사용하여 작성 될 때 사용자 정의 할 수 있습니다. 이러한 생성 매개 변수를 &lt;code&gt;props&lt;/code&gt; 라고 합니다.</target>
        </trans-unit>
        <trans-unit id="9de6948c11b476dbbcc4ffdcc6336c36cf8a40a9" translate="yes" xml:space="preserve">
          <source>Moving a view on the screen (scrolling, translating, rotating) drops UI thread FPS</source>
          <target state="translated">화면에서보기를 이동하면 (스크롤, 번역, 회전) UI 스레드 FPS가 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="1f6e4668defb1b0708739314972da68991a0f2ab" translate="yes" xml:space="preserve">
          <source>Multiple columns can only be rendered with &lt;code&gt;horizontal={false}&lt;/code&gt; and will zig-zag like a &lt;code&gt;flexWrap&lt;/code&gt; layout. Items should all be the same height - masonry layouts are not supported.</source>
          <target state="translated">여러 개의 열은 &lt;code&gt;horizontal={false}&lt;/code&gt; 로만 렌더링 할 수 있으며 &lt;code&gt;flexWrap&lt;/code&gt; 레이아웃 처럼 지그재그로 표시됩니다 . 항목의 높이는 모두 같아야합니다. 석조 레이아웃은 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7fbc29bcdafa290009de9dbfdebde99b5da8956c" translate="yes" xml:space="preserve">
          <source>Multiple screen orientations should work fine by default unless you're using &lt;code&gt;Dimensions&lt;/code&gt; API and don't handle orientation changes. If you don't want to support multiple screen orientations, you can lock the screen orientation to either portrait or landscape.</source>
          <target state="translated">&lt;code&gt;Dimensions&lt;/code&gt; API를 사용하지 않고 방향 변경을 처리하지 않으면 기본적으로 여러 화면 방향이 올바르게 작동합니다 . 여러 화면 방향을 지원하지 않으려면 화면 방향을 세로 또는 가로로 잠글 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6841a2f300c464d3eccdb03fa3dd978e1612457d" translate="yes" xml:space="preserve">
          <source>My TouchableX view isn't very responsive</source>
          <target state="translated">TouchableX보기가 반응이 좋지 않습니다</target>
        </trans-unit>
        <trans-unit id="0b3843619f7e2d33bf61f564956245ab6fd84b35" translate="yes" xml:space="preserve">
          <source>NOTE: &lt;code&gt;VibrationIOS&lt;/code&gt; is being deprecated. Use &lt;code&gt;Vibration&lt;/code&gt; instead.</source>
          <target state="translated">참고 : &lt;code&gt;VibrationIOS&lt;/code&gt; 는 더 이상 사용되지 않습니다. 대신 &lt;code&gt;Vibration&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="7c55ed08f35b68763bec209cc9d601233d1142ee" translate="yes" xml:space="preserve">
          <source>NOTE: On iOS, you'll need to link &lt;code&gt;RCTLinking&lt;/code&gt; to your project by following the steps described &lt;a href=&quot;linking-libraries-ios#manual-linking&quot;&gt;here&lt;/a&gt;. If you also want to listen to incoming app links during your app's execution, you'll need to add the following lines to your &lt;code&gt;*AppDelegate.m&lt;/code&gt;:</source>
          <target state="translated">참고 : iOS의 경우 &lt;a href=&quot;linking-libraries-ios#manual-linking&quot;&gt;여기에&lt;/a&gt; 설명 된 단계에 따라 &lt;code&gt;RCTLinking&lt;/code&gt; 을 프로젝트에 연결해야합니다 . 앱을 실행하는 동안 들어오는 앱 링크를 듣고 싶다면 &lt;code&gt;*AppDelegate.m&lt;/code&gt; 에 다음 줄을 추가해야합니다 .</target>
        </trans-unit>
        <trans-unit id="a3b60e09e2f6dcd4862a3d6ecbcf67a1a27754b8" translate="yes" xml:space="preserve">
          <source>NOTE: if &lt;code&gt;url&lt;/code&gt; points to a local file, or is a base64-encoded uri, the file it points to will be loaded and shared directly. In this way, you can share images, videos, PDF files, etc.</source>
          <target state="translated">참고 : &lt;code&gt;url&lt;/code&gt; 이 로컬 파일을 가리 키거나 base64로 인코딩 된 uri 인 경우 URL이 가리키는 파일이 직접로드 및 공유됩니다. 이런 식으로 이미지, 비디오, PDF 파일 등을 공유 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ac42da10ca34819d8fd82f2258e7e0c39eff4c77" translate="yes" xml:space="preserve">
          <source>NPM locking error</source>
          <target state="translated">NPM 잠금 오류</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="398bf351b68208a77c6c51a0844a8acd402d95bd" translate="yes" xml:space="preserve">
          <source>Named colors</source>
          <target state="translated">명명 된 색상</target>
        </trans-unit>
        <trans-unit id="786d76a5bd5084448955c4f300a1d96f46f697b5" translate="yes" xml:space="preserve">
          <source>Naming the styles is a good way to add meaning to the low level components in the render function.</source>
          <target state="translated">스타일 이름을 지정하면 렌더 기능의 하위 수준 구성 요소에 의미를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="86ecd2392d55c4a82567ac9bc404a1ce9eb98450" translate="yes" xml:space="preserve">
          <source>Native App Accessibility (iOS and Android)</source>
          <target state="translated">기본 앱 접근성 (iOS 및 Android)</target>
        </trans-unit>
        <trans-unit id="d78f038dd8625f405c4872405134d8ad90bdc669" translate="yes" xml:space="preserve">
          <source>Native Modules</source>
          <target state="translated">네이티브 모듈</target>
        </trans-unit>
        <trans-unit id="7ddaeceec408cd502baa52bd8452b9f2495b19e8" translate="yes" xml:space="preserve">
          <source>Native Modules#Getting activity result from startActivityForResult</source>
          <target state="translated">네이티브 모듈 # startActivityForResult에서 활동 결과 얻기</target>
        </trans-unit>
        <trans-unit id="a821a53330a5ba7587f2aa81ddfe1436dc4dbf3c" translate="yes" xml:space="preserve">
          <source>Native UI Components</source>
          <target state="translated">기본 UI 구성 요소</target>
        </trans-unit>
        <trans-unit id="d0704e551eb871bbfb496ab693e0f48b41a35be5" translate="yes" xml:space="preserve">
          <source>Native modules also support a special kind of argument - a callback. In most cases it is used to provide the function call result to JavaScript.</source>
          <target state="translated">네이티브 모듈은 또한 특별한 종류의 인수 인 콜백을 지원합니다. 대부분의 경우 JavaScript에 함수 호출 결과를 제공하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ec5c618cb299712f2af5fe0c3e0febf51bd823b8" translate="yes" xml:space="preserve">
          <source>Native modules also supports a special kind of argument- a callback. In most cases it is used to provide the function call result to JavaScript.</source>
          <target state="translated">네이티브 모듈은 또한 특별한 종류의 인수 인 콜백을 지원합니다. 대부분의 경우 JavaScript에 함수 호출 결과를 제공하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="701bce9035ae6bd6b5f6f62aad6e66e5c38dc5ab" translate="yes" xml:space="preserve">
          <source>Native modules are Objective-C classes that are available in JS. Typically one instance of each module is created per JS bridge. They can export arbitrary functions and constants to React Native. They have been covered in detail in &lt;a href=&quot;native-modules-ios#content&quot;&gt;this article&lt;/a&gt;.</source>
          <target state="translated">기본 모듈은 JS에서 사용 가능한 Objective-C 클래스입니다. 일반적으로 각 모듈의 인스턴스는 JS 브릿지마다 작성됩니다. 임의의 함수와 상수를 React Native로 내보낼 수 있습니다. 이것들은 &lt;a href=&quot;native-modules-ios#content&quot;&gt;이 기사&lt;/a&gt; 에서 자세히 다루었 다 .</target>
        </trans-unit>
        <trans-unit id="c5cc8d56b84b6fef55c6d734b71757e3dc68ed5c" translate="yes" xml:space="preserve">
          <source>Native modules can also be used to expose existing native libraries to JS. The &lt;a href=&quot;https://github.com/facebook/react-native/tree/master/Libraries/Geolocation&quot;&gt;Geolocation library&lt;/a&gt; is a living example of the idea.</source>
          <target state="translated">기본 모듈을 사용하여 기존 기본 라이브러리를 JS에 노출 할 수도 있습니다. &lt;a href=&quot;https://github.com/facebook/react-native/tree/master/Libraries/Geolocation&quot;&gt;위치 정보 라이브러리는&lt;/a&gt; 아이디어의 살아있는 예입니다.</target>
        </trans-unit>
        <trans-unit id="3156486045442e2bc8be08e9ee5ee3893aa13131" translate="yes" xml:space="preserve">
          <source>Native modules can also fulfill a promise, which can simplify your code, especially when using ES2016's &lt;code&gt;async/await&lt;/code&gt; syntax. When the last parameter of a bridged native method is a &lt;code&gt;Promise&lt;/code&gt;, its corresponding JS method will return a JS Promise object.</source>
          <target state="translated">네이티브 모듈은 특히 ES2016의 &lt;code&gt;async/await&lt;/code&gt; 구문을 사용할 때 코드를 단순화 할 수있는 약속을 이행 할 수 있습니다 . 브리지 된 기본 메소드의 마지막 매개 변수가 &lt;code&gt;Promise&lt;/code&gt; 인 경우 해당 JS 메소드는 JS Promise 오브젝트를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="5555ecaa2153eea0cf082531d1905786f8f38fd1" translate="yes" xml:space="preserve">
          <source>Native modules can also fulfill a promise, which can simplify your code, especially when using ES2016's &lt;code&gt;async/await&lt;/code&gt; syntax. When the last parameters of a bridged native method are an &lt;code&gt;RCTPromiseResolveBlock&lt;/code&gt; and &lt;code&gt;RCTPromiseRejectBlock&lt;/code&gt;, its corresponding JS method will return a JS Promise object.</source>
          <target state="translated">네이티브 모듈은 특히 ES2016의 &lt;code&gt;async/await&lt;/code&gt; 구문을 사용할 때 코드를 단순화 할 수있는 약속을 이행 할 수 있습니다 . 브릿지 된 원시 메소드의 마지막 매개 변수가 &lt;code&gt;RCTPromiseResolveBlock&lt;/code&gt; 및 &lt;code&gt;RCTPromiseRejectBlock&lt;/code&gt; 인 경우 해당 JS 메소드는 JS Promise 오브젝트를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="32d87859bcb556fe024dd7b1e24ef0ef2fa81181" translate="yes" xml:space="preserve">
          <source>Native modules can signal events to JavaScript without being invoked directly. The easiest way to do this is to use the &lt;code&gt;RCTDeviceEventEmitter&lt;/code&gt; which can be obtained from the &lt;code&gt;ReactContext&lt;/code&gt; as in the code snippet below.</source>
          <target state="translated">기본 모듈은 직접 호출하지 않고도 JavaScript로 이벤트를 신호 할 수 있습니다. 가장 쉬운 방법은 아래 코드 조각과 같이 &lt;code&gt;ReactContext&lt;/code&gt; 에서 얻을 수있는 &lt;code&gt;RCTDeviceEventEmitter&lt;/code&gt; 를 사용하는 것 입니다 .</target>
        </trans-unit>
        <trans-unit id="80e79981894f8f0b24dcdee03f2e5e5c9fa357bb" translate="yes" xml:space="preserve">
          <source>Native modules should not have any assumptions about what thread they are being called on, as the current assignment is subject to change in the future. If a blocking call is required, the heavy work should be dispatched to an internally managed worker thread, and any callbacks distributed from there.</source>
          <target state="translated">네이티브 모듈은 현재 할당이 미래에 변경 될 수 있으므로 어떤 스레드를 호출하고 있는지에 대한 가정이 없어야합니다. 차단 호출이 필요한 경우, 무거운 작업은 내부적으로 관리되는 작업자 스레드로 전달되고 콜백은 분산됩니다.</target>
        </trans-unit>
        <trans-unit id="e425f9a409bd2bc06ab4ca078f15e47cc59be15f" translate="yes" xml:space="preserve">
          <source>Native views are created and manipulated by extending &lt;code&gt;ViewManager&lt;/code&gt; or more commonly &lt;code&gt;SimpleViewManager&lt;/code&gt; . A &lt;code&gt;SimpleViewManager&lt;/code&gt; is convenient in this case because it applies common properties such as background color, opacity, and Flexbox layout.</source>
          <target state="translated">기본보기는 &lt;code&gt;ViewManager&lt;/code&gt; 또는보다 일반적으로 &lt;code&gt;SimpleViewManager&lt;/code&gt; 를 확장하여 작성하고 조작합니다 . &lt;code&gt;SimpleViewManager&lt;/code&gt; 는 이 같은 배경 색상, 불투명도 및 인 flexbox 레이아웃과 같은 일반적인 특성을 적용하기 때문에이 경우에 편리합니다.</target>
        </trans-unit>
        <trans-unit id="915054a4dd24a00f4a7a629f5b569de722cd4d0a" translate="yes" xml:space="preserve">
          <source>Native views are created and manipulated by subclasses of &lt;code&gt;RCTViewManager&lt;/code&gt;. These subclasses are similar in function to view controllers, but are essentially singletons - only one instance of each is created by the bridge. They expose native views to the &lt;code&gt;RCTUIManager&lt;/code&gt;, which delegates back to them to set and update the properties of the views as necessary. The &lt;code&gt;RCTViewManager&lt;/code&gt;s are also typically the delegates for the views, sending events back to JavaScript via the bridge.</source>
          <target state="translated">기본 뷰는 &lt;code&gt;RCTViewManager&lt;/code&gt; 의 서브 클래스에 의해 작성되고 조작됩니다 . 이 서브 클래스는 기능적으로 컨트롤러를 보는 것과 유사하지만 본질적으로 싱글 톤입니다. 브리지에 의해 하나의 인스턴스 만 생성됩니다. 기본 뷰를 &lt;code&gt;RCTUIManager&lt;/code&gt; 에 공개합니다. RCTUIManager 는 필요에 따라 뷰의 속성을 설정 및 업데이트하도록 다시 위임합니다. &lt;code&gt;RCTViewManager&lt;/code&gt; 의 들 또한 뷰 일반적으로 대표되는 다리를 통해 다시 자바 스크립트로 이벤트를 전송.</target>
        </trans-unit>
        <trans-unit id="6e52bb219c0545ec2e18ed8c58b6f350c0ef1b81" translate="yes" xml:space="preserve">
          <source>NativeAnimationsExample</source>
          <target state="translated">NativeAnimationsExample</target>
        </trans-unit>
        <trans-unit id="4e00c85f9c91dbc8fb879ddb7991276780dd6fd8" translate="yes" xml:space="preserve">
          <source>Navigate forward to a new route.</source>
          <target state="translated">새로운 경로로 이동하십시오.</target>
        </trans-unit>
        <trans-unit id="c21e50ad5d59f52266565c16d8eeed5c6b1e5bf2" translate="yes" xml:space="preserve">
          <source>Navigating Between Screens</source>
          <target state="translated">화면 탐색</target>
        </trans-unit>
        <trans-unit id="7a7a516cb5273f0f885f321befe93f64ae5aaf2b" translate="yes" xml:space="preserve">
          <source>Navigation Bar Configuration</source>
          <target state="translated">탐색 모음 구성</target>
        </trans-unit>
        <trans-unit id="1211777e1ca26adcd946f4f8849a0a85613470e3" translate="yes" xml:space="preserve">
          <source>NavigatorIOS</source>
          <target state="translated">NavigatorIOS</target>
        </trans-unit>
        <trans-unit id="42b26fc6c0504ab414c105664960912239d9ccc2" translate="yes" xml:space="preserve">
          <source>NavigatorIOS uses &lt;code&gt;route&lt;/code&gt; objects to identify child views, their props, and navigation bar configuration. Navigation operations such as push operations expect routes to look like this the &lt;code&gt;initialRoute&lt;/code&gt;.</source>
          <target state="translated">NavigatorIOS는 &lt;code&gt;route&lt;/code&gt; 객체를 사용하여 하위 뷰, 해당 소품 및 내비게이션 바 구성을 식별합니다. 푸시 작업과 같은 탐색 작업은 경로가 &lt;code&gt;initialRoute&lt;/code&gt; 와 같이 보일 것으로 예상합니다 .</target>
        </trans-unit>
        <trans-unit id="203ff63c64646e90b4ccafa9436f68d8e2c16270" translate="yes" xml:space="preserve">
          <source>NavigatorIOS#barStyle</source>
          <target state="translated">NavigatorIOS#barStyle</target>
        </trans-unit>
        <trans-unit id="7217b18f5442fd730c38678c47b1cf9eff50cd4f" translate="yes" xml:space="preserve">
          <source>NavigatorIOS#barTintColor</source>
          <target state="translated">NavigatorIOS#barTintColor</target>
        </trans-unit>
        <trans-unit id="3c2b0f32881562d685b6939443060f4967d9ec05" translate="yes" xml:space="preserve">
          <source>NavigatorIOS#initialRoute</source>
          <target state="translated">NavigatorIOS#initialRoute</target>
        </trans-unit>
        <trans-unit id="9619e2cede2e1ebecbb2330407c20ae2c15e3f86" translate="yes" xml:space="preserve">
          <source>NavigatorIOS#interactivePopGestureEnabled</source>
          <target state="translated">NavigatorIOS#interactivePopGestureEnabled</target>
        </trans-unit>
        <trans-unit id="89949c2b04020613db0b1eea0979aa9b56a97d45" translate="yes" xml:space="preserve">
          <source>NavigatorIOS#itemWrapperStyle</source>
          <target state="translated">NavigatorIOS#itemWrapperStyle</target>
        </trans-unit>
        <trans-unit id="6b3bfdc9921500f1db11f40a91e97acae57dd8b4" translate="yes" xml:space="preserve">
          <source>NavigatorIOS#navigationBarHidden</source>
          <target state="translated">NavigatorIOS#navigationBarHidden</target>
        </trans-unit>
        <trans-unit id="08f7fe11c00ef7cfad3a682df6b1b7087f241437" translate="yes" xml:space="preserve">
          <source>NavigatorIOS#shadowHidden</source>
          <target state="translated">NavigatorIOS#shadowHidden</target>
        </trans-unit>
        <trans-unit id="8bdb62dd409210c972160cb5eae6dfefbc5da84f" translate="yes" xml:space="preserve">
          <source>NavigatorIOS#tintColor</source>
          <target state="translated">NavigatorIOS#tintColor</target>
        </trans-unit>
        <trans-unit id="3cacf41cf0588e601888cb163cd7dc3f84f8b005" translate="yes" xml:space="preserve">
          <source>NavigatorIOS#titleTextColor</source>
          <target state="translated">NavigatorIOS#titleTextColor</target>
        </trans-unit>
        <trans-unit id="58039f477867552cb401f2ff19607752ff133c61" translate="yes" xml:space="preserve">
          <source>NavigatorIOS#translucent</source>
          <target state="translated">NavigatorIOS#translucent</target>
        </trans-unit>
        <trans-unit id="1b9528ad6528771172d8d8b5e5a0fe876692f177" translate="yes" xml:space="preserve">
          <source>NavigatorIOS.pop()</source>
          <target state="translated">NavigatorIOS.pop()</target>
        </trans-unit>
        <trans-unit id="6ca49e1f7792f78e5c894c8dafb114986e45241b" translate="yes" xml:space="preserve">
          <source>NavigatorIOS.popN()</source>
          <target state="translated">NavigatorIOS.popN()</target>
        </trans-unit>
        <trans-unit id="f5959bb93066cdab1308108acf2577820c045c6e" translate="yes" xml:space="preserve">
          <source>NavigatorIOS.popToRoute()</source>
          <target state="translated">NavigatorIOS.popToRoute()</target>
        </trans-unit>
        <trans-unit id="f70611baff5e1146faf3e1b78d32173e76f9501f" translate="yes" xml:space="preserve">
          <source>NavigatorIOS.popToTop()</source>
          <target state="translated">NavigatorIOS.popToTop()</target>
        </trans-unit>
        <trans-unit id="489f50525dd7015dfb072db3940447dfe8b81b3c" translate="yes" xml:space="preserve">
          <source>NavigatorIOS.push()</source>
          <target state="translated">NavigatorIOS.push()</target>
        </trans-unit>
        <trans-unit id="a02bc4cb1aaeda8380f1b41039d7d412cccb8a91" translate="yes" xml:space="preserve">
          <source>NavigatorIOS.replace()</source>
          <target state="translated">NavigatorIOS.replace()</target>
        </trans-unit>
        <trans-unit id="31031a30e5600b57bb3f76af74060f17f1c35e76" translate="yes" xml:space="preserve">
          <source>NavigatorIOS.replaceAtIndex()</source>
          <target state="translated">NavigatorIOS.replaceAtIndex()</target>
        </trans-unit>
        <trans-unit id="7f1d26984d85b46843407e614b0941c691b4f4ef" translate="yes" xml:space="preserve">
          <source>NavigatorIOS.replacePrevious()</source>
          <target state="translated">NavigatorIOS.replacePrevious()</target>
        </trans-unit>
        <trans-unit id="50544cab8785607701ea683dcab63d506ffe44cd" translate="yes" xml:space="preserve">
          <source>NavigatorIOS.replacePreviousAndPop()</source>
          <target state="translated">NavigatorIOS.replacePreviousAndPop()</target>
        </trans-unit>
        <trans-unit id="6d3a9ce5a0993a89fe685553bbf5f9608378cfb2" translate="yes" xml:space="preserve">
          <source>NavigatorIOS.resetTo()</source>
          <target state="translated">NavigatorIOS.resetTo()</target>
        </trans-unit>
        <trans-unit id="152ef8d42b8d148b490cee496a2da9dd1bab6072" translate="yes" xml:space="preserve">
          <source>Nested text</source>
          <target state="translated">중첩 된 텍스트</target>
        </trans-unit>
        <trans-unit id="a50ebf3848a241aec5457be41ab47b85b39bee65" translate="yes" xml:space="preserve">
          <source>Nested views (iOS only)</source>
          <target state="translated">중첩 된 뷰 (iOS 만 해당)</target>
        </trans-unit>
        <trans-unit id="88e5c88d54b1faff872d4b21b89ac13ec2470222" translate="yes" xml:space="preserve">
          <source>NetInfo</source>
          <target state="translated">NetInfo</target>
        </trans-unit>
        <trans-unit id="c28fd4542fa60b8a800820a6f6919c8c94bd6f43" translate="yes" xml:space="preserve">
          <source>NetInfo exposes info about online/offline status</source>
          <target state="translated">NetInfo는 온라인 / 오프라인 상태에 대한 정보를 노출합니다</target>
        </trans-unit>
        <trans-unit id="a87e09f5d2fcfa3ce47b346a03993f0472ef5074" translate="yes" xml:space="preserve">
          <source>NetInfo#isConnected</source>
          <target state="translated">NetInfo#isConnected</target>
        </trans-unit>
        <trans-unit id="ebb783d7621d3f45e2caea29a80ce5f7be21eef0" translate="yes" xml:space="preserve">
          <source>NetInfo.addEventListener()</source>
          <target state="translated">NetInfo.addEventListener()</target>
        </trans-unit>
        <trans-unit id="6f84936db531bdb3c5751839c0cb1e3526be7659" translate="yes" xml:space="preserve">
          <source>NetInfo.getConnectionInfo()</source>
          <target state="translated">NetInfo.getConnectionInfo()</target>
        </trans-unit>
        <trans-unit id="414af702fdc97c2fd9eb1bd8d775070de7718017" translate="yes" xml:space="preserve">
          <source>NetInfo.isConnectionExpensive()</source>
          <target state="translated">NetInfo.isConnectionExpensive()</target>
        </trans-unit>
        <trans-unit id="799ee4127391bb389c5990190fd8f4405071a2d4" translate="yes" xml:space="preserve">
          <source>NetInfo.removeEventListener()</source>
          <target state="translated">NetInfo.removeEventListener()</target>
        </trans-unit>
        <trans-unit id="921e0ffad6dfe0b1e44769aed9bc621b85c607a2" translate="yes" xml:space="preserve">
          <source>Network Images</source>
          <target state="translated">네트워크 이미지</target>
        </trans-unit>
        <trans-unit id="8cf26f270327f7111c4c55365c611d665c20149b" translate="yes" xml:space="preserve">
          <source>Network Requests for Images</source>
          <target state="translated">이미지에 대한 네트워크 요청</target>
        </trans-unit>
        <trans-unit id="1e91748557010f07119a40ac844fcae91cc2e7a3" translate="yes" xml:space="preserve">
          <source>Networking</source>
          <target state="translated">Networking</target>
        </trans-unit>
        <trans-unit id="68bdc912d052f097fe16357492fe5e23c8bb76b6" translate="yes" xml:space="preserve">
          <source>Networking is an inherently asynchronous operation. Fetch methods will return a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt; that makes it straightforward to write code that works in an asynchronous manner:</source>
          <target state="translated">네트워킹은 본질적으로 비동기 작업입니다. Fetch 메소드는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt; 를 반환 하여 비동기 방식으로 작동하는 코드를 작성하는 것이 간단합니다.</target>
        </trans-unit>
        <trans-unit id="015a20d9c89edc8505d767c855b29a57fbb070ef" translate="yes" xml:space="preserve">
          <source>New issue runbook</source>
          <target state="translated">새로운 이슈 런북</target>
        </trans-unit>
        <trans-unit id="3f3a2b8a45e900264b1ef8a7e6725145c731fc8e" translate="yes" xml:space="preserve">
          <source>New issues should follow the &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/.github/ISSUE_TEMPLATE.md&quot;&gt;Issue Template&lt;/a&gt;.</source>
          <target state="translated">새로운 이슈는 &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/.github/ISSUE_TEMPLATE.md&quot;&gt;이슈 템플릿을&lt;/a&gt; 따라야합니다 .</target>
        </trans-unit>
        <trans-unit id="7b92779c7ed4ed6788ebc3ab617481ab09e38544" translate="yes" xml:space="preserve">
          <source>New value to merge for the &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 에 병합 할 새 값 입니다.</target>
        </trans-unit>
        <trans-unit id="03ace6e639680330a1ef14555772509682b8bf08" translate="yes" xml:space="preserve">
          <source>Next, check the manufacturer code by using &lt;code&gt;lsusb&lt;/code&gt; (on mac, you must first &lt;a href=&quot;https://github.com/jlhonora/lsusb&quot;&gt;install lsusb&lt;/a&gt;). &lt;code&gt;lsusb&lt;/code&gt; should output something like this:</source>
          <target state="translated">그런 다음 &lt;code&gt;lsusb&lt;/code&gt; 를 사용하여 제조업체 코드를 확인하십시오 (Mac에서는 먼저 &lt;a href=&quot;https://github.com/jlhonora/lsusb&quot;&gt;lsusb를 설치&lt;/a&gt; 해야합니다 ). &lt;code&gt;lsusb&lt;/code&gt; 는 다음과 같이 출력해야합니다 :</target>
        </trans-unit>
        <trans-unit id="830506d64eb85f7451d290a734c2a7bcd8a95c55" translate="yes" xml:space="preserve">
          <source>Next, declare an event handler property on &lt;code&gt;RNTMapManager&lt;/code&gt;, make it a delegate for all the views it exposes, and forward events to JS by calling the event handler block from the native view.</source>
          <target state="translated">다음으로, &lt;code&gt;RNTMapManager&lt;/code&gt; 에 이벤트 핸들러 속성을 선언하고 , 노출 된 모든 뷰에 대한 위임을 만들고, 네이티브 뷰에서 이벤트 핸들러 블록을 호출하여 이벤트를 JS로 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="f591a06bf7079108f4032f4a969bc0575aa35c17" translate="yes" xml:space="preserve">
          <source>Next, let's add the more complex &lt;code&gt;region&lt;/code&gt; prop. We start by adding the native code:</source>
          <target state="translated">다음으로 더 복잡한 &lt;code&gt;region&lt;/code&gt; 소품을 추가하겠습니다 . 네이티브 코드를 추가하는 것으로 시작합니다 :</target>
        </trans-unit>
        <trans-unit id="c7ee755946dcfbe6935e52fc3ba7eaf8981b655e" translate="yes" xml:space="preserve">
          <source>Next, make sure you have &lt;a href=&quot;https://yarnpkg.com/lang/en/docs/install/&quot;&gt;installed the yarn package manager&lt;/a&gt;.</source>
          <target state="translated">다음으로, &lt;a href=&quot;https://yarnpkg.com/lang/en/docs/install/&quot;&gt;원사 패키지 관리자를 설치&lt;/a&gt; 했는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="d73ca38c7b0d03605c388a802ce7f3422c5a5390" translate="yes" xml:space="preserve">
          <source>Next, make sure you have run &lt;code&gt;pod install&lt;/code&gt; and that a &lt;code&gt;Pods/&lt;/code&gt; directory has been created in your project with React installed. CocoaPods will instruct you to use the generated &lt;code&gt;.xcworkspace&lt;/code&gt; file henceforth to be able to use these installed dependencies.</source>
          <target state="translated">다음으로, 당신이 실행했는지 확인 &lt;code&gt;pod install&lt;/code&gt; 하고 있다고 &lt;code&gt;Pods/&lt;/code&gt; 디렉토리가 설치 반응과 프로젝트에 작성되었습니다. CocoaPods는 생성 된 &lt;code&gt;.xcworkspace&lt;/code&gt; 파일을 사용하여 설치된 종속성을 사용할 수 있도록 지시합니다 .</target>
        </trans-unit>
        <trans-unit id="f521883155cb9c0511ec4b074d69ac365fb05416" translate="yes" xml:space="preserve">
          <source>Next, make sure you have the Internet permission in your &lt;code&gt;AndroidManifest.xml&lt;/code&gt;:</source>
          <target state="translated">다음으로 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 에서 인터넷 권한이 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="5e7c788de09446581a695ec7518480345ce53995" translate="yes" xml:space="preserve">
          <source>Next, select the &quot;SDK Tools&quot; tab and check the box next to &quot;Show Package Details&quot; here as well. Look for and expand the &quot;Android SDK Build-Tools&quot; entry, then make sure that &lt;code&gt;23.0.1&lt;/code&gt; is selected.</source>
          <target state="translated">그런 다음 &quot;SDK 도구&quot;탭을 선택하고 &quot;패키지 세부 정보 표시&quot;옆의 확인란도 선택하십시오. &quot;Android SDK Build-Tools&quot;항목을 찾아 확장 한 다음 &lt;code&gt;23.0.1&lt;/code&gt; 이 선택되어 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="bfcc2ffa45d72fed43ce1d659ef4ddfc1304eb32" translate="yes" xml:space="preserve">
          <source>Next, we need to pass some activity lifecycle callbacks to the &lt;code&gt;ReactInstanceManager&lt;/code&gt; and &lt;code&gt;ReactRootView&lt;/code&gt;:</source>
          <target state="translated">다음으로 액티비티 라이프 사이클 콜백을 &lt;code&gt;ReactInstanceManager&lt;/code&gt; 및 &lt;code&gt;ReactRootView&lt;/code&gt; 로 전달해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b2529a410a87e6c23fa27c439185f235a1d5bbfc" translate="yes" xml:space="preserve">
          <source>Nexus 6</source>
          <target state="translated">Nexus 6</target>
        </trans-unit>
        <trans-unit id="816c52fd2bdd94a63cd0944823a6c0aa9384c103" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">No</target>
        </trans-unit>
        <trans-unit id="c53cbcd751e10d8f254dcb8d855e0ba41589a1e3" translate="yes" xml:space="preserve">
          <source>No animation</source>
          <target state="translated">아니 애니메이션</target>
        </trans-unit>
        <trans-unit id="6015fc17dff11bc51d8aa739ed7890c7295e20c1" translate="yes" xml:space="preserve">
          <source>No global namespace, i.e. you don't have to worry about name collisions.</source>
          <target state="translated">전역 네임 스페이스가 없습니다. 즉 이름 충돌에 대해 걱정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="af5118da13925d3b70f428a4c4e64fdc8c804c93" translate="yes" xml:space="preserve">
          <source>No transports available</source>
          <target state="translated">이용 가능한 교통편이 없습니다.</target>
        </trans-unit>
        <trans-unit id="260f7a8cd4f6938b3cc185a619847cb83d670219" translate="yes" xml:space="preserve">
          <source>Node</source>
          <target state="translated">Node</target>
        </trans-unit>
        <trans-unit id="8ea782bf2f77da768b7fea385b9a68b42f4eaf4f" translate="yes" xml:space="preserve">
          <source>Node comes with npm, which lets you install the React Native command line interface.</source>
          <target state="translated">노드에는 npm이 제공되어 React Native 명령 행 인터페이스를 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eedd6657aa9d7b6737d98339d1acf11d35496a25" translate="yes" xml:space="preserve">
          <source>Node, Python2, JDK</source>
          <target state="translated">노드, Python2, JDK</target>
        </trans-unit>
        <trans-unit id="1056009ed420e3e476e7b666f46c93bf2f6fe8d2" translate="yes" xml:space="preserve">
          <source>Node, Watchman</source>
          <target state="translated">노드, 경비원</target>
        </trans-unit>
        <trans-unit id="8c4a855427e6b89824183c1fc74ebc5aa5449b43" translate="yes" xml:space="preserve">
          <source>Normal (default)</source>
          <target state="translated">보통 (기본값)</target>
        </trans-unit>
        <trans-unit id="5d58bcc3813ec033c1210667edf5e9063783fadf" translate="yes" xml:space="preserve">
          <source>Not every app uses all the native capabilities, and including the code to support all those features would impact the binary size... But we still want to make it easy to add these features whenever you need them.</source>
          <target state="translated">모든 앱이 모든 기본 기능을 사용하는 것은 아니며 모든 기능을 지원하는 코드를 포함하여 이진 크기에 영향을 줄 수 있습니다.하지만 필요할 때마다 이러한 기능을 쉽게 추가 할 수 있기를 바랍니다.</target>
        </trans-unit>
        <trans-unit id="65829498bd485de3e72b5e86e983de8db63e563c" translate="yes" xml:space="preserve">
          <source>Not every library will need this step, what you need to consider is:</source>
          <target state="translated">모든 라이브러리에이 단계가 필요한 것은 아닙니다. 고려해야 할 사항은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7593f62c0d45c88cb5cdf423e6a8dfc0921c1ec1" translate="yes" xml:space="preserve">
          <source>Not everything you can do with &lt;code&gt;Animated&lt;/code&gt; is currently supported by the native driver. The main limitation is that you can only animate non-layout properties: things like &lt;code&gt;transform&lt;/code&gt; and &lt;code&gt;opacity&lt;/code&gt; will work, but flexbox and position properties will not. When using &lt;code&gt;Animated.event&lt;/code&gt;, it will only work with direct events and not bubbling events. This means it does not work with &lt;code&gt;PanResponder&lt;/code&gt; but does work with things like &lt;code&gt;ScrollView#onScroll&lt;/code&gt;.</source>
          <target state="translated">현재 &lt;code&gt;Animated&lt;/code&gt; 로 수행 할 수있는 모든 기능이 기본 드라이버에서 지원되는 것은 아닙니다 . 주요 제한 사항은 레이아웃이 아닌 속성에만 애니메이션을 적용 할 수 있다는 것입니다. &lt;code&gt;transform&lt;/code&gt; 및 &lt;code&gt;opacity&lt;/code&gt; 와 같은 기능 은 작동하지만 flexbox 및 위치 속성은 작동하지 않습니다. &lt;code&gt;Animated.event&lt;/code&gt; 를 사용하면 버블 링 이벤트가 아닌 직접 이벤트에서만 작동합니다. 이것은 &lt;code&gt;PanResponder&lt;/code&gt; 와는 작동하지 않지만 &lt;code&gt;ScrollView#onScroll&lt;/code&gt; 과 같은 것에서는 작동 한다는 것을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="d2f0661fbd0eaccb806b9a830e156854255689aa" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;--variant=release&lt;/code&gt; is only available if you've set up signing as described above.</source>
          <target state="translated">참고 &lt;code&gt;--variant=release&lt;/code&gt; 당신이 상기 한 바와 같이 서명 설정 한 경우에만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bd602ad0a82962f4d362601233a80e0791789c06" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;RCTRootView bundleURL&lt;/code&gt; starts up a new JSC VM. To save resources and simplify the communication between RN views in different parts of your native app, you can have multiple views powered by React Native that are associated with a single JS runtime. To do that, instead of using &lt;code&gt;RCTRootView bundleURL&lt;/code&gt;, use &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React/Base/RCTBridge.h#L89&quot;&gt;&lt;code&gt;RCTBridge initWithBundleURL&lt;/code&gt;&lt;/a&gt; to create a bridge and then use &lt;code&gt;RCTRootView initWithBridge&lt;/code&gt;.</source>
          <target state="translated">참고 &lt;code&gt;RCTRootView bundleURL&lt;/code&gt; 이 새로운 JSC VM을 시작합니다. 기본 앱의 다른 부분에서 리소스를 절약하고 RN보기 간의 통신을 단순화하기 위해 단일 JS 런타임과 연관된 React Native에서 제공하는 여러보기를 가질 수 있습니다. 사용하는 대신,이 작업을 수행하려면 &lt;code&gt;RCTRootView bundleURL&lt;/code&gt; 사용 &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React/Base/RCTBridge.h#L89&quot;&gt; &lt;code&gt;RCTBridge initWithBundleURL&lt;/code&gt; 을&lt;/a&gt; 다리를 만든 다음 사용 &lt;code&gt;RCTRootView initWithBridge&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="c9413b627e3306026e52ef0c96595e5dd2e2b55b" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;RCTRootView initWithURL&lt;/code&gt; starts up a new JSC VM. To save resources and simplify the communication between RN views in different parts of your native app, you can have multiple views powered by React Native that are associated with a single JS runtime. To do that, instead of using &lt;code&gt;[RCTRootView alloc] initWithURL&lt;/code&gt;, use &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React/Base/RCTBridge.h#L93&quot;&gt;&lt;code&gt;RCTBridge initWithBundleURL&lt;/code&gt;&lt;/a&gt; to create a bridge and then use &lt;code&gt;RCTRootView initWithBridge&lt;/code&gt;.</source>
          <target state="translated">참고 &lt;code&gt;RCTRootView initWithURL&lt;/code&gt; 이 새로운 JSC VM을 시작합니다. 기본 앱의 다른 부분에서 리소스를 절약하고 RN보기 간의 통신을 단순화하기 위해 단일 JS 런타임과 연관된 React Native에서 제공하는 여러보기를 가질 수 있습니다. 사용하는 대신,이 작업을 수행하려면 &lt;code&gt;[RCTRootView alloc] initWithURL&lt;/code&gt; 사용 &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React/Base/RCTBridge.h#L93&quot;&gt; &lt;code&gt;RCTBridge initWithBundleURL&lt;/code&gt; 을&lt;/a&gt; 다리를 만든 다음 사용 &lt;code&gt;RCTRootView initWithBridge&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="a225c98bf355ea1f668ce1c104025ff579c99cc7" translate="yes" xml:space="preserve">
          <source>Note that although &lt;code&gt;LayoutAnimation&lt;/code&gt; is very powerful and can be quite useful, it provides much less control than &lt;code&gt;Animated&lt;/code&gt; and other animation libraries, so you may need to use another approach if you can't get &lt;code&gt;LayoutAnimation&lt;/code&gt; to do what you want.</source>
          <target state="translated">참고 있지만 &lt;code&gt;LayoutAnimation&lt;/code&gt; 은 매우 강력하고보다 적은 제어 제공합니다 매우 유용 할 수 있습니다 &lt;code&gt;Animated&lt;/code&gt; 당신이 얻을 수없는 경우 다른 방법을 사용해야 할 수 있도록, 그리고 다른 애니메이션 라이브러리를 &lt;code&gt;LayoutAnimation&lt;/code&gt; 을 당신이 원하는 것을 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a8ad19f5547b7d24de7151adeb1002851e28b484" translate="yes" xml:space="preserve">
          <source>Note that for network and data images, you will need to manually specify the dimensions of your image!</source>
          <target state="translated">네트워크 및 데이터 이미지의 경우 이미지의 크기를 수동으로 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="015da2184c33a461722169a542920f3dfd69bfa1" translate="yes" xml:space="preserve">
          <source>Note that if you set &lt;code&gt;android:windowSoftInputMode&lt;/code&gt; to &lt;code&gt;adjustResize&lt;/code&gt; or &lt;code&gt;adjustNothing&lt;/code&gt;, only &lt;code&gt;keyboardDidShow&lt;/code&gt; and &lt;code&gt;keyboardDidHide&lt;/code&gt; events will be available on Android. &lt;code&gt;keyboardWillShow&lt;/code&gt; as well as &lt;code&gt;keyboardWillHide&lt;/code&gt; are generally not available on Android since there is no native corresponding event.</source>
          <target state="translated">주 당신이 설정 한 경우 &lt;code&gt;android:windowSoftInputMode&lt;/code&gt; 에 &lt;code&gt;adjustResize&lt;/code&gt; 또는 &lt;code&gt;adjustNothing&lt;/code&gt; 만 &lt;code&gt;keyboardDidShow&lt;/code&gt; 및 &lt;code&gt;keyboardDidHide&lt;/code&gt; 의 이벤트가 안드로이드에 사용할 수 있습니다. &lt;code&gt;keyboardWillShow&lt;/code&gt; 뿐만 아니라 &lt;code&gt;keyboardWillHide&lt;/code&gt; 네이티브 해당 이벤트가 없기 때문에 안드로이드에 일반적으로 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="23ecfc1c163cf18b7134d91421a6ed8a4c2b6f00" translate="yes" xml:space="preserve">
          <source>Note that image sources required this way include size (width, height) info for the Image. If you need to scale the image dynamically (i.e. via flex), you may need to manually set &lt;code&gt;{ width: undefined, height: undefined }&lt;/code&gt; on the style attribute.</source>
          <target state="translated">이 방법으로 필요한 이미지 소스에는 이미지의 크기 (너비, 높이) 정보가 포함됩니다. 이미지를 동적으로 (즉, flex를 통해) 스케일링해야하는 경우 스타일 속성 에서 수동으로 &lt;code&gt;{ width: undefined, height: undefined }&lt;/code&gt; 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="25169c96e7dc28e16e9f1e222bc5dffbdb6fceac" translate="yes" xml:space="preserve">
          <source>Note that in order to get this to work on &lt;strong&gt;Android&lt;/strong&gt; you need to set the following flags via &lt;code&gt;UIManager&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;Android&lt;/strong&gt; 에서이 기능 을 사용하려면 &lt;code&gt;UIManager&lt;/code&gt; 를 통해 다음 플래그를 설정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="dd49838d0c906ec6233002e652bf7d8d14257db1" translate="yes" xml:space="preserve">
          <source>Note that it is very inefficient to transfer large quantities of binary data between JS and native code, so you should avoid calling this more than necessary. @platform ios</source>
          <target state="translated">JS와 원시 코드간에 대량의 이진 데이터를 전송하는 것은 매우 비효율적이므로 필요 이상으로이를 호출하지 않아야합니다. @ 플랫폼 ios</target>
        </trans-unit>
        <trans-unit id="8469385681515bb25969b2cfd106a6e8d93d20c1" translate="yes" xml:space="preserve">
          <source>Note that it is very inefficient to transfer large quantities of binary data between JS and native code, so you should avoid calling this more than necessary. To display an image in the ImageStore, you can just pass the URI to an &lt;code&gt;&amp;lt;Image/&amp;gt;&lt;/code&gt; component; there is no need to retrieve the base64 data.</source>
          <target state="translated">JS와 원시 코드간에 대량의 이진 데이터를 전송하는 것은 매우 비효율적이므로 필요 이상으로이를 호출하지 않아야합니다. ImageStore에 이미지를 표시하려면 URI를 &lt;code&gt;&amp;lt;Image/&amp;gt;&lt;/code&gt; 구성 요소에 전달하면 됩니다. base64 데이터를 검색 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="653472261b00ea6fc1f04f9e986d8dfc39f69300" translate="yes" xml:space="preserve">
          <source>Note that not all Text styles are supported, an incomplete list of what is not supported includes:</source>
          <target state="translated">모든 텍스트 스타일이 지원되는 것은 아니며 지원되지 않는 불완전한 목록에는 다음이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="0fe5d55981d2a562ce4d4d1b7b1b290a1676418e" translate="yes" xml:space="preserve">
          <source>Note that on Android performing text selection in input can change app's activity &lt;code&gt;windowSoftInputMode&lt;/code&gt; param to &lt;code&gt;adjustResize&lt;/code&gt;. This may cause issues with components that have position: 'absolute' while keyboard is active. To avoid this behavior either specify &lt;code&gt;windowSoftInputMode&lt;/code&gt; in AndroidManifest.xml ( &lt;a href=&quot;https://developer.android.com/guide/topics/manifest/activity-element.html&quot;&gt;https://developer.android.com/guide/topics/manifest/activity-element.html&lt;/a&gt; ) or control this param programmatically with native code.</source>
          <target state="translated">안드로이드 입력에서 텍스트 선택을 수행하는 방법에 대한 것은 응용 프로그램의 활동 변경할 수 있습니다 &lt;code&gt;windowSoftInputMode&lt;/code&gt; 의 에 PARAM &lt;code&gt;adjustResize&lt;/code&gt; 을 . 키보드가 활성화 된 상태에서 위치가 '절대'인 구성 요소에 문제가 발생할 수 있습니다. 이 동작을 피하려면 AndroidManifest.xml에서 &lt;code&gt;windowSoftInputMode&lt;/code&gt; 를 지정 하거나 ( &lt;a href=&quot;https://developer.android.com/guide/topics/manifest/activity-element.html&quot;&gt;https://developer.android.com/guide/topics/manifest/activity-element.html&lt;/a&gt; ) 기본 코드를 사용하여 프로그래밍 방식으로이 매개 변수를 제어하십시오.</target>
        </trans-unit>
        <trans-unit id="8bbbd5ac5551d715e163af09e0a12a1de2833d15" translate="yes" xml:space="preserve">
          <source>Note that some props are only available with &lt;code&gt;multiline={true/false}&lt;/code&gt;. Additionally, border styles that apply to only one side of the element (e.g., &lt;code&gt;borderBottomColor&lt;/code&gt;, &lt;code&gt;borderLeftWidth&lt;/code&gt;, etc.) will not be applied if &lt;code&gt;multiline=false&lt;/code&gt;. To achieve the same effect, you can wrap your &lt;code&gt;TextInput&lt;/code&gt; in a &lt;code&gt;View&lt;/code&gt;:</source>
          <target state="translated">일부 소품은 &lt;code&gt;multiline={true/false}&lt;/code&gt; 에서만 사용할 수 있습니다 . 또한 &lt;code&gt;multiline=false&lt;/code&gt; 인 경우 요소의 한쪽에만 적용되는 테두리 스타일 (예 : &lt;code&gt;borderBottomColor&lt;/code&gt; , &lt;code&gt;borderLeftWidth&lt;/code&gt; 등)이 적용되지 않습니다 . 동일한 효과를 얻으려면 &lt;code&gt;TextInput&lt;/code&gt; 을 &lt;code&gt;View&lt;/code&gt; 에 래핑하십시오 .</target>
        </trans-unit>
        <trans-unit id="4090f4acedc0afd8d42b8e3f00ece6f3221762a2" translate="yes" xml:space="preserve">
          <source>Note that the constants are exported only at initialization time, so if you change &lt;code&gt;constantsToExport&lt;/code&gt; values at runtime it won't affect the JavaScript environment.</source>
          <target state="translated">상수는 초기화시에만 내보내 지므로 런타임에 &lt;code&gt;constantsToExport&lt;/code&gt; 값 을 변경 하면 JavaScript 환경에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="065d8d862a76ec07b65c8344f8bed4bf07c2d792" translate="yes" xml:space="preserve">
          <source>Note that the view can always be scrolled by calling &lt;code&gt;scrollTo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;scrollTo&lt;/code&gt; 를 호출하여 뷰를 항상 스크롤 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="725409b3c0df9c04fb2e8b831e33c851aa358c9d" translate="yes" xml:space="preserve">
          <source>Note that these measurements are not available until after the rendering has been completed in native. If you need the measurements as soon as possible, consider using the &lt;a href=&quot;view#onlayout&quot;&gt;&lt;code&gt;onLayout&lt;/code&gt; prop&lt;/a&gt; instead.</source>
          <target state="translated">이러한 측정은 렌더링이 기본적으로 완료 될 때까지 사용할 수 없습니다. 가능한 빨리 측정해야하는 경우 대신 &lt;a href=&quot;view#onlayout&quot;&gt; &lt;code&gt;onLayout&lt;/code&gt; 소품을&lt;/a&gt; 사용해보십시오.</target>
        </trans-unit>
        <trans-unit id="fb2b3fc96764bf4da7ed6f6feb7a0d092555ca3f" translate="yes" xml:space="preserve">
          <source>Note that we explicitly specify the type as &lt;code&gt;BOOL&lt;/code&gt; - React Native uses &lt;code&gt;RCTConvert&lt;/code&gt; under the hood to convert all sorts of different data types when talking over the bridge, and bad values will show convenient &quot;RedBox&quot; errors to let you know there is an issue ASAP. When things are straightforward like this, the whole implementation is taken care of for you by this macro.</source>
          <target state="translated">유형을 &lt;code&gt;BOOL&lt;/code&gt; 로 명시 적으로 지정합니다. -React Native는 브리지를 통해 대화 할 때 후드 아래에서 &lt;code&gt;RCTConvert&lt;/code&gt; 를 사용 하여 모든 종류의 다른 데이터 유형을 변환하며 잘못된 값은 편리한 &quot;RedBox&quot;오류를 표시하여 최대한 빨리 문제가 있음을 알려줍니다. . 이와 같이 일이 간단 할 경우 전체 구현이이 매크로에 의해 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="074276b5641eee53ba3a4f85b335e63374437b63" translate="yes" xml:space="preserve">
          <source>Note that you can only define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one:</source>
          <target state="translated">바운스 / 스피드, 인장 / 마찰 또는 강성 / 댐핑 / 질량 중 하나만 정의 할 수 있지만 둘 이상을 정의 할 수는 없습니다.</target>
        </trans-unit>
        <trans-unit id="f0ed9149f004c90e44484abb4b793cadc0e3675e" translate="yes" xml:space="preserve">
          <source>Note that you must specify some width and height style attributes.</source>
          <target state="translated">너비 및 높이 스타일 속성을 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="17e3e8e5d00494ec2330345b5a5ed901185de8ec" translate="yes" xml:space="preserve">
          <source>Note the latest version of the &lt;code&gt;react-native&lt;/code&gt; npm package &lt;a href=&quot;https://www.npmjs.com/package/react-native&quot;&gt;from here&lt;/a&gt; (or use &lt;code&gt;npm info react-native&lt;/code&gt; to check).</source>
          <target state="translated">여기에서 최신 버전의 &lt;code&gt;react-native&lt;/code&gt; npm 패키지 &lt;a href=&quot;https://www.npmjs.com/package/react-native&quot;&gt;를 확인하십시오&lt;/a&gt; (또는 &lt;code&gt;npm info react-native&lt;/code&gt; 를 사용하여 확인).</target>
        </trans-unit>
        <trans-unit id="b0cb6ec31954f045d6e9c50bfeffbfbf2f2b39e3" translate="yes" xml:space="preserve">
          <source>Note the native date picker dialog has some UI glitches on Android 4 and lower when using the &lt;code&gt;minDate&lt;/code&gt; and &lt;code&gt;maxDate&lt;/code&gt; options.</source>
          <target state="translated">기본 날짜 선택기 대화 상자에는 &lt;code&gt;minDate&lt;/code&gt; 및 &lt;code&gt;maxDate&lt;/code&gt; 옵션을 사용할 때 Android 4 이하의 일부 UI 결함이 있습니다.</target>
        </trans-unit>
        <trans-unit id="26d58474c4df2e38418b5948777ba1dc70f99502" translate="yes" xml:space="preserve">
          <source>Note the use of &lt;code&gt;nativeOnly&lt;/code&gt; above. Sometimes you'll have some special properties that you need to expose for the native component, but don't actually want them as part of the API for the associated React component. For example, &lt;code&gt;Switch&lt;/code&gt; has a custom &lt;code&gt;onChange&lt;/code&gt; handler for the raw native event, and exposes an &lt;code&gt;onValueChange&lt;/code&gt; handler property that is invoked with just the boolean value rather than the raw event (similar to &lt;code&gt;onChangeMessage&lt;/code&gt; in the example above). Since you don't want these native only properties to be part of the API, you don't want to put them in &lt;code&gt;propTypes&lt;/code&gt;, but if you don't you'll get an error. The solution is simply to call them out via the &lt;code&gt;nativeOnly&lt;/code&gt; option.</source>
          <target state="translated">위 의 &lt;code&gt;nativeOnly&lt;/code&gt; 사용에 유의하십시오 . 때로는 네이티브 구성 요소에 노출 해야하는 특수 속성이 있지만 실제로는 관련 React 구성 요소의 API의 일부로 원하지는 않습니다. 예를 들어, &lt;code&gt;Switch&lt;/code&gt; 에는 원시 원시 이벤트에 대한 사용자 정의 &lt;code&gt;onChange&lt;/code&gt; 핸들러가 있으며 원시 이벤트 가 아닌 부울 값으로 만 호출 되는 &lt;code&gt;onValueChange&lt;/code&gt; 핸들러 특성을 노출합니다 ( 위 예제의 &lt;code&gt;onChangeMessage&lt;/code&gt; 와 유사 ). 이러한 네이티브 전용 속성이 API의 일부가되기를 원하지 않기 때문에 &lt;code&gt;propTypes&lt;/code&gt; 에 넣기를 원하지 않지만 오류가 없으면 오류가 발생합니다. 해결책은 단순히 &lt;code&gt;nativeOnly&lt;/code&gt; 를 통해 호출하는 것입니다. 선택권.</target>
        </trans-unit>
        <trans-unit id="6c1e942bcf2116f3b862f06f319e11a38d94f183" translate="yes" xml:space="preserve">
          <source>Note: Although dimensions are available immediately, they may change (e.g due to device rotation) so any rendering logic or styles that depend on these constants should try to call this function on every render, rather than caching the value (for example, using inline styles rather than setting a value in a &lt;code&gt;StyleSheet&lt;/code&gt;).</source>
          <target state="translated">참고 : 치수를 ​​즉시 사용할 수 있지만 장치 회전 등으로 인해 치수가 변경 될 수 있으므로 이러한 상수에 의존하는 렌더링 논리 또는 스타일은 값을 캐싱하지 않고 모든 렌더링에서이 함수를 호출해야합니다 (예 : 인라인 사용) &lt;code&gt;StyleSheet&lt;/code&gt; 에서 값을 설정하는 대신 스타일 ).</target>
        </trans-unit>
        <trans-unit id="40f1468c910434cf4a553f8f29f351c0d3b1d98c" translate="yes" xml:space="preserve">
          <source>Note: Cannot scroll to locations outside the render window without specifying the &lt;code&gt;getItemLayout&lt;/code&gt; or &lt;code&gt;onScrollToIndexFailed&lt;/code&gt; prop.</source>
          <target state="translated">참고 : &lt;code&gt;getItemLayout&lt;/code&gt; 또는 &lt;code&gt;onScrollToIndexFailed&lt;/code&gt; 소품 을 지정하지 않으면 렌더 윈도우 외부의 위치로 스크롤 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="ebe44f03060c0cc7339f7ec2d6030646c6067a9d" translate="yes" xml:space="preserve">
          <source>Note: Cannot scroll to locations outside the render window without specifying the &lt;code&gt;getItemLayout&lt;/code&gt; prop.</source>
          <target state="translated">참고 : &lt;code&gt;getItemLayout&lt;/code&gt; prop 을 지정하지 않으면 렌더 윈도우 외부의 위치로 스크롤 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="c46891b0f95db127993acf355fd48cfff3130498" translate="yes" xml:space="preserve">
          <source>Note: Files may vary based on shell flavor. See below for examples from common shells.</source>
          <target state="translated">참고 : 파일은 셸 맛에 따라 달라질 수 있습니다. 일반적인 쉘의 예제는 아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="09ed4407efac19216e11293450ce0eee02361969" translate="yes" xml:space="preserve">
          <source>Note: If you need more control over how to present modals over the rest of your app, then consider using a top-level Navigator.</source>
          <target state="translated">참고 : 나머지 앱에 모달을 표시하는 방법에 대한 자세한 제어가 필요한 경우 최상위 네비게이터 사용을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="2e22949fed9aec7aee06d34c0a50f75cd10553eb" translate="yes" xml:space="preserve">
          <source>Note: Make sure gradle.properties does not include &lt;em&gt;org.gradle.configureondemand=true&lt;/em&gt; as that will make release build skip bundling JS and assets into the APK.</source>
          <target state="translated">참고 : &lt;em&gt;gradle.properties에 org.gradle.configureondemand = true가&lt;/em&gt; 포함되어 있지 않은지 확인하십시오. 릴리스 빌드는 JS와 자산을 APK에 번들로 &lt;em&gt;묶지&lt;/em&gt; 않습니다 .</target>
        </trans-unit>
        <trans-unit id="8f93c0c982efccfc2b84e88f5acd3c319c08aaef" translate="yes" xml:space="preserve">
          <source>Note: May have bugs (missing content) in some circumstances - use at your own risk.</source>
          <target state="translated">참고 : 경우에 따라 버그 (콘텐츠 누락)가있을 수 있습니다. 사용자가 위험을 감수해야합니다.</target>
        </trans-unit>
        <trans-unit id="3542188e9722dabcf34408ecd75e45d9bcfdbbe9" translate="yes" xml:space="preserve">
          <source>Note: The static bundle is built every time you target a physical device, even in Debug. If you want to save time, turn off bundle generation in Debug by adding the following to your shell script in the Xcode Build Phase &lt;code&gt;Bundle React Native code and images&lt;/code&gt;:</source>
          <target state="translated">참고 : 정적 번들은 디버그에서도 물리적 장치를 대상으로 할 때마다 빌드됩니다. 시간을 절약하려면 Xcode 빌드 단계 &lt;code&gt;Bundle React Native code and images&lt;/code&gt; 의 쉘 스크립트에 다음을 추가하여 디버그에서 번들 생성을 끄십시오 .</target>
        </trans-unit>
        <trans-unit id="1fc720032977a19097a4118f7ec4ae9b45272198" translate="yes" xml:space="preserve">
          <source>Note: The weird function signature is due to the fact that, for historical reasons, the function also accepts separate arguments as an alternative to the options object. This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.</source>
          <target state="translated">참고 : 이상한 함수 시그니처는 역사적 이유로 인해 함수가 옵션 오브젝트의 대안으로 별도의 인수를 허용하기 때문입니다. 모호성 (x 이전의 y)으로 인해 더 이상 사용되지 않으며 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="8a4f14ee2dc13cdf87fadba55dd8ec175e3cf3da" translate="yes" xml:space="preserve">
          <source>Note: This function does NOT clone the data in this data source. It simply passes the functions defined at construction to a new data source with the data specified. If you wish to maintain the existing data you must handle merging of old and new data separately and then pass that into this function as the &lt;code&gt;dataBlob&lt;/code&gt;.</source>
          <target state="translated">참고 :이 기능은이 데이터 소스의 데이터를 복제하지 않습니다. 구성시 정의 된 기능을 지정된 데이터가있는 새 데이터 소스로 전달합니다. 기존 데이터를 유지하려면 이전 데이터와 새 데이터의 병합을 개별적으로 처리 한 다음 &lt;code&gt;dataBlob&lt;/code&gt; 으로이 함수에 전달해야합니다 .</target>
        </trans-unit>
        <trans-unit id="0efa5f7e525e964f1a6b30cc407cf12659f5b229" translate="yes" xml:space="preserve">
          <source>Note: Vertical pagination is not supported on Android.</source>
          <target state="translated">참고 : Android에서는 세로 페이지 매김이 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="343e63caa622c2fc417aa1dc7232938499492d26" translate="yes" xml:space="preserve">
          <source>Note: Vertical snapToInterval is not supported on Android.</source>
          <target state="translated">참고 : Android에서는 세로 snapToInterval이 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="69e98abeb52506f91b7a847780874ed3ff0e0ae9" translate="yes" xml:space="preserve">
          <source>Note: if you prefer to avoid global installations, you can add &lt;code&gt;react-devtools&lt;/code&gt; as a project dependency. Add the &lt;code&gt;react-devtools&lt;/code&gt; package to your project using &lt;code&gt;npm install --save-dev react-devtools&lt;/code&gt;, then add &lt;code&gt;&quot;react-devtools&quot;: &quot;react-devtools&quot;&lt;/code&gt; to the &lt;code&gt;scripts&lt;/code&gt; section in your &lt;code&gt;package.json&lt;/code&gt;, and then run &lt;code&gt;npm run react-devtools&lt;/code&gt; from your project folder to open the DevTools.</source>
          <target state="translated">참고 : 전역 설치를 &lt;code&gt;react-devtools&lt;/code&gt; 않으면 react-devtools 를 프로젝트 종속성으로 추가 할 수 있습니다 . 추가 &lt;code&gt;react-devtools&lt;/code&gt; 사용하여 프로젝트에 패키지를 &lt;code&gt;npm install --save-dev react-devtools&lt;/code&gt; 다음 추가, &lt;code&gt;&quot;react-devtools&quot;: &quot;react-devtools&quot;&lt;/code&gt; 받는 &lt;code&gt;scripts&lt;/code&gt; 귀하의 섹션 &lt;code&gt;package.json&lt;/code&gt; 한 다음 실행 &lt;code&gt;npm run react-devtools&lt;/code&gt; 프로젝트 폴더에서 -devtools 를 사용하여 DevTools 를여 십시오.</target>
        </trans-unit>
        <trans-unit id="efa2fcb5b9c91271e248c9f59c40f585197333d1" translate="yes" xml:space="preserve">
          <source>Note: may have bugs (missing content) in some circumstances - use at your own risk.</source>
          <target state="translated">참고 : 어떤 상황에서는 버그 (콘텐츠 누락)가있을 수 있습니다. 위험은 사용자 본인이 감수하십시오.</target>
        </trans-unit>
        <trans-unit id="1d2cc43a15ed133b17633216a73d60e030329218" translate="yes" xml:space="preserve">
          <source>Note: the React Developer Tools Chrome extension does not work with React Native, but you can use its standalone version instead. Read &lt;a href=&quot;debugging#react-developer-tools&quot;&gt;this section&lt;/a&gt; to learn how.</source>
          <target state="translated">참고 : React Developer Tools Chrome 확장 프로그램은 React Native에서 작동하지 않지만 독립형 버전을 대신 사용할 수 있습니다. 방법을 배우려면 &lt;a href=&quot;debugging#react-developer-tools&quot;&gt;이 섹션&lt;/a&gt; 을 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="4b689a75fc9f6efac72051fd0ba983a8b4898afe" translate="yes" xml:space="preserve">
          <source>Note: this returns a new object!</source>
          <target state="translated">참고 : 이것은 새로운 객체를 반환합니다!</target>
        </trans-unit>
        <trans-unit id="c67072557520e945692e4a267918c358b95b51c5" translate="yes" xml:space="preserve">
          <source>Nothing is considered viewable until the user scrolls or &lt;code&gt;recordInteraction&lt;/code&gt; is called after render.</source>
          <target state="translated">렌더링 후 사용자가 스크롤하거나 &lt;code&gt;recordInteraction&lt;/code&gt; 이 호출 될 때까지 볼 수있는 것으로 간주되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="ae3df712ca254a0b2cd6508bfed79071c37e3024" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;{pic}&lt;/code&gt; is surrounded by braces, to embed the variable &lt;code&gt;pic&lt;/code&gt; into JSX. You can put any JavaScript expression inside braces in JSX.</source>
          <target state="translated">공지 사항이 &lt;code&gt;{pic}&lt;/code&gt; 변수의 포함에 괄호로 둘러싸여 &lt;code&gt;pic&lt;/code&gt; JSX에 있습니다. JSX에서 중괄호 안에 JavaScript 표현식을 넣을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3bb4a2baa79d5130b64250f4080d648a031d5f76" translate="yes" xml:space="preserve">
          <source>Notice that first the JS thread thinks for a bit, then you see some work done on the native modules thread, followed by an expensive traversal on the UI thread.</source>
          <target state="translated">JS 스레드가 먼저 약간 생각하면 네이티브 모듈 스레드에서 수행 된 작업과 UI 스레드에서 값 비싼 순회가 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="6cdd4fca80be23e2f24aa89d3b7d5c674cf3af1c" translate="yes" xml:space="preserve">
          <source>Notice that the JS thread is executing basically all the time, and across frame boundaries! This app is not rendering at 60 FPS. In this case, &lt;strong&gt;the problem lies in JS&lt;/strong&gt;.</source>
          <target state="translated">JS 스레드는 기본적으로 항상 프레임 경계에서 실행됩니다. 이 앱은 60FPS에서 렌더링되지 않습니다. 이 경우 &lt;strong&gt;문제는 JS에&lt;/strong&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="830f5d1318d9d23e7650567e69df3c0c7f7b3b61" translate="yes" xml:space="preserve">
          <source>Notice that this method has only effect if the &lt;code&gt;geolocation.watchPosition(successCallback, errorCallback)&lt;/code&gt; method was previously invoked.</source>
          <target state="translated">이 메소드는 &lt;code&gt;geolocation.watchPosition(successCallback, errorCallback)&lt;/code&gt; 메소드가 이전에 호출 된 경우에만 적용 됩니다.</target>
        </trans-unit>
        <trans-unit id="632c6a9f400eb5dda3e820c2979c82565bb3e411" translate="yes" xml:space="preserve">
          <source>Notice the long amount of time spent in &lt;code&gt;DrawFrame&lt;/code&gt; that crosses frame boundaries. This is time spent waiting for the GPU to drain its command buffer from the previous frame.</source>
          <target state="translated">프레임 경계를 넘나 &lt;code&gt;DrawFrame&lt;/code&gt; 에서 오랜 시간이 소요됩니다 . GPU가 이전 프레임에서 명령 버퍼를 비우는 데 소요되는 시간입니다.</target>
        </trans-unit>
        <trans-unit id="22c5d7af46f5e728d6ada94e5243fa4596891bcb" translate="yes" xml:space="preserve">
          <source>Notify manager that an interaction has completed.</source>
          <target state="translated">상호 작용이 완료되었음을 관리자에게 알립니다.</target>
        </trans-unit>
        <trans-unit id="3e4042f182476b9b786142947fca1eba0d6aaef2" translate="yes" xml:space="preserve">
          <source>Notify manager that an interaction has started.</source>
          <target state="translated">상호 작용이 시작되었음을 관리자에게 알립니다.</target>
        </trans-unit>
        <trans-unit id="e0c8460bdc844f9f649e1a85997c23f899b7b2cd" translate="yes" xml:space="preserve">
          <source>Now build and run your Android app as normal.</source>
          <target state="translated">이제 평소대로 Android 앱을 빌드하고 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="2c6bc7ac82545574706a316dceba4a7989d86570" translate="yes" xml:space="preserve">
          <source>Now check if you are able to resolve the xip.io address, by running &lt;code&gt;nslookup&lt;/code&gt;.</source>
          <target state="translated">이제 &lt;code&gt;nslookup&lt;/code&gt; 을 실행하여 xip.io 주소를 확인할 수 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="3e9118152af0c58922f46fc77cccd62e25a11280" translate="yes" xml:space="preserve">
          <source>Now check that your device is properly connecting to ADB, the Android Debug Bridge, by running &lt;code&gt;adb devices&lt;/code&gt;.</source>
          <target state="translated">이제 &lt;code&gt;adb devices&lt;/code&gt; 를 실행하여 장치가 Android Debug Bridge 인 ADB에 올바르게 연결되어 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="2e4fe00ca048ffea184c3e64e57953a76acd11f8" translate="yes" xml:space="preserve">
          <source>Now install that version of &lt;code&gt;react-native&lt;/code&gt; in your project with &lt;code&gt;npm install --save&lt;/code&gt;:</source>
          <target state="translated">이제 &lt;code&gt;npm install --save&lt;/code&gt; 를 사용하여 프로젝트 에 &lt;code&gt;react-native&lt;/code&gt; 버전의 해당 버전을 설치하십시오 .</target>
        </trans-unit>
        <trans-unit id="51c8b083782766531194f177ae65bd1e175251db" translate="yes" xml:space="preserve">
          <source>Now just create a release build of your native app from within Android Studio as usual and you should be good to go!</source>
          <target state="translated">이제 평소와 같이 Android Studio 내에서 기본 앱의 릴리스 빌드를 작성하면 좋습니다.</target>
        </trans-unit>
        <trans-unit id="990509d487a338b79869ffa3f20c4a0681e449eb" translate="yes" xml:space="preserve">
          <source>Now let's remove &lt;code&gt;SYSTEM_ALERT_WINDOW&lt;/code&gt; from the production APK only.</source>
          <target state="translated">이제 프로덕션 APK에서만 &lt;code&gt;SYSTEM_ALERT_WINDOW&lt;/code&gt; 를 제거하겠습니다 .</target>
        </trans-unit>
        <trans-unit id="1bcccebfaeb3ff354c152f881dace9068b4f33d2" translate="yes" xml:space="preserve">
          <source>Now run &lt;code&gt;react-devtools&lt;/code&gt; from the terminal to launch the standalone DevTools app:</source>
          <target state="translated">이제 터미널에서 &lt;code&gt;react-devtools&lt;/code&gt; 를 실행하여 독립형 DevTools 앱을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="28b6cbcc91ba9a78b1d411e27dbead3b9be76e76" translate="yes" xml:space="preserve">
          <source>Now that we have unbundled our code, there is overhead for calling require. require now needs to send a message over the bridge when it encounters a module it has not loaded yet. This will impact startup the most, because that is where the largest number of require calls are likely to take place while the app loads the initial module. Luckily we can configure a portion of the modules to be preloaded. In order to do this, you will need to implement some form of inline require.</source>
          <target state="translated">이제 코드를 번들로 만들었으므로 require를 호출하기위한 오버 헤드가 있습니다. 이제 아직로드되지 않은 모듈을 발견하면 브리지를 통해 메시지를 보내야합니다. 앱이 초기 모듈을로드하는 동안 가장 많은 수의 요청 호출이 발생할 가능성이 높기 때문에 시작에 가장 큰 영향을 미칩니다. 다행히 모듈의 일부를 미리로드하도록 구성 할 수 있습니다. 이렇게하려면 일부 형식의 인라인 요구를 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="e6ec651a18098b01f754b7b7ea790221541e42d4" translate="yes" xml:space="preserve">
          <source>Now that you have successfully run the app, let's modify it.</source>
          <target state="translated">앱을 성공적으로 실행 했으므로 수정하겠습니다.</target>
        </trans-unit>
        <trans-unit id="fcebcc33bd96dd1ff46c4629f4be60f372efb893" translate="yes" xml:space="preserve">
          <source>Now that you have successfully run the app, let's modify it. Open &lt;code&gt;App.js&lt;/code&gt; in your text editor of choice and edit some lines. The application should reload automatically once you save your changes.</source>
          <target state="translated">앱을 성공적으로 실행 했으므로 수정하겠습니다. 선택한 텍스트 편집기에서 &lt;code&gt;App.js&lt;/code&gt; 를 열고 일부 행을 편집하십시오. 변경 사항을 저장하면 응용 프로그램이 자동으로 다시로드되어야합니다.</target>
        </trans-unit>
        <trans-unit id="4dd65e25a3c5ddde3c3315b010edb28db9fe4903" translate="yes" xml:space="preserve">
          <source>Now that your React Native component is created via &lt;code&gt;index.js&lt;/code&gt;, you need to add that component to a new or existing &lt;code&gt;ViewController&lt;/code&gt;. The easiest path to take is to optionally create an event path to your component and then add that component to an existing &lt;code&gt;ViewController&lt;/code&gt;.</source>
          <target state="translated">React Native 컴포넌트가 &lt;code&gt;index.js&lt;/code&gt; 를 통해 생성 되었으므로 해당 컴포넌트를 기존 또는 새 &lt;code&gt;ViewController&lt;/code&gt; 에 추가해야합니다 . 가장 쉬운 방법은 구성 요소에 대한 이벤트 경로를 선택적으로 생성 한 다음 해당 구성 요소를 기존 &lt;code&gt;ViewController&lt;/code&gt; 에 추가하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="56da329a76bd8c507ba3bcb1999d7b7b9ea34fce" translate="yes" xml:space="preserve">
          <source>Now to actually disable zooming, we set the property in JS:</source>
          <target state="translated">실제로 확대 / 축소를 비활성화하려면 JS에서 속성을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="6a8e9f29866eaa88362d14014b4873a9501238d7" translate="yes" xml:space="preserve">
          <source>Now to confuse the matter a little bit, open up the developer menu in your app and toggle &lt;code&gt;Show Perf Monitor&lt;/code&gt;. You will notice that there are two different frame rates.</source>
          <target state="translated">이제 문제를 조금 혼란스럽게하려면 앱에서 개발자 메뉴를 열고 &lt;code&gt;Show Perf Monitor&lt;/code&gt; 토글 하십시오 . 두 가지 프레임 속도가 있음을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa4ec02a1ce2532267b78b9a1fcb5be97a7af35f" translate="yes" xml:space="preserve">
          <source>Now we have a nicely documented wrapper component that is easy to work with. Note that we changed the second argument to &lt;code&gt;requireNativeComponent&lt;/code&gt; from &lt;code&gt;null&lt;/code&gt; to the new &lt;code&gt;MapView&lt;/code&gt; wrapper component. This allows the infrastructure to verify that the propTypes match the native props to reduce the chances of mismatches between the ObjC and JS code.</source>
          <target state="translated">이제 우리는 작업하기 쉬운 문서화 된 래퍼 컴포넌트를 가지고 있습니다. 두 번째 인수를 &lt;code&gt;requireNativeComponent&lt;/code&gt; 로 &lt;code&gt;null&lt;/code&gt; 에서 새 &lt;code&gt;MapView&lt;/code&gt; 랩퍼 구성 요소로 변경했습니다. 이를 통해 인프라는 propTypes가 기본 props와 일치하는지 확인하여 ObjC와 JS 코드 간의 불일치 가능성을 줄입니다.</target>
        </trans-unit>
        <trans-unit id="cb02592f65ade27d66bfc3292ca464b259c1fd3d" translate="yes" xml:space="preserve">
          <source>Now we will actually modify the native Android application to integrate React Native.</source>
          <target state="translated">이제 실제 Android 애플리케이션을 수정하여 React Native를 통합합니다.</target>
        </trans-unit>
        <trans-unit id="32f298f78ac42aa4fb347d891ac3f27ef5dcaeb8" translate="yes" xml:space="preserve">
          <source>Now we will actually modify the native iOS application to integrate React Native. For our 2048 sample app, we will add a &quot;High Score&quot; screen in React Native.</source>
          <target state="translated">이제 실제로 네이티브 iOS 애플리케이션을 수정하여 React Native를 통합합니다. 2048 샘플 앱의 경우 React Native에 &quot;High Score&quot;화면을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="8a13d9b29bbc375ec3d2b8f5d400c7cbc5ec379c" translate="yes" xml:space="preserve">
          <source>Now what?</source>
          <target state="translated">이제 뭐?</target>
        </trans-unit>
        <trans-unit id="c8d0a81afe414f9bae1eac7df36cc58b4d4ff00c" translate="yes" xml:space="preserve">
          <source>Now you can listen to &lt;code&gt;onActivityResult&lt;/code&gt; by implementing the following method:</source>
          <target state="translated">이제 다음 메소드를 구현하여 &lt;code&gt;onActivityResult&lt;/code&gt; 를 청취 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="81f3e19d63aac30522b1000e5f429ee97f7bcf76" translate="yes" xml:space="preserve">
          <source>Now you can listen to the activity's LifeCycle events by implementing the following methods:</source>
          <target state="translated">이제 다음 방법을 구현하여 활동의 LifeCycle 이벤트를들을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2dd8cb29b5b7ceb580198971d369e19e63cf6ff4" translate="yes" xml:space="preserve">
          <source>Now you can make your text beautiful. The next step in becoming a style master is to &lt;a href=&quot;height-and-width&quot;&gt;learn how to control component size&lt;/a&gt;.</source>
          <target state="translated">이제 텍스트를 아름답게 만들 수 있습니다. 스타일 마스터가되는 다음 단계는 &lt;a href=&quot;height-and-width&quot;&gt;구성 요소 크기를 제어하는 ​​방법을 배우는 것&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e3e17539807e9a1c7942ed46322b687a25c31e0e" translate="yes" xml:space="preserve">
          <source>Now your activity is ready to run some JavaScript code.</source>
          <target state="translated">이제 활동이 JavaScript 코드를 실행할 준비가되었습니다.</target>
        </trans-unit>
        <trans-unit id="31049deb1a4a33c98ad70e8fd8e4edc76a5d3d62" translate="yes" xml:space="preserve">
          <source>Now, from your JavaScript file you can call the method like this:</source>
          <target state="translated">이제 JavaScript 파일에서 다음과 같이 메소드를 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5d414b5bf01e7f666189a662ff0c4c00d525ab2f" translate="yes" xml:space="preserve">
          <source>Now, from your other JavaScript file you can call the method like this:</source>
          <target state="translated">이제 다른 JavaScript 파일에서 다음과 같이 메소드를 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a75e5b7b8efaf0ead9fa1f8c98efb61742d7be4f" translate="yes" xml:space="preserve">
          <source>Now, whenever you &lt;a href=&quot;https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)&quot;&gt;start your service&lt;/a&gt;, e.g. as a periodic task or in response to some system event / broadcast, JS will spin up, run your task, then spin down.</source>
          <target state="translated">이제 &lt;a href=&quot;https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)&quot;&gt;서비스&lt;/a&gt; 를 시작할 때마다 ( 예 : 주기적 작업 또는 일부 시스템 이벤트 / 방송에 대한 응답으로) JS가 시작되고 작업이 실행 된 다음 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="b7baa1d40c4ea29afc9098732bffee2a861a6c44" translate="yes" xml:space="preserve">
          <source>Number</source>
          <target state="translated">Number</target>
        </trans-unit>
        <trans-unit id="8588b5288fd0fbcce9f2f983554da7140ecf12d4" translate="yes" xml:space="preserve">
          <source>Number of rows to render per event loop. Note: if your 'rows' are actually cells, i.e. they don't span the full width of your view (as in the ListViewGridLayoutExample), you should set the pageSize to be a multiple of the number of cells per row, otherwise you're likely to see gaps at the edge of the ListView as new pages are loaded.</source>
          <target state="translated">이벤트 루프 당 렌더링 할 행 수입니다. 참고 : '행'이 실제로 셀인 경우 (예 : ListViewGridLayoutExample에서와 같이보기의 전체 너비에 걸쳐 있지 않은 경우) pageSize를 행당 셀 수의 배수로 설정해야합니다. 그렇지 않으면 ' 새 페이지가로드 될 때 ListView의 가장자리에 차이가있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c2d4479d565b42064670f7e0abe2271fda4b6bb4" translate="yes" xml:space="preserve">
          <source>Number that controls whether the initial scale percentage of the view. 50 is 50%, 100 is 100%, etc. Used only in Android.</source>
          <target state="translated">뷰의 초기 배율 백분율을 제어하는 ​​숫자입니다. 50은 50 %, 100은 100 % 등입니다. Android에서만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="2883f191bc5ebfdc16c0813eff659b35363ea69b" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="translated">Object</target>
        </trans-unit>
        <trans-unit id="e7cc4f11c6b6e7847f644e41d43a5048b2e954f8" translate="yes" xml:space="preserve">
          <source>Object with a &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;title&lt;/code&gt; 과 &lt;code&gt;message&lt;/code&gt; 가있는 객체 .</target>
        </trans-unit>
        <trans-unit id="1d51672345557c0f022fd737f9b7489d16b30459" translate="yes" xml:space="preserve">
          <source>Object.assign</source>
          <target state="translated">Object.assign</target>
        </trans-unit>
        <trans-unit id="b613e0c1877960091b857bf50e2e74ccf6f98f72" translate="yes" xml:space="preserve">
          <source>Object.keys(ImageResizeMode)</source>
          <target state="translated">Object.keys(ImageResizeMode)</target>
        </trans-unit>
        <trans-unit id="0b27f83babcef0eca7b16fce1b0fe3c448dcbf21" translate="yes" xml:space="preserve">
          <source>Object.{&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt;entries&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values&quot;&gt;values&lt;/a&gt;}</source>
          <target state="translated">Object. { &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt;항목&lt;/a&gt; , &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values&quot;&gt;값&lt;/a&gt; }</target>
        </trans-unit>
        <trans-unit id="9cf4af30df052d80876381f9ec0e05811ecd3d08" translate="yes" xml:space="preserve">
          <source>Objective-C</source>
          <target state="translated">Objective-C</target>
        </trans-unit>
        <trans-unit id="8dc738e59439cd67f4628f5ed2751d413bdae623" translate="yes" xml:space="preserve">
          <source>Objective-C doesn't provide any guarantees about the types of values in these structures. Your native module might expect an array of strings, but if JavaScript calls your method with an array containing numbers and strings, you'll get an &lt;code&gt;NSArray&lt;/code&gt; containing a mix of &lt;code&gt;NSNumber&lt;/code&gt; and &lt;code&gt;NSString&lt;/code&gt;. For arrays, &lt;code&gt;RCTConvert&lt;/code&gt; provides some typed collections you can use in your method declaration, such as &lt;code&gt;NSStringArray&lt;/code&gt;, or &lt;code&gt;UIColorArray&lt;/code&gt;. For maps, it is the developer's responsibility to check the value types individually by manually calling &lt;code&gt;RCTConvert&lt;/code&gt; helper methods.</source>
          <target state="translated">Objective-C는 이러한 구조의 값 유형에 대한 보증을 제공하지 않습니다. 네이티브 모듈은 문자열 배열을 기대할 수 있지만 JavaScript가 숫자와 문자열을 포함하는 배열로 메서드를 호출하면 &lt;code&gt;NSNumber&lt;/code&gt; 와 &lt;code&gt;NSString&lt;/code&gt; 이 혼합 된 &lt;code&gt;NSArray&lt;/code&gt; 를 얻게 됩니다. 배열의 경우 &lt;code&gt;RCTConvert&lt;/code&gt; 는 &lt;code&gt;NSStringArray&lt;/code&gt; 또는 &lt;code&gt;UIColorArray&lt;/code&gt; 와 같은 메서드 선언에 사용할 수있는 형식화 된 컬렉션을 제공합니다 . 맵의 경우 &lt;code&gt;RCTConvert&lt;/code&gt; 헬퍼 메소드를 수동으로 호출하여 값 유형을 개별적으로 확인하는 것은 개발자의 책임 입니다.</target>
        </trans-unit>
        <trans-unit id="6bf646a3e684ba005d4d498c07d65eeac37b6498" translate="yes" xml:space="preserve">
          <source>Off-thread Decoding</source>
          <target state="translated">스레드 외 디코딩</target>
        </trans-unit>
        <trans-unit id="4650b7c8444ff616b94752350d582c86c4e2f6c2" translate="yes" xml:space="preserve">
          <source>Ok, this is more complicated than the simple &lt;code&gt;BOOL&lt;/code&gt; case we had before. Now we have a &lt;code&gt;MKCoordinateRegion&lt;/code&gt; type that needs a conversion function, and we have custom code so that the view will animate when we set the region from JS. Within the function body that we provide, &lt;code&gt;json&lt;/code&gt; refers to the raw value that has been passed from JS. There is also a &lt;code&gt;view&lt;/code&gt; variable which gives us access to the manager's view instance, and a &lt;code&gt;defaultView&lt;/code&gt; that we use to reset the property back to the default value if JS sends us a null sentinel.</source>
          <target state="translated">좋아, 이것은 우리가 이전에했던 간단한 &lt;code&gt;BOOL&lt;/code&gt; 케이스 보다 더 복잡합니다 . 이제 변환 함수가 필요한 &lt;code&gt;MKCoordinateRegion&lt;/code&gt; 유형이 있으며 JS에서 지역을 설정할 때 뷰가 애니메이션되도록 사용자 정의 코드가 있습니다. 우리가 제공하는 함수 본문에서 &lt;code&gt;json&lt;/code&gt; 은 JS에서 전달 된 원시 값을 나타냅니다. 관리자의 뷰 인스턴스에 대한 액세스를 제공 하는 &lt;code&gt;view&lt;/code&gt; 변수와 JS가 null 센티넬을 보내면 속성을 기본값으로 다시 설정하는 데 사용 하는 &lt;code&gt;defaultView&lt;/code&gt; 도 있습니다.</target>
        </trans-unit>
        <trans-unit id="fa893d0ef3e849a46f08cda47e5f03836f7266c6" translate="yes" xml:space="preserve">
          <source>On Android 5.0+ devices connected via USB, you can use the &lt;a href=&quot;http://developer.android.com/tools/help/adb.html&quot;&gt;&lt;code&gt;adb&lt;/code&gt; command line tool&lt;/a&gt; to setup port forwarding from the device to your computer:</source>
          <target state="translated">USB를 통해 연결된 Android 5.0 이상 기기에서 &lt;a href=&quot;http://developer.android.com/tools/help/adb.html&quot;&gt; &lt;code&gt;adb&lt;/code&gt; 명령 줄 도구&lt;/a&gt; 를 사용 하여 기기에서 컴퓨터로 포트 전달을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e2510c84d6d92c12ca7b5fc380e14f233210fe47" translate="yes" xml:space="preserve">
          <source>On Android 5.0+ devices connected via USB, you can use the &lt;a href=&quot;https://developer.android.com/tools/help/adb.html&quot;&gt;&lt;code&gt;adb&lt;/code&gt; command line tool&lt;/a&gt; to setup port forwarding from the device to your computer:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daf4ce205fff2ae880949170dac864f6209b6ee3" translate="yes" xml:space="preserve">
          <source>On Android at most three buttons can be specified. Android has a concept of a neutral, negative and a positive button:</source>
          <target state="translated">Android에서는 최대 3 개의 버튼을 지정할 수 있습니다. Android에는 중립, 음수 및 양수 버튼이라는 개념이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d041e910daf2f3b4df56376e655aadad63763c69" translate="yes" xml:space="preserve">
          <source>On Android enable unbundling by editing your android/app/build.gradle file. Before the line &lt;code&gt;apply from: &quot;../../node_modules/react-native/react.gradle&quot;&lt;/code&gt; add or amend the &lt;code&gt;project.ext.react&lt;/code&gt; block:</source>
          <target state="translated">Android에서는 android / app / build.gradle 파일을 편집하여 번들 해제를 활성화하십시오. &lt;code&gt;apply from: &quot;../../node_modules/react-native/react.gradle&quot;&lt;/code&gt; 하기 전에 &lt;code&gt;project.ext.react&lt;/code&gt; 블록을 추가하거나 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="f40beb3271c796251b39cc9db0ebda4dcb3e116d" translate="yes" xml:space="preserve">
          <source>On Android, &lt;code&gt;accessible={true}&lt;/code&gt; property for a react-native View will be translated into native &lt;code&gt;focusable={true}&lt;/code&gt;.</source>
          <target state="translated">Android에서 반응 네이티브보기의 &lt;code&gt;accessible={true}&lt;/code&gt; 속성은 기본 &lt;code&gt;focusable={true}&lt;/code&gt; 로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="5ea512c65c3310827a14fce6a01de718dd6478ed" translate="yes" xml:space="preserve">
          <source>On Android, specifies how to display the selection items when the user taps on the picker:</source>
          <target state="translated">Android에서는 사용자가 선택 도구를 누를 때 선택 항목을 표시하는 방법을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="e1fc5bc0143315188ae20dd3ea3b36a84d4e1ec2" translate="yes" xml:space="preserve">
          <source>On Android, the &lt;code&gt;Platform&lt;/code&gt; module can also be used to detect the version of the Android Platform in which the app is running:</source>
          <target state="translated">Android에서 &lt;code&gt;Platform&lt;/code&gt; 모듈을 사용하여 앱이 실행중인 Android 플랫폼의 버전을 감지 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="3753c2c3b3363f89d7a731d1d0bf31cc45b88761" translate="yes" xml:space="preserve">
          <source>On Android, the tag must be a local image or video URI, such as &lt;code&gt;&quot;file:///sdcard/img.png&quot;&lt;/code&gt;.</source>
          <target state="translated">Android에서 태그는 &lt;code&gt;&quot;file:///sdcard/img.png&quot;&lt;/code&gt; 와 같은 로컬 이미지 또는 비디오 URI 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="ef7ecb6eefed448da2f20a708080a8a57e5dd1f7" translate="yes" xml:space="preserve">
          <source>On Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale: in those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be re-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.</source>
          <target state="translated">Android에서는 불투명도, 회전, 변환 및 / 또는 크기 만 수정하는 애니메이션 및 상호 작용에 유용합니다. 이러한 경우 뷰를 다시 그릴 필요가 없으며 표시 목록을 다시 실행할 필요가 없습니다. 텍스처는 다른 매개 변수로 재사용하고 재구성 할 수 있습니다. 단점은 제한된 비디오 메모리를 사용할 수 있으므로이 소품은 상호 작용 / 애니메이션이 끝날 때 다시 false로 설정해야한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="49a15724fa343a6aa664fd937fe9cf3ccb8170ea" translate="yes" xml:space="preserve">
          <source>On Mac if you not sure where is your jdk bin folder is then perform the following command to find it, &lt;code&gt;$ /usr/libexec/java_home&lt;/code&gt; it will output the directroy of jdk which looks like this, &lt;code&gt;/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home&lt;/code&gt; then navigate to that directory by the following command, &lt;code&gt;$ cd /Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/&lt;/code&gt; Now you can perform the keytool command with sudo permission as shown below, &lt;code&gt;$ sudo keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000&lt;/code&gt;&lt;em&gt;Note: Remember to keep your keystore file private and never commit it to version control.&lt;/em&gt;</source>
          <target state="translated">Mac에서 jdk bin 폴더가 어디에 있는지 확실하지 않은 경우 다음 명령을 수행하여 &lt;code&gt;$ /usr/libexec/java_home&lt;/code&gt; 실행하면 &lt;code&gt;/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home&lt;/code&gt; 과 같은 jdk의 directroy가 출력됩니다 . 8.0_161.jdk / Contents / Home 그런 다음 &lt;code&gt;$ cd /Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/&lt;/code&gt; 명령으로 해당 디렉토리로 이동하십시오. 이제 표시된대로 sudo 권한으로 keytool 명령을 수행 할 수 있습니다. 아래에서 &lt;code&gt;$ sudo keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000&lt;/code&gt; &lt;em&gt;참고 : 키 저장소 파일을 비공개로 유지하고 버전 제어에 커밋하지 마십시오. .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1ecd47cd8aadcbe6e19ca9c1778d44a060dacc20" translate="yes" xml:space="preserve">
          <source>On Windows you can find the process using port 8081 using &lt;a href=&quot;https://stackoverflow.com/questions/48198/how-can-you-find-out-which-process-is-listening-on-a-port-on-windows&quot;&gt;Resource Monitor&lt;/a&gt; and stop it using Task Manager.</source>
          <target state="translated">Windows에서는 &lt;a href=&quot;https://stackoverflow.com/questions/48198/how-can-you-find-out-which-process-is-listening-on-a-port-on-windows&quot;&gt;자원 모니터를&lt;/a&gt; 사용하여 포트 8081을 사용하여 프로세스를 찾고 작업 관리자를 사용하여 중지하십시오.</target>
        </trans-unit>
        <trans-unit id="7fb8fa89f66732c5469464e36c50ebd76dc6e414" translate="yes" xml:space="preserve">
          <source>On Windows, you might need to restart the packager if you add new images to your project.</source>
          <target state="translated">Windows에서 프로젝트에 새 이미지를 추가하면 패키지 프로그램을 다시 시작해야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="4418455a46b8fe7f0322b1c272dedfdfd03ae9f3" translate="yes" xml:space="preserve">
          <source>On a node with a measure function aspect ratio works as though the measure function measures the flex basis</source>
          <target state="translated">측정 기능 종횡비를 가진 노드에서 측정 기능이 플렉스 기준을 측정하는 것처럼 작동합니다.</target>
        </trans-unit>
        <trans-unit id="633c063def9deefbb853ff87983f194f0b4635f2" translate="yes" xml:space="preserve">
          <source>On a node with a set flex basis aspect ratio controls the size of the node in the cross axis if unset</source>
          <target state="translated">설정된 플렉스 베이시스를 가진 노드에서 가로 세로 비율은 설정되지 않은 경우 크로스 축의 노드 크기를 제어합니다</target>
        </trans-unit>
        <trans-unit id="edb14111a94a3f48ed9916a12a74bf14b2178cda" translate="yes" xml:space="preserve">
          <source>On a node with a set width/height aspect ratio control the size of the unset dimension</source>
          <target state="translated">너비 / 높이 종횡비가 설정된 노드에서 설정되지 않은 치수의 크기를 제어합니다.</target>
        </trans-unit>
        <trans-unit id="1b088ad8bc3cdfffcf41e0294b135f48d3e44085" translate="yes" xml:space="preserve">
          <source>On a node with flex grow/shrink aspect ratio controls the size of the node in the cross axis if unset</source>
          <target state="translated">플렉스 증가 / 축소 종횡비를 가진 노드에서 설정되지 않은 경우 가로 축의 노드 크기를 제어합니다</target>
        </trans-unit>
        <trans-unit id="cf738dc73871a6ba5c4db2961503318dc1698793" translate="yes" xml:space="preserve">
          <source>On devices before SDK version 23, the permissions are automatically granted if they appear in the manifest, so &lt;code&gt;check&lt;/code&gt; and &lt;code&gt;request&lt;/code&gt; should always resolve to &lt;code&gt;PermissionsAndroid.RESULTS.GRANTED&lt;/code&gt;.</source>
          <target state="translated">SDK 버전 23 이전의 기기에서는 권한이 매니페스트에 표시되면 권한이 자동으로 부여되므로 &lt;code&gt;check&lt;/code&gt; 및 &lt;code&gt;request&lt;/code&gt; 은 항상 &lt;code&gt;PermissionsAndroid.RESULTS.GRANTED&lt;/code&gt; 로 해결해야합니다 .</target>
        </trans-unit>
        <trans-unit id="27c7916f2665a916e4de70e6ee398ee36fe97fb4" translate="yes" xml:space="preserve">
          <source>On iOS devices, open the file &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/WebSocket/RCTWebSocketExecutor.m&quot;&gt;&lt;code&gt;RCTWebSocketExecutor.m&lt;/code&gt;&lt;/a&gt; and change &quot;localhost&quot; to the IP address of your computer, then select &quot;Debug JS Remotely&quot; from the Developer Menu.</source>
          <target state="translated">iOS 장치에서 &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/WebSocket/RCTWebSocketExecutor.m&quot;&gt; &lt;code&gt;RCTWebSocketExecutor.m&lt;/code&gt; &lt;/a&gt; 파일을 열고 &quot;localhost&quot;를 컴퓨터의 IP 주소로 변경 한 다음 개발자 메뉴에서 &quot;Debug JS Remotely&quot;를 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="9cead5883f80178b2439980dc7ee9f4ad151ec58" translate="yes" xml:space="preserve">
          <source>On iOS unbundling will create a single indexed file that react native will load one module at a time. On Android, by default it will create a set of files for each module. You can force Android to create a single file, like iOS, but using multiple files can be more performant and requires less memory.</source>
          <target state="translated">iOS에서 번들링은 네이티브로 반응하여 한 번에 하나의 모듈을로드하는 단일 색인 파일을 생성합니다. Android에서는 기본적으로 각 모듈에 대해 파일 세트를 작성합니다. Android에서 iOS와 같은 단일 파일을 만들도록 강요 할 수 있지만 여러 파일을 사용하면 성능이 향상되고 메모리가 덜 필요합니다.</target>
        </trans-unit>
        <trans-unit id="878af4b6749aaaf99555c47b3b1cf71c2d411527" translate="yes" xml:space="preserve">
          <source>On iOS you can specify any number of buttons. Each button can optionally specify a style, which is one of 'default', 'cancel' or 'destructive'.</source>
          <target state="translated">iOS에서는 여러 개의 버튼을 지정할 수 있습니다. 각 버튼은 선택적으로 스타일을 지정할 수 있으며 'default', 'cancel'또는 'destructive'중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="64f44f511a51de48e4140adbdfd311743f415191" translate="yes" xml:space="preserve">
          <source>On iOS, &lt;code&gt;AsyncStorage&lt;/code&gt; is backed by native code that stores small values in a serialized dictionary and larger values in separate files. On Android, &lt;code&gt;AsyncStorage&lt;/code&gt; will use either &lt;a href=&quot;http://rocksdb.org/&quot;&gt;RocksDB&lt;/a&gt; or SQLite based on what is available.</source>
          <target state="translated">iOS에서 &lt;code&gt;AsyncStorage&lt;/code&gt; 는 직렬화 된 사전에 작은 값을 저장하고 별도의 파일에 큰 값을 저장하는 기본 코드로 지원됩니다. Android에서 &lt;code&gt;AsyncStorage&lt;/code&gt; 는 사용 가능한 항목에 따라 &lt;a href=&quot;http://rocksdb.org/&quot;&gt;RocksDB&lt;/a&gt; 또는 SQLite를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="483598f501856299a3a56c8918c8577b77229d15" translate="yes" xml:space="preserve">
          <source>On iOS, &lt;code&gt;zIndex&lt;/code&gt; may require &lt;code&gt;View&lt;/code&gt;s to be siblings of each other for it to work as expected.</source>
          <target state="translated">iOS에서 &lt;code&gt;zIndex&lt;/code&gt; 는 예상대로 작동하기 위해 &lt;code&gt;View&lt;/code&gt; 가 서로 형제가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fc385a5ce7ddd584a623ea8e9998b125474add02" translate="yes" xml:space="preserve">
          <source>On iOS, each time you adjust the width or height of an Image component it is re-cropped and scaled from the original image. This can be very expensive, especially for large images. Instead, use the &lt;code&gt;transform: [{scale}]&lt;/code&gt; style property to animate the size. An example of when you might do this is when you tap an image and zoom it in to full screen.</source>
          <target state="translated">iOS에서 이미지 구성 요소의 너비 나 높이를 조정할 때마다 원본 이미지에서 자르고 크기가 조정됩니다. 특히 큰 이미지의 경우 매우 비쌀 수 있습니다. 대신 &lt;code&gt;transform: [{scale}]&lt;/code&gt; 스타일 속성을 사용하여 크기를 애니메이션으로 만드십시오. 이미지를 누르고 전체 화면으로 확대하는 경우를 예로들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="01e7520cc85651f6fcac907dc898ec8c39021264" translate="yes" xml:space="preserve">
          <source>On iOS, in the General tab and Deployment Info section of Xcode enable the Device Orientation you want to support (ensure you have selected iPhone from the Devices menu when making the changes). For Android, open the AndroidManifest.xml file and within the activity element add &lt;code&gt;'android:screenOrientation=&quot;portrait&quot;'&lt;/code&gt; to lock to portrait or &lt;code&gt;'android:screenOrientation=&quot;landscape&quot;'&lt;/code&gt; to lock to landscape.</source>
          <target state="translated">iOS의 Xcode의 일반 탭 및 배포 정보 섹션에서 지원하려는 장비 방향을 활성화하십시오 (변경할 때 장비 메뉴에서 iPhone을 선택했는지 확인하십시오). Android의 경우 AndroidManifest.xml 파일을 열고 활동 요소 내에 &lt;code&gt;'android:screenOrientation=&quot;portrait&quot;'&lt;/code&gt; 를 추가하여 세로로 고정하고 &lt;code&gt;'android:screenOrientation=&quot;landscape&quot;'&lt;/code&gt; 를 가로로 고정하십시오.</target>
        </trans-unit>
        <trans-unit id="800c06becdfc67c238462a7d4952a228d83beca6" translate="yes" xml:space="preserve">
          <source>On iOS, the &lt;code&gt;CameraRoll&lt;/code&gt; API requires the &lt;code&gt;RCTCameraRoll&lt;/code&gt; library to be linked. You can refer to &lt;a href=&quot;linking-libraries-ios&quot;&gt;Linking Libraries (iOS)&lt;/a&gt; to learn more.</source>
          <target state="translated">iOS에서 &lt;code&gt;CameraRoll&lt;/code&gt; API를 사용하려면 &lt;code&gt;RCTCameraRoll&lt;/code&gt; 라이브러리를 연결 해야합니다 . 자세한 내용은 &lt;a href=&quot;linking-libraries-ios&quot;&gt;라이브러리 연결 (iOS)&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="eb03b8755a2d5976083e52b28bf54055ddb77664" translate="yes" xml:space="preserve">
          <source>On iOS, the &lt;code&gt;Version&lt;/code&gt; is a result of &lt;code&gt;-[UIDevice systemVersion]&lt;/code&gt;, which is a string with the current version of the operating system. An example of the system version is &quot;10.3&quot;. For example, to detect the major version number on iOS:</source>
          <target state="translated">iOS에서 &lt;code&gt;Version&lt;/code&gt; 은 &lt;code&gt;-[UIDevice systemVersion]&lt;/code&gt; 의 결과이며 운영 체제의 현재 버전이 포함 된 문자열입니다. 시스템 버전의 예는 &quot;10.3&quot;입니다. 예를 들어 iOS에서 주요 버전 번호를 감지하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="601cd82e13af6fb4a741167a8abe609a6ba97a34" translate="yes" xml:space="preserve">
          <source>On iOS, the tag can be any image URI (including local, remote asset-library and base64 data URIs) or a local video file URI (remote or data URIs are not supported for saving video at this time).</source>
          <target state="translated">iOS에서 태그는 모든 이미지 URI (로컬, 원격 자산 라이브러리 및 base64 데이터 URI 포함) 또는 로컬 비디오 파일 URI (원격 또는 데이터 URI는 현재 비디오 저장을 지원하지 않음) 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7af03ed36799cc407f7cefa87fdec97c658055e5" translate="yes" xml:space="preserve">
          <source>On iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children; for example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view and quickly composite it during each frame.</source>
          <target state="translated">iOS에서이 구성 요소의 크기 나 하위 요소를 수정하지 않는 애니메이션 및 상호 작용에 유용합니다. 예를 들어 정적 뷰의 위치를 ​​변환 할 때 래스터 화를 통해 렌더러는 정적 뷰의 캐시 된 비트 맵을 재사용하고 각 프레임 동안이를 빠르게 합성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5cdf50d2f9b3540e22c04a119667836e6860e7a" translate="yes" xml:space="preserve">
          <source>On iOS, you can nest views within your Text component. Here's an example:</source>
          <target state="translated">iOS에서는 텍스트 구성 요소 내에보기를 중첩 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="09d54ef8557cc8a79cdb9d125ffede002c47147b" translate="yes" xml:space="preserve">
          <source>On mobile phones it's hard to be very precise when pressing buttons. Make sure all interactive elements are 44x44 or larger. One way to do this is to leave enough space for the element, &lt;code&gt;padding&lt;/code&gt;, &lt;code&gt;minWidth&lt;/code&gt; and &lt;code&gt;minHeight&lt;/code&gt; style values can be useful for that. Alternatively, you can use &lt;a href=&quot;touchablewithoutfeedback#hitslop&quot;&gt;&lt;code&gt;hitSlop&lt;/code&gt; prop&lt;/a&gt; to increase interactive area without affecting the layout. Here's a demo:</source>
          <target state="translated">휴대 전화에서는 버튼을 누를 때 매우 정확하지 않습니다. 모든 대화식 요소가 44x44 이상인지 확인하십시오. 이를 수행하는 한 가지 방법은 &lt;code&gt;padding&lt;/code&gt; , &lt;code&gt;minWidth&lt;/code&gt; 및 &lt;code&gt;minHeight&lt;/code&gt; 스타일 값 이 요소에 충분한 공간을 확보 하는 것입니다. 또는 &lt;a href=&quot;touchablewithoutfeedback#hitslop&quot;&gt; &lt;code&gt;hitSlop&lt;/code&gt; prop&lt;/a&gt; 을 사용 하여 레이아웃에 영향을주지 않고 대화식 영역을 늘릴 수 있습니다 . 데모는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="19683774cbe45aaa00899fab0e3dea2dc22fef88" translate="yes" xml:space="preserve">
          <source>On the infrastructure side, the reason is that it allows us to attach metadata to this object. For example if you are using &lt;code&gt;require('./my-icon.png')&lt;/code&gt;, then we add information about its actual location and size (don't rely on this fact, it might change in the future!). This is also future proofing, for example we may want to support sprites at some point, instead of outputting &lt;code&gt;{uri: ...}&lt;/code&gt;, we can output &lt;code&gt;{uri: ..., crop: {left: 10, top: 50, width: 20, height: 40}}&lt;/code&gt; and transparently support spriting on all the existing call sites.</source>
          <target state="translated">인프라 측면에서는 메타 데이터를이 개체에 첨부 할 수 있기 때문입니다. 예를 들어 &lt;code&gt;require('./my-icon.png')&lt;/code&gt; 를 사용 하는 경우 실제 위치와 크기에 대한 정보를 추가합니다 (이 사실에 의존하지 않으면 나중에 변경 될 수 있습니다). 예를 들어 &lt;code&gt;{uri: ...}&lt;/code&gt; 을 출력하는 대신 스프라이트를 지원하고 싶을 수도 있습니다. &lt;code&gt;{uri: ..., crop: {left: 10, top: 50, width: 20, height: 40}}&lt;/code&gt; 이며 기존의 모든 호출 사이트에서 스프라이트를 투명하게 지원합니다.</target>
        </trans-unit>
        <trans-unit id="e1bc6e232de7728a905515c8accd95d54837d70c" translate="yes" xml:space="preserve">
          <source>On the left side, you'll see a set of threads which correspond to the timeline rows on the right. There are a few threads we care about for our purposes: the UI thread (which has your package name or the name UI Thread), &lt;code&gt;mqt_js&lt;/code&gt;, and &lt;code&gt;mqt_native_modules&lt;/code&gt;. If you're running on Android 5+, we also care about the Render Thread.</source>
          <target state="translated">왼쪽에는 오른쪽의 타임 라인 행에 해당하는 스레드 세트가 있습니다. UI 스레드 (패키지 이름 또는 UI 스레드 이름이있는 UI 스레드), &lt;code&gt;mqt_js&lt;/code&gt; 및 &lt;code&gt;mqt_native_modules&lt;/code&gt; 와 같은 몇 가지 스레드가 있습니다 . Android 5 이상에서 실행중인 경우 렌더 스레드도 중요합니다.</target>
        </trans-unit>
        <trans-unit id="28fa19745a7512e90cafc29e2779852c5d0c853c" translate="yes" xml:space="preserve">
          <source>On the other hand, this has a performance downside. Imagine you have a very long list of items you want to display, maybe several screens worth of content. Creating JS components and native views for everything all at once, much of which may not even be shown, will contribute to slow rendering and increased memory usage.</source>
          <target state="translated">반면에 이것은 성능 저하가 있습니다. 표시하려는 항목이 매우 길고 여러 화면에 해당하는 내용이 있다고 상상해보십시오. 한 번에 모든 내용에 대해 JS 구성 요소 및 기본 뷰를 만들면 대부분 표시되지 않을 수 있으므로 렌더링 속도가 느려지고 메모리 사용량이 증가합니다.</target>
        </trans-unit>
        <trans-unit id="9e2fa8c13b471573c501f594b1762d155d5ae232" translate="yes" xml:space="preserve">
          <source>On the user side, this lets you annotate the object with useful attributes such as the dimension of the image in order to compute the size it's going to be displayed in. Feel free to use it as your data structure to store more information about your image.</source>
          <target state="translated">사용자 측에서는 이미지의 크기와 같은 유용한 속성으로 객체에 주석을 달아 표시 될 크기를 계산할 수 있습니다. 이미지에 대한 추가 정보를 저장하기 위해 데이터 구조로 사용하십시오. .</target>
        </trans-unit>
        <trans-unit id="b67effc4df15fed33944764e63303ff24823ae06" translate="yes" xml:space="preserve">
          <source>On the web, the usual way to set a font family and size for the entire document is to take advantage of inherited CSS properties like so:</source>
          <target state="translated">웹에서 전체 문서의 글꼴 모음과 크기를 설정하는 일반적인 방법은 상속 된 CSS 속성을 다음과 같이 활용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="820dfbae38dc6f651e598e8deb2156dd02dc33f3" translate="yes" xml:space="preserve">
          <source>Once setup has finalized and you're presented with the Welcome screen, proceed to the next step.</source>
          <target state="translated">설정이 완료되고 시작 화면이 표시되면 다음 단계로 진행하십시오.</target>
        </trans-unit>
        <trans-unit id="6b2fae18d31e3b5e790d236bceb099a2178c4d78" translate="yes" xml:space="preserve">
          <source>Once the trace starts collecting, perform the animation or interaction you care about. At the end of the trace, systrace will give you a link to the trace which you can open in your browser.</source>
          <target state="translated">추적이 수집을 시작하면 관심있는 애니메이션 또는 상호 작용을 수행하십시오. 추적이 끝나면 systrace는 브라우저에서 열 수있는 추적에 대한 링크를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="63fc1a3a418eeb2936f0091dfb1e76b0fa6fcc61" translate="yes" xml:space="preserve">
          <source>Once you have an emulator running, to run the integration tests:</source>
          <target state="translated">에뮬레이터가 실행되면 통합 테스트를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="5a7e1172e055756e0ccc13432a28988634a3ee0b" translate="yes" xml:space="preserve">
          <source>Once you have your React Native project initialized, you can run &lt;code&gt;react-native run-ios&lt;/code&gt; inside the newly created project directory. If everything is set up correctly, you should see your new app running in the iOS Simulator shortly.</source>
          <target state="translated">React Native 프로젝트가 초기화되면 새로 생성 된 프로젝트 디렉토리 내에서 &lt;code&gt;react-native run-ios&lt;/code&gt; 수 있습니다 . 모든 것이 올바르게 설정되면 iOS 시뮬레이터에서 곧 새로운 앱이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="9c214897f7c5341fbc508a6b3aba0dd7aab37d72" translate="yes" xml:space="preserve">
          <source>Once you open a pull request, this is how you can expect maintainers to review it:</source>
          <target state="translated">풀 요청을 열면 다음과 같이 관리자가이를 검토 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8e4d52fc5ce3ba8e2449d641b68706b66af22441" translate="yes" xml:space="preserve">
          <source>Once you publish the app on the Play Store, you will need to republish your app under a different package name (losing all downloads and ratings) if you want to change the signing key at any point. So backup your keystore and don't forget the passwords.</source>
          <target state="translated">Play 스토어에 앱을 게시 한 후 언제든지 서명 키를 변경하려면 앱을 다른 패키지 이름 (모든 다운로드 및 등급을 잃음)으로 다시 게시해야합니다. 따라서 키 저장소를 백업하고 비밀번호를 잊지 마십시오.</target>
        </trans-unit>
        <trans-unit id="68c480b09c86ccb4820523ff1822132e5e3a8911" translate="yes" xml:space="preserve">
          <source>Once you reach your React-powered activity inside the app, it should load the JavaScript code from the development server and display:</source>
          <target state="translated">앱 내에서 React 기반 활동에 도달하면 개발 서버에서 JavaScript 코드를로드하고 다음을 표시해야합니다.</target>
        </trans-unit>
        <trans-unit id="3a49eeb3fb6c13f6cd401408dcaea6d8c65b9200" translate="yes" xml:space="preserve">
          <source>Once you've set these up, you can launch your app on an Android Virtual Device by running &lt;code&gt;npm run android&lt;/code&gt;, or on the iOS Simulator by running &lt;code&gt;npm run ios&lt;/code&gt; (macOS only).</source>
          <target state="translated">설정 한 후에는 &lt;code&gt;npm run android&lt;/code&gt; 를 실행하여 Android 가상 장치 에서 또는 &lt;code&gt;npm run ios&lt;/code&gt; (macOS 만) 를 실행하여 iOS 시뮬레이터에서 앱을 시작할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cbe67342194619da4ff7e2f5ed112c961279943c" translate="yes" xml:space="preserve">
          <source>One case where I have used this is for animating in a modal (sliding down from top and fading in a translucent overlay) while initializing and perhaps receiving responses for several network requests, rendering the contents of the modal, and updating the view where the modal was opened from. See the Animations guide for more information about how to use LayoutAnimation.</source>
          <target state="translated">내가 이것을 사용한 한 가지 사례는 여러 네트워크 요청에 대한 응답을 초기화하고 수신하고 모달의 내용을 렌더링하며 모달이있는 뷰를 업데이트하는 동안 모달에서 애니메이션 (위에서 아래로 슬라이딩 및 반투명 오버레이에서 페이딩)하는 것입니다 에서 열렸습니다. LayoutAnimation 사용 방법에 대한 자세한 내용은 애니메이션 안내서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="41de1fa48e43a6265cb53f48753c01978663836a" translate="yes" xml:space="preserve">
          <source>One common pattern is to make your component accept a &lt;code&gt;style&lt;/code&gt; prop which in turn is used to style subcomponents. You can use this to make styles &quot;cascade&quot; the way they do in CSS.</source>
          <target state="translated">일반적인 패턴 중 하나는 구성 요소에 &lt;code&gt;style&lt;/code&gt; 소품을 적용하여 하위 구성 요소의 스타일을 지정하는 것입니다. 이를 사용하여 CSS에서 스타일을 &quot;캐스케이드&quot;방식으로 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="375926ff54dc430830ca673dedca519682928b6c" translate="yes" xml:space="preserve">
          <source>One common question is how to handle the &quot;state&quot; of your React Native application. The most popular library for this is &lt;a href=&quot;http://redux.js.org/&quot;&gt;Redux&lt;/a&gt;. Don't be afraid of how often Redux uses the word &quot;reducer&quot; - it's a pretty simple library, and there's also a nice &lt;a href=&quot;https://egghead.io/courses/getting-started-with-redux&quot;&gt;series of videos&lt;/a&gt; explaining it.</source>
          <target state="translated">일반적인 질문 중 하나는 React Native 애플리케이션의 &quot;상태&quot;를 처리하는 방법입니다. 가장 인기있는 라이브러리는 &lt;a href=&quot;http://redux.js.org/&quot;&gt;Redux&lt;/a&gt; 입니다. Redux가 &quot;reducer&quot;라는 단어를 얼마나 자주 사용하는지 두려워하지 마십시오. 매우 간단한 라이브러리이며 이를 설명 하는 멋진 &lt;a href=&quot;https://egghead.io/courses/getting-started-with-redux&quot;&gt;비디오 시리즈도 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d0f9e92a2fc4a8d4483718419a3b4ca01123b283" translate="yes" xml:space="preserve">
          <source>One great way you can contribute to the project without writing any code is to help triage issues and pull requests as they come in.</source>
          <target state="translated">코드를 작성하지 않고 프로젝트에 기여할 수있는 좋은 방법 중 하나는 문제를 심사하고 요청이 들어 오면이를 끌어내는 것입니다.</target>
        </trans-unit>
        <trans-unit id="7abca6337d8819557cf45aaca55d74fde4c85892" translate="yes" xml:space="preserve">
          <source>One of the easier ways to do this is to open the view in the storyboard and right click on the new link. Select something such as the &lt;code&gt;Touch Up Inside&lt;/code&gt; event, drag that to the storyboard and then select the created method from the list provided.</source>
          <target state="translated">이를 수행하는 가장 쉬운 방법 중 하나는 스토리 보드에서보기를 열고 새 링크를 마우스 오른쪽 단추로 클릭하는 것입니다. &lt;code&gt;Touch Up Inside&lt;/code&gt; 이벤트 와 같은 것을 선택 하고 스토리 보드로 끈 다음 제공된 목록에서 생성 된 방법을 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="62ad0ad6d3a92db3fb69ec96322a9daf3b615a74" translate="yes" xml:space="preserve">
          <source>One of the most common uses for a list view is displaying data that you fetch from a server. To do that, you will need to &lt;a href=&quot;network&quot;&gt;learn about networking in React Native&lt;/a&gt;.</source>
          <target state="translated">목록보기의 가장 일반적인 용도 중 하나는 서버에서 가져온 데이터를 표시하는 것입니다. 그렇게하려면 &lt;a href=&quot;network&quot;&gt;React Native의 네트워킹에 대해 배워야&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="ae1e97658309746e3edf620bc258cf8fc553b668" translate="yes" xml:space="preserve">
          <source>One reason why well-built native apps feel so smooth is by avoiding expensive operations during interactions and animations. In React Native, we currently have a limitation that there is only a single JS execution thread, but you can use &lt;code&gt;InteractionManager&lt;/code&gt; to make sure long-running work is scheduled to start after any interactions/animations have completed.</source>
          <target state="translated">잘 구축 된 기본 앱이 그렇게 매끄럽게 느껴지는 이유 중 하나는 상호 작용 및 애니메이션 중에 값 비싼 작업을 피하는 것입니다. React Native에는 현재 단일 JS 실행 스레드 만 있다는 제한 사항이 있지만 &lt;code&gt;InteractionManager&lt;/code&gt; 를 사용하여 상호 작용 / 애니메이션이 완료된 후 장기 실행 작업이 시작되도록 예약 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="82fbeacd6f71b171f925dda8de57900857209145" translate="yes" xml:space="preserve">
          <source>One solution to this is to allow for JavaScript-based animations to be offloaded to the main thread. If we were to do the same thing as in the above example with this approach, we might calculate a list of all x-offsets for the new scene when we are starting the transition and send them to the main thread to execute in an optimized way. Now that the JavaScript thread is freed of this responsibility, it's not a big deal if it drops a few frames while rendering the scene -- you probably won't even notice because you will be too distracted by the pretty transition.</source>
          <target state="translated">이에 대한 한 가지 해결책은 JavaScript 기반 애니메이션을 기본 스레드로 오프로드하는 것입니다. 이 방법으로 위의 예에서와 동일한 작업을 수행하는 경우 전환을 시작할 때 새 장면에 대한 모든 x 오프셋 목록을 계산하여 기본 스레드로 보내 최적화 된 방식으로 실행할 수 있습니다 . 이제 JavaScript 스레드에 이러한 책임이 없어 졌으므로 장면을 렌더링하는 동안 몇 프레임을 떨어 뜨린 경우 큰 문제가되지 않습니다. 예쁜 전환으로 인해주의가 산만해질 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="999a83830342bb71dd64fbe3deaca1d4d7d98753" translate="yes" xml:space="preserve">
          <source>Only animatable components can be animated. These special components do the magic of binding the animated values to the properties, and do targeted native updates to avoid the cost of the react render and reconciliation process on every frame. They also handle cleanup on unmount so they are safe by default.</source>
          <target state="translated">애니메이션 가능한 구성 요소 만 애니메이션 할 수 있습니다. 이러한 특수 구성 요소는 애니메이션 값을 속성에 바인딩하는 마법을 수행하고 모든 프레임에서 반응 렌더링 및 조정 프로세스의 비용을 피하기 위해 기본 업데이트를 수행합니다. 또한 마운트 해제시 정리를 처리하므로 기본적으로 안전합니다.</target>
        </trans-unit>
        <trans-unit id="36f494ecf8194204f825de20f3d169a0339f6c16" translate="yes" xml:space="preserve">
          <source>Only called for multiline text inputs.</source>
          <target state="translated">여러 줄 문자 입력에만 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="a8b092c822c371f6dbeb229dd56331c9a48640c6" translate="yes" xml:space="preserve">
          <source>Only called from native code. Starts a headless task.</source>
          <target state="translated">네이티브 코드에서만 호출됩니다. 헤드리스 작업을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="2dff57ae74e043e0f2b06bc8e0d24bf10d1f4549" translate="yes" xml:space="preserve">
          <source>Only re-render changed rows - the rowHasChanged function provided to the data source tells the ListView if it needs to re-render a row because the source data has changed - see ListViewDataSource for more details.</source>
          <target state="translated">변경된 행만 다시 렌더링하십시오. 데이터 소스에 제공된 rowHasChanged 함수는 소스 데이터가 변경되어 행을 다시 렌더링해야하는지 ListView에 알려줍니다. 자세한 내용은 ListViewDataSource를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="897770dd61027cef6bb900ca1131640bfd745ffd" translate="yes" xml:space="preserve">
          <source>Only the images that are actually used will be packaged into your app.</source>
          <target state="translated">실제로 사용되는 이미지 만 앱에 패키지됩니다.</target>
        </trans-unit>
        <trans-unit id="8f6a49cf1332bb3f265c79bf622d0daeec7e847f" translate="yes" xml:space="preserve">
          <source>Opacity is controlled by wrapping the children in an Animated.View, which is added to the view hierarchy. Be aware that this can affect layout.</source>
          <target state="translated">불투명도는 뷰 계층 구조에 추가되는 Animated.View에 자식을 배치하여 제어됩니다. 레이아웃에 영향을 줄 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fae0d535829dc5e73be271a32077f0beccf6af10" translate="yes" xml:space="preserve">
          <source>Open &lt;code&gt;App.js&lt;/code&gt; in your text editor of choice and edit some lines.</source>
          <target state="translated">선택한 텍스트 편집기에서 &lt;code&gt;App.js&lt;/code&gt; 를 열고 일부 행을 편집하십시오.</target>
        </trans-unit>
        <trans-unit id="8ebdd564af88b9fe69a4d0c308edb7892cc11628" translate="yes" xml:space="preserve">
          <source>Open &lt;code&gt;android/app/src/main/java/com/{yourAppName}/MainApplication.java&lt;/code&gt; and replace the original &lt;code&gt;onCreate&lt;/code&gt; function:</source>
          <target state="translated">열기 &lt;code&gt;android/app/src/main/java/com/{yourAppName}/MainApplication.java&lt;/code&gt; 원래의 교체 &lt;code&gt;onCreate&lt;/code&gt; 기능 :</target>
        </trans-unit>
        <trans-unit id="1bf483d40edc2dda37c08b2c1afe6618ae450f54" translate="yes" xml:space="preserve">
          <source>Open a dialog to share text content.</source>
          <target state="translated">대화 상자를 열어서 텍스트 내용을 공유하십시오.</target>
        </trans-unit>
        <trans-unit id="97faaadb2e2485cb8c2d38aae18097501bae7ea6" translate="yes" xml:space="preserve">
          <source>Open a new Command Prompt window to ensure the new environment variable is loaded before proceeding to the next step.</source>
          <target state="translated">다음 단계로 진행하기 전에 새 명령 프롬프트 창을 열어서 새 환경 변수가로드되었는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="055001dc424e48bb966782d9f00b5f94e02409ce" translate="yes" xml:space="preserve">
          <source>Open a terminal and type &lt;code&gt;/sbin/ifconfig&lt;/code&gt; to find your machine's IP address.</source>
          <target state="translated">터미널을 열고 &lt;code&gt;/sbin/ifconfig&lt;/code&gt; 를 입력 하여 컴퓨터의 IP 주소를 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="fad1e10ae7b1fdb0a493631465d5ff2c90d76a09" translate="yes" xml:space="preserve">
          <source>Open an Administrator Command Prompt (right click Command Prompt and select &quot;Run as Administrator&quot;), then run the following command:</source>
          <target state="translated">관리자 명령 프롬프트를 열고 (명령 프롬프트를 마우스 오른쪽 단추로 클릭하고 &quot;관리자 권한으로 실행&quot;을 선택한 후) 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="ae249ced65d4d94aa4f9d837e894db946c1f76ca" translate="yes" xml:space="preserve">
          <source>Open the &lt;strong&gt;Report navigator&lt;/strong&gt; tab, select the last &lt;strong&gt;Build&lt;/strong&gt; and search for &lt;code&gt;xip.io&lt;/code&gt;. The IP address which gets embedded in the app should match your machines IP address plus the domain &lt;code&gt;.xip.io&lt;/code&gt; (e.g. 10.0.1.123.xip.io)</source>
          <target state="translated">&lt;strong&gt;Report navigator&lt;/strong&gt; 탭을 열고 마지막 &lt;strong&gt;빌드를&lt;/strong&gt; 선택한 다음 &lt;code&gt;xip.io&lt;/code&gt; 를 검색 &lt;strong&gt;하십시오&lt;/strong&gt; . 앱에 내장 된 IP 주소는 컴퓨터의 IP 주소와 도메인 &lt;code&gt;.xip.io&lt;/code&gt; (예 : 10.0.1.123.xip.io) 와 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="2b6b80e044d9b4262f96e563b5b1573da7eb1e18" translate="yes" xml:space="preserve">
          <source>Open the System pane under &lt;strong&gt;System and Security&lt;/strong&gt; in the Windows Control Panel, then click on &lt;strong&gt;Change settings...&lt;/strong&gt;. Open the &lt;strong&gt;Advanced&lt;/strong&gt; tab and click on &lt;strong&gt;Environment Variables...&lt;/strong&gt;. Click on &lt;strong&gt;New...&lt;/strong&gt; to create a new &lt;code&gt;ANDROID_HOME&lt;/code&gt; user variable that points to the path to your Android SDK:</source>
          <target state="translated">Windows 제어판의 &lt;strong&gt;시스템 및 보안&lt;/strong&gt; 에서 시스템 창을 연 다음 &lt;strong&gt;설정 변경 ...&lt;/strong&gt; 을 클릭하십시오 . 열기 &lt;strong&gt;고급&lt;/strong&gt; 탭을하고 클릭 &lt;strong&gt;... 환경 변수&lt;/strong&gt; . &lt;strong&gt;새로&lt;/strong&gt; 작성 &lt;strong&gt;...&lt;/strong&gt; 을 클릭 하여 Android SDK의 경로를 가리키는 새 &lt;code&gt;ANDROID_HOME&lt;/code&gt; 사용자 변수 를 작성 하십시오.</target>
        </trans-unit>
        <trans-unit id="c79011122119fc71d52265d271112b06ae6129b6" translate="yes" xml:space="preserve">
          <source>Open the command prompt and type &lt;code&gt;ipconfig&lt;/code&gt; to find your machine's IP address (&lt;a href=&quot;http://windows.microsoft.com/en-us/windows/using-command-line-tools-networking-information&quot;&gt;more info&lt;/a&gt;).</source>
          <target state="translated">명령 프롬프트를 열고 &lt;code&gt;ipconfig&lt;/code&gt; 를 입력 하여 시스템의 IP 주소를 찾으십시오 ( &lt;a href=&quot;http://windows.microsoft.com/en-us/windows/using-command-line-tools-networking-information&quot;&gt;추가 정보&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="5f4f76aa723d822244368c7dd58a338f0228ccad" translate="yes" xml:space="preserve">
          <source>Open the in-app &lt;a href=&quot;debugging#accessing-the-in-app-developer-menu&quot;&gt;Developer menu&lt;/a&gt;.</source>
          <target state="translated">인앱 &lt;a href=&quot;debugging#accessing-the-in-app-developer-menu&quot;&gt;개발자 메뉴를 엽니 다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="77d5215e829fa4fe16cc2b01e85ec49f679f3a43" translate="yes" xml:space="preserve">
          <source>Open the in-app developer menu and choose &quot;Show Inspector&quot;. It will bring up an overlay that lets you tap on any UI element and see information about it:</source>
          <target state="translated">인앱 개발자 메뉴를 열고 &quot;검사기 표시&quot;를 선택하십시오. UI 요소를 탭하고 이에 대한 정보를 볼 수있는 오버레이가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="fe6cb8635f87d0e2add1e3aa3c449fc7ff5d6b21" translate="yes" xml:space="preserve">
          <source>Open the project in Android Studio and resolve any dependency issues. The IDE should guide you through this steps after hovering your pointer over the red lines.</source>
          <target state="translated">Android Studio에서 프로젝트를 열고 종속성 문제를 해결하십시오. IDE는 포인터를 빨간 선 위로 가져간 후이 단계를 안내해야합니다.</target>
        </trans-unit>
        <trans-unit id="98b04707f3c5540310b148eb0181361372411f97" translate="yes" xml:space="preserve">
          <source>Open your &lt;code&gt;android/app/src/main/AndroidManifest.xml&lt;/code&gt; file.</source>
          <target state="translated">열려있는 &lt;code&gt;android/app/src/main/AndroidManifest.xml&lt;/code&gt; 파일을.</target>
        </trans-unit>
        <trans-unit id="c98ac7df7f88aec9fb8afe85ca64c73aa80b4fb8" translate="yes" xml:space="preserve">
          <source>Open your React Native app on your device.</source>
          <target state="translated">기기에서 React Native 앱을 엽니 다.</target>
        </trans-unit>
        <trans-unit id="1521d7c932e843066f546c6588e08986565f39fe" translate="yes" xml:space="preserve">
          <source>Opening external links</source>
          <target state="translated">외부 링크 열기</target>
        </trans-unit>
        <trans-unit id="d8ffeeedae99878303bcc6b33b874efdc4cf03e6" translate="yes" xml:space="preserve">
          <source>Opening tab in chrome &lt;a href=&quot;chrome://tracing&quot;&gt;chrome://tracing&lt;/a&gt;</source>
          <target state="translated">크롬 &lt;a href=&quot;chrome://tracing&quot;&gt;chrome : // tracing&lt;/a&gt; 에서 열기 탭</target>
        </trans-unit>
        <trans-unit id="367dc8280f1c23a92a737793ffd9698bea9fb574" translate="yes" xml:space="preserve">
          <source>Opens the drawer.</source>
          <target state="translated">서랍을 엽니 다.</target>
        </trans-unit>
        <trans-unit id="b961abd5043e620e9999191bb33845148df4c95a" translate="yes" xml:space="preserve">
          <source>Opens the standard Android date picker dialog.</source>
          <target state="translated">표준 Android 날짜 선택기 대화 상자를 엽니 다.</target>
        </trans-unit>
        <trans-unit id="fa800150a748be9f8910787aad0785ff3f2cb532" translate="yes" xml:space="preserve">
          <source>Opens the standard Android time picker dialog.</source>
          <target state="translated">표준 Android 시간 선택기 대화 상자를 엽니 다.</target>
        </trans-unit>
        <trans-unit id="535600629c7816fa7b39e8fcec50a06d23236abc" translate="yes" xml:space="preserve">
          <source>Optimized.js</source>
          <target state="translated">Optimized.js</target>
        </trans-unit>
        <trans-unit id="b822029d4db1f225e06d878d91e1807a35630ccc" translate="yes" xml:space="preserve">
          <source>Optimizing for zero listeners</source>
          <target state="translated">제로 리스너 최적화</target>
        </trans-unit>
        <trans-unit id="40b0519cc38e61f7177aed208c6c3f340c1fc654" translate="yes" xml:space="preserve">
          <source>Optional animation when changing the status bar hidden property.</source>
          <target state="translated">상태 표시 줄 숨김 속성을 변경할 때의 선택적 애니메이션.</target>
        </trans-unit>
        <trans-unit id="8bc3954f57525051cfd18ae0cc14aa3a83daf9d5" translate="yes" xml:space="preserve">
          <source>Optional custom style for multi-item rows generated when &lt;code&gt;numColumns &amp;gt; 1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;numColumns &amp;gt; 1&lt;/code&gt; 때 생성되는 다중 항목 행에 대한 선택적 사용자 정의 스타일 .</target>
        </trans-unit>
        <trans-unit id="9c950c46556191100cb896f7f02759b36b541ab2" translate="yes" xml:space="preserve">
          <source>Optional horizontal mode.</source>
          <target state="translated">선택적 수평 모드.</target>
        </trans-unit>
        <trans-unit id="7a96447fec2a30e4b551fd678abc6a5598e15eb3" translate="yes" xml:space="preserve">
          <source>Optional key to keep track of section re-ordering. If you don't plan on re-ordering sections, the array index will be used by default.</source>
          <target state="translated">섹션 순서 변경을 추적하기위한 선택적 키. 섹션 순서를 바꾸지 않으려면 기본적으로 배열 인덱스가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a42b8e00352b5660b90696f4b05c93033fc1d1b5" translate="yes" xml:space="preserve">
          <source>Optional props:</source>
          <target state="translated">옵션 소품 :</target>
        </trans-unit>
        <trans-unit id="010e1c7312e9b90801ec49c9d468b8acdee6e24a" translate="yes" xml:space="preserve">
          <source>Optionally define an arbitrary item renderer for this section, overriding the default &lt;a href=&quot;sectionlist#renderitem&quot;&gt;&lt;code&gt;renderItem&lt;/code&gt;&lt;/a&gt; for the list.</source>
          <target state="translated">선택적으로이 섹션에 대한 임의의 항목 렌더러를 정의 하여 목록 의 기본 &lt;a href=&quot;sectionlist#renderitem&quot;&gt; &lt;code&gt;renderItem&lt;/code&gt; &lt;/a&gt; 을 재정의 합니다.</target>
        </trans-unit>
        <trans-unit id="763d65307296453d46880e66c1fa8c41685c1271" translate="yes" xml:space="preserve">
          <source>Optionally define an arbitrary item separator for this section, overriding the default &lt;a href=&quot;sectionlist#itemseparatorcomponent&quot;&gt;&lt;code&gt;ItemSeparatorComponent&lt;/code&gt;&lt;/a&gt; for the list.</source>
          <target state="translated">선택적으로이 섹션에 대한 임의의 항목 구분 기호를 정의 하여 목록 의 기본 &lt;a href=&quot;sectionlist#itemseparatorcomponent&quot;&gt; &lt;code&gt;ItemSeparatorComponent&lt;/code&gt; &lt;/a&gt; 를 대체하십시오 .</target>
        </trans-unit>
        <trans-unit id="dbef5dfba5ca9021c0412414355b7d10c955e8a5" translate="yes" xml:space="preserve">
          <source>Optionally define an arbitrary key extractor for this section, overriding the default &lt;a href=&quot;sectionlist#keyextractor&quot;&gt;&lt;code&gt;keyExtractor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">선택적으로이 섹션에 대한 임의의 키 추출기를 정의하여 기본 &lt;a href=&quot;sectionlist#keyextractor&quot;&gt; &lt;code&gt;keyExtractor&lt;/code&gt; 를&lt;/a&gt; 대체하십시오 .</target>
        </trans-unit>
        <trans-unit id="ff11fc111cb0ad51b9c144c6f9538e1c0e687eeb" translate="yes" xml:space="preserve">
          <source>Optionally provide a list of buttons. Tapping any button will fire the respective onPress callback and dismiss the alert. By default, the only button will be an 'OK' button.</source>
          <target state="translated">선택적으로 단추 목록을 제공하십시오. 아무 버튼이나 누르면 해당 onPress 콜백이 실행되고 경고가 해제됩니다. 기본적으로 유일한 버튼은 '확인'버튼입니다.</target>
        </trans-unit>
        <trans-unit id="cb456f6a24c3e34562dd4ece251be2e05f7bdbf6" translate="yes" xml:space="preserve">
          <source>Optionally restricts the set of canceled notifications to those notifications whose &lt;code&gt;userInfo&lt;/code&gt; fields match the corresponding fields in the &lt;code&gt;userInfo&lt;/code&gt; argument.</source>
          <target state="translated">선택적으로 취소 된 알림 세트를 &lt;code&gt;userInfo&lt;/code&gt; 필드가 &lt;code&gt;userInfo&lt;/code&gt; 인수 의 해당 필드와 일치하는 알림으로 제한합니다 .</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="a0762e6d59290d3d745c06059a8fdd8db1d8b2d5" translate="yes" xml:space="preserve">
          <source>Other app extensions</source>
          <target state="translated">다른 앱 확장</target>
        </trans-unit>
        <trans-unit id="3e855e8ac1ea176ae02571193faa4b45bca76638" translate="yes" xml:space="preserve">
          <source>Other configuration options are as follows:</source>
          <target state="translated">다른 구성 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6196adf569a1022a6b31e62f8fd97059836c3a97" translate="yes" xml:space="preserve">
          <source>Other native methods</source>
          <target state="translated">다른 기본 방법</target>
        </trans-unit>
        <trans-unit id="210ea0ecdbd7e355869cfc2087dec46165e8335f" translate="yes" xml:space="preserve">
          <source>Other types of app extensions have greater memory limits than the Today widget. For instance, Custom Keyboard extensions are limited to 48 MB, and Share extensions are limited to 120 MB. Implementing such app extensions with React Native is more viable. One proof of concept example is &lt;a href=&quot;https://github.com/andrewsardone/react-native-ios-share-extension&quot;&gt;react-native-ios-share-extension&lt;/a&gt;.</source>
          <target state="translated">다른 유형의 앱 확장에는 오늘 위젯보다 메모리 제한이 더 큽니다. 예를 들어, 사용자 정의 키보드 확장은 48MB로 제한되고 공유 확장은 120MB로 제한됩니다. React Native로 이러한 앱 확장을 구현하는 것이 더 실용적입니다. 개념 증명의 한 예는 &lt;a href=&quot;https://github.com/andrewsardone/react-native-ios-share-extension&quot;&gt;react-native-ios-share-extension&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3f0edc7fc58f4b1625621597e9cd1d20b940abad" translate="yes" xml:space="preserve">
          <source>Other ways of cross-language interaction (events and native modules)</source>
          <target state="translated">언어 간 상호 작용의 다른 방법 (이벤트 및 기본 모듈)</target>
        </trans-unit>
        <trans-unit id="8d7bf5bf136e81f9388c1f4eca050d6d94e965d7" translate="yes" xml:space="preserve">
          <source>Others</source>
          <target state="translated">Others</target>
        </trans-unit>
        <trans-unit id="207b6a767c872c79f5c03c0d407b55aed7d74cb2" translate="yes" xml:space="preserve">
          <source>Our development process</source>
          <target state="translated">우리의 개발 과정</target>
        </trans-unit>
        <trans-unit id="f9691824e48dfab546b156c658d9032c8b783eaa" translate="yes" xml:space="preserve">
          <source>Our linter will catch most styling issues that may exist in your code. You can check the status of your code styling by simply running &lt;code&gt;npm run lint&lt;/code&gt;.</source>
          <target state="translated">Linter는 코드에 존재할 수있는 대부분의 스타일 문제를 포착합니다. &lt;code&gt;npm run lint&lt;/code&gt; 를 실행하여 코드 스타일링 상태를 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="df1cd3ace2b4ffcf4ecf28eb34458e7a193a99f7" translate="yes" xml:space="preserve">
          <source>Override the native component used to render the WebView. Enables a custom native WebView which uses the same JavaScript as the original WebView.</source>
          <target state="translated">WebView를 렌더링하는 데 사용되는 기본 구성 요소를 대체하십시오. 원래 WebView와 동일한 JavaScript를 사용하는 사용자 정의 기본 WebView를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="f0dffb734be8e3978062e3b1df751493ce824bab" translate="yes" xml:space="preserve">
          <source>Overrides automatic detection based on the file extension.</source>
          <target state="translated">파일 확장자를 기준으로 자동 감지를 무시합니다.</target>
        </trans-unit>
        <trans-unit id="99a870f8c9df8c8ce67a9bfe112be58373b675a7" translate="yes" xml:space="preserve">
          <source>Overrides the text that's read by the screen reader when the user interacts with the element. By default, the label is constructed by traversing all the children and accumulating all the &lt;code&gt;Text&lt;/code&gt; nodes separated by space.</source>
          <target state="translated">사용자가 요소와 상호 작용할 때 스크린 리더가 읽는 텍스트를 재정의합니다. 기본적으로 레이블은 모든 하위를 순회 하고 공백으로 구분 된 모든 &lt;code&gt;Text&lt;/code&gt; 노드를 누적하여 구성됩니다 .</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="d79e8e0de159d03879e42e9b9eff9e92d6b50162" translate="yes" xml:space="preserve">
          <source>Padding between the inline image, if any, and the text input itself.</source>
          <target state="translated">인라인 이미지 (있는 경우)와 텍스트 입력 사이의 패딩.</target>
        </trans-unit>
        <trans-unit id="4610303267058b76ca96d316c378516070eec93c" translate="yes" xml:space="preserve">
          <source>PanResponder</source>
          <target state="translated">PanResponder</target>
        </trans-unit>
        <trans-unit id="28a20b1d0387fcb104a410bd4004bbed530ad477" translate="yes" xml:space="preserve">
          <source>PanResponder.create()</source>
          <target state="translated">PanResponder.create()</target>
        </trans-unit>
        <trans-unit id="3803d0148031d6e3fc5e68aa29cd0d7ee738451c" translate="yes" xml:space="preserve">
          <source>Param &lt;code&gt;animated&lt;/code&gt; (&lt;code&gt;true&lt;/code&gt; by default) defines whether the list should do an animation while scrolling.</source>
          <target state="translated">&lt;code&gt;animated&lt;/code&gt; 매개 변수 ( 기본적으로 &lt;code&gt;true&lt;/code&gt; )는 스크롤하는 동안 목록이 애니메이션을 수행해야하는지 여부를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="2dc468d7ef40b21791b5a20194d2af0cbac7d47e" translate="yes" xml:space="preserve">
          <source>Param &lt;code&gt;offset&lt;/code&gt; expects the offset to scroll to. In case of &lt;code&gt;horizontal&lt;/code&gt; is true, the offset is the x-value, in any other case the offset is the y-value.</source>
          <target state="translated">매개 변수 &lt;code&gt;offset&lt;/code&gt; 은 오프셋이 스크롤 될 것으로 예상합니다. 경우 &lt;code&gt;horizontal&lt;/code&gt; 사실, 상기 오프셋은 상기 X 값은 임의의 다른 경우에서의 y 값이 상쇄된다.</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="381c775599d6e4185d4410725809e360928357cd" translate="yes" xml:space="preserve">
          <source>Parameters:</source>
          <target state="translated">Parameters:</target>
        </trans-unit>
        <trans-unit id="ad10f6027643d66f81d4d3e8e1c54064e5035ae8" translate="yes" xml:space="preserve">
          <source>Passing properties from React Native to native</source>
          <target state="translated">React Native에서 Native로 속성 전달</target>
        </trans-unit>
        <trans-unit id="d6c5933ae3f31403539f4c284d6ffe568b46df61" translate="yes" xml:space="preserve">
          <source>Passing properties from native to React Native</source>
          <target state="translated">네이티브에서 리 액트 네이티브로 속성 전달</target>
        </trans-unit>
        <trans-unit id="7693a2c69a1c5f873046d7814851e04661509ac3" translate="yes" xml:space="preserve">
          <source>Percent of viewport that must be covered for a partially occluded item to count as &quot;viewable&quot;, 0-100. Fully visible items are always considered viewable. A value of 0 means that a single pixel in the viewport makes the item viewable, and a value of 100 means that an item must be either entirely visible or cover the entire viewport to count as viewable.</source>
          <target state="translated">부분적으로 가려진 항목이 &quot;조회 가능&quot;(0-100)으로 계산 되려면 가리야하는 뷰포트의 백분율입니다. 완전히 보이는 항목은 항상 볼 수있는 것으로 간주됩니다. 값이 0이면 뷰포트의 단일 픽셀이 항목을 볼 수 있음을 의미하고 값이 100이면 항목을 전체적으로 볼 수 있거나 전체를 볼 수 있도록 전체 뷰포트를 가리야합니다.</target>
        </trans-unit>
        <trans-unit id="f0c49bf301e173dbac5ded7261ef81b0640c9165" translate="yes" xml:space="preserve">
          <source>Perform cache interrogation. Returns a mapping from URL to cache status, such as &quot;disk&quot; or &quot;memory&quot;. If a requested URL is not in the mapping, it means it's not in the cache.</source>
          <target state="translated">캐시 심문을 수행하십시오. URL에서 캐시 상태 (예 : &quot;디스크&quot;또는 &quot;메모리&quot;) 로의 매핑을 반환합니다. 요청 된 URL이 매핑에 없으면 캐시에없는 것입니다.</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="167baeea556e8859411e41c9abd488de9a1c3d6c" translate="yes" xml:space="preserve">
          <source>Performance Monitor</source>
          <target state="translated">퍼포먼스 모니터</target>
        </trans-unit>
        <trans-unit id="f24ec6a3ee76a5c1160a8335e156974fea6e26fc" translate="yes" xml:space="preserve">
          <source>Performance#ListView initial rendering is too slow or scroll performance is bad for large lists</source>
          <target state="translated">Performance # ListView 초기 렌더링이 너무 느리거나 큰 목록의 경우 스크롤 성능이 좋지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0d4966abf770c34ec9a177e590ed4a5fe778bb2a" translate="yes" xml:space="preserve">
          <source>Performance#Profiling Android UI Performance with systrace</source>
          <target state="translated">Performance # systrace를 사용하여 Android UI 성능 프로파일 링</target>
        </trans-unit>
        <trans-unit id="fa1d3f8934e03a4f5015bb88d1cdd2ad8ec331fa" translate="yes" xml:space="preserve">
          <source>Performance#Running in development mode (dev=true)</source>
          <target state="translated">퍼포먼스 # 개발 모드에서 실행 (dev = true)</target>
        </trans-unit>
        <trans-unit id="34e8f1892ff346a054e3ad5bfe540400e9ff0e7d" translate="yes" xml:space="preserve">
          <source>Performance#Using console.log statements</source>
          <target state="translated">성능 # console.log 문 사용</target>
        </trans-unit>
        <trans-unit id="4025c94a694ff3f5f82b10823a55e1ade044634c" translate="yes" xml:space="preserve">
          <source>Performance:</source>
          <target state="translated">Performance:</target>
        </trans-unit>
        <trans-unit id="d06d55570938d12f87db3bf2b48caa9de22d9c67" translate="yes" xml:space="preserve">
          <source>Permissions</source>
          <target state="translated">Permissions</target>
        </trans-unit>
        <trans-unit id="6dffd96356c2d74b9df318f49231cddd4fefa59e" translate="yes" xml:space="preserve">
          <source>Permissions that require prompting the user</source>
          <target state="translated">사용자에게 프롬프트가 필요한 권한</target>
        </trans-unit>
        <trans-unit id="1456782f9d84c088052b0184a83d08bdda6111a0" translate="yes" xml:space="preserve">
          <source>PermissionsAndroid</source>
          <target state="translated">PermissionsAndroid</target>
        </trans-unit>
        <trans-unit id="346a8845e0312dfab2b74a7f76fa2d93bea358a9" translate="yes" xml:space="preserve">
          <source>PermissionsAndroid.check()</source>
          <target state="translated">PermissionsAndroid.check()</target>
        </trans-unit>
        <trans-unit id="bdcbd8a5e36955a31b52f5fcd40195be4f7ce4a0" translate="yes" xml:space="preserve">
          <source>PermissionsAndroid.constructor()</source>
          <target state="translated">PermissionsAndroid.constructor()</target>
        </trans-unit>
        <trans-unit id="2d776a9e458dc7722fc417ded1d9e3c34aa79b0a" translate="yes" xml:space="preserve">
          <source>PermissionsAndroid.request()</source>
          <target state="translated">PermissionsAndroid.request()</target>
        </trans-unit>
        <trans-unit id="1bfe0471dc76f9b27049258f0bbefdb69b92cb86" translate="yes" xml:space="preserve">
          <source>PermissionsAndroid.requestMultiple()</source>
          <target state="translated">PermissionsAndroid.requestMultiple()</target>
        </trans-unit>
        <trans-unit id="5dde5e68fc6399acba182cb45c810b19cbc1fd7e" translate="yes" xml:space="preserve">
          <source>Persisting data:</source>
          <target state="translated">지속 데이터 :</target>
        </trans-unit>
        <trans-unit id="b02207772cf2cece553f7b02ed57f1adacb58c6e" translate="yes" xml:space="preserve">
          <source>Picker</source>
          <target state="translated">Picker</target>
        </trans-unit>
        <trans-unit id="4e2f297f5e861c87b3876aed595cefd1f74273e6" translate="yes" xml:space="preserve">
          <source>Picker#enabled</source>
          <target state="translated">Picker#enabled</target>
        </trans-unit>
        <trans-unit id="fc6926b5127d540f0e0218369cc4ec75f1911402" translate="yes" xml:space="preserve">
          <source>Picker#itemStyle</source>
          <target state="translated">Picker#itemStyle</target>
        </trans-unit>
        <trans-unit id="82276da1cd6a4011b16357435e6f9069a27a1220" translate="yes" xml:space="preserve">
          <source>Picker#mode</source>
          <target state="translated">Picker#mode</target>
        </trans-unit>
        <trans-unit id="7cf43cab90840cb284ebd214c293cb1698051132" translate="yes" xml:space="preserve">
          <source>Picker#onValueChange</source>
          <target state="translated">Picker#onValueChange</target>
        </trans-unit>
        <trans-unit id="221020d50c468ef248eccc69123f02328eeca365" translate="yes" xml:space="preserve">
          <source>Picker#prompt</source>
          <target state="translated">Picker#prompt</target>
        </trans-unit>
        <trans-unit id="a531a37ee5b204f9eb42bc7559b7f3c7a1f1af6d" translate="yes" xml:space="preserve">
          <source>Picker#selectedValue</source>
          <target state="translated">Picker#selectedValue</target>
        </trans-unit>
        <trans-unit id="37b030bcfc41e41810fce9e65ee2997036bde5a5" translate="yes" xml:space="preserve">
          <source>Picker#style</source>
          <target state="translated">Picker#style</target>
        </trans-unit>
        <trans-unit id="699dd589d1af4a9a36f43f9633d93d7627c5eecf" translate="yes" xml:space="preserve">
          <source>Picker#testID</source>
          <target state="translated">Picker#testID</target>
        </trans-unit>
        <trans-unit id="1171775a2e719407e4f61254cd257e381c2bfb70" translate="yes" xml:space="preserve">
          <source>PickerIOS</source>
          <target state="translated">PickerIOS</target>
        </trans-unit>
        <trans-unit id="396daf96ea3c4d8646108e29050836761c96cc90" translate="yes" xml:space="preserve">
          <source>PickerIOS#itemStyle</source>
          <target state="translated">PickerIOS#itemStyle</target>
        </trans-unit>
        <trans-unit id="fab285dd412e58b0c6d0b3b9d04965a2a395bf5f" translate="yes" xml:space="preserve">
          <source>PickerIOS#onValueChange</source>
          <target state="translated">PickerIOS#onValueChange</target>
        </trans-unit>
        <trans-unit id="be5af61f40ff279dbcbd5d5f30594bb1ce2217bc" translate="yes" xml:space="preserve">
          <source>PickerIOS#selectedValue</source>
          <target state="translated">PickerIOS#selectedValue</target>
        </trans-unit>
        <trans-unit id="f904931df25bc7c0fb88bf68c34fa9721d71ab9a" translate="yes" xml:space="preserve">
          <source>Pixel grid snapping</source>
          <target state="translated">픽셀 격자 스냅</target>
        </trans-unit>
        <trans-unit id="8d47d3d7c7027bb791fa3152831d125196298688" translate="yes" xml:space="preserve">
          <source>PixelRatio</source>
          <target state="translated">PixelRatio</target>
        </trans-unit>
        <trans-unit id="8b46285afdedb5bf247d3bfae9637a4127f94028" translate="yes" xml:space="preserve">
          <source>PixelRatio class gives access to the device pixel density.</source>
          <target state="translated">PixelRatio 클래스는 장치 픽셀 밀도에 대한 액세스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="6bc65b2ae8063579fc85f6926c89b9502ad4a6f6" translate="yes" xml:space="preserve">
          <source>PixelRatio.get()</source>
          <target state="translated">PixelRatio.get()</target>
        </trans-unit>
        <trans-unit id="9107aa96a6b1555ff2898ae16dec790d8d616a5d" translate="yes" xml:space="preserve">
          <source>PixelRatio.get() === 1</source>
          <target state="translated">PixelRatio.get () === 1</target>
        </trans-unit>
        <trans-unit id="ac62908c0ec322b2f67ea984a6c9c708ef443c74" translate="yes" xml:space="preserve">
          <source>PixelRatio.get() === 1.5</source>
          <target state="translated">PixelRatio.get () === 1.5</target>
        </trans-unit>
        <trans-unit id="1fbba80fe0f42e2998317c11e161a0df3168dc5b" translate="yes" xml:space="preserve">
          <source>PixelRatio.get() === 2</source>
          <target state="translated">PixelRatio.get () === 2</target>
        </trans-unit>
        <trans-unit id="0b2e4b0599db41b7b10fb1b26f2f1520f2181abf" translate="yes" xml:space="preserve">
          <source>PixelRatio.get() === 3</source>
          <target state="translated">PixelRatio.get () === 3</target>
        </trans-unit>
        <trans-unit id="42d8f0b0874d314818404c86e295a5707721556b" translate="yes" xml:space="preserve">
          <source>PixelRatio.get() === 3.5</source>
          <target state="translated">PixelRatio.get () === 3.5</target>
        </trans-unit>
        <trans-unit id="26b9aa437a90700bcaabfed86a64d70b5b10da05" translate="yes" xml:space="preserve">
          <source>PixelRatio.getFontScale()</source>
          <target state="translated">PixelRatio.getFontScale()</target>
        </trans-unit>
        <trans-unit id="dcade915e3709e5aac990126eeadb0341310d023" translate="yes" xml:space="preserve">
          <source>PixelRatio.getPixelSizeForLayoutSize()</source>
          <target state="translated">PixelRatio.getPixelSizeForLayoutSize()</target>
        </trans-unit>
        <trans-unit id="8b5f71bd156e379e42ef086520bffdf1db200f7c" translate="yes" xml:space="preserve">
          <source>PixelRatio.roundToNearestPixel()</source>
          <target state="translated">PixelRatio.roundToNearestPixel()</target>
        </trans-unit>
        <trans-unit id="ec274202e0e8d5613a7419c54a7cb5836b844045" translate="yes" xml:space="preserve">
          <source>PixelRatio.startDetecting()</source>
          <target state="translated">PixelRatio.startDetecting()</target>
        </trans-unit>
        <trans-unit id="c8a7355ac0e1c553efa29af9a4872d4d6fba6c1f" translate="yes" xml:space="preserve">
          <source>Place the &lt;code&gt;my-release-key.keystore&lt;/code&gt; file under the &lt;code&gt;android/app&lt;/code&gt; directory in your project folder.</source>
          <target state="translated">장소 &lt;code&gt;my-release-key.keystore&lt;/code&gt; 세 이하 파일 &lt;code&gt;android/app&lt;/code&gt; 프로젝트 폴더에 디렉토리를.</target>
        </trans-unit>
        <trans-unit id="a1423919d77187f68ee30671eed621fd1ddcfde0" translate="yes" xml:space="preserve">
          <source>Place the closing &lt;code&gt;&amp;gt;&lt;/code&gt; of opening tags on the same line as the last prop</source>
          <target state="translated">시작 소품 의 닫힘 &lt;code&gt;&amp;gt;&lt;/code&gt; 을 마지막 소품과 같은 줄에 배치하십시오.</target>
        </trans-unit>
        <trans-unit id="ecb0419fd146a3eb65568fe31e74871dc54c1a64" translate="yes" xml:space="preserve">
          <source>Place the closing &lt;code&gt;/&amp;gt;&lt;/code&gt; of self-closing tags on their own line and left-align them with the opening &lt;code&gt;&amp;lt;&lt;/code&gt;</source>
          <target state="translated">자체 결산 태그 의 닫힘 &lt;code&gt;/&amp;gt;&lt;/code&gt; 을 자신의 라인에 배치하고 여는 &lt;code&gt;&amp;lt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f7ef2e7c21e1925b1e28323bc6a2576570a539b" translate="yes" xml:space="preserve">
          <source>Plain text input alert</source>
          <target state="translated">일반 텍스트 입력 경고</target>
        </trans-unit>
        <trans-unit id="123a7f2fcc9ae7cbbbd7c7627a483853a9708dab" translate="yes" xml:space="preserve">
          <source>Platform</source>
          <target state="translated">Platform</target>
        </trans-unit>
        <trans-unit id="484ee72495b2dc27dfcfee0917436b2f438a6990" translate="yes" xml:space="preserve">
          <source>Platform Specific Code</source>
          <target state="translated">플랫폼 별 코드</target>
        </trans-unit>
        <trans-unit id="1cd44dd6a109faa1957ccc010e1e0b9770877217" translate="yes" xml:space="preserve">
          <source>Platform module</source>
          <target state="translated">플랫폼 모듈</target>
        </trans-unit>
        <trans-unit id="8f8655bbd342cc6db4d0db71f8bbf64f0be302ae" translate="yes" xml:space="preserve">
          <source>Platform-specific extensions</source>
          <target state="translated">플랫폼 별 확장</target>
        </trans-unit>
        <trans-unit id="49d4c795ef60f095a7bfc055b33509d996711701" translate="yes" xml:space="preserve">
          <source>Please make sure the following is done when submitting a pull request:</source>
          <target state="translated">풀 요청을 제출할 때 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="93f64ed5980e17965f6a2fed571e7973d87d9a74" translate="yes" xml:space="preserve">
          <source>Please make sure you use the correct Android SDK path. You can find the actual location of the SDK in the Android Studio &quot;Preferences&quot; dialog, under &lt;strong&gt;Appearance &amp;amp; Behavior&lt;/strong&gt; &amp;rarr; &lt;strong&gt;System Settings&lt;/strong&gt; &amp;rarr; &lt;strong&gt;Android SDK&lt;/strong&gt;.</source>
          <target state="translated">올바른 Android SDK 경로를 사용해야합니다. Android Studio &quot;환경 설정&quot;대화 상자의 &lt;strong&gt;모양 및 동작&lt;/strong&gt; &amp;rarr; &lt;strong&gt;시스템 설정&lt;/strong&gt; &amp;rarr; &lt;strong&gt;Android SDK&lt;/strong&gt; 에서 SDK의 실제 위치를 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e757116c607c0527d4bca3b66ef4ec45f4eab5a2" translate="yes" xml:space="preserve">
          <source>Please note that the following corner specific, border radius style properties are currently ignored by iOS's image component:</source>
          <target state="translated">다음 모서리 별 테두리 반경 스타일 속성은 현재 iOS의 이미지 구성 요소에서 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="cac95ff7375eafb6ab5afc40aa10e42a379549a5" translate="yes" xml:space="preserve">
          <source>Point Gradle to your Android SDK:</source>
          <target state="translated">Android SDK를 가리키는 Gradle :</target>
        </trans-unit>
        <trans-unit id="9c731db2ddef58e64dd4b4066d2fc71aa56909ea" translate="yes" xml:space="preserve">
          <source>PointPropType</source>
          <target state="translated">PointPropType</target>
        </trans-unit>
        <trans-unit id="c65de7239130b2221dc156af1c9b5fa8125b9bf3" translate="yes" xml:space="preserve">
          <source>Polyfills</source>
          <target state="translated">Polyfills</target>
        </trans-unit>
        <trans-unit id="b23d9f407909a89e09f1125225ab8d02bcf5148f" translate="yes" xml:space="preserve">
          <source>Pop back to the previous scene.</source>
          <target state="translated">이전 장면으로 돌아갑니다.</target>
        </trans-unit>
        <trans-unit id="2d60c6d00e6c3c25fb460f0cd64f67ff6c162caf" translate="yes" xml:space="preserve">
          <source>Popular Libraries</source>
          <target state="translated">인기 라이브러리</target>
        </trans-unit>
        <trans-unit id="1494ffb23d007acab36dcac635262b01b4fed7ee" translate="yes" xml:space="preserve">
          <source>Port already in use</source>
          <target state="translated">이미 사용중인 포트</target>
        </trans-unit>
        <trans-unit id="8519233a540d2c71a26e7ad3f6b51ca644a9cd50" translate="yes" xml:space="preserve">
          <source>Possible values are one of:</source>
          <target state="translated">가능한 값은 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="87ff4b7a61554a9ebc43ceb221d83016297b535d" translate="yes" xml:space="preserve">
          <source>Possible values for &lt;code&gt;AccessibilityTraits&lt;/code&gt; are:</source>
          <target state="translated">&lt;code&gt;AccessibilityTraits&lt;/code&gt; 에 가능한 값 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="39e849057e9f69810f25650388a64223fde2dcee" translate="yes" xml:space="preserve">
          <source>Possible values for &lt;code&gt;dataDetectorTypes&lt;/code&gt; are:</source>
          <target state="translated">&lt;code&gt;dataDetectorTypes&lt;/code&gt; 에 가능한 값은 다음 과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2a06ab92b282878510f2e83ba8903cadd6ba3ac9" translate="yes" xml:space="preserve">
          <source>Possible values for &lt;code&gt;mixedContentMode&lt;/code&gt; are:</source>
          <target state="translated">&lt;code&gt;mixedContentMode&lt;/code&gt; 에 가능한 값은 다음 과 같습니다.</target>
        </trans-unit>
        <trans-unit id="480e304ec0039594f1ab247f17a72a8adc46287f" translate="yes" xml:space="preserve">
          <source>Possible values for &lt;code&gt;textContentType&lt;/code&gt; are:</source>
          <target state="translated">&lt;code&gt;textContentType&lt;/code&gt; 에 가능한 값 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b2ef221e3193ecc713338eb88d02a0cab9694e2a" translate="yes" xml:space="preserve">
          <source>Possible values:</source>
          <target state="translated">가능한 값 :</target>
        </trans-unit>
        <trans-unit id="73b57dd42240d1b86736a7ac780a1bf1debf19d0" translate="yes" xml:space="preserve">
          <source>Predefined animations</source>
          <target state="translated">사전 정의 된 애니메이션</target>
        </trans-unit>
        <trans-unit id="4762ba59deef70f9a765e1f7d76fac6fd66daa72" translate="yes" xml:space="preserve">
          <source>Prefer &lt;code&gt;&quot;&lt;/code&gt; over &lt;code&gt;'&lt;/code&gt; for string literal props</source>
          <target state="translated">선호 &lt;code&gt;&quot;&lt;/code&gt; 이상을 &lt;code&gt;'&lt;/code&gt; 문자열 리터럴 소품에 대한</target>
        </trans-unit>
        <trans-unit id="ba4f38ede2cced8410f4a5bc70a7f8b04ea5d452" translate="yes" xml:space="preserve">
          <source>Prefer &lt;code&gt;'&lt;/code&gt; over &lt;code&gt;&quot;&lt;/code&gt;</source>
          <target state="translated">선호 &lt;code&gt;'&lt;/code&gt; 를 통해 &lt;code&gt;&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d4bca210769431e0089fde1a4bdc0e52603129f5" translate="yes" xml:space="preserve">
          <source>Prefetches a remote image for later use by downloading it to the disk cache</source>
          <target state="translated">나중에 사용하기 위해 원격 이미지를 디스크 캐시로 다운로드하여 프리 페치</target>
        </trans-unit>
        <trans-unit id="f2146246962eee5bcacac637efdd8e699b007b27" translate="yes" xml:space="preserve">
          <source>Preparing the Android device</source>
          <target state="translated">안드로이드 장치 준비</target>
        </trans-unit>
        <trans-unit id="eed036e414a34a0c245858652e6d88f14c3faefb" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">Prerequisites</target>
        </trans-unit>
        <trans-unit id="09cf7d997f72b055e6d64110fe6f531d98b78378" translate="yes" xml:space="preserve">
          <source>Press the &lt;code&gt;R&lt;/code&gt; key twice or select &lt;code&gt;Reload&lt;/code&gt; from the Developer Menu (&lt;code&gt;Ctrl + M&lt;/code&gt;) to see your changes!</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; 키를 두 번 누르 거나 개발자 메뉴 ( &lt;code&gt;Ctrl + M&lt;/code&gt; ) 에서 &lt;code&gt;Reload&lt;/code&gt; 을 선택 하여 변경 사항을 확인하십시오!</target>
        </trans-unit>
        <trans-unit id="68cc48ec31a09d87b013dc12fb9b8ae5ad6e4ef9" translate="yes" xml:space="preserve">
          <source>Press the &lt;code&gt;R&lt;/code&gt; key twice or select &lt;code&gt;Reload&lt;/code&gt; from the Developer Menu (&lt;code&gt;⌘M&lt;/code&gt;) to see your changes!</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; 키를 두 번 누르 거나 개발자 메뉴 ( &lt;code&gt;⌘M&lt;/code&gt; ) 에서 &lt;code&gt;Reload&lt;/code&gt; 을 선택 하여 변경 사항을 확인하십시오!</target>
        </trans-unit>
        <trans-unit id="072727fc2298cbab0a6ed8178e835fb0133c153a" translate="yes" xml:space="preserve">
          <source>Pro Tip</source>
          <target state="translated">프로 팁</target>
        </trans-unit>
        <trans-unit id="cea5295b78ec1b99a624dda73a7e6d10f18cdf3f" translate="yes" xml:space="preserve">
          <source>Profiling</source>
          <target state="translated">Profiling</target>
        </trans-unit>
        <trans-unit id="ef459a9dfd411df56cbae974c6c31288de458449" translate="yes" xml:space="preserve">
          <source>Profiling Android UI Performance with &lt;code&gt;systrace&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;systrace&lt;/code&gt; 를 사용 하여 Android UI 성능 프로파일 링</target>
        </trans-unit>
        <trans-unit id="24095dac5626ef9b91b1afaf2df02d51edae51c6" translate="yes" xml:space="preserve">
          <source>Programmatically changing selected index</source>
          <target state="translated">선택된 인덱스를 프로그래밍 방식으로 변경</target>
        </trans-unit>
        <trans-unit id="5d5edb2541e0633566266f69c5540159640d5eeb" translate="yes" xml:space="preserve">
          <source>Progress view top offset</source>
          <target state="translated">진행 뷰 상단 오프셋</target>
        </trans-unit>
        <trans-unit id="66922e7eddfa9370b159c23ab51e99367800284f" translate="yes" xml:space="preserve">
          <source>ProgressBarAndroid</source>
          <target state="translated">ProgressBarAndroid</target>
        </trans-unit>
        <trans-unit id="367c57137f48b3157a345ef5b6431b28f3cc98f8" translate="yes" xml:space="preserve">
          <source>ProgressBarAndroid#animating</source>
          <target state="translated">ProgressBarAndroid#animating</target>
        </trans-unit>
        <trans-unit id="61f30e1f864a19baf098a3f8bec2f04ec5bf2796" translate="yes" xml:space="preserve">
          <source>ProgressBarAndroid#color</source>
          <target state="translated">ProgressBarAndroid#color</target>
        </trans-unit>
        <trans-unit id="e43041a141c0b8474b0d5df1563909f61c6e2ded" translate="yes" xml:space="preserve">
          <source>ProgressBarAndroid#indeterminate</source>
          <target state="translated">ProgressBarAndroid#indeterminate</target>
        </trans-unit>
        <trans-unit id="5d8fa1d85777f73e3ea5eb682d1ea50b287c9f6f" translate="yes" xml:space="preserve">
          <source>ProgressBarAndroid#progress</source>
          <target state="translated">ProgressBarAndroid#progress</target>
        </trans-unit>
        <trans-unit id="638d5534aba447beac37fb7c21803e53c9bdbd3e" translate="yes" xml:space="preserve">
          <source>ProgressBarAndroid#styleAttr</source>
          <target state="translated">ProgressBarAndroid#styleAttr</target>
        </trans-unit>
        <trans-unit id="125efc3b29553f8d5a835ba2ee87e025ac379ab1" translate="yes" xml:space="preserve">
          <source>ProgressBarAndroid#testID</source>
          <target state="translated">ProgressBarAndroid#testID</target>
        </trans-unit>
        <trans-unit id="eba4f3ed497dc60f01345e0502852e732213ff6a" translate="yes" xml:space="preserve">
          <source>ProgressViewIOS</source>
          <target state="translated">ProgressViewIOS</target>
        </trans-unit>
        <trans-unit id="4113a9ffc5eb8f02259252130cac9db56ac467e0" translate="yes" xml:space="preserve">
          <source>ProgressViewIOS#progress</source>
          <target state="translated">ProgressViewIOS#progress</target>
        </trans-unit>
        <trans-unit id="939cd1b60d39f0c120828c0929edd1efd086eb3f" translate="yes" xml:space="preserve">
          <source>ProgressViewIOS#progressImage</source>
          <target state="translated">ProgressViewIOS#progressImage</target>
        </trans-unit>
        <trans-unit id="4e5f3aba2a356f81a23dc9760087a8fdf1a83ab3" translate="yes" xml:space="preserve">
          <source>ProgressViewIOS#progressTintColor</source>
          <target state="translated">ProgressViewIOS#progressTintColor</target>
        </trans-unit>
        <trans-unit id="324fcc5637cca1ec243d380044a33ceb47f40f9e" translate="yes" xml:space="preserve">
          <source>ProgressViewIOS#progressViewStyle</source>
          <target state="translated">ProgressViewIOS#progressViewStyle</target>
        </trans-unit>
        <trans-unit id="f40b31ee042c8380eb1885f8068686980b2a1af1" translate="yes" xml:space="preserve">
          <source>ProgressViewIOS#trackImage</source>
          <target state="translated">ProgressViewIOS#trackImage</target>
        </trans-unit>
        <trans-unit id="bd872116eabd89b23bfe7493dd5991279a4cac0a" translate="yes" xml:space="preserve">
          <source>ProgressViewIOS#trackTintColor</source>
          <target state="translated">ProgressViewIOS#trackTintColor</target>
        </trans-unit>
        <trans-unit id="3844e3665d5919c240b087d6daabd12e1fed6c0b" translate="yes" xml:space="preserve">
          <source>Proguard is a tool that can slightly reduce the size of the APK. It does this by stripping parts of the React Native Java bytecode (and its dependencies) that your app is not using.</source>
          <target state="translated">Proguard는 APK 크기를 약간 줄일 수있는 도구입니다. 앱에서 사용하지 않는 React Native Java 바이트 코드 (및 해당 종속성)의 일부를 제거하여이를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="3d14ac7e01e4f9228a26a989869daa3b27c0ca42" translate="yes" xml:space="preserve">
          <source>Project with Native Code Required</source>
          <target state="translated">네이티브 코드가 필요한 프로젝트</target>
        </trans-unit>
        <trans-unit id="ac7e2d7112173ded50cfbcb78eff89966cacccd2" translate="yes" xml:space="preserve">
          <source>Projects built with native code</source>
          <target state="translated">네이티브 코드로 빌드 된 프로젝트</target>
        </trans-unit>
        <trans-unit id="78bdcaeee0f93f6995a21ba03e23c190eb82f959" translate="yes" xml:space="preserve">
          <source>Projects with Native Code Only</source>
          <target state="translated">네이티브 코드 만있는 프로젝트</target>
        </trans-unit>
        <trans-unit id="b1d472e424c03ff52490d1edc8a0e23f95babb92" translate="yes" xml:space="preserve">
          <source>Promises</source>
          <target state="translated">Promises</target>
        </trans-unit>
        <trans-unit id="7863a34e32af67c4dc5cda2d979d745e0c71c1d7" translate="yes" xml:space="preserve">
          <source>Prompt string for this picker, used on Android in dialog mode as the title of the dialog.</source>
          <target state="translated">이 선택 도구의 프롬프트 문자열로, 대화 상자의 제목으로 Android에서 대화 모드로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b896ba8d43ed01c77a10f51d33aa72054fddd85a" translate="yes" xml:space="preserve">
          <source>Prompts the user to enable a permission and returns a promise resolving to a string value (see result strings above) indicating whether the user allowed or denied the request or does not want to be asked again.</source>
          <target state="translated">사용자에게 권한을 활성화하도록 요청하고 사용자가 요청을 허용 또는 거부했는지 또는 다시 요청하지 않는지를 나타내는 문자열 값 (위의 결과 문자열 참조)으로 확인하는 약속을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="97a2ee787393f235b5321198e2c450f90d4962d7" translate="yes" xml:space="preserve">
          <source>Prompts the user to enable multiple permissions in the same dialog and returns an object with the permissions as keys and strings as values (see result strings above) indicating whether the user allowed or denied the request or does not want to be asked again.</source>
          <target state="translated">사용자에게 동일한 대화 상자에서 여러 권한을 사용하도록 요청하고 사용자에게 요청을 허용 또는 거부했는지 또는 다시 요청하지 않는지를 나타내는 값으로 키 및 문자열로 권한이있는 오브젝트를 리턴합니다 (위의 결과 문자열 참조).</target>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="25bd212d8a73a0cbb9e0a379ec09b8495b145405" translate="yes" xml:space="preserve">
          <source>Properties are the simplest way of cross-component communication. So we need a way to pass properties both from native to React Native, and from React Native to native.</source>
          <target state="translated">속성은 구성 요소 간 통신의 가장 간단한 방법입니다. 따라서 네이티브에서 리 액트 네이티브로, 리 액트 네이티브에서 네이티브로 속성을 전달하는 방법이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="89ad6cd1388d8c22b0665deeec262a866e7c38e5" translate="yes" xml:space="preserve">
          <source>Properties that are to be reflected in JavaScript needs to be exposed as setter method annotated with &lt;code&gt;@ReactProp&lt;/code&gt; (or &lt;code&gt;@ReactPropGroup&lt;/code&gt;). Setter method should take view to be updated (of the current view type) as a first argument and property value as a second argument. Setter should be declared as a &lt;code&gt;void&lt;/code&gt; method and should be &lt;code&gt;public&lt;/code&gt;. Property type sent to JS is determined automatically based on the type of value argument of the setter. The following type of values are currently supported: &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;ReadableArray&lt;/code&gt;, &lt;code&gt;ReadableMap&lt;/code&gt;.</source>
          <target state="translated">JavaScript에 반영 될 속성은 &lt;code&gt;@ReactProp&lt;/code&gt; (또는 &lt;code&gt;@ReactPropGroup&lt;/code&gt; )로 주석이 달린 setter 메소드로 노출 되어야 합니다. Setter 메소드는 첫 번째 인수로 속성을 업데이트하고 두 번째 인수로 속성 값을 업데이트해야합니다. Setter는 &lt;code&gt;void&lt;/code&gt; 메소드 로 선언 해야하며 &lt;code&gt;public&lt;/code&gt; 이어야합니다 . JS로 전송 된 속성 유형은 setter의 값 인수 유형에 따라 자동으로 결정됩니다. 값의 다음 유형은 현재 지원됩니다 &lt;code&gt;boolean&lt;/code&gt; , &lt;code&gt;int&lt;/code&gt; , &lt;code&gt;float&lt;/code&gt; , &lt;code&gt;double&lt;/code&gt; , &lt;code&gt;String&lt;/code&gt; , &lt;code&gt;Boolean&lt;/code&gt; , &lt;code&gt;Integer&lt;/code&gt; , &lt;code&gt;ReadableArray&lt;/code&gt; , &lt;code&gt;ReadableMap&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9ae33a7d0ecb82cae8f04aafab20bf90425b7b8c" translate="yes" xml:space="preserve">
          <source>Property</source>
          <target state="translated">Property</target>
        </trans-unit>
        <trans-unit id="f1b3349134d6da968741597319ae66566b4ff346" translate="yes" xml:space="preserve">
          <source>Proposing a change</source>
          <target state="translated">변경 제안</target>
        </trans-unit>
        <trans-unit id="e5561bc237fb41709bb2e8b651d704c1664ae03e" translate="yes" xml:space="preserve">
          <source>Props</source>
          <target state="translated">Props</target>
        </trans-unit>
        <trans-unit id="f10ede6c440c30c6f3c938bb860405d40448d57a" translate="yes" xml:space="preserve">
          <source>Props passed to &lt;code&gt;NavigatorIOS&lt;/code&gt; will set the default configuration for the navigation bar. Props passed as properties to a route object will set the configuration for that route's navigation bar, overriding any props passed to the &lt;code&gt;NavigatorIOS&lt;/code&gt; component.</source>
          <target state="translated">&lt;code&gt;NavigatorIOS&lt;/code&gt; 에 전달 된 소품 은 탐색 모음의 기본 구성을 설정합니다. 경로 객체에 속성으로 전달 된 소품은 해당 경로의 탐색 모음에 대한 구성을 설정하여 &lt;code&gt;NavigatorIOS&lt;/code&gt; 구성 요소에 전달 된 소품을 재정의합니다 .</target>
        </trans-unit>
        <trans-unit id="45c925a67750dc3c20858b6429a3f1f08ed299bb" translate="yes" xml:space="preserve">
          <source>Provides a cubic bezier curve, equivalent to CSS Transitions' &lt;code&gt;transition-timing-function&lt;/code&gt;.</source>
          <target state="translated">CSS Transitions의 &lt;code&gt;transition-timing-function&lt;/code&gt; 과 동등한 3 차 베 지어 곡선을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="6a93e086fc7fba5ea6baa3a04e05c0229e4265b8" translate="yes" xml:space="preserve">
          <source>Provides a general interface to interact with both incoming and outgoing app links.</source>
          <target state="translated">수신 및 발신 앱 링크와 상호 작용할 수있는 일반 인터페이스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="55421118894e142fe163e04973cd07025f3dd2c0" translate="yes" xml:space="preserve">
          <source>Provides a scrolling container that can host multiple components and views.</source>
          <target state="translated">여러 구성 요소 및보기를 호스팅 할 수있는 스크롤 컨테이너를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="3688a0494802150d4e1d944b0fa76933debce247" translate="yes" xml:space="preserve">
          <source>Provides a simple bouncing effect.</source>
          <target state="translated">간단한 수신 거부 효과를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="8a0dacafb6667b68cd2b1d3725af7a301383c155" translate="yes" xml:space="preserve">
          <source>Provides a simple way to present content above an enclosing view.</source>
          <target state="translated">둘러싸는보기 위에 컨텐츠를 표시하는 간단한 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="880cbd3bce6d12ec39cca50e24e003668803e1ed" translate="yes" xml:space="preserve">
          <source>Provides a view that moves out of the way of the virtual keyboard automatically.</source>
          <target state="translated">가상 키보드에서 자동으로 벗어나는보기를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="188015fab559d3b6aae898e33ce672f74b937a93" translate="yes" xml:space="preserve">
          <source>Provides access to the device pixel density.</source>
          <target state="translated">장치 픽셀 밀도에 대한 액세스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="aeec9140eebcc86ed92ac868442323c4b4b95648" translate="yes" xml:space="preserve">
          <source>Provides access to the local camera roll / gallery.</source>
          <target state="translated">로컬 카메라 롤 / 갤러리에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8af1f64c746bdf9179aea81610b674599deea662" translate="yes" xml:space="preserve">
          <source>Provides access to the permissions model introduced in Android M.</source>
          <target state="translated">Android M에 도입 된 권한 모델에 대한 액세스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="9a0bbc1222ce5515c4d50977a9f6f5e4bcb51707" translate="yes" xml:space="preserve">
          <source>Provides additional metadata like &lt;code&gt;index&lt;/code&gt; if you need it, as well as a more generic &lt;code&gt;separators.updateProps&lt;/code&gt; function which let you set whatever props you want to change the rendering of either the leading separator or trailing separator in case the more common &lt;code&gt;highlight&lt;/code&gt; and &lt;code&gt;unhighlight&lt;/code&gt; (which set the &lt;code&gt;highlighted: boolean&lt;/code&gt; prop) are insufficient for your use case.</source>
          <target state="translated">같은 추가 메타 데이터를 제공 &lt;code&gt;index&lt;/code&gt; 당신이 그것을 필요로하는 경우뿐만 아니라보다 일반적인 &lt;code&gt;separators.updateProps&lt;/code&gt; 의 당신은 당신이 최고의 세퍼레이터 경우 일반적인 구분을 후행 하나의 렌더링 변경을 원하는 소품 설정할 수 있도록 기능을 &lt;code&gt;highlight&lt;/code&gt; 하고 &lt;code&gt;unhighlight&lt;/code&gt; 을 (이 &lt;code&gt;highlighted: boolean&lt;/code&gt; 설정 : 부울 소품)이 사용 사례에 충분하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5b988dca8fd48b476698b713b9be98d17fb3725c" translate="yes" xml:space="preserve">
          <source>Provides additional traits to screen reader. By default no traits are provided unless specified otherwise in element.</source>
          <target state="translated">화면 판독기에 추가 특성을 제공합니다. 요소에서 달리 지정하지 않으면 기본적으로 특성이 제공되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="455adea9ab1792f8913913bf5f8d9d6f53759a0d" translate="yes" xml:space="preserve">
          <source>Provides an abstraction layer similar to CSS stylesheets.</source>
          <target state="translated">CSS 스타일 시트와 유사한 추상화 계층을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="1d4e83876a925fd377513f7bebb1d0fd2381d5a5" translate="yes" xml:space="preserve">
          <source>Provides an initial value that will change when the user starts typing. Useful for simple use-cases where you do not want to deal with listening to events and updating the value prop to keep the controlled state in sync.</source>
          <target state="translated">사용자가 입력을 시작할 때 변경 될 초기 값을 제공합니다. 제어 된 상태를 동기화 상태로 유지하기 위해 이벤트 청취 및 값 소품 업데이트를 처리하지 않으려는 간단한 유스 케이스에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="5b9f9744f5cbfccd72ac37a052deb6894cce3186" translate="yes" xml:space="preserve">
          <source>Provides an interface for getting device dimensions.</source>
          <target state="translated">장치 크기를 가져 오기위한 인터페이스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="22830a229ef17aea443656c2e3ad4396554b19d6" translate="yes" xml:space="preserve">
          <source>Provides an interface for setting and getting content from the clipboard on both iOS and Android.</source>
          <target state="translated">iOS 및 Android 모두에서 클립 보드에서 컨텐츠를 설정하고 가져 오기위한 인터페이스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="04ccc8d113c8ee75b2cc0f08737a461e8a2aa94d" translate="yes" xml:space="preserve">
          <source>Provides efficient data processing and access to the &lt;code&gt;ListView&lt;/code&gt; component. A &lt;code&gt;ListViewDataSource&lt;/code&gt; is created with functions for extracting data from the input blob, and comparing elements (with default implementations for convenience). The input blob can be as simple as an array of strings, or an object with rows nested inside section objects.</source>
          <target state="translated">효율적인 데이터 처리 및 &lt;code&gt;ListView&lt;/code&gt; 구성 요소에 대한 액세스를 제공합니다 . &lt;code&gt;ListViewDataSource&lt;/code&gt; 는 (편의를 위해 기본적으로 구현) 요소를 입력 블롭으로부터 데이터를 추출하고, 비교 함수로 생성된다. 입력 블롭은 문자열 배열이나 섹션 객체 안에 행이 중첩 된 객체처럼 간단 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a394e225c975153b8ec3b30e1c74d4cbeebdc035" translate="yes" xml:space="preserve">
          <source>Provides you with a list of the app&amp;rsquo;s notifications that are still displayed in Notification Center</source>
          <target state="translated">알림 센터에 여전히 표시되는 앱 알림 목록을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="80302e5e618e94be54303777bcdd4fb66ace85e7" translate="yes" xml:space="preserve">
          <source>Pull requests</source>
          <target state="translated">풀 요청</target>
        </trans-unit>
        <trans-unit id="3110d5715ed52cab470d2301146695216c1de424" translate="yes" xml:space="preserve">
          <source>Pull requests like these usually have the label 'Needs response from author'. If there has been no reply in the last 30 days, close it with a response like the following:</source>
          <target state="translated">이와 같은 풀 요청에는 일반적으로 '저작자의 응답 필요'레이블이 있습니다. 지난 30 일 동안 응답이 없으면 다음과 같은 응답으로 닫으십시오.</target>
        </trans-unit>
        <trans-unit id="73e510c476a322b7d7e1f945dc3449f8fb8485aa" translate="yes" xml:space="preserve">
          <source>Pull to Refresh.</source>
          <target state="translated">당겨 새로 고침</target>
        </trans-unit>
        <trans-unit id="ea130c56ea7f482c6eeb4654059860a84f24305d" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS</source>
          <target state="translated">PushNotificationIOS</target>
        </trans-unit>
        <trans-unit id="e1de678680540b26391b60bd657ff8e71e96db80" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.abandonPermissions()</source>
          <target state="translated">PushNotificationIOS.abandonPermissions()</target>
        </trans-unit>
        <trans-unit id="e12d19cd0c53f746180fda55b3abc4bcb699e046" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.addEventListener()</source>
          <target state="translated">PushNotificationIOS.addEventListener()</target>
        </trans-unit>
        <trans-unit id="0b5cb154833ce65726f3ad704a57bcb2fe4f9d6e" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.cancelAllLocalNotifications()</source>
          <target state="translated">PushNotificationIOS.cancelAllLocalNotifications()</target>
        </trans-unit>
        <trans-unit id="18ab449732b296ecc54bd0815a84595970936abc" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.cancelLocalNotifications()</source>
          <target state="translated">PushNotificationIOS.cancelLocalNotifications()</target>
        </trans-unit>
        <trans-unit id="bd00c33490be906a6417b620c4ac64a2062e5637" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.checkPermissions()</source>
          <target state="translated">PushNotificationIOS.checkPermissions()</target>
        </trans-unit>
        <trans-unit id="cf4fc0fc99d8d9c6cd44ae65e24f2cc7b354ff7b" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.constructor()</source>
          <target state="translated">PushNotificationIOS.constructor()</target>
        </trans-unit>
        <trans-unit id="fba72252fa9aa3cb5e7d9541e92160c04c0f498a" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.finish()</source>
          <target state="translated">PushNotificationIOS.finish()</target>
        </trans-unit>
        <trans-unit id="23330113b90274b9dd2b0ff8770e43d5458827ec" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.getAlert()</source>
          <target state="translated">PushNotificationIOS.getAlert()</target>
        </trans-unit>
        <trans-unit id="e07d741ef0345895aa914483792a68dc79e4fbb8" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.getApplicationIconBadgeNumber()</source>
          <target state="translated">PushNotificationIOS.getApplicationIconBadgeNumber()</target>
        </trans-unit>
        <trans-unit id="2450a5ff0048ed34b07ea02d4c5934d2889c5216" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.getBadgeCount()</source>
          <target state="translated">PushNotificationIOS.getBadgeCount()</target>
        </trans-unit>
        <trans-unit id="f16ddb251190eec26473189409f1a923ea8380c1" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.getCategory()</source>
          <target state="translated">PushNotificationIOS.getCategory()</target>
        </trans-unit>
        <trans-unit id="a3bca079ba26c069d1d340a877e9d9680209b542" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.getContentAvailable()</source>
          <target state="translated">PushNotificationIOS.getContentAvailable()</target>
        </trans-unit>
        <trans-unit id="db05c2625290215b48de5e036eff46cad8fedfbf" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.getData()</source>
          <target state="translated">PushNotificationIOS.getData()</target>
        </trans-unit>
        <trans-unit id="90c7645e7e5905d74f8949a6949c979979ec522c" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.getDeliveredNotifications()</source>
          <target state="translated">PushNotificationIOS.getDeliveredNotifications()</target>
        </trans-unit>
        <trans-unit id="5333bd66eac6db3f8eed75283f1d2da6b71bb642" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.getInitialNotification()</source>
          <target state="translated">PushNotificationIOS.getInitialNotification()</target>
        </trans-unit>
        <trans-unit id="998f8afa3b45e5af134daf584382ed5e2f30202a" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.getMessage()</source>
          <target state="translated">PushNotificationIOS.getMessage()</target>
        </trans-unit>
        <trans-unit id="575afdc80060b9770ff23d45394f26b475275ab3" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.getScheduledLocalNotifications()</source>
          <target state="translated">PushNotificationIOS.getScheduledLocalNotifications()</target>
        </trans-unit>
        <trans-unit id="6dbd11a5ccbd869efd6c4c8b4636d7b05ecb4a68" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.getSound()</source>
          <target state="translated">PushNotificationIOS.getSound()</target>
        </trans-unit>
        <trans-unit id="d68fb2a26967de4e014249eba98a18c413a9f629" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.presentLocalNotification()</source>
          <target state="translated">PushNotificationIOS.presentLocalNotification()</target>
        </trans-unit>
        <trans-unit id="dde8cd9545152ee63b65edc5dbd5254d1517e6e9" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.removeAllDeliveredNotifications()</source>
          <target state="translated">PushNotificationIOS.removeAllDeliveredNotifications()</target>
        </trans-unit>
        <trans-unit id="63106b457bf900a4cb72f31371501c36c5872a5e" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.removeDeliveredNotifications()</source>
          <target state="translated">PushNotificationIOS.removeDeliveredNotifications()</target>
        </trans-unit>
        <trans-unit id="2758ad67ab527b4dd462ac81e50f7ed1c20aca94" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.removeEventListener()</source>
          <target state="translated">PushNotificationIOS.removeEventListener()</target>
        </trans-unit>
        <trans-unit id="aaa6376053b23a2f0fcfbe2f37f767c769e97f56" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.requestPermissions()</source>
          <target state="translated">PushNotificationIOS.requestPermissions()</target>
        </trans-unit>
        <trans-unit id="db4a64f0a632e5d76bb870451743da363297f604" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.scheduleLocalNotification()</source>
          <target state="translated">PushNotificationIOS.scheduleLocalNotification()</target>
        </trans-unit>
        <trans-unit id="6a08b9c60c604a13a9b3bee680a7eabe49d80052" translate="yes" xml:space="preserve">
          <source>PushNotificationIOS.setApplicationIconBadgeNumber()</source>
          <target state="translated">PushNotificationIOS.setApplicationIconBadgeNumber()</target>
        </trans-unit>
        <trans-unit id="c475ee60fc1db4407f668f6f022d1bc04e0623e0" translate="yes" xml:space="preserve">
          <source>Query whether a screen reader is currently enabled. Returns a promise which resolves to a boolean. The result is &lt;code&gt;true&lt;/code&gt; when a screen reader is enabled and &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">스크린 리더가 현재 활성화되어 있는지 쿼리합니다. 부울로 해결되는 약속을 반환합니다. 화면 판독기가 활성화되면 결과가 &lt;code&gt;true&lt;/code&gt; 이고 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f3b1be8c4a78ff7cff83e84ec4e1b998ffb7c9d8" translate="yes" xml:space="preserve">
          <source>Questions should absolutely be asked on Stack Overflow rather than GitHub. Maintainers should encourage contributors to ask on Stack Overflow, before closing the issue. Feel free to also answer some &lt;a href=&quot;https://stackoverflow.com/tags/react-native&quot;&gt;questions on Stack Overflow&lt;/a&gt;, you'll get rep!</source>
          <target state="translated">질문은 GitHub가 아닌 Stack Overflow에 절대적으로 문의해야합니다. 유지 관리 담당자는 문제를 닫기 전에 기고자에게 스택 오버플로를 요청하도록 권장해야합니다. &lt;a href=&quot;https://stackoverflow.com/tags/react-native&quot;&gt;Stack Overflow에 대한 질문&lt;/a&gt; 에도 자유롭게 대답하십시오 .</target>
        </trans-unit>
        <trans-unit id="455083cac2ae96eabe3895762b6080aa09e6afa4" translate="yes" xml:space="preserve">
          <source>Quick Start</source>
          <target state="translated">빠른 시작</target>
        </trans-unit>
        <trans-unit id="30db29361a35d1b08aeb3c27b8711a3458469d2a" translate="yes" xml:space="preserve">
          <source>Rasterization incurs an off-screen drawing pass and the bitmap consumes memory. Test and measure when using this property.</source>
          <target state="translated">래스터 화는 오프 스크린 드로잉 패스를 발생시키고 비트 맵은 메모리를 소비합니다. 이 속성을 사용할 때 테스트하고 측정하십시오.</target>
        </trans-unit>
        <trans-unit id="cc8727bcb4419d55ca1374599e5c4c8f0f93bedc" translate="yes" xml:space="preserve">
          <source>Rate-limited row rendering - By default, only one row is rendered per event-loop (customizable with the &lt;code&gt;pageSize&lt;/code&gt; prop). This breaks up the work into smaller chunks to reduce the chance of dropping frames while rendering rows.</source>
          <target state="translated">속도 제한 행 렌더링-기본적으로 이벤트 루프 당 하나의 행만 렌더링됩니다 ( &lt;code&gt;pageSize&lt;/code&gt; prop로 사용자 정의 가능 ). 이것은 행을 렌더링하는 동안 프레임을 떨어 뜨릴 가능성을 줄이기 위해 작업을 더 작은 청크로 나눕니다.</target>
        </trans-unit>
        <trans-unit id="0b8d9d4504138b82d751a5f283a8095308246310" translate="yes" xml:space="preserve">
          <source>React Developer Tools</source>
          <target state="translated">반응 개발자 도구</target>
        </trans-unit>
        <trans-unit id="ac81992b1b421bce8e30d7cdba9eefa40ae7ca2a" translate="yes" xml:space="preserve">
          <source>React Native Documentation</source>
          <target state="translated">네이티브 문서 반응</target>
        </trans-unit>
        <trans-unit id="cf4971fef74056c8be1ddb73372b3b58e98ff78f" translate="yes" xml:space="preserve">
          <source>React Native allows you to determine, in JS, the size of the RN app and provide it to the owner of the hosting &lt;code&gt;RCTRootView&lt;/code&gt;. The owner is then responsible for re-laying out the subviews and keeping the UI consistent. We achieve this with &lt;code&gt;RCTRootView&lt;/code&gt;'s flexibility modes.</source>
          <target state="translated">React Native를 사용하면 JS에서 RN 앱의 크기를 결정하고 호스팅 &lt;code&gt;RCTRootView&lt;/code&gt; 소유자에게 제공 할 수 있습니다. 그런 다음 소유자는 하위 뷰를 다시 레이아웃하고 UI를 일관성있게 유지해야합니다. 우리는 &lt;code&gt;RCTRootView&lt;/code&gt; 의 유연성 모드로 이것을 달성 합니다.</target>
        </trans-unit>
        <trans-unit id="ac2608784f82dcb558c57237500a49a74ec5ce12" translate="yes" xml:space="preserve">
          <source>React Native also requires a recent version of the &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;Java SE Development Kit (JDK)&lt;/a&gt;, as well as Python 2. Both can be installed using Chocolatey.</source>
          <target state="translated">React Native에는 Python 2뿐만 아니라 최신 &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;JDK (Java SE Development Kit)&lt;/a&gt; 버전도 필요합니다 . 둘 다 Chocolatey를 사용하여 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="07ba54aff6adeb969b9d417c3a4c59fccf829516" translate="yes" xml:space="preserve">
          <source>React Native also supports &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebSocket&quot;&gt;WebSockets&lt;/a&gt;, a protocol which provides full-duplex communication channels over a single TCP connection.</source>
          <target state="translated">React Native는 단일 TCP 연결을 통해 전이중 통신 채널을 제공하는 프로토콜 인 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebSocket&quot;&gt;WebSockets&lt;/a&gt; 도 지원 합니다.</target>
        </trans-unit>
        <trans-unit id="8ca5d5e49afab1628e2f9ff9738f2534c0c6e2da" translate="yes" xml:space="preserve">
          <source>React Native content with fixed size</source>
          <target state="translated">고정 된 크기로 네이티브 콘텐츠 반응</target>
        </trans-unit>
        <trans-unit id="03111f5739192894e6ffc5505e58d5a3504926e9" translate="yes" xml:space="preserve">
          <source>React Native content with flexible size</source>
          <target state="translated">유연한 크기로 네이티브 컨텐츠 반응</target>
        </trans-unit>
        <trans-unit id="5898b1d775af2086dc485b8ee726cb955536f8d9" translate="yes" xml:space="preserve">
          <source>React Native does not compile when being used as a CocoaPod</source>
          <target state="translated">CocoaPod로 사용될 때 React Native가 컴파일되지 않습니다</target>
        </trans-unit>
        <trans-unit id="6a9689ff32c5321c5260d6ecf09f9dd861e9c859" translate="yes" xml:space="preserve">
          <source>React Native enables you to perform cross-language function calls. You can execute custom native code from JS and vice versa. Unfortunately, depending on the side we are working on, we achieve the same goal in different ways. For native - we use events mechanism to schedule an execution of a handler function in JS, while for React Native we directly call methods exported by native modules.</source>
          <target state="translated">React Native를 사용하면 언어 간 함수 호출을 수행 할 수 있습니다. JS에서 사용자 정의 네이티브 코드를 실행할 수 있으며 그 반대도 가능합니다. 안타깝게도 우리가 작업하는 측면에 따라 다른 방식으로 동일한 목표를 달성합니다. 네이티브의 경우 이벤트 메커니즘을 사용하여 JS에서 핸들러 함수의 실행을 예약하고 React Native의 경우 네이티브 모듈에서 내 보낸 메소드를 직접 호출합니다.</target>
        </trans-unit>
        <trans-unit id="2ca2618fe5a4051ea24cb0b4d7090f3d2f5ceb0c" translate="yes" xml:space="preserve">
          <source>React Native has a &lt;a href=&quot;https://github.com/facebook/react-native/tree/master/local-cli&quot;&gt;&lt;code&gt;local-cli&lt;/code&gt;&lt;/a&gt; folder with a file named &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/local-cli/cliEntry.js&quot;&gt;&lt;code&gt;cliEntry.js&lt;/code&gt;&lt;/a&gt;. Here, the commands are read from &lt;code&gt;commands.js&lt;/code&gt; and added as possible CLI commands. &lt;em&gt;E.G.&lt;/em&gt; the &lt;code&gt;react-native link&lt;/code&gt; command, exists in the &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/local-cli/link/&quot;&gt;&lt;code&gt;react-native/local-cli/link&lt;/code&gt;&lt;/a&gt; folder, and is required in &lt;code&gt;commands.js&lt;/code&gt;, which will register it as a documented command to be exposed to the CLI.</source>
          <target state="translated">React Native에는 &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/local-cli/cliEntry.js&quot;&gt; &lt;code&gt;cliEntry.js&lt;/code&gt; &lt;/a&gt; 라는 파일 이있는 &lt;a href=&quot;https://github.com/facebook/react-native/tree/master/local-cli&quot;&gt; &lt;code&gt;local-cli&lt;/code&gt; &lt;/a&gt; 폴더가 있습니다. 여기에서 command.js에서 &lt;code&gt;commands.js&lt;/code&gt; 읽고 가능한 CLI 명령으로 추가합니다. &lt;em&gt;EG는&lt;/em&gt; (가) &lt;code&gt;react-native link&lt;/code&gt; 명령의 존재 &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/local-cli/link/&quot;&gt; &lt;code&gt;react-native/local-cli/link&lt;/code&gt; &lt;/a&gt; 폴더 및 필요합니다 &lt;code&gt;commands.js&lt;/code&gt; 문서화 된 명령이 CLI에 노출 될 수로 등록 할.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="73ce3cd086a9047921aeff1492ac6ef322b314d1" translate="yes" xml:space="preserve">
          <source>React Native implements a polyfill for WebSockets. These &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/Core/InitializeCore.js&quot;&gt;polyfills&lt;/a&gt; are initialized as part of the react-native module that you include in your application through &lt;code&gt;import React from 'react'&lt;/code&gt;. If you load another module that requires WebSockets, such as &lt;a href=&quot;https://github.com/facebook/react-native/issues/3645&quot;&gt;Firebase&lt;/a&gt;, be sure to load/require it after react-native:</source>
          <target state="translated">React Native는 WebSockets에 대한 폴리 필을 구현합니다. 이러한 &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/Core/InitializeCore.js&quot;&gt;폴리 필&lt;/a&gt; 은 &lt;code&gt;import React from 'react'&lt;/code&gt; 통해 애플리케이션에 포함하는 반응 네이티브 모듈의 일부로 초기화됩니다 . &lt;a href=&quot;https://github.com/facebook/react-native/issues/3645&quot;&gt;Firebase&lt;/a&gt; 와 같이 WebSocket이 필요한 다른 모듈 을로드하는 경우 반응 네이티브 후에로드 / 요구해야합니다.</target>
        </trans-unit>
        <trans-unit id="62c7f3bcca6c31ed80ce4729c07394d18dd66225" translate="yes" xml:space="preserve">
          <source>React Native is also contributed to by a core team of engineers from several companies outside of Facebook, as well as many other open source &lt;a href=&quot;https://github.com/facebook/react-native/graphs/contributors&quot;&gt;contributors&lt;/a&gt;. The core team coordinates open source releases through the &lt;a href=&quot;https://github.com/react-native-community/react-native-releases&quot;&gt;&lt;code&gt;react-native-releases&lt;/code&gt;&lt;/a&gt; repository on GitHub.</source>
          <target state="translated">React Native는 Facebook 이외의 여러 회사의 핵심 엔지니어 팀과 다른 많은 오픈 소스 &lt;a href=&quot;https://github.com/facebook/react-native/graphs/contributors&quot;&gt;기고자도 제공&lt;/a&gt; 합니다. 핵심 팀 은 GitHub 의 &lt;a href=&quot;https://github.com/react-native-community/react-native-releases&quot;&gt; &lt;code&gt;react-native-releases&lt;/code&gt; &lt;/a&gt; 저장소를 통해 오픈 소스 릴리스를 조정 합니다.</target>
        </trans-unit>
        <trans-unit id="16c9989d1bcf6dcbf471824ea0139746af2f4162" translate="yes" xml:space="preserve">
          <source>React Native is great when you are starting a new mobile app from scratch. However, it also works well for adding a single view or user flow to existing native applications. With a few steps, you can add new React Native based features, screens, views, etc.</source>
          <target state="translated">React Native는 새로운 모바일 앱을 처음부터 시작할 때 유용합니다. 그러나 기존의 기본 응용 프로그램에 단일 뷰 또는 사용자 흐름을 추가하는 데에도 효과적입니다. 몇 단계 만 거치면 새로운 React Native 기반 기능, 화면,보기 등을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="68c50e4c90ab7c0e0d3825d793507ec345a79a09" translate="yes" xml:space="preserve">
          <source>React Native is inspired by React, so the basic idea of the information flow is similar. The flow in React is one-directional. We maintain a hierarchy of components, in which each component depends only on its parent and its own internal state. We do this with properties: data is passed from a parent to its children in a top-down manner. If an ancestor component relies on the state of its descendant, one should pass down a callback to be used by the descendant to update the ancestor.</source>
          <target state="translated">React Native는 React에서 영감을 얻었으므로 정보 흐름의 기본 아이디어는 비슷합니다. React의 흐름은 단방향입니다. 우리는 각 구성 요소가 부모와 자체 내부 상태에만 의존하는 구성 요소의 계층 구조를 유지합니다. 속성을 사용하여이를 수행합니다. 데이터는 위에서 아래로 상위에서 하위로 전달됩니다. 상위 구성 요소가 하위 항목의 상태에 의존하는 경우 하위 항목이 상위 항목을 업데이트하는 데 사용할 콜백을 전달해야합니다.</target>
        </trans-unit>
        <trans-unit id="2c84ad346c9c35b2d45eec49831e7313fba7240b" translate="yes" xml:space="preserve">
          <source>React Native is like React, but it uses native components instead of web components as building blocks. So to understand the basic structure of a React Native app, you need to understand some of the basic React concepts, like JSX, components, &lt;code&gt;state&lt;/code&gt;, and &lt;code&gt;props&lt;/code&gt;. If you already know React, you still need to learn some React-Native-specific stuff, like the native components. This tutorial is aimed at all audiences, whether you have React experience or not.</source>
          <target state="translated">React Native는 React와 비슷하지만 웹 구성 요소 대신 기본 구성 요소를 빌딩 블록으로 사용합니다. 따라서 React Native 앱의 기본 구조를 이해하려면 JSX, 구성 요소, &lt;code&gt;state&lt;/code&gt; 및 &lt;code&gt;props&lt;/code&gt; 와 같은 일부 기본 React 개념을 이해해야 합니다. 이미 React를 알고 있다면 네이티브 구성 요소와 같은 React-Native 관련 내용을 계속 알아야합니다. 이 튜토리얼은 React 경험이 있든 없든 모든 청중을 대상으로합니다.</target>
        </trans-unit>
        <trans-unit id="bfa3176e9b1f82348ef28e16a8ffeac7a2ee0e97" translate="yes" xml:space="preserve">
          <source>React Native is one of Facebook's first open source projects that is both under very active development and is also being used to ship code to everybody using Facebook's mobile apps. If you're interested in contributing to React Native, hopefully this document makes the process for contributing clear.</source>
          <target state="translated">React Native는 Facebook의 첫 번째 오픈 소스 프로젝트 중 하나이며 매우 활발히 개발 중이며 Facebook의 모바일 앱을 사용하여 모든 사람에게 코드를 제공하는 데 사용되고 있습니다. React Native에 공헌하고 싶다면이 문서가 공헌 과정을 명확하게하기를 바랍니다.</target>
        </trans-unit>
        <trans-unit id="2f6da74bda24a7ec0c53aad5b2b6669e03cda165" translate="yes" xml:space="preserve">
          <source>React Native provides a module that detects the platform in which the app is running. You can use the detection logic to implement platform-specific code. Use this option when only small parts of a component are platform-specific.</source>
          <target state="translated">React Native는 앱이 실행중인 플랫폼을 감지하는 모듈을 제공합니다. 감지 논리를 사용하여 플랫폼 별 코드를 구현할 수 있습니다. 구성 요소의 작은 부분 만 플랫폼에 특정한 경우이 옵션을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="a51253a9ed6a6dadb60316d6e4e2bf2e2d3ab5b3" translate="yes" xml:space="preserve">
          <source>React Native provides a number of built-in components. You will find a full list of components and APIs on the sidebar to the left. If you're not sure where to get started, take a look at the following categories:</source>
          <target state="translated">React Native는 여러 내장 컴포넌트를 제공합니다. 사이드 바의 왼쪽에있는 구성 요소 및 API의 전체 목록이 있습니다. 어디서부터 시작해야할지 확실하지 않은 경우 다음 범주를 살펴보십시오.</target>
        </trans-unit>
        <trans-unit id="6911fe7605c9b3a12467de81be3e29e3f9283506" translate="yes" xml:space="preserve">
          <source>React Native provides a suite of components for presenting lists of data. Generally, you'll want to use either &lt;a href=&quot;flatlist&quot;&gt;FlatList&lt;/a&gt; or &lt;a href=&quot;sectionlist&quot;&gt;SectionList&lt;/a&gt;.</source>
          <target state="translated">React Native는 데이터 목록을 표시하기위한 일련의 구성 요소를 제공합니다. 일반적으로 &lt;a href=&quot;flatlist&quot;&gt;FlatList&lt;/a&gt; 또는 &lt;a href=&quot;sectionlist&quot;&gt;SectionList&lt;/a&gt; 를 사용하려고합니다 .</target>
        </trans-unit>
        <trans-unit id="45174f540a9960d5218e3a5aedc3a3c1c2edce5d" translate="yes" xml:space="preserve">
          <source>React Native provides a unified way of managing images and other media assets in your iOS and Android apps. To add a static image to your app, place it somewhere in your source code tree and reference it like this:</source>
          <target state="translated">React Native는 iOS 및 Android 앱에서 이미지 및 기타 미디어 자산을 관리하는 통합 된 방법을 제공합니다. 정적 이미지를 앱에 추가하려면 소스 코드 트리 어딘가에 배치하고 다음과 같이 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d9b8247785a9a76b6ba4a3c4ad96d60f9de9f836" translate="yes" xml:space="preserve">
          <source>React Native provides facilities to make it easier to test integrated components that require both native and JS components to communicate across the bridge. The two main components are &lt;code&gt;RCTTestRunner&lt;/code&gt; and &lt;code&gt;RCTTestModule&lt;/code&gt;. &lt;code&gt;RCTTestRunner&lt;/code&gt; sets up the ReactNative environment and provides facilities to run the tests as &lt;code&gt;XCTestCase&lt;/code&gt;s in Xcode (&lt;code&gt;runTest:module&lt;/code&gt; is the simplest method). &lt;code&gt;RCTTestModule&lt;/code&gt; is exported to JS as &lt;code&gt;NativeModules.TestModule&lt;/code&gt;.</source>
          <target state="translated">React Native는 기본 구성 요소와 JS 구성 요소가 모두 브리지를 통해 통신해야하는 통합 구성 요소를보다 쉽게 ​​테스트 할 수있는 기능을 제공합니다. 두 가지 주요 구성 요소는 &lt;code&gt;RCTTestRunner&lt;/code&gt; 및 &lt;code&gt;RCTTestModule&lt;/code&gt; 입니다. &lt;code&gt;RCTTestRunner&lt;/code&gt; 는 ReactNative 환경을 설정하고 Xcode에서 &lt;code&gt;XCTestCase&lt;/code&gt; 로 테스트를 실행하는 기능을 제공합니다 ( &lt;code&gt;runTest:module&lt;/code&gt; 이 가장 간단한 방법 임). &lt;code&gt;RCTTestModule&lt;/code&gt; 은 &lt;code&gt;NativeModules.TestModule&lt;/code&gt; 로 JS에 내보내집니다 .</target>
        </trans-unit>
        <trans-unit id="147541db6a4f87d8df4298a997281eb4b711cdd9" translate="yes" xml:space="preserve">
          <source>React Native provides the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot;&gt;Fetch API&lt;/a&gt; for your networking needs. Fetch will seem familiar if you have used &lt;code&gt;XMLHttpRequest&lt;/code&gt; or other networking APIs before. You may refer to MDN's guide on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch&quot;&gt;Using Fetch&lt;/a&gt; for additional information.</source>
          <target state="translated">React Native는 네트워킹 요구에 맞는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot;&gt;Fetch API&lt;/a&gt; 를 제공합니다. 이전에 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 또는 다른 네트워킹 API를 사용한 적이 있다면 Fetch가 익숙해 보일 것 입니다. 추가 정보는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch&quot;&gt;가져 오기 사용에&lt;/a&gt; 대한 MDN 안내서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="955833e7abe130f447a2f103981ba5420d08f445" translate="yes" xml:space="preserve">
          <source>React Native provides two complementary animation systems: &lt;a href=&quot;animations#animated-api&quot;&gt;&lt;code&gt;Animated&lt;/code&gt;&lt;/a&gt; for granular and interactive control of specific values, and &lt;a href=&quot;animations#layoutanimation-api&quot;&gt;&lt;code&gt;LayoutAnimation&lt;/code&gt;&lt;/a&gt; for animated global layout transactions.</source>
          <target state="translated">: 반응 기본 두 보완 애니메이션 시스템을 제공 &lt;a href=&quot;animations#animated-api&quot;&gt; &lt;code&gt;Animated&lt;/code&gt; &lt;/a&gt; 특정 값의 세분화 및 대화 형 제어 및 &lt;a href=&quot;animations#layoutanimation-api&quot;&gt; &lt;code&gt;LayoutAnimation&lt;/code&gt; &lt;/a&gt; 애니메이션 글로벌 레이아웃 거래를위한.</target>
        </trans-unit>
        <trans-unit id="3d1997d2007d297c88ff6c5a745f9e51ab7710c9" translate="yes" xml:space="preserve">
          <source>React Native provides two ways to easily organize your code and separate it by platform:</source>
          <target state="translated">React Native는 코드를 쉽게 구성하고 플랫폼별로 분리하는 두 가지 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f9797c7d9024909a275710549a58ce7f03cc8848" translate="yes" xml:space="preserve">
          <source>React Native requires a recent version of the Java SE Development Kit (JDK). &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;Download and install JDK 8 or newer&lt;/a&gt; if needed.</source>
          <target state="translated">React Native에는 최신 버전의 JDK (Java SE Development Kit)가 필요합니다. 필요한 경우 &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;JDK 8 이상을 다운로드하여 설치하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fecd003d1c93624e94be4522348a999da504f23b" translate="yes" xml:space="preserve">
          <source>React Native ships with the &lt;a href=&quot;https://babeljs.io&quot;&gt;Babel JavaScript compiler&lt;/a&gt;. Check &lt;a href=&quot;https://babeljs.io/docs/plugins/#transform-plugins&quot;&gt;Babel documentation&lt;/a&gt; on its supported transformations for more details.</source>
          <target state="translated">React Native는 &lt;a href=&quot;https://babeljs.io&quot;&gt;Babel JavaScript 컴파일러&lt;/a&gt; 와 함께 제공됩니다 . 자세한 내용은 지원되는 변환에 대한 &lt;a href=&quot;https://babeljs.io/docs/plugins/#transform-plugins&quot;&gt;Babel 설명서&lt;/a&gt; 를 확인 하십시오.</target>
        </trans-unit>
        <trans-unit id="65c8816820b5e961da45700827da3c1f97267242" translate="yes" xml:space="preserve">
          <source>React Native still has the concept of style inheritance, but limited to text subtrees. In this case, the second part will be both bold and red.</source>
          <target state="translated">React Native는 여전히 스타일 상속 개념을 가지고 있지만 텍스트 하위 트리로 제한됩니다. 이 경우 두 번째 부분은 굵고 빨간색입니다.</target>
        </trans-unit>
        <trans-unit id="8a1ee6e19529899c752f263fd783095cddc79efd" translate="yes" xml:space="preserve">
          <source>React Native supports &lt;code&gt;rgb()&lt;/code&gt; and &lt;code&gt;rgba()&lt;/code&gt; in both hexadecimal and functional notation:</source>
          <target state="translated">React Native는 16 진수 및 함수 표기법 모두에서 &lt;code&gt;rgb()&lt;/code&gt; 및 &lt;code&gt;rgba()&lt;/code&gt; 를 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="d13d26cd4455c7bb023b4f3255f3decd5a601122" translate="yes" xml:space="preserve">
          <source>React Native supports a few keyboard shortcuts in the iOS Simulator. They are described below. To enable them, open the Hardware menu, select Keyboard, and make sure that &quot;Connect Hardware Keyboard&quot; is checked.</source>
          <target state="translated">React Native는 iOS 시뮬레이터에서 몇 가지 키보드 단축키를 지원합니다. 아래에 설명되어 있습니다. 활성화하려면 하드웨어 메뉴를 열고 키보드를 선택한 다음 &quot;하드웨어 키보드 연결&quot;이 선택되어 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="fd494e0414b8c98d70a8fb1421016ef40e5f66f1" translate="yes" xml:space="preserve">
          <source>React Native uses the wildcard DNS service &lt;strong&gt;xip.io&lt;/strong&gt; to address your device. Some routers have security features to prevent DNS Servers to resolve anything in the local IP range.</source>
          <target state="translated">React Native는 와일드 카드 DNS 서비스 &lt;strong&gt;xip.io&lt;/strong&gt; 를 사용하여 장치를 처리합니다. 일부 라우터에는 DNS 서버가 로컬 IP 범위의 모든 것을 해결하지 못하도록하는 보안 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="c63ef8ae4540186872f0bb6d8dda3c6c1fecb0e4" translate="yes" xml:space="preserve">
          <source>React Native will automatically pick up the right file based on the running platform.</source>
          <target state="translated">React Native는 실행중인 플랫폼을 기반으로 올바른 파일을 자동으로 선택합니다.</target>
        </trans-unit>
        <trans-unit id="22afcf1b96c3a370340668bcbdcff36d23ea4710" translate="yes" xml:space="preserve">
          <source>React Native will not expose any methods of &lt;code&gt;CalendarManager&lt;/code&gt; to JavaScript unless explicitly told to. This is done using the &lt;code&gt;RCT_EXPORT_METHOD()&lt;/code&gt; macro:</source>
          <target state="translated">React Native는 명시 적으로 지시되지 않는 한 &lt;code&gt;CalendarManager&lt;/code&gt; 의 메소드 를 JavaScript에 노출시키지 않습니다 . 이는 &lt;code&gt;RCT_EXPORT_METHOD()&lt;/code&gt; 매크로를 사용하여 수행됩니다 .</target>
        </trans-unit>
        <trans-unit id="a4a20ba54858fbaec65996155932c701efd142f4" translate="yes" xml:space="preserve">
          <source>React Navigation</source>
          <target state="translated">반응 탐색</target>
        </trans-unit>
        <trans-unit id="6264dd4d1629fa0d0d1ceb041022d277beb970a8" translate="yes" xml:space="preserve">
          <source>React Navigation routers make it easy to override navigation logic or integrate it into redux. Because routers can be nested inside each other, developers can override navigation logic for one area of the app without making widespread changes.</source>
          <target state="translated">React Navigation 라우터를 사용하면 탐색 로직을 쉽게 재정의하거나 redux에 통합 할 수 있습니다. 라우터는 서로 중첩 될 수 있으므로 개발자는 광범위하게 변경하지 않고도 앱의 한 영역에 대한 탐색 논리를 무시할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="93e602b8a83e6f48a3384407ed72cd3af12621a0" translate="yes" xml:space="preserve">
          <source>React component that wraps the Android-only &lt;a href=&quot;https://developer.android.com/reference/android/support/v7/widget/Toolbar.html&quot;&gt;&lt;code&gt;Toolbar&lt;/code&gt; widget&lt;/a&gt;. A Toolbar can display a logo, navigation icon (e.g. hamburger menu), a title &amp;amp; subtitle and a list of actions. The title and subtitle are expanded so the logo and navigation icons are displayed on the left, title and subtitle in the middle and the actions on the right.</source>
          <target state="translated">Android 전용 &lt;a href=&quot;https://developer.android.com/reference/android/support/v7/widget/Toolbar.html&quot;&gt; &lt;code&gt;Toolbar&lt;/code&gt; 위젯&lt;/a&gt; 을 래핑하는 컴포넌트를 반응하십시오 . 툴바는 로고, 탐색 아이콘 (예 : 햄버거 메뉴), 제목 및 자막 및 작업 목록을 표시 할 수 있습니다. 제목과 자막이 확장되어 로고와 탐색 아이콘이 왼쪽에, 제목과 자막이 가운데에 표시되고 오른쪽 작업이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="6fdb5811f21f0c43e01c7bdb4897828b0a32e290" translate="yes" xml:space="preserve">
          <source>React component that wraps the platform &lt;code&gt;DrawerLayout&lt;/code&gt; (Android only). The Drawer (typically used for navigation) is rendered with &lt;code&gt;renderNavigationView&lt;/code&gt; and direct children are the main view (where your content goes). The navigation view is initially not visible on the screen, but can be pulled in from the side of the window specified by the &lt;code&gt;drawerPosition&lt;/code&gt; prop and its width can be set by the &lt;code&gt;drawerWidth&lt;/code&gt; prop.</source>
          <target state="translated">플랫폼 &lt;code&gt;DrawerLayout&lt;/code&gt; 을 감싸는 구성 요소를 반응 시킵니다 (Android 만 해당). 드로어 (일반적으로 탐색에 사용됨)는 &lt;code&gt;renderNavigationView&lt;/code&gt; 로 렌더링되며 직접 하위는 기본보기 (콘텐츠가있는 곳)입니다. 탐색보기는 처음에는 화면에 표시되지 않지만 &lt;code&gt;drawerPosition&lt;/code&gt; 소품으로 지정된 창의 측면에서 가져올 수 있으며 너비는 &lt;code&gt;drawerWidth&lt;/code&gt; 소품 으로 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bf3dc2782eb12c95b89d05cfff229cc41327cf9f" translate="yes" xml:space="preserve">
          <source>React style object.</source>
          <target state="translated">스타일 객체를 반응시킵니다.</target>
        </trans-unit>
        <trans-unit id="8a896b33105b3433759f07778d6a094994ddd77c" translate="yes" xml:space="preserve">
          <source>ReactNative</source>
          <target state="translated">ReactNative</target>
        </trans-unit>
        <trans-unit id="e9fd327ae8d3c16a809bd67771713a0b46b18237" translate="yes" xml:space="preserve">
          <source>Read more about &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/ReactAndroid/src/main/java/com/facebook/react/bridge/ReadableMap.java&quot;&gt;ReadableMap&lt;/a&gt; and &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/ReactAndroid/src/main/java/com/facebook/react/bridge/ReadableArray.java&quot;&gt;ReadableArray&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/ReactAndroid/src/main/java/com/facebook/react/bridge/ReadableMap.java&quot;&gt;ReadableMap&lt;/a&gt; 및 &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/ReactAndroid/src/main/java/com/facebook/react/bridge/ReadableArray.java&quot;&gt;ReadableArray&lt;/a&gt; 에 대해서 더 읽어보세요.</target>
        </trans-unit>
        <trans-unit id="2bef910ce156d737e8bd786154ac6d1867fdab75" translate="yes" xml:space="preserve">
          <source>Read more about interpolation in the &lt;a href=&quot;animations#interpolation&quot;&gt;Animation&lt;/a&gt; guide.</source>
          <target state="translated">&lt;a href=&quot;animations#interpolation&quot;&gt;애니메이션&lt;/a&gt; 가이드 에서 보간에 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="6f998916f72149b69bbbc92f229b0fb6de0e65a6" translate="yes" xml:space="preserve">
          <source>Read the guides on Native Modules (&lt;a href=&quot;native-modules-ios&quot;&gt;iOS&lt;/a&gt;, &lt;a href=&quot;native-modules-android&quot;&gt;Android&lt;/a&gt;) and Native UI Components (&lt;a href=&quot;native-components-ios&quot;&gt;iOS&lt;/a&gt;, &lt;a href=&quot;native-components-android&quot;&gt;Android&lt;/a&gt;) if you are interested in extending native functionality.</source>
          <target state="translated">기본 기능 확장에 관심이있는 경우 기본 모듈 ( &lt;a href=&quot;native-modules-ios&quot;&gt;iOS&lt;/a&gt; , &lt;a href=&quot;native-modules-android&quot;&gt;Android&lt;/a&gt; ) 및 기본 UI 구성 요소 ( &lt;a href=&quot;native-components-ios&quot;&gt;iOS&lt;/a&gt; , &lt;a href=&quot;native-components-android&quot;&gt;Android&lt;/a&gt; ) 에 대한 안내서를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="e4cd8f72fe822839c2f5fc3f963146ea1e7d8f45" translate="yes" xml:space="preserve">
          <source>Read through the &lt;a href=&quot;http://facebook.github.io/react-native/&quot;&gt;React Native docs&lt;/a&gt;. If you find anything that is confusing or can be improved, you can make edits by clicking &quot;Edit&quot; at the top of most docs.</source>
          <target state="translated">&lt;a href=&quot;http://facebook.github.io/react-native/&quot;&gt;React Native 문서를&lt;/a&gt; 읽습니다 . 혼란 스럽거나 개선 할 수있는 것이 있으면 대부분의 문서 상단에있는 &quot;수정&quot;을 클릭하여 편집 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a8e9c0678e3d8e255267f3dede08a0df85d24519" translate="yes" xml:space="preserve">
          <source>Read through the &lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;React Native docs&lt;/a&gt;. If you find anything that is confusing or can be improved, you can make edits by clicking &quot;Edit&quot; at the top of most docs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f80a83a128e889c5cbecf50338182cc394217dea" translate="yes" xml:space="preserve">
          <source>Red-green-blue</source>
          <target state="translated">Red-green-blue</target>
        </trans-unit>
        <trans-unit id="bca712724e2b6a9c09fb16e779c8c8852b87856a" translate="yes" xml:space="preserve">
          <source>RedBoxes and YellowBoxes are automatically disabled in release (production) builds.</source>
          <target state="translated">릴리스 (프로덕션) 빌드에서 RedBox 및 YellowBox가 자동으로 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="d0b44e05cc60c4aae202e937477304b4adfaa2eb" translate="yes" xml:space="preserve">
          <source>Refactoring the above code to use a promise instead of callbacks looks like this:</source>
          <target state="translated">콜백 대신 약속을 사용하기 위해 위의 코드를 리팩터링하면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a9a5b32e85108a1bc6ff9fb29b3d80a1f2598b08" translate="yes" xml:space="preserve">
          <source>Refer to the &lt;a href=&quot;animations#animated-api&quot;&gt;Animations&lt;/a&gt; guide to see additional examples of &lt;code&gt;Animated&lt;/code&gt; in action.</source>
          <target state="translated">참고하여주십시오 &lt;a href=&quot;animations#animated-api&quot;&gt;애니메이션&lt;/a&gt; 의 추가 예제 볼 가이드 &lt;code&gt;Animated&lt;/code&gt; 행동을.</target>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="3e9ac17fc180bff8a7bb455b533de3de62529c8a" translate="yes" xml:space="preserve">
          <source>RefreshControl</source>
          <target state="translated">RefreshControl</target>
        </trans-unit>
        <trans-unit id="aaf8cfffbe74b7c2b12b426d9237b93f1edb7bf1" translate="yes" xml:space="preserve">
          <source>RefreshControl#colors</source>
          <target state="translated">RefreshControl#colors</target>
        </trans-unit>
        <trans-unit id="939e7bd0f2feb07d938de640577c2c9bf82061df" translate="yes" xml:space="preserve">
          <source>RefreshControl#enabled</source>
          <target state="translated">RefreshControl#enabled</target>
        </trans-unit>
        <trans-unit id="7242c8f9230df79737f9c8e28b6a937b58c180a7" translate="yes" xml:space="preserve">
          <source>RefreshControl#onRefresh</source>
          <target state="translated">RefreshControl#onRefresh</target>
        </trans-unit>
        <trans-unit id="c0dafaa3f11192d33640cfc6cf1676700a1361c0" translate="yes" xml:space="preserve">
          <source>RefreshControl#progressBackgroundColor</source>
          <target state="translated">RefreshControl#progressBackgroundColor</target>
        </trans-unit>
        <trans-unit id="02bbd8dfbf0a40afcbc87cea9deea36715bb7db8" translate="yes" xml:space="preserve">
          <source>RefreshControl#progressViewOffset</source>
          <target state="translated">RefreshControl#progressViewOffset</target>
        </trans-unit>
        <trans-unit id="025afd98a270745f44520a9bb5c60d4351606c98" translate="yes" xml:space="preserve">
          <source>RefreshControl#refreshing</source>
          <target state="translated">RefreshControl#refreshing</target>
        </trans-unit>
        <trans-unit id="e8ab371c1aa04c04db34f1fdf40c5a038b3e6b39" translate="yes" xml:space="preserve">
          <source>RefreshControl#size</source>
          <target state="translated">RefreshControl#size</target>
        </trans-unit>
        <trans-unit id="357cb8127be667b0b8967327390d1555cd081d85" translate="yes" xml:space="preserve">
          <source>RefreshControl#tintColor</source>
          <target state="translated">RefreshControl#tintColor</target>
        </trans-unit>
        <trans-unit id="8c40e0600e0b92f70c8dfc62cca2d6575bf9b189" translate="yes" xml:space="preserve">
          <source>RefreshControl#title</source>
          <target state="translated">RefreshControl#title</target>
        </trans-unit>
        <trans-unit id="4727ab46f7c886447595f677fae9025485bbe05d" translate="yes" xml:space="preserve">
          <source>RefreshControl#titleColor</source>
          <target state="translated">RefreshControl#titleColor</target>
        </trans-unit>
        <trans-unit id="37ff643f77aa449cc425e0fbdaa728de903a1e81" translate="yes" xml:space="preserve">
          <source>Register a headless task. A headless task is a bit of code that runs without a UI. @param taskKey the key associated with this task @param task a promise returning function that takes some data passed from the native side as the only argument; when the promise is resolved or rejected the native side is notified of this event and it may decide to destroy the JS context.</source>
          <target state="translated">헤드리스 작업을 등록하십시오. 헤드리스 작업은 UI없이 실행되는 약간의 코드입니다. @param taskKey이 작업과 관련된 키 @param task 기본 측에서 전달 된 일부 데이터를 유일한 인수로 취하는 약속 반환 함수. 약속이 해결되거나 거부되면 네이티브 측에이 이벤트가 통지되고 JS 컨텍스트를 파괴하기로 결정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="35b8cbca5b052e6c7adca51fb0091b777651ee62" translate="yes" xml:space="preserve">
          <source>Register for an &lt;a href=&quot;https://developer.apple.com/&quot;&gt;Apple developer account&lt;/a&gt; if you don't have one yet.</source>
          <target state="translated">아직 &lt;a href=&quot;https://developer.apple.com/&quot;&gt;Apple 개발자 계정이&lt;/a&gt; 없으면 등록하십시오 .</target>
        </trans-unit>
        <trans-unit id="d6e124360a35d02b920b19d2c23d98d520942eff" translate="yes" xml:space="preserve">
          <source>Register the Module</source>
          <target state="translated">모듈 등록</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
