<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="spring_boot">
    <body>
      <group id="spring_boot">
        <trans-unit id="9ebaa271f76e72753e427bfe894a2fa558faeaf7" translate="yes" xml:space="preserve">
          <source>Path at which the console is available.</source>
          <target state="translated">콘솔을 사용할 수있는 경로입니다.</target>
        </trans-unit>
        <trans-unit id="eac2f6c1d6508ac7e744d044341200b9fd3710cb" translate="yes" xml:space="preserve">
          <source>Path of the Oracle Kerberos cache file. Requires Flyway Teams.</source>
          <target state="translated">Oracle Kerberos 캐시 파일의 경로입니다. Flyway 팀이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="6157d9f506f2583f1b462b50ec595ef2439a7569" translate="yes" xml:space="preserve">
          <source>Path of the Oracle Kerberos config file. Requires Flyway Teams.</source>
          <target state="translated">Oracle Kerberos 구성 파일의 경로입니다. Flyway 팀이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="adcc6c1f7a3444a977bfba4f51fb84f463fa2ba5" translate="yes" xml:space="preserve">
          <source>Path of the dispatcher servlet. Setting a custom value for this property is not compatible with the PathPatternParser matching strategy.</source>
          <target state="translated">디스패처 서블릿의 경로입니다. 이 속성에 대한 사용자 지정 값을 설정하는 것은 PathPatternParser 일치 전략과 호환되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="071cacfe4658a608f42bcd329f654b81493c5eab" translate="yes" xml:space="preserve">
          <source>Path of the error controller.</source>
          <target state="translated">오류 컨트롤러의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="be5ceace15b48a2ab99452873c9b54d02c498add" translate="yes" xml:space="preserve">
          <source>Path of the session cookie.</source>
          <target state="translated">세션 쿠키의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="f16baa23c874a3e4ef673f1ab5fd41f55c1a1083" translate="yes" xml:space="preserve">
          <source>Path pattern used for static resources.</source>
          <target state="translated">정적 자원에 사용되는 경로 패턴입니다.</target>
        </trans-unit>
        <trans-unit id="ead184453a1816449642ebeeb828bd7c9354c8a1" translate="yes" xml:space="preserve">
          <source>Path that serves as the base URI for the application. If specified, overrides the value of &quot;@ApplicationPath&quot;.</source>
          <target state="translated">애플리케이션의 기본 URI 역할을하는 경로입니다. 지정된 경우 &quot;@ApplicationPath&quot;값을 재정의합니다.</target>
        </trans-unit>
        <trans-unit id="94d8132504dde8eec95a114544dbab421ab61a36" translate="yes" xml:space="preserve">
          <source>Path that serves as the base URI for the services.</source>
          <target state="translated">서비스의 기본 URI 역할을하는 경로입니다.</target>
        </trans-unit>
        <trans-unit id="544decc4834fe665466c76072c564a20a37084cd" translate="yes" xml:space="preserve">
          <source>Path to properties file (for example, &lt;code&gt;classpath:loader.properties&lt;/code&gt;). It defaults to &lt;code&gt;loader.properties&lt;/code&gt;.</source>
          <target state="translated">속성 파일의 경로 (예 &lt;code&gt;classpath:loader.properties&lt;/code&gt; ). 기본값은 &lt;code&gt;loader.properties&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="489523db3fc005640b35929ea5d55d3a7af5ed54" translate="yes" xml:space="preserve">
          <source>Path to the JVM key store that holds the certificates.</source>
          <target state="translated">인증서를 보유하는 JVM 키 저장소의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="3e9c9331aa66b37110ddd23002e715cbf13acdf8" translate="yes" xml:space="preserve">
          <source>Path to the SQL file to use to initialize the database schema.</source>
          <target state="translated">데이터베이스 스키마를 초기화하는 데 사용할 SQL 파일의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="90e35848a79c6d4e9be4cac5e82f32a759f8176c" translate="yes" xml:space="preserve">
          <source>Path to the custom schema.</source>
          <target state="translated">커스텀 스키마의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="c3e0477c9f98e1dfb53e3efa9766f1d911a37712" translate="yes" xml:space="preserve">
          <source>Path to the file that holds the trusted certificates.</source>
          <target state="translated">신뢰할 수있는 인증서가있는 파일의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="bc66de3a50b27b996e5d98600e07d3f2eb9523ac" translate="yes" xml:space="preserve">
          <source>Path to the key store that holds the SSL certificate (typically a jks file).</source>
          <target state="translated">SSL 인증서 (일반적으로 jks 파일)를 보유하는 키 저장소의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="0188178b15cfb2dcddabc03fab8a338c867de716" translate="yes" xml:space="preserve">
          <source>Path to the key store that holds the SSL certificate.</source>
          <target state="translated">SSL 인증서를 보유하는 키 저장소의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="5ef12e59ccfcdee8eb2c6abcce4cd91e12600c29" translate="yes" xml:space="preserve">
          <source>Path under which RSocket handles requests (only works with websocket transport).</source>
          <target state="translated">RSocket이 요청을 처리하는 경로입니다 (websocket 전송에서만 작동).</target>
        </trans-unit>
        <trans-unit id="e99f1a0a72aa8a864691e44a1e2e3fae99b7bda7" translate="yes" xml:space="preserve">
          <source>Path used to compute the available disk space.</source>
          <target state="translated">사용 가능한 디스크 공간을 계산하는 데 사용되는 경로입니다.</target>
        </trans-unit>
        <trans-unit id="08eba626c8e9e2d99d6e87d856019be83d08759c" translate="yes" xml:space="preserve">
          <source>Pattern for rolled-over log file names (default &lt;code&gt;${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz&lt;/code&gt;).</source>
          <target state="translated">롤오버 된 로그 파일 이름의 패턴 (기본값 &lt;code&gt;${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="760a964bc80713422fe7fda24a30845d8db51d60" translate="yes" xml:space="preserve">
          <source>Pattern for rolled-over log file names.</source>
          <target state="translated">롤오버 된 로그 파일 이름의 패턴입니다.</target>
        </trans-unit>
        <trans-unit id="3d47883aba87c16c186de494538123dcbd324c08" translate="yes" xml:space="preserve">
          <source>Patterns that should be excluded from triggering a full restart.</source>
          <target state="translated">전체 재시작 트리거에서 제외해야하는 패턴입니다.</target>
        </trans-unit>
        <trans-unit id="6e29b8912588a439c918a4cd8b8068ead9101f46" translate="yes" xml:space="preserve">
          <source>Perform placeholder replacement in migration scripts.</source>
          <target state="translated">마이그레이션 스크립트에서 자리 표시 자 교체를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="9d47ea0f34dcf266a50810fa0f546d599337aefc" translate="yes" xml:space="preserve">
          <source>Performs a thread dump.</source>
          <target state="translated">스레드 덤프를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="34adaeed3fbc0179d7e3b3ddba686f51a0581ebb" translate="yes" xml:space="preserve">
          <source>Permits any additional value to be provided.</source>
          <target state="translated">추가 값을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4dcd2bcd0162613aeb2891ba2d67651e805f651a" translate="yes" xml:space="preserve">
          <source>Pixel mode to use when rendering the image.</source>
          <target state="translated">이미지를 렌더링 할 때 사용할 픽셀 모드입니다.</target>
        </trans-unit>
        <trans-unit id="436858800d12751ece4577cf3420fc54118da098" translate="yes" xml:space="preserve">
          <source>Placeholder replacement is done from System and environment variables plus the properties file itself on all values before use.</source>
          <target state="translated">자리 표시 자 대체는 사용하기 전에 시스템 및 환경 변수와 모든 값의 속성 파일 자체에서 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="f941d63d03e05e1924c52d9cfdbe54e102181c20" translate="yes" xml:space="preserve">
          <source>Placeholders and their replacements to apply to sql migration scripts.</source>
          <target state="translated">SQL 마이그레이션 스크립트에 적용 할 자리 표시 자 및 해당 대체.</target>
        </trans-unit>
        <trans-unit id="2cf884fd9e321d91af2340f13924f0ca6c725fe6" translate="yes" xml:space="preserve">
          <source>Platform to use in the DDL or DML scripts (such as schema-${platform}.sql or data-${platform}.sql).</source>
          <target state="translated">DDL 또는 DML 스크립트에서 사용할 플랫폼 (예 : schema-$ {platform} .sql 또는 data-$ {platform} .sql).</target>
        </trans-unit>
        <trans-unit id="c37e0fe5716e04521fd9af59ade8fd8b9ceb663f" translate="yes" xml:space="preserve">
          <source>Please refer to the plugin&amp;rsquo;s documentation to learn more:</source>
          <target state="translated">자세한 내용은 플러그인 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6144a3c71a76f6666362338639a2ef47304bc530" translate="yes" xml:space="preserve">
          <source>Plugging RSocket into a web server is only supported with Reactor Netty, as RSocket itself is built with that library.</source>
          <target state="translated">RSocket을 웹 서버에 연결하는 것은 RSocket 자체가 해당 라이브러리로 빌드되므로 Reactor Netty에서만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="4dcfb1d82ad5ad69017c23368e06b7e348a51690" translate="yes" xml:space="preserve">
          <source>Pooled connections older than this threshold will be closed and removed from the pool.</source>
          <target state="translated">이 임계 값보다 오래된 풀링 된 연결은 닫히고 풀에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="7e01cb071750dd5a69dc1c2ff850032cf6a6df64" translate="yes" xml:space="preserve">
          <source>Pooled connections that have been idle in the pool for longer than this threshold will be tested before they are used again.</source>
          <target state="translated">이 임계 값보다 오랫동안 풀에서 유휴 상태였던 풀링 된 연결은 다시 사용되기 전에 테스트됩니다.</target>
        </trans-unit>
        <trans-unit id="682513728f934b16477d3cded12854878f443871" translate="yes" xml:space="preserve">
          <source>Port of the Ganglia server to receive exported metrics.</source>
          <target state="translated">내 보낸 메트릭을 수신 할 Ganglia 서버의 포트입니다.</target>
        </trans-unit>
        <trans-unit id="9f18929e69113b56d96d0069f34fd0fbf342806f" translate="yes" xml:space="preserve">
          <source>Port of the Graphite server to receive exported metrics.</source>
          <target state="translated">내 보낸 메트릭을 수신 할 Graphite 서버의 포트입니다.</target>
        </trans-unit>
        <trans-unit id="99312c703de7c16fc3c87175f9399ff0838a3bed" translate="yes" xml:space="preserve">
          <source>Port of the StatsD server to receive exported metrics.</source>
          <target state="translated">내 보낸 메트릭을 수신 할 StatsD 서버의 포트입니다.</target>
        </trans-unit>
        <trans-unit id="eb347fd6169f5894b1783a1aaed24ac6c56fc511" translate="yes" xml:space="preserve">
          <source>Port to use if a contact point does not specify one.</source>
          <target state="translated">접점이 지정하지 않은 경우 사용할 포트입니다.</target>
        </trans-unit>
        <trans-unit id="bb843c91c4d8f380e86d3b1203d3d4effb9774fe" translate="yes" xml:space="preserve">
          <source>Position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).</source>
          <target state="translated">이 자원이 2 단계 커미트 중에 취해야하는 위치 (항상 첫 번째는 Integer.MIN_VALUE, 마지막은 Integer.MAX_VALUE)입니다.</target>
        </trans-unit>
        <trans-unit id="26de5dbefb8cb2d6bf1be8a2af044067a8db27da" translate="yes" xml:space="preserve">
          <source>Position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, and always last is Integer.MAX_VALUE).</source>
          <target state="translated">2 단계 커미트 중에이 자원이 취해야하는 위치입니다 (항상 첫 번째는 Integer.MIN_VALUE이고 마지막은 Integer.MAX_VALUE 임).</target>
        </trans-unit>
        <trans-unit id="1d391c6eba1c27e61f0554a975a0adec40319be9" translate="yes" xml:space="preserve">
          <source>Preferred JSON mapper to use for HTTP message conversion. By default, auto-detected according to the environment.</source>
          <target state="translated">HTTP 메시지 변환에 사용할 기본 JSON 매퍼입니다. 기본적으로 환경에 따라 자동 감지됩니다.</target>
        </trans-unit>
        <trans-unit id="ef86ab6c4d913c41194f07f583c76a0f97de11a6" translate="yes" xml:space="preserve">
          <source>Prefix for the listener's consumer client.id property.</source>
          <target state="translated">리스너의 소비자 client.id 속성에 대한 접두사입니다.</target>
        </trans-unit>
        <trans-unit id="ce4c650b31058e6c4f40a1261ea25349ea50957b" translate="yes" xml:space="preserve">
          <source>Prefix of placeholders in migration scripts.</source>
          <target state="translated">마이그레이션 스크립트에서 자리 표시 자의 접두사입니다.</target>
        </trans-unit>
        <trans-unit id="1e4c21b9163398f36682be6f7edc385ca63ce78e" translate="yes" xml:space="preserve">
          <source>Prefix that gets prepended to view names when building a URL.</source>
          <target state="translated">URL을 작성할 때보기 이름 앞에 추가되는 접두사입니다.</target>
        </trans-unit>
        <trans-unit id="112ca6ed6745cac6619a60c8a4577b1051e03798" translate="yes" xml:space="preserve">
          <source>Prefix to apply to template names.</source>
          <target state="translated">템플릿 이름에 적용 할 접두사입니다.</target>
        </trans-unit>
        <trans-unit id="e538d3d88e9dd3512dba997fc27d7bc2a32d5f44" translate="yes" xml:space="preserve">
          <source>Prefix to separate the index name from the date format used for rolling indices.</source>
          <target state="translated">인덱스를 롤링하는 데 사용되는 날짜 형식에서 인덱스 이름을 구분하는 접두사입니다.</target>
        </trans-unit>
        <trans-unit id="bdaba481e5a2a07f538bdd9badf8d61d220082f9" translate="yes" xml:space="preserve">
          <source>Prefix to use for the names of newly created threads.</source>
          <target state="translated">새로 생성 된 스레드의 이름에 사용할 접두사입니다.</target>
        </trans-unit>
        <trans-unit id="2384452ed81545a5494f37ee2823f6eefcfb9dd2" translate="yes" xml:space="preserve">
          <source>Prefixes for single-line comments in SQL initialization scripts.</source>
          <target state="translated">SQL 초기화 스크립트의 한 줄 주석에 대한 접두사.</target>
        </trans-unit>
        <trans-unit id="ddbf9e3649895b4c377a6251db4e7b3be4d529a3" translate="yes" xml:space="preserve">
          <source>Prior to Spring Boot 1.3, a single &lt;code&gt;deprecated&lt;/code&gt; boolean attribute can be used instead of the &lt;code&gt;deprecation&lt;/code&gt; element. This is still supported in a deprecated fashion and should no longer be used. If no reason and replacement are available, an empty &lt;code&gt;deprecation&lt;/code&gt; object should be set.</source>
          <target state="translated">Spring Boot 1.3 이전 에는 &lt;code&gt;deprecation&lt;/code&gt; 요소 대신 사용 &lt;code&gt;deprecated&lt;/code&gt; 단일 부울 속성을 사용할 수 있습니다 . 이는 더 이상 사용되지 않는 방식으로 계속 지원되며 더 이상 사용해서는 안됩니다. 이유와 교체를 사용할 수없는 경우 빈 &lt;code&gt;deprecation&lt;/code&gt; 개체를 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="757dd5bceab5778721fbfeee215f88fd77bfe747" translate="yes" xml:space="preserve">
          <source>Priority of a message when sending. Enables QoS (Quality of Service) when set.</source>
          <target state="translated">보낼 때 메시지의 우선 순위입니다. 설정된 경우 QoS (서비스 품질)를 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="12f4c13a6a06f999cc56eb966c94f71ef2658a3f" translate="yes" xml:space="preserve">
          <source>Process</source>
          <target state="translated">Process</target>
        </trans-unit>
        <trans-unit id="909ea1e11d8b007c4e3a264a8d8063fa906df8f3" translate="yes" xml:space="preserve">
          <source>Process ID.</source>
          <target state="translated">프로세스 ID.</target>
        </trans-unit>
        <trans-unit id="d1cb8e585e1c6578cb7e1b4c4edb1e4ded9ec906" translate="yes" xml:space="preserve">
          <source>Produces</source>
          <target state="translated">Produces</target>
        </trans-unit>
        <trans-unit id="ba6d99cac0a2fe91456274e1cfc104ed3b0c77ee" translate="yes" xml:space="preserve">
          <source>Production database connections can also be auto-configured by using a pooling &lt;code&gt;DataSource&lt;/code&gt;. Spring Boot uses the following algorithm for choosing a specific implementation:</source>
          <target state="translated">풀링 &lt;code&gt;DataSource&lt;/code&gt; 를 사용하여 프로덕션 데이터베이스 연결을 자동 구성 할 수도 있습니다 . Spring Boot는 특정 구현을 선택하기 위해 다음 알고리즘을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="8c572ba2b451f53f61973b744cb85db0e68bf563" translate="yes" xml:space="preserve">
          <source>Production jars</source>
          <target state="translated">생산 단지</target>
        </trans-unit>
        <trans-unit id="f81bc5263a0d0e7ee99a0b0428d4a5439af5dec8" translate="yes" xml:space="preserve">
          <source>Production ready features</source>
          <target state="translated">생산 준비 기능</target>
        </trans-unit>
        <trans-unit id="2641416d617d6a97b0c284168c02d1cf9d523aa2" translate="yes" xml:space="preserve">
          <source>Profile expressions that should match for the document to be included.</source>
          <target state="translated">포함 할 문서와 일치해야하는 프로필 표현식입니다.</target>
        </trans-unit>
        <trans-unit id="4cb810e356d8a20ceff282c7b5d9535f00e457c2" translate="yes" xml:space="preserve">
          <source>Profile-specific application properties</source>
          <target state="translated">프로필 별 응용 프로그램 속성</target>
        </trans-unit>
        <trans-unit id="c8a546a256c7df1966173fd47368947e8f89373e" translate="yes" xml:space="preserve">
          <source>Profile-specific properties are loaded from the same locations as standard &lt;code&gt;application.properties&lt;/code&gt;, with profile-specific files always overriding the non-specific ones. If several profiles are specified, a last-wins strategy applies. For example, if profiles &lt;code&gt;prod,live&lt;/code&gt; are specified by the &lt;code&gt;spring.profiles.active&lt;/code&gt; property, values in &lt;code&gt;application-prod.properties&lt;/code&gt; can be overridden by those in &lt;code&gt;application-live.properties&lt;/code&gt;.</source>
          <target state="translated">프로필 별 속성은 표준 &lt;code&gt;application.properties&lt;/code&gt; 와 동일한 위치에서로드 되며 프로필 별 파일은 항상 비 특정 파일을 재정의합니다. 여러 프로필이 지정되면 최후의 전략이 적용됩니다. 프로필 예를 들어, &lt;code&gt;prod,live&lt;/code&gt; 에 의해 지정됩니다 &lt;code&gt;spring.profiles.active&lt;/code&gt; 속성의 값 &lt;code&gt;application-prod.properties&lt;/code&gt; 이 있는 사람들에 의해 무시 될 수 &lt;code&gt;application-live.properties&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0876ee5b41596457e1cf26440a043cf06d599fe1" translate="yes" xml:space="preserve">
          <source>Profile-specific variants of both &lt;code&gt;application.properties&lt;/code&gt; (or &lt;code&gt;application.yml&lt;/code&gt;) and files referenced through &lt;code&gt;@ConfigurationProperties&lt;/code&gt; are considered as files and loaded. See &quot;&lt;a href=&quot;#boot-features-external-config-files-profile-specific&quot;&gt;Profile Specific Files&lt;/a&gt;&quot; for details.</source>
          <target state="translated">&lt;code&gt;application.properties&lt;/code&gt; (또는 &lt;code&gt;application.yml&lt;/code&gt; ) 및 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 를 통해 참조되는 파일 의 프로필 별 변형은 파일 로 간주되고로드됩니다. 자세한 내용은 &quot; &lt;a href=&quot;#boot-features-external-config-files-profile-specific&quot;&gt;프로필 특정 파일&lt;/a&gt; &quot;을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0c2a93009914a1572e318fcd60650e5a2cc3d248" translate="yes" xml:space="preserve">
          <source>Profiles</source>
          <target state="translated">Profiles</target>
        </trans-unit>
        <trans-unit id="2d753c942b78f75f3984f32efda4b1014db56601" translate="yes" xml:space="preserve">
          <source>Profiles are not supported in devtools properties/yaml files.</source>
          <target state="translated">프로필은 devtools 속성 / yaml 파일에서 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6a801bb7d80fde6a5f568af77f5a938b6425301c" translate="yes" xml:space="preserve">
          <source>Profiles, Logging, Security, Caching, Spring Integration, Testing, and more.</source>
          <target state="translated">프로필, 로깅, 보안, 캐싱, Spring 통합, 테스트 등.</target>
        </trans-unit>
        <trans-unit id="616ea68ebf6dcdaf933a32fa37bc6918f74e4afb" translate="yes" xml:space="preserve">
          <source>Programmatic Customization</source>
          <target state="translated">프로그래밍 방식 맞춤 설정</target>
        </trans-unit>
        <trans-unit id="be4b3612509729a447b979bc5ed9ac3780e2d80e" translate="yes" xml:space="preserve">
          <source>Programmatically</source>
          <target state="translated">Programmatically</target>
        </trans-unit>
        <trans-unit id="1993279a8844bab754404d01a1d195ad5c57849b" translate="yes" xml:space="preserve">
          <source>Programmatically, per application, by calling the &lt;code&gt;addListeners&lt;/code&gt; and &lt;code&gt;addInitializers&lt;/code&gt; methods on &lt;code&gt;SpringApplication&lt;/code&gt; before you run it.</source>
          <target state="translated">프로그래밍, 응용 프로그램 당, 호출에 의해 &lt;code&gt;addListeners&lt;/code&gt; 및 &lt;code&gt;addInitializers&lt;/code&gt; 에 방법 &lt;code&gt;SpringApplication&lt;/code&gt; 을 당신이 그것을 실행하기 전에.</target>
        </trans-unit>
        <trans-unit id="b39947d466a8aea38adca1e68011690fbb14d7f0" translate="yes" xml:space="preserve">
          <source>Prometheus</source>
          <target state="translated">Prometheus</target>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="1be6c1b5af58d3c76d44f89994b708a6df3ae3fe" translate="yes" xml:space="preserve">
          <source>Properties Files</source>
          <target state="translated">속성 파일</target>
        </trans-unit>
        <trans-unit id="b7b77017ccdbe15a8a6d1caae4b527b436fb6cf2" translate="yes" xml:space="preserve">
          <source>Properties defined in external configuration override the values specified with the Java API, with the notable exception of the sources used to create the &lt;code&gt;ApplicationContext&lt;/code&gt;. Consider the following application:</source>
          <target state="translated">외부 구성에 정의 된 속성은 &lt;code&gt;ApplicationContext&lt;/code&gt; 를 만드는 데 사용 된 소스의 주목할만한 예외를 제외하고 Java API로 지정된 값을 재정의합니다 . 다음 응용 프로그램을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="81af0787757928b4424e84301cb89d5fa51f9e18" translate="yes" xml:space="preserve">
          <source>Properties files are only ever loaded once. If you&amp;rsquo;ve already directly &lt;a href=&quot;#boot-features-external-config-files-importing&quot;&gt;imported&lt;/a&gt; a profile specific property files then it won&amp;rsquo;t be imported a second time.</source>
          <target state="translated">속성 파일은 한 번만로드됩니다. 이미 직접 한 경우 &lt;a href=&quot;#boot-features-external-config-files-importing&quot;&gt;수입&lt;/a&gt; 후 프로필 특정 속성 파일을이 두 번째 시간을 가져올 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="bced31bef77ed9e96cb77284bcb152fe262d8080" translate="yes" xml:space="preserve">
          <source>Properties from &lt;code&gt;SPRING_APPLICATION_JSON&lt;/code&gt; (inline JSON embedded in an environment variable or system property).</source>
          <target state="translated">&lt;code&gt;SPRING_APPLICATION_JSON&lt;/code&gt; 의 속성 (환경 변수 또는 시스템 속성에 포함 된 인라인 JSON).</target>
        </trans-unit>
        <trans-unit id="8f614d606503c80093b2f5e9916a5f2429a6a50f" translate="yes" xml:space="preserve">
          <source>Properties set in this way override any configuration item that Spring Boot explicitly supports.</source>
          <target state="translated">이러한 방식으로 설정된 속성은 Spring Boot가 명시 적으로 지원하는 모든 구성 항목을 재정의합니다.</target>
        </trans-unit>
        <trans-unit id="aff53a2dd3034f32abb12b41beff9a78bc4d4ac0" translate="yes" xml:space="preserve">
          <source>Properties that are added late to the environment, such as when using &lt;code&gt;@PropertySource&lt;/code&gt;, will not be taken into account.</source>
          <target state="translated">&lt;code&gt;@PropertySource&lt;/code&gt; 를 사용할 때와 같이 환경에 늦게 추가 된 속성은 고려되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b5a8e5e08478f7ad39961346108961deb3b26660" translate="yes" xml:space="preserve">
          <source>Properties that should be set on the underlying implementation.</source>
          <target state="translated">기본 구현에 설정해야하는 속성입니다.</target>
        </trans-unit>
        <trans-unit id="91db73736cf5796310ce43ef706f1ae919184689" translate="yes" xml:space="preserve">
          <source>Properties that use the &lt;code&gt;[index]&lt;/code&gt; notation can be bound to Java &lt;code&gt;List&lt;/code&gt; or &lt;code&gt;Set&lt;/code&gt; objects using Spring Boot&amp;rsquo;s &lt;code&gt;Binder&lt;/code&gt; class. For more details see the &amp;ldquo;&lt;a href=&quot;#boot-features-external-config-typesafe-configuration-properties&quot;&gt;Type-safe Configuration Properties&lt;/a&gt;&amp;rdquo; section below.</source>
          <target state="translated">&lt;code&gt;[index]&lt;/code&gt; 표기법 을 사용하는 속성은 Spring Boot의 &lt;code&gt;Binder&lt;/code&gt; 클래스를 사용하여 Java &lt;code&gt;List&lt;/code&gt; 또는 &lt;code&gt;Set&lt;/code&gt; 객체에 바인딩 할 수 있습니다 . 자세한 내용은 아래 &quot; &lt;a href=&quot;#boot-features-external-config-typesafe-configuration-properties&quot;&gt;유형 안전 구성 속성&lt;/a&gt; &quot;섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="16b89fea99bbff25d8f130951d257c52cd304ece" translate="yes" xml:space="preserve">
          <source>Properties to pass to the JDBC driver. Requires Flyway Teams.</source>
          <target state="translated">JDBC 드라이버에 전달할 속성입니다. Flyway 팀이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="6700dd433fa60b092061eba735b0b2ae268db2ce" translate="yes" xml:space="preserve">
          <source>Properties to pass to the XA data source.</source>
          <target state="translated">XA 데이터 소스에 전달할 속성입니다.</target>
        </trans-unit>
        <trans-unit id="9ae33a7d0ecb82cae8f04aafab20bf90425b7b8c" translate="yes" xml:space="preserve">
          <source>Property</source>
          <target state="translated">Property</target>
        </trans-unit>
        <trans-unit id="456de7d4a67d16daa52acc4a0a123d509753f220" translate="yes" xml:space="preserve">
          <source>Property Conditions</source>
          <target state="translated">부동산 조건</target>
        </trans-unit>
        <trans-unit id="b381d53ef37e3b57ffe4c44a926ebedf8343b7ea" translate="yes" xml:space="preserve">
          <source>Property Source</source>
          <target state="translated">속성 소스</target>
        </trans-unit>
        <trans-unit id="9f98b9d657a7378229a40316c7705110cfa0004d" translate="yes" xml:space="preserve">
          <source>Property contributions can come from additional jar files on your classpath, so you should not consider this an exhaustive list. Also, you can define your own properties.</source>
          <target state="translated">속성 기여는 클래스 경로의 추가 jar 파일에서 올 수 있으므로 전체 목록으로 간주해서는 안됩니다. 또한 고유 한 속성을 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d8c4c247df42de0e667a1cfaa9c325a5a0f5d02" translate="yes" xml:space="preserve">
          <source>Property file separators must not have any leading whitespace and must have exactly three hyphen characters. The lines immediately before and after the separator must not be comments.</source>
          <target state="translated">속성 파일 구분 기호에는 선행 공백이 없어야하며 정확히 세 개의 하이픈 문자가 있어야합니다. 구분 기호 바로 앞과 뒤의 줄은 주석이 아니어야합니다.</target>
        </trans-unit>
        <trans-unit id="1d65259edf672a6cd9b7ddf3fae3c60e847f3dd2" translate="yes" xml:space="preserve">
          <source>Property values can be injected directly into your beans by using the &lt;code&gt;@Value&lt;/code&gt; annotation, accessed through Spring&amp;rsquo;s &lt;code&gt;Environment&lt;/code&gt; abstraction, or be &lt;a href=&quot;#boot-features-external-config-typesafe-configuration-properties&quot;&gt;bound to structured objects&lt;/a&gt; through &lt;code&gt;@ConfigurationProperties&lt;/code&gt;.</source>
          <target state="translated">속성 값은 &lt;code&gt;@Value&lt;/code&gt; 주석 을 사용하여 빈에 직접 주입하거나 Spring의 &lt;code&gt;Environment&lt;/code&gt; 추상화를 통해 액세스 하거나 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 를 통해 &lt;a href=&quot;#boot-features-external-config-typesafe-configuration-properties&quot;&gt;구조화 된 객체에 바인딩 할&lt;/a&gt; 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="394bd0f1037a6e7f0e572a140410edc2734cded1" translate="yes" xml:space="preserve">
          <source>Protocol of the StatsD server to receive exported metrics.</source>
          <target state="translated">내 보낸 메트릭을 수신하기위한 StatsD 서버의 프로토콜입니다.</target>
        </trans-unit>
        <trans-unit id="aa4d4a0e79496135d9bfeb2f152287f7299151f0" translate="yes" xml:space="preserve">
          <source>Protocol to use while shipping data to Graphite.</source>
          <target state="translated">Graphite로 데이터를 전송하는 동안 사용할 프로토콜입니다.</target>
        </trans-unit>
        <trans-unit id="8b6bb1fae4ca0cd6620268571fa96da24777866c" translate="yes" xml:space="preserve">
          <source>Protocol used by the SMTP server.</source>
          <target state="translated">SMTP 서버에서 사용하는 프로토콜입니다.</target>
        </trans-unit>
        <trans-unit id="204bb3e384e28f75cc324b8289e8687bc3c1d7d1" translate="yes" xml:space="preserve">
          <source>Provide a radically faster and widely accessible getting-started experience for all Spring development.</source>
          <target state="translated">모든 Spring 개발에 대해 근본적으로 더 빠르고 광범위하게 액세스 할 수있는 시작 환경을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="5439d08d17db3e05d2f3839c0d21f2abde286a2f" translate="yes" xml:space="preserve">
          <source>Provide a range of non-functional features that are common to large classes of projects (such as embedded servers, security, metrics, health checks, and externalized configuration).</source>
          <target state="translated">대규모 프로젝트 클래스 (예 : 임베디드 서버, 보안, 메트릭, 상태 확인 및 외부 구성)에 공통적 인 다양한 비 기능적 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="88682f89b5b6eee4e5314e6cfdd1761ff044cd96" translate="yes" xml:space="preserve">
          <source>Provide a system property to map embedded broker addresses into &lt;code&gt;spring.kafka.bootstrap-servers&lt;/code&gt; in the test class:</source>
          <target state="translated">포함 된 브로커 주소를 테스트 클래스의 &lt;code&gt;spring.kafka.bootstrap-servers&lt;/code&gt; 에 매핑하는 시스템 속성을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="4dc10956a644c9aa8c39601c2307dc1a4f3fa28c" translate="yes" xml:space="preserve">
          <source>Provider for the key store.</source>
          <target state="translated">키 저장소의 공급자입니다.</target>
        </trans-unit>
        <trans-unit id="61004517dc87a9f281dbadbe0a0989606aa2902d" translate="yes" xml:space="preserve">
          <source>Provider for the trust store.</source>
          <target state="translated">신뢰 저장소의 제공자입니다.</target>
        </trans-unit>
        <trans-unit id="7d8311903fe14a9d6afb308a78d29dc0bc451fb7" translate="yes" xml:space="preserve">
          <source>Providers are a powerful way to attach semantics to a property. In this section, we define the official providers that you can use for your own hints. However, your favorite IDE may implement some of these or none of them. Also, it could eventually provide its own.</source>
          <target state="translated">공급자는 속성에 의미 체계를 연결하는 강력한 방법입니다. 이 섹션에서는 자신의 힌트에 사용할 수있는 공식 공급자를 정의합니다. 그러나 선호하는 IDE는 이들 중 일부를 구현하거나 구현하지 않을 수 있습니다. 또한 결국 자체를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9db0b745b6fa2951c35528cc5a431b74d851a2e8" translate="yes" xml:space="preserve">
          <source>Proxies</source>
          <target state="translated">Proxies</target>
        </trans-unit>
        <trans-unit id="4c66b6def975e7c482178e8a0f2381f30fd29a27" translate="yes" xml:space="preserve">
          <source>Publish a cumulative histogram with buckets defined by your service-level objectives.</source>
          <target state="translated">서비스 수준 목표에 따라 정의 된 버킷이있는 누적 히스토그램을 게시합니다.</target>
        </trans-unit>
        <trans-unit id="64afe51235c7bfc7cab683752fe1c83aa3835597" translate="yes" xml:space="preserve">
          <source>Publish less histogram buckets by clamping the range of expected values.</source>
          <target state="translated">예상 값의 범위를 고정하여 히스토그램 버킷을 적게 게시합니다.</target>
        </trans-unit>
        <trans-unit id="b4971e1967702141ce94cb0761f16f3e00ce941a" translate="yes" xml:space="preserve">
          <source>Publish percentile values computed in your application</source>
          <target state="translated">애플리케이션에서 계산 된 백분위 수 값 게시</target>
        </trans-unit>
        <trans-unit id="a0fb821bdaf93ed9a1f1e920acfb2840eff5b153" translate="yes" xml:space="preserve">
          <source>Purpose</source>
          <target state="translated">Purpose</target>
        </trans-unit>
        <trans-unit id="84692c4c6a89cbcac66be9ed7aab6a96f5ebdc42" translate="yes" xml:space="preserve">
          <source>Quartz Scheduler configuration can be customized using &lt;code&gt;spring.quartz&lt;/code&gt; properties and &lt;code&gt;SchedulerFactoryBeanCustomizer&lt;/code&gt; beans, which allow programmatic &lt;code&gt;SchedulerFactoryBean&lt;/code&gt; customization. Advanced Quartz configuration properties can be customized using &lt;code&gt;spring.quartz.properties.*&lt;/code&gt;.</source>
          <target state="translated">Quartz Scheduler 구성은 &lt;code&gt;spring.quartz&lt;/code&gt; 속성과 &lt;code&gt;SchedulerFactoryBeanCustomizer&lt;/code&gt; bean을 사용하여 사용자 정의 할 수 있으며 , 프로그래밍 방식의 &lt;code&gt;SchedulerFactoryBean&lt;/code&gt; 사용자 정의 를 허용합니다 . 고급 Quartz 구성 속성은 &lt;code&gt;spring.quartz.properties.*&lt;/code&gt; 를 사용하여 사용자 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3041fc8b0f02aa7d9f032a46c21daa1df5ce82f1" translate="yes" xml:space="preserve">
          <source>Quartz job store type.</source>
          <target state="translated">Quartz 작업 저장소 유형.</target>
        </trans-unit>
        <trans-unit id="81b54d8b1f0d6ed299ebec5f4235dad35af34d39" translate="yes" xml:space="preserve">
          <source>Queries consistency level.</source>
          <target state="translated">일관성 수준을 쿼리합니다.</target>
        </trans-unit>
        <trans-unit id="f5249454e35b15092fa5c20dc269dc7ea1417f3b" translate="yes" xml:space="preserve">
          <source>Queries serial consistency level.</source>
          <target state="translated">직렬 일관성 수준을 쿼리합니다.</target>
        </trans-unit>
        <trans-unit id="ae9559f01ca945b2e087e669e8c4f241ada46936" translate="yes" xml:space="preserve">
          <source>Query parameter name to use when &quot;favor-parameter&quot; is enabled.</source>
          <target state="translated">&quot;favor-parameter&quot;가 활성화 된 경우 사용할 쿼리 매개 변수 이름입니다.</target>
        </trans-unit>
        <trans-unit id="19f1ce2deeb0d105dd5f104fc0c1eb430b147e7e" translate="yes" xml:space="preserve">
          <source>Query timeout. Default is to use the JDBC driver's default configuration. If a duration suffix is not specified, seconds will be used.</source>
          <target state="translated">쿼리 시간 초과. 기본값은 JDBC 드라이버의 기본 구성을 사용하는 것입니다. 기간 접미사가 지정되지 않은 경우 초가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5cb3e9d1303cf9aa91e9cbc77a6502ec2de43401" translate="yes" xml:space="preserve">
          <source>Queue capacity. An unbounded capacity does not increase the pool and therefore ignores the &quot;max-size&quot; property.</source>
          <target state="translated">대기열 용량. 무제한 용량은 풀을 늘리지 않으므로 &quot;최대 크기&quot;속성을 무시합니다.</target>
        </trans-unit>
        <trans-unit id="9f805f55318f6b564324cb80404c379f54a314f9" translate="yes" xml:space="preserve">
          <source>R2DBC URL of the database. database name, username, password and pooling options specified in the url take precedence over individual options.</source>
          <target state="translated">데이터베이스의 R2DBC URL입니다. URL에 지정된 데이터베이스 이름, 사용자 이름, 암호 및 풀링 옵션이 개별 옵션보다 우선합니다.</target>
        </trans-unit>
        <trans-unit id="b9fe43b6dbcba6e77f0a1d2317729e27a3c5197b" translate="yes" xml:space="preserve">
          <source>RSocket transport protocol.</source>
          <target state="translated">RSocket 전송 프로토콜.</target>
        </trans-unit>
        <trans-unit id="f948d1003a18b45715c7c30bab0c512b3f836d3d" translate="yes" xml:space="preserve">
          <source>RabbitMQ configuration is controlled by external configuration properties in &lt;code&gt;spring.rabbitmq.*&lt;/code&gt;. For example, you might declare the following section in &lt;code&gt;application.properties&lt;/code&gt;:</source>
          <target state="translated">RabbitMQ 구성은 &lt;code&gt;spring.rabbitmq.*&lt;/code&gt; 의 외부 구성 속성에 의해 제어됩니다 . 예를 들어 &lt;code&gt;application.properties&lt;/code&gt; 에서 다음 섹션을 선언 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fc711932f34cf4b4b529b6d97cb39eadc48a7c2f" translate="yes" xml:space="preserve">
          <source>RabbitMQ host. Ignored if an address is set.</source>
          <target state="translated">RabbitMQ 호스트. 주소가 설정된 경우 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="7face86711fce38c7786bcec6cf0ea7eb5fcb706" translate="yes" xml:space="preserve">
          <source>RabbitMQ port. Ignored if an address is set. Default to 5672, or 5671 if SSL is enabled.</source>
          <target state="translated">RabbitMQ 포트. 주소가 설정된 경우 무시됩니다. 기본값은 5672 또는 SSL이 활성화 된 경우 5671입니다.</target>
        </trans-unit>
        <trans-unit id="b8e475188353199a1fc80d67a72c1b0899243f26" translate="yes" xml:space="preserve">
          <source>RabbitMQ.</source>
          <target state="translated">RabbitMQ.</target>
        </trans-unit>
        <trans-unit id="86029eff0cccbb1a72a84484392ad6281f5a1382" translate="yes" xml:space="preserve">
          <source>Range requests are not supported when using Jersey.</source>
          <target state="translated">Jersey를 사용할 때는 범위 요청이 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1cac9421f644ed14422fe00cbb0bbeb3f34ff509" translate="yes" xml:space="preserve">
          <source>Rather than hardcoding some properties that are also specified in your project&amp;rsquo;s build configuration, you can automatically expand them by instead using the existing build configuration. This is possible in both Maven and Gradle.</source>
          <target state="translated">프로젝트의 빌드 구성에도 지정된 일부 속성을 하드 코딩하는 대신 기존 빌드 구성을 사용하여 자동으로 확장 할 수 있습니다. 이것은 Maven과 Gradle 모두에서 가능합니다.</target>
        </trans-unit>
        <trans-unit id="1ec8aaef1812626e23ef5aee77f26baf9e23738a" translate="yes" xml:space="preserve">
          <source>Rather than hardcoding those values, you could also &lt;a href=&quot;howto#howto-automatic-expansion&quot;&gt;expand info properties at build time&lt;/a&gt;.</source>
          <target state="translated">이러한 값을 하드 코딩하는 대신 &lt;a href=&quot;howto#howto-automatic-expansion&quot;&gt;빌드시 정보 속성을 확장&lt;/a&gt; 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="25e710262e41a8a51d771ab7722c97f6956961e2" translate="yes" xml:space="preserve">
          <source>Rather than using &lt;code&gt;db/migration&lt;/code&gt;, the preceding configuration sets the directory to use according to the type of the database (such as &lt;code&gt;db/migration/mysql&lt;/code&gt; for MySQL). The list of supported databases is available in &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java&quot;&gt;&lt;code&gt;DatabaseDriver&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;db/migration&lt;/code&gt; 을 사용하는 대신 앞의 구성은 데이터베이스 유형 (예 : &lt;code&gt;db/migration/mysql&lt;/code&gt; 용 db / migration / mysql ) 에 따라 사용할 디렉토리를 설정합니다 . 지원되는 데이터베이스 목록은 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java&quot;&gt; &lt;code&gt;DatabaseDriver&lt;/code&gt; &lt;/a&gt; 에서 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="52cbaa424ebb36314e819d2c0986892fed0ded71" translate="yes" xml:space="preserve">
          <source>Reactive stack</source>
          <target state="translated">반응 스택</target>
        </trans-unit>
        <trans-unit id="30fccb31f329cdebfdaa82fa0cebe1abcefa9a2d" translate="yes" xml:space="preserve">
          <source>Reactor</source>
          <target state="translated">Reactor</target>
        </trans-unit>
        <trans-unit id="fdec46122520fd70d9d7f34b5aa82cbd0420ccfe" translate="yes" xml:space="preserve">
          <source>Read and Write Socket timeout.</source>
          <target state="translated">읽기 및 쓰기 소켓 시간 초과.</target>
        </trans-unit>
        <trans-unit id="40c40369e29dc8e1b66dc29ec975fb48f3bab8a9" translate="yes" xml:space="preserve">
          <source>Read timeout for requests to this backend.</source>
          <target state="translated">이 백엔드에 대한 요청에 대한 읽기 제한 시간입니다.</target>
        </trans-unit>
        <trans-unit id="ea28d4662031e2631099071c05b0afb8463a37a9" translate="yes" xml:space="preserve">
          <source>Read timeout.</source>
          <target state="translated">읽기 시간 초과.</target>
        </trans-unit>
        <trans-unit id="788662e79ce5125676a11a5682ca9745ed9fbceb" translate="yes" xml:space="preserve">
          <source>Readiness State</source>
          <target state="translated">준비 상태</target>
        </trans-unit>
        <trans-unit id="20c7c5522fc28c5817550dd82bc3272eb6a991c7" translate="yes" xml:space="preserve">
          <source>Ready</source>
          <target state="translated">Ready</target>
        </trans-unit>
        <trans-unit id="582cbab8d68c68d3241f5f566b97e307344705e7" translate="yes" xml:space="preserve">
          <source>Ready to actually start using Spring Boot? &lt;a href=&quot;using-spring-boot#using-boot&quot;&gt;We have you covered&lt;/a&gt;:</source>
          <target state="translated">실제로 Spring Boot를 사용할 준비가 되셨습니까? &lt;a href=&quot;using-spring-boot#using-boot&quot;&gt;우리는 당신을 덮었습니다&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="e451d89185350ce808abd4ce07c2fd843a658c36" translate="yes" xml:space="preserve">
          <source>Realm to connect to.</source>
          <target state="translated">연결할 영역입니다.</target>
        </trans-unit>
        <trans-unit id="a26666b38392dd570f922e0c23cc3b3c25906930" translate="yes" xml:space="preserve">
          <source>Reap timeout, in seconds, for borrowed connections. 0 denotes no limit.</source>
          <target state="translated">차용 한 연결에 대한 수확 제한 시간 (초)입니다. 0은 제한 없음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="cc9db3a795571c7e71f45670a1da7ff49b5f1557" translate="yes" xml:space="preserve">
          <source>Red</source>
          <target state="translated">Red</target>
        </trans-unit>
        <trans-unit id="c8ef3c79f149f16d80ef113fc0afc43413706093" translate="yes" xml:space="preserve">
          <source>Redirects are not followed (so you can assert the response location).</source>
          <target state="translated">리디렉션을 따르지 않습니다 (따라서 응답 위치를 주장 할 수 있음).</target>
        </trans-unit>
        <trans-unit id="24071b57a13027c01339027dcccb98218f052a8f" translate="yes" xml:space="preserve">
          <source>Redis</source>
          <target state="translated">Redis</target>
        </trans-unit>
        <trans-unit id="c2c125680626953e3eb6d0221e2f81e5ed2b15a9" translate="yes" xml:space="preserve">
          <source>Redis server host.</source>
          <target state="translated">Redis 서버 호스트.</target>
        </trans-unit>
        <trans-unit id="6857e3540e5318c16578b17d93b6ce163b30011d" translate="yes" xml:space="preserve">
          <source>Redis server port.</source>
          <target state="translated">Redis 서버 포트.</target>
        </trans-unit>
        <trans-unit id="9fa545257fa73835b37564e4989ad25fca9bd402" translate="yes" xml:space="preserve">
          <source>Reduce costs by setting the environment type</source>
          <target state="translated">환경 유형 설정으로 비용 절감</target>
        </trans-unit>
        <trans-unit id="1bca23ec6cc119207e07bc9a9f0ec738e15d5db3" translate="yes" xml:space="preserve">
          <source>Refer to &lt;code&gt;man systemctl&lt;/code&gt; for more details.</source>
          <target state="translated">자세한 내용은 &lt;code&gt;man systemctl&lt;/code&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9ac4138331814b21e9ca9c607225a6520f704322" translate="yes" xml:space="preserve">
          <source>Refer to the individual plugin documentation on how to use buildpacks with &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#build-image&quot;&gt;Maven&lt;/a&gt; and &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#build-image&quot;&gt;Gradle&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#build-image&quot;&gt;Maven&lt;/a&gt; 및 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#build-image&quot;&gt;Gradle에서 빌드 팩&lt;/a&gt; 을 사용하는 방법에 대한 개별 플러그인 문서를 참조하세요 .</target>
        </trans-unit>
        <trans-unit id="63b7a7b7fb3196f5045d41ad1cd194f1cc68f052" translate="yes" xml:space="preserve">
          <source>Reference (&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/&quot;&gt;HTML&lt;/a&gt; and &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/pdf/spring-boot-gradle-plugin-reference.pdf&quot;&gt;PDF&lt;/a&gt;)</source>
          <target state="translated">참조 ( &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/&quot;&gt;HTML&lt;/a&gt; 및 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/pdf/spring-boot-gradle-plugin-reference.pdf&quot;&gt;PDF&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="0d39dc62a3b827b38cde5c090ba06c60e664e6f2" translate="yes" xml:space="preserve">
          <source>Reference (&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/&quot;&gt;HTML&lt;/a&gt; and &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/pdf/spring-boot-maven-plugin-reference.pdf&quot;&gt;PDF&lt;/a&gt;)</source>
          <target state="translated">참조 ( &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/&quot;&gt;HTML&lt;/a&gt; 및 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/pdf/spring-boot-maven-plugin-reference.pdf&quot;&gt;PDF&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="b516e67e50c6966642d21bf28bc5f9d60fdb2e4c" translate="yes" xml:space="preserve">
          <source>Reference to a file script that should be inlined in the default launch script. This can be used to set environmental variables such as &lt;code&gt;JAVA_OPTS&lt;/code&gt; before any external config files are loaded</source>
          <target state="translated">기본 시작 스크립트에 인라인되어야하는 파일 스크립트에 대한 참조입니다. 외부 구성 파일이로드되기 전에 &lt;code&gt;JAVA_OPTS&lt;/code&gt; 와 같은 환경 변수를 설정하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f12f6e0358e62103c9aadfb152bc26c4415f318" translate="yes" xml:space="preserve">
          <source>Regardless of your classpath, meter registries, except the in-memory backed, are not auto-configured when using &lt;code&gt;@SpringBootTest&lt;/code&gt;.</source>
          <target state="translated">클래스 경로에 관계없이 메모리 내 지원을 제외한 미터 레지스트리는 &lt;code&gt;@SpringBootTest&lt;/code&gt; 를 사용할 때 자동 구성되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="ca8c1dcb04081968021b77714a4071ff873d0cde" translate="yes" xml:space="preserve">
          <source>Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.</source>
          <target state="translated">OpenEntityManagerInViewInterceptor를 등록합니다. 요청의 전체 처리를 위해 JPA EntityManager를 스레드에 바인드합니다.</target>
        </trans-unit>
        <trans-unit id="4e03c22ad813080c1907e193291b8ca3aeed298c" translate="yes" xml:space="preserve">
          <source>Register a shutdown hook for the logging system when it is initialized.</source>
          <target state="translated">로깅 시스템이 초기화되면 종료 후크를 등록합니다.</target>
        </trans-unit>
        <trans-unit id="eb89a502f9e0467b442cb4679964b51f85f2f2c4" translate="yes" xml:space="preserve">
          <source>Registering Servlets, Filters, and Listeners as Spring Beans</source>
          <target state="translated">서블릿, 필터 및 리스너를 Spring Bean으로 등록</target>
        </trans-unit>
        <trans-unit id="3415156b2e596e1f84c4aff9196ac07de216cb1d" translate="yes" xml:space="preserve">
          <source>Regular and geospatial view operations timeout.</source>
          <target state="translated">일반 및 지리 공간보기 작업 시간이 초과되었습니다.</target>
        </trans-unit>
        <trans-unit id="78a5e7b660bc1966f2fde4ea755839d759f617a8" translate="yes" xml:space="preserve">
          <source>Regular expression that matches proxies that are to be trusted.</source>
          <target state="translated">신뢰할 수있는 프록시와 일치하는 정규식입니다.</target>
        </trans-unit>
        <trans-unit id="8a0194a80b9b781d5645f766e7b140aa31e1c588" translate="yes" xml:space="preserve">
          <source>Relaxed binding</source>
          <target state="translated">편안한 바인딩</target>
        </trans-unit>
        <trans-unit id="a1217585c7ee7bb97024471871454883bb34cb4a" translate="yes" xml:space="preserve">
          <source>Remember that, whatever you put in the &lt;code&gt;sources&lt;/code&gt; is merely a Spring &lt;code&gt;ApplicationContext&lt;/code&gt;. Normally, anything that already works should work here. There might be some beans you can remove later and let Spring Boot provide its own defaults for them, but it should be possible to get something working before you need to do that.</source>
          <target state="translated">&lt;code&gt;sources&lt;/code&gt; 넣는 것은 단지 Spring &lt;code&gt;ApplicationContext&lt;/code&gt; 일 뿐이라는 것을 기억하십시오 . 일반적으로 이미 작동하는 모든 것이 여기에서 작동합니다. 나중에 제거 할 수 있고 Spring Boot가 자체 기본값을 제공하도록 할 수있는 Bean이있을 수 있지만이를 수행하기 전에 작업을 수행 할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="0ad7925e5b2bf6524c03932052a9c8a6ea451aa0" translate="yes" xml:space="preserve">
          <source>Remember to change the &lt;code&gt;Description&lt;/code&gt;, &lt;code&gt;User&lt;/code&gt;, and &lt;code&gt;ExecStart&lt;/code&gt; fields for your application.</source>
          <target state="translated">변화에 기억 &lt;code&gt;Description&lt;/code&gt; , &lt;code&gt;User&lt;/code&gt; 및 &lt;code&gt;ExecStart&lt;/code&gt; 의 응용 프로그램에 대한 필드.</target>
        </trans-unit>
        <trans-unit id="37077c2a6e45d166f2884d5eacb07fdd66c34673" translate="yes" xml:space="preserve">
          <source>Remote devtools support is provided in two parts: a server-side endpoint that accepts connections and a client application that you run in your IDE. The server component is automatically enabled when the &lt;code&gt;spring.devtools.remote.secret&lt;/code&gt; property is set. The client component must be launched manually.</source>
          <target state="translated">원격 개발 도구 지원은 연결을 허용하는 서버 측 엔드 포인트와 IDE에서 실행하는 클라이언트 애플리케이션의 두 부분으로 제공됩니다. &lt;code&gt;spring.devtools.remote.secret&lt;/code&gt; 속성이 설정 되면 서버 구성 요소가 자동으로 활성화됩니다 . 클라이언트 구성 요소는 수동으로 시작해야합니다.</target>
        </trans-unit>
        <trans-unit id="bb3e03d1d37cd14e7054dfb0ab9216362bb8d1d3" translate="yes" xml:space="preserve">
          <source>Remove any dashes (&lt;code&gt;-&lt;/code&gt;).</source>
          <target state="translated">대시 ( &lt;code&gt;-&lt;/code&gt; )를 제거하십시오 .</target>
        </trans-unit>
        <trans-unit id="d1ab023b03e8436509375a748220b3af9a276f03" translate="yes" xml:space="preserve">
          <source>Repackaged archives do not contain devtools by default. If you want to use a &lt;a href=&quot;#using-boot-devtools-remote&quot;&gt;certain remote devtools feature&lt;/a&gt;, you need to include it. When using the Maven plugin, set the &lt;code&gt;excludeDevtools&lt;/code&gt; property to &lt;code&gt;false&lt;/code&gt;. When using the Gradle plugin, &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#packaging-executable-configuring-including-development-only-dependencies&quot;&gt;configure the task&amp;rsquo;s classpath to include the &lt;code&gt;developmentOnly&lt;/code&gt; configuration&lt;/a&gt;.</source>
          <target state="translated">리 패키징 된 아카이브에는 기본적으로 devtools가 포함되어 있지 않습니다. &lt;a href=&quot;#using-boot-devtools-remote&quot;&gt;특정 원격 devtools 기능&lt;/a&gt; 을 사용 하려면이를 포함해야합니다. Maven 플러그인을 사용하는 경우 &lt;code&gt;excludeDevtools&lt;/code&gt; 속성을 &lt;code&gt;false&lt;/code&gt; 로 설정합니다 . Gradle 플러그인을 사용할 때 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#packaging-executable-configuring-including-development-only-dependencies&quot;&gt; &lt;code&gt;developmentOnly&lt;/code&gt; &lt;/a&gt; 구성 을 포함하도록 작업의 클래스 경로를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="175cfb225e2cd049d7c4ed588a54d9f4eeaaf6d3" translate="yes" xml:space="preserve">
          <source>Replace dots (&lt;code&gt;.&lt;/code&gt;) with underscores (&lt;code&gt;_&lt;/code&gt;).</source>
          <target state="translated">점 ( &lt;code&gt;.&lt;/code&gt; )을 밑줄 ( &lt;code&gt;_&lt;/code&gt; )로 바꿉니다 .</target>
        </trans-unit>
        <trans-unit id="15c6b9d7072e675bdd5687d7c85691737fd4369e" translate="yes" xml:space="preserve">
          <source>Report bugs with Spring Boot at &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;github.com/spring-projects/spring-boot/issues&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;github.com/spring-projects/spring-boot/issues&lt;/a&gt; 에서 Spring Boot 관련 버그를보고 하세요 .</target>
        </trans-unit>
        <trans-unit id="c91e6e6a538a5087a64a99718ae975966b761c1e" translate="yes" xml:space="preserve">
          <source>Repositories</source>
          <target state="translated">Repositories</target>
        </trans-unit>
        <trans-unit id="2cc80b8f6850e82afed95b9b848f46c4b72cc045" translate="yes" xml:space="preserve">
          <source>Representation to use when converting a UUID to a BSON binary value.</source>
          <target state="translated">UUID를 BSON 이진 값으로 변환 할 때 사용할 표현입니다.</target>
        </trans-unit>
        <trans-unit id="ec93f45c5a84101b85a1520b3116a4f1a7cbdc51" translate="yes" xml:space="preserve">
          <source>Request paths that should not be logged.</source>
          <target state="translated">기록하면 안되는 요청 경로.</target>
        </trans-unit>
        <trans-unit id="dd20c8a0f84dc4253a43ea20e3d450f164fb8a27" translate="yes" xml:space="preserve">
          <source>Request throttling type.</source>
          <target state="translated">제한 유형을 요청합니다.</target>
        </trans-unit>
        <trans-unit id="18223c7075b33ba0936b8bddec4ba8cc85f9d141" translate="yes" xml:space="preserve">
          <source>Request&amp;rsquo;s URI template prior to variable substitution, if possible (for example, &lt;code&gt;/api/person/{id}&lt;/code&gt;)</source>
          <target state="translated">가능한 경우 변수 대체 전 요청의 URI 템플릿 (예 : &lt;code&gt;/api/person/{id}&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="0157f7bd4001f58879421bd448dc6fbb713d82b8" translate="yes" xml:space="preserve">
          <source>Request&amp;rsquo;s method (for example, &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;POST&lt;/code&gt;)</source>
          <target state="translated">요청 방법 (예 : &lt;code&gt;GET&lt;/code&gt; 또는 &lt;code&gt;POST&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="9d3d11d6ac6eb32a9585efbf8cf54313e18ba24c" translate="yes" xml:space="preserve">
          <source>Request&amp;rsquo;s outcome based on the status code of the response. 1xx is &lt;code&gt;INFORMATIONAL&lt;/code&gt;, 2xx is &lt;code&gt;SUCCESS&lt;/code&gt;, 3xx is &lt;code&gt;REDIRECTION&lt;/code&gt;, 4xx &lt;code&gt;CLIENT_ERROR&lt;/code&gt;, and 5xx is &lt;code&gt;SERVER_ERROR&lt;/code&gt;</source>
          <target state="translated">응답의 상태 코드를 기반으로 한 요청의 결과입니다. 1xx는 &lt;code&gt;INFORMATIONAL&lt;/code&gt; , 2xx는 &lt;code&gt;SUCCESS&lt;/code&gt; , 3xx는 &lt;code&gt;REDIRECTION&lt;/code&gt; , 4xx는 &lt;code&gt;CLIENT_ERROR&lt;/code&gt; , 5xx는 &lt;code&gt;SERVER_ERROR&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="4935e9461530dc077172bbad9cd7bd5c15cf64e2" translate="yes" xml:space="preserve">
          <source>Request&amp;rsquo;s outcome based on the status code of the response. 1xx is &lt;code&gt;INFORMATIONAL&lt;/code&gt;, 2xx is &lt;code&gt;SUCCESS&lt;/code&gt;, 3xx is &lt;code&gt;REDIRECTION&lt;/code&gt;, 4xx &lt;code&gt;CLIENT_ERROR&lt;/code&gt;, and 5xx is &lt;code&gt;SERVER_ERROR&lt;/code&gt;, &lt;code&gt;UNKNOWN&lt;/code&gt; otherwise</source>
          <target state="translated">응답의 상태 코드를 기반으로 한 요청의 결과입니다. 1xx는 &lt;code&gt;INFORMATIONAL&lt;/code&gt; , 2xx는 &lt;code&gt;SUCCESS&lt;/code&gt; , 3xx는 &lt;code&gt;REDIRECTION&lt;/code&gt; , 4xx는 &lt;code&gt;CLIENT_ERROR&lt;/code&gt; , 5xx는 &lt;code&gt;SERVER_ERROR&lt;/code&gt; , 그렇지 않으면 &lt;code&gt;UNKNOWN&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d7f4fa2979cf67ad60c4bd6751c7259ff354f46d" translate="yes" xml:space="preserve">
          <source>Requested heartbeat timeout; zero for none. If a duration suffix is not specified, seconds will be used.</source>
          <target state="translated">요청 된 하트 비트 시간 초과. 없음은 0입니다. 기간 접미사가 지정되지 않은 경우 초가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="eed6bfb41051ed5b74447340f3c2e29d11e99a7c" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="translated">Required</target>
        </trans-unit>
        <trans-unit id="0d033a587e2ece6225d31606ae906944c4e612f5" translate="yes" xml:space="preserve">
          <source>Required cloud platform for the document to be included.</source>
          <target state="translated">포함 할 문서에 필요한 클라우드 플랫폼입니다.</target>
        </trans-unit>
        <trans-unit id="a6c50ccab3710190f1a8342cf3a7cdc16046ba91" translate="yes" xml:space="preserve">
          <source>Required replica set name for the cluster. Cannot be set with URI.</source>
          <target state="translated">클러스터의 필수 복제본 세트 이름입니다. URI로 설정할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">Requirements</target>
        </trans-unit>
        <trans-unit id="6dbe2d3469c4902a06138a9a3ecc526bfeffa9e3" translate="yes" xml:space="preserve">
          <source>Resource Conditions</source>
          <target state="translated">자원 조건</target>
        </trans-unit>
        <trans-unit id="e7db5c7f5e3e37f793d18f903271abb093fc3333" translate="yes" xml:space="preserve">
          <source>Response&amp;rsquo;s HTTP status code (for example, &lt;code&gt;200&lt;/code&gt; or &lt;code&gt;500&lt;/code&gt;)</source>
          <target state="translated">응답의 HTTP 상태 코드 (예 : &lt;code&gt;200&lt;/code&gt; 또는 &lt;code&gt;500&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="c57663dc6e06fcb06c7575bcb26bf9145190b4b7" translate="yes" xml:space="preserve">
          <source>Response&amp;rsquo;s HTTP status code if available (for example, &lt;code&gt;200&lt;/code&gt; or &lt;code&gt;500&lt;/code&gt;), or &lt;code&gt;IO_ERROR&lt;/code&gt; in case of I/O issues, &lt;code&gt;CLIENT_ERROR&lt;/code&gt; otherwise</source>
          <target state="translated">사용 가능한 경우 응답의 HTTP 상태 코드 (예 : &lt;code&gt;200&lt;/code&gt; 또는 &lt;code&gt;500&lt;/code&gt; ) 또는 I / O 문제의 경우 &lt;code&gt;IO_ERROR&lt;/code&gt; , 그렇지 않은 경우 &lt;code&gt;CLIENT_ERROR&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d47ebb66ec136c60e99e92b23ee704566184fbb3" translate="yes" xml:space="preserve">
          <source>Restart functionality does not work well with objects that are deserialized by using a standard &lt;code&gt;ObjectInputStream&lt;/code&gt;. If you need to deserialize data, you may need to use Spring&amp;rsquo;s &lt;code&gt;ConfigurableObjectInputStream&lt;/code&gt; in combination with &lt;code&gt;Thread.currentThread().getContextClassLoader()&lt;/code&gt;.</source>
          <target state="translated">다시 시작 기능은 표준 &lt;code&gt;ObjectInputStream&lt;/code&gt; 을 사용하여 역 직렬화 된 객체에서 제대로 작동하지 않습니다 . 데이터를 역 직렬화해야하는 경우에는 Spring의 &lt;code&gt;ConfigurableObjectInputStream&lt;/code&gt; 을 &lt;code&gt;Thread.currentThread().getContextClassLoader()&lt;/code&gt; 와 함께 사용해야 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7ff80a5fac222c34ad1e7b228b9b9c3e884a4c8a" translate="yes" xml:space="preserve">
          <source>Restart vs Reload</source>
          <target state="translated">다시 시작 vs 다시로드</target>
        </trans-unit>
        <trans-unit id="1db84cf7e6133f70552a032955785c0328d019a1" translate="yes" xml:space="preserve">
          <source>Restarts will now only happen when the &lt;code&gt;src/main/resources/.reloadtrigger&lt;/code&gt; is updated.</source>
          <target state="translated">이제 재시작은 &lt;code&gt;src/main/resources/.reloadtrigger&lt;/code&gt; 가 업데이트 된 경우에만 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="36d3e6b4532d960cadd60b7b04f8355868429c0a" translate="yes" xml:space="preserve">
          <source>Retention policy to use (Influx writes to the DEFAULT retention policy if one is not specified).</source>
          <target state="translated">사용할 보존 정책 (지정되지 않은 경우 Influx가 DEFAULT 보존 정책에 씁니다).</target>
        </trans-unit>
        <trans-unit id="92843db00c680eb5625321d1c626457f92b62b6b" translate="yes" xml:space="preserve">
          <source>Retries are disabled by default. You can also customize the &lt;code&gt;RetryTemplate&lt;/code&gt; programmatically by declaring a &lt;code&gt;RabbitRetryTemplateCustomizer&lt;/code&gt; bean.</source>
          <target state="translated">재 시도는 기본적으로 비활성화되어 있습니다. &lt;code&gt;RabbitRetryTemplateCustomizer&lt;/code&gt; 빈 을 선언하여 프로그래밍 방식으로 &lt;code&gt;RetryTemplate&lt;/code&gt; 을 사용자 정의 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7ed11e10bda0ce2c08c08b15a18c733800924ee4" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;hprof&lt;/code&gt; heap dump file.</source>
          <target state="translated">&lt;code&gt;hprof&lt;/code&gt; 힙 덤프 파일을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="6136d0113bc92b9e1fcac9ace7fdc3423aac6510" translate="yes" xml:space="preserve">
          <source>Returns the contents of the logfile (if &lt;code&gt;logging.file.name&lt;/code&gt; or &lt;code&gt;logging.file.path&lt;/code&gt; properties have been set). Supports the use of the HTTP &lt;code&gt;Range&lt;/code&gt; header to retrieve part of the log file&amp;rsquo;s content.</source>
          <target state="translated">로그 파일의 내용을 반환합니다 ( &lt;code&gt;logging.file.name&lt;/code&gt; 또는 &lt;code&gt;logging.file.path&lt;/code&gt; 속성이 설정된 경우). 로그 파일 콘텐츠의 일부를 검색하기 위해 HTTP &lt;code&gt;Range&lt;/code&gt; 헤더 사용을 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="5f5b52c380eb6a3e4caf3b0a1d987a1faa5d8fc1" translate="yes" xml:space="preserve">
          <source>Roles used to determine whether or not a user is authorized to be shown details. When empty, all authenticated users are authorized.</source>
          <target state="translated">사용자에게 세부 정보를 표시 할 권한이 있는지 여부를 결정하는 데 사용되는 역할입니다. 비어 있으면 인증 된 모든 사용자가 승인됩니다.</target>
        </trans-unit>
        <trans-unit id="108b84ddb795325ff9b3a70cbeb2e962a7a8c212" translate="yes" xml:space="preserve">
          <source>Rules for the built-in error handling to override specific SQL states and error codes. Requires Flyway Teams.</source>
          <target state="translated">특정 SQL 상태 및 오류 코드를 재정의하기위한 기본 제공 오류 처리 규칙입니다. Flyway 팀이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="73989d9c59264da08a15dba21c7d58237a91f08f" translate="yes" xml:space="preserve">
          <source>Running</source>
          <target state="translated">Running</target>
        </trans-unit>
        <trans-unit id="41b252d3943d796dee5dd2c37c1613f0a3b66b9a" translate="yes" xml:space="preserve">
          <source>Running as a traditional web application on Wildfly</source>
          <target state="translated">Wildfly에서 기존 웹 애플리케이션으로 실행</target>
        </trans-unit>
        <trans-unit id="f8913396bd57009d2c8bb2cad97ca8a85f5cd770" translate="yes" xml:space="preserve">
          <source>SAML2 relying party registrations.</source>
          <target state="translated">SAML2 신뢰 당사자 등록.</target>
        </trans-unit>
        <trans-unit id="77f8f8d9ff6a027faa8cbe4cd97454e807334529" translate="yes" xml:space="preserve">
          <source>SDKMAN! (The Software Development Kit Manager) can be used for managing multiple versions of various binary SDKs, including Groovy and the Spring Boot CLI. Get SDKMAN! from &lt;a href=&quot;https://sdkman.io&quot;&gt;sdkman.io&lt;/a&gt; and install Spring Boot by using the following commands:</source>
          <target state="translated">SDKMAN! (소프트웨어 개발 키트 관리자)는 Groovy 및 Spring Boot CLI를 포함하여 다양한 바이너리 SDK의 여러 버전을 관리하는 데 사용할 수 있습니다. SDKMAN을 받으세요! 에서 &lt;a href=&quot;https://sdkman.io&quot;&gt;sdkman.io&lt;/a&gt; 하고하면 다음과 같은 명령을 사용하여 봄 부트를 설치합니다 :</target>
        </trans-unit>
        <trans-unit id="5ee9aad544822da1bb1133cc3a55482bf32e4f2c" translate="yes" xml:space="preserve">
          <source>SERVICE_UNAVAILABLE (503)</source>
          <target state="translated">SERVICE_UNAVAILABLE (503)</target>
        </trans-unit>
        <trans-unit id="33de870bb01c8080f0c66cbef632b760439e9b69" translate="yes" xml:space="preserve">
          <source>SMTP server host. For instance, `smtp.example.com`.</source>
          <target state="translated">SMTP 서버 호스트. 예 :`smtp.example.com`.</target>
        </trans-unit>
        <trans-unit id="1aaaa02de9f01defbff057c32c1a9adb9063067e" translate="yes" xml:space="preserve">
          <source>SMTP server port.</source>
          <target state="translated">SMTP 서버 포트.</target>
        </trans-unit>
        <trans-unit id="2064cb643caa8d9e1de12eea7f3e143ca9f8680d" translate="yes" xml:space="preserve">
          <source>SQL</source>
          <target state="translated">SQL</target>
        </trans-unit>
        <trans-unit id="fa80fc8c0217dd62c4509b7b721b26c324cd49b2" translate="yes" xml:space="preserve">
          <source>SQL dialect to use. Auto-detected by default.</source>
          <target state="translated">사용할 SQL 언어입니다. 기본적으로 자동 감지됩니다.</target>
        </trans-unit>
        <trans-unit id="4a9979631dac9d5713e212a5d57d1c92c5415da0" translate="yes" xml:space="preserve">
          <source>SQL query or statement used to validate a connection before returning it.</source>
          <target state="translated">연결을 반환하기 전에 연결의 유효성을 검사하는 데 사용되는 SQL 쿼리 또는 문입니다.</target>
        </trans-unit>
        <trans-unit id="e07d55c41bc473b479a26cf35526cde60ab7f134" translate="yes" xml:space="preserve">
          <source>SQL scripts encoding.</source>
          <target state="translated">SQL 스크립트 인코딩.</target>
        </trans-unit>
        <trans-unit id="c11febcaf8ce2e7306c197171d203973f47c8e9d" translate="yes" xml:space="preserve">
          <source>SQL statements to execute to initialize a connection immediately after obtaining it.</source>
          <target state="translated">연결을 얻은 후 즉시 초기화하기 위해 실행할 SQL 문입니다.</target>
        </trans-unit>
        <trans-unit id="78bb8826fcc2504583e625386c238563e6207595" translate="yes" xml:space="preserve">
          <source>SSL</source>
          <target state="translated">SSL</target>
        </trans-unit>
        <trans-unit id="3f2478efe3f7b6f75fad868e8f2b3eed1c66c0f6" translate="yes" xml:space="preserve">
          <source>SSL algorithm to use. By default, configured by the Rabbit client library.</source>
          <target state="translated">사용할 SSL 알고리즘입니다. 기본적으로 Rabbit 클라이언트 라이브러리에서 구성합니다.</target>
        </trans-unit>
        <trans-unit id="816f92208e26ab12f3f86b1951d31a416f9dc5b0" translate="yes" xml:space="preserve">
          <source>SSL can be configured declaratively by setting the various &lt;code&gt;server.ssl.*&lt;/code&gt; properties, typically in &lt;code&gt;application.properties&lt;/code&gt; or &lt;code&gt;application.yml&lt;/code&gt;. The following example shows setting SSL properties in &lt;code&gt;application.properties&lt;/code&gt;:</source>
          <target state="translated">일반적으로 &lt;code&gt;application.properties&lt;/code&gt; 또는 &lt;code&gt;application.yml&lt;/code&gt; 에서 다양한 &lt;code&gt;server.ssl.*&lt;/code&gt; 속성 을 설정하여 SSL을 선언적으로 구성 할 수 있습니다 . 다음 예는 &lt;code&gt;application.properties&lt;/code&gt; 에서 SSL 속성을 설정하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="dec0a18883a5f27980ea4fa7b30d8996829c4f82" translate="yes" xml:space="preserve">
          <source>SSL protocol to use.</source>
          <target state="translated">사용할 SSL 프로토콜입니다.</target>
        </trans-unit>
        <trans-unit id="a0f404eae7e3a08175a1d48a9f9894d36a3aefea" translate="yes" xml:space="preserve">
          <source>Same meaning as the &quot;must-revalidate&quot; directive, except that it does not apply to private caches.</source>
          <target state="translated">개인 캐시에 적용되지 않는다는 점을 제외하면 &quot;반드시 재확인&quot;지시문과 동일한 의미입니다.</target>
        </trans-unit>
        <trans-unit id="2959570b7927f0f18791ea875a09e4144d14301d" translate="yes" xml:space="preserve">
          <source>Save your &lt;code&gt;pom.xml&lt;/code&gt; and run &lt;code&gt;mvn package&lt;/code&gt; from the command line, as follows:</source>
          <target state="translated">다음과 같이 &lt;code&gt;pom.xml&lt;/code&gt; 을 저장 하고 명령 줄에서 &lt;code&gt;mvn package&lt;/code&gt; 를 실행 합니다.</target>
        </trans-unit>
        <trans-unit id="ea68144bd52dc06045f1772ab1cc31696e7e4255" translate="yes" xml:space="preserve">
          <source>Scanning for Servlets, Filters, and listeners</source>
          <target state="translated">서블릿, 필터 및 리스너 스캔</target>
        </trans-unit>
        <trans-unit id="b4afd7f72a52cb10b26ddcc888f425defd56a623" translate="yes" xml:space="preserve">
          <source>Schema (DDL) script resource references.</source>
          <target state="translated">스키마 (DDL) 스크립트 리소스 참조.</target>
        </trans-unit>
        <trans-unit id="c3cb31f9cb504423a74115f664528a8012d5746e" translate="yes" xml:space="preserve">
          <source>Schema (LDIF) script resource reference.</source>
          <target state="translated">스키마 (LDIF) 스크립트 리소스 참조.</target>
        </trans-unit>
        <trans-unit id="468b023688cea232f68554bb42730c702d085f10" translate="yes" xml:space="preserve">
          <source>Schema action to take at startup.</source>
          <target state="translated">시작시 수행 할 스키마 조치입니다.</target>
        </trans-unit>
        <trans-unit id="3d3578f3eb752765bae19f12b9499e1801e8553d" translate="yes" xml:space="preserve">
          <source>Schema to use for Liquibase objects.</source>
          <target state="translated">Liquibase 개체에 사용할 스키마입니다.</target>
        </trans-unit>
        <trans-unit id="1cb3f726f8bfbbcf1f20e5cf1ffc0b8f2d7c4cc2" translate="yes" xml:space="preserve">
          <source>Scheme names managed by Flyway (case-sensitive).</source>
          <target state="translated">Flyway에서 관리하는 구성표 이름 (대소 문자 구분).</target>
        </trans-unit>
        <trans-unit id="fd0ca289544c8506a3685994ddca40086a0800e0" translate="yes" xml:space="preserve">
          <source>Scoop installs &lt;code&gt;spring&lt;/code&gt; to &lt;code&gt;~/scoop/apps/springboot/current/bin&lt;/code&gt;.</source>
          <target state="translated">Scoop 은 &lt;code&gt;~/scoop/apps/springboot/current/bin&lt;/code&gt; 에 &lt;code&gt;spring&lt;/code&gt; 을 설치합니다 .</target>
        </trans-unit>
        <trans-unit id="986739cc50a9a16db59179829215c0bfc668a3af" translate="yes" xml:space="preserve">
          <source>Second, you should also take steps to limit the damage if your application or the account that&amp;rsquo;s running it is compromised. If an attacker does gain access, they could make the jar file writable and change its contents. One way to protect against this is to make it immutable by using &lt;code&gt;chattr&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">둘째, 애플리케이션이나이를 실행하는 계정이 손상된 경우 피해를 제한하는 조치도 취해야합니다. 공격자가 액세스 권한을 얻으면 jar 파일을 쓰기 가능하게 만들고 내용을 변경할 수 있습니다. 이를 방지하는 한 가지 방법 은 다음 예제와 같이 &lt;code&gt;chattr&lt;/code&gt; 을 사용하여 변경 불가능하게 만드는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="21646d1f1f70bc9c6faf62c4e98beda2a1c81ea9" translate="yes" xml:space="preserve">
          <source>Securing an init.d Service</source>
          <target state="translated">init.d 서비스 보안</target>
        </trans-unit>
        <trans-unit id="8d9aee4e07e3cf9ff55d05eebab87d4aee771166" translate="yes" xml:space="preserve">
          <source>Security filter chain dispatcher types.</source>
          <target state="translated">보안 필터 체인 디스패처 유형.</target>
        </trans-unit>
        <trans-unit id="243cf9e43b5d0910634489c486a30b9b01ac71ba" translate="yes" xml:space="preserve">
          <source>Security filter chain order.</source>
          <target state="translated">보안 필터 체인 순서.</target>
        </trans-unit>
        <trans-unit id="06515ae74220756d5659bd1c3ec661a49b7a67a1" translate="yes" xml:space="preserve">
          <source>Security protocol used to communicate with brokers.</source>
          <target state="translated">브로커와 통신하는 데 사용되는 보안 프로토콜입니다.</target>
        </trans-unit>
        <trans-unit id="51198736f532b6b5cbec038b69cc937d61698021" translate="yes" xml:space="preserve">
          <source>See &amp;ldquo;&lt;a href=&quot;spring-boot-features#boot-features-configure-datasource&quot;&gt;spring-boot-features.html&lt;/a&gt;&amp;rdquo; in the &amp;ldquo;Spring Boot features&amp;rdquo; section and the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java&quot;&gt;&lt;code&gt;DataSourceAutoConfiguration&lt;/code&gt;&lt;/a&gt; class for more details.</source>
          <target state="translated">자세한 내용 은 &quot;Spring Boot 기능&quot;섹션의 &quot; &lt;a href=&quot;spring-boot-features#boot-features-configure-datasource&quot;&gt;spring-boot-features.html&lt;/a&gt; &quot;및 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java&quot;&gt; &lt;code&gt;DataSourceAutoConfiguration&lt;/code&gt; &lt;/a&gt; 클래스를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="054e9e420bb240812b3baa5aff83e06bf82a34e2" translate="yes" xml:space="preserve">
          <source>See &amp;ldquo;&lt;a href=&quot;spring-boot-features#boot-features-external-config-yaml&quot;&gt;spring-boot-features.html&lt;/a&gt;&amp;rdquo; in the &amp;lsquo;Spring Boot features&amp;rsquo; section for more information about YAML.</source>
          <target state="translated">YAML에 대한 자세한 내용은 'Spring Boot 기능'섹션의 &amp;ldquo; &lt;a href=&quot;spring-boot-features#boot-features-external-config-yaml&quot;&gt;spring-boot-features.html&lt;/a&gt; &amp;rdquo;을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a6eae2238a285cf8353fc28516cb2b18f20201bf" translate="yes" xml:space="preserve">
          <source>See &amp;ldquo;&lt;a href=&quot;spring-boot-features#boot-features-profiles&quot;&gt;spring-boot-features.html&lt;/a&gt;&amp;rdquo; in the &amp;ldquo;Spring Boot features&amp;rdquo; section for more information.</source>
          <target state="translated">자세한 내용 은&amp;ldquo;Spring Boot 기능&amp;rdquo;섹션의 &amp;ldquo; &lt;a href=&quot;spring-boot-features#boot-features-profiles&quot;&gt;spring-boot-features.html&lt;/a&gt; &amp;rdquo;을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7bf8c506a4879c895adc56ab62a0fe8393fa2f21" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;howto#howto-configure-a-datasource&quot;&gt;the &amp;ldquo;How-to&amp;rdquo; section&lt;/a&gt; for more advanced examples, typically to take full control over the configuration of the DataSource.</source>
          <target state="translated">참조 &lt;a href=&quot;howto#howto-configure-a-datasource&quot;&gt;은 &quot;사용 방법&quot;섹션&lt;/a&gt; 일반적으로 데이터 소스의 구성을 완벽하게 제어 할, 고급 예제입니다.</target>
        </trans-unit>
        <trans-unit id="a27248e4c2f7cbb8957f3774021f024b5a986b41" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.spring.io/spring-amqp/docs/2.3.1/api/org/springframework/amqp/rabbit/annotation/EnableRabbit.html&quot;&gt;the Javadoc of &lt;code&gt;@EnableRabbit&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용 &lt;a href=&quot;https://docs.spring.io/spring-amqp/docs/2.3.1/api/org/springframework/amqp/rabbit/annotation/EnableRabbit.html&quot;&gt;은 &lt;code&gt;@EnableRabbit&lt;/code&gt; &lt;/a&gt; 의 Javadoc 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="cc4bb87daed12185a4680539fba7b4f565a5124c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#run-example-debug&quot;&gt;this example&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#run-example-debug&quot;&gt;이 예&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f1c23cc02d359d41f0b095e5c27595cb5a16e49c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/jms/annotation/EnableJms.html&quot;&gt;the Javadoc of &lt;code&gt;@EnableJms&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용 &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/jms/annotation/EnableJms.html&quot;&gt;은 &lt;code&gt;@EnableJms&lt;/code&gt; &lt;/a&gt; 의 Javadoc 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8e6e3e2883fbb8947797a40f035a0c1ee2aced8a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/CorsEndpointProperties.java&quot;&gt;CorsEndpointProperties&lt;/a&gt; for a complete list of options.</source>
          <target state="translated">전체 옵션 목록은 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/CorsEndpointProperties.java&quot;&gt;CorsEndpointProperties&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="468029f5d3392c4d02f8102267120bfef58d6632" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java&quot;&gt;BatchAutoConfiguration&lt;/a&gt; and &lt;a href=&quot;https://docs.spring.io/spring-batch/docs/4.3.0/api/org/springframework/batch/core/configuration/annotation/EnableBatchProcessing.html&quot;&gt;@EnableBatchProcessing&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java&quot;&gt;BatchAutoConfiguration&lt;/a&gt; 및 &lt;a href=&quot;https://docs.spring.io/spring-batch/docs/4.3.0/api/org/springframework/batch/core/configuration/annotation/EnableBatchProcessing.html&quot;&gt;@EnableBatchProcessing&lt;/a&gt; 을 참조하세요.</target>
        </trans-unit>
        <trans-unit id="cac73ae191782f480cd830e88e53ddeaa7f194fe" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java&quot;&gt;&lt;code&gt;MessageSourceProperties&lt;/code&gt;&lt;/a&gt; for more supported options.</source>
          <target state="translated">더 많은 지원 옵션 은 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java&quot;&gt; &lt;code&gt;MessageSourceProperties&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="004070f6ab6df93b71fb83698e37d55b478f3b26" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java&quot;&gt;&lt;code&gt;DataSourceProperties&lt;/code&gt;&lt;/a&gt; for more of the supported options. These are the standard options that work regardless of the actual implementation. It is also possible to fine-tune implementation-specific settings by using their respective prefix (&lt;code&gt;spring.datasource.hikari.*&lt;/code&gt;, &lt;code&gt;spring.datasource.tomcat.*&lt;/code&gt;, &lt;code&gt;spring.datasource.dbcp2.*&lt;/code&gt;, and &lt;code&gt;spring.datasource.oracleucp.*&lt;/code&gt;). Refer to the documentation of the connection pool implementation you are using for more details.</source>
          <target state="translated">지원되는 옵션에 대한 자세한 내용은 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java&quot;&gt; &lt;code&gt;DataSourceProperties&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 . 이는 실제 구현에 관계없이 작동하는 표준 옵션입니다. 각각의 접두사 ( &lt;code&gt;spring.datasource.hikari.*&lt;/code&gt; , &lt;code&gt;spring.datasource.tomcat.*&lt;/code&gt; , &lt;code&gt;spring.datasource.dbcp2.*&lt;/code&gt; 및 &lt;code&gt;spring.datasource.oracleucp.*&lt;/code&gt; ) 를 사용하여 구현 별 설정을 미세 조정할 수도 있습니다 . ). 자세한 내용은 사용중인 연결 풀 구현의 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5ba836de208ebfc245006c17e8bac02784863404" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java&quot;&gt;&lt;code&gt;ActiveMQProperties&lt;/code&gt;&lt;/a&gt; for more of the supported options. You can also register an arbitrary number of beans that implement &lt;code&gt;ActiveMQConnectionFactoryCustomizer&lt;/code&gt; for more advanced customizations.</source>
          <target state="translated">지원되는 옵션에 대한 자세한 내용은 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java&quot;&gt; &lt;code&gt;ActiveMQProperties&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 . 고급 사용자 정의를 위해 &lt;code&gt;ActiveMQConnectionFactoryCustomizer&lt;/code&gt; 를 구현하는 임의의 수의 Bean을 등록 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9aff8b5756cd0143d0feff3a1b2dbe82b4f8444f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisProperties.java&quot;&gt;&lt;code&gt;ArtemisProperties&lt;/code&gt;&lt;/a&gt; for more supported options.</source>
          <target state="translated">더 많은 지원 옵션 은 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisProperties.java&quot;&gt; &lt;code&gt;ArtemisProperties&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="016622bc80cabc7860070e449caf11c8dcc9836c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java&quot;&gt;&lt;code&gt;KafkaProperties&lt;/code&gt;&lt;/a&gt; for more supported options.</source>
          <target state="translated">더 많은 지원 옵션 은 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java&quot;&gt; &lt;code&gt;KafkaProperties&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e682a675dcd4551cd116ce2a81aa6cba4f9c0107" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseProperties.java&quot;&gt;&lt;code&gt;LiquibaseProperties&lt;/code&gt;&lt;/a&gt; for details about available settings such as contexts, the default schema, and others.</source>
          <target state="translated">컨텍스트, 기본 스키마 등과 같은 사용 가능한 설정에 대한 자세한 내용은 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseProperties.java&quot;&gt; &lt;code&gt;LiquibaseProperties&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b94e5683243efa83392924cb465002cb9204d544" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java&quot;&gt;&lt;code&gt;HibernateJpaAutoConfiguration&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java&quot;&gt;&lt;code&gt;JpaBaseConfiguration&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java&quot;&gt; &lt;code&gt;HibernateJpaAutoConfiguration&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java&quot;&gt; &lt;code&gt;JpaBaseConfiguration&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b2db06cf22b1d5afb10e3b2de481105d3a8ba1a7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java&quot;&gt;&lt;code&gt;JpaBaseConfiguration&lt;/code&gt;&lt;/a&gt; for the default settings.</source>
          <target state="translated">기본 설정 은 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java&quot;&gt; &lt;code&gt;JpaBaseConfiguration&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b6e6a19e0dbc1a2f7c70e635da156c01c49b07c7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java&quot;&gt;&lt;code&gt;ResourceProperties&lt;/code&gt;&lt;/a&gt; for more supported options.</source>
          <target state="translated">더 많은 지원 옵션 은 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java&quot;&gt; &lt;code&gt;ResourceProperties&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f77fa6b089272b8d72047c105681ceb2f8b10082" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java&quot;&gt;&lt;code&gt;ConfigFileApplicationListener&lt;/code&gt;&lt;/a&gt; for more detail.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java&quot;&gt; &lt;code&gt;ConfigFileApplicationListener&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="441a5454e1129ef8daf8239f77f98d1e2265b7a0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/Ssl.java&quot;&gt;&lt;code&gt;Ssl&lt;/code&gt;&lt;/a&gt; for details of all of the supported properties.</source>
          <target state="translated">지원되는 모든 속성에 대한 자세한 내용은 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/Ssl.java&quot;&gt; &lt;code&gt;Ssl&lt;/code&gt; &lt;/a&gt; 을 참조하세요 .</target>
        </trans-unit>
        <trans-unit id="66a71f89b9f0d65b6cd880aa980b739a1d591c3c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://maven.apache.org/settings.html&quot;&gt;Maven&amp;rsquo;s settings documentation&lt;/a&gt; for further information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://maven.apache.org/settings.html&quot;&gt;Maven의 설정 문서&lt;/a&gt; 를 참조 하세요.</target>
        </trans-unit>
        <trans-unit id="c770a48da43fce0c912546647e55afb1d3ed5542" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://spring.io/blog/2010/06/14/understanding-amqp-the-protocol-used-by-rabbitmq/&quot;&gt;Understanding AMQP, the protocol used by RabbitMQ&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용 &lt;a href=&quot;https://spring.io/blog/2010/06/14/understanding-amqp-the-protocol-used-by-rabbitmq/&quot;&gt;은 RabbitMQ&lt;/a&gt; 에서 사용하는 프로토콜 인 AMQP 이해 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="dbebb2f558adac36272be3c97a15dab9104a63c1" translate="yes" xml:space="preserve">
          <source>See GroovyMarkupConfigurer</source>
          <target state="translated">GroovyMarkupConfigurer 참조</target>
        </trans-unit>
        <trans-unit id="5eb51eff8f1d44c73219f918295a3983f890261f" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;#boot-features-external-config-vs-value&quot;&gt;differences between &lt;code&gt;@Value&lt;/code&gt; and type-safe configuration properties&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#boot-features-external-config-vs-value&quot;&gt; &lt;code&gt;@Value&lt;/code&gt; &lt;/a&gt; 및 유형 안전 구성 속성 간의 차이점 도 참조하세요 .</target>
        </trans-unit>
        <trans-unit id="6e8bf15be448b8ad522ecd98def3cee6f43108e8" translate="yes" xml:space="preserve">
          <source>See also the section on &amp;ldquo;&lt;a href=&quot;spring-boot-features#boot-features-error-handling&quot;&gt;Error Handling&lt;/a&gt;&amp;rdquo; for details of how to register handlers in the servlet container.</source>
          <target state="translated">서블릿 컨테이너에 핸들러를 등록하는 방법에 대한 자세한 내용은 &amp;ldquo; &lt;a href=&quot;spring-boot-features#boot-features-error-handling&quot;&gt;오류 처리&lt;/a&gt; &amp;rdquo; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e7a3f4c354c42e782c4bf30e22c7bf3d9dc0ca2f" translate="yes" xml:space="preserve">
          <source>See subclasses of &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/CompilerAutoConfiguration.java&quot;&gt;&lt;code&gt;CompilerAutoConfiguration&lt;/code&gt;&lt;/a&gt; in the Spring Boot CLI source code to understand exactly how customizations are applied.</source>
          <target state="translated">사용자 정의가 적용되는 방식을 정확히 이해하려면 Spring Boot CLI 소스 코드에서 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/CompilerAutoConfiguration.java&quot;&gt; &lt;code&gt;CompilerAutoConfiguration&lt;/code&gt; 의&lt;/a&gt; 하위 클래스를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9a7f490981fd8e3756678a2b7679c334d0c3522c" translate="yes" xml:space="preserve">
          <source>See the &amp;ldquo;&lt;a href=&quot;#howto-customize-the-responsebody-rendering&quot;&gt;Customize the @ResponseBody Rendering&lt;/a&gt;&amp;rdquo; section and the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java&quot;&gt;&lt;code&gt;WebMvcAutoConfiguration&lt;/code&gt;&lt;/a&gt; source code for more details.</source>
          <target state="translated">자세한 내용은 &quot; &lt;a href=&quot;#howto-customize-the-responsebody-rendering&quot;&gt;@ResponseBody 렌더링 사용자 지정&lt;/a&gt; &quot;섹션 및 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java&quot;&gt; &lt;code&gt;WebMvcAutoConfiguration&lt;/code&gt; &lt;/a&gt; 소스 코드를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="88b39e07f65dd8511387f6bab89dd939828a3e64" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://boxfuse.com/docs/commandline/run.html&quot;&gt;&lt;code&gt;boxfuse run&lt;/code&gt; documentation&lt;/a&gt; for more options. If there is a &lt;a href=&quot;https://boxfuse.com/docs/commandline/#configuration&quot;&gt;&lt;code&gt;boxfuse.conf&lt;/code&gt;&lt;/a&gt; file present in the current directory, it is considered.</source>
          <target state="translated">더 많은 옵션 은 &lt;a href=&quot;https://boxfuse.com/docs/commandline/run.html&quot;&gt; &lt;code&gt;boxfuse run&lt;/code&gt; 문서&lt;/a&gt; 를 참조하십시오 . 가있는 경우 &lt;a href=&quot;https://boxfuse.com/docs/commandline/#configuration&quot;&gt; &lt;code&gt;boxfuse.conf&lt;/code&gt; 의&lt;/a&gt; 현재 디렉토리에있는 파일 존재, 그것은 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="98b74d2f6c2d332bf77be86fd6c38764a877afa6" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://docs.cloudfoundry.org/cf-cli/getting-started.html#push&quot;&gt;&lt;code&gt;cf push&lt;/code&gt; documentation&lt;/a&gt; for more options. If there is a Cloud Foundry &lt;a href=&quot;https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html&quot;&gt;&lt;code&gt;manifest.yml&lt;/code&gt;&lt;/a&gt; file present in the same directory, it is considered.</source>
          <target state="translated">더 많은 옵션 은 &lt;a href=&quot;https://docs.cloudfoundry.org/cf-cli/getting-started.html#push&quot;&gt; &lt;code&gt;cf push&lt;/code&gt; 문서&lt;/a&gt; 를 참조하십시오 . 동일한 디렉토리에 Cloud Foundry &lt;a href=&quot;https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html&quot;&gt; &lt;code&gt;manifest.yml&lt;/code&gt; &lt;/a&gt; 파일이있는 경우이를 고려합니다.</target>
        </trans-unit>
        <trans-unit id="e25dd3777229339bd399587b31f0a284c74031ca" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#integrating-with-actuator-build-info&quot;&gt;Spring Boot Gradle Plugin documentation&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#integrating-with-actuator-build-info&quot;&gt;Spring Boot Gradle 플러그인 문서&lt;/a&gt; 를 참조하세요.</target>
        </trans-unit>
        <trans-unit id="5e1d303493ae660ba0d13051a1c8593407e7fa9d" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#goals-build-info&quot;&gt;Spring Boot Maven Plugin documentation&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#goals-build-info&quot;&gt;Spring Boot Maven 플러그인 문서&lt;/a&gt; 를 참조하세요.</target>
        </trans-unit>
        <trans-unit id="6d647b4be79fd595431b993ec1b7c7c5546a3ea3" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#repackage&quot;&gt;plugin documentation&lt;/a&gt; for full usage details.</source>
          <target state="translated">자세한 사용법 은 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#repackage&quot;&gt;플러그인 문서&lt;/a&gt; 를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="9d2914cb53f0b4f1b69812d3b270c469129adef3" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://docs.spring.io/spring-data/mongodb/docs/3.1.1/api/org/springframework/data/mongodb/core/MongoOperations.html&quot;&gt;&lt;code&gt;MongoOperations&lt;/code&gt; Javadoc&lt;/a&gt; for complete details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://docs.spring.io/spring-data/mongodb/docs/3.1.1/api/org/springframework/data/mongodb/core/MongoOperations.html&quot;&gt; &lt;code&gt;MongoOperations&lt;/code&gt; Javadoc&lt;/a&gt; 을 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="64dfb0583f1f436f340c29ca6e26c27f35b049ac" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/integration.html#mail&quot;&gt;reference documentation&lt;/a&gt; for a detailed explanation of how you can use &lt;code&gt;JavaMailSender&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JavaMailSender&lt;/code&gt; 사용 방법에 대한 자세한 설명은 &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/integration.html#mail&quot;&gt;참조 문서&lt;/a&gt; 를 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="35edf3cc5c6ed615bff41f9b24fe535ea7ae88ef" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java&quot;&gt;&lt;code&gt;IntegrationAutoConfiguration&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationProperties.java&quot;&gt;&lt;code&gt;IntegrationProperties&lt;/code&gt;&lt;/a&gt; classes for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java&quot;&gt; &lt;code&gt;IntegrationAutoConfiguration&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationProperties.java&quot;&gt; &lt;code&gt;IntegrationProperties&lt;/code&gt; &lt;/a&gt; 클래스를 참조하세요.</target>
        </trans-unit>
        <trans-unit id="b41c7053c320b3c871afdec137dbec3ed61f563a" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java&quot;&gt;&lt;code&gt;JmxAutoConfiguration&lt;/code&gt;&lt;/a&gt; class for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java&quot;&gt; &lt;code&gt;JmxAutoConfiguration&lt;/code&gt; &lt;/a&gt; 클래스를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2e2f2b0a60131969534544204029f24c230ab990" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java&quot;&gt;&lt;code&gt;ServerProperties&lt;/code&gt;&lt;/a&gt; class for a complete list.</source>
          <target state="translated">전체 목록 은 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java&quot;&gt; &lt;code&gt;ServerProperties&lt;/code&gt; &lt;/a&gt; 클래스를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3445c28696d1588c910e9cbafd609b33e2044dec" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/MultipartAutoConfiguration.java&quot;&gt;&lt;code&gt;MultipartAutoConfiguration&lt;/code&gt;&lt;/a&gt; source for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/MultipartAutoConfiguration.java&quot;&gt; &lt;code&gt;MultipartAutoConfiguration&lt;/code&gt; &lt;/a&gt; 소스를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="abdf4f9b43f4f478da7efc5df50005eeb2025eef" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java&quot;&gt;&lt;code&gt;WebMvcAutoConfiguration&lt;/code&gt;&lt;/a&gt; source code for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java&quot;&gt; &lt;code&gt;WebMvcAutoConfiguration&lt;/code&gt; &lt;/a&gt; 소스 코드를 참조하세요.</target>
        </trans-unit>
        <trans-unit id="c96f1c2a38379685ff8241919e85a01656fbe8d0" translate="yes" xml:space="preserve">
          <source>See the LiveReload section</source>
          <target state="translated">LiveReload 섹션 참조</target>
        </trans-unit>
        <trans-unit id="4fe4051a262ce1de7993409908a0c67ddd54efac" translate="yes" xml:space="preserve">
          <source>See the blog post on &lt;a href=&quot;https://boxfuse.com/blog/spring-boot-ec2.html&quot;&gt;deploying Spring Boot apps on EC2&lt;/a&gt; as well as the &lt;a href=&quot;https://boxfuse.com/docs/payloads/springboot.html&quot;&gt;documentation for the Boxfuse Spring Boot integration&lt;/a&gt; to get started with a Maven build to run the app.</source>
          <target state="translated">&lt;a href=&quot;https://boxfuse.com/blog/spring-boot-ec2.html&quot;&gt;앱&lt;/a&gt; 을 실행하기 위해 Maven 빌드를 시작 하려면 EC2에 Spring Boot 앱 배포 에 대한 블로그 게시물 &lt;a href=&quot;https://boxfuse.com/docs/payloads/springboot.html&quot;&gt;과 Boxfuse Spring Boot 통합 문서를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="207be024e29168d7fd47218b75f931ccc9c6a244" translate="yes" xml:space="preserve">
          <source>Select &lt;code&gt;Run Configurations&amp;hellip;​&lt;/code&gt; from the &lt;code&gt;Run&lt;/code&gt; menu.</source>
          <target state="translated">선택 &lt;code&gt;Run Configurations&amp;hellip;​&lt;/code&gt; 로부터 &lt;code&gt;Run&lt;/code&gt; 메뉴를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="bc1c7eabf55849a57ca844a5fa38d05a9056f86a" translate="yes" xml:space="preserve">
          <source>SendGrid API key.</source>
          <target state="translated">SendGrid API 키.</target>
        </trans-unit>
        <trans-unit id="b955c0ce1874eb67c35c657c49d08d018c5018b1" translate="yes" xml:space="preserve">
          <source>SendGrid proxy host.</source>
          <target state="translated">SendGrid 프록시 호스트.</target>
        </trans-unit>
        <trans-unit id="c3a9ead54f20f277566cd6f45b8d1b63931fa807" translate="yes" xml:space="preserve">
          <source>SendGrid proxy port.</source>
          <target state="translated">SendGrid 프록시 포트.</target>
        </trans-unit>
        <trans-unit id="dacb4f811b4db3151e575cd92863d7ecf8443bf4" translate="yes" xml:space="preserve">
          <source>Serialization policy for Long and long types.</source>
          <target state="translated">Long 및 long 유형에 대한 직렬화 정책.</target>
        </trans-unit>
        <trans-unit id="7e54348e4cfd9b2888849f51e4424eb7598c0957" translate="yes" xml:space="preserve">
          <source>Serializer class for keys.</source>
          <target state="translated">키에 대한 직렬 변환기 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="bfd660cfdea969f23579d1f9cbd1e4cc30dbb4c4" translate="yes" xml:space="preserve">
          <source>Serializer class for values.</source>
          <target state="translated">값에 대한 직렬 변환기 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="cb0cb170d106f8e8d5af1e05bbdbd3a96a7de197" translate="yes" xml:space="preserve">
          <source>Server</source>
          <target state="translated">Server</target>
        </trans-unit>
        <trans-unit id="d44746b6a61dc540475d32da8691d6391cdcc486" translate="yes" xml:space="preserve">
          <source>Server HTTP port.</source>
          <target state="translated">서버 HTTP 포트.</target>
        </trans-unit>
        <trans-unit id="ce07f99c55ec64645ed034e4bd6249cfb97e555e" translate="yes" xml:space="preserve">
          <source>Server ID. By default, an auto-incremented counter is used.</source>
          <target state="translated">서버 ID. 기본적으로 자동 증가 카운터가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="7e18155d91caf703f5844c374f06b4a5bc99953f" translate="yes" xml:space="preserve">
          <source>Server port.</source>
          <target state="translated">서버 포트.</target>
        </trans-unit>
        <trans-unit id="acca64b83535b9a1dff37a13cd176f393be7c195" translate="yes" xml:space="preserve">
          <source>Servers</source>
          <target state="translated">Servers</target>
        </trans-unit>
        <trans-unit id="25ae3affc09fbc88c67190ae4f4131587e327efc" translate="yes" xml:space="preserve">
          <source>Servlet 3.0+ applications might translate pretty easily if they already use the Spring Servlet 3.0+ initializer support classes. Normally, all the code from an existing &lt;code&gt;WebApplicationInitializer&lt;/code&gt; can be moved into a &lt;code&gt;SpringBootServletInitializer&lt;/code&gt;. If your existing application has more than one &lt;code&gt;ApplicationContext&lt;/code&gt; (for example, if it uses &lt;code&gt;AbstractDispatcherServletInitializer&lt;/code&gt;) then you might be able to combine all your context sources into a single &lt;code&gt;SpringApplication&lt;/code&gt;. The main complication you might encounter is if combining does not work and you need to maintain the context hierarchy. See the &lt;a href=&quot;#howto-build-an-application-context-hierarchy&quot;&gt;entry on building a hierarchy&lt;/a&gt; for examples. An existing parent context that contains web-specific features usually needs to be broken up so that all the &lt;code&gt;ServletContextAware&lt;/code&gt; components are in the child context.</source>
          <target state="translated">Servlet 3.0+ 애플리케이션은 이미 Spring Servlet 3.0+ 이니셜 라이저 지원 클래스를 사용하고 있다면 매우 쉽게 번역 할 수 있습니다. 일반적으로 기존 &lt;code&gt;WebApplicationInitializer&lt;/code&gt; 의 모든 코드 는 &lt;code&gt;SpringBootServletInitializer&lt;/code&gt; 로 이동할 수 있습니다 . 기존 애플리케이션에 하나 이상의 &lt;code&gt;ApplicationContext&lt;/code&gt; 가있는 경우 (예 : &lt;code&gt;AbstractDispatcherServletInitializer&lt;/code&gt; 를 사용하는 경우 ) 모든 컨텍스트 소스를 단일 &lt;code&gt;SpringApplication&lt;/code&gt; 으로 결합 할 수 있습니다 . 발생할 수있는 주요 문제는 결합이 작동하지 않고 컨텍스트 계층을 유지해야하는 경우입니다. &lt;a href=&quot;#howto-build-an-application-context-hierarchy&quot;&gt;계층 구조 구축에 대한 항목&lt;/a&gt; 보기예를 들어. 웹 특정 기능을 포함하는 기존 상위 컨텍스트는 일반적으로 모든 &lt;code&gt;ServletContextAware&lt;/code&gt; 구성 요소가 하위 컨텍스트에 있도록 분리되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="3d411bce7caef796445b05af88f47694187c2600" translate="yes" xml:space="preserve">
          <source>Servlet 3.0+ applications with no &lt;code&gt;web.xml&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;web.xml&lt;/code&gt; 이없는 Servlet 3.0+ 애플리케이션 .</target>
        </trans-unit>
        <trans-unit id="51033b725725c98b9ee6866fb6948ab05018a81e" translate="yes" xml:space="preserve">
          <source>Servlet Version</source>
          <target state="translated">서블릿 버전</target>
        </trans-unit>
        <trans-unit id="879fc36d2199095dfd22ee5c6b67043508fa8ce9" translate="yes" xml:space="preserve">
          <source>Servlet context init parameters.</source>
          <target state="translated">서블릿 컨텍스트 초기화 매개 변수.</target>
        </trans-unit>
        <trans-unit id="0659dcfa5ad0efc2a75dc827bb643cb21fa965d2" translate="yes" xml:space="preserve">
          <source>Servlet init parameters to pass to Spring Web Services.</source>
          <target state="translated">Spring Web Services에 전달할 서블릿 초기화 매개 변수.</target>
        </trans-unit>
        <trans-unit id="2ff7d1467c90465f1349a13c575c8bfc5bb74943" translate="yes" xml:space="preserve">
          <source>Servlet stack</source>
          <target state="translated">서블릿 스택</target>
        </trans-unit>
        <trans-unit id="355bcf83c8e88a2289742b8a963518cdded147d4" translate="yes" xml:space="preserve">
          <source>Session JNDI name. When set, takes precedence over other Session settings.</source>
          <target state="translated">세션 JNDI 이름. 설정되면 다른 세션 설정보다 우선합니다.</target>
        </trans-unit>
        <trans-unit id="28fcdf4e7cee5c2bc0166c2d1df24232214ad8fa" translate="yes" xml:space="preserve">
          <source>Session cookie name.</source>
          <target state="translated">세션 쿠키 이름.</target>
        </trans-unit>
        <trans-unit id="a9fbcb9c10ff0e888e41c2f60e308d128f39435f" translate="yes" xml:space="preserve">
          <source>Session repository filter dispatcher types.</source>
          <target state="translated">세션 저장소 필터 디스패처 유형.</target>
        </trans-unit>
        <trans-unit id="83142629ee318324887cc20caf8b9e249c3bfbf8" translate="yes" xml:space="preserve">
          <source>Session repository filter order.</source>
          <target state="translated">세션 저장소 필터 순서.</target>
        </trans-unit>
        <trans-unit id="1b9c61e7bad217a76054ad006768b36f327ad0a9" translate="yes" xml:space="preserve">
          <source>Session settings: Whether the session is persistent (&lt;code&gt;server.servlet.session.persistent&lt;/code&gt;), session timeout (&lt;code&gt;server.servlet.session.timeout&lt;/code&gt;), location of session data (&lt;code&gt;server.servlet.session.store-dir&lt;/code&gt;), and session-cookie configuration (&lt;code&gt;server.servlet.session.cookie.*&lt;/code&gt;).</source>
          <target state="translated">세션 설정 : 세션이 지속되는지 ( &lt;code&gt;server.servlet.session.persistent&lt;/code&gt; ), 세션 시간 초과 ( &lt;code&gt;server.servlet.session.timeout&lt;/code&gt; ), 세션 데이터 위치 ( &lt;code&gt;server.servlet.session.store-dir&lt;/code&gt; ) 및 세션 쿠키 구성 ( &lt;code&gt;server.servlet.session.cookie.*&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="2c5ad3906ab179aa3caf6aa9db1433f050ed0c72" translate="yes" xml:space="preserve">
          <source>Session store type.</source>
          <target state="translated">세션 저장소 유형.</target>
        </trans-unit>
        <trans-unit id="c612db9782b11ac15f2bddb95e80fd45cbd63382" translate="yes" xml:space="preserve">
          <source>Session timeout. If a duration suffix is not specified, seconds will be used.</source>
          <target state="translated">세션 타임 아웃. 기간 접미사가 지정되지 않은 경우 초가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0289c882dd189fe35a7b5d94205378b74d00f393" translate="yes" xml:space="preserve">
          <source>Session tracking modes.</source>
          <target state="translated">세션 추적 모드.</target>
        </trans-unit>
        <trans-unit id="08d6c47a905a7ae3672981fcdb032cbd52ce3f11" translate="yes" xml:space="preserve">
          <source>Sessions flush mode. Determines when session changes are written to the session store.</source>
          <target state="translated">세션 플러시 모드. 세션 변경 사항이 세션 저장소에 기록되는시기를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="57ec0719b5da8460ff1c8a27286ea12cbd999e52" translate="yes" xml:space="preserve">
          <source>Sessions save mode. Determines how session changes are tracked and saved to the session store.</source>
          <target state="translated">세션 저장 모드. 세션 변경 사항을 추적하고 세션 저장소에 저장하는 방법을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="fa6652707eb158935a9b1cf71a8d15fda6cac587" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;server.error.whitelabel.enabled=false&lt;/code&gt; to switch the default error page off. Doing so restores the default of the servlet container that you are using. Note that Spring Boot still tries to resolve the error view, so you should probably add your own error page rather than disabling it completely.</source>
          <target state="translated">기본 오류 페이지를 끄려면 &lt;code&gt;server.error.whitelabel.enabled=false&lt;/code&gt; 를 설정 하십시오. 이렇게하면 사용중인 서블릿 컨테이너의 기본값이 복원됩니다. Spring Boot는 여전히 오류보기를 해결하려고 시도하므로 완전히 비활성화하는 대신 자체 오류 페이지를 추가해야합니다.</target>
        </trans-unit>
        <trans-unit id="92aadfd992a339310f493763c70dee616ee58366" translate="yes" xml:space="preserve">
          <source>Set request attributes for the IP address, Hostname, protocol, and port used for the request.</source>
          <target state="translated">요청에 사용되는 IP 주소, 호스트 이름, 프로토콜 및 포트에 대한 요청 속성을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="5691124bce7f6dde44ba9ecf1cc9a4feccb24c54" translate="yes" xml:space="preserve">
          <source>Setters are provided for many configuration options. Several protected method &amp;ldquo;hooks&amp;rdquo; are also provided should you need to do something more exotic. See the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/web/servlet/server/ConfigurableServletWebServerFactory.html&quot;&gt;source code documentation&lt;/a&gt; for details.</source>
          <target state="translated">많은 구성 옵션에 대해 Setter가 제공됩니다. 좀 더 이국적인 작업을 수행해야하는 경우 여러 보호 된 방법 &quot;후크&quot;도 제공됩니다. 자세한 내용은 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/web/servlet/server/ConfigurableServletWebServerFactory.html&quot;&gt;소스 코드 문서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ff0e0a93f02eca72ff45eff11aa7cf0bc0a4e483" translate="yes" xml:space="preserve">
          <source>Several additional properties are available using dedicated properties; other arbitrary Kafka properties can be set using the &lt;code&gt;spring.kafka.streams.properties&lt;/code&gt; namespace. See also &lt;a href=&quot;#boot-features-kafka-extra-props&quot;&gt;Additional Kafka Properties&lt;/a&gt; for more information.</source>
          <target state="translated">전용 속성을 사용하여 몇 가지 추가 속성을 사용할 수 있습니다. 다른 임의의 Kafka 속성은 &lt;code&gt;spring.kafka.streams.properties&lt;/code&gt; 네임 스페이스를 사용하여 설정할 수 있습니다 . 자세한 내용은 &lt;a href=&quot;#boot-features-kafka-extra-props&quot;&gt;추가 Kafka 속성&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ff49ed2a50dab6b9b1e84f948a8bcaf23d59cbd3" translate="yes" xml:space="preserve">
          <source>Several locations can be specified under a single &lt;code&gt;spring.config.import&lt;/code&gt; key. Locations will be processed in the order that they are defined, with later imports taking precedence.</source>
          <target state="translated">하나의 &lt;code&gt;spring.config.import&lt;/code&gt; 키 아래에 여러 위치를 지정할 수 있습니다 . 위치는 정의 된 순서대로 처리되며 나중에 가져 오기가 우선합니다.</target>
        </trans-unit>
        <trans-unit id="54de1afd657731b2221e405dc390ddfaaf89351c" translate="yes" xml:space="preserve">
          <source>Several of the libraries supported by Spring Boot use caches to improve performance. For example, &lt;a href=&quot;spring-boot-features#boot-features-spring-mvc-template-engines&quot;&gt;template engines&lt;/a&gt; cache compiled templates to avoid repeatedly parsing template files. Also, Spring MVC can add HTTP caching headers to responses when serving static resources.</source>
          <target state="translated">Spring Boot에서 지원하는 여러 라이브러리는 성능 향상을 위해 캐시를 사용합니다. 예를 들어 &lt;a href=&quot;spring-boot-features#boot-features-spring-mvc-template-engines&quot;&gt;템플릿 엔진은&lt;/a&gt; 템플릿 파일을 반복적으로 구문 분석하지 않도록 컴파일 된 템플릿을 캐시합니다. 또한 Spring MVC는 정적 자원을 제공 할 때 응답에 HTTP 캐싱 헤더를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="664dafaec54ab4fbc06243b34c13b453efa03e84" translate="yes" xml:space="preserve">
          <source>Shows &amp;lsquo;metrics&amp;rsquo; information for the current application.</source>
          <target state="translated">현재 애플리케이션에 대한 '메트릭'정보를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="538024dbcfd07ebd31741c26474f8b6838808c82" translate="yes" xml:space="preserve">
          <source>Shows and modifies the configuration of loggers in the application.</source>
          <target state="translated">응용 프로그램에서 로거 구성을 표시하고 수정합니다.</target>
        </trans-unit>
        <trans-unit id="e18aad3f94cb5036394d2c9fe8928b1acdc7687f" translate="yes" xml:space="preserve">
          <source>Shows any Flyway database migrations that have been applied. Requires one or more &lt;code&gt;Flyway&lt;/code&gt; beans.</source>
          <target state="translated">적용된 Flyway 데이터베이스 마이그레이션을 표시합니다. 하나 이상의 &lt;code&gt;Flyway&lt;/code&gt; 콩이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="538305ed4383f284dabfab0f1aa7f335b7ddc87f" translate="yes" xml:space="preserve">
          <source>Shows any Liquibase database migrations that have been applied. Requires one or more &lt;code&gt;Liquibase&lt;/code&gt; beans.</source>
          <target state="translated">적용된 Liquibase 데이터베이스 마이그레이션을 표시합니다. 하나 이상의 &lt;code&gt;Liquibase&lt;/code&gt; Bean이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="bba6c54d1ef9302921298bd1141e62da39a29cc7" translate="yes" xml:space="preserve">
          <source>Shows application health information.</source>
          <target state="translated">애플리케이션 상태 정보를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="20d1592203a75843aecc89380f1b48b6818a4c21" translate="yes" xml:space="preserve">
          <source>Shows the Spring Integration graph. Requires a dependency on &lt;code&gt;spring-integration-core&lt;/code&gt;.</source>
          <target state="translated">Spring Integration 그래프를 표시합니다. &lt;code&gt;spring-integration-core&lt;/code&gt; 에 대한 종속성이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="136b35486d0de0d4b32efbfeb3f7e6b7e4e80001" translate="yes" xml:space="preserve">
          <source>Shows the conditions that were evaluated on configuration and auto-configuration classes and the reasons why they did or did not match.</source>
          <target state="translated">구성 및 자동 구성 클래스에서 평가 된 조건과 일치하거나 일치하지 않는 이유를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="b51963a6faa32e3d5423f0308724782385fecdea" translate="yes" xml:space="preserve">
          <source>Shows the startup steps data collected by the &lt;code&gt;ApplicationStartup&lt;/code&gt;. Requires the &lt;code&gt;SpringApplication&lt;/code&gt; to be configured with a &lt;code&gt;BufferingApplicationStartup&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ApplicationStartup&lt;/code&gt; 에서 수집 한 시작 단계 데이터를 표시합니다 . 필요 &lt;code&gt;SpringApplication&lt;/code&gt; 로 구성 할 &lt;code&gt;BufferingApplicationStartup&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="ec06db6ce33b53024b09e7c4995ab6653f44c771" translate="yes" xml:space="preserve">
          <source>Shutdown complete</source>
          <target state="translated">종료 완료</target>
        </trans-unit>
        <trans-unit id="3bdcab6861ccf8702417c54d3000029bf5e5a438" translate="yes" xml:space="preserve">
          <source>Shutdown has been requested.</source>
          <target state="translated">종료가 요청되었습니다.</target>
        </trans-unit>
        <trans-unit id="b8800862cae43c0680cd62a8eb292bc192c7563e" translate="yes" xml:space="preserve">
          <source>Shutdown timeout.</source>
          <target state="translated">종료 시간이 초과되었습니다.</target>
        </trans-unit>
        <trans-unit id="614efc7461f82461c3cb6c8404d4987fa40a83c6" translate="yes" xml:space="preserve">
          <source>SignalFX access token.</source>
          <target state="translated">SignalFX 액세스 토큰.</target>
        </trans-unit>
        <trans-unit id="ac10b4835602dd1f62ca10ed9bbfbe5df1f73e26" translate="yes" xml:space="preserve">
          <source>SignalFx</source>
          <target state="translated">SignalFx</target>
        </trans-unit>
        <trans-unit id="2c9c5af5997dd38bb08fdf43d40cfa25deb28bac" translate="yes" xml:space="preserve">
          <source>SignalFx registry pushes metrics to &lt;a href=&quot;https://micrometer.io/docs/registry/signalFx&quot;&gt;SignalFx&lt;/a&gt; periodically. To export metrics to &lt;a href=&quot;https://www.signalfx.com&quot;&gt;SignalFx&lt;/a&gt;, your access token must be provided:</source>
          <target state="translated">SignalFx 레지스트리는 메트릭을 &lt;a href=&quot;https://micrometer.io/docs/registry/signalFx&quot;&gt;SignalFx에&lt;/a&gt; 주기적으로 푸시 합니다. 지표를 &lt;a href=&quot;https://www.signalfx.com&quot;&gt;SignalFx로&lt;/a&gt; 내보내 려면 액세스 토큰을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="9845cfea5c2d905aa139b21a1b0a8430a9d66af6" translate="yes" xml:space="preserve">
          <source>Similar to Spring MVC applications, you can secure your WebFlux applications by adding the &lt;code&gt;spring-boot-starter-security&lt;/code&gt; dependency. The default security configuration is implemented in &lt;code&gt;ReactiveSecurityAutoConfiguration&lt;/code&gt; and &lt;code&gt;UserDetailsServiceAutoConfiguration&lt;/code&gt;. &lt;code&gt;ReactiveSecurityAutoConfiguration&lt;/code&gt; imports &lt;code&gt;WebFluxSecurityConfiguration&lt;/code&gt; for web security and &lt;code&gt;UserDetailsServiceAutoConfiguration&lt;/code&gt; configures authentication, which is also relevant in non-web applications. To switch off the default web application security configuration completely, you can add a bean of type &lt;code&gt;WebFilterChainProxy&lt;/code&gt; (doing so does not disable the &lt;code&gt;UserDetailsService&lt;/code&gt; configuration or Actuator&amp;rsquo;s security).</source>
          <target state="translated">Spring MVC 애플리케이션과 유사하게 &lt;code&gt;spring-boot-starter-security&lt;/code&gt; 종속성 을 추가하여 WebFlux 애플리케이션을 보호 할 수 있습니다 . 기본 보안 구성은 &lt;code&gt;ReactiveSecurityAutoConfiguration&lt;/code&gt; 및 &lt;code&gt;UserDetailsServiceAutoConfiguration&lt;/code&gt; 에서 구현됩니다 . &lt;code&gt;ReactiveSecurityAutoConfiguration&lt;/code&gt; 은 웹 보안을 위해 &lt;code&gt;WebFluxSecurityConfiguration&lt;/code&gt; 을 가져 오고 &lt;code&gt;UserDetailsServiceAutoConfiguration&lt;/code&gt; 은 인증을 구성하며 이는 웹이 아닌 응용 프로그램에서도 관련이 있습니다. 기본 웹 애플리케이션 보안 구성을 완전히 끄려면 &lt;code&gt;WebFilterChainProxy&lt;/code&gt; 유형의 Bean을 추가 할 수 있습니다. 이렇게해도 &lt;code&gt;UserDetailsService&lt;/code&gt; 가 비활성화되지는 않습니다. 구성 또는 액추에이터의 보안).</target>
        </trans-unit>
        <trans-unit id="69a5b6deb5b589f822b1d77670fe9a5a9e1f5cf8" translate="yes" xml:space="preserve">
          <source>Similarly to &lt;a href=&quot;#boot-features-embedded-database-support&quot;&gt;the JDBC support&lt;/a&gt;, Spring Boot can automatically configure an embedded database for reactive usage. You need not provide any connection URLs. You need only include a build dependency to the embedded database that you want to use, as shown in the following example:</source>
          <target state="translated">&lt;a href=&quot;#boot-features-embedded-database-support&quot;&gt;JDBC 지원&lt;/a&gt; 과 유사하게 Spring Boot는 사후 사용을 위해 내장 데이터베이스를 자동으로 구성 할 수 있습니다. 연결 URL을 제공 할 필요가 없습니다. 다음 예제와 같이 사용하려는 내장 데이터베이스에 대한 빌드 종속성 만 포함하면됩니다.</target>
        </trans-unit>
        <trans-unit id="507d3f63109689a2ad4613b32f33286b69840b0f" translate="yes" xml:space="preserve">
          <source>Similarly, to create a group that excludes the database indicators from the group and includes all the other indicators, you can define the following:</source>
          <target state="translated">마찬가지로 그룹에서 데이터베이스 표시기를 제외하고 다른 모든 표시기를 포함하는 그룹을 생성하려면 다음을 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8d889f8020c7723b58cb0fae4b0b3c38cf864b97" translate="yes" xml:space="preserve">
          <source>Similarly, you can disable the &lt;code&gt;JsonSerializer&lt;/code&gt; default behavior of sending type information in headers:</source>
          <target state="translated">마찬가지로 헤더에서 유형 정보를 보내는 &lt;code&gt;JsonSerializer&lt;/code&gt; 기본 동작을 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="de72ea9e60d3b0389fb7873c1d21268b088fa6d4" translate="yes" xml:space="preserve">
          <source>Simple</source>
          <target state="translated">Simple</target>
        </trans-unit>
        <trans-unit id="5837f08a57e1bb23bc1279e2febb8924e9d2a7e2" translate="yes" xml:space="preserve">
          <source>Simple (in-memory)</source>
          <target state="translated">단순 (메모리 내)</target>
        </trans-unit>
        <trans-unit id="212b435f3ba772c3bd73d66e82d94c6a2e3abf31" translate="yes" xml:space="preserve">
          <source>Simple class name of any exception that was thrown while handling the request.</source>
          <target state="translated">요청을 처리하는 동안 발생한 모든 예외의 간단한 클래스 이름입니다.</target>
        </trans-unit>
        <trans-unit id="2405a9920cfa580db255927165330a245f7fe5b1" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;https://discuss.kotlinlang.org/t/classes-final-by-default/166&quot;&gt;Kotlin classes are final by default&lt;/a&gt;, you are likely to want to configure &lt;a href=&quot;https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support&quot;&gt;kotlin-spring&lt;/a&gt; plugin in order to automatically open Spring-annotated classes so that they can be proxied.</source>
          <target state="translated">&lt;a href=&quot;https://discuss.kotlinlang.org/t/classes-final-by-default/166&quot;&gt;Kotlin 클래스는 기본적으로 final&lt;/a&gt; 이기 때문에 Spring 주석이 달린 클래스를 자동으로 열어 프록시 할 수 있도록 &lt;a href=&quot;https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support&quot;&gt;kotlin-spring&lt;/a&gt; 플러그인 을 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="261dfea2c86b56e85100e91148812ad3953954dc" translate="yes" xml:space="preserve">
          <source>Since Endpoints may contain sensitive information, careful consideration should be given about when to expose them. The following table shows the default exposure for the built-in endpoints:</source>
          <target state="translated">엔드 포인트에는 민감한 정보가 포함될 수 있으므로 노출시기에 대해 신중하게 고려해야합니다. 다음 표는 기본 제공 엔드 포인트에 대한 기본 노출을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="6f1a40518f34371dc743d321f9c843e56511f018" translate="yes" xml:space="preserve">
          <source>Since Spring Boot applications are plain Java applications, JVM hot-swapping should work out of the box. JVM hot swapping is somewhat limited with the bytecode that it can replace. For a more complete solution, &lt;a href=&quot;https://www.jrebel.com/products/jrebel&quot;&gt;JRebel&lt;/a&gt; can be used.</source>
          <target state="translated">Spring Boot 애플리케이션은 일반 Java 애플리케이션이므로 JVM 핫스왑은 즉시 작동해야합니다. JVM 핫 스와핑은 대체 할 수있는 바이트 코드로 인해 다소 제한됩니다. 보다 완전한 솔루션을 &lt;a href=&quot;https://www.jrebel.com/products/jrebel&quot;&gt;위해 JRebel을&lt;/a&gt; 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6d24dc8ed01ca592b7eb2c5a4f4b9724f665d89b" translate="yes" xml:space="preserve">
          <source>Since Spring Boot relies on Spring Security&amp;rsquo;s defaults, CSRF protection is turned on by default. This means that the actuator endpoints that require a &lt;code&gt;POST&lt;/code&gt; (shutdown and loggers endpoints), &lt;code&gt;PUT&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt; will get a 403 forbidden error when the default security configuration is in use.</source>
          <target state="translated">Spring Boot는 Spring Security의 기본값에 의존하기 때문에 CSRF 보호는 기본적으로 켜져 있습니다. 즉 , 기본 보안 구성이 사용 중일 때 &lt;code&gt;POST&lt;/code&gt; (종료 및 로거 엔드 포인트), &lt;code&gt;PUT&lt;/code&gt; 또는 &lt;code&gt;DELETE&lt;/code&gt; 가 필요한 액추에이터 엔드 포인트가 403 금지 오류를 받게됩니다.</target>
        </trans-unit>
        <trans-unit id="797f8779337403a96b3181f3085385b099aa82c8" translate="yes" xml:space="preserve">
          <source>Since a logger name can be any arbitrary name, this provider should allow any value but could highlight valid package and class names that are not available in the project&amp;rsquo;s classpath.</source>
          <target state="translated">로거 이름은 임의의 이름이 될 수 있으므로이 공급자는 모든 값을 허용해야하지만 프로젝트의 클래스 경로에서 사용할 수없는 유효한 패키지 및 클래스 이름을 강조 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c61034fa8751aebdcc2e2e9a15e565dcac435d1" translate="yes" xml:space="preserve">
          <source>Since logging is initialized &lt;strong&gt;before&lt;/strong&gt; the &lt;code&gt;ApplicationContext&lt;/code&gt; is created, it is not possible to control logging from &lt;code&gt;@PropertySources&lt;/code&gt; in Spring &lt;code&gt;@Configuration&lt;/code&gt; files. The only way to change the logging system or disable it entirely is via System properties.</source>
          <target state="translated">로깅이 초기화되기 때문에 &lt;strong&gt;전에 &lt;/strong&gt; &lt;code&gt;ApplicationContext&lt;/code&gt; 생성됩니다,에서 로깅을 제어 할 수 없습니다 &lt;code&gt;@PropertySources&lt;/code&gt; 봄 &lt;code&gt;@Configuration&lt;/code&gt; 의 파일입니다. 로깅 시스템을 변경하거나 완전히 비활성화하는 유일한 방법은 시스템 속성을 이용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="e2692813473407ea69451b8707e1fd09e5e656e9" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;Endpoint&lt;/code&gt; is a Spring &lt;code&gt;@Component&lt;/code&gt;, its lifecycle is managed by Spring and you can use the &lt;code&gt;@Autowired&lt;/code&gt; annotation to inject dependencies and use the &lt;code&gt;@Value&lt;/code&gt; annotation to inject external configuration. By default, the Jersey servlet is registered and mapped to &lt;code&gt;/*&lt;/code&gt;. You can change the mapping by adding &lt;code&gt;@ApplicationPath&lt;/code&gt; to your &lt;code&gt;ResourceConfig&lt;/code&gt;.</source>
          <target state="translated">때문에 &lt;code&gt;Endpoint&lt;/code&gt; 스프링 인 &lt;code&gt;@Component&lt;/code&gt; , 수명주기는 Spring에 의해 관리되고, 당신은 사용할 수 있습니다 &lt;code&gt;@Autowired&lt;/code&gt; 종속성을 주입하고 사용하는 주석을 &lt;code&gt;@Value&lt;/code&gt; 외부 구성을 주입하는 주석을. 기본적으로 Jersey 서블릿은 등록되고 &lt;code&gt;/*&lt;/code&gt; 에 매핑됩니다 . &lt;code&gt;ResourceConfig&lt;/code&gt; 에 &lt;code&gt;@ApplicationPath&lt;/code&gt; 를 추가하여 매핑을 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a3ec31da2d561366f5f2a4f3d933422811aabc47" translate="yes" xml:space="preserve">
          <source>Single page HTML</source>
          <target state="translated">단일 페이지 HTML</target>
        </trans-unit>
        <trans-unit id="b03d92d23a9137d82c085959673fb319c4b646e2" translate="yes" xml:space="preserve">
          <source>Single-line version of &lt;code&gt;${project.description}&lt;/code&gt; (falling back to &lt;code&gt;${task.baseName}&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;${project.description}&lt;/code&gt; 의 한 줄 버전 ( &lt;code&gt;${task.baseName}&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="176c999f76fc79ff2b5cb075411c3a02dfd7447f" translate="yes" xml:space="preserve">
          <source>Size of each buffer. The default is derived from the maximum amount of memory that is available to the JVM.</source>
          <target state="translated">각 버퍼의 크기. 기본값은 JVM에서 사용할 수있는 최대 메모리 양에서 파생됩니다.</target>
        </trans-unit>
        <trans-unit id="4c1c16ec7358d9ac595a76b87ce7476457a6a14c" translate="yes" xml:space="preserve">
          <source>Size of the session cache (per JMS Session type).</source>
          <target state="translated">세션 캐시의 크기 (JMS 세션 유형별).</target>
        </trans-unit>
        <trans-unit id="ebf0ef7bc78740ef47d6a959709d7cb60efeb4a5" translate="yes" xml:space="preserve">
          <source>Sleep interval between Consumer.poll(Duration) calls.</source>
          <target state="translated">Consumer.poll (Duration) 호출 사이의 휴면 간격입니다.</target>
        </trans-unit>
        <trans-unit id="f9d595681bb066cff6e9cc1cf8cb08f5447e2206" translate="yes" xml:space="preserve">
          <source>Solr</source>
          <target state="translated">Solr</target>
        </trans-unit>
        <trans-unit id="965f2ba1fa789b32c611149e0b9d5ce931bd685b" translate="yes" xml:space="preserve">
          <source>Solr host. Ignored if &quot;zk-host&quot; is set.</source>
          <target state="translated">Solr 호스트. &quot;zk-host&quot;가 설정된 경우 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="a5d0ce3a241a9e6b383d778c42e609d9ecd8a3da" translate="yes" xml:space="preserve">
          <source>Some IDEs have features that save you from needing to update your trigger file manually. &lt;a href=&quot;https://spring.io/tools&quot;&gt;Spring Tools for Eclipse&lt;/a&gt; and &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA (Ultimate Edition)&lt;/a&gt; both have such support. With Spring Tools, you can use the &amp;ldquo;reload&amp;rdquo; button from the console view (as long as your &lt;code&gt;trigger-file&lt;/code&gt; is named &lt;code&gt;.reloadtrigger&lt;/code&gt;). For IntelliJ IDEA, you can follow the &lt;a href=&quot;https://www.jetbrains.com/help/idea/spring-boot.html#application-update-policies&quot;&gt;instructions in their documentation&lt;/a&gt;.</source>
          <target state="translated">일부 IDE에는 트리거 파일을 수동으로 업데이트 할 필요가없는 기능이 있습니다. &lt;a href=&quot;https://spring.io/tools&quot;&gt;Eclipse 용 Spring Tools&lt;/a&gt; 와 &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA (Ultimate Edition)&lt;/a&gt; 모두 이러한 지원을 제공합니다. Spring Tools를 사용하면 콘솔보기에서 &quot;reload&quot;버튼을 사용할 수 있습니다 ( &lt;code&gt;trigger-file&lt;/code&gt; 이름이 &lt;code&gt;.reloadtrigger&lt;/code&gt; 인 한 ). IntelliJ IDEA의 경우 &lt;a href=&quot;https://www.jetbrains.com/help/idea/spring-boot.html#application-update-policies&quot;&gt;설명서&lt;/a&gt; 의 지침을 따를 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0bc351eef6f4b42d0dc69a9adec55bbaebdfe2a6" translate="yes" xml:space="preserve">
          <source>Some cloud platforms cannot add a file extension to volume mounted files. To import these extensionless files, you need to give Spring Boot a hint so that it knows how to load them. You can do this by putting an extension hint in square brackets.</source>
          <target state="translated">일부 클라우드 플랫폼은 볼륨 마운트 파일에 파일 확장자를 추가 할 수 없습니다. 이러한 확장이없는 파일을 가져 오려면 Spring Boot가로드하는 방법을 알 수 있도록 힌트를 제공해야합니다. 확장 힌트를 대괄호 안에 넣으면됩니다.</target>
        </trans-unit>
        <trans-unit id="846696452ab17b5c3e5241e820b44f63a150fe22" translate="yes" xml:space="preserve">
          <source>Some events are actually triggered before the &lt;code&gt;ApplicationContext&lt;/code&gt; is created, so you cannot register a listener on those as a &lt;code&gt;@Bean&lt;/code&gt;. You can register them with the &lt;code&gt;SpringApplication.addListeners(&amp;hellip;​)&lt;/code&gt; method or the &lt;code&gt;SpringApplicationBuilder.listeners(&amp;hellip;​)&lt;/code&gt; method.</source>
          <target state="translated">일부 이벤트는 실제로 &lt;code&gt;ApplicationContext&lt;/code&gt; 가 생성 되기 전에 트리거 되므로 리스너를 &lt;code&gt;@Bean&lt;/code&gt; 으로 등록 할 수 없습니다 . 당신은 그들을 등록 할 수 &lt;code&gt;SpringApplication.addListeners(&amp;hellip;​)&lt;/code&gt; 방식 또는 &lt;code&gt;SpringApplicationBuilder.listeners(&amp;hellip;​)&lt;/code&gt; 방식.</target>
        </trans-unit>
        <trans-unit id="78b12be7da041139d526cf97933a5cd45ea215fc" translate="yes" xml:space="preserve">
          <source>Some people like to use (for example) &lt;code&gt;--port=9000&lt;/code&gt; instead of &lt;code&gt;--server.port=9000&lt;/code&gt; to set configuration properties on the command line. You can enable this behavior by using placeholders in &lt;code&gt;application.properties&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">어떤 사람들 은 명령 줄에서 구성 속성을 설정하기 위해 &lt;code&gt;--server.port=9000&lt;/code&gt; 대신 &lt;code&gt;--port=9000&lt;/code&gt; 을 사용하는 것을 좋아합니다 . 다음 예제와 같이 &lt;code&gt;application.properties&lt;/code&gt; 에서 자리 표시자를 사용하여이 동작을 활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c7646be8b743e594b3fa8f3c390468912c6b04f7" translate="yes" xml:space="preserve">
          <source>Some people use Project Lombok to add getters and setters automatically. Make sure that Lombok does not generate any particular constructor for such a type, as it is used automatically by the container to instantiate the object.</source>
          <target state="translated">어떤 사람들은 Project Lombok을 사용하여 getter와 setter를 자동으로 추가합니다. 컨테이너가 객체를 인스턴스화하기 위해 자동으로 사용하므로 Lombok이 이러한 유형에 대해 특정 생성자를 생성하지 않도록하십시오.</target>
        </trans-unit>
        <trans-unit id="cfd83dc12cf5442251aeab4d73f8d65c7b0dbf1c" translate="yes" xml:space="preserve">
          <source>Sometimes writing Spring MVC tests is not enough; Spring Boot can help you run &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-with-running-server&quot;&gt;full end-to-end tests with an actual server&lt;/a&gt;.</source>
          <target state="translated">때때로 Spring MVC 테스트를 작성하는 것만으로는 충분하지 않습니다. Spring Boot &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-with-running-server&quot;&gt;는 실제 서버로 전체 엔드-투-엔드 테스트&lt;/a&gt; 를 실행하는 데 도움이 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2e795d078276e1075f28f628ea2bcdfbeb08e805" translate="yes" xml:space="preserve">
          <source>Sometimes writing Spring WebFlux tests is not enough; Spring Boot can help you run &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-with-running-server&quot;&gt;full end-to-end tests with an actual server&lt;/a&gt;.</source>
          <target state="translated">때때로 Spring WebFlux 테스트를 작성하는 것만으로는 충분하지 않습니다. Spring Boot &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-with-running-server&quot;&gt;는 실제 서버로 전체 엔드-투-엔드 테스트&lt;/a&gt; 를 실행하는 데 도움이 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="85e1010889df71948d4ca21d8d995ce91b6adf08" translate="yes" xml:space="preserve">
          <source>Sometimes, classes annotated with &lt;code&gt;@ConfigurationProperties&lt;/code&gt; might not be suitable for scanning, for example, if you&amp;rsquo;re developing your own auto-configuration or you want to enable them conditionally. In these cases, specify the list of types to process using the &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; annotation. This can be done on any &lt;code&gt;@Configuration&lt;/code&gt; class, as shown in the following example:</source>
          <target state="translated">경우에 따라 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 로 주석이 추가 된 클래스 가 스캔에 적합하지 않을 수 있습니다. 예를 들어 자체 자동 구성을 개발 중이거나 조건부로 활성화하려는 경우입니다. 이 경우 &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; 어노테이션을 사용하여 처리 할 유형 목록을 지정하십시오 . 다음 예제와 같이 &lt;code&gt;@Configuration&lt;/code&gt; 클래스 에서이 작업을 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7a8895ab3497fa1dd2fb7db6a39880798e233520" translate="yes" xml:space="preserve">
          <source>Sometimes, it is useful to customize the prefix for the management endpoints. For example, your application might already use &lt;code&gt;/actuator&lt;/code&gt; for another purpose. You can use the &lt;code&gt;management.endpoints.web.base-path&lt;/code&gt; property to change the prefix for your management endpoint, as shown in the following example:</source>
          <target state="translated">때로는 관리 끝점에 대한 접두사를 사용자 지정하는 것이 유용합니다. 예를 들어 응용 프로그램에서 이미 다른 용도로 &lt;code&gt;/actuator&lt;/code&gt; 를 사용할 수 있습니다 . 다음 예제와 같이 &lt;code&gt;management.endpoints.web.base-path&lt;/code&gt; 속성을 사용하여 관리 엔드 포인트의 접두사를 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a9052c95927bd05ac4adacee405c48791778e412" translate="yes" xml:space="preserve">
          <source>Sometimes, it is useful to have properties that &lt;strong&gt;add&lt;/strong&gt; to the active profiles rather than replace them. The &lt;code&gt;SpringApplication&lt;/code&gt; entry point has a Java API for setting additional profiles (that is, on top of those activated by the &lt;code&gt;spring.profiles.active&lt;/code&gt; property). See the &lt;code&gt;setAdditionalProfiles()&lt;/code&gt; method in &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/SpringApplication.html&quot;&gt;SpringApplication&lt;/a&gt;. Profile groups, which are described in the &lt;a href=&quot;#boot-features-profiles-groups&quot;&gt;next section&lt;/a&gt; can also be used to add active profiles if a given profile is active.</source>
          <target state="translated">때로는 속성을 대체하는 대신 활성 프로필에 &lt;strong&gt;추가&lt;/strong&gt; 하는 것이 유용 합니다. &lt;code&gt;SpringApplication&lt;/code&gt; 의 진입 점 (에 의해 활성화 그 위에이며, 추가 프로파일을 설정하기위한 자바 API가 &lt;code&gt;spring.profiles.active&lt;/code&gt; 속성). 참고 항목 &lt;code&gt;setAdditionalProfiles()&lt;/code&gt; 메서드 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/SpringApplication.html&quot;&gt;SpringApplication을&lt;/a&gt; . &lt;a href=&quot;#boot-features-profiles-groups&quot;&gt;다음 섹션&lt;/a&gt; 에서 설명하는 프로필 그룹 은 지정된 프로필이 활성 상태 인 경우 활성 프로필을 추가하는데도 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e97aa8b6c37a05190a6d03373b0df54ae3a5d699" translate="yes" xml:space="preserve">
          <source>Sort parameter name.</source>
          <target state="translated">매개 변수 이름을 정렬합니다.</target>
        </trans-unit>
        <trans-unit id="8bf0b58bfa23f47623730fc44260676750b65b7d" translate="yes" xml:space="preserve">
          <source>Sources (class names, package names, or XML resource locations) to include in the ApplicationContext.</source>
          <target state="translated">ApplicationContext에 포함 할 소스 (클래스 이름, 패키지 이름 또는 XML 리소스 위치)입니다.</target>
        </trans-unit>
        <trans-unit id="cacb87665c664d040f1875cbeda167b98b08da33" translate="yes" xml:space="preserve">
          <source>SpEL Expression Conditions</source>
          <target state="translated">SpEL 표현식 조건</target>
        </trans-unit>
        <trans-unit id="92d67697ebc391ebded2ad9e3d56c60a71768167" translate="yes" xml:space="preserve">
          <source>Specific computed non-aggregable percentiles to ship to the backend for meter IDs starting-with the specified name. The longest match wins, the key `all` can also be used to configure all meters.</source>
          <target state="translated">지정된 이름으로 시작하는 미터 ID에 대해 백엔드로 전송할 특정 계산 된 집계 불가능 백분위 수입니다. 가장 긴 경기가 이기고 'all'키를 사용하여 모든 미터를 구성 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa1ece4a7f4cea303a270737e5cfc8db98adba75" translate="yes" xml:space="preserve">
          <source>Specific directory</source>
          <target state="translated">특정 디렉토리</target>
        </trans-unit>
        <trans-unit id="1fbfbc9799e03f6a6b6398b9f7f0ff24a70efb7f" translate="yes" xml:space="preserve">
          <source>Specific file</source>
          <target state="translated">특정 파일</target>
        </trans-unit>
        <trans-unit id="c5fcc82b2636792a9cdde5e36800a76004010ec8" translate="yes" xml:space="preserve">
          <source>Specific service-level objective boundaries for meter IDs starting with the specified name. The longest match wins. Counters will be published for each specified boundary. Values can be specified as a long or as a Duration value (for timer meters, defaulting to ms if no unit specified).</source>
          <target state="translated">지정된 이름으로 시작하는 미터 ID에 대한 특정 서비스 수준 목표 경계입니다. 가장 긴 경기가 승리합니다. 지정된 각 경계에 대해 카운터가 게시됩니다. 값은 long 또는 Duration 값으로 지정할 수 있습니다 (타이머 미터의 경우 단위가 지정되지 않은 경우 기본값은 ms로 설정 됨).</target>
        </trans-unit>
        <trans-unit id="3033f0071debc3988e7b61030e7c480e6c48a211" translate="yes" xml:space="preserve">
          <source>Specify start-class</source>
          <target state="translated">시작 클래스 지정</target>
        </trans-unit>
        <trans-unit id="9eb18ea0282ea9f8f5688f911ddb27e607189f7e" translate="yes" xml:space="preserve">
          <source>Specify whether known groups should be considered.</source>
          <target state="translated">알려진 그룹을 고려해야하는지 여부를 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="5ca39a01a071cdb7165a92bd8b3bca748bd7b144" translate="yes" xml:space="preserve">
          <source>Specify whether only concrete classes are to be considered as valid candidates.</source>
          <target state="translated">구체적인 클래스 만 유효한 후보로 간주할지 여부를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="bd82218e3b0d052fcdbe9dd6eaef734feb30b3fb" translate="yes" xml:space="preserve">
          <source>Specify whether sub-transactions are allowed.</source>
          <target state="translated">하위 트랜잭션 허용 여부를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="5a0ce3c96be1329aa3214b0c1cdb79d8536ea010" translate="yes" xml:space="preserve">
          <source>Specify whether the property is deprecated. If the field is not deprecated or if that information is not known, it may be omitted. The next table offers more detail about the &lt;code&gt;deprecation&lt;/code&gt; attribute.</source>
          <target state="translated">특성이 더 이상 사용되지 않는지 여부를 지정하십시오. 필드가 더 이상 사용되지 않거나 해당 정보를 알 수없는 경우 생략 할 수 있습니다. 다음 표는 &lt;code&gt;deprecation&lt;/code&gt; 속성 에 대한 자세한 정보를 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="de8d0b9c58469b37e88ab3a6d0dc8ed162f38f46" translate="yes" xml:space="preserve">
          <source>Spock test.</source>
          <target state="translated">스팍 테스트.</target>
        </trans-unit>
        <trans-unit id="ce7a9bfc63ebbd5c315fe5cd69f84af654798a7d" translate="yes" xml:space="preserve">
          <source>Spring Batch auto-configuration is enabled by adding &lt;code&gt;@EnableBatchProcessing&lt;/code&gt; to one of your &lt;code&gt;@Configuration&lt;/code&gt; classes.</source>
          <target state="translated">&lt;code&gt;@Configuration&lt;/code&gt; 클래스 중 하나에 &lt;code&gt;@EnableBatchProcessing&lt;/code&gt; 을 추가하면 Spring Batch 자동 구성이 활성화됩니다 .</target>
        </trans-unit>
        <trans-unit id="a308c2c23f2c92979c166732b89de3aa674b03ec" translate="yes" xml:space="preserve">
          <source>Spring Batch requires a data store for the &lt;code&gt;Job&lt;/code&gt; repository. If you use Spring Boot, you must use an actual database. Note that it can be an in-memory database, see &lt;a href=&quot;https://docs.spring.io/spring-batch/docs/4.3.0/reference/html/job.html#configuringJobRepository&quot;&gt;Configuring a Job Repository&lt;/a&gt;.</source>
          <target state="translated">Spring Batch에는 &lt;code&gt;Job&lt;/code&gt; 저장소에 대한 데이터 저장소가 필요 합니다. Spring Boot를 사용하는 경우 실제 데이터베이스를 사용해야합니다. 메모리 내 데이터베이스 일 수 있습니다 . &lt;a href=&quot;https://docs.spring.io/spring-batch/docs/4.3.0/reference/html/job.html#configuringJobRepository&quot;&gt;작업 저장소 구성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3ada00ce5e0a4d8c14225fb4543bae7661795058" translate="yes" xml:space="preserve">
          <source>Spring Batch.</source>
          <target state="translated">스프링 배치.</target>
        </trans-unit>
        <trans-unit id="21b1cf2431601cc743a81665e6215942b5304d29" translate="yes" xml:space="preserve">
          <source>Spring Boot</source>
          <target state="translated">봄 부팅</target>
        </trans-unit>
        <trans-unit id="62aac09b54bac655993f6bfb9f37b86dec8c3086" translate="yes" xml:space="preserve">
          <source>Spring Boot 2.4.0 requires &lt;a href=&quot;https://www.java.com&quot;&gt;Java 8&lt;/a&gt; and is compatible up to Java 15 (included). &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/&quot;&gt;Spring Framework 5.3.1&lt;/a&gt; or above is also required.</source>
          <target state="translated">Spring Boot 2.4.0은 &lt;a href=&quot;https://www.java.com&quot;&gt;Java 8이&lt;/a&gt; 필요 하며 Java 15 (포함)까지 호환됩니다. &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/&quot;&gt;Spring Framework 5.3.1&lt;/a&gt; 이상도 필요합니다.</target>
        </trans-unit>
        <trans-unit id="890b1fd4902412119f5cc8dfa073ac257a4d8a19" translate="yes" xml:space="preserve">
          <source>Spring Boot Actuator</source>
          <target state="translated">스프링 부트 액추에이터</target>
        </trans-unit>
        <trans-unit id="b6036590e06613ad1c842239e15a7bf1cae706b2" translate="yes" xml:space="preserve">
          <source>Spring Boot Actuator includes the ability to view and configure the log levels of your application at runtime. You can view either the entire list or an individual logger&amp;rsquo;s configuration, which is made up of both the explicitly configured logging level as well as the effective logging level given to it by the logging framework. These levels can be one of:</source>
          <target state="translated">Spring Boot Actuator에는 런타임에 애플리케이션의 로그 수준을보고 구성하는 기능이 포함되어 있습니다. 전체 목록 또는 개별 로거의 구성을 볼 수 있습니다.이 구성은 명시 적으로 구성된 로깅 수준과 로깅 프레임 워크에서 제공하는 유효 로깅 수준으로 구성됩니다. 이러한 수준은 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8162386924bad3bd14b7f8353ede042309d9b55e" translate="yes" xml:space="preserve">
          <source>Spring Boot Actuator manages the instrumentation of both &lt;code&gt;RestTemplate&lt;/code&gt; and &lt;code&gt;WebClient&lt;/code&gt;. For that, you have to get injected with an auto-configured builder and use it to create instances:</source>
          <target state="translated">Spring Boot Actuator는 &lt;code&gt;RestTemplate&lt;/code&gt; 과 &lt;code&gt;WebClient&lt;/code&gt; 의 계측을 관리합니다 . 이를 위해 자동 구성 빌더를 주입하고이를 사용하여 인스턴스를 만들어야합니다.</target>
        </trans-unit>
        <trans-unit id="bc3e3066fca6d6e8bd3729113ed6bd2cb4c0dd0f" translate="yes" xml:space="preserve">
          <source>Spring Boot Actuator provides dependency management and auto-configuration for &lt;a href=&quot;https://micrometer.io&quot;&gt;Micrometer&lt;/a&gt;, an application metrics facade that supports &lt;a href=&quot;https://micrometer.io/docs&quot;&gt;numerous monitoring systems&lt;/a&gt;, including:</source>
          <target state="translated">Spring Boot Actuator는 다음과 같은 &lt;a href=&quot;https://micrometer.io/docs&quot;&gt;다양한 모니터링 시스템&lt;/a&gt; 을 지원하는 애플리케이션 메트릭 파사드 인 &lt;a href=&quot;https://micrometer.io&quot;&gt;Micrometer에&lt;/a&gt; 대한 종속성 관리 및 자동 구성을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="34ea07a7108ea6e9df7fea1e5537e2cf7738baea" translate="yes" xml:space="preserve">
          <source>Spring Boot Actuator: Production-ready Features</source>
          <target state="translated">Spring Boot Actuator : 프로덕션 준비 기능</target>
        </trans-unit>
        <trans-unit id="d32adebdcad24a44c2e862ca02b8d26cb25a1674" translate="yes" xml:space="preserve">
          <source>Spring Boot CLI</source>
          <target state="translated">스프링 부트 CLI</target>
        </trans-unit>
        <trans-unit id="c1d7622aad90bac6b165345a7b49548c46e60650" translate="yes" xml:space="preserve">
          <source>Spring Boot Documentation</source>
          <target state="translated">스프링 부트 문서</target>
        </trans-unit>
        <trans-unit id="c05bee8ff0d276d8f745fb5284a72b9f03b4b30c" translate="yes" xml:space="preserve">
          <source>Spring Boot Features</source>
          <target state="translated">스프링 부트 기능</target>
        </trans-unit>
        <trans-unit id="a0f851b8a1a737a79f37c0775f8d292ac0c8d4e9" translate="yes" xml:space="preserve">
          <source>Spring Boot Loader strives to remain compatible with existing code and libraries. &lt;code&gt;org.springframework.boot.loader.jar.JarFile&lt;/code&gt; extends from &lt;code&gt;java.util.jar.JarFile&lt;/code&gt; and should work as a drop-in replacement. The &lt;code&gt;getURL()&lt;/code&gt; method returns a &lt;code&gt;URL&lt;/code&gt; that opens a connection compatible with &lt;code&gt;java.net.JarURLConnection&lt;/code&gt; and can be used with Java&amp;rsquo;s &lt;code&gt;URLClassLoader&lt;/code&gt;.</source>
          <target state="translated">Spring Boot Loader는 기존 코드 및 라이브러리와의 호환성을 유지하기 위해 노력합니다. &lt;code&gt;org.springframework.boot.loader.jar.JarFile&lt;/code&gt; 은 &lt;code&gt;java.util.jar.JarFile&lt;/code&gt; 에서 확장되며 드롭 인 대체물로 작동해야합니다. &lt;code&gt;getURL()&lt;/code&gt; 방식은 반환 &lt;code&gt;URL&lt;/code&gt; 과 호환 연결 열립니다 &lt;code&gt;java.net.JarURLConnection&lt;/code&gt; 을 하고 자바와 함께 사용할 수 있습니다 &lt;code&gt;URLClassLoader&lt;/code&gt; 의를 .</target>
        </trans-unit>
        <trans-unit id="ee5639d7f9486b6ae7561a1f598c7716bd187f6a" translate="yes" xml:space="preserve">
          <source>Spring Boot Loader-compatible jar and war archives can include additional index files under the &lt;code&gt;BOOT-INF/&lt;/code&gt; directory. A &lt;code&gt;classpath.idx&lt;/code&gt; file can be provided for both jars and wars, it provides the ordering that jars should be added to the classpath. The &lt;code&gt;layers.idx&lt;/code&gt; file can be used only for jars, it allows a jar to be split into logical layers for Docker/OCI image creation.</source>
          <target state="translated">Spring Boot Loader 호환 jar 및 war 아카이브는 &lt;code&gt;BOOT-INF/&lt;/code&gt; 디렉토리 아래에 추가 색인 파일을 포함 할 수 있습니다 . &lt;code&gt;classpath.idx&lt;/code&gt; 의 파일은 항아리가 클래스 패스에 추가해야한다는 주문을 제공, 항아리와 전쟁을 모두 제공 할 수 있습니다. &lt;code&gt;layers.idx&lt;/code&gt; 의 파일 만 병에 사용될 수 있으며, 이는 용기가 도커 / OCI 영상 생성을위한 논리 계층들로 분할 될 수있다.</target>
        </trans-unit>
        <trans-unit id="676fad54890cb76c9b02e4ced2bc0f172ae3e19b" translate="yes" xml:space="preserve">
          <source>Spring Boot Loader-compatible jar files should be structured in the following way:</source>
          <target state="translated">Spring Boot Loader 호환 jar 파일은 다음과 같은 방식으로 구성되어야합니다.</target>
        </trans-unit>
        <trans-unit id="46db9c920f811ab191db12051264f1cefe95a7fc" translate="yes" xml:space="preserve">
          <source>Spring Boot Loader-compatible war files should be structured in the following way:</source>
          <target state="translated">Spring Boot Loader 호환 war 파일은 다음과 같은 방식으로 구성되어야합니다.</target>
        </trans-unit>
        <trans-unit id="f33123b735dfb27de58e90d24cbbdc95cc386001" translate="yes" xml:space="preserve">
          <source>Spring Boot Reference Documentation</source>
          <target state="translated">Spring Boot 참조 문서</target>
        </trans-unit>
        <trans-unit id="0adaa7c510ffb42da9c94b0347119f409492860e" translate="yes" xml:space="preserve">
          <source>Spring Boot allows exposing RSocket over WebSocket from a WebFlux server, or standing up an independent RSocket server. This depends on the type of application and its configuration.</source>
          <target state="translated">Spring Boot를 사용하면 WebFlux 서버에서 WebSocket을 통해 RSocket을 노출하거나 독립적 인 RSocket 서버를 설정할 수 있습니다. 이것은 응용 프로그램 유형 및 구성에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="2802e2f41b20637c3c77dd166a9f99a4ce2147d9" translate="yes" xml:space="preserve">
          <source>Spring Boot allows you to split a single physical file into multiple logical documents which are each added independently. Documents are processed in order, from top to bottom. Later documents can override the properties defined in earlier ones.</source>
          <target state="translated">Spring Boot를 사용하면 단일 물리적 파일을 각각 독립적으로 추가되는 여러 논리적 문서로 분할 할 수 있습니다. 문서는 위에서 아래로 순서대로 처리됩니다. 이후 문서는 이전 문서에 정의 된 속성을 재정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d66e7df02e88f7b5768453597a57396c17ec17f" translate="yes" xml:space="preserve">
          <source>Spring Boot also &lt;a href=&quot;#production-ready-metrics-meter&quot;&gt;configures built-in instrumentation&lt;/a&gt; that you can control via configuration or dedicated annotation markers.</source>
          <target state="translated">Spring Boot는 또한 &lt;a href=&quot;#production-ready-metrics-meter&quot;&gt;구성&lt;/a&gt; 또는 전용 주석 마커를 통해 제어 할 수 있는 내장 계측 을 구성합니다.</target>
        </trans-unit>
        <trans-unit id="59bf4850c3ae11415d959266a2b1b7747718ce0c" translate="yes" xml:space="preserve">
          <source>Spring Boot also configures some features that are triggered by the presence of additional Spring Integration modules. If &lt;code&gt;spring-integration-jmx&lt;/code&gt; is also on the classpath, message processing statistics are published over JMX. If &lt;code&gt;spring-integration-jdbc&lt;/code&gt; is available, the default database schema can be created on startup, as shown in the following line:</source>
          <target state="translated">Spring Boot는 추가 Spring Integration 모듈의 존재에 의해 트리거되는 일부 기능도 구성합니다. &lt;code&gt;spring-integration-jmx&lt;/code&gt; 도 클래스 경로에 있으면 메시지 처리 통계가 JMX를 통해 게시됩니다. 경우 &lt;code&gt;spring-integration-jdbc&lt;/code&gt; 사용할 수있는 다음과 같은 라인에서와 같이, 기본 데이터베이스 스키마는 시작시 생성 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="0f3f726ffa14d3603b3e46dfaa3e0916c25c4ef6" translate="yes" xml:space="preserve">
          <source>Spring Boot also has &lt;a href=&quot;#boot-features-caching-provider-hazelcast&quot;&gt;explicit caching support for Hazelcast&lt;/a&gt;. If caching is enabled, the &lt;code&gt;HazelcastInstance&lt;/code&gt; is automatically wrapped in a &lt;code&gt;CacheManager&lt;/code&gt; implementation.</source>
          <target state="translated">Spring Boot에는 &lt;a href=&quot;#boot-features-caching-provider-hazelcast&quot;&gt;Hazelcast에 대한 명시적인 캐싱 지원&lt;/a&gt; 도 있습니다 . 캐싱이 활성화 된 경우 &lt;code&gt;HazelcastInstance&lt;/code&gt; 가 &lt;code&gt;CacheManager&lt;/code&gt; 구현 에 자동으로 래핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="711c9e49cf000acd7e0a534c96e32e2baf27fb39" translate="yes" xml:space="preserve">
          <source>Spring Boot also has some features to make it easier to customize this behavior.</source>
          <target state="translated">Spring Boot에는이 동작을보다 쉽게 ​​사용자 정의 할 수있는 몇 가지 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="bed3daf091556f14f351dd11bd75a87282350103" translate="yes" xml:space="preserve">
          <source>Spring Boot also manages the version of Coroutines dependencies by importing the Kotlin Coroutines BOM. The version can be customized via the &lt;code&gt;kotlin-coroutines.version&lt;/code&gt; property.</source>
          <target state="translated">Spring Boot는 또한 Kotlin Coroutines BOM을 가져 와서 Coroutines 종속성 버전을 관리합니다. 버전은 &lt;code&gt;kotlin-coroutines.version&lt;/code&gt; 속성을 통해 사용자 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c3ff8c17a26591aa2e2599ccbe5d16b099d08d3d" translate="yes" xml:space="preserve">
          <source>Spring Boot also provides &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jackson/JsonObjectSerializer.java&quot;&gt;&lt;code&gt;JsonObjectSerializer&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jackson/JsonObjectDeserializer.java&quot;&gt;&lt;code&gt;JsonObjectDeserializer&lt;/code&gt;&lt;/a&gt; base classes that provide useful alternatives to the standard Jackson versions when serializing objects. See &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/jackson/JsonObjectSerializer.html&quot;&gt;&lt;code&gt;JsonObjectSerializer&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/jackson/JsonObjectDeserializer.html&quot;&gt;&lt;code&gt;JsonObjectDeserializer&lt;/code&gt;&lt;/a&gt; in the Javadoc for details.</source>
          <target state="translated">Spring Boot는 또한 객체를 직렬화 할 때 표준 Jackson 버전에 대한 유용한 대안을 제공 하는 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jackson/JsonObjectSerializer.java&quot;&gt; &lt;code&gt;JsonObjectSerializer&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jackson/JsonObjectDeserializer.java&quot;&gt; &lt;code&gt;JsonObjectDeserializer&lt;/code&gt; &lt;/a&gt; 기본 클래스를 제공합니다. 자세한 내용 은 Javadoc의 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/jackson/JsonObjectSerializer.html&quot;&gt; &lt;code&gt;JsonObjectSerializer&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/jackson/JsonObjectDeserializer.html&quot;&gt; &lt;code&gt;JsonObjectDeserializer&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="31ec779db711dd7b992d0b03edde79affb145655" translate="yes" xml:space="preserve">
          <source>Spring Boot also provides a utility builder class, called &lt;code&gt;DataSourceBuilder&lt;/code&gt;, that can be used to create one of the standard data sources (if it is on the classpath). The builder can detect the one to use based on what&amp;rsquo;s available on the classpath. It also auto-detects the driver based on the JDBC URL.</source>
          <target state="translated">Spring Boot는 또한 표준 데이터 소스 중 하나를 만드는 데 사용할 수있는 &lt;code&gt;DataSourceBuilder&lt;/code&gt; 라는 유틸리티 빌더 클래스를 제공 합니다 (클래스 경로에있는 경우). 빌더는 클래스 경로에서 사용 가능한 것을 기반으로 사용할 것을 감지 할 수 있습니다. 또한 JDBC URL을 기반으로 드라이버를 자동 감지합니다.</target>
        </trans-unit>
        <trans-unit id="a796392e2438c4c5257044177ae2e8debf4484e6" translate="yes" xml:space="preserve">
          <source>Spring Boot also provides some nice ANSI color terminal output on a console (but not in a log file) by using a custom Logback converter. See the &lt;code&gt;CONSOLE_LOG_PATTERN&lt;/code&gt; in the &lt;code&gt;defaults.xml&lt;/code&gt; configuration for an example.</source>
          <target state="translated">Spring Boot는 또한 사용자 정의 Logback 변환기를 사용하여 콘솔 (로그 파일이 아님)에 멋진 ANSI 색상 터미널 출력을 제공합니다. 예제 는 &lt;code&gt;defaults.xml&lt;/code&gt; 구성 의 &lt;code&gt;CONSOLE_LOG_PATTERN&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7e57564ddd848844791cde0593ddc0c5ce0454e6" translate="yes" xml:space="preserve">
          <source>Spring Boot also registers a &lt;code&gt;CommandLinePropertySource&lt;/code&gt; with the Spring &lt;code&gt;Environment&lt;/code&gt;. This lets you also inject single application arguments by using the &lt;code&gt;@Value&lt;/code&gt; annotation.</source>
          <target state="translated">Spring Boot는 또한 Spring &lt;code&gt;Environment&lt;/code&gt; 에 &lt;code&gt;CommandLinePropertySource&lt;/code&gt; 를 등록합니다 . 이렇게하면 &lt;code&gt;@Value&lt;/code&gt; 주석 을 사용하여 단일 애플리케이션 인수를 삽입 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1a55fd4e252cd4c5917bbe18991863f5717af002" translate="yes" xml:space="preserve">
          <source>Spring Boot also supports the advanced resource handling features provided by Spring MVC, allowing use cases such as cache-busting static resources or using version agnostic URLs for Webjars.</source>
          <target state="translated">Spring Boot는 또한 Spring MVC에서 제공하는 고급 리소스 처리 기능을 지원하여 캐시 버스 팅 정적 리소스 또는 Webjars에 대한 버전에 구애받지 않는 URL 사용과 같은 사용 사례를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="d6135506bf1a90d00f936bf9ce1389bb7b1c9a9c" translate="yes" xml:space="preserve">
          <source>Spring Boot application can be easily started as Unix/Linux services by using either &lt;code&gt;init.d&lt;/code&gt; or &lt;code&gt;systemd&lt;/code&gt;.</source>
          <target state="translated">Spring Boot 애플리케이션은 &lt;code&gt;init.d&lt;/code&gt; 또는 &lt;code&gt;systemd&lt;/code&gt; 를 사용하여 Unix / Linux 서비스로 쉽게 시작할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b5d361ba9aba72c0f0f9e18726cb9a86413f9bd6" translate="yes" xml:space="preserve">
          <source>Spring Boot applications can be containerized either by &lt;a href=&quot;#boot-features-container-images-docker&quot;&gt;packaging them into Docker images&lt;/a&gt;, or by &lt;a href=&quot;#boot-features-container-images-buildpacks&quot;&gt;using Buildpacks to create Docker compatible container images that you can run anywhere&lt;/a&gt;.</source>
          <target state="translated">Spring Boot 애플리케이션은 &lt;a href=&quot;#boot-features-container-images-docker&quot;&gt;Docker 이미지로 패키징&lt;/a&gt; 하거나 &lt;a href=&quot;#boot-features-container-images-buildpacks&quot;&gt;빌드 팩을 사용하여 어디서나 실행할 수있는 Docker 호환 컨테이너 이미지를 생성하여 컨테이너화 할 수 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="30b77dd58c5cffc3ddb10cfa49dc4ff707b60c50" translate="yes" xml:space="preserve">
          <source>Spring Boot attempts to coerce the external application properties to the right type when it binds to the &lt;code&gt;@ConfigurationProperties&lt;/code&gt; beans. If you need custom type conversion, you can provide a &lt;code&gt;ConversionService&lt;/code&gt; bean (with a bean named &lt;code&gt;conversionService&lt;/code&gt;) or custom property editors (through a &lt;code&gt;CustomEditorConfigurer&lt;/code&gt; bean) or custom &lt;code&gt;Converters&lt;/code&gt; (with bean definitions annotated as &lt;code&gt;@ConfigurationPropertiesBinding&lt;/code&gt;).</source>
          <target state="translated">Spring Boot는 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 빈에 바인딩 할 때 외부 애플리케이션 속성을 올바른 유형으로 강제 설정하려고합니다 . 사용자 정의 유형 변환이 필요한 경우 &lt;code&gt;ConversionService&lt;/code&gt; Bean ( &lt;code&gt;conversionService&lt;/code&gt; 라는 이름의 Bean 포함 ) 또는 사용자 정의 특성 편집기 ( &lt;code&gt;CustomEditorConfigurer&lt;/code&gt; Bean을 통해 ) 또는 사용자 정의 &lt;code&gt;Converters&lt;/code&gt; ( &lt;code&gt;@ConfigurationPropertiesBinding&lt;/code&gt; 로 주석이 달린 Bean 정의 포함 )를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="739563a79386135ccddf88972881348dbf433778" translate="yes" xml:space="preserve">
          <source>Spring Boot attempts to validate &lt;code&gt;@ConfigurationProperties&lt;/code&gt; classes whenever they are annotated with Spring&amp;rsquo;s &lt;code&gt;@Validated&lt;/code&gt; annotation. You can use JSR-303 &lt;code&gt;javax.validation&lt;/code&gt; constraint annotations directly on your configuration class. To do so, ensure that a compliant JSR-303 implementation is on your classpath and then add constraint annotations to your fields, as shown in the following example:</source>
          <target state="translated">Spring Boot는 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 클래스가 Spring의 &lt;code&gt;@Validated&lt;/code&gt; 주석으로 주석 이 달릴 때마다 유효성 검사를 시도합니다 . 구성 클래스에서 직접 JSR-303 &lt;code&gt;javax.validation&lt;/code&gt; 제약 주석을 사용할 수 있습니다 . 이렇게하려면 준수 JSR-303 구현이 클래스 경로에 있는지 확인한 후 다음 예제와 같이 제약 조건 주석을 필드에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="66c822ea66e557496747909020f637a51d307f74" translate="yes" xml:space="preserve">
          <source>Spring Boot auto-configuration attempts to automatically configure your Spring application based on the jar dependencies that you have added. For example, if &lt;code&gt;HSQLDB&lt;/code&gt; is on your classpath, and you have not manually configured any database connection beans, then Spring Boot auto-configures an in-memory database.</source>
          <target state="translated">Spring Boot 자동 구성은 추가 한 jar 종속성을 기반으로 Spring 애플리케이션을 자동으로 구성하려고합니다. 예를 들어 &lt;code&gt;HSQLDB&lt;/code&gt; 가 클래스 경로에 있고 데이터베이스 연결 빈을 수동으로 구성하지 않은 경우 Spring Boot는 메모리 내 데이터베이스를 자동 구성합니다.</target>
        </trans-unit>
        <trans-unit id="708011ed3c9eed655d9bd995534813188379c31a" translate="yes" xml:space="preserve">
          <source>Spring Boot auto-configures a composite &lt;code&gt;MeterRegistry&lt;/code&gt; and adds a registry to the composite for each of the supported implementations that it finds on the classpath. Having a dependency on &lt;code&gt;micrometer-registry-{system}&lt;/code&gt; in your runtime classpath is enough for Spring Boot to configure the registry.</source>
          <target state="translated">Spring Boot는 복합 &lt;code&gt;MeterRegistry&lt;/code&gt; 를 자동 구성 하고 클래스 경로에서 찾은 지원되는 각 구현에 대한 레지스트리를 복합에 추가합니다. 런타임 클래스 경로에서 &lt;code&gt;micrometer-registry-{system}&lt;/code&gt; 에 대한 종속성 이 있으면 Spring Boot가 레지스트리를 구성하기에 충분합니다.</target>
        </trans-unit>
        <trans-unit id="5493ebe4488a30028498fac0327336a49720f0dd" translate="yes" xml:space="preserve">
          <source>Spring Boot auto-configures an &lt;code&gt;InfluxDB&lt;/code&gt; instance, provided the &lt;code&gt;influxdb-java&lt;/code&gt; client is on the classpath and the URL of the database is set, as shown in the following example:</source>
          <target state="translated">다음 예제와 같이 &lt;code&gt;influxdb-java&lt;/code&gt; 클라이언트가 클래스 경로에 있고 데이터베이스의 URL이 설정된 경우 Spring Boot는 &lt;code&gt;InfluxDB&lt;/code&gt; 인스턴스를 자동 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="655d8bb7952ae2e9dc630aba9809f1c47b8c092d" translate="yes" xml:space="preserve">
          <source>Spring Boot auto-configures an &lt;code&gt;RSocketStrategies&lt;/code&gt; bean that provides all the required infrastructure for encoding and decoding RSocket payloads. By default, the auto-configuration will try to configure the following (in order):</source>
          <target state="translated">Spring Boot 는 RSocket 페이로드 인코딩 및 디코딩에 필요한 모든 인프라를 제공 하는 &lt;code&gt;RSocketStrategies&lt;/code&gt; 빈을 자동 구성합니다 . 기본적으로 자동 구성은 다음 구성을 시도합니다 (순서대로).</target>
        </trans-unit>
        <trans-unit id="2ad576fd8d64d0e1f075c4e0b4bf75a1acb23b6e" translate="yes" xml:space="preserve">
          <source>Spring Boot auto-detects Kubernetes deployment environments by checking the environment for &lt;code&gt;&quot;*_SERVICE_HOST&quot;&lt;/code&gt; and &lt;code&gt;&quot;*_SERVICE_PORT&quot;&lt;/code&gt; variables. You can override this detection with the &lt;code&gt;spring.main.cloud-platform&lt;/code&gt; configuration property.</source>
          <target state="translated">Spring Boot는 &lt;code&gt;&quot;*_SERVICE_HOST&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;*_SERVICE_PORT&quot;&lt;/code&gt; 변수에 대한 환경을 확인하여 Kubernetes 배포 환경을 자동 감지 합니다. &lt;code&gt;spring.main.cloud-platform&lt;/code&gt; 구성 속성 으로이 감지를 재정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="33c931a880157821d382559ed0ab92ea5f623862" translate="yes" xml:space="preserve">
          <source>Spring Boot binds external properties from &lt;code&gt;application.properties&lt;/code&gt; (or &lt;code&gt;.yml&lt;/code&gt; files and other places) into an application at runtime. There is not (and technically cannot be) an exhaustive list of all supported properties in a single location, because contributions can come from additional jar files on your classpath.</source>
          <target state="translated">Spring Boot 는 런타임에 &lt;code&gt;application.properties&lt;/code&gt; (또는 &lt;code&gt;.yml&lt;/code&gt; 파일 및 기타 위치)의 외부 속성을 애플리케이션에 바인딩 합니다. 기여는 클래스 경로의 추가 jar 파일에서 올 수 있기 때문에 단일 위치에 지원되는 모든 속성의 전체 목록은 없습니다 (기술적으로있을 수 없음).</target>
        </trans-unit>
        <trans-unit id="273b4c38fe189de9e688c95938ead413ab972e33" translate="yes" xml:space="preserve">
          <source>Spring Boot calls &lt;code&gt;Flyway.migrate()&lt;/code&gt; to perform the database migration. If you would like more control, provide a &lt;code&gt;@Bean&lt;/code&gt; that implements &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayMigrationStrategy.java&quot;&gt;&lt;code&gt;FlywayMigrationStrategy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Spring Boot는 &lt;code&gt;Flyway.migrate()&lt;/code&gt; 를 호출 하여 데이터베이스 마이그레이션을 수행합니다. 더 많은 제어를 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayMigrationStrategy.java&quot;&gt; &lt;code&gt;FlywayMigrationStrategy&lt;/code&gt; &lt;/a&gt; 를 구현 하는 &lt;code&gt;@Bean&lt;/code&gt; 을 제공하십시오 .</target>
        </trans-unit>
        <trans-unit id="b1196beda59514420cdf08062dda448af306e3b6" translate="yes" xml:space="preserve">
          <source>Spring Boot can also auto-configure an &lt;code&gt;ClientRSocketConnector&lt;/code&gt; using configuration properties:</source>
          <target state="translated">Spring Boot는 구성 속성을 사용하여 &lt;code&gt;ClientRSocketConnector&lt;/code&gt; 를 자동 구성 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c80f6ee277e0e55c3ae1cd49a6613859687bcb6" translate="yes" xml:space="preserve">
          <source>Spring Boot can auto-configure a &lt;code&gt;ConnectionFactory&lt;/code&gt; when it detects that &lt;a href=&quot;https://activemq.apache.org/components/artemis/&quot;&gt;Artemis&lt;/a&gt; is available on the classpath. If the broker is present, an embedded broker is automatically started and configured (unless the mode property has been explicitly set). The supported modes are &lt;code&gt;embedded&lt;/code&gt; (to make explicit that an embedded broker is required and that an error should occur if the broker is not available on the classpath) and &lt;code&gt;native&lt;/code&gt; (to connect to a broker using the &lt;code&gt;netty&lt;/code&gt; transport protocol). When the latter is configured, Spring Boot configures a &lt;code&gt;ConnectionFactory&lt;/code&gt; that connects to a broker running on the local machine with the default settings.</source>
          <target state="translated">Spring Boot는 &lt;a href=&quot;https://activemq.apache.org/components/artemis/&quot;&gt;Artemis&lt;/a&gt; 가 클래스 경로에서 사용 가능함을 감지하면 &lt;code&gt;ConnectionFactory&lt;/code&gt; 를 자동 구성 할 수 있습니다 . 브로커가 있으면 포함 된 브로커가 자동으로 시작되고 구성됩니다 (모드 등록 정보가 명시 적으로 설정되지 않은 경우). 지원되는 모드는 &lt;code&gt;embedded&lt;/code&gt; (포함 된 브로커가 필요하며 브로커가 클래스 경로에서 사용할 수없는 경우 오류가 발생해야 함을 명시하기 위해) 및 &lt;code&gt;native&lt;/code&gt; ( &lt;code&gt;netty&lt;/code&gt; 전송 프로토콜을 사용하여 브로커에 연결하기 위해 )입니다. 후자가 구성되면 Spring Boot 는 기본 설정으로 로컬 머신에서 실행중인 브로커에 연결 하는 &lt;code&gt;ConnectionFactory&lt;/code&gt; 를 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="f67bf256b2909058ac36a29c2d202237d613dca2" translate="yes" xml:space="preserve">
          <source>Spring Boot can auto-configure embedded &lt;a href=&quot;https://www.h2database.com&quot;&gt;H2&lt;/a&gt;, &lt;a href=&quot;http://hsqldb.org/&quot;&gt;HSQL&lt;/a&gt;, and &lt;a href=&quot;https://db.apache.org/derby/&quot;&gt;Derby&lt;/a&gt; databases. You need not provide any connection URLs. You need only include a build dependency to the embedded database that you want to use.</source>
          <target state="translated">Spring Boot는 임베디드 &lt;a href=&quot;https://www.h2database.com&quot;&gt;H2&lt;/a&gt; , &lt;a href=&quot;http://hsqldb.org/&quot;&gt;HSQL&lt;/a&gt; 및 &lt;a href=&quot;https://db.apache.org/derby/&quot;&gt;Derby&lt;/a&gt; 데이터베이스를 자동 구성 할 수 있습니다 . 연결 URL을 제공 할 필요가 없습니다. 사용하려는 임베디드 데이터베이스에 대한 빌드 종속성 만 포함하면됩니다.</target>
        </trans-unit>
        <trans-unit id="51bead0e8b98e1654fe4d674c0fa8950f6b15d7f" translate="yes" xml:space="preserve">
          <source>Spring Boot can automatically create the schema (DDL scripts) of your &lt;code&gt;DataSource&lt;/code&gt; and initialize it (DML scripts). It loads SQL from the standard root classpath locations: &lt;code&gt;schema.sql&lt;/code&gt; and &lt;code&gt;data.sql&lt;/code&gt;, respectively. In addition, Spring Boot processes the &lt;code&gt;schema-${platform}.sql&lt;/code&gt; and &lt;code&gt;data-${platform}.sql&lt;/code&gt; files (if present), where &lt;code&gt;platform&lt;/code&gt; is the value of &lt;code&gt;spring.datasource.platform&lt;/code&gt;. This allows you to switch to database-specific scripts if necessary. For example, you might choose to set it to the vendor name of the database (&lt;code&gt;hsqldb&lt;/code&gt;, &lt;code&gt;h2&lt;/code&gt;, &lt;code&gt;oracle&lt;/code&gt;, &lt;code&gt;mysql&lt;/code&gt;, &lt;code&gt;postgresql&lt;/code&gt;, and so on).</source>
          <target state="translated">Spring Boot는 &lt;code&gt;DataSource&lt;/code&gt; 의 스키마 (DDL 스크립트)를 자동으로 생성 하고 초기화 (DML 스크립트) 할 수 있습니다. 표준 루트 클래스 경로 위치 인 &lt;code&gt;schema.sql&lt;/code&gt; 및 &lt;code&gt;data.sql&lt;/code&gt; 에서 각각 SQL을로드합니다 . 또한 Spring Boot 는 &lt;code&gt;spring.datasource.platform&lt;/code&gt; &lt;code&gt;schema-${platform}.sql&lt;/code&gt; 및 data- &lt;code&gt;data-${platform}.sql&lt;/code&gt; 파일 (있는 경우)을 처리합니다. 여기서 &lt;code&gt;platform&lt;/code&gt; 은 spring.datasource.platform 의 값입니다 . 이를 통해 필요한 경우 데이터베이스 별 스크립트로 전환 할 수 있습니다. 예를 들어 데이터베이스의 공급 업체 이름 ( &lt;code&gt;hsqldb&lt;/code&gt; , &lt;code&gt;h2&lt;/code&gt; , &lt;code&gt;oracle&lt;/code&gt; , &lt;code&gt;mysql&lt;/code&gt; , &lt;code&gt;postgresql&lt;/code&gt; 등).</target>
        </trans-unit>
        <trans-unit id="817e6acf0752a19ad9918e1760bf9e1eb8096c3f" translate="yes" xml:space="preserve">
          <source>Spring Boot can be used with &amp;ldquo;classic&amp;rdquo; Java development tools or installed as a command line tool. Either way, you need &lt;a href=&quot;https://www.java.com&quot;&gt;Java SDK v1.8&lt;/a&gt; or higher. Before you begin, you should check your current Java installation by using the following command:</source>
          <target state="translated">Spring Boot는 &quot;클래식&quot;Java 개발 도구와 함께 사용하거나 명령 줄 도구로 설치할 수 있습니다. 어느 쪽이든 &lt;a href=&quot;https://www.java.com&quot;&gt;Java SDK v1.8&lt;/a&gt; 이상 이 필요합니다 . 시작하기 전에 다음 명령을 사용하여 현재 Java 설치를 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="020df61b3eb6188a1a8a56cad1e8456dd217b31c" translate="yes" xml:space="preserve">
          <source>Spring Boot can deduce the JDBC driver class for most databases from the URL. If you need to specify a specific class, you can use the &lt;code&gt;spring.datasource.driver-class-name&lt;/code&gt; property.</source>
          <target state="translated">Spring Boot는 URL에서 대부분의 데이터베이스에 대한 JDBC 드라이버 클래스를 추론 할 수 있습니다. 특정 클래스를 지정해야하는 경우 &lt;code&gt;spring.datasource.driver-class-name&lt;/code&gt; 속성을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a7c7e4c98f472644c3df9405baff0fe2f0cc07f4" translate="yes" xml:space="preserve">
          <source>Spring Boot can only auto-configure dialects supported by the open source version of jOOQ.</source>
          <target state="translated">Spring Boot는 jOOQ의 오픈 소스 버전에서 지원하는 언어 만 자동 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c3e2718ae1495619058d3283e266280e0474b19e" translate="yes" xml:space="preserve">
          <source>Spring Boot checks for the presence of a &lt;code&gt;META-INF/spring.factories&lt;/code&gt; file within your published jar. The file should list your configuration classes under the &lt;code&gt;EnableAutoConfiguration&lt;/code&gt; key, as shown in the following example:</source>
          <target state="translated">Spring Boot는 게시 된 jar 내에 &lt;code&gt;META-INF/spring.factories&lt;/code&gt; 파일이 있는지 확인합니다 . 파일은 다음 예제와 같이 &lt;code&gt;EnableAutoConfiguration&lt;/code&gt; 키 아래에 구성 클래스를 나열해야합니다 .</target>
        </trans-unit>
        <trans-unit id="4f462fcca5aeb571e761b733ac3df0670684c8d3" translate="yes" xml:space="preserve">
          <source>Spring Boot chooses to disable suffix pattern matching by default, which means that requests like &lt;code&gt;&quot;GET /projects/spring-boot.json&quot;&lt;/code&gt; won&amp;rsquo;t be matched to &lt;code&gt;@GetMapping(&quot;/projects/spring-boot&quot;)&lt;/code&gt; mappings. This is considered as a &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc-ann-requestmapping-suffix-pattern-match&quot;&gt;best practice for Spring MVC applications&lt;/a&gt;. This feature was mainly useful in the past for HTTP clients which did not send proper &quot;Accept&quot; request headers; we needed to make sure to send the correct Content Type to the client. Nowadays, Content Negotiation is much more reliable.</source>
          <target state="translated">Spring Boot는 기본적으로 접미사 패턴 일치를 사용하지 않도록 선택합니다. 이는 &lt;code&gt;&quot;GET /projects/spring-boot.json&quot;&lt;/code&gt; 과 같은 요청 이 &lt;code&gt;@GetMapping(&quot;/projects/spring-boot&quot;)&lt;/code&gt; 매핑 과 일치하지 않음을 의미 합니다. 이것은 &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc-ann-requestmapping-suffix-pattern-match&quot;&gt;Spring MVC 애플리케이션에 대한 모범 사례&lt;/a&gt; 로 간주됩니다 . 이 기능은 과거에 적절한 &quot;Accept&quot;요청 헤더를 보내지 않은 HTTP 클라이언트에 주로 유용했습니다. 우리는 클라이언트에게 올바른 콘텐츠 유형을 전송해야했습니다. 요즘에는 콘텐츠 협상이 훨씬 더 안정적입니다.</target>
        </trans-unit>
        <trans-unit id="8f63e074cdc03eeb1fe3bc975fa5fbab43e3bb63" translate="yes" xml:space="preserve">
          <source>Spring Boot converts any command line argument starting with &lt;code&gt;--&lt;/code&gt; to a property to add to the &lt;code&gt;Environment&lt;/code&gt;, see &lt;a href=&quot;spring-boot-features#boot-features-external-config-command-line-args&quot;&gt;accessing command line properties&lt;/a&gt;. This should not be used to pass arguments to batch jobs. To specify batch arguments on the command line, use the regular format (i.e. without &lt;code&gt;--&lt;/code&gt;), as shown in the following example:</source>
          <target state="translated">Spring Boot는 &lt;code&gt;--&lt;/code&gt; 로 시작하는 모든 명령 줄 인수 를 &lt;code&gt;Environment&lt;/code&gt; 에 추가 할 속성으로 변환합니다 . &lt;a href=&quot;spring-boot-features#boot-features-external-config-command-line-args&quot;&gt;명령 줄 속성 액세스를&lt;/a&gt; 참조하십시오 . 배치 작업에 인수를 전달하는 데 사용해서는 안됩니다. 명령 줄에서 배치 인수를 지정하려면 다음 예와 같이 일반 형식 (즉 , &lt;code&gt;--&lt;/code&gt; 제외)을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="0c3a049d2630a544806d4a601070e8392daed5f1" translate="yes" xml:space="preserve">
          <source>Spring Boot creates and pre-configures a &lt;code&gt;WebClient.Builder&lt;/code&gt; for you; it is strongly advised to inject it in your components and use it to create &lt;code&gt;WebClient&lt;/code&gt; instances. Spring Boot is configuring that builder to share HTTP resources, reflect codecs setup in the same fashion as the server ones (see &lt;a href=&quot;#boot-features-webflux-httpcodecs&quot;&gt;WebFlux HTTP codecs auto-configuration&lt;/a&gt;), and more.</source>
          <target state="translated">Spring Boot는 &lt;code&gt;WebClient.Builder&lt;/code&gt; 를 생성하고 사전 구성 합니다. 이를 구성 요소에 삽입하고이를 사용하여 &lt;code&gt;WebClient&lt;/code&gt; 인스턴스 를 만드는 것이 좋습니다 . Spring Boot는 HTTP 리소스를 공유하고 서버와 동일한 방식으로 코덱 설정을 반영하도록 빌더를 구성합니다 ( &lt;a href=&quot;#boot-features-webflux-httpcodecs&quot;&gt;WebFlux HTTP 코덱 자동 구성&lt;/a&gt; 참조).</target>
        </trans-unit>
        <trans-unit id="f9762c441bd8d35bbc79e4756459d576930e9b0f" translate="yes" xml:space="preserve">
          <source>Spring Boot dependencies can be declared by using the &lt;code&gt;org.springframework.boot&lt;/code&gt;&lt;code&gt;group&lt;/code&gt;. Typically, your project declares dependencies to one or more &lt;a href=&quot;using-spring-boot#using-boot-starter&quot;&gt;&amp;ldquo;Starters&amp;rdquo;&lt;/a&gt;. Spring Boot provides a useful &lt;a href=&quot;build-tool-plugins#build-tool-plugins-gradle-plugin&quot;&gt;Gradle plugin&lt;/a&gt; that can be used to simplify dependency declarations and to create executable jars.</source>
          <target state="translated">Spring Boot 종속성은 &lt;code&gt;org.springframework.boot&lt;/code&gt; &lt;code&gt;group&lt;/code&gt; 을 사용하여 선언 할 수 있습니다 . 일반적으로 프로젝트는 하나 이상의 &lt;a href=&quot;using-spring-boot#using-boot-starter&quot;&gt;'스타터'에&lt;/a&gt; 대한 종속성을 선언합니다 . Spring Boot는 종속성 선언을 단순화하고 실행 가능한 jar를 만드는 데 사용할 수 있는 유용한 &lt;a href=&quot;build-tool-plugins#build-tool-plugins-gradle-plugin&quot;&gt;Gradle 플러그인&lt;/a&gt; 을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="6b4b642bdd45e4cbe17b79b0a9dddaad7c9068ee" translate="yes" xml:space="preserve">
          <source>Spring Boot dependencies use the &lt;code&gt;org.springframework.boot&lt;/code&gt;&lt;code&gt;groupId&lt;/code&gt;. Typically, your Maven POM file inherits from the &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; project and declares dependencies to one or more &lt;a href=&quot;using-spring-boot#using-boot-starter&quot;&gt;&amp;ldquo;Starters&amp;rdquo;&lt;/a&gt;. Spring Boot also provides an optional &lt;a href=&quot;build-tool-plugins#build-tool-plugins-maven-plugin&quot;&gt;Maven plugin&lt;/a&gt; to create executable jars.</source>
          <target state="translated">Spring Boot 종속성은 &lt;code&gt;org.springframework.boot&lt;/code&gt; &lt;code&gt;groupId&lt;/code&gt; 를 사용합니다 . 일반적으로 Maven POM 파일은 &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; 프로젝트 에서 상속되며 하나 이상의 &lt;a href=&quot;using-spring-boot#using-boot-starter&quot;&gt;&quot;스타터&quot;에&lt;/a&gt; 대한 종속성을 선언합니다 . Spring Boot는 실행 가능한 jar를 생성하기 위한 선택적 &lt;a href=&quot;build-tool-plugins#build-tool-plugins-maven-plugin&quot;&gt;Maven 플러그인&lt;/a&gt; 도 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="009f420d0313c2641112d7ba4e101006092800a2" translate="yes" xml:space="preserve">
          <source>Spring Boot does not advise using &lt;code&gt;h2c&lt;/code&gt;, the cleartext version of the HTTP/2 protocol. As a result, the following sections require you to &lt;a href=&quot;#howto-configure-ssl&quot;&gt;configure SSL first&lt;/a&gt;. If you still choose to use &lt;code&gt;h2c&lt;/code&gt;, you can check &lt;a href=&quot;#howto-configure-http2-h2c&quot;&gt;the dedicated section&lt;/a&gt;.</source>
          <target state="translated">Spring Boot는 HTTP / 2 프로토콜의 일반 텍스트 버전 인 &lt;code&gt;h2c&lt;/code&gt; 사용을 권장하지 않습니다 . 따라서 다음 섹션에서는 &lt;a href=&quot;#howto-configure-ssl&quot;&gt;먼저 SSL&lt;/a&gt; 을 구성 해야합니다 . 여전히 &lt;code&gt;h2c&lt;/code&gt; 를 사용하기로 선택한 경우 &lt;a href=&quot;#howto-configure-http2-h2c&quot;&gt;전용 섹션을&lt;/a&gt; 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="db8cfa59c4a385ba6a072d7dd6a282a4e299b0b0" translate="yes" xml:space="preserve">
          <source>Spring Boot does not look for such a file and rather provides a number of configuration properties via the &lt;code&gt;spring.data.cassandra.*&lt;/code&gt; namespace. For more advanced driver customizations, you can register an arbitrary number of beans that implement &lt;code&gt;DriverConfigLoaderBuilderCustomizer&lt;/code&gt;. The &lt;code&gt;CqlSession&lt;/code&gt; can be customized with a bean of type &lt;code&gt;CqlSessionBuilderCustomizer&lt;/code&gt;.</source>
          <target state="translated">Spring Boot는 이러한 파일을 찾지 않고 &lt;code&gt;spring.data.cassandra.*&lt;/code&gt; 네임 스페이스 를 통해 여러 구성 속성을 제공 합니다. 고급 드라이버 사용자 정의를 위해 &lt;code&gt;DriverConfigLoaderBuilderCustomizer&lt;/code&gt; 를 구현하는 임의의 수의 Bean을 등록 할 수 있습니다 . &lt;code&gt;CqlSession&lt;/code&gt; 는 유형의 빈과 사용자 정의 할 수 있습니다 &lt;code&gt;CqlSessionBuilderCustomizer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7d7c3c718cd9caae280c8877290384ba8a002055" translate="yes" xml:space="preserve">
          <source>Spring Boot does not provide any built in support for encrypting property values, however, it does provide the hook points necessary to modify values contained in the Spring &lt;code&gt;Environment&lt;/code&gt;. The &lt;code&gt;EnvironmentPostProcessor&lt;/code&gt; interface allows you to manipulate the &lt;code&gt;Environment&lt;/code&gt; before the application starts. See &lt;a href=&quot;howto#howto-customize-the-environment-or-application-context&quot;&gt;howto.html&lt;/a&gt; for details.</source>
          <target state="translated">Spring Boot는 속성 값 암호화에 대한 내장 지원을 제공하지 않지만 Spring &lt;code&gt;Environment&lt;/code&gt; 에 포함 된 값을 수정하는 데 필요한 후크 포인트를 제공합니다 . &lt;code&gt;EnvironmentPostProcessor&lt;/code&gt; 의 인터페이스는 사용자가 조작 할 수있는 &lt;code&gt;Environment&lt;/code&gt; 응용 프로그램이 시작하기 전에. 자세한 내용은 &lt;a href=&quot;howto#howto-customize-the-environment-or-application-context&quot;&gt;howto.html&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="31547145c260dde592519cb67fc760306e1dab33" translate="yes" xml:space="preserve">
          <source>Spring Boot does not require any specific code layout to work. However, there are some best practices that help.</source>
          <target state="translated">Spring Boot는 작동하기 위해 특정 코드 레이아웃이 필요하지 않습니다. 그러나 도움이되는 몇 가지 모범 사례가 있습니다.</target>
        </trans-unit>
        <trans-unit id="222c3a5f4e5f1970831e27040c78209a9126dc30" translate="yes" xml:space="preserve">
          <source>Spring Boot embraces the Servlet 3 &lt;code&gt;javax.servlet.http.Part&lt;/code&gt; API to support uploading files. By default, Spring Boot configures Spring MVC with a maximum size of 1MB per file and a maximum of 10MB of file data in a single request. You may override these values, the location to which intermediate data is stored (for example, to the &lt;code&gt;/tmp&lt;/code&gt; directory), and the threshold past which data is flushed to disk by using the properties exposed in the &lt;code&gt;MultipartProperties&lt;/code&gt; class. For example, if you want to specify that files be unlimited, set the &lt;code&gt;spring.servlet.multipart.max-file-size&lt;/code&gt; property to &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">Spring Boot는 Servlet 3 &lt;code&gt;javax.servlet.http.Part&lt;/code&gt; API를 사용하여 파일 업로드를 지원합니다. 기본적으로 Spring Boot는 단일 요청에서 파일 당 최대 크기가 1MB이고 파일 데이터가 최대 10MB 인 Spring MVC를 구성합니다. 이러한 값, 중간 데이터가 저장되는 위치 (예 : &lt;code&gt;/tmp&lt;/code&gt; 디렉터리) 및 &lt;code&gt;MultipartProperties&lt;/code&gt; 클래스에 노출 된 속성을 사용하여 데이터가 디스크로 플러시되는 임계 값을 재정의 할 수 있습니다 . 예를 들어, 파일을 무제한으로 지정하려면 &lt;code&gt;spring.servlet.multipart.max-file-size&lt;/code&gt; 속성을 &lt;code&gt;-1&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="1e85d2c294f32cf7ede2fbb37d2b6fa50a6c5544" translate="yes" xml:space="preserve">
          <source>Spring Boot exposes a set of useful properties (from the &lt;code&gt;spring.data.rest&lt;/code&gt; namespace) that customize the &lt;a href=&quot;https://docs.spring.io/spring-data/rest/docs/3.4.1/api/org/springframework/data/rest/core/config/RepositoryRestConfiguration.html&quot;&gt;&lt;code&gt;RepositoryRestConfiguration&lt;/code&gt;&lt;/a&gt;. If you need to provide additional customization, you should use a &lt;a href=&quot;https://docs.spring.io/spring-data/rest/docs/3.4.1/api/org/springframework/data/rest/webmvc/config/RepositoryRestConfigurer.html&quot;&gt;&lt;code&gt;RepositoryRestConfigurer&lt;/code&gt;&lt;/a&gt; bean.</source>
          <target state="translated">Spring Boot는 &lt;a href=&quot;https://docs.spring.io/spring-data/rest/docs/3.4.1/api/org/springframework/data/rest/core/config/RepositoryRestConfiguration.html&quot;&gt; &lt;code&gt;RepositoryRestConfiguration&lt;/code&gt; &lt;/a&gt; 을 사용자 정의하는 유용한 속성 집합 ( &lt;code&gt;spring.data.rest&lt;/code&gt; 네임 스페이스에서)을 노출합니다 . 추가 사용자 정의를 제공해야하는 경우 &lt;a href=&quot;https://docs.spring.io/spring-data/rest/docs/3.4.1/api/org/springframework/data/rest/webmvc/config/RepositoryRestConfigurer.html&quot;&gt; &lt;code&gt;RepositoryRestConfigurer&lt;/code&gt; &lt;/a&gt; Bean을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="1a6a9a6fea7d355530098b1a568c87ba7a7dc9f1" translate="yes" xml:space="preserve">
          <source>Spring Boot extends Groovy&amp;rsquo;s standard &lt;code&gt;@Grab&lt;/code&gt; support by letting you specify a dependency without a group or version (for example, &lt;code&gt;@Grab('freemarker')&lt;/code&gt;). Doing so consults Spring Boot&amp;rsquo;s default dependency metadata to deduce the artifact&amp;rsquo;s group and version.</source>
          <target state="translated">Spring Boot 는 그룹이나 버전없이 종속성을 지정할 수 있도록함으로써 Groovy의 표준 &lt;code&gt;@Grab&lt;/code&gt; 지원을 확장합니다 (예 : &lt;code&gt;@Grab('freemarker')&lt;/code&gt; ). 그렇게하면 Spring Boot의 기본 종속성 메타 데이터를 참조하여 아티팩트의 그룹과 버전을 추론합니다.</target>
        </trans-unit>
        <trans-unit id="0fce53b74c061a163802303415d8d3c33dc6d48d" translate="yes" xml:space="preserve">
          <source>Spring Boot extends this technique further and tries to deduce which libraries to &amp;ldquo;grab&amp;rdquo; based on your code. For example, since the &lt;code&gt;WebApplication&lt;/code&gt; code shown previously uses &lt;code&gt;@RestController&lt;/code&gt; annotations, Spring Boot grabs &quot;Tomcat&quot; and &quot;Spring MVC&quot;.</source>
          <target state="translated">Spring Boot는이 기술을 더욱 확장하고 코드를 기반으로 &quot;잡을&quot;라이브러리를 추론합니다. 예를 들어 이전에 표시된 &lt;code&gt;WebApplication&lt;/code&gt; 코드는 &lt;code&gt;@RestController&lt;/code&gt; 주석을 사용 하므로 Spring Boot는 &quot;Tomcat&quot;및 &quot;Spring MVC&quot;를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="7297bd67b8538c5875543ace293fcbde69cd1588" translate="yes" xml:space="preserve">
          <source>Spring Boot favors Java-based configuration. Although it is possible to use &lt;code&gt;SpringApplication&lt;/code&gt; with XML sources, we generally recommend that your primary source be a single &lt;code&gt;@Configuration&lt;/code&gt; class. Usually the class that defines the &lt;code&gt;main&lt;/code&gt; method is a good candidate as the primary &lt;code&gt;@Configuration&lt;/code&gt;.</source>
          <target state="translated">Spring Boot는 Java 기반 구성을 선호합니다. XML 소스와 함께 &lt;code&gt;SpringApplication&lt;/code&gt; 을 사용할 수 있지만 일반적으로 기본 소스가 단일 &lt;code&gt;@Configuration&lt;/code&gt; 클래스 인 것이 좋습니다 . 일반적으로 &lt;code&gt;main&lt;/code&gt; 메서드 를 정의하는 클래스 는 기본 &lt;code&gt;@Configuration&lt;/code&gt; 으로 좋은 후보 입니다.</target>
        </trans-unit>
        <trans-unit id="0899cdb71858be925a9e03b6f34f9ef1484a5b33" translate="yes" xml:space="preserve">
          <source>Spring Boot first attempts to create a client by checking the following configuration options:</source>
          <target state="translated">Spring Boot는 먼저 다음 구성 옵션을 확인하여 클라이언트 생성을 시도합니다.</target>
        </trans-unit>
        <trans-unit id="e71d07bca5ef31c08b75e2eda1e78f7512fca3dc" translate="yes" xml:space="preserve">
          <source>Spring Boot has &lt;a href=&quot;#boot-features-hazelcast&quot;&gt;general support for Hazelcast&lt;/a&gt;. If a &lt;code&gt;HazelcastInstance&lt;/code&gt; has been auto-configured, it is automatically wrapped in a &lt;code&gt;CacheManager&lt;/code&gt;.</source>
          <target state="translated">Spring Boot는 &lt;a href=&quot;#boot-features-hazelcast&quot;&gt;Hazelcast에 대한 일반적인 지원을 제공합니다&lt;/a&gt; . 경우 &lt;code&gt;HazelcastInstance&lt;/code&gt; 가 자동으로 구성되어, 그것은 자동에 싸여 &lt;code&gt;CacheManager&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="04d64217ea75308c976d3670e968f9ea70654fe6" translate="yes" xml:space="preserve">
          <source>Spring Boot has &lt;a href=&quot;#boot-features-hazelcast&quot;&gt;general support for Hazelcast&lt;/a&gt;. If a single &lt;code&gt;HazelcastInstance&lt;/code&gt; is available, it is automatically reused for the &lt;code&gt;CacheManager&lt;/code&gt; as well, unless the &lt;code&gt;spring.cache.jcache.config&lt;/code&gt; property is specified.</source>
          <target state="translated">Spring Boot는 &lt;a href=&quot;#boot-features-hazelcast&quot;&gt;Hazelcast에 대한 일반적인 지원을 제공합니다&lt;/a&gt; . 단일 &lt;code&gt;HazelcastInstance&lt;/code&gt; 를 사용할 수 있는 경우 &lt;code&gt;spring.cache.jcache.config&lt;/code&gt; 속성이 지정 되지 않는 한 &lt;code&gt;CacheManager&lt;/code&gt; 에도 자동으로 재사용 됩니다.</target>
        </trans-unit>
        <trans-unit id="05943f0ed84dad0198244394e9dc6a2a064fea9f" translate="yes" xml:space="preserve">
          <source>Spring Boot has a &lt;code&gt;LoggingSystem&lt;/code&gt; abstraction that attempts to configure logging based on the content of the classpath. If Logback is available, it is the first choice.</source>
          <target state="translated">Spring Boot에는 클래스 경로의 내용을 기반으로 로깅을 구성하려고 시도 하는 &lt;code&gt;LoggingSystem&lt;/code&gt; 추상화가 있습니다. Logback을 사용할 수있는 경우 첫 번째 선택입니다.</target>
        </trans-unit>
        <trans-unit id="0ad20e9749912a22c4a171bc6f28682aff5a95ea" translate="yes" xml:space="preserve">
          <source>Spring Boot has a number of starters that include Spring MVC. Note that some starters include a dependency on Spring MVC rather than include it directly. This section answers common questions about Spring MVC and Spring Boot.</source>
          <target state="translated">Spring Boot에는 Spring MVC를 포함하는 많은 스타터가 있습니다. 일부 스타터는 직접 포함하는 것이 아니라 Spring MVC에 대한 종속성을 포함합니다. 이 섹션에서는 Spring MVC 및 Spring Boot에 대한 일반적인 질문에 대답합니다.</target>
        </trans-unit>
        <trans-unit id="4c4013f2431951def72b238b1577122d5d1f910e" translate="yes" xml:space="preserve">
          <source>Spring Boot has dedicated support for expressing durations. If you expose a &lt;code&gt;java.time.Duration&lt;/code&gt; property, the following formats in application properties are available:</source>
          <target state="translated">Spring Boot는 기간 표현에 대한 전담 지원을 제공합니다. &lt;code&gt;java.time.Duration&lt;/code&gt; 속성 을 노출하는 경우 응용 프로그램 속성에서 다음 형식을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="88f7c566b76796d3ca6f70045e12d3353614db4b" translate="yes" xml:space="preserve">
          <source>Spring Boot has no mandatory logging dependency, except for the Commons Logging API, which is typically provided by Spring Framework&amp;rsquo;s &lt;code&gt;spring-jcl&lt;/code&gt; module. To use &lt;a href=&quot;https://logback.qos.ch&quot;&gt;Logback&lt;/a&gt;, you need to include it and &lt;code&gt;spring-jcl&lt;/code&gt; on the classpath. The recommended way to do that is through the starters, which all depend on &lt;code&gt;spring-boot-starter-logging&lt;/code&gt;. For a web application, you need only &lt;code&gt;spring-boot-starter-web&lt;/code&gt;, since it depends transitively on the logging starter. If you use Maven, the following dependency adds logging for you:</source>
          <target state="translated">Spring Boot에는 일반적으로 Spring Framework의 &lt;code&gt;spring-jcl&lt;/code&gt; 모듈 에서 제공하는 Commons Logging API를 제외하고는 필수 로깅 종속성이 없습니다 . &lt;a href=&quot;https://logback.qos.ch&quot;&gt;Logback&lt;/a&gt; 을 사용하려면 클래스 경로에 이를 포함하고 &lt;code&gt;spring-jcl&lt;/code&gt; 을 포함해야합니다 . 권장되는 방법은 모두 &lt;code&gt;spring-boot-starter-logging&lt;/code&gt; 에 의존하는 스타터를 이용하는 것 입니다. 웹 애플리케이션의 경우 로깅 스타터에 전 이적으로 의존하므로 &lt;code&gt;spring-boot-starter-web&lt;/code&gt; 만 필요합니다 . Maven을 사용하는 경우 다음 종속성이 로깅을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="eae7753c13bc43e3c037820e8df610af47915d0c" translate="yes" xml:space="preserve">
          <source>Spring Boot health indicators return a &lt;code&gt;Status&lt;/code&gt; type to indicate the overall system health. If you want to monitor or alert on levels of health for a particular application, you can export these statuses as metrics via Micrometer. By default, the status codes &amp;ldquo;UP&amp;rdquo;, &amp;ldquo;DOWN&amp;rdquo;, &amp;ldquo;OUT_OF_SERVICE&amp;rdquo; and &amp;ldquo;UNKNOWN&amp;rdquo; are used by Spring Boot. To export these, you&amp;rsquo;ll need to convert these states to some set of numbers so that they can be used with a Micrometer &lt;code&gt;Gauge&lt;/code&gt;.</source>
          <target state="translated">Spring Boot 상태 표시기 는 전체 시스템 상태를 나타내는 &lt;code&gt;Status&lt;/code&gt; 유형을 반환합니다 . 특정 애플리케이션의 상태 수준을 모니터링하거나 경고하려는 경우 이러한 상태를 Micrometer를 통해 메트릭으로 내보낼 수 있습니다. 기본적으로 상태 코드 &quot;UP&quot;, &quot;DOWN&quot;, &quot;OUT_OF_SERVICE&quot;및 &quot;UNKNOWN&quot;은 Spring Boot에서 사용됩니다. 이를 내보내려면 Micrometer &lt;code&gt;Gauge&lt;/code&gt; 와 함께 사용할 수 있도록 이러한 상태를 일부 숫자 집합으로 변환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="37ba99b67a598f9bec42429fe14b119ac1ca49fc" translate="yes" xml:space="preserve">
          <source>Spring Boot helps you to &lt;a href=&quot;spring-boot-features#boot-features-application-availability&quot;&gt;manage the state of your application&lt;/a&gt; and export it with &lt;a href=&quot;production-ready-features#production-ready-kubernetes-probes&quot;&gt;HTTP Kubernetes Probes using Actuator&lt;/a&gt;.</source>
          <target state="translated">Spring Boot는 &lt;a href=&quot;production-ready-features#production-ready-kubernetes-probes&quot;&gt;Actuator를 사용하여 &lt;/a&gt;&lt;a href=&quot;spring-boot-features#boot-features-application-availability&quot;&gt;애플리케이션 상태&lt;/a&gt; 를 관리하고 HTTP Kubernetes Probes로 내보낼 수 있도록 도와줍니다 .</target>
        </trans-unit>
        <trans-unit id="084975d252bc2e221276f259171c0531ba11048b" translate="yes" xml:space="preserve">
          <source>Spring Boot helps you to create stand-alone, production-grade Spring-based Applications that you can run. We take an opinionated view of the Spring platform and third-party libraries, so that you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.</source>
          <target state="translated">Spring Boot는 실행할 수있는 독립 실행 형, 프로덕션 등급 Spring 기반 애플리케이션을 만드는 데 도움이됩니다. 우리는 최소한의 소란으로 시작할 수 있도록 Spring 플랫폼과 써드 파티 라이브러리에 대한 견해를 가지고 있습니다. 대부분의 Spring Boot 애플리케이션에는 Spring 구성이 거의 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d6773b320321d700692115f36ed832008db274a4" translate="yes" xml:space="preserve">
          <source>Spring Boot includes AssertJ-based helpers that work with the JSONAssert and JsonPath libraries to check that JSON appears as expected. The &lt;code&gt;JacksonTester&lt;/code&gt;, &lt;code&gt;GsonTester&lt;/code&gt;, &lt;code&gt;JsonbTester&lt;/code&gt;, and &lt;code&gt;BasicJsonTester&lt;/code&gt; classes can be used for Jackson, Gson, Jsonb, and Strings respectively. Any helper fields on the test class can be &lt;code&gt;@Autowired&lt;/code&gt; when using &lt;code&gt;@JsonTest&lt;/code&gt;. The following example shows a test class for Jackson:</source>
          <target state="translated">Spring Boot에는 JSONAssert 및 JsonPath 라이브러리와 함께 작동하여 JSON이 예상대로 나타나는지 확인하는 AssertJ 기반 도우미가 포함되어 있습니다. &lt;code&gt;JacksonTester&lt;/code&gt; , &lt;code&gt;GsonTester&lt;/code&gt; , &lt;code&gt;JsonbTester&lt;/code&gt; 및 &lt;code&gt;BasicJsonTester&lt;/code&gt; 의 클래스는 각각 잭슨, GSON, Jsonb, 및 문자열에 사용할 수 있습니다. &lt;code&gt;@JsonTest&lt;/code&gt; 를 사용할 때 테스트 클래스의 모든 도우미 필드는 &lt;code&gt;@Autowired&lt;/code&gt; 가 될 수 있습니다 . 다음 예제는 Jackson의 테스트 클래스를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="28ebd372dc648065dcdb6b20ded615c486a727a0" translate="yes" xml:space="preserve">
          <source>Spring Boot includes a &lt;code&gt;@MockBean&lt;/code&gt; annotation that can be used to define a Mockito mock for a bean inside your &lt;code&gt;ApplicationContext&lt;/code&gt;. You can use the annotation to add new beans or replace a single existing bean definition. The annotation can be used directly on test classes, on fields within your test, or on &lt;code&gt;@Configuration&lt;/code&gt; classes and fields. When used on a field, the instance of the created mock is also injected. Mock beans are automatically reset after each test method.</source>
          <target state="translated">Spring Boot에는 &lt;code&gt;ApplicationContext&lt;/code&gt; 내부의 빈에 대한 Mockito 모의를 정의하는 데 사용할 수 있는 &lt;code&gt;@MockBean&lt;/code&gt; 주석이 포함되어 있습니다 . 주석을 사용하여 새 Bean을 추가하거나 단일 기존 Bean 정의를 바꿀 수 있습니다. 주석은 테스트 클래스, 테스트 내의 필드 또는 &lt;code&gt;@Configuration&lt;/code&gt; 클래스 및 필드 에서 직접 사용할 수 있습니다 . 필드에서 사용하면 생성 된 모의 인스턴스도 삽입됩니다. 모의 빈은 각 테스트 방법 후에 자동으로 재설정됩니다.</target>
        </trans-unit>
        <trans-unit id="304a283f2dea86d040395f30db4c482c5cc0ebf1" translate="yes" xml:space="preserve">
          <source>Spring Boot includes a number of &lt;code&gt;@Conditional&lt;/code&gt; annotations that you can reuse in your own code by annotating &lt;code&gt;@Configuration&lt;/code&gt; classes or individual &lt;code&gt;@Bean&lt;/code&gt; methods. These annotations include:</source>
          <target state="translated">Spring Boot에는 &lt;code&gt;@Configuration&lt;/code&gt; 클래스 또는 개별 &lt;code&gt;@Bean&lt;/code&gt; 메서드 에 주석을 추가하여 자신의 코드에서 재사용 할 수 있는 여러 &lt;code&gt;@Conditional&lt;/code&gt; 주석이 포함되어 있습니다 . 이러한 주석에는 다음이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="07cce29e20e00ad8144d83955a3f1c69da027d2c" translate="yes" xml:space="preserve">
          <source>Spring Boot includes a number of additional features to help you monitor and manage your application when you push it to production. You can choose to manage and monitor your application by using HTTP endpoints or with JMX. Auditing, health, and metrics gathering can also be automatically applied to your application.</source>
          <target state="translated">Spring Boot에는 애플리케이션을 프로덕션으로 푸시 할 때 애플리케이션을 모니터링하고 관리하는 데 도움이되는 여러 추가 기능이 포함되어 있습니다. HTTP 엔드 포인트 또는 JMX를 사용하여 애플리케이션을 관리하고 모니터링하도록 선택할 수 있습니다. 감사, 상태 및 메트릭 수집도 애플리케이션에 자동으로 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e4099e83c1f7394f5571d9493e0c7b0d4beec348" translate="yes" xml:space="preserve">
          <source>Spring Boot includes a number of extensions to Logback that can help with advanced configuration. You can use these extensions in your &lt;code&gt;logback-spring.xml&lt;/code&gt; configuration file.</source>
          <target state="translated">Spring Boot에는 고급 구성에 도움이 될 수있는 Logback에 대한 여러 확장이 포함되어 있습니다. &lt;code&gt;logback-spring.xml&lt;/code&gt; 구성 파일 에서 이러한 확장을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9d58eaa550053c1e6ba7fde60f18764089756de7" translate="yes" xml:space="preserve">
          <source>Spring Boot includes a number of starters for working with data sources. This section answers questions related to doing so.</source>
          <target state="translated">Spring Boot에는 데이터 소스 작업을위한 여러 스타터가 포함되어 있습니다. 이 섹션에서는 이와 관련된 질문에 답합니다.</target>
        </trans-unit>
        <trans-unit id="65144c3151d8039dd6cccd53ee11296603f4823c" translate="yes" xml:space="preserve">
          <source>Spring Boot includes an additional set of tools that can make the application development experience a little more pleasant. The &lt;code&gt;spring-boot-devtools&lt;/code&gt; module can be included in any project to provide additional development-time features. To include devtools support, add the module dependency to your build, as shown in the following listings for Maven and Gradle:</source>
          <target state="translated">Spring Boot에는 애플리케이션 개발 경험을 좀 더 즐겁게 만들 수있는 추가 도구 세트가 포함되어 있습니다. &lt;code&gt;spring-boot-devtools&lt;/code&gt; 모듈을 추가 개발 시간 기능을 제공하기 위해 모든 프로젝트에 포함 할 수 있습니다. devtools 지원을 포함하려면 Maven 및 Gradle에 대한 다음 목록에 표시된대로 빌드에 모듈 종속성을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="1933db059a331520305f48875e67d251e2ccf0bb" translate="yes" xml:space="preserve">
          <source>Spring Boot includes auto-configuration support for the following templating engines:</source>
          <target state="translated">Spring Boot에는 다음 템플릿 엔진에 대한 자동 구성 지원이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="a03227ba8cd362233a31ddf7ceba56c08043dc2a" translate="yes" xml:space="preserve">
          <source>Spring Boot includes build plugins for Maven and Gradle. This section answers common questions about these plugins.</source>
          <target state="translated">Spring Boot에는 Maven 및 Gradle 용 빌드 플러그인이 포함되어 있습니다. 이 섹션에서는 이러한 플러그인에 대한 일반적인 질문에 대한 답변을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="07c1042deba07a2c95618c3cdc821f27c969ce45" translate="yes" xml:space="preserve">
          <source>Spring Boot includes command-line completion scripts for the BASH and zsh shells. If you do not use either of these shells (perhaps you are a Windows user), you can use the &lt;code&gt;shell&lt;/code&gt; command to launch an integrated shell, as shown in the following example:</source>
          <target state="translated">Spring Boot에는 BASH 및 zsh 셸을위한 명령 줄 완성 스크립트가 포함되어 있습니다. 이러한 셸 중 하나를 사용하지 않는 경우 (Windows 사용자 일 수 있음) 다음 예제와 같이 &lt;code&gt;shell&lt;/code&gt; 명령을 사용하여 통합 셸을 시작할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b2157324c0ff49319eaf79606e119b7e996999c7" translate="yes" xml:space="preserve">
          <source>Spring Boot includes pluggable API that allows various different location addresses to be supported. By default you can import Java Properties, YAML and &amp;ldquo;&lt;a href=&quot;#boot-features-external-config-files-configtree&quot;&gt;configuration trees&lt;/a&gt;&amp;rdquo;.</source>
          <target state="translated">Spring Boot에는 다양한 위치 주소를 지원할 수있는 플러그 형 API가 포함되어 있습니다. 기본적으로 Java 속성, YAML 및&amp;ldquo; &lt;a href=&quot;#boot-features-external-config-files-configtree&quot;&gt;구성 트리&lt;/a&gt; &amp;rdquo;를 가져올 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1ee8598de7c009c14fba5cb1780b2615ae4ab336" translate="yes" xml:space="preserve">
          <source>Spring Boot includes support for embedded &lt;a href=&quot;https://tomcat.apache.org/&quot;&gt;Tomcat&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/jetty/&quot;&gt;Jetty&lt;/a&gt;, and &lt;a href=&quot;https://github.com/undertow-io/undertow&quot;&gt;Undertow&lt;/a&gt; servers. Most developers use the appropriate &amp;ldquo;Starter&amp;rdquo; to obtain a fully configured instance. By default, the embedded server listens for HTTP requests on port &lt;code&gt;8080&lt;/code&gt;.</source>
          <target state="translated">Spring Boot에는 임베디드 &lt;a href=&quot;https://tomcat.apache.org/&quot;&gt;Tomcat&lt;/a&gt; , &lt;a href=&quot;https://www.eclipse.org/jetty/&quot;&gt;Jetty&lt;/a&gt; 및 &lt;a href=&quot;https://github.com/undertow-io/undertow&quot;&gt;Undertow&lt;/a&gt; 서버에 대한 지원이 포함 됩니다. 대부분의 개발자는 적절한 &quot;스타터&quot;를 사용하여 완전히 구성된 인스턴스를 얻습니다. 기본적으로 내장 서버는 포트 &lt;code&gt;8080&lt;/code&gt; 에서 HTTP 요청을 수신합니다 .</target>
        </trans-unit>
        <trans-unit id="1d18b3ee5ee629ee2e611863eb61c9e0544931b3" translate="yes" xml:space="preserve">
          <source>Spring Boot includes support for the following embedded reactive web servers: Reactor Netty, Tomcat, Jetty, and Undertow. Most developers use the appropriate &amp;ldquo;Starter&amp;rdquo; to obtain a fully configured instance. By default, the embedded server listens for HTTP requests on port 8080.</source>
          <target state="translated">Spring Boot는 Reactor Netty, Tomcat, Jetty 및 Undertow와 같은 임베디드 반응 웹 서버에 대한 지원을 포함합니다. 대부분의 개발자는 적절한 &quot;스타터&quot;를 사용하여 완전히 구성된 인스턴스를 얻습니다. 기본적으로 내장 서버는 포트 8080에서 HTTP 요청을 수신합니다.</target>
        </trans-unit>
        <trans-unit id="bf20bd65ce119b54fd9a5171aa21c3b51fd8c0f2" translate="yes" xml:space="preserve">
          <source>Spring Boot includes the Spring Boot Actuator. This section answers questions that often arise from its use.</source>
          <target state="translated">Spring Boot에는 Spring Boot Actuator가 포함되어 있습니다. 이 섹션에서는 자주 사용하는 질문에 답합니다.</target>
        </trans-unit>
        <trans-unit id="957a202cfe996cd7cecb1c94a86db2c9f4b33327" translate="yes" xml:space="preserve">
          <source>Spring Boot includes the following pre-defined logging groups that can be used out-of-the-box:</source>
          <target state="translated">Spring Boot에는 즉시 사용할 수있는 다음과 같은 사전 정의 된 로깅 그룹이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b72755ed27ea7d94c7d5b77c850ffb9781a1810" translate="yes" xml:space="preserve">
          <source>Spring Boot installs a &amp;lsquo;whitelabel&amp;rsquo; error page that you see in a browser client if you encounter a server error (machine clients consuming JSON and other media types should see a sensible response with the right error code).</source>
          <target state="translated">Spring Boot는 서버 오류가 발생하면 브라우저 클라이언트에 표시되는 'whitelabel'오류 페이지를 설치합니다 (JSON 및 기타 미디어 유형을 사용하는 머신 클라이언트는 올바른 오류 코드와 함께 합리적인 응답을 확인해야 함).</target>
        </trans-unit>
        <trans-unit id="e41f56a78d9685ce4f677923b597322dc1e39b0e" translate="yes" xml:space="preserve">
          <source>Spring Boot is compatible with Apache Maven 3.3 or above. If you do not already have Maven installed, you can follow the instructions at &lt;a href=&quot;https://maven.apache.org&quot;&gt;maven.apache.org&lt;/a&gt;.</source>
          <target state="translated">Spring Boot는 Apache Maven 3.3 이상과 호환됩니다. Maven을 아직 설치하지 않은 경우 &lt;a href=&quot;https://maven.apache.org&quot;&gt;maven.apache.org&lt;/a&gt; 의 지침을 따를 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="62bd3427987df9515b7dda6c7ebbc1a5ab4a1f58" translate="yes" xml:space="preserve">
          <source>Spring Boot is compatible with Gradle 6 (6.3 or later). Gradle 5.6.x is also supported but this support is deprecated and will be removed in a future release. If you do not already have Gradle installed, you can follow the instructions at &lt;a href=&quot;https://gradle.org&quot;&gt;gradle.org&lt;/a&gt;.</source>
          <target state="translated">Spring Boot는 Gradle 6 (6.3 이상)과 호환됩니다. Gradle 5.6.x도 지원되지만이 지원은 더 이상 사용되지 않으며 향후 릴리스에서 제거됩니다. 아직 Gradle이 설치되어 있지 않은 경우 &lt;a href=&quot;https://gradle.org&quot;&gt;gradle.org&lt;/a&gt; 의 지침을 따를 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1c2a57fc6d936c2261256a9b01a06d00da8c76da" translate="yes" xml:space="preserve">
          <source>Spring Boot is well suited for web application development. You can create a self-contained HTTP server by using embedded Tomcat, Jetty, Undertow, or Netty. Most web applications use the &lt;code&gt;spring-boot-starter-web&lt;/code&gt; module to get up and running quickly. You can also choose to build reactive web applications by using the &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt; module.</source>
          <target state="translated">Spring Boot는 웹 애플리케이션 개발에 적합합니다. 내장 된 Tomcat, Jetty, Undertow 또는 Netty를 사용하여 자체 포함 된 HTTP 서버를 만들 수 있습니다. 대부분의 웹 애플리케이션은 빠르게 시작하고 실행하기 위해 &lt;code&gt;spring-boot-starter-web&lt;/code&gt; 모듈을 사용합니다 . &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt; 모듈 을 사용하여 반응 형 웹 애플리케이션을 빌드하도록 선택할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8004ef4e0de3c98c067348aa4d2c99032e9d98c6" translate="yes" xml:space="preserve">
          <source>Spring Boot jars include metadata files that provide details of all supported configuration properties. The files are designed to let IDE developers offer contextual help and &amp;ldquo;code completion&amp;rdquo; as users are working with &lt;code&gt;application.properties&lt;/code&gt; or &lt;code&gt;application.yml&lt;/code&gt; files.</source>
          <target state="translated">Spring Boot jar에는 지원되는 모든 구성 속성의 세부 정보를 제공하는 메타 데이터 파일이 포함됩니다. 이 파일은 IDE 개발자가 사용자가 &lt;code&gt;application.properties&lt;/code&gt; 또는 &lt;code&gt;application.yml&lt;/code&gt; 파일 로 작업 할 때 상황 별 도움말 및 &quot;코드 완성&quot;을 제공 할 수 있도록 설계되었습니다 .</target>
        </trans-unit>
        <trans-unit id="526772cf88e4e4d1a806faf42cccd16ea5ee9453" translate="yes" xml:space="preserve">
          <source>Spring Boot lets you externalize your configuration so that you can work with the same application code in different environments. You can use a variety of external configuration sources, include Java properties files, YAML files, environment variables, and command-line arguments.</source>
          <target state="translated">Spring Boot를 사용하면 구성을 외부화하여 서로 다른 환경에서 동일한 애플리케이션 코드로 작업 할 수 있습니다. Java 속성 파일, YAML 파일, 환경 변수 및 명령 줄 인수를 포함하여 다양한 외부 구성 소스를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e1b592c133ca4e91622fca7c74cb80290552c74" translate="yes" xml:space="preserve">
          <source>Spring Boot logs the configuration files that are loaded at the &lt;code&gt;DEBUG&lt;/code&gt; level and the candidates it has not found at &lt;code&gt;TRACE&lt;/code&gt; level.</source>
          <target state="translated">Spring Boot는 &lt;code&gt;DEBUG&lt;/code&gt; 수준 에서로드 된 구성 파일 과 &lt;code&gt;TRACE&lt;/code&gt; 수준 에서 찾지 못한 후보를 기록합니다 .</target>
        </trans-unit>
        <trans-unit id="9687ef3f11189aed9cb56d805aa6b2131b149a6c" translate="yes" xml:space="preserve">
          <source>Spring Boot makes &lt;code&gt;-D&lt;/code&gt; arguments available as properties accessible from a Spring &lt;code&gt;Environment&lt;/code&gt; instance. The &lt;code&gt;server.port&lt;/code&gt; configuration property is fed to the embedded Tomcat, Jetty, or Undertow instance, which then uses the port when it starts up. The &lt;code&gt;$PORT&lt;/code&gt; environment variable is assigned to us by the Heroku PaaS.</source>
          <target state="translated">Spring Boot는 &lt;code&gt;-D&lt;/code&gt; 인수를 Spring &lt;code&gt;Environment&lt;/code&gt; 인스턴스 에서 액세스 할 수있는 속성으로 사용할 수 있도록 합니다. &lt;code&gt;server.port&lt;/code&gt; 의 구성 속성이 시작할 때 그 포트를 사용하여 매립 톰캣 부두 또는 역류 인스턴스에 공급된다. &lt;code&gt;$PORT&lt;/code&gt; 환경 변수는 Heroku가 PaaS를 우리에게 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="47a3b8573e057e5e40394adf051e05e8749615f6" translate="yes" xml:space="preserve">
          <source>Spring Boot manages the version for the &lt;code&gt;io.netty:netty-tcnative-boringssl-static&lt;/code&gt; &quot;uber jar&quot;, containing native libraries for all platforms. Developers can choose to import only the required dependencies using a classifier (see &lt;a href=&quot;https://netty.io/wiki/forked-tomcat-native.html&quot;&gt;the Netty official documentation&lt;/a&gt;).</source>
          <target state="translated">Spring Boot는 모든 플랫폼에 대한 네이티브 라이브러리를 포함 하는 &lt;code&gt;io.netty:netty-tcnative-boringssl-static&lt;/code&gt; &quot;uber jar&quot; 의 버전을 관리합니다 . 개발자는 분류자를 사용하여 필요한 종속성 만 가져 오도록 선택할 수 있습니다 ( &lt;a href=&quot;https://netty.io/wiki/forked-tomcat-native.html&quot;&gt;Netty 공식 문서&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="faddcc92abf9d8670b1f04309678414f99c91cc7" translate="yes" xml:space="preserve">
          <source>Spring Boot manages your &lt;a href=&quot;spring-boot-features#boot-features-application-availability&quot;&gt;Application Availability State&lt;/a&gt; out-of-the-box. If deployed in a Kubernetes environment, actuator will gather the &quot;Liveness&quot; and &quot;Readiness&quot; information from the &lt;code&gt;ApplicationAvailability&lt;/code&gt; interface and use that information in dedicated &lt;a href=&quot;#production-ready-health-indicators&quot;&gt;Health Indicators&lt;/a&gt;: &lt;code&gt;LivenessStateHealthIndicator&lt;/code&gt; and &lt;code&gt;ReadinessStateHealthIndicator&lt;/code&gt;. These indicators will be shown on the global health endpoint (&lt;code&gt;&quot;/actuator/health&quot;&lt;/code&gt;). They will also be exposed as separate HTTP Probes using &lt;a href=&quot;#production-ready-health-groups&quot;&gt;Health Groups&lt;/a&gt;: &lt;code&gt;&quot;/actuator/health/liveness&quot;&lt;/code&gt; and &lt;code&gt;&quot;/actuator/health/readiness&quot;&lt;/code&gt;.</source>
          <target state="translated">Spring Boot는 즉시 &lt;a href=&quot;spring-boot-features#boot-features-application-availability&quot;&gt;애플리케이션 가용성 상태를&lt;/a&gt; 관리합니다 . 는 Kubernetes 환경에서 배포 한 경우, 액추에이터는에서 &quot;생동감&quot;와 &quot;준비&quot;정보를 수집합니다 &lt;code&gt;ApplicationAvailability&lt;/code&gt; 의 인터페이스와 전용의 정보 사용 &lt;a href=&quot;#production-ready-health-indicators&quot;&gt;건강 지표&lt;/a&gt; : &lt;code&gt;LivenessStateHealthIndicator&lt;/code&gt; 및 &lt;code&gt;ReadinessStateHealthIndicator&lt;/code&gt; 을 . 이러한 표시기는 글로벌 상태 엔드 포인트 ( &lt;code&gt;&quot;/actuator/health&quot;&lt;/code&gt; )에 표시됩니다. 그들은 또한 사용하여 별도의 HTTP 프로브로 노출되는 &lt;a href=&quot;#production-ready-health-groups&quot;&gt;건강 그룹&lt;/a&gt; : &lt;code&gt;&quot;/actuator/health/liveness&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;/actuator/health/readiness&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5c56ce31dc51792fb300d78c7fd623f0ea0f2c9e" translate="yes" xml:space="preserve">
          <source>Spring Boot offers a number of starters that include messaging. This section answers questions that arise from using messaging with Spring Boot.</source>
          <target state="translated">Spring Boot는 메시징을 포함하는 여러 스타터를 제공합니다. 이 섹션에서는 Spring Boot와 함께 메시징을 사용할 때 발생하는 질문에 답합니다.</target>
        </trans-unit>
        <trans-unit id="239ddbfe6ac81d1bc442559acd88f286ac170490" translate="yes" xml:space="preserve">
          <source>Spring Boot offers a number of starters that work with HTTP clients. This section answers questions related to using them.</source>
          <target state="translated">Spring Boot는 HTTP 클라이언트와 함께 작동하는 여러 스타터를 제공합니다. 이 섹션에서는 사용과 관련된 질문에 답합니다.</target>
        </trans-unit>
        <trans-unit id="6081048fae33be74d381b00c76e6b412e60af265" translate="yes" xml:space="preserve">
          <source>Spring Boot offers auto-configuration for &lt;a href=&quot;https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo&quot;&gt;Embedded Mongo&lt;/a&gt;. To use it in your Spring Boot application, add a dependency on &lt;code&gt;de.flapdoodle.embed:de.flapdoodle.embed.mongo&lt;/code&gt;.</source>
          <target state="translated">Spring Boot는 &lt;a href=&quot;https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo&quot;&gt;Embedded Mongo에&lt;/a&gt; 대한 자동 구성을 제공합니다 . Spring Boot 애플리케이션에서 사용하려면 &lt;code&gt;de.flapdoodle.embed:de.flapdoodle.embed.mongo&lt;/code&gt; 에 종속성을 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="c6aad444c7d2550cb2d8c22277c8ccabdaa1b767" translate="yes" xml:space="preserve">
          <source>Spring Boot offers several conveniences for working with &lt;a href=&quot;https://spring.io/projects/spring-integration&quot;&gt;Spring Integration&lt;/a&gt;, including the &lt;code&gt;spring-boot-starter-integration&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo;. Spring Integration provides abstractions over messaging and also other transports such as HTTP, TCP, and others. If Spring Integration is available on your classpath, it is initialized through the &lt;code&gt;@EnableIntegration&lt;/code&gt; annotation.</source>
          <target state="translated">Spring Boot는 &lt;code&gt;spring-boot-starter-integration&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo;를 포함하여 &lt;a href=&quot;https://spring.io/projects/spring-integration&quot;&gt;Spring Integration&lt;/a&gt; 작업을위한 몇 가지 편의를 제공합니다 . Spring Integration은 메시징 및 HTTP, TCP 등과 같은 다른 전송에 대한 추상화를 제공합니다. 클래스 경로에서 Spring Integration을 사용할 수있는 경우 &lt;code&gt;@EnableIntegration&lt;/code&gt; 주석을 통해 초기화됩니다 .</target>
        </trans-unit>
        <trans-unit id="02cad64f06c4ac38d061cf53b31a48c15ea9314a" translate="yes" xml:space="preserve">
          <source>Spring Boot offers several conveniences for working with the &lt;a href=&quot;https://www.quartz-scheduler.org/&quot;&gt;Quartz scheduler&lt;/a&gt;, including the &lt;code&gt;spring-boot-starter-quartz&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo;. If Quartz is available, a &lt;code&gt;Scheduler&lt;/code&gt; is auto-configured (through the &lt;code&gt;SchedulerFactoryBean&lt;/code&gt; abstraction).</source>
          <target state="translated">Spring Boot는 &lt;code&gt;spring-boot-starter-quartz&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo;를 포함하여 &lt;a href=&quot;https://www.quartz-scheduler.org/&quot;&gt;Quartz 스케줄러&lt;/a&gt; 작업을위한 몇 가지 편의를 제공합니다 . Quartz를 사용할 수있는 경우 &lt;code&gt;Scheduler&lt;/code&gt; 는 &lt;code&gt;SchedulerFactoryBean&lt;/code&gt; 추상화를 통해 자동 구성 됩니다.</target>
        </trans-unit>
        <trans-unit id="bd0e877df480e5f2fdcb2c4e5a20f8c618cdc2ea" translate="yes" xml:space="preserve">
          <source>Spring Boot provides &lt;a href=&quot;https://spring.io/projects/spring-session&quot;&gt;Spring Session&lt;/a&gt; auto-configuration for a wide range of data stores. When building a Servlet web application, the following stores can be auto-configured:</source>
          <target state="translated">Spring Boot는 광범위한 데이터 저장소에 대해 &lt;a href=&quot;https://spring.io/projects/spring-session&quot;&gt;Spring Session&lt;/a&gt; 자동 구성을 제공합니다 . Servlet 웹 애플리케이션을 빌드 할 때 다음 저장소를 자동 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bc3fe7444c046068dca8d971477340659562030b" translate="yes" xml:space="preserve">
          <source>Spring Boot provides &lt;a href=&quot;production-ready-features#production-ready-kubernetes-probes&quot;&gt;Kubernetes HTTP probes for &quot;Liveness&quot; and &quot;Readiness&quot; with Actuator Health Endpoints&lt;/a&gt;. You can get more guidance about &lt;a href=&quot;deployment#cloud-deployment-kubernetes&quot;&gt;deploying Spring Boot applications on Kubernetes in the dedicated section&lt;/a&gt;.</source>
          <target state="translated">Spring Boot는 &lt;a href=&quot;production-ready-features#production-ready-kubernetes-probes&quot;&gt;Actuator Health Endpoints와 함께 &quot;Liveness&quot;및 &quot;Readiness&quot;에 대한 Kubernetes HTTP 프로브를&lt;/a&gt; 제공합니다 . &lt;a href=&quot;deployment#cloud-deployment-kubernetes&quot;&gt;전용 섹션에서 Kubernetes에 Spring Boot 애플리케이션을 배포하는&lt;/a&gt; 방법에 대한 자세한 지침을 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f53722204deb49147fa0aa66e949f92762f55700" translate="yes" xml:space="preserve">
          <source>Spring Boot provides Kotlin support by leveraging the support in other Spring projects such as Spring Framework, Spring Data, and Reactor. See the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/languages.html#kotlin&quot;&gt;Spring Framework Kotlin support documentation&lt;/a&gt; for more information.</source>
          <target state="translated">Spring Boot는 Spring Framework, SpringData, Reactor와 같은 다른 Spring 프로젝트의 지원을 활용하여 Kotlin 지원을 제공합니다. 자세한 내용은 &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/languages.html#kotlin&quot;&gt;Spring Framework Kotlin 지원 문서&lt;/a&gt; 를 참조하세요.</target>
        </trans-unit>
        <trans-unit id="b15fc64c2cfa5b418b5cad0e5b1bee2571923c23" translate="yes" xml:space="preserve">
          <source>Spring Boot provides RSocket server auto-configuration. The required dependencies are provided by the &lt;code&gt;spring-boot-starter-rsocket&lt;/code&gt;.</source>
          <target state="translated">Spring Boot는 RSocket 서버 자동 구성을 제공합니다. 필요한 종속성은 &lt;code&gt;spring-boot-starter-rsocket&lt;/code&gt; 에서 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="caa2ba76157200ed2ca728bc80dc4f1c9a2a96bf" translate="yes" xml:space="preserve">
          <source>Spring Boot provides Web Services auto-configuration so that all you must do is define your &lt;code&gt;Endpoints&lt;/code&gt;.</source>
          <target state="translated">Spring Boot는 웹 서비스 자동 구성을 제공하므로 &lt;code&gt;Endpoints&lt;/code&gt; 를 정의하기 만하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="047fa962e5326c19d72d898ada026e1a63d94a6c" translate="yes" xml:space="preserve">
          <source>Spring Boot provides WebSockets auto-configuration for embedded Tomcat, Jetty, and Undertow. If you deploy a war file to a standalone container, Spring Boot assumes that the container is responsible for the configuration of its WebSocket support.</source>
          <target state="translated">Spring Boot는 임베디드 Tomcat, Jetty 및 Undertow에 대한 WebSockets 자동 구성을 제공합니다. 독립형 컨테이너에 war 파일을 배포하는 경우 Spring Boot는 컨테이너가 WebSocket 지원 구성을 담당한다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="e7cb16bada1772bbcbfafc799c32aec71838b2e3" translate="yes" xml:space="preserve">
          <source>Spring Boot provides a &lt;code&gt;@SpringBootTest&lt;/code&gt; annotation, which can be used as an alternative to the standard &lt;code&gt;spring-test&lt;/code&gt;&lt;code&gt;@ContextConfiguration&lt;/code&gt; annotation when you need Spring Boot features. The annotation works by &lt;a href=&quot;#boot-features-testing-spring-boot-applications-detecting-config&quot;&gt;creating the &lt;code&gt;ApplicationContext&lt;/code&gt; used in your tests through &lt;code&gt;SpringApplication&lt;/code&gt;&lt;/a&gt;. In addition to &lt;code&gt;@SpringBootTest&lt;/code&gt; a number of other annotations are also provided for &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-autoconfigured-tests&quot;&gt;testing more specific slices&lt;/a&gt; of an application.</source>
          <target state="translated">Spring Boot는 &lt;code&gt;@SpringBootTest&lt;/code&gt; 주석을 제공하며 , 이는 Spring Boot 기능이 필요할 때 표준 &lt;code&gt;spring-test&lt;/code&gt; &lt;code&gt;@ContextConfiguration&lt;/code&gt; 주석 의 대안으로 사용할 수 있습니다 . 주석은 &lt;a href=&quot;#boot-features-testing-spring-boot-applications-detecting-config&quot;&gt; &lt;code&gt;SpringApplication&lt;/code&gt; 을&lt;/a&gt; 통해 테스트에 사용되는 &lt;code&gt;ApplicationContext&lt;/code&gt; 를 생성하여 작동합니다 . &lt;code&gt;@SpringBootTest&lt;/code&gt; 외에도 애플리케이션의 &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-autoconfigured-tests&quot;&gt;보다 구체적인 슬라이스&lt;/a&gt; 를 테스트하기 위해 여러 다른 주석도 제공 됩니다.</target>
        </trans-unit>
        <trans-unit id="f2d3e93b7ab3c387fbd9a98a8b1a47d406041803" translate="yes" xml:space="preserve">
          <source>Spring Boot provides a &lt;code&gt;WebExceptionHandler&lt;/code&gt; that handles all errors in a sensible way. Its position in the processing order is immediately before the handlers provided by WebFlux, which are considered last. For machine clients, it produces a JSON response with details of the error, the HTTP status, and the exception message. For browser clients, there is a &amp;ldquo;whitelabel&amp;rdquo; error handler that renders the same data in HTML format. You can also provide your own HTML templates to display errors (see the &lt;a href=&quot;#boot-features-webflux-error-handling-custom-error-pages&quot;&gt;next section&lt;/a&gt;).</source>
          <target state="translated">Spring Boot는 모든 오류를 합리적인 방식으로 처리 하는 &lt;code&gt;WebExceptionHandler&lt;/code&gt; 를 제공합니다 . 처리 순서에서 해당 위치는 마지막으로 간주되는 WebFlux에서 제공하는 핸들러 바로 앞입니다. 컴퓨터 클라이언트의 경우 오류, HTTP 상태 및 예외 메시지에 대한 세부 정보가 포함 된 JSON 응답을 생성합니다. 브라우저 클라이언트의 경우 동일한 데이터를 HTML 형식으로 렌더링하는 &quot;whitelabel&quot;오류 처리기가 있습니다. 자체 HTML 템플릿을 제공하여 오류를 표시 할 수도 있습니다 ( &lt;a href=&quot;#boot-features-webflux-error-handling-custom-error-pages&quot;&gt;다음 섹션 참조&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="efa47b4f062eed3a5c94bd6061d26a88c3b3b15c" translate="yes" xml:space="preserve">
          <source>Spring Boot provides a &lt;code&gt;metrics&lt;/code&gt; endpoint that can be used diagnostically to examine the metrics collected by an application. The endpoint is not available by default and must be exposed, see &lt;a href=&quot;#production-ready-endpoints-exposing-endpoints&quot;&gt;exposing endpoints&lt;/a&gt; for more details.</source>
          <target state="translated">Spring Boot는 애플리케이션에서 수집 한 메트릭을 검사하기 위해 진 단적으로 사용할 수 있는 &lt;code&gt;metrics&lt;/code&gt; 엔드 포인트를 제공합니다 . 엔드 포인트는 기본적으로 사용할 수 없으며 노출되어야합니다 . 자세한 내용 은 &lt;a href=&quot;#production-ready-endpoints-exposing-endpoints&quot;&gt;엔드 포인트 노출&lt;/a&gt; 을 참조하세요.</target>
        </trans-unit>
        <trans-unit id="371c6aeab2d7db36899f7c9cba9012088eefaade" translate="yes" xml:space="preserve">
          <source>Spring Boot provides a dedicated &amp;ldquo;Starter&amp;rdquo;, &lt;code&gt;spring-boot-starter-data-elasticsearch&lt;/code&gt;.</source>
          <target state="translated">Spring Boot는 전용 &quot;Starter&quot;, &lt;code&gt;spring-boot-starter-data-elasticsearch&lt;/code&gt; 를 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="1f2bcdfdef85ca91c363c0d24070f826fecbf322" translate="yes" xml:space="preserve">
          <source>Spring Boot provides a number of &amp;ldquo;Starters&amp;rdquo; that let you add jars to your classpath. Our applications for smoke tests use the &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; in the &lt;code&gt;parent&lt;/code&gt; section of the POM. The &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; is a special starter that provides useful Maven defaults. It also provides a &lt;a href=&quot;using-spring-boot#using-boot-dependency-management&quot;&gt;&lt;code&gt;dependency-management&lt;/code&gt;&lt;/a&gt; section so that you can omit &lt;code&gt;version&lt;/code&gt; tags for &amp;ldquo;blessed&amp;rdquo; dependencies.</source>
          <target state="translated">Spring Boot는 클래스 경로에 jar를 추가 할 수있는 여러 &quot;스타터&quot;를 제공합니다. 연기 테스트를위한 애플리케이션 은 POM 의 &lt;code&gt;parent&lt;/code&gt; 섹션 에서 &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; 를 사용합니다 . &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; 유용 메이븐 기본값을 제공하는 특별 선발한다. 또한 &quot;축복 된&quot;종속성에 대한 &lt;code&gt;version&lt;/code&gt; 태그를 생략 할 수 있도록 &lt;a href=&quot;using-spring-boot#using-boot-dependency-management&quot;&gt; &lt;code&gt;dependency-management&lt;/code&gt; &lt;/a&gt; 섹션을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="b2a8df280c158d8e4a16c3ae7728146a5720b286" translate="yes" xml:space="preserve">
          <source>Spring Boot provides a number of logback configurations that be &lt;code&gt;included&lt;/code&gt; from your own configuration. These includes are designed to allow certain common Spring Boot conventions to be re-applied.</source>
          <target state="translated">Spring Boot는 자체 구성에 &lt;code&gt;included&lt;/code&gt; 여러 로그 백 구성을 제공 합니다. 여기에는 특정 일반적인 Spring Boot 규칙을 다시 적용 할 수 있도록 설계되었습니다.</target>
        </trans-unit>
        <trans-unit id="551fa24800999b2c074625beb27027737e3f8560" translate="yes" xml:space="preserve">
          <source>Spring Boot provides a number of utilities and annotations to help when testing your application. Test support is provided by two modules: &lt;code&gt;spring-boot-test&lt;/code&gt; contains core items, and &lt;code&gt;spring-boot-test-autoconfigure&lt;/code&gt; supports auto-configuration for tests.</source>
          <target state="translated">Spring Boot는 애플리케이션을 테스트 할 때 도움이되는 여러 유틸리티와 주석을 제공합니다. 테스트 지원은 두 개의 모듈로 제공됩니다. &lt;code&gt;spring-boot-test&lt;/code&gt; 는 핵심 항목을 포함하고 &lt;code&gt;spring-boot-test-autoconfigure&lt;/code&gt; 는 테스트를위한 자동 구성을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="bb79fc3b35d43d821c595f40b5fd6a6bec8d5b4a" translate="yes" xml:space="preserve">
          <source>Spring Boot provides an idiomatic way to run an application with &lt;code&gt;runApplication&amp;lt;MyApplication&amp;gt;(*args)&lt;/code&gt; as shown in the following example:</source>
          <target state="translated">Spring Boot는 다음 예제와 같이 &lt;code&gt;runApplication&amp;lt;MyApplication&amp;gt;(*args)&lt;/code&gt; 로 애플리케이션을 실행하는 관용적 방법을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="ba58e0c34a5d8dc0378ab20a021b103004ca2b16" translate="yes" xml:space="preserve">
          <source>Spring Boot provides auto-configuration for Redis, MongoDB, Neo4j, Elasticsearch, Solr Cassandra, Couchbase, and LDAP. You can make use of the other projects, but you must configure them yourself. Refer to the appropriate reference documentation at &lt;a href=&quot;https://spring.io/projects/spring-data&quot;&gt;spring.io/projects/spring-data&lt;/a&gt;.</source>
          <target state="translated">Spring Boot는 Redis, MongoDB, Neo4j, Elasticsearch, Solr Cassandra, Couchbase 및 LDAP에 대한 자동 구성을 제공합니다. 다른 프로젝트를 사용할 수 있지만 직접 구성해야합니다. &lt;a href=&quot;https://spring.io/projects/spring-data&quot;&gt;spring.io/projects/spring-data&lt;/a&gt; 에서 적절한 참조 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b22f02be672ad1a81f1747d3b937f8636dd92e23" translate="yes" xml:space="preserve">
          <source>Spring Boot provides auto-configuration for Spring MVC that works well with most applications.</source>
          <target state="translated">Spring Boot는 대부분의 애플리케이션에서 잘 작동하는 Spring MVC에 대한 자동 구성을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ad9bf087f18f54c7586b414cb1fc4a7e19d642be" translate="yes" xml:space="preserve">
          <source>Spring Boot provides auto-configuration for Spring WebFlux that works well with most applications.</source>
          <target state="translated">Spring Boot는 대부분의 애플리케이션에서 잘 작동하는 Spring WebFlux에 대한 자동 구성을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="4d389f7d6ff984e341e30080f0a45529939ffc06" translate="yes" xml:space="preserve">
          <source>Spring Boot provides build tool plugins for Maven and Gradle. The plugins offer a variety of features, including the packaging of executable jars. This section provides more details on both plugins as well as some help should you need to extend an unsupported build system. If you are just getting started, you might want to read &amp;ldquo;&lt;a href=&quot;using-spring-boot#using-boot-build-systems&quot;&gt;using-spring-boot.html&lt;/a&gt;&amp;rdquo; from the &amp;ldquo;&lt;a href=&quot;using-spring-boot#using-boot&quot;&gt;using-spring-boot.html&lt;/a&gt;&amp;rdquo; section first.</source>
          <target state="translated">Spring Boot는 Maven 및 Gradle 용 빌드 도구 플러그인을 제공합니다. 플러그인은 실행 가능한 jar 패키지를 포함하여 다양한 기능을 제공합니다. 이 섹션에서는 두 플러그인에 대한 자세한 내용과 지원되지 않는 빌드 시스템을 확장해야하는 경우 몇 가지 도움말을 제공합니다. 당신이 막 시작하는 경우, &quot;읽어보십시오 &lt;a href=&quot;using-spring-boot#using-boot-build-systems&quot;&gt;사용하여 스프링 - boot.html&lt;/a&gt; 은&quot;에서 &quot; &lt;a href=&quot;using-spring-boot#using-boot&quot;&gt;사용 - 스프링 boot.html&lt;/a&gt; 처음&quot;절을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8537d6c91e35ac892a5fb63b32c59ae52e0ef931" translate="yes" xml:space="preserve">
          <source>Spring Boot provides dedicated configuration properties for codecs, &lt;code&gt;spring.codec.*&lt;/code&gt;. It also applies further customization by using &lt;code&gt;CodecCustomizer&lt;/code&gt; instances. For example, &lt;code&gt;spring.jackson.*&lt;/code&gt; configuration keys are applied to the Jackson codec.</source>
          <target state="translated">Spring Boot는 코덱에 대한 전용 구성 속성 인 &lt;code&gt;spring.codec.*&lt;/code&gt; 를 제공 합니다. 또한 &lt;code&gt;CodecCustomizer&lt;/code&gt; 인스턴스 를 사용하여 추가 사용자 지정을 적용 합니다. 예를 들어 &lt;code&gt;spring.jackson.*&lt;/code&gt; 구성 키가 Jackson 코덱에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="620c63ef3873898b5fad643a5efa929482aab38f" translate="yes" xml:space="preserve">
          <source>Spring Boot provides infrastructure to bind &lt;code&gt;@ConfigurationProperties&lt;/code&gt; types and register them as beans. You can either enable configuration properties on a class-by-class basis or enable configuration property scanning that works in a similar manner to component scanning.</source>
          <target state="translated">Spring Boot는 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 유형 을 바인딩 하고이를 Bean으로 등록하는 인프라를 제공합니다 . 클래스별로 구성 속성을 활성화하거나 구성 요소 스캔과 유사한 방식으로 작동하는 구성 속성 스캔을 활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0a1df2f5f409560e8032500ba13eefa546b84afb" translate="yes" xml:space="preserve">
          <source>Spring Boot provides integration with three JSON mapping libraries:</source>
          <target state="translated">Spring Boot는 세 가지 JSON 매핑 라이브러리와의 통합을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="dc1a4cd02de57792836a3c7c88e239982407cca4" translate="yes" xml:space="preserve">
          <source>Spring Boot provides numerous &lt;code&gt;FailureAnalyzer&lt;/code&gt; implementations, and you can &lt;a href=&quot;howto#howto-failure-analyzer&quot;&gt;add your own&lt;/a&gt;.</source>
          <target state="translated">봄 부팅 수많은 제공 &lt;code&gt;FailureAnalyzer&lt;/code&gt; 의 구현을, 당신은 할 수 있습니다 &lt;a href=&quot;howto#howto-failure-analyzer&quot;&gt;자신을 추가&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0ee98b82fba54ca7b2e9b043c148c5a29b0b19bc" translate="yes" xml:space="preserve">
          <source>Spring Boot provides various conversion mechanism with advanced value formatting, make sure to review &lt;a href=&quot;spring-boot-features#boot-features-external-config-conversion&quot;&gt;the properties conversion section&lt;/a&gt;.</source>
          <target state="translated">Spring Boot는 고급 값 형식화와 함께 다양한 변환 메커니즘을 제공합니다 . &lt;a href=&quot;spring-boot-features#boot-features-external-config-conversion&quot;&gt;속성 변환 섹션&lt;/a&gt; 을 검토 하십시오 .</target>
        </trans-unit>
        <trans-unit id="ecb6adca9ef8a16b3cc804c22baab593b338a418" translate="yes" xml:space="preserve">
          <source>Spring Boot registers the following core metrics when applicable:</source>
          <target state="translated">Spring Boot는 적용 가능한 경우 다음 핵심 메트릭을 등록합니다.</target>
        </trans-unit>
        <trans-unit id="8ce925d1cc8b7a14374d4d025c9c8b018c571160" translate="yes" xml:space="preserve">
          <source>Spring Boot ships by default with Tomcat 9.0.x which supports HTTP/2 out of the box when using JDK 9 or later. Alternatively, HTTP/2 can be used on JDK 8 if the &lt;code&gt;libtcnative&lt;/code&gt; library and its dependencies are installed on the host operating system.</source>
          <target state="translated">Spring Boot는 기본적으로 JDK 9 이상을 사용할 때 HTTP / 2를 지원하는 Tomcat 9.0.x와 함께 제공됩니다. 또는 &lt;code&gt;libtcnative&lt;/code&gt; 라이브러리 및 해당 종속성이 호스트 운영 체제에 설치된 경우 JDK 8에서 HTTP / 2를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="747dc0b454685fe541438b88755597c0bbc06f25" translate="yes" xml:space="preserve">
          <source>Spring Boot ships with the &lt;code&gt;BufferingApplicationStartup&lt;/code&gt; variant; this implementation is meant for buffering the startup steps and draining them into an external metrics system. Applications can ask for the bean of type &lt;code&gt;BufferingApplicationStartup&lt;/code&gt; in any component. Additionally, Spring Boot Actuator will &lt;a href=&quot;production-ready-features#production-ready-endpoints&quot;&gt;expose a &lt;code&gt;startup&lt;/code&gt; endpoint to expose this information as a JSON document&lt;/a&gt;.</source>
          <target state="translated">Spring Boot는 &lt;code&gt;BufferingApplicationStartup&lt;/code&gt; 변형 과 함께 제공됩니다 . 이 구현은 시작 단계를 버퍼링하고이를 외부 메트릭 시스템으로 배출하기위한 것입니다. 애플리케이션은 모든 구성 요소에서 &lt;code&gt;BufferingApplicationStartup&lt;/code&gt; 유형의 Bean을 요청할 수 있습니다 . 또한, 봄 부팅 액츄에이터는 것이다 &lt;a href=&quot;production-ready-features#production-ready-endpoints&quot;&gt;노출 &lt;code&gt;startup&lt;/code&gt; JSON 문서로이 정보를 노출하는 엔드 포인트를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="dd7bbe6f710da07291fb4f3f42ea3b841a5f8594" translate="yes" xml:space="preserve">
          <source>Spring Boot supports &lt;a href=&quot;https://logging.apache.org/log4j/2.x/&quot;&gt;Log4j 2&lt;/a&gt; for logging configuration if it is on the classpath. If you use the starters for assembling dependencies, you have to exclude Logback and then include log4j 2 instead. If you do not use the starters, you need to provide (at least) &lt;code&gt;spring-jcl&lt;/code&gt; in addition to Log4j 2.</source>
          <target state="translated">Spring Boot는 클래스 경로에있는 경우 로깅 구성을 위해 &lt;a href=&quot;https://logging.apache.org/log4j/2.x/&quot;&gt;Log4j 2&lt;/a&gt; 를 지원합니다 . 종속성을 조합하는 데 스타터를 사용하는 경우 Logback을 제외하고 대신 log4j 2를 포함해야합니다. 스타터를 사용하지 않는 경우 Log4j 2 외에 &lt;code&gt;spring-jcl&lt;/code&gt; 을 (적어도) 제공해야합니다 .</target>
        </trans-unit>
        <trans-unit id="5c949af2fa38d8b0d71aea767d5446d5c2d0b7e9" translate="yes" xml:space="preserve">
          <source>Spring Boot supports Kotlin 1.3.x. To use Kotlin, &lt;code&gt;org.jetbrains.kotlin:kotlin-stdlib&lt;/code&gt; and &lt;code&gt;org.jetbrains.kotlin:kotlin-reflect&lt;/code&gt; must be present on the classpath. The &lt;code&gt;kotlin-stdlib&lt;/code&gt; variants &lt;code&gt;kotlin-stdlib-jdk7&lt;/code&gt; and &lt;code&gt;kotlin-stdlib-jdk8&lt;/code&gt; can also be used.</source>
          <target state="translated">Spring Boot는 Kotlin 1.3.x를 지원합니다. Kotlin을 사용하려면 &lt;code&gt;org.jetbrains.kotlin:kotlin-stdlib&lt;/code&gt; 및 &lt;code&gt;org.jetbrains.kotlin:kotlin-reflect&lt;/code&gt; 가 클래스 경로에 있어야합니다. &lt;code&gt;kotlin-stdlib&lt;/code&gt; 변형 &lt;code&gt;kotlin-stdlib-jdk7&lt;/code&gt; 과 &lt;code&gt;kotlin-stdlib-jdk8&lt;/code&gt; 도 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3447cc5032ac5b8266faac9499cd48a781c6e51a" translate="yes" xml:space="preserve">
          <source>Spring Boot supports both Hazelcast 4 and Hazelcast 3. If you downgrade to Hazelcast 3, &lt;code&gt;hazelcast-client&lt;/code&gt; should be added to the classpath to configure a client.</source>
          <target state="translated">Spring Boot는 Hazelcast 4와 Hazelcast 3을 모두 지원합니다. Hazelcast 3으로 다운 그레이드하는 경우 &lt;code&gt;hazelcast-client&lt;/code&gt; 를 클래스 경로에 추가하여 클라이언트를 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="bff4761a59a04a3dbc8567f2156131a7b790e9f1" translate="yes" xml:space="preserve">
          <source>Spring Boot supports both classic and reactive Elasticsearch repositories, using the &lt;code&gt;ElasticsearchRestTemplate&lt;/code&gt; or &lt;code&gt;ReactiveElasticsearchTemplate&lt;/code&gt; beans. Most likely those beans are auto-configured by Spring Boot given the required dependencies are present.</source>
          <target state="translated">Spring Boot는 &lt;code&gt;ElasticsearchRestTemplate&lt;/code&gt; 또는 &lt;code&gt;ReactiveElasticsearchTemplate&lt;/code&gt; Bean을 사용하여 클래식 및 반응 형 Elasticsearch 저장소를 모두 지원합니다 . 필요한 종속성이있는 경우 해당 Bean은 Spring Boot에 의해 자동 구성 될 가능성이 높습니다.</target>
        </trans-unit>
        <trans-unit id="5631e558ea904f8fcebe977b208add870049f6a6" translate="yes" xml:space="preserve">
          <source>Spring Boot supports both static and templated welcome pages. It first looks for an &lt;code&gt;index.html&lt;/code&gt; file in the configured static content locations. If one is not found, it then looks for an &lt;code&gt;index&lt;/code&gt; template. If either is found, it is automatically used as the welcome page of the application.</source>
          <target state="translated">Spring Boot는 정적 및 템플릿 환영 페이지를 모두 지원합니다. 먼저 구성된 정적 콘텐츠 위치에서 &lt;code&gt;index.html&lt;/code&gt; 파일을 찾습니다 . 찾을 수없는 경우 &lt;code&gt;index&lt;/code&gt; 템플릿 을 찾습니다 . 둘 중 하나가 있으면 자동으로 응용 프로그램의 시작 페이지로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6a104bc7a52def86e718dcf8f30fc1d9678aaa58" translate="yes" xml:space="preserve">
          <source>Spring Boot supports distributed JTA transactions across multiple XA resources by using an &lt;a href=&quot;https://www.atomikos.com/&quot;&gt;Atomikos&lt;/a&gt; embedded transaction manager. Deprecated support for using a &lt;a href=&quot;https://github.com/bitronix/btm&quot;&gt;Bitronix&lt;/a&gt; embedded transaction manager is also provided but it will be removed in a future release. JTA transactions are also supported when deploying to a suitable Java EE Application Server.</source>
          <target state="translated">Spring Boot는 &lt;a href=&quot;https://www.atomikos.com/&quot;&gt;Atomikos&lt;/a&gt; 임베디드 트랜잭션 관리자를 사용하여 여러 XA 리소스에 분산 된 JTA 트랜잭션을 지원합니다 . &lt;a href=&quot;https://github.com/bitronix/btm&quot;&gt;Bitronix&lt;/a&gt; 임베디드 트랜잭션 관리자 사용에 대한 더 이상 사용되지 않는 지원 도 제공되지만 향후 릴리스에서 제거 될 예정입니다. JTA 트랜잭션은 적절한 Java EE Application Server에 배포 할 때도 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="15bad04e00c2e31130d522ce1fbce9bf2fb80e68" translate="yes" xml:space="preserve">
          <source>Spring Boot supports hot swapping. This section answers questions about how it works.</source>
          <target state="translated">Spring Boot는 핫 스와핑을 지원합니다. 이 섹션에서는 작동 방식에 대한 질문에 답합니다.</target>
        </trans-unit>
        <trans-unit id="048ac7bd4d8016d1d0885262f75257b03162e57c" translate="yes" xml:space="preserve">
          <source>Spring Boot supports localized messages so that your application can cater to users of different language preferences. By default, Spring Boot looks for the presence of a &lt;code&gt;messages&lt;/code&gt; resource bundle at the root of the classpath.</source>
          <target state="translated">Spring Boot는 지역화 된 메시지를 지원하므로 애플리케이션이 다른 언어 환경 설정의 사용자를 수용 할 수 있습니다. 기본적으로 Spring Boot는 클래스 경로의 루트에서 &lt;code&gt;messages&lt;/code&gt; 리소스 번들 의 존재를 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="3b721b4e685be94da65157ebb208ce99c16a821c" translate="yes" xml:space="preserve">
          <source>Spring Boot supports multi-document YAML and Properties files (see &lt;a href=&quot;spring-boot-features#boot-features-external-config-files-multi-document&quot;&gt;spring-boot-features.html&lt;/a&gt; for details) which can be activated conditionally based on the active profiles.</source>
          <target state="translated">Spring Boot는 활성 프로필을 기반으로 조건부로 활성화 할 수있는 다중 문서 YAML 및 속성 파일 (자세한 내용은 &lt;a href=&quot;spring-boot-features#boot-features-external-config-files-multi-document&quot;&gt;spring-boot-features.html&lt;/a&gt; 참조)을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="d85ba04ccdbe6eb2294c7e09eb50ab6f7d72687e" translate="yes" xml:space="preserve">
          <source>Spring Boot supports several clients:</source>
          <target state="translated">Spring Boot는 여러 클라이언트를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="d0d4ffe77efc05cb1e4271722b1fed9eb88ade39" translate="yes" xml:space="preserve">
          <source>Spring Boot supports the following embedded servlet containers:</source>
          <target state="translated">Spring Boot는 다음과 같은 임베디드 서블릿 컨테이너를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="3e202826a44c91bb636523007aff65525671ea41" translate="yes" xml:space="preserve">
          <source>Spring Boot supports traditional deployment as well as more modern forms of deployment. This section answers common questions about traditional deployment.</source>
          <target state="translated">Spring Boot는 기존 배포와 더 현대적인 배포 형태를 지원합니다. 이 섹션에서는 기존 배포에 대한 일반적인 질문에 답합니다.</target>
        </trans-unit>
        <trans-unit id="cdfd80a2c97d67ca96b2d3a0770ba2b86c480d54" translate="yes" xml:space="preserve">
          <source>Spring Boot supports two higher-level migration tools: &lt;a href=&quot;https://flywaydb.org/&quot;&gt;Flyway&lt;/a&gt; and &lt;a href=&quot;https://www.liquibase.org/&quot;&gt;Liquibase&lt;/a&gt;.</source>
          <target state="translated">Spring Boot는 &lt;a href=&quot;https://flywaydb.org/&quot;&gt;Flyway&lt;/a&gt; 와 &lt;a href=&quot;https://www.liquibase.org/&quot;&gt;Liquibase의&lt;/a&gt; 두 가지 상위 마이그레이션 도구를 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="6b850d835ed1677bd837d9486e9e4c11c15cf016" translate="yes" xml:space="preserve">
          <source>Spring Boot takes a &lt;a href=&quot;appendix-executable-jar-format#executable-jar&quot;&gt;different approach&lt;/a&gt; and lets you actually nest jars directly.</source>
          <target state="translated">Spring Boot는 &lt;a href=&quot;appendix-executable-jar-format#executable-jar&quot;&gt;다른 접근 방식을&lt;/a&gt; 취하며 실제로 jar를 직접 중첩 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6734809ded5889ee8cdf87658dc1d09ef4c95ba8" translate="yes" xml:space="preserve">
          <source>Spring Boot tries as much as possible to expose common settings, but this is not always possible. For those cases, dedicated namespaces offer server-specific customizations (see &lt;code&gt;server.tomcat&lt;/code&gt; and &lt;code&gt;server.undertow&lt;/code&gt;). For instance, &lt;a href=&quot;howto#howto-configure-accesslogs&quot;&gt;access logs&lt;/a&gt; can be configured with specific features of the embedded servlet container.</source>
          <target state="translated">Spring Boot는 가능한 한 공통 설정을 노출하려고 시도하지만 항상 가능한 것은 아닙니다. 이러한 경우 전용 네임 스페이스는 서버 별 사용자 지정을 제공합니다 ( &lt;code&gt;server.tomcat&lt;/code&gt; 및 &lt;code&gt;server.undertow&lt;/code&gt; 참조 ). 예를 들어 &lt;a href=&quot;howto#howto-configure-accesslogs&quot;&gt;액세스 로그&lt;/a&gt; 는 임베디드 서블릿 컨테이너의 특정 기능으로 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b4ae16fdd4ca02a6ea3d68169bd1ebb56b00edb1" translate="yes" xml:space="preserve">
          <source>Spring Boot tries to guess the location of your &lt;code&gt;@Entity&lt;/code&gt; definitions, based on the &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; it finds. To get more control, you can use the &lt;code&gt;@EntityScan&lt;/code&gt; annotation, as shown in the following example:</source>
          <target state="translated">Spring Boot는 찾은 &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; 을 기반으로 &lt;code&gt;@Entity&lt;/code&gt; 정의 의 위치를 ​​추측합니다 . 더 많은 제어를 얻으려면 다음 예제와 같이 &lt;code&gt;@EntityScan&lt;/code&gt; 주석을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="63fcf760535f423574cd50b3666c929d661d9454" translate="yes" xml:space="preserve">
          <source>Spring Boot tries to guess the location of your &lt;code&gt;@Repository&lt;/code&gt; definitions, based on the &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; it finds. To get more control, use the &lt;code&gt;@EnableJpaRepositories&lt;/code&gt; annotation (from Spring Data JPA).</source>
          <target state="translated">Spring Boot는 찾은 &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; 을 기반으로 &lt;code&gt;@Repository&lt;/code&gt; 정의 의 위치를 ​​추측합니다 . 더 많은 제어를 얻으려면 &lt;code&gt;@EnableJpaRepositories&lt;/code&gt; 주석 (Spring Data JPA에서 제공)을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7c2686208ca45361b8dc7e25588bf07632242c7d" translate="yes" xml:space="preserve">
          <source>Spring Boot uses &lt;a href=&quot;https://commons.apache.org/logging&quot;&gt;Commons Logging&lt;/a&gt; for all internal logging but leaves the underlying log implementation open. Default configurations are provided for &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/logging/package-summary.html&quot;&gt;Java Util Logging&lt;/a&gt;, &lt;a href=&quot;https://logging.apache.org/log4j/2.x/&quot;&gt;Log4J2&lt;/a&gt;, and &lt;a href=&quot;https://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt;. In each case, loggers are pre-configured to use console output with optional file output also available.</source>
          <target state="translated">Spring Boot는 모든 내부 로깅에 &lt;a href=&quot;https://commons.apache.org/logging&quot;&gt;Commons Logging&lt;/a&gt; 을 사용 하지만 기본 로그 구현은 열어 둡니다. &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/logging/package-summary.html&quot;&gt;Java Util Logging&lt;/a&gt; , &lt;a href=&quot;https://logging.apache.org/log4j/2.x/&quot;&gt;Log4J2&lt;/a&gt; 및 &lt;a href=&quot;https://logback.qos.ch/&quot;&gt;Logback에&lt;/a&gt; 대한 기본 구성이 제공됩니다 . 각각의 경우에 로거는 옵션 파일 출력도 사용 가능한 콘솔 출력을 사용하도록 사전 구성되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="394ac3fc72bce4878dafe254e2e10844e86a34da" translate="yes" xml:space="preserve">
          <source>Spring Boot uses a very particular &lt;code&gt;PropertySource&lt;/code&gt; order that is designed to allow sensible overriding of values. Properties are considered in the following order (with values from lower items overriding earlier ones):</source>
          <target state="translated">Spring Boot는 합리적인 값 재정의를 허용하도록 설계된 매우 특별한 &lt;code&gt;PropertySource&lt;/code&gt; 순서를 사용합니다. 속성은 다음 순서로 고려됩니다 (하위 항목의 값이 이전 항목을 재정의 함).</target>
        </trans-unit>
        <trans-unit id="9800f7a1d04e756513a7b45c87ee40a5737fe1ab" translate="yes" xml:space="preserve">
          <source>Spring Boot uses an annotation processor to collect the conditions on auto-configurations in a metadata file (&lt;code&gt;META-INF/spring-autoconfigure-metadata.properties&lt;/code&gt;). If that file is present, it is used to eagerly filter auto-configurations that do not match, which will improve startup time. It is recommended to add the following dependency in a module that contains auto-configurations:</source>
          <target state="translated">Spring Boot는 주석 프로세서를 사용하여 메타 데이터 파일 ( &lt;code&gt;META-INF/spring-autoconfigure-metadata.properties&lt;/code&gt; ) 에서 자동 구성에 대한 조건을 수집합니다 . 해당 파일이 있으면 일치하지 않는 자동 구성을 열심히 필터링하는 데 사용되어 시작 시간이 향상됩니다. 자동 구성이 포함 된 모듈에 다음 종속성을 추가하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="28136d7e0ded63b68cc356eca07189a0283be6b7" translate="yes" xml:space="preserve">
          <source>Spring Boot uses sensible defaults for such keys: any key ending with the word &quot;password&quot;, &quot;secret&quot;, &quot;key&quot;, &quot;token&quot;, &quot;vcap_services&quot;, &quot;sun.java.command&quot; is entirely sanitized. Additionally, any key that holds the word &lt;code&gt;credentials&lt;/code&gt; as part of the key is sanitized (configured as a regular expression, i.e. &lt;code&gt;*credentials.*&lt;/code&gt;).</source>
          <target state="translated">Spring Boot는 이러한 키에 대해 합리적인 기본값을 사용합니다. &quot;password&quot;, &quot;secret&quot;, &quot;key&quot;, &quot;token&quot;, &quot;vcap_services&quot;, &quot;sun.java.command&quot;로 끝나는 모든 키는 완전히 삭제됩니다. 또한 키의 일부로 &lt;code&gt;credentials&lt;/code&gt; 라는 단어를 보유하는 모든 키 가 삭제됩니다 (정규 표현식, 즉 &lt;code&gt;*credentials.*&lt;/code&gt; 로 구성됨 ).</target>
        </trans-unit>
        <trans-unit id="9458fe10700af4a8a49c1834d407cae6c1d7a9c9" translate="yes" xml:space="preserve">
          <source>Spring Boot uses some relaxed rules for binding &lt;code&gt;Environment&lt;/code&gt; properties to &lt;code&gt;@ConfigurationProperties&lt;/code&gt; beans, so there does not need to be an exact match between the &lt;code&gt;Environment&lt;/code&gt; property name and the bean property name. Common examples where this is useful include dash-separated environment properties (for example, &lt;code&gt;context-path&lt;/code&gt; binds to &lt;code&gt;contextPath&lt;/code&gt;), and capitalized environment properties (for example, &lt;code&gt;PORT&lt;/code&gt; binds to &lt;code&gt;port&lt;/code&gt;).</source>
          <target state="translated">Spring Boot는 &lt;code&gt;Environment&lt;/code&gt; 속성을 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 빈 에 바인딩하기 위해 완화 된 규칙을 사용 하므로 &lt;code&gt;Environment&lt;/code&gt; 속성 이름과 빈 속성 이름이 정확히 일치 할 필요가 없습니다 . 이것이 유용한 일반적인 예로는 대시로 구분 된 환경 속성 (예 : &lt;code&gt;context-path&lt;/code&gt; 가 &lt;code&gt;contextPath&lt;/code&gt; 에 바인딩 됨 ) 및 대문자 로 표시된 환경 속성 (예 : &lt;code&gt;PORT&lt;/code&gt; 가 &lt;code&gt;port&lt;/code&gt; 에 바인딩 됨 )이 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d70f2d8f4e909080304ef45038c22b7468a88eb" translate="yes" xml:space="preserve">
          <source>Spring Boot will also add any auto-configured registries to the global static composite registry on the &lt;code&gt;Metrics&lt;/code&gt; class unless you explicitly tell it not to:</source>
          <target state="translated">Spring Boot는 다음과 같이 명시 적으로 지시하지 않는 한 &lt;code&gt;Metrics&lt;/code&gt; 클래스 의 전역 정적 복합 레지스트리에 자동 구성된 레지스트리를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="cfefd9c2122fa4d2d6100202a572ccfb7246dc06" translate="yes" xml:space="preserve">
          <source>Spring Boot will auto-configure Spring Data&amp;rsquo;s JDBC repositories when the necessary dependencies are on the classpath. They can be added to your project with a single dependency on &lt;code&gt;spring-boot-starter-data-jdbc&lt;/code&gt;. If necessary, you can take control of Spring Data JDBC&amp;rsquo;s configuration by adding the &lt;code&gt;@EnableJdbcRepositories&lt;/code&gt; annotation or a &lt;code&gt;JdbcConfiguration&lt;/code&gt; subclass to your application.</source>
          <target state="translated">Spring Boot는 필요한 종속성이 클래스 경로에있을 때 SpringData의 JDBC 저장소를 자동 구성합니다. &lt;code&gt;spring-boot-starter-data-jdbc&lt;/code&gt; 에 대한 단일 종속성으로 프로젝트에 추가 할 수 있습니다 . 필요한 경우 &lt;code&gt;@EnableJdbcRepositories&lt;/code&gt; 주석 또는 &lt;code&gt;JdbcConfiguration&lt;/code&gt; 하위 클래스를 애플리케이션 에 추가하여 SpringData JDBC의 구성을 제어 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ccb093643a69d4478accb621864a84b9ff98f744" translate="yes" xml:space="preserve">
          <source>Spring Boot will auto-configure the Spring Messaging infrastructure for RSocket.</source>
          <target state="translated">Spring Boot는 RSocket 용 Spring Messaging 인프라를 자동 구성합니다.</target>
        </trans-unit>
        <trans-unit id="2e0321ab8e9f4cf45f89088bf4943f83dfb6bd38" translate="yes" xml:space="preserve">
          <source>Spring Boot will auto-detect which &lt;code&gt;ClientHttpConnector&lt;/code&gt; to use to drive &lt;code&gt;WebClient&lt;/code&gt;, depending on the libraries available on the application classpath. For now, Reactor Netty and Jetty RS client are supported.</source>
          <target state="translated">Spring Boot는 애플리케이션 클래스 경로에서 사용 가능한 라이브러리에 따라 &lt;code&gt;WebClient&lt;/code&gt; 를 구동 하는 데 사용할 &lt;code&gt;ClientHttpConnector&lt;/code&gt; 를 자동 감지 합니다. 현재 Reactor Netty 및 Jetty RS 클라이언트가 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="765881ed9c79f92ab2ed6d54b59a009e83f395d3" translate="yes" xml:space="preserve">
          <source>Spring Boot will automatically find and load &lt;code&gt;application.properties&lt;/code&gt; and &lt;code&gt;application.yaml&lt;/code&gt; files from the following locations when your application starts:</source>
          <target state="translated">Spring Boot는 애플리케이션이 시작될 때 다음 위치에서 &lt;code&gt;application.properties&lt;/code&gt; 및 &lt;code&gt;application.yaml&lt;/code&gt; 파일을 자동으로 찾고로드 합니다.</target>
        </trans-unit>
        <trans-unit id="54e3a5c7894446cb165a802ce6482dbf20a232ab" translate="yes" xml:space="preserve">
          <source>Spring Boot will expose Hikari-specific settings to &lt;code&gt;spring.datasource.hikari&lt;/code&gt;. This example uses a more generic &lt;code&gt;configuration&lt;/code&gt; sub namespace as the example does not support multiple datasource implementations.</source>
          <target state="translated">Spring Boot는 Hikari 관련 설정을 &lt;code&gt;spring.datasource.hikari&lt;/code&gt; 에 노출 합니다. 이 예제는 다중 데이터 소스 구현을 지원하지 않으므로 보다 일반적인 &lt;code&gt;configuration&lt;/code&gt; 하위 네임 스페이스를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="0857fcf79b5d9b35471f70254dc31249829d9633" translate="yes" xml:space="preserve">
          <source>Spring Boot will not search for or use a &lt;code&gt;META-INF/persistence.xml&lt;/code&gt; by default. If you prefer to use a traditional &lt;code&gt;persistence.xml&lt;/code&gt;, you need to define your own &lt;code&gt;@Bean&lt;/code&gt; of type &lt;code&gt;LocalEntityManagerFactoryBean&lt;/code&gt; (with an ID of &amp;lsquo;entityManagerFactory&amp;rsquo;) and set the persistence unit name there.</source>
          <target state="translated">Spring Boot는 기본적으로 &lt;code&gt;META-INF/persistence.xml&lt;/code&gt; 을 검색하거나 사용하지 않습니다 . 전통적인 &lt;code&gt;persistence.xml&lt;/code&gt; 사용을 선호하는 경우 , &lt;code&gt;LocalEntityManagerFactoryBean&lt;/code&gt; 유형 의 고유 한 &lt;code&gt;@Bean&lt;/code&gt; ( 'entityManagerFactory'ID 포함)을 정의하고 거기에 지속성 단위 이름을 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="979c88522e5cdda8a3ccc39c4fcaccce4a21dd3d" translate="yes" xml:space="preserve">
          <source>Spring Boot&amp;rsquo;s actuator module includes additional support that is activated when you deploy to a compatible Cloud Foundry instance. The &lt;code&gt;/cloudfoundryapplication&lt;/code&gt; path provides an alternative secured route to all &lt;code&gt;@Endpoint&lt;/code&gt; beans.</source>
          <target state="translated">Spring Boot의 액추에이터 모듈에는 호환되는 Cloud Foundry 인스턴스에 배포 할 때 활성화되는 추가 지원이 포함됩니다. &lt;code&gt;/cloudfoundryapplication&lt;/code&gt; 경로는 모두 대체 보안 경로를 제공 &lt;code&gt;@Endpoint&lt;/code&gt; 콩.</target>
        </trans-unit>
        <trans-unit id="f976c600b01ce3aff4b74b983afe045c1e737664" translate="yes" xml:space="preserve">
          <source>Spring Boot&amp;rsquo;s auto-configuration system works well for applications but can sometimes be a little too much for tests. It often helps to load only the parts of the configuration that are required to test a &amp;ldquo;slice&amp;rdquo; of your application. For example, you might want to test that Spring MVC controllers are mapping URLs correctly, and you do not want to involve database calls in those tests, or you might want to test JPA entities, and you are not interested in the web layer when those tests run.</source>
          <target state="translated">Spring Boot의 자동 구성 시스템은 애플리케이션에서 잘 작동하지만 때로는 테스트에 너무 많은 경우가 있습니다. 응용 프로그램의 &quot;슬라이스&quot;를 테스트하는 데 필요한 구성 부분 만로드하면 도움이되는 경우가 많습니다. 예를 들어 Spring MVC 컨트롤러가 URL을 올바르게 매핑하는지 테스트하고 해당 테스트에 데이터베이스 호출을 포함하지 않거나 JPA 엔티티를 테스트하고 싶을 때 웹 레이어에 관심이 없을 수 있습니다. 테스트가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="3290b4bb951629d5e479c3a8436f07c542a22acd" translate="yes" xml:space="preserve">
          <source>Spring Boot&amp;rsquo;s configuration file handling is quite flexible, and it is often the case that properties may exist that are not bound to a &lt;code&gt;@ConfigurationProperties&lt;/code&gt; bean. You may also need to tune some attributes of an existing key. To support such cases and let you provide custom &quot;hints&quot;, the annotation processor automatically merges items from &lt;code&gt;META-INF/additional-spring-configuration-metadata.json&lt;/code&gt; into the main metadata file.</source>
          <target state="translated">Spring Boot의 구성 파일 처리는 매우 유연하며 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 빈에 바인딩되지 않은 속성이 존재할 수있는 경우가 많습니다 . 기존 키의 일부 속성을 조정해야 할 수도 있습니다. 이러한 경우를 지원하고 사용자 지정 &quot;힌트&quot;를 제공 할 수 있도록 주석 처리기는 &lt;code&gt;META-INF/additional-spring-configuration-metadata.json&lt;/code&gt; 의 항목을 기본 메타 데이터 파일에 자동으로 병합 합니다.</target>
        </trans-unit>
        <trans-unit id="376e53763e49ae2bf77f86a90d735b2b79bc4f1f" translate="yes" xml:space="preserve">
          <source>Spring Boot&amp;rsquo;s executable jars are ready-made for most popular cloud PaaS (Platform-as-a-Service) providers. These providers tend to require that you &amp;ldquo;bring your own container&amp;rdquo;. They manage application processes (not Java applications specifically), so they need an intermediary layer that adapts &lt;em&gt;your&lt;/em&gt; application to the &lt;em&gt;cloud&amp;rsquo;s&lt;/em&gt; notion of a running process.</source>
          <target state="translated">Spring Boot의 실행 가능한 jar는 가장 인기있는 클라우드 PaaS (Platform-as-a-Service) 제공 업체를 위해 준비되어 있습니다. 이러한 공급자는 귀하가 &quot;자신의 용기를 가져 오십시오&quot;를 요구하는 경향이 있습니다. 그들이 적응 중간 계층이 필요 그래서 그들은 응용 프로그램 프로세스 (안 특히 Java 응용 프로그램)을 관리 &lt;em&gt;하여&lt;/em&gt; 받는 응용 프로그램 &lt;em&gt;클라우드의&lt;/em&gt; 실행중인 프로세스의 개념을.</target>
        </trans-unit>
        <trans-unit id="3b0df70ddd30c5d67b076d1b9f2d72cec17b675d" translate="yes" xml:space="preserve">
          <source>Spring Boot&amp;rsquo;s executable jars, their launchers, and their format.</source>
          <target state="translated">Spring Boot의 실행 가능한 jar, 실행 프로그램 및 형식.</target>
        </trans-unit>
        <trans-unit id="464675961c19dbbe49963a84b80d70b31f8e329c" translate="yes" xml:space="preserve">
          <source>Spring Boot&amp;rsquo;s flexible packaging options provide a great deal of choice when it comes to deploying your application. You can deploy Spring Boot applications to a variety of cloud platforms, to container images (such as Docker), or to virtual/real machines.</source>
          <target state="translated">Spring Boot의 유연한 패키징 옵션은 애플리케이션 배포와 관련하여 많은 선택권을 제공합니다. Spring Boot 애플리케이션을 다양한 클라우드 플랫폼, 컨테이너 이미지 (예 : Docker) 또는 가상 / 실제 머신에 배포 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="256d2d0657d07ac96026c5f2e3717a27577c5966" translate="yes" xml:space="preserve">
          <source>Spring Boot&amp;rsquo;s relaxed binding rules are, as much as possible, designed to be compatible with these naming restrictions.</source>
          <target state="translated">Spring Boot의 완화 된 바인딩 규칙은 가능한 한 이러한 이름 지정 제한과 호환되도록 설계되었습니다.</target>
        </trans-unit>
        <trans-unit id="0f98a25355b6177b34c4237af6532f092aaa1cfd" translate="yes" xml:space="preserve">
          <source>Spring Boot’s auto-configuration mechanism</source>
          <target state="translated">Spring Boot의 자동 구성 메커니즘</target>
        </trans-unit>
        <trans-unit id="79e4ee3e3bb5e1700a9821616ecd6db1f140a397" translate="yes" xml:space="preserve">
          <source>Spring Boot’s developer tools</source>
          <target state="translated">Spring Boot의 개발자 도구</target>
        </trans-unit>
        <trans-unit id="6eae695eccef57991b43f632f138d391d752d3f4" translate="yes" xml:space="preserve">
          <source>Spring Boot’s syntax</source>
          <target state="translated">Spring Boot의 구문</target>
        </trans-unit>
        <trans-unit id="c49ba2b94c8e3bf8ae4751cec9baa9bf3b265678" translate="yes" xml:space="preserve">
          <source>Spring Data JPA already provides some vendor-independent configuration options (such as those for SQL logging), and Spring Boot exposes those options and a few more for Hibernate as external configuration properties. Some of them are automatically detected according to the context so you should not have to set them.</source>
          <target state="translated">SpringData JPA는 이미 일부 벤더 독립적 구성 옵션 (예 : SQL 로깅 용)을 제공하며 Spring Boot는 이러한 옵션과 Hibernate에 대한 몇 가지 더 많은 옵션을 외부 구성 속성으로 제공합니다. 그들 중 일부는 컨텍스트에 따라 자동으로 감지되므로 설정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="86d98af27c6fb4d7546f6d31e4f99e4cdd27e21e" translate="yes" xml:space="preserve">
          <source>Spring Data JPA and Spring Data Mongo can both automatically create &lt;code&gt;Repository&lt;/code&gt; implementations for you. If they are both present on the classpath, you might have to do some extra configuration to tell Spring Boot which repositories to create. The most explicit way to do that is to use the standard Spring Data &lt;code&gt;@EnableJpaRepositories&lt;/code&gt; and &lt;code&gt;@EnableMongoRepositories&lt;/code&gt; annotations and provide the location of your &lt;code&gt;Repository&lt;/code&gt; interfaces.</source>
          <target state="translated">SpringData JPA와 SpringData Mongo는 자동으로 &lt;code&gt;Repository&lt;/code&gt; 구현을 생성 할 수 있습니다. 둘 다 클래스 경로에 있으면 Spring Boot에 생성 할 리포지토리를 알리기 위해 추가 구성을 수행해야 할 수 있습니다. 이를 수행하는 가장 명시적인 방법은 표준 Spring Data &lt;code&gt;@EnableJpaRepositories&lt;/code&gt; 및 &lt;code&gt;@EnableMongoRepositories&lt;/code&gt; 주석을 사용하고 &lt;code&gt;Repository&lt;/code&gt; 인터페이스 의 위치를 ​​제공하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="b87a33e249218900767715a7366336d066591166" translate="yes" xml:space="preserve">
          <source>Spring Data JPA repositories support three different modes of bootstrapping: default, deferred, and lazy. To enable deferred or lazy bootstrapping, set the &lt;code&gt;spring.data.jpa.repositories.bootstrap-mode&lt;/code&gt; property to &lt;code&gt;deferred&lt;/code&gt; or &lt;code&gt;lazy&lt;/code&gt; respectively. When using deferred or lazy bootstrapping, the auto-configured &lt;code&gt;EntityManagerFactoryBuilder&lt;/code&gt; will use the context&amp;rsquo;s &lt;code&gt;AsyncTaskExecutor&lt;/code&gt;, if any, as the bootstrap executor. If more than one exists, the one named &lt;code&gt;applicationTaskExecutor&lt;/code&gt; will be used.</source>
          <target state="translated">SpringData JPA 리포지토리는 기본, 지연 및 지연의 세 가지 부트 스트랩 모드를 지원합니다. 지연 또는 지연 부트 스트랩을 활성화하려면 &lt;code&gt;spring.data.jpa.repositories.bootstrap-mode&lt;/code&gt; 속성을 각각 &lt;code&gt;deferred&lt;/code&gt; 또는 &lt;code&gt;lazy&lt;/code&gt; 설정합니다 . 지연 또는 지연 부트 스트랩을 사용할 때 자동 구성된 &lt;code&gt;EntityManagerFactoryBuilder&lt;/code&gt; 는 컨텍스트의 &lt;code&gt;AsyncTaskExecutor&lt;/code&gt; 를 부트 스트랩 실행기로 사용합니다. 둘 이상의 존재하는 경우 &lt;code&gt;applicationTaskExecutor&lt;/code&gt; 라는 이름 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="dcb4ed8ee2d703365a2dac323c06b5b6af7ffbb9" translate="yes" xml:space="preserve">
          <source>Spring Data JPA: Helps you to implement JPA-based repositories.</source>
          <target state="translated">SpringData JPA : JPA 기반 저장소를 구현하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="74b97d7f4b3ded02cea5003387f53d6658e1bc66" translate="yes" xml:space="preserve">
          <source>Spring Data Neo4j shares the common infrastructure with Spring Data JPA as many other Spring Data modules do. You could take the JPA example from earlier and define &lt;code&gt;City&lt;/code&gt; as Spring Data Neo4j &lt;code&gt;@Node&lt;/code&gt; rather than JPA &lt;code&gt;@Entity&lt;/code&gt; and the repository abstraction works in the same way, as shown in the following example:</source>
          <target state="translated">SpringData Neo4j는 다른 많은 SpringData 모듈과 마찬가지로 SpringData JPA와 공통 인프라를 공유합니다. 이전의 JPA 예제를 사용하여 &lt;code&gt;City&lt;/code&gt; 를 JPA &lt;code&gt;@Entity&lt;/code&gt; 가 아닌 &lt;code&gt;@Node&lt;/code&gt; Neo4j @Node 로 정의 할 수 있으며 저장소 추상화는 다음 예제와 같이 동일한 방식으로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="a7c93188a33543982387b1f354d321146d922a82" translate="yes" xml:space="preserve">
          <source>Spring Data REST can expose the &lt;code&gt;Repository&lt;/code&gt; implementations as REST endpoints for you, provided Spring MVC has been enabled for the application.</source>
          <target state="translated">Spring Data REST는 애플리케이션에 대해 Spring MVC가 활성화 된 경우 &lt;code&gt;Repository&lt;/code&gt; 구현을 REST 엔드 포인트로 노출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c533c8b1f40c9cf01bcddeaf22ee75bf29ac4f86" translate="yes" xml:space="preserve">
          <source>Spring Data can create implementations of &lt;code&gt;@Repository&lt;/code&gt; interfaces of various flavors. Spring Boot handles all of that for you, as long as those &lt;code&gt;@Repositories&lt;/code&gt; are included in the same package (or a sub-package) of your &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;@Repository&lt;/code&gt; 는 다양한 풍미 의 @Repository 인터페이스 구현을 생성 할 수 있습니다 . &lt;code&gt;@Repositories&lt;/code&gt; 가 &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; 클래스 의 동일한 패키지 (또는 하위 패키지)에 포함되어있는 한 Spring Boot는 모든 것을 처리합니다 .</target>
        </trans-unit>
        <trans-unit id="8ade1900ed248d815792daceb76ce5b75ad9e9fb" translate="yes" xml:space="preserve">
          <source>Spring Data includes basic repository support for Cassandra. Currently, this is more limited than the JPA repositories discussed earlier and needs to annotate finder methods with &lt;code&gt;@Query&lt;/code&gt;.</source>
          <target state="translated">SpringData에는 Cassandra에 대한 기본 저장소 지원이 포함되어 있습니다. 현재 이것은 앞서 논의한 JPA 저장소보다 더 제한적이며 &lt;code&gt;@Query&lt;/code&gt; 로 finder 메소드에 주석을 달아야 합니다.</target>
        </trans-unit>
        <trans-unit id="f4212d4403992d5a5b5ab7567d2d13edec58e03b" translate="yes" xml:space="preserve">
          <source>Spring Data includes repository support for Apache Solr. As with the JPA repositories discussed earlier, the basic principle is that queries are automatically constructed for you based on method names.</source>
          <target state="translated">SpringData에는 Apache Solr에 대한 저장소 지원이 포함되어 있습니다. 앞에서 설명한 JPA 저장소와 마찬가지로 기본 원칙은 메서드 이름을 기반으로 쿼리가 자동으로 생성된다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="44f0c6e6aaf876a2d1758b840b07ae8e8e0ab480" translate="yes" xml:space="preserve">
          <source>Spring Data includes repository support for Couchbase. For complete details of Spring Data Couchbase, refer to the &lt;a href=&quot;https://docs.spring.io/spring-data/couchbase/docs/4.1.1/reference/html/&quot;&gt;reference documentation&lt;/a&gt;.</source>
          <target state="translated">SpringData는 Couchbase에 대한 저장소 지원을 포함합니다. SpringData Couchbase에 대한 자세한 내용은 &lt;a href=&quot;https://docs.spring.io/spring-data/couchbase/docs/4.1.1/reference/html/&quot;&gt;참조 문서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2422803ffd647ad434c6c996a5b4ecd15f0bbf92" translate="yes" xml:space="preserve">
          <source>Spring Data includes repository support for Elasticsearch. As with the JPA repositories discussed earlier, the basic principle is that queries are constructed for you automatically based on method names.</source>
          <target state="translated">SpringData에는 Elasticsearch에 대한 리포지토리 지원이 포함되어 있습니다. 앞에서 설명한 JPA 저장소와 마찬가지로 기본 원칙은 메서드 이름을 기반으로 쿼리가 자동으로 생성된다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="a5843e401a9b6c94a8c78820bc412b1bdcb50ae0" translate="yes" xml:space="preserve">
          <source>Spring Data includes repository support for JDBC and will automatically generate SQL for the methods on &lt;code&gt;CrudRepository&lt;/code&gt;. For more advanced queries, a &lt;code&gt;@Query&lt;/code&gt; annotation is provided.</source>
          <target state="translated">&lt;code&gt;CrudRepository&lt;/code&gt; 는 JDBC에 대한 저장소 지원을 포함하며 CrudRepository 의 메소드에 대한 SQL을 자동으로 생성 합니다. 고급 쿼리의 경우 &lt;code&gt;@Query&lt;/code&gt; 주석이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="1ecd38b3e8d9cf01d3b1ee0fbfe28bbde550de37" translate="yes" xml:space="preserve">
          <source>Spring Data includes repository support for LDAP. For complete details of Spring Data LDAP, refer to the &lt;a href=&quot;https://docs.spring.io/spring-data/ldap/docs/1.0.x/reference/html/&quot;&gt;reference documentation&lt;/a&gt;.</source>
          <target state="translated">SpringData는 LDAP에 대한 저장소 지원을 포함합니다. SpringData LDAP에 대한 자세한 내용은 &lt;a href=&quot;https://docs.spring.io/spring-data/ldap/docs/1.0.x/reference/html/&quot;&gt;참조 문서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9cb22581fd1f8403357237df5659e73f93e54e32" translate="yes" xml:space="preserve">
          <source>Spring Data includes repository support for MongoDB. As with the JPA repositories discussed earlier, the basic principle is that queries are constructed automatically, based on method names.</source>
          <target state="translated">SpringData는 MongoDB에 대한 저장소 지원을 포함합니다. 앞에서 설명한 JPA 저장소와 마찬가지로 기본 원칙은 쿼리가 메서드 이름을 기반으로 자동으로 생성된다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="6c2e68d3a68251400bad57e3875058f1eab859c2" translate="yes" xml:space="preserve">
          <source>Spring Data includes repository support for Neo4j. For complete details of Spring Data Neo4j, refer to the &lt;a href=&quot;https://docs.spring.io/spring-data/neo4j/docs/6.0.1/reference/html/&quot;&gt;reference documentation&lt;/a&gt;.</source>
          <target state="translated">SpringData에는 Neo4j에 대한 저장소 지원이 포함됩니다. SpringData Neo4j에 대한 자세한 내용은 &lt;a href=&quot;https://docs.spring.io/spring-data/neo4j/docs/6.0.1/reference/html/&quot;&gt;참조 문서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e705248b11b8109b630128feecde5ae331b694d5" translate="yes" xml:space="preserve">
          <source>Spring Data provides additional projects that help you access a variety of NoSQL technologies, including:</source>
          <target state="translated">SpringData는 다음을 포함하여 다양한 NoSQL 기술에 액세스하는 데 도움이되는 추가 프로젝트를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="774e4b0ae71dce41b66bd40f45e378c34df1758a" translate="yes" xml:space="preserve">
          <source>Spring Data provides web support that simplifies the use of Spring Data repositories in a web application. Spring Boot provides properties in the &lt;code&gt;spring.data.web&lt;/code&gt; namespace for customizing its configuration. Note that if you are using Spring Data REST, you must use the properties in the &lt;code&gt;spring.data.rest&lt;/code&gt; namespace instead.</source>
          <target state="translated">SpringData는 웹 애플리케이션에서 SpringData 저장소 사용을 단순화하는 웹 지원을 제공합니다. Spring Boot는 구성을 사용자 정의하기 위해 &lt;code&gt;spring.data.web&lt;/code&gt; 네임 스페이스에 속성을 제공 합니다. &lt;code&gt;spring.data.rest&lt;/code&gt; REST를 사용하는 경우 대신 spring.data.rest 네임 스페이스 의 속성을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b1868d13c30c5954be6be4b25c38e5dfcb41cbbf" translate="yes" xml:space="preserve">
          <source>Spring Data repositories usually extend from the &lt;a href=&quot;https://docs.spring.io/spring-data/commons/docs/2.4.1/api/org/springframework/data/repository/Repository.html&quot;&gt;&lt;code&gt;Repository&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.spring.io/spring-data/commons/docs/2.4.1/api/org/springframework/data/repository/CrudRepository.html&quot;&gt;&lt;code&gt;CrudRepository&lt;/code&gt;&lt;/a&gt; interfaces. If you use auto-configuration, repositories are searched from the package containing your main configuration class (the one annotated with &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; or &lt;code&gt;@SpringBootApplication&lt;/code&gt;) down.</source>
          <target state="translated">&lt;a href=&quot;https://docs.spring.io/spring-data/commons/docs/2.4.1/api/org/springframework/data/repository/CrudRepository.html&quot;&gt; &lt;code&gt;CrudRepository&lt;/code&gt; &lt;/a&gt; 저장소는 일반적으로 &lt;a href=&quot;https://docs.spring.io/spring-data/commons/docs/2.4.1/api/org/springframework/data/repository/Repository.html&quot;&gt; &lt;code&gt;Repository&lt;/code&gt; &lt;/a&gt; 또는 CrudRepository 인터페이스 에서 확장 됩니다. 자동 구성을 사용하는 경우 기본 구성 클래스 ( &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; 또는 &lt;code&gt;@SpringBootApplication&lt;/code&gt; 로 주석 처리 된 클래스)가 포함 된 패키지에서 리포지토리를 검색 합니다.</target>
        </trans-unit>
        <trans-unit id="5073fd024ba205489148617f8bae018ee551b8cd" translate="yes" xml:space="preserve">
          <source>Spring Environment</source>
          <target state="translated">봄 환경</target>
        </trans-unit>
        <trans-unit id="9aa64903a4e144743b5224e8a786c6ce5cd77df5" translate="yes" xml:space="preserve">
          <source>Spring Framework 4.0 has native support for a &lt;code&gt;beans{}&lt;/code&gt; &amp;ldquo;DSL&amp;rdquo; (borrowed from &lt;a href=&quot;https://grails.org/&quot;&gt;Grails&lt;/a&gt;), and you can embed bean definitions in your Groovy application scripts by using the same format. This is sometimes a good way to include external features like middleware declarations, as shown in the following example:</source>
          <target state="translated">Spring Framework 4.0은 &lt;code&gt;beans{}&lt;/code&gt; &amp;ldquo;DSL&amp;rdquo;( &lt;a href=&quot;https://grails.org/&quot;&gt;Grails&lt;/a&gt; 에서 빌려 옴 ) 을 기본적으로 지원하며 , 동일한 형식을 사용하여 Groovy 애플리케이션 스크립트에 bean 정의를 포함 할 수 있습니다. 이는 다음 예제와 같이 미들웨어 선언과 같은 외부 기능을 포함하는 좋은 방법입니다.</target>
        </trans-unit>
        <trans-unit id="a305d70bf79b46ec72d261407acb096f54be290f" translate="yes" xml:space="preserve">
          <source>Spring Framework 5 Kotlin APIs, the functional way</source>
          <target state="translated">Spring Framework 5 Kotlin API, 기능적 방법</target>
        </trans-unit>
        <trans-unit id="11a6811cf61402c539ba432c0ca7cd3d36142ead" translate="yes" xml:space="preserve">
          <source>Spring Framework 5.0 provides a new &lt;code&gt;WebTestClient&lt;/code&gt; that works for &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-autoconfigured-webflux-tests&quot;&gt;WebFlux integration tests&lt;/a&gt; and both &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-with-running-server&quot;&gt;WebFlux and MVC end-to-end testing&lt;/a&gt;. It provides a fluent API for assertions, unlike &lt;code&gt;TestRestTemplate&lt;/code&gt;.</source>
          <target state="translated">Spring Framework 5.0은 &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-autoconfigured-webflux-tests&quot;&gt;WebFlux 통합 테스트&lt;/a&gt; 와 &lt;a href=&quot;#boot-features-testing-spring-boot-applications-testing-with-running-server&quot;&gt;WebFlux 및 MVC end-to-end 테스트를&lt;/a&gt; 위해 작동 하는 새로운 &lt;code&gt;WebTestClient&lt;/code&gt; 를 제공합니다 . &lt;code&gt;TestRestTemplate&lt;/code&gt; 과 달리 어설 션에 대한 유창한 API를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="df86e5f0b3c20fa300866c593763433a69702164" translate="yes" xml:space="preserve">
          <source>Spring Framework has a &lt;code&gt;DataSize&lt;/code&gt; value type that expresses a size in bytes. If you expose a &lt;code&gt;DataSize&lt;/code&gt; property, the following formats in application properties are available:</source>
          <target state="translated">Spring Framework에는 크기를 바이트 단위로 표현 하는 &lt;code&gt;DataSize&lt;/code&gt; 값 유형이 있습니다. &lt;code&gt;DataSize&lt;/code&gt; 속성 을 노출하는 경우 응용 프로그램 속성에서 다음 형식을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c11f2dad3b4f657bfccba212f37b226e4aab1388" translate="yes" xml:space="preserve">
          <source>Spring Framework provides &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#websocket&quot;&gt;rich WebSocket support&lt;/a&gt; for MVC web applications that can be easily accessed through the &lt;code&gt;spring-boot-starter-websocket&lt;/code&gt; module.</source>
          <target state="translated">Spring Framework는 &lt;code&gt;spring-boot-starter-websocket&lt;/code&gt; 모듈을 통해 쉽게 액세스 할 수있는 MVC 웹 애플리케이션에 대한 &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#websocket&quot;&gt;풍부한 WebSocket 지원&lt;/a&gt; 을 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="695ef61ec973fc1bc6d50f97d5e4c183111dfd29" translate="yes" xml:space="preserve">
          <source>Spring Framework provides two convenient classes that can be used to load YAML documents. The &lt;code&gt;YamlPropertiesFactoryBean&lt;/code&gt; loads YAML as &lt;code&gt;Properties&lt;/code&gt; and the &lt;code&gt;YamlMapFactoryBean&lt;/code&gt; loads YAML as a &lt;code&gt;Map&lt;/code&gt;.</source>
          <target state="translated">Spring Framework는 YAML 문서를로드하는 데 사용할 수있는 두 가지 편리한 클래스를 제공합니다. &lt;code&gt;YamlPropertiesFactoryBean&lt;/code&gt; 의 부하로 YAML &lt;code&gt;Properties&lt;/code&gt; 과 &lt;code&gt;YamlMapFactoryBean&lt;/code&gt; 의 부하 A와 YAML &lt;code&gt;Map&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="33bb458d33509f4224f2a5382381f3185a7dd3e4" translate="yes" xml:space="preserve">
          <source>Spring Integration.</source>
          <target state="translated">봄 통합.</target>
        </trans-unit>
        <trans-unit id="32b008ac316de0a884e9a9935dbac281cb4da6fc" translate="yes" xml:space="preserve">
          <source>Spring MVC (client and server side) uses &lt;code&gt;HttpMessageConverters&lt;/code&gt; to negotiate content conversion in an HTTP exchange. If Jackson is on the classpath, you already get the default converter(s) provided by &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt;, an instance of which is auto-configured for you.</source>
          <target state="translated">Spring MVC (클라이언트 및 서버 측)는 &lt;code&gt;HttpMessageConverters&lt;/code&gt; 를 사용 하여 HTTP 교환에서 콘텐츠 변환을 협상합니다. Jackson이 클래스 경로에 있으면 &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt; 에서 제공하는 기본 변환기를 이미 가져 오며 인스턴스는 자동으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="446fd54436b024ffdd5c5f366916815e7c6883fd" translate="yes" xml:space="preserve">
          <source>Spring MVC + Embedded Tomcat.</source>
          <target state="translated">Spring MVC + 임베디드 Tomcat.</target>
        </trans-unit>
        <trans-unit id="ab53fc4fde47db9574bcb33b8332a34cd16c2b70" translate="yes" xml:space="preserve">
          <source>Spring MVC can map incoming HTTP requests to handlers by looking at the request path and matching it to the mappings defined in your application (for example, &lt;code&gt;@GetMapping&lt;/code&gt; annotations on Controller methods).</source>
          <target state="translated">Spring MVC는 요청 경로를보고이를 애플리케이션에 정의 된 매핑 (예 : Controller 메서드의 &lt;code&gt;@GetMapping&lt;/code&gt; 주석) 과 일치시켜 들어오는 HTTP 요청을 핸들러에 매핑 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3289b359bda44dd5b241e729aa24ad983efd0be5" translate="yes" xml:space="preserve">
          <source>Spring MVC has a strategy for generating error codes for rendering error messages from binding errors: &lt;code&gt;MessageCodesResolver&lt;/code&gt;. If you set the &lt;code&gt;spring.mvc.message-codes-resolver-format&lt;/code&gt; property &lt;code&gt;PREFIX_ERROR_CODE&lt;/code&gt; or &lt;code&gt;POSTFIX_ERROR_CODE&lt;/code&gt;, Spring Boot creates one for you (see the enumeration in &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/validation/DefaultMessageCodesResolver.Format.html&quot;&gt;&lt;code&gt;DefaultMessageCodesResolver.Format&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Spring MVC는 바인딩 오류에서 오류 메시지를 렌더링하기위한 오류 코드를 생성하는 전략을 가지고 있습니다 : &lt;code&gt;MessageCodesResolver&lt;/code&gt; . 당신이 설정 한 경우 &lt;code&gt;spring.mvc.message-codes-resolver-format&lt;/code&gt; 속성 &lt;code&gt;PREFIX_ERROR_CODE&lt;/code&gt; 또는 &lt;code&gt;POSTFIX_ERROR_CODE&lt;/code&gt; 을 , 봄 부팅 당신을 위해 하나 (의 열거 참조 생성 &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/validation/DefaultMessageCodesResolver.Format.html&quot;&gt; &lt;code&gt;DefaultMessageCodesResolver.Format&lt;/code&gt; 은&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="0b42115e397b37477d7a9c4a8475c71f24e50706" translate="yes" xml:space="preserve">
          <source>Spring MVC is part of the core Spring Framework, and detailed information is available in the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc&quot;&gt;reference documentation&lt;/a&gt;. There are also several guides that cover Spring MVC available at &lt;a href=&quot;https://spring.io/guides&quot;&gt;spring.io/guides&lt;/a&gt;.</source>
          <target state="translated">Spring MVC는 핵심 Spring Framework의 일부이며 자세한 정보는 &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc&quot;&gt;참조 문서&lt;/a&gt; 에서 사용할 수 있습니다 . &lt;a href=&quot;https://spring.io/guides&quot;&gt;spring.io/guides&lt;/a&gt; 에서 사용 가능한 Spring MVC를 다루는 여러 가이드도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="01e2fe49b9c72e2105c05b454a69813a71b53b37" translate="yes" xml:space="preserve">
          <source>Spring MVC uses a &lt;code&gt;WebBindingInitializer&lt;/code&gt; to initialize a &lt;code&gt;WebDataBinder&lt;/code&gt; for a particular request. If you create your own &lt;code&gt;ConfigurableWebBindingInitializer&lt;/code&gt;&lt;code&gt;@Bean&lt;/code&gt;, Spring Boot automatically configures Spring MVC to use it.</source>
          <target state="translated">Spring MVC는 &lt;code&gt;WebBindingInitializer&lt;/code&gt; 를 사용 하여 특정 요청에 대해 &lt;code&gt;WebDataBinder&lt;/code&gt; 를 초기화합니다 . 자신의 &lt;code&gt;ConfigurableWebBindingInitializer&lt;/code&gt; &lt;code&gt;@Bean&lt;/code&gt; 을 생성하면 Spring Boot는 자동으로이를 사용하도록 Spring MVC를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="9694617a3eba599acee486b37dd641ee55a0f4d1" translate="yes" xml:space="preserve">
          <source>Spring MVC uses the &lt;code&gt;HttpMessageConverter&lt;/code&gt; interface to convert HTTP requests and responses. Sensible defaults are included out of the box. For example, objects can be automatically converted to JSON (by using the Jackson library) or XML (by using the Jackson XML extension, if available, or by using JAXB if the Jackson XML extension is not available). By default, strings are encoded in &lt;code&gt;UTF-8&lt;/code&gt;.</source>
          <target state="translated">Spring MVC는 &lt;code&gt;HttpMessageConverter&lt;/code&gt; 인터페이스를 사용하여 HTTP 요청과 응답을 변환합니다. 현명한 기본값은 기본적으로 포함되어 있습니다. 예를 들어 객체는 JSON (Jackson 라이브러리 사용) 또는 XML (사용 가능한 경우 Jackson XML 확장 사용 또는 Jackson XML 확장을 사용할 수없는 경우 JAXB 사용)으로 자동 변환 될 수 있습니다. 기본적으로 문자열은 &lt;code&gt;UTF-8&lt;/code&gt; 로 인코딩됩니다 .</target>
        </trans-unit>
        <trans-unit id="3603fc1313aa68af5f5dff9bd8f80777c6766f12" translate="yes" xml:space="preserve">
          <source>Spring MVC view prefix.</source>
          <target state="translated">Spring MVC 뷰 접두사.</target>
        </trans-unit>
        <trans-unit id="97b525d2b30c5008a5931d9895fc190655b26979" translate="yes" xml:space="preserve">
          <source>Spring MVC view suffix.</source>
          <target state="translated">Spring MVC 뷰 접미사.</target>
        </trans-unit>
        <trans-unit id="d5766035e785d82041da45bef10ff9405abb733b" translate="yes" xml:space="preserve">
          <source>Spring ORM: Core ORM support from the Spring Framework.</source>
          <target state="translated">Spring ORM : Spring Framework의 핵심 ORM 지원.</target>
        </trans-unit>
        <trans-unit id="bb8ce5a96bffb18063e5843dc5c69237468fbbcf" translate="yes" xml:space="preserve">
          <source>Spring Profiles provide a way to segregate parts of your application configuration and make it be available only in certain environments. Any &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Configuration&lt;/code&gt; or &lt;code&gt;@ConfigurationProperties&lt;/code&gt; can be marked with &lt;code&gt;@Profile&lt;/code&gt; to limit when it is loaded, as shown in the following example:</source>
          <target state="translated">Spring Profiles는 애플리케이션 구성의 일부를 분리하고 특정 환경에서만 사용할 수 있도록하는 방법을 제공합니다. 상관 &lt;code&gt;@Component&lt;/code&gt; , &lt;code&gt;@Configuration&lt;/code&gt; 또는 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 가 표시 될 수 &lt;code&gt;@Profile&lt;/code&gt; 아래 예와 같이,이로드 될 때 제한하기 :</target>
        </trans-unit>
        <trans-unit id="ea703b4deff4a15777c7b036785dff957b375e0b" translate="yes" xml:space="preserve">
          <source>Spring Security can be used to secure a Jersey-based web application in much the same way as it can be used to secure a Spring MVC-based web application. However, if you want to use Spring Security&amp;rsquo;s method-level security with Jersey, you must configure Jersey to use &lt;code&gt;setStatus(int)&lt;/code&gt; rather &lt;code&gt;sendError(int)&lt;/code&gt;. This prevents Jersey from committing the response before Spring Security has had an opportunity to report an authentication or authorization failure to the client.</source>
          <target state="translated">Spring Security는 Spring MVC 기반 웹 애플리케이션을 보호하는 데 사용할 수있는 것과 거의 동일한 방식으로 Jersey 기반 웹 애플리케이션을 보호하는 데 사용할 수 있습니다. 그러나 Jersey와 함께 Spring Security의 메서드 수준 보안을 사용하려면 &lt;code&gt;sendError(int)&lt;/code&gt; 대신 &lt;code&gt;setStatus(int)&lt;/code&gt; 를 사용하도록 Jersey를 구성해야합니다 . 이것은 Spring Security가 클라이언트에게 인증 또는 권한 부여 실패를보고 할 기회를 갖기 전에 Jersey가 응답을 커밋하는 것을 방지합니다.</target>
        </trans-unit>
        <trans-unit id="da16dccc0804ce9c9e41f86be61f5159e7d63bf4" translate="yes" xml:space="preserve">
          <source>Spring Security provides comprehensive integration with Spring MVC Test and this can also be used when testing controllers using the &lt;code&gt;@WebMvcTest&lt;/code&gt; slice and &lt;code&gt;MockMvc&lt;/code&gt;.</source>
          <target state="translated">Spring Security는 Spring MVC Test와의 포괄적 인 통합을 제공하며 &lt;code&gt;@WebMvcTest&lt;/code&gt; 슬라이스 및 &lt;code&gt;MockMvc&lt;/code&gt; 를 사용하여 컨트롤러를 테스트 할 때도 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9fd4b85e41885ac1f546c9b32e74103a903de4be" translate="yes" xml:space="preserve">
          <source>Spring Security provides support for running tests as a specific user. For example, the test in the snippet below will run with an authenticated user that has the &lt;code&gt;ADMIN&lt;/code&gt; role.</source>
          <target state="translated">Spring Security는 특정 사용자로 테스트 실행을 지원합니다. 예를 들어 아래 스 니펫의 테스트는 &lt;code&gt;ADMIN&lt;/code&gt; 역할 을 가진 인증 된 사용자로 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="5e0a9bcffd4b98e18506dafc37cebace9db7abcc" translate="yes" xml:space="preserve">
          <source>Spring Security.</source>
          <target state="translated">봄 보안.</target>
        </trans-unit>
        <trans-unit id="b1847a71275d852ee082ce8115a11ed7bbca3564" translate="yes" xml:space="preserve">
          <source>Spring Transaction Management.</source>
          <target state="translated">스프링 트랜잭션 관리.</target>
        </trans-unit>
        <trans-unit id="590a753e37e2d2d33c3442f7dc834783b697b3da" translate="yes" xml:space="preserve">
          <source>Spring WebFlux applications do not strictly depend on the Servlet API, so they cannot be deployed as war files and do not use the &lt;code&gt;src/main/webapp&lt;/code&gt; directory.</source>
          <target state="translated">Spring WebFlux 애플리케이션은 Servlet API에 엄격하게 의존하지 않으므로 war 파일로 배포 할 수 없으며 &lt;code&gt;src/main/webapp&lt;/code&gt; 디렉토리를 사용하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="1bb5260092b8ba0b4a4ee76ee32d3df2f67693b6" translate="yes" xml:space="preserve">
          <source>Spring WebFlux comes in two flavors: functional and annotation-based. The annotation-based one is quite close to the Spring MVC model, as shown in the following example:</source>
          <target state="translated">Spring WebFlux는 기능 및 주석 기반의 두 가지 유형으로 제공됩니다. 어노테이션 기반은 다음 예제에 표시된 것처럼 Spring MVC 모델과 매우 유사합니다.</target>
        </trans-unit>
        <trans-unit id="ecef2457df643e364260ef12bab7353551dfe3da" translate="yes" xml:space="preserve">
          <source>Spring WebFlux is the new reactive web framework introduced in Spring Framework 5.0. Unlike Spring MVC, it does not require the Servlet API, is fully asynchronous and non-blocking, and implements the &lt;a href=&quot;https://www.reactive-streams.org/&quot;&gt;Reactive Streams&lt;/a&gt; specification through &lt;a href=&quot;https://projectreactor.io/&quot;&gt;the Reactor project&lt;/a&gt;.</source>
          <target state="translated">Spring WebFlux는 Spring Framework 5.0에 도입 된 새로운 반응 형 웹 프레임 워크입니다. Spring MVC와 달리 Servlet API를 필요로하지 않고 완전히 비동기적이고 비 차단 적이며 &lt;a href=&quot;https://projectreactor.io/&quot;&gt;Reactor 프로젝트를&lt;/a&gt; 통해 &lt;a href=&quot;https://www.reactive-streams.org/&quot;&gt;Reactive Streams&lt;/a&gt; 사양을 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="75a2289268bda2e0ae6db2a1eb7ecc35c0811ebc" translate="yes" xml:space="preserve">
          <source>Spring WebFlux provides a &lt;code&gt;WebFilter&lt;/code&gt; interface that can be implemented to filter HTTP request-response exchanges. &lt;code&gt;WebFilter&lt;/code&gt; beans found in the application context will be automatically used to filter each exchange.</source>
          <target state="translated">Spring WebFlux는 HTTP 요청-응답 교환을 필터링하기 위해 구현할 수 있는 &lt;code&gt;WebFilter&lt;/code&gt; 인터페이스를 제공합니다 . 애플리케이션 컨텍스트에서 발견 된 &lt;code&gt;WebFilter&lt;/code&gt; Bean은 각 교환을 필터링하는 데 자동으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6a289af723764ffd67c69afd504cb766d7f9e7cf" translate="yes" xml:space="preserve">
          <source>Spring WebFlux uses the &lt;code&gt;HttpMessageReader&lt;/code&gt; and &lt;code&gt;HttpMessageWriter&lt;/code&gt; interfaces to convert HTTP requests and responses. They are configured with &lt;code&gt;CodecConfigurer&lt;/code&gt; to have sensible defaults by looking at the libraries available in your classpath.</source>
          <target state="translated">Spring WebFlux는 &lt;code&gt;HttpMessageReader&lt;/code&gt; 및 &lt;code&gt;HttpMessageWriter&lt;/code&gt; 인터페이스를 사용하여 HTTP 요청 및 응답을 변환합니다. 클래스 경로에서 사용 가능한 라이브러리를 살펴봄으로써 합리적인 기본값을 갖도록 &lt;code&gt;CodecConfigurer&lt;/code&gt; 로 구성됩니다 .</target>
        </trans-unit>
        <trans-unit id="196d723cefbf6a677cbb2edb79c190fd3ce65830" translate="yes" xml:space="preserve">
          <source>Spring boot cli</source>
          <target state="translated">스프링 부트 CLI</target>
        </trans-unit>
        <trans-unit id="af8ccb32a3c09d86c755e24fbaa20421b40dc819" translate="yes" xml:space="preserve">
          <source>Spring boot features</source>
          <target state="translated">봄 부팅 기능</target>
        </trans-unit>
        <trans-unit id="07ce6acf0c96286df971d0206138322b040b6ddc" translate="yes" xml:space="preserve">
          <source>Spring extensions are not supported with Groovy configuration. Any &lt;code&gt;logback-spring.groovy&lt;/code&gt; files will not be detected.</source>
          <target state="translated">Spring 확장은 Groovy 구성에서 지원되지 않습니다. 모든 &lt;code&gt;logback-spring.groovy&lt;/code&gt; 의 파일은 감지되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b02da7009c3a075c0bb5dd15d9f47193e9d63471" translate="yes" xml:space="preserve">
          <source>Spring for Apache Kafka provides a convenient way to test projects with an embedded Apache Kafka broker. To use this feature, annotate a test class with &lt;code&gt;@EmbeddedKafka&lt;/code&gt; from the &lt;code&gt;spring-kafka-test&lt;/code&gt; module. For more information, please see the Spring for Apache Kafka &lt;a href=&quot;https://docs.spring.io/spring-kafka/docs/2.6.3/reference/html/#embedded-kafka-annotation&quot;&gt;reference manual&lt;/a&gt;.</source>
          <target state="translated">Spring for Apache Kafka는 임베디드 Apache Kafka 브로커를 사용하여 프로젝트를 테스트하는 편리한 방법을 제공합니다. 이 기능을 사용하려면 &lt;code&gt;spring-kafka-test&lt;/code&gt; 모듈 에서 &lt;code&gt;@EmbeddedKafka&lt;/code&gt; 를 사용하여 테스트 클래스에 주석을 추가하십시오 . 자세한 내용은 Spring for Apache Kafka &lt;a href=&quot;https://docs.spring.io/spring-kafka/docs/2.6.3/reference/html/#embedded-kafka-annotation&quot;&gt;참조 매뉴얼을 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="77304db138247edee41178e26bf93d339c274e9b" translate="yes" xml:space="preserve">
          <source>Spring for Apache Kafka provides a factory bean to create a &lt;code&gt;StreamsBuilder&lt;/code&gt; object and manage the lifecycle of its streams. Spring Boot auto-configures the required &lt;code&gt;KafkaStreamsConfiguration&lt;/code&gt; bean as long as &lt;code&gt;kafka-streams&lt;/code&gt; is on the classpath and Kafka Streams is enabled via the &lt;code&gt;@EnableKafkaStreams&lt;/code&gt; annotation.</source>
          <target state="translated">Spring for Apache Kafka는 &lt;code&gt;StreamsBuilder&lt;/code&gt; 객체 를 생성 하고 스트림의 라이프 사이클을 관리 하기위한 팩토리 빈을 제공합니다 . Spring Boot 는 &lt;code&gt;kafka-streams&lt;/code&gt; 가 클래스 경로에 있고 Kafka Streams가 &lt;code&gt;@EnableKafkaStreams&lt;/code&gt; 주석을 통해 활성화 되어 있는 한 필요한 &lt;code&gt;KafkaStreamsConfiguration&lt;/code&gt; 빈을 자동 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="1b96a6bad80775aa04f74dedbf2c560d44307b97" translate="yes" xml:space="preserve">
          <source>Spring uses &lt;code&gt;HttpMessageConverters&lt;/code&gt; to render &lt;code&gt;@ResponseBody&lt;/code&gt; (or responses from &lt;code&gt;@RestController&lt;/code&gt;). You can contribute additional converters by adding beans of the appropriate type in a Spring Boot context. If a bean you add is of a type that would have been included by default anyway (such as &lt;code&gt;MappingJackson2HttpMessageConverter&lt;/code&gt; for JSON conversions), it replaces the default value. A convenience bean of type &lt;code&gt;HttpMessageConverters&lt;/code&gt; is provided and is always available if you use the default MVC configuration. It has some useful methods to access the default and user-enhanced message converters (For example, it can be useful if you want to manually inject them into a custom &lt;code&gt;RestTemplate&lt;/code&gt;).</source>
          <target state="translated">Spring은 &lt;code&gt;HttpMessageConverters&lt;/code&gt; 를 사용 하여 &lt;code&gt;@ResponseBody&lt;/code&gt; (또는 &lt;code&gt;@RestController&lt;/code&gt; 의 응답) 를 렌더링 합니다. Spring Boot 컨텍스트에서 적절한 유형의 Bean을 추가하여 추가 변환기를 제공 할 수 있습니다. 추가 한 Bean이 어쨌든 기본적으로 포함되었을 유형 인 경우 (예 : JSON 변환을위한 &lt;code&gt;MappingJackson2HttpMessageConverter&lt;/code&gt; ) 기본값을 대체합니다. &lt;code&gt;HttpMessageConverters&lt;/code&gt; 유형의 편의 Bean 이 제공되며 기본 MVC 구성을 사용하는 경우 항상 사용할 수 있습니다. 기본 및 사용자 강화 메시지 변환기에 액세스 할 수있는 몇 가지 유용한 방법이 있습니다 (예를 들어 사용자 지정 &lt;code&gt;RestTemplate&lt;/code&gt; 에 수동으로 삽입하려는 경우 유용 할 수 있습니다 ).</target>
        </trans-unit>
        <trans-unit id="2a8b677084199b3734a71bff425cc13faac327da" translate="yes" xml:space="preserve">
          <source>Spring&amp;rsquo;s &lt;code&gt;AmqpTemplate&lt;/code&gt; and &lt;code&gt;AmqpAdmin&lt;/code&gt; are auto-configured, and you can autowire them directly into your own beans, as shown in the following example:</source>
          <target state="translated">Spring의 &lt;code&gt;AmqpTemplate&lt;/code&gt; 및 &lt;code&gt;AmqpAdmin&lt;/code&gt; 은 자동 구성되며 다음 예제와 같이 직접 자신의 Bean에 자동으로 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="203be8b896b86ae54b4ca3a8d9dfa3f9d5b5e913" translate="yes" xml:space="preserve">
          <source>Spring&amp;rsquo;s &lt;code&gt;JdbcTemplate&lt;/code&gt; and &lt;code&gt;NamedParameterJdbcTemplate&lt;/code&gt; classes are auto-configured, and you can &lt;code&gt;@Autowire&lt;/code&gt; them directly into your own beans, as shown in the following example:</source>
          <target state="translated">Spring의 &lt;code&gt;JdbcTemplate&lt;/code&gt; 및 &lt;code&gt;NamedParameterJdbcTemplate&lt;/code&gt; 클래스는 자동 구성 되며 다음 예제와 같이 직접 자신의 빈에 &lt;code&gt;@Autowire&lt;/code&gt; 로 연결할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="35a05fa0360ee8d05248c46152d3f7c1e6bd4ecc" translate="yes" xml:space="preserve">
          <source>Spring&amp;rsquo;s &lt;code&gt;JmsTemplate&lt;/code&gt; is auto-configured, and you can autowire it directly into your own beans, as shown in the following example:</source>
          <target state="translated">Spring의 &lt;code&gt;JmsTemplate&lt;/code&gt; 은 자동 구성되며 다음 예제와 같이 직접 자신의 빈에 자동으로 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a168111a91530f5b3a00aae828b33d25eef3950f" translate="yes" xml:space="preserve">
          <source>Spring&amp;rsquo;s &lt;code&gt;KafkaTemplate&lt;/code&gt; is auto-configured, and you can autowire it directly in your own beans, as shown in the following example:</source>
          <target state="translated">Spring의 &lt;code&gt;KafkaTemplate&lt;/code&gt; 은 자동 구성되며 다음 예제와 같이 자신의 빈에서 직접 자동으로 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f0ca980d1019aa3ecab83f49446918024def901" translate="yes" xml:space="preserve">
          <source>Spring&amp;rsquo;s test framework caches application contexts between tests. Therefore, as long as your tests share the same configuration (no matter how it is discovered), the potentially time-consuming process of loading the context happens only once.</source>
          <target state="translated">Spring의 테스트 프레임 워크는 테스트간에 애플리케이션 컨텍스트를 캐시합니다. 따라서 테스트가 동일한 구성을 공유하는 한 (검색 방법에 관계없이) 잠재적으로 시간이 많이 걸리는 컨텍스트로드 프로세스는 한 번만 발생합니다.</target>
        </trans-unit>
        <trans-unit id="241f5bef53eec4f8c32b195459a7e822e7a83449" translate="yes" xml:space="preserve">
          <source>SpringApplication</source>
          <target state="translated">SpringApplication</target>
        </trans-unit>
        <trans-unit id="164ebb9ef9a4e5fe90da6512b46c605a9983c835" translate="yes" xml:space="preserve">
          <source>Stackdriver</source>
          <target state="translated">Stackdriver</target>
        </trans-unit>
        <trans-unit id="78819015bbc4b3fb6e3df933d45c82518008681e" translate="yes" xml:space="preserve">
          <source>Stackdriver registry pushes metrics to &lt;a href=&quot;https://cloud.google.com/stackdriver/&quot;&gt;Stackdriver&lt;/a&gt; periodically. To export metrics to SaaS &lt;a href=&quot;https://micrometer.io/docs/registry/stackdriver&quot;&gt;Stackdriver&lt;/a&gt;, your Google Cloud project id must be provided:</source>
          <target state="translated">Stackdriver 레지스트리는 측정 항목을 주기적으로 &lt;a href=&quot;https://cloud.google.com/stackdriver/&quot;&gt;Stackdriver에&lt;/a&gt; 푸시 합니다. 측정 항목을 SaaS &lt;a href=&quot;https://micrometer.io/docs/registry/stackdriver&quot;&gt;Stackdriver로&lt;/a&gt; 내보내 려면 Google Cloud 프로젝트 ID를 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="cb1f592c77001000dceeaf4a3345622b2423f56a" translate="yes" xml:space="preserve">
          <source>Stackoverflow with &lt;code&gt;spring&lt;/code&gt; and &lt;code&gt;kotlin&lt;/code&gt; tags</source>
          <target state="translated">&lt;code&gt;spring&lt;/code&gt; 및 &lt;code&gt;kotlin&lt;/code&gt; 태그가있는 Stackoverflow</target>
        </trans-unit>
        <trans-unit id="bbad995611ea6d303ca33012156e1cd3c2806d1f" translate="yes" xml:space="preserve">
          <source>Standard Groovy includes a &lt;code&gt;@Grab&lt;/code&gt; annotation, which lets you declare dependencies on third-party libraries. This useful technique lets Groovy download jars in the same way as Maven or Gradle would but without requiring you to use a build tool.</source>
          <target state="translated">표준 Groovy에는 &lt;code&gt;@Grab&lt;/code&gt; 주석이 포함되어있어 타사 라이브러리에 대한 종속성을 선언 할 수 있습니다. 이 유용한 기술을 통해 Groovy는 Maven 또는 Gradle과 동일한 방식으로 jar를 다운로드 할 수 있지만 빌드 도구를 사용할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="cb385827c172cb9a41ed414b2034abcce7c0d75c" translate="yes" xml:space="preserve">
          <source>Standard YAML list syntax or comma-separated values</source>
          <target state="translated">표준 YAML 목록 구문 또는 쉼표로 구분 된 값</target>
        </trans-unit>
        <trans-unit id="aa93c49f9bfb5f63908b70d40a92fbcb7fb6d547" translate="yes" xml:space="preserve">
          <source>Standard camel case syntax.</source>
          <target state="translated">표준 카멜 케이스 구문.</target>
        </trans-unit>
        <trans-unit id="c32087925b26e1f5aee1a665db618e44dfa72856" translate="yes" xml:space="preserve">
          <source>Standard list syntax using &lt;code&gt;[ ]&lt;/code&gt; or comma-separated values</source>
          <target state="translated">&lt;code&gt;[ ]&lt;/code&gt; 또는 쉼표로 구분 된 값을 사용하는 표준 목록 구문</target>
        </trans-unit>
        <trans-unit id="bdf08078d6819185099f8cb475ad8ccf5c14847d" translate="yes" xml:space="preserve">
          <source>Start the container automatically on startup.</source>
          <target state="translated">시작시 컨테이너를 자동으로 시작합니다.</target>
        </trans-unit>
        <trans-unit id="faa9e7e7ef5a264c58c68a4a0b9c8bd54241450a" translate="yes" xml:space="preserve">
          <source>Started</source>
          <target state="translated">Started</target>
        </trans-unit>
        <trans-unit id="bf7151c6ac0f43251a056474540fc8a4ae98493d" translate="yes" xml:space="preserve">
          <source>Starter for JMS messaging using Apache ActiveMQ</source>
          <target state="translated">Apache ActiveMQ를 사용하는 JMS 메시징 용 스타터</target>
        </trans-unit>
        <trans-unit id="7b9ac978d24bdfb33de35b98f7305bf3b0824191" translate="yes" xml:space="preserve">
          <source>Starter for JMS messaging using Apache Artemis</source>
          <target state="translated">Apache Artemis를 사용하는 JMS 메시징 용 스타터</target>
        </trans-unit>
        <trans-unit id="60e6dd7a7d9199a2fb6906f79174b026ba00ffea" translate="yes" xml:space="preserve">
          <source>Starter for JTA transactions using Atomikos</source>
          <target state="translated">Atomikos를 사용하는 JTA 트랜잭션을위한 스타터</target>
        </trans-unit>
        <trans-unit id="5c320da25168f8d135a7646becb4336699f41bdd" translate="yes" xml:space="preserve">
          <source>Starter for JTA transactions using Bitronix. Deprecated since 2.3.0</source>
          <target state="translated">Bitronix를 사용하는 JTA 트랜잭션을위한 스타터. 2.3.0부터 사용되지 않음</target>
        </trans-unit>
        <trans-unit id="4cacca1d29d6c38adce6f1524c6246b2ae5e94ac" translate="yes" xml:space="preserve">
          <source>Starter for aspect-oriented programming with Spring AOP and AspectJ</source>
          <target state="translated">Spring AOP 및 AspectJ를 사용한 aspect 지향 프로그래밍을위한 스타터</target>
        </trans-unit>
        <trans-unit id="1ff6219981e566462f173c85441011f9ce408f25" translate="yes" xml:space="preserve">
          <source>Starter for building MVC web applications using FreeMarker views</source>
          <target state="translated">FreeMarker보기를 사용하여 MVC 웹 애플리케이션을 빌드하기위한 스타터</target>
        </trans-unit>
        <trans-unit id="14c44c1f99c1cc1f55e0361f1440636608f0d187" translate="yes" xml:space="preserve">
          <source>Starter for building MVC web applications using Groovy Templates views</source>
          <target state="translated">Groovy 템플릿보기를 사용하여 MVC 웹 애플리케이션을 빌드하기위한 스타터</target>
        </trans-unit>
        <trans-unit id="e3d1c99dd4fbea2ab7b7731a0b4fb8e11d6356e4" translate="yes" xml:space="preserve">
          <source>Starter for building MVC web applications using Thymeleaf views</source>
          <target state="translated">Thymeleaf보기를 사용하여 MVC 웹 애플리케이션을 빌드하기위한 스타터</target>
        </trans-unit>
        <trans-unit id="d130d969d42b576be5602c636ca6f5ef528242b7" translate="yes" xml:space="preserve">
          <source>Starter for building RESTful web applications using JAX-RS and Jersey. An alternative to &lt;a href=&quot;#spring-boot-starter-web&quot;&gt;&lt;code&gt;spring-boot-starter-web&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">JAX-RS 및 Jersey를 사용하여 RESTful 웹 애플리케이션을 빌드하기위한 스타터입니다. &lt;a href=&quot;#spring-boot-starter-web&quot;&gt; &lt;code&gt;spring-boot-starter-web&lt;/code&gt; &lt;/a&gt; 의 대안</target>
        </trans-unit>
        <trans-unit id="1a7b6ae4d2131f0808e9e340bd37755ff8808e97" translate="yes" xml:space="preserve">
          <source>Starter for building RSocket clients and servers</source>
          <target state="translated">RSocket 클라이언트 및 서버 구축을위한 스타터</target>
        </trans-unit>
        <trans-unit id="0571ef96039a66835f2eadf3ee291bdad016f71d" translate="yes" xml:space="preserve">
          <source>Starter for building WebFlux applications using Spring Framework&amp;rsquo;s Reactive Web support</source>
          <target state="translated">Spring Framework의 Reactive Web 지원을 사용하여 WebFlux 애플리케이션을 빌드하기위한 Starter</target>
        </trans-unit>
        <trans-unit id="a98edbdd36b4f6546a8ebdb46524be712382106f" translate="yes" xml:space="preserve">
          <source>Starter for building WebSocket applications using Spring Framework&amp;rsquo;s WebSocket support</source>
          <target state="translated">Spring Framework의 WebSocket 지원을 사용하여 WebSocket 애플리케이션을 빌드하기위한 스타터</target>
        </trans-unit>
        <trans-unit id="b16fb7aaa9af3923a86c550b4f4e34adad4aeae3" translate="yes" xml:space="preserve">
          <source>Starter for building hypermedia-based RESTful web application with Spring MVC and Spring HATEOAS</source>
          <target state="translated">Spring MVC 및 Spring HATEOAS를 사용하여 하이퍼 미디어 기반 RESTful 웹 애플리케이션을 빌드하기위한 스타터</target>
        </trans-unit>
        <trans-unit id="e69b703940c85e6160db7a2dba84449d47057c7d" translate="yes" xml:space="preserve">
          <source>Starter for building web applications using Mustache views</source>
          <target state="translated">Mustache보기를 사용하여 웹 애플리케이션을 빌드하기위한 스타터</target>
        </trans-unit>
        <trans-unit id="8096c5db8e5cacd4d0621194edc9dfea0e1cd907" translate="yes" xml:space="preserve">
          <source>Starter for building web, including RESTful, applications using Spring MVC. Uses Tomcat as the default embedded container</source>
          <target state="translated">Spring MVC를 사용하는 RESTful 애플리케이션을 포함한 웹 구축을위한 스타터. 기본 포함 컨테이너로 Tomcat 사용</target>
        </trans-unit>
        <trans-unit id="e83e53d942b9269baf6f0a7d6306268512528669" translate="yes" xml:space="preserve">
          <source>Starter for exposing Spring Data repositories over REST using Spring Data REST</source>
          <target state="translated">SpringData REST를 사용하여 REST를 통해 SpringData 저장소를 노출하기위한 스타터</target>
        </trans-unit>
        <trans-unit id="ba396b4c61317539b459cf71d26a4063eae85f42" translate="yes" xml:space="preserve">
          <source>Starter for logging using Logback. Default logging starter</source>
          <target state="translated">Logback을 사용하여 로깅을 시작합니다. 기본 로깅 스타터</target>
        </trans-unit>
        <trans-unit id="33c7c8986e1397642940ad593349298b633894e8" translate="yes" xml:space="preserve">
          <source>Starter for reading and writing json</source>
          <target state="translated">JSON을 읽고 쓰기위한 스타터</target>
        </trans-unit>
        <trans-unit id="11befc28ed3456c0d7f92196ba214a0dd8a74fc3" translate="yes" xml:space="preserve">
          <source>Starter for testing Spring Boot applications with libraries including JUnit Jupiter, Hamcrest and Mockito</source>
          <target state="translated">JUnit Jupiter, Hamcrest 및 Mockito를 포함한 라이브러리로 Spring Boot 애플리케이션을 테스트하기위한 Starter</target>
        </trans-unit>
        <trans-unit id="c01dc7ba2d18cc957a6723b0f0381a226e33f3f0" translate="yes" xml:space="preserve">
          <source>Starter for using Cassandra distributed database and Spring Data Cassandra</source>
          <target state="translated">Cassandra 분산 데이터베이스 및 SpringData Cassandra 사용을위한 스타터</target>
        </trans-unit>
        <trans-unit id="0147a430a0c9a084779cc74f3ab46646a4a270e9" translate="yes" xml:space="preserve">
          <source>Starter for using Cassandra distributed database and Spring Data Cassandra Reactive</source>
          <target state="translated">Cassandra 분산 데이터베이스 및 SpringData Cassandra Reactive 사용을위한 스타터</target>
        </trans-unit>
        <trans-unit id="7627d7fd90b553b5df2eb0ac474892ff7f7d4d9d" translate="yes" xml:space="preserve">
          <source>Starter for using Couchbase document-oriented database and Spring Data Couchbase</source>
          <target state="translated">Couchbase 문서 지향 데이터베이스 및 SpringData Couchbase 사용을위한 스타터</target>
        </trans-unit>
        <trans-unit id="73ba90a0bfbfda719c8aa90d6e67cb5bec4eb13c" translate="yes" xml:space="preserve">
          <source>Starter for using Couchbase document-oriented database and Spring Data Couchbase Reactive</source>
          <target state="translated">Couchbase 문서 지향 데이터베이스 및 SpringData Couchbase Reactive 사용을위한 스타터</target>
        </trans-unit>
        <trans-unit id="4c67285fcc525ce9f3cf62cb583ee3df7b99f55a" translate="yes" xml:space="preserve">
          <source>Starter for using Elasticsearch search and analytics engine and Spring Data Elasticsearch</source>
          <target state="translated">Elasticsearch 검색 및 분석 엔진과 SpringData Elasticsearch를 사용하기위한 스타터</target>
        </trans-unit>
        <trans-unit id="740e1f6c44102e04b29ce96a861501c191168556" translate="yes" xml:space="preserve">
          <source>Starter for using JDBC with the HikariCP connection pool</source>
          <target state="translated">HikariCP 연결 풀과 함께 JDBC를 사용하기위한 스타터</target>
        </trans-unit>
        <trans-unit id="49b81d30a6a15e92878339ed1b64043d0219ae46" translate="yes" xml:space="preserve">
          <source>Starter for using Java Bean Validation with Hibernate Validator</source>
          <target state="translated">Hibernate Validator와 함께 Java Bean Validation을 사용하기위한 Starter</target>
        </trans-unit>
        <trans-unit id="1392aa295bd0e3cadcff647c736660a9ac91a89a" translate="yes" xml:space="preserve">
          <source>Starter for using Java Mail and Spring Framework&amp;rsquo;s email sending support</source>
          <target state="translated">Java Mail 및 Spring Framework의 이메일 전송 지원을 사용하기위한 Starter</target>
        </trans-unit>
        <trans-unit id="fa61b484be99635a85e4ea3ce6e401f348850264" translate="yes" xml:space="preserve">
          <source>Starter for using Jetty as the embedded servlet container. An alternative to &lt;a href=&quot;#spring-boot-starter-tomcat&quot;&gt;&lt;code&gt;spring-boot-starter-tomcat&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Jetty를 임베디드 서블릿 컨테이너로 사용하기위한 스타터입니다. &lt;a href=&quot;#spring-boot-starter-tomcat&quot;&gt; &lt;code&gt;spring-boot-starter-tomcat&lt;/code&gt; &lt;/a&gt; 의 대안</target>
        </trans-unit>
        <trans-unit id="3c029d6cba40f66a2830682948b47fd6a2ff7437" translate="yes" xml:space="preserve">
          <source>Starter for using Log4j2 for logging. An alternative to &lt;a href=&quot;#spring-boot-starter-logging&quot;&gt;&lt;code&gt;spring-boot-starter-logging&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">로깅을 위해 Log4j2를 사용하기위한 스타터. &lt;a href=&quot;#spring-boot-starter-logging&quot;&gt; &lt;code&gt;spring-boot-starter-logging&lt;/code&gt; &lt;/a&gt; 의 대안</target>
        </trans-unit>
        <trans-unit id="b164f9695419f9c0fab36f4db7a075dcc14a9449" translate="yes" xml:space="preserve">
          <source>Starter for using MongoDB document-oriented database and Spring Data MongoDB</source>
          <target state="translated">MongoDB 문서 지향 데이터베이스 및 SpringData MongoDB 사용을위한 스타터</target>
        </trans-unit>
        <trans-unit id="b4500df7459fd3f5630c8b5190b1fdbf88117d69" translate="yes" xml:space="preserve">
          <source>Starter for using MongoDB document-oriented database and Spring Data MongoDB Reactive</source>
          <target state="translated">MongoDB 문서 지향 데이터베이스 및 SpringData MongoDB Reactive 사용을위한 스타터</target>
        </trans-unit>
        <trans-unit id="079d35ed31ef939b9055217621bea6972a6c261b" translate="yes" xml:space="preserve">
          <source>Starter for using Neo4j graph database and Spring Data Neo4j</source>
          <target state="translated">Neo4j 그래프 데이터베이스 및 SpringData Neo4j 사용을위한 스타터</target>
        </trans-unit>
        <trans-unit id="50d78ef58ae0ab8758d5b985350536ed3bc008b5" translate="yes" xml:space="preserve">
          <source>Starter for using Reactor Netty as the embedded reactive HTTP server.</source>
          <target state="translated">Reactor Netty를 임베디드 리 액티브 HTTP 서버로 사용하기위한 스타터.</target>
        </trans-unit>
        <trans-unit id="a7a49b865d569b04788c39f74fbf1eaf0d54e6a5" translate="yes" xml:space="preserve">
          <source>Starter for using Redis key-value data store with Spring Data Redis and the Lettuce client</source>
          <target state="translated">SpringData Redis 및 Lettuce 클라이언트와 함께 Redis 키-값 데이터 저장소를 사용하기위한 스타터</target>
        </trans-unit>
        <trans-unit id="e80deeba2c3a5163803eca7ec4fce5da6d695cc3" translate="yes" xml:space="preserve">
          <source>Starter for using Redis key-value data store with Spring Data Redis reactive and the Lettuce client</source>
          <target state="translated">SpringData Redis 반응 및 Lettuce 클라이언트와 함께 Redis 키-값 데이터 저장소를 사용하기위한 스타터</target>
        </trans-unit>
        <trans-unit id="afefb5491f8dcc0c00b9314079e567727c4364b4" translate="yes" xml:space="preserve">
          <source>Starter for using Spring AMQP and Rabbit MQ</source>
          <target state="translated">Spring AMQP 및 Rabbit MQ 사용을위한 스타터</target>
        </trans-unit>
        <trans-unit id="cea67f2a0d20d6b53cb1548a86b0b6319d246d04" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Batch</source>
          <target state="translated">Spring Batch 사용을위한 스타터</target>
        </trans-unit>
        <trans-unit id="bcb68a204aa944548ba981dc02f82f7303aaff94" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Boot&amp;rsquo;s Actuator which provides production ready features to help you monitor and manage your application</source>
          <target state="translated">애플리케이션을 모니터링하고 관리하는 데 도움이되는 프로덕션 준비 기능을 제공하는 Spring Boot의 Actuator 사용을위한 스타터</target>
        </trans-unit>
        <trans-unit id="77056c73324c3906e1eb208edafbfd8eba6f8b63" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Data JDBC</source>
          <target state="translated">SpringData JDBC 사용을위한 스타터</target>
        </trans-unit>
        <trans-unit id="3817abc45e56500f789c9426228ab6f4a56535d8" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Data JPA with Hibernate</source>
          <target state="translated">Hibernate에서 SpringData JPA를 사용하기위한 스타터</target>
        </trans-unit>
        <trans-unit id="5167427cdba12de5357c173ddfec0b169ac62d5a" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Data LDAP</source>
          <target state="translated">스프링 데이터 LDAP 사용을위한 스타터</target>
        </trans-unit>
        <trans-unit id="8417213a6527770dcd2af7c020449e79f41e9c2e" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Data R2DBC</source>
          <target state="translated">SpringData R2DBC 사용을위한 스타터</target>
        </trans-unit>
        <trans-unit id="5da8d431c71d9d59e28998cdf95ed9b5384fd8cc" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Framework&amp;rsquo;s caching support</source>
          <target state="translated">Spring Framework의 캐싱 지원을 사용하기위한 Starter</target>
        </trans-unit>
        <trans-unit id="ac752278c3848a4461c5e08f851ff49d20fd7b81" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Integration</source>
          <target state="translated">Spring Integration 사용을위한 스타터</target>
        </trans-unit>
        <trans-unit id="3d72a9becfeabbc143e4afb12fc7240e94f63576" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Security</source>
          <target state="translated">Spring Security 사용을위한 스타터</target>
        </trans-unit>
        <trans-unit id="2b40ddc49d2b12409fd1720214181a2889555baf" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Security&amp;rsquo;s OAuth2 resource server features</source>
          <target state="translated">Spring Security의 OAuth2 리소스 서버 기능을 사용하기위한 Starter</target>
        </trans-unit>
        <trans-unit id="f5f69650a11a9d880cf1819db0217c4ea6cdcffb" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Security&amp;rsquo;s OAuth2/OpenID Connect client features</source>
          <target state="translated">Spring Security의 OAuth2 / OpenID Connect 클라이언트 기능 사용을위한 스타터</target>
        </trans-unit>
        <trans-unit id="0c8162872d8eb6e09785f78a040e341c4b2f05c7" translate="yes" xml:space="preserve">
          <source>Starter for using Spring Web Services</source>
          <target state="translated">Spring Web Services 사용을위한 스타터</target>
        </trans-unit>
        <trans-unit id="de638ac2033fcf17a653d4ef3f8f475702efdaeb" translate="yes" xml:space="preserve">
          <source>Starter for using Tomcat as the embedded servlet container. Default servlet container starter used by &lt;a href=&quot;#spring-boot-starter-web&quot;&gt;&lt;code&gt;spring-boot-starter-web&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">임베디드 서블릿 컨테이너로 Tomcat을 사용하기위한 스타터. &lt;a href=&quot;#spring-boot-starter-web&quot;&gt; &lt;code&gt;spring-boot-starter-web&lt;/code&gt; 에서&lt;/a&gt; 사용하는 기본 서블릿 컨테이너 스타터</target>
        </trans-unit>
        <trans-unit id="414bb1a5ff4d826894efe1e769f608254dafd507" translate="yes" xml:space="preserve">
          <source>Starter for using Undertow as the embedded servlet container. An alternative to &lt;a href=&quot;#spring-boot-starter-tomcat&quot;&gt;&lt;code&gt;spring-boot-starter-tomcat&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Undertow를 임베디드 서블릿 컨테이너로 사용하기위한 스타터. &lt;a href=&quot;#spring-boot-starter-tomcat&quot;&gt; &lt;code&gt;spring-boot-starter-tomcat&lt;/code&gt; &lt;/a&gt; 의 대안</target>
        </trans-unit>
        <trans-unit id="521100ddb206a1fa1c74ebe5ae5898fba3257781" translate="yes" xml:space="preserve">
          <source>Starter for using jOOQ to access SQL databases. An alternative to &lt;a href=&quot;#spring-boot-starter-data-jpa&quot;&gt;&lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#spring-boot-starter-jdbc&quot;&gt;&lt;code&gt;spring-boot-starter-jdbc&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">jOOQ를 사용하여 SQL 데이터베이스에 액세스하기위한 스타터. &lt;a href=&quot;#spring-boot-starter-data-jpa&quot;&gt; &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#spring-boot-starter-jdbc&quot;&gt; &lt;code&gt;spring-boot-starter-jdbc&lt;/code&gt; &lt;/a&gt; 의 대안</target>
        </trans-unit>
        <trans-unit id="7288571443a2ad9832783f01179730316bda6b87" translate="yes" xml:space="preserve">
          <source>Starter for using the Apache Solr search platform with Spring Data Solr</source>
          <target state="translated">SpringData Solr와 함께 Apache Solr 검색 플랫폼을 사용하기위한 스타터</target>
        </trans-unit>
        <trans-unit id="faec6d455a8c7c6db2d7fc9668b3b9bae97c8e43" translate="yes" xml:space="preserve">
          <source>Starter for using the Quartz scheduler</source>
          <target state="translated">Quartz 스케줄러 사용을위한 스타터</target>
        </trans-unit>
        <trans-unit id="7bfec88cf924722c1ca4650a2bf8d0bbf0943b75" translate="yes" xml:space="preserve">
          <source>Starters</source>
          <target state="translated">Starters</target>
        </trans-unit>
        <trans-unit id="c3a11bd6312d26f012a51b1398ab37579cd749ef" translate="yes" xml:space="preserve">
          <source>Starters and Auto-configuration</source>
          <target state="translated">스타터 및 자동 구성</target>
        </trans-unit>
        <trans-unit id="9af4606e91f89c803c17919d20308f9c7be9d98a" translate="yes" xml:space="preserve">
          <source>Starters are a set of convenient dependency descriptors that you can include in your application. You get a one-stop shop for all the Spring and related technologies that you need without having to hunt through sample code and copy-paste loads of dependency descriptors. For example, if you want to get started using Spring and JPA for database access, include the &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; dependency in your project.</source>
          <target state="translated">스타터는 애플리케이션에 포함 할 수있는 편리한 종속성 설명자 세트입니다. 샘플 코드를 검색하고 많은 종속성 설명자를 복사하여 붙여 넣지 않고도 필요한 모든 Spring 및 관련 기술을 원 스톱으로 구입할 수 있습니다. 예를 들어 데이터베이스 액세스를 위해 Spring 및 JPA를 사용하여 시작하려면 프로젝트에 &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; 종속성을 포함하십시오.</target>
        </trans-unit>
        <trans-unit id="7725e05476ed2d82c0f887aff3382e0fb31309ae" translate="yes" xml:space="preserve">
          <source>Starting</source>
          <target state="translated">Starting</target>
        </trans-unit>
        <trans-unit id="609a970b73e5daf827dcd4e65bbe7be84ad505a2" translate="yes" xml:space="preserve">
          <source>Starting Tomcat 9.0.x on JDK 8 without that native support logs the following error:</source>
          <target state="translated">기본 지원없이 JDK 8에서 Tomcat 9.0.x를 시작하면 다음 오류가 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="ab17bb9a79bbc7d6c6e2dc0fb956509f385e8ae5" translate="yes" xml:space="preserve">
          <source>Starts the services as the user that owns the jar file</source>
          <target state="translated">jar 파일을 소유 한 사용자로 서비스를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="4193d2bdacbfc1a99b0b373ce23c6d8a0c83c70a" translate="yes" xml:space="preserve">
          <source>Startup tasks are finished. The application is receiving traffic.</source>
          <target state="translated">시작 작업이 완료되었습니다. 애플리케이션이 트래픽을 수신하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="40fb4596044a7beb52cfe4f1d15904a247453443" translate="yes" xml:space="preserve">
          <source>Statement separator in SQL initialization scripts.</source>
          <target state="translated">SQL 초기화 스크립트의 문 구분 기호입니다.</target>
        </trans-unit>
        <trans-unit id="7eb73fdc600e13648386a5fcdea9406f8cc8c5fa" translate="yes" xml:space="preserve">
          <source>Static &lt;code&gt;index.html&lt;/code&gt; support.</source>
          <target state="translated">정적 &lt;code&gt;index.html&lt;/code&gt; 지원.</target>
        </trans-unit>
        <trans-unit id="dc813989f3f556253a1af5dc92893a49e3521632" translate="yes" xml:space="preserve">
          <source>Static resources can be moved to &lt;code&gt;/public&lt;/code&gt; (or &lt;code&gt;/static&lt;/code&gt; or &lt;code&gt;/resources&lt;/code&gt; or &lt;code&gt;/META-INF/resources&lt;/code&gt;) in the classpath root. The same applies to &lt;code&gt;messages.properties&lt;/code&gt; (which Spring Boot automatically detects in the root of the classpath).</source>
          <target state="translated">정적 리소스는 클래스 경로 루트의 &lt;code&gt;/public&lt;/code&gt; (또는 &lt;code&gt;/static&lt;/code&gt; 또는 &lt;code&gt;/resources&lt;/code&gt; 또는 &lt;code&gt;/META-INF/resources&lt;/code&gt; ) 으로 이동할 수 있습니다 . &lt;code&gt;messages.properties&lt;/code&gt; 에도 동일하게 적용됩니다 (Spring Boot가 클래스 경로의 루트에서 자동으로 감지 함).</target>
        </trans-unit>
        <trans-unit id="3094a7a7e028f35058c175e8b4b003112611efc5" translate="yes" xml:space="preserve">
          <source>Statistics related to garbage collection</source>
          <target state="translated">가비지 수집 관련 통계</target>
        </trans-unit>
        <trans-unit id="f49f44dc7b56eb7f308e27497a715d6cdfe78423" translate="yes" xml:space="preserve">
          <source>StatsD</source>
          <target state="translated">StatsD</target>
        </trans-unit>
        <trans-unit id="b20e760893e95b52e89a7561c6d9630557aeeac5" translate="yes" xml:space="preserve">
          <source>StatsD line protocol to use.</source>
          <target state="translated">사용할 StatsD 라인 프로토콜입니다.</target>
        </trans-unit>
        <trans-unit id="bae7d5be70820ed56467bd9a63744e23b47bd711" translate="yes" xml:space="preserve">
          <source>Status</source>
          <target state="translated">Status</target>
        </trans-unit>
        <trans-unit id="bb80d5baecb10cd2fc559a46d2c908ea6aff1060" translate="yes" xml:space="preserve">
          <source>Step size (i.e. reporting frequency) to use.</source>
          <target state="translated">사용할 단계 크기 (예 :보고 빈도).</target>
        </trans-unit>
        <trans-unit id="85679c88170f49d06e7996c917d7a7a34b2def73" translate="yes" xml:space="preserve">
          <source>Store password for the key store file.</source>
          <target state="translated">키 저장소 파일의 비밀번호를 저장합니다.</target>
        </trans-unit>
        <trans-unit id="e3318b7bb689ff5a496e3cb1064d72ea41f3ce22" translate="yes" xml:space="preserve">
          <source>Store password for the trust store file.</source>
          <target state="translated">신뢰 저장소 파일의 비밀번호를 저장하십시오.</target>
        </trans-unit>
        <trans-unit id="f4622060d7a7a24dd59ded5a3a80849fdcd4ee90" translate="yes" xml:space="preserve">
          <source>Strategy for handling X-Forwarded-* headers.</source>
          <target state="translated">X-Forwarded- * 헤더 처리를위한 전략.</target>
        </trans-unit>
        <trans-unit id="7a3e41558806ab2ef8cba4c1de18ee6cc8d67dda" translate="yes" xml:space="preserve">
          <source>Strategy to use to determine which repositories get exposed.</source>
          <target state="translated">노출되는 리포지토리를 결정하는 데 사용할 전략입니다.</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="800f964f9fcb108956cf9e7afb95454157b4850e" translate="yes" xml:space="preserve">
          <source>Such arrangement relies on a default empty constructor and getters and setters are usually mandatory, since binding is through standard Java Beans property descriptors, just like in Spring MVC. A setter may be omitted in the following cases:</source>
          <target state="translated">이러한 배열은 기본 빈 생성자에 의존하며 바인딩은 Spring MVC에서와 같이 표준 Java Beans 속성 설명자를 통해 이루어지기 때문에 일반적으로 getter 및 setter가 필수입니다. 다음과 같은 경우 setter를 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0f332cd57a4c09a6519a76839b955bcdd6eb7dcd" translate="yes" xml:space="preserve">
          <source>Suffix of placeholders in migration scripts.</source>
          <target state="translated">마이그레이션 스크립트에서 자리 표시 자의 접미어입니다.</target>
        </trans-unit>
        <trans-unit id="19b147ece16875f9a6a40d7008055bd6cfac7e9a" translate="yes" xml:space="preserve">
          <source>Suffix pattern matching is deprecated and will be removed in a future release. If you understand the caveats and would still like your application to use suffix pattern matching, the following configuration is required:</source>
          <target state="translated">접미사 패턴 일치는 더 이상 사용되지 않으며 향후 릴리스에서 제거됩니다. 주의 사항을 이해하고 애플리케이션에서 접미사 패턴 일치를 사용하도록하려면 다음 구성이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="1e7ba42f5fb456f03ac307cfca4ef044b07b2545" translate="yes" xml:space="preserve">
          <source>Suffix that gets appended to view names when building a URL.</source>
          <target state="translated">URL을 만들 때 뷰 이름에 추가되는 접미사입니다.</target>
        </trans-unit>
        <trans-unit id="2455451894bc4736fecf44e79793cd850f12c2b1" translate="yes" xml:space="preserve">
          <source>Suffix to apply to template names.</source>
          <target state="translated">템플릿 이름에 적용 할 접미사입니다.</target>
        </trans-unit>
        <trans-unit id="576c441142031c49c2b4e0a870cb68041ccad7ca" translate="yes" xml:space="preserve">
          <source>Support for &lt;code&gt;HttpMessageConverters&lt;/code&gt; (covered &lt;a href=&quot;#boot-features-spring-mvc-message-converters&quot;&gt;later in this document&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;HttpMessageConverters&lt;/code&gt; 지원 ( &lt;a href=&quot;#boot-features-spring-mvc-message-converters&quot;&gt;이 문서의 뒷부분에서&lt;/a&gt; 다룹니다 ).</target>
        </trans-unit>
        <trans-unit id="e467c505a21a93b34e38cfacdf189847818b75a8" translate="yes" xml:space="preserve">
          <source>Support for serving static resources, including support for WebJars (covered &lt;a href=&quot;#boot-features-spring-mvc-static-content&quot;&gt;later in this document&lt;/a&gt;)).</source>
          <target state="translated">WebJar에 대한 지원을 포함하여 정적 리소스 제공 지원 ( &lt;a href=&quot;#boot-features-spring-mvc-static-content&quot;&gt;이 문서의 뒷부분에서&lt;/a&gt; 다룹니다 ).</target>
        </trans-unit>
        <trans-unit id="f77e98bc7a8c3d93dc2668663dab05715f864f5b" translate="yes" xml:space="preserve">
          <source>Support for serving static resources, including support for WebJars (described &lt;a href=&quot;#boot-features-spring-mvc-static-content&quot;&gt;later in this document&lt;/a&gt;).</source>
          <target state="translated">WebJar 지원 ( &lt;a href=&quot;#boot-features-spring-mvc-static-content&quot;&gt;이 문서의 뒷부분에서&lt;/a&gt; 설명)을 포함하여 정적 리소스 제공 지원 .</target>
        </trans-unit>
        <trans-unit id="6226425d0c7f8d8b88c4dd7d9fe6f842ea26fa29" translate="yes" xml:space="preserve">
          <source>Supported SSL ciphers.</source>
          <target state="translated">지원되는 SSL 암호.</target>
        </trans-unit>
        <trans-unit id="adf0c6ba0e543d13fd422263063e7b7f85eb87c7" translate="yes" xml:space="preserve">
          <source>System Property</source>
          <target state="translated">시스템 속성</target>
        </trans-unit>
        <trans-unit id="d94a1627eb44c56399236724594bf0aa9cc8beb5" translate="yes" xml:space="preserve">
          <source>System classLoader: Launched applications should use &lt;code&gt;Thread.getContextClassLoader()&lt;/code&gt; when loading classes (most libraries and frameworks do so by default). Trying to load nested jar classes with &lt;code&gt;ClassLoader.getSystemClassLoader()&lt;/code&gt; fails. &lt;code&gt;java.util.Logging&lt;/code&gt; always uses the system classloader. For this reason, you should consider a different logging implementation.</source>
          <target state="translated">시스템 classLoader : 시작된 응용 프로그램은 클래스를로드 할 때 &lt;code&gt;Thread.getContextClassLoader()&lt;/code&gt; 사용해야합니다 (대부분의 라이브러리와 프레임 워크는 기본적으로 사용함 ). &lt;code&gt;ClassLoader.getSystemClassLoader()&lt;/code&gt; 하여 중첩 된 jar 클래스를로드하려고 하면 실패합니다. &lt;code&gt;java.util.Logging&lt;/code&gt; 은 항상 시스템 클래스 로더를 사용합니다. 따라서 다른 로깅 구현을 고려해야합니다.</target>
        </trans-unit>
        <trans-unit id="439d25d7629a342a4a19d3327c47ee538e36df6a" translate="yes" xml:space="preserve">
          <source>System properties</source>
          <target state="translated">시스템 속성</target>
        </trans-unit>
        <trans-unit id="9952f22fcf30e46684d8ac56ca001885733a7f8f" translate="yes" xml:space="preserve">
          <source>TCP RSocket server host to connect to.</source>
          <target state="translated">연결할 TCP RSocket 서버 호스트입니다.</target>
        </trans-unit>
        <trans-unit id="1d1d41ffe772ec74625f1685e5080da8426160bf" translate="yes" xml:space="preserve">
          <source>TCP RSocket server port to connect to.</source>
          <target state="translated">연결할 TCP RSocket 서버 포트입니다.</target>
        </trans-unit>
        <trans-unit id="4f8d8b71e2c82a3d55d38c6c3364e759268caea4" translate="yes" xml:space="preserve">
          <source>Table 1. Banner variables</source>
          <target state="translated">표 1. 배너 변수</target>
        </trans-unit>
        <trans-unit id="eeab1c9622ef81980e1e88e3d63f7895b94734cb" translate="yes" xml:space="preserve">
          <source>Table 1. Per-meter customizations</source>
          <target state="translated">표 1. 미터당 사용자 정의</target>
        </trans-unit>
        <trans-unit id="34d49d81fa7d6bf14600854241fead514019c3e5" translate="yes" xml:space="preserve">
          <source>Table 1. Spring Boot application starters</source>
          <target state="translated">표 1. Spring Boot 애플리케이션 스타터</target>
        </trans-unit>
        <trans-unit id="191b1652a7057bdd887656c910b3f8a0ce3b7024" translate="yes" xml:space="preserve">
          <source>Table 2. Spring Boot production starters</source>
          <target state="translated">표 2. Spring Boot 프로덕션 스타터</target>
        </trans-unit>
        <trans-unit id="2da3398b98a74f2584d6a7c04484539a3fecf651" translate="yes" xml:space="preserve">
          <source>Table 2. activation properties</source>
          <target state="translated">표 2. 활성화 속성</target>
        </trans-unit>
        <trans-unit id="99facc60012cd4ab3158d47ed08e3ad5e9357873" translate="yes" xml:space="preserve">
          <source>Table 3. Spring Boot technical starters</source>
          <target state="translated">표 3. Spring Boot 기술 스타터</target>
        </trans-unit>
        <trans-unit id="f13005acf3a47e812e0c9da03425b268c2f5869e" translate="yes" xml:space="preserve">
          <source>Table 3. relaxed binding</source>
          <target state="translated">표 3. 완화 된 바인딩</target>
        </trans-unit>
        <trans-unit id="d59b25906117d23aaf252d1e7ad9ff79a6fc4c70" translate="yes" xml:space="preserve">
          <source>Table 4. relaxed binding rules per property source</source>
          <target state="translated">표 4. 속성 소스 당 완화 된 바인딩 규칙</target>
        </trans-unit>
        <trans-unit id="36699ea87ff9a28bd7a61a4b045fa655d669095b" translate="yes" xml:space="preserve">
          <source>Table 5. Logging properties</source>
          <target state="translated">표 5. 로깅 속성</target>
        </trans-unit>
        <trans-unit id="9730d4326a7b8a0d13c2be3b7fe29b80ad152bf6" translate="yes" xml:space="preserve">
          <source>Table of Contents</source>
          <target state="translated">목차</target>
        </trans-unit>
        <trans-unit id="167c3743de96cc5e176c082d8aeff7392e2b0a34" translate="yes" xml:space="preserve">
          <source>Table prefix for all the batch meta-data tables.</source>
          <target state="translated">모든 배치 메타 데이터 테이블의 테이블 접두사입니다.</target>
        </trans-unit>
        <trans-unit id="5eaa54c69658043d8e5aba62ea7793be79332125" translate="yes" xml:space="preserve">
          <source>Tablespace in which the schema history table is created. Ignored when using a database that does not support tablespaces. Defaults to the default tablespace of the connection used by Flyway.</source>
          <target state="translated">스키마 히스토리 테이블이 생성되는 테이블 스페이스입니다. 테이블 스페이스를 지원하지 않는 데이터베이스를 사용하는 경우 무시됩니다. 기본값은 Flyway에서 사용하는 연결의 기본 테이블 스페이스입니다.</target>
        </trans-unit>
        <trans-unit id="75730a7958afd9b5c3bd5991a37f9ae499db8e39" translate="yes" xml:space="preserve">
          <source>Tablespace to use for Liquibase objects.</source>
          <target state="translated">Liquibase 객체에 사용할 테이블 스페이스입니다.</target>
        </trans-unit>
        <trans-unit id="982963c1c41cbed8cab073724749592fe35c532b" translate="yes" xml:space="preserve">
          <source>Tag</source>
          <target state="translated">Tag</target>
        </trans-unit>
        <trans-unit id="b60112ce31bb291148d4e6dfdbc6762a27763ca3" translate="yes" xml:space="preserve">
          <source>Tag name to use when applying database changes. Can also be used with &quot;rollbackFile&quot; to generate a rollback script for all existing changes associated with that tag.</source>
          <target state="translated">데이터베이스 변경 사항을 적용 할 때 사용할 태그 이름입니다. 또한 &quot;rollbackFile&quot;과 함께 사용하여 해당 태그와 관련된 모든 기존 변경 사항에 대한 롤백 스크립트를 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ab8f1e35160eb91c4d2b27780c3e2fa777b0518e" translate="yes" xml:space="preserve">
          <source>Tag that will be mapped to &quot;@host&quot; when shipping metrics to AppOptics.</source>
          <target state="translated">메트릭을 AppOptics로 전달할 때 &quot;@host&quot;에 매핑 될 태그입니다.</target>
        </trans-unit>
        <trans-unit id="cf07bfd1013df73f23a6386349901301c0f893f4" translate="yes" xml:space="preserve">
          <source>Tag that will be mapped to &quot;host&quot; when shipping metrics to Datadog.</source>
          <target state="translated">메트릭을 Datadog에 전달할 때 &quot;호스트&quot;에 매핑 될 태그입니다.</target>
        </trans-unit>
        <trans-unit id="60172b50556196e8120d1ca1f9b7dbbf040ab0be" translate="yes" xml:space="preserve">
          <source>Tag that will be mapped to &quot;host&quot; when shipping metrics to Influx.</source>
          <target state="translated">메트릭을 Influx로 전달할 때 &quot;호스트&quot;에 매핑 될 태그입니다.</target>
        </trans-unit>
        <trans-unit id="a27a5054658747c000ada15bf7c8af97599a397f" translate="yes" xml:space="preserve">
          <source>Take care when registering &lt;code&gt;Filter&lt;/code&gt; beans since they are initialized very early in the application lifecycle. If you need to register a &lt;code&gt;Filter&lt;/code&gt; that interacts with other beans, consider using a &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/web/servlet/DelegatingFilterProxyRegistrationBean.html&quot;&gt;&lt;code&gt;DelegatingFilterProxyRegistrationBean&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;Filter&lt;/code&gt; 빈은 응용 프로그램 수명주기 초기에 초기화되므로 등록 할 때주의하십시오 . 다른 빈과 상호 작용 하는 &lt;code&gt;Filter&lt;/code&gt; 를 등록해야하는 경우 대신 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/web/servlet/DelegatingFilterProxyRegistrationBean.html&quot;&gt; &lt;code&gt;DelegatingFilterProxyRegistrationBean&lt;/code&gt; 을&lt;/a&gt; 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="568a40f54a641e909abfb444129770099d96152b" translate="yes" xml:space="preserve">
          <source>Target database to operate on, auto-detected by default. Can be alternatively set using the &quot;databasePlatform&quot; property.</source>
          <target state="translated">작동 할 대상 데이터베이스는 기본적으로 자동 감지됩니다. &quot;databasePlatform&quot;속성을 사용하여 대안으로 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="333b912deae6199d27d7c610b897a0f448d327b2" translate="yes" xml:space="preserve">
          <source>Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if both it and time between eviction runs are positive.</source>
          <target state="translated">풀에서 유지할 최소 유휴 연결 수에 대한 대상입니다. 이 설정은이 설정과 제거 실행 사이의 시간이 모두 양수인 경우에만 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="a28d19c194ec70cf42107dcdc3ad2ddedb59e6c1" translate="yes" xml:space="preserve">
          <source>Target size of the prepared statement cache. 0 disables the cache.</source>
          <target state="translated">준비된 명령문 캐시의 대상 크기입니다. 0은 캐시를 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="0d5309316dd90e112f91ee2716f683b2d629afb9" translate="yes" xml:space="preserve">
          <source>Target version up to which migrations should be considered.</source>
          <target state="translated">마이그레이션을 고려해야하는 대상 버전입니다.</target>
        </trans-unit>
        <trans-unit id="0c56a9065858b8e8ffcc7d6f4f950cf3266e63b0" translate="yes" xml:space="preserve">
          <source>Tasks expected to run during startup should be executed by &lt;code&gt;CommandLineRunner&lt;/code&gt; and &lt;code&gt;ApplicationRunner&lt;/code&gt; components instead of using Spring component lifecycle callbacks such as &lt;code&gt;@PostConstruct&lt;/code&gt;.</source>
          <target state="translated">시작 중에 실행될 것으로 예상되는 작업 은 &lt;code&gt;@PostConstruct&lt;/code&gt; 와 같은 Spring 구성 요소 수명주기 콜백을 사용하는 대신 &lt;code&gt;CommandLineRunner&lt;/code&gt; 및 &lt;code&gt;ApplicationRunner&lt;/code&gt; 구성 요소에 의해 실행되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="47f1e161c19bd52f3722e0ece851fd1a0735c536" translate="yes" xml:space="preserve">
          <source>Technology type for exported metrics. Used to group metrics under a logical technology name in the Dynatrace UI.</source>
          <target state="translated">내 보낸 메트릭의 기술 유형입니다. Dynatrace UI에서 논리적 기술 이름으로 메트릭을 그룹화하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="29920c4cbb230340bbec1cc40271331c6e6ff6ab" translate="yes" xml:space="preserve">
          <source>Template encoding.</source>
          <target state="translated">템플릿 인코딩.</target>
        </trans-unit>
        <trans-unit id="d4c42b186a7b06f9745c73d7cb472fce86f69ced" translate="yes" xml:space="preserve">
          <source>Template files encoding.</source>
          <target state="translated">템플릿 파일 인코딩.</target>
        </trans-unit>
        <trans-unit id="1b145b3eb0f0d96107250f1315e49d17cf5939df" translate="yes" xml:space="preserve">
          <source>Template mode to be applied to templates. See also Thymeleaf's TemplateMode enum.</source>
          <target state="translated">템플릿에 적용 할 템플릿 모드입니다. Thymeleaf의 TemplateMode 열거 형도 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d3e0af70d118d435c290c5dfb6ed9e5cb668c5bc" translate="yes" xml:space="preserve">
          <source>Template path.</source>
          <target state="translated">템플릿 경로.</target>
        </trans-unit>
        <trans-unit id="c25221a23534c06e24bdf0ea2a7b12c0a4be2128" translate="yes" xml:space="preserve">
          <source>Test Auto-configuration Annotations</source>
          <target state="translated">자동 구성 주석 테스트</target>
        </trans-unit>
        <trans-unit id="6d5676cdf5482eecc252b7c32698e684ccd02dc7" translate="yes" xml:space="preserve">
          <source>Test slice</source>
          <target state="translated">테스트 슬라이스</target>
        </trans-unit>
        <trans-unit id="da778918a17df0796dc565fb2e088e9f2f4e9652" translate="yes" xml:space="preserve">
          <source>Test slices exclude &lt;code&gt;@Configuration&lt;/code&gt; classes from scanning. For example, for a &lt;code&gt;@WebMvcTest&lt;/code&gt;, the following configuration will not include the given &lt;code&gt;WebMvcConfigurer&lt;/code&gt; bean in the application context loaded by the test slice:</source>
          <target state="translated">테스트 조각은 &lt;code&gt;@Configuration&lt;/code&gt; 클래스를 검색에서 제외 합니다. 예를 들어 &lt;code&gt;@WebMvcTest&lt;/code&gt; 의 경우 다음 구성은 테스트 슬라이스에서로드 한 애플리케이션 컨텍스트에 지정된 &lt;code&gt;WebMvcConfigurer&lt;/code&gt; Bean을 포함하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="f630a940e57bd2e0abb390c10def7d02d1c0bba4" translate="yes" xml:space="preserve">
          <source>Test-autoconfiguration annotations used to test slices of your application.</source>
          <target state="translated">애플리케이션의 슬라이스를 테스트하는 데 사용되는 테스트 자동 구성 주석입니다.</target>
        </trans-unit>
        <trans-unit id="8db29eae4790789ef9c9a19e7b95ca8fea0c2322" translate="yes" xml:space="preserve">
          <source>Testing within a mocked environment is usually faster than running with a full Servlet container. However, since mocking occurs at the Spring MVC layer, code that relies on lower-level Servlet container behavior cannot be directly tested with MockMvc.</source>
          <target state="translated">모의 환경에서 테스트하는 것은 일반적으로 전체 서블릿 컨테이너로 실행하는 것보다 빠릅니다. 그러나 모킹은 Spring MVC 계층에서 발생하기 때문에 하위 수준의 Servlet 컨테이너 동작에 의존하는 코드는 MockMvc로 직접 테스트 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="54cb1c52bb55226bce9fc849dcbd89ce50784221" translate="yes" xml:space="preserve">
          <source>Tests that use &lt;code&gt;@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)&lt;/code&gt; can also inject the actual port into a field by using the &lt;code&gt;@LocalServerPort&lt;/code&gt; annotation, as shown in the following example:</source>
          <target state="translated">그 테스트 사용 &lt;code&gt;@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)&lt;/code&gt; 수도 이용하여 실제 필드에 포트 분사 &lt;code&gt;@LocalServerPort&lt;/code&gt; 의 다음 예에서와 같이, 주석 :</target>
        </trans-unit>
        <trans-unit id="c204ff9a98216e65c35e059a19da55b180979f25" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;How-to&amp;rdquo; section includes a &lt;a href=&quot;howto#howto-database-initialization&quot;&gt;section on how to initialize a database&lt;/a&gt;.</source>
          <target state="translated">&quot;방법&quot;섹션에는 &lt;a href=&quot;howto#howto-database-initialization&quot;&gt;데이터베이스를 초기화하는 방법에 대한&lt;/a&gt; 섹션이 포함되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6a3f0afc8c67c18d31ba3e6a097c18525d05551b" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;How-to&amp;rdquo; section includes a &lt;a href=&quot;howto#howto-initialize-a-database-using-r2dbc&quot;&gt;section on how to initialize a database&lt;/a&gt;.</source>
          <target state="translated">&quot;방법&quot;섹션에는 &lt;a href=&quot;howto#howto-initialize-a-database-using-r2dbc&quot;&gt;데이터베이스를 초기화하는 방법에 대한&lt;/a&gt; 섹션이 포함되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aa025c80f991459eecded325e880d9e7ea84bdbf" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;Liveness&amp;rdquo; state of an application tells whether its internal state allows it to work correctly, or recover by itself if it&amp;rsquo;s currently failing. A broken &amp;ldquo;Liveness&amp;rdquo; state means that the application is in a state that it cannot recover from, and the infrastructure should restart the application.</source>
          <target state="translated">응용 프로그램의 &quot;활성&quot;상태는 내부 상태가 올바르게 작동하도록 허용하는지 또는 현재 실패한 경우 자체적으로 복구되는지 여부를 알려줍니다. 중단 된 &quot;활성&quot;상태는 애플리케이션이 복구 할 수없는 상태에 있으며 인프라에서 애플리케이션을 다시 시작해야 함을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="b0b1ba32f50d6afd4afc4d72564f1ee3cf2b52fa" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;Readiness&amp;rdquo; state of an application tells whether the application is ready to handle traffic. A failing &amp;ldquo;Readiness&amp;rdquo; state tells the platform that it should not route traffic to the application for now. This typically happens during startup, while &lt;code&gt;CommandLineRunner&lt;/code&gt; and &lt;code&gt;ApplicationRunner&lt;/code&gt; components are being processed, or at any time if the application decides that it&amp;rsquo;s too busy for additional traffic.</source>
          <target state="translated">애플리케이션의 &quot;준비&quot;상태는 애플리케이션이 트래픽을 처리 할 준비가되었는지 여부를 나타냅니다. 실패한 &quot;준비&quot;상태는 현재 트래픽을 애플리케이션으로 라우팅하지 않아야 함을 플랫폼에 알려줍니다. 이는 일반적으로 시작 중에 &lt;code&gt;CommandLineRunner&lt;/code&gt; 및 &lt;code&gt;ApplicationRunner&lt;/code&gt; 구성 요소가 처리되는 동안 또는 응용 프로그램이 추가 트래픽에 대해 너무 바쁘다고 판단하는 경우 언제든지 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ef5e2797770653d13ad2c9e3d02cfcbc3af09034" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;Using Spring Boot&amp;rdquo; section includes a more complete example of &lt;a href=&quot;using-spring-boot#using-boot-ant&quot;&gt;using Apache Ant with &lt;code&gt;spring-boot-antlib&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&amp;ldquo;Using Spring Boot&amp;rdquo;섹션에는 &lt;a href=&quot;using-spring-boot#using-boot-ant&quot;&gt; &lt;code&gt;spring-boot-antlib&lt;/code&gt; &lt;/a&gt; 와 함께 Apache Ant를 사용 하는보다 완전한 예제가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="48546ad43868b795c6ea57a55ca75197690ce37b" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;groups&amp;rdquo; are higher level items that do not themselves specify a value but instead provide a contextual grouping for properties. For example, the &lt;code&gt;server.port&lt;/code&gt; and &lt;code&gt;server.address&lt;/code&gt; properties are part of the &lt;code&gt;server&lt;/code&gt; group.</source>
          <target state="translated">&quot;그룹&quot;은 자체적으로 값을 지정하지 않고 대신 속성에 대한 컨텍스트 그룹화를 제공하는 상위 수준 항목입니다. 예를 들어 &lt;code&gt;server.port&lt;/code&gt; 및 &lt;code&gt;server.address&lt;/code&gt; 속성은 &lt;code&gt;server&lt;/code&gt; 그룹의 일부입니다 .</target>
        </trans-unit>
        <trans-unit id="4e8a154eecb91356e70d1a30340dba15c52a2111" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;liveness&amp;rdquo; Probe should not depend on health checks for external systems. If the &lt;a href=&quot;spring-boot-features#boot-features-application-availability-liveness-state&quot;&gt;Liveness State of an application&lt;/a&gt; is broken, Kubernetes will try to solve that problem by restarting the application instance. This means that if an external system fails (e.g. a database, a Web API, an external cache), Kubernetes might restart all application instances and create cascading failures.</source>
          <target state="translated">&quot;활성&quot;프로브는 외부 시스템의 상태 확인에 의존해서는 안됩니다. &lt;a href=&quot;spring-boot-features#boot-features-application-availability-liveness-state&quot;&gt;애플리케이션&lt;/a&gt; 의 활성 상태 가 손상된 경우 Kubernetes는 애플리케이션 인스턴스를 다시 시작하여 해당 문제를 해결하려고합니다. 즉, 외부 시스템 (예 : 데이터베이스, 웹 API, 외부 캐시)이 실패하면 Kubernetes가 모든 애플리케이션 인스턴스를 다시 시작하고 계단식 실패를 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7927907f2066718f5033b44d0ace4a7fb2ee1193" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;mode&amp;rdquo; of operation. The default depends on the way the jar was built but is usually &lt;code&gt;auto&lt;/code&gt; (meaning it tries to guess if it is an init script by checking if it is a symlink in a directory called &lt;code&gt;init.d&lt;/code&gt;). You can explicitly set it to &lt;code&gt;service&lt;/code&gt; so that the &lt;code&gt;stop|start|status|restart&lt;/code&gt; commands work or to &lt;code&gt;run&lt;/code&gt; if you want to run the script in the foreground.</source>
          <target state="translated">작동 &quot;모드&quot;. 기본값은 jar가 빌드 된 방식에 따라 다르지만 일반적으로 &lt;code&gt;auto&lt;/code&gt; ( &lt;code&gt;init.d&lt;/code&gt; 라는 디렉토리의 심볼릭 링크인지 확인하여 init 스크립트인지 추측하려고 시도 함을 의미합니다 ). &lt;code&gt;stop|start|status|restart&lt;/code&gt; 명령이 작동하거나 포 그라운드에서 스크립트를 실행하려는 경우 &lt;code&gt;run&lt;/code&gt; 수 있도록 명시 적으로 &lt;code&gt;service&lt;/code&gt; 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e659f752177bbf9146f974e3247119ef5d006089" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.spring.io/spring-ws/docs/3.0.10.RELEASE/reference/&quot;&gt;Spring Web Services features&lt;/a&gt; can be easily accessed with the &lt;code&gt;spring-boot-starter-webservices&lt;/code&gt; module.</source>
          <target state="translated">&lt;a href=&quot;https://docs.spring.io/spring-ws/docs/3.0.10.RELEASE/reference/&quot;&gt;봄 웹 서비스 기능은&lt;/a&gt; 쉽게 액세스 할 수 있습니다 &lt;code&gt;spring-boot-starter-webservices&lt;/code&gt; 모듈.</target>
        </trans-unit>
        <trans-unit id="2fcdd3e19da40d488211926cc3eb14fffcacc2ab" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc&quot;&gt;Spring Web MVC framework&lt;/a&gt; (often referred to as &amp;ldquo;Spring MVC&amp;rdquo;) is a rich &amp;ldquo;model view controller&amp;rdquo; web framework. Spring MVC lets you create special &lt;code&gt;@Controller&lt;/code&gt; or &lt;code&gt;@RestController&lt;/code&gt; beans to handle incoming HTTP requests. Methods in your controller are mapped to HTTP by using &lt;code&gt;@RequestMapping&lt;/code&gt; annotations.</source>
          <target state="translated">&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc&quot;&gt;스프링 웹 MVC 프레임 워크&lt;/a&gt; (종종 &quot;스프링 MVC&quot;이라한다)은 풍부한 &quot;모델 뷰 컨트롤러&quot;웹 프레임 워크이다. Spring MVC를 사용하면 들어오는 HTTP 요청을 처리하기 위해 특수 &lt;code&gt;@Controller&lt;/code&gt; 또는 &lt;code&gt;@RestController&lt;/code&gt; Bean을 만들 수 있습니다 . 컨트롤러의 메서드는 &lt;code&gt;@RequestMapping&lt;/code&gt; 주석 을 사용하여 HTTP에 매핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="8a4f7109703eba279b755f1dd140baa5f2faad17" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/pivotal-cf/java-cfenv/&quot;&gt;Java CFEnv&lt;/a&gt; project is a better fit for tasks such as configuring a DataSource.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pivotal-cf/java-cfenv/&quot;&gt;자바 CFEnv의&lt;/a&gt; 프로젝트는 데이터 소스를 구성하는 등의 작업을위한 더 나은 적합합니다.</target>
        </trans-unit>
        <trans-unit id="4c347d234c0c0d120699e3f79bf4d61d3b11b91c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator&quot;&gt;&lt;code&gt;spring-boot-actuator&lt;/code&gt;&lt;/a&gt; module provides all of Spring Boot&amp;rsquo;s production-ready features. The recommended way to enable the features is to add a dependency on the &lt;code&gt;spring-boot-starter-actuator&lt;/code&gt; &amp;lsquo;Starter&amp;rsquo;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator&quot;&gt; &lt;code&gt;spring-boot-actuator&lt;/code&gt; &lt;/a&gt; 모듈은 봄 부츠의 생산 준비의 모든 기능을 제공합니다. 기능을 활성화하는 권장 방법은 &lt;code&gt;spring-boot-starter-actuator&lt;/code&gt; 'Starter' 에 대한 종속성을 추가하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="5b3039ed494ff515ec6159ec13981f57880fd50f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jms/XAConnectionFactoryWrapper.java&quot;&gt;&lt;code&gt;XAConnectionFactoryWrapper&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/XADataSourceWrapper.java&quot;&gt;&lt;code&gt;XADataSourceWrapper&lt;/code&gt;&lt;/a&gt; interfaces can be used to support alternative embedded transaction managers. The interfaces are responsible for wrapping &lt;code&gt;XAConnectionFactory&lt;/code&gt; and &lt;code&gt;XADataSource&lt;/code&gt; beans and exposing them as regular &lt;code&gt;ConnectionFactory&lt;/code&gt; and &lt;code&gt;DataSource&lt;/code&gt; beans, which transparently enroll in the distributed transaction. DataSource and JMS auto-configuration use JTA variants, provided you have a &lt;code&gt;JtaTransactionManager&lt;/code&gt; bean and appropriate XA wrapper beans registered within your &lt;code&gt;ApplicationContext&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jms/XAConnectionFactoryWrapper.java&quot;&gt; &lt;code&gt;XAConnectionFactoryWrapper&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/XADataSourceWrapper.java&quot;&gt; &lt;code&gt;XADataSourceWrapper&lt;/code&gt; &lt;/a&gt; 인터페이스는 다른 내장 된 트랜잭션 관리자를 지원하는 데 사용할 수 있습니다. 인터페이스는 &lt;code&gt;XAConnectionFactory&lt;/code&gt; 및 &lt;code&gt;XADataSource&lt;/code&gt; Bean 을 래핑 하고 분산 트랜잭션에 투명하게 등록하는 일반 &lt;code&gt;ConnectionFactory&lt;/code&gt; 및 &lt;code&gt;DataSource&lt;/code&gt; Bean 으로 노출하는 역할을 합니다. DataSource 및 JMS 자동 구성은 &lt;code&gt;JtaTransactionManager&lt;/code&gt; 빈과 &lt;code&gt;ApplicationContext&lt;/code&gt; 내에 등록 된 적절한 XA 래퍼 빈이 있는 경우 JTA 변형을 사용 합니다 .</target>
        </trans-unit>
        <trans-unit id="a4e9f80173cb33fcb359ac9a55116430fb5f3cee" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jta/atomikos/AtomikosXAConnectionFactoryWrapper.java&quot;&gt;AtomikosXAConnectionFactoryWrapper&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jta/atomikos/AtomikosXADataSourceWrapper.java&quot;&gt;AtomikosXADataSourceWrapper&lt;/a&gt; provide good examples of how to write XA wrappers.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jta/atomikos/AtomikosXAConnectionFactoryWrapper.java&quot;&gt;AtomikosXAConnectionFactoryWrapper&lt;/a&gt; 및 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jta/atomikos/AtomikosXADataSourceWrapper.java&quot;&gt;AtomikosXADataSourceWrapper는&lt;/a&gt; XA 래퍼를 작성하는 방법의 좋은 예를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="08f7996835295b835728f6049dfeb4b4c75137da" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://spring.io&quot;&gt;spring.io&lt;/a&gt; web site contains many &amp;ldquo;Getting Started&amp;rdquo; &lt;a href=&quot;https://spring.io/guides&quot;&gt;guides&lt;/a&gt; that use Spring Boot. If you need to solve a specific problem, check there first.</source>
          <target state="translated">&lt;a href=&quot;https://spring.io&quot;&gt;spring.io의&lt;/a&gt; 웹 사이트는 많은 &quot;시작&quot;을 포함 &lt;a href=&quot;https://spring.io/guides&quot;&gt;가이드&lt;/a&gt; 스프링 부팅을 사용합니다. 특정 문제를 해결해야하는 경우 먼저 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="e94fede85026b13151ccbc45ecff9fbb03995640" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://spring.io/projects/spring-framework&quot;&gt;Spring Framework&lt;/a&gt; provides extensive support for working with SQL databases, from direct JDBC access using &lt;code&gt;JdbcTemplate&lt;/code&gt; to complete &amp;ldquo;object relational mapping&amp;rdquo; technologies such as Hibernate. &lt;a href=&quot;https://spring.io/projects/spring-data&quot;&gt;Spring Data&lt;/a&gt; provides an additional level of functionality: creating &lt;code&gt;Repository&lt;/code&gt; implementations directly from interfaces and using conventions to generate queries from your method names.</source>
          <target state="translated">&lt;a href=&quot;https://spring.io/projects/spring-framework&quot;&gt;스프링 프레임 워크는&lt;/a&gt; 사용하여 직접 JDBC 액세스에서 SQL 데이터베이스 작업을위한 광범위한 지원 제공 &lt;code&gt;JdbcTemplate&lt;/code&gt; 같은 최대 절전 모드와 같은 &quot;객체 관계 매핑&quot;기술을 완료합니다. &lt;a href=&quot;https://spring.io/projects/spring-data&quot;&gt;SpringData&lt;/a&gt; 는 추가 수준의 기능을 제공합니다. 인터페이스에서 직접 &lt;code&gt;Repository&lt;/code&gt; 구현을 생성하고 규칙을 사용하여 메소드 이름에서 쿼리를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="25dc19ac11e2de1b5b54fb1a3324acc177308712" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.h2database.com&quot;&gt;H2 database&lt;/a&gt; provides a &lt;a href=&quot;https://www.h2database.com/html/quickstart.html#h2_console&quot;&gt;browser-based console&lt;/a&gt; that Spring Boot can auto-configure for you. The console is auto-configured when the following conditions are met:</source>
          <target state="translated">&lt;a href=&quot;https://www.h2database.com&quot;&gt;H2 데이터베이스는&lt;/a&gt; 제공하는 &lt;a href=&quot;https://www.h2database.com/html/quickstart.html#h2_console&quot;&gt;브라우저 기반의 콘솔&lt;/a&gt; 당신을 위해 봄 부팅 캔 자동 구성이 있습니다. 콘솔은 다음 조건이 충족 될 때 자동으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="9607d742d9b41c03a4962acd7eae01ceb456dabc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.testcontainers.org/&quot;&gt;Testcontainers&lt;/a&gt; library provides a way to manage services running inside Docker containers. It integrates with JUnit, allowing you to write a test class that can start up a container before any of the tests run. Testcontainers is especially useful for writing integration tests that talk to a real backend service such as MySQL, MongoDB, Cassandra etc. Testcontainers can be used in a Spring Boot test as follows:</source>
          <target state="translated">&lt;a href=&quot;https://www.testcontainers.org/&quot;&gt;Testcontainers의&lt;/a&gt; 라이브러리는 부두 노동자 용기 내에서 실행되는 서비스를 관리 할 수있는 방법을 제공합니다. JUnit과 통합되어 테스트가 실행되기 전에 컨테이너를 시작할 수있는 테스트 클래스를 작성할 수 있습니다. Testcontainers는 MySQL, MongoDB, Cassandra 등과 같은 실제 백엔드 서비스와 통신하는 통합 테스트를 작성하는 데 특히 유용합니다. Testcontainers는 다음과 같이 Spring Boot 테스트에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b20fbaf8ec6e18caa0f13c56f5f5c2febb10a19d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;springProfile&amp;gt;&lt;/code&gt; tag lets you optionally include or exclude sections of configuration based on the active Spring profiles. Profile sections are supported anywhere within the &lt;code&gt;&amp;lt;configuration&amp;gt;&lt;/code&gt; element. Use the &lt;code&gt;name&lt;/code&gt; attribute to specify which profile accepts the configuration. The &lt;code&gt;&amp;lt;springProfile&amp;gt;&lt;/code&gt; tag can contain a profile name (for example &lt;code&gt;staging&lt;/code&gt;) or a profile expression. A profile expression allows for more complicated profile logic to be expressed, for example &lt;code&gt;production &amp;amp; (eu-central | eu-west)&lt;/code&gt;. Check the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/core.html#beans-definition-profiles-java&quot;&gt;reference guide&lt;/a&gt; for more details. The following listing shows three sample profiles:</source>
          <target state="translated">&lt;code&gt;&amp;lt;springProfile&amp;gt;&lt;/code&gt; 태그를 사용하면 선택적으로 포함하거나 활성 봄의 프로필을 기반으로 구성 섹션을 제외 할 수 있습니다. 프로필 섹션은 &lt;code&gt;&amp;lt;configuration&amp;gt;&lt;/code&gt; 요소 내의 모든 위치에서 지원됩니다 . 사용 &lt;code&gt;name&lt;/code&gt; 구성을 받아들이 프로필을 지정하는 속성. &lt;code&gt;&amp;lt;springProfile&amp;gt;&lt;/code&gt; 태그 (예를위한 프로파일 이름 포함될 수 &lt;code&gt;staging&lt;/code&gt; ) 또는 프로파일 식. 프로필 표현식을 사용하면 더 복잡한 프로필 논리를 표현할 수 있습니다 &lt;code&gt;production &amp;amp; (eu-central | eu-west)&lt;/code&gt; 예 : production &amp;amp; (eu-central | eu-west)) . 자세한 내용 은 &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/core.html#beans-definition-profiles-java&quot;&gt;참조 가이드&lt;/a&gt; 를 확인하세요. 다음 목록은 세 가지 샘플 프로필을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="97e3c0ef9cb3fbd7de89050e1ab497f67687ab3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;springProperty&amp;gt;&lt;/code&gt; tag lets you expose properties from the Spring &lt;code&gt;Environment&lt;/code&gt; for use within Logback. Doing so can be useful if you want to access values from your &lt;code&gt;application.properties&lt;/code&gt; file in your Logback configuration. The tag works in a similar way to Logback&amp;rsquo;s standard &lt;code&gt;&amp;lt;property&amp;gt;&lt;/code&gt; tag. However, rather than specifying a direct &lt;code&gt;value&lt;/code&gt;, you specify the &lt;code&gt;source&lt;/code&gt; of the property (from the &lt;code&gt;Environment&lt;/code&gt;). If you need to store the property somewhere other than in &lt;code&gt;local&lt;/code&gt; scope, you can use the &lt;code&gt;scope&lt;/code&gt; attribute. If you need a fallback value (in case the property is not set in the &lt;code&gt;Environment&lt;/code&gt;), you can use the &lt;code&gt;defaultValue&lt;/code&gt; attribute. The following example shows how to expose properties for use within Logback:</source>
          <target state="translated">&lt;code&gt;&amp;lt;springProperty&amp;gt;&lt;/code&gt; 태그는 봄에서 속성을 노출 할 수 있습니다 &lt;code&gt;Environment&lt;/code&gt; Logback 내에서 사용할. Logback 구성에서 &lt;code&gt;application.properties&lt;/code&gt; 파일의 값에 액세스하려는 경우 이렇게하면 유용 할 수 있습니다 . 태그는 Logback의 표준 &lt;code&gt;&amp;lt;property&amp;gt;&lt;/code&gt; 태그 와 유사한 방식으로 작동합니다 . 그러나 직접 &lt;code&gt;value&lt;/code&gt; 지정하는 대신 &lt;code&gt;Environment&lt;/code&gt; 에서 속성 의 &lt;code&gt;source&lt;/code&gt; 를 지정합니다 . &lt;code&gt;local&lt;/code&gt; 범위가 아닌 다른 위치에 속성을 저장해야하는 경우 &lt;code&gt;scope&lt;/code&gt; 특성을 사용할 수 있습니다 . 대체 값이 필요한 경우 (속성이 &lt;code&gt;Environment&lt;/code&gt; 설정되지 않은 경우)), &lt;code&gt;defaultValue&lt;/code&gt; 속성을 사용할 수 있습니다 . 다음 예제는 Logback에서 사용할 속성을 노출하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="bd73404e139ca0d909d33804a40d534369db9de3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/cloudfoundryapplication&lt;/code&gt; path is not directly accessible to regular users. In order to use the endpoint, a valid UAA token must be passed with the request.</source>
          <target state="translated">&lt;code&gt;/cloudfoundryapplication&lt;/code&gt; 경로는 일반 사용자가 직접 액세스 할 수 없습니다. 엔드 포인트를 사용하려면 유효한 UAA 토큰이 요청과 함께 전달되어야합니다.</target>
        </trans-unit>
        <trans-unit id="469cb10eb8b515e401db26e69f9cf7b6ec93d5f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/config&lt;/code&gt; subdirectory in the current directory</source>
          <target state="translated">현재 디렉토리 의 &lt;code&gt;/config&lt;/code&gt; 하위 디렉토리</target>
        </trans-unit>
        <trans-unit id="46b976d52add218ee08bdb3fd391c230f2518f76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@ConditionalOnBean&lt;/code&gt; and &lt;code&gt;@ConditionalOnMissingBean&lt;/code&gt; annotations let a bean be included based on the presence or absence of specific beans. You can use the &lt;code&gt;value&lt;/code&gt; attribute to specify beans by type or &lt;code&gt;name&lt;/code&gt; to specify beans by name. The &lt;code&gt;search&lt;/code&gt; attribute lets you limit the &lt;code&gt;ApplicationContext&lt;/code&gt; hierarchy that should be considered when searching for beans.</source>
          <target state="translated">&lt;code&gt;@ConditionalOnBean&lt;/code&gt; 및 &lt;code&gt;@ConditionalOnMissingBean&lt;/code&gt; 주석 빈 특정 콩의 유무에 따라 포함 할 수 있습니다. 당신이 사용할 수있는 &lt;code&gt;value&lt;/code&gt; 종류 나에 의해 콩 지정하는 속성을 &lt;code&gt;name&lt;/code&gt; 이름으로 빈을 지정할 수 있습니다. &lt;code&gt;search&lt;/code&gt; 속성을 사용하면 제한 할 수 &lt;code&gt;ApplicationContext&lt;/code&gt; 콩을 검색 할 때 고려되어야 계층 구조를.</target>
        </trans-unit>
        <trans-unit id="b081ced39364eef4148262283717f33939a31d2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@ConditionalOnClass&lt;/code&gt; and &lt;code&gt;@ConditionalOnMissingClass&lt;/code&gt; annotations let &lt;code&gt;@Configuration&lt;/code&gt; classes be included based on the presence or absence of specific classes. Due to the fact that annotation metadata is parsed by using &lt;a href=&quot;https://asm.ow2.io/&quot;&gt;ASM&lt;/a&gt;, you can use the &lt;code&gt;value&lt;/code&gt; attribute to refer to the real class, even though that class might not actually appear on the running application classpath. You can also use the &lt;code&gt;name&lt;/code&gt; attribute if you prefer to specify the class name by using a &lt;code&gt;String&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;@ConditionalOnClass&lt;/code&gt; 및 &lt;code&gt;@ConditionalOnMissingClass&lt;/code&gt; 주석 할 &lt;code&gt;@Configuration&lt;/code&gt; 클래스가 특정 클래스의 유무에 따라 포함. 때문에 주석 메타 데이터를 사용하여 구문 분석된다는 사실에 &lt;a href=&quot;https://asm.ow2.io/&quot;&gt;ASM을&lt;/a&gt; , 당신은 사용할 수있는 &lt;code&gt;value&lt;/code&gt; 클래스가 실제로 실행중인 응용 프로그램의 클래스 경로에 표시되지 않을 수 있습니다에도 불구하고, 실제 클래스를 참조하는 속성을. &lt;code&gt;String&lt;/code&gt; 값 을 사용하여 클래스 이름을 지정하려는 경우 &lt;code&gt;name&lt;/code&gt; 속성을 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f80f1746db6f44a2adbb8da7771f0d6ae388014c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@ConditionalOnExpression&lt;/code&gt; annotation lets configuration be included based on the result of a &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/core.html#expressions&quot;&gt;SpEL expression&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;@ConditionalOnExpression&lt;/code&gt; 의 주석은의 결과에 따라 포함 구성 할 수 있습니다 &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/core.html#expressions&quot;&gt;SpEL을 표현&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="39f02898cc20240accb0884ce1ba5c0375aa6d57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@ConditionalOnProperty&lt;/code&gt; annotation lets configuration be included based on a Spring Environment property. Use the &lt;code&gt;prefix&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; attributes to specify the property that should be checked. By default, any property that exists and is not equal to &lt;code&gt;false&lt;/code&gt; is matched. You can also create more advanced checks by using the &lt;code&gt;havingValue&lt;/code&gt; and &lt;code&gt;matchIfMissing&lt;/code&gt; attributes.</source>
          <target state="translated">&lt;code&gt;@ConditionalOnProperty&lt;/code&gt; 의 주석은 봄 환경 특성에 따라 포함 구성 할 수 있습니다. 확인해야하는 속성을 지정 하려면 &lt;code&gt;prefix&lt;/code&gt; 및 &lt;code&gt;name&lt;/code&gt; 속성을 사용합니다. 기본적으로 존재하고 &lt;code&gt;false&lt;/code&gt; 와 같지 않은 모든 속성 이 일치합니다. &lt;code&gt;havingValue&lt;/code&gt; 및 &lt;code&gt;matchIfMissing&lt;/code&gt; 속성 을 사용하여 고급 검사를 작성할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1ce0888af73ef83c87e43cacceb8754216ba3f4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@ConditionalOnResource&lt;/code&gt; annotation lets configuration be included only when a specific resource is present. Resources can be specified by using the usual Spring conventions, as shown in the following example: &lt;code&gt;file:/home/user/test.dat&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@ConditionalOnResource&lt;/code&gt; 의 주석 특정 자원이 존재하는 경우에만 포함되는 구성 할 수 있습니다. 리소스는 다음 예제와 같이 일반적인 Spring 규칙을 사용하여 지정할 수 있습니다. &lt;code&gt;file:/home/user/test.dat&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fa9920b7ba1d2cfc552f98eaabff4f1af95e94a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@ConditionalOnWarDeployment&lt;/code&gt; annotation lets configuration be included depending on whether the application is a traditional WAR application that is deployed to a container. This condition will not match for applications that are run with an embedded server.</source>
          <target state="translated">&lt;code&gt;@ConditionalOnWarDeployment&lt;/code&gt; 의 주석은 응용 프로그램이 컨테이너에 배포하는 기존의 WAR 응용 프로그램인지에 따라 포함 구성 할 수 있습니다. 이 조건은 임베디드 서버와 함께 실행되는 응용 프로그램과 일치하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b34ce1523bc08d0ef0ed26c094846c8f7f624e5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@ConditionalOnWebApplication&lt;/code&gt; and &lt;code&gt;@ConditionalOnNotWebApplication&lt;/code&gt; annotations let configuration be included depending on whether the application is a &amp;ldquo;web application&amp;rdquo;. A servlet-based web application is any application that uses a Spring &lt;code&gt;WebApplicationContext&lt;/code&gt;, defines a &lt;code&gt;session&lt;/code&gt; scope, or has a &lt;code&gt;ConfigurableWebEnvironment&lt;/code&gt;. A reactive web application is any application that uses a &lt;code&gt;ReactiveWebApplicationContext&lt;/code&gt;, or has a &lt;code&gt;ConfigurableReactiveWebEnvironment&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@ConditionalOnWebApplication&lt;/code&gt; 및 &lt;code&gt;@ConditionalOnNotWebApplication&lt;/code&gt; 주석 응용 프로그램이 &quot;웹 응용 프로그램&quot;인지 여부에 따라 구성이 포함될 수 있습니다. 서블릿 기반 웹 애플리케이션은 Spring &lt;code&gt;WebApplicationContext&lt;/code&gt; 를 사용 하거나 &lt;code&gt;session&lt;/code&gt; 범위를 정의 하거나 &lt;code&gt;ConfigurableWebEnvironment&lt;/code&gt; 가있는 모든 애플리케이션입니다 . 반응 형 웹 애플리케이션은 &lt;code&gt;ReactiveWebApplicationContext&lt;/code&gt; 를 사용 하거나 &lt;code&gt;ConfigurableReactiveWebEnvironment&lt;/code&gt; 가있는 모든 애플리케이션입니다 .</target>
        </trans-unit>
        <trans-unit id="a2dfc135b2b5b9bdc9f6905cbf228943dc9a69ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@LocalServerPort&lt;/code&gt; annotation can be used to &lt;a href=&quot;howto#howto-discover-the-http-port-at-runtime&quot;&gt;inject the actual port used&lt;/a&gt; into your test. For convenience, tests that need to make REST calls to the started server can additionally &lt;code&gt;@Autowire&lt;/code&gt; a &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/testing.html#webtestclient-tests&quot;&gt;&lt;code&gt;WebTestClient&lt;/code&gt;&lt;/a&gt;, which resolves relative links to the running server and comes with a dedicated API for verifying responses, as shown in the following example:</source>
          <target state="translated">&lt;code&gt;@LocalServerPort&lt;/code&gt; 의 주석은 할 수 있습니다 &lt;a href=&quot;howto#howto-discover-the-http-port-at-runtime&quot;&gt;사용하는 실제 포트 주입&lt;/a&gt; 테스트에 있습니다. 편의를 위해 시작된 서버에 대한 REST 호출을 수행해야하는 테스트 는 다음 예제와 같이 실행중인 서버에 대한 상대 링크를 확인하고 응답을 확인하기위한 전용 API와 함께 제공 되는 &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/testing.html#webtestclient-tests&quot;&gt; &lt;code&gt;WebTestClient&lt;/code&gt; 를&lt;/a&gt; 추가로 &lt;code&gt;@Autowire&lt;/code&gt; 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d2ff08a661df8f3f33d689e85b145e852511bf34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@RequestMapping&lt;/code&gt; annotation provides &amp;ldquo;routing&amp;rdquo; information. It tells Spring that any HTTP request with the &lt;code&gt;/&lt;/code&gt; path should be mapped to the &lt;code&gt;home&lt;/code&gt; method. The &lt;code&gt;@RestController&lt;/code&gt; annotation tells Spring to render the resulting string directly back to the caller.</source>
          <target state="translated">&lt;code&gt;@RequestMapping&lt;/code&gt; 의 주석은 &quot;라우팅&quot;정보를 제공합니다. &lt;code&gt;/&lt;/code&gt; 경로가있는 모든 HTTP 요청 이 &lt;code&gt;home&lt;/code&gt; 메소드에 매핑되어야 한다고 Spring에 알려줍니다 . &lt;code&gt;@RestController&lt;/code&gt; 의 주석이 직접 호출자에게 다시 결과 문자열을 렌더링하는 봄을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="7c938bf9efd1a4a8e48aeb7ca2486068914ed052" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@RestController&lt;/code&gt; and &lt;code&gt;@RequestMapping&lt;/code&gt; annotations are Spring MVC annotations (they are not specific to Spring Boot). See the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc&quot;&gt;MVC section&lt;/a&gt; in the Spring Reference Documentation for more details.</source>
          <target state="translated">&lt;code&gt;@RestController&lt;/code&gt; 와 &lt;code&gt;@RequestMapping&lt;/code&gt; 어노테이션은 스프링 MVC 주석 (그들은 봄 부팅에 국한되지 않는)입니다. 자세한 내용은 Spring Reference Documentation 의 &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc&quot;&gt;MVC 섹션&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6bc62c24155a8d00eed2ead87bab16f5f160a026" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@Value&lt;/code&gt; annotation is a core container feature, and it does not provide the same features as type-safe configuration properties. The following table summarizes the features that are supported by &lt;code&gt;@ConfigurationProperties&lt;/code&gt; and &lt;code&gt;@Value&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;@Value&lt;/code&gt; 주석은 핵심 컨테이너 기능이며, 형태 보증 된 구성 속성과 동일한 기능을 제공하지 않습니다. 다음 표에는 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 및 &lt;code&gt;@Value&lt;/code&gt; 에서 지원하는 기능이 요약되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ba26c37d6d91a71434edd71a304fe6f9ab39c9b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Application.java&lt;/code&gt; file would declare the &lt;code&gt;main&lt;/code&gt; method, along with the basic &lt;code&gt;@SpringBootApplication&lt;/code&gt;, as follows:</source>
          <target state="translated">&lt;code&gt;Application.java&lt;/code&gt; 의 파일은 선언 할 &lt;code&gt;main&lt;/code&gt; 기본와 함께 방법을 &lt;code&gt;@SpringBootApplication&lt;/code&gt; 다음과 같이 :</target>
        </trans-unit>
        <trans-unit id="e2371906c5464419d812f9d58bdaf47cefb5ecb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BasicErrorController&lt;/code&gt; can be used as a base class for a custom &lt;code&gt;ErrorController&lt;/code&gt;. This is particularly useful if you want to add a handler for a new content type (the default is to handle &lt;code&gt;text/html&lt;/code&gt; specifically and provide a fallback for everything else). To do so, extend &lt;code&gt;BasicErrorController&lt;/code&gt;, add a public method with a &lt;code&gt;@RequestMapping&lt;/code&gt; that has a &lt;code&gt;produces&lt;/code&gt; attribute, and create a bean of your new type.</source>
          <target state="translated">&lt;code&gt;BasicErrorController&lt;/code&gt; 는 사용자 정의에 대한 기본 클래스로 사용할 수 있습니다 &lt;code&gt;ErrorController&lt;/code&gt; . 새 콘텐츠 유형에 대한 핸들러를 추가하려는 경우 특히 유용합니다 (기본값은 &lt;code&gt;text/html&lt;/code&gt; 구체적 으로 처리 하고 다른 모든 것에 대한 대체를 제공하는 것입니다). 이를 위해 &lt;code&gt;BasicErrorController&lt;/code&gt; 를 확장 하고, &lt;code&gt;produces&lt;/code&gt; 속성 이있는 &lt;code&gt;@RequestMapping&lt;/code&gt; 이 있는 공용 메소드를 추가하고 , 새 유형의 Bean을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="01ae83e57a026c41b56e1a272450d78811c6e896" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CloudPlatform&lt;/code&gt; that must be detected for the document to be active.</source>
          <target state="translated">&lt;code&gt;CloudPlatform&lt;/code&gt; 문서 감지해야 활성화 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c22305dff3edf5968bf5ec9cd766cb04a42ddc6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CommandLineRunner&lt;/code&gt; interfaces provides access to application arguments as a string array, whereas the &lt;code&gt;ApplicationRunner&lt;/code&gt; uses the &lt;code&gt;ApplicationArguments&lt;/code&gt; interface discussed earlier. The following example shows a &lt;code&gt;CommandLineRunner&lt;/code&gt; with a &lt;code&gt;run&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;CommandLineRunner&lt;/code&gt; 의 반면, 인터페이스는, 캐릭터 어레이와 같은 프로그램 인자에 대한 액세스를 제공 &lt;code&gt;ApplicationRunner&lt;/code&gt; 는 용도 &lt;code&gt;ApplicationArguments&lt;/code&gt; 은 앞서 설명한 인터페이스. 다음의 예를 보여줍니다 &lt;code&gt;CommandLineRunner&lt;/code&gt; A를 &lt;code&gt;run&lt;/code&gt; 방법 :</target>
        </trans-unit>
        <trans-unit id="9aa0da4befa878001a7439fe5c89e059ef8ad14f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Environment&lt;/code&gt; has a set of default profiles (by default, &lt;code&gt;[default]&lt;/code&gt;) that are used if no active profiles are set. In other words, if no profiles are explicitly activated, then properties from &lt;code&gt;application-default&lt;/code&gt; are considered.</source>
          <target state="translated">&lt;code&gt;Environment&lt;/code&gt; 기본 정보 세트가 (기본적으로 &lt;code&gt;[default]&lt;/code&gt; ) 활성 프로파일을 설정하지 않은 경우에 사용되는 것이다. 즉, 명시 적으로 활성화 된 프로필이 없으면 &lt;code&gt;application-default&lt;/code&gt; 속성 이 고려됩니다.</target>
        </trans-unit>
        <trans-unit id="721ad639d0cb3d7d034b7a827a75f87f655ba42a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Environment&lt;/code&gt; has already been prepared with all the usual property sources that Spring Boot loads by default. It is therefore possible to get the location of the file from the environment. The preceding example adds the &lt;code&gt;custom-resource&lt;/code&gt; property source at the end of the list so that a key defined in any of the usual other locations takes precedence. A custom implementation may define another order.</source>
          <target state="translated">&lt;code&gt;Environment&lt;/code&gt; 이미 기본적으로 스프링 부트로드 모든 일반적인 속성 소스와 함께 준비되었습니다. 따라서 환경에서 파일의 위치를 ​​가져올 수 있습니다. 앞의 예제는 일반적인 다른 위치에 정의 된 키가 우선하도록 목록 끝에 &lt;code&gt;custom-resource&lt;/code&gt; 속성 소스를 추가합니다 . 사용자 정의 구현은 다른 순서를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="75019b030d7c79b7f17fa2ca2d795c3ba849a392" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ExecStart&lt;/code&gt; field does not declare the script action command, which means that the &lt;code&gt;run&lt;/code&gt; command is used by default.</source>
          <target state="translated">&lt;code&gt;ExecStart&lt;/code&gt; 의 필드는 것을 수단 스크립트 동작 명령, 선언하지 않는 &lt;code&gt;run&lt;/code&gt; 명령이 기본적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4227bf21306bbe0912d62c5210ef0303e8111b52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HealthContributorRegistry&lt;/code&gt; can be used to register and unregister health indicators at runtime.</source>
          <target state="translated">&lt;code&gt;HealthContributorRegistry&lt;/code&gt; 는 런타임시 및 등록 취소의 건강 지표를 등록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="94a9cc0f6b8a6a964902cdb7b64626e114a28b06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NamedParameterJdbcTemplate&lt;/code&gt; reuses the same &lt;code&gt;JdbcTemplate&lt;/code&gt; instance behind the scenes. If more than one &lt;code&gt;JdbcTemplate&lt;/code&gt; is defined and no primary candidate exists, the &lt;code&gt;NamedParameterJdbcTemplate&lt;/code&gt; is not auto-configured.</source>
          <target state="translated">&lt;code&gt;NamedParameterJdbcTemplate&lt;/code&gt; 같은 재사용 &lt;code&gt;JdbcTemplate&lt;/code&gt; 을의 배후 인스턴스를. 둘 이상의 &lt;code&gt;JdbcTemplate&lt;/code&gt; 이 정의되고 1 차 후보가없는 경우 &lt;code&gt;NamedParameterJdbcTemplate&lt;/code&gt; 이 자동 구성되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="42afb0edc0ffdfb001175b7ec31d20ee759a4d78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectMapper&lt;/code&gt; (or &lt;code&gt;XmlMapper&lt;/code&gt; for Jackson XML converter) instance (created by default) has the following customized properties:</source>
          <target state="translated">&lt;code&gt;ObjectMapper&lt;/code&gt; (또는 &lt;code&gt;XmlMapper&lt;/code&gt; (기본적으로 생성) 예 잭슨 XML 컨버터는) 다음과 같은 사용자 정의 속성이 있습니다 :</target>
        </trans-unit>
        <trans-unit id="935296eb82aeeb8552d9818f85155cd86c1c7ff8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PID_FOLDER&lt;/code&gt;, &lt;code&gt;LOG_FOLDER&lt;/code&gt;, and &lt;code&gt;LOG_FILENAME&lt;/code&gt; variables are only valid for an &lt;code&gt;init.d&lt;/code&gt; service. For &lt;code&gt;systemd&lt;/code&gt;, the equivalent customizations are made by using the &amp;lsquo;service&amp;rsquo; script. See the &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.service.html&quot;&gt;service unit configuration man page&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;PID_FOLDER&lt;/code&gt; , &lt;code&gt;LOG_FOLDER&lt;/code&gt; 및 &lt;code&gt;LOG_FILENAME&lt;/code&gt; 의 변수는에만 유효 &lt;code&gt;init.d&lt;/code&gt; 서비스를 제공합니다. 들어 &lt;code&gt;systemd&lt;/code&gt; , 해당하는 사용자 정의는 '서비스'스크립트를 사용하여 만들어집니다. 자세한 내용은 &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.service.html&quot;&gt;서비스 장치 구성 매뉴얼 페이지&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="dc47d30fa504c13366f3c75e4ebf2a8889b3287f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PrometheusPushGatewayManager&lt;/code&gt; can be tuned using properties under &lt;code&gt;management.metrics.export.prometheus.pushgateway&lt;/code&gt;. For advanced configuration, you can also provide your own &lt;code&gt;PrometheusPushGatewayManager&lt;/code&gt; bean.</source>
          <target state="translated">&lt;code&gt;PrometheusPushGatewayManager&lt;/code&gt; 는 아래 속성을 사용하여 조정할 수 있습니다 &lt;code&gt;management.metrics.export.prometheus.pushgateway&lt;/code&gt; . 고급 구성의 경우 고유 한 &lt;code&gt;PrometheusPushGatewayManager&lt;/code&gt; Bean을 제공 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="27bed2d9e751c2469d22bc945024fcae30872e0e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Provides&lt;/code&gt; section of &amp;ldquo;INIT INFO&amp;rdquo;</source>
          <target state="translated">&quot;INIT INFO&quot; 의 &lt;code&gt;Provides&lt;/code&gt; 섹션</target>
        </trans-unit>
        <trans-unit id="3fe08251914f3297c6414ea59c228be49c870eaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RSocketRequester.Builder&lt;/code&gt; instance is a prototype bean, meaning each injection point will provide you with a new instance . This is done on purpose since this builder is stateful and you shouldn&amp;rsquo;t create requesters with different setups using the same instance.</source>
          <target state="translated">&lt;code&gt;RSocketRequester.Builder&lt;/code&gt; 의 인스턴스는 새로운 인스턴스를 제공합니다 각 주입 지점을 의미 프로토 타입 빈입니다. 이 빌더는 상태 저장이므로 동일한 인스턴스를 사용하여 다른 설정으로 요청자를 만들지 않아야하기 때문에 의도적으로 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="78538ef81d7b92b8e5ef6020178cd991cc1b88e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RandomValuePropertySource&lt;/code&gt; is useful for injecting random values (for example, into secrets or test cases). It can produce integers, longs, uuids, or strings, as shown in the following example:</source>
          <target state="translated">&lt;code&gt;RandomValuePropertySource&lt;/code&gt; 는 (비밀 또는 시험 경우에, 예를 들어) 랜덤 값을 주입하는데 유용하다. 다음 예와 같이 정수, long, uuid 또는 문자열을 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7fa95eef8f1bf3e662b51deff0eeae3d8c214a65" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ReactiveElasticsearchClient&lt;/code&gt; provided by Spring Data Elasticsearch</source>
          <target state="translated">&lt;code&gt;ReactiveElasticsearchClient&lt;/code&gt; 봄 데이터 Elasticsearch에 의해 제공</target>
        </trans-unit>
        <trans-unit id="b67ad1333d9dc3d86012c0497f9f646de3f14443" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SpringApplication.setBanner(&amp;hellip;​)&lt;/code&gt; method can be used if you want to generate a banner programmatically. Use the &lt;code&gt;org.springframework.boot.Banner&lt;/code&gt; interface and implement your own &lt;code&gt;printBanner()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;SpringApplication.setBanner(&amp;hellip;​)&lt;/code&gt; 프로그래밍 배너를 생성 할 경우 방법을 사용할 수 있습니다. &lt;code&gt;org.springframework.boot.Banner&lt;/code&gt; 인터페이스를 사용하고 자신의 &lt;code&gt;printBanner()&lt;/code&gt; 메소드를 구현하십시오 .</target>
        </trans-unit>
        <trans-unit id="e97e336dbfa277199c4cf5b19c4530d5771a9d9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SpringApplication&lt;/code&gt; class provides a convenient way to bootstrap a Spring application that is started from a &lt;code&gt;main()&lt;/code&gt; method. In many situations, you can delegate to the static &lt;code&gt;SpringApplication.run&lt;/code&gt; method, as shown in the following example:</source>
          <target state="translated">&lt;code&gt;SpringApplication&lt;/code&gt; 의 클래스는에서 시작되는 스프링 애플리케이션 부트 스트랩 할 수있는 편리한 방법 제공 &lt;code&gt;main()&lt;/code&gt; 메소드. 많은 상황 에서 다음 예제와 같이 정적 &lt;code&gt;SpringApplication.run&lt;/code&gt; 메서드에 위임 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cfdf7376a6604d2d907516938f58fb40607406d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SpringApplication&lt;/code&gt; sends some special &lt;code&gt;ApplicationEvents&lt;/code&gt; to the listeners (some even before the context is created) and then registers the listeners for events published by the &lt;code&gt;ApplicationContext&lt;/code&gt; as well. See &amp;ldquo;&lt;a href=&quot;spring-boot-features#boot-features-application-events-and-listeners&quot;&gt;Application Events and Listeners&lt;/a&gt;&amp;rdquo; in the &amp;lsquo;Spring Boot features&amp;rsquo; section for a complete list.</source>
          <target state="translated">&lt;code&gt;SpringApplication&lt;/code&gt; 는 특별한 전송 &lt;code&gt;ApplicationEvents&lt;/code&gt; 를 청취자에게 (일부 컨텍스트가 작성되기 전에도) 후 발표 이벤트에 대한 리스너 등록 &lt;code&gt;ApplicationContext&lt;/code&gt; 도합니다. 전체 목록은 '스프링 부트 기능'섹션의 &amp;ldquo; &lt;a href=&quot;spring-boot-features#boot-features-application-events-and-listeners&quot;&gt;애플리케이션 이벤트 및 리스너&lt;/a&gt; &amp;rdquo;를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d94d00572593094e4698a03c25af56be8831affc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SpringApplicationBuilder&lt;/code&gt; lets you chain together multiple method calls and includes &lt;code&gt;parent&lt;/code&gt; and &lt;code&gt;child&lt;/code&gt; methods that let you create a hierarchy, as shown in the following example:</source>
          <target state="translated">&lt;code&gt;SpringApplicationBuilder&lt;/code&gt; 는 당신이 함께 여러 메서드 호출을 체인 수 및 포함 &lt;code&gt;parent&lt;/code&gt; 와 &lt;code&gt;child&lt;/code&gt; 다음 예에서와 같이, 계층 구조를 만들 수있는 방법을 :</target>
        </trans-unit>
        <trans-unit id="d546e5003d83eb9435580c72b399d415d7fc967f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;autoconfigure&lt;/code&gt; module contains everything that is necessary to get started with the library. It may also contain configuration key definitions (such as &lt;code&gt;@ConfigurationProperties&lt;/code&gt;) and any callback interface that can be used to further customize how the components are initialized.</source>
          <target state="translated">&lt;code&gt;autoconfigure&lt;/code&gt; 모듈은 라이브러리를 시작하는 데 필요한 모든 것을 포함하고 있습니다. 또한 구성 키 정의 (예 : &lt;code&gt;@ConfigurationProperties&lt;/code&gt; )와 구성 요소 초기화 방법을 추가로 사용자 지정하는 데 사용할 수있는 콜백 인터페이스를 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4f0f0b7f0c0daa160494bce4d183f20724db2e55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;autoconfigure&lt;/code&gt; module that contains the auto-configuration code for &quot;acme&quot;.</source>
          <target state="translated">&lt;code&gt;autoconfigure&lt;/code&gt; &quot;절정&quot;에 대한 자동 구성 코드를 포함하는 모듈.</target>
        </trans-unit>
        <trans-unit id="46f121bd02613156ff9026a6f741f2bf99608a60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extract&lt;/code&gt; command can be used to easily split the application into layers to be added to the dockerfile. Here&amp;rsquo;s an example of a Dockerfile using &lt;code&gt;jarmode&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;extract&lt;/code&gt; 명령 용이 dockerfile에 추가 층으로 프로그램을 분할하기 위해 사용될 수있다. 여기에 사용 Dockerfile의 예 &lt;code&gt;jarmode&lt;/code&gt; 는 .</target>
        </trans-unit>
        <trans-unit id="6e71b449a1b28f1075930fab10c775103a1cf641" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;findmainclass&lt;/code&gt; task is used internally by &lt;code&gt;exejar&lt;/code&gt; to locate a class declaring a &lt;code&gt;main&lt;/code&gt;. If necessary, you can also use this task directly in your build. The following attributes are supported:</source>
          <target state="translated">&lt;code&gt;findmainclass&lt;/code&gt; 작업은 내부적으로 사용 &lt;code&gt;exejar&lt;/code&gt; 선언 클래스의 위치를 &lt;code&gt;main&lt;/code&gt; . 필요한 경우 빌드에서 직접이 작업을 사용할 수도 있습니다. 다음 속성이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="53c3e9f59b6c0d490288a1b1d695036850d54722" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;httptrace&lt;/code&gt; endpoint can be used to obtain information about the request-response exchanges that are stored in the &lt;code&gt;HttpTraceRepository&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;httptrace&lt;/code&gt; 의 끝점에 기억되는 요청 - 응답 교환에 대한 정보를 얻기 위해 사용될 수있다 &lt;code&gt;HttpTraceRepository&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="1db91c783e9050852cf01f162741b38632478f37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include&lt;/code&gt; property lists the IDs of the endpoints that are exposed. The &lt;code&gt;exclude&lt;/code&gt; property lists the IDs of the endpoints that should not be exposed. The &lt;code&gt;exclude&lt;/code&gt; property takes precedence over the &lt;code&gt;include&lt;/code&gt; property. Both &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; properties can be configured with a list of endpoint IDs.</source>
          <target state="translated">는 &lt;code&gt;include&lt;/code&gt; 속성 목록에게 노출되는 엔드 포인트의 ID를. 는 &lt;code&gt;exclude&lt;/code&gt; 속성 목록을 노출해서는 안 엔드 포인트의 ID를. 는 &lt;code&gt;exclude&lt;/code&gt; (가) 이상 재산이 우선 &lt;code&gt;include&lt;/code&gt; 속성을. &lt;code&gt;include&lt;/code&gt; 및 &lt;code&gt;exclude&lt;/code&gt; 속성은 모두 끝점 ID 목록으로 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="88fc6c61780aac3a6b7835b1b541b06d6f91613e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;init&lt;/code&gt; command lets you create a new project by using &lt;a href=&quot;https://start.spring.io&quot;&gt;start.spring.io&lt;/a&gt; without leaving the shell, as shown in the following example:</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; 명령을 사용하여 새 프로젝트를 만들 수 있습니다 &lt;a href=&quot;https://start.spring.io&quot;&gt;start.spring.io를&lt;/a&gt; 다음 예와 같이 쉘을 떠나지 않고 :</target>
        </trans-unit>
        <trans-unit id="9b2aa47365137326180ea7441dd95b14650a7f3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;init&lt;/code&gt; command supports many options. See the &lt;code&gt;help&lt;/code&gt; output for more details. For instance, the following command creates a Gradle project that uses Java 8 and &lt;code&gt;war&lt;/code&gt; packaging:</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; 명령은 많은 옵션을 지원합니다. 자세한 내용은 &lt;code&gt;help&lt;/code&gt; 출력을 참조하십시오. 예를 들어 다음 명령어는 자바 8 및 &lt;code&gt;war&lt;/code&gt; 패키징 을 사용하는 Gradle 프로젝트를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="58445ca31c53a3a498f4ce45b83403a7579a5182" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.time.Period&lt;/code&gt; type never actually stores the number of weeks, it is a shortcut that means &amp;ldquo;7 days&amp;rdquo;.</source>
          <target state="translated">&lt;code&gt;java.time.Period&lt;/code&gt; 의 유형이 실제로 주 수를 저장하지, 그것은 바로 그 수단 &quot;칠일&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="b169ae33eee76c2aed9871544ddc7e3d25da869f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.jms.ConnectionFactory&lt;/code&gt; interface provides a standard method of creating a &lt;code&gt;javax.jms.Connection&lt;/code&gt; for interacting with a JMS broker. Although Spring needs a &lt;code&gt;ConnectionFactory&lt;/code&gt; to work with JMS, you generally need not use it directly yourself and can instead rely on higher level messaging abstractions. (See the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/integration.html#jms&quot;&gt;relevant section&lt;/a&gt; of the Spring Framework reference documentation for details.) Spring Boot also auto-configures the necessary infrastructure to send and receive messages.</source>
          <target state="translated">&lt;code&gt;javax.jms.ConnectionFactory&lt;/code&gt; 인터페이스는 생성 표준 방법을 제공 &lt;code&gt;javax.jms.Connection&lt;/code&gt; 을 는 JMS 브로커와 상호 작용한다. Spring은 JMS와 함께 작동하기 위해 &lt;code&gt;ConnectionFactory&lt;/code&gt; 가 필요하지만 일반적으로 직접 사용할 필요는 없으며 대신 더 높은 수준의 메시징 추상화에 의존 할 수 있습니다. (자세한 내용은 Spring Framework 참조 문서 의 &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/integration.html#jms&quot;&gt;관련 섹션&lt;/a&gt; 을 참조하십시오.) Spring Boot는 또한 메시지를 보내고받는 데 필요한 인프라를 자동 구성합니다.</target>
        </trans-unit>
        <trans-unit id="e4243a7c22dbda89aa04ac602cceaee736b42293" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jersey.config.server.response.setStatusOverSendError&lt;/code&gt; property must be set to &lt;code&gt;true&lt;/code&gt; on the application&amp;rsquo;s &lt;code&gt;ResourceConfig&lt;/code&gt; bean, as shown in the following example:</source>
          <target state="translated">&lt;code&gt;jersey.config.server.response.setStatusOverSendError&lt;/code&gt; 의 속성을 설정해야합니다 &lt;code&gt;true&lt;/code&gt; 응용 프로그램에 &lt;code&gt;ResourceConfig&lt;/code&gt; 의 다음 예에서와 같이, 콩 :</target>
        </trans-unit>
        <trans-unit id="e33e91496f370a8691033b6cd63283f60dc39044" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;layertools&lt;/code&gt; mode can not be used with a &lt;a href=&quot;deployment#deployment-install&quot;&gt;fully executable Spring Boot archive&lt;/a&gt; that includes a launch script. Disable launch script configuration when building a jar file that is intended to be used with &lt;code&gt;layertools&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;layertools&lt;/code&gt; 의 모드는 사용할 수 없습니다 &lt;a href=&quot;deployment#deployment-install&quot;&gt;완전히 실행 봄 부트 아카이브&lt;/a&gt; 발사 스크립트가 포함되어 있습니다. &lt;code&gt;layertools&lt;/code&gt; 와 함께 사용할 jar 파일을 빌드 할 때 시작 스크립트 구성을 비활성화합니다 .</target>
        </trans-unit>
        <trans-unit id="39b941fc9c967679543d5e58516651e15b7cc91e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mvn dependency:tree&lt;/code&gt; command prints a tree representation of your project dependencies. You can see that &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; provides no dependencies by itself. To add the necessary dependencies, edit your &lt;code&gt;pom.xml&lt;/code&gt; and add the &lt;code&gt;spring-boot-starter-web&lt;/code&gt; dependency immediately below the &lt;code&gt;parent&lt;/code&gt; section:</source>
          <target state="translated">&lt;code&gt;mvn dependency:tree&lt;/code&gt; 명령은 프로젝트 종속성의 트리 표현을 인쇄합니다. 당신이 볼 수있는 &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; 그 자체로 종속성을 제공하지 않습니다. 필요한 종속성을 추가하려면 &lt;code&gt;pom.xml&lt;/code&gt; 을 편집 하고 &lt;code&gt;parent&lt;/code&gt; 섹션 바로 아래에 &lt;code&gt;spring-boot-starter-web&lt;/code&gt; 종속성을 추가 하십시오.</target>
        </trans-unit>
        <trans-unit id="cd449b240fbd615480586b8498f1ad2811cec847" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; attribute of each hint refers to the &lt;code&gt;name&lt;/code&gt; of a property. In the &lt;a href=&quot;#configuration-metadata-format&quot;&gt;initial example shown earlier&lt;/a&gt;, we provide five values for the &lt;code&gt;spring.jpa.hibernate.ddl-auto&lt;/code&gt; property: &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;validate&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;create&lt;/code&gt;, and &lt;code&gt;create-drop&lt;/code&gt;. Each value may have a description as well.</source>
          <target state="translated">각 힌트 의 &lt;code&gt;name&lt;/code&gt; 속성은 속성의 &lt;code&gt;name&lt;/code&gt; 을 나타냅니다 . 에서 &lt;a href=&quot;#configuration-metadata-format&quot;&gt;이전 같이 초기 예를 들어&lt;/a&gt; , 우리는 다섯 개 값을 제공 &lt;code&gt;spring.jpa.hibernate.ddl-auto&lt;/code&gt; 특성 : &lt;code&gt;none&lt;/code&gt; , &lt;code&gt;validate&lt;/code&gt; , &lt;code&gt;update&lt;/code&gt; , &lt;code&gt;create&lt;/code&gt; 및 &lt;code&gt;create-drop&lt;/code&gt; . 각 값에는 설명도있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b1a0ca51bc249ad5c25842cff691877bda49c15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;org.springframework.boot.loader.Launcher&lt;/code&gt; class is a special bootstrap class that is used as an executable jar&amp;rsquo;s main entry point. It is the actual &lt;code&gt;Main-Class&lt;/code&gt; in your jar file, and it is used to setup an appropriate &lt;code&gt;URLClassLoader&lt;/code&gt; and ultimately call your &lt;code&gt;main()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;org.springframework.boot.loader.Launcher&lt;/code&gt; 클래스는 실행 단지의 주 진입 점으로 사용되는 특수 부트 스트랩 클래스입니다. jar 파일 의 실제 &lt;code&gt;Main-Class&lt;/code&gt; 이며 적절한 &lt;code&gt;URLClassLoader&lt;/code&gt; 를 설정 하고 궁극적으로 &lt;code&gt;main()&lt;/code&gt; 메서드를 호출 하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="aa382bb91d9c46fd29c36cb891fa9c5e2eca8244" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prefix&lt;/code&gt; value for the annotation &lt;em&gt;must&lt;/em&gt; be in kebab case (lowercase and separated by &lt;code&gt;-&lt;/code&gt;, such as &lt;code&gt;acme.my-project.person&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;prefix&lt;/code&gt; 주석에 대한 값이 &lt;em&gt;있어야&lt;/em&gt; 케밥있을 경우 (소문자로 분리 &lt;code&gt;-&lt;/code&gt; 같은 &lt;code&gt;acme.my-project.person&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="f80f3e46cf3aba83fc84e0bd9d0bc3b13c7a3efc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;random.int*&lt;/code&gt; syntax is &lt;code&gt;OPEN value (,max) CLOSE&lt;/code&gt; where the &lt;code&gt;OPEN,CLOSE&lt;/code&gt; are any character and &lt;code&gt;value,max&lt;/code&gt; are integers. If &lt;code&gt;max&lt;/code&gt; is provided, then &lt;code&gt;value&lt;/code&gt; is the minimum value and &lt;code&gt;max&lt;/code&gt; is the maximum value (exclusive).</source>
          <target state="translated">&lt;code&gt;random.int*&lt;/code&gt; 구문은 &lt;code&gt;OPEN value (,max) CLOSE&lt;/code&gt; &lt;code&gt;OPEN,CLOSE&lt;/code&gt; 모든 문자되고 &lt;code&gt;value,max&lt;/code&gt; 의 정수이다. 경우 &lt;code&gt;max&lt;/code&gt; 제공되고, 그 다음 &lt;code&gt;value&lt;/code&gt; 최소 값이고, &lt;code&gt;max&lt;/code&gt; 최대 값 (단독)이다.</target>
        </trans-unit>
        <trans-unit id="92c09d5c2bca40e634098fb3907224ca27a10037" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source&lt;/code&gt; must be specified in kebab case (such as &lt;code&gt;my.property-name&lt;/code&gt;). However, properties can be added to the &lt;code&gt;Environment&lt;/code&gt; by using the relaxed rules.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; (예 : 케밥 경우에 지정해야합니다 &lt;code&gt;my.property-name&lt;/code&gt; ). 그러나 완화 된 규칙을 사용하여 &lt;code&gt;Environment&lt;/code&gt; 에 속성을 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3636726c3a117c711de25481042d6c9ba17eb9d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-actuator&lt;/code&gt; module includes an endpoint that exposes all &lt;code&gt;@ConfigurationProperties&lt;/code&gt; beans. Point your web browser to &lt;code&gt;/actuator/configprops&lt;/code&gt; or use the equivalent JMX endpoint. See the &quot;&lt;a href=&quot;production-ready-features#production-ready-endpoints&quot;&gt;Production ready features&lt;/a&gt;&quot; section for details.</source>
          <target state="translated">&lt;code&gt;spring-boot-actuator&lt;/code&gt; 모듈은 모든 노출 끝점 포함 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 의 콩. 웹 브라우저에서 &lt;code&gt;/actuator/configprops&lt;/code&gt; 를 가리 키 거나 동등한 JMX 엔드 포인트를 사용하십시오. 자세한 내용은 &quot; &lt;a href=&quot;production-ready-features#production-ready-endpoints&quot;&gt;생산 준비 기능&lt;/a&gt; &quot;섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5197909b0af507eade78672416f565375886f966" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-dependencies&lt;/code&gt; POM manages the versions of common dependencies. The Spring Boot plugins for Maven and Gradle allow these managed dependency versions to be customized using build properties.</source>
          <target state="translated">&lt;code&gt;spring-boot-dependencies&lt;/code&gt; POM은 일반적인 의존성의 버전을 관리합니다. Maven 및 Gradle 용 Spring Boot 플러그인을 사용하면 빌드 속성을 사용하여 이러한 관리 종속성 버전을 사용자 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="24a169045e86fae66ef214f77616bac506614fc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-devtools&lt;/code&gt; module also includes support for quick application restarts. See the &lt;a href=&quot;#using-boot-devtools&quot;&gt;Developer Tools&lt;/a&gt; section later in this chapter and the &lt;a href=&quot;howto#howto-hotswapping&quot;&gt;Hot swapping &amp;ldquo;How-to&amp;rdquo;&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;spring-boot-devtools&lt;/code&gt; 모듈은 빠른 응용 프로그램이 다시 시작에 대한 지원이 포함되어 있습니다. 자세한 내용은 이 장 뒷부분 의 &lt;a href=&quot;#using-boot-devtools&quot;&gt;개발자 도구&lt;/a&gt; 섹션과 &lt;a href=&quot;howto#howto-hotswapping&quot;&gt;핫 스와핑 &quot;방법&quot;&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="403937e1b282fc9b977a1767f8a1ea953117907e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-devtools&lt;/code&gt; module includes an embedded LiveReload server that can be used to trigger a browser refresh when a resource is changed. LiveReload browser extensions are freely available for Chrome, Firefox and Safari from &lt;a href=&quot;http://livereload.com/extensions/&quot;&gt;livereload.com&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;spring-boot-devtools&lt;/code&gt; 모듈은 자원이 변경 될 때 브라우저 리프레시를 실행하는 데 사용할 수있는 매립 LiveReload 서버를 포함한다. LiveReload 브라우저 확장 프로그램에서 크롬, 파이어 폭스와 사파리 자유롭게 사용할 수 있습니다 &lt;a href=&quot;http://livereload.com/extensions/&quot;&gt;livereload.com&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d21999e894042f8f126dbf22782f225a6d09ecca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-devtools&lt;/code&gt; module includes support for automatic application restarts. While not as fast as technologies such as &lt;a href=&quot;https://www.jrebel.com/products/jrebel&quot;&gt;JRebel&lt;/a&gt; it is usually significantly faster than a &amp;ldquo;cold start&amp;rdquo;. You should probably give it a try before investigating some of the more complex reload options discussed later in this document.</source>
          <target state="translated">&lt;code&gt;spring-boot-devtools&lt;/code&gt; 모듈은 자동으로 응용 프로그램이 다시 시작에 대한 지원이 포함되어 있습니다. &lt;a href=&quot;https://www.jrebel.com/products/jrebel&quot;&gt;JRebel&lt;/a&gt; 과 같은 기술만큼 빠르지는 않지만 일반적으로 &quot;콜드 스타트&quot;보다 훨씬 빠릅니다. 이 문서의 뒷부분에서 설명하는 좀 더 복잡한 다시로드 옵션을 조사하기 전에 시도해 보는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="bec24cc6ee4cc5e3022f5e887241caec1fac3794" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-loader&lt;/code&gt; modules lets Spring Boot support executable jar and war files. If you use the Maven plugin or the Gradle plugin, executable jars are automatically generated, and you generally do not need to know the details of how they work.</source>
          <target state="translated">&lt;code&gt;spring-boot-loader&lt;/code&gt; 모듈은 봄 부팅 지원 실행 항아리와 전쟁 파일을 할 수 있습니다. Maven 플러그인 또는 Gradle 플러그인을 사용하는 경우 실행 가능한 jar가 자동으로 생성되며 일반적으로 작동 방식에 대한 세부 정보를 알 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="28f6c6bf076f0308c1d5b684728d52a5cf34c519" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-maven-plugin&lt;/code&gt; can be used to create an executable &amp;ldquo;fat&amp;rdquo; JAR. If you use the &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; POM, you can declare the plugin and your jars are repackaged as follows:</source>
          <target state="translated">&lt;code&gt;spring-boot-maven-plugin&lt;/code&gt; 실행 &quot;지방&quot;JAR를 만드는 데 사용할 수 있습니다. &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; POM 을 사용하는 경우 플러그인을 선언하면 jar가 다음과 같이 다시 패키징됩니다.</target>
        </trans-unit>
        <trans-unit id="39041d7eb3111a433c7f983736872746ed8ea106" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-starter-data-neo4j&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo; enables the repository support as well as transaction management. Spring Boot supports both classic and reactive Neo4j repositories, using the &lt;code&gt;Neo4jTemplate&lt;/code&gt; or &lt;code&gt;ReactiveNeo4jTemplate&lt;/code&gt; beans. When Project Reactor is available on the classpath, the reactive style is also auto-configured.</source>
          <target state="translated">&lt;code&gt;spring-boot-starter-data-neo4j&lt;/code&gt; &quot;초보&quot;로 잘 트랜잭션 관리와 같은 저장소 지원을 할 수 있습니다. Spring Boot는 &lt;code&gt;Neo4jTemplate&lt;/code&gt; 또는 &lt;code&gt;ReactiveNeo4jTemplate&lt;/code&gt; Bean을 사용하여 클래식 및 반응 Neo4j 저장소를 모두 지원합니다 . 프로젝트 리액터가 클래스 경로에서 사용 가능하면 반응 스타일도 자동 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="483f1903268e3f91d0ef1d01107b555bd3ad8d04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; POM includes &lt;code&gt;&amp;lt;executions&amp;gt;&lt;/code&gt; configuration to bind the &lt;code&gt;repackage&lt;/code&gt; goal. If you do not use the parent POM, you need to declare this configuration yourself. See the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#getting-started&quot;&gt;plugin documentation&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;spring-boot-starter-parent&lt;/code&gt; POM 포함 &lt;code&gt;&amp;lt;executions&amp;gt;&lt;/code&gt; 인드의 구성을 &lt;code&gt;repackage&lt;/code&gt; 목표를. 상위 POM을 사용하지 않는 경우이 구성을 직접 선언해야합니다. 자세한 내용은 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#getting-started&quot;&gt;플러그인 문서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6cf9cf15ca05f4c5f3b426203649cabb9ae0c937" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-starter-rsocket&lt;/code&gt; starter provides both dependencies. Check out the &lt;a href=&quot;#boot-features-json-jackson&quot;&gt;Jackson support section&lt;/a&gt; to know more about customization possibilities.</source>
          <target state="translated">&lt;code&gt;spring-boot-starter-rsocket&lt;/code&gt; 선발은 모두 종속성을 제공합니다. 사용자 정의 가능성에 대해 자세히 알아 보려면 &lt;a href=&quot;#boot-features-json-jackson&quot;&gt;Jackson 지원 섹션&lt;/a&gt; 을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="b4cd4daad81831cbf453a0ee4b3e7929e7eefa6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-starter-test&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo; (in the &lt;code&gt;test&lt;/code&gt;&lt;code&gt;scope&lt;/code&gt;) contains the following provided libraries:</source>
          <target state="translated">&lt;code&gt;spring-boot-starter-test&lt;/code&gt; (에서 &quot;초보&quot; &lt;code&gt;test&lt;/code&gt; &lt;code&gt;scope&lt;/code&gt; ) 다음과 같은 제공하는 라이브러리가 포함 :</target>
        </trans-unit>
        <trans-unit id="97656fa938893cb5b235c01e442d7ba98252fbf5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt; starter depends on &lt;code&gt;io.projectreactor.netty:reactor-netty&lt;/code&gt; by default, which brings both server and client implementations. If you choose to use Jetty as a reactive server instead, you should add a dependency on the Jetty Reactive HTTP client library, &lt;code&gt;org.eclipse.jetty:jetty-reactive-httpclient&lt;/code&gt;. Using the same technology for server and client has it advantages, as it will automatically share HTTP resources between client and server.</source>
          <target state="translated">&lt;code&gt;spring-boot-starter-webflux&lt;/code&gt; 스타터에 따라 &lt;code&gt;io.projectreactor.netty:reactor-netty&lt;/code&gt; 기본적으로 서버 및 클라이언트 구현을 제공합니다. 대신 Jetty를 반응 서버로 사용하기로 선택한 경우 Jetty Reactive HTTP 클라이언트 라이브러리 &lt;code&gt;org.eclipse.jetty:jetty-reactive-httpclient&lt;/code&gt; 에 종속성을 추가해야합니다 . 서버와 클라이언트에 동일한 기술을 사용하면 클라이언트와 서버간에 자동으로 HTTP 리소스를 공유하므로 이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="6cfbe3d2e449196a312740ebddf1a9e4c3d6fc62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-test-autoconfigure&lt;/code&gt; module includes a number of annotations that can be used to automatically configure such &amp;ldquo;slices&amp;rdquo;. Each of them works in a similar way, providing a &lt;code&gt;@&amp;hellip;​Test&lt;/code&gt; annotation that loads the &lt;code&gt;ApplicationContext&lt;/code&gt; and one or more &lt;code&gt;@AutoConfigure&amp;hellip;​&lt;/code&gt; annotations that can be used to customize auto-configuration settings.</source>
          <target state="translated">&lt;code&gt;spring-boot-test-autoconfigure&lt;/code&gt; 모듈은 자동으로 구성 예 : &quot;조각&quot;을 사용할 수 있습니다 주석의 수를 포함한다. 그들 각각은 제공하는 유사한 방식으로 작동 &lt;code&gt;@&amp;hellip;​Test&lt;/code&gt; 주석을 그로드 &lt;code&gt;ApplicationContext&lt;/code&gt; 와 하나 이상의 &lt;code&gt;@AutoConfigure&amp;hellip;​&lt;/code&gt; 자동 구성 설정을 사용자 정의 할 수 있습니다 주석을.</target>
        </trans-unit>
        <trans-unit id="d95f4c0636cbeb2042c3c5cf3f74e18a3fec3b67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-boot-webflux-starter&lt;/code&gt; is using by default Reactor Netty as a server. Reactor Netty can be configured for HTTP/2 using the JDK support with JDK 9 or later. For JDK 8 environments, or for optimal runtime performance, this server also supports HTTP/2 with native libraries. To enable that, your application needs to have an additional dependency.</source>
          <target state="translated">&lt;code&gt;spring-boot-webflux-starter&lt;/code&gt; 서버로 기본 원자로의 Netty로 사용하고 있습니다. Reactor Netty는 JDK 9 이상에서 JDK 지원을 사용하여 HTTP / 2 용으로 구성 할 수 있습니다. JDK 8 환경 또는 최적의 런타임 성능을 위해이 서버는 원시 라이브러리와 함께 HTTP / 2도 지원합니다. 이를 활성화하려면 애플리케이션에 추가 종속성이 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="05cdffb103f322ef78e99980bd0bd53308d635b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-devtools.properties&lt;/code&gt; file can contain properties prefixed with &lt;code&gt;restart.exclude&lt;/code&gt; and &lt;code&gt;restart.include&lt;/code&gt;. The &lt;code&gt;include&lt;/code&gt; elements are items that should be pulled up into the &amp;ldquo;restart&amp;rdquo; classloader, and the &lt;code&gt;exclude&lt;/code&gt; elements are items that should be pushed down into the &amp;ldquo;base&amp;rdquo; classloader. The value of the property is a regex pattern that is applied to the classpath, as shown in the following example:</source>
          <target state="translated">&lt;code&gt;spring-devtools.properties&lt;/code&gt; 의 파일로 시작 속성을 포함 할 수 있습니다 &lt;code&gt;restart.exclude&lt;/code&gt; 및 &lt;code&gt;restart.include&lt;/code&gt; 을 . 는 &lt;code&gt;include&lt;/code&gt; 요소가 &quot;다시 시작&quot;클래스 로더로 뽑아해야한다 항목, 그리고는 &lt;code&gt;exclude&lt;/code&gt; 요소가 &quot;기본&quot;클래스 로더에 푸시 다운 할 수 있어야 항목입니다. 속성 값은 다음 예제와 같이 클래스 경로에 적용되는 정규식 패턴입니다.</target>
        </trans-unit>
        <trans-unit id="7123fed31a38411feacabd23a94a61322d4f85ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring-messaging&lt;/code&gt; module of the Spring Framework provides support for RSocket requesters and responders, both on the client and on the server side. See the &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web-reactive.html#rsocket-spring&quot;&gt;RSocket section&lt;/a&gt; of the Spring Framework reference for more details, including an overview of the RSocket protocol.</source>
          <target state="translated">Spring Framework 의 &lt;code&gt;spring-messaging&lt;/code&gt; 모듈은 클라이언트와 서버 측 모두에서 RSocket 요청자와 응답자에 대한 지원을 제공합니다. RSocket 프로토콜의 개요를 포함한 자세한 내용은 Spring Framework 참조 의 &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web-reactive.html#rsocket-spring&quot;&gt;RSocket 섹션&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6869840c99aab3e9472b7556d4812b3f8ab6cb77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring.datasource.jndi-name&lt;/code&gt; property can be used as an alternative to the &lt;code&gt;spring.datasource.url&lt;/code&gt;, &lt;code&gt;spring.datasource.username&lt;/code&gt;, and &lt;code&gt;spring.datasource.password&lt;/code&gt; properties to access the &lt;code&gt;DataSource&lt;/code&gt; from a specific JNDI location. For example, the following section in &lt;code&gt;application.properties&lt;/code&gt; shows how you can access a JBoss AS defined &lt;code&gt;DataSource&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;spring.datasource.jndi-name&lt;/code&gt; 속성에 대한 대안으로 사용될 수있다 &lt;code&gt;spring.datasource.url&lt;/code&gt; , &lt;code&gt;spring.datasource.username&lt;/code&gt; 및 &lt;code&gt;spring.datasource.password&lt;/code&gt; 액세스하는 속성 &lt;code&gt;DataSource&lt;/code&gt; 특정의 위치에서 JNDI. 예를 들어, &lt;code&gt;application.properties&lt;/code&gt; 의 다음 섹션 은 JBoss AS 정의 &lt;code&gt;DataSource&lt;/code&gt; 에 액세스하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="8c626c6f1eca5aeacec81583021fa88a66a8951a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring.jpa.hibernate.ddl-auto&lt;/code&gt; is a special case, because, depending on runtime conditions, it has different defaults. If an embedded database is used and no schema manager (such as Liquibase or Flyway) is handling the &lt;code&gt;DataSource&lt;/code&gt;, it defaults to &lt;code&gt;create-drop&lt;/code&gt;. In all other cases, it defaults to &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;spring.jpa.hibernate.ddl-auto&lt;/code&gt; , 런타임 조건에 따라, 그것은 다른 기본값을 가지고 있기 때문에, 특별한 경우이다. 임베디드 데이터베이스가 사용되고 스키마 관리자 (예 : Liquibase 또는 Flyway)가 &lt;code&gt;DataSource&lt;/code&gt; 를 처리하지 않는 경우 기본값은 &lt;code&gt;create-drop&lt;/code&gt; 입니다. 다른 모든 경우에는 기본값이 &lt;code&gt;none&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="17d07996c8c684f36b5f680d103cf5330e458351" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spring.profiles.active&lt;/code&gt; property follows the same ordering rules as other properties: The highest &lt;code&gt;PropertySource&lt;/code&gt; wins. This means that you can specify active profiles in &lt;code&gt;application.properties&lt;/code&gt; and then &lt;strong&gt;replace&lt;/strong&gt; them by using the command line switch.</source>
          <target state="translated">&lt;code&gt;spring.profiles.active&lt;/code&gt; 가장 높은 : 속성은 다른 속성과 같은 순서 규칙은 다음과 &lt;code&gt;PropertySource&lt;/code&gt; 의 승리. 즉, &lt;code&gt;application.properties&lt;/code&gt; 에서 활성 프로필을 지정한 다음 명령 줄 스위치를 사용하여 &lt;strong&gt;대체 할&lt;/strong&gt; 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b02fbdcb0d479889cfce214519e3cb620d8a11ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;starter&lt;/code&gt; module that provides a dependency to the &lt;code&gt;autoconfigure&lt;/code&gt; module as well as &quot;acme&quot; and any additional dependencies that are typically useful. In a nutshell, adding the starter should provide everything needed to start using that library.</source>
          <target state="translated">&lt;code&gt;starter&lt;/code&gt; 상기 의존성을 제공하는 모듈 &lt;code&gt;autoconfigure&lt;/code&gt; 모듈뿐만 아니라 &quot;절정&quot;전형적으로 유용한 추가 종속성. 간단히 말해서 스타터를 추가하면 해당 라이브러리 사용을 시작하는 데 필요한 모든 것이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="ae9bae44820dbff8d0ce3cb1d4cbab97200b56a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useDefaultDelimiters&lt;/code&gt; property is important if you use standard Spring placeholders (such as &lt;code&gt;${placeholder}&lt;/code&gt;) in your configuration. If that property is not set to &lt;code&gt;false&lt;/code&gt;, these may be expanded by the build.</source>
          <target state="translated">&lt;code&gt;useDefaultDelimiters&lt;/code&gt; 의 (예 : 표준 봄 자리 사용하는 경우 속성은 중요하다 &lt;code&gt;${placeholder}&lt;/code&gt; 구성에서). 해당 속성이 &lt;code&gt;false&lt;/code&gt; 로 설정되지 않은 경우 빌드에 의해 확장 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c7d9a426fe16b174d5fc427549a836b029c24931" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;version&lt;/code&gt; command provides a quick way to check which version of Spring Boot you are using, as follows:</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; 은 다음과 같이 명령은 사용중인 봄 부팅의 버전을 확인하는 빠른 방법을 제공합니다 :</target>
        </trans-unit>
        <trans-unit id="6c06561b39b03fe99dc352e9b7756652c5fdcdc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;webDriver&lt;/code&gt; scope created by Spring Boot will replace any user defined scope of the same name. If you define your own &lt;code&gt;webDriver&lt;/code&gt; scope you may find it stops working when you use &lt;code&gt;@WebMvcTest&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;webDriver&lt;/code&gt; 의 봄 부팅에 의해 생성 범위는 동일한 이름의 사용자 정의 범위를 대체합니다. 자신의 &lt;code&gt;webDriver&lt;/code&gt; 범위 를 정의 하면 &lt;code&gt;@WebMvcTest&lt;/code&gt; 를 사용할 때 작동이 중지 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0f7a5cc765647f72d6d18240ab174c135dcede69" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;class-reference&lt;/strong&gt; provider auto-completes classes available in the project. This provider supports the following parameters:</source>
          <target state="translated">&lt;strong&gt;클래스 참조&lt;/strong&gt; 프로젝트에서 사용할 수 제공자 자동 완료 클래스. 이 공급자는 다음 매개 변수를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="18081707bc74ae8011238f4a8e4482eeebfb432d" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;handle-as&lt;/strong&gt; provider lets you substitute the type of the property to a more high-level type. This typically happens when the property has a &lt;code&gt;java.lang.String&lt;/code&gt; type, because you do not want your configuration classes to rely on classes that may not be on the classpath. This provider supports the following parameters:</source>
          <target state="translated">&lt;strong&gt;핸들로&lt;/strong&gt; 제공 업체는보다 높은 수준의 유형 속성의 유형을 대체 할 수 있습니다. 이는 일반적으로 속성에 &lt;code&gt;java.lang.String&lt;/code&gt; 유형 이있을 때 발생 합니다. 구성 클래스가 클래스 경로에 없을 수있는 클래스에 의존하지 않도록하기 때문입니다. 이 공급자는 다음 매개 변수를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="12b6e8d24fd9f64d0ebe1bfd1711fc53c20fd418" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;logger-name&lt;/strong&gt; provider auto-completes valid logger names and &lt;a href=&quot;spring-boot-features#boot-features-custom-log-groups&quot;&gt;logger groups&lt;/a&gt;. Typically, package and class names available in the current project can be auto-completed. If groups are enabled (default) and if a custom logger group is identified in the configuration, auto-completion for it should be provided. Specific frameworks may have extra magic logger names that can be supported as well.</source>
          <target state="translated">&lt;strong&gt;로거 이름의&lt;/strong&gt; 제공자 유효한 로거 이름과 자동 - 완료 &lt;a href=&quot;spring-boot-features#boot-features-custom-log-groups&quot;&gt;로거 그룹을&lt;/a&gt; . 일반적으로 현재 프로젝트에서 사용 가능한 패키지 및 클래스 이름은 자동 완성 될 수 있습니다. 그룹이 활성화되어 있고 (기본값) 사용자 정의 로거 그룹이 구성에서 식별되면 자동 완성 기능을 제공해야합니다. 특정 프레임 워크에는 지원 될 수있는 추가 매직 로거 이름이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="34d0bbca1d28c2f4ddb940d83559671857f1e3ad" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;spring-bean-reference&lt;/strong&gt; provider auto-completes the beans that are defined in the configuration of the current project. This provider supports the following parameters:</source>
          <target state="translated">&lt;strong&gt;스프링 빈 참조&lt;/strong&gt; 제공자는 현재 프로젝트의 구성에 정의 된 콩을 자동-완료됩니다. 이 공급자는 다음 매개 변수를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="0554661cffea2e285b70977856ad81e031da1d3c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;spring-profile-name&lt;/strong&gt; provider auto-completes the Spring profiles that are defined in the configuration of the current project.</source>
          <target state="translated">&lt;strong&gt;스프링 프로파일 이름&lt;/strong&gt; 제공자 자동 완료 현재 프로젝트의 구성에 정의 된 봄 프로파일.</target>
        </trans-unit>
        <trans-unit id="df2a00e25914df5f1a9c8401661b9ecb697403bc" translate="yes" xml:space="preserve">
          <source>The Advanced Message Queuing Protocol (AMQP) is a platform-neutral, wire-level protocol for message-oriented middleware. The Spring AMQP project applies core Spring concepts to the development of AMQP-based messaging solutions. Spring Boot offers several conveniences for working with AMQP through RabbitMQ, including the &lt;code&gt;spring-boot-starter-amqp&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo;.</source>
          <target state="translated">AMQP (Advanced Message Queuing Protocol)는 메시지 지향 미들웨어를위한 플랫폼 중립적 인 유선 수준 프로토콜입니다. Spring AMQP 프로젝트는 핵심 Spring 개념을 AMQP 기반 메시징 솔루션 개발에 적용합니다. Spring Boot는 &lt;code&gt;spring-boot-starter-amqp&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo;를 포함하여 RabbitMQ를 통한 AMQP 작업을위한 몇 가지 편의를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="392d7f6c06456171c9331d7b73e9eb88a079e690" translate="yes" xml:space="preserve">
          <source>The Ant property that should be set with the result</source>
          <target state="translated">결과로 설정해야하는 Ant 특성</target>
        </trans-unit>
        <trans-unit id="3223e7635b676326f616a411a9a78f31805dd53d" translate="yes" xml:space="preserve">
          <source>The Cassandra driver has its own configuration infrastructure that loads an &lt;code&gt;application.conf&lt;/code&gt; at the root of the classpath.</source>
          <target state="translated">Cassandra 드라이버에는 클래스 경로의 루트에서 &lt;code&gt;application.conf&lt;/code&gt; 를로드하는 자체 구성 인프라가 있습니다.</target>
        </trans-unit>
        <trans-unit id="b46dd1f538d75505e988aadd7b2da9a8d9262fca" translate="yes" xml:space="preserve">
          <source>The Executable Jar Format</source>
          <target state="translated">실행 가능한 Jar 형식</target>
        </trans-unit>
        <trans-unit id="9140e110704472fbe4fbd267622755ee599d3d6b" translate="yes" xml:space="preserve">
          <source>The Gradle Wrapper provides a nice way of &amp;ldquo;obtaining&amp;rdquo; Gradle when you need to build a project. It is a small script and library that you commit alongside your code to bootstrap the build process. See &lt;a href=&quot;https://docs.gradle.org/current/userguide/gradle_wrapper.html&quot;&gt;docs.gradle.org/current/userguide/gradle_wrapper.html&lt;/a&gt; for details.</source>
          <target state="translated">Gradle Wrapper는 프로젝트를 빌드해야 할 때 Gradle을 &quot;얻는&quot;좋은 방법을 제공합니다. 빌드 프로세스를 부트 스트랩하기 위해 코드와 함께 커밋하는 작은 스크립트 및 라이브러리입니다. 자세한 내용은 &lt;a href=&quot;https://docs.gradle.org/current/userguide/gradle_wrapper.html&quot;&gt;docs.gradle.org/current/userguide/gradle_wrapper.html&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="df00ea30e4eee2eebd67b7b39b01acab9d19fdf4" translate="yes" xml:space="preserve">
          <source>The H2 console is only intended for use during development, so you should take care to ensure that &lt;code&gt;spring.h2.console.enabled&lt;/code&gt; is not set to &lt;code&gt;true&lt;/code&gt; in production.</source>
          <target state="translated">H2 콘솔은 개발 중에 만 사용하기위한 것이므로 &lt;code&gt;spring.h2.console.enabled&lt;/code&gt; 가 프로덕션 에서 &lt;code&gt;true&lt;/code&gt; 로 설정되지 않도록주의해야합니다 .</target>
        </trans-unit>
        <trans-unit id="d695e9a533bcff37ea47db84167994f3764bd18a" translate="yes" xml:space="preserve">
          <source>The HTTP method of the predicate is determined by the operation type, as shown in the following table:</source>
          <target state="translated">조건 자의 HTTP 메서드는 다음 표에 표시된 것처럼 작업 유형에 따라 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="621661a73f2fe9dff3d1d38c423db9f1e2309f1b" translate="yes" xml:space="preserve">
          <source>The HTTP status code in the response reflects the overall health status. By default, &lt;code&gt;OUT_OF_SERVICE&lt;/code&gt; and &lt;code&gt;DOWN&lt;/code&gt; map to 503. Any unmapped health statuses, including &lt;code&gt;UP&lt;/code&gt;, map to 200. You might also want to register custom status mappings if you access the health endpoint over HTTP. Configuring a custom mapping disables the defaults mappings for &lt;code&gt;DOWN&lt;/code&gt; and &lt;code&gt;OUT_OF_SERVICE&lt;/code&gt;. If you want to retain the default mappings they must be configured explicitly alongside any custom mappings. For example, the following property maps &lt;code&gt;FATAL&lt;/code&gt; to 503 (service unavailable) and retains the default mappings for &lt;code&gt;DOWN&lt;/code&gt; and &lt;code&gt;OUT_OF_SERVICE&lt;/code&gt;:</source>
          <target state="translated">응답의 HTTP 상태 코드는 전체 상태를 반영합니다. 기본적으로 &lt;code&gt;OUT_OF_SERVICE&lt;/code&gt; 및 &lt;code&gt;DOWN&lt;/code&gt; 은 503에 매핑됩니다. &lt;code&gt;UP&lt;/code&gt; 을 포함하여 매핑되지 않은 모든 상태 는 200에 매핑됩니다. HTTP를 통해 상태 끝점에 액세스하는 경우 사용자 지정 상태 매핑을 등록 할 수도 있습니다. 사용자 지정 매핑을 구성하면 &lt;code&gt;DOWN&lt;/code&gt; 및 &lt;code&gt;OUT_OF_SERVICE&lt;/code&gt; 에 대한 기본 매핑이 비활성화 됩니다. 기본 매핑을 유지하려면 사용자 지정 매핑과 함께 명시 적으로 구성해야합니다. 예를 들어 다음 속성은 &lt;code&gt;FATAL&lt;/code&gt; 을 503 (서비스를 사용할 수 없음)에 매핑하고 &lt;code&gt;DOWN&lt;/code&gt; 및 &lt;code&gt;OUT_OF_SERVICE&lt;/code&gt; 에 대한 기본 매핑을 유지합니다 .</target>
        </trans-unit>
        <trans-unit id="eced9c918eea580479e9ea11de8a30e4d159bd6d" translate="yes" xml:space="preserve">
          <source>The JSON object contained in the &lt;code&gt;deprecation&lt;/code&gt; attribute of each &lt;code&gt;properties&lt;/code&gt; element can contain the following attributes:</source>
          <target state="translated">각 &lt;code&gt;properties&lt;/code&gt; 요소 의 &lt;code&gt;deprecation&lt;/code&gt; 속성에 포함 된 JSON 개체 는 다음 속성을 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1cf68bf90b883556181e3f2698e051f1daa36f7d" translate="yes" xml:space="preserve">
          <source>The JSON object contained in the &lt;code&gt;groups&lt;/code&gt; array can contain the attributes shown in the following table:</source>
          <target state="translated">&lt;code&gt;groups&lt;/code&gt; 배열에 포함 된 JSON 객체 는 다음 표에 표시된 속성을 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6bd2a1dc79e87b2f94595170285513bbb9977750" translate="yes" xml:space="preserve">
          <source>The JSON object contained in the &lt;code&gt;hints&lt;/code&gt; array can contain the attributes shown in the following table:</source>
          <target state="translated">&lt;code&gt;hints&lt;/code&gt; 배열에 포함 된 JSON 객체 는 다음 표에 표시된 속성을 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="120867670ada0d941e4e456e023c523da1c2f7ba" translate="yes" xml:space="preserve">
          <source>The JSON object contained in the &lt;code&gt;properties&lt;/code&gt; array can contain the attributes described in the following table:</source>
          <target state="translated">&lt;code&gt;properties&lt;/code&gt; 배열에 포함 된 JSON 개체 는 다음 표에 설명 된 속성을 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="676c953b63738b23c76e72d686d725b59dbaf2bc" translate="yes" xml:space="preserve">
          <source>The JSON object contained in the &lt;code&gt;providers&lt;/code&gt; attribute of each &lt;code&gt;hint&lt;/code&gt; element can contain the attributes described in the following table:</source>
          <target state="translated">각 &lt;code&gt;hint&lt;/code&gt; 요소 의 &lt;code&gt;providers&lt;/code&gt; 특성에 포함 된 JSON 개체 는 다음 표에 설명 된 특성을 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="206b4669ca7cfee9482634f5f89beb8cf5965e0d" translate="yes" xml:space="preserve">
          <source>The JSON object contained in the &lt;code&gt;values&lt;/code&gt; attribute of each &lt;code&gt;hint&lt;/code&gt; element can contain the attributes described in the following table:</source>
          <target state="translated">각 &lt;code&gt;hint&lt;/code&gt; 요소 의 &lt;code&gt;values&lt;/code&gt; 속성에 포함 된 JSON 개체 는 다음 표에 설명 된 속성을 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6d526e0f73421babdb3cf706c85e0dd06b76811e" translate="yes" xml:space="preserve">
          <source>The JSR 305 checks can be configured by adding the &lt;code&gt;-Xjsr305&lt;/code&gt; compiler flag with the following options: &lt;code&gt;-Xjsr305={strict|warn|ignore}&lt;/code&gt;. The default behavior is the same as &lt;code&gt;-Xjsr305=warn&lt;/code&gt;. The &lt;code&gt;strict&lt;/code&gt; value is required to have null-safety taken in account in Kotlin types inferred from Spring API but should be used with the knowledge that Spring API nullability declaration could evolve even between minor releases and more checks may be added in the future).</source>
          <target state="translated">JSR 305 검사는 다음 옵션과 함께 &lt;code&gt;-Xjsr305&lt;/code&gt; 컴파일러 플래그를 추가하여 구성 할 수 있습니다. &lt;code&gt;-Xjsr305={strict|warn|ignore}&lt;/code&gt; . 기본 동작은 &lt;code&gt;-Xjsr305=warn&lt;/code&gt; 과 동일 합니다. &lt;code&gt;strict&lt;/code&gt; 값은 널 안전 스프링 API에서 추론 코 틀린 유형에 계정에서 촬영하지만 봄 API Null 허용 선언도 부 버전보다 검사 향후에 추가 될 수 있습니다) 사이에 진화 할 수 있다는 지식을 사용해야가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="3d8ecbd83787c5323387bf422a3f6a9724512774" translate="yes" xml:space="preserve">
          <source>The Java Persistence API is a standard technology that lets you &amp;ldquo;map&amp;rdquo; objects to relational databases. The &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; POM provides a quick way to get started. It provides the following key dependencies:</source>
          <target state="translated">Java Persistence API는 객체를 관계형 데이터베이스에 &quot;매핑&quot;할 수있는 표준 기술입니다. &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; POM은 시작하는 빠른 방법을 제공합니다. 다음과 같은 주요 종속성을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="38c48ec0db14156e21ae3b5923c9225737572821" translate="yes" xml:space="preserve">
          <source>The Jolokia endpoint can then be exposed by adding &lt;code&gt;jolokia&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; to the &lt;code&gt;management.endpoints.web.exposure.include&lt;/code&gt; property. You can then access it by using &lt;code&gt;/actuator/jolokia&lt;/code&gt; on your management HTTP server.</source>
          <target state="translated">그런 다음 &lt;code&gt;jolokia&lt;/code&gt; 또는 &lt;code&gt;*&lt;/code&gt; 를 &lt;code&gt;management.endpoints.web.exposure.include&lt;/code&gt; 속성 에 추가하여 Jolokia 끝점을 노출 할 수 있습니다 . 그런 다음 관리 HTTP 서버에서 &lt;code&gt;/actuator/jolokia&lt;/code&gt; 를 사용하여 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="379e4875f025c99bfb6a37209b2b4025cd878b61" translate="yes" xml:space="preserve">
          <source>The Jolokia endpoint exposes Jolokia&amp;rsquo;s servlet as an actuator endpoint. As a result, it is specific to servlet environments such as Spring MVC and Jersey. The endpoint will not be available in a WebFlux application.</source>
          <target state="translated">Jolokia 끝점은 Jolokia의 서블릿을 액추에이터 끝점으로 노출합니다. 결과적으로 Spring MVC 및 Jersey와 같은 서블릿 환경에 고유합니다. WebFlux 애플리케이션에서는 엔드 포인트를 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="57cfa774ff47f72ab005455ed8077a18cf5ef5f1" translate="yes" xml:space="preserve">
          <source>The Log4j starters gather together the dependencies for common logging requirements (such as having Tomcat use &lt;code&gt;java.util.logging&lt;/code&gt; but configuring the output using Log4j 2).</source>
          <target state="translated">Log4j 스타터는 일반적인 로깅 요구 사항 (예 : Tomcat에서 &lt;code&gt;java.util.logging&lt;/code&gt; 을 사용 하지만 Log4j 2를 사용하여 출력 구성)에 대한 종속성을 수집합니다 .</target>
        </trans-unit>
        <trans-unit id="5ce5440e7fe6c9d33c3afa705b7b4569e22de89f" translate="yes" xml:space="preserve">
          <source>The Logback documentation has a &lt;a href=&quot;https://logback.qos.ch/manual/configuration.html&quot;&gt;dedicated section that covers configuration&lt;/a&gt; in some detail.</source>
          <target state="translated">Logback 문서에는 &lt;a href=&quot;https://logback.qos.ch/manual/configuration.html&quot;&gt;구성&lt;/a&gt; 을 자세히 다루는 전용 섹션이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="773989b7ee9257032ba59f99add879ceb87b0137" translate="yes" xml:space="preserve">
          <source>The Maven and Gradle plugins can both generate that file. See &quot;&lt;a href=&quot;howto#howto-build-info&quot;&gt;Generate build information&lt;/a&gt;&quot; for more details.</source>
          <target state="translated">Maven 및 Gradle 플러그인은 모두 해당 파일을 생성 할 수 있습니다. 자세한 내용은 &quot; &lt;a href=&quot;howto#howto-build-info&quot;&gt;빌드 정보 생성&lt;/a&gt; &quot;을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1b51e9ac7441eb4c64fdba5320aa730fe666247b" translate="yes" xml:space="preserve">
          <source>The Reactive Relational Database Connectivity (&lt;a href=&quot;https://r2dbc.io&quot;&gt;R2DBC&lt;/a&gt;) project brings reactive programming APIs to relational databases. R2DBC&amp;rsquo;s &lt;code&gt;io.r2dbc.spi.Connection&lt;/code&gt; provides a standard method of working with non-blocking database connections. Connections are provided via a &lt;code&gt;ConnectionFactory&lt;/code&gt;, similar to a &lt;code&gt;DataSource&lt;/code&gt; with jdbc.</source>
          <target state="translated">반응 형 관계형 데이터베이스 연결 ( &lt;a href=&quot;https://r2dbc.io&quot;&gt;R2DBC&lt;/a&gt; ) 프로젝트는 반응 형 프로그래밍 API를 관계형 데이터베이스에 제공합니다. R2DBC의 &lt;code&gt;io.r2dbc.spi.Connection&lt;/code&gt; 은 비 차단 데이터베이스 연결로 작업하는 표준 방법을 제공합니다. 연결은 jdbc 가있는 &lt;code&gt;DataSource&lt;/code&gt; 와 유사한 &lt;code&gt;ConnectionFactory&lt;/code&gt; 를 통해 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="0ec12c6957d4cc24b08b74b98bf757e92cedd21d" translate="yes" xml:space="preserve">
          <source>The Servlet auto-configuration replaces the need to use &lt;code&gt;@Enable*HttpSession&lt;/code&gt;.</source>
          <target state="translated">서블릿 자동 구성은 &lt;code&gt;@Enable*HttpSession&lt;/code&gt; 을 사용해야하는 필요성을 대체합니다 .</target>
        </trans-unit>
        <trans-unit id="c2dce2a828e59dab615c75b9f12bbcfb3a9c0421" translate="yes" xml:space="preserve">
          <source>The Spring &lt;code&gt;Environment&lt;/code&gt; has an API for this, but you would normally set a System property (&lt;code&gt;spring.profiles.active&lt;/code&gt;) or an OS environment variable (&lt;code&gt;SPRING_PROFILES_ACTIVE&lt;/code&gt;). Also, you can launch your application with a &lt;code&gt;-D&lt;/code&gt; argument (remember to put it before the main class or jar archive), as follows:</source>
          <target state="translated">Spring &lt;code&gt;Environment&lt;/code&gt; 에는이를위한 API가 있지만 일반적으로 시스템 속성 ( &lt;code&gt;spring.profiles.active&lt;/code&gt; ) 또는 OS 환경 변수 ( &lt;code&gt;SPRING_PROFILES_ACTIVE&lt;/code&gt; )를 설정합니다. 또한 다음과 같이 &lt;code&gt;-D&lt;/code&gt; 인수를 사용 하여 애플리케이션을 시작할 수 있습니다 (메인 클래스 또는 jar 아카이브 앞에 두는 것을 잊지 마십시오 ).</target>
        </trans-unit>
        <trans-unit id="3846fbfc4ab1ba1df81d902f1c7361411aca7872" translate="yes" xml:space="preserve">
          <source>The Spring Boot AntLib module provides basic Spring Boot support for Apache Ant. You can use the module to create executable jars. To use the module, you need to declare an additional &lt;code&gt;spring-boot&lt;/code&gt; namespace in your &lt;code&gt;build.xml&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">Spring Boot AntLib 모듈은 Apache Ant에 대한 기본 Spring Boot 지원을 제공합니다. 모듈을 사용하여 실행 가능한 jar를 만들 수 있습니다. 모듈을 사용하려면 다음 예제와 같이 &lt;code&gt;build.xml&lt;/code&gt; 에 추가 &lt;code&gt;spring-boot&lt;/code&gt; 네임 스페이스 를 선언해야합니다 .</target>
        </trans-unit>
        <trans-unit id="438b52c047ca95a5c73f7f753d11409ed8b93344" translate="yes" xml:space="preserve">
          <source>The Spring Boot CLI (Command Line Interface) is a command line tool that you can use to quickly prototype with Spring. It lets you run &lt;a href=&quot;https://groovy-lang.org/&quot;&gt;Groovy&lt;/a&gt; scripts, which means that you have a familiar Java-like syntax without so much boilerplate code.</source>
          <target state="translated">Spring Boot CLI (Command Line Interface)는 Spring으로 빠르게 프로토 타입을 만드는 데 사용할 수있는 명령 줄 도구입니다. &lt;a href=&quot;https://groovy-lang.org/&quot;&gt;Groovy&lt;/a&gt; 스크립트 를 실행할 수 있습니다. 즉, 많은 상용구 코드없이 익숙한 Java와 유사한 구문을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="36e1607a9792dfbf95f7f18f40b2ef138344c987" translate="yes" xml:space="preserve">
          <source>The Spring Boot CLI (Command-Line Interface) can be installed manually by using SDKMAN! (the SDK Manager) or by using Homebrew or MacPorts if you are an OSX user. See &lt;em&gt;&lt;a href=&quot;getting-started#getting-started-installing-the-cli&quot;&gt;getting-started.html&lt;/a&gt;&lt;/em&gt; in the &amp;ldquo;Getting started&amp;rdquo; section for comprehensive installation instructions.</source>
          <target state="translated">Spring Boot CLI (Command-Line Interface)는 SDKMAN을 사용하여 수동으로 설치할 수 있습니다! (SDK 관리자) 또는 OSX 사용자 인 경우 Homebrew 또는 MacPorts를 사용합니다. 포괄적 인 설치 지침은 &quot;시작하기&quot;섹션의 &lt;em&gt;&lt;a href=&quot;getting-started#getting-started-installing-the-cli&quot;&gt;getting-started.html&lt;/a&gt;&lt;/em&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cca88130776058a513c348492f8336c0786d9331" translate="yes" xml:space="preserve">
          <source>The Spring Boot CLI includes scripts that provide command completion for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29&quot;&gt;BASH&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Z_shell&quot;&gt;zsh&lt;/a&gt; shells. You can &lt;code&gt;source&lt;/code&gt; the script (also named &lt;code&gt;spring&lt;/code&gt;) in any shell or put it in your personal or system-wide bash completion initialization. On a Debian system, the system-wide scripts are in &lt;code&gt;/shell-completion/bash&lt;/code&gt; and all scripts in that directory are executed when a new shell starts. For example, to run the script manually if you have installed by using SDKMAN!, use the following commands:</source>
          <target state="translated">Spring Boot CLI에는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29&quot;&gt;BASH&lt;/a&gt; 및 &lt;a href=&quot;https://en.wikipedia.org/wiki/Z_shell&quot;&gt;zsh&lt;/a&gt; 셸에 대한 명령 완성을 제공하는 스크립트가 포함되어 있습니다. 당신은 할 수 있습니다 &lt;code&gt;source&lt;/code&gt; 스크립트 (명명 된 &lt;code&gt;spring&lt;/code&gt; 어떤 쉘) 또는 개인 또는 시스템 전체 bash는 완료 초기화에 넣어. 데비안 시스템에서 시스템 전체 스크립트는 &lt;code&gt;/shell-completion/bash&lt;/code&gt; 에 있으며 해당 디렉토리의 모든 스크립트는 새 셸이 시작될 때 실행됩니다. 예를 들어 SDKMAN!을 사용하여 설치 한 경우 스크립트를 수동으로 실행하려면 다음 명령을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="06f9335d952182feb6c564e1d0b06211618424f6" translate="yes" xml:space="preserve">
          <source>The Spring Boot CLI is a command line tool that you can use if you want to quickly develop a Spring application. It lets you run Groovy scripts, which means that you have a familiar Java-like syntax without so much boilerplate code. You can also bootstrap a new project or write your own command for it.</source>
          <target state="translated">Spring Boot CLI는 Spring 애플리케이션을 빠르게 개발하려는 경우 사용할 수있는 명령 줄 도구입니다. Groovy 스크립트를 실행할 수 있습니다. 즉, 많은 상용구 코드없이 익숙한 Java와 유사한 구문을 사용할 수 있습니다. 새 프로젝트를 부트 스트랩하거나 해당 프로젝트에 대한 고유 한 명령을 작성할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="043dfcbdd7cf4ddd60fcd9e5d0868e36d87c0543" translate="yes" xml:space="preserve">
          <source>The Spring Boot CLI uses Aether, Maven&amp;rsquo;s dependency resolution engine, to resolve dependencies. The CLI makes use of the Maven configuration found in &lt;code&gt;~/.m2/settings.xml&lt;/code&gt; to configure Aether. The following configuration settings are honored by the CLI:</source>
          <target state="translated">Spring Boot CLI는 Maven의 종속성 해결 엔진 인 Aether를 사용하여 종속성을 해결합니다. CLI는 &lt;code&gt;~/.m2/settings.xml&lt;/code&gt; 에있는 Maven 구성을 사용하여 Aether를 구성합니다. 다음 구성 설정은 CLI에서 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="5fbd279c6f55259ecfe266d77e2ff146b09b0851" translate="yes" xml:space="preserve">
          <source>The Spring Boot Gradle Plugin provides Spring Boot support in Gradle, letting you package executable jar or war archives, run Spring Boot applications, and use the dependency management provided by &lt;code&gt;spring-boot-dependencies&lt;/code&gt;. It requires Gradle 6 (6.3 or later). Gradle 5.6.x is also supported but this support is deprecated and will be removed in a future release. Please refer to the plugin&amp;rsquo;s documentation to learn more:</source>
          <target state="translated">Spring Boot Gradle 플러그인은 Gradle에서 Spring Boot 지원을 제공하여 실행 가능한 jar 또는 war 아카이브를 패키징하고 Spring Boot 애플리케이션을 실행하며 &lt;code&gt;spring-boot-dependencies&lt;/code&gt; 에서 제공하는 종속성 관리를 사용할 수 있습니다 . Gradle 6 (6.3 이상)이 필요합니다. Gradle 5.6.x도 지원되지만이 지원은 더 이상 사용되지 않으며 향후 릴리스에서 제거됩니다. 자세한 내용은 플러그인 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="54f538c286871558f86284cb1182ba1b396b1f7d" translate="yes" xml:space="preserve">
          <source>The Spring Boot Gradle plugin also includes a &lt;code&gt;bootRun&lt;/code&gt; task that can be used to run your application in an exploded form. The &lt;code&gt;bootRun&lt;/code&gt; task is added whenever you apply the &lt;code&gt;org.springframework.boot&lt;/code&gt; and &lt;code&gt;java&lt;/code&gt; plugins and is shown in the following example:</source>
          <target state="translated">Spring Boot Gradle 플러그인에는 확장 된 형태로 애플리케이션을 실행하는 데 사용할 수 있는 &lt;code&gt;bootRun&lt;/code&gt; 작업 도 포함되어 있습니다. &lt;code&gt;bootRun&lt;/code&gt; 의 당신이 적용 할 때마다 작업이 추가됩니다 &lt;code&gt;org.springframework.boot&lt;/code&gt; 및 &lt;code&gt;java&lt;/code&gt; 플러그인을 다음 예에 표시됩니다</target>
        </trans-unit>
        <trans-unit id="1d72a5e3a96fe68c9304b4b27dbbce4f8b6fb842" translate="yes" xml:space="preserve">
          <source>The Spring Boot Maven Plugin provides Spring Boot support in Maven, letting you package executable jar or war archives and run an application &amp;ldquo;in-place&amp;rdquo;. To use it, you must use Maven 3.2 (or later).</source>
          <target state="translated">Spring Boot Maven 플러그인은 Maven에서 Spring Boot 지원을 제공하여 실행 가능한 jar 또는 war 아카이브를 패키징하고 애플리케이션을 &quot;in-place&quot;에서 실행할 수 있습니다. 이를 사용하려면 Maven 3.2 이상을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="dc5fc7a9280251cde770471539d9304cf41283b2" translate="yes" xml:space="preserve">
          <source>The Spring Boot Maven and Gradle plugins both make use of &lt;code&gt;spring-boot-loader-tools&lt;/code&gt; to actually generate jars. If you need to, you may use this library directly.</source>
          <target state="translated">Spring Boot Maven 및 Gradle 플러그인은 모두 &lt;code&gt;spring-boot-loader-tools&lt;/code&gt; 를 사용 하여 실제로 jar를 생성합니다. 필요한 경우이 라이브러리를 직접 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d4cbf238f8887128ad7f0880523d5cc0c28e6d2f" translate="yes" xml:space="preserve">
          <source>The Spring Boot Maven plugin includes a &lt;code&gt;run&lt;/code&gt; goal that can be used to quickly compile and run your application. Applications run in an exploded form, as they do in your IDE. The following example shows a typical Maven command to run a Spring Boot application:</source>
          <target state="translated">Spring Boot Maven 플러그인에는 애플리케이션을 빠르게 컴파일하고 실행하는 데 사용할 수 있는 &lt;code&gt;run&lt;/code&gt; 목표가 포함되어 있습니다. 응용 프로그램은 IDE 에서처럼 분해 된 형태로 실행됩니다. 다음 예제는 Spring Boot 애플리케이션을 실행하는 일반적인 Maven 명령을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="e5f6ef1c94c0d0bff182bbdfb7e4fa8b68f7624d" translate="yes" xml:space="preserve">
          <source>The Spring Boot auto-configuration tries its best to &amp;ldquo;do the right thing&amp;rdquo;, but sometimes things fail, and it can be hard to tell why.</source>
          <target state="translated">Spring Boot 자동 구성은 &quot;올바른 일을하기&quot;위해 최선을 다하지만 때때로 실패하고 그 이유를 알기가 어려울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d94a8af84187033fa78cd504bc8d25e95f30486" translate="yes" xml:space="preserve">
          <source>The Spring Boot developer tools are not limited to local development. You can also use several features when running applications remotely. Remote support is opt-in as enabling it can be a security risk. It should only be enabled when running on a trusted network or when secured with SSL. If neither of these options is available to you, you should not use DevTools' remote support. You should never enable support on a production deployment.</source>
          <target state="translated">Spring Boot 개발자 도구는 로컬 개발에만 국한되지 않습니다. 응용 프로그램을 원격으로 실행할 때 여러 기능을 사용할 수도 있습니다. 원격 지원은 보안 위험이 될 수 있으므로 옵트 인됩니다. 신뢰할 수있는 네트워크에서 실행되거나 SSL로 보안되는 경우에만 활성화해야합니다. 이러한 옵션 중 어느 것도 사용할 수없는 경우 DevTools의 원격 지원을 사용해서는 안됩니다. 프로덕션 배포에 대한 지원을 활성화해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="ec20f984d8bb89b391a34a27e1348da6dbd822a6" translate="yes" xml:space="preserve">
          <source>The Spring Boot reference guide is available as:</source>
          <target state="translated">Spring Boot 참조 가이드는 다음과 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="542fec5e0331a63ad1aa41863776d38acf034074" translate="yes" xml:space="preserve">
          <source>The Spring Boot version that you are using, formatted for display (surrounded with brackets and prefixed with &lt;code&gt;v&lt;/code&gt;). For example &lt;code&gt;(v2.4.0)&lt;/code&gt;.</source>
          <target state="translated">사용중인 Spring Boot 버전, 표시 형식 (괄호로 둘러싸고 &lt;code&gt;v&lt;/code&gt; 접두사 ). 예 : &lt;code&gt;(v2.4.0)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="65710c00dcec03a8ce247602b71068db2aa6abc2" translate="yes" xml:space="preserve">
          <source>The Spring Boot version that you are using. For example &lt;code&gt;2.4.0&lt;/code&gt;.</source>
          <target state="translated">사용중인 Spring Boot 버전입니다. 예 : &lt;code&gt;2.4.0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e4232d3c93f28945cf2bb41bf7c23b3817f9cdd5" translate="yes" xml:space="preserve">
          <source>The Spring Framework includes a dedicated test module for such integration testing. You can declare a dependency directly to &lt;code&gt;org.springframework:spring-test&lt;/code&gt; or use the &lt;code&gt;spring-boot-starter-test&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo; to pull it in transitively.</source>
          <target state="translated">Spring Framework에는 이러한 통합 테스트를위한 전용 테스트 모듈이 포함되어 있습니다. &lt;code&gt;org.springframework:spring-test&lt;/code&gt; 에 직접 종속성을 선언 하거나 &lt;code&gt;spring-boot-starter-test&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo;를 사용하여 전 이적으로 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="66160b8cb2ba17126911c9d76648c4466f83af53" translate="yes" xml:space="preserve">
          <source>The Spring Framework provides an abstraction for sending email by using the &lt;code&gt;JavaMailSender&lt;/code&gt; interface, and Spring Boot provides auto-configuration for it as well as a starter module.</source>
          <target state="translated">Spring Framework는 &lt;code&gt;JavaMailSender&lt;/code&gt; 인터페이스 를 사용하여 이메일 전송을위한 추상화를 제공 하며 Spring Boot는 이에 대한 자동 구성과 스타터 모듈을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="cf442293655f8a917e78583ccf3b365e85904e8a" translate="yes" xml:space="preserve">
          <source>The Spring Framework provides extensive support for integrating with messaging systems, from simplified use of the JMS API using &lt;code&gt;JmsTemplate&lt;/code&gt; to a complete infrastructure to receive messages asynchronously. Spring AMQP provides a similar feature set for the Advanced Message Queuing Protocol. Spring Boot also provides auto-configuration options for &lt;code&gt;RabbitTemplate&lt;/code&gt; and RabbitMQ. Spring WebSocket natively includes support for STOMP messaging, and Spring Boot has support for that through starters and a small amount of auto-configuration. Spring Boot also has support for Apache Kafka.</source>
          <target state="translated">Spring Framework는 &lt;code&gt;JmsTemplate&lt;/code&gt; 을 사용하는 JMS API의 단순화 된 사용에서 메시지를 비동기 적으로 수신하는 완전한 인프라에 이르기까지 메시징 시스템과의 통합을위한 광범위한 지원을 제공합니다 . Spring AMQP는 Advanced Message Queuing Protocol에 대해 유사한 기능 세트를 제공합니다. Spring Boot는 &lt;code&gt;RabbitTemplate&lt;/code&gt; 및 RabbitMQ에 대한 자동 구성 옵션도 제공합니다 . Spring WebSocket은 기본적으로 STOMP 메시징에 대한 지원을 포함하며 Spring Boot는 시작 및 소량의 자동 구성을 통해이를 지원합니다. Spring Boot는 Apache Kafka도 지원합니다.</target>
        </trans-unit>
        <trans-unit id="ca2ca66e818b2945a06e2fd743cf5857a2977c51" translate="yes" xml:space="preserve">
          <source>The Spring Framework provides support for transparently adding caching to an application. At its core, the abstraction applies caching to methods, thus reducing the number of executions based on the information available in the cache. The caching logic is applied transparently, without any interference to the invoker. Spring Boot auto-configures the cache infrastructure as long as caching support is enabled via the &lt;code&gt;@EnableCaching&lt;/code&gt; annotation.</source>
          <target state="translated">Spring Framework는 애플리케이션에 투명하게 캐싱을 추가하기위한 지원을 제공합니다. 핵심에서 추상화는 캐싱을 메서드에 적용하므로 캐시에서 사용 가능한 정보를 기반으로 실행 횟수가 줄어 듭니다. 캐싱 로직은 호출자에 대한 간섭없이 투명하게 적용됩니다. Spring Boot는 &lt;code&gt;@EnableCaching&lt;/code&gt; 주석을 통해 캐싱 지원이 활성화되어있는 한 캐시 인프라를 자동 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="0828a8549bb23bb76f7c5a3cd5a1f0b9bf6ef851" translate="yes" xml:space="preserve">
          <source>The StatsD registry pushes metrics over UDP to a StatsD agent eagerly. By default, metrics are exported to a &lt;a href=&quot;https://micrometer.io/docs/registry/statsD&quot;&gt;StatsD&lt;/a&gt; agent running on your local machine. The StatsD agent host, port, and protocol to use can be provided using:</source>
          <target state="translated">StatsD 레지스트리는 UDP를 통해 통계를 StatsD 에이전트에 열심히 푸시합니다. 기본적으로 메트릭은 로컬 머신에서 실행중인 &lt;a href=&quot;https://micrometer.io/docs/registry/statsD&quot;&gt;StatsD&lt;/a&gt; 에이전트 로 내보내집니다 . 사용할 StatsD 에이전트 호스트, 포트 및 프로토콜은 다음을 사용하여 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="93b549c8e79a73845dc3974cfe7078b06df460e9" translate="yes" xml:space="preserve">
          <source>The above approach will only work for package level logging. Since relaxed binding always converts environment variables to lowercase, it&amp;rsquo;s not possible to configure logging for an individual class in this way. If you need to configure logging for a class, you can use &lt;a href=&quot;#boot-features-external-config-application-json&quot;&gt;the &lt;code&gt;SPRING_APPLICATION_JSON&lt;/code&gt;&lt;/a&gt; variable.</source>
          <target state="translated">위의 접근 방식은 패키지 수준 로깅에만 적용됩니다. 완화 된 바인딩은 항상 환경 변수를 소문자로 변환하므로 이러한 방식으로 개별 클래스에 대한 로깅을 구성 할 수 없습니다. 당신이 클래스에 대한 구성 로깅해야하는 경우 사용할 수 있습니다 &lt;a href=&quot;#boot-features-external-config-application-json&quot;&gt; &lt;code&gt;SPRING_APPLICATION_JSON&lt;/code&gt; 의&lt;/a&gt; 변수를.</target>
        </trans-unit>
        <trans-unit id="19f5f200be38dc333871ff0273cad9957a50ea45" translate="yes" xml:space="preserve">
          <source>The above configuration allows Neo4j-related beans in the application to communicate with Neo4j running inside the Testcontainers-managed Docker container.</source>
          <target state="translated">위의 구성은 애플리케이션의 Neo4j 관련 Bean이 Testcontainers가 관리하는 Docker 컨테이너 내에서 실행되는 Neo4j와 통신 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="47b1ed0d69001900d30a1ec42f96b5694e065290" translate="yes" xml:space="preserve">
          <source>The above list only includes &lt;code&gt;SpringApplicationEvent&lt;/code&gt;s that are tied to a &lt;code&gt;SpringApplication&lt;/code&gt;. In addition to these, the following events are also published after &lt;code&gt;ApplicationPreparedEvent&lt;/code&gt; and before &lt;code&gt;ApplicationStartedEvent&lt;/code&gt;:</source>
          <target state="translated">위의 목록은 포함 &lt;code&gt;SpringApplicationEvent&lt;/code&gt; 의 A와 연결되는 &lt;code&gt;SpringApplication&lt;/code&gt; 을 . 이 외에도 &lt;code&gt;ApplicationPreparedEvent&lt;/code&gt; 이후 와 &lt;code&gt;ApplicationStartedEvent&lt;/code&gt; 이전에 다음 이벤트가 게시됩니다 .</target>
        </trans-unit>
        <trans-unit id="a5b637b6374353621829f5ffa586f42cd93c8ad1" translate="yes" xml:space="preserve">
          <source>The actual application &lt;em&gt;now&lt;/em&gt; shows the banner (as overridden by configuration) and uses three sources for the &lt;code&gt;ApplicationContext&lt;/code&gt; (in the following order): &lt;code&gt;demo.MyApp&lt;/code&gt;, &lt;code&gt;com.acme.Config&lt;/code&gt;, and &lt;code&gt;com.acme.ExtraConfig&lt;/code&gt;.</source>
          <target state="translated">실제 응용 프로그램은 &lt;em&gt;이제&lt;/em&gt; 배너를 보여줍니다 (구성에 의해 무시로)와 세 가지 소스를 사용 &lt;code&gt;ApplicationContext&lt;/code&gt; 를 (다음 순서대로) : &lt;code&gt;demo.MyApp&lt;/code&gt; , &lt;code&gt;com.acme.Config&lt;/code&gt; 및 &lt;code&gt;com.acme.ExtraConfig&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="f5822e26b4ddc5c5351c6aa8e32557bd450fef3e" translate="yes" xml:space="preserve">
          <source>The annotation processor applies a number of heuristics to extract the default value from the source model. Default values have to be provided statically. In particular, do not refer to a constant defined in another class. Also, the annotation processor cannot auto-detect default values for &lt;code&gt;Enum&lt;/code&gt;s and &lt;code&gt;Collections&lt;/code&gt;s.</source>
          <target state="translated">어노테이션 프로세서는 소스 모델에서 기본값을 추출하기 위해 많은 휴리스틱을 적용합니다. 기본값은 정적으로 제공되어야합니다. 특히 다른 클래스에 정의 된 상수를 참조하지 마십시오. 또한 주석 프로세서는 &lt;code&gt;Enum&lt;/code&gt; 및 &lt;code&gt;Collections&lt;/code&gt; 의 기본값을 자동으로 감지 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="6c55f7f2874348e88144ead57c857943fa734c32" translate="yes" xml:space="preserve">
          <source>The annotation processor automatically considers inner classes as nested properties. Rather than documenting the &lt;code&gt;ip&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; at the root of the namespace, we could create a sub-namespace for it. Consider the updated example:</source>
          <target state="translated">주석 프로세서는 자동으로 내부 클래스를 중첩 된 속성으로 간주합니다. 네임 스페이스의 루트에 있는 &lt;code&gt;ip&lt;/code&gt; 와 &lt;code&gt;port&lt;/code&gt; 를 문서화하는 대신 하위 네임 스페이스를 만들 수 있습니다. 업데이트 된 예를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="4c33484868ab07ba4a359a5e23ad661a8fa40ba8" translate="yes" xml:space="preserve">
          <source>The appendix includes an &lt;a href=&quot;appendix-application-properties#common-application-properties&quot;&gt;&lt;code&gt;application.properties&lt;/code&gt;&lt;/a&gt; example with a list of the most common properties supported by Spring Boot. The definitive list comes from searching the source code for &lt;code&gt;@ConfigurationProperties&lt;/code&gt; and &lt;code&gt;@Value&lt;/code&gt; annotations as well as the occasional use of &lt;code&gt;Binder&lt;/code&gt;. For more about the exact ordering of loading properties, see &quot;&lt;a href=&quot;spring-boot-features#boot-features-external-config&quot;&gt;spring-boot-features.html&lt;/a&gt;&quot;.</source>
          <target state="translated">부록에는 Spring Boot에서 지원하는 가장 일반적인 속성 목록과 함께 &lt;a href=&quot;appendix-application-properties#common-application-properties&quot;&gt; &lt;code&gt;application.properties&lt;/code&gt; &lt;/a&gt; 예제가 포함되어 있습니다. 최종 목록은 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 및 &lt;code&gt;@Value&lt;/code&gt; 어노테이션에 대한 소스 코드 검색 과 가끔 &lt;code&gt;Binder&lt;/code&gt; 를 사용하는 것에서 비롯됩니다 . 로딩 속성의 정확한 순서에 대한 자세한 내용은 &quot; &lt;a href=&quot;spring-boot-features#boot-features-external-config&quot;&gt;spring-boot-features.html&lt;/a&gt; &quot;을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="03107b934b088a5d52d2b6a1367366ddbc01f8a2" translate="yes" xml:space="preserve">
          <source>The application context is closed and the application cannot serve traffic.</source>
          <target state="translated">애플리케이션 컨텍스트가 닫히고 애플리케이션이 트래픽을 제공 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="8b8397da9f607a3aa3abf597f2c06ddc5a9898fc" translate="yes" xml:space="preserve">
          <source>The application context is refreshed. The application performs startup tasks and does not receive traffic yet.</source>
          <target state="translated">응용 프로그램 컨텍스트가 새로 고쳐집니다. 응용 프로그램은 시작 작업을 수행하고 아직 트래픽을 수신하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4ffcfbe521ba7fdb052655a9d71898a5d247a209" translate="yes" xml:space="preserve">
          <source>The arguments to pass to the program (the Spring Boot app).</source>
          <target state="translated">프로그램 (Spring Boot 앱)에 전달할 인수입니다.</target>
        </trans-unit>
        <trans-unit id="5856c12ddc5ea9c5c0c2ed232a2e8741663b7ea0" translate="yes" xml:space="preserve">
          <source>The auto-configuration adds the following features on top of Spring&amp;rsquo;s defaults:</source>
          <target state="translated">자동 구성은 Spring의 기본값 위에 다음 기능을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="f4ed7c51ffd97219c0831f059fd99ef3d5b067ba" translate="yes" xml:space="preserve">
          <source>The auto-configuration applies when the default properties file for the configured resource bundle is available (i.e. &lt;code&gt;messages.properties&lt;/code&gt; by default). If your resource bundle contains only language-specific properties files, you are required to add the default. If no properties file is found that matches any of the configured base names, there will be no auto-configured &lt;code&gt;MessageSource&lt;/code&gt;.</source>
          <target state="translated">자동 구성은 구성된 리소스 번들에 대한 기본 속성 파일을 사용할 수있을 때 적용됩니다 (즉 , 기본적으로 &lt;code&gt;messages.properties&lt;/code&gt; ). 리소스 번들에 언어 별 속성 파일 만 포함 된 경우 기본값을 추가해야합니다. 구성된 기본 이름과 일치하는 속성 파일이 없으면 자동 구성된 &lt;code&gt;MessageSource&lt;/code&gt; 가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="62ca6d745f237ac22b30cc52904cbb070d36100e" translate="yes" xml:space="preserve">
          <source>The auto-configured &lt;code&gt;Driver&lt;/code&gt; is created using &lt;code&gt;ConfigBuilder&lt;/code&gt;. To fine-tune its configuration, declare one or more &lt;code&gt;ConfigBuilderCustomizer&lt;/code&gt; beans. Each will be called in order with the &lt;code&gt;ConfigBuilder&lt;/code&gt; that is used to build the &lt;code&gt;Driver&lt;/code&gt;.</source>
          <target state="translated">자동 구성 &lt;code&gt;Driver&lt;/code&gt; 는 &lt;code&gt;ConfigBuilder&lt;/code&gt; 를 사용하여 생성됩니다 . 구성을 미세 조정하려면 하나 이상의 &lt;code&gt;ConfigBuilderCustomizer&lt;/code&gt; Bean을 선언하십시오 . 각각은 &lt;code&gt;Driver&lt;/code&gt; 를 빌드하는 데 사용되는 &lt;code&gt;ConfigBuilder&lt;/code&gt; 와 함께 순서대로 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="46e1d4a5484ff2020d924d0ed5814e4431a6e3b0" translate="yes" xml:space="preserve">
          <source>The auto-configured &lt;code&gt;MongoClient&lt;/code&gt; is created using a &lt;code&gt;MongoClientSettings&lt;/code&gt; bean. If you have defined your own &lt;code&gt;MongoClientSettings&lt;/code&gt;, it will be used without modification and the &lt;code&gt;spring.data.mongodb&lt;/code&gt; properties will be ignored. Otherwise a &lt;code&gt;MongoClientSettings&lt;/code&gt; will be auto-configured and will have the &lt;code&gt;spring.data.mongodb&lt;/code&gt; properties applied to it. In either case, you can declare one or more &lt;code&gt;MongoClientSettingsBuilderCustomizer&lt;/code&gt; beans to fine-tune the &lt;code&gt;MongoClientSettings&lt;/code&gt; configuration. Each will be called in order with the &lt;code&gt;MongoClientSettings.Builder&lt;/code&gt; that is used to build the &lt;code&gt;MongoClientSettings&lt;/code&gt;.</source>
          <target state="translated">자동 구성 &lt;code&gt;MongoClient&lt;/code&gt; 는 &lt;code&gt;MongoClientSettings&lt;/code&gt; 빈을 사용하여 생성됩니다 . 자신 만의 &lt;code&gt;MongoClientSettings&lt;/code&gt; 를 정의한 경우 수정없이 사용되며 &lt;code&gt;spring.data.mongodb&lt;/code&gt; 속성은 무시됩니다. 그렇지 않으면 &lt;code&gt;MongoClientSettings&lt;/code&gt; 가 자동 구성되고 &lt;code&gt;spring.data.mongodb&lt;/code&gt; 속성이 적용됩니다. 두 경우 모두 하나 이상의 &lt;code&gt;MongoClientSettingsBuilderCustomizer&lt;/code&gt; Bean을 선언 하여 &lt;code&gt;MongoClientSettings&lt;/code&gt; 구성 을 미세 조정할 수 있습니다. 각각은과 순서로 호출됩니다 &lt;code&gt;MongoClientSettings.Builder&lt;/code&gt; 빌드하는 데 사용됩니다 &lt;code&gt;MongoClientSettings&lt;/code&gt; 을.</target>
        </trans-unit>
        <trans-unit id="b3ab5919a700cbeb4d86c46722b07f4e12b97d83" translate="yes" xml:space="preserve">
          <source>The auto-configured &lt;code&gt;TaskExecutorBuilder&lt;/code&gt; allows you to easily create instances that reproduce what the auto-configuration does by default.</source>
          <target state="translated">자동 구성 &lt;code&gt;TaskExecutorBuilder&lt;/code&gt; 를 사용하면 자동 구성이 기본적으로 수행하는 작업을 재현하는 인스턴스를 쉽게 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0e68e5b27e6e8799bcc6cb25c32dfa3d38d96e4" translate="yes" xml:space="preserve">
          <source>The banner that is printed on start up can be changed by adding a &lt;code&gt;banner.txt&lt;/code&gt; file to your classpath or by setting the &lt;code&gt;spring.banner.location&lt;/code&gt; property to the location of such a file. If the file has an encoding other than UTF-8, you can set &lt;code&gt;spring.banner.charset&lt;/code&gt;. In addition to a text file, you can also add a &lt;code&gt;banner.gif&lt;/code&gt;, &lt;code&gt;banner.jpg&lt;/code&gt;, or &lt;code&gt;banner.png&lt;/code&gt; image file to your classpath or set the &lt;code&gt;spring.banner.image.location&lt;/code&gt; property. Images are converted into an ASCII art representation and printed above any text banner.</source>
          <target state="translated">시작할 때 인쇄되는 배너는 &lt;code&gt;banner.txt&lt;/code&gt; 파일을 클래스 경로 에 추가 하거나 &lt;code&gt;spring.banner.location&lt;/code&gt; 속성을 해당 파일의 위치 로 설정하여 변경할 수 있습니다. 파일에 UTF-8 이외의 인코딩이있는 경우 &lt;code&gt;spring.banner.charset&lt;/code&gt; 을 설정할 수 있습니다 . 텍스트 파일 외에도 &lt;code&gt;banner.gif&lt;/code&gt; , &lt;code&gt;banner.jpg&lt;/code&gt; 또는 &lt;code&gt;banner.png&lt;/code&gt; 이미지 파일을 클래스 경로에 추가하거나 &lt;code&gt;spring.banner.image.location&lt;/code&gt; 속성을 설정할 수 있습니다. 이미지는 ASCII 아트 표현으로 변환되고 텍스트 배너 위에 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="f60a3e450c5a58875b996be7029eb5079deaccda" translate="yes" xml:space="preserve">
          <source>The basename of the resource bundle as well as several other attributes can be configured using the &lt;code&gt;spring.messages&lt;/code&gt; namespace, as shown in the following example:</source>
          <target state="translated">다음 예와 같이 &lt;code&gt;spring.messages&lt;/code&gt; 네임 스페이스를 사용하여 리소스 번들의 기본 이름과 기타 여러 속성을 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2eb6c122d477c0557439c7c9fae7869478471c18" translate="yes" xml:space="preserve">
          <source>The basic features you get by default in a web application are:</source>
          <target state="translated">웹 애플리케이션에서 기본적으로 제공되는 기본 기능은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f930fe8082fef364c14f3847d5c0e8359527c273" translate="yes" xml:space="preserve">
          <source>The bean name in the example above is &lt;code&gt;acme-com.example.AcmeProperties&lt;/code&gt;.</source>
          <target state="translated">위의 예에서 빈 이름은 &lt;code&gt;acme-com.example.AcmeProperties&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7cf942f1fe0f8a9478e5f571e7fed90d00146beb" translate="yes" xml:space="preserve">
          <source>The bean shown in the preceding example registers any &lt;code&gt;@ServerEndpoint&lt;/code&gt; annotated beans with the underlying WebSocket container. When deployed to a standalone servlet container, this role is performed by a servlet container initializer, and the &lt;code&gt;ServerEndpointExporter&lt;/code&gt; bean is not required.</source>
          <target state="translated">앞의 예제에 표시된 Bean 은 기본 WebSocket 컨테이너에 &lt;code&gt;@ServerEndpoint&lt;/code&gt; 주석이 달린 Bean을 등록합니다 . 독립형 서블릿 컨테이너에 배치 될 때이 역할은 서블릿 컨테이너 이니셜 라이저에 의해 수행되며 &lt;code&gt;ServerEndpointExporter&lt;/code&gt; Bean은 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="18a62cdf18fa7d9a567c2378abb02e5531740c23" translate="yes" xml:space="preserve">
          <source>The binder is not aware of the metadata. If you provide that hint, you still need to transform the bean name into an actual Bean reference using by the &lt;code&gt;ApplicationContext&lt;/code&gt;.</source>
          <target state="translated">바인더는 메타 데이터를 인식하지 못합니다. 해당 힌트를 제공하는 경우에도 &lt;code&gt;ApplicationContext&lt;/code&gt; 를 사용하여 Bean 이름을 실제 Bean 참조로 변환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="22bf516c92012b073fc7d06f37f131ebef4d24e3" translate="yes" xml:space="preserve">
          <source>The cache abstraction does not provide an actual store and relies on abstraction materialized by the &lt;code&gt;org.springframework.cache.Cache&lt;/code&gt; and &lt;code&gt;org.springframework.cache.CacheManager&lt;/code&gt; interfaces.</source>
          <target state="translated">캐시 추상화는 실제 저장소를 제공하지 않으며 &lt;code&gt;org.springframework.cache.Cache&lt;/code&gt; 및 &lt;code&gt;org.springframework.cache.CacheManager&lt;/code&gt; 인터페이스에 의해 구체화 된 추상화에 의존합니다 .</target>
        </trans-unit>
        <trans-unit id="ab18f367e084ebc31ab4165b2a0132ebf4179ec1" translate="yes" xml:space="preserve">
          <source>The charset to use for console logging.</source>
          <target state="translated">콘솔 로깅에 사용할 문자 집합입니다.</target>
        </trans-unit>
        <trans-unit id="2c39b1bd0a53fefef47f2121843aeae23229e0ae" translate="yes" xml:space="preserve">
          <source>The charset to use for file logging (if &lt;code&gt;LOG_FILE&lt;/code&gt; is enabled).</source>
          <target state="translated">파일 로깅에 사용할 문자 &lt;code&gt;LOG_FILE&lt;/code&gt; ( LOG_FILE 이 활성화 된 경우).</target>
        </trans-unit>
        <trans-unit id="c6ee4a07ee03739a34c9e868011d152e62b91e07" translate="yes" xml:space="preserve">
          <source>The class name of the data type of the group. For example, if the group were based on a class annotated with &lt;code&gt;@ConfigurationProperties&lt;/code&gt;, the attribute would contain the fully qualified name of that class. If it were based on a &lt;code&gt;@Bean&lt;/code&gt; method, it would be the return type of that method. If the type is not known, the attribute may be omitted.</source>
          <target state="translated">그룹 데이터 유형의 클래스 이름입니다. 예를 들어 그룹이 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 주석이 달린 클래스를 기반으로하는 경우 속성에는 해당 클래스의 정규화 된 이름이 포함됩니다. &lt;code&gt;@Bean&lt;/code&gt; 메서드를 기반으로하는 경우 해당 메서드의 반환 유형이됩니다. 유형을 알 수없는 경우 속성을 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="85a3d2abda41a2a6d52024cc6494ce58b2633299" translate="yes" xml:space="preserve">
          <source>The class name of the source that contributed this group. For example, if the group were based on a &lt;code&gt;@Bean&lt;/code&gt; method annotated with &lt;code&gt;@ConfigurationProperties&lt;/code&gt;, this attribute would contain the fully qualified name of the &lt;code&gt;@Configuration&lt;/code&gt; class that contains the method. If the source type is not known, the attribute may be omitted.</source>
          <target state="translated">이 그룹에 기여한 소스의 클래스 이름입니다. 예를 들어, 그룹이 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 주석이 달린 &lt;code&gt;@Bean&lt;/code&gt; 메소드를 기반으로하는 경우이 속성은 메소드를 포함하는 &lt;code&gt;@Configuration&lt;/code&gt; 클래스 의 완전한 이름 을 포함합니다. 소스 유형을 알 수없는 경우 속성을 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1b3c777ae294102ce279ea22c6cf6f3dda36e685" translate="yes" xml:space="preserve">
          <source>The class name of the source that contributed this property. For example, if the property were from a class annotated with &lt;code&gt;@ConfigurationProperties&lt;/code&gt;, this attribute would contain the fully qualified name of that class. If the source type is unknown, it may be omitted.</source>
          <target state="translated">이 속성을 제공 한 소스의 클래스 이름입니다. 예를 들어 속성이 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 주석이 달린 클래스의 속성 인 경우이 속성에는 해당 클래스의 정규화 된 이름이 포함됩니다. 소스 유형을 알 수없는 경우 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="57f25cca62f41d7d1b99498bfbea0a294ee0e28c" translate="yes" xml:space="preserve">
          <source>The classpath &lt;code&gt;/config&lt;/code&gt; package</source>
          <target state="translated">classpath &lt;code&gt;/config&lt;/code&gt; 패키지</target>
        </trans-unit>
        <trans-unit id="07c00827ba443222e610d4e07dbdc5d3f368bf4b" translate="yes" xml:space="preserve">
          <source>The classpath index file can be provided in &lt;code&gt;BOOT-INF/classpath.idx&lt;/code&gt;. It provides a list of jar names (not including the directory) in the order that they should be added to the classpath. Each line must start with dash space (&lt;code&gt;&quot;-&amp;middot;&quot;&lt;/code&gt;) and names must be in double quotes.</source>
          <target state="translated">클래스 경로 색인 파일은 &lt;code&gt;BOOT-INF/classpath.idx&lt;/code&gt; 에서 제공 할 수 있습니다 . 클래스 경로에 추가해야하는 순서대로 jar 이름 목록 (디렉토리 제외)을 제공합니다. 각 줄은 대시 공백 ( &lt;code&gt;&quot;-&amp;middot;&quot;&lt;/code&gt; )으로 시작해야 하며 이름은 큰 따옴표로 묶어야합니다.</target>
        </trans-unit>
        <trans-unit id="2e24c66207cf2198152840d6ed7b5b811c787c2f" translate="yes" xml:space="preserve">
          <source>The classpath root</source>
          <target state="translated">클래스 경로 루트</target>
        </trans-unit>
        <trans-unit id="cfe52a53fd3af524c28242af05853c1c9f76f5cb" translate="yes" xml:space="preserve">
          <source>The commit time in &lt;code&gt;git.properties&lt;/code&gt; is expected to match the following format: &lt;code&gt;yyyy-MM-dd&amp;rsquo;T&amp;rsquo;HH:mm:ssZ&lt;/code&gt;. This is the default format for both plugins listed above. Using this format lets the time be parsed into a &lt;code&gt;Date&lt;/code&gt; and its format, when serialized to JSON, to be controlled by Jackson&amp;rsquo;s date serialization configuration settings.</source>
          <target state="translated">&lt;code&gt;git.properties&lt;/code&gt; 의 커밋 시간은 &lt;code&gt;yyyy-MM-dd&amp;rsquo;T&amp;rsquo;HH:mm:ssZ&lt;/code&gt; 형식과 일치 할 것으로 예상됩니다 . 이것은 위에 나열된 두 플러그인의 기본 형식입니다. 이 형식을 사용하면 시간을 &lt;code&gt;Date&lt;/code&gt; 로 구문 분석 하고 JSON으로 직렬화 할 때 해당 형식을 Jackson의 날짜 직렬화 구성 설정에 의해 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b7213ef66ff2ac13c7e66881b082c82ebd3ad5f" translate="yes" xml:space="preserve">
          <source>The configuration above almost works on its own. To complete the picture, you need to configure &lt;code&gt;TransactionManagers&lt;/code&gt; for the two &lt;code&gt;EntityManagers&lt;/code&gt; as well. If you mark one of them as &lt;code&gt;@Primary&lt;/code&gt;, it could be picked up by the default &lt;code&gt;JpaTransactionManager&lt;/code&gt; in Spring Boot. The other would have to be explicitly injected into a new instance. Alternatively, you might be able to use a JTA transaction manager that spans both.</source>
          <target state="translated">위의 구성은 거의 자체적으로 작동합니다. 그림을 완성하려면 두 &lt;code&gt;EntityManagers&lt;/code&gt; 에 대해서도 &lt;code&gt;TransactionManagers&lt;/code&gt; 를 구성해야합니다 . 그들 중 하나를 &lt;code&gt;@Primary&lt;/code&gt; 로 표시하면 Spring Boot 의 기본 &lt;code&gt;JpaTransactionManager&lt;/code&gt; 에서 선택할 수 있습니다 . 다른 하나는 새 인스턴스에 명시 적으로 주입해야합니다. 또는 둘 모두에 걸쳐있는 JTA 트랜잭션 관리자를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d3b4be8fcab55ae3c5d4df1f120ccf8df20c32ae" translate="yes" xml:space="preserve">
          <source>The configuration below will, however, cause the custom &lt;code&gt;WebMvcConfigurer&lt;/code&gt; to be loaded by the test slice.</source>
          <target state="translated">그러나 아래 구성은 사용자 정의 &lt;code&gt;WebMvcConfigurer&lt;/code&gt; 가 테스트 슬라이스에 의해로드되도록합니다.</target>
        </trans-unit>
        <trans-unit id="157bf4f09ed2ae2ed5ef92bbc1c578044490a9ae" translate="yes" xml:space="preserve">
          <source>The configure action to apply when no user defined ConfigureRedisAction bean is present.</source>
          <target state="translated">사용자 정의 ConfigureRedisAction Bean이 없을 때 적용 할 구성 조치입니다.</target>
        </trans-unit>
        <trans-unit id="52f719e4c7a3d02cbc511eec73853ffc1ca7494c" translate="yes" xml:space="preserve">
          <source>The constructor arguments passed to &lt;code&gt;SpringApplication&lt;/code&gt; are configuration sources for Spring beans. In most cases, these are references to &lt;code&gt;@Configuration&lt;/code&gt; classes, but they could also be references to XML configuration or to packages that should be scanned.</source>
          <target state="translated">&lt;code&gt;SpringApplication&lt;/code&gt; 에 전달 된 생성자 인수는 Spring Bean의 구성 소스입니다. 대부분의 경우 &lt;code&gt;@Configuration&lt;/code&gt; 클래스에 대한 참조 이지만 XML 구성 또는 스캔해야하는 패키지에 대한 참조 일 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="09789446f3a97ced032781105baa15b6e8d10ffb" translate="yes" xml:space="preserve">
          <source>The contents of the &lt;code&gt;username&lt;/code&gt; file would be a config value, and the contents of &lt;code&gt;password&lt;/code&gt; would be a secret.</source>
          <target state="translated">&lt;code&gt;username&lt;/code&gt; 파일 의 내용은 구성 값이고 &lt;code&gt;password&lt;/code&gt; 의 내용은 비밀입니다.</target>
        </trans-unit>
        <trans-unit id="951e8d5bd72bbe09daa273d40c4dc822ed539bb8" translate="yes" xml:space="preserve">
          <source>The context&amp;rsquo;s &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt; can be customized by one or more &lt;code&gt;Jackson2ObjectMapperBuilderCustomizer&lt;/code&gt; beans. Such customizer beans can be ordered (Boot&amp;rsquo;s own customizer has an order of 0), letting additional customization be applied both before and after Boot&amp;rsquo;s customization.</source>
          <target state="translated">컨텍스트의 &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt; 는 하나 이상의 &lt;code&gt;Jackson2ObjectMapperBuilderCustomizer&lt;/code&gt; Bean 으로 사용자 정의 할 수 있습니다 . 이러한 커 스터 마이저 bean은 주문할 수 있으며 (Boot의 자체 커 스터 마이 저는 0의 순서를 가짐) Boot의 커스터마이징 전후에 추가 커스터마이징을 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7bc897cc4c1cd158beb193bd86fc7ad32876efd0" translate="yes" xml:space="preserve">
          <source>The conversion word used when logging exceptions.</source>
          <target state="translated">예외를 로깅 할 때 사용되는 변환 단어입니다.</target>
        </trans-unit>
        <trans-unit id="2a7c2cf194bc3fe555215241664b11d6381088c9" translate="yes" xml:space="preserve">
          <source>The core class used to support loading nested jars is &lt;code&gt;org.springframework.boot.loader.jar.JarFile&lt;/code&gt;. It lets you load jar content from a standard jar file or from nested child jar data. When first loaded, the location of each &lt;code&gt;JarEntry&lt;/code&gt; is mapped to a physical file offset of the outer jar, as shown in the following example:</source>
          <target state="translated">중첩 된 jar로드를 지원하는 데 사용되는 핵심 클래스는 &lt;code&gt;org.springframework.boot.loader.jar.JarFile&lt;/code&gt; 입니다. 표준 jar 파일 또는 중첩 된 하위 jar 데이터에서 jar 콘텐츠를로드 할 수 있습니다. 처음로드 될 때 각 &lt;code&gt;JarEntry&lt;/code&gt; 의 위치 는 다음 예와 같이 외부 jar의 실제 파일 오프셋에 맵핑됩니다.</target>
        </trans-unit>
        <trans-unit id="2bc8ef1dd6d82ea9bb31ca380a54766442390ec8" translate="yes" xml:space="preserve">
          <source>The curated list contains all the Spring modules that you can use with Spring Boot as well as a refined list of third party libraries. The list is available as a standard Bills of Materials (&lt;code&gt;spring-boot-dependencies&lt;/code&gt;) that can be used with both &lt;a href=&quot;#using-boot-maven&quot;&gt;Maven&lt;/a&gt; and &lt;a href=&quot;#using-boot-gradle&quot;&gt;Gradle&lt;/a&gt;.</source>
          <target state="translated">선별 된 목록에는 Spring Boot와 함께 사용할 수있는 모든 Spring 모듈과 타사 라이브러리의 정제 된 목록이 포함되어 있습니다. 이 목록은 &lt;a href=&quot;#using-boot-maven&quot;&gt;Maven&lt;/a&gt; 및 &lt;a href=&quot;#using-boot-gradle&quot;&gt;Gradle&lt;/a&gt; 모두에서 사용할 수 있는 표준 BOM ( &lt;code&gt;spring-boot-dependencies&lt;/code&gt; )으로 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="5f8722c305d47eba2a04c08a1cf537d8c34f4a4c" translate="yes" xml:space="preserve">
          <source>The current directory</source>
          <target state="translated">현재 디렉토리</target>
        </trans-unit>
        <trans-unit id="b85d795740c7ce43f348f94151af960132671ff6" translate="yes" xml:space="preserve">
          <source>The current process ID (discovered if possible and when not already defined as an OS environment variable).</source>
          <target state="translated">현재 프로세스 ID (가능한 경우 발견되고 OS 환경 변수로 아직 정의되지 않은 경우).</target>
        </trans-unit>
        <trans-unit id="9fd8b82507de5b0ae2cd25cbbba4f9db105b98b4" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;UserDetailsService&lt;/code&gt; has a single user. The user name is &lt;code&gt;user&lt;/code&gt;, and the password is random and is printed at INFO level when the application starts, as shown in the following example:</source>
          <target state="translated">기본 &lt;code&gt;UserDetailsService&lt;/code&gt; 에는 단일 사용자가 있습니다. 사용자 이름은 &lt;code&gt;user&lt;/code&gt; 이고 암호는 무작위이며 다음 예와 같이 응용 프로그램이 시작될 때 INFO 수준에서 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="899181f01f20273c96b6795f6fa0f3f8a845f790" translate="yes" xml:space="preserve">
          <source>The default embedded startup script written by the Maven or Gradle plugin can be customized in a number of ways. For most people, using the default script along with a few customizations is usually enough. If you find you cannot customize something that you need to, use the &lt;code&gt;embeddedLaunchScript&lt;/code&gt; option to write your own file entirely.</source>
          <target state="translated">Maven 또는 Gradle 플러그인으로 작성된 기본 포함 된 시작 스크립트는 다양한 방법으로 사용자 정의 할 수 있습니다. 대부분의 사람들은 몇 가지 사용자 지정과 함께 기본 스크립트를 사용하는 것으로 충분합니다. 필요한 것을 사용자 정의 할 수없는 경우 &lt;code&gt;embeddedLaunchScript&lt;/code&gt; 옵션을 사용 하여 자신의 파일을 완전히 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="8e0619164c8407f1c5ce6efa042c96430f88c82c" translate="yes" xml:space="preserve">
          <source>The default excludes are as follows:</source>
          <target state="translated">기본 제외는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="98c01e8b1bda124583ccc058e68cf54ce2f25119" translate="yes" xml:space="preserve">
          <source>The default location for logs is a &lt;code&gt;logs&lt;/code&gt; directory relative to the Tomcat base directory. By default, the &lt;code&gt;logs&lt;/code&gt; directory is a temporary directory, so you may want to fix Tomcat&amp;rsquo;s base directory or use an absolute path for the logs. In the preceding example, the logs are available in &lt;code&gt;my-tomcat/logs&lt;/code&gt; relative to the working directory of the application.</source>
          <target state="translated">로그의 기본 위치 는 Tomcat 기본 디렉토리에 상대적인 &lt;code&gt;logs&lt;/code&gt; 디렉토리입니다. 기본적으로 &lt;code&gt;logs&lt;/code&gt; 디렉토리는 임시 디렉토리이므로 Tomcat의 기본 디렉토리를 수정하거나 로그의 절대 경로를 사용할 수 있습니다. 앞의 예에서 로그는 애플리케이션의 작업 디렉토리에 상대적인 &lt;code&gt;my-tomcat/logs&lt;/code&gt; 에서 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="05bf6a92451ac7f072fd3c63a0862668a30277a6" translate="yes" xml:space="preserve">
          <source>The default log configuration echoes messages to the console as they are written. By default, &lt;code&gt;ERROR&lt;/code&gt;-level, &lt;code&gt;WARN&lt;/code&gt;-level, and &lt;code&gt;INFO&lt;/code&gt;-level messages are logged. You can also enable a &amp;ldquo;debug&amp;rdquo; mode by starting your application with a &lt;code&gt;--debug&lt;/code&gt; flag.</source>
          <target state="translated">기본 로그 구성은 작성 될 때 콘솔에 메시지를 에코합니다. 기본적으로 &lt;code&gt;ERROR&lt;/code&gt; 수준, &lt;code&gt;WARN&lt;/code&gt; 수준 및 &lt;code&gt;INFO&lt;/code&gt; 수준 메시지가 기록됩니다. &lt;code&gt;--debug&lt;/code&gt; 플래그로 애플리케이션을 시작하여 &quot;디버그&quot;모드를 활성화 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7eea78e97b944920793d8339904497e4fe964a53" translate="yes" xml:space="preserve">
          <source>The default log output from Spring Boot resembles the following example:</source>
          <target state="translated">Spring Boot의 기본 로그 출력은 다음 예제와 유사합니다.</target>
        </trans-unit>
        <trans-unit id="e7321b692ecca3e36077a860c5d4f0f144bb0992" translate="yes" xml:space="preserve">
          <source>The default metadata is tied to the version of the CLI that you use. It changes only when you move to a new version of the CLI, putting you in control of when the versions of your dependencies may change. A table showing the dependencies and their versions that are included in the default metadata can be found in the &lt;a href=&quot;appendix-dependency-versions#dependency-versions&quot;&gt;appendix&lt;/a&gt;.</source>
          <target state="translated">기본 메타 데이터는 사용하는 CLI 버전에 연결됩니다. 새 버전의 CLI로 이동할 때만 변경되므로 종속성 버전이 변경 될 수있는시기를 제어 할 수 있습니다. 기본 메타 데이터에 포함 된 종속성과 해당 버전을 보여주는 표는 &lt;a href=&quot;appendix-dependency-versions#dependency-versions&quot;&gt;부록&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7226a44b5bd8cb7064a98fb24cf411273c4e6e1a" translate="yes" xml:space="preserve">
          <source>The default response status for an endpoint operation depends on the operation type (read, write, or delete) and what, if anything, the operation returns.</source>
          <target state="translated">엔드 포인트 작업에 대한 기본 응답 상태는 작업 유형 (읽기, 쓰기 또는 삭제)과 작업이 반환하는 항목 (있는 경우)에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="05d9824ec45cabc47c4fcbe24753427a6f1d1f57" translate="yes" xml:space="preserve">
          <source>The default script supports most Linux distributions and is tested on CentOS and Ubuntu. Other platforms, such as OS X and FreeBSD, require the use of a custom &lt;code&gt;embeddedLaunchScript&lt;/code&gt;.</source>
          <target state="translated">기본 스크립트는 대부분의 Linux 배포를 지원하며 CentOS 및 Ubuntu에서 테스트됩니다. OS X 및 FreeBSD와 같은 다른 플랫폼에서는 사용자 정의 &lt;code&gt;embeddedLaunchScript&lt;/code&gt; 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="163deb6f3734d9e7e064c6958b4776c17acc0f83" translate="yes" xml:space="preserve">
          <source>The default security configuration is implemented in &lt;code&gt;SecurityAutoConfiguration&lt;/code&gt; and &lt;code&gt;UserDetailsServiceAutoConfiguration&lt;/code&gt;. &lt;code&gt;SecurityAutoConfiguration&lt;/code&gt; imports &lt;code&gt;SpringBootWebSecurityConfiguration&lt;/code&gt; for web security and &lt;code&gt;UserDetailsServiceAutoConfiguration&lt;/code&gt; configures authentication, which is also relevant in non-web applications. To switch off the default web application security configuration completely or to combine multiple Spring Security components such as OAuth 2 Client and Resource Server, add a bean of type &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; (doing so does not disable the &lt;code&gt;UserDetailsService&lt;/code&gt; configuration or Actuator&amp;rsquo;s security).</source>
          <target state="translated">기본 보안 구성은 &lt;code&gt;SecurityAutoConfiguration&lt;/code&gt; 및 &lt;code&gt;UserDetailsServiceAutoConfiguration&lt;/code&gt; 에서 구현됩니다 . &lt;code&gt;SecurityAutoConfiguration&lt;/code&gt; 은 웹 보안을 위해 &lt;code&gt;SpringBootWebSecurityConfiguration&lt;/code&gt; 을 가져오고 &lt;code&gt;UserDetailsServiceAutoConfiguration&lt;/code&gt; 은 인증을 구성하며 이는 웹이 아닌 응용 프로그램에서도 관련이 있습니다. 기본 웹 애플리케이션 보안 구성을 완전히 끄거나 OAuth 2 클라이언트 및 리소스 서버와 같은 여러 Spring 보안 구성 요소를 결합하려면 &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; 유형의 빈을 추가합니다 (이렇게해도 &lt;code&gt;UserDetailsService&lt;/code&gt; 구성 또는 Actuator의 보안이 비활성화되지 않음 ).</target>
        </trans-unit>
        <trans-unit id="2e68589a14dc88a5da32a5fae40c9f49847e115b" translate="yes" xml:space="preserve">
          <source>The default unit is bytes and can be overridden using &lt;code&gt;@DataSizeUnit&lt;/code&gt; as illustrated in the sample above.</source>
          <target state="translated">기본 단위는 바이트이며 위 샘플에 설명 된대로 &lt;code&gt;@DataSizeUnit&lt;/code&gt; 을 사용하여 재정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="40dba3ecdddfeea1cd5a872f4e1d27902d1071f5" translate="yes" xml:space="preserve">
          <source>The default unit is milliseconds and can be overridden using &lt;code&gt;@DurationUnit&lt;/code&gt; as illustrated in the sample above.</source>
          <target state="translated">기본 단위는 밀리 초이며 위 샘플에 설명 된대로 &lt;code&gt;@DurationUnit&lt;/code&gt; 을 사용하여 재정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c1f80de8d78e9d1281457b09d42714355e4b2a17" translate="yes" xml:space="preserve">
          <source>The default value for &lt;code&gt;CONF_FOLDER&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;CONF_FOLDER&lt;/code&gt; 의 기본값</target>
        </trans-unit>
        <trans-unit id="ba6fbc4bd996ad1f4e71d86180aac1b1f5ad26db" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;never&lt;/code&gt;. A user is considered to be authorized when they are in one or more of the endpoint&amp;rsquo;s roles. If the endpoint has no configured roles (the default) all authenticated users are considered to be authorized. The roles can be configured using the &lt;code&gt;management.endpoint.health.roles&lt;/code&gt; property.</source>
          <target state="translated">기본값은 &lt;code&gt;never&lt;/code&gt; 입니다. 사용자는 하나 이상의 엔드 포인트 역할에있을 때 권한이있는 것으로 간주됩니다. 끝점에 구성된 역할 (기본값)이 없으면 인증 된 모든 사용자가 권한이있는 것으로 간주됩니다. &lt;code&gt;management.endpoint.health.roles&lt;/code&gt; 속성을 사용하여 역할을 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="34070943b8eba0e4476de230c001603abf3b9eb1" translate="yes" xml:space="preserve">
          <source>The default value, which is used if the property is not specified. If the type of the property is an array, it can be an array of value(s). If the default value is unknown, it may be omitted.</source>
          <target state="translated">속성이 지정되지 않은 경우 사용되는 기본값입니다. 속성의 유형이 배열이면 값의 배열이 될 수 있습니다. 기본값을 알 수없는 경우 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f68f3c2c3995cb82ae7139e3ea8408c8262dd0f7" translate="yes" xml:space="preserve">
          <source>The destination jar file to create</source>
          <target state="translated">만들 대상 jar 파일</target>
        </trans-unit>
        <trans-unit id="3b169cb65262cbf45b81163a0a5fe8f11d197485" translate="yes" xml:space="preserve">
          <source>The dialect to use is detected by the JPA provider. If you prefer to set the dialect yourself, set the &lt;code&gt;spring.jpa.database-platform&lt;/code&gt; property.</source>
          <target state="translated">사용할 언어는 JPA 공급자가 감지합니다. 방언을 직접 설정하려면 &lt;code&gt;spring.jpa.database-platform&lt;/code&gt; 속성을 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="cbdf316deb8798fa4287c5ed0ed8dc18fc0a5221" translate="yes" xml:space="preserve">
          <source>The documents are merged in the order in which they are encountered. Later values override earlier values.</source>
          <target state="translated">문서는 만나는 순서대로 병합됩니다. 이후 값은 이전 값보다 우선합니다.</target>
        </trans-unit>
        <trans-unit id="f081597c7afa87da14cccb5eb71b919fd7fa73d5" translate="yes" xml:space="preserve">
          <source>The easiest way to add user accounts is to provide your own &lt;code&gt;UserDetailsService&lt;/code&gt; bean.</source>
          <target state="translated">사용자 계정을 추가하는 가장 쉬운 방법은 고유 한 &lt;code&gt;UserDetailsService&lt;/code&gt; Bean 을 제공하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="0f690be2abfdfa025389530ec41caac886f5ebb5" translate="yes" xml:space="preserve">
          <source>The easiest way to start with Spring Boot and Kotlin is to follow &lt;a href=&quot;https://spring.io/guides/tutorials/spring-boot-kotlin/&quot;&gt;this comprehensive tutorial&lt;/a&gt;. You can create new Kotlin projects via &lt;a href=&quot;https://start.spring.io/#!language=kotlin&quot;&gt;start.spring.io&lt;/a&gt;. Feel free to join the #spring channel of &lt;a href=&quot;https://slack.kotlinlang.org/&quot;&gt;Kotlin Slack&lt;/a&gt; or ask a question with the &lt;code&gt;spring&lt;/code&gt; and &lt;code&gt;kotlin&lt;/code&gt; tags on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring+kotlin&quot;&gt;Stack Overflow&lt;/a&gt; if you need support.</source>
          <target state="translated">Spring Boot 및 Kotlin을 시작하는 가장 쉬운 방법은 &lt;a href=&quot;https://spring.io/guides/tutorials/spring-boot-kotlin/&quot;&gt;이 포괄적 인 자습서&lt;/a&gt; 를 따르는 것 입니다. &lt;a href=&quot;https://start.spring.io/#!language=kotlin&quot;&gt;start.spring.io&lt;/a&gt; 를 통해 새 Kotlin 프로젝트를 만들 수 있습니다 . &lt;a href=&quot;https://slack.kotlinlang.org/&quot;&gt;Kotlin Slack&lt;/a&gt; 의 #spring 채널에 가입 하거나 지원이 필요한 경우 &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring+kotlin&quot;&gt;Stack Overflow&lt;/a&gt; 의 &lt;code&gt;spring&lt;/code&gt; 및 &lt;code&gt;kotlin&lt;/code&gt; 태그 로 질문하세요 .</target>
        </trans-unit>
        <trans-unit id="a46d2cbdb68aa3bfd69ae1690cc9f9a086a714d5" translate="yes" xml:space="preserve">
          <source>The easiest way to take complete control over MVC configuration is to provide your own &lt;code&gt;@Configuration&lt;/code&gt; with the &lt;code&gt;@EnableWebMvc&lt;/code&gt; annotation. Doing so leaves all MVC configuration in your hands.</source>
          <target state="translated">MVC 구성을 완벽하게 제어하는 ​​가장 쉬운 방법 은 &lt;code&gt;@EnableWebMvc&lt;/code&gt; 주석 을 사용하여 고유 한 &lt;code&gt;@Configuration&lt;/code&gt; 을 제공하는 것 입니다. 이렇게하면 모든 MVC 구성이 손에 남습니다.</target>
        </trans-unit>
        <trans-unit id="1db23147a0746397d07d12aebce2c2f720ec4c2d" translate="yes" xml:space="preserve">
          <source>The embedded shell supports ANSI color output as well as &lt;code&gt;tab&lt;/code&gt; completion. If you need to run a native command, you can use the &lt;code&gt;!&lt;/code&gt; prefix. To exit the embedded shell, press &lt;code&gt;ctrl-c&lt;/code&gt;.</source>
          <target state="translated">내장 된 쉘은 ANSI 색상 출력과 &lt;code&gt;tab&lt;/code&gt; 완성을 지원합니다. 기본 명령을 실행해야하는 경우 &lt;code&gt;!&lt;/code&gt; 접두사. 포함 된 셸을 종료하려면 &lt;code&gt;ctrl-c&lt;/code&gt; 를 누릅니다 .</target>
        </trans-unit>
        <trans-unit id="68fdbf372f15bde8df8cbaf2536a32b5dd0d0fcc" translate="yes" xml:space="preserve">
          <source>The endpoint is not available by default and must be exposed, see &lt;a href=&quot;#production-ready-endpoints-exposing-endpoints&quot;&gt;exposing endpoints&lt;/a&gt; for more details.</source>
          <target state="translated">엔드 포인트는 기본적으로 사용할 수 없으며 노출되어야합니다 . 자세한 내용 은 &lt;a href=&quot;#production-ready-endpoints-exposing-endpoints&quot;&gt;엔드 포인트 노출&lt;/a&gt; 을 참조하세요.</target>
        </trans-unit>
        <trans-unit id="c388d1ea7cf8596e4d30acdaa9c091824a09c656" translate="yes" xml:space="preserve">
          <source>The error page filter can only forward the request to the correct error page if the response has not already been committed. By default, WebSphere Application Server 8.0 and later commits the response upon successful completion of a servlet&amp;rsquo;s service method. You should disable this behavior by setting &lt;code&gt;com.ibm.ws.webcontainer.invokeFlushAfterService&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">오류 페이지 필터는 응답이 아직 커밋되지 않은 경우에만 요청을 올바른 오류 페이지로 전달할 수 있습니다. 기본적으로 WebSphere Application Server 8.0 이상은 서블릿의 서비스 메소드가 성공적으로 완료되면 응답을 커미트합니다. &lt;code&gt;com.ibm.ws.webcontainer.invokeFlushAfterService&lt;/code&gt; 를 &lt;code&gt;false&lt;/code&gt; 로 설정하여이 동작을 사용 안함으로 설정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="cfd56b5bff1e5c6b7466c1ad20b8012769c3e4cd" translate="yes" xml:space="preserve">
          <source>The event type that should be published. This property will be ignored if 'meter-name-event-type-enabled' is set to 'true'.</source>
          <target state="translated">게시해야하는 이벤트 유형입니다. 이 속성은 'meter-name-event-type-enabled'가 'true'로 설정된 경우 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="3b43ed47f5974bca3ee5b5c3e7a5fe681e5586bd" translate="yes" xml:space="preserve">
          <source>The exact details of the proxy configuration depend on the underlying client request factory that is being used. The following example configures &lt;code&gt;HttpComponentsClientRequestFactory&lt;/code&gt; with an &lt;code&gt;HttpClient&lt;/code&gt; that uses a proxy for all hosts except &lt;code&gt;192.168.0.5&lt;/code&gt;:</source>
          <target state="translated">프록시 구성의 정확한 세부 사항은 사용중인 기본 클라이언트 요청 팩토리에 따라 다릅니다. 다음 예제 는 &lt;code&gt;192.168.0.5&lt;/code&gt; 를 제외한 모든 호스트에 프록시를 사용 하는 &lt;code&gt;HttpClient&lt;/code&gt; 로 &lt;code&gt;HttpComponentsClientRequestFactory&lt;/code&gt; 를 구성 합니다 .</target>
        </trans-unit>
        <trans-unit id="4d17d9707c769004865ef5086c7ec1fc2b271907" translate="yes" xml:space="preserve">
          <source>The example above adds &lt;code&gt;region&lt;/code&gt; and &lt;code&gt;stack&lt;/code&gt; tags to all meters with a value of &lt;code&gt;us-east-1&lt;/code&gt; and &lt;code&gt;prod&lt;/code&gt; respectively.</source>
          <target state="translated">위의 예는 각각 &lt;code&gt;us-east-1&lt;/code&gt; 및 &lt;code&gt;prod&lt;/code&gt; 값을 사용하여 모든 미터에 &lt;code&gt;region&lt;/code&gt; 및 &lt;code&gt;stack&lt;/code&gt; 태그를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="8b0e3c92b3d0423e6ea5e41553bcf7780ee29761" translate="yes" xml:space="preserve">
          <source>The example below is for Tomcat with the &lt;code&gt;spring-boot-starter-web&lt;/code&gt; (Servlet stack):</source>
          <target state="translated">아래 예제는 &lt;code&gt;spring-boot-starter-web&lt;/code&gt; (서블릿 스택) 이있는 Tomcat에 대한 것입니다 .</target>
        </trans-unit>
        <trans-unit id="90c3c5d338b4ec0f67ce510497e8619a5a3e2e5d" translate="yes" xml:space="preserve">
          <source>The example in the previous section can be rewritten in an immutable fashion as shown in the following example:</source>
          <target state="translated">이전 섹션의 예제는 다음 예제와 같이 변경 불가능한 방식으로 다시 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7701b62bca7e5b22985d231f728a1f64ce0741c1" translate="yes" xml:space="preserve">
          <source>The explicit location of the jar file, in case the script is being used to launch a jar that it is not actually embedded.</source>
          <target state="translated">실제로 포함되지 않은 jar를 시작하는 데 스크립트가 사용되는 경우 jar 파일의 명시 적 위치입니다.</target>
        </trans-unit>
        <trans-unit id="f64eb5d387adb2015990f009c01ffa05c3d3497a" translate="yes" xml:space="preserve">
          <source>The extended support lets Cloud Foundry management UIs (such as the web application that you can use to view deployed applications) be augmented with Spring Boot actuator information. For example, an application status page may include full health information instead of the typical &amp;ldquo;running&amp;rdquo; or &amp;ldquo;stopped&amp;rdquo; status.</source>
          <target state="translated">확장 된 지원을 통해 Cloud Foundry 관리 UI (예 : 배치 된 애플리케이션을 보는 데 사용할 수있는 웹 애플리케이션)는 Spring Boot 액추에이터 정보로 보강됩니다. 예를 들어 응용 프로그램 상태 페이지에는 일반적인 &quot;실행 중&quot;또는 &quot;중지됨&quot;상태 대신 전체 상태 정보가 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eb980ec8784c636e389d2183d79f64ac5d3e4733" translate="yes" xml:space="preserve">
          <source>The extensions cannot be used with Logback&amp;rsquo;s &lt;a href=&quot;https://logback.qos.ch/manual/configuration.html#autoScan&quot;&gt;configuration scanning&lt;/a&gt;. If you attempt to do so, making changes to the configuration file results in an error similar to one of the following being logged:</source>
          <target state="translated">확장은 Logback의 &lt;a href=&quot;https://logback.qos.ch/manual/configuration.html#autoScan&quot;&gt;구성 검사&lt;/a&gt; 와 함께 사용할 수 없습니다 . 그렇게하려고하면 구성 파일을 변경하면 다음 중 하나가 기록되는 것과 유사한 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="1039c7ceae4c5f79449d94bd44388d9c3af02a9e" translate="yes" xml:space="preserve">
          <source>The filename pattern used to create log archives.</source>
          <target state="translated">로그 아카이브를 만드는 데 사용되는 파일 이름 패턴입니다.</target>
        </trans-unit>
        <trans-unit id="2ecbbffa017e6965dffef0c5ed3db3d7831619ed" translate="yes" xml:space="preserve">
          <source>The final part of our application is the &lt;code&gt;main&lt;/code&gt; method. This is a standard method that follows the Java convention for an application entry point. Our main method delegates to Spring Boot&amp;rsquo;s &lt;code&gt;SpringApplication&lt;/code&gt; class by calling &lt;code&gt;run&lt;/code&gt;. &lt;code&gt;SpringApplication&lt;/code&gt; bootstraps our application, starting Spring, which, in turn, starts the auto-configured Tomcat web server. We need to pass &lt;code&gt;Example.class&lt;/code&gt; as an argument to the &lt;code&gt;run&lt;/code&gt; method to tell &lt;code&gt;SpringApplication&lt;/code&gt; which is the primary Spring component. The &lt;code&gt;args&lt;/code&gt; array is also passed through to expose any command-line arguments.</source>
          <target state="translated">응용 프로그램의 마지막 부분은 &lt;code&gt;main&lt;/code&gt; 방법입니다. 이것은 애플리케이션 진입 점에 대한 Java 규칙을 따르는 표준 방법입니다. 우리의 주요 메소드 는 &lt;code&gt;run&lt;/code&gt; 을 호출 하여 Spring Boot의 &lt;code&gt;SpringApplication&lt;/code&gt; 클래스에 위임 합니다 . &lt;code&gt;SpringApplication&lt;/code&gt; 은 자동 구성 Tomcat 웹 서버를 시작하는 Spring을 시작하여 애플리케이션을 부트 스트랩합니다. 우리는 전달해야 &lt;code&gt;Example.class&lt;/code&gt; 을 받는 인수로 &lt;code&gt;run&lt;/code&gt; 말하는 방법 &lt;code&gt;SpringApplication&lt;/code&gt; 차 봄 구성 요소입니다. &lt;code&gt;args&lt;/code&gt; 배열은 또한 명령 줄 인수를 노출을 통해 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="230535aa1666deadb658fc7f45c07d7caa865f73" translate="yes" xml:space="preserve">
          <source>The final step in the process is to ensure that the embedded servlet container does not interfere with the servlet container to which the war file is deployed. To do so, you need to mark the embedded servlet container dependency as being provided.</source>
          <target state="translated">프로세스의 마지막 단계는 임베디드 서블릿 컨테이너가 war 파일이 배포 된 서블릿 컨테이너를 방해하지 않는지 확인하는 것입니다. 이렇게하려면 포함 된 서블릿 컨테이너 종속성을 제공되는 것으로 표시해야합니다.</target>
        </trans-unit>
        <trans-unit id="11be08300179fabb3fdb645e003721311439df40" translate="yes" xml:space="preserve">
          <source>The first annotation on our &lt;code&gt;Example&lt;/code&gt; class is &lt;code&gt;@RestController&lt;/code&gt;. This is known as a &lt;em&gt;stereotype&lt;/em&gt; annotation. It provides hints for people reading the code and for Spring that the class plays a specific role. In this case, our class is a web &lt;code&gt;@Controller&lt;/code&gt;, so Spring considers it when handling incoming web requests.</source>
          <target state="translated">&lt;code&gt;Example&lt;/code&gt; 클래스 의 첫 번째 주석은 &lt;code&gt;@RestController&lt;/code&gt; 입니다. 이를 &lt;em&gt;스테레오 타입&lt;/em&gt; 어노테이션이라고합니다. 코드를 읽는 사람들과 Spring에 대해 클래스가 특정 역할을한다는 힌트를 제공합니다. 이 경우 우리 클래스는 웹 &lt;code&gt;@Controller&lt;/code&gt; 이므로 Spring은 들어오는 웹 요청을 처리 할 때이를 고려합니다.</target>
        </trans-unit>
        <trans-unit id="823e7264bf1c7685d87a0c941c315a628ffecd91" translate="yes" xml:space="preserve">
          <source>The first available implementation, &lt;code&gt;FlightRecorderApplicationStartup&lt;/code&gt; is provided by Spring Framework. It adds Spring-specific startup events to a Java Flight Recorder session and is meant for profiling applications and correlating their Spring context lifecycle with JVM events (such as allocations, GCs, class loading&amp;hellip;​). Once configured, you can record data by running the application with the Flight Recorder enabled:</source>
          <target state="translated">사용 가능한 첫 번째 구현 인 &lt;code&gt;FlightRecorderApplicationStartup&lt;/code&gt; 은 Spring Framework에서 제공합니다. Java Flight Recorder 세션에 Spring 관련 시작 이벤트를 추가하고 애플리케이션을 프로파일 링하고 해당 Spring 컨텍스트 라이프 사이클을 JVM 이벤트 (예 : 할당, GC, 클래스 로딩&amp;hellip;)와 연관시키는 데 사용됩니다. 일단 구성되면 Flight Recorder가 활성화 된 상태에서 애플리케이션을 실행하여 데이터를 기록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="27fb07d55e78c2436fe349718ec1890bb691f1e9" translate="yes" xml:space="preserve">
          <source>The first few of these properties apply to all components (producers, consumers, admins, and streams) but can be specified at the component level if you wish to use different values. Apache Kafka designates properties with an importance of HIGH, MEDIUM, or LOW. Spring Boot auto-configuration supports all HIGH importance properties, some selected MEDIUM and LOW properties, and any properties that do not have a default value.</source>
          <target state="translated">이러한 속성 중 처음 몇 개는 모든 구성 요소 (생산자, 소비자, 관리자 및 스트림)에 적용되지만 다른 값을 사용하려는 경우 구성 요소 수준에서 지정할 수 있습니다. Apache Kafka는 중요도가 HIGH, MEDIUM 또는 LOW 인 속성을 지정합니다. Spring Boot 자동 구성은 모든 HIGH 중요도 속성, 일부 선택된 MEDIUM 및 LOW 속성, 기본값이없는 모든 속성을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="4644ac774d7efcad6db0e415d0079cdebb647fd5" translate="yes" xml:space="preserve">
          <source>The first run of your application is slow, as dependencies are downloaded. Subsequent runs are much quicker.</source>
          <target state="translated">종속성이 다운로드되므로 애플리케이션의 첫 번째 실행 속도가 느립니다. 후속 실행은 훨씬 더 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="865eb658ce76b9cb16f02c96388114b96ec5a735" translate="yes" xml:space="preserve">
          <source>The first step in producing a deployable war file is to provide a &lt;code&gt;SpringBootServletInitializer&lt;/code&gt; subclass and override its &lt;code&gt;configure&lt;/code&gt; method. Doing so makes use of Spring Framework&amp;rsquo;s Servlet 3.0 support and lets you configure your application when it is launched by the servlet container. Typically, you should update your application&amp;rsquo;s main class to extend &lt;code&gt;SpringBootServletInitializer&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">배포 가능한 war 파일을 생성하는 첫 번째 단계는 &lt;code&gt;SpringBootServletInitializer&lt;/code&gt; 하위 클래스 를 제공하고 해당 &lt;code&gt;configure&lt;/code&gt; 메서드를 재정의하는 것입니다. 그렇게하면 Spring Framework의 Servlet 3.0 지원을 사용하고 서블릿 컨테이너에 의해 시작될 때 애플리케이션을 구성 할 수 있습니다. 일반적으로 다음 예제와 같이 &lt;code&gt;SpringBootServletInitializer&lt;/code&gt; 를 확장하도록 애플리케이션의 기본 클래스를 업데이트해야합니다 .</target>
        </trans-unit>
        <trans-unit id="1862fcd879e30e19aebc466f83460217b30638ed" translate="yes" xml:space="preserve">
          <source>The first step to customizing this feature often involves using the existing mechanism but replacing or augmenting the error contents. For that, you can add a bean of type &lt;code&gt;ErrorAttributes&lt;/code&gt;.</source>
          <target state="translated">이 기능을 사용자 정의하는 첫 번째 단계는 종종 기존 메커니즘을 사용하지만 오류 내용을 대체하거나 보강하는 것입니다. 이를 위해 &lt;code&gt;ErrorAttributes&lt;/code&gt; 유형의 빈을 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2f46f24111ce42fef3e88bb9f8e4ebb1f0aa47ee" translate="yes" xml:space="preserve">
          <source>The fluent API offered by jOOQ is initiated through the &lt;code&gt;org.jooq.DSLContext&lt;/code&gt; interface. Spring Boot auto-configures a &lt;code&gt;DSLContext&lt;/code&gt; as a Spring Bean and connects it to your application &lt;code&gt;DataSource&lt;/code&gt;. To use the &lt;code&gt;DSLContext&lt;/code&gt;, you can &lt;code&gt;@Autowire&lt;/code&gt; it, as shown in the following example:</source>
          <target state="translated">jOOQ에서 제공하는 유창한 API는 &lt;code&gt;org.jooq.DSLContext&lt;/code&gt; 인터페이스를 통해 시작됩니다 . Spring Boot는 &lt;code&gt;DSLContext&lt;/code&gt; 를 Spring Bean으로 자동 구성하고 이를 애플리케이션 &lt;code&gt;DataSource&lt;/code&gt; 에 연결합니다 . &lt;code&gt;DSLContext&lt;/code&gt; 를 사용하려면 다음 예제와 같이 &lt;code&gt;@Autowire&lt;/code&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ace1bf9bf4f3b7c633acaddbdfaa9938702f8107" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;HealthIndicators&lt;/code&gt; are auto-configured by Spring Boot when appropriate. You can also enable/disable selected indicators by configuring &lt;code&gt;management.health.key.enabled&lt;/code&gt;, with the &lt;code&gt;key&lt;/code&gt; listed in the table below.</source>
          <target state="translated">다음 &lt;code&gt;HealthIndicators&lt;/code&gt; 는 적절한 경우 Spring Boot에 의해 자동 구성됩니다. 아래 표에 나열된 &lt;code&gt;key&lt;/code&gt; 사용하여 &lt;code&gt;management.health.key.enabled&lt;/code&gt; 를 구성하여 선택한 표시기를 활성화 / 비활성화 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="8bbeaa216479a37b8a7834f4d15bc5d5d8ca3a2d" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;InfoContributor&lt;/code&gt; beans are auto-configured by Spring Boot, when appropriate:</source>
          <target state="translated">다음 &lt;code&gt;InfoContributor&lt;/code&gt; Bean은 적절한 경우 Spring Boot에 의해 자동 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="aa467c3ab2eb566acd82dc04e0e100d9dcc62474" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;ReactiveHealthIndicators&lt;/code&gt; are auto-configured by Spring Boot when appropriate:</source>
          <target state="translated">다음 &lt;code&gt;ReactiveHealthIndicators&lt;/code&gt; 는 적절한 경우 Spring Boot에 의해 자동 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="0aea46dbbda214dc8da18d2f9644da646709d7d9" translate="yes" xml:space="preserve">
          <source>The following Gradle example shows how to use Undertow in place of Reactor Netty for Spring WebFlux:</source>
          <target state="translated">다음 Gradle 예제는 Spring WebFlux 용 Reactor Netty 대신 Undertow를 사용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="0905cd2c5504da82b3a0d00fb36119626ec24937" translate="yes" xml:space="preserve">
          <source>The following Maven example shows how to exclude Tomcat and include Jetty for Spring MVC:</source>
          <target state="translated">다음 Maven 예제는 Tomcat을 제외하고 Spring MVC 용 Jetty를 포함하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="a6f29e0e4af7d5b0b01cfd3e54cfd1c7158b2872" translate="yes" xml:space="preserve">
          <source>The following activation properties are available:</source>
          <target state="translated">다음 활성화 속성을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e96b36b40b651a52d17a1dfa8d80da8fc074e46" translate="yes" xml:space="preserve">
          <source>The following application starters are provided by Spring Boot under the &lt;code&gt;org.springframework.boot&lt;/code&gt; group:</source>
          <target state="translated">다음 애플리케이션 스타터는 &lt;code&gt;org.springframework.boot&lt;/code&gt; 그룹의 Spring Boot에서 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="9ef2c7b4dd1ef56391f1c5752a4f8c2649f32501" translate="yes" xml:space="preserve">
          <source>The following auto-configuration classes are from the &lt;code&gt;spring-boot-actuator-autoconfigure&lt;/code&gt; module:</source>
          <target state="translated">다음 자동 구성 클래스는 &lt;code&gt;spring-boot-actuator-autoconfigure&lt;/code&gt; 모듈 에서 가져온 것입니다 .</target>
        </trans-unit>
        <trans-unit id="e98edc3160abdd64f98a67aa5e15b47bf3168711" translate="yes" xml:space="preserve">
          <source>The following auto-configuration classes are from the &lt;code&gt;spring-boot-autoconfigure&lt;/code&gt; module:</source>
          <target state="translated">다음 자동 구성 클래스는 &lt;code&gt;spring-boot-autoconfigure&lt;/code&gt; 모듈 에서 가져온 것입니다 .</target>
        </trans-unit>
        <trans-unit id="10c4f57389cff02a5fb158a1d915120330dc3596" translate="yes" xml:space="preserve">
          <source>The following cache libraries are supported:</source>
          <target state="translated">다음 캐시 라이브러리가 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="2c2e3a3b71b3578ce54bc120c47f3d4908b8ec62" translate="yes" xml:space="preserve">
          <source>The following class shows the &lt;code&gt;@DataMongoTest&lt;/code&gt; annotation in use:</source>
          <target state="translated">다음 클래스는 사용중인 &lt;code&gt;@DataMongoTest&lt;/code&gt; 주석을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="afc526c2441891f6d398e14679513b7d30701492" translate="yes" xml:space="preserve">
          <source>The following code listing shows how to inject a Cassandra bean:</source>
          <target state="translated">다음 코드 목록은 Cassandra Bean을 삽입하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="a060dd4466fafdc4bfc93de14e2f2aee224cf20c" translate="yes" xml:space="preserve">
          <source>The following code shows a typical &lt;code&gt;@RestController&lt;/code&gt; that serves JSON data:</source>
          <target state="translated">다음 코드는 JSON 데이터를 제공 하는 일반적인 &lt;code&gt;@RestController&lt;/code&gt; 를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="2f486d96195cfbac457bc8b16b68b907315ee1d5" translate="yes" xml:space="preserve">
          <source>The following code shows a typical example:</source>
          <target state="translated">다음 코드는 일반적인 예를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="685dd9f392cb57df52edb4796c78034a01b2c175" translate="yes" xml:space="preserve">
          <source>The following colors and styles are supported:</source>
          <target state="translated">다음 색상과 스타일이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="f98c8619c27cacb476aee0cdd94c5bbbd0eb96e8" translate="yes" xml:space="preserve">
          <source>The following component creates a listener endpoint on the &lt;code&gt;someQueue&lt;/code&gt; destination:</source>
          <target state="translated">다음 구성 요소는 &lt;code&gt;someQueue&lt;/code&gt; 대상 에 수신기 끝점을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="837917aa02e9dcb14764e056cf6a4a09fde3ab71" translate="yes" xml:space="preserve">
          <source>The following component creates a listener endpoint on the &lt;code&gt;someTopic&lt;/code&gt; topic:</source>
          <target state="translated">다음 구성 요소는 &lt;code&gt;someTopic&lt;/code&gt; 주제 에 리스너 엔드 포인트를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="6e0b4e2005c5910bfffa605dc19d9e2480054636" translate="yes" xml:space="preserve">
          <source>The following environment properties are supported with the default script:</source>
          <target state="translated">기본 스크립트에서는 다음 환경 속성이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="c669a0f12c72e43fd9c04273af3c22110c43b43d" translate="yes" xml:space="preserve">
          <source>The following example &lt;code&gt;application.properties&lt;/code&gt; does not allow remote management connections:</source>
          <target state="translated">다음 예제 &lt;code&gt;application.properties&lt;/code&gt; 는 원격 관리 연결을 허용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="936f7c2c4a69f9b1f8f5c69dc8ee01eb5b0d5c17" translate="yes" xml:space="preserve">
          <source>The following example contributes an &lt;code&gt;example&lt;/code&gt; entry with a single value:</source>
          <target state="translated">다음 예제 는 단일 값이 있는 &lt;code&gt;example&lt;/code&gt; 항목을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="564a179d6bef36f03f46beb3176723d1f7859129" translate="yes" xml:space="preserve">
          <source>The following example does the same with Gradle:</source>
          <target state="translated">다음 예제는 Gradle에서 동일합니다.</target>
        </trans-unit>
        <trans-unit id="93cec095a9c6a36021dd75b11cf8032d64a800ec" translate="yes" xml:space="preserve">
          <source>The following example exposes a read operation that returns a custom object:</source>
          <target state="translated">다음 예제에서는 사용자 지정 개체를 반환하는 읽기 작업을 노출합니다.</target>
        </trans-unit>
        <trans-unit id="154f9fdf68dd940220574c460cbe79fc78b51a9c" translate="yes" xml:space="preserve">
          <source>The following example offers &lt;code&gt;on&lt;/code&gt; and &lt;code&gt;off&lt;/code&gt; as auto-completion values for &lt;code&gt;system.state&lt;/code&gt;:</source>
          <target state="translated">다음 예제는 &lt;code&gt;system.state&lt;/code&gt; 에 대한 자동 완성 값으로 &lt;code&gt;on&lt;/code&gt; 및 &lt;code&gt;off&lt;/code&gt; 를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="e1d5e2bab324840c601237c5c930d099785fdb1a" translate="yes" xml:space="preserve">
          <source>The following example remaps &lt;code&gt;/actuator/health&lt;/code&gt; to &lt;code&gt;/healthcheck&lt;/code&gt;:</source>
          <target state="translated">다음 예제는 &lt;code&gt;/actuator/health&lt;/code&gt; 를 &lt;code&gt;/healthcheck&lt;/code&gt; 로 다시 매핑합니다 .</target>
        </trans-unit>
        <trans-unit id="acdd9ad4ca54bd11199d94b4042f921e162bd3fe" translate="yes" xml:space="preserve">
          <source>The following example replaces an existing &lt;code&gt;RemoteService&lt;/code&gt; bean with a mock implementation:</source>
          <target state="translated">다음 예제는 기존 &lt;code&gt;RemoteService&lt;/code&gt; 빈을 모의 구현으로 대체합니다 .</target>
        </trans-unit>
        <trans-unit id="c2406036b78f733ad2b470fab51d2fe3b492107a" translate="yes" xml:space="preserve">
          <source>The following example shows a &amp;ldquo;hello world&amp;rdquo; web application written in Groovy:</source>
          <target state="translated">다음 예제는 Groovy로 작성된 &quot;hello world&quot;웹 애플리케이션을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="21f6c4d6e2d97e016555403e3863ebbee03faf2c" translate="yes" xml:space="preserve">
          <source>The following example shows a &lt;code&gt;@Service&lt;/code&gt; Bean that uses constructor injection to obtain a required &lt;code&gt;RiskAssessor&lt;/code&gt; bean:</source>
          <target state="translated">다음 예제는 필수 &lt;code&gt;RiskAssessor&lt;/code&gt; Bean 을 확보하기 위해 생성자 주입을 사용 하는 &lt;code&gt;@Service&lt;/code&gt; Bean을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="3dd2fc1aadf373a1beb2ec0f3339addc8c047a3a" translate="yes" xml:space="preserve">
          <source>The following example shows a customizer that configures the use of a proxy for all hosts except &lt;code&gt;192.168.0.5&lt;/code&gt;:</source>
          <target state="translated">다음 예는 &lt;code&gt;192.168.0.5&lt;/code&gt; 를 제외한 모든 호스트에 대해 프록시 사용을 구성하는 사용자 정의 프로그램을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="fb0380adb98cb51b1ac67f746744b4827286d8a8" translate="yes" xml:space="preserve">
          <source>The following example shows a typical &lt;code&gt;MANIFEST.MF&lt;/code&gt; for an executable jar file:</source>
          <target state="translated">다음 예제는 실행 가능한 jar 파일에 대한 일반적인 &lt;code&gt;MANIFEST.MF&lt;/code&gt; 를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="525879e54c33ff52e086fc5e320e6f3424624281" translate="yes" xml:space="preserve">
          <source>The following example shows a typical Spring Data repository interface definition:</source>
          <target state="translated">다음 예제는 일반적인 SpringData 저장소 인터페이스 정의를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="ab056f14e38a318d3851cc47e3021f5fc52a36fa" translate="yes" xml:space="preserve">
          <source>The following example shows a typical repackage implementation:</source>
          <target state="translated">다음 예제는 일반적인 리 패키지 구현을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="c80d453e8630f488da9353d561419f86a70f8103" translate="yes" xml:space="preserve">
          <source>The following example shows a typical setup for using Cassandra tests in Spring Boot:</source>
          <target state="translated">다음 예제는 Spring Boot에서 Cassandra 테스트를 사용하기위한 일반적인 설정을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="8fd5b2c73c04d0a8ac46328a5dee1a134d62ba49" translate="yes" xml:space="preserve">
          <source>The following example shows a typical setup for using Neo4J tests in Spring Boot:</source>
          <target state="translated">다음 예제는 Spring Boot에서 Neo4J 테스트를 사용하기위한 일반적인 설정을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="0286c86dcc7dd280f742dbef16e2dcc1614fbb69" translate="yes" xml:space="preserve">
          <source>The following example shows how create a &lt;code&gt;HikariDataSource&lt;/code&gt; with &lt;code&gt;DataSourceBuilder&lt;/code&gt;:</source>
          <target state="translated">다음 예제는 &lt;code&gt;DataSourceBuilder&lt;/code&gt; 를 사용하여 &lt;code&gt;HikariDataSource&lt;/code&gt; 를 만드는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="4a3a02f0fba4417b85ae4bf3993791d92f04671c" translate="yes" xml:space="preserve">
          <source>The following example shows how to build an executable archive with Ant:</source>
          <target state="translated">다음 예제는 Ant로 실행 가능한 아카이브를 빌드하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="40507042ce4d2c819ea9c463f52c52b537af7c4b" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a data source by using a &lt;code&gt;DataSourceBuilder&lt;/code&gt;:</source>
          <target state="translated">다음 예제는 &lt;code&gt;DataSourceBuilder&lt;/code&gt; 를 사용하여 데이터 소스를 만드는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="f4c533ab04f6dedbd71c8bc400467f64b6dfd2d1" translate="yes" xml:space="preserve">
          <source>The following example shows how to define a JDBC data source by setting properties:</source>
          <target state="translated">다음 예제는 등록 정보를 설정하여 JDBC 데이터 소스를 정의하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="f562bdda445d01f703ce0c86f23873e9ea3bb259" translate="yes" xml:space="preserve">
          <source>The following example shows how to define a data source by setting properties:</source>
          <target state="translated">다음 예제는 속성을 설정하여 데이터 소스를 정의하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="2af72654eeed04e3ee1100abaf033b169c878b1e" translate="yes" xml:space="preserve">
          <source>The following example shows how to define a data source in a bean:</source>
          <target state="translated">다음 예제는 Bean에서 데이터 소스를 정의하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="422234d595b3a7734401c9ea2d4f27e17e387ea6" translate="yes" xml:space="preserve">
          <source>The following example shows how to do so in Gradle:</source>
          <target state="translated">다음 예제는 Gradle에서 수행하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="01e6105f0c47c15c859fc195d337937c3e47450c" translate="yes" xml:space="preserve">
          <source>The following example shows how to do so in Maven:</source>
          <target state="translated">다음 예제는 Maven에서 수행하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="7bb5ab137aad4360092b3add7fbb10643dfb3e4e" translate="yes" xml:space="preserve">
          <source>The following example shows how to inject &lt;code&gt;ConnectionFactory&lt;/code&gt; instances:</source>
          <target state="translated">다음 예제는 &lt;code&gt;ConnectionFactory&lt;/code&gt; 인스턴스 를 삽입하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="75143d5e0170d3295319ba9c507c6d89275b75a1" translate="yes" xml:space="preserve">
          <source>The following example shows how to specify two locations:</source>
          <target state="translated">다음 예는 두 위치를 지정하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="0c709541aa98c785f6ac4730b79533b3acab5a7f" translate="yes" xml:space="preserve">
          <source>The following example shows one way to write such an exporter:</source>
          <target state="translated">다음 예제는 이러한 내보내기를 작성하는 한 가지 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="55f3c799972ba94ffb965eff12e04f23feb53948" translate="yes" xml:space="preserve">
          <source>The following example shows potential logging settings in &lt;code&gt;application.properties&lt;/code&gt;:</source>
          <target state="translated">다음 예제는 &lt;code&gt;application.properties&lt;/code&gt; 의 잠재적 로깅 설정을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="ae361f77c1f2b15c44a6724a21c16f026dc49f5a" translate="yes" xml:space="preserve">
          <source>The following example shows the &lt;code&gt;@DataLdapTest&lt;/code&gt; annotation in use:</source>
          <target state="translated">다음 예제는 사용중인 &lt;code&gt;@DataLdapTest&lt;/code&gt; 주석을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="0d3e2ff2970aaae1f455fe9c1cf41d22b4a6d3c3" translate="yes" xml:space="preserve">
          <source>The following example shows the &lt;code&gt;@DataRedisTest&lt;/code&gt; annotation in use:</source>
          <target state="translated">다음 예제는 사용중인 &lt;code&gt;@DataRedisTest&lt;/code&gt; 주석을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="c98f1c03cb0bde88703184db69fe5b287032c565" translate="yes" xml:space="preserve">
          <source>The following example shows the &lt;code&gt;@WebServiceClientTest&lt;/code&gt; annotation in use:</source>
          <target state="translated">다음 예제는 사용중인 &lt;code&gt;@WebServiceClientTest&lt;/code&gt; 주석을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="9d27e800a553e3ef1beead572b91d9dea4ad9dd3" translate="yes" xml:space="preserve">
          <source>The following example shows the equivalent Gradle configuration:</source>
          <target state="translated">다음 예제는 동등한 Gradle 구성을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="67a72aefac2d4e9b48a104bcbfebc93b1ac9fea7" translate="yes" xml:space="preserve">
          <source>The following examples show how to set some PostgreSQL connection options:</source>
          <target state="translated">다음 예는 일부 PostgreSQL 연결 옵션을 설정하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="b16f7d91ab3412e621cc644ad3be030aa35d90d9" translate="yes" xml:space="preserve">
          <source>The following examples shows how to inject a &lt;code&gt;CouchbaseTemplate&lt;/code&gt; bean:</source>
          <target state="translated">다음 예제는 &lt;code&gt;CouchbaseTemplate&lt;/code&gt; Bean 을 삽입하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="bd61018462f83f319c5355a746f0a8dfba38ef4e" translate="yes" xml:space="preserve">
          <source>The following files are provided under &lt;code&gt;org/springframework/boot/logging/logback/&lt;/code&gt;:</source>
          <target state="translated">다음 파일은 &lt;code&gt;org/springframework/boot/logging/logback/&lt;/code&gt; 아래에 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="f7da2aa46ea4013c341b34f74a6678fbb7876dd9" translate="yes" xml:space="preserve">
          <source>The following is a set of guidelines on how to secure a Spring Boot application that runs as an init.d service. It is not intended to be an exhaustive list of everything that should be done to harden an application and the environment in which it runs.</source>
          <target state="translated">다음은 init.d 서비스로 실행되는 Spring Boot 애플리케이션을 보호하는 방법에 대한 일련의 지침입니다. 응용 프로그램과 응용 프로그램이 실행되는 환경을 강화하기 위해 수행해야하는 모든 항목의 전체 목록은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="85309edc1c80ac33ddc2ac73e0f5daadcb5eba85" translate="yes" xml:space="preserve">
          <source>The following items are output:</source>
          <target state="translated">다음 항목이 출력됩니다.</target>
        </trans-unit>
        <trans-unit id="1eefde03452b5cf0b622ffe4d75df6c8087b88ec" translate="yes" xml:space="preserve">
          <source>The following items are used as &amp;ldquo;grab hints&amp;rdquo;:</source>
          <target state="translated">다음 항목은 &quot;그랩 힌트&quot;로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9bd1576e7cea1bc000e160b5402a5a027b997827" translate="yes" xml:space="preserve">
          <source>The following listing shows a typical layout:</source>
          <target state="translated">다음 목록은 일반적인 레이아웃을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="d78003ded61c04706139bd746158e3963a915f98" translate="yes" xml:space="preserve">
          <source>The following metadata snippet corresponds to the standard &lt;code&gt;logging.level&lt;/code&gt; property. Keys are &lt;em&gt;logger names&lt;/em&gt;, and values correspond to the standard log levels or any custom level. As Spring Boot defines a few logger groups out-of-the-box, dedicated value hints have been added for those.</source>
          <target state="translated">다음 메타 데이터 스 니펫은 표준 &lt;code&gt;logging.level&lt;/code&gt; 속성에 해당 합니다. 키는 &lt;em&gt;로거 이름&lt;/em&gt; 이고 값은 표준 로그 수준 또는 사용자 지정 수준에 해당합니다. Spring Boot는 몇 가지 로거 그룹을 기본적으로 정의함에 따라 전용 값 힌트가 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="c4844d01443a919daa485160217a1f202efb8a2c" translate="yes" xml:space="preserve">
          <source>The following metadata snippet corresponds to the standard &lt;code&gt;server.servlet.jsp.class-name&lt;/code&gt; property that defines the &lt;code&gt;JspServlet&lt;/code&gt; class name to use:</source>
          <target state="translated">다음 메타 데이터 스 니펫은 사용할 &lt;code&gt;JspServlet&lt;/code&gt; 클래스 이름을 정의하는 표준 &lt;code&gt;server.servlet.jsp.class-name&lt;/code&gt; 특성에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="5bf04dbdd024e04e6e8627428da19009640fcaf2" translate="yes" xml:space="preserve">
          <source>The following metadata snippet corresponds to the standard &lt;code&gt;spring.jmx.server&lt;/code&gt; property that defines the name of the &lt;code&gt;MBeanServer&lt;/code&gt; bean to use:</source>
          <target state="translated">다음 메타 데이터 스 니펫은 사용할 &lt;code&gt;MBeanServer&lt;/code&gt; 빈 의 이름을 정의하는 표준 &lt;code&gt;spring.jmx.server&lt;/code&gt; 속성에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="e27692373ce783ca54c66f808e2fe2893bdc79c6" translate="yes" xml:space="preserve">
          <source>The following metadata snippet corresponds to the standard &lt;code&gt;spring.liquibase.change-log&lt;/code&gt; property that defines the path to the changelog to use. It is actually used internally as a &lt;code&gt;org.springframework.core.io.Resource&lt;/code&gt; but cannot be exposed as such, because we need to keep the original String value to pass it to the Liquibase API.</source>
          <target state="translated">다음 메타 데이터 스 니펫은 사용할 변경 로그의 경로를 정의하는 표준 &lt;code&gt;spring.liquibase.change-log&lt;/code&gt; 속성에 해당합니다. 실제로 내부적으로 &lt;code&gt;org.springframework.core.io.Resource&lt;/code&gt; 로 사용 되지만 Liquibase API에 전달하려면 원래 String 값을 유지해야하므로 노출 될 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="4a92e956e3f84174b8887244234e55400c78bfd3" translate="yes" xml:space="preserve">
          <source>The following metadata snippet corresponds to the standard &lt;code&gt;spring.profiles.active&lt;/code&gt; property that defines the name of the Spring profile(s) to enable:</source>
          <target state="translated">다음 메타 데이터 스 니펫은 활성화 할 Spring 프로필의 이름을 정의 하는 표준 &lt;code&gt;spring.profiles.active&lt;/code&gt; 속성에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="79c0b05c552284b6ed0787c5db35e2b093c1cd0b" translate="yes" xml:space="preserve">
          <source>The following nested elements can be used with the task:</source>
          <target state="translated">태스크와 함께 다음 중첩 요소를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9997a6cd79ed06ca5c3eaa5ff01dd7def793d84f" translate="yes" xml:space="preserve">
          <source>The following properties allow per-meter customization:</source>
          <target state="translated">다음 속성은 미터 별 사용자 지정을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="af90c2f2acc4a6d7a52a26def7e6ce7ff8ff922d" translate="yes" xml:space="preserve">
          <source>The following property substitutions are supported with the default script:</source>
          <target state="translated">기본 스크립트에서는 다음 속성 대체가 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="37dd2381d278239701d3a94c633107ef0a82c39a" translate="yes" xml:space="preserve">
          <source>The following rotation policy properties are supported:</source>
          <target state="translated">다음 회전 정책 속성이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="53677e19d1632cd85795f0e006e5f6a3456a1fd8" translate="yes" xml:space="preserve">
          <source>The following rules apply to working with &lt;code&gt;PropertiesLauncher&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;PropertiesLauncher&lt;/code&gt; 작업에는 다음 규칙이 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="23490bd26a21f81a8e91aa57b4789caf05cee730" translate="yes" xml:space="preserve">
          <source>The following sample component creates a listener endpoint on the &lt;code&gt;someQueue&lt;/code&gt; queue:</source>
          <target state="translated">다음 샘플 구성 요소는 &lt;code&gt;someQueue&lt;/code&gt; 대기열 에 리스너 엔드 포인트를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="972b18478abeae3dbc6bcd0db23ed2fa36559dd0" translate="yes" xml:space="preserve">
          <source>The following shows an example of a &lt;code&gt;layers.idx&lt;/code&gt; file:</source>
          <target state="translated">다음은 &lt;code&gt;layers.idx&lt;/code&gt; 파일 의 예를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="398708d43e84357eab5685ed6ad6c3a64216e573" translate="yes" xml:space="preserve">
          <source>The following table describes the mapping of log levels to colors:</source>
          <target state="translated">다음 표는 색상에 대한 로그 수준 매핑을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="896b19c5eaab33082fd2642c25db1115039c4481" translate="yes" xml:space="preserve">
          <source>The following table lists the various &lt;code&gt;@&amp;hellip;Test&lt;/code&gt; annotations that can be used to test slices of your application and the auto-configuration that they import by default:</source>
          <target state="translated">다음 표에는 애플리케이션의 슬라이스를 테스트하는 데 사용할 수있는 다양한 &lt;code&gt;@&amp;hellip;Test&lt;/code&gt; 주석과 이들이 기본적으로 가져 오는 자동 구성이 나열되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e99617fc1b69c34cba8d652f426697bf80cf158" translate="yes" xml:space="preserve">
          <source>The following table provides all properties that can be used to override the versions managed by Spring Boot. Browse the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-dependencies/build.gradle&quot;&gt;&lt;code&gt;spring-boot-dependencies&lt;/code&gt; build.gradle&lt;/a&gt; for a complete list of dependencies.</source>
          <target state="translated">다음 표는 Spring Boot에서 관리하는 버전을 재정의하는 데 사용할 수있는 모든 속성을 제공합니다. 전체 종속성 목록을 보려면 &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-dependencies/build.gradle&quot;&gt; &lt;code&gt;spring-boot-dependencies&lt;/code&gt; build.gradle&lt;/a&gt; 을 찾아보십시오 .</target>
        </trans-unit>
        <trans-unit id="ed2b4e4ef8e0344cdda30d6847bcb119fcbc174e" translate="yes" xml:space="preserve">
          <source>The following table provides details of all of the dependency versions that are provided by Spring Boot in its CLI (Command Line Interface), Maven dependency management, and Gradle plugin. When you declare a dependency on one of these artifacts without declaring a version, the version listed in the table is used.</source>
          <target state="translated">다음 표는 CLI (명령 줄 인터페이스), Maven 종속성 관리 및 Gradle 플러그인에서 Spring Boot에서 제공하는 모든 종속성 버전에 대한 세부 정보를 제공합니다. 버전을 선언하지 않고 이러한 아티팩트 중 하나에 대한 종속성을 선언하면 표에 나열된 버전이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="11a1ee12f8577aec4ed37cb34b4f6c27531db603" translate="yes" xml:space="preserve">
          <source>The following table shows how the &lt;code&gt;logging.*&lt;/code&gt; properties can be used together:</source>
          <target state="translated">다음 표는 &lt;code&gt;logging.*&lt;/code&gt; 속성을 함께 사용 하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="636b59ef2de082a7c04cc374555ab94658c49d9a" translate="yes" xml:space="preserve">
          <source>The following table shows the default status mappings for the built-in statuses:</source>
          <target state="translated">다음 표는 기본 제공 상태에 대한 기본 상태 매핑을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="968d6986797ad16e81b19cc09cec555dfd2f5839" translate="yes" xml:space="preserve">
          <source>The following table summarizes the list of supported providers:</source>
          <target state="translated">다음 표에는 지원되는 공급자 목록이 요약되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c474bcb247e601df8b60605554105b3f6b9d65a" translate="yes" xml:space="preserve">
          <source>The following technology-agnostic endpoints are available:</source>
          <target state="translated">다음과 같은 기술에 구애받지 않는 엔드 포인트를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dfd99a1bb81b49c6783d471ce1d5202bfe8ef6df" translate="yes" xml:space="preserve">
          <source>The following types can be used:</source>
          <target state="translated">다음 유형을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9fcaa5289d7bce622b31fc18a6bf945cc1f54160" translate="yes" xml:space="preserve">
          <source>The following units are supported with the simple format:</source>
          <target state="translated">다음 단위는 단순 형식으로 지원됩니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
