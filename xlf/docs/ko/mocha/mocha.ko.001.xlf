<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="mocha">
    <body>
      <group id="mocha">
        <trans-unit id="4880e5997d2e5c91707be1f2cf1644a4e0521957" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2011&amp;ndash;2018 JS Foundation and contributors</source>
          <target state="translated">&amp;copy; 2011&amp;ndash;2018 JS 재단 및 기고자</target>
        </trans-unit>
        <trans-unit id="122783dc9e66c33bcb785c93282a061438a2349f" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2011&amp;ndash;2020 JS Foundation and contributors</source>
          <target state="translated">&amp;copy; 2011&amp;ndash;2020 JS 재단 및 기여자</target>
        </trans-unit>
        <trans-unit id="81afbf5eb55827cad926027ff2d0249fc1c85ca7" translate="yes" xml:space="preserve">
          <source>&amp;hellip;or an ES module:</source>
          <target state="translated">&amp;hellip; 또는 ES 모듈 :</target>
        </trans-unit>
        <trans-unit id="606370a54f758f26eea98a82c7f0651812403a23" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Bail&amp;rdquo; is &amp;ldquo;Best Effort&amp;rdquo;</source>
          <target state="translated">&quot;보석&quot;은 &quot;최선의 노력&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="ce4dbe4095f23d7499e2fffe1c3da9389c9b6ac9" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Force&amp;rdquo; color output to be enabled, or alternatively force it to be disabled via &lt;code&gt;--no-color&lt;/code&gt;. By default, Mocha uses the &lt;a href=&quot;https://npm.im/supports-color&quot;&gt;supports-color&lt;/a&gt; module to decide.</source>
          <target state="translated">&quot;강제&quot;컬러 출력을 활성화하거나 &lt;code&gt;--no-color&lt;/code&gt; 를 통해 강제로 비활성화 합니다 . 기본적으로 Mocha는 &lt;a href=&quot;https://npm.im/supports-color&quot;&gt;support-color&lt;/a&gt; 모듈을 사용하여 결정합니다.</target>
        </trans-unit>
        <trans-unit id="0cf2f1a85ad7053644855b71c6a7053e215276b8" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Hanging&amp;rdquo; most often manifests itself if a server is still listening on a port, or a socket is still open, etc. It can also be something like a runaway &lt;code&gt;setInterval()&lt;/code&gt;, or even an errant &lt;code&gt;Promise&lt;/code&gt; that never fulfilled.</source>
          <target state="translated">&quot;항상 (hanging)&quot;은 서버가 여전히 포트에서 수신 대기 중이거나 소켓이 여전히 열려있는 경우 가장 자주 나타납니다. 또한 런 어웨이 &lt;code&gt;setInterval()&lt;/code&gt; 또는 심지어 충족되지 않은 잘못된 &lt;code&gt;Promise&lt;/code&gt; 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="29ca21d51a81c6a488a2680abedc2d67a518ac71" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Pending&amp;rdquo;&amp;ndash;as in &amp;ldquo;someone should write these test cases eventually&amp;rdquo;&amp;ndash;test-cases are simply those &lt;em&gt;without&lt;/em&gt; a callback:</source>
          <target state="translated">&amp;ldquo;누군가이 테스트 사례를 작성해야합니다&amp;rdquo;와 같이&amp;ldquo;보류 중&amp;rdquo;은 테스트 사례가 단순히 콜백 이 &lt;em&gt;없는&lt;/em&gt; 사례입니다 .</target>
        </trans-unit>
        <trans-unit id="0202d60990c27ebf05e82037b9244427eaaedc86" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Pending&amp;rdquo;&amp;ndash;as in &amp;ldquo;someone should write these test cases eventually&amp;rdquo;&amp;ndash;test-cases are those &lt;em&gt;without&lt;/em&gt; a callback:</source>
          <target state="translated">&quot;보류 중&quot;- &quot;누군가는 결국 이러한 테스트 케이스를 작성해야합니다&quot;와 같이-테스트 케이스 는 콜백 이 &lt;em&gt;없는&lt;/em&gt; 케이스입니다 .</target>
        </trans-unit>
        <trans-unit id="f13bd9ae1921abad613db444c61bdd65481592f5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#-watch-w&quot;&gt;Watch mode&lt;/a&gt; does not support ES Module test files</source>
          <target state="translated">&lt;a href=&quot;#-watch-w&quot;&gt;감시 모드&lt;/a&gt; 는 ES 모듈 테스트 파일을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a4af370b71015e7152af6744af68d0ea749b0b85" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;Configuration file&lt;/a&gt; can only be a CommonJS file (&lt;code&gt;.mocharc.js&lt;/code&gt; or &lt;code&gt;.mocharc.cjs&lt;/code&gt;)</source>
          <target state="translated">&lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;구성 파일&lt;/a&gt; 은 CommonJS 파일 ( &lt;code&gt;.mocharc.js&lt;/code&gt; 또는 &lt;code&gt;.mocharc.cjs&lt;/code&gt; ) 만 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2340e14a9951079e3920c1e88eebb5896a891730" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#features-2&quot;&gt;#&lt;/a&gt; Features</source>
          <target state="translated">&lt;a href=&quot;#features-2&quot;&gt;#&lt;/a&gt; 특징</target>
        </trans-unit>
        <trans-unit id="e3c822f6dc9c85db49735fe89cee755acb52b0c2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#options-that-differ-slightly-from-cli-options&quot;&gt;#&lt;/a&gt; Options that differ slightly from &lt;a href=&quot;#command-line-usage&quot;&gt;cli options&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#options-that-differ-slightly-from-cli-options&quot;&gt;# &lt;/a&gt;&lt;a href=&quot;#command-line-usage&quot;&gt;CLI 옵션&lt;/a&gt; 과 약간 다른 옵션 :</target>
        </trans-unit>
        <trans-unit id="a45859d40de47dc8598e28e6f8b85adcf3d68710" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#options-that-only-function-in-browser-context&quot;&gt;#&lt;/a&gt; Options that &lt;em&gt;only&lt;/em&gt; function in browser context:</source>
          <target state="translated">&lt;a href=&quot;#options-that-only-function-in-browser-context&quot;&gt;#&lt;/a&gt; 브라우저 컨텍스트 &lt;em&gt;에서만&lt;/em&gt; 작동 하는 옵션 :</target>
        </trans-unit>
        <trans-unit id="89a17f200984736639a1af9170190a5500394520" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#third-party-reporters&quot;&gt;Custom reporters&lt;/a&gt; and &lt;a href=&quot;#interfaces&quot;&gt;custom interfaces&lt;/a&gt; can only be CommonJS files</source>
          <target state="translated">&lt;a href=&quot;#third-party-reporters&quot;&gt;사용자 정의 리포터&lt;/a&gt; 및 &lt;a href=&quot;#interfaces&quot;&gt;사용자 정의 인터페이스&lt;/a&gt; 는 CommonJS 파일 만 가능합니다.</target>
        </trans-unit>
        <trans-unit id="65fad3601a86cb41df85b1b37f79abad3d75e452" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#with-commonjs&quot;&gt;#&lt;/a&gt; With CommonJS</source>
          <target state="translated">&lt;a href=&quot;#with-commonjs&quot;&gt;#&lt;/a&gt; CommonJS 사용</target>
        </trans-unit>
        <trans-unit id="7acda2fd457e345e8eabfc9e04defdf555e39a2b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#with-es-modules&quot;&gt;#&lt;/a&gt; With ES Modules</source>
          <target state="translated">&lt;a href=&quot;#with-es-modules&quot;&gt;#&lt;/a&gt; ES 모듈 사용</target>
        </trans-unit>
        <trans-unit id="25ed9012bafe6e305d78705fd4bf34bc131c9626" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://chaijs.com/&quot;&gt;chai&lt;/a&gt; - &lt;code&gt;expect()&lt;/code&gt;, &lt;code&gt;assert()&lt;/code&gt; and &lt;code&gt;should&lt;/code&gt;-style assertions</source>
          <target state="translated">&lt;a href=&quot;http://chaijs.com/&quot;&gt;chai&lt;/a&gt; - &lt;code&gt;expect()&lt;/code&gt; , &lt;code&gt;assert()&lt;/code&gt; 및 &lt;code&gt;should&lt;/code&gt; - style 어설 션</target>
        </trans-unit>
        <trans-unit id="fdf03ac5e0ca048d37fe0ad57e1e235952595567" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://growl.info/&quot;&gt;Growl&lt;/a&gt; was an early notification system implementation for OS X and Windows, hence, the name of Mocha&amp;rsquo;s &lt;code&gt;--growl&lt;/code&gt; option.</source>
          <target state="translated">&lt;a href=&quot;http://growl.info/&quot;&gt;Growl&lt;/a&gt; 은 OS X 및 Windows 용 초기 알림 시스템 구현이므로 Mocha의 &lt;code&gt;--growl&lt;/code&gt; 옵션 의 이름입니다 .</target>
        </trans-unit>
        <trans-unit id="5bb4230cc3fd86b530db1acfe8036464113cd96d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://unexpected.js.org&quot;&gt;unexpected&lt;/a&gt; - &amp;ldquo;the extensible BDD assertion toolkit&amp;rdquo;</source>
          <target state="translated">&lt;a href=&quot;http://unexpected.js.org&quot;&gt;예기치 않은&lt;/a&gt; - &quot;확장 가능한 BDD 어설 션 툴킷&quot;</target>
        </trans-unit>
        <trans-unit id="1564a69b76b202f4b70459e52fc79d3de8d7ccf7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/LearnBoost/expect.js&quot;&gt;expect.js&lt;/a&gt; - &lt;code&gt;expect()&lt;/code&gt; style assertions</source>
          <target state="translated">&lt;a href=&quot;https://github.com/LearnBoost/expect.js&quot;&gt;expect.js&lt;/a&gt; - &lt;code&gt;expect()&lt;/code&gt; 스타일 주장</target>
        </trans-unit>
        <trans-unit id="ccf6128796caad47bf922901f1f89ce8973d11ed" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/shouldjs/should.js&quot;&gt;should.js&lt;/a&gt; - BDD style shown throughout these docs</source>
          <target state="translated">&lt;a href=&quot;https://github.com/shouldjs/should.js&quot;&gt;should.js-&lt;/a&gt; 이 문서 전체에 표시되는 BDD 스타일</target>
        </trans-unit>
        <trans-unit id="f2735f46f5835a9f801e5ea1398a95235e55f2c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/visionmedia/better-assert&quot;&gt;better-assert&lt;/a&gt; - C-style self-documenting &lt;code&gt;assert()&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/visionmedia/better-assert&quot;&gt;better-assert&lt;/a&gt; -C 스타일 자체 문서화 &lt;code&gt;assert()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b71b6885763b5a41994b3d2a2cb89e5b27dcd14a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=maty.vscode-mocha-sidebar&quot;&gt;Mocha sidebar&lt;/a&gt; is the most complete mocha extension for vs code.</source>
          <target state="translated">&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=maty.vscode-mocha-sidebar&quot;&gt;모카 사이드 바&lt;/a&gt; 는 코드 대 가장 완벽한 모카 확장입니다.</target>
        </trans-unit>
        <trans-unit id="29792d04f1e54982f7dfab2e1733a9a7ce45cabb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://medium.com/@jakubsynowiec/you-should-always-quote-your-globs-in-npm-scripts-621887a2a784&quot;&gt;You should &lt;em&gt;always&lt;/em&gt; quote your globs in npm scripts&lt;/a&gt;. If you use double quotes, it&amp;rsquo;s the shell on UNIX that will expand the glob. On the other hand, if you use single quotes, the &lt;a href=&quot;https://www.npmjs.com/package/glob&quot;&gt;&lt;code&gt;node-glob&lt;/code&gt;&lt;/a&gt; module will handle its expansion.</source>
          <target state="translated">&lt;a href=&quot;https://medium.com/@jakubsynowiec/you-should-always-quote-your-globs-in-npm-scripts-621887a2a784&quot;&gt;당신은해야한다 &lt;em&gt;항상&lt;/em&gt; NPM 스크립트에 globs의 말을 인용&lt;/a&gt; . 큰 따옴표를 사용하면 UNIX의 쉘이 glob을 확장합니다. 반면에 작은 따옴표를 사용하면 &lt;a href=&quot;https://www.npmjs.com/package/glob&quot;&gt; &lt;code&gt;node-glob&lt;/code&gt; &lt;/a&gt; 모듈이 확장을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="19c66e520c741fda142d2bc7a63ffe2e3756a88d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://npm.im/mochawesome&quot;&gt;Mochawesome&lt;/a&gt; is a great alternative to the default HTML reporter.</source>
          <target state="translated">&lt;a href=&quot;https://npm.im/mochawesome&quot;&gt;Mochawesome&lt;/a&gt; 은 기본 HTML 리포터의 훌륭한 대안입니다.</target>
        </trans-unit>
        <trans-unit id="daee01848f7fea0ef3920be1c44548c1817db467" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://unexpected.js.org/&quot;&gt;unexpected&lt;/a&gt; - &amp;ldquo;the extensible BDD assertion toolkit&amp;rdquo;</source>
          <target state="translated">&lt;a href=&quot;https://unexpected.js.org/&quot;&gt;예상치 못한&lt;/a&gt; - &quot;확장 가능한 BDD 어설 션 툴킷&quot;</target>
        </trans-unit>
        <trans-unit id="503fa814b546e45dd52784f0523272a9253e8f6c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://wallabyjs.com/&quot;&gt;Wallaby.js&lt;/a&gt; is a continuous testing tool that enables real-time code coverage for Mocha with any assertion library in VS Code, Atom, JetBrains IDEs (IntelliJ IDEA, WebStorm, etc.), Sublime Text and Visual Studio for both browser and node.js projects.</source>
          <target state="translated">&lt;a href=&quot;https://wallabyjs.com/&quot;&gt;Wallaby.js&lt;/a&gt; 는 VS Code, Atom, JetBrains IDE (IntelliJ IDEA, WebStorm 등), Sublime Text 및 Visual Studio의 모든 어설 션 라이브러리를 사용하여 브라우저 및 노드에 대한 Mocha의 실시간 코드 적용 범위를 지원하는 지속적인 테스트 도구입니다. js 프로젝트.</target>
        </trans-unit>
        <trans-unit id="ecc2ae707af00309e345fef10f5694e798f1001a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.chaijs.com/&quot;&gt;chai&lt;/a&gt; - &lt;code&gt;expect()&lt;/code&gt;, &lt;code&gt;assert()&lt;/code&gt; and &lt;code&gt;should&lt;/code&gt;-style assertions</source>
          <target state="translated">&lt;a href=&quot;https://www.chaijs.com/&quot;&gt;chai&lt;/a&gt; - &lt;code&gt;expect()&lt;/code&gt; , &lt;code&gt;assert()&lt;/code&gt; 및 &lt;code&gt;should&lt;/code&gt; 스타일 어설 션</target>
        </trans-unit>
        <trans-unit id="44372724c81d9e9e00f55a25b45700c20a62cfc6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt; support for running Mocha tests is available via a 3rd party package &lt;a href=&quot;https://github.com/scottaj/mocha.el&quot;&gt;mocha.el&lt;/a&gt;. The package is available on MELPA, and can be installed via &lt;code&gt;M-x package-install mocha&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;&lt;/a&gt;Mocha 테스트 실행을위한 Emacs 지원은 타사 패키지 &lt;a href=&quot;https://github.com/scottaj/mocha.el&quot;&gt;mocha.el을&lt;/a&gt; 통해 제공됩니다 . 패키지는 MELPA에서 사용 가능하며 &lt;code&gt;M-x package-install mocha&lt;/code&gt; 를 통해 설치할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a4aaad3792c24d5288746210dca61d836f7a2b70" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.jetbrains.com/&quot;&gt;JetBrains&lt;/a&gt; provides a &lt;a href=&quot;https://www.jetbrains.com/idea/features/nodejs.html&quot;&gt;NodeJS plugin&lt;/a&gt; for its suite of IDEs (IntelliJ IDEA, WebStorm, etc.), which contains a Mocha test runner, among other things.</source>
          <target state="translated">&lt;a href=&quot;https://www.jetbrains.com/&quot;&gt;JetBrains&lt;/a&gt; 는 Mocha 테스트 러너를 포함하는 IDE 제품군 (IntelliJ IDEA, WebStorm 등)에 &lt;a href=&quot;https://www.jetbrains.com/idea/features/nodejs.html&quot;&gt;NodeJS 플러그인&lt;/a&gt; 을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="11291f2858e846ccb99830c798ce583b966f2c98" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.npmjs.com/package/mochawesome&quot;&gt;Mochawesome&lt;/a&gt; is a great alternative to the default HTML reporter.</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/mochawesome&quot;&gt;Mochawesome&lt;/a&gt; 은 기본 HTML 기자에 대한 훌륭한 대안입니다.</target>
        </trans-unit>
        <trans-unit id="2bb68fd9008653ec12b2f1777ec12f0ff896a9c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--bail&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; imply &lt;code&gt;--exit&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--bail&lt;/code&gt; 는 않습니다 &lt;em&gt;하지&lt;/em&gt; 의미 &lt;code&gt;--exit&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="c5713812df5d43a6deaf12c65bcdb06b48905d51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--exit&lt;/code&gt; / &lt;code&gt;--no-exit&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;--exit&lt;/code&gt; / &lt;code&gt;--no-exit&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c40f18d3105ea1d7318f74b2f2b4f75dfce961e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--extension&lt;/code&gt; now supports multipart extensions (e.g., &lt;code&gt;spec.js&lt;/code&gt;), leading dots (&lt;code&gt;.js&lt;/code&gt;) and combinations thereof (&lt;code&gt;.spec.js&lt;/code&gt;);</source>
          <target state="translated">&lt;code&gt;--extension&lt;/code&gt; 은 이제 다중 부분 확장 (예 : &lt;code&gt;spec.js&lt;/code&gt; ), 선행 점 ( &lt;code&gt;.js&lt;/code&gt; ) 및 이들의 조합 ( &lt;code&gt;.spec.js&lt;/code&gt; )을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="0adcaddde9e506ef495ed1d5ec6aba94d7c8b525" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--forbid-only&lt;/code&gt; causes Mocha to fail when an exclusive (&amp;ldquo;only&amp;rsquo;d&amp;rdquo;) test or suite is encountered, and it will abort further test execution.</source>
          <target state="translated">&lt;code&gt;--forbid-only&lt;/code&gt; 는 배타적 ( &quot;only'd&quot;) 테스트 또는 스위트가 발견 될 때 Mocha가 실패하도록하고 추가 테스트 실행을 중단합니다.</target>
        </trans-unit>
        <trans-unit id="5844098540bae421d08268b26e15b8cdc24063ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--forbid-pending&lt;/code&gt; causes Mocha to fail when a skipped (&amp;ldquo;pending&amp;rdquo;) test or suite is encountered, and it will abort further test execution.</source>
          <target state="translated">&lt;code&gt;--forbid-pending&lt;/code&gt; 은 건너 뛴 ( &quot;보류 중&quot;) 테스트 또는 스위트가 발견 될 때 Mocha가 실패하도록하고 추가 테스트 실행을 중단합니다.</target>
        </trans-unit>
        <trans-unit id="a9522f7896d31a5b5dee3e51036d8fda057f0a72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--global&lt;/code&gt; accepts wildcards. You could do &lt;code&gt;--global '*bar'&lt;/code&gt; and it would match &lt;code&gt;foobar&lt;/code&gt;, &lt;code&gt;barbar&lt;/code&gt;, etc. You can also pass in &lt;code&gt;'*'&lt;/code&gt; to ignore all globals.</source>
          <target state="translated">&lt;code&gt;--global&lt;/code&gt; 은 와일드 카드를 허용합니다. 당신은 할 수 &lt;code&gt;--global '*bar'&lt;/code&gt; 과는 일치합니다 &lt;code&gt;foobar&lt;/code&gt; , &lt;code&gt;barbar&lt;/code&gt; 당신은 또한에 전달할 수있는 등, &lt;code&gt;'*'&lt;/code&gt; 모든 전역을 무시.</target>
        </trans-unit>
        <trans-unit id="4c4322259ac88e430778f6e3f91f8db296ac7688" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--global&lt;/code&gt; can accept a comma-delimited list; &lt;code&gt;--global app,YUI&lt;/code&gt; is equivalent to &lt;code&gt;--global app --global YUI&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--global&lt;/code&gt; 은 쉼표로 구분 된 목록을 허용 할 수 있습니다. &lt;code&gt;--global app,YUI&lt;/code&gt; 는 &lt;code&gt;--global app --global YUI&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="1a6e8264d39bb1840f2128ea4d45205a143b523b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;afterAll&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;afterAll&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="b991af1c65d5d4905794bd1b11c692b01f3bab0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;afterEach&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;afterEach&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="ea631038b73b314bc4cae6bdd32630c2036c6c83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;beforeAll&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;beforeAll&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="7329122c07f0b666507c31d7994354465c6340e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;beforeEach&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;beforeEach&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="56b7c5cfeaded6ce0ea7e6c4d4d438bdd19cffbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;context()&lt;/code&gt; is just an alias for &lt;code&gt;describe()&lt;/code&gt;, and behaves the same way; it just provides a way to keep tests easier to read and organized. Similarly, &lt;code&gt;specify()&lt;/code&gt; is an alias for &lt;code&gt;it()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;context()&lt;/code&gt; 는 &lt;code&gt;describe()&lt;/code&gt; 의 별칭 일 뿐이며 같은 방식으로 동작합니다. 테스트를보다 쉽게 ​​읽고 구성 할 수있는 방법을 제공합니다. 마찬가지로, &lt;code&gt;specify()&lt;/code&gt; 는 &lt;code&gt;it()&lt;/code&gt; 의 별명입니다 .</target>
        </trans-unit>
        <trans-unit id="c34c0223c353b723a1a7780ed4175053bd1d1d43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;context()&lt;/code&gt; is just an alias for &lt;code&gt;describe()&lt;/code&gt;, and behaves the same way; it provides a way to keep tests easier to read and organized. Similarly, &lt;code&gt;specify()&lt;/code&gt; is an alias for &lt;code&gt;it()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;context()&lt;/code&gt; 는 &lt;code&gt;describe()&lt;/code&gt; 의 별칭이며 동일한 방식으로 작동합니다. 테스트를보다 쉽게 ​​읽고 구성 할 수있는 방법을 제공합니다. 마찬가지로, &lt;code&gt;specify()&lt;/code&gt; 는 &lt;code&gt;it()&lt;/code&gt; 의 별칭입니다 .</target>
        </trans-unit>
        <trans-unit id="5068d189907c7d855768fab68d718a9be022de60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mocha.allowUncaught()&lt;/code&gt; : If called, uncaught errors will not be absorbed by the error handler.</source>
          <target state="translated">&lt;code&gt;mocha.allowUncaught()&lt;/code&gt; : 호출되면 포착되지 않은 오류는 오류 처리기에 의해 흡수되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="554f4cc91555480bd1860a411164a3314a936444" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mocha&lt;/code&gt; property of &lt;code&gt;package.json&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;mocha&lt;/code&gt; &lt;code&gt;package.json&lt;/code&gt; 의mocha 속성</target>
        </trans-unit>
        <trans-unit id="bfedfd7c997cd3bf4a80b5a5f8369a1e541211bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noHighlighting&lt;/code&gt;: If set to &lt;code&gt;true&lt;/code&gt;, do not attempt to use syntax highlighting on output test code.</source>
          <target state="translated">&lt;code&gt;noHighlighting&lt;/code&gt; : &lt;code&gt;true&lt;/code&gt; 로 설정된 경우 출력 테스트 코드에서 구문 강조를 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="348498bdc8cc1d3584f5b20189f1d9f13eb39b23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noHighlighting&lt;/code&gt;&lt;em&gt;{boolean}&lt;/em&gt; If set to &lt;code&gt;true&lt;/code&gt;, do not attempt to use syntax highlighting on output test code.</source>
          <target state="translated">&lt;code&gt;noHighlighting&lt;/code&gt; &lt;em&gt;{boolean} &lt;/em&gt; &lt;code&gt;true&lt;/code&gt; 로 설정된 경우 출력 테스트 코드에서 구문 강조 표시를 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="537eb85ba87ee8453e8fac6c97431f92a1fd4c81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; flags can be defined in Mocha&amp;rsquo;s &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 플래그는 Mocha의 &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;구성&lt;/a&gt; 에서 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e19de59bd8b201f4294895c5ae99b6bbbc9748b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reporter&lt;/code&gt;&lt;em&gt;{string|constructor}&lt;/em&gt; You can pass a reporter&amp;rsquo;s name or a custom reporter&amp;rsquo;s constructor. You can find &lt;strong&gt;recommended&lt;/strong&gt; reporters for the browser &lt;a href=&quot;#reporting&quot;&gt;here&lt;/a&gt;. It is possible to use &lt;a href=&quot;#reporters&quot;&gt;built-in reporters&lt;/a&gt; as well. Their employment in browsers is neither recommended nor supported, open the console to see the test results.</source>
          <target state="translated">&lt;code&gt;reporter&lt;/code&gt; &lt;em&gt;{string | constructor}&lt;/em&gt; 리포터의 이름 또는 사용자 지정 리포터의 생성자를 전달할 수 있습니다. &lt;a href=&quot;#reporting&quot;&gt;여기&lt;/a&gt; 에서 브라우저에 대한 &lt;strong&gt;권장&lt;/strong&gt; 리포터를 찾을 수 있습니다 . &lt;a href=&quot;#reporters&quot;&gt;내장 된 리포터&lt;/a&gt; 도 사용할 수 있습니다. 브라우저에서의 고용은 권장되거나 지원되지 않습니다. 콘솔을 열어 테스트 결과를 확인하세요.</target>
        </trans-unit>
        <trans-unit id="5f60f9dbc0556bab5e4324085ba1bdc3d293ae4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;require('./setup.js')&lt;/code&gt; or &lt;code&gt;import './setup.js'&lt;/code&gt; at the top of every test file. Best avoided for those averse to boilerplate.</source>
          <target state="translated">&lt;code&gt;require('./setup.js')&lt;/code&gt; 또는 모든 테스트 파일의 상단에 &lt;code&gt;import './setup.js'&lt;/code&gt; 를 가져옵니다 . 상용구를 싫어하는 사람들에게는 피하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="8d261dca137096c6c4c4fc3bb658b5c530b809ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setup.js&lt;/code&gt; will be executed &lt;em&gt;first&lt;/em&gt;, and install the two hooks shown above for every test found in &lt;code&gt;./test/**/*.spec.js&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setup.js&lt;/code&gt; 가 실행될 &lt;em&gt;제&lt;/em&gt; 검색된 모든 테스트에 대해 상기 도시 된 두 개의 후크 설치 &lt;code&gt;./test/**/*.spec.js&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="ef89938eac5d3663c326138e01667c4e578d2d05" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;--compilers&lt;/code&gt; was removed in v6.0.0. See &lt;a href=&quot;https://github.com/mochajs/mocha/wiki/compilers-deprecation&quot;&gt;further explanation and workarounds&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;--compilers&lt;/code&gt; 는 v6.0.0 에서 제거되었습니다. 자세한 &lt;a href=&quot;https://github.com/mochajs/mocha/wiki/compilers-deprecation&quot;&gt;설명 및 해결 방법을&lt;/a&gt; 참조하십시오 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4d643fa630ea2ea699168c28ddcd8118ea6fb5b1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;BREAKING CHANGE in v6.0.0; now mutually exclusive with &lt;code&gt;--fgrep&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v6.0.0의 주요 변경 사항; 이제 &lt;code&gt;--fgrep&lt;/code&gt; 과 상호 배타적입니다 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9e89c256bccc2f2652530be9ce57f0376553fc18" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;BREAKING CHANGE in v6.0.0; now mutually exclusive with &lt;code&gt;--grep&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v6.0.0의 주요 변경 사항; 이제 &lt;code&gt;--grep&lt;/code&gt; 과 상호 배타적입니다 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="070ffe622f41ab089ae3337442f32618981b7ce1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;BREAKING CHANGE in v7.0.0; &lt;code&gt;--debug&lt;/code&gt; / &lt;code&gt;--debug-brk&lt;/code&gt; are removed and &lt;code&gt;debug&lt;/code&gt; is deprecated.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v7.0.0의 주요 변경 사항; &lt;code&gt;--debug&lt;/code&gt; / &lt;code&gt;--debug-brk&lt;/code&gt; 가 제거되고 &lt;code&gt;debug&lt;/code&gt; 는 더 이상 사용되지 않습니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0928996ca546cd8754bd4fbae4ffc7e1c53c09a7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Best practice&lt;/em&gt;: Don&amp;rsquo;t do nothing! A test should make an assertion or use &lt;code&gt;this.skip()&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;모범 사례&lt;/em&gt; : 아무것도하지 마십시오! 테스트는 어설 션을 작성하거나 &lt;code&gt;this.skip()&lt;/code&gt; 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="89c3b78b1338c34c1054e3cfdcf74ed2974b90eb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Best practice&lt;/em&gt;: To avoid confusion, do not execute further instructions in a test or hook after calling &lt;code&gt;this.skip()&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;모범 사례&lt;/em&gt; : 혼동을 피하려면 &lt;code&gt;this.skip()&lt;/code&gt; 호출 한 후 테스트 또는 후크에서 추가 명령을 실행하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="334b6d6a556867914bb2b447cf3f8a036662d66b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Best practice&lt;/em&gt;: Use &lt;code&gt;.skip()&lt;/code&gt; instead of commenting tests out.</source>
          <target state="translated">&lt;em&gt;모범 사례&lt;/em&gt; : 주석 처리 대신 &lt;code&gt;.skip()&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="1e0beb3a7c4d5fb91ba1bf858f0ffd9910f4e618" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;If you do not need to use&lt;/em&gt; Mocha&amp;rsquo;s context, lambdas should work. Be aware that using lambdas will be more painful to refactor if the need eventually arises!</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;Mocha의 컨텍스트 &lt;em&gt;를 사용할 필요가 없으면&lt;/em&gt; 람다가 작동합니다. 람다를 사용하는 것은 결국 필요가 생기면 리팩토링하는 데 더 고통 스러울 것입니다!</target>
        </trans-unit>
        <trans-unit id="65eadcbf418cf5130eba58897cb4af4e5e2ea8c8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;If you do not need to use&lt;/em&gt; Mocha&amp;rsquo;s context, lambdas should work. However, the result will be more difficult to refactor if the need eventually arises.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;Mocha의 컨텍스트 &lt;em&gt;를 사용할 필요가 없다면&lt;/em&gt; 람다는 효과가 있습니다. 그러나 결과가 필요한 경우 리팩토링하기가 더 어려워집니다.</target>
        </trans-unit>
        <trans-unit id="12f5dfc9876db34646f7a5894072c2eda83baf28" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Ignoring&lt;/em&gt; global fixtures and custom reporters</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;글로벌 설비 및 맞춤형 리포터 &lt;em&gt;무시&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dcfa11ac87ca754d6b22169dad13f39d22722d84" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Immediately before&lt;/em&gt; a worker runs the first test it receives, the worker &amp;ldquo;bootstraps&amp;rdquo; itself by:</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;작업자가받은 첫 번째 테스트를 실행 &lt;em&gt;하기 직전&lt;/em&gt; 에 작업자는 다음과 같은 방법으로 스스로 &quot;부트 스트랩&quot;합니다.</target>
        </trans-unit>
        <trans-unit id="e46df25af8b757050aa5e9886d9caf9fbd0a67ba" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Move&lt;/em&gt; your root hooks into &lt;code&gt;test/hooks.js&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;루트 후크를 &lt;code&gt;test/hooks.js&lt;/code&gt; 로 &lt;em&gt;이동&lt;/em&gt; 하십시오 .</target>
        </trans-unit>
        <trans-unit id="632537fb9ad4e98334b1de693642a46dcd7e7e36" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE: Careful! &lt;code&gt;after&lt;/code&gt; becomes &lt;code&gt;afterAll&lt;/code&gt; and &lt;code&gt;before&lt;/code&gt; becomes &lt;code&gt;beforeAll&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;참고 : 조심하세요! &lt;code&gt;after&lt;/code&gt; 는 &lt;code&gt;afterAll&lt;/code&gt; 이 되고 &lt;code&gt;before&lt;/code&gt; 는 &lt;code&gt;beforeAll&lt;/code&gt; 이 됩니다 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="61d7a4ec323b815fda887832e043743a82a1a6e3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE: This only applies when running in parallel mode.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;참고 : 이것은 병렬 모드에서 실행하는 경우에만 적용됩니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="223542867cf2cdefa595e6f17460de25ce9cee35" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in Node.js v12.12.0&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Node.js v12.12.0의 새로운 기능&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="161adef3f67f3e357c37d96e4b69de555980f3bc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in v.8.0.0.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v.8.0.0의 새로운 기능.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6a94e737e1d07f1d801426e4afdec84b6bace004" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in v6.0.0.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v6.0.0의 새로운 기능.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e39d1fe99ff47d410a6daf0780953e79d0df0cba" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in v6.0.0&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v6.0.0의 새로운 기능&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="132dae01f3198cda73c50fe9216c0f82f59a129e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in v7.0.0&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v7.0.0의 새로운 기능&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="336178458a82be96375ba4429011744ade12b394" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in v7.1.0&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v7.1.0의 새로운 기능&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a55b874d97cc68f79bb187bace6a2de122772b2b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in v8.0.0.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v8.0.0의 새로운 기능.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8f7d437326b3a591a72a0f4928e1cef75565d13d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in v8.2.0.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v8.2.0의 새로운 기능.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="244ae691dbc4f874d1020f9dc6060fe25ff1f77b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: Authors of third-party libraries built on Mocha should read this!&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;참고 : Mocha에 구축 된 타사 라이브러리의 작성자는이 내용을 읽어야합니다!&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="87993acc93c3f9ab84c7e3b8ab027e9b0bc84016" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: Further examples will use ESM syntax.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;참고 : 추가 예제에서는 ESM 구문을 사용합니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4a0edfb51f0156b9ebb2dc4a46c65c0e9b5e9717" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: All nested suites will still be executed.</source>
          <target state="translated">&lt;em&gt;참고&lt;/em&gt; : 모든 중첩 스위트는 계속 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="292ce4771eb26d34e06a47bc58e7958dffbe558a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: Code in skipped suites, that is placed outside of hooks or tests is still executed, as mocha will still invoke the suite function to build up the suite structure for visualization.</source>
          <target state="translated">&lt;em&gt;참고&lt;/em&gt; : mocha는 시각화를위한 스위트 구조를 구축하기 위해 스위트 함수를 계속 호출하므로 후크 또는 테스트 외부에 배치 된 건너 뛴 스위트의 코드는 계속 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="4f727f5f0c387f4d76840c0b9751e20d642d7645" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: Double quotes around the glob are recommended for portability.</source>
          <target state="translated">&lt;em&gt;참고&lt;/em&gt; : 이식성을 위해 글로브 주위에 큰 따옴표를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="02ad39309be3772f389ea773e9d23183fe6d1694" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: Hooks, if present, will still be executed.</source>
          <target state="translated">&lt;em&gt;참고&lt;/em&gt; : 후크가 있으면 여전히 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="110e2d10c2ab554a2d2a5743c8a99ef43321577c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: The &lt;code&gt;require&lt;/code&gt; interface cannot be run via the &lt;code&gt;node&lt;/code&gt; executable, and must be run via &lt;code&gt;mocha&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;참고&lt;/em&gt; : &lt;code&gt;require&lt;/code&gt; 인터페이스는 &lt;code&gt;node&lt;/code&gt; 실행 파일을 통해 실행할 수 없으며 &lt;code&gt;mocha&lt;/code&gt; 를 통해 실행해야합니다 .</target>
        </trans-unit>
        <trans-unit id="27a683517748a0c2755328ea767522c20595a687" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Prior to&lt;/em&gt; version v4.0.0, &lt;em&gt;by default&lt;/em&gt;, Mocha would force its own process to exit once it was finished executing all tests. This behavior enables a set of potential problems; it&amp;rsquo;s indicative of tests (or fixtures, harnesses, code under test, etc.) which don&amp;rsquo;t clean up after themselves properly. Ultimately, &amp;ldquo;dirty&amp;rdquo; tests can (but not always) lead to &lt;em&gt;false positive&lt;/em&gt; or &lt;em&gt;false negative&lt;/em&gt; results.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;버전 v4.0.0 &lt;em&gt;이전에는 &lt;/em&gt;&lt;em&gt;기본적&lt;/em&gt; 으로 Mocha는 모든 테스트 실행이 완료되면 자체 프로세스를 강제 종료합니다. 이 동작은 일련의 잠재적 인 문제를 가능하게합니다. 자체적으로 올바르게 정리되지 않은 테스트 (또는 비품, 하네스, 테스트중인 코드 등)를 나타냅니다. 궁극적으로 &quot;더러운&quot;테스트는 (항상 그런 것은 아니지만) &lt;em&gt;오 탐지&lt;/em&gt; 또는 &lt;em&gt;오 탐지&lt;/em&gt; 결과를 초래할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b0e8dd2e5541c77f4f9a6ee0c801d573cee8a398" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Recommended&lt;/em&gt;: Define root hooks in a &amp;ldquo;required&amp;rdquo; file, using the new (also as of v8.0.0) &lt;a href=&quot;#root-hook-plugins&quot;&gt;Root Hook Plugin&lt;/a&gt; system.</source>
          <target state="translated">&lt;em&gt;권장&lt;/em&gt; : 새로운 (v8.0.0부터) &lt;a href=&quot;#root-hook-plugins&quot;&gt;루트 후크 플러그인&lt;/a&gt; 시스템을 사용하여 &quot;필수&quot;파일에 루트 후크를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="c0a663bfc74a0370395f882b55162094c144b77b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Removed in v8.0.0. Please use &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;configuration file&lt;/a&gt; instead.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v8.0.0에서 제거되었습니다. 사용하십시오 &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;구성 파일을&lt;/a&gt; 대신.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="041bd362249791314894aa1fdbc446f2715136c1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;TIP: If parallel mode is defined in your config file, you can temporarily disable it on the command-line by using either the &lt;code&gt;--no-parallel&lt;/code&gt; flag or reducing the job count, e.g., &lt;code&gt;--jobs=0&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;팁 : 구성 파일에 병렬 모드가 정의되어있는 경우 &lt;code&gt;--no-parallel&lt;/code&gt; 플래그를 사용하거나 작업 수를 줄여 명령 줄에서 일시적으로 비활성화 할 수 있습니다 ( 예 : &lt;code&gt;--jobs=0&lt;/code&gt; ) .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3838cde734bb58610489e4c0400c4043a723bf06" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Tip: If you need to ensure code runs once and only once in any mode, use &lt;a href=&quot;#global-fixtures&quot;&gt;global fixtures&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;팁 : 어떤 모드에서든 코드가 한 번만 실행되도록해야한다면 &lt;a href=&quot;#global-fixtures&quot;&gt;global fixtures를&lt;/a&gt; 사용 하세요.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c23d1aa75291dbdb378635dda9a3fc0002533492" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Tip: If you&amp;rsquo;re having trouble getting ES modules to work, refer to &lt;a href=&quot;https://nodejs.org/api/esm.html&quot;&gt;the Node.js documentation&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;팁 : ES 모듈이 작동하는 데 문제가 &lt;a href=&quot;https://nodejs.org/api/esm.html&quot;&gt;있는 경우 Node.js 문서를&lt;/a&gt; 참조하십시오 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e149bc259d8a80cb62c54ebbfdffe94125597c04" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Update in v6.0.0: &lt;code&gt;--no-timeout&lt;/code&gt; is implied when invoking Mocha using inspect flags. It is equivalent to &lt;code&gt;--timeout 0&lt;/code&gt;. &lt;code&gt;--timeout 99999999&lt;/code&gt; is no longer needed.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v6.0.0 업데이트 : 검사 플래그를 사용하여 Mocha를 호출 할 때 &lt;code&gt;--no-timeout&lt;/code&gt; 이 암시됩니다. &lt;code&gt;--timeout 0&lt;/code&gt; 과 동일합니다 . &lt;code&gt;--timeout 99999999&lt;/code&gt; 는 더 이상 필요하지 않습니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b1c748253cdbecc40d965c206f0cf424884c0b53" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Updated in Mocha v4.0.0&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Mocha v4.0.0에서 업데이트&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9641c5c0cb37ef46520c2368e901ecfb8fa1c4b7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Updated in v4.0.0.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v4.0.0에서 업데이트되었습니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aeba22b9321151f87fa5e8fa6550d06a01a8624c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Updated in v6.0.0. &lt;code&gt;--colors&lt;/code&gt; is now an alias for &lt;code&gt;--color&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v6.0.0에서 업데이트되었습니다. &lt;code&gt;--colors&lt;/code&gt; 는 이제 &lt;code&gt;--color&lt;/code&gt; 의 별칭입니다 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5e5ec57807df10d1a4cd84bd4dc5ac479c4b18eb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Updated in v6.0.0. Can be specified multiple times. &lt;code&gt;--reporter-options&lt;/code&gt; is now an alias for &lt;code&gt;--reporter-option&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v6.0.0에서 업데이트되었습니다. 여러 번 지정할 수 있습니다. &lt;code&gt;--reporter-options&lt;/code&gt; 는 이제 &lt;code&gt;--reporter-option&lt;/code&gt; 의 별칭입니다 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d155ba263d47a9ebe65640ee824c634fda732379" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Updated in v6.0.0.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v6.0.0에서 업데이트되었습니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e791e5fb2248541ecb30656502af9f75450ef6e7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Updated in v6.0.0; the option is &lt;code&gt;--global&lt;/code&gt; and &lt;code&gt;--globals&lt;/code&gt; is now an alias.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v6.0.0에서 업데이트되었습니다. 옵션은 &lt;code&gt;--global&lt;/code&gt; 이고 &lt;code&gt;--globals&lt;/code&gt; 는 이제 별칭입니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1b7fde4220e48b64f10104bcd827b75c0b46f94f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Updated in v7.0.0:&lt;/em&gt; skipping a test within an &amp;ldquo;after all&amp;rdquo; hook is disallowed and will throw an exception. Use a return statement or other means to abort hook execution.</source>
          <target state="translated">&lt;em&gt;v7.0.0에서 업데이트 :&lt;/em&gt; &quot;결국&quot;후크 내에서 테스트를 건너 뛰는 것은 허용되지 않으며 예외가 발생합니다. return 문이나 다른 방법을 사용하여 후크 실행을 중단합니다.</target>
        </trans-unit>
        <trans-unit id="d4db74b7bce1fe4e59b5a323c48d1983fec780a5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;WARNING: &lt;code&gt;--file&lt;/code&gt; is incompatible with &lt;a href=&quot;#parallel-tests&quot;&gt;parallel mode&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;경고 : &lt;code&gt;--file&lt;/code&gt; 은 &lt;a href=&quot;#parallel-tests&quot;&gt;병렬 모드&lt;/a&gt; 와 호환되지 않습니다 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="db33707e1f78e0357859d672258eb8b1cfcc6177" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;WARNING: &lt;code&gt;--sort&lt;/code&gt; is incompatible with &lt;a href=&quot;#parallel-tests&quot;&gt;parallel mode&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;경고 : &lt;code&gt;--sort&lt;/code&gt; 는 &lt;a href=&quot;#parallel-tests&quot;&gt;병렬 모드&lt;/a&gt; 와 호환되지 않습니다 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f60594f3b995e3983ec2a82b524e924d3f350792" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;WARNING: Delayed root suites are incompatible with &lt;a href=&quot;#parallel-tests&quot;&gt;parallel mode&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;경고 : 지연된 루트 제품군은 &lt;a href=&quot;#parallel-tests&quot;&gt;병렬 모드&lt;/a&gt; 와 호환되지 않습니다 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="35fc89f2a78bd95ea48f7934332138c69947ee82" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;WARNING: Exclusive tests are incompatible with &lt;a href=&quot;#parallel-tests&quot;&gt;parallel mode&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;경고 : 독점 테스트는 &lt;a href=&quot;#parallel-tests&quot;&gt;병렬 모드&lt;/a&gt; 와 호환되지 않습니다 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7542c68c1542b245f7a2242d4daea6e0514d3bbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;--compilers&lt;/code&gt; is deprecated as of Mocha v4.0.0. See &lt;a href=&quot;https://github.com/mochajs/mocha/wiki/compilers-deprecation&quot;&gt;further explanation and workarounds&lt;/a&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;--compilers&lt;/code&gt; 는 Mocha v4.0.0부터 더 이상 사용되지 않습니다. 자세한 &lt;a href=&quot;https://github.com/mochajs/mocha/wiki/compilers-deprecation&quot;&gt;설명 및 해결 방법을&lt;/a&gt; 참조하십시오 .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8d1acfed3d1038f6ce1e87618bd96e6bad976c1b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For more configuration examples, see the &lt;a href=&quot;https://github.com/mochajs/mocha/tree/master/example/config&quot;&gt;&lt;code&gt;example/config&lt;/code&gt;&lt;/a&gt; directory on GitHub.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;더 많은 구성 예제 는 GitHub 의 &lt;a href=&quot;https://github.com/mochajs/mocha/tree/master/example/config&quot;&gt; &lt;code&gt;example/config&lt;/code&gt; &lt;/a&gt; 디렉터리를 참조하세요 .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6c2b28476630b448d3beb4df2ecac6b7ab3b200e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSON&lt;/strong&gt;: Create a &lt;code&gt;.mocharc.json&lt;/code&gt; (or &lt;code&gt;.mocharc.jsonc&lt;/code&gt;) in your project&amp;rsquo;s root directory. Comments &amp;mdash; while not valid JSON &amp;mdash; are allowed in this file, and will be ignored by Mocha.</source>
          <target state="translated">&lt;strong&gt;JSON&lt;/strong&gt; : 프로젝트의 루트 디렉터리에 &lt;code&gt;.mocharc.json&lt;/code&gt; (또는 &lt;code&gt;.mocharc.jsonc&lt;/code&gt; )을 만듭니다 . 주석 (유효하지 않은 JSON은 아니지만)이이 파일에서 허용되며 Mocha에서 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="30bbcc8e6480ab29f9717f22f5490c7bbbbb9a47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JavaScript&lt;/strong&gt;: Create a &lt;code&gt;.mocharc.js&lt;/code&gt; (or &lt;code&gt;.mocharc.cjs&lt;/code&gt; when using &lt;a href=&quot;#nodejs-native-esm-support&quot;&gt;&lt;code&gt;&quot;type&quot;=&quot;module&quot;&lt;/code&gt;&lt;/a&gt; in your &lt;code&gt;package.json&lt;/code&gt;) in your project&amp;rsquo;s root directory, and export an object (&lt;code&gt;module.exports = {/* ... */}&lt;/code&gt;) containing your configuration.</source>
          <target state="translated">&lt;strong&gt;자바 스크립트&lt;/strong&gt; : 크리에이트 &lt;code&gt;.mocharc.js&lt;/code&gt; (또는 &lt;code&gt;.mocharc.cjs&lt;/code&gt; 을 사용하는 경우 &lt;a href=&quot;#nodejs-native-esm-support&quot;&gt; &lt;code&gt;&quot;type&quot;=&quot;module&quot;&lt;/code&gt; &lt;/a&gt; 당신의 &lt;code&gt;package.json&lt;/code&gt; 객체 (프로젝트의 루트 디렉토리에있는)을, 그리고 수출 &lt;code&gt;module.exports = {/* ... */}&lt;/code&gt; )에는 구성이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="ee8b552bf5ae2f79e3e3ef40675d7a798575de65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: Example below was written using Selenium webdriver (which &lt;a href=&quot;https://github.com/SeleniumHQ/selenium/blob/c10e8a955883f004452cdde18096d70738397788/javascript/node/selenium-webdriver/testing/index.js&quot;&gt;overwrites global Mocha hooks&lt;/a&gt; for &lt;code&gt;Promise&lt;/code&gt; chain).</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : 아래 예는 Selenium 웹 드라이버 ( &lt;code&gt;Promise&lt;/code&gt; 체인의 &lt;a href=&quot;https://github.com/SeleniumHQ/selenium/blob/c10e8a955883f004452cdde18096d70738397788/javascript/node/selenium-webdriver/testing/index.js&quot;&gt;전역 Mocha 후크&lt;/a&gt; 를 덮어 씁니다)를 사용하여 작성되었습니다 .</target>
        </trans-unit>
        <trans-unit id="3e36990a636b4f7168d994d2b75a24da6e016203" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTICE&lt;/strong&gt;: &lt;code&gt;--parallel&lt;/code&gt; has certain implications for Mocha&amp;rsquo;s behavior which you must be aware of. Read more about &lt;a href=&quot;#parallel-tests&quot;&gt;running tests in parallel&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;주의 사항&lt;/strong&gt; : &lt;code&gt;--parallel&lt;/code&gt; 은 Mocha의 행동에 대해 알아야 할 특정 의미를 가지고 있습니다. &lt;a href=&quot;#parallel-tests&quot;&gt;병렬 테스트 실행&lt;/a&gt; 에 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="de16085c47655e171af51180d7ee56cc5015980b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The HTML reporter is not intended for use on the command-line.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;HTML 리포터는 명령 행에서 사용하도록 설계되지 않았습니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b4d787786cea2c89cdb8ea83b43598a1ce048bd5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The above example does not work in parallel mode.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;위의 예는 병렬 모드에서 작동하지 않습니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="09ccb391784620c8fd0fcdfe67032a0428113d16" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The easiest way to &amp;ldquo;fix&amp;rdquo; the issue is to pass &lt;code&gt;--exit&lt;/code&gt; to the Mocha process.&lt;/strong&gt; It &lt;em&gt;can&lt;/em&gt; be time-consuming to debug &amp;mdash; because it&amp;rsquo;s not always obvious where the problem is &amp;mdash; but it &lt;em&gt;is&lt;/em&gt; recommended to do so.</source>
          <target state="translated">&lt;strong&gt;문제를 &quot;수정&quot;하는 가장 쉬운 방법은 &lt;code&gt;--exit&lt;/code&gt; 를 Mocha 프로세스 로 전달 하는 것입니다. &lt;/strong&gt;이 &lt;em&gt;수&lt;/em&gt; 시간이 소요되는 디버깅 할 수 - 그것은 어디에 문제가 항상 명확하지 때문에 -하지만이 &lt;em&gt;되어&lt;/em&gt; 그렇게하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="892de634332bd473af3b1289e44a4321bab50f85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The easiest way to &amp;ldquo;fix&amp;rdquo; the issue is to simply pass &lt;code&gt;--exit&lt;/code&gt; to the Mocha process.&lt;/strong&gt; It &lt;em&gt;can&lt;/em&gt; be time-consuming to debug&amp;ndash;because it&amp;rsquo;s not always obvious where the problem is&amp;ndash;but it &lt;em&gt;is&lt;/em&gt; recommended to do so.</source>
          <target state="translated">&lt;strong&gt;문제를&amp;ldquo;수정&amp;rdquo;하는 가장 쉬운 방법 은 Mocha 프로세스로 &lt;code&gt;--exit&lt;/code&gt; 를 전달 하는 것입니다. &lt;/strong&gt;그것은 &lt;em&gt;수있는&lt;/em&gt; 문제가 어디에 항상 명확하지의 시간이 소요되는 일 수 있기 때문에 디버그입니다 -하지만이 &lt;em&gt;되어&lt;/em&gt; 그렇게하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="0081b57d0f66070e1ff5b25411ae7bc7695c6209" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;YAML&lt;/strong&gt;: Create a &lt;code&gt;.mocharc.yaml&lt;/code&gt; (or &lt;code&gt;.mocharc.yml&lt;/code&gt;) in your project&amp;rsquo;s root directory.</source>
          <target state="translated">&lt;strong&gt;YAML&lt;/strong&gt; : 프로젝트의 루트 디렉터리에 &lt;code&gt;.mocharc.yaml&lt;/code&gt; (또는 &lt;code&gt;.mocharc.yml&lt;/code&gt; )을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="d274df27915f30e605b868996a96160bc57d5217" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You cannot use &lt;code&gt;--require&lt;/code&gt; to set hooks&lt;/strong&gt;. If you want to set hooks to run, e.g., before each test, use a &lt;a href=&quot;#root-hook-plugins&quot;&gt;Root Hook Plugin&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;--require&lt;/code&gt; 를 사용 하여 후크를 설정할 수 없습니다&lt;/strong&gt; . 예를 들어 각 테스트 전에 실행할 후크를 설정하려면 &lt;a href=&quot;#root-hook-plugins&quot;&gt;Root Hook Plugin을 사용하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ff01854d515caf3501a97141176d953734be59f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You cannot use &lt;code&gt;it.only&lt;/code&gt;, &lt;code&gt;describe.only&lt;/code&gt;, &lt;code&gt;this.only()&lt;/code&gt;, etc., in parallel mode.&lt;/strong&gt; This is for the same reason as the incompatible reporters noted above: in parallel mode, Mocha does not load all files and suites into memory before running tests.</source>
          <target state="translated">&lt;strong&gt;병렬 모드 에서는 &lt;code&gt;it.only&lt;/code&gt; , &lt;code&gt;describe.only&lt;/code&gt; , &lt;code&gt;this.only()&lt;/code&gt; 등을 사용할 수 없습니다 . &lt;/strong&gt;이는 위에서 언급 한 호환되지 않는 리포터와 같은 이유입니다. 병렬 모드에서 Mocha는 테스트를 실행하기 전에 모든 파일과 제품군을 메모리에로드하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="48351febaef71a333438805c1ee1bd32335e05f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;package.json&lt;/strong&gt;: Create a &lt;code&gt;mocha&lt;/code&gt; property in your project&amp;rsquo;s &lt;code&gt;package.json&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;package.json&lt;/strong&gt; : 프로젝트의 &lt;code&gt;package.json&lt;/code&gt; 에 &lt;code&gt;mocha&lt;/code&gt; 속성을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="c9400ca26eb88619b0c81843aceb52bcfe9c044c" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;Root Hook Plugin&lt;/em&gt; is a JavaScript file loaded via &lt;a href=&quot;#-require-module-r-module&quot;&gt;&lt;code&gt;--require&lt;/code&gt;&lt;/a&gt; which &amp;ldquo;registers&amp;rdquo; one or more root hooks to be used across all test files.</source>
          <target state="translated">&lt;em&gt;루트 후크 플러그인은&lt;/em&gt; 자바 스크립트 파일을 통해로드입니다 &lt;a href=&quot;#-require-module-r-module&quot;&gt; &lt;code&gt;--require&lt;/code&gt; &lt;/a&gt; 모든 테스트 파일에 걸쳐 사용할 수있는 &quot;등록&quot;하나 개 이상의 루트 후크.</target>
        </trans-unit>
        <trans-unit id="86eb6d90aa0e5a38f3596d7ee6a92c8492a2f1f6" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;root hook&lt;/em&gt; is a hook in a test file which is &lt;em&gt;not defined&lt;/em&gt; within a suite. An example using the &lt;code&gt;bdd&lt;/code&gt; interface:</source>
          <target state="translated">&lt;em&gt;루트 후크&lt;/em&gt; 된 테스트 파일에 훅입니다 &lt;em&gt;정의되지&lt;/em&gt; 제품군 내에서. &lt;code&gt;bdd&lt;/code&gt; 인터페이스 를 사용하는 예 :</target>
        </trans-unit>
        <trans-unit id="98103f8bc77085f5bf66cced33f31631383927ce" translate="yes" xml:space="preserve">
          <source>A Root Hook Plugin file is a script which exports (via &lt;code&gt;module.exports&lt;/code&gt;) a &lt;code&gt;mochaHooks&lt;/code&gt; property. It is loaded via &lt;code&gt;--require &amp;lt;file&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Root Hook Plugin 파일은 &lt;code&gt;mochaHooks&lt;/code&gt; 속성 을 ( &lt;code&gt;module.exports&lt;/code&gt; 를 통해 ) 내보내는 스크립트입니다 . &lt;code&gt;--require &amp;lt;file&amp;gt;&lt;/code&gt; 을 통해로드됩니다 .</target>
        </trans-unit>
        <trans-unit id="a0f13d884830b5fdf5116a0ae9b36c1b10716a99" translate="yes" xml:space="preserve">
          <source>A brief outline on the order Mocha&amp;rsquo;s components are executed. Worth noting that all hooks, &lt;code&gt;describe&lt;/code&gt; and &lt;code&gt;it&lt;/code&gt; callbacks are run in the order they are defined (i.e. found in the file).</source>
          <target state="translated">주문 Mocha의 구성 요소에 대한 간략한 개요가 실행됩니다. 가치가 모든 고리가 있다는 지적 &lt;code&gt;describe&lt;/code&gt; 하고 &lt;code&gt;it&lt;/code&gt; 콜백들이 정의 된 순서대로 실행된다 (즉, 파일에 있음).</target>
        </trans-unit>
        <trans-unit id="f5318648871fbb71f62dbbd442692ae6fd0a4885" translate="yes" xml:space="preserve">
          <source>A hook defined at the top scope of a test file (outside of a suite) is a &lt;em&gt;root hook&lt;/em&gt;.</source>
          <target state="translated">테스트 파일의 최상위 범위 (스위트 외부)에 정의 된 후크는 &lt;em&gt;루트 후크&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0dddd338ac80883aa9a63cca03ecd57465127f01" translate="yes" xml:space="preserve">
          <source>A typical setup might look something like the following, where we call &lt;code&gt;mocha.setup('bdd')&lt;/code&gt; to use the &lt;strong&gt;BDD&lt;/strong&gt; interface before loading the test scripts, running them &lt;code&gt;onload&lt;/code&gt; with &lt;code&gt;mocha.run()&lt;/code&gt;.</source>
          <target state="translated">일반적인 설정은 다음과 같을 것입니다 . 테스트 스크립트를로드하기 전에 &lt;code&gt;mocha.setup('bdd')&lt;/code&gt; 를 호출 하여 &lt;strong&gt;BDD&lt;/strong&gt; 인터페이스 를 사용하여 &lt;code&gt;mocha.run()&lt;/code&gt; &lt;code&gt;onload&lt;/code&gt; 를 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="4b6d91aef58476d13a263b2403a28eba9b669a8e" translate="yes" xml:space="preserve">
          <source>About &lt;code&gt;node&lt;/code&gt; Flags</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 플래그 정보</target>
        </trans-unit>
        <trans-unit id="390d8b7936094f003575622b17c10a13f1682936" translate="yes" xml:space="preserve">
          <source>About Babel</source>
          <target state="translated">바벨 소개</target>
        </trans-unit>
        <trans-unit id="ed285ea3760d841f00fd05d996667d6c3a9f28df" translate="yes" xml:space="preserve">
          <source>About Option Types</source>
          <target state="translated">옵션 유형 정보</target>
        </trans-unit>
        <trans-unit id="d2ff2301917c0555affa0ef1c3423a956abc5ceb" translate="yes" xml:space="preserve">
          <source>About V8 Flags</source>
          <target state="translated">V8 플래그 정보</target>
        </trans-unit>
        <trans-unit id="ce20799f82cbdcfea600bef25db5ac2131c4d651" translate="yes" xml:space="preserve">
          <source>Accepts a comma-delimited list of accepted global variable names. For example, suppose your app deliberately exposes a global named &lt;code&gt;app&lt;/code&gt; and &lt;code&gt;YUI&lt;/code&gt;, you may want to add &lt;code&gt;--globals app,YUI&lt;/code&gt;. It also accepts wildcards. You could do &lt;code&gt;--globals '*bar'&lt;/code&gt; and it would match &lt;code&gt;foobar&lt;/code&gt;, &lt;code&gt;barbar&lt;/code&gt;, etc. You can also simply pass in &lt;code&gt;'*'&lt;/code&gt; to ignore all globals.</source>
          <target state="translated">허용되는 전역 변수 이름의 쉼표로 구분 된 목록을 승인합니다. 예를 들어, 앱이 의도적으로 전역 명명 된 &lt;code&gt;app&lt;/code&gt; 및 &lt;code&gt;YUI&lt;/code&gt; 를 노출한다고 가정 하면 &lt;code&gt;--globals app,YUI&lt;/code&gt; 를 추가 할 수 있습니다 . 와일드 카드도 허용됩니다. 당신은 할 수 &lt;code&gt;--globals '*bar'&lt;/code&gt; 과는 일치합니다 &lt;code&gt;foobar&lt;/code&gt; , &lt;code&gt;barbar&lt;/code&gt; 또한 단지에 전달할 수있는 등, &lt;code&gt;'*'&lt;/code&gt; 모든 전역을 무시.</target>
        </trans-unit>
        <trans-unit id="f6eb19d71e1ae75e095ac9db79aab38637aa620f" translate="yes" xml:space="preserve">
          <source>Add a file you want included first in a test suite. This is useful if you have some generic setup code that must be included within the test suite. The file passed is not affected by any other flags (&lt;code&gt;--recursive&lt;/code&gt; or &lt;code&gt;--sort&lt;/code&gt; have no effect). Accepts multiple &lt;code&gt;--file&lt;/code&gt; flags to include multiple files, the order in which the flags are given are the order in which the files are included in the test suite. Can also be used in &lt;code&gt;mocha.opts&lt;/code&gt;.</source>
          <target state="translated">테스트 스위트에 먼저 포함시키려는 파일을 추가하십시오. 테스트 스위트에 포함되어야하는 일반 설정 코드가있는 경우 유용합니다. 전달 된 파일은 다른 플래그의 영향을받지 않습니다 ( &lt;code&gt;--recursive&lt;/code&gt; 또는 &lt;code&gt;--sort&lt;/code&gt; 는 영향을 미치지 않음). 여러 파일을 포함하기 위해 여러 &lt;code&gt;--file&lt;/code&gt; 플래그를 허용 하며, 플래그가 지정된 순서는 파일이 테스트 스위트에 포함되는 순서입니다. &lt;code&gt;mocha.opts&lt;/code&gt; 에서도 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0d2f09268f0c41b32392346459a011f44d861320" translate="yes" xml:space="preserve">
          <source>Again, use &lt;code&gt;this.timeout(0)&lt;/code&gt; to disable the timeout for a hook.</source>
          <target state="translated">다시, &lt;code&gt;this.timeout(0)&lt;/code&gt; 을 사용하여 후크에 대한 시간 종료를 사용 불가능하게하십시오.</target>
        </trans-unit>
        <trans-unit id="1fc110538336ab17e7e3679470c90959037d7b49" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;Doc&lt;/code&gt;, &lt;code&gt;doc&lt;/code&gt;</source>
          <target state="translated">별칭 : &lt;code&gt;Doc&lt;/code&gt; , &lt;code&gt;doc&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d8d0e6c97f7a4c7b94378d0eab1403b4043c7228" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;Dot&lt;/code&gt;, &lt;code&gt;dot&lt;/code&gt;</source>
          <target state="translated">별칭 : &lt;code&gt;Dot&lt;/code&gt; , &lt;code&gt;dot&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="feacf361da7ac872c852b31376b5617d385c4638" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;HTML&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt;</source>
          <target state="translated">별칭 : &lt;code&gt;HTML&lt;/code&gt; , &lt;code&gt;html&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="69f0241f7f1adbb5561d58a99334cb7ac4c5e013" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;JSON&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;</source>
          <target state="translated">별칭 : &lt;code&gt;JSON&lt;/code&gt; , &lt;code&gt;json&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5804a5a5d7c3e96d4fcef6ecddae1426f4834fff" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;JSONStream&lt;/code&gt;, &lt;code&gt;json-stream&lt;/code&gt;</source>
          <target state="translated">별칭 : &lt;code&gt;JSONStream&lt;/code&gt; , &lt;code&gt;json-stream&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1f6ef32910073c4cda18431add27f2c67378c8bd" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;Landing&lt;/code&gt;, &lt;code&gt;landing&lt;/code&gt;</source>
          <target state="translated">별칭 : &lt;code&gt;Landing&lt;/code&gt; , &lt;code&gt;landing&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="79fd6a7b73e9478e056c332b6ed1519885a1a1e1" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;</source>
          <target state="translated">별칭 : &lt;code&gt;List&lt;/code&gt; , &lt;code&gt;list&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="16d8d672471b8d7618efb7aa6e62e6076456030d" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;Markdown&lt;/code&gt;, &lt;code&gt;markdown&lt;/code&gt;</source>
          <target state="translated">별칭 : &lt;code&gt;Markdown&lt;/code&gt; , &lt;code&gt;markdown&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b6883098804170b794123bb1b760f596be6ab98c" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;Min&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;</source>
          <target state="translated">별칭 : &lt;code&gt;Min&lt;/code&gt; , &lt;code&gt;min&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a47d26c2c288aee58c425e6d430c7bed0a0c02d3" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;Nyan&lt;/code&gt;, &lt;code&gt;nyan&lt;/code&gt;</source>
          <target state="translated">별칭 : &lt;code&gt;Nyan&lt;/code&gt; , &lt;code&gt;nyan&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8c459cac28b698713a9aad39041b21260c0b8820" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;Progress&lt;/code&gt;, &lt;code&gt;progress&lt;/code&gt;</source>
          <target state="translated">별칭 : &lt;code&gt;Progress&lt;/code&gt; , &lt;code&gt;progress&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7be2c48daf7419220ef4e3052e4d131665dee53f" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;Spec&lt;/code&gt;, &lt;code&gt;spec&lt;/code&gt;</source>
          <target state="translated">별칭 : &lt;code&gt;Spec&lt;/code&gt; , &lt;code&gt;spec&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f0715556930bfe7f4612a11ac01616c25f0e966" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;TAP&lt;/code&gt;, &lt;code&gt;tap&lt;/code&gt;</source>
          <target state="translated">별칭 : &lt;code&gt;TAP&lt;/code&gt; , &lt;code&gt;tap&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a7108ab11bd6bb03a9e3cdd6e2ceb8e9483d36fe" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;XUnit&lt;/code&gt;, &lt;code&gt;xunit&lt;/code&gt;</source>
          <target state="translated">별칭 : &lt;code&gt;XUnit&lt;/code&gt; , &lt;code&gt;xunit&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f9a899749483e1ca649a0ff17ee384c65369f5a2" translate="yes" xml:space="preserve">
          <source>Aliases are valid names, e.g., &lt;code&gt;R&lt;/code&gt; instead of &lt;code&gt;reporter&lt;/code&gt;.</source>
          <target state="translated">별칭은 유효한 이름입니다 (예 : &lt;code&gt;reporter&lt;/code&gt; 대신 &lt;code&gt;R&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="289af3fcb7614daa438cf729070ffef737957648" translate="yes" xml:space="preserve">
          <source>All hooks (&lt;code&gt;before()&lt;/code&gt;, &lt;code&gt;after()&lt;/code&gt;, &lt;code&gt;beforeEach()&lt;/code&gt;, &lt;code&gt;afterEach()&lt;/code&gt;) may be sync or async as well, behaving much like a regular test-case. For example, you may wish to populate database with dummy content before each test:</source>
          <target state="translated">모든 후크 ( &lt;code&gt;before()&lt;/code&gt; , &lt;code&gt;after()&lt;/code&gt; , &lt;code&gt;beforeEach()&lt;/code&gt; , &lt;code&gt;afterEach()&lt;/code&gt; )는 일반 테스트 케이스와 매우 유사하게 동기화되거나 비 동기화 될 수 있습니다. 예를 들어, 각 테스트 전에 데이터베이스를 더미 컨텐츠로 채울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a0600916547646b30608339ed0566a7a7311cb26" translate="yes" xml:space="preserve">
          <source>All of the previous examples were written using the &lt;strong&gt;BDD&lt;/strong&gt; interface.</source>
          <target state="translated">이전의 모든 예제는 &lt;strong&gt;BDD&lt;/strong&gt; 인터페이스를 사용하여 작성되었습니다 .</target>
        </trans-unit>
        <trans-unit id="8293e55bd5c2aeba3f576c3c5d6cb7b1087912a7" translate="yes" xml:space="preserve">
          <source>All of these options are mutually exclusive.</source>
          <target state="translated">이러한 옵션은 모두 상호 배타적입니다.</target>
        </trans-unit>
        <trans-unit id="aaf290d14e20213213056d325e890a7f0fe5f769" translate="yes" xml:space="preserve">
          <source>All test files found are put into a queue (they are &lt;em&gt;not&lt;/em&gt; loaded by the main process)</source>
          <target state="translated">발견 된 모든 테스트 파일은 대기열에 저장됩니다 ( 기본 프로세스에서로드 &lt;em&gt;되지 않음&lt;/em&gt; ).</target>
        </trans-unit>
        <trans-unit id="e224354b6333bc24445ee142d000195c4dc0a2f0" translate="yes" xml:space="preserve">
          <source>Allows use of third-party reporters. For example, &lt;a href=&quot;https://npm.im/mocha-lcov-reporter&quot;&gt;mocha-lcov-reporter&lt;/a&gt; may be used with &lt;code&gt;--reporter mocha-lcov-reporter&lt;/code&gt; after it has been installed.</source>
          <target state="translated">타사 리포터를 사용할 수 있습니다. 예를 들어 &lt;a href=&quot;https://npm.im/mocha-lcov-reporter&quot;&gt;mocha-lcov-reporter&lt;/a&gt; 는 설치된 후 &lt;code&gt;--reporter mocha-lcov-reporter&lt;/code&gt; 와 함께 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6633fa7c33d41f9538bafc31713f5cc20e7e52c5" translate="yes" xml:space="preserve">
          <source>Alternately, instead of using the &lt;code&gt;done()&lt;/code&gt; callback, you may return a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt;. This is useful if the APIs you are testing return promises instead of taking callbacks:</source>
          <target state="translated">또는 &lt;code&gt;done()&lt;/code&gt; 콜백 을 사용하는 대신 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise를&lt;/a&gt; 반환 할 수 있습니다 . 이는 테스트중인 API가 콜백을 수행하는 대신 약속을 반환하는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="ba0dcfb94770950968dfd69b4e2b7a1c491c8f1a" translate="yes" xml:space="preserve">
          <source>Alternatively, use the &lt;code&gt;done()&lt;/code&gt; callback directly (which will handle an error argument, if it exists):</source>
          <target state="translated">또는 &lt;code&gt;done()&lt;/code&gt; 콜백을 직접 사용합니다 (있는 경우 오류 인수를 처리합니다).</target>
        </trans-unit>
        <trans-unit id="a78bf99b213932b89a6e501b7ebe30749a21c965" translate="yes" xml:space="preserve">
          <source>Any &amp;ldquo;after all&amp;rdquo; hooks (for the &lt;em&gt;root&lt;/em&gt; suite, this only happens once; see &lt;a href=&quot;#root-hook-plugins&quot;&gt;root hook plugins&lt;/a&gt;)</source>
          <target state="translated">&quot;결국&quot;후크 ( &lt;em&gt;루트&lt;/em&gt; 스위트의 경우 한 번만 발생합니다. &lt;a href=&quot;#root-hook-plugins&quot;&gt;루트 후크 플러그인&lt;/a&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="eed86c82ad7af53fa31b2095ee2ca48396f5a53f" translate="yes" xml:space="preserve">
          <source>Any &amp;ldquo;after each&amp;rdquo; hooks</source>
          <target state="translated">&quot;후에&quot;후크</target>
        </trans-unit>
        <trans-unit id="6725da6a83ab1a0cc58427dc253916e613237321" translate="yes" xml:space="preserve">
          <source>Any &amp;ldquo;array&amp;rdquo;-type option (see &lt;code&gt;mocha --help&lt;/code&gt; for a list) can be a single string value.</source>
          <target state="translated">&quot;배열&quot;유형 옵션 ( 목록 은 &lt;code&gt;mocha --help&lt;/code&gt; 참조 )은 단일 문자열 값이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8214660c900e006d99e3bc02af4823577871a568" translate="yes" xml:space="preserve">
          <source>Any &amp;ldquo;before all&amp;rdquo; hooks (for the &lt;em&gt;root&lt;/em&gt; suite, this only happens once; see &lt;a href=&quot;#root-hook-plugins&quot;&gt;root hook plugins&lt;/a&gt;)</source>
          <target state="translated">&quot;before all&quot;후크 ( &lt;em&gt;루트&lt;/em&gt; 스위트의 경우 한 번만 발생합니다. &lt;a href=&quot;#root-hook-plugins&quot;&gt;루트 후크 플러그인&lt;/a&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="6372cbffca45104e3ce931091ce164c9d8b7f53d" translate="yes" xml:space="preserve">
          <source>Any &amp;ldquo;before each&amp;rdquo; hooks</source>
          <target state="translated">&quot;before each&quot;후크</target>
        </trans-unit>
        <trans-unit id="ff4aa248777fd0eb4a5711d0260cbc3131e10792" translate="yes" xml:space="preserve">
          <source>Any &amp;ldquo;boolean&amp;rdquo; flag (which doesn&amp;rsquo;t require a parameter, such as &lt;code&gt;--bail&lt;/code&gt;), can be specified using a boolean value, e.g.: &lt;code&gt;&quot;bail&quot;: true&lt;/code&gt;.</source>
          <target state="translated">&quot;부울&quot;플래그 ( &lt;code&gt;--bail&lt;/code&gt; 과 같은 매개 변수가 필요하지 않음 )는 부울 값을 사용하여 지정할 수 있습니다 (예 : &lt;code&gt;&quot;bail&quot;: true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="03f510bb6cb4dea10971d9bb6c0260d30a7de793" translate="yes" xml:space="preserve">
          <source>Any hook can be invoked with an optional description, making it easier to pinpoint errors in your tests. If a hook is given a named function, that name will be used if no description is supplied.</source>
          <target state="translated">선택적 설명을 사용하여 후크를 호출 할 수 있으므로 테스트에서 오류를 쉽게 찾아 낼 수 있습니다. 후크에 명명 된 함수가 제공되면 설명이 제공되지 않으면 해당 이름이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b40fac2aebc93cf70055e28fd897547a1baad77f" translate="yes" xml:space="preserve">
          <source>Are &lt;em&gt;guaranteed&lt;/em&gt; to execute &lt;em&gt;once and only once&lt;/em&gt;</source>
          <target state="translated">있습니까 &lt;em&gt;보장&lt;/em&gt; 실행 &lt;em&gt;한 번만&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6f2a2e770f2867009e41335ccc97fdca8852d778" translate="yes" xml:space="preserve">
          <source>Arguments specified on command-line</source>
          <target state="translated">명령 줄에 지정된 인수</target>
        </trans-unit>
        <trans-unit id="2eff12655bfd37e8aba34fc4ce9e8a7b43bbf939" translate="yes" xml:space="preserve">
          <source>Arrow Functions</source>
          <target state="translated">화살표 기능</target>
        </trans-unit>
        <trans-unit id="ada51e8076486dad6b8c2ba5b748240b17f5917c" translate="yes" xml:space="preserve">
          <source>As explained &lt;a href=&quot;#global-fixtures&quot;&gt;above&lt;/a&gt;&amp;ndash;and &lt;a href=&quot;#when-not-to-use-global-fixtures&quot;&gt;below&lt;/a&gt;&amp;ndash;test files &lt;em&gt;do not&lt;/em&gt; have access to this context object.</source>
          <target state="translated">설명한 바와 같이 &lt;a href=&quot;#global-fixtures&quot;&gt;위&lt;/a&gt; - 그리고 &lt;a href=&quot;#when-not-to-use-global-fixtures&quot;&gt;아래&lt;/a&gt; -test 파일이 &lt;em&gt;없는&lt;/em&gt; 이 컨텍스트 개체에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5590dab7ed5781aa923c09bc4d648e974db5ceae" translate="yes" xml:space="preserve">
          <source>As of v8.0.0, &lt;a href=&quot;#root-hook-plugins&quot;&gt;Root Hook Plugins&lt;/a&gt; are the preferred mechanism for setting root hooks.</source>
          <target state="translated">v8.0.0부터 &lt;a href=&quot;#root-hook-plugins&quot;&gt;루트 후크 플러그인&lt;/a&gt; 은 루트 후크 설정에 선호되는 메커니즘입니다.</target>
        </trans-unit>
        <trans-unit id="a4d36874b348b8699dff85e004d671eb589f0243" translate="yes" xml:space="preserve">
          <source>As of v8.0.0, Mocha requires Node.js v10.12.0 or newer.</source>
          <target state="translated">v8.0.0부터 Mocha에는 Node.js v10.12.0 이상이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="51457a13062e8124a56ca7ce98036b271ae4bbac" translate="yes" xml:space="preserve">
          <source>As of v8.0.0, Mocha supports &lt;code&gt;--require&lt;/code&gt; for &lt;a href=&quot;#nodejs-native-esm-support&quot;&gt;NodeJS native ESM&lt;/a&gt;. There is no separate &lt;code&gt;--import&lt;/code&gt; flag.</source>
          <target state="translated">v8.0.0로, 모카 지원은 &lt;code&gt;--require&lt;/code&gt; 에 대한 &lt;a href=&quot;#nodejs-native-esm-support&quot;&gt;NodeJS 기본 ESM&lt;/a&gt; . 별도의 &lt;code&gt;--import&lt;/code&gt; 플래그 가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="c6d4377b954698348a8287f66cabee7d20d09375" translate="yes" xml:space="preserve">
          <source>As with other hooks, &lt;code&gt;this&lt;/code&gt; refers to to the current context object:</source>
          <target state="translated">다른 후크와 마찬가지로 &lt;code&gt;this&lt;/code&gt; 현재 컨텍스트 객체를 참조합니다.</target>
        </trans-unit>
        <trans-unit id="d852d5aa2d2573a9cbd026c7ebaabec9dcb73d2f" translate="yes" xml:space="preserve">
          <source>Asserting the built-in or custom interface is valid</source>
          <target state="translated">내장 또는 사용자 정의 인터페이스가 유효 함을 확인</target>
        </trans-unit>
        <trans-unit id="830b8d43acead3d18097f6c19c3aa10f98698789" translate="yes" xml:space="preserve">
          <source>Assertion libraries that augment built-ins or global scope (such as &lt;a href=&quot;https://npm.im/should&quot;&gt;should.js&lt;/a&gt;)</source>
          <target state="translated">내장 또는 전역 범위를 확장하는 어설 션 라이브러리 (예 : &lt;a href=&quot;https://npm.im/should&quot;&gt;should.js&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="49bf55dc112eb3597726ba8ecf785a4fae4cbce0" translate="yes" xml:space="preserve">
          <source>Assertions</source>
          <target state="translated">Assertions</target>
        </trans-unit>
        <trans-unit id="9dafd7cfbbe492b64e8825fd60794e30fb996eaa" translate="yes" xml:space="preserve">
          <source>Asynchronous Code</source>
          <target state="translated">비동기 코드</target>
        </trans-unit>
        <trans-unit id="1dc7d645ff307166377bb1ae5a2ceb0ed4f4a597" translate="yes" xml:space="preserve">
          <source>Asynchronous Hooks</source>
          <target state="translated">비동기 후크</target>
        </trans-unit>
        <trans-unit id="74a9fd85ec54760363c73a24c54d69d2f7764041" translate="yes" xml:space="preserve">
          <source>At first glance, &lt;em&gt;global fixtures&lt;/em&gt; seem similar to &lt;a href=&quot;#root-hook-plugins&quot;&gt;root hooks&lt;/a&gt;. However, unlike root hooks, global fixtures:</source>
          <target state="translated">언뜻보기에 &lt;em&gt;글로벌 픽스쳐&lt;/em&gt; 는 &lt;a href=&quot;#root-hook-plugins&quot;&gt;루트 훅&lt;/a&gt; 과 비슷해 보입니다 . 그러나 루트 후크와 달리 전역 고정 장치 :</target>
        </trans-unit>
        <trans-unit id="b12e6523e3bdeed15787bb7262b9739aba01792d" translate="yes" xml:space="preserve">
          <source>Available Root Hooks</source>
          <target state="translated">사용 가능한 루트 후크</target>
        </trans-unit>
        <trans-unit id="3d687be194881c2ce3d30436ff5ffe08a53a7c04" translate="yes" xml:space="preserve">
          <source>Available root hooks and their behavior:</source>
          <target state="translated">사용 가능한 루트 후크 및 동작 :</target>
        </trans-unit>
        <trans-unit id="38b5d0dd2a1d99cba157a215ae014edf10488b48" translate="yes" xml:space="preserve">
          <source>BDD</source>
          <target state="translated">BDD</target>
        </trans-unit>
        <trans-unit id="93c1dca080e0df99b78d4c9a4de497925b17b740" translate="yes" xml:space="preserve">
          <source>Back in the terminal:</source>
          <target state="translated">터미널로 돌아 가기 :</target>
        </trans-unit>
        <trans-unit id="76932969916b9530f79f906d201312b3c98aa939" translate="yes" xml:space="preserve">
          <source>Back on the server, Mocha will attempt to load &lt;code&gt;&quot;./test/mocha.opts&quot;&lt;/code&gt; as a Run-Control file of sorts.</source>
          <target state="translated">서버로 돌아가서 Mocha는 &lt;code&gt;&quot;./test/mocha.opts&quot;&lt;/code&gt; 를 일종의 실행 제어 파일로 로드하려고 시도합니다 .</target>
        </trans-unit>
        <trans-unit id="6a9c9bab317fe02e67112c150ce937d254a60e32" translate="yes" xml:space="preserve">
          <source>Be mindful not to commit usages of &lt;code&gt;.only()&lt;/code&gt; to version control, unless you really mean it! To do so one can run mocha with the option &lt;code&gt;--forbid-only&lt;/code&gt; in the continuous integration test command (or in a git precommit hook).</source>
          <target state="translated">&lt;code&gt;.only()&lt;/code&gt; 사용법 을 실제로 의미하지 않는 한 버전 제어 에 커밋하지 마십시오 ! 이를 위해서는 연속 통합 테스트 명령 (또는 git precommit hook)에서 &lt;code&gt;--forbid-only&lt;/code&gt; 옵션을 사용하여 mocha를 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6b44436a63ea4238ba705aba6634a71e9a3b6ed4" translate="yes" xml:space="preserve">
          <source>Because of this, the following options, which depend on order, &lt;em&gt;cannot be used&lt;/em&gt; in parallel mode:</source>
          <target state="translated">이 때문에 순서에 따라 달라지는 다음 옵션 은 병렬 모드에서 &lt;em&gt;사용할 수 없습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="035742046edc6a28a1cf9823f15f50ac906b0794" translate="yes" xml:space="preserve">
          <source>Because this test &lt;em&gt;does nothing&lt;/em&gt;, it will be reported as &lt;em&gt;passing&lt;/em&gt;.</source>
          <target state="translated">이 테스트 &lt;em&gt;는 아무 것도&lt;/em&gt; 수행 &lt;em&gt;하지 않으므로 &lt;/em&gt;&lt;em&gt;통과 한&lt;/em&gt; 것으로보고됩니다 .</target>
        </trans-unit>
        <trans-unit id="b9a22b5b44d7a2e3bf14c0874ea69cef878081f7" translate="yes" xml:space="preserve">
          <source>Before Mocha v3.0.0, &lt;code&gt;this.skip()&lt;/code&gt; was not supported in asynchronous tests and hooks.</source>
          <target state="translated">Mocha v3.0.0 이전에는 &lt;code&gt;this.skip()&lt;/code&gt; 가 비동기 테스트 및 후크에서 지원되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="dd97b1d45a21d2dca8f76533e8120a4564b26f0f" translate="yes" xml:space="preserve">
          <source>Beginning-of-line comment support is available; any line &lt;em&gt;starting&lt;/em&gt; with a hash (#) symbol will be considered a comment. Blank lines may also be used. Any other line will be treated as a command-line argument (along with any associated option value) to be used as a default setting. Settings should be specified one per line.</source>
          <target state="translated">라인 시작 주석 지원이 가능합니다. 해시 (#) 기호로 &lt;em&gt;시작&lt;/em&gt; 하는 모든 줄 은 주석으로 간주됩니다. 빈 줄을 사용할 수도 있습니다. 다른 행은 기본 설정으로 사용되는 명령 줄 인수 (관련된 옵션 값과 함께)로 취급됩니다. 설정은 한 줄에 하나씩 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="1fe5f18a82f2f33248c686dc8605a6041ecad6f9" translate="yes" xml:space="preserve">
          <source>Browser Configuration</source>
          <target state="translated">브라우저 구성</target>
        </trans-unit>
        <trans-unit id="ead90b7272a3c77f3b48d4a67364396a14959dd6" translate="yes" xml:space="preserve">
          <source>Browser Mocha supports many, but not all &lt;a href=&quot;#command-line-usage&quot;&gt;cli options&lt;/a&gt;. To use a &lt;a href=&quot;#command-line-usage&quot;&gt;cli option&lt;/a&gt; that contains a &amp;ldquo;-&amp;rdquo;, please convert the option to camel-case, (eg. &lt;code&gt;check-leaks&lt;/code&gt; to &lt;code&gt;checkLeaks&lt;/code&gt;).</source>
          <target state="translated">브라우저 Mocha는 모든 &lt;a href=&quot;#command-line-usage&quot;&gt;CLI 옵션을&lt;/a&gt; 지원하지는 않지만 많은 것을 지원합니다 . &quot;-&quot;가 포함 된 &lt;a href=&quot;#command-line-usage&quot;&gt;cli 옵션&lt;/a&gt; 을 사용하려면 옵션을 camel-case로 변환하십시오 (예 : &lt;code&gt;check-leaks&lt;/code&gt; 에서 &lt;code&gt;checkLeaks&lt;/code&gt; 로 ).</target>
        </trans-unit>
        <trans-unit id="45a9e14e76383ee36cde87a8d614fcc0078e9d29" translate="yes" xml:space="preserve">
          <source>Browser-based notifications</source>
          <target state="translated">브라우저 기반 알림</target>
        </trans-unit>
        <trans-unit id="7264b421a309869abd486d52587fd493e2717efb" translate="yes" xml:space="preserve">
          <source>Browser-specific Option(s)</source>
          <target state="translated">브라우저 별 옵션</target>
        </trans-unit>
        <trans-unit id="ee269b8b06248dcfd3dcba5fa33bdeb97ed38dc6" translate="yes" xml:space="preserve">
          <source>Browser-specific methods</source>
          <target state="translated">브라우저 별 방법</target>
        </trans-unit>
        <trans-unit id="4334130e97520ac7097525a48ac1e304d360c7cb" translate="yes" xml:space="preserve">
          <source>But &lt;em&gt;tests will have precedence&lt;/em&gt;:</source>
          <target state="translated">그러나 &lt;em&gt;테스트는 우선 순위를 갖습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="f78bc375258d8a66673bc276a2f8f9c1b3143b18" translate="yes" xml:space="preserve">
          <source>By adding an argument (usually named &lt;code&gt;done&lt;/code&gt;) to &lt;code&gt;it()&lt;/code&gt; to a test callback, Mocha will know that it should wait for this function to be called to complete the test. This callback accepts both an &lt;code&gt;Error&lt;/code&gt; instance (or subclass thereof) &lt;em&gt;or&lt;/em&gt; a falsy value; anything else is invalid usage and throws an error (usually causing a failed test).</source>
          <target state="translated">인수 (일반적으로 &lt;code&gt;done&lt;/code&gt; 으로 명명 됨 )를 &lt;code&gt;it()&lt;/code&gt; 에 테스트 콜백에 추가함으로써 Mocha는 테스트를 완료하기 위해이 함수가 호출 될 때까지 기다려야 함을 알게됩니다. 이 콜백은 &lt;code&gt;Error&lt;/code&gt; 인스턴스 (또는 그 하위 클래스) &lt;em&gt;또는&lt;/em&gt; 잘못된 값을 모두받습니다 . 다른 것은 잘못된 사용이며 오류가 발생합니다 (일반적으로 테스트 실패를 유발 함).</target>
        </trans-unit>
        <trans-unit id="b2f9d42231316404e2cabc285c74394be64eb9e6" translate="yes" xml:space="preserve">
          <source>By default all files in the current directory having one of the extensions provided by &lt;code&gt;--extension&lt;/code&gt; and not contained in the &lt;code&gt;node_modules&lt;/code&gt; or &lt;code&gt;.git&lt;/code&gt; folders are watched.</source>
          <target state="translated">기본적으로 &lt;code&gt;--extension&lt;/code&gt; 에서 제공하고 &lt;code&gt;node_modules&lt;/code&gt; 또는 &lt;code&gt;.git&lt;/code&gt; 폴더에 포함되지 않은 확장자 중 하나를 갖는 현재 디렉토리의 모든 파일 이 감시됩니다.</target>
        </trans-unit>
        <trans-unit id="b5e18ff5d92f817933a93f1b36abf01795769e75" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;mocha&lt;/code&gt; looks for the glob &lt;code&gt;&quot;./test/*.js&quot;&lt;/code&gt;, so you may want to put your tests in &lt;code&gt;test/&lt;/code&gt; folder. If you want to include subdirectories, pass the &lt;code&gt;--recursive&lt;/code&gt; option.</source>
          <target state="translated">기본적으로 &lt;code&gt;mocha&lt;/code&gt; 는 glob &lt;code&gt;&quot;./test/*.js&quot;&lt;/code&gt; 를 검색하므로 &lt;code&gt;test/&lt;/code&gt; 폴더 에 테스트 를 넣을 수 있습니다 . 하위 디렉터리를 포함하려면 &lt;code&gt;--recursive&lt;/code&gt; 옵션을 전달합니다 .</target>
        </trans-unit>
        <trans-unit id="84d09fc276227a99a85ff46a9de164688194ec4a" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;mocha&lt;/code&gt; looks for the glob &lt;code&gt;./test/*.js&lt;/code&gt;, so you may want to put your tests in &lt;code&gt;test/&lt;/code&gt; folder. If you want to include sub directories, pass the &lt;code&gt;--recursive&lt;/code&gt; option.</source>
          <target state="translated">기본적으로 &lt;code&gt;mocha&lt;/code&gt; 는 glob &lt;code&gt;./test/*.js&lt;/code&gt; 를 찾고 테스트를 &lt;code&gt;test/&lt;/code&gt; 폴더 에 넣을 수 있습니다 . 하위 디렉토리를 포함 시키려면 &lt;code&gt;--recursive&lt;/code&gt; 옵션을 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="fd4b6d977eff2078de6ff99bb0e3f277dbc79941" translate="yes" xml:space="preserve">
          <source>By default, Mocha looks for a &lt;code&gt;package.json&lt;/code&gt; in the current working directory or nearest ancestor, and will use the first file found (regardless of whether it contains a &lt;code&gt;mocha&lt;/code&gt; property); to suppress &lt;code&gt;package.json&lt;/code&gt; lookup, use &lt;code&gt;--no-package&lt;/code&gt;.</source>
          <target state="translated">기본적으로 Mocha는 현재 작업 디렉토리 또는 가장 가까운 조상에서 &lt;code&gt;package.json&lt;/code&gt; 을 찾고 발견 된 첫 번째 파일을 사용합니다 ( &lt;code&gt;mocha&lt;/code&gt; 속성 포함 여부에 관계없이 ). &lt;code&gt;package.json&lt;/code&gt; 조회 를 억제 하려면 &lt;code&gt;--no-package&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="bfc647847a042426461dee539849f64fe5844b0b" translate="yes" xml:space="preserve">
          <source>By default, Mocha will attempt to trap uncaught exceptions thrown from running tests and report these as test failures. Use &lt;code&gt;--allow-uncaught&lt;/code&gt; to disable this behavior and allow uncaught exceptions to propagate. Will typically cause the process to crash.</source>
          <target state="translated">기본적으로 Mocha는 실행중인 테스트에서 발생한 포착되지 않은 예외를 트랩하고이를 테스트 실패로보고합니다. 이 동작을 비활성화하고 포착되지 않은 예외가 전파되도록 하려면 &lt;code&gt;--allow-uncaught&lt;/code&gt; 를 사용하십시오. 일반적으로 프로세스가 중단됩니다.</target>
        </trans-unit>
        <trans-unit id="f60a605d6f86b30d2471c7bd338c828c55acfa8d" translate="yes" xml:space="preserve">
          <source>By default, Mocha will search for a config file if &lt;code&gt;--config&lt;/code&gt; is not specified; use &lt;code&gt;--no-config&lt;/code&gt; to suppress this behavior.</source>
          <target state="translated">기본적으로 Mocha는 &lt;code&gt;--config&lt;/code&gt; 가 지정되지 않은 경우 구성 파일을 검색 합니다. 이 동작을 억제 하려면 &lt;code&gt;--no-config&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="e7ed8285b0b9d88c035334bbc7d48134b611b220" translate="yes" xml:space="preserve">
          <source>By default, it will output to the console. To write directly to a file, use &lt;code&gt;--reporter-option output=filename.xml&lt;/code&gt;.</source>
          <target state="translated">기본적으로 콘솔에 출력됩니다. 파일에 직접 쓰려면 &lt;code&gt;--reporter-option output=filename.xml&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="c7927d0b938949e3c69d17add97d21ff99bf3841" translate="yes" xml:space="preserve">
          <source>By default, it will output to the console. To write directly to a file, use &lt;code&gt;--reporter-options output=filename.xml&lt;/code&gt;.</source>
          <target state="translated">기본적으로 콘솔로 출력됩니다. 파일에 직접 쓰려면 &lt;code&gt;--reporter-options output=filename.xml&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="9ef6b1f23a4221d1ac5dfe3a77db223917aff780" translate="yes" xml:space="preserve">
          <source>By using this option in conjunction with &lt;code&gt;--check-leaks&lt;/code&gt;, you can specify a whitelist of known global variables that you &lt;em&gt;expect&lt;/em&gt; to leak into global scope.</source>
          <target state="translated">이 옵션을 &lt;code&gt;--check-leaks&lt;/code&gt; 와 함께 사용하면 전역 범위로 유출 될 &lt;em&gt;것으로 예상&lt;/em&gt; 되는 알려진 전역 변수의 화이트리스트를 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="50b2705a7a7fbc592728f9775d0530826eb9332f" translate="yes" xml:space="preserve">
          <source>By using this option in conjunction with &lt;code&gt;--check-leaks&lt;/code&gt;, you can specify a whitelist of known global variables that you would expect to leak into global scope.</source>
          <target state="translated">이 옵션을 &lt;code&gt;--check-leaks&lt;/code&gt; 와 함께 사용하면 전역 범위로 누출 될 것으로 알려진 알려진 전역 변수의 화이트리스트를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d8a32b6db2f34014a9dd3ccc843aad9c56b8130" translate="yes" xml:space="preserve">
          <source>Can be specified as a comma-delimited list.</source>
          <target state="translated">쉼표로 구분 된 목록으로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="81aa9ce9d1b4e822d154510e728419b5e38a400d" translate="yes" xml:space="preserve">
          <source>Can be specified multiple times.</source>
          <target state="translated">여러 번 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="befe2a7713d1a8997216ede4094c7f7bb4fd69e2" translate="yes" xml:space="preserve">
          <source>Cause Mocha to only run tests having titles containing the given &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">Mocha가 주어진 &lt;code&gt;string&lt;/code&gt; 포함하는 제목을 가진 테스트 만 실행하도록 합니다 .</target>
        </trans-unit>
        <trans-unit id="1263c2b0a448d7035f5b5e6f7f82c0fae65f8875" translate="yes" xml:space="preserve">
          <source>Cause Mocha to only run tests matching the given &lt;code&gt;regexp&lt;/code&gt;, which is internally compiled to a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Regexp&quot;&gt;RegExp&lt;/a&gt;.</source>
          <target state="translated">Mocha 가 내부적으로 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Regexp&quot;&gt;RegExp로&lt;/a&gt; 컴파일 된 지정된 &lt;code&gt;regexp&lt;/code&gt; 와 일치하는 테스트 만 실행 하도록합니다 .</target>
        </trans-unit>
        <trans-unit id="0d7fafa179429b6ddaeb4aaf5c5f7beb3de4378d" translate="yes" xml:space="preserve">
          <source>Causes Mocha to stop running tests after the first test failure it encounters. Corresponding &amp;ldquo;after each&amp;rdquo; and &amp;ldquo;after all&amp;rdquo; hooks are executed for potential cleanup.</source>
          <target state="translated">Mocha가 발생한 첫 번째 테스트 실패 후 테스트 실행을 중지합니다. 잠재적 인 정리를 위해 해당하는 &quot;after each&quot;및 &quot;after all&quot;후크가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="997813380983627962b50431002ad017e449b78a" translate="yes" xml:space="preserve">
          <source>Caveats About Testing in Parallel</source>
          <target state="translated">병렬 테스트에 대한주의 사항</target>
        </trans-unit>
        <trans-unit id="adac69379a626c2436948a4ef1792c7d719ef929" translate="yes" xml:space="preserve">
          <source>Code</source>
          <target state="translated">Code</target>
        </trans-unit>
        <trans-unit id="5df9bae9c75abec6d59a80bfbda9901d5365728f" translate="yes" xml:space="preserve">
          <source>CoffeeScript is no longer supported out of the box. CS and similar transpilers may be used by mapping the file extensions (for use with &lt;code&gt;--watch&lt;/code&gt;) and the module name. For example &lt;code&gt;--compilers coffee:coffee-script&lt;/code&gt; with CoffeeScript 1.6- or &lt;code&gt;--compilers coffee:coffee-script/register&lt;/code&gt; with CoffeeScript 1.7+.</source>
          <target state="translated">CoffeeScript는 더 이상 기본적으로 지원되지 않습니다. CS 및 유사한 트랜스 파일러는 파일 확장자 ( &lt;code&gt;--watch&lt;/code&gt; 와 함께 사용 )와 모듈 이름 을 매핑하여 사용할 수 있습니다 . 예를 들어 &lt;code&gt;--compilers coffee:coffee-script&lt;/code&gt; 는 CoffeeScript 1.6 또는 &lt;code&gt;--compilers coffee:coffee-script/register&lt;/code&gt; 는 CoffeeScript 1.7 이상입니다.</target>
        </trans-unit>
        <trans-unit id="090ffa187f33d5f4ea1b00a057f6c8cafb5a0039" translate="yes" xml:space="preserve">
          <source>Command-Line Usage</source>
          <target state="translated">명령 줄 사용법</target>
        </trans-unit>
        <trans-unit id="a7018ee30082641edd48ac77a15754d95674f235" translate="yes" xml:space="preserve">
          <source>Compilers such as Babel via &lt;a href=&quot;https://npm.im/@babel/register&quot;&gt;@babel/register&lt;/a&gt; or TypeScript via &lt;a href=&quot;https://npm.im/ts-node&quot;&gt;ts-node&lt;/a&gt; (using &lt;code&gt;--require ts-node/register&lt;/code&gt;). See &lt;a href=&quot;https://github.com/mochajs/mocha-examples/tree/master/packages/babel&quot;&gt;Babel&lt;/a&gt; or &lt;a href=&quot;https://github.com/mochajs/mocha-examples/tree/master/packages/typescript&quot;&gt;TypeScript&lt;/a&gt; working examples.</source>
          <target state="translated">바벨 등을 통해 같은 컴파일러 &lt;a href=&quot;https://npm.im/@babel/register&quot;&gt;바벨 / 등록 @&lt;/a&gt; 또는 타이프 통해 &lt;a href=&quot;https://npm.im/ts-node&quot;&gt;TS-노드&lt;/a&gt; (사용 &lt;code&gt;--require ts-node/register&lt;/code&gt; ). &lt;a href=&quot;https://github.com/mochajs/mocha-examples/tree/master/packages/babel&quot;&gt;Babel&lt;/a&gt; 또는 &lt;a href=&quot;https://github.com/mochajs/mocha-examples/tree/master/packages/typescript&quot;&gt;TypeScript&lt;/a&gt; 작업 예제를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="35396ccbf60dec50c391b4b5fbcc83bfcb5ba776" translate="yes" xml:space="preserve">
          <source>Configuration Format</source>
          <target state="translated">구성 형식</target>
        </trans-unit>
        <trans-unit id="89ee9f09a7bddc18678f282ac618c13f798726c1" translate="yes" xml:space="preserve">
          <source>Configuration file (&lt;code&gt;.mocharc.js&lt;/code&gt;, &lt;code&gt;.mocharc.yml&lt;/code&gt;, etc.)</source>
          <target state="translated">구성 파일 ( &lt;code&gt;.mocharc.js&lt;/code&gt; , &lt;code&gt;.mocharc.yml&lt;/code&gt; 등)</target>
        </trans-unit>
        <trans-unit id="748ede4198981796b24313446db4f1682344736b" translate="yes" xml:space="preserve">
          <source>Configurations can inherit from other modules using the &lt;code&gt;extends&lt;/code&gt; keyword. See &lt;a href=&quot;http://yargs.js.org/docs/#api-configobject-extends-keyword&quot;&gt;here&lt;/a&gt; for more information.</source>
          <target state="translated">구성은 &lt;code&gt;extends&lt;/code&gt; 키워드를 사용하여 다른 모듈에서 상속 할 수 있습니다 . 자세한 내용은 &lt;a href=&quot;http://yargs.js.org/docs/#api-configobject-extends-keyword&quot;&gt;여기&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c9cd2e50e62a2a1c352c509c164bb770884c22ca" translate="yes" xml:space="preserve">
          <source>Configuring Mocha (Node.js)</source>
          <target state="translated">Mocha 구성 (Node.js)</target>
        </trans-unit>
        <trans-unit id="b65463cb6a42a17de514acc4659f7fd331e0876a" translate="yes" xml:space="preserve">
          <source>Connect</source>
          <target state="translated">Connect</target>
        </trans-unit>
        <trans-unit id="66716e9eea1ed594ef32a49efc5599e83d44105f" translate="yes" xml:space="preserve">
          <source>Contrast the above test with the following code:</source>
          <target state="translated">다음 코드와 위의 테스트를 대조하십시오.</target>
        </trans-unit>
        <trans-unit id="3c301b767710ca810852efd09eb87b6d943d2e5a" translate="yes" xml:space="preserve">
          <source>Create a new file, e.g., &lt;code&gt;test/hooks.js&lt;/code&gt;.</source>
          <target state="translated">새 파일 (예 : &lt;code&gt;test/hooks.js&lt;/code&gt; )을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="d2a463d1fd54eb7d11c92e0e71b86fed201fe30d" translate="yes" xml:space="preserve">
          <source>Current Limitations</source>
          <target state="translated">전류 제한</target>
        </trans-unit>
        <trans-unit id="40e42150865d8e5130d633b862be656c6ed68bf2" translate="yes" xml:space="preserve">
          <source>Custom Locations</source>
          <target state="translated">맞춤 위치</target>
        </trans-unit>
        <trans-unit id="4205624f33e051eaeb9ed46110ce99fee8d2dd4d" translate="yes" xml:space="preserve">
          <source>Define a global variable name. For example, suppose your app deliberately exposes a global named &lt;code&gt;app&lt;/code&gt; and &lt;code&gt;YUI&lt;/code&gt;, you may want to add &lt;code&gt;--global app --global YUI&lt;/code&gt;.</source>
          <target state="translated">전역 변수 이름을 정의합니다. 예를 들어 앱이 의도적으로 &lt;code&gt;app&lt;/code&gt; 및 &lt;code&gt;YUI&lt;/code&gt; 라는 전역 이름을 노출한다고 가정 하면 &lt;code&gt;--global app --global YUI&lt;/code&gt; 를 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1643ad5c0ce39559f97029c68080a37913b37dfe" translate="yes" xml:space="preserve">
          <source>Defining a Root Hook Plugin</source>
          <target state="translated">루트 후크 플러그인 정의</target>
        </trans-unit>
        <trans-unit id="e1e22a2edf0e09bfb03c176871687bac5efad07b" translate="yes" xml:space="preserve">
          <source>Delayed Root Suite</source>
          <target state="translated">지연된 루트 스위트</target>
        </trans-unit>
        <trans-unit id="4f5acd382e6a82ffed873da44bc7f3e9193e6128" translate="yes" xml:space="preserve">
          <source>Depending on the number and nature of your tests, you may find a significant performance benefit when running tests in parallel (using the &lt;a href=&quot;#-parallel-p&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt; flag).</source>
          <target state="translated">테스트의 수와 특성에 따라 테스트를 병렬로 실행할 때 ( &lt;a href=&quot;#-parallel-p&quot;&gt; &lt;code&gt;--parallel&lt;/code&gt; &lt;/a&gt; 플래그 사용) 상당한 성능 이점을 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="47eb9c334c8a2e0a8a91f2e8b48e60e41e096aef" translate="yes" xml:space="preserve">
          <source>Describing Hooks</source>
          <target state="translated">후크 설명</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="6a132ddfd5d093c4c27c86e1770f1ac3e84eeffc" translate="yes" xml:space="preserve">
          <source>Desktop Notification Support</source>
          <target state="translated">데스크탑 알림 지원</target>
        </trans-unit>
        <trans-unit id="938955c3676664abc9f3c695a2aefebcdbf1eb9d" translate="yes" xml:space="preserve">
          <source>Desktop notifications allow asynchronous communication of events without forcing you to react to a notification immediately. Their appearance and specific functionality vary across platforms. They typically disappear automatically after a short delay, but their content is often stored in some manner that allows you to access past notifications.</source>
          <target state="translated">데스크톱 알림을 사용하면 알림에 즉시 반응하지 않고도 이벤트의 비동기 통신이 가능합니다. 모양과 특정 기능은 플랫폼에 따라 다릅니다. 일반적으로 짧은 지연 후 자동으로 사라지지만 해당 콘텐츠는 종종 과거 알림에 액세스 할 수있는 방식으로 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="1c23dd4256655591e65e1cbc41de626aaf29c582" translate="yes" xml:space="preserve">
          <source>Detects Multiple Calls to &lt;code&gt;done()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;done()&lt;/code&gt; 여러 호출 감지</target>
        </trans-unit>
        <trans-unit id="4ed7a7b52b1dde0f16ee0faa573e3bfbbef4f4db" translate="yes" xml:space="preserve">
          <source>Detects Multiple Calls to done()</source>
          <target state="translated">done ()에 대한 여러 호출 감지</target>
        </trans-unit>
        <trans-unit id="f65624aa7c4a5284f37560a89a431cca52591579" translate="yes" xml:space="preserve">
          <source>Diffs</source>
          <target state="translated">Diffs</target>
        </trans-unit>
        <trans-unit id="018f842784720aaa37c65f55fdf9542a1da068a7" translate="yes" xml:space="preserve">
          <source>Disables timeouts. Equivalent to &lt;code&gt;--timeout 0&lt;/code&gt;.</source>
          <target state="translated">시간 초과를 비활성화합니다. &lt;code&gt;--timeout 0&lt;/code&gt; 과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="08a05bfb51a199314ceeb5fa59eaf8086f4f6cf9" translate="yes" xml:space="preserve">
          <source>Do not share a context with tests, suites, or other hooks</source>
          <target state="translated">테스트, 스위트 또는 기타 후크와 컨텍스트를 공유하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="cdba60a525e91017acace2575a32341fe23198be" translate="yes" xml:space="preserve">
          <source>Doc</source>
          <target state="translated">Doc</target>
        </trans-unit>
        <trans-unit id="ce834203e2d23d0819dc214a0fac8d125b2b0021" translate="yes" xml:space="preserve">
          <source>Does nothing if an assertion library supplies its own diff output.</source>
          <target state="translated">어설 션 라이브러리가 자체 diff 출력을 제공하면 아무 작업도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="efceefa382caa86c634b6835d9f62d0202cc9120" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use parallel mode. Likely, you won&amp;rsquo;t be running very many exclusive tests, so you won&amp;rsquo;t see a great benefit from parallel mode anyhow.</source>
          <target state="translated">병렬 모드를 사용하지 마십시오. 아마도 많은 독점 테스트를 실행하지 않을 것이므로 어쨌든 병렬 모드의 큰 이점을 보지 못할 것입니다.</target>
        </trans-unit>
        <trans-unit id="21c65003e5889c6eb18f808fd5fd858b05812ef2" translate="yes" xml:space="preserve">
          <source>Dot Matrix</source>
          <target state="translated">도트 매트릭스</target>
        </trans-unit>
        <trans-unit id="9e34d7d1386e4ed4fca2cc40eb823353fd0e1729" translate="yes" xml:space="preserve">
          <source>Due to the nature of the following reporters, they cannot work when running tests in parallel:</source>
          <target state="translated">다음 기자의 특성으로 인해 테스트를 병렬로 실행할 때는 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="010f60616208f0911f365735f9d10694e2a3ff48" translate="yes" xml:space="preserve">
          <source>Dynamically Generating Tests</source>
          <target state="translated">동적 테스트 생성</target>
        </trans-unit>
        <trans-unit id="cdc8c17318813d9e8ada6fbcc2fbd263e15eb108" translate="yes" xml:space="preserve">
          <source>ERR_MOCHA_INVALID_ARG_TYPE</source>
          <target state="translated">ERR_MOCHA_INVALID_ARG_TYPE</target>
        </trans-unit>
        <trans-unit id="5047590284ffefa1c045166fb922278d10cd8fce" translate="yes" xml:space="preserve">
          <source>ERR_MOCHA_INVALID_ARG_VALUE</source>
          <target state="translated">ERR_MOCHA_INVALID_ARG_VALUE</target>
        </trans-unit>
        <trans-unit id="61143da9754e3ac648e5dc8b708e91bcdaff2d34" translate="yes" xml:space="preserve">
          <source>ERR_MOCHA_INVALID_EXCEPTION</source>
          <target state="translated">ERR_MOCHA_INVALID_EXCEPTION</target>
        </trans-unit>
        <trans-unit id="c6c991ba108a254dbd1aa27a36ab6cbb19bfee62" translate="yes" xml:space="preserve">
          <source>ERR_MOCHA_INVALID_INTERFACE</source>
          <target state="translated">ERR_MOCHA_INVALID_INTERFACE</target>
        </trans-unit>
        <trans-unit id="7b03197648b4f7fc0768b864d2309218c6de9e7d" translate="yes" xml:space="preserve">
          <source>ERR_MOCHA_INVALID_REPORTER</source>
          <target state="translated">ERR_MOCHA_INVALID_REPORTER</target>
        </trans-unit>
        <trans-unit id="e484e30620545866e46fba3aa405ba470f7c0258" translate="yes" xml:space="preserve">
          <source>ERR_MOCHA_NO_FILES_MATCH_PATTERN</source>
          <target state="translated">ERR_MOCHA_NO_FILES_MATCH_PATTERN</target>
        </trans-unit>
        <trans-unit id="3de94b94a9249d4733a594c657bcf39257ff1f1f" translate="yes" xml:space="preserve">
          <source>ERR_MOCHA_UNSUPPORTED</source>
          <target state="translated">ERR_MOCHA_UNSUPPORTED</target>
        </trans-unit>
        <trans-unit id="64be33f33e05315f3407e453137fd7d1b345cb6f" translate="yes" xml:space="preserve">
          <source>Each flag annotated of type &lt;code&gt;[boolean]&lt;/code&gt; in Mocha&amp;rsquo;s &lt;code&gt;--help&lt;/code&gt; output can be &lt;em&gt;negated&lt;/em&gt; by prepending &lt;code&gt;--no-&lt;/code&gt; to the flag name. For example, &lt;code&gt;--no-color&lt;/code&gt; will disable Mocha&amp;rsquo;s color output, which is enabled by default.</source>
          <target state="translated">Mocha의 &lt;code&gt;--help&lt;/code&gt; 출력 에서 &lt;code&gt;[boolean]&lt;/code&gt; 유형으로 주석이 달린 각 플래그 는 플래그 이름 앞에 &lt;code&gt;--no-&lt;/code&gt; 를 추가 하여 &lt;em&gt;부정&lt;/em&gt; 할 수 있습니다 . 예를 들어, &lt;code&gt;--no-color&lt;/code&gt; 는 기본적으로 활성화되는 Mocha의 색상 출력을 비활성화합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5e4d5b278089fd59f1c6b98f3a9ffa0ddbbeb399" translate="yes" xml:space="preserve">
          <source>Each test file will be put into a queue and executed as workers become available.</source>
          <target state="translated">작업자를 사용할 수있게되면 각 테스트 파일이 대기열에 배치되고 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="df188f599aae58c67186d8ff806ff395566e71eb" translate="yes" xml:space="preserve">
          <source>Editor Plugins</source>
          <target state="translated">에디터 플러그인</target>
        </trans-unit>
        <trans-unit id="22526f82ceb1ba48c322732cd6b919651ab0c4d7" translate="yes" xml:space="preserve">
          <source>Either way, Mocha will abort the test run &amp;ldquo;very soon.&amp;rdquo;</source>
          <target state="translated">어느 쪽이든 Mocha는 &quot;곧&quot;테스트 실행을 중단합니다.</target>
        </trans-unit>
        <trans-unit id="d89a5ec1140ce5dd978c2baf15972fdf48b8b61f" translate="yes" xml:space="preserve">
          <source>Emacs</source>
          <target state="translated">Emacs</target>
        </trans-unit>
        <trans-unit id="d173754679eacb331dc028175f7fff3b5acb4996" translate="yes" xml:space="preserve">
          <source>Enable &amp;ldquo;full&amp;rdquo; stack traces. By default, Mocha attempts to distill stack traces into less noisy (though still useful) output.</source>
          <target state="translated">&quot;전체&quot;스택 추적을 활성화합니다. 기본적으로 Mocha는 스택 추적을 잡음이 적은 (여전히 유용하지만) 출력으로 추출하려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="e0d4b692f3c19af37b6456fac4583436241b0fc9" translate="yes" xml:space="preserve">
          <source>Enable &amp;ldquo;inline&amp;rdquo; diffs, an alternative output for diffing strings.</source>
          <target state="translated">diffing 문자열의 대체 출력 인 &quot;inline&quot;diff를 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="a7e01f5a546d81f480b049cb3d99ef0e4256fc07" translate="yes" xml:space="preserve">
          <source>Enable &lt;a href=&quot;http://growl.info/&quot;&gt;Growl&lt;/a&gt; (or OS-level notifications where available).</source>
          <target state="translated">&lt;a href=&quot;http://growl.info/&quot;&gt;Growl&lt;/a&gt; (또는 가능한 경우 OS 수준 알림)을 활성화 합니다.</target>
        </trans-unit>
        <trans-unit id="f7c967df284562962e69a96abf9f5d747f7fcbcd" translate="yes" xml:space="preserve">
          <source>Enable Mocha&amp;rsquo;s desktop notifications as follows:</source>
          <target state="translated">다음과 같이 Mocha의 데스크톱 알림을 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="d506e86bc281703d603cb0cf4ac0e3c48110feca" translate="yes" xml:space="preserve">
          <source>Enable Mocha&amp;rsquo;s web notifications with a slight modification to your client-side mocha HTML. Add a call to &lt;code&gt;mocha.growl()&lt;/code&gt; prior to running your tests as shown below:</source>
          <target state="translated">클라이언트 측 mocha HTML을 약간 수정하여 Mocha의 웹 알림을 활성화합니다. 아래와 같이 테스트를 실행하기 전에 &lt;code&gt;mocha.growl()&lt;/code&gt; 대한 호출을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="359155ba6151e00af0b0c45af074098501c387a4" translate="yes" xml:space="preserve">
          <source>Enables Node.js&amp;rsquo; inspector.</source>
          <target state="translated">Node.js의 인스펙터를 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="33326c8c1b47f26cc19939feab6072343a029216" translate="yes" xml:space="preserve">
          <source>Enables node&amp;rsquo;s debugger support, this executes your script(s) with &lt;code&gt;node debug &amp;lt;file ...&amp;gt;&lt;/code&gt; allowing you to step through code and break with the &lt;code&gt;debugger&lt;/code&gt; statement. Note the difference between &lt;code&gt;mocha debug&lt;/code&gt; and &lt;code&gt;mocha --debug&lt;/code&gt;: &lt;code&gt;mocha debug&lt;/code&gt; will fire up node&amp;rsquo;s built-in debug client, &lt;code&gt;mocha --debug&lt;/code&gt; will allow you to use a different interface &amp;mdash; such as the Blink Developer Tools. Implies &lt;code&gt;--no-timeouts&lt;/code&gt;.</source>
          <target state="translated">노드의 디버거 지원을 활성화합니다. 그러면 &lt;code&gt;node debug &amp;lt;file ...&amp;gt;&lt;/code&gt; 하여 스크립트를 실행하여 코드를 단계별로 실행하고 &lt;code&gt;debugger&lt;/code&gt; 문을 실행할 수 있습니다 . &lt;code&gt;mocha debug&lt;/code&gt; 와 &lt;code&gt;mocha --debug&lt;/code&gt; 의 차이점에 유의하십시오 . &lt;code&gt;mocha debug&lt;/code&gt; 는 노드의 내장 디버그 클라이언트를 시작하고 &lt;code&gt;mocha --debug&lt;/code&gt; 를 사용하면 Blink Developer Tools와 같은 다른 인터페이스를 사용할 수 있습니다. &lt;code&gt;--no-timeouts&lt;/code&gt; 를 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="db9c416e00d6f7a3d6c9a7065a20c33a6a160a08" translate="yes" xml:space="preserve">
          <source>Enforce a rule that tests may not be exclusive (use of e.g., &lt;code&gt;describe.only()&lt;/code&gt; or &lt;code&gt;it.only()&lt;/code&gt; is disallowed).</source>
          <target state="translated">테스트가 배타적이지 않을 수 있다는 규칙을 시행합니다 (예 : &lt;code&gt;describe.only()&lt;/code&gt; 또는 &lt;code&gt;it.only()&lt;/code&gt; 이 허용되지 않음).</target>
        </trans-unit>
        <trans-unit id="da1a0b8d94e6a3d8a32e7f55177127431168a714" translate="yes" xml:space="preserve">
          <source>Enforce a rule that tests may not be skipped (use of e.g., &lt;code&gt;describe.skip()&lt;/code&gt;, &lt;code&gt;it.skip()&lt;/code&gt;, or &lt;code&gt;this.skip()&lt;/code&gt; anywhere is disallowed).</source>
          <target state="translated">테스트를 건너 뛸 수없는 규칙을 적용합니다 (예 : &lt;code&gt;describe.skip()&lt;/code&gt; , &lt;code&gt;it.skip()&lt;/code&gt; 또는 &lt;code&gt;this.skip()&lt;/code&gt; 은 허용되지 않음).</target>
        </trans-unit>
        <trans-unit id="487ff3c6beccdbd1b9a2badc2074ca11dba524a2" translate="yes" xml:space="preserve">
          <source>Enforce a rule that tests must be written in &amp;ldquo;async&amp;rdquo; style, meaning each test provides a &lt;code&gt;done&lt;/code&gt; callback or returns a &lt;code&gt;Promise&lt;/code&gt;. Non-compliant tests will be marked as failures.</source>
          <target state="translated">테스트는 '비동기'스타일로 작성되어야한다는 규칙을 적용합니다. 즉, 각 테스트는 &lt;code&gt;done&lt;/code&gt; 콜백을 제공 하거나 &lt;code&gt;Promise&lt;/code&gt; 를 반환합니다 . 비준수 테스트는 실패로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="50bdd1d55b6b627369c1e7e0c64ff64b4d5fee6e" translate="yes" xml:space="preserve">
          <source>Error Codes</source>
          <target state="translated">에러 코드</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="c6b73f631d9ed023ec9b067a90f104d4c4a8d5e2" translate="yes" xml:space="preserve">
          <source>Exclusive Tests</source>
          <target state="translated">독점 테스트</target>
        </trans-unit>
        <trans-unit id="493c3191878ca62eb9b74d05311cb96722fe11c2" translate="yes" xml:space="preserve">
          <source>Exclusive Tests are Disallowed</source>
          <target state="translated">독점 테스트는 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7ee1f8db6ab4251f4638f9fbba832f76a0ec0db6" translate="yes" xml:space="preserve">
          <source>Executes tests on changes to JavaScript in the CWD, and once initially.</source>
          <target state="translated">CWD에서 JavaScript 변경 사항에 대한 테스트를 실행하고 처음에는 한 번 실행합니다.</target>
        </trans-unit>
        <trans-unit id="b3efa89156028c75207496f0962b71ff1becb67c" translate="yes" xml:space="preserve">
          <source>Explicitly &lt;em&gt;include&lt;/em&gt; a test file to be loaded before other test files. Multiple uses of &lt;code&gt;--file&lt;/code&gt; are allowed, and will be loaded in order given.</source>
          <target state="translated">다른 테스트 파일보다 먼저로드 할 테스트 파일을 명시 적으로 &lt;em&gt;포함&lt;/em&gt; 합니다. &lt;code&gt;--file&lt;/code&gt; 의 다중 사용 이 허용되며 주어진 순서대로로드됩니다.</target>
        </trans-unit>
        <trans-unit id="665d9d1ddb5e06930bbfe382e0aea2c85bd3c585" translate="yes" xml:space="preserve">
          <source>Explicitly ignore (exclude) one or more test files, directories or globs (e.g., &lt;code&gt;some/**/files*&lt;/code&gt;) that would otherwise be loaded.</source>
          <target state="translated">그렇지 않으면로드 될 하나 이상의 테스트 파일, 디렉토리 또는 glob (예 : &lt;code&gt;some/**/files*&lt;/code&gt; )을 명시 적으로 무시 (제외) 합니다.</target>
        </trans-unit>
        <trans-unit id="0e16537914a0163e01ecd7e0945bc56c50eb3849" translate="yes" xml:space="preserve">
          <source>Exports</source>
          <target state="translated">Exports</target>
        </trans-unit>
        <trans-unit id="8b652040961793dd0ebfc35016e694eff7d88f91" translate="yes" xml:space="preserve">
          <source>Express</source>
          <target state="translated">Express</target>
        </trans-unit>
        <trans-unit id="f47f5142231ee2ecc0d7b66768d1c6810b98516d" translate="yes" xml:space="preserve">
          <source>Extending Configuration</source>
          <target state="translated">구성 확장</target>
        </trans-unit>
        <trans-unit id="64d2b228c287fb3f93b50cd7f2b6450fe234a682" translate="yes" xml:space="preserve">
          <source>FAST: Tests that run within half of the &amp;ldquo;slow&amp;rdquo; threshold will show the duration in green (if at all).</source>
          <target state="translated">FAST : &quot;느린&quot;임계 값의 절반 내에서 실행되는 테스트는 지속 시간을 녹색으로 표시합니다 (아무 경우).</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">Features</target>
        </trans-unit>
        <trans-unit id="4261dd71f77c7afac6ad8f8bb1919712116fa6c6" translate="yes" xml:space="preserve">
          <source>File Order is Non-Deterministic</source>
          <target state="translated">파일 순서가 결정적이지 않음</target>
        </trans-unit>
        <trans-unit id="31a775918c12d68af8b1d4c015f6d689df7e3f45" translate="yes" xml:space="preserve">
          <source>Files having this extension will be considered test files. Defaults to &lt;code&gt;js&lt;/code&gt;.</source>
          <target state="translated">이 확장자를 가진 파일은 테스트 파일로 간주됩니다. 기본값은 &lt;code&gt;js&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b84f30dcd08b035bb09516489341fa3bba5c1acc" translate="yes" xml:space="preserve">
          <source>Files specified in this way should contain one or more suites, tests or hooks. If this is not the case, consider &lt;code&gt;--require&lt;/code&gt; instead.</source>
          <target state="translated">이 방식으로 지정된 파일은 하나 이상의 스위트, 테스트 또는 후크를 포함해야합니다. 그렇지 않은 경우 대신 &lt;code&gt;--require&lt;/code&gt; 를 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="3a5b592dfe82e00748132ebe3e1dd8946d05276b" translate="yes" xml:space="preserve">
          <source>Files specified this way are not affected by &lt;code&gt;--sort&lt;/code&gt; or &lt;code&gt;--recursive&lt;/code&gt;.</source>
          <target state="translated">이 방법으로 지정된 파일은 &lt;code&gt;--sort&lt;/code&gt; 또는 &lt;code&gt;--recursive&lt;/code&gt; 의 영향을받지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="cc53e5427f8fcca05f74255c35fdfb25c00fdfea" translate="yes" xml:space="preserve">
          <source>Files specified using &lt;code&gt;--file&lt;/code&gt;&lt;em&gt;are not affected&lt;/em&gt; by this option.</source>
          <target state="translated">&lt;code&gt;--file&lt;/code&gt; 을 사용하여 지정된 파일 은이 옵션의 &lt;em&gt;영향을받지 않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="b73ed650de2cd55f5c7ab1caad59cb292e999f67" translate="yes" xml:space="preserve">
          <source>Finally, use this command to bring it together: &lt;code&gt;mocha --require fixtures.mjs test.spec.mjs&lt;/code&gt;.</source>
          <target state="translated">마지막으로 다음 명령을 사용하여 함께 가져옵니다 : &lt;code&gt;mocha --require fixtures.mjs test.spec.mjs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ad0d5e1985d85b7bad2e0395879718e85215a0e9" translate="yes" xml:space="preserve">
          <source>Find your root hooks (hooks defined &lt;em&gt;outside&lt;/em&gt; of a suite&amp;ndash;usually &lt;code&gt;describe()&lt;/code&gt; callback).</source>
          <target state="translated">루트 후크 ( 스위트 &lt;em&gt;외부&lt;/em&gt; 에 정의 된 후크 -일반적으로 &lt;code&gt;describe()&lt;/code&gt; 콜백)를 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="b994b543914e78f598af0ff864a18b13f27b3bad" translate="yes" xml:space="preserve">
          <source>First, use a global fixture to start and stop a test server:</source>
          <target state="translated">먼저, 글로벌 픽스쳐를 사용하여 테스트 서버를 시작하고 중지합니다.</target>
        </trans-unit>
        <trans-unit id="1623349ac7bbac083042c7d6498cce0ae75fb4a6" translate="yes" xml:space="preserve">
          <source>Flags to &lt;code&gt;node&lt;/code&gt; are &lt;em&gt;also&lt;/em&gt; supported in configuration files. Use caution, as these can vary between versions of Node.js!</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 대한 플래그 는 구성 파일 &lt;em&gt;에서도&lt;/em&gt; 지원됩니다. Node.js 버전마다 다를 수 있으므로주의하십시오!</target>
        </trans-unit>
        <trans-unit id="6b647b3296507edfbbf3b0500ca5fe721bf0e1aa" translate="yes" xml:space="preserve">
          <source>For each test, Mocha executes:</source>
          <target state="translated">각 테스트에 대해 Mocha는 다음을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="075732fb0cbe6f1b9d0e256e1badfb2f1e6e18cc" translate="yes" xml:space="preserve">
          <source>For example, given the following file, &lt;code&gt;test/test.spec.js&lt;/code&gt;, containing root hooks:</source>
          <target state="translated">예를 들어 루트 후크가 포함 된 &lt;code&gt;test/test.spec.js&lt;/code&gt; 파일이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e2b5dbde05a80900b6d36cfb626524c53a5cd0a7" translate="yes" xml:space="preserve">
          <source>For example, suppose you have the following &lt;code&gt;mocha.opts&lt;/code&gt; file:</source>
          <target state="translated">예를 들어, 다음 &lt;code&gt;mocha.opts&lt;/code&gt; 파일 이 있다고 가정 하십시오.</target>
        </trans-unit>
        <trans-unit id="5f7c8b40764d6e6cba3037654fe88223f8cbc034" translate="yes" xml:space="preserve">
          <source>For example, suppose you have the following JavaScript:</source>
          <target state="translated">예를 들어, 다음 JavaScript가 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="da4d28e002c0b4de6834c17c77dc70bfabb04c94" translate="yes" xml:space="preserve">
          <source>For options containing a dash (&lt;code&gt;-&lt;/code&gt;), the option name can be specified using camelCase.</source>
          <target state="translated">대시 ( &lt;code&gt;-&lt;/code&gt; )가 포함 된 옵션의 경우 camelCase를 사용하여 옵션 이름을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="189102dcf2fe654caa9650e84e64c30c0da35cae" translate="yes" xml:space="preserve">
          <source>Free-tier cloud CI services may not provide a suitable multi-core container or VM for their build agents. Regarding expected performance gains in CI: your mileage may vary. It may help to use a conditional in a &lt;code&gt;.mocharc.js&lt;/code&gt; to check for &lt;code&gt;process.env.CI&lt;/code&gt;, and adjust the job count as appropriate.</source>
          <target state="translated">프리 티어 클라우드 CI 서비스는 빌드 에이전트에 적합한 멀티 코어 컨테이너 또는 VM을 제공하지 않을 수 있습니다. CI에서 예상되는 성능 향상과 관련하여 : 마일리지가 다를 수 있습니다. &lt;code&gt;.mocharc.js&lt;/code&gt; 에서 조건문을 사용하여 &lt;code&gt;process.env.CI&lt;/code&gt; 를 확인 하고 적절하게 작업 수를 조정하는 것이 도움이 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">시작하기</target>
        </trans-unit>
        <trans-unit id="25f6f8824c49094eb1fdcf8139b250636d9a6086" translate="yes" xml:space="preserve">
          <source>Given Mocha&amp;rsquo;s use of &lt;code&gt;Function.prototype.call&lt;/code&gt; and function expressions to define suites and test cases, it&amp;rsquo;s straightforward to generate your tests dynamically. No special syntax is required &amp;mdash; plain ol&amp;rsquo; JavaScript can be used to achieve functionality similar to &amp;ldquo;parameterized&amp;rdquo; tests, which you may have seen in other frameworks.</source>
          <target state="translated">스위트와 테스트 케이스를 정의하기 위해 Mocha의 &lt;code&gt;Function.prototype.call&lt;/code&gt; 및 함수 표현식을 사용하면 테스트를 동적으로 생성하는 것이 간단합니다. 특별한 구문이 필요하지 않습니다. 다른 프레임 워크에서 볼 수있는 &quot;매개 변수화 된&quot;테스트와 유사한 기능을 달성하기 위해 일반 ol 'JavaScript를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4f662929cf2e619d7d39f22b008c87c102a32659" translate="yes" xml:space="preserve">
          <source>Global Fixtures</source>
          <target state="translated">글로벌 비품</target>
        </trans-unit>
        <trans-unit id="42ef64c6c39d4389fdcf3f2a0c305ff5337520ba" translate="yes" xml:space="preserve">
          <source>Global Setup Fixtures</source>
          <target state="translated">글로벌 설정 비품</target>
        </trans-unit>
        <trans-unit id="8328b74b27a86d71773a0ded39579d6ec5452edd" translate="yes" xml:space="preserve">
          <source>Global Teardown Fixtures</source>
          <target state="translated">글로벌 분해 설비</target>
        </trans-unit>
        <trans-unit id="00cb87db597ce2cecc45cdc20ce3fcb19a93a1ba" translate="yes" xml:space="preserve">
          <source>Global fixtures are good for spinning up a server, opening a socket, or otherwise creating a resource that your tests will repeatedly access via I/O.</source>
          <target state="translated">글로벌 픽스쳐는 서버 회전, 소켓 열기 또는 I / O를 통해 테스트가 반복적으로 액세스 할 리소스를 생성하는 데 좋습니다.</target>
        </trans-unit>
        <trans-unit id="2589b1f45c54b66754ff3a6ba0b78a1a2c58e37d" translate="yes" xml:space="preserve">
          <source>Grep</source>
          <target state="translated">Grep</target>
        </trans-unit>
        <trans-unit id="21a3c554b2b3f33d141b4b3dba634c148e87f258" translate="yes" xml:space="preserve">
          <source>HTML Reporter</source>
          <target state="translated">HTML 리포터</target>
        </trans-unit>
        <trans-unit id="daa8f0e8f971cc59e60e23890f58665b5c5926a6" translate="yes" xml:space="preserve">
          <source>Has no effect unless used with &lt;a href=&quot;#-parallel-p&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#-parallel-p&quot;&gt; &lt;code&gt;--parallel&lt;/code&gt; &lt;/a&gt; 과 함께 사용하지 않으면 효과가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="6988158207ff79b81d85e2979b6674763574ceb5" translate="yes" xml:space="preserve">
          <source>Here are a couple suggested workarounds:</source>
          <target state="translated">다음은 몇 가지 제안 된 해결 방법입니다.</target>
        </trans-unit>
        <trans-unit id="41cf457ff96bdd94aa81825d78317aa76039d478" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a simple example which defines a root hook, written using CJS and ESM syntax.</source>
          <target state="translated">다음은 CJS 및 ESM 구문을 사용하여 작성된 루트 후크를 정의하는 간단한 예입니다.</target>
        </trans-unit>
        <trans-unit id="7b84bacdbcc873fa7100354ef56eee9e3ca78c5f" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of executing an individual test case:</source>
          <target state="translated">다음은 개별 테스트 사례를 실행하는 예입니다.</target>
        </trans-unit>
        <trans-unit id="8c94fcceb2bcb3cf710ecd9ec8525cf5d93efe32" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of using global fixtures and &amp;ldquo;before all&amp;rdquo; hooks to get the job done. Note that we do not reference the &lt;code&gt;server&lt;/code&gt; object anywhere in our tests!</source>
          <target state="translated">다음은 작업을 완료하기 위해 전역 픽스처와 &quot;before all&quot;후크를 사용하는 예입니다. 테스트의 어느 곳에서도 &lt;code&gt;server&lt;/code&gt; 객체를 참조하지 않습니다 !</target>
        </trans-unit>
        <trans-unit id="3776d796d8bca4fedc68f40083535c666bfd83fe" translate="yes" xml:space="preserve">
          <source>Hint: Use &lt;code&gt;--jobs 0&lt;/code&gt; or &lt;code&gt;--jobs 1&lt;/code&gt; to temporarily disable &lt;code&gt;--parallel&lt;/code&gt;.</source>
          <target state="translated">힌트 : &lt;code&gt;--jobs 0&lt;/code&gt; 또는 &lt;code&gt;--jobs 1&lt;/code&gt; 을 사용하여 &lt;code&gt;--parallel&lt;/code&gt; 을 일시적으로 비활성화 합니다 .</target>
        </trans-unit>
        <trans-unit id="54601f868c7e4383dd09d71df7cfdac40c45ce96" translate="yes" xml:space="preserve">
          <source>Hook-level</source>
          <target state="translated">Hook-level</target>
        </trans-unit>
        <trans-unit id="5c7eb9c28bf847e23d9f404dedbac5f071586b71" translate="yes" xml:space="preserve">
          <source>Hook-level timeouts may also be applied:</source>
          <target state="translated">후크 수준 시간 초과가 적용될 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="4bd8f3f03a576b2088bd73a2339d07fca1de805d" translate="yes" xml:space="preserve">
          <source>Hooks</source>
          <target state="translated">Hooks</target>
        </trans-unit>
        <trans-unit id="d15913a24b663c8adda36824275c06a96394c5b7" translate="yes" xml:space="preserve">
          <source>If a file loaded this way contains known Mocha-specific exports (e.g., &lt;a href=&quot;#root-hook-plugins&quot;&gt;root hook plugins&lt;/a&gt;), Mocha &amp;ldquo;registers&amp;rdquo; these</source>
          <target state="translated">이 방법으로로드 된 파일에 알려진 Mocha 관련 내보내기 (예 : &lt;a href=&quot;#root-hook-plugins&quot;&gt;루트 후크 플러그인&lt;/a&gt; )가 포함되어있는 경우 Mocha는이를 &quot;등록&quot;합니다.</target>
        </trans-unit>
        <trans-unit id="6042f5ee88c44923b382954a43438ca23c3bfb9c" translate="yes" xml:space="preserve">
          <source>If known flags for the &lt;code&gt;node&lt;/code&gt; executable are found:</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 실행 파일에 대해 알려진 플래그가있는 경우 :</target>
        </trans-unit>
        <trans-unit id="b1efaf45d662fc455527fab25d5d53c915b00a87" translate="yes" xml:space="preserve">
          <source>If no custom path was given, and if there are multiple configuration files in the same directory, Mocha will search for &amp;mdash; and use &amp;mdash; only one. The priority is:</source>
          <target state="translated">사용자 지정 경로가 지정되지 않았고 동일한 디렉토리에 여러 구성 파일이있는 경우 Mocha는 하나만 검색하여 사용합니다. 우선 순위는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d8606cb18f3ff6d6662e749d7ce1b8fdb87fed2e" translate="yes" xml:space="preserve">
          <source>If not, Mocha ignores any exports of a &lt;code&gt;--require&lt;/code&gt;&amp;rsquo;d module</source>
          <target state="translated">그렇지 않은 경우 Mocha는 &lt;code&gt;--require&lt;/code&gt; 'd 모듈 의 모든 내보내기를 무시합니다.</target>
        </trans-unit>
        <trans-unit id="9ab3cec9cb28e6ef2e2944035b312aac03020da2" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;https://nodejs.org/dist/latest-v12.x/docs/api/cli.html#cli_enable_source_maps&quot;&gt;&lt;code&gt;--enable-source-maps&lt;/code&gt;&lt;/a&gt; flag is passed to mocha, source maps will be collected and used to provide accurate stack traces for transpiled code:</source>
          <target state="translated">는 IF &lt;a href=&quot;https://nodejs.org/dist/latest-v12.x/docs/api/cli.html#cli_enable_source_maps&quot;&gt; &lt;code&gt;--enable-source-maps&lt;/code&gt; &lt;/a&gt; 플래그 모카에 전달, 소스지도 수집 transpiled 코드에 대한 정확한 스택 추적을 제공하는 데 사용됩니다 :</target>
        </trans-unit>
        <trans-unit id="0d6a30fa5bdd7ea20378779ada84782fc3c8d49e" translate="yes" xml:space="preserve">
          <source>If the current suite has a child suite, repeat the steps in 10. for each child suite; each child suite &lt;em&gt;inherits&lt;/em&gt; any &amp;ldquo;before each&amp;rdquo; and &amp;ldquo;after each&amp;rdquo; hooks defined in its parent</source>
          <target state="translated">현재 제품군에 하위 제품군이있는 경우 각 하위 제품군에 대해 10. 단계를 반복합니다. 각 자식 제품군 은 부모에 정의 된 &quot;before each&quot;및 &quot;after each&quot;후크를 &lt;em&gt;상속&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="02f892e18f79c0ac275548e7da445a6843078694" translate="yes" xml:space="preserve">
          <source>If the path is a directory all files and subdirectories will be watched.</source>
          <target state="translated">경로가 디렉토리이면 모든 파일과 하위 디렉토리가 감시됩니다.</target>
        </trans-unit>
        <trans-unit id="9116db4a3104a2f8c3ab6800284e3fea668d41cc" translate="yes" xml:space="preserve">
          <source>If you find your tests don&amp;rsquo;t work properly when run with &lt;a href=&quot;#-parallel-p&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt;, either shrug and move on, or use this handy-dandy checklist to get things working:</source>
          <target state="translated">&lt;a href=&quot;#-parallel-p&quot;&gt; &lt;code&gt;--parallel&lt;/code&gt; 로&lt;/a&gt; 실행할 때 테스트가 제대로 작동하지 않는 경우 어깨를 으쓱하고 계속 진행하거나이 편리한 체크리스트를 사용하여 작업을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="5397388eb9e3beb855124dbe78ad1d0abce8503f" translate="yes" xml:space="preserve">
          <source>If you need to access an in-memory value (such as a file handle or database connection), &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; use global fixtures to do this, because your tests will not have access to the value.</source>
          <target state="translated">당신은 (예 : 파일 핸들 또는 데이터베이스 연결로) - 메모리 값에 액세스해야하는 경우 &lt;em&gt;가 없습니다&lt;/em&gt; 귀하의 테스트 값에 액세스 할 수 없기 때문에,이 작업을 수행하기 위해 글로벌기구를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="c773ae1d7c3ea3710442f648fe7e6e4900f4a13f" translate="yes" xml:space="preserve">
          <source>If you need to perform an async operation, &lt;code&gt;mochaHooks&lt;/code&gt; can be &lt;code&gt;Promise&lt;/code&gt;-returning:</source>
          <target state="translated">비동기 작업을 수행해야하는 경우 &lt;code&gt;mochaHooks&lt;/code&gt; 는 &lt;code&gt;Promise&lt;/code&gt; 반환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="98e19c16786b297b22eefa7e77183940457614e1" translate="yes" xml:space="preserve">
          <source>If you need to perform asynchronous operations before any of your suites are run, you may delay the root suite. Run &lt;code&gt;mocha&lt;/code&gt; with the &lt;code&gt;--delay&lt;/code&gt; flag. This will attach a special callback function, &lt;code&gt;run()&lt;/code&gt;, to the global context:</source>
          <target state="translated">스위트가 실행되기 전에 비동기 작업을 수행해야하는 경우 루트 스위트가 지연 될 수 있습니다. &lt;code&gt;--delay&lt;/code&gt; 플래그 와 함께 &lt;code&gt;mocha&lt;/code&gt; 를 실행하십시오 . 이것은 특수 콜백 함수 &lt;code&gt;run()&lt;/code&gt; 을 전역 컨텍스트에 첨부합니다.</target>
        </trans-unit>
        <trans-unit id="4d7ab91094560827d40b16dbc9c3f97aac697aea" translate="yes" xml:space="preserve">
          <source>If you need to perform some logic&amp;ndash;such as choosing a root hook conditionally, based on the environment&amp;ndash;&lt;code&gt;mochaHooks&lt;/code&gt; can be a &lt;em&gt;function&lt;/em&gt; which returns the expected object.</source>
          <target state="translated">환경에 따라 조건부로 루트 후크를 선택하는 것과 같은 로직을 수행해야하는 경우 &lt;code&gt;mochaHooks&lt;/code&gt; 는 예상 된 객체를 반환 하는 &lt;em&gt;함수&lt;/em&gt; 가 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1ca2299f38867549b92718f150742bffd5bb2338" translate="yes" xml:space="preserve">
          <source>If you need to run some code &lt;em&gt;once and only once&lt;/em&gt;, use a &lt;a href=&quot;#global-fixtures&quot;&gt;global fixture&lt;/a&gt; instead.</source>
          <target state="translated">일부 코드를 &lt;em&gt;한 번만&lt;/em&gt; 실행해야하는 경우 에는 대신 &lt;a href=&quot;#global-fixtures&quot;&gt;전역 픽스처를&lt;/a&gt; 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="ced3214c512472a19816679d43a3cb0180c1f760" translate="yes" xml:space="preserve">
          <source>If you use callback-based async tests, Mocha will throw an error if &lt;code&gt;done()&lt;/code&gt; is called multiple times. This is handy for catching accidental double callbacks.</source>
          <target state="translated">콜백 기반 비동기 테스트를 사용하는 경우 &lt;code&gt;done()&lt;/code&gt; 여러 번 호출 하면 Mocha에서 오류가 발생합니다 . 실수로 이중 콜백을 잡는 데 편리합니다.</target>
        </trans-unit>
        <trans-unit id="5265320fe146954c40d70113ddcdedab964f7bd7" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re a library maintainer, and your library uses root hooks, you can migrate by refactoring your entry point:</source>
          <target state="translated">라이브러리 유지 관리자이고 라이브러리가 루트 후크를 사용하는 경우 진입 점을 리팩토링하여 마이그레이션 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e53b5d739b41e36dae9122b4b8c6364051302d79" translate="yes" xml:space="preserve">
          <source>If your ES6 modules have extension &lt;code&gt;.js&lt;/code&gt;, you can &lt;code&gt;npm install --save-dev babel-register&lt;/code&gt; and use &lt;code&gt;mocha --require babel-register&lt;/code&gt;; &lt;code&gt;--compilers&lt;/code&gt; is only necessary if you need to specify a file extension.</source>
          <target state="translated">ES6 모듈의 확장명이 &lt;code&gt;.js&lt;/code&gt; 인 경우 &lt;code&gt;npm install --save-dev babel-register&lt;/code&gt; 를 사용하고 &lt;code&gt;mocha --require babel-register&lt;/code&gt; 사용할 수 있습니다. --require babel-register ; &lt;code&gt;--compilers&lt;/code&gt; 는 파일 확장자를 지정해야하는 경우에만 필요합니다.</target>
        </trans-unit>
        <trans-unit id="5f10ae75160b68a23b879ce505262f4e06bab893" translate="yes" xml:space="preserve">
          <source>If your JS environment supports &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;async / await&lt;/a&gt; you can also write asynchronous tests like this:</source>
          <target state="translated">JS 환경이 &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;async / await&lt;/a&gt; 를 지원하는 경우 다음 과 같이 비동기 테스트를 작성할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ce3c5d471422a8ccae775d722b5e0d709d149c8f" translate="yes" xml:space="preserve">
          <source>If your JS environment supports &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;async / await&lt;/a&gt;, you can also write asynchronous tests like this:</source>
          <target state="translated">JS 환경이 &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;async / await를&lt;/a&gt; 지원하는 경우 다음 과 같이 비동기 테스트를 작성할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="8baf665d270ed48fc70b21faadea9c2e2d777083" translate="yes" xml:space="preserve">
          <source>Ignoring Config Files</source>
          <target state="translated">구성 파일 무시</target>
        </trans-unit>
        <trans-unit id="01fddd382c17e3a41dbaed1505d790d326f4eacd" translate="yes" xml:space="preserve">
          <source>Implies &lt;code&gt;--no-timeout&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--no-timeout&lt;/code&gt; 을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="592398d8754754d0900312fe6c0c6155d187f032" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;test/hooks.js&lt;/code&gt;, make your hooks a member of an exported &lt;code&gt;mochaHooks&lt;/code&gt; property.</source>
          <target state="translated">에서 &lt;code&gt;test/hooks.js&lt;/code&gt; , 당신의 후크 보낸 회원 수 있도록 &lt;code&gt;mochaHooks&lt;/code&gt; 의 속성을.</target>
        </trans-unit>
        <trans-unit id="db995fde688a81ee69993ee2d9bd0bb9e04333ae" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;both&lt;/strong&gt; modes, run &lt;em&gt;after every test&lt;/em&gt;</source>
          <target state="translated">에서 &lt;strong&gt;두&lt;/strong&gt; 모드 실행 &lt;em&gt;모든 테스트 후&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4aa29e40554c71aed428c1fff07836dfebab58d5" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;both&lt;/strong&gt; modes, run &lt;em&gt;before each test&lt;/em&gt;</source>
          <target state="translated">에서 &lt;strong&gt;두&lt;/strong&gt; 모드 실행 &lt;em&gt;각 테스트하기 전에&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9ea53f9342d679452294f7b8764e8cd0a3332435" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;parallel&lt;/strong&gt; mode, run &lt;em&gt;after all tests end, for each file&lt;/em&gt;</source>
          <target state="translated">에서 &lt;strong&gt;병렬&lt;/strong&gt; 모드에서 실행 &lt;em&gt;각 파일에 대해, 모든 테스트 종료 후&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="434b603f31eb91450c51fc168f4bd4f0a52a70c2" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;parallel&lt;/strong&gt; mode, run &lt;em&gt;before all tests begin, for each file&lt;/em&gt;</source>
          <target state="translated">에서 &lt;strong&gt;병렬&lt;/strong&gt; 모드에서 실행 &lt;em&gt;모든 테스트를 시작하기 전에 각 파일에 대해,&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9ec5baf40c04c298cb97108c03c828bb95c2f06d" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;serial&lt;/strong&gt; mode (Mocha&amp;rsquo;s default), &lt;em&gt;before all tests begin, once only&lt;/em&gt;</source>
          <target state="translated">에서 &lt;strong&gt;시리얼&lt;/strong&gt; 모드 (모카의 기본), &lt;em&gt;전에 모든 테스트는 한 번만, 시작&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9614efcc9821cb0b57b279f39d194feb9f180d98" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;serial&lt;/strong&gt; mode, run &lt;em&gt;after all tests end, once only&lt;/em&gt;</source>
          <target state="translated">에서 &lt;strong&gt;시리얼&lt;/strong&gt; 모드 실행 &lt;em&gt;모든 테스트 종료 후 한 번만,&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="67c9a62a8265332e6a725438c6dbed5631b96c93" translate="yes" xml:space="preserve">
          <source>In Mocha v3.0.0 and newer, returning a &lt;code&gt;Promise&lt;/code&gt;&lt;em&gt;and&lt;/em&gt; calling &lt;code&gt;done()&lt;/code&gt; will result in an exception, as this is generally a mistake:</source>
          <target state="translated">모카 v3.0.0 및 최신, 복귀에 &lt;code&gt;Promise&lt;/code&gt; &lt;em&gt;하고&lt;/em&gt; 전화 &lt;code&gt;done()&lt;/code&gt; 이 일반적으로 실수로 예외가 발생합니다 :</target>
        </trans-unit>
        <trans-unit id="a82fe81019928d947305207b6fed8b078d28503c" translate="yes" xml:space="preserve">
          <source>In a browser, test files are loaded by &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags, and calling &lt;code&gt;mocha.run()&lt;/code&gt; begins at step 9 &lt;a href=&quot;#serial-mode&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">브라우저에서 테스트 파일은 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그 로로드되며 &lt;code&gt;mocha.run()&lt;/code&gt; 호출 은 &lt;a href=&quot;#serial-mode&quot;&gt;아래&lt;/a&gt; 9 단계에서 시작 됩니다 .</target>
        </trans-unit>
        <trans-unit id="e4957f53647ae1ea26d2f70a3e99bbe8d5ec37e7" translate="yes" xml:space="preserve">
          <source>In addition to chatting with us on &lt;a href=&quot;https://gitter.im/mochajs/mocha&quot;&gt;Gitter&lt;/a&gt;, for additional information such as using spies, mocking, and shared behaviours be sure to check out the &lt;a href=&quot;https://github.com/mochajs/mocha/wiki&quot;&gt;Mocha Wiki&lt;/a&gt; on GitHub. For discussions join the &lt;a href=&quot;https://groups.google.com/group/mochajs&quot;&gt;Google Group&lt;/a&gt;. For a running example of Mocha, view &lt;a href=&quot;https://mochajs.org/example/tests.html&quot;&gt;example/tests.html&lt;/a&gt;. For the JavaScript API, view the &lt;a href=&quot;https://mochajs.org/api/&quot;&gt;API documentation&lt;/a&gt; or the &lt;a href=&quot;https://github.com/mochajs/mocha/blob/master/lib/mocha.js#L51&quot;&gt;source&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://gitter.im/mochajs/mocha&quot;&gt;Gitter&lt;/a&gt; 에서 채팅하는 것 외에도 스파이 사용, 조롱 및 공유 동작과 같은 추가 정보 는 GitHub 에서 &lt;a href=&quot;https://github.com/mochajs/mocha/wiki&quot;&gt;Mocha Wiki&lt;/a&gt; 를 확인하십시오 . 토론을하려면 &lt;a href=&quot;https://groups.google.com/group/mochajs&quot;&gt;Google 그룹에&lt;/a&gt; 가입하십시오 . 실행중인 Mocha 예제는 &lt;a href=&quot;https://mochajs.org/example/tests.html&quot;&gt;example / tests.html을 참조하십시오&lt;/a&gt; . JavaScript API의 경우 &lt;a href=&quot;https://mochajs.org/api/&quot;&gt;API 문서&lt;/a&gt; 또는 &lt;a href=&quot;https://github.com/mochajs/mocha/blob/master/lib/mocha.js#L51&quot;&gt;소스를보십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="113261c9144546d287266b8d4fc8f96a2dc64e5b" translate="yes" xml:space="preserve">
          <source>In order to use desktop notifications with the command-line interface (CLI), you &lt;strong&gt;must&lt;/strong&gt; first install some platform-specific prerequisite software. Instructions for doing so can be found &lt;a href=&quot;https://github.com/mochajs/mocha/wiki/Growl-Notifications&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">명령 줄 인터페이스 (CLI)와 함께 데스크톱 알림을 사용 &lt;strong&gt;하려면&lt;/strong&gt; 먼저 플랫폼 별 필수 소프트웨어를 설치 &lt;strong&gt;해야합니다&lt;/strong&gt; . 이에 대한 지침은 &lt;a href=&quot;https://github.com/mochajs/mocha/wiki/Growl-Notifications&quot;&gt;여기&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a42ce5a3b0d434bafc81c71ae32f29a401394eb9" translate="yes" xml:space="preserve">
          <source>In parallel mode, Mocha does not guarantee the order in which test files will run, nor which worker process runs them.</source>
          <target state="translated">병렬 모드에서 Mocha는 테스트 파일이 실행되는 순서와이를 실행하는 작업자 프로세스를 보장하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ca75b29525e23bc10a3408dcdcb89b4d7499bf27" translate="yes" xml:space="preserve">
          <source>In serial mode, tests results will &amp;ldquo;stream&amp;rdquo; as they occur. In parallel mode, reporter output is &lt;em&gt;buffered&lt;/em&gt;; reporting will occur after each file is completed. In practice, the reporter output will appear in &amp;ldquo;chunks&amp;rdquo; (but will otherwise be identical). If a test file is particularly slow, there may be a significant pause while it&amp;rsquo;s running.</source>
          <target state="translated">직렬 모드에서는 테스트 결과가 발생할 때 &quot;스트리밍&quot;됩니다. 병렬 모드에서는 리포터 출력이 &lt;em&gt;버퍼링됩니다&lt;/em&gt; . 보고는 각 파일이 완료된 후에 발생합니다. 실제로 리포터 출력은 &quot;청크&quot;로 표시되지만 그렇지 않으면 동일합니다. 테스트 파일이 특히 느리면 실행 중에 상당한 일시 중지가있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f525656b6f1d74ec94d1d9cb9afa341a37e5e5a4" translate="yes" xml:space="preserve">
          <source>In some cases, color output will be explicitly suppressed by certain reporters outputting in a machine-readable format.</source>
          <target state="translated">경우에 따라 컴퓨터에서 읽을 수있는 형식으로 출력하는 특정 리포터에 의해 색상 출력이 명시 적으로 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="67289434324f9afc1b91df96836ee08191d5ccaa" translate="yes" xml:space="preserve">
          <source>In some cases, you may want a &lt;a href=&quot;#hooks&quot;&gt;hook&lt;/a&gt; before (or after) every test in every file. These are called &lt;em&gt;root hooks&lt;/em&gt;. Previous to v8.0.0, the way to accomplish this was to use &lt;code&gt;--file&lt;/code&gt; combined with root hooks (see &lt;a href=&quot;#root-hooks-are-not-global&quot;&gt;example above&lt;/a&gt;). This still works in v8.0.0, but &lt;em&gt;not&lt;/em&gt; when running tests in parallel mode! For that reason, running root hooks using this method is &lt;em&gt;strongly discouraged&lt;/em&gt;, and may be deprecated in the future.</source>
          <target state="translated">어떤 경우에는 모든 파일의 모든 테스트 전후에 &lt;a href=&quot;#hooks&quot;&gt;후크&lt;/a&gt; 를 원할 수 있습니다 . 이를 &lt;em&gt;루트 후크&lt;/em&gt; 라고 &lt;em&gt;합니다&lt;/em&gt; . v8.0.0 이전에는이를 수행하는 방법 은 루트 후크와 결합 된 &lt;code&gt;--file&lt;/code&gt; 을 사용하는 것이 었습니다 ( &lt;a href=&quot;#root-hooks-are-not-global&quot;&gt;위의 예 참조&lt;/a&gt; ). 이것은 v8.0.0에서 여전히 작동하지만 병렬 모드에서 테스트를 실행할 때는 작동 &lt;em&gt;하지 않습니다&lt;/em&gt; ! 따라서이 방법을 사용하여 루트 후크를 실행 &lt;em&gt;하는 것은 권장&lt;/em&gt; 되지 않으며 향후 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="01185b69a2c11773f1cd33b6b7ed8811ab0ff74f" translate="yes" xml:space="preserve">
          <source>In v3.0.0 or newer, a parameter passed to &lt;code&gt;this.timeout()&lt;/code&gt; greater than the &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/WindowTimers/setTimeout#Maximum_delay_value&quot;&gt;maximum delay value&lt;/a&gt; will cause the timeout to be disabled.</source>
          <target state="translated">v3.0.0 이상에서는 &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/WindowTimers/setTimeout#Maximum_delay_value&quot;&gt;최대 지연 값&lt;/a&gt; 보다 큰 &lt;code&gt;this.timeout()&lt;/code&gt; 전달 된 매개 변수로 인해 시간 초과가 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="bb973422bf445a4c17bb24b5232338e946e632b7" translate="yes" xml:space="preserve">
          <source>In v3.0.0 or newer, a parameter passed to &lt;code&gt;this.timeout()&lt;/code&gt; greater than the &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/WindowTimers/setTimeout#Maximum_delay_value&quot;&gt;maximum delay value&lt;/a&gt; will cause the timeout to be disabled. In v8.0.0 or newer, &lt;code&gt;this.enableTimeouts()&lt;/code&gt; has been removed. &lt;strong&gt;Warning:&lt;/strong&gt; With async tests if you disable timeouts via &lt;code&gt;this.timeout(0)&lt;/code&gt; and then do not call &lt;code&gt;done()&lt;/code&gt;, your test will exit silently.</source>
          <target state="translated">v3.0.0 이상에서는 &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/WindowTimers/setTimeout#Maximum_delay_value&quot;&gt;최대 지연 값&lt;/a&gt; 보다 큰 매개 변수를 &lt;code&gt;this.timeout()&lt;/code&gt; 전달 하면 시간 제한이 비활성화됩니다. v8.0.0 이상에서는 &lt;code&gt;this.enableTimeouts()&lt;/code&gt; 가 제거되었습니다. &lt;strong&gt;경고 :&lt;/strong&gt; 비동기 테스트에서 &lt;code&gt;this.timeout(0)&lt;/code&gt; 통해 시간 제한을 비활성화 한 다음 &lt;code&gt;done()&lt;/code&gt; 호출하지 않으면 테스트가 자동으로 종료됩니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2526253f77ad1393ef0e5ead8d9eeed17e0a233b" translate="yes" xml:space="preserve">
          <source>In your editor:</source>
          <target state="translated">에디터에서 :</target>
        </trans-unit>
        <trans-unit id="cf9c82da65b44e4184e1c5823378fdf93d0e9b32" translate="yes" xml:space="preserve">
          <source>Inclusive Tests</source>
          <target state="translated">포괄적 인 테스트</target>
        </trans-unit>
        <trans-unit id="fe49f05d2e68f4e9de00c0a17a8c0520bda7af2c" translate="yes" xml:space="preserve">
          <source>Install with &lt;a href=&quot;https://npmjs.org&quot;&gt;npm&lt;/a&gt; globally:</source>
          <target state="translated">전 세계적으로 &lt;a href=&quot;https://npmjs.org&quot;&gt;npm&lt;/a&gt; 으로 설치 :</target>
        </trans-unit>
        <trans-unit id="a4c1ada91c1fd76221cdea2ddc7d9dee8322c7e0" translate="yes" xml:space="preserve">
          <source>Install with &lt;a href=&quot;https://npmjs.org/&quot;&gt;npm&lt;/a&gt; globally:</source>
          <target state="translated">&lt;a href=&quot;https://npmjs.org/&quot;&gt;npm을 사용하여&lt;/a&gt; 전역 적으로 설치합니다 .</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="3c5884bc36e186bdfb5c6da9b3416c160cb3a88f" translate="yes" xml:space="preserve">
          <source>Instant ECMAScript modules via &lt;a href=&quot;https://npm.im/esm&quot;&gt;esm&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://npm.im/esm&quot;&gt;esm을&lt;/a&gt; 통한 즉각적인 ECMAScript 모듈</target>
        </trans-unit>
        <trans-unit id="8bb43f25f5daf5413d129ea4e321864de39cb645" translate="yes" xml:space="preserve">
          <source>Instead, use the global fixture to &lt;em&gt;start&lt;/em&gt; the database, and use &lt;a href=&quot;#root-hook-plugins&quot;&gt;root hook plugins&lt;/a&gt; or plain ol&amp;rsquo; &lt;a href=&quot;#hooks&quot;&gt;hooks&lt;/a&gt; to create a connection.</source>
          <target state="translated">대신, 글로벌 픽스쳐를 사용하여 데이터베이스 를 &lt;em&gt;시작&lt;/em&gt; 하고 &lt;a href=&quot;#root-hook-plugins&quot;&gt;루트 후크 플러그인&lt;/a&gt; 또는 일반 ol ' &lt;a href=&quot;#hooks&quot;&gt;후크&lt;/a&gt; 를 사용하여 연결을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="18153eab53fa2dde1d8f1722e14e384598c81f1a" translate="yes" xml:space="preserve">
          <source>Instruct your users to &lt;code&gt;--require &amp;lt;your-package&amp;gt;&lt;/code&gt; when running &lt;code&gt;mocha&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mocha&lt;/code&gt; 를 실행할 때 사용자에게 &lt;code&gt;--require &amp;lt;your-package&amp;gt;&lt;/code&gt; 를 지시하십시오 .</target>
        </trans-unit>
        <trans-unit id="b356313f979923fc829adb909098ed26a5a01aff" translate="yes" xml:space="preserve">
          <source>Interfaces</source>
          <target state="translated">Interfaces</target>
        </trans-unit>
        <trans-unit id="8721f6dcd0dde264ebd9e42e0b5068ba3b67e541" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s unlikely (but not impossible) to see a performance gain from a &lt;a href=&quot;#-jobs-count-j-count&quot;&gt;job count&lt;/a&gt;&lt;em&gt;greater than&lt;/em&gt; the number of available CPU cores. That said, &lt;em&gt;play around with the job count&lt;/em&gt;&amp;ndash;there&amp;rsquo;s no one-size-fits all, and the unique characteristics of your tests will determine the optimal number of jobs; it may even be that fewer is faster!</source>
          <target state="translated">사용 가능한 CPU 코어 &lt;a href=&quot;#-jobs-count-j-count&quot;&gt;수 &lt;/a&gt;&lt;em&gt;보다 많은 &lt;/em&gt;작업 수 에서 성능 향상을 볼 가능성은 거의 없지만 불가능하지는 않습니다 . 즉, &lt;em&gt;작업 수를 가지고 놀아보십시오. 모든 작업에&lt;/em&gt; 적합한 것은 없으며 테스트의 고유 한 특성에 따라 최적의 작업 수가 결정됩니다. 더 적은 것이 더 빠를 수도 있습니다!</target>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="a21d3253170de617a66bdbbbae1fd764d407b56b" translate="yes" xml:space="preserve">
          <source>JSON Stream</source>
          <target state="translated">JSON 스트림</target>
        </trans-unit>
        <trans-unit id="323c15dbe6740ee6540be2d0b506bd248ff8987b" translate="yes" xml:space="preserve">
          <source>JetBrains</source>
          <target state="translated">JetBrains</target>
        </trans-unit>
        <trans-unit id="48fa258637ea5552a14a49b941b25820f056133c" translate="yes" xml:space="preserve">
          <source>Just like a &lt;a href=&quot;#global-setup-fixtures&quot;&gt;global setup fixture&lt;/a&gt;, a &lt;em&gt;global teardown fixture&lt;/em&gt; can be created by exporting from a &amp;ldquo;required&amp;rdquo; script (we can put both types of fixtures in a single file):</source>
          <target state="translated">&lt;a href=&quot;#global-setup-fixtures&quot;&gt;글로벌 셋업 픽스쳐&lt;/a&gt; 와 마찬가지로, &quot;필수&quot;스크립트에서 익스포트 하여 &lt;em&gt;글로벌 분해 픽스처&lt;/em&gt; 를 생성 할 수 있습니다 (두 가지 유형의 픽스처를 단일 파일에 넣을 수 있습니다) :</target>
        </trans-unit>
        <trans-unit id="b1d5bc4319f7f8bf5b33719fb0fb6310897e8fa3" translate="yes" xml:space="preserve">
          <source>Landing Strip</source>
          <target state="translated">랜딩 스트립</target>
        </trans-unit>
        <trans-unit id="a9ce522cb0a03624969154fd5e6aceacb8a3f714" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution 4.0 International License.</source>
          <target state="translated">Creative Commons Attribution 4.0 국제 라이센스에 따라 라이센스가 부여됩니다.</target>
        </trans-unit>
        <trans-unit id="81f9391a167e38836e51f7e1986bb3e553e765ae" translate="yes" xml:space="preserve">
          <source>Likewise, subprocesses may throw uncaught exceptions. When used with &lt;code&gt;--allow-uncaught&lt;/code&gt;, Mocha will &amp;ldquo;bubble&amp;rdquo; this exception to the main process, but still must shut down its processes.</source>
          <target state="translated">마찬가지로 하위 프로세스는 포착되지 않은 예외를 throw 할 수 있습니다. &lt;code&gt;--allow-uncaught&lt;/code&gt; 와 함께 사용하면 Mocha는이 예외를 주 프로세스에 &quot;버블 링&quot;하지만 여전히 해당 프로세스를 종료해야합니다.</target>
        </trans-unit>
        <trans-unit id="f6899ebf0ca0ce4a62efdba629268fd960c1e19f" translate="yes" xml:space="preserve">
          <source>Limited Reporter API for Third-Party Reporters</source>
          <target state="translated">타사 리포터를위한 제한된 리포터 API</target>
        </trans-unit>
        <trans-unit id="a1fffaaafb7cc996685bceb829c053cc4f7de43d" translate="yes" xml:space="preserve">
          <source>List</source>
          <target state="translated">List</target>
        </trans-unit>
        <trans-unit id="e2e7cdf994b1f36e0c1ff70085b82cf490fcf620" translate="yes" xml:space="preserve">
          <source>List of paths or globs to exclude from watching. Defaults to &lt;code&gt;node_modules&lt;/code&gt; and &lt;code&gt;.git&lt;/code&gt;.</source>
          <target state="translated">감시에서 제외 할 경로 또는 glob 목록입니다. 기본값은 &lt;code&gt;node_modules&lt;/code&gt; 및 &lt;code&gt;.git&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8aaf196cfbb7dfe32223cb96128030e54c8ff4ec" translate="yes" xml:space="preserve">
          <source>List of paths or globs to watch when &lt;code&gt;--watch&lt;/code&gt; is set. If a file matching the given glob changes or is added or removed mocha will rerun all tests.</source>
          <target state="translated">&lt;code&gt;--watch&lt;/code&gt; 가 설정 되었을 때 감시 할 경로 또는 glob 목록입니다 . 주어진 glob과 일치하는 파일이 변경되거나 추가되거나 제거되면 모카가 모든 테스트를 다시 실행합니다.</target>
        </trans-unit>
        <trans-unit id="213ad534e48a66b1d96fe2770c363132e3e66f0d" translate="yes" xml:space="preserve">
          <source>Loading all &lt;code&gt;--require&lt;/code&gt;&amp;rsquo;d modules</source>
          <target state="translated">모든 &lt;code&gt;--require&lt;/code&gt; 'd 모듈 로드</target>
        </trans-unit>
        <trans-unit id="67148720a2f6dd571482ec7ac555f1af79ff50c2" translate="yes" xml:space="preserve">
          <source>Loads options from config files, if present</source>
          <target state="translated">구성 파일에서 옵션로드 (있는 경우)</target>
        </trans-unit>
        <trans-unit id="4e836fdc2572ab23d5dc8c36bd613ac6b0f82d63" translate="yes" xml:space="preserve">
          <source>Manual</source>
          <target state="translated">Manual</target>
        </trans-unit>
        <trans-unit id="d6972503fc6dbefead6db71035b39bbfe6a70a94" translate="yes" xml:space="preserve">
          <source>Many reporters will display test duration and flag tests that are slow (default: 75ms), as shown here with the SPEC reporter:</source>
          <target state="translated">많은 리포터는 SPEC 리포터와 함께 다음과 같이 느린 테스트 기간 및 플래그 테스트를 표시합니다 (기본값 : 75ms).</target>
        </trans-unit>
        <trans-unit id="bfb0bedadfed8788447822b5ff9afc80a1eced19" translate="yes" xml:space="preserve">
          <source>Many reporters will display test duration, as well as flagging tests that are slow, as shown here with the &amp;ldquo;spec&amp;rdquo; reporter:</source>
          <target state="translated">많은&amp;ldquo;기자들&amp;rdquo;은&amp;ldquo;spec&amp;rdquo;기자와 함께 다음과 같이 테스트 기간과 느린 테스트 플래그를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="23e67fceae0d77dd571dd25695fc0499faf1bb77" translate="yes" xml:space="preserve">
          <source>Markdown</source>
          <target state="translated">Markdown</target>
        </trans-unit>
        <trans-unit id="40de0d4de887a374168bf79e72c7aa0fa4594d6e" translate="yes" xml:space="preserve">
          <source>Merging</source>
          <target state="translated">Merging</target>
        </trans-unit>
        <trans-unit id="25dfffe3f78bab0eaf08f3ee0b6c62bbd83f0ad3" translate="yes" xml:space="preserve">
          <source>Migrating Tests to use Root Hook Plugins</source>
          <target state="translated">루트 후크 플러그인을 사용하도록 테스트 마이그레이션</target>
        </trans-unit>
        <trans-unit id="fccc1d9fe0568e41bbd2e9d56a1b492a94042e8b" translate="yes" xml:space="preserve">
          <source>Migrating a Library to use Root Hook PLugins</source>
          <target state="translated">루트 후크 PLugins를 사용하도록 라이브러리 마이그레이션</target>
        </trans-unit>
        <trans-unit id="7eb0cee888ab55b559592d38eec027e9118d7d35" translate="yes" xml:space="preserve">
          <source>Min</source>
          <target state="translated">Min</target>
        </trans-unit>
        <trans-unit id="814d5c9075ac58da08deb4e3d88f6089a78f380d" translate="yes" xml:space="preserve">
          <source>Mocha</source>
          <target state="translated">Mocha</target>
        </trans-unit>
        <trans-unit id="287a609f38b64c689ddaf29e9b3f917002c77bcc" translate="yes" xml:space="preserve">
          <source>Mocha &lt;em&gt;discovers&lt;/em&gt; test files; when given no files or directories, it finds files with extensions &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.mjs&lt;/code&gt; or &lt;code&gt;.cjs&lt;/code&gt; in the &lt;code&gt;test&lt;/code&gt; directory (but not its children), relative to the current working directory</source>
          <target state="translated">Mocha &lt;em&gt;는&lt;/em&gt; 테스트 파일을 &lt;em&gt;발견&lt;/em&gt; 합니다. 파일이나 디렉토리가 지정되지 않은 경우 현재 작업 디렉토리에 상대적인 &lt;code&gt;test&lt;/code&gt; 디렉토리 ( &lt;code&gt;.cjs&lt;/code&gt; 에서 확장자가 &lt;code&gt;.js&lt;/code&gt; , &lt;code&gt;.mjs&lt;/code&gt; 또는 .cjs 인 파일을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="2fcfac04215b5cfde8e6b64f5182684c5ddff757" translate="yes" xml:space="preserve">
          <source>Mocha Sidebar (VS Code)</source>
          <target state="translated">모카 사이드 바 (VS 코드)</target>
        </trans-unit>
        <trans-unit id="5de0788e58a0f831b2cb8edaf51627958b83ac3a" translate="yes" xml:space="preserve">
          <source>Mocha allows you to define custom reporters. For more information see the &lt;a href=&quot;https://github.com/mochajs/mocha/wiki/Third-party-reporters&quot;&gt;wiki&lt;/a&gt;.</source>
          <target state="translated">Mocha를 사용하면 맞춤형 리포터를 정의 할 수 있습니다. 자세한 내용은 &lt;a href=&quot;https://github.com/mochajs/mocha/wiki/Third-party-reporters&quot;&gt;wiki를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6c79a6b78a1b13f1d9fff2ae10078198d72760ac" translate="yes" xml:space="preserve">
          <source>Mocha allows you to define custom reporters. For more information see the &lt;a href=&quot;https://github.com/mochajs/mocha/wiki/Third-party-reporters&quot;&gt;wiki&lt;/a&gt;. An example is the &lt;a href=&quot;https://github.com/travisjeffery/mocha-teamcity-reporter&quot;&gt;TeamCity reporter&lt;/a&gt;.</source>
          <target state="translated">모카는 사용자 정의 기자를 정의 할 수 있습니다. 자세한 정보는 &lt;a href=&quot;https://github.com/mochajs/mocha/wiki/Third-party-reporters&quot;&gt;위키를&lt;/a&gt; 참조하십시오 . 예를 들어 &lt;a href=&quot;https://github.com/travisjeffery/mocha-teamcity-reporter&quot;&gt;TeamCity 기자가&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="708b4dde60c446e1bdc294ce04216900a0da361b" translate="yes" xml:space="preserve">
          <source>Mocha allows you to use any assertion library you wish. In the above example, we&amp;rsquo;re using Node.js&amp;rsquo; built-in &lt;a href=&quot;https://nodejs.org/api/assert.html&quot;&gt;assert&lt;/a&gt; module &amp;mdash; but generally, if it throws an &lt;code&gt;Error&lt;/code&gt;, it will work! This means you can use libraries such as:</source>
          <target state="translated">Mocha를 사용하면 원하는 어설 션 라이브러리를 사용할 수 있습니다. 위의 예제에서 우리는 Node.js의 내장 &lt;a href=&quot;https://nodejs.org/api/assert.html&quot;&gt;assert&lt;/a&gt; 모듈을 사용하고 있지만 일반적으로 &lt;code&gt;Error&lt;/code&gt; 를 던지면 작동합니다! 이는 다음과 같은 라이브러리를 사용할 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="3f59749d3a9db27b1ed50c290daac3034aeba7fb" translate="yes" xml:space="preserve">
          <source>Mocha allows you to use any assertion library you wish. In the above example, we&amp;rsquo;re using Node.js&amp;rsquo; built-in &lt;a href=&quot;https://nodejs.org/api/assert.html&quot;&gt;assert&lt;/a&gt; module&amp;ndash;but generally, if it throws an &lt;code&gt;Error&lt;/code&gt;, it will work! This means you can use libraries such as:</source>
          <target state="translated">Mocha를 사용하면 원하는 어설 션 라이브러리를 사용할 수 있습니다. 위의 예에서 Node.js의 내장 &lt;a href=&quot;https://nodejs.org/api/assert.html&quot;&gt;어설트&lt;/a&gt; 모듈을 사용하고 있지만 일반적으로 &lt;code&gt;Error&lt;/code&gt; 가 발생하면 작동합니다! 이는 다음과 같은 라이브러리를 사용할 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="11f0312c6827362ac37d284985c6699eb8a33d70" translate="yes" xml:space="preserve">
          <source>Mocha creates a pool of subprocesses (&amp;ldquo;workers&amp;rdquo;)</source>
          <target state="translated">Mocha는 하위 프로세스 풀 ( &quot;작업자&quot;)을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="e7c4e152770dd7db227ea5ce0c15dd7acf5fe835" translate="yes" xml:space="preserve">
          <source>Mocha currently requires Node.js v6.x or newer.</source>
          <target state="translated">Mocha는 현재 Node.js v6.x 이상이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="6ed14c3f96f0224d0ebd75e97e233948c7900996" translate="yes" xml:space="preserve">
          <source>Mocha does not retry test failures by default.</source>
          <target state="translated">Mocha는 기본적으로 테스트 실패를 재 시도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ab5befc661f26d652bd2453168561dc3fe23f80e" translate="yes" xml:space="preserve">
          <source>Mocha examples</source>
          <target state="translated">모카 예</target>
        </trans-unit>
        <trans-unit id="0772eac59cdf125df3ec7b9a51743662da41eb9d" translate="yes" xml:space="preserve">
          <source>Mocha loads modules specified by &lt;code&gt;--require&lt;/code&gt;</source>
          <target state="translated">Mocha는 &lt;code&gt;--require&lt;/code&gt; 로 지정된 모듈을로드합니다.</target>
        </trans-unit>
        <trans-unit id="e4549e0da2843af2164ef0f1363635cac6c7a2b1" translate="yes" xml:space="preserve">
          <source>Mocha options can be set via &lt;code&gt;mocha.setup()&lt;/code&gt;. Examples:</source>
          <target state="translated">모카 옵션은 &lt;code&gt;mocha.setup()&lt;/code&gt; 통해 설정할 수 있습니다 . 예 :</target>
        </trans-unit>
        <trans-unit id="9297b98a984e8553b0adbe91eb57e874ac4bb809" translate="yes" xml:space="preserve">
          <source>Mocha prints a final summary/epilog, if applicable</source>
          <target state="translated">Mocha는 해당되는 경우 최종 요약 / 에필로그를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="bab9d6d16dc47c72160e2e30ebeed18b236c593e" translate="yes" xml:space="preserve">
          <source>Mocha processes any command-line options provided (see section on &lt;a href=&quot;#merging&quot;&gt;configuration merging&lt;/a&gt; for details)</source>
          <target state="translated">Mocha는 제공된 모든 명령 줄 옵션을 처리합니다 (자세한 내용은 &lt;a href=&quot;#merging&quot;&gt;구성 병합&lt;/a&gt; 섹션 참조).</target>
        </trans-unit>
        <trans-unit id="c9790eb8ea7d71a62db4b3faa0acda2f1f003d89" translate="yes" xml:space="preserve">
          <source>Mocha reporters adjust to the terminal window, and always disable ANSI-escape coloring when the stdio streams are not associated with a TTY.</source>
          <target state="translated">Mocha 기자는 터미널 창에 맞게 조정하고 stdio 스트림이 TTY와 연결되지 않은 경우 항상 ANSI 이스케이프 색상을 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="e176b47cfa38e973a84574f31e1d80024d351b93" translate="yes" xml:space="preserve">
          <source>Mocha runs &lt;a href=&quot;#global-setup-fixtures&quot;&gt;global setup fixtures&lt;/a&gt;, if any</source>
          <target state="translated">Mocha는 &lt;a href=&quot;#global-setup-fixtures&quot;&gt;전역 설정 픽스쳐를&lt;/a&gt; 실행 합니다.</target>
        </trans-unit>
        <trans-unit id="b4137072306ff47d8eab010421911cf11d354569" translate="yes" xml:space="preserve">
          <source>Mocha runs &lt;a href=&quot;#global-teardown-fixtures&quot;&gt;global teardown fixtures&lt;/a&gt;, if any</source>
          <target state="translated">Mocha는 &lt;a href=&quot;#global-teardown-fixtures&quot;&gt;글로벌 분해 픽스쳐를&lt;/a&gt; 실행 합니다.</target>
        </trans-unit>
        <trans-unit id="d8db60c9e0cda6e115805304c42eac4e4413bf8a" translate="yes" xml:space="preserve">
          <source>Mocha runs in the browser. Every release of Mocha will have new builds of &lt;code&gt;./mocha.js&lt;/code&gt; and &lt;code&gt;./mocha.css&lt;/code&gt; for use in the browser.</source>
          <target state="translated">모카는 브라우저에서 실행됩니다. 모든 Mocha 릴리스 에는 브라우저에서 사용할 수 있도록 &lt;code&gt;./mocha.js&lt;/code&gt; 및 &lt;code&gt;./mocha.css&lt;/code&gt; 의 새로운 빌드가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7dd99024461b2b6a248306582f406ce8c6bee1ab" translate="yes" xml:space="preserve">
          <source>Mocha supports ES modules only from Node.js v12.11.0 and above. To enable this in versions smaller than 13.2.0, you need to add &lt;code&gt;--experimental-modules&lt;/code&gt; when running Mocha. From version 13.2.0 of Node.js, you can use ES modules without any flags. (Mocha &lt;em&gt;will&lt;/em&gt; load ESM even in Node v10, but this is not officially supported. Use at your own risk.)</source>
          <target state="translated">Mocha는 Node.js v12.11.0 이상에서만 ES 모듈을 지원합니다. 13.2.0보다 작은 버전에서이를 활성화하려면 Mocha를 실행할 때 &lt;code&gt;--experimental-modules&lt;/code&gt; 를 추가해야합니다 . Node.js 버전 13.2.0부터 플래그없이 ES 모듈을 사용할 수 있습니다. (Mocha &lt;em&gt;는&lt;/em&gt; Node v10에서도 ESM &lt;em&gt;을&lt;/em&gt; 로드하지만 이는 공식적으로 지원되지 않습니다. 위험은 사용자가 사용하십시오.)</target>
        </trans-unit>
        <trans-unit id="da372a80572f080564d6c93df43a58d330f38b7a" translate="yes" xml:space="preserve">
          <source>Mocha supports configuration files, typical of modern command-line tools, in several formats:</source>
          <target state="translated">Mocha는 최신 명령 줄 도구의 일반적인 구성 파일을 여러 형식으로 지원합니다.</target>
        </trans-unit>
        <trans-unit id="8ab8951ae8901ff2237752a7f95918ec25a7ad6f" translate="yes" xml:space="preserve">
          <source>Mocha supports the &lt;code&gt;err.expected&lt;/code&gt; and &lt;code&gt;err.actual&lt;/code&gt; properties of any thrown &lt;code&gt;AssertionError&lt;/code&gt;s from an assertion library. Mocha will attempt to display the difference between what was expected, and what the assertion actually saw. Here&amp;rsquo;s an example of a &amp;ldquo;string&amp;rdquo; diff using &lt;code&gt;--inline-diffs&lt;/code&gt;:</source>
          <target state="translated">Mocha는 어설 션 라이브러리에서 throw 된 &lt;code&gt;AssertionError&lt;/code&gt; 의 &lt;code&gt;err.expected&lt;/code&gt; 및 &lt;code&gt;err.actual&lt;/code&gt; 속성을 지원합니다 . Mocha는 예상했던 것과 주장이 실제로 본 것 사이의 차이를 표시하려고 시도합니다. 다음은 &lt;code&gt;--inline-diffs&lt;/code&gt; 를 사용하는 &quot;문자열&quot;diff의 예입니다 .</target>
        </trans-unit>
        <trans-unit id="bdaf5d42996c9782025035e4e23b2ead0e71a84c" translate="yes" xml:space="preserve">
          <source>Mocha supports the &lt;code&gt;err.expected&lt;/code&gt; and &lt;code&gt;err.actual&lt;/code&gt; properties of any thrown &lt;code&gt;AssertionError&lt;/code&gt;s from an assertion library. Mocha will attempt to display the difference between what was expected, and what the assertion actually saw. Here&amp;rsquo;s an example of a &amp;ldquo;string&amp;rdquo; diff:</source>
          <target state="translated">Mocha는 어설 션 라이브러리에서 발생 된 &lt;code&gt;AssertionError&lt;/code&gt; 의 &lt;code&gt;err.expected&lt;/code&gt; 및 &lt;code&gt;err.actual&lt;/code&gt; 속성을 지원합니다 . Mocha는 예상 한 것과 어설 션이 실제로 본 것과의 차이점을 표시하려고 시도합니다. 다음은 &quot;문자열&quot;diff의 예입니다.</target>
        </trans-unit>
        <trans-unit id="c473b5963e755c0c6b39db8a3b9791e0404c17c4" translate="yes" xml:space="preserve">
          <source>Mocha supports writing your tests as ES modules, and not just using CommonJS. For example:</source>
          <target state="translated">Mocha는 CommonJS를 사용하는 것이 아니라 ES 모듈로 테스트 작성을 지원합니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="3c4226a01875649b69bbca76bc2fae290f2eeac0" translate="yes" xml:space="preserve">
          <source>Mocha tests</source>
          <target state="translated">모카 테스트</target>
        </trans-unit>
        <trans-unit id="87f541d0cdbe34e52860be4c1e4b2bb2c2f52c39" translate="yes" xml:space="preserve">
          <source>Mocha validates any custom reporters or interfaces which were loaded via &lt;code&gt;--require&lt;/code&gt; or otherwise</source>
          <target state="translated">Mocha는 &lt;code&gt;--require&lt;/code&gt; 또는 기타 를 통해로드 된 모든 사용자 정의 리포터 또는 인터페이스를 검증합니다.</target>
        </trans-unit>
        <trans-unit id="93c7b4139417d867cc23bf0646d1947de4a19676" translate="yes" xml:space="preserve">
          <source>Mocha will also &lt;em&gt;merge&lt;/em&gt; any options found in &lt;code&gt;package.json&lt;/code&gt; into its run-time configuration. In case of conflict, the priority is:</source>
          <target state="translated">Mocha는 또한 &lt;code&gt;package.json&lt;/code&gt; 에 있는 모든 옵션을 런타임 구성 에 &lt;em&gt;병합&lt;/em&gt; 합니다. 충돌이 발생하는 경우 우선 순위는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0f7dfeec8c535188507dfaa3c0bba47bfed5d172" translate="yes" xml:space="preserve">
          <source>Mocha will spawn &lt;code&gt;node&lt;/code&gt; in a child process, executing itself with these flags</source>
          <target state="translated">Mocha는 하위 프로세스에서 &lt;code&gt;node&lt;/code&gt; 를 생성 하여 이러한 플래그로 자체 실행합니다.</target>
        </trans-unit>
        <trans-unit id="986c77af424daa79d6d9089aa97d53b7cb4f282b" translate="yes" xml:space="preserve">
          <source>Mocha&amp;rsquo;s &amp;ldquo;interface&amp;rdquo; system allows developers to choose their style of DSL. Mocha has &lt;strong&gt;BDD&lt;/strong&gt;, &lt;strong&gt;TDD&lt;/strong&gt;, &lt;strong&gt;Exports&lt;/strong&gt;, &lt;strong&gt;QUnit&lt;/strong&gt; and &lt;strong&gt;Require&lt;/strong&gt;-style interfaces.</source>
          <target state="translated">개발자는 Mocha의 &quot;인터페이스&quot;시스템을 통해 DSL 스타일을 선택할 수 있습니다. Mocha에는 &lt;strong&gt;BDD&lt;/strong&gt; , &lt;strong&gt;TDD&lt;/strong&gt; , &lt;strong&gt;Exports&lt;/strong&gt; , &lt;strong&gt;QUnit&lt;/strong&gt; 및 &lt;strong&gt;Require- &lt;/strong&gt;&lt;strong&gt;style&lt;/strong&gt; 인터페이스가 있습니다.</target>
        </trans-unit>
        <trans-unit id="49250389453f58301ad0eba3d64949d472a5723d" translate="yes" xml:space="preserve">
          <source>Mocha&amp;rsquo;s own diff output does not conform to any known standards, and is designed to be human-readable.</source>
          <target state="translated">Mocha의 자체 diff 출력은 알려진 표준을 따르지 않으며 사람이 읽을 수 있도록 설계되었습니다.</target>
        </trans-unit>
        <trans-unit id="bf7140895edb98336b241d1656e4a43d361390dc" translate="yes" xml:space="preserve">
          <source>Modules required in this manner are expected to do work synchronously; Mocha won&amp;rsquo;t wait for async tasks in a required module to finish.</source>
          <target state="translated">이러한 방식으로 필요한 모듈은 동기식으로 작동합니다. Mocha는 필수 모듈의 비동기 작업이 완료 될 때까지 기다리지 않습니다.</target>
        </trans-unit>
        <trans-unit id="22ffffbccfcf501db363d7084eeed3e3deb28b71" translate="yes" xml:space="preserve">
          <source>More Information</source>
          <target state="translated">추가 정보</target>
        </trans-unit>
        <trans-unit id="44127da4eea42d02eb47f9d6ee26e3edc3b0c4ac" translate="yes" xml:space="preserve">
          <source>Multiple Root Hook Plugins</source>
          <target state="translated">다중 루트 후크 플러그인</target>
        </trans-unit>
        <trans-unit id="49dd3278f3142d6bc6ed7ae12817ec4eb2bca99d" translate="yes" xml:space="preserve">
          <source>Multiple Root Hooks in a Single Plugin</source>
          <target state="translated">단일 플러그인의 여러 루트 후크</target>
        </trans-unit>
        <trans-unit id="967cf423ecdb1dcf4e1830a57deba26d2a5ea874" translate="yes" xml:space="preserve">
          <source>Multiple root hook plugins can be registered by using &lt;code&gt;--require&lt;/code&gt; multiple times. For example, to register the root hooks in &lt;code&gt;hooks-a.js&lt;/code&gt; and &lt;code&gt;hooks-b.js&lt;/code&gt;, use &lt;code&gt;--require hooks-a.js --require hooks-b.js&lt;/code&gt;. These will be registered (and run) &lt;em&gt;in order&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;--require&lt;/code&gt; 를 여러 번 사용하여 여러 루트 후크 플러그인을 등록 할 수 있습니다 . 예를 들어,의 루트 후크 등록 &lt;code&gt;hooks-a.js&lt;/code&gt; 와 &lt;code&gt;hooks-b.js&lt;/code&gt; 사용 &lt;code&gt;--require hooks-a.js --require hooks-b.js&lt;/code&gt; . 이들은 &lt;em&gt;순서대로&lt;/em&gt; 등록 (및 실행) &lt;em&gt;됩니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="3f68f9966dc1d68c27fc4b38b143fe810c063543" translate="yes" xml:space="preserve">
          <source>Multiple root hooks can be defined in a single plugin, for organizational purposes. For example:</source>
          <target state="translated">조직화를 위해 단일 플러그인에 여러 루트 후크를 정의 할 수 있습니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="6c52e7dc563fddcb0d886eb437b9615fb181fd48" translate="yes" xml:space="preserve">
          <source>Mutually exclusive with &lt;code&gt;--fgrep&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--fgrep&lt;/code&gt; 와 상호 배타적입니다 .</target>
        </trans-unit>
        <trans-unit id="3ff33a1595c3ec6d3abd0b7dbca6d62427b5404f" translate="yes" xml:space="preserve">
          <source>Mutually exclusive with &lt;code&gt;--grep&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--grep&lt;/code&gt; 와 상호 배타적입니다 .</target>
        </trans-unit>
        <trans-unit id="4b36a2c132e81ee9b31db5bae72d1bd5a715cc46" translate="yes" xml:space="preserve">
          <source>NORMAL: Tests that run exceeding half of the threshold (but still within it) will show the duration in yellow.</source>
          <target state="translated">정상 : 임계 값의 절반을 초과하여 실행되는 테스트 (여전히 그 안에 있음)는 기간을 노란색으로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="83a68b2aac803eae75c8e9ca3b857b89849d26d5" translate="yes" xml:space="preserve">
          <source>New in v8.2.0</source>
          <target state="translated">v8.2.0의 새로운 기능</target>
        </trans-unit>
        <trans-unit id="6c4b366b3f1a2c28863fafd7c16dc8cf4ac83e57" translate="yes" xml:space="preserve">
          <source>No Browser Support</source>
          <target state="translated">브라우저 지원 없음</target>
        </trans-unit>
        <trans-unit id="8e54a6b27986024c9809b900cff76d0322d9d1dd" translate="yes" xml:space="preserve">
          <source>Node-based notifications</source>
          <target state="translated">노드 기반 알림</target>
        </trans-unit>
        <trans-unit id="b1294abbb6777171397b209d393f6bc1f61cc3dd" translate="yes" xml:space="preserve">
          <source>Node.JS native ESM support</source>
          <target state="translated">Node.JS 네이티브 ESM 지원</target>
        </trans-unit>
        <trans-unit id="47aeadc2705b587ce5621779f4ae5628aab74b19" translate="yes" xml:space="preserve">
          <source>Node.JS native ESM support does not work with &lt;a href=&quot;https://npm.im/esm&quot;&gt;esm&lt;/a&gt; module</source>
          <target state="translated">Node.JS 기본 ESM 지원이 &lt;a href=&quot;https://npm.im/esm&quot;&gt;esm&lt;/a&gt; 모듈에서 작동하지 않음</target>
        </trans-unit>
        <trans-unit id="2dc566b7308c0409ae1e66ce7d3a02e2c115bd3a" translate="yes" xml:space="preserve">
          <source>Node.JS native ESM support still has status: &lt;strong&gt;Stability: 1 - Experimental&lt;/strong&gt;</source>
          <target state="translated">Node.JS 기본 ESM 지원은 여전히 ​​상태 : &lt;strong&gt;안정성 : 1-실험적&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5f3fb53f775a3fe7181cf34a8bb3c4ff3e4e016f" translate="yes" xml:space="preserve">
          <source>Not all reporters accept options.</source>
          <target state="translated">모든 기자가 옵션을 받아들이는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="bdd399ee6d41973cc3256c843186c0ecdcad1f2a" translate="yes" xml:space="preserve">
          <source>Note: A test that executes for &lt;em&gt;half&lt;/em&gt; of the &amp;ldquo;slow&amp;rdquo; time will be highlighted &lt;em&gt;in yellow&lt;/em&gt; with the default &lt;code&gt;spec&lt;/code&gt; reporter; a test that executes for entire &amp;ldquo;slow&amp;rdquo; time will be highlighted &lt;em&gt;in red&lt;/em&gt;.</source>
          <target state="translated">참고 : &quot;느린&quot;시간의 &lt;em&gt;절반 동안&lt;/em&gt; 실행되는 테스트 는 기본 &lt;code&gt;spec&lt;/code&gt; 보고 와 함께 &lt;em&gt;노란색&lt;/em&gt; 으로 강조 표시 &lt;em&gt;됩니다&lt;/em&gt; . 전체 &quot;느린&quot;시간 동안 실행되는 테스트 &lt;em&gt;는 빨간색&lt;/em&gt; 으로 강조 표시 &lt;em&gt;됩니다&lt;/em&gt; .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ae74630834f71ce25232180db59d806585c0114b" translate="yes" xml:space="preserve">
          <source>Note: synchronous (blocking) tests are also bound by the timeout, but they will not complete until the code stops blocking. Infinite loops will still be infinite loops!</source>
          <target state="translated">참고 : 동기 (차단) 테스트도 시간 제한에 의해 제한되지만 코드가 차단을 중지 할 때까지 완료되지 않습니다. 무한 루프는 여전히 무한 루프입니다!</target>
        </trans-unit>
        <trans-unit id="bb5007a647a28bc95392786dd174c3dbe43ede2a" translate="yes" xml:space="preserve">
          <source>Now, before Mocha loads and runs your tests, it will execute the above global setup fixture, starting a server for testing. This won&amp;rsquo;t shut &lt;em&gt;down&lt;/em&gt; the server when Mocha is done, however! To do that, use a &lt;a href=&quot;#global-teardown-fixtures&quot;&gt;&lt;em&gt;global teardown fixture&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">이제 Mocha가 테스트를로드하고 실행하기 전에 위의 전역 설정 픽스처를 실행하여 테스트 용 서버를 시작합니다. 이 종료되지 않습니다 &lt;em&gt;아래&lt;/em&gt; 모카이 완료되면하지만, 서버! 이를 위해 &lt;a href=&quot;#global-teardown-fixtures&quot;&gt;&lt;em&gt;전역 분해 고정물을&lt;/em&gt;&lt;/a&gt; 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="d178d5c2e5c837309098fe81d7dfb445cfcf5e3d" translate="yes" xml:space="preserve">
          <source>Nyan</source>
          <target state="translated">Nyan</target>
        </trans-unit>
        <trans-unit id="aafb1c4d33f5d9572aa52e071a71ddbdec4b3b15" translate="yes" xml:space="preserve">
          <source>Once enabled, when your root suite completes test execution, a desktop notification should appear informing you whether your tests passed or failed.</source>
          <target state="translated">활성화되면 루트 스위트가 테스트 실행을 완료하면 테스트의 통과 또는 실패 여부를 알려주는 데스크톱 알림이 나타납니다.</target>
        </trans-unit>
        <trans-unit id="6c9c3c2d7cdb1a5c91ca482eb4a85c1635a147a9" translate="yes" xml:space="preserve">
          <source>Only interested in the first exception? use &lt;code&gt;--bail&lt;/code&gt;!</source>
          <target state="translated">첫 번째 예외에만 관심이 있습니까? &lt;code&gt;--bail&lt;/code&gt; 을 사용 하십시오 !</target>
        </trans-unit>
        <trans-unit id="3ba3541936eec20e5463500c9ca6c3e3941a12ea" translate="yes" xml:space="preserve">
          <source>Options which can safely be repeated (e.g., &lt;code&gt;--require&lt;/code&gt;) will be &lt;em&gt;concatenated&lt;/em&gt;, with higher-priorty configuration sources appearing earlier in the list. For example, a &lt;code&gt;.mocharc.json&lt;/code&gt; containing &lt;code&gt;&quot;require&quot;: &quot;bar&quot;&lt;/code&gt;, coupled with execution of &lt;code&gt;mocha --require foo&lt;/code&gt;, would cause Mocha to require &lt;code&gt;foo&lt;/code&gt;, then &lt;code&gt;bar&lt;/code&gt;, in that order.</source>
          <target state="translated">안전 (예를 들어, 반복 될 수있다 옵션 &lt;code&gt;--require&lt;/code&gt; )됩니다 &lt;em&gt;연결된&lt;/em&gt; 높은에는 우선 순위 구성 소스가 이전 목록에 나타나는와 함께. 예를 들어, &lt;code&gt;&quot;require&quot;: &quot;bar&quot;&lt;/code&gt; 포함 하는 &lt;code&gt;.mocharc.json&lt;/code&gt; 을 &lt;code&gt;mocha --require foo&lt;/code&gt; 의 실행과 결합 하면 Mocha 는 순서대로 &lt;code&gt;foo&lt;/code&gt; 를 요구 한 다음 &lt;code&gt;bar&lt;/code&gt; 를 요구합니다 .</target>
        </trans-unit>
        <trans-unit id="170cef265c96be8bcb76d1e2fa57cce18bef2e96" translate="yes" xml:space="preserve">
          <source>Or a specific test-case:</source>
          <target state="translated">또는 특정 테스트 사례 :</target>
        </trans-unit>
        <trans-unit id="a4d0bf96cde98e3c84a4f0d4097a998defcdb311" translate="yes" xml:space="preserve">
          <source>Otherwise, Mocha does not spawn a child process</source>
          <target state="translated">그렇지 않으면 Mocha는 자식 프로세스를 생성하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e14df1a5fbbce6753795dda343cb05532b89bf2f" translate="yes" xml:space="preserve">
          <source>Parallel Mode</source>
          <target state="translated">병렬 모드</target>
        </trans-unit>
        <trans-unit id="d7d2ee35b0f27af06281eb3d2977ade0f170e622" translate="yes" xml:space="preserve">
          <source>Parallel Tests</source>
          <target state="translated">병렬 테스트</target>
        </trans-unit>
        <trans-unit id="f753f35db50d0728ebd2231b8150444264f25d5a" translate="yes" xml:space="preserve">
          <source>Parallel mode is only available in Node.js, for now.</source>
          <target state="translated">병렬 모드는 현재 Node.js에서만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a2a4ff140f36ba6cea6036cce72651d01be400c3" translate="yes" xml:space="preserve">
          <source>Parallel tests should work out-of-the box for many use cases. However, you must be aware of some important implications of the behavior.</source>
          <target state="translated">병렬 테스트는 많은 사용 사례에서 즉시 작동해야합니다. 그러나 동작의 몇 가지 중요한 의미를 알고 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="648c367a6a72cc9ba9319737869be7ad94adca1e" translate="yes" xml:space="preserve">
          <source>Passing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;arrow functions&lt;/a&gt; (&amp;ldquo;lambdas&amp;rdquo;) to Mocha is discouraged. Lambdas lexically bind &lt;code&gt;this&lt;/code&gt; and cannot access the Mocha context. For example, the following code will fail:</source>
          <target state="translated">전달 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;화살표 기능&lt;/a&gt; 모카에 ( &quot;람다하는&quot;) 좌절된다. 람다는 &lt;code&gt;this&lt;/code&gt; 어휘 적으로 바인딩 하며 Mocha 컨텍스트에 액세스 할 수 없습니다. 예를 들어 다음 코드는 실패합니다.</target>
        </trans-unit>
        <trans-unit id="6a812a4a6cf2257fac172680e85581f081b21e40" translate="yes" xml:space="preserve">
          <source>Passing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;arrow functions&lt;/a&gt; (aka &amp;ldquo;lambdas&amp;rdquo;) to Mocha is discouraged. Lambdas lexically bind &lt;code&gt;this&lt;/code&gt; and cannot access the Mocha context. For example, the following code will fail:</source>
          <target state="translated">전달 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;화살표 기능&lt;/a&gt; (일명 &quot;람다&quot;) 모카으로는 권장되지 않습니다. 람다 어휘 바인딩 &lt;code&gt;this&lt;/code&gt; 와 모카 컨텍스트에 액세스 할 수 없습니다. 예를 들어 다음 코드는 실패합니다.</target>
        </trans-unit>
        <trans-unit id="9451e4aac5f5c3fcea46531060b150e2b9a36c06" translate="yes" xml:space="preserve">
          <source>Pending Tests</source>
          <target state="translated">보류 테스트</target>
        </trans-unit>
        <trans-unit id="f6f87e4ab77e9426de1be27e566eec10532e5475" translate="yes" xml:space="preserve">
          <source>Pending tests will be included in the test results, and marked as pending. A pending test is not considered a failed test.</source>
          <target state="translated">보류중인 테스트는 테스트 결과에 포함되며 보류 중으로 표시됩니다. 보류중인 테스트는 실패한 테스트로 간주되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="73f0d84fea438dc5c76e0254b1b8f04c3404e01d" translate="yes" xml:space="preserve">
          <source>Prepend &lt;code&gt;--v8-&lt;/code&gt; to any flag listed in the output of &lt;code&gt;node --v8-options&lt;/code&gt; (excluding &lt;code&gt;--v8-options&lt;/code&gt; itself) to use it.</source>
          <target state="translated">&lt;code&gt;node --v8-options&lt;/code&gt; ( &lt;code&gt;--v8-options&lt;/code&gt; 자체 제외) 의 출력에 나열된 플래그 앞에 &lt;code&gt;--v8-&lt;/code&gt; 을 추가 하여 사용합니다.</target>
        </trans-unit>
        <trans-unit id="6037078963a82ab9952637e38bf310d2bc92819c" translate="yes" xml:space="preserve">
          <source>Previous to v3.0.0, &lt;code&gt;.only()&lt;/code&gt; used string matching to decide which tests to execute. As of v3.0.0, this is no longer the case. In v3.0.0 or newer, &lt;code&gt;.only()&lt;/code&gt; can be used multiple times to define a subset of tests to run:</source>
          <target state="translated">v3.0.0 이전에는 .only &lt;code&gt;.only()&lt;/code&gt; 문자열 일치를 사용하여 실행할 테스트를 결정했습니다. v3.0.0부터는 더 이상 그렇지 않습니다. v3.0.0 이상에서 .only &lt;code&gt;.only()&lt;/code&gt; 를 여러 번 사용하여 실행할 테스트 서브 세트를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="39dcce5dda129e6deb8d281b467ecb90c983fb57" translate="yes" xml:space="preserve">
          <source>Previous to v3.0.0, &lt;code&gt;.only()&lt;/code&gt; used string matching to decide which tests to execute; this is no longer the case. In v3.0.0 or newer, &lt;code&gt;.only()&lt;/code&gt; can be used multiple times to define a subset of tests to run:</source>
          <target state="translated">v3.0.0 이전에는 .only &lt;code&gt;.only()&lt;/code&gt; 문자열 일치를 사용하여 실행할 테스트를 결정했습니다. 이것은 더 이상 사실이 아닙니다. v3.0.0 이상에서는 .only &lt;code&gt;.only()&lt;/code&gt; 를 여러 번 사용하여 실행할 테스트의 하위 집합을 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c0ad90bec3127568428d4c04d5d1ea52f6ba12f" translate="yes" xml:space="preserve">
          <source>Priorities</source>
          <target state="translated">Priorities</target>
        </trans-unit>
        <trans-unit id="1b90271d66cf2d3ac755d49a550fe5f31b9eca5f" translate="yes" xml:space="preserve">
          <source>Progress</source>
          <target state="translated">Progress</target>
        </trans-unit>
        <trans-unit id="1057d25725efa0c5e1b90beb792ae81b7b520fc4" translate="yes" xml:space="preserve">
          <source>Provide options specific to a reporter in &lt;code&gt;&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt; format, e.g., &lt;code&gt;--reporter tap --reporter-option tapVersion=13&lt;/code&gt;.</source>
          <target state="translated">기자에게 특정한 옵션을 &lt;code&gt;&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt; 형식으로 제공하십시오 (예 : &lt;code&gt;--reporter tap --reporter-option tapVersion=13&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="6392d1964def385ce87ea1765cc583aeecab5db6" translate="yes" xml:space="preserve">
          <source>QUnit</source>
          <target state="translated">QUnit</target>
        </trans-unit>
        <trans-unit id="6415dfe66679323c7468378d5797c9a1440e5d47" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;#inclusive-tests&quot;&gt;inclusive tests section&lt;/a&gt; for an example of conditionally marking a test as pending via &lt;code&gt;this.skip()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this.skip()&lt;/code&gt; 를 통해 테스트를 보류 중으로 조건부로 표시하는 예제 는 &lt;a href=&quot;#inclusive-tests&quot;&gt;포괄적 인 테스트 섹션&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="065082ec90d58ac01e4f147aae2024dbd1935ef3" translate="yes" xml:space="preserve">
          <source>Real live example code:</source>
          <target state="translated">실제 예제 코드 :</target>
        </trans-unit>
        <trans-unit id="d250236e6c5faf479c711fb8d886a454122d727d" translate="yes" xml:space="preserve">
          <source>Registering any root hook plugins</source>
          <target state="translated">루트 후크 플러그인 등록</target>
        </trans-unit>
        <trans-unit id="ead6a8ca68bb946090f57e3b82b0fa2db8851658" translate="yes" xml:space="preserve">
          <source>Remember: you can define &amp;ldquo;requires&amp;rdquo; in a &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;configuration file&lt;/a&gt;.</source>
          <target state="translated">기억하십시오 : &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;구성 파일&lt;/a&gt; 에서 &quot;requires&quot;를 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d9b0547bbe4d7960ad3f069506ad5e19f5d438e8" translate="yes" xml:space="preserve">
          <source>Repeat steps 1 through 6 from &lt;a href=&quot;#serial-mode&quot;&gt;Serial Mode&lt;/a&gt; above, skipping reporter validation</source>
          <target state="translated">리포터 유효성 검사를 건너 뛰고 위의 &lt;a href=&quot;#serial-mode&quot;&gt;직렬 모드&lt;/a&gt; 에서 1 ~ 6 단계를 반복합니다.</target>
        </trans-unit>
        <trans-unit id="e05267ae1ae3a5d6b6fb1fa790452bf8a8320f7b" translate="yes" xml:space="preserve">
          <source>Reporter Limitations</source>
          <target state="translated">리포터 제한</target>
        </trans-unit>
        <trans-unit id="4a28165bd85132c82d26771bbd29abef42ef343a" translate="yes" xml:space="preserve">
          <source>Reporters</source>
          <target state="translated">Reporters</target>
        </trans-unit>
        <trans-unit id="c9e579d6d1ba09edc7af3d2bf94ca4c747181eb4" translate="yes" xml:space="preserve">
          <source>Reporting</source>
          <target state="translated">Reporting</target>
        </trans-unit>
        <trans-unit id="bff5c4dd0585a4f0e68311b683e36c85f477b138" translate="yes" xml:space="preserve">
          <source>Require</source>
          <target state="translated">Require</target>
        </trans-unit>
        <trans-unit id="87e46e5efd728f1dba64ede084b5f5e5ca260783" translate="yes" xml:space="preserve">
          <source>Require a module before loading the user interface or test files. This is useful for:</source>
          <target state="translated">사용자 인터페이스 또는 테스트 파일을로드하기 전에 모듈이 필요합니다. 이것은 다음과 같은 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="2784cbc347244be07f57821f9a68b75cac35261c" translate="yes" xml:space="preserve">
          <source>Requires either &lt;code&gt;--grep&lt;/code&gt; or &lt;code&gt;--fgrep&lt;/code&gt; (but not both).</source>
          <target state="translated">&lt;code&gt;--grep&lt;/code&gt; 또는 &lt;code&gt;--fgrep&lt;/code&gt; (둘다는 아님)가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="126887cfc9375d4bb17ab466f2e878ac14670e33" translate="yes" xml:space="preserve">
          <source>Requires extra software to be installed; see the &lt;a href=&quot;https://npm.im/growl&quot;&gt;growl module&amp;rsquo;s docs&lt;/a&gt; for more information.</source>
          <target state="translated">추가 소프트웨어를 설치해야합니다. 자세한 내용은 &lt;a href=&quot;https://npm.im/growl&quot;&gt;growl 모듈의 문서&lt;/a&gt; 를 참조하세요.</target>
        </trans-unit>
        <trans-unit id="a24820b0e29378887da645fa4f79e8c6d5f66fd5" translate="yes" xml:space="preserve">
          <source>Rerun tests on file changes.</source>
          <target state="translated">파일 변경에 대한 테스트를 다시 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="bd98500ec4fd41f88c5295448e5485d12db76f89" translate="yes" xml:space="preserve">
          <source>Retries failed tests &lt;code&gt;n&lt;/code&gt; times.</source>
          <target state="translated">실패한 테스트를 &lt;code&gt;n&lt;/code&gt; 번 재 시도합니다 .</target>
        </trans-unit>
        <trans-unit id="1d778624bd69fa07fabf3003c8ae159e173f0408" translate="yes" xml:space="preserve">
          <source>Retry Tests</source>
          <target state="translated">테스트 재시도</target>
        </trans-unit>
        <trans-unit id="2f24826aefead136f2bfd6cf38c89e1ac573df7e" translate="yes" xml:space="preserve">
          <source>Root Hook Plugins</source>
          <target state="translated">루트 후크 플러그인</target>
        </trans-unit>
        <trans-unit id="cbb272024920ec3b51902a8f8db50512b3a470a1" translate="yes" xml:space="preserve">
          <source>Root Hook Plugins Can Export a Function</source>
          <target state="translated">루트 후크 플러그인은 함수를 내보낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cfe598fd52513d7d20ed6c32dc51e8304e1c287e" translate="yes" xml:space="preserve">
          <source>Root Hooks Are Not Global</source>
          <target state="translated">루트 후크는 전역이 아닙니다</target>
        </trans-unit>
        <trans-unit id="7efe385285d12d68cd51922dbce187a2074a80dd" translate="yes" xml:space="preserve">
          <source>Root hooks work with any interface, but &lt;em&gt;the property names do not change&lt;/em&gt;. In other words, if you are using the &lt;code&gt;tdd&lt;/code&gt; interface, &lt;code&gt;suiteSetup&lt;/code&gt; maps to &lt;code&gt;beforeAll&lt;/code&gt;, and &lt;code&gt;setup&lt;/code&gt; maps to &lt;code&gt;beforeEach&lt;/code&gt;.</source>
          <target state="translated">루트 후크는 모든 인터페이스에서 작동하지만 &lt;em&gt;속성 이름은 변경되지 않습니다&lt;/em&gt; . 당신이 사용하는 경우 즉, &lt;code&gt;tdd&lt;/code&gt; 인터페이스를 &lt;code&gt;suiteSetup&lt;/code&gt; 는 매핑 &lt;code&gt;beforeAll&lt;/code&gt; 및 &lt;code&gt;setup&lt;/code&gt; 매핑 &lt;code&gt;beforeEach&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="25785cb889647cb80cd687be550b38d7f7bb2fa7" translate="yes" xml:space="preserve">
          <source>Root-Level Hooks</source>
          <target state="translated">루트 레벨 훅</target>
        </trans-unit>
        <trans-unit id="4dc6baa8ed35e401c3c76b62f93ec1655235ebb1" translate="yes" xml:space="preserve">
          <source>Run Cycle Overview</source>
          <target state="translated">실행주기 개요</target>
        </trans-unit>
        <trans-unit id="96178dac694530aaf45b04c80796027d6cd794d4" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;mocha --require test/hooks.js test/test.spec.js&lt;/code&gt; will run as before (and is now ready to be used with &lt;a href=&quot;#-parallel-p&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">실행 &lt;code&gt;mocha --require test/hooks.js test/test.spec.js&lt;/code&gt; 이전과 실행 (지금은 함께 사용할 준비가됩니다 &lt;a href=&quot;#-parallel-p&quot;&gt; &lt;code&gt;--parallel&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="74dc676b7dbb52e4370ff466a15d00f6536664dd" translate="yes" xml:space="preserve">
          <source>Running Mocha in the Browser</source>
          <target state="translated">브라우저에서 Mocha 실행</target>
        </trans-unit>
        <trans-unit id="ea6d2060afdbe73da58690e947d0359f3ad8a922" translate="yes" xml:space="preserve">
          <source>Running tests in parallel mode will naturally use more system resources. The OS may take extra time to schedule and complete some operations, depending on system load. For this reason, the timeouts of &lt;em&gt;individual tests&lt;/em&gt; may need to be increased either &lt;a href=&quot;#-timeout-ms-t-ms&quot;&gt;globally&lt;/a&gt; or &lt;a href=&quot;#timeouts&quot;&gt;otherwise&lt;/a&gt;.</source>
          <target state="translated">병렬 모드에서 테스트를 실행하면 자연스럽게 더 많은 시스템 리소스가 사용됩니다. OS는 시스템 부하에 따라 일부 작업을 예약하고 완료하는 데 추가 시간이 걸릴 수 있습니다. 이러한 이유로 &lt;em&gt;개별 테스트&lt;/em&gt; 의 시간 초과는 &lt;a href=&quot;#-timeout-ms-t-ms&quot;&gt;전역 적으로&lt;/a&gt; 또는 &lt;a href=&quot;#timeouts&quot;&gt;다른 방식 &lt;/a&gt;으로 늘려야 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="71674a60d50c138461eacf95cfe2fab80c6d2435" translate="yes" xml:space="preserve">
          <source>Running the above test will give you the below error message:</source>
          <target state="translated">위의 테스트를 실행하면 아래와 같은 오류 메시지가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="0a3de173e416a5b986833c6bb304dcd4fc78a4f6" translate="yes" xml:space="preserve">
          <source>SLOW: Tests that run exceeding the threshold will show the duration in red.</source>
          <target state="translated">SLOW : 임계 값을 초과하여 실행되는 테스트는 지속 시간을 빨간색으로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="e4952df9fbdd89bff5001d0e49cb40065ddd5528" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;--extension&lt;/code&gt; for defining which files are considered test files.</source>
          <target state="translated">테스트 파일로 간주되는 파일을 정의하려면 &lt;code&gt;--extension&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="553ee09f100ae39f8a3fa8c7318da6a02b5987e5" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://nodejs.org/en/docs/inspector/&quot;&gt;Node.js guide to debugging&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://nodejs.org/en/docs/inspector/&quot;&gt;디버깅에&lt;/a&gt; 대한 Node.js 안내서를 참조하십시오</target>
        </trans-unit>
        <trans-unit id="9d817f0f3dedececb710435e1c4e7b83803ba707" translate="yes" xml:space="preserve">
          <source>See this &lt;a href=&quot;https://gist.github.com/reggi/475793ea1846affbcfe8&quot;&gt;tutorial&lt;/a&gt; on using globs.</source>
          <target state="translated">glob 사용에 대한 이 &lt;a href=&quot;https://gist.github.com/reggi/475793ea1846affbcfe8&quot;&gt;튜토리얼&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ef8d01a6ebb07998d32e338b3f855163e999fdf6" translate="yes" xml:space="preserve">
          <source>Serial Mode</source>
          <target state="translated">직렬 모드</target>
        </trans-unit>
        <trans-unit id="fb9bc0e8eb2d2a1244e30e88e2759e92b67ca429" translate="yes" xml:space="preserve">
          <source>Set up a test script in package.json:</source>
          <target state="translated">package.json에서 테스트 스크립트를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="88b657e4b99750b71d07aeaba8eb52406f40546c" translate="yes" xml:space="preserve">
          <source>Some assertion libraries will supply their own diffs, in which case Mocha&amp;rsquo;s will not be used, regardless of the default value.</source>
          <target state="translated">일부 어설 션 라이브러리는 자체 diff를 제공하며,이 경우 기본값에 관계없이 Mocha가 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e3aed3813cd1d21207e380d65f283f43f45fe33e" translate="yes" xml:space="preserve">
          <source>Some shells support recursive matching by using the &lt;code&gt;**&lt;/code&gt; wildcard in a glob. Bash &amp;gt;= 4.3 supports this with the &lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html&quot;&gt;&lt;code&gt;globstar&lt;/code&gt; option&lt;/a&gt; which &lt;a href=&quot;https://github.com/mochajs/mocha/pull/3348#issuecomment-383937247&quot;&gt;must be enabled&lt;/a&gt; to get the same results as passing the &lt;code&gt;--recursive&lt;/code&gt; option (&lt;a href=&quot;http://zsh.sourceforge.net/Doc/Release/Expansion.html#Recursive-Globbing&quot;&gt;ZSH&lt;/a&gt; and &lt;a href=&quot;https://fishshell.com/docs/current/#expand-wildcard&quot;&gt;Fish&lt;/a&gt; support this by default). With recursive matching enabled, the following is the same as passing &lt;code&gt;--recursive&lt;/code&gt;:</source>
          <target state="translated">일부 쉘 은 glob에서 &lt;code&gt;**&lt;/code&gt; 와일드 카드를 사용하여 재귀 일치를 지원 합니다. 와 배쉬&amp;gt; = 4.3 지원이 &lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html&quot;&gt; &lt;code&gt;globstar&lt;/code&gt; 의 옵션 &lt;/a&gt;&lt;a href=&quot;https://github.com/mochajs/mocha/pull/3348#issuecomment-383937247&quot;&gt;을 활성화해야합니다&lt;/a&gt; 통과와 같은 결과를 얻을 수 &lt;code&gt;--recursive&lt;/code&gt; 옵션 ( &lt;a href=&quot;http://zsh.sourceforge.net/Doc/Release/Expansion.html#Recursive-Globbing&quot;&gt;zsh을&lt;/a&gt; 하고 &lt;a href=&quot;https://fishshell.com/docs/current/#expand-wildcard&quot;&gt;물고기가&lt;/a&gt; 기본적으로이 기능을 지원 참조). 재귀 일치를 사용하면 다음과 같이 &lt;code&gt;--recursive&lt;/code&gt; 를 전달하는 것과 같습니다.</target>
        </trans-unit>
        <trans-unit id="68c99b625528d51dbbda97411da51053ec41ceed" translate="yes" xml:space="preserve">
          <source>Some shells support recursive matching by using the globstar (&lt;code&gt;**&lt;/code&gt;) wildcard. Bash &amp;gt;= 4.3 supports this with the &lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html&quot;&gt;&lt;code&gt;globstar&lt;/code&gt; option&lt;/a&gt; which &lt;a href=&quot;https://github.com/mochajs/mocha/pull/3348#issuecomment-383937247&quot;&gt;must be enabled&lt;/a&gt; to get the same results as passing the &lt;code&gt;--recursive&lt;/code&gt; option (&lt;a href=&quot;http://zsh.sourceforge.net/Doc/Release/Expansion.html#Recursive-Globbing&quot;&gt;ZSH&lt;/a&gt; and &lt;a href=&quot;https://fishshell.com/docs/current/#expand-wildcard&quot;&gt;Fish&lt;/a&gt; support this by default). With recursive matching enabled, the following is the same as passing &lt;code&gt;--recursive&lt;/code&gt;:</source>
          <target state="translated">일부 셸은 globstar ( &lt;code&gt;**&lt;/code&gt; ) 와일드 카드를 사용하여 재귀 일치를 지원 합니다. 와 배쉬&amp;gt; = 4.3 지원이 &lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html&quot;&gt; &lt;code&gt;globstar&lt;/code&gt; 의 옵션 &lt;/a&gt;&lt;a href=&quot;https://github.com/mochajs/mocha/pull/3348#issuecomment-383937247&quot;&gt;을 활성화해야합니다&lt;/a&gt; 통과와 같은 결과를 얻을 수 &lt;code&gt;--recursive&lt;/code&gt; 옵션 ( &lt;a href=&quot;http://zsh.sourceforge.net/Doc/Release/Expansion.html#Recursive-Globbing&quot;&gt;zsh을&lt;/a&gt; 하고 &lt;a href=&quot;https://fishshell.com/docs/current/#expand-wildcard&quot;&gt;물고기가&lt;/a&gt; 기본적으로이 기능을 지원 참조). 재귀 일치가 활성화 된 경우 다음은 &lt;code&gt;--recursive&lt;/code&gt; 전달과 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="c466f5a7311f3406efc466242ea0f79ed69b3030" translate="yes" xml:space="preserve">
          <source>Some types of tests are &lt;em&gt;not&lt;/em&gt; so well-suited to run in parallel. For example, extremely timing-sensitive tests, or tests which make I/O requests to a limited pool of resources (such as opening ports, or automating browser windows, hitting a test DB, or remote server, etc.).</source>
          <target state="translated">일부 유형의 테스트는 병렬 실행에 적합 &lt;em&gt;하지 않습니다&lt;/em&gt; . 예를 들어, 매우 타이밍에 민감한 테스트 또는 제한된 리소스 풀에 대한 I / O 요청을 수행하는 테스트 (예 : 포트 열기, 브라우저 창 자동화, 테스트 DB 또는 원격 서버 적중 등).</target>
        </trans-unit>
        <trans-unit id="8b0963c0b08d73b3c27d46c59538484136612c0e" translate="yes" xml:space="preserve">
          <source>Sort test files (by absolute path) using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort&quot;&gt;Array.prototype.sort&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort&quot;&gt;Array.prototype.sort를&lt;/a&gt; 사용하여 테스트 파일 (절대 경로 기준)을 정렬합니다 .</target>
        </trans-unit>
        <trans-unit id="8d89530314527c8d7d9d9cb95ec6f5bdd921a1b9" translate="yes" xml:space="preserve">
          <source>Spec</source>
          <target state="translated">Spec</target>
        </trans-unit>
        <trans-unit id="9b415cbf3c6d6e1b1fca4881c8d72b7f491a9a75" translate="yes" xml:space="preserve">
          <source>Specifies the test case timeout, defaulting to two (2) seconds (2000 milliseconds). Tests taking longer than this amount of time will be marked as failed.</source>
          <target state="translated">테스트 케이스 제한 시간을 지정하며 기본값은 2 초 (2000 밀리 초)입니다. 이 시간보다 오래 걸리는 테스트는 실패로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="bc3e3590e34c5723bef3b0b8f869fa10928242fe" translate="yes" xml:space="preserve">
          <source>Specifies the test-case timeout, defaulting to 2 seconds. To override you may pass the timeout in milliseconds, or a value with the &lt;code&gt;s&lt;/code&gt; suffix, ex: &lt;code&gt;--timeout 2s&lt;/code&gt; or &lt;code&gt;--timeout 2000&lt;/code&gt; would be equivalent.</source>
          <target state="translated">테스트 케이스 시간 초과를 기본값으로 2 초로 지정합니다. 당신이 밀리 초 단위로 시간 제한, 또는에 값을 전달할 수 무시하려면 &lt;code&gt;s&lt;/code&gt; : 접미사, 예를 &lt;code&gt;--timeout 2s&lt;/code&gt; 또는 &lt;code&gt;--timeout 2000&lt;/code&gt; 해당하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="bbc6e6211485d0e48ad0772d10769d1dc8b7e1cb" translate="yes" xml:space="preserve">
          <source>Specify an explicit path to a &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;&lt;code&gt;package.json&lt;/code&gt; file&lt;/a&gt; (ostensibly containing configuration in a &lt;code&gt;mocha&lt;/code&gt; property).</source>
          <target state="translated">&lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt; &lt;code&gt;package.json&lt;/code&gt; 파일에&lt;/a&gt; 대한 명시 적 경로를 지정 합니다 ( &lt;code&gt;mocha&lt;/code&gt; 속성에 구성이 포함되어 있음 ).</target>
        </trans-unit>
        <trans-unit id="d0b4248bfba022dec509ab1dd2b821a1c601c898" translate="yes" xml:space="preserve">
          <source>Specify an explicit path to a &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;configuration file&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;구성 파일에&lt;/a&gt; 대한 명시 적 경로를 지정 합니다 .</target>
        </trans-unit>
        <trans-unit id="7f7499c19bd41d4e91b1e49668a06a3e3e456aa8" translate="yes" xml:space="preserve">
          <source>Specify the &amp;ldquo;slow&amp;rdquo; test threshold in milliseconds. Mocha uses this to highlight test cases that are taking too long. &amp;ldquo;Slow&amp;rdquo; tests are not considered failures.</source>
          <target state="translated">&quot;느린&quot;테스트 임계 값을 밀리 초 단위로 지정합니다. Mocha는 이것을 사용하여 너무 오래 걸리는 테스트 케이스를 강조합니다. &quot;느린&quot;테스트는 실패로 간주되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="98a2ec177a17b29fd0e23e1b0c56a42c28684fcb" translate="yes" xml:space="preserve">
          <source>Specify the &amp;ldquo;slow&amp;rdquo; test threshold, defaulting to 75ms. Mocha uses this to highlight test-cases that are taking too long.</source>
          <target state="translated">&quot;느린&quot;테스트 임계 값을 지정합니다 (기본값은 75ms). Mocha는이를 사용하여 너무 오래 걸리는 테스트 사례를 강조 표시합니다.</target>
        </trans-unit>
        <trans-unit id="4bd6358a505658da055c6097ae4cf0171a7ea2f0" translate="yes" xml:space="preserve">
          <source>Specify the reporter that will be used, defaulting to &lt;code&gt;spec&lt;/code&gt;.</source>
          <target state="translated">사용할보고자를 지정하십시오 . 기본값은 &lt;code&gt;spec&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2f356fa8fda7ec85397cfe67654ec87707495aa4" translate="yes" xml:space="preserve">
          <source>Specifying &lt;code&gt;--extension&lt;/code&gt; will &lt;em&gt;remove&lt;/em&gt;&lt;code&gt;.js&lt;/code&gt; as a test file extension; use &lt;code&gt;--extension js&lt;/code&gt; to re-add it. For example, to load &lt;code&gt;.mjs&lt;/code&gt; and &lt;code&gt;.js&lt;/code&gt; test files, you must supply &lt;code&gt;--extension mjs --extension js&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--extension&lt;/code&gt; 을 지정 하면 &lt;code&gt;.js&lt;/code&gt; 가 테스트 파일 확장자로 &lt;em&gt;제거&lt;/em&gt; 됩니다. &lt;code&gt;--extension js&lt;/code&gt; 를 사용 하여 다시 추가하십시오. 예를 들어 &lt;code&gt;.mjs&lt;/code&gt; 및 &lt;code&gt;.js&lt;/code&gt; 테스트 파일 을로드 하려면 &lt;code&gt;--extension mjs --extension js&lt;/code&gt; 를 제공해야합니다 .</target>
        </trans-unit>
        <trans-unit id="1ab760041938fe0f99f4aa4d5801b855de0b183d" translate="yes" xml:space="preserve">
          <source>Starting with the &amp;ldquo;root&amp;rdquo; suite, Mocha executes:</source>
          <target state="translated">&quot;루트&quot;스위트로 시작하여 Mocha는 다음을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="6c73fccb7fe636cee1ab6961e06dbbe94714876b" translate="yes" xml:space="preserve">
          <source>Suggested workarounds:</source>
          <target state="translated">제안 된 해결 방법 :</target>
        </trans-unit>
        <trans-unit id="c4ceaad1f510ef5ea705ba3585d2de1d4a13cb21" translate="yes" xml:space="preserve">
          <source>Suite-level</source>
          <target state="translated">Suite-level</target>
        </trans-unit>
        <trans-unit id="de6db89ceed0133d6ad5521c06e4b825b9904621" translate="yes" xml:space="preserve">
          <source>Suite-level timeouts may be applied to entire test &amp;ldquo;suites&amp;rdquo;, or disabled via &lt;code&gt;this.timeout(0)&lt;/code&gt;. This will be inherited by all nested suites and test-cases that do not override the value.</source>
          <target state="translated">스위트 레벨 타임 아웃은 전체 테스트&amp;ldquo;스위트&amp;rdquo;에 적용되거나 &lt;code&gt;this.timeout(0)&lt;/code&gt; 통해 비활성화 될 수 있습니다 . 이것은 값을 재정의하지 않는 모든 중첩 된 스위트 및 테스트 케이스에 의해 상속됩니다.</target>
        </trans-unit>
        <trans-unit id="3c2ff3b3d96a22f0b23ce441a04c0a0c2fa45884" translate="yes" xml:space="preserve">
          <source>SuperAgent</source>
          <target state="translated">SuperAgent</target>
        </trans-unit>
        <trans-unit id="3c8dc3c357e48b97bb72efa9edaf9b8260cf8b2f" translate="yes" xml:space="preserve">
          <source>Suppose, for example, you have &amp;ldquo;api&amp;rdquo; related tests, as well as &amp;ldquo;app&amp;rdquo; related tests, as shown in the following snippet; One could use &lt;code&gt;--grep api&lt;/code&gt; or &lt;code&gt;--grep app&lt;/code&gt; to run one or the other. The same goes for any other part of a suite or test-case title, &lt;code&gt;--grep users&lt;/code&gt; would be valid as well, or even &lt;code&gt;--grep GET&lt;/code&gt;.</source>
          <target state="translated">예를 들어 다음 스 니펫에 표시된 것처럼 &quot;앱&quot;관련 테스트뿐만 아니라 &quot;api&quot;관련 테스트가 있다고 가정합니다. &lt;code&gt;--grep api&lt;/code&gt; 또는 &lt;code&gt;--grep app&lt;/code&gt; 을 사용하여 둘 중 하나를 실행할 수 있습니다 . 스위트 또는 테스트 케이스 타이틀의 다른 부분 에서도 &lt;code&gt;--grep GET&lt;/code&gt; 입니다. &lt;code&gt;--grep users&lt;/code&gt; 도 유효합니다 . 심지어 --grep GET 도 마찬가지 입니다.</target>
        </trans-unit>
        <trans-unit id="db4a04db5ccf9a8f908403383aa7476a2855f541" translate="yes" xml:space="preserve">
          <source>Synchronous Code</source>
          <target state="translated">동기 코드</target>
        </trans-unit>
        <trans-unit id="fb7bc71b84dc9f961e5538c6dc0bfa7d98e5f671" translate="yes" xml:space="preserve">
          <source>TAP</source>
          <target state="translated">TAP</target>
        </trans-unit>
        <trans-unit id="a296b616f4529b6139114abe32f60836e9b40b52" translate="yes" xml:space="preserve">
          <source>TDD</source>
          <target state="translated">TDD</target>
        </trans-unit>
        <trans-unit id="25a384ac7f1ccbd1ae98fd61e3d4538dda73ffd4" translate="yes" xml:space="preserve">
          <source>TL;DR: If your tests hang after an upgrade to Mocha v4.0.0 or newer, use &lt;code&gt;--exit&lt;/code&gt; for a quick (though not necessarily recommended) fix.</source>
          <target state="translated">&lt;code&gt;--exit&lt;/code&gt; Mocha v4.0.0 이상으로 업그레이드 한 후 테스트가 중단되면 --exit 를 사용 하여 빠른 (반드시 권장되는 것은 아님) 수정을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="4e5c1cb438afe66a7a3ce7f0162632afd0f40816" translate="yes" xml:space="preserve">
          <source>Take the following example:</source>
          <target state="translated">다음 예제를 보자.</target>
        </trans-unit>
        <trans-unit id="588c3b1c9652c548f1c6199935b4385b4dbbb56a" translate="yes" xml:space="preserve">
          <source>Test Duration Variability</source>
          <target state="translated">테스트 기간 가변성</target>
        </trans-unit>
        <trans-unit id="a409f6715749fb7791d6ffd2aab513693cb9efe3" translate="yes" xml:space="preserve">
          <source>Test Fixture Decision-Tree Wizard Thing</source>
          <target state="translated">테스트 픽스처 결정 트리 마법사 사물</target>
        </trans-unit>
        <trans-unit id="d7d96b74e9a4844754af7453ceddbe412fc31872" translate="yes" xml:space="preserve">
          <source>Test duration</source>
          <target state="translated">테스트 기간</target>
        </trans-unit>
        <trans-unit id="bb44ae6194c78c2c4be82582a5c6deacef63b80a" translate="yes" xml:space="preserve">
          <source>Test files can be specified using &lt;code&gt;spec&lt;/code&gt;, e.g., &lt;code&gt;&quot;spec&quot;: &quot;test/**/*.spec.js&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;spec&lt;/code&gt; 을 사용하여 테스트 파일을 지정할 수 있습니다 ( 예 : &lt;code&gt;&quot;spec&quot;: &quot;test/**/*.spec.js&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="be87d0d93a34c7b89bdaae494c3d7e44fe3f5756" translate="yes" xml:space="preserve">
          <source>Test harnesses</source>
          <target state="translated">테스트 하네스</target>
        </trans-unit>
        <trans-unit id="9992314b32825a3bd8d55164b1d035efa115fc21" translate="yes" xml:space="preserve">
          <source>Test-level</source>
          <target state="translated">Test-level</target>
        </trans-unit>
        <trans-unit id="2da7e47e548df7e7571fdfa271f2a99f9c93ed57" translate="yes" xml:space="preserve">
          <source>Test-specific timeouts may also be applied, or the use of &lt;code&gt;this.timeout(0)&lt;/code&gt; to disable timeouts all together:</source>
          <target state="translated">테스트 별 타임 아웃을 적용하거나 &lt;code&gt;this.timeout(0)&lt;/code&gt; 을 사용하여 타임 아웃을 모두 비활성화 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="547d8ac3e28e4f0acda600f6e096dac65de667c6" translate="yes" xml:space="preserve">
          <source>Testing Mocha</source>
          <target state="translated">모카 테스트</target>
        </trans-unit>
        <trans-unit id="bab18b9734400748db3af2cebab49889718863f6" translate="yes" xml:space="preserve">
          <source>Testing asynchronous code with Mocha could not be simpler! Simply invoke the callback when your test is complete. By adding a callback (usually named &lt;code&gt;done&lt;/code&gt;) to &lt;code&gt;it()&lt;/code&gt;, Mocha will know that it should wait for this function to be called to complete the test. This callback accepts both an &lt;code&gt;Error&lt;/code&gt; instance (or subclass thereof) &lt;em&gt;or&lt;/em&gt; a falsy value; anything else will cause a failed test.</source>
          <target state="translated">Mocha로 비동기 코드를 테스트하는 것은 더 간단 할 수 없습니다! 테스트가 완료되면 콜백을 호출하면됩니다. 콜백 (일반적으로 &lt;code&gt;done&lt;/code&gt; 이라고 함 )을 &lt;code&gt;it()&lt;/code&gt; 하면 Mocha는 테스트를 완료하기 위해이 함수가 호출 될 때까지 기다려야한다는 것을 알게됩니다. 이 콜백은 &lt;code&gt;Error&lt;/code&gt; 인스턴스 (또는 그 서브 클래스) &lt;em&gt;또는&lt;/em&gt; 잘못된 값을 모두 받아들입니다 . 다른 어떤 것도 시험에 실패합니다.</target>
        </trans-unit>
        <trans-unit id="2a8a0fd2032a59ba64906f503a8fcf520c263411" translate="yes" xml:space="preserve">
          <source>Tests can appear before, after, or interspersed with your hooks. Hooks will run in the order they are defined, as appropriate; all &lt;code&gt;before()&lt;/code&gt; hooks run (once), then any &lt;code&gt;beforeEach()&lt;/code&gt; hooks, tests, any &lt;code&gt;afterEach()&lt;/code&gt; hooks, and finally &lt;code&gt;after()&lt;/code&gt; hooks (once).</source>
          <target state="translated">테스트는 후크 전, 후 또는 사이에있을 수 있습니다. 후크는 정의 된 순서대로 실행됩니다. 모든 &lt;code&gt;before()&lt;/code&gt; 후크는 한 번 실행 된 다음 &lt;code&gt;beforeEach()&lt;/code&gt; 후크, 테스트, &lt;code&gt;afterEach()&lt;/code&gt; 후크 및 마지막으로 &lt;code&gt;after()&lt;/code&gt; 후크 (한 번)가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="4cd657386f1f10000cd8cb1e2f49d4fb89929aba" translate="yes" xml:space="preserve">
          <source>Tests may be rerun manually by typing ⓡ ⓢ ⏎ (same shortcut as &lt;code&gt;nodemon&lt;/code&gt;).</source>
          <target state="translated">ⓡ ⓢ ⏎ ( &lt;code&gt;nodemon&lt;/code&gt; 과 동일한 단축키)를 입력하여 수동으로 테스트를 다시 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cb66034b6a518b97ae4eb07cdc2717ab088f1068" translate="yes" xml:space="preserve">
          <source>TextMate</source>
          <target state="translated">TextMate</target>
        </trans-unit>
        <trans-unit id="2c6457fc57c8740f5cc64bb2c936f816468641c5" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;HTML&amp;rdquo; reporter is what you see when running Mocha in the browser. It looks like this:</source>
          <target state="translated">&amp;ldquo;HTML&amp;rdquo;리포터는 브라우저에서 Mocha를 실행할 때 표시되는 것입니다. 다음과 같이 보입니다 :</target>
        </trans-unit>
        <trans-unit id="5333d52961e14491540412769193ff75d5df45ca" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;JSON stream&amp;rdquo; reporter outputs newline-delimited JSON &amp;ldquo;events&amp;rdquo; as they occur, beginning with a &amp;ldquo;start&amp;rdquo; event, followed by test passes or failures, and then the final &amp;ldquo;end&amp;rdquo; event.</source>
          <target state="translated">&quot;JSON 스트림&quot;리포터는 줄 바꿈으로 구분 된 JSON &quot;이벤트&quot;가 발생하는대로 &quot;시작&quot;이벤트부터 시작하여 테스트 통과 또는 실패, 마지막 &quot;종료&quot;이벤트를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="3368e20feab3c06a96a469ab2bad643063f723e3" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;JSON&amp;rdquo; reporter outputs a single large JSON object when the tests have completed (failures or not).</source>
          <target state="translated">&amp;ldquo;JSON&amp;rdquo;리포터는 테스트 완료 (실패 여부)에 하나의 큰 JSON 객체를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="64c8c54c7f79b833030381e6e9717c6ff5bcf9be" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;doc&amp;rdquo; reporter outputs a hierarchical HTML body representation of your tests. Wrap it with a header, footer, and some styling, then you have some fantastic documentation!</source>
          <target state="translated">&quot;doc&quot;리포터는 테스트의 계층 적 HTML 본문 표현을 출력합니다. 머리글, 바닥 글 및 일부 스타일링으로 감싸면 환상적인 문서가 있습니다!</target>
        </trans-unit>
        <trans-unit id="0aad810ee8f2dec17d9ab81389da6967325218e4" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;list&amp;rdquo; reporter outputs a simple specifications list as test cases pass or fail, outputting the failure details at the bottom of the output.</source>
          <target state="translated">&quot;목록&quot;리포터는 테스트 사례가 통과 또는 실패 할 때 간단한 사양 목록을 출력하여 출력 하단에 오류 세부 정보를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="4f248694160214415f2b010680f15162b41fa9ec" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;markdown&amp;rdquo; reporter generates a markdown TOC and body for your test suite. This is great if you want to use the tests as documentation within a Github wiki page, or a markdown file in the repository that Github can render. For example here is the Connect &lt;a href=&quot;https://github.com/senchalabs/connect/blob/90a725343c2945aaee637e799b1cd11e065b2bff/tests.md&quot;&gt;test output&lt;/a&gt;.</source>
          <target state="translated">&amp;ldquo;마크 다운&amp;rdquo;리포터는 테스트 스위트에 대한 마크 다운 TOC 및 본문을 생성합니다. 테스트를 Github 위키 페이지 내에서 문서로 사용하거나 Github에서 렌더링 할 수있는 리포지토리의 마크 다운 파일을 사용하려는 경우 유용합니다. 예를 들어 다음은 Connect &lt;a href=&quot;https://github.com/senchalabs/connect/blob/90a725343c2945aaee637e799b1cd11e065b2bff/tests.md&quot;&gt;테스트 출력&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e0d1db1adc546e3453bd023c105509dc9ff10741" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;min&amp;rdquo; reporter displays the summary only, while still outputting errors on failure. This reporter works great with &lt;code&gt;--watch&lt;/code&gt; as it clears the terminal in order to keep your test summary at the top.</source>
          <target state="translated">&amp;ldquo;최소&amp;rdquo;리포터는 실패시 오류를 계속 출력하면서 요약 만 표시합니다. 이 리포터는 테스트 요약을 맨 위에 유지하기 위해 터미널 을 &lt;code&gt;--watch&lt;/code&gt; 때문에 --watch 와 잘 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="661986fe32882ea8bd3d2690dacc77d81f35edc9" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;nyan&amp;rdquo; reporter is exactly what you might expect:</source>
          <target state="translated">&amp;ldquo;nyan&amp;rdquo;기자는 정확히 당신이 기대할 수있는 것입니다 :</target>
        </trans-unit>
        <trans-unit id="39ee7d9c094fb73922b809761d1bec30a6aee208" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;progress&amp;rdquo; reporter implements a simple progress-bar:</source>
          <target state="translated">&amp;ldquo;진보&amp;rdquo;리포터는 간단한 진행 표시 줄을 구현합니다.</target>
        </trans-unit>
        <trans-unit id="e76788e19ec6051a119328dfc976ca6938c3df03" translate="yes" xml:space="preserve">
          <source>The (default) &lt;a href=&quot;#bdd&quot;&gt;bdd interface&lt;/a&gt; loads the test files &lt;em&gt;in no particular order&lt;/em&gt;, which are given an interface-specific &lt;code&gt;global&lt;/code&gt; context (this is how, e.g., &lt;code&gt;describe()&lt;/code&gt; ends up as a global in a test file)</source>
          <target state="translated">(기본값) &lt;a href=&quot;#bdd&quot;&gt;bdd 인터페이스 &lt;/a&gt;&lt;em&gt;는 특정 순서없이&lt;/em&gt; 테스트 파일 &lt;em&gt;을&lt;/em&gt; 로드하며 , 인터페이스 별 &lt;code&gt;global&lt;/code&gt; 컨텍스트가 제공됩니다 (예 : &lt;code&gt;describe()&lt;/code&gt; 가 테스트 파일에서 전역으로 끝나는 방법 ).</target>
        </trans-unit>
        <trans-unit id="be7f0cfae842826207ddea8730297b59a89f272c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/mochajs/mocha.tmbundle&quot;&gt;Mocha TextMate bundle&lt;/a&gt; includes snippets to make writing tests quicker and more enjoyable.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/mochajs/mocha.tmbundle&quot;&gt;모카의 TextMate 번들은&lt;/a&gt; 더 빠르고 즐거운 쓰기 시험에 미리보기가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="950b4f2098ee9a6022de133bca2fd3e30ab8b4cc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://qunitjs.com&quot;&gt;QUnit&lt;/a&gt;-inspired interface matches the &amp;ldquo;flat&amp;rdquo; look of QUnit, where the test suite title is simply defined before the test-cases. Like TDD, it uses &lt;code&gt;suite()&lt;/code&gt; and &lt;code&gt;test()&lt;/code&gt;, but resembling BDD, it also contains &lt;code&gt;before()&lt;/code&gt;, &lt;code&gt;after()&lt;/code&gt;, &lt;code&gt;beforeEach()&lt;/code&gt;, and &lt;code&gt;afterEach()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://qunitjs.com&quot;&gt;QUnit에서&lt;/a&gt; 영감을 얻은 인터페이스 는 QUnit 의 &quot;평평한&quot;모양과 일치합니다. 여기서 테스트 스위트 제목은 테스트 사례 전에 간단하게 정의됩니다. TDD와 마찬가지로 &lt;code&gt;suite()&lt;/code&gt; 및 &lt;code&gt;test()&lt;/code&gt; 를 사용하지만 BDD와 유사하게 &lt;code&gt;before()&lt;/code&gt; , &lt;code&gt;after()&lt;/code&gt; , &lt;code&gt;beforeEach()&lt;/code&gt; 및 &lt;code&gt;afterEach()&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="5e8d4bc23b3186b509e21a513747c1a51f0371b2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://qunitjs.com/&quot;&gt;QUnit&lt;/a&gt;-inspired interface matches the &amp;ldquo;flat&amp;rdquo; look of QUnit, where the test suite title is defined &lt;em&gt;before&lt;/em&gt; the test-cases. Like TDD, it uses &lt;code&gt;suite()&lt;/code&gt; and &lt;code&gt;test()&lt;/code&gt;, but resembling BDD, it also contains &lt;code&gt;before()&lt;/code&gt;, &lt;code&gt;after()&lt;/code&gt;, &lt;code&gt;beforeEach()&lt;/code&gt;, and &lt;code&gt;afterEach()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://qunitjs.com/&quot;&gt;QUnit에서&lt;/a&gt; 영감을받은 인터페이스 는 QUnit 의 &quot;플랫&quot;모양과 일치하며, 여기서 테스트 스위트 제목은 테스트 케이스 &lt;em&gt;앞에&lt;/em&gt; 정의됩니다 . TDD와 마찬가지로 &lt;code&gt;suite()&lt;/code&gt; 및 &lt;code&gt;test()&lt;/code&gt; 를 사용하지만 BDD와 유사하며 &lt;code&gt;before()&lt;/code&gt; , &lt;code&gt;after()&lt;/code&gt; , &lt;code&gt;beforeEach()&lt;/code&gt; 및 &lt;code&gt;afterEach()&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="0bcbec0f5943ef167d67d70d4e9e088446901237" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--grep&lt;/code&gt; option when specified will trigger mocha to only run tests matching the given &lt;code&gt;pattern&lt;/code&gt; which is internally compiled to a &lt;code&gt;RegExp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--grep&lt;/code&gt; 주어진 일치하는 경우에만 실행 테스트에 모카 트리거 옵션을 지정하여 &lt;code&gt;pattern&lt;/code&gt; 내부적으로 컴파일 된 &lt;code&gt;RegExp&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1f5d1ce5911c30ebbdbdee19275338c5b20db5b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--reporter&lt;/code&gt; option allows you to specify the reporter that will be used, defaulting to &amp;ldquo;spec&amp;rdquo;. This flag may also be used to utilize third-party reporters. For example if you &lt;code&gt;npm install mocha-lcov-reporter&lt;/code&gt; you may then do &lt;code&gt;--reporter mocha-lcov-reporter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--reporter&lt;/code&gt; 옵션은 &quot;사양&quot;을 디폴트, 사용되는 기자를 지정할 수 있습니다. 이 플래그는 타사 리포터를 활용하는 데 사용될 수도 있습니다. 예를 들어, &lt;code&gt;npm install mocha-lcov-reporter&lt;/code&gt; 를 설치 하면 &lt;code&gt;--reporter mocha-lcov-reporter&lt;/code&gt; 를 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b837e62d6ccb34aba9ee913d1bd84721c5ee4971" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--require&lt;/code&gt; option is useful for libraries such as &lt;a href=&quot;https://github.com/shouldjs/should.js&quot;&gt;should.js&lt;/a&gt;, so you may simply &lt;code&gt;--require should&lt;/code&gt; instead of manually invoking &lt;code&gt;require('should')&lt;/code&gt; within each test file. Note that this works well for &lt;code&gt;should&lt;/code&gt; as it augments &lt;code&gt;Object.prototype&lt;/code&gt;, however if you wish to access a module&amp;rsquo;s exports you will have to require them, for example &lt;code&gt;var should = require('should')&lt;/code&gt;. Furthermore, it can be used with relative paths, e.g. &lt;code&gt;--require ./test/helper.js&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;--require&lt;/code&gt; 옵션은 다음과 같은 라이브러리에 유용 &lt;a href=&quot;https://github.com/shouldjs/should.js&quot;&gt;should.js&lt;/a&gt; 단순히 수 있도록 &lt;code&gt;--require should&lt;/code&gt; 호출하는 대신 수동으로 &lt;code&gt;require('should')&lt;/code&gt; 각 테스트 파일 내에서. 이 잘 작동 것을 참고 &lt;code&gt;should&lt;/code&gt; 가 증대로 &lt;code&gt;Object.prototype&lt;/code&gt; 에를 예를 들어, 모듈의 수출에 액세스하고자하는 경우, 그러나 당신이 그들을 필요로 할 것이다 &lt;code&gt;var should = require('should')&lt;/code&gt; . 또한 상대 경로와 함께 사용할 수 있습니다 (예 : &lt;code&gt;--require ./test/helper.js&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="4c95a6e8fa7be939b839ec9ed431e8bb4e972c5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--ui&lt;/code&gt; option lets you specify the interface to use, defaulting to &amp;ldquo;bdd&amp;rdquo;.</source>
          <target state="translated">&lt;code&gt;--ui&lt;/code&gt; 옵션은 &quot;BDD&quot;을 디폴트, 사용하는 인터페이스를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1edc89c7fe564706a5b5d76867e92a339ecf9c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--ui&lt;/code&gt; option lets you specify the interface to use, defaulting to &lt;code&gt;bdd&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--ui&lt;/code&gt; 옵션을 사용하는 디폴트, 사용하는 인터페이스를 지정할 수 있습니다 &lt;code&gt;bdd&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="38cc75a7c19163e1a872194323cafcf1246da6fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--watch-files&lt;/code&gt; and &lt;code&gt;--watch-ignore&lt;/code&gt; options can be used to control which files are watched for changes.</source>
          <target state="translated">&lt;code&gt;--watch-files&lt;/code&gt; 및 &lt;code&gt;--watch-ignore&lt;/code&gt; 옵션이 파일이 변경을 감시하는 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1ce777f0d03e959a20192aff992bbab8375d889c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mocha&lt;/code&gt; executable supports all applicable flags which the &lt;code&gt;node&lt;/code&gt; executable supports.</source>
          <target state="translated">&lt;code&gt;mocha&lt;/code&gt; 실행 파일이 지원되는 모든에 플래그 &lt;code&gt;node&lt;/code&gt; 실행을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="c9edaa4bc7f927943c6a1ff634f69ebb2ef69a16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;require&lt;/code&gt; interface allows you to require the &lt;code&gt;describe&lt;/code&gt; and friend words directly using &lt;code&gt;require&lt;/code&gt; and call them whatever you want. This interface is also useful if you want to avoid global variables in your tests.</source>
          <target state="translated">이 &lt;code&gt;require&lt;/code&gt; 인터페이스는 당신이 필요로 할 수 있습니다 &lt;code&gt;describe&lt;/code&gt; 을 직접 사용하고 친구 단어를 &lt;code&gt;require&lt;/code&gt; 하고 원하는대로를 호출합니다. 이 인터페이스는 테스트에서 전역 변수를 피하려는 경우에도 유용합니다.</target>
        </trans-unit>
        <trans-unit id="7bf2c17fd8b3b553c9cde160ac5358d9bb3aee1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;test/&lt;/code&gt; Directory</source>
          <target state="translated">&lt;code&gt;test/&lt;/code&gt; 디렉토리</target>
        </trans-unit>
        <trans-unit id="7c70715d9a9f5600b6ff4177f08406292ceafebe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;xunit&lt;/code&gt; reporter is also available. It outputs an XUnit-compatible XML document, often applicable in CI servers.</source>
          <target state="translated">&lt;code&gt;xunit&lt;/code&gt; 기자도 사용할 수 있습니다. CI 서버에 적용 할 수있는 XUnit 호환 XML 문서를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="795957d437f7bed7be9ed30dac8838682cafc69f" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;default behavior&lt;/em&gt; in v4.0.0 (and newer) is &lt;code&gt;--no-exit&lt;/code&gt;, where previously it was &lt;code&gt;--exit&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--exit&lt;/code&gt; (및 최신 버전) 의 &lt;em&gt;기본 동작&lt;/em&gt; 은 &lt;code&gt;--no-exit&lt;/code&gt; 이며 이전에는 --exit 입니다.</target>
        </trans-unit>
        <trans-unit id="3b37a40988604936193e8ed0680d361779e5c577" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;default behavior&lt;/em&gt; in v4.0.0 is &lt;code&gt;--no-exit&lt;/code&gt;, where previously it was &lt;code&gt;--exit&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--exit&lt;/code&gt; 의 &lt;em&gt;기본 동작&lt;/em&gt; 은 &lt;code&gt;--no-exit&lt;/code&gt; 이며, 이전에는 --exit 입니다.</target>
        </trans-unit>
        <trans-unit id="c763b13298e1fb9caa00fce37d979e4c5d9f789c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;BDD&lt;/strong&gt; interface provides &lt;code&gt;describe()&lt;/code&gt;, &lt;code&gt;context()&lt;/code&gt;, &lt;code&gt;it()&lt;/code&gt;, &lt;code&gt;specify()&lt;/code&gt;, &lt;code&gt;before()&lt;/code&gt;, &lt;code&gt;after()&lt;/code&gt;, &lt;code&gt;beforeEach()&lt;/code&gt;, and &lt;code&gt;afterEach()&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;BDD의&lt;/strong&gt; 인터페이스를 제공하는 &lt;code&gt;describe()&lt;/code&gt; , &lt;code&gt;context()&lt;/code&gt; , &lt;code&gt;it()&lt;/code&gt; , &lt;code&gt;specify()&lt;/code&gt; , &lt;code&gt;before()&lt;/code&gt; , &lt;code&gt;after()&lt;/code&gt; , &lt;code&gt;beforeEach()&lt;/code&gt; 및 &lt;code&gt;afterEach()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9598d1f67c84a73ecf1910adbcd35914585a841a" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Exports&lt;/strong&gt; interface is much like Mocha&amp;rsquo;s predecessor &lt;a href=&quot;https://github.com/tj/expresso&quot;&gt;expresso&lt;/a&gt;. The keys &lt;code&gt;before&lt;/code&gt;, &lt;code&gt;after&lt;/code&gt;, &lt;code&gt;beforeEach&lt;/code&gt;, and &lt;code&gt;afterEach&lt;/code&gt; are special-cased, object values are suites, and function values are test-cases:</source>
          <target state="translated">&lt;strong&gt;수출의&lt;/strong&gt; 인터페이스는 훨씬 모카의 전신 같다 &lt;a href=&quot;https://github.com/tj/expresso&quot;&gt;프레소&lt;/a&gt; . 키가 &lt;code&gt;before&lt;/code&gt; , &lt;code&gt;after&lt;/code&gt; , &lt;code&gt;beforeEach&lt;/code&gt; 및 &lt;code&gt;afterEach&lt;/code&gt; 는 특수 맡았다 있으며, 개체 값은 스위트 룸이 있고, 함수 값은 테스트 케이스이다 :</target>
        </trans-unit>
        <trans-unit id="e699cb022e1a1575f3e999f496d5f126cbc6b954" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;TDD&lt;/strong&gt; interface provides &lt;code&gt;suite()&lt;/code&gt;, &lt;code&gt;test()&lt;/code&gt;, &lt;code&gt;suiteSetup()&lt;/code&gt;, &lt;code&gt;suiteTeardown()&lt;/code&gt;, &lt;code&gt;setup()&lt;/code&gt;, and &lt;code&gt;teardown()&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;TDD의&lt;/strong&gt; 인터페이스를 제공하는 &lt;code&gt;suite()&lt;/code&gt; , &lt;code&gt;test()&lt;/code&gt; , &lt;code&gt;suiteSetup()&lt;/code&gt; , &lt;code&gt;suiteTeardown()&lt;/code&gt; , &lt;code&gt;setup()&lt;/code&gt; , 및 &lt;code&gt;teardown()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="830b0fc8f8afd43efd9aed077a8ca360b86e2f68" translate="yes" xml:space="preserve">
          <source>The Doc reporter outputs a hierarchical HTML body representation of your tests. Wrap it with a header, footer, and some styling, then you have some fantastic documentation!</source>
          <target state="translated">Doc 리포터는 테스트의 계층 적 HTML 본문 표현을 출력합니다. 머리글, 바닥 글 및 스타일로 감싸면 환상적인 문서가 생성됩니다!</target>
        </trans-unit>
        <trans-unit id="3f2b6c93bffa4a0044804b871f7037908517aad8" translate="yes" xml:space="preserve">
          <source>The Dot Matrix reporter is a series of characters which represent test cases. Failures highlight in red exclamation marks (&lt;code&gt;!&lt;/code&gt;), pending tests with a blue comma (&lt;code&gt;,&lt;/code&gt;), and slow tests as yellow. Good if you prefer minimal output.</source>
          <target state="translated">Dot Matrix 리포터는 테스트 케이스를 나타내는 일련의 문자입니다. 실패는 빨간색 느낌표 ( &lt;code&gt;!&lt;/code&gt; ), 보류중인 테스트에는 파란색 쉼표 ( &lt;code&gt;,&lt;/code&gt; )가, 느린 테스트는 노란색으로 강조 표시됩니다 . 최소한의 출력을 선호한다면 좋습니다.</target>
        </trans-unit>
        <trans-unit id="df769f8a33a4902e762cd3290422c98020786564" translate="yes" xml:space="preserve">
          <source>The HTML reporter is the default reporter when running Mocha in the browser. It looks like this:</source>
          <target state="translated">HTML 리포터는 브라우저에서 Mocha를 실행할 때 기본 리포터입니다. 다음과 같이 보입니다.</target>
        </trans-unit>
        <trans-unit id="ef1a4e44ce0e435b5a05e2c31e12e9467abbb459" translate="yes" xml:space="preserve">
          <source>The JSON Stream reporter outputs newline-delimited JSON &amp;ldquo;events&amp;rdquo; as they occur, beginning with a &amp;ldquo;start&amp;rdquo; event, followed by test passes or failures, and then the final &amp;ldquo;end&amp;rdquo; event.</source>
          <target state="translated">JSON Stream 리포터는 줄 바꿈으로 구분 된 JSON &quot;이벤트&quot;가 발생할 때 &quot;시작&quot;이벤트로 시작하여 테스트 통과 또는 실패 후 마지막 &quot;종료&quot;이벤트를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="406c1fd444c21b8add378841843b14ba958c5b1d" translate="yes" xml:space="preserve">
          <source>The JSON reporter outputs a single large JSON object when the tests have completed (failures or not).</source>
          <target state="translated">JSON 리포터는 테스트가 완료되면 (실패 여부) 하나의 큰 JSON 개체를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="ad4c565465894c8ee61e971557b761d7a88df144" translate="yes" xml:space="preserve">
          <source>The Landing Strip (&lt;code&gt;landing&lt;/code&gt;) reporter is a gimmicky test reporter simulating a plane landing :) unicode ftw</source>
          <target state="translated">랜딩 스트립 ( &lt;code&gt;landing&lt;/code&gt; ) 리포터는 비행기 착륙을 시뮬레이트하는 특수 효과 테스트 리포터입니다. :) unicode ftw</target>
        </trans-unit>
        <trans-unit id="d3bc12af6104616d59accd665c3d868a004e7485" translate="yes" xml:space="preserve">
          <source>The Landing Strip reporter is a gimmicky test reporter simulating a plane landing 😃 unicode ftw</source>
          <target state="translated">Landing Strip 기자는 비행기 착륙을 시뮬레이션하는 변덕스러운 테스트 기자입니다 😃 unicode ftw</target>
        </trans-unit>
        <trans-unit id="3d337d382f3f8f980ab8f4dcfd762d84338b8153" translate="yes" xml:space="preserve">
          <source>The List reporter outputs a simple specifications list as test cases pass or fail, outputting the failure details at the bottom of the output.</source>
          <target state="translated">List 리포터는 테스트 케이스가 통과하거나 실패 할 때 간단한 사양 목록을 출력하고 출력 하단에 실패 세부 정보를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="98fdddcdbad7d687f3cd617d0ca5f8b5eb02f47f" translate="yes" xml:space="preserve">
          <source>The Markdown reporter generates a markdown TOC and body for your test suite. This is great if you want to use the tests as documentation within a Github wiki page, or a markdown file in the repository that Github can render. For example, here is the Connect &lt;a href=&quot;https://github.com/senchalabs/connect/blob/90a725343c2945aaee637e799b1cd11e065b2bff/tests.md&quot;&gt;test output&lt;/a&gt;.</source>
          <target state="translated">Markdown 리포터는 테스트 스위트에 대한 마크 다운 TOC 및 본문을 생성합니다. 테스트를 Github 위키 페이지 내의 문서로 사용하거나 Github가 렌더링 할 수있는 저장소의 마크 다운 파일로 사용하려는 경우 유용합니다. 예를 들어 다음은 Connect &lt;a href=&quot;https://github.com/senchalabs/connect/blob/90a725343c2945aaee637e799b1cd11e065b2bff/tests.md&quot;&gt;테스트 출력&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0968f17769bf8b1e7ebe17caef4153e5d65efd57" translate="yes" xml:space="preserve">
          <source>The Min reporter displays the summary only, while still outputting errors on failure. This reporter works great with &lt;code&gt;--watch&lt;/code&gt; as it clears the terminal in order to keep your test summary at the top.</source>
          <target state="translated">Min 리포터는 요약 만 표시하고 실패시 오류는 계속 출력합니다. 이 리포터는 테스트 요약을 맨 위에 유지하기 위해 터미널을 지울 때 &lt;code&gt;--watch&lt;/code&gt; 와 잘 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="a5fcec24d487af057752a6be394fd2b7e9250f50" translate="yes" xml:space="preserve">
          <source>The Nyan reporter is exactly what you might expect:</source>
          <target state="translated">Nyan 기자는 정확히 당신이 기대하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="8cea05e18999fd159dfe4d8ec2cc100e8444f0f8" translate="yes" xml:space="preserve">
          <source>The Progress reporter implements a simple progress-bar:</source>
          <target state="translated">Progress 리포터는 간단한 진행 표시 줄을 구현합니다.</target>
        </trans-unit>
        <trans-unit id="eba3b26cd15b029054ccfea1e07e24021de410dc" translate="yes" xml:space="preserve">
          <source>The SuperAgent request library &lt;a href=&quot;https://visionmedia.github.io/superagent/docs/test.html&quot;&gt;test documentation&lt;/a&gt; was generated with Mocha&amp;rsquo;s doc reporter using this Bash command:</source>
          <target state="translated">SuperAgent 요청 라이브러리 &lt;a href=&quot;https://visionmedia.github.io/superagent/docs/test.html&quot;&gt;테스트 문서&lt;/a&gt; 는이 Bash 명령을 사용하여 Mocha의 문서 리포터와 함께 생성되었습니다.</target>
        </trans-unit>
        <trans-unit id="1e1aa347e3007252705de1fb497adc5b25ccab0c" translate="yes" xml:space="preserve">
          <source>The TAP reporter emits lines for a &lt;a href=&quot;https://en.wikipedia.org/wiki/Test_Anything_Protocol&quot;&gt;Test-Anything-Protocol&lt;/a&gt; consumer.</source>
          <target state="translated">TAP 리포터는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Test_Anything_Protocol&quot;&gt;Test-Anything-Protocol&lt;/a&gt; 소비자를 위해 회선을 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="9ece51749c4c1325a8c11a66410fcffb4ce34ebc" translate="yes" xml:space="preserve">
          <source>The XUnit reporter is also available. It outputs an XUnit-compatible XML document, often applicable in CI servers.</source>
          <target state="translated">XUnit 리포터도 사용할 수 있습니다. 종종 CI 서버에 적용 할 수있는 XUnit 호환 XML 문서를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="db8032248965c09d3c38c18fd4d34750b613f87a" translate="yes" xml:space="preserve">
          <source>The above code will produce a suite with three specs:</source>
          <target state="translated">위의 코드는 세 가지 사양의 제품군을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="565ecc014c359d6d8748abc8825f30c68254f333" translate="yes" xml:space="preserve">
          <source>The above test will be reported as &lt;a href=&quot;#pending-tests&quot;&gt;pending&lt;/a&gt;. It&amp;rsquo;s also important to note that calling &lt;code&gt;this.skip()&lt;/code&gt; will effectively &lt;em&gt;abort&lt;/em&gt; the test.</source>
          <target state="translated">위의 테스트는 &lt;a href=&quot;#pending-tests&quot;&gt;보류중인&lt;/a&gt; 것으로보고됩니다 . &lt;code&gt;this.skip()&lt;/code&gt; 를 호출 하면 테스트 가 효과적으로 &lt;em&gt;중단&lt;/em&gt; 된다는 점에 유의해야합니다 .</target>
        </trans-unit>
        <trans-unit id="d2dd497c39681e399376a5d4b169a7504f7c7d8f" translate="yes" xml:space="preserve">
          <source>The above test will fail with &lt;code&gt;Error: Resolution method is overspecified. Specify a callback *or* return a Promise; not both.&lt;/code&gt;. In versions older than v3.0.0, the call to &lt;code&gt;done()&lt;/code&gt; is effectively ignored.</source>
          <target state="translated">위의 테스트는 &lt;code&gt;Error: Resolution method is overspecified. Specify a callback *or* return a Promise; not both.&lt;/code&gt; 되어 실패 합니다. 콜백을 지정하거나 약속을 반환합니다. 둘 다 아닙니다. . v3.0.0 이전 버전에서는 &lt;code&gt;done()&lt;/code&gt; 호출 이 효과적으로 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="a241b6cc077b36452b7f07c4225946989798ecf5" translate="yes" xml:space="preserve">
          <source>The browser may use the &lt;code&gt;--grep&lt;/code&gt; as functionality. Append a query-string to your URL: &lt;code&gt;?grep=api&lt;/code&gt;.</source>
          <target state="translated">브라우저는 &lt;code&gt;--grep&lt;/code&gt; 를 기능으로 사용할 수 있습니다 . URL에 쿼리 문자열을 추가하십시오 ( &lt;code&gt;?grep=api&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f45d77921e402759985d1c018e180499c835b031" translate="yes" xml:space="preserve">
          <source>The command &lt;code&gt;mocha --reporter doc array&lt;/code&gt; would yield:</source>
          <target state="translated">&lt;code&gt;mocha --reporter doc array&lt;/code&gt; 명령 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dcf236dc5ecfea331b5a52438d08e63a8d9ba3a2" translate="yes" xml:space="preserve">
          <source>The default value is the &lt;em&gt;number of CPU cores&lt;/em&gt; less 1.</source>
          <target state="translated">기본값은 1을 뺀 &lt;em&gt;CPU 코어 수입니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="5f7afc116111ee3a0af1a9b5d7649a87db9b33d9" translate="yes" xml:space="preserve">
          <source>The dot matrix (or &amp;ldquo;dot&amp;rdquo;) reporter is simply a series of characters which represent test cases. Failures highlight in red exclamation marks (&lt;code&gt;!&lt;/code&gt;), pending tests with a blue comma (&lt;code&gt;,&lt;/code&gt;), and slow tests as yellow. Good if you prefer minimal output.</source>
          <target state="translated">도트 매트릭스 (또는 &quot;도트&quot;) 리포터는 테스트 사례를 나타내는 일련의 문자입니다. 실패는 빨간색 느낌표 ( &lt;code&gt;!&lt;/code&gt; )로 강조 표시되고 파란색 쉼표 ( &lt;code&gt;,&lt;/code&gt; ) 로 테스트 대기 중이며 느리게 테스트되면 노란색으로 나타납니다. 최소 출력을 선호하면 좋습니다.</target>
        </trans-unit>
        <trans-unit id="18c2a13535cef8cc9c7c5aa8dbed597228314d82" translate="yes" xml:space="preserve">
          <source>The exclusivity feature allows you to run &lt;em&gt;only&lt;/em&gt; the specified suite or test-case by appending &lt;code&gt;.only()&lt;/code&gt; to the function. Here&amp;rsquo;s an example of executing only a particular suite:</source>
          <target state="translated">독점 기능을 사용하면 함수에 &lt;code&gt;.only()&lt;/code&gt; 를 추가하여 지정된 제품군 또는 테스트 사례 &lt;em&gt;만&lt;/em&gt; 실행할 수 있습니다 . 특정 제품군 만 실행하는 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="345c002964155b4ecb8800d430c5a697a4f87083" translate="yes" xml:space="preserve">
          <source>The following editor-related packages are available:</source>
          <target state="translated">다음과 같은 편집기 관련 패키지를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="51d02ab791db0512c43f05aa790be912fbe7321d" translate="yes" xml:space="preserve">
          <source>The following is a mid-level outline of Mocha&amp;rsquo;s &amp;ldquo;flow of execution&amp;rdquo; when run in Node.js; the &amp;ldquo;less important&amp;rdquo; details have been omitted.</source>
          <target state="translated">다음은 Node.js에서 실행할 때 Mocha의 &quot;실행 흐름&quot;에 대한 중간 수준의 개요입니다. &quot;중요하지 않은&quot;세부 사항은 생략되었습니다.</target>
        </trans-unit>
        <trans-unit id="8c066e5de249b831fcb1a137433b90c38715e5a5" translate="yes" xml:space="preserve">
          <source>The following method(s) &lt;em&gt;only&lt;/em&gt; function in a browser context:</source>
          <target state="translated">다음 방법 은 브라우저 컨텍스트 &lt;em&gt;에서만&lt;/em&gt; 작동합니다.</target>
        </trans-unit>
        <trans-unit id="447ede2a00c21abc1ae5460592695448444ebb10" translate="yes" xml:space="preserve">
          <source>The following option(s) &lt;em&gt;only&lt;/em&gt; function in a browser context:</source>
          <target state="translated">다음 옵션 은 브라우저 컨텍스트 &lt;em&gt;에서만&lt;/em&gt; 작동합니다.</target>
        </trans-unit>
        <trans-unit id="2b9f45fc951a3f573a3abefe11f51cb8bbe4c380" translate="yes" xml:space="preserve">
          <source>The latter example uses &lt;a href=&quot;https://www.npmjs.com/package/chai-as-promised&quot;&gt;Chai as Promised&lt;/a&gt; for fluent promise assertions.</source>
          <target state="translated">후자의 예는 유망한 약속 어설 션에 대해 약속 &lt;a href=&quot;https://www.npmjs.com/package/chai-as-promised&quot;&gt;대로 Chai&lt;/a&gt; 를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="802ceff010c366f7513ae9f2a1750f92540980f4" translate="yes" xml:space="preserve">
          <source>The lines in this file are prepended to any actual command-line arguments. As such, actual command-line arguments will take precedence over the defaults.</source>
          <target state="translated">이 파일의 행은 실제 명령 행 인수 앞에 추가됩니다. 따라서 실제 명령 줄 인수는 기본값보다 우선합니다.</target>
        </trans-unit>
        <trans-unit id="93d468ddbf4c27568d84a852ebaf9a673f868783" translate="yes" xml:space="preserve">
          <source>The option can be given multiple times. The option accepts a comma-delimited list: &lt;code&gt;--extension a,b&lt;/code&gt; is equivalent to &lt;code&gt;--extension a --extension b&lt;/code&gt;.</source>
          <target state="translated">이 옵션은 여러 번 제공 될 수 있습니다. 이 옵션은 쉼표로 구분 된 목록을 허용합니다. &lt;code&gt;--extension a,b&lt;/code&gt; 는 &lt;code&gt;--extension a --extension b&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="2666cbb79f0b311917381014ebd20e3da2010543" translate="yes" xml:space="preserve">
          <source>The option can be given multiple times. The option accepts a comma-delimited list: &lt;code&gt;--watch-files a,b&lt;/code&gt; is equivalent to &lt;code&gt;--watch-files a --watch-files b&lt;/code&gt;</source>
          <target state="translated">이 옵션은 여러 번 제공 될 수 있습니다. 이 옵션은 쉼표로 구분 된 목록을 허용합니다. &lt;code&gt;--watch-files a,b&lt;/code&gt; 는 &lt;code&gt;--watch-files a --watch-files b&lt;/code&gt; 와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="ddd7202cb2421332dda4657caec458f236ae3917" translate="yes" xml:space="preserve">
          <source>The option can be given multiple times. The option accepts a comma-delimited list: &lt;code&gt;--watch-ignore a,b&lt;/code&gt; is equivalent to &lt;code&gt;--watch-ignore a --watch-ignore b&lt;/code&gt;</source>
          <target state="translated">이 옵션은 여러 번 제공 될 수 있습니다. 이 옵션은 쉼표로 구분 된 목록을 허용합니다. &lt;code&gt;--watch-ignore a,b&lt;/code&gt; 는 &lt;code&gt;--watch-ignore a --watch-ignore b&lt;/code&gt; 와 같습니다.</target>
        </trans-unit>
        <trans-unit id="d6fafdc37c0c812465c5b779825d606227ed3c0b" translate="yes" xml:space="preserve">
          <source>The plugin is titled &lt;strong&gt;NodeJS&lt;/strong&gt;, and can be installed via &lt;strong&gt;Preferences&lt;/strong&gt; &amp;gt; &lt;strong&gt;Plugins&lt;/strong&gt;, assuming your license allows it.</source>
          <target state="translated">플러그인은 &lt;strong&gt;NodeJS&lt;/strong&gt; 이며 라이센스가 허용한다고 가정하면 &lt;strong&gt;환경 설정&lt;/strong&gt; &amp;gt; &lt;strong&gt;플러그인을&lt;/strong&gt; 통해 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff3f53522b46c827c4ab4a8231b5511e5bd9d7f6" translate="yes" xml:space="preserve">
          <source>The settings above will default the reporter to &lt;code&gt;dot&lt;/code&gt;, require the &lt;code&gt;should&lt;/code&gt; library, and use &lt;code&gt;bdd&lt;/code&gt; as the interface. With this, you may then invoke &lt;code&gt;mocha&lt;/code&gt; with additional arguments, here enabling &lt;a href=&quot;http://growl.info/&quot;&gt;Growl&lt;/a&gt; support, and changing the reporter to &lt;code&gt;list&lt;/code&gt;:</source>
          <target state="translated">위의 설정은 기본적으로 기자가 &lt;code&gt;dot&lt;/code&gt; 으로 설정 하고 &lt;code&gt;should&lt;/code&gt; 라이브러리가 필요하며 &lt;code&gt;bdd&lt;/code&gt; 를 인터페이스로 사용 합니다. 이를 통해 &lt;a href=&quot;http://growl.info/&quot;&gt;Growl&lt;/a&gt; 지원을 활성화 하고 리포터를 &lt;code&gt;list&lt;/code&gt; 로 변경하는 추가 인수 를 사용하여 &lt;code&gt;mocha&lt;/code&gt; 를 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7c00eca11482abbfd0db893f79dde9ca4133138d" translate="yes" xml:space="preserve">
          <source>The test (and reports the result)</source>
          <target state="translated">테스트 (및 결과보고)</target>
        </trans-unit>
        <trans-unit id="74c14ebd3cffb48c3668201eb3d66bbad116c502" translate="yes" xml:space="preserve">
          <source>The test/ Directory</source>
          <target state="translated">테스트 / 디렉토리</target>
        </trans-unit>
        <trans-unit id="5d36c15876d8afca425f320cb9ac630137cba67a" translate="yes" xml:space="preserve">
          <source>The worker makes itself available to the pool; the pool gives the worker another test file to run, if any remain</source>
          <target state="translated">작업자는 자신을 풀에서 사용할 수 있습니다. 풀은 작업자에게 실행할 다른 테스트 파일 (남아있는 경우)을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="557e7a270f868e0998a5df1fe3ffe0c356b8f1b4" translate="yes" xml:space="preserve">
          <source>The worker repeats step 10 from &lt;a href=&quot;#serial-mode&quot;&gt;above&lt;/a&gt;, with the caveat that the worker &lt;em&gt;does not&lt;/em&gt; report test results directly; it holds them in a memory buffer</source>
          <target state="translated">작업자는 작업자 &lt;em&gt;가&lt;/em&gt; 테스트 결과를 직접보고 &lt;em&gt;하지 않는다는&lt;/em&gt; 점에주의하면서 &lt;a href=&quot;#serial-mode&quot;&gt;위의&lt;/a&gt; 10 단계를 반복 합니다. 메모리 버퍼에 보관합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="de10cff74e573ed1f9382b6e950b736132e2ac3f" translate="yes" xml:space="preserve">
          <source>The worker repeats step 8 from &lt;a href=&quot;#serial-mode&quot;&gt;above&lt;/a&gt;</source>
          <target state="translated">작업자는 &lt;a href=&quot;#serial-mode&quot;&gt;위에서&lt;/a&gt; 8 단계를 반복합니다.</target>
        </trans-unit>
        <trans-unit id="56bc4260522d50687c27d129cd0392807c1034ea" translate="yes" xml:space="preserve">
          <source>Then run tests with:</source>
          <target state="translated">그런 다음 다음을 사용하여 테스트를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="888cee595116e62dfd1a0a15d9c7587098850520" translate="yes" xml:space="preserve">
          <source>Then, connect to the server in your tests:</source>
          <target state="translated">그런 다음 테스트에서 서버에 연결합니다.</target>
        </trans-unit>
        <trans-unit id="78adcdad6bf46019e7a916bfc60101e301197b36" translate="yes" xml:space="preserve">
          <source>There are three levels of test duration (depicted in the following image):</source>
          <target state="translated">테스트 기간에는 세 가지 수준이 있습니다 (다음 이미지에 표시됨).</target>
        </trans-unit>
        <trans-unit id="07d70e1b6bd11b2fea0a53664b0850699a64eefd" translate="yes" xml:space="preserve">
          <source>There are two types of global fixtures: &lt;a href=&quot;#global-setup-fixtures&quot;&gt;global setup fixtures&lt;/a&gt; and &lt;a href=&quot;#global-teardown-fixtures&quot;&gt;global teardown fixtures&lt;/a&gt;.</source>
          <target state="translated">글로벌 픽스쳐에는 두 가지 유형이 있습니다 : &lt;a href=&quot;#global-setup-fixtures&quot;&gt;글로벌 설정 픽스쳐&lt;/a&gt; 와 &lt;a href=&quot;#global-teardown-fixtures&quot;&gt;글로벌 분해 픽스쳐&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a65c25e2abfddb1ac438ae3b8cbcd78cc5ebb1fa" translate="yes" xml:space="preserve">
          <source>These flags vary depending on your version of Node.js.</source>
          <target state="translated">이러한 플래그는 Node.js 버전에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="226ac76d4d2337b3a2f0a70b4976629ba9f5c72e" translate="yes" xml:space="preserve">
          <source>These reporters expect Mocha to know &lt;em&gt;how many tests it plans to run&lt;/em&gt; before execution. This information is unavailable in parallel mode, as test files are loaded only when they are about to be run.</source>
          <target state="translated">이 기자들은 Mocha &lt;em&gt;가 실행&lt;/em&gt; 전에 &lt;em&gt;실행할 테스트 수&lt;/em&gt; 를 알기를 기대 합니다. 이 정보는 테스트 파일이 실행될 때만로드되기 때문에 병렬 모드에서는 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="69262a2b56999cfe1e9fdda96faf079263c46e51" translate="yes" xml:space="preserve">
          <source>Third-Party Reporters</source>
          <target state="translated">타사 기자</target>
        </trans-unit>
        <trans-unit id="31f504d6d3d58578abe733a3b0c8d3b08794bae9" translate="yes" xml:space="preserve">
          <source>Third-party reporters may encounter issues when attempting to access non-existent properties within &lt;code&gt;Test&lt;/code&gt;, &lt;code&gt;Suite&lt;/code&gt;, and &lt;code&gt;Hook&lt;/code&gt; objects. If a third-party reporter does not work in parallel mode (but otherwise works in serial mode), please &lt;a href=&quot;https://github.com/mochajs/mocha/issues/new&quot;&gt;file an issue&lt;/a&gt;.</source>
          <target state="translated">타사 리포터는 &lt;code&gt;Test&lt;/code&gt; , &lt;code&gt;Suite&lt;/code&gt; 및 &lt;code&gt;Hook&lt;/code&gt; 개체 내에서 존재하지 않는 속성에 액세스하려고 할 때 문제가 발생할 수 있습니다. 타사 리포터가 병렬 모드에서 작동하지 않는 경우 (그렇지 않으면 직렬 모드에서 작동) &lt;a href=&quot;https://github.com/mochajs/mocha/issues/new&quot;&gt;문제를 신고&lt;/a&gt; 하세요 .</target>
        </trans-unit>
        <trans-unit id="7939bc5c6712cd9ba0c108140dcbed3f31c76456" translate="yes" xml:space="preserve">
          <source>This feature does re-run &lt;code&gt;beforeEach/afterEach&lt;/code&gt; hooks but not &lt;code&gt;before/after&lt;/code&gt; hooks.</source>
          <target state="translated">이 기능은 &lt;code&gt;beforeEach/afterEach&lt;/code&gt; 후크를 다시 실행 하지만 &lt;code&gt;before/after&lt;/code&gt; 후크 는 다시 실행 하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="1eb6aa5c23f3116d4128611741ca3d616ee3efc1" translate="yes" xml:space="preserve">
          <source>This feature does re-run a failed test and its corresponding &lt;code&gt;beforeEach/afterEach&lt;/code&gt; hooks, but not &lt;code&gt;before/after&lt;/code&gt; hooks. &lt;code&gt;this.retries()&lt;/code&gt; has no effect on failing hooks.</source>
          <target state="translated">이 기능은 실패한 테스트 및 해당 &lt;code&gt;beforeEach/afterEach&lt;/code&gt; 후크를 다시 실행 하지만 &lt;code&gt;before/after&lt;/code&gt; 후크는 실행 하지 않습니다 . &lt;code&gt;this.retries()&lt;/code&gt; 는 실패한 후크에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bbbc3f90b39f6af209ced7adcc342d6b76c31701" translate="yes" xml:space="preserve">
          <source>This feature is the inverse of &lt;code&gt;.only()&lt;/code&gt;. By appending &lt;code&gt;.skip()&lt;/code&gt;, you may tell Mocha to ignore test case(s). Anything skipped will be marked as &lt;a href=&quot;#pending-tests&quot;&gt;pending&lt;/a&gt;, and reported as such. Here&amp;rsquo;s an example of skipping an individual test:</source>
          <target state="translated">이 기능은 &lt;code&gt;.only()&lt;/code&gt; 의 반대입니다 . &lt;code&gt;.skip()&lt;/code&gt; 를 추가 하면 Mocha에게 테스트 케이스를 무시하도록 지시 할 수 있습니다. 건너 뛴 모든 항목은 &lt;a href=&quot;#pending-tests&quot;&gt;보류 중으로&lt;/a&gt; 표시 되고보고됩니다. 다음은 개별 테스트를 건너 뛰는 예입니다.</target>
        </trans-unit>
        <trans-unit id="60707f6239eafe97ee7fca274db835f26058a03c" translate="yes" xml:space="preserve">
          <source>This feature is the inverse of &lt;code&gt;.only()&lt;/code&gt;. By appending &lt;code&gt;.skip()&lt;/code&gt;, you may tell Mocha to simply ignore these suite(s) and test case(s). Anything skipped will be marked as &lt;a href=&quot;#pending-tests&quot;&gt;pending&lt;/a&gt;, and reported as such. Here&amp;rsquo;s an example of skipping an entire suite:</source>
          <target state="translated">이 기능은 &lt;code&gt;.only()&lt;/code&gt; 의 반대입니다 . &lt;code&gt;.skip()&lt;/code&gt; 을 추가 하면 Mocha에게 이러한 스위트 및 테스트 사례를 무시하도록 지시 할 수 있습니다. 건너 뛴 항목은 &lt;a href=&quot;#pending-tests&quot;&gt;pending&lt;/a&gt; 으로 표시되고 그대로 보고됩니다. 전체 제품군을 건너 뛰는 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4a2cf25857a9218f743f2bd682a7123fd5404887" translate="yes" xml:space="preserve">
          <source>This flag is helpful when debugging a suspected issue within Mocha or Node.js itself.</source>
          <target state="translated">이 플래그는 Mocha 또는 Node.js 자체에서 의심되는 문제를 디버깅 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="78e4efee38382a20207ecb9cd3de46a5db29e1e7" translate="yes" xml:space="preserve">
          <source>This flag is unusual in that it &lt;strong&gt;defaults to &lt;code&gt;true&lt;/code&gt;&lt;/strong&gt;; use &lt;code&gt;--no-diff&lt;/code&gt; to suppress Mocha&amp;rsquo;s own diff output.</source>
          <target state="translated">이 플래그는 &lt;strong&gt;기본값이 &lt;code&gt;true&lt;/code&gt; &lt;/strong&gt; 라는 점에서 특이 &lt;strong&gt;합니다&lt;/strong&gt; . &lt;code&gt;--no-diff&lt;/code&gt; 를 사용 하여 Mocha의 자체 diff 출력을 억제합니다.</target>
        </trans-unit>
        <trans-unit id="e2e4e02d3ed6f9121bf9f39d945539b5cd120c01" translate="yes" xml:space="preserve">
          <source>This flag is useful when debugging particularly difficult-to-track exceptions.</source>
          <target state="translated">이 플래그는 특히 추적하기 어려운 예외를 디버깅 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="591f370cc64f9ec442c7993f009517182f783143" translate="yes" xml:space="preserve">
          <source>This flowchart will help you decide which of &lt;a href=&quot;#hooks&quot;&gt;hooks&lt;/a&gt;, &lt;a href=&quot;#root-hook-plugins&quot;&gt;root hook plugins&lt;/a&gt; or &lt;a href=&quot;#global-fixtures&quot;&gt;global fixtures&lt;/a&gt; you should use.</source>
          <target state="translated">이 순서도는 사용할 &lt;a href=&quot;#hooks&quot;&gt;후크&lt;/a&gt; , &lt;a href=&quot;#root-hook-plugins&quot;&gt;루트 후크 플러그인&lt;/a&gt; 또는 &lt;a href=&quot;#global-fixtures&quot;&gt;글로벌 픽스처&lt;/a&gt; 를 결정하는 데 도움이됩니다 .</target>
        </trans-unit>
        <trans-unit id="db6fb9c76f97b4dc11607aaf93d9c0861add85c8" translate="yes" xml:space="preserve">
          <source>This is the default reporter. The &amp;ldquo;spec&amp;rdquo; reporter outputs a hierarchical view nested just as the test cases are.</source>
          <target state="translated">이것이 기본 기자입니다. &quot;spec&quot;리포터는 테스트 사례와 같이 중첩 된 계층 적보기를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="628c96b877b8f3e4a3b8e9d0f707a2df8dc3a0bf" translate="yes" xml:space="preserve">
          <source>This is the default reporter. The Spec reporter outputs a hierarchical view nested just as the test cases are.</source>
          <target state="translated">이것이 기본 리포터입니다. 스펙 리포터는 테스트 케이스처럼 중첩 된 계층 적보기를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="e1359697b3bbb563a826b34ae41253525a9fd1c8" translate="yes" xml:space="preserve">
          <source>This will skip all &lt;code&gt;it&lt;/code&gt;, &lt;code&gt;beforeEach/afterEach&lt;/code&gt;, and &lt;code&gt;describe&lt;/code&gt; blocks within the suite. &lt;code&gt;before/after&lt;/code&gt; hooks are skipped unless they are defined at the same level as the hook containing &lt;code&gt;this.skip()&lt;/code&gt;.</source>
          <target state="translated">이 모든 건너 뜁니다 &lt;code&gt;it&lt;/code&gt; , &lt;code&gt;beforeEach/afterEach&lt;/code&gt; 을 하고, &lt;code&gt;describe&lt;/code&gt; 제품군 내에서 블록을. &lt;code&gt;before/after&lt;/code&gt; 후크는 &lt;code&gt;this.skip()&lt;/code&gt; 포함하는 후크와 동일한 수준에서 정의되지 않는 한 건너 뜁니다 .</target>
        </trans-unit>
        <trans-unit id="27a4f2c5a6aa7d957af2668e0ec53e32944aba26" translate="yes" xml:space="preserve">
          <source>Timeouts</source>
          <target state="translated">Timeouts</target>
        </trans-unit>
        <trans-unit id="79d18461c6ac14a2122bc3476f1b9e29df62dcb9" translate="yes" xml:space="preserve">
          <source>To configure where &lt;code&gt;mocha&lt;/code&gt; looks for tests, you may pass your own glob:</source>
          <target state="translated">&lt;code&gt;mocha&lt;/code&gt; 가 테스트를 찾을 위치를 구성하려면 자신의 글로브를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b31c7e011694e8a4a4c04ef1b044d4868e345b97" translate="yes" xml:space="preserve">
          <source>To create a global setup fixture, export &lt;code&gt;mochaGlobalSetup&lt;/code&gt; from a script, e.g.,:</source>
          <target state="translated">전역 설정 픽스쳐를 생성하려면 스크립트에서 &lt;code&gt;mochaGlobalSetup&lt;/code&gt; 을 내보내 십시오 . 예 :</target>
        </trans-unit>
        <trans-unit id="e5f6b7eb05abf8a709c13f22eb4e4bd851b1ecd0" translate="yes" xml:space="preserve">
          <source>To disable timeouts, use &lt;code&gt;--no-timeout&lt;/code&gt;.</source>
          <target state="translated">시간 초과를 비활성화하려면 &lt;code&gt;--no-timeout&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="fd712ab444f24edc121b5edc007fcba22b0d6c51" translate="yes" xml:space="preserve">
          <source>To enable this you don&amp;rsquo;t need to do anything special. Write your test file as an ES module. In Node.js this means either ending the file with a &lt;code&gt;.mjs&lt;/code&gt; extension, or, if you want to use the regular &lt;code&gt;.js&lt;/code&gt; extension, by adding &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; to your &lt;code&gt;package.json&lt;/code&gt;. More information can be found in the &lt;a href=&quot;https://nodejs.org/api/esm.html&quot;&gt;Node.js documentation&lt;/a&gt;.</source>
          <target state="translated">이를 활성화하기 위해 특별한 작업을 수행 할 필요가 없습니다. 테스트 파일을 ES 모듈로 작성하십시오. Node.js에서 이것은 파일을 &lt;code&gt;.mjs&lt;/code&gt; 확장자 로 끝내 거나, 일반 &lt;code&gt;.js&lt;/code&gt; 확장자 를 사용하려는 경우 &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; 을 &lt;code&gt;package.json&lt;/code&gt; 에 추가하는 것을 의미합니다 . 더 많은 정보는 &lt;a href=&quot;https://nodejs.org/api/esm.html&quot;&gt;Node.js 문서&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f42dba1c3aa3966e335877c4abaa6c8d2851edbb" translate="yes" xml:space="preserve">
          <source>To ensure your tests aren&amp;rsquo;t leaving messes around, here are some ideas to get started:</source>
          <target state="translated">테스트로 인해 혼란스러워지지 않도록 시작하기위한 몇 가지 아이디어가 있습니다.</target>
        </trans-unit>
        <trans-unit id="f40e74524fe2eeca3ec4fb47cf83ceaa91a22688" translate="yes" xml:space="preserve">
          <source>To exclude all files in a directory it is preferable to use &lt;code&gt;foo/bar&lt;/code&gt; instead of &lt;code&gt;foo/bar/**/*&lt;/code&gt;. The latter will still watch the directory &lt;code&gt;foo/bar&lt;/code&gt; but will ignore all changes to the content of that directory.</source>
          <target state="translated">디렉토리의 모든 파일을 제외하려면 &lt;code&gt;foo/bar/**/*&lt;/code&gt; 대신 &lt;code&gt;foo/bar&lt;/code&gt; 를 사용하는 것이 좋습니다 . 후자는 여전히 &lt;code&gt;foo/bar&lt;/code&gt; 디렉토리를 감시 하지만 해당 디렉토리의 내용에 대한 모든 변경 사항을 무시합니다.</target>
        </trans-unit>
        <trans-unit id="4166085f88b18973c350bf4278ffeb2a4c4d9e4a" translate="yes" xml:space="preserve">
          <source>To maintain backwards compatibility, run your root hooks &lt;em&gt;if and only if&lt;/em&gt;&lt;code&gt;global.beforeEach&lt;/code&gt; (or other relevant hook) exists.</source>
          <target state="translated">이전 버전과의 호환성을 유지하려면 &lt;code&gt;global.beforeEach&lt;/code&gt; (또는 기타 관련 후크)가있는 &lt;em&gt;경우에만&lt;/em&gt; 루트 후크를 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="8a094ac9a15fef3b07e9d66f499b8ea5894cc8b3" translate="yes" xml:space="preserve">
          <source>To make things even easier, the &lt;code&gt;done()&lt;/code&gt; callback also accepts an &lt;code&gt;Error&lt;/code&gt; instance (i.e. &lt;code&gt;new Error()&lt;/code&gt;), so we may use this directly:</source>
          <target state="translated">더 쉽게하기 위해 &lt;code&gt;done()&lt;/code&gt; 콜백은 &lt;code&gt;Error&lt;/code&gt; 인스턴스 (예 : &lt;code&gt;new Error()&lt;/code&gt; ) 도 허용 하므로 직접 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4a1f0f83779adef265f359131c735d34f2325b4c" translate="yes" xml:space="preserve">
          <source>To migrate your tests using root hooks to a root hook plugin:</source>
          <target state="translated">루트 후크를 사용하여 테스트를 루트 후크 플러그인으로 마이그레이션하려면 :</target>
        </trans-unit>
        <trans-unit id="063038b603f5a715c88594f9af467ed68f1e59a4" translate="yes" xml:space="preserve">
          <source>To override you may pass the timeout in milliseconds, or a value with the &lt;code&gt;s&lt;/code&gt; suffix, e.g., &lt;code&gt;--timeout 2s&lt;/code&gt; and &lt;code&gt;--timeout 2000&lt;/code&gt; are equivalent.</source>
          <target state="translated">재정의하려면 시간 제한을 밀리 초 단위로 전달하거나 &lt;code&gt;s&lt;/code&gt; 접미사가 있는 값 ( 예 : &lt;code&gt;--timeout 2s&lt;/code&gt; 및 &lt;code&gt;--timeout 2000&lt;/code&gt; ) 이 동일합니다.</target>
        </trans-unit>
        <trans-unit id="181147873dde77a66b9e8936a82a57a1c0d43a0b" translate="yes" xml:space="preserve">
          <source>To run Mocha&amp;rsquo;s tests, you will need GNU Make or compatible; Cygwin should work.</source>
          <target state="translated">Mocha의 테스트를 실행하려면 GNU Make 또는 호환이 필요합니다. Cygwin이 작동해야합니다.</target>
        </trans-unit>
        <trans-unit id="ff5e7f90eeb52aa92ea33aa784bfbbf4136ccea4" translate="yes" xml:space="preserve">
          <source>To skip &lt;em&gt;multiple&lt;/em&gt; tests in this manner, use &lt;code&gt;this.skip()&lt;/code&gt; in a &amp;ldquo;before all&amp;rdquo; hook:</source>
          <target state="translated">이러한 방식으로 &lt;em&gt;여러&lt;/em&gt; 테스트 를 건너 뛰려면 &quot;before all&quot;후크에서 &lt;code&gt;this.skip()&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="124a97823b2ea07d462afbbcf69e674aeafa0dd8" translate="yes" xml:space="preserve">
          <source>To skip &lt;em&gt;multiple&lt;/em&gt; tests in this manner, use &lt;code&gt;this.skip()&lt;/code&gt; in a &amp;ldquo;before&amp;rdquo; hook:</source>
          <target state="translated">이러한 방식으로 &lt;em&gt;여러&lt;/em&gt; 테스트 를 건너 뛰려면 &amp;ldquo;before&amp;rdquo;후크에서 &lt;code&gt;this.skip()&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="968f3767ca44e5f61e465ea23fb749d9d35eb82e" translate="yes" xml:space="preserve">
          <source>To skip looking for config files, use &lt;code&gt;--no-config&lt;/code&gt;. Likewise, use &lt;code&gt;--no-package&lt;/code&gt; to stop Mocha from looking for configuration in a &lt;code&gt;package.json&lt;/code&gt;.</source>
          <target state="translated">구성 파일 찾기를 건너 뛰려면 &lt;code&gt;--no-config&lt;/code&gt; 를 사용하십시오 . 마찬가지로 &lt;code&gt;--no-package&lt;/code&gt; 를 사용 하여 Mocha가 &lt;code&gt;package.json&lt;/code&gt; 에서 구성을 찾지 못하도록 합니다 .</target>
        </trans-unit>
        <trans-unit id="ec00d22c3ec8c631b1641c9ec02e61e7e8843ff3" translate="yes" xml:space="preserve">
          <source>To specify custom report title, use &lt;code&gt;--reporter-option suiteName=&quot;Custom name&quot;&lt;/code&gt;.</source>
          <target state="translated">사용자 정의 보고서 제목을 지정하려면 &lt;code&gt;--reporter-option suiteName=&quot;Custom name&quot;&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="7260172f73da876c1c01ac390ce0bacfa8301c04" translate="yes" xml:space="preserve">
          <source>To tweak what&amp;rsquo;s considered &amp;ldquo;slow&amp;rdquo;, you can use the &lt;code&gt;slow()&lt;/code&gt; method:</source>
          <target state="translated">&quot;느린&quot;것으로 간주되는 것을 조정하기 위해 &lt;code&gt;slow()&lt;/code&gt; 메소드를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4aff415f99540d0b50b0e89660fe5754193c5ce0" translate="yes" xml:space="preserve">
          <source>To use a different reporter:</source>
          <target state="translated">다른 기자를 사용하려면 :</target>
        </trans-unit>
        <trans-unit id="5552caa1938b7670e69ca45f3bd528b8cc9891de" translate="yes" xml:space="preserve">
          <source>To use it, load this file when running Mocha via &lt;code&gt;mocha --require fixtures.cjs&lt;/code&gt; (or whatever you have named the file).</source>
          <target state="translated">이를 사용하려면 &lt;code&gt;mocha --require fixtures.cjs&lt;/code&gt; (또는 파일 이름을 지정) 를 통해 Mocha를 실행할 때이 파일을로드하십시오 .</target>
        </trans-unit>
        <trans-unit id="db46e01f0805db48b03451da376ea0e4eefa6bce" translate="yes" xml:space="preserve">
          <source>Top-level hooks, tests and suites are all made members of an &amp;ldquo;invisible&amp;rdquo; &lt;em&gt;root suite&lt;/em&gt;; there is only &lt;em&gt;one&lt;/em&gt; root suite for the entire process</source>
          <target state="translated">최상위 수준의 후크, 테스트 및 제품군은 모두 &quot;보이지 않는&quot; &lt;em&gt;루트 제품군의&lt;/em&gt; 구성원이됩니다 . 전체 프로세스에 대해 &lt;em&gt;하나의&lt;/em&gt; 루트 제품군 만 있습니다.</target>
        </trans-unit>
        <trans-unit id="cf6dba0d1923d5a44b90c04697d5f1af6fbf2fd6" translate="yes" xml:space="preserve">
          <source>Troubleshooting Parallel Mode</source>
          <target state="translated">병렬 모드 문제 해결</target>
        </trans-unit>
        <trans-unit id="4d67647d97898e9540d474b58f2a7cd6420e6599" translate="yes" xml:space="preserve">
          <source>Try something like &lt;a href=&quot;https://npm.im/why-is-node-running&quot;&gt;why-is-node-running&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://npm.im/why-is-node-running&quot;&gt;why-is-node-running&lt;/a&gt; 과 같은 것을 시도하십시오.</target>
        </trans-unit>
        <trans-unit id="3736ba582e365ededba73dae44c055b365583dc0" translate="yes" xml:space="preserve">
          <source>Try something like &lt;a href=&quot;https://npm.im/wtfnode&quot;&gt;wtfnode&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://npm.im/wtfnode&quot;&gt;wtfnode&lt;/a&gt; 와 같은 것을 시도하십시오.</target>
        </trans-unit>
        <trans-unit id="3e9298e857ce2fed5736a6527f73cc92083cd44f" translate="yes" xml:space="preserve">
          <source>Unless otherwise noted, &lt;em&gt;all&lt;/em&gt; boolean flags default to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">달리 명시되지 않는 한 &lt;em&gt;모든&lt;/em&gt; 부울 플래그는 기본적으로 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="16302731dcea624de7ac441d493693a3cd62b1ca" translate="yes" xml:space="preserve">
          <source>Updated for v9.0.0.</source>
          <target state="translated">v9.0.0 용으로 업데이트되었습니다.</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="777ba148d422cf0b48365288139f2a0be061a365" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#-grep-regexp-g-regexp&quot;&gt;&lt;code&gt;--grep&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http://localhost:8080/#-fgrep-string-f-string&quot;&gt;&lt;code&gt;--fgrep&lt;/code&gt;&lt;/a&gt; instead; it&amp;rsquo;s not particularly efficient, but it will work.</source>
          <target state="translated">대신 &lt;a href=&quot;#-grep-regexp-g-regexp&quot;&gt; &lt;code&gt;--grep&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;http://localhost:8080/#-fgrep-string-f-string&quot;&gt; &lt;code&gt;--fgrep&lt;/code&gt; 을&lt;/a&gt; 사용하십시오 . 특히 효율적은 아니지만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="60ed9ffde5c3bc9c4eb8943a408076b8dfe51f28" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#exclusive-tests&quot;&gt;&lt;code&gt;.only&lt;/code&gt;&lt;/a&gt; until you find the test that causes Mocha to hang</source>
          <target state="translated">Mocha가 중단되는 테스트를 찾을 때까지 &lt;a href=&quot;#exclusive-tests&quot;&gt; &lt;code&gt;.only&lt;/code&gt; 만&lt;/a&gt; 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="db795f63f7d0809ff6f0768d8accb6e4bb7c01fe" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;--inspect&lt;/code&gt; / &lt;code&gt;--inspect-brk&lt;/code&gt; to launch the V8 inspector for use with Chrome Dev Tools.</source>
          <target state="translated">사용 &lt;code&gt;--inspect&lt;/code&gt; / &lt;code&gt;--inspect-brk&lt;/code&gt; 크롬 개발 도구와 함께 사용할 V8 관리자를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="a87bcb8c66a2c96ea2584fcc3f08d2cce5bf1e4f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;--jobs &amp;lt;count&amp;gt;&lt;/code&gt; to specify the &lt;em&gt;maximum&lt;/em&gt; number of processes in the worker pool.</source>
          <target state="translated">사용 &lt;code&gt;--jobs &amp;lt;count&amp;gt;&lt;/code&gt; 지정하는 &lt;em&gt;최대&lt;/em&gt; 작업자 풀에 프로세스의 수입니다.</target>
        </trans-unit>
        <trans-unit id="df117c84bfd754a0f560844b422a5d21cf6524c8" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;--require test/hooks.js&lt;/code&gt; (even better: use a &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;config file&lt;/a&gt; with &lt;code&gt;{&quot;require&quot;: &quot;test/hooks.js&quot;}&lt;/code&gt;) when running your tests.</source>
          <target state="translated">&lt;code&gt;--require test/hooks.js&lt;/code&gt; 사용하십시오 (더 나은 방법 : &lt;code&gt;{&quot;require&quot;: &quot;test/hooks.js&quot;}&lt;/code&gt; 와 함께 &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;구성 파일&lt;/a&gt; 사용 ).</target>
        </trans-unit>
        <trans-unit id="f8db095aa8f3ccdc616eed02e5c89f9c6a2a80ad" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;inspect&lt;/code&gt; to launch Node.js&amp;rsquo; internal debugger.</source>
          <target state="translated">&lt;code&gt;inspect&lt;/code&gt; 를 사용 하여 Node.js의 내부 디버거를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="1d1c5d224d2ffa4b3e5c8419d49092b7724e335d" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--parallel&lt;/code&gt; flag to run tests in a worker pool.</source>
          <target state="translated">&lt;code&gt;--parallel&lt;/code&gt; 플래그를 사용하여 작업자 풀에서 테스트를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="4d505f9434f52c09b27f464e641b257ea19bcd44" translate="yes" xml:space="preserve">
          <source>Use the &lt;em&gt;inverse&lt;/em&gt; of the match specified by &lt;code&gt;--grep&lt;/code&gt; or &lt;code&gt;fgrep&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--grep&lt;/code&gt; 또는 &lt;code&gt;fgrep&lt;/code&gt; 로 지정된 일치 의 &lt;em&gt;역&lt;/em&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="ec02773b86986cfdb5c4d1ecb9e0c327c5d9c709" translate="yes" xml:space="preserve">
          <source>Use the new &lt;a href=&quot;https://github.com/nodejs/node/blob/master/doc/api/async_hooks.md&quot;&gt;&lt;code&gt;async_hooks&lt;/code&gt;&lt;/a&gt; API (&lt;a href=&quot;https://git.io/vdlNM&quot;&gt;example&lt;/a&gt;)</source>
          <target state="translated">새로운 &lt;a href=&quot;https://github.com/nodejs/node/blob/master/doc/api/async_hooks.md&quot;&gt; &lt;code&gt;async_hooks&lt;/code&gt; &lt;/a&gt; API 사용 ( &lt;a href=&quot;https://git.io/vdlNM&quot;&gt;예&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="92a267a8966c1cbb7f7dfb106c0f3b42f6087403" translate="yes" xml:space="preserve">
          <source>Use this option to have Mocha check for global variables that are leaked while running tests. Specify globals that are acceptable via the &lt;code&gt;--global&lt;/code&gt; option (for example: &lt;code&gt;--check-leaks --global jQuery --global MyLib&lt;/code&gt;).</source>
          <target state="translated">이 옵션을 사용하여 Mocha가 테스트를 실행하는 동안 누출 된 전역 변수를 확인하도록합니다. &lt;code&gt;--global&lt;/code&gt; 옵션을 통해 허용되는 전역을 지정합니다 (예 : &lt;code&gt;--check-leaks --global jQuery --global MyLib&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="337aaed86842f2d6aa0bad6af3291d8271ad3377" translate="yes" xml:space="preserve">
          <source>Use this option to have Mocha check for global variables that are leaked while running tests. Specify globals that are acceptable via the &lt;code&gt;--globals&lt;/code&gt; option (for example: &lt;code&gt;--check-leaks --globals jQuery,MyLib&lt;/code&gt;).</source>
          <target state="translated">테스트를 실행하는 동안 유출 된 전역 변수를 Mocha가 확인하게하려면이 옵션을 사용하십시오. &lt;code&gt;--globals&lt;/code&gt; 옵션을 통해 허용되는 글로벌을 지정하십시오 (예 : &lt;code&gt;--check-leaks --globals jQuery,MyLib&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="36da87d2153b160525d8b212c442138642e0e694" translate="yes" xml:space="preserve">
          <source>Useful if you want to declare, for example, hooks to be run before every test across all other test files.</source>
          <target state="translated">예를 들어 다른 모든 테스트 파일에서 모든 테스트 전에 실행할 후크를 선언하려는 경우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="a74e886def099965c425a1867eb2e606682adced" translate="yes" xml:space="preserve">
          <source>Useful when working with large strings.</source>
          <target state="translated">큰 문자열로 작업 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="4c5db29a674f1c53edcb3a3cdf216eb191d410b5" translate="yes" xml:space="preserve">
          <source>User (that&amp;rsquo;s you) executes &lt;code&gt;mocha&lt;/code&gt;</source>
          <target state="translated">사용자 (그게 바로 당신)가 &lt;code&gt;mocha&lt;/code&gt; 실행합니다</target>
        </trans-unit>
        <trans-unit id="6520ff806f47de65e65ee6d0478f3e24eb1fb32b" translate="yes" xml:space="preserve">
          <source>Using async / await</source>
          <target state="translated">async / await 사용</target>
        </trans-unit>
        <trans-unit id="ae5b40f0874dcda412106947e0068d99e71d6538" translate="yes" xml:space="preserve">
          <source>V8 flags can be defined in Mocha&amp;rsquo;s &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="translated">V8 플래그는 Mocha의 &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;구성&lt;/a&gt; 에서 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3524cc2fcdcb4100bc0a15fc50b996cff06a83f0" translate="yes" xml:space="preserve">
          <source>View SuperAgent&amp;rsquo;s &lt;a href=&quot;https://github.com/visionmedia/superagent/blob/master/Makefile&quot;&gt;Makefile&lt;/a&gt; for reference.</source>
          <target state="translated">SuperAgent의 &lt;a href=&quot;https://github.com/visionmedia/superagent/blob/master/Makefile&quot;&gt;Makefile&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="46ce53208c0b44d4824e60e18f475a3488a4cf23" translate="yes" xml:space="preserve">
          <source>Wallaby.js</source>
          <target state="translated">Wallaby.js</target>
        </trans-unit>
        <trans-unit id="208c5b855393fc6ee45c44cf3ab2085044d58ce7" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re using the &lt;code&gt;.mjs&lt;/code&gt; extension in these examples.</source>
          <target state="translated">이 예제 에서는 &lt;code&gt;.mjs&lt;/code&gt; 확장자를 사용하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="6617b9a153ce187d04e83c2753de551736092acd" translate="yes" xml:space="preserve">
          <source>Web notification support is being made available for current versions of modern browsers. Ensure your browser version supports both &lt;a href=&quot;https://caniuse.com/#feat=promises&quot;&gt;promises&lt;/a&gt; and &lt;a href=&quot;https://caniuse.com/#feat=notifications&quot;&gt;web notifications&lt;/a&gt;. As the Notification API evolved over time, &lt;strong&gt;do not expect&lt;/strong&gt; the minimum possible browser version to necessarily work.</source>
          <target state="translated">웹 알림 지원은 최신 버전의 최신 브라우저에서 사용할 수 있습니다. 브라우저 버전이 &lt;a href=&quot;https://caniuse.com/#feat=promises&quot;&gt;약속&lt;/a&gt; 과 &lt;a href=&quot;https://caniuse.com/#feat=notifications&quot;&gt;웹 알림을&lt;/a&gt; 모두 지원하는지 확인하십시오 . 알림 API가 시간이 지남에 따라 발전함에 따라 가능한 최소 브라우저 버전이 반드시 작동 &lt;strong&gt;한다고 기대하지 마십시오&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="007f2a3d03e97100b115da180988c4633173e84d" translate="yes" xml:space="preserve">
          <source>WebSocket.io</source>
          <target state="translated">WebSocket.io</target>
        </trans-unit>
        <trans-unit id="1a0628315b2e94ab904cb5616ff2294a7445045d" translate="yes" xml:space="preserve">
          <source>When Mocha itself throws exception, the associated &lt;code&gt;Error&lt;/code&gt; will have a &lt;code&gt;code&lt;/code&gt; property. Where applicable, consumers should check the &lt;code&gt;code&lt;/code&gt; property instead of string-matching against the &lt;code&gt;message&lt;/code&gt; property. The following table describes these error codes:</source>
          <target state="translated">Mocha 자체에서 예외가 발생하면 연결된 &lt;code&gt;Error&lt;/code&gt; 에 &lt;code&gt;code&lt;/code&gt; 속성이 있습니다. 해당되는 경우 소비자는 &lt;code&gt;message&lt;/code&gt; 속성 에 대한 문자열 일치 대신 &lt;code&gt;code&lt;/code&gt; 속성을 확인해야 합니다. 다음 표는 이러한 오류 코드를 설명합니다.</target>
        </trans-unit>
        <trans-unit id="733b2ef39348df3c91b083b02ac3752785dc18f6" translate="yes" xml:space="preserve">
          <source>When Mocha runs in parallel mode, &lt;strong&gt;test files do not share the same process,&lt;/strong&gt; nor do they share the same instance of Mocha. Consequently, a hypothetical root hook defined in test file &lt;em&gt;A&lt;/em&gt;&lt;strong&gt;will not be present&lt;/strong&gt; in test file &lt;em&gt;B&lt;/em&gt;.</source>
          <target state="translated">Mocha가 병렬 모드에서 실행될 때 &lt;strong&gt;테스트 파일은 동일한 프로세스&lt;/strong&gt; 를 공유하지 않으며 동일한 Mocha 인스턴스를 공유하지도 않습니다. 결과적으로 테스트 파일 &lt;em&gt;A에&lt;/em&gt; 정의 된 가상 루트 후크 는 테스트 파일 &lt;em&gt;B&lt;/em&gt; 에 &lt;strong&gt;표시되지 않습니다&lt;/strong&gt; .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="146ef27e5e8c8636cb475ce08289f63327d8c272" translate="yes" xml:space="preserve">
          <source>When Not To Use Global Fixtures</source>
          <target state="translated">글로벌 설비를 사용하지 않는 경우</target>
        </trans-unit>
        <trans-unit id="de10f11f6058755e0bcb59881aa96c0df52e2eb1" translate="yes" xml:space="preserve">
          <source>When To Use Global Fixtures</source>
          <target state="translated">글로벌 설비를 사용하는 경우</target>
        </trans-unit>
        <trans-unit id="63c62aabdb13e3b2b161ce01ecfef17a5fd85ba3" translate="yes" xml:space="preserve">
          <source>When a test file is loaded, Mocha executes all of its suites and finds&amp;ndash;&lt;em&gt;but does not execute&lt;/em&gt;&amp;ndash;any hooks and tests therein.</source>
          <target state="translated">테스트 파일이로드되면 Mocha는 모든 제품군을 &lt;em&gt;실행&lt;/em&gt; 하고 그 안에서 후크와 테스트를 찾습니다. &lt;em&gt;하지만 실행하지는 않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="403cb28cb0e9a6ecc7979365e4fa803f09f2b2f2" translate="yes" xml:space="preserve">
          <source>When a worker receives a test file to run, the worker creates a new Mocha instance &lt;em&gt;for the single test file&lt;/em&gt;, and:</source>
          <target state="translated">작업자가 실행할 테스트 파일을 받으면 작업자는 &lt;em&gt;단일 테스트 파일에 대한&lt;/em&gt; 새 Mocha 인스턴스 &lt;em&gt;를&lt;/em&gt; 만들고 다음을 &lt;em&gt;수행합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="baf7c0750caea00132dceeabd1897398780cd267" translate="yes" xml:space="preserve">
          <source>When looking for test files, recurse into subdirectories.</source>
          <target state="translated">테스트 파일을 찾을 때 하위 디렉토리로 재귀하십시오.</target>
        </trans-unit>
        <trans-unit id="180d2f47b23dbc479984a8224fa759e05fe31c61" translate="yes" xml:space="preserve">
          <source>When possible, show the difference between expected and actual values when an assertion failure is encountered.</source>
          <target state="translated">가능하면 어설 션 실패가 발생했을 때 예상 값과 실제 값의 차이를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="650695648cf73c3a21472400e31af12126ab21b6" translate="yes" xml:space="preserve">
          <source>When run (in the default &amp;ldquo;serial&amp;rdquo; mode) via this command:</source>
          <target state="translated">이 명령을 통해 실행할 때 (기본 &quot;직렬&quot;모드에서) :</target>
        </trans-unit>
        <trans-unit id="9e83e679040d85a449b1822c88d3ad567f5eef32" translate="yes" xml:space="preserve">
          <source>When testing synchronous code, omit the callback and Mocha will automatically continue on to the next test.</source>
          <target state="translated">동기 코드를 테스트 할 때 콜백을 생략하면 Mocha는 자동으로 다음 테스트를 계속 진행합니다.</target>
        </trans-unit>
        <trans-unit id="5b14f0446d67ad48b9182e5b513b1e190bdf8342" translate="yes" xml:space="preserve">
          <source>When the worker completes the test file, buffered results are returned to the main process, which then gives them to the user-specified reporter (&lt;code&gt;spec&lt;/code&gt; by default)</source>
          <target state="translated">작업자가 테스트 파일을 완료하면 버퍼링 된 결과가 기본 프로세스로 반환 된 다음 사용자가 지정한 리포터에게 제공됩니다 ( 기본적으로 &lt;code&gt;spec&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="35b1be9dfabfe815d96d1b2c647c1167935b0a7d" translate="yes" xml:space="preserve">
          <source>When used with &lt;code&gt;--bail&lt;/code&gt; (or &lt;code&gt;this.bail()&lt;/code&gt;) to exit after the first failure, it&amp;rsquo;s likely other tests will be running at the same time. Mocha must shut down its worker processes before exiting.</source>
          <target state="translated">&lt;code&gt;--bail&lt;/code&gt; (또는 &lt;code&gt;this.bail()&lt;/code&gt; ) 과 함께 사용 하여 첫 번째 실패 후 종료하면 다른 테스트가 동시에 실행될 가능성이 높습니다. Mocha는 종료하기 전에 작업자 프로세스를 종료해야합니다.</target>
        </trans-unit>
        <trans-unit id="9812e7de13ef00ec5ef3183896e1ac0d6bb304f2" translate="yes" xml:space="preserve">
          <source>When using module-level mocks via libs like &lt;code&gt;proxyquire&lt;/code&gt;, &lt;code&gt;rewiremock&lt;/code&gt; or &lt;code&gt;rewire&lt;/code&gt;, hold off on using ES modules for your test files</source>
          <target state="translated">같은 libs와를 통해 모듈 수준 모의 객체를 사용하는 경우 &lt;code&gt;proxyquire&lt;/code&gt; , &lt;code&gt;rewiremock&lt;/code&gt; 또는 &lt;code&gt;rewire&lt;/code&gt; , 테스트 파일에 대한 ES 모듈을 사용하여 보류</target>
        </trans-unit>
        <trans-unit id="dc62639f5265fad900da247d38f006b2a4ffdf0c" translate="yes" xml:space="preserve">
          <source>With its default &amp;ldquo;BDD&amp;rdquo;-style interface, Mocha provides the hooks &lt;code&gt;before()&lt;/code&gt;, &lt;code&gt;after()&lt;/code&gt;, &lt;code&gt;beforeEach()&lt;/code&gt;, and &lt;code&gt;afterEach()&lt;/code&gt;. These should be used to set up preconditions and clean up after your tests.</source>
          <target state="translated">기본 &quot;BDD&quot;스타일 인터페이스를 사용하여 Mocha는 &lt;code&gt;before()&lt;/code&gt; , &lt;code&gt;after()&lt;/code&gt; , &lt;code&gt;beforeEach()&lt;/code&gt; 및 &lt;code&gt;afterEach()&lt;/code&gt; 후크 를 제공합니다 . 사전 조건을 설정하고 테스트 후 정리하는 데 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="16496fb84961f70ecc0b32b3159803b0f68279e2" translate="yes" xml:space="preserve">
          <source>Work identically parallel mode, watch mode, and serial mode</source>
          <target state="translated">동일하게 병렬 모드, 시계 모드 및 직렬 모드로 작동</target>
        </trans-unit>
        <trans-unit id="b0a77555be0622b8ee3dc42afae18948e8477c1b" translate="yes" xml:space="preserve">
          <source>Working with Promises</source>
          <target state="translated">약속과 협력</target>
        </trans-unit>
        <trans-unit id="886a64c45d3e00ddc7bf5f5fb27189e7a4f8985b" translate="yes" xml:space="preserve">
          <source>XUnit</source>
          <target state="translated">XUnit</target>
        </trans-unit>
        <trans-unit id="4d8818a69484756c75a0ed4e28260e21efa2ccc3" translate="yes" xml:space="preserve">
          <source>You can also put &lt;code&gt;.skip()&lt;/code&gt; on an entire suite. This is equivalent to appending &lt;code&gt;.skip()&lt;/code&gt; onto all tests in the suite. Hooks in the suite are also skipped.</source>
          <target state="translated">전체 제품군에 &lt;code&gt;.skip()&lt;/code&gt; 를 넣을 수도 있습니다 . 이것은 스위트의 모든 테스트에 &lt;code&gt;.skip()&lt;/code&gt; 를 추가하는 것과 같습니다 . 스위트의 후크도 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="4e19397d678bf6b1ecd2b44b2845afaa38c6ac24" translate="yes" xml:space="preserve">
          <source>You can choose to retry failed tests up to a certain number of times. This feature is designed to handle end-to-end tests (functional tests/Selenium&amp;hellip;) where resources cannot be easily mocked/stubbed. &lt;strong&gt;It&amp;rsquo;s not recommended to use this feature for unit tests&lt;/strong&gt;.</source>
          <target state="translated">실패한 테스트를 특정 횟수만큼 재 시도하도록 선택할 수 있습니다. 이 기능은 리소스를 쉽게 조롱 / 스텁 할 수없는 종단 간 테스트 (기능 테스트 / 셀레늄&amp;hellip;)를 처리하도록 설계되었습니다. &lt;strong&gt;단위 테스트에는이 기능을 사용하지 않는 것이 좋습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="a875eb1fb1a3a068824aa1c81301b7397d36e221" translate="yes" xml:space="preserve">
          <source>You can specify a custom &lt;code&gt;package.json&lt;/code&gt; location as well, using the &lt;code&gt;--package &amp;lt;path&amp;gt;&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;--package &amp;lt;path&amp;gt;&lt;/code&gt; 옵션을 사용하여 사용자 지정 &lt;code&gt;package.json&lt;/code&gt; 위치도 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a0415322eb417f82745bfaee5d6a53e02e96cbb5" translate="yes" xml:space="preserve">
          <source>You can specify a custom location for your configuration file with the &lt;code&gt;--config &amp;lt;path&amp;gt;&lt;/code&gt; option. Mocha will use the file&amp;rsquo;s extension to determine how to parse the file, and will assume JSON if unknown.</source>
          <target state="translated">&lt;code&gt;--config &amp;lt;path&amp;gt;&lt;/code&gt; 옵션 을 사용하여 구성 파일의 사용자 지정 위치를 지정할 수 있습니다 . Mocha는 파일의 확장자를 사용하여 파일 구문 분석 방법을 결정하고 알 수없는 경우 JSON을 가정합니다.</target>
        </trans-unit>
        <trans-unit id="346136f8072a2aa519654b9d90a87ce97604d348" translate="yes" xml:space="preserve">
          <source>You could be clever and try to get around this restriction by assigning something to the &lt;code&gt;global&lt;/code&gt; object, but this will &lt;em&gt;not&lt;/em&gt; work in parallel mode. It&amp;rsquo;s probably best to play by the rules!</source>
          <target state="translated">영리하고 &lt;code&gt;global&lt;/code&gt; 개체에 무언가를 할당하여이 제한을 피하려고 할 수 있지만 병렬 모드 &lt;em&gt;에서는&lt;/em&gt; 작동 &lt;em&gt;하지 않습니다&lt;/em&gt; . 규칙에 따라 플레이하는 것이 가장 좋습니다!</target>
        </trans-unit>
        <trans-unit id="f005210d275a1a8eb71a10ca4d3e586d175c0169" translate="yes" xml:space="preserve">
          <source>You may also choose multiple suites:</source>
          <target state="translated">여러 제품군을 선택할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="eb919cbe2da233a5f01bbc2c6d1554c50ab176a9" translate="yes" xml:space="preserve">
          <source>You may also pick any file and add &amp;ldquo;root&amp;rdquo;-level hooks. For example, add &lt;code&gt;beforeEach()&lt;/code&gt; outside of all &lt;code&gt;describe()&lt;/code&gt; blocks. This will cause the callback to &lt;code&gt;beforeEach()&lt;/code&gt; to run before any test case, regardless of the file it lives in (this is because Mocha has an &lt;em&gt;implied&lt;/em&gt;&lt;code&gt;describe()&lt;/code&gt; block, called the &amp;ldquo;root suite&amp;rdquo;).</source>
          <target state="translated">파일을 선택하고 &quot;루트&quot;수준 후크를 추가 할 수도 있습니다. 예를 들어, &lt;code&gt;describe()&lt;/code&gt; 블록 외부에 &lt;code&gt;beforeEach()&lt;/code&gt; 추가하십시오 . 이것은 존재 하는 파일에 관계없이 &lt;code&gt;beforeEach()&lt;/code&gt; 에 대한 콜백이 테스트 케이스 전에 실행되게합니다 (이것은 Mocha 에 &quot;루트 스위트&quot;라고 하는 &lt;em&gt;암시 적 &lt;/em&gt; &lt;code&gt;describe()&lt;/code&gt; 블록 이 있기 때문입니다 ).&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="53a40e9ac08f8e56ed58d18aad7e7338c0d58b43" translate="yes" xml:space="preserve">
          <source>You may also skip &lt;em&gt;at runtime&lt;/em&gt; using &lt;code&gt;this.skip()&lt;/code&gt;. If a test needs an environment or configuration which cannot be detected beforehand, a runtime skip is appropriate. For example:</source>
          <target state="translated">&lt;code&gt;this.skip()&lt;/code&gt; 사용하여 &lt;em&gt;런타임에&lt;/em&gt; 건너 뛸 수도 있습니다 . 테스트에 미리 감지 할 수없는 환경이나 구성이 필요한 경우 런타임 건너 뛰기가 적절합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c38e124559800bfca4dd82079acc11e108c9ea31" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;ll note that we used &lt;code&gt;this&lt;/code&gt; in the fixture examples. Global setup fixtures and global teardown fixtures &lt;em&gt;share a context&lt;/em&gt;, which means we can add properties to the context object (&lt;code&gt;this&lt;/code&gt;) in the setup fixture, and reference them later in the teardown fixture. This is more useful when the fixtures are in separate files, since you can just use JS&amp;rsquo; variable scoping rules instead (&lt;a href=&quot;#when-not-to-use-global-fixtures&quot;&gt;example below&lt;/a&gt;).</source>
          <target state="translated">조명기 예제에서 &lt;code&gt;this&lt;/code&gt; 사용했음을 알 수 있습니다. 글로벌 설정 픽스쳐와 글로벌 해체 픽스쳐 &lt;em&gt;는 컨텍스트를 공유합니다.&lt;/em&gt; 즉 , 셋업 픽스처 의 컨텍스트 객체 ( &lt;code&gt;this&lt;/code&gt; )에 속성을 추가 하고 나중에 분해 픽스쳐에서 참조 할 수 있습니다. 이것은 조명기가 별도의 파일에있을 때 더 유용합니다 . 대신 JS의 변수 범위 지정 규칙을 사용할 수 있기 때문입니다 ( &lt;a href=&quot;#when-not-to-use-global-fixtures&quot;&gt;아래 예제 참조&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="3599d1fd78d22e26bf27d167405a056e7da4889f" translate="yes" xml:space="preserve">
          <source>Your &lt;code&gt;test/hooks.js&lt;/code&gt; (for this example, a CJS module) should contain:</source>
          <target state="translated">귀하의 &lt;code&gt;test/hooks.js&lt;/code&gt; (이 예하는 CJS 모듈)을 포함한다 :</target>
        </trans-unit>
        <trans-unit id="c3eec8b03dcce9fed74c063124b0f66dfcd0b0f7" translate="yes" xml:space="preserve">
          <source>Your library should &lt;em&gt;always&lt;/em&gt; export a &lt;a href=&quot;#defining-a-root-hook-plugin&quot;&gt;&lt;code&gt;mochaHooks&lt;/code&gt; object&lt;/a&gt;.</source>
          <target state="translated">라이브러리는 &lt;em&gt;항상 &lt;/em&gt;&lt;a href=&quot;#defining-a-root-hook-plugin&quot;&gt; &lt;code&gt;mochaHooks&lt;/code&gt; 객체를&lt;/a&gt; 내 보내야 합니다 .</target>
        </trans-unit>
        <trans-unit id="729991f59c94410ba3a20c10a4fd2265d0c3ec60" translate="yes" xml:space="preserve">
          <source>Your original &lt;code&gt;test/test.spec.js&lt;/code&gt; should now contain:</source>
          <target state="translated">이제 원본 &lt;code&gt;test/test.spec.js&lt;/code&gt; 에 다음 이 포함되어야합니다.</target>
        </trans-unit>
        <trans-unit id="45efa3b9e9a75f11cb8a919a504b52c36a106b90" translate="yes" xml:space="preserve">
          <source>a falsy or otherwise underspecified exception was thrown</source>
          <target state="translated">거짓 또는 기타 지정되지 않은 예외가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="32fab07543a277b879029abf99d6e89ba5b11c84" translate="yes" xml:space="preserve">
          <source>auto run tests on file save</source>
          <target state="translated">파일 저장시 자동 실행 테스트</target>
        </trans-unit>
        <trans-unit id="f0f10b7b77b19c7640a562cf9060fead1bff0494" translate="yes" xml:space="preserve">
          <source>done()</source>
          <target state="translated">done()</target>
        </trans-unit>
        <trans-unit id="e87e846a2b2da5dfadb82e7cc09eefd99016f221" translate="yes" xml:space="preserve">
          <source>exports</source>
          <target state="translated">exports</target>
        </trans-unit>
        <trans-unit id="7ed80072bd82ef6bdecb969dcf251b2c4ca964f8" translate="yes" xml:space="preserve">
          <source>interface specified in options not found</source>
          <target state="translated">옵션에 지정된 인터페이스를 찾을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="30470456ea8daf5c47f465c99ce01e626cd7ded4" translate="yes" xml:space="preserve">
          <source>invalid or unsupported value was passed for a given argument</source>
          <target state="translated">지정된 인수에 유효하지 않거나 지원되지 않는 값이 전달되었습니다.</target>
        </trans-unit>
        <trans-unit id="a619da43c8cb95adf890b628630836654a0a3077" translate="yes" xml:space="preserve">
          <source>mocha</source>
          <target state="translated">mocha</target>
        </trans-unit>
        <trans-unit id="4bfb16b073994e714d04294f5bca1c3e894db573" translate="yes" xml:space="preserve">
          <source>mocha.opts</source>
          <target state="translated">mocha.opts</target>
        </trans-unit>
        <trans-unit id="1859cc6fb110f181dca7c365469d9905153a1bd4" translate="yes" xml:space="preserve">
          <source>mocha.setup()</source>
          <target state="translated">mocha.setup()</target>
        </trans-unit>
        <trans-unit id="cbe19f375a678776beb07f153186eb8e9713ad96" translate="yes" xml:space="preserve">
          <source>only()</source>
          <target state="translated">only()</target>
        </trans-unit>
        <trans-unit id="66afd2a4fec11527d32e28b8e991cb7947e40089" translate="yes" xml:space="preserve">
          <source>or as a development dependency for your project:</source>
          <target state="translated">또는 프로젝트의 개발 의존성으로 :</target>
        </trans-unit>
        <trans-unit id="71e047ff3acf2d180691a9e471b50dda9cb8866f" translate="yes" xml:space="preserve">
          <source>our &lt;a href=&quot;https://github.com/mochajs/mocha-examples/tree/master/packages/third-party-reporter&quot;&gt;working example&lt;/a&gt;</source>
          <target state="translated">우리의 &lt;a href=&quot;https://github.com/mochajs/mocha-examples/tree/master/packages/third-party-reporter&quot;&gt;작업 예&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="decd2853106876b084ec854519f53343d9081562" translate="yes" xml:space="preserve">
          <source>reporter specified in options not found</source>
          <target state="translated">옵션에 지정된 기자를 찾을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="32fc2503fcec0333744d29b9967dbd3a449a6f31" translate="yes" xml:space="preserve">
          <source>requested behavior, option, or parameter is unsupported</source>
          <target state="translated">요청 된 동작, 옵션 또는 매개 변수가 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="623e76c36aa2a886542011e28412cc761d7ceb01" translate="yes" xml:space="preserve">
          <source>require</source>
          <target state="translated">require</target>
        </trans-unit>
        <trans-unit id="f58113e053e9cfabd8f5da0edb51764ffe848135" translate="yes" xml:space="preserve">
          <source>run &amp;amp; debug tests for each level hierarchy from all tests to a single test (and each describe of course)</source>
          <target state="translated">모든 테스트에서 단일 테스트에 이르기까지 각 레벨 계층에 대한 테스트 실행 및 디버그</target>
        </trans-unit>
        <trans-unit id="f746722f41c9c50b7ee5e38f892a4770f5fda172" translate="yes" xml:space="preserve">
          <source>run &amp;amp; debug tests for each level hierarchy from all tests to a single test (and each suite)</source>
          <target state="translated">모든 테스트에서 단일 테스트 (및 각 제품군)에 이르기까지 각 레벨 계층에 대한 테스트 실행 및 디버그</target>
        </trans-unit>
        <trans-unit id="75a7aab533cbd0d4b0a0f60439ef76ac4367c817" translate="yes" xml:space="preserve">
          <source>see all tests in VS Code sidebar menu</source>
          <target state="translated">VS Code 사이드 바 메뉴의 모든 테스트보기</target>
        </trans-unit>
        <trans-unit id="b015dd3ac23d491eb96c2099ff31b741d8ad935d" translate="yes" xml:space="preserve">
          <source>see tests results directly in the code editor</source>
          <target state="translated">코드 편집기에서 직접 테스트 결과 확인</target>
        </trans-unit>
        <trans-unit id="1c32fed0b0a4ddd34877f85ef98fc80b6eef760b" translate="yes" xml:space="preserve">
          <source>skip()</source>
          <target state="translated">skip()</target>
        </trans-unit>
        <trans-unit id="55187fbc9d22bfac69ba93172a722f9efba0e3ef" translate="yes" xml:space="preserve">
          <source>specify()</source>
          <target state="translated">specify()</target>
        </trans-unit>
        <trans-unit id="89dfaa12d7e423bcf84be8320838b8e822e3099d" translate="yes" xml:space="preserve">
          <source>teardown()</source>
          <target state="translated">teardown()</target>
        </trans-unit>
        <trans-unit id="9915a10c050c610bc945aec656037e14c4e0d3cc" translate="yes" xml:space="preserve">
          <source>test file(s) could not be found</source>
          <target state="translated">테스트 파일을 찾을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="1a13bd67d53c6ca5d0ba854cc1c6d8e1dc4db3cb" translate="yes" xml:space="preserve">
          <source>test()</source>
          <target state="translated">test()</target>
        </trans-unit>
        <trans-unit id="e1ad659fbf49f86677c3b50da65a95aa93720622" translate="yes" xml:space="preserve">
          <source>the &lt;a href=&quot;https://github.com/travisjeffery/mocha-teamcity-reporter&quot;&gt;TeamCity reporter&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/travisjeffery/mocha-teamcity-reporter&quot;&gt;인 TeamCity 기자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="34157f09f578b485744fac8104a1888249a9097d" translate="yes" xml:space="preserve">
          <source>wrong type was passed for a given argument</source>
          <target state="translated">주어진 인수에 대해 잘못된 유형이 전달되었습니다.</target>
        </trans-unit>
        <trans-unit id="020514bf2372e6bd88fe11b116f8c24a9854ca88" translate="yes" xml:space="preserve">
          <source>✅ Do any assertion, mock, or other test libraries you&amp;rsquo;re consuming use root hooks? They may need to be &lt;a href=&quot;#migrating-a-library-to-use-root-hook-plugins&quot;&gt;migrated&lt;/a&gt; for compatibility with parallel mode.</source>
          <target state="translated">✅ 여러분이 사용하는 어설 션, 모의 또는 기타 테스트 라이브러리가 루트 후크를 사용합니까? 병렬 모드와의 호환성을 위해 &lt;a href=&quot;#migrating-a-library-to-use-root-hook-plugins&quot;&gt;마이그레이션&lt;/a&gt; 해야 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="74fbba382203491821bab30ed8deadfc64a46e83" translate="yes" xml:space="preserve">
          <source>✅ Double-check your &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;config file&lt;/a&gt;; options set in config files will be merged with any command-line option.</source>
          <target state="translated">✅ &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;구성 파일을 다시&lt;/a&gt; 확인하십시오 . 구성 파일에 설정된 옵션은 모든 명령 줄 옵션과 병합됩니다.</target>
        </trans-unit>
        <trans-unit id="c84ea8dc0e3c56eb78c3e9cfd680fd99e6f9565f" translate="yes" xml:space="preserve">
          <source>✅ Ensure you are not using &lt;a href=&quot;#file-order-is-non-deterministic&quot;&gt;other unsupported flags&lt;/a&gt;.</source>
          <target state="translated">✅ &lt;a href=&quot;#file-order-is-non-deterministic&quot;&gt;지원되지 않는 다른 플래그를&lt;/a&gt; 사용하고 있지 않은지 확인하세요 .</target>
        </trans-unit>
        <trans-unit id="43a893c194db3f54f2a105d6327aeffc991037a4" translate="yes" xml:space="preserve">
          <source>✅ Ensure you are using a &lt;a href=&quot;#reporter-limitations&quot;&gt;supported reporter&lt;/a&gt;.</source>
          <target state="translated">✅ &lt;a href=&quot;#reporter-limitations&quot;&gt;지원되는 리포터를&lt;/a&gt; 사용하고 있는지 확인하세요 .</target>
        </trans-unit>
        <trans-unit id="94431487aed245b9350023fe67b0072e52c4060c" translate="yes" xml:space="preserve">
          <source>✅ Ensure your tests clean up after themselves; remove temp files, handles, sockets, etc. Don&amp;rsquo;t try to share state or resources between test files.</source>
          <target state="translated">✅ 테스트가 자체적으로 정리되었는지 확인하십시오. 임시 파일, 핸들, 소켓 등을 제거합니다. 테스트 파일간에 상태 나 리소스를 공유하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="d62aff2da066d312840a1febb7e9456a815c36d7" translate="yes" xml:space="preserve">
          <source>✅ Ensure your tests do not depend on being run in a specific order.</source>
          <target state="translated">✅ 테스트가 특정 순서로 실행되는 것에 의존하지 않도록하십시오.</target>
        </trans-unit>
        <trans-unit id="7fbbfd79dc26bf865ae3f95f47335447106cf224" translate="yes" xml:space="preserve">
          <source>✅ If tests are unexpectedly timing out, you may need to increase the default test timeout (via &lt;a href=&quot;#-timeout-ms-t-ms&quot;&gt;&lt;code&gt;--timeout&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">테스트가 예기치 않게 시간 초과하는 경우 ✅, 당신은 (를 통해 기본 테스트 제한 시간을 늘려야 할 수 있습니다 &lt;a href=&quot;#-timeout-ms-t-ms&quot;&gt; &lt;code&gt;--timeout&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="0443c90f9dbff788381bed8c4355225f6cfaee60" translate="yes" xml:space="preserve">
          <source>✅ Look for root hooks (they look like &lt;a href=&quot;#root-hooks-are-not-global&quot;&gt;this&lt;/a&gt;) in your tests. Move them into a &lt;a href=&quot;#root-hook-plugins&quot;&gt;Root Hook Plugin&lt;/a&gt;.</source>
          <target state="translated">✅ 테스트에서 루트 후크 ( &lt;a href=&quot;#root-hooks-are-not-global&quot;&gt;이렇게&lt;/a&gt; 보이는 )를 찾으세요. &lt;a href=&quot;#root-hook-plugins&quot;&gt;루트 후크 플러그인&lt;/a&gt; 으로 이동합니다 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
