<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="d34178e964cf584fdf5806f55c96a0bc4853575e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UNITCHECK&lt;/code&gt; blocks are run just after the unit which defined them has been compiled. The main program file and each module it loads are compilation units, as are string &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;s, run-time code compiled using the &lt;code&gt;(?{ })&lt;/code&gt; construct in a regex, calls to &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; FILE&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; FILE&lt;/code&gt; , and code after the &lt;code&gt;-e&lt;/code&gt; switch on the command line.</source>
          <target state="translated">&lt;code&gt;UNITCHECK&lt;/code&gt; 블록은이를 정의한 장치가 컴파일 된 직후에 실행됩니다. 주요 프로그램 파일과 각 모듈이로드는 문자열이며, 컴파일 단위 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 사용하여 컴파일의, 런타임 코드 &lt;code&gt;(?{ })&lt;/code&gt; 정규식에 구조를 위해 호출 &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; FILE&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; FILE&lt;/code&gt; 후, 코드 &lt;code&gt;-e&lt;/code&gt; 명령 행을 켭니다.</target>
        </trans-unit>
        <trans-unit id="d0b34c789eb4701c037da956f420b7e815dbc83a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UNITCHECK&lt;/code&gt; blocks are run just after the unit which defined them has been compiled. The main program file and each module it loads are compilation units, as are string &lt;code&gt;eval&lt;/code&gt;s, run-time code compiled using the &lt;code&gt;(?{ })&lt;/code&gt; construct in a regex, calls to &lt;code&gt;do FILE&lt;/code&gt;, &lt;code&gt;require FILE&lt;/code&gt;, and code after the &lt;code&gt;-e&lt;/code&gt; switch on the command line.</source>
          <target state="translated">&lt;code&gt;UNITCHECK&lt;/code&gt; 블록은 블록을 정의한 유닛이 컴파일 된 직후에 실행됩니다. 주요 프로그램 파일과 각 모듈이로드는 문자열이며, 컴파일 단위 &lt;code&gt;eval&lt;/code&gt; 사용하여 컴파일의, 런타임 코드 &lt;code&gt;(?{ })&lt;/code&gt; 정규식에 구조를 위해 전화 &lt;code&gt;do FILE&lt;/code&gt; , &lt;code&gt;require FILE&lt;/code&gt; 애프터 및 코드 &lt;code&gt;-e&lt;/code&gt; 명령 줄을 켭니다.</target>
        </trans-unit>
        <trans-unit id="993680698e7847eec1247ae490639ce741c5d46c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UNITCHECK&lt;/code&gt;, &lt;code&gt;CHECK&lt;/code&gt; and &lt;code&gt;INIT&lt;/code&gt; code blocks are useful to catch the transition between the compilation phase and the execution phase of the main program.</source>
          <target state="translated">&lt;code&gt;UNITCHECK&lt;/code&gt; , &lt;code&gt;CHECK&lt;/code&gt; 및 &lt;code&gt;INIT&lt;/code&gt; 코드 블록은 기본 프로그램의 컴파일 단계와 실행 단계 사이의 전환을 포착하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="29082300972578ac172b3bcf60b3baedc1711b19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UNIVERSAL&lt;/code&gt; is the base class from which all blessed references inherit. See &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UNIVERSAL&lt;/code&gt; 은 모든 복된 참조가 상속되는 기본 클래스입니다. &lt;a href=&quot;perlobj&quot;&gt;perlobj를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="40ee2201428c064e4abefc93cea2f5adb84494a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UNIVERSAL&lt;/code&gt; provides the following methods:</source>
          <target state="translated">&lt;code&gt;UNIVERSAL&lt;/code&gt; 은 다음과 같은 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="48bcc00e56d5f4d3ae407316df106ebd67bb3cb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTF-16&lt;/code&gt; support in any software you're going to be using/interoperating with has probably been less tested then &lt;code&gt;UTF-8&lt;/code&gt; support</source>
          <target state="translated">&lt;code&gt;UTF-16&lt;/code&gt; 사용 / 상호 운용 할 모든 소프트웨어에서 UTF-16 지원은 아마도 &lt;code&gt;UTF-8&lt;/code&gt; 지원 보다 덜 테스트되었을 것입니다.</target>
        </trans-unit>
        <trans-unit id="6668e1349203a01e97d9d0c7131694668cceca2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTF-8&lt;/code&gt; coded data seamlessly passes traditional command piping (&lt;code&gt;cat&lt;/code&gt;, &lt;code&gt;more&lt;/code&gt;, etc.) while &lt;code&gt;UTF-16&lt;/code&gt; coded data is likely to cause confusion (with its zero bytes, for example)</source>
          <target state="translated">&lt;code&gt;UTF-8&lt;/code&gt; 로 코딩 된 데이터는 기존 명령 파이핑 ( &lt;code&gt;cat&lt;/code&gt; , &lt;code&gt;more&lt;/code&gt; 등)을 원활하게 전달 하는 반면 &lt;code&gt;UTF-16&lt;/code&gt; 으로 코딩 된 데이터는 혼동을 일으킬 수 있습니다 (예 : 0 바이트).</target>
        </trans-unit>
        <trans-unit id="8236e4ed6563ca685881ecd85fb5fbeb9a8352ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTF-8&lt;/code&gt; is internally known as &lt;code&gt;utf-8-strict&lt;/code&gt; . The tutorial uses UTF-8 consistently, even where utf8 is actually used internally, because the distinction can be hard to make, and is mostly irrelevant.</source>
          <target state="translated">&lt;code&gt;UTF-8&lt;/code&gt; 은 내부적으로 &lt;code&gt;utf-8-strict&lt;/code&gt; 로 알려져 있습니다. 이 튜토리얼은 구별하기 어렵고 대부분 관련이 없기 때문에 utf8이 실제로 내부적으로 사용되는 경우에도 UTF-8을 일관되게 사용합니다.</target>
        </trans-unit>
        <trans-unit id="155fb80f2152bf4ffcfd5f143e6e7654fb7aa8b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTF-8&lt;/code&gt; is internally known as &lt;code&gt;utf-8-strict&lt;/code&gt;. The tutorial uses UTF-8 consistently, even where utf8 is actually used internally, because the distinction can be hard to make, and is mostly irrelevant.</source>
          <target state="translated">&lt;code&gt;UTF-8&lt;/code&gt; 은 내부적으로 &lt;code&gt;utf-8-strict&lt;/code&gt; 로 알려져 있습니다. 이 튜토리얼은 utf8이 실제로 내부적으로 사용되는 경우에도 일관되게 UTF-8을 사용합니다. 구별이 어렵고 대부분 관련이 없기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="3f8de8fd8fcf48c479a5f2548a2ea84553cbb55d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTF-8&lt;/code&gt; is the official standard. &lt;code&gt;utf8&lt;/code&gt; is Perl's way of being liberal in what it accepts. If you have to communicate with things that aren't so liberal, you may want to consider using &lt;code&gt;UTF-8&lt;/code&gt; . If you have to communicate with things that are too liberal, you may have to use &lt;code&gt;utf8&lt;/code&gt; . The full explanation is in &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UTF-8&lt;/code&gt; 이 공식 표준입니다. &lt;code&gt;utf8&lt;/code&gt; 은 펄이 받아들이는 것에있어 자유 로워 지는 방식입니다. 그렇게 자유롭지 않은 것들과 의사 소통해야한다면 &lt;code&gt;UTF-8&lt;/code&gt; 사용을 고려할 수 있습니다 . 너무 자유로운 것들과 의사 소통해야한다면 &lt;code&gt;utf8&lt;/code&gt; 을 사용해야 할 수도 있습니다 . 전체 설명은 &lt;a href=&quot;encode&quot;&gt;Encode에&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="ac5912852fa9a734f9b95a1101aa81c0d3a5bec6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTF-8&lt;/code&gt; is the official standard. &lt;code&gt;utf8&lt;/code&gt; is Perl's way of being liberal in what it accepts. If you have to communicate with things that aren't so liberal, you may want to consider using &lt;code&gt;UTF-8&lt;/code&gt;. If you have to communicate with things that are too liberal, you may have to use &lt;code&gt;utf8&lt;/code&gt;. The full explanation is in &lt;a href=&quot;encode#UTF-8-vs.-utf8-vs.-UTF8&quot;&gt;&quot;UTF-8 vs. utf8 vs. UTF8&quot; in Encode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UTF-8&lt;/code&gt; 은 공식 표준입니다. &lt;code&gt;utf8&lt;/code&gt; 은 Perl이 받아들이는 것에 대해 자유주의적인 방식입니다. 너무 자유롭지 않은 것과 통신해야한다면 &lt;code&gt;UTF-8&lt;/code&gt; 사용을 고려할 수 있습니다 . 너무 자유로운 것들과 통신해야한다면 &lt;code&gt;utf8&lt;/code&gt; 을 사용해야 할 수도 있습니다 . 전체 설명은 &lt;a href=&quot;encode#UTF-8-vs.-utf8-vs.-UTF8&quot;&gt;Encode의 &quot;UTF-8 vs. utf8 vs. UTF8&quot;에&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="9648b8e1ece55e870da0fa029a2d05ec2a1a49ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTF8_GOT_SHORT&lt;/code&gt; and &lt;code&gt;UTF8_GOT_NON_CONTINUATION&lt;/code&gt; both indicate a too short sequence. The difference is that &lt;code&gt;UTF8_GOT_NON_CONTINUATION&lt;/code&gt; indicates always that there is an error, while &lt;code&gt;UTF8_GOT_SHORT&lt;/code&gt; means that an incomplete sequence was looked at. If no other flags are present, it means that the sequence was valid as far as it went. Depending on the application, this could mean one of three things:</source>
          <target state="translated">&lt;code&gt;UTF8_GOT_SHORT&lt;/code&gt; 및 &lt;code&gt;UTF8_GOT_NON_CONTINUATION&lt;/code&gt; 은 둘 다 너무 짧은 시퀀스를 나타냅니다. 차이점은 &lt;code&gt;UTF8_GOT_NON_CONTINUATION&lt;/code&gt; 은 항상 오류가 있음을 나타내는 반면 &lt;code&gt;UTF8_GOT_SHORT&lt;/code&gt; 는 불완전한 시퀀스가 ​​확인 되었음을 의미한다는 것입니다. 다른 플래그가 없으면 시퀀스가 ​​진행되는 동안 유효했음을 의미합니다. 애플리케이션에 따라 다음 세 가지 중 하나를 의미 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c5ad314dc68bfcf9c5118562765d9026038fdea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unicode::Collate::CJK::Big5&lt;/code&gt; provides &lt;code&gt;weightBig5()&lt;/code&gt;, that is adequate for &lt;code&gt;overrideCJK&lt;/code&gt; of &lt;code&gt;Unicode::Collate&lt;/code&gt; and makes tailoring of CJK Unified Ideographs in the order of CLDR's big5han ordering.</source>
          <target state="translated">&lt;code&gt;Unicode::Collate::CJK::Big5&lt;/code&gt; 는 &lt;code&gt;Unicode::Collate&lt;/code&gt; &lt;code&gt;overrideCJK&lt;/code&gt; 에 적합한 &lt;code&gt;weightBig5()&lt;/code&gt; 제공 하고 CLDR의 big5han 순서에 따라 CJK Unified Ideograph를 조정합니다.</target>
        </trans-unit>
        <trans-unit id="bda35f95559414b24b0f7588f4920e637e99eecb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unicode::Collate::CJK::GB2312&lt;/code&gt; provides &lt;code&gt;weightGB2312()&lt;/code&gt;, that is adequate for &lt;code&gt;overrideCJK&lt;/code&gt; of &lt;code&gt;Unicode::Collate&lt;/code&gt; and makes tailoring of CJK Unified Ideographs in the order of CLDR's gb2312han ordering.</source>
          <target state="translated">&lt;code&gt;Unicode::Collate::CJK::GB2312&lt;/code&gt; 는 &lt;code&gt;Unicode::Collate&lt;/code&gt; &lt;code&gt;overrideCJK&lt;/code&gt; 에 적합한 &lt;code&gt;weightGB2312()&lt;/code&gt; 제공 하고 CLDR의 gb2312han 순서에 따라 CJK 통합 표의 문자를 조정합니다.</target>
        </trans-unit>
        <trans-unit id="50b93d61a2bcdb017d1da4cb4a7e3de0c0b6f57d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unicode::Collate::CJK::JISX0208&lt;/code&gt; provides &lt;code&gt;weightJISX0208()&lt;/code&gt;, that is adequate for &lt;code&gt;overrideCJK&lt;/code&gt; of &lt;code&gt;Unicode::Collate&lt;/code&gt; and makes tailoring of 6355 kanji (CJK Unified Ideographs) in the JIS X 0208 order.</source>
          <target state="translated">&lt;code&gt;Unicode::Collate::CJK::JISX0208&lt;/code&gt; 은 &lt;code&gt;Unicode::Collate&lt;/code&gt; &lt;code&gt;overrideCJK&lt;/code&gt; 에 적합한 &lt;code&gt;weightJISX0208()&lt;/code&gt; 제공 하고 JIS X 0208 순서로 6355 한자 (CJK Unified Ideographs)를 조정합니다.</target>
        </trans-unit>
        <trans-unit id="57bd2e4df2dcc667d23fa9130f85c3c4fe05e14b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unicode::Collate::CJK::Korean&lt;/code&gt; provides &lt;code&gt;weightKorean()&lt;/code&gt;, that is adequate for &lt;code&gt;overrideCJK&lt;/code&gt; of &lt;code&gt;Unicode::Collate&lt;/code&gt; and makes tailoring of CJK Unified Ideographs in the order of CLDR's Korean ordering.</source>
          <target state="translated">&lt;code&gt;Unicode::Collate::CJK::Korean&lt;/code&gt; 은 &lt;code&gt;Unicode::Collate&lt;/code&gt; &lt;code&gt;overrideCJK&lt;/code&gt; 에 적합한 &lt;code&gt;weightKorean()&lt;/code&gt; 제공 하고 CLDR의 한국어 순서에 따라 CJK 통합 표의 문자를 조정합니다.</target>
        </trans-unit>
        <trans-unit id="fcdd09d4d7986483cdb514ee8d55c84344ad28e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unicode::Collate::CJK::Pinyin&lt;/code&gt; provides &lt;code&gt;weightPinyin()&lt;/code&gt;, that is adequate for &lt;code&gt;overrideCJK&lt;/code&gt; of &lt;code&gt;Unicode::Collate&lt;/code&gt; and makes tailoring of CJK Unified Ideographs in the order of CLDR's pinyin ordering.</source>
          <target state="translated">&lt;code&gt;Unicode::Collate::CJK::Pinyin&lt;/code&gt; 은 &lt;code&gt;Unicode::Collate&lt;/code&gt; &lt;code&gt;overrideCJK&lt;/code&gt; 에 적합한 &lt;code&gt;weightPinyin()&lt;/code&gt; 제공하며 CLDR의 병음 순서에 따라 CJK 통합 표의 문자를 조정합니다.</target>
        </trans-unit>
        <trans-unit id="ffbba643a43bc8fa99d423cd8af99518aa199ed0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unicode::Collate::CJK::Stroke&lt;/code&gt; provides &lt;code&gt;weightStroke()&lt;/code&gt;, that is adequate for &lt;code&gt;overrideCJK&lt;/code&gt; of &lt;code&gt;Unicode::Collate&lt;/code&gt; and makes tailoring of CJK Unified Ideographs in the order of CLDR's stroke ordering.</source>
          <target state="translated">&lt;code&gt;Unicode::Collate::CJK::Stroke&lt;/code&gt; 는 &lt;code&gt;Unicode::Collate&lt;/code&gt; &lt;code&gt;overrideCJK&lt;/code&gt; 에 적합한 &lt;code&gt;weightStroke()&lt;/code&gt; 제공 하고 CLDR의 스트로크 순서에 따라 CJK Unified Ideograph를 조정합니다.</target>
        </trans-unit>
        <trans-unit id="08cad4d3162f98026817fba4d323f45f7e7e8acc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unicode::Collate::CJK::Zhuyin&lt;/code&gt; provides &lt;code&gt;weightZhuyin()&lt;/code&gt;, that is adequate for &lt;code&gt;overrideCJK&lt;/code&gt; of &lt;code&gt;Unicode::Collate&lt;/code&gt; and makes tailoring of CJK Unified Ideographs in the order of CLDR's zhuyin (bopomofo) ordering.</source>
          <target state="translated">&lt;code&gt;Unicode::Collate::CJK::Zhuyin&lt;/code&gt; 은 &lt;code&gt;Unicode::Collate&lt;/code&gt; &lt;code&gt;overrideCJK&lt;/code&gt; 에 적합한 &lt;code&gt;weightZhuyin()&lt;/code&gt; 제공 하고 CLDR의 zhuyin (bopomofo) 순서에 따라 CJK 통합 표의 문자를 조정합니다.</target>
        </trans-unit>
        <trans-unit id="da0ed2cdd1ac72f2bf3f9e083bf202dcf2c866fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unicode::Collate::Locale&lt;/code&gt; is a subclass of &lt;code&gt;Unicode::Collate&lt;/code&gt; and methods other than &lt;code&gt;new&lt;/code&gt; are inherited from &lt;code&gt;Unicode::Collate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Unicode::Collate::Locale&lt;/code&gt; 의 서브 클래스입니다 &lt;code&gt;Unicode::Collate&lt;/code&gt; 및 이외의 방법 &lt;code&gt;new&lt;/code&gt; 에서 상속 된 &lt;code&gt;Unicode::Collate&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d7a0fc4be9864abfdfe213f730a836cf153d3d57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unix&lt;/code&gt; has a few filetypes that aren't supported on other platforms, like &lt;code&gt;Win32&lt;/code&gt; . If we encounter a &lt;code&gt;hardlink&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../functions/symlink&quot;&gt;symlink&lt;/a&gt;&lt;/code&gt; we'll just try to make a copy of the original file, rather than throwing an error.</source>
          <target state="translated">&lt;code&gt;Unix&lt;/code&gt; 에는 &lt;code&gt;Win32&lt;/code&gt; 와 같은 다른 플랫폼에서 지원되지 않는 몇 가지 파일 형식이 있습니다 . &lt;code&gt;hardlink&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../functions/symlink&quot;&gt;symlink&lt;/a&gt;&lt;/code&gt; 링크 가 발생 하면 오류를 발생시키지 않고 원본 파일의 복사본을 만들려고합니다.</target>
        </trans-unit>
        <trans-unit id="a182b7c96cc889f6bd8227eeff8484aa3820a3e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unix&lt;/code&gt; has a few filetypes that aren't supported on other platforms, like &lt;code&gt;Win32&lt;/code&gt;. If we encounter a &lt;code&gt;hardlink&lt;/code&gt; or &lt;code&gt;symlink&lt;/code&gt; we'll just try to make a copy of the original file, rather than throwing an error.</source>
          <target state="translated">&lt;code&gt;Unix&lt;/code&gt; 에는 &lt;code&gt;Win32&lt;/code&gt; 와 같은 다른 플랫폼에서 지원되지 않는 몇 가지 파일 유형이 있습니다 . &lt;code&gt;hardlink&lt;/code&gt; 또는 &lt;code&gt;symlink&lt;/code&gt; 링크 가 발생 하면 오류를 발생시키는 대신 원본 파일의 복사본을 만들려고합니다.</target>
        </trans-unit>
        <trans-unit id="6d74c9b056759689807d86e862d255692b030b97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;VEOF&lt;/code&gt;&lt;code&gt;VEOL&lt;/code&gt;&lt;code&gt;VERASE&lt;/code&gt;&lt;code&gt;VINTR&lt;/code&gt;&lt;code&gt;VKILL&lt;/code&gt;&lt;code&gt;VQUIT&lt;/code&gt;&lt;code&gt;VSUSP&lt;/code&gt;&lt;code&gt;VSTART&lt;/code&gt;&lt;code&gt;VSTOP&lt;/code&gt;&lt;code&gt;VMIN&lt;/code&gt;&lt;code&gt;VTIME&lt;/code&gt;&lt;code&gt;NCCS&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;VEOF&lt;/code&gt;&lt;code&gt;VEOL&lt;/code&gt;&lt;code&gt;VERASE&lt;/code&gt;&lt;code&gt;VINTR&lt;/code&gt;&lt;code&gt;VKILL&lt;/code&gt;&lt;code&gt;VQUIT&lt;/code&gt;&lt;code&gt;VSUSP&lt;/code&gt;&lt;code&gt;VSTART&lt;/code&gt;&lt;code&gt;VSTOP&lt;/code&gt;&lt;code&gt;VMIN&lt;/code&gt;&lt;code&gt;VTIME&lt;/code&gt;&lt;code&gt;NCCS&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e64ceff700bffb9b0e49ed00840d8567272b98d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;VERSION&lt;/code&gt; can be called as either a class (static) method or an object method.</source>
          <target state="translated">&lt;code&gt;VERSION&lt;/code&gt; 은 클래스 (정적) 메소드 또는 객체 메소드로 호출 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="53e5c5bf9414f45f9ee6cd495857a6d0af8135b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;VERSION&lt;/code&gt; will return the value of the variable &lt;code&gt;$VERSION&lt;/code&gt; in the package the object is blessed into. If &lt;code&gt;REQUIRE&lt;/code&gt; is given then it will do a comparison and die if the package version is not greater than or equal to &lt;code&gt;REQUIRE&lt;/code&gt; , or if either &lt;code&gt;$VERSION&lt;/code&gt; or &lt;code&gt;REQUIRE&lt;/code&gt; is not a &quot;lax&quot; version number (as defined by the &lt;a href=&quot;version&quot;&gt;version&lt;/a&gt; module).</source>
          <target state="translated">&lt;code&gt;VERSION&lt;/code&gt; 은 객체가 축복받은 패키지에서 변수 &lt;code&gt;$VERSION&lt;/code&gt; 의 값을 반환합니다 . 경우 &lt;code&gt;REQUIRE&lt;/code&gt; 주어진다 그것은 비교를 수행하며 패키지 버전보다 크지 않거나 동일한 경우에는 다이 &lt;code&gt;REQUIRE&lt;/code&gt; , 또는 어느 경우 &lt;code&gt;$VERSION&lt;/code&gt; 또는 &lt;code&gt;REQUIRE&lt;/code&gt; (의해 정의되지 않은 &quot;느슨한&quot;버전 번호 &lt;a href=&quot;version&quot;&gt;의 버전&lt;/a&gt; 모듈).</target>
        </trans-unit>
        <trans-unit id="325270b8b61d72ca064d946a7eaba60462295b3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;VERSION&lt;/code&gt; will return the value of the variable &lt;code&gt;$VERSION&lt;/code&gt; in the package the object is blessed into. If &lt;code&gt;REQUIRE&lt;/code&gt; is given then it will do a comparison and die if the package version is not greater than or equal to &lt;code&gt;REQUIRE&lt;/code&gt;, or if either &lt;code&gt;$VERSION&lt;/code&gt; or &lt;code&gt;REQUIRE&lt;/code&gt; is not a &quot;lax&quot; version number (as defined by the &lt;a href=&quot;version&quot;&gt;version&lt;/a&gt; module).</source>
          <target state="translated">&lt;code&gt;VERSION&lt;/code&gt; 은 개체가 축복 된 패키지의 &lt;code&gt;$VERSION&lt;/code&gt; 변수 값을 반환합니다 . 경우 &lt;code&gt;REQUIRE&lt;/code&gt; 주어진다 그것은 비교를 수행하며 패키지 버전보다 크지 않거나 동일한 경우에는 다이 &lt;code&gt;REQUIRE&lt;/code&gt; , 또는 어느 경우 &lt;code&gt;$VERSION&lt;/code&gt; 또는 &lt;code&gt;REQUIRE&lt;/code&gt; (의해 정의되지 않은 &quot;느슨한&quot;버전 번호 &lt;a href=&quot;version&quot;&gt;의 버전&lt;/a&gt; 모듈).</target>
        </trans-unit>
        <trans-unit id="d09d07e4d00536d5b65342f6fda4e06e40de674a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WEXITSTATUS(${^CHILD_ERROR_NATIVE})&lt;/code&gt; returns the normal exit status of the child process (only meaningful if &lt;code&gt;WIFEXITED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; is true)</source>
          <target state="translated">&lt;code&gt;WEXITSTATUS(${^CHILD_ERROR_NATIVE})&lt;/code&gt; 는 하위 프로세스의 정상 종료 상태를 리턴합니다 ( &lt;code&gt;WIFEXITED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; 가 true 인 경우에만 의미 있음 )</target>
        </trans-unit>
        <trans-unit id="ba14e82200cc3ea888304902d4a8a4dbe69a35f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WHICH&lt;/code&gt; can be any of &lt;code&gt;PRIO_PROCESS&lt;/code&gt;, &lt;code&gt;PRIO_PGRP&lt;/code&gt; or &lt;code&gt;PRIO_USER&lt;/code&gt; imported from &lt;a href=&quot;posix#RESOURCE-CONSTANTS&quot;&gt;&quot;RESOURCE CONSTANTS&quot; in POSIX&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;WHICH&lt;/code&gt; 중 하나 일 수 있습니다 &lt;code&gt;PRIO_PROCESS&lt;/code&gt; , &lt;code&gt;PRIO_PGRP&lt;/code&gt; 또는 &lt;code&gt;PRIO_USER&lt;/code&gt; 에서 수입 &lt;a href=&quot;posix#RESOURCE-CONSTANTS&quot;&gt;POSIX에서 &quot;자원 상수를&quot;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="50caa072d18e392639ac8cbf2652792fc96e056a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WIFEXITED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; returns true if the child process exited normally (&lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; or by falling off the end of &lt;code&gt;main()&lt;/code&gt; )</source>
          <target state="translated">&lt;code&gt;WIFEXITED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; 자식 프로세스가 정상적으로 종료 경우에 true를 돌려줍니다 ( &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; 또는 말 떨어져 떨어지는 &lt;code&gt;main()&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="3c429b7be20772ea3ed8789304f68e213333fbd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WIFEXITED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; returns true if the child process exited normally (&lt;code&gt;exit()&lt;/code&gt; or by falling off the end of &lt;code&gt;main()&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;WIFEXITED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; 자식 프로세스가 정상적으로 종료 경우에 true를 돌려줍니다 ( &lt;code&gt;exit()&lt;/code&gt; 또는 말 떨어져 떨어지는 &lt;code&gt;main()&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="4a10acdd8d4b5cbcaa19166a65359a79e72c10ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WIFEXITED&lt;/code&gt;&lt;code&gt;WEXITSTATUS&lt;/code&gt;&lt;code&gt;WIFSIGNALED&lt;/code&gt;&lt;code&gt;WTERMSIG&lt;/code&gt;&lt;code&gt;WIFSTOPPED&lt;/code&gt;&lt;code&gt;WSTOPSIG&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;WIFEXITED&lt;/code&gt;&lt;code&gt;WEXITSTATUS&lt;/code&gt;&lt;code&gt;WIFSIGNALED&lt;/code&gt;&lt;code&gt;WTERMSIG&lt;/code&gt;&lt;code&gt;WIFSTOPPED&lt;/code&gt;&lt;code&gt;WSTOPSIG&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="913c2440e3192214324c69c5042c74731bd768ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WIFSIGNALED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; returns true if the child process terminated because of a signal</source>
          <target state="translated">&lt;code&gt;WIFSIGNALED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; 신호로 인해 하위 프로세스가 종료되면 WIFSIGNALED ($ {^ CHILD_ERROR_NATIVE}) 가 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="d31cf55751c90a24957243f3a757494178f490f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WIFSTOPPED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; returns true if the child process is currently stopped (can happen only if you specified the WUNTRACED flag to &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid()&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;WIFSTOPPED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; 는 자식 프로세스가 현재 중지 된 경우 true를 반환합니다 (WUNTRACED 플래그를 &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid()&lt;/a&gt;&lt;/code&gt; 로 지정한 경우에만 발생할 수 있음 )</target>
        </trans-unit>
        <trans-unit id="2f5c7480a044543eb0b27617a59e1b6eadff4585" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WIFSTOPPED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; returns true if the child process is currently stopped (can happen only if you specified the WUNTRACED flag to &lt;code&gt;waitpid()&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;WIFSTOPPED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; 는 자식 프로세스가 현재 중지 된 경우 true를 반환합니다 (WUNTRACED 플래그를 &lt;code&gt;waitpid()&lt;/code&gt; 지정한 경우에만 발생할 수 있음 ).</target>
        </trans-unit>
        <trans-unit id="5e0ae9473f56b8cede4edc36cb20deb25c332b79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WNOHANG&lt;/code&gt;&lt;code&gt;WUNTRACED&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;WNOHANG&lt;/code&gt;&lt;code&gt;WUNTRACED&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5c862071bd5aa21d5d7f098f0f89e7235360ec4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WSAEINTR&lt;/code&gt;&lt;code&gt;WSAEBADF&lt;/code&gt;&lt;code&gt;WSAEACCES&lt;/code&gt;&lt;code&gt;WSAEFAULT&lt;/code&gt;&lt;code&gt;WSAEINVAL&lt;/code&gt;&lt;code&gt;WSAEMFILE&lt;/code&gt;&lt;code&gt;WSAEWOULDBLOCK&lt;/code&gt;&lt;code&gt;WSAEINPROGRESS&lt;/code&gt;&lt;code&gt;WSAEALREADY&lt;/code&gt;&lt;code&gt;WSAENOTSOCK&lt;/code&gt;&lt;code&gt;WSAEDESTADDRREQ&lt;/code&gt;&lt;code&gt;WSAEMSGSIZE&lt;/code&gt;&lt;code&gt;WSAEPROTOTYPE&lt;/code&gt;&lt;code&gt;WSAENOPROTOOPT&lt;/code&gt;&lt;code&gt;WSAEPROTONOSUPPORT&lt;/code&gt;&lt;code&gt;WSAESOCKTNOSUPPORT&lt;/code&gt;&lt;code&gt;WSAEOPNOTSUPP&lt;/code&gt;&lt;code&gt;WSAEPFNOSUPPORT&lt;/code&gt;&lt;code&gt;WSAEAFNOSUPPORT&lt;/code&gt;&lt;code&gt;WSAEADDRINUSE&lt;/code&gt;&lt;code&gt;WSAEADDRNOTAVAIL&lt;/code&gt;&lt;code&gt;WSAENETDOWN&lt;/code&gt;&lt;code&gt;WSAENETUNREACH&lt;/code&gt;&lt;code&gt;WSAENETRESET&lt;/code&gt;&lt;code&gt;WSAECONNABORTED&lt;/code&gt;&lt;code&gt;WSAECONNRESET&lt;/code&gt;&lt;code&gt;WSAENOBUFS&lt;/code&gt;&lt;code&gt;WSAEISCONN&lt;/code&gt;&lt;code&gt;WSAENOTCONN&lt;/code&gt;&lt;code&gt;WSAESHUTDOWN&lt;/code&gt;&lt;code&gt;WSAETOOMANYREFS&lt;/code&gt;&lt;code&gt;WSAETIMEDOUT&lt;/code&gt;&lt;code&gt;WSAECONNREFUSED&lt;/code&gt;&lt;code&gt;WSAELOOP&lt;/code&gt;&lt;code&gt;WSAENAMETOOLONG&lt;/code&gt;&lt;code&gt;WSAEHOSTDOWN&lt;/code&gt;&lt;code&gt;WSAEHOSTUNREACH&lt;/code&gt;&lt;code&gt;WSAENOTEMPTY&lt;/code&gt;&lt;code&gt;WSAEPROCLIM&lt;/code&gt;&lt;code&gt;WSAEUSERS&lt;/code&gt;&lt;code&gt;WSAEDQUOT&lt;/code&gt;&lt;code&gt;WSAESTALE&lt;/code&gt;&lt;code&gt;WSAEREMOTE&lt;/code&gt;&lt;code&gt;WSAEDISCON&lt;/code&gt;&lt;code&gt;WSAENOMORE&lt;/code&gt;&lt;code&gt;WSAECANCELLED&lt;/code&gt;&lt;code&gt;WSAEINVALIDPROCTABLE&lt;/code&gt;&lt;code&gt;WSAEINVALIDPROVIDER&lt;/code&gt;&lt;code&gt;WSAEPROVIDERFAILEDINIT&lt;/code&gt;&lt;code&gt;WSAEREFUSED&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;WSAEINTR&lt;/code&gt;&lt;code&gt;WSAEBADF&lt;/code&gt;&lt;code&gt;WSAEACCES&lt;/code&gt;&lt;code&gt;WSAEFAULT&lt;/code&gt;&lt;code&gt;WSAEINVAL&lt;/code&gt;&lt;code&gt;WSAEMFILE&lt;/code&gt;&lt;code&gt;WSAEWOULDBLOCK&lt;/code&gt;&lt;code&gt;WSAEINPROGRESS&lt;/code&gt;&lt;code&gt;WSAEALREADY&lt;/code&gt;&lt;code&gt;WSAENOTSOCK&lt;/code&gt;&lt;code&gt;WSAEDESTADDRREQ&lt;/code&gt;&lt;code&gt;WSAEMSGSIZE&lt;/code&gt;&lt;code&gt;WSAEPROTOTYPE&lt;/code&gt;&lt;code&gt;WSAENOPROTOOPT&lt;/code&gt;&lt;code&gt;WSAEPROTONOSUPPORT&lt;/code&gt;&lt;code&gt;WSAESOCKTNOSUPPORT&lt;/code&gt;&lt;code&gt;WSAEOPNOTSUPP&lt;/code&gt;&lt;code&gt;WSAEPFNOSUPPORT&lt;/code&gt;&lt;code&gt;WSAEAFNOSUPPORT&lt;/code&gt;&lt;code&gt;WSAEADDRINUSE&lt;/code&gt;&lt;code&gt;WSAEADDRNOTAVAIL&lt;/code&gt;&lt;code&gt;WSAENETDOWN&lt;/code&gt;&lt;code&gt;WSAENETUNREACH&lt;/code&gt;&lt;code&gt;WSAENETRESET&lt;/code&gt;&lt;code&gt;WSAECONNABORTED&lt;/code&gt;&lt;code&gt;WSAECONNRESET&lt;/code&gt;&lt;code&gt;WSAENOBUFS&lt;/code&gt;&lt;code&gt;WSAEISCONN&lt;/code&gt;&lt;code&gt;WSAENOTCONN&lt;/code&gt;&lt;code&gt;WSAESHUTDOWN&lt;/code&gt;&lt;code&gt;WSAETOOMANYREFS&lt;/code&gt;&lt;code&gt;WSAETIMEDOUT&lt;/code&gt;&lt;code&gt;WSAECONNREFUSED&lt;/code&gt;&lt;code&gt;WSAELOOP&lt;/code&gt;&lt;code&gt;WSAENAMETOOLONG&lt;/code&gt;&lt;code&gt;WSAEHOSTDOWN&lt;/code&gt;&lt;code&gt;WSAEHOSTUNREACH&lt;/code&gt;&lt;code&gt;WSAENOTEMPTY&lt;/code&gt;&lt;code&gt;WSAEPROCLIM&lt;/code&gt;&lt;code&gt;WSAEUSERS&lt;/code&gt;&lt;code&gt;WSAEDQUOT&lt;/code&gt;&lt;code&gt;WSAESTALE&lt;/code&gt;&lt;code&gt;WSAEREMOTE&lt;/code&gt;&lt;code&gt;WSAEDISCON&lt;/code&gt;&lt;code&gt;WSAENOMORE&lt;/code&gt;&lt;code&gt;WSAECANCELLED&lt;/code&gt;&lt;code&gt;WSAEINVALIDPROCTABLE&lt;/code&gt;&lt;code&gt;WSAEINVALIDPROVIDER&lt;/code&gt;&lt;code&gt;WSAEPROVIDERFAILEDINIT&lt;/code&gt;&lt;code&gt;WSAEREFUSED&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d6b1ff61466d78e7b46ba9478c03225a6e4901f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WSTOPSIG(${^CHILD_ERROR_NATIVE})&lt;/code&gt; returns the signal the child process was stopped for (only meaningful if &lt;code&gt;WIFSTOPPED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; is true)</source>
          <target state="translated">&lt;code&gt;WSTOPSIG(${^CHILD_ERROR_NATIVE})&lt;/code&gt; 는 하위 프로세스가 중지 된 신호를 리턴합니다 ( &lt;code&gt;WIFSTOPPED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; 가 참인 경우에만 의미 있음 )</target>
        </trans-unit>
        <trans-unit id="6fce0cd0fb21ad8f415dada694b22cfb2560526f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WTERMSIG(${^CHILD_ERROR_NATIVE})&lt;/code&gt; returns the signal the child process terminated for (only meaningful if &lt;code&gt;WIFSIGNALED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; is true)</source>
          <target state="translated">&lt;code&gt;WTERMSIG(${^CHILD_ERROR_NATIVE})&lt;/code&gt; 는 하위 프로세스가 종료 된 신호를 리턴합니다 ( &lt;code&gt;WIFSIGNALED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; 가 참인 경우에만 의미 있음 )</target>
        </trans-unit>
        <trans-unit id="9280239300b5e2da4b3afad680afacc165216bc6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WriteFile&lt;/code&gt; takes one optional argument. When called with one argument, it expects to be passed a filename. When called with no arguments, it defaults to the filename</source>
          <target state="translated">&lt;code&gt;WriteFile&lt;/code&gt; 은 하나의 선택적 인수를 사용합니다. 하나의 인수로 호출하면 파일 이름이 전달 될 것으로 예상됩니다. 인수없이 호출하면 기본적으로 파일 이름이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1f09964bf66b2f253d1d0b56951b3810e5d395ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;X&amp;lt;topic name&amp;gt;&lt;/code&gt; -- an index entry</source>
          <target state="translated">&lt;code&gt;X&amp;lt;topic name&amp;gt;&lt;/code&gt; -색인 항목</target>
        </trans-unit>
        <trans-unit id="4bc2f93eb05588029257a866afb2ec29cefadaab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;XXX&lt;/code&gt; To do: Since compatibility can depend on compile time options (such as bincompat, longlong, etc.) it should (perhaps) be set by Configure, but currently it isn't. Currently, we read a hard-wired value from</source>
          <target state="translated">&lt;code&gt;XXX&lt;/code&gt; 해야 할 일 : 호환성은 컴파일 시간 옵션 (예 : bincompat, longlong 등)에 따라 달라질 수 있으므로 Configure에서 설정해야하지만 현재는 그렇지 않습니다. 현재, 우리는 유선 가치를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="1d73e9513462d0441d882a14aedf29b4d48f493f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Y&lt;/code&gt; or &lt;code&gt;N&lt;/code&gt; designating if</source>
          <target state="translated">&lt;code&gt;Y&lt;/code&gt; 또는 &lt;code&gt;N&lt;/code&gt; 을 지정</target>
        </trans-unit>
        <trans-unit id="27c11c80d0abef9d58bbbf93ce2d9bb6be27b7d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Z&amp;lt;&amp;gt;&lt;/code&gt; -- a null (zero-effect) formatting code</source>
          <target state="translated">&lt;code&gt;Z&amp;lt;&amp;gt;&lt;/code&gt; -널 (제로 효과) 형식화 코드</target>
        </trans-unit>
        <trans-unit id="63907946795eb9d983c7251fc87f03561c9ef960" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Zip64&lt;/code&gt; will be automatically set, as needed, if working with the one-shot interface when the input is either a filename or a scalar reference.</source>
          <target state="translated">&lt;code&gt;Zip64&lt;/code&gt; 입력이 파일 이름이거나 스칼라 참조 일 때 원샷 인터페이스로 작업하는 경우 Zip64 는 필요에 따라 자동으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="9c080ff6a40a2d784f921c0451433798850e94e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[ ITEMS ]&lt;/code&gt; makes a new, anonymous array, and returns a reference to that array. &lt;code&gt;{ ITEMS }&lt;/code&gt; makes a new, anonymous hash, and returns a reference to that hash.</source>
          <target state="translated">&lt;code&gt;[ ITEMS ]&lt;/code&gt; 는 새로운 익명 배열을 만들고 해당 배열에 대한 참조를 반환합니다. &lt;code&gt;{ ITEMS }&lt;/code&gt; 은 새로운 익명 해시를 만들고 해당 해시에 대한 참조를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1e197e33c6ccb5f4067a4525a2143eb1d616cb64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[[:ascii:]]&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;[[:ascii:]]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f37bb18db43b263ed54e8b3969a3b7847ffee7aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[[:ascii:]]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[[:ascii:]]&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="2cfa2d0098181bbefe03441d8231e81eb9677e4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\A&lt;/code&gt; only matches at the beginning of the string. If the &lt;code&gt;/m&lt;/code&gt; modifier isn't used, then &lt;code&gt;/\A/&lt;/code&gt; is equivalent to &lt;code&gt;/^/&lt;/code&gt; . However, if the &lt;code&gt;/m&lt;/code&gt; modifier is used, then &lt;code&gt;/^/&lt;/code&gt; matches internal newlines, but the meaning of &lt;code&gt;/\A/&lt;/code&gt; isn't changed by the &lt;code&gt;/m&lt;/code&gt; modifier. &lt;code&gt;\A&lt;/code&gt; matches at the beginning of the string regardless whether the &lt;code&gt;/m&lt;/code&gt; modifier is used.</source>
          <target state="translated">&lt;code&gt;\A&lt;/code&gt; 는 문자열의 시작 부분에서만 일치합니다. 는 IF &lt;code&gt;/m&lt;/code&gt; 에서의 개질제를 사용하지 않고, 다음 &lt;code&gt;/\A/&lt;/code&gt; 동등 &lt;code&gt;/^/&lt;/code&gt; . 그러나 &lt;code&gt;/m&lt;/code&gt; 수정자를 사용하면 &lt;code&gt;/^/&lt;/code&gt; 는 내부 개행과 일치하지만 &lt;code&gt;/m&lt;/code&gt; 수정자는 &lt;code&gt;/\A/&lt;/code&gt; 의 의미를 변경하지 않습니다 . &lt;code&gt;\A&lt;/code&gt; 는 &lt;code&gt;/m&lt;/code&gt; 수정 자의 사용 여부에 관계없이 문자열의 시작 부분과 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="e50f906321e007a37b63b827ace3fa35f352a0f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\A&lt;/code&gt; only matches at the beginning of the string. If the &lt;code&gt;/m&lt;/code&gt; modifier isn't used, then &lt;code&gt;/\A/&lt;/code&gt; is equivalent to &lt;code&gt;/^/&lt;/code&gt;. However, if the &lt;code&gt;/m&lt;/code&gt; modifier is used, then &lt;code&gt;/^/&lt;/code&gt; matches internal newlines, but the meaning of &lt;code&gt;/\A/&lt;/code&gt; isn't changed by the &lt;code&gt;/m&lt;/code&gt; modifier. &lt;code&gt;\A&lt;/code&gt; matches at the beginning of the string regardless whether the &lt;code&gt;/m&lt;/code&gt; modifier is used.</source>
          <target state="translated">&lt;code&gt;\A&lt;/code&gt; 는 문자열의 시작 부분에서만 일치합니다. 는 IF &lt;code&gt;/m&lt;/code&gt; 에서의 개질제를 사용하지 않고, 다음 &lt;code&gt;/\A/&lt;/code&gt; 동등 &lt;code&gt;/^/&lt;/code&gt; . 그러나 &lt;code&gt;/m&lt;/code&gt; 수정자를 사용하면 &lt;code&gt;/^/&lt;/code&gt; 는 내부 줄 바꿈과 일치하지만 &lt;code&gt;/\A/&lt;/code&gt; 의 의미 는 &lt;code&gt;/m&lt;/code&gt; 수정 자에 의해 변경되지 않습니다 . &lt;code&gt;\A&lt;/code&gt; 는 &lt;code&gt;/m&lt;/code&gt; 수정자가 사용 되는지 여부에 관계없이 문자열의 시작 부분에서 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="6f53fba386e9c1d0f782db562212650e214f36ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\D&lt;/code&gt; is a negated &lt;code&gt;\d&lt;/code&gt;; it represents any other character than a digit, or &lt;code&gt;[^\d]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;\D&lt;/code&gt; 는 부정 된 &lt;code&gt;\d&lt;/code&gt; . 숫자가 아닌 다른 문자를 나타내거나 &lt;code&gt;[^\d]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fef23e4d1b4ae86eeb209dd5770450d03008a5b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\F&lt;/code&gt; can be used to casefold all characters following, up to the next &lt;code&gt;\E&lt;/code&gt; or the end of the pattern. It provides the functionality similar to the &lt;code&gt;&lt;a href=&quot;functions/fc&quot;&gt;fc&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;\F&lt;/code&gt; 는 다음 &lt;code&gt;\E&lt;/code&gt; 또는 패턴 끝까지 모든 문자를 대소 문자로 접는 데 사용할 수 있습니다 . &lt;code&gt;&lt;a href=&quot;functions/fc&quot;&gt;fc&lt;/a&gt;&lt;/code&gt; 기능 과 유사한 기능을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="365839803ed113e88d1e4c38934367dd708136e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\F&lt;/code&gt; can be used to casefold all characters following, up to the next &lt;code&gt;\E&lt;/code&gt; or the end of the pattern. It provides the functionality similar to the &lt;code&gt;fc&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;\F&lt;/code&gt; 는 다음 &lt;code&gt;\E&lt;/code&gt; 또는 패턴의 끝까지 모든 문자를 대소 문자 구분하는 데 사용할 수 있습니다 . &lt;code&gt;fc&lt;/code&gt; 기능 과 유사한 기능을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="29175559120891c17a696d6942f87d50d6868998" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\G&lt;/code&gt; is also invaluable in processing fixed-length records with regexps. Suppose we have a snippet of coding region DNA, encoded as base pair letters &lt;code&gt;ATCGTTGAAT...&lt;/code&gt; and we want to find all the stop codons &lt;code&gt;TGA&lt;/code&gt; . In a coding region, codons are 3-letter sequences, so we can think of the DNA snippet as a sequence of 3-letter records. The naive regexp</source>
          <target state="translated">&lt;code&gt;\G&lt;/code&gt; 는 정규 표현식으로 고정 길이 레코드를 처리하는데도 중요합니다. 기본 쌍 문자 &lt;code&gt;ATCGTTGAAT...&lt;/code&gt; 로 인코딩 된 코딩 영역 DNA의 스 니펫이 있고 모든 정지 코돈 &lt;code&gt;TGA&lt;/code&gt; 를 찾고 싶다고 가정하십시오 . 코딩 영역에서 코돈은 3 문자 시퀀스이므로 DNA 스 니펫은 3 문자 레코드 시퀀스로 생각할 수 있습니다. 순진한 정규 표현식</target>
        </trans-unit>
        <trans-unit id="1dd50305d5ec65e04a41dcb9f7d034a715808afc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\G&lt;/code&gt; is also invaluable in processing fixed-length records with regexps. Suppose we have a snippet of coding region DNA, encoded as base pair letters &lt;code&gt;ATCGTTGAAT...&lt;/code&gt; and we want to find all the stop codons &lt;code&gt;TGA&lt;/code&gt;. In a coding region, codons are 3-letter sequences, so we can think of the DNA snippet as a sequence of 3-letter records. The naive regexp</source>
          <target state="translated">&lt;code&gt;\G&lt;/code&gt; 는 정규 표현식을 사용하여 고정 길이 레코드를 처리 할 때도 매우 유용합니다. 염기쌍 문자 &lt;code&gt;ATCGTTGAAT...&lt;/code&gt; 로 인코딩 된 코딩 영역 DNA 조각이 있고 모든 중지 코돈 &lt;code&gt;TGA&lt;/code&gt; 를 찾고 싶다고 가정 해 보겠습니다 . 코딩 영역에서 코돈은 3 글자 시퀀스이므로 DNA 조각을 3 글자 레코드 시퀀스로 생각할 수 있습니다. 순진한 정규식</target>
        </trans-unit>
        <trans-unit id="bc01fdb07dcb48f3990f7e9986cc181c1d1aa3c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\G&lt;/code&gt; is usually used only in combination with the &lt;code&gt;/g&lt;/code&gt; modifier. If the &lt;code&gt;/g&lt;/code&gt; modifier is used and the match is done in scalar context, Perl remembers where in the source string the last match ended, and the next time, it will start the match from where it ended the previous time.</source>
          <target state="translated">&lt;code&gt;\G&lt;/code&gt; 는 일반적으로 &lt;code&gt;/g&lt;/code&gt; 수정 자 와 함께 사용됩니다 . 는 IF &lt;code&gt;/g&lt;/code&gt; 수정자가 사용하고 경기가 스칼라 문맥에서 이루어집니다 마지막 경기가 끝난 소스 문자열, 다음 시간에, 그것은 이전의 시간이 끝난 곳에서 경기를 시작하는 곳, 펄 기억합니다.</target>
        </trans-unit>
        <trans-unit id="fab760e95f43824629065b7030ad07437049f251" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\G&lt;/code&gt; matches the point where the previous match on that string ended, or the beginning of that string if there was no previous match.</source>
          <target state="translated">&lt;code&gt;\G&lt;/code&gt; 는 해당 문자열의 이전 일치가 종료 된 지점 또는 이전 일치가없는 경우 해당 문자열의 시작과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="caee3f50983ee96aea6298365c6e4a735aeffd91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\L&lt;/code&gt; , &lt;code&gt;\U&lt;/code&gt; , &lt;code&gt;\F&lt;/code&gt; , and &lt;code&gt;\Q&lt;/code&gt; can stack, in which case you need one &lt;code&gt;\E&lt;/code&gt; for each. For example:</source>
          <target state="translated">&lt;code&gt;\L&lt;/code&gt; , &lt;code&gt;\U&lt;/code&gt; , &lt;code&gt;\F&lt;/code&gt; 및 &lt;code&gt;\Q&lt;/code&gt; 는 스택 할 수 있으며,이 경우 각각에 대해 하나의 &lt;code&gt;\E&lt;/code&gt; 필요합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5909711f4ae861799ae1fae7c311412305b8ff53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\L&lt;/code&gt;, &lt;code&gt;\U&lt;/code&gt;, &lt;code&gt;\F&lt;/code&gt;, and &lt;code&gt;\Q&lt;/code&gt; can stack, in which case you need one &lt;code&gt;\E&lt;/code&gt; for each. For example:</source>
          <target state="translated">&lt;code&gt;\L&lt;/code&gt; , &lt;code&gt;\U&lt;/code&gt; , &lt;code&gt;\F&lt;/code&gt; 및 &lt;code&gt;\Q&lt;/code&gt; 는 누적 될 수 있으며,이 경우 각각에 대해 하나의 &lt;code&gt;\E&lt;/code&gt; 필요합니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="88b715a8c878ff64b76422f5de0db4d867e6df23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\N&lt;/code&gt; , available starting in v5.12, like the dot, matches any character that is not a newline. The difference is that &lt;code&gt;\N&lt;/code&gt; is not influenced by the</source>
          <target state="translated">&lt;code&gt;\N&lt;/code&gt; 점과 같이 v5.12부터 사용 가능한 \ N 은 줄 바꿈이 아닌 모든 문자와 일치합니다. 차이점은 &lt;code&gt;\N&lt;/code&gt; 에 의해 영향을받지 않습니다</target>
        </trans-unit>
        <trans-unit id="80779fa1da204f29defd5bf097dbba87c9107e16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\N&lt;/code&gt; within a bracketed character class must be of the forms &lt;code&gt;\N{&lt;i&gt;name&lt;/i&gt;}&lt;/code&gt; or &lt;code&gt;\N{U+&lt;i&gt;hex char&lt;/i&gt;}&lt;/code&gt;, and NOT be the form that matches non-newlines, for the same reason that a dot &lt;code&gt;.&lt;/code&gt; inside a bracketed character class loses its special meaning: it matches nearly anything, which generally isn't what you want to happen.</source>
          <target state="translated">&lt;code&gt;\N&lt;/code&gt; 대괄호로 묶인 문자 클래스 내의 \ N 은 &lt;code&gt;\N{&lt;i&gt;name&lt;/i&gt;}&lt;/code&gt; 또는 &lt;code&gt;\N{U+&lt;i&gt;hex char&lt;/i&gt;}&lt;/code&gt; 형식이어야하며 도트와 같은 이유로 개행 문자와 일치하지 않는 형식이어야합니다 &lt;code&gt;.&lt;/code&gt; 대괄호로 묶인 문자 클래스는 특별한 의미를 잃습니다. 거의 모든 것과 일치합니다. 일반적으로 원하는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="e6d81a41dd89c6b0d1f649e117d863c99956c556" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\N&lt;/code&gt;, available starting in v5.12, like the dot, matches any character that is not a newline. The difference is that &lt;code&gt;\N&lt;/code&gt; is not influenced by the</source>
          <target state="translated">&lt;code&gt;\N&lt;/code&gt; 점과 같이 v5.12부터 사용할 수있는 \ N 은 개행 문자가 아닌 모든 문자와 일치합니다. 차이점은 &lt;code&gt;\N&lt;/code&gt; 에 의해 영향을받지 않는다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="69b5f532beea0b3b2b86d420fa419b0ed4b659f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\N&lt;/code&gt;, like the period, matches any character but &lt;code&gt;&quot;\n&quot;&lt;/code&gt;, but it does so regardless of whether the modifier &lt;code&gt;/s&lt;/code&gt; is in effect.</source>
          <target state="translated">&lt;code&gt;\N&lt;/code&gt; 마침표와 마찬가지로 \ N 은 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; 이외의 모든 문자와 일치하지만 수정 자 &lt;code&gt;/s&lt;/code&gt; 가 적용 되는지 여부에 관계없이 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="2706754019f77a1fbbc94bb64673d2224cda545c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\N{U+&lt;i&gt;hexadecimal number&lt;/i&gt;}&lt;/code&gt; means the Unicode character whose Unicode code point is</source>
          <target state="translated">&lt;code&gt;\N{U+&lt;i&gt;hexadecimal number&lt;/i&gt;}&lt;/code&gt; 는 유니 코드 코드 포인트가 유니 코드 문자임을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="3d883253a04efed05a5ba1744b87b2c80c0e4bf3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\Q&lt;/code&gt; , &lt;code&gt;\L&lt;/code&gt; , &lt;code&gt;\l&lt;/code&gt; , &lt;code&gt;\U&lt;/code&gt; , &lt;code&gt;\u&lt;/code&gt; and &lt;code&gt;\E&lt;/code&gt; are actually part of double-quotish syntax, and not part of regexp syntax proper. They will work if they appear in a regular expression embedded directly in a program, but not when contained in a string that is interpolated in a pattern.</source>
          <target state="translated">&lt;code&gt;\Q&lt;/code&gt; , &lt;code&gt;\L&lt;/code&gt; , &lt;code&gt;\l&lt;/code&gt; , &lt;code&gt;\U&lt;/code&gt; , &lt;code&gt;\u&lt;/code&gt; 및 &lt;code&gt;\E&lt;/code&gt; 는 실제로 이중 인용 구문의 일부이며 정규 표현식 구문의 일부가 아닙니다. 프로그램에 직접 포함 된 정규식에 표시되지만 패턴에 보간 된 문자열에 포함되어 있으면 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b7ed1242ac7474e94b7458c0ba21e510aab5efa0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\Q&lt;/code&gt; , &lt;code&gt;\U&lt;/code&gt; , &lt;code&gt;\u&lt;/code&gt; , &lt;code&gt;\L&lt;/code&gt; , &lt;code&gt;\l&lt;/code&gt; , &lt;code&gt;\F&lt;/code&gt; (possibly paired with &lt;code&gt;\E&lt;/code&gt; ) are converted to corresponding Perl constructs. Thus, &lt;code&gt;&quot;$foo\Qbaz$bar&quot;&lt;/code&gt; is converted to &lt;code&gt;$foo . (&lt;a href=&quot;functions/quotemeta&quot;&gt;quotemeta&lt;/a&gt;(&quot;baz&quot; . $bar))&lt;/code&gt; internally. The other escape sequences such as &lt;code&gt;\200&lt;/code&gt; and &lt;code&gt;\t&lt;/code&gt; and backslashed characters such as &lt;code&gt;\\&lt;/code&gt; and &lt;code&gt;\-&lt;/code&gt; are replaced with appropriate expansions.</source>
          <target state="translated">&lt;code&gt;\Q&lt;/code&gt; , &lt;code&gt;\U&lt;/code&gt; , &lt;code&gt;\u&lt;/code&gt; , &lt;code&gt;\L&lt;/code&gt; , &lt;code&gt;\l&lt;/code&gt; , &lt;code&gt;\F&lt;/code&gt; ( &lt;code&gt;\E&lt;/code&gt; 와 짝을 이룰 수 있음 )는 해당 Perl 구문으로 변환됩니다. 따라서 &lt;code&gt;&quot;$foo\Qbaz$bar&quot;&lt;/code&gt; 는 &lt;code&gt;$foo . (&lt;a href=&quot;functions/quotemeta&quot;&gt;quotemeta&lt;/a&gt;(&quot;baz&quot; . $bar))&lt;/code&gt; 로 변환됩니다 . 내부적으로 ( quotemeta ( &quot;baz&quot;. $ bar)) . &lt;code&gt;\200&lt;/code&gt; 및 &lt;code&gt;\t&lt;/code&gt; 와 같은 다른 이스케이프 시퀀스와 &lt;code&gt;\\&lt;/code&gt; 및 &lt;code&gt;\-&lt;/code&gt; 와 같은 백 슬래시 문자 는 적절한 확장으로 바뀝니다.</target>
        </trans-unit>
        <trans-unit id="ad0b64315a3fe9c58415fa16564b8e316472bbe7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\Q&lt;/code&gt; is used to quote (disable) pattern metacharacters, up to the next &lt;code&gt;\E&lt;/code&gt; or the end of the pattern. &lt;code&gt;\Q&lt;/code&gt; adds a backslash to any character that could have special meaning to Perl. In the ASCII range, it quotes every character that isn't a letter, digit, or underscore. See &lt;a href=&quot;functions/quotemeta&quot;&gt;quotemeta&lt;/a&gt; for details on what gets quoted for non-ASCII code points. Using this ensures that any character between &lt;code&gt;\Q&lt;/code&gt; and &lt;code&gt;\E&lt;/code&gt; will be matched literally, not interpreted as a metacharacter by the regex engine.</source>
          <target state="translated">&lt;code&gt;\Q&lt;/code&gt; 는 다음 &lt;code&gt;\E&lt;/code&gt; 또는 패턴 끝까지 패턴 메타 문자를 인용 (비활성화)하는 데 사용됩니다 . &lt;code&gt;\Q&lt;/code&gt; 는 Perl에 특별한 의미가있는 문자에 백 슬래시를 추가합니다. ASCII 범위에서는 문자, 숫자 또는 밑줄이 아닌 모든 문자를 인용합니다. 비 ASCII 코드 포인트에 대해 인용되는 내용에 대한 자세한 내용 은 &lt;a href=&quot;functions/quotemeta&quot;&gt;quotemeta&lt;/a&gt; 를 참조하십시오 . 이를 사용하면 &lt;code&gt;\Q&lt;/code&gt; 와 &lt;code&gt;\E&lt;/code&gt; 사이의 문자가 문자 그대로 일치되고 정규식 엔진에서 메타 문자로 해석되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b2d3b5ecfda1f481831379606005c6fdc0235a92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\Q&lt;/code&gt; is used to quote (disable) pattern metacharacters, up to the next &lt;code&gt;\E&lt;/code&gt; or the end of the pattern. &lt;code&gt;\Q&lt;/code&gt; adds a backslash to any character that could have special meaning to Perl. In the ASCII range, it quotes every character that isn't a letter, digit, or underscore. See &lt;a href=&quot;perlfunc#quotemeta&quot;&gt;&quot;quotemeta&quot; in perlfunc&lt;/a&gt; for details on what gets quoted for non-ASCII code points. Using this ensures that any character between &lt;code&gt;\Q&lt;/code&gt; and &lt;code&gt;\E&lt;/code&gt; will be matched literally, not interpreted as a metacharacter by the regex engine.</source>
          <target state="translated">&lt;code&gt;\Q&lt;/code&gt; 는 다음 &lt;code&gt;\E&lt;/code&gt; 또는 패턴의 끝까지 패턴 메타 문자를 인용 (비활성화)하는 데 사용됩니다 . &lt;code&gt;\Q&lt;/code&gt; 는 Perl에 특별한 의미를 가질 수있는 모든 문자에 백 슬래시를 추가합니다. ASCII 범위에서는 문자, 숫자 또는 밑줄이 아닌 모든 문자를 인용합니다. 비 ASCII 코드 포인트에 대해 인용되는 사항에 대한 자세한 내용 &lt;a href=&quot;perlfunc#quotemeta&quot;&gt;은 perlfunc의 &quot;quotemeta&quot;를&lt;/a&gt; 참조하십시오 . 이를 사용하면 &lt;code&gt;\Q&lt;/code&gt; 와 &lt;code&gt;\E&lt;/code&gt; 사이의 모든 문자 가 정규식 엔진에 의해 메타 문자로 해석되지 않고 문자 그대로 일치됩니다.</target>
        </trans-unit>
        <trans-unit id="c9799ed12cbfcbc248ce704b4b60109bd99ced67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\Q&lt;/code&gt;, &lt;code&gt;\L&lt;/code&gt;, &lt;code&gt;\l&lt;/code&gt;, &lt;code&gt;\U&lt;/code&gt;, &lt;code&gt;\u&lt;/code&gt; and &lt;code&gt;\E&lt;/code&gt; are actually part of double-quotish syntax, and not part of regexp syntax proper. They will work if they appear in a regular expression embedded directly in a program, but not when contained in a string that is interpolated in a pattern.</source>
          <target state="translated">&lt;code&gt;\Q&lt;/code&gt; , &lt;code&gt;\L&lt;/code&gt; , &lt;code&gt;\l&lt;/code&gt; , &lt;code&gt;\U&lt;/code&gt; , &lt;code&gt;\u&lt;/code&gt; 및 &lt;code&gt;\E&lt;/code&gt; 는 실제로는 큰 따옴표 구문의 일부이며 적절한 정규 표현식 구문의 일부가 아닙니다. 프로그램에 직접 포함 된 정규식에 표시되는 경우 작동하지만 패턴에 보간 된 문자열에 포함 된 경우에는 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="31b2da020c4ab183ef1012c1e82d0c6206ed9968" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\Q&lt;/code&gt;, &lt;code&gt;\U&lt;/code&gt;, &lt;code&gt;\u&lt;/code&gt;, &lt;code&gt;\L&lt;/code&gt;, &lt;code&gt;\l&lt;/code&gt;, &lt;code&gt;\F&lt;/code&gt; (possibly paired with &lt;code&gt;\E&lt;/code&gt;) are converted to corresponding Perl constructs. Thus, &lt;code&gt;&quot;$foo\Qbaz$bar&quot;&lt;/code&gt; is converted to &lt;code&gt;$foo . (quotemeta(&quot;baz&quot; . $bar))&lt;/code&gt; internally. The other escape sequences such as &lt;code&gt;\200&lt;/code&gt; and &lt;code&gt;\t&lt;/code&gt; and backslashed characters such as &lt;code&gt;\\&lt;/code&gt; and &lt;code&gt;\-&lt;/code&gt; are replaced with appropriate expansions.</source>
          <target state="translated">&lt;code&gt;\Q&lt;/code&gt; , &lt;code&gt;\U&lt;/code&gt; , &lt;code&gt;\u&lt;/code&gt; , &lt;code&gt;\L&lt;/code&gt; , &lt;code&gt;\l&lt;/code&gt; , &lt;code&gt;\F&lt;/code&gt; (아마도 &lt;code&gt;\E&lt;/code&gt; 와 쌍을 이룹니다 )는 해당 Perl 구문으로 변환됩니다. 따라서 &lt;code&gt;&quot;$foo\Qbaz$bar&quot;&lt;/code&gt; 는 &lt;code&gt;$foo . (quotemeta(&quot;baz&quot; . $bar))&lt;/code&gt; 로 변환됩니다 . (quotemeta ( &quot;baz&quot;. $ bar)) 내부적으로. &lt;code&gt;\200&lt;/code&gt; 및 &lt;code&gt;\t&lt;/code&gt; 와 같은 다른 이스케이프 시퀀스와 &lt;code&gt;\\&lt;/code&gt; 및 &lt;code&gt;\-&lt;/code&gt; 와 같은 백 슬래시 문자 는 적절한 확장으로 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="96fdb89c706826e363f4d1a15c85386d62762386" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\R&lt;/code&gt; matches a</source>
          <target state="translated">&lt;code&gt;\R&lt;/code&gt; 은</target>
        </trans-unit>
        <trans-unit id="8ffa61af84fa5204640b2d3a9297ad766cd2302f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\R&lt;/code&gt; matches anything that can be considered a newline under Unicode rules. It can match a multi-character sequence. It cannot be used inside a bracketed character class; use &lt;code&gt;\v&lt;/code&gt; instead (vertical whitespace). It uses the platform's native character set, and does not consider any locale that may otherwise be in use. Details are discussed in &lt;a href=&quot;perlrebackslash&quot;&gt;perlrebackslash&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;\R&lt;/code&gt; 은 유니 코드 규칙에서 줄 바꿈으로 간주 될 수있는 모든 항목과 일치합니다. 다중 문자 시퀀스와 일치 할 수 있습니다. 대괄호로 묶은 문자 클래스 내에서는 사용할 수 없습니다. 사용 &lt;code&gt;\v&lt;/code&gt; 대신 (수직 공백). 플랫폼의 고유 문자 세트를 사용하며, 사용중인 로케일을 고려하지 않습니다. 자세한 내용은 &lt;a href=&quot;perlrebackslash&quot;&gt;perlrebackslash&lt;/a&gt; 에 설명되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a06cae4c5b667f92e564253136f924fbd5c999da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\S&lt;/code&gt; is a negated &lt;code&gt;\s&lt;/code&gt;; it represents any non-whitespace character &lt;code&gt;[^\s]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;\S&lt;/code&gt; 는 부정 된 &lt;code&gt;\s&lt;/code&gt; . 공백이 아닌 문자를 나타냅니다 &lt;code&gt;[^\s]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9219cc84269298f3472b27e9a771ce07439ec14c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\W&lt;/code&gt; is a negated &lt;code&gt;\w&lt;/code&gt;; it represents any non-word character &lt;code&gt;[^\w]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;\W&lt;/code&gt; 는 부정입니다. &lt;code&gt;\w&lt;/code&gt; ; 단어가 아닌 문자를 나타냅니다. &lt;code&gt;[^\w]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9c079457c2c94c9296bb94d74fe70faff7c8e990" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\X&lt;/code&gt; is an abbreviation for a character class that comprises a Unicode</source>
          <target state="translated">&lt;code&gt;\X&lt;/code&gt; 는 유니 코드를 구성하는 문자 클래스의 약어입니다.</target>
        </trans-unit>
        <trans-unit id="55e23bb607e060dee7b3f1229c353a21e48fea15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\X&lt;/code&gt; matches quite well what normal (non-Unicode-programmer) usage would consider a single character. As an example, consider a G with some sort of diacritic mark, such as an arrow. There is no such single character in Unicode, but one can be composed by using a G followed by a Unicode &quot;COMBINING UPWARDS ARROW BELOW&quot;, and would be displayed by Unicode-aware software as if it were a single character.</source>
          <target state="translated">&lt;code&gt;\X&lt;/code&gt; 는 (비 유니 코드 프로그래머가 아닌) 일반적인 사용법이 단일 문자로 간주하는 것과 매우 일치합니다. 예를 들어, 화살표와 같은 일종의 분음 부호가있는 G를 고려하십시오. 유니 코드에는 이러한 단일 문자가 없지만 G를 사용하여 유니 코드 &quot;COMBINING UPWARDS ARROW BELOW&quot;를 사용하여 구성 할 수 있으며 마치 단일 문자 인 것처럼 유니 코드 인식 소프트웨어에 의해 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="34d7b3ea79034dbcabd4d97597212e6ab2de3c37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\b&lt;/code&gt; . This matches a boundary between a word character and a non-word character &lt;code&gt;\w\W&lt;/code&gt; or &lt;code&gt;\W\w&lt;/code&gt; :</source>
          <target state="translated">&lt;code&gt;\b&lt;/code&gt; . 이것은 단어 문자와 단어가 아닌 문자 &lt;code&gt;\w\W&lt;/code&gt; 또는 &lt;code&gt;\W\w&lt;/code&gt; 사이의 경계와 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="d75241b44033641bce1ae791eaa2652fadc31474" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\b&lt;/code&gt; and &lt;code&gt;\B&lt;/code&gt; assume there's a non-word character before the beginning and after the end of the source string; so &lt;code&gt;\b&lt;/code&gt; will match at the beginning (or end) of the source string if the source string begins (or ends) with a word character. Otherwise, &lt;code&gt;\B&lt;/code&gt; will match.</source>
          <target state="translated">&lt;code&gt;\b&lt;/code&gt; 와 &lt;code&gt;\B&lt;/code&gt; 는 소스 문자열의 시작 전후에 단어가 아닌 문자가 있다고 가정합니다. 따라서 &lt;code&gt;\b&lt;/code&gt; 는 소스 문자열이 단어 문자로 시작하거나 끝나는 경우 소스 문자열의 시작 (또는 끝)에서 일치합니다. 그렇지 않으면 &lt;code&gt;\B&lt;/code&gt; 가 일치합니다.</target>
        </trans-unit>
        <trans-unit id="6dc4a462570407b89d8c1b47db7b8c34eb82f528" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\b&lt;/code&gt; is the backspace character only inside a character class. Outside a character class, &lt;code&gt;\b&lt;/code&gt; alone is a word-character/non-word-character boundary, and &lt;code&gt;\b{}&lt;/code&gt; is some other type of boundary.</source>
          <target state="translated">&lt;code&gt;\b&lt;/code&gt; 는 문자 클래스 내부의 백 스페이스 문자입니다. 문자 클래스 외부에서 &lt;code&gt;\b&lt;/code&gt; 만은 단어 문자 / 단어가 아닌 문자 경계이며 &lt;code&gt;\b{}&lt;/code&gt; 는 다른 유형의 경계입니다.</target>
        </trans-unit>
        <trans-unit id="7c4c255a44ab388eea9df94821b04725a1eb1239" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\b&lt;/code&gt; when not immediately followed by a &lt;code&gt;&quot;{&quot;&lt;/code&gt; matches at any place between a word (something matched by &lt;code&gt;\w&lt;/code&gt; ) and a non-word character (&lt;code&gt;\W&lt;/code&gt; ); &lt;code&gt;\B&lt;/code&gt; when not immediately followed by a &lt;code&gt;&quot;{&quot;&lt;/code&gt; matches at any place between characters where &lt;code&gt;\b&lt;/code&gt; doesn't match. To get better word matching of natural language text, see \b{wb} below.</source>
          <target state="translated">&lt;code&gt;\b&lt;/code&gt; 바로 뒤에 있지 않으면 &lt;code&gt;&quot;{&quot;&lt;/code&gt; 는 단어 ( &lt;code&gt;\w&lt;/code&gt; 와 일치하는 단어 )와 단어 이외의 문자 ( &lt;code&gt;\W&lt;/code&gt; ) 사이의 모든 위치에서 일치합니다 . &lt;code&gt;\B&lt;/code&gt; 바로 뒤에 있지 않으면 &lt;code&gt;\b&lt;/code&gt; 가 일치하지 않는 문자 사이에 &lt;code&gt;&quot;{&quot;&lt;/code&gt; 가 붙 습니다. 자연어 텍스트의 단어 일치를 향상 시키려면 아래의 \ b {wb}를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="02a3a101dc7c6ce41ce7dac0f8acb2a72c03768d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\b&lt;/code&gt; when not immediately followed by a &lt;code&gt;&quot;{&quot;&lt;/code&gt; matches at any place between a word (something matched by &lt;code&gt;\w&lt;/code&gt;) and a non-word character (&lt;code&gt;\W&lt;/code&gt;); &lt;code&gt;\B&lt;/code&gt; when not immediately followed by a &lt;code&gt;&quot;{&quot;&lt;/code&gt; matches at any place between characters where &lt;code&gt;\b&lt;/code&gt; doesn't match. To get better word matching of natural language text, see &lt;a href=&quot;#%5Cb%7Bwb%7D&quot;&gt;&quot;\b{wb}&quot;&lt;/a&gt; below.</source>
          <target state="translated">&lt;code&gt;\b&lt;/code&gt; 바로 뒤에 &lt;code&gt;&quot;{&quot;&lt;/code&gt; 가 나오지 않으면 단어 ( &lt;code&gt;\w&lt;/code&gt; 와 일치하는 것 )와 비 단어 문자 ( &lt;code&gt;\W&lt;/code&gt; ) 사이의 모든 위치에서 일치합니다 . &lt;code&gt;\B&lt;/code&gt; 바로 다음에하지 &lt;code&gt;&quot;{&quot;&lt;/code&gt; 문자 사이에 어떤 장소에 일치 &lt;code&gt;\b&lt;/code&gt; 일치하지 않습니다. 자연어 텍스트의 더 나은 단어 일치를 얻으려면 아래 &lt;a href=&quot;#%5Cb%7Bwb%7D&quot;&gt;&quot;\ b {wb}&quot;를&lt;/a&gt; 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c9cb1f2f5a9aaa3621bb6a3914daee2f66d97c91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\b&lt;/code&gt;. This matches a boundary between a word character and a non-word character &lt;code&gt;\w\W&lt;/code&gt; or &lt;code&gt;\W\w&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;\b&lt;/code&gt; . 이것은 단어 문자와 단어가 아닌 문자 &lt;code&gt;\w\W&lt;/code&gt; 또는 &lt;code&gt;\W\w&lt;/code&gt; 사이의 경계와 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="5781002df3a961ccd9eb514485a027a250771de9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\b{...}&lt;/code&gt; , available starting in v5.22, matches a boundary (between two characters, or before the first character of the string, or after the final character of the string) based on the Unicode rules for the boundary type specified inside the braces. The currently known boundary types are given a few paragraphs below. &lt;code&gt;\B{...}&lt;/code&gt; matches at any place between characters where &lt;code&gt;\b{...}&lt;/code&gt; of the same type doesn't match.</source>
          <target state="translated">&lt;code&gt;\b{...}&lt;/code&gt; v5.22부터 사용 가능한 \ b {...} 는 경계 유형의 유니 코드 규칙에 따라 경계 (두 문자 사이 또는 문자열의 첫 문자 앞 또는 문자열의 마지막 문자 뒤)와 일치합니다. 중괄호 안에 지정됩니다. 현재 알려진 경계 유형은 다음과 같습니다. &lt;code&gt;\B{...}&lt;/code&gt; 는 같은 유형의 &lt;code&gt;\b{...}&lt;/code&gt; 가 일치하지 않는 문자 사이의 모든 위치에서 일치합니다.</target>
        </trans-unit>
        <trans-unit id="5254c153c7a9a13ecdcba15f421c507a50c055a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\b{...}&lt;/code&gt;, available starting in v5.22, matches a boundary (between two characters, or before the first character of the string, or after the final character of the string) based on the Unicode rules for the boundary type specified inside the braces. The boundary types are given a few paragraphs below. &lt;code&gt;\B{...}&lt;/code&gt; matches at any place between characters where &lt;code&gt;\b{...}&lt;/code&gt; of the same type doesn't match.</source>
          <target state="translated">&lt;code&gt;\b{...}&lt;/code&gt; v5.22부터 사용할 수있는 \ b {...} 는 경계 유형에 대한 유니 코드 규칙을 기반으로 경계 (두 문자 사이, 문자열의 첫 번째 문자 앞 또는 문자열의 마지막 문자 뒤)와 일치합니다. 중괄호 안에 지정됩니다. 경계 유형은 아래 몇 단락에 제공됩니다. &lt;code&gt;\B{...}&lt;/code&gt; 는 같은 유형의 &lt;code&gt;\b{...}&lt;/code&gt; 가 일치하지 않는 문자 사이의 모든 위치에서 일치합니다.</target>
        </trans-unit>
        <trans-unit id="78d397b8738e99fa32effd6fc49a759f69d58d18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\b{gcb}&lt;/code&gt; or &lt;code&gt;\b{g}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;\b{gcb}&lt;/code&gt; 또는 &lt;code&gt;\b{g}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3e43fb282e8b27b2619badf10578d9a503c1e675" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\c&lt;/code&gt; is used to denote a control character; the character following &lt;code&gt;\c&lt;/code&gt; determines the value of the construct. For example the value of &lt;code&gt;\cA&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(1)&lt;/a&gt;&lt;/code&gt;, and the value of &lt;code&gt;\cb&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(2)&lt;/a&gt;&lt;/code&gt;, etc. The gory details are in &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;Regexp Quote-Like Operators in perlop&lt;/a&gt;. A complete list of what &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(1)&lt;/a&gt;&lt;/code&gt;, etc. means for ASCII and EBCDIC platforms is in &lt;a href=&quot;perlebcdic#OPERATOR-DIFFERENCES&quot;&gt;OPERATOR DIFFERENCES in perlebcdic&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;\c&lt;/code&gt; 는 제어 문자를 나타내는 데 사용됩니다. &lt;code&gt;\c&lt;/code&gt; 다음의 문자 는 구문의 값을 결정합니다. 예를 들어 &lt;code&gt;\cA&lt;/code&gt; 값 은 &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(1)&lt;/a&gt;&lt;/code&gt; 이고 &lt;code&gt;\cb&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(2)&lt;/a&gt;&lt;/code&gt; 등입니다. 처참한 세부 사항은 &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;perlop의 Regexp Quote-Like 연산자에&lt;/a&gt; 있습니다. ASCII 및 EBCDIC 플랫폼에 대한 &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(1)&lt;/a&gt;&lt;/code&gt; 등의 의미에 대한 전체 목록은 &lt;a href=&quot;perlebcdic#OPERATOR-DIFFERENCES&quot;&gt;perlebcdic의 OPERATOR DIFFERENCES에 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7f8369187d869841fa9df7d04e998ab51ca1871a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\c&lt;/code&gt; is used to denote a control character; the character following &lt;code&gt;\c&lt;/code&gt; determines the value of the construct. For example the value of &lt;code&gt;\cA&lt;/code&gt; is &lt;code&gt;chr(1)&lt;/code&gt;, and the value of &lt;code&gt;\cb&lt;/code&gt; is &lt;code&gt;chr(2)&lt;/code&gt;, etc. The gory details are in &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;&quot;Regexp Quote-Like Operators&quot; in perlop&lt;/a&gt;. A complete list of what &lt;code&gt;chr(1)&lt;/code&gt;, etc. means for ASCII and EBCDIC platforms is in &lt;a href=&quot;perlebcdic#OPERATOR-DIFFERENCES&quot;&gt;&quot;OPERATOR DIFFERENCES&quot; in perlebcdic&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;\c&lt;/code&gt; 는 제어 문자를 표시하는 데 사용됩니다. &lt;code&gt;\c&lt;/code&gt; 다음에 오는 문자 는 구성의 값을 결정합니다. 예를 들어 &lt;code&gt;\cA&lt;/code&gt; 의 값 은 &lt;code&gt;chr(1)&lt;/code&gt; 이고 &lt;code&gt;\cb&lt;/code&gt; 의 값 은 &lt;code&gt;chr(2)&lt;/code&gt; 등입니다. 자세한 내용은 &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;perlop의 &quot;Regexp Quote-Like Operators&quot;에&lt;/a&gt; 있습니다. ASCII 및 EBCDIC 플랫폼 에 대해 &lt;code&gt;chr(1)&lt;/code&gt; 등이 의미 하는 전체 목록은 &lt;a href=&quot;perlebcdic#OPERATOR-DIFFERENCES&quot;&gt;perlebcdic의 &quot;OPERATOR DIFFERENCES&quot;에 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4b703fe9d5ec022fd6b34eba05b9bfd296c7a519" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\d&lt;/code&gt; matches a digit, not just &lt;code&gt;[0-9]&lt;/code&gt; but also digits from non-roman scripts</source>
          <target state="translated">&lt;code&gt;\d&lt;/code&gt; 는 &lt;code&gt;[0-9]&lt;/code&gt; 뿐만 아니라 로마자가 아닌 스크립트 의 숫자와도 일치합니다.</target>
        </trans-unit>
        <trans-unit id="11a0ca0d9ef67cf04ea6ca6b5bd701f43d0336bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\d&lt;/code&gt; matches a single character considered to be a decimal</source>
          <target state="translated">&lt;code&gt;\d&lt;/code&gt; 는 10 진수로 간주되는 단일 문자와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="428b825cb343a5c9509774542fc16bc60189535f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\g-&lt;i&gt;N&lt;/i&gt;&lt;/code&gt; (starting in Perl 5.10.0) is used for relative addressing. (It can be written as &lt;code&gt;\g{-&lt;i&gt;N&lt;/i&gt;&lt;/code&gt;.) It refers to the</source>
          <target state="translated">&lt;code&gt;\g-&lt;i&gt;N&lt;/i&gt;&lt;/code&gt; 상대 주소 지정에는 \ g- &lt;i&gt;N&lt;/i&gt; (Perl 5.10.0에서 시작)이 사용됩니다. ( &lt;code&gt;\g{-&lt;i&gt;N&lt;/i&gt;&lt;/code&gt; 으로 쓸 수 있습니다 .)</target>
        </trans-unit>
        <trans-unit id="5d621328865d134486d37d521b1b45ba19a42975" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\g-&lt;i&gt;N&lt;/i&gt;&lt;/code&gt; (starting in Perl 5.10.0) is used for relative addressing. (It can be written as &lt;code&gt;\g{-&lt;i&gt;N&lt;/i&gt;}&lt;/code&gt;.) It refers to the</source>
          <target state="translated">&lt;code&gt;\g-&lt;i&gt;N&lt;/i&gt;&lt;/code&gt; (Perl 5.10.0에서 시작)은 상대 주소 지정에 사용됩니다. ( &lt;code&gt;\g{-&lt;i&gt;N&lt;/i&gt;}&lt;/code&gt; 로 쓸 수 있습니다 .)</target>
        </trans-unit>
        <trans-unit id="ad3328b2720f5bc3f94fe796543159d6af46703a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\g1&lt;/code&gt; , &lt;code&gt;\g2&lt;/code&gt; ,... Backreferences are simply matching variables that can be used</source>
          <target state="translated">&lt;code&gt;\g1&lt;/code&gt; , &lt;code&gt;\g2&lt;/code&gt; , ... 역 참조는 단순히 사용할 수있는 변수와 일치합니다</target>
        </trans-unit>
        <trans-unit id="e147c50c59c0f13ef05885d480813a22104b20ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\g1&lt;/code&gt;, &lt;code&gt;\g2&lt;/code&gt;,... Backreferences are simply matching variables that can be used</source>
          <target state="translated">&lt;code&gt;\g1&lt;/code&gt; , &lt;code&gt;\g2&lt;/code&gt; , ... 역 참조는 단순히 사용할 수있는 일치 변수입니다.</target>
        </trans-unit>
        <trans-unit id="c33ee556e38924ce3e6215adbca979c4cfab3cbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\g{&lt;i&gt;name&lt;/i&gt;}&lt;/code&gt; (starting in Perl 5.10.0) can be used to back refer to a named capture group, dispensing completely with having to think about capture buffer positions.</source>
          <target state="translated">&lt;code&gt;\g{&lt;i&gt;name&lt;/i&gt;}&lt;/code&gt; (Perl 5.10.0에서 시작)을 사용하여 명명 된 캡처 그룹을 역 참조하여 캡처 버퍼 위치에 대해 완전히 생각할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="3acb4bd92904b84995c318e676ce7b840ab01ca4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\h&lt;/code&gt; matches any character considered horizontal whitespace; this includes the platform's space and tab characters and several others listed in the table below. &lt;code&gt;\H&lt;/code&gt; matches any character not considered horizontal whitespace. They use the platform's native character set, and do not consider any locale that may otherwise be in use.</source>
          <target state="translated">&lt;code&gt;\h&lt;/code&gt; 는 수평 공백으로 간주되는 모든 문자와 일치합니다. 여기에는 플랫폼의 공백 및 탭 문자와 아래 표에 나열된 여러 문자가 포함됩니다. &lt;code&gt;\H&lt;/code&gt; 는 수평 공백으로 간주되지 않는 문자와 일치합니다. 플랫폼의 고유 문자 세트를 사용하며, 사용중인 로케일은 고려하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f48e53b9236a29c7807d180f9e942a8de2e93b26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\n&lt;/code&gt; matches a logical newline. Perl converts between &lt;code&gt;\n&lt;/code&gt; and your OS's native newline character when reading from or writing to text files.</source>
          <target state="translated">&lt;code&gt;\n&lt;/code&gt; 은 논리적 개행과 일치합니다. Perl 은 텍스트 파일을 읽거나 쓸 때 &lt;code&gt;\n&lt;/code&gt; 과 OS의 기본 개행 문자를 변환합니다.</target>
        </trans-unit>
        <trans-unit id="bbb9812a2f255e06ab4f64b927320bb9082a1028" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\pP&lt;/code&gt; (where &lt;code&gt;P&lt;/code&gt; is a single letter) and &lt;code&gt;\p{Property}&lt;/code&gt; are used to match a character that matches the given Unicode property; properties include things like &quot;letter&quot;, or &quot;thai character&quot;. Capitalizing the sequence to &lt;code&gt;\PP&lt;/code&gt; and &lt;code&gt;\P{Property}&lt;/code&gt; make the sequence match a character that doesn't match the given Unicode property. For more details, see &lt;a href=&quot;perlrecharclass#Backslash-sequences&quot;&gt;&quot;Backslash sequences&quot; in perlrecharclass&lt;/a&gt; and &lt;a href=&quot;perlunicode#Unicode-Character-Properties&quot;&gt;&quot;Unicode Character Properties&quot; in perlunicode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;\pP&lt;/code&gt; (여기서 &lt;code&gt;P&lt;/code&gt; 는 단일 문자) 및 &lt;code&gt;\p{Property}&lt;/code&gt; 는 주어진 유니 코드 속성과 일치하는 문자를 일치시키는 데 사용됩니다. 속성에는 &quot;문자&quot;또는 &quot;태국 문자&quot;와 같은 항목이 포함됩니다. 시퀀스를 &lt;code&gt;\PP&lt;/code&gt; 및 &lt;code&gt;\P{Property}&lt;/code&gt; 대문자로 지정하면 시퀀스가 주어진 유니 코드 속성과 일치하지 않는 문자와 일치하게됩니다. 자세한 내용 &lt;a href=&quot;perlrecharclass#Backslash-sequences&quot;&gt;은 perlrecharclass의 &quot;백 슬래시 시퀀스&quot;&lt;/a&gt; 및 perlunicode의 &lt;a href=&quot;perlunicode#Unicode-Character-Properties&quot;&gt;&quot;유니 코드 문자 속성&quot;을 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c47a61f1d11f4dbc31ff29f399c1b03054d85480" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\pP&lt;/code&gt; (where &lt;code&gt;P&lt;/code&gt; is a single letter) and &lt;code&gt;\p{Property}&lt;/code&gt; are used to match a character that matches the given Unicode property; properties include things like &quot;letter&quot;, or &quot;thai character&quot;. Capitalizing the sequence to &lt;code&gt;\PP&lt;/code&gt; and &lt;code&gt;\P{Property}&lt;/code&gt; make the sequence match a character that doesn't match the given Unicode property. For more details, see &lt;a href=&quot;perlrecharclass#Backslash-sequences&quot;&gt;Backslash sequences in perlrecharclass&lt;/a&gt; and &lt;a href=&quot;perlunicode#Unicode-Character-Properties&quot;&gt;Unicode Character Properties in perlunicode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;\pP&lt;/code&gt; (여기서 &lt;code&gt;P&lt;/code&gt; 는 단일 문자 임) 및 &lt;code&gt;\p{Property}&lt;/code&gt; 는 지정된 유니 코드 속성과 일치하는 문자를 일치시키는 데 사용됩니다. 속성은 &quot;letter&quot;또는 &quot;thai character&quot;와 같은 것을 포함합니다. 시퀀스를 &lt;code&gt;\PP&lt;/code&gt; 및 &lt;code&gt;\P{Property}&lt;/code&gt; 대문자로 지정하면 시퀀스가 지정된 유니 코드 속성과 일치하지 않는 문자와 일치하게됩니다. 자세한 내용 &lt;a href=&quot;perlrecharclass#Backslash-sequences&quot;&gt;은 perlrecharclass의 백 슬래시 시퀀스를&lt;/a&gt; 참조하십시오. 및&lt;a href=&quot;perlunicode#Unicode-Character-Properties&quot;&gt; 유니 코드 문자 속성을 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d84c55ace76e1ff0519f5aac6666720a80072bd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\pP&lt;/code&gt; and &lt;code&gt;\p{Prop}&lt;/code&gt; are character classes to match characters that fit given Unicode properties. One letter property names can be used in the &lt;code&gt;\pP&lt;/code&gt; form, with the property name following the &lt;code&gt;\p&lt;/code&gt; , otherwise, braces are required. When using braces, there is a single form, which is just the property name enclosed in the braces, and a compound form which looks like &lt;code&gt;\p{name=value}&lt;/code&gt; , which means to match if the property &quot;name&quot; for the character has that particular &quot;value&quot;. For instance, a match for a number can be written as &lt;code&gt;/\pN/&lt;/code&gt; or as &lt;code&gt;/\p{Number}/&lt;/code&gt; , or as &lt;code&gt;/\p{Number=True}/&lt;/code&gt; . Lowercase letters are matched by the property</source>
          <target state="translated">&lt;code&gt;\pP&lt;/code&gt; 및 &lt;code&gt;\p{Prop}&lt;/code&gt; 는 지정된 유니 코드 속성에 맞는 문자를 일치시키는 문자 클래스입니다. 하나의 문자 특성 이름을 &lt;code&gt;\pP&lt;/code&gt; 양식에 사용할 수 있으며 특성 이름은 &lt;code&gt;\p&lt;/code&gt; 뒤에옵니다 . 그렇지 않으면 중괄호가 필요합니다. 중괄호를 사용하는 경우 단일 형식 (중괄호로 묶인 속성 이름)과 &lt;code&gt;\p{name=value}&lt;/code&gt; 모양의 복합 형식이 있습니다. 이는 문자의 &quot;name&quot;속성이 그 특정 &quot;값&quot;. 예를 들어, 숫자 일치는 &lt;code&gt;/\pN/&lt;/code&gt; 또는 &lt;code&gt;/\p{Number}/&lt;/code&gt; 또는 &lt;code&gt;/\p{Number=True}/&lt;/code&gt; 로 쓸 수 있습니다 . 소문자는 속성과 일치합니다</target>
        </trans-unit>
        <trans-unit id="098dbbc62b16ee5d92c2a2b0fc0e6743a9b88819" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\pP&lt;/code&gt; and &lt;code&gt;\p{Prop}&lt;/code&gt; are character classes to match characters that fit given Unicode properties. One letter property names can be used in the &lt;code&gt;\pP&lt;/code&gt; form, with the property name following the &lt;code&gt;\p&lt;/code&gt;, otherwise, braces are required. When using braces, there is a single form, which is just the property name enclosed in the braces, and a compound form which looks like &lt;code&gt;\p{name=value}&lt;/code&gt;, which means to match if the property &quot;name&quot; for the character has that particular &quot;value&quot;. For instance, a match for a number can be written as &lt;code&gt;/\pN/&lt;/code&gt; or as &lt;code&gt;/\p{Number}/&lt;/code&gt;, or as &lt;code&gt;/\p{Number=True}/&lt;/code&gt;. Lowercase letters are matched by the property</source>
          <target state="translated">&lt;code&gt;\pP&lt;/code&gt; 및 &lt;code&gt;\p{Prop}&lt;/code&gt; 는 주어진 유니 코드 속성에 맞는 문자와 일치하는 문자 클래스입니다. 하나의 문자 속성 이름은 &lt;code&gt;\p&lt;/code&gt; 뒤에 속성 이름과 함께 &lt;code&gt;\pP&lt;/code&gt; 형식 으로 사용할 수 있습니다 . 그렇지 않으면 중괄호가 필요합니다. 중괄호를 사용할 때 중괄호로 묶인 속성 이름 인 단일 형식과 문자의 &quot;이름&quot;속성에 일치하는 것을 의미하는 &lt;code&gt;\p{name=value}&lt;/code&gt; 와 같은 복합 형식이 있습니다. 그 특정 &quot;가치&quot;. 예를 들어, 일치하는 숫자는 &lt;code&gt;/\pN/&lt;/code&gt; 또는 &lt;code&gt;/\p{Number}/&lt;/code&gt; 또는 &lt;code&gt;/\p{Number=True}/&lt;/code&gt; 있습니다. 속성에 따라 소문자가 일치합니다.</target>
        </trans-unit>
        <trans-unit id="85149b0f3a91ea78c71d331abbaa6fc18476f335" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\p{Blank}&lt;/code&gt; and &lt;code&gt;\p{HorizSpace}&lt;/code&gt; are synonyms.</source>
          <target state="translated">&lt;code&gt;\p{Blank}&lt;/code&gt; 및 &lt;code&gt;\p{HorizSpace}&lt;/code&gt; 는 동의어입니다.</target>
        </trans-unit>
        <trans-unit id="25c9fecf27d0a09b0629761f6ae905625678010b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\p{PosixPunct}&lt;/code&gt; and &lt;code&gt;[[:punct:]]&lt;/code&gt; in the ASCII range match all non-controls, non-alphanumeric, non-space characters: &lt;code&gt;[-!&quot;#$%&amp;amp;'()*+,./:;&amp;lt;=&amp;gt;?@[\\\]^_`{|}~]&lt;/code&gt; (although if a locale is in effect, it could alter the behavior of &lt;code&gt;[[:punct:]]&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;\p{PosixPunct}&lt;/code&gt; ASCII 범위의 \ p {PosixPunct} 및 &lt;code&gt;[[:punct:]]&lt;/code&gt; 는 모든 비 제어, 영숫자가 아닌 비 공백 문자와 일치합니다. &lt;code&gt;[-!&quot;#$%&amp;amp;'()*+,./:;&amp;lt;=&amp;gt;?@[\\\]^_`{|}~]&lt;/code&gt; (로케일이 유효하더라도 &lt;code&gt;[[:punct:]]&lt;/code&gt; 의 동작을 변경할 수 있음 )</target>
        </trans-unit>
        <trans-unit id="755edd19d42bc00d2d42f52db8c39e41d61b74f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\p{XPerlSpace}&lt;/code&gt; and &lt;code&gt;\p{Space}&lt;/code&gt; match identically starting with Perl v5.18. In earlier versions, these differ only in that in non-locale matching, &lt;code&gt;\p{XPerlSpace}&lt;/code&gt; did not match the vertical tab, &lt;code&gt;\cK&lt;/code&gt; . Same for the two ASCII-only range forms.</source>
          <target state="translated">&lt;code&gt;\p{XPerlSpace}&lt;/code&gt; 및 &lt;code&gt;\p{Space}&lt;/code&gt; 는 Perl v5.18부터 동일하게 일치합니다. 이전 버전에서는 로케일이 아닌 일치에서 &lt;code&gt;\p{XPerlSpace}&lt;/code&gt; 가 세로 탭 &lt;code&gt;\cK&lt;/code&gt; 와 일치하지 않는다는 점만 다릅니다 . 두 ASCII 전용 범위 형식에 대해서도 동일합니다.</target>
        </trans-unit>
        <trans-unit id="ee6e8fa4e9c9641c6848540794bf24bd1ff86f2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\p{XPerlSpace}&lt;/code&gt; and &lt;code&gt;\p{Space}&lt;/code&gt; match identically starting with Perl v5.18. In earlier versions, these differ only in that in non-locale matching, &lt;code&gt;\p{XPerlSpace}&lt;/code&gt; did not match the vertical tab, &lt;code&gt;\cK&lt;/code&gt;. Same for the two ASCII-only range forms.</source>
          <target state="translated">&lt;code&gt;\p{XPerlSpace}&lt;/code&gt; 및 &lt;code&gt;\p{Space}&lt;/code&gt; 는 Perl v5.18부터 동일하게 일치합니다. 이전 버전에서는 비 로케일 일치에서 &lt;code&gt;\p{XPerlSpace}&lt;/code&gt; 가 수직 탭 &lt;code&gt;\cK&lt;/code&gt; 와 일치하지 않는다는 점만 다릅니다 . 두 개의 ASCII 전용 범위 양식에 대해 동일합니다.</target>
        </trans-unit>
        <trans-unit id="40bf92acce79d5b5002afaba6916dbd6bb155338" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\p{XPosixPunct}&lt;/code&gt; and (under Unicode rules) &lt;code&gt;[[:punct:]]&lt;/code&gt;, match what &lt;code&gt;\p{PosixPunct}&lt;/code&gt; matches in the ASCII range, plus what &lt;code&gt;\p{Punct}&lt;/code&gt; matches. This is different than strictly matching according to &lt;code&gt;\p{Punct}&lt;/code&gt; . Another way to say it is that if Unicode rules are in effect, &lt;code&gt;[[:punct:]]&lt;/code&gt; matches all characters that Unicode considers punctuation, plus all ASCII-range characters that Unicode considers symbols.</source>
          <target state="translated">&lt;code&gt;\p{XPosixPunct}&lt;/code&gt; 과 (유니 코드 규칙에 따라) &lt;code&gt;[[:punct:]]&lt;/code&gt; , 일치 &lt;code&gt;\p{PosixPunct}&lt;/code&gt; 는 ASCII 범위에서 경기, 플러스 무엇 &lt;code&gt;\p{Punct}&lt;/code&gt; 일치. 이것은 &lt;code&gt;\p{Punct}&lt;/code&gt; 에 따라 엄격하게 일치하는 것과 다릅니다 . 유니 코드 규칙이 적용되는 경우 &lt;code&gt;[[:punct:]]&lt;/code&gt; 는 유니 코드가 문장 부호를 고려하는 모든 문자와 유니 코드가 기호를 고려하는 모든 ASCII 범위 문자와 일치한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="218f42f116c5754d91ca08dc27a0759faa30d3d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\p{XPosixPunct}&lt;/code&gt; and (under Unicode rules) &lt;code&gt;[[:punct:]]&lt;/code&gt;, match what &lt;code&gt;\p{PosixPunct}&lt;/code&gt; matches in the ASCII range, plus what &lt;code&gt;\p{Punct}&lt;/code&gt; matches. This is different than strictly matching according to &lt;code&gt;\p{Punct}&lt;/code&gt;. Another way to say it is that if Unicode rules are in effect, &lt;code&gt;[[:punct:]]&lt;/code&gt; matches all characters that Unicode considers punctuation, plus all ASCII-range characters that Unicode considers symbols.</source>
          <target state="translated">&lt;code&gt;\p{XPosixPunct}&lt;/code&gt; 과 (유니 코드 규칙에 따라) &lt;code&gt;[[:punct:]]&lt;/code&gt; , 일치 &lt;code&gt;\p{PosixPunct}&lt;/code&gt; 는 ASCII 범위에서 경기, 플러스 무엇 &lt;code&gt;\p{Punct}&lt;/code&gt; 일치. 이것은 &lt;code&gt;\p{Punct}&lt;/code&gt; 에 따라 엄격하게 일치하는 것과 다릅니다 . 또 다른 말은 유니 코드 규칙이 적용되는 경우 &lt;code&gt;[[:punct:]]&lt;/code&gt; 는 유니 코드가 구두점으로 간주하는 모든 문자와 유니 코드가 기호로 간주하는 모든 ASCII 범위 문자와 일치한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="cf3cef3a5e22571510fa5a04adc6bd52e2e9e07c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\s&lt;/code&gt; matches [\t\n\f\r ] and, starting in Perl v5.18, the vertical tab, &lt;code&gt;\cK&lt;/code&gt; . (See note &lt;code&gt;[1]&lt;/code&gt; below for a discussion of this.) Note that this list doesn't include the non-breaking space.</source>
          <target state="translated">&lt;code&gt;\s&lt;/code&gt; 는 [\ t \ n \ f \ r]와 일치하며 Perl v5.18부터 세로 탭 &lt;code&gt;\cK&lt;/code&gt; 와 일치 합니다. (자세한 내용은 아래 참고 &lt;code&gt;[1]&lt;/code&gt; 을 참조하십시오 .)이 목록에는 비 공백 공간이 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="899af5f086bd5390390892789adbfc29fa69cfb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\s&lt;/code&gt; matches [\t\n\f\r ] and, starting in Perl v5.18, the vertical tab, &lt;code&gt;\cK&lt;/code&gt;. (See note &lt;code&gt;[1]&lt;/code&gt; below for a discussion of this.) Note that this list doesn't include the non-breaking space.</source>
          <target state="translated">&lt;code&gt;\s&lt;/code&gt; 는 [\ t \ n \ f \ r] 및 Perl v5.18부터 수직 탭 &lt;code&gt;\cK&lt;/code&gt; 와 일치 합니다. (이에 대한 논의는 아래의 참고 &lt;code&gt;[1]&lt;/code&gt; 을 참조하십시오 .)이 목록에는 구분되지 않는 공백이 포함되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4e3e843f9e7609a6b386f439f2b807f775b93a6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\s&lt;/code&gt; matches a whitespace character, the set &lt;code&gt;[\ \t\r\n\f]&lt;/code&gt; and others</source>
          <target state="translated">&lt;code&gt;\s&lt;/code&gt; 는 공백 문자, 세트 &lt;code&gt;[\ \t\r\n\f]&lt;/code&gt; 및 기타 와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="41ad191b59c68476309e8cdff37277905b3d644e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\s&lt;/code&gt; matches any single character considered whitespace.</source>
          <target state="translated">&lt;code&gt;\s&lt;/code&gt; 는 공백으로 간주되는 단일 문자와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="164846db6b825e570c0d7edc2e8e99d0a8cd9c3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\s&lt;/code&gt; matches exactly the characters shown with an &quot;s&quot; column in the table below.</source>
          <target state="translated">&lt;code&gt;\s&lt;/code&gt; 는 아래 표에서 &quot;s&quot;열로 표시된 문자와 정확히 일치합니다.</target>
        </trans-unit>
        <trans-unit id="dfe6b3493a7e126712936240780ab43a7647b5c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\s&lt;/code&gt; matches exactly the code points above 255 shown with an &quot;s&quot; column in the table below.</source>
          <target state="translated">&lt;code&gt;\s&lt;/code&gt; 는 아래 표에 &quot;s&quot;열로 표시된 255 이상의 코드 포인트와 정확히 일치합니다.</target>
        </trans-unit>
        <trans-unit id="53c42afe9cf980295f6ccaddc4816a2d0390a04f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\s&lt;/code&gt; matches whatever the locale considers to be whitespace.</source>
          <target state="translated">&lt;code&gt;\s&lt;/code&gt; 는 로케일이 공백이라고 생각하는 것과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="e17398607beae9e16f5d507bd2de1c2792253d60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\v&lt;/code&gt; matches any character considered vertical whitespace; this includes the platform's carriage return and line feed characters (newline) plus several other characters, all listed in the table below. &lt;code&gt;\V&lt;/code&gt; matches any character not considered vertical whitespace. They use the platform's native character set, and do not consider any locale that may otherwise be in use.</source>
          <target state="translated">&lt;code&gt;\v&lt;/code&gt; 는 수직 공백으로 간주되는 모든 문자와 일치합니다. 여기에는 플랫폼의 캐리지 리턴 및 줄 바꿈 문자 (개행 문자)와 몇 가지 다른 문자가 모두 포함되며 아래 표에 나열되어 있습니다. &lt;code&gt;\V&lt;/code&gt; 는 수직 공백으로 간주되지 않는 모든 문자와 일치합니다. 플랫폼의 고유 문자 세트를 사용하며, 사용중인 로케일은 고려하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e84d6b7c93d52f35bcd484412e96304ddb465e55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\w&lt;/code&gt; can be used to match a Japanese ideograph, for instance; and &lt;code&gt;[[:digit:]]&lt;/code&gt; a Bengali number.</source>
          <target state="translated">&lt;code&gt;\w&lt;/code&gt; 는 일본어 표의 문자를 일치시키는 데 사용할 수 있습니다. 과 &lt;code&gt;[[:digit:]]&lt;/code&gt; 벵골어 숫자.</target>
        </trans-unit>
        <trans-unit id="12b56560fcb8e649f2853269006af953eb9769e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\w&lt;/code&gt; is a character class that matches any single</source>
          <target state="translated">&lt;code&gt;\w&lt;/code&gt; 는 하나의 문자와 일치하는 문자 클래스입니다</target>
        </trans-unit>
        <trans-unit id="48cb702e25188808179cd08641633cb28eaa0eac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\w&lt;/code&gt; matches [a-zA-Z0-9_].</source>
          <target state="translated">&lt;code&gt;\w&lt;/code&gt; 는 [a-zA-Z0-9_]와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="a751c502830d54a0d9d3ca25fa6632bc343a71c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\w&lt;/code&gt; matches a word character (alphanumeric or &lt;code&gt;'_'&lt;/code&gt;), not just &lt;code&gt;[0-9a-zA-Z_]&lt;/code&gt; but also digits and characters from non-roman scripts</source>
          <target state="translated">&lt;code&gt;\w&lt;/code&gt; 는 단어 문자 (영숫자 또는 &lt;code&gt;'_'&lt;/code&gt; ) 와 일치하며 &lt;code&gt;[0-9a-zA-Z_]&lt;/code&gt; 뿐만 아니라 비 로마 스크립트의 숫자 및 문자와도 일치합니다.</target>
        </trans-unit>
        <trans-unit id="a2fd3f12a256fac6c8c475c41016b746e332589d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\w&lt;/code&gt; matches exactly what &lt;code&gt;\p{Word}&lt;/code&gt; matches.</source>
          <target state="translated">&lt;code&gt;\w&lt;/code&gt; 는 정확히 &lt;code&gt;\p{Word}&lt;/code&gt; 와 일치합니다. 와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="fbdee4d0daab297bf0961e4ccefe2a5955a8d76f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\w&lt;/code&gt; matches the 63 characters [a-zA-Z0-9_].</source>
          <target state="translated">&lt;code&gt;\w&lt;/code&gt; 는 63 자 [a-zA-Z0-9_]와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="eb954d084b4018682f968a2007d9fb696787dd4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\w&lt;/code&gt; matches the platform's native underscore character plus whatever the locale considers to be alphanumeric.</source>
          <target state="translated">&lt;code&gt;\w&lt;/code&gt; 는 플랫폼의 기본 밑줄 문자와 로케일이 영숫자로 간주하는 모든 문자와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="1175cf96f88bb9109cfcdb274bab554078c0da6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\w&lt;/code&gt; matches the same as &lt;code&gt;\p{Word}&lt;/code&gt; matches in this range. That is, it matches Thai letters, Greek letters, etc. This includes connector punctuation (like the underscore) which connect two words together, or diacritics, such as a &lt;code&gt;COMBINING TILDE&lt;/code&gt; and the modifier letters, which are generally used to add auxiliary markings to letters.</source>
          <target state="translated">&lt;code&gt;\w&lt;/code&gt; 는이 범위의 &lt;code&gt;\p{Word}&lt;/code&gt; 와 동일 합니다. 즉, 태국 문자, 그리스 문자 등이 같은로서 함께 두 단어 또는 발음 구별 부호를 연결 (밑줄 등) 커넥터 문장 부호 포함 일치 &lt;code&gt;COMBINING TILDE&lt;/code&gt; 일반적으로 보조 표시를 추가하는 데 사용되는 및 수정 자 문자와 편지.</target>
        </trans-unit>
        <trans-unit id="fdf252af84459ebbc3355f5052e1c483febc2e96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\x{}&lt;/code&gt; and &lt;code&gt;\o{}&lt;/code&gt; can also be used to specify code points at compile time in double-quotish strings, but, for backward compatibility with older Perls, the same rules apply as with &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr()&lt;/a&gt;&lt;/code&gt; for code points less than 256.</source>
          <target state="translated">&lt;code&gt;\x{}&lt;/code&gt; 및 &lt;code&gt;\o{}&lt;/code&gt; 를 사용하여 컴파일시 코드 인용 부호를 큰 따옴표로 묶을 수 있지만, 이전 Perls와의 하위 호환성을 위해 256보다 작은 코드 포인트에 대해 &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr()&lt;/a&gt;&lt;/code&gt; 과 동일한 규칙이 적용됩니다. .</target>
        </trans-unit>
        <trans-unit id="76c959405321ee93f9b650cda58480e255b74a80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\x{}&lt;/code&gt; and &lt;code&gt;\o{}&lt;/code&gt; can also be used to specify code points at compile time in double-quotish strings, but, for backward compatibility with older Perls, the same rules apply as with &lt;code&gt;chr()&lt;/code&gt; for code points less than 256.</source>
          <target state="translated">&lt;code&gt;\x{}&lt;/code&gt; 및 &lt;code&gt;\o{}&lt;/code&gt; 는 컴파일 타임에 큰 따옴표 문자열로 코드 포인트를 지정하는 데 사용할 수도 있지만 이전 Perls와의 역 호환성을 위해 256 미만의 코드 포인트에 대해 &lt;code&gt;chr()&lt;/code&gt; 과 동일한 규칙이 적용됩니다. .</target>
        </trans-unit>
        <trans-unit id="5fe4cad9ff217e9c6a9d88999a2c91a4805e6cd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\z&lt;/code&gt; and &lt;code&gt;\Z&lt;/code&gt; match at the end of the string. If the &lt;code&gt;/m&lt;/code&gt; modifier isn't used, then &lt;code&gt;/\Z/&lt;/code&gt; is equivalent to &lt;code&gt;/$/&lt;/code&gt; ; that is, it matches at the end of the string, or one before the newline at the end of the string. If the &lt;code&gt;/m&lt;/code&gt; modifier is used, then &lt;code&gt;/$/&lt;/code&gt; matches at internal newlines, but the meaning of &lt;code&gt;/\Z/&lt;/code&gt; isn't changed by the &lt;code&gt;/m&lt;/code&gt; modifier. &lt;code&gt;\Z&lt;/code&gt; matches at the end of the string (or just before a trailing newline) regardless whether the &lt;code&gt;/m&lt;/code&gt; modifier is used.</source>
          <target state="translated">&lt;code&gt;\z&lt;/code&gt; 문자열 끝에서 \ z 및 &lt;code&gt;\Z&lt;/code&gt; 일치합니다. 는 IF &lt;code&gt;/m&lt;/code&gt; 에서의 개질제를 사용하지 않고, 다음 &lt;code&gt;/\Z/&lt;/code&gt; 동등 &lt;code&gt;/$/&lt;/code&gt; ; 즉, 문자열 끝에서 또는 문자열 끝에서 개행 이전에 일치합니다. 는 IF &lt;code&gt;/m&lt;/code&gt; 에서의 개질제가 사용하고 &lt;code&gt;/$/&lt;/code&gt; 내부 바꿈에 일치하지만 의미 &lt;code&gt;/\Z/&lt;/code&gt; 에 의해 변경되지 않는다 &lt;code&gt;/m&lt;/code&gt; 의 개질제. &lt;code&gt;\Z&lt;/code&gt; 는 &lt;code&gt;/m&lt;/code&gt; 수정 자의 사용 여부에 관계없이 문자열의 끝에서 (또는 후행 줄 바꿈 직전에) 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="624cd6975bec00d59c30751190892372b771ed6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\z&lt;/code&gt; and &lt;code&gt;\Z&lt;/code&gt; match at the end of the string. If the &lt;code&gt;/m&lt;/code&gt; modifier isn't used, then &lt;code&gt;/\Z/&lt;/code&gt; is equivalent to &lt;code&gt;/$/&lt;/code&gt;; that is, it matches at the end of the string, or one before the newline at the end of the string. If the &lt;code&gt;/m&lt;/code&gt; modifier is used, then &lt;code&gt;/$/&lt;/code&gt; matches at internal newlines, but the meaning of &lt;code&gt;/\Z/&lt;/code&gt; isn't changed by the &lt;code&gt;/m&lt;/code&gt; modifier. &lt;code&gt;\Z&lt;/code&gt; matches at the end of the string (or just before a trailing newline) regardless whether the &lt;code&gt;/m&lt;/code&gt; modifier is used.</source>
          <target state="translated">&lt;code&gt;\z&lt;/code&gt; 및 &lt;code&gt;\Z&lt;/code&gt; 는 문자열의 끝에서 일치합니다. 는 IF &lt;code&gt;/m&lt;/code&gt; 에서의 개질제를 사용하지 않고, 다음 &lt;code&gt;/\Z/&lt;/code&gt; 동등 &lt;code&gt;/$/&lt;/code&gt; ; 즉, 문자열의 끝에서 일치하거나 문자열의 끝에서 개행 이전에 일치합니다. 는 IF &lt;code&gt;/m&lt;/code&gt; 에서의 개질제가 사용하고 &lt;code&gt;/$/&lt;/code&gt; 내부 바꿈에 일치하지만 의미 &lt;code&gt;/\Z/&lt;/code&gt; 에 의해 변경되지 않는다 &lt;code&gt;/m&lt;/code&gt; 의 개질제. &lt;code&gt;\Z&lt;/code&gt; 는 &lt;code&gt;/m&lt;/code&gt; 수정자가 사용 되는지 여부에 관계없이 문자열의 끝 (또는 후행 개행 바로 앞)에서 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="38f47b559e51c9cb06b7531b5b8a212ee7a07836" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\z&lt;/code&gt; is just like &lt;code&gt;\Z&lt;/code&gt; , except that it does not match before a trailing newline. &lt;code&gt;\z&lt;/code&gt; matches at the end of the string only, regardless of the modifiers used, and not just before a newline. It is how to anchor the match to the true end of the string under all conditions.</source>
          <target state="translated">&lt;code&gt;\z&lt;/code&gt; 는 &lt;code&gt;\Z&lt;/code&gt; 와 같습니다 . 단, 후행 줄 바꿈 전에는 일치하지 않습니다. &lt;code&gt;\z&lt;/code&gt; 는 줄 바꿈 직전이 아니라 사용 된 수정 자에 관계없이 문자열 끝에서만 일치합니다. 모든 조건에서 문자열의 실제 끝에 일치를 고정시키는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="0dddfca295a15998343d3e2118aed035cd1b453e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\z&lt;/code&gt; is just like &lt;code&gt;\Z&lt;/code&gt;, except that it does not match before a trailing newline. &lt;code&gt;\z&lt;/code&gt; matches at the end of the string only, regardless of the modifiers used, and not just before a newline. It is how to anchor the match to the true end of the string under all conditions.</source>
          <target state="translated">&lt;code&gt;\z&lt;/code&gt; 는 후행 개행 이전에 일치하지 않는다는 점을 제외하면 &lt;code&gt;\Z&lt;/code&gt; 와 같습니다 . &lt;code&gt;\z&lt;/code&gt; 는 줄 바꿈 바로 앞이 아니라 사용 된 수정 자에 관계없이 문자열의 끝에서만 일치합니다. 모든 조건에서 일치 항목을 문자열의 실제 끝에 고정하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="a3a70aedbc9fae24b3656fb271fb5a35b52ef808" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;]&lt;/code&gt; is the offset of the start of the substring matched by</source>
          <target state="translated">&lt;code&gt;]&lt;/code&gt; 는 일치하는 부분 문자열의 시작 오프셋입니다.</target>
        </trans-unit>
        <trans-unit id="e1d7f97ecc73edc5732b4917233d89a3115636be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; in regular expression patterns are supposed to match all these, but don't. These characters also don't, but should, affect &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;&lt;code&gt;$.&lt;/code&gt; , and script line numbers.</source>
          <target state="translated">&lt;code&gt;^&lt;/code&gt; 정규 표현식 패턴에서 ^ 와 &lt;code&gt;$&lt;/code&gt; 는이 모든 것과 일치해야하지만 그렇지 않습니다. 이 문자들은 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; &lt;code&gt;$.&lt;/code&gt; 에도 영향을 미치지 않지만 영향을 미쳐야 합니다.및 스크립트 줄 번호.</target>
        </trans-unit>
        <trans-unit id="86ae5c851c3a1cc84b8441895b384c4179ba8046" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; in regular expression patterns are supposed to match all these, but don't. These characters also don't, but should, affect &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;&lt;code&gt;$.&lt;/code&gt;, and script line numbers.</source>
          <target state="translated">&lt;code&gt;^&lt;/code&gt; 정규식 패턴의 ^ 및 &lt;code&gt;$&lt;/code&gt; 는이 모든 항목과 일치해야하지만 일치하지 않습니다. 이러한 문자는 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; &lt;code&gt;$.&lt;/code&gt; 에도 영향을주지 않지만 영향을 주어야합니다 . 및 스크립트 줄 번호.</target>
        </trans-unit>
        <trans-unit id="fb2224dcf7ebf0b526271854823f3d301837385c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_PC_CHOWN_RESTRICTED&lt;/code&gt;&lt;code&gt;_PC_LINK_MAX&lt;/code&gt;&lt;code&gt;_PC_MAX_CANON&lt;/code&gt;&lt;code&gt;_PC_MAX_INPUT&lt;/code&gt;&lt;code&gt;_PC_NAME_MAX&lt;/code&gt;&lt;code&gt;_PC_NO_TRUNC&lt;/code&gt;&lt;code&gt;_PC_PATH_MAX&lt;/code&gt;&lt;code&gt;_PC_PIPE_BUF&lt;/code&gt;&lt;code&gt;_PC_VDISABLE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;_PC_CHOWN_RESTRICTED&lt;/code&gt;&lt;code&gt;_PC_LINK_MAX&lt;/code&gt;&lt;code&gt;_PC_MAX_CANON&lt;/code&gt;&lt;code&gt;_PC_MAX_INPUT&lt;/code&gt;&lt;code&gt;_PC_NAME_MAX&lt;/code&gt;&lt;code&gt;_PC_NO_TRUNC&lt;/code&gt;&lt;code&gt;_PC_PATH_MAX&lt;/code&gt;&lt;code&gt;_PC_PIPE_BUF&lt;/code&gt;&lt;code&gt;_PC_VDISABLE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="63011a4008ee629a0f26075a9a743d3b2b2ede8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_POSIX_ARG_MAX&lt;/code&gt;&lt;code&gt;_POSIX_CHILD_MAX&lt;/code&gt;&lt;code&gt;_POSIX_CHOWN_RESTRICTED&lt;/code&gt;&lt;code&gt;_POSIX_JOB_CONTROL&lt;/code&gt;&lt;code&gt;_POSIX_LINK_MAX&lt;/code&gt;&lt;code&gt;_POSIX_MAX_CANON&lt;/code&gt;&lt;code&gt;_POSIX_MAX_INPUT&lt;/code&gt;&lt;code&gt;_POSIX_NAME_MAX&lt;/code&gt;&lt;code&gt;_POSIX_NGROUPS_MAX&lt;/code&gt;&lt;code&gt;_POSIX_NO_TRUNC&lt;/code&gt;&lt;code&gt;_POSIX_OPEN_MAX&lt;/code&gt;&lt;code&gt;_POSIX_PATH_MAX&lt;/code&gt;&lt;code&gt;_POSIX_PIPE_BUF&lt;/code&gt;&lt;code&gt;_POSIX_SAVED_IDS&lt;/code&gt;&lt;code&gt;_POSIX_SSIZE_MAX&lt;/code&gt;&lt;code&gt;_POSIX_STREAM_MAX&lt;/code&gt;&lt;code&gt;_POSIX_TZNAME_MAX&lt;/code&gt;&lt;code&gt;_POSIX_VDISABLE&lt;/code&gt;&lt;code&gt;_POSIX_VERSION&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;_POSIX_ARG_MAX&lt;/code&gt;&lt;code&gt;_POSIX_CHILD_MAX&lt;/code&gt;&lt;code&gt;_POSIX_CHOWN_RESTRICTED&lt;/code&gt;&lt;code&gt;_POSIX_JOB_CONTROL&lt;/code&gt;&lt;code&gt;_POSIX_LINK_MAX&lt;/code&gt;&lt;code&gt;_POSIX_MAX_CANON&lt;/code&gt;&lt;code&gt;_POSIX_MAX_INPUT&lt;/code&gt;&lt;code&gt;_POSIX_NAME_MAX&lt;/code&gt;&lt;code&gt;_POSIX_NGROUPS_MAX&lt;/code&gt;&lt;code&gt;_POSIX_NO_TRUNC&lt;/code&gt;&lt;code&gt;_POSIX_OPEN_MAX&lt;/code&gt;&lt;code&gt;_POSIX_PATH_MAX&lt;/code&gt;&lt;code&gt;_POSIX_PIPE_BUF&lt;/code&gt;&lt;code&gt;_POSIX_SAVED_IDS&lt;/code&gt;&lt;code&gt;_POSIX_SSIZE_MAX&lt;/code&gt;&lt;code&gt;_POSIX_STREAM_MAX&lt;/code&gt;&lt;code&gt;_POSIX_TZNAME_MAX&lt;/code&gt;&lt;code&gt;_POSIX_VDISABLE&lt;/code&gt;&lt;code&gt;_POSIX_VERSION&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3d0338a6cffd158f71c4a073e1191fe24d695975" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_SC_ARG_MAX&lt;/code&gt;&lt;code&gt;_SC_CHILD_MAX&lt;/code&gt;&lt;code&gt;_SC_CLK_TCK&lt;/code&gt;&lt;code&gt;_SC_JOB_CONTROL&lt;/code&gt;&lt;code&gt;_SC_NGROUPS_MAX&lt;/code&gt;&lt;code&gt;_SC_OPEN_MAX&lt;/code&gt;&lt;code&gt;_SC_PAGESIZE&lt;/code&gt;&lt;code&gt;_SC_SAVED_IDS&lt;/code&gt;&lt;code&gt;_SC_STREAM_MAX&lt;/code&gt;&lt;code&gt;_SC_TZNAME_MAX&lt;/code&gt;&lt;code&gt;_SC_VERSION&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;_SC_ARG_MAX&lt;/code&gt;&lt;code&gt;_SC_CHILD_MAX&lt;/code&gt;&lt;code&gt;_SC_CLK_TCK&lt;/code&gt;&lt;code&gt;_SC_JOB_CONTROL&lt;/code&gt;&lt;code&gt;_SC_NGROUPS_MAX&lt;/code&gt;&lt;code&gt;_SC_OPEN_MAX&lt;/code&gt;&lt;code&gt;_SC_PAGESIZE&lt;/code&gt;&lt;code&gt;_SC_SAVED_IDS&lt;/code&gt;&lt;code&gt;_SC_STREAM_MAX&lt;/code&gt;&lt;code&gt;_SC_TZNAME_MAX&lt;/code&gt;&lt;code&gt;_SC_VERSION&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0c4507a34314e4717b1cc2380be0c570f4cf8cc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__DATA__&lt;/code&gt; , &lt;code&gt;__END__&lt;/code&gt; , &lt;code&gt;and&lt;/code&gt; , &lt;code&gt;cmp&lt;/code&gt; , &lt;code&gt;default&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt; , &lt;code&gt;elsif&lt;/code&gt; , &lt;code&gt;eq&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt; , &lt;code&gt;foreach&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/format&quot;&gt;format&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;ge&lt;/code&gt; , &lt;code&gt;given&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;gt&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;le&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;lt&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;ne&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/package&quot;&gt;package&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/qw&quot;&gt;qw&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/qx&quot;&gt;qx&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/say&quot;&gt;say&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;unless&lt;/code&gt; , &lt;code&gt;until&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;when&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;x&lt;/code&gt; , &lt;code&gt;xor&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;__DATA__&lt;/code&gt; , &lt;code&gt;__END__&lt;/code&gt; , &lt;code&gt;and&lt;/code&gt; , &lt;code&gt;cmp&lt;/code&gt; , &lt;code&gt;default&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;else&lt;/code&gt; , &lt;code&gt;elsif&lt;/code&gt; , &lt;code&gt;eq&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;for&lt;/code&gt; , &lt;code&gt;foreach&lt;/code&gt; 는 , &lt;code&gt;&lt;a href=&quot;functions/format&quot;&gt;format&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;ge&lt;/code&gt; , &lt;code&gt;given&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;gt&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;le&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;lt&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;ne&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;when&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;or&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/package&quot;&gt;package&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; 와 , &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/qw&quot;&gt;qw&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/qx&quot;&gt;qx&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/say&quot;&gt;say&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;unless&lt;/code&gt; , &lt;code&gt;until&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; ,, &lt;code&gt;x&lt;/code&gt; , &lt;code&gt;xor&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2ac8079a493704c080d46e2cca7389fdc1d58946" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__DATA__&lt;/code&gt;, &lt;code&gt;__END__&lt;/code&gt;, &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;cmp&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;dump&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;elsif&lt;/code&gt;, &lt;code&gt;eq&lt;/code&gt;, &lt;code&gt;eval&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;foreach&lt;/code&gt;, &lt;code&gt;format&lt;/code&gt;, &lt;code&gt;ge&lt;/code&gt;, &lt;code&gt;given&lt;/code&gt;, &lt;code&gt;goto&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;gt&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;last&lt;/code&gt;, &lt;code&gt;le&lt;/code&gt;, &lt;code&gt;local&lt;/code&gt;, &lt;code&gt;lt&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;my&lt;/code&gt;, &lt;code&gt;ne&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;our&lt;/code&gt;, &lt;code&gt;package&lt;/code&gt;, &lt;code&gt;print&lt;/code&gt;, &lt;code&gt;printf&lt;/code&gt;, &lt;code&gt;q&lt;/code&gt;, &lt;code&gt;qq&lt;/code&gt;, &lt;code&gt;qr&lt;/code&gt;, &lt;code&gt;qw&lt;/code&gt;, &lt;code&gt;qx&lt;/code&gt;, &lt;code&gt;redo&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;say&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt;, &lt;code&gt;tr&lt;/code&gt;, &lt;code&gt;unless&lt;/code&gt;, &lt;code&gt;until&lt;/code&gt;, &lt;code&gt;use&lt;/code&gt;, &lt;code&gt;when&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;xor&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;__DATA__&lt;/code&gt;, &lt;code&gt;__END__&lt;/code&gt;, &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;cmp&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;dump&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;elsif&lt;/code&gt;, &lt;code&gt;eq&lt;/code&gt;, &lt;code&gt;eval&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;foreach&lt;/code&gt;, &lt;code&gt;format&lt;/code&gt;, &lt;code&gt;ge&lt;/code&gt;, &lt;code&gt;given&lt;/code&gt;, &lt;code&gt;goto&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;gt&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;last&lt;/code&gt;, &lt;code&gt;le&lt;/code&gt;, &lt;code&gt;local&lt;/code&gt;, &lt;code&gt;lt&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;my&lt;/code&gt;, &lt;code&gt;ne&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;our&lt;/code&gt;, &lt;code&gt;package&lt;/code&gt;, &lt;code&gt;print&lt;/code&gt;, &lt;code&gt;printf&lt;/code&gt;, &lt;code&gt;q&lt;/code&gt;, &lt;code&gt;qq&lt;/code&gt;, &lt;code&gt;qr&lt;/code&gt;, &lt;code&gt;qw&lt;/code&gt;, &lt;code&gt;qx&lt;/code&gt;, &lt;code&gt;redo&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;say&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt;, &lt;code&gt;tr&lt;/code&gt;, &lt;code&gt;unless&lt;/code&gt;, &lt;code&gt;until&lt;/code&gt;, &lt;code&gt;use&lt;/code&gt;, &lt;code&gt;when&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;xor&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f436bfdadc0a4193ec468e3af9c90fc24e2967c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__DIE__&lt;/code&gt; /&lt;code&gt;__WARN__&lt;/code&gt; handlers are very special in one respect: they may be called to report (probable) errors found by the parser. In such a case the parser may be in inconsistent state, so any attempt to evaluate Perl code from such a handler will probably result in a segfault. This means that warnings or errors that result from parsing Perl should be used with extreme caution, like this:</source>
          <target state="translated">&lt;code&gt;__DIE__&lt;/code&gt; / &lt;code&gt;__WARN__&lt;/code&gt; 핸들러는 한 가지 측면에서 매우 특별합니다. 파서가 발견 한 오류를보고하기 위해 호출 될 수 있습니다. 이러한 경우 구문 분석기가 일관성이없는 상태 일 수 있으므로 이러한 핸들러에서 Perl 코드를 평가하려고하면 segfault가 발생합니다. 즉, Perl 구문 분석으로 인해 발생하는 경고 또는 오류는 다음과 같이 매우주의해서 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="b9456911678627db4da96f2529e10a2ad6d37dbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__DIE__&lt;/code&gt;/&lt;code&gt;__WARN__&lt;/code&gt; handlers are very special in one respect: they may be called to report (probable) errors found by the parser. In such a case the parser may be in inconsistent state, so any attempt to evaluate Perl code from such a handler will probably result in a segfault. This means that warnings or errors that result from parsing Perl should be used with extreme caution, like this:</source>
          <target state="translated">&lt;code&gt;__DIE__&lt;/code&gt; / &lt;code&gt;__WARN__&lt;/code&gt; 핸들러는 한 가지 측면에서 매우 특별합니다. 파서가 발견 한 (가능한) 오류를보고하기 위해 호출 될 수 있습니다. 이러한 경우 파서는 불일치 상태 일 수 있으므로 이러한 처리기에서 Perl 코드를 평가하려고하면 아마도 segfault가 발생할 수 있습니다. 즉, Perl 구문 분석으로 인한 경고 또는 오류는 다음과 같이 매우주의해서 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="c5d0b679130382dce8fe2a86280667432e82e672" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_fieldhash&lt;/code&gt; is the internal function used to create field hashes. It takes two arguments, a hashref and a mode. If the mode is boolean false, the hash is not changed but tested if it is a field hash. If the hash isn't a field hash the return value is boolean false. If it is, the return value indicates the mode of field hash. When called with a boolean true mode, it turns the given hash into a field hash of this mode, returning the mode of the created field hash. &lt;code&gt;_fieldhash&lt;/code&gt; does not erase the given hash.</source>
          <target state="translated">&lt;code&gt;_fieldhash&lt;/code&gt; 는 필드 해시를 만드는 데 사용되는 내부 함수입니다. 해시 참조와 모드라는 두 가지 인수가 필요합니다. 모드가 부울 false 인 경우 해시는 변경되지 않지만 필드 해시인지 테스트됩니다. 해시가 필드 해시가 아닌 경우 반환 값은 부울 false입니다. 이 경우 반환 값은 필드 해시 모드를 나타냅니다. 부울 true 모드로 호출되면 지정된 해시가이 모드의 필드 해시로 바뀌어 작성된 필드 해시의 모드를 반환합니다. &lt;code&gt;_fieldhash&lt;/code&gt; 는 주어진 해시를 지우지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2e8e054b1c07b425b270bb9c7e13c794d2d9092f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;`&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;`&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="aa85beb7344aca10b8cc8699807de44f549b3521" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;``&lt;/code&gt; and pipe-&lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; do not work under DOS.</source>
          <target state="translated">&lt;code&gt;``&lt;/code&gt; 와 pipe- &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 은 DOS에서 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2bdd809918440b8fcbcd0e948d96987513362e99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;``&lt;/code&gt; and pipe-&lt;code&gt;open&lt;/code&gt; do not work under DOS.</source>
          <target state="translated">&lt;code&gt;``&lt;/code&gt; 및 pipe- &lt;code&gt;open&lt;/code&gt; 은 DOS에서 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8e8938480285fe7482d06df8890143549cb42503" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a*&lt;/code&gt; = match 'a' 0 or more times, i.e., any number of times</source>
          <target state="translated">&lt;code&gt;a*&lt;/code&gt; = 'a'와 0 번 이상 일치, 즉 여러 번</target>
        </trans-unit>
        <trans-unit id="21b92f8e0d8dad1b0caf50f135db9b635632e760" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a*&lt;/code&gt; means: match 'a' 0 or more times, i.e., any number of times</source>
          <target state="translated">&lt;code&gt;a*&lt;/code&gt; 의미 : 'a'를 0 번 이상 일치, 즉 여러 번 일치</target>
        </trans-unit>
        <trans-unit id="f3ca7559101ce7ae9003fe0fcdfc72bd09f589b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a*&lt;/code&gt; means: match &lt;code&gt;'a'&lt;/code&gt; 0 or more times,</source>
          <target state="translated">&lt;code&gt;a*&lt;/code&gt; 는 &lt;code&gt;'a'&lt;/code&gt; 와 0 번 이상 일치 함을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="5ab7362646f1c360bc9715cbf44b1a07df61dc33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a*?&lt;/code&gt; means: match 'a' 0 or more times, i.e., any number of times, but as few times as possible</source>
          <target state="translated">&lt;code&gt;a*?&lt;/code&gt; 의미 : 'a'를 0 번 이상, 즉 여러 번 일치하지만 가능한 한 몇 번 일치</target>
        </trans-unit>
        <trans-unit id="82581292c96ab4ca634a840738db2ae15f10b364" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a*?&lt;/code&gt; means: match &lt;code&gt;'a'&lt;/code&gt; 0 or more times,</source>
          <target state="translated">&lt;code&gt;a*?&lt;/code&gt; 의미 : &lt;code&gt;'a'&lt;/code&gt; 와 0 번 이상 일치 ,</target>
        </trans-unit>
        <trans-unit id="53ca230acfe7cf51016cf1f4619d8d0fb5d9ddc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a+&lt;/code&gt; = match 'a' 1 or more times, i.e., at least once</source>
          <target state="translated">&lt;code&gt;a+&lt;/code&gt; = 'a'를 1 회 이상, 즉 1 회 이상 일치</target>
        </trans-unit>
        <trans-unit id="57839f788d53642fe08867e5699ec952e95d5a35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a+&lt;/code&gt; means: match 'a' 1 or more times, i.e., at least once</source>
          <target state="translated">&lt;code&gt;a+&lt;/code&gt; 의미 : 'a'를 1 회 이상, 즉 1 회 이상 일치</target>
        </trans-unit>
        <trans-unit id="b52db27e1bf1a298f6c2fec4c1555cb45de1273c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a+&lt;/code&gt; means: match &lt;code&gt;'a'&lt;/code&gt; 1 or more times,</source>
          <target state="translated">&lt;code&gt;a+&lt;/code&gt; 는 &lt;code&gt;'a'&lt;/code&gt; 와 1 회 이상 일치 함을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="07e81ca192d31fdf9434c5f46dda1eb5e709a3b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a+?&lt;/code&gt; means: match 'a' 1 or more times, i.e., at least once, but as few times as possible</source>
          <target state="translated">&lt;code&gt;a+?&lt;/code&gt; 의미 : 'a'를 1 회 이상, 즉 적어도 한 번, 가능한 한 몇 번 일치시킵니다.</target>
        </trans-unit>
        <trans-unit id="845574760c8db8566f430ffa9647822edd5003c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a+?&lt;/code&gt; means: match &lt;code&gt;'a'&lt;/code&gt; 1 or more times,</source>
          <target state="translated">&lt;code&gt;a+?&lt;/code&gt; 의미 : &lt;code&gt;'a'&lt;/code&gt; 와 1 회 이상 일치 ,</target>
        </trans-unit>
        <trans-unit id="5abe405e15c76b256da476c55e02d7cd0a2d157a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a.out&lt;/code&gt; -style build</source>
          <target state="translated">&lt;code&gt;a.out&lt;/code&gt; 스타일 빌드</target>
        </trans-unit>
        <trans-unit id="35dd9ca1d0d88ad1a96375ce9b702e755846541d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a.out&lt;/code&gt;-style build</source>
          <target state="translated">&lt;code&gt;a.out&lt;/code&gt; 스타일 빌드</target>
        </trans-unit>
        <trans-unit id="230edf66068099823e9804e4de860018cd863dad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a?&lt;/code&gt; = match 'a' 1 or 0 times</source>
          <target state="translated">&lt;code&gt;a?&lt;/code&gt; = 'a'1 번 또는 0 번 일치</target>
        </trans-unit>
        <trans-unit id="9da27773f632fe6532ea60454a7e99563c5df049" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a?&lt;/code&gt; means: match 'a' 1 or 0 times</source>
          <target state="translated">&lt;code&gt;a?&lt;/code&gt; 의미 : 일치하는 'a'1 또는 0 번</target>
        </trans-unit>
        <trans-unit id="7d837c40b361a1b0e068afb77ac8901111672b8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a?&lt;/code&gt; means: match &lt;code&gt;'a'&lt;/code&gt; 1 or 0 times</source>
          <target state="translated">&lt;code&gt;a?&lt;/code&gt; 의미 : &lt;code&gt;'a'&lt;/code&gt; a'1 회 또는 0 회 일치</target>
        </trans-unit>
        <trans-unit id="d95b02ff02305f1ba01c669bd763805726d17747" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a??&lt;/code&gt; means: match 'a' 0 or 1 times. Try 0 first, then 1.</source>
          <target state="translated">&lt;code&gt;a??&lt;/code&gt; 의미 : 'a'0 또는 1 번 일치합니다. 먼저 0을 시도한 다음 1을 시도하십시오.</target>
        </trans-unit>
        <trans-unit id="3f5ee01f6638a46ec4227de038a3818c92264fe6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a??&lt;/code&gt; means: match &lt;code&gt;'a'&lt;/code&gt; 0 or 1 times. Try 0 first, then 1.</source>
          <target state="translated">&lt;code&gt;a??&lt;/code&gt; 의미 : &lt;code&gt;'a'&lt;/code&gt; 를 0 번 또는 1 번 일치 시킵니다. 먼저 0을 시도한 다음 1을 시도하십시오.</target>
        </trans-unit>
        <trans-unit id="d6f5437673cd5bd4b3828d004ecfdf8a717e1140" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;agent&lt;/code&gt; &amp;mdash; A user-agent string (defaults to 'HTTP-Tiny/$VERSION'). If &lt;code&gt;agent&lt;/code&gt; &amp;mdash; ends in a space character, the default user-agent string is appended.</source>
          <target state="translated">&lt;code&gt;agent&lt;/code&gt; &amp;mdash; 사용자 에이전트 문자열 (기본값은 'HTTP-Tiny / $ VERSION')입니다. &lt;code&gt;agent&lt;/code&gt; &amp;mdash; 공백 문자로 끝나는 경우 기본 사용자 에이전트 문자열이 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="40fc80bf6fcacd730498ea7c90f9cf90dcfb60ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;and&lt;/code&gt; , &lt;code&gt;AUTOLOAD&lt;/code&gt; , &lt;code&gt;BEGIN&lt;/code&gt; , &lt;code&gt;CHECK&lt;/code&gt; , &lt;code&gt;cmp&lt;/code&gt; , &lt;code&gt;CORE&lt;/code&gt; , &lt;code&gt;__DATA__&lt;/code&gt; , &lt;code&gt;default&lt;/code&gt; , &lt;code&gt;DESTROY&lt;/code&gt; , &lt;code&gt;else&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/elseif&quot;&gt;elseif&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;elsif&lt;/code&gt; , &lt;code&gt;END&lt;/code&gt; , &lt;code&gt;__END__&lt;/code&gt; , &lt;code&gt;eq&lt;/code&gt; , &lt;code&gt;for&lt;/code&gt; , &lt;code&gt;foreach&lt;/code&gt; , &lt;code&gt;ge&lt;/code&gt; , &lt;code&gt;given&lt;/code&gt; , &lt;code&gt;gt&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;INIT&lt;/code&gt; , &lt;code&gt;le&lt;/code&gt; , &lt;code&gt;lt&lt;/code&gt; , &lt;code&gt;ne&lt;/code&gt; , &lt;code&gt;not&lt;/code&gt; , &lt;code&gt;or&lt;/code&gt; , &lt;code&gt;UNITCHECK&lt;/code&gt; , &lt;code&gt;unless&lt;/code&gt; , &lt;code&gt;until&lt;/code&gt; , &lt;code&gt;when&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;x&lt;/code&gt; , &lt;code&gt;xor&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;and&lt;/code&gt; , &lt;code&gt;AUTOLOAD&lt;/code&gt; 는 , &lt;code&gt;BEGIN&lt;/code&gt; , &lt;code&gt;CHECK&lt;/code&gt; , &lt;code&gt;cmp&lt;/code&gt; , &lt;code&gt;CORE&lt;/code&gt; 는 , &lt;code&gt;__DATA__&lt;/code&gt; 은 , &lt;code&gt;default&lt;/code&gt; , &lt;code&gt;DESTROY&lt;/code&gt; , &lt;code&gt;else&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/elseif&quot;&gt;elseif&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;elsif&lt;/code&gt; , &lt;code&gt;END&lt;/code&gt; , &lt;code&gt;__END__&lt;/code&gt; , &lt;code&gt;eq&lt;/code&gt; , &lt;code&gt;for&lt;/code&gt; , &lt;code&gt;foreach&lt;/code&gt; 는 , &lt;code&gt;ge&lt;/code&gt; , &lt;code&gt;given&lt;/code&gt; , &lt;code&gt;gt&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;INIT&lt;/code&gt; , &lt;code&gt;le&lt;/code&gt; , &lt;code&gt;lt&lt;/code&gt; , &lt;code&gt;ne&lt;/code&gt; , &lt;code&gt;not&lt;/code&gt; , &lt;code&gt;or&lt;/code&gt; , &lt;code&gt;UNITCHECK&lt;/code&gt; , &lt;code&gt;unless&lt;/code&gt; , &lt;code&gt;until&lt;/code&gt; , &lt;code&gt;when&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;x&lt;/code&gt; , &lt;code&gt;xor&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c5ba6e6c064f75fd46dc68781fbd7e30ef75f65c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;and&lt;/code&gt;, &lt;code&gt;AUTOLOAD&lt;/code&gt;, &lt;code&gt;BEGIN&lt;/code&gt;, &lt;code&gt;CHECK&lt;/code&gt;, &lt;code&gt;cmp&lt;/code&gt;, &lt;code&gt;CORE&lt;/code&gt;, &lt;code&gt;__DATA__&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;DESTROY&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;elseif&lt;/code&gt;, &lt;code&gt;elsif&lt;/code&gt;, &lt;code&gt;END&lt;/code&gt;, &lt;code&gt;__END__&lt;/code&gt;, &lt;code&gt;eq&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;foreach&lt;/code&gt;, &lt;code&gt;ge&lt;/code&gt;, &lt;code&gt;given&lt;/code&gt;, &lt;code&gt;gt&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;INIT&lt;/code&gt;, &lt;code&gt;le&lt;/code&gt;, &lt;code&gt;lt&lt;/code&gt;, &lt;code&gt;ne&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;UNITCHECK&lt;/code&gt;, &lt;code&gt;unless&lt;/code&gt;, &lt;code&gt;until&lt;/code&gt;, &lt;code&gt;when&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;xor&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;and&lt;/code&gt;, &lt;code&gt;AUTOLOAD&lt;/code&gt;, &lt;code&gt;BEGIN&lt;/code&gt;, &lt;code&gt;CHECK&lt;/code&gt;, &lt;code&gt;cmp&lt;/code&gt;, &lt;code&gt;CORE&lt;/code&gt;, &lt;code&gt;__DATA__&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;DESTROY&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;elseif&lt;/code&gt;, &lt;code&gt;elsif&lt;/code&gt;, &lt;code&gt;END&lt;/code&gt;, &lt;code&gt;__END__&lt;/code&gt;, &lt;code&gt;eq&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;foreach&lt;/code&gt;, &lt;code&gt;ge&lt;/code&gt;, &lt;code&gt;given&lt;/code&gt;, &lt;code&gt;gt&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;INIT&lt;/code&gt;, &lt;code&gt;le&lt;/code&gt;, &lt;code&gt;lt&lt;/code&gt;, &lt;code&gt;ne&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;UNITCHECK&lt;/code&gt;, &lt;code&gt;unless&lt;/code&gt;, &lt;code&gt;until&lt;/code&gt;, &lt;code&gt;when&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;xor&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0a730339d13b6dfc5b68c65a3de6e0fc8a3004b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ansi16&lt;/code&gt; through &lt;code&gt;ansi255&lt;/code&gt;, as aliases for the &lt;code&gt;rgb&lt;/code&gt; and &lt;code&gt;grey&lt;/code&gt; colors, and the corresponding &lt;code&gt;on_ansi&lt;/code&gt; names and &lt;code&gt;ANSI&lt;/code&gt; and &lt;code&gt;ON_ANSI&lt;/code&gt; constants were added in Term::ANSIColor 4.06, included in Perl 5.25.7.</source>
          <target state="translated">&lt;code&gt;ansi16&lt;/code&gt; ~ &lt;code&gt;ansi255&lt;/code&gt; , &lt;code&gt;rgb&lt;/code&gt; 및 &lt;code&gt;grey&lt;/code&gt; 색상 의 별칭으로 해당하는 &lt;code&gt;on_ansi&lt;/code&gt; 이름과 &lt;code&gt;ANSI&lt;/code&gt; 및 &lt;code&gt;ON_ANSI&lt;/code&gt; 상수가 Perl 5.25.7에 포함 된 Term :: ANSIColor 4.06에 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="237ce529899dd468665989ad0de897e59c5ea0d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;anyinflate&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;anyinflate&lt;/code&gt; 는 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 매개 변수 중 두 개 이상을 필요로 합니다.</target>
        </trans-unit>
        <trans-unit id="7ac0ab28f5ff68d86ee5d0ef5fa75665ecf352d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;anyinflate&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;anyinflate&lt;/code&gt; 는 두 개 이상의 매개 변수, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 와 0 개 이상의 선택적 매개 변수를 예상합니다 ( &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;선택적 매개 변수&quot;&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="8a199cbe1000a9f2232c1b768205f8a71916e5c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;anyuncompress&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;anyuncompress&lt;/code&gt; 는 최소 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 매개 변수를 예상 합니다.</target>
        </trans-unit>
        <trans-unit id="31f7ade2046429d24fa7160a950e7d33814b0b63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;anyuncompress&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;anyuncompress&lt;/code&gt; 는 최소한 두 개의 매개 변수, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 와 0 개 이상의 선택적 매개 변수를 예상합니다 ( &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;선택적 매개 변수&quot;&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="90bc2e19b99e66854df10c6d2fbab2bff562ade5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;argc&lt;/code&gt; and &lt;code&gt;argv&lt;/code&gt; supply a set of command-line arguments to the Perl interpreter, as would normally be passed to the &lt;code&gt;main&lt;/code&gt; function of a C program. &lt;code&gt;argv[argc]&lt;/code&gt; must be null. These arguments are where the script to parse is specified, either by naming a script file or by providing a script in a &lt;code&gt;-e&lt;/code&gt; option. If &lt;a href=&quot;perlvar#%240&quot;&gt;&lt;code&gt;$0&lt;/code&gt;&lt;/a&gt; will be written to in the Perl interpreter, then the argument strings must be in writable memory, and so mustn't just be string constants.</source>
          <target state="translated">&lt;code&gt;argc&lt;/code&gt; 및 &lt;code&gt;argv&lt;/code&gt; 는 일반적으로 C 프로그램 의 &lt;code&gt;main&lt;/code&gt; 기능에 전달되는 것처럼 Perl 인터프리터에 명령 줄 인수 집합을 제공합니다 . &lt;code&gt;argv[argc]&lt;/code&gt; 는 null이어야합니다. 이러한 인수는 스크립트 파일의 이름을 지정하거나 &lt;code&gt;-e&lt;/code&gt; 옵션에 스크립트를 제공하여 구문 분석 할 스크립트가 지정되는 곳 입니다. 경우 &lt;a href=&quot;perlvar#%240&quot;&gt; &lt;code&gt;$0&lt;/code&gt; &lt;/a&gt; 펄 인터프리터에 기록됩니다, 다음 인수 문자열을 쓰기 가능한 메모리에 있어야하고 그래서 그냥 문자열 상수가 아니어야합니다.</target>
        </trans-unit>
        <trans-unit id="594b23475e0e1b9413cc86129d116de9c7483b21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;argc&lt;/code&gt; is the number of args (in addition to $self) to pass to the method.</source>
          <target state="translated">&lt;code&gt;argc&lt;/code&gt; 는 메소드에 전달할 인수 ($ self 외에)의 수입니다.</target>
        </trans-unit>
        <trans-unit id="505e15e930b4bc514b93c1cfe1a341934396366a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arrayDepth&lt;/code&gt;, &lt;code&gt;hashDepth&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;arrayDepth&lt;/code&gt;, &lt;code&gt;hashDepth&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3b9598ca1d453d19423eb15b8ff0422182e407fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;array_base&lt;/code&gt; - allow the use of &lt;code&gt;$[&lt;/code&gt; to change the starting index of &lt;code&gt;@array&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;array_base&lt;/code&gt; -의 사용을 허용 &lt;code&gt;$[&lt;/code&gt; 의 시작 인덱스 변경 &lt;code&gt;@array&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="eecb8a104e58709e3b9705ed1f8707f7f5de3bcb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;as_number()&lt;/code&gt; is an alias for &lt;code&gt;as_int()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;as_number()&lt;/code&gt; 의 별칭입니다 &lt;code&gt;as_int()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="01e55f32d5564665acf56907988f94adcc97855a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;as_number()&lt;/code&gt; is an alias for &lt;code&gt;as_int()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;as_number()&lt;/code&gt; 의 별칭입니다 &lt;code&gt;as_int()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0f96c96a7f64071f26b5a17951cc68865a282d2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;as_number()&lt;/code&gt; is an alias to &lt;code&gt;as_int()&lt;/code&gt;. &lt;code&gt;as_number&lt;/code&gt; was introduced in v1.22, while &lt;code&gt;as_int()&lt;/code&gt; was introduced in v1.68.</source>
          <target state="translated">&lt;code&gt;as_number()&lt;/code&gt; 에 대한 별칭입니다 &lt;code&gt;as_int()&lt;/code&gt; . &lt;code&gt;as_number&lt;/code&gt; 는 v1.22 에서 도입 된 반면 &lt;code&gt;as_int()&lt;/code&gt; 는 v1.68에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="3d961a102b3d98060a65c3134d4e3d1aa8466353" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;as_number()&lt;/code&gt; is an alias to this method. &lt;code&gt;as_number&lt;/code&gt; was introduced in v1.22, while &lt;code&gt;as_int()&lt;/code&gt; was only introduced in v1.68.</source>
          <target state="translated">&lt;code&gt;as_number()&lt;/code&gt; 는이 메소드의 별명입니다. &lt;code&gt;as_number&lt;/code&gt; 는 v1.22 에 도입되었으며 as_int &lt;code&gt;as_int()&lt;/code&gt; 는 v1.68에만 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="71746fcdf6fe99a0ad5a137467eb6e68086bdb69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;async&lt;/code&gt; creates a thread to execute the block immediately following it. This block is treated as an anonymous sub, and so must have a semi-colon after the closing brace. Like &lt;code&gt;Thread-&amp;amp;gt;new&lt;/code&gt; , &lt;code&gt;async&lt;/code&gt; returns a thread object.</source>
          <target state="translated">&lt;code&gt;async&lt;/code&gt; 는 바로 다음에 블록을 실행할 스레드를 만듭니다. 이 블록은 익명 서브로 취급되므로 닫는 중괄호 뒤에 세미콜론이 있어야합니다. 마찬가지로 &lt;code&gt;Thread-&amp;amp;gt;new&lt;/code&gt; , &lt;code&gt;async&lt;/code&gt; 스레드 개체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4ba0ddb0d8e6b435990a0ead91a242e7776f8136" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;async&lt;/code&gt; creates a thread to execute the block immediately following it. This block is treated as an anonymous sub, and so must have a semi-colon after the closing brace. Like &lt;code&gt;Thread-&amp;gt;new&lt;/code&gt;, &lt;code&gt;async&lt;/code&gt; returns a thread object.</source>
          <target state="translated">&lt;code&gt;async&lt;/code&gt; 는 스레드를 생성하여 바로 다음 블록을 실행합니다. 이 블록은 익명의 하위로 취급되므로 닫는 중괄호 뒤에 세미콜론이 있어야합니다. 마찬가지로 &lt;code&gt;Thread-&amp;gt;new&lt;/code&gt; , &lt;code&gt;async&lt;/code&gt; 스레드 개체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8f0efd0ea8940854ffa84069ded342e116934964" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;async&lt;/code&gt; creates a thread to execute the block immediately following it. This block is treated as an anonymous subroutine, and so must have a semicolon after the closing brace. Like &lt;code&gt;threads-&amp;gt;create()&lt;/code&gt; , &lt;code&gt;async&lt;/code&gt; returns a</source>
          <target state="translated">&lt;code&gt;async&lt;/code&gt; 는 바로 다음에 블록을 실행할 스레드를 만듭니다. 이 블록은 익명 서브 루틴으로 취급되므로 닫는 중괄호 뒤에 세미콜론이 있어야합니다. 마찬가지로 &lt;code&gt;threads-&amp;gt;create()&lt;/code&gt; , &lt;code&gt;async&lt;/code&gt; 반환</target>
        </trans-unit>
        <trans-unit id="c76c25874f5f4c53d86f76f24c8b58e617286e17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;async&lt;/code&gt; creates a thread to execute the block immediately following it. This block is treated as an anonymous subroutine, and so must have a semicolon after the closing brace. Like &lt;code&gt;threads-&amp;gt;create()&lt;/code&gt;, &lt;code&gt;async&lt;/code&gt; returns a</source>
          <target state="translated">&lt;code&gt;async&lt;/code&gt; 는 스레드를 생성하여 바로 다음 블록을 실행합니다. 이 블록은 익명 서브 루틴으로 취급되므로 닫는 중괄호 뒤에 세미콜론이 있어야합니다. 마찬가지로 &lt;code&gt;threads-&amp;gt;create()&lt;/code&gt; , &lt;code&gt;async&lt;/code&gt; 반환</target>
        </trans-unit>
        <trans-unit id="386d7ab5826c9a6c629f35748fdbfe0d620acdb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;attrs&lt;/code&gt; supplies attributes to be applied the subroutine. A handful of attributes take effect by built-in means, being applied to &lt;code&gt;PL_compcv&lt;/code&gt; immediately when seen. Other attributes are collected up and attached to the subroutine by this route. &lt;code&gt;attrs&lt;/code&gt; may be null to supply no attributes, or point to a &lt;code&gt;const&lt;/code&gt; op for a single attribute, or point to a &lt;code&gt;list&lt;/code&gt; op whose children apart from the &lt;code&gt;pushmark&lt;/code&gt; are &lt;code&gt;const&lt;/code&gt; ops for one or more attributes. Each &lt;code&gt;const&lt;/code&gt; op must be a string, giving the attribute name optionally followed by parenthesised arguments, in the manner in which attributes appear in Perl source. The attributes will be applied to the sub by this function. &lt;code&gt;attrs&lt;/code&gt; is consumed by this function.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; 는 서브 루틴에 적용될 속성을 제공합니다. 소수의 속성은 내장 된 수단에 의해 효력을 발생하며, 볼 때 즉시 &lt;code&gt;PL_compcv&lt;/code&gt; 에 적용됩니다 . 다른 속성은 수집되어이 경로에 의해 서브 루틴에 첨부됩니다. &lt;code&gt;attrs&lt;/code&gt; 에는 A를 아무 속성이나 포인트를 제공하지 않으려면 null도 가능 &lt;code&gt;const&lt;/code&gt; A와 하나의 특성 또는 지점에 대한 연산 &lt;code&gt;list&lt;/code&gt; 떨어져 어린이 연산 &lt;code&gt;pushmark&lt;/code&gt; 입니다 &lt;code&gt;const&lt;/code&gt; 를 하나 개 이상의 속성에 대한 작전. 각 &lt;code&gt;const&lt;/code&gt; op는 문자열이어야하며 속성 이름 뒤에 선택적으로 괄호로 묶인 인수를 제공해야합니다. 이는 속성이 Perl 소스에 나타나는 방식으로 나타납니다. 이 기능에 의해 서브에 속성이 적용됩니다. &lt;code&gt;attrs&lt;/code&gt; 는이 함수에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="20e239fdae6920d9515de44e7fcc79dd92cfa709" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto_help&lt;/code&gt; will be enabled if the calling program explicitly specified a version number higher than 2.32 in the &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; statement.</source>
          <target state="translated">&lt;code&gt;auto_help&lt;/code&gt; 호출 프로그램이 &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; 문 에서 2.32보다 높은 버전 번호를 명시 적으로 지정한 경우 auto_help 가 활성화됩니다 .</target>
        </trans-unit>
        <trans-unit id="15046591e9456a06fe2fca89490693922c130301" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto_help&lt;/code&gt; will be enabled if the calling program explicitly specified a version number higher than 2.32 in the &lt;code&gt;use&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; statement.</source>
          <target state="translated">&lt;code&gt;auto_help&lt;/code&gt; 호출 프로그램이 &lt;code&gt;use&lt;/code&gt; 또는 &lt;code&gt;require&lt;/code&gt; 문 에서 2.32보다 높은 버전 번호를 명시 적으로 지정한 경우 auto_help 가 활성화됩니다 .</target>
        </trans-unit>
        <trans-unit id="44063872f18d367e632a96d4c2413f4a5756f7e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto_version&lt;/code&gt; will be enabled if the calling program explicitly specified a version number higher than 2.32 in the &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; statement.</source>
          <target state="translated">&lt;code&gt;auto_version&lt;/code&gt; 호출 프로그램이 &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; 문 에서 2.32보다 높은 버전 번호를 명시 적으로 지정한 경우 auto_version 이 활성화됩니다 .</target>
        </trans-unit>
        <trans-unit id="4a74561dc358511e7fd16173d3a37bd02a6dccc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto_version&lt;/code&gt; will be enabled if the calling program explicitly specified a version number higher than 2.32 in the &lt;code&gt;use&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; statement.</source>
          <target state="translated">&lt;code&gt;auto_version&lt;/code&gt; 호출 프로그램이 &lt;code&gt;use&lt;/code&gt; 또는 &lt;code&gt;require&lt;/code&gt; 문 에서 2.32보다 높은 버전 번호를 명시 적으로 지정한 경우 auto_version 이 활성화됩니다 .</target>
        </trans-unit>
        <trans-unit id="1347f069f43387e1b93d21850e69034397cebbe6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autobundle&lt;/code&gt; writes a bundle file into the &lt;code&gt;$CPAN::Config-&amp;gt;{cpan_home}/Bundle&lt;/code&gt; directory. The file contains a list of all modules that are both available from CPAN and currently installed within @INC. Duplicates of each distribution are suppressed. The name of the bundle file is based on the current date and a counter, e.g.</source>
          <target state="translated">&lt;code&gt;autobundle&lt;/code&gt; 은 번들 파일을 &lt;code&gt;$CPAN::Config-&amp;gt;{cpan_home}/Bundle&lt;/code&gt; 디렉토리에 씁니다 . 이 파일에는 CPAN에서 사용 가능하고 현재 @INC 내에 설치된 모든 모듈 목록이 포함되어 있습니다. 각 분포의 중복이 억제됩니다. 번들 파일의 이름은 현재 날짜와 카운터를 기반으로합니다 (예 :</target>
        </trans-unit>
        <trans-unit id="8c7e7ae5f16a14cbcac229ca9b12c6c3b27e362b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autoderef&lt;/code&gt; - allow push, each, keys, and other built-ins on references.</source>
          <target state="translated">&lt;code&gt;autoderef&lt;/code&gt; - 참조에 대한 푸시, 각각, 키 및 기타 내장을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="8340269df63e967accad5f4e76ab74dd450f63e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autodie::skip&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;autodie::skip&lt;/code&gt; 대신.</target>
        </trans-unit>
        <trans-unit id="24b650573b7b7b2cbf42f22f273aca6f48d4d98e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autodie&lt;/code&gt; can be enabled for all of Perl's built-ins, including &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; with:</source>
          <target state="translated">&lt;code&gt;autodie&lt;/code&gt; 는 다음을 사용하여 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; 를 포함한 모든 Perl의 내장 기능에 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a09b6de086f61d0a65534bde69dd283b4e2d788f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autodie&lt;/code&gt; can be enabled for all of Perl's built-ins, including &lt;code&gt;system&lt;/code&gt; and &lt;code&gt;exec&lt;/code&gt; with:</source>
          <target state="translated">&lt;code&gt;autodie&lt;/code&gt; 는 다음 과 같은 &lt;code&gt;system&lt;/code&gt; 및 &lt;code&gt;exec&lt;/code&gt; 를 포함하여 Perl의 모든 내장 기능에 대해 활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="92fad0431ea3a38aae4174e77bf5178a3d0e649d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autodie&lt;/code&gt; may not work correctly if used inside a file with a name that looks like a string eval, such as</source>
          <target state="translated">&lt;code&gt;autodie&lt;/code&gt; 다음과 같이 문자열 평가와 같은 이름을 가진 파일 내에서 사용하면 autodie 가 올바르게 작동하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="454c5cd48c87ed2210f01705090343cf6b8e7234" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autodie&lt;/code&gt; performs no checking of called context to determine whether to throw an exception; the explicitness of error handling with &lt;code&gt;autodie&lt;/code&gt; is a deliberate feature.</source>
          <target state="translated">&lt;code&gt;autodie&lt;/code&gt; 는 예외 발생 여부를 결정하기 위해 호출 된 컨텍스트를 검사하지 않습니다. &lt;code&gt;autodie&lt;/code&gt; 를 사용한 오류 처리의 명시 성은 고의적 인 기능입니다.</target>
        </trans-unit>
        <trans-unit id="0db3f5b6429d1ec4bd262f8ef515af9dd0c28044" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autodie&lt;/code&gt; provides a passive interface to allow you to declare hints for your module. These hints will be found and used by &lt;code&gt;autodie&lt;/code&gt; if it is loaded, but otherwise have no effect (or dependencies) without autodie. To set these, your module needs to declare that it</source>
          <target state="translated">&lt;code&gt;autodie&lt;/code&gt; 는 모듈에 대한 힌트를 선언 할 수있는 수동 인터페이스를 제공합니다. 이러한 힌트 는로드 된 경우 &lt;code&gt;autodie&lt;/code&gt; 에서 찾아서 사용 하지만, 그렇지 않으면 autodie 없이는 효과 (또는 종속성)가 없습니다. 이를 설정하려면 모듈에서 다음을 선언해야합니다.</target>
        </trans-unit>
        <trans-unit id="f72fbd0d22196753cef72e3aaeff8f62e055b88f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autodie&lt;/code&gt; uses the &lt;a href=&quot;IPC::System::Simple&quot;&gt;IPC::System::Simple&lt;/a&gt; module to change &lt;code&gt;system&lt;/code&gt;. See its documentation for further information.</source>
          <target state="translated">&lt;code&gt;autodie&lt;/code&gt; 는 &lt;a href=&quot;IPC::System::Simple&quot;&gt;IPC :: System :: Simple&lt;/a&gt; 모듈을 사용하여 시스템 을 변경 &lt;code&gt;system&lt;/code&gt; . 자세한 내용은 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c0331eb04d953ce3ea3a3439a3951a3642b45368" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autodie&lt;/code&gt; uses the &lt;a href=&quot;http://search.cpan.org/perldoc/IPC::System::Simple&quot;&gt;IPC::System::Simple&lt;/a&gt; module to change &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;. See its documentation for further information.</source>
          <target state="translated">&lt;code&gt;autodie&lt;/code&gt; 는 &lt;a href=&quot;http://search.cpan.org/perldoc/IPC::System::Simple&quot;&gt;IPC :: System :: Simple&lt;/a&gt; 모듈을 사용하여 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; 을 변경 합니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0e6a31e9af4af180479c7899fb188e9a03c0bf8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autoftp&lt;/code&gt; is a program that can retrieve, send, or list files via the FTP protocol in a non-interactive manner.</source>
          <target state="translated">&lt;code&gt;autoftp&lt;/code&gt; 는 비 대화식 방식으로 FTP 프로토콜을 통해 파일을 검색, 전송 또는 나열 할 수있는 프로그램입니다.</target>
        </trans-unit>
        <trans-unit id="2bc7ee78e0a3ef2c6ca2c0dc57cbee30b57d77f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autoload&lt;/code&gt; imports the default functions automatically, but &lt;code&gt;load&lt;/code&gt; do not import any functions.</source>
          <target state="translated">&lt;code&gt;autoload&lt;/code&gt; 는 기본 기능을 자동으로 가져 오지만 &lt;code&gt;load&lt;/code&gt; 는 기능을 가져 오지 않습니다.</target>
        </trans-unit>
        <trans-unit id="232241e3903140051e2046c8f6440d532e004aca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autoload&lt;/code&gt; is usable under &lt;code&gt;&lt;a href=&quot;../functions/begin&quot;&gt;BEGIN{};&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;autoload&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../functions/begin&quot;&gt;BEGIN{};&lt;/a&gt;&lt;/code&gt; 에서 자동로드 를 사용할 수 있습니다 . .</target>
        </trans-unit>
        <trans-unit id="e24e49bd446fae2d8a274e067f35727fbe6cf233" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autoload&lt;/code&gt; is usable under &lt;code&gt;BEGIN{};&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;autoload&lt;/code&gt; 는 &lt;code&gt;BEGIN{};&lt;/code&gt; 에서 사용할 수 있습니다 . .</target>
        </trans-unit>
        <trans-unit id="3895a69d42fb934afc4c8b2a1c096fa7c3b874a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;av_fetch&lt;/code&gt; and the corresponding hash functions &lt;code&gt;hv_fetch&lt;/code&gt; and &lt;code&gt;hv_fetch_ent&lt;/code&gt; actually return an undefined mortal value whose magic has been initialized using &lt;code&gt;mg_copy&lt;/code&gt; . Note the value so returned does not need to be deallocated, as it is already mortal. [MAYCHANGE] But you will need to call &lt;code&gt;mg_get()&lt;/code&gt; on the returned value in order to actually invoke the perl level &quot;FETCH&quot; method on the underlying TIE object. Similarly, you may also call &lt;code&gt;mg_set()&lt;/code&gt; on the return value after possibly assigning a suitable value to it using &lt;code&gt;sv_setsv&lt;/code&gt; , which will invoke the &quot;STORE&quot; method on the TIE object. [/MAYCHANGE]</source>
          <target state="translated">&lt;code&gt;av_fetch&lt;/code&gt; 및 해당 해시 함수 &lt;code&gt;hv_fetch&lt;/code&gt; 및 &lt;code&gt;hv_fetch_ent&lt;/code&gt; 는 실제로 &lt;code&gt;mg_copy&lt;/code&gt; 를 사용하여 마법이 초기화 된 정의되지 않은 필사 값을 반환합니다 . 이렇게 반환 된 값은 이미 필멸의 값이므로 할당 취소 할 필요가 없습니다. [MAYCHANGE] 그러나 기본 TIE 오브젝트에서 펄 레벨 &quot;FETCH&quot;메소드를 실제로 호출하려면 리턴 된 값에서 &lt;code&gt;mg_get()&lt;/code&gt; 을 호출해야 합니다. 마찬가지로, 또한 요청할 수있다 &lt;code&gt;mg_set()&lt;/code&gt; 가능하여 그것에 적합한 값을 할당 한 후 리턴 값 &lt;code&gt;sv_setsv&lt;/code&gt; 타이 오브젝트의 &quot;STORE&quot;메소드를 호출한다. [/ MAYCHANGE]</target>
        </trans-unit>
        <trans-unit id="44a90e091fe36f583c32fdbf611cdbf4b367267d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;av_fetch&lt;/code&gt; and the corresponding hash functions &lt;code&gt;hv_fetch&lt;/code&gt; and &lt;code&gt;hv_fetch_ent&lt;/code&gt; actually return an undefined mortal value whose magic has been initialized using &lt;code&gt;mg_copy&lt;/code&gt;. Note the value so returned does not need to be deallocated, as it is already mortal. [MAYCHANGE] But you will need to call &lt;code&gt;mg_get()&lt;/code&gt; on the returned value in order to actually invoke the perl level &quot;FETCH&quot; method on the underlying TIE object. Similarly, you may also call &lt;code&gt;mg_set()&lt;/code&gt; on the return value after possibly assigning a suitable value to it using &lt;code&gt;sv_setsv&lt;/code&gt;, which will invoke the &quot;STORE&quot; method on the TIE object. [/MAYCHANGE]</source>
          <target state="translated">&lt;code&gt;av_fetch&lt;/code&gt; 및 해당 해시 함수 &lt;code&gt;hv_fetch&lt;/code&gt; 및 &lt;code&gt;hv_fetch_ent&lt;/code&gt; 는 실제로 &lt;code&gt;mg_copy&lt;/code&gt; 를 사용하여 마법이 초기화 된 정의되지 않은 필사 값을 반환합니다 . 반환 된 값은 이미 치명적이기 때문에 할당을 취소 할 필요가 없습니다. [MAYCHANGE] 그러나 기본 TIE 객체에서 실제로 펄 레벨 &quot;FETCH&quot;메소드를 호출하려면 리턴 된 값에 대해 &lt;code&gt;mg_get()&lt;/code&gt; 을 호출해야 합니다. 마찬가지로, 또한 요청할 수있다 &lt;code&gt;mg_set()&lt;/code&gt; 가능하여 그것에 적합한 값을 할당 한 후 리턴 값 &lt;code&gt;sv_setsv&lt;/code&gt; 타이 오브젝트의 &quot;STORE&quot;메소드를 호출한다. [/ MAYCHANGE]</target>
        </trans-unit>
        <trans-unit id="370ecf3fa40e8e270cd9e8d46abf508006b8748f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,m}+&lt;/code&gt; means: match at least &lt;code&gt;n&lt;/code&gt; times, not more than &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; times, as many times as possible, and don't give anything up. &lt;code&gt;a?+&lt;/code&gt; is short for &lt;code&gt;a{0,1}+&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;a{n,m}+&lt;/code&gt; 의미 : 최소한 &lt;code&gt;n&lt;/code&gt; 번, &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; 번 이하, 가능한 한 많이 일치하고 , 아무 것도 포기하지 마십시오. &lt;code&gt;a?+&lt;/code&gt; 는 &lt;code&gt;a{0,1}+&lt;/code&gt; 약자입니다 .</target>
        </trans-unit>
        <trans-unit id="1ae130a0ed68c92222592fa86f1895a7e988c6c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,m}+&lt;/code&gt; means: match at least &lt;code&gt;n&lt;/code&gt; times, not more than &lt;code&gt;m&lt;/code&gt; times, as many times as possible, and don't give anything up. &lt;code&gt;a?+&lt;/code&gt; is short for &lt;code&gt;a{0,1}+&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;a{n,m}+&lt;/code&gt; 는 다음을 의미합니다 : 최소한 &lt;code&gt;n&lt;/code&gt; 번, &lt;code&gt;m&lt;/code&gt; 번 이하, 가능한 한 많이 일치하고 , 아무것도 포기하지 마십시오. &lt;code&gt;a?+&lt;/code&gt; 는 &lt;code&gt;a{0,1}+&lt;/code&gt; 약자입니다 .</target>
        </trans-unit>
        <trans-unit id="85e375a004d6e03b949adf214a1f3c21deb80331" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,m}&lt;/code&gt; = match at least &lt;code&gt;n&lt;/code&gt; times, but not more than &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; times.</source>
          <target state="translated">&lt;code&gt;a{n,m}&lt;/code&gt; = &lt;code&gt;n&lt;/code&gt; 회 이상 일치 하지만 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; 회 이하.</target>
        </trans-unit>
        <trans-unit id="0fe113abe8bdde84607c26df4f6e9a7a76262ea0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,m}&lt;/code&gt; = match at least &lt;code&gt;n&lt;/code&gt; times, but not more than &lt;code&gt;m&lt;/code&gt; times.</source>
          <target state="translated">&lt;code&gt;a{n,m}&lt;/code&gt; = 최소 &lt;code&gt;n&lt;/code&gt; 번 일치 하지만 &lt;code&gt;m&lt;/code&gt; 번 이하 일치 합니다.</target>
        </trans-unit>
        <trans-unit id="dc66155533b942e5ab8f7ec970fd9b80f6477f47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,m}&lt;/code&gt; means: match at least &lt;code&gt;n&lt;/code&gt; times, but not more than &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; times.</source>
          <target state="translated">&lt;code&gt;a{n,m}&lt;/code&gt; 의미 : &lt;code&gt;n&lt;/code&gt; 회 이상 일치 하지만 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; 회 이하의 일치 .</target>
        </trans-unit>
        <trans-unit id="5b055a491eac57ec668a2f9d193ea3b24ff90d2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,m}&lt;/code&gt; means: match at least &lt;code&gt;n&lt;/code&gt; times, but not more than &lt;code&gt;m&lt;/code&gt; times.</source>
          <target state="translated">&lt;code&gt;a{n,m}&lt;/code&gt; 은 다음을 의미합니다. 최소 &lt;code&gt;n&lt;/code&gt; 번 일치 하지만 &lt;code&gt;m&lt;/code&gt; 번 이하 일치 합니다.</target>
        </trans-unit>
        <trans-unit id="2e5c7c3b0091b46feced5840b89ec76e6c84ecde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,m}?&lt;/code&gt; means: match at least &lt;code&gt;n&lt;/code&gt; times, not more than &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; times, as few times as possible</source>
          <target state="translated">&lt;code&gt;a{n,m}?&lt;/code&gt; 의미 : 가능한 최소 몇 번 &lt;code&gt;n&lt;/code&gt; 번 이상, &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; 번 이상 일치 하지 않음</target>
        </trans-unit>
        <trans-unit id="d5c2ac0fbfcd05ee2c63a5f902268a4d61c84e09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,m}?&lt;/code&gt; means: match at least &lt;code&gt;n&lt;/code&gt; times, not more than &lt;code&gt;m&lt;/code&gt; times, as few times as possible</source>
          <target state="translated">&lt;code&gt;a{n,m}?&lt;/code&gt; 의미 : 최소 &lt;code&gt;n&lt;/code&gt; 번, &lt;code&gt;m&lt;/code&gt; 번 이하, 가능한 한 적은 횟수로 일치</target>
        </trans-unit>
        <trans-unit id="c2b5ef56170764cdecbc0d347e679c1d12841cae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,}+&lt;/code&gt; means: match at least &lt;code&gt;n&lt;/code&gt; times, but as many times as possible, and don't give anything up. &lt;code&gt;a*+&lt;/code&gt; is short for &lt;code&gt;a{0,}+&lt;/code&gt; and &lt;code&gt;a++&lt;/code&gt; is short for &lt;code&gt;a{1,}+&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;a{n,}+&lt;/code&gt; 의미 : 최소 &lt;code&gt;n&lt;/code&gt; 번 일치 하지만 가능한 한 많이 일치하며 아무 것도 포기하지 않습니다. &lt;code&gt;a*+&lt;/code&gt; 는 &lt;code&gt;a{0,}+&lt;/code&gt; 약자 이고 &lt;code&gt;a++&lt;/code&gt; 는 &lt;code&gt;a{1,}+&lt;/code&gt; 약자입니다 .</target>
        </trans-unit>
        <trans-unit id="88b4985e9406ac84c6a9bc0a09eb0c7779e2dfda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,}+&lt;/code&gt; means: match at least &lt;code&gt;n&lt;/code&gt; times, but as many times as possible, and don't give anything up. &lt;code&gt;a*+&lt;/code&gt; is short for &lt;code&gt;a{0,}+&lt;/code&gt; and &lt;code&gt;a++&lt;/code&gt; is short for &lt;code&gt;a{1,}+&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;a{n,}+&lt;/code&gt; 는 다음을 의미합니다. 최소한 &lt;code&gt;n&lt;/code&gt; 번 일치 하지만 가능한 한 많이 일치하고 아무것도 포기하지 않습니다. &lt;code&gt;a*+&lt;/code&gt; 는 &lt;code&gt;a{0,}+&lt;/code&gt; 약자 이고 &lt;code&gt;a++&lt;/code&gt; 는 &lt;code&gt;a{1,}+&lt;/code&gt; 약자입니다 .</target>
        </trans-unit>
        <trans-unit id="b2e64ab97f56cca83c147d8db97bd5f38b759239" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,}&lt;/code&gt; = match at least &lt;code&gt;n&lt;/code&gt; or more times</source>
          <target state="translated">&lt;code&gt;a{n,}&lt;/code&gt; = 적어도 &lt;code&gt;n&lt;/code&gt; 번 이상 일치</target>
        </trans-unit>
        <trans-unit id="55d47f9ce037822c6fc7d0cc1f2af2151924474e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,}&lt;/code&gt; means: match at least &lt;code&gt;n&lt;/code&gt; or more times</source>
          <target state="translated">&lt;code&gt;a{n,}&lt;/code&gt; 의미 : 적어도 &lt;code&gt;n&lt;/code&gt; 번 이상 일치</target>
        </trans-unit>
        <trans-unit id="4796e3b46c1c24af1a67d6416b09b75dcbb56116" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,}?&lt;/code&gt; means: match at least &lt;code&gt;n&lt;/code&gt; times, but as few times as possible</source>
          <target state="translated">&lt;code&gt;a{n,}?&lt;/code&gt; 의미 : 최소한 &lt;code&gt;n&lt;/code&gt; 번 일치 하지만 가능한 한 몇 번 일치</target>
        </trans-unit>
        <trans-unit id="e98166d002c5d2230a03efe89288ff0c20693e55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n}+&lt;/code&gt; means: match exactly &lt;code&gt;n&lt;/code&gt; times. It is just there for notational consistency.</source>
          <target state="translated">&lt;code&gt;a{n}+&lt;/code&gt; 의미 : 정확히 &lt;code&gt;n&lt;/code&gt; 번 일치합니다 . 표기법의 일관성을 위해 존재합니다.</target>
        </trans-unit>
        <trans-unit id="aff6bf2bdc74bd6dd9dac4febf280883951ce36b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n}&lt;/code&gt; = match exactly &lt;code&gt;n&lt;/code&gt; times</source>
          <target state="translated">&lt;code&gt;a{n}&lt;/code&gt; = 정확히 &lt;code&gt;n&lt;/code&gt; 번 일치</target>
        </trans-unit>
        <trans-unit id="488e096629b1696be9c45608edaf6f60d2af36fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n}&lt;/code&gt; means: match exactly &lt;code&gt;n&lt;/code&gt; times</source>
          <target state="translated">&lt;code&gt;a{n}&lt;/code&gt; 의미 : 정확히 &lt;code&gt;n&lt;/code&gt; 번 일치</target>
        </trans-unit>
        <trans-unit id="cca987a62d500844e024a8db45998e5cb0a2b3e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n}?&lt;/code&gt; means: match exactly &lt;code&gt;n&lt;/code&gt; times. Because we match exactly &lt;code&gt;n&lt;/code&gt; times, &lt;code&gt;a{n}?&lt;/code&gt; is equivalent to &lt;code&gt;a{n}&lt;/code&gt; and is just there for notational consistency.</source>
          <target state="translated">&lt;code&gt;a{n}?&lt;/code&gt; 의미 : 정확히 &lt;code&gt;n&lt;/code&gt; 번 일치합니다 . 정확히 &lt;code&gt;n&lt;/code&gt; 번 일치하기 때문에 &lt;code&gt;a{n}?&lt;/code&gt; &lt;code&gt;a{n}&lt;/code&gt; 과 동일 하며 표기법의 일관성을 위해 존재합니다.</target>
        </trans-unit>
        <trans-unit id="9f0b21f37b253e85a0595d1e8980ee852b5acc4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bad_version_hook&lt;/code&gt; -- if provided, when a version cannot be parsed into a version object, this code reference will be called with the invalid version string as first argument, and the module name as second argument. It must return a valid version object.</source>
          <target state="translated">&lt;code&gt;bad_version_hook&lt;/code&gt; - 제공되는 경우 버전을 버전 개체로 구문 분석 할 수없는 경우이 코드 참조는 잘못된 버전 문자열을 첫 번째 인수로, 모듈 이름을 두 번째 인수로 사용하여 호출됩니다. 유효한 버전 개체를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="f52c5653f4696bd55e9f87cb851ed5b97df1c68e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bailout&lt;/code&gt; methods</source>
          <target state="translated">&lt;code&gt;bailout&lt;/code&gt; 방법</target>
        </trans-unit>
        <trans-unit id="85746857608dedc350be9624fa95666d17cbadec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;base&lt;/code&gt; will also initialize the fields if one of the base classes has it. Multiple inheritance of fields is &lt;b&gt;NOT&lt;/b&gt; supported, if two or more base classes each have inheritable fields the 'base' pragma will croak. See &lt;a href=&quot;fields&quot;&gt;fields&lt;/a&gt; for a description of this feature.</source>
          <target state="translated">&lt;code&gt;base&lt;/code&gt; 클래스 중 하나에 필드가 있으면 base 도 필드를 초기화합니다. 필드의 다중 상속은 지원 &lt;b&gt;되지 않습니다.&lt;/b&gt; 둘 이상의 기본 클래스에 각각 상속 가능한 필드가있는 경우 '기본'pragma가 손상됩니다. 이 기능에 대한 설명은 &lt;a href=&quot;fields&quot;&gt;필드&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a49870f1dbf6685e5c25e3fe1a1f02ddb9994bc7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;baseex&lt;/code&gt; is the error message or object. If it is a reference, it will be used as-is. Otherwise it is used as a string, and if it does not end with a newline then it will be extended with some indication of the current location in the code, as described for &lt;a href=&quot;#mess_sv&quot;&gt;&quot;mess_sv&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;baseex&lt;/code&gt; 는 오류 메시지 또는 개체입니다. 참조 인 경우 그대로 사용됩니다. 그렇지 않으면 문자열로 사용되며, 줄 바꿈으로 끝나지 않으면 &lt;a href=&quot;#mess_sv&quot;&gt;&quot;mess_sv&quot;에&lt;/a&gt; 설명 된대로 코드에서 현재 위치를 표시하여 확장됩니다 .</target>
        </trans-unit>
        <trans-unit id="191bfc9558f7a150df37f22495b9090b9cec45da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;baseex&lt;/code&gt; is the error message or object. If it is a reference, it will be used as-is. Otherwise it is used as a string, and if it does not end with a newline then it will be extended with some indication of the current location in the code, as described for &lt;a href=&quot;#mess_sv&quot;&gt;mess_sv&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;baseex&lt;/code&gt; 는 오류 메시지 또는 객체입니다. 참조 인 경우 그대로 사용됩니다. 그렇지 않으면 문자열로 사용되며 줄 바꿈으로 끝나지 않으면 &lt;a href=&quot;#mess_sv&quot;&gt;mess_sv에&lt;/a&gt; 설명 된 것처럼 코드의 현재 위치를 표시하여 확장됩니다 .</target>
        </trans-unit>
        <trans-unit id="4b66a2dfa7d8acaa040a7d0a40556f020987bdaa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;basemsg&lt;/code&gt; is the initial message or object. If it is a reference, it will be used as-is and will be the result of this function. Otherwise it is used as a string, and if it already ends with a newline, it is taken to be complete, and the result of this function will be the same string. If the message does not end with a newline, then a segment such as &lt;code&gt;at
foo.pl line 37&lt;/code&gt; will be appended, and possibly other clauses indicating the current state of execution. The resulting message will end with a dot and a newline.</source>
          <target state="translated">&lt;code&gt;basemsg&lt;/code&gt; 는 초기 메시지 또는 객체입니다. 참조 인 경우 그대로 사용되며이 기능의 결과가됩니다. 그렇지 않으면 문자열로 사용되며 이미 개행 문자로 끝나는 경우 완성되고이 함수의 결과는 동일한 문자열이됩니다. 메시지가 줄 바꿈으로 끝나지 않으면 &lt;code&gt;at foo.pl line 37&lt;/code&gt; 과 같은 세그먼트와 현재 실행 상태를 나타내는 다른 절이 추가됩니다. 결과 메시지는 점과 개행으로 끝납니다.</target>
        </trans-unit>
        <trans-unit id="1cb5487d902affd230109c249c6cfd2461d057fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;basename()&lt;/code&gt; returns the last level of a filepath even if the last level is clearly directory. In effect, it is acting like &lt;code&gt;&lt;a href=&quot;../functions/pop&quot;&gt;pop()&lt;/a&gt;&lt;/code&gt; for paths. This differs from &lt;code&gt;fileparse()&lt;/code&gt; 's behaviour.</source>
          <target state="translated">&lt;code&gt;basename()&lt;/code&gt; 은 마지막 레벨이 명확하게 디렉토리 인 경우에도 파일 경로의 마지막 레벨을 리턴합니다. 실제로 경로의 경우 &lt;code&gt;&lt;a href=&quot;../functions/pop&quot;&gt;pop()&lt;/a&gt;&lt;/code&gt; 처럼 작동 합니다. 이것은 &lt;code&gt;fileparse()&lt;/code&gt; 의 동작 과 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="481b1743fd918f442200d9ffe7f48dbe81189cc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;basename()&lt;/code&gt; returns the last level of a filepath even if the last level is clearly directory. In effect, it is acting like &lt;code&gt;pop()&lt;/code&gt; for paths. This differs from &lt;code&gt;fileparse()&lt;/code&gt;'s behaviour.</source>
          <target state="translated">&lt;code&gt;basename()&lt;/code&gt; 은 마지막 수준이 분명히 디렉토리 인 경우에도 파일 경로의 마지막 수준을 반환합니다. 실제로 경로에 대해 &lt;code&gt;pop()&lt;/code&gt; 처럼 작동 합니다. 이것은 &lt;code&gt;fileparse()&lt;/code&gt; 의 동작 과 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="c350e4c9f21cb0a1a08b12c3f3a234fd3306d7d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bigint&lt;/code&gt; is just a thin wrapper around various modules of the Math::BigInt family. Think of it as the head of the family, who runs the shop, and orders the others to do the work.</source>
          <target state="translated">&lt;code&gt;bigint&lt;/code&gt; 는 Math :: BigInt 제품군의 다양한 모듈을 둘러싼 얇은 래퍼입니다. 상점을 운영하는 가족의 수장이라고 생각하고 다른 사람들이 일을하도록 명령하십시오.</target>
        </trans-unit>
        <trans-unit id="d9ef559a5aee4fc6060476dc9dce6429a54a1fad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bigint&lt;/code&gt; overrides these routines with versions that can also handle big integer values. Under Perl prior to version v5.9.4, however, this will not happen unless you specifically ask for it with the two import tags &quot;hex&quot; and &quot;oct&quot; - and then it will be global and cannot be disabled inside a scope with &quot;no bigint&quot;:</source>
          <target state="translated">&lt;code&gt;bigint&lt;/code&gt; 는 이러한 루틴을 큰 정수 값을 처리 할 수있는 버전으로 대체합니다. 그러나 버전 v5.9.4 이전의 Perl에서는 두 개의 가져 오기 태그 &quot;hex&quot;및 &quot;oct&quot;로 특별히 요청하지 않는 한 이런 현상이 발생하지 않습니다. 그러면 전역 적이며 &quot;no&quot;인 범위 내에서 비활성화 할 수 없습니다 bigint &quot;:</target>
        </trans-unit>
        <trans-unit id="77855777212dc0e61b0deaffae594983ca8d2546" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bigint&lt;/code&gt; works by overloading handling of integer and floating point literals, converting them to &lt;a href=&quot;Math::BigInt&quot;&gt;Math::BigInt&lt;/a&gt; objects.</source>
          <target state="translated">&lt;code&gt;bigint&lt;/code&gt; 는 정수 및 부동 소수점 리터럴 처리를 오버로드하여 &lt;a href=&quot;Math::BigInt&quot;&gt;Math :: BigInt&lt;/a&gt; 개체 로 변환하는 방식으로 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="9648bd882ff18dacc401ac93a3cbc5bdbf4c9d3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bigint&lt;/code&gt; works by overloading handling of integer and floating point literals, converting them to &lt;a href=&quot;math/bigint&quot;&gt;Math::BigInt&lt;/a&gt; objects.</source>
          <target state="translated">&lt;code&gt;bigint&lt;/code&gt; 는 정수 및 부동 소수점 리터럴 처리를 오버로드하여 &lt;a href=&quot;math/bigint&quot;&gt;Math :: BigInt&lt;/a&gt; 객체 로 변환하여 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="e67fd9272e03c0fff199bea83aa5f87ef9db2f07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bignum&lt;/code&gt; is just a thin wrapper around various modules of the Math::BigInt family. Think of it as the head of the family, who runs the shop, and orders the others to do the work.</source>
          <target state="translated">&lt;code&gt;bignum&lt;/code&gt; 은 Math :: BigInt 제품군의 다양한 모듈을 둘러싼 얇은 래퍼입니다. 상점을 운영하는 가족의 수장이라고 생각하고 다른 사람들이 일을하도록 명령하십시오.</target>
        </trans-unit>
        <trans-unit id="6dce9e30bbfb12ce58e81b2b758a61886ed75fa6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bignum&lt;/code&gt; works by overloading handling of integer and floating point literals, converting them to &lt;a href=&quot;Math::BigInt&quot;&gt;Math::BigInt&lt;/a&gt; or &lt;a href=&quot;Math::BigFloat&quot;&gt;Math::BigFloat&lt;/a&gt; objects.</source>
          <target state="translated">&lt;code&gt;bignum&lt;/code&gt; 은 정수 및 부동 소수점 리터럴 처리를 오버로드하여 &lt;a href=&quot;Math::BigInt&quot;&gt;Math :: BigInt&lt;/a&gt; 또는 &lt;a href=&quot;Math::BigFloat&quot;&gt;Math :: BigFloat&lt;/a&gt; 개체 로 변환하는 방식으로 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="4484da561486fa621b4d5b400e117645932edd50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bignum&lt;/code&gt; works by overloading handling of integer and floating point literals, converting them to &lt;a href=&quot;math/bigint&quot;&gt;Math::BigInt&lt;/a&gt; or &lt;a href=&quot;math/bigfloat&quot;&gt;Math::BigFloat&lt;/a&gt; objects.</source>
          <target state="translated">&lt;code&gt;bignum&lt;/code&gt; 은 정수 및 부동 소수점 리터럴 처리를 오버로드하여 &lt;a href=&quot;math/bigint&quot;&gt;Math :: BigInt&lt;/a&gt; 또는 &lt;a href=&quot;math/bigfloat&quot;&gt;Math :: BigFloat&lt;/a&gt; 객체 로 변환하여 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="0997be7992ad036fe88c07a1a2c5ae3b3d710948" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bigrat&lt;/code&gt; is just a thin wrapper around various modules of the Math::BigInt family. Think of it as the head of the family, who runs the shop, and orders the others to do the work.</source>
          <target state="translated">&lt;code&gt;bigrat&lt;/code&gt; 는 Math :: BigInt 제품군의 다양한 모듈을 둘러싼 얇은 래퍼입니다. 상점을 운영하는 가족의 수장이라고 생각하고 다른 사람들이 일을하도록 명령하십시오.</target>
        </trans-unit>
        <trans-unit id="31610ed7d713b997c6fc0c581db5b312ee95d486" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bigrat&lt;/code&gt; works by overloading handling of integer and floating point literals, converting them to &lt;a href=&quot;Math::BigInt&quot;&gt;Math::BigInt&lt;/a&gt; or &lt;a href=&quot;Math::BigRat&quot;&gt;Math::BigRat&lt;/a&gt; objects.</source>
          <target state="translated">&lt;code&gt;bigrat&lt;/code&gt; 는 정수 및 부동 소수점 리터럴 처리를 오버로드하여 &lt;a href=&quot;Math::BigInt&quot;&gt;Math :: BigInt&lt;/a&gt; 또는 &lt;a href=&quot;Math::BigRat&quot;&gt;Math :: BigRat&lt;/a&gt; 개체 로 변환하는 방식으로 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="f1cc1a07b43faefb3cad91d623e619dcf6f61922" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bigrat&lt;/code&gt; works by overloading handling of integer and floating point literals, converting them to &lt;a href=&quot;math/bigint&quot;&gt;Math::BigInt&lt;/a&gt; or &lt;a href=&quot;math/bigrat&quot;&gt;Math::BigRat&lt;/a&gt; objects.</source>
          <target state="translated">&lt;code&gt;bigrat&lt;/code&gt; 는 정수 및 부동 소수점 리터럴 처리를 오버로드하여 &lt;a href=&quot;math/bigint&quot;&gt;Math :: BigInt&lt;/a&gt; 또는 &lt;a href=&quot;math/bigrat&quot;&gt;Math :: BigRat&lt;/a&gt; 객체 로 변환하여 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="4c21de8e7500902adaf01a3b784729b7ecd719ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;binmode&lt;/code&gt; accepts one optional parameter, which is the layer to be passed on to the &lt;code&gt;binmode&lt;/code&gt; call.</source>
          <target state="translated">&lt;code&gt;binmode&lt;/code&gt; 는 &lt;code&gt;binmode&lt;/code&gt; 호출 에 전달되는 계층 인 하나의 선택적 매개 변수를 허용 합니다.</target>
        </trans-unit>
        <trans-unit id="5e783c908b4a308a204b7ce2483e8ec429148213" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;binmode&lt;/code&gt; sets &lt;code&gt;binmode&lt;/code&gt; on the underlying &lt;code&gt;IO&lt;/code&gt; object, as documented in &lt;code&gt;perldoc -f binmode&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;binmode&lt;/code&gt; 세트 &lt;code&gt;binmode&lt;/code&gt; 기본에 &lt;code&gt;IO&lt;/code&gt; 의 객체에 설명 된대로 &lt;code&gt;perldoc -f binmode&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="61f80f2e5367f2767803da654200383c339903fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bitwise&lt;/code&gt; - allow the new stringwise bit operators</source>
          <target state="translated">&lt;code&gt;bitwise&lt;/code&gt; -새로운 문자열 비트 연산자 허용</target>
        </trans-unit>
        <trans-unit id="c6b6c07a71f5686ac19cd9774ee11d986397deac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bless&lt;/code&gt;, &lt;code&gt;blessed&lt;/code&gt;, and &lt;code&gt;ref&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;bless&lt;/code&gt; , &lt;code&gt;blessed&lt;/code&gt; , &lt;code&gt;ref&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="10db204f6c1bcb2f5fdc7fee81a4199ba0a57f7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blocking&lt;/code&gt; will return the value of the previous setting, or the current setting if &lt;code&gt;BOOL&lt;/code&gt; is not given.</source>
          <target state="translated">&lt;code&gt;blocking&lt;/code&gt; 은 이전 설정의 값 또는 &lt;code&gt;BOOL&lt;/code&gt; 이 제공되지 않은 경우 현재 설정을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="f9c9b344df6b3d92130baeb97d1162148eeccf12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bmodpow&lt;/code&gt; also supports negative exponents.</source>
          <target state="translated">&lt;code&gt;bmodpow&lt;/code&gt; 는 음의 지수도 지원합니다.</target>
        </trans-unit>
        <trans-unit id="cf87ddfc025679a4d593ab2adfc2fee4551858ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bnorm()&lt;/code&gt; on a BigInt object is now effectively a no-op, since the numbers are always stored in normalized form. If passed a string, creates a BigInt object from the input.</source>
          <target state="translated">&lt;code&gt;bnorm()&lt;/code&gt; 숫자가 항상 정규화 된 형식으로 저장되므로 BigInt 오브젝트의 bnorm () 은 사실상 효과적으로 작동하지 않습니다. 문자열을 전달하면 입력에서 BigInt 오브젝트를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="b4162c471db6a86a9b946348362a41973f1acb4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bpow()&lt;/code&gt; (and the rounding functions) now modifies the first argument and returns it, unlike the old code which left it alone and only returned the result. This is to be consistent with &lt;code&gt;badd()&lt;/code&gt; etc. The first three modifies $x, the last one won't:</source>
          <target state="translated">&lt;code&gt;bpow()&lt;/code&gt; (및 반올림 함수)는 이제 첫 번째 인수를 수정하고 반환합니다. 예전 코드는 그대로두고 결과 만 반환하는 것과는 다릅니다. 이것은 &lt;code&gt;badd()&lt;/code&gt; 등과 일치 합니다. 처음 세 개는 $ x를 수정하고 마지막 세 개는 다음 과 같이 수정하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="798cacd9e526afca183dccd1f959cca59d152f9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bpow()&lt;/code&gt; (and the rounding functions) now modifies the first argument and returns it, unlike the old code which left it alone and only returned the result. This is to be consistent with &lt;code&gt;badd()&lt;/code&gt; etc. The first three will modify $x, the last one won't:</source>
          <target state="translated">&lt;code&gt;bpow()&lt;/code&gt; (및 반올림 함수)는 이제 첫 번째 인수를 수정하여 인수를 그대로두고 결과 만 반환 한 이전 코드와 달리 인수를 반환합니다. 이것은 &lt;code&gt;badd()&lt;/code&gt; 등과 일치해야합니다 . 처음 세 개는 $ x를 수정하지만 마지막 것은 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="849aa8872c1c17a134807b61340d2432f9319b23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bpow()&lt;/code&gt; now modifies the first argument, unlike the old code which left it alone and only returned the result. This is to be consistent with &lt;code&gt;badd()&lt;/code&gt; etc. The first will modify $x, the second one won't:</source>
          <target state="translated">&lt;code&gt;bpow()&lt;/code&gt; 는 이전 코드와 달리 첫 번째 인수를 수정하여 결과 만 반환했습니다. 이것은 &lt;code&gt;badd()&lt;/code&gt; 등과 일치해야합니다 . 첫 번째는 $ x를 수정하고 두 번째는 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a80a75fc2d5e34cc7d42f63e584e793a52a18a8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;break&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/evalbytes&quot;&gt;evalbytes&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;__FILE__&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;__LINE__&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;__PACKAGE__&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/__sub__&quot;&gt;__SUB__&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/wantarray&quot;&gt;wantarray&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/evalbytes&quot;&gt;evalbytes&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;__FILE__&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;__LINE__&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;__PACKAGE__&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/__sub__&quot;&gt;__SUB__&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/wantarray&quot;&gt;wantarray&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d37b9dd4d4b04a787d223ae6bcbe782e25d34036" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;break&lt;/code&gt; is available only if you enable the experimental &lt;code&gt;&quot;switch&quot;&lt;/code&gt; feature or use the &lt;code&gt;CORE::&lt;/code&gt; prefix. The &lt;code&gt;&quot;switch&quot;&lt;/code&gt; feature also enables the &lt;code&gt;default&lt;/code&gt; , &lt;code&gt;given&lt;/code&gt; and &lt;code&gt;when&lt;/code&gt; statements, which are documented in &lt;a href=&quot;perlsyn#Switch-Statements&quot;&gt;Switch Statements in perlsyn&lt;/a&gt;. The &lt;code&gt;&quot;switch&quot;&lt;/code&gt; feature is enabled automatically with a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.10&lt;/code&gt; (or higher) declaration in the current scope. In Perl v5.14 and earlier, &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; required the &lt;code&gt;&quot;switch&quot;&lt;/code&gt; feature, like the other keywords.</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; 실험 &lt;code&gt;&quot;switch&quot;&lt;/code&gt; 기능 을 활성화 하거나 &lt;code&gt;CORE::&lt;/code&gt; 접두사를 사용하는 경우에만 break 를 사용할 수 있습니다 . &lt;code&gt;&quot;switch&quot;&lt;/code&gt; 기능도 가능하게 &lt;code&gt;default&lt;/code&gt; , &lt;code&gt;given&lt;/code&gt; 와 &lt;code&gt;when&lt;/code&gt; 에 설명되어 문, &lt;a href=&quot;perlsyn#Switch-Statements&quot;&gt;perlsyn에서 스위치 문&lt;/a&gt; . &lt;code&gt;&quot;switch&quot;&lt;/code&gt; 기능이 자동으로 활성화되어 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.10&lt;/code&gt; 현재 범위에서 (또는 그 이상) 선언. Perl v5.14 및 이전 버전에서는 다른 키워드와 마찬가지로 &lt;code&gt;&quot;switch&quot;&lt;/code&gt; 기능이 &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="9c0c24e8a494482705a4281d9651a49d0ed492fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bsearch()&lt;/code&gt; not supplied. For doing binary search on wordlists, see &lt;a href=&quot;Search::Dict&quot;&gt;Search::Dict&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;bsearch()&lt;/code&gt; 가 제공되지 않았습니다. 단어 목록에서 이진 검색을 수행하려면 &lt;a href=&quot;Search::Dict&quot;&gt;Search :: Dict를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3d28a27314909fae3508f8ed1164a5ec5399fbac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bsearch()&lt;/code&gt; not supplied. For doing binary search on wordlists, see &lt;a href=&quot;search/dict&quot;&gt;Search::Dict&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;bsearch()&lt;/code&gt; 가 제공되지 않았습니다. 단어 목록에서 이진 검색을 수행하려면 &lt;a href=&quot;search/dict&quot;&gt;Search :: Dict를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c0363f4ea35e1c639b600e344e40421943c6fc8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bsqrt()&lt;/code&gt; returns the square root truncated to an integer.</source>
          <target state="translated">&lt;code&gt;bsqrt()&lt;/code&gt; 는 정수로 잘린 제곱근을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="dc1b1c495b5749e6b5ca6c410c06a5dadd577616" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bsqrt()&lt;/code&gt; works only good if the result is a big integer, e.g. the square root of 144 is 12, but from 12 the square root is 3, regardless of rounding mode. The reason is that the result is always truncated to an integer.</source>
          <target state="translated">&lt;code&gt;bsqrt()&lt;/code&gt; 는 결과가 큰 정수인 경우에만 잘 작동합니다. 예를 들어 144의 제곱근은 12이지만 반올림 모드에 관계없이 12에서 제곱근은 3입니다. 그 결과는 항상 정수로 잘 리기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="e6f4bf676cc3a699b15481fc4a058909b15b5eda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bunzip2&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;bunzip2&lt;/code&gt; 는 최소한 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 매개 변수를 예상 합니다.</target>
        </trans-unit>
        <trans-unit id="10729fb23cd747af7b8a893586b2811efe1265c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bunzip2&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;bunzip2&lt;/code&gt; 는 두 개 이상의 매개 변수, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 와 0 개 이상의 선택적 매개 변수를 예상합니다 ( &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;선택적 매개 변수&quot;&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="aa1289eb7503b5143976f8e66e1ad335db6fef90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bytes2str&lt;/code&gt; may be used as an alias for &lt;code&gt;decode&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bytes2str&lt;/code&gt; 은 &lt;code&gt;decode&lt;/code&gt; 의 별칭으로 사용될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b47b055b13026beadfc746983011dadb9ab6a7eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bytes::length()&lt;/code&gt; is admittedly handy if you need to know the &lt;b&gt;byte length&lt;/b&gt; of a Perl scalar. But a more modern way is:</source>
          <target state="translated">&lt;code&gt;bytes::length()&lt;/code&gt; 는 Perl 스칼라 의 &lt;b&gt;바이트 길이&lt;/b&gt; 를 알아야하는 경우 편리합니다 . 그러나 더 현대적인 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="80f379583e71a36acd14cfcdac38bda86a7df34d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bytes::substr()&lt;/code&gt; does not work as an</source>
          <target state="translated">&lt;code&gt;bytes::substr()&lt;/code&gt; 은</target>
        </trans-unit>
        <trans-unit id="e79e566033f6f8c25d3096a1053f32dc8e50d7c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bzip2&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;bzip2&lt;/code&gt; 는 최소한 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 매개 변수를 예상 합니다.</target>
        </trans-unit>
        <trans-unit id="d6feed4079636ffa0babf642233a4e45624b7769" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bzip2&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;bzip2&lt;/code&gt; 에는 두 개 이상의 매개 변수, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 와 0 개 이상의 선택적 매개 변수가 필요합니다 ( &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;선택적 매개 변수&quot;&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="0c814516cc2d759e7d3157d53c1fbf37fa67a461" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c_cc&lt;/code&gt; field values</source>
          <target state="translated">&lt;code&gt;c_cc&lt;/code&gt; 필드 값</target>
        </trans-unit>
        <trans-unit id="afb399b427b2bc07d4aad0c9ddb246210f218065" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c_cflag&lt;/code&gt; field values</source>
          <target state="translated">&lt;code&gt;c_cflag&lt;/code&gt; 필드 값</target>
        </trans-unit>
        <trans-unit id="695ddbb31e07202aa85c70bfeef73b32b2bcbf33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c_iflag&lt;/code&gt; field values</source>
          <target state="translated">&lt;code&gt;c_iflag&lt;/code&gt; 필드 값</target>
        </trans-unit>
        <trans-unit id="ad78af9e16e140b0e1106aa00db5da80627d1e33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c_lflag&lt;/code&gt; field values</source>
          <target state="translated">&lt;code&gt;c_lflag&lt;/code&gt; 필드 값</target>
        </trans-unit>
        <trans-unit id="e7c939558c1553fa1f8bed0d585516c7250dbd25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c_oflag&lt;/code&gt; field values</source>
          <target state="translated">&lt;code&gt;c_oflag&lt;/code&gt; 필드 값</target>
        </trans-unit>
        <trans-unit id="8b53f1266a06652ab4c19a127fb6358e6d1bc2de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;can&lt;/code&gt; cannot know whether an object will be able to provide a method through AUTOLOAD (unless the object's class has overridden &lt;code&gt;can&lt;/code&gt; appropriately), so a return value of</source>
          <target state="translated">&lt;code&gt;can&lt;/code&gt; (객체의 클래스를 오버라이드 (override)하지 않는 한 물체가 AUTOLOAD를 통해 방법을 제공 할 수있을 것입니다 여부를 알 수없는 &lt;code&gt;can&lt;/code&gt; , 적절하게)의 반환 값 때문에</target>
        </trans-unit>
        <trans-unit id="dfd77132ceb27f8ce6ebaf76ddb70f3498008f48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;can&lt;/code&gt; checks if the object or class has a method called &lt;code&gt;METHOD&lt;/code&gt; . If it does, then it returns a reference to the sub. If it does not, then it returns</source>
          <target state="translated">&lt;code&gt;can&lt;/code&gt; 객체 또는 클래스에 &lt;code&gt;METHOD&lt;/code&gt; 라는 메서드 가 있는지 확인할 수 있습니다 . 그렇다면 하위에 대한 참조를 반환합니다. 그렇지 않은 경우 반환</target>
        </trans-unit>
        <trans-unit id="518e9d2b8d4a6dec7e1bf8b236e463e2975de7e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;can&lt;/code&gt; checks if the object or class has a method called &lt;code&gt;METHOD&lt;/code&gt;. If it does, then it returns a reference to the sub. If it does not, then it returns</source>
          <target state="translated">&lt;code&gt;can&lt;/code&gt; 객체 또는 클래스에 &lt;code&gt;METHOD&lt;/code&gt; 라는 메서드 가 있는지 확인할 수 있습니다 . 그렇다면 하위에 대한 참조를 반환합니다. 그렇지 않으면 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="4425b178b213ffd266cc097cac94373284912ece" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;can_load&lt;/code&gt; keeps its results in a cache, so it will not load the same module twice, nor will it attempt to load a module that has already failed to load before. By default, &lt;code&gt;can_load&lt;/code&gt; will check its cache, but you can override that by setting &lt;code&gt;nocache&lt;/code&gt; to true.</source>
          <target state="translated">&lt;code&gt;can_load&lt;/code&gt; 는 결과를 캐시에 유지하므로 동일한 모듈을 두 번로드하지 않으며 이전에 이미로드하지 못한 모듈을로드하려고 시도하지 않습니다. 기본적으로 &lt;code&gt;can_load&lt;/code&gt; 는 캐시를 검사하지만 &lt;code&gt;nocache&lt;/code&gt; 를 true 로 설정하여이를 무시할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="80eef2d6b11e6af56916a4d9fed0cb49b43cc441" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;can_load&lt;/code&gt; takes the following arguments:</source>
          <target state="translated">&lt;code&gt;can_load&lt;/code&gt; 는 다음 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="8c301228074969b093786c28df06529f261955aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;can_load&lt;/code&gt; will take a list of modules, optionally with version numbers and determine if it is able to load them. If it can load *ALL* of them, it will. If one or more are unloadable, none will be loaded.</source>
          <target state="translated">&lt;code&gt;can_load&lt;/code&gt; 는 선택적으로 버전 번호가있는 모듈 목록을 가져 와서로드 할 수 있는지 판별합니다. 그것들 중 * ALL *을로드 할 수 있다면 그렇게 할 것입니다. 하나 이상을로드 할 수 없으면로드되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a478303bf076c83556297908a48dd42d425490d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;can_run&lt;/code&gt; takes only one argument: the name of a binary you wish to locate. &lt;code&gt;can_run&lt;/code&gt; works much like the unix binary &lt;code&gt;which&lt;/code&gt; or the bash command &lt;code&gt;type&lt;/code&gt; , which scans through your path, looking for the requested binary.</source>
          <target state="translated">&lt;code&gt;can_run&lt;/code&gt; 은 하나의 인수, 즉 찾고자하는 바이너리 이름 만 사용합니다. &lt;code&gt;can_run&lt;/code&gt; 은 유닉스 바이너리 &lt;code&gt;which&lt;/code&gt; 또는 bash 명령 &lt;code&gt;type&lt;/code&gt; 과 매우 유사하게 경로를 스캔하여 요청 된 바이너리를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="4c713ea52c968b6131449303769d26a672774869" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;can_run&lt;/code&gt; takes only one argument: the name of a binary you wish to locate. &lt;code&gt;can_run&lt;/code&gt; works much like the unix binary &lt;code&gt;which&lt;/code&gt; or the bash command &lt;code&gt;type&lt;/code&gt;, which scans through your path, looking for the requested binary.</source>
          <target state="translated">&lt;code&gt;can_run&lt;/code&gt; 은 하나의 인수 만 취합니다 : 찾으려 는 바이너리의 이름입니다. &lt;code&gt;can_run&lt;/code&gt; 은 경로를 스캔하여 요청 된 바이너리를 찾는 유닉스 바이너리 &lt;code&gt;which&lt;/code&gt; 또는 bash 명령 &lt;code&gt;type&lt;/code&gt; 과 매우 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="ebc99e95e5b60b47d7f6807a79b190e2a3f9be43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;change()&lt;/code&gt; handles &lt;code&gt;long_contraction&lt;/code&gt; explicitly only. If &lt;code&gt;long_contraction&lt;/code&gt; is not specified in &lt;code&gt;change()&lt;/code&gt; , even though &lt;code&gt;UCA_Version&lt;/code&gt; is changed, &lt;code&gt;long_contraction&lt;/code&gt; will not be changed.</source>
          <target state="translated">&lt;code&gt;change()&lt;/code&gt; 는 &lt;code&gt;long_contraction&lt;/code&gt; 을 명시 적으로 만 처리 합니다. 경우 &lt;code&gt;long_contraction&lt;/code&gt; 가 지정되지 않은 &lt;code&gt;change()&lt;/code&gt; , 비록 &lt;code&gt;UCA_Version&lt;/code&gt; 이 변경, &lt;code&gt;long_contraction&lt;/code&gt; 는 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6b12455f5010981a7caf03ee723a0131c5689a75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;change()&lt;/code&gt; handles &lt;code&gt;long_contraction&lt;/code&gt; explicitly only. If &lt;code&gt;long_contraction&lt;/code&gt; is not specified in &lt;code&gt;change()&lt;/code&gt;, even though &lt;code&gt;UCA_Version&lt;/code&gt; is changed, &lt;code&gt;long_contraction&lt;/code&gt; will not be changed.</source>
          <target state="translated">&lt;code&gt;change()&lt;/code&gt; 는 &lt;code&gt;long_contraction&lt;/code&gt; 을 명시 적으로 만 처리 합니다. 경우 &lt;code&gt;long_contraction&lt;/code&gt; 가 지정되지 않은 &lt;code&gt;change()&lt;/code&gt; , 비록 &lt;code&gt;UCA_Version&lt;/code&gt; 이 변경, &lt;code&gt;long_contraction&lt;/code&gt; 는 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fd64d856a574f3533b0b14b407870b871d3428ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;charblocks()&lt;/code&gt; returns a reference to a hash with the known block names as the keys, and the code point ranges (see &lt;a href=&quot;#charblock%28%29&quot;&gt;&quot;charblock()&quot;&lt;/a&gt;) as the values.</source>
          <target state="translated">&lt;code&gt;charblocks()&lt;/code&gt; 는 알려진 블록 이름을 키로, 코드 포인트 범위 ( &lt;a href=&quot;#charblock%28%29&quot;&gt;&quot;charblock ()&quot;참조&lt;/a&gt; )를 값 으로 사용하여 해시에 대한 참조를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="f558974fb9e8f6fa2958daad656d8e76c141ee94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;charblocks()&lt;/code&gt; returns a reference to a hash with the known block names as the keys, and the code point ranges (see &lt;a href=&quot;#charblock()&quot;&gt;charblock()&lt;/a&gt;) as the values.</source>
          <target state="translated">&lt;code&gt;charblocks()&lt;/code&gt; 는 알려진 블록 이름을 키로 사용하고 코드 포인트 범위 ( &lt;a href=&quot;#charblock()&quot;&gt;charblock ()&lt;/a&gt; 참조 )를 값 으로 사용하여 해시에 대한 참조를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="f837d8bad7cfec5d4bd3123e3e4f4763462fd63b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;charnames::string_vianame()&lt;/code&gt; was introduced in v5.14. Prior to that, &lt;code&gt;charnames::vianame()&lt;/code&gt; should work, but only if the argument is of the form &lt;code&gt;&quot;U+...&quot;&lt;/code&gt; . Your best bet there for runtime Unicode by character name is probably:</source>
          <target state="translated">&lt;code&gt;charnames::string_vianame()&lt;/code&gt; string_vianame () 은 v5.14에서 도입되었습니다. 그 전에 &lt;code&gt;charnames::vianame()&lt;/code&gt; 이 작동해야하지만 인수가 &lt;code&gt;&quot;U+...&quot;&lt;/code&gt; 형식 인 경우에만 작동합니다 . 문자 이름별로 런타임 유니 코드를 사용하는 가장 좋은 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="303cbcdfbfc51ae434dd13ddc4e0d249896c36b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;charnames::string_vianame()&lt;/code&gt; was introduced in v5.14. Prior to that, &lt;code&gt;charnames::vianame()&lt;/code&gt; should work, but only if the argument is of the form &lt;code&gt;&quot;U+...&quot;&lt;/code&gt;. Your best bet there for runtime Unicode by character name is probably:</source>
          <target state="translated">&lt;code&gt;charnames::string_vianame()&lt;/code&gt; string_vianame () 은 v5.14에서 도입되었습니다. 그 이전에는 &lt;code&gt;charnames::vianame()&lt;/code&gt; 이 작동해야하지만 인수가 &lt;code&gt;&quot;U+...&quot;&lt;/code&gt; 형식 인 경우에만 작동합니다 . 문자 이름 별 런타임 유니 코드에 대한 최선의 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="367ccda5de213efa8e6de896b82a1a539bd095da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;charscripts()&lt;/code&gt; returns a reference to a hash with the known script names as the keys, and the code point ranges (see &lt;a href=&quot;#charscript%28%29&quot;&gt;&quot;charscript()&quot;&lt;/a&gt;) as the values.</source>
          <target state="translated">&lt;code&gt;charscripts()&lt;/code&gt; 는 알려진 스크립트 이름을 키로, 코드 포인트 범위 ( &lt;a href=&quot;#charscript%28%29&quot;&gt;&quot;charscript ()&quot;참조&lt;/a&gt; )를 값 으로 사용하여 해시에 대한 참조를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="ead2be91e2308e7b32a2e10b2c8928960675c93d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;charscripts()&lt;/code&gt; returns a reference to a hash with the known script names as the keys, and the code point ranges (see &lt;a href=&quot;#charscript()&quot;&gt;charscript()&lt;/a&gt;) as the values.</source>
          <target state="translated">&lt;code&gt;charscripts()&lt;/code&gt; 는 알려진 스크립트 이름을 키로 사용하고 코드 포인트 범위 ( &lt;a href=&quot;#charscript()&quot;&gt;charscript ()&lt;/a&gt; 참조 )를 값 으로 사용하여 해시에 대한 참조를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="a194b4aab45221d04d6645b5c82186f03345b86f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chdir&lt;/code&gt;, &lt;code&gt;chmod&lt;/code&gt;, &lt;code&gt;chown&lt;/code&gt;, &lt;code&gt;chroot&lt;/code&gt;, &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;link&lt;/code&gt;, &lt;code&gt;lstat&lt;/code&gt;, &lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;rename&lt;/code&gt;, &lt;code&gt;rmdir&lt;/code&gt;, &lt;code&gt;stat&lt;/code&gt;, &lt;code&gt;symlink&lt;/code&gt;, &lt;code&gt;truncate&lt;/code&gt;, &lt;code&gt;unlink&lt;/code&gt;, &lt;code&gt;utime&lt;/code&gt;, &lt;code&gt;-X&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;chdir&lt;/code&gt;, &lt;code&gt;chmod&lt;/code&gt;, &lt;code&gt;chown&lt;/code&gt;, &lt;code&gt;chroot&lt;/code&gt;, &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;link&lt;/code&gt;, &lt;code&gt;lstat&lt;/code&gt;, &lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;rename&lt;/code&gt;, &lt;code&gt;rmdir&lt;/code&gt;, &lt;code&gt;stat&lt;/code&gt;, &lt;code&gt;symlink&lt;/code&gt;, &lt;code&gt;truncate&lt;/code&gt;, &lt;code&gt;unlink&lt;/code&gt;, &lt;code&gt;utime&lt;/code&gt;, &lt;code&gt;-X&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf9d4908831f89243a57108c98d8f05e40e1deab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chdir&lt;/code&gt;, &lt;code&gt;chomp&lt;/code&gt;, &lt;code&gt;chop&lt;/code&gt;, &lt;code&gt;defined&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;eof&lt;/code&gt;, &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;exists&lt;/code&gt;, &lt;code&gt;lstat&lt;/code&gt;, &lt;code&gt;split&lt;/code&gt;, &lt;code&gt;stat&lt;/code&gt;, &lt;code&gt;system&lt;/code&gt;, &lt;code&gt;truncate&lt;/code&gt;, &lt;code&gt;unlink&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;chdir&lt;/code&gt;, &lt;code&gt;chomp&lt;/code&gt;, &lt;code&gt;chop&lt;/code&gt;, &lt;code&gt;defined&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;eof&lt;/code&gt;, &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;exists&lt;/code&gt;, &lt;code&gt;lstat&lt;/code&gt;, &lt;code&gt;split&lt;/code&gt;, &lt;code&gt;stat&lt;/code&gt;, &lt;code&gt;system&lt;/code&gt;, &lt;code&gt;truncate&lt;/code&gt;, &lt;code&gt;unlink&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="61c2d5d27e775d5bf2acdbed6ec527b752b22f7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;check&lt;/code&gt; takes a list of arguments, as follows:</source>
          <target state="translated">&lt;code&gt;check&lt;/code&gt; 는 다음과 같이 인수 목록을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="61a6a6f073c5f32501789dfae5a4e3b8efb86cc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;check&lt;/code&gt; will return when it fails, or a hashref with lowercase keys of parsed arguments when it succeeds.</source>
          <target state="translated">&lt;code&gt;check&lt;/code&gt; 는 실패했을 때 반환되거나, 구문 분석 된 인수의 소문자 키를 가진 hashref가 성공하면 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7bc394e8518231d46cc35fa58854fec4567f4a31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;check_install&lt;/code&gt; allows you to verify if a certain module is installed or not. You may call it with the following arguments:</source>
          <target state="translated">&lt;code&gt;check_install&lt;/code&gt; 을 사용하면 특정 모듈이 설치되어 있는지 확인할 수 있습니다. 다음과 같은 인수로 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2a75a5bd66390a72de974d7ef911d9b417527a2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chr()&lt;/code&gt; must be given an EBCDIC code number argument to yield a desired character return value on an EBCDIC platform. For example:</source>
          <target state="translated">&lt;code&gt;chr()&lt;/code&gt; EBCDIC 플랫폼에서 원하는 문자 리턴 값을 생성하려면 chr () 에 EBCDIC 코드 번호 인수가 제공되어야합니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="10c9412671604351afd83ac42dacea6431fa59b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chr()&lt;/code&gt;, &lt;code&gt;ord()&lt;/code&gt;, &lt;code&gt;substr()&lt;/code&gt;, &lt;code&gt;index()&lt;/code&gt; and &lt;code&gt;rindex()&lt;/code&gt; behave similarly.</source>
          <target state="translated">&lt;code&gt;chr()&lt;/code&gt; , &lt;code&gt;ord()&lt;/code&gt; , &lt;code&gt;substr()&lt;/code&gt; , &lt;code&gt;index()&lt;/code&gt; 및 &lt;code&gt;rindex()&lt;/code&gt; 는 비슷하게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="5b6fc696fb8f44c377c8dffe5ed97242d9663724" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ckflags&lt;/code&gt; is a bitset, in which only the &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; bit currently has a defined meaning (for which see above). All other bits should be clear.</source>
          <target state="translated">&lt;code&gt;ckflags&lt;/code&gt; 는 현재 &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; 비트 만 정의 된 의미를 갖는 bitset입니다 (위 참조). 다른 모든 비트는 지워야합니다.</target>
        </trans-unit>
        <trans-unit id="40f4747e95e85b4a1c67cb7b51c9949e228f03f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;clear&lt;/code&gt; clears the current in-memory archive. This effectively gives you a 'blank' object, ready to be filled again. Note that &lt;code&gt;clear&lt;/code&gt; only has effect on the object, not the underlying tarfile.</source>
          <target state="translated">&lt;code&gt;clear&lt;/code&gt; 는 현재 메모리 내 아카이브를 지 웁니다. 이렇게하면 다시 채울 수있는 '빈'개체가 효과적으로 제공됩니다. 참고 &lt;code&gt;clear&lt;/code&gt; 목적이 아닌 기본 tar 파일 만이 영향을.</target>
        </trans-unit>
        <trans-unit id="8b1ff99d5c7ed83e6f2dcc9a357801da554024fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cmp&lt;/code&gt; and</source>
          <target state="translated">&lt;code&gt;cmp&lt;/code&gt; 와</target>
        </trans-unit>
        <trans-unit id="3dbfc6b5ac858f99cbcc4507d320823e6f6fa5ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cmpthese&lt;/code&gt; can also be passed the data structure that timethese() returns:</source>
          <target state="translated">&lt;code&gt;cmpthese&lt;/code&gt; 는 timethese ()가 반환하는 데이터 구조를 전달할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="88b7a2613718eb73647eecdfe075d3be2ed24da6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;collect_pod&lt;/code&gt; is a optional boolean argument that determines whether POD data is collected and stored for reference. POD data is not collected by default. POD headings are always collected.</source>
          <target state="translated">&lt;code&gt;collect_pod&lt;/code&gt; 는 참조를 위해 POD 데이터가 수집되고 저장되는지 여부를 결정하는 선택적 부울 인수입니다. POD 데이터는 기본적으로 수집되지 않습니다. POD 제목은 항상 수집됩니다.</target>
        </trans-unit>
        <trans-unit id="cb5332ff0a73638efd42ab63fc32fe9bd7dbabeb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;comment&lt;/code&gt; methods</source>
          <target state="translated">&lt;code&gt;comment&lt;/code&gt; 방법</target>
        </trans-unit>
        <trans-unit id="af6a5aaf7404876ed305ccda400e6d0a215f75ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compactDump&lt;/code&gt;, &lt;code&gt;veryCompact&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;compactDump&lt;/code&gt;, &lt;code&gt;veryCompact&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1da23c990c0b340d65a11e6c4dd9a9fbcf9e8cbb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compexcl()&lt;/code&gt; is included for backwards compatibility, but as of Perl 5.12 and more modern Unicode versions, for most purposes it is probably more convenient to use one of the following instead:</source>
          <target state="translated">&lt;code&gt;compexcl()&lt;/code&gt; 은 이전 버전과의 호환성을 위해 포함되어 있지만 Perl 5.12 및 최신 유니 코드 버전에서는 대부분 다음 목적 중 하나를 사용하는 것이 더 편리합니다.</target>
        </trans-unit>
        <trans-unit id="86a708da1901bbb301c133e94da37987c89cff89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cond_signal&lt;/code&gt; will normally generate a warning if you attempt to use it on an unlocked variable. On the rare occasions where doing this may be sensible, you can suppress the warning with:</source>
          <target state="translated">&lt;code&gt;cond_signal&lt;/code&gt; 잠금 해제 변수에서 경고를 사용하려고하면 일반적으로 cond_signal 에서 경고를 생성합니다. 드물게이 작업을 수행하는 것이 합리적 일 수있는 경우 다음과 같이 경고를 표시하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="096889c63611c83b225ce2ede691d1f2be6bc5be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cons&lt;/code&gt; - This option is ignored, since the failover mechanism will drop down to the console automatically if all other media fail.</source>
          <target state="translated">&lt;code&gt;cons&lt;/code&gt; - 다른 모든 매체에 장애가 발생하면 장애 조치 메커니즘이 콘솔로 자동 드롭 다운 되므로이 옵션은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="ccf34562306a2add3d0f9fffd0dcebc556cdc8b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const_attr&lt;/code&gt; - allow the :const attribute on subs</source>
          <target state="translated">&lt;code&gt;const_attr&lt;/code&gt; -구독자 에 : const 속성 허용</target>
        </trans-unit>
        <trans-unit id="0fe8f921f3f9ebaaa79e3f8dc4dbc81789cde77f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;content&lt;/code&gt; &amp;mdash; A scalar to include as the body of the request OR a code reference that will be called iteratively to produce the body of the request</source>
          <target state="translated">&lt;code&gt;content&lt;/code&gt; &amp;mdash; 요청 본문으로 포함 할 스칼라 또는 요청 본문을 생성하기 위해 반복적으로 호출 될 코드 참조</target>
        </trans-unit>
        <trans-unit id="f7c670ca5f082b8bfcb9d79e037f8aad33c25a3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;content&lt;/code&gt; &amp;mdash; The body of the response. If the response does not have any content or if a data callback is provided to consume the response body, this will be the empty string</source>
          <target state="translated">&lt;code&gt;content&lt;/code&gt; &amp;mdash; 응답의 본문입니다. 응답에 콘텐츠가 없거나 응답 본문을 사용하기 위해 데이터 콜백이 제공되는 경우 빈 문자열이됩니다.</target>
        </trans-unit>
        <trans-unit id="5293347d474b74e679c0c8d8acc423646a13b60d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;context()&lt;/code&gt; has some mechanisms to protect you if you do cause a context to persist beyond the scope in which it was obtained. In practice you should not rely on these protections, and they are fairly noisy with warnings.</source>
          <target state="translated">&lt;code&gt;context()&lt;/code&gt; 에는 획득 한 범위를 넘어서 컨텍스트가 지속되도록하는 경우 사용자를 보호하는 몇 가지 메커니즘이 있습니다. 실제로 이러한 보호 기능에 의존해서는 안되며 경고와 함께 상당히 시끄 럽습니다.</target>
        </trans-unit>
        <trans-unit id="a08e95c0960fcde197f4415ccb8265611c6ebc18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cookie_jar&lt;/code&gt; &amp;mdash; An instance of &lt;a href=&quot;HTTP::CookieJar&quot;&gt;HTTP::CookieJar&lt;/a&gt; &amp;mdash; or equivalent class that supports the &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;cookie_header&lt;/code&gt; methods</source>
          <target state="translated">&lt;code&gt;cookie_jar&lt;/code&gt; &amp;mdash; &lt;a href=&quot;HTTP::CookieJar&quot;&gt;HTTP :: CookieJar&lt;/a&gt; 의 인스턴스 &amp;mdash; 또는 &lt;code&gt;add&lt;/code&gt; 및 &lt;code&gt;cookie_header&lt;/code&gt; 메서드 를 지원하는 동등한 클래스</target>
        </trans-unit>
        <trans-unit id="b45a4c8bee9a24fa02b0048a41bb38158983a350" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;croak()&lt;/code&gt; only when your module absolutely cannot figure out what to do. (&lt;code&gt;croak()&lt;/code&gt; is a better version of &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; for use within modules, which reports its errors from the perspective of the caller. See &lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt; for details of &lt;code&gt;croak()&lt;/code&gt; , &lt;code&gt;carp()&lt;/code&gt; and other useful routines.)</source>
          <target state="translated">&lt;code&gt;croak()&lt;/code&gt; 은 모듈이 무엇을 해야할지 절대로 알 수 없을 때만 가능합니다. ( &lt;code&gt;croak()&lt;/code&gt; 은 호출자 관점에서 오류를보고하는 모듈 내에서 사용 하기에 더 나은 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; 버전입니다 . &lt;code&gt;croak()&lt;/code&gt; , &lt;code&gt;carp()&lt;/code&gt; 및 기타 유용한 루틴에 대한 자세한 내용은 &lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt; 를 참조하십시오 .)</target>
        </trans-unit>
        <trans-unit id="3eff87280ab028320576494ad606b509973528c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;croak()&lt;/code&gt; only when your module absolutely cannot figure out what to do. (&lt;code&gt;croak()&lt;/code&gt; is a better version of &lt;code&gt;die()&lt;/code&gt; for use within modules, which reports its errors from the perspective of the caller. See &lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt; for details of &lt;code&gt;croak()&lt;/code&gt;, &lt;code&gt;carp()&lt;/code&gt; and other useful routines.)</source>
          <target state="translated">&lt;code&gt;croak()&lt;/code&gt; 은 모듈이 무엇을해야할지 전혀 알아낼 수 없을 때만 가능합니다. ( &lt;code&gt;croak()&lt;/code&gt; 은 호출자의 관점에서 오류를보고하는 모듈 내에서 사용하기위한 &lt;code&gt;die()&lt;/code&gt; 의 더 나은 버전입니다 . &lt;code&gt;croak()&lt;/code&gt; , &lt;code&gt;carp()&lt;/code&gt; 및 기타 유용한 루틴에 대한 자세한 내용은 &lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt; 를 참조하십시오 .)</target>
        </trans-unit>
        <trans-unit id="f6b8a9015ad51073a532bf2517dde18f5bf47fd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;croak&lt;/code&gt; s on error.</source>
          <target state="translated">&lt;code&gt;croak&lt;/code&gt; 오류가 발생 했을 때 크로 킹 이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="043b01e1b87e6d38097e84b5fabb99178f74e5c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;croak&lt;/code&gt;s on error.</source>
          <target state="translated">&lt;code&gt;croak&lt;/code&gt; 오류에 대한 scroak .</target>
        </trans-unit>
        <trans-unit id="36abc39484041a3f0447981e6bf653e5088681e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cuserid&lt;/code&gt; [POSIX.1-1988]</source>
          <target state="translated">&lt;code&gt;cuserid&lt;/code&gt; [POSIX.1-1988]</target>
        </trans-unit>
        <trans-unit id="3f481b6f09b03efdc76158927658d21de33362c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cygserver&lt;/code&gt; (&lt;code&gt;use IPC::SysV&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;cygserver&lt;/code&gt; (&lt;code&gt;use IPC::SysV&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="d0dde23af6c8093917aed5e9b5c89f44d6c944ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dMY_CXT&lt;/code&gt; may be quite expensive to calculate, and to avoid the overhead of invoking it in each function it is possible to pass the declaration onto other functions using the &lt;code&gt;aMY_CXT&lt;/code&gt; /&lt;code&gt;pMY_CXT&lt;/code&gt; macros, eg</source>
          <target state="translated">&lt;code&gt;dMY_CXT&lt;/code&gt; 는 계산하는 데 상당히 비쌀 수 있으며 각 함수에서 호출하는 오버 헤드를 피하기 위해 &lt;code&gt;aMY_CXT&lt;/code&gt; / &lt;code&gt;pMY_CXT&lt;/code&gt; 매크로를 사용하여 선언을 다른 함수로 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e4a63dc7a30dddaaa715074fdef2d6ceba7f15ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dMY_CXT&lt;/code&gt; may be quite expensive to calculate, and to avoid the overhead of invoking it in each function it is possible to pass the declaration onto other functions using the &lt;code&gt;aMY_CXT&lt;/code&gt;/&lt;code&gt;pMY_CXT&lt;/code&gt; macros, eg</source>
          <target state="translated">&lt;code&gt;dMY_CXT&lt;/code&gt; 는 계산하는 데 상당히 비쌀 수 있으며 각 함수에서 호출하는 오버 헤드를 피하기 위해 &lt;code&gt;aMY_CXT&lt;/code&gt; / &lt;code&gt;pMY_CXT&lt;/code&gt; 매크로를 사용하여 선언을 다른 함수에 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4109496804f1ccff0cccb7a3ca87fce4ed59e63f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dTHR&lt;/code&gt; was introduced in perl 5.005 to support the older thread model. The older thread model now uses the &lt;code&gt;THX&lt;/code&gt; mechanism to pass context pointers around, so &lt;code&gt;dTHR&lt;/code&gt; is not useful any more. Perl 5.6.0 and later still have it for backward source compatibility, but it is defined to be a no-op.</source>
          <target state="translated">&lt;code&gt;dTHR&lt;/code&gt; 은 이전 스레드 모델을 지원하기 위해 perl 5.005에 도입되었습니다. 이전 스레드 모델은 &lt;code&gt;THX&lt;/code&gt; 메커니즘을 사용하여 컨텍스트 포인터를 전달하므로 &lt;code&gt;dTHR&lt;/code&gt; 은 더 이상 유용하지 않습니다. Perl 5.6.0 이상에서는 여전히 이전 버전과의 호환성을 위해 제공되지만 no-op로 정의되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="184b83c9bdd4160a6f19f8a87fdd37ff4439be00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data_callback&lt;/code&gt; &amp;mdash; A code reference that will be called for each chunks of the response body received.</source>
          <target state="translated">&lt;code&gt;data_callback&lt;/code&gt; &amp;mdash; 수신 된 응답 본문의 각 청크에 대해 호출 될 코드 참조입니다.</target>
        </trans-unit>
        <trans-unit id="29ceaf96a959f0ab255fc37f7042654f8b20ff9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;decode&lt;/code&gt; will not be affected in any way.</source>
          <target state="translated">&lt;code&gt;decode&lt;/code&gt; 은 어떤 식 으로든 영향을받지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ead45fe5123d73507a0666226aa4b62056b56233" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default&lt;/code&gt; behaves exactly like &lt;code&gt;when(1 == 1)&lt;/code&gt; , which is to say that it always matches.</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; 는 &lt;code&gt;when(1 == 1)&lt;/code&gt; 과 똑같이 동작합니다 . 즉, 항상 일치한다고합니다.</target>
        </trans-unit>
        <trans-unit id="a06f18d30284f6d44f03247eaa672884455fdd2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default&lt;/code&gt; behaves exactly like &lt;code&gt;when(1 == 1)&lt;/code&gt;, which is to say that it always matches.</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; 는 &lt;code&gt;when(1 == 1)&lt;/code&gt; 과 똑같이 동작합니다 . 즉, 항상 일치합니다.</target>
        </trans-unit>
        <trans-unit id="ad68f7d290433009d56d45688f048a290bc76143" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default_headers&lt;/code&gt; &amp;mdash; A hashref of default headers to apply to requests</source>
          <target state="translated">&lt;code&gt;default_headers&lt;/code&gt; &amp;mdash; 요청에 적용 할 기본 헤더의 해시 참조</target>
        </trans-unit>
        <trans-unit id="4e4008378ece0030f25890322578641b9c803138" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defer&lt;/code&gt; , &lt;code&gt;flush&lt;/code&gt; , &lt;code&gt;discard&lt;/code&gt; , and &lt;code&gt;autodefer&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;defer&lt;/code&gt; , &lt;code&gt;flush&lt;/code&gt; , &lt;code&gt;discard&lt;/code&gt; 및 &lt;code&gt;autodefer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d1c2104168e369e8fabf33105315025902f2e03c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defer&lt;/code&gt;, &lt;code&gt;flush&lt;/code&gt;, &lt;code&gt;discard&lt;/code&gt;, and &lt;code&gt;autodefer&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;defer&lt;/code&gt; , &lt;code&gt;flush&lt;/code&gt; , &lt;code&gt;discard&lt;/code&gt; 및 &lt;code&gt;autodefer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="84b466c384022ad6a6c0ee4613433ddf76214dd5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deflate&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;deflate&lt;/code&gt; 에는 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 매개 변수가 두 개 이상 있어야 합니다.</target>
        </trans-unit>
        <trans-unit id="ceceb616a766b6f9d05c9cf3776a9455b1010d42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deflate&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;deflate&lt;/code&gt; 는 두 개 이상의 매개 변수, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 와 0 개 이상의 선택적 매개 변수를 예상합니다 ( &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;선택적 매개 변수&quot;&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="1dbe4b40b78522ef59ec6c73489a586461d9b98e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;del_count&lt;/code&gt; is the number of nodes to delete. If zero, no nodes are deleted. If -1 or greater than or equal to the number of remaining kids, all remaining kids are deleted.</source>
          <target state="translated">&lt;code&gt;del_count&lt;/code&gt; 는 삭제할 노드 수입니다. 0이면 노드가 삭제되지 않습니다. -1 또는 남은 자녀 수보다 크거나 같으면 나머지 자녀가 모두 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="557a8972e18c8311f342ad928d9daccc79114ada" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;detach()&lt;/code&gt; can also be called as a class method to allow a thread to detach itself:</source>
          <target state="translated">&lt;code&gt;detach()&lt;/code&gt; 를 클래스 메소드로 호출하여 스레드가 자체적으로 분리되도록 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="666fcacf663b1020377f259716313e99a0eb4f48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;detach&lt;/code&gt; tells a thread that it is never going to be joined i.e. that all traces of its existence can be removed once it stops running. Errors in detached threads will not be visible anywhere - if you want to catch them, you should use $SIG{__DIE__} or something like that.</source>
          <target state="translated">&lt;code&gt;detach&lt;/code&gt; 는 스레드에게 절대 결합되지 않을 것임을 알려줍니다. 즉, 실행이 중지되면 존재하는 모든 흔적을 제거 할 수 있습니다. 분리 된 스레드의 오류는 어디에도 표시되지 않습니다. 잡으려면 $ SIG {__ DIE__} 또는 이와 유사한 것을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="ed21b3a7df5531dd2a26c649db73afbe33d707ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;detail()&lt;/code&gt; is an alias to the &lt;code&gt;details&lt;/code&gt; facet field for backwards compatibility.</source>
          <target state="translated">&lt;code&gt;detail()&lt;/code&gt; 은 이전 버전과의 호환성을 위해 &lt;code&gt;details&lt;/code&gt; 패싯 필드 의 별칭 입니다.</target>
        </trans-unit>
        <trans-unit id="63c706946d64e27cf97e29790209d2503e94a440" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;die&lt;/code&gt; will force the native VMS exit status to be an SS$_ABORT code if neither of the $! or $? status values are ones that would cause the native status to be interpreted as being what VMS classifies as SEVERE_ERROR severity for DCL error handling.</source>
          <target state="translated">&lt;code&gt;die&lt;/code&gt; 는 $! 둘 다없는 경우 기본 VMS 종료 상태가 SS $ _ABORT 코드가되도록 강제합니다. 또는 $? 상태 값은 기본 상태를 VMS가 DCL 오류 처리를 위해 SEVERE_ERROR 심각도로 분류하는 것으로 해석되도록하는 값입니다.</target>
        </trans-unit>
        <trans-unit id="661b85004cec88114e1166343b36ceb5260be457" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;do './stat.pl'&lt;/code&gt; is largely like</source>
          <target state="translated">&lt;code&gt;do './stat.pl'&lt;/code&gt; 은 대체로 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="28deeed6e04a81a7b1b3d5f9280331de50a5fa35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;do BLOCK&lt;/code&gt; does</source>
          <target state="translated">&lt;code&gt;do BLOCK&lt;/code&gt; 은</target>
        </trans-unit>
        <trans-unit id="d15b8c42099321a9dbc082b929829cf8884cb2c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;done_testing()&lt;/code&gt; is, in effect, used when you'd want to use &lt;code&gt;no_plan&lt;/code&gt; , but safer. You'd use it like so:</source>
          <target state="translated">&lt;code&gt;done_testing()&lt;/code&gt; 은 실제로 &lt;code&gt;no_plan&lt;/code&gt; 을 사용 하고 싶지만 더 안전 할 때 사용됩니다 . 다음과 같이 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="93aecb7cbc419e0b6c443a22d048d6c94926bc80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;done_testing()&lt;/code&gt; is, in effect, used when you'd want to use &lt;code&gt;no_plan&lt;/code&gt;, but safer. You'd use it like so:</source>
          <target state="translated">&lt;code&gt;done_testing()&lt;/code&gt; 은 실제로 &lt;code&gt;no_plan&lt;/code&gt; 을 사용하고 싶을 때 사용 되지만 더 안전합니다. 다음과 같이 사용합니다.</target>
        </trans-unit>
        <trans-unit id="96ac2e7a1323e3e95635e4b26ab827cf6f59afef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dprofpp&lt;/code&gt; will produce some quite detailed reporting on the activity of the &lt;code&gt;wordmatch&lt;/code&gt; program. The wallclock, user and system, times are at the top of the analysis, and after this are the main columns defining which define the report. Check the &lt;code&gt;dprofpp&lt;/code&gt; docs for details of the many options it supports.</source>
          <target state="translated">&lt;code&gt;dprofpp&lt;/code&gt; 는 &lt;code&gt;wordmatch&lt;/code&gt; 프로그램 의 활동에 대한 매우 상세한 보고서를 작성 합니다. 벽시계, 사용자 및 시스템 시간은 분석의 최상위에 있으며, 그 후 보고서를 정의하는 기본 열이 정의됩니다. 지원하는 많은 옵션에 대한 자세한 내용은 &lt;code&gt;dprofpp&lt;/code&gt; 문서를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="698546fdd428508dc98fcd9f8400a97d365533e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;encode_language_tag&lt;/code&gt; returns undef if given anything other than a formally valid language tag.</source>
          <target state="translated">&lt;code&gt;encode_language_tag&lt;/code&gt; 는 공식적으로 유효한 언어 태그 이외의 다른 것이 제공되면 undef를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4644e1dff58efff563e5617be7b3a2a308bb228b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;encoding&lt;/code&gt; is assumed to be an &lt;code&gt;Encode&lt;/code&gt; object, on entry the PV of &lt;code&gt;sv&lt;/code&gt; is assumed to be octets in that encoding, and &lt;code&gt;sv&lt;/code&gt; will be converted into Unicode (and UTF-8).</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; 은 &lt;code&gt;Encode&lt;/code&gt; 객체 로 간주되며 , 입력시 &lt;code&gt;sv&lt;/code&gt; 의 PV는 해당 인코딩에서 옥텟으로 간주되며 &lt;code&gt;sv&lt;/code&gt; 는 유니 코드 (및 UTF-8)로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="1e8d497bcf36f684076d940db11c02fdb241dc56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;encoding&lt;/code&gt; is assumed to be an &lt;code&gt;Encode&lt;/code&gt; object, the PV of &lt;code&gt;ssv&lt;/code&gt; is assumed to be octets in that encoding and decoding the input starts from the position which &lt;code&gt;(PV + *offset)&lt;/code&gt; pointed to. &lt;code&gt;dsv&lt;/code&gt; will be concatenated with the decoded UTF-8 string from &lt;code&gt;ssv&lt;/code&gt;. Decoding will terminate when the string &lt;code&gt;tstr&lt;/code&gt; appears in decoding output or the input ends on the PV of &lt;code&gt;ssv&lt;/code&gt;. The value which &lt;code&gt;offset&lt;/code&gt; points will be modified to the last input position on &lt;code&gt;ssv&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; 은 &lt;code&gt;Encode&lt;/code&gt; 객체 로 가정하고 &lt;code&gt;ssv&lt;/code&gt; 의 PV는 &lt;code&gt;(PV + *offset)&lt;/code&gt; 가리키는 위치에서 입력 인코딩 및 디코딩이 시작된다는 점에서 옥텟으로 가정 합니다. &lt;code&gt;dsv&lt;/code&gt; 는 &lt;code&gt;ssv&lt;/code&gt; 에서 디코딩 된 UTF-8 문자열과 연결됩니다 . 디코딩 출력에 &lt;code&gt;tstr&lt;/code&gt; 문자열이 나타나거나 입력이 &lt;code&gt;ssv&lt;/code&gt; 의 PV에서 종료되면 디코딩이 종료됩니다 . &lt;code&gt;offset&lt;/code&gt; 포인트가 &lt;code&gt;ssv&lt;/code&gt; 의 마지막 입력 위치로 수정 될 값입니다 .</target>
        </trans-unit>
        <trans-unit id="51fbe3f0825cfe73fe04528e4db975b00a52f6e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enter&lt;/code&gt; and &lt;code&gt;leave&lt;/code&gt; are scoping ops, and their job is to perform any housekeeping every time you enter and leave a block: lexical variables are tidied up, unreferenced variables are destroyed, and so on. Every program will have those first three lines: &lt;code&gt;leave&lt;/code&gt; is a list, and its children are all the statements in the block. Statements are delimited by &lt;code&gt;nextstate&lt;/code&gt; , so a block is a collection of &lt;code&gt;nextstate&lt;/code&gt; ops, with the ops to be performed for each statement being the children of &lt;code&gt;nextstate&lt;/code&gt; . &lt;code&gt;enter&lt;/code&gt; is a single op which functions as a marker.</source>
          <target state="translated">&lt;code&gt;enter&lt;/code&gt; 및 &lt;code&gt;leave&lt;/code&gt; 범위 지정 작전, 그리고 그들의 직업은 어떤 가사를 입력 할 때마다 수행하고 블록을두고하는 것입니다 : 어휘 변수가 정돈되어, 참조되지 않은 변수는 파괴된다, 등등. 모든 프로그램에는 처음 세 줄이 있습니다. &lt;code&gt;leave&lt;/code&gt; 는 목록이며 그 자식은 모두 블록에있는 설명입니다. 명령문은 &lt;code&gt;nextstate&lt;/code&gt; 에 의해 구분 되므로 블록은 &lt;code&gt;nextstate&lt;/code&gt; ops 의 모음이며 각 명령문에 대해 ops가 &lt;code&gt;nextstate&lt;/code&gt; 의 하위 항목으로 수행 됩니다. &lt;code&gt;enter&lt;/code&gt; 는 마커로 기능하는 단일 op입니다.</target>
        </trans-unit>
        <trans-unit id="e62a268f7e0b4e07691bd53126566c52f96fd283" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enter&lt;/code&gt; and &lt;code&gt;leave&lt;/code&gt; are scoping ops, and their job is to perform any housekeeping every time you enter and leave a block: lexical variables are tidied up, unreferenced variables are destroyed, and so on. Every program will have those first three lines: &lt;code&gt;leave&lt;/code&gt; is a list, and its children are all the statements in the block. Statements are delimited by &lt;code&gt;nextstate&lt;/code&gt;, so a block is a collection of &lt;code&gt;nextstate&lt;/code&gt; ops, with the ops to be performed for each statement being the children of &lt;code&gt;nextstate&lt;/code&gt;. &lt;code&gt;enter&lt;/code&gt; is a single op which functions as a marker.</source>
          <target state="translated">&lt;code&gt;enter&lt;/code&gt; 및 &lt;code&gt;leave&lt;/code&gt; 는 범위 지정 작업이며 블록에 들어오고 나갈 때마다 모든 하우스 키핑을 수행하는 역할을합니다. 어휘 변수는 정리되고 참조되지 않은 변수는 파괴됩니다. 모든 프로그램에는 처음 세 줄이 있습니다. &lt;code&gt;leave&lt;/code&gt; 는 목록이고 자식은 블록의 모든 명령문입니다. 문은 &lt;code&gt;nextstate&lt;/code&gt; 로 구분 되므로 블록은 &lt;code&gt;nextstate&lt;/code&gt; 작업 의 모음이며 각 문에 대해 수행되는 작업은 &lt;code&gt;nextstate&lt;/code&gt; 의 자식입니다 . &lt;code&gt;enter&lt;/code&gt; 는 마커 역할을하는 단일 작업입니다.</target>
        </trans-unit>
        <trans-unit id="648391c4210cab349da16e1ff376040829af58eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;env&lt;/code&gt; specifies a set of environment variables that will be used by this Perl interpreter. If non-null, it must point to a null-terminated array of environment strings. If null, the Perl interpreter will use the environment supplied by the &lt;code&gt;environ&lt;/code&gt; global variable.</source>
          <target state="translated">&lt;code&gt;env&lt;/code&gt; 는이 Perl 인터프리터가 사용할 환경 변수 세트를 지정합니다. null이 아닌 경우 null로 끝나는 환경 문자열 배열을 가리켜 야합니다. null이면 Perl 인터프리터는 &lt;code&gt;environ&lt;/code&gt; 전역 변수가 제공하는 환경을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="66996551ac21df55b2bc452ee7dc1f32731364d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;equal&lt;/code&gt; tests whether two thread objects represent the same thread and returns true if they do.</source>
          <target state="translated">&lt;code&gt;equal&lt;/code&gt; 은 두 개의 스레드 객체가 동일한 스레드를 나타내는 지 테스트하고 그렇지 않은 경우 true를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e24b23b819e56dad7d90e5a9ceb7af6412558ab6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval BLOCK&lt;/code&gt; does</source>
          <target state="translated">&lt;code&gt;eval BLOCK&lt;/code&gt; 은</target>
        </trans-unit>
        <trans-unit id="1e984f3706aa5038760690eeba859e2db477c4f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval&lt;/code&gt; in all its forms is used to execute a little Perl program, trapping any errors encountered so they don't crash the calling program.</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; 모든 형태의 eval 은 약간의 Perl 프로그램을 실행하는 데 사용되며, 발생한 오류를 포착하여 호출 프로그램이 충돌하지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="1dadf8642958e7d1245426d45e425e26d43b8550" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval&lt;/code&gt;ed strings (when accessible) are considered to be filenames: &lt;code&gt;f (eval 7)&lt;/code&gt; and &lt;code&gt;f eval 7\b&lt;/code&gt; access the body of the 7th &lt;code&gt;eval&lt;/code&gt;ed string (in the order of execution). The bodies of the currently executed &lt;code&gt;eval&lt;/code&gt; and of &lt;code&gt;eval&lt;/code&gt;ed strings that define subroutines are saved and thus accessible.</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; 문자열 (액세스 할 수있는 경우)은 파일 이름으로 간주됩니다. &lt;code&gt;f (eval 7)&lt;/code&gt; 및 &lt;code&gt;f eval 7\b&lt;/code&gt; 는 7 번째 &lt;code&gt;eval&lt;/code&gt; 문자열 의 본문 (실행 순서대로)에 액세스합니다. 현재 실행의 기관 &lt;code&gt;eval&lt;/code&gt; 및 &lt;code&gt;eval&lt;/code&gt; 서브 루틴을 정의 에드 문자열이 저장되고, 따라서 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0256dbe29caeaa86a1eb795ffc2729a2a5b7219f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval&lt;/code&gt;ed strings are compiled in the package in which the eval() was compiled. (Assignments to &lt;code&gt;$SIG{}&lt;/code&gt;, however, assume the signal handler specified is in the &lt;code&gt;main&lt;/code&gt; package. Qualify the signal handler name if you wish to have a signal handler in a package.) For an example, examine</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; ed 문자열은 eval ()이 컴파일 된 패키지에서 컴파일됩니다. ( &lt;code&gt;$SIG{}&lt;/code&gt; 할당 은 지정된 신호 처리기가 &lt;code&gt;main&lt;/code&gt; 패키지 에 있다고 가정합니다 . 패키지에 신호 처리기를 포함하려면 신호 처리기 이름을 한정하십시오.) 예를 들어, 다음을 검토하십시오.</target>
        </trans-unit>
        <trans-unit id="e4d705110bcea9e4e4300cef1535c4cf468db00f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval_pv&lt;/code&gt; is used to compile the anonymous subroutine, which will be the return value as well (read more about &lt;code&gt;eval_pv&lt;/code&gt; in &lt;a href=&quot;perlapi#eval_pv&quot;&gt;&quot;eval_pv&quot; in perlapi&lt;/a&gt;). Once this code reference is in hand, it can be mixed in with all the previous examples we've shown.</source>
          <target state="translated">&lt;code&gt;eval_pv&lt;/code&gt; 는 반환 값이 될 익명 서브 루틴을 컴파일하는 데 사용됩니다 ( &lt;code&gt;eval_pv&lt;/code&gt; 의 &lt;a href=&quot;perlapi#eval_pv&quot;&gt;&quot;eval_pv&quot;에서 eval_pv&lt;/a&gt; 에 대해 자세히 읽어보십시오 ). 이 코드 참조가 준비되면 이전에 보여 드린 모든 예제와 혼합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dce2d19eb1b9a11a41c8b0d6eda83832900f64ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval_pv&lt;/code&gt; is used to compile the anonymous subroutine, which will be the return value as well (read more about &lt;code&gt;eval_pv&lt;/code&gt; in &lt;a href=&quot;perlapi#eval_pv&quot;&gt;eval_pv in perlapi&lt;/a&gt;). Once this code reference is in hand, it can be mixed in with all the previous examples we've shown.</source>
          <target state="translated">&lt;code&gt;eval_pv&lt;/code&gt; 는 익명 서브 루틴을 컴파일하는 데 사용되며, 이는 리턴 값이기도합니다 ( &lt;code&gt;eval_pv&lt;/code&gt; 에서 &lt;a href=&quot;perlapi#eval_pv&quot;&gt;eval_pv에&lt;/a&gt; 대해 자세히 알아 보십시오 ). 이 코드 참조가 준비되면 이전에 보여준 모든 예제와 혼합 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c51683fd64ab48d3812924b1c50b14489246e459" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;evalbytes&lt;/code&gt; is like string &lt;code&gt;eval&lt;/code&gt;, but operating on a byte stream that is not UTF-8 encoded. Details are at &lt;a href=&quot;perlfunc#evalbytes-EXPR&quot;&gt;&quot;evalbytes EXPR&quot; in perlfunc&lt;/a&gt;. Without a &lt;code&gt;use feature 'evalbytes'&lt;/code&gt; nor a &lt;code&gt;use v5.16&lt;/code&gt; (or higher) declaration in the current scope, you can still access it by instead writing &lt;code&gt;CORE::evalbytes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;evalbytes&lt;/code&gt; 는 &lt;code&gt;eval&lt;/code&gt; 문자열과 비슷 하지만 UTF-8로 인코딩되지 않은 바이트 스트림에서 작동합니다. 자세한 내용은 &lt;a href=&quot;perlfunc#evalbytes-EXPR&quot;&gt;perlfunc의 &quot;evalbytes EXPR&quot;에&lt;/a&gt; 있습니다. 없이 &lt;code&gt;use feature 'evalbytes'&lt;/code&gt; 도 아니고 &lt;code&gt;use v5.16&lt;/code&gt; 현재 범위에서 (또는 그 이상) 선언, 당신은 여전히 대신 작성하여 액세스 할 수 있습니다 &lt;code&gt;CORE::evalbytes&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="179018de7994d8b6f7b55507310a9615bad0e417" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expect: &amp;lt;array&amp;gt;&lt;/code&gt; is a short notation for this &lt;code&gt;eexpect&lt;/code&gt; :</source>
          <target state="translated">&lt;code&gt;expect: &amp;lt;array&amp;gt;&lt;/code&gt; 본 대한 짧은 표기법 &lt;code&gt;eexpect&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="74b965e6bf6e28d59b48d2bde20f57fce49e6c34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extensions&lt;/code&gt; (optional)</source>
          <target state="translated">&lt;code&gt;extensions&lt;/code&gt; (선택 사항)</target>
        </trans-unit>
        <trans-unit id="deecc348c11dde7ab1e03c51382e2279d9a03d0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extproc&lt;/code&gt; on the first line</source>
          <target state="translated">&lt;code&gt;extproc&lt;/code&gt; 첫 번째 줄의 extproc</target>
        </trans-unit>
        <trans-unit id="19dbee10355caceed0f77948f5b13c6093e8c93f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_archive&lt;/code&gt; will return a list of files it extracted. If the archive extraction fails for any reason, &lt;code&gt;extract_archive&lt;/code&gt; will return false. Please use the &lt;code&gt;error&lt;/code&gt; method to find the cause of the failure.</source>
          <target state="translated">&lt;code&gt;extract_archive&lt;/code&gt; 는 추출한 파일 목록을 반환합니다. 어떤 이유로 든 아카이브 추출에 실패하면 &lt;code&gt;extract_archive&lt;/code&gt; 는 false를 리턴합니다. &lt;code&gt;error&lt;/code&gt; 의 원인을 찾으 려면 오류 방법을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="ca87326018240d68425ad1527419ad3fb2334b21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_bracketed&lt;/code&gt; , &lt;code&gt;extract_quotelike&lt;/code&gt; or &lt;code&gt;extract_codeblock&lt;/code&gt; encountered a closing bracket where none was expected.</source>
          <target state="translated">&lt;code&gt;extract_bracketed&lt;/code&gt; , &lt;code&gt;extract_quotelike&lt;/code&gt; 또는 &lt;code&gt;extract_codeblock&lt;/code&gt; 에 예상치 않은 닫는 괄호가 있습니다.</target>
        </trans-unit>
        <trans-unit id="72a77e28ef0d2e144274c8fbd24790f3d60b8b70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_bracketed&lt;/code&gt; , &lt;code&gt;extract_quotelike&lt;/code&gt; or &lt;code&gt;extract_codeblock&lt;/code&gt; found a valid bracket delimiter, but it was the wrong species. This usually indicates a nesting error, but may indicate incorrect quoting or escaping.</source>
          <target state="translated">&lt;code&gt;extract_bracketed&lt;/code&gt; , &lt;code&gt;extract_quotelike&lt;/code&gt; 또는 &lt;code&gt;extract_codeblock&lt;/code&gt; 은 유효한 대괄호 구분 기호를 찾았지만 잘못된 종입니다. 일반적으로 중첩 오류를 나타내지 만 잘못된 인용 또는 이스케이프를 나타낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f1c61a56ae758be3198ca7d3e691e7f13c95604c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_bracketed&lt;/code&gt; , &lt;code&gt;extract_quotelike&lt;/code&gt; or &lt;code&gt;extract_codeblock&lt;/code&gt; ran out of characters in the text before closing one or more levels of nested brackets.</source>
          <target state="translated">&lt;code&gt;extract_bracketed&lt;/code&gt; , &lt;code&gt;extract_quotelike&lt;/code&gt; 또는 &lt;code&gt;extract_codeblock&lt;/code&gt; 은 하나 이상의 중첩 괄호를 닫기 전에 텍스트에 문자가 부족합니다.</target>
        </trans-unit>
        <trans-unit id="bfcf9f5f74cb5d8d60170baf76820bbca368d16b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_bracketed&lt;/code&gt; attempted to match an embedded quoted substring, but failed to find a closing quote to match it.</source>
          <target state="translated">&lt;code&gt;extract_bracketed&lt;/code&gt; 가 포함 된 인용 부분 문자열과 일치 시키려고했으나 종료 인용 부분을 찾지 못했습니다.</target>
        </trans-unit>
        <trans-unit id="bfae41ac82a57d25a5fa6795b1393b8584c13411" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_bracketed&lt;/code&gt; extracts a balanced-bracket-delimited substring (using any one (or more) of the user-specified delimiter brackets: '(..)', '{..}', '[..]', or '&amp;lt;..&amp;gt;'). Optionally it will also respect quoted unbalanced brackets (see below).</source>
          <target state="translated">&lt;code&gt;extract_bracketed&lt;/code&gt; 는 사용자 지정 구분 기호 괄호 ( '(..)', '{..}', '[..]'또는 '&amp;lt;중 하나 이상을 사용하여 균형 대괄호로 구분 된 하위 문자열을 추출합니다. .&amp;gt; '). 선택적으로 인용 된 불균형 괄호도 준수합니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="833ede635970a6e5a4797a94bd40b236c96804f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_bracketed&lt;/code&gt; or &lt;code&gt;extract_codeblock&lt;/code&gt; was expecting a particular kind of bracket at the start of the text, and didn't find it.</source>
          <target state="translated">&lt;code&gt;extract_bracketed&lt;/code&gt; 또는 &lt;code&gt;extract_codeblock&lt;/code&gt; 은 텍스트의 시작 부분에서 특정 종류의 대괄호를 예상했지만 찾지 못했습니다.</target>
        </trans-unit>
        <trans-unit id="4a45731bb5aa248616cdb9fafdf56e8d940bf269" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_bracketed&lt;/code&gt;, &lt;code&gt;extract_quotelike&lt;/code&gt; or &lt;code&gt;extract_codeblock&lt;/code&gt; encountered a closing bracket where none was expected.</source>
          <target state="translated">&lt;code&gt;extract_bracketed&lt;/code&gt; , &lt;code&gt;extract_quotelike&lt;/code&gt; 또는 &lt;code&gt;extract_codeblock&lt;/code&gt; 에서 예상되는 닫는 대괄호가 발견되었습니다.</target>
        </trans-unit>
        <trans-unit id="74d590e5fca928736e4fae37f9e6f0f84bdee1c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_bracketed&lt;/code&gt;, &lt;code&gt;extract_quotelike&lt;/code&gt; or &lt;code&gt;extract_codeblock&lt;/code&gt; found a valid bracket delimiter, but it was the wrong species. This usually indicates a nesting error, but may indicate incorrect quoting or escaping.</source>
          <target state="translated">&lt;code&gt;extract_bracketed&lt;/code&gt; , &lt;code&gt;extract_quotelike&lt;/code&gt; 또는 &lt;code&gt;extract_codeblock&lt;/code&gt; 은 유효한 대괄호 구분 기호를 찾았지만 잘못된 종이었습니다. 이는 일반적으로 중첩 오류를 나타내지 만 잘못된 인용 또는 이스케이프를 나타낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ddee3801248709ac16da6636768868acf2620266" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_bracketed&lt;/code&gt;, &lt;code&gt;extract_quotelike&lt;/code&gt; or &lt;code&gt;extract_codeblock&lt;/code&gt; ran out of characters in the text before closing one or more levels of nested brackets.</source>
          <target state="translated">&lt;code&gt;extract_bracketed&lt;/code&gt; , &lt;code&gt;extract_quotelike&lt;/code&gt; 또는 &lt;code&gt;extract_codeblock&lt;/code&gt; 은 하나 이상의 중첩 된 대괄호 수준을 닫기 전에 텍스트의 문자가 부족했습니다.</target>
        </trans-unit>
        <trans-unit id="36f0769606e5c4df36d78fd7ab228e7c6b52a6d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_codeblock&lt;/code&gt; attempts to recognize and extract a balanced bracket delimited substring that may contain unbalanced brackets inside Perl quotes or quotelike operations. That is, &lt;code&gt;extract_codeblock&lt;/code&gt; is like a combination of &lt;code&gt;&quot;extract_bracketed&quot;&lt;/code&gt; and &lt;code&gt;&quot;extract_quotelike&quot;&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;extract_codeblock&lt;/code&gt; 은 Perl 따옴표 또는 따옴표와 같은 연산 내에 불균형 괄호를 포함 할 수있는 균형 괄호로 구분 된 하위 문자열을 인식하고 추출하려고 시도합니다. 즉, &lt;code&gt;extract_codeblock&lt;/code&gt; 은 &lt;code&gt;&quot;extract_bracketed&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;extract_quotelike&quot;&lt;/code&gt; 의 조합과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="4da43577dc402673868ed17831e422f8eccde828" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_codeblock&lt;/code&gt; attempts to recognize and extract a balanced bracket delimited substring that may contain unbalanced brackets inside Perl quotes or quotelike operations. That is, &lt;code&gt;extract_codeblock&lt;/code&gt; is like a combination of &lt;code&gt;&quot;extract_bracketed&quot;&lt;/code&gt; and &lt;code&gt;&quot;extract_quotelike&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;extract_codeblock&lt;/code&gt; 은 Perl 따옴표 또는 따옴표와 유사한 연산 내에 불균형 대괄호가 포함될 수있는 균형 대괄호로 구분 된 부분 문자열을 인식하고 추출하려고 시도합니다. 즉, &lt;code&gt;extract_codeblock&lt;/code&gt; 은 &lt;code&gt;&quot;extract_bracketed&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;extract_quotelike&quot;&lt;/code&gt; 의 조합과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="694f659fbf30e806d0fa08eafebb27223e5e1129" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_codeblock&lt;/code&gt; failed to find a closing bracket to match the outermost opening bracket.</source>
          <target state="translated">&lt;code&gt;extract_codeblock&lt;/code&gt; 이 가장 바깥 쪽 여는 브래킷과 일치하는 닫는 브래킷을 찾지 못했습니다.</target>
        </trans-unit>
        <trans-unit id="2f9d1a3929e3f32a4e394299c676fec1e2f105c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_codeblock&lt;/code&gt; failed to find any of the outermost opening brackets that were specified.</source>
          <target state="translated">&lt;code&gt;extract_codeblock&lt;/code&gt; 이 지정된 가장 바깥 쪽 여는 괄호를 찾지 못했습니다.</target>
        </trans-unit>
        <trans-unit id="8bdacc14c0fedd54fcae38c1a59283dd12b5836e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_codeblock&lt;/code&gt; or &lt;code&gt;extract_quotelike&lt;/code&gt; found one of the quotelike operators &lt;code&gt;&lt;a href=&quot;../functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt; followed by only one block.</source>
          <target state="translated">&lt;code&gt;extract_codeblock&lt;/code&gt; 또는 &lt;code&gt;extract_quotelike&lt;/code&gt; 는 따옴표와 같은 연산자 &lt;code&gt;&lt;a href=&quot;../functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt; 중 하나 와 그 뒤에 하나의 블록 만 발견했습니다.</target>
        </trans-unit>
        <trans-unit id="f6a92eacd39bc7f787944a3b9917dfa9f9b5ec41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_codeblock&lt;/code&gt; or &lt;code&gt;extract_quotelike&lt;/code&gt; found one of the quotelike operators &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;tr&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; followed by only one block.</source>
          <target state="translated">&lt;code&gt;extract_codeblock&lt;/code&gt; 또는 &lt;code&gt;extract_quotelike&lt;/code&gt; 는 quotelike 연산자 &lt;code&gt;s&lt;/code&gt; , &lt;code&gt;tr&lt;/code&gt; 또는 &lt;code&gt;y&lt;/code&gt; 중 하나 다음에 하나의 블록 만 있는 것을 발견했습니다 .</target>
        </trans-unit>
        <trans-unit id="2826adf3635e5637db1b98091d6fce40bd4513f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_codeblock&lt;/code&gt; takes the same initial three parameters as &lt;code&gt;extract_bracketed&lt;/code&gt; : a text to process, a set of delimiter brackets to look for, and a prefix to match first. It also takes an optional fourth parameter, which allows the outermost delimiter brackets to be specified separately (see below).</source>
          <target state="translated">&lt;code&gt;extract_codeblock&lt;/code&gt; 는 같은 초기 세 개의 매개 변수를 취 &lt;code&gt;extract_bracketed&lt;/code&gt; 을 찾기 위해 프로세스에 텍스트, 단락 브래킷 세트를, 그리고 접두사 먼저 일치 :. 또한 선택적으로 네 번째 매개 변수를 사용하므로 가장 바깥 쪽 구분 기호를 별도로 지정할 수 있습니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="f5cda6d68a0151b9aacc663e55ec28d4b940acf9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_codeblock&lt;/code&gt; takes the same initial three parameters as &lt;code&gt;extract_bracketed&lt;/code&gt;: a text to process, a set of delimiter brackets to look for, and a prefix to match first. It also takes an optional fourth parameter, which allows the outermost delimiter brackets to be specified separately (see below).</source>
          <target state="translated">&lt;code&gt;extract_codeblock&lt;/code&gt; 는 같은 초기 세 개의 매개 변수를 취 &lt;code&gt;extract_bracketed&lt;/code&gt; 을 찾기 위해 프로세스에 텍스트, 단락 브래킷 세트를, 그리고 접두사 먼저 일치 :. 또한 선택적인 네 번째 매개 변수를 사용하여 가장 바깥 쪽 구분자 대괄호를 별도로 지정할 수 있습니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="da20ba6f0882f09698a1ff177d4124f0036f0383" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_delimited&lt;/code&gt; takes up to four scalars (the input text, the delimiters, a prefix pattern to be skipped, and any escape characters) and extracts the initial substring of the text that is appropriately delimited. If the delimiter string has multiple characters, the first one encountered in the text is taken to delimit the substring. The third argument specifies a prefix pattern that is to be skipped (but must be present!) before the substring is extracted. The final argument specifies the escape character to be used for each delimiter.</source>
          <target state="translated">&lt;code&gt;extract_delimited&lt;/code&gt; 는 최대 4 개의 스칼라 (입력 텍스트, 구분 기호, 건너 뛸 접두사 패턴 및 모든 이스케이프 문자)를 취해 적절하게 구분 된 텍스트의 초기 하위 문자열을 추출합니다. 구분자 문자열에 여러 문자가있는 경우 텍스트에서 처음으로 발견 된 문자열이 하위 문자열을 구분하기 위해 사용됩니다. 세 번째 인수는 부분 문자열을 추출하기 전에 건너 뛸 접두사 패턴을 지정합니다 (그러나 존재해야합니다!). 마지막 인수는 각 구분 기호에 사용될 이스케이프 문자를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="9a4b075e70a63982d5b04d16716a200671436a06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_quotelike&lt;/code&gt; and &quot;here documents&quot;</source>
          <target state="translated">&lt;code&gt;extract_quotelike&lt;/code&gt; 및 &quot;여기 문서&quot;</target>
        </trans-unit>
        <trans-unit id="5c7ff486ca0937ffab3f029877d80d0f77ca3ff8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_quotelike&lt;/code&gt; attempts to recognize, extract, and segment any one of the various Perl quotes and quotelike operators (see</source>
          <target state="translated">&lt;code&gt;extract_quotelike&lt;/code&gt; 는 다양한 Perl 따옴표 및 따옴표와 같은 연산자 중 하나를 인식, 추출 및 세그먼트 화하려고 시도합니다 (참조</target>
        </trans-unit>
        <trans-unit id="e49376bba1a57bb121a86f40bd906f99d7e393b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_quotelike&lt;/code&gt; attempts to recognize, extract, and segment any one of the various Perl quotes and quotelike operators (see &lt;a href=&quot;http://man.he.net/man3/perlop&quot;&gt;perlop(3)&lt;/a&gt;) Nested backslashed delimiters, embedded balanced bracket delimiters (for the quotelike operators), and trailing modifiers are all caught. For example, in:</source>
          <target state="translated">&lt;code&gt;extract_quotelike&lt;/code&gt; 는 다양한 Perl 따옴표 및 quotelike 연산자 중 하나를 인식, 추출 및 분할하려고 시도합니다 ( &lt;a href=&quot;http://man.he.net/man3/perlop&quot;&gt;perlop (3)&lt;/a&gt; 참조 ) 중첩 된 백 슬래시 구분 기호, 포함 된 균형 대괄호 구분 기호 (quotelike 연산자의 경우) 및 후행 수정자는 모두 포착됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c59ff49a4b5f6ba09b71fdea263cb8784806bf34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_quotelike&lt;/code&gt; can successfully extract &quot;here documents&quot; from an input string, but with an important caveat in list contexts.</source>
          <target state="translated">&lt;code&gt;extract_quotelike&lt;/code&gt; 는 입력 문자열에서 &quot;여기 문서&quot;를 성공적으로 추출 할 수 있지만 목록 컨텍스트에서 중요한 경고 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="eb113a6f5a0b8ca2853b562185e3dd6bf68a942d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_quotelike&lt;/code&gt; didn't find one of the quotelike operators &lt;code&gt;&lt;a href=&quot;../functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/qq&quot;&gt;qq&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/qw&quot;&gt;qw&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/qx&quot;&gt;qx&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt; at the start of the substring it was extracting.</source>
          <target state="translated">&lt;code&gt;extract_quotelike&lt;/code&gt; 가 추출중인 서브 스트링의 시작 부분에서 따옴표와 같은 연산자 &lt;code&gt;&lt;a href=&quot;../functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/qq&quot;&gt;qq&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/qw&quot;&gt;qw&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/qx&quot;&gt;qx&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt; 를 찾지 못했습니다 .</target>
        </trans-unit>
        <trans-unit id="3a30762562d768e35f6aede04f00e83c3be02aab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_quotelike&lt;/code&gt; didn't find one of the quotelike operators &lt;code&gt;q&lt;/code&gt;, &lt;code&gt;qq&lt;/code&gt;, &lt;code&gt;qw&lt;/code&gt;, &lt;code&gt;qx&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;tr&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; at the start of the substring it was extracting.</source>
          <target state="translated">&lt;code&gt;extract_quotelike&lt;/code&gt; 는 추출하는 부분 문자열의 시작 부분에서 quotelike 연산자 &lt;code&gt;q&lt;/code&gt; , &lt;code&gt;qq&lt;/code&gt; , &lt;code&gt;qw&lt;/code&gt; , &lt;code&gt;qx&lt;/code&gt; , &lt;code&gt;s&lt;/code&gt; , &lt;code&gt;tr&lt;/code&gt; 또는 &lt;code&gt;y&lt;/code&gt; 중 하나를 찾지 못했습니다 .</target>
        </trans-unit>
        <trans-unit id="639f29c8f92e2cdfb541e8edc25037e7eac4fd9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_quotelike&lt;/code&gt; or &lt;code&gt;extract_codeblock&lt;/code&gt; found one of the quotelike operators &lt;code&gt;&lt;a href=&quot;../functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/qq&quot;&gt;qq&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/qw&quot;&gt;qw&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/qx&quot;&gt;qx&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt; without a suitable block after it.</source>
          <target state="translated">&lt;code&gt;extract_quotelike&lt;/code&gt; 또는 &lt;code&gt;extract_codeblock&lt;/code&gt; 은 따옴표와 같은 연산자 &lt;code&gt;&lt;a href=&quot;../functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/qq&quot;&gt;qq&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/qw&quot;&gt;qw&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/qx&quot;&gt;qx&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt; 중 하나를 찾았 습니다.</target>
        </trans-unit>
        <trans-unit id="d7b0db775ac5b5ea6f3ac5b6f63eeb7043731821" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_quotelike&lt;/code&gt; or &lt;code&gt;extract_codeblock&lt;/code&gt; found one of the quotelike operators &lt;code&gt;q&lt;/code&gt;, &lt;code&gt;qq&lt;/code&gt;, &lt;code&gt;qw&lt;/code&gt;, &lt;code&gt;qx&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;tr&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; without a suitable block after it.</source>
          <target state="translated">&lt;code&gt;extract_quotelike&lt;/code&gt; 또는 &lt;code&gt;extract_codeblock&lt;/code&gt; 은 그 뒤에 적절한 블록이없는 따옴표 유사 연산자 &lt;code&gt;q&lt;/code&gt; , &lt;code&gt;qq&lt;/code&gt; , &lt;code&gt;qw&lt;/code&gt; , &lt;code&gt;qx&lt;/code&gt; , &lt;code&gt;s&lt;/code&gt; , &lt;code&gt;tr&lt;/code&gt; 또는 &lt;code&gt;y&lt;/code&gt; 중 하나를 찾았 습니다.</target>
        </trans-unit>
        <trans-unit id="39ce38c6b480941e81870d18e2d86b4e985230f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_quotelike&lt;/code&gt; takes two arguments: the text to be processed and a prefix to be matched at the very beginning of the text. If no prefix is specified, optional whitespace is the default. If no text is given, &lt;code&gt;$_&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;extract_quotelike&lt;/code&gt; 는 처리 할 텍스트와 텍스트의 맨 처음에 일치하는 접두사라는 두 가지 인수를 사용합니다. 접두사가 지정되지 않은 경우 선택적 공백이 기본값입니다. 텍스트가 없으면 &lt;code&gt;$_&lt;/code&gt; 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5cd291985f40d2410dcdccea5aef6741ed9a4c95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_quotelike&lt;/code&gt; was unable to find a closing delimiter to match the one that opened the quote-like operation.</source>
          <target state="translated">&lt;code&gt;extract_quotelike&lt;/code&gt; 가 따옴표와 같은 연산을 여는 것과 일치하는 닫는 구분 기호를 찾을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="ab932311516affb26a779abd90bbf158ec7ed4da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_tagged&lt;/code&gt; did not find a suitable opening tag (after any specified prefix was removed).</source>
          <target state="translated">&lt;code&gt;extract_tagged&lt;/code&gt; 가 적절한 시작 태그를 찾지 못했습니다 (지정된 접두어를 제거한 후).</target>
        </trans-unit>
        <trans-unit id="d49b4a8e3f85ed5cd73910afb7ee2c747a5c1b85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_tagged&lt;/code&gt; extracts and segments text between (balanced) specified tags.</source>
          <target state="translated">&lt;code&gt;extract_tagged&lt;/code&gt; 는 (균형) 지정된 태그 사이에서 텍스트를 추출하고 세그먼트 화합니다.</target>
        </trans-unit>
        <trans-unit id="637bdb2768eba3ece0f28cf5c91285d816ae9df3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_tagged&lt;/code&gt; found a nested opening tag that was not matched by a corresponding nested closing tag (and the failure mode was not &quot;MAX&quot; or &quot;PARA&quot;).</source>
          <target state="translated">&lt;code&gt;extract_tagged&lt;/code&gt; 는 해당 중첩 닫기 태그와 일치하지 않는 중첩 열기 태그를 찾았으며 실패 모드는 &quot;MAX&quot;또는 &quot;PARA&quot;가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="907d9c187b04ce8805d54962d6f295d6dafa82c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_tagged&lt;/code&gt; found a nested tag that appeared in the &quot;reject&quot; list (and the failure mode was not &quot;MAX&quot; or &quot;PARA&quot;).</source>
          <target state="translated">&lt;code&gt;extract_tagged&lt;/code&gt; 는 &quot;거부&quot;목록에 표시된 중첩 태그를 찾았습니다 (실패 모드는 &quot;MAX&quot;또는 &quot;PARA&quot;가 아님).</target>
        </trans-unit>
        <trans-unit id="2c6e6b22bc490e070f19db3dd2c598898377ca76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_tagged&lt;/code&gt; matched the specified opening tag and tried to modify the matched text to produce a matching closing tag (because none was specified). It failed to generate the closing tag, almost certainly because the opening tag did not start with a bracket of some kind.</source>
          <target state="translated">&lt;code&gt;extract_tagged&lt;/code&gt; 가 지정된 여는 태그와 일치하고 일치하는 텍스트를 수정하여 일치하는 닫기 태그를 생성하려고했습니다 (아무 것도 지정되지 않았기 때문). 여는 태그가 어떤 종류의 괄호로 시작하지 않았기 때문에 닫기 태그를 생성하지 못했습니다.</target>
        </trans-unit>
        <trans-unit id="618b7e2d79570afb079bf76fc8475883cfbcb511" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_tagged&lt;/code&gt; reached the end of the text without finding a closing tag to match the original opening tag (and the failure mode was not &quot;MAX&quot; or &quot;PARA&quot;).</source>
          <target state="translated">&lt;code&gt;extract_tagged&lt;/code&gt; 는 원래 시작 태그와 일치하는 닫기 태그를 찾지 않고 텍스트 끝에 도달했습니다 (실패 모드는 &quot;MAX&quot;또는 &quot;PARA&quot;가 아님).</target>
        </trans-unit>
        <trans-unit id="dc8016033fd7e7766b06e4030e83ba977c1f1697" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_variable&lt;/code&gt; extracts any valid Perl variable or variable-involved expression, including scalars, arrays, hashes, array accesses, hash look-ups, method calls through objects, subroutine calls through subroutine references, etc.</source>
          <target state="translated">&lt;code&gt;extract_variable&lt;/code&gt; 은 스칼라, 배열, 해시, 배열 액세스, 해시 조회, 오브젝트를 통한 메소드 호출, 서브 루틴 참조를 통한 서브 루틴 호출 등을 포함하여 유효한 Perl 변수 또는 변수 관련 표현식을 추출합니다.</target>
        </trans-unit>
        <trans-unit id="9b44e96da00224d0d2ec78bc381db1051d7b97be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_variable&lt;/code&gt; found a '$', '@', or '%' indicating a variable, but that character was not followed by a legal Perl identifier.</source>
          <target state="translated">&lt;code&gt;extract_variable&lt;/code&gt; 이 변수를 나타내는 '$', '@'또는 '%'를 찾았지만 해당 문자 뒤에 올바른 Perl 식별자가 없습니다.</target>
        </trans-unit>
        <trans-unit id="73dce7208a693c0dcdcc44097a9a03bc9f5f50c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_variable&lt;/code&gt; was expecting one of '$', '@', or '%' at the start of a variable, but didn't find any of them.</source>
          <target state="translated">&lt;code&gt;extract_variable&lt;/code&gt; 은 변수 시작시 '$', '@'또는 '%'중 하나를 예상했지만 찾지 못했습니다.</target>
        </trans-unit>
        <trans-unit id="20f94a649b0ac6110d4b4e974451200d805dd893" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;facet_data()&lt;/code&gt;&lt;b&gt;MUST NOT&lt;/b&gt; bless the data it returns, the main hashref, and nested facet hashrefs &lt;b&gt;MUST&lt;/b&gt; be bare, though items contained within each facet may be blessed. The data returned by this method &lt;b&gt;should&lt;/b&gt; also be copies of the internal data in order to prevent accidental state modification.</source>
          <target state="translated">&lt;code&gt;facet_data()&lt;/code&gt; &lt;b&gt;안&lt;/b&gt; 가 반환하는 데이터, 주요 hashref, 중첩 된 패싯 hashrefs을 축복 &lt;b&gt;해야&lt;/b&gt; 각면에 포함 된 항목이 축복을받을 수 있지만, 노출합니다. 이 메서드에서 반환 된 데이터는 실수로 상태가 수정되는 것을 방지하기 위해 내부 데이터의 복사본 &lt;b&gt;이어야합니다&lt;/b&gt; .</target>
        </trans-unit>
        <trans-unit id="2c207b36e130877d93d86cdcf28960f660fef059" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;facets()&lt;/code&gt; takes the data from &lt;code&gt;facet_data()&lt;/code&gt; and blesses it into the &lt;code&gt;Test2::EventFacet::*&lt;/code&gt; packages. This is rarely used however, the EventFacet packages are primarily for convenience and documentation. The EventFacet classes are not used at all internally, instead the raw data is used.</source>
          <target state="translated">&lt;code&gt;facets()&lt;/code&gt; 는 &lt;code&gt;facet_data()&lt;/code&gt; 에서 데이터를 가져와 &lt;code&gt;Test2::EventFacet::*&lt;/code&gt; 패키지 로 축복 합니다. 이것은 거의 사용되지 않지만 EventFacet 패키지는 주로 편의와 문서화를위한 것입니다. EventFacet 클래스는 내부적으로 전혀 사용되지 않고 대신 원시 데이터가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f7183702bf36011a80e32e87169e8ae3121aaff7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fdopen&lt;/code&gt; is like an ordinary &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; except that its first parameter is not a filename but rather a file handle name, an IO::Handle object, or a file descriptor number. (For the documentation of the &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; method, see &lt;a href=&quot;file&quot;&gt;IO::File&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;fdopen&lt;/code&gt; 은 첫 번째 매개 변수가 파일 이름이 아니라 파일 핸들 이름, IO :: Handle 객체 또는 파일 설명자 번호라는 점을 제외하고 는 일반 &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 와 같습니다 . &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 메소드에 대한 문서는 &lt;a href=&quot;file&quot;&gt;IO :: File을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ba238f8e74bf4f53dc4869a9be342bb73099fd15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fdopen&lt;/code&gt; is like an ordinary &lt;code&gt;open&lt;/code&gt; except that its first parameter is not a filename but rather a file handle name, an IO::Handle object, or a file descriptor number. (For the documentation of the &lt;code&gt;open&lt;/code&gt; method, see &lt;a href=&quot;IO::File&quot;&gt;IO::File&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;fdopen&lt;/code&gt; 은 첫 번째 매개 변수가 파일 이름이 아니라 파일 핸들 이름, IO :: Handle 객체 또는 파일 설명자 번호라는 점을 제외 하면 일반 &lt;code&gt;open&lt;/code&gt; 와 같습니다 . ( &lt;code&gt;open&lt;/code&gt; 메소드에 대한 문서는 &lt;a href=&quot;IO::File&quot;&gt;IO :: File을&lt;/a&gt; 참조하십시오 .)</target>
        </trans-unit>
        <trans-unit id="d03fc961bee53ba972305eb9fb700a55c4e14e62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fill_mstats($buf)&lt;/code&gt; is a much cheaper call (both speedwise and memory-wise) which collects the statistic into $buf in machine-readable form. At a later moment you may need to call &lt;code&gt;mstats2hash($buf, %hash)&lt;/code&gt; to use this information to fill %hash.</source>
          <target state="translated">&lt;code&gt;fill_mstats($buf)&lt;/code&gt; 는 통계를 기계가 읽을 수있는 형태로 $ buf로 수집하는 훨씬 더 저렴한 호출 (속도 및 메모리)입니다. 나중에이 정보를 사용하여 % hash를 채우 &lt;code&gt;mstats2hash($buf, %hash)&lt;/code&gt; 를 호출해야 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a7e5d4f5538cc74799b8419786d322d044582dea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find()&lt;/code&gt; does a depth-first search over the given &lt;code&gt;@directories&lt;/code&gt; in the order they are given. For each file or directory found, it calls the &lt;code&gt;&amp;amp;wanted&lt;/code&gt; subroutine. (See below for details on how to use the &lt;code&gt;&amp;amp;wanted&lt;/code&gt; function). Additionally, for each directory found, it will &lt;code&gt;&lt;a href=&quot;../functions/chdir&quot;&gt;chdir()&lt;/a&gt;&lt;/code&gt; into that directory and continue the search, invoking the &lt;code&gt;&amp;amp;wanted&lt;/code&gt; function on each file or subdirectory in the directory.</source>
          <target state="translated">&lt;code&gt;find()&lt;/code&gt; 는 주어진 &lt;code&gt;@directories&lt;/code&gt; 에 대해 깊이 우선 검색을 주어진 순서대로 수행합니다. 발견 된 각 파일 또는 디렉토리에 대해 &lt;code&gt;&amp;amp;wanted&lt;/code&gt; 서브 루틴을 호출합니다 . &lt;code&gt;&amp;amp;wanted&lt;/code&gt; 기능 사용 방법에 대한 자세한 내용은 아래를 참조하십시오 . 또한 발견 된 각 디렉토리에 대해 해당 디렉토리로 &lt;code&gt;&lt;a href=&quot;../functions/chdir&quot;&gt;chdir()&lt;/a&gt;&lt;/code&gt; 하고 검색을 계속하여 디렉토리의 각 파일 또는 하위 디렉토리에서 &lt;code&gt;&amp;amp;wanted&lt;/code&gt; 함수를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="ecdfb26abf3b15965a5901fd7cf35ec4653a258c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find()&lt;/code&gt; does a depth-first search over the given &lt;code&gt;@directories&lt;/code&gt; in the order they are given. For each file or directory found, it calls the &lt;code&gt;&amp;amp;wanted&lt;/code&gt; subroutine. (See below for details on how to use the &lt;code&gt;&amp;amp;wanted&lt;/code&gt; function). Additionally, for each directory found, it will &lt;code&gt;chdir()&lt;/code&gt; into that directory and continue the search, invoking the &lt;code&gt;&amp;amp;wanted&lt;/code&gt; function on each file or subdirectory in the directory.</source>
          <target state="translated">&lt;code&gt;find()&lt;/code&gt; 는 주어진 순서대로 주어진 &lt;code&gt;@directories&lt;/code&gt; 에 대한 깊이 우선 검색을 수행합니다 . 발견 된 각 파일 또는 디렉토리에 대해 &lt;code&gt;&amp;amp;wanted&lt;/code&gt; 서브 루틴을 호출합니다 . ( &lt;code&gt;&amp;amp;wanted&lt;/code&gt; 기능 사용 방법에 대한 자세한 내용은 아래를 참조하십시오 ). 또한 발견 된 각 디렉토리에 대해 해당 디렉토리로 &lt;code&gt;chdir()&lt;/code&gt; 하고 검색을 계속하여 디렉토리의 각 파일 또는 하위 디렉토리에서 &lt;code&gt;&amp;amp;wanted&lt;/code&gt; 함수를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="e26ed17cfa2816485cbc28d5fbb0568e82932f2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;finddepth()&lt;/code&gt; works just like &lt;code&gt;find()&lt;/code&gt; except that it invokes the &lt;code&gt;&amp;amp;wanted&lt;/code&gt; function for a directory</source>
          <target state="translated">&lt;code&gt;finddepth()&lt;/code&gt; 처럼 작동 &lt;code&gt;find()&lt;/code&gt; 가 호출하는 것을 제외 &lt;code&gt;&amp;amp;wanted&lt;/code&gt; 디렉토리에 대한 기능을</target>
        </trans-unit>
        <trans-unit id="29620a24a0df648a414eb9cf851d4bf4806d6e4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; allows only &lt;code&gt;PERL_SCAN_TRAILING&lt;/code&gt; , which allows for trailing non-numeric text on an otherwise successful</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 는 &lt;code&gt;PERL_SCAN_TRAILING&lt;/code&gt; 만 허용하며, 그렇지 않으면 성공하지 않은 숫자가 아닌 텍스트를 추적 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="7171c0330153fbec23956fd5954483c8d49fec81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; allows only &lt;code&gt;PERL_SCAN_TRAILING&lt;/code&gt;, which allows for trailing non-numeric text on an otherwise successful</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 는 &lt;code&gt;PERL_SCAN_TRAILING&lt;/code&gt; 만 허용하며, 그렇지 않으면 성공한 경우 뒤에 숫자가 아닌 텍스트를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="614a8eed1e0bbdcf6096b1e5784e3dc7f58643a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; can be set to &lt;code&gt;SVf_UTF8&lt;/code&gt; if &lt;code&gt;name&lt;/code&gt; is a UTF-8 string, or the return value of SvUTF8(sv). It can also take the &lt;code&gt;GV_ADDMULTI&lt;/code&gt; flag, which means to pretend that the GV has been seen before (i.e., suppress &quot;Used once&quot; warnings).</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; &lt;code&gt;name&lt;/code&gt; 이 UTF-8 문자열 인 경우 플래그 를 &lt;code&gt;SVf_UTF8&lt;/code&gt; 로 설정 하거나 SvUTF8 (sv)의 반환 값을 설정할 수 있습니다. 또한 &lt;code&gt;GV_ADDMULTI&lt;/code&gt; 플래그를 사용할 수 있습니다 . 이는 GV가 이전에 본 것처럼 가장하는 것을 의미합니다 (즉, &quot;한 번 사용됨&quot;경고를 억제 함).</target>
        </trans-unit>
        <trans-unit id="aaeb70073109db72816d4b058f24b70066251071" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; can be set to SVf_UTF8 if &lt;code&gt;name&lt;/code&gt; is a UTF8 string, or the return value of SvUTF8(sv). It can also take the GV_ADDMULTI flag, which means to pretend that the GV has been seen before (i.e., suppress &quot;Used once&quot; warnings).</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; &lt;code&gt;name&lt;/code&gt; 이 UTF8 문자열이거나 SvUTF8 (sv)의 반환 값인 경우 플래그 를 SVf_UTF8로 설정할 수 있습니다 . 또한 GV_ADDMULTI 플래그를 사용할 수 있습니다. 즉, 이전에 GV를 본 것처럼 가장합니다 (즉, &quot;한 번만 사용됨&quot;경고는 표시하지 않음).</target>
        </trans-unit>
        <trans-unit id="af26d30e7c49fe5fc911e7d99c64282995d4a35f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; gives the eight bits of &lt;code&gt;op_flags&lt;/code&gt; for the &lt;code&gt;leaveloop&lt;/code&gt; op and, shifted up eight bits, the eight bits of &lt;code&gt;op_private&lt;/code&gt; for the &lt;code&gt;leaveloop&lt;/code&gt; op, except that (in both cases) some bits will be set automatically.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 는 &lt;code&gt;leaveloop&lt;/code&gt; op에 대해 8 비트의 &lt;code&gt;op_flags&lt;/code&gt; 를 제공하고, 8 비트 위로 이동 하면 leaveloop op에 대해 8 비트의 &lt;code&gt;op_private&lt;/code&gt; 를 제공합니다. &lt;code&gt;leaveloop&lt;/code&gt; , 두 경우 모두 일부 비트가 자동으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="6d63eaae2e4ad0abf234a638df832de5d65b2c05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; gives the eight bits of &lt;code&gt;op_flags&lt;/code&gt; for the &lt;code&gt;leaveloop&lt;/code&gt; op and, shifted up eight bits, the eight bits of &lt;code&gt;op_private&lt;/code&gt; for the &lt;code&gt;leaveloop&lt;/code&gt; op, except that (in both cases) some bits will be set automatically. &lt;code&gt;debuggable&lt;/code&gt; is currently unused and should always be 1. &lt;code&gt;has_my&lt;/code&gt; can be supplied as true to force the loop body to be enclosed in its own scope.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 는 &lt;code&gt;leaveloop&lt;/code&gt; op에 대해 8 비트의 &lt;code&gt;op_flags&lt;/code&gt; 를 제공하고, 8 비트 위로 이동 하면 leaveloop op에 대해 8 비트의 &lt;code&gt;op_private&lt;/code&gt; 를 제공합니다. &lt;code&gt;leaveloop&lt;/code&gt; , 두 경우 모두 일부 비트가 자동으로 설정됩니다. &lt;code&gt;debuggable&lt;/code&gt; 은 현재 사용되지 않으며 항상 1이어야합니다. &lt;code&gt;has_my&lt;/code&gt; 를 true로 제공하여 루프 본문이 자체 범위에 포함되도록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c2b88293d06ab0496f44e00df866b365eed7013a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; should not have bits set other than &lt;code&gt;SVf_UTF8&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 에는 &lt;code&gt;SVf_UTF8&lt;/code&gt; 이외의 비트 세트가 없어야 합니다.</target>
        </trans-unit>
        <trans-unit id="65e3f0cb7744b6ea7a16d5b8162ae81c50f936d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flush&lt;/code&gt; causes perl to flush any buffered data at the perlio api level. Any unread data in the buffer will be discarded, and any unwritten data will be written to the underlying file descriptor. Returns &quot;0 but true&quot; on success, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on error.</source>
          <target state="translated">&lt;code&gt;flush&lt;/code&gt; 는 perl이 perlio api 레벨에서 버퍼링 된 데이터를 플러시하도록합니다. 버퍼의 읽지 않은 데이터는 버리고 쓰지 않은 데이터는 기본 파일 디스크립터에 쓰여집니다. 성공하면 &quot;0이지만 true&quot;를 반환 하고 에러가 발생 하면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="91e1b1bbf7facbe29fb8a23eea44f2865198a992" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flush&lt;/code&gt; causes perl to flush any buffered data at the perlio api level. Any unread data in the buffer will be discarded, and any unwritten data will be written to the underlying file descriptor. Returns &quot;0 but true&quot; on success, &lt;code&gt;undef&lt;/code&gt; on error.</source>
          <target state="translated">&lt;code&gt;flush&lt;/code&gt; 는 perl이 perlio api 레벨에서 버퍼링 된 데이터를 플러시하도록합니다. 버퍼에있는 읽지 않은 데이터는 모두 삭제되고 작성되지 않은 데이터는 기본 파일 설명자에 기록됩니다. 성공하면 &quot;0 but true&quot;를 반환 하고 오류가 발생 하면 &lt;code&gt;undef&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="8e9905682a79a998de7ff1e83caeeafa645f241b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flush_cache(function)&lt;/code&gt; will flush out the caches, discarding</source>
          <target state="translated">&lt;code&gt;flush_cache(function)&lt;/code&gt; 은 캐시를 플러시하고 버립니다.</target>
        </trans-unit>
        <trans-unit id="3b5d6c6cb2f1fedfbb1c398cf830e60872b2d25d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;follow_skip==0&lt;/code&gt; causes File::Find to die if any file is about to be processed a second time.</source>
          <target state="translated">&lt;code&gt;follow_skip==0&lt;/code&gt; 은 파일을 두 번째로 처리하려고하면 File :: Find가 죽게합니다.</target>
        </trans-unit>
        <trans-unit id="245a14cc849e45d0f21aa3c6a45e6687f9b1b64a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;follow_skip==1&lt;/code&gt; , which is the default, causes all files which are neither directories nor symbolic links to be ignored if they are about to be processed a second time. If a directory or a symbolic link are about to be processed a second time, File::Find dies.</source>
          <target state="translated">&lt;code&gt;follow_skip==1&lt;/code&gt; 은 기본값으로 디렉토리 나 심볼릭 링크가 아닌 모든 파일이 두 번째로 처리 될 경우 무시됩니다. 디렉토리 나 심볼릭 링크를 두 번째로 처리하려고하면 File :: Find가 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="026104b97f9533b4576c52cb6c4fc5b33b90adb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;follow_skip==1&lt;/code&gt;, which is the default, causes all files which are neither directories nor symbolic links to be ignored if they are about to be processed a second time. If a directory or a symbolic link are about to be processed a second time, File::Find dies.</source>
          <target state="translated">&lt;code&gt;follow_skip==1&lt;/code&gt; 은 디렉토리도 아니고 기호 링크도 아닌 모든 파일이 두 번째로 처리 될 경우 무시되도록합니다. 디렉토리 나 심볼릭 링크가 두 번째로 처리 되려고하면 File :: Find가 죽습니다.</target>
        </trans-unit>
        <trans-unit id="08a84133d805b081624353f19b1e15e4f4f2316a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;follow_skip==2&lt;/code&gt; causes File::Find to ignore any duplicate files and directories but to proceed normally otherwise.</source>
          <target state="translated">&lt;code&gt;follow_skip==2&lt;/code&gt; 는 File :: Find가 중복 파일과 디렉토리를 무시하지만 정상적으로 진행되도록합니다.</target>
        </trans-unit>
        <trans-unit id="b488c92ca6be1e23d4299b935b09ca768ca7bd88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foo&lt;/code&gt; ).</source>
          <target state="translated">&lt;code&gt;foo&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="af037f92dbe22f9677ccba3af252180c69239c0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foreach&lt;/code&gt; probably won't do what you expect if VAR is a tied or other special variable. Don't do that either.</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; 는 아마도 VAR이 묶여 있거나 다른 특별한 변수라면 당신이 기대하는 것을하지 않을 것입니다. 그렇게하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="c77ca2a6b9d0be9c729a47c07b760579edd1d389" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fork()&lt;/code&gt; failures in io_* tests</source>
          <target state="translated">&lt;code&gt;fork()&lt;/code&gt; io_ * 테스트에서 fork () 실패</target>
        </trans-unit>
        <trans-unit id="3a4a74a3423620b717e8515966c608ea94d077f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;from_to()&lt;/code&gt; returns the length of the converted string in octets on success, and &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on error.</source>
          <target state="translated">&lt;code&gt;from_to()&lt;/code&gt; 는 변환시 변환 된 문자열의 길이를 8 진수로 반환하고 오류시 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="672d95b5197c0899f13971854b9235675a12d726" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;from_to()&lt;/code&gt; returns the length of the converted string in octets on success, and &lt;code&gt;undef&lt;/code&gt; on error.</source>
          <target state="translated">&lt;code&gt;from_to()&lt;/code&gt; 는 변환 된 문자열의 길이를 성공시 옥텟으로, 오류시 &lt;code&gt;undef&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ee56073a87e8cb2ec407581f4115873a117f0638" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gen_delimited_pat&lt;/code&gt; may also be called with an optional second argument, which specifies the &quot;escape&quot; character(s) to be used for each delimiter. For example to match a Pascal-style string (where ' is the delimiter and '' is a literal ' within the string):</source>
          <target state="translated">&lt;code&gt;gen_delimited_pat&lt;/code&gt; 는 또한 선택적인 두 번째 인수와 함께 호출 될 수 있으며,이 인수는 각 분리 문자에 사용될 &quot;이스케이프&quot;문자를 지정합니다. 예를 들어 Pascal 스타일 문자열과 일치 시키려면 (여기서 '는 구분 기호이고' '는 문자열 내 리터럴'입니다) :</target>
        </trans-unit>
        <trans-unit id="6a3889013df238b89a769a62665a92aecb6580a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gen_extract_tagged&lt;/code&gt; generates a new anonymous subroutine which extracts text between (balanced) specified tags. In other words, it generates a function identical in function to &lt;code&gt;extract_tagged&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;gen_extract_tagged&lt;/code&gt; 는 (균형) 지정된 태그 사이에서 텍스트를 추출하는 새로운 익명 서브 루틴을 생성합니다. 즉, &lt;code&gt;extract_tagged&lt;/code&gt; 와 기능이 동일한 함수를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="9bbf5657fac9df51b50196a5452cc515e378127f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gen_extract_tagged&lt;/code&gt; generates a new anonymous subroutine which extracts text between (balanced) specified tags. In other words, it generates a function identical in function to &lt;code&gt;extract_tagged&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_extract_tagged&lt;/code&gt; 는 (균형이있는) 지정된 태그 사이의 텍스트를 추출하는 새로운 익명 서브 루틴을 생성합니다. 즉, &lt;code&gt;extract_tagged&lt;/code&gt; 와 동일한 함수를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="94fc46087afc34909f3ff50b3a35f51dd87159b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get&lt;/code&gt; downloads a distribution file and untars or unzips it, &lt;code&gt;make&lt;/code&gt; builds it, &lt;code&gt;test&lt;/code&gt; runs the test suite, and &lt;code&gt;install&lt;/code&gt; installs it.</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; , 다운로드에게 배포 파일 및 untars 또는 압축을 풀고 그것을 &lt;code&gt;make&lt;/code&gt; 가 그것을 빌드, &lt;code&gt;test&lt;/code&gt; 테스트 스위트를 실행하고 &lt;code&gt;install&lt;/code&gt; 설치 수에게 그것을.</target>
        </trans-unit>
        <trans-unit id="d351e786b644f3f2b7497656e40ab3f1597c2ae6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_boolean_values&lt;/code&gt; will return both &lt;code&gt;$false&lt;/code&gt; and &lt;code&gt;$true&lt;/code&gt; values, or the empty list when they are set to the default.</source>
          <target state="translated">&lt;code&gt;get_boolean_values&lt;/code&gt; 는 &lt;code&gt;$false&lt;/code&gt; 및 &lt;code&gt;$true&lt;/code&gt; 값을 모두 반환 하거나 기본값으로 설정된 경우 빈 목록 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="597f829bafddc48835ebea8c700b577d34cea8b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_handle&lt;/code&gt; appends the return value of this to the end of the list of classes it will try using. Unless you override this method, your project class will inherit Locale::Maketext's &lt;code&gt;fallback_language_classes&lt;/code&gt; , which currently returns an empty list, &lt;code&gt;()&lt;/code&gt; . By setting this to some value (namely, the name of a loadable language class), you can be sure that &lt;code&gt;get_handle&lt;/code&gt; will always manage to construct a language handle.</source>
          <target state="translated">&lt;code&gt;get_handle&lt;/code&gt; 은이 클래스의 반환 값을 사용하려는 클래스 목록 끝에 추가합니다. 이 메서드를 재정의하지 않으면 프로젝트 클래스는 현재 빈 목록 &lt;code&gt;()&lt;/code&gt; 을 반환하는 Locale :: Maketext의 &lt;code&gt;fallback_language_classes&lt;/code&gt; 를 상속받습니다 . 이를 일부 값 (로드 가능한 언어 클래스의 이름)으로 설정하면 &lt;code&gt;get_handle&lt;/code&gt; 이 항상 언어 핸들을 구성하도록 관리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="22ee173dd1f9b2a3f3bb6edc486372896578d7ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_handle&lt;/code&gt; appends the return value of this to the end of the list of classes it will try using. Unless you override this method, your project class will inherit Locale::Maketext's &lt;code&gt;fallback_language_classes&lt;/code&gt;, which currently returns an empty list, &lt;code&gt;()&lt;/code&gt;. By setting this to some value (namely, the name of a loadable language class), you can be sure that &lt;code&gt;get_handle&lt;/code&gt; will always manage to construct a language handle.</source>
          <target state="translated">&lt;code&gt;get_handle&lt;/code&gt; 은 사용할 클래스 목록 끝에 이것의 반환 값을 추가합니다. 이 메서드를 재정의하지 않는 한 프로젝트 클래스는 현재 빈 목록 &lt;code&gt;()&lt;/code&gt; 을 반환하는 Locale :: Maketext의 &lt;code&gt;fallback_language_classes&lt;/code&gt; 를 상속 합니다 . 이것을 어떤 값 (즉,로드 가능한 언어 클래스의 이름)으로 설정하면 &lt;code&gt;get_handle&lt;/code&gt; 이 항상 언어 핸들을 생성하도록 관리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="07d51dfcba73441795cbac2c1e95e837ccfcfefe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_handle&lt;/code&gt; appends the return value of this to the end of whatever list of languages you pass &lt;code&gt;get_handle&lt;/code&gt; . Unless you override this method, your project class will inherit Locale::Maketext's &lt;code&gt;fallback_languages&lt;/code&gt; , which currently returns &lt;code&gt;('i-default', 'en', 'en-US')&lt;/code&gt; . (&quot;i-default&quot; is defined in RFC 2277).</source>
          <target state="translated">&lt;code&gt;get_handle&lt;/code&gt; 은 당신이 통과 언어의 어떤리스트의 마지막에이의 반환 값 추가 &lt;code&gt;get_handle&lt;/code&gt; 을 . 이 메서드를 재정의하지 않으면 프로젝트 클래스는 현재 &lt;code&gt;('i-default', 'en', 'en-US')&lt;/code&gt; 반환하는 Locale :: Maketext의 &lt;code&gt;fallback_languages&lt;/code&gt; 를 상속 합니다 . &quot;i-default&quot;는 RFC 2277에 정의되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="d8695d8032fc674b78a2595bf473473eea2d50cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_handle&lt;/code&gt; appends the return value of this to the end of whatever list of languages you pass &lt;code&gt;get_handle&lt;/code&gt;. Unless you override this method, your project class will inherit Locale::Maketext's &lt;code&gt;fallback_languages&lt;/code&gt;, which currently returns &lt;code&gt;('i-default', 'en', 'en-US')&lt;/code&gt;. (&quot;i-default&quot; is defined in RFC 2277).</source>
          <target state="translated">&lt;code&gt;get_handle&lt;/code&gt; 은 당신이 통과 언어의 어떤리스트의 마지막에이의 반환 값 추가 &lt;code&gt;get_handle&lt;/code&gt; 을 . 이 메서드를 재정의하지 않는 한 프로젝트 클래스는 현재 &lt;code&gt;('i-default', 'en', 'en-US')&lt;/code&gt; 반환하는 Locale :: Maketext의 &lt;code&gt;fallback_languages&lt;/code&gt; 를 상속 합니다 . ( &quot;i-default&quot;는 RFC 2277에 정의되어 있습니다).</target>
        </trans-unit>
        <trans-unit id="d5a63aa356061956451266a1a4014ccae3657913" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gflags&lt;/code&gt; is a bitset passed into &lt;code&gt;cv_get_call_checker_flags&lt;/code&gt;, in which only the &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; bit currently has a defined meaning (for which see above). All other bits should be clear.</source>
          <target state="translated">&lt;code&gt;gflags&lt;/code&gt; 는 &lt;code&gt;cv_get_call_checker_flags&lt;/code&gt; 에 전달 된 비트 셋으로 , 현재 &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; 비트 만 정의 된 의미를 가지고 있습니다 (위 참조). 다른 모든 비트는 지워야합니다.</target>
        </trans-unit>
        <trans-unit id="e3b6200f87d8690cdac1f4cd712e3e4cb1d3352b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git help bisect&lt;/code&gt; has much more information on how you can tweak your binary searches.</source>
          <target state="translated">&lt;code&gt;git help bisect&lt;/code&gt; 는 바이너리 검색을 조정하는 방법에 대한 더 많은 정보를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="cf569ccd5c0de9aae2bc67f8d6ef04eaf70c3485" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git&lt;/code&gt; only supports &lt;code&gt;git://&lt;/code&gt; style urls.</source>
          <target state="translated">&lt;code&gt;git&lt;/code&gt; 은 &lt;code&gt;git://&lt;/code&gt; 스타일 URL 만 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="d8268d82cd8cca36bfee8e5f93d5ca671bace665" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git&lt;/code&gt; provides a built-in way to determine which commit should be blamed for introducing a given bug. &lt;code&gt;git bisect&lt;/code&gt; performs a binary search of history to locate the first failing commit. It is fast, powerful and flexible, but requires some setup and to automate the process an auxiliary shell script is needed.</source>
          <target state="translated">&lt;code&gt;git&lt;/code&gt; 은 주어진 버그를 도입 한 커밋을 결정하는 내장 된 방법을 제공합니다. &lt;code&gt;git bisect&lt;/code&gt; 는 기록의 이진 검색을 수행하여 첫 번째 실패한 커밋을 찾습니다. 빠르고 강력하며 유연하지만 약간의 설정이 필요하고 프로세스를 자동화하려면 보조 셸 스크립트가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="3fc088f44c39e54fa76b55bd407e420ecf8e1449" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;glob&lt;/code&gt; (aka the &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;glob&lt;/code&gt; (일명 &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="f85aa8588ef6572feba5f3f7196b55f9be2ff8a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gnu_compat&lt;/code&gt; controls whether &lt;code&gt;--opt=&lt;/code&gt; is allowed, and what it should do. Without &lt;code&gt;gnu_compat&lt;/code&gt; , &lt;code&gt;--opt=&lt;/code&gt; gives an error. With &lt;code&gt;gnu_compat&lt;/code&gt; , &lt;code&gt;--opt=&lt;/code&gt; will give option &lt;code&gt;opt&lt;/code&gt; and empty value. This is the way GNU getopt_long() does it.</source>
          <target state="translated">&lt;code&gt;gnu_compat&lt;/code&gt; 는 &lt;code&gt;--opt=&lt;/code&gt; 허용 여부 와 수행 할 작업을 제어합니다 . 없이 &lt;code&gt;gnu_compat&lt;/code&gt; , &lt;code&gt;--opt=&lt;/code&gt; 오류를 제공합니다. 로 &lt;code&gt;gnu_compat&lt;/code&gt; , &lt;code&gt;--opt=&lt;/code&gt; 옵션을 줄 것이다 &lt;code&gt;opt&lt;/code&gt; 빈 값입니다. 이것이 GNU getopt_long ()이하는 방식입니다.</target>
        </trans-unit>
        <trans-unit id="1fb0e41171264b2fcf37c5326ff38ff8093328b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gnu_compat&lt;/code&gt; controls whether &lt;code&gt;--opt=&lt;/code&gt; is allowed, and what it should do. Without &lt;code&gt;gnu_compat&lt;/code&gt;, &lt;code&gt;--opt=&lt;/code&gt; gives an error. With &lt;code&gt;gnu_compat&lt;/code&gt;, &lt;code&gt;--opt=&lt;/code&gt; will give option &lt;code&gt;opt&lt;/code&gt; and empty value. This is the way GNU getopt_long() does it.</source>
          <target state="translated">&lt;code&gt;gnu_compat&lt;/code&gt; 는 &lt;code&gt;--opt=&lt;/code&gt; 허용 여부 와 수행 할 작업을 제어합니다 . 없이 &lt;code&gt;gnu_compat&lt;/code&gt; , &lt;code&gt;--opt=&lt;/code&gt; 오류를 제공합니다. 로 &lt;code&gt;gnu_compat&lt;/code&gt; , &lt;code&gt;--opt=&lt;/code&gt; 옵션을 줄 것이다 &lt;code&gt;opt&lt;/code&gt; 빈 값입니다. 이것이 GNU getopt_long ()이하는 방식입니다.</target>
        </trans-unit>
        <trans-unit id="da23eeb6ab9c230c23432ea70d9c9e7b965fbe5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gunzip&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;gunzip&lt;/code&gt; 은 최소한 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 매개 변수를 예상 합니다.</target>
        </trans-unit>
        <trans-unit id="2c9ace767cb2b2374e63f5abf0af97e52a9d9d8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gunzip&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;gunzip&lt;/code&gt; 은 두 개 이상의 매개 변수, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 와 0 개 이상의 선택적 매개 변수를 예상합니다 ( &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;선택적 매개 변수&quot;&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="19b8e8c4b2f2968447ed1a4e47f9c92d6075290d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gv&lt;/code&gt; is the scalar to be converted.</source>
          <target state="translated">&lt;code&gt;gv&lt;/code&gt; 는 변환 할 스칼라입니다.</target>
        </trans-unit>
        <trans-unit id="29db96deb265ac3c7d7d0953f53bc03ef4c2f394" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gzip&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;gzip&lt;/code&gt; 은 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 매개 변수 중 두 개 이상을 필요로 합니다.</target>
        </trans-unit>
        <trans-unit id="5da4c82cd1e22cff5477e13c973e757d29f5ee30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gzip&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;gzip&lt;/code&gt; 은 두 개 이상의 매개 변수, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 와 0 개 이상의 선택적 매개 변수를 예상합니다 ( &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;선택적 매개 변수&quot;&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="e485962ec7928cc06b861622e567d3b05cbb64fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;headers&lt;/code&gt; &amp;mdash; A hashref containing headers to include with the request. If the value for a header is an array reference, the header will be output multiple times with each value in the array. These headers over-write any default headers.</source>
          <target state="translated">&lt;code&gt;headers&lt;/code&gt; &amp;mdash; 요청에 포함 할 헤더가 포함 된 해시 참조입니다. 헤더 값이 배열 참조 인 경우 헤더는 배열의 각 값과 함께 여러 번 출력됩니다. 이러한 헤더는 기본 헤더를 덮어 씁니다.</target>
        </trans-unit>
        <trans-unit id="fc1d4418109cbb26543d41a26530b027814f6656" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;headers&lt;/code&gt; &amp;mdash; A hashref of header fields. All header field names will be normalized to be lower case. If a header is repeated, the value will be an arrayref; it will otherwise be a scalar string containing the value</source>
          <target state="translated">&lt;code&gt;headers&lt;/code&gt; &amp;mdash; 헤더 필드의 해시 참조입니다. 모든 헤더 필드 이름은 소문자로 정규화됩니다. 헤더가 반복되면 값은 arrayref가됩니다. 그렇지 않으면 값을 포함하는 스칼라 문자열이됩니다.</target>
        </trans-unit>
        <trans-unit id="40e77ef19371ab42dd3ee159db29ed1de58b556a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;help&lt;/code&gt; will get you into the documentation, but here are the most useful commands:</source>
          <target state="translated">&lt;code&gt;help&lt;/code&gt; 을 통해 설명서를 볼 수 있지만 가장 유용한 명령은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f33ba501199bdab9a127e2b1f7b1b40f51678514" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;host&lt;/code&gt; - sets the hostname to send the messages to. Defaults to the local host.</source>
          <target state="translated">&lt;code&gt;host&lt;/code&gt; - 메시지를 보낼 호스트 이름을 설정합니다. 로컬 호스트가 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="4e594d75a523d0b29a6964865cae46c3baf58a2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;http_proxy&lt;/code&gt; &amp;mdash; URL of a proxy server to use for HTTP connections (default is &lt;code&gt;$ENV{http_proxy}&lt;/code&gt; &amp;mdash; if set)</source>
          <target state="translated">&lt;code&gt;http_proxy&lt;/code&gt; &amp;mdash; HTTP 연결에 사용할 프록시 서버의 URL (기본값은 &lt;code&gt;$ENV{http_proxy}&lt;/code&gt; &amp;mdash; 설정된 경우)</target>
        </trans-unit>
        <trans-unit id="e5895745da68f010ab6aec5d542142c34e2b7b0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;https_proxy&lt;/code&gt; &amp;mdash; URL of a proxy server to use for HTTPS connections (default is &lt;code&gt;$ENV{https_proxy}&lt;/code&gt; &amp;mdash; if set)</source>
          <target state="translated">&lt;code&gt;https_proxy&lt;/code&gt; &amp;mdash; HTTPS 연결에 사용할 프록시 서버의 URL (기본값은 &lt;code&gt;$ENV{https_proxy}&lt;/code&gt; &amp;mdash; 설정된 경우)</target>
        </trans-unit>
        <trans-unit id="49c02ec2bc6d085cd003b0ab590c3cedf46f1d70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i!&lt;/code&gt; and &lt;code&gt;I!&lt;/code&gt; are also allowed, but only for completeness' sake: they are identical to &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;I&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;i!&lt;/code&gt; 그리고 &lt;code&gt;I!&lt;/code&gt; 또한 완전성을 위해서만 허용됩니다 . &lt;code&gt;i&lt;/code&gt; 및 &lt;code&gt;I&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="6dde773a6381ea57f8b793ad51ce4b833a11dc40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i!&lt;/code&gt; and &lt;code&gt;I!&lt;/code&gt; are also allowed, but only for completeness' sake: they are identical to &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;I&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;i!&lt;/code&gt; 그리고 &lt;code&gt;I!&lt;/code&gt; 또한 허용되지만 완전성을 위해서만 : &lt;code&gt;i&lt;/code&gt; 및 &lt;code&gt;I&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="38745558cff56e73757d72d93d0e833b8ab829ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id()&lt;/code&gt; also uses a caching technique that makes it faster when the id of an object is requested often, but slower if it is needed only once or twice.</source>
          <target state="translated">&lt;code&gt;id()&lt;/code&gt; 는 또한 캐싱 기술을 사용하여 객체의 id가 자주 요청 될 때 더 빠르지 만 한두 번만 필요한 경우에는 느리게합니다.</target>
        </trans-unit>
        <trans-unit id="1014df6f9393ccdb9b982a8f0cdabec78db82f15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt; executes the statement once</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 실행 문 번</target>
        </trans-unit>
        <trans-unit id="eb7b50383640c576cc08e55940c0c7707ec58e55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import()&lt;/code&gt; also sets the &lt;code&gt;exported_to()&lt;/code&gt; attribute of your builder to be the caller of the &lt;code&gt;import()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;import()&lt;/code&gt; 는 또한 빌더 의 &lt;code&gt;exported_to()&lt;/code&gt; 속성을 &lt;code&gt;import()&lt;/code&gt; 함수 의 호출자로 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="b896458be3e65959268ad7eb2dbf0a7972aba118" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import_extra()&lt;/code&gt; is called by &lt;code&gt;&lt;a href=&quot;../../functions/import&quot;&gt;import()&lt;/a&gt;&lt;/code&gt;. It provides an opportunity for you to add behaviors to your module based on its import list.</source>
          <target state="translated">&lt;code&gt;import_extra()&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../../functions/import&quot;&gt;import()&lt;/a&gt;&lt;/code&gt; 의해 호출됩니다 . 가져 오기 목록을 기반으로 모듈에 동작을 추가 할 수있는 기회를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f483cc5110be6dfd3ea84e7481c93d23c9b2cfbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import_extra()&lt;/code&gt; is called by &lt;code&gt;import()&lt;/code&gt;. It provides an opportunity for you to add behaviors to your module based on its import list.</source>
          <target state="translated">&lt;code&gt;import_extra()&lt;/code&gt; 는 &lt;code&gt;import()&lt;/code&gt; 의해 호출됩니다 . 가져 오기 목록을 기반으로 모듈에 동작을 추가 할 수있는 기회를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="bf041671b0859bae0d069d4abdaaec3333d3078b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inflate&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;inflate&lt;/code&gt; 적어도 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 매개 변수를 예상 합니다.</target>
        </trans-unit>
        <trans-unit id="e0f527451c4c09e71909bf3e5ee9143eaa7dc55c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inflate&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;inflate&lt;/code&gt; 는 두 개 이상의 매개 변수, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 와 0 개 이상의 선택적 매개 변수를 예상합니다 ( &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;선택적 매개 변수&quot;&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="3558f4a652411d66d86103524bc11a04a66d749f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;insert&lt;/code&gt; is the first of a chain of nodes to be inserted in place of the nodes. If &lt;code&gt;NULL&lt;/code&gt;, no nodes are inserted.</source>
          <target state="translated">&lt;code&gt;insert&lt;/code&gt; 는 노드 대신 삽입 할 노드 체인 중 첫 번째입니다. 경우 &lt;code&gt;NULL&lt;/code&gt; , 어떤 노드가 삽입되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dd51f04bea97ece8157da9d1a364211a462e769c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int()&lt;/code&gt; returns (at least for Perl v5.7.1 and up) another Math::BigInt, not a Perl scalar:</source>
          <target state="translated">&lt;code&gt;int()&lt;/code&gt; 는 Perl 스칼라가 아닌 다른 Math :: BigInt를 반환합니다 (적어도 Perl v5.7.1 이상에서는).</target>
        </trans-unit>
        <trans-unit id="71a7ef622103e498c3f87e97051142dd1bd19ab4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;intsize&lt;/code&gt;, &lt;code&gt;longsize&lt;/code&gt;, &lt;code&gt;ptrsize&lt;/code&gt;, &lt;code&gt;nvsize&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;intsize&lt;/code&gt;, &lt;code&gt;longsize&lt;/code&gt;, &lt;code&gt;ptrsize&lt;/code&gt;, &lt;code&gt;nvsize&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a48e2284b44cc7c2c571d6415bc1d2a1c3a3bad6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;iosock&lt;/code&gt; is a very limited &lt;a href=&quot;../io/socket/inet&quot;&gt;IO::Socket::INET&lt;/a&gt; based mechanism for retrieving &lt;code&gt;http&lt;/code&gt; schemed urls. It doesn't follow redirects for instance.</source>
          <target state="translated">&lt;code&gt;iosock&lt;/code&gt; 은 매우 제한된 &lt;a href=&quot;../io/socket/inet&quot;&gt;IO :: Socket :: INET&lt;/a&gt; 기반 메커니즘으로 &lt;code&gt;http&lt;/code&gt; 체계화 된 URL 을 검색 합니다. 예를 들어 리디렉션을 따르지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0dbd4c2804b7173533ec0bb2e4bcaf5ac3324b87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;iosock&lt;/code&gt; is a very limited &lt;a href=&quot;IO::Socket::INET&quot;&gt;IO::Socket::INET&lt;/a&gt; based mechanism for retrieving &lt;code&gt;http&lt;/code&gt; schemed urls. It doesn't follow redirects for instance.</source>
          <target state="translated">&lt;code&gt;iosock&lt;/code&gt; 은 &lt;code&gt;http&lt;/code&gt; 스키마 URL 을 검색하기위한 매우 제한된 &lt;a href=&quot;IO::Socket::INET&quot;&gt;IO :: Socket :: INET&lt;/a&gt; 기반 메커니즘입니다 . 예를 들어 리디렉션을 따르지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f75f4cb95b2a1340b2264c404136042989b18f8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_deeply()&lt;/code&gt; can do that better and with diagnostics.</source>
          <target state="translated">&lt;code&gt;is_deeply()&lt;/code&gt; 는 진단을 통해 더 잘 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fa45eb9c353e9becb0910ea19cd26aa2cc1efcb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_deeply()&lt;/code&gt; compares the dereferenced values of references, the references themselves (except for their type) are ignored. This means aspects such as blessing and ties are not considered &quot;different&quot;.</source>
          <target state="translated">&lt;code&gt;is_deeply()&lt;/code&gt; 는 역 참조 된 참조 값을 비교하며 참조 자체 (유형 제외)는 무시됩니다. 이것은 축복과 관계와 같은 측면이 &quot;다른&quot;것으로 간주되지 않음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="3ac9608b72d885f105d8ded955f2852bb1f4026f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_deeply()&lt;/code&gt; currently has very limited handling of function reference and globs. It merely checks if they have the same referent. This may improve in the future.</source>
          <target state="translated">&lt;code&gt;is_deeply()&lt;/code&gt; 현재 함수 참조 및 glob 처리가 매우 제한되어 있습니다. 동일한 참조가 있는지 여부 만 확인합니다. 향후 개선 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fc0cb7e93ec296bf828a3ee1cf8be61d7fd1fa20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_indexable($package)&lt;/code&gt; or &lt;code&gt;is_indexable()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;is_indexable($package)&lt;/code&gt; 또는 &lt;code&gt;is_indexable()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9fee01bdd14b870e8f587577165aaba8174b5f56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_loaded&lt;/code&gt; tells you if &lt;code&gt;PACKAGE&lt;/code&gt; has been marked as loaded yet. &lt;code&gt;PACKAGE&lt;/code&gt; can be a bareword or string.</source>
          <target state="translated">&lt;code&gt;is_loaded&lt;/code&gt; 는 &lt;code&gt;PACKAGE&lt;/code&gt; 가 아직로드 된 것으로 표시되어 있는지 알려줍니다 . &lt;code&gt;PACKAGE&lt;/code&gt; 는 베어 워드 또는 문자열 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="908cf7f802a6484de1a86d6a37939c96ffeeea32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_negative()&lt;/code&gt; is an alias for &lt;code&gt;is_neg()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;is_negative()&lt;/code&gt; 의 별칭입니다 &lt;code&gt;is_neg()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="00a89aa2da974da0bd80f4ecc1bc689f4a5b20cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_negative()&lt;/code&gt; is an alias for &lt;code&gt;is_neg()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is_negative()&lt;/code&gt; 의 별칭입니다 &lt;code&gt;is_neg()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="57e24bd0e67b03038233cb69159892773438e44e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_our&lt;/code&gt; indicates that the name to check is an 'our' declaration.</source>
          <target state="translated">&lt;code&gt;is_our&lt;/code&gt; 는 확인할 이름이 'our'선언임을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="da7b72a6911cc56de693b87d7cfcdd8872eb161b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_our&lt;/code&gt; indicates that the name to check is an &lt;code&gt;&quot;our&quot;&lt;/code&gt; declaration.</source>
          <target state="translated">&lt;code&gt;is_our&lt;/code&gt; 는 확인할 이름이 &lt;code&gt;&quot;our&quot;&lt;/code&gt; 선언 임을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="83a514d3b918898f19b078949b55c4b50405311f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_positive()&lt;/code&gt; and &lt;code&gt;is_negative()&lt;/code&gt; are aliases to &lt;code&gt;is_pos()&lt;/code&gt; and &lt;code&gt;is_neg()&lt;/code&gt; , respectively. &lt;code&gt;is_positive()&lt;/code&gt; and &lt;code&gt;is_negative()&lt;/code&gt; were introduced in v1.36, while &lt;code&gt;is_pos()&lt;/code&gt; and &lt;code&gt;is_neg()&lt;/code&gt; were only introduced in v1.68.</source>
          <target state="translated">&lt;code&gt;is_positive()&lt;/code&gt; 및 &lt;code&gt;is_negative()&lt;/code&gt; 에 별명 &lt;code&gt;is_pos()&lt;/code&gt; 및 &lt;code&gt;is_neg()&lt;/code&gt; 각각. &lt;code&gt;is_positive()&lt;/code&gt; 및 &lt;code&gt;is_negative()&lt;/code&gt; 는 v1.36에서 도입되었으며 &lt;code&gt;is_pos()&lt;/code&gt; 및 &lt;code&gt;is_neg()&lt;/code&gt; 는 v1.68에서만 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="36dbe9a547bda60465b84e97fa8c4255f94a0b23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_positive()&lt;/code&gt; is an alias for &lt;code&gt;is_pos()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;is_positive()&lt;/code&gt; 의 별칭입니다 &lt;code&gt;is_pos()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3b45717725a93f97c98ac885f9335033581a7488" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_positive()&lt;/code&gt; is an alias for &lt;code&gt;is_pos()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is_positive()&lt;/code&gt; 의 별칭입니다 &lt;code&gt;is_pos()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c7ebfddb80039ad6fdcb40b1907d93271e7168e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_shared&lt;/code&gt; checks if the specified variable is shared or not. If shared, returns the variable's internal ID (similar to &lt;code&gt;refaddr()&lt;/code&gt; (see &lt;a href=&quot;../scalar/util&quot;&gt;Scalar::Util&lt;/a&gt;). Otherwise, returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is_shared&lt;/code&gt; 는 지정된 변수가 공유되는지 여부를 확인합니다. 공유하면 변수의 내부 ID를 반환합니다 ( &lt;code&gt;refaddr()&lt;/code&gt; 와 유사 함 ( &lt;a href=&quot;../scalar/util&quot;&gt;Scalar :: Util&lt;/a&gt; 참조 ). 그렇지 않으면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="1ea930a53c7c204137f02e24dcafe61cde400408" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_shared&lt;/code&gt; checks if the specified variable is shared or not. If shared, returns the variable's internal ID (similar to &lt;code&gt;refaddr()&lt;/code&gt; (see &lt;a href=&quot;Scalar::Util&quot;&gt;Scalar::Util&lt;/a&gt;). Otherwise, returns &lt;code&gt;undef&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is_shared&lt;/code&gt; 는 지정된 변수가 공유되었는지 여부를 확인합니다. 공유 된 경우 변수의 내부 ID를 반환합니다 ( &lt;code&gt;refaddr()&lt;/code&gt; 과 유사합니다 ( &lt;a href=&quot;Scalar::Util&quot;&gt;Scalar :: Util&lt;/a&gt; 참조 ). 그렇지 않으면 &lt;code&gt;undef&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="1bd3e625f9dccecad6923a6b9bcad7bcf170e05e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isa&lt;/code&gt; methods behave appropriately).</source>
          <target state="translated">&lt;code&gt;isa&lt;/code&gt; 메소드가 적절하게 작동합니다).</target>
        </trans-unit>
        <trans-unit id="e786fb8e004ccf42441c2bae194809a7fa5f68ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;iterator_factory_class&lt;/code&gt; can be customized, as described in &lt;a href=&quot;#new&quot;&gt;&quot;new&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;iterator_factory_class&lt;/code&gt; 는 &lt;a href=&quot;#new&quot;&gt;&quot;new&quot;에&lt;/a&gt; 설명 된대로 사용자 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="05461b3d98ad64340381f43af6ab96dfd13c6be0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;iterator_factory_class&lt;/code&gt; can be customized, as described in &lt;a href=&quot;#new&quot;&gt;new&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;iterator_factory_class&lt;/code&gt; 는 &lt;a href=&quot;#new&quot;&gt;new에&lt;/a&gt; 설명 된대로 사용자 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9d7fdef8ee5f35a68781b987a4bd55b551b5e336" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;join()&lt;/code&gt; does three things: it waits for a thread to exit, cleans up after it, and returns any data the thread may have produced. But what if you're not interested in the thread's return values, and you don't really care when the thread finishes? All you want is for the thread to get cleaned up after when it's done.</source>
          <target state="translated">&lt;code&gt;join()&lt;/code&gt; 은 세 가지 작업을 수행합니다. 스레드가 종료 될 때까지 기다렸다가 정리하고 스레드가 생성 한 모든 데이터를 반환합니다. 하지만 스레드의 반환 값에 관심이없고 스레드가 언제 끝날지 신경 쓰지 않는다면 어떨까요? 원하는 것은 스레드가 완료된 후 정리되는 것입니다.</target>
        </trans-unit>
        <trans-unit id="82f600d5a5ec1c47fef7c4bad5c4b07ebc4ec7f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;join&lt;/code&gt; waits for a thread to end and returns any values the thread exited with. &lt;code&gt;join&lt;/code&gt; will block until the thread has ended, though it won't block if the thread has already terminated.</source>
          <target state="translated">&lt;code&gt;join&lt;/code&gt; 은 스레드가 끝날 때까지 기다렸다가 스레드가 종료 한 모든 값을 반환합니다. &lt;code&gt;join&lt;/code&gt; 은 스레드가 종료 될 때까지 차단되지만 스레드가 이미 종료 된 경우에는 차단되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7caa9a76fe0a2484851b25ef43baeabc279b7cf3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keep_alive&lt;/code&gt; &amp;mdash; Whether to reuse the last connection (if for the same scheme, host and port) (defaults to 1)</source>
          <target state="translated">&lt;code&gt;keep_alive&lt;/code&gt; &amp;mdash; 마지막 연결을 재사용할지 여부 (동일한 체계, 호스트 및 포트에 대한 경우) (기본값 1)</target>
        </trans-unit>
        <trans-unit id="c5239c2a7e96ba60463f277c06ec272bfc1e133d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill('KILL', ...)&lt;/code&gt; can be used to terminate a pseudo-process by passing it the ID returned by fork(). The outcome of kill on a pseudo-process is unpredictable and it should not be used except under dire circumstances, because the operating system may not guarantee integrity of the process resources when a running thread is terminated. The process which implements the pseudo-processes can be blocked and the Perl interpreter hangs. Note that using &lt;code&gt;kill('KILL', ...)&lt;/code&gt; on a pseudo-process() may typically cause memory leaks, because the thread that implements the pseudo-process does not get a chance to clean up its resources.</source>
          <target state="translated">&lt;code&gt;kill('KILL', ...)&lt;/code&gt; 은 fork ()에서 반환 된 ID를 전달하여 의사 프로세스를 종료하는 데 사용할 수 있습니다. 의사 프로세스에 대한 강제 종료의 결과는 예측할 수 없으며 실행중인 스레드가 종료 될 때 운영 체제가 프로세스 리소스의 무결성을 보장하지 않을 수 있기 때문에 심각한 상황을 제외하고는 사용해서는 안됩니다. 의사 프로세스를 구현하는 프로세스가 차단 될 수 있으며 Perl 인터프리터가 중단됩니다. 참고 사용하여 &lt;code&gt;kill('KILL', ...)&lt;/code&gt; 의사 프로세스가 자원을 정리하는 기회를 얻을하지 않는 스레드를 구현하는 것이 있기 때문에, 메모리 누수 원인 일반적으로) 의사 과정 (에 있습니다.</target>
        </trans-unit>
        <trans-unit id="0eef3dae065531bba805f7320fe343d9e413e353" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill('TERM', ...)&lt;/code&gt; can also be used on pseudo-processes, but the signal will not be delivered while the pseudo-process is blocked by a system call, e.g. waiting for a socket to connect, or trying to read from a socket with no data available. Starting in Perl 5.14 the parent process will not wait for children to exit once they have been signalled with &lt;code&gt;kill('TERM', ...)&lt;/code&gt; to avoid deadlock during process exit. You will have to explicitly call waitpid() to make sure the child has time to clean-up itself, but you are then also responsible that the child is not blocking on I/O either.</source>
          <target state="translated">&lt;code&gt;kill('TERM', ...)&lt;/code&gt; 은 의사 프로세스에서도 사용할 수 있지만 의사 프로세스가 시스템 호출에 의해 차단되는 동안에는 신호가 전달되지 않습니다 (예 : 소켓 연결 대기 또는 읽기 시도). 사용 가능한 데이터가없는 소켓에서. Perl 5.14부터 부모 프로세스는 프로세스 종료 중에 교착 상태를 피하기 위해 &lt;code&gt;kill('TERM', ...)&lt;/code&gt; 으로 신호를 받으면 자식이 종료 될 때까지 기다리지 않습니다 . 자식이 스스로를 정리할 시간이 있는지 확인하기 위해 명시 적으로 waitpid ()를 호출해야하지만, 그런 다음 자식이 I / O를 차단하지 않는 것도 귀하의 책임입니다.</target>
        </trans-unit>
        <trans-unit id="6539369a23b2286b09807225af454e166df5f9af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;latin1&lt;/code&gt; or &lt;code&gt;ascii&lt;/code&gt; flags enabled</source>
          <target state="translated">&lt;code&gt;latin1&lt;/code&gt; 또는 &lt;code&gt;ascii&lt;/code&gt; 플래그 활성화</target>
        </trans-unit>
        <trans-unit id="76e5d23ad52b94ac87ccff8d84b8e8122490c818" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lexical_subs&lt;/code&gt; - allow the use of lexical subroutines.</source>
          <target state="translated">&lt;code&gt;lexical_subs&lt;/code&gt; - 어휘 서브 루틴 사용을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="d0fd51fe978af46143ef7e476cf8a91d754f9403" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lexical_topic&lt;/code&gt; - allow the use of lexical &lt;code&gt;$_&lt;/code&gt; via &lt;code&gt;my $_&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lexical_topic&lt;/code&gt; - &lt;code&gt;my $_&lt;/code&gt; 를 통해 어휘 &lt;code&gt;$_&lt;/code&gt; 사용을 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="778b80cfdd673f8fb55921afdf3d3a38219c358b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lib&lt;/code&gt; is maintained by the perl5-porters. Please direct any questions to the canonical mailing list. Anything that is applicable to the CPAN release can be sent to its maintainer, though.</source>
          <target state="translated">&lt;code&gt;lib&lt;/code&gt; 는 perl5-porter에 의해 유지 보수됩니다. 질문은 표준 메일 링리스트로 보내주십시오. CPAN 릴리스에 적용 가능한 모든 내용은 관리자에게 보낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a79ceaa8331c46467666b58e2fedd38e6ff4a586" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lib&lt;/code&gt; will warn about this. The sole exceptions are files with the &lt;code&gt;.par&lt;/code&gt; extension which are intended to be used as libraries.</source>
          <target state="translated">&lt;code&gt;lib&lt;/code&gt; 는 이것에 대해 경고 할 것입니다. 유일한 예외는 &lt;code&gt;.par&lt;/code&gt; 확장자를 가진 파일이며 라이브러리로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="7dbdb4f0306520f7abe5482b14dfce7a7aa50e8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;load_handlers&lt;/code&gt; will attempt to load the &lt;code&gt;MySourceHandler&lt;/code&gt; class by looking in &lt;code&gt;@INC&lt;/code&gt; for it in this order:</source>
          <target state="translated">&lt;code&gt;load_handlers&lt;/code&gt; 는 다음 순서 로 &lt;code&gt;@INC&lt;/code&gt; 를 찾아 &lt;code&gt;MySourceHandler&lt;/code&gt; 클래스 를로드하려고 시도합니다 .</target>
        </trans-unit>
        <trans-unit id="347f0b37a026018219924f60ce1e17db3ba49ed4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local($x)&lt;/code&gt; saves away the old value of the global variable &lt;code&gt;$x&lt;/code&gt; and assigns a new value for the duration of the subroutine</source>
          <target state="translated">&lt;code&gt;local($x)&lt;/code&gt; 은 전역 변수 &lt;code&gt;$x&lt;/code&gt; 의 이전 값을 저장 하고 서브 루틴 기간 동안 새 값을 할당합니다.</target>
        </trans-unit>
        <trans-unit id="7fc21d0f7a4117a8fe63729506522a787886c5b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local_address&lt;/code&gt; &amp;mdash; The local IP address to bind to</source>
          <target state="translated">&lt;code&gt;local_address&lt;/code&gt; &amp;mdash; 바인딩 할 로컬 IP 주소</target>
        </trans-unit>
        <trans-unit id="781e302076091acf759d87fc441e0a784931b032" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;localeconv()&lt;/code&gt; takes no arguments, and returns &lt;b&gt;a reference to&lt;/b&gt; a hash. The keys of this hash are variable names for formatting, such as &lt;code&gt;decimal_point&lt;/code&gt; and &lt;code&gt;thousands_sep&lt;/code&gt; . The values are the corresponding, er, values. See &lt;a href=&quot;posix#localeconv&quot;&gt;localeconv in POSIX&lt;/a&gt; for a longer example listing the categories an implementation might be expected to provide; some provide more and others fewer. You don't need an explicit &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; , because &lt;code&gt;localeconv()&lt;/code&gt; always observes the current locale.</source>
          <target state="translated">&lt;code&gt;localeconv()&lt;/code&gt; 는 인수를 사용하지 않으며 해시에 &lt;b&gt;대한 참조를&lt;/b&gt; 반환 &lt;b&gt;합니다&lt;/b&gt; . 이러한 해시 키는 다음과 같은 포맷을위한 변수 이름이다 &lt;code&gt;decimal_point&lt;/code&gt; 과 &lt;code&gt;thousands_sep&lt;/code&gt; . 값은 해당하는 값입니다. 구현이 제공 할 것으로 예상되는 범주를 나열하는 더 긴 예 &lt;a href=&quot;posix#localeconv&quot;&gt;는 POSIX의 localeconv를&lt;/a&gt; 참조하십시오 . 일부는 더 많이 제공하고 다른 일부는 더 적게 제공합니다. &lt;code&gt;localeconv()&lt;/code&gt; 항상 현재 로케일을 관찰 하므로 명시 적 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; 필요하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="3f66fab5460d4dc9728ad1ba256d520cd78b6a49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;localeconv()&lt;/code&gt; takes no arguments, and returns &lt;b&gt;a reference to&lt;/b&gt; a hash. The keys of this hash are variable names for formatting, such as &lt;code&gt;decimal_point&lt;/code&gt; and &lt;code&gt;thousands_sep&lt;/code&gt;. The values are the corresponding, er, values. See &lt;a href=&quot;posix#localeconv&quot;&gt;&quot;localeconv&quot; in POSIX&lt;/a&gt; for a longer example listing the categories an implementation might be expected to provide; some provide more and others fewer. You don't need an explicit &lt;code&gt;use locale&lt;/code&gt;, because &lt;code&gt;localeconv()&lt;/code&gt; always observes the current locale.</source>
          <target state="translated">&lt;code&gt;localeconv()&lt;/code&gt; 는 인수를 취하지 않고 해시에 &lt;b&gt;대한 참조를&lt;/b&gt; 반환 &lt;b&gt;합니다&lt;/b&gt; . 이 해시의 키는 &lt;code&gt;decimal_point&lt;/code&gt; 및 &lt;code&gt;thousands_sep&lt;/code&gt; _sep 와 같은 형식 지정을위한 변수 이름입니다 . 값은 해당하는 er 값입니다. 구현이 제공 할 것으로 예상되는 범주를 나열하는 더 긴 예제 &lt;a href=&quot;posix#localeconv&quot;&gt;는 POSIX의 &quot;localeconv&quot;를&lt;/a&gt; 참조하십시오 . 일부는 더 많은 것을 제공하고 다른 일부는 더 적게 제공합니다. &lt;code&gt;localeconv()&lt;/code&gt; 항상 현재 로케일을 관찰 하기 때문에 명시적인 &lt;code&gt;use locale&lt;/code&gt; 필요하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="8d0f45c80463df0b85e5ba5ab579ddd13fc8d375" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;localtime&lt;/code&gt; has the same range as &lt;a href=&quot;#gmtime&quot;&gt;&quot;gmtime&quot;&lt;/a&gt;, but because time zone rules change, its accuracy for historical and future times may degrade but usually by no more than an hour.</source>
          <target state="translated">&lt;code&gt;localtime&lt;/code&gt; 은 &lt;a href=&quot;#gmtime&quot;&gt;&quot;gmtime&quot;&lt;/a&gt; 과 동일한 범위를 갖지만 시간대 규칙이 변경되기 때문에 과거 및 미래 시간에 대한 정확도가 저하 될 수 있지만 일반적으로 한 시간을 넘지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2a5a8604c9701ff564566be832ebca55c49fc48f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lock()&lt;/code&gt; blocks the thread until the variable being locked is available. When &lt;code&gt;lock()&lt;/code&gt; returns, your thread can be sure that no other thread can lock that variable until the block containing the lock exits.</source>
          <target state="translated">&lt;code&gt;lock()&lt;/code&gt; 은 잠긴 변수를 사용할 수있을 때까지 스레드를 차단합니다. 때 &lt;code&gt;lock()&lt;/code&gt; 반환, 스레드는 다른 스레드가 잠금 종료를 포함하는 블록까지 그 변수를 잠글 수 있는지 확인 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="09118e18715d2d6315b0a6dadf4317baf4a851d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lock&lt;/code&gt; follows references exactly</source>
          <target state="translated">&lt;code&gt;lock&lt;/code&gt; 은 참조를 정확히 따릅니다.</target>
        </trans-unit>
        <trans-unit id="1e9281d382b272fae184a0276036a0f570f6c161" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lock&lt;/code&gt; places a &lt;b&gt;advisory&lt;/b&gt; lock on a variable until the lock goes out of scope. If the variable is locked by another thread, the &lt;code&gt;lock&lt;/code&gt; call will block until it's available. Multiple calls to &lt;code&gt;lock&lt;/code&gt; by the same thread from within dynamically nested scopes are safe -- the variable will remain locked until the outermost lock on the variable goes out of scope.</source>
          <target state="translated">&lt;code&gt;lock&lt;/code&gt; 지역 정보 &lt;b&gt;자문&lt;/b&gt; 잠금이 범위를 벗어날 때까지 변수에 잠금을. 변수가 다른 스레드에 의해 잠긴 경우 &lt;code&gt;lock&lt;/code&gt; 호출은 사용할 수있을 때까지 차단됩니다. 동적으로 중첩 된 범위 내에서 동일한 스레드에 의한 &lt;code&gt;lock&lt;/code&gt; 을 여러 번 호출하는 것은 안전합니다. 변수의 가장 바깥 쪽 잠금이 범위를 벗어날 때까지 변수는 잠긴 상태로 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="39ab05ea94c87b62ab35478b213c751ba976e63e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lock&lt;/code&gt; places a lock on a variable until the lock goes out of scope.</source>
          <target state="translated">&lt;code&gt;lock&lt;/code&gt; 은 잠금이 범위를 벗어날 때까지 변수에 잠금을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="3d252978807d4a7ce13ddf9824c30a75650ac4c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;loop&lt;/code&gt; is an optional preconstructed &lt;code&gt;enterloop&lt;/code&gt; op to use in the loop; if it is null then a suitable op will be constructed automatically. &lt;code&gt;expr&lt;/code&gt; supplies the loop's controlling expression. &lt;code&gt;block&lt;/code&gt; supplies the main body of the loop, and &lt;code&gt;cont&lt;/code&gt; optionally supplies a &lt;code&gt;continue&lt;/code&gt; block that operates as a second half of the body. All of these optree inputs are consumed by this function and become part of the constructed op tree.</source>
          <target state="translated">&lt;code&gt;loop&lt;/code&gt; 는 루프 에서 사용할 선택적 사전 &lt;code&gt;enterloop&lt;/code&gt; op입니다. null이면 적절한 연산이 자동으로 생성됩니다. &lt;code&gt;expr&lt;/code&gt; 은 루프의 제어 표현식을 제공합니다. &lt;code&gt;block&lt;/code&gt; 은 루프의 본체를 제공 하고 &lt;code&gt;cont&lt;/code&gt; 은 선택적으로 본체의 후반부 역할을하는 &lt;code&gt;continue&lt;/code&gt; 블록을 제공합니다. 이러한 모든 optree 입력은이 함수에 의해 소비되고 구성된 optree의 일부가됩니다.</target>
        </trans-unit>
        <trans-unit id="ea4a29ff759286dc4a0d846a54fba072c0f2b509" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lseek()&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/tell&quot;&gt;tell()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/sysseek&quot;&gt;sysseek()&lt;/a&gt;&lt;/code&gt; only work with files opened in binary mode.</source>
          <target state="translated">&lt;code&gt;lseek()&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/tell&quot;&gt;tell()&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;functions/sysseek&quot;&gt;sysseek()&lt;/a&gt;&lt;/code&gt; 는 이진 모드로 열린 파일에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="7b60fd594e78546a6d22f780ff2e2a2c8b8234c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lseek()&lt;/code&gt;, &lt;code&gt;tell()&lt;/code&gt; and &lt;code&gt;sysseek()&lt;/code&gt; only work with files opened in binary mode.</source>
          <target state="translated">&lt;code&gt;lseek()&lt;/code&gt; , &lt;code&gt;tell()&lt;/code&gt; 및 &lt;code&gt;sysseek()&lt;/code&gt; 는 바이너리 모드로 열린 파일에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="883ccb60af102a63dca29d53e2d458e06fa1f4e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lynx&lt;/code&gt; can only fetch remote files by dumping its contents to &lt;code&gt;STDOUT&lt;/code&gt; , which we in turn capture. If that content is a 'custom' error file (like, say, a &lt;code&gt;404 handler&lt;/code&gt;), you will get that contents instead.</source>
          <target state="translated">&lt;code&gt;lynx&lt;/code&gt; 는 그 내용을 &lt;code&gt;STDOUT&lt;/code&gt; 에 덤프하여 원격 파일을 가져올 수 있습니다 . 해당 컨텐츠가 'custom'오류 파일 (예 : &lt;code&gt;404 handler&lt;/code&gt; ) 인 경우 해당 컨텐츠를 대신 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="ca8181bd7507b944c5da73ef1d60cb5b9183b0f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lynx&lt;/code&gt; can only fetch remote files by dumping its contents to &lt;code&gt;STDOUT&lt;/code&gt;, which we in turn capture. If that content is a 'custom' error file (like, say, a &lt;code&gt;404 handler&lt;/code&gt;), you will get that contents instead.</source>
          <target state="translated">&lt;code&gt;lynx&lt;/code&gt; 는 내용을 &lt;code&gt;STDOUT&lt;/code&gt; 에 덤프하여 원격 파일 만 가져올 수 있으며 ,이를 차례로 캡처합니다. 해당 콘텐츠가 '사용자 지정'오류 파일 (예 : &lt;code&gt;404 handler&lt;/code&gt; )이면 대신 해당 콘텐츠를 받게됩니다.</target>
        </trans-unit>
        <trans-unit id="a63d1cb13b2e2d34f317b472c81b8bed46501684" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m''&lt;/code&gt;, the pattern of &lt;code&gt;s'''&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;m''&lt;/code&gt; , &lt;code&gt;s'''&lt;/code&gt; 의 패턴</target>
        </trans-unit>
        <trans-unit id="f18d18bb4566b22549963c5fa12983047cd227b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m/pattern/msixpogcdualn&lt;/code&gt; searches a string for a pattern match, applying the given options.</source>
          <target state="translated">&lt;code&gt;m/pattern/msixpogcdualn&lt;/code&gt; 은 주어진 옵션을 적용하여 문자열에서 패턴 일치를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="b6908309921cfb034efc3e4069f56b25e3fb5b8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m?pattern?&lt;/code&gt; is like &lt;code&gt;m/pattern/&lt;/code&gt; but matches only once. No alternate delimiters can be used. Must be reset with reset().</source>
          <target state="translated">&lt;code&gt;m?pattern?&lt;/code&gt; &lt;code&gt;m/pattern/&lt;/code&gt; 과 비슷 하지만 한 번만 일치합니다. 대체 구분 기호를 사용할 수 없습니다. reset ()으로 재설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="385b785dc276da4cc64862fa5145b732ada18a65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;major&lt;/code&gt;, &lt;code&gt;minor&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;major&lt;/code&gt;, &lt;code&gt;minor&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ab61daddd4de3c593af044da2e2d7ce6201973b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make&lt;/code&gt;, however, failed with output (excerpted) like this:</source>
          <target state="translated">&lt;code&gt;make&lt;/code&gt; 그러나 make 는 다음과 같은 출력 (발췌)으로 실패했습니다.</target>
        </trans-unit>
        <trans-unit id="d886031ca39127136a93f5c58154011b1571ac4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make_path&lt;/code&gt; was instructed to give the group ownership of created directories to the symbolic name [group], but &lt;code&gt;&lt;a href=&quot;../functions/getgrnam&quot;&gt;getgrnam&lt;/a&gt;&lt;/code&gt; did not return the corresponding numeric gid. The directory will be created, but group ownership will not be changed.</source>
          <target state="translated">&lt;code&gt;make_path&lt;/code&gt; 는 작성된 디렉토리의 그룹 소유권을 기호 이름 [group]에 부여하도록 지시되었지만 &lt;code&gt;&lt;a href=&quot;../functions/getgrnam&quot;&gt;getgrnam&lt;/a&gt;&lt;/code&gt; 은 해당 숫자 gid를 리턴하지 않았습니다. 디렉토리가 생성되지만 그룹 소유권은 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="58791d691818b086bac47e6b8fe80f3a3d7fc75e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make_path&lt;/code&gt; was instructed to give the group ownership of created directories to the symbolic name [group], but &lt;code&gt;getgrnam&lt;/code&gt; did not return the corresponding numeric gid. The directory will be created, but group ownership will not be changed.</source>
          <target state="translated">&lt;code&gt;make_path&lt;/code&gt; 는 생성 된 디렉토리의 그룹 소유권을 기호 이름 [group]에 제공하도록 지시되었지만 &lt;code&gt;getgrnam&lt;/code&gt; 은 해당 숫자 gid를 반환하지 않았습니다. 디렉토리가 생성되지만 그룹 소유권은 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3237359a6cb04586bfde967ca0039e3278fe9e70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make_path&lt;/code&gt; was instructed to give the ownership of created directories to the symbolic name [owner], but &lt;code&gt;&lt;a href=&quot;../functions/getpwnam&quot;&gt;getpwnam&lt;/a&gt;&lt;/code&gt; did not return the corresponding numeric uid. The directory will be created, but ownership will not be changed.</source>
          <target state="translated">&lt;code&gt;make_path&lt;/code&gt; 는 작성된 디렉토리의 소유권을 기호 이름 [owner]로 지정하도록 지시되었지만 &lt;code&gt;&lt;a href=&quot;../functions/getpwnam&quot;&gt;getpwnam&lt;/a&gt;&lt;/code&gt; 은 해당 숫자 uid를 리턴하지 않았습니다. 디렉토리가 생성되지만 소유권은 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0eb8e4fce86b24625447f0fee5c1f2f51f994fc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make_path&lt;/code&gt; was instructed to give the ownership of created directories to the symbolic name [owner], but &lt;code&gt;getpwnam&lt;/code&gt; did not return the corresponding numeric uid. The directory will be created, but ownership will not be changed.</source>
          <target state="translated">&lt;code&gt;make_path&lt;/code&gt; 는 생성 된 디렉토리의 소유권을 기호 이름 [owner]에 제공하도록 지시 받았지만 &lt;code&gt;getpwnam&lt;/code&gt; 은 해당 숫자 uid를 반환하지 않았습니다. ㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ 디렉토리가 생성되지만 소유권은 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1fc7e268861ebf6c487de7b9a430854e30e76cb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make_path&lt;/code&gt; was not given any paths to create. This message is only emitted if the routine is called with the traditional interface. The modern interface will remain silent if given nothing to do.</source>
          <target state="translated">&lt;code&gt;make_path&lt;/code&gt; 에 작성할 경로가 없습니다. 이 메시지는 루틴이 기존 인터페이스로 호출 된 경우에만 생성됩니다. 아무 것도 제공하지 않으면 최신 인터페이스는 자동으로 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="2e443672231a8aa8a3a54538e9ff5974e9e3a2dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make_path&lt;/code&gt; was unable to create the path. Probably some sort of permissions error at the point of departure or insufficient resources (such as free inodes on Unix).</source>
          <target state="translated">&lt;code&gt;make_path&lt;/code&gt; 가 경로를 만들 수 없습니다. 출발 지점에서 일종의 권한 오류가 발생하거나 리소스가 부족할 수 있습니다 (예 : Unix의 무료 inode).</target>
        </trans-unit>
        <trans-unit id="2755c6f5063eb2e334da849c0ce6318b9f39c061" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make_path&lt;/code&gt; was unable to create the path. Probably some sort of permissions error at the point of departure, or insufficient resources (such as free inodes on Unix).</source>
          <target state="translated">&lt;code&gt;make_path&lt;/code&gt; 가 경로를 작성할 수 없습니다. 출발 시점의 일종의 권한 오류이거나 부족한 리소스 (예 : Unix의 무료 inode)</target>
        </trans-unit>
        <trans-unit id="07a8fe35478388c546b0d41c18eefc372419fd9e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maketext&lt;/code&gt; and other methods to do with accessing %Lexicon data for a given language handle.</source>
          <target state="translated">&lt;code&gt;maketext&lt;/code&gt; 특정 언어 핸들에 대한 % Lexicon 데이터 액세스와 관련된 maketext 및 기타 방법</target>
        </trans-unit>
        <trans-unit id="8d3d67fea62a065d10c5926428fdebd26c6a5f56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mantissa()&lt;/code&gt; and &lt;code&gt;exponent()&lt;/code&gt; return the said parts of the BigInt such that:</source>
          <target state="translated">&lt;code&gt;mantissa()&lt;/code&gt; 및 &lt;code&gt;exponent()&lt;/code&gt; 는 다음과 같이 BigInt의 해당 부분을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="8b922a1e8b8a437e6a25aad879f34f0de9830b8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mask&lt;/code&gt; is recognised as an alias for this parameter.</source>
          <target state="translated">&lt;code&gt;mask&lt;/code&gt; 는이 매개 변수의 별명으로 인식됩니다.</target>
        </trans-unit>
        <trans-unit id="2cdbbfa91b28de49c104d6b9af4f6f87846706f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;matches&lt;/code&gt; is used to determine whether a given exception matches a particular role.</source>
          <target state="translated">&lt;code&gt;matches&lt;/code&gt; 는 주어진 예외가 특정 역할과 일치하는지 여부를 결정하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="735db1093393eee079ae5f4991770e04f6968586" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_redirect&lt;/code&gt; &amp;mdash; Maximum number of redirects allowed (defaults to 5)</source>
          <target state="translated">&lt;code&gt;max_redirect&lt;/code&gt; &amp;mdash; 허용되는 최대 리디렉션 수 (기본값 : 5)</target>
        </trans-unit>
        <trans-unit id="aeee7b55442af72793e10221eaf9fc76d8f198ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_size&lt;/code&gt; &amp;mdash; Maximum response size in bytes (only when not using a data callback). If defined, responses larger than this will return an exception.</source>
          <target state="translated">&lt;code&gt;max_size&lt;/code&gt; &amp;mdash; 최대 응답 크기 (바이트)입니다 (데이터 콜백을 사용하지 않는 경우에만). 정의 된 경우 이보다 큰 응답은 예외를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="03355b926946894926cfadae3a6b81818310b791" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memoize&lt;/code&gt; knows that if the normalized version of the arguments is the same for two argument lists, then it can safely look up the value that it computed for one argument list and return it as the result of calling the function with the other argument list, even if the argument lists look different.</source>
          <target state="translated">&lt;code&gt;memoize&lt;/code&gt; 는 인수의 정규화 된 버전이 두 인수 목록에 대해 동일하면 하나의 인수 목록에 대해 계산 한 값을 안전하게 찾아서 다른 인수 목록으로 함수를 호출 한 결과로 반환 할 수 있음을 알고 있습니다. 인수 목록이 다르게 보이는 경우</target>
        </trans-unit>
        <trans-unit id="638289935cbe995e57c2ecbf17c23e84ccb8dd5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;merge&lt;/code&gt; uses various strategies to combine different elements of the CPAN::Meta objects. The following strategies can be used with the extra_mappings argument of &lt;code&gt;new&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;merge&lt;/code&gt; 는 CPAN :: Meta 객체의 다른 요소를 결합하기 위해 다양한 전략을 사용합니다. 다음 전략은 &lt;code&gt;new&lt;/code&gt; 의 extra_mappings 인수와 함께 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="588d0d71e67f680f937b2933e4e80482741a6b27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;meth&lt;/code&gt; is the name of the method to call.</source>
          <target state="translated">&lt;code&gt;meth&lt;/code&gt; 는 호출 할 메소드의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="712fb23828e7aa39570d1c187a557f284fbccd22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mg_freeext(sv, how, NULL)&lt;/code&gt; is equivalent to &lt;code&gt;mg_free_type(sv, how)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mg_freeext(sv, how, NULL)&lt;/code&gt; 은 &lt;code&gt;mg_free_type(sv, how)&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="c382bf574ac941794f4ceb11f1a7cf0a554b70e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;miniperl -MCross -MConfig -we 1&lt;/code&gt; should run okay, and it will provide right</source>
          <target state="translated">&lt;code&gt;miniperl -MCross -MConfig -we 1&lt;/code&gt; 을 실행해야합니다.</target>
        </trans-unit>
        <trans-unit id="4fffeff3899ad34654b8fd715931df104143ede2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minlen&lt;/code&gt;&lt;code&gt;minlenret&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;minlen&lt;/code&gt;&lt;code&gt;minlenret&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e7ff8f6ef90463a78a4980b3e772f012f8f89756" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minlenret&lt;/code&gt; is the minimum length (in characters) of the string that would be found in $&amp;amp; after a match.</source>
          <target state="translated">&lt;code&gt;minlenret&lt;/code&gt; 은 일치 후 $ &amp;amp;에서 찾을 수있는 문자열의 최소 길이 (문자)입니다.</target>
        </trans-unit>
        <trans-unit id="6bbd4a399f25a390cfec881966b0de3c042c6005" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;rmdir&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;rmdir&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa93a538eb746e066effec46888283ca286ffddb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mode&lt;/code&gt; may have the values &lt;code&gt;deterministic&lt;/code&gt; for the case where all questions come in the order written down and &lt;code&gt;anyorder&lt;/code&gt; for the case where the questions may come in any order. The default mode is &lt;code&gt;deterministic&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; 값을 가질 수 &lt;code&gt;deterministic&lt;/code&gt; 모든 질문에 적어 및 순서에 오는 경우에 대한 &lt;code&gt;anyorder&lt;/code&gt; 질문은 임의의 순서로 올 수있는 경우에한다. 기본 모드는 &lt;code&gt;deterministic&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1e1fa5e0cf856c0cfac64557627a7bf6ca8e2afc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my($x)&lt;/code&gt; creates a new variable that is only visible in the current subroutine. This is done at compile-time, so it is called lexical or static scoping. my() always affects private variables, also called lexical variables or (improperly) static(ly scoped) variables.</source>
          <target state="translated">&lt;code&gt;my($x)&lt;/code&gt; 는 현재 서브 루틴에서만 볼 수있는 새 변수를 만듭니다. 이것은 컴파일 타임에 수행되므로 어휘 또는 정적 범위 지정이라고합니다. my ()는 항상 어휘 변수 또는 (부적절한) 정적 (범위가 지정된) 변수라고도하는 전용 변수에 영향을줍니다.</target>
        </trans-unit>
        <trans-unit id="3be2cea04198936ddec55cc82c2731dab3af0258" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my()&lt;/code&gt; and &lt;code&gt;local()&lt;/code&gt; give list context to the right hand side of &lt;code&gt;=&lt;/code&gt;. The &amp;lt;$fh&amp;gt; read operation, like so many of Perl's functions and operators, can tell which context it was called in and behaves appropriately. In general, the scalar() function can help. This function does nothing to the data itself (contrary to popular myth) but rather tells its argument to behave in whatever its scalar fashion is. If that function doesn't have a defined scalar behavior, this of course doesn't help you (such as with sort()).</source>
          <target state="translated">&lt;code&gt;my()&lt;/code&gt; 및 &lt;code&gt;local()&lt;/code&gt; 은 &lt;code&gt;=&lt;/code&gt; 의 오른쪽에 목록 컨텍스트를 제공합니다 . Perl의 많은 함수 및 연산자와 마찬가지로 &amp;lt;$ fh&amp;gt; 읽기 작업은 호출 된 컨텍스트를 알 수 있고 적절하게 작동합니다. 일반적으로 scalar () 함수가 도움이 될 수 있습니다. 이 함수는 데이터 자체에 아무 일도하지 않고 (대중적인 신화와는 달리) 오히려 스칼라 방식이 무엇이든 그 인수가 작동하도록 지시합니다. 해당 함수에 정의 된 스칼라 동작이없는 경우 이것은 물론 도움이되지 않습니다 (예 : sort ()).</target>
        </trans-unit>
        <trans-unit id="a3f6bd4829fd2ba12633873148c47d9a80090bdb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my&lt;/code&gt; variables are scoped to the current block, not to the current function. If you write &lt;code&gt;{my $x;} $x;&lt;/code&gt;, the second &lt;code&gt;$x&lt;/code&gt; does not refer to the one declared inside the block.</source>
          <target state="translated">&lt;code&gt;my&lt;/code&gt; 변수는 현재 함수가 아닌 현재 블록으로 범위가 지정됩니다. 당신이 작성하는 경우 &lt;code&gt;{my $x;} $x;&lt;/code&gt; , 두 번째 &lt;code&gt;$x&lt;/code&gt; 는 블록 내부에 선언 된 것을 참조하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="71b07f3d996d9ac376632ed1fb891e52a9c59c4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_perl&lt;/code&gt; points to the Perl interpreter that is to parse the script. It must have been previously created through the use of &lt;a href=&quot;#perl_alloc&quot;&gt;&quot;perl_alloc&quot;&lt;/a&gt; and &lt;a href=&quot;#perl_construct&quot;&gt;&quot;perl_construct&quot;&lt;/a&gt;. &lt;code&gt;xsinit&lt;/code&gt; points to a callback function that will be called to set up the ability for this Perl interpreter to load XS extensions, or may be null to perform no such setup.</source>
          <target state="translated">&lt;code&gt;my_perl&lt;/code&gt; 은 스크립트를 구문 분석 할 Perl 인터프리터를 가리 킵니다. &lt;a href=&quot;#perl_alloc&quot;&gt;&quot;perl_alloc&quot;&lt;/a&gt; 및 &lt;a href=&quot;#perl_construct&quot;&gt;&quot;perl_construct&quot;&lt;/a&gt; 사용을 통해 이전에 생성 된 것이어야합니다 . &lt;code&gt;xsinit&lt;/code&gt; 는이 Perl 인터프리터가 XS 확장을로드하는 기능을 설정하기 위해 호출 될 콜백 함수를 가리 킵니다. 또는 그러한 설정을 수행하지 않으려면 null 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e31baaedd01c699e3021af78994eb9360ab9836b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_perl&lt;/code&gt; points to the Perl interpreter. It must have been previously created through the use of &lt;a href=&quot;#perl_alloc&quot;&gt;&quot;perl_alloc&quot;&lt;/a&gt; and &lt;a href=&quot;#perl_construct&quot;&gt;&quot;perl_construct&quot;&lt;/a&gt;, and initialised through &lt;a href=&quot;#perl_parse&quot;&gt;&quot;perl_parse&quot;&lt;/a&gt;. This function should not be called if &lt;a href=&quot;#perl_parse&quot;&gt;&quot;perl_parse&quot;&lt;/a&gt; returned a non-zero value, indicating a failure in initialisation or compilation.</source>
          <target state="translated">&lt;code&gt;my_perl&lt;/code&gt; 은 Perl 인터프리터를 가리 킵니다. 이전에 &lt;a href=&quot;#perl_alloc&quot;&gt;&quot;perl_alloc&quot;&lt;/a&gt; 및 &lt;a href=&quot;#perl_construct&quot;&gt;&quot;perl_construct&quot;&lt;/a&gt; 사용을 통해 생성 되고 &quot;perl_parse&quot; 를 통해 초기화 &lt;a href=&quot;#perl_parse&quot;&gt;되어야&lt;/a&gt; 합니다. &lt;a href=&quot;#perl_parse&quot;&gt;&quot;perl_parse&quot;&lt;/a&gt; 가 초기화 또는 컴파일 실패를 나타내는 0이 아닌 값을 반환 한 경우이 함수를 호출하면 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="1947b5fb6cb99db3b3240eacc1379b1a337b2c5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_perl&lt;/code&gt; points to the Perl interpreter. It must have been previously created through the use of &lt;a href=&quot;#perl_alloc&quot;&gt;&quot;perl_alloc&quot;&lt;/a&gt; and &lt;a href=&quot;#perl_construct&quot;&gt;&quot;perl_construct&quot;&lt;/a&gt;. It may have been initialised through &lt;a href=&quot;#perl_parse&quot;&gt;&quot;perl_parse&quot;&lt;/a&gt;, and may have been used through &lt;a href=&quot;#perl_run&quot;&gt;&quot;perl_run&quot;&lt;/a&gt; and other means. This function should be called for any Perl interpreter that has been constructed with &lt;a href=&quot;#perl_construct&quot;&gt;&quot;perl_construct&quot;&lt;/a&gt;, even if subsequent operations on it failed, for example if &lt;a href=&quot;#perl_parse&quot;&gt;&quot;perl_parse&quot;&lt;/a&gt; returned a non-zero value.</source>
          <target state="translated">&lt;code&gt;my_perl&lt;/code&gt; 은 Perl 인터프리터를 가리 킵니다. &lt;a href=&quot;#perl_alloc&quot;&gt;&quot;perl_alloc&quot;&lt;/a&gt; 및 &lt;a href=&quot;#perl_construct&quot;&gt;&quot;perl_construct&quot;&lt;/a&gt; 사용을 통해 이전에 생성 된 것이어야합니다 . &lt;a href=&quot;#perl_parse&quot;&gt;&quot;perl_parse&quot;를&lt;/a&gt; 통해 초기화되었을 수 있으며 &lt;a href=&quot;#perl_run&quot;&gt;&quot;perl_run&quot;&lt;/a&gt; 및 기타 수단을 통해 사용되었을 수 있습니다 . 이 함수는 &lt;a href=&quot;#perl_construct&quot;&gt;&quot;perl_construct&quot;&lt;/a&gt; 로 구성된 모든 Perl 인터프리터에 대해 호출되어야합니다. 예를 들어 &lt;a href=&quot;#perl_parse&quot;&gt;&quot;perl_parse&quot;&lt;/a&gt; 가 0이 아닌 값을 반환 한 경우와 같이 후속 작업이 실패한 경우에도 마찬가지 입니다.</target>
        </trans-unit>
        <trans-unit id="77a292f2351d2499cb4d3956fe35448489fd6cf1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_popen&lt;/code&gt; uses</source>
          <target state="translated">&lt;code&gt;my_popen&lt;/code&gt; 은</target>
        </trans-unit>
        <trans-unit id="fe304a6dc30cae0afd16e8b92b6cd1cd7ce95c7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_strlcat()&lt;/code&gt; appends string &lt;code&gt;src&lt;/code&gt; to the end of &lt;code&gt;dst&lt;/code&gt; . It will append at most &lt;code&gt;size - strlen(dst) - 1&lt;/code&gt; characters. It will then &lt;code&gt;NUL&lt;/code&gt; -terminate, unless &lt;code&gt;size&lt;/code&gt; is 0 or the original &lt;code&gt;dst&lt;/code&gt; string was longer than &lt;code&gt;size&lt;/code&gt; (in practice this should not happen as it means that either &lt;code&gt;size&lt;/code&gt; is incorrect or that &lt;code&gt;dst&lt;/code&gt; is not a proper &lt;code&gt;NUL&lt;/code&gt; -terminated string).</source>
          <target state="translated">&lt;code&gt;my_strlcat()&lt;/code&gt; 문자열 &lt;code&gt;src&lt;/code&gt; 를 &lt;code&gt;dst&lt;/code&gt; 끝에 추가합니다 . 최대 &lt;code&gt;size - strlen(dst) - 1&lt;/code&gt; 자를 추가합니다. 그런 다음 &lt;code&gt;size&lt;/code&gt; 가 0이거나 원래 &lt;code&gt;dst&lt;/code&gt; 문자열이 &lt;code&gt;size&lt;/code&gt; 보다 길지 않은 경우 &lt;code&gt;NUL&lt;/code&gt; 종료 됩니다 (실제로는 &lt;code&gt;size&lt;/code&gt; 가 잘못되었거나 &lt;code&gt;dst&lt;/code&gt; 가 적절한 &lt;code&gt;NUL&lt;/code&gt; 종료 문자열 이 아니기 때문에 발생하지 않아야 합니다).</target>
        </trans-unit>
        <trans-unit id="f1af893d16b0d24596b5c31d0490c98a1626dcfd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_strlcat()&lt;/code&gt; appends string &lt;code&gt;src&lt;/code&gt; to the end of &lt;code&gt;dst&lt;/code&gt;. It will append at most &lt;code&gt;size - strlen(dst) - 1&lt;/code&gt; characters. It will then &lt;code&gt;NUL&lt;/code&gt;-terminate, unless &lt;code&gt;size&lt;/code&gt; is 0 or the original &lt;code&gt;dst&lt;/code&gt; string was longer than &lt;code&gt;size&lt;/code&gt; (in practice this should not happen as it means that either &lt;code&gt;size&lt;/code&gt; is incorrect or that &lt;code&gt;dst&lt;/code&gt; is not a proper &lt;code&gt;NUL&lt;/code&gt;-terminated string).</source>
          <target state="translated">&lt;code&gt;my_strlcat()&lt;/code&gt; 은 &lt;code&gt;dst&lt;/code&gt; 끝에 &lt;code&gt;src&lt;/code&gt; 문자열을 추가합니다 . 최대 &lt;code&gt;size - strlen(dst) - 1&lt;/code&gt; 자를 추가합니다. 그런 다음 것이다 &lt;code&gt;NUL&lt;/code&gt; 하지 않는 -terminate, &lt;code&gt;size&lt;/code&gt; 0 또는 원래 &lt;code&gt;dst&lt;/code&gt; 문자열보다 더 길었다 &lt;code&gt;size&lt;/code&gt; (실제로는 두한다는 뜻 이런 일이 안 &lt;code&gt;size&lt;/code&gt; 잘못 또는 &lt;code&gt;dst&lt;/code&gt; 적절하지 &lt;code&gt;NUL&lt;/code&gt; 로 끝나는 문자열).</target>
        </trans-unit>
        <trans-unit id="cdedecbe5c820473f669d0af506ce2015ddd5193" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_strlcpy()&lt;/code&gt; copies up to &lt;code&gt;size - 1&lt;/code&gt; characters from the string &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dst&lt;/code&gt; , &lt;code&gt;NUL&lt;/code&gt; -terminating the result if &lt;code&gt;size&lt;/code&gt; is not 0.</source>
          <target state="translated">&lt;code&gt;my_strlcpy()&lt;/code&gt; 는 문자열 &lt;code&gt;src&lt;/code&gt; 에서 &lt;code&gt;dst&lt;/code&gt; 까지 &lt;code&gt;size - 1&lt;/code&gt; 자를 최대 1 까지 복사하고 , &lt;code&gt;size&lt;/code&gt; 가 0이 아닌 경우 결과를 종료하는 &lt;code&gt;NUL&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c49e5ae33724b1666c685d2e7a72b62073255c92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_strlcpy()&lt;/code&gt; copies up to &lt;code&gt;size - 1&lt;/code&gt; characters from the string &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dst&lt;/code&gt;, &lt;code&gt;NUL&lt;/code&gt;-terminating the result if &lt;code&gt;size&lt;/code&gt; is not 0.</source>
          <target state="translated">&lt;code&gt;my_strlcpy()&lt;/code&gt; 까지 복사 &lt;code&gt;size - 1&lt;/code&gt; 문자열의 문자 &lt;code&gt;src&lt;/code&gt; 에 &lt;code&gt;dst&lt;/code&gt; , &lt;code&gt;NUL&lt;/code&gt; 은 경우 결과를 -terminating &lt;code&gt;size&lt;/code&gt; 0이 아니다.</target>
        </trans-unit>
        <trans-unit id="b1ec8d3fbd253d28a1634c761ae477719ded646f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_strnlen()&lt;/code&gt; computes the length of the string, up to &lt;code&gt;maxlen&lt;/code&gt; characters. It will never attempt to address more than &lt;code&gt;maxlen&lt;/code&gt; characters, making it suitable for use with strings that are not guaranteed to be NUL-terminated.</source>
          <target state="translated">&lt;code&gt;my_strnlen()&lt;/code&gt; 은 최대 &lt;code&gt;maxlen&lt;/code&gt; 문자 까지 문자열의 길이를 계산합니다 . &lt;code&gt;maxlen&lt;/code&gt; 문자 이상을 주소 지정하려고 시도 하지 않으므로 NUL 종료가 보장되지 않는 문자열과 함께 사용하기에 적합합니다.</target>
        </trans-unit>
        <trans-unit id="7c4001332f8ab98ef832acfc949829d1eb7d7cb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n&lt;/code&gt; , &lt;code&gt;N&lt;/code&gt; , &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt; accept the &lt;code&gt;!&lt;/code&gt; modifier to represent signed 16-/32-bit integers in big-/little-endian order. This is portable only when all platforms sharing packed data use the same binary representation for signed integers; for example, when all platforms use two's-complement representation.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; , &lt;code&gt;N&lt;/code&gt; , &lt;code&gt;v&lt;/code&gt; 및 &lt;code&gt;V&lt;/code&gt; 는 &lt;code&gt;!&lt;/code&gt; 부호있는 16/32 비트 정수를 빅 / 리틀 엔디안 순서로 나타내도록 수정 자. 이것은 묶음 데이터를 공유하는 모든 플랫폼이 부호있는 정수에 대해 동일한 이진 표현을 사용하는 경우에만 이식 가능합니다. 예를 들어, 모든 플랫폼이 2의 보수 표현을 사용하는 경우.</target>
        </trans-unit>
        <trans-unit id="0844e932cd53e139fa2cf155e2c24b47a2e370a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n&lt;/code&gt;, &lt;code&gt;N&lt;/code&gt;, &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt; accept the &lt;code&gt;!&lt;/code&gt; modifier to represent signed 16-/32-bit integers in big-/little-endian order. This is portable only when all platforms sharing packed data use the same binary representation for signed integers; for example, when all platforms use two's-complement representation.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; , &lt;code&gt;N&lt;/code&gt; , &lt;code&gt;v&lt;/code&gt; 및 &lt;code&gt;V&lt;/code&gt; 는 &lt;code&gt;!&lt;/code&gt; 빅 / 리틀 엔디안 순서로 부호있는 16/32 비트 정수를 나타내는 수정 자. 압축 된 데이터를 공유하는 모든 플랫폼이 부호있는 정수에 대해 동일한 이진 표현을 사용하는 경우에만 이식 가능합니다. 예를 들어 모든 플랫폼이 2의 보수 표현을 사용하는 경우입니다.</target>
        </trans-unit>
        <trans-unit id="ee6a21fed22915a331be3383e5b5b4032f977a5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; give the name. The name must be unqualified; that is, it must not include the package name. If &lt;code&gt;gv&lt;/code&gt; is a stash element, it is the caller's responsibility to ensure that the name passed to this function matches the name of the element. If it does not match, perl's internal bookkeeping will get out of sync.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 과 &lt;code&gt;len&lt;/code&gt; 은 이름을 제공합니다. 이름은 자격이 없어야합니다. 즉, 패키지 이름을 포함하지 않아야합니다. 경우 &lt;code&gt;gv&lt;/code&gt; 숨김 요소이며,이 함수에 전달 된 이름이 요소의 이름과 일치하는지 확인하기 위해 호출 측의 책임입니다. 일치하지 않으면 perl의 내부 부기 기능이 동기화되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="505efe65fc0e388dda45d46fcc78a224697b6312" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;namegv&lt;/code&gt; may not actually be a GV. For efficiency, perl may pass a CV or other SV instead. Whatever is passed can be used as the first argument to &lt;a href=&quot;#cv_name&quot;&gt;&quot;cv_name&quot;&lt;/a&gt;. You can force perl to pass a GV by including &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; in the &lt;code&gt;ckflags&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;namegv&lt;/code&gt; 는 실제로 GV가 아닐 수 있습니다. 효율성을 위해 perl은 대신 CV 또는 다른 SV를 전달할 수 있습니다. 전달 된 것은 무엇이든 &lt;a href=&quot;#cv_name&quot;&gt;&quot;cv_name&quot;&lt;/a&gt; 의 첫 번째 인수로 사용할 수 있습니다 . 당신은을 포함하여 GV를 전달하는 펄을 강제 할 수 &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; 을 에 &lt;code&gt;ckflags&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="65dcbed646c24c8b29a7a565d322acb0ec423da0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;namegv&lt;/code&gt; may not actually be a GV. If the &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; bit is clear in &lt;code&gt;*ckflags_p&lt;/code&gt;, it is permitted to pass a CV or other SV instead, anything that can be used as the first argument to &lt;a href=&quot;#cv_name&quot;&gt;&quot;cv_name&quot;&lt;/a&gt;. If the &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; bit is set in &lt;code&gt;*ckflags_p&lt;/code&gt; then the check function requires &lt;code&gt;namegv&lt;/code&gt; to be a genuine GV.</source>
          <target state="translated">&lt;code&gt;namegv&lt;/code&gt; 는 실제로 GV가 아닐 수 있습니다. 는 IF &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; 의 비트에 분명하다 &lt;code&gt;*ckflags_p&lt;/code&gt; , CV 나 대신 다른 SV에 첫 번째 인수로 사용할 수 있습니다 아무것도 통과 허용 &lt;a href=&quot;#cv_name&quot;&gt;&quot;cv_name을&quot;&lt;/a&gt; . &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; 비트가 &lt;code&gt;*ckflags_p&lt;/code&gt; 에 설정되어 있으면 check 함수는 &lt;code&gt;namegv&lt;/code&gt; 가 진짜 GV 여야합니다.</target>
        </trans-unit>
        <trans-unit id="1da77eb1fcc99f55a77cfa3187a8be6d00b79f88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;namepv&lt;/code&gt;/&lt;code&gt;namelen&lt;/code&gt; specify the variable's name, including leading sigil. If &lt;code&gt;typestash&lt;/code&gt; is non-null, the name is for a typed lexical, and this identifies the type. If &lt;code&gt;ourstash&lt;/code&gt; is non-null, it's a lexical reference to a package variable, and this identifies the package. The following flags can be OR'ed together:</source>
          <target state="translated">&lt;code&gt;namepv&lt;/code&gt; / &lt;code&gt;namelen&lt;/code&gt; 은 선행시길을 포함하여 변수의 이름을 지정합니다. &lt;code&gt;typestash&lt;/code&gt; 가 널이 아닌 경우 이름은 유형이 지정된 어휘 용이며 유형을 식별합니다. 경우 &lt;code&gt;ourstash&lt;/code&gt; 가 null 이외, 그것은 패키지 변수에 대한 어휘 참조, 그리고이 식별 패키지. 다음 플래그는 함께 OR로 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e95c68737e4cdbac2fa96320e25fc1fa20440782" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ndelay&lt;/code&gt; - Open the connection immediately (normally, the connection is opened when the first message is logged).</source>
          <target state="translated">&lt;code&gt;ndelay&lt;/code&gt; - 연결을 즉시 엽니 다 (일반적으로 첫 번째 메시지가 기록 될 때 연결이 열립니다).</target>
        </trans-unit>
        <trans-unit id="7953c406c8ff699f7523d2c0fa454774e594fafa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new()&lt;/code&gt; is a synonym for &lt;code&gt;create()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;new()&lt;/code&gt; 는 &lt;code&gt;create()&lt;/code&gt; 의 동의어입니다 .</target>
        </trans-unit>
        <trans-unit id="246e4e12c5e8b7fc27f98e6de494470349960771" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new()&lt;/code&gt; is a synonym for &lt;code&gt;create()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;new()&lt;/code&gt; 는 &lt;code&gt;create()&lt;/code&gt; 의 동의어입니다 .</target>
        </trans-unit>
        <trans-unit id="da2a9ff681510122f5292361c80d05ba72747aae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new&lt;/code&gt; creates a new semaphore, and initializes its count to the specified number (which must be an integer). If no number is specified, the semaphore's count defaults to 1.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 는 새로운 세마포어를 만들고 지정된 수 (정수 여야 함)로 카운트를 초기화합니다. 숫자를 지정하지 않으면 세마포어 카운트의 기본값은 1입니다.</target>
        </trans-unit>
        <trans-unit id="efedbfabb0d57daca4e55f1c80323100b61e0eb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new&lt;/code&gt; is the constructor for &lt;code&gt;IO::Dir&lt;/code&gt; objects. It accepts one optional argument which, if given, &lt;code&gt;new&lt;/code&gt; will pass to &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 는 &lt;code&gt;IO::Dir&lt;/code&gt; 객체 의 생성자입니다 . 그것은 주어진 경우, 하나 개의 선택적 인수 받아 &lt;code&gt;new&lt;/code&gt; 가 &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 도록 전달</target>
        </trans-unit>
        <trans-unit id="3c47c2969ff9b3b9f7bd94f334a283572d1c7f86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new&lt;/code&gt; is the constructor for &lt;code&gt;IO::Dir&lt;/code&gt; objects. It accepts one optional argument which, if given, &lt;code&gt;new&lt;/code&gt; will pass to &lt;code&gt;open&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 는 &lt;code&gt;IO::Dir&lt;/code&gt; 객체 의 생성자입니다 . 주어진 경우 &lt;code&gt;new&lt;/code&gt; 가 &lt;code&gt;open&lt;/code&gt; 도록 전달 하는 하나의 선택적 인수를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="35ebed1aa25ba5c1ac9f9e4c204e2addbac198e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new&lt;/code&gt; starts a new thread of execution in the referenced subroutine. The optional list is passed as parameters to the subroutine. Execution continues in both the subroutine and the code after the &lt;code&gt;new&lt;/code&gt; call.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 는 참조 된 서브 루틴에서 새로운 실행 스레드를 시작합니다. 선택적 목록은 매개 변수로 서브 루틴에 전달됩니다. &lt;code&gt;new&lt;/code&gt; 호출 후 서브 루틴과 코드 모두에서 실행이 계속됩니다 .</target>
        </trans-unit>
        <trans-unit id="6d41331a192901f578b387cab4cc0d24438aec85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new_ok()&lt;/code&gt;&lt;code&gt;note()&lt;/code&gt; and &lt;code&gt;explain()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;new_ok()&lt;/code&gt; &lt;code&gt;note()&lt;/code&gt; 및 &lt;code&gt;explain()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7152783cf0f9c5159afb5dc6873309aa1eacea66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no bytes&lt;/code&gt; can be used to reverse the effect of &lt;code&gt;use bytes&lt;/code&gt; within the current lexical scope.</source>
          <target state="translated">&lt;code&gt;no bytes&lt;/code&gt; 현재 어휘 범위 내에서 &lt;code&gt;use bytes&lt;/code&gt; 의 효과를 되 돌리는 데 바이트를 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="a26c54b2961967f48d7aafce8700f53ea0a4ade3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no feature 'unicode_strings'&lt;/code&gt; tells the compiler to use the traditional Perl rules wherein the native character set rules is used unless it is clear to Perl that Unicode is desired. This can lead to some surprises when the behavior suddenly changes. (See &lt;a href=&quot;perlunicode#The-%22Unicode-Bug%22&quot;&gt;&quot;The &quot;Unicode Bug&quot;&quot; in perlunicode&lt;/a&gt; for details.) For this reason, if you are potentially using Unicode in your program, the &lt;code&gt;use feature 'unicode_strings'&lt;/code&gt; subpragma is &lt;b&gt;strongly&lt;/b&gt; recommended.</source>
          <target state="translated">&lt;code&gt;no feature 'unicode_strings'&lt;/code&gt; 은 컴파일러에게 유니 코드가 필요하다는 사실이 Perl에게 명확하지 않은 한 기본 문자 집합 규칙이 사용되는 전통적인 Perl 규칙을 사용하도록 지시하지 않습니다. 이것은 행동이 갑자기 변할 때 약간의 놀라움으로 이어질 수 있습니다. (자세한 내용 &lt;a href=&quot;perlunicode#The-%22Unicode-Bug%22&quot;&gt;은 perlunicode의 &quot;The&quot;Unicode Bug &quot;&quot;&lt;/a&gt; 를 참조하십시오.) 이러한 이유로 프로그램에서 잠재적으로 유니 코드를 &lt;code&gt;use feature 'unicode_strings'&lt;/code&gt; 하는 경우 'unicode_strings' 서브 프라 그마 기능을 사용 &lt;b&gt;하는&lt;/b&gt; 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="37881fef53e1354528db97e9719ec39121a9bfd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no feature&lt;/code&gt; with no features specified will reset to the default group. To disable</source>
          <target state="translated">&lt;code&gt;no feature&lt;/code&gt; 지정된 기능 이없는 기능은 기본 그룹으로 재설정됩니다. 비활성화하려면</target>
        </trans-unit>
        <trans-unit id="dec3d04f34da29bde4052794af89e457120eb309" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no re '/&lt;i&gt;flags&lt;/i&gt;'&lt;/code&gt; will turn off the effect of &lt;code&gt;use re '/&lt;i&gt;flags&lt;/i&gt;'&lt;/code&gt; for the given flags.</source>
          <target state="translated">&lt;code&gt;no re '/&lt;i&gt;flags&lt;/i&gt;'&lt;/code&gt; 는 주어진 플래그에 대한 &lt;code&gt;use re '/&lt;i&gt;flags&lt;/i&gt;'&lt;/code&gt; 의 효과를 끕니다 .</target>
        </trans-unit>
        <trans-unit id="1028ecddd058bf1fc3c87c0a21533cf8523a0ca1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_proxy&lt;/code&gt; &amp;mdash; List of domain suffixes that should not be proxied. Must be a comma-separated string or an array reference. (default is &lt;code&gt;$ENV{no_proxy}&lt;/code&gt; &amp;mdash;)</source>
          <target state="translated">&lt;code&gt;no_proxy&lt;/code&gt; &amp;mdash; 프록시하지 않아야하는 도메인 접미사 목록입니다. 쉼표로 구분 된 문자열이거나 배열 참조 여야합니다. (기본값은 &lt;code&gt;$ENV{no_proxy}&lt;/code&gt; &amp;mdash;)</target>
        </trans-unit>
        <trans-unit id="a92dfd8fef1985419787a429944b6929b7d15145" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noeol&lt;/code&gt; - When set to true, no end of line character (&lt;code&gt;\n&lt;/code&gt; ) will be appended to the message. This can be useful for some buggy syslog daemons.</source>
          <target state="translated">&lt;code&gt;noeol&lt;/code&gt; -true로 설정하면 줄 끝 문자 ( &lt;code&gt;\n&lt;/code&gt; )가 메시지에 추가 되지 않습니다 . 이것은 버그가 많은 syslog 데몬에 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cb0a6b6ffe1f8acfe1a779ce54faf3e76c8e41b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noeol&lt;/code&gt; - When set to true, no end of line character (&lt;code&gt;\n&lt;/code&gt;) will be appended to the message. This can be useful for some syslog daemons. Added in &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.29.</source>
          <target state="translated">&lt;code&gt;noeol&lt;/code&gt; -true로 설정하면 줄 끝 문자 ( &lt;code&gt;\n&lt;/code&gt; )가 메시지에 추가 되지 않습니다 . 이것은 일부 syslog 데몬에 유용 할 수 있습니다. &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.29에 추가되었습니다 .</target>
        </trans-unit>
        <trans-unit id="a7da13afac64a19ada71fa128b3727ac19b9a817" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nofatal&lt;/code&gt; - When set to true, &lt;code&gt;openlog()&lt;/code&gt; and &lt;code&gt;syslog()&lt;/code&gt; will only emit warnings instead of dying if the connection to the syslog can't be established.</source>
          <target state="translated">&lt;code&gt;nofatal&lt;/code&gt; -true로 설정하면 &lt;code&gt;openlog()&lt;/code&gt; 하면 syslog에 연결할 수없는 경우 및 &lt;code&gt;syslog()&lt;/code&gt; 가 죽지 않고 경고 만 표시합니다.</target>
        </trans-unit>
        <trans-unit id="ca122e6abeda68819afe86c5366b7c3712efdf56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nofatal&lt;/code&gt; - When set to true, &lt;code&gt;openlog()&lt;/code&gt; and &lt;code&gt;syslog()&lt;/code&gt; will only emit warnings instead of dying if the connection to the syslog can't be established. Added in &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.15.</source>
          <target state="translated">&lt;code&gt;nofatal&lt;/code&gt; -true로 설정하면 &lt;code&gt;openlog()&lt;/code&gt; 및 &lt;code&gt;syslog()&lt;/code&gt; 는 syslog에 대한 연결을 설정할 수없는 경우 죽지 않고 경고 만 내 보냅니다 . &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.15에 추가되었습니다 .</target>
        </trans-unit>
        <trans-unit id="6d145b40dff849bfb7be76022f83e7b4e1ab3e8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nonul&lt;/code&gt; - When set to true, no &lt;code&gt;NUL&lt;/code&gt; character (&lt;code&gt;\0&lt;/code&gt; ) will be appended to the message. This can be useful for some buggy syslog daemons.</source>
          <target state="translated">&lt;code&gt;nonul&lt;/code&gt; -true로 설정하면 &lt;code&gt;NUL&lt;/code&gt; 이 없음 문자 ( &lt;code&gt;\0&lt;/code&gt; )가 메시지에 추가 . 이것은 버그가 많은 syslog 데몬에 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dc012306f72212eaa59d4c933f581373eb5695b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nonul&lt;/code&gt; - When set to true, no &lt;code&gt;NUL&lt;/code&gt; character (&lt;code&gt;\0&lt;/code&gt;) will be appended to the message. This can be useful for some syslog daemons. Added in &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.29.</source>
          <target state="translated">&lt;code&gt;nonul&lt;/code&gt; -true로 설정하면 &lt;code&gt;NUL&lt;/code&gt; 문자 ( &lt;code&gt;\0&lt;/code&gt; )가 메시지에 추가 되지 않습니다 . 이것은 일부 syslog 데몬에 유용 할 수 있습니다. &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.29에 추가되었습니다 .</target>
        </trans-unit>
        <trans-unit id="23eced03bcdab870ab9edcbe9dc4bb03fa8ec64e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;normal&lt;/code&gt; is a string like &quot;ToLower&quot; which means the swash %utf8::ToLower.</source>
          <target state="translated">&lt;code&gt;normal&lt;/code&gt; 은 &quot;ToLower&quot;와 같은 문자열로, 스와시 % utf8 :: ToLower를 의미합니다.</target>
        </trans-unit>
        <trans-unit id="e54ce6f923598d61f4c291c2231596a77ff50261" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;normalization&lt;/code&gt; is performed after &lt;code&gt;preprocess&lt;/code&gt; (if defined).</source>
          <target state="translated">&lt;code&gt;normalization&lt;/code&gt; 는 다음에 수행됩니다 &lt;code&gt;preprocess&lt;/code&gt; (정의 된 경우) 됩니다.</target>
        </trans-unit>
        <trans-unit id="6c787cbcd0d732de5ebfc6c56bc124a3d88f16c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;normalize&lt;/code&gt; and other some functions: on request.</source>
          <target state="translated">&lt;code&gt;normalize&lt;/code&gt; 및 기타 일부 기능 : 요청시.</target>
        </trans-unit>
        <trans-unit id="f38203e290e1449681c9a41b7d479b27b8df21db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nowait&lt;/code&gt; - Don't wait for child processes that may have been created while logging the message. (The GNU C library does not create a child process, so this option has no effect on Linux.)</source>
          <target state="translated">&lt;code&gt;nowait&lt;/code&gt; 메시지를 기록하는 동안 작성된 하위 프로세스를 기다리지 마십시오. GNU C 라이브러리는 자식 프로세스를 만들지 않으므로이 옵션은 Linux에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4694888bc88f2c3c8dc0bbded8e50a8bc2b38846" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nparens&lt;/code&gt; , &lt;code&gt;lastparen&lt;/code&gt; , and &lt;code&gt;lastcloseparen&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;nparens&lt;/code&gt; , &lt;code&gt;lastparen&lt;/code&gt; 및 &lt;code&gt;lastcloseparen&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52be97add4ff2683463a744b45fdd5976f903fed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nparens&lt;/code&gt;, &lt;code&gt;lastparen&lt;/code&gt;, and &lt;code&gt;lastcloseparen&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;nparens&lt;/code&gt; , &lt;code&gt;lastparen&lt;/code&gt; 및 &lt;code&gt;lastcloseparen&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8104bc44857c778695c79d0d1e8b5b9a2c1281a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;num()&lt;/code&gt; returns the numeric value of the input Unicode string; or &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if it doesn't think the entire string has a completely valid, safe numeric value.</source>
          <target state="translated">&lt;code&gt;num()&lt;/code&gt; 은 입력 유니 코드 문자열의 숫자 값을 반환합니다. 또는 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 는 전체 문자열이 완전히 유효한, 안전 숫자 값을 가지고 있다고 생각하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="143ac08b13ce4ad3b7dad5ef00e10449159ff968" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;num()&lt;/code&gt; returns the numeric value of the input Unicode string; or &lt;code&gt;undef&lt;/code&gt; if it doesn't think the entire string has a completely valid, safe numeric value. If called with an optional second parameter, a reference to a scalar, &lt;code&gt;num()&lt;/code&gt; will set the scalar to the length of any valid initial substring; or to 0 if none.</source>
          <target state="translated">&lt;code&gt;num()&lt;/code&gt; 은 입력 유니 코드 문자열의 숫자 값을 반환합니다. 또는 전체 문자열에 완전히 유효하고 안전한 숫자 값이 있다고 생각하지 않는 경우 &lt;code&gt;undef&lt;/code&gt; . 선택적 두 번째 매개 변수, 스칼라에 대한 참조와 함께 호출되면 &lt;code&gt;num()&lt;/code&gt; 은 스칼라를 유효한 초기 하위 문자열의 길이로 설정합니다. 또는없는 경우 0입니다.</target>
        </trans-unit>
        <trans-unit id="3a7b6da46d3ad3066f3c734bb010fb7646c3f1c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;num&lt;/code&gt; errs on the side of safety, and there may be valid strings of decimal digits that it doesn't recognize. Note that Unicode defines a number of &quot;digit&quot; characters that aren't &quot;decimal digit&quot; characters. &quot;Decimal digits&quot; have the property that they have a positional value, i.e., there is a units position, a 10's position, a 100's, etc, AND they are arranged in Unicode in blocks of 10 contiguous code points. The Chinese digits, for example, are not in such a contiguous block, and so Unicode doesn't view them as decimal digits, but merely digits, and so &lt;code&gt;\d&lt;/code&gt; will not match them. A single-character string containing one of these digits will have its decimal value returned by &lt;code&gt;num&lt;/code&gt; , but any longer string containing only these digits will return &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;num&lt;/code&gt; 는 안전 측면에서 잘못되며 인식하지 못하는 유효한 십진수 문자열이있을 수 있습니다. 유니 코드는 &quot;10 진수&quot;문자가 아닌 많은 &quot;숫자&quot;문자를 정의합니다. &quot;소수 자릿수&quot;는 위치 값, 즉 단위 위치, 10 위치, 100 등이 있으며 10 개의 연속 된 코드 포인트 블록으로 유니 코드로 배열됩니다. 예를 들어, 중국어 숫자는 연속 된 블록이 아니므로 유니 코드는 해당 숫자를 10 진수로 표시하지 않고 숫자 만 표시하므로 &lt;code&gt;\d&lt;/code&gt; 는 일치하지 않습니다. 이 숫자 중 하나를 포함하는 단일 문자 문자열에는 10 진수 값이 &lt;code&gt;num&lt;/code&gt; 으로 리턴됩니다 .그러나이 숫자 만 포함하는 더 긴 문자열은 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="2b32e68b8130281ee35f097f4391a4cff47007bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;num&lt;/code&gt; errs on the side of safety, and there may be valid strings of decimal digits that it doesn't recognize. Note that Unicode defines a number of &quot;digit&quot; characters that aren't &quot;decimal digit&quot; characters. &quot;Decimal digits&quot; have the property that they have a positional value, i.e., there is a units position, a 10's position, a 100's, etc, AND they are arranged in Unicode in blocks of 10 contiguous code points. The Chinese digits, for example, are not in such a contiguous block, and so Unicode doesn't view them as decimal digits, but merely digits, and so &lt;code&gt;\d&lt;/code&gt; will not match them. A single-character string containing one of these digits will have its decimal value returned by &lt;code&gt;num&lt;/code&gt;, but any longer string containing only these digits will return &lt;code&gt;undef&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;num&lt;/code&gt; errs는 안전 측면에 있으며 인식하지 못하는 유효한 십진수 문자열이있을 수 있습니다. 유니 코드는 &quot;십진수&quot;문자가 아닌 &quot;숫자&quot;문자의 수를 정의합니다. &quot;10 진수&quot;는 위치 값을 갖는 속성을 가지고 있습니다. 즉, 단위 위치, 10 위치, 100 등이 있으며 10 개의 연속 코드 포인트 블록으로 유니 코드로 정렬됩니다. 예를 들어, 중국어 숫자는 그러한 연속적인 블록에 있지 않으므로 유니 코드는이를 십진수로 보지 않고 단지 숫자로 간주하므로 &lt;code&gt;\d&lt;/code&gt; 는 이들과 일치하지 않습니다. 이 숫자 중 하나를 포함하는 단일 문자 문자열은 &lt;code&gt;num&lt;/code&gt; 에서 반환되는 10 진수 값을 갖습니다 .그러나이 숫자 만 포함하는 더 긴 문자열은 &lt;code&gt;undef&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="be874a64ffa774adf425ae056b0282a20c6623c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;o debug&lt;/code&gt; without an argument lists the valid package names and the current set of packages in debugging mode. &lt;code&gt;o debug&lt;/code&gt; has built-in completion support.</source>
          <target state="translated">&lt;code&gt;o debug&lt;/code&gt; 인수없는 디버그 는 유효한 패키지 이름과 현재 패키지 세트를 디버깅 모드로 나열합니다. &lt;code&gt;o debug&lt;/code&gt; 는 기본적으로 완료 지원을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="209f16e359fcd3b6ba3b8313e7009d000c6c97f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;off&lt;/code&gt; must be non-negative.</source>
          <target state="translated">&lt;code&gt;off&lt;/code&gt; 는 음수가 아니어야합니다.</target>
        </trans-unit>
        <trans-unit id="d9ee9e272a7f7d5aba509cf3d9269033834525fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;off&lt;/code&gt; must be non-positive.</source>
          <target state="translated">&lt;code&gt;off&lt;/code&gt; 는 양수가 아니어야합니다.</target>
        </trans-unit>
        <trans-unit id="466246a0ea0bcd1da5e37ea4ea93b6e2eb95b97a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ok()&lt;/code&gt; is given an expression (in this case &lt;code&gt;$foo eq $bar&lt;/code&gt; ). If it's true, the test passed. If it's false, it didn't. That's about it.</source>
          <target state="translated">&lt;code&gt;ok()&lt;/code&gt; 에는 표현식이 제공됩니다 (이 경우 &lt;code&gt;$foo eq $bar&lt;/code&gt; ). 사실이면 테스트를 통과 한 것입니다. 그것이 거짓이라면 그렇지 않았다. 그게 다야.</target>
        </trans-unit>
        <trans-unit id="af31a705cde9721fcbca5948bef10e2333a178e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ok()&lt;/code&gt; is given an expression (in this case &lt;code&gt;$foo eq $bar&lt;/code&gt;). If it's true, the test passed. If it's false, it didn't. That's about it.</source>
          <target state="translated">&lt;code&gt;ok()&lt;/code&gt; 에는 표현식이 주어집니다 (이 경우 &lt;code&gt;$foo eq $bar&lt;/code&gt; ). 사실이면 테스트를 통과 한 것입니다. 거짓이면 그렇지 않은 것입니다. 그게 다야.</target>
        </trans-unit>
        <trans-unit id="23ab5a47d8307c5982472639709641b589ddb9e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ok()&lt;/code&gt; prints out either &quot;ok&quot; or &quot;not ok&quot; along with a test number (it keeps track of that for you).</source>
          <target state="translated">&lt;code&gt;ok()&lt;/code&gt; 는 테스트 번호와 함께 &quot;ok&quot;또는 &quot;not ok&quot;를 출력합니다 (추적).</target>
        </trans-unit>
        <trans-unit id="02f0e19d76f2346c39f954fb30c54feae693b547" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ok(...)&lt;/code&gt; 's special handing of strings which look like they might be regexes can also cause unexpected behavior. An innocent:</source>
          <target state="translated">&lt;code&gt;ok(...)&lt;/code&gt; 의 정규식 문자열은 정규 표현식처럼 보일 수 있으며 예기치 않은 동작을 일으킬 수 있습니다. 무고한 사람 :</target>
        </trans-unit>
        <trans-unit id="b9453067bce99ddb6c0b34c1ad76b7773aa72eb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ok(...)&lt;/code&gt; 's use of string &lt;code&gt;eq&lt;/code&gt; can sometimes cause odd problems when comparing numbers, especially if you're casting a string to a number:</source>
          <target state="translated">&lt;code&gt;ok(...)&lt;/code&gt; 의 문자열 &lt;code&gt;eq&lt;/code&gt; 를 사용 하면 숫자를 비교할 때 특히 문자열을 숫자로 캐스팅하는 경우 이상한 문제가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c66df15d1b7a6f4eb10c201fd544c892f039b887" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ok(...)&lt;/code&gt;'s special handing of strings which look like they might be regexes can also cause unexpected behavior. An innocent:</source>
          <target state="translated">&lt;code&gt;ok(...)&lt;/code&gt; '정규식처럼 보이는 문자열을 특수하게 처리하면 예기치 않은 동작이 발생할 수도 있습니다. 순진한 :</target>
        </trans-unit>
        <trans-unit id="0cfa5c97305499145ba41c92e0d7854dbfd6d33e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ok(...)&lt;/code&gt;'s use of string &lt;code&gt;eq&lt;/code&gt; can sometimes cause odd problems when comparing numbers, especially if you're casting a string to a number:</source>
          <target state="translated">&lt;code&gt;ok(...)&lt;/code&gt; 'string &lt;code&gt;eq&lt;/code&gt; 를 사용 하면 숫자를 비교할 때 가끔 이상한 문제가 발생할 수 있습니다. 특히 문자열을 숫자로 캐스팅하는 경우에는 더욱 그렇습니다.</target>
        </trans-unit>
        <trans-unit id="7a6826999eb95521e6d8d3b9f0c51592f03d979f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;onfail&lt;/code&gt; hook might be used simply to print out the version of your package and/or how to report problems. It might also be used to generate extremely sophisticated diagnostics for a particularly bizarre test failure. However it's not a panacea. Core dumps or other unrecoverable errors prevent the &lt;code&gt;onfail&lt;/code&gt; hook from running. (It is run inside an &lt;code&gt;END&lt;/code&gt; block.) Besides, &lt;code&gt;onfail&lt;/code&gt; is probably over-kill in most cases. (Your test code should be simpler than the code it is testing, yes?)</source>
          <target state="translated">&lt;code&gt;onfail&lt;/code&gt; hook은 단순히 패키지 버전 및 / 또는 문제보고 방법을 인쇄하는 데 사용될 수 있습니다. 또한 기괴한 테스트 실패에 대해 매우 정교한 진단을 생성하는 데 사용될 수도 있습니다. 그러나 만병 통치약은 아닙니다. 코어 덤프 또는 기타 복구 할 수없는 오류로 인해 &lt;code&gt;onfail&lt;/code&gt; 후크가 실행되지 않습니다. ( &lt;code&gt;END&lt;/code&gt; 블록 내에서 실행됩니다 .) 또한 대부분의 경우 &lt;code&gt;onfail&lt;/code&gt; 은 과도하게 죽일 수 있습니다. (테스트 코드는 테스트하는 코드보다 단순해야합니다. 예)</target>
        </trans-unit>
        <trans-unit id="8f088836ce0fde68df7eee4d30bfbe00374a2996" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open FH, &quot;-|&quot;&lt;/code&gt;, in other words, opening pipes to itself.</source>
          <target state="translated">&lt;code&gt;open FH, &quot;-|&quot;&lt;/code&gt; 즉, 파이프를 자신에게 개방하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="f3ffe39b6fc765d2c5dd23b3d8fe3f83a8a2cd05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open()&lt;/code&gt; ignores this variable (and the default layers) when called with 3 arguments and explicit layers are specified. Indirect calls to these functions via modules like &lt;a href=&quot;IO::Handle&quot;&gt;IO::Handle&lt;/a&gt; are not affected as they occur in a different lexical scope. Directory handles such as opened by &lt;code&gt;opendir()&lt;/code&gt; are not currently affected.</source>
          <target state="translated">&lt;code&gt;open()&lt;/code&gt; 은 3 개의 인수로 호출되고 명시 적 레이어가 지정된 경우이 변수 (및 기본 레이어 )를 무시합니다. &lt;a href=&quot;IO::Handle&quot;&gt;IO :: Handle&lt;/a&gt; 과 같은 모듈을 통한 이러한 함수에 대한 간접 호출 은 다른 어휘 범위에서 발생하므로 영향을받지 않습니다. &lt;code&gt;opendir()&lt;/code&gt; 의해 열린 것과 같은 디렉토리 핸들 은 현재 영향을받지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5e22ef4d238b8913182581bd4c36483578c9a28e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open&lt;/code&gt; accepts one, two or three parameters. With one parameter, it is just a front end for the built-in &lt;code&gt;open&lt;/code&gt; function. With two or three parameters, the first parameter is a filename that may include whitespace or other special characters, and the second parameter is the open mode, optionally followed by a file permission value.</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; 은 1 개, 2 개 또는 3 개의 매개 변수를 허용합니다. 하나의 매개 변수를 사용하면 내장 된 &lt;code&gt;open&lt;/code&gt; 기능 의 프런트 엔드 일뿐 입니다. 두 개 또는 세 개의 매개 변수를 사용하는 경우 첫 번째 매개 변수는 공백 또는 기타 특수 문자를 포함 할 수있는 파일 이름이고 두 번째 매개 변수는 개방 모드이며 선택적으로 파일 권한 값이 뒤 따릅니다.</target>
        </trans-unit>
        <trans-unit id="731e105522272d59aee11be93bacdc1e634f424a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open&lt;/code&gt; takes two arguments. The first is the name of the file to open and the second is the open mode. The mode can be anything acceptable to &lt;a href=&quot;Compress::Zlib&quot;&gt;Compress::Zlib&lt;/a&gt; and by extension anything acceptable to</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; 은 두 개의 인수를 취합니다. 첫 번째는 열 파일의 이름이고 두 번째는 열기 모드입니다. 모드는 &lt;a href=&quot;Compress::Zlib&quot;&gt;Compress :: Zlib에&lt;/a&gt; 허용되는 모든 것이 될 수 있으며 확장에 의해 허용되는 모든 것이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f09da5e2afa2630c81481fae033003b0e56465a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open&lt;/code&gt;, &lt;code&gt;opendir&lt;/code&gt;, &lt;code&gt;sysopen&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt;, &lt;code&gt;opendir&lt;/code&gt;, &lt;code&gt;sysopen&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="155f0eaaf34c1ec0b370e6041e98b86611585735" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optype&lt;/code&gt; should be an opcode indicating the type of operation that the pad entry is to support. This doesn't affect operational semantics, but is used for debugging.</source>
          <target state="translated">&lt;code&gt;optype&lt;/code&gt; 은 패드 항목이 지원할 작업 유형을 나타내는 opcode 여야합니다. 이는 작동 의미에 영향을주지 않지만 디버깅에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f6cb592938f64645a65fb717b7ef6050e2ffefe7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ord()&lt;/code&gt; will return EBCDIC code number values on an EBCDIC platform. For example:</source>
          <target state="translated">&lt;code&gt;ord()&lt;/code&gt; 는 EBCDIC 플랫폼에서 EBCDIC 코드 번호 값을 리턴합니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="cc7349d9655c667539e75d17a6e784d90202513f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;os2_stat&lt;/code&gt; special-cases</source>
          <target state="translated">&lt;code&gt;os2_stat&lt;/code&gt; 특수 사례</target>
        </trans-unit>
        <trans-unit id="054fe1a81b97f07c540d64d60a64f4af0bb07c47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;our&lt;/code&gt; subroutines</source>
          <target state="translated">&lt;code&gt;our&lt;/code&gt; 서브 루틴</target>
        </trans-unit>
        <trans-unit id="0ae20ae53e9337f9b303890d15d0d3b627b7ddae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;overrideOut&lt;/code&gt; can perform it algorithmically. This parameter works like &lt;code&gt;overrideCJK&lt;/code&gt; , so see there for examples.</source>
          <target state="translated">&lt;code&gt;overrideOut&lt;/code&gt; 은 알고리즘 적으로 수행 할 수 있습니다. 이 매개 변수는 &lt;code&gt;overrideCJK&lt;/code&gt; 와 같이 작동 하므로 예제를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c34a051850d5e5b37bbb57119a0f770afe423277" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;overrideOut&lt;/code&gt; can perform it algorithmically. This parameter works like &lt;code&gt;overrideCJK&lt;/code&gt;, so see there for examples.</source>
          <target state="translated">&lt;code&gt;overrideOut&lt;/code&gt; 은이 를 알고리즘 방식으로 수행 할 수 있습니다. 이 매개 변수는 &lt;code&gt;overrideCJK&lt;/code&gt; 처럼 작동 하므로 예제를 보려면 여기를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="018daadf3e8c264d84f963dafe9df6707fe0f4db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;p&lt;/code&gt; contains the pointer to the UTF-8 string encoding the character that is being converted. This routine assumes that the character at &lt;code&gt;p&lt;/code&gt; is well-formed.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; 는 변환중인 문자를 인코딩하는 UTF-8 문자열에 대한 포인터를 포함합니다. 이 루틴은 &lt;code&gt;p&lt;/code&gt; 의 문자 가 올바른 것으로 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="c11c698ac9fefb8ffaa9a6b715e3d39e29a9a669" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pTHX_&lt;/code&gt; is one of a number of macros (in</source>
          <target state="translated">&lt;code&gt;pTHX_&lt;/code&gt; 는 여러 매크로 중 하나입니다 (</target>
        </trans-unit>
        <trans-unit id="57a1669a25a493393b0012e07977a3873f7b6b80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pack&lt;/code&gt; and &lt;code&gt;unpack&lt;/code&gt; are two functions for transforming data according to a user-defined template, between the guarded way Perl stores values and some well-defined representation as might be required in the environment of a Perl program. Unfortunately, they're also two of the most misunderstood and most often overlooked functions that Perl provides. This tutorial will demystify them for you.</source>
          <target state="translated">&lt;code&gt;pack&lt;/code&gt; 및 &lt;code&gt;unpack&lt;/code&gt; 은 Perl이 값을 저장하는 보호 된 방식과 Perl 프로그램 환경에서 필요할 수있는 잘 정의 된 표현 사이에서 사용자 정의 템플릿에 따라 데이터를 변환하는 두 가지 기능입니다. 불행히도, 그들은 또한 Perl이 제공하는 가장 많이 오해되고 가장 자주 간과되는 기능 중 두 가지입니다. 이 튜토리얼은 당신을 위해 그것들을 설명 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="9201b2c58a06704aec378eb824713ef3409725ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;package Foo VERSION&lt;/code&gt; is also checked for. The first version declaration found is used, but this may change as it differs from how Perl does it.</source>
          <target state="translated">&lt;code&gt;package Foo VERSION&lt;/code&gt; 도 확인됩니다. 발견 된 첫 번째 버전 선언이 사용되지만 Perl이 수행하는 방식과 다르기 때문에 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ccf88eb3a10e91884da8fd743ed1839362f4282" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parent&lt;/code&gt; is the parent node of the sibling chain. It may passed as &lt;code&gt;NULL&lt;/code&gt; if the splicing doesn't affect the first or last op in the chain.</source>
          <target state="translated">&lt;code&gt;parent&lt;/code&gt; 는 형제 체인의 부모 노드입니다. 스 플라이 싱이 체인의 첫 번째 또는 마지막 작업에 영향을주지 않으면 &lt;code&gt;NULL&lt;/code&gt; 로 전달 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="379c431d9679f0fc2a97bd40d54e5841f92e2796" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parent&lt;/code&gt; points to the rest of the &lt;code&gt;refcounted_he&lt;/code&gt; chain to be attached to the new &lt;code&gt;refcounted_he&lt;/code&gt;. This function takes ownership of one reference to &lt;code&gt;parent&lt;/code&gt;, and returns one reference to the new &lt;code&gt;refcounted_he&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;parent&lt;/code&gt; 는 새로운 &lt;code&gt;refcounted_he&lt;/code&gt; 에 첨부 될 나머지 &lt;code&gt;refcounted_he&lt;/code&gt; 체인을 가리 킵니다 . 이 함수는 &lt;code&gt;parent&lt;/code&gt; 에 대한 하나의 참조를 소유 하고 새로운 &lt;code&gt;refcounted_he&lt;/code&gt; 에 대한 하나의 참조를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="c2417866550bcf9c7016549d6b067e3913e71d22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pat&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt; are a sprintf-style format pattern and encapsulated argument list, respectively. These are used to generate a string message. If the message does not end with a newline, then it will be extended with some indication of the current location in the code, as described for &lt;a href=&quot;#mess_sv&quot;&gt;&quot;mess_sv&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;pat&lt;/code&gt; 및 &lt;code&gt;args&lt;/code&gt; 는 각각 sprintf 스타일 형식 패턴이며 캡슐화 된 인수 목록입니다. 이들은 문자열 메시지를 생성하는 데 사용됩니다. 메시지가 줄 바꿈으로 끝나지 않으면 &lt;a href=&quot;#mess_sv&quot;&gt;&quot;mess_sv&quot;에&lt;/a&gt; 설명 된대로 코드에서 현재 위치를 나타내는 일부 표시와 함께 메시지가 확장됩니다 .</target>
        </trans-unit>
        <trans-unit id="dc595ac7a8786ad6d7a447f65fc9b523ab4209c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pat&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt; are a sprintf-style format pattern and encapsulated argument list. These are used to generate a string message. If the message does not end with a newline, then it will be extended with some indication of the current location in the code, as described for &lt;a href=&quot;#mess_sv&quot;&gt;&quot;mess_sv&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;pat&lt;/code&gt; 및 &lt;code&gt;args&lt;/code&gt; 는 sprintf 스타일 형식 패턴이며 캡슐화 된 인수 목록입니다. 이들은 문자열 메시지를 생성하는 데 사용됩니다. 메시지가 줄 바꿈으로 끝나지 않으면 &lt;a href=&quot;#mess_sv&quot;&gt;&quot;mess_sv&quot;에&lt;/a&gt; 설명 된대로 코드에서 현재 위치를 나타내는 일부 표시와 함께 메시지가 확장됩니다 .</target>
        </trans-unit>
        <trans-unit id="5576100284e538d6e57d1d31b55e0b0abbd897e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pat&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt; are a sprintf-style format pattern and encapsulated argument list. These are used to generate a string message. If the message does not end with a newline, then it will be extended with some indication of the current location in the code, as described for &lt;a href=&quot;#mess_sv&quot;&gt;mess_sv&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;pat&lt;/code&gt; 및 &lt;code&gt;args&lt;/code&gt; 는 sprintf 스타일 형식 패턴이며 캡슐화 된 인수 목록입니다. 이들은 문자열 메시지를 생성하는 데 사용됩니다. 메시지가 줄 바꿈으로 끝나지 않으면 &lt;a href=&quot;#mess_sv&quot;&gt;mess_sv에&lt;/a&gt; 설명 된대로 코드에서 현재 위치를 표시하여 확장됩니다 .</target>
        </trans-unit>
        <trans-unit id="cad345d37c7dffa7c8f4f00e258549543dd5b66f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path&lt;/code&gt; - equivalent to &lt;code&gt;$stream_location&lt;/code&gt; , sets the stream location. Defaults to standard Unix location, or &lt;code&gt;_PATH_LOG&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; -에 해당 &lt;code&gt;$stream_location&lt;/code&gt; , 스트림의 위치를 설정합니다. 기본값은 표준 유닉스 위치 또는 &lt;code&gt;_PATH_LOG&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3fc6e62bba2086e4237ad6cc1a42a60f5fcb785e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path&lt;/code&gt; - equivalent to &lt;code&gt;$stream_location&lt;/code&gt;, sets the stream location. Defaults to standard Unix location, or &lt;code&gt;_PATH_LOG&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; -에 해당 &lt;code&gt;$stream_location&lt;/code&gt; , 스트림의 위치를 설정합니다. 기본값은 표준 Unix 위치 또는 &lt;code&gt;_PATH_LOG&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d2b3947fbb2cde48071637c1ce2c9e11e4a635a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pattern&lt;/code&gt; would match if anchored at the given position, and it matches</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; 주어진 위치에 고정되면 패턴 이 일치하고 일치합니다.</target>
        </trans-unit>
        <trans-unit id="4c0897f276ad7729fd94fc3034bc703086540690" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;peer&lt;/code&gt; &amp;mdash; Override host resolution and force all connections to go only to a specific peer address, regardless of the URL of the request. This will include any redirections! This options should be used with extreme caution (e.g. debugging or very special circumstances). It can be given as either a scalar or a code reference that will receive the hostname and whose response will be taken as the address.</source>
          <target state="translated">&lt;code&gt;peer&lt;/code&gt; &amp;mdash; 호스트 확인을 무시하고 요청의 URL에 관계없이 모든 연결이 특정 피어 주소로만 이동하도록합니다. 여기에는 모든 리디렉션이 포함됩니다! 이 옵션은 매우주의해서 사용해야합니다 (예 : 디버깅 또는 매우 특수한 상황). 호스트 이름을 수신하고 응답이 주소로 사용되는 스칼라 또는 코드 참조로 제공 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c80fd8c8f76edfb1295d8c13bd88d5a82fdd6e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;perl_clone&lt;/code&gt; takes these flags as parameters:</source>
          <target state="translated">&lt;code&gt;perl_clone&lt;/code&gt; 은 다음 플래그를 매개 변수로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="363c3b041828e47609537312596fa6f5289a7cc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;perl_parse&lt;/code&gt; is actually a wrapper around &lt;code&gt;S_parse_body&lt;/code&gt; , as defined in</source>
          <target state="translated">&lt;code&gt;perl_parse&lt;/code&gt; 은 실제로 주위의 래퍼입니다 &lt;code&gt;S_parse_body&lt;/code&gt; 에 정의 된 바와 같이,</target>
        </trans-unit>
        <trans-unit id="db5ef3e7bb38cef785d8a05800afe7ac86d72bfd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;perl_parse&lt;/code&gt; is actually a wrapper around &lt;code&gt;S_parse_body&lt;/code&gt;, as defined in</source>
          <target state="translated">&lt;code&gt;perl_parse&lt;/code&gt; 은 실제로 주위의 래퍼입니다 &lt;code&gt;S_parse_body&lt;/code&gt; 에 정의 된 바와 같이,</target>
        </trans-unit>
        <trans-unit id="f98336dcec32bd23880560249be78854ad195f7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;perldoc&lt;/code&gt; also searches directories specified by the &lt;code&gt;PERL5LIB&lt;/code&gt; (or &lt;code&gt;PERLLIB&lt;/code&gt; if &lt;code&gt;PERL5LIB&lt;/code&gt; is not defined) and &lt;code&gt;PATH&lt;/code&gt; environment variables. (The latter is so that embedded pods for executables, such as &lt;code&gt;perldoc&lt;/code&gt; itself, are available.)</source>
          <target state="translated">&lt;code&gt;perldoc&lt;/code&gt; 은 또한 &lt;code&gt;PERL5LIB&lt;/code&gt; (또는 &lt;code&gt;PERL5LIB&lt;/code&gt; 가 정의되지 않은 경우 &lt;code&gt;PERLLIB&lt;/code&gt; ) 및 &lt;code&gt;PATH&lt;/code&gt; 환경 변수로 지정된 디렉토리를 검색 합니다. 후자는 &lt;code&gt;perldoc&lt;/code&gt; 자체 와 같은 실행 파일 용 내장 포드를 사용할 수 있도록하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="845299ed0481bf59a19162b1d7d0d6134de3b1f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;perldoc&lt;/code&gt; is also a useful tool for browsing information contained in the documentation, especially in conjunction with a pager like &lt;code&gt;less&lt;/code&gt; (recent versions of which have Windows support). You may have to set the PAGER environment variable to use a specific pager. &quot;perldoc -f foo&quot; will print information about the perl operator &quot;foo&quot;.</source>
          <target state="translated">&lt;code&gt;perldoc&lt;/code&gt; 은 또한 문서에 포함 된 정보를 탐색하는 데 유용한 도구로, 특히 &lt;code&gt;less&lt;/code&gt; 최신 버전 (Windows가 지원되는 최신 버전) 과 함께 사용 됩니다. 특정 호출기를 사용하도록 PAGER 환경 변수를 설정해야 할 수도 있습니다. &quot;perldoc -f foo&quot;는 perl 연산자 &quot;foo&quot;에 대한 정보를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="08ef34f009dc3c8dfa646a2efd211a1e35cb6acf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;perldoc&lt;/code&gt; will use, in order of preference, the pager defined in &lt;code&gt;PERLDOC_PAGER&lt;/code&gt; , &lt;code&gt;MANPAGER&lt;/code&gt; , or &lt;code&gt;PAGER&lt;/code&gt; before trying to find a pager on its own. (&lt;code&gt;MANPAGER&lt;/code&gt; is not used if &lt;code&gt;perldoc&lt;/code&gt; was told to display plain text or unformatted pod.)</source>
          <target state="translated">&lt;code&gt;perldoc&lt;/code&gt; 은 선호하는 순서대로 &lt;code&gt;PERLDOC_PAGER&lt;/code&gt; , &lt;code&gt;MANPAGER&lt;/code&gt; 또는 &lt;code&gt;PAGER&lt;/code&gt; 에 정의 된 호출기를 사용하여 호출기를 스스로 찾으려고합니다. ( &lt;code&gt;MANPAGER&lt;/code&gt; 는 경우 사용하지 &lt;code&gt;perldoc&lt;/code&gt; 을가 일반 텍스트 또는 서식 포드를 표시 들었다.)</target>
        </trans-unit>
        <trans-unit id="cd549af6c14da6fe8e46fcc76ca0b3c072f19abe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;perldoc&lt;/code&gt; will use, in order of preference, the pager defined in &lt;code&gt;PERLDOC_PAGER&lt;/code&gt;, &lt;code&gt;MANPAGER&lt;/code&gt;, or &lt;code&gt;PAGER&lt;/code&gt; before trying to find a pager on its own. (&lt;code&gt;MANPAGER&lt;/code&gt; is not used if &lt;code&gt;perldoc&lt;/code&gt; was told to display plain text or unformatted pod.)</source>
          <target state="translated">&lt;code&gt;perldoc&lt;/code&gt; 은 자체적으로 호출기를 찾기 전에 &lt;code&gt;PERLDOC_PAGER&lt;/code&gt; , &lt;code&gt;MANPAGER&lt;/code&gt; 또는 &lt;code&gt;PAGER&lt;/code&gt; 에 정의 된 호출기를 선호하는 순서대로 사용 합니다. ( &lt;code&gt;perldoc&lt;/code&gt; 에 일반 텍스트 또는 형식이 지정되지 않은 창을 표시하도록 지시 된 경우 &lt;code&gt;MANPAGER&lt;/code&gt; 이 사용되지 않습니다 .)</target>
        </trans-unit>
        <trans-unit id="2849be26c68f462d616e31ee18a116b7064450b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;perror&lt;/code&gt; - Write the message to standard error output as well to the system log (added in &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.22).</source>
          <target state="translated">&lt;code&gt;perror&lt;/code&gt; - 메시지를 표준 오류 출력과 시스템 로그 ( &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.22에 추가 )에 기록합니다.</target>
        </trans-unit>
        <trans-unit id="49676e81e4f423a3b3f261058e81e4680c24804d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;perror&lt;/code&gt; - Write the message to standard error output as well to the system log. Added in &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.22.</source>
          <target state="translated">&lt;code&gt;perror&lt;/code&gt; - 메시지를 표준 오류 출력과 시스템 로그에 기록합니다. &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.22에 추가되었습니다 .</target>
        </trans-unit>
        <trans-unit id="1c7d63b44a36159d8e1d4d4335b3daf634e99588" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pid&lt;/code&gt; - Include PID with each message.</source>
          <target state="translated">&lt;code&gt;pid&lt;/code&gt; - 각 메시지에 PID를 포함시킵니다.</target>
        </trans-unit>
        <trans-unit id="809c4b7facc3eb780b2058815a2dcb35dc65ca46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;plan&lt;/code&gt; methods</source>
          <target state="translated">&lt;code&gt;plan&lt;/code&gt; 방법</target>
        </trans-unit>
        <trans-unit id="fdb276cbb4ba5fc7d3b0e940bad1ed0150bce045" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;port&lt;/code&gt; - sets the TCP or UDP port to connect to. Defaults to the first standard syslog port available on the system.</source>
          <target state="translated">&lt;code&gt;port&lt;/code&gt; -에 연결할 수있는 TCP 나 UDP 포트를 설정합니다. 시스템에서 사용 가능한 첫 번째 표준 syslog 포트가 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="baac547aeaff5393799b5b0cafcc4eaeb65a4579" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;postderef&lt;/code&gt; - allow the use of postfix dereferencing expressions, including in interpolating strings</source>
          <target state="translated">&lt;code&gt;postderef&lt;/code&gt; - 보간 문자열을 포함하여 접미사 역 참조 표현식을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="81ec803c3dc008a3da16774edaa8dc9ffe50879f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;postok&lt;/code&gt; will return</source>
          <target state="translated">&lt;code&gt;postok&lt;/code&gt; 이 돌아옵니다</target>
        </trans-unit>
        <trans-unit id="2d01a0fab20d0ff1f998f75c0cb1da085f4f2052" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pragma&lt;/code&gt; methods</source>
          <target state="translated">&lt;code&gt;pragma&lt;/code&gt; 방법</target>
        </trans-unit>
        <trans-unit id="826665825a05ce6bea816703958f3affe8424f0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;precision()&lt;/code&gt; sets or gets the global or local precision, aka at which digit before or after the dot to round all results. A set global precision also applies to all newly created numbers!</source>
          <target state="translated">&lt;code&gt;precision()&lt;/code&gt; 은 모든 결과를 반올림하기 위해 점 앞뒤의 숫자로 알려진 전역 또는 로컬 정밀도를 설정하거나 가져옵니다. 설정된 전체 정밀도는 새로 생성 된 모든 숫자에도 적용됩니다!</target>
        </trans-unit>
        <trans-unit id="7976cc4186db8951c059e488dda4302f51af45d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;precomp&lt;/code&gt;&lt;code&gt;prelen&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;precomp&lt;/code&gt;&lt;code&gt;prelen&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a05fc7c2ec9c9f8d0b33a7a4310351fcbd1f41e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prefix&lt;/code&gt; means: where to install the resulting perl library. Giving correct prefix you may avoid the need to specify &lt;code&gt;PERLLIB_PREFIX&lt;/code&gt; , see &lt;a href=&quot;#PERLLIB_PREFIX&quot;&gt;PERLLIB_PREFIX&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;prefix&lt;/code&gt; 의미 : 결과 펄 라이브러리를 설치할 위치. 사용자가 지정 할 필요가 피할 수 올바른 접두사를주기 &lt;code&gt;PERLLIB_PREFIX&lt;/code&gt; 를 참조 &lt;a href=&quot;#PERLLIB_PREFIX&quot;&gt;PERLLIB_PREFIX을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b1f60f3b80a6c51144983ea914c0cd0a4c743661" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prefix&lt;/code&gt; means: where to install the resulting perl library. Giving correct prefix you may avoid the need to specify &lt;code&gt;PERLLIB_PREFIX&lt;/code&gt;, see &lt;a href=&quot;#PERLLIB_PREFIX&quot;&gt;&quot;&lt;code&gt;PERLLIB_PREFIX&lt;/code&gt;&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;prefix&lt;/code&gt; 는 결과 펄 라이브러리를 설치할 위치를 의미합니다. 올바른 접두사를 제공하면 &lt;code&gt;PERLLIB_PREFIX&lt;/code&gt; 를 지정할 필요가 없습니다 . &lt;a href=&quot;#PERLLIB_PREFIX&quot;&gt;&quot; &lt;code&gt;PERLLIB_PREFIX&lt;/code&gt; &quot;를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0aaf8a737c0d23218299cfdec2230f7a8f0c080c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pregexec()&lt;/code&gt; is the main entry point for running a regex. It contains support for initialising the regex interpreter's state, running &lt;code&gt;re_intuit_start()&lt;/code&gt; if needed, and running the interpreter on the string from various start positions as needed. When it is necessary to use the regex interpreter &lt;code&gt;pregexec()&lt;/code&gt; calls &lt;code&gt;regtry()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;pregexec()&lt;/code&gt; 는 정규식을 실행하기위한 주요 진입 점입니다. 정규 표현식 인터프리터 상태 초기화, 필요한 경우 &lt;code&gt;re_intuit_start()&lt;/code&gt; 실행 및 필요에 따라 다양한 시작 위치에서 문자열에 대한 인터프리터 실행을 지원합니다. 이 정규식 통역 사용할 필요가있는 경우 &lt;code&gt;pregexec()&lt;/code&gt; 호출 &lt;code&gt;regtry()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cff59e34d92eb388384f7cee854ef39563b37c00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pregexec()&lt;/code&gt; is the main entry point for running a regex. It contains support for initialising the regex interpreter's state, running &lt;code&gt;re_intuit_start()&lt;/code&gt; if needed, and running the interpreter on the string from various start positions as needed. When it is necessary to use the regex interpreter &lt;code&gt;pregexec()&lt;/code&gt; calls &lt;code&gt;regtry()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pregexec()&lt;/code&gt; 는 정규식을 실행하기위한 기본 진입 점입니다. 여기에는 정규식 인터프리터의 상태를 초기화하고, 필요한 경우 &lt;code&gt;re_intuit_start()&lt;/code&gt; 실행하고, 필요에 따라 다양한 시작 위치에서 문자열에서 인터프리터를 실행 하기위한 지원이 포함되어 있습니다 . regex 인터프리터를 사용해야하는 경우 &lt;code&gt;pregexec()&lt;/code&gt; 는 &lt;code&gt;regtry()&lt;/code&gt; 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="5650857d710e489383ebef502cde7faf3c94b385" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;preprocess&lt;/code&gt; is performed before &lt;code&gt;normalization&lt;/code&gt; (if defined).</source>
          <target state="translated">&lt;code&gt;preprocess&lt;/code&gt; 는 &lt;code&gt;normalization&lt;/code&gt; 전에 정의됩니다 (정의 된 경우).</target>
        </trans-unit>
        <trans-unit id="27df3d04b2fd880e0c0f8504356cc9a3aee349a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_aliases&lt;/code&gt; does know about the Perl extensions to Unicode properties, such as &lt;code&gt;Any&lt;/code&gt; and &lt;code&gt;XPosixAlpha&lt;/code&gt; , and the single form equivalents to Unicode properties such as &lt;code&gt;XDigit&lt;/code&gt; , &lt;code&gt;Greek&lt;/code&gt; , &lt;code&gt;In_Greek&lt;/code&gt; , and &lt;code&gt;Is_Greek&lt;/code&gt; . The final example demonstrates that the &lt;code&gt;&quot;Is_&quot;&lt;/code&gt; prefix is recognized for these extensions; it is needed to resolve ambiguities. For example, &lt;code&gt;prop_aliases('lc')&lt;/code&gt; returns the list &lt;code&gt;(&lt;a href=&quot;../functions/lc&quot;&gt;lc&lt;/a&gt;, Lowercase_Mapping)&lt;/code&gt; , but &lt;code&gt;prop_aliases('islc')&lt;/code&gt; returns &lt;code&gt;(Is_LC, Cased_Letter)&lt;/code&gt; . This is because &lt;code&gt;islc&lt;/code&gt; is a Perl extension which is short for &lt;code&gt;General_Category=Cased Letter&lt;/code&gt; . The lists returned for the Perl extensions will not include the &lt;code&gt;&quot;Is_&quot;&lt;/code&gt; prefix (whether or not the input had it) unless needed to resolve ambiguities, as shown in the &lt;code&gt;&quot;islc&quot;&lt;/code&gt; example, where the returned list had one element containing &lt;code&gt;&quot;Is_&quot;&lt;/code&gt; , and the other without.</source>
          <target state="translated">&lt;code&gt;prop_aliases&lt;/code&gt; 는 &lt;code&gt;Any&lt;/code&gt; 및 &lt;code&gt;XPosixAlpha&lt;/code&gt; 와 같은 유니 코드 속성에 대한 Perl 확장 과 &lt;code&gt;XDigit&lt;/code&gt; , &lt;code&gt;Greek&lt;/code&gt; , &lt;code&gt;In_Greek&lt;/code&gt; 및 &lt;code&gt;Is_Greek&lt;/code&gt; 와 같은 유니 코드 속성에 해당하는 단일 형식에 대해 알고 있습니다. 마지막 예제는 &lt;code&gt;&quot;Is_&quot;&lt;/code&gt; 접두사가 이러한 확장에 대해 인식됨을 보여줍니다 . 모호성을 해결해야합니다. 예를 들어 &lt;code&gt;prop_aliases('lc')&lt;/code&gt; 는 목록 &lt;code&gt;(&lt;a href=&quot;../functions/lc&quot;&gt;lc&lt;/a&gt;, Lowercase_Mapping)&lt;/code&gt; &lt;code&gt;prop_aliases('islc')&lt;/code&gt; 반환 하지만 prop_aliases ( 'islc') 는 &lt;code&gt;(Is_LC, Cased_Letter)&lt;/code&gt; 반환합니다 . &lt;code&gt;islc&lt;/code&gt; 때문 입니다 &lt;code&gt;General_Category=Cased Letter&lt;/code&gt; 의 약자 인 Perl 확장명입니다 . 펄 확장에 반환 된 목록은 포함되지 않습니다 &lt;code&gt;&quot;Is_&quot;&lt;/code&gt; (입력이 그것을 가지고 있는지 여부)를 같이 해결 모호성에 필요하지 않는 접두사를 &lt;code&gt;&quot;islc&quot;&lt;/code&gt; 반환 된 목록을 포함하는 하나 개의 요소했다 예를 들어, &lt;code&gt;&quot;Is_&quot;&lt;/code&gt; , 그리고 다른 것없이.</target>
        </trans-unit>
        <trans-unit id="6745986d559f8896e412c863591b2be2488937a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_aliases&lt;/code&gt; does know about the Perl extensions to Unicode properties, such as &lt;code&gt;Any&lt;/code&gt; and &lt;code&gt;XPosixAlpha&lt;/code&gt;, and the single form equivalents to Unicode properties such as &lt;code&gt;XDigit&lt;/code&gt;, &lt;code&gt;Greek&lt;/code&gt;, &lt;code&gt;In_Greek&lt;/code&gt;, and &lt;code&gt;Is_Greek&lt;/code&gt;. The final example demonstrates that the &lt;code&gt;&quot;Is_&quot;&lt;/code&gt; prefix is recognized for these extensions; it is needed to resolve ambiguities. For example, &lt;code&gt;prop_aliases('lc')&lt;/code&gt; returns the list &lt;code&gt;(lc, Lowercase_Mapping)&lt;/code&gt;, but &lt;code&gt;prop_aliases('islc')&lt;/code&gt; returns &lt;code&gt;(Is_LC, Cased_Letter)&lt;/code&gt;. This is because &lt;code&gt;islc&lt;/code&gt; is a Perl extension which is short for &lt;code&gt;General_Category=Cased Letter&lt;/code&gt;. The lists returned for the Perl extensions will not include the &lt;code&gt;&quot;Is_&quot;&lt;/code&gt; prefix (whether or not the input had it) unless needed to resolve ambiguities, as shown in the &lt;code&gt;&quot;islc&quot;&lt;/code&gt; example, where the returned list had one element containing &lt;code&gt;&quot;Is_&quot;&lt;/code&gt;, and the other without.</source>
          <target state="translated">&lt;code&gt;prop_aliases&lt;/code&gt; 는 &lt;code&gt;Any&lt;/code&gt; 및 &lt;code&gt;XPosixAlpha&lt;/code&gt; 와 같은 유니 코드 속성에 대한 Perl 확장 과 &lt;code&gt;XDigit&lt;/code&gt; , &lt;code&gt;Greek&lt;/code&gt; , &lt;code&gt;In_Greek&lt;/code&gt; 및 &lt;code&gt;Is_Greek&lt;/code&gt; 과 같은 유니 코드 속성에 해당하는 단일 형식에 대해 알고 있습니다. 마지막 예제는 이러한 확장에 대해 &lt;code&gt;&quot;Is_&quot;&lt;/code&gt; 접두사가 인식됨을 보여줍니다 . 모호성을 해결하는 데 필요합니다. 예를 들어, &lt;code&gt;prop_aliases('lc')&lt;/code&gt; 는 목록 &lt;code&gt;(lc, Lowercase_Mapping)&lt;/code&gt; &lt;code&gt;prop_aliases('islc')&lt;/code&gt; 반환 하지만 prop_aliases ( 'islc') 는 &lt;code&gt;(Is_LC, Cased_Letter)&lt;/code&gt; 반환합니다 . 이것은 &lt;code&gt;islc&lt;/code&gt; 가 다음의 약자 인 Perl 확장 이기 때문 입니다. &lt;code&gt;General_Category=Cased Letter&lt;/code&gt; . 펄 확장에 반환 된 목록은 포함되지 않습니다 &lt;code&gt;&quot;Is_&quot;&lt;/code&gt; (입력이 그것을 가지고 있는지 여부)를 같이 해결 모호성에 필요하지 않는 접두사를 &lt;code&gt;&quot;islc&quot;&lt;/code&gt; 반환 된 목록을 포함하는 하나 개의 요소했다 예를 들어, &lt;code&gt;&quot;Is_&quot;&lt;/code&gt; , 그리고 다른.</target>
        </trans-unit>
        <trans-unit id="84247d6d8b5f4deb4e612831eb63153e1c94e8c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_aliases&lt;/code&gt; does not know about any user-defined properties, and will return &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if called with one of those. Likewise for Perl internal properties, with the exception of &quot;Perl_Decimal_Digit&quot; which it does know about (and which is documented below in &lt;a href=&quot;#prop_invmap()&quot;&gt;prop_invmap()&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;prop_aliases&lt;/code&gt; 는 사용자 정의 속성에 대해 알지 못하며 그 중 하나를 사용하여 호출하면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. &quot;Perl_Decimal_Digit&quot;를 제외하고 Perl 내부 특성에 &lt;a href=&quot;#prop_invmap()&quot;&gt;대해서도 마찬가지입니다 (&lt;/a&gt; 아래에 prop_invmap ()에 설명되어 있음 ).</target>
        </trans-unit>
        <trans-unit id="7953418e303ebec2e000b3657eaba392401f0f7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_aliases&lt;/code&gt; does not know about any user-defined properties, and will return &lt;code&gt;undef&lt;/code&gt; if called with one of those. Likewise for Perl internal properties, with the exception of &quot;Perl_Decimal_Digit&quot; which it does know about (and which is documented below in &lt;a href=&quot;#prop_invmap%28%29&quot;&gt;&quot;prop_invmap()&quot;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;prop_aliases&lt;/code&gt; 는 사용자 정의 속성에 대해 알지 못하며 그중 하나와 함께 호출되면 &lt;code&gt;undef&lt;/code&gt; 를 반환 합니다. Perl 내부 속성의 경우도 마찬가지입니다.하지만 알고있는 &quot;Perl_Decimal_Digit&quot;는 예외입니다 (아래 &lt;a href=&quot;#prop_invmap%28%29&quot;&gt;&quot;prop_invmap ()&quot;&lt;/a&gt; 에 문서화되어 있음 ).</target>
        </trans-unit>
        <trans-unit id="aaf618289fe95f5c6591702e1bf3bea4922c7495" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_invlist&lt;/code&gt; does not know about any user-defined nor Perl internal-only properties, and will return &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if called with one of those.</source>
          <target state="translated">&lt;code&gt;prop_invlist&lt;/code&gt; 는 사용자 정의 또는 Perl 내부 전용 특성에 대해 알지 못하며 그 중 하나를 사용하여 호출하면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="1638bd6528e8315c734f262e578bda41a74ac380" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_invlist&lt;/code&gt; does not know about any user-defined nor Perl internal-only properties, and will return &lt;code&gt;undef&lt;/code&gt; if called with one of those.</source>
          <target state="translated">&lt;code&gt;prop_invlist&lt;/code&gt; 는 사용자 정의 속성이나 Perl 내부 전용 속성에 대해 알지 못하며 그중 하나와 함께 호출되면 &lt;code&gt;undef&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="9f5aeeb87bafc369250d5ed39e16fa0a2f0af855" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_invlist&lt;/code&gt; returns an inversion list (described below) that defines all the code points for the binary Unicode property (or &quot;property=value&quot; pair) given by the input parameter string:</source>
          <target state="translated">&lt;code&gt;prop_invlist&lt;/code&gt; 는 입력 매개 변수 문자열이 제공하는 2 진 유니 코드 특성 (또는 &quot;property = value&quot;쌍)의 모든 코드 포인트를 정의하는 반전 목록 (아래 설명 참조)을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="fa989c8b4b5a95be8ec4aa8facd791849d814072" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_invmap&lt;/code&gt; does not know about any user-defined properties, and will return &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if called with one of those.</source>
          <target state="translated">&lt;code&gt;prop_invmap&lt;/code&gt; 은 사용자 정의 속성에 대해 알지 못하며 그 중 하나를 사용하여 호출하면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="f434f40fc0c8cfb7f61886611000f3ab0f7f5797" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_invmap&lt;/code&gt; does not know about any user-defined properties, and will return &lt;code&gt;undef&lt;/code&gt; if called with one of those.</source>
          <target state="translated">&lt;code&gt;prop_invmap&lt;/code&gt; 은 사용자 정의 속성에 대해 알지 못하며 그중 하나와 함께 호출되면 &lt;code&gt;undef&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="46b5d2b41a100d477c28d52672a39b5906a388f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_invmap&lt;/code&gt; is called with the name of the desired property. The name is loosely matched, meaning that differences in case, white-space, hyphens, and underscores are not meaningful (except for the trailing underscore in the old-form grandfathered-in property &lt;code&gt;&quot;L_&quot;&lt;/code&gt; , which is better written as &lt;code&gt;&quot;LC&quot;&lt;/code&gt; , or even better, &lt;code&gt;&quot;Gc=LC&quot;&lt;/code&gt; ).</source>
          <target state="translated">&lt;code&gt;prop_invmap&lt;/code&gt; 은 원하는 속성의 이름으로 호출됩니다. 이름이 느슨하게 일치합니다. 즉, 공백, 하이픈 및 밑줄의 차이는 의미가 없습니다 (이전의 할아버지 속성 인 &lt;code&gt;&quot;L_&quot;&lt;/code&gt; 의 마지막 밑줄은 &lt;code&gt;&quot;LC&quot;&lt;/code&gt; 로 표시됨) 또는 더 나은 방법은 &lt;code&gt;&quot;Gc=LC&quot;&lt;/code&gt; )입니다.</target>
        </trans-unit>
        <trans-unit id="703bfeb4db55845afb59c57463ce2882efc9ee21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_invmap&lt;/code&gt; is called with the name of the desired property. The name is loosely matched, meaning that differences in case, white-space, hyphens, and underscores are not meaningful (except for the trailing underscore in the old-form grandfathered-in property &lt;code&gt;&quot;L_&quot;&lt;/code&gt;, which is better written as &lt;code&gt;&quot;LC&quot;&lt;/code&gt;, or even better, &lt;code&gt;&quot;Gc=LC&quot;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;prop_invmap&lt;/code&gt; 은 원하는 속성의 이름으로 호출됩니다. 이름이 느슨하게 일치하므로 대소 문자, 공백, 하이픈 및 밑줄의 차이는 의미가 없습니다 ( &lt;code&gt;&quot;LC&quot;&lt;/code&gt; 로 더 잘 작성되는 이전 형식의 grandfathered-in 속성 &lt;code&gt;&quot;L_&quot;&lt;/code&gt; 의 후행 밑줄 제외) , 또는 더 나은 방법은 &lt;code&gt;&quot;Gc=LC&quot;&lt;/code&gt; )입니다.</target>
        </trans-unit>
        <trans-unit id="3074dd56d5e2ce626fd458ce5170ea74b97c7854" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_invmap&lt;/code&gt; is used to get the complete mapping definition for a property, in the form of an inversion map. An inversion map consists of two parallel arrays. One is an ordered list of code points that mark range beginnings, and the other gives the value (or mapping) that all code points in the corresponding range have.</source>
          <target state="translated">&lt;code&gt;prop_invmap&lt;/code&gt; 은 반전 맵 형식으로 속성에 대한 완전한 매핑 정의를 얻는 데 사용됩니다. 반전 맵은 두 개의 병렬 배열로 구성됩니다. 하나는 범위 시작을 표시하는 순서가 지정된 코드 포인트 목록이고 다른 하나는 해당 범위의 모든 코드 포인트가 갖는 값 (또는 매핑)을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="65de781e7dc1c905cffccb28d15af3c75f99eaef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_value_aliases&lt;/code&gt; does not know about any user-defined properties, and will return &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if called with one of those.</source>
          <target state="translated">&lt;code&gt;prop_value_aliases&lt;/code&gt; 는 사용자 정의 속성에 대해 알지 못하며 그 중 하나를 사용하여 호출하면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="d87971a864bcd8a658d6ec337955f9b90543f14b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_value_aliases&lt;/code&gt; does not know about any user-defined properties, and will return &lt;code&gt;undef&lt;/code&gt; if called with one of those.</source>
          <target state="translated">&lt;code&gt;prop_value_aliases&lt;/code&gt; 는 사용자 정의 속성에 대해 알지 못하며 그중 하나와 함께 호출되면 &lt;code&gt;undef&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="13aedd3349055ca063b2a3be5fc3130232f4fe52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_values&lt;/code&gt; does not know about any user-defined properties, and will return &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if called with one of those.</source>
          <target state="translated">&lt;code&gt;prop_values&lt;/code&gt; 는 사용자 정의 속성에 대해 알지 못하며 그 중 하나를 사용하여 호출하면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="aa6a8976393f856a6612e00a4cc756fe33e448f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_values&lt;/code&gt; does not know about any user-defined properties, and will return &lt;code&gt;undef&lt;/code&gt; if called with one of those.</source>
          <target state="translated">&lt;code&gt;prop_values&lt;/code&gt; 는 사용자 정의 속성에 대해 알지 못하며 그중 하나와 함께 호출되면 &lt;code&gt;undef&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="0ddc272f36f5e49350c5abcefb9763e22470ad34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;proto&lt;/code&gt; specifies the protocol to use when doing a ping. The current choices are &quot;tcp&quot;, &quot;udp&quot;, &quot;icmp&quot;, &quot;icmpv6&quot;, &quot;stream&quot;, &quot;syn&quot;, or &quot;external&quot;. The default is &quot;tcp&quot;.</source>
          <target state="translated">&lt;code&gt;proto&lt;/code&gt; 는 핑을 수행 할 때 사용할 프로토콜을 지정합니다. 현재 선택 항목은 &quot;tcp&quot;, &quot;udp&quot;, &quot;icmp&quot;, &quot;icmpv6&quot;, &quot;stream&quot;, &quot;syn&quot;또는 &quot;external&quot;입니다. 기본값은 &quot;tcp&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="6f4d3b7247a55fb61841c2cd9220df8051e3eff0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;proto&lt;/code&gt; specifies the subroutine's prototype, unless one is supplied as an attribute (see below). If &lt;code&gt;proto&lt;/code&gt; is null, then the subroutine will not have a prototype. If &lt;code&gt;proto&lt;/code&gt; is non-null, it must point to a &lt;code&gt;const&lt;/code&gt; op whose value is a string, and the subroutine will have that string as its prototype. If a prototype is supplied as an attribute, the attribute takes precedence over &lt;code&gt;proto&lt;/code&gt;, but in that case &lt;code&gt;proto&lt;/code&gt; should preferably be null. In any case, &lt;code&gt;proto&lt;/code&gt; is consumed by this function.</source>
          <target state="translated">&lt;code&gt;proto&lt;/code&gt; 는 속성으로 제공되지 않는 한 서브 루틴의 프로토 타입을 지정합니다 (아래 참조). 경우 &lt;code&gt;proto&lt;/code&gt; 널 (null)이며, 그 다음 서브 루틴 프로토 타입이 없습니다. &lt;code&gt;proto&lt;/code&gt; 가 null이 아닌 경우 값이 문자열 인 &lt;code&gt;const&lt;/code&gt; op를 가리켜 야 하며 서브 루틴은 해당 문자열을 프로토 타입으로 갖게됩니다. 프로토 타입이 속성으로 제공되는 경우 속성은 &lt;code&gt;proto&lt;/code&gt; 보다 우선 하지만이 경우 &lt;code&gt;proto&lt;/code&gt; 는 가급적 null이어야합니다. 어쨌든 &lt;code&gt;proto&lt;/code&gt; 는이 함수에 의해 소비됩니다.</target>
        </trans-unit>
        <trans-unit id="025e4acec1a7e67356fe238218a8a736c87f0ad8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;protocol&lt;/code&gt; - If this field exists, it is the protocol of the response such as HTTP/1.0 or HTTP/1.1</source>
          <target state="translated">&lt;code&gt;protocol&lt;/code&gt; - 이 필드가 있으면 HTTP / 1.0 또는 HTTP / 1.1과 같은 응답의 프로토콜입니다.</target>
        </trans-unit>
        <trans-unit id="e345aaf2d0965411b10af684de0165f324819cb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;protosv&lt;/code&gt; supplies the subroutine prototype to be applied to the call, or indicates that there is no prototype. It may be a normal scalar, in which case if it is defined then the string value will be used as a prototype, and if it is undefined then there is no prototype. Alternatively, for convenience, it may be a subroutine object (a &lt;code&gt;CV*&lt;/code&gt; that has been cast to &lt;code&gt;SV*&lt;/code&gt;), of which the prototype will be used if it has one. The prototype (or lack thereof) supplied, in whichever form, does not need to match the actual callee referenced by the op tree.</source>
          <target state="translated">&lt;code&gt;protosv&lt;/code&gt; 는 호출에 적용 할 서브 루틴 프로토 타입을 제공하거나 프로토 타입이 없음을 나타냅니다. 일반 스칼라 일 수 있습니다.이 경우 정의 된 경우 문자열 값이 프로토 타입으로 사용되며 정의되지 않은 경우 프로토 타입이 없습니다. 또는 편의를 위해 서브 루틴 객체 ( &lt;code&gt;SV*&lt;/code&gt; 로 캐스트 된 &lt;code&gt;CV*&lt;/code&gt; * ) 일 수 있으며, 프로토 타입이 있으면 프로토 타입이 사용됩니다. 어떤 형식 으로든 제공된 프로토 타입 (또는 그 부족)은 op 트리에서 참조하는 실제 호출 수신자와 일치 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="ff45ab6432c237367d478b2fc2feb55b5064d36b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;protosv&lt;/code&gt; supplies the subroutine prototype to be applied to the call. It may be a normal defined scalar, of which the string value will be used. Alternatively, for convenience, it may be a subroutine object (a &lt;code&gt;CV*&lt;/code&gt; that has been cast to &lt;code&gt;SV*&lt;/code&gt;) which has a prototype. The prototype supplied, in whichever form, does not need to match the actual callee referenced by the op tree.</source>
          <target state="translated">&lt;code&gt;protosv&lt;/code&gt; 는 호출에 적용 할 서브 루틴 프로토 타입을 제공합니다. 문자열 값이 사용되는 일반 정의 스칼라 일 수 있습니다. 또는 편의를 위해 프로토 타입 이있는 서브 루틴 객체 ( &lt;code&gt;SV*&lt;/code&gt; 로 캐스트 된 &lt;code&gt;CV*&lt;/code&gt; * ) 일 수 있습니다. 어떤 형식 으로든 제공된 프로토 타입은 op 트리에서 참조하는 실제 호출 수신자와 일치 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="bda9cda944e40e411f22f900e42edf69ce3fb4e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;proxy&lt;/code&gt; &amp;mdash; URL of a generic proxy server for both HTTP and HTTPS connections (default is &lt;code&gt;$ENV{all_proxy}&lt;/code&gt; &amp;mdash; if set)</source>
          <target state="translated">&lt;code&gt;proxy&lt;/code&gt; &amp;mdash; HTTP 및 HTTPS 연결을위한 일반 프록시 서버의 URL (기본값은 &lt;code&gt;$ENV{all_proxy}&lt;/code&gt; &amp;mdash; 설정된 경우)</target>
        </trans-unit>
        <trans-unit id="dd4cc0a06278943ac41398dc99f108f246fb54a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;push&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;shift&lt;/code&gt;, &lt;code&gt;unshift&lt;/code&gt;, and &lt;code&gt;splice&lt;/code&gt; cannot be deferred. When you perform one of these operations, any deferred data is written to the file and the operation is performed immediately. This may change in a future version.</source>
          <target state="translated">&lt;code&gt;push&lt;/code&gt; , &lt;code&gt;pop&lt;/code&gt; , &lt;code&gt;shift&lt;/code&gt; , &lt;code&gt;unshift&lt;/code&gt; 및 &lt;code&gt;splice&lt;/code&gt; 는 연기 할 수 없습니다. 이러한 작업 중 하나를 수행하면 지연된 데이터가 파일에 기록되고 작업이 즉시 수행됩니다. 이는 향후 버전에서 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="afae59394fcb0c2c8ba7fce697eedb4d4f7b0ca0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;qr/pattern/msixpodualn&lt;/code&gt; lets you store a regex in a variable, or pass one around. Modifiers as for &lt;code&gt;m//&lt;/code&gt;, and are stored within the regex.</source>
          <target state="translated">&lt;code&gt;qr/pattern/msixpodualn&lt;/code&gt; 을 사용하면 정규식을 변수에 저장하거나 하나를 전달할 수 있습니다. &lt;code&gt;m//&lt;/code&gt; 대한 수정 자 이며 정규식 내에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="8acb95a5fba19d0ac89c9aa75acbca0f4c389ed0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;qr&lt;/code&gt; must return a compiled regexp, or a ref to a compiled regexp (such as &lt;code&gt;qr//&lt;/code&gt; returns), and any further overloading on the return value will be ignored.</source>
          <target state="translated">&lt;code&gt;qr&lt;/code&gt; 은 컴파일 된 정규 표현식 또는 컴파일 된 정규 표현식에 대한 참조 (예 : &lt;code&gt;qr//&lt;/code&gt; 반환)를 반환해야하며 반환 값에 대한 추가 오버로드는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="e332d3a9c72cce75d77414d7900c29b799b64b26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;quadmath_format_needed()&lt;/code&gt; returns true if the &lt;code&gt;format&lt;/code&gt; string seems to contain at least one non-Q-prefixed &lt;code&gt;%[efgaEFGA]&lt;/code&gt; format specifier, or returns false otherwise.</source>
          <target state="translated">&lt;code&gt;quadmath_format_needed()&lt;/code&gt; 는 &lt;code&gt;format&lt;/code&gt; 문자열이 적어도 하나의 비 Q 접두사 &lt;code&gt;%[efgaEFGA]&lt;/code&gt; 형식 지정자 를 포함하는 것처럼 보이면 true를 반환하고 그렇지 않으면 false를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fbf0fb739653e12e7a6a4c395c0a5d42c93032d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;quadmath_format_valid()&lt;/code&gt; checks that the intended single spec looks sane: begins with &lt;code&gt;%&lt;/code&gt;, has only one &lt;code&gt;%&lt;/code&gt;, ends with &lt;code&gt;[efgaEFGA]&lt;/code&gt;, and has &lt;code&gt;Q&lt;/code&gt; before it. This is not a full &quot;printf syntax check&quot;, just the basics.</source>
          <target state="translated">&lt;code&gt;quadmath_format_valid()&lt;/code&gt; (가) 단일 사양 보이는 SANE 의도 검사 : 시작 &lt;code&gt;%&lt;/code&gt; 하나만 갖고 &lt;code&gt;%&lt;/code&gt; 를 가진 단부 &lt;code&gt;[efgaEFGA]&lt;/code&gt; 및 보유 &lt;code&gt;Q&lt;/code&gt; 를 그 전에. 이것은 완전한 &quot;printf 구문 검사&quot;가 아니라 기본 사항 일뿐입니다.</target>
        </trans-unit>
        <trans-unit id="a3d83b784fb7fbf828698d133f5d9df87ff65ca3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;quadmath_snprintf()&lt;/code&gt; is very strict about its &lt;code&gt;format&lt;/code&gt; string and will fail, returning -1, if the format is invalid. It accepts exactly one format spec.</source>
          <target state="translated">&lt;code&gt;quadmath_snprintf()&lt;/code&gt; 는 &lt;code&gt;format&lt;/code&gt; 문자열 에 대해 매우 엄격 하며 형식이 유효하지 않으면 실패하고 -1을 반환합니다. 정확히 하나의 형식 사양을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="30c062a836b2a17ba1fed01a1ef5000f0f504308" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;quote&lt;/code&gt;, &lt;code&gt;HighBit&lt;/code&gt;, &lt;code&gt;undefPrint&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;quote&lt;/code&gt;, &lt;code&gt;HighBit&lt;/code&gt;, &lt;code&gt;undefPrint&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6e20f11d061f309c8e06e804fa973c7cd62bdffd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;quotemeta()&lt;/code&gt; and &lt;code&gt;\Q&lt;/code&gt; are fully described in &lt;a href=&quot;perlfunc#quotemeta&quot;&gt;&quot;quotemeta&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;quotemeta()&lt;/code&gt; 및 &lt;code&gt;\Q&lt;/code&gt; 는 &lt;a href=&quot;perlfunc#quotemeta&quot;&gt;perlfunc의 &quot;quotemeta&quot;에&lt;/a&gt; 자세히 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="7f5c4503b427b56019a1f3a486ec67152a932298" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;qx//&lt;/code&gt; can also be called like a function with &lt;a href=&quot;perlfunc#readpipe&quot;&gt;&quot;readpipe&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;qx//&lt;/code&gt; 는 &lt;a href=&quot;perlfunc#readpipe&quot;&gt;perlfunc에서 &quot;readpipe&quot;를 사용&lt;/a&gt; 하는 함수처럼 호출 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="95d2317779e8d3054fa2ce4aa172a9af30ee26ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;qx&lt;/code&gt; (aka the backtick operator), &lt;code&gt;system&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;qx&lt;/code&gt; (일명 백틱 연산자), &lt;code&gt;system&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8b59a52af9bb8b07d9a7e6951db46bf17370248d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rand($x)&lt;/code&gt; returns a number such that &lt;code&gt;0 &amp;lt;= rand($x) &amp;lt; $x&lt;/code&gt;. Thus what you want to have perl figure out is a random number in the range from 0 to the difference between your</source>
          <target state="translated">&lt;code&gt;rand($x)&lt;/code&gt; 는 &lt;code&gt;0 &amp;lt;= rand($x) &amp;lt; $x&lt;/code&gt; 와 같은 숫자를 반환합니다 . 따라서 Perl이 알아 내고 싶은 것은 0에서 다음과 같은 범위의 난수입니다.</target>
        </trans-unit>
        <trans-unit id="48fe37f0dcf25b4c9fbcdaa8fe00af0106f0a081" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rawdeflate&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;rawdeflate&lt;/code&gt; 는 최소한 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 매개 변수를 예상 합니다.</target>
        </trans-unit>
        <trans-unit id="3de78f1b73590498b86947f2d769c7f1f2a64a3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rawdeflate&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;rawdeflate&lt;/code&gt; 는 두 개 이상의 매개 변수, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 와 0 개 이상의 선택적 매개 변수를 예상합니다 ( &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;선택적 매개 변수&quot;&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="0e8c618e9a88333bd82066b9c07a4093fb94d4fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rawinflate&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;rawinflate&lt;/code&gt; 는 최소한 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 매개 변수를 예상 합니다.</target>
        </trans-unit>
        <trans-unit id="6900770c7e3e9b0d226402924902ef0da9d825e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rawinflate&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;rawinflate&lt;/code&gt; 는 두 개 이상의 매개 변수, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 와 0 개 이상의 선택적 매개 변수를 예상합니다 ( &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;선택적 매개 변수&quot;&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="be3e1d0c526ec4f08f4256e3d160e1ce60b273a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;re_intuit_start()&lt;/code&gt; is responsible for handling start points and no-match optimisations as determined by the results of the analysis done by &lt;code&gt;study_chunk()&lt;/code&gt; (and described in &lt;a href=&quot;#Peep-hole-Optimisation-and-Analysis&quot;&gt;&quot;Peep-hole Optimisation and Analysis&quot;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;re_intuit_start()&lt;/code&gt; 시작 지점 및 수행 분석 결과에 의해 결정 불일치의 최적화 처리에 대한 책임이 &lt;code&gt;study_chunk()&lt;/code&gt; (및 설명 &lt;a href=&quot;#Peep-hole-Optimisation-and-Analysis&quot;&gt;&quot;관음증 홀 최적화 및 분석&quot;&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="5b1f960c44856903d77b260a19d1e06dab18de4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;re_intuit_start()&lt;/code&gt; is responsible for handling start points and no-match optimisations as determined by the results of the analysis done by &lt;code&gt;study_chunk()&lt;/code&gt; (and described in &lt;a href=&quot;#Peep-hole-Optimisation-and-Analysis&quot;&gt;Peep-hole Optimisation and Analysis&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;re_intuit_start()&lt;/code&gt; 는 study_chunk () 에 의해 수행 된 분석 결과에 의해 &lt;code&gt;study_chunk()&lt;/code&gt; 및 불일치 &lt;a href=&quot;#Peep-hole-Optimisation-and-Analysis&quot;&gt;최적화&lt;/a&gt; 를 처리합니다 ( Peep-hole Optimization and Analysis에 설명되어 있음 ).</target>
        </trans-unit>
        <trans-unit id="e9879c08ced97a0fc27f0387bd62c459097f0631" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;re_strict&lt;/code&gt; - enables strict mode in regular expressions</source>
          <target state="translated">&lt;code&gt;re_strict&lt;/code&gt; - 정규식에서 엄격 모드를 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="dc4d6f0e0e943c5446c9b9802362a19e836e3f0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;read()&lt;/code&gt; reads characters and returns the number of characters. &lt;code&gt;seek()&lt;/code&gt; and &lt;code&gt;tell()&lt;/code&gt; operate on byte counts, as does &lt;code&gt;sysseek()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;read()&lt;/code&gt; 는 문자를 읽고 문자 수를 반환합니다. &lt;code&gt;seek()&lt;/code&gt; 및 &lt;code&gt;tell()&lt;/code&gt; 은 &lt;code&gt;sysseek()&lt;/code&gt; 와 마찬가지로 바이트 수에 대해 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="c22e31c7f0f9aa65c05ce98460ad154ac12527a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;readdir&lt;/code&gt;, &lt;code&gt;readlink&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;readdir&lt;/code&gt;, &lt;code&gt;readlink&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6225c296acfc5e3b5f6f0c2e8719d05816704086" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;readme&lt;/code&gt; displays the README file of the associated distribution. &lt;code&gt;Look&lt;/code&gt; gets and untars (if not yet done) the distribution file, changes to the appropriate directory and opens a subshell process in that directory. &lt;code&gt;perldoc&lt;/code&gt; displays the module's pod documentation in html or plain text format.</source>
          <target state="translated">&lt;code&gt;readme&lt;/code&gt; 는 연관된 분배의 README 파일을 표시합니다. &lt;code&gt;Look&lt;/code&gt; 은 배포 파일을 가져오고 untar (아직 수행하지 않은 경우)하고 해당 디렉토리로 변경 한 후 해당 디렉토리에서 서브 쉘 프로세스를 엽니 다. &lt;code&gt;perldoc&lt;/code&gt; 은 모듈의 포드 설명서를 html 또는 일반 텍스트 형식으로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="616eedbf531a925f329a14e071a3cf7f343db86b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rearrange&lt;/code&gt; and &lt;code&gt;hangul_terminator&lt;/code&gt; parameters are neglected. &lt;code&gt;katakana_before_hiragana&lt;/code&gt; and &lt;code&gt;upper_before_lower&lt;/code&gt; don't affect matching and searching, as it doesn't matter whether greater or less.</source>
          <target state="translated">&lt;code&gt;rearrange&lt;/code&gt; 및 &lt;code&gt;hangul_terminator&lt;/code&gt; 매개 변수는 무시됩니다. &lt;code&gt;katakana_before_hiragana&lt;/code&gt; 및 &lt;code&gt;upper_before_lower&lt;/code&gt; 는 일치 여부에 영향을 미치지 않습니다. 크든 작든 상관 없습니다.</target>
        </trans-unit>
        <trans-unit id="b71d1e85a9f87ede8f1c8dcd7a1c4f81e4492184" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reason&lt;/code&gt; &amp;mdash; The response phrase returned by the server</source>
          <target state="translated">&lt;code&gt;reason&lt;/code&gt; &amp;mdash; 서버에서 반환 한 응답 문구</target>
        </trans-unit>
        <trans-unit id="7088a75b0ffcb8196d5342cb6b0d84db9b2c212b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recallCommand&lt;/code&gt;, &lt;code&gt;ShellBang&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;recallCommand&lt;/code&gt;, &lt;code&gt;ShellBang&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2031053d2f73cf50b46dd9d6bf80b7fe5eefaa91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;redirects&lt;/code&gt; If this field exists, it is an arrayref of response hash references from redirects in the same order that redirections occurred. If it does not exist, then no redirections occurred.</source>
          <target state="translated">&lt;code&gt;redirects&lt;/code&gt; 이 필드가 있으면 리디렉션이 발생한 순서와 동일한 순서로 리디렉션의 응답 해시 참조의 arrayref입니다. 존재하지 않으면 리디렉션이 발생하지 않은 것입니다.</target>
        </trans-unit>
        <trans-unit id="c5b051b18f244f32b477dab470c052b7ab042e5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;refaliasing&lt;/code&gt; - allow aliasing via &lt;code&gt;\$x = \$y&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;refaliasing&lt;/code&gt; - &lt;code&gt;\$x = \$y&lt;/code&gt; 를 통한 앨리어싱 허용</target>
        </trans-unit>
        <trans-unit id="32262b67d0cac610b2102229a9b0152387e6b973" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reg()&lt;/code&gt; is the start of the parse process. It is responsible for parsing an arbitrary chunk of pattern up to either the end of the string, or the first closing parenthesis it encounters in the pattern. This means it can be used to parse the top-level regex, or any section inside of a grouping parenthesis. It also handles the &quot;special parens&quot; that perl's regexes have. For instance when parsing &lt;code&gt;/x(?:foo)y/&lt;/code&gt;, &lt;code&gt;reg()&lt;/code&gt; will at one point be called to parse from the &quot;?&quot; symbol up to and including the &quot;)&quot;.</source>
          <target state="translated">&lt;code&gt;reg()&lt;/code&gt; 는 구문 분석 프로세스의 시작입니다. 문자열의 끝이나 패턴에서 만나는 첫 번째 닫는 괄호까지 임의의 패턴 청크를 구문 분석합니다. 즉, 최상위 정규식 또는 그룹화 괄호 안의 섹션을 구문 분석하는 데 사용할 수 있습니다. 또한 perl의 정규식에있는 &quot;특수 괄호&quot;를 처리합니다. 예를 들어 때 구문 분석 &lt;code&gt;/x(?:foo)y/&lt;/code&gt; , &lt;code&gt;reg()&lt;/code&gt; ? &quot;&quot;한 지점에서에서 구문 분석에 호출됩니다 기호는 &quot;)&quot;까지 포함합니다.</target>
        </trans-unit>
        <trans-unit id="5a7e3a62ac5d117a96b72d8dcabc1b9d96e467f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reg()&lt;/code&gt; is the start of the parse process. It is responsible for parsing an arbitrary chunk of pattern up to either the end of the string, or the first closing parenthesis it encounters in the pattern. This means it can be used to parse the top-level regex, or any section inside of a grouping parenthesis. It also handles the &quot;special parens&quot; that perl's regexes have. For instance when parsing &lt;code&gt;/x(?:foo)y/&lt;/code&gt;&lt;code&gt;reg()&lt;/code&gt; will at one point be called to parse from the &quot;?&quot; symbol up to and including the &quot;)&quot;.</source>
          <target state="translated">&lt;code&gt;reg()&lt;/code&gt; 는 구문 분석 프로세스의 시작입니다. 문자열 끝까지 또는 패턴에서 첫 번째 닫는 괄호까지 임의의 패턴 청크를 구문 분석합니다. 이것은 최상위 정규 표현식 또는 그룹 괄호 안의 섹션을 구문 분석하는 데 사용할 수 있음을 의미합니다. 또한 펄의 정규 표현식이 가진 &quot;특별한 parens&quot;를 다룬다. 예를 들어 &lt;code&gt;/x(?:foo)y/&lt;/code&gt; &lt;code&gt;reg()&lt;/code&gt; 구문 분석시 &quot;?&quot; &quot;)&quot;까지의 기호.</target>
        </trans-unit>
        <trans-unit id="0c957111983f253e3076925e4631813db6c2822e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regbranch()&lt;/code&gt; in turn calls &lt;code&gt;regpiece()&lt;/code&gt; which handles &quot;things&quot; followed by a quantifier. In order to parse the &quot;things&quot;, &lt;code&gt;regatom()&lt;/code&gt; is called. This is the lowest level routine, which parses out constant strings, character classes, and the various special symbols like &lt;code&gt;$&lt;/code&gt; . If &lt;code&gt;regatom()&lt;/code&gt; encounters a &quot;(&quot; character it in turn calls &lt;code&gt;reg()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;regbranch()&lt;/code&gt; 는 &quot;things&quot;다음에 수량 &lt;code&gt;regpiece()&lt;/code&gt; 처리하는 regpiece () 를 호출합니다 . &quot;things&quot;를 파싱하기 위해 &lt;code&gt;regatom()&lt;/code&gt; 이 호출됩니다. 이것은 상수 문자열, 문자 클래스 및 &lt;code&gt;$&lt;/code&gt; 와 같은 다양한 특수 기호를 구문 분석하는 가장 낮은 수준의 루틴 입니다. 경우 &lt;code&gt;regatom()&lt;/code&gt; 에 &quot;(&quot;문자를 발견가 차례로 호출 &lt;code&gt;reg()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a7f8fbab91692448d1ed9c47ed3f28aba84fad77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regbranch()&lt;/code&gt; in turn calls &lt;code&gt;regpiece()&lt;/code&gt; which handles &quot;things&quot; followed by a quantifier. In order to parse the &quot;things&quot;, &lt;code&gt;regatom()&lt;/code&gt; is called. This is the lowest level routine, which parses out constant strings, character classes, and the various special symbols like &lt;code&gt;$&lt;/code&gt;. If &lt;code&gt;regatom()&lt;/code&gt; encounters a &quot;(&quot; character it in turn calls &lt;code&gt;reg()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;regbranch()&lt;/code&gt; 는 차례로 &quot;사물&quot;다음에 수량 &lt;code&gt;regpiece()&lt;/code&gt; 처리하는 regpiece () 를 호출합니다 . &quot;사물&quot;을 구문 분석하기 위해 &lt;code&gt;regatom()&lt;/code&gt; 이 호출됩니다. 이것은 상수 문자열, 문자 클래스 및 &lt;code&gt;$&lt;/code&gt; 와 같은 다양한 특수 기호를 구문 분석하는 가장 낮은 수준의 루틴 입니다. 경우 &lt;code&gt;regatom()&lt;/code&gt; 에 &quot;(&quot;문자를 발견가 차례로 호출 &lt;code&gt;reg()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="02eebbd56aa29755a9b8438c1a1a34663c687bfa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regex_sets&lt;/code&gt; - allow extended bracketed character classes in regexps</source>
          <target state="translated">&lt;code&gt;regex_sets&lt;/code&gt; - 정규 표현식에서 확장 된 대괄호 문자 클래스 허용</target>
        </trans-unit>
        <trans-unit id="0e0285a40e365527c3360c8043442411516f88d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regmatch&lt;/code&gt; is the main &quot;recursive loop&quot; of the interpreter. It is basically a giant switch statement that implements a state machine, where the possible states are the regops themselves, plus a number of additional intermediate and failure states. A few of the states are implemented as subroutines but the bulk are inline code.</source>
          <target state="translated">&lt;code&gt;regmatch&lt;/code&gt; 는 인터프리터의 주요 &quot;재귀 루프&quot;입니다. 기본적으로 상태 머신을 구현하는 거대한 스위치 문으로, 가능한 상태가 레고 프 자체이고 여러 추가 중간 및 실패 상태가 있습니다. 상태 중 일부는 서브 루틴으로 구현되지만 대량은 인라인 코드입니다.</target>
        </trans-unit>
        <trans-unit id="34320379070d5c0b4b993f583fcab86440065756" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regnode_1&lt;/code&gt; structures have the same header, followed by a single four-byte argument; &lt;code&gt;regnode_2&lt;/code&gt; structures contain two two-byte arguments instead:</source>
          <target state="translated">&lt;code&gt;regnode_1&lt;/code&gt; 구조는 동일한 헤더를 가지며 그 뒤에 단일 4 바이트 인수가옵니다. &lt;code&gt;regnode_2&lt;/code&gt; 구조체에는 두 개의 2 바이트 인수가 대신 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="e4dba4a9bca93381c17cd610e0197a487dcb2427" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regnode_string&lt;/code&gt; structures, used for literal strings, follow the header with a one-byte length and then the string data. Strings are padded on the end with zero bytes so that the total length of the node is a multiple of four bytes:</source>
          <target state="translated">&lt;code&gt;regnode_string&lt;/code&gt; 리터럴 문자열에 사용되는 regnode_string 구조는 1 바이트 길이의 헤더와 문자열 데이터를 따릅니다. 노드의 전체 길이가 4 바이트의 배수가되도록 문자열은 끝에 0 바이트로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="e47b82a6ae23398c73ac5e31fc2c21109ab1136e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regnode_string&lt;/code&gt; structures, used for literal strings, follow the header with a one-byte length and then the string data. Strings are padded on the tail end with zero bytes so that the total length of the node is a multiple of four bytes:</source>
          <target state="translated">&lt;code&gt;regnode_string&lt;/code&gt; 리터럴 문자열에 사용되는 regnode_string 구조는 1 바이트 길이의 헤더 다음에 문자열 데이터를 따릅니다. 문자열은 끝 부분이 0 바이트로 채워져 노드의 총 길이가 4 바이트의 배수가됩니다.</target>
        </trans-unit>
        <trans-unit id="8da61c4024c5fde5d0d5083c10881096ea875b8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regtry()&lt;/code&gt; is the entry point into the regex interpreter. It expects as arguments a pointer to a &lt;code&gt;regmatch_info&lt;/code&gt; structure and a pointer to a string. It returns an integer 1 for success and a 0 for failure. It is basically a set-up wrapper around &lt;code&gt;regmatch()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;regtry()&lt;/code&gt; 는 정규식 인터프리터의 진입 점입니다. 인수로 &lt;code&gt;regmatch_info&lt;/code&gt; 구조에 대한 포인터와 문자열에 대한 포인터가 필요합니다. 성공하면 정수 1을, 실패하면 0을 리턴합니다. 기본적으로 &lt;code&gt;regmatch()&lt;/code&gt; 주위의 설정 래퍼 입니다.</target>
        </trans-unit>
        <trans-unit id="6ccbb08535479a243005d71982c034d77a82adda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regtry()&lt;/code&gt; is the entry point into the regex interpreter. It expects as arguments a pointer to a &lt;code&gt;regmatch_info&lt;/code&gt; structure and a pointer to a string. It returns an integer 1 for success and a 0 for failure. It is basically a set-up wrapper around &lt;code&gt;regmatch()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;regtry()&lt;/code&gt; 는 정규식 인터프리터의 진입 점입니다. &lt;code&gt;regmatch_info&lt;/code&gt; 구조에 대한 포인터와 문자열에 대한 포인터를 인수로 예상 합니다. 성공하면 정수 1을, 실패하면 0을 반환합니다. 기본적으로 &lt;code&gt;regmatch()&lt;/code&gt; 주위의 설정 래퍼 입니다.</target>
        </trans-unit>
        <trans-unit id="756a74a73b044c834db8626f057853b231e20123" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree()&lt;/code&gt;'s behaviour may be tuned by an optional hashref appearing as the last parameter on the call. If an empty string is passed to &lt;code&gt;remove_tree&lt;/code&gt;, an error will occur.</source>
          <target state="translated">&lt;code&gt;remove_tree()&lt;/code&gt; 의 동작은 호출의 마지막 매개 변수로 나타나는 선택적 해시 참조에 의해 조정될 수 있습니다. &lt;code&gt;remove_tree&lt;/code&gt; 에 빈 문자열이 전달 되면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d191563625501cd0dd042566cf3df9fdb6af17ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; , after having deleted everything and restored the permissions of a directory, was unable to chdir back to the parent. The program halts to avoid a race condition from occurring.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; 는 모든 항목을 삭제하고 디렉토리의 권한을 복원 한 후 부모에게 chdir 할 수 없습니다. 경쟁 조건이 발생하지 않도록 프로그램이 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="0e30094b13da141ed1e37ede35a62255c66728a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; , after having deleted everything in a directory, attempted to restore its permissions to the original state but failed. The directory may wind up being left behind.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; 는 디렉토리의 모든 항목을 삭제 한 후 권한을 원래 상태로 복원하려고 시도했지만 실패했습니다. 디렉토리가 뒤에 남을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae7b650aa563617f4ec9fe94e5aa32c051a39081" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; attempted to change the permissions on the current directory to ensure that subsequent unlinkings would not run into problems, but was unable to do so. The permissions remain as they were, and the program will carry on, doing the best it can.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; 는 현재 디렉토리에 대한 권한 변경을 시도하여 후속 연결 해제로 인해 문제가 발생하지는 않았지만 그렇게 할 수 없었습니다. 권한은 그대로 유지되며 프로그램은 최선을 다해 수행합니다.</target>
        </trans-unit>
        <trans-unit id="95bc3df474e248a2e04291479bd3fa33e8cd5330" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; attempted to determine the initial directory by calling &lt;code&gt;Cwd::getcwd&lt;/code&gt; , but the call failed for some reason. No attempt will be made to delete anything.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; 는 &lt;code&gt;Cwd::getcwd&lt;/code&gt; 를 호출하여 초기 디렉토리를 판별하려고 시도했지만 어떤 이유로 호출에 실패했습니다. 아무것도 삭제하려고 시도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="62def726fb82f655a702cd2c3581e60db5288319" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; attempted to determine the initial directory by calling &lt;code&gt;Cwd::getcwd&lt;/code&gt;, but the call failed for some reason. No attempt will be made to delete anything.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; 가 &lt;code&gt;Cwd::getcwd&lt;/code&gt; 를 호출하여 초기 디렉토리를 확인하려고했지만 어떤 이유로 인해 호출이 실패했습니다. 아무것도 삭제하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0c6ce072680f1019c3f3f85b4a8ee961eafa33e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; attempted to force the permissions of a file to ensure it could be deleted, but failed to do so. It will, however, still attempt to unlink the file.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; 는 파일의 삭제를 보장하기 위해 파일의 권한을 강제하려고 시도했지만 실패했습니다. 그러나 여전히 파일 연결을 해제하려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="97c03af431f1ab44b99d8b5b8fc841f1d6a8b1b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; attempted to remove a directory, but failed. This may be because some objects that were unable to be removed remain in the directory, or it could be a permissions issue. The directory will be left behind.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; 가 디렉토리 제거를 시도했지만 실패했습니다. 제거 할 수없는 일부 개체가 디렉터리에 남아 있거나 권한 문제 일 수 있습니다. 디렉토리는 남겨집니다.</target>
        </trans-unit>
        <trans-unit id="49be99d75fc1d4ab8517776a2c9c7bb74ae38eb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; attempted to remove a directory, but failed. This may because some objects that were unable to be removed remain in the directory, or a permissions issue. The directory will be left behind.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; 가 디렉토리를 제거하려고 시도했지만 실패했습니다. 제거 할 수없는 일부 개체가 디렉토리에 남아 있거나 권한 문제가 있기 때문일 수 있습니다. 디렉토리가 남겨집니다.</target>
        </trans-unit>
        <trans-unit id="e7616985ed5b969eec07392de1388ed772d59985" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; attempted to set the working directory in order to begin deleting the objects therein, but was unsuccessful. This is usually a permissions issue. The routine will continue to delete other things, but this directory will be left intact.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; 는 오브젝트 삭제를 시작하기 위해 작업 디렉토리 설정을 시도했지만 실패했습니다. 이것은 일반적으로 권한 문제입니다. 루틴은 다른 것을 계속 삭제하지만이 디렉토리는 그대로 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="721db6f7a6d0b1be4b6b64fdeb2aa4c3fac630d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; attempted to stat the initial directory (after having successfully obtained its name via &lt;code&gt;getcwd&lt;/code&gt; ), however, the call failed for some reason. No attempt will be made to delete anything.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; 가 &lt;code&gt;getcwd&lt;/code&gt; 를 통해 이름을 성공적으로 얻은 후 초기 디렉토리를 통계하려고 시도했지만 어떤 이유로 호출에 실패했습니다. 아무것도 삭제하려고 시도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5ad6e37f9ee24026c6891f8ea8cad5b065fcc2f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; attempted to stat the initial directory (after having successfully obtained its name via &lt;code&gt;getcwd&lt;/code&gt;), however, the call failed for some reason. No attempt will be made to delete anything.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; 가 초기 디렉토리를 stat하려고 시도했지만 ( &lt;code&gt;getcwd&lt;/code&gt; 를 통해 이름을 성공적으로 얻은 후 ) 어떤 이유로 호출이 실패했습니다. 아무것도 삭제하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9e2cfce733e90f2119a65972900f218ea1224963" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; failed to remove a file. Probably a permissions issue.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; 가 파일을 제거하지 못했습니다. 아마도 권한 문제 일 것입니다.</target>
        </trans-unit>
        <trans-unit id="7780e89fe07af9e10d0c6e4dc374ef9437694de0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; recorded the device and inode of a directory, and then moved into it. It then performed a &lt;code&gt;&lt;a href=&quot;../functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; on the current directory and detected that the device and inode were no longer the same. As this is at the heart of the race condition problem, the program will die at this point.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; 는 디렉토리의 장치와 inode를 기록한 다음 디렉토리로 옮겼습니다. 그런 다음 현재 디렉토리 에서 &lt;code&gt;&lt;a href=&quot;../functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; 를 수행 하고 장치와 inode가 더 이상 동일하지 않음을 감지했습니다. 이것이 경쟁 조건 문제의 핵심이므로이 시점에서 프로그램이 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="0c1ce908a28184dec15f73c4d24f75d1ae429287" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; recorded the device and inode of a directory, and then moved into it. It then performed a &lt;code&gt;stat&lt;/code&gt; on the current directory and detected that the device and inode were no longer the same. As this is at the heart of the race condition problem, the program will die at this point.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; 는 장치와 디렉토리의 inode를 기록한 다음 그 안으로 이동했습니다. 그런 다음 현재 디렉토리 에서 &lt;code&gt;stat&lt;/code&gt; 를 수행 하고 장치와 inode가 더 이상 동일하지 않음을 감지했습니다. 이것이 경쟁 조건 문제의 핵심이므로이 시점에서 프로그램이 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="7c936a52751bd20d0155292a8ba2362d698dcd12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; tried to read the contents of the directory in order to acquire the names of the directory entries to be unlinked, but was unsuccessful. This is usually a permissions issue. The program will continue, but the files in this directory will remain after the call.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; 는 링크를 해제 할 디렉토리 항목의 이름을 얻기 위해 디렉토리의 내용을 읽으려고했지만 실패했습니다. 이것은 일반적으로 권한 문제입니다. 프로그램은 계속 진행되지만이 디렉토리의 파일은 호출 후에도 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="b0893a833dba2da63d1689754e9baa173690a309" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; was unable to stat the parent directory after have returned from the child. Since there is no way of knowing if we returned to where we think we should be (by comparing device and inode) the only way out is to &lt;code&gt;croak&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; 자식에서 리턴 된 후 remove_tree 가 상위 디렉토리를 통계 할 수 없습니다. (장치와 inode를 비교하여) 우리가 있어야한다고 생각하는 곳으로 돌아 왔는지 알 수있는 방법이 없기 때문에 유일한 방법은 &lt;code&gt;croak&lt;/code&gt; 하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="fcc95caadd39c701babb53aed7cf4e82983752f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; was unable to stat the parent directory after having returned from the child. Since there is no way of knowing if we returned to where we think we should be (by comparing device and inode) the only way out is to &lt;code&gt;croak&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; 는 자식에서 돌아온 후 부모 디렉터리를 stat 할 수 없습니다. 우리가 (장치와 inode를 비교함으로써) 우리가 있어야한다고 생각하는 곳으로 돌아 왔는지 알 수있는 방법이 없기 때문에 유일한 방법은 &lt;code&gt;croak&lt;/code&gt; 하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="49c7739d189f502724359c79e96830844cc603dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt;, after having deleted everything and restored the permissions of a directory, was unable to chdir back to the parent. The program halts to avoid a race condition from occurring.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; 모든 것을 삭제하고 디렉토리의 권한을 복원 한 후 remove_tree 는 상위로 다시 chdir 할 수 없습니다. 경쟁 조건이 발생하지 않도록 프로그램이 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="e916929195c589fedc7fa6f3a273954aeac14e7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt;, after having deleted everything in a directory, attempted to restore its permissions to the original state but failed. The directory may wind up being left behind.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; 는 디렉토리의 모든 것을 삭제 한 후 권한을 원래 상태로 복원하려고 시도했지만 실패했습니다. 디렉토리가 남겨질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1ea1c7944247d6ffcb61ad07a6ffe54b513d1812" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;require&lt;/code&gt; has special additional dark magic: if you invoke your &lt;code&gt;require&lt;/code&gt; replacement as &lt;code&gt;require Foo::Bar&lt;/code&gt;, it will actually receive the argument &lt;code&gt;&quot;Foo/Bar.pm&quot;&lt;/code&gt; in @_. See &lt;a href=&quot;perlfunc#require&quot;&gt;&quot;require&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; 에는 특별한 추가 다크 매직이 있습니다. &lt;code&gt;require Foo::Bar&lt;/code&gt; 로 &lt;code&gt;require&lt;/code&gt; 교체 를 호출 하면 실제로 @_에서 &lt;code&gt;&quot;Foo/Bar.pm&quot;&lt;/code&gt; 인수를받습니다 . &lt;a href=&quot;perlfunc#require&quot;&gt;perlfunc의 &quot;require&quot;를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fd69d2d3e18f341cf60a46af272519b5c3cf1a79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;require_ok&lt;/code&gt; will guess whether the input is a module name or a filename.</source>
          <target state="translated">&lt;code&gt;require_ok&lt;/code&gt; 는 입력이 모듈 이름인지 파일 이름인지 추측합니다.</target>
        </trans-unit>
        <trans-unit id="8505e44467f89d3c5f13e3b0f5be5320e0760bab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;requires&lt;/code&gt; can tell you what other modules a particular module requires. This is particularly useful when you're intending to write a module for public release and are listing its prerequisites.</source>
          <target state="translated">&lt;code&gt;requires&lt;/code&gt; 특정 모듈이 요구하는 어떤 다른 모듈을 알 수 있습니다. 이 기능은 공개 릴리스 용 모듈을 작성하고 필수 구성 요소를 나열 할 때 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="d7622f99d032d83f40f152407bc369319dc35bc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;requires&lt;/code&gt; takes but one argument: the name of a module. It will then first check if it can actually load this module, and return undef if it can't. Otherwise, it will return a list of modules and pragmas that would have been loaded on the module's behalf.</source>
          <target state="translated">&lt;code&gt;requires&lt;/code&gt; 인수 하나만 필요합니다 : 모듈의 이름. 그런 다음 먼저이 모듈을 실제로로드 할 수 있는지 확인한 후 undef를 반환합니다. 그렇지 않으면 모듈 대신로드 된 모듈 및 pragma 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6e6e70e552e6b050c1d411581b7b701935fc2d73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;resolve_alias()&lt;/code&gt; does not need &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Encode::Alias&lt;/code&gt; ; it can be imported via &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Encode qw(resolve_alias)&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;resolve_alias()&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Encode::Alias&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;사용할&lt;/a&gt; 필요가 없습니다 . &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Encode qw(resolve_alias)&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;사용을&lt;/a&gt; 통해 가져올 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6e6ee4d86f14b41f2347416cb6fbd72c3ea8b481" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;resolve_alias()&lt;/code&gt; does not need &lt;code&gt;use Encode::Alias&lt;/code&gt;; it can be imported via &lt;code&gt;use Encode qw(resolve_alias)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;resolve_alias()&lt;/code&gt; 는 &lt;code&gt;use Encode::Alias&lt;/code&gt; 필요가 없습니다 . &lt;code&gt;use Encode qw(resolve_alias)&lt;/code&gt; 를 사용 하여 가져올 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2ec72b98ab29e9376244e1a028463dfab7884f99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;result_class&lt;/code&gt; (optional)</source>
          <target state="translated">&lt;code&gt;result_class&lt;/code&gt; (선택 사항)</target>
        </trans-unit>
        <trans-unit id="72ca88a64ac36a768e80f1c263135396e20389ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rewind&lt;/code&gt; resets the current position of the specified file handle to the beginning of the file. It's really just a convenience method equivalent in effect to &lt;code&gt;seek($fh,0,0)&lt;/code&gt;. It returns a true value if successful, and &lt;code&gt;undef&lt;/code&gt; if it fails.</source>
          <target state="translated">&lt;code&gt;rewind&lt;/code&gt; 는 지정된 파일 핸들의 현재 위치를 파일의 시작 부분으로 재설정합니다. 실제로 &lt;code&gt;seek($fh,0,0)&lt;/code&gt; 과 동등한 편의 메서드 일뿐 입니다. 성공하면 참 값을 반환하고 실패하면 &lt;code&gt;undef&lt;/code&gt; 를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d808ac5985f7e78ab592ddff0b507312a4763996" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rmscopy&lt;/code&gt; is VMS specific and cannot be exported; it must be referenced by its full name, e.g.:</source>
          <target state="translated">&lt;code&gt;rmscopy&lt;/code&gt; 는 VMS 전용이며 내보낼 수 없습니다. 전체 이름으로 참조되어야합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="4d220ebd3516c866a42a58737ac32f73d7b60593" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rmsexpand&lt;/code&gt; on success will produce a name that fits in a 255 byte buffer, which is required for parameters passed to the DCL interpreter.</source>
          <target state="translated">&lt;code&gt;rmsexpand&lt;/code&gt; on success는 DCL 인터프리터에 전달되는 매개 변수에 필요한 255 바이트 버퍼에 맞는 이름을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="df7605f60079f8f1dc12ac3bd7e4a4ddde112eae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rmtree&lt;/code&gt; and &lt;code&gt;remove_tree&lt;/code&gt; will not work with multithreaded applications due to its use of &lt;code&gt;chdir&lt;/code&gt;. At this time, no warning or error is generated in this situation. You will certainly encounter unexpected results.</source>
          <target state="translated">&lt;code&gt;rmtree&lt;/code&gt; 및 &lt;code&gt;remove_tree&lt;/code&gt; 는 &lt;code&gt;chdir&lt;/code&gt; 사용으로 인해 다중 스레드 응용 프로그램에서 작동하지 않습니다 . 이때이 상황에서는 경고 나 오류가 생성되지 않습니다. 확실히 예기치 않은 결과가 발생할 것입니다.</target>
        </trans-unit>
        <trans-unit id="409864670ba5b3a51d91aefad2f1baba7ffb1971" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run&lt;/code&gt; takes 4 arguments:</source>
          <target state="translated">&lt;code&gt;run&lt;/code&gt; 에는 4 개의 인수가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6e5e870ed1d46dfd7cef6254dbdde44232014c54" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run&lt;/code&gt; will return a simple &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; when called in scalar context. In list context, you will be returned a list of the following items:</source>
          <target state="translated">&lt;code&gt;run&lt;/code&gt; 스칼라 컨텍스트에서 호출되면 run 은 간단한 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 를 반환합니다 . 목록 컨텍스트에서 다음 항목의 목록이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="71adfc24f9d2e25fb176cec5e34573530b5011a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run&lt;/code&gt; will try to execute your command using the following logic:</source>
          <target state="translated">&lt;code&gt;run&lt;/code&gt; 은 다음 로직을 사용하여 명령을 실행하려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="61bf1af5a461bb65504ae6074130c8cb94c99510" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run_forked&lt;/code&gt; is designed to survive and successfully terminate almost any long running task, even a fork bomb in case your system has the resources to survive during given timeout.</source>
          <target state="translated">&lt;code&gt;run_forked&lt;/code&gt; 는 시스템이 주어진 시간 종료 동안 생존 할 자원이있는 경우 포크 폭탄을 포함하여 거의 모든 장기 실행 작업을 생존하고 성공적으로 종료하도록 설계되었습니다.</target>
        </trans-unit>
        <trans-unit id="dc5d98ab787a66354808b7b8789a0245cef29116" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run_forked&lt;/code&gt; is used to execute some program or a coderef, optionally feed it with some input, get its return code and output (both stdout and stderr into separate buffers). In addition, it allows to terminate the program if it takes too long to finish.</source>
          <target state="translated">&lt;code&gt;run_forked&lt;/code&gt; 는 일부 프로그램 또는 코드 참조를 실행하고 선택적으로 일부 입력으로 피드하고 리턴 코드 및 출력을 가져옵니다 (stdout 및 stderr을 별도의 버퍼로). 또한 완료하는 데 시간이 너무 오래 걸리면 프로그램을 종료 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="420efc1f7e2a39e2d481baf8e0b32a892ee30985" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run_forked&lt;/code&gt; will return a HASHREF with the following keys:</source>
          <target state="translated">&lt;code&gt;run_forked&lt;/code&gt; 는 다음 키를 사용하여 HASHREF 를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2ffbf4e9e54a9897056a3f4cba8e11fe42ef030b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s/pattern/replacement/msixpogcedual&lt;/code&gt; substitutes matches of 'pattern' with 'replacement'. Modifiers as for &lt;code&gt;m//&lt;/code&gt;, with two additions:</source>
          <target state="translated">&lt;code&gt;s/pattern/replacement/msixpogcedual&lt;/code&gt; 은 'pattern'의 일치를 'replacement'로 대체합니다. &lt;code&gt;m//&lt;/code&gt; 대한 수정 자 , 두 가지 추가 :</target>
        </trans-unit>
        <trans-unit id="d6532d404d405df3e3e80f6cf86d34916835c1ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s&lt;/code&gt; must be after or equal to &lt;code&gt;start&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 이후가 될하거나 동일해야합니다 &lt;code&gt;start&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bca13c13725c8021829e1d9c9d0e16b479e48be9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s&lt;/code&gt; must be before or equal to &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 는 &lt;code&gt;end&lt;/code&gt; 이전이거나 같아야합니다 .</target>
        </trans-unit>
        <trans-unit id="44468ed2da13e6b0326d22ae098610e252ce2bf0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;same_language_tag&lt;/code&gt; works by just seeing whether &lt;code&gt;encode_language_tag($lang1)&lt;/code&gt; is the same as &lt;code&gt;encode_language_tag($lang2)&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;same_language_tag&lt;/code&gt; 는 &lt;code&gt;encode_language_tag($lang1)&lt;/code&gt; 이 encode_language_tag ($ lang2) 와 같은지 확인하여 &lt;code&gt;encode_language_tag($lang2)&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="549db5722367437213a1dc3c58ec222287aa16f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;same_language_tag&lt;/code&gt; works by just seeing whether &lt;code&gt;encode_language_tag($lang1)&lt;/code&gt; is the same as &lt;code&gt;encode_language_tag($lang2)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;same_language_tag&lt;/code&gt; 는 단지 여부를 확인하여 작동 &lt;code&gt;encode_language_tag($lang1)&lt;/code&gt; 와 동일한 &lt;code&gt;encode_language_tag($lang2)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="56eb36ce4645c802df1270fcfeea6fea69a3f470" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;say()&lt;/code&gt; acts just like &lt;code&gt;print()&lt;/code&gt; except $\ will be localized to &lt;code&gt;\n&lt;/code&gt; so you need do nothing special to handle &lt;code&gt;say()&lt;/code&gt; in &lt;code&gt;PRINT()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;say()&lt;/code&gt; 는 &lt;code&gt;print()&lt;/code&gt; 와 똑같이 작동 하지만 $ \는 &lt;code&gt;\n&lt;/code&gt; 로 지역화 되므로 &lt;code&gt;PRINT()&lt;/code&gt; 에서 &lt;code&gt;say()&lt;/code&gt; 를 처리하기 위해 특별한 작업이 필요하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="1f0e2afe2ef50aa67d8d4951eafeeaff281449ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scalar reverse()&lt;/code&gt; reverses by character rather than by byte.</source>
          <target state="translated">&lt;code&gt;scalar reverse()&lt;/code&gt; 는 바이트가 아닌 문자로 반전합니다.</target>
        </trans-unit>
        <trans-unit id="9775e76df105754a2894401b2cc225239eed703d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;search_invlist&lt;/code&gt; is used to search an inversion list returned by &lt;code&gt;prop_invlist&lt;/code&gt; or &lt;code&gt;prop_invmap&lt;/code&gt; for a particular &lt;a href=&quot;#code-point-argument&quot;&gt;&quot;code point argument&quot;&lt;/a&gt;. &lt;code&gt;undef&lt;/code&gt; is returned if the code point is not found in the inversion list (this happens only when it is not a legal &lt;a href=&quot;#code-point-argument&quot;&gt;&quot;code point argument&quot;&lt;/a&gt;, or is less than the list's first element). A warning is raised in the first instance.</source>
          <target state="translated">&lt;code&gt;search_invlist&lt;/code&gt; 는 특정 &lt;a href=&quot;#code-point-argument&quot;&gt;&quot;코드 포인트 인수&quot;에&lt;/a&gt; 대해 &lt;code&gt;prop_invlist&lt;/code&gt; 또는 &lt;code&gt;prop_invmap&lt;/code&gt; 에 의해 반환 된 반전 목록을 검색하는 데 사용됩니다 . 코드 포인트가 반전 목록에서 발견되지 않으면 &lt;code&gt;undef&lt;/code&gt; 가 반환됩니다 (이는 합법적 인 &lt;a href=&quot;#code-point-argument&quot;&gt;&quot;코드 포인트 인수&quot;&lt;/a&gt; 가 아니 거나 목록의 첫 번째 요소보다 작은 경우에만 발생합니다 ). 첫 번째 인스턴스에서 경고가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d48e38b365ce4bf6a3953fa6b04bb2ccda99aa7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;search_invlist&lt;/code&gt; is used to search an inversion list returned by &lt;code&gt;prop_invlist&lt;/code&gt; or &lt;code&gt;prop_invmap&lt;/code&gt; for a particular &lt;a href=&quot;#code-point-argument&quot;&gt;code point argument&lt;/a&gt;. &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned if the code point is not found in the inversion list (this happens only when it is not a legal &lt;a href=&quot;#code-point-argument&quot;&gt;code point argument&lt;/a&gt;, or is less than the list's first element). A warning is raised in the first instance.</source>
          <target state="translated">&lt;code&gt;search_invlist&lt;/code&gt; 는 &lt;code&gt;prop_invlist&lt;/code&gt; 또는 &lt;code&gt;prop_invmap&lt;/code&gt; 에 의해 반환 된 반전 목록을 검색하여 특정 &lt;a href=&quot;#code-point-argument&quot;&gt;코드 포인트 인수&lt;/a&gt; 를 검색하는 데 사용됩니다 . 코드 포인트가 반전 목록에없는 경우 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 가 반환됩니다 (법적 &lt;a href=&quot;#code-point-argument&quot;&gt;코드 포인트 인수&lt;/a&gt; 가 아니 거나 목록의 첫 번째 요소보다 작은 경우에만 발생 ). 첫 번째 경우 경고가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f0a8f69cac4c41cf105bf7401f5fffbc32923e24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;select&lt;/code&gt; is a static method, that is you call it with the package name like &lt;code&gt;new&lt;/code&gt;. &lt;code&gt;READ&lt;/code&gt;, &lt;code&gt;WRITE&lt;/code&gt; and &lt;code&gt;EXCEPTION&lt;/code&gt; are either &lt;code&gt;undef&lt;/code&gt; or &lt;code&gt;IO::Select&lt;/code&gt; objects. &lt;code&gt;TIMEOUT&lt;/code&gt; is optional and has the same effect as for the core select call.</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; 는 정적 메서드입니다. 즉, &lt;code&gt;new&lt;/code&gt; 와 같은 패키지 이름으로 호출합니다 . &lt;code&gt;READ&lt;/code&gt; , &lt;code&gt;WRITE&lt;/code&gt; 및 &lt;code&gt;EXCEPTION&lt;/code&gt; 은 &lt;code&gt;undef&lt;/code&gt; 또는 &lt;code&gt;IO::Select&lt;/code&gt; 객체입니다. &lt;code&gt;TIMEOUT&lt;/code&gt; 은 선택 사항이며 핵심 선택 호출과 동일한 효과를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="9e70016d81c26851fdc1268a308e2475dcb72857" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; accepts either a stat object, as returned by the &lt;code&gt;&lt;a href=&quot;../functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; method, or a list of</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;../functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; 메소드에 의해 리턴 된 stat 오브젝트 또는</target>
        </trans-unit>
        <trans-unit id="5223afef6e1c6aea2ac19f7b51152375c25bd386" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; accepts either a stat object, as returned by the &lt;code&gt;stat&lt;/code&gt; method, or a list of</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 는 &lt;code&gt;stat&lt;/code&gt; 메소드에 의해 반환 된 stat 객체 또는</target>
        </trans-unit>
        <trans-unit id="c710408719efbb408db55c8531da370f8ff3d836" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; will set the following values of the &lt;code&gt;&lt;a href=&quot;../functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; structure associated with the message queue.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 은 메시지 큐와 연관된 &lt;code&gt;&lt;a href=&quot;../functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; 구조 의 다음 값을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="ed728d4e7f99edf863813e9844924ed524fa1809" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; will set the following values of the &lt;code&gt;&lt;a href=&quot;../functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; structure associated with the semaphore set.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 은 세마포어 세트와 관련된 &lt;code&gt;&lt;a href=&quot;../functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; 구조 의 다음 값을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="99ae188a2af52b6d7409745617183138a71114cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; will set the following values of the &lt;code&gt;stat&lt;/code&gt; structure associated with the message queue.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 은 메시지 큐와 관련된 &lt;code&gt;stat&lt;/code&gt; 구조 의 다음 값을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="6c430521619281049c53f3dce3f5848f9b3b73b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; will set the following values of the &lt;code&gt;stat&lt;/code&gt; structure associated with the semaphore set.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 는 세마포어 세트와 관련된 &lt;code&gt;stat&lt;/code&gt; 구조 의 다음 값을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="c1d152a9c3ab9b89b16e2ee46596cf4f0fc19888" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setlogsock($sock_type, $stream_location)&lt;/code&gt; (added in Perl 5.004_02)</source>
          <target state="translated">&lt;code&gt;setlogsock($sock_type, $stream_location)&lt;/code&gt; (Perl 5.004_02에 추가됨)</target>
        </trans-unit>
        <trans-unit id="583013ce20407688d7c0e999267ffc67b0502e8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setlogsock($sock_type, $stream_location, $sock_timeout)&lt;/code&gt; (added in &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.25)</source>
          <target state="translated">&lt;code&gt;setlogsock($sock_type, $stream_location, $sock_timeout)&lt;/code&gt; ( &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.25에 추가 )</target>
        </trans-unit>
        <trans-unit id="87975c40147558f5f2ec4bebf437a9d770df0f75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setlogsock(\%options)&lt;/code&gt; (added in &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.28)</source>
          <target state="translated">&lt;code&gt;setlogsock(\%options)&lt;/code&gt; ( &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.28에 추가됨 )</target>
        </trans-unit>
        <trans-unit id="f63809e33adb9f81d5272829313f7ce53ea0505c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setpriority&lt;/code&gt; and &lt;code&gt;getpriority&lt;/code&gt; are not compatible with earlier ports by Andreas Kaiser. See &lt;code&gt;&quot;setpriority, getpriority&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setpriority&lt;/code&gt; 및 &lt;code&gt;getpriority&lt;/code&gt; 는 Andreas Kaiser의 이전 포트와 호환되지 않습니다. &lt;code&gt;&quot;setpriority, getpriority&quot;&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2bf698e71179f95e287e17aca75aec29afcab647" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setpriority&lt;/code&gt;, &lt;code&gt;getpriority&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;setpriority&lt;/code&gt;, &lt;code&gt;getpriority&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0bd0c1e5dd9ea33cf369c7adb90355be92008a07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;share()&lt;/code&gt; allows you to &lt;code&gt;share($hashref-&amp;gt;{key})&lt;/code&gt; and &lt;code&gt;share($arrayref-&amp;gt;[idx])&lt;/code&gt; without giving any error message. But the &lt;code&gt;$hashref-&amp;gt;{key}&lt;/code&gt; or &lt;code&gt;$arrayref-&amp;gt;[idx]&lt;/code&gt; is &lt;b&gt;not&lt;/b&gt; shared, causing the error &quot;lock can only be used on shared values&quot; to occur when you attempt to &lt;code&gt;&lt;a href=&quot;../functions/lock&quot;&gt;lock($hashref-&amp;gt;{key})&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../functions/lock&quot;&gt;lock($arrayref-&amp;gt;[idx])&lt;/a&gt;&lt;/code&gt; in another thread.</source>
          <target state="translated">&lt;code&gt;share()&lt;/code&gt; 사용하면 오류 메시지없이 &lt;code&gt;share($arrayref-&amp;gt;[idx])&lt;/code&gt; &lt;code&gt;share($hashref-&amp;gt;{key})&lt;/code&gt; 및 share ($ arrayref-&amp;gt; [idx]) 를 사용할 수 있습니다. 그러나 &lt;code&gt;$hashref-&amp;gt;{key}&lt;/code&gt; 또는 &lt;code&gt;$arrayref-&amp;gt;[idx]&lt;/code&gt; 는 공유 &lt;b&gt;되지 않으므로&lt;/b&gt; 잠금을 시도하면 &quot;공유 값에서만 잠금을 사용할 수 있습니다&quot;라는 오류가 발생합니다 &lt;code&gt;&lt;a href=&quot;../functions/lock&quot;&gt;lock($hashref-&amp;gt;{key})&lt;/a&gt;&lt;/code&gt; 또는 다른 스레드에서 &lt;code&gt;&lt;a href=&quot;../functions/lock&quot;&gt;lock($arrayref-&amp;gt;[idx])&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c6f2fdb2df98877bd6f8ae7cd61329aad3b830e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;share()&lt;/code&gt; allows you to &lt;code&gt;share($hashref-&amp;gt;{key})&lt;/code&gt; and &lt;code&gt;share($arrayref-&amp;gt;[idx])&lt;/code&gt; without giving any error message. But the &lt;code&gt;$hashref-&amp;gt;{key}&lt;/code&gt; or &lt;code&gt;$arrayref-&amp;gt;[idx]&lt;/code&gt; is &lt;b&gt;not&lt;/b&gt; shared, causing the error &quot;lock can only be used on shared values&quot; to occur when you attempt to &lt;code&gt;lock($hashref-&amp;gt;{key})&lt;/code&gt; or &lt;code&gt;lock($arrayref-&amp;gt;[idx])&lt;/code&gt; in another thread.</source>
          <target state="translated">&lt;code&gt;share()&lt;/code&gt; 사용하면 오류 메시지를 표시하지 않고 &lt;code&gt;share($arrayref-&amp;gt;[idx])&lt;/code&gt; &lt;code&gt;share($hashref-&amp;gt;{key})&lt;/code&gt; 및 share ($ arrayref-&amp;gt; [idx]) 를 사용할 수 있습니다. 그러나 &lt;code&gt;$hashref-&amp;gt;{key}&lt;/code&gt; 또는 &lt;code&gt;$arrayref-&amp;gt;[idx]&lt;/code&gt; 는 공유 &lt;b&gt;되지 않으므로 &lt;/b&gt; &lt;code&gt;lock($hashref-&amp;gt;{key})&lt;/code&gt; 을 시도 할 때 &quot;lock can be used only on shared values&quot;오류가 발생합니다. 또는 다른 스레드에서 &lt;code&gt;lock($arrayref-&amp;gt;[idx])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="81400b21c44e81d3c85b6d25672fdb393b6c9649" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;share&lt;/code&gt; takes a variable and marks it as shared:</source>
          <target state="translated">&lt;code&gt;share&lt;/code&gt; 는 변수를 가져 와서 공유로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="7b5f83dec6e18c4adabc00639c9878d8824925ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;share&lt;/code&gt; will return the shared rvalue, but always as a reference.</source>
          <target state="translated">&lt;code&gt;share&lt;/code&gt; 는 공유 rvalue를 반환하지만 항상 참조로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ce12ad32c52f4a291a29b41a4671200a88ca0b1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shared_clone&lt;/code&gt; takes a reference, and returns a shared version of its argument, performing a deep copy on any non-shared elements. Any shared elements in the argument are used as is (i.e., they are not cloned).</source>
          <target state="translated">&lt;code&gt;shared_clone&lt;/code&gt; 은 참조를 가져 와서 비공유 요소에 대해 깊은 복사를 수행하여 인수의 공유 버전을 리턴합니다. 인수의 공유 요소는 그대로 사용됩니다 (즉, 복제되지 않음).</target>
        </trans-unit>
        <trans-unit id="88260b4ec0de821010e9a0a312a183095afd1ad4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;signalLevel&lt;/code&gt;, &lt;code&gt;warnLevel&lt;/code&gt;, &lt;code&gt;dieLevel&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;signalLevel&lt;/code&gt;, &lt;code&gt;warnLevel&lt;/code&gt;, &lt;code&gt;dieLevel&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b0c4d06136111a386d2b4203fa99ebc9d89ada4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;signatures&lt;/code&gt; - allow subroutine signatures (for named arguments)</source>
          <target state="translated">&lt;code&gt;signatures&lt;/code&gt; -서브 루틴 서명 허용 (명명 된 인수의 경우)</target>
        </trans-unit>
        <trans-unit id="30a908f874fe3ace52e6aab214508c8fd2542bd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;smartmatch&lt;/code&gt; - allow the use of &lt;code&gt;~~&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;smartmatch&lt;/code&gt; - &lt;code&gt;~~&lt;/code&gt; 사용 허용</target>
        </trans-unit>
        <trans-unit id="8658f86d4777991376871c792874bcf7ea900b4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;special&lt;/code&gt; is a string, normally &lt;code&gt;NULL&lt;/code&gt; or &lt;code&gt;&quot;&quot;&lt;/code&gt; . &lt;code&gt;NULL&lt;/code&gt; means to not use any special mappings; &lt;code&gt;&quot;&quot;&lt;/code&gt; means to use the special mappings. Values other than these two are treated as the name of the hash containing the special mappings, like &lt;code&gt;&quot;utf8::ToSpecLower&quot;&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;special&lt;/code&gt; 는 문자열이며 일반적으로 &lt;code&gt;NULL&lt;/code&gt; 또는 &lt;code&gt;&quot;&quot;&lt;/code&gt; 입니다. &lt;code&gt;NULL&lt;/code&gt; 은 특별한 매핑을 사용하지 않음을 의미합니다. &lt;code&gt;&quot;&quot;&lt;/code&gt; 는 특수 매핑을 사용하는 것을 의미합니다. 이 둘 이외의 값은 &lt;code&gt;&quot;utf8::ToSpecLower&quot;&lt;/code&gt; 와 같은 특수 맵핑을 포함하는 해시의 이름으로 처리됩니다 .</target>
        </trans-unit>
        <trans-unit id="afd56f6fe104f2fc631089f285a812aa6fe50322" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;split /regex/, string&lt;/code&gt; splits &lt;code&gt;string&lt;/code&gt; into a list of substrings and returns that list. The regex determines the character sequence that &lt;code&gt;string&lt;/code&gt; is split with respect to. For example, to split a string into words, use</source>
          <target state="translated">&lt;code&gt;split /regex/, string&lt;/code&gt; 은 &lt;code&gt;string&lt;/code&gt; 을 하위 문자열 목록으로 분할 하고 해당 목록을 반환합니다. 정규식은 &lt;code&gt;string&lt;/code&gt; 이 분할 되는 문자 시퀀스를 결정합니다 . 예를 들어, 문자열을 단어로 분할하려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="da4c96f14b329fe16bad75b1f046bad021a838c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;splitOnLastStarter()&lt;/code&gt; should be called with a pre-normalized parameter &lt;code&gt;$normalized&lt;/code&gt; , that is in the same form as &lt;code&gt;$form&lt;/code&gt; you want.</source>
          <target state="translated">&lt;code&gt;splitOnLastStarter()&lt;/code&gt; 는 사전 정규화 된 매개 변수 &lt;code&gt;$normalized&lt;/code&gt; 사용하여 호출해야합니다.이 매개 변수 는 원하는 &lt;code&gt;$form&lt;/code&gt; 과 같은 형식 입니다.</target>
        </trans-unit>
        <trans-unit id="8beef4cc5d29a6d5ad8b96d76357f9686085a8c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;splitOnLastStarter()&lt;/code&gt; should be called with a pre-normalized parameter &lt;code&gt;$normalized&lt;/code&gt;, that is in the same form as &lt;code&gt;$form&lt;/code&gt; you want.</source>
          <target state="translated">&lt;code&gt;splitOnLastStarter()&lt;/code&gt; 는 원하는 &lt;code&gt;$form&lt;/code&gt; 과 동일한 형식 인 사전 정규화 된 매개 변수 &lt;code&gt;$normalized&lt;/code&gt; 로 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="05ad3d7e63ac0b923f42fda199d17cb36805c894" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;split_command&lt;/code&gt; will return a series of @cmds each processing part of the args. Collectively they will process all the arguments. Each individual line in @cmds will not be longer than the $self-&amp;gt;max_exec_len being careful to take into account macro expansion.</source>
          <target state="translated">&lt;code&gt;split_command&lt;/code&gt; 는 args의 각 처리 부분에 일련의 @cmd 를 반환합니다. 전체적으로 그들은 모든 논쟁을 처리 할 것입니다. @cmds의 각 개별 줄은 매크로 확장을 고려하여 $ self-&amp;gt; max_exec_len보다 길지 않습니다.</target>
        </trans-unit>
        <trans-unit id="df7e33590ee18899069cc6cb7e5e1a3b180d3b64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start&lt;/code&gt; is the node preceding the first node to be spliced. Node(s) following it will be deleted, and ops will be inserted after it. If it is &lt;code&gt;NULL&lt;/code&gt;, the first node onwards is deleted, and nodes are inserted at the beginning.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; 는 연결될 첫 번째 노드 이전의 노드입니다. 다음 노드가 삭제되고 작업이 그 뒤에 삽입됩니다. 이 경우 &lt;code&gt;NULL&lt;/code&gt; , 이후 첫 번째 노드가 삭제되고 노드는 시작 부분에 삽입됩니다.</target>
        </trans-unit>
        <trans-unit id="9992eebbce269337eb7319fad7e4bae82773d69d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stash&lt;/code&gt; is the parent stash/package, if any.</source>
          <target state="translated">&lt;code&gt;stash&lt;/code&gt; 는 상위 숨김 / 패키지입니다 (있는 경우).</target>
        </trans-unit>
        <trans-unit id="442fca8656f150edfde3e5013ba8d6ad88bb942b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;state &lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; vs &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; &lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;state &lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; 대 &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; &lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="194270003754ace4d214d73b56dfc0757735e5ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;state sub&lt;/code&gt; vs &lt;code&gt;my sub&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;state sub&lt;/code&gt; 대 &lt;code&gt;my sub&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2e85d873b3bc435bca89449147842f21071d9602" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;state&lt;/code&gt; variables were introduced in Perl 5.10.</source>
          <target state="translated">&lt;code&gt;state&lt;/code&gt; 변수는 Perl 5.10에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="cec3fb10dc556b8a200f91b68a1f1978d91a6823" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;status&lt;/code&gt; &amp;mdash; The HTTP status code of the response</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; &amp;mdash; 응답의 HTTP 상태 코드</target>
        </trans-unit>
        <trans-unit id="ba8a29a29201132badc9fd27134fdf17ce04a300" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;str2bytes&lt;/code&gt; may be used as an alias for &lt;code&gt;encode&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;str2bytes&lt;/code&gt; 는 &lt;code&gt;encode&lt;/code&gt; 의 별칭으로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9f9a328ccbc35b2b8e9066fa880a1d90d69b6a5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strict 'subs'&lt;/code&gt; , with Perl 5.6.1, erroneously permitted to use an unquoted compound identifier (e.g. &lt;code&gt;Foo::Bar&lt;/code&gt; ) as a hash key (before &lt;code&gt;=&amp;gt;&lt;/code&gt; or inside curlies), but without forcing it always to a literal string.</source>
          <target state="translated">&lt;code&gt;strict 'subs'&lt;/code&gt; Perl 5.6.1을 사용하는 엄격한 'subs' 는 인용되지 않은 복합 식별자 (예 : &lt;code&gt;Foo::Bar&lt;/code&gt; )를 해시 키 ( &lt;code&gt;=&amp;gt;&lt;/code&gt; 또는 내부 curlies) 로 사용하도록 잘못 허용 했지만 항상 리터럴 문자열로 강제하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="b3b8f269ae4845105b8f57708804986163c25e74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strict 'subs'&lt;/code&gt;, with Perl 5.6.1, erroneously permitted to use an unquoted compound identifier (e.g. &lt;code&gt;Foo::Bar&lt;/code&gt;) as a hash key (before &lt;code&gt;=&amp;gt;&lt;/code&gt; or inside curlies), but without forcing it always to a literal string.</source>
          <target state="translated">&lt;code&gt;strict 'subs'&lt;/code&gt; Perl 5.6.1에서 strict 'subs' 는 인용되지 않은 복합 식별자 (예 : &lt;code&gt;Foo::Bar&lt;/code&gt; )를 해시 키 ( &lt;code&gt;=&amp;gt;&lt;/code&gt; 이전 또는 내부 컬리)로 잘못 사용할 수 있지만 항상 리터럴 문자열로 강제하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="84a318f24d8bab6a75e045b750d78d7dd84307fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strtod&lt;/code&gt; respects any POSIX &lt;code&gt;setlocale()&lt;/code&gt;&lt;code&gt;LC_NUMERIC&lt;/code&gt; settings, regardless of whether or not it is called from Perl code that is within the scope of &lt;code&gt;use locale&lt;/code&gt;. Prior to Perl 5.28, or when operating in a non thread-safe environment, it should not be used in a threaded application unless it's certain that the underlying locale is C or POSIX. This is because it otherwise changes the locale, which globally affects all threads simultaneously.</source>
          <target state="translated">&lt;code&gt;strtod&lt;/code&gt; 는 &lt;code&gt;use locale&lt;/code&gt; 범위 내에있는 Perl 코드에서 호출되는지 여부에 관계없이 모든 POSIX &lt;code&gt;setlocale()&lt;/code&gt; &lt;code&gt;LC_NUMERIC&lt;/code&gt; 설정을 존중합니다 . Perl 5.28 이전 또는 스레드로부터 안전하지 않은 환경에서 작동 할 때 기본 로케일이 C 또는 POSIX인지 확실하지 않은 경우 스레드 응용 프로그램에서 사용해서는 안됩니다. 그렇지 않으면 모든 스레드에 동시에 전역 적으로 영향을 미치는 로케일이 변경되기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="e7d0dc79bd558fb009a4a67ce8058c54beea585e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strtod&lt;/code&gt; respects any POSIX &lt;code&gt;setlocale()&lt;/code&gt;&lt;code&gt;LC_TIME&lt;/code&gt; settings, regardless of whether or not it is called from Perl code that is within the scope of &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;strtod&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;사용&lt;/a&gt; 범위 내에있는 Perl 코드에서 호출되는지 여부에 관계없이 POSIX &lt;code&gt;setlocale()&lt;/code&gt; &lt;code&gt;LC_TIME&lt;/code&gt; 설정을 존중합니다 .</target>
        </trans-unit>
        <trans-unit id="e6c9831d319071b95082e8dc2f29b6eca1f78c11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strtol&lt;/code&gt; should respect any POSIX</source>
          <target state="translated">&lt;code&gt;strtol&lt;/code&gt; 은 POSIX를 존중해야합니다</target>
        </trans-unit>
        <trans-unit id="07d9fc447173aa1507860d93adda713683bb7035" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;struct&lt;/code&gt; always creates a constructor called &lt;code&gt;new&lt;/code&gt; . That constructor may take a list of initializers for the various elements of the new struct.</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; 는 항상 &lt;code&gt;new&lt;/code&gt; 라는 생성자를 만듭니다 . 해당 생성자는 새 구조체의 다양한 요소에 대한 이니셜 라이저 목록을 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4588f880e95ab5093116d0d4a6242c2e9115a856" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;struct&lt;/code&gt; always creates a constructor called &lt;code&gt;new&lt;/code&gt;. That constructor may take a list of initializers for the various elements of the new struct.</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; 항상 &lt;code&gt;new&lt;/code&gt; 라는 생성자를 만듭니다 . 해당 생성자는 새 구조체의 다양한 요소에 대한 이니셜 라이저 목록을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3422bf47e22c738697fbe6e62d2577b16012d3b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strxfrm()&lt;/code&gt; takes a string and maps it into a transformed string for use in char-by-char comparisons against other transformed strings during collation. &quot;Under the hood&quot;, locale-affected Perl comparison operators call &lt;code&gt;strxfrm()&lt;/code&gt; for both operands, then do a char-by-char comparison of the transformed strings. By calling &lt;code&gt;strxfrm()&lt;/code&gt; explicitly and using a non locale-affected comparison, the example attempts to save a couple of transformations. But in fact, it doesn't save anything: Perl magic (see &lt;a href=&quot;perlguts#Magic-Variables&quot;&gt;&quot;Magic Variables&quot; in perlguts&lt;/a&gt;) creates the transformed version of a string the first time it's needed in a comparison, then keeps this version around in case it's needed again. An example rewritten the easy way with &lt;code&gt;cmp&lt;/code&gt; runs just about as fast. It also copes with null characters embedded in strings; if you call &lt;code&gt;strxfrm()&lt;/code&gt; directly, it treats the first null it finds as a terminator. Don't expect the transformed strings it produces to be portable across systems--or even from one revision of your operating system to the next. In short, don't call &lt;code&gt;strxfrm()&lt;/code&gt; directly: let Perl do it for you.</source>
          <target state="translated">&lt;code&gt;strxfrm()&lt;/code&gt; 은 문자열을 가져 와서 데이터 정렬 중에 다른 변환 된 문자열에 대한 문자 별 비교에 사용하기 위해 변환 된 문자열로 매핑합니다. &quot;내부&quot;, 로케일 영향을받는 Perl 비교 연산자 는 두 피연산자 모두에 대해 &lt;code&gt;strxfrm()&lt;/code&gt; 을 호출 한 다음 변환 된 문자열의 문자 별 비교를 수행합니다. &lt;code&gt;strxfrm()&lt;/code&gt; 명시 적으로 호출 하고 로케일에 영향을받지 않는 비교를 사용하여 예제에서는 몇 가지 변환을 저장하려고합니다. 그러나 실제로는 아무것도 저장하지 않습니다. Perl magic ( &lt;a href=&quot;perlguts#Magic-Variables&quot;&gt;perlguts의 &quot;Magic Variables&quot;&lt;/a&gt; 참조 )은 비교에 처음 필요할 때 문자열의 변형 된 버전을 생성 한 다음 다시 필요할 경우를 대비하여이 버전을 유지합니다. &lt;code&gt;cmp&lt;/code&gt; 를 사용 하여 쉬운 방법으로 다시 작성된 예제거의 비슷한 속도로 실행됩니다. 또한 문자열에 포함 된 널 문자도 처리합니다. &lt;code&gt;strxfrm()&lt;/code&gt; 직접 호출 하면 찾은 첫 번째 null을 종결 자로 처리합니다. 생성되는 변환 된 문자열이 시스템간에 또는 운영 체제의 한 버전에서 다음 버전으로 이식 될 수 있다고 기대하지 마십시오. 간단히 말해, &lt;code&gt;strxfrm()&lt;/code&gt; 직접 호출하지 마십시오 . Perl이 자동으로 수행하도록하십시오.</target>
        </trans-unit>
        <trans-unit id="55f3f10d3365e07935bc666c63b8354aa30d2606" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strxfrm()&lt;/code&gt; takes a string and maps it into a transformed string for use in char-by-char comparisons against other transformed strings during collation. &quot;Under the hood&quot;, locale-affected Perl comparison operators call &lt;code&gt;strxfrm()&lt;/code&gt; for both operands, then do a char-by-char comparison of the transformed strings. By calling &lt;code&gt;strxfrm()&lt;/code&gt; explicitly and using a non locale-affected comparison, the example attempts to save a couple of transformations. But in fact, it doesn't save anything: Perl magic (see &lt;a href=&quot;perlguts#Magic-Variables&quot;&gt;Magic Variables in perlguts&lt;/a&gt;) creates the transformed version of a string the first time it's needed in a comparison, then keeps this version around in case it's needed again. An example rewritten the easy way with &lt;code&gt;cmp&lt;/code&gt; runs just about as fast. It also copes with null characters embedded in strings; if you call &lt;code&gt;strxfrm()&lt;/code&gt; directly, it treats the first null it finds as a terminator. don't expect the transformed strings it produces to be portable across systems--or even from one revision of your operating system to the next. In short, don't call &lt;code&gt;strxfrm()&lt;/code&gt; directly: let Perl do it for you.</source>
          <target state="translated">&lt;code&gt;strxfrm()&lt;/code&gt; 은 문자열을 가져 와서 데이터 정렬 중에 다른 변환 된 문자열과의 문자 별 비교에 사용하기 위해 변환 된 문자열로 맵핑합니다. 로케일에 영향을받는 Perl 비교 연산자는 &quot;후드&quot;에서 두 피연산자 모두에 대해 &lt;code&gt;strxfrm()&lt;/code&gt; 을 호출 한 다음 변환 된 문자열의 문자 별 비교를 수행합니다. 이 예에서는 &lt;code&gt;strxfrm()&lt;/code&gt; 명시 적으로 호출 하고 로케일에 영향을받지 않는 비교를 사용하여 몇 가지 변환을 저장하려고 시도합니다. 그러나 실제로는 아무것도 저장하지 않습니다 : Perl magic ( &lt;a href=&quot;perlguts#Magic-Variables&quot;&gt;perlguts의 Magic Variables&lt;/a&gt; 참조 )은 비교에서 처음 필요할 때 변환 된 버전의 문자열을 만든 다음 다시 필요할 때를 대비 하여이 버전을 유지합니다. 예를 들어 &lt;code&gt;cmp&lt;/code&gt; 로 쉬운 방법을 다시 작성거의 빨리 실행됩니다. 또한 문자열에 포함 된 널 문자를 처리합니다. &lt;code&gt;strxfrm()&lt;/code&gt; 직접 호출 하면 발견 된 첫 번째 null을 종료 자로 처리합니다. 변환 된 문자열이 시스템간에 이식 가능하거나 운영 체제의 개정판에서 다음 개정판으로 이식 될 것으로 기대하지 마십시오. 즉, &lt;code&gt;strxfrm()&lt;/code&gt; 직접 호출하지 마십시오 . Perl이 대신 해주십시오 .</target>
        </trans-unit>
        <trans-unit id="eae013383db419ee7073c6ec936d1ee516677026" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subbeg&lt;/code&gt;&lt;code&gt;sublen&lt;/code&gt;&lt;code&gt;saved_copy&lt;/code&gt;&lt;code&gt;suboffset&lt;/code&gt;&lt;code&gt;subcoffset&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;subbeg&lt;/code&gt;&lt;code&gt;sublen&lt;/code&gt;&lt;code&gt;saved_copy&lt;/code&gt;&lt;code&gt;suboffset&lt;/code&gt;&lt;code&gt;subcoffset&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5bbbc9ec3becb0729e14cb1a39b889ca48e69af5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subtest()&lt;/code&gt; runs the &amp;amp;code as its own little test with its own plan and its own result. The main test counts this as a single test using the result of the whole subtest to determine if its ok or not ok.</source>
          <target state="translated">&lt;code&gt;subtest()&lt;/code&gt; 는 &amp;amp; code를 자체 계획과 결과로 자체 작은 테스트로 실행합니다. 기본 테스트는 전체 하위 테스트 결과를 사용하여 단일 테스트로 계산하여 정상인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="40bfa9180cd766541f95ecd65e0c84670fed2bea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subtest&lt;/code&gt; also, and optionally, accepts arguments which will be passed to the subtests reference.</source>
          <target state="translated">&lt;code&gt;subtest&lt;/code&gt; 는 또한 선택적으로 subtests 참조로 전달 될 인수를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="3d7e26bf7c2983b065b13497648ff49834a4e28e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;success&lt;/code&gt; &amp;mdash; Boolean indicating whether the operation returned a 2XX status code</source>
          <target state="translated">&lt;code&gt;success&lt;/code&gt; &amp;mdash; 작업이 2XX 상태 코드를 반환했는지 여부를 나타내는 부울</target>
        </trans-unit>
        <trans-unit id="53945fe0e229f2a3d9e218abb1d550e5ef4cb623" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;success&lt;/code&gt; , &lt;code&gt;warning&lt;/code&gt; , or &lt;code&gt;fatal&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;success&lt;/code&gt; , &lt;code&gt;warning&lt;/code&gt; 또는 &lt;code&gt;fatal&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6e91ef20313244695042fbdb9523a597b0812cbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;success&lt;/code&gt;, &lt;code&gt;warning&lt;/code&gt;, or &lt;code&gt;fatal&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;success&lt;/code&gt; , &lt;code&gt;warning&lt;/code&gt; 또는 &lt;code&gt;fatal&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5edbfcf499afde359ec82161688eeb181e0cc64e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;summary&lt;/code&gt; prints the summary report after all tests are run. The first argument is an aggregate to summarise. An optional second argument may be set to a true value to indicate that the summary is being output as a result of an interrupted test run.</source>
          <target state="translated">&lt;code&gt;summary&lt;/code&gt; 는 모든 테스트가 실행 된 후 요약 보고서를 인쇄합니다. 첫 번째 인수는 요약 할 집계입니다. 선택적 두 번째 인수는 테스트 실행이 중단 된 결과 요약이 출력되고 있음을 나타 내기 위해 true 값으로 설정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b7d76fa49c169f566fa1c1da718f1e7b2ad5c1be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sv&lt;/code&gt; , &lt;code&gt;av&lt;/code&gt; , &lt;code&gt;hv&lt;/code&gt; , etc. represent variables of their respective types.</source>
          <target state="translated">&lt;code&gt;sv&lt;/code&gt; , &lt;code&gt;av&lt;/code&gt; , &lt;code&gt;hv&lt;/code&gt; 등은 해당 유형의 변수를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="40e738adb0309ebb6a8435f716aa40a76e770938" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sv&lt;/code&gt; and &lt;code&gt;mg&lt;/code&gt; are the tied thingy and the tie magic.</source>
          <target state="translated">&lt;code&gt;sv&lt;/code&gt; 와 &lt;code&gt;mg&lt;/code&gt; 은 묶여진 물건과 동점 마법입니다.</target>
        </trans-unit>
        <trans-unit id="fd7ac714e7e858b4bd36af6eb630a83e9e72f3e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sv&lt;/code&gt; optionally supplies the variable that will be aliased to each item in turn; if null, it defaults to &lt;code&gt;$_&lt;/code&gt;. &lt;code&gt;expr&lt;/code&gt; supplies the list of values to iterate over. &lt;code&gt;block&lt;/code&gt; supplies the main body of the loop, and &lt;code&gt;cont&lt;/code&gt; optionally supplies a &lt;code&gt;continue&lt;/code&gt; block that operates as a second half of the body. All of these optree inputs are consumed by this function and become part of the constructed op tree.</source>
          <target state="translated">&lt;code&gt;sv&lt;/code&gt; 는 차례로 각 항목에 별칭이 지정 될 변수를 선택적으로 제공합니다. null 인 경우 기본값은 &lt;code&gt;$_&lt;/code&gt; 입니다. &lt;code&gt;expr&lt;/code&gt; 은 반복 할 값 목록을 제공합니다. &lt;code&gt;block&lt;/code&gt; 은 루프의 본체를 제공 하고 &lt;code&gt;cont&lt;/code&gt; 은 선택적으로 본체의 후반부 역할을하는 &lt;code&gt;continue&lt;/code&gt; 블록을 제공합니다. 이러한 모든 optree 입력은이 함수에 의해 소비되고 구성된 optree의 일부가됩니다.</target>
        </trans-unit>
        <trans-unit id="333f519f07c55ae031f435eafb31d68db181893e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sv&lt;/code&gt;, &lt;code&gt;av&lt;/code&gt;, &lt;code&gt;hv&lt;/code&gt;, etc. represent variables of their respective types.</source>
          <target state="translated">&lt;code&gt;sv&lt;/code&gt; , &lt;code&gt;av&lt;/code&gt; , &lt;code&gt;hv&lt;/code&gt; 등은 각 유형의 변수를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="f6186b5a2d793323ec197d8a7ba5e492ded38439" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sv_newmortal()&lt;/code&gt; creates an SV (with the undefined value) whose sole reference is mortal. &lt;code&gt;sv_mortalcopy()&lt;/code&gt; creates an xV whose value is a copy of a supplied xV and whose sole reference is mortal. &lt;code&gt;sv_2mortal()&lt;/code&gt; mortalises an existing xV reference: it transfers ownership of a reference from the caller to the temps stack. Because &lt;code&gt;sv_newmortal&lt;/code&gt; gives the new SV no value, it must normally be given one via &lt;code&gt;sv_setpv&lt;/code&gt;, &lt;code&gt;sv_setiv&lt;/code&gt;, etc. :</source>
          <target state="translated">&lt;code&gt;sv_newmortal()&lt;/code&gt; 은 유일한 참조가 mortal 인 SV (정의되지 않은 값 포함)를 생성합니다. &lt;code&gt;sv_mortalcopy()&lt;/code&gt; 는 값이 제공된 xV 의 복사본이고 유일한 참조가 mortal 인 xV를 만듭니다. &lt;code&gt;sv_2mortal()&lt;/code&gt; 은 기존 xV 참조를 영구화합니다. 참조의 소유권을 호출자에서 temps 스택으로 이전합니다. &lt;code&gt;sv_newmortal&lt;/code&gt; 은 새 SV에 값을 제공하지 않기 때문에 일반적으로 &lt;code&gt;sv_setpv&lt;/code&gt; , &lt;code&gt;sv_setiv&lt;/code&gt; 등을 통해 제공해야합니다 .</target>
        </trans-unit>
        <trans-unit id="a9c898bb2d89a58d12a4afd52693893972cc7118" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sv_utf8_upgrade&lt;/code&gt; , &lt;code&gt;sv_utf8_upgrade_nomg&lt;/code&gt; , and &lt;code&gt;sv_utf8_upgrade_flags&lt;/code&gt; are implemented in terms of this function.</source>
          <target state="translated">&lt;code&gt;sv_utf8_upgrade&lt;/code&gt; , &lt;code&gt;sv_utf8_upgrade_nomg&lt;/code&gt; 및 &lt;code&gt;sv_utf8_upgrade_flags&lt;/code&gt; 는이 기능의 관점에서 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="29e86afca5e89be112747e7c177a4d9e70c992e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sv_utf8_upgrade&lt;/code&gt;, &lt;code&gt;sv_utf8_upgrade_nomg&lt;/code&gt;, and &lt;code&gt;sv_utf8_upgrade_flags&lt;/code&gt; are implemented in terms of this function.</source>
          <target state="translated">&lt;code&gt;sv_utf8_upgrade&lt;/code&gt; , &lt;code&gt;sv_utf8_upgrade_nomg&lt;/code&gt; 및 &lt;code&gt;sv_utf8_upgrade_flags&lt;/code&gt; 는이 함수 측면에서 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="157cb2f67b5c943efab75ae716b270926cd23e22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sv_vsetpvfn&lt;/code&gt; is an analogue of &lt;code&gt;vsprintf&lt;/code&gt; , but it allows you to specify either a pointer to a variable argument list or the address and length of an array of SVs. The last argument points to a boolean; on return, if that boolean is true, then locale-specific information has been used to format the string, and the string's contents are therefore untrustworthy (see &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt;). This pointer may be NULL if that information is not important. Note that this function requires you to specify the length of the format.</source>
          <target state="translated">&lt;code&gt;sv_vsetpvfn&lt;/code&gt; 은 &lt;code&gt;vsprintf&lt;/code&gt; 와 유사 하지만 변수 인수 목록에 대한 포인터 또는 SV 배열의 주소와 길이를 지정할 수 있습니다. 마지막 인수는 부울을 가리 킵니다. 돌아 왔을 때, 그 boolean가 true의 경우, 로케일 고유의 정보가 캐릭터 라인의 형식화에 사용되어 캐릭터 라인의 내용을 신뢰할 수 없습니다 ( &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt; 참조 ). 해당 정보가 중요하지 않은 경우이 포인터는 NULL 일 수 있습니다. 이 기능을 사용하려면 형식 길이를 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="45b0e4532eab3f4685ffc68239603f95fffd5e78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sv_vsetpvfn&lt;/code&gt; is an analogue of &lt;code&gt;vsprintf&lt;/code&gt;, but it allows you to specify either a pointer to a variable argument list or the address and length of an array of SVs. The last argument points to a boolean; on return, if that boolean is true, then locale-specific information has been used to format the string, and the string's contents are therefore untrustworthy (see &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt;). This pointer may be NULL if that information is not important. Note that this function requires you to specify the length of the format.</source>
          <target state="translated">&lt;code&gt;sv_vsetpvfn&lt;/code&gt; 은 &lt;code&gt;vsprintf&lt;/code&gt; 와 유사 하지만 변수 인수 목록에 대한 포인터 또는 SV 배열의 주소와 길이를 지정할 수 있습니다. 마지막 인수는 부울을 가리 킵니다. 반환시 해당 부울이 참이면 로케일 특정 정보가 문자열을 형식화하는 데 사용되었으며 따라서 문자열의 내용을 신뢰할 수 없습니다 ( &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt; 참조 ). 해당 정보가 중요하지 않은 경우이 포인터는 NULL 일 수 있습니다. 이 함수를 사용하려면 형식의 길이를 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="6192b1f9a09d1e08c5d741af54f3f7df0fea1f0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;swashp&lt;/code&gt; is a pointer to the swash to use.</source>
          <target state="translated">&lt;code&gt;swashp&lt;/code&gt; 는 사용할 스와시의 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="aef4e35b1afe3553efb4b712e9852e7aa7d3f53a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;switch&lt;/code&gt; - allow the use of &lt;code&gt;~~&lt;/code&gt;, given, and when</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; -의 사용을 허용 &lt;code&gt;~~&lt;/code&gt; 을 주어, 때</target>
        </trans-unit>
        <trans-unit id="df2da7c9c32ace5dff26064e81dc2ec6cc09498f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sync&lt;/code&gt; synchronizes a file's in-memory state with that on the physical medium. &lt;code&gt;sync&lt;/code&gt; does not operate at the perlio api level, but operates on the file descriptor (similar to sysread, sysseek and systell). This means that any data held at the perlio api level will not be synchronized. To synchronize data that is buffered at the perlio api level you must use the flush method. &lt;code&gt;sync&lt;/code&gt; is not implemented on all platforms. Returns &quot;0 but true&quot; on success, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on error, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; for an invalid handle. See</source>
          <target state="translated">&lt;code&gt;sync&lt;/code&gt; 는 파일의 메모리 상태를 물리적 매체의 상태와 동기화합니다. &lt;code&gt;sync&lt;/code&gt; 는 perlio api 수준에서 작동하지 않지만 파일 디스크립터 (sysread, sysseek 및 systell과 유사)에서 작동합니다. 이는 perlio api 수준에서 유지되는 모든 데이터가 동기화되지 않음을 의미합니다. perlio api 레벨에서 버퍼링 된 데이터를 동기화하려면 flush 메소드를 사용해야합니다. 모든 플랫폼에서 &lt;code&gt;sync&lt;/code&gt; 가 구현되는 것은 아닙니다. 성공하면 &quot;0이지만 true&quot;를 반환 하고 에러가 발생하면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 잘못된 핸들. 보다</target>
        </trans-unit>
        <trans-unit id="641ae46752b733268d4ff91c13386322a2ff65db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sync&lt;/code&gt; synchronizes a file's in-memory state with that on the physical medium. &lt;code&gt;sync&lt;/code&gt; does not operate at the perlio api level, but operates on the file descriptor (similar to sysread, sysseek and systell). This means that any data held at the perlio api level will not be synchronized. To synchronize data that is buffered at the perlio api level you must use the flush method. &lt;code&gt;sync&lt;/code&gt; is not implemented on all platforms. Returns &quot;0 but true&quot; on success, &lt;code&gt;undef&lt;/code&gt; on error, &lt;code&gt;undef&lt;/code&gt; for an invalid handle. See &lt;a&gt;fsync(3c)&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;sync&lt;/code&gt; 는 파일의 메모리 내 상태를 물리적 매체의 상태와 동기화합니다. &lt;code&gt;sync&lt;/code&gt; 는 perlio api 수준에서 작동하지 않지만 파일 설명자에서 작동합니다 (sysread, sysseek 및 systell과 유사). 이는 perlio api 수준에 보관 된 데이터가 동기화되지 않음을 의미합니다. perlio api 수준에서 버퍼링 된 데이터를 동기화하려면 flush 메서드를 사용해야합니다. &lt;code&gt;sync&lt;/code&gt; 는 모든 플랫폼에서 구현되지 않습니다. 반환, 성공에 &quot;0하지만 사실&quot; &lt;code&gt;undef&lt;/code&gt; 오류에 &lt;code&gt;undef&lt;/code&gt; 잘못된 핸들. &lt;a&gt;fsync (3c)를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f52732e5ca5d6dc1f9d7a73b47a336dd75ae0832" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sysread()&lt;/code&gt; and &lt;code&gt;syswrite()&lt;/code&gt; should not be used on file handles with character encoding layers, they behave badly, and that behaviour has been deprecated since perl 5.24.</source>
          <target state="translated">&lt;code&gt;sysread()&lt;/code&gt; 및 &lt;code&gt;syswrite()&lt;/code&gt; 는 문자 인코딩 레이어가있는 파일 핸들에서 사용해서는 안되며, 제대로 작동하지 않으며 해당 동작은 perl 5.24 이후로 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a7a1d988b5d966d66bda631776a131bc7766695f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;system&lt;/code&gt; also provides direct control over whether shell wildcard processing may take place, whereas backticks do not.</source>
          <target state="translated">&lt;code&gt;system&lt;/code&gt; 은 또한 셸 와일드 카드 처리가 발생할 수 있는지 여부를 직접 제어 할 수있는 반면 백틱은 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8dae47b8de1a6666d5c99c3d891e28c5d893f5b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;talk&lt;/code&gt; is a reference to an array that contains alternating questions and answers. Questions are regular expressions and answers are literal strings. The Expect module watches the stream from the execution of the external program (&lt;code&gt;perl Makefile.PL&lt;/code&gt; , &lt;code&gt;perl
Build.PL&lt;/code&gt; , &lt;code&gt;make&lt;/code&gt; , etc.).</source>
          <target state="translated">&lt;code&gt;talk&lt;/code&gt; 는 대체 질문과 답변이 포함 된 배열에 대한 참조입니다. 질문은 정규 표현식이고 답변은 리터럴 문자열입니다. Expect 모듈은 외부 프로그램 ( &lt;code&gt;perl Makefile.PL&lt;/code&gt; , &lt;code&gt;perl Build.PL&lt;/code&gt; , &lt;code&gt;make&lt;/code&gt; 등) 의 실행에서 스트림을 감시합니다 .</target>
        </trans-unit>
        <trans-unit id="5a08a149b1432446a1f11c65976e031610a41451" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test&lt;/code&gt; methods</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; 방법</target>
        </trans-unit>
        <trans-unit id="0ad3f8e851285dfbe4f6b91f450bb2505e866a09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test_fail&lt;/code&gt; exists as a convenience function that can be called instead. It takes one argument, the offset from the current line that the line that causes the fail is on.</source>
          <target state="translated">&lt;code&gt;test_fail&lt;/code&gt; 은 대신 호출 할 수있는 편의 함수로 존재합니다. 실패를 일으키는 행이있는 현재 행의 오프셋 인 하나의 인수가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="90da6b1102889759293d832aa8ea25d7abcef86c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;threads-&amp;gt;list()&lt;/code&gt; returns a list of thread objects, one for each thread that's currently running and not detached. Handy for a number of things, including cleaning up at the end of your program (from the main Perl thread, of course):</source>
          <target state="translated">&lt;code&gt;threads-&amp;gt;list()&lt;/code&gt; 는 현재 실행 중이고 분리되지 않은 각 스레드마다 하나씩 스레드 개체 목록을 반환합니다. 프로그램이 끝날 때 청소하는 것 (물론 메인 Perl 스레드에서)을 포함하여 많은 것들에 편리합니다 :</target>
        </trans-unit>
        <trans-unit id="01a84580d195b2879df6edd3b9fb211e6bd1e201" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tick&lt;/code&gt;, &lt;code&gt;quoteHighBit&lt;/code&gt;, &lt;code&gt;printUndef&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;tick&lt;/code&gt;, &lt;code&gt;quoteHighBit&lt;/code&gt;, &lt;code&gt;printUndef&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="37fe7f59563dbe7257cc9d61b178eb076121ea2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tid()&lt;/code&gt; is a thread object method that returns the thread ID of the thread the object represents. Thread IDs are integers, with the main thread in a program being 0. Currently Perl assigns a unique TID to every thread ever created in your program, assigning the first thread to be created a TID of 1, and increasing the TID by 1 for each new thread that's created. When used as a class method, &lt;code&gt;threads-&amp;gt;tid()&lt;/code&gt; can be used by a thread to get its own TID.</source>
          <target state="translated">&lt;code&gt;tid()&lt;/code&gt; 는 객체가 나타내는 스레드의 스레드 ID를 반환하는 스레드 객체 메서드입니다. 스레드 ID는 정수이며 프로그램의 기본 스레드는 0입니다. 현재 Perl은 프로그램에서 작성된 모든 스레드에 고유 한 TID를 할당하여 첫 번째 스레드가 작성되도록 TID를 1로 지정하고 각 스레드마다 TID를 1 씩 증가시킵니다. 만들어진 새 스레드. 클래스 메소드로 사용될 때 &lt;code&gt;threads-&amp;gt;tid()&lt;/code&gt; 는 스레드에서 자체 TID를 얻기 위해 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3e5a788348d8864316119440464ae18df37f7eaf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;time&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="81be08d630009f1394c690c301f7f5a7b2339e69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timelocal()&lt;/code&gt; and &lt;code&gt;timegm()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;timelocal()&lt;/code&gt; 및 &lt;code&gt;timegm()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="15042c572a01150cfb24fe4943a335ce4853ab16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timelocal_modern()&lt;/code&gt; and &lt;code&gt;timegm_modern()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;timelocal_modern()&lt;/code&gt; 및 &lt;code&gt;timegm_modern()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7d00ab1ec67e662b179958a94aeba2124bbb15e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timelocal_nocheck()&lt;/code&gt; and &lt;code&gt;timegm_nocheck()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;timelocal_nocheck()&lt;/code&gt; 및 &lt;code&gt;timegm_nocheck()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="47bf99f23525fe65db8d003f48ed26cc136216f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeout&lt;/code&gt; &amp;mdash; Request timeout in seconds (default is 60) If a socket open, read or write takes longer than the timeout, an exception is thrown.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; &amp;mdash; 요청 제한 시간 (초) (기본값은 60) 소켓 열기, 읽기 또는 쓰기가 제한 시간보다 오래 걸리면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="fa1f26ad06e5c0601fee78fd543cafca65d09238" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeout&lt;/code&gt; - equivalent to &lt;code&gt;$sock_timeout&lt;/code&gt; , sets the socket timeout in seconds. Defaults to 0 on all systems except Mac OS X where it is set to 0.25 sec.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; - &lt;code&gt;$sock_timeout&lt;/code&gt; 과 동일 초 소켓 시간 제한을 설정합니다. 0.25 초로 설정된 Mac OS X를 제외한 모든 시스템에서 기본값은 0입니다.</target>
        </trans-unit>
        <trans-unit id="0d40ed8263db69f63f85252a957f6a1923552655" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeout&lt;/code&gt; - equivalent to &lt;code&gt;$sock_timeout&lt;/code&gt;, sets the socket timeout in seconds. Defaults to 0 on all systems except Mac OS X where it is set to 0.25 sec.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; -에 해당 &lt;code&gt;$sock_timeout&lt;/code&gt; 초 소켓 시간 제한을 설정합니다. 0.25 초로 설정된 Mac OS X를 제외한 모든 시스템에서 기본값은 0입니다.</target>
        </trans-unit>
        <trans-unit id="1223429184be3c4a3e3dbe7bc07b1c04c106dc15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeout&lt;/code&gt; denotes a timeout in seconds. Floating-point timeouts are OK. With &lt;code&gt;mode=deterministic&lt;/code&gt; , the timeout denotes the timeout per question; with &lt;code&gt;mode=anyorder&lt;/code&gt; it denotes the timeout per byte received from the stream or questions.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; 초과는 초 단위의 시간 초과를 나타냅니다. 부동 소수점 시간 초과가 정상입니다. 하여 &lt;code&gt;mode=deterministic&lt;/code&gt; 시간 제한은 질문마다 제한 시간을 나타내고; 와 &lt;code&gt;mode=anyorder&lt;/code&gt; 는 스트림 또는 질문로부터 수신 바이트마다 제한 시간을 나타낸다.</target>
        </trans-unit>
        <trans-unit id="dd0df4bd3a02dfe65598daa77dcdc6e0c0b22412" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;todo()&lt;/code&gt; is about finding the right package to look for &lt;code&gt;$TODO&lt;/code&gt; in. It's pretty good at guessing the right package to look at. It first looks for the caller based on &lt;code&gt;$Level + 1&lt;/code&gt; , since &lt;code&gt;todo()&lt;/code&gt; is usually called inside a test function. As a last resort it will use &lt;code&gt;exported_to()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;todo()&lt;/code&gt; 는 &lt;code&gt;$TODO&lt;/code&gt; 를 찾기위한 올바른 패키지를 찾는 것입니다. 살펴볼 올바른 패키지를 추측하는 것이 좋습니다. &lt;code&gt;todo()&lt;/code&gt; 는 일반적으로 테스트 함수 내에서 호출 되므로 &lt;code&gt;$Level + 1&lt;/code&gt; 기반으로 호출자를 먼저 찾습니다 . 최후의 수단으로 &lt;code&gt;exported_to()&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="9f258b2d9b8d09d9fae8fc22e4845c2a47b1ddb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;todo()&lt;/code&gt; is about finding the right package to look for &lt;code&gt;$TODO&lt;/code&gt; in. It's pretty good at guessing the right package to look at. It first looks for the caller based on &lt;code&gt;$Level + 1&lt;/code&gt;, since &lt;code&gt;todo()&lt;/code&gt; is usually called inside a test function. As a last resort it will use &lt;code&gt;exported_to()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;todo()&lt;/code&gt; 는 &lt;code&gt;$TODO&lt;/code&gt; 를 찾는 데 적합한 패키지를 찾는 것입니다 . 살펴볼 올바른 패키지를 추측하는 데 꽤 좋습니다. &lt;code&gt;todo()&lt;/code&gt; 는 일반적으로 테스트 함수 내에서 호출 되기 때문에 먼저 &lt;code&gt;$Level + 1&lt;/code&gt; 기반으로 호출자를 찾습니다 . 최후의 수단으로 &lt;code&gt;exported_to()&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="480a9cfa214732ba9a24ba357b41b6de49286344" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;todo_output&lt;/code&gt; is used instead of &lt;code&gt;failure_output()&lt;/code&gt; for the diagnostics of a failing TODO test. These will not be seen by the user.</source>
          <target state="translated">&lt;code&gt;todo_output&lt;/code&gt; 실패한 TODO 테스트의 진단을 위해 &lt;code&gt;failure_output()&lt;/code&gt; 대신 todo_output 이 사용됩니다 . 이들은 사용자에게 보이지 않습니다.</target>
        </trans-unit>
        <trans-unit id="63b5f25eda63530af4b5b7de433395a3f0e3e276" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tr///&lt;/code&gt;, &lt;code&gt;y///&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;tr///&lt;/code&gt;, &lt;code&gt;y///&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e3ddec8a45eeda13fb91eb0ae8954551ddba8e30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trailer_callback&lt;/code&gt; &amp;mdash; A code reference that will be called if it exists to provide a hashref of trailing headers (only used with chunked transfer-encoding)</source>
          <target state="translated">&lt;code&gt;trailer_callback&lt;/code&gt; &amp;mdash; 후행 헤더의 해시 참조를 제공하기 위해 존재하는 경우 호출되는 코드 참조 (청크 된 전송 인코딩에서만 사용됨)</target>
        </trans-unit>
        <trans-unit id="45f6fa502080435164a069d25ad4e047384a776b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; - equivalent to &lt;code&gt;$sock_type&lt;/code&gt; , selects the socket type (or &quot;mechanism&quot;). An array reference can be passed to specify several mechanisms to try, in the given order.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; -에 해당 &lt;code&gt;$sock_type&lt;/code&gt; , 소켓 타입 (또는 &quot;장치&quot;)를 선택합니다. 주어진 순서대로 시도 할 여러 메커니즘을 지정하기 위해 배열 참조를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f30209a9c17c2698d845377a2869740567d6669e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; - equivalent to &lt;code&gt;$sock_type&lt;/code&gt;, selects the socket type (or &quot;mechanism&quot;). An array reference can be passed to specify several mechanisms to try, in the given order.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; -에 해당 &lt;code&gt;$sock_type&lt;/code&gt; , 소켓 타입 (또는 &quot;장치&quot;)를 선택합니다. 주어진 순서대로 시도 할 여러 메커니즘을 지정하기 위해 배열 참조를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="201b469f2e38039b039595a7bfd410577149a7cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt; , where it is equivalent to 1 (or 45, which here is equivalent).</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; 는 1과 같습니다 (또는 45와 같음).</target>
        </trans-unit>
        <trans-unit id="47456dc4ed8c495bfa1ec258b5fe33359e7ae949" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt;, where it is equivalent to 1 (or 45, which here is equivalent).</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; , 여기서 1 (또는 45, 여기서는 동등 함)과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="904baef9244a9061ba1e5baaa7bde6857e2dd419" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undef&lt;/code&gt; is always treated as numeric, and in particular is changed to &lt;code&gt;0&lt;/code&gt; before incrementing (so that a post-increment of an undef value will return &lt;code&gt;0&lt;/code&gt; rather than &lt;code&gt;undef&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;undef&lt;/code&gt; 항상 숫자로서 취급되고, 특히 변경되는 &lt;code&gt;0&lt;/code&gt; (AN 미확정 값의 후행 증가가 반환되도록 증가하기 전에 &lt;code&gt;0&lt;/code&gt; 이 아닌 &lt;code&gt;undef&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="d344aa8d59bc6d9dc9bc4053bff6b659ec168c15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undef&lt;/code&gt; only ever matches another &lt;code&gt;undef&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;undef&lt;/code&gt; 오직 다른 일치 &lt;code&gt;undef&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="14c4c57a89d245b76f4faa55818a7b4b4128be79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undef&lt;/code&gt; will only ever match &lt;code&gt;undef&lt;/code&gt;. So you can test a value against &lt;code&gt;undef&lt;/code&gt; like this:</source>
          <target state="translated">&lt;code&gt;undef&lt;/code&gt; 오직 일치합니다 &lt;code&gt;undef&lt;/code&gt; . 따라서 다음 과 같이 &lt;code&gt;undef&lt;/code&gt; 에 대해 값을 테스트 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fd3ff8b5f0a042c50be93a5729b5b85e516c3d3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undef&lt;/code&gt;, indicating that no prefs files remain to be found</source>
          <target state="translated">&lt;code&gt;undef&lt;/code&gt; , 찾을 수있는 환경 설정 파일이 남아 있지 않음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="57cc6e1b81814a09169f200f225fe6bcb63529d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undef&lt;/code&gt;, which is a valid scalar), the original deserialised hash will be inserted. This setting can slow down decoding considerably.</source>
          <target state="translated">&lt;code&gt;undef&lt;/code&gt; ( 유효한 스칼라)) 원래 역 직렬화 된 해시가 삽입됩니다. 이 설정은 디코딩 속도를 상당히 느리게 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="53b4d96f2f281815a4c230e88fda03f84150f077" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undef&lt;/code&gt;-ing a &lt;code&gt;Tie::File&lt;/code&gt; array element just blanks out the corresponding record in the file. When you read it back again, you'll get the empty string, so the supposedly-&lt;code&gt;undef&lt;/code&gt;'ed value will be defined. Similarly, if you have &lt;code&gt;autochomp&lt;/code&gt; disabled, then</source>
          <target state="translated">&lt;code&gt;undef&lt;/code&gt; -ing a &lt;code&gt;Tie::File&lt;/code&gt; 배열 요소는 파일의 해당 레코드를 비 웁니다 . 당신이 다시 읽을 때 supposedly- 그래서, 당신은 빈 문자열을 얻을 것이다 &lt;code&gt;undef&lt;/code&gt; '에드 값이 정의됩니다. 마찬가지로 &lt;code&gt;autochomp&lt;/code&gt; 를 비활성화 한 경우</target>
        </trans-unit>
        <trans-unit id="dedf861fafa961a23cfda13ddd6f5764ed4cc713" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undef&lt;/code&gt;. The value of the macro is not needed.</source>
          <target state="translated">&lt;code&gt;undef&lt;/code&gt; . 매크로 값은 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="04aeee1dcd5104050c34c9167c016f0abab6c44f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unicode_eval&lt;/code&gt; changes the behavior of plain string &lt;code&gt;eval&lt;/code&gt; to work more consistently, especially in the Unicode world. Certain (mis)behaviors couldn't be changed without breaking some things that had come to rely on them, so the feature can be enabled and disabled. Details are at &lt;a href=&quot;perlfunc#Under-the-%22unicode_eval%22-feature&quot;&gt;&quot;Under the &quot;unicode_eval&quot; feature&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;unicode_eval&lt;/code&gt; 은 특히 유니 코드 세계에서보다 일관되게 작동하도록 일반 문자열 &lt;code&gt;eval&lt;/code&gt; 의 동작을 변경합니다 . 특정 (잘못된) 행동은 그들에 의존하게 된 일부를 깨뜨리지 않고는 변경할 수 없으므로 기능을 활성화 및 비활성화 할 수 있습니다. 자세한 내용은 &lt;a href=&quot;perlfunc#Under-the-%22unicode_eval%22-feature&quot;&gt;perlfunc의 &quot;Under the&quot;unicode_eval &quot;feature&quot;에&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="d894b0dfce17a1497005852b9dfd4d7177a5014d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unixify&lt;/code&gt; on the resulting file specification may not result in the original Unix file specification, so programs should not plan to convert a file specification from Unix to VMS and then back to Unix again after modification of the components.</source>
          <target state="translated">&lt;code&gt;unixify&lt;/code&gt; 결과 파일 사양에 대한 unixify 는 원래 Unix 파일 사양이되지 않을 수 있으므로 프로그램은 파일 사양을 Unix에서 VMS로 변환 한 다음 구성 요소를 수정 한 후 다시 Unix로 다시 변환 할 계획을 세워서 는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="74ef1be18f87901f5ccbe85addef0901d51f67cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unknown&lt;/code&gt; methods</source>
          <target state="translated">&lt;code&gt;unknown&lt;/code&gt; 방법</target>
        </trans-unit>
        <trans-unit id="4f83ff1d4682685cbd2f8afa49310d2e61c28282" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unlink&lt;/code&gt; will delete a file if at all possible, even if it requires changing file protection (though it won't try to change the protection of the parent directory). You can tell whether you've got explicit delete access to a file by using the &lt;code&gt;VMS::Filespec::candelete&lt;/code&gt; operator. For instance, in order to delete only files to which you have delete access, you could say something like</source>
          <target state="translated">&lt;code&gt;unlink&lt;/code&gt; 는 파일 보호를 변경해야하는 경우에도 가능하면 파일을 삭제합니다 (부모 디렉토리의 보호를 변경하려고 시도하지는 않음). &lt;code&gt;VMS::Filespec::candelete&lt;/code&gt; 연산자 를 사용하여 파일에 대한 명시 적 삭제 액세스 권한이 있는지 여부를 알 수 있습니다 . 예를 들어, 삭제 권한이있는 파일 만 삭제하려면 다음과 같이 말할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="467b41679413c9a8fc738c593b15964285b5346c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unlink&lt;/code&gt; will delete the highest version of a file only; in order to delete all versions, you need to say</source>
          <target state="translated">&lt;code&gt;unlink&lt;/code&gt; 는 파일의 가장 높은 버전 만 삭제합니다. 모든 버전을 삭제하려면 다음과 같이 말해야합니다.</target>
        </trans-unit>
        <trans-unit id="8613fe9e8f4b7f5c053abd048c52ac7b66243a9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unmemoize&lt;/code&gt; accepts a reference to, or the name of a previously memoized function, and undoes whatever it did to provide the memoized version in the first place, including making the name refer to the unmemoized version if appropriate. It returns a reference to the unmemoized version of the function.</source>
          <target state="translated">&lt;code&gt;unmemoize&lt;/code&gt; 는 이전에 메모 화 된 함수에 대한 참조 또는 이름을 승인하고, 필요한 경우 이름이 메모되지 않은 버전을 참조하도록하는 등 메모 된 버전을 제공하기 위해 수행 한 모든 작업을 취소합니다. 메모리의 메모리 버전에 대한 참조를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="d37e0040afc632f6d7e9f0edcbcd7999ecda8585" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unwrapped|made|tested successfully&lt;/code&gt; or something similar. Another situation where CPAN refuses to act is an &lt;code&gt;install&lt;/code&gt; if the corresponding &lt;code&gt;test&lt;/code&gt; was not successful.</source>
          <target state="translated">&lt;code&gt;unwrapped|made|tested successfully&lt;/code&gt; 또는 유사한 것으로 테스트되었습니다 . CPAN이 작동을 거부하는 또 다른 상황 은 해당 &lt;code&gt;test&lt;/code&gt; 가 실패한 경우 &lt;code&gt;install&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c76e8afb9eb470c6542de95c6fdb923fa4e1dc22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unzip&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;unzip&lt;/code&gt; 은 최소한 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 매개 변수를 예상 합니다.</target>
        </trans-unit>
        <trans-unit id="a141367ed9e8db70d8a48598a73de00d6074b349" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unzip&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;unzip&lt;/code&gt; 에는 두 개 이상의 매개 변수, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 와 0 개 이상의 선택적 매개 변수가 필요합니다 ( &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;선택적 매개 변수&quot;&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="e5e5dfa01f20adda70ae490b1d7ced48e4188740" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;url&lt;/code&gt; &amp;mdash; URL that provided the response. This is the URL of the request unless there were redirections, in which case it is the last URL queried in a redirection chain</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; &amp;mdash; 응답을 제공 한 URL입니다. 리디렉션이없는 경우 요청의 URL입니다.이 경우 리디렉션 체인에서 쿼리 된 마지막 URL입니다.</target>
        </trans-unit>
        <trans-unit id="775adf7a055e6dd04a94860178a8c7033a66114b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use VERSION&lt;/code&gt; also lexically enables all features available in the requested version as defined by the &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt; pragma, disabling any features not in the requested version's feature bundle. See &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt;. Similarly, if the specified Perl version is greater than or equal to 5.12.0, strictures are enabled lexically as with &lt;a href=&quot;strict&quot;&gt;&lt;code&gt;use strict&lt;/code&gt;&lt;/a&gt;. Any explicit use of &lt;code&gt;use strict&lt;/code&gt; or &lt;code&gt;no strict&lt;/code&gt; overrides &lt;code&gt;use VERSION&lt;/code&gt;, even if it comes before it. Later use of &lt;code&gt;use VERSION&lt;/code&gt; will override all behavior of a previous &lt;code&gt;use VERSION&lt;/code&gt;, possibly removing the &lt;code&gt;strict&lt;/code&gt; and &lt;code&gt;feature&lt;/code&gt; added by &lt;code&gt;use VERSION&lt;/code&gt;. &lt;code&gt;use VERSION&lt;/code&gt; does not load the</source>
          <target state="translated">&lt;code&gt;use VERSION&lt;/code&gt; 은 또한 &lt;a href=&quot;feature&quot;&gt;기능&lt;/a&gt; pragma에 정의 된대로 요청 된 버전에서 사용 가능한 모든 기능을 어휘 적으로 활성화 하여 요청 된 버전의 기능 번들에없는 모든 기능을 비활성화합니다. &lt;a href=&quot;feature&quot;&gt;기능을&lt;/a&gt; 참조하십시오 . 유사하게, 지정된 Perl 버전이 5.12.0 이상이면 제한은 &lt;a href=&quot;strict&quot;&gt; &lt;code&gt;use strict&lt;/code&gt; &lt;/a&gt; 와 같이 어휘 적으로 활성화됩니다 . &lt;code&gt;use strict&lt;/code&gt; 또는 &lt;code&gt;no strict&lt;/code&gt; 재정의를 명시 적으로 사용 &lt;code&gt;use VERSION&lt;/code&gt; 됩니다. 나중에 &lt;code&gt;use VERSION&lt;/code&gt; 사용을 사용 하면 이전 &lt;code&gt;use VERSION&lt;/code&gt; 의 모든 동작을 재정 의하여에 의해 추가 된 &lt;code&gt;strict&lt;/code&gt; 및 &lt;code&gt;feature&lt;/code&gt; 제거 할 수 있습니다. &lt;code&gt;use VERSION&lt;/code&gt; . &lt;code&gt;use VERSION&lt;/code&gt; 하면</target>
        </trans-unit>
        <trans-unit id="717c117d37180baef4adfbf000524727bc507192" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use bytes&lt;/code&gt; is usually a failed attempt to do something useful. Just forget about it.</source>
          <target state="translated">&lt;code&gt;use bytes&lt;/code&gt; 는 일반적으로 유용한 작업을 수행하는 데 실패한 시도입니다. 그냥 잊어 버려.</target>
        </trans-unit>
        <trans-unit id="0aa38eb6ffe74b5abdd43e2e0ac5b726882991ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use encoding ...&lt;/code&gt; is not thread-safe (i.e., do not use in threaded applications).</source>
          <target state="translated">&lt;code&gt;use encoding ...&lt;/code&gt; 은 스레드로부터 안전하지 않습니다 (즉, 스레드 응용 프로그램에서 사용하지 마십시오).</target>
        </trans-unit>
        <trans-unit id="a6f2b56f1c9a3044d97aa218ad8aea7f7b9cdf18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use feature 'fc'&lt;/code&gt; tells the compiler to enable the &lt;code&gt;fc&lt;/code&gt; function, which implements Unicode casefolding.</source>
          <target state="translated">&lt;code&gt;use feature 'fc'&lt;/code&gt; 는 유니 코드 casefolding을 구현 하는 &lt;code&gt;fc&lt;/code&gt; 함수 를 사용하도록 컴파일러에 지시합니다 .</target>
        </trans-unit>
        <trans-unit id="14e16745836f5ce127bfa2bfd2cc3af2cfefa548" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use feature 'say'&lt;/code&gt; tells the compiler to enable the Perl 6 style &lt;code&gt;say&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;use feature 'say'&lt;/code&gt; 는 컴파일러에게 Perl 6 스타일 &lt;code&gt;say&lt;/code&gt; 기능 을 사용하도록 지시합니다 .</target>
        </trans-unit>
        <trans-unit id="d2a96afe18265d9e679f00d2a3490fb1e880a320" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use feature 'state'&lt;/code&gt; tells the compiler to enable &lt;code&gt;state&lt;/code&gt; variables.</source>
          <target state="translated">&lt;code&gt;use feature 'state'&lt;/code&gt; 는 컴파일러에게 &lt;code&gt;state&lt;/code&gt; 변수 를 사용하도록 지시합니다 .</target>
        </trans-unit>
        <trans-unit id="f19eba9a202b007212807a12e2c4702f09b892a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use feature 'switch'&lt;/code&gt; tells the compiler to enable the Perl 6 given/when construct.</source>
          <target state="translated">&lt;code&gt;use feature 'switch'&lt;/code&gt; 는 Perl 6 given / when 구문을 활성화하도록 컴파일러에 지시합니다.</target>
        </trans-unit>
        <trans-unit id="43b1d8b49d90ed7714df07f45c6118bdb1fefaf7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use feature 'unicode_strings'&lt;/code&gt; tells the compiler to use Unicode rules in all string operations executed within its scope (unless they are also within the scope of either &lt;code&gt;use locale&lt;/code&gt; or &lt;code&gt;use bytes&lt;/code&gt;). The same applies to all regular expressions compiled within the scope, even if executed outside it. It does not change the internal representation of strings, but only how they are interpreted.</source>
          <target state="translated">&lt;code&gt;use feature 'unicode_strings'&lt;/code&gt; 는 컴파일러에게 해당 범위 내에서 실행되는 모든 문자열 작업에서 유니 코드 규칙을 사용하도록 지시합니다 ( &lt;code&gt;use locale&lt;/code&gt; 또는 &lt;code&gt;use bytes&lt;/code&gt; 범위 내에 있지 않는 한 ). 범위 밖에서 실행 되더라도 범위 내에서 컴파일 된 모든 정규식에 동일하게 적용됩니다. 문자열의 내부 표현을 변경하지 않고 해석 방법 만 변경합니다.</target>
        </trans-unit>
        <trans-unit id="be49598767088a16f67d8e865b1d6de66c06090b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use re 'debug'&lt;/code&gt; enables you to see the gory details of how the Perl regular expression engine works. In order to understand this typically voluminous output, one must not only have some idea about how regular expression matching works in general, but also know how Perl's regular expressions are internally compiled into an automaton. These matters are explored in some detail in &lt;a href=&quot;perldebguts#Debugging-Regular-Expressions&quot;&gt;&quot;Debugging Regular Expressions&quot; in perldebguts&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;use re 'debug'&lt;/code&gt; 를 사용하면 Perl 정규식 엔진이 작동하는 방식에 대한 자세한 내용을 볼 수 있습니다. 이 일반적으로 방대한 출력을 이해하려면 정규식 일치가 일반적으로 어떻게 작동하는지에 대한 아이디어가 있어야 할뿐만 아니라 Perl의 정규식이 내부적으로 자동으로 컴파일되는 방법도 알아야합니다. 이러한 문제는 &lt;a href=&quot;perldebguts#Debugging-Regular-Expressions&quot;&gt;perldebguts의 &quot;Debugging Regular Expressions&quot;에서 자세히 설명&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="fc1e6e58c1c375445799dfd763325680eeb68f86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use utf8&lt;/code&gt; still needed to enable &lt;a href=&quot;#Unicode-Encodings&quot;&gt;UTF-8&lt;/a&gt; in scripts</source>
          <target state="translated">&lt;code&gt;use utf8&lt;/code&gt; 스크립트에서 &lt;a href=&quot;#Unicode-Encodings&quot;&gt;UTF-8&lt;/a&gt; 을 활성화하는 데 여전히 필요한 utf8 사용</target>
        </trans-unit>
        <trans-unit id="3ef69911d7fdf83a2eb4ad2b4a9ebf4ca7e75fe8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use utf8&lt;/code&gt; wasn't implicitly declared so you have to &lt;code&gt;use utf8&lt;/code&gt; to do</source>
          <target state="translated">&lt;code&gt;use utf8&lt;/code&gt; 은 암시 적으로 선언되지 않았으므로 &lt;code&gt;use utf8&lt;/code&gt; 을 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="578368502634d503139789b27f785f7a4040cb4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use&lt;/code&gt; a Perl module if a condition holds</source>
          <target state="translated">&lt;code&gt;use&lt;/code&gt; 조건이 유지되면 Perl 모듈을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="7ba4443e83dc26256681811989a51344cf04a795" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;user&lt;/code&gt; and &lt;code&gt;uid&lt;/code&gt; are aliases of &lt;code&gt;owner&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;user&lt;/code&gt; 및 &lt;code&gt;uid&lt;/code&gt; 는 &lt;code&gt;owner&lt;/code&gt; 의 별칭입니다 .</target>
        </trans-unit>
        <trans-unit id="db9006160e92aa365d9ee98dad3ea083afe695fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;user&lt;/code&gt; and &lt;code&gt;uid&lt;/code&gt; are aliases of &lt;code&gt;owner&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;user&lt;/code&gt; 및 &lt;code&gt;uid&lt;/code&gt; 는 &lt;code&gt;owner&lt;/code&gt; 의 별칭입니다 .</target>
        </trans-unit>
        <trans-unit id="61f1ed7e3d101e35e8cb1464b06fde105ee5daff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ustrp&lt;/code&gt; is a pointer to the character buffer to put the conversion result to. &lt;code&gt;lenp&lt;/code&gt; is a pointer to the length of the result.</source>
          <target state="translated">&lt;code&gt;ustrp&lt;/code&gt; 는 변환 결과를 넣을 문자 버퍼에 대한 포인터입니다. &lt;code&gt;lenp&lt;/code&gt; 는 결과 길이에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="8bd04fa099b83f91457c14073be07a2b7a9907c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;utf8::encode&lt;/code&gt; is like &lt;code&gt;utf8::upgrade&lt;/code&gt; , but the UTF8 flag is cleared. See &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt; for more on the UTF8 flag and the C API functions &lt;code&gt;sv_utf8_upgrade&lt;/code&gt; , &lt;code&gt;sv_utf8_downgrade&lt;/code&gt; , &lt;code&gt;sv_utf8_encode&lt;/code&gt; , and &lt;code&gt;sv_utf8_decode&lt;/code&gt; , which are wrapped by the Perl functions &lt;code&gt;utf8::upgrade&lt;/code&gt; , &lt;code&gt;utf8::downgrade&lt;/code&gt; , &lt;code&gt;utf8::encode&lt;/code&gt; and &lt;code&gt;utf8::decode&lt;/code&gt; . Also, the functions utf8::is_utf8, utf8::valid, utf8::encode, utf8::decode, utf8::upgrade, and utf8::downgrade are actually internal, and thus always available, without a &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; utf8&lt;/code&gt; statement.</source>
          <target state="translated">&lt;code&gt;utf8::encode&lt;/code&gt; 는 &lt;code&gt;utf8::upgrade&lt;/code&gt; 와 비슷하지만 UTF8 플래그는 지워집니다. 참조 &lt;a href=&quot;perlunicode&quot;&gt;perlunicode을&lt;/a&gt; UTF8 플래그에 더를 위해 C API 함수가 &lt;code&gt;sv_utf8_upgrade&lt;/code&gt; , &lt;code&gt;sv_utf8_downgrade&lt;/code&gt; , &lt;code&gt;sv_utf8_encode&lt;/code&gt; 및 &lt;code&gt;sv_utf8_decode&lt;/code&gt; 펄 함수에 의해 포장된다, &lt;code&gt;utf8::upgrade&lt;/code&gt; , &lt;code&gt;utf8::downgrade&lt;/code&gt; , &lt;code&gt;utf8::encode&lt;/code&gt; 및 &lt;code&gt;utf8::decode&lt;/code&gt; . A가없이 또한, 기능 UTF8 :: is_utf8, UTF8 :: 유효 UTF8 :: 인코딩, UTF8 :: 디코드, UTF8 :: 업그레이드 및 UTF8 :: 다운 그레이드는, 실제로 내부, 따라서 항상 사용할 &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; utf8&lt;/code&gt; 문을.</target>
        </trans-unit>
        <trans-unit id="314672849dfbf9b9ebb5a47602618e0588d51913" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;utf8::encode&lt;/code&gt; is like &lt;code&gt;utf8::upgrade&lt;/code&gt;, but the UTF8 flag is cleared. See &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;, and the C API functions &lt;code&gt;&lt;a href=&quot;perlapi#sv_utf8_upgrade&quot;&gt;sv_utf8_upgrade&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;perlapi#sv_utf8_downgrade&quot;&gt;&quot;sv_utf8_downgrade&quot; in perlapi&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;perlapi#sv_utf8_encode&quot;&gt;&quot;sv_utf8_encode&quot; in perlapi&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;perlapi#sv_utf8_decode&quot;&gt;&quot;sv_utf8_decode&quot; in perlapi&lt;/a&gt;&lt;/code&gt;, which are wrapped by the Perl functions &lt;code&gt;utf8::upgrade&lt;/code&gt;, &lt;code&gt;utf8::downgrade&lt;/code&gt;, &lt;code&gt;utf8::encode&lt;/code&gt; and &lt;code&gt;utf8::decode&lt;/code&gt;. Also, the functions &lt;code&gt;utf8::is_utf8&lt;/code&gt;, &lt;code&gt;utf8::valid&lt;/code&gt;, &lt;code&gt;utf8::encode&lt;/code&gt;, &lt;code&gt;utf8::decode&lt;/code&gt;, &lt;code&gt;utf8::upgrade&lt;/code&gt;, and &lt;code&gt;utf8::downgrade&lt;/code&gt; are actually internal, and thus always available, without a &lt;code&gt;require utf8&lt;/code&gt; statement.</source>
          <target state="translated">&lt;code&gt;utf8::encode&lt;/code&gt; 는 &lt;code&gt;utf8::upgrade&lt;/code&gt; 와 비슷하지만 UTF8 플래그는 지워집니다. 참조 &lt;a href=&quot;perlunicode&quot;&gt;perlunicode를&lt;/a&gt; , 그리고 C API 함수가 &lt;code&gt;&lt;a href=&quot;perlapi#sv_utf8_upgrade&quot;&gt;sv_utf8_upgrade&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;perlapi#sv_utf8_downgrade&quot;&gt;&quot;sv_utf8_downgrade&quot; in perlapi&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;perlapi#sv_utf8_encode&quot;&gt;&quot;sv_utf8_encode&quot; in perlapi&lt;/a&gt;&lt;/code&gt; , 그리고 &lt;code&gt;&lt;a href=&quot;perlapi#sv_utf8_decode&quot;&gt;&quot;sv_utf8_decode&quot; in perlapi&lt;/a&gt;&lt;/code&gt; 펄 함수에 의해 포장된다, &lt;code&gt;utf8::upgrade&lt;/code&gt; , &lt;code&gt;utf8::downgrade&lt;/code&gt; , &lt;code&gt;utf8::encode&lt;/code&gt; 및 &lt;code&gt;utf8::decode&lt;/code&gt; . 또한 &lt;code&gt;utf8::is_utf8&lt;/code&gt; , &lt;code&gt;utf8::valid&lt;/code&gt; , &lt;code&gt;utf8::encode&lt;/code&gt; , &lt;code&gt;utf8::decode&lt;/code&gt; , &lt;code&gt;utf8::upgrade&lt;/code&gt; 및 &lt;code&gt;utf8::downgrade&lt;/code&gt; 함수실제로 내부적이므로 &lt;code&gt;require utf8&lt;/code&gt; 문 없이 항상 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5c0f365565ea0f61a34ffea2e594515494b47b89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;utf8::unicode_to_native()&lt;/code&gt; and &lt;code&gt;utf8::native_to_unicode()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;utf8::unicode_to_native()&lt;/code&gt; 및 &lt;code&gt;utf8::native_to_unicode()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="322d02f8ccba9a276f3a31a9c308a4604cffd341" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;utf8::unicode_to_native()&lt;/code&gt; is used so that the Perl code is portable to EBCDIC platforms. You can omit it if you're</source>
          <target state="translated">&lt;code&gt;utf8::unicode_to_native()&lt;/code&gt; 는 Perl 코드가 EBCDIC 플랫폼에 이식 가능하도록 사용됩니다. 당신이 있다면 그것을 생략 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="bed6a550355dcf622a3f0f64161c1780b07934df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;utf8&lt;/code&gt; controls whether the JSON text created by &lt;code&gt;encode&lt;/code&gt; (and expected by &lt;code&gt;decode&lt;/code&gt;) is UTF-8 encoded or not, while &lt;code&gt;latin1&lt;/code&gt; and &lt;code&gt;ascii&lt;/code&gt; only control whether &lt;code&gt;encode&lt;/code&gt; escapes character values outside their respective codeset range. Neither of these flags conflict with each other, although some combinations make less sense than others.</source>
          <target state="translated">&lt;code&gt;utf8&lt;/code&gt; 은 &lt;code&gt;encode&lt;/code&gt; 에 의해 생성 된 JSON 텍스트 (및 &lt;code&gt;decode&lt;/code&gt; 에 의해 예상되는 )가 UTF-8로 인코딩 되는지 여부를 제어 하는 반면 &lt;code&gt;latin1&lt;/code&gt; 및 &lt;code&gt;ascii&lt;/code&gt; 는 &lt;code&gt;encode&lt;/code&gt; 가 해당 코드 세트 범위를 벗어난 문자 값을 이스케이프 할지 여부 만 제어합니다 . 일부 조합은 다른 조합보다 덜 의미가 있지만 이러한 플래그 중 어느 것도 서로 충돌하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b33702a1264871bd0f65d056d75eef0c8add3f98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;utf8&lt;/code&gt; flag disabled</source>
          <target state="translated">&lt;code&gt;utf8&lt;/code&gt; 플래그 비활성화</target>
        </trans-unit>
        <trans-unit id="9e2347ffa560fd355d58edc7dc62ab06f88d3e71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;utf8&lt;/code&gt; flag enabled</source>
          <target state="translated">&lt;code&gt;utf8&lt;/code&gt; 플래그 활성화</target>
        </trans-unit>
        <trans-unit id="8e2ca2030a09ee21c736f85339947d800c4bc9e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; is the scalar value to store for this key. &lt;code&gt;value&lt;/code&gt; is copied by this function, which thus does not take ownership of any reference to it, and later changes to the scalar will not be reflected in the value visible in the &lt;code&gt;refcounted_he&lt;/code&gt;. Complex types of scalar will not be stored with referential integrity, but will be coerced to strings. &lt;code&gt;value&lt;/code&gt; may be either null or &lt;code&gt;&amp;amp;PL_sv_placeholder&lt;/code&gt; to indicate that no value is to be associated with the key; this, as with any non-null value, takes precedence over the existence of a value for the key further along the chain.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 는이 키에 대해 저장할 스칼라 값입니다. &lt;code&gt;value&lt;/code&gt; 은이 함수에 의해 복사되므로 참조에 대한 소유권을 갖지 않으며 나중에 스칼라 변경 사항이 &lt;code&gt;refcounted_he&lt;/code&gt; 에 표시되는 값에 반영되지 않습니다 . 복잡한 유형의 스칼라는 참조 무결성으로 저장되지 않지만 문자열로 강제 변환됩니다. &lt;code&gt;value&lt;/code&gt; 는 null 또는 &lt;code&gt;&amp;amp;PL_sv_placeholder&lt;/code&gt; 가 될 수 있으며 이는 키와 연관된 값이 없음을 나타냅니다. 이것은 null이 아닌 값과 마찬가지로 체인을 따라 더 멀리있는 키에 대한 값의 존재보다 우선합니다.</target>
        </trans-unit>
        <trans-unit id="b8887e9f6da99c9e54f474e1c8e4528efba33e13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; is the scalar value to store for this key. &lt;code&gt;value&lt;/code&gt; is copied by this function, which thus does not take ownership of any reference to it, and later changes to the scalar will not be reflected in the value visible in the cop hints hash. Complex types of scalar will not be stored with referential integrity, but will be coerced to strings.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 는이 키에 대해 저장할 스칼라 값입니다. &lt;code&gt;value&lt;/code&gt; 은이 함수에 의해 복사되므로 이에 대한 참조의 소유권을 갖지 않으며 나중에 스칼라에 대한 변경 사항은 경찰 힌트 해시에서 볼 수있는 값에 반영되지 않습니다. 복잡한 유형의 스칼라는 참조 무결성으로 저장되지 않지만 문자열로 강제 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="2456e01d09f8a12420ae40af42332b053f7c264a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vec&lt;/code&gt; views its string argument as a sequence of bits. A string containing a code point over 0xFF is nonsensical. This usage is deprecated in Perl 5.28, and was removed in Perl 5.32.</source>
          <target state="translated">&lt;code&gt;vec&lt;/code&gt; 은 문자열 인수를 비트 시퀀스로 간주합니다. 0xFF 이상의 코드 포인트를 포함하는 문자열은 의미가 없습니다. 이 사용법은 Perl 5.28에서 더 이상 사용되지 않으며 Perl 5.32에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="0cfd635c57ecac1d51dc11cad357b4c3a79fac0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;verify_SSL&lt;/code&gt; &amp;mdash; A boolean that indicates whether to validate the SSL certificate of an &lt;code&gt;https&lt;/code&gt; &amp;mdash; connection (default is false)</source>
          <target state="translated">&lt;code&gt;verify_SSL&lt;/code&gt; &amp;mdash; &lt;code&gt;https&lt;/code&gt; &amp;mdash; 연결 의 SSL 인증서 유효성을 검사할지 여부를 나타내는 부울 (기본값은 false)</target>
        </trans-unit>
        <trans-unit id="d0f01183b1a1f7dd216a740e1f42d689e51a1b7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt; -- Indicates the desired specification version (e.g. &quot;1.0&quot;, &quot;1.1&quot; ... &quot;1.4&quot;, &quot;2&quot;). Defaults to the latest version of the CPAN Meta Spec.</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; - 원하는 사양 버전을 나타내는 (예를 들어 &quot;1.0&quot;, &quot;1.1&quot;... &quot;1.4&quot;, &quot;2&quot;). 기본값은 최신 버전의 CPAN 메타 사양입니다.</target>
        </trans-unit>
        <trans-unit id="4becaf3941402b9ca744e200b8de0784426b345e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vmsify&lt;/code&gt; on the resulting file specification may not result in the original VMS file specification, so programs should not plan to convert a file specification from VMS to Unix and then back to VMS again after modification.</source>
          <target state="translated">&lt;code&gt;vmsify&lt;/code&gt; 결과 파일 사양에 대한 vmsify 는 원래 VMS 파일 사양이 아닐 수 있으므로 프로그램은 파일 사양을 VMS에서 Unix로 변환 한 다음 수정 후 다시 VMS로 다시 변환 할 계획을 세워서 는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="11ec83e2e9ef7c3f580ec8c19b91c726b07fd6f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void&lt;/code&gt; . This practice is now deprecated, and may be not supported at some future version. Use the return value &lt;code&gt;SV *&lt;/code&gt; in such cases. (Currently &lt;code&gt;xsubpp&lt;/code&gt; contains some heuristic code which tries to disambiguate between &quot;truly-void&quot; and &quot;old-practice-declared-as-void&quot; functions. Hence your code is at mercy of this heuristics unless you use &lt;code&gt;SV *&lt;/code&gt; as return value.)</source>
          <target state="translated">&lt;code&gt;void&lt;/code&gt; . 이 방법은 더 이상 사용되지 않으며 향후 버전에서는 지원되지 않을 수 있습니다. 이 경우 반환 값 &lt;code&gt;SV *&lt;/code&gt; 를 사용하십시오 . 현재 &lt;code&gt;xsubpp&lt;/code&gt; 에는 &quot;실제로 무효화&quot;와 &quot;이전 관행으로 선언 된대로 무효화&quot;기능을 명확하게하는 휴리스틱 코드가 포함되어 있습니다. 따라서 &lt;code&gt;SV *&lt;/code&gt; 를 반환 값으로 사용하지 않으면 코드에 이러한 휴리스틱이 적용 됩니다.</target>
        </trans-unit>
        <trans-unit id="1d1d1a26482e5914160e7c9dae08ae2ac89d54e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void&lt;/code&gt;. This practice is now deprecated, and may be not supported at some future version. Use the return value &lt;code&gt;SV *&lt;/code&gt; in such cases. (Currently &lt;code&gt;xsubpp&lt;/code&gt; contains some heuristic code which tries to disambiguate between &quot;truly-void&quot; and &quot;old-practice-declared-as-void&quot; functions. Hence your code is at mercy of this heuristics unless you use &lt;code&gt;SV *&lt;/code&gt; as return value.)</source>
          <target state="translated">&lt;code&gt;void&lt;/code&gt; . 이 방법은 현재 사용되지 않으며 일부 향후 버전에서는 지원되지 않을 수 있습니다. 이러한 경우에는 반환 값 &lt;code&gt;SV *&lt;/code&gt; 를 사용하십시오 . (현재 &lt;code&gt;xsubpp&lt;/code&gt; 에는 &quot;truly-void&quot;함수와 &quot;old-practice-declared-as-void&quot;함수를 명확하게하는 휴리스틱 코드가 포함되어 있습니다. 따라서 &lt;code&gt;SV *&lt;/code&gt; 를 반환 값으로 사용하지 않는 한 코드는이 휴리스틱 스의 자비에 있습니다 .)</target>
        </trans-unit>
        <trans-unit id="88a6c93919cd34815869f280cd8b84f1065ac630" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;warn()&lt;/code&gt; or &lt;code&gt;carp()&lt;/code&gt; a message to STDERR.</source>
          <target state="translated">&lt;code&gt;warn()&lt;/code&gt; 또는 &lt;code&gt;carp()&lt;/code&gt; STDERR에 메시지를 보냅니다.</target>
        </trans-unit>
        <trans-unit id="3b4bda69ddbb085c5edb8604f61fe1eebd17ca61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;what&lt;/code&gt; and &lt;code&gt;op_name&lt;/code&gt; are used in any warning.</source>
          <target state="translated">&lt;code&gt;what&lt;/code&gt; 경고에 what 및 &lt;code&gt;op_name&lt;/code&gt; 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e091f4a7021829a7a3620da2c2a10b4eed1eec79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;while&lt;/code&gt; repeats the statement</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; 진술 을 반복 하면서</target>
        </trans-unit>
        <trans-unit id="906db552d87a0ee4629c6f29180b89745fa23b64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;win32_perlio&lt;/code&gt; - allows the use of the :win32 IO layer.</source>
          <target state="translated">&lt;code&gt;win32_perlio&lt;/code&gt; - : win32 IO 레이어 사용을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="50ccd06f1dd27edc527ebd4684db2ea14ab08f07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wrap()&lt;/code&gt; compresses trailing whitespace into one newline, and &lt;code&gt;fill()&lt;/code&gt; deletes all trailing whitespace.</source>
          <target state="translated">&lt;code&gt;wrap()&lt;/code&gt; 후행 공백을 하나의 줄 바꿈으로 압축하고 &lt;code&gt;fill()&lt;/code&gt; 후행 공백을 모두 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="3ec46baadad1061a82a3fe84c7b3bdcb20c88b10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wrapped&lt;/code&gt;&lt;code&gt;wraplen&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;wrapped&lt;/code&gt;&lt;code&gt;wraplen&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf9f7426eb12c72cfe1066d3cb1703d1a365da78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writemain()&lt;/code&gt; takes an argument list of directories containing archive libraries that relate to perl modules and should be linked into a new perl binary. It writes a corresponding</source>
          <target state="translated">&lt;code&gt;writemain()&lt;/code&gt; 은 perl 모듈과 관련된 아카이브 라이브러리를 포함하는 디렉토리의 인수 목록을 가져 와서 새로운 perl 바이너리에 링크되어야합니다. 대응하는</target>
        </trans-unit>
        <trans-unit id="a72e7abf95992836126047e9bceb660c62707d38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writemain()&lt;/code&gt; takes an argument list of zero or more directories containing archive libraries that relate to perl modules and should be linked into a new perl binary. It writes a corresponding</source>
          <target state="translated">&lt;code&gt;writemain()&lt;/code&gt; 은 perl 모듈과 관련된 아카이브 라이브러리를 포함하는 0 개 이상의 디렉토리의 인수 목록을 취하며 새로운 perl 바이너리에 링크되어야합니다. 그것은 상응하는 쓰기</target>
        </trans-unit>
        <trans-unit id="af4899d555a14c4548680da3fdcd57d8b2f3cbfc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;X&lt;/code&gt; accept the &lt;code&gt;!&lt;/code&gt; modifier to act as alignment commands: they jump forward or back to the closest position aligned at a multiple of &lt;code&gt;count&lt;/code&gt; characters. For example, to &lt;a href=&quot;#pack-TEMPLATE%2CLIST&quot;&gt;&lt;code&gt;pack&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#unpack-TEMPLATE%2CEXPR&quot;&gt;&lt;code&gt;unpack&lt;/code&gt;&lt;/a&gt; a C structure like</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;X&lt;/code&gt; 는 &lt;code&gt;!&lt;/code&gt; 정렬 명령 역할을하는 수정 자 : 여러 &lt;code&gt;count&lt;/code&gt; 문자에 정렬 된 가장 가까운 위치로 앞뒤로 점프 합니다. 예를 들어,하는 &lt;a href=&quot;#pack-TEMPLATE%2CLIST&quot;&gt; &lt;code&gt;pack&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#unpack-TEMPLATE%2CEXPR&quot;&gt; &lt;code&gt;unpack&lt;/code&gt; &lt;/a&gt; 와 같은 C 구조</target>
        </trans-unit>
        <trans-unit id="1585b59da49174f182f412bb70b4355173d36595" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;X&lt;/code&gt; accept the &lt;code&gt;!&lt;/code&gt; modifier to act as alignment commands: they jump forward or back to the closest position aligned at a multiple of &lt;code&gt;count&lt;/code&gt; characters. For example, to pack() or unpack() a C structure like</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;X&lt;/code&gt; 는 &lt;code&gt;!&lt;/code&gt; 정렬 명령으로 작동하는 수정 자 : 여러 &lt;code&gt;count&lt;/code&gt; 문자로 정렬 된 가장 가까운 위치로 앞으로 또는 뒤로 이동합니다 . 예를 들어 다음과 같은 C 구조를 pack () 또는 unpack ()</target>
        </trans-unit>
        <trans-unit id="7e4cad6d660d7f4a7c0baea9ffb828f6306a6484" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; means &quot;skip a byte&quot; when &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt;ing; when &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt;ing, it means &quot;introduce a null byte&quot; - that's probably not what you mean if you're dealing with plain text.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; 때 &quot;바이트 건너 뛰기&quot;를 의미 합니다. &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; 할 때 &quot;널 바이트 소개&quot;를 의미합니다. 일반 텍스트를 다루는 경우에는 의미가 없습니다.</target>
        </trans-unit>
        <trans-unit id="1949a962fd727fc6380668963f686ebb3a36d981" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; means &quot;skip a byte&quot; when &lt;code&gt;unpack&lt;/code&gt;ing; when &lt;code&gt;pack&lt;/code&gt;ing, it means &quot;introduce a null byte&quot; - that's probably not what you mean if you're dealing with plain text.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 는 &lt;code&gt;unpack&lt;/code&gt; 때 &quot;바이트 건너 뛰기&quot;를 의미 합니다. &lt;code&gt;pack&lt;/code&gt; 할 때 &quot;널 바이트 도입&quot;을 의미합니다. 일반 텍스트를 처리하는 경우 의미하는 바가 아닐 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e1dc3716ea8b4a3c4500628aaf4e0c7696cd52fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;xsinit()&lt;/code&gt; uses the xsi_* functions to generate most of its code.</source>
          <target state="translated">&lt;code&gt;xsinit()&lt;/code&gt; 는 xsi_ * 함수를 사용하여 대부분의 코드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="128b946d69152a1f151c55bf6ce61c0c49ec7ac8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;xsubpp&lt;/code&gt; variables and internal functions</source>
          <target state="translated">&lt;code&gt;xsubpp&lt;/code&gt; 변수 및 내부 함수</target>
        </trans-unit>
        <trans-unit id="c0a014552c003a1e76f63cc934b125b95e0ed6d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yyparse&lt;/code&gt; , the parser, lives in</source>
          <target state="translated">&lt;code&gt;yyparse&lt;/code&gt; 파서 인 yyparse 는</target>
        </trans-unit>
        <trans-unit id="e1bd2c7f4ad0b95dac90b8f9dccee5e2723b0111" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yyparse&lt;/code&gt;, the parser, lives in</source>
          <target state="translated">&lt;code&gt;yyparse&lt;/code&gt; 파서 인 yyparse 는</target>
        </trans-unit>
        <trans-unit id="86a8316320772d083e312e9c2712b98b8a990576" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zip&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;zip&lt;/code&gt; 에는 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 매개 변수가 두 개 이상 있어야 합니다.</target>
        </trans-unit>
        <trans-unit id="53fde9627e4f5d3ddafe17173f4ac0adc9d93ec3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zip&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;zip&lt;/code&gt; 에는 두 개 이상의 매개 변수, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 및 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 와 0 개 이상의 선택적 매개 변수가 필요합니다 ( &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;선택적 매개 변수&quot;&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="aa9997ee07cb992ab27678e726038881ca04b2d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&lt;/code&gt; starts both hash references and blocks, so &lt;code&gt;map { ...&lt;/code&gt; could be either the start of map BLOCK LIST or map EXPR, LIST. Because Perl doesn't look ahead for the closing &lt;code&gt;}&lt;/code&gt; it has to take a guess at which it's dealing with based on what it finds just after the &lt;code&gt;{&lt;/code&gt;. Usually it gets it right, but if it doesn't it won't realize something is wrong until it gets to the &lt;code&gt;}&lt;/code&gt; and encounters the missing (or unexpected) comma. The syntax error will be reported close to the &lt;code&gt;}&lt;/code&gt;, but you'll need to change something near the &lt;code&gt;{&lt;/code&gt; such as using a unary &lt;code&gt;+&lt;/code&gt; or semicolon to give Perl some help:</source>
          <target state="translated">&lt;code&gt;{&lt;/code&gt; 해시 참조와 블록을 모두 시작하므로 &lt;code&gt;map { ...&lt;/code&gt; 은 (는) 맵 BLOCK LIST의 시작이거나 맵 EXPR, LIST 일 수 있습니다. 펄 앞서 폐쇄에 보이지 않기 때문에 &lt;code&gt;}&lt;/code&gt; 그것은 단지 이후에 발견 그것이 무엇을 기반으로 다루고있어하는 추측을 할 수있다 &lt;code&gt;{&lt;/code&gt; . 일반적으로 올바른 결과를 얻지 만 그렇지 않은 경우 &lt;code&gt;}&lt;/code&gt; 에 도달 하고 누락 된 (또는 예기치 않은) 쉼표를 발견 할 때까지 무언가 잘못되었음을 인식하지 못합니다 . 구문 오류는 &lt;code&gt;}&lt;/code&gt; 에 가깝게보고 되지만 Perl에게 도움을주기 위해 단항 &lt;code&gt;+&lt;/code&gt; 또는 세미콜론을 사용하는 등 &lt;code&gt;{&lt;/code&gt; 근처에서 무언가를 변경해야합니다 .</target>
        </trans-unit>
        <trans-unit id="0cd290126c35f35fc479ffe56d6b6254d337e17d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;}&lt;/code&gt;, then Perl uses the translations of</source>
          <target state="translated">&lt;code&gt;}&lt;/code&gt; , 그러면 Perl은</target>
        </trans-unit>
        <trans-unit id="21606782c65e44cac7afbb90977d8b6f82140e76" translate="yes" xml:space="preserve">
          <source>=</source>
          <target state="translated">=</target>
        </trans-unit>
        <trans-unit id="6094cc9ff960a73a386684d75df1b2bb88685e24" translate="yes" xml:space="preserve">
          <source>= -1, something interesting happens when it encounters an invalid character.</source>
          <target state="translated">= -1, 잘못된 문자를 만나면 흥미로운 일이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="95c890966f60daadce1620989a28ff084f43d99b" translate="yes" xml:space="preserve">
          <source>= 1. When</source>
          <target state="translated">= 1. 언제</target>
        </trans-unit>
        <trans-unit id="10deb21dfe010a9b190b8fab61389604b35082cd" translate="yes" xml:space="preserve">
          <source>= Encode::FB_HTMLCREF)</source>
          <target state="translated">= Encode::FB_HTMLCREF)</target>
        </trans-unit>
        <trans-unit id="6e18d4d666804ece9ce8365c94263f7a8e5f6c98" translate="yes" xml:space="preserve">
          <source>= Encode::FB_PERLQQ)</source>
          <target state="translated">= 인코딩 :: FB_PERLQQ)</target>
        </trans-unit>
        <trans-unit id="ccb3d0f118188166d4957f38ffdec132d7c720d9" translate="yes" xml:space="preserve">
          <source>= Encode::FB_XMLCREF)</source>
          <target state="translated">= Encode::FB_XMLCREF)</target>
        </trans-unit>
        <trans-unit id="ce244797a5393c0d083ac5c5cd677ded6dd73fb4" translate="yes" xml:space="preserve">
          <source>= [alias value]</source>
          <target state="translated">= [별칭 값]</target>
        </trans-unit>
        <trans-unit id="eaa5194c11bd01ab12e097ce99731d72f37c02c6" translate="yes" xml:space="preserve">
          <source>== 1.3</source>
          <target state="translated">== 1.3</target>
        </trans-unit>
        <trans-unit id="a7ebfe1c30e34e4f20325b1f93f5044c1926e1ed" translate="yes" xml:space="preserve">
          <source>=back doesn't take any parameters, but you said =back</source>
          <target state="translated">= back은 매개 변수를 사용하지 않지만 = back이라고 말했습니다.</target>
        </trans-unit>
        <trans-unit id="3812f8c5ebf6f7d3279508d78200275c68d4125d" translate="yes" xml:space="preserve">
          <source>=back without =over</source>
          <target state="translated">= 뒤로 = over</target>
        </trans-unit>
        <trans-unit id="2b7b65cb3ebd5ea6ad9a8426f1b32e5a4f6d3d3f" translate="yes" xml:space="preserve">
          <source>=begin</source>
          <target state="translated">=begin</target>
        </trans-unit>
        <trans-unit id="4d79569dbfe21a79189226f4869b7ea13a4ee892" translate="yes" xml:space="preserve">
          <source>=begin without a target?</source>
          <target state="translated">= 목표없이 시작?</target>
        </trans-unit>
        <trans-unit id="525cfb869c22e44fe640e7deffdfbcf3a81ac5a5" translate="yes" xml:space="preserve">
          <source>=cut found outside a pod block.</source>
          <target state="translated">= 포드 블록 외부에서 발견 된 절단.</target>
        </trans-unit>
        <trans-unit id="86f96a5fee4cc895a4f10ae462b41be3e191aa8a" translate="yes" xml:space="preserve">
          <source>=end</source>
          <target state="translated">=end</target>
        </trans-unit>
        <trans-unit id="a9247d8da17206c58d355978136b2d317b17f236" translate="yes" xml:space="preserve">
          <source>=for without a target?</source>
          <target state="translated">= 타겟없이?</target>
        </trans-unit>
        <trans-unit id="41a39a2fe941bc076bdccd939ab48a37eae4767c" translate="yes" xml:space="preserve">
          <source>=head</source>
          <target state="translated">=head</target>
        </trans-unit>
        <trans-unit id="0e4b392e21d1de949bac9b0aee0a7c137af80689" translate="yes" xml:space="preserve">
          <source>=item has no contents</source>
          <target state="translated">= 항목에 내용이 없습니다</target>
        </trans-unit>
        <trans-unit id="f531fb2fa54f44cc2ce6bd625537e0c6da8e2acb" translate="yes" xml:space="preserve">
          <source>=over is the last thing in the document?!</source>
          <target state="translated">= 문서의 마지막 항목은 끝났습니까?!</target>
        </trans-unit>
        <trans-unit id="35bb543dbcda97babdf2a89c6106c60ddb02fc24" translate="yes" xml:space="preserve">
          <source>=over on line</source>
          <target state="translated">= 온라인</target>
        </trans-unit>
        <trans-unit id="240bb3121b98782679e3097abdefad1a5776163f" translate="yes" xml:space="preserve">
          <source>=over should be: '=over' or '=over positive_number'</source>
          <target state="translated">= over는 '= over'또는 '= over positive_number'여야합니다.</target>
        </trans-unit>
        <trans-unit id="5deab936208074df56367974c408aedaeeae3ccb" translate="yes" xml:space="preserve">
          <source>=pod directives shouldn't be over one line long! Ignoring all</source>
          <target state="translated">= pod 지시문은 한 줄을 넘지 않아야합니다! 모두 무시</target>
        </trans-unit>
        <trans-unit id="7dd648593099ecae45709a4626d725e1810fbd4b" translate="yes" xml:space="preserve">
          <source>?....?= . The parts that RFC 2047 forbids to encode are left as is and long lines are folded within 76 bytes per line.</source>
          <target state="translated">? ....? =. RFC 2047에서 인코딩을 금지하는 부분은 그대로두고 긴 줄은 줄당 76 바이트 안에 접 힙니다.</target>
        </trans-unit>
        <trans-unit id="d1366a3067fee46eb14eef8f2f316e5f38df3c4f" translate="yes" xml:space="preserve">
          <source>?:\JUST_ADD\view.exe</source>
          <target state="translated">?:\JUST_ADD\view.exe</target>
        </trans-unit>
        <trans-unit id="b79900189f259297171d1e45127a682acacd788e" translate="yes" xml:space="preserve">
          <source>?=),</source>
          <target state="translated">?=),</target>
        </trans-unit>
        <trans-unit id="b2bb6d4e8459b319a09e5016032a5674f0a79ce5" translate="yes" xml:space="preserve">
          <source>?pattern?</source>
          <target state="translated">?pattern?</target>
        </trans-unit>
        <trans-unit id="4975709a996fa9b7e1ddb66e5180bce67c8d47ae" translate="yes" xml:space="preserve">
          <source>@+</source>
          <target state="translated">@+</target>
        </trans-unit>
        <trans-unit id="ce4580a08b328e135e8ec88a9d66dd4a93b8a8e8" translate="yes" xml:space="preserve">
          <source>@-</source>
          <target state="translated">@-</target>
        </trans-unit>
        <trans-unit id="754891735fac8c3066a07c36d22a346ee1c40ce8" translate="yes" xml:space="preserve">
          <source>@ARG</source>
          <target state="translated">@ARG</target>
        </trans-unit>
        <trans-unit id="ff2c17be6bd781f95fdd0bd9610749034c81b62d" translate="yes" xml:space="preserve">
          <source>@ARGS</source>
          <target state="translated">@ARGS</target>
        </trans-unit>
        <trans-unit id="1fe7c7755c50a190c523c3b1fcb23fe7a59fb1d9" translate="yes" xml:space="preserve">
          <source>@ARGV</source>
          <target state="translated">@ARGV</target>
        </trans-unit>
        <trans-unit id="f9dae5e61c647f83e0f197da0f3c40b160b62b37" translate="yes" xml:space="preserve">
          <source>@CARP_NOT</source>
          <target state="translated">@CARP_NOT</target>
        </trans-unit>
        <trans-unit id="ad2f81672f5d55e6e410552c159a1082a8356487" translate="yes" xml:space="preserve">
          <source>@DB::args</source>
          <target state="translated">@DB::args</target>
        </trans-unit>
        <trans-unit id="e0df44f8992230085a70d4f0818bc9554a496358" translate="yes" xml:space="preserve">
          <source>@DB::dbline</source>
          <target state="translated">@DB::dbline</target>
        </trans-unit>
        <trans-unit id="d2679734ab2cc1a1383b43572c627a2a4a786046" translate="yes" xml:space="preserve">
          <source>@EXPORT</source>
          <target state="translated">@EXPORT</target>
        </trans-unit>
        <trans-unit id="935219ed0644ee8e535456d71cde263f06c07d6f" translate="yes" xml:space="preserve">
          <source>@F</source>
          <target state="translated">@F</target>
        </trans-unit>
        <trans-unit id="39bf41a4cd083c6ae641220a6f38628a92b8c395" translate="yes" xml:space="preserve">
          <source>@INC</source>
          <target state="translated">@INC</target>
        </trans-unit>
        <trans-unit id="aea913a438cedea020e13eccaab58993130508dc" translate="yes" xml:space="preserve">
          <source>@ISA</source>
          <target state="translated">@ISA</target>
        </trans-unit>
        <trans-unit id="86e1dd598d092bf5b80c27bd2b6ae9c16e5e0c7d" translate="yes" xml:space="preserve">
          <source>@LAST_MATCH_END</source>
          <target state="translated">@LAST_MATCH_END</target>
        </trans-unit>
        <trans-unit id="f583b3cef6a6f01f053f249151fd446d413e0372" translate="yes" xml:space="preserve">
          <source>@LAST_MATCH_START</source>
          <target state="translated">@LAST_MATCH_START</target>
        </trans-unit>
        <trans-unit id="8ad7a99208be11331312728e281eba7694f68521" translate="yes" xml:space="preserve">
          <source>@Type_Order</source>
          <target state="translated">@Type_Order</target>
        </trans-unit>
        <trans-unit id="dee27aa9c706f064e962a3f3512b8abd08138be2" translate="yes" xml:space="preserve">
          <source>@_</source>
          <target state="translated">@_</target>
        </trans-unit>
        <trans-unit id="42d68da353f4ee79e3d0efb49913bbbc2bfb30e2" translate="yes" xml:space="preserve">
          <source>@a is an array with three elements, and each one is a reference to another array.</source>
          <target state="translated">@a는 세 개의 요소가있는 배열이며 각각은 다른 배열에 대한 참조입니다.</target>
        </trans-unit>
        <trans-unit id="adf32768466829ecfdd11f5e83805fb15ad821b6" translate="yes" xml:space="preserve">
          <source>@bool_or_empty = $e-&amp;gt;global</source>
          <target state="translated">@bool_or_empty = $ e-&amp;gt; 글로벌</target>
        </trans-unit>
        <trans-unit id="f5aaaa33622fe7cf15aa704511ebf7554d9e1555" translate="yes" xml:space="preserve">
          <source>@classes = $e-&amp;gt;FACET_TYPES()</source>
          <target state="translated">@ 클래스 = $ e-&amp;gt; FACET_TYPES ()</target>
        </trans-unit>
        <trans-unit id="21a86fc8bd3666cc1290cb0c02f063d0f0c5d455" translate="yes" xml:space="preserve">
          <source>@classes = Test2::Event-&amp;gt;FACET_TYPES()</source>
          <target state="translated">@classes = Test2::Event-&amp;gt;FACET_TYPES()</target>
        </trans-unit>
        <trans-unit id="a9827d0a65193417d4fa8b6a9aa912ea1f04e305" translate="yes" xml:space="preserve">
          <source>@ctx = $md5-&amp;gt;context</source>
          <target state="translated">@ctx = $ md5-&amp;gt; 컨텍스트</target>
        </trans-unit>
        <trans-unit id="2b77365339fd60f4f7b9dc5e67d7bc301973ddce" translate="yes" xml:space="preserve">
          <source>@dl_library_path</source>
          <target state="translated">@dl_library_path</target>
        </trans-unit>
        <trans-unit id="0b43abc97824c06b15af6b73f75f3917997f9c60" translate="yes" xml:space="preserve">
          <source>@dl_library_path is initialised to hold the list of 'normal' directories (</source>
          <target state="translated">@dl_library_path는 '정상'디렉토리 목록을 보유하도록 초기화됩니다 (</target>
        </trans-unit>
        <trans-unit id="9f0e33f7f6545d4dff610e53e6f0b71945335437" translate="yes" xml:space="preserve">
          <source>@dl_library_path should also be initialised with any other directories that can be determined from the environment at runtime (such as LD_LIBRARY_PATH for SunOS).</source>
          <target state="translated">@dl_library_path는 런타임시 환경에서 확인할 수있는 다른 디렉토리 (예 : SunOS의 경우 LD_LIBRARY_PATH)로 초기화해야합니다.</target>
        </trans-unit>
        <trans-unit id="daf7b1b2d89fc478ca04c0a7e85ecc11fb240ad7" translate="yes" xml:space="preserve">
          <source>@dl_librefs</source>
          <target state="translated">@dl_librefs</target>
        </trans-unit>
        <trans-unit id="15a8f1a478c081e49040591f8d8a7f42c88ac449" translate="yes" xml:space="preserve">
          <source>@dl_modules</source>
          <target state="translated">@dl_modules</target>
        </trans-unit>
        <trans-unit id="437544024eb7d70c6f42757950b2a94cd83916e2" translate="yes" xml:space="preserve">
          <source>@dl_require_symbols</source>
          <target state="translated">@dl_require_symbols</target>
        </trans-unit>
        <trans-unit id="45769939e624f551921b77e0dca5fb8dcb247e29" translate="yes" xml:space="preserve">
          <source>@dl_resolve_using</source>
          <target state="translated">@dl_resolve_using</target>
        </trans-unit>
        <trans-unit id="f8106890b4ff0b0b473007492009d3c775e7220f" translate="yes" xml:space="preserve">
          <source>@dl_shared_objects</source>
          <target state="translated">@dl_shared_objects</target>
        </trans-unit>
        <trans-unit id="749a8fa7c771df5d761814a312cd22538deb3176" translate="yes" xml:space="preserve">
          <source>@drivers = test2_ipc_drivers()</source>
          <target state="translated">@ 드라이버 = test2_ipc_drivers ()</target>
        </trans-unit>
        <trans-unit id="cb768ba2f4343df04d65b54e1e44a3adc7c75128" translate="yes" xml:space="preserve">
          <source>@errors = $e-&amp;gt;validate_facet_data(%params);</source>
          <target state="translated">@errors = $e-&amp;gt;validate_facet_data(%params);</target>
        </trans-unit>
        <trans-unit id="2403555a23c2936510d043a0b009358f7d5bafa3" translate="yes" xml:space="preserve">
          <source>@errors = $e-&amp;gt;validate_facet_data();</source>
          <target state="translated">@errors = $e-&amp;gt;validate_facet_data();</target>
        </trans-unit>
        <trans-unit id="7c99e5f673dab141d07b5c87f1e12b763a22b7a7" translate="yes" xml:space="preserve">
          <source>@errors = $e-&amp;gt;validate_facet_data(\%facets, %params);</source>
          <target state="translated">@errors = $e-&amp;gt;validate_facet_data(\%facets, %params);</target>
        </trans-unit>
        <trans-unit id="9d30f6e44aeb339351d84ebd7b1884475b877654" translate="yes" xml:space="preserve">
          <source>@errors = Test2::Event-&amp;gt;validate_facet_data(%params);</source>
          <target state="translated">@errors = Test2::Event-&amp;gt;validate_facet_data(%params);</target>
        </trans-unit>
        <trans-unit id="27eac66c830b57faa08b90a583c5a9254e21460d" translate="yes" xml:space="preserve">
          <source>@errors = Test2::Event-&amp;gt;validate_facet_data(\%facets, %params);</source>
          <target state="translated">@errors = Test2::Event-&amp;gt;validate_facet_data(\%facets, %params);</target>
        </trans-unit>
        <trans-unit id="b55dd52d8b6eddbc15cc8f30ba9623fcc805828c" translate="yes" xml:space="preserve">
          <source>@events = $ipc-&amp;gt;cull($hid)</source>
          <target state="translated">@ 이벤트 = $ ipc-&amp;gt; cull ($ hid)</target>
        </trans-unit>
        <trans-unit id="8084a2ae39ff7cb9d811f1712dc1602a663ee9e4" translate="yes" xml:space="preserve">
          <source>@formatters = test2_formatters()</source>
          <target state="translated">@formatters = test2_formatters()</target>
        </trans-unit>
        <trans-unit id="c2c4bdd65f5d5393c4b65063b2f6d490d0ed9481" translate="yes" xml:space="preserve">
          <source>@hubs = $stack-&amp;gt;all</source>
          <target state="translated">@hubs = $stack-&amp;gt;all</target>
        </trans-unit>
        <trans-unit id="62e174ab278b42b42f4292927ee5370df64f9370" translate="yes" xml:space="preserve">
          <source>@int_or_empty = $e-&amp;gt;terminate</source>
          <target state="translated">@int_or_empty = $ e-&amp;gt; 종료</target>
        </trans-unit>
        <trans-unit id="c13ba7c337ace12468d7413245c28893a95eaa72" translate="yes" xml:space="preserve">
          <source>@list = $class-&amp;gt;Test2::Util::HashBase::attr_list()</source>
          <target state="translated">@list = $class-&amp;gt;Test2::Util::HashBase::attr_list()</target>
        </trans-unit>
        <trans-unit id="15e60d5d52bb406bfa3ad86f61d6ecec4e535528" translate="yes" xml:space="preserve">
          <source>@list = Test2::Util::HashBase::attr_list($class)</source>
          <target state="translated">@list = Test2::Util::HashBase::attr_list($class)</target>
        </trans-unit>
        <trans-unit id="c50e636a2b33daee08498b2ec237c8cf65cae7cb" translate="yes" xml:space="preserve">
          <source>@list = requires( MODULE );</source>
          <target state="translated">@list = requires (MODULE);</target>
        </trans-unit>
        <trans-unit id="0b0562e456636b39bfe73900954fa1570225ecc1" translate="yes" xml:space="preserve">
          <source>@list = test2_list_context_acquire_callbacks()</source>
          <target state="translated">@list = test2_list_context_acquire_callbacks()</target>
        </trans-unit>
        <trans-unit id="a17cd013fc295d9e892c7cc1b5b85f22fc71e42a" translate="yes" xml:space="preserve">
          <source>@list = test2_list_context_init_callbacks()</source>
          <target state="translated">@list = test2_list_context_init_callbacks()</target>
        </trans-unit>
        <trans-unit id="a572837e26cb97b7ebbd08a4152e27c673ddc55d" translate="yes" xml:space="preserve">
          <source>@list = test2_list_context_release_callbacks()</source>
          <target state="translated">@list = test2_list_context_release_callbacks()</target>
        </trans-unit>
        <trans-unit id="ad9240e5c70594cb2051ed4f4f418585863cd7d0" translate="yes" xml:space="preserve">
          <source>@list = test2_list_exit_callbacks()</source>
          <target state="translated">@list = test2_list_exit_callbacks()</target>
        </trans-unit>
        <trans-unit id="a67aa2e57876f6c06b83b6205d552dc9dbe3c942" translate="yes" xml:space="preserve">
          <source>@list = test2_list_post_load_callbacks()</source>
          <target state="translated">@list = test2_list_post_load_callbacks()</target>
        </trans-unit>
        <trans-unit id="b630c5fabe7c03aee28faeca7dbc849609efe5de" translate="yes" xml:space="preserve">
          <source>@list = test2_list_pre_subtest_callbacks()</source>
          <target state="translated">@list = test2_list_pre_subtest_callbacks()</target>
        </trans-unit>
        <trans-unit id="ea639b29e92b8ed3a63688b25f32407745db27b0" translate="yes" xml:space="preserve">
          <source>@optype</source>
          <target state="translated">@optype</target>
        </trans-unit>
        <trans-unit id="2b5fee7ea42b8b01c834815b53c906e15aa53eaf" translate="yes" xml:space="preserve">
          <source>@os_flavor is the style of operating system this is, usually corresponding to the MM_*.pm file we're using.</source>
          <target state="translated">@os_flavor는 운영 체제 스타일이며 일반적으로 우리가 사용하는 MM _ *. pm 파일에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="afb0f810173e11fd936bc2500d009de431bffbf7" translate="yes" xml:space="preserve">
          <source>@plan = $e-&amp;gt;sets_plan</source>
          <target state="translated">@plan = $e-&amp;gt;sets_plan</target>
        </trans-unit>
        <trans-unit id="334c8ab27f10d0374b95344a707e26226f7fa18c" translate="yes" xml:space="preserve">
          <source>@results is an array of test result hashes.</source>
          <target state="translated">@results는 테스트 결과 해시의 배열입니다.</target>
        </trans-unit>
        <trans-unit id="23ad7cdc98082f9250ec3afd4e2caed14f583e94" translate="yes" xml:space="preserve">
          <source>@specialsv_name</source>
          <target state="translated">@specialsv_name</target>
        </trans-unit>
        <trans-unit id="bce99a33d22d4c2dffd2eeac8a8e4c5d9894b283" translate="yes" xml:space="preserve">
          <source>@suffixes work as in &lt;code&gt;fileparse()&lt;/code&gt; except all regex metacharacters are quoted.</source>
          <target state="translated">@suffixes 는 모든 정규식 메타 문자가 인용되는 것을 제외하고 &lt;code&gt;fileparse()&lt;/code&gt; 에서와 같이 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="317b12ea1477d9e9b136839fa7ac896988adc6ac" translate="yes" xml:space="preserve">
          <source>@test_files</source>
          <target state="translated">@test_files</target>
        </trans-unit>
        <trans-unit id="2563b52b2c674ef6e847cc65202d47f3d3604f00" translate="yes" xml:space="preserve">
          <source>@test_libs are run in alphabetical order.</source>
          <target state="translated">@test_libs는 알파벳 순서로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="33c41cdd560e2632c4cb6a1fb1bf4b8576d6aa71" translate="yes" xml:space="preserve">
          <source>@{^CAPTURE}</source>
          <target state="translated">@{^CAPTURE}</target>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="313a7fe99a568a50c330c2db6c46b2f1743f3e95" translate="yes" xml:space="preserve">
          <source>A &quot;balanced-bracket-delimited substring&quot; is a substring bounded by matched brackets, such that any other (left or right) delimiter bracket</source>
          <target state="translated">&quot;밸런스 대괄호로 구분 된 하위 문자열&quot;은 일치하는 대괄호로 묶인 하위 문자열이므로 다른 (왼쪽 또는 오른쪽) 구분 기호 대괄호</target>
        </trans-unit>
        <trans-unit id="f251b2b1824e87d1320c2c41c33a42711d82807a" translate="yes" xml:space="preserve">
          <source>A &quot;delimiter bracket&quot; is a bracket in list of delimiters passed as &lt;code&gt;extract_bracketed&lt;/code&gt; 's second argument. Delimiter brackets are specified by giving either the left or right (or both!) versions of the required bracket(s). Note that the order in which two or more delimiter brackets are specified is not significant.</source>
          <target state="translated">&quot;구분자 괄호&quot;는 &lt;code&gt;extract_bracketed&lt;/code&gt; 의 두 번째 인수 로 전달 된 분리 문자 목록의 괄호입니다 . 구분 기호 대괄호는 필요한 대괄호의 왼쪽 또는 오른쪽 (또는 둘 다!) 버전을 제공하여 지정됩니다. 두 개 이상의 구분 기호가 지정된 순서는 중요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="526fbc5865ea8795168a507fd915095cce0c32be" translate="yes" xml:space="preserve">
          <source>A &quot;delimiter bracket&quot; is a bracket in list of delimiters passed as &lt;code&gt;extract_bracketed&lt;/code&gt;'s second argument. Delimiter brackets are specified by giving either the left or right (or both!) versions of the required bracket(s). Note that the order in which two or more delimiter brackets are specified is not significant.</source>
          <target state="translated">&quot;구분자 대괄호&quot;는 &lt;code&gt;extract_bracketed&lt;/code&gt; 의 두 번째 인수 로 전달 된 분리 문자 목록의 대괄호입니다 . 구분자 대괄호는 필요한 대괄호의 왼쪽 또는 오른쪽 (또는 둘 다!) 버전을 제공하여 지정됩니다. 둘 이상의 구분 기호가 지정된 순서는 중요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fe875008ceb9916a221027985bdd7156792bab2e" translate="yes" xml:space="preserve">
          <source>A &quot;drive&quot; that does not have a file system. This can be a drive letter that hasn't been defined or a drive letter assigned to a partition that hasn't been formatted yet.</source>
          <target state="translated">파일 시스템이없는 &quot;드라이브&quot;. 정의되지 않은 드라이브 문자이거나 아직 포맷되지 않은 파티션에 할당 된 드라이브 문자 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8b2d100a2729032ea387e666018839a1da0e8c93" translate="yes" xml:space="preserve">
          <source>A &quot;layer&quot; is composed of two parts:</source>
          <target state="translated">&quot;계층&quot;은 두 부분으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="756b059631bfde6d82f3c717b79716728efe722a" translate="yes" xml:space="preserve">
          <source>A &quot;macro&quot; 1 signals that the constant is always defined, so the &lt;code&gt;#if&lt;/code&gt; /&lt;code&gt;#endif&lt;/code&gt; test is omitted.</source>
          <target state="translated">&quot;매크로&quot;1은 상수가 항상 정의되었음을 나타내므로 &lt;code&gt;#if&lt;/code&gt; / &lt;code&gt;#endif&lt;/code&gt; 테스트는 생략됩니다.</target>
        </trans-unit>
        <trans-unit id="93bdc8ebabd9b8481383b7e876c2d37c090ff594" translate="yes" xml:space="preserve">
          <source>A &quot;macro&quot; 1 signals that the constant is always defined, so the &lt;code&gt;#if&lt;/code&gt;/&lt;code&gt;#endif&lt;/code&gt; test is omitted.</source>
          <target state="translated">&quot;매크로&quot;1은 상수가 항상 정의되어 있음을 나타내 므로 &lt;code&gt;#if&lt;/code&gt; / &lt;code&gt;#endif&lt;/code&gt; 테스트가 생략됩니다.</target>
        </trans-unit>
        <trans-unit id="1cb023ba582a7a015faea89ec15dc62641da6a16" translate="yes" xml:space="preserve">
          <source>A &quot;picture&quot; line giving the format for one output line.</source>
          <target state="translated">하나의 출력 라인에 대한 형식을 제공하는 &quot;그림&quot;라인.</target>
        </trans-unit>
        <trans-unit id="15236a61eccb3430b3222ecc1658fa660d7fb563" translate="yes" xml:space="preserve">
          <source>A &quot;ram disk&quot; or memory-resident virtual file system used for high-speed access to small amounts of temporary file space.</source>
          <target state="translated">소량의 임시 파일 공간에 대한 고속 액세스에 사용되는 &quot;램 디스크&quot;또는 메모리 상주 가상 파일 시스템입니다.</target>
        </trans-unit>
        <trans-unit id="4bc2e7f2e34238799324926fcafe5bd02066c9e0" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;constructor&amp;rdquo; for a &lt;b&gt;referent&lt;/b&gt; that isn&amp;rsquo;t really an &lt;b&gt;object&lt;/b&gt;, like an anonymous array or a hash (or a sonata, for that matter). For example, a pair of braces acts as a composer for a hash, and a pair of brackets acts as a composer for an array. See the section &amp;ldquo;Creating References&amp;rdquo; in Camel chapter 8, &amp;ldquo;References&amp;rdquo;.</source>
          <target state="translated">실제로 &lt;b&gt;대상&lt;/b&gt; 이 아닌 &lt;b&gt;참조&lt;/b&gt; 를 위한 &quot;생성자&quot;&lt;b&gt;&lt;/b&gt;익명 배열이나 해시 (또는 그 문제에 대한 소나타)와 같이 . 예를 들어, 한 쌍의 중괄호는 해시의 작곡가 역할을하고 한 쌍의 괄호는 배열의 작곡가 역할을합니다. Camel 8 장, &quot;참조&quot;의 &quot;참조 생성&quot;섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5775eb71cdc3ede48fee03da70ab6b5ce985e619" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;page&amp;rdquo; from the manuals, typically accessed via the</source>
          <target state="translated">매뉴얼의 &quot;페이지&quot;, 일반적으로</target>
        </trans-unit>
        <trans-unit id="6a5409d36bd9ef539cfe14ba7c067e7ccfc9c3b3" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;pointer value&amp;rdquo;, which is Perl Internals Talk for a &lt;code&gt;char*&lt;/code&gt; .</source>
          <target state="translated">&quot;포인터 값&quot;은 &lt;code&gt;char*&lt;/code&gt; 대한 Perl Internals Talk입니다 .</target>
        </trans-unit>
        <trans-unit id="ef91c8339eba64aba8bfb16207fcf550f326e17c" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;pointer value&amp;rdquo;, which is Perl Internals Talk for a &lt;code&gt;char*&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;char*&lt;/code&gt; 대한 Perl Internals Talk 인 &quot;포인터 값&quot; .</target>
        </trans-unit>
        <trans-unit id="34a072b3ed907a60cfcde96be105ecbc6bbfc2bd" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;version&amp;rdquo; or &amp;ldquo;vector&amp;rdquo; &lt;b&gt;string&lt;/b&gt; specified with a &lt;code&gt;v&lt;/code&gt; followed by a series of decimal integers in dot notation, for instance, &lt;code&gt;v1.20.300.4000&lt;/code&gt; . Each number turns into a &lt;b&gt;character&lt;/b&gt; with the specified ordinal value. (The &lt;code&gt;v&lt;/code&gt; is optional when there are at least three integers.)</source>
          <target state="translated">&lt;code&gt;v&lt;/code&gt; 로 지정된 &quot;version&quot;또는 &quot;vector&quot; &lt;b&gt;문자열&lt;/b&gt; , 점 표기법으로 된 일련의 10 진수 정수 (예 : &lt;code&gt;v1.20.300.4000&lt;/code&gt; ) . 각 숫자는 지정된 서수 값 을 가진 &lt;b&gt;문자&lt;/b&gt; 로 바뀝니다 . ( &lt;code&gt;v&lt;/code&gt; 는 3 개 이상의 정수가있는 경우 선택 사항입니다.)&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="f44fbc3181b1ca1a0035e4d075bfe5736c6c89a4" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;version&amp;rdquo; or &amp;ldquo;vector&amp;rdquo; &lt;b&gt;string&lt;/b&gt; specified with a &lt;code&gt;v&lt;/code&gt; followed by a series of decimal integers in dot notation, for instance, &lt;code&gt;v1.20.300.4000&lt;/code&gt;. Each number turns into a &lt;b&gt;character&lt;/b&gt; with the specified ordinal value. (The &lt;code&gt;v&lt;/code&gt; is optional when there are at least three integers.)</source>
          <target state="translated">A &quot;버전&quot;또는 &quot;벡터&quot; &lt;b&gt;문자열&lt;/b&gt; 로 지정 &lt;code&gt;v&lt;/code&gt; 진수 정수에 점 표기법, 예를 들어, 일련의 다음 &lt;code&gt;v1.20.300.4000&lt;/code&gt; . 각 숫자는 지정된 서수 값 을 가진 &lt;b&gt;문자&lt;/b&gt; 로 바뀝니다 . ( 최소 3 개의 정수가있는 경우 &lt;code&gt;v&lt;/code&gt; 는 선택 사항입니다.)</target>
        </trans-unit>
        <trans-unit id="9b175ccd55b8cb24fce37d2a53ada08e5f179945" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;wildcard&amp;rdquo; match on &lt;b&gt;filenames&lt;/b&gt;. See the &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">에 &quot;와일드 카드&quot;일치하는 &lt;b&gt;파일 이름&lt;/b&gt; . &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; 기능을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0f35ef12127d73c5a356b6b9c82b522f5ce5d165" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;wildcard&amp;rdquo; match on &lt;b&gt;filenames&lt;/b&gt;. See the &lt;code&gt;glob&lt;/code&gt; function.</source>
          <target state="translated">&lt;b&gt;파일 이름&lt;/b&gt; 에 대한 &quot;와일드 카드&quot;일치 . &lt;code&gt;glob&lt;/code&gt; 함수를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="785d257f2e5d0030320c5f3a55e4dd08614b8fda" translate="yes" xml:space="preserve">
          <source>A '=cut' directive found in the middle of non-POD</source>
          <target state="translated">비 -POD 중간에서 발견 된 '= cut'지시문</target>
        </trans-unit>
        <trans-unit id="084adee5c9094841f2603af0ff0ac058d61aaa79" translate="yes" xml:space="preserve">
          <source>A 'my $pack_lexical' statement makes the variable $pack_lexical local _only_ to the file up to the &lt;code&gt;__DATA__&lt;/code&gt; token. Subroutines declared elsewhere _cannot_ see these types of variables, just as if you declared subroutines in the package but in another file, they cannot see these variables.</source>
          <target state="translated">'my $ pack_lexical'문은 변수 $ pack_lexical local _only_를 &lt;code&gt;__DATA__&lt;/code&gt; 토큰 까지 파일로 만듭니다. 다른 곳에서 선언 된 서브 루틴은 패키지에서 서브 루틴을 선언 한 것처럼 다른 파일에서 이러한 변수를 볼 수없는 것처럼 이러한 유형의 변수를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd982dc10b95832dad0fd4ffab7cc84fc2034769" translate="yes" xml:space="preserve">
          <source>A (discouraged from use) synonym is &lt;code&gt;isALNUMC&lt;/code&gt; (where the &lt;code&gt;C&lt;/code&gt; suffix means this corresponds to the C language alphanumeric definition). Also there are the variants &lt;code&gt;isALNUMC_A&lt;/code&gt;, &lt;code&gt;isALNUMC_L1&lt;/code&gt;&lt;code&gt;isALNUMC_LC&lt;/code&gt;, and &lt;code&gt;isALNUMC_LC_uvchr&lt;/code&gt;.</source>
          <target state="translated">A (사용 금지) 동의어는 &lt;code&gt;isALNUMC&lt;/code&gt; 입니다 (여기서 &lt;code&gt;C&lt;/code&gt; 접미사는 C 언어 영숫자 정의에 해당함을 의미합니다). 또한 &lt;code&gt;isALNUMC_A&lt;/code&gt; , &lt;code&gt;isALNUMC_L1&lt;/code&gt; &lt;code&gt;isALNUMC_LC&lt;/code&gt; 및 &lt;code&gt;isALNUMC_LC_uvchr&lt;/code&gt; 변형이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ededfcca2c8bd4e7eb6351a42ed32e72537533cd" translate="yes" xml:space="preserve">
          <source>A (file)glob evaluates its (embedded) argument only when it is starting a new list. All values must be read before it will start over. In list context, this isn't important because you automatically get them all anyway. However, in scalar context the operator returns the next value each time it's called, or &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; when the list has run out. As with filehandle reads, an automatic &lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; is generated when the glob occurs in the test part of a &lt;code&gt;while&lt;/code&gt; , because legal glob returns (for example, a file called</source>
          <target state="translated">(파일) 글로브는 새 목록을 시작할 때만 (내장) 인수를 평가합니다. 다시 시작하기 전에 모든 값을 읽어야합니다. 목록 컨텍스트에서 자동으로 가져 오기 때문에 중요하지 않습니다. 그러나 스칼라 컨텍스트에서 연산자는 호출 될 때 마다 다음 값을 반환하거나 목록이 부족하면 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 반환합니다 . filehandle 읽기와 마찬가지로 , Legal glob이 리턴하는 (예 : 파일을 호출하여) glob가 &lt;code&gt;while&lt;/code&gt; 테스트 파트에서 발생할 때 자동 &lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; 가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="f613941228a4b2edbfa60c354ef431255d44d42e" translate="yes" xml:space="preserve">
          <source>A (file)glob evaluates its (embedded) argument only when it is starting a new list. All values must be read before it will start over. In list context, this isn't important because you automatically get them all anyway. However, in scalar context the operator returns the next value each time it's called, or &lt;code&gt;undef&lt;/code&gt; when the list has run out. As with filehandle reads, an automatic &lt;code&gt;defined&lt;/code&gt; is generated when the glob occurs in the test part of a &lt;code&gt;while&lt;/code&gt;, because legal glob returns (for example, a file called</source>
          <target state="translated">(파일) 글롭은 새 목록을 시작할 때만 (포함 된) 인수를 평가합니다. 다시 시작하기 전에 모든 값을 읽어야합니다. 목록 컨텍스트에서는 어쨌든 모든 항목을 자동으로 가져 오므로 중요하지 않습니다. 그러나 스칼라 컨텍스트에서 연산자는 호출 될 때 마다 다음 값을 반환하거나 목록이 다 &lt;code&gt;undef&lt;/code&gt; 반환합니다 . filehandle 읽기와 마찬가지로 적법한 glob이 반환 (예를 들어, 다음과 같은 파일)이 반환되기 때문에 &lt;code&gt;while&lt;/code&gt; 의 테스트 부분에서 glob이 발생하면 자동 &lt;code&gt;defined&lt;/code&gt; 가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="cc6e3b905b08fc1fe3e1757559d1f8c510fb5e73" translate="yes" xml:space="preserve">
          <source>A (very) lightweight introduction in the use of the perl debugger, and a pointer to existing, deeper sources of information on the subject of debugging perl programs.</source>
          <target state="translated">Perl 디버거 사용에 대한 (매우) 가벼운 소개와 perl 프로그램 디버깅 주제에 관한 기존의 더 깊은 정보 소스에 대한 포인터.</target>
        </trans-unit>
        <trans-unit id="4b33de80b0daa04de9d0537f91968aca3441bb5a" translate="yes" xml:space="preserve">
          <source>A *</source>
          <target state="translated">ㅏ *</target>
        </trans-unit>
        <trans-unit id="61ac1d8d5b46f4c8322e0f808eeb9e2cdf4d41ab" translate="yes" xml:space="preserve">
          <source>A 64-bit native application will run much more efficiently on Itanium hardware.</source>
          <target state="translated">64 비트 기본 응용 프로그램은 Itanium 하드웨어에서 훨씬 더 효율적으로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="3898ac399c4bda023fcfcb7cda3f39d85b95f13a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#my-VARLIST&quot;&gt;&lt;code&gt;my&lt;/code&gt;&lt;/a&gt; declares the listed variables to be local (lexically) to the enclosing block, file, or &lt;a href=&quot;#eval-EXPR&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;. If more than one variable is listed, the list must be placed in parentheses.</source>
          <target state="translated">A는 &lt;a href=&quot;#my-VARLIST&quot;&gt; &lt;code&gt;my&lt;/code&gt; &lt;/a&gt; 나열된 변수는 둘러싸 블록, 파일 또는로 (어휘) 지역으로 선언 &lt;a href=&quot;#eval-EXPR&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt; . 둘 이상의 변수가 나열되면 목록을 괄호로 묶어야합니다.</target>
        </trans-unit>
        <trans-unit id="4f93189e72cc0f75abc0b3834c32b379484b25ed" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;DB_File&lt;/b&gt; wrapper that has the ability to lock and unlock the database while it is being used. Avoids the tie-before-flock problem by simply re-tie-ing the database when you get or drop a lock. Because of the flexibility in dropping and re-acquiring the lock in the middle of a session, this can be massaged into a system that will work with long updates and/or reads if the application follows the hints in the POD documentation.</source>
          <target state="translated">&lt;b&gt;DB_File의&lt;/b&gt; 잠금 기능을 가지고 있으며 사용되는 동안 데이터베이스 잠금을 해제 래퍼. 잠금을 설정하거나 해제 할 때 단순히 데이터베이스를 다시 연결하여 플로킹 전에 문제를 방지합니다. 세션 중간에 잠금을 삭제하고 다시 획득 할 수있는 유연성으로 인해 응용 프로그램이 POD 설명서의 힌트를 따르는 경우 긴 업데이트 및 / 또는 읽기 작업을 수행하는 시스템에 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1b51e848321e977ce5d13c2818c175d0f41effb3" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;DB_File&lt;/b&gt; wrapper which creates copies of the database file for read access, so that you have a kind of a multiversioning concurrent read system. However, updates are still serial. Use for databases where reads may be lengthy and consistency problems may occur.</source>
          <target state="translated">다중 액세스 버전의 동시 읽기 시스템을 갖도록 읽기 액세스를 위해 데이터베이스 파일의 사본을 작성 하는 &lt;b&gt;DB_File&lt;/b&gt; 랩퍼. 그러나 업데이트는 여전히 직렬입니다. 읽기 시간이 길고 일관성 문제가 발생할 수있는 데이터베이스에 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="a028dc9e0b2f7388284cb78c959a40269b50fa27" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;Pod parser&lt;/b&gt; is a module meant for parsing Pod (regardless of whether this involves calling callbacks or building a parse tree or directly formatting it). A &lt;b&gt;Pod formatter&lt;/b&gt; (or &lt;b&gt;Pod translator&lt;/b&gt;) is a module or program that converts Pod to some other format (HTML, plaintext, TeX, PostScript, RTF). A &lt;b&gt;Pod processor&lt;/b&gt; might be a formatter or translator, or might be a program that does something else with the Pod (like counting words, scanning for index points, etc.).</source>
          <target state="translated">&lt;b&gt;포드 파서&lt;/b&gt; (에 관계없이이 그것을 서식 직접 콜백을 호출하거나 구문 분석 트리를 구축하거나 포함 여부) 포드를 구문 분석에 대한 의미 모듈입니다. &lt;b&gt;포드 포맷터&lt;/b&gt; (또는 &lt;b&gt;포드 번역기는&lt;/b&gt; ) 모듈이나 프로그램이 다른 형식 (HTML, 일반 텍스트, 텍, 포스트 스크립트, RTF)로 변환 포드. &lt;b&gt;포드 프로세서는&lt;/b&gt; 포맷터 또는 번역가 수 있습니다, 또는 포드 (등 계수 즉, 인덱스 포인트 스캔, 등)과 다른 작업을 수행하는 프로그램이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="75e0b45072c8738547ff8a165f7f145bc64c09c0" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;bit shift&lt;/b&gt; that divides a number by some power of 2.</source>
          <target state="translated">&lt;b&gt;비트 시프트&lt;/b&gt; (2)의 일부 전력으로 다수 분할한다.</target>
        </trans-unit>
        <trans-unit id="12a4a3ed2cee1e69194024985900709da0279c32" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;bit shift&lt;/b&gt; that multiplies the number by some power of 2.</source>
          <target state="translated">&lt;b&gt;비트 시프트&lt;/b&gt; 곱셈 (2)의 일부에 의한 전력의 수.</target>
        </trans-unit>
        <trans-unit id="835a63b1a5a99de9e5e4d92a77a7c97441fd9cb5" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;blank line&lt;/b&gt; is a line consisting entirely of zero or more spaces (ASCII 32) or tabs (ASCII 9), and terminated by a newline or end-of-file. A &lt;b&gt;non-blank line&lt;/b&gt; is a line containing one or more characters other than space or tab (and terminated by a newline or end-of-file).</source>
          <target state="translated">&lt;b&gt;공백 라인은&lt;/b&gt; 완전히 제로 이상의 공백 (ASCII 32) 또는 탭 (ASCII 9)로 이루어진 선이고, 개행 또는 파일의 마지막 종료. &lt;b&gt;비 빈 줄&lt;/b&gt; (줄 바꿈 또는 파일의 끝으로 및 종료) 공백이나 탭이 아닌 하나 개 이상의 문자를 포함하는 라인입니다.</target>
        </trans-unit>
        <trans-unit id="3728bf609a9f402c616e07291d2f146bcd65679f" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;character class&lt;/b&gt; allows a set of possible characters, rather than just a single character, to match at a particular point in a regex. Character classes are denoted by brackets &lt;code&gt;[...]&lt;/code&gt; , with the set of characters to be possibly matched inside. Here are some examples:</source>
          <target state="translated">&lt;b&gt;문자 클래스는&lt;/b&gt; 정규식에서 특정 지점에서 일치가 아니라 단지 하나의 문자보다는 가능한 문자 집합을 할 수 있습니다. 문자 클래스는 대괄호 &lt;code&gt;[...]&lt;/code&gt; 로 표시되며 , 문자 세트와 일치 할 가능성이 있습니다. 여기 몇 가지 예가 있어요.</target>
        </trans-unit>
        <trans-unit id="88667454d168bdf07729fef4c08a10e0dab39990" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;character class&lt;/b&gt; allows a set of possible characters, rather than just a single character, to match at a particular point in a regex. There are a number of different types of character classes, but usually when people use this term, they are referring to the type described in this section, which are technically called &quot;Bracketed character classes&quot;, because they are denoted by brackets &lt;code&gt;[...]&lt;/code&gt;, with the set of characters to be possibly matched inside. But we'll drop the &quot;bracketed&quot; below to correspond with common usage. Here are some examples of (bracketed) character classes:</source>
          <target state="translated">&lt;b&gt;문자 클래스는&lt;/b&gt; 정규식에서 특정 지점에서 일치가 아니라 단지 하나의 문자보다는 가능한 문자 집합을 할 수 있습니다. 다양한 유형의 문자 클래스가 있지만 일반적으로 사람들이이 용어를 사용할 때이 섹션에 설명 된 유형을 참조하며, 이는 기술적으로 &quot;대괄호 문자 클래스&quot;라고합니다. 괄호로 표시되기 때문입니다 &lt;code&gt;[...]&lt;/code&gt; , 내부에서 일치 할 수있는 문자 집합이 있습니다. 그러나 우리는 일반적인 사용에 대응하기 위해 아래 &quot;괄호&quot;를 삭제합니다. 다음은 (괄호로 묶인) 문자 클래스의 몇 가지 예입니다.</target>
        </trans-unit>
        <trans-unit id="669c2da4b19c631926975e69d3d84a786a63080d" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;character&lt;/b&gt; or &lt;b&gt;string&lt;/b&gt; that keeps two surrounding strings from being confused with each other. The &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; function works on separators. Not to be confused with &lt;b&gt;delimiters&lt;/b&gt; or &lt;b&gt;terminators&lt;/b&gt;. The &amp;ldquo;or&amp;rdquo; in the previous sentence separated the two alternatives.</source>
          <target state="translated">두 개의 주변 줄이 서로 혼동되지 않도록 하는 &lt;b&gt;문자&lt;/b&gt; 또는 &lt;b&gt;문자열&lt;/b&gt; 입니다. &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; 기능은 분리에서 작동합니다. &lt;b&gt;구분자&lt;/b&gt; 또는 &lt;b&gt;종결 자&lt;/b&gt; 와 혼동하지 마십시오.&lt;b&gt;&lt;/b&gt; . 앞의 문장에서&amp;ldquo;또는&amp;rdquo;은 두 가지 대안을 분리했습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
