<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="8a90f73c9c3213efb315136981dc33afcfd35395" translate="yes" xml:space="preserve">
          <source>For example, to set the top-of-form format for more than one output channel, you might do the following:</source>
          <target state="translated">예를 들어, 둘 이상의 출력 채널에 대해 최상위 형식을 설정하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="34785567060beba9064c79bba5e329b38586b3f4" translate="yes" xml:space="preserve">
          <source>For example, to specify that &lt;code&gt;Data::Dumper&lt;/code&gt; is &lt;code&gt;required&lt;/code&gt; during the &lt;code&gt;test&lt;/code&gt; phase, this entry would appear in the distribution metadata:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66259dd1f85a2d02b33a9e596d8f1d7b0ac5e796" translate="yes" xml:space="preserve">
          <source>For example, to start a traditional, non-OO module called Some::Module, create a file called</source>
          <target state="translated">예를 들어 Some :: Module이라는 기존의 비 OO 모듈을 시작하려면라는 파일을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="f942067356d5cfcd3d6efe175d21ba418d7f8528" translate="yes" xml:space="preserve">
          <source>For example, to trap an interrupt signal, set up a handler like this:</source>
          <target state="translated">예를 들어, 인터럽트 신호를 트랩하려면 다음과 같이 핸들러를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="609c77df9a9f27a81f6780eb9739b385f2194bff" translate="yes" xml:space="preserve">
          <source>For example, to watch how perl executes your program, use &lt;b&gt;-Dtls&lt;/b&gt;. Another nice value is &lt;b&gt;-Dx&lt;/b&gt;, which lists your compiled syntax tree, and &lt;b&gt;-Dr&lt;/b&gt; displays compiled regular expressions; the format of the output is explained in &lt;a href=&quot;perldebguts&quot;&gt;perldebguts&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92fd80c8ef445eeb8d54adb5b6fe2e04ca178559" translate="yes" xml:space="preserve">
          <source>For example, use either</source>
          <target state="translated">예를 들어</target>
        </trans-unit>
        <trans-unit id="d635e44965151905b6a24229063bbd77703e71e7" translate="yes" xml:space="preserve">
          <source>For example, utf8 can be used for code points that don't exist in Unicode, like 9999999, but if you encode that to UTF-8, you get a substitution character (by default; see &lt;a href=&quot;encode#Handling-Malformed-Data&quot;&gt;&quot;Handling Malformed Data&quot; in Encode&lt;/a&gt; for more ways of dealing with this.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e046e6073a1c24e29ced7bc19e8dd56e44b12d30" translate="yes" xml:space="preserve">
          <source>For example, utf8 can be used for code points that don't exist in Unicode, like 9999999, but if you encode that to UTF-8, you get a substitution character (by default; see &lt;a href=&quot;encode#Handling-Malformed-Data&quot;&gt;Handling Malformed Data in Encode&lt;/a&gt; for more ways of dealing with this.)</source>
          <target state="translated">예를 들어 utf8은 9999999와 같이 유니 코드에 존재하지 않는 코드 포인트에 사용될 수 있지만 UTF-8로 인코딩하면 대체 문자를 얻습니다 (기본적 &lt;a href=&quot;encode#Handling-Malformed-Data&quot;&gt;으로 인코딩 된 형식이 잘못된 데이터 처리&lt;/a&gt; 방법 참조) 이것을 다루는.)</target>
        </trans-unit>
        <trans-unit id="d4bde612bc298204724714a89e628fae1a0918cc" translate="yes" xml:space="preserve">
          <source>For example, version 1.04 of Foo::Bar becomes Foo-Bar-1.04.</source>
          <target state="translated">예를 들어 Foo :: Bar 버전 1.04는 Foo-Bar-1.04가됩니다.</target>
        </trans-unit>
        <trans-unit id="266d34ca9cde516548f250156e2acb53b624a8d2" translate="yes" xml:space="preserve">
          <source>For example, we could create an &lt;code&gt;File::MP3&lt;/code&gt; class which &lt;b&gt;inherits&lt;/b&gt; from &lt;code&gt;File&lt;/code&gt; . An &lt;code&gt;File::MP3&lt;/code&gt;&lt;b&gt;is-a&lt;/b&gt;</source>
          <target state="translated">예를 들어 &lt;code&gt;File::MP3&lt;/code&gt; 에서 &lt;b&gt;상속&lt;/b&gt; 되는 &lt;code&gt;File&lt;/code&gt; :: MP3 클래스를 만들 수 있습니다 . &lt;code&gt;File::MP3&lt;/code&gt; &lt;b&gt;이다-A&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="697c94de6dad335c9a3c7c0fc24c6b78d35ab0a6" translate="yes" xml:space="preserve">
          <source>For example, we could create an &lt;code&gt;File::MP3&lt;/code&gt; class which &lt;b&gt;inherits&lt;/b&gt; from &lt;code&gt;File&lt;/code&gt;. An &lt;code&gt;File::MP3&lt;/code&gt;&lt;b&gt;is-a&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65f8c076e86f7baf2e3727bbe95178fdd7a2c0fd" translate="yes" xml:space="preserve">
          <source>For example, when examining the file</source>
          <target state="translated">예를 들어 파일을 검사 할 때</target>
        </trans-unit>
        <trans-unit id="cb3609c45bff9184744275676cb2ee1d5fe3a104" translate="yes" xml:space="preserve">
          <source>For example, when looking for</source>
          <target state="translated">예를 들어</target>
        </trans-unit>
        <trans-unit id="adf9a9b9f8a7a1cec63a21f932af18f70eee8f7f" translate="yes" xml:space="preserve">
          <source>For example, when processing a file like</source>
          <target state="translated">예를 들어, 다음과 같은 파일을 처리 할 때</target>
        </trans-unit>
        <trans-unit id="cba8aca8bb23f147ba6dc9dc1178ec821ae0173e" translate="yes" xml:space="preserve">
          <source>For example, when you have a NFD/NFKD string, you can get its NFC/NFKC string, by saying</source>
          <target state="translated">예를 들어 NFD / NFKD 문자열이있는 경우 NFC / NFKC 문자열을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="91c7f19bed899b4adde0ad47a00ae7fce66a506f" translate="yes" xml:space="preserve">
          <source>For example, when you have a list of NFD/NFKD strings, you can get the concatenated NFD/NFKD string from them, by saying</source>
          <target state="translated">예를 들어 NFD / NFKD 문자열 목록이 있으면 다음과 같이 말하여 연결된 NFD / NFKD 문자열을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3034cdf7d48aa118a30ad1afd4515c72ccfcc722" translate="yes" xml:space="preserve">
          <source>For example, whenever you call Perl's built-in &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt;&lt;/code&gt; function from the package &lt;code&gt;DB&lt;/code&gt; , the arguments that the corresponding stack frame was called with are copied to the &lt;code&gt;@DB::args&lt;/code&gt; array. These mechanisms are enabled by calling Perl with the &lt;b&gt;-d&lt;/b&gt; switch. Specifically, the following additional features are enabled (cf. &lt;a href=&quot;perlvar#%24%5eP&quot;&gt;$^P in perlvar&lt;/a&gt;):</source>
          <target state="translated">예를 들어, 패키지 &lt;code&gt;DB&lt;/code&gt; 에서 Perl의 내장 &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt;&lt;/code&gt; 함수 를 호출 할 때마다 해당 스택 프레임이 호출 된 &lt;code&gt;@DB::args&lt;/code&gt; 가 @DB :: args 배열에 복사됩니다 . 이러한 메커니즘은 &lt;b&gt;-d&lt;/b&gt; 스위치 와 함께 Perl을 호출하여 활성화됩니다 . 특히 다음과 같은 추가 기능이 활성화됩니다 ( &lt;a href=&quot;perlvar#%24%5eP&quot;&gt;perlvar의 $ ^ P&lt;/a&gt; 참조 ).&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="623437115e4aa7c68c30efdbb9b22f8f31d44a16" translate="yes" xml:space="preserve">
          <source>For example, whenever you call Perl's built-in &lt;code&gt;caller&lt;/code&gt; function from the package &lt;code&gt;DB&lt;/code&gt;, the arguments that the corresponding stack frame was called with are copied to the &lt;code&gt;@DB::args&lt;/code&gt; array. These mechanisms are enabled by calling Perl with the &lt;b&gt;-d&lt;/b&gt; switch. Specifically, the following additional features are enabled (cf. &lt;a href=&quot;perlvar#%24%5EP&quot;&gt;&quot;$^P&quot; in perlvar&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="496a45f3d9650508d730c766abbe2dc2efdff27d" translate="yes" xml:space="preserve">
          <source>For example, with AnyEvent:</source>
          <target state="translated">예를 들어 AnyEvent의 경우 :</target>
        </trans-unit>
        <trans-unit id="653b5e44cfe751cd25897569156a2f935df052fc" translate="yes" xml:space="preserve">
          <source>For example, you can say</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ca852a66a066546e548044450d4b46b8bedbcc" translate="yes" xml:space="preserve">
          <source>For example, you can use this to make sure your filter program managed to finish its output without filling up the disk:</source>
          <target state="translated">예를 들어,이를 사용하여 필터 프로그램이 디스크를 채우지 않고 출력을 완료하도록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f78ed184c7f600686b51e6745d5640d97f8a709" translate="yes" xml:space="preserve">
          <source>For example, you can write code in EUC-JP as follows:</source>
          <target state="translated">예를 들어 EUC-JP에서 다음과 같이 코드를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="564fb0ce50134466df15da997cc5a96ad7e5b1e1" translate="yes" xml:space="preserve">
          <source>For example, you don't have to store individual bits in an array (which would mean that you're wasting a lot of space). To convert an array of bits to a string, use &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec()&lt;/a&gt;&lt;/code&gt; to set the right bits. This sets &lt;code&gt;$vec&lt;/code&gt; to have bit N set only if &lt;code&gt;$ints[N]&lt;/code&gt; was set:</source>
          <target state="translated">예를 들어, 배열에 개별 비트를 저장할 필요가 없습니다 (많은 공간을 낭비하고 있음을 의미 함). 비트 배열을 문자열로 변환하려면 &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec()&lt;/a&gt;&lt;/code&gt; 를 사용하여 올바른 비트를 설정하십시오. 이 세트 &lt;code&gt;$vec&lt;/code&gt; 경우 가지고 비트는 N에만 설정 &lt;code&gt;$ints[N]&lt;/code&gt; 설정 하였다 :</target>
        </trans-unit>
        <trans-unit id="1d0408195abc493ede0c8180cf0b6c8cb82dfb84" translate="yes" xml:space="preserve">
          <source>For example, you don't have to store individual bits in an array (which would mean that you're wasting a lot of space). To convert an array of bits to a string, use &lt;code&gt;vec()&lt;/code&gt; to set the right bits. This sets &lt;code&gt;$vec&lt;/code&gt; to have bit N set only if &lt;code&gt;$ints[N]&lt;/code&gt; was set:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="813a7c651fd4ec83cb1750d36dc11353bd2e7e9e" translate="yes" xml:space="preserve">
          <source>For example, you'll usually use &lt;code&gt;SOCK_STREAM&lt;/code&gt; with a &lt;code&gt;tcp&lt;/code&gt; connection and &lt;code&gt;SOCK_DGRAM&lt;/code&gt; with a &lt;code&gt;udp&lt;/code&gt; connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a9a1afba08c0e0323d4da1c781504ee13c4f37" translate="yes" xml:space="preserve">
          <source>For example...</source>
          <target state="translated">예를 들어 ...</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6547b0cdb06529c1189b765285dbdd443f754cdc" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;^(?&amp;gt;a*)ab&lt;/code&gt; will never match, since &lt;code&gt;(?&amp;gt;a*)&lt;/code&gt; (anchored at the beginning of string, as above) will match</source>
          <target state="translated">예를 들어, &lt;code&gt;^(?&amp;gt;a*)ab&lt;/code&gt; 는 절대로 일치하지 않습니다. &lt;code&gt;(?&amp;gt;a*)&lt;/code&gt; (위와 같이 문자열의 시작 부분에 고정됨)가 일치하므로</target>
        </trans-unit>
        <trans-unit id="163b6b4e5b46ae5e8f49caca2490012167a4aad8" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;perldoc -f &lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; .</source>
          <target state="translated">예를 들면 다음과 같습니다. &lt;code&gt;perldoc -f &lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7b6e3774455172beea48c497d0e06febe4bd5b99" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;perldoc -f sort&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb8c8d525664be9a2c42a89c1ccb7db9f4d46fb" translate="yes" xml:space="preserve">
          <source>For example: consider the following paragraphs:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1312a2f41c8de401877c05e89632223e0e5cb8c4" translate="yes" xml:space="preserve">
          <source>For examples of MRO implementations, see &lt;code&gt;S_mro_get_linear_isa_c3()&lt;/code&gt; and the &lt;code&gt;BOOT:&lt;/code&gt; section of</source>
          <target state="translated">MRO 구현의 예는 &lt;code&gt;S_mro_get_linear_isa_c3()&lt;/code&gt; 및 &lt;code&gt;BOOT:&lt;/code&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0d9e192f1a62478459e4e0a2eb7cdee0674f974c" translate="yes" xml:space="preserve">
          <source>For examples on how to use &lt;code&gt;ExtUtils::Embed&lt;/code&gt; for building C/C++ applications with embedded perl, see &lt;a href=&quot;../perlembed&quot;&gt;perlembed&lt;/a&gt;.</source>
          <target state="translated">Perl이 포함 된 C / C ++ 애플리케이션을 빌드 하기 위해 &lt;code&gt;ExtUtils::Embed&lt;/code&gt; 를 사용하는 방법에 대한 예제는 &lt;a href=&quot;../perlembed&quot;&gt;perlembed를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="349b22e61a7e4cc221bcc78746d9013fcaa415a0" translate="yes" xml:space="preserve">
          <source>For examples on how to use &lt;code&gt;ExtUtils::Embed&lt;/code&gt; for building C/C++ applications with embedded perl, see &lt;a href=&quot;perlembed&quot;&gt;perlembed&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="378dadb78c987366679861c816c6c5a9b14a9ad8" translate="yes" xml:space="preserve">
          <source>For failure, &lt;code&gt;0&lt;/code&gt; is returned and &lt;code&gt;fileLastError()&lt;/code&gt; and &lt;code&gt;$^E&lt;/code&gt; are set to the reason for the failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8df1fb453c312718721149b4f60d025d43cdae6c" translate="yes" xml:space="preserve">
          <source>For floating-point conversions (&lt;code&gt;e f g E F G&lt;/code&gt; ), numbers are usually assumed to be the default floating-point size on your platform (double or long double), but you can force &quot;long double&quot; with &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt; , or &lt;code&gt;ll&lt;/code&gt; if your platform supports them. You can find out whether your Perl supports long doubles via &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;:</source>
          <target state="translated">부동 소수점 변환 ( &lt;code&gt;e f g E F G&lt;/code&gt; )의 경우 일반적으로 숫자는 플랫폼의 기본 부동 소수점 크기 (더블 또는 롱 더블)로 가정되지만 플랫폼의 경우 &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;L&lt;/code&gt; 또는 &lt;code&gt;ll&lt;/code&gt; 로 &quot;long double&quot;을 강제 할 수 있습니다 그들을 지원합니다. Perl이 &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt; 를 통해 long double을 지원하는지 여부를 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fe9c280207fb4b3b605495f5af12f4167164cdba" translate="yes" xml:space="preserve">
          <source>For floating-point conversions (&lt;code&gt;e f g E F G&lt;/code&gt; ), numbers are usually assumed to be the default floating-point size on your platform (double or long double), but you can force &quot;long double&quot; with &lt;code&gt;&lt;a href=&quot;q&quot;&gt;q&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt; , or &lt;code&gt;ll&lt;/code&gt; if your platform supports them. You can find out whether your Perl supports long doubles via &lt;a href=&quot;../config&quot;&gt;Config&lt;/a&gt;:</source>
          <target state="translated">부동 소수점 변환 ( &lt;code&gt;e f g E F G&lt;/code&gt; )의 경우 일반적으로 숫자는 플랫폼의 기본 부동 소수점 크기 (더블 또는 롱 더블)로 가정되지만 플랫폼의 경우 &lt;code&gt;&lt;a href=&quot;q&quot;&gt;q&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;L&lt;/code&gt; 또는 &lt;code&gt;ll&lt;/code&gt; 로 &quot;long double&quot;을 강제 할 수 있습니다 그들을 지원합니다. Perl이 &lt;a href=&quot;../config&quot;&gt;Config&lt;/a&gt; 를 통해 long double을 지원하는지 여부를 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="57700d09e10e47eac6752c49c7e4515e38039c3f" translate="yes" xml:space="preserve">
          <source>For floating-point conversions (&lt;code&gt;e f g E F G&lt;/code&gt;), numbers are usually assumed to be the default floating-point size on your platform (double or long double), but you can force &quot;long double&quot; with &lt;code&gt;q&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, or &lt;code&gt;ll&lt;/code&gt; if your platform supports them. You can find out whether your Perl supports long doubles via &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f97a8713dc6247cd63e1e9b5c0cf0c7f46e17030" translate="yes" xml:space="preserve">
          <source>For full generality, use the &lt;a href=&quot;perlapi#DO_UTF8&quot;&gt;&lt;code&gt;DO_UTF8&lt;/code&gt;&lt;/a&gt; macro to see if the string in an SV is to be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a4ecd0b9d06146725ffb188a087bc4525a300e" translate="yes" xml:space="preserve">
          <source>For full generality, use the &lt;a href=&quot;perlapi#DO_UTF8&quot;&gt;DO_UTF8 in perlapi&lt;/a&gt; macro to see if the string in an SV is to be</source>
          <target state="translated">완전한 일반성을 위해 &lt;a href=&quot;perlapi#DO_UTF8&quot;&gt;perlapi&lt;/a&gt; 매크로 의 DO_UTF8을 사용하여 SV의 문자열이</target>
        </trans-unit>
        <trans-unit id="a42ce7d9b2566dc0c41503ddc1469a4bc77d0e4c" translate="yes" xml:space="preserve">
          <source>For function arguments declared as &lt;code&gt;const&lt;/code&gt; , omit the const attribute in the generated XS code.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; 로 선언 된 함수 인수의 경우 생성 된 XS 코드에서 const 속성을 생략하십시오.</target>
        </trans-unit>
        <trans-unit id="f000cefb45f68574b68f74871acce392cb38614b" translate="yes" xml:space="preserve">
          <source>For function arguments declared as &lt;code&gt;const&lt;/code&gt;, omit the const attribute in the generated XS code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="919681d57047d475516f4557861f4178d615833e" translate="yes" xml:space="preserve">
          <source>For functions that can be used in either a scalar or list context, nonabortive failure is generally indicated in scalar context by returning the undefined value, and in list context by returning the empty list.</source>
          <target state="translated">스칼라 또는 목록 컨텍스트에서 사용할 수있는 함수의 경우 일반적으로 정의되지 않은 값을 반환하여 스칼라 컨텍스트와 비 목록을 반환하여 목록 컨텍스트에서 비 수용성 실패를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="a8194e9e00b7e6776d9b2ab496effbd877072994" translate="yes" xml:space="preserve">
          <source>For further details on attribute lists and their manipulation, see &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt; and &lt;a href=&quot;Attribute::Handlers&quot;&gt;Attribute::Handlers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05f6d928eacb78e02e398b53b981e094d0e39ce" translate="yes" xml:space="preserve">
          <source>For further details on attribute lists and their manipulation, see &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt; and &lt;a href=&quot;attribute/handlers&quot;&gt;Attribute::Handlers&lt;/a&gt;.</source>
          <target state="translated">속성 목록 및 조작에 대한 자세한 내용은 &lt;a href=&quot;attributes&quot;&gt;속성&lt;/a&gt; 및 &lt;a href=&quot;attribute/handlers&quot;&gt;Attribute :: Handlers를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="50dbbde71e3c0e2cc7647eee17d89f78c487f1da" translate="yes" xml:space="preserve">
          <source>For further details see &lt;a href=&quot;../perltie&quot;&gt;perltie&lt;/a&gt;, &lt;a href=&quot;#tied-VARIABLE&quot;&gt;tied VARIABLE&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../perltie&quot;&gt;pertilie&lt;/a&gt; , &lt;a href=&quot;#tied-VARIABLE&quot;&gt;tied VARIABLE을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="33bb704b9ac00a4031f5331184a871c97b34fa8e" translate="yes" xml:space="preserve">
          <source>For further details see &lt;a href=&quot;perltie&quot;&gt;perltie&lt;/a&gt;, &lt;a href=&quot;#tied-VARIABLE&quot;&gt;&lt;code&gt;tied&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc5472ebf03889c66f3f1d848108e2b6c25b85d0" translate="yes" xml:space="preserve">
          <source>For further details see &lt;a href=&quot;perltie&quot;&gt;perltie&lt;/a&gt;, &lt;a href=&quot;#tied-VARIABLE&quot;&gt;tied VARIABLE&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;perltie&quot;&gt;pertilie&lt;/a&gt; , &lt;a href=&quot;#tied-VARIABLE&quot;&gt;tied VARIABLE을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="48c784a1d33771e0a06fd5b4b963ce0c5344b49a" translate="yes" xml:space="preserve">
          <source>For further information about the categories, consult</source>
          <target state="translated">범주에 대한 자세한 내용은 다음을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a5a3ac10f1bd1eab74de1980b9acc96fbed7e3c8" translate="yes" xml:space="preserve">
          <source>For further information about the categories, consult &lt;a href=&quot;http://man.he.net/man3/setlocale&quot;&gt;setlocale(3)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3848a5517719cc9d86dc98e4a87784d1b62f6be" translate="yes" xml:space="preserve">
          <source>For further information on how to conduct a proper installation consult the INSTALL file that comes with the perl source and the README file for your platform.</source>
          <target state="translated">올바른 설치 방법에 대한 자세한 내용은 perl 소스와 함께 제공되는 INSTALL 파일 및 해당 플랫폼의 README 파일을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="286f6d03eb38f41af10af9ceaae5f308348e5947" translate="yes" xml:space="preserve">
          <source>For further information, please see &lt;a href=&quot;File::Spec::Unix&quot;&gt;File::Spec::Unix&lt;/a&gt;, &lt;a href=&quot;File::Spec::Mac&quot;&gt;File::Spec::Mac&lt;/a&gt;, &lt;a href=&quot;File::Spec::OS2&quot;&gt;File::Spec::OS2&lt;/a&gt;, &lt;a href=&quot;File::Spec::Win32&quot;&gt;File::Spec::Win32&lt;/a&gt;, or &lt;a href=&quot;File::Spec::VMS&quot;&gt;File::Spec::VMS&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c80b9972cc66010ab54cedb561b534cc47e943" translate="yes" xml:space="preserve">
          <source>For further information, please see &lt;a href=&quot;spec/unix&quot;&gt;File::Spec::Unix&lt;/a&gt;, &lt;a href=&quot;spec/mac&quot;&gt;File::Spec::Mac&lt;/a&gt;, &lt;a href=&quot;spec/os2&quot;&gt;File::Spec::OS2&lt;/a&gt;, &lt;a href=&quot;spec/win32&quot;&gt;File::Spec::Win32&lt;/a&gt;, or &lt;a href=&quot;spec/vms&quot;&gt;File::Spec::VMS&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;spec/unix&quot;&gt;File :: Spec :: Unix&lt;/a&gt; , &lt;a href=&quot;spec/mac&quot;&gt;File :: Spec :: Mac&lt;/a&gt; , &lt;a href=&quot;spec/os2&quot;&gt;File :: Spec :: OS2&lt;/a&gt; , &lt;a href=&quot;spec/win32&quot;&gt;File :: Spec :: Win32&lt;/a&gt; 또는 &lt;a href=&quot;spec/vms&quot;&gt;File :: Spec :: VMS를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5edf28281d94a2b5960cec422d6d02a62443a7d6" translate="yes" xml:space="preserve">
          <source>For general suggestions, try requesting &lt;code&gt;CPU&lt;/code&gt; or &lt;code&gt;memory&lt;/code&gt; .</source>
          <target state="translated">일반적인 제안 사항은 &lt;code&gt;CPU&lt;/code&gt; 또는 &lt;code&gt;memory&lt;/code&gt; 요청하십시오 .</target>
        </trans-unit>
        <trans-unit id="c361489f1d8a4b518a9bf46f9337a5ef8568cfce" translate="yes" xml:space="preserve">
          <source>For general suggestions, try requesting &lt;code&gt;CPU&lt;/code&gt; or &lt;code&gt;memory&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d357e5de00d555e2358554ff76cd929d52fe2111" translate="yes" xml:space="preserve">
          <source>For globbing (see &lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;, &lt;a href=&quot;perlop#I%2fO-Operators&quot;&gt;I/O Operators in perlop&lt;/a&gt;) (obsolete? Perl uses builtin globbing nowadays...).</source>
          <target state="translated">globbing ( &lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt; , &lt;a href=&quot;perlop#I%2fO-Operators&quot;&gt;perlop의 I / O 연산자&lt;/a&gt; 참조 ) (사용되지 않습니까? Perl은 현재 내장 globbing을 사용합니다 ...)</target>
        </trans-unit>
        <trans-unit id="0926bc644c67686e752b5638b1b35a45cc03ef2a" translate="yes" xml:space="preserve">
          <source>For globbing (see &lt;a href=&quot;perlfunc#glob&quot;&gt;&quot;glob&quot; in perlfunc&lt;/a&gt;, &lt;a href=&quot;perlop#I%2FO-Operators&quot;&gt;&quot;I/O Operators&quot; in perlop&lt;/a&gt;) (obsolete? Perl uses builtin globbing nowadays...).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58503f8e65271fa8fe04c22bfeefeb43b3d52ae2" translate="yes" xml:space="preserve">
          <source>For greater flexibility use &lt;code&gt;constant_types()&lt;/code&gt; , &lt;code&gt;C_constant&lt;/code&gt; and &lt;code&gt;XS_constant&lt;/code&gt; , with which &lt;code&gt;WriteConstants&lt;/code&gt; is implemented.</source>
          <target state="translated">유연성 사용 들어 &lt;code&gt;constant_types()&lt;/code&gt; , &lt;code&gt;C_constant&lt;/code&gt; 및 &lt;code&gt;XS_constant&lt;/code&gt; 는 ,되는 &lt;code&gt;WriteConstants&lt;/code&gt; 이 구현된다.</target>
        </trans-unit>
        <trans-unit id="58eb72e94a31aa72b0eef623ad6e59f7d30f9713" translate="yes" xml:space="preserve">
          <source>For greater flexibility use &lt;code&gt;constant_types()&lt;/code&gt;, &lt;code&gt;C_constant&lt;/code&gt; and &lt;code&gt;XS_constant&lt;/code&gt;, with which &lt;code&gt;WriteConstants&lt;/code&gt; is implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de33270f54dfe208dcaa472e2a23a92f8da154b" translate="yes" xml:space="preserve">
          <source>For hashes there is a specialized hook that gives control over hash keys (but not values). This hook calls &lt;code&gt;PERL_MAGIC_uvar&lt;/code&gt; 'get' magic if the &quot;set&quot; function in the &lt;code&gt;ufuncs&lt;/code&gt; structure is NULL. The hook is activated whenever the hash is accessed with a key specified as an &lt;code&gt;SV&lt;/code&gt; through the functions &lt;code&gt;hv_store_ent&lt;/code&gt; , &lt;code&gt;hv_fetch_ent&lt;/code&gt; , &lt;code&gt;hv_delete_ent&lt;/code&gt; , and &lt;code&gt;hv_exists_ent&lt;/code&gt; . Accessing the key as a string through the functions without the &lt;code&gt;..._ent&lt;/code&gt; suffix circumvents the hook. See &lt;a href=&quot;hash/util/fieldhash#GUTS&quot;&gt;GUTS in Hash::Util::FieldHash&lt;/a&gt; for a detailed description.</source>
          <target state="translated">해시에는 해시 키를 제어 할 수있는 특수한 후크가 있습니다 (값은 아님). 이 후크 는 &lt;code&gt;ufuncs&lt;/code&gt; 구조 의 &quot;set&quot;함수 가 NULL 인 경우 &lt;code&gt;PERL_MAGIC_uvar&lt;/code&gt; 'get'매직을 호출 합니다. 후크는 &lt;code&gt;hv_store_ent&lt;/code&gt; , &lt;code&gt;hv_fetch_ent&lt;/code&gt; , &lt;code&gt;hv_delete_ent&lt;/code&gt; 및 &lt;code&gt;hv_exists_ent&lt;/code&gt; 함수를 통해 &lt;code&gt;SV&lt;/code&gt; 로 지정된 키로 해시에 액세스 할 때마다 활성화됩니다 . &lt;code&gt;..._ent&lt;/code&gt; 접미사가 없는 함수를 통해 키로 문자열에 액세스하면 후크가 우회됩니다. 자세한 설명 &lt;a href=&quot;hash/util/fieldhash#GUTS&quot;&gt;은 Hash :: Util :: FieldHash의 GUTS를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4435e15de572e78225f7353bb7b295d6337506cb" translate="yes" xml:space="preserve">
          <source>For hashes there is a specialized hook that gives control over hash keys (but not values). This hook calls &lt;code&gt;PERL_MAGIC_uvar&lt;/code&gt; 'get' magic if the &quot;set&quot; function in the &lt;code&gt;ufuncs&lt;/code&gt; structure is NULL. The hook is activated whenever the hash is accessed with a key specified as an &lt;code&gt;SV&lt;/code&gt; through the functions &lt;code&gt;hv_store_ent&lt;/code&gt;, &lt;code&gt;hv_fetch_ent&lt;/code&gt;, &lt;code&gt;hv_delete_ent&lt;/code&gt;, and &lt;code&gt;hv_exists_ent&lt;/code&gt;. Accessing the key as a string through the functions without the &lt;code&gt;..._ent&lt;/code&gt; suffix circumvents the hook. See &lt;a href=&quot;Hash::Util::FieldHash#GUTS&quot;&gt;&quot;GUTS&quot; in Hash::Util::FieldHash&lt;/a&gt; for a detailed description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb6f3123625a805e9190d1f930f29ca28155c14a" translate="yes" xml:space="preserve">
          <source>For hexadecimal and binary numbers, the exponent must be separated from the significand (mantissa) by the letter &quot;p&quot; or &quot;P&quot;, not &quot;e&quot; or &quot;E&quot; as with decimal numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8be86894a1183cb1339fe47f94cdbb010d7d4c9e" translate="yes" xml:space="preserve">
          <source>For historical reasons, Exporter supplies a &lt;code&gt;require_version&lt;/code&gt; method that simply delegates to &lt;code&gt;VERSION&lt;/code&gt; . Originally, before &lt;code&gt;UNIVERSAL::VERSION&lt;/code&gt; existed, Exporter would call &lt;code&gt;require_version&lt;/code&gt; .</source>
          <target state="translated">역사적 이유로 Exporter는 단순히 &lt;code&gt;VERSION&lt;/code&gt; 에 위임 하는 &lt;code&gt;require_version&lt;/code&gt; 메소드를 제공합니다 . 원래 &lt;code&gt;UNIVERSAL::VERSION&lt;/code&gt; 존재 하기 전에 Exporter는 &lt;code&gt;require_version&lt;/code&gt; 을 호출했습니다 .</target>
        </trans-unit>
        <trans-unit id="2d70e455613f0da8cacb6a89c2c812775670a6a4" translate="yes" xml:space="preserve">
          <source>For historical reasons, Exporter supplies a &lt;code&gt;require_version&lt;/code&gt; method that simply delegates to &lt;code&gt;VERSION&lt;/code&gt;. Originally, before &lt;code&gt;UNIVERSAL::VERSION&lt;/code&gt; existed, Exporter would call &lt;code&gt;require_version&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600f113a4040010b3033d7854bba8509d5ed27cc" translate="yes" xml:space="preserve">
          <source>For historical reasons, if &lt;code&gt;pat&lt;/code&gt; is null then the contents of &lt;code&gt;ERRSV&lt;/code&gt; (&lt;code&gt;$@&lt;/code&gt; ) will be used as an error message or object instead of building an error message from arguments. If you want to throw a non-string object, or build an error message in an SV yourself, it is preferable to use the &lt;a href=&quot;#croak_sv&quot;&gt;croak_sv&lt;/a&gt; function, which does not involve clobbering &lt;code&gt;ERRSV&lt;/code&gt; .</source>
          <target state="translated">역사적 이유로 &lt;code&gt;pat&lt;/code&gt; 이 null이면 &lt;code&gt;ERRSV&lt;/code&gt; ( &lt;code&gt;$@&lt;/code&gt; ) 의 내용은 인수에서 오류 메시지를 작성하는 대신 오류 메시지 또는 객체로 사용됩니다. 문자열이 아닌 객체를 던지거나 SV에서 직접 오류 메시지를 작성하려면 &lt;a href=&quot;#croak_sv&quot;&gt;ERRSV 클로버 링을&lt;/a&gt; 포함하지 않는 croak_sv 함수 를 사용하는 것이 &lt;code&gt;ERRSV&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4ae811500c0692faac786014e5e865516579e405" translate="yes" xml:space="preserve">
          <source>For historical reasons, if &lt;code&gt;pat&lt;/code&gt; is null then the contents of &lt;code&gt;ERRSV&lt;/code&gt; (&lt;code&gt;$@&lt;/code&gt;) will be used as an error message or object instead of building an error message from arguments. If you want to throw a non-string object, or build an error message in an SV yourself, it is preferable to use the &lt;a href=&quot;#croak_sv&quot;&gt;&quot;croak_sv&quot;&lt;/a&gt; function, which does not involve clobbering &lt;code&gt;ERRSV&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2929ab3e04a6c6477fd6c19f7e1c7cc73d91eebf" translate="yes" xml:space="preserve">
          <source>For historical reasons, if you omit the list, &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt; is used as the format; to use FILEHANDLE without a list, you must use a bareword filehandle like &lt;code&gt;FH&lt;/code&gt;, not an indirect one like &lt;code&gt;$fh&lt;/code&gt;. However, this will rarely do what you want; if &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt; contains formatting codes, they will be replaced with the empty string and a warning will be emitted if &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt; are enabled. Just use &lt;a href=&quot;#print-FILEHANDLE-LIST&quot;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt; if you want to print the contents of &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56608d17c68748711bf4ce7481c7c0f04ebd25a" translate="yes" xml:space="preserve">
          <source>For historical reasons, if you omit the list, &lt;code&gt;$_&lt;/code&gt; is used as the format; to use FILEHANDLE without a list, you must use a real filehandle like &lt;code&gt;FH&lt;/code&gt; , not an indirect one like &lt;code&gt;$fh&lt;/code&gt; . However, this will rarely do what you want; if $_ contains formatting codes, they will be replaced with the empty string and a warning will be emitted if warnings are enabled. Just use &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; if you want to print the contents of $_.</source>
          <target state="translated">역사적 이유로 목록을 생략하면 &lt;code&gt;$_&lt;/code&gt; 가 형식으로 사용됩니다. 목록없이 FILEHANDLE을 사용하려면 &lt;code&gt;$fh&lt;/code&gt; 와 같은 간접 파일이 아니라 &lt;code&gt;FH&lt;/code&gt; 와 같은 실제 파일 핸들을 사용해야합니다 . 그러나 이것은 당신이 원하는 것을 거의하지 않을 것입니다. $ _에 형식 코드가 포함되어 있으면 빈 문자열로 바뀌고 경고가 활성화되면 경고가 표시됩니다. 그냥 사용하는 &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; 당신이 $의 내용을 인쇄하려면 _.</target>
        </trans-unit>
        <trans-unit id="e79e19888efce3854a52e5d2a8daf4acff793786" translate="yes" xml:space="preserve">
          <source>For historical reasons, if you omit the list, &lt;code&gt;$_&lt;/code&gt; is used as the format; to use FILEHANDLE without a list, you must use a real filehandle like &lt;code&gt;FH&lt;/code&gt; , not an indirect one like &lt;code&gt;$fh&lt;/code&gt; . However, this will rarely do what you want; if $_ contains formatting codes, they will be replaced with the empty string and a warning will be emitted if warnings are enabled. Just use &lt;code&gt;&lt;a href=&quot;print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; if you want to print the contents of $_.</source>
          <target state="translated">역사적 이유로 목록을 생략하면 &lt;code&gt;$_&lt;/code&gt; 가 형식으로 사용됩니다. 목록없이 FILEHANDLE을 사용하려면 &lt;code&gt;$fh&lt;/code&gt; 와 같은 간접 파일이 아니라 &lt;code&gt;FH&lt;/code&gt; 와 같은 실제 파일 핸들을 사용해야합니다 . 그러나 이것은 당신이 원하는 것을 거의하지 않을 것입니다. $ _에 형식 코드가 포함되어 있으면 빈 문자열로 바뀌고 경고가 활성화되면 경고가 표시됩니다. 그냥 사용하는 &lt;code&gt;&lt;a href=&quot;print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; 당신이 $의 내용을 인쇄하려면 _.</target>
        </trans-unit>
        <trans-unit id="8685cc82ad46d01d9c5b4bb2267ef13097a60367" translate="yes" xml:space="preserve">
          <source>For historical reasons, some values work on almost every system supported by Perl: 0 means read-only, 1 means write-only, and 2 means read/write. We know that these values do</source>
          <target state="translated">역사적 이유로 일부 값은 Perl이 지원하는 거의 모든 시스템에서 작동합니다. 0은 읽기 전용, 1은 쓰기 전용, 2는 읽기 / 쓰기를 의미합니다. 우리는 이러한 가치가</target>
        </trans-unit>
        <trans-unit id="13de78042df7d486da0987893d3eef529f8f05a4" translate="yes" xml:space="preserve">
          <source>For historical reasons, the &lt;code&gt;=value&lt;/code&gt; is optional, but defaults to 1 only where it is safe to do so--that is, mostly for Boolean options. It is always better to assign a specific value using &lt;code&gt;=&lt;/code&gt; . The &lt;code&gt;option&lt;/code&gt; can be abbreviated, but for clarity probably should not be. Several options can be set together. See &lt;a href=&quot;#Configurable-Options&quot;&gt;Configurable Options&lt;/a&gt; for a list of these.</source>
          <target state="translated">역사적인 이유로 &lt;code&gt;=value&lt;/code&gt; 는 선택 사항이지만 안전한 경우에만, 즉 대부분 부울 옵션의 경우에만 1로 기본 설정됩니다. &lt;code&gt;=&lt;/code&gt; 를 사용하여 특정 값을 할당하는 것이 좋습니다 . 이 &lt;code&gt;option&lt;/code&gt; 은 약어로 표시 할 수 있지만 명확성을 위해 사용해서는 안됩니다. 여러 옵션을 함께 설정할 수 있습니다. 이들의 목록은 &lt;a href=&quot;#Configurable-Options&quot;&gt;구성 가능한 옵션&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9d2a9b63f9ed2cfe392339168da738f678a6aac1" translate="yes" xml:space="preserve">
          <source>For historical reasons, the &lt;code&gt;=value&lt;/code&gt; is optional, but defaults to 1 only where it is safe to do so--that is, mostly for Boolean options. It is always better to assign a specific value using &lt;code&gt;=&lt;/code&gt;. The &lt;code&gt;option&lt;/code&gt; can be abbreviated, but for clarity probably should not be. Several options can be set together. See &lt;a href=&quot;#Configurable-Options&quot;&gt;&quot;Configurable Options&quot;&lt;/a&gt; for a list of these.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e883aabacc18eb6fd41086f41674bf1de7ee743f" translate="yes" xml:space="preserve">
          <source>For historical reasons, the non-zero return value also attempts to be a suitable value to pass to the C library function &lt;code&gt;exit&lt;/code&gt; (or to return from &lt;code&gt;main&lt;/code&gt;), to serve as an exit code indicating the nature of the way initialisation terminated. However, this isn't portable, due to differing exit code conventions. A historical bug is preserved for the time being: if the Perl built-in &lt;code&gt;exit&lt;/code&gt; is called during this function's execution, with a type of exit entailing a zero exit code under the host operating system's conventions, then this function returns zero rather than a non-zero value. This bug, [perl #2754], leads to &lt;code&gt;perl_run&lt;/code&gt; being called (and therefore &lt;code&gt;INIT&lt;/code&gt; blocks and the main program running) despite a call to &lt;code&gt;exit&lt;/code&gt;. It has been preserved because a popular module-installing module has come to rely on it and needs time to be fixed. This issue is [perl #132577], and the original bug is due to be fixed in Perl 5.30.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff61daf23d266b426600969288affaf2f0354dc" translate="yes" xml:space="preserve">
          <source>For historical reasons, the non-zero return value also attempts to be a suitable value to pass to the C library function &lt;code&gt;exit&lt;/code&gt; (or to return from &lt;code&gt;main&lt;/code&gt;), to serve as an exit code indicating the nature of the way the program terminated. However, this isn't portable, due to differing exit code conventions. An attempt is made to return an exit code of the type required by the host operating system, but because it is constrained to be non-zero, it is not necessarily possible to indicate every type of exit. It is only reliable on Unix, where a zero exit code can be augmented with a set bit that will be ignored. In any case, this function is not the correct place to acquire an exit code: one should get that from &lt;a href=&quot;#perl_destruct&quot;&gt;&quot;perl_destruct&quot;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55b92ebb92494cfbe30e7229baf3e5d9062d8da3" translate="yes" xml:space="preserve">
          <source>For icmp, $ttl can be specified to set the TTL of the outgoing packet.</source>
          <target state="translated">icmp의 경우 $ ttl을 지정하여 발신 패킷의 TTL을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a3dc65d0e11f4f07770188251c2050c67f574aa" translate="yes" xml:space="preserve">
          <source>For icmp, &lt;code&gt;ttl&lt;/code&gt; can be specified to set the TTL of the outgoing packet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fabb550524d3e9edaaeec56458f89ae111e042a" translate="yes" xml:space="preserve">
          <source>For improved performance, include:</source>
          <target state="translated">성능을 향상 시키려면 다음을 포함하십시오.</target>
        </trans-unit>
        <trans-unit id="c1b48d4e66bee46bcdb174582c112372d1e36d74" translate="yes" xml:space="preserve">
          <source>For including perl header files this function simply prints:</source>
          <target state="translated">펄 헤더 파일을 포함시키기 위해이 함수는 단순히 다음을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="06d292b6c5f7ebb00cd41f31f43524ff429d73d9" translate="yes" xml:space="preserve">
          <source>For information about bugs and how to report them, see the BUGS section in the documentation available with the perldoc command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8b2246aaa2d68e99fd635ee467d71b09bb4bd64" translate="yes" xml:space="preserve">
          <source>For information on OO programming with Perl, please see &lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt; and &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;.</source>
          <target state="translated">Perl을 사용한 OO 프로그래밍에 대한 정보는 &lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt; 및 &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6f30b25340bbfdf0b3da24bb0d1fada0694368c1" translate="yes" xml:space="preserve">
          <source>For information on compilers on older versions of AIX, see &lt;a href=&quot;#Compiling-Perl-5-on-older-AIX-versions-up-to-4.3.3&quot;&gt;&quot;Compiling Perl 5 on older AIX versions up to 4.3.3&quot;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a44b4f224e3945a9a157e926bd85c54a2b806624" translate="yes" xml:space="preserve">
          <source>For information on compilers on older versions of AIX, see &lt;a href=&quot;#Compiling-Perl-5-on-older-AIX-versions-up-to-4.3.3&quot;&gt;Compiling Perl 5 on older AIX versions up to 4.3.3&lt;/a&gt;.</source>
          <target state="translated">이전 버전의 AIX에서 컴파일러에 대한 정보는 &lt;a href=&quot;#Compiling-Perl-5-on-older-AIX-versions-up-to-4.3.3&quot;&gt;최대 4.3.3&lt;/a&gt; 이전 버전의 AIX에서 Perl 5 컴파일을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bb36eedea04b6ee98c8a9a8c3584c2e154026b62" translate="yes" xml:space="preserve">
          <source>For information on true color support in various terminal emulators, see &lt;a href=&quot;https://gist.github.com/XVilka/8346728&quot;&gt;True Colour support&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e475bfd513c3fa5a177d8f4cb9e523eea02595c6" translate="yes" xml:space="preserve">
          <source>For installation of the Unix emulation, read the appropriate docs.</source>
          <target state="translated">유닉스 에뮬레이션을 설치하려면 해당 문서를 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="82185638546b1e3be3173f75a2cb122a36a8e321" translate="yes" xml:space="preserve">
          <source>For instance in</source>
          <target state="translated">예를 들어</target>
        </trans-unit>
        <trans-unit id="374d49595b79aec50ad48d5a39ac32ce874245bb" translate="yes" xml:space="preserve">
          <source>For instance with a German locale:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b7041567e33cbc564ac905e83c0e92b5fee08b" translate="yes" xml:space="preserve">
          <source>For instance,</source>
          <target state="translated">예를 들어</target>
        </trans-unit>
        <trans-unit id="2e5815c4c630ea0f3c91b8a08e72b7f14ef4992d" translate="yes" xml:space="preserve">
          <source>For instance, &lt;code&gt;\p{Uppercase}&lt;/code&gt; matches any single character with the Unicode &lt;code&gt;&quot;Uppercase&quot;&lt;/code&gt; property, while &lt;code&gt;\p{L}&lt;/code&gt; matches any character with a &lt;code&gt;General_Category&lt;/code&gt; of &lt;code&gt;&quot;L&quot;&lt;/code&gt; (letter) property (see &lt;a href=&quot;#General_Category&quot;&gt;&quot;General_Category&quot;&lt;/a&gt; below). Brackets are not required for single letter property names, so &lt;code&gt;\p{L}&lt;/code&gt; is equivalent to &lt;code&gt;\pL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9622af028e4033dfcc0d167b46ab4c597968052" translate="yes" xml:space="preserve">
          <source>For instance, &lt;code&gt;\p{Uppercase}&lt;/code&gt; matches any single character with the Unicode &lt;code&gt;&quot;Uppercase&quot;&lt;/code&gt; property, while &lt;code&gt;\p{L}&lt;/code&gt; matches any character with a &lt;code&gt;General_Category&lt;/code&gt; of &lt;code&gt;&quot;L&quot;&lt;/code&gt; (letter) property (see &lt;a href=&quot;#General_Category&quot;&gt;General_Category&lt;/a&gt; below). Brackets are not required for single letter property names, so &lt;code&gt;\p{L}&lt;/code&gt; is equivalent to &lt;code&gt;\pL&lt;/code&gt; .</source>
          <target state="translated">예를 들어, &lt;code&gt;\p{Uppercase}&lt;/code&gt; 는 유니 코드 &lt;code&gt;&quot;Uppercase&quot;&lt;/code&gt; 속성을 사용하는 단일 문자와 일치 하지만 &lt;code&gt;\p{L}&lt;/code&gt; 은 &lt;code&gt;General_Category&lt;/code&gt; 가 &lt;code&gt;&quot;L&quot;&lt;/code&gt; (letter) 속성 을 갖는 문자와 일치합니다 (아래 &lt;a href=&quot;#General_Category&quot;&gt;General_Category&lt;/a&gt; 참조). 단일 문자 속성 이름에는 대괄호가 필요하지 않으므로 &lt;code&gt;\p{L}&lt;/code&gt; 은 &lt;code&gt;\pL&lt;/code&gt; 과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="09478666220a63f47b3cd0943ea02bf8161c942d" translate="yes" xml:space="preserve">
          <source>For instance, Math::BigInt-&amp;gt;bdiv() always returns a Math::BigInt, regardless of whether the second operant is a Math::BigFloat. To get a Math::BigFloat you either need to call the operation manually, make sure each operand already is a Math::BigFloat, or cast to that type via Math::BigFloat-&amp;gt;new():</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c14488c9703c3faf25c072547bcce9b9c6d026a" translate="yes" xml:space="preserve">
          <source>For instance, here's part of the report from the</source>
          <target state="translated">예를 들어 다음은 보고서의 일부입니다.</target>
        </trans-unit>
        <trans-unit id="7503b0a59ae7cf568e520699d192f582d8728a5a" translate="yes" xml:space="preserve">
          <source>For instance, if B = 10000, the number 1234567890 is represented internally as [3456, 7890, 12].</source>
          <target state="translated">예를 들어, B = 10000이면 숫자 1234567890은 내부적으로 [3456, 7890, 12]로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="3ae8eebad47c4d5a417e84613772d68b458e76b8" translate="yes" xml:space="preserve">
          <source>For instance, if B = 10000, the number 1234567890 is represented internally as [7890, 3456, 12].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5b8d1bb99d582e6babc450d597df94876d661f" translate="yes" xml:space="preserve">
          <source>For instance, if the object $obj represents the hexadecimal number 0xabcde, then &lt;code&gt;_rsft($obj, 2, 16)&lt;/code&gt; returns an object representing the number 0xabc. The &quot;remainer&quot;, 0xde, is discarded and not returned.</source>
          <target state="translated">예를 들어 $ obj 객체가 16 진수 0xabcde를 나타내는 경우 &lt;code&gt;_rsft($obj, 2, 16)&lt;/code&gt; 는 0xabc 번호를 나타내는 객체를 반환합니다. &quot;나머지&quot;, 0xde는 버려지고 반환되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3ec9b07fa26c1960352cc0e11e6a493987aa28ff" translate="yes" xml:space="preserve">
          <source>For instance, the &lt;code&gt;&lt;a href=&quot;../functions/sqrt&quot;&gt;sqrt&lt;/a&gt;&lt;/code&gt; routine which computes the square root of its argument is only defined for non-negative real numbers and yields a non-negative real number (it is an application from &lt;b&gt;R+&lt;/b&gt; to &lt;b&gt;R+&lt;/b&gt;). If we allow it to return a complex number, then it can be extended to negative real numbers to become an application from &lt;b&gt;R&lt;/b&gt; to &lt;b&gt;C&lt;/b&gt; (the set of complex numbers):</source>
          <target state="translated">예를 들어, 인수 의 &lt;code&gt;&lt;a href=&quot;../functions/sqrt&quot;&gt;sqrt&lt;/a&gt;&lt;/code&gt; 을 계산 하는 sqrt 루틴은 음이 아닌 실수에 대해서만 정의되고 음이 아닌 실수를 생성합니다 ( &lt;b&gt;R +&lt;/b&gt; 에서 &lt;b&gt;R +&lt;/b&gt; 까지 의 응용 프로그램 &lt;b&gt;임&lt;/b&gt; ). 복소수를 반환하도록 허용하면 음수의 실수로 확장하여 &lt;b&gt;R&lt;/b&gt; 에서 &lt;b&gt;C&lt;/b&gt; (복소수 집합) 로의 응용 프로그램이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="844d0dc718600917c8257dab7fe72c8f5c61d079" translate="yes" xml:space="preserve">
          <source>For instance, the &lt;code&gt;sqrt&lt;/code&gt; routine which computes the square root of its argument is only defined for non-negative real numbers and yields a non-negative real number (it is an application from &lt;b&gt;R+&lt;/b&gt; to &lt;b&gt;R+&lt;/b&gt;). If we allow it to return a complex number, then it can be extended to negative real numbers to become an application from &lt;b&gt;R&lt;/b&gt; to &lt;b&gt;C&lt;/b&gt; (the set of complex numbers):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c71534a4a55ea4fd39c101e16a7e78a572754ea2" translate="yes" xml:space="preserve">
          <source>For instance, the MGVTBL structure called &lt;code&gt;vtbl_sv&lt;/code&gt; (which corresponds to an &lt;code&gt;mg_type&lt;/code&gt; of &lt;code&gt;PERL_MAGIC_sv&lt;/code&gt; ) contains:</source>
          <target state="translated">예를 들어, 호출 MGVTBL 구조 &lt;code&gt;vtbl_sv&lt;/code&gt; 는 (어떤에 대응 &lt;code&gt;mg_type&lt;/code&gt; 의 &lt;code&gt;PERL_MAGIC_sv&lt;/code&gt; ) 포함</target>
        </trans-unit>
        <trans-unit id="535b1920358246c40d20720f1b97d6bbb40cf429" translate="yes" xml:space="preserve">
          <source>For instance, the MGVTBL structure called &lt;code&gt;vtbl_sv&lt;/code&gt; (which corresponds to an &lt;code&gt;mg_type&lt;/code&gt; of &lt;code&gt;PERL_MAGIC_sv&lt;/code&gt;) contains:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed32d78c1e09dbba1a9af89bf4a97865e921d05" translate="yes" xml:space="preserve">
          <source>For instance, to make our report order case-insensitive, we use &lt;code&gt;&lt;a href=&quot;functions/lc&quot;&gt;lc&lt;/a&gt;&lt;/code&gt; to lowercase the keys before comparing them:</source>
          <target state="translated">예를 들어, 보고서 순서를 대소 문자를 구분하지 &lt;code&gt;&lt;a href=&quot;functions/lc&quot;&gt;lc&lt;/a&gt;&lt;/code&gt; 려면 lc 를 사용 하여 키를 비교하기 전에 소문자를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="6e8784a307cf324e4b1061a05e87e7b160fe3ce8" translate="yes" xml:space="preserve">
          <source>For instance, to make our report order case-insensitive, we use &lt;code&gt;lc&lt;/code&gt; to lowercase the keys before comparing them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d4e3e2974e96c779a0f3985585d1d9fd27c623e" translate="yes" xml:space="preserve">
          <source>For instance, with base 3 and collation sequence &quot;-/|&quot;, the character &quot;-&quot; represents 0, &quot;/&quot; represents 1, and &quot;|&quot; represents 2. So if STR is &quot;/|-&quot;, the output is 1 * 3**2 + 2 * 3**1 + 0 * 3**0 = 15.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abc897209b2f98b7966665fa36a5eddbbc44f66d" translate="yes" xml:space="preserve">
          <source>For instance:</source>
          <target state="translated">예를 들어 :</target>
        </trans-unit>
        <trans-unit id="7cfc93ae0f30aa1f0666b1f4bcb636c1b64a91aa" translate="yes" xml:space="preserve">
          <source>For integer conversions, specifying a precision implies that the output of the number itself should be zero-padded to this width, where the 0 flag is ignored:</source>
          <target state="translated">정수 변환의 경우 정밀도를 지정하면 숫자 자체의 출력이이 너비에 0으로 채워 져야합니다. 여기서 0 플래그는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="ecd617b52663df6a2cd98775b9d0bdd10ec28a70" translate="yes" xml:space="preserve">
          <source>For intrepid programmers, the indispensable textbook is</source>
          <target state="translated">대담한 프로그래머에게 없어서는 안될 교과서는</target>
        </trans-unit>
        <trans-unit id="73e4bd4b660eee3d93bee479b4164d47d735941e" translate="yes" xml:space="preserve">
          <source>For larger sets of commits that only make sense together, or that would benefit from a summary of the set's purpose, you should use a merge commit. You should perform your work on a &lt;a href=&quot;#Topic-branches-and-rewriting-history&quot;&gt;topic branch&lt;/a&gt;, which you should regularly rebase against blead to ensure that your code is not broken by blead moving. When you have finished your work, please perform a final rebase and test. Linear history is something that gets lost with every commit on blead, but a final rebase makes the history linear again, making it easier for future maintainers to see what has happened. Rebase as follows (assuming your work was on the branch &lt;code&gt;committer/somework&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32cc3ae00d98ce3277b54b14ffa442a8f077cc1f" translate="yes" xml:space="preserve">
          <source>For lexicons that use an internal cache, translations which have already been cached in their compiled form are not affected by subsequent changes to the whitelist or blacklist settings. Lexicons that use an external cache will have their cache cleared whenever the whitelist of blacklist setings change. The difference between the two types of caching is explained in the &quot;Readonly Lexicons&quot; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c8026914e8193ab94f632a808acbe08f5e1e3d" translate="yes" xml:space="preserve">
          <source>For licensing inquiries, contact the author at:</source>
          <target state="translated">라이센스 문의 사항은 다음 주소의 저자에게 문의하십시오.</target>
        </trans-unit>
        <trans-unit id="ce2ac808344a2fda3717bca04925f57752ba466c" translate="yes" xml:space="preserve">
          <source>For licensing the easiest way is to use the same licensing as Perl itself:</source>
          <target state="translated">라이센스를 얻는 가장 쉬운 방법은 Perl 자체와 동일한 라이센스를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="22eb832a816ecf29dad84d085c065a38bc3edb22" translate="yes" xml:space="preserve">
          <source>For locales available in your system, consult also</source>
          <target state="translated">시스템에서 사용 가능한 로케일에 대해서는 다음을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a3b00aeb77f95c23a885c772aa4da89d9331a578" translate="yes" xml:space="preserve">
          <source>For locales available in your system, consult also &lt;a href=&quot;http://man.he.net/man3/setlocale&quot;&gt;setlocale(3)&lt;/a&gt; to see whether it leads to the list of available locales (search for the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863f28adc13f8c8f63960f8d4f2a4b8a92bd94fd" translate="yes" xml:space="preserve">
          <source>For lookup of</source>
          <target state="translated">조회</target>
        </trans-unit>
        <trans-unit id="34229681f9d4faff26200baa4f876a94429acced" translate="yes" xml:space="preserve">
          <source>For low-level access to the formatting mechanism, you may use formline() and access &lt;code&gt;$^A&lt;/code&gt; (the $ACCUMULATOR variable) directly.</source>
          <target state="translated">서식 메커니즘에 대한 저수준 액세스의 경우 formline ()을 사용하고 &lt;code&gt;$^A&lt;/code&gt; ($ ACCUMULATOR 변수)에 직접 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dda78cd120d71d7294ab5327cc0bc80f1754e64b" translate="yes" xml:space="preserve">
          <source>For lower-level direct manipulation of &lt;code&gt;op_sibparent&lt;/code&gt; and &lt;code&gt;op_moresib&lt;/code&gt; , see &lt;code&gt;OpMORESIB_set&lt;/code&gt; , &lt;code&gt;OpLASTSIB_set&lt;/code&gt; , &lt;code&gt;OpMAYBESIB_set&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;op_sibparent&lt;/code&gt; 및 &lt;code&gt;op_moresib&lt;/code&gt; 의 하위 레벨 직접 조작에 대해서는 &lt;code&gt;OpMORESIB_set&lt;/code&gt; , &lt;code&gt;OpLASTSIB_set&lt;/code&gt; , &lt;code&gt;OpMAYBESIB_set&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f44cfbdfde09849353ae7ad7f0dbd0ecfc59c22c" translate="yes" xml:space="preserve">
          <source>For lower-level direct manipulation of &lt;code&gt;op_sibparent&lt;/code&gt; and &lt;code&gt;op_moresib&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#OpMORESIB_set&quot;&gt;&quot;OpMORESIB_set&quot;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#OpLASTSIB_set&quot;&gt;&quot;OpLASTSIB_set&quot;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#OpMAYBESIB_set&quot;&gt;&quot;OpMAYBESIB_set&quot;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a2710d99c8e59b0ca1361e7bf2da876fb54697f" translate="yes" xml:space="preserve">
          <source>For maintenance clarity, no functions are exported by default. These functions are available for backwards compatibility only and are best avoided in favor of &lt;code&gt;load_file&lt;/code&gt; .</source>
          <target state="translated">유지 관리의 명확성을 위해 기본적으로 함수가 내보내지지 않습니다. 이러한 함수는 이전 버전과의 호환성을 위해서만 사용할 수 있으며 &lt;code&gt;load_file&lt;/code&gt; 을 위해 사용하지 않는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="d54a16eb6e0a53c22d93f4183ae79cdb536879de" translate="yes" xml:space="preserve">
          <source>For maintenance clarity, no functions are exported by default. These functions are available for backwards compatibility only and are best avoided in favor of &lt;code&gt;load_file&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66d2d5bbea31d0eff0a07151ddd0f30d9798a0b6" translate="yes" xml:space="preserve">
          <source>For many Perl functions, the CORE package contains real subroutines. This feature is new in Perl 5.16. You can take references to these and make aliases. However, some can only be called as barewords; i.e., you cannot use ampersand syntax (&lt;code&gt;&amp;amp;foo&lt;/code&gt; ) or call them through references. See the &lt;code&gt;shove&lt;/code&gt; example above. These subroutines exist for all keywords except the following:</source>
          <target state="translated">많은 Perl 기능의 경우 CORE 패키지에는 실제 서브 루틴이 포함되어 있습니다. 이 기능은 Perl 5.16의 새로운 기능입니다. 이것들을 참조하고 별칭을 만들 수 있습니다. 그러나 일부는 베어 워드로만 호출 할 수 있습니다. 즉, 앰퍼샌드 구문 ( &lt;code&gt;&amp;amp;foo&lt;/code&gt; )을 사용하거나 참조를 통해 호출 할 수 없습니다 . 참고 항목 &lt;code&gt;shove&lt;/code&gt; 위의 예. 이 서브 루틴은 다음을 제외한 모든 키워드에 존재합니다.</target>
        </trans-unit>
        <trans-unit id="f973e44f5abb90a701bcc17cf63886f44f224bfb" translate="yes" xml:space="preserve">
          <source>For many Perl functions, the CORE package contains real subroutines. This feature is new in Perl 5.16. You can take references to these and make aliases. However, some can only be called as barewords; i.e., you cannot use ampersand syntax (&lt;code&gt;&amp;amp;foo&lt;/code&gt;) or call them through references. See the &lt;code&gt;shove&lt;/code&gt; example above. These subroutines exist for all keywords except the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ef8504526bafcd83f659e5d29383951a3389b63" translate="yes" xml:space="preserve">
          <source>For many common uses of the module, the read cache is a liability. For example, a program that inserts a single record, or that scans the file once, will have a cache hit rate of zero. This suggests a major optimization: The cache should be initially disabled. Here's a hybrid approach: Initially, the cache is disabled, but the cache code maintains statistics about how high the hit rate would be *if* it were enabled. When it sees the hit rate get high enough, it enables itself. The STAT comments in this code are the beginning of an implementation of this.</source>
          <target state="translated">모듈을 많이 사용하는 경우 읽기 캐시는 책임입니다. 예를 들어, 단일 레코드를 삽입하거나 파일을 한 번 스캔하는 프로그램의 캐시 적중률은 0입니다. 이는 주요 최적화를 제안합니다. 캐시는 처음에 비활성화해야합니다. 하이브리드 방식은 다음과 같습니다. 처음에는 캐시가 비활성화되어 있지만 캐시 코드는 활성화 된 적중률이 얼마나 높은지에 대한 통계를 유지합니다. 적중률이 충분히 높아지면 스스로 활성화됩니다. 이 코드의 STAT 주석은이 구현의 시작입니다.</target>
        </trans-unit>
        <trans-unit id="7d7c43c3f2df12ff908506d30ea1b36d85c10b7d" translate="yes" xml:space="preserve">
          <source>For many functions, you can also query &lt;a href=&quot;config#DESCRIPTION&quot;&gt;&lt;code&gt;%Config&lt;/code&gt;&lt;/a&gt;, exported by default from the &lt;a href=&quot;config&quot;&gt;&lt;code&gt;Config&lt;/code&gt;&lt;/a&gt; module. For example, to check whether the platform has the &lt;a href=&quot;perlfunc#lstat-FILEHANDLE&quot;&gt;&lt;code&gt;lstat&lt;/code&gt;&lt;/a&gt; call, check &lt;a href=&quot;config#d_lstat&quot;&gt;&lt;code&gt;$Config{d_lstat}&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt; for a full description of available variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0f179826fe2c92a37ede899dfe2a03f1a5c458a" translate="yes" xml:space="preserve">
          <source>For many functions, you can also query &lt;code&gt;%Config&lt;/code&gt; , exported by default from the &lt;code&gt;Config&lt;/code&gt; module. For example, to check whether the platform has the &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; call, check &lt;code&gt;$Config{d_lstat}&lt;/code&gt; . See &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt; for a full description of available variables.</source>
          <target state="translated">많은 기능의 경우 기본적으로 &lt;code&gt;Config&lt;/code&gt; 모듈 에서 내 보낸 &lt;code&gt;%Config&lt;/code&gt; 쿼리 할 수도 있습니다 . 예를 들어, 플랫폼에 &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; 호출이 있는지 확인하려면 &lt;code&gt;$Config{d_lstat}&lt;/code&gt; 확인하십시오 . 사용 가능한 변수에 대한 자세한 설명은 &lt;a href=&quot;config&quot;&gt;구성&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="efd5a9c50ebfeb1864b8fd6e6ed8e999df584565" translate="yes" xml:space="preserve">
          <source>For many people, Perl serves as a great replacement for shell scripting. For others, it serves as a convenient, high-level replacement for most of what they'd program in low-level languages like C or C++. It's ultimately up to you (and possibly your management) which tasks you'll use Perl for and which you won't.</source>
          <target state="translated">많은 사람들에게 Perl은 쉘 스크립팅의 훌륭한 대체물입니다. 다른 사람들에게는 C 또는 C ++와 같은 저수준 언어로 프로그래밍 한 대부분을 편리하고 높은 수준으로 대체하는 역할을합니다. Perl을 사용할 작업과 사용하지 않을 작업은 궁극적으로 사용자 (및 아마도 관리)에게 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b046ce891b8b5f7d7f37e47256b7841d3461b86" translate="yes" xml:space="preserve">
          <source>For many typemap examples, refer to the core typemap file that can be found in the perl source tree at</source>
          <target state="translated">많은 타입 맵 예제는 펄 소스 트리에서 찾을 수있는 코어 타입 맵 파일을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a0610ac0b02cfa9a7d3209596fa010908429083d" translate="yes" xml:space="preserve">
          <source>For maximum security, endeavour always to avoid ever looking at, touching, or even imputing the existence of the filename. You do not know that that filename is connected to the same file as the handle you have, and attempts to check this can only trigger more race conditions. It's far more secure to use the filehandle alone and dispense with the filename altogether.</source>
          <target state="translated">최대한의 보안을 위해 파일 이름의 존재를 보거나 만지거나 전가하지 않도록 항상 노력하십시오. 해당 파일 이름이 소유하고있는 핸들과 동일한 파일에 연결되어 있는지 알 수 없으며이를 확인하려고하면 더 많은 경쟁 조건 만 트리거 할 수 있습니다. 파일 핸들 만 사용하고 파일 이름을 사용하지 않는 것이 훨씬 안전합니다.</target>
        </trans-unit>
        <trans-unit id="220ffe1d077d6e4643b22c57e942ba4049701e75" translate="yes" xml:space="preserve">
          <source>For measuring time in better granularity than one second, use the &lt;a href=&quot;../time/hires&quot;&gt;Time::HiRes&lt;/a&gt; module from Perl 5.8 onwards (or from CPAN before then), or, if you have gettimeofday(2), you may be able to use the &lt;code&gt;&lt;a href=&quot;syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; interface of Perl. See &lt;a href=&quot;../perlfaq8&quot;&gt;perlfaq8&lt;/a&gt; for details.</source>
          <target state="translated">1 초보다 세분화 된 시간을 측정하려면 Perl 5.8 이후 (또는 그 이전의 CPAN)부터 &lt;a href=&quot;../time/hires&quot;&gt;Time :: HiRes&lt;/a&gt; 모듈을 사용 하거나 gettimeofday (2)가있는 경우 Perl 의 &lt;code&gt;&lt;a href=&quot;syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; 인터페이스 를 사용할 수 있습니다. . 자세한 내용은 &lt;a href=&quot;../perlfaq8&quot;&gt;perlfaq8&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2ae237075cc25a39ee4940474a29997fb4b79588" translate="yes" xml:space="preserve">
          <source>For measuring time in better granularity than one second, use the &lt;a href=&quot;Time::HiRes&quot;&gt;Time::HiRes&lt;/a&gt; module from Perl 5.8 onwards (or from CPAN before then), or, if you have &lt;a href=&quot;http://man.he.net/man2/gettimeofday&quot;&gt;gettimeofday(2)&lt;/a&gt;, you may be able to use the &lt;a href=&quot;#syscall-NUMBER%2C-LIST&quot;&gt;&lt;code&gt;syscall&lt;/code&gt;&lt;/a&gt; interface of Perl. See &lt;a href=&quot;perlfaq8&quot;&gt;perlfaq8&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b053fd32cc090c58c85994234835bd9b44b038f0" translate="yes" xml:space="preserve">
          <source>For measuring time in better granularity than one second, use the &lt;a href=&quot;time/hires&quot;&gt;Time::HiRes&lt;/a&gt; module from Perl 5.8 onwards (or from CPAN before then), or, if you have gettimeofday(2), you may be able to use the &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; interface of Perl. See &lt;a href=&quot;perlfaq8&quot;&gt;perlfaq8&lt;/a&gt; for details.</source>
          <target state="translated">1 초보다 세분화 된 시간을 측정하려면 Perl 5.8 이후 (또는 그 이전의 CPAN)부터 &lt;a href=&quot;time/hires&quot;&gt;Time :: HiRes&lt;/a&gt; 모듈을 사용 하거나 gettimeofday (2)가있는 경우 Perl 의 &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; 인터페이스 를 사용할 수 있습니다. . 자세한 내용은 &lt;a href=&quot;perlfaq8&quot;&gt;perlfaq8&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0ebcaa7dba756e74bb747d1f75584987ce3302b0" translate="yes" xml:space="preserve">
          <source>For module authors using CPAN, the convention has been to note unstable releases with an underscore in the version string. (See &lt;a href=&quot;cpan&quot;&gt;CPAN&lt;/a&gt;.) version.pm follows this convention and alpha releases will test as being newer than the more recent stable release, and less than the next stable release. Only the last element may be separated by an underscore:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d974553adc4f12dd109aa40213d04e0af2475b99" translate="yes" xml:space="preserve">
          <source>For modules that do not appear in the requirements, this method will return true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a7dc3da9f9150a0f4e59b825d03d586115ca6af" translate="yes" xml:space="preserve">
          <source>For modules which ARE classes, and need to handle inherited methods, stubs are needed to ensure that the method inheritance mechanism works properly. You can load the stubs into the module at 'require' time, by adding the statement 'SelfLoader-&amp;gt;load_stubs();' to the module to do this.</source>
          <target state="translated">클래스이며 상속 된 메서드를 처리해야하는 모듈의 경우 메서드 상속 메커니즘이 제대로 작동하도록하려면 스텁이 필요합니다. 'SelfLoader-&amp;gt; load_stubs ();'문을 추가하여 '요구'시간에 스텁을 모듈에로드 할 수 있습니다. 이를 위해 모듈에</target>
        </trans-unit>
        <trans-unit id="25217607f7b7b4f54ca08eb0f1fc36241da39944" translate="yes" xml:space="preserve">
          <source>For modules which are not classes, this section is not relevant. This section is only relevant if you have methods which could be inherited.</source>
          <target state="translated">클래스가 아닌 모듈의 경우이 섹션은 관련이 없습니다. 이 섹션은 상속 가능한 메소드가있는 경우에만 관련이 있습니다.</target>
        </trans-unit>
        <trans-unit id="29a15f44066dff1f2c0c9c7cbcbbd443cbb90819" translate="yes" xml:space="preserve">
          <source>For modules, get the CGI or LWP modules from CPAN. For textbooks, see the two especially dedicated to web stuff in the question on books. For problems and questions related to the web, like &quot;Why do I get 500 Errors&quot; or &quot;Why doesn't it run from the browser right when it runs fine on the command line&quot;, see the troubleshooting guides and references in &lt;a href=&quot;perlfaq9&quot;&gt;perlfaq9&lt;/a&gt; or in the CGI MetaFAQ:</source>
          <target state="translated">모듈의 경우 CPAN에서 CGI 또는 LWP 모듈을 가져 오십시오. 교과서의 경우 특히 도서 관련 질문에 대한 웹 전용 두 가지를 참조하십시오. &quot;500 오류가 발생하는 이유&quot;또는 &quot;명령 줄에서 제대로 실행될 때 브라우저에서 제대로 실행되지 않는 이유&quot;와 같은 웹과 관련된 문제 및 질문은 &lt;a href=&quot;perlfaq9&quot;&gt;perlfaq9&lt;/a&gt; 또는 CGI MetaFAQ :</target>
        </trans-unit>
        <trans-unit id="a6c5d02ad3924eaa5d374ccbe206b8582ecb558a" translate="yes" xml:space="preserve">
          <source>For more about Raku see &lt;a href=&quot;https://www.raku.org/&quot;&gt;https://www.raku.org/&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c19610a9a975a0cf5248edf9977288237aa0d121" translate="yes" xml:space="preserve">
          <source>For more about scripts versus blocks, see UAX#24 &quot;Unicode Script Property&quot;: &lt;a href=&quot;http://www.unicode.org/reports/tr24&quot;&gt;http://www.unicode.org/reports/tr24&lt;/a&gt;</source>
          <target state="translated">스크립트와 블록에 대한 자세한 내용은 UAX # 24 &quot;유니 코드 스크립트 속성&quot;을 &lt;a href=&quot;http://www.unicode.org/reports/tr24&quot;&gt;참조하십시오&lt;/a&gt; . http://www.unicode.org/reports/tr24</target>
        </trans-unit>
        <trans-unit id="88e331d34233d9a1bb2d81e7a3d8e3b0d007ebe6" translate="yes" xml:space="preserve">
          <source>For more about scripts versus blocks, see UAX#24 &quot;Unicode Script Property&quot;: &lt;a href=&quot;https://www.unicode.org/reports/tr24&quot;&gt;https://www.unicode.org/reports/tr24&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f84e3d4e18aa471a205e575dceae5b441a5a9b" translate="yes" xml:space="preserve">
          <source>For more benchmark results see &lt;a href=&quot;http://bloodgate.com/perl/benchmarks.html&quot;&gt;http://bloodgate.com/perl/benchmarks.html&lt;/a&gt;.</source>
          <target state="translated">더 많은 벤치 마크 결과는 &lt;a href=&quot;http://bloodgate.com/perl/benchmarks.html&quot;&gt;http://bloodgate.com/perl/benchmarks.html을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7a12676c43bab4536e6ed20980a2aaf16b4eccc1" translate="yes" xml:space="preserve">
          <source>For more complex signal handling, you might see the standard POSIX module. Lamentably, this is almost entirely undocumented, but the</source>
          <target state="translated">보다 복잡한 신호 처리를 위해 표준 POSIX 모듈이 표시 될 수 있습니다. 불행히도, 이것은 거의 전적으로 문서화되어 있지 않지만</target>
        </trans-unit>
        <trans-unit id="957067f49d4f276b8bab23569a71cc7a7499c9e9" translate="yes" xml:space="preserve">
          <source>For more complicated situations, version specifications &lt;b&gt;may&lt;/b&gt; be AND-ed together using commas. The specification &lt;code&gt;&amp;gt;= 1.2, != 1.5, &amp;lt; 2.0&lt;/code&gt; indicates a version that must be &lt;b&gt;at least&lt;/b&gt; 1.2, &lt;b&gt;less than&lt;/b&gt; 2.0, and &lt;b&gt;not equal to&lt;/b&gt; 1.5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff6fe63c641733bc67160b9c70ac7d6d7f1c3c05" translate="yes" xml:space="preserve">
          <source>For more complicated situations, version specifications may be AND-ed together using commas. The specification &lt;code&gt;&amp;gt;= 1.2, != 1.5, &amp;lt; 2.0&lt;/code&gt; indicates a version that must be &lt;b&gt;at least&lt;/b&gt; 1.2, &lt;b&gt;less than&lt;/b&gt; 2.0, and &lt;b&gt;not equal to&lt;/b&gt; 1.5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be1e0dddb201330ac943f0c7f8b66035ebd2739a" translate="yes" xml:space="preserve">
          <source>For more detail on each item in this checklist, see below.</source>
          <target state="translated">이 점검 목록의 각 항목에 대한 자세한 내용은 아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b905a813e9b57da3dea6d150de2f4e3eac205961" translate="yes" xml:space="preserve">
          <source>For more detail on looping constructs (and some that weren't mentioned in this overview) see &lt;a href=&quot;perlsyn&quot;&gt;perlsyn&lt;/a&gt;.</source>
          <target state="translated">루핑 구조 (및이 개요에서 언급되지 않은 일부)에 대한 자세한 내용은 &lt;a href=&quot;perlsyn&quot;&gt;perlsyn을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9cce3d22b488b424d06498a184d62a8579f8068a" translate="yes" xml:space="preserve">
          <source>For more detailed explanation of the available commands and output formats, see your own local documentation of</source>
          <target state="translated">사용 가능한 명령 및 출력 형식에 대한 자세한 설명은 해당 지역의 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="191b44055a5c64626669b9bb810cf968868b2305" translate="yes" xml:space="preserve">
          <source>For more detailed information, see &lt;a href=&quot;http://unicode.org/reports/tr15/&quot;&gt;http://unicode.org/reports/tr15/&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;http://unicode.org/reports/tr15/&quot;&gt;http://unicode.org/reports/tr15/를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="71e7ea87ff241717fc4e23b38966813c9a86baa7" translate="yes" xml:space="preserve">
          <source>For more details (FAQ), check out the home of DJGPP at:</source>
          <target state="translated">자세한 내용 (FAQ)은 다음 위치에서 DJGPP 홈을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="ea5a8e8b2d8338cda1f4a6899bfe72419e34ebf1" translate="yes" xml:space="preserve">
          <source>For more details on Unicode properties, see &lt;a href=&quot;perlunicode#Unicode-Character-Properties&quot;&gt;&quot;Unicode Character Properties&quot; in perlunicode&lt;/a&gt;; for a complete list of possible properties, see &lt;a href=&quot;perluniprops#Properties-accessible-through-%5Cp%7B%7D-and-%5CP%7B%7D&quot;&gt;&quot;Properties accessible through \p{} and \P{}&quot; in perluniprops&lt;/a&gt;, which notes all forms that have &lt;code&gt;/i&lt;/code&gt; differences. It is also possible to define your own properties. This is discussed in &lt;a href=&quot;perlunicode#User-Defined-Character-Properties&quot;&gt;&quot;User-Defined Character Properties&quot; in perlunicode&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7ea18856481cbfb2fbce20aa82b169672d93cb" translate="yes" xml:space="preserve">
          <source>For more details on Unicode properties, see &lt;a href=&quot;perlunicode#Unicode-Character-Properties&quot;&gt;Unicode Character Properties in perlunicode&lt;/a&gt;; for a complete list of possible properties, see &lt;a href=&quot;perluniprops#Properties-accessible-through-%5cp%7b%7d-and-%5cP%7b%7d&quot;&gt;Properties accessible through \p{} and \P{} in perluniprops&lt;/a&gt;, which notes all forms that have &lt;code&gt;/i&lt;/code&gt; differences. It is also possible to define your own properties. This is discussed in &lt;a href=&quot;perlunicode#User-Defined-Character-Properties&quot;&gt;User-Defined Character Properties in perlunicode&lt;/a&gt;.</source>
          <target state="translated">유니 코드 속성에 대한 자세한 내용 &lt;a href=&quot;perlunicode#Unicode-Character-Properties&quot;&gt;은 perlunicode의 유니 코드 문자 속성을&lt;/a&gt; 참조하십시오 . 가능한 특성의 전체 목록은 &lt;a href=&quot;perluniprops#Properties-accessible-through-%5cp%7b%7d-and-%5cP%7b%7d&quot;&gt;perluniprops에서 \ p {} 및 \ P {}를 통해 액세스 할&lt;/a&gt; 수있는 특성을 참조하십시오 . &lt;code&gt;/i&lt;/code&gt; 차이점 이있는 모든 양식에 대해 설명합니다 . 자신의 속성을 정의 할 수도 있습니다. 이는 &lt;a href=&quot;perlunicode#User-Defined-Character-Properties&quot;&gt;perlunicode의 사용자 정의 문자 특성에서 설명&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="2cbbe4fe0a4baf76f7b9458c97576bdbd741475c" translate="yes" xml:space="preserve">
          <source>For more details on regular expression efficiency, see</source>
          <target state="translated">정규 표현식 효율성에 대한 자세한 내용은</target>
        </trans-unit>
        <trans-unit id="4274c631cf855f72956e99d5e4a19f001a475568" translate="yes" xml:space="preserve">
          <source>For more details on the mechanics of skip and todo tests see &lt;a href=&quot;Test::Harness&quot;&gt;Test::Harness&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebe9afb005e64603315c0b4b48ed47e449ce83f7" translate="yes" xml:space="preserve">
          <source>For more details on the mechanics of skip and todo tests see &lt;a href=&quot;harness&quot;&gt;Test::Harness&lt;/a&gt;.</source>
          <target state="translated">건너 뛰기 및 할일 테스트 메커니즘에 대한 자세한 내용은 &lt;a href=&quot;harness&quot;&gt;Test :: Harness를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7baab4b3bb4b02cd4142daf0edbd11721551241c" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;perlguts#How-multiple-interpreters-and-concurrency-are-supported&quot;&gt;perlguts&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;perlguts#How-multiple-interpreters-and-concurrency-are-supported&quot;&gt;perlguts를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="469e4a888c0ba77bab7f897ffb8f0eff335748d6" translate="yes" xml:space="preserve">
          <source>For more details, see the &lt;code&gt;sources&lt;/code&gt; parameter in &lt;a href=&quot;TAP::Parser#new&quot;&gt;&quot;new&quot; in TAP::Parser&lt;/a&gt;, &lt;a href=&quot;TAP::Parser::Source&quot;&gt;TAP::Parser::Source&lt;/a&gt;, and &lt;a href=&quot;TAP::Parser::IteratorFactory&quot;&gt;TAP::Parser::IteratorFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f61d1799248ab35eaa772a394c6295835033e37c" translate="yes" xml:space="preserve">
          <source>For more details, see the &lt;code&gt;sources&lt;/code&gt; parameter in &lt;a href=&quot;parser#new&quot;&gt;new in TAP::Parser&lt;/a&gt;, &lt;a href=&quot;parser/source&quot;&gt;TAP::Parser::Source&lt;/a&gt;, and &lt;a href=&quot;parser/iteratorfactory&quot;&gt;TAP::Parser::IteratorFactory&lt;/a&gt;.</source>
          <target state="translated">자세한 내용 &lt;a href=&quot;parser#new&quot;&gt;은 TAP :: Parser&lt;/a&gt; , &lt;a href=&quot;parser/source&quot;&gt;TAP :: Parser :: Source&lt;/a&gt; 및 &lt;a href=&quot;parser/iteratorfactory&quot;&gt;TAP :: Parser :: IteratorFactory&lt;/a&gt; 에서 new 의 &lt;code&gt;sources&lt;/code&gt; 매개 변수를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8d792a0910cc22b1db3814d0f9e477cca4ea1652" translate="yes" xml:space="preserve">
          <source>For more details, see the documentation and code of &lt;a href=&quot;base&quot;&gt;base&lt;/a&gt; and &lt;a href=&quot;parent&quot;&gt;parent&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;base&quot;&gt;base&lt;/a&gt; 및 &lt;a href=&quot;parent&quot;&gt;parent&lt;/a&gt; 설명서 및 코드를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e28556232fac8aa9e7b56eb26466d9231a13cb3c" translate="yes" xml:space="preserve">
          <source>For more details, see the individual descriptions at &lt;code&gt;$@&lt;/code&gt; , &lt;code&gt;$!&lt;/code&gt; , &lt;code&gt;$^E&lt;/code&gt; , and &lt;code&gt;$?&lt;/code&gt; .</source>
          <target state="translated">자세한 내용은 &lt;code&gt;$@&lt;/code&gt; , &lt;code&gt;$!&lt;/code&gt; 의 개별 설명을 참조하십시오 . , &lt;code&gt;$^E&lt;/code&gt; 및 &lt;code&gt;$?&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="43195f98b7a7681c8bfb7066caf577dd556413ed" translate="yes" xml:space="preserve">
          <source>For more details, see the individual descriptions at &lt;code&gt;$@&lt;/code&gt;, &lt;code&gt;$!&lt;/code&gt;, &lt;code&gt;$^E&lt;/code&gt;, and &lt;code&gt;$?&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cfca851970ab4784648ba74e553f012851bc695" translate="yes" xml:space="preserve">
          <source>For more information about case mappings see &lt;a href=&quot;http://www.unicode.org/unicode/reports/tr21&quot;&gt;http://www.unicode.org/unicode/reports/tr21&lt;/a&gt;</source>
          <target state="translated">사례 매핑에 대한 자세한 내용은 &lt;a href=&quot;http://www.unicode.org/unicode/reports/tr21&quot;&gt;http://www.unicode.org/unicode/reports/tr21을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a52fba09ce9a3f5f4483e33536b3e5c091d8d89a" translate="yes" xml:space="preserve">
          <source>For more information about case mappings see &lt;a href=&quot;http://www.unicode.org/unicode/reports/tr21/&quot;&gt;http://www.unicode.org/unicode/reports/tr21/&lt;/a&gt;</source>
          <target state="translated">사례 매핑에 대한 자세한 내용은 &lt;a href=&quot;http://www.unicode.org/unicode/reports/tr21/&quot;&gt;http://www.unicode.org/unicode/reports/tr21/을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8a7f733567279e64844bd80ab92f020d566ce85e" translate="yes" xml:space="preserve">
          <source>For more information about encodings--for instance, to learn what</source>
          <target state="translated">인코딩에 대한 자세한 내용 (예 :</target>
        </trans-unit>
        <trans-unit id="2561ce48ee706059d4bfdc21d19fd5f166cfc40f" translate="yes" xml:space="preserve">
          <source>For more information about the portability of these functions, see &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt; and other available platform-specific documentation.</source>
          <target state="translated">이러한 기능의 이식성에 대한 자세한 정보는 &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt; 및 기타 사용 가능한 플랫폼 별 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e0b48a366c382047ff56f3b46da60ad7835f72b7" translate="yes" xml:space="preserve">
          <source>For more information on Pod, check out &lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt; and &lt;a href=&quot;perlpodspec&quot;&gt;perlpodspec&lt;/a&gt;.</source>
          <target state="translated">포드에 대한 자세한 내용은 &lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt; 및 &lt;a href=&quot;perlpodspec&quot;&gt;perlpodspec을&lt;/a&gt; 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="7368b700a1d6f50c9c2914d3baee02fbd55cba3c" translate="yes" xml:space="preserve">
          <source>For more information on any of these modules, please see its respective documentation.</source>
          <target state="translated">이러한 모듈에 대한 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="dc04081d51966ff60e7c96305c9e6436b5709722" translate="yes" xml:space="preserve">
          <source>For more information on file locking, see also &lt;a href=&quot;perlopentut#File-Locking&quot;&gt;&quot;File Locking&quot; in perlopentut&lt;/a&gt; if you have it (new for 5.6).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="416652247fb1fd02b42bcffea330cb4fb44ecfe8" translate="yes" xml:space="preserve">
          <source>For more information on file locking, see also &lt;a href=&quot;perlopentut#File-Locking&quot;&gt;File Locking in perlopentut&lt;/a&gt; if you have it (new for 5.6).</source>
          <target state="translated">파일 잠금에 대한 자세한 정보 &lt;a href=&quot;perlopentut#File-Locking&quot;&gt;는 perlopentut의 파일 잠금 (파일이있는&lt;/a&gt; 경우)을 참조하십시오 (5.6의 새로운 기능).</target>
        </trans-unit>
        <trans-unit id="099e98950b7e5d3724fc0c2a1b6e16e56fceb5bc" translate="yes" xml:space="preserve">
          <source>For more information on output layers, see the entries for &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; and &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt; in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;, and the &lt;a href=&quot;perlio&quot;&gt;PerlIO&lt;/a&gt; module documentation.</source>
          <target state="translated">출력 레이어에 대한 정보의 항목 참조 &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; 하고 &lt;a href=&quot;open&quot;&gt;열&lt;/a&gt; 에서 &lt;a href=&quot;perlfunc&quot;&gt;을 perlfunc&lt;/a&gt; 및 &lt;a href=&quot;perlio&quot;&gt;은 PerlIO의&lt;/a&gt; 모듈 문서.</target>
        </trans-unit>
        <trans-unit id="6a3aa93862f02af456639d9c1bb6fc7197d1ed97" translate="yes" xml:space="preserve">
          <source>For more information on output layers, see the entries for &lt;code&gt;binmode&lt;/code&gt; and &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt; in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;, and the &lt;a href=&quot;perlio&quot;&gt;PerlIO&lt;/a&gt; module documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e818032a9be9224ab5cbe363750ba1600bb48228" translate="yes" xml:space="preserve">
          <source>For more information on references and blessings, consult &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;.</source>
          <target state="translated">참조와 축복에 대한 자세한 내용은 &lt;a href=&quot;perlref&quot;&gt;perlref를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="431aa7d9ab35af3d418b933dacbc47e6d0da61aa" translate="yes" xml:space="preserve">
          <source>For more information on the Perl internals, please see the documents listed at &lt;a href=&quot;perl#Internals-and-C-Language-Interface&quot;&gt;&quot;Internals and C Language Interface&quot; in perl&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3875443a1c771cfef5af62913463726b3c0dc4e" translate="yes" xml:space="preserve">
          <source>For more information on the Perl internals, please see the documents listed at &lt;a href=&quot;perl#Internals-and-C-Language-Interface&quot;&gt;Internals and C Language Interface in perl&lt;/a&gt;.</source>
          <target state="translated">Perl 내부에 대한 자세한 정보 &lt;a href=&quot;perl#Internals-and-C-Language-Interface&quot;&gt;는 perl의 내부 및 C 언어 인터페이스에&lt;/a&gt; 나열된 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7e1c38bc7063ae4d32b5c046d7a962931ee4b2aa" translate="yes" xml:space="preserve">
          <source>For more information on the matching &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; and substitution &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; operators, see &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;Regexp Quote-Like Operators in perlop&lt;/a&gt;. For information on the &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; operation, see &lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;.</source>
          <target state="translated">일치하는 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; 및 대체 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; 연산자 에 대한 자세한 정보 &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;는 perlop의 정규 표현식 인용 유사 연산자를&lt;/a&gt; 참조하십시오 . 상의 정보는 &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; 작업을 참조 &lt;a href=&quot;functions/split&quot;&gt;분할&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b276bec7a3c0c4fcc0864a4306fc4dd42c5efa67" translate="yes" xml:space="preserve">
          <source>For more information on the matching &lt;code&gt;m//&lt;/code&gt; and substitution &lt;code&gt;s///&lt;/code&gt; operators, see &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;&quot;Regexp Quote-Like Operators&quot; in perlop&lt;/a&gt;. For information on the &lt;code&gt;split&lt;/code&gt; operation, see &lt;a href=&quot;perlfunc#split&quot;&gt;&quot;split&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cbd17a6abedda52d2cbc6d701f48221b145ef0f" translate="yes" xml:space="preserve">
          <source>For more information on these options, you can run &lt;a href=&quot;perlrun&quot;&gt;&lt;code&gt;perldoc perlrun&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d861195f361843be9490e2a15ea16594084c17c5" translate="yes" xml:space="preserve">
          <source>For more information on these options, you can run &lt;code&gt;perldoc perlrun&lt;/code&gt; .</source>
          <target state="translated">이러한 옵션에 대한 자세한 정보는 &lt;code&gt;perldoc perlrun&lt;/code&gt; 을 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ae1bf8b301cb7d0e378d5bfae6b8ca1419913f8d" translate="yes" xml:space="preserve">
          <source>For more information on writing subroutines, see &lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt;.</source>
          <target state="translated">서브 루틴 작성에 대한 자세한 정보는 &lt;a href=&quot;perlsub&quot;&gt;perlsub를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="54bca26b413776465d316ff152cfba7e50928bfd" translate="yes" xml:space="preserve">
          <source>For more information see &quot;man strptime&quot;, which should be on all unix systems.</source>
          <target state="translated">자세한 정보는 모든 UNIX 시스템에 있어야하는 &quot;man strptime&quot;을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e1baf9669b89021435a3869d8ee27cb001b8531d" translate="yes" xml:space="preserve">
          <source>For more information see &lt;a href=&quot;../perlipc&quot;&gt;perlipc&lt;/a&gt;.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;../perlipc&quot;&gt;perlipc를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6a8c608dc66ccc771771da6fa1ec2512b26eb2f6" translate="yes" xml:space="preserve">
          <source>For more information see &lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt;.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;perlipc&quot;&gt;perlipc를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0f020267b66a1cdd001af710aa00960332272626" translate="yes" xml:space="preserve">
          <source>For more information, consult &lt;a href=&quot;perlguts&quot;&gt;perlguts&lt;/a&gt;, &lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt;, &lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt;, &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;, and &lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt;.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;perlguts&quot;&gt;perlguts&lt;/a&gt; , &lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt; , &lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt; , &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt; 및 &lt;a href=&quot;perlpod&quot;&gt;perlpod를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="34baaca1017f55f5261393ae901ca335f5962ac3" translate="yes" xml:space="preserve">
          <source>For more information, consult &lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt; and &lt;a href=&quot;perlxstut&quot;&gt;perlxstut&lt;/a&gt;.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt; 및 &lt;a href=&quot;perlxstut&quot;&gt;perlxstut를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3d20dd1c8dbc4552d5c14d5ca92e5a6e145a49a2" translate="yes" xml:space="preserve">
          <source>For more information, including instructions for other platforms such as Windows and Mac OS, read &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;.</source>
          <target state="translated">Windows 및 Mac OS와 같은 다른 플랫폼에 대한 지시 사항을 포함하여 자세한 정보는 &lt;a href=&quot;perlrun&quot;&gt;perlrun을&lt;/a&gt; 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="79af2850ae6d9980512d9222bf617b97630cd7f6" translate="yes" xml:space="preserve">
          <source>For more information, see the SUPPORT section in the documentation available with the perldoc command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f6b2985afc24c6ba2ce53974a41c02581d47c16" translate="yes" xml:space="preserve">
          <source>For more on references see &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt; and &lt;a href=&quot;perlreftut&quot;&gt;perlreftut&lt;/a&gt;</source>
          <target state="translated">참조에 대한 자세한 내용은 &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt; 및 &lt;a href=&quot;perlreftut&quot;&gt;perlreftut&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="570bd0b65c4a2212785bd93937b2532931fb04d1" translate="yes" xml:space="preserve">
          <source>For more on the implications and differences between character semantics and byte semantics, see &lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt; and &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;.</source>
          <target state="translated">문자 의미와 바이트 의미의 의미와 차이점에 대한 자세한 내용은 &lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt; 및 &lt;a href=&quot;perlunicode&quot;&gt;perlunicode를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8d742b8205504f2161396faa1953607094e72b61" translate="yes" xml:space="preserve">
          <source>For more on the implications, see &lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt; and &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db99609d275f010ab9ef2f1e664305363a10f9ac" translate="yes" xml:space="preserve">
          <source>For more on this, see &lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt; and &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;.</source>
          <target state="translated">이에 대한 자세한 내용은 &lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt; 및 &lt;a href=&quot;perlobj&quot;&gt;perlobj를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="272ef40c7df3b1032622640835458da768522456" translate="yes" xml:space="preserve">
          <source>For more up-to-date information, see &lt;a href=&quot;https://metacpan.org/release/ExtUtils-MakeMaker&quot;&gt;https://metacpan.org/release/ExtUtils-MakeMaker&lt;/a&gt;.</source>
          <target state="translated">최신 정보는 &lt;a href=&quot;https://metacpan.org/release/ExtUtils-MakeMaker&quot;&gt;https://metacpan.org/release/ExtUtils-MakeMaker를&lt;/a&gt; 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="7c5c2213fe58f6b3f605b58797f837f5afaedfc4" translate="yes" xml:space="preserve">
          <source>For most list operators, the check function expects all the kid ops to be present already, so calling &lt;code&gt;newLISTOP(OP_JOIN, ...)&lt;/code&gt; (e.g.) is not appropriate. What you want to do in that case is create an op of type &lt;code&gt;OP_LIST&lt;/code&gt;, append more children to it, and then call &lt;a href=&quot;#op_convert_list&quot;&gt;&quot;op_convert_list&quot;&lt;/a&gt;. See &lt;a href=&quot;#op_convert_list&quot;&gt;&quot;op_convert_list&quot;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc54ba1fbc7345fca3a79ce3cc6b3a13627fa07b" translate="yes" xml:space="preserve">
          <source>For most list operators, the check function expects all the kid ops to be present already, so calling &lt;code&gt;newLISTOP(OP_JOIN, ...)&lt;/code&gt; (e.g.) is not appropriate. What you want to do in that case is create an op of type OP_LIST, append more children to it, and then call &lt;a href=&quot;#op_convert_list&quot;&gt;op_convert_list&lt;/a&gt;. See &lt;a href=&quot;#op_convert_list&quot;&gt;op_convert_list&lt;/a&gt; for more information.</source>
          <target state="translated">대부분의리스트 연산자의 경우, check 함수는 모든 키즈 op가 이미 존재할 것으로 예상하므로 &lt;code&gt;newLISTOP(OP_JOIN, ...)&lt;/code&gt; (예)를 호출하는 것은 적절하지 않습니다. 이 경우에 수행하려는 작업은 OP_LIST 유형의 op를 작성하고 더 많은 하위 항목을 추가 한 다음 &lt;a href=&quot;#op_convert_list&quot;&gt;op_convert_list&lt;/a&gt; 를 호출하는 것입니다. 입니다. 자세한 내용은 &lt;a href=&quot;#op_convert_list&quot;&gt;op_convert_list&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="174a0691ef8f586967e685261a60f6b9e856ffab" translate="yes" xml:space="preserve">
          <source>For most purposes, access to Unicode properties from the Perl core is through regular expression matches, as described in the next section. For some special purposes, and to access the properties that are not suitable for regular expression matching, all the Unicode character properties that Perl handles are accessible via the standard &lt;a href=&quot;Unicode::UCD&quot;&gt;Unicode::UCD&lt;/a&gt; module, as described in the section &lt;a href=&quot;#Properties-accessible-through-Unicode%3A%3AUCD&quot;&gt;&quot;Properties accessible through Unicode::UCD&quot;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641019bad56b8716009f9130458dd08e4eb5dd36" translate="yes" xml:space="preserve">
          <source>For most purposes, access to Unicode properties from the Perl core is through regular expression matches, as described in the next section. For some special purposes, and to access the properties that are not suitable for regular expression matching, all the Unicode character properties that Perl handles are accessible via the standard &lt;a href=&quot;unicode/ucd&quot;&gt;Unicode::UCD&lt;/a&gt; module, as described in the section &lt;a href=&quot;#Properties-accessible-through-Unicode%3a%3aUCD&quot;&gt;Properties accessible through Unicode::UCD&lt;/a&gt;.</source>
          <target state="translated">대부분의 경우 Perl 코어에서 유니 코드 속성에 액세스하려면 다음 섹션에 설명 된대로 정규식 일치를 사용해야합니다. 특수한 목적으로 정규 표현식 일치에 적합하지 않은 속성에 액세스하기 위해 Perl이 처리하는 모든 유니 코드 문자 속성은 표준 &lt;a href=&quot;unicode/ucd&quot;&gt;Unicode :: UCD&lt;/a&gt; 를 통해 액세스 할 수 있습니다.&lt;a href=&quot;#Properties-accessible-through-Unicode%3a%3aUCD&quot;&gt; 를 통해 액세스 할 수있는 속성&lt;/a&gt; 섹션에 설명 된대로 모듈을 통해 액세스 할 수 있습니다. .</target>
        </trans-unit>
        <trans-unit id="8d5ede1c7a0a1dfb0fe304691530ed6a243c7af0" translate="yes" xml:space="preserve">
          <source>For most use-cases the behavior described above is acceptable (this module and it's predecessor, &lt;code&gt;Compress::Zlib&lt;/code&gt; , have used it for over 10 years without an issue), but in a few very specific use-cases the amount of memory required for &lt;code&gt;$output&lt;/code&gt; can prohibitively large. For example, if the compressed data stream contains the same pattern repeated thousands of times, a relatively small compressed data stream can uncompress into hundreds of megabytes. Remember &lt;code&gt;inflate&lt;/code&gt; will keep allocating memory until</source>
          <target state="translated">대부분의 유스 케이스의 경우 위에서 설명한 동작이 허용됩니다 (이 모듈 및 이전 버전 인 &lt;code&gt;Compress::Zlib&lt;/code&gt; , 문제없이 10 년 이상 사용함). 매우 특정한 유스 케이스의 경우 필요한 메모리 양 &lt;code&gt;$output&lt;/code&gt; 은 엄청나게 클 수 있습니다. 예를 들어, 압축 된 데이터 스트림에 수천 번 반복 된 동일한 패턴이 포함되어 있으면 비교적 작은 압축 된 데이터 스트림이 수백 메가 바이트로 압축 해제 될 수 있습니다. &lt;code&gt;inflate&lt;/code&gt; 할 때까지 메모리 할당을 유지 한다는 것을 기억하십시오</target>
        </trans-unit>
        <trans-unit id="2d5502c5fd5a638c1b799b2700b5b6ce6e1659e5" translate="yes" xml:space="preserve">
          <source>For most use-cases the behavior described above is acceptable (this module and it's predecessor, &lt;code&gt;Compress::Zlib&lt;/code&gt;, have used it for over 10 years without an issue), but in a few very specific use-cases the amount of memory required for &lt;code&gt;$output&lt;/code&gt; can prohibitively large. For example, if the compressed data stream contains the same pattern repeated thousands of times, a relatively small compressed data stream can uncompress into hundreds of megabytes. Remember &lt;code&gt;inflate&lt;/code&gt; will keep allocating memory until</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a47940c15fef4c6625772cdc1427a983c441c3c1" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::Bzip2 object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">대부분의 Perl 버전에서 IO :: Compress :: Bzip2 객체가 소멸되면 (명시 적으로 또는 범위를 벗어난 객체에 대한 참조가있는 변수에 의해)이 메소드가 자동으로 호출됩니다. Perl 버전 5.005-5.00504 및 5.8.0은 예외입니다. 이 경우 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; 메소드는 자동으로 호출되지만 프로그램이 종료 될 때 모든 활성 객체가 전역 적으로 파괴 될 때까지 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="23920b654dfbc8ce7c84aac3c7565dfb2fb05fe1" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::Bzip2 object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adee5e79d5d3d779e5af1d2aba42639fd752741d" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::Deflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">대부분의 Perl 버전에서 IO :: Compress :: Deflate 객체가 소멸되면 (명시 적으로 또는 범위를 벗어난 객체에 대한 참조가있는 변수에 의해)이 메소드가 자동으로 호출됩니다. Perl 버전 5.005-5.00504 및 5.8.0은 예외입니다. 이 경우 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; 메소드는 자동으로 호출되지만 프로그램이 종료 될 때 모든 활성 객체가 전역 적으로 파괴 될 때까지 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e15daa2a40308e79a81902d846c186f3f2067215" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::Deflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddb04253a83c249a7e883f277739dcda8e2faecb" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::Gzip object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">대부분의 Perl 버전에서 IO :: Compress :: Gzip 객체가 소멸되면 (명시 적으로 또는 범위를 벗어난 객체에 대한 참조가있는 변수에 의해)이 메소드가 자동으로 호출됩니다. Perl 버전 5.005-5.00504 및 5.8.0은 예외입니다. 이러한 경우, &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; 메소드는 자동으로 호출되지만 프로그램이 종료 될 때 모든 활성 객체가 전역 적으로 파괴 될 때까지 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c6d04c166c9e6e72d327a3c840b77f5b2e4b1ae1" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::Gzip object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db349e7c47820dab5028b29921ade4c7bb32501" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::RawDeflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">대부분의 Perl 버전에서 IO :: Compress :: RawDeflate 객체가 소멸되면 (명시 적으로 또는 범위를 벗어난 객체에 대한 참조가있는 변수에 의해)이 메소드가 자동으로 호출됩니다. Perl 버전 5.005-5.00504 및 5.8.0은 예외입니다. 이 경우 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; 메소드는 자동으로 호출되지만 프로그램이 종료 될 때 모든 활성 객체가 전역 적으로 파괴 될 때까지 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="baa56c209aac193c41f95b5361ae9970d3d7f083" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::RawDeflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8861e38ef9ff01891126a94c9ec532f08b55ad77" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::Zip object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">대부분의 Perl 버전에서 IO :: Compress :: Zip 객체가 소멸되면 (명시 적으로 또는 범위를 벗어난 객체에 대한 참조가있는 변수에 의해)이 메소드가 자동으로 호출됩니다. Perl 버전 5.005-5.00504 및 5.8.0은 예외입니다. 이 경우 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; 메소드는 자동으로 호출되지만 프로그램이 종료 될 때 모든 활성 객체가 전역 적으로 파괴 될 때까지 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="367e53e06bed971be41757d70791ad740a85baed" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::Zip object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a5826884fe147f7ccc4745dc4c0dec56e5a8942" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::AnyInflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">대부분의 Perl 버전에서 IO :: Uncompress :: AnyInflate 객체가 소멸되면 (명시 적으로 또는 범위를 벗어난 객체에 대한 참조가있는 변수에 의해)이 메소드가 자동으로 호출됩니다. Perl 버전 5.005-5.00504 및 5.8.0은 예외입니다. 이 경우 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; 메소드는 자동으로 호출되지만 프로그램이 종료 될 때 모든 활성 객체가 전역 적으로 파괴 될 때까지 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fd642bda7c5d91d5bc02e48e947d99173d593c25" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::AnyInflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="000b46928e33aec75c1330e3f6828a697055beec" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::AnyUncompress object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">대부분의 Perl 버전에서이 메소드는 IO :: Uncompress :: AnyUncompress 오브젝트가 소멸되면 (명시 적으로 또는 범위를 벗어난 오브젝트에 대한 참조가있는 변수에 의해) 자동으로 호출됩니다. Perl 버전 5.005-5.00504 및 5.8.0은 예외입니다. 이 경우 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; 메소드는 자동으로 호출되지만 프로그램이 종료 될 때 모든 활성 객체가 전역 적으로 파괴 될 때까지 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cba38ddada34f81a67038fe6dd4acb03eaea39a3" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::AnyUncompress object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="621ae7f532cdf338357018b0efb4e6b8937e23cb" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::Bunzip2 object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">대부분의 Perl 버전에서 IO :: Uncompress :: Bunzip2 객체가 삭제되면 (명시 적으로 또는 범위를 벗어난 객체에 대한 참조가있는 변수에 의해)이 메소드가 자동으로 호출됩니다. Perl 버전 5.005-5.00504 및 5.8.0은 예외입니다. 이 경우 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; 메소드는 자동으로 호출되지만 프로그램이 종료 될 때 모든 활성 객체가 전역 적으로 파괴 될 때까지 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3446ab8bcaaa712ad41f49782d753286cc276fcd" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::Bunzip2 object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ebe07c14944aa0924ad00011dbfa6cf95fcffd3" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::Gunzip object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">대부분의 Perl 버전에서 IO :: Uncompress :: Gunzip 객체가 소멸되면 (명시 적으로 또는 범위를 벗어난 객체에 대한 참조가있는 변수에 의해)이 메소드가 자동으로 호출됩니다. Perl 버전 5.005-5.00504 및 5.8.0은 예외입니다. 이 경우 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; 메소드는 자동으로 호출되지만 프로그램이 종료 될 때 모든 활성 객체가 전역 적으로 파괴 될 때까지 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="275f6e1ad617775b3c8728d5af5f36ef5b729eb6" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::Gunzip object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02829219c19fdbb8502226558182b539540ef773" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::Inflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">대부분의 Perl 버전에서 IO :: Uncompress :: Inflate 객체가 소멸되면 (명시 적으로 또는 범위를 벗어난 객체에 대한 참조가있는 변수에 의해)이 메소드가 자동으로 호출됩니다. Perl 버전 5.005-5.00504 및 5.8.0은 예외입니다. 이 경우 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; 메소드는 자동으로 호출되지만 프로그램이 종료 될 때 모든 활성 객체가 전역 적으로 파괴 될 때까지 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d8ee77164ca078ffe6c117c5a7fa04d8e2ef6578" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::Inflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39bac215cf7e9ee43af43133ee6260672e9eebea" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::RawInflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">대부분의 Perl 버전에서 IO :: Uncompress :: RawInflate 객체가 소멸되면 (명시 적으로 또는 범위를 벗어난 객체에 대한 참조가있는 변수에 의해)이 메소드가 자동으로 호출됩니다. Perl 버전 5.005-5.00504 및 5.8.0은 예외입니다. 이 경우 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; 메소드는 자동으로 호출되지만 프로그램이 종료 될 때 모든 활성 객체가 전역 적으로 파괴 될 때까지 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bc27ba9bbe2cb5e4415d0f873bb53f1db0fe9c59" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::RawInflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e9e60d5738504f44dbe5db42b611750817984b" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::Unzip object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">대부분의 Perl 버전에서 IO :: Uncompress :: Unzip 객체가 소멸되면 (명시 적으로 또는 범위를 벗어난 객체에 대한 참조가있는 변수에 의해)이 메소드가 자동으로 호출됩니다. Perl 버전 5.005-5.00504 및 5.8.0은 예외입니다. 이 경우 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; 메소드는 자동으로 호출되지만 프로그램이 종료 될 때 모든 활성 객체가 전역 적으로 파괴 될 때까지 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="70164b405281cf49575d2ca4a4085fe8b83f457e" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::Unzip object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;close&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd39cf1198af939c9fe739680f896002c72f24d" translate="yes" xml:space="preserve">
          <source>For much more detail on using git with the Perl repository, please see &lt;a href=&quot;perlgit&quot;&gt;perlgit&lt;/a&gt;.</source>
          <target state="translated">Perl 저장소에서 git 사용에 대한 자세한 내용은 &lt;a href=&quot;perlgit&quot;&gt;perlgit을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="871377c6816e2c1ddeb868000c8473d11d71e038" translate="yes" xml:space="preserve">
          <source>For multilevel structures, you may wish to use an approach more like this one. It uses the CPAN module &lt;a href=&quot;freezethaw&quot;&gt;FreezeThaw&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2242f4fd4838cfce99d23a663a50e2e5c87ecf" translate="yes" xml:space="preserve">
          <source>For multilevel structures, you may wish to use an approach more like this one. It uses the CPAN module &lt;a href=&quot;http://search.cpan.org/perldoc/FreezeThaw&quot;&gt;FreezeThaw&lt;/a&gt;:</source>
          <target state="translated">다단계 구조의 경우 이와 비슷한 방식을 사용하는 것이 좋습니다. CPAN 모듈 &lt;a href=&quot;http://search.cpan.org/perldoc/FreezeThaw&quot;&gt;FreezeThaw을&lt;/a&gt; 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="4aaeeb42eefa8440218480ef685b6c057da2ebd8" translate="yes" xml:space="preserve">
          <source>For native multibyte encodings (either fixed or variable length), the current implementation of the regular expressions may introduce recoding errors for regular expression literals longer than 127 bytes.</source>
          <target state="translated">네이티브 멀티 바이트 인코딩 (고정 길이 또는 가변 길이)의 경우 정규 표현식의 현재 구현에서는 127 바이트보다 긴 정규 표현식 리터럴에 대한 레코딩 오류가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="db0739f14c22b332e1c9ef31d85863c468a6ec30" translate="yes" xml:space="preserve">
          <source>For natural language processing (so that, for example, apostrophes are included in words), use instead &lt;code&gt;\b{wb}&lt;/code&gt;</source>
          <target state="translated">자연어 처리 (예 : 어포 스트로피가 단어에 포함되도록) 대신 &lt;code&gt;\b{wb}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="34e4b4c1e84670ba2445432138762ce8b98922fa" translate="yes" xml:space="preserve">
          <source>For negative numbers in base see also &lt;a href=&quot;#brsft()&quot;&gt;brsft&lt;/a&gt;.</source>
          <target state="translated">기본 음수는 &lt;a href=&quot;#brsft()&quot;&gt;brsft를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7ca7fcdf10732e7f7d3b2022b3a393eb950297d5" translate="yes" xml:space="preserve">
          <source>For now it's static, but it may be exposed to the API in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11739ff4ce5853fede0de1666a77252b4cca5762" translate="yes" xml:space="preserve">
          <source>For numbers in the range 160 (0x00A0) to 255 (0x00FF), this maps from the character code for a Latin-1 character (like 233 for lowercase e-acute) to the US-ASCII character that best aproximates it (like &quot;e&quot;). You may find this useful if you are rendering POD in a format that you think deals well only with US-ASCII characters.</source>
          <target state="translated">160 (0x00A0) ~ 255 (0x00FF) 범위의 숫자 인 경우 라틴 -1 문자의 문자 코드 (예 : 소문자 e-acute의 경우 233)에서 가장 근접한 US-ASCII 문자 (예 : &quot;e &quot;). US-ASCII 문자 만 다루는 형식으로 POD를 렌더링하는 경우이 기능이 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0418167b8295aaa112b520d273cbff7734fb4037" translate="yes" xml:space="preserve">
          <source>For numeric conversions, you can specify the size to interpret the number as using &lt;code&gt;l&lt;/code&gt; , &lt;code&gt;h&lt;/code&gt; , &lt;code&gt;V&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt; , or &lt;code&gt;ll&lt;/code&gt; . For integer conversions (&lt;code&gt;d u o x X b i D U O&lt;/code&gt; ), numbers are usually assumed to be whatever the default integer size is on your platform (usually 32 or 64 bits), but you can override this to use instead one of the standard C types, as supported by the compiler used to build Perl:</source>
          <target state="translated">숫자 변환의 경우 &lt;code&gt;l&lt;/code&gt; , &lt;code&gt;h&lt;/code&gt; , &lt;code&gt;V&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;L&lt;/code&gt; 또는 &lt;code&gt;ll&lt;/code&gt; 을 사용하여 숫자를 해석 할 크기를 지정할 수 있습니다 . 정수 변환 ( &lt;code&gt;d u o x X b i D U O&lt;/code&gt; )의 경우 숫자는 일반적으로 플랫폼의 기본 정수 크기 (일반적으로 32 또는 64 비트)로 간주되지만 지원되는 표준 C 유형 중 하나를 사용하도록이를 재정의 할 수 있습니다. Perl을 빌드하는데 사용 된 컴파일러에 의해 :</target>
        </trans-unit>
        <trans-unit id="3f073c1258e51f971ca716359b2a89c0272776c0" translate="yes" xml:space="preserve">
          <source>For numeric conversions, you can specify the size to interpret the number as using &lt;code&gt;l&lt;/code&gt; , &lt;code&gt;h&lt;/code&gt; , &lt;code&gt;V&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;q&quot;&gt;q&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt; , or &lt;code&gt;ll&lt;/code&gt; . For integer conversions (&lt;code&gt;d u o x X b i D U O&lt;/code&gt; ), numbers are usually assumed to be whatever the default integer size is on your platform (usually 32 or 64 bits), but you can override this to use instead one of the standard C types, as supported by the compiler used to build Perl:</source>
          <target state="translated">숫자 변환의 경우 &lt;code&gt;l&lt;/code&gt; , &lt;code&gt;h&lt;/code&gt; , &lt;code&gt;V&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;q&quot;&gt;q&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;L&lt;/code&gt; 또는 &lt;code&gt;ll&lt;/code&gt; 을 사용하여 숫자를 해석 할 크기를 지정할 수 있습니다 . 정수 변환 ( &lt;code&gt;d u o x X b i D U O&lt;/code&gt; )의 경우 숫자는 일반적으로 플랫폼의 기본 정수 크기 (일반적으로 32 또는 64 비트)로 간주되지만 지원되는 표준 C 유형 중 하나를 사용하도록이를 재정의 할 수 있습니다. Perl을 빌드하는데 사용 된 컴파일러에 의해 :</target>
        </trans-unit>
        <trans-unit id="ec5571b634b4513a4a26946f73f0f29ad97efd26" translate="yes" xml:space="preserve">
          <source>For numeric conversions, you can specify the size to interpret the number as using &lt;code&gt;l&lt;/code&gt;, &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;V&lt;/code&gt;, &lt;code&gt;q&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, or &lt;code&gt;ll&lt;/code&gt;. For integer conversions (&lt;code&gt;d u o x X b i D U O&lt;/code&gt;), numbers are usually assumed to be whatever the default integer size is on your platform (usually 32 or 64 bits), but you can override this to use instead one of the standard C types, as supported by the compiler used to build Perl:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59b31b25c9f5d592cd415ce42cd1cd5b58c1c703" translate="yes" xml:space="preserve">
          <source>For objects, a method, &lt;code&gt;CARP_TRACE&lt;/code&gt; , will be called, if it exists. If this method doesn't exist, or it recurses into &lt;code&gt;Carp&lt;/code&gt; , or it otherwise throws an exception, this is skipped, and Carp moves on to the next option, otherwise checking stops and the string returned is used. It is recommended that the object's type is part of the string to make debugging easier.</source>
          <target state="translated">객체, 방법, &lt;code&gt;CARP_TRACE&lt;/code&gt; 가 존재하는 경우 호출됩니다. 이 메소드가 존재하지 않거나 &lt;code&gt;Carp&lt;/code&gt; 로 재귀 되거나 예외가 발생하면,이를 건너 뛰고 Carp는 다음 옵션으로 넘어 가고 그렇지 않으면 검사를 중지하고 리턴 된 문자열이 사용됩니다. 디버깅하기 쉽도록 객체 유형이 문자열의 일부인 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="26453edd50c7fcaafa3a553e9286fd74823a7eec" translate="yes" xml:space="preserve">
          <source>For objects, a method, &lt;code&gt;CARP_TRACE&lt;/code&gt;, will be called, if it exists. If this method doesn't exist, or it recurses into &lt;code&gt;Carp&lt;/code&gt;, or it otherwise throws an exception, this is skipped, and Carp moves on to the next option, otherwise checking stops and the string returned is used. It is recommended that the object's type is part of the string to make debugging easier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34e2a99f6a2eb99d86babea525e84b0d07848c0f" translate="yes" xml:space="preserve">
          <source>For old code and interim backwards compatibility, the &lt;code&gt;Thread&lt;/code&gt; module has been reworked to function as a frontend for the new interpreter threads (</source>
          <target state="translated">이전 코드와 이전 버전과의 호환성을 위해 &lt;code&gt;Thread&lt;/code&gt; 모듈은 새로운 인터프리터 스레드의 프론트 엔드로 작동하도록 재 작업되었습니다 (</target>
        </trans-unit>
        <trans-unit id="1d30b9e2796b9b0c84e9a075b6da3004ad758128" translate="yes" xml:space="preserve">
          <source>For opening pipes, Perl offers the option to call &lt;code&gt;open&lt;/code&gt; with a list comprising the desired command and all its own arguments as separate elements, rather than combining them into a single string as in the examples above. For instance, we could have phrased the &lt;code&gt;open&lt;/code&gt; call in the first example like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8222532b9dd6e1e6aafb484598b94575546178ff" translate="yes" xml:space="preserve">
          <source>For operations on %ENV entries based on logical names or DCL symbols, the key string is treated as if it were entirely uppercase, regardless of the case actually specified in the Perl expression. Entries in %ENV based on the CRTL's environ array preserve the case of the key string when stored, and lookups are case sensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54678b0f46a42f75ba9339772dde807022e3f850" translate="yes" xml:space="preserve">
          <source>For options that take list or hash values, it is necessary to indicate this by appending an &lt;code&gt;@&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt; sign after the type:</source>
          <target state="translated">목록 또는 해시 값을 취하는 옵션의 경우 &lt;code&gt;@&lt;/code&gt; 를 추가하여이를 표시해야합니다. 경우 유형 뒤에 또는 &lt;code&gt;%&lt;/code&gt; 기호를 표시해야합니다.</target>
        </trans-unit>
        <trans-unit id="ed4fe0865e6bc07b5c076581d59bd74aedec7133" translate="yes" xml:space="preserve">
          <source>For options that take values it must be specified whether the option value is required or not, and what kind of value the option expects.</source>
          <target state="translated">값을 갖는 옵션의 경우 옵션 값이 필요한지 여부와 옵션에 필요한 값을 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="14b3ef641443710b672e456ac43669f979bd2658" translate="yes" xml:space="preserve">
          <source>For ordinary files you can also use the &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">일반 파일의 경우 &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; 를 사용할 수도 있습니다 기능을 .</target>
        </trans-unit>
        <trans-unit id="d8ab6488a5756e1204e128aef5306b0dcff571d8" translate="yes" xml:space="preserve">
          <source>For ordinary files you can also use the &lt;code&gt;read&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18923d06b00ab1b78a669fe54fca08f48f38928d" translate="yes" xml:space="preserve">
          <source>For other Perl-based conversion options see the &lt;code&gt;Convert::*&lt;/code&gt; modules on CPAN.</source>
          <target state="translated">다른 Perl 기반 변환 옵션에 대해서는 &lt;code&gt;Convert::*&lt;/code&gt; 참조하십시오. CPAN 모듈을 .</target>
        </trans-unit>
        <trans-unit id="ecf4231003ccccf0ccb3fdcd4e5a986799fbca1f" translate="yes" xml:space="preserve">
          <source>For other filetypes, like &lt;code&gt;chardevs&lt;/code&gt; and &lt;code&gt;blockdevs&lt;/code&gt; we'll warn that the extraction of this particular item didn't work.</source>
          <target state="translated">&lt;code&gt;chardevs&lt;/code&gt; 및 &lt;code&gt;blockdevs&lt;/code&gt; 와 같은 다른 파일 형식의 경우 우리는이 특정 항목의 추출이 작동하지 않는 것을 경고합니다.</target>
        </trans-unit>
        <trans-unit id="e33d3f5c65b6dd681271a18e601e812a5a318019" translate="yes" xml:space="preserve">
          <source>For other initial values that are strings that do follow the rules of the magical increment, the corresponding sequence will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a61d39f00af378aaa32b4a9a3dedd635bdcf3408" translate="yes" xml:space="preserve">
          <source>For other locales, starting in Perl 5.16, you can specify</source>
          <target state="translated">Perl 5.16부터 다른 로케일의 경우 다음을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="55153fcdbe0c92eb8adc0abec175ecdf7f05a3ca" translate="yes" xml:space="preserve">
          <source>For other termination statuses, the severity portion of the subprocess's exit status is used: if the severity was success or informational, these bits are all 0; if the severity was warning, they contain a value of 1; if the severity was error or fatal error, they contain the actual severity bits, which turns out to be a value of 2 for error and 4 for severe_error. Fatal is another term for the severe_error status.</source>
          <target state="translated">다른 종료 상태의 경우 서브 프로세스 종료 상태의 심각도 부분이 사용됩니다. 심각도가 성공 또는 정보 인 경우이 비트는 모두 0입니다. 심각도가 경고 인 경우 값은 1입니다. 심각도가 오류이거나 치명적인 오류 인 경우 실제 심각도 비트를 포함하며, 오류의 경우 2, 심각 _ 오류의 경우 4로 나타납니다. 치명적인 오류는 심각한 오류 상태의 다른 용어입니다.</target>
        </trans-unit>
        <trans-unit id="d4996d7f48439f801246348adf91aaf2ab904b39" translate="yes" xml:space="preserve">
          <source>For our &lt;code&gt;File::MP3&lt;/code&gt; class, we can check to make sure that the path we're given ends with &quot;.mp3&quot;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c9ebb36f114d2e29800b2f2a876e7e2d770bfb" translate="yes" xml:space="preserve">
          <source>For our File::MP3 class, we can check to make sure that the path we're given ends with &quot;.mp3&quot;:</source>
          <target state="translated">File :: MP3 클래스의 경우 제공된 경로가 &quot;.mp3&quot;으로 끝나는 지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="90aad3aef5b3704234dd7e152135fa69067f60cd" translate="yes" xml:space="preserve">
          <source>For our example, we want to be able to emit debugging info to help in tracing during development. We keep also one convenience function around internally to help print out warnings; whowasi() returns the function name that calls it.</source>
          <target state="translated">이 예에서는 개발 중에 추적하는 데 도움이되는 디버깅 정보를 생성 할 수 있기를 원합니다. 우리는 또한 경고를 인쇄 할 수 있도록 내부적으로 하나의 편의 기능을 유지합니다. whowasi ()는이를 호출하는 함수 이름을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="aa18cdabf84f58c0c8a60b20d7ee4d847450d128" translate="yes" xml:space="preserve">
          <source>For our example, we're using a real hash so we'll do just the simple thing, but we'll have to go through the LIST field indirectly.</source>
          <target state="translated">이 예에서는 실제 해시를 사용하므로 간단한 작업 만 수행하지만 LIST 필드를 간접적으로 통과해야합니다.</target>
        </trans-unit>
        <trans-unit id="a68ea5110cc4475ea5587d223e48012123b172f2" translate="yes" xml:space="preserve">
          <source>For packing floating point numbers you have the choice between the pack codes &lt;code&gt;f&lt;/code&gt; , &lt;code&gt;d&lt;/code&gt; , &lt;code&gt;F&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt; . &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; pack into (or unpack from) single-precision or double-precision representation as it is provided by your system. If your systems supports it, &lt;code&gt;D&lt;/code&gt; can be used to pack and unpack (&lt;code&gt;long double&lt;/code&gt; ) values, which can offer even more resolution than &lt;code&gt;f&lt;/code&gt; or &lt;code&gt;d&lt;/code&gt; . &lt;b&gt;Note that there are different long double formats.&lt;/b&gt;</source>
          <target state="translated">부동 소수점 숫자를 패킹하는 경우 팩 코드 &lt;code&gt;f&lt;/code&gt; , &lt;code&gt;d&lt;/code&gt; , &lt;code&gt;F&lt;/code&gt; 및 &lt;code&gt;D&lt;/code&gt; 중에서 선택할 수 있습니다 . &lt;code&gt;f&lt;/code&gt; 및 &lt;code&gt;d&lt;/code&gt; 는 시스템에서 제공하는 단 정밀도 또는 배정 밀도 표현으로 포장 (또는 포장 풀기)합니다. 시스템에서 지원하는 경우 &lt;code&gt;D&lt;/code&gt; 를 사용하여 값을 압축하고 압축을 풀고 ( &lt;code&gt;long double&lt;/code&gt; ) &lt;code&gt;f&lt;/code&gt; 또는 &lt;code&gt;d&lt;/code&gt; 보다 훨씬 더 높은 해상도를 제공 할 수 있습니다 . &lt;b&gt;다른 long double 형식이 있습니다.&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="76806bda95f71c07efe4c6d78618b7e6da5cf2c5" translate="yes" xml:space="preserve">
          <source>For packing floating point numbers you have the choice between the pack codes &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt;. &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; pack into (or unpack from) single-precision or double-precision representation as it is provided by your system. If your systems supports it, &lt;code&gt;D&lt;/code&gt; can be used to pack and unpack (&lt;code&gt;long double&lt;/code&gt;) values, which can offer even more resolution than &lt;code&gt;f&lt;/code&gt; or &lt;code&gt;d&lt;/code&gt;. &lt;b&gt;Note that there are different long double formats.&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8468b6c8bdf361d5c232f81d9e06bb0f3375ac0a" translate="yes" xml:space="preserve">
          <source>For parsing or generating CSV, though, using &lt;a href=&quot;Text::CSV&quot;&gt;Text::CSV&lt;/a&gt; rather than implementing it yourself is highly recommended; you'll save yourself odd bugs popping up later by just using code which has already been tried and tested in production for years.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66df4e6482b9f11564ff3b3f20d96a2cc85b3ceb" translate="yes" xml:space="preserve">
          <source>For parsing or generating CSV, though, using &lt;a href=&quot;http://search.cpan.org/perldoc/Text::CSV&quot;&gt;Text::CSV&lt;/a&gt; rather than implementing it yourself is highly recommended; you'll save yourself odd bugs popping up later by just using code which has already been tried and tested in production for years.</source>
          <target state="translated">그러나 &lt;a href=&quot;http://search.cpan.org/perldoc/Text::CSV&quot;&gt;Text :: CSV를&lt;/a&gt; 사용하여 CSV를 구문 분석하거나 생성하는 경우 직접 구현하는 대신 하는 것이 좋습니다. 몇 년 동안 이미 생산 및 테스트 된 코드를 사용하여 나중에 발생하는 이상한 버그를 줄일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f69cf29834ba534ca455db4358ea32d4f29a81b1" translate="yes" xml:space="preserve">
          <source>For platforms that do not support the &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;&lt;code&gt;_PC_CHOWN_RESTRICTED&lt;/code&gt; symbol (for example, Windows NT) it is assumed that ``chown() giveaway'' is possible and the recursive test is performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ee0891ac5c639e853c5a4e5edc84af67afe5f45" translate="yes" xml:space="preserve">
          <source>For platforms that do not support the L</source>
          <target state="translated">L을 지원하지 않는 플랫폼의 경우</target>
        </trans-unit>
        <trans-unit id="6ef063b83223c50f839dae38551b2b8ac38cb283" translate="yes" xml:space="preserve">
          <source>For portability do not assume that the result of inet_aton() is 32 bits wide, in other words, that it would contain only the IPv4 address in network order.</source>
          <target state="translated">이식성을 위해 inet_aton ()의 결과가 32 비트 너비, 즉 네트워크 순서에 IPv4 주소 만 포함한다고 가정하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="a2f756b0930efbec9e5ee4bb36d81103dee350c4" translate="yes" xml:space="preserve">
          <source>For portability, when using features that may not be implemented on every machine, test the construct in an eval to see if it fails. If you know what version or patchlevel a particular feature was implemented, you can test &lt;code&gt;$]&lt;/code&gt; (&lt;code&gt;$PERL_VERSION&lt;/code&gt; in &lt;code&gt;English&lt;/code&gt; ) to see if it will be there. The &lt;code&gt;Config&lt;/code&gt; module will also let you interrogate values determined by the &lt;b&gt;Configure&lt;/b&gt; program when Perl was installed.</source>
          <target state="translated">이식성을 위해, 모든 머신에서 구현되지 않을 수있는 기능을 사용하는 경우, 어느 정도의 구조를 테스트하여 실패 여부를 확인하십시오. 당신이 어떤 버전을 알거나 특정 기능이 구현 된 패치 레벨 경우 테스트 할 수 있습니다 &lt;code&gt;$]&lt;/code&gt; ( &lt;code&gt;$PERL_VERSION&lt;/code&gt; 에서 &lt;code&gt;English&lt;/code&gt; 가있을 것입니다 있는지 확인하기 위해). &lt;code&gt;Config&lt;/code&gt; 모듈은 또한 당신이 결정 값을 심문하게됩니다 &lt;b&gt;구성&lt;/b&gt; 펄 설치할 때 프로그램을.</target>
        </trans-unit>
        <trans-unit id="667a732c0cd1a0f9b4ba34a10fae7dbe30a5b2ca" translate="yes" xml:space="preserve">
          <source>For portability, when using features that may not be implemented on every machine, test the construct in an eval to see if it fails. If you know what version or patchlevel a particular feature was implemented, you can test &lt;code&gt;$]&lt;/code&gt; (&lt;code&gt;$PERL_VERSION&lt;/code&gt; in &lt;code&gt;English&lt;/code&gt;) to see if it will be there. The &lt;code&gt;Config&lt;/code&gt; module will also let you interrogate values determined by the &lt;b&gt;Configure&lt;/b&gt; program when Perl was installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2535552b980c53cc7ba860a8dd5bb061008869b5" translate="yes" xml:space="preserve">
          <source>For portably packed integers, either use the formats &lt;code&gt;n&lt;/code&gt; , &lt;code&gt;N&lt;/code&gt; , &lt;code&gt;v&lt;/code&gt; , and &lt;code&gt;V&lt;/code&gt; or else use the &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; modifiers described immediately below. See also &lt;a href=&quot;../perlport&quot;&gt;perlport&lt;/a&gt;.</source>
          <target state="translated">이식 가능한 정수의 경우 &lt;code&gt;n&lt;/code&gt; , &lt;code&gt;N&lt;/code&gt; , &lt;code&gt;v&lt;/code&gt; 및 &lt;code&gt;V&lt;/code&gt; 형식을 사용하거나 바로 아래에 설명 된 &lt;code&gt;&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;&lt;/code&gt; 수정자를 사용하십시오 . &lt;a href=&quot;../perlport&quot;&gt;perlport&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f894cb82cd4f998730f7156c0afde9903978c5fb" translate="yes" xml:space="preserve">
          <source>For portably packed integers, either use the formats &lt;code&gt;n&lt;/code&gt; , &lt;code&gt;N&lt;/code&gt; , &lt;code&gt;v&lt;/code&gt; , and &lt;code&gt;V&lt;/code&gt; or else use the &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; modifiers described immediately below. See also &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;.</source>
          <target state="translated">이식 가능한 정수의 경우 &lt;code&gt;n&lt;/code&gt; , &lt;code&gt;N&lt;/code&gt; , &lt;code&gt;v&lt;/code&gt; 및 &lt;code&gt;V&lt;/code&gt; 형식을 사용하거나 바로 아래에 설명 된 &lt;code&gt;&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;&lt;/code&gt; 수정자를 사용하십시오 . &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5c4dbdd091869e50c1e23fd14ebbd4aa84675699" translate="yes" xml:space="preserve">
          <source>For portably packed integers, either use the formats &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;N&lt;/code&gt;, &lt;code&gt;v&lt;/code&gt;, and &lt;code&gt;V&lt;/code&gt; or else use the &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; modifiers described immediately below. See also &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac5fbdab915b3ad8a68aba0529c78d00fad23fe" translate="yes" xml:space="preserve">
          <source>For programs running in a terminal window (called a &quot;Console&quot; on some systems) the &quot;locale&quot; encoding is usually a good choice for what to expect as input and output. Some systems allows us to query the encoding set for the terminal and &lt;code&gt;Encode::Locale&lt;/code&gt; will do that if available and make these encodings known under the &lt;code&gt;Encode&lt;/code&gt; aliases &quot;console_in&quot; and &quot;console_out&quot;. For systems where we can't determine the terminal encoding these will be aliased as the same encoding as &quot;locale&quot;. The advice is to use &quot;console_in&quot; for input known to come from the terminal and &quot;console_out&quot; for output to the terminal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b858675dca7e5306d860cc596a9c8b3613be75" translate="yes" xml:space="preserve">
          <source>For purposes for forward compatibility, any result which does not match the following grammar is currently referred to as &lt;a href=&quot;TAP::Parser::Result::Unknown&quot;&gt;TAP::Parser::Result::Unknown&lt;/a&gt;. It is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b632d6b9c2c212334172ecdd5444e30d59c76fb4" translate="yes" xml:space="preserve">
          <source>For purposes for forward compatibility, any result which does not match the following grammar is currently referred to as &lt;a href=&quot;result/unknown&quot;&gt;TAP::Parser::Result::Unknown&lt;/a&gt;. It is</source>
          <target state="translated">순방향 호환성을 위해 다음 문법과 일치하지 않는 결과는 현재 &lt;a href=&quot;result/unknown&quot;&gt;TAP :: Parser :: Result :: Unknown&lt;/a&gt; 입니다. 그것은</target>
        </trans-unit>
        <trans-unit id="abd99590407faa93008cdde9678d67dea3d2be33" translate="yes" xml:space="preserve">
          <source>For purposes of Pod processing, there are four types of paragraphs in a Pod block:</source>
          <target state="translated">포드 처리를 위해 포드 블록에는 네 가지 유형의 단락이 있습니다.</target>
        </trans-unit>
        <trans-unit id="4cfab22b3264f8ba00ba2bb0d1b88a7edb82233a" translate="yes" xml:space="preserve">
          <source>For pushing a new context, the two basic functions are &lt;code&gt;cx = cx_pushblock()&lt;/code&gt;, which pushes a new basic context block and returns its address, and a family of similar functions with names like &lt;code&gt;cx_pushsub(cx)&lt;/code&gt; which populate the additional type-dependent fields in the &lt;code&gt;cx&lt;/code&gt; struct. Note that &lt;code&gt;CXt_NULL&lt;/code&gt; and &lt;code&gt;CXt_BLOCK&lt;/code&gt; don't have their own push functions, as they don't store any data beyond that pushed by &lt;code&gt;cx_pushblock&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c27afbc45a634cfd67eaae651454448b0cf48fa" translate="yes" xml:space="preserve">
          <source>For reading RFC 1950 files/buffers, see the companion module &lt;a href=&quot;../uncompress/inflate&quot;&gt;IO::Uncompress::Inflate&lt;/a&gt;.</source>
          <target state="translated">RFC 1950 파일 / 버퍼를 읽으려면 컴패니언 모듈 &lt;a href=&quot;../uncompress/inflate&quot;&gt;IO :: Uncompress :: Inflate를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="81233e3e4b4e07b503d46d77599e60a27d6b9764" translate="yes" xml:space="preserve">
          <source>For reading RFC 1950 files/buffers, see the companion module &lt;a href=&quot;IO::Uncompress::Inflate&quot;&gt;IO::Uncompress::Inflate&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a855ff5b11238f17f076a8b7ebdcff40a540c026" translate="yes" xml:space="preserve">
          <source>For reading RFC 1951 files/buffers, see the companion module &lt;a href=&quot;../uncompress/rawinflate&quot;&gt;IO::Uncompress::RawInflate&lt;/a&gt;.</source>
          <target state="translated">RFC 1951 파일 / 버퍼를 읽으려면 컴패니언 모듈 &lt;a href=&quot;../uncompress/rawinflate&quot;&gt;IO :: Uncompress :: RawInflate를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4d1b21fd558b78ea5b1f88a43871d753a2243687" translate="yes" xml:space="preserve">
          <source>For reading RFC 1951 files/buffers, see the companion module &lt;a href=&quot;IO::Uncompress::RawInflate&quot;&gt;IO::Uncompress::RawInflate&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c1e04df00546215699a3d4161d10f783f59e5d" translate="yes" xml:space="preserve">
          <source>For reading RFC 1952 files/buffers, see the companion module &lt;a href=&quot;../uncompress/gunzip&quot;&gt;IO::Uncompress::Gunzip&lt;/a&gt;.</source>
          <target state="translated">RFC 1952 파일 / 버퍼를 읽으려면 컴패니언 모듈 &lt;a href=&quot;../uncompress/gunzip&quot;&gt;IO :: Uncompress :: Gunzip을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="25b44b61cefd3c40917300b27512ef954427d81b" translate="yes" xml:space="preserve">
          <source>For reading RFC 1952 files/buffers, see the companion module &lt;a href=&quot;IO::Uncompress::Gunzip&quot;&gt;IO::Uncompress::Gunzip&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f2b20453bc89baeb5e50beb84ad2c8f70cd376" translate="yes" xml:space="preserve">
          <source>For reading bzip2 files/buffers, see the companion module &lt;a href=&quot;../uncompress/bunzip2&quot;&gt;IO::Uncompress::Bunzip2&lt;/a&gt;.</source>
          <target state="translated">bzip2 파일 / 버퍼를 읽으려면 컴패니언 모듈 &lt;a href=&quot;../uncompress/bunzip2&quot;&gt;IO :: Uncompress :: Bunzip2를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="151dd5ef7185ab3cdaba9ea4739cd891b7f5b472" translate="yes" xml:space="preserve">
          <source>For reading bzip2 files/buffers, see the companion module &lt;a href=&quot;IO::Uncompress::Bunzip2&quot;&gt;IO::Uncompress::Bunzip2&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="187e155fdbfcf5fc691664f658b9590cb0a606e3" translate="yes" xml:space="preserve">
          <source>For reading zip files/buffers, see the companion module &lt;a href=&quot;../uncompress/unzip&quot;&gt;IO::Uncompress::Unzip&lt;/a&gt;.</source>
          <target state="translated">zip 파일 / 버퍼를 읽으려면 컴패니언 모듈 &lt;a href=&quot;../uncompress/unzip&quot;&gt;IO :: Uncompress :: Unzip을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="dade52555ac7af53ff05a3d6b3206e5de546f80e" translate="yes" xml:space="preserve">
          <source>For reading zip files/buffers, see the companion module &lt;a href=&quot;IO::Uncompress::Unzip&quot;&gt;IO::Uncompress::Unzip&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78564d60b33f7a43b76c98479dd836adfae1de9e" translate="yes" xml:space="preserve">
          <source>For reference &lt;code&gt;Name_hash&lt;/code&gt; in &lt;a href=&quot;#Example-1&quot;&gt;&quot;Example 1&quot;&lt;/a&gt; shows the standard implementation of a simple class &lt;code&gt;Name&lt;/code&gt; in the well-known hash based way. It also demonstrates the predictable failure to construct a common subclass &lt;code&gt;NamedFile&lt;/code&gt; of &lt;code&gt;Name&lt;/code&gt; and the class &lt;code&gt;IO::File&lt;/code&gt; (whose objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bd2eb9a3cc8fd3a8df073b0ec5e2b4d099b5a11" translate="yes" xml:space="preserve">
          <source>For reference &lt;code&gt;Name_hash&lt;/code&gt; in &lt;a href=&quot;#Example-1&quot;&gt;Example 1&lt;/a&gt; shows the standard implementation of a simple class &lt;code&gt;Name&lt;/code&gt; in the well-known hash based way. It also demonstrates the predictable failure to construct a common subclass &lt;code&gt;NamedFile&lt;/code&gt; of &lt;code&gt;Name&lt;/code&gt; and the class &lt;code&gt;IO::File&lt;/code&gt; (whose objects</source>
          <target state="translated">참고 로 &lt;a href=&quot;#Example-1&quot;&gt;예제 1의 &lt;/a&gt; &lt;code&gt;Name_hash&lt;/code&gt; 는 잘 알려진 해시 기반 방식으로 간단한 클래스 &lt;code&gt;Name&lt;/code&gt; 의 표준 구현을 보여줍니다 . 또한 공통의 서브 클래스 구성 할 수있는 예측 실패 보여줍니다 &lt;code&gt;NamedFile&lt;/code&gt; 의 &lt;code&gt;Name&lt;/code&gt; 과 클래스 &lt;code&gt;IO::File&lt;/code&gt; 오브젝트 (</target>
        </trans-unit>
        <trans-unit id="c814c526315b7581980ad4c15539a698f43dc88e" translate="yes" xml:space="preserve">
          <source>For reference on how regular expressions are used in matching operations, plus various examples of the same, see discussions of &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;??&lt;/code&gt; in &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;Regexp Quote-Like Operators in perlop&lt;/a&gt;.</source>
          <target state="translated">정규 표현식이 일치하는 작업에 사용되는 방법과 그에 대한 다양한 예에 대한 참조는 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;??&lt;/code&gt; 에 대한 설명을 참조하십시오 . 에서 &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;perlop에서 정규 표현식 견적 같은 연산자&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fad7e87806bab30783c3c4927bdef95cd0d3e97d" translate="yes" xml:space="preserve">
          <source>For resolving Pod E&amp;lt;...&amp;gt; sequences</source>
          <target state="translated">포드 E &amp;lt;...&amp;gt; 시퀀스 해결</target>
        </trans-unit>
        <trans-unit id="cad9c58fdc25d8570f28df0f6e175a96676cf13c" translate="yes" xml:space="preserve">
          <source>For results that are less &quot;raw&quot; than this function returns, or to get the values for any property, not just the few covered by this function, use the &lt;a href=&quot;#charprop%28%29&quot;&gt;&quot;charprop()&quot;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b992296626805bd58c646a7af77319599bf4d43" translate="yes" xml:space="preserve">
          <source>For results that are less &quot;raw&quot; than this function returns, or to get the values for any property, not just the few covered by this function, use the &lt;a href=&quot;#charprop()&quot;&gt;charprop()&lt;/a&gt; function.</source>
          <target state="translated">이 함수가 반환하는 것보다 덜 &quot;원시&quot;인 결과를 &lt;a href=&quot;#charprop()&quot;&gt;보거나이&lt;/a&gt; 함수가 다루는 소수만이 아닌 모든 속성의 값을 얻으려면 charprop () 함수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="5465aa0069dd7e57a3ecfdd26acfc8c3e9bcb5cc" translate="yes" xml:space="preserve">
          <source>For scripts see UTR #24: &lt;a href=&quot;http://www.unicode.org/unicode/reports/tr24/&quot;&gt;http://www.unicode.org/unicode/reports/tr24/&lt;/a&gt;</source>
          <target state="translated">스크립트는 UTR # 24를 참조하십시오 : &lt;a href=&quot;http://www.unicode.org/unicode/reports/tr24/&quot;&gt;http://www.unicode.org/unicode/reports/tr24/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="915b1976024d3ee425c81de44cb9289f6d6a8ea2" translate="yes" xml:space="preserve">
          <source>For security reasons, which are probably detailed in your system's documentation for the C library &lt;code&gt;tmpnam()&lt;/code&gt; function, this interface is no longer available; instead use &lt;a href=&quot;File::Temp&quot;&gt;File::Temp&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbe77ef0bb7f245eb32b185bc4ca0da0057fd61e" translate="yes" xml:space="preserve">
          <source>For security reasons, which are probably detailed in your system's documentation for the C library &lt;code&gt;tmpnam()&lt;/code&gt; function, this interface should not be used; instead see &lt;a href=&quot;file/temp&quot;&gt;File::Temp&lt;/a&gt;.</source>
          <target state="translated">C 라이브러리 &lt;code&gt;tmpnam()&lt;/code&gt; 함수 에 대한 시스템 설명서에 자세히 설명되어있는 보안상의 이유로이 인터페이스를 사용해서는 안됩니다. 대신 &lt;a href=&quot;file/temp&quot;&gt;File :: Temp&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="804ad42eea097048c3a5ad09bc9b03cdfa4b060a" translate="yes" xml:space="preserve">
          <source>For sequential data set access try:</source>
          <target state="translated">순차 데이터 세트 액세스의 경우 :</target>
        </trans-unit>
        <trans-unit id="818cffd65dd943a27d57389f19079c5339480e53" translate="yes" xml:space="preserve">
          <source>For signed types, the smallest representable number is the most negative number, the one furthest away from zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e4114f1103bdc5a2ef0c90ce3439709bc47f4e2" translate="yes" xml:space="preserve">
          <source>For simple bindings to C libraries as well as other machine code libraries, consider instead using the much simpler &lt;a href=&quot;http://sourceware.org/libffi/&quot;&gt;libffi&lt;/a&gt; interface via CPAN modules like &lt;a href=&quot;FFI::Platypus&quot;&gt;FFI::Platypus&lt;/a&gt; or &lt;a href=&quot;FFI::Raw&quot;&gt;FFI::Raw&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef5bb90320f25f28778d12700a90184c79a71a09" translate="yes" xml:space="preserve">
          <source>For simple names like 'foo', when the normal search fails to find a matching page, a search with the &quot;perl&quot; prefix is tried as well. So &quot;perldoc intro&quot; is enough to find/render &quot;perlintro.pod&quot;.</source>
          <target state="translated">'foo'와 같은 간단한 이름의 경우 일반 검색에서 일치하는 페이지를 찾지 못하면 &quot;perl&quot;접두사를 사용한 검색도 시도됩니다. 따라서 &quot;perldoc intro&quot;는 &quot;perlintro.pod&quot;를 찾거나 렌더링하기에 충분합니다.</target>
        </trans-unit>
        <trans-unit id="d66288b1185a5c9c86687a29a94d6c46b18857df" translate="yes" xml:space="preserve">
          <source>For simple operators that evaluate all their operands and then combine the values in some way, precedence and associativity (and parentheses) imply some ordering requirements on those combining operations. For example, in &lt;code&gt;2 + 4 * 5&lt;/code&gt;, the grouping implied by precedence means that the multiplication of 4 and 5 must be performed before the addition of 2 and 20, simply because the result of that multiplication is required as one of the operands of the addition. But the order of operations is not fully determined by this: in &lt;code&gt;2 * 2 + 4 * 5&lt;/code&gt; both multiplications must be performed before the addition, but the grouping does not say anything about the order in which the two multiplications are performed. In fact Perl has a general rule that the operands of an operator are evaluated in left-to-right order. A few operators such as &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt; have special evaluation rules that can result in an operand not being evaluated at all; in general, the top-level operator in an expression has control of operand evaluation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f31df48e2f5125f12b903cd6899a267c7885c59c" translate="yes" xml:space="preserve">
          <source>For simple uses, &lt;a href=&quot;File::Spec::Functions&quot;&gt;File::Spec::Functions&lt;/a&gt; provides convenient functional forms of these methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="556d75ad92e978ff3b11a57397aef51991f4ff7e" translate="yes" xml:space="preserve">
          <source>For simple uses, &lt;a href=&quot;spec/functions&quot;&gt;File::Spec::Functions&lt;/a&gt; provides convenient functional forms of these methods.</source>
          <target state="translated">간단한 사용을 위해 &lt;a href=&quot;spec/functions&quot;&gt;File :: Spec :: Functions&lt;/a&gt; 는 이러한 메소드의 편리한 기능적 형태를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="9d03e819dd2058b21b6af8f56092068c3f695190" translate="yes" xml:space="preserve">
          <source>For single-byte locales, Perl generally takes the tack to use locale rules on code points that can fit in a single byte, and Unicode rules for those that can't (though this isn't uniformly applied, see the note at the end of this section). This prevents many problems in locales that aren't UTF-8. Suppose the locale is ISO8859-7, Greek. The character at 0xD7 there is a capital Chi. But in the ISO8859-1 locale, Latin1, it is a multiplication sign. The POSIX regular expression character class &lt;code&gt;[[:alpha:]]&lt;/code&gt; will magically match 0xD7 in the Greek locale but not in the Latin one.</source>
          <target state="translated">단일 바이트 로케일의 경우 Perl은 일반적으로 단일 바이트에 맞는 코드 포인트에서 로케일 규칙을 사용하고 그렇지 않은 코드 포인트에 대해서는 유니 코드 규칙을 사용하도록 압정을 취합니다 (이는 균일하게 적용되지는 않지만 끝에있는 참고 사항 참조). 이 섹션의). 이것은 UTF-8이 아닌 로케일에서 많은 문제를 방지합니다. 로케일이 ISO8859-7, 그리스인이라고 가정하십시오. 0xD7의 문자에는 대문자 Chi가 있습니다. 그러나 ISO8859-1 로켈 Latin1에서는 곱셈 부호입니다. POSIX 정규 표현식 문자 클래스 &lt;code&gt;[[:alpha:]]&lt;/code&gt; 는 그리스어 로켈에서는 0xD7과 마술 적으로 일치하지만 라틴어에서는 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="380d5b1307da78e3f0b19da4a2093d734fd7d578" translate="yes" xml:space="preserve">
          <source>For small inputs asin() and acos() may return complex numbers even when real numbers would be enough and correct, this happens because of floating-point inaccuracies. You can see these inaccuracies for example by trying theses:</source>
          <target state="translated">작은 입력의 경우 실수가 충분하고 올바른 경우에도 asin () 및 acos ()가 복소수를 반환 할 수 있습니다. 이는 부동 소수점 부정확성으로 인해 발생합니다. 예를 들어 다음을 시도하여 이러한 부정확성을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="19c29f66da4da426cc6fe898f14c790904d42bc1" translate="yes" xml:space="preserve">
          <source>For small systems, &lt;a href=&quot;Class::Tiny&quot;&gt;Class::Tiny&lt;/a&gt; and &lt;a href=&quot;Class::Accessor&quot;&gt;Class::Accessor&lt;/a&gt; both provide minimal object systems that take care of basic boilerplate for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0bc5ddd0ee51281e4f9659982e9a429afe81e41" translate="yes" xml:space="preserve">
          <source>For small systems, &lt;a href=&quot;http://search.cpan.org/perldoc/Class::Tiny&quot;&gt;Class::Tiny&lt;/a&gt; and &lt;a href=&quot;http://search.cpan.org/perldoc/Class::Accessor&quot;&gt;Class::Accessor&lt;/a&gt; both provide minimal object systems that take care of basic boilerplate for you.</source>
          <target state="translated">소형 시스템의 경우 &lt;a href=&quot;http://search.cpan.org/perldoc/Class::Tiny&quot;&gt;Class :: Tiny&lt;/a&gt; 및 &lt;a href=&quot;http://search.cpan.org/perldoc/Class::Accessor&quot;&gt;Class :: Accessor&lt;/a&gt; 는 기본 상용구를 관리하는 최소한의 객체 시스템을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="01fab25c098b96c0f08862d9d36fd9c003bafd92" translate="yes" xml:space="preserve">
          <source>For smoke testing you need a running Perl. You can either install the Synology supplied package for Perl 5.8.6, or build and install your own, much more recent version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="649df46c734150d637b1c77793718377fdc210a4" translate="yes" xml:space="preserve">
          <source>For some applications, the Perl parser mangles constants too much. It is possible to hook into this process via &lt;code&gt;overload::constant()&lt;/code&gt; and &lt;code&gt;overload::remove_constant()&lt;/code&gt; functions.</source>
          <target state="translated">일부 응용 프로그램의 경우 Perl 파서가 상수를 너무 많이 맹 글링합니다. &lt;code&gt;overload::constant()&lt;/code&gt; 및 &lt;code&gt;overload::remove_constant()&lt;/code&gt; 함수 를 통해이 프로세스에 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c75f56e634e770bcbf3c0f23b36b82ec0fc811d" translate="yes" xml:space="preserve">
          <source>For some combinations of base character and modifiers, there are</source>
          <target state="translated">기본 문자와 수정 자의 일부 조합에는</target>
        </trans-unit>
        <trans-unit id="5b2480bf16f6be7c86b401cccabe7d726d8e24b1" translate="yes" xml:space="preserve">
          <source>For some concrete examples, see the implementation of the first() and reduce() functions of List::Util 1.18. There you will also find a header file that emulates the multicall API on older versions of perl.</source>
          <target state="translated">구체적인 예는 List :: Util 1.18의 first () 및 reduce () 함수 구현을 참조하십시오. 또한 이전 버전의 perl에서 다중 호출 API를 에뮬레이트하는 헤더 파일도 있습니다.</target>
        </trans-unit>
        <trans-unit id="df3d3d98e3fd9c3e6c8341a04ded9e07c53eea35" translate="yes" xml:space="preserve">
          <source>For some core functions that always return a scalar value regardless of their context (eg, &lt;code&gt;chown&lt;/code&gt;), this may be 'scalar', even if you used a list context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c83ee66f318d1a73763c0a4e4314ae7b7e4530e" translate="yes" xml:space="preserve">
          <source>For some dual-life modules, it has not yet been determined if the CPAN version or the blead source is canonical. Until that is done, those modules should be in</source>
          <target state="translated">일부 이중 수명 모듈의 경우 CPAN 버전 또는 블리드 소스가 정식인지 여부는 아직 결정되지 않았습니다. 완료 될 때까지 해당 모듈은</target>
        </trans-unit>
        <trans-unit id="52922f69d414d9ab836b3e1640882c87c88c29f9" translate="yes" xml:space="preserve">
          <source>For some languages this issue may never come up (Danish is rarely expressed as &quot;da-DK&quot;, but instead is just &quot;da&quot;). And for other languages, the whole concept of a &quot;generic&quot; form may verge on being uselessly vague, particularly for interfaces involving voice media in forms of Arabic or Chinese.</source>
          <target state="translated">일부 언어의 경우이 문제가 발생하지 않을 수 있습니다 (덴마크어는 &quot;da-DK&quot;로 표현되는 경우가 거의없고 대신 &quot;da&quot;입니다). 그리고 다른 언어의 경우, &quot;일반&quot;형식의 전체 개념은 특히 아랍어 또는 중국어 형식의 음성 미디어와 관련된 인터페이스에 대해 모호하게 모호해질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8df7b58f3cdc3f5432c07cbb3014a32ed5bbfa9f" translate="yes" xml:space="preserve">
          <source>For some methods, the first parameter can be modified. That includes the possibility that you return a reference to a completely different object instead. Although keeping the reference and just changing its contents is preferred over creating and returning a different reference.</source>
          <target state="translated">일부 방법의 경우 첫 번째 매개 변수를 수정할 수 있습니다. 여기에는 완전히 다른 객체에 대한 참조를 대신 반환 할 가능성이 포함됩니다. 참조를 유지하고 내용을 변경하는 것이 다른 참조를 작성하고 리턴하는 것보다 선호됩니다.</target>
        </trans-unit>
        <trans-unit id="91b1402159268a636b935e75a5ef943d82112546" translate="yes" xml:space="preserve">
          <source>For some reason which I forget, Unix machines like to have PERL_DL_NONLAZY set for tests.</source>
          <target state="translated">내가 잊어 버린 어떤 이유로 유닉스 머신은 테스트를 위해 PERL_DL_NONLAZY를 설정하는 것을 좋아합니다.</target>
        </trans-unit>
        <trans-unit id="a7901ef2b61f75100e0830a3d919762868ec72c6" translate="yes" xml:space="preserve">
          <source>For some reason, the Fahrenheit to Celsius conversion fails to return the expected output. This is what it does:</source>
          <target state="translated">어떤 이유로 화씨에서 섭씨로의 변환은 예상 출력을 반환하지 못합니다. 이것이하는 일입니다.</target>
        </trans-unit>
        <trans-unit id="6836cb564e9866aa0dd506ea484f1257d833a6cb" translate="yes" xml:space="preserve">
          <source>For some reason, this table is incomplete! Several countries are missing from it, and I cannot find them anywhere on the UN site. I no longer use this as a source of data.</source>
          <target state="translated">어떤 이유로,이 테이블은 불완전합니다! 여러 국가가 빠져 있는데 UN 사이트 어디에서도 찾을 수 없습니다. 더 이상 이것을 데이터 소스로 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a332f8b91559722090ecdee63195fef34de8fd56" translate="yes" xml:space="preserve">
          <source>For some specific applications, you can use one of the DBM modules. See &lt;a href=&quot;anydbm_file&quot;&gt;AnyDBM_File&lt;/a&gt;. More generically, you should consult the &lt;a href=&quot;freezethaw&quot;&gt;FreezeThaw&lt;/a&gt; or &lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt; modules from CPAN. Starting from Perl 5.8, &lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt; is part of the standard distribution. Here's one example using &lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt;'s &lt;code&gt;store&lt;/code&gt; and &lt;code&gt;retrieve&lt;/code&gt; functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a2085644f6e69e810ea72163b3697d3339d4a3" translate="yes" xml:space="preserve">
          <source>For some specific applications, you can use one of the DBM modules. See &lt;a href=&quot;anydbm_file&quot;&gt;AnyDBM_File&lt;/a&gt;. More generically, you should consult the &lt;a href=&quot;http://search.cpan.org/perldoc/FreezeThaw&quot;&gt;FreezeThaw&lt;/a&gt; or &lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt; modules from CPAN. Starting from Perl 5.8, &lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt; is part of the standard distribution. Here's one example using &lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt;'s &lt;code&gt;store&lt;/code&gt; and &lt;code&gt;retrieve&lt;/code&gt; functions:</source>
          <target state="translated">일부 특정 애플리케이션의 경우 DBM 모듈 중 하나를 사용할 수 있습니다. &lt;a href=&quot;anydbm_file&quot;&gt;AnyDBM_File을&lt;/a&gt; 참조하십시오 . 보다 일반적으로 CPAN 의 &lt;a href=&quot;http://search.cpan.org/perldoc/FreezeThaw&quot;&gt;FreezeThaw&lt;/a&gt; 또는 &lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt; 모듈을 참조해야합니다 . Perl 5.8부터 &lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt; 은 표준 배포판의 일부입니다. 다음은 &lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt; 의 &lt;code&gt;store&lt;/code&gt; 및 &lt;code&gt;retrieve&lt;/code&gt; 기능을 사용하는 예입니다 .</target>
        </trans-unit>
        <trans-unit id="28412e9699e752fe2ce884e583f757f66a8d7305" translate="yes" xml:space="preserve">
          <source>For special considerations when Perl is embedded in a C program, see &lt;a href=&quot;perlembed#Using-embedded-Perl-with-POSIX-locales&quot;&gt;&quot;Using embedded Perl with POSIX locales&quot; in perlembed&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51552d3184ebb138bb755fdbaf9df407078be4d9" translate="yes" xml:space="preserve">
          <source>For special considerations when Perl is embedded in a C program, see &lt;a href=&quot;perlembed#Using-embedded-Perl-with-POSIX-locales&quot;&gt;Using embedded Perl with POSIX locales in perlembed&lt;/a&gt;.</source>
          <target state="translated">Perl이 C 프로그램에 임베드 될 때 특별 고려 사항 &lt;a href=&quot;perlembed#Using-embedded-Perl-with-POSIX-locales&quot;&gt;은 perlembed에서 POSIX 로케일에 임베드 된 Perl 사용을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c3096e773f08a69d8f07a30e5b724db8c36f8d5b" translate="yes" xml:space="preserve">
          <source>For state vars, &lt;code&gt;SVs_PADSTALE&lt;/code&gt; is overloaded to mean 'not yet initialised', but this internal state is stored in a separate pad entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db2592239bcf5cba780f2c2b2c780b3dad39ed83" translate="yes" xml:space="preserve">
          <source>For state vars, SVs_PADSTALE is overloaded to mean 'not yet initialised', but this internal state is stored in a separate pad entry.</source>
          <target state="translated">상태 변수의 경우 SVs_PADSTALE은 '아직 초기화되지 않음'을 의미하도록 오버로드되지만이 내부 상태는 별도의 패드 항목에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="4f995a537b2754e12ddb3d3bb6e010f88e9d99c4" translate="yes" xml:space="preserve">
          <source>For static extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0dd4dac3c9b3c360654ba0693c4a0d4f581ae73" translate="yes" xml:space="preserve">
          <source>For streams all in the same encoding, don't use encode/decode; instead set the file encoding when you open the file or immediately after with &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; as described later below.</source>
          <target state="translated">동일한 인코딩으로 된 스트림의 경우 인코딩 / 디코딩을 사용하지 마십시오. 대신 파일을 열 때 또는 아래에 설명 된대로 &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; 를 사용한 직후에 파일 인코딩을 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="4c744f241f049dcebffc056a277550d8a8466f28" translate="yes" xml:space="preserve">
          <source>For streams all in the same encoding, don't use encode/decode; instead set the file encoding when you open the file or immediately after with &lt;code&gt;binmode&lt;/code&gt; as described later below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dfae2e55787ddda9febdb90b2ecaeb6ae6a59fe" translate="yes" xml:space="preserve">
          <source>For streams being handed</source>
          <target state="translated">전달되는 스트림</target>
        </trans-unit>
        <trans-unit id="9dedf3c911e70154c6e95a2be8f174842c7bae09" translate="yes" xml:space="preserve">
          <source>For streams coming</source>
          <target state="translated">오는 스트림</target>
        </trans-unit>
        <trans-unit id="e0011302da40ab3a00fabe609704d25b18704f41" translate="yes" xml:space="preserve">
          <source>For string conversions, specifying a precision truncates the string to fit the specified width:</source>
          <target state="translated">문자열 변환의 경우 정밀도를 지정하면 문자열이 지정된 너비에 맞게 잘립니다.</target>
        </trans-unit>
        <trans-unit id="715b9be15d81e36207f8641c990be0fb81823314" translate="yes" xml:space="preserve">
          <source>For string values, &lt;code&gt;%&lt;/code&gt; returns the sum of the byte values saving you the trouble of a sum loop with &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">문자열 값의 경우 &lt;code&gt;%&lt;/code&gt; 는 바이트 값의 합을 반환하여 &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord&lt;/a&gt;&lt;/code&gt; 와 함께 합 루프의 문제를 줄입니다 .</target>
        </trans-unit>
        <trans-unit id="8622405258b1902f120cf645eb6484affafe8533" translate="yes" xml:space="preserve">
          <source>For string values, &lt;code&gt;%&lt;/code&gt; returns the sum of the byte values saving you the trouble of a sum loop with &lt;code&gt;substr&lt;/code&gt; and &lt;code&gt;ord&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c32ad512fb42bb2f5a39ca4f1c4f07aae935ceb" translate="yes" xml:space="preserve">
          <source>For successful testing you may need to turn on the sticky bit for your world readable /tmp directory if you have not already done so (see man chmod).</source>
          <target state="translated">테스트를 성공적으로 수행하려면 아직 읽을 수없는 경우 세계에서 읽을 수있는 / tmp 디렉토리의 고정 비트를 켜야합니다 (man chmod 참조).</target>
        </trans-unit>
        <trans-unit id="992f6aafd7fd171cd3b566817c93beb472bf462c" translate="yes" xml:space="preserve">
          <source>For such purposes we have &lt;code&gt;use_ok&lt;/code&gt; and &lt;code&gt;require_ok&lt;/code&gt; .</source>
          <target state="translated">이러한 목적으로 &lt;code&gt;use_ok&lt;/code&gt; 및 &lt;code&gt;require_ok&lt;/code&gt; 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="1316c8eebf1cc7abd8100a0a50a1220726638d68" translate="yes" xml:space="preserve">
          <source>For such purposes we have &lt;code&gt;use_ok&lt;/code&gt; and &lt;code&gt;require_ok&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c4b6e0ac5edafc6b41dd536125705f570c0a39" translate="yes" xml:space="preserve">
          <source>For symbols and dingbats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8172f7b548ca91c30bb8416a7346e1cc436d088e" translate="yes" xml:space="preserve">
          <source>For symmetry with the accessor methods and compatibility with &lt;code&gt;IO::Socket::INET&lt;/code&gt;, these are accepted as synonyms for &lt;code&gt;LocalHost&lt;/code&gt; and &lt;code&gt;LocalService&lt;/code&gt; respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9565e98b4027af01fa98942b43e97b089601e43b" translate="yes" xml:space="preserve">
          <source>For symmetry with the accessor methods and compatibility with &lt;code&gt;IO::Socket::INET&lt;/code&gt;, these are accepted as synonyms for &lt;code&gt;PeerHost&lt;/code&gt; and &lt;code&gt;PeerService&lt;/code&gt; respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0546a793b6579ee297b5975d16d0d21606bafc" translate="yes" xml:space="preserve">
          <source>For systems with no syntax differentiating filenames from directories, assumes that the last file is a path unless $no_file is true or a trailing separator or /. or /.. is present. On Unix this means that $no_file true makes this return ( '', $path, '' ).</source>
          <target state="translated">디렉토리와 파일 이름을 구분하는 구문이없는 시스템의 경우 $ no_file이 true이거나 후미 구분 기호 또는 /가 아니면 마지막 파일이 경로라고 가정합니다. 또는 / ..가 있습니다. 유닉스에서 이것은 $ no_file true가이 리턴 ( '', $ path, '')을 만든다는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="7b23c14e40a72fd26594732c2e008c8f7079954f" translate="yes" xml:space="preserve">
          <source>For systems with no syntax differentiating filenames from directories, assumes that the last file is a path unless &lt;code&gt;$no_file&lt;/code&gt; is true or a trailing separator or</source>
          <target state="translated">파일 이름과 디렉토리를 구분하는 구문이없는 시스템의 경우 &lt;code&gt;$no_file&lt;/code&gt; 이 true이거나 후미 구분 기호 또는</target>
        </trans-unit>
        <trans-unit id="de9a4f3b55d023729ba498cced87be89dcf7fa68" translate="yes" xml:space="preserve">
          <source>For systems without &lt;code&gt;nl_langinfo&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8192718cdaeae506b4891fb49ba411c744ee9076" translate="yes" xml:space="preserve">
          <source>For systems without nl_langinfo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41699a22da98ee5d514ab051852b7fdbdda93994" translate="yes" xml:space="preserve">
          <source>For tab indents, you'd use a tab character:</source>
          <target state="translated">탭 들여 쓰기에는 탭 문자를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="8bae2cd7dd972ee8bf90b611e367c374d03407e4" translate="yes" xml:space="preserve">
          <source>For that use &lt;a href=&quot;Shell::Command&quot;&gt;Shell::Command&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="873e054c44e61faf311e2453c2e600c934773fe0" translate="yes" xml:space="preserve">
          <source>For that use &lt;a href=&quot;http://search.cpan.org/perldoc/Shell::Command&quot;&gt;Shell::Command&lt;/a&gt;.</source>
          <target state="translated">이를 위해 &lt;a href=&quot;http://search.cpan.org/perldoc/Shell::Command&quot;&gt;Shell :: Command&lt;/a&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="f8e31e8dfe4611868531ce4559928a6d1882ff0a" translate="yes" xml:space="preserve">
          <source>For the</source>
          <target state="translated">대한</target>
        </trans-unit>
        <trans-unit id="2ab7693c25e01f8f8b5796198477bd097619e9dc" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;$i&lt;/code&gt;th type of supported media, the following variables will contain the following data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9111ece894932df874025e3e103411a73321fa27" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;csc&lt;/code&gt; , &lt;code&gt;cot&lt;/code&gt; , &lt;code&gt;asec&lt;/code&gt; , &lt;code&gt;acsc&lt;/code&gt; , &lt;code&gt;acot&lt;/code&gt; , &lt;code&gt;csch&lt;/code&gt; , &lt;code&gt;coth&lt;/code&gt; , &lt;code&gt;asech&lt;/code&gt; , &lt;code&gt;acsch&lt;/code&gt; , the argument cannot be &lt;code&gt;0&lt;/code&gt; (zero). For the &lt;code&gt;atanh&lt;/code&gt; , &lt;code&gt;acoth&lt;/code&gt; , the argument cannot be &lt;code&gt;1&lt;/code&gt; (one). For the &lt;code&gt;atanh&lt;/code&gt; , &lt;code&gt;acoth&lt;/code&gt; , the argument cannot be &lt;code&gt;-1&lt;/code&gt; (minus one). For the &lt;code&gt;tan&lt;/code&gt; , &lt;code&gt;sec&lt;/code&gt; , &lt;code&gt;tanh&lt;/code&gt; , &lt;code&gt;sech&lt;/code&gt; , the argument cannot be</source>
          <target state="translated">를 들어 &lt;code&gt;csc&lt;/code&gt; , &lt;code&gt;cot&lt;/code&gt; , &lt;code&gt;asec&lt;/code&gt; , &lt;code&gt;acsc&lt;/code&gt; , &lt;code&gt;acot&lt;/code&gt; , &lt;code&gt;csch&lt;/code&gt; , &lt;code&gt;coth&lt;/code&gt; , &lt;code&gt;asech&lt;/code&gt; , &lt;code&gt;acsch&lt;/code&gt; , 인수가 될 수 없습니다 &lt;code&gt;0&lt;/code&gt; (영). 를 들어 &lt;code&gt;atanh&lt;/code&gt; , &lt;code&gt;acoth&lt;/code&gt; , 인수가 될 수 없습니다 &lt;code&gt;1&lt;/code&gt; (하나). 를 들어 &lt;code&gt;atanh&lt;/code&gt; , &lt;code&gt;acoth&lt;/code&gt; , 인수가 될 수 없습니다 &lt;code&gt;-1&lt;/code&gt; (마이너스 일). 를 들어 &lt;code&gt;tan&lt;/code&gt; , &lt;code&gt;sec&lt;/code&gt; , &lt;code&gt;tanh&lt;/code&gt; , &lt;code&gt;sech&lt;/code&gt; , 인수가 될 수 없습니다</target>
        </trans-unit>
        <trans-unit id="18728ff4c7a96c743723724ec7c8d3bf1df62e46" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;csc&lt;/code&gt; , &lt;code&gt;cot&lt;/code&gt; , &lt;code&gt;asec&lt;/code&gt; , &lt;code&gt;acsc&lt;/code&gt; , &lt;code&gt;acot&lt;/code&gt; , &lt;code&gt;csch&lt;/code&gt; , &lt;code&gt;coth&lt;/code&gt; , &lt;code&gt;asech&lt;/code&gt; , &lt;code&gt;acsch&lt;/code&gt; , the argument cannot be &lt;code&gt;0&lt;/code&gt; (zero). For the logarithmic functions and the &lt;code&gt;atanh&lt;/code&gt; , &lt;code&gt;acoth&lt;/code&gt; , the argument cannot be &lt;code&gt;1&lt;/code&gt; (one). For the &lt;code&gt;atanh&lt;/code&gt; , &lt;code&gt;acoth&lt;/code&gt; , the argument cannot be &lt;code&gt;-1&lt;/code&gt; (minus one). For the &lt;code&gt;atan&lt;/code&gt; , &lt;code&gt;acot&lt;/code&gt; , the argument cannot be &lt;code&gt;i&lt;/code&gt; (the imaginary unit). For the &lt;code&gt;atan&lt;/code&gt; , &lt;code&gt;acoth&lt;/code&gt; , the argument cannot be &lt;code&gt;-i&lt;/code&gt; (the negative imaginary unit). For the &lt;code&gt;tan&lt;/code&gt; , &lt;code&gt;sec&lt;/code&gt; , &lt;code&gt;tanh&lt;/code&gt; , the argument cannot be</source>
          <target state="translated">를 들어 &lt;code&gt;csc&lt;/code&gt; , &lt;code&gt;cot&lt;/code&gt; , &lt;code&gt;asec&lt;/code&gt; , &lt;code&gt;acsc&lt;/code&gt; , &lt;code&gt;acot&lt;/code&gt; , &lt;code&gt;csch&lt;/code&gt; , &lt;code&gt;coth&lt;/code&gt; , &lt;code&gt;asech&lt;/code&gt; , &lt;code&gt;acsch&lt;/code&gt; , 인수가 될 수 없습니다 &lt;code&gt;0&lt;/code&gt; (영). 대수 함수와 &lt;code&gt;atanh&lt;/code&gt; , &lt;code&gt;acoth&lt;/code&gt; 의 경우 인수는 &lt;code&gt;1&lt;/code&gt; 이 될 수 없습니다 . 를 들어 &lt;code&gt;atanh&lt;/code&gt; , &lt;code&gt;acoth&lt;/code&gt; , 인수가 될 수 없습니다 &lt;code&gt;-1&lt;/code&gt; (마이너스 일). 들어 &lt;code&gt;atan&lt;/code&gt; , &lt;code&gt;acot&lt;/code&gt; , 인수는 수 &lt;code&gt;i&lt;/code&gt; (허수 부). 를 들어 &lt;code&gt;atan&lt;/code&gt; , &lt;code&gt;acoth&lt;/code&gt; 이면 인수는 &lt;code&gt;-i&lt;/code&gt; (음수의 허수 단위)가 될 수 없습니다 . 를 들어 &lt;code&gt;tan&lt;/code&gt; , &lt;code&gt;sec&lt;/code&gt; , &lt;code&gt;tanh&lt;/code&gt; , 인수가 될 수 없습니다</target>
        </trans-unit>
        <trans-unit id="346b2e1f556759583c381575ddeb8016b9e80c78" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;csc&lt;/code&gt;, &lt;code&gt;cot&lt;/code&gt;, &lt;code&gt;asec&lt;/code&gt;, &lt;code&gt;acsc&lt;/code&gt;, &lt;code&gt;acot&lt;/code&gt;, &lt;code&gt;csch&lt;/code&gt;, &lt;code&gt;coth&lt;/code&gt;, &lt;code&gt;asech&lt;/code&gt;, &lt;code&gt;acsch&lt;/code&gt;, the argument cannot be &lt;code&gt;0&lt;/code&gt; (zero). For the &lt;code&gt;atanh&lt;/code&gt;, &lt;code&gt;acoth&lt;/code&gt;, the argument cannot be &lt;code&gt;1&lt;/code&gt; (one). For the &lt;code&gt;atanh&lt;/code&gt;, &lt;code&gt;acoth&lt;/code&gt;, the argument cannot be &lt;code&gt;-1&lt;/code&gt; (minus one). For the &lt;code&gt;tan&lt;/code&gt;, &lt;code&gt;sec&lt;/code&gt;, &lt;code&gt;tanh&lt;/code&gt;, &lt;code&gt;sech&lt;/code&gt;, the argument cannot be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea0e3af121b9ce840c449a021cdee4606c555e7" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;csc&lt;/code&gt;, &lt;code&gt;cot&lt;/code&gt;, &lt;code&gt;asec&lt;/code&gt;, &lt;code&gt;acsc&lt;/code&gt;, &lt;code&gt;acot&lt;/code&gt;, &lt;code&gt;csch&lt;/code&gt;, &lt;code&gt;coth&lt;/code&gt;, &lt;code&gt;asech&lt;/code&gt;, &lt;code&gt;acsch&lt;/code&gt;, the argument cannot be &lt;code&gt;0&lt;/code&gt; (zero). For the logarithmic functions and the &lt;code&gt;atanh&lt;/code&gt;, &lt;code&gt;acoth&lt;/code&gt;, the argument cannot be &lt;code&gt;1&lt;/code&gt; (one). For the &lt;code&gt;atanh&lt;/code&gt;, &lt;code&gt;acoth&lt;/code&gt;, the argument cannot be &lt;code&gt;-1&lt;/code&gt; (minus one). For the &lt;code&gt;atan&lt;/code&gt;, &lt;code&gt;acot&lt;/code&gt;, the argument cannot be &lt;code&gt;i&lt;/code&gt; (the imaginary unit). For the &lt;code&gt;atan&lt;/code&gt;, &lt;code&gt;acoth&lt;/code&gt;, the argument cannot be &lt;code&gt;-i&lt;/code&gt; (the negative imaginary unit). For the &lt;code&gt;tan&lt;/code&gt;, &lt;code&gt;sec&lt;/code&gt;, &lt;code&gt;tanh&lt;/code&gt;, the argument cannot be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83159320f2b2918a98eed25d2752aaca30a22922" translate="yes" xml:space="preserve">
          <source>For the DynaLoader developer/porter there is a similar debugging variable added to the C code (see dlutils.c) and enabled if Perl was built with the &lt;b&gt;-DDEBUGGING&lt;/b&gt; flag. This can also be set via the PERL_DL_DEBUG environment variable. Set to 1 for minimal information or higher for more.</source>
          <target state="translated">DynaLoader 개발자 / 포터의 경우 비슷한 디버깅 변수가 C 코드에 추가되고 (dlutils.c 참조) Perl이 &lt;b&gt;-DDEBUGGING&lt;/b&gt; 플래그 로 빌드 된 경우 활성화됩니다 . PERL_DL_DEBUG 환경 변수를 통해 설정할 수도 있습니다. 최소한의 정보는 1로 설정하고 더 많은 정보는 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="df6005966cffcf3e4fd44657df74e3aab23993c1" translate="yes" xml:space="preserve">
          <source>For the above line, the explanation is</source>
          <target state="translated">위의 줄에 대한 설명은</target>
        </trans-unit>
        <trans-unit id="308a541c5c676511c31fc011fe0dfca962b7d55d" translate="yes" xml:space="preserve">
          <source>For the affirmative and negative responses and expressions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28357ce04ab4b5edf1ce3ff5857e726be487b1c5" translate="yes" xml:space="preserve">
          <source>For the block property, new-style block names are returned (see &lt;a href=&quot;#Old-style-versus-new-style-block-names&quot;&gt;&quot;Old-style versus new-style block names&quot;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b868cb4c593515bd8834adf9737c636cf76ddff" translate="yes" xml:space="preserve">
          <source>For the block property, new-style block names are returned (see &lt;a href=&quot;#Old-style-versus-new-style-block-names&quot;&gt;Old-style versus new-style block names&lt;/a&gt;).</source>
          <target state="translated">블록 특성의 경우 새 스타일 블록 이름이 리턴됩니다 ( &lt;a href=&quot;#Old-style-versus-new-style-block-names&quot;&gt;이전 스타일 대 새 스타일 블록 이름 참조&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="8fad95ff47a99f988dd4bfbc3ce6b3ff012c165e" translate="yes" xml:space="preserve">
          <source>For the character code set being used (such as &quot;ISO8859-1&quot;, &quot;cp850&quot;, &quot;koi8-r&quot;, &quot;sjis&quot;, &quot;utf8&quot;, etc.), and for the currency string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e62a0b0dfb533953b1b1d8670e578cf8cef3f43" translate="yes" xml:space="preserve">
          <source>For the constructs except here-docs, single characters are used as starting and ending delimiters. If the starting delimiter is an opening punctuation (that is &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;{&lt;/code&gt;, or &lt;code&gt;&amp;lt;&lt;/code&gt; ), the ending delimiter is the corresponding closing punctuation (that is &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt;, or &lt;code&gt;&amp;gt;&lt;/code&gt;). If the starting delimiter is an unpaired character like &lt;code&gt;/&lt;/code&gt; or a closing punctuation, the ending delimiter is the same as the starting delimiter. Therefore a &lt;code&gt;/&lt;/code&gt; terminates a &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq//&lt;/a&gt;&lt;/code&gt; construct, while a &lt;code&gt;]&lt;/code&gt; terminates both &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq[]&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq]]&lt;/a&gt;&lt;/code&gt; constructs.</source>
          <target state="translated">here-docs를 제외한 구문의 경우 단일 문자가 시작 및 끝 구분 기호로 사용됩니다. 시작 구분 기호가 여는 문장 부호 (즉 , &lt;code&gt;(&lt;/code&gt; , &lt;code&gt;[&lt;/code&gt; , &lt;code&gt;{&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;&lt;/code&gt; )) 인 경우 끝 구분 기호는 해당하는 닫는 문장 부호 (즉 , &lt;code&gt;)&lt;/code&gt; , &lt;code&gt;]&lt;/code&gt; , &lt;code&gt;}&lt;/code&gt; 또는 &lt;code&gt;&amp;gt;&lt;/code&gt; 입니다. 시작 구분 기호가 &lt;code&gt;/&lt;/code&gt; 또는 닫는 문장 부호 와 같이 짝이없는 문자 인 경우 끝 구분 기호는 시작 구분 기호와 같습니다. 따라서 a &lt;code&gt;/&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq//&lt;/a&gt;&lt;/code&gt; 구문을 종료하고 a &lt;code&gt;]&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq[]&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq]]&lt;/a&gt;&lt;/code&gt; 를 모두 종료합니다 . 구조물.</target>
        </trans-unit>
        <trans-unit id="6b1508372ec5c852fb914d9d65491d39fce5cbc0" translate="yes" xml:space="preserve">
          <source>For the constructs except here-docs, single characters are used as starting and ending delimiters. If the starting delimiter is an opening punctuation (that is &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;{&lt;/code&gt;, or &lt;code&gt;&amp;lt;&lt;/code&gt;), the ending delimiter is the corresponding closing punctuation (that is &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt;, or &lt;code&gt;&amp;gt;&lt;/code&gt;). If the starting delimiter is an unpaired character like &lt;code&gt;/&lt;/code&gt; or a closing punctuation, the ending delimiter is the same as the starting delimiter. Therefore a &lt;code&gt;/&lt;/code&gt; terminates a &lt;code&gt;qq//&lt;/code&gt; construct, while a &lt;code&gt;]&lt;/code&gt; terminates both &lt;code&gt;qq[]&lt;/code&gt; and &lt;code&gt;qq]]&lt;/code&gt; constructs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef084733533133935013f7856e15a65eba4fbaf8" translate="yes" xml:space="preserve">
          <source>For the date-time, date, and time formats used by the strftime() function (see &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88646295b920c4d75cffec415aa9265b6c6b789a" translate="yes" xml:space="preserve">
          <source>For the details of the current situation with calling external programs, see &lt;a href=&quot;#Starting-OS%2F2-%28and-DOS%29-programs-under-Perl&quot;&gt;&quot;Starting OS/2 (and DOS) programs under Perl&quot;&lt;/a&gt;. Set us mention a couple of features:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f199a5411adb8b18d5dcd3eca491b6d0afa516" translate="yes" xml:space="preserve">
          <source>For the details of the current situation with calling external programs, see &lt;a href=&quot;http://search.cpan.org/perldoc/Starting%20OS#2-(and-DOS)-programs-under-Perl&quot;&gt;2 (and DOS) programs under Perl in Starting OS&lt;/a&gt;. Set us mention a couple of features:</source>
          <target state="translated">외부 프로그램 호출에 대한 현재 상황에 대한 세부 사항은 &lt;a href=&quot;http://search.cpan.org/perldoc/Starting%20OS#2-(and-DOS)-programs-under-Perl&quot;&gt;OS 시작의 Perl 아래 2 (및 DOS) 프로그램을&lt;/a&gt; 참조하십시오 . 다음과 같은 몇 가지 기능을 언급하십시오.</target>
        </trans-unit>
        <trans-unit id="2b01295adb8fe2970489d2caf9aa0f33ed5cd1bc" translate="yes" xml:space="preserve">
          <source>For the eras based on typically some ruler, such as the Japanese Emperor (naturally only defined in the appropriate locales):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1218216e6666aa08fea7db0711070bf940dc1b0" translate="yes" xml:space="preserve">
          <source>For the example above, this produces the key &quot;13 1 2 3 4 5 6 7&quot;.</source>
          <target state="translated">위의 예에서는 키 &quot;13 1 2 3 4 5 6 7&quot;이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="42c4d465f3b13e5aba4384de319219a9fd5aed07" translate="yes" xml:space="preserve">
          <source>For the examples I'm going to assume that we're working with a 'normal' Perl module distribution. Specifically I'll assume that typing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb3be8f56df5259eb022c810ec0d5fe6e171757" translate="yes" xml:space="preserve">
          <source>For the full and latest information about Unicode see the latest Unicode standard, or the Unicode Consortium's website &lt;a href=&quot;http://www.unicode.org&quot;&gt;http://www.unicode.org&lt;/a&gt;</source>
          <target state="translated">유니 코드에 대한 전체 및 최신 정보는 최신 유니 코드 표준 또는 유니 코드 컨소시엄 웹 사이트 &lt;a href=&quot;http://www.unicode.org&quot;&gt;http://www.unicode.org를 참조하십시오.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ecd38a7a451c97a513905f310cabed89c1356fe4" translate="yes" xml:space="preserve">
          <source>For the full and latest information about Unicode see the latest Unicode standard, or the Unicode Consortium's website &lt;a href=&quot;https://www.unicode.org&quot;&gt;https://www.unicode.org&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d63c3394a872688489af1ca37f8d47f75f94c7f" translate="yes" xml:space="preserve">
          <source>For the inverse cosine operation, you may use the &lt;a href=&quot;Math::Trig&quot;&gt;&lt;code&gt;Math::Trig::acos&lt;/code&gt;&lt;/a&gt; function, or use this relation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8668a856ebdec95f7f9bedf605f00147e6a5c893" translate="yes" xml:space="preserve">
          <source>For the inverse cosine operation, you may use the &lt;code&gt;Math::Trig::acos()&lt;/code&gt; function, or use this relation:</source>
          <target state="translated">역 코사인 연산의 경우 &lt;code&gt;Math::Trig::acos()&lt;/code&gt; 함수를 사용하거나 다음 관계를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a905ba655e6e826aa1adf29366a4b3be68fc4622" translate="yes" xml:space="preserve">
          <source>For the inverse sine operation, you may use the &lt;code&gt;Math::Trig::asin&lt;/code&gt; function, or use this relation:</source>
          <target state="translated">&lt;code&gt;Math::Trig::asin&lt;/code&gt; 경우 Math :: Trig :: asin 함수를 사용 하거나이 관계를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="365be163ec9f7d875805b3de60bcb8b6218efdf9" translate="yes" xml:space="preserve">
          <source>For the locales for which it makes sense to have ante meridiem and post meridiem time formats:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6876721cfa8799910e64a479d1896bac8905fc75" translate="yes" xml:space="preserve">
          <source>For the long explanation, see David Goldberg's &quot;What Every Computer Scientist Should Know About Floating-Point Arithmetic&quot; (&lt;a href=&quot;http://web.cse.msu.edu/~cse320/Documents/FloatingPoint.pdf&quot;&gt;http://web.cse.msu.edu/~cse320/Documents/FloatingPoint.pdf&lt;/a&gt;).</source>
          <target state="translated">자세한 설명은 David Goldberg의 &quot;모든 컴퓨터 과학자가 부동 소수점 산술에 대해 알아야 할 사항&quot;( &lt;a href=&quot;http://web.cse.msu.edu/~cse320/Documents/FloatingPoint.pdf&quot;&gt;http://web.cse.msu.edu/~cse320/Documents/FloatingPoint.pdf&lt;/a&gt; )을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4d74797f259ed5344193b607b1a74b7262472d3c" translate="yes" xml:space="preserve">
          <source>For the more enlightened: note that in the following descriptions, lowercase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab2b9b857d720a0495db321b12b78ce4f7c0fe32" translate="yes" xml:space="preserve">
          <source>For the most part, everything should just work.</source>
          <target state="translated">대부분의 경우 모든 것이 제대로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="64bfdda2355e6cc7b725609cd6e4467f4aa79c60" translate="yes" xml:space="preserve">
          <source>For the most part, the &lt;b&gt;Pod::Parser&lt;/b&gt; base class should be able to do most of the input parsing for you and leave you free to worry about how to interpret the commands and translate the result.</source>
          <target state="translated">대부분의 경우, &lt;b&gt;Pod :: Parser&lt;/b&gt; 기본 클래스는 대부분의 입력 구문 분석을 수행 할 수 있어야하며 명령 해석 및 결과 변환 방법에 대해 걱정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="b31f0c96329dc815fb597a9a6cc95acfa25f02c3" translate="yes" xml:space="preserve">
          <source>For the most part, this class will only be used when operating on the result of the &lt;code&gt;feature&lt;/code&gt; or &lt;code&gt;features&lt;/code&gt; methods on a &lt;a href=&quot;CPAN::Meta&quot;&gt;CPAN::Meta&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a0e7967ce42595fba722f8b428604ad3ef68e4c" translate="yes" xml:space="preserve">
          <source>For the pattern of regex operators (&lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt;), the quoting from &lt;code&gt;\Q&lt;/code&gt; is applied after interpolation is processed, but before escapes are processed. This allows the pattern to match literally (except for &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; ). For example, the following matches:</source>
          <target state="translated">정규 표현식 연산자 패턴 ( &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; )의 경우 &lt;code&gt;\Q&lt;/code&gt; 의 인용은 보간이 처리 된 후 이스케이프가 처리되기 전에 적용됩니다. 이를 통해 패턴이 문자 그대로 일치 할 수 있습니다 ( &lt;code&gt;$&lt;/code&gt; 및 &lt;code&gt;@&lt;/code&gt; 제외 ). 예를 들어, 다음이 일치합니다.</target>
        </trans-unit>
        <trans-unit id="bafad4ed65b3c7770f9cc7f69f78389fee2299f4" translate="yes" xml:space="preserve">
          <source>For the pattern of regex operators (&lt;code&gt;qr//&lt;/code&gt;, &lt;code&gt;m//&lt;/code&gt; and &lt;code&gt;s///&lt;/code&gt;), the quoting from &lt;code&gt;\Q&lt;/code&gt; is applied after interpolation is processed, but before escapes are processed. This allows the pattern to match literally (except for &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt;). For example, the following matches:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3962dca7589f77e8258212e6709cb6dc2b855dcb" translate="yes" xml:space="preserve">
          <source>For the purpose of inheritance every overloaded package behaves as if &lt;code&gt;fallback&lt;/code&gt; is present (possibly undefined). This may create interesting effects if some package is not overloaded, but inherits from two overloaded packages.</source>
          <target state="translated">상속을 위해 모든 오버로드 된 패키지는 폴 &lt;code&gt;fallback&lt;/code&gt; 존재하는 것처럼 작동합니다 (아마도 정의되지 않은 것 같습니다). 일부 패키지가 오버로드되지 않았지만 두 개의 오버로드 된 패키지에서 상속되는 경우 흥미로운 효과가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="82c1e221649c157f620843ea4889acff34e37d34" translate="yes" xml:space="preserve">
          <source>For the purpose of this pragma, interpolation of precompiled regular expressions (i.e., the result of &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt;) is</source>
          <target state="translated">이 pragma의 목적 상, 미리 컴파일 된 정규 표현식의 보간 (즉, &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; 의 결과 )은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d47eb1ba14307bbe26aa054571857eee69a2cf71" translate="yes" xml:space="preserve">
          <source>For the purpose of this pragma, interpolation of precompiled regular expressions (i.e., the result of &lt;code&gt;qr//&lt;/code&gt;) is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="390690bb7f49cda49f3b364ee9e751f4c6ef962d" translate="yes" xml:space="preserve">
          <source>For the purposes of this discussion you can think of a zip file as sequence of compressed data streams, each of which is prefixed by an uncompressed local header. The local header contains information about the compressed data stream, including the name of the compressed file and, in particular, the length of the compressed data stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1aa087cdbd433afbbd707aff339d630b47008df" translate="yes" xml:space="preserve">
          <source>For the purposes of this module, a version &quot;number&quot; is a sequence of positive integer values separated by one or more decimal points and optionally a single underscore. This corresponds to what Perl itself uses for a version, as well as extending the &quot;version as number&quot; that is discussed in the various editions of the Camel book.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba3e421d172c8c68f6d89fe7339af35a2610b123" translate="yes" xml:space="preserve">
          <source>For the regular expression, /\bPerl\b/, there has to be a word boundary before the &quot;P&quot; and after the &quot;l&quot;. As long as something other than a word character precedes the &quot;P&quot; and succeeds the &quot;l&quot;, the pattern will match. These strings match /\bPerl\b/.</source>
          <target state="translated">정규식 / \ bPerl \ b /의 경우 &quot;P&quot;앞과 &quot;l&quot;뒤에 단어 경계가 있어야합니다. 단어 이외의 문자가 &quot;P&quot;앞에오고 &quot;l&quot;에 성공하면 패턴이 일치합니다. 이 문자열은 / \ bPerl \ b /와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="6f420a434584dca0d2af03f0912dee0967b4dc89" translate="yes" xml:space="preserve">
          <source>For the reverse of stringifying, see the &lt;code&gt;make&lt;/code&gt; and &lt;code&gt;emake&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;emake&lt;/code&gt; 화의 역순은 &lt;code&gt;make&lt;/code&gt; 및 emake를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="22aee4c1c943c8dd445e407193849fc0aeb0c73c" translate="yes" xml:space="preserve">
          <source>For the reverse of stringifying, see the &lt;code&gt;make&lt;/code&gt; and &lt;code&gt;emake&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb38c53d822d8e08d87924c605322b6766068193" translate="yes" xml:space="preserve">
          <source>For the reverse operation, we'll have to determine the number of items in the buffer before we can let &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; rip it apart:</source>
          <target state="translated">역 동작을하려면, &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; 전에 버퍼에있는 아이템의 수를 결정해야합니다 :</target>
        </trans-unit>
        <trans-unit id="f55d580f3d25be1004e547072eb1c8e14b41bc39" translate="yes" xml:space="preserve">
          <source>For the reverse operation, we'll have to determine the number of items in the buffer before we can let &lt;code&gt;unpack&lt;/code&gt; rip it apart:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc883c9ac944705d2c3538c7663a30491ff44ec" translate="yes" xml:space="preserve">
          <source>For the reverse, see &lt;a href=&quot;#chr&quot;&gt;chr&lt;/a&gt;. See &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt; for more about Unicode.</source>
          <target state="translated">반대의 경우, &lt;a href=&quot;#chr&quot;&gt;chr을&lt;/a&gt; 참조하십시오 . 유니 코드에 대한 자세한 내용은 &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="22f8818d8708e71f6ec66e345451b685437b1bcc" translate="yes" xml:space="preserve">
          <source>For the reverse, see &lt;a href=&quot;#chr-NUMBER&quot;&gt;&lt;code&gt;chr&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt; for more about Unicode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60cbf2eafc92f15723736c9c72868093d76361c9" translate="yes" xml:space="preserve">
          <source>For the reverse, see &lt;a href=&quot;chr&quot;&gt;chr&lt;/a&gt;. See &lt;a href=&quot;../perlunicode&quot;&gt;perlunicode&lt;/a&gt; for more about Unicode.</source>
          <target state="translated">반대의 경우, &lt;a href=&quot;chr&quot;&gt;chr을&lt;/a&gt; 참조하십시오 . 유니 코드에 대한 자세한 내용은 &lt;a href=&quot;../perlunicode&quot;&gt;perlunicode&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="467ceafc8b99b23ed78b230316a1d2fd5db20386" translate="yes" xml:space="preserve">
          <source>For the reverse, use &lt;a href=&quot;#ord&quot;&gt;ord&lt;/a&gt;.</source>
          <target state="translated">반대로, &lt;a href=&quot;#ord&quot;&gt;ord를&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="5e259a8f2631f2297eddd983b45285cad9dd7ea6" translate="yes" xml:space="preserve">
          <source>For the reverse, use &lt;a href=&quot;#ord-EXPR&quot;&gt;&lt;code&gt;ord&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6051659642df2e97b5594ae4ac7df1aad97530d" translate="yes" xml:space="preserve">
          <source>For the reverse, use &lt;a href=&quot;ord&quot;&gt;ord&lt;/a&gt;.</source>
          <target state="translated">반대로, &lt;a href=&quot;ord&quot;&gt;ord를&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="38d054c00f17c4b75d354767445d50200681238a" translate="yes" xml:space="preserve">
          <source>For the rounding mode, see &lt;a href=&quot;#fegetround&quot;&gt;&quot;fegetround&quot;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f75a65f093671232956735031c2585d37439c1" translate="yes" xml:space="preserve">
          <source>For the rounding mode, see &lt;a href=&quot;#fegetround&quot;&gt;fegetround&lt;/a&gt;.</source>
          <target state="translated">반올림 모드는 &lt;a href=&quot;#fegetround&quot;&gt;fegetround를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="94a7023212a15791913a95ba1c43764471fafd45" translate="yes" xml:space="preserve">
          <source>For the sake of speed and efficiency, most of the encodings are now supported via a</source>
          <target state="translated">속도와 효율성을 위해 대부분의 인코딩은 이제</target>
        </trans-unit>
        <trans-unit id="ad21271dd49f14dc112f37ba2aaf54b53f9fb3d0" translate="yes" xml:space="preserve">
          <source>For the sake of speed for a common case, in the above algorithms backslashes in the command name are not considered as shell metacharacters.</source>
          <target state="translated">일반적인 경우 속도를 높이기 위해 위의 알고리즘에서 명령 이름의 백 슬래시는 셸 메타 문자로 간주되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8e59f411bd38c6c508217160dc7c21633cf4c1fa" translate="yes" xml:space="preserve">
          <source>For the subsequent examples, the following three objects will be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b5f5529b4811c88bf12667f10ef39f565d104d" translate="yes" xml:space="preserve">
          <source>For the tangent operation, you may use the &lt;a href=&quot;Math::Trig#tan&quot;&gt;&lt;code&gt;Math::Trig::tan&lt;/code&gt;&lt;/a&gt; function, or use the familiar relation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13bb8b6279ccfe0d9f624beb9c39acf42987a9f6" translate="yes" xml:space="preserve">
          <source>For the tangent operation, you may use the &lt;code&gt;Math::Trig::tan&lt;/code&gt; function, or use the familiar relation:</source>
          <target state="translated">탄젠트 연산의 경우 &lt;code&gt;Math::Trig::tan&lt;/code&gt; 함수를 사용하거나 익숙한 관계를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2285c9ff17a7e14c88876a7216e0b2f44e88a62a" translate="yes" xml:space="preserve">
          <source>For the time being, any necessary padding must be done by the user. Fortunately, this is a simple operation: if the length of a Base64-encoded digest isn't a multiple of 4, simply append &quot;=&quot; characters to the end of the digest until it is:</source>
          <target state="translated">당분간 필요한 패딩은 사용자가 수행해야합니다. 다행히도 이것은 간단한 작업입니다. Base64로 인코딩 된 다이제스트의 길이가 4의 배수가 아닌 경우 다이제스트 끝에 &quot;=&quot;문자를 추가 할 때까지 다음과 같이하십시오.</target>
        </trans-unit>
        <trans-unit id="cf756832c302bebd32aa11a0956539748cfdf6c6" translate="yes" xml:space="preserve">
          <source>For the various values of PERLIO see &lt;a href=&quot;perlrun#PERLIO&quot;&gt;&quot;PERLIO&quot; in perlrun&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08b2d3f59edd8b61350507d43c91115b5897da2d" translate="yes" xml:space="preserve">
          <source>For the various values of PERLIO see &lt;a href=&quot;perlrun#PERLIO&quot;&gt;PERLIO in perlrun&lt;/a&gt;.</source>
          <target state="translated">PERLIO의 다양한 값은 &lt;a href=&quot;perlrun#PERLIO&quot;&gt;perlrun&lt;/a&gt; 의 PERLIO를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c05e1cff70ef8d8af8951cca948259111de268a1" translate="yes" xml:space="preserve">
          <source>For the version 2 spec, either of these are recommended:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8844b265400f6667c325f1ddff5acf01441d43a0" translate="yes" xml:space="preserve">
          <source>For these purposes &quot;formats&quot; are a kind-of CV; eval&quot;&quot;s are too (except they're not callable at will and are always thrown away after the eval&quot;&quot; is done executing). Require'd files are simply evals without any outer lexical scope.</source>
          <target state="translated">이러한 목적을 위해 &quot;형식&quot;은 일종의 CV입니다. eval &quot;&quot;도 마찬가지입니다 (단, 그들이 마음대로 호출 할 수없고 eval &quot;&quot;이 실행 된 후에 항상 버려집니다 &quot;). 필요한 파일은 외부 어휘 범위없이 간단히 사라집니다.</target>
        </trans-unit>
        <trans-unit id="ce3d10f5200fd9f35eb39a2e2f3aff9e21a56d2a" translate="yes" xml:space="preserve">
          <source>For this discussion, we'll implement an array whose elements are a fixed size at creation. If you try to create an element larger than the fixed size, you'll take an exception. For example:</source>
          <target state="translated">이 토론에서는 생성시 요소의 크기가 고정 된 배열을 구현합니다. 고정 크기보다 큰 요소를 만들려고하면 예외가 발생합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ec93c9a1c9a22841521a0f685ab9c42198948730" translate="yes" xml:space="preserve">
          <source>For this facet the &lt;code&gt;details&lt;/code&gt; flag is the info itself. This info may be a string, or it may be a data structure to display. This is one of the few facet types that may contain blessed items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5772dfbe4384ac965da1291fe16122d9475d85d4" translate="yes" xml:space="preserve">
          <source>For this grouping operator there is no need to describe the ordering, since only whether or not &lt;code&gt;&quot;S&quot;&lt;/code&gt; can match is important.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ffd7f12ddaa1b6fb60aa095946c012384bca946" translate="yes" xml:space="preserve">
          <source>For this grouping operator there is no need to describe the ordering, since only whether or not &lt;code&gt;S&lt;/code&gt; can match is important.</source>
          <target state="translated">이 그룹화 연산자의 경우 &lt;code&gt;S&lt;/code&gt; 를 일치시킬 수 있는지 여부 만 중요하기 때문에 순서를 설명 할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="cc327a8066a607761f2f00ba1baa6fe5fc670e29" translate="yes" xml:space="preserve">
          <source>For this particular case an INIT: keyword would generate the same C code as the PREINIT: keyword. Another correct, but error-prone example:</source>
          <target state="translated">이 특별한 경우에 INIT : 키워드는 PREINIT : 키워드와 동일한 C 코드를 생성합니다. 정확하지만 오류가 발생하기 쉬운 다른 예 :</target>
        </trans-unit>
        <trans-unit id="145862e7b4274977f12fe15b3504a6befbd27f0c" translate="yes" xml:space="preserve">
          <source>For this reason, Unicode strings need to be converted to UTF-8-encoded bytestrings before they are handed off to &lt;code&gt;add_data()&lt;/code&gt; :</source>
          <target state="translated">이러한 이유로, 유니 코드 문자열은 &lt;code&gt;add_data()&lt;/code&gt; 로 전달되기 전에 UTF-8로 인코딩 된 바이트 문자열로 변환되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="fc0ff89547dd83d311973992bf89484e1f803dba" translate="yes" xml:space="preserve">
          <source>For this reason, Unicode strings need to be converted to UTF-8-encoded bytestrings before they are handed off to &lt;code&gt;add_data()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23642ebadbd7c22bbe2f1b8f71fef7bd367e8bfc" translate="yes" xml:space="preserve">
          <source>For this reason, it is best to use either exclusively &lt;a href=&quot;#Decimal-Versions&quot;&gt;&quot;Decimal Versions&quot;&lt;/a&gt; or &lt;a href=&quot;#Dotted-Decimal-Versions&quot;&gt;&quot;Dotted-Decimal Versions&quot;&lt;/a&gt; with multiple decimal points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12f450dabc7b58bb8714d17b3247fd233b4ac792" translate="yes" xml:space="preserve">
          <source>For this reason, the following functions are exported by default:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b9d5527f46d12ea221667541772074c58883c4" translate="yes" xml:space="preserve">
          <source>For this reason, the use of &lt;code&gt;END&lt;/code&gt; blocks in threads is &lt;b&gt;strongly&lt;/b&gt; discouraged.</source>
          <target state="translated">이러한 이유로, 사용 &lt;code&gt;END&lt;/code&gt; 의 스레드 블록입니다 &lt;b&gt;강하게&lt;/b&gt; 낙담.</target>
        </trans-unit>
        <trans-unit id="2e6029ba6f79e9357a32ebfe487f07ef84ef2774" translate="yes" xml:space="preserve">
          <source>For this to happen, the class must not be inverted (see &lt;a href=&quot;#Negation&quot;&gt;&quot;Negation&quot;&lt;/a&gt;) and the character must be explicitly specified, and not be part of a multi-character range (not even as one of its endpoints). (&lt;a href=&quot;#Character-Ranges&quot;&gt;&quot;Character Ranges&quot;&lt;/a&gt; will be explained shortly.) Therefore,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e04b91b7b687e03cffdfdf3a54823d050aa6f6b" translate="yes" xml:space="preserve">
          <source>For this to happen, the class must not be inverted (see &lt;a href=&quot;#Negation&quot;&gt;Negation&lt;/a&gt;) and the character must be explicitly specified, and not be part of a multi-character range (not even as one of its endpoints). (&lt;a href=&quot;#Character-Ranges&quot;&gt;Character Ranges&lt;/a&gt; will be explained shortly.) Therefore,</source>
          <target state="translated">이를 위해서는 클래스를 &lt;a href=&quot;#Negation&quot;&gt;뒤집지&lt;/a&gt; 말아야하고 ( 부정 참조 ) 문자를 명시 적으로 지정해야하며 다중 문자 범위의 일부가 아니어야합니다 (끝점 중 하나가 아님). ( &lt;a href=&quot;#Character-Ranges&quot;&gt;문자 범위에&lt;/a&gt; 대해서는 간략히 설명하겠습니다.) 따라서</target>
        </trans-unit>
        <trans-unit id="4962bac27fafbf6fe36c6c22f396afad1ac5eaa1" translate="yes" xml:space="preserve">
          <source>For those following along at home, I'm using version 1.31. It has some bugs, which is good -- we'll uncover them with our tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5f1c25c243913e44f46f14a2a6685401a32ac3f" translate="yes" xml:space="preserve">
          <source>For those grammatical pedants out there, there's an &lt;code&gt;isn't()&lt;/code&gt; function which is an alias of &lt;code&gt;isnt()&lt;/code&gt; .</source>
          <target state="translated">거기 그 문법의 pedants를 들어, 거기 &lt;code&gt;isn't()&lt;/code&gt; 의 별칭입니다 기능 &lt;code&gt;isnt()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4fe2bf8eec8a22fe8c016bab33b57d2281ef0bc2" translate="yes" xml:space="preserve">
          <source>For those grammatical pedants out there, there's an &lt;code&gt;isn't()&lt;/code&gt; function which is an alias of &lt;code&gt;isnt()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5deffbc1fa52453a9ca6f464a2919125f9183261" translate="yes" xml:space="preserve">
          <source>For those of you that choose to use the GNU General Public License, my interpretation of the GNU General Public License is that no Perl script falls under the terms of the GPL unless you explicitly put said script under the terms of the GPL yourself. Furthermore, any object code linked with perl does not automatically fall under the terms of the GPL, provided such object code only adds definitions of subroutines and variables, and does not otherwise impair the resulting interpreter from executing any standard Perl script. I consider linking in C subroutines in this manner to be the moral equivalent of defining subroutines in the Perl language itself. You may sell such an object file as proprietary provided that you provide or offer to provide the Perl source, as specified by the GNU General Public License. (This is merely an alternate way of specifying input to the program.) You may also sell a binary produced by the dumping of a running Perl script that belongs to you, provided that you provide or offer to provide the Perl source as specified by the GPL. (The fact that a Perl interpreter and your code are in the same binary file is, in this case, a form of mere aggregation.) This is my interpretation of the GPL. If you still have concerns or difficulties understanding my intent, feel free to contact me. Of course, the Artistic License spells all this out for your protection, so you may prefer to use that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0194baebcc4ad338a3d27044bda911227e0fa177" translate="yes" xml:space="preserve">
          <source>For those of you who don't like additional global variables being created, &lt;code&gt;getopt()&lt;/code&gt; and &lt;code&gt;getopts()&lt;/code&gt; will also accept a hash reference as an optional second argument. Hash keys will be &lt;code&gt;x&lt;/code&gt; (where &lt;code&gt;x&lt;/code&gt; is the switch name) with key values the value of the argument or &lt;code&gt;1&lt;/code&gt; if no argument is specified.</source>
          <target state="translated">추가 전역 변수 작성을 원하지 않는 사용자에게는 &lt;code&gt;getopt()&lt;/code&gt; 및 &lt;code&gt;getopts()&lt;/code&gt; 도 해시 참조를 선택적 두 번째 인수로 허용합니다. 해시 키는 &lt;code&gt;x&lt;/code&gt; (여기서 &lt;code&gt;x&lt;/code&gt; 는 스위치 이름)이며 키 값은 인수 값이거나 인수가 지정되지 않은 경우 &lt;code&gt;1&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9b7b01e9b9a30ca0a332a8ff42ff01fc2ab10b42" translate="yes" xml:space="preserve">
          <source>For those preferring a higher-level interface to socket programming, the IO::Socket module provides an object-oriented approach. If for some reason you lack this module, you can just fetch IO::Socket from CPAN, where you'll also find modules providing easy interfaces to the following systems: DNS, FTP, Ident (RFC 931), NIS and NISPlus, NNTP, Ping, POP3, SMTP, SNMP, SSLeay, Telnet, and Time--to name just a few.</source>
          <target state="translated">소켓 프로그래밍에 대한 높은 수준의 인터페이스를 선호하는 사람들을 위해 IO :: Socket 모듈은 객체 지향 접근 방식을 제공합니다. 어떤 이유로이 모듈이없는 경우 CPAN에서 IO :: Socket을 가져올 수 있습니다. 여기서 DNS, FTP, Ident (RFC 931), NIS 및 NISPlus, NNTP와 같은 시스템에 쉽게 인터페이스를 제공하는 모듈을 찾을 수 있습니다. , Ping, POP3, SMTP, SNMP, SSLeay, Telnet 및 Time 등이 있습니다.</target>
        </trans-unit>
        <trans-unit id="7b6803d170c6a809b2f0929a1db9d42c4a1638fc" translate="yes" xml:space="preserve">
          <source>For those times when it is necessary to have platform-specific code, consider keeping the platform-specific code in one place, making porting to other platforms easier. Use the &lt;a href=&quot;config&quot;&gt;&lt;code&gt;Config&lt;/code&gt;&lt;/a&gt; module and the special variable &lt;a href=&quot;perlvar#%24%5EO&quot;&gt;&lt;code&gt;$^O&lt;/code&gt;&lt;/a&gt; to differentiate platforms, as described in &lt;a href=&quot;#PLATFORMS&quot;&gt;&quot;PLATFORMS&quot;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e42062d65775a1867386b08263976fa1b5777e72" translate="yes" xml:space="preserve">
          <source>For those times when it is necessary to have platform-specific code, consider keeping the platform-specific code in one place, making porting to other platforms easier. Use the &lt;code&gt;Config&lt;/code&gt; module and the special variable &lt;code&gt;$^O&lt;/code&gt; to differentiate platforms, as described in &lt;a href=&quot;#PLATFORMS&quot;&gt;PLATFORMS&lt;/a&gt;.</source>
          <target state="translated">플랫폼 별 코드가 필요한 경우에는 플랫폼 별 코드를 한 곳에 보관하여 다른 플랫폼으로 쉽게 포팅하는 것이 좋습니다. 사용 &lt;code&gt;Config&lt;/code&gt; 모듈과 특수 변수 &lt;code&gt;$^O&lt;/code&gt; 에 설명 된대로 미분 플랫폼, &lt;a href=&quot;#PLATFORMS&quot;&gt;플랫폼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="84af40bcdd6cb4fcbd3aceb5a4aa3593a23036aa" translate="yes" xml:space="preserve">
          <source>For those to work, the Pod-processing subclass of Pod::Simple::PullParser has to have defined a $parser-&amp;gt;run method -- so it is advised that all Pod::Simple::PullParser subclasses do so. See the Synopsis above, or the source for Pod::Simple::RTF.</source>
          <target state="translated">이들이 작동하려면 Pod :: Simple :: PullParser의 포드 처리 서브 클래스가 $ parser-&amp;gt; run 메소드를 정의해야하므로 모든 Pod :: Simple :: PullParser 서브 클래스가 그렇게하는 것이 좋습니다. 위의 개요 또는 Pod :: Simple :: RTF 소스를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="57708cdc23a61a116a94a02091f20a5743825ee2" translate="yes" xml:space="preserve">
          <source>For those variables that have an &lt;b&gt;awk&lt;/b&gt; version, both long and short English alternatives are provided. For example, the &lt;code&gt;$/&lt;/code&gt; variable can be referred to either $RS or $INPUT_RECORD_SEPARATOR if you are using the English module.</source>
          <target state="translated">&lt;b&gt;awk&lt;/b&gt; 버전 이있는 변수의 경우 길고 짧은 영어 대안이 모두 제공됩니다. 예를 들어, 영어 모듈을 사용하는 경우 &lt;code&gt;$/&lt;/code&gt; 변수는 $ RS 또는 $ INPUT_RECORD_SEPARATOR로 참조 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="77dc5e1818ffcbdcb5923e64ae62b0ce953321cb" translate="yes" xml:space="preserve">
          <source>For thread safety, modules should not set this variable directly. Instead, use the function &lt;a href=&quot;#wrap_keyword_plugin&quot;&gt;&quot;wrap_keyword_plugin&quot;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1caee866e0ba0f6f4c3e9009d1a1c337443500a" translate="yes" xml:space="preserve">
          <source>For thread safety, modules should not write directly to this array. Instead, use the function &lt;a href=&quot;#wrap_op_checker&quot;&gt;&quot;wrap_op_checker&quot;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a0a89c68e7b08863ca5af8b26671ca9622ae82" translate="yes" xml:space="preserve">
          <source>For thread safety, modules should not write directly to this array. Instead, use the function &lt;a href=&quot;#wrap_op_checker&quot;&gt;wrap_op_checker&lt;/a&gt;.</source>
          <target state="translated">스레드 안전을 위해 모듈은이 어레이에 직접 쓰지 않아야합니다. 대신 &lt;a href=&quot;#wrap_op_checker&quot;&gt;wrap_op_checker&lt;/a&gt; 함수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="5cacce03e577b17c33a4569c50a9b7a97dcf2d96" translate="yes" xml:space="preserve">
          <source>For threaded builds, perl requires the context pointer for the current thread, without &lt;code&gt;PERL_NO_GET_CONTEXT&lt;/code&gt; , perl will call a function to retrieve the context.</source>
          <target state="translated">스레드 빌드의 경우 perl에는 &lt;code&gt;PERL_NO_GET_CONTEXT&lt;/code&gt; 없이 현재 스레드에 대한 컨텍스트 포인터가 필요합니다 . perl은 컨텍스트를 검색하는 함수를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="1e36297db8e3af2703536174bead20acca4a7329" translate="yes" xml:space="preserve">
          <source>For threaded builds, perl requires the context pointer for the current thread, without &lt;code&gt;PERL_NO_GET_CONTEXT&lt;/code&gt;, perl will call a function to retrieve the context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5847b93f0e1805fa116eb823dc4911eae257671b" translate="yes" xml:space="preserve">
          <source>For three or more arguments if MODE is &lt;code&gt;|-&lt;/code&gt; , the filename is interpreted as a command to which output is to be piped, and if MODE is &lt;code&gt;-|&lt;/code&gt; , the filename is interpreted as a command that pipes output to us. In the two-argument (and one-argument) form, one should replace dash (&lt;code&gt;-&lt;/code&gt; ) with the command. See &lt;a href=&quot;../perlipc#Using-open()-for-IPC&quot;&gt;Using open() for IPC in perlipc&lt;/a&gt; for more examples of this. (You are not allowed to &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; to a command that pipes both in</source>
          <target state="translated">MODE가 &lt;code&gt;|-&lt;/code&gt; 인 경우 세 개 이상의 인수의 경우 파일 이름은 출력을 파이프 할 명령으로 해석되고 MODE가 &lt;code&gt;-|&lt;/code&gt; , 파일 이름은 출력을 우리에게 파이프하는 명령으로 해석됩니다. 2 인수 (및 1 인수) 형식에서 대시 ( &lt;code&gt;-&lt;/code&gt; )를 명령으로 바꿔야 합니다. &lt;a href=&quot;../perlipc#Using-open()-for-IPC&quot;&gt;이에&lt;/a&gt; 대한 자세한 예는 perlipc에서 IPC에 open () 사용을 참조하십시오 . ( 둘 다 파이프하는 명령 을 &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="6dd4431238a703da90497fd4857cf48e6171b713" translate="yes" xml:space="preserve">
          <source>For three or more arguments if MODE is &lt;code&gt;|-&lt;/code&gt;, the filename is interpreted as a command to which output is to be piped, and if MODE is &lt;code&gt;-|&lt;/code&gt;, the filename is interpreted as a command that pipes output to us. In the two-argument (and one-argument) form, one should replace dash (&lt;code&gt;-&lt;/code&gt; ) with the command. See &lt;a href=&quot;perlipc#Using-open()-for-IPC&quot;&gt;Using open() for IPC in perlipc&lt;/a&gt; for more examples of this. (You are not allowed to &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; to a command that pipes both in</source>
          <target state="translated">MODE가 &lt;code&gt;|-&lt;/code&gt; 인 경우 세 개 이상의 인수의 경우 파일 이름은 출력을 파이프 할 명령으로 해석되고 MODE가 &lt;code&gt;-|&lt;/code&gt; , 파일 이름은 출력을 우리에게 파이프하는 명령으로 해석됩니다. 2 인수 (및 1 인수) 형식에서 대시 ( &lt;code&gt;-&lt;/code&gt; )를 명령으로 바꿔야 합니다. &lt;a href=&quot;perlipc#Using-open()-for-IPC&quot;&gt;이에&lt;/a&gt; 대한 자세한 예는 perlipc에서 IPC에 open () 사용을 참조하십시오 . ( 둘 다 파이프하는 명령 을 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="b283a2fa2bd66d5501a346a99049b4737bd298a9" translate="yes" xml:space="preserve">
          <source>For true color emulators, this module supports attributes of the form &lt;code&gt;r&lt;i&gt;NNN&lt;/i&gt;g&lt;i&gt;NNN&lt;/i&gt;b&lt;i&gt;NNN&lt;/i&gt;&lt;/code&gt; and &lt;code&gt;on_r&lt;i&gt;NNN&lt;/i&gt;g&lt;i&gt;NNN&lt;/i&gt;b&lt;i&gt;NNN&lt;/i&gt;&lt;/code&gt; for all values of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0bc3c26fcb300fd98352a1ae34da3a3601ab99b" translate="yes" xml:space="preserve">
          <source>For true color terminals, the recognized foreground colors are &lt;code&gt;r&lt;i&gt;RRR&lt;/i&gt;g&lt;i&gt;GGG&lt;/i&gt;b&lt;i&gt;BBB&lt;/i&gt;&lt;/code&gt; for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc502894621a0baf5fa2446d6e7920e62cac1005" translate="yes" xml:space="preserve">
          <source>For typed lexicals &lt;code&gt;PadnameTYPE&lt;/code&gt; points at the type stash. For &lt;code&gt;our&lt;/code&gt; lexicals, &lt;code&gt;PadnameOURSTASH&lt;/code&gt; points at the stash of the associated global (so that duplicate &lt;code&gt;our&lt;/code&gt; declarations in the same package can be detected). &lt;code&gt;PadnameGEN&lt;/code&gt; is sometimes used to store the generation number during compilation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf83195223f53cdba1b00e5a9f41ecd342d04331" translate="yes" xml:space="preserve">
          <source>For typed lexicals PadnameTYPE points at the type stash. For &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; lexicals, PadnameOURSTASH points at the stash of the associated global (so that duplicate &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; declarations in the same package can be detected). PadnameGEN is sometimes used to store the generation number during compilation.</source>
          <target state="translated">입력 된 어휘의 경우 PadnameTYPE은 숨김 유형을 가리 킵니다. 들어 &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; lexicals, 관련 세계의 숨겨 놓은에서 PadnameOURSTASH 포인트 (즉, 중복, 그래서 &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; 같은 패키지의 선언 검출 할 수있다). PadnameGEN은 컴파일 중에 생성 번호를 저장하는 데 사용되기도합니다.</target>
        </trans-unit>
        <trans-unit id="91986aaa66a7c1fc5ea1ae9b7846d756f92bfc49" translate="yes" xml:space="preserve">
          <source>For various reasons &lt;code&gt;\K&lt;/code&gt; may be significantly more efficient than the equivalent &lt;code&gt;(?&amp;lt;=...)&lt;/code&gt; construct, and it is especially useful in situations where you want to efficiently remove something following something else in a string. For instance</source>
          <target state="translated">여러 가지 이유로 &lt;code&gt;\K&lt;/code&gt; 는 동등한 &lt;code&gt;(?&amp;lt;=...)&lt;/code&gt; 구문 보다 훨씬 더 효율적일 수 있으며 , 문자열에서 다른 것을 따르는 것을 효율적으로 제거하려는 상황에서 특히 유용합니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="177cf62cd78233abf54102693c9e9acbadd8394b" translate="yes" xml:space="preserve">
          <source>For versions &amp;lt; 5.6.0, the changes are. - no use of 'our' (uses 'use vars' instead) - no 'use warnings'</source>
          <target state="translated">&amp;lt;5.6.0 버전의 경우 변경 사항이 있습니다. - 'our'를 사용하지 않습니다 (대신 'use vars'를 사용함)- 'use warnings'</target>
        </trans-unit>
        <trans-unit id="60941c7eb5c54adfbab7ac22e457a8c4e15f2100" translate="yes" xml:space="preserve">
          <source>For writing RFC 1950 files/buffers, see the companion module IO::Compress::Deflate.</source>
          <target state="translated">RFC 1950 파일 / 버퍼 작성에 대해서는 컴패니언 모듈 IO :: Compress :: Deflate를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="685182a7768729bc793033bd0e68d3c4f3af5f73" translate="yes" xml:space="preserve">
          <source>For writing RFC 1951 files/buffers, see the companion module IO::Compress::RawDeflate.</source>
          <target state="translated">RFC 1951 파일 / 버퍼 작성에 대해서는 컴패니언 모듈 IO :: Compress :: RawDeflate를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9243b703bb54f6641362690a1ee88fd13adf9954" translate="yes" xml:space="preserve">
          <source>For writing RFC 1952 files/buffers, see the companion module IO::Compress::Gzip.</source>
          <target state="translated">RFC 1952 파일 / 버퍼 작성에 대해서는 컴패니언 모듈 IO :: Compress :: Gzip을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9bf658d02b726edd2f1c254066ded7736fd6d5a9" translate="yes" xml:space="preserve">
          <source>For writing bzip2 files/buffers, see the companion module IO::Compress::Bzip2.</source>
          <target state="translated">bzip2 파일 / 버퍼를 작성하려면 컴패니언 모듈 IO :: Compress :: Bzip2를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e13d75b855f37f1330f6f4c1ef3a45768526e035" translate="yes" xml:space="preserve">
          <source>For writing zip files/buffers, see the companion module IO::Compress::Zip.</source>
          <target state="translated">zip 파일 / 버퍼를 작성하려면 컴패니언 모듈 IO :: Compress :: Zip을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="535406d475920b171aa234460dc25648f86b16d6" translate="yes" xml:space="preserve">
          <source>For your convenience, Perl has added the &lt;code&gt;Non_Canonical&lt;/code&gt; decomposition type to mean any of the several compatibility decompositions.</source>
          <target state="translated">편의를 위해 Perl은 &lt;code&gt;Non_Canonical&lt;/code&gt; 분해 유형을 추가 하여 여러 호환성 분해 중 하나를 의미합니다.</target>
        </trans-unit>
        <trans-unit id="53ad46f1c41b22f84b5d3b3f5d59b0ffd2ec8775" translate="yes" xml:space="preserve">
          <source>For your convenience, Perl sets up a few special filehandles that are already open when you run. These include &lt;code&gt;STDIN&lt;/code&gt; , &lt;code&gt;STDOUT&lt;/code&gt; , &lt;code&gt;STDERR&lt;/code&gt; , and &lt;code&gt;ARGV&lt;/code&gt; . Since those are pre-opened, you can use them right away without having to go to the trouble of opening them yourself:</source>
          <target state="translated">편의상 Perl은 실행할 때 이미 열려있는 몇 가지 특수 파일 핸들을 설정합니다. 여기에는 &lt;code&gt;STDIN&lt;/code&gt; , &lt;code&gt;STDOUT&lt;/code&gt; , &lt;code&gt;STDERR&lt;/code&gt; 및 &lt;code&gt;ARGV&lt;/code&gt; 가 포함 됩니다. 그것들은 미리 열렸으므로 직접 열지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="25fbf113182de9f9ab0a2170f995f3fe1e22cfbf" translate="yes" xml:space="preserve">
          <source>For your convenience, Perl sets up a few special filehandles that are already open when you run. These include &lt;code&gt;STDIN&lt;/code&gt;, &lt;code&gt;STDOUT&lt;/code&gt;, &lt;code&gt;STDERR&lt;/code&gt;, and &lt;code&gt;ARGV&lt;/code&gt;. Since those are pre-opened, you can use them right away without having to go to the trouble of opening them yourself:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e11a0cc028d202d8463cc9e66bddef5da4b46a" translate="yes" xml:space="preserve">
          <source>For, begin, and end will let you have regions of text/code/data that are not generally interpreted as normal Pod text, but are passed directly to particular formatters, or are otherwise special. A formatter that can use that format will use the region, otherwise it will be completely ignored.</source>
          <target state="translated">for, begin 및 end를 사용하면 일반적으로 일반 포드 텍스트로 해석되지 않지만 특정 포맷터로 직접 전달되거나 특수한 텍스트 / 코드 / 데이터 영역을 사용할 수 있습니다. 해당 형식을 사용할 수있는 포맷터는 영역을 사용하며 그렇지 않으면 완전히 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="f18b2922a2b4011038aaeff6686a95e8916e8ea4" translate="yes" xml:space="preserve">
          <source>Forbes, Nevill. 1964.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1335af6d26a5e69176b5dbf3edf53ab8893f8491" translate="yes" xml:space="preserve">
          <source>Forbidden in &lt;a href=&quot;#PERL5OPT&quot;&gt;&quot;&lt;code&gt;PERL5OPT&lt;/code&gt;&quot;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75b520175307f045a1bd5432ec6c11ebe784b1ea" translate="yes" xml:space="preserve">
          <source>Force a title for the page (don't try to determine it from the content). The value of this string should already be &amp;amp;-escaped.</source>
          <target state="translated">페이지 제목을 강요하십시오 (콘텐츠에서 결정하지 마십시오). 이 문자열의 값은 이미 &amp;amp; 이스케이프되어야합니다.</target>
        </trans-unit>
        <trans-unit id="000583668b82be86fbb138b24c7dd36579b394a2" translate="yes" xml:space="preserve">
          <source>Force bsd_glob() to return an error when it encounters a directory it cannot open or read. Ordinarily bsd_glob() continues to find matches.</source>
          <target state="translated">bsd_glob ()가 열거 나 읽을 수없는 디렉토리가 발견되면 오류를 리턴하도록합니다. 일반적으로 bsd_glob ()는 계속 일치 항목을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="f44e8f61765329d123a6aeba46d29dc380866fc3" translate="yes" xml:space="preserve">
          <source>Force byte semantics rather than character semantics</source>
          <target state="translated">문자 의미보다는 강제 바이트 의미</target>
        </trans-unit>
        <trans-unit id="8868271cc9c0d31ff6a2edce741289dbb00116c6" translate="yes" xml:space="preserve">
          <source>Force record-mode access</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e86f983a8a1431bbb9867472f48fd4b7df452e5" translate="yes" xml:space="preserve">
          <source>Force stream mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e0b8c5cc987a7d85e9bad122ef6f776848a3ca" translate="yes" xml:space="preserve">
          <source>Force the specified action, when it normally would have failed. Use this to install a module even if its tests fail. When you use this option, -i is not optional for installing a module when you need to force it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e13bf2b7599ac8779de2f3726115bde91fbbaded" translate="yes" xml:space="preserve">
          <source>Forces CPAN to perform a task it would normally refuse to do. Force takes as arguments a method name to be invoked and any number of additional arguments to pass that method. The internals of the object get the needed changes so that CPAN.pm does not refuse to take the action. See also the section above on the &lt;code&gt;force&lt;/code&gt; and the &lt;code&gt;fforce&lt;/code&gt; pragma.</source>
          <target state="translated">CPAN이 일반적으로 거부하는 작업을 수행하도록합니다. Force는 메소드 이름을 호출 할 인수와 해당 메소드를 전달할 수있는 추가 인수를 인수로 사용합니다. CPAN.pm이 조치를 거부하지 않도록 오브젝트 내부에 필요한 변경 사항이 있습니다. &lt;code&gt;force&lt;/code&gt; 과 &lt;code&gt;fforce&lt;/code&gt; pragma 에 대한 위의 섹션도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6824e435b9c0d512ec0dbbda74a3d74da3f722c9" translate="yes" xml:space="preserve">
          <source>Forces CPAN to perform a task that it normally would have refused to do. Force takes as arguments a method name to be called and any number of additional arguments that should be passed to the called method. The internals of the object get the needed changes so that CPAN.pm does not refuse to take the action. See also the section above on the &lt;code&gt;force&lt;/code&gt; and the &lt;code&gt;fforce&lt;/code&gt; pragma.</source>
          <target state="translated">CPAN이 일반적으로 거부 한 작업을 수행하도록합니다. Force는 호출 할 메소드 이름과 호출 된 메소드에 전달되어야하는 추가 인수를 인수로 취합니다. CPAN.pm이 조치를 거부하지 않도록 오브젝트 내부에 필요한 변경 사항이 있습니다. &lt;code&gt;force&lt;/code&gt; 과 &lt;code&gt;fforce&lt;/code&gt; pragma 에 대한 위의 섹션도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5c9a0d4c05ea685c4b81ce563d38fd33d0aeea12" translate="yes" xml:space="preserve">
          <source>Forces CPAN to perform a task that it normally would have refused to do. Force takes as arguments a method name to be called and any number of additional arguments that should be passed to the called method. The internals of the object get the needed changes so that CPAN.pm does not refuse to take the action. The &lt;code&gt;force&lt;/code&gt; is passed recursively to all contained objects. See also the section above on the &lt;code&gt;force&lt;/code&gt; and the &lt;code&gt;fforce&lt;/code&gt; pragma.</source>
          <target state="translated">CPAN이 일반적으로 거부 한 작업을 수행하도록합니다. Force는 호출 할 메소드 이름과 호출 된 메소드에 전달되어야하는 추가 인수를 인수로 취합니다. CPAN.pm이 조치를 거부하지 않도록 오브젝트 내부에 필요한 변경 사항이 있습니다. &lt;code&gt;force&lt;/code&gt; 모든 포함 된 개체에 반복적으로 전달됩니다. &lt;code&gt;force&lt;/code&gt; 과 &lt;code&gt;fforce&lt;/code&gt; pragma 에 대한 위의 섹션도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f116ab22ad8af5d1edf47652c0fde4ebe02b3188" translate="yes" xml:space="preserve">
          <source>Forces EXPR to be interpreted in scalar context and returns the value of EXPR.</source>
          <target state="translated">EXPR을 스칼라 컨텍스트에서 해석하도록하고 EXPR의 값을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="500df2d2fe4d1817ceeca100a5e6d863aec7944d" translate="yes" xml:space="preserve">
          <source>Forces a reload of all indices.</source>
          <target state="translated">모든 인덱스를 강제로 다시로드합니다.</target>
        </trans-unit>
        <trans-unit id="ec27ff3ecad1733cd6196463fe06ab0d70361cc8" translate="yes" xml:space="preserve">
          <source>Forcing AutoLoader to Load a Function</source>
          <target state="translated">자동로드 기능을 강제로로드</target>
        </trans-unit>
        <trans-unit id="4a87f71febe991ae2954e6d639d10481ac9e6d2d" translate="yes" xml:space="preserve">
          <source>Forcing Unicode in Perl (Or Unforcing Unicode in Perl)</source>
          <target state="translated">Perl에서 유니 코드 강제 실행 (또는 Perl에서 유니 코드 강제 해제)</target>
        </trans-unit>
        <trans-unit id="fa74775094fcf161164e8e879c58a4b633ace5dd" translate="yes" xml:space="preserve">
          <source>Forcing a Stack Trace</source>
          <target state="translated">스택 추적 강제</target>
        </trans-unit>
        <trans-unit id="f6c5999fd3e671fe9fe9df464e28ef5ab21206ca" translate="yes" xml:space="preserve">
          <source>Forcing big- or little-endian byte-order on floating-point values for data exchange can work only if all platforms use the same binary representation such as IEEE floating-point. Even if all platforms are using IEEE, there may still be subtle differences. Being able to use &lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;&lt;/code&gt; on floating-point values can be useful, but also dangerous if you don't know exactly what you're doing. It is not a general way to portably store floating-point values.</source>
          <target state="translated">모든 플랫폼에서 IEEE 부동 소수점과 같은 이진 표현을 사용하는 경우에만 데이터 교환을 위해 부동 소수점 값에 빅 엔디안 또는 리틀 엔디안 바이트 순서를 적용 할 수 있습니다. 모든 플랫폼에서 IEEE를 사용하더라도 여전히 미묘한 차이가있을 수 있습니다. 부동 소수점 값에서 &lt;code&gt;&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;&lt;/code&gt; 를 사용할 수 있으면 유용 할 수 있지만 수행중인 작업을 정확히 모르면 위험 할 수도 있습니다. 부동 소수점 값을 이식 가능하게 저장하는 일반적인 방법은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="a4120203a1a581a0f521e545bd747729f9324076" translate="yes" xml:space="preserve">
          <source>Forcing literal &lt;code&gt;&quot;{&quot;&lt;/code&gt; characters to be escaped enables the Perl language to be extended in various ways in future releases. To avoid needlessly breaking existing code, the restriction is not enforced in contexts where there are unlikely to ever be extensions that could conflict with the use there of &lt;code&gt;&quot;{&quot;&lt;/code&gt; as a literal. Those that are not potentially ambiguous do not warn; those that are do raise a non-deprecation warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2aff76f86eceb241e972218e6327a677071fd4" translate="yes" xml:space="preserve">
          <source>Forcing literal &lt;code&gt;&quot;{&quot;&lt;/code&gt; characters to be escaped enables the Perl language to be extended in various ways in future releases. To avoid needlessly breaking existing code, the restriction is not enforced in contexts where there are unlikely to ever be extensions that could conflict with the use there of &lt;code&gt;&quot;{&quot;&lt;/code&gt; as a literal. Those that are not potentially ambiguous do not warn; those that are raise this warning. This makes sure that an inadvertent typo doesn't silently cause the pattern to compile to something unintended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2f3fb748bf9872f9144c47c518431483cca725" translate="yes" xml:space="preserve">
          <source>Forcing literal &lt;code&gt;{&lt;/code&gt; characters to be escaped will enable the Perl language to be extended in various ways in future releases. To avoid needlessly breaking existing code, the restriction is not enforced in contexts where there are unlikely to ever be extensions that could conflict with the use there of &lt;code&gt;{&lt;/code&gt; as a literal. A non-deprecation warning that the left brace is being taken literally is raised in contexts where there could be confusion about it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fbdd84d18aabd3608a03167cf0b04d250e02a5e" translate="yes" xml:space="preserve">
          <source>Foreach Loops</source>
          <target state="translated">Foreach 루프</target>
        </trans-unit>
        <trans-unit id="93c05f167e6324782fd78c5a0e445ec6daf56dac" translate="yes" xml:space="preserve">
          <source>Forgetting the slab when the root is attached is not strictly necessary, but avoids potential problems with &lt;code&gt;CvROOT&lt;/code&gt; being written over. There is code all over the place, both in core and on CPAN, that does things with &lt;code&gt;CvROOT&lt;/code&gt;, so forgetting the slab makes things more robust and avoids potential problems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac22bd0e8a69bd849b7be8d79bbdfbf8b44d9d5" translate="yes" xml:space="preserve">
          <source>Forking</source>
          <target state="translated">Forking</target>
        </trans-unit>
        <trans-unit id="3142b84bb5d35f3314b7947362fd81b2dce6a441" translate="yes" xml:space="preserve">
          <source>Forking pipe open() constructs will be supported in future.</source>
          <target state="translated">포크 파이프 open () 구성은 향후 지원 될 예정입니다.</target>
        </trans-unit>
        <trans-unit id="f853f7806e672e510ff7755e13ef33f65bbcd825" translate="yes" xml:space="preserve">
          <source>Forking pipe open() not yet implemented</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b45c7831984bcd95238c44bf2a0dc36f9a8d555e" translate="yes" xml:space="preserve">
          <source>Formalized use of &quot;x_&quot; or &quot;X_&quot; for all custom keys not listed in the official spec</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041a5dec481d6bf0724caeaa84bc135d7d9062d4" translate="yes" xml:space="preserve">
          <source>Format</source>
          <target state="translated">Format</target>
        </trans-unit>
        <trans-unit id="9becd32add767b485457525967fd97972db5511d" translate="yes" xml:space="preserve">
          <source>Format %s redefined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c82bb36a64035b3b3d413194135e78450e65b2bf" translate="yes" xml:space="preserve">
          <source>Format Pod as RTF</source>
          <target state="translated">RTF로 포드 포맷</target>
        </trans-unit>
        <trans-unit id="fee1af11bb1eb0f8161a549c43ed448ab786fe6a" translate="yes" xml:space="preserve">
          <source>Format Pod as plaintext</source>
          <target state="translated">포드를 일반 텍스트로 포맷</target>
        </trans-unit>
        <trans-unit id="7740187b3e5d9aaa6412746917f4e8aaed9600e7" translate="yes" xml:space="preserve">
          <source>Format Pod as validating XHTML</source>
          <target state="translated">XHTML을 유효성 검증하는 것으로 포드 형식화</target>
        </trans-unit>
        <trans-unit id="13163280307f8765d0afe577cafca7728ff8779c" translate="yes" xml:space="preserve">
          <source>Format Variables</source>
          <target state="translated">형식 변수</target>
        </trans-unit>
        <trans-unit id="658ebab97c49c09371e52addf4b43398f48345ba" translate="yes" xml:space="preserve">
          <source>Format a range of tracks on the disk. &lt;code&gt;$opOutBuf&lt;/code&gt; should be &lt;code&gt;[]&lt;/code&gt;. &lt;code&gt;$pInBuf&lt;/code&gt; should contain a &lt;code&gt;FORMAT_PARAMETERS&lt;/code&gt; data structure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a1ad455810d4298663c009286d3773850b6eb92" translate="yes" xml:space="preserve">
          <source>Format defined.</source>
          <target state="translated">형식이 정의되었습니다.</target>
        </trans-unit>
        <trans-unit id="68cc7e7b5a994c04fdbb008754704e79e2bf0460" translate="yes" xml:space="preserve">
          <source>Format is unknown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62d7763868e1e1fce004f54dea4cbe8be71286b3" translate="yes" xml:space="preserve">
          <source>Format not terminated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45682ea5e61958bde7db300ab1675b68475b3238" translate="yes" xml:space="preserve">
          <source>Format the output with ANSI color escape sequences. Using this option requires that Term::ANSIColor be installed on your system.</source>
          <target state="translated">ANSI 색상 이스케이프 시퀀스로 출력 형식을 지정하십시오. 이 옵션을 사용하려면 시스템에 Term :: ANSIColor가 설치되어 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="d1b6f323b8fa9a716a3f6f4fbd038ac4ec784196" translate="yes" xml:space="preserve">
          <source>Format the output with overstrike printing. Bold text is rendered as character, backspace, character. Italics and file names are rendered as underscore, backspace, character. Many pagers, such as &lt;b&gt;less&lt;/b&gt;, know how to convert this to bold or underlined text.</source>
          <target state="translated">오버 스트라이크 인쇄로 출력 형식을 지정하십시오. 굵은 체 텍스트는 문자, 백 스페이스, 문자로 렌더링됩니다. 기울임 꼴 및 파일 이름은 밑줄, 백 스페이스, 문자로 렌더링됩니다. &lt;b&gt;less&lt;/b&gt; 와 같은 많은 호출기 는이 텍스트를 굵게 표시하거나 밑줄이있는 텍스트로 변환하는 방법을 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="0070c0e56a4846d0ff72c495dfd2d1f1c3c98911" translate="yes" xml:space="preserve">
          <source>Formats and prints the specified arguments to &lt;code&gt;STDOUT&lt;/code&gt; . See also &lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;.</source>
          <target state="translated">지정된 인수를 &lt;code&gt;STDOUT&lt;/code&gt; 하고 STDOUT으로 인쇄합니다 . &lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ea18c66989050711a934f41e9e7124ce36766a76" translate="yes" xml:space="preserve">
          <source>Formats and prints the specified arguments to &lt;code&gt;STDOUT&lt;/code&gt;. See also &lt;a href=&quot;perlfunc#printf&quot;&gt;&quot;printf&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a537a80bc24fcc0360e5469eed8ee51556b708" translate="yes" xml:space="preserve">
          <source>Formats the error as a human readable string. Usually there's no reason to call this directly, as it is used automatically if an &lt;code&gt;autodie::exception&lt;/code&gt; object is ever used as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3359bd12a9edc6e1c703375835a3905e7b83f91" translate="yes" xml:space="preserve">
          <source>Formats, like packages and subroutines, are declared rather than executed, so they may occur at any point in your program. (Usually it's best to keep them all together though.) They have their own namespace apart from all the other &quot;types&quot; in Perl. This means that if you have a function named &quot;Foo&quot;, it is not the same thing as having a format named &quot;Foo&quot;. However, the default name for the format associated with a given filehandle is the same as the name of the filehandle. Thus, the default format for STDOUT is named &quot;STDOUT&quot;, and the default format for filehandle TEMP is named &quot;TEMP&quot;. They just look the same. They aren't.</source>
          <target state="translated">패키지 및 서브 루틴과 같은 형식은 실행되지 않고 선언되므로 프로그램의 어느 시점에서나 발생할 수 있습니다. (보통은 모두 함께 유지하는 것이 가장 좋습니다.) Perl의 다른 모든 &quot;유형&quot;과 별도로 네임 스페이스가 있습니다. 즉, &quot;Foo&quot;라는 함수가있는 경우 &quot;Foo&quot;라는 형식의 함수와 동일하지 않습니다. 그러나 지정된 파일 핸들과 연관된 형식의 기본 이름은 파일 핸들의 이름과 동일합니다. 따라서 STDOUT의 기본 형식은 &quot;STDOUT&quot;이고 파일 핸들 TEMP의 기본 형식은 &quot;TEMP&quot;입니다. 그들은 똑같이 보입니다. 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3aa38e01a2ea62a3e9036d79767d88c6e4c54250" translate="yes" xml:space="preserve">
          <source>Formatted Printing of &lt;code&gt;Size_t&lt;/code&gt; and &lt;code&gt;SSize_t&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7065a0ba158c8bf72a9807e17d920ae802c062cf" translate="yes" xml:space="preserve">
          <source>Formatted Printing of IVs, UVs, and NVs</source>
          <target state="translated">IV, UV 및 NV의 형식화 된 인쇄</target>
        </trans-unit>
        <trans-unit id="3f91d8b8190697527ab2203b1a54e8d753a09c00" translate="yes" xml:space="preserve">
          <source>Formatted Printing of SVs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0cdffc8a50f65ca184b86bbe57f179a524d53d" translate="yes" xml:space="preserve">
          <source>Formatted Printing of Size_t and SSize_t</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52397319c79cf7ef279efffb8337575643b1dc1d" translate="yes" xml:space="preserve">
          <source>Formatted Printing of Strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cdce8da6a96362891f6b39fce51bfbad9c0c1b1" translate="yes" xml:space="preserve">
          <source>Formatters live under this namespace. &lt;a href=&quot;Test2::Formatter::TAP&quot;&gt;Test2::Formatter::TAP&lt;/a&gt; is the only formatter currently. It is acceptable for third party distributions to create new formatters under this namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de31570e601ac2cf7d8ef74834052348b7c4a16" translate="yes" xml:space="preserve">
          <source>Formatters may also choose to note errors/warnings as comments, besides or instead of emitting them otherwise (as in messages to STDERR, or &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;ing).</source>
          <target state="translated">포맷터는 또한 오류 / 경고를 주석으로 표시하거나 주석으로 표시하거나 STDERR에 메시지로 표시하거나 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; 대신 주석으로 표시 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="648475a8d60812d388dd7555ebe7a1f2e56621f3" translate="yes" xml:space="preserve">
          <source>Formatters may also choose to note errors/warnings as comments, besides or instead of emitting them otherwise (as in messages to STDERR, or &lt;code&gt;die&lt;/code&gt;ing).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc6255b00d803dd218371c361f3f87de9be4719" translate="yes" xml:space="preserve">
          <source>Formatters may also insert additional comments, including: the release date of the Pod formatter program, the contact address for the author(s) of the formatter, the current time, the name of input file, the formatting options in effect, version of Perl used, etc.</source>
          <target state="translated">포맷터는 포드 포맷터 프로그램의 출시 날짜, 포맷터 작성자의 연락처 주소, 현재 시간, 입력 파일 이름, 유효한 포맷 옵션, Perl 버전 등의 추가 설명을 삽입 할 수도 있습니다. 등</target>
        </trans-unit>
        <trans-unit id="6d3ccf37c71280b1f96c4a2ec7fbdbe45afef9e1" translate="yes" xml:space="preserve">
          <source>Formatters may choose to ignore the markup for purposes of resolving the link and use only the renderable characters in the section name, as in:</source>
          <target state="translated">포맷터는 링크를 해결하기 위해 마크 업을 무시하고 다음과 같이 섹션 이름에 렌더링 가능한 문자 만 사용하도록 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a4aca088317275f96f5f54edc120b828492554a8" translate="yes" xml:space="preserve">
          <source>Formatters may choose to just not support the S format code, especially in cases where the output format simply has no NBSP character/code and no code for &quot;don't break this stuff across lines&quot;.</source>
          <target state="translated">포맷터는 특히 SB 코드를 지원하지 않도록 선택할 수 있습니다. 특히 출력 형식에 NBSP 문자 / 코드가없고 &quot;이 줄을 가로 질러이 항목을 나누지 마십시오&quot;라는 코드가없는 경우에 특히 그렇습니다.</target>
        </trans-unit>
        <trans-unit id="699f62e78d3e814aa9e7d06b34b37d145e111b38" translate="yes" xml:space="preserve">
          <source>Formatting Codes</source>
          <target state="translated">서식 코드</target>
        </trans-unit>
        <trans-unit id="ff5d2a34321adb03892b713850bf4a3ad301ed8c" translate="yes" xml:space="preserve">
          <source>Formatting base class</source>
          <target state="translated">기본 클래스 포맷</target>
        </trans-unit>
        <trans-unit id="ff9c8d057ff674339898e634f59656ac3a52e2b6" translate="yes" xml:space="preserve">
          <source>Formatting codes absolutely cannot span paragraphs. If a code is opened in one paragraph, and no closing code is found by the end of that paragraph, the Pod parser must close that formatting code, and should complain (as in &quot;Unterminated I code in the paragraph starting at line 123: 'Time objects are not...'&quot;). So these two paragraphs:</source>
          <target state="translated">형식화 코드는 단락을 포함 할 수 없습니다. 한 단락에서 코드가 열리고 해당 단락의 끝에서 닫는 코드가 발견되지 않으면 포드 파서는 해당 형식화 코드를 닫아야하며 &quot;123 행에서 시작하는 단락의 종료되지 않은 I 코드 : 시간 개체가 아닙니다 ... ' &quot;). 이 두 단락은</target>
        </trans-unit>
        <trans-unit id="7b18147368e5bdc22767f902bd572f166454ac0e" translate="yes" xml:space="preserve">
          <source>Formerly &quot;ji&quot;. Usually in Hebrew script.</source>
          <target state="translated">이전에는 &quot;ji&quot;입니다. 일반적으로 히브리어 스크립트에서.</target>
        </trans-unit>
        <trans-unit id="57f396d4904134a67c253fe83cd6c2ee5405024e" translate="yes" xml:space="preserve">
          <source>Formerly, a reference to an array whose initial element happens to hold a reference to a hash. You used to be able to treat a pseudohash reference as either an array reference or a hash reference. Pseduohashes are no longer supported.</source>
          <target state="translated">이전에는 초기 요소가 해시에 대한 참조를 보유하는 배열에 대한 참조입니다. 예전에는 pseudohash 참조를 배열 참조 또는 해시 참조로 취급 할 수있었습니다. Pseduohashes는 더 이상 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2a5ce139e82e57663c70ee87ddef8c784f5c288d" translate="yes" xml:space="preserve">
          <source>Fortunately PerlIO also supports line buffer if you tell PerlIO to use one instead of fixed buffer. Since ISO-2022-JP is guaranteed to revert to ASCII at the end of the line, partial character will never happen when line buffer is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffc76003dd6c8c370f036f11a5ee11287e442db4" translate="yes" xml:space="preserve">
          <source>Fortunately iso-2022-kr is hardly used (according to Jungshik) and MIME-* are very unlikely to be fed to PerlIO because they are for mail headers. See &lt;a href=&quot;Encode::MIME::Header&quot;&gt;Encode::MIME::Header&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966aae1b0b42de1dff8ae5df0d18d67c8938fc59" translate="yes" xml:space="preserve">
          <source>Fortunately, all TAP output is perfect. In the event that it is not, this method will return parser errors. Note that a junk line which the parser does not recognize is &lt;code&gt;not&lt;/code&gt; an error. This allows this parser to handle future versions of TAP. The following are all TAP errors reported by the parser:</source>
          <target state="translated">다행히 모든 TAP 출력이 완벽합니다. 그렇지 않은 경우이 메소드는 구문 분석기 오류를 리턴합니다. 파서가 인식하지 못하는 정크 라인 은 오류 가 &lt;code&gt;not&lt;/code&gt; . 이 파서는 향후 버전의 TAP를 처리 할 수 ​​있습니다. 다음은 파서가보고 한 모든 TAP 오류입니다.</target>
        </trans-unit>
        <trans-unit id="87a70390fb6164a360255317db997a9d16310113" translate="yes" xml:space="preserve">
          <source>Fortunately, all encodings that come with &lt;code&gt;Encode&lt;/code&gt; core are &lt;code&gt;PerlIO&lt;/code&gt; -savvy except for &lt;code&gt;hz&lt;/code&gt; and &lt;code&gt;ISO-2022-kr&lt;/code&gt; . For the gory details, see &lt;a href=&quot;encode/encoding&quot;&gt;Encode::Encoding&lt;/a&gt; and &lt;a href=&quot;encode/perlio&quot;&gt;Encode::PerlIO&lt;/a&gt;.</source>
          <target state="translated">다행히 &lt;code&gt;Encode&lt;/code&gt; 코어 와 함께 제공되는 모든 인코딩 은 &lt;code&gt;hz&lt;/code&gt; 및 &lt;code&gt;ISO-2022-kr&lt;/code&gt; 을 제외한 &lt;code&gt;PerlIO&lt;/code&gt; 에 정통 합니다. 자세한 내용은 &lt;a href=&quot;encode/encoding&quot;&gt;Encode :: Encoding&lt;/a&gt; 및 &lt;a href=&quot;encode/perlio&quot;&gt;Encode :: PerlIO를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3cc869134794943778857772327c1252b4ab432b" translate="yes" xml:space="preserve">
          <source>Fortunately, all encodings that come with &lt;code&gt;Encode&lt;/code&gt; core are &lt;code&gt;PerlIO&lt;/code&gt;-savvy except for &lt;code&gt;hz&lt;/code&gt; and &lt;code&gt;ISO-2022-kr&lt;/code&gt;. For the gory details, see &lt;a href=&quot;Encode::Encoding&quot;&gt;Encode::Encoding&lt;/a&gt; and &lt;a href=&quot;Encode::PerlIO&quot;&gt;Encode::PerlIO&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97fed1654379ec219795384ff23955f1b1779107" translate="yes" xml:space="preserve">
          <source>Fortunately, most web servers for the mainframe will correctly translate the &lt;code&gt;\n&lt;/code&gt; in the following statement to its ASCII equivalent (&lt;code&gt;\r&lt;/code&gt; is the same under both Unix and z/OS):</source>
          <target state="translated">다행히도 메인 프레임의 대부분의 웹 서버 는 다음 명령문에서 &lt;code&gt;\n&lt;/code&gt; 을 ASCII에 상응하는 것으로 올바르게 변환합니다 ( &lt;code&gt;\r&lt;/code&gt; 은 Unix와 z / OS에서 동일 함).</target>
        </trans-unit>
        <trans-unit id="f8866d15529a7057b903143f3bead50cd0b88e71" translate="yes" xml:space="preserve">
          <source>Fortunately, sometimes this kernel &quot;feature&quot; can be disabled. Unfortunately, there are two ways to disable it. The system can simply outlaw scripts with any set-id bit set, which doesn't help much. Alternately, it can simply ignore the set-id bits on scripts.</source>
          <target state="translated">다행히도이 커널 &quot;기능&quot;을 비활성화 할 수 있습니다. 안타깝게도 두 가지 방법으로 비활성화 할 수 있습니다. 시스템은 단순히 set-id 비트 세트로 스크립트를 불법화 할 수 있으므로 별 도움이되지 않습니다. 또는 스크립트에서 set-id 비트를 무시해도됩니다.</target>
        </trans-unit>
        <trans-unit id="6af648858c608d0be1ab15acfdb6b1e06ea9ea8e" translate="yes" xml:space="preserve">
          <source>Fortunately, there is a way to get your change smoke-tested on various OSes: push it to a &quot;smoke-me&quot; branch and wait for certain automated smoke-testers to report the results from their OSes. A &quot;smoke-me&quot; branch is identified by the branch name: specifically, as seen on github.com it must be a local branch whose first name component is precisely &lt;code&gt;smoke-me&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f164c645e50a4c0c3f29fb561f1f66b8762dff" translate="yes" xml:space="preserve">
          <source>Fortunately, you only need to know 10% of what's in the main page to get 90% of the benefit. This page will show you that 10%.</source>
          <target state="translated">다행히도 메인 페이지에있는 것의 10 % 만 알면 혜택의 90 %를 얻을 수 있습니다. 이 페이지는 10 %를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="c005499309629c2dd1540384f9d88388c2791d54" translate="yes" xml:space="preserve">
          <source>Forums</source>
          <target state="translated">Forums</target>
        </trans-unit>
        <trans-unit id="486575b261d582ad380850eb24eb0b7d18eeabf0" translate="yes" xml:space="preserve">
          <source>Found = in conditional, should be ==</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f02d71c41e2d53b1dcf4e519cc2cf9f6c84e4b" translate="yes" xml:space="preserve">
          <source>Fourth:</source>
          <target state="translated">Fourth:</target>
        </trans-unit>
        <trans-unit id="7babeb8dda00cbd2717c46859a597a0ac26af8c6" translate="yes" xml:space="preserve">
          <source>Frame Listing Output Examples</source>
          <target state="translated">프레임리스트 출력 예</target>
        </trans-unit>
        <trans-unit id="6a7b59ce4c9987f7a80daf7fbb85fb8ee735fa63" translate="yes" xml:space="preserve">
          <source>Frame listing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7de308f5cb42aaa93cfde86991651a82d8099b3" translate="yes" xml:space="preserve">
          <source>Framework for localization</source>
          <target state="translated">현지화를위한 프레임 워크</target>
        </trans-unit>
        <trans-unit id="3b8bd7caa7cebf02d88ee7c7bdba92155a41dbde" translate="yes" xml:space="preserve">
          <source>Framework for parsing Pod</source>
          <target state="translated">포드 파싱을위한 프레임 워크</target>
        </trans-unit>
        <trans-unit id="e02dc7d8740e65411d2c6e0fa117007a185bdc92" translate="yes" xml:space="preserve">
          <source>Framework for writing test tools that all work together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3772ac4b4db87b4a8dbfa59ef43cd1a8ad29515" translate="yes" xml:space="preserve">
          <source>France</source>
          <target state="translated">France</target>
        </trans-unit>
        <trans-unit id="53885018ee90a10b7bc48c0249fdec51585e188f" translate="yes" xml:space="preserve">
          <source>Free (as in beer) books</source>
          <target state="translated">무료 (맥주에서와 같이) 책</target>
        </trans-unit>
        <trans-unit id="aa5f1cde3ceb6e8e452fb592aecdb66eecb02f83" translate="yes" xml:space="preserve">
          <source>Free an op and its children. Only use this when an op is no longer linked to from any optree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2045f9df7f3ddf3a7ca6cf0c4237136b9a9c596f" translate="yes" xml:space="preserve">
          <source>Free an op. Only use this when an op is no longer linked to from any optree.</source>
          <target state="translated">작전을 해제하십시오. op가 더 이상 optree에 연결되어 있지 않은 경우에만 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="2b3fa1d351090b766faffaa6e4edfa86f57458a1" translate="yes" xml:space="preserve">
          <source>Free any magic storage used by the SV. See &lt;code&gt;&lt;a href=&quot;#sv_magic&quot;&gt;&quot;sv_magic&quot;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb0e32e0a58271635c4ef7fbb31d2d946383137e" translate="yes" xml:space="preserve">
          <source>Free any magic storage used by the SV. See &lt;code&gt;sv_magic&lt;/code&gt; .</source>
          <target state="translated">SV가 사용하는 매직 스토리지를 비 웁니다. &lt;code&gt;sv_magic&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d06c8f4cf2eee9b839846a180873fbffe8e5ae3e" translate="yes" xml:space="preserve">
          <source>Free of legacy weight, providing a lightweight and easy to learn API. Has a growing addon ecosystem. It is best used for smaller projects and very easy to learn for beginners.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e846928fcc144c7bd2db6d810b3f5976c347e3ce" translate="yes" xml:space="preserve">
          <source>Free the SV at offset po in the current pad.</source>
          <target state="translated">현재 패드에서 오프셋 po에서 SV를 해제합니다.</target>
        </trans-unit>
        <trans-unit id="7da50e46bbfce92aaf6cbf3942c4d4d8527613b3" translate="yes" xml:space="preserve">
          <source>Free the storage associated with the tied handle referenced by</source>
          <target state="translated">에 의해 참조 된 묶인 핸들과 연관된 스토리지를 해제</target>
        </trans-unit>
        <trans-unit id="97f264039513cfe75ea6d652749d14c6132a0656" translate="yes" xml:space="preserve">
          <source>Free the storage associated with the tied scalar referenced by</source>
          <target state="translated">연결된 스칼라와 연관된 스토리지를 비 웁니다.</target>
        </trans-unit>
        <trans-unit id="5ffb1739dd01438357afbd5211d358f61cea80dc" translate="yes" xml:space="preserve">
          <source>Free/Used</source>
          <target state="translated">Free/Used</target>
        </trans-unit>
        <trans-unit id="b845fdaff1bf49c014dff506cfa6bdc63dadd835" translate="yes" xml:space="preserve">
          <source>FreeBSD</source>
          <target state="translated">FreeBSD</target>
        </trans-unit>
        <trans-unit id="7b25f5206df2f27aaf3f69eecf641cc773e18f45" translate="yes" xml:space="preserve">
          <source>FreeBSD core dumps from readdir_r with ithreads</source>
          <target state="translated">idirs를 사용하여 readdir_r에서 FreeBSD 코어 덤프</target>
        </trans-unit>
        <trans-unit id="1ab41e56a5bfe7c16abb7ddd77f527fd993f7e3c" translate="yes" xml:space="preserve">
          <source>FreeBSD documentation on syslog, &lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=syslog&quot;&gt;https://www.freebsd.org/cgi/man.cgi?query=syslog&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="783b076c39e51c97d9c6b0f16d22fc640c671b54" translate="yes" xml:space="preserve">
          <source>FreeMINT</source>
          <target state="translated">FreeMINT</target>
        </trans-unit>
        <trans-unit id="fffe09c3013e58f78e37a3579c3723dc99001d0b" translate="yes" xml:space="preserve">
          <source>Freely available locale definitions</source>
          <target state="translated">자유롭게 사용할 수있는 로캘 정의</target>
        </trans-unit>
        <trans-unit id="1a3d88c35190d4b2447d53bf45570277fd2a7644" translate="yes" xml:space="preserve">
          <source>Frees the all the elements of a hash, leaving it empty. The XS equivalent of &lt;code&gt;%hash = ()&lt;/code&gt; . See also &lt;a href=&quot;#hv_undef&quot;&gt;hv_undef&lt;/a&gt;.</source>
          <target state="translated">해시의 모든 요소를 ​​비우고 비워 둡니다. XS는 &lt;code&gt;%hash = ()&lt;/code&gt; 합니다. &lt;a href=&quot;#hv_undef&quot;&gt;hv_undef&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3619c6805b304d66238dd7986132809b2f50d48c" translate="yes" xml:space="preserve">
          <source>Frees the all the elements of a hash, leaving it empty. The XS equivalent of &lt;code&gt;%hash = ()&lt;/code&gt;. See also &lt;a href=&quot;#hv_undef&quot;&gt;&quot;hv_undef&quot;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="204adb2932f25e9d327706044e24e711fafa2c73" translate="yes" xml:space="preserve">
          <source>Frees the all the elements of an array, leaving it empty. The XS equivalent of &lt;code&gt;@array = ()&lt;/code&gt;. See also &lt;a href=&quot;#av_undef&quot;&gt;&quot;av_undef&quot;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef04d800d79b6e48aac64a67f720581e376f905" translate="yes" xml:space="preserve">
          <source>Frequently Asked Question (although not necessarily frequently answered, especially if the answer appears in the Perl FAQ shipped standard with Perl).</source>
          <target state="translated">자주 묻는 질문 (특히 Perl과 함께 제공되는 Perl FAQ에 답변이 표시되는 경우 반드시 자주 대답 할 필요는 없지만).</target>
        </trans-unit>
        <trans-unit id="36c4bb75f29e144b11648c4e613d655770d581ce" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions About MakeMaker</source>
          <target state="translated">MakeMaker에 대한 질문과 대답</target>
        </trans-unit>
        <trans-unit id="760b682e1618036dbf7afb1d053c8ac3b71a79ee" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions about IO::Compress</source>
          <target state="translated">IO :: Compress에 대한 질문과 대답</target>
        </trans-unit>
        <trans-unit id="af90cef80988974dd76636b3adb5f472768f785d" translate="yes" xml:space="preserve">
          <source>Frequently asked questions</source>
          <target state="translated">자주 묻는 질문</target>
        </trans-unit>
        <trans-unit id="3f66052a107eaf9bae7cad0f61fb462f47ec2c47" translate="yes" xml:space="preserve">
          <source>From</source>
          <target state="translated">From</target>
        </trans-unit>
        <trans-unit id="82bcb61f5c6950aaf9895e515089a465e02bfa4c" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;http://www.hp.com/products1/evolution/9000/faqs.html&quot;&gt;http://www.hp.com/products1/evolution/9000/faqs.html&lt;/a&gt;</source>
          <target state="translated">에서 &lt;a href=&quot;http://www.hp.com/products1/evolution/9000/faqs.html&quot;&gt;http://www.hp.com/products1/evolution/9000/faqs.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="448f239f3b8eb7ee92d28473b865c15012705b26" translate="yes" xml:space="preserve">
          <source>From C this function will be called with the following statements.</source>
          <target state="translated">C에서이 함수는 다음 명령문으로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="bc39bc50c4c934bc3c2b768db25fc832488e05a0" translate="yes" xml:space="preserve">
          <source>From Greek &amp;sigma;ύ&amp;nu;&amp;tau;&amp;alpha;&amp;xi;&amp;iota;&amp;sigmaf;, &amp;ldquo;with-arrangement&amp;rdquo;. How things (particularly symbols) are put together with each other.</source>
          <target state="translated">그리스어 &amp;sigma;ύ&amp;nu;&amp;tau;&amp;alpha;&amp;xi;&amp;iota;&amp;sigmaf;에서 &quot;배열&quot;. 사물 (특히 기호)이 서로 어떻게 결합되는지.</target>
        </trans-unit>
        <trans-unit id="42d1e5fd6ff04686a3ddd2292e038e6c2c64eded" translate="yes" xml:space="preserve">
          <source>From Help Consulting, for Windows.</source>
          <target state="translated">Windows 용 도움말 컨설팅에서.</target>
        </trans-unit>
        <trans-unit id="6d2aa9bfde75e9c0b676ce0baae311d9c3d43bd0" translate="yes" xml:space="preserve">
          <source>From Storable 3.05 to 3.13 we probed for the stack recursion limit for references, arrays and hashes to a maximal depth of ~1200-35000, otherwise we might fall into a stack-overflow. On JSON::XS this limit is 512 btw. With references not immediately referencing each other there's no such limit yet, so you might fall into such a stack-overflow segfault.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cd8946f3bf218d8104a97d7a0815f8406dc267b" translate="yes" xml:space="preserve">
          <source>From Swift: someone who eats eggs big end first. Also used of computers that store the most significant &lt;b&gt;byte&lt;/b&gt; of a word at a lower byte address than the least significant byte. Often considered superior to little-endian machines. See also &lt;b&gt;little-endian&lt;/b&gt;.</source>
          <target state="translated">스위프트에서 : 계란을 먼저 먹는 사람. 최하위 &lt;b&gt;바이트&lt;/b&gt; 보다 하위 바이트 주소에 워드의 최상위 &lt;b&gt;바이트&lt;/b&gt; 를 저장하는 컴퓨터에도 사용됩니다 . 리틀 엔디안 머신보다 우수한 것으로 종종 간주됩니다. &lt;b&gt;little-endian&lt;/b&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="38010d6f3cc7fb3edd4ad08b9ae938ebd7fc3879" translate="yes" xml:space="preserve">
          <source>From Swift: someone who eats eggs little end first. Also used of computers that store the least significant &lt;b&gt;byte&lt;/b&gt; of a word at a lower byte address than the most significant byte. Often considered superior to big-endian machines. See also &lt;b&gt;big-endian&lt;/b&gt;.</source>
          <target state="translated">스위프트에서 : 계란을 먼저 먹는 사람. 또한 최상위 &lt;b&gt;바이트&lt;/b&gt; 보다 하위 바이트 주소에 워드의 최하위 &lt;b&gt;바이트&lt;/b&gt; 를 저장하는 컴퓨터에 사용됩니다 . 종종 빅 엔디안 머신보다 우수한 것으로 간주됩니다. &lt;b&gt;big-endian&lt;/b&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c08b9bc65a29044d3e4730ed45ffc7b9d726760c" translate="yes" xml:space="preserve">
          <source>From XS:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="326d38f7c69627e156c632c28265510708e39ea4" translate="yes" xml:space="preserve">
          <source>From how far away you can see a variable, looking through one. Perl has two visibility mechanisms. It does &lt;b&gt;dynamic scoping&lt;/b&gt; of &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt;&lt;b&gt;variables&lt;/b&gt;, meaning that the rest of the &lt;b&gt;block&lt;/b&gt;, and any &lt;b&gt;subroutines&lt;/b&gt; that are called by the rest of the block, can see the variables that are local to the block. Perl does &lt;b&gt;lexical scoping&lt;/b&gt; of &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; variables, meaning that the rest of the block can see the variable, but other subroutines called by the block</source>
          <target state="translated">멀리에서 변수를 통해 변수를 볼 수 있습니다. Perl에는 두 가지 가시성 메커니즘이 있습니다. 이 수행 &lt;b&gt;동적 범위 지정&lt;/b&gt; 의 &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; &lt;b&gt; 변수&lt;/b&gt; 의 나머지 부분 즉, &lt;b&gt;블록&lt;/b&gt; , 및 &lt;b&gt;서브 루틴&lt;/b&gt; 블록의 나머지 부분에 의해 호출 블록에 국부적 변수를 참조 할 수있다. Perl은 &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; 변수에 대한 &lt;b&gt;어휘 범위 지정&lt;/b&gt; 을 수행 합니다. 즉, 나머지 블록은 변수를 볼 수 있지만 블록에 의해 호출 된 다른 서브 루틴은</target>
        </trans-unit>
        <trans-unit id="fadb3a78d4bb92b7a5d61874beb1d613ade09b65" translate="yes" xml:space="preserve">
          <source>From how far away you can see a variable, looking through one. Perl has two visibility mechanisms. It does &lt;b&gt;dynamic scoping&lt;/b&gt; of &lt;code&gt;local&lt;/code&gt;&lt;b&gt;variables&lt;/b&gt;, meaning that the rest of the &lt;b&gt;block&lt;/b&gt;, and any &lt;b&gt;subroutines&lt;/b&gt; that are called by the rest of the block, can see the variables that are local to the block. Perl does &lt;b&gt;lexical scoping&lt;/b&gt; of &lt;code&gt;my&lt;/code&gt; variables, meaning that the rest of the block can see the variable, but other subroutines called by the block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec9190cea97ea723cc9a362f6fe7dfac252edbc" translate="yes" xml:space="preserve">
          <source>From that comes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b77f4f72351713632aed665cfdc425384ab9fa" translate="yes" xml:space="preserve">
          <source>From the beginning Test2 was built with introspection capabilities. With Test::Builder it was difficult at best to capture test tool output for verification. Test2 Makes it easy with &lt;code&gt;Test2::API::intercept()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d95a8fc94b9e55edd8dcfe43899b426ece0c816" translate="yes" xml:space="preserve">
          <source>From the command line, you can use the &lt;code&gt;cpan&lt;/code&gt; command's &lt;code&gt;-l&lt;/code&gt; switch:</source>
          <target state="translated">명령 행에서 &lt;code&gt;cpan&lt;/code&gt; 명령의 &lt;code&gt;-l&lt;/code&gt; 스위치를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0863cef08a10ff845303e3c15c48a839f8d3f9f0" translate="yes" xml:space="preserve">
          <source>From the command line, you can use the djtar utility provided with DJGPP to unpack and expand these files. For example:</source>
          <target state="translated">명령 행에서 DJGPP와 함께 제공된 djtar 유틸리티를 사용하여 이러한 파일의 압축을 풀고 확장 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="374969a1bf6cf09ab316c531b85ee98729ec817d" translate="yes" xml:space="preserve">
          <source>From the command line:</source>
          <target state="translated">명령 행에서 :</target>
        </trans-unit>
        <trans-unit id="d445d94e4dd2201f89b37cfbbd3453a506d83550" translate="yes" xml:space="preserve">
          <source>From the perl level this is a reference to a perl array. From the C level this is a pointer to an AV.</source>
          <target state="translated">펄 레벨에서 이것은 펄 배열에 대한 참조입니다. C 레벨에서 이것은 AV에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="7f363a7d4784c758d110ec4bcb974b6c5c5684cc" translate="yes" xml:space="preserve">
          <source>From the perl level this is a reference to a perl array. From the C level this is a pointer to an AV. This is a fixed variant of T_AVREF that decrements the refcount appropriately when returning an AV*. Introduced in perl 5.15.4.</source>
          <target state="translated">펄 레벨에서 이것은 펄 배열에 대한 참조입니다. C 레벨에서 이것은 AV에 대한 포인터입니다. 이것은 AV *를 반환 할 때 참조 횟수를 적절하게 감소시키는 T_AVREF의 고정 변형입니다. perl 5.15.4에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="c48843f42734f52f4bf8423d32ddff93043f82f2" translate="yes" xml:space="preserve">
          <source>From the perl level this is a reference to a perl hash. From the C level this is a pointer to an HV.</source>
          <target state="translated">펄 레벨에서 이것은 펄 해시에 대한 참조입니다. C 레벨에서 이것은 HV에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="ea09196132f236e8b94218aff14a881b8e5f0e36" translate="yes" xml:space="preserve">
          <source>From the perl level this is a reference to a perl hash. From the C level this is a pointer to an HV. This is a fixed variant of T_HVREF that decrements the refcount appropriately when returning an HV*. Introduced in perl 5.15.4.</source>
          <target state="translated">펄 레벨에서 이것은 펄 해시에 대한 참조입니다. C 레벨에서 이것은 HV에 대한 포인터입니다. 이것은 HV *를 반환 할 때 refcount를 적절하게 감소시키는 T_HVREF의 고정 변형입니다. perl 5.15.4에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="65032422ec42df48f1031883e99a8b1b19f04fbb" translate="yes" xml:space="preserve">
          <source>From the perl level this is a reference to a perl subroutine (e.g. $sub = sub { 1 };). From the C level this is a pointer to a CV.</source>
          <target state="translated">perl 레벨에서 이것은 perl 서브 루틴에 대한 참조입니다 (예 : $ sub = sub {1};). C 레벨에서 이것은 CV에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="5b7e3054d443080121c5abde91b6e93c7323ccbd" translate="yes" xml:space="preserve">
          <source>From the shell, saying</source>
          <target state="translated">껍질에서</target>
        </trans-unit>
        <trans-unit id="856c187ed12caf89813ef33a23ce9aead8f27ac1" translate="yes" xml:space="preserve">
          <source>From the viewpoint of parsing, lexical variable scope and closures,</source>
          <target state="translated">구문 분석, 어휘 변수 범위 및 클로저 관점에서</target>
        </trans-unit>
        <trans-unit id="c5f6042fc1cf780179e4cf386ecd882f23297382" translate="yes" xml:space="preserve">
          <source>From then on, you use the &lt;code&gt;maketext&lt;/code&gt; function to access entries in whatever lexicon(s) belong to the language handle you got. So, this:</source>
          <target state="translated">그런 다음 &lt;code&gt;maketext&lt;/code&gt; 함수를 사용하여 사용 하는 언어 핸들에 속하는 어휘집에있는 항목에 액세스합니다. 그래서 이거:</target>
        </trans-unit>
        <trans-unit id="cb76778ecb1d96c51a66d0bba753022fa7deeffa" translate="yes" xml:space="preserve">
          <source>From there we can get more complex. If the hash values are the same, we can provide a secondary sort on the hash key.</source>
          <target state="translated">거기에서 우리는 더 복잡해질 수 있습니다. 해시 값이 동일하면 해시 키에 대한 보조 정렬을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="be6cd2dadd81d9d30843c2caf56c66b7990b6773" translate="yes" xml:space="preserve">
          <source>From this version on the typical SCM (software configuration management) directories are ignored. These are: RCS, CVS, SCCS, .svn, .hg, .git, .sync</source>
          <target state="translated">이 버전에서는 일반적인 SCM (소프트웨어 구성 관리) 디렉토리가 무시됩니다. RCS, CVS, SCCS, .svn, .hg, .git, .sync</target>
        </trans-unit>
        <trans-unit id="71c8fee3496d71438c7692e0f92208858f4356f7" translate="yes" xml:space="preserve">
          <source>From this, we can see that the date column stretches from column 1 to column 10 - ten characters wide. The &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt;-ese for &quot;character&quot; is &lt;code&gt;A&lt;/code&gt; , and ten of them are &lt;code&gt;A10&lt;/code&gt; . So if we just wanted to extract the dates, we could say this:</source>
          <target state="translated">이를 통해 날짜 열이 열 1에서 열 10-10 자로 확장됨을 알 수 있습니다. &quot;character&quot; 의 &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; - ese는 &lt;code&gt;A&lt;/code&gt; 이고 10 개는 &lt;code&gt;A10&lt;/code&gt; 입니다. 날짜를 추출하고 싶다면 다음과 같이 말할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7734fc90d948e23d1b414855d84cf8ecd4e180ea" translate="yes" xml:space="preserve">
          <source>From this, we can see that the date column stretches from column 1 to column 10 - ten characters wide. The &lt;code&gt;pack&lt;/code&gt;-ese for &quot;character&quot; is &lt;code&gt;A&lt;/code&gt;, and ten of them are &lt;code&gt;A10&lt;/code&gt;. So if we just wanted to extract the dates, we could say this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05d91e5e8ffd6992838dcbb57817947850fffcf4" translate="yes" xml:space="preserve">
          <source>From time to time, we may mark language constructs and features which we consider to have been mistakes as &lt;b&gt;discouraged&lt;/b&gt;. Discouraged features aren't currently candidates for removal, but we may later deprecate them if they're found to stand in the way of a significant improvement to the Perl core.</source>
          <target state="translated">때때로 실수로 간주되는 언어 구성과 기능을 &lt;b&gt;낙담&lt;/b&gt; 으로 표시 할 수 있습니다 . 권장 기능은 현재 제거 대상이 아니지만 나중에 Perl 코어가 크게 개선되는 것으로 밝혀지면 사용이 중단 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ce1fc606f2c6dccba9ea48ccc91b1833372fcf5" translate="yes" xml:space="preserve">
          <source>From version 0.08 Test::Tester no longer requires you to included anything special in your test modules. All you need to do is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593b03925f9977503d5df5613ab598e54813e4e2" translate="yes" xml:space="preserve">
          <source>Full Listing of Core Typemaps</source>
          <target state="translated">코어 타입 맵의 전체 목록</target>
        </trans-unit>
        <trans-unit id="3cdc98534162db08f980cd3bed5d9763956dd55f" translate="yes" xml:space="preserve">
          <source>Full introspection and manipulation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d09e10be00d851e0182ce329905088abb2292e7d" translate="yes" xml:space="preserve">
          <source>Full path to the file that contains the module</source>
          <target state="translated">모듈이 포함 된 파일의 전체 경로</target>
        </trans-unit>
        <trans-unit id="88b7f18d45a35c05e7ccbf8a7c6f0754274bc0a0" translate="yes" xml:space="preserve">
          <source>Full perl(1) documentation: &lt;a href=&quot;perl&quot;&gt;perl&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ae7c415f9bc9a638ee7ef79d8b74d7761263bd9" translate="yes" xml:space="preserve">
          <source>Full syntax: &lt;code&gt;(?(R1)&lt;i&gt;then&lt;/i&gt;|&lt;i&gt;else&lt;/i&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa7054d0e0a5e06ed1cc20f1f072c76f977dd60d" translate="yes" xml:space="preserve">
          <source>Full-Text Searching in Perl</source>
          <target state="translated">Perl에서 전체 텍스트 검색</target>
        </trans-unit>
        <trans-unit id="682bb398b04ad7022d81aacdf9c1056cae45f8ba" translate="yes" xml:space="preserve">
          <source>Full-fledged support for I/O layers is now implemented provided Perl is configured to use PerlIO as its IO system (which has been the default since 5.8, and the only supported configuration since 5.16).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52b0f8730cd0cb1d50429fd4e409ebd2910fe3a" translate="yes" xml:space="preserve">
          <source>Full-fledged support for I/O layers is now implemented provided Perl is configured to use PerlIO as its IO system (which is now the default).</source>
          <target state="translated">Perl이 IO 시스템 (현재는 기본값)으로 PerlIO를 사용하도록 구성된 경우 I / O 계층에 대한 완벽한 지원이 구현되었습니다.</target>
        </trans-unit>
        <trans-unit id="950f94e743e045d06f1163691f50c811b3f47b68" translate="yes" xml:space="preserve">
          <source>Fully build and test the Perl distribution. Make sure that no tests are failing with &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;aout_test&lt;/code&gt; targets; fix the bugs in Perl and the Perl test suite detected by these tests. Make sure that &lt;code&gt;all_test&lt;/code&gt; make target runs as clean as possible. Check that</source>
          <target state="translated">Perl 배포판을 완전히 빌드하고 테스트하십시오. &lt;code&gt;test&lt;/code&gt; 및 &lt;code&gt;aout_test&lt;/code&gt; 대상에서 실패한 테스트가 없는지 확인하십시오 . 이 테스트에서 감지 된 Perl 및 Perl 테스트 스위트의 버그를 수정하십시오. &lt;code&gt;all_test&lt;/code&gt; 가 대상을 최대한 깨끗하게 실행 해야 합니다. 확인</target>
        </trans-unit>
        <trans-unit id="f1bfa995d978ef3acade5580113154220abfa2db" translate="yes" xml:space="preserve">
          <source>Fully install Perl, including &lt;code&gt;installcmd&lt;/code&gt; target. Copy the generated DLLs to &lt;code&gt;LIBPATH&lt;/code&gt; ; copy the numbered Perl executables (as in</source>
          <target state="translated">&lt;code&gt;installcmd&lt;/code&gt; 대상을 포함하여 Perl을 완전히 설치하십시오 . 생성 된 DLL을 &lt;code&gt;LIBPATH&lt;/code&gt; 에 복사 하십시오 . 번호가 매겨진 Perl 실행 파일 복사</target>
        </trans-unit>
        <trans-unit id="99f3567e2bde52f4b96012b41d9d714eec37e4aa" translate="yes" xml:space="preserve">
          <source>Fully install Perl, including &lt;code&gt;installcmd&lt;/code&gt; target. Copy the generated DLLs to &lt;code&gt;LIBPATH&lt;/code&gt;; copy the numbered Perl executables (as in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ca8ebe0f337f78ac7630965aa7b6d0b1fa91b13" translate="yes" xml:space="preserve">
          <source>Fully qualified name of currently executing subroutine.</source>
          <target state="translated">현재 실행중인 서브 루틴의 완전한 이름입니다.</target>
        </trans-unit>
        <trans-unit id="4e532a9d21737b951917e92fa5d156c715111a5d" translate="yes" xml:space="preserve">
          <source>Fully qualified subroutine names are also supported. For example,</source>
          <target state="translated">완전한 서브 루틴 이름도 지원됩니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="7135f28e774ac1a9fabb4c75a3d1bb1ada58e29b" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;DumpArray()&lt;/code&gt; allows dumping of multiple values (useful when you need to analyze returns of functions).</source>
          <target state="translated">함수 &lt;code&gt;DumpArray()&lt;/code&gt; 사용하면 여러 값을 덤프 할 수 있습니다 ( 함수의 반환 값을 분석해야 할 때 유용함).</target>
        </trans-unit>
        <trans-unit id="5d11bb00bc4644e08a9be122f115fe39fdd04b5f" translate="yes" xml:space="preserve">
          <source>Function Interface</source>
          <target state="translated">기능 인터페이스</target>
        </trans-unit>
        <trans-unit id="89ef743a3244fbdb65d0570367a96fdb2440073a" translate="yes" xml:space="preserve">
          <source>Function Templates</source>
          <target state="translated">함수 템플릿</target>
        </trans-unit>
        <trans-unit id="91de2ff9bd67512188b1968893d91c44f301c251" translate="yes" xml:space="preserve">
          <source>Function and method names seem to work best as all lowercase. E.g., &lt;code&gt;$obj-&amp;gt;as_string()&lt;/code&gt; .</source>
          <target state="translated">함수와 메소드 이름은 모두 소문자로 가장 잘 작동하는 것 같습니다. 예를 들어 &lt;code&gt;$obj-&amp;gt;as_string()&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="85f600d91f4cace966ddaea2e9a3d2be93969bec" translate="yes" xml:space="preserve">
          <source>Function and method names seem to work best as all lowercase. E.g., &lt;code&gt;$obj-&amp;gt;as_string()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c032df1ce97ecae06d159792d2c62e3c02159e83" translate="yes" xml:space="preserve">
          <source>Function and method names seem to work best as all lowercase. e.g., &lt;code&gt;$obj-&amp;gt;as_string()&lt;/code&gt; .</source>
          <target state="translated">함수와 메소드 이름은 모두 소문자로 가장 잘 작동하는 것 같습니다. 예를 들어 &lt;code&gt;$obj-&amp;gt;as_string()&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3e7bac5bb1b9241c2780005ca2ff7be3a854eb31" translate="yes" xml:space="preserve">
          <source>Function and method names seem to work best as all lowercase. e.g., &lt;code&gt;$obj-&amp;gt;as_string()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da6539548ec3184ac7c103a14b5d4f64beb7ddc" translate="yes" xml:space="preserve">
          <source>Function called by &lt;code&gt;do_readline&lt;/code&gt; to spawn a glob (or do the glob inside perl on VMS). This code used to be inline, but now perl uses &lt;code&gt;File::Glob&lt;/code&gt; this glob starter is only used by miniperl during the build process, or when PERL_EXTERNAL_GLOB is defined. Moving it away shrinks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7563cdfec9156bd4ab2730b5c15af3243697fb62" translate="yes" xml:space="preserve">
          <source>Function called by &lt;code&gt;do_readline&lt;/code&gt; to spawn a glob (or do the glob inside perl on VMS). This code used to be inline, but now perl uses &lt;code&gt;File::Glob&lt;/code&gt; this glob starter is only used by miniperl during the build process. Moving it away shrinks pp_hot.c; shrinking pp_hot.c helps speed perl up.</source>
          <target state="translated">glob를 생성하기 위해 &lt;code&gt;do_readline&lt;/code&gt; 에 의해 호출되는 함수 (또는 VMS에서 perl 내부의 glob 수행). 이 코드는 인라인으로 사용되었지만 이제 perl은 &lt;code&gt;File::Glob&lt;/code&gt; 사용합니다. 이 glob 스타터는 빌드 프로세스 중 miniperl에서만 사용됩니다. 멀리 옮기면 pp_hot.c가 줄어 듭니다. pp_hot.c를 줄이면 펄 속도가 빨라집니다.</target>
        </trans-unit>
        <trans-unit id="bafe79121d248a43efee1030dde6b5487d10f09b" translate="yes" xml:space="preserve">
          <source>Function calls during interpreter cleanup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9280dd949d70767204a52eb0931da78deffc83d9" translate="yes" xml:space="preserve">
          <source>Function must be called with an already existing SV like</source>
          <target state="translated">기존 SV와 같은 함수를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="4c163bb94cadf4c0b267646fb2499c8ab2b33874" translate="yes" xml:space="preserve">
          <source>Function pointer, pointing at a function used to handle extended keywords. The function should be declared as</source>
          <target state="translated">확장 키워드를 처리하는 데 사용되는 함수를 가리키는 함수 포인터 함수는 다음과 같이 선언되어야합니다.</target>
        </trans-unit>
        <trans-unit id="5aeb99e40f76181fa3f90deee80d452fce2173d9" translate="yes" xml:space="preserve">
          <source>Function to (heuristically) canonicalize a C type. Works to some degree with C++ types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="280143fbedd7265a424b9acd0af7c98a66e476a6" translate="yes" xml:space="preserve">
          <source>Functional Interface</source>
          <target state="translated">기능성 인터페이스</target>
        </trans-unit>
        <trans-unit id="7def83b37bed0c4a472856ea76a2171ece16649f" translate="yes" xml:space="preserve">
          <source>Functional style</source>
          <target state="translated">기능적 스타일</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="1c61e24efc6706988ce877b75d28b4c69b714a46" translate="yes" xml:space="preserve">
          <source>Functions Returning &lt;code&gt;B::OP&lt;/code&gt; objects or for walking op trees</source>
          <target state="translated">&lt;code&gt;B::OP&lt;/code&gt; 객체를 반환 하거나 op 트리를 걷기위한 함수</target>
        </trans-unit>
        <trans-unit id="32ee6f99309a14456cfb212326be3dca1a77b910" translate="yes" xml:space="preserve">
          <source>Functions Returning &lt;code&gt;B::SV&lt;/code&gt; , &lt;code&gt;B::AV&lt;/code&gt; , &lt;code&gt;B::HV&lt;/code&gt; , and &lt;code&gt;B::CV&lt;/code&gt; objects</source>
          <target state="translated">&lt;code&gt;B::SV&lt;/code&gt; , &lt;code&gt;B::AV&lt;/code&gt; , &lt;code&gt;B::HV&lt;/code&gt; 및 &lt;code&gt;B::CV&lt;/code&gt; 객체를 반환하는 함수</target>
        </trans-unit>
        <trans-unit id="6b7363e65e6ab749a473690bf8b9f42ec2573a93" translate="yes" xml:space="preserve">
          <source>Functions Returning &lt;code&gt;B::SV&lt;/code&gt;, &lt;code&gt;B::AV&lt;/code&gt;, &lt;code&gt;B::HV&lt;/code&gt;, and &lt;code&gt;B::CV&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="854549ed50f6375d5b5e7597bbf2e5898d7693ff" translate="yes" xml:space="preserve">
          <source>Functions Returning B::OP objects or for walking op trees</source>
          <target state="translated">B :: OP 객체를 반환하거나 op 트리를 걷기위한 함수</target>
        </trans-unit>
        <trans-unit id="19372f8fa99b3b7135ba966c21643aafea9c2467" translate="yes" xml:space="preserve">
          <source>Functions Returning B::SV, B::AV, B::HV, and B::CV objects</source>
          <target state="translated">B :: SV, B :: AV, B :: HV 및 B :: CV 객체를 반환하는 함수</target>
        </trans-unit>
        <trans-unit id="d40a33bf3fa3ed923717e0c5ea11d6e647e8b77a" translate="yes" xml:space="preserve">
          <source>Functions and Attributes</source>
          <target state="translated">기능과 속성</target>
        </trans-unit>
        <trans-unit id="5348c5a5b62cd5dc86c5b99972e10885f9a1a5b3" translate="yes" xml:space="preserve">
          <source>Functions called in list context are assumed to have failed if they return an empty list, or a list consisting only of a single undef element.</source>
          <target state="translated">리스트 컨텍스트에서 호출 된 함수는 빈리스트 또는 단일 undef 요소로만 구성된리스트를 리턴하면 실패한 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="6c4c388285c500f1aeb8119de16be0528856e0bc" translate="yes" xml:space="preserve">
          <source>Functions for Examining the Symbol Table</source>
          <target state="translated">심벌 테이블 검사 기능</target>
        </trans-unit>
        <trans-unit id="1aa3d1b62ea8a0b12e865c1ddf8d70163d9ba54b" translate="yes" xml:space="preserve">
          <source>Functions for SCALARs or strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7759ffd239fd25b45ca1d91bf1c8ce464ea7bb64" translate="yes" xml:space="preserve">
          <source>Functions for dealing with RFC3066-style language tags</source>
          <target state="translated">RFC3066 스타일 언어 태그 처리 기능</target>
        </trans-unit>
        <trans-unit id="817344426c9ef1b03d9b71f46fa73a0908e28028" translate="yes" xml:space="preserve">
          <source>Functions for filehandles, files, or directories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8fb6af69da7c1c594c2d72fcf3e6037c72a3a63" translate="yes" xml:space="preserve">
          <source>Functions for fixed-length data or records</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa93174b979aea06c11158cb6837303f4f92b294" translate="yes" xml:space="preserve">
          <source>Functions for list data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="740a861f95ec5ef762fc9dcedf58db198e907d29" translate="yes" xml:space="preserve">
          <source>Functions for processes and process groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c977dc438518bc62c15e0ddf1a1aeaa92164c104" translate="yes" xml:space="preserve">
          <source>Functions for real %HASHes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1def89502ade553e83759248cf70728351a76ad7" translate="yes" xml:space="preserve">
          <source>Functions for real @ARRAYs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d88dd92ba634447236614d7e0a054cf44cd39205" translate="yes" xml:space="preserve">
          <source>Functions in file vutil.c</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88e6ab13b92c2e1e7592687e44e6735c69ae3aad" translate="yes" xml:space="preserve">
          <source>Functions to support Perl's traditional &quot;fast&quot; access to the buffer.</source>
          <target state="translated">버퍼에 대한 Perl의 전통적인 &quot;빠른&quot;액세스를 지원하는 기능.</target>
        </trans-unit>
        <trans-unit id="f616156f7ca62c9f603c623fae3a49e7426583da" translate="yes" xml:space="preserve">
          <source>Functions with a prototype of &lt;code&gt;()&lt;/code&gt; are potential candidates for inlining. If the result after optimization and constant folding is either a constant or a lexically-scoped scalar which has no other references, then it will be used in place of function calls made without &lt;code&gt;&amp;amp;&lt;/code&gt; . Calls made using &lt;code&gt;&amp;amp;&lt;/code&gt; are never inlined. (See</source>
          <target state="translated">프로토 타입이 &lt;code&gt;()&lt;/code&gt; 인 함수 는 인라인 가능성이 있습니다. 최적화 및 상수 폴딩 후 결과가 다른 참조가없는 상수 또는 어휘 범위 스칼라 인 경우 &lt;code&gt;&amp;amp;&lt;/code&gt; 없이 수행 된 함수 호출 대신 사용됩니다 . &lt;code&gt;&amp;amp;&lt;/code&gt; 를 사용하여 한 통화는 인라인되지 않습니다. (보다</target>
        </trans-unit>
        <trans-unit id="29c593d807fc7bf0bdd8648d7e0636d1bf7d2b82" translate="yes" xml:space="preserve">
          <source>Functions with a prototype of &lt;code&gt;()&lt;/code&gt; are potential candidates for inlining. If the result after optimization and constant folding is either a constant or a lexically-scoped scalar which has no other references, then it will be used in place of function calls made without &lt;code&gt;&amp;amp;&lt;/code&gt;. Calls made using &lt;code&gt;&amp;amp;&lt;/code&gt; are never inlined. (See</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="052d8ad81d99f33b2eb06e6d194282b8675fb201" translate="yes" xml:space="preserve">
          <source>Fundamentals</source>
          <target state="translated">Fundamentals</target>
        </trans-unit>
        <trans-unit id="a9d8d1b8ae4349b8a01d7c63e451fd799a9b7f8b" translate="yes" xml:space="preserve">
          <source>Funnies Section</source>
          <target state="translated">퍼니 섹션</target>
        </trans-unit>
        <trans-unit id="04c4c0235c4dcde402f292623ee26bd9ccce865c" translate="yes" xml:space="preserve">
          <source>Further Resources</source>
          <target state="translated">추가 자료</target>
        </trans-unit>
        <trans-unit id="a4850790bffd17894b4ec0822c491be3c4610fd3" translate="yes" xml:space="preserve">
          <source>Further examples of process-scope changes include &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask()&lt;/a&gt;&lt;/code&gt; and changing uids and gids.</source>
          <target state="translated">프로세스 범위 변경의 추가 예에는 &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask()&lt;/a&gt;&lt;/code&gt; 및 변경 uid 및 gid가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="6acba9002319816dbce3d1e95205619580925614" translate="yes" xml:space="preserve">
          <source>Further examples of process-scope changes include &lt;code&gt;umask()&lt;/code&gt; and changing uids and gids.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e8e4bbb1cbc5567f472983c6110b377f52c0cca" translate="yes" xml:space="preserve">
          <source>Further reading can be found using the modules and links below.</source>
          <target state="translated">자세한 내용은 아래 모듈 및 링크를 사용하여 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae0759b489099f7e983a5855b98b07fd1e2ddbe3" translate="yes" xml:space="preserve">
          <source>Further, the first element in a range never needs adjustment, as the adjustment would be just adding 0.</source>
          <target state="translated">또한 조정에 0을 추가하기 때문에 범위의 첫 번째 요소를 조정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="33028254f3093deff3764d716f328fa4ad9e5425" translate="yes" xml:space="preserve">
          <source>Further:</source>
          <target state="translated">Further:</target>
        </trans-unit>
        <trans-unit id="a080bfabfc41a91686c46efc096f30ef4fbf522d" translate="yes" xml:space="preserve">
          <source>Furthermore, Perl inspects the operands of logical operators to decide whether to use smartmatching for each one by applying the above test to the operands:</source>
          <target state="translated">또한 Perl은 논리 연산자의 피연산자를 검사하여 위의 테스트를 피연산자에 적용하여 각각에 대해 스마트 매칭을 사용할지 여부를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="51adfdfc6e30f15b7ff308a0a13705b1d26d399a" translate="yes" xml:space="preserve">
          <source>Furthermore, don't forget the &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; in there, as &lt;code&gt;&lt;a href=&quot;functions/foreach&quot;&gt;foreach&lt;/a&gt; &lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $kv (%hash) {}&lt;/code&gt; iterates over the keys and values, and is generally not useful ($kv would be a key, then a value, and so on).</source>
          <target state="translated">또한, 잊지 마세요 &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; 거기에, &lt;code&gt;&lt;a href=&quot;functions/foreach&quot;&gt;foreach&lt;/a&gt; &lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $kv (%hash) {}&lt;/code&gt; 키와 값 반복 할 때, 일반적으로 유용하지 않습니다를 ($ KV은 다음 키, 값 등이 될 것이다) .</target>
        </trans-unit>
        <trans-unit id="7a4a548dd47e23cb4ae11c2abe96cfeda0f0c055" translate="yes" xml:space="preserve">
          <source>Furthermore, don't forget the &lt;code&gt;keys&lt;/code&gt; in there, as &lt;code&gt;foreach my $kv (%hash) {}&lt;/code&gt; iterates over the keys and values, and is generally not useful ($kv would be a key, then a value, and so on).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db93480872e46ff5e0a7c8f5556d4345f41eef53" translate="yes" xml:space="preserve">
          <source>Furthermore, even if you have enabled this feature to be compiled, you need to enable it in runtime with an environment variable: &lt;code&gt;PERL_C_BACKTRACE_ON_ERROR=10&lt;/code&gt; . It must be an integer higher than zero, telling the desired frame count.</source>
          <target state="translated">또한이 기능을 컴파일하도록 설정 한 경우에도 환경 변수 &lt;code&gt;PERL_C_BACKTRACE_ON_ERROR=10&lt;/code&gt; 으로 런타임에 활성화해야합니다 . 원하는 프레임 수를 알려주는 0보다 큰 정수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="73aa508fbd2cc5c2217b2e267fa133e198e904de" translate="yes" xml:space="preserve">
          <source>Furthermore, even if you have enabled this feature to be compiled, you need to enable it in runtime with an environment variable: &lt;code&gt;PERL_C_BACKTRACE_ON_ERROR=10&lt;/code&gt;. It must be an integer higher than zero, telling the desired frame count.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79dbf7bed4736677573eda1bcecd5ea72126d919" translate="yes" xml:space="preserve">
          <source>Furthermore, for doing normal I/O you might need these:</source>
          <target state="translated">또한 정상적인 I / O를 수행하려면 다음이 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="48cc69c08fdaa003e83ba71f62025b569c3f16f4" translate="yes" xml:space="preserve">
          <source>Furthermore, ftp uris only support anonymous connections, so no named user/password pair can be passed along.</source>
          <target state="translated">또한 ftp uris는 익명 연결 만 지원하므로 명명 된 사용자 / 암호 쌍을 전달할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="524b0aff95e7ba2007348850646d7ceb43e068a9" translate="yes" xml:space="preserve">
          <source>Furthermore, remember that this caveat also applies to fork(), which is emulated by threads on Win32.</source>
          <target state="translated">또한이 경고는 fork ()에도 적용되며 이는 Win32의 스레드에 의해 에뮬레이트됩니다.</target>
        </trans-unit>
        <trans-unit id="d309a10ab62a5f76770beb2bdc55a4d79f7053a2" translate="yes" xml:space="preserve">
          <source>Furthermore, some evil vendors will claim 1003.1 compliance, but in fact are not so: they will not pass the PCTS (POSIX Compliance Test Suites). For example, one vendor may not define &lt;code&gt;EDEADLK&lt;/code&gt; , or the semantics of the errno values set by &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open(2)&lt;/a&gt;&lt;/code&gt; might not be quite right. Perl does not attempt to verify POSIX compliance. That means you can currently successfully say &quot;use POSIX&quot;, and then later in your program you find that your vendor has been lax and there's no usable &lt;code&gt;ICANON&lt;/code&gt; macro after all. This could be construed to be a bug.</source>
          <target state="translated">또한 일부 악의적 인 공급 업체는 1003.1 준수를 주장하지만 실제로는 그렇지 않습니다. PCTS (POSIX 준수 테스트 스위트)를 통과하지 못합니다. 예를 들어, 한 공급 업체가 &lt;code&gt;EDEADLK&lt;/code&gt; 를 정의하지 않거나 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open(2)&lt;/a&gt;&lt;/code&gt; 의해 설정된 errno 값의 의미 가 올바르지 않을 수 있습니다. Perl은 POSIX 준수 확인을 시도하지 않습니다. 즉, 현재 &quot;POSIX 사용&quot;이라고 말하면 나중에 프로그램에서 공급 업체가 느슨하고 사용 가능한 &lt;code&gt;ICANON&lt;/code&gt; 매크로 가 없다는 것을 알 수 있습니다. 이것은 버그로 해석 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ce18264929ec2cd7ba908d5d5cf35e5089f7b38e" translate="yes" xml:space="preserve">
          <source>Furthermore, some evil vendors will claim 1003.1 compliance, but in fact are not so: they will not pass the PCTS (POSIX Compliance Test Suites). For example, one vendor may not define &lt;code&gt;EDEADLK&lt;/code&gt;, or the semantics of the errno values set by &lt;code&gt;open(2)&lt;/code&gt; might not be quite right. Perl does not attempt to verify POSIX compliance. That means you can currently successfully say &quot;use POSIX&quot;, and then later in your program you find that your vendor has been lax and there's no usable &lt;code&gt;ICANON&lt;/code&gt; macro after all. This could be construed to be a bug.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13d4a69739d0088cb136cc4c16c74a337aabc059" translate="yes" xml:space="preserve">
          <source>Furthermore, special values, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&quot;prenormalized&quot;&lt;/code&gt; , can be used, though they are not concerned with &lt;code&gt;Unicode::Normalize::normalize()&lt;/code&gt; .</source>
          <target state="translated">또한 &lt;code&gt;Unicode::Normalize::normalize()&lt;/code&gt; 와 관련이 없지만 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&quot;prenormalized&quot;&lt;/code&gt; 특수 값을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="95aded6ad30c4c876c5144951a6bb66e49bec825" translate="yes" xml:space="preserve">
          <source>Furthermore, special values, &lt;code&gt;undef&lt;/code&gt; and &lt;code&gt;&quot;prenormalized&quot;&lt;/code&gt;, can be used, though they are not concerned with &lt;code&gt;Unicode::Normalize::normalize()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a481ff3ccbda516b9f33c8d20b42f50467089ec" translate="yes" xml:space="preserve">
          <source>Furthermore, when called from within the DB package in list context, and with an argument, caller returns more detailed information: it sets the list variable &lt;code&gt;@DB::args&lt;/code&gt; to be the arguments with which the subroutine was invoked.</source>
          <target state="translated">또한리스트 컨텍스트의 DB 패키지 내에서 그리고 인수를 사용하여 호출하면 더 자세한 정보를 리턴합니다. 호출자는리스트 변수 &lt;code&gt;@DB::args&lt;/code&gt; 를 서브 루틴이 호출 된 인수로 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="3f058db7875f38874b1a8c89b542a4bd6a932573" translate="yes" xml:space="preserve">
          <source>Furthermore, you should make sure that during &lt;code&gt;make test&lt;/code&gt; you do not have any GNU tool packages in your path: some toolkits like Unixutils include some tools (&lt;code&gt;type&lt;/code&gt; for instance) which override the Windows ones and makes tests fail. Remove them from your path while testing to avoid these errors.</source>
          <target state="translated">또한 &lt;code&gt;make test&lt;/code&gt; 중에 경로에 GNU 도구 패키지가 없는지 확인해야 합니다. Unixutils와 같은 일부 도구 키트에는 Windows 도구 를 무시하고 테스트에 실패하는 일부 도구 ( 예 : &lt;code&gt;type&lt;/code&gt; )가 포함되어 있습니다. 이러한 오류를 피하기 위해 테스트하는 동안 경로에서 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="d46735054f3a821c36d8dc0e38be2dc8069424e8" translate="yes" xml:space="preserve">
          <source>Future Plans and PERL_IMPLICIT_SYS</source>
          <target state="translated">향후 계획 및 PERL_IMPLICIT_SYS</target>
        </trans-unit>
        <trans-unit id="3da52a1809c9844f72a921784eef8acaa0a30f71" translate="yes" xml:space="preserve">
          <source>Future versions of Test::Builder will have a way to turn history off.</source>
          <target state="translated">Test :: Builder의 이후 버전에서는 히스토리를 끌 수있는 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="51696f9d78549516d07f8c451e43127c08733e4f" translate="yes" xml:space="preserve">
          <source>Future versions of this specification may add additional commands.</source>
          <target state="translated">이 사양의 이후 버전에서는 추가 명령이 추가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ca223e70a348b74c3e34848e1279271aecf5c237" translate="yes" xml:space="preserve">
          <source>Future versions of this specification may add additional formatting codes.</source>
          <target state="translated">이 사양의 이후 버전에서는 추가 형식 코드가 추가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="258ec93021438421e3c2a77885ab95a5bc2085a3" translate="yes" xml:space="preserve">
          <source>Future versions of this specification may specify how Pod can accept other encodings. Presumably treatment of other encodings in Pod parsing would be as in XML parsing: whatever the encoding declared by a particular Pod file, content is to be stored in memory as Unicode characters.</source>
          <target state="translated">이 사양의 이후 버전에서는 포드에서 다른 인코딩을 허용하는 방법을 지정할 수 있습니다. 아마도 포드 파싱에서 다른 인코딩을 처리하는 것은 XML 파싱에서와 같이 처리 될 것입니다. 특정 포드 파일에 의해 선언 된 인코딩이 무엇이든 컨텐츠는 메모리에 유니 코드 문자로 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="a36a6718f54524d846894fb04b5b885b4e43e63b" translate="yes" xml:space="preserve">
          <source>G</source>
          <target state="translated">G</target>
        </trans-unit>
        <trans-unit id="349a5bc532bd3c593d57694baf4470fa82e87c0e" translate="yes" xml:space="preserve">
          <source>GAMESRVR.DLL</source>
          <target state="translated">GAMESRVR.DLL</target>
        </trans-unit>
        <trans-unit id="4b20b8626ac71ec5966b767f3a27db1efb9164a2" translate="yes" xml:space="preserve">
          <source>GB2312</source>
          <target state="translated">GB2312</target>
        </trans-unit>
        <trans-unit id="8577b47d2b705ad56be34a1a6a9f6472d1ac1001" translate="yes" xml:space="preserve">
          <source>GCC</source>
          <target state="translated">GCC</target>
        </trans-unit>
        <trans-unit id="0ba6cc1e2d0d56ce9630a0f34e6f5f991c2e2104" translate="yes" xml:space="preserve">
          <source>GCC gcov Profiling</source>
          <target state="translated">GCC gcov 프로파일 링</target>
        </trans-unit>
        <trans-unit id="3f0f4dcc948d6cb707fe551e6eeba47a39180607" translate="yes" xml:space="preserve">
          <source>GCC/mingw32 support was added in 5.005 (Nick Ing-Simmons).</source>
          <target state="translated">GCC / mingw32 지원은 5.005 (Nick Ing-Simmons)에 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="33a96db7f69918beb1bb533b8df7e3de1b7deb54" translate="yes" xml:space="preserve">
          <source>GDBM and Threads on HP-UX</source>
          <target state="translated">HP-UX의 GDBM 및 스레드</target>
        </trans-unit>
        <trans-unit id="6b0cdb8d334af2771320e52622f1437cac91bcf8" translate="yes" xml:space="preserve">
          <source>GDBM files are not portable across platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905e76d37d3d8721076484b8d01762ed235eeb6a" translate="yes" xml:space="preserve">
          <source>GDBM is available for Cygwin.</source>
          <target state="translated">Cygwin에 GDBM을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="28d30fbb4a1a3e8c1dee0938999d88dedf07b61e" translate="yes" xml:space="preserve">
          <source>GDBM_File</source>
          <target state="translated">GDBM_File</target>
        </trans-unit>
        <trans-unit id="6e8a0da791506d4b9bf11a03346683d1558e8a0b" translate="yes" xml:space="preserve">
          <source>GDBM_File - Perl5 access to the gdbm library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d863e74bd0b116ddd849d0adcb4ad5aac6aa2f" translate="yes" xml:space="preserve">
          <source>GENERAL</source>
          <target state="translated">GENERAL</target>
        </trans-unit>
        <trans-unit id="ae00d8f3134d79b137732c9cb7f102d8f0802921" translate="yes" xml:space="preserve">
          <source>GENERAL GUIDELINES</source>
          <target state="translated">일반 지침</target>
        </trans-unit>
        <trans-unit id="cfc8c411b52ab97d4ba8b7d2031eeeb05a2b4008" translate="yes" xml:space="preserve">
          <source>GEOFFR</source>
          <target state="translated">GEOFFR</target>
        </trans-unit>
        <trans-unit id="f1e0288997c57a8d9fd4428af2fd20a5ba1449d2" translate="yes" xml:space="preserve">
          <source>GETC this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4436bb8419bf48bac46201558f5a31e7d9d3f75" translate="yes" xml:space="preserve">
          <source>GETTING A LIST OF ATTRIBUTES FOR A CLASS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b652c3125ece0a5e5b4b20d19c89323f6ee9348" translate="yes" xml:space="preserve">
          <source>GETTING HELP</source>
          <target state="translated">도움을 받다</target>
        </trans-unit>
        <trans-unit id="ea74752c1746be440f33aa941cc68b5ede779336" translate="yes" xml:space="preserve">
          <source>GETTING STARTED</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd86c073f225f3fdc6eca764a69478ae8ba27649" translate="yes" xml:space="preserve">
          <source>GETTING THE PERL SOURCE</source>
          <target state="translated">펄 소스 얻기</target>
        </trans-unit>
        <trans-unit id="0eb9134908bf3052cb06a8cc617e0deb5188f0b7" translate="yes" xml:space="preserve">
          <source>GGG</source>
          <target state="translated">GGG</target>
        </trans-unit>
        <trans-unit id="d3ab0d37a5570c2a63b16ca617fa7f37aa9c811f" translate="yes" xml:space="preserve">
          <source>GID</source>
          <target state="translated">GID</target>
        </trans-unit>
        <trans-unit id="d11f4a180999d12aed1e0b125207b005c1dab5a2" translate="yes" xml:space="preserve">
          <source>GIMME</source>
          <target state="translated">GIMME</target>
        </trans-unit>
        <trans-unit id="69fca1a811eb90b0e4d72f7d05f3a9aefce86dad" translate="yes" xml:space="preserve">
          <source>GIMME_V</source>
          <target state="translated">GIMME_V</target>
        </trans-unit>
        <trans-unit id="d957a2be14a1b162437963fe1ed8dc23e8a068b0" translate="yes" xml:space="preserve">
          <source>GIT DATA</source>
          <target state="translated">GIT 데이터</target>
        </trans-unit>
        <trans-unit id="424c222a43dbd3e23a7893c9c6ed5902d080dc2f" translate="yes" xml:space="preserve">
          <source>GIT_COMMAND</source>
          <target state="translated">GIT_COMMAND</target>
        </trans-unit>
        <trans-unit id="db6486702756155b84091f45f65d700a7e9f5b88" translate="yes" xml:space="preserve">
          <source>GLOBAL</source>
          <target state="translated">GLOBAL</target>
        </trans-unit>
        <trans-unit id="bf98dc1a3b408b3c50c0a64164f6cbb372e44595" translate="yes" xml:space="preserve">
          <source>GLOBAL VARIABLES</source>
          <target state="translated">글로벌 변수</target>
        </trans-unit>
        <trans-unit id="f25bdd9f8631b9874b5643e6065c3d9abb3ebbf0" translate="yes" xml:space="preserve">
          <source>GLOSSARY</source>
          <target state="translated">GLOSSARY</target>
        </trans-unit>
        <trans-unit id="edd4b1d28d6fabbd459aa39cee2bc60f4dc2cacf" translate="yes" xml:space="preserve">
          <source>GNU &lt;code&gt;info&lt;/code&gt; files</source>
          <target state="translated">GNU &lt;code&gt;info&lt;/code&gt; 파일</target>
        </trans-unit>
        <trans-unit id="9d091b9a5e4c37cafcd83a2e7be1ecc3c772330b" translate="yes" xml:space="preserve">
          <source>GNU C Library documentation on syslog, &lt;a href=&quot;http://www.gnu.org/software/libc/manual/html_node/Syslog.html&quot;&gt;http://www.gnu.org/software/libc/manual/html_node/Syslog.html&lt;/a&gt;</source>
          <target state="translated">syslog에 대한 GNU C 라이브러리 설명서, &lt;a href=&quot;http://www.gnu.org/software/libc/manual/html_node/Syslog.html&quot;&gt;http://www.gnu.org/software/libc/manual/html_node/Syslog.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a1e51bbeeb3ab635c2ddf385a984fd33821a9387" translate="yes" xml:space="preserve">
          <source>GNU Emacs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f329865e118f755d9ae2897c3d1036d691b75a09" translate="yes" xml:space="preserve">
          <source>GNU Tar authors have expressed their intention to become completely POSIX-compatible; &lt;code&gt;&lt;a href=&quot;http://www.gnu.org/software/tar/manual/html_node/Formats.html&quot;&gt;http://www.gnu.org/software/tar/manual/html_node/Formats.html&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">GNU Tar 저자들은 POSIX와 완벽하게 호환 될 의사를 표명했습니다. &lt;code&gt;&lt;a href=&quot;http://www.gnu.org/software/tar/manual/html_node/Formats.html&quot;&gt;http://www.gnu.org/software/tar/manual/html_node/Formats.html&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="51832f7d5d9df2260a0a5d59e6cd7008268422b7" translate="yes" xml:space="preserve">
          <source>GNU Tar authors have expressed their intention to become completely POSIX-compatible; &lt;code&gt;http://www.gnu.org/software/tar/manual/html_node/Formats.html&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b96a59e926131797b97a5280ca47b763871d9867" translate="yes" xml:space="preserve">
          <source>GNU as and GNU ld</source>
          <target state="translated">GNU as 및 GNU ld</target>
        </trans-unit>
        <trans-unit id="ffac9623e4fbfd01208662e12093c3420e35fe08" translate="yes" xml:space="preserve">
          <source>GNU info files</source>
          <target state="translated">GNU 정보 파일</target>
        </trans-unit>
        <trans-unit id="c0e4228983ccde5f3b6e514a717cb5799952c59a" translate="yes" xml:space="preserve">
          <source>GNU make for OS/390, which is recommended for the build of perl (as well as building CPAN modules and extensions), is available from the &lt;a href=&quot;#Tools&quot;&gt;&quot;Tools&quot;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a602c9a5bb16737d2d0e6f0af42d0ffbca2fd496" translate="yes" xml:space="preserve">
          <source>GNU make for OS/390, which is recommended for the build of perl (as well as building CPAN modules and extensions), is available from the &lt;a href=&quot;#Tools&quot;&gt;Tools&lt;/a&gt;.</source>
          <target state="translated">perl 빌드 (CPAN 모듈 및 확장 빌드)에 권장되는 OS / 390 용 GNU make는 &lt;a href=&quot;#Tools&quot;&gt;도구&lt;/a&gt; 에서 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7c896fe8a3a7da4457cab55117479c000e8e302b" translate="yes" xml:space="preserve">
          <source>GNU tar intends to switch to POSIX compatibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e95dc9b959dea83d9c2c4412bad8dbf6a30b36" translate="yes" xml:space="preserve">
          <source>GNV$UNIX_SHELL</source>
          <target state="translated">GNV$UNIX_SHELL</target>
        </trans-unit>
        <trans-unit id="d7332b9fd2e3b51ce3e0b297993ed332c301d3b1" translate="yes" xml:space="preserve">
          <source>GOODIES</source>
          <target state="translated">GOODIES</target>
        </trans-unit>
        <trans-unit id="5c3f2689267efedfd1b8d32a4de8ae076b08ae19" translate="yes" xml:space="preserve">
          <source>GOTCHAS</source>
          <target state="translated">GOTCHAS</target>
        </trans-unit>
        <trans-unit id="fe0ce1b835b0b5932a5c8ab2b59f416e1e42dc46" translate="yes" xml:space="preserve">
          <source>GOVERNANCE</source>
          <target state="translated">GOVERNANCE</target>
        </trans-unit>
        <trans-unit id="a1e3af67602793f9d1ffe507c5ce73e03e79f73b" translate="yes" xml:space="preserve">
          <source>GPFLAGS</source>
          <target state="translated">GPFLAGS</target>
        </trans-unit>
        <trans-unit id="9457100d18567dc55592e3720d770ae879354f10" translate="yes" xml:space="preserve">
          <source>GPOS</source>
          <target state="translated">GPOS</target>
        </trans-unit>
        <trans-unit id="a0dce8feda03c8a60940891df8a100aa6d34a49e" translate="yes" xml:space="preserve">
          <source>GREAT CIRCLE DISTANCES AND DIRECTIONS</source>
          <target state="translated">훌륭한 원거리 및 방향</target>
        </trans-unit>
        <trans-unit id="238b03cb844fb70b0e442f33902b4377da8a5e77" translate="yes" xml:space="preserve">
          <source>GROK_NUMERIC_RADIX</source>
          <target state="translated">GROK_NUMERIC_RADIX</target>
        </trans-unit>
        <trans-unit id="f33d85ab379fda0c05941052326738c9fe2a1ea5" translate="yes" xml:space="preserve">
          <source>GSM0338 is for GSM handsets. Though it shares alphanumerals with ASCII, control character ranges and other parts are mapped very differently, mainly to store Greek characters. There are also escape sequences (starting with 0x1B) to cover e.g. the Euro sign.</source>
          <target state="translated">GSM0338은 GSM 핸드셋 용입니다. ASCII와 영숫자를 공유하지만 제어 문자 범위와 다른 부분은 주로 그리스 문자를 저장하기 위해 매우 다르게 매핑됩니다. 유로 기호와 같은 이스케이프 시퀀스 (0x1B로 시작)도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c0cf065d2bd69adbe2ec92fa3feabfd7bf3b9886" translate="yes" xml:space="preserve">
          <source>GUI editor written in Perl using wxWidgets and Scintilla with lots of smaller features. Aims for a UI based on Perl principles like TIMTOWTDI and &quot;easy things should be easy, hard things should be possible&quot;.</source>
          <target state="translated">작은 기능이 많은 wxWidgets 및 Scintilla를 사용하여 Perl로 작성된 GUI 편집기. TIMTOWTDI와 같은 Perl 원칙을 기반으로하는 UI를 목표로하고 &quot;쉬운 것은 쉬워야하며 어려운 것은 가능해야합니다&quot;.</target>
        </trans-unit>
        <trans-unit id="8e8d08c08351d6aca5a776c4b8922b52fb3e13e8" translate="yes" xml:space="preserve">
          <source>GUIs</source>
          <target state="translated">GUIs</target>
        </trans-unit>
        <trans-unit id="65f937109da9f4d01ac30946e434018e19ee2dcd" translate="yes" xml:space="preserve">
          <source>GUTS</source>
          <target state="translated">GUTS</target>
        </trans-unit>
        <trans-unit id="563a021933374395b6a1f2af7dd605d7bbeb2b68" translate="yes" xml:space="preserve">
          <source>GV</source>
          <target state="translated">GV</target>
        </trans-unit>
        <trans-unit id="870b564576a2966c189631c03afc2f57fdfb6686" translate="yes" xml:space="preserve">
          <source>GV Functions</source>
          <target state="translated">GV 기능</target>
        </trans-unit>
        <trans-unit id="9d9beab3a461023f05f50f04ae763cdd94b4433a" translate="yes" xml:space="preserve">
          <source>GV_ADDMULTI</source>
          <target state="translated">GV_ADDMULTI</target>
        </trans-unit>
        <trans-unit id="bb657266f56156b0c7d3d1e82903df52e1347755" translate="yes" xml:space="preserve">
          <source>GV_ADDWARN</source>
          <target state="translated">GV_ADDWARN</target>
        </trans-unit>
        <trans-unit id="e717e9026bec8b632428e734dfdc5a2ec21c2f4d" translate="yes" xml:space="preserve">
          <source>GV_SUPER indicates that we want to look up the method in the superclasses of the &lt;code&gt;stash&lt;/code&gt; .</source>
          <target state="translated">GV_SUPER는 &lt;code&gt;stash&lt;/code&gt; 의 수퍼 클래스에서 메소드를 검색하려고 함을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="93253898f4f199634af1de90ddc5528b941ce169" translate="yes" xml:space="preserve">
          <source>GVs are usually found as values in stashes (symbol table hashes) where Perl stores its global variables.</source>
          <target state="translated">GV는 일반적으로 Perl이 전역 변수를 저장하는 스 태쉬 (기호 테이블 해시)의 값으로 발견됩니다.</target>
        </trans-unit>
        <trans-unit id="c0a0df7086cece5998142ac057f6fc84ddc5c9a2" translate="yes" xml:space="preserve">
          <source>GZIP</source>
          <target state="translated">GZIP</target>
        </trans-unit>
        <trans-unit id="da99bf684e2839f1607c7a6984181f3b8083a1e7" translate="yes" xml:space="preserve">
          <source>GZIP INTERFACE</source>
          <target state="translated">GZIP 인터페이스</target>
        </trans-unit>
        <trans-unit id="cb13f819c9cca26bbe274d82fa237ae5e6a86319" translate="yes" xml:space="preserve">
          <source>G_ARRAY</source>
          <target state="translated">G_ARRAY</target>
        </trans-unit>
        <trans-unit id="c9afb596821a60db6f147bb13345cb27d6cd8acd" translate="yes" xml:space="preserve">
          <source>G_DISCARD</source>
          <target state="translated">G_DISCARD</target>
        </trans-unit>
        <trans-unit id="7c0c17b4a676352405579500514e68a451e3e0e0" translate="yes" xml:space="preserve">
          <source>G_EVAL</source>
          <target state="translated">G_EVAL</target>
        </trans-unit>
        <trans-unit id="336b3ba483f4b583d3b8e432539a535eec3195ef" translate="yes" xml:space="preserve">
          <source>G_KEEPERR</source>
          <target state="translated">G_KEEPERR</target>
        </trans-unit>
        <trans-unit id="0d759ade2aa36ab678fa55030c3ec31bde1a4c30" translate="yes" xml:space="preserve">
          <source>G_NOARGS</source>
          <target state="translated">G_NOARGS</target>
        </trans-unit>
        <trans-unit id="f4700a48056cc6ff4268baa6339552754ce5bf82" translate="yes" xml:space="preserve">
          <source>G_SCALAR</source>
          <target state="translated">G_SCALAR</target>
        </trans-unit>
        <trans-unit id="ad1ccfc7340540dee07e8608d1a88363df56cc05" translate="yes" xml:space="preserve">
          <source>G_VOID</source>
          <target state="translated">G_VOID</target>
        </trans-unit>
        <trans-unit id="b748b29d51e0edd87f8e905e8b76fcaba49cd779" translate="yes" xml:space="preserve">
          <source>Gabor Szabo &lt;code&gt;szabgab@gmail.com&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9bbda071163c5693883e06db98012930631d19" translate="yes" xml:space="preserve">
          <source>Garbage collection can be confusing when keys are created in a field hash from normal scalars as well as references. Once a reference is</source>
          <target state="translated">가비지 콜렉션은 참조뿐만 아니라 일반 스칼라에서 필드 해시로 키를 작성할 때 혼동 될 수 있습니다. 일단 참조가</target>
        </trans-unit>
        <trans-unit id="fc30f25cde3aea2004fdaffc34ec529a477f5957" translate="yes" xml:space="preserve">
          <source>Garbage collection in a field hash means that entries will &quot;spontaneously&quot; disappear when the object that created them disappears. That must be borne in mind, especially when looping over a field hash. If anything you do inside the loop could cause an object to go out of scope, a random key may be deleted from the hash you are looping over. That can throw the loop iterator, so it's best to cache a consistent snapshot of the keys and/or values and loop over that. You will still have to check that a cached entry still exists when you get to it.</source>
          <target state="translated">필드 해시의 가비지 콜렉션은 항목을 작성한 오브젝트가 사라지면 항목이 &quot;자발적으로&quot;사라진다는 것을 의미합니다. 특히 필드 해시를 반복 할 때 명심해야합니다. 루프 내부에서 수행하는 작업으로 인해 개체가 범위를 벗어나는 경우 임의의 키가 반복되는 해시에서 삭제 될 수 있습니다. 루프 반복자를 던질 수 있으므로 키 및 / 또는 값의 일관된 스냅 샷을 캐시하고 반복하는 것이 가장 좋습니다. 캐시 된 항목이 도착해도 여전히 존재하는지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="fc5702bf94c050f203b549ef0c85e9b81b70dad0" translate="yes" xml:space="preserve">
          <source>Garbage-Collected Hashes</source>
          <target state="translated">쓰레기 수집 해시</target>
        </trans-unit>
        <trans-unit id="9787c03e8d6dc4bce456ef42571d84981f4571de" translate="yes" xml:space="preserve">
          <source>Gareth Harper &amp;lt;gareth@broadbean.com&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b51fb138e83025d75d33ccab44d80c862bfbff" translate="yes" xml:space="preserve">
          <source>Gary Ng &amp;lt;71564.1743@CompuServe.COM&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec6ebf4fdb8455b53f8d6215ef9f6363a9f9d67" translate="yes" xml:space="preserve">
          <source>Gather package and POD information from perl module files</source>
          <target state="translated">Perl 모듈 파일에서 패키지 및 POD 정보 수집</target>
        </trans-unit>
        <trans-unit id="ff0ce44a9b44893e7937aae11d3bb72fdbd54b73" translate="yes" xml:space="preserve">
          <source>Gathered below are notes describing details of Perl 5's behavior on VMS. They are a supplement to the regular Perl 5 documentation, so we have focussed on the ways in which Perl 5 functions differently under VMS than it does under Unix, and on the interactions between Perl and the rest of the operating system. We haven't tried to duplicate complete descriptions of Perl features from the main Perl documentation, which can be found in the</source>
          <target state="translated">VMS에서 Perl 5의 동작에 대한 세부 사항을 설명하는 참고 사항이 아래에 수집되어 있습니다. 그것들은 일반적인 Perl 5 문서를 보완하기 때문에 우리는 Perl 5가 Unix에서와 다른 방식으로 VMS에서 다르게 작동하는 방식과 Perl과 나머지 운영 체제 간의 상호 작용에 중점을 두었습니다. 주요 Perl 문서에서 Perl 기능에 대한 완전한 설명을 복제하지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="7f9312aa0641ccf48f613c14cf0915e110bff9fc" translate="yes" xml:space="preserve">
          <source>Gathers meta data about the &lt;a href=&quot;#raw&quot;&gt;&quot;raw&quot;&lt;/a&gt; source, stashes it in &lt;a href=&quot;#meta&quot;&gt;&quot;meta&quot;&lt;/a&gt; and returns it as a hashref. This is done so that the &lt;a href=&quot;TAP::Parser::SourceHandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt;s don't have to repeat common checks. Currently this includes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4330768b6cbb368cf11bfc2a1aa3b4b4975bf79" translate="yes" xml:space="preserve">
          <source>Gathers meta data about the &lt;a href=&quot;#raw&quot;&gt;raw&lt;/a&gt; source, stashes it in &lt;a href=&quot;#meta&quot;&gt;meta&lt;/a&gt; and returns it as a hashref. This is done so that the &lt;a href=&quot;sourcehandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt;s don't have to repeat common checks. Currently this includes:</source>
          <target state="translated">&lt;a href=&quot;#raw&quot;&gt;원시&lt;/a&gt; 소스 에 대한 메타 데이터를 수집 하여 &lt;a href=&quot;#meta&quot;&gt;메타에 보관&lt;/a&gt; 하고 해시 참조로 반환합니다. 이것은 &lt;a href=&quot;sourcehandler&quot;&gt;TAP :: Parser :: SourceHandler&lt;/a&gt; 가 일반적인 검사를 반복 할 필요가 없도록하기위한 것입니다. 현재 여기에는 다음이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="0a7877a5c7bf9a390ddf2644ce8f01d2dd749296" translate="yes" xml:space="preserve">
          <source>Gee, yet another template code - as if we hadn't plenty. But &lt;code&gt;@&lt;/code&gt; saves our day by enabling us to specify the offset from the beginning of the pack buffer to the next item: This is just the value the &lt;code&gt;offsetof&lt;/code&gt; macro (defined in &lt;code&gt;&amp;lt;stddef.h&amp;gt;&lt;/code&gt; ) returns when given a &lt;code&gt;struct&lt;/code&gt; type and one of its field names (&quot;member-designator&quot; in C standardese).</source>
          <target state="translated">Gee, 또 다른 템플릿 코드-마치 우리가 충분하지 않은 것처럼. 그러나 &lt;code&gt;@&lt;/code&gt; 가있는 다음의 항목에 팩 버퍼의 선두로부터의 오프셋 (offset)를 지정하기 위해 우리를 가능하게함으로써 우리의 일을 저장 : 이것은 단지 값 &lt;code&gt;offsetof&lt;/code&gt; 매크로 (정의 &lt;code&gt;&amp;lt;stddef.h&amp;gt;&lt;/code&gt; 주어진 경우 반환) &lt;code&gt;struct&lt;/code&gt; 유형 중 하나를 필드 이름 (C 표준의 &quot;멤버 지정자&quot;).</target>
        </trans-unit>
        <trans-unit id="251cdd279420c660784beb6674f601d3c2129cbb" translate="yes" xml:space="preserve">
          <source>Gee, yet another template code - as if we hadn't plenty. But &lt;code&gt;@&lt;/code&gt; saves our day by enabling us to specify the offset from the beginning of the pack buffer to the next item: This is just the value the &lt;code&gt;offsetof&lt;/code&gt; macro (defined in &lt;code&gt;&amp;lt;stddef.h&amp;gt;&lt;/code&gt;) returns when given a &lt;code&gt;struct&lt;/code&gt; type and one of its field names (&quot;member-designator&quot; in C standardese).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7264840e686c65159ebed179560079a997c941c5" translate="yes" xml:space="preserve">
          <source>General 32-bit vs. 64-bit issues.</source>
          <target state="translated">일반적인 32 비트 및 64 비트 문제</target>
        </trans-unit>
        <trans-unit id="0b01c727a71003b8392c50d5e2ddffdc179cdf34" translate="yes" xml:space="preserve">
          <source>General Notes</source>
          <target state="translated">일반 사항</target>
        </trans-unit>
        <trans-unit id="7bafdc805eb49ade4dcc8f1b7c25df23aa8d76e7" translate="yes" xml:space="preserve">
          <source>General Perl style guide</source>
          <target state="translated">일반 펄 스타일 가이드</target>
        </trans-unit>
        <trans-unit id="c4a42d220d26c466f9dbb535a2b1b9eda4a1fde7" translate="yes" xml:space="preserve">
          <source>General Thread Utility Routines</source>
          <target state="translated">일반 스레드 유틸리티 루틴</target>
        </trans-unit>
        <trans-unit id="faddfc843ac71019b3393df672837907ac7bbcab" translate="yes" xml:space="preserve">
          <source>General Variables</source>
          <target state="translated">일반 변수</target>
        </trans-unit>
        <trans-unit id="f183e804ff54f5c70fea1801cabc1af8c1ecfaeb" translate="yes" xml:space="preserve">
          <source>General behaviour in list contexts</source>
          <target state="translated">목록 컨텍스트의 일반적인 동작</target>
        </trans-unit>
        <trans-unit id="c3adf35af62fa854c8d064fa3f4201bca217f3c3" translate="yes" xml:space="preserve">
          <source>General behaviour in scalar and void contexts</source>
          <target state="translated">스칼라 및 공백 컨텍스트의 일반적인 동작</target>
        </trans-unit>
        <trans-unit id="f87d868ae9e6c5e095ed3921aff5b72a01552118" translate="yes" xml:space="preserve">
          <source>General examples:</source>
          <target state="translated">일반적인 예 :</target>
        </trans-unit>
        <trans-unit id="1fa7d4327fa3fac797d2494a8dbdc1859972a516" translate="yes" xml:space="preserve">
          <source>General explanations on cross-compiling WinCE</source>
          <target state="translated">크로스 컴파일 WinCE에 대한 일반적인 설명</target>
        </trans-unit>
        <trans-unit id="177b775b3f900e80db9a3c9d077fbb178e3ecaf3" translate="yes" xml:space="preserve">
          <source>General feedback/questions/bug reports should be sent to &lt;a href=&quot;https://github.com/pmqs//issues&quot;&gt;https://github.com/pmqs//issues&lt;/a&gt; (preferred) or &lt;a href=&quot;https://rt.cpan.org/Public/Dist/Display.html?Name=&quot;&gt;https://rt.cpan.org/Public/Dist/Display.html?Name=&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7003218564df84918ab14576c96daf28ad6398a" translate="yes" xml:space="preserve">
          <source>General feedback/questions/bug reports should be sent to &lt;a href=&quot;https://github.com/pmqs/Compress-Raw-Bzip2/issues&quot;&gt;https://github.com/pmqs/Compress-Raw-Bzip2/issues&lt;/a&gt; (preferred) or &lt;a href=&quot;https://rt.cpan.org/Public/Dist/Display.html?Name=Compress-Raw-Bzip2&quot;&gt;https://rt.cpan.org/Public/Dist/Display.html?Name=Compress-Raw-Bzip2&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cb6b11beb81f923f31dc7e72861a82e63567880" translate="yes" xml:space="preserve">
          <source>General feedback/questions/bug reports should be sent to &lt;a href=&quot;https://github.com/pmqs/Compress-Raw-Zlib/issues&quot;&gt;https://github.com/pmqs/Compress-Raw-Zlib/issues&lt;/a&gt; (preferred) or &lt;a href=&quot;https://rt.cpan.org/Public/Dist/Display.html?Name=Compress-Raw-Zlib&quot;&gt;https://rt.cpan.org/Public/Dist/Display.html?Name=Compress-Raw-Zlib&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98e3990e86da90fdd4ed6da884dfef00f8e74c8a" translate="yes" xml:space="preserve">
          <source>General feedback/questions/bug reports should be sent to &lt;a href=&quot;https://github.com/pmqs/DB_File/issues&quot;&gt;https://github.com/pmqs/DB_File/issues&lt;/a&gt; (preferred) or &lt;a href=&quot;https://rt.cpan.org/Public/Dist/Display.html?Name=DB_File&quot;&gt;https://rt.cpan.org/Public/Dist/Display.html?Name=DB_File&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3362aa8378cf817a219d847407113ea16bdc5bcc" translate="yes" xml:space="preserve">
          <source>General feedback/questions/bug reports should be sent to &lt;a href=&quot;https://github.com/pmqs/IO-Compress/issues&quot;&gt;https://github.com/pmqs/IO-Compress/issues&lt;/a&gt; (preferred) or &lt;a href=&quot;https://rt.cpan.org/Public/Dist/Display.html?Name=IO-Compress&quot;&gt;https://rt.cpan.org/Public/Dist/Display.html?Name=IO-Compress&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bee1469722ea0f03a9b4809dcbaa903f16d4ac7" translate="yes" xml:space="preserve">
          <source>General feedback/questions/bug reports should be sent to &lt;a href=&quot;https://github.com/pmqs/IO-Copress/issues&quot;&gt;https://github.com/pmqs/IO-Copress/issues&lt;/a&gt; (preferred) or &lt;a href=&quot;https://rt.cpan.org/Public/Dist/Display.html?Name=IO-Copress&quot;&gt;https://rt.cpan.org/Public/Dist/Display.html?Name=IO-Copress&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ab49617e74fefea30381e0a0b013db01a2c54c" translate="yes" xml:space="preserve">
          <source>General tools</source>
          <target state="translated">일반 도구</target>
        </trans-unit>
        <trans-unit id="e168d4dcec8a34250248e4642467cb387ae19975" translate="yes" xml:space="preserve">
          <source>General_Category</source>
          <target state="translated">General_Category</target>
        </trans-unit>
        <trans-unit id="bc589851c4083a051730b622221b86c22bbd8a1c" translate="yes" xml:space="preserve">
          <source>Generalized quotes. See &lt;a href=&quot;../perlop#Quote-Like-Operators&quot;&gt;Quote-Like Operators in perlop&lt;/a&gt;.</source>
          <target state="translated">일반화 된 따옴표. &lt;a href=&quot;../perlop#Quote-Like-Operators&quot;&gt;perlop의 인용 부호 연산자를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ec5a04346396f5e9c79d41816857e66f2100300f" translate="yes" xml:space="preserve">
          <source>Generalized quotes. See &lt;a href=&quot;perlop#Quote-Like-Operators&quot;&gt;&quot;Quote-Like Operators&quot; in perlop&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c176de14201d5eb9a9b50ccc11298ef3cd109ef6" translate="yes" xml:space="preserve">
          <source>Generalized quotes. See &lt;a href=&quot;perlop#Quote-Like-Operators&quot;&gt;Quote-Like Operators in perlop&lt;/a&gt;.</source>
          <target state="translated">일반화 된 따옴표. &lt;a href=&quot;perlop#Quote-Like-Operators&quot;&gt;perlop의 인용 부호 연산자를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ad57f21ae3c6ac53ed83e3da2f741a3990c73305" translate="yes" xml:space="preserve">
          <source>Generally anything not exported is still accessible from outside the module using the &lt;code&gt;YourModule::item_name&lt;/code&gt; (or &lt;code&gt;$blessed_ref-&amp;gt;method&lt;/code&gt; ) syntax. By convention you can use a leading underscore on names to informally indicate that they are 'internal' and not for public use.</source>
          <target state="translated">일반적으로 내 보내지 않은 것은 &lt;code&gt;YourModule::item_name&lt;/code&gt; (또는 &lt;code&gt;$blessed_ref-&amp;gt;method&lt;/code&gt; ) 구문을 사용하여 모듈 외부에서 여전히 액세스 할 수 있습니다 . 관례 적으로 이름에 밑줄을 사용하여 '내부'이며 공개적으로 사용되지 않음을 비공식적으로 나타낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f85f05eb1ba5a8d34d1ecc4b9502fcb20ee9932a" translate="yes" xml:space="preserve">
          <source>Generally anything not exported is still accessible from outside the module using the &lt;code&gt;YourModule::item_name&lt;/code&gt; (or &lt;code&gt;$blessed_ref-&amp;gt;method&lt;/code&gt;) syntax. By convention you can use a leading underscore on names to informally indicate that they are 'internal' and not for public use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80cc2c98f271588e14fc9b40a4be695fc7549ee7" translate="yes" xml:space="preserve">
          <source>Generally anything not exported is still accessible from outside the module using the ModuleName::item_name (or &lt;code&gt;$blessed_ref-&amp;gt;method&lt;/code&gt; ) syntax. By convention you can use a leading underscore on names to indicate informally that they are 'internal' and not for public use.</source>
          <target state="translated">일반적으로 내 보내지 않은 것은 ModuleName :: item_name (또는 &lt;code&gt;$blessed_ref-&amp;gt;method&lt;/code&gt; ) 구문을 사용하여 모듈 외부에서 여전히 액세스 할 수 있습니다 . 관례에 따라 이름에 밑줄을 사용하여 '내부'이며 대중 용이 아님을 비공식적으로 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8abf0da6ea8437cdd5d0b8303854565189df730d" translate="yes" xml:space="preserve">
          <source>Generally anything not exported is still accessible from outside the module using the ModuleName::item_name (or &lt;code&gt;$blessed_ref-&amp;gt;method&lt;/code&gt;) syntax. By convention you can use a leading underscore on names to indicate informally that they are 'internal' and not for public use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1fe2ca53692f111e8f5344d4ee32097c8e139d1" translate="yes" xml:space="preserve">
          <source>Generally one only needs to call the &lt;code&gt;WriteConstants&lt;/code&gt; function, and then</source>
          <target state="translated">일반적으로 &lt;code&gt;WriteConstants&lt;/code&gt; 함수 만 호출하면됩니다.</target>
        </trans-unit>
        <trans-unit id="7752355855cfc396e704af98f16ff556c4a77375" translate="yes" xml:space="preserve">
          <source>Generally speaking, PerlIO layers (previously sometimes referred to as &quot;disciplines&quot;) are an ordered stack applied to a filehandle (specified as a space- or colon-separated list, conventionally written with a leading colon). Each layer performs some operation on any input or output, except when bypassed such as with &lt;code&gt;sysread&lt;/code&gt; or &lt;code&gt;syswrite&lt;/code&gt;. Read operations go through the stack in the order they are set (left to right), and write operations in the reverse order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="204a4b8b09f1c995e8deda462e190543c6bff8e4" translate="yes" xml:space="preserve">
          <source>Generally speaking, if you need something special for you, you are advised to create a new module, maybe based on &lt;a href=&quot;JSON::Tiny&quot;&gt;JSON::Tiny&lt;/a&gt;, which is smaller and written in a much cleaner way than this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db8f5bba4dab7b726878cf9e8a36fd32d7e9eca8" translate="yes" xml:space="preserve">
          <source>Generally used in a &lt;a href=&quot;#continue-BLOCK&quot;&gt;&lt;code&gt;continue&lt;/code&gt;&lt;/a&gt; block at the end of a loop to clear variables and reset &lt;code&gt;m?pattern?&lt;/code&gt; searches so that they work again. The expression is interpreted as a list of single characters (hyphens allowed for ranges). All variables (scalars, arrays, and hashes) in the current package beginning with one of those letters are reset to their pristine state. If the expression is omitted, one-match searches (&lt;code&gt;m?pattern?&lt;/code&gt;) are reset to match again. Only resets variables or searches in the current package. Always returns 1. Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327b665fa95397f25e3867f7836460cb799d0a0c" translate="yes" xml:space="preserve">
          <source>Generally used in a &lt;code&gt;&lt;a href=&quot;continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; block at the end of a loop to clear variables and reset &lt;code&gt;??&lt;/code&gt; searches so that they work again. The expression is interpreted as a list of single characters (hyphens allowed for ranges). All variables and arrays beginning with one of those letters are reset to their pristine state. If the expression is omitted, one-match searches (&lt;code&gt;?pattern?&lt;/code&gt; ) are reset to match again. Only resets variables or searches in the current package. Always returns 1. Examples:</source>
          <target state="translated">일반적으로 변수를 지우고 재설정하기 위해 루프 끝의 &lt;code&gt;&lt;a href=&quot;continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; 블록에서 사용됩니다 &lt;code&gt;??&lt;/code&gt; 다시 작동하도록 검색합니다. 표현식은 단일 문자 목록으로 해석됩니다 (범위에 허용되는 하이픈). 해당 문자 중 하나로 시작하는 모든 변수 및 배열은 원래 상태로 재설정됩니다. 표현식이 생략되면, 단일 일치 검색 ( &lt;code&gt;?pattern?&lt;/code&gt; )이 다시 일치하도록 재설정됩니다. 현재 패키지에서 변수 또는 검색 만 재설정합니다. 항상 1을 반환합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="6ed5d2aaf3ce44a61b56b98845df66b1842be7d7" translate="yes" xml:space="preserve">
          <source>Generally used in a &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; block at the end of a loop to clear variables and reset &lt;code&gt;??&lt;/code&gt; searches so that they work again. The expression is interpreted as a list of single characters (hyphens allowed for ranges). All variables and arrays beginning with one of those letters are reset to their pristine state. If the expression is omitted, one-match searches (&lt;code&gt;?pattern?&lt;/code&gt; ) are reset to match again. Only resets variables or searches in the current package. Always returns 1. Examples:</source>
          <target state="translated">일반적으로 변수를 지우고 재설정하기 위해 루프 끝의 &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; 블록에서 사용됩니다 &lt;code&gt;??&lt;/code&gt; 다시 작동하도록 검색합니다. 표현식은 단일 문자 목록으로 해석됩니다 (범위에 허용되는 하이픈). 해당 문자 중 하나로 시작하는 모든 변수 및 배열은 원래 상태로 재설정됩니다. 표현식이 생략되면, 단일 일치 검색 ( &lt;code&gt;?pattern?&lt;/code&gt; )이 다시 일치하도록 재설정됩니다. 현재 패키지에서 변수 또는 검색 만 재설정합니다. 항상 1을 반환합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="0d7b613cee2366987a969166247d56f35fe8603c" translate="yes" xml:space="preserve">
          <source>Generally, a collection of procedures. In ancient days, referred to a collection of subroutines in a</source>
          <target state="translated">일반적으로 절차 모음. 고대에는 서브 루틴 모음을</target>
        </trans-unit>
        <trans-unit id="f3328c5ae4397dc3c4222ba39a73bb9ae82f5a28" translate="yes" xml:space="preserve">
          <source>Generally, any &lt;b&gt;token&lt;/b&gt; or &lt;b&gt;metasymbol&lt;/b&gt;. Often used more specifically to mean the sort of name you might find in a &lt;b&gt;symbol table&lt;/b&gt;.</source>
          <target state="translated">일반적으로, 어떤은 &lt;b&gt;토큰&lt;/b&gt; 또는 &lt;b&gt;metasymbol&lt;/b&gt; . &lt;b&gt;심볼 테이블&lt;/b&gt; 에서 찾을 수있는 이름의 종류를 의미하기 위해보다 구체적으로 사용되는 경우가 많습니다 .</target>
        </trans-unit>
        <trans-unit id="b4a6c168526aaa7b030a8b864e61338267716f45" translate="yes" xml:space="preserve">
          <source>Generally, each argument has one leading &quot;:&quot; and one trailing &quot;:&quot; removed (if any). They are then joined together by a &quot;:&quot;. Special treatment applies for arguments denoting updir paths like &quot;::lib:&quot;, see (4), or arguments consisting solely of colons (&quot;colon paths&quot;), see (5).</source>
          <target state="translated">일반적으로 각 인수에는 하나의 선행 &quot;:&quot;과 하나의 후행 &quot;:&quot;이 제거됩니다 (있는 경우). 그런 다음 &quot;:&quot;로 연결됩니다. &quot;:: lib :&quot;와 같은 updir 경로를 나타내는 인수, (4) 참조 또는 콜론 ( &quot;콜론 경로&quot;)만으로 구성된 인수, (5) 참조에는 특별한 처리가 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="dbca80a0f1b382deb6a1f5ce103056435b9b61d1" translate="yes" xml:space="preserve">
          <source>Generally, if you want to store an undefined value in an AV or HV, you should not use &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; , but rather create a new undefined value using the &lt;code&gt;newSV&lt;/code&gt; function, for example:</source>
          <target state="translated">일반적으로 AV 또는 HV에 정의되지 않은 값을 저장하려면 &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; 사용하지 말고 &lt;code&gt;newSV&lt;/code&gt; 함수를 사용하여 새 정의되지 않은 값을 작성하십시오 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2596a56aba01bbab17ad6712b0bd9966e7587b33" translate="yes" xml:space="preserve">
          <source>Generally, if you want to store an undefined value in an AV or HV, you should not use &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt;, but rather create a new undefined value using the &lt;code&gt;newSV&lt;/code&gt; function, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7888dab6e27a5d395183c226ba655dd95d81794" translate="yes" xml:space="preserve">
          <source>Generate C code for XS modules' constants.</source>
          <target state="translated">XS 모듈 상수에 대한 C 코드를 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="55b679a0cfa0771f77ea49b9d53b6db25d85485e" translate="yes" xml:space="preserve">
          <source>Generate C/C++ code for the XS initializer function.</source>
          <target state="translated">XS 이니셜 라이저 기능을위한 C / C ++ 코드를 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="6d7a20114b9e2f4adde607a7de6cdc77812cd5c3" translate="yes" xml:space="preserve">
          <source>Generate MYMETA information as a hash either from an existing CPAN Meta file (META.json or META.yml) or from internal data.</source>
          <target state="translated">기존 CPAN 메타 파일 (META.json 또는 META.yml) 또는 내부 데이터에서 MYMETA 정보를 해시로 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="fad9ff08051acbfd579989fe7d09533be58fc8b2" translate="yes" xml:space="preserve">
          <source>Generate XS code to import C header constants</source>
          <target state="translated">C 헤더 상수를 가져 오는 XS 코드 생성</target>
        </trans-unit>
        <trans-unit id="cf1ca662ada637e9d6d3c74e2b646acad00573f4" translate="yes" xml:space="preserve">
          <source>Generate a summary file called</source>
          <target state="translated">라는 요약 파일 생성</target>
        </trans-unit>
        <trans-unit id="1dcd35ec477a21ff226c1813b82c60b3ae27de45" translate="yes" xml:space="preserve">
          <source>Generate a unique id (NOT A UUID). This will typically be the process id, the thread id, the time, and an incrementing integer all joined with the &lt;code&gt;ipc_separator()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58e7b39e158d6f21c17511a146b04839f328ccd" translate="yes" xml:space="preserve">
          <source>Generate an accessor method for each element of structs and unions. The generated methods are named after the element name; will return the current value of the element if called without additional arguments; and will set the element to the supplied value (and return the new value) if called with an additional argument. Embedded structures and unions are returned as a pointer rather than the complete structure, to facilitate chained calls.</source>
          <target state="translated">구조체와 공용체의 각 요소에 대한 접근 자 메서드를 생성하십시오. 생성 된 메소드는 요소 이름을 따라 이름이 지정됩니다. 추가 인수없이 호출되면 요소의 현재 값을 반환합니다. 추가 인수로 호출하면 요소를 제공된 값으로 설정하고 새 값을 반환합니다. 임베디드 구조 및 공용체는 체인 호출을 용이하게하기 위해 전체 구조가 아닌 포인터로 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="37ce6c2156457df8501e4c1fb83210aa39acfaeb" translate="yes" xml:space="preserve">
          <source>Generate an index at the top of the HTML file (default behaviour).</source>
          <target state="translated">HTML 파일 맨 위에 색인을 생성하십시오 (기본 동작).</target>
        </trans-unit>
        <trans-unit id="da1068fe142a5298b63a98d32acd80f4a76500cb" translate="yes" xml:space="preserve">
          <source>Generate an index at the top of the HTML file. This is the default behaviour.</source>
          <target state="translated">HTML 파일 맨 위에 색인을 생성하십시오. 이것이 기본 동작입니다.</target>
        </trans-unit>
        <trans-unit id="255b7210c6594b83b698aa3fb4e69e8ff01d426e" translate="yes" xml:space="preserve">
          <source>Generate and return a fresh cop hints hash containing no entries.</source>
          <target state="translated">항목이없는 새로운 경찰 힌트 해시를 생성하고 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d85a3b5f2926e3396853e594219b817c7146a9d2" translate="yes" xml:space="preserve">
          <source>Generate stubs for a SelfLoading module</source>
          <target state="translated">자체로드 모듈에 대한 스텁 생성</target>
        </trans-unit>
        <trans-unit id="0ba19194216be13c7f866968bcf3a987117cf5e8" translate="yes" xml:space="preserve">
          <source>Generate test reports if CPAN::Reporter is installed (yes/no)?</source>
          <target state="translated">CPAN :: Reporter가 설치된 경우 테스트 보고서를 생성합니까 (예 / 아니오)?</target>
        </trans-unit>
        <trans-unit id="548e0abe962fe7973873ce7fe29b5c45581f9fb6" translate="yes" xml:space="preserve">
          <source>Generate the Makefile and run make. Change the test number in Mytest.t to &quot;9&quot; and add the following tests:</source>
          <target state="translated">Makefile을 생성하고 make를 실행하십시오. Mytest.t의 테스트 번호를 &quot;9&quot;로 변경하고 다음 테스트를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="2e30a1f598292d25659b6f3a250f216bc967e7e7" translate="yes" xml:space="preserve">
          <source>Generate the default target 'all'.</source>
          <target state="translated">기본 대상 'all'을 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="4d962473f477d6b33e6a92b907153b952636d0f9" translate="yes" xml:space="preserve">
          <source>Generate the metafile target.</source>
          <target state="translated">메타 파일 대상을 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="4db92d1f5198cc69e763847675b8fcf87ee5935e" translate="yes" xml:space="preserve">
          <source>Generate the signature target.</source>
          <target state="translated">서명 대상을 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="de5fc6d42feef255045834472628eb831eead292" translate="yes" xml:space="preserve">
          <source>Generated internally. Is zero or undefined if name is 7 bit ASCII, &quot;no&quot; if the name is 8 bit (and so should only match if SvUTF8() is false), &quot;yes&quot; if the name is utf8 encoded.</source>
          <target state="translated">내부적으로 생성됩니다. 이름이 7 비트 ASCII이면 0이거나 정의되지 않습니다. 이름이 8 비트이면 &quot;no&quot;(SvUTF8 ()이 false 인 경우에만 일치해야 함), 이름이 utf8로 인코딩 된 경우 &quot;yes&quot;</target>
        </trans-unit>
        <trans-unit id="95fc43dc3dce502b8d3a439f3daa647aaa660090" translate="yes" xml:space="preserve">
          <source>Generates</source>
          <target state="translated">Generates</target>
        </trans-unit>
        <trans-unit id="c167e00e247a5f64156fc2c863e8097c40ce0f9e" translate="yes" xml:space="preserve">
          <source>Generates Foo__Bar.3 style man page names</source>
          <target state="translated">Foo__Bar.3 스타일 매뉴얼 페이지 이름을 생성합니다</target>
        </trans-unit>
        <trans-unit id="43bc892fe6a292ae97df44de7203d863e807362e" translate="yes" xml:space="preserve">
          <source>Generates a .pm file which is backwards compatible with the specified perl version.</source>
          <target state="translated">지정된 perl 버전과 호환되는 .pm 파일을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="e7c963d48f673cb2a0857ed31de8d6aa72aa362b" translate="yes" xml:space="preserve">
          <source>Generates a make fragment defining all the macros initialized in init_dist.</source>
          <target state="translated">init_dist에서 초기화 된 모든 매크로를 정의하는 make 조각을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="80554821ed7148b220a973849dd1aa2c72e393ef" translate="yes" xml:space="preserve">
          <source>Generates a set of &lt;code&gt;@recipelines&lt;/code&gt; which will result in the literal &lt;code&gt;$text&lt;/code&gt; ending up in literal &lt;code&gt;$file&lt;/code&gt; when the recipe is executed. Call it once, with all the text you want in &lt;code&gt;$file&lt;/code&gt;. Make macros will not be expanded, so the locations will be fixed at configure-time, not at build-time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a9c3599652e9b94156636fc524075142b2c6bc" translate="yes" xml:space="preserve">
          <source>Generates a set of @commands which print the $text to a $file.</source>
          <target state="translated">$ text를 $ file로 인쇄하는 일련의 @commands를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="790a5b36d77c0cf3beb51e493e823c8123ef2b5c" translate="yes" xml:space="preserve">
          <source>Generates and returns a &lt;code&gt;HV *&lt;/code&gt; representing the content of a &lt;code&gt;refcounted_he&lt;/code&gt; chain.</source>
          <target state="translated">&lt;code&gt;refcounted_he&lt;/code&gt; 체인 의 내용을 나타내는 &lt;code&gt;HV *&lt;/code&gt; 를 생성하고 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="da16284fed88443c9151f00990591ff02a6776dc" translate="yes" xml:space="preserve">
          <source>Generates and returns a &lt;code&gt;HV *&lt;/code&gt; representing the content of a &lt;code&gt;refcounted_he&lt;/code&gt; chain. &lt;code&gt;flags&lt;/code&gt; is currently unused and must be zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcbbd96d2dbbc6700210cc4fb74779eab56f16fe" translate="yes" xml:space="preserve">
          <source>Generates and returns a standard Perl hash representing the full set of hint entries in the cop</source>
          <target state="translated">경찰의 전체 힌트 항목 세트를 나타내는 표준 Perl 해시를 생성하고 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="d673a1d46eb2d6c14769ff96aee9a08c12dcbd3f" translate="yes" xml:space="preserve">
          <source>Generates and returns a standard Perl hash representing the full set of hint entries in the cop &lt;code&gt;cop&lt;/code&gt;. &lt;code&gt;flags&lt;/code&gt; is currently unused and must be zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1421406c3adcfc5c7625f4edebffbd408bd80ab6" translate="yes" xml:space="preserve">
          <source>Generates and returns a standard Perl hash representing the full set of key/value pairs in the cop hints hash</source>
          <target state="translated">경찰 힌트 해시의 전체 키 / 값 쌍 세트를 나타내는 표준 Perl 해시를 생성하고 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="e4bd11da534abc8209772058cf5c9cca9ca55068" translate="yes" xml:space="preserve">
          <source>Generates and returns a standard Perl hash representing the full set of key/value pairs in the cop hints hash &lt;code&gt;cophh&lt;/code&gt;. &lt;code&gt;flags&lt;/code&gt; is currently unused and must be zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46941b5fc38c746cf81d63a4f6ed7a44413d5382" translate="yes" xml:space="preserve">
          <source>Generates and returns the string form of the typemap with the appropriate prefix around it for verbatim inclusion into an XS file as an embedded typemap. This will return a string like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5744cc55e035757259f005739b080eff1f7c404c" translate="yes" xml:space="preserve">
          <source>Generates and returns the string form of the typemap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="855ea3ad4660369a0d200ca547e9d16bbf1aed26" translate="yes" xml:space="preserve">
          <source>Generates cross reference reports for Perl programs</source>
          <target state="translated">Perl 프로그램에 대한 상호 참조 보고서를 생성합니다</target>
        </trans-unit>
        <trans-unit id="e3de133c1c2ce09b6435425a01ca3e82f3c58065" translate="yes" xml:space="preserve">
          <source>Generates one copy of</source>
          <target state="translated">하나의 사본을 생성합니다</target>
        </trans-unit>
        <trans-unit id="1d207670d95f5fc2643606a3d629315363ac612b" translate="yes" xml:space="preserve">
          <source>Generates one fewer copies of</source>
          <target state="translated">하나의 적은 사본을 생성합니다</target>
        </trans-unit>
        <trans-unit id="28d7a6917a623daf227d101d7b6ed8834cb89f78" translate="yes" xml:space="preserve">
          <source>Generates prototype code for all xsubs. Default is false.</source>
          <target state="translated">모든 xsub에 대한 프로토 타입 코드를 생성합니다. 기본값은 false입니다.</target>
        </trans-unit>
        <trans-unit id="2960b94d28c15d7a694d51b3079b6bc63fbdd48f" translate="yes" xml:space="preserve">
          <source>Generates targets to create the specified directories and set its permission to PERM_DIR.</source>
          <target state="translated">지정된 디렉토리를 작성하고 해당 권한을 PERM_DIR로 설정하기위한 대상을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="d6e4b3f200d78c6e8a91d9d2272c0f5fb9f6e05c" translate="yes" xml:space="preserve">
          <source>Generates the distmeta target to add META.yml and META.json to the MANIFEST in the distdir.</source>
          <target state="translated">distdir의 MANIFEST에 META.yml 및 META.json을 추가하기 위해 distmeta 대상을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="b310c6f5942ab86898d599d13d2e861f310c17d2" translate="yes" xml:space="preserve">
          <source>Generates the distsignature target to add SIGNATURE to the MANIFEST in the distdir.</source>
          <target state="translated">distdir의 MANIFEST에 SIGNATURE를 추가하기 위해 distsignature 대상을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="3730e292a86874c44122818bef743a546bb5f8f3" translate="yes" xml:space="preserve">
          <source>Generates the manifypods target. This target generates man pages from all POD files in MAN1PODS and MAN3PODS.</source>
          <target state="translated">manifypods 대상을 생성합니다. 이 대상은 MAN1PODS 및 MAN3PODS의 모든 POD 파일에서 매뉴얼 페이지를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="6897e0eaabbcb4cd6c2d74a288e5496907e3b7a9" translate="yes" xml:space="preserve">
          <source>Generates the message string describing an OS error and returns it as an SV. &lt;code&gt;errnum&lt;/code&gt; must be a value that &lt;code&gt;errno&lt;/code&gt; could take, identifying the type of error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c589b5a085cc257f1fe2c1088920f6a3260335" translate="yes" xml:space="preserve">
          <source>Generates the path name for the controlling terminal.</source>
          <target state="translated">제어 터미널의 경로 이름을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="aa78442f98d8c0e48e911fd577f2432ab2e641a7" translate="yes" xml:space="preserve">
          <source>Generates the value of</source>
          <target state="translated">의 가치를 생성</target>
        </trans-unit>
        <trans-unit id="e3cf7bd0517329efd2eda4324025ebf8752f984e" translate="yes" xml:space="preserve">
          <source>Generating *.pm files with substitutions eg of $VERSION</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b08e002657b5f8d224393deee9469ccf8c547be4" translate="yes" xml:space="preserve">
          <source>Generating Combined Tags</source>
          <target state="translated">결합 된 태그 생성</target>
        </trans-unit>
        <trans-unit id="2a21214ce61b2e34bac827b1129511447eeb1d87" translate="yes" xml:space="preserve">
          <source>Generating the Makefile and running &lt;code&gt;make&lt;/code&gt; created a directory called blib (which stands for &quot;build library&quot;) in the current working directory. This directory will contain the shared library that we will build. Once we have tested it, we can install it into its final location.</source>
          <target state="translated">메이크 파일을 생성하고 실행 &lt;code&gt;make&lt;/code&gt; 현재 작업 디렉토리 ( &quot;빌드 라이브러리&quot;의 약자)라는 디렉토리의 정교를 만들었습니다. 이 디렉토리에는 빌드 할 공유 라이브러리가 포함됩니다. 테스트를 마치면 최종 위치에 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bb265528826c32e783457930a0be091d852e5fb2" translate="yes" xml:space="preserve">
          <source>Generating this fatal compile error is one of the main advantages of using the constants interface, since you'll immediately know if you mistype a color name.</source>
          <target state="translated">이 치명적인 컴파일 오류를 생성하는 것은 상수 인터페이스를 사용하는 주요 이점 중 하나입니다. 색상 이름을 잘못 입력하면 즉시 알 수 있기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="94d49b2add1a84693cb6f6742d43aadc63779926" translate="yes" xml:space="preserve">
          <source>Generation of a HASH OF ARRAYS</source>
          <target state="translated">해시 생성</target>
        </trans-unit>
        <trans-unit id="b10605adc6dd4bbb3891b18fa40d3ef6fd2660e3" translate="yes" xml:space="preserve">
          <source>Generation of a HASH OF COMPLEX RECORDS</source>
          <target state="translated">복잡한 기록의 해시 생성</target>
        </trans-unit>
        <trans-unit id="c99d686abb8c25c079ecc27374e7ae409f23b172" translate="yes" xml:space="preserve">
          <source>Generation of a HASH OF HASHES</source>
          <target state="translated">해시 해시 생성</target>
        </trans-unit>
        <trans-unit id="a9893d509c65cb98b9af7180a27be528798c38c2" translate="yes" xml:space="preserve">
          <source>Generation of an ARRAY OF ARRAYS</source>
          <target state="translated">배열의 배열 생성</target>
        </trans-unit>
        <trans-unit id="36fe3d03032c0fb4a7e4a93e553c5c4b5ad3dfa9" translate="yes" xml:space="preserve">
          <source>Generation of an ARRAY OF HASHES</source>
          <target state="translated">해시 배열 생성</target>
        </trans-unit>
        <trans-unit id="1801dd927c33bc788a5ffaecd75d804499949a8c" translate="yes" xml:space="preserve">
          <source>Generic event type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="812c1b37318e9ec5939e34ef662accc038427024" translate="yes" xml:space="preserve">
          <source>Generic interface to Perl Compiler backends</source>
          <target state="translated">Perl Compiler 백엔드에 대한 일반 인터페이스</target>
        </trans-unit>
        <trans-unit id="17d53e0e6a68acdf80b78d4f9d868c8736db2cec" translate="yes" xml:space="preserve">
          <source>Germany</source>
          <target state="translated">Germany</target>
        </trans-unit>
        <trans-unit id="bc3a1464aaf3caaf7316afc754a4e8005c14f861" translate="yes" xml:space="preserve">
          <source>Get &lt;code&gt;REMOTE_FILE&lt;/code&gt; from the server and store locally. &lt;code&gt;LOCAL_FILE&lt;/code&gt; may be a filename or a filehandle. If not specified, the file will be stored in the current directory with the same leafname as the remote file.</source>
          <target state="translated">서버에서 &lt;code&gt;REMOTE_FILE&lt;/code&gt; 을 가져와 로컬에 저장하십시오. &lt;code&gt;LOCAL_FILE&lt;/code&gt; 은 파일 이름 또는 파일 핸들 일 수 있습니다. 지정하지 않으면 파일은 원격 파일과 동일한 리프 이름으로 현재 디렉토리에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="ca1a408e2ccd68c37eb04193b5e93ca2ef9ad6c5" translate="yes" xml:space="preserve">
          <source>Get a CPAN user ID</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0dc372b2e257044afda97bb0f77031c7a35e177" translate="yes" xml:space="preserve">
          <source>Get a directory listing of &lt;code&gt;DIR&lt;/code&gt; , or the current directory in long format.</source>
          <target state="translated">&lt;code&gt;DIR&lt;/code&gt; 의 디렉토리 목록 또는 긴 형식의 현재 디렉토리를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="7ec34cee796d547d14608ac7cf6e0f3edbd159c0" translate="yes" xml:space="preserve">
          <source>Get a directory listing of &lt;code&gt;DIR&lt;/code&gt; , or the current directory.</source>
          <target state="translated">&lt;code&gt;DIR&lt;/code&gt; 의 디렉토리 목록 또는 현재 디렉토리를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="7ad9fcfe87b8dab3823168638687a30656ed9e3e" translate="yes" xml:space="preserve">
          <source>Get a directory listing of &lt;code&gt;DIR&lt;/code&gt;, or the current directory in long format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41ecc50cf5bb968c14d0e6c109db03530ea7b68a" translate="yes" xml:space="preserve">
          <source>Get a directory listing of &lt;code&gt;DIR&lt;/code&gt;, or the current directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf83a890906c3992d66c16bdbe7ada7eb9e33114" translate="yes" xml:space="preserve">
          <source>Get a hashref of all active contexts keyed by hub id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="374636ae19b296dfea98703295aaecfbdd2c1a97" translate="yes" xml:space="preserve">
          <source>Get a line from the filehandle and store it into the SV, optionally appending to the currently-stored string. If &lt;code&gt;append&lt;/code&gt; is not 0, the line is appended to the SV instead of overwriting it. &lt;code&gt;append&lt;/code&gt; should be set to the byte offset that the appended string should start at in the SV (typically, &lt;code&gt;SvCUR(sv)&lt;/code&gt; is a suitable choice).</source>
          <target state="translated">파일 핸들에서 한 줄을 가져와 SV에 저장하고 선택적으로 현재 저장된 문자열에 추가합니다. 경우 &lt;code&gt;append&lt;/code&gt; 0이 아닌 라인은 덮어 대신 SV에 추가된다. &lt;code&gt;append&lt;/code&gt; 는 추가 된 문자열이 SV에서 시작해야하는 바이트 오프셋으로 설정되어야합니다 (일반적으로 &lt;code&gt;SvCUR(sv)&lt;/code&gt; 가 적합합니다).</target>
        </trans-unit>
        <trans-unit id="64863d4fd73f2a683600ad8024c45903658892b4" translate="yes" xml:space="preserve">
          <source>Get a list of all loaded formatters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c598cea0161d91f18f52f5688b3c025ff94ad39c" translate="yes" xml:space="preserve">
          <source>Get a list of all remaining tests.</source>
          <target state="translated">남은 모든 테스트 목록을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="63a593cb77f2c61ac75772edd049eee1d24e24f8" translate="yes" xml:space="preserve">
          <source>Get a list of all the currently enabled pragmas:</source>
          <target state="translated">현재 활성화 된 모든 pragma 목록을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="7b7cd7f6b002e314d08f78b71b5b591a4f70ba81" translate="yes" xml:space="preserve">
          <source>Get a login for the Perl Authors Upload Server (PAUSE) if you don't already have one: &lt;a href=&quot;http://pause.perl.org&quot;&gt;http://pause.perl.org&lt;/a&gt;</source>
          <target state="translated">아직 Perl Authors Upload Server (PAUSE)에 로그인하지 않은 경우 &lt;a href=&quot;http://pause.perl.org&quot;&gt;http://pause.perl.org&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d5bbade2b6657ae3b6cb3e4431498e73906ee530" translate="yes" xml:space="preserve">
          <source>Get a sensible string out of the SV somehow. A private implementation of the &lt;code&gt;SvPV_force&lt;/code&gt; macro for compilers which can't cope with complex macro expressions. Always use the macro instead.</source>
          <target state="translated">어떻게 든 SV에서 현명한 문자열을 얻으십시오. 복잡한 매크로 표현식에 대처할 수없는 컴파일러 용 &lt;code&gt;SvPV_force&lt;/code&gt; 매크로 의 개인 구현 . 항상 매크로를 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="64dbc32740e54d691c9e2c5cda1ba05449ef3105" translate="yes" xml:space="preserve">
          <source>Get a sensible string out of the SV somehow. If &lt;code&gt;flags&lt;/code&gt; has &lt;code&gt;SV_GMAGIC&lt;/code&gt; bit set, will &lt;code&gt;mg_get&lt;/code&gt; on &lt;code&gt;sv&lt;/code&gt; if appropriate, else not. &lt;code&gt;sv_pvn_force&lt;/code&gt; and &lt;code&gt;sv_pvn_force_nomg&lt;/code&gt; are implemented in terms of this function. You normally want to use the various wrapper macros instead: see &lt;code&gt;SvPV_force&lt;/code&gt; and &lt;code&gt;SvPV_force_nomg&lt;/code&gt;</source>
          <target state="translated">어떻게 든 SV에서 현명한 문자열을 얻으십시오. 경우 &lt;code&gt;flags&lt;/code&gt; 가 &lt;code&gt;SV_GMAGIC&lt;/code&gt; 의 비트 세트를합니다 &lt;code&gt;mg_get&lt;/code&gt; 에 &lt;code&gt;sv&lt;/code&gt; 해당하는 경우, 다른 없습니다. &lt;code&gt;sv_pvn_force&lt;/code&gt; 및 &lt;code&gt;sv_pvn_force_nomg&lt;/code&gt; 는이 기능의 관점에서 구현됩니다. 일반적으로 다양한 래퍼 매크로를 대신 사용하려고합니다. &lt;code&gt;SvPV_force&lt;/code&gt; 및 &lt;code&gt;SvPV_force_nomg&lt;/code&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a4a98277d240aa8cf960ac3b968f0e2910fa7636" translate="yes" xml:space="preserve">
          <source>Get a sensible string out of the SV somehow. If &lt;code&gt;flags&lt;/code&gt; has the &lt;code&gt;SV_GMAGIC&lt;/code&gt; bit set, will &lt;code&gt;mg_get&lt;/code&gt; on &lt;code&gt;sv&lt;/code&gt; if appropriate, else not. &lt;code&gt;sv_pvn_force&lt;/code&gt; and &lt;code&gt;sv_pvn_force_nomg&lt;/code&gt; are implemented in terms of this function. You normally want to use the various wrapper macros instead: see &lt;code&gt;&lt;a href=&quot;#SvPV_force&quot;&gt;&quot;SvPV_force&quot;&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#SvPV_force_nomg&quot;&gt;&quot;SvPV_force_nomg&quot;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c02e553004f2cab19e569373b3f708be588549c" translate="yes" xml:space="preserve">
          <source>Get a signature string that identifies this trace. This is used to check if multiple events are related. The signature includes pid, tid, file, line number, and the cid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e7220eec11b9f4342ece5e624c0e6dd46adeb9c" translate="yes" xml:space="preserve">
          <source>Get a single character</source>
          <target state="translated">하나의 문자를 얻을</target>
        </trans-unit>
        <trans-unit id="e9e0ce73749b0540528b23b6467b993e785ccda2" translate="yes" xml:space="preserve">
          <source>Get a single word describing the status of the aggregated tests. Depending on the outcome of the tests returns 'PASS', 'FAIL' or 'NOTESTS'. This token is understood by &lt;a href=&quot;CPAN::Reporter&quot;&gt;CPAN::Reporter&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b607b471bd641ae0bad56d53e93561f4a5dcc663" translate="yes" xml:space="preserve">
          <source>Get a single word describing the status of the aggregated tests. Depending on the outcome of the tests returns 'PASS', 'FAIL' or 'NOTESTS'. This token is understood by &lt;a href=&quot;http://search.cpan.org/perldoc/CPAN::Reporter&quot;&gt;CPAN::Reporter&lt;/a&gt;.</source>
          <target state="translated">집계 된 테스트의 상태를 설명하는 단일 단어를 가져옵니다. 테스트 결과에 따라 'PASS', 'FAIL'또는 'NOTESTS'가 반환됩니다. 이 토큰은 &lt;a href=&quot;http://search.cpan.org/perldoc/CPAN::Reporter&quot;&gt;CPAN :: Reporter에&lt;/a&gt; 의해 이해됩니다 .</target>
        </trans-unit>
        <trans-unit id="652a108bff905ce7e12c4132d1e5164ee76e0045" translate="yes" xml:space="preserve">
          <source>Get a snapshot of the &lt;a href=&quot;Test2::EventFacet::Trace&quot;&gt;Test2::EventFacet::Trace&lt;/a&gt; as it was when this event was generated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="268755ff66af0e6c2f8c79a47e954f7f7e3c8522" translate="yes" xml:space="preserve">
          <source>Get all context acquire callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62cda4392fada43f853c80695bdea66eaedbc325" translate="yes" xml:space="preserve">
          <source>Get all context init callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258167081523b0e769f69cd6b90feafb8b21566c" translate="yes" xml:space="preserve">
          <source>Get all context release callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c6a43f37aaaa1c1ef244c52bc8b90f068f349e4" translate="yes" xml:space="preserve">
          <source>Get all pre-subtest callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94e908780575d3c7b13c6f58aed85812783fe4af" translate="yes" xml:space="preserve">
          <source>Get all remaining lines from the file. It will croak() if accidentally called in a scalar context.</source>
          <target state="translated">파일에서 나머지 줄을 모두 가져옵니다. 실수로 스칼라 컨텍스트에서 호출되면 croak ()됩니다.</target>
        </trans-unit>
        <trans-unit id="8afcb9bb7c5fc3d1b5cca08c78fb90070f96f12d" translate="yes" xml:space="preserve">
          <source>Get all remaining lines. It will croak() if accidentally called in a scalar context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aed3f8067239d43cc5fd9e2c71aefda5e7ddcfa2" translate="yes" xml:space="preserve">
          <source>Get an a list of file handles which can be passed to &lt;code&gt;&lt;a href=&quot;../functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; to determine the readiness of this parser.</source>
          <target state="translated">에 전달 될 수있는 파일 핸들의 목록 가져 오기 &lt;code&gt;&lt;a href=&quot;../functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; 이 파서의 준비 상태를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="99c3d23f931dd2a61338c92b7ff3b897fe83c3f3" translate="yes" xml:space="preserve">
          <source>Get an a list of file handles which can be passed to &lt;code&gt;select&lt;/code&gt; to determine the readiness of this parser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c71ad46ac7b3fc7bffe5d8abfd2437d2bcda85" translate="yes" xml:space="preserve">
          <source>Get an array of descriptions in the order in which they were added to the aggregator.</source>
          <target state="translated">애그리 게이터에 추가 된 순서대로 설명 배열을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="c8c26ce9973503b04ecaa0e9e248aee4e6b0e8e3" translate="yes" xml:space="preserve">
          <source>Get an option associated with the socket. Levels other than &lt;code&gt;SOL_SOCKET&lt;/code&gt; may be specified here. As a convenience, this method will unpack a byte buffer of the correct size back into a number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5601f3fdd46c63546dcbad9b3ec6be8b404f4b2f" translate="yes" xml:space="preserve">
          <source>Get current distribution object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fd330b00e5fd43c7facb1ce40b15978badf9d49" translate="yes" xml:space="preserve">
          <source>Get current value of extended library search path. If &lt;code&gt;type&lt;/code&gt; is present and positive, works with &lt;code&gt;END_LIBPATH&lt;/code&gt; , if negative, works with &lt;code&gt;LIBPATHSTRICT&lt;/code&gt; , otherwise with &lt;code&gt;BEGIN_LIBPATH&lt;/code&gt; .</source>
          <target state="translated">확장 라이브러리 검색 경로의 현재 값을 가져옵니다. 경우 &lt;code&gt;type&lt;/code&gt; 존재하고 긍정적으로 작동 &lt;code&gt;END_LIBPATH&lt;/code&gt; 부정적인와 함께 작동하는 경우, &lt;code&gt;LIBPATHSTRICT&lt;/code&gt; 그렇지 않은 경우로, &lt;code&gt;BEGIN_LIBPATH&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="301ab0a8bfbdea1320501d6fb4f20c05a5acc181" translate="yes" xml:space="preserve">
          <source>Get current value of extended library search path. If &lt;code&gt;type&lt;/code&gt; is present and positive, works with &lt;code&gt;END_LIBPATH&lt;/code&gt;, if negative, works with &lt;code&gt;LIBPATHSTRICT&lt;/code&gt;, otherwise with &lt;code&gt;BEGIN_LIBPATH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00cf4729c08b5fcd57e241d25d2cbdeb99dcc776" translate="yes" xml:space="preserve">
          <source>Get feedback before publishing</source>
          <target state="translated">게시하기 전에 피드백 받기</target>
        </trans-unit>
        <trans-unit id="7db8371110606460ae544aa3da9ce0f0de1a1f3f" translate="yes" xml:space="preserve">
          <source>Get file status. This uses file descriptors such as those obtained by calling &lt;code&gt;POSIX::open&lt;/code&gt; . The data returned is identical to the data from Perl's builtin &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">파일 상태를 가져옵니다. &lt;code&gt;POSIX::open&lt;/code&gt; 을 호출하여 얻은 것과 같은 파일 디스크립터를 사용합니다 . 반환 된 데이터는 Perl의 내장 &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; 함수 의 데이터와 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="b95e70cbf88260ac80b7f6cea8fe31193dc57e20" translate="yes" xml:space="preserve">
          <source>Get file status. This uses file descriptors such as those obtained by calling &lt;code&gt;POSIX::open&lt;/code&gt;. The data returned is identical to the data from Perl's builtin &lt;code&gt;stat&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa68e261aa81f581b5a90ba1e9bfd725ef59d405" translate="yes" xml:space="preserve">
          <source>Get name of current operating system.</source>
          <target state="translated">현재 운영 체제의 이름을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="689e6ea9037095052aff1101fdfdc680b6e214b0" translate="yes" xml:space="preserve">
          <source>Get numeric formatting information. Returns a reference to a hash containing the current underlying locale's formatting values. Users of this function should also read &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;, which provides a comprehensive discussion of Perl locale handling, including &lt;a href=&quot;perllocale#The-localeconv-function&quot;&gt;a section devoted to this function&lt;/a&gt;.</source>
          <target state="translated">숫자 형식 정보를 가져옵니다. 현재 기본 로케일의 서식 값이 포함 된 해시에 대한 참조를 리턴합니다. 이 함수의 사용자는 &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; 을 읽어야합니다.이 함수는이 함수에 관한 &lt;a href=&quot;perllocale#The-localeconv-function&quot;&gt;섹션을&lt;/a&gt; 포함하여 Perl 로케일 처리에 대한 포괄적 인 토론을 제공 합니다 .</target>
        </trans-unit>
        <trans-unit id="eb04f3dc68cc14a2bc5cb88ddbed2221f73390f1" translate="yes" xml:space="preserve">
          <source>Get numeric formatting information. Returns a reference to a hash containing the formatting values of the locale that currently underlies the program, regardless of whether or not it is called from within the scope of a &lt;code&gt;use locale&lt;/code&gt;. Users of this function should also read &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;, which provides a comprehensive discussion of Perl locale handling, including &lt;a href=&quot;perllocale#The-localeconv-function&quot;&gt;a section devoted to this function&lt;/a&gt;. Prior to Perl 5.28, or when operating in a non thread-safe environment, it should not be used in a threaded application unless it's certain that the underlying locale is C or POSIX. This is because it otherwise changes the locale, which globally affects all threads simultaneously. Windows platforms starting with Visual Studio 2005 are mostly thread-safe, but use of this function in those prior to Visual Studio 2015 can interfere with a thread that has called &lt;a href=&quot;perlapi#switch_to_global_locale&quot;&gt;&quot;switch_to_global_locale&quot; in perlapi&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f984cefe527deb4addc8cf500f9c5727ae40d0" translate="yes" xml:space="preserve">
          <source>Get option associated with the socket. Other levels than SOL_SOCKET may be specified here.</source>
          <target state="translated">소켓과 관련된 옵션을 가져옵니다. SOL_SOCKET 이외의 다른 레벨이 여기에 지정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0d1c28860360a4fa7e9af6746bedcb431787f46a" translate="yes" xml:space="preserve">
          <source>Get or set a pragma. To get the state of a pragma:</source>
          <target state="translated">pragma를 얻거나 설정하십시오. 프라 그마 상태를 얻으려면 :</target>
        </trans-unit>
        <trans-unit id="9daccf52c23258f9b88b2002eb34556bfc85c14d" translate="yes" xml:space="preserve">
          <source>Get or set the encoding. By default no encoding is set, the original settings of STDOUT and STDERR are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6ad90a8eb388c5e1e51917fba7213e97b759cef" translate="yes" xml:space="preserve">
          <source>Get or set the facet data (see &lt;a href=&quot;Test2::Event&quot;&gt;Test2::Event&lt;/a&gt;). If no facet_data is set then &lt;code&gt;Test2::Event-&amp;gt;facet_data&lt;/code&gt; will be called to produce facets from the other data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c12013a4f3faabdfd45c20cf7f2e5379d28bb4" translate="yes" xml:space="preserve">
          <source>Get or set the list of extensions that files must have in order to be considered tests. Defaults to ['.t'].</source>
          <target state="translated">테스트로 간주하기 위해 파일에 필요한 확장명 목록을 가져 오거나 설정하십시오. 기본값은 [ '.t']입니다.</target>
        </trans-unit>
        <trans-unit id="356d593fa08d05ba24dd1f0e40399f953a56cd2a" translate="yes" xml:space="preserve">
          <source>Get or set the plan. The plan must be an integer larger than 0, the string 'NO PLAN', or the string 'SKIP'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f02dbc79ab20b0a28ad615d9d491d7daece201" translate="yes" xml:space="preserve">
          <source>Get pathname of current working directory</source>
          <target state="translated">현재 작업 디렉토리의 경로 이름 가져 오기</target>
        </trans-unit>
        <trans-unit id="fe08fded31b445465eb024604de34561803ebc20" translate="yes" xml:space="preserve">
          <source>Get terminal control attributes.</source>
          <target state="translated">터미널 제어 속성을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="8a07eb17266818645630850b8e079929a5430178" translate="yes" xml:space="preserve">
          <source>Get the &lt;a href=&quot;Business::CreditCard&quot;&gt;Business::CreditCard&lt;/a&gt; module from CPAN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a59623bd1c16560f3bf3b733cb7fef045dc9eb39" translate="yes" xml:space="preserve">
          <source>Get the &lt;a href=&quot;http://search.cpan.org/perldoc/Business::CreditCard&quot;&gt;Business::CreditCard&lt;/a&gt; module from CPAN.</source>
          <target state="translated">CPAN에서 &lt;a href=&quot;http://search.cpan.org/perldoc/Business::CreditCard&quot;&gt;Business :: CreditCard&lt;/a&gt; 모듈을 받으십시오 .</target>
        </trans-unit>
        <trans-unit id="f445ac9afb3e26b0227b0cd9d1470f0c1289598c" translate="yes" xml:space="preserve">
          <source>Get the &lt;a href=&quot;http://www.cpan.org/modules/by-module/Roman&quot;&gt;http://www.cpan.org/modules/by-module/Roman&lt;/a&gt; module.</source>
          <target state="translated">&lt;a href=&quot;http://www.cpan.org/modules/by-module/Roman&quot;&gt;http://www.cpan.org/modules/by-module/Roman&lt;/a&gt; 모듈을 받으십시오 .</target>
        </trans-unit>
        <trans-unit id="006addc7b486481a4d34e5ae872451f7b6a5b8f4" translate="yes" xml:space="preserve">
          <source>Get the &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; of a capture variable. There's a special callback for this so that Perl doesn't have to do a FETCH and run &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; on the result, since the length is (in Perl's case) known from an offset stored in &lt;code&gt;rx-&amp;gt;offs&lt;/code&gt; , this is much more efficient:</source>
          <target state="translated">캡처 변수 의 &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; 를 가져 옵니다 . 이것에 대한 특별한 콜백이있어서 Perl이 FETCH를 수행 하고 결과에서 &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; 를 실행할 필요가 없습니다 . 길이는 ( &lt;code&gt;rx-&amp;gt;offs&lt;/code&gt; 의 경우) rx-&amp;gt; offs에 저장된 오프셋에서 알려져 있기 때문에 훨씬 효율적입니다.</target>
        </trans-unit>
        <trans-unit id="96b721a1282dd71b06b7a0b329766d37d734dc44" translate="yes" xml:space="preserve">
          <source>Get the &lt;code&gt;length&lt;/code&gt; of a capture variable. There's a special callback for this so that Perl doesn't have to do a FETCH and run &lt;code&gt;length&lt;/code&gt; on the result, since the length is (in Perl's case) known from an offset stored in &lt;code&gt;rx-&amp;gt;offs&lt;/code&gt;, this is much more efficient:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="443a48897b6cbe8dfb893d381d8f3dbf523ba2b5" translate="yes" xml:space="preserve">
          <source>Get the Android Native Development Kit (NDK)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863803585d080b0160f072f6f610a86df5a19ecc" translate="yes" xml:space="preserve">
          <source>Get the EMX development suite and gzip/tar from Hobbes ( &lt;a href=&quot;http://hobbes.nmsu.edu/h-browse.php?dir=/pub/os2/dev/emx/v0.9d&quot;&gt;http://hobbes.nmsu.edu/h-browse.php?dir=/pub/os2/dev/emx/v0.9d&lt;/a&gt; ), and then follow the instructions for Unix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a11deed8b7fb50959590945fa161672220265d44" translate="yes" xml:space="preserve">
          <source>Get the EMX development suite and gzip/tar, from either Hobbes ( &lt;a href=&quot;http://hobbes.nmsu.edu&quot;&gt;http://hobbes.nmsu.edu&lt;/a&gt; ) or Leo ( &lt;a href=&quot;http://www.leo.org&quot;&gt;http://www.leo.org&lt;/a&gt; ), and then follow the instructions for Unix.</source>
          <target state="translated">Hobbes ( &lt;a href=&quot;http://hobbes.nmsu.edu&quot;&gt;http://hobbes.nmsu.edu&lt;/a&gt; ) 또는 Leo ( &lt;a href=&quot;http://www.leo.org&quot;&gt;http://www.leo.org&lt;/a&gt; ) 에서 EMX 개발 스위트 및 gzip / tar을 가져온 다음 Unix의 지시 사항을 따르십시오.</target>
        </trans-unit>
        <trans-unit id="eeea8bcfb6a44e65297b264dd91067f2cd97f054" translate="yes" xml:space="preserve">
          <source>Get the IPC object used by the hub.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eecfedc3d599a9037003efbf96acd9d9eb5f106" translate="yes" xml:space="preserve">
          <source>Get the IPC separator. Currently this is always the string &lt;code&gt;'~'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa60352899d302ffde80e2387665c80133c9bba" translate="yes" xml:space="preserve">
          <source>Get the UUID of the facets or event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ced75a781e513b77bca0f70399564d03cfb1de17" translate="yes" xml:space="preserve">
          <source>Get the call frame arrayref.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2195f868fa88f8b70cd41ad179a9470365a47e7d" translate="yes" xml:space="preserve">
          <source>Get the caller details for the debug-info. This is where errors should be reported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9758c15788da0555e5c729023387926feaf7d590" translate="yes" xml:space="preserve">
          <source>Get the debug-info filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="697d6a125a10c1c4c64f7782c6ae3f71a72c3baa" translate="yes" xml:space="preserve">
          <source>Get the debug-info line number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bc5c447dbc3b9fc9af210c15468a5c642ba2764" translate="yes" xml:space="preserve">
          <source>Get the debug-info package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d7d19d0cac2b94974cf236fc0ff30805147d71" translate="yes" xml:space="preserve">
          <source>Get the debug-info subroutine name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64409390ff46213a8f658956301c2bac016d52d8" translate="yes" xml:space="preserve">
          <source>Get the directive (such as TODO, skip_all, or no_plan).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8b62b2ce191f547e41a6dc69d08d7e6142159c8" translate="yes" xml:space="preserve">
          <source>Get the exit callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd4becd7b8dc2161e4cfcda2010cf7c1c881bcda" translate="yes" xml:space="preserve">
          <source>Get the exit status for this iterator's process.</source>
          <target state="translated">이 반복기 프로세스의 종료 상태를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="84b89fd72831dd053c82f16626d634a48a2598fb" translate="yes" xml:space="preserve">
          <source>Get the exit status for this iterator. Always returns zero.</source>
          <target state="translated">이 반복자의 종료 상태를 가져옵니다. 항상 0을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f3a54d4a203ed01a0cc006bea81ab1571b475a38" translate="yes" xml:space="preserve">
          <source>Get the exit status for this iterator. For an array iterator this will always be zero.</source>
          <target state="translated">이 반복자의 종료 상태를 가져옵니다. 배열 반복자의 경우 항상 0입니다.</target>
        </trans-unit>
        <trans-unit id="8fd35afec01d8926c34ef914def56ba246178c07" translate="yes" xml:space="preserve">
          <source>Get the global formatter. By default this is the &lt;code&gt;'Test2::Formatter::TAP'&lt;/code&gt; package. This could be any package that implements the &lt;code&gt;write()&lt;/code&gt; method. This can also be an instantiated object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="133e8c41853aab1cbe28dc6fb07183856dc1f08a" translate="yes" xml:space="preserve">
          <source>Get the header and the first &lt;code&gt;NUMLINES&lt;/code&gt; of the body for the message &lt;code&gt;MSGNUM&lt;/code&gt; . Returns a reference to an array which contains the lines of text read from the server.</source>
          <target state="translated">&lt;code&gt;NUMLINES&lt;/code&gt; 메시지에 대한 본문 의 첫 번째 NUMLINES 와 헤더를 &lt;code&gt;MSGNUM&lt;/code&gt; . 서버에서 읽은 텍스트 줄이 포함 된 배열에 대한 참조를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="44dcb96b4157af191087e71f51fc99a6b6f82410" translate="yes" xml:space="preserve">
          <source>Get the header and the first &lt;code&gt;NUMLINES&lt;/code&gt; of the body for the message &lt;code&gt;MSGNUM&lt;/code&gt;. Returns a reference to an array which contains the lines of text read from the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="261245dcb4cd039fa82044da94d5af5764188968" translate="yes" xml:space="preserve">
          <source>Get the identifier string of the hub.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec27c501b4f1f5c68c6d3f3bf841c92928c9d3da" translate="yes" xml:space="preserve">
          <source>Get the list of IPC drivers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54ca3db20c68a6648a2c8195a312d093894414c" translate="yes" xml:space="preserve">
          <source>Get the login name of the owner of the current process.</source>
          <target state="translated">현재 프로세스 소유자의 로그인 이름을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="e120bfbb1d3603fe717d8918b14899076a8087c1" translate="yes" xml:space="preserve">
          <source>Get the message &lt;code&gt;MSGNUM&lt;/code&gt; from the remote mailbox. If &lt;code&gt;FH&lt;/code&gt; is not given then get returns a reference to an array which contains the lines of text read from the server. If &lt;code&gt;FH&lt;/code&gt; is given then the lines returned from the server are printed to the filehandle &lt;code&gt;FH&lt;/code&gt; .</source>
          <target state="translated">원격 사서함에서 &lt;code&gt;MSGNUM&lt;/code&gt; 메시지를 가져 옵니다. 경우 &lt;code&gt;FH&lt;/code&gt; 가 주어지지 않는 한 다음 서버에서 읽을 텍스트의 라인을 포함하는 배열에 대한 참조 수익을 얻을. 경우 &lt;code&gt;FH&lt;/code&gt; 가 지정되고있는 서버에서 반환 된 행은 핸들에 인쇄됩니다 &lt;code&gt;FH&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d9e2e0e867c33579d6b765fa40534326a1f4874f" translate="yes" xml:space="preserve">
          <source>Get the message &lt;code&gt;MSGNUM&lt;/code&gt; from the remote mailbox. If &lt;code&gt;FH&lt;/code&gt; is not given then get returns a reference to an array which contains the lines of text read from the server. If &lt;code&gt;FH&lt;/code&gt; is given then the lines returned from the server are printed to the filehandle &lt;code&gt;FH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02956660e36eb9cd5729ca3ddfdb37f09edf43a6" translate="yes" xml:space="preserve">
          <source>Get the number of expected tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8408e45ea1e0a303e5ad9750221f4cde3d540ec1" translate="yes" xml:space="preserve">
          <source>Get the number of failures (Not all failures come from a test fail, so this number can be larger than the count).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc19f8901910f0d7ab07310a7af344a372ca2fd" translate="yes" xml:space="preserve">
          <source>Get the number of tests that have been run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06a3b874607d7fe23e092b9f32da6bccbba5b9e7" translate="yes" xml:space="preserve">
          <source>Get the one true IPC instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b3bad55eb25ac7cc70d7253f134d8eddcf42c83" translate="yes" xml:space="preserve">
          <source>Get the one true hub stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6ca380ab0b4b303eb42e16913919aab33b145ab" translate="yes" xml:space="preserve">
          <source>Get the plan if this event sets one. The plan is a list of up to 3 items: &lt;code&gt;($count, $directive, $reason)&lt;/code&gt;. &lt;code&gt;$count&lt;/code&gt; must be defined, the others may be undef, or may not exist at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb333825a908708c042aef1d4930adb1df0d546" translate="yes" xml:space="preserve">
          <source>Get the post-load callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab445fff1e80ef74e036e6b70dbbae199679cf5c" translate="yes" xml:space="preserve">
          <source>Get the process id under which the hub was created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c448f39220dd4f40755ba8ad6db14f8a075e74a" translate="yes" xml:space="preserve">
          <source>Get the reason for the directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171a80b6f7c9c9b0de0c2c1387e261c225bb5f1c" translate="yes" xml:space="preserve">
          <source>Get the results of the last test run. Returns a &lt;code&gt;result_class()&lt;/code&gt; instance.</source>
          <target state="translated">마지막 테스트 실행 결과를 얻습니다. &lt;code&gt;result_class()&lt;/code&gt; 인스턴스를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="90d44fbd255026683b10ff974054e3d86ff08631" translate="yes" xml:space="preserve">
          <source>Get the shebang line for a script file.</source>
          <target state="translated">스크립트 파일의 shebang 줄을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="504fa2737ce7fe1a3445394a4d2940417838557c" translate="yes" xml:space="preserve">
          <source>Get the subtest id, if any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b503549e59b904f365573c05edd48365fba47357" translate="yes" xml:space="preserve">
          <source>Get the summary of the event or facets hash, if any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="697c2b6a1d382211fc2dd0bca44da6d75975210e" translate="yes" xml:space="preserve">
          <source>Get the text content of Pod</source>
          <target state="translated">포드의 텍스트 컨텐츠 가져 오기</target>
        </trans-unit>
        <trans-unit id="cf9b50efaedfcdc930b14f6f277c2b1d49f52f07" translate="yes" xml:space="preserve">
          <source>Get the thread id under which the hub was created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a6470e93add70210e01a18515324d36b81b5961" translate="yes" xml:space="preserve">
          <source>Get the value at offset</source>
          <target state="translated">오프셋 값을 얻습니다</target>
        </trans-unit>
        <trans-unit id="3f99d5742414d0f26bb6737824fc7dcb7e13087f" translate="yes" xml:space="preserve">
          <source>Get the value at offset &lt;code&gt;po&lt;/code&gt; in the current (compiling or executing) pad. Use macro &lt;code&gt;PAD_SV&lt;/code&gt; instead of calling this function directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b20b8862126ed2accf702e1ec733c901c8db4d" translate="yes" xml:space="preserve">
          <source>Get the value at offset &lt;code&gt;po&lt;/code&gt; in the current pad</source>
          <target state="translated">현재 패드 에서 오프셋 &lt;code&gt;po&lt;/code&gt; 의 값을 얻습니다.</target>
        </trans-unit>
        <trans-unit id="72cc9b87213c59838a0c486fddb38c60d8bcb990" translate="yes" xml:space="preserve">
          <source>Get the value from slot &lt;code&gt;po&lt;/code&gt; in the base (DEPTH=1) pad of a padlist</source>
          <target state="translated">패드리스트의베이스 (DEPTH = 1) 패드에있는 슬롯 &lt;code&gt;po&lt;/code&gt; 에서 값을 얻습니다.</target>
        </trans-unit>
        <trans-unit id="41a32dc0be59d1d03b67c73a7e5c862c3253a5e0" translate="yes" xml:space="preserve">
          <source>Get the value of a variable in the language context sending this message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c15dfba3a3a5eb3e6fb48d7c0b41882c9028755a" translate="yes" xml:space="preserve">
          <source>Get the wait status for this iterator's process.</source>
          <target state="translated">이 반복자 프로세스의 대기 상태를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="a8e5109ddd83023961a33c488ce31369f7a956bb" translate="yes" xml:space="preserve">
          <source>Get the wait status for this iterator. Always returns zero.</source>
          <target state="translated">이 반복기의 대기 상태를 가져옵니다. 항상 0을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="dd379b83821718a59329d33da5c3c07390f8df61" translate="yes" xml:space="preserve">
          <source>Get the wait status for this iterator. For an array iterator this will always be zero.</source>
          <target state="translated">이 반복기의 대기 상태를 가져옵니다. 배열 반복자의 경우 항상 0입니다.</target>
        </trans-unit>
        <trans-unit id="3a194d016da71ce2734ee5b70b1ec1fd4e7b2f88" translate="yes" xml:space="preserve">
          <source>Get your book listed</source>
          <target state="translated">책을 목록으로 가져 오기</target>
        </trans-unit>
        <trans-unit id="f05995dac27437d201b828e910f3978fcd1fbdb4" translate="yes" xml:space="preserve">
          <source>Get/Set no_wait. This option is used to turn off process/thread waiting at exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e233b794a1025f221a2e19c396601854ddf32a53" translate="yes" xml:space="preserve">
          <source>Get/Set the &lt;code&gt;causes_fail&lt;/code&gt; attribute. This defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed5a0273240a9b3ee55565e913ad2f011b22d22" translate="yes" xml:space="preserve">
          <source>Get/Set the &lt;code&gt;diagnostics&lt;/code&gt; attribute. This defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b178628e927b1daa440df79b30c36ca6aa5801e2" translate="yes" xml:space="preserve">
          <source>Get/Set the &lt;code&gt;diagnostics&lt;/code&gt; attribute. This defaults to an empty list which is undef in scalar context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="998b08d698070e21ce34a6c78daa8a278ad100bb" translate="yes" xml:space="preserve">
          <source>Get/Set the &lt;code&gt;increments_count&lt;/code&gt; attribute. This defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b7f1710a69e37485e0b975cee17e3c59ffeaab" translate="yes" xml:space="preserve">
          <source>Get/Set the &lt;code&gt;no_display&lt;/code&gt; attribute. This defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3ded29f704b88fd0cfcb49ddd21cca5c05fea04" translate="yes" xml:space="preserve">
          <source>Get/Set the summary. This will default to the event package &lt;code&gt;'Test2::Event::Generic'&lt;/code&gt;. You can set it to any value. Setting this to &lt;code&gt;undef&lt;/code&gt; will reset it to the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa1925227608cb70376a6b12c78b32afc34ff80" translate="yes" xml:space="preserve">
          <source>Get/Set the timeout value for the IPC system. This timeout is how long the IPC system will wait for child processes and threads to finish before aborting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a862124c43c274d34647a9768c5732fb7edcd167" translate="yes" xml:space="preserve">
          <source>Get/set subroutine or variable attributes</source>
          <target state="translated">서브 루틴 또는 변수 속성 가져 오기 / 설정</target>
        </trans-unit>
        <trans-unit id="ad4d3a3e81abdd5f967582609d05426a7e1a1f09" translate="yes" xml:space="preserve">
          <source>Get/set the file that the typemap is written to when the &lt;code&gt;write&lt;/code&gt; method is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="734d96b1526270ab63896aef381ca9e394e07680" translate="yes" xml:space="preserve">
          <source>GetAddrInfoFlags =&amp;gt; INT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b06e76800a42032a96bcc6024f2c0120477eda8" translate="yes" xml:space="preserve">
          <source>GetDriveType</source>
          <target state="translated">GetDriveType</target>
        </trans-unit>
        <trans-unit id="4d366e22c7e7afb26f254e27218ba4b5f3a9c339" translate="yes" xml:space="preserve">
          <source>GetDriveTypeW</source>
          <target state="translated">GetDriveTypeW</target>
        </trans-unit>
        <trans-unit id="02e33b49b28fd7abf67a6360478728eb23bcdcb7" translate="yes" xml:space="preserve">
          <source>GetFileAttributes</source>
          <target state="translated">GetFileAttributes</target>
        </trans-unit>
        <trans-unit id="b5ae6df22c4dbe836a96f76bc0e327488d077a63" translate="yes" xml:space="preserve">
          <source>GetFileAttributesW</source>
          <target state="translated">GetFileAttributesW</target>
        </trans-unit>
        <trans-unit id="d95e69f9c878364f21361c49a01e8572507003e4" translate="yes" xml:space="preserve">
          <source>GetFileContents</source>
          <target state="translated">GetFileContents</target>
        </trans-unit>
        <trans-unit id="ca029d0e848a5c50bd8f8b65a8b59e91056276c2" translate="yes" xml:space="preserve">
          <source>GetFileSize</source>
          <target state="translated">GetFileSize</target>
        </trans-unit>
        <trans-unit id="d70c41d299ba5d949686529c3325452327ed11ac" translate="yes" xml:space="preserve">
          <source>GetFileType</source>
          <target state="translated">GetFileType</target>
        </trans-unit>
        <trans-unit id="85c2077811a13c55e12281a1a16e82bf83521f47" translate="yes" xml:space="preserve">
          <source>GetHandleInformation</source>
          <target state="translated">GetHandleInformation</target>
        </trans-unit>
        <trans-unit id="144ac2f17a86a95a5c613437daf2d443d323cbfe" translate="yes" xml:space="preserve">
          <source>GetLogicalDriveStrings</source>
          <target state="translated">GetLogicalDriveStrings</target>
        </trans-unit>
        <trans-unit id="3fb92c0f6b90a931b6edc6b53a4165e6646cfd3b" translate="yes" xml:space="preserve">
          <source>GetLogicalDriveStringsW</source>
          <target state="translated">GetLogicalDriveStringsW</target>
        </trans-unit>
        <trans-unit id="359de04a45f94fecc69aeaee51b4983d8da5dca3" translate="yes" xml:space="preserve">
          <source>GetLogicalDrives</source>
          <target state="translated">GetLogicalDrives</target>
        </trans-unit>
        <trans-unit id="0e09541d86291862cd9e2e7048d551c2058e9bb4" translate="yes" xml:space="preserve">
          <source>GetOptions does not return a false result when an option is not supplied</source>
          <target state="translated">옵션이 제공되지 않으면 GetOptions는 잘못된 결과를 반환하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="87d3b5ae9087dfd036d22e3daee54391ea6d78e7" translate="yes" xml:space="preserve">
          <source>GetOptions does not split the command line correctly</source>
          <target state="translated">GetOptions가 명령 줄을 올바르게 분할하지 않습니다</target>
        </trans-unit>
        <trans-unit id="46612c2fb2a3f4d1528e0cd7f5288c84da4524f8" translate="yes" xml:space="preserve">
          <source>GetOptions returns true to indicate success. It returns false when the function detected one or more errors during option parsing. These errors are signalled using warn() and can be trapped with &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; .</source>
          <target state="translated">GetOptions는 성공을 나타 내기 위해 true를 반환합니다. 옵션 구문 분석 중에 함수가 하나 이상의 오류를 감지하면 false를 리턴합니다. 이 오류는 warn ()을 사용하여 표시되며 &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; 으로 트랩 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e7e6a7d291078818a841e8fbb32781ab4eb115e7" translate="yes" xml:space="preserve">
          <source>GetOptions returns true to indicate success. It returns false when the function detected one or more errors during option parsing. These errors are signalled using warn() and can be trapped with &lt;code&gt;$SIG{__WARN__}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b726fe0f0e4cd3ba3741be1513769194ec024e4" translate="yes" xml:space="preserve">
          <source>GetOptions() will not interpret a leading &lt;code&gt;&quot;&amp;lt;&amp;gt;&quot;&lt;/code&gt; as option starters if the next argument is a reference. To force &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt; and &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt; as option starters, use &lt;code&gt;&quot;&amp;gt;&amp;lt;&quot;&lt;/code&gt; . Confusing? Well, &lt;b&gt;using a starter argument is strongly deprecated&lt;/b&gt; anyway.</source>
          <target state="translated">다음 인수가 참조 인 경우 GetOptions ()는 선행 &lt;code&gt;&quot;&amp;lt;&amp;gt;&quot;&lt;/code&gt; 를 옵션 스타터로 해석하지 않습니다 . &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt; 를 옵션 스타터로 강제 실행하려면 &lt;code&gt;&quot;&amp;gt;&amp;lt;&quot;&lt;/code&gt; 를 사용하십시오 . 혼란 스러운가? 음, &lt;b&gt;스타터 인수를 사용하여 강력하게되지 않습니다&lt;/b&gt; 어쨌든.</target>
        </trans-unit>
        <trans-unit id="16760cc35e467767b93dc2d05726f450ceb00c90" translate="yes" xml:space="preserve">
          <source>GetOptions() will not interpret a leading &lt;code&gt;&quot;&amp;lt;&amp;gt;&quot;&lt;/code&gt; as option starters if the next argument is a reference. To force &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt; and &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt; as option starters, use &lt;code&gt;&quot;&amp;gt;&amp;lt;&quot;&lt;/code&gt;. Confusing? Well, &lt;b&gt;using a starter argument is strongly deprecated&lt;/b&gt; anyway.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9732e721546ff2bc7ea74a9d199d6d228afae46" translate="yes" xml:space="preserve">
          <source>GetOptions() will return a true value if the command line could be processed successfully. Otherwise, it will write error messages using die() and warn(), and return a false result.</source>
          <target state="translated">명령 줄을 성공적으로 처리 할 수 ​​있으면 GetOptions ()는 true 값을 반환합니다. 그렇지 않으면 die () 및 warn ()을 사용하여 오류 메시지를 작성하고 잘못된 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="aa06cb5ffe8522116195fd355d2b91d389bd8a5b" translate="yes" xml:space="preserve">
          <source>GetOsFHandle</source>
          <target state="translated">GetOsFHandle</target>
        </trans-unit>
        <trans-unit id="c15a5bf5af39cb39808fd51b4df60dcce6c74bc8" translate="yes" xml:space="preserve">
          <source>GetOverlappedResult</source>
          <target state="translated">GetOverlappedResult</target>
        </trans-unit>
        <trans-unit id="24f1806763ff30d05d4f6d9d593a4e5d6de479bf" translate="yes" xml:space="preserve">
          <source>GetVars</source>
          <target state="translated">GetVars</target>
        </trans-unit>
        <trans-unit id="ddb392651d25e429c1fc282e6e0508008703e7c9" translate="yes" xml:space="preserve">
          <source>GetVolumeInformation</source>
          <target state="translated">GetVolumeInformation</target>
        </trans-unit>
        <trans-unit id="7cb5fe26b0731e0ea744472a46b3d353a646c276" translate="yes" xml:space="preserve">
          <source>GetVolumeInformationW</source>
          <target state="translated">GetVolumeInformationW</target>
        </trans-unit>
        <trans-unit id="e6a23a3ed3795bbccfde771ea078bdc8eb4555df" translate="yes" xml:space="preserve">
          <source>Get_base</source>
          <target state="translated">Get_base</target>
        </trans-unit>
        <trans-unit id="7d2063f10a426b2597efe0b96af12c715bad49d9" translate="yes" xml:space="preserve">
          <source>Get_bufsiz</source>
          <target state="translated">Get_bufsiz</target>
        </trans-unit>
        <trans-unit id="74bfd499a0b07372ebad99462abefcf9bf44c724" translate="yes" xml:space="preserve">
          <source>Get_cnt</source>
          <target state="translated">Get_cnt</target>
        </trans-unit>
        <trans-unit id="c6e97b96c560e2a763e7a463f1543025d1c8cd4a" translate="yes" xml:space="preserve">
          <source>Get_ptr</source>
          <target state="translated">Get_ptr</target>
        </trans-unit>
        <trans-unit id="c3688e17a720d615e2f589c547cb538d0ee7344a" translate="yes" xml:space="preserve">
          <source>Getarg</source>
          <target state="translated">Getarg</target>
        </trans-unit>
        <trans-unit id="d3750099056a52cd3d76c09c5969009aae1b2738" translate="yes" xml:space="preserve">
          <source>Getopt::Long</source>
          <target state="translated">Getopt::Long</target>
        </trans-unit>
        <trans-unit id="ee86fdfdf70c8935b9943d5d042784e3c2ea2b52" translate="yes" xml:space="preserve">
          <source>Getopt::Long - Extended processing of command line options</source>
          <target state="translated">Getopt :: Long-확장 된 명령 행 옵션</target>
        </trans-unit>
        <trans-unit id="9f1cb7796236a18d5a48dd6147f6ef96a3c237e4" translate="yes" xml:space="preserve">
          <source>Getopt::Long can be configured by calling subroutine Getopt::Long::Configure(). This subroutine takes a list of quoted strings, each specifying a configuration option to be enabled, e.g. &lt;code&gt;ignore_case&lt;/code&gt; , or disabled, e.g. &lt;code&gt;no_ignore_case&lt;/code&gt; . Case does not matter. Multiple calls to Configure() are possible.</source>
          <target state="translated">Getopt :: Long은 서브 루틴 Getopt :: Long :: Configure ()를 호출하여 구성 할 수 있습니다. 이 서브 루틴은 구성 옵션을 지정 각각 예를 들어, 사용 가능하도록 인용 문자열 목록을 소요 &lt;code&gt;ignore_case&lt;/code&gt; 예를 들어, 또는 비활성화 &lt;code&gt;no_ignore_case&lt;/code&gt; . 사건은 중요하지 않습니다. Configure ()를 여러 번 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bca644a1b2e9f78e9cd0b66d0f59880fe49f5af2" translate="yes" xml:space="preserve">
          <source>Getopt::Long can be configured by calling subroutine Getopt::Long::Configure(). This subroutine takes a list of quoted strings, each specifying a configuration option to be enabled, e.g. &lt;code&gt;ignore_case&lt;/code&gt;, or disabled, e.g. &lt;code&gt;no_ignore_case&lt;/code&gt;. Case does not matter. Multiple calls to Configure() are possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e500819062670bf30da6e44490f24a19a2b2b19" translate="yes" xml:space="preserve">
          <source>Getopt::Long can be used in an object oriented way as well:</source>
          <target state="translated">Getopt :: Long은 객체 지향 방식으로도 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="edc4bf4d0ae35771f0ba93156da87e25f9c34e7d" translate="yes" xml:space="preserve">
          <source>Getopt::Long encourages the use of Pod::Usage to produce help messages. For example:</source>
          <target state="translated">Getopt :: Long은 Pod :: Usage를 사용하여 도움말 메시지를 생성하도록 권장합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b2e568fc541602443fba9f2e2602a6ef4699382b" translate="yes" xml:space="preserve">
          <source>Getopt::Long is the Perl5 successor of &lt;code&gt;newgetopt.pl&lt;/code&gt; . This was the first Perl module that provided support for handling the new style of command line options, in particular long option names, hence the Perl5 name Getopt::Long. This module also supports single-character options and bundling.</source>
          <target state="translated">Getopt :: Long은 &lt;code&gt;newgetopt.pl&lt;/code&gt; 의 Perl5 후속 제품입니다 . 이것은 새로운 스타일의 명령 행 옵션, 특히 긴 옵션 이름, 따라서 Perl5 이름 Getopt :: Long 처리를 지원하는 첫 번째 Perl 모듈입니다. 이 모듈은 단일 문자 옵션 및 번들링도 지원합니다.</target>
        </trans-unit>
        <trans-unit id="b77e9ce94bd759578db0d78c385379329328546c" translate="yes" xml:space="preserve">
          <source>Getopt::Long is the Perl5 successor of &lt;code&gt;newgetopt.pl&lt;/code&gt;. This was the first Perl module that provided support for handling the new style of command line options, in particular long option names, hence the Perl5 name Getopt::Long. This module also supports single-character options and bundling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baeccd76f672aaa366456df8bb56a2d544addefb" translate="yes" xml:space="preserve">
          <source>Getopt::Long is thread safe when using ithreads as of Perl 5.8. It is</source>
          <target state="translated">Getopt :: Long은 Perl 5.8부터 ithread를 사용할 때 스레드로부터 안전합니다. 그것은</target>
        </trans-unit>
        <trans-unit id="0969a40bae8913a7683a1a070a431edeaeab53a5" translate="yes" xml:space="preserve">
          <source>Getopt::Long supports three styles of bundling. To enable bundling, a call to Getopt::Long::Configure is required.</source>
          <target state="translated">Getopt :: Long은 세 가지 스타일의 번들링을 지원합니다. 번들링을 사용하려면 Getopt :: Long :: Configure를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="c364d3e4d70b8c945dae76119e75bf89e0b572cc" translate="yes" xml:space="preserve">
          <source>Getopt::Long supports two useful variants of simple options:</source>
          <target state="translated">Getopt :: Long은 간단한 옵션의 두 가지 유용한 변형을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="35548099a37e6129ad92eb2599c19e8e81824308" translate="yes" xml:space="preserve">
          <source>Getopt::Long will provide a help message using module &lt;a href=&quot;../pod/usage&quot;&gt;Pod::Usage&lt;/a&gt;. The message, derived from the SYNOPSIS POD section, will be written to standard output and processing will terminate.</source>
          <target state="translated">Getopt :: Long은 &lt;a href=&quot;../pod/usage&quot;&gt;Pod :: Usage&lt;/a&gt; 모듈을 사용하여 도움말 메시지를 제공합니다 . SYNOPSIS POD 섹션에서 파생 된 메시지가 표준 출력에 기록되고 처리가 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="8fdf32dabf889485e2c6ebd8bd7c876e559a3385" translate="yes" xml:space="preserve">
          <source>Getopt::Long will provide a help message using module &lt;a href=&quot;Pod::Usage&quot;&gt;Pod::Usage&lt;/a&gt;. The message, derived from the SYNOPSIS POD section, will be written to standard output and processing will terminate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23debd03657a7e0cf1c9081bd9b34c843df29188" translate="yes" xml:space="preserve">
          <source>Getopt::Long will provide a standard version message that includes the program name, its version (if $main::VERSION is defined), and the versions of Getopt::Long and Perl. The message will be written to standard output and processing will terminate.</source>
          <target state="translated">Getopt :: Long은 프로그램 이름, 버전 ($ main :: VERSION이 정의 된 경우) 및 Getopt :: Long 및 Perl 버전을 포함하는 표준 버전 메시지를 제공합니다. 메시지가 표준 출력에 기록되고 처리가 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="231784d11e2ac3af47374629249969cb6df988d0" translate="yes" xml:space="preserve">
          <source>Getopt::Std</source>
          <target state="translated">Getopt::Std</target>
        </trans-unit>
        <trans-unit id="703b8d06dd815db9f4b95873fa7d356dd5900693" translate="yes" xml:space="preserve">
          <source>Getopt::Std - Process single-character switches with switch clustering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="622ba9888f87bde337d7026005408ee58ef615b1" translate="yes" xml:space="preserve">
          <source>Gets information about a file system volume, returning a true value if successful. On failure, returns a false value and sets &lt;code&gt;fileLastError()&lt;/code&gt; and &lt;code&gt;$^E&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050f7a7a02c0f512f89945ac517880bcdb5ae514" translate="yes" xml:space="preserve">
          <source>Gets or sets the number of concurrent test runs the harness is handling. By default, this value is 1 -- for parallel testing, this should be set higher.</source>
          <target state="translated">하네스가 처리중인 동시 테스트 실행 수를 가져 오거나 설정합니다. 기본적으로이 값은 1입니다. 병렬 테스트의 경우이 값을 더 높게 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="daa629c55c1f0a45358dee6010d69ea52181b0b2" translate="yes" xml:space="preserve">
          <source>Gets the &lt;code&gt;mro_isarev&lt;/code&gt; for this class, returned as an arrayref of class names. These are every class that &quot;isa&quot; the given class name, even if the isa relationship is indirect. This is used internally by the MRO code to keep track of method/MRO cache invalidations.</source>
          <target state="translated">이 클래스 의 &lt;code&gt;mro_isarev&lt;/code&gt; 를 가져와 클래스 이름의 arrayref로 반환합니다. 이것들은 isa 관계가 간접적 인 경우에도 주어진 클래스 이름을 &quot;사실&quot;하는 모든 클래스입니다. 이것은 메소드 / MRO 캐시 무효화를 추적하기 위해 MRO 코드에 의해 내부적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="70c3b8c2ec32f2ee2102b43f1e6dd3a00777d348" translate="yes" xml:space="preserve">
          <source>Gets the version of Perl currently running the test suite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd14d8ab490abe0a698ffc2511ce53075831cc54" translate="yes" xml:space="preserve">
          <source>Gets/sets the current test number we're on. You usually shouldn't have to set this.</source>
          <target state="translated">현재 사용중인 테스트 번호를 가져 오거나 설정합니다. 일반적으로 이것을 설정할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="3706dd8132de9e8897f7e90d7114484c9d4b2bb9" translate="yes" xml:space="preserve">
          <source>Gets/sets the number of tests we expect this test to run and prints out the appropriate headers.</source>
          <target state="translated">이 테스트가 실행될 것으로 예상되는 테스트 수를 가져오고 설정하고 적절한 헤더를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="e92d34d8c771c7a84b714ba45ff28d98b8c6322f" translate="yes" xml:space="preserve">
          <source>Getter, used to get the value of the &lt;code&gt;foo&lt;/code&gt; field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f884a4b1be1eb753e1154cd093d629796012ffc9" translate="yes" xml:space="preserve">
          <source>Getter/setter for frontend object. Method just allows to subclass CPAN.pm.</source>
          <target state="translated">프론트 엔드 객체의 Getter / setter. 메소드는 CPAN.pm의 서브 클래스를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="1acf2787a8aee315df9ae150576ddc4f44be77a7" translate="yes" xml:space="preserve">
          <source>Getter/setter for the &quot;generation&quot; of the test suite run. The first generation is 1 (one) and subsequent generations are 2, 3, etc.</source>
          <target state="translated">테스트 스위트 실행의 &quot;세대&quot;에 대한 Getter / Setter. 1 세대는 1 (일)이고 다음 세대는 2, 3 등입니다.</target>
        </trans-unit>
        <trans-unit id="df0821c683786b3a185e90a15a8887e90823f964" translate="yes" xml:space="preserve">
          <source>Getter/setter for the instance of the &lt;code&gt;state_class&lt;/code&gt; .</source>
          <target state="translated">게터 /의 인스턴스에 대한 세터 &lt;code&gt;state_class&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5bf05902357ec950c574054f51b64aa64104327d" translate="yes" xml:space="preserve">
          <source>Getter/setter for the instance of the &lt;code&gt;state_class&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d0a2a42561baa9a96f6b60d628e8035a5add88f" translate="yes" xml:space="preserve">
          <source>Getter/setter for the name of the class used for maintaining state. This class should either subclass from &lt;code&gt;App::Prove::State&lt;/code&gt; or provide an identical interface.</source>
          <target state="translated">상태 유지에 사용되는 클래스 이름에 대한 Getter / Setter 이 클래스는 &lt;code&gt;App::Prove::State&lt;/code&gt; 서브 클래스 이거나 동일한 인터페이스를 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="f5b0e960fe4e828ae0c4af986bdc86fc8e330536" translate="yes" xml:space="preserve">
          <source>Getter/setter for the name of the class used for tracking test results. This class should either subclass from &lt;code&gt;App::Prove::State::Result&lt;/code&gt; or provide an identical interface.</source>
          <target state="translated">테스트 결과 추적에 사용되는 클래스 이름에 대한 Getter / Setter 이 클래스는 &lt;code&gt;App::Prove::State::Result&lt;/code&gt; 서브 클래스 이거나 동일한 인터페이스를 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="eabe8c9a6205eacd9d12103fd632a371642529ec" translate="yes" xml:space="preserve">
          <source>Getter/setter for the time of the test suite run.</source>
          <target state="translated">테스트 스위트 실행 시간에 대한 게터 / 세터.</target>
        </trans-unit>
        <trans-unit id="6796c34d6d781e2d3a0ac04017b688fdbad6d325" translate="yes" xml:space="preserve">
          <source>Getting Started with Getopt::Long</source>
          <target state="translated">Getopt :: Long 시작하기</target>
        </trans-unit>
        <trans-unit id="efdcb676f7e4576e5bad658605652f36207e9edd" translate="yes" xml:space="preserve">
          <source>Getting Support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1252190bfc7e0e95dec199e97b41cd19bd2e58b1" translate="yes" xml:space="preserve">
          <source>Getting changes into a maint branch</source>
          <target state="translated">메인 지점으로 변경하기</target>
        </trans-unit>
        <trans-unit id="d63959139747b55549aaec776baaded768ee26b5" translate="yes" xml:space="preserve">
          <source>Getting every available name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36235f076eea8a428b643f4a70d6dbb8c2bed724" translate="yes" xml:space="preserve">
          <source>Getting perl source</source>
          <target state="translated">펄 소스 얻기</target>
        </trans-unit>
        <trans-unit id="dfa7f5176d7ce9da792b1bc4befb42509ca613ce" translate="yes" xml:space="preserve">
          <source>Getting the Perl Source for AmigaOS</source>
          <target state="translated">AmigaOS 용 Perl 소스 얻기</target>
        </trans-unit>
        <trans-unit id="ca13f2cfdfff6452c98f50feff43bb9608b60008" translate="yes" xml:space="preserve">
          <source>Getting the fat out of XSUBs</source>
          <target state="translated">XSUB에서 지방 제거</target>
        </trans-unit>
        <trans-unit id="1e5b964707fd03837f1c6270f09aa1a8d502762e" translate="yes" xml:space="preserve">
          <source>Getting this message indicates that the outcome of the match arguably should have been the opposite of what actually happened. If you think that is the case, you may wish to make the &lt;code&gt;non_unicode&lt;/code&gt; warnings category fatal; if you agree with Perl's decision, you may wish to turn off this category.</source>
          <target state="translated">이 메시지를 얻는 것은 경기 결과가 실제로 일어난 것과 반대 였음을 나타냅니다. 이런 경우라고 생각되면 &lt;code&gt;non_unicode&lt;/code&gt; warnings 범주를 치명적 으로 만들 수 있습니다 . Perl의 결정에 동의하면이 범주를 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c57b1bd007b42e02300f16d8e99034836448a153" translate="yes" xml:space="preserve">
          <source>Getting your patch accepted</source>
          <target state="translated">패치 승인 받기</target>
        </trans-unit>
        <trans-unit id="80db569e43bb9df0657e208673f0728aa476a744" translate="yes" xml:space="preserve">
          <source>Gigantic thanks to Jarkko Hietaniemi, for agreeing to put this in the core when I hadn't written it yet, and for generally being helpful, supportive, and competent. (Usually the rule is &quot;choose any one.&quot;) Also big thanks to Abhijit Menon-Sen for all of the same things.</source>
          <target state="translated">Jarkko Hietaniemi에게 감사의 말을 전합니다. 아직 쓰지 않았을 때이를 핵심에 넣고 일반적으로 도움이되고 지원하며 유능합니다. (보통 규칙은 &quot;어느 하나를 선택하는 것&quot;입니다.) 또한 같은 모든 일에 대해 Abhijit Menon-Sen에게 감사드립니다.</target>
        </trans-unit>
        <trans-unit id="c447f4baf429b1b41a12ae13b0f7bf296acd86b4" translate="yes" xml:space="preserve">
          <source>Gisle Aas &amp;lt;gisle@aas.no&amp;gt;</source>
          <target state="translated">Gisle Aas &amp;lt;gisle@aas.no&amp;gt;</target>
        </trans-unit>
        <trans-unit id="e2bf29bf784713e55d54fd683f2ddb22d16ebc1e" translate="yes" xml:space="preserve">
          <source>Gisle Aas made a number of improvements to the documentation for 2.07 and his advice and assistance is also greatly appreciated.</source>
          <target state="translated">Gisle Aas는 2.07에 대한 문서를 여러 가지로 개선했으며 그의 조언과 지원 또한 대단히 감사합니다.</target>
        </trans-unit>
        <trans-unit id="d5205d4410276cc0ebead8a23281418d320e5d50" translate="yes" xml:space="preserve">
          <source>Gisle Aas's &quot;illustrated perlguts&quot;, also known as</source>
          <target state="translated">Gisle Aas의 &quot;그림 된 perlguts&quot;</target>
        </trans-unit>
        <trans-unit id="8a1336646a79e293474d5da63f8a9e49f7c504c4" translate="yes" xml:space="preserve">
          <source>Give a seed the pseudorandom number generator, see &lt;a href=&quot;functions/srand&quot;&gt;srand&lt;/a&gt;.</source>
          <target state="translated">씨앗에 의사 난수 생성기를 제공하십시오 ( &lt;a href=&quot;functions/srand&quot;&gt;srand&lt;/a&gt; 참조) .</target>
        </trans-unit>
        <trans-unit id="111eb8faa37551d29f6ef39dc427825af2b24320" translate="yes" xml:space="preserve">
          <source>Give a seed the pseudorandom number generator, see &lt;a href=&quot;perlfunc#srand&quot;&gt;&quot;srand&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecbf54e25625127b374bd97fb6bf30d58f7f39f4" translate="yes" xml:space="preserve">
          <source>Give examples of use in your documentation</source>
          <target state="translated">문서에서 사용 예제를 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="576b2bd7a5f1aafe83cdf1ff1d6086595bd3253e" translate="yes" xml:space="preserve">
          <source>Give meaningful error messages when a test fails.</source>
          <target state="translated">테스트가 실패하면 의미있는 오류 메시지를 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="22362db21ca02fd220365037ef3ce1c3ae84669f" translate="yes" xml:space="preserve">
          <source>Give some example uses of the program or function. Don't skimp; users often find this the most useful part of the documentation. The examples are generally given as verbatim paragraphs.</source>
          <target state="translated">프로그램이나 기능의 사용 예를 제시하십시오. 뛰어 넘지 마십시오. 사용자는 종종 이것이 설명서에서 가장 유용한 부분이라고 생각합니다. 예제는 일반적으로 완전 단락으로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="50b41e662ea9282912cd0935127aa4fdcf1ffa2b" translate="yes" xml:space="preserve">
          <source>Give the module a version/issue/release number.</source>
          <target state="translated">모듈에 버전 / 문제 / 릴리스 번호를 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="280f5d0aaefd1eefc611f50ae84a5b211fd8c124" translate="yes" xml:space="preserve">
          <source>Given 'tests' and optional 'rules' as input, returns a new &lt;code&gt;TAP::Parser::Scheduler&lt;/code&gt; object. Each member of &lt;code&gt;@tests&lt;/code&gt; should be either a a test file name, or a two element arrayref, where the first element is a test file name, and the second element is a test description. By default, we'll use the test name as the description.</source>
          <target state="translated">'tests'와 선택적인 'rules'가 입력으로 주어지면 새로운 &lt;code&gt;TAP::Parser::Scheduler&lt;/code&gt; 객체를 반환 합니다. &lt;code&gt;@tests&lt;/code&gt; 의 각 멤버는 테스트 파일 이름이거나 두 개의 요소 arrayref 여야합니다. 첫 번째 요소는 테스트 파일 이름이고 두 번째 요소는 테스트 설명입니다. 기본적으로 테스트 이름을 설명으로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="c200e634889ae19cc0bdab66baa6f148654f222f" translate="yes" xml:space="preserve">
          <source>Given -n, if there's a opt_n_with, it'll call $object-&amp;gt;opt_n_with( ARGUMENT ) (e.g., &quot;-n foo&quot; =&amp;gt; $object-&amp;gt;opt_n_with('foo'). Ditto &quot;-nfoo&quot;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88ad438932c9bdde0a7a6699aa6fd02d2661a215" translate="yes" xml:space="preserve">
          <source>Given &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt;, returns the value &lt;code&gt;x - n*y&lt;/code&gt; , where &lt;code&gt;n&lt;/code&gt; is the integer closest to &lt;code&gt;&lt;a href=&quot;functions/x&quot;&gt;x/y&lt;/a&gt;&lt;/code&gt;. [C99]</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt; 가 주어지면 x &lt;code&gt;x - n*y&lt;/code&gt; 값을 반환합니다 . 여기서 &lt;code&gt;n&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;functions/x&quot;&gt;x/y&lt;/a&gt;&lt;/code&gt; 에 가장 가까운 정수 입니다. [C99]</target>
        </trans-unit>
        <trans-unit id="0a44544bbb8d81a603f952dfb3c5683ac4205665" translate="yes" xml:space="preserve">
          <source>Given &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, returns the value &lt;code&gt;x - n*y&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the integer closest to &lt;code&gt;x&lt;/code&gt;/&lt;code&gt;y&lt;/code&gt;. [C99]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4516641ce73c8bc0e4fc5ba5d53992584effc072" translate="yes" xml:space="preserve">
          <source>Given a $parser that's an object of class Pod::Simple::PullParser (or a subclass)...</source>
          <target state="translated">Pod :: Simple :: PullParser (또는 서브 클래스) 클래스의 객체 인 $ parser가 주어진다면 ...</target>
        </trans-unit>
        <trans-unit id="29437e7d43f3cc0c11b41ed388b862563ac2a62f" translate="yes" xml:space="preserve">
          <source>Given a &lt;a href=&quot;TAP::Parser::Source&quot;&gt;TAP::Parser::Source&lt;/a&gt;, detects what kind of source it is and returns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e13613226c18b55f5220f10848d744fb0086077" translate="yes" xml:space="preserve">
          <source>Given a &lt;a href=&quot;TAP::Parser::Source&quot;&gt;TAP::Parser::Source&lt;/a&gt;, finds the most suitable &lt;a href=&quot;TAP::Parser::SourceHandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt; to use to create a &lt;a href=&quot;TAP::Parser::Iterator&quot;&gt;TAP::Parser::Iterator&lt;/a&gt; (see &lt;a href=&quot;#detect_source&quot;&gt;&quot;detect_source&quot;&lt;/a&gt;). Dies on error.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
