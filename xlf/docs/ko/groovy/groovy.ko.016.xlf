<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="groovy">
    <body>
      <group id="groovy">
        <trans-unit id="cfdc0b86348d2b07a63a32744509bb44285b998d" translate="yes" xml:space="preserve">
          <source>This returns a mutable java.util.Collection of some sort, to which items are added.</source>
          <target state="translated">이것은 항목이 추가되는 일종의 변경 가능한 java.util.Collection을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="a5c4d99849c9672226f265130f852668cd88b3e3" translate="yes" xml:space="preserve">
          <source>This sample script will be transformed at compile time to something that resembles this:</source>
          <target state="translated">이 샘플 스크립트는 컴파일 타임에 다음과 유사한 것으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="e3ee2c7dcf95a3334468fe4420194df7d4a7aad8" translate="yes" xml:space="preserve">
          <source>This servlet will run Groovy scripts as Groovlets. Groovlets are scripts with these objects implicit in their scope:</source>
          <target state="translated">이 서블릿은 Groovy 스크립트를 Groovlet으로 실행합니다. Groovlet은 다음과 같은 개체가 범위에 암시 적으로 포함 된 스크립트입니다.</target>
        </trans-unit>
        <trans-unit id="1ab9a8edf6cf543cb8d1215adcda338da2a12a34" translate="yes" xml:space="preserve">
          <source>This sets the code statement of the closure.</source>
          <target state="translated">이것은 클로저의 코드 문장을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="b263e7ec3be6390e0bd666df48a0e6d983eab566" translate="yes" xml:space="preserve">
          <source>This sets the code statement of the closure. You can use this method in order to add more actions during the closure execution.</source>
          <target state="translated">이것은 클로저의 코드 문장을 설정합니다. 이 메서드를 사용하여 클로저 실행 중에 더 많은 작업을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="078efd6fdaa8e88c849374efacbd538d7db65f85" translate="yes" xml:space="preserve">
          <source>This signature hint uses abstract methods from some type (abstract class or interface) in order to infer the expected parameter types. This is especially useful for closure parameter type inference when implicit closure coercion is in action.</source>
          <target state="translated">이 시그니처 힌트는 예상되는 매개 변수 유형을 추론하기 위해 일부 유형 (추상 클래스 또는 인터페이스)의 추상 메소드를 사용합니다. 이는 암시 적 클로저 강제가 작동 중일 때 클로저 매개 변수 유형 추론에 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="b5418e01c6e761a30ee1270adf06ce59a41f301e" translate="yes" xml:space="preserve">
          <source>This statement should make the code jump to surrounding while loop's start label Does not work from within Closures</source>
          <target state="translated">이 문은 코드가 주변 while 루프의 시작 레이블로 점프하도록해야합니다. Closure 내에서 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="407d9fcf7d0036cbc6e01d94cb02d01c231fd815" translate="yes" xml:space="preserve">
          <source>This statement will throw exception which will be caught and redirected to jump to surrounding while loop's start label Also works from within Closures but is a tiny bit slower</source>
          <target state="translated">이 문은 예외를 throw합니다. 예외를 잡아서 주위 while 루프의 시작 레이블로 점프하도록 리디렉션합니다. Closures 내에서도 작동하지만 약간 느립니다.</target>
        </trans-unit>
        <trans-unit id="75f4a79c481dc2cb5bbfc43df8b463419949a150" translate="yes" xml:space="preserve">
          <source>This strategy is used with the &lt;a href=&quot;builder&quot;&gt;Builder&lt;/a&gt; AST transform to create a builder helper class for the fluent and type-safe creation of instances of a specified class. It is modelled roughly on the design outlined here: http://michid.wordpress.com/2008/08/13/type-safe-builder-pattern-in-java/ You define classes which use the type-safe initializer pattern as follows:</source>
          <target state="translated">이 전략은 &lt;a href=&quot;builder&quot;&gt;Builder&lt;/a&gt; AST 변환 과 함께 사용되어 지정된 클래스의 인스턴스를 유창하고 형식이 안전한 생성을위한 빌더 도우미 클래스를 만듭니다. 여기에 설명 된 디자인을 대략적으로 모델링합니다. http://michid.wordpress.com/2008/08/13/type-safe-builder-pattern-in-java/ 유형 안전 이니셜 라이저 패턴을 사용하는 클래스를 다음과 같이 정의합니다. 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f27bf8b84e8738c2b4b0f1f9876f46dd72a605e8" translate="yes" xml:space="preserve">
          <source>This strategy is used with the &lt;a href=&quot;builder&quot;&gt;Builder&lt;/a&gt; AST transform to create a builder helper class for the fluent creation of instances of a specified class. It can be used at the class, static method or constructor levels. You use it as follows:</source>
          <target state="translated">이 전략은 &lt;a href=&quot;builder&quot;&gt;Builder&lt;/a&gt; AST 변환 과 함께 사용되어 지정된 클래스의 인스턴스를 원활하게 생성하기위한 빌더 도우미 클래스를 만듭니다. 클래스, 정적 메서드 또는 생성자 수준에서 사용할 수 있습니다. 다음과 같이 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ed6bf569fc733575cb4369cf7054b4bb36aa6516" translate="yes" xml:space="preserve">
          <source>This strategy is used with the &lt;a href=&quot;builder&quot;&gt;Builder&lt;/a&gt; AST transform to modify your Groovy objects so that the setter methods for properties return the original object, thus allowing chained usage of the setters. You use it as follows:</source>
          <target state="translated">이 전략은 &lt;a href=&quot;builder&quot;&gt;Builder&lt;/a&gt; AST 변환 과 함께 사용되어 Groovy 개체를 수정하여 속성에 대한 setter 메서드가 원래 개체를 반환하여 setter를 체인으로 사용할 수 있도록합니다. 다음과 같이 사용합니다.</target>
        </trans-unit>
        <trans-unit id="25cbfaea1047a7e785b1eb392bc7238bc7c27b3a" translate="yes" xml:space="preserve">
          <source>This strategy is used with the &lt;a href=&quot;builder&quot;&gt;Builder&lt;/a&gt; AST transform to populate a builder helper class so that it can be used for the fluent creation of instances of a specified class. The specified class is not modified in any way and may be a Java class. You use it by creating and annotating an explicit builder class which will be filled in by during annotation processing with the appropriate build method and setters. An example is shown here:</source>
          <target state="translated">이 전략은 &lt;a href=&quot;builder&quot;&gt;Builder&lt;/a&gt; AST 변환 과 함께 사용되어 빌더 도우미 클래스를 채우므로 지정된 클래스의 인스턴스를 원활하게 생성하는 데 사용할 수 있습니다. 지정된 클래스는 어떤 방식으로도 수정되지 않으며 Java 클래스 일 수 있습니다. 적절한 빌드 메소드 및 setter로 주석 처리 중에 채워질 명시 적 빌더 클래스를 작성하고 주석을 달아서 사용합니다. 여기에 예가 나와 있습니다.</target>
        </trans-unit>
        <trans-unit id="aefa6c7294500282f8d4bb4eddcadf871ee1b4cc" translate="yes" xml:space="preserve">
          <source>This style is appropriate for final classes (where inheritance is not allowed) which have only &lt;code&gt;java.lang.Object&lt;/code&gt; as a super class. Most &lt;code&gt;@Immutable&lt;/code&gt; classes fall in to this category. For such classes, there is no need to introduce the &lt;code&gt;canEqual()&lt;/code&gt; method.</source>
          <target state="translated">이 스타일은 &lt;code&gt;java.lang.Object&lt;/code&gt; 클래스로 java.lang.Object 만있는 최종 클래스 (상속이 허용되지 않는 경우)에 적합합니다 . 대부분의 &lt;code&gt;@Immutable&lt;/code&gt; 클래스는이 범주에 속합니다. 이러한 클래스의 경우 &lt;code&gt;canEqual()&lt;/code&gt; 메서드 를 도입 할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="802ac4dc77b8df6dda1da8c3fffeee2c99b224a0" translate="yes" xml:space="preserve">
          <source>This task can take the following arguments:</source>
          <target state="translated">이 태스크는 다음 인수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="60d946e253765569f2bcdd4ca2526f06acf4975e" translate="yes" xml:space="preserve">
          <source>This transformation adds an instance of ReentrantReadWriteLock to the class.</source>
          <target state="translated">이 변환은 ReentrantReadWriteLock의 인스턴스를 클래스에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="d3ce80b2ebfcdc75ae24268b035a5eaebda453e2" translate="yes" xml:space="preserve">
          <source>This transformation is not frequently needed but can be useful in certain testing scenarios or when using a third-party library or framework which relies upon package scoping.</source>
          <target state="translated">이 변환은 자주 필요하지는 않지만 특정 테스트 시나리오 또는 패키지 범위 지정에 의존하는 타사 라이브러리 또는 프레임 워크를 사용할 때 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e94d4c2b6ad8a848ffe58957502849a9e3e7e841" translate="yes" xml:space="preserve">
          <source>This transformer focuses on ranges to produce optimized bytecode.</source>
          <target state="translated">이 변환기는 최적화 된 바이트 코드를 생성하는 범위에 중점을 둡니다.</target>
        </trans-unit>
        <trans-unit id="6fda571a0719db47e28eab288facbc6305d4dd4a" translate="yes" xml:space="preserve">
          <source>This visitor directly implements the &lt;a href=&quot;../../ast/groovycodevisitor&quot;&gt;GroovyCodeVisitor&lt;/a&gt; interface instead of using the &lt;a href=&quot;../../ast/codevisitorsupport&quot;&gt;CodeVisitorSupport&lt;/a&gt; class to make sure that future features of the language gets managed by this visitor.</source>
          <target state="translated">이 방문자 는 &lt;a href=&quot;../../ast/codevisitorsupport&quot;&gt;CodeVisitorSupport&lt;/a&gt; 클래스를 사용하는 대신 &lt;a href=&quot;../../ast/groovycodevisitor&quot;&gt;GroovyCodeVisitor&lt;/a&gt; 인터페이스를 직접 구현하여 언어의 향후 기능을이 방문자가 관리하도록합니다.</target>
        </trans-unit>
        <trans-unit id="9f2eeb9355d53b5cbe12b0343f793c0ff95a4cf8" translate="yes" xml:space="preserve">
          <source>This visitor directly implements the &lt;a href=&quot;../../ast/groovycodevisitor&quot;&gt;GroovyCodeVisitor&lt;/a&gt; interface instead of using the &lt;a href=&quot;../../ast/codevisitorsupport&quot;&gt;CodeVisitorSupport&lt;/a&gt; class to make sure that future features of the language gets managed by this visitor. Thus, adding a new feature would result in a compilation error if this visitor is not updated.</source>
          <target state="translated">이 방문자 는 &lt;a href=&quot;../../ast/codevisitorsupport&quot;&gt;CodeVisitorSupport&lt;/a&gt; 클래스를 사용하는 대신 &lt;a href=&quot;../../ast/groovycodevisitor&quot;&gt;GroovyCodeVisitor&lt;/a&gt; 인터페이스를 직접 구현하여 언어의 향후 기능을이 방문자가 관리하도록합니다. 따라서이 방문자가 업데이트되지 않은 경우 새 기능을 추가하면 컴파일 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="867203c84b164cf2c1604344961c3110c75104ff" translate="yes" xml:space="preserve">
          <source>This visitor is only intended to be executed once, during the &lt;a href=&quot;../control/compilephase#SEMANTIC_ANALYSIS&quot;&gt;CompilePhase.SEMANTIC_ANALYSIS&lt;/a&gt; phase of compilation.</source>
          <target state="translated">이 방문자는 컴파일 의 &lt;a href=&quot;../control/compilephase#SEMANTIC_ANALYSIS&quot;&gt;CompilePhase.SEMANTIC_ANALYSIS&lt;/a&gt; 단계에서 한 번만 실행 됩니다.</target>
        </trans-unit>
        <trans-unit id="bd249cfc8649d3e5de4b8832a5786782f79ea5b1" translate="yes" xml:space="preserve">
          <source>This visitor is responsible for amending the AST with static compilation metadata or transform the AST so that a class or a method can be statically compiled. It may also throw errors specific to static compilation which are not considered as an error at the type check pass. For example, usage of spread operator is not allowed in statically compiled portions of code, while it may be statically checked. Static compilation relies on static type checking, which explains why this visitor extends the type checker visitor.</source>
          <target state="translated">이 방문자는 정적 컴파일 메타 데이터로 AST를 수정하거나 클래스 또는 메서드를 정적으로 컴파일 할 수 있도록 AST를 변환해야합니다. 또한 유형 검사 패스에서 오류로 간주되지 않는 정적 컴파일에 특정한 오류가 발생할 수 있습니다. 예를 들어, 코드의 정적으로 컴파일 된 부분에서는 스프레드 연산자를 사용할 수 없지만 정적으로 검사 할 수 있습니다. 정적 컴파일은 정적 유형 검사에 의존하므로이 방문자가 유형 검사기 방문자를 확장하는 이유를 설명합니다.</target>
        </trans-unit>
        <trans-unit id="e79482b8e6c4004db766d4e5a7f36adefd3affb0" translate="yes" xml:space="preserve">
          <source>This will MODIFY the stacktrace of the exception instance and all its causes irreversibly</source>
          <target state="translated">이것은 예외 인스턴스의 스택 추적과 모든 원인을 되돌릴 수 없게 수정합니다.</target>
        </trans-unit>
        <trans-unit id="dadfcb09dab169bd4e9fceb4279caaf34eec8a50" translate="yes" xml:space="preserve">
          <source>This will MODIFY the stacktrace of the root cause exception object and return it</source>
          <target state="translated">근본 원인 예외 개체의 스택 추적을 수정하고 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3bc32a50ac2533b04b99e8ffacdbe550a5b58772" translate="yes" xml:space="preserve">
          <source>This will be pushed into the child grab annotations if the value is not set in the child annotation already.</source>
          <target state="translated">값이 자식 주석에 이미 설정되지 않은 경우 자식 가져 오기 주석으로 푸시됩니다.</target>
        </trans-unit>
        <trans-unit id="269062ef39b784c1871b5bc6f8081c5031dda5c3" translate="yes" xml:space="preserve">
          <source>This will let the Groovy compiler use compile time checks in the style of Java then perform static compilation, thus bypassing the Groovy meta object protocol.</source>
          <target state="translated">이렇게하면 Groovy 컴파일러가 Java 스타일의 컴파일 시간 검사를 사용한 다음 정적 컴파일을 수행하여 Groovy 메타 개체 프로토콜을 우회 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="124e7490fa2f3fcb70883343939eefae466b5290" translate="yes" xml:space="preserve">
          <source>This will let the Groovy compiler use compile time checks in the style of Java.</source>
          <target state="translated">이렇게하면 Groovy 컴파일러가 Java 스타일의 컴파일 시간 검사를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="53525e1e41c6e79f2e258fd001a6806775bb1248" translate="yes" xml:space="preserve">
          <source>This will output an error if your class doesn't implement one of &lt;code&gt;Serializable&lt;/code&gt; or &lt;code&gt;Externalizable&lt;/code&gt;, will typically be significantly slower than the other approaches, also doesn't allow fields to be final, will take up more memory as even immutable classes like String will be cloned but does have the advantage that it performs deep cloning automatically.</source>
          <target state="translated">클래스가 &lt;code&gt;Serializable&lt;/code&gt; 또는 &lt;code&gt;Externalizable&lt;/code&gt; 중 하나를 구현하지 않으면 오류가 출력 되며 일반적으로 다른 접근 방식보다 훨씬 느리고 필드가 최종화되는 것을 허용하지 않으며 String과 같은 변경 불가능한 클래스도 더 많은 메모리를 차지합니다. 복제 할 수 있지만 자동으로 딥 복제를 수행한다는 장점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="bd713244e15d9e687a8348a0165b20a800dd40e9" translate="yes" xml:space="preserve">
          <source>This will succeed, because the x and y variables declared in the delegate shadow the fields in the owner class.</source>
          <target state="translated">델리게이트에서 선언 된 x 및 y 변수가 소유자 클래스의 필드를 가리기 때문에 성공할 것입니다.</target>
        </trans-unit>
        <trans-unit id="a3d75ff6b91b6558cffb7236fdd02abbc7a4b83f" translate="yes" xml:space="preserve">
          <source>This will work because the trait uses the dynamic backend, so there is no check at compile time that the</source>
          <target state="translated">트레이 트는 동적 백엔드를 사용하기 때문에 작동하므로 컴파일 타임에</target>
        </trans-unit>
        <trans-unit id="9684655d265f76f6794c2535f3c5435ed56bf620" translate="yes" xml:space="preserve">
          <source>This works in index overlay mode or chop mode. Chop mode reduces possibility of memory leak but causes a few more buffer copies as it chops up the buffer.</source>
          <target state="translated">이것은 인덱스 오버레이 모드 또는 절단 모드에서 작동합니다. 촙 모드는 메모리 누수 가능성을 줄이지 만 버퍼를 쪼개서 몇 개의 더 많은 버퍼 복사본을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="fa841ff5c73baba91ecf22e939500e4ef9753f2d" translate="yes" xml:space="preserve">
          <source>This wrapper is created by an iterator invoked for &lt;code&gt;ResultSetMetaData&lt;/code&gt;.</source>
          <target state="translated">이 랩퍼는 &lt;code&gt;ResultSetMetaData&lt;/code&gt; 에 대해 호출 된 반복기에 의해 작성됩니다 .</target>
        </trans-unit>
        <trans-unit id="a8d8e5ebb5306666d97e8f4d60a655322327b29c" translate="yes" xml:space="preserve">
          <source>This writer instance</source>
          <target state="translated">이 작가 인스턴스</target>
        </trans-unit>
        <trans-unit id="1627afe6110225ce1b710cb71c8e30de59c46e04" translate="yes" xml:space="preserve">
          <source>ThreadInterrupt</source>
          <target state="translated">ThreadInterrupt</target>
        </trans-unit>
        <trans-unit id="5ba6001ddad0afa6bedcbf89257a453c96db6d8e" translate="yes" xml:space="preserve">
          <source>Threads executing a script should call this method after execution completes in order to unregister the consoleId.</source>
          <target state="translated">스크립트를 실행하는 스레드는 consoleId 등록을 취소하기 위해 실행이 완료된 후이 메서드를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="9700df244e193f82c2422193709daa9612417b91" translate="yes" xml:space="preserve">
          <source>Threads executing a script should call this method at the start of execution in order to set the id of the console that is hosting the thread of execution.</source>
          <target state="translated">스크립트를 실행하는 스레드는 실행 스레드를 호스팅하는 콘솔의 ID를 설정하기 위해 실행 시작시이 메서드를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="b6aa53a6553dd1012b52cb24cf6d99327ccc2433" translate="yes" xml:space="preserve">
          <source>Threads executing a script should call this method at the start of execution in order to set the id of the console that is hosting the thread of execution. This should be called prior to any output that is generated. The consoleId will be passed to the callback.</source>
          <target state="translated">스크립트를 실행하는 스레드는 실행 스레드를 호스팅하는 콘솔의 ID를 설정하기 위해 실행 시작시이 메서드를 호출해야합니다. 생성되는 출력 전에 호출해야합니다. consoleId는 콜백에 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="d40b5bc0c1174fe4550ca03af2b533f9dd80c864" translate="yes" xml:space="preserve">
          <source>Throwable any exception causes by the delegate</source>
          <target state="translated">델리게이트에 의해 발생하는 모든 예외 발생 가능</target>
        </trans-unit>
        <trans-unit id="48a221292fcd772ca45977769854c5db23d37587" translate="yes" xml:space="preserve">
          <source>Throwable if caused by the delegate or the method</source>
          <target state="translated">대리자 또는 메서드에 의해 발생하는 경우 Throwable</target>
        </trans-unit>
        <trans-unit id="0a7ed54d269e2bcdd9ac8558f557ce7bf145194e" translate="yes" xml:space="preserve">
          <source>Throwable if the coercion fails</source>
          <target state="translated">강제가 실패 할 경우 던질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="63836017c3eee811b51a17a66f892bbf8e59b4e8" translate="yes" xml:space="preserve">
          <source>Throwable if the type casting fails</source>
          <target state="translated">유형 캐스팅이 실패하면 Throwable</target>
        </trans-unit>
        <trans-unit id="f25d9ac4cfffc25a38a73cfa965f24bc61ef2d38" translate="yes" xml:space="preserve">
          <source>Thrown to indicate a problem with command execution.</source>
          <target state="translated">명령 실행에 문제가 있음을 나타 내기 위해 발생합니다.</target>
        </trans-unit>
        <trans-unit id="18a271ae68bdb591e3e74ae9096304097b1ebfe7" translate="yes" xml:space="preserve">
          <source>Thrown when compilation fails from source errors.</source>
          <target state="translated">소스 오류로 인해 컴파일이 실패하면 발생합니다.</target>
        </trans-unit>
        <trans-unit id="1cfd969c295138ad4bee91a22fd184cce7fc6f92" translate="yes" xml:space="preserve">
          <source>Thrown when configuration data is invalid.</source>
          <target state="translated">구성 데이터가 유효하지 않을 때 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d46d8f47549af7ea9fd8f97fcd322d446872468b" translate="yes" xml:space="preserve">
          <source>Thrown when trying to parse the AST</source>
          <target state="translated">AST를 구문 분석하려고 할 때 발생합니다.</target>
        </trans-unit>
        <trans-unit id="5bdb9461cfb05d97efe47e7584c38f602962d42f" translate="yes" xml:space="preserve">
          <source>Throws a &lt;code&gt;GroovyRuntimeException&lt;/code&gt;, because an attribute can have no children.</source>
          <target state="translated">예외 &lt;code&gt;GroovyRuntimeException&lt;/code&gt; 를 속성이 아이를 가질 수 있기 때문에.</target>
        </trans-unit>
        <trans-unit id="df4aad88c6c997d3aad912bc6308a4bd72d82b3c" translate="yes" xml:space="preserve">
          <source>Throws a &lt;code&gt;GroovyRuntimeException&lt;/code&gt;, because attributes can have no children.</source>
          <target state="translated">속성은 자식을 가질 수 없기 때문에 &lt;code&gt;GroovyRuntimeException&lt;/code&gt; 을 던집니다 .</target>
        </trans-unit>
        <trans-unit id="a507380e5d85260f661f8e9234c0784dc4c0b738" translate="yes" xml:space="preserve">
          <source>Throws a &lt;code&gt;GroovyRuntimeException&lt;/code&gt;, because it is not implemented yet.</source>
          <target state="translated">예외 &lt;code&gt;GroovyRuntimeException&lt;/code&gt; 을 아직 구현되어 있지 않으므로,.</target>
        </trans-unit>
        <trans-unit id="9a8af8e628848b0d026013670f73312eecbf12d5" translate="yes" xml:space="preserve">
          <source>Throws a &lt;code&gt;GroovyRuntimeException&lt;/code&gt;, because this method is not implemented yet.</source>
          <target state="translated">이 메서드가 아직 구현되지 않았기 때문에 &lt;code&gt;GroovyRuntimeException&lt;/code&gt; 을 throw합니다 .</target>
        </trans-unit>
        <trans-unit id="9d8c171cdeca22bbbdf93f41123f22371802eb40" translate="yes" xml:space="preserve">
          <source>Throws an exception if value is null.</source>
          <target state="translated">값이 null 인 경우 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="26bae70d31fe3986701fd480e494338dafcf7e7b" translate="yes" xml:space="preserve">
          <source>TimeDatumDuration represents a time period which results from an arithmetic operation between a TimeDuration object and a DatumDuration object</source>
          <target state="translated">TimeDatumDuration은 TimeDuration 개체와 DatumDuration 개체 간의 산술 연산으로 인해 발생하는 기간을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="0b67f206da456a717ae790b1d848abf5f51ac23a" translate="yes" xml:space="preserve">
          <source>TimedInterrupt</source>
          <target state="translated">TimedInterrupt</target>
        </trans-unit>
        <trans-unit id="9dee407a47ac74cfe60f0a59a2fa358e1c736c10" translate="yes" xml:space="preserve">
          <source>To be able to use a Closure in this way with your own subclass, you need to provide a doCall method with any signature you want to. This ensures that &lt;a href=&quot;#getMaximumNumberOfParameters()&quot;&gt;getMaximumNumberOfParameters()&lt;/a&gt; and &lt;a href=&quot;#getParameterTypes()&quot;&gt;getParameterTypes()&lt;/a&gt; will work too without any additional code. If no doCall method is provided a closure must be used in its long form like</source>
          <target state="translated">이러한 방식으로 자신의 하위 클래스와 함께 Closure를 사용할 수 있으려면 원하는 서명과 함께 doCall 메서드를 제공해야합니다. 이렇게하면 추가 코드 없이도 &lt;a href=&quot;#getMaximumNumberOfParameters()&quot;&gt;getMaximumNumberOfParameters ()&lt;/a&gt; 및 &lt;a href=&quot;#getParameterTypes()&quot;&gt;getParameterTypes ()&lt;/a&gt; 가 작동합니다. doCall 메소드가 제공되지 않으면 클로저는 다음과 같은 긴 형식으로 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="ae78b4c71b65ec8ffe2b34198d00cff67b05c3f8" translate="yes" xml:space="preserve">
          <source>To change from the default PosixParser to the GnuParser, set this to false.</source>
          <target state="translated">기본 PosixParser에서 GnuParser로 변경하려면이를 false로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="5e656136ae006b0c24b672af6526ddaa6d1e5aa2" translate="yes" xml:space="preserve">
          <source>To change from the default PosixParser to the GnuParser, set this to false. Ignored if the parser is explicitly set.</source>
          <target state="translated">기본 PosixParser에서 GnuParser로 변경하려면이를 false로 설정하십시오. 구문 분석기가 명시 적으로 설정된 경우 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="49df1716527867d00399bad2b6c719d501c33b27" translate="yes" xml:space="preserve">
          <source>To define a new static method on a class, as the static modifier is already used for instance methods, you must use another helper class, for example:</source>
          <target state="translated">인스턴스 메서드에 이미 static 한정자가 사용되었으므로 클래스에 새 정적 메서드를 정의하려면 다른 도우미 클래스를 사용해야합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="04465546fecb72214ae62aeebed6a22db51f9e3f" translate="yes" xml:space="preserve">
          <source>To describe generic type signature see &lt;a href=&quot;#getGenericsTypes()&quot;&gt;getGenericsTypes()&lt;/a&gt; and &lt;a href=&quot;#setGenericsTypes(org.codehaus.groovy.ast.GenericsType)&quot;&gt;setGenericsTypes(GenericsType[])&lt;/a&gt;. These methods are not proxied, they describe the type signature used at the point of declaration or the type signatures provided by the class. If the type signatures provided by the class are needed, then a call to &lt;a href=&quot;#redirect()&quot;&gt;redirect()&lt;/a&gt; will help.</source>
          <target state="translated">일반 유형 서명을 설명하려면 &lt;a href=&quot;#getGenericsTypes()&quot;&gt;getGenericsTypes ()&lt;/a&gt; 및 &lt;a href=&quot;#setGenericsTypes(org.codehaus.groovy.ast.GenericsType)&quot;&gt;setGenericsTypes (GenericsType [])을&lt;/a&gt; 참조하십시오 . 이러한 메서드는 프록시되지 않으며 선언 지점에서 사용되는 형식 서명이나 클래스에서 제공하는 형식 서명을 설명합니다. 클래스에서 제공하는 유형 서명이 필요한 경우 &lt;a href=&quot;#redirect()&quot;&gt;redirect ()&lt;/a&gt; 호출 이 도움이 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="a71bcc6f4e9acdf334dafc387d6f2ededb0ceb18" translate="yes" xml:space="preserve">
          <source>To determine the resulting type of for example a=exp1+exp2 we look at the conditions &lt;a href=&quot;#isIntCategory(org.codehaus.groovy.ast.ClassNode)&quot;&gt;isIntCategory(ClassNode)&lt;/a&gt;, &lt;a href=&quot;#isLongCategory(org.codehaus.groovy.ast.ClassNode)&quot;&gt;isLongCategory(ClassNode)&lt;/a&gt;, &lt;a href=&quot;#isBigIntCategory(org.codehaus.groovy.ast.ClassNode)&quot;&gt;isBigIntCategory(ClassNode)&lt;/a&gt;, &lt;a href=&quot;#isDoubleCategory(org.codehaus.groovy.ast.ClassNode)&quot;&gt;isDoubleCategory(ClassNode)&lt;/a&gt; and &lt;a href=&quot;#isBigDecCategory(org.codehaus.groovy.ast.ClassNode)&quot;&gt;isBigDecCategory(ClassNode)&lt;/a&gt; in that order. The first case applying to exp1 and exp2 is defining the result type of the expression.</source>
          <target state="translated">예를 들어 a = exp1 + exp2의 결과 유형을 결정하기 위해 해당 순서로 &lt;a href=&quot;#isIntCategory(org.codehaus.groovy.ast.ClassNode)&quot;&gt;isIntCategory (ClassNode)&lt;/a&gt; , &lt;a href=&quot;#isLongCategory(org.codehaus.groovy.ast.ClassNode)&quot;&gt;isLongCategory (ClassNode)&lt;/a&gt; , &lt;a href=&quot;#isBigIntCategory(org.codehaus.groovy.ast.ClassNode)&quot;&gt;isBigIntCategory (ClassNode)&lt;/a&gt; , &lt;a href=&quot;#isDoubleCategory(org.codehaus.groovy.ast.ClassNode)&quot;&gt;isDoubleCategory (ClassNode)&lt;/a&gt; 및 &lt;a href=&quot;#isBigDecCategory(org.codehaus.groovy.ast.ClassNode)&quot;&gt;isBigDecCategory (ClassNode) 조건&lt;/a&gt; 을 살펴 봅니다 . exp1 및 exp2에 적용되는 첫 번째 경우는 표현식의 결과 유형을 정의하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="0cf3e0c3fa39ff0a63581fd2d8eabe2c54f7d7c2" translate="yes" xml:space="preserve">
          <source>To disallow clustered POSIX short options, set this to false.</source>
          <target state="translated">클러스터 된 POSIX 단축 옵션을 허용하지 않으려면이를 false로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="d84e8414c604dc7bdab48ac84bc0173b446cccb6" translate="yes" xml:space="preserve">
          <source>To enable the INDEX_OVERLAY parser do this: &lt;code&gt;&lt;pre&gt;
             parser = new JsonSlurper().setType(JsonParserType.INDEX_OVERLAY);
 &lt;/pre&gt;&lt;/code&gt; INDEX_OVERLAY should be your parser of choice.  CHAR_BUFFER is the parser of choice due to element of least surprise and need to mimic existing Slurper behavior as much as possible.  Use CHARACTER_SOURCE for large file parsing.  Use LAX if you want to enable relaxed JSON parsing, i.e., allow comments, no quote strings, etc.  Use CHAR_BUFFER for a non-fancy but super fast parser.</source>
          <target state="translated">INDEX_OVERLAY 파서를 활성화하려면 다음을 수행하십시오. &lt;code&gt;&lt;pre&gt; parser = new JsonSlurper().setType(JsonParserType.INDEX_OVERLAY); &lt;/pre&gt;&lt;/code&gt; INDEX_OVERLAY는 선택한 파서 여야합니다. CHAR_BUFFER는 최소한의 놀라움 요소와 가능한 한 기존 Slurper 동작을 모방해야하는 요소로 인해 선택되는 파서입니다. 대용량 파일 구문 분석에는 CHARACTER_SOURCE를 사용하십시오. 완화 된 JSON 구문 분석을 사용하려면 LAX를 사용하십시오. 즉, 주석을 허용하고, 인용 문자열을 사용하지 않는 등의 기능을 사용합니다. 멋지지 않지만 초고속 구문 분석기에는 CHAR_BUFFER를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1a2c835ff254c38312b96fe00f897cf43548e925" translate="yes" xml:space="preserve">
          <source>To generate a class that has all the fields and methods, except that fields are not initialized and methods are empty. It's intended for being used as a place holder during code generation of reference to the &quot;this&quot; class itself.</source>
          <target state="translated">필드가 초기화되지 않고 메서드가 비어 있다는 점을 제외하고 모든 필드와 메서드가있는 클래스를 생성합니다. &quot;this&quot;클래스 자체에 대한 참조 코드 생성 중에 자리 표시 자로 사용하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="d1bad6efba1bb98fa88518f8af7c07634a968b27" translate="yes" xml:space="preserve">
          <source>To illustrate the 'canEqual' implementation style (see http://www.artima.com/lejava/articles/equality.html for further details), consider this class:</source>
          <target state="translated">'canEqual'구현 스타일을 설명하려면 (자세한 내용은 http://www.artima.com/lejava/articles/equality.html 참조) 다음 클래스를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="4252d428a5850d62550271b505b254f6cf7f42fa" translate="yes" xml:space="preserve">
          <source>To make the programmer's intention clear, a leading closure must have an explicit parameter list, and must not follow a previous statement separated only by newlines.</source>
          <target state="translated">프로그래머의 의도를 명확히하기 위해 선행 클로저에는 명시적인 매개 변수 목록이 있어야하며 줄 바꿈으로 만 구분 된 이전 명령문을 따라서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="18a732b33852b42ca6172bd0448f6656a1b40a25" translate="yes" xml:space="preserve">
          <source>To make your web application more groovy, you must add the GroovyServlet to your application's web.xml configuration using any mapping you like, so long as it follows the pattern *.* (more on this below). Here is the web.xml entry:</source>
          <target state="translated">웹 애플리케이션을 더 멋지게 만들려면 *. * 패턴을 따르는 한 원하는 매핑을 사용하여 애플리케이션의 web.xml 구성에 GroovyServlet을 추가해야합니다 (아래에서 자세히 설명). 다음은 web.xml 항목입니다.</target>
        </trans-unit>
        <trans-unit id="df2b52c6aed66519f9ac1df059a81d578aeda822" translate="yes" xml:space="preserve">
          <source>To support caches whose values are convertable, e.g. SoftReference, WeakReference</source>
          <target state="translated">값을 변환 할 수있는 캐시 지원 (예 : SoftReference, WeakReference)</target>
        </trans-unit>
        <trans-unit id="a8142b65797fa28cedc5dc48d5514829b45daa1c" translate="yes" xml:space="preserve">
          <source>To swap two children of node t...</source>
          <target state="translated">노드 t의 두 자식을 바꾸려면 ...</target>
        </trans-unit>
        <trans-unit id="54d612333f0f3b60c6d5d444a98e028684b44f66" translate="yes" xml:space="preserve">
          <source>To understand how this annotation works, it is convenient to think in terms of the source code it replaces. The following is a typical usage of this annotation from Groovy:</source>
          <target state="translated">이 주석이 작동하는 방식을 이해하려면 대체하는 소스 코드의 관점에서 생각하는 것이 편리합니다. 다음은 Groovy에서이 주석의 일반적인 사용법입니다.</target>
        </trans-unit>
        <trans-unit id="672b408cd52386f1fdb677bb1d160d4843fdd50f" translate="yes" xml:space="preserve">
          <source>To use this annotation, declare &lt;code&gt;@WithReadLock&lt;/code&gt; on your method. The method may be either an instance method or a static method. The resulting method will allow multiple threads to read the information at the same time. However, if some other method obtains a write lock, then this method will force callers to wait until the write is complete.</source>
          <target state="translated">이 주석을 사용하려면 메서드에서 &lt;code&gt;@WithReadLock&lt;/code&gt; 을 선언 하세요. 메서드는 인스턴스 메서드 또는 정적 메서드 일 수 있습니다. 결과 메서드를 사용하면 여러 스레드가 동시에 정보를 읽을 수 있습니다. 그러나 다른 메서드가 쓰기 잠금을 획득하면이 메서드는 호출자가 쓰기가 완료 될 때까지 기다리도록합니다.</target>
        </trans-unit>
        <trans-unit id="408ca7d8869745df42ef2f21e0079feb1a1816da" translate="yes" xml:space="preserve">
          <source>To use this annotation, declare &lt;code&gt;@WithWriteLock&lt;/code&gt; on your method. The method may be either an instance method or a static method. The resulting method will allow only one thread access to the method at a time, and will wait to access the method until any other read locks have been released.</source>
          <target state="translated">이 주석을 사용하려면 메서드에서 &lt;code&gt;@WithWriteLock&lt;/code&gt; 을 선언 하세요. 메서드는 인스턴스 메서드 또는 정적 메서드 일 수 있습니다. 결과 메서드는 한 번에 하나의 스레드 만 메서드에 액세스 할 수 있도록 허용하고 다른 읽기 잠금이 해제 될 때까지 메서드에 액세스하기를 기다립니다.</target>
        </trans-unit>
        <trans-unit id="66dc57021002f767eae421f31bb08c23cf61cda1" translate="yes" xml:space="preserve">
          <source>To use this, simply drop this as an UndoableEditListener into your document, and then create actions to call undo/redo as needed (checking can undo/redo first, of course).</source>
          <target state="translated">이것을 사용하려면 이것을 UndoableEditListener로 문서에 놓은 다음 필요에 따라 실행 취소 / 다시 실행을 호출하는 작업을 만듭니다 (물론 먼저 실행 취소 / 다시 실행 가능).</target>
        </trans-unit>
        <trans-unit id="1dbc7385badbfda548fb27e2160a33cf32c0f545" translate="yes" xml:space="preserve">
          <source>ToString</source>
          <target state="translated">ToString</target>
        </trans-unit>
        <trans-unit id="a1141eb96836ed960ae0be11b9889597388b5df0" translate="yes" xml:space="preserve">
          <source>Token</source>
          <target state="translated">Token</target>
        </trans-unit>
        <trans-unit id="e0c3629e55b41e2db5fbb0a85ee630d50c5f24e6" translate="yes" xml:space="preserve">
          <source>Tokenizes a CharSequence (with a whitespace as the delimiter).</source>
          <target state="translated">구분 기호로 공백을 사용하여 CharSequence를 토큰 화합니다.</target>
        </trans-unit>
        <trans-unit id="2231746f51d7a571de24160666f7ad22ecfde7b0" translate="yes" xml:space="preserve">
          <source>Tokenizes a CharSequence based on the given CharSequence.</source>
          <target state="translated">지정된 CharSequence를 기반으로 CharSequence를 토큰 화합니다.</target>
        </trans-unit>
        <trans-unit id="d41c373bd3209304cbb0063177ce1ca25699e86c" translate="yes" xml:space="preserve">
          <source>Tokenizes a CharSequence based on the given CharSequence. Each character in the CharSequence is a separate delimiter.</source>
          <target state="translated">지정된 CharSequence를 기반으로 CharSequence를 토큰 화합니다. CharSequence의 각 문자는 별도의 구분 기호입니다.</target>
        </trans-unit>
        <trans-unit id="485cb59327cdc97f9fcc7fa55be0ce061a14c52f" translate="yes" xml:space="preserve">
          <source>Tokenizes a CharSequence based on the given character delimiter.</source>
          <target state="translated">지정된 문자 구분 기호를 기반으로 CharSequence를 토큰 화합니다.</target>
        </trans-unit>
        <trans-unit id="5a5de83e916ee2b9432bcb92b7e2005bd1e5ef28" translate="yes" xml:space="preserve">
          <source>Tool for replacing Statement objects in an AST by other Statement instances. Within</source>
          <target state="translated">AST의 Statement 객체를 다른 Statement 인스턴스로 대체하는 도구입니다. 이내에</target>
        </trans-unit>
        <trans-unit id="588b4294158d46f90691b1bf904a493ef8d55ac0" translate="yes" xml:space="preserve">
          <source>Tool for replacing VariableExpression instances in an AST by other VariableExpression instances. Regardless of a real change taking place in nested expressions, all considered expression (trees) will be replaced. This could be optimized to accelerate compilation. Within</source>
          <target state="translated">AST의 VariableExpression 인스턴스를 다른 VariableExpression 인스턴스로 대체하기위한 도구입니다. 중첩 된 표현식에서 발생하는 실제 변경에 관계없이 고려되는 모든 표현식 (트리)이 대체됩니다. 이것은 컴파일을 가속화하기 위해 최적화 될 수 있습니다. 이내에</target>
        </trans-unit>
        <trans-unit id="56dacb287f4c62a5a9b284103c5bcf37de43bd22" translate="yes" xml:space="preserve">
          <source>Transform a Number into a BigDecimal</source>
          <target state="translated">숫자를 BigDecimal로 변환</target>
        </trans-unit>
        <trans-unit id="75087708c5e192b76776de9231f4bdd4121d7c9d" translate="yes" xml:space="preserve">
          <source>Transform a Number into a Double</source>
          <target state="translated">숫자를 Double로 변환</target>
        </trans-unit>
        <trans-unit id="fdfa0d2bebdc4ee600b548d1025de9e80e5de167" translate="yes" xml:space="preserve">
          <source>Transform a Number into a Float</source>
          <target state="translated">숫자를 부동 소수점으로 변환</target>
        </trans-unit>
        <trans-unit id="8afa9cff8f1437db8f9e5691222663d945c48c70" translate="yes" xml:space="preserve">
          <source>Transform a Number into a Long</source>
          <target state="translated">숫자를 Long으로 변환</target>
        </trans-unit>
        <trans-unit id="704fec8a8db922e2c8d520f696a6f84dc14fcbab" translate="yes" xml:space="preserve">
          <source>Transform a Number into an Integer</source>
          <target state="translated">숫자를 정수로 변환</target>
        </trans-unit>
        <trans-unit id="a33959f3483a097a48c7190c690a46fda36c9fd4" translate="yes" xml:space="preserve">
          <source>Transform this Number into a BigInteger.</source>
          <target state="translated">이 숫자를 BigInteger로 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="ce80138408bf6567796f4205749d52de2f970726" translate="yes" xml:space="preserve">
          <source>Transform this number to a the given type, using the 'as' operator.</source>
          <target state="translated">'as'연산자를 사용하여이 숫자를 주어진 유형으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="8c2e783edf40ce711ae38ce11942a2604caf8fe4" translate="yes" xml:space="preserve">
          <source>Transform this number to a the given type, using the 'as' operator. The following types are supported in addition to the default &lt;a href=&quot;#asType(java.lang.Object,%20java.lang.Class)&quot;&gt;asType(java.lang.Object, java.lang.Class)&lt;/a&gt;:</source>
          <target state="translated">'as'연산자를 사용하여이 숫자를 주어진 유형으로 변환합니다. 기본 &lt;a href=&quot;#asType(java.lang.Object,%20java.lang.Class)&quot;&gt;asType (java.lang.Object, java.lang.Class)&lt;/a&gt; 외에 다음 유형이 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="cea34fcac18efd885ddc98b2577cd88c5a73f15d" translate="yes" xml:space="preserve">
          <source>Transform try-with-resources to try-catch-finally Reference JLS &quot;14.20.3. try-with-resources&quot;(https://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html)</source>
          <target state="translated">try-with-resources를 try-catch-finally로 변환 참조 JLS &quot;14.20.3. try-with-resources&quot;(https://docs.oracle.com/javase/specs/jls/se7/html/jls-14. html)</target>
        </trans-unit>
        <trans-unit id="7960856c0ba211b73df403412344f06db89bd6b5" translate="yes" xml:space="preserve">
          <source>Transformation for declarative dependency management.</source>
          <target state="translated">선언적 종속성 관리를위한 변환.</target>
        </trans-unit>
        <trans-unit id="48e7ea13738a956cf9a246610c3cfa5186e22258" translate="yes" xml:space="preserve">
          <source>Transformation logic is as follows:</source>
          <target state="translated">변환 논리는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4341a9b741eae81b6d97565b411d0789627597e5" translate="yes" xml:space="preserve">
          <source>Transformation to capture ASTBuilder from code statements.</source>
          <target state="translated">코드 문에서 ASTBuilder를 캡처하기위한 변환.</target>
        </trans-unit>
        <trans-unit id="e56e67ffd03b49008e6e665e6793fdd44cfd5f77" translate="yes" xml:space="preserve">
          <source>Transformer for VariableExpression the bytecode backend wouldn't be able to handle otherwise.</source>
          <target state="translated">Transformer for VariableExpression은 바이트 코드 백엔드가 달리 처리 할 수 ​​없습니다.</target>
        </trans-unit>
        <trans-unit id="e730aa47b7d76fc72bb495e889fb04c90842cb5b" translate="yes" xml:space="preserve">
          <source>Transforms a CharSequence representing a URI into a URI object.</source>
          <target state="translated">URI를 나타내는 CharSequence를 URI 개체로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="8c4ad73d4c10ff940bca864699f0b2a9e090114d" translate="yes" xml:space="preserve">
          <source>Transforms a CharSequence representing a URL into a URL object.</source>
          <target state="translated">URL을 나타내는 CharSequence를 URL 객체로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="51e13b042786715960d25cf5bda33adc16241833" translate="yes" xml:space="preserve">
          <source>Transforms a String representing a URI into a URI object.</source>
          <target state="translated">URI를 나타내는 문자열을 URI 객체로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="6b2563f190778bf99b5156666ff307191ec8b187" translate="yes" xml:space="preserve">
          <source>Transforms a String representing a URL into a URL object.</source>
          <target state="translated">URL을 나타내는 문자열을 URL 객체로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="f4391e0126dbec6ce6beaed97d141a638b19e035" translate="yes" xml:space="preserve">
          <source>Transforms an instance-style Groovy class or interface to become a static-style conventional Groovy category.</source>
          <target state="translated">인스턴스 스타일 Groovy 클래스 또는 인터페이스를 정적 ​​스타일의 기존 Groovy 범주로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="74c93e1a18d02a78651d4da9a362d83575847daa" translate="yes" xml:space="preserve">
          <source>Transforms each character from this reader by passing it to the given closure.</source>
          <target state="translated">지정된 클로저에 전달하여이 판독기의 각 문자를 변환합니다.</target>
        </trans-unit>
        <trans-unit id="946b22cd936894528d42359813ebb489a8900711" translate="yes" xml:space="preserve">
          <source>Transforms each character from this reader by passing it to the given closure. The Closure should return each transformed character, which will be passed to the Writer. The reader and writer will both be closed before this method returns.</source>
          <target state="translated">지정된 클로저에 전달하여이 판독기의 각 문자를 변환합니다. 클로저는 변환 된 각 문자를 반환해야하며, 이는 작성자에게 전달됩니다. 이 메서드가 반환되기 전에 독자와 기록기가 모두 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="ca5ca47cf3fcae21660588b52955ea1cb9a25d38" translate="yes" xml:space="preserve">
          <source>Transforms expressions in a whole class. Transformed expressions are usually not visited.</source>
          <target state="translated">전체 클래스의 식을 변환합니다. 변형 된 표현은 일반적으로 방문하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="04ca0888dfa75521337c10358f25733f5a26803a" translate="yes" xml:space="preserve">
          <source>Transforms generics types from an old context to a new context using the given spec.</source>
          <target state="translated">지정된 사양을 사용하여 제네릭 유형을 이전 컨텍스트에서 새 컨텍스트로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="125f06da78b277105f3dae57a31bb6f4bd83120a" translate="yes" xml:space="preserve">
          <source>Transforms generics types from an old context to a new context using the given spec. This method assumes all generics types will be placeholders. WARNING: The resulting generics types may or may not be placeholders after the transformation.</source>
          <target state="translated">지정된 사양을 사용하여 제네릭 유형을 이전 컨텍스트에서 새 컨텍스트로 변환합니다. 이 메서드는 모든 제네릭 유형이 자리 표시 자라고 가정합니다. 경고 : 결과 제네릭 유형은 변환 후 자리 표시자가 될 수도 있고 아닐 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="3e373a6d4e6c34d2d7486347c403f053d525c949" translate="yes" xml:space="preserve">
          <source>Transforms the element to its text equivalent.</source>
          <target state="translated">요소를 해당 텍스트로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="9186fe8c9174fb8b74acbf8348d0b811a8f98b53" translate="yes" xml:space="preserve">
          <source>Transforms the element to its text equivalent. (The resulting string does not contain a xml declaration. Use &lt;code&gt;XmlUtil.serialize(element)&lt;/code&gt; if you need the declaration.)</source>
          <target state="translated">요소를 해당 텍스트로 변환합니다. (결과 문자열에는 xml 선언이 포함되어 있지 않습니다. 선언 이 필요하면 &lt;code&gt;XmlUtil.serialize(element)&lt;/code&gt; 사용하십시오 .)</target>
        </trans-unit>
        <trans-unit id="a8e60b37e7dde3e4194b139163da056dea3569ee" translate="yes" xml:space="preserve">
          <source>Transforms the given expression into another expression</source>
          <target state="translated">주어진 표현식을 다른 표현식으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="9fbabd7bc1f2cb236e0e1a83b5f19b19054bb5cc" translate="yes" xml:space="preserve">
          <source>Transforms the lines from a reader with a Closure and write them to a writer.</source>
          <target state="translated">클로저를 사용하여 독자의 대사를 변환하고 작가에게 씁니다.</target>
        </trans-unit>
        <trans-unit id="a3cc073c6659b903b23ae17aa0f835dc12ee87b7" translate="yes" xml:space="preserve">
          <source>Transforms the lines from a reader with a Closure and write them to a writer. Both Reader and Writer are closed after the operation.</source>
          <target state="translated">클로저를 사용하여 독자의 대사를 변환하고 작가에게 씁니다. Reader와 Writer는 모두 작업 후 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="9a995e5ef7aacba2ad853df64c8bb348b0202741" translate="yes" xml:space="preserve">
          <source>Transforms the list of expressions</source>
          <target state="translated">표현식 목록을 변환합니다.</target>
        </trans-unit>
        <trans-unit id="e161a35599cc6fbe49d548e6da46ca31cbd6238f" translate="yes" xml:space="preserve">
          <source>Transforms the list of expressions, and checks that all transformed expressions have the given type.</source>
          <target state="translated">표현식 목록을 변환하고 변환 된 모든 표현식에 지정된 유형이 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="e7b84d2e49b044c067f5f567a24f055813ad4e9e" translate="yes" xml:space="preserve">
          <source>Translates GLS-defined unicode escapes into characters. Throws an exception in the event of an invalid unicode escape being detected.</source>
          <target state="translated">GLS 정의 유니 코드 이스케이프를 문자로 변환합니다. 유효하지 않은 유니 코드 이스케이프가 감지되면 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="b741e298c29d39f477884d4dc9807ea5f4cada64" translate="yes" xml:space="preserve">
          <source>Translates a CharSequence by replacing characters from the sourceSet with characters from replacementSet.</source>
          <target state="translated">sourceSet의 문자를 replacementSet의 문자로 대체하여 CharSequence를 변환합니다.</target>
        </trans-unit>
        <trans-unit id="09aca1bf0e2d4e80e63a2d48ca8617036cb75afb" translate="yes" xml:space="preserve">
          <source>Translates a CharSequence by replacing characters from the sourceSet with characters from replacementSet. If the first character from sourceSet appears in the CharSequence, it will be replaced with the first character from replacementSet. If the second character from sourceSet appears in the CharSequence, it will be replaced with the second character from replacementSet. and so on for all provided replacement characters.</source>
          <target state="translated">sourceSet의 문자를 replacementSet의 문자로 대체하여 CharSequence를 변환합니다. sourceSet의 첫 번째 문자가 CharSequence에 나타나면 replacementSet의 첫 번째 문자로 대체됩니다. sourceSet의 두 번째 문자가 CharSequence에 나타나면 replacementSet의 두 번째 문자로 대체됩니다. 제공된 모든 대체 문자에 대해 등등.</target>
        </trans-unit>
        <trans-unit id="92dc8a1ee80e43d89bea268e6ae612caaca739ad" translate="yes" xml:space="preserve">
          <source>Translates all return statements into an invocation of the next iteration. This can be either - &quot;continue LOOP_LABEL&quot;: Outside closures - &quot;throw LOOP_EXCEPTION&quot;: Inside closures Moreover, before adding the recur statement the iteration parameters (originally the method args) are set to their new value. To prevent variable aliasing parameters will be copied into temp vars before they are changes so that their current iteration value can be used when setting other params. There's probably place for optimizing the amount of variable copying being done, e.g. parameters that are only handed through must not be copied at all.</source>
          <target state="translated">모든 return 문을 다음 반복 호출로 변환합니다. 이것은 다음 중 하나 일 수 있습니다.- &quot;continue LOOP_LABEL&quot;: 외부 클로저- &quot;throw LOOP_EXCEPTION&quot;: 내부 클로저 더욱이 recur 문을 추가하기 전에 반복 매개 변수 (원래 메소드 args)가 새 값으로 설정됩니다. 변수 별칭 지정 매개 변수는 변경되기 전에 임시 변수에 복사되어 다른 매개 변수를 설정할 때 현재 반복 값을 사용할 수 있습니다. 수행되는 변수 복사의 양을 최적화 할 수있는 장소가있을 것입니다. 예를 들어 전달 만되는 매개 변수는 전혀 복사하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="021a9c5204e723d5ba811642a1a4b1439beb288b" translate="yes" xml:space="preserve">
          <source>Transposes an array of lists.</source>
          <target state="translated">목록 배열을 전치합니다.</target>
        </trans-unit>
        <trans-unit id="429780a1e73a202f30225cbaf4c90b2dce8934cb" translate="yes" xml:space="preserve">
          <source>Transposes the given lists.</source>
          <target state="translated">주어진 목록을 전치합니다.</target>
        </trans-unit>
        <trans-unit id="b8a38462faed0a17e8baa0245ca9c03be6b4e9ae" translate="yes" xml:space="preserve">
          <source>Transposes the given lists. So, &lt;code&gt;transpose([['a', 'b'], [1, 2]])&lt;/code&gt; is &lt;code&gt;[['a', 1], ['b', 2]]&lt;/code&gt; and &lt;code&gt;transpose([['a', 'b', 'c']])&lt;/code&gt; is &lt;code&gt;[['a'], ['b'], ['c']]&lt;/code&gt;.</source>
          <target state="translated">주어진 목록을 전치합니다. 따라서 &lt;code&gt;transpose([['a', 'b'], [1, 2]])&lt;/code&gt; 는 &lt;code&gt;[['a', 1], ['b', 2]]&lt;/code&gt; 이고 &lt;code&gt;transpose([['a', 'b', 'c']])&lt;/code&gt; 는 &lt;code&gt;[['a'], ['b'], ['c']]&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="99c47fa9a7558d82327483ea5054e3e6383cbc79" translate="yes" xml:space="preserve">
          <source>Traverse through each byte of the specified stream.</source>
          <target state="translated">지정된 스트림의 각 바이트를 통과합니다.</target>
        </trans-unit>
        <trans-unit id="c5d8f9af5847ee724893448b9d5fa7541795182d" translate="yes" xml:space="preserve">
          <source>Traverse through each byte of the specified stream. The stream is closed after the closure returns.</source>
          <target state="translated">지정된 스트림의 각 바이트를 통과합니다. 클로저가 반환 된 후 스트림이 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="996669841a320d36b4aad1deb6af08e0fd844def" translate="yes" xml:space="preserve">
          <source>Traverse through each byte of this Byte array.</source>
          <target state="translated">이 Byte 배열의 각 바이트를 순회합니다.</target>
        </trans-unit>
        <trans-unit id="04c86ec9a24eff3934331f579c6d60d1da02aa4a" translate="yes" xml:space="preserve">
          <source>Traverse through each byte of this Byte array. Alias for each.</source>
          <target state="translated">이 Byte 배열의 각 바이트를 순회합니다. 각각의 별칭.</target>
        </trans-unit>
        <trans-unit id="6c3aa0b8a02c28636201d0dfb2403a36e3d85448" translate="yes" xml:space="preserve">
          <source>Traverse through each byte of this File</source>
          <target state="translated">이 파일의 각 바이트를 통과합니다.</target>
        </trans-unit>
        <trans-unit id="29a22984c2b61b5e32afb9def3dad1dc36bc16d5" translate="yes" xml:space="preserve">
          <source>Traverse through each byte of this Path</source>
          <target state="translated">이 경로의 각 바이트를 통과합니다.</target>
        </trans-unit>
        <trans-unit id="3d9335e15f30c94a0aafae125e7d93b707e864ef" translate="yes" xml:space="preserve">
          <source>Traverse through each byte of this byte array.</source>
          <target state="translated">이 바이트 배열의 각 바이트를 통과합니다.</target>
        </trans-unit>
        <trans-unit id="0561516e26a5da855f11507b860fa252c436b7b9" translate="yes" xml:space="preserve">
          <source>Traverse through each byte of this byte array. Alias for each.</source>
          <target state="translated">이 바이트 배열의 각 바이트를 통과합니다. 각각의 별칭.</target>
        </trans-unit>
        <trans-unit id="a783be42b8da9ecb46270df5a59e0ba9e8d9a458" translate="yes" xml:space="preserve">
          <source>Traverse through each the specified stream reading bytes into a buffer and calling the 2 parameter closure with this buffer and the number of bytes.</source>
          <target state="translated">지정된 각 스트림을 통해 버퍼로 바이트를 읽고이 버퍼와 바이트 수를 사용하여 2 개의 매개 변수 클로저를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="aab6a9d603e441470de1d569dd77ecfac658eb17" translate="yes" xml:space="preserve">
          <source>Traverse through the bytes of this File, bufferLen bytes at a time.</source>
          <target state="translated">이 파일의 바이트, bufferLen 바이트를 한 번에 순회합니다.</target>
        </trans-unit>
        <trans-unit id="3e1cf372721992fe2926cc83b69f959d7bd2006f" translate="yes" xml:space="preserve">
          <source>Traverse through the bytes of this Path, bufferLen bytes at a time.</source>
          <target state="translated">이 Path의 바이트를 한 번에 bufferLen 바이트로 순회합니다.</target>
        </trans-unit>
        <trans-unit id="d0ad88a0f3eb390c71f172220bdda59a2a5ab420" translate="yes" xml:space="preserve">
          <source>Treats the object as iterable, iterating through the values it represents and returns the first non-null result obtained from calling the closure, otherwise returns null.</source>
          <target state="translated">개체를 반복 가능한 것으로 처리하고, 개체가 나타내는 값을 반복하고, 클로저 호출에서 얻은 null이 아닌 첫 번째 결과를 반환하고, 그렇지 않으면 null을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e84d18ada755e7814a8d6439cf825065a96df38b" translate="yes" xml:space="preserve">
          <source>Treats the object as iterable, iterating through the values it represents and returns the first non-null result obtained from calling the closure, otherwise returns the defaultResult.</source>
          <target state="translated">개체를 반복 가능한 것으로 취급하고, 개체가 나타내는 값을 반복하고, 클로저 호출에서 얻은 null이 아닌 첫 번째 결과를 반환하고, 그렇지 않으면 defaultResult를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0696e8157d8699799b3999c6eb1fabb904c4c139" translate="yes" xml:space="preserve">
          <source>Tries to find a Groovy class.</source>
          <target state="translated">Groovy 클래스를 찾으려고합니다.</target>
        </trans-unit>
        <trans-unit id="952daa819d9537d04bbc338ca0e0c8a831de1923" translate="yes" xml:space="preserve">
          <source>Tries to get a property on null, which will always fail</source>
          <target state="translated">항상 실패하는 null 속성을 가져 오려고합니다.</target>
        </trans-unit>
        <trans-unit id="295f3bb1757d24f8e167e2b799f22ce60f7cb9ff" translate="yes" xml:space="preserve">
          <source>Tries to invoke a method on null, which will always fail</source>
          <target state="translated">항상 실패하는 null에서 메서드를 호출하려고합니다.</target>
        </trans-unit>
        <trans-unit id="166edb1cc77cf8106f58faf32fb0770b0e0584bf" translate="yes" xml:space="preserve">
          <source>Tries to set a property on null, which will always fail</source>
          <target state="translated">항상 실패하는 null 속성을 설정하려고합니다.</target>
        </trans-unit>
        <trans-unit id="9a443858613c621bd821729bded23e1b74f9e9c4" translate="yes" xml:space="preserve">
          <source>TriggerBinding</source>
          <target state="translated">TriggerBinding</target>
        </trans-unit>
        <trans-unit id="a815ee7c3fc31b1a2daca13ac84e5e82ffdec49a" translate="yes" xml:space="preserve">
          <source>True after the first &lt;a href=&quot;#configure(org.codehaus.groovy.control.CompilerConfiguration)&quot;&gt;configure(CompilerConfiguration)&lt;/a&gt; operation.</source>
          <target state="translated">첫 번째 &lt;a href=&quot;#configure(org.codehaus.groovy.control.CompilerConfiguration)&quot;&gt;구성 (CompilerConfiguration)&lt;/a&gt; 작업 후 참 입니다.</target>
        </trans-unit>
        <trans-unit id="7a50a0d3473534648a785002a622dc00ec7fed92" translate="yes" xml:space="preserve">
          <source>True for say, a command-line arg, false for instance inside a String.</source>
          <target state="translated">예를 들어, 명령 줄 인수의 경우 참이고 문자열 내부의 경우 거짓입니다.</target>
        </trans-unit>
        <trans-unit id="78090b40546e47d7d9a00258e9d716df13573ec7" translate="yes" xml:space="preserve">
          <source>True if it has</source>
          <target state="translated">사실이라면</target>
        </trans-unit>
        <trans-unit id="cab70c24c32d26d3c97db69fd55a4a7981318d89" translate="yes" xml:space="preserve">
          <source>True if it is</source>
          <target state="translated">사실이라면</target>
        </trans-unit>
        <trans-unit id="ffe4a32b2f41b406dadd81d8fcbfaac2a1a799d3" translate="yes" xml:space="preserve">
          <source>True if phase is finished</source>
          <target state="translated">단계가 완료되면 참</target>
        </trans-unit>
        <trans-unit id="1139dcd8b7f2592bc1b3d43bc0da4df8ece1b270" translate="yes" xml:space="preserve">
          <source>True if the method exists otherwise null</source>
          <target state="translated">메서드가 존재하면 True, 그렇지 않으면 null</target>
        </trans-unit>
        <trans-unit id="a1718bc26fc6d410571d3c06dc4709ce65732b01" translate="yes" xml:space="preserve">
          <source>True it exists as a MetaProperty</source>
          <target state="translated">사실 그것은 MetaProperty로 존재합니다</target>
        </trans-unit>
        <trans-unit id="45b4fd12cd3f795f3363a118bf4609a2ee47bbd9" translate="yes" xml:space="preserve">
          <source>Truncate the value</source>
          <target state="translated">값 자르기</target>
        </trans-unit>
        <trans-unit id="25fdf25b9c6828ec9ae054e3aa642d48b53f6138" translate="yes" xml:space="preserve">
          <source>Try to get the parameterized type from the cache.</source>
          <target state="translated">캐시에서 매개 변수화 된 유형을 가져 오십시오.</target>
        </trans-unit>
        <trans-unit id="c99e2c6513ddec51ae0ca8ad752695367b1cdabc" translate="yes" xml:space="preserve">
          <source>Try to get the parameterized type from the cache. If no cached item found, cache and return the result of &lt;a href=&quot;#findParameterizedType(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.ClassNode,%20boolean)&quot;&gt;findParameterizedType(ClassNode, ClassNode, boolean)&lt;/a&gt;</source>
          <target state="translated">캐시에서 매개 변수화 된 유형을 가져 오십시오. 캐시 된 항목이 없으면 &lt;a href=&quot;#findParameterizedType(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.ClassNode,%20boolean)&quot;&gt;findParameterizedType (ClassNode, ClassNode, boolean)&lt;/a&gt; 의 결과를 캐시하고 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a58f064ab3ce1f5dabc1ae356de0953319b012aa" translate="yes" xml:space="preserve">
          <source>Try to get the value from cache.</source>
          <target state="translated">캐시에서 값을 가져 오십시오.</target>
        </trans-unit>
        <trans-unit id="68897e926ac90054d98971011f7d41b7f45ad78a" translate="yes" xml:space="preserve">
          <source>Try to get the value from cache. If not found, create the value by MemoizeCache.ValueProvider and put it into the cache, at last return the value.</source>
          <target state="translated">캐시에서 값을 가져 오십시오. 찾을 수없는 경우 MemoizeCache.ValueProvider로 값을 만들고 캐시에 넣고 마지막으로 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="35997c6eeee8b256845d51fc8dbaed48cd32845b" translate="yes" xml:space="preserve">
          <source>Try to get the value from cache. If not found, create the value by MemoizeCache.ValueProvider and put it into the cache, at last return the value. The operation is completed atomically.</source>
          <target state="translated">캐시에서 값을 가져 오십시오. 찾을 수없는 경우 MemoizeCache.ValueProvider로 값을 만들고 캐시에 넣고 마지막으로 값을 반환합니다. 작업은 원자 적으로 완료됩니다.</target>
        </trans-unit>
        <trans-unit id="a861a89ea5af181022b4982635ec3e234afa25d6" translate="yes" xml:space="preserve">
          <source>Try to get the value from cache. If not found, create the value by ValueProvider and put it into the cache, at last return the value.</source>
          <target state="translated">캐시에서 값을 가져 오십시오. 찾을 수없는 경우 ValueProvider로 값을 만들고 캐시에 넣고 마지막으로 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="82a9a14bc3424a18fd57527e12266d273e1583c6" translate="yes" xml:space="preserve">
          <source>Tuple-style constructors are provided which allow you to set properties in the same order as they are defined.</source>
          <target state="translated">정의 된 것과 동일한 순서로 속성을 설정할 수있는 튜플 스타일 생성자가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="49b24d1713c61deb4c6017a8b4300a3d9787ef70" translate="yes" xml:space="preserve">
          <source>TupleConstructor</source>
          <target state="translated">TupleConstructor</target>
        </trans-unit>
        <trans-unit id="f1e4d25a4df31ed4ef545cff5a8adc582e6afafa" translate="yes" xml:space="preserve">
          <source>Turn a single bytes into two hex character representation.</source>
          <target state="translated">단일 바이트를 2 개의 16 진 문자 표현으로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="49ecf28e6e75c79c1bae68b1e67567f955594445" translate="yes" xml:space="preserve">
          <source>Turns a CharSequence into a regular expression Pattern.</source>
          <target state="translated">CharSequence를 정규식 패턴으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="8b5ecabf89feaced0f10cca1b75eaa9a0b97df26" translate="yes" xml:space="preserve">
          <source>Turns a String into a regular expression pattern</source>
          <target state="translated">문자열을 정규식 패턴으로 변환</target>
        </trans-unit>
        <trans-unit id="3cb3e98eb8e2e135669cad19465a644a497dbc69" translate="yes" xml:space="preserve">
          <source>Turns a single nibble into an ascii HEX digit.</source>
          <target state="translated">단일 니블을 ASCII HEX 숫자로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="fc0116a7d5ea421c8f159d2d2e5939674baf46e7" translate="yes" xml:space="preserve">
          <source>Turns debugging operation on or off.</source>
          <target state="translated">디버깅 작업을 켜거나 끕니다.</target>
        </trans-unit>
        <trans-unit id="076d1494a2d76e286cf6135673904d9758e1080c" translate="yes" xml:space="preserve">
          <source>Turns expressions of the form ConstantExpression(40) + ConstantExpression(2) into the simplified ConstantExpression(42) at compile time.</source>
          <target state="translated">컴파일 타임에 ConstantExpression (40) + ConstantExpression (2) 형식의 식을 단순화 된 ConstantExpression (42)으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="8d1e9f9c38f85c5a13ed1c5bca55c9086304104a" translate="yes" xml:space="preserve">
          <source>Turns on buffer chopping for index overlay.</source>
          <target state="translated">인덱스 오버레이에 대한 버퍼 자르기를 켭니다.</target>
        </trans-unit>
        <trans-unit id="3f23af4f80e9b71be153d01230a09c00c5c672d0" translate="yes" xml:space="preserve">
          <source>Turns on buffer lazy chopping for index overlay.</source>
          <target state="translated">인덱스 오버레이에 대해 버퍼 지연 자르기를 켭니다.</target>
        </trans-unit>
        <trans-unit id="e1c5309cc34e3066bcf45513f134f1241f72fe9e" translate="yes" xml:space="preserve">
          <source>Turns on strict type checking for property (or field) types.</source>
          <target state="translated">속성 (또는 필드) 유형에 대한 엄격한 유형 검사를 켭니다.</target>
        </trans-unit>
        <trans-unit id="3d779ac01b14791cd0e067402c2123f63a7e4449" translate="yes" xml:space="preserve">
          <source>Turns on strict type checking for property (or field) types. In strict mode, such types must also implement Serializable or Externalizable. If your properties have interface types that don't implement Serializable but all the concrete implementations do, or the type is of a non-Serializable class but the property will be null at runtime, then your instances will still be serializable but you can't turn on strict checking.</source>
          <target state="translated">속성 (또는 필드) 유형에 대한 엄격한 유형 검사를 켭니다. 엄격 모드에서 이러한 유형은 Serializable 또는 Externalizable도 구현해야합니다. 속성에 Serializable을 구현하지 않지만 모든 구체적인 구현이 수행하는 인터페이스 유형이 있거나 유형이 직렬화 가능하지 않은 클래스이지만 런타임에 속성이 null 인 경우 인스턴스는 여전히 직렬화 가능하지만 할 수 없습니다. 엄격한 검사를 켭니다.</target>
        </trans-unit>
        <trans-unit id="08c48a070a3135fc74b3a17e75f60854a7234b16" translate="yes" xml:space="preserve">
          <source>Turns parameter metadata generation on or off.</source>
          <target state="translated">매개 변수 메타 데이터 생성을 켜거나 끕니다.</target>
        </trans-unit>
        <trans-unit id="b81c265314f57d870e505aab6df53bdf75a8baae" translate="yes" xml:space="preserve">
          <source>Turns verbose operation on or off.</source>
          <target state="translated">자세한 작업을 켜거나 끕니다.</target>
        </trans-unit>
        <trans-unit id="e0c6ba0cfcda861420249d80571c19efdc4d8424" translate="yes" xml:space="preserve">
          <source>Two names joined by a dot.</source>
          <target state="translated">점으로 연결된 두 개의 이름.</target>
        </trans-unit>
        <trans-unit id="098c0d36c4892c1fc2efff04f6208744a900cc92" translate="yes" xml:space="preserve">
          <source>Two names joined by a dot. If the base name is empty, returns the name unchanged.</source>
          <target state="translated">점으로 연결된 두 개의 이름. 기본 이름이 비어 있으면 변경되지 않은 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="ee41554ee4cbeca5f1934c97a4780476ff68846b" translate="yes" xml:space="preserve">
          <source>Type Params</source>
          <target state="translated">유형 매개 변수</target>
        </trans-unit>
        <trans-unit id="b1aa7266eb245f092e14535461141a1679d4fedb" translate="yes" xml:space="preserve">
          <source>Type conversion method for null.</source>
          <target state="translated">null에 대한 형식 변환 방법입니다.</target>
        </trans-unit>
        <trans-unit id="0a44ab19456d90ec0420ca2845ee74b8f5a46aef" translate="yes" xml:space="preserve">
          <source>TypeCheckingMode.PASS</source>
          <target state="translated">TypeCheckingMode.PASS</target>
        </trans-unit>
        <trans-unit id="00d0c03442b1e588fce6ec02279c1bca5abe8087" translate="yes" xml:space="preserve">
          <source>TypeChooser</source>
          <target state="translated">TypeChooser</target>
        </trans-unit>
        <trans-unit id="93b9e289e2842469d001eccf7ad5d79f3c302dc9" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Types</target>
        </trans-unit>
        <trans-unit id="a37965c6d74cd91c105a5af7d17ac48c2ae2ac45" translate="yes" xml:space="preserve">
          <source>Typical usage</source>
          <target state="translated">일반적인 사용법</target>
        </trans-unit>
        <trans-unit id="3d6f10497ff38408e44e31ef895db7d767331945" translate="yes" xml:space="preserve">
          <source>Typical usage (emulate partial arg processing of unix command: ls -alt *.groovy):</source>
          <target state="translated">일반적인 사용법 (unix 명령의 부분적인 arg 처리를 에뮬레이트 : ls -alt * .groovy) :</target>
        </trans-unit>
        <trans-unit id="9f433de3a09f2cf5cd13a827c57725457d725e39" translate="yes" xml:space="preserve">
          <source>Typical usage:</source>
          <target state="translated">일반적인 사용법 :</target>
        </trans-unit>
        <trans-unit id="5c52c57fea68cb05fc06ca7ba3b0557361b8e05b" translate="yes" xml:space="preserve">
          <source>Typical usages:</source>
          <target state="translated">일반적인 용도 :</target>
        </trans-unit>
        <trans-unit id="95eabe80298982d4b1ba57fa25a7982210efe573" translate="yes" xml:space="preserve">
          <source>Typically involves using Ant from the command-line and an Ant build file such as:</source>
          <target state="translated">일반적으로 명령 줄에서 Ant를 사용하고 다음과 같은 Ant 빌드 파일을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="c1b02a795a625c7526382b68b7c26e2eb021c032" translate="yes" xml:space="preserve">
          <source>Typically this is used from the groovy command line agent but it can be invoked programmatically. To run this program from the command line please refer to the command line documentation at &lt;a href=&quot;http://docs.groovy-lang.org/docs/latest/html/documentation/#_running_groovy_from_the_commandline&quot;&gt; Running Groovy from the commandline&lt;/a&gt;.</source>
          <target state="translated">일반적으로 이것은 groovy 명령 줄 에이전트에서 사용되지만 프로그래밍 방식으로 호출 할 수 있습니다. 명령 줄에서이 프로그램을 실행하려면 명령 줄에서 &lt;a href=&quot;http://docs.groovy-lang.org/docs/latest/html/documentation/#_running_groovy_from_the_commandline&quot;&gt;Groovy 실행&lt;/a&gt; 의 명령 줄 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="87aa37a3b20fd0c1d8d14c9ac653383c9dfb2129" translate="yes" xml:space="preserve">
          <source>Typing information for the CST system. The types here are those used by CSTNode, Token, and Reduction.</source>
          <target state="translated">CST 시스템에 대한 정보를 입력합니다. 여기에있는 유형은 CSTNode, Token 및 Reduction에서 사용하는 유형입니다.</target>
        </trans-unit>
        <trans-unit id="8e8d047a800c253985b7924ff1dd2669bf3267b5" translate="yes" xml:space="preserve">
          <source>URI for the URL of this source.</source>
          <target state="translated">이 소스의 URL에 대한 URI입니다.</target>
        </trans-unit>
        <trans-unit id="d19c4c6839e353f6795add33970264512f8d2711" translate="yes" xml:space="preserve">
          <source>URI for the file of this source.</source>
          <target state="translated">이 소스의 파일에 대한 URI입니다.</target>
        </trans-unit>
        <trans-unit id="156b2656ed25a5b4d682b68f8fb3cfda1fe850ce" translate="yes" xml:space="preserve">
          <source>URISyntaxException</source>
          <target state="translated">URISyntaxException</target>
        </trans-unit>
        <trans-unit id="1c554c9c1bd7e994e0f7be208c560c95e7c5f7d5" translate="yes" xml:space="preserve">
          <source>URLClassLoader</source>
          <target state="translated">URLClassLoader</target>
        </trans-unit>
        <trans-unit id="5f2b4388ce038eab842ba31c91e7dead4b75d0aa" translate="yes" xml:space="preserve">
          <source>URLClassLoader.close</source>
          <target state="translated">URLClassLoader.close</target>
        </trans-unit>
        <trans-unit id="ab324df75517998be7784fd59659a7e7d8153f08" translate="yes" xml:space="preserve">
          <source>URLConnection.getInputStream</source>
          <target state="translated">URLConnection.getInputStream</target>
        </trans-unit>
        <trans-unit id="ce814b4c65110973cfd40e7ae6ca322b67161fd8" translate="yes" xml:space="preserve">
          <source>Uncapitalizes a string.</source>
          <target state="translated">문자열의 대문자를 해제합니다.</target>
        </trans-unit>
        <trans-unit id="358d28bfab2b2b73eb26c1322f899192f5ea4faa" translate="yes" xml:space="preserve">
          <source>Undeclare a previously declared bean.</source>
          <target state="translated">이전에 선언 된 빈을 선언 취소합니다.</target>
        </trans-unit>
        <trans-unit id="1a9e4621c04aad4194f937843f9268faae35c192" translate="yes" xml:space="preserve">
          <source>Undefined.CLASS.class</source>
          <target state="translated">Undefined.CLASS.class</target>
        </trans-unit>
        <trans-unit id="c523f082b204b734f4f525f1f94854805519ade2" translate="yes" xml:space="preserve">
          <source>Undefined.EXCEPTION.class</source>
          <target state="translated">Undefined.EXCEPTION.class</target>
        </trans-unit>
        <trans-unit id="b81d784cf2d2b0d82b67553ee287251851828b2b" translate="yes" xml:space="preserve">
          <source>Undefined.STRING</source>
          <target state="translated">Undefined.STRING</target>
        </trans-unit>
        <trans-unit id="0aa0cc9d817a54c59f80352e91065444aedb3875" translate="yes" xml:space="preserve">
          <source>Under the hood the returned template is represented as a four argument closure where the three first arguments are &lt;a href=&quot;../lang/closure#curry&quot;&gt;curried&lt;/a&gt; in while generating the template.</source>
          <target state="translated">후드에서 반환 된 템플릿은 세 첫번째 인수가되는 네 개의 인수 폐쇄로 표현 &lt;a href=&quot;../lang/closure#curry&quot;&gt;카레&lt;/a&gt; 템플릿을 생성하는 동안에.</target>
        </trans-unit>
        <trans-unit id="67ceaed6309311d06fd36e0765d59dd1893542a3" translate="yes" xml:space="preserve">
          <source>Underlying reader from which to read the JSON tokens.</source>
          <target state="translated">JSON 토큰을 읽을 기본 판독기입니다.</target>
        </trans-unit>
        <trans-unit id="f33e0303b36a1e3dcbcbabff9ca8e8a577ea8302" translate="yes" xml:space="preserve">
          <source>Underlying reader from which to read the JSON tokens. This reader is an instance of &lt;code&gt;LineColumnReader&lt;/code&gt;, to keep track of line and column positions.</source>
          <target state="translated">JSON 토큰을 읽을 기본 판독기입니다. 이 리더는 행 및 열 위치를 추적하기위한 &lt;code&gt;LineColumnReader&lt;/code&gt; 의 인스턴스입니다 .</target>
        </trans-unit>
        <trans-unit id="e3ab098fe77f977311d2922fe030a058505734a1" translate="yes" xml:space="preserve">
          <source>Unescapes any Java literals found in the &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt;Writer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 에서 찾은 Java 리터럴 을 &lt;code&gt;Writer&lt;/code&gt; 로 이스케이프 해제합니다 .</target>
        </trans-unit>
        <trans-unit id="7173a50eeb4eea7e9ee80599fe3b630de058c7f5" translate="yes" xml:space="preserve">
          <source>Unescapes any Java literals found in the &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 에서 찾은 모든 Java 리터럴을 이스케이프 해제합니다 .</target>
        </trans-unit>
        <trans-unit id="e7720ead48665ed7307d790485542a1cc5b1159f" translate="yes" xml:space="preserve">
          <source>Unescapes any Java literals found in the &lt;code&gt;String&lt;/code&gt;. For example, it will turn a sequence of &lt;code&gt;'\'&lt;/code&gt; and &lt;code&gt;'n'&lt;/code&gt; into a newline character, unless the &lt;code&gt;'\'&lt;/code&gt; is preceded by another &lt;code&gt;'\'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 에서 찾은 모든 Java 리터럴을 이스케이프 해제합니다 . 예를 들어, &lt;code&gt;'\'&lt;/code&gt; 앞에 다른 &lt;code&gt;'\'&lt;/code&gt; 가 없는 경우 &lt;code&gt;'\'&lt;/code&gt; 및 &lt;code&gt;'n'&lt;/code&gt; 시퀀스를 개행 문자로 바꿉니다 .</target>
        </trans-unit>
        <trans-unit id="73638b542292ef17dc279dad9c58db96a2adfc59" translate="yes" xml:space="preserve">
          <source>Unescapes any JavaScript literals found in the &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt;Writer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 에서 찾은 모든 JavaScript 리터럴 을 &lt;code&gt;Writer&lt;/code&gt; 로 이스케이프 해제합니다 .</target>
        </trans-unit>
        <trans-unit id="8a657986d819bc716f24eb07ea6bc59720443c72" translate="yes" xml:space="preserve">
          <source>Unescapes any JavaScript literals found in the &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 에서 찾은 JavaScript 리터럴을 이스케이프 해제합니다 .</target>
        </trans-unit>
        <trans-unit id="2a5a159b63158b14b346ce6f1de97deac574af9e" translate="yes" xml:space="preserve">
          <source>Unicode files encoded in UTF-16 (low or big endian) or UTF-8 files with a Byte Order Marker are correctly discovered. For UTF-8 files with no BOM, if the buffer is wide enough, the charset should also be discovered.</source>
          <target state="translated">UTF-16 (low 또는 big endian)으로 인코딩 된 유니 코드 파일 또는 Byte Order Marker가있는 UTF-8 파일이 올바르게 검색됩니다. BOM이없는 UTF-8 파일의 경우 버퍼가 충분히 넓은 경우 문자 집합도 검색해야합니다.</target>
        </trans-unit>
        <trans-unit id="0ddaaf780c9933a40a73cd6bf648ad0e2d36f1e3" translate="yes" xml:space="preserve">
          <source>Uninitialized variables</source>
          <target state="translated">초기화되지 않은 변수</target>
        </trans-unit>
        <trans-unit id="907124c8cce546a5106f790303c175c7a2445fd4" translate="yes" xml:space="preserve">
          <source>Unknown keys in the map are ignored, and if the values would not change the object, then the original object is returned. If a method called &lt;code&gt;copyWith&lt;/code&gt; that takes a single parameter already exists in the class, then this setting is ignored, and no method is generated.</source>
          <target state="translated">맵에서 알 수없는 키는 무시되며 값이 객체를 변경하지 않으면 원래 객체가 반환됩니다. 단일 매개 변수를 사용하는 &lt;code&gt;copyWith&lt;/code&gt; 라는 메소드 가 클래스에 이미 존재하는 경우이 설정은 무시되고 메소드가 생성되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="633951cd1cb9dd188d325ff441878d65e53aecff" translate="yes" xml:space="preserve">
          <source>Unlike general impl in superclass, ctors are not intercepted but relayed unless interceptConstruction is set.</source>
          <target state="translated">슈퍼 클래스의 일반 impl과는 달리, ctor는 가로 채지 않지만 interceptConstruction이 설정되지 않으면 릴레이됩니다.</target>
        </trans-unit>
        <trans-unit id="76ccad54f4a2bc4290df16685e98eb453c363a97" translate="yes" xml:space="preserve">
          <source>Unlike the JsonBuilder class which creates a data structure in memory, which is handy in those situations where you want to alter the structure programatically before output, the StreamingJsonBuilder streams to a writer directly without any memory data structure. So if you don't need to modify the structure, and want a more memory-efficient approach, please use the StreamingJsonBuilder.</source>
          <target state="translated">메모리에 데이터 구조를 생성하는 JsonBuilder 클래스와 달리, 출력 전에 프로그래밍 방식으로 구조를 변경하려는 상황에서 편리하지만 StreamingJsonBuilder는 메모리 데이터 구조없이 직접 작성기로 스트리밍합니다. 따라서 구조를 수정할 필요가없고보다 메모리 효율적인 접근 방식을 원한다면 StreamingJsonBuilder를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="94d56c1879d10c11985c086e8308f680797dce7c" translate="yes" xml:space="preserve">
          <source>Unlike the unix tr command, Groovy's tr command supports reverse ranges, e.g.:</source>
          <target state="translated">unix tr 명령과 달리 Groovy의 tr 명령은 역 범위를 지원합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="c1627a2ad8ea0075811203051df1b622ca0c7a22" translate="yes" xml:space="preserve">
          <source>Unmarshal xml data from the given &lt;code&gt;String&lt;/code&gt; to object of the given type.</source>
          <target state="translated">주어진 &lt;code&gt;String&lt;/code&gt; 에서 주어진 유형의 객체로 XML 데이터를 비 정렬 화 합니다.</target>
        </trans-unit>
        <trans-unit id="132d6edf54929096d216bf4e33d5113f94170c57" translate="yes" xml:space="preserve">
          <source>UnsupportedEncodingException if an encoding exception occurs.</source>
          <target state="translated">UnsupportedEncodingException 인코딩 예외가 발생하는 경우.</target>
        </trans-unit>
        <trans-unit id="8dbf375a39011bc12d0d6a27d1d7e4dd5f2350d3" translate="yes" xml:space="preserve">
          <source>UnsupportedEncodingException if the encoding specified is not supported</source>
          <target state="translated">UnsupportedEncodingException 지정된 인코딩이 지원되지 않는 경우</target>
        </trans-unit>
        <trans-unit id="d6b9cc70af4626956ac004db8653f110603b7231" translate="yes" xml:space="preserve">
          <source>UnsupportedOperationException</source>
          <target state="translated">UnsupportedOperationException</target>
        </trans-unit>
        <trans-unit id="6aa5000c9787f2ba744a04a2795e1f9eb366a60a" translate="yes" xml:space="preserve">
          <source>UnsupportedOperationException always</source>
          <target state="translated">UnsupportedOperationException 항상</target>
        </trans-unit>
        <trans-unit id="cdd0e9c1ab204fa196b14063493d356ddaf75df1" translate="yes" xml:space="preserve">
          <source>UnsupportedOperationException as the method is not implemented</source>
          <target state="translated">메서드가 구현되지 않았으므로 UnsupportedOperationException</target>
        </trans-unit>
        <trans-unit id="a8a233ef8621e6fda5efd94939dd7b1851348cbb" translate="yes" xml:space="preserve">
          <source>UnsupportedOperationException is always thrown when this method is invoked.</source>
          <target state="translated">UnsupportedOperationException은이 메서드가 호출 될 때 항상 throw됩니다.</target>
        </trans-unit>
        <trans-unit id="d2274c1226aa2add84d9591bb390d75d3a7aec1a" translate="yes" xml:space="preserve">
          <source>UnsupportedOperationException is always thrown when this method is invoked. The Project properties are immutable.</source>
          <target state="translated">UnsupportedOperationException은이 메서드가 호출 될 때 항상 throw됩니다. 프로젝트 속성은 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="08804dd7f79993a0cb1420f81d15e24a087a0ffc" translate="yes" xml:space="preserve">
          <source>UnsupportedTemporalTypeException if the field is not supported</source>
          <target state="translated">필드가 지원되지 않는 경우 UnsupportedTemporalTypeException</target>
        </trans-unit>
        <trans-unit id="e6c541d24fb2da2a5fe0b80e0b818533c16a1d92" translate="yes" xml:space="preserve">
          <source>Unwraps a &lt;a href=&quot;../../../../../groovy/lang/groovyruntimeexception&quot;&gt;GroovyRuntimeException&lt;/a&gt;.</source>
          <target state="translated">펼쳤다 &lt;a href=&quot;../../../../../groovy/lang/groovyruntimeexception&quot;&gt;GroovyRuntimeException을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3d23c5e24d475e2a1477925371bebbe724868823" translate="yes" xml:space="preserve">
          <source>Unwraps a &lt;a href=&quot;../../../../../groovy/lang/groovyruntimeexception&quot;&gt;GroovyRuntimeException&lt;/a&gt;. This method is called by the handle to unwrap internal exceptions of the runtime.</source>
          <target state="translated">펼쳤다 &lt;a href=&quot;../../../../../groovy/lang/groovyruntimeexception&quot;&gt;GroovyRuntimeException을&lt;/a&gt; . 이 메서드는 런타임의 내부 예외를 풀기 위해 핸들에 의해 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="e1025aab317284892442c0e15d899d1f3f04d135" translate="yes" xml:space="preserve">
          <source>Unwraps a &lt;a href=&quot;../../runtime/wrappers/wrapper&quot;&gt;Wrapper&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../runtime/wrappers/wrapper&quot;&gt;Wrapper를&lt;/a&gt; 풉니 다 .</target>
        </trans-unit>
        <trans-unit id="c09e105e6a38154130dba7f39a0c640e803fceec" translate="yes" xml:space="preserve">
          <source>Unwraps a &lt;a href=&quot;../../runtime/wrappers/wrapper&quot;&gt;Wrapper&lt;/a&gt;. This method is called by the handle to unwrap a Wrapper, which we use to force method selection.</source>
          <target state="translated">&lt;a href=&quot;../../runtime/wrappers/wrapper&quot;&gt;Wrapper를&lt;/a&gt; 풉니 다 . 이 메서드는 메서드 선택을 강제하는 데 사용하는 래퍼를 풀기 위해 핸들에 의해 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="29e788b9fef175bbf33e0db9537982ca5309d9e5" translate="yes" xml:space="preserve">
          <source>Updates the designated column with an &lt;code&gt;Object&lt;/code&gt; value.</source>
          <target state="translated">지정된 열을 &lt;code&gt;Object&lt;/code&gt; 값으로 업데이트합니다 .</target>
        </trans-unit>
        <trans-unit id="86be734331bac56942a931a46361eed2259a9771" translate="yes" xml:space="preserve">
          <source>Updates the phase marker on all sources.</source>
          <target state="translated">모든 소스에서 위상 마커를 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="329f4c82f07ee91c3b587240f7ac566ed54ed34c" translate="yes" xml:space="preserve">
          <source>Upon execution of this code:</source>
          <target state="translated">이 코드를 실행하면 :</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="bf7c9f421bb27664d8b9e4f9b5923644d341b24d" translate="yes" xml:space="preserve">
          <source>Usage message would be:</source>
          <target state="translated">사용법 메시지는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7668c9ff68ca4fd9db9c71a4b176fe0b4b9c45bc" translate="yes" xml:space="preserve">
          <source>Usage summary displayed as the first line when &lt;code&gt;cli.usage()&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;cli.usage()&lt;/code&gt; 가 호출 될 때 첫 번째 줄에 사용 요약이 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="2f9068f5f4018cf45879dd5abbe1e0066a29dde4" translate="yes" xml:space="preserve">
          <source>Use #parameterizeType instead</source>
          <target state="translated">대신 #parameterizeType 사용</target>
        </trans-unit>
        <trans-unit id="c33b3d71f3086eab951f7ef18cb9e92ecbe231c3" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#StaticImportVisitor(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.control.SourceUnit)&quot;&gt;StaticImportVisitor(ClassNode,SourceUnit)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#StaticImportVisitor(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.control.SourceUnit)&quot;&gt;StaticImportVisitor (ClassNode, SourceUnit)&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="d191c335a49fae706e02fecbfc5190ad332ac833" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#VOCABULARY&quot;&gt;VOCABULARY&lt;/a&gt; instead.</source>
          <target state="translated">대신 &lt;a href=&quot;#VOCABULARY&quot;&gt;VOCABULARY&lt;/a&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="761ae5cfffd280dc72496219a2be433aa691fe13" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#buildSqlWithIndexedProps(java.lang.String)&quot;&gt;buildSqlWithIndexedProps(String)&lt;/a&gt; instead</source>
          <target state="translated">사용 &lt;a href=&quot;#buildSqlWithIndexedProps(java.lang.String)&quot;&gt;buildSqlWithIndexedProps (문자열)&lt;/a&gt; 대신</target>
        </trans-unit>
        <trans-unit id="65adf15e171242cc61cde9f004fa69166f43ce6d" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#findDGMMethodsByNameAndArguments(java.lang.ClassLoader,%20org.codehaus.groovy.ast.ClassNode,%20java.lang.String,%20org.codehaus.groovy.ast.ClassNode,%20java.util.List)&quot;&gt;findDGMMethodsByNameAndArguments(ClassLoader, ClassNode, String, ClassNode[], List)&lt;/a&gt; instead</source>
          <target state="translated">대신 &lt;a href=&quot;#findDGMMethodsByNameAndArguments(java.lang.ClassLoader,%20org.codehaus.groovy.ast.ClassNode,%20java.lang.String,%20org.codehaus.groovy.ast.ClassNode,%20java.util.List)&quot;&gt;findDGMMethodsByNameAndArguments (ClassLoader, ClassNode, String, ClassNode [], List)를&lt;/a&gt; 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="ee691bb611c640e1b354929b5feb1a99722bc92d" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#findDGMMethodsForClassNode(java.lang.ClassLoader,%20org.codehaus.groovy.ast.ClassNode,%20java.lang.String)&quot;&gt;findDGMMethodsForClassNode(ClassLoader, ClassNode, String)&lt;/a&gt; instead</source>
          <target state="translated">대신 &lt;a href=&quot;#findDGMMethodsForClassNode(java.lang.ClassLoader,%20org.codehaus.groovy.ast.ClassNode,%20java.lang.String)&quot;&gt;findDGMMethodsForClassNode (ClassLoader, ClassNode, String)를&lt;/a&gt; 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="b161911654f75b98aeb3ddcf9ee2c0f1dcbed742" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#findDGMMethodsForClassNode(java.lang.ClassLoader,%20org.codehaus.groovy.ast.ClassNode,%20java.lang.String,%20java.util.TreeSet)&quot;&gt;findDGMMethodsForClassNode(ClassLoader, ClassNode, String, TreeSet)&lt;/a&gt; instead</source>
          <target state="translated">대신 &lt;a href=&quot;#findDGMMethodsForClassNode(java.lang.ClassLoader,%20org.codehaus.groovy.ast.ClassNode,%20java.lang.String,%20java.util.TreeSet)&quot;&gt;findDGMMethodsForClassNode (ClassLoader, ClassNode, String, TreeSet)를&lt;/a&gt; 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="5e85e6dcd31833f2a8db0cc3ca83cd61ea42ee32" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#visitMethod(org.codehaus.groovy.ast.MethodNode)&quot;&gt;visitMethod(MethodNode)&lt;/a&gt; instead.</source>
          <target state="translated">사용 &lt;a href=&quot;#visitMethod(org.codehaus.groovy.ast.MethodNode)&quot;&gt;visitMethod (MethodNode)&lt;/a&gt; 대신.</target>
        </trans-unit>
        <trans-unit id="e4662c555b17dc8b0a98c8b4444245723dfdda21" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../jmx/groovymbean&quot;&gt;GroovyMBean&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../jmx/groovymbean&quot;&gt;GroovyMBean&lt;/a&gt; 사용</target>
        </trans-unit>
        <trans-unit id="28921730658c5d27b44d528ccfdd2669d3f424c2" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../m12n/extensionmodulescanner#MODULE_META_INF_FILE&quot;&gt;ExtensionModuleScanner.MODULE_META_INF_FILE&lt;/a&gt; instead</source>
          <target state="translated">대신 &lt;a href=&quot;../m12n/extensionmodulescanner#MODULE_META_INF_FILE&quot;&gt;ExtensionModuleScanner.MODULE_META_INF_FILE&lt;/a&gt; 을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="10c6e1dbd1c19878326c9b0cbf18ef6a28ff0bc4" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;factorybuildersupport#dispatchNodeCall(java.lang.Object,%20java.lang.Object)&quot;&gt;FactoryBuilderSupport.dispatchNodeCall&lt;/a&gt; instead.</source>
          <target state="translated">대신 &lt;a href=&quot;factorybuildersupport#dispatchNodeCall(java.lang.Object,%20java.lang.Object)&quot;&gt;FactoryBuilderSupport.dispatchNodeCall&lt;/a&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="2b756b1fec64743f117cf4cdf8dd4544afaff442" translate="yes" xml:space="preserve">
          <source>Use BeanUtils.capitalize instead</source>
          <target state="translated">대신 BeanUtils.capitalize를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="16d1de8b221d1537f4b885a3026e5c0d0b7e7282" translate="yes" xml:space="preserve">
          <source>Use Cases:</source>
          <target state="translated">사용 사례:</target>
        </trans-unit>
        <trans-unit id="c1106eefa33fb126c5ee936e3b5b6c0574f4d3c4" translate="yes" xml:space="preserve">
          <source>Use LAX for config files as it allows comments. Use INDEX_OVERLAY for REST calls, WebSocket messages, AJAX, inter process communication, etc. Use CHAR_BUFFER if eager parsing of ints, dates, longs, are appealing. Use CHARACTER_SOURCE if you are dealing with large JSON files over 2MB. INDEX_OVERLAY is highly tuned for object deserialization from JSON.</source>
          <target state="translated">주석을 허용하므로 구성 파일에 LAX를 사용하십시오. REST 호출, WebSocket 메시지, AJAX, 프로세스 간 통신 등에 INDEX_OVERLAY를 사용하십시오. int, 날짜, long의 열성적인 구문 분석이 매력적이면 CHAR_BUFFER를 사용하십시오. 2MB가 넘는 큰 JSON 파일을 처리하는 경우 CHARACTER_SOURCE를 사용하십시오. INDEX_OVERLAY는 JSON의 객체 역 직렬화를 위해 고도로 조정되었습니다.</target>
        </trans-unit>
        <trans-unit id="019bc08bd157e54f314c672862268bb0de89cafe" translate="yes" xml:space="preserve">
          <source>Use collectNested instead</source>
          <target state="translated">대신 collectNested 사용</target>
        </trans-unit>
        <trans-unit id="a3d973ef12f3c1b68ee47dc1e55e189bf974da91" translate="yes" xml:space="preserve">
          <source>Use it like this for batchSize of 20:</source>
          <target state="translated">batchSize 20에 대해 다음과 같이 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="c25719584b0c55f883ce167c1e0c5621ac28771d" translate="yes" xml:space="preserve">
          <source>Use it like this:</source>
          <target state="translated">다음과 같이 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="fc2e1568a76cdd357caf62200510d365a887efa9" translate="yes" xml:space="preserve">
          <source>Use one or more &lt;code&gt;@NamedDelegate&lt;/code&gt; annotations to explicitly identify such parameters as delegate parameters</source>
          <target state="translated">하나 이상의 &lt;code&gt;@NamedDelegate&lt;/code&gt; 주석을 사용하여 이러한 매개 변수를 위임 매개 변수로 명시 적으로 식별합니다.</target>
        </trans-unit>
        <trans-unit id="b57bd68c2c74b653a8d3c85cfce06a70a71098ea" translate="yes" xml:space="preserve">
          <source>Use one or more &lt;code&gt;@NamedParam&lt;/code&gt; annotations to explicitly identify such parameters</source>
          <target state="translated">하나 이상의 &lt;code&gt;@NamedParam&lt;/code&gt; 주석을 사용하여 이러한 매개 변수를 명시 적으로 식별합니다.</target>
        </trans-unit>
        <trans-unit id="c7241b5e894738cb83da0d3c64bcb47e900154eb" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;../test/groovyassert&quot;&gt;GroovyAssert&lt;/a&gt; class instead</source>
          <target state="translated">사용 &lt;a href=&quot;../test/groovyassert&quot;&gt;GroovyAssert의&lt;/a&gt; 대신 클래스를</target>
        </trans-unit>
        <trans-unit id="d07b551d4ed6bf8ea7cc201ceffc1f1b3717d3df" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of asList instead</source>
          <target state="translated">대신 반복 가능한 asList 버전을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="421a6f349c924bea894f04b21efbb52bf70d5400" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of collectEntries instead</source>
          <target state="translated">대신에 collectEntries의 반복 가능한 버전을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="ab3acb515ed84dfcd3dcdcbbbeceed8b40edc280" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of collectMany instead</source>
          <target state="translated">대신에 collectMany의 반복 가능한 버전을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="635659b9365645027a03fdd5e16f6fdf30350a4d" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of collectNested instead</source>
          <target state="translated">대신에 collectNested의 반복 가능한 버전을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="8a1702e0053b79b66d1c7a490b231ebd1ab9ee16" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of combinations instead</source>
          <target state="translated">대신 반복 가능한 조합 버전을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="691ec7ab61b2e1a750ebe922046a99e6388f38b3" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of countBy instead</source>
          <target state="translated">대신 iterable 버전의 countBy 사용</target>
        </trans-unit>
        <trans-unit id="46f9620ab8e19b5a928b68267822923d92335f95" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of eachPermutation instead</source>
          <target state="translated">대신 eachPermutation의 Iterable 버전을 사용하세요.</target>
        </trans-unit>
        <trans-unit id="22f1d4ff5c24984eb0a68c16f9deff49f570d923" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of findResults instead</source>
          <target state="translated">대신 반복 가능한 버전의 findResults를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="1e482d1aa0e64c87d17766deb0fb5b337d56679d" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of flatten instead</source>
          <target state="translated">대신 Iterable 버전의 flatten 사용</target>
        </trans-unit>
        <trans-unit id="2e34c06723b882409274135d479ad6e7f8f08f02" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of groupBy instead</source>
          <target state="translated">대신 반복 가능한 groupBy 버전을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="20c16b13520eaf3eb6e10bc0b1c84a4fb1bb2855" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of join instead</source>
          <target state="translated">대신 반복 가능한 버전의 조인을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="f0fc3c4049c205eca3062c93c0df04bd6a1662a9" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of max instead</source>
          <target state="translated">대신 반복 가능한 max 버전을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="05f12821715d31a7c0b7d28ab48b8f96d424766a" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of min instead</source>
          <target state="translated">대신 반복 가능한 min 버전을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="8cd14230e49eb98758e85a7a45fd6b80d628bf91" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of permutations instead</source>
          <target state="translated">대신 반복 가능한 버전의 순열 사용</target>
        </trans-unit>
        <trans-unit id="becad649595ca66eeacee86d378ccabb6fc46223" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of sort instead</source>
          <target state="translated">대신 Iterable 버전의 정렬을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="cbea34127ff02ac6c374cc402529ffc089215c9a" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of sum instead</source>
          <target state="translated">대신 iterable 버전의 sum을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="fa28ca9c78e328b2c862d4157dd2d3211ab0e20f" translate="yes" xml:space="preserve">
          <source>Use the Iterable version of toList instead</source>
          <target state="translated">대신 toList의 Iterable 버전을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7692ff493b88e534487e3da884fe5f4d554fed63" translate="yes" xml:space="preserve">
          <source>Use the ProxyMetaClass for the given Closure.</source>
          <target state="translated">주어진 클로저에 ProxyMetaClass를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="f7a4a4373b97d7be36a555143a01eb2fe8ee763d" translate="yes" xml:space="preserve">
          <source>Use the ProxyMetaClass for the given Closure. Cares for balanced register/unregister.</source>
          <target state="translated">주어진 클로저에 ProxyMetaClass를 사용하십시오. 균형 잡힌 등록 / 등록 취소를 관리합니다.</target>
        </trans-unit>
        <trans-unit id="e838e1c18c34dce73f2913ab6a498c087d2e713e" translate="yes" xml:space="preserve">
          <source>Use the ProxyMetaClass for the given Closure. Cares for balanced setting/unsetting ProxyMetaClass.</source>
          <target state="translated">주어진 클로저에 ProxyMetaClass를 사용하십시오. 균형 잡힌 설정 / 설정 해제 ProxyMetaClass를 관리합니다.</target>
        </trans-unit>
        <trans-unit id="fb2c5bcc14dbceb109e63a26769be4a061db2ce7" translate="yes" xml:space="preserve">
          <source>Use this exception to mark a method implementation as being deprecated. Use the message to indicate the recommended way of calling the desired functionality. Make throwing this exception the only line in the method implementation, i.e. unlike the JavaDoc deprecated feature there is no relay to the new implementation but an early and deliberate halt of execution (&quot;fail early&quot;). This exception is supposed to be used in the SNAPSHOT releases only. Before release, all references to this exception should be resolved and the according methods removed.</source>
          <target state="translated">이 예외를 사용하여 메소드 구현이 더 이상 사용되지 않음으로 표시하십시오. 메시지를 사용하여 원하는 기능을 호출하는 권장 방법을 나타냅니다. 이 예외를 메소드 구현에서 유일한 행으로 만드십시오. 즉, JavaDoc deprecated 기능과 달리 새 구현에 대한 릴레이가 없지만 조기에 의도적으로 실행이 중지됩니다 ( &quot;조기 실패&quot;). 이 예외는 SNAPSHOT 릴리스에서만 사용됩니다. 릴리스 전에이 예외에 대한 모든 참조를 해결하고 해당 메서드를 제거해야합니다.</target>
        </trans-unit>
        <trans-unit id="b79daf9f913ddc225b954998f828577070db8052" translate="yes" xml:space="preserve">
          <source>Use this method to tell if a variable is used in a closure, like in the following example:</source>
          <target state="translated">이 메서드를 사용하여 다음 예제와 같이 클로저에 변수가 사용되는지 여부를 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="11cc16f6cc3d33a92f0e7a37856cb94c86d26dca" translate="yes" xml:space="preserve">
          <source>Use this when calling a stored procedure that utilizes both output parameters and returns a single ResultSet.</source>
          <target state="translated">두 출력 매개 변수를 모두 활용하고 단일 ResultSet을 리턴하는 스토어드 프로 시저를 호출 할 때 이것을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="ada0ccef28d8e09e8ada17bf5642688db66f4c2c" translate="yes" xml:space="preserve">
          <source>Use this when calling a stored procedure that utilizes both output parameters and returns multiple ResultSets.</source>
          <target state="translated">두 출력 매개 변수를 모두 활용하고 여러 ResultSet를 리턴하는 스토어드 프로 시저를 호출 할 때 이것을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="dccbb537e68f6e74506ce56464d6184e72fa7582" translate="yes" xml:space="preserve">
          <source>Used for &lt;code&gt;break foo&lt;/code&gt; inside a loop to end the execution of the marked loop.</source>
          <target state="translated">표시된 루프의 실행을 종료하기 위해 루프 내부의 &lt;code&gt;break foo&lt;/code&gt; 에 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="800e3de23ddc8db6e55ac21138d1bc1adcbedeb4" translate="yes" xml:space="preserve">
          <source>Used for &lt;code&gt;break foo&lt;/code&gt; inside a loop to end the execution of the marked loop. This method will return the break label of the loop if there is one found for the name. If not, the current break label is returned.</source>
          <target state="translated">표시된 루프의 실행을 종료하기 위해 루프 내부의 &lt;code&gt;break foo&lt;/code&gt; 에 사용됩니다 . 이 메서드는 이름에 대해 발견 된 루프의 중단 레이블을 반환합니다. 그렇지 않은 경우 현재 구분 레이블이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="9c5b0a938efa4340e38a259c1a6e465ec36692ec" translate="yes" xml:space="preserve">
          <source>Used for &lt;code&gt;continue foo&lt;/code&gt; inside a loop to continue the execution of the marked loop.</source>
          <target state="translated">표시된 루프의 실행을 계속하기 위해 루프 내에서 &lt;code&gt;continue foo&lt;/code&gt; 에 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="ac82cfd7809b7eb2e6dfbaee1c23063b26aa6d46" translate="yes" xml:space="preserve">
          <source>Used for &lt;code&gt;continue foo&lt;/code&gt; inside a loop to continue the execution of the marked loop. This method will return the break label of the loop if there is one found for the name. If not, getLabel is used.</source>
          <target state="translated">표시된 루프의 실행을 계속하기 위해 루프 내에서 &lt;code&gt;continue foo&lt;/code&gt; 에 사용됩니다 . 이 메서드는 이름에 대해 발견 된 루프의 중단 레이블을 반환합니다. 그렇지 않은 경우 getLabel이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3db3bfd8e17c1655e0b911ad20a9ba5fd08b5698" translate="yes" xml:space="preserve">
          <source>Used for pretty printing XML content and other XML related utilities.</source>
          <target state="translated">XML 컨텐츠 및 기타 XML 관련 유틸리티를 예쁜 인쇄에 사용합니다.</target>
        </trans-unit>
        <trans-unit id="65a3efef82352e3e31abc7e360d6e0c6378897bb" translate="yes" xml:space="preserve">
          <source>Used in cases where a declaration cannot have commas, or ends with the &quot;in&quot; operator instead of '='.</source>
          <target state="translated">선언에 쉼표를 사용할 수 없거나 '='대신 &quot;in&quot;연산자로 끝나는 경우에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e2583404231b0f00a595efe7c3687d8d1d52096c" translate="yes" xml:space="preserve">
          <source>Used internally - the default value is a marker value indicating that the attribute hasn't been set.</source>
          <target state="translated">내부적으로 사용됨-기본값은 속성이 설정되지 않았 음을 나타내는 마커 값입니다.</target>
        </trans-unit>
        <trans-unit id="23a8a9529a26d562779dfde02c95b5a897eb37f8" translate="yes" xml:space="preserve">
          <source>Used internally - the default value is a marker value indicating that the attribute hasn't been set. Normally set automatically during annotation processing to an automatically created nested helper class which holds serialization information used in pre-compiled scenarios. If set to the collector annotation, re-purposes the annotation itself to become the helper class (legacy approach used in Groovy 2.5 up to 2.5.2).</source>
          <target state="translated">내부적으로 사용됨-기본값은 속성이 설정되지 않았 음을 나타내는 마커 값입니다. 일반적으로 주석 처리 중에 사전 컴파일 된 시나리오에서 사용되는 직렬화 정보를 보유하는 자동 생성 된 중첩 도우미 클래스로 자동 설정됩니다. 콜렉터 어노테이션으로 설정하면 어노테이션 자체가 도우미 클래스가되도록 용도를 변경합니다 (Groovy 2.5에서 최대 2.5.2까지 사용되는 레거시 접근 방식).</target>
        </trans-unit>
        <trans-unit id="f3a40bca2bf49f8b57f6001bb38b31d33451b5b4" translate="yes" xml:space="preserve">
          <source>Used only as a lookahead predicate for nested type definitions.</source>
          <target state="translated">중첩 유형 정의에 대한 미리보기 술어로만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="85c2276aa9db74e5e78028f7210d9abcbe720c11" translate="yes" xml:space="preserve">
          <source>Used only as a lookahead predicate, before diving in and parsing a declaration.</source>
          <target state="translated">선언을 파싱하고 파싱하기 전에 미리보기 조건 자로 만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="2699654ea83274c3ae7589a892f49a80d3fa1412" translate="yes" xml:space="preserve">
          <source>Used only as a lookahead predicate, before diving in and parsing a declaration. A declaration can be unambiguously introduced with &quot;def&quot;, an annotation or a modifier token like &quot;final&quot;. It may also be introduced by a simple identifier whose first character is an uppercase letter, as in {String x}. A declaration can also be introduced with a built in type like 'int' or 'void'. Brackets (array and generic) are allowed, as in {List[] x} or {int[][] y}. Anything else is parsed as a statement of some sort (expression or command).</source>
          <target state="translated">선언을 파싱하고 파싱하기 전에 미리보기 조건 자로 만 사용됩니다. 선언은 &quot;def&quot;, 주석 또는 &quot;final&quot;과 같은 수정 자 토큰을 사용하여 명확하게 도입 될 수 있습니다. 또한 {String x}에서와 같이 첫 번째 문자가 대문자 인 단순 식별자로 도입 될 수 있습니다. 'int'또는 'void'와 같은 기본 제공 유형으로 선언을 도입 할 수도 있습니다. {List [] x} 또는 {int [] [] y}에서와 같이 대괄호 (배열 및 일반)가 허용됩니다. 그 밖의 모든 것은 일종의 문 (표현식 또는 명령)으로 구문 분석됩니다.</target>
        </trans-unit>
        <trans-unit id="16451c37754fb290018b89a27428618ad89c0d23" translate="yes" xml:space="preserve">
          <source>Used to add a repository for resolving Grape dependencies.</source>
          <target state="translated">Grape 종속성을 해결하기위한 저장소를 추가하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="784c080cd600be1323d62f76060e5dc519573d84" translate="yes" xml:space="preserve">
          <source>Used to check if a type is a float or Float.</source>
          <target state="translated">유형이 float인지 Float인지 확인하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="95906340ca3f93b1624029f1f6d515f45f4d4306" translate="yes" xml:space="preserve">
          <source>Used to check if a type is an double or Double.</source>
          <target state="translated">유형이 double인지 Double인지 확인하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b0bf6fba721c89064bf530e8ae2f4a46cc19b0fe" translate="yes" xml:space="preserve">
          <source>Used to check if a type is an int or Integer.</source>
          <target state="translated">유형이 int 또는 Integer인지 확인하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ce9b4549c563701dba683bbf4ea91fa78d9958e6" translate="yes" xml:space="preserve">
          <source>Used to determine if the given predicate closure is valid (i.e. returns &lt;code&gt;true&lt;/code&gt; for all items in this Array).</source>
          <target state="translated">주어진 술어 클로저가 유효한지 결정하는 데 사용됩니다 (즉 ,이 배열의 모든 항목에 대해 &lt;code&gt;true&lt;/code&gt; 를 리턴 함 ).</target>
        </trans-unit>
        <trans-unit id="dafc0cc832dbc0e1ca1a5f988e8d34e6ae5fec68" translate="yes" xml:space="preserve">
          <source>Used to determine if the given predicate closure is valid (i.e. returns &lt;code&gt;true&lt;/code&gt; for all items in this data structure).</source>
          <target state="translated">주어진 술어 클로저가 유효한지 결정하는 데 사용됩니다 (즉 ,이 데이터 구조의 모든 항목에 대해 &lt;code&gt;true&lt;/code&gt; 를 리턴 함 ).</target>
        </trans-unit>
        <trans-unit id="dc41af13741ccefd013d558406224fce54562175" translate="yes" xml:space="preserve">
          <source>Used to determine if the given predicate closure is valid (i.e. returns &lt;code&gt;true&lt;/code&gt; for all items in this data structure). A simple example for a list:</source>
          <target state="translated">주어진 술어 클로저가 유효한지 결정하는 데 사용됩니다 (즉 ,이 데이터 구조의 모든 항목에 대해 &lt;code&gt;true&lt;/code&gt; 를 리턴 함 ). 목록의 간단한 예 :</target>
        </trans-unit>
        <trans-unit id="e7721a87c76faf0cafa1be78cb58598957afcf96" translate="yes" xml:space="preserve">
          <source>Used to determine if the given predicate closure is valid (i.e. returns &lt;code&gt;true&lt;/code&gt; for all items in this iterable).</source>
          <target state="translated">주어진 술어 클로저가 유효한지 결정하는 데 사용됩니다 (즉 ,이 반복 가능한 모든 항목에 대해 &lt;code&gt;true&lt;/code&gt; 를 리턴 함 ).</target>
        </trans-unit>
        <trans-unit id="cd0b9d8402f8516944bb9a0e631a72b5faddd72d" translate="yes" xml:space="preserve">
          <source>Used to determine if the given predicate closure is valid (i.e. returns &lt;code&gt;true&lt;/code&gt; for all items in this iterable). A simple example for a list:</source>
          <target state="translated">주어진 술어 클로저가 유효한지 결정하는 데 사용됩니다 (즉 ,이 반복 가능한 모든 항목에 대해 &lt;code&gt;true&lt;/code&gt; 를 리턴 함 ). 목록의 간단한 예 :</target>
        </trans-unit>
        <trans-unit id="608788190b33b0dfd6eeae47680606e1efa3aa7a" translate="yes" xml:space="preserve">
          <source>Used to determine if the given predicate closure is valid (i.e. returns &lt;code&gt;true&lt;/code&gt; for all items in this iterator).</source>
          <target state="translated">주어진 술어 클로저가 유효한지 결정하는 데 사용됩니다 (즉 ,이 반복기의 모든 항목에 대해 &lt;code&gt;true&lt;/code&gt; 를 리턴 함 ).</target>
        </trans-unit>
        <trans-unit id="2ceaee0bb090f19a081b2b0fb3c6e104e625ebea" translate="yes" xml:space="preserve">
          <source>Used to determine if the given predicate closure is valid (i.e. returns &lt;code&gt;true&lt;/code&gt; for all items in this iterator). A simple example for a list:</source>
          <target state="translated">주어진 술어 클로저가 유효한지 결정하는 데 사용됩니다 (즉 ,이 반복기의 모든 항목에 대해 &lt;code&gt;true&lt;/code&gt; 를 리턴 함 ). 목록의 간단한 예 :</target>
        </trans-unit>
        <trans-unit id="a4ccb78bec6bd13a1f3592500bb1aa085595ea83" translate="yes" xml:space="preserve">
          <source>Used to exclude an indirectly referenced artifact (a transitive dependency) from the classpath.</source>
          <target state="translated">클래스 경로에서 간접적으로 참조 된 아티팩트 (전이 종속성)를 제외하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="97dbdcd42ad77444c4356fdae469876212fa5b70" translate="yes" xml:space="preserve">
          <source>Used to find strings and their ilk Finds the next non-escaped char</source>
          <target state="translated">문자열과 ilk를 찾는 데 사용됩니다. 이스케이프되지 않은 다음 문자를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="055cdb8f1140a20d8dde7d3eaeb9530fa98ec8fc" translate="yes" xml:space="preserve">
          <source>Used to grab the referenced artifact and its dependencies and make it available on the Classpath.</source>
          <target state="translated">참조 된 아티팩트 및 해당 종속성을 가져와 클래스 경로에서 사용할 수 있도록하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="165cc26c289219e4ee15ae9385bc52b4d6192d1b" translate="yes" xml:space="preserve">
          <source>Used to instruct the type checker that the call is a dynamic method call.</source>
          <target state="translated">호출이 동적 메서드 호출임을 유형 검사기에 지시하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4201116127c5ef1741b8f4efd13d2e9fb7550ecd" translate="yes" xml:space="preserve">
          <source>Used to instruct the type checker that the call is a dynamic method call. Calling this method automatically sets the handled flag to true.</source>
          <target state="translated">호출이 동적 메서드 호출임을 유형 검사기에 지시하는 데 사용됩니다. 이 메서드를 호출하면 처리 된 플래그가 자동으로 true로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="87509dbce8fd1343cd7b61930e05e528db8cce19" translate="yes" xml:space="preserve">
          <source>Used to instruct the type checker that the call is a dynamic method call. Calling this method automatically sets the handled flag to true. The expected return type of the dynamic method call is Object.</source>
          <target state="translated">호출이 동적 메서드 호출임을 유형 검사기에 지시하는 데 사용됩니다. 이 메서드를 호출하면 처리 된 플래그가 자동으로 true로 설정됩니다. 동적 메서드 호출의 예상되는 반환 유형은 Object입니다.</target>
        </trans-unit>
        <trans-unit id="f765581ec17b613c3025dc48ba2b191e39a9fb4e" translate="yes" xml:space="preserve">
          <source>Used to look ahead for a constructor</source>
          <target state="translated">생성자를 미리 찾는 데 사용</target>
        </trans-unit>
        <trans-unit id="eb75932fd1166c46a706ed883487d17e7845885e" translate="yes" xml:space="preserve">
          <source>Used to mark a class as being a trait.</source>
          <target state="translated">클래스를 특성으로 표시하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="431b9fc313a7e3ce7cea73dd307896edf2bdd179" translate="yes" xml:space="preserve">
          <source>Used to modify the grape configuration for grab requests.</source>
          <target state="translated">가져 오기 요청에 대한 포도 구성을 수정하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c22d276d8e3c2a07fd35c6d0c38a94e284c99c69" translate="yes" xml:space="preserve">
          <source>Used to provide custom property handling when getting, setting or initializing properties.</source>
          <target state="translated">속성을 가져 오거나 설정하거나 초기화 할 때 사용자 지정 속성 처리를 제공하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="56b492f9ce15d0d8d66b0bc97d5e6ae44620450d" translate="yes" xml:space="preserve">
          <source>Used to represent compiled Groovy scripts. Such scripts may be executed repeatedly by Groovy's &lt;code&gt;ScriptEngine&lt;/code&gt; using the &lt;code&gt;eval&lt;/code&gt; method without reparsing overheads. Adapted from original by Mike Grogan and A. Sundararajan</source>
          <target state="translated">컴파일 된 Groovy 스크립트를 나타내는 데 사용됩니다. 이러한 스크립트는 오버 헤드를 재분석하지 않고 &lt;code&gt;eval&lt;/code&gt; 메서드를 사용하여 Groovy의 &lt;code&gt;ScriptEngine&lt;/code&gt; 에 의해 반복적으로 실행될 수 있습니다 . Mike Grogan과 A. Sundararajan의 원작을 각색했습니다.</target>
        </trans-unit>
        <trans-unit id="3b01da59b69469a42326082268ca108c89c6089e" translate="yes" xml:space="preserve">
          <source>Used to set whether default value processing is enabled (the default) or disabled.</source>
          <target state="translated">기본값 처리를 활성화 (기본값)할지 비활성화할지 설정하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9069fe3b8cb19dea94c6c8439d3cc76ea0b4a127" translate="yes" xml:space="preserve">
          <source>Used to set whether default value processing is enabled (the default) or disabled. By default, every constructor parameter is given a default value. This value will be Java's default for primitive types (zero or false) and null for Objects, unless an initial value is given when declaring the property or field. A consequence of this design is that you can leave off parameters from the right if the default value will suffice. As far as Java interoperability is concerned, Groovy will create additional constructors under the covers representing the constructors with parameters left off, all the way from the constructor with all arguments to the no-arg constructor. However, when set to false, default values are not allowed for properties and fields. Only the constructor containing all arguments will be provided. In particular, a no-arg constructor won't be provided and since this is currently used by Groovy when using named-arguments, the named-argument style won't be available.</source>
          <target state="translated">기본값 처리를 활성화 (기본값)할지 비활성화할지 설정하는 데 사용됩니다. 기본적으로 모든 생성자 매개 변수에는 기본값이 제공됩니다. 이 값은 속성 또는 필드를 선언 할 때 초기 값이 제공되지 않는 한 기본 유형 (0 또는 false)에 대한 Java의 기본값이고 객체에 대해서는 null입니다. 이 디자인의 결과는 기본값으로 충분할 경우 오른쪽에서 매개 변수를 생략 할 수 있다는 것입니다. Java 상호 운용성에 관한 한, Groovy는 모든 인수가있는 생성자에서 인수가없는 생성자까지 매개 변수가 생략 된 생성자를 나타내는 커버 아래에 추가 생성자를 생성합니다. 그러나 false로 설정하면 속성 및 필드에 기본값이 허용되지 않습니다. 모든 인수를 포함하는 생성자 만 제공됩니다. 특히,인수가없는 생성자는 제공되지 않으며 현재 Groovy에서 명명 된 인수를 사용할 때 사용되므로 명명 된 인수 스타일을 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="a886646c331ef07c338114ee226a98b5a6a7b538" translate="yes" xml:space="preserve">
          <source>Used to store the last regex match.</source>
          <target state="translated">마지막 정규식 일치를 저장하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3b62ea0dc7e75426f46d979c6a2c5cd13a3ac161" translate="yes" xml:space="preserve">
          <source>Used when the field is not also &lt;code&gt;@Bindable&lt;/code&gt;.</source>
          <target state="translated">필드가 &lt;code&gt;@Bindable&lt;/code&gt; 이 아닐 때 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="cbccbe2f23cfb90ef6977c08acaf49867835535f" translate="yes" xml:space="preserve">
          <source>Used within the Groovy's AntlrParserPlugin</source>
          <target state="translated">Groovy의 AntlrParserPlugin 내에서 사용</target>
        </trans-unit>
        <trans-unit id="2770ca5abeb65f2508bd81a2133fbc4b06e1a528" translate="yes" xml:space="preserve">
          <source>Useful for finding constants in a string like true, false, etc.</source>
          <target state="translated">true, false 등과 같은 문자열에서 상수를 찾는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="5cee1a645690d4d273b52ec20adc0c25056fc823" translate="yes" xml:space="preserve">
          <source>Useful for handling Lists/Arrays vs normal properties.</source>
          <target state="translated">목록 / 배열 대 일반 속성을 처리하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="a4f0ef60ad77dbdbfa1d65efc98adc9e61e9c0de" translate="yes" xml:space="preserve">
          <source>Useful for plug-in calls to non-default constructors.</source>
          <target state="translated">기본이 아닌 생성자에 대한 플러그인 호출에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="348798742a1fae49e1212f341fdcda044d87bf2b" translate="yes" xml:space="preserve">
          <source>Useful helper method which handles resource management when executing a prepared query which returns a result set.</source>
          <target state="translated">결과 집합을 반환하는 준비된 쿼리를 실행할 때 리소스 관리를 처리하는 유용한 도우미 메서드입니다.</target>
        </trans-unit>
        <trans-unit id="a435decf76a1ff1e8ebaabaa6f126f27107e0360" translate="yes" xml:space="preserve">
          <source>Useful helper method which handles resource management when executing a prepared query which returns a result set. Derived classes of Sql can override &quot;createPreparedQueryCommand&quot; and then call this method to access the ResultSet returned from the provided query.</source>
          <target state="translated">결과 집합을 반환하는 준비된 쿼리를 실행할 때 리소스 관리를 처리하는 유용한 도우미 메서드입니다. Sql의 파생 클래스는 &quot;createPreparedQueryCommand&quot;를 재정의 한 다음이 메서드를 호출하여 제공된 쿼리에서 반환 된 ResultSet에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e2d807f57a30308a6dbf0c6d0ae69ae9c7e167dd" translate="yes" xml:space="preserve">
          <source>Useful helper method which handles resource management when executing a query which returns a result set.</source>
          <target state="translated">결과 집합을 반환하는 쿼리를 실행할 때 리소스 관리를 처리하는 유용한 도우미 메서드입니다.</target>
        </trans-unit>
        <trans-unit id="e26cc105695a67fdc5bfe3c315fee7de317615de" translate="yes" xml:space="preserve">
          <source>Useful helper method which handles resource management when executing a query which returns a result set. Derived classes of Sql can override &quot;createQueryCommand&quot; and then call this method to access the ResultSet returned from the provided query or alternatively can use the higher-level method of Sql which return result sets which are funnelled through this method, e.g. eachRow, query.</source>
          <target state="translated">결과 집합을 반환하는 쿼리를 실행할 때 리소스 관리를 처리하는 유용한 도우미 메서드입니다. 파생 된 Sql 클래스는 &quot;createQueryCommand&quot;를 재정의 한 다음이 메서드를 호출하여 제공된 쿼리에서 반환 된 ResultSet에 액세스하거나이 메서드를 통해 유입 된 결과 집합 (예 : eachRow, query)을 반환하는 Sql의 상위 수준 메서드를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bd4296a216406c3fc55af6ea4c3c83405e244c10" translate="yes" xml:space="preserve">
          <source>Users wanting to customize the configuration process such as adding imports, restricting the language features or apply AST transformations by default should implement this class, then call the &lt;a href=&quot;../compilerconfiguration#addCompilationCustomizers(CompilationCustomizer...)&quot;&gt;CompilerConfiguration.addCompilationCustomizers&lt;/a&gt; method.</source>
          <target state="translated">가져 오기 추가, 언어 기능 제한 또는 기본적으로 AST 변환 적용과 같은 구성 프로세스를 사용자 지정하려는 사용자는이 클래스를 구현 한 다음 &lt;a href=&quot;../compilerconfiguration#addCompilationCustomizers(CompilationCustomizer...)&quot;&gt;CompilerConfiguration.addCompilationCustomizers&lt;/a&gt; 메서드 를 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="458d331b382cc1cc34d12d3a17c263868e9d2253" translate="yes" xml:space="preserve">
          <source>Uses a closure to filter lines from this InputStream and pass them to the given writer.</source>
          <target state="translated">클로저를 사용하여이 InputStream에서 라인을 필터링하고 지정된 작성자에게 전달합니다.</target>
        </trans-unit>
        <trans-unit id="1a39e64d0e3cd88abdc6aebd97914dcdec5101ea" translate="yes" xml:space="preserve">
          <source>Uses a closure to filter lines from this InputStream and pass them to the given writer. The closure will be passed each line as a String, and it should return &lt;code&gt;true&lt;/code&gt; if the line should be passed to the writer.</source>
          <target state="translated">클로저를 사용하여이 InputStream에서 라인을 필터링하고 지정된 작성자에게 전달합니다. 클로저는 각 줄을 문자열 로 전달되며, 해당 줄이 작성자에게 전달되어야하는 경우 &lt;code&gt;true&lt;/code&gt; 를 반환 해야합니다.</target>
        </trans-unit>
        <trans-unit id="54afbf320f2c8c98239f4c1d134aa2d5a4c79e0a" translate="yes" xml:space="preserve">
          <source>Uses a closure to filter lines from this URL and pass them to the given writer.</source>
          <target state="translated">클로저를 사용하여이 URL에서 줄을 필터링하고 지정된 작성자에게 전달합니다.</target>
        </trans-unit>
        <trans-unit id="11a632bffbee43442c8872df6a1cd45e77abe75a" translate="yes" xml:space="preserve">
          <source>Uses a closure to filter lines from this URL and pass them to the given writer. The closure will be passed each line as a String, and it should return &lt;code&gt;true&lt;/code&gt; if the line should be passed to the writer.</source>
          <target state="translated">클로저를 사용하여이 URL에서 줄을 필터링하고 지정된 작성자에게 전달합니다. 클로저는 각 줄을 문자열 로 전달되며, 해당 줄이 작성자에게 전달되어야하는 경우 &lt;code&gt;true&lt;/code&gt; 를 반환 해야합니다.</target>
        </trans-unit>
        <trans-unit id="6e22b683ecd379e41b5796ea563d97e796a7f84a" translate="yes" xml:space="preserve">
          <source>Uses only cloning.</source>
          <target state="translated">복제 만 사용합니다.</target>
        </trans-unit>
        <trans-unit id="7974db1459792f1bf67c06059e3071462a1f396f" translate="yes" xml:space="preserve">
          <source>Uses serialization to clone.</source>
          <target state="translated">직렬화를 사용하여 복제합니다.</target>
        </trans-unit>
        <trans-unit id="feb18d44119bf19b4c192ba0cb78e0193f285163" translate="yes" xml:space="preserve">
          <source>Uses the copy constructor pattern.</source>
          <target state="translated">복사 생성자 패턴을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ce977f29b26b8917852c17980cc51f5d05ce78bc" translate="yes" xml:space="preserve">
          <source>Uses the no-arg constructor followed by property/field copying/cloning.</source>
          <target state="translated">인수가없는 생성자 뒤에 속성 / 필드 복사 / 복제를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e108c638feb0eaa352f100e7b622dac32b8aaa84" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;delegatingscript&quot;&gt;DelegatingScript&lt;/a&gt; as the base class, the code will run as:</source>
          <target state="translated">&lt;a href=&quot;delegatingscript&quot;&gt;DelegatingScript&lt;/a&gt; 를 기본 클래스로 사용 하면 코드가 다음과 같이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="58b0d92bf1fb000cf9252035b590f0bee9b79e86" translate="yes" xml:space="preserve">
          <source>Using add() and removeLast() is similar to push and pop on a Stack where the last item in the list represents the top of the stack.</source>
          <target state="translated">add () 및 removeLast ()를 사용하는 것은 목록의 마지막 항목이 스택의 맨 위를 나타내는 스택에서 푸시 및 팝하는 것과 유사합니다.</target>
        </trans-unit>
        <trans-unit id="37c2dcb268343734205d5c60ca8405175fd92775" translate="yes" xml:space="preserve">
          <source>Utilities for configuring node positions</source>
          <target state="translated">노드 위치 구성을위한 유틸리티</target>
        </trans-unit>
        <trans-unit id="19df075076e8abeb3731cdde7ef2757acf1d2b13" translate="yes" xml:space="preserve">
          <source>Utilities for handling array types</source>
          <target state="translated">어레이 유형 처리를위한 유틸리티</target>
        </trans-unit>
        <trans-unit id="9ac2346ff3c255fec60cd28b00f1652f9127f13e" translate="yes" xml:space="preserve">
          <source>Utilities for handling strings</source>
          <target state="translated">문자열 처리를위한 유틸리티</target>
        </trans-unit>
        <trans-unit id="e8696b2c3bd8c45923377339859c6b2269a22414" translate="yes" xml:space="preserve">
          <source>Utility class for MissingMethodException, MissingPropertyException etc. This class contains methods assisting in ranking and listing probable intended methods/fields when a exception is thrown.</source>
          <target state="translated">MissingMethodException, MissingPropertyException 등을위한 유틸리티 클래스.이 클래스에는 예외가 발생할 때 가능한 의도 된 메서드 / 필드의 순위를 지정하고 나열하는 데 도움이되는 메서드가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="501281871293d57dc0902b0b45b9562b64ec03b5" translate="yes" xml:space="preserve">
          <source>Utility class for working with AnnotatedNodes</source>
          <target state="translated">AnnotatedNodes 작업을위한 유틸리티 클래스</target>
        </trans-unit>
        <trans-unit id="f79e1848b337806904e174a1b2fd24d2d4af1d49" translate="yes" xml:space="preserve">
          <source>Utility class for working with ClassNodes</source>
          <target state="translated">ClassNodes 작업을위한 유틸리티 클래스</target>
        </trans-unit>
        <trans-unit id="16301db20442444355063d30a03c90d8e49515ea" translate="yes" xml:space="preserve">
          <source>Utility class for working with ConstructorNodes</source>
          <target state="translated">ConstructorNodes 작업을위한 유틸리티 클래스</target>
        </trans-unit>
        <trans-unit id="e7036ebe9ef24ccc6897c9eb73d9323cb1bdb99e" translate="yes" xml:space="preserve">
          <source>Utility class for working with MethodNodes</source>
          <target state="translated">MethodNode로 작업하기위한 유틸리티 클래스</target>
        </trans-unit>
        <trans-unit id="a91e264474c4669549714595c47efcd4020fb867" translate="yes" xml:space="preserve">
          <source>Utility class to add return statements.</source>
          <target state="translated">return 문을 추가하는 유틸리티 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="ec5e3165f346f237a49411bbeb28d1ebabf80444" translate="yes" xml:space="preserve">
          <source>Utility class to call methods through reflection, and falls through using the &lt;code&gt;Invoker&lt;/code&gt; to call the method if it fails. The class is particularly useful for Groovy classes implementing &lt;code&gt;GroovyInterceptable&lt;/code&gt;, since it is not possible to call any method from this class, because it is intercepted by the &lt;code&gt;invokeMethod()&lt;/code&gt; method.</source>
          <target state="translated">리플렉션을 통해 메서드를 호출하는 유틸리티 클래스이며 실패 할 경우 &lt;code&gt;Invoker&lt;/code&gt; 를 사용 하여 메서드를 호출합니다. 이 클래스는 &lt;code&gt;invokeMethod()&lt;/code&gt; 메서드에 의해 가로 채기 때문에이 클래스에서 메서드를 호출 할 수 없기 때문에 &lt;code&gt;GroovyInterceptable&lt;/code&gt; 을 구현하는 Groovy 클래스에 특히 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="39c5853f6b3f39b44646d07e5f493b6c7a0ea241" translate="yes" xml:space="preserve">
          <source>Utility class to guess the encoding of a given text file.</source>
          <target state="translated">주어진 텍스트 파일의 인코딩을 추측하는 유틸리티 클래스.</target>
        </trans-unit>
        <trans-unit id="fd79c68ec1563fe831e10b080ebd3736614ea3de" translate="yes" xml:space="preserve">
          <source>Utility class used as delegate of closures representing JSON objects.</source>
          <target state="translated">JSON 객체를 나타내는 클로저의 델리게이트로 사용되는 유틸리티 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="fc32073d56cfb59cb8d7527f0197c7c603db4501" translate="yes" xml:space="preserve">
          <source>Utility classes related to the Groovy Shell (aka.</source>
          <target state="translated">Groovy Shell (일명.</target>
        </trans-unit>
        <trans-unit id="f527255cf400ee6e3b67274759814551bf4593da" translate="yes" xml:space="preserve">
          <source>Utility method to check via reflection if the parsed class appears to be a JUnit5 test, i.e. checks whether it appears to be using the relevant annotations.</source>
          <target state="translated">파싱 ​​된 클래스가 JUnit5 테스트로 보이는지 리플렉션을 통해 확인하는 유틸리티 메서드입니다. 즉, 관련 주석을 사용중인 것으로 보이는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="78ed81e57dbba8f82eb9b09aecda0a45640c7b63" translate="yes" xml:space="preserve">
          <source>Utility method to check via reflection if the parsed class appears to be a TestNG test, i.e. checks whether it appears to be using the relevant TestNG annotations.</source>
          <target state="translated">파싱 ​​된 클래스가 TestNG 테스트로 보이는지 리플렉션을 통해 확인하는 유틸리티 메서드입니다. 즉, 관련 TestNG 주석을 사용하고 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="a88be1ad8bbf17137108ec800e84acbdf58e7967" translate="yes" xml:space="preserve">
          <source>Utility method to run a JUnit 5 test.</source>
          <target state="translated">JUnit 5 테스트를 실행하는 유틸리티 메소드입니다.</target>
        </trans-unit>
        <trans-unit id="fd80e80a6d3b3d44ff57da33041471ebc81e0525" translate="yes" xml:space="preserve">
          <source>Utility method to run a TestNG test.</source>
          <target state="translated">TestNG 테스트를 실행하는 유틸리티 메서드입니다.</target>
        </trans-unit>
        <trans-unit id="951144c47ae96e9f3a82b4e0a11df3421c942fc1" translate="yes" xml:space="preserve">
          <source>Utility method to run a closure in EDT, using &lt;code&gt;SwingUtilities.invokeAndWait&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SwingUtilities.invokeAndWait&lt;/code&gt; 를 사용하여 EDT에서 클로저를 실행하는 유틸리티 메서드 입니다.</target>
        </trans-unit>
        <trans-unit id="82c789ce972b5fc8e855da4bfbcf70374ff7fcd9" translate="yes" xml:space="preserve">
          <source>Utility method to run a closure in EDT, using &lt;code&gt;SwingUtilities.invokeLater&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SwingUtilities.invokeLater&lt;/code&gt; 를 사용하여 EDT에서 클로저를 실행하는 유틸리티 메서드 입니다.</target>
        </trans-unit>
        <trans-unit id="f3df3f9973a1fb9377a19b49f8eb170407edae2e" translate="yes" xml:space="preserve">
          <source>Utility method to run a closure outside of the EDT.</source>
          <target state="translated">EDT 외부에서 클로저를 실행하는 유틸리티 메서드입니다.</target>
        </trans-unit>
        <trans-unit id="0aa157934cbc105c91717df2fef4b12760d4ef67" translate="yes" xml:space="preserve">
          <source>Utility methods for working with Tokens.</source>
          <target state="translated">토큰 작업을위한 유틸리티 방법.</target>
        </trans-unit>
        <trans-unit id="561a9b9bf97fe1548e3c976bb0447302bd324dfd" translate="yes" xml:space="preserve">
          <source>Utility methods to deal with generic types.</source>
          <target state="translated">제네릭 유형을 처리하는 유틸리티 메서드.</target>
        </trans-unit>
        <trans-unit id="dc31df86f496b9e72c613659c9af7a0bd3e15dec" translate="yes" xml:space="preserve">
          <source>VMPlugin</source>
          <target state="translated">VMPlugin</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="778d524d3ce39f4ec529de3a9711f14543d9506a" translate="yes" xml:space="preserve">
          <source>ValueMap</source>
          <target state="translated">ValueMap</target>
        </trans-unit>
        <trans-unit id="1d44e10c4aa2998a48b0f3042f59cc618df94af4" translate="yes" xml:space="preserve">
          <source>ValueModel</source>
          <target state="translated">ValueModel</target>
        </trans-unit>
        <trans-unit id="d4480a30f3d439a4b22940b2777869af8e2385fe" translate="yes" xml:space="preserve">
          <source>Varargs elements as arguments to the JSON builder create a root JSON array</source>
          <target state="translated">JSON 빌더에 대한 인수로 Varargs 요소는 루트 JSON 배열을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="b6ccece2c5a4a2e000b148c7fb122e573a843085" translate="yes" xml:space="preserve">
          <source>Varargs elements as arguments to the YAML builder create a root YAML array</source>
          <target state="translated">YAML 빌더에 대한 인수로 Varargs 요소는 루트 YAML 배열을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="19de69cb601f53a4ea7af22a65c71ae63251365c" translate="yes" xml:space="preserve">
          <source>Variable</source>
          <target state="translated">Variable</target>
        </trans-unit>
        <trans-unit id="2bc99defa0b62825ecf2aa232e2bb9ad8399bede" translate="yes" xml:space="preserve">
          <source>Variable annotation used for changing the base script class of the current script.</source>
          <target state="translated">현재 스크립트의 기본 스크립트 클래스를 변경하는 데 사용되는 변수 주석입니다.</target>
        </trans-unit>
        <trans-unit id="fca1c7c85d1d7cf8bc8240bcf697138998705279" translate="yes" xml:space="preserve">
          <source>Variable annotation used for changing the scope of a variable within a script from being within the run method of the script to being at the class level for the script.</source>
          <target state="translated">스크립트 내의 변수 범위를 스크립트의 실행 메서드 내에있는 것에서 스크립트의 클래스 수준으로 변경하는 데 사용되는 변수 주석입니다.</target>
        </trans-unit>
        <trans-unit id="2817fc811de33fe259eb237e3b155f47d72b3ad8" translate="yes" xml:space="preserve">
          <source>Variable annotation used for getting the URI of the current script.</source>
          <target state="translated">현재 스크립트의 URI를 가져 오는 데 사용되는 변수 주석입니다.</target>
        </trans-unit>
        <trans-unit id="fb8af89841966f3b6aecf1d13aad9b9781e57ce6" translate="yes" xml:space="preserve">
          <source>Variable expressions - referencing constants</source>
          <target state="translated">변수 표현식-참조 상수</target>
        </trans-unit>
        <trans-unit id="22b363dacc0483ce3f4a79f71fcbb667ac7cc218" translate="yes" xml:space="preserve">
          <source>Various Groovy utilities for working with nodes, builders, logging, and other things.</source>
          <target state="translated">노드, 빌더, 로깅 및 기타 작업을위한 다양한 Groovy 유틸리티.</target>
        </trans-unit>
        <trans-unit id="7b80a6ff5fadf3afbb63c8651e49dbd57b97243a" translate="yes" xml:space="preserve">
          <source>Verbosity for simple logging: QUIET, INFO, VERBOSE, DEBUG</source>
          <target state="translated">간단한 로깅을위한 자세한 정보 : QUIET, INFO, VERBOSE, DEBUG</target>
        </trans-unit>
        <trans-unit id="96ca9fefae52638a95720ef7c4267cfc30aea87c" translate="yes" xml:space="preserve">
          <source>Verifies the AST node and adds any default AST code before bytecode generation occurs.</source>
          <target state="translated">AST 노드를 확인하고 바이트 코드 생성이 발생하기 전에 기본 AST 코드를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="0569fb0265e986b76071225bfcc0e89fb7235e8c" translate="yes" xml:space="preserve">
          <source>Verify Class files. This task can take the following arguments:</source>
          <target state="translated">클래스 파일을 확인하십시오. 이 태스크는 다음 인수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="04fe57cb36557b3055cca35d19b1fdda4f7fde4e" translate="yes" xml:space="preserve">
          <source>Verify correct usage of generics. This includes:</source>
          <target state="translated">제네릭의 올바른 사용법을 확인하십시오. 여기에는 다음이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="500599c29d5e9d1a7162a4a38e87d0a8116bcaf8" translate="yes" xml:space="preserve">
          <source>VetoableASTTransformation</source>
          <target state="translated">VetoableASTTransformation</target>
        </trans-unit>
        <trans-unit id="98fdb7698d228807d19f1147cc52f749593a4f89" translate="yes" xml:space="preserve">
          <source>Visibility.UNDEFINED</source>
          <target state="translated">Visibility.UNDEFINED</target>
        </trans-unit>
        <trans-unit id="50f13a67506dab51a7403cf165f189c048223df8" translate="yes" xml:space="preserve">
          <source>VisibilityOptions</source>
          <target state="translated">VisibilityOptions</target>
        </trans-unit>
        <trans-unit id="fee63137c7d60a93f6c66fe09529472dbaeea754" translate="yes" xml:space="preserve">
          <source>Visit a ClassNode.</source>
          <target state="translated">ClassNode를 방문하십시오.</target>
        </trans-unit>
        <trans-unit id="fbb560e8a0ebf70449ea859af860e92068a041ce" translate="yes" xml:space="preserve">
          <source>Visit a ConstructorNode.</source>
          <target state="translated">ConstructorNode를 방문하십시오.</target>
        </trans-unit>
        <trans-unit id="240e2795421a4d91dc82b8e50d97854aaa702f5a" translate="yes" xml:space="preserve">
          <source>Visit a FieldNode.</source>
          <target state="translated">FieldNode를 방문하십시오.</target>
        </trans-unit>
        <trans-unit id="ee4650a8a14a114e2e3ac785258fb95009b71e80" translate="yes" xml:space="preserve">
          <source>Visit a MethodNode.</source>
          <target state="translated">MethodNode를 방문하십시오.</target>
        </trans-unit>
        <trans-unit id="c8a8061983ebe9e3af13becc5e79ef812c6c0fb5" translate="yes" xml:space="preserve">
          <source>Visit a PropertyNode.</source>
          <target state="translated">PropertyNode를 방문하십시오.</target>
        </trans-unit>
        <trans-unit id="ad3de049e4aa04111b81ac823cb35f46bc12c174" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#annotatedQualifiedClassName&quot;&gt;GroovyParser.annotatedQualifiedClassName&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#annotatedQualifiedClassName&quot;&gt;GroovyParser.annotatedQualifiedClassName에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="a6a583555fc12a78b9978a3d1383849489a6d2da" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#annotation&quot;&gt;GroovyParser.annotation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#annotation&quot;&gt;GroovyParser.annotation에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="a20b83117bbb403a8b6eb903e52fdcdcbf12808c" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#annotationName&quot;&gt;GroovyParser.annotationName&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#annotationName&quot;&gt;GroovyParser.annotationName에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="855a5cb7e59d5fc505b5f99465ed6df4c2e34be4" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#annotationsOpt&quot;&gt;GroovyParser.annotationsOpt&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#annotationsOpt&quot;&gt;GroovyParser.annotationsOpt에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="256d1a59c7a06f7add80da4c7dfbd39578c2a39c" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#anonymousInnerClassDeclaration&quot;&gt;GroovyParser.anonymousInnerClassDeclaration&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#anonymousInnerClassDeclaration&quot;&gt;GroovyParser.anonymousInnerClassDeclaration에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="f3ff954f322fe2162cba565286c6bafcd566087f" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#arguments&quot;&gt;GroovyParser.arguments&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#arguments&quot;&gt;GroovyParser.arguments에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="f5a0207626fe1e53808fd70ee3a5eda99175fc14" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#arrayInitializer&quot;&gt;GroovyParser.arrayInitializer&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#arrayInitializer&quot;&gt;GroovyParser.arrayInitializer에서&lt;/a&gt; 생성 한 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="8f64afec04b9346a78ef3d6b8a7b1cd815133d0d" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#assertStatement&quot;&gt;GroovyParser.assertStatement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#assertStatement&quot;&gt;GroovyParser.assertStatement에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="93e3474bdd111e2f7aec99bdf99eaf44e0c1759d" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#block&quot;&gt;GroovyParser.block&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#block&quot;&gt;GroovyParser.block에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="39388f9cc250cc263189a6791695d7544c8b373c" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#blockStatement&quot;&gt;GroovyParser.blockStatement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#blockStatement&quot;&gt;GroovyParser.blockStatement에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="e5879b3d82bf6b3fd4c4a38f01332e405830e57b" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#blockStatements&quot;&gt;GroovyParser.blockStatements&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#blockStatements&quot;&gt;GroovyParser.blockStatements에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="fa124d2f7ccca44c12871b39ac41e28419f33d3b" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#blockStatementsOpt&quot;&gt;GroovyParser.blockStatementsOpt&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#blockStatementsOpt&quot;&gt;GroovyParser.blockStatementsOpt에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="aff832b0679b3e26e0d19ff0516ad281e29226bc" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#breakStatement&quot;&gt;GroovyParser.breakStatement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#breakStatement&quot;&gt;GroovyParser.breakStatement에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="dbf8f67eaaeb3e7135da3fa4f6251ba2780da108" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#builtInType&quot;&gt;GroovyParser.builtInType&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#builtInType&quot;&gt;GroovyParser.builtInType에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="ed1754413357d7b1c7585ec7d1886772a6cd8bd9" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#castParExpression&quot;&gt;GroovyParser.castParExpression&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#castParExpression&quot;&gt;GroovyParser.castParExpression에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="4d4d2427123a6434d5fab2c36eddafd7dcbc2371" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#catchClause&quot;&gt;GroovyParser.catchClause&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#catchClause&quot;&gt;GroovyParser.catchClause에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="62d08eccd3db111fc5ced4b8b679c8dc8863dcc5" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#catchType&quot;&gt;GroovyParser.catchType&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#catchType&quot;&gt;GroovyParser.catchType에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="c0e05a82a9f7c2e2ec5110d640e57873d5b126bc" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#classBody&quot;&gt;GroovyParser.classBody&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#classBody&quot;&gt;GroovyParser.classBody에서&lt;/a&gt; 생성 한 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="96fda8d072563ab608882c696895a19abc32f678" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#classBodyDeclaration&quot;&gt;GroovyParser.classBodyDeclaration&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#classBodyDeclaration&quot;&gt;GroovyParser.classBodyDeclaration에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="4005b4829662ea9f7a19daf6bcdda14a627c7db6" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#classDeclaration&quot;&gt;GroovyParser.classDeclaration&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#classDeclaration&quot;&gt;GroovyParser.classDeclaration에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="0135b837b9c4ac11ea1aa6dc0fac33e176b07f6b" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#className&quot;&gt;GroovyParser.className&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#className&quot;&gt;GroovyParser.className에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="f6a35c629794dfacea533f604f41bc384cd8ab1a" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#classOrInterfaceModifier&quot;&gt;GroovyParser.classOrInterfaceModifier&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#classOrInterfaceModifier&quot;&gt;GroovyParser.classOrInterfaceModifier에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="789009af1cbe13ef18c174014a97f17d2e8d3442" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#classOrInterfaceModifiers&quot;&gt;GroovyParser.classOrInterfaceModifiers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#classOrInterfaceModifiers&quot;&gt;GroovyParser.classOrInterfaceModifiers에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="6edc08460e33e4df3f241ed04bdd680a7bd45b02" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#classOrInterfaceModifiersOpt&quot;&gt;GroovyParser.classOrInterfaceModifiersOpt&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#classOrInterfaceModifiersOpt&quot;&gt;GroovyParser.classOrInterfaceModifiersOpt에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="df9ad7a16a1f780426d75dd4ed7b2a89193827f9" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#classOrInterfaceType&quot;&gt;GroovyParser.classOrInterfaceType&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#classOrInterfaceType&quot;&gt;GroovyParser.classOrInterfaceType에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="4dca84e29544bb2b89868fec86745065ea73050a" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#classicalForControl&quot;&gt;GroovyParser.classicalForControl&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#classicalForControl&quot;&gt;GroovyParser.classicalForControl에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="7877ad22118c398bf6d63bfc30e6a1e88a2848b4" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#closure&quot;&gt;GroovyParser.closure&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#closure&quot;&gt;GroovyParser.closure에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="822da5e1effc17067925ae34734f18d42dcc604d" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#closureOrLambdaExpression&quot;&gt;GroovyParser.closureOrLambdaExpression&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#closureOrLambdaExpression&quot;&gt;GroovyParser.closureOrLambdaExpression에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="ab9b005a11c79ee1aa3d3b1e44fb4ca4af9cc76b" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#commandArgument&quot;&gt;GroovyParser.commandArgument&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#commandArgument&quot;&gt;GroovyParser.commandArgument에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="720272499decbb1e6c2004aca33158221815cd21" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#commandExpression&quot;&gt;GroovyParser.commandExpression&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#commandExpression&quot;&gt;GroovyParser.commandExpression에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="ef12b4c89df6b1bf78a26a9f4aecdd84d25a35ad" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#compilationUnit&quot;&gt;GroovyParser.compilationUnit&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#compilationUnit&quot;&gt;GroovyParser.compilationUnit에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="c79ea91063be708bccfc6db3a2b9537ea1260d8a" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#conditionalStatement&quot;&gt;GroovyParser.conditionalStatement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#conditionalStatement&quot;&gt;GroovyParser.conditionalStatement에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="7b1d8e980ee52347210c8177693c3c9398a8a83d" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#continueStatement&quot;&gt;GroovyParser.continueStatement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#continueStatement&quot;&gt;GroovyParser.continueStatement에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="60c5a8f96c2a3a431642281003e4b99daf7ca8f3" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#createdName&quot;&gt;GroovyParser.createdName&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#createdName&quot;&gt;GroovyParser.createdName에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="ae351c5342b627564ed032ef5e47a7136165c7ea" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#creator&quot;&gt;GroovyParser.creator&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#creator&quot;&gt;GroovyParser.creator에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="cbae5448199797519cc353fec6e64f05b39b0479" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#dim&quot;&gt;GroovyParser.dim&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#dim&quot;&gt;GroovyParser.dim에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="12b42604af65ecd1c25b5cc0a9d7cc3f78eec8a2" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#dynamicMemberName&quot;&gt;GroovyParser.dynamicMemberName&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#dynamicMemberName&quot;&gt;GroovyParser.dynamicMemberName에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="1777cb6e9cfe10042fc7e4336a90fbe2db9f279a" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#elementValue&quot;&gt;GroovyParser.elementValue&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#elementValue&quot;&gt;GroovyParser.elementValue에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="ce43be2b71beca49f4b82ada6041406828adcb45" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#elementValueArrayInitializer&quot;&gt;GroovyParser.elementValueArrayInitializer&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#elementValueArrayInitializer&quot;&gt;GroovyParser.elementValueArrayInitializer에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="a482fddcb0fa95e779304046d8b97db822856a25" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#elementValuePair&quot;&gt;GroovyParser.elementValuePair&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#elementValuePair&quot;&gt;GroovyParser.elementValuePair에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="6c9778b9c452190eb6fc0cd4f8e591d4b6f7cc01" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#elementValuePairName&quot;&gt;GroovyParser.elementValuePairName&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#elementValuePairName&quot;&gt;GroovyParser.elementValuePairName에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="548f4762d94775e3de125b3bd5cddc68303c070f" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#elementValuePairs&quot;&gt;GroovyParser.elementValuePairs&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#elementValuePairs&quot;&gt;GroovyParser.elementValuePairs에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="a0dde52702fa5108bf51094b2c404eb14e8232f3" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#elementValues&quot;&gt;GroovyParser.elementValues&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#elementValues&quot;&gt;GroovyParser.elementValues에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="41c712e1970050cf4176d2721246f14f1926e549" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#emptyDims&quot;&gt;GroovyParser.emptyDims&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#emptyDims&quot;&gt;GroovyParser.emptyDims에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="2ff1332496e846541d20c4626c0e4b5ec7335112" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#emptyDimsOpt&quot;&gt;GroovyParser.emptyDimsOpt&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#emptyDimsOpt&quot;&gt;GroovyParser.emptyDimsOpt에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="e8c421bf5fa0ed4186dca35395107c343c113bf0" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#enhancedArgumentListElement&quot;&gt;GroovyParser.enhancedArgumentListElement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#enhancedArgumentListElement&quot;&gt;GroovyParser.enhancedArgumentListElement에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="af12fe5b3ca7e224dbd0a9c1f7156e21b9b53400" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#enhancedArgumentListInPar&quot;&gt;GroovyParser.enhancedArgumentListInPar&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#enhancedArgumentListInPar&quot;&gt;GroovyParser.enhancedArgumentListInPar에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="d657b9900658e5cfc56710660aaf82d3ad03a5fa" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#enhancedForControl&quot;&gt;GroovyParser.enhancedForControl&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#enhancedForControl&quot;&gt;GroovyParser.enhancedForControl에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="73172f04b26e403e4d68760c915a166948b570cb" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#enhancedStatementExpression&quot;&gt;GroovyParser.enhancedStatementExpression&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#enhancedStatementExpression&quot;&gt;GroovyParser.enhancedStatementExpression에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="8da2f54fff261c5412efa3187b9379e7dad7ab46" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#enumConstant&quot;&gt;GroovyParser.enumConstant&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#enumConstant&quot;&gt;GroovyParser.enumConstant에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="7ade29e52afc64c36d3ee0a28459a82bb5cc1658" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#enumConstants&quot;&gt;GroovyParser.enumConstants&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#enumConstants&quot;&gt;GroovyParser.enumConstants에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="6eb3744ef4210a081d702e66972ab919ee697198" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="7a15d3af80d8106c5d3cd248f774fd4482c93f23" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#expressionInPar&quot;&gt;GroovyParser.expressionInPar&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#expressionInPar&quot;&gt;GroovyParser.expressionInPar에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="28963cfabe65b85da6a6f4dd7003e4a4230d6ad6" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#expressionList&quot;&gt;GroovyParser.expressionList&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#expressionList&quot;&gt;GroovyParser.expressionList에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="57512817467c1ac7d36e628d3f9b15652bc99238" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#expressionListElement&quot;&gt;GroovyParser.expressionListElement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#expressionListElement&quot;&gt;GroovyParser.expressionListElement에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="e4c3df71a8f9546d843eb1e93d89d224d142a9cb" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#fieldDeclaration&quot;&gt;GroovyParser.fieldDeclaration&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#fieldDeclaration&quot;&gt;GroovyParser.fieldDeclaration에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="32e0c483c1debe2eb18ed319cb6f23c653dff534" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#finallyBlock&quot;&gt;GroovyParser.finallyBlock&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#finallyBlock&quot;&gt;GroovyParser.finallyBlock에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="a8127c3f59f7a63722a314b751d7ebbfc45bb1a5" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#forControl&quot;&gt;GroovyParser.forControl&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#forControl&quot;&gt;GroovyParser.forControl에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="d5066f874a5d454a1c6a88e18cee91366dff4aef" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#forInit&quot;&gt;GroovyParser.forInit&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#forInit&quot;&gt;GroovyParser.forInit에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="7efd8943280f1c7393feea23077917aeb69c9b3f" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#forUpdate&quot;&gt;GroovyParser.forUpdate&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#forUpdate&quot;&gt;GroovyParser.forUpdate에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="ce44bbd657edbe83fb0e4e8a63496d84e7cdec20" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#formalParameter&quot;&gt;GroovyParser.formalParameter&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#formalParameter&quot;&gt;GroovyParser.formalParameter에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="eecd7253f0af12731c7b09a9394fec13bf59b5dd" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#formalParameterList&quot;&gt;GroovyParser.formalParameterList&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#formalParameterList&quot;&gt;GroovyParser.formalParameterList에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="c317c1ee6ee23015b788294df01fa4d3137863f7" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#formalParameters&quot;&gt;GroovyParser.formalParameters&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#formalParameters&quot;&gt;GroovyParser.formalParameters에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="720a04bdb9a49108bdc4ec5c3f9fac0901c7e823" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#gstring&quot;&gt;GroovyParser.gstring&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#gstring&quot;&gt;GroovyParser.gstring에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="df33d62dc08e48c2b80012baac720c3d7ba7408e" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#gstringPath&quot;&gt;GroovyParser.gstringPath&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#gstringPath&quot;&gt;GroovyParser.gstringPath에서&lt;/a&gt; 생성 한 파스 트리를 방문합니다 .</target>
        </trans-unit>
        <trans-unit id="1b18ccfa631a048e141f6ff7a7961bcbbad4dc44" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#gstringValue&quot;&gt;GroovyParser.gstringValue&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#gstringValue&quot;&gt;GroovyParser.gstringValue에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="657a31cc0621845e985f6cbb88b4bce029f7ef89" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#identifier&quot;&gt;GroovyParser.identifier&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#identifier&quot;&gt;GroovyParser.identifier에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="009341699991e45729dfa2d0ae3d34da4b7bcccf" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#ifElseStatement&quot;&gt;GroovyParser.ifElseStatement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#ifElseStatement&quot;&gt;GroovyParser.ifElseStatement에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="cf332f550212f6655164890a4dc8f80ef8fa6935" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#importDeclaration&quot;&gt;GroovyParser.importDeclaration&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#importDeclaration&quot;&gt;GroovyParser.importDeclaration에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="1a4dd04c5c43d5b51b62585c98d6b7c10eb2f4a9" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#indexPropertyArgs&quot;&gt;GroovyParser.indexPropertyArgs&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#indexPropertyArgs&quot;&gt;GroovyParser.indexPropertyArgs에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="3f3cc82bebdad923e70b7f7797659709e56c365d" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#keywords&quot;&gt;GroovyParser.keywords&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#keywords&quot;&gt;GroovyParser.keywords에서&lt;/a&gt; 생성 한 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="535d5d7119adcd797acf8f76e36ffa16e8a865a7" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#lambdaBody&quot;&gt;GroovyParser.lambdaBody&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#lambdaBody&quot;&gt;GroovyParser.lambdaBody에서&lt;/a&gt; 생성 한 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="8f1627f39bf920d5c5f96e035b607929174565d5" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#list&quot;&gt;GroovyParser.list&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#list&quot;&gt;GroovyParser.list에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="c66e307e850fc0f4c750e1878967bced37230332" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="aa55fad9b99f415879cb2cb47123613b251f9b23" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#localVariableDeclaration&quot;&gt;GroovyParser.localVariableDeclaration&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#localVariableDeclaration&quot;&gt;GroovyParser.localVariableDeclaration에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="0503cb2338f50b6fc863b91dca15dbb1e14c2ccc" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#loopStatement&quot;&gt;GroovyParser.loopStatement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#loopStatement&quot;&gt;GroovyParser.loopStatement에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="3d0323a214f0ae249241dab66fcb0b92b5d230fe" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#map&quot;&gt;GroovyParser.map&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#map&quot;&gt;GroovyParser.map에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="eccdc92d99a1db89f15d277ec3f319e7476a8391" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#mapEntry&quot;&gt;GroovyParser.mapEntry&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#mapEntry&quot;&gt;GroovyParser.mapEntry에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="6ff094d7376c91ab19ec34fe3dafeda69f5af816" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#mapEntryLabel&quot;&gt;GroovyParser.mapEntryLabel&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#mapEntryLabel&quot;&gt;GroovyParser.mapEntryLabel에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="e70b8e0c8a16d916dc8f4e6ec5aacb6f709b04d5" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#mapEntryList&quot;&gt;GroovyParser.mapEntryList&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#mapEntryList&quot;&gt;GroovyParser.mapEntryList에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="e0c10a1bb0823c55e8429998785b4d69314b06f1" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#memberDeclaration&quot;&gt;GroovyParser.memberDeclaration&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#memberDeclaration&quot;&gt;GroovyParser.memberDeclaration에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="7484ad822d429be10a0bb561a9a4d692dee5d884" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#methodBody&quot;&gt;GroovyParser.methodBody&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#methodBody&quot;&gt;GroovyParser.methodBody가&lt;/a&gt; 생성 한 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="d09a7009313e6b9e7730799cdb5e42595126f250" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#methodDeclaration&quot;&gt;GroovyParser.methodDeclaration&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#methodDeclaration&quot;&gt;GroovyParser.methodDeclaration에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="d01be8bb20b892579e175166654a3c119c684121" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#methodName&quot;&gt;GroovyParser.methodName&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#methodName&quot;&gt;GroovyParser.methodName에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="77a1574321241a5b29c71f52cddd328c945b2529" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#modifier&quot;&gt;GroovyParser.modifier&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#modifier&quot;&gt;GroovyParser.modifier에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="763a9b0ef0d882713753f8878a6779128fc1f797" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#modifiers&quot;&gt;GroovyParser.modifiers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#modifiers&quot;&gt;GroovyParser.modifiers에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="0e05713df5a4fb89c1bbc780d31f60fc70d0659c" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#modifiersOpt&quot;&gt;GroovyParser.modifiersOpt&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#modifiersOpt&quot;&gt;GroovyParser.modifiersOpt에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="17be7e14597229d5f72c85581e081870a2528168" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#namePart&quot;&gt;GroovyParser.namePart&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#namePart&quot;&gt;GroovyParser.namePart에서&lt;/a&gt; 생성 한 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="5e6b382229d4bf9488934e780f166351f9b317cc" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#namedPropertyArgs&quot;&gt;GroovyParser.namedPropertyArgs&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#namedPropertyArgs&quot;&gt;GroovyParser.namedPropertyArgs에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="30614b14379feda494ac05fb274da3c92e20dc31" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#nls&quot;&gt;GroovyParser.nls&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#nls&quot;&gt;GroovyParser.nls에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="88749372f47c0a1e7af0aa98b75283b99907ba77" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#nonWildcardTypeArguments&quot;&gt;GroovyParser.nonWildcardTypeArguments&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#nonWildcardTypeArguments&quot;&gt;GroovyParser.nonWildcardTypeArguments에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="8fdf26e579630633232910cf7b2d10dd697e2770" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#packageDeclaration&quot;&gt;GroovyParser.packageDeclaration&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#packageDeclaration&quot;&gt;GroovyParser.packageDeclaration에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="339638b9cb052bbfa37c103d8bed457bc594af43" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#parExpression&quot;&gt;GroovyParser.parExpression&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#parExpression&quot;&gt;GroovyParser.parExpression에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="f2b047f07d647829b172694954d575948a93bd22" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#pathElement&quot;&gt;GroovyParser.pathElement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#pathElement&quot;&gt;GroovyParser.pathElement에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="63e8d9ceb457e7601c19f4bc77ffac39898b8882" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#pathExpression&quot;&gt;GroovyParser.pathExpression&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#pathExpression&quot;&gt;GroovyParser.pathExpression에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="a4238f7a9a929db47e70ed7a360462f318405235" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#postfixExpression&quot;&gt;GroovyParser.postfixExpression&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#postfixExpression&quot;&gt;GroovyParser.postfixExpression에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="e3a7044a8da58acfbe6970fe0547316922fea519" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="f69bd57c87b59bc50b92b14cbf2920a4516cbd6b" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#primitiveType&quot;&gt;GroovyParser.primitiveType&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#primitiveType&quot;&gt;GroovyParser.primitiveType에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="b8deb83875d4a2cad969c2657d9808b0a291cd50" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#qualifiedClassName&quot;&gt;GroovyParser.qualifiedClassName&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#qualifiedClassName&quot;&gt;GroovyParser.qualifiedClassName에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="726f9b63813dec088a4124e05e9565edb203944f" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#qualifiedClassNameList&quot;&gt;GroovyParser.qualifiedClassNameList&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#qualifiedClassNameList&quot;&gt;GroovyParser.qualifiedClassNameList에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="6471a54d499ff6d9eb67cadaef6a9768294a24cf" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#qualifiedName&quot;&gt;GroovyParser.qualifiedName&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#qualifiedName&quot;&gt;GroovyParser.qualifiedName에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="94a67624c4efcd7c956f65eaf358ba9617744825" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#qualifiedNameElement&quot;&gt;GroovyParser.qualifiedNameElement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#qualifiedNameElement&quot;&gt;GroovyParser.qualifiedNameElement에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="43e1495065888896a17c4852c0aab367bf628f35" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#qualifiedNameElements&quot;&gt;GroovyParser.qualifiedNameElements&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#qualifiedNameElements&quot;&gt;GroovyParser.qualifiedNameElements에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="2fb9c39fa4d93ecb7b7bcfd744e4e3e3f141ad8a" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#qualifiedStandardClassName&quot;&gt;GroovyParser.qualifiedStandardClassName&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#qualifiedStandardClassName&quot;&gt;GroovyParser.qualifiedStandardClassName에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="f4a073359fbf9bad1f506bfc2f96f1b8bd75cdb2" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#resource&quot;&gt;GroovyParser.resource&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#resource&quot;&gt;GroovyParser.resource에서&lt;/a&gt; 생성 한 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="f266a33b3ae87528e1a30b96548d406132516180" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#resourceList&quot;&gt;GroovyParser.resourceList&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#resourceList&quot;&gt;GroovyParser.resourceList에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="170f0fe1ef24f1fc540e5cea36749394828f9249" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#resources&quot;&gt;GroovyParser.resources&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#resources&quot;&gt;GroovyParser.resources에서&lt;/a&gt; 생성 한 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="7096981e3a0b6ebbaea51e09776b2415ecca246a" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#returnType&quot;&gt;GroovyParser.returnType&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#returnType&quot;&gt;GroovyParser.returnType에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="6fddc1494ec4bdd1df1afff60b9c32a43acb378e" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#rparen&quot;&gt;GroovyParser.rparen&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#rparen&quot;&gt;GroovyParser.rparen에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="39a02b8a53f5e9b7b0dbff9f10d0fba3dd0a82f9" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#scriptStatement&quot;&gt;GroovyParser.scriptStatement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#scriptStatement&quot;&gt;GroovyParser.scriptStatement에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="4cd542569808215bb499edc604ce715e4883f796" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#scriptStatements&quot;&gt;GroovyParser.scriptStatements&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#scriptStatements&quot;&gt;GroovyParser.scriptStatements에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="6d73d940d94e57d2ba8968a4a17214058bca69e1" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#sep&quot;&gt;GroovyParser.sep&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#sep&quot;&gt;GroovyParser.sep에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="54ea79ba0b18df42d3fb60cebb5569c22bee1344" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#standardLambdaExpression&quot;&gt;GroovyParser.standardLambdaExpression&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#standardLambdaExpression&quot;&gt;GroovyParser.standardLambdaExpression에서&lt;/a&gt; 생성 한 구문 분석 트리를 방문합니다 .</target>
        </trans-unit>
        <trans-unit id="21c48bcc6a8d75f802c03f5ff344e3eae9d5b048" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#standardLambdaParameters&quot;&gt;GroovyParser.standardLambdaParameters&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#standardLambdaParameters&quot;&gt;GroovyParser.standardLambdaParameters에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="55f7b022fe93a372d0d738a8b5c2c32a32c71689" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="765a1f66bae25ea68fe82360f1f0c66d67caef0c" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#statementExpression&quot;&gt;GroovyParser.statementExpression&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#statementExpression&quot;&gt;GroovyParser.statementExpression에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="cd1151edbda1cab3561448982a1357b880bbdc31" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#stringLiteral&quot;&gt;GroovyParser.stringLiteral&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#stringLiteral&quot;&gt;GroovyParser.stringLiteral에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="72659be5248a12f5559537ef9b64a530f5a62b25" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#switchBlockStatementGroup&quot;&gt;GroovyParser.switchBlockStatementGroup&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#switchBlockStatementGroup&quot;&gt;GroovyParser.switchBlockStatementGroup에서&lt;/a&gt; 생성 한 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="13c54ff40bedee2730a3194523af78c0e1c1cf63" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#switchLabel&quot;&gt;GroovyParser.switchLabel&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#switchLabel&quot;&gt;GroovyParser.switchLabel에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="121002caa204b09fb78b226e403a639a5f4a3027" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#switchStatement&quot;&gt;GroovyParser.switchStatement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#switchStatement&quot;&gt;GroovyParser.switchStatement에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="aabf818cd194db45613426d7172375e51772b7a6" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#thisFormalParameter&quot;&gt;GroovyParser.thisFormalParameter&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#thisFormalParameter&quot;&gt;GroovyParser.thisFormalParameter에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="dd0d1f73bd5462a82aa0bc595c7f1fc2806edae0" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#tryCatchStatement&quot;&gt;GroovyParser.tryCatchStatement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#tryCatchStatement&quot;&gt;GroovyParser.tryCatchStatement에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="f6fbeb5aa8b8023b950178cd5da95df1cae1c769" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#type&quot;&gt;GroovyParser.type&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#type&quot;&gt;GroovyParser.type에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="efb2a6366923c4ff374f5d37329db7a98cb8d647" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#typeArgument&quot;&gt;GroovyParser.typeArgument&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#typeArgument&quot;&gt;GroovyParser.typeArgument에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="f1c1f4936943f44f7bf78c7aa696d65ce5873ceb" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#typeArguments&quot;&gt;GroovyParser.typeArguments&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#typeArguments&quot;&gt;GroovyParser.typeArguments에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="4d11f35c5f6f0ce4c2d930f8922a1ba9ad519e8d" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#typeArgumentsOrDiamond&quot;&gt;GroovyParser.typeArgumentsOrDiamond&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#typeArgumentsOrDiamond&quot;&gt;GroovyParser.typeArgumentsOrDiamond에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="cdb0054fd8caf217512a904ff54ae89fa75aa361" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#typeBound&quot;&gt;GroovyParser.typeBound&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#typeBound&quot;&gt;GroovyParser.typeBound에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="028de89bd0dc55b3477fcbeb05d224007168e395" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#typeDeclaration&quot;&gt;GroovyParser.typeDeclaration&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#typeDeclaration&quot;&gt;GroovyParser.typeDeclaration에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="a6a285d923fe968c2c61f3578f9686505ca80e0e" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#typeList&quot;&gt;GroovyParser.typeList&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#typeList&quot;&gt;GroovyParser.typeList에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="2a43b156060c0835909b001125035021406545ae" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#typeNamePair&quot;&gt;GroovyParser.typeNamePair&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#typeNamePair&quot;&gt;GroovyParser.typeNamePair에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="e5d9135be58d6d784f990253e315c61ee8c495aa" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#typeNamePairs&quot;&gt;GroovyParser.typeNamePairs&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#typeNamePairs&quot;&gt;GroovyParser.typeNamePairs에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="bce629672ed619a89e4aa7829aad9386151e653d" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#typeParameter&quot;&gt;GroovyParser.typeParameter&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#typeParameter&quot;&gt;GroovyParser.typeParameter에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="84c260ab72543ab5eb3f2d1b6527eb74f49352eb" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#typeParameters&quot;&gt;GroovyParser.typeParameters&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#typeParameters&quot;&gt;GroovyParser.typeParameters에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="acee740dd2400fa347f2dbdedd6443b62639c935" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#variableDeclaration&quot;&gt;GroovyParser.variableDeclaration&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#variableDeclaration&quot;&gt;GroovyParser.variableDeclaration에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="3e9ab79627b41838b6c9e3221b64a1f9b0f4d115" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#variableDeclarator&quot;&gt;GroovyParser.variableDeclarator&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#variableDeclarator&quot;&gt;GroovyParser.variableDeclarator에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="657e0f503d21f9ec2d37f9d8da456996d514ef32" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#variableDeclaratorId&quot;&gt;GroovyParser.variableDeclaratorId&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#variableDeclaratorId&quot;&gt;GroovyParser.variableDeclaratorId에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="d8fc5fb0f6d61655b48d7c9dbcb1e586ffae776e" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#variableDeclarators&quot;&gt;GroovyParser.variableDeclarators&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#variableDeclarators&quot;&gt;GroovyParser.variableDeclarators에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="de4ad02e679c7d50b36f985a724273ca4db84b01" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#variableInitializer&quot;&gt;GroovyParser.variableInitializer&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#variableInitializer&quot;&gt;GroovyParser.variableInitializer가&lt;/a&gt; 생성 한 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="e59f6898e1f9cd93ce3f2379b1912f250fd8a123" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#variableInitializers&quot;&gt;GroovyParser.variableInitializers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#variableInitializers&quot;&gt;GroovyParser.variableInitializers에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="b85c2f5cdcc8a294fa70c195eb5e1aa9b032958e" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#variableModifier&quot;&gt;GroovyParser.variableModifier&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#variableModifier&quot;&gt;GroovyParser.variableModifier에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="40acbba47b7bbe8c6059e2a5e8e60b63b2d22327" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#variableModifiers&quot;&gt;GroovyParser.variableModifiers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#variableModifiers&quot;&gt;GroovyParser.variableModifiers에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="4310625a0aa5fbf74f63b545aa6a40435251dfa4" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#variableModifiersOpt&quot;&gt;GroovyParser.variableModifiersOpt&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#variableModifiersOpt&quot;&gt;GroovyParser.variableModifiersOpt에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="66c355fbcf1b0460716644fcca1c4fbe69a3af1e" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by &lt;a href=&quot;groovyparser#variableNames&quot;&gt;GroovyParser.variableNames&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#variableNames&quot;&gt;GroovyParser.variableNames에&lt;/a&gt; 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="f9b1bb92a9784039d0e905902f1923d83c7825fb" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;additiveExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt; 에서 대안으로 레이블이 지정된 &lt;code&gt;additiveExprAlt&lt;/code&gt; ExprAlt에 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="f7c77401128b3eb229a487ffb4af5f0d86c6e03e" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;andExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;andExprAlt&lt;/code&gt; 가 에 다른 표시 &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="15588ab5cfffae4f864ad9515e9f53e232550469" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;assertStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;assertStmtAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="acb208927ac886067a86cb931a3e16b5c919c4bd" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;assignmentExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt; 에서 대안 레이블이 지정된 &lt;code&gt;assignmentExprAlt&lt;/code&gt; 에 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="21b66a60a9a65d39a4a17d19008d515b24f2ef30" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;blockStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;blockStmtAlt&lt;/code&gt; 가 에 다른 표시 &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="899023e3e7fc5af15a7fb8ff182b6a53a97595e5" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;booleanLiteralAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;booleanLiteralAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="25fa557fbf4fda1d23d9678fa92a8937e4d937c2" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;breakStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;breakStmtAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5f408f4c2533bf64a80483befd4aff808056941a" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;builtInTypePrmrAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;builtInTypePrmrAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="40ba89d352ddd173d0f363c9be8d29c722a6ceac" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;castExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#castOperandExpression&quot;&gt;GroovyParser.castOperandExpression&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;castExprAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#castOperandExpression&quot;&gt;GroovyParser.castOperandExpression을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fc4c7173f870fa7629e388d65a634f3ae20f5f67" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;closureOrLambdaExpressionPrmrAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;closureOrLambdaExpressionPrmrAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0f037e9781209e9b78ec008e47b5aa3d49483fef" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;commandExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statementExpression&quot;&gt;GroovyParser.statementExpression&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;commandExprAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#statementExpression&quot;&gt;GroovyParser.statementExpression을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c202b49337971eb635aa7b0ccb4da93e80977776" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;conditionalExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt; 에서 대안 레이블이 지정된 &lt;code&gt;conditionalExprAlt&lt;/code&gt; 에 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="fccdd696637dac41ee43166651104118b7f7d0ae" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;conditionalStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt; 에있는 &lt;code&gt;conditionalStmtAlt&lt;/code&gt; 레이블 대안에 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="faa7801654b6e5a5295545e7e26d93fe95c6c406" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;continueStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt; 에서 대체 레이블이 붙은 &lt;code&gt;continueStmtAlt&lt;/code&gt; 에 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="39991c39dce91e91a0e3b8f8b79b71d918a63e02" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;doWhileStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#loopStatement&quot;&gt;GroovyParser.loopStatement&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;doWhileStmtAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#loopStatement&quot;&gt;GroovyParser.loopStatement을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="be5bf0756d707d56edc028ba7fdaed3ff68bc4cd" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;emptyStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;emptyStmtAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5d2e01671a4ddba7b048c137a881c64a2fef8f6a" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;equalityExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt; 에서 대안으로 레이블이 지정된 &lt;code&gt;equalityExprAlt&lt;/code&gt; 에 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="7c8b842991694939544c348cc5e09543e3311d77" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;exclusiveOrExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt; 에서 대안 &lt;code&gt;exclusiveOrExprAlt&lt;/code&gt; 레이블이 지정된 exclusiveOrExprAlt에 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="fe644ab958926f2877e702f1e8ba9feb001189c8" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;expressionStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt; 에서 대안으로 레이블이 지정된 &lt;code&gt;expressionStmtAlt&lt;/code&gt; 에 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="94805cb8e5aa685c79aa1209ec25243106efcb21" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;floatingPointLiteralAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal&lt;/a&gt; 에서 대안으로 레이블이 지정된 &lt;code&gt;floatingPointLiteralAlt&lt;/code&gt; 에 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="e4be403a839af6c89186be5460767cf8e06e0908" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;forStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#loopStatement&quot;&gt;GroovyParser.loopStatement&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;forStmtAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#loopStatement&quot;&gt;GroovyParser.loopStatement을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bc04e3dfbea538394d668f4dbe9e4a4ff7675256" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;gstringPrmrAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#commandPrimary&quot;&gt;GroovyParser.commandPrimary&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;gstringPrmrAlt&lt;/code&gt; 가 에 다른 표시 &lt;a href=&quot;groovyparser#commandPrimary&quot;&gt;GroovyParser.commandPrimary&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0d9ae509c9effa4ff0dbf4288f1271a3a4db41b1" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;identifierPrmrAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#commandPrimary&quot;&gt;GroovyParser.commandPrimary&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#commandPrimary&quot;&gt;GroovyParser.commandPrimary&lt;/a&gt; 에서 대안으로 레이블이 지정된 &lt;code&gt;identifierPrmrAlt&lt;/code&gt; 에 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="9689c8b6e00eb420809331a773c5de0b0719ed37" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;inclusiveOrExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt; 의 &lt;code&gt;inclusiveOrExprAlt&lt;/code&gt; 레이블이 붙은 대안에 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="b1227097195e0c4ab1d3f48ebdf0b57053e28f70" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;integerLiteralAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;integerLiteralAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="300daba6aa2658e731c4b250e6de5bbcfe060c15" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;labeledStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;labeledStmtAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="dfed6961503770e447b3b3adcb1658420af5160a" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;listPrmrAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;listPrmrAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5d667a4d7c2868c58a3c670b139b91a8cbd8459b" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;literalPrmrAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#commandPrimary&quot;&gt;GroovyParser.commandPrimary&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;literalPrmrAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#commandPrimary&quot;&gt;GroovyParser.commandPrimary을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="840db04911d2705800cd148c67498acbcdfee527" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;localVariableDeclarationStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt; 에서 대체 레이블이 지정된 &lt;code&gt;localVariableDeclarationStmtAlt&lt;/code&gt; 에 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="5ff408ce4c3144872861f0267f1ea4dff5ed48c3" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;logicalAndExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;logicalAndExprAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ee594ffe2774ee79c295efc4e663940e4252ec45" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;logicalOrExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;logicalOrExprAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d679c2fdadd4c195b6370237544b47689c2ed516" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;loopStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;loopStmtAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="da256a767556ce8e4297fac626d3eff38b3ef9ba" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;mapPrmrAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;mapPrmrAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="84ebeec45476fb752fce24f587452071b77e461c" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;multipleAssignmentExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt; 에있는 &lt;code&gt;multipleAssignmentExprAlt&lt;/code&gt; 레이블이 붙은 대안에 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="b75aa39035b4f5826dda4dfde24946dc284df2d5" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;multiplicativeExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt; 에있는 &lt;code&gt;multiplicativeExprAlt&lt;/code&gt; 레이블이 붙은 대안에 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="a051ad08e06232a578e35660f6c9636bbd2322ba" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;newPrmrAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;newPrmrAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a66704d4877b4bfff9844af359708e31d9fef7cc" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;nullLiteralAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;nullLiteralAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d51db257b3edf6eb8c36cd435f731e039c290ff2" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;parenPrmrAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#namedPropertyArgPrimary&quot;&gt;GroovyParser.namedPropertyArgPrimary&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;parenPrmrAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#namedPropertyArgPrimary&quot;&gt;GroovyParser.namedPropertyArgPrimary을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f49e525d79df9ed568740b3e6c3588651d5c75b8" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;postfixExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#castOperandExpression&quot;&gt;GroovyParser.castOperandExpression&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;postfixExprAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#castOperandExpression&quot;&gt;GroovyParser.castOperandExpression을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e6e968d6ab6a66c572673c5ae1cc6e5bec2368a3" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;powerExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;powerExprAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="878040e8a12162d94559478958c14d69d4ef5e04" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;regexExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;regexExprAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4821baaf864c978a2a7abb91faeb262c8c9ef272" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;relationalExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt; 에서 대체 레이블이 붙은 &lt;code&gt;relationalExprAlt&lt;/code&gt; 에 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="62dc9fbda2383818bac4aaac05c198f7d5c43167" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;returnStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt; 에서 대체 레이블이 붙은 &lt;code&gt;returnStmtAlt&lt;/code&gt; 에 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="9eecdf78a2542e43f06a476b33e1172f1732562c" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;shiftExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;shiftExprAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#expression&quot;&gt;GroovyParser.expression을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b83d50126734cc0de13e9a51bb280cdf23adf42e" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;stringLiteralAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;stringLiteralAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#literal&quot;&gt;GroovyParser.literal을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e01ac932ed79e153a905864b66f6a6672b87f1fc" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;superPrmrAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;superPrmrAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fa092d147c7fa4312baf65f052b403ea2146a21d" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;synchronizedStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt; 에있는 &lt;code&gt;synchronizedStmtAlt&lt;/code&gt; 된 StmtAlt 레이블이 붙은 대안에 의해 생성 된 구문 분석 트리를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="f2405a64ec1ff8cff9b2e91aa3ff17d2856379c1" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;thisPrmrAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;thisPrmrAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#primary&quot;&gt;GroovyParser.primary을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5398a9b3fb4872607122403a46c4a9893f971578" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;throwStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;throwStmtAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5e293a55be780b9395e22ed361791b365fc8ed89" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;tryCatchStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;tryCatchStmtAlt&lt;/code&gt; 가 에 다른 표시 &lt;a href=&quot;groovyparser#statement&quot;&gt;GroovyParser.statement&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="56b7bd77fc14d57c6cee94d57dd4f86f6803c325" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;unaryAddExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#castOperandExpression&quot;&gt;GroovyParser.castOperandExpression&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;unaryAddExprAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#castOperandExpression&quot;&gt;GroovyParser.castOperandExpression을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7109af3571575fbc019f4cb72055eafa4e40ca22" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;unaryNotExprAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#castOperandExpression&quot;&gt;GroovyParser.castOperandExpression&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;unaryNotExprAlt&lt;/code&gt; 에 표시된 대안 &lt;a href=&quot;groovyparser#castOperandExpression&quot;&gt;GroovyParser.castOperandExpression을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="98454cbf20a6ecdc5b95b4f5f40ffd99e8243c5a" translate="yes" xml:space="preserve">
          <source>Visit a parse tree produced by the &lt;code&gt;whileStmtAlt&lt;/code&gt; labeled alternative in &lt;a href=&quot;groovyparser#loopStatement&quot;&gt;GroovyParser.loopStatement&lt;/a&gt;.</source>
          <target state="translated">에 의해 생성 된 파스 트리 방문 &lt;code&gt;whileStmtAlt&lt;/code&gt; 가 에 다른 표시 &lt;a href=&quot;groovyparser#loopStatement&quot;&gt;GroovyParser.loopStatement&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0d1b6b0dcf2eae8ae0c662130dad0c49198bd5d2" translate="yes" xml:space="preserve">
          <source>Visit tree safely, no NPE occurred when the tree is null.</source>
          <target state="translated">트리를 안전하게 방문하십시오. 트리가 null 일 때 NPE가 발생하지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="c909c1c780a1370ad7d8af0872b2d6635e819732" translate="yes" xml:space="preserve">
          <source>Visitor</source>
          <target state="translated">Visitor</target>
        </trans-unit>
        <trans-unit id="dc01d71e8557512caf8b75f9446c6c1431ec5f65" translate="yes" xml:space="preserve">
          <source>Visitor to produce several optimizations:</source>
          <target state="translated">방문자는 여러 최적화를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="8b838494cdcb4c191fef59a443f0bd1c7b3eb8a9" translate="yes" xml:space="preserve">
          <source>Visitor to resolve Types and convert VariableExpression to ClassExpressions if needed. The ResolveVisitor will try to find the Class for a ClassExpression and prints an error if it fails to do so. Constructions like C[], foo as C, (C) foo will force creation of a ClassExpression for C</source>
          <target state="translated">방문자가 유형을 확인하고 필요한 경우 VariableExpression을 ClassExpressions로 변환합니다. ResolveVisitor는 ClassExpression에 대한 클래스를 찾으려고 시도하고 실패하면 오류를 인쇄합니다. C [], foo as C, (C) foo와 같은 구조는 C에 대한 ClassExpression 생성을 강제합니다.</target>
        </trans-unit>
        <trans-unit id="fa343d48dd96f2251c5a70b4bc81878a60f5287d" translate="yes" xml:space="preserve">
          <source>Visitor to resolve constants and method calls from static imports.</source>
          <target state="translated">방문자가 정적 가져 오기에서 상수 및 메서드 호출을 해결합니다.</target>
        </trans-unit>
        <trans-unit id="c92e59bebad73313756158727abdc0939e947870" translate="yes" xml:space="preserve">
          <source>Visitor to resolve constants in annotation definitions.</source>
          <target state="translated">방문자는 주석 정의에서 상수를 해결합니다.</target>
        </trans-unit>
        <trans-unit id="115492d1ac7461b08463909139f69e8671ddde84" translate="yes" xml:space="preserve">
          <source>Visits a class literal.</source>
          <target state="translated">클래스 리터럴을 방문합니다.</target>
        </trans-unit>
        <trans-unit id="7cf2e7ebf11b15474a304edc128f1ccaeb79c7d1" translate="yes" xml:space="preserve">
          <source>Visits a class literal. If the type of the classnode is a primitive type, the generated bytecode will be a GETSTATIC Integer.TYPE. If the classnode is not a primitive type, we will generate a LDC instruction.</source>
          <target state="translated">클래스 리터럴을 방문합니다. 클래스 노드의 유형이 기본 유형 인 경우 생성 된 바이트 코드는 GETSTATIC Integer.TYPE이됩니다. 클래스 노드가 기본 유형이 아닌 경우 LDC 명령을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="485f0bf61a62b198e2ea673bc86fceb0021f3c2e" translate="yes" xml:space="preserve">
          <source>Visits a method call target, to infer the type.</source>
          <target state="translated">유형을 추론하기 위해 메소드 호출 대상을 방문합니다.</target>
        </trans-unit>
        <trans-unit id="91c6a2a54b158701d8352c81de6551af045c9b87" translate="yes" xml:space="preserve">
          <source>Visits a method call target, to infer the type. Don't report errors right away, that will be done by a later visitMethod call.</source>
          <target state="translated">유형을 추론하기 위해 메소드 호출 대상을 방문합니다. 오류를 즉시보고하지 마십시오. 이는 나중에 visitMethod 호출을 통해 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="c15f2e9dc4559c51d2a674a0e26173bda5a36b8f" translate="yes" xml:space="preserve">
          <source>Visual representation of the last example above:</source>
          <target state="translated">위의 마지막 예의 시각적 표현 :</target>
        </trans-unit>
        <trans-unit id="429892d1f5e4de38079ccd855d748ffd3ac1f577" translate="yes" xml:space="preserve">
          <source>WARNING: Don't make n too large.</source>
          <target state="translated">경고 : n을 너무 크게 만들지 마십시오.</target>
        </trans-unit>
        <trans-unit id="fa03b95c814633818a3f2b0a24a718594d430d31" translate="yes" xml:space="preserve">
          <source>WARNING: Don't make n too large. Recall that the number of permutations is n! which can be very large, even when n is as small as 20 -- 20! = 2,432,902,008,176,640,000 and 21! is too big to fit into a Java long, which is why we use BigInteger instead.</source>
          <target state="translated">경고 : n을 너무 크게 만들지 마십시오. 순열의 수는 n입니다! n이 20-20만큼 작더라도 매우 클 수 있습니다! = 2,432,902,008,176,640,000 및 21! Java long에 맞기에는 너무 커서 BigInteger를 대신 사용합니다.</target>
        </trans-unit>
        <trans-unit id="01cf536b76401a5e00e152a763173a69fc288e79" translate="yes" xml:space="preserve">
          <source>WARNING: For the Python style with class-name-matching pattern, the pattern should be chosen as to avoid matching method names if possible. If following Java/Groovy naming conventions, class names (contrary to method names) start with an uppercase letter. In this case &lt;code&gt;pattern=&quot;[A-Z].*&quot;&lt;/code&gt; (see &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html&quot;&gt;Pattern&lt;/a&gt; for supported Java pattern syntax) is the recommended pattern to allow all classes to be created without requiring a new keyword. Using a pattern that also matches method names (e.g. &quot;.+&quot;, &quot;.*&quot; or &quot;[a-zA-Z].*&quot;) might negatively impact build performance, since the Groovy compiler will have to match every class in context against any potential constructor call.</source>
          <target state="translated">경고 : 클래스 이름 일치 패턴이있는 Python 스타일의 경우 가능한 경우 일치하는 메서드 이름을 피하기 위해 패턴을 선택해야합니다. Java / Groovy 명명 규칙을 따르는 경우 클래스 이름 (메서드 이름과 달리)은 대문자로 시작합니다. 이 경우 &lt;code&gt;pattern=&quot;[A-Z].*&quot;&lt;/code&gt; ( 지원되는 Java 패턴 구문에 대한 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html&quot;&gt;패턴&lt;/a&gt; 참조 )은 새 키워드없이 모든 클래스를 작성할 수 있도록 허용하는 권장 패턴입니다. 메서드 이름과도 일치하는 패턴 (예 : &quot;. +&quot;, &quot;. *&quot;또는 &quot;[a-zA-Z]. *&quot;)을 사용하면 Groovy 컴파일러가 컨텍스트의 모든 클래스와 일치해야하므로 빌드 성능에 부정적인 영향을 미칠 수 있습니다. 잠재적 인 생성자 호출에 대해.</target>
        </trans-unit>
        <trans-unit id="66f7ee7293b7e46d6814b5536e2d3441339d61bf" translate="yes" xml:space="preserve">
          <source>WARNING: This class is for internal use only! We use this class to store information about if a default MetaClass is used for certain primitives.</source>
          <target state="translated">경고 :이 클래스는 내부 전용입니다! 이 클래스를 사용하여 기본 MetaClass가 특정 프리미티브에 사용되는지에 대한 정보를 저장합니다.</target>
        </trans-unit>
        <trans-unit id="11647799dd42e642f8d8d7c2de51445604fb7fa8" translate="yes" xml:space="preserve">
          <source>WARNING: This implementation of ProxyMetaClass is NOT thread-safe and hence should only be used for as a per-instance MetaClass running in a single thread. Do not place this MetaClass in the MetaClassRegistry as it will result in unpredictable behaviour</source>
          <target state="translated">경고 :이 ProxyMetaClass 구현은 스레드로부터 안전하지 않으므로 단일 스레드에서 실행되는 인스턴스 별 MetaClass로만 사용해야합니다. 이 MetaClass를 MetaClassRegistry에 두지 마십시오. 예측할 수없는 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="042a3375575e982623fb464acebead4f0a8c8662" translate="yes" xml:space="preserve">
          <source>WARNING: this compilation is not synchronized</source>
          <target state="translated">경고 :이 컴파일은 동기화되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="0622fa6f890900e6d4a1c7713b76bfddf5fc2f8c" translate="yes" xml:space="preserve">
          <source>Wait for the process to finish during a certain amount of time, otherwise stops the process.</source>
          <target state="translated">프로세스가 일정 시간 동안 완료 될 때까지 기다리거나 그렇지 않으면 프로세스를 중지합니다.</target>
        </trans-unit>
        <trans-unit id="aad668a4d7ecead3a6b33d9af2fc546f674e4b29" translate="yes" xml:space="preserve">
          <source>Walks the AST and collects references to annotations that are annotated themselves by &lt;a href=&quot;groovyasttransformation&quot;&gt;GroovyASTTransformation&lt;/a&gt;. Each such annotation is added.</source>
          <target state="translated">AST를 &lt;a href=&quot;groovyasttransformation&quot;&gt;탐색&lt;/a&gt; 하고 GroovyASTTransformation에 의해 자체적으로 주석이 추가 된 주석에 대한 참조를 수집합니다 . 이러한 각 주석이 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="faeac8ce2363a5449dd093289770b9ea3a36992a" translate="yes" xml:space="preserve">
          <source>Warning: this method does not choose properly if multiple methods with the same distance are encountered</source>
          <target state="translated">경고 :이 방법은 거리가 같은 여러 방법이 발견되면 제대로 선택되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a3fbc34363c1b282cb2a05e33b15897fd75f577d" translate="yes" xml:space="preserve">
          <source>WarningMessages collected during processing</source>
          <target state="translated">처리 중 수집 된 경고 메시지</target>
        </trans-unit>
        <trans-unit id="35e616144353150221815823cd693315fe34a539" translate="yes" xml:space="preserve">
          <source>We can also access stored functions with scalar return values where the return value will be treated as an OUT parameter. Here are examples for various databases for creating such a procedure:</source>
          <target state="translated">또한 반환 값이 OUT 매개 변수로 처리되는 스칼라 반환 값을 사용하여 저장된 함수에 액세스 할 수도 있습니다. 다음은 이러한 절차를 생성하기위한 다양한 데이터베이스의 예입니다.</target>
        </trans-unit>
        <trans-unit id="93ca7454ee1ceff47bc9a7007384ce2feef0a8a2" translate="yes" xml:space="preserve">
          <source>We can also be a little more dynamic and not require the CollegeStudent class to be defined at all, e.g.:</source>
          <target state="translated">또한 조금 더 역동적 일 수 있으며 CollegeStudent 클래스를 전혀 정의 할 필요가 없습니다. 예 :</target>
        </trans-unit>
        <trans-unit id="846a65925494d661a00c1c1b53f021c94ae30c85" translate="yes" xml:space="preserve">
          <source>We can mimic a form of multiple inheritance as follows:</source>
          <target state="translated">다음과 같이 다중 상속의 형태를 모방 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="08f4ea41638986ed3b94e402ee85abf08b05ac7f" translate="yes" xml:space="preserve">
          <source>We don't want to return the node as created in &lt;a href=&quot;#createNode(java.lang.Object,%20java.util.Map,%20java.lang.Object)&quot;&gt;createNode(Object, Map, Object)&lt;/a&gt; but the one made ready by &lt;a href=&quot;#nodeCompleted(java.lang.Object,%20java.lang.Object)&quot;&gt;nodeCompleted(Object, Object)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#createNode(java.lang.Object,%20java.util.Map,%20java.lang.Object)&quot;&gt;createNode (Object, Map, Object)&lt;/a&gt; 에서 생성 된 노드를 반환하지 않고 &lt;a href=&quot;#nodeCompleted(java.lang.Object,%20java.lang.Object)&quot;&gt;nodeCompleted (Object, Object)에&lt;/a&gt; 의해 준비된 노드를 반환하고 싶지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d9e48aa40dde42f72149ca3fa6c832656fbffdb5" translate="yes" xml:space="preserve">
          <source>We have an AST subclass so we can track source information. Very odd that ANTLR doesn't do this by default.</source>
          <target state="translated">소스 정보를 추적 할 수 있도록 AST 하위 클래스가 있습니다. ANTLR이 기본적으로이를 수행하지 않는 것은 매우 이상합니다.</target>
        </trans-unit>
        <trans-unit id="f64c03ed992234fa8e1221edf671b0b102c4fbe4" translate="yes" xml:space="preserve">
          <source>We parameterize the above interface as &lt;code&gt;Function&amp;lt;String, Integer&amp;gt;&lt;/code&gt;, then the abstract method will be</source>
          <target state="translated">위의 인터페이스를 &lt;code&gt;Function&amp;lt;String, Integer&amp;gt;&lt;/code&gt; 로 매개 변수화하면 추상 메서드는</target>
        </trans-unit>
        <trans-unit id="2d25d3677760a9feed6d167625442ae5e9d3a29c" translate="yes" xml:space="preserve">
          <source>We then curry in the parentClass and stringSectionList arguments so that the StreamingTemplate instance returned from 'createTemplate' internally contains a template closure on the form:</source>
          <target state="translated">그런 다음 parentClass 및 stringSectionList 인수를 커리하여 'createTemplate'에서 반환 된 StreamingTemplate 인스턴스가 내부적으로 양식에 템플릿 클로저를 포함하도록합니다.</target>
        </trans-unit>
        <trans-unit id="842bd279acd9aa8d1eff7402851f2156ec40f6fe" translate="yes" xml:space="preserve">
          <source>What this means is largely down to the MetaClass implementation, however the default case would result in an attempt to invoke a JavaBean getter, or if no such getter exists a public field of the instance.</source>
          <target state="translated">이것이 의미하는 바는 대부분 MetaClass 구현에 달려 있지만 기본 경우 JavaBean getter를 호출하려고 시도하거나 그러한 getter가 인스턴스의 공용 필드가없는 경우에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="34ee27b62c303b2054a006bbd51b20c05701975c" translate="yes" xml:space="preserve">
          <source>What this means is largely down to the MetaClass implementation, however the default case would result in an attempt to invoke a JavaBean setter, or if no such setter exists to set a public field of the instance.</source>
          <target state="translated">이것이 의미하는 바는 대부분 MetaClass 구현에 달려 있지만, 기본 케이스는 JavaBean setter를 호출하려고 시도하거나 인스턴스의 공용 필드를 설정하기 위해 그러한 setter가 존재하지 않는 경우입니다.</target>
        </trans-unit>
        <trans-unit id="8f8b51b64510af7f5d2bb0ed2ee795a7c44feaed" translate="yes" xml:space="preserve">
          <source>What this means is largely down to the MetaClass implementation, however the default case would result in an attempt to set a field of the instance.</source>
          <target state="translated">이것이 의미하는 바는 주로 MetaClass 구현에 달려 있지만 기본 경우 인스턴스의 필드를 설정하려는 시도가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c23e0904add01a28ba3e1a513b98478bd8d1522d" translate="yes" xml:space="preserve">
          <source>What this means is largely down to the MetaClass implementation, however the default case would result in attempt to read a field of the instance.</source>
          <target state="translated">이것이 의미하는 바는 크게 MetaClass 구현에 달려 있지만 기본 경우 인스턴스의 필드를 읽으려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="c4ee53615d249085a5e208815ccf5250be5afcb6" translate="yes" xml:space="preserve">
          <source>When a class is annotated, all methods, properties, files, inner classes, etc. of the annotated class will be type checked. When a method is annotated, static compilation applies only to items (closures and anonymous inner classes) within the method.</source>
          <target state="translated">클래스에 주석을 달면 주석이 달린 클래스의 모든 메서드, 속성, 파일, 내부 클래스 등이 유형 검사됩니다. 메서드에 주석이 추가되면 정적 컴파일은 메서드 내의 항목 (클로저 및 익명 내부 클래스)에만 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="48d9a4820ca430fa39119888cbba12a08b52523c" translate="yes" xml:space="preserve">
          <source>When annotating a class it indicates that all groovy properties in that class should be bound as though each property had the annotation (even if it already has it explicitly).</source>
          <target state="translated">클래스에 주석을 달 때 해당 클래스의 모든 그루비 속성은 마치 각 속성에 주석이있는 것처럼 바인딩되어야 함을 나타냅니다 (이미 명시 적으로 포함되어 있더라도).</target>
        </trans-unit>
        <trans-unit id="14137c6ccfe581cd4629101cd66aba67f98cb9c6" translate="yes" xml:space="preserve">
          <source>When annotating a property it indicates that the property should be a constrained property according to the JavaBeans spec, subject to listeners vetoing the property change.</source>
          <target state="translated">속성에 주석을 달 때 속성 변경을 거부하는 리스너에 따라 속성이 JavaBeans 사양에 따라 제한된 속성이어야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d2179b708b9ffd0262bafb5cb957964d26ff3fce" translate="yes" xml:space="preserve">
          <source>When constant expressions are created, the value is always wrapped to a non primitive type.</source>
          <target state="translated">상수 표현식이 작성되면 값은 항상 원시 유형이 아닌 유형으로 랩핑됩니다.</target>
        </trans-unit>
        <trans-unit id="a7c3f960a5f1f1419dd0c7351bf336b2e89fd01a" translate="yes" xml:space="preserve">
          <source>When constant expressions are created, the value is always wrapped to a non primitive type. Some constant expressions are optimized to return primitive types, but not all primitives are handled. This method guarantees to return a similar constant expression but with a primitive type instead of a boxed type.</source>
          <target state="translated">상수 표현식이 작성되면 값은 항상 원시 유형이 아닌 유형으로 랩핑됩니다. 일부 상수 표현식은 기본 유형을 반환하도록 최적화되어 있지만 모든 기본 유형이 처리되는 것은 아닙니다. 이 메서드는 유사한 상수 식을 반환하지만 boxed 형식 대신 기본 형식을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="c3e27a5f17a7ab190dfa97efcf68f324c2eb71d7" translate="yes" xml:space="preserve">
          <source>When extracting the code for the test, single-line snippets of code without braces within a {&lt;code&gt;@code&lt;/code&gt; ...} tag will have the javadoc &lt;code&gt;code&lt;/code&gt; tag stripped. Similarly, html entities are converted back when extracting code, so &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; will be converted to &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">테스트 용 코드를 추출 할 때 { &lt;code&gt;@code&lt;/code&gt; ...} 태그 내에 중괄호가없는 한 줄짜리 코드 스 니펫은 javadoc &lt;code&gt;code&lt;/code&gt; 태그가 제거됩니다. 그래서, 코드를 추출 할 때 마찬가지로 HTML 엔티티는 다시 변환되어 &lt;code&gt;&amp;lt;&lt;/code&gt; 및 &lt;code&gt;&amp;gt;&lt;/code&gt; 로 변환한다 &lt;code&gt;&amp;lt;&lt;/code&gt; 및 &lt;code&gt;&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="be09708cb053c7d77b697f3abb6e2c2193508604" translate="yes" xml:space="preserve">
          <source>When instanceof checks are found in the code, we store temporary type information data in the &lt;a href=&quot;typecheckingcontext#temporaryIfBranchTypeInformation&quot;&gt;TypeCheckingContext.temporaryIfBranchTypeInformation&lt;/a&gt; table.</source>
          <target state="translated">코드에서 instanceof 검사가 발견되면 &lt;a href=&quot;typecheckingcontext#temporaryIfBranchTypeInformation&quot;&gt;TypeCheckingContext.temporaryIfBranchTypeInformation&lt;/a&gt; 테이블 에 임시 유형 정보 데이터를 저장 합니다.</target>
        </trans-unit>
        <trans-unit id="9ba5113227fe977542d5e609ad80336059a7a4fa" translate="yes" xml:space="preserve">
          <source>When instanceof checks are found in the code, we store temporary type information data in the &lt;a href=&quot;typecheckingcontext#temporaryIfBranchTypeInformation&quot;&gt;TypeCheckingContext.temporaryIfBranchTypeInformation&lt;/a&gt; table. This method computes the key which must be used to store this type info.</source>
          <target state="translated">코드에서 instanceof 검사가 발견되면 &lt;a href=&quot;typecheckingcontext#temporaryIfBranchTypeInformation&quot;&gt;TypeCheckingContext.temporaryIfBranchTypeInformation&lt;/a&gt; 테이블 에 임시 유형 정보 데이터를 저장 합니다. 이 메소드는이 유형 정보를 저장하는 데 사용해야하는 키를 계산합니다.</target>
        </trans-unit>
        <trans-unit id="0dd44ef2b125c990cff462a563afcd291c80c522" translate="yes" xml:space="preserve">
          <source>When setting the log level of this class to FINEST, all file loading will be logged.</source>
          <target state="translated">이 클래스의 로그 수준을 FINEST로 설정하면 모든 파일로드가 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="ae9224762c3907245c4f646ef2204c9205c9fa2d" translate="yes" xml:space="preserve">
          <source>When the collector annotation is replaced, whether to check for duplicates between the replacement annotations and existing explicit annotations.</source>
          <target state="translated">컬렉터 주석이 교체 될 때 교체 주석과 기존 명시 적 주석 간의 중복 여부를 확인할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="53d5b8739e59a18422de27f026d039dca7ff4024" translate="yes" xml:space="preserve">
          <source>When the collector annotation is replaced, whether to check for duplicates between the replacement annotations and existing explicit annotations. If you use a custom processor, it is up to that processor whether it honors or ignores this parameter. The default processor honors the parameter.</source>
          <target state="translated">컬렉터 주석이 교체 될 때 교체 주석과 기존 명시 적 주석 간의 중복 여부를 확인할지 여부입니다. 사용자 정의 프로세서를 사용하는 경우이 매개 변수를 준수하거나 무시하는지 여부는 해당 프로세서에 달려 있습니다. 기본 프로세서는 매개 변수를 따릅니다.</target>
        </trans-unit>
        <trans-unit id="c7cf59915b40893d989432ecbd85ed8267838ecf" translate="yes" xml:space="preserve">
          <source>When the delegate type is an interface, the &lt;code&gt;deprecated&lt;/code&gt; attribute will be ignored if the owner class implements that interface (i.e. you must set &lt;code&gt;interfaces=false&lt;/code&gt; if you want the &lt;code&gt;deprecated&lt;/code&gt; attribute to be used). Otherwise, the resulting class would not compile anyway without manually adding in any deprecated methods in the interface.</source>
          <target state="translated">위임 유형이 인터페이스 인 경우 소유자 클래스가 해당 인터페이스를 구현하면 &lt;code&gt;deprecated&lt;/code&gt; 속성이 무시됩니다 (즉 , &lt;code&gt;deprecated&lt;/code&gt; 속성을 사용 하려면 &lt;code&gt;interfaces=false&lt;/code&gt; 를 설정해야합니다 ). 그렇지 않으면 결과 클래스는 인터페이스에서 더 이상 사용되지 않는 메서드를 수동으로 추가하지 않으면 컴파일되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="790fbd548672437ec8a5031dbb9def443c511c14" translate="yes" xml:space="preserve">
          <source>When the exceptions are not enough, it might sometimes be useful to view the actual script source generated by the template engine. This would conceptually be equivalent to viewing the .java file generated for a jsp page. The source is not currently very readable and until we get a built in groovy code pretty printer, we will probably continue to opt for compactness rather than readability.</source>
          <target state="translated">예외가 충분하지 않은 경우 템플릿 엔진에서 생성 한 실제 스크립트 소스를 보는 것이 유용 할 수 있습니다. 이것은 개념적으로 jsp 페이지에 대해 생성 된 .java 파일을 보는 것과 같습니다. 소스는 현재 그다지 가독성이 떨어지며 내장 된 멋진 코드 예쁜 프린터를 얻을 때까지 가독성보다는 간결함을 계속 선택할 것입니다.</target>
        </trans-unit>
        <trans-unit id="2693c918b6357fdcafaf657a9d2d78f584021ea6" translate="yes" xml:space="preserve">
          <source>When this task executes, it will recursively scan srcdir and destdir looking for Groovy source files to compile. This task makes its compile decision based on timestamp.</source>
          <target state="translated">이 작업이 실행되면 컴파일 할 Groovy 소스 파일을 찾기 위해 srcdir 및 destdir을 재귀 적으로 검색합니다. 이 작업은 타임 스탬프를 기반으로 컴파일 결정을 내립니다.</target>
        </trans-unit>
        <trans-unit id="7a7297f53e49a0f8b3645198b2d9e245327664ba" translate="yes" xml:space="preserve">
          <source>When this task executes, it will recursively scan the dir and look for class files to verify.</source>
          <target state="translated">이 작업이 실행되면 dir을 재귀 적으로 스캔하고 확인할 클래스 파일을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="4d91123be67790374aa1e5d1158a37d2b96f5b98" translate="yes" xml:space="preserve">
          <source>When using GString SQL queries, allows a variable to be expanded in the Sql string rather than representing an sql parameter.</source>
          <target state="translated">GString SQL 쿼리를 사용할 때 SQL 매개 변수를 나타내는 대신 Sql 문자열에서 변수를 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="51215a4f333ecdd3998b20cabe9c1427ef7188b5" translate="yes" xml:space="preserve">
          <source>When using the default implementations of MetaClass, methods are only allowed to be added before initialize() is called. In other words you create a new MetaClass, add some methods and then call initialize(). If you attempt to add new methods after initialize() has been called, an error will be thrown. This is to ensure that the MetaClass can operate appropriately in multi-threaded environments as it forces you to do all method additions at the beginning, before using the MetaClass.</source>
          <target state="translated">MetaClass의 기본 구현을 사용하는 경우 initialize ()가 호출되기 전에 만 메소드를 추가 할 수 있습니다. 즉, 새 MetaClass를 만들고 몇 가지 메서드를 추가 한 다음 initialize ()를 호출합니다. initialize ()가 호출 된 후 새 메서드를 추가하려고하면 오류가 발생합니다. 이는 MetaClass를 사용하기 전에 처음에 모든 메소드 추가를 수행하도록 강제하므로 MetaClass가 다중 스레드 환경에서 적절하게 작동 할 수 있도록하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="e9e556a9d8d8ee9cf8b56d7196ed8aeb46540226" translate="yes" xml:space="preserve">
          <source>When using the default prefix of &quot;set&quot;, Groovy's normal setters will be replaced by the chained versions. When using a custom prefix, Groovy's unchained setters will still be available for use in the normal unchained fashion. The 'useSetters' annotation attribute can be used for writable properties as per the &lt;code&gt;Builder&lt;/code&gt; transform documentation. The other annotation attributes for the &lt;code&gt;@Builder&lt;/code&gt; transform for configuring the building process aren't applicable for this strategy.</source>
          <target state="translated">기본 접두사 &quot;set&quot;를 사용하면 Groovy의 일반 setter가 체인 버전으로 대체됩니다. 사용자 지정 접두사를 사용할 때 Groovy의 연결 해제 된 setter는 일반 연결 해제 방식으로 계속 사용할 수 있습니다. &lt;code&gt;Builder&lt;/code&gt; 변환 문서에 따라 쓰기 가능한 속성에 'useSetters'주석 속성을 사용할 수 있습니다 . 빌드 프로세스를 구성하기위한 &lt;code&gt;@Builder&lt;/code&gt; 변환 의 다른 주석 속성 은이 전략에 적용 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="d14b580ab39c9a99a7c3e9773fdbc7b19730c279" translate="yes" xml:space="preserve">
          <source>When we call &lt;code&gt;parameterizeSAM&lt;/code&gt; on the ClassNode &lt;code&gt;Function&amp;lt;String, Integer&amp;gt;&lt;/code&gt;, we can get parameter types and return type of the above abstract method, i.e. ClassNode &lt;code&gt;ClassHelper.STRING_TYPE&lt;/code&gt; and &lt;code&gt;ClassHelper.Integer_TYPE&lt;/code&gt;</source>
          <target state="translated">ClassNode &lt;code&gt;Function&amp;lt;String, Integer&amp;gt;&lt;/code&gt; 에서 &lt;code&gt;parameterizeSAM&lt;/code&gt; 을 호출 하면 위의 추상 메서드 (예 : ClassNode &lt;code&gt;ClassHelper.STRING_TYPE&lt;/code&gt; 및 &lt;code&gt;ClassHelper.Integer_TYPE&lt;/code&gt; )의 매개 변수 유형 및 반환 유형을 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="36ea8d0ef94b2ea3c86b83673c463dd584dc0573" translate="yes" xml:space="preserve">
          <source>Whenever a method using a closure as argument (typically, &quot;with&quot;) is detected, this list is updated with the receiver type of the with method.</source>
          <target state="translated">클로저를 인수로 사용하는 메소드 (일반적으로 &quot;with&quot;)가 감지 될 때마다이 목록은 with 메소드의 수신자 유형으로 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="48c52710f5f41d468ebcc78041788476ae465e12" translate="yes" xml:space="preserve">
          <source>Whenever the type checker encounters a method call that targets a method accepting a closure, it will search for the &lt;a href=&quot;closureparams&quot;&gt;ClosureParams&lt;/a&gt; annotation on the &lt;a href=&quot;../../lang/closure&quot;&gt;Closure&lt;/a&gt; argument. If it is found, then it creates an instance of the hint class and calls the &lt;a href=&quot;#getClosureSignatures(org.codehaus.groovy.ast.MethodNode,%20org.codehaus.groovy.control.SourceUnit,%20org.codehaus.groovy.control.CompilationUnit,%20java.lang.String,%20org.codehaus.groovy.ast.ASTNode)&quot;&gt;getClosureSignatures(org.codehaus.groovy.ast.MethodNode, org.codehaus.groovy.control.SourceUnit, org.codehaus.groovy.control.CompilationUnit, String[], org.codehaus.groovy.ast.ASTNode)&lt;/a&gt; method, which will in turn return the list of signatures.</source>
          <target state="translated">유형 검사기가 클로저를 수락하는 메서드를 대상으로하는 메서드 호출을 만날 때마다 &lt;a href=&quot;../../lang/closure&quot;&gt;Closure&lt;/a&gt; 인수 에서 &lt;a href=&quot;closureparams&quot;&gt;ClosureParams&lt;/a&gt; 주석을 검색합니다 . 발견되면 힌트 클래스의 인스턴스를 생성하고 &lt;a href=&quot;#getClosureSignatures(org.codehaus.groovy.ast.MethodNode,%20org.codehaus.groovy.control.SourceUnit,%20org.codehaus.groovy.control.CompilationUnit,%20java.lang.String,%20org.codehaus.groovy.ast.ASTNode)&quot;&gt;getClosureSignatures (org.codehaus.groovy.ast.MethodNode, org.codehaus.groovy.control.SourceUnit, org.codehaus.groovy.control.CompilationUnit, String을&lt;/a&gt; 호출합니다. [], org.codehaus.groovy.ast.ASTNode) 메서드를 사용하여 서명 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a80fd325a25971e25fd5860150a5571bd16cbadb" translate="yes" xml:space="preserve">
          <source>Where we can get Readers for our source unit</source>
          <target state="translated">소스 유닛에 대한 리더를 얻을 수있는 곳</target>
        </trans-unit>
        <trans-unit id="f1c48344d54a871af4514920b3c45ad4e1f8029b" translate="yes" xml:space="preserve">
          <source>Whether a MetaClass allows mutation is up to the MetaClass itself and considerations of Thread safety need to be taken into account when making a MetaClass mutable</source>
          <target state="translated">MetaClass가 변형을 허용하는지 여부는 MetaClass 자체에 달려 있으며 MetaClass를 변경 가능하게 만들 때 스레드 안전성을 고려해야합니다.</target>
        </trans-unit>
        <trans-unit id="a5cac7cacd4b101e695877e9a17bc173fdcc362c" translate="yes" xml:space="preserve">
          <source>Whether ansi support is available</source>
          <target state="translated">ANSI 지원이 가능한지 여부</target>
        </trans-unit>
        <trans-unit id="ce3837b991b6317a280c956678feee16b399e128" translate="yes" xml:space="preserve">
          <source>Whether arguments of the form '&lt;code&gt;@&lt;/code&gt;</source>
          <target state="translated">' &lt;code&gt;@&lt;/code&gt; 형식의 인수 여부</target>
        </trans-unit>
        <trans-unit id="6e4354efa1f9babd23c0eae1a94c7e3c909bf8ec" translate="yes" xml:space="preserve">
          <source>Whether empty elements are expanded from &amp;lt;tagName/&amp;gt; to &amp;lt;tagName&amp;gt;&amp;lt;/tagName&amp;gt;.</source>
          <target state="translated">빈 요소가 &amp;lt;tagName /&amp;gt;에서 &amp;lt;tagName&amp;gt; &amp;lt;/ tagName&amp;gt; (으)로 확장되는지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="8c69583a20db26944cdd15e2d712ef5ab8965afb" translate="yes" xml:space="preserve">
          <source>Whether ignorable whitespace (e.g. whitespace between elements) is kept (default false).</source>
          <target state="translated">무시할 수있는 공백 (예 : 요소 사이의 공백)을 유지할지 여부 (기본값 false).</target>
        </trans-unit>
        <trans-unit id="26e0f5207dffb5a024e86d3beddf698d26d44d66" translate="yes" xml:space="preserve">
          <source>Whether ignorable whitespace (e.g. whitespace between elements) is kept (default false). WARNING: this is a global setting. Altering it will affect all DOMCategory usage within the current Java process.</source>
          <target state="translated">무시할 수있는 공백 (예 : 요소 사이의 공백)을 유지할지 여부 (기본값 false). 경고 : 이것은 전역 설정입니다. 변경하면 현재 Java 프로세스 내의 모든 DOMCategory 사용에 영향을줍니다.</target>
        </trans-unit>
        <trans-unit id="1a7c077c1ff491e2271b1fbcc0d8c555b6b8cc8c" translate="yes" xml:space="preserve">
          <source>Whether or not the methods created should be synchronized at the method level.</source>
          <target state="translated">생성 된 메서드가 메서드 수준에서 동기화되어야하는지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="5e58cf6a4b5b7561ea2bf1a0342a0635b0e43b3e" translate="yes" xml:space="preserve">
          <source>Whether output should be appended to or overwrite an existing file.</source>
          <target state="translated">출력을 기존 파일에 추가하거나 덮어 쓸지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="fb301632b05b7d93d74bf3478de5109258836a53" translate="yes" xml:space="preserve">
          <source>Whether output should be appended to or overwrite an existing file. Defaults to false.</source>
          <target state="translated">출력을 기존 파일에 추가하거나 덮어 쓸지 여부입니다. 기본값은 false입니다.</target>
        </trans-unit>
        <trans-unit id="91e02ff9540a8689903c79ececd6b205574f648f" translate="yes" xml:space="preserve">
          <source>Whether stdin, stdout, stderr streams are saved.</source>
          <target state="translated">stdin, stdout, stderr 스트림 저장 여부.</target>
        </trans-unit>
        <trans-unit id="635bee72462c72cb704dd30a3ebef8919f127f3f" translate="yes" xml:space="preserve">
          <source>Whether text content is trimmed (removing leading and trailing whitespace); default false.</source>
          <target state="translated">텍스트 내용이 잘리는 지 여부 (선행 및 후행 공백 제거) 기본값은 거짓입니다.</target>
        </trans-unit>
        <trans-unit id="c7a8cc18334271ed0684f047e3a62acec4948035" translate="yes" xml:space="preserve">
          <source>Whether text content is trimmed (removing leading and trailing whitespace); default false. WARNING: this is a global setting. Altering it will affect all DOMCategory usage within the current Java process. It is not recommended that this is altered; instead call the trim() method on the returned text, but the flag is available to support legacy Groovy behavior.</source>
          <target state="translated">텍스트 내용이 잘리는 지 여부 (선행 및 후행 공백 제거) 기본값은 거짓입니다. 경고 : 이것은 전역 설정입니다. 변경하면 현재 Java 프로세스 내의 모든 DOMCategory 사용에 영향을줍니다. 변경하지 않는 것이 좋습니다. 대신 반환 된 텍스트에서 trim () 메서드를 호출하지만 플래그는 레거시 Groovy 동작을 지원하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c76f259182087ce1950edc41f40cbe76920407b" translate="yes" xml:space="preserve">
          <source>Whether the bytecode version has preview features enabled (JEP 12)</source>
          <target state="translated">바이트 코드 버전에 미리보기 기능이 활성화되어 있는지 여부 (JEP 12)</target>
        </trans-unit>
        <trans-unit id="9a47576a058ccb8913772ba6acfcb641b0eeb81c" translate="yes" xml:space="preserve">
          <source>Whether the generated builder should support all properties, including those with names that are considered internal.</source>
          <target state="translated">생성 된 빌더가 내부로 간주되는 이름을 가진 특성을 포함하여 모든 특성을 지원해야하는지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="2686867e06febea2b74c5e9099491e71a22e607d" translate="yes" xml:space="preserve">
          <source>Whether the method was called in a static way, i.e. on a class rather than an object.</source>
          <target state="translated">메서드가 정적 방식, 즉 객체가 아닌 클래스에서 호출되었는지 여부.</target>
        </trans-unit>
        <trans-unit id="e2157cb644caa24acb522adfe3e7570317075ee2" translate="yes" xml:space="preserve">
          <source>Whether this option can have an optional argument.</source>
          <target state="translated">이 옵션이 선택적 인수를 가질 수 있는지 여부.</target>
        </trans-unit>
        <trans-unit id="c9f176fb404d63e0ec58fa1f9ac436f4b74e2697" translate="yes" xml:space="preserve">
          <source>Whether this option can have an optional argument. Only supported for array-typed arguments to indicate that the array may be empty.</source>
          <target state="translated">이 옵션이 선택적 인수를 가질 수 있는지 여부. 배열이 비어있을 수 있음을 나타내는 배열 유형 인수에 대해서만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="c37a87563fe6b437927144f1d7cf7cbcdea816cd" translate="yes" xml:space="preserve">
          <source>Whether to always include helper constructors.</source>
          <target state="translated">도우미 생성자를 항상 포함할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="cab010ea4df9112c407497042f512b4081ff61e1" translate="yes" xml:space="preserve">
          <source>Whether to always include helper constructors. Currently only supported by InitializerStrategy. By default, the InitializerStrategy only adds a needed helper tuple constructor if no &lt;code&gt;@TupleConstructor&lt;/code&gt; annotations are present. If such annotations are present, it is assumed they will provide the helper constructor that this strategy needs. If made true, the helper constructor will be generated and it is up to you to make sure this doesn't conflict with any other generated constructors.</source>
          <target state="translated">도우미 생성자를 항상 포함할지 여부입니다. 현재 InitializerStrategy에서만 지원됩니다. 기본적으로 InitializerStrategy는 &lt;code&gt;@TupleConstructor&lt;/code&gt; 주석이 없는 경우 필요한 도우미 튜플 생성자 만 추가합니다 . 이러한 주석이있는 경우이 전략에 필요한 도우미 생성자를 제공한다고 가정합니다. true로 설정하면 도우미 생성자가 생성되며 생성 된 다른 생성자와 충돌하지 않는지 확인하는 것은 사용자에게 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="009a574c0af6a9a0dafd5145f7836e20199fca44" translate="yes" xml:space="preserve">
          <source>Whether to apply the delegate pattern to all methods, including those with names that are considered internal.</source>
          <target state="translated">내부로 간주되는 이름을 가진 메서드를 포함하여 모든 메서드에 대리자 패턴을 적용할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="ac65eb26a58ded5f4e1660389a09faae716ed795" translate="yes" xml:space="preserve">
          <source>Whether to apply the delegate pattern to deprecated methods; to avoid compilation errors, this is ignored if the type of the delegate target is an interface and &lt;code&gt;interfaces=true&lt;/code&gt;.</source>
          <target state="translated">사용되지 않는 메서드에 대리자 패턴을 적용할지 여부. 컴파일 오류를 방지하기 위해 위임 대상의 유형이 인터페이스이고 &lt;code&gt;interfaces=true&lt;/code&gt; 인 경우 무시됩니다 .</target>
        </trans-unit>
        <trans-unit id="4799bf20eb66610946c709080bca3f7dca67294f" translate="yes" xml:space="preserve">
          <source>Whether to cache hashCode calculations.</source>
          <target state="translated">hashCode 계산을 캐시할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="2615a140868ccfc2f07a8c6dd5b926867951f1a9" translate="yes" xml:space="preserve">
          <source>Whether to cache hashCode calculations. You should only set this to true if you know the object is immutable (or technically mutable but never changed).</source>
          <target state="translated">hashCode 계산을 캐시할지 여부입니다. 객체가 불변 (또는 기술적으로 변경 가능하지만 변경되지 않은 경우)을 알고있는 경우에만이 값을 true로 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="410b9ad1a2a3a528e7e455abdfe304228c5e2c94" translate="yes" xml:space="preserve">
          <source>Whether to cache toString() calculations.</source>
          <target state="translated">toString () 계산을 캐시할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="41a70a8c446e293e10be75a9e4bd033effd4209d" translate="yes" xml:space="preserve">
          <source>Whether to cache toString() calculations. You should only set this to true if you know the object is immutable (or technically mutable but never changed).</source>
          <target state="translated">toString () 계산을 캐시할지 여부입니다. 객체가 불변 (또는 기술적으로 변경 가능하지만 변경되지 않은 경우)을 알고있는 경우에만이 값을 true로 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="0729418f73a148560fc29acc0c304a7f9d4bf0f9" translate="yes" xml:space="preserve">
          <source>Whether to carry over annotations from the methods of the delegate to your delegating method.</source>
          <target state="translated">위임 메서드에서 위임 메서드로 주석을 전달할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="f577e2da57ad358875b56e322fbc8bac4ceb4909" translate="yes" xml:space="preserve">
          <source>Whether to carry over annotations from the methods of the delegate to your delegating method. Currently Closure annotation members are not supported.</source>
          <target state="translated">위임 메서드에서 위임 메서드로 주석을 전달할지 여부입니다. 현재 클로저 주석 멤버는 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7f8598887ff0bbb5222973f6e6c11d1e4ae73e6a" translate="yes" xml:space="preserve">
          <source>Whether to carry over annotations from the parameters of delegate methods to your delegating method.</source>
          <target state="translated">위임 메소드의 매개 변수에서 위임 메소드로 주석을 전달할지 여부.</target>
        </trans-unit>
        <trans-unit id="4ac2f36d68b0882eae46787a9b2906597e62b832" translate="yes" xml:space="preserve">
          <source>Whether to carry over annotations from the parameters of delegate methods to your delegating method. Currently Closure annotation members are not supported.</source>
          <target state="translated">위임 메소드의 매개 변수에서 위임 메소드로 주석을 전달할지 여부. 현재 클로저 주석 멤버는 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="25d5e6b1bbf41735a5a39986bbce443f939e5a6c" translate="yes" xml:space="preserve">
          <source>Whether to carry over annotations on the copied constructors.</source>
          <target state="translated">복사 된 생성자에 주석을 전달할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="43b5d7e71013dc953e4f6e5eb64f390a304fbd5f" translate="yes" xml:space="preserve">
          <source>Whether to carry over annotations on the copied constructors. Currently Closure annotation members are not supported.</source>
          <target state="translated">복사 된 생성자에 주석을 전달할지 여부입니다. 현재 클로저 주석 멤버는 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="12c733e40e1c9fcaccce5a7161f0bde0498c8cfe" translate="yes" xml:space="preserve">
          <source>Whether to carry over parameter annotations on the copied constructors.</source>
          <target state="translated">복사 된 생성자에 매개 변수 주석을 전달할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="0597e28613a0810cd63bcb92e095c906e4a93ba7" translate="yes" xml:space="preserve">
          <source>Whether to carry over parameter annotations on the copied constructors. Currently Closure annotation members are not supported.</source>
          <target state="translated">복사 된 생성자에 매개 변수 주석을 전달할지 여부입니다. 현재 클로저 주석 멤버는 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="080f289b359f368abde929003ee3c59b5cf37973" translate="yes" xml:space="preserve">
          <source>Whether to include all fields and/or properties in equals and hashCode calculations, including those with names that are considered internal.</source>
          <target state="translated">내부로 간주되는 이름을 포함한 모든 필드 및 / 또는 속성을 같음 및 hashCode 계산에 포함할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="ba946cba51bff700e3d7c8ae58de552233cb06d9" translate="yes" xml:space="preserve">
          <source>Whether to include all fields and/or properties in the comparison algorithm, including those with names that are considered internal.</source>
          <target state="translated">내부로 간주되는 이름을 포함한 모든 필드 및 / 또는 속성을 비교 알고리즘에 포함할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="a888b559d5c7ee3a9ea2ec3d6ff56f73c00ec343" translate="yes" xml:space="preserve">
          <source>Whether to include all fields and/or properties in the generated toString, including those with names that are considered internal.</source>
          <target state="translated">내부로 간주되는 이름을 포함하여 생성 된 toString에 모든 필드 및 / 또는 속성을 포함할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="f0e550c675820d7c187825e93a7a9269b0643fa1" translate="yes" xml:space="preserve">
          <source>Whether to include all fields and/or properties within the constructor, including those with names that are considered internal.</source>
          <target state="translated">내부로 간주되는 이름을 포함하여 생성자 내에 모든 필드 및 / 또는 속성을 포함할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="0bdf8381b60e979184861901b719fcb40fb87a89" translate="yes" xml:space="preserve">
          <source>Whether to include all properties (as per the JavaBean spec) in the comparison algorithm.</source>
          <target state="translated">비교 알고리즘에 모든 속성 (JavaBean 사양에 따라)을 포함할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="a49444c55dcdeb12b816c93b01fe3bf2b85c4205" translate="yes" xml:space="preserve">
          <source>Whether to include all properties (as per the JavaBean spec) in the comparison algorithm. Groovy recognizes any field-like definitions with no explicit visibility as property definitions and always includes them in the comparison algorithm. Groovy also treats any explicitly created getXxx() or isYyy() methods as property getters as per the JavaBean specification. Set this flag to false explicitly exclude such properties. JavaBean properties come after any Groovy properties for a given class (unless 'includes' is used to determine the order).</source>
          <target state="translated">비교 알고리즘에 모든 속성 (JavaBean 사양에 따라)을 포함할지 여부입니다. Groovy는 명시 적 가시성이없는 필드와 유사한 정의를 속성 정의로 인식하고 항상 비교 알고리즘에 포함합니다. Groovy는 또한 명시 적으로 생성 된 getXxx () 또는 isYyy () 메서드를 JavaBean 사양에 따라 속성 getter로 취급합니다. 이 플래그를 false로 설정하면 이러한 속성이 명시 적으로 제외됩니다. JavaBean 속성은 지정된 클래스의 Groovy 속성 뒤에옵니다 (순서를 결정하는 데 'includes'가 사용되지 않는 한).</target>
        </trans-unit>
        <trans-unit id="1bdb5120f75a9316b35b2fe3e24332a35883a1c5" translate="yes" xml:space="preserve">
          <source>Whether to include all properties (as per the JavaBean spec) in the generated builder.</source>
          <target state="translated">생성 된 빌더에 모든 특성 (JavaBean 스펙에 따라)을 포함할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="36c4c6305770c6c1e09a490f4e49191eae782744" translate="yes" xml:space="preserve">
          <source>Whether to include all properties (as per the JavaBean spec) in the generated builder. Groovy recognizes any field-like definitions with no explicit visibility as property definitions and always includes them in the &lt;code&gt;@Builder&lt;/code&gt; generated classes. Groovy also treats any explicitly created getXxx() or isYyy() methods as property getters as per the JavaBean specification. Old versions of Groovy did not. So set this flag to false for the old behavior or if you want to explicitly exclude such properties. Currently only supported by DefaultStrategy and ExternalStrategy.</source>
          <target state="translated">생성 된 빌더에 모든 특성 (JavaBean 스펙에 따라)을 포함할지 여부입니다. Groovy는 명시 적 가시성이없는 필드와 유사한 정의를 속성 정의로 인식하고 항상 &lt;code&gt;@Builder&lt;/code&gt; 생성 클래스 에 포함합니다 . Groovy는 또한 명시 적으로 생성 된 getXxx () 또는 isYyy () 메서드를 JavaBean 사양에 따라 속성 getter로 취급합니다. 이전 버전의 Groovy는 그렇지 않았습니다. 따라서 이전 동작이나 이러한 속성을 명시 적으로 제외하려면이 플래그를 false로 설정하십시오. 현재는 DefaultStrategy 및 ExternalStrategy에서만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="d15e3e39cf26fe3bfd6edb95db9c2b35a6f2c395" translate="yes" xml:space="preserve">
          <source>Whether to include all properties (as per the JavaBean spec) in the generated constructor.</source>
          <target state="translated">생성 된 생성자에 모든 속성 (JavaBean 사양에 따라)을 포함할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="4c37be046f95e582ebecdb3a9cd60829ea36c229" translate="yes" xml:space="preserve">
          <source>Whether to include all properties (as per the JavaBean spec) in the generated constructor. When true, Groovy treats any explicitly created setXxx() methods as property setters as per the JavaBean specification. JavaBean properties come after any Groovy properties but before any fields for a given class (unless 'includes' is used to determine the order).</source>
          <target state="translated">생성 된 생성자에 모든 속성 (JavaBean 사양에 따라)을 포함할지 여부입니다. true 인 경우 Groovy는 명시 적으로 생성 된 setXxx () 메서드를 JavaBean 사양에 따라 속성 설정 자로 처리합니다. JavaBean 속성은 Groovy 속성 뒤에 있지만 지정된 클래스의 필드 앞에옵니다 (순서를 결정하는 데 'includes'가 사용되지 않는 한).</target>
        </trans-unit>
        <trans-unit id="e32ea0a1287af162b4ed136d08fa55a6762298dc" translate="yes" xml:space="preserve">
          <source>Whether to include all properties (as per the JavaBean spec) in the generated toString.</source>
          <target state="translated">생성 된 toString에 모든 속성 (JavaBean 사양에 따라)을 포함할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="20e24a1007c6de8c0f3f3cbd955bdfdab189f0a0" translate="yes" xml:space="preserve">
          <source>Whether to include all properties (as per the JavaBean spec) in the generated toString. Groovy recognizes any field-like definitions with no explicit visibility as property definitions and always includes them in the &lt;code&gt;@ToString&lt;/code&gt; generated toString (as well as auto-generating the appropriate getters and setters). Groovy also treats any explicitly created getXxx() or isYyy() methods as property getters as per the JavaBean specification. Old versions of Groovy did not. So set this flag to false for the old behavior or if you want to explicitly exclude such properties. JavaBean properties come after any Groovy properties but before any fields for a given class (unless 'includes' is used to determine the order).</source>
          <target state="translated">생성 된 toString에 모든 속성 (JavaBean 사양에 따라)을 포함할지 여부입니다. Groovy는 명시 적 가시성이없는 필드와 같은 정의를 속성 정의로 인식하고 항상 &lt;code&gt;@ToString&lt;/code&gt; 생성 toString 에 포함합니다 (적절한 getter 및 setter 자동 생성). Groovy는 또한 명시 적으로 생성 된 getXxx () 또는 isYyy () 메서드를 JavaBean 사양에 따라 속성 getter로 취급합니다. 이전 버전의 Groovy는 그렇지 않았습니다. 따라서 이전 동작이나 이러한 속성을 명시 적으로 제외하려면이 플래그를 false로 설정하십시오. JavaBean 속성은 Groovy 속성 뒤에 있지만 지정된 클래스의 필드 앞에옵니다 (순서를 결정하는 데 'includes'가 사용되지 않는 한).</target>
        </trans-unit>
        <trans-unit id="c086436c6f41156b227b1d4c2ea763fc7e27f6f4" translate="yes" xml:space="preserve">
          <source>Whether to include names of properties/fields in the generated toString.</source>
          <target state="translated">생성 된 toString에 속성 / 필드의 이름을 포함할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="9ebab2d85a0c3f36404d92e55378701e03dc5ca0" translate="yes" xml:space="preserve">
          <source>Whether to include static properties in the constructor.</source>
          <target state="translated">생성자에 정적 속성을 포함할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="08dd071e87c40a5a0f1dcc997eaad6742cb93d88" translate="yes" xml:space="preserve">
          <source>Whether to include super in equals and hashCode calculations.</source>
          <target state="translated">equals 및 hashCode 계산에 super를 포함할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="f69d5b64222a378fa112107c391dbea1a1224784" translate="yes" xml:space="preserve">
          <source>Whether to include super properties in the comparison algorithm.</source>
          <target state="translated">비교 알고리즘에 슈퍼 속성을 포함할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="38ae41eba607fc983787c70504dffd27f8a762e3" translate="yes" xml:space="preserve">
          <source>Whether to include super properties in the comparison algorithm. Groovy properties and potentially JavaBean properties (in that order) from superclasses come before the members from a subclass (unless 'includes' is used to determine the order).</source>
          <target state="translated">비교 알고리즘에 슈퍼 속성을 포함할지 여부입니다. 슈퍼 클래스의 Groovy 속성과 잠재적으로 JavaBean 속성 (순서대로)은 하위 클래스의 멤버보다 먼저옵니다 (순서를 결정하는 데 'includes'가 사용되지 않는 한).</target>
        </trans-unit>
        <trans-unit id="cba0b093d64209fda0e29a5af6c1aeb87c51b3a6" translate="yes" xml:space="preserve">
          <source>Whether to include super properties in the generated toString.</source>
          <target state="translated">생성 된 toString에 슈퍼 속성을 포함할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="9d79025cb1a3cc055f307c6cde39ffa8ac00a4e8" translate="yes" xml:space="preserve">
          <source>Whether to include super properties in the generated toString. Groovy properties, JavaBean properties and fields (in that order) from superclasses come after the members from a subclass (unless 'includes' is used to determine the order).</source>
          <target state="translated">생성 된 toString에 슈퍼 속성을 포함할지 여부입니다. 수퍼 클래스의 Groovy 속성, JavaBean 속성 및 필드 (순서대로)는 하위 클래스의 멤버 뒤에옵니다 (순서를 결정하는 데 'includes'가 사용되지 않는 한).</target>
        </trans-unit>
        <trans-unit id="eef4265d08c97d24b340bde866d1b3f36ce5b8fa" translate="yes" xml:space="preserve">
          <source>Whether to include the fully-qualified class name (i.e. including the package) or just the simple class name in the generated toString.</source>
          <target state="translated">정규화 된 클래스 이름 (즉, 패키지 포함)을 포함할지 또는 생성 된 toString에 단순 클래스 이름 만 포함할지 여부.</target>
        </trans-unit>
        <trans-unit id="2ac45c3ecd10278ef61b98741fbdc6fcce5aa7ab" translate="yes" xml:space="preserve">
          <source>Whether to include the toString() of super in the generated toString.</source>
          <target state="translated">생성 된 toString에 super의 toString ()을 포함할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="f3c87dd365d306011d72186dd3d52b8d710d48b0" translate="yes" xml:space="preserve">
          <source>Whether to try to add null checking to generated methods/constructors such as those added by other transforms.</source>
          <target state="translated">다른 변환에 의해 추가 된 것과 같은 생성 된 메서드 / 생성자에 null 검사를 추가할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="b2fb5171631c755d6b4fb113d85763aceee1c007" translate="yes" xml:space="preserve">
          <source>Whether to try to add null checking to generated methods/constructors such as those added by other transforms. Using this option may lead to surprising results, e.g. it will only apply to methods/constructors added prior to when the &lt;code&gt;NullCheck&lt;/code&gt; transformation is processed. Null checking is not enabled for constructors containing generated bytecode or generated constructors with calls to this(...) or super(...) regardless of this flag.</source>
          <target state="translated">다른 변환에 의해 추가 된 것과 같은 생성 된 메서드 / 생성자에 null 검사를 추가할지 여부입니다. 이 옵션을 사용하면 놀라운 결과가 발생할 수 있습니다. 예를 들어 &lt;code&gt;NullCheck&lt;/code&gt; 변환이 처리 되기 전에 추가 된 메서드 / 생성자에만 적용 됩니다. 이 플래그에 관계없이 this (...) 또는 super (...)에 대한 호출이있는 생성 된 생성자 또는 생성 된 바이트 코드를 포함하는 생성자에 대해서는 널 검사를 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="bba6f6430d507d859c79b497ee63ad92dcc8b313" translate="yes" xml:space="preserve">
          <source>Whether using the tab key indents the selected lines of code</source>
          <target state="translated">Tab 키를 사용하여 선택한 코드 줄을 들여 쓸지 여부</target>
        </trans-unit>
        <trans-unit id="3809365c6a2d8d5ca0d35afc5c87cbae789823c6" translate="yes" xml:space="preserve">
          <source>Which can be used as follows:</source>
          <target state="translated">다음과 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f18c1ef7c6f0bbc2365d093087b069ca57301d8" translate="yes" xml:space="preserve">
          <source>Which has the following usage message:</source>
          <target state="translated">다음과 같은 사용법 메시지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="0561ec37fd346989d2cb7d7e0224955290645f7a" translate="yes" xml:space="preserve">
          <source>Which outputs these lines when run:</source>
          <target state="translated">실행할 때 다음 행을 출력합니다.</target>
        </trans-unit>
        <trans-unit id="ee75291399465af69411d08b1d380d5c35edef03" translate="yes" xml:space="preserve">
          <source>Which outputs this line when run:</source>
          <target state="translated">실행할 때 다음 줄을 출력합니다.</target>
        </trans-unit>
        <trans-unit id="626aef420940f208135252e54dc93f024b115178" translate="yes" xml:space="preserve">
          <source>Which produces the following output:</source>
          <target state="translated">다음과 같은 출력이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="63b7fe3b15e589e4574746c859273baf93dfe406" translate="yes" xml:space="preserve">
          <source>Which results in the following code being generated (XXXXXX will be replaced with some runtime generated hashCode). Notice the checks and exceptions:</source>
          <target state="translated">결과적으로 다음 코드가 생성됩니다 (XXXXXX는 일부 런타임 생성 hashCode로 대체 됨). 확인 및 예외 사항에 유의하십시오.</target>
        </trans-unit>
        <trans-unit id="7679321ce7f94c97a68e590b862fc20ae02cd1dd" translate="yes" xml:space="preserve">
          <source>Which results in the following code being generated. Notice the checks and exceptions:</source>
          <target state="translated">그러면 다음 코드가 생성됩니다. 확인 및 예외 사항에 유의하십시오.</target>
        </trans-unit>
        <trans-unit id="03cf8506703c146751e4441674b6edcae1c3ca11" translate="yes" xml:space="preserve">
          <source>Which results in:</source>
          <target state="translated">결과 :</target>
        </trans-unit>
        <trans-unit id="9875dfa6b084d6c6a9d4f67faf356e96d003e8a1" translate="yes" xml:space="preserve">
          <source>Which uses the FirstParam.FirstGenericType first generic type of the first argument</source>
          <target state="translated">첫 번째 인수의 FirstParam.FirstGenericType 첫 번째 제네릭 유형을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="5ce890b7a5689d483b4015e9d801c1197920e1d2" translate="yes" xml:space="preserve">
          <source>Which will create a class equivalent to the following:</source>
          <target state="translated">다음과 같은 클래스가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="41cacac115ee937847eda6208b4f657f44e9c139" translate="yes" xml:space="preserve">
          <source>Which will create a class of the following form:</source>
          <target state="translated">다음 형식의 클래스를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="19eae023eb1842d12047db4f0a2cde2cdbc5dcad" translate="yes" xml:space="preserve">
          <source>Which will create classes equivalent to the following:</source>
          <target state="translated">다음과 같은 클래스를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="6162866d88d8b256792507d592dc46fd0f976b8c" translate="yes" xml:space="preserve">
          <source>Which will have this output:</source>
          <target state="translated">이 출력은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0b31aa5ebb02a0ebb46f65121cb013496c197774" translate="yes" xml:space="preserve">
          <source>Which will produce something like this:</source>
          <target state="translated">다음과 같이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="2ebbe7d56252e0ba61045697d735783cbc09b561" translate="yes" xml:space="preserve">
          <source>Which will start at the second row and return a maximum of 2 rows. Here's an example result:</source>
          <target state="translated">두 번째 행에서 시작하여 최대 2 개의 행을 반환합니다. 다음은 결과의 예입니다.</target>
        </trans-unit>
        <trans-unit id="1b874d5009302a33d51aeb0547b42138a960d985" translate="yes" xml:space="preserve">
          <source>While it isn't required to do so, the benefit of this builder strategy comes in conjunction with static type-checking or static compilation. Typical usage is as follows:</source>
          <target state="translated">그렇게 할 필요는 없지만이 빌더 전략의 이점은 정적 유형 검사 또는 정적 컴파일과 함께 제공됩니다. 일반적인 사용법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="de2f93bc8c637e7066421ebfa8d5ad73cb4b8b8f" translate="yes" xml:space="preserve">
          <source>Wildcard regular expressions are not evaluated or replaced</source>
          <target state="translated">와일드 카드 정규식은 평가되거나 대체되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="efe4dae04a146afa1211dcca09a9ef815fb61a91" translate="yes" xml:space="preserve">
          <source>Will output the following String, without newlines or indentation:</source>
          <target state="translated">줄 바꿈이나 들여 쓰기없이 다음 문자열을 출력합니다.</target>
        </trans-unit>
        <trans-unit id="1928758dfbbeef913ed4a54d74eabba75a9d6bbf" translate="yes" xml:space="preserve">
          <source>Will print the following to System.out:</source>
          <target state="translated">System.out에 다음을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="7255e19699d700d637ed37b5b642640e0ebd1eb9" translate="yes" xml:space="preserve">
          <source>Will succeed, because the x and y fields declared in the Test class shadow the variables in the delegate.</source>
          <target state="translated">Test 클래스에서 선언 된 x 및 y 필드가 대리자의 변수를 섀도 잉하기 때문에 성공합니다.</target>
        </trans-unit>
        <trans-unit id="27933e85bdabb80c9e3bc5dca7bd943cd77823e3" translate="yes" xml:space="preserve">
          <source>With AST transformation options:</source>
          <target state="translated">AST 변환 옵션 :</target>
        </trans-unit>
        <trans-unit id="9105aafe1506fc971d2fc7f6d25f3aaabd4e56dc" translate="yes" xml:space="preserve">
          <source>With that being said, viewing the source might still have some value. For this reason the script source is accessible via the template.scriptSource property, i.e.:</source>
          <target state="translated">그렇게 말하면 소스를 보는 것이 여전히 가치가있을 수 있습니다. 이러한 이유로 스크립트 소스는 template.scriptSource 속성을 통해 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3904d3dd93d0b2de4b91b6ce6589993a00fb9156" translate="yes" xml:space="preserve">
          <source>With that type information, the type checker can now infer that the type of</source>
          <target state="translated">이 유형 정보를 사용하여 유형 검사기는 이제 유형이</target>
        </trans-unit>
        <trans-unit id="e04792322262cb9984db42e6143755633e88877f" translate="yes" xml:space="preserve">
          <source>With this resolveStrategy set the closure will attempt to resolve property references and methods to the delegate first then the owner.</source>
          <target state="translated">이 resolveStrategy 세트를 사용하면 클로저가 먼저 대리자에게 속성 참조 및 메서드를 확인한 다음 소유자를 확인하려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="8907281aeba2595dd349c5367d9d93440e019773" translate="yes" xml:space="preserve">
          <source>With this resolveStrategy set the closure will attempt to resolve property references and methods to the delegate first then the owner. For example the following code:</source>
          <target state="translated">이 resolveStrategy 세트를 사용하면 클로저가 먼저 대리자에게 속성 참조 및 메서드를 확인한 다음 소유자를 확인하려고 시도합니다. 예를 들어 다음 코드 :</target>
        </trans-unit>
        <trans-unit id="1438376f97cf9f91fe3b4994d7e132423dc5389c" translate="yes" xml:space="preserve">
          <source>With this resolveStrategy set the closure will attempt to resolve property references and methods to the owner first, then the delegate (&lt;b&gt;this is the default strategy&lt;/b&gt;).</source>
          <target state="translated">이 resolveStrategy 세트를 사용하면 클로저는 먼저 소유자에 대한 속성 참조 및 메서드를 확인한 다음 대리자 ( &lt;b&gt;이것이 기본 전략&lt;/b&gt; )에 &lt;b&gt;대해 확인&lt;/b&gt; 을 시도합니다 .</target>
        </trans-unit>
        <trans-unit id="56934fa2287f23dc1887d8bc8669885405dae129" translate="yes" xml:space="preserve">
          <source>With this resolveStrategy set the closure will attempt to resolve property references and methods to the owner first, then the delegate (&lt;b&gt;this is the default strategy&lt;/b&gt;). For example the following code:</source>
          <target state="translated">이 resolveStrategy 세트를 사용하면 클로저는 먼저 소유자에 대한 속성 참조 및 메서드를 확인한 다음 대리자 ( &lt;b&gt;이것이 기본 전략&lt;/b&gt; )에 &lt;b&gt;대해 확인&lt;/b&gt; 을 시도합니다 . 예를 들어 다음 코드 :</target>
        </trans-unit>
        <trans-unit id="7debb47890df6b3afeaeb946acdcc07bf5c6a186" translate="yes" xml:space="preserve">
          <source>With this resolveStrategy set the closure will resolve property references and methods to the delegate only and entirely bypass the owner.</source>
          <target state="translated">이 resolveStrategy 세트를 사용하면 클로저는 대리자에게만 속성 참조 및 메서드를 확인하고 소유자를 완전히 우회합니다.</target>
        </trans-unit>
        <trans-unit id="03ff29c3169f75d6792694aad440c559a9c02b92" translate="yes" xml:space="preserve">
          <source>With this resolveStrategy set the closure will resolve property references and methods to the delegate only and entirely bypass the owner. For example the following code :</source>
          <target state="translated">이 resolveStrategy 세트를 사용하면 클로저는 대리자에게만 속성 참조 및 메서드를 확인하고 소유자를 완전히 우회합니다. 예를 들어 다음 코드 :</target>
        </trans-unit>
        <trans-unit id="b9a9ecebabd106198ac6b6acbb16e04a227f6d5b" translate="yes" xml:space="preserve">
          <source>With this resolveStrategy set the closure will resolve property references and methods to the owner only and not call the delegate at all.</source>
          <target state="translated">이 resolveStrategy 세트를 사용하면 클로저는 소유자에게만 속성 참조와 메서드를 확인하고 델리게이트를 전혀 호출하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="adea1ad398a54254f85b2157cd5c1e1de644b7c0" translate="yes" xml:space="preserve">
          <source>With this resolveStrategy set the closure will resolve property references and methods to the owner only and not call the delegate at all. For example the following code :</source>
          <target state="translated">이 resolveStrategy 세트를 사용하면 클로저는 소유자에게만 속성 참조와 메서드를 확인하고 델리게이트를 전혀 호출하지 않습니다. 예를 들어 다음 코드 :</target>
        </trans-unit>
        <trans-unit id="d54f5a2a2699c3908ca1ebfa98f7de4731c709ae" translate="yes" xml:space="preserve">
          <source>With this resolveStrategy set the closure will resolve property references to itself and go through the usual MetaClass look-up process.</source>
          <target state="translated">이 resolveStrategy 세트로 클로저는 자신에 대한 속성 참조를 확인하고 일반적인 MetaClass 조회 프로세스를 거칩니다.</target>
        </trans-unit>
        <trans-unit id="57356a4d4eef33b0e4b71b0b1713c8b74e0cc8ce" translate="yes" xml:space="preserve">
          <source>With this resolveStrategy set the closure will resolve property references to itself and go through the usual MetaClass look-up process. This means that properties and methods are neither resolved from the owner nor the delegate, but only on the closure object itself. This allows the developer to override getProperty using ExpandoMetaClass of the closure itself.</source>
          <target state="translated">이 resolveStrategy 세트로 클로저는 자신에 대한 속성 참조를 확인하고 일반적인 MetaClass 조회 프로세스를 거칩니다. 즉, 속성과 메서드는 소유자 나 대리자에서 확인되지 않고 클로저 개체 자체에서만 확인됩니다. 이를 통해 개발자는 클로저 자체의 ExpandoMetaClass를 사용하여 getProperty를 재정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="695bb18bba1699cff42db1abf2a430029a2c5055" translate="yes" xml:space="preserve">
          <source>With this style a user-supplied instance is used. Annotations on that instance's class members (properties and setter methods) indicate how to set options and provide the option details using annotation attributes. It might look like this (again using the earlier 'ls' example):</source>
          <target state="translated">이 스타일에서는 사용자 제공 인스턴스가 사용됩니다. 해당 인스턴스의 클래스 멤버 (속성 및 setter 메서드)에 대한 주석은 주석 속성을 사용하여 옵션을 설정하고 옵션 세부 정보를 제공하는 방법을 나타냅니다. 다음과 같이 보일 수 있습니다 (이전의 'ls'예제 사용).</target>
        </trans-unit>
        <trans-unit id="9571ec5bc1662e6196d797bbcd7ccf8e80d45861" translate="yes" xml:space="preserve">
          <source>With this style an interface is defined containing an annotated method for each option. It might look like this (following roughly the earlier 'ls' example):</source>
          <target state="translated">이 스타일을 사용하면 각 옵션에 대해 주석이 달린 메소드를 포함하는 인터페이스가 정의됩니다. 다음과 같이 보일 수 있습니다 (대략 이전의 'ls'예를 따름).</target>
        </trans-unit>
        <trans-unit id="5dd7e6ca10df7749f47b592d753d130e63bea364" translate="yes" xml:space="preserve">
          <source>Works exactly like ResourceBundle.getBundle(String).</source>
          <target state="translated">ResourceBundle.getBundle (String)과 똑같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="1403e99f2ef010fc0b0ff0bd6b58f29020ab683f" translate="yes" xml:space="preserve">
          <source>Works exactly like ResourceBundle.getBundle(String). This is needed because the java method depends on a particular stack configuration that is not guaranteed in Groovy when calling the Java method.</source>
          <target state="translated">ResourceBundle.getBundle (String)과 똑같이 작동합니다. 이는 Java 메소드가 Java 메소드를 호출 할 때 Groovy에서 보장되지 않는 특정 스택 구성에 의존하기 때문에 필요합니다.</target>
        </trans-unit>
        <trans-unit id="73cc18526841bafb32ba069fe6f22dded21e5d4a" translate="yes" xml:space="preserve">
          <source>Works exactly like ResourceBundle.getBundle(String, Locale).</source>
          <target state="translated">ResourceBundle.getBundle (String, Locale)과 똑같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="4a21b7b9be36b7c51651c4162605674a9ee56206" translate="yes" xml:space="preserve">
          <source>Works exactly like ResourceBundle.getBundle(String, Locale). This is needed because the java method depends on a particular stack configuration that is not guaranteed in Groovy when calling the Java method.</source>
          <target state="translated">ResourceBundle.getBundle (String, Locale)과 똑같이 작동합니다. 이는 Java 메소드가 Java 메소드를 호출 할 때 Groovy에서 보장되지 않는 특정 스택 구성에 의존하기 때문에 필요합니다.</target>
        </trans-unit>
        <trans-unit id="787cc64e1f8635c87e5a3248ea198b61b562d80c" translate="yes" xml:space="preserve">
          <source>Wrap the body of a method in a while loop, nested in a try-catch. This is the first step in making a tail recursive method iterative. There are two ways to invoke the next iteration step:</source>
          <target state="translated">try-catch에 중첩 된 while 루프로 메서드 본문을 래핑합니다. 이것은 꼬리 재귀 메서드를 반복적으로 만드는 첫 번째 단계입니다. 다음 반복 단계를 호출하는 두 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d73243bcf1cdf2c526b8a8f494af27bf5130b0b9" translate="yes" xml:space="preserve">
          <source>Wrapper for a method for a property get or set. WARNING: This class is for internal use only, don't use it for your APIs</source>
          <target state="translated">속성 가져 오기 또는 설정에 대한 메서드의 래퍼입니다. 경고 :이 클래스는 내부 전용이므로 API에 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="ca23c0eda8265dc000bc651f70ee0b822b728803" translate="yes" xml:space="preserve">
          <source>Wrapper for a method realizing the property get.</source>
          <target state="translated">get 속성을 실현하는 메서드의 래퍼입니다.</target>
        </trans-unit>
        <trans-unit id="44b25337e022f4a7d30413608a5d29b372b88d9a" translate="yes" xml:space="preserve">
          <source>Wrapper for a method realizing the property get. WARNING: This class is for internal use only, don't use it for your APIs</source>
          <target state="translated">get 속성을 실현하는 메서드의 래퍼입니다. 경고 :이 클래스는 내부 전용이므로 API에 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="11471859253e333ddd95860e78a5e039d5c90e2b" translate="yes" xml:space="preserve">
          <source>Wrapper for a method realizing the property getter.</source>
          <target state="translated">속성 getter를 실현하는 메서드의 래퍼입니다.</target>
        </trans-unit>
        <trans-unit id="dc467bdb7818d2b61af336c3be3e888badf635b8" translate="yes" xml:space="preserve">
          <source>Wrapper for a method realizing the property getter. WARNING: This class is for internal use only, don't use it for your APIs</source>
          <target state="translated">속성 getter를 실현하는 메서드의 래퍼입니다. 경고 :이 클래스는 내부 전용이므로 API에 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="3d88415cebb3435b5d7aed18cdcee3790b658f00" translate="yes" xml:space="preserve">
          <source>Wraps a closure so that it can be used as a prototype for inclusion in layouts.</source>
          <target state="translated">레이아웃에 포함하기위한 프로토 타입으로 사용할 수 있도록 클로저를 래핑합니다.</target>
        </trans-unit>
        <trans-unit id="d108314c8aea2e2fddbcca78857d62636ffe4662" translate="yes" xml:space="preserve">
          <source>Wraps a closure so that it can be used as a prototype for inclusion in layouts. This is useful when you want to use a closure in a model, but that you don't want to render the result of the closure but instead call it as if it was a specification of a template fragment.</source>
          <target state="translated">레이아웃에 포함하기위한 프로토 타입으로 사용할 수 있도록 클로저를 래핑합니다. 이것은 모델에서 클로저를 사용하고 싶지만 클로저 결과를 렌더링하고 싶지 않고 대신 템플릿 조각의 사양 인 것처럼 호출 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="1410d077651b73f79a1015492a6171adc84b7367" translate="yes" xml:space="preserve">
          <source>Wraps a map using the decorator pattern with a wrapper that intercepts all calls to &lt;code&gt;get(key)&lt;/code&gt;.</source>
          <target state="translated">데코레이터 패턴을 사용하는지도를 &lt;code&gt;get(key)&lt;/code&gt; 에 대한 모든 호출을 가로채는 래퍼로 래핑합니다 .</target>
        </trans-unit>
        <trans-unit id="4ff419ef3c8b45be3c79704c564fb5998204d260" translate="yes" xml:space="preserve">
          <source>Wraps a map using the decorator pattern with a wrapper that intercepts all calls to &lt;code&gt;get(key)&lt;/code&gt;. If an unknown key is found, a default value will be stored into the Map before being returned. The default value stored will be the result of calling the supplied Closure with the key as the parameter to the Closure. Example usage:</source>
          <target state="translated">데코레이터 패턴을 사용하는지도를 &lt;code&gt;get(key)&lt;/code&gt; 에 대한 모든 호출을 가로채는 래퍼로 래핑합니다 . 알 수없는 키가 발견되면 기본값이 반환되기 전에 맵에 저장됩니다. 저장된 기본값은 Closure에 대한 매개 변수로 키를 사용하여 제공된 Closure를 호출 한 결과입니다. 사용 예 :</target>
        </trans-unit>
        <trans-unit id="fd51dadd24d8e03f552460a6599ddfbe9d846046" translate="yes" xml:space="preserve">
          <source>Wraps up any pending operations for the current phase and switches to the given phase.</source>
          <target state="translated">현재 단계에 대해 보류중인 작업을 정리하고 지정된 단계로 전환합니다.</target>
        </trans-unit>
        <trans-unit id="dd35487a2eb7da40332f7fc41452378d92a72445" translate="yes" xml:space="preserve">
          <source>Writable</source>
          <target state="translated">Writable</target>
        </trans-unit>
        <trans-unit id="87534304f567927d43257586d016858eaa030918" translate="yes" xml:space="preserve">
          <source>Writable.writeTo</source>
          <target state="translated">Writable.writeTo</target>
        </trans-unit>
        <trans-unit id="5735f98eec3226a811dc68d6034258dc33f39dca" translate="yes" xml:space="preserve">
          <source>Write GroovyDoc resources to destination.</source>
          <target state="translated">GroovyDoc 리소스를 대상에 씁니다.</target>
        </trans-unit>
        <trans-unit id="4652631a628afd8a3f8a588fd0dbd737d2146884" translate="yes" xml:space="preserve">
          <source>Write a portion of a string.</source>
          <target state="translated">문자열의 일부를 씁니다.</target>
        </trans-unit>
        <trans-unit id="354cde68fb6c2f936b7c59bf670319ba0dcf0ab7" translate="yes" xml:space="preserve">
          <source>Write a portion of an array of characters.</source>
          <target state="translated">문자 배열의 일부를 씁니다.</target>
        </trans-unit>
        <trans-unit id="96cecf07d443a5851b1ef5b0ab1599f5fd94ef53" translate="yes" xml:space="preserve">
          <source>Write a pretty version of the Element to the OutputStream.</source>
          <target state="translated">OutputStream에 예쁜 버전의 Element를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="f5883e642bc4d6585b4b91c76f353f0c9597c506" translate="yes" xml:space="preserve">
          <source>Write a pretty version of the Element to the Writer.</source>
          <target state="translated">작성자에게 예쁜 버전의 요소를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="5767f9248203b058e7ad52bdefb75a7d18603d15" translate="yes" xml:space="preserve">
          <source>Write a pretty version of the GPathResult to the OutputStream.</source>
          <target state="translated">GPathResult의 예쁜 버전을 OutputStream에 씁니다.</target>
        </trans-unit>
        <trans-unit id="39ce578d9073055598f43770c3337f690d7356e5" translate="yes" xml:space="preserve">
          <source>Write a pretty version of the GPathResult to the Writer.</source>
          <target state="translated">작성자에게 GPathResult의 예쁜 버전을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="f10e0b4806a35879c043bc69da0f09635b142a51" translate="yes" xml:space="preserve">
          <source>Write a pretty version of the Node to the OutputStream.</source>
          <target state="translated">예쁜 버전의 Node를 OutputStream에 씁니다.</target>
        </trans-unit>
        <trans-unit id="03e638a319eeb6db50f2fbefae1a106a132dab17" translate="yes" xml:space="preserve">
          <source>Write a pretty version of the Node to the Writer.</source>
          <target state="translated">Writer에게 예쁜 버전의 Node를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="f9e72900262aeca966974cd51f82575c18329895" translate="yes" xml:space="preserve">
          <source>Write a pretty version of the XML content produced by the Writable to the OutputStream.</source>
          <target state="translated">Writable에 의해 생성 된 XML 컨텐츠의 예쁜 버전을 OutputStream에 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="e697abbcd1510083c613809c6a93e664313cbe49" translate="yes" xml:space="preserve">
          <source>Write a pretty version of the XML content produced by the Writable to the Writer.</source>
          <target state="translated">작성자에게 Writable로 생성 된 XML 컨텐츠의 예쁜 버전을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="09ef56179ad2f539e0edbfcd6940a4694e6c861d" translate="yes" xml:space="preserve">
          <source>Write a pretty version of the given XML string to the OutputStream.</source>
          <target state="translated">주어진 XML 문자열의 예쁜 버전을 OutputStream에 씁니다.</target>
        </trans-unit>
        <trans-unit id="0574ba485e517ec712d583e8dcfe49aa131ffb59" translate="yes" xml:space="preserve">
          <source>Write a pretty version of the given XML string to the Writer.</source>
          <target state="translated">주어진 XML 문자열의 예쁜 버전을 Writer에 씁니다.</target>
        </trans-unit>
        <trans-unit id="330fefb058de9e90d4a9120ede2b9e5d7c7923ca" translate="yes" xml:space="preserve">
          <source>Write a single character.</source>
          <target state="translated">단일 문자를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="f6e749d40ff493a236a023d30fb9fbee8148a6ef" translate="yes" xml:space="preserve">
          <source>Write a string.</source>
          <target state="translated">문자열을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="5585114d09be91fef1cd855aac41a724e1615c48" translate="yes" xml:space="preserve">
          <source>Write bytes to a File.</source>
          <target state="translated">파일에 바이트를 씁니다.</target>
        </trans-unit>
        <trans-unit id="cf1b4b7287180be2a85085f8549e3473dfa7007d" translate="yes" xml:space="preserve">
          <source>Write bytes to a Path.</source>
          <target state="translated">Path에 바이트를 씁니다.</target>
        </trans-unit>
        <trans-unit id="a2b7b478f1c390316030a61f7715e228e4e2791d" translate="yes" xml:space="preserve">
          <source>Write shifting operations.</source>
          <target state="translated">이동 연산을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="9619ac5c7a19d2dc42ea27ebe08ad420be29e3c4" translate="yes" xml:space="preserve">
          <source>Write shifting operations. Type is one of LEFT_SHIFT, RIGHT_SHIFT, or RIGHT_SHIFT_UNSIGNED</source>
          <target state="translated">이동 연산을 작성합니다. 유형은 LEFT_SHIFT, RIGHT_SHIFT 또는 RIGHT_SHIFT_UNSIGNED 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="4f9598dcd67600ae34dd1797a1b88d5968516ff7" translate="yes" xml:space="preserve">
          <source>Write the byte[] to the output stream.</source>
          <target state="translated">byte []를 출력 스트림에 씁니다.</target>
        </trans-unit>
        <trans-unit id="274256b061f35d4bba14297927404d4d1c9c9260" translate="yes" xml:space="preserve">
          <source>Write the byte[] to the output stream. The stream is closed before this method returns.</source>
          <target state="translated">byte []를 출력 스트림에 씁니다. 이 메서드가 반환되기 전에 스트림이 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="b8ac34c969f93236f170aac6ecdc9cd9acce6f9a" translate="yes" xml:space="preserve">
          <source>Write the bytes from the byte array to the File.</source>
          <target state="translated">바이트 배열의 바이트를 파일에 씁니다.</target>
        </trans-unit>
        <trans-unit id="b0fb089052de00365d6c3ed944cf8c90fb8ff880" translate="yes" xml:space="preserve">
          <source>Write the bytes from the byte array to the Path.</source>
          <target state="translated">바이트 배열의 바이트를 Path에 씁니다.</target>
        </trans-unit>
        <trans-unit id="40ca2469dd695dfaeaf02691bca346558298d0c2" translate="yes" xml:space="preserve">
          <source>Write the text and append a newline (using the platform's line-ending).</source>
          <target state="translated">텍스트를 작성하고 줄 바꿈을 추가합니다 (플랫폼의 줄 끝 사용).</target>
        </trans-unit>
        <trans-unit id="7bf7e66520004ebfcf76a4b78494d73df498c655" translate="yes" xml:space="preserve">
          <source>Write the text to the File without writing a BOM, using the specified encoding.</source>
          <target state="translated">지정된 인코딩을 사용하여 BOM을 작성하지 않고 파일에 텍스트를 씁니다.</target>
        </trans-unit>
        <trans-unit id="d8d90c961c578dd0fde71f19b40ece570dcfe25f" translate="yes" xml:space="preserve">
          <source>Write the text to the File without writing a BOM.</source>
          <target state="translated">BOM을 작성하지 않고 파일에 텍스트를 씁니다.</target>
        </trans-unit>
        <trans-unit id="2e50138db3dd4f75b30957a88c3858a327cb2b6a" translate="yes" xml:space="preserve">
          <source>Write the text to the File, using the specified encoding.</source>
          <target state="translated">지정된 인코딩을 사용하여 텍스트를 파일에 씁니다.</target>
        </trans-unit>
        <trans-unit id="00330a530af0fcae3e16053e1532c87e3bd3459d" translate="yes" xml:space="preserve">
          <source>Write the text to the File, using the specified encoding. If the given charset is &quot;UTF-16BE&quot; or &quot;UTF-16LE&quot; (or an equivalent alias) and &lt;code&gt;writeBom&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the requisite byte order mark is written to the file before the text.</source>
          <target state="translated">지정된 인코딩을 사용하여 텍스트를 파일에 씁니다. 주어진 문자 세트가 &quot;UTF-16BE&quot;또는 &quot;UTF-16LE&quot;(또는 동등한 별칭)이고 &lt;code&gt;writeBom&lt;/code&gt; 이 &lt;code&gt;true&lt;/code&gt; 이면 필요한 바이트 순서 표시가 텍스트 앞에 파일에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="6500d3c5d12ba66a9fb40d971f245d4c0ad0c023" translate="yes" xml:space="preserve">
          <source>Write the text to the File.</source>
          <target state="translated">파일에 텍스트를 씁니다.</target>
        </trans-unit>
        <trans-unit id="efc2a6a902244a910e1dec45fb7b45b0bb22065b" translate="yes" xml:space="preserve">
          <source>Write the text to the File. If the default charset is &quot;UTF-16BE&quot; or &quot;UTF-16LE&quot; (or an equivalent alias) and &lt;code&gt;writeBom&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the requisite byte order mark is written to the file before the text.</source>
          <target state="translated">파일에 텍스트를 씁니다. 기본 문자 세트가 &quot;UTF-16BE&quot;또는 &quot;UTF-16LE&quot;(또는 이에 상응하는 별칭)이고 &lt;code&gt;writeBom&lt;/code&gt; 이 &lt;code&gt;true&lt;/code&gt; 이면 필요한 바이트 순서 표시가 텍스트 앞에 파일에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="115c5e05a1c8dfe1dbf8210c484688145a13b06c" translate="yes" xml:space="preserve">
          <source>Write the text to the Path without writing a BOM .</source>
          <target state="translated">BOM을 작성하지 않고 경로에 텍스트를 씁니다.</target>
        </trans-unit>
        <trans-unit id="b8e1d8edc29964a12ebcd4c669bd586b5e335ce0" translate="yes" xml:space="preserve">
          <source>Write the text to the Path without writing a BOM, using the specified encoding.</source>
          <target state="translated">지정된 인코딩을 사용하여 BOM을 작성하지 않고 경로에 텍스트를 씁니다.</target>
        </trans-unit>
        <trans-unit id="5b5b40a7a8c4e8619db1ba7ae6e8b3604b6add30" translate="yes" xml:space="preserve">
          <source>Write the text to the Path, using the specified encoding.</source>
          <target state="translated">지정된 인코딩을 사용하여 텍스트를 경로에 씁니다.</target>
        </trans-unit>
        <trans-unit id="bc6c4aa7ffd1f13109cdab42385e8b4b79399b53" translate="yes" xml:space="preserve">
          <source>Write the text to the Path, using the specified encoding. If the given charset is &quot;UTF-16BE&quot; or &quot;UTF-16LE&quot; (or an equivalent alias) and &lt;code&gt;writeBom&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the requisite byte order mark is written to the file before the text.</source>
          <target state="translated">지정된 인코딩을 사용하여 텍스트를 경로에 씁니다. 주어진 문자 세트가 &quot;UTF-16BE&quot;또는 &quot;UTF-16LE&quot;(또는 동등한 별칭)이고 &lt;code&gt;writeBom&lt;/code&gt; 이 &lt;code&gt;true&lt;/code&gt; 이면 필요한 바이트 순서 표시가 텍스트 앞에 파일에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="8b9cfad3400b59e97176cb6d59776972ccecbb1d" translate="yes" xml:space="preserve">
          <source>Write the text to the Path.</source>
          <target state="translated">경로에 텍스트를 씁니다.</target>
        </trans-unit>
        <trans-unit id="6266463ae398d1877a555806b69997a3b00955d6" translate="yes" xml:space="preserve">
          <source>Write the text to the Path. If the default charset is &quot;UTF-16BE&quot; or &quot;UTF-16LE&quot; (or an equivalent alias) and &lt;code&gt;writeBom&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the requisite byte order mark is written to the file before the text.</source>
          <target state="translated">경로에 텍스트를 씁니다. 기본 문자 세트가 &quot;UTF-16BE&quot;또는 &quot;UTF-16LE&quot;(또는 이에 상응하는 별칭)이고 &lt;code&gt;writeBom&lt;/code&gt; 이 &lt;code&gt;true&lt;/code&gt; 이면 필요한 바이트 순서 표시가 텍스트 앞에 파일에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="9b0bb5200ff9e032b44c3f44d885d776514d1a58" translate="yes" xml:space="preserve">
          <source>Writer responsible for generating closure classes in statically compiled mode.</source>
          <target state="translated">정적으로 컴파일 된 모드에서 클로저 클래스를 생성하는 작성자.</target>
        </trans-unit>
        <trans-unit id="4c186df384e63b28c1d20c3e37296ebe5dd6d295" translate="yes" xml:space="preserve">
          <source>Writer responsible for generating lambda classes in statically compiled mode.</source>
          <target state="translated">정적으로 컴파일 된 모드에서 람다 클래스를 생성하는 작성자입니다.</target>
        </trans-unit>
        <trans-unit id="9f5e63d8ff37b89c95e8494f2623a1991cab3295" translate="yes" xml:space="preserve">
          <source>Writer responsible for generating method reference in statically compiled mode.</source>
          <target state="translated">정적으로 컴파일 된 모드에서 메서드 참조를 생성하는 작성자입니다.</target>
        </trans-unit>
        <trans-unit id="d1d4e150a8596834961f524ba7b862460f9b371c" translate="yes" xml:space="preserve">
          <source>WriterControllerFactory</source>
          <target state="translated">WriterControllerFactory</target>
        </trans-unit>
        <trans-unit id="b234738492d671b78c35d3acbd3e11556b4cd811" translate="yes" xml:space="preserve">
          <source>Writes a String to the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html&quot;&gt;StringBuilder&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html&quot;&gt;StringBuilder에&lt;/a&gt; 문자열을 씁니다 .</target>
        </trans-unit>
        <trans-unit id="f5500ac07f2cc1cb3f22e87d010a07b349ab41ea" translate="yes" xml:space="preserve">
          <source>Writes a portion of a character array to the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html&quot;&gt;StringBuilder&lt;/a&gt;.</source>
          <target state="translated">문자 배열의 일부를 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html&quot;&gt;StringBuilder에&lt;/a&gt; 씁니다 .</target>
        </trans-unit>
        <trans-unit id="c6c5505a4254a82213465460cf7dc2e287240a7c" translate="yes" xml:space="preserve">
          <source>Writes an object to a Writer using Groovy's default representation for the object.</source>
          <target state="translated">객체에 대한 Groovy의 기본 표현을 사용하여 Writer에 객체를 씁니다.</target>
        </trans-unit>
        <trans-unit id="b50e8f220fd429713b81f0a82459e245615f1340" translate="yes" xml:space="preserve">
          <source>Writes an unescaped value.</source>
          <target state="translated">이스케이프되지 않은 값을 씁니다.</target>
        </trans-unit>
        <trans-unit id="df02af0bd2d3065dd99e4bdd24877feefe6aa2c4" translate="yes" xml:space="preserve">
          <source>Writes an unescaped value. Note: can cause invalid JSON if passed JSON is invalid</source>
          <target state="translated">이스케이프되지 않은 값을 씁니다. 참고 : 전달 된 JSON이 유효하지 않은 경우 유효하지 않은 JSON이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e4b7fb98129ee2c0a6b9f494bb51fe088559e1bb" translate="yes" xml:space="preserve">
          <source>Writes error messages to the specified PrintWriter.</source>
          <target state="translated">지정된 PrintWriter에 오류 메시지를 씁니다.</target>
        </trans-unit>
        <trans-unit id="7b8c2fa0ac62e2efedd293becb5b2f44dde2c3fe" translate="yes" xml:space="preserve">
          <source>Writes out a nicely formatted summary of the exception.</source>
          <target state="translated">예외에 대한 멋진 형식의 요약을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="9f09beb17cecea5cc2e6ca93dcc1bfb45c3d7c17" translate="yes" xml:space="preserve">
          <source>Writes out a nicely formatted summary of the syntax error.</source>
          <target state="translated">구문 오류에 대한 멋진 형식의 요약을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="639c6bcd5b64ee97c6b660b4f94fb5e5f981b98b" translate="yes" xml:space="preserve">
          <source>Writes the error to the specified &lt;code&gt;PrintStream&lt;/code&gt;.</source>
          <target state="translated">지정된 &lt;code&gt;PrintStream&lt;/code&gt; 에 오류를 씁니다 .</target>
        </trans-unit>
        <trans-unit id="b3b330ce0b2834018481b6d2a890bab037254296" translate="yes" xml:space="preserve">
          <source>Writes the error to the specified &lt;code&gt;PrintWriter&lt;/code&gt;.</source>
          <target state="translated">지정된 &lt;code&gt;PrintWriter&lt;/code&gt; 에 오류를 씁니다 .</target>
        </trans-unit>
        <trans-unit id="adf4b10707d72cd3246437c093bc159e0d2457fd" translate="yes" xml:space="preserve">
          <source>Writes the given Writable as the value of the given attribute name</source>
          <target state="translated">주어진 Writable을 주어진 속성 이름의 값으로 씁니다.</target>
        </trans-unit>
        <trans-unit id="0700c40c41c12f08a29546a228dec138c3a30749" translate="yes" xml:space="preserve">
          <source>Writes the message to the specified PrintWriter.</source>
          <target state="translated">지정된 PrintWriter에 메시지를 씁니다.</target>
        </trans-unit>
        <trans-unit id="7a247b5cc56337dfc3cdd69df71257622ef161b8" translate="yes" xml:space="preserve">
          <source>Writes the message to the specified PrintWriter. The supplied ProcessingUnit is the unit that holds this Message.</source>
          <target state="translated">지정된 PrintWriter에 메시지를 씁니다. 제공된 ProcessingUnit은이 메시지를 보유하는 단위입니다.</target>
        </trans-unit>
        <trans-unit id="ae0baae77d97c9c02d6c9705c5ce482f01f55e0a" translate="yes" xml:space="preserve">
          <source>Writes the name and a JSON array</source>
          <target state="translated">이름과 JSON 배열을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="e61a6f24237d29a20abfd1ab2c2c4ab03dda6eea" translate="yes" xml:space="preserve">
          <source>Writes the name and another JSON object</source>
          <target state="translated">이름과 다른 JSON 객체를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="9a628aaaff74825f09fd6cc70e0f73c0c9775dc3" translate="yes" xml:space="preserve">
          <source>Writes the name and value of a JSON attribute</source>
          <target state="translated">JSON 속성의 이름과 값을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="fa1e43266c7bd3d74ecafcaabbe9643fb564a055" translate="yes" xml:space="preserve">
          <source>Writes the node to the specified &lt;code&gt;PrintWriter&lt;/code&gt;.</source>
          <target state="translated">지정된 &lt;code&gt;PrintWriter&lt;/code&gt; 에 노드를 씁니다 .</target>
        </trans-unit>
        <trans-unit id="32fe9a5f14a56dd90f57153f772ac708a6dd8dea" translate="yes" xml:space="preserve">
          <source>Writes the specified character into the buffer.</source>
          <target state="translated">지정된 문자를 버퍼에 씁니다.</target>
        </trans-unit>
        <trans-unit id="eeaf26f5110e83b969c57811863f263444eedfcc" translate="yes" xml:space="preserve">
          <source>Writes this config object into a String serialized representation which can later be parsed back using the parse() method</source>
          <target state="translated">이 구성 객체를 나중에 parse () 메서드를 사용하여 다시 구문 분석 할 수있는 문자열 직렬화 된 표현에 씁니다.</target>
        </trans-unit>
        <trans-unit id="f012586de7f1481720aa810d76d5a609dfae4774" translate="yes" xml:space="preserve">
          <source>Writes this object to the given writer.</source>
          <target state="translated">이 개체를 지정된 작성자에게 씁니다.</target>
        </trans-unit>
        <trans-unit id="b35d5c6e0894db5cfc23292801ddee2f7bda16ea" translate="yes" xml:space="preserve">
          <source>XML utilities such as for converting XML into Groovy scripts.</source>
          <target state="translated">XML을 Groovy 스크립트로 변환하는 것과 같은 XML 유틸리티.</target>
        </trans-unit>
        <trans-unit id="04db21bc07fcb55d28e3b2b837648a42a65c85e0" translate="yes" xml:space="preserve">
          <source>XmlBuilder related classes to support streaming XML.</source>
          <target state="translated">스트리밍 XML을 지원하는 XmlBuilder 관련 클래스.</target>
        </trans-unit>
        <trans-unit id="9510186d59529f829afe19cc51a8be45be9d8a20" translate="yes" xml:space="preserve">
          <source>XmlUtil.serialize</source>
          <target state="translated">XmlUtil.serialize</target>
        </trans-unit>
        <trans-unit id="3f0cc0456e593d2518e5a1c70c1967dfaa1cc0b5" translate="yes" xml:space="preserve">
          <source>Year.parse</source>
          <target state="translated">Year.parse</target>
        </trans-unit>
        <trans-unit id="df0956a3d741b6ccbb8c783bdf658129ec4eb912" translate="yes" xml:space="preserve">
          <source>YearMonth.parse</source>
          <target state="translated">YearMonth.parse</target>
        </trans-unit>
        <trans-unit id="ea37e53955578466e655348b4d5a1435780c42bd" translate="yes" xml:space="preserve">
          <source>You can access the left hand side of a declaration using the &quot;&lt;code&gt;Expression getLeftExpression()&lt;/code&gt;&quot; method. In which case you might then use &lt;code&gt;instanceof&lt;/code&gt; and casting to perform operations specific to a single local variable (&lt;code&gt;VariableExpression&lt;/code&gt;) or for the multiple assignment case (&lt;code&gt;TupleExpression&lt;/code&gt;).</source>
          <target state="translated">&quot; &lt;code&gt;Expression getLeftExpression()&lt;/code&gt; &quot;메소드를 사용하여 선언의 왼쪽에 액세스 할 수 있습니다 . 그런 다음 &lt;code&gt;instanceof&lt;/code&gt; 및 캐스팅을 사용하여 단일 지역 변수 ( &lt;code&gt;VariableExpression&lt;/code&gt; ) 또는 다중 할당 사례 ( &lt;code&gt;TupleExpression&lt;/code&gt; )에 특정한 작업을 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4921e4c97bf548e3febc11494ae84291e85e23bc" translate="yes" xml:space="preserve">
          <source>You can also add PhaseOperations to this compilation using the addPhaseOperation method. This is commonly used when you want to wire a new AST Transformation into the compilation.</source>
          <target state="translated">addPhaseOperation 메서드를 사용하여이 컴파일에 PhaseOperations를 추가 할 수도 있습니다. 새 AST 변환을 컴파일에 연결하려는 경우 일반적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="42c71fdf0d673eb18559c6815b486bab57a6b82b" translate="yes" xml:space="preserve">
          <source>You can also mix and match the &lt;code&gt;@NamedParam&lt;/code&gt; and &lt;code&gt;@NamedDelegate&lt;/code&gt; annotations. Named arguments will be supplied via the map with their property name (configurable via annotation attributes within &lt;code&gt;@NamedParam&lt;/code&gt;) being the key and value being the argument value. For named delegates, any properties of the delegate can become map keys. Duplicate keys across delegate properties or named parameters are not allowed. The type of delegate parameters must be compatible with Groovy's &lt;code&gt;as&lt;/code&gt; cast operation from a &lt;code&gt;Map&lt;/code&gt;. Here is an example using implicit named parameters.</source>
          <target state="translated">&lt;code&gt;@NamedParam&lt;/code&gt; 및 &lt;code&gt;@NamedDelegate&lt;/code&gt; 주석을 혼합하고 일치시킬 수도 있습니다 . 명명 된 인수는 속성 이름 ( &lt;code&gt;@NamedParam&lt;/code&gt; 내의 주석 속성을 통해 구성 가능 )이 키이고 값이 인수 값인 맵을 통해 제공됩니다 . 명명 된 대리자의 경우 대리자의 모든 속성이 맵 키가 될 수 있습니다. 대리자 속성 또는 명명 된 매개 변수간에 중복 키는 허용되지 않습니다. 위임 매개 변수의 유형은 Groovy의와 호환되어야합니다 &lt;code&gt;as&lt;/code&gt; A로부터 주조 작업 &lt;code&gt;Map&lt;/code&gt; . 다음은 암시 적 명명 된 매개 변수를 사용하는 예입니다.</target>
        </trans-unit>
        <trans-unit id="c9d3039e9a9498cb711ad8116091ee335b07f86e" translate="yes" xml:space="preserve">
          <source>You can also now do this:</source>
          <target state="translated">이제 다음을 수행 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="ce966a0ce5ab76a3a342193f8aca3e85173c2009" translate="yes" xml:space="preserve">
          <source>You can also remove transitive dependencies altogether (provided you know you don't need them) using &lt;code&gt;@GrabExclude&lt;/code&gt;. For example, here is how we would not grab the &lt;code&gt;logkit&lt;/code&gt; and &lt;code&gt;avalon-framework&lt;/code&gt; transitive dependencies for Apache POI:</source>
          <target state="translated">&lt;code&gt;@GrabExclude&lt;/code&gt; 를 사용하여 전 이적 종속성을 모두 제거 할 수도 있습니다 (필요하지 않은 경우) . 예를 들어, Apache POI에 대한 &lt;code&gt;logkit&lt;/code&gt; 및 &lt;code&gt;avalon-framework&lt;/code&gt; 전이 종속성을 가져 오지 않는 방법은 다음 과 같습니다.</target>
        </trans-unit>
        <trans-unit id="694fdb3d78526c8a159aeb6cdf4135c1daa816c5" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;@Builder&lt;/code&gt; annotation in combination with this strategy on one or more constructor or static method instead of or in addition to using it at the class level. An example with a constructor follows:</source>
          <target state="translated">클래스 수준에서 사용하는 대신 또는 추가로 하나 이상의 생성자 또는 정적 메서드에서이 전략과 함께 &lt;code&gt;@Builder&lt;/code&gt; 주석을 사용할 수도 있습니다 . 생성자가있는 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e941f0b8c2260c9a81a632889151c2b74abe11a6" translate="yes" xml:space="preserve">
          <source>You can choose either format but not mix-n-match:</source>
          <target state="translated">두 가지 형식 중 하나를 선택할 수 있지만 믹스 앤 매치는 선택할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="4b0bdfc45bdeb6ef9629a1ec5e896f3ac9721a02" translate="yes" xml:space="preserve">
          <source>You can customise the toString() method provided for you by &lt;code&gt;@Immutable&lt;/code&gt; by also adding the &lt;code&gt;@ToString&lt;/code&gt; annotation to your class definition.</source>
          <target state="translated">다음과 같은 방법으로 당신을 위해 제공 toString () 메서드 사용자 정의 할 수 있습니다 &lt;code&gt;@Immutable&lt;/code&gt; 도 추가하여 &lt;code&gt;@ToString&lt;/code&gt; 의 클래스 정의에 주석을.</target>
        </trans-unit>
        <trans-unit id="1c57137957954998e458a424e8d81dbffeb2112c" translate="yes" xml:space="preserve">
          <source>You can override an implicit transitive dependency by providing an explicit one. E.g. htmlunit 2.6 normally uses xerces 2.9.1 but you can get 2.9.0 as follows:</source>
          <target state="translated">명시 적 종속성을 제공하여 암시 적 전이 종속성을 재정의 할 수 있습니다. 예를 들어 htmlunit 2.6은 일반적으로 xerces 2.9.1을 사용하지만 다음과 같이 2.9.0을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4a2dc9b549b7bb2a47dcbceb24bd718a81f56ff9" translate="yes" xml:space="preserve">
          <source>You can specify the GroovyUnitTest to run by running this class as an application and specifying the script to run on the command line. &lt;code&gt;
 java groovy.test.GroovyTestSuite src/test/Foo.groovy
 &lt;/code&gt; Or to run the test suite as a unit test suite in an IDE you can use the 'test' system property to define the test script to run. e.g. pass this into the JVM when the unit test plugin runs... &lt;code&gt;
 -Dtest=src/test/Foo.groovy
 &lt;/code&gt;</source>
          <target state="translated">이 클래스를 응용 프로그램으로 실행하고 명령 줄에서 실행할 스크립트를 지정하여 실행할 GroovyUnitTest를 지정할 수 있습니다. &lt;code&gt; java groovy.test.GroovyTestSuite src/test/Foo.groovy &lt;/code&gt; 또는 IDE에서 단위 테스트 스위트로 테스트 스위트를 실행하려면 'test'시스템 속성을 사용하여 실행할 테스트 스크립트를 정의 할 수 있습니다. 예를 들어 단위 테스트 플러그인이 실행될 때이를 JVM에 전달합니다 ... &lt;code&gt; -Dtest=src/test/Foo.groovy &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ae04c9b7cfd1c068ef6d35e5a3500d5c921c1760" translate="yes" xml:space="preserve">
          <source>You can specify the GroovyUnitTest to run by running this class as an application and specifying the script to run on the command line. &lt;code&gt;
 java groovy.util.GroovyTestSuite src/test/Foo.groovy
 &lt;/code&gt; Or to run the test suite as a unit test suite in an IDE you can use the 'test' system property to define the test script to run. e.g. pass this into the JVM when the unit test plugin runs... &lt;code&gt;
 -Dtest=src/test/Foo.groovy
 &lt;/code&gt;</source>
          <target state="translated">이 클래스를 응용 프로그램으로 실행하고 명령 줄에서 실행할 스크립트를 지정하여 실행할 GroovyUnitTest를 지정할 수 있습니다. &lt;code&gt; java groovy.util.GroovyTestSuite src/test/Foo.groovy &lt;/code&gt; 또는 IDE에서 단위 테스트 스위트로 테스트 스위트를 실행하려면 'test'시스템 속성을 사용하여 실행할 테스트 스크립트를 정의 할 수 있습니다. 예를 들어 단위 테스트 플러그인이 실행될 때이를 JVM에 전달합니다 ... &lt;code&gt; -Dtest=src/test/Foo.groovy &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a0299152e3fb49c8ed23cae8b5b00b7a2229c2f" translate="yes" xml:space="preserve">
          <source>You can write classes in this shortened form:</source>
          <target state="translated">다음과 같은 단축 형식으로 클래스를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0dd5ad06e973582a0d5ca851bdd2b199f7733ae2" translate="yes" xml:space="preserve">
          <source>You can write code like this:</source>
          <target state="translated">다음과 같은 코드를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a8a2405d380727871ece17ffd5b22f305daaeb11" translate="yes" xml:space="preserve">
          <source>You could create an AST transformation customizer and specify the &quot;value&quot; parameter thanks to this method:</source>
          <target state="translated">다음 방법 덕분에 AST 변환 커 스터 마이저를 생성하고 &quot;value&quot;매개 변수를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fbd72dbfdce8a2381899f610f1966b88b23d1fcf" translate="yes" xml:space="preserve">
          <source>You don't have to follow Groovy's normal property conventions, e.g. you can create an explicit private field and then you can write explicit get and set methods. Such an approach, isn't currently prohibited (to give you some wiggle room to get around these conventions) but any fields created in this way are deemed not to be part of the significant state of the object and aren't factored into the &lt;code&gt;equals&lt;/code&gt; or &lt;code&gt;hashCode&lt;/code&gt; methods. Similarly, you may use static properties (though usually this is discouraged) and these too will be ignored as far as significant state is concerned. If you do break standard conventions, you do so at your own risk and your objects may no longer be immutable. It is up to you to ensure that your objects remain immutable at least to the extent expected in other parts of your program!</source>
          <target state="translated">Groovy의 일반 속성 규칙을 따를 필요가 없습니다. 예를 들어 명시적인 private 필드를 만든 다음 명시적인 get 및 set 메서드를 작성할 수 있습니다. 이러한 접근 방식은 현재 금지되어 있지 않지만 (이러한 규칙을 우회 할 수있는 약간의 흔들림을 제공하기 위해) 이러한 방식으로 생성 된 모든 필드는 객체의 중요한 상태의 일부가 아닌 것으로 간주되며 &lt;code&gt;equals&lt;/code&gt; 포함되지 않습니다. 또는 &lt;code&gt;hashCode&lt;/code&gt; 행동 양식. 마찬가지로 정적 속성을 사용할 수 있으며 (일반적으로 권장하지 않음) 중요한 상태에 관한 한 이러한 속성도 무시됩니다. 표준 규칙을 위반하는 경우 위험을 감수하고 객체를 더 이상 변경할 수 없게됩니다. 객체가 적어도 프로그램의 다른 부분에서 예상되는 범위까지 변경 불가능한 상태로 유지되도록하는 것은 사용자에게 달려 있습니다!</target>
        </trans-unit>
        <trans-unit id="924447f95f45e32e214f55af4a9166aa840a35f9" translate="yes" xml:space="preserve">
          <source>You don't need to provide all arguments in constructor calls. If using named parameters, any property names not referenced will be given their default value (as per Java's default unless an explicit initialization constant is provided when defining the property). If using a tuple constructor, parameters are supplied in the order in which the properties are defined. Supplied parameters fill the tuple from the left. Any parameters missing on the right are given their default value.</source>
          <target state="translated">생성자 호출에서 모든 인수를 제공 할 필요는 없습니다. 명명 된 매개 변수를 사용하는 경우 참조되지 않은 모든 속성 이름에는 기본값이 지정됩니다 (속성을 정의 할 때 명시 적 초기화 상수가 제공되지 않는 한 Java의 기본값에 따라). 튜플 생성자를 사용하는 경우 속성이 정의 된 순서대로 매개 변수가 제공됩니다. 제공된 매개 변수는 왼쪽에서 튜플을 채 웁니다. 오른쪽에 누락 된 매개 변수에는 기본값이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="0a9168dbea24e1385fcc9fb5b6fe585aec9f241f" translate="yes" xml:space="preserve">
          <source>You may add additional constructors in addition to inherited ones. If the argument types of a supplied constructor exactly match those of a parent constructor, then that constructor won't be inherited.</source>
          <target state="translated">상속 된 생성자 외에 추가 생성자를 추가 할 수 있습니다. 제공된 생성자의 인수 유형이 부모 생성자의 인수 유형과 정확히 일치하면 해당 생성자는 상속되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8ca2bff79d2dc8f802ab3892d2549f7a45f7c6d9" translate="yes" xml:space="preserve">
          <source>You must annotate this class with &lt;a href=&quot;groovyasttransformation&quot;&gt;GroovyASTTransformation&lt;/a&gt; so that Groovy knows which &lt;a href=&quot;../control/compilephase&quot;&gt;CompilePhase&lt;/a&gt; to run in.</source>
          <target state="translated">Groovy가 실행할 &lt;a href=&quot;../control/compilephase&quot;&gt;CompilePhase&lt;/a&gt; 를 알 수 있도록 이 클래스에 &lt;a href=&quot;groovyasttransformation&quot;&gt;GroovyASTTransformation을&lt;/a&gt; 주석 처리해야합니다 .</target>
        </trans-unit>
        <trans-unit id="87c51f81eac2b37f8f18a538bff47f2eab457428" translate="yes" xml:space="preserve">
          <source>You shouldn't call this method because it is inherently unreliable</source>
          <target state="translated">이 메서드는 본질적으로 신뢰할 수 없기 때문에 호출해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="6debf683f8c6e177d9475561435e9ec32fdbd965" translate="yes" xml:space="preserve">
          <source>You would typically use this style only for base classes where you didn't want the normal &lt;code&gt;Object&lt;/code&gt;&lt;code&gt;clone()&lt;/code&gt; method to be called and you would typically need to use the &lt;code&gt;SIMPLE&lt;/code&gt; style for any child classes.</source>
          <target state="translated">일반적으로이 스타일은 일반 &lt;code&gt;Object&lt;/code&gt; &lt;code&gt;clone()&lt;/code&gt; 메서드가 호출 되는 것을 원하지 않는 기본 클래스에만 사용하고 일반적으로 모든 자식 클래스에 대해 &lt;code&gt;SIMPLE&lt;/code&gt; 스타일 을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="8d4350ac417d871ad1b8b36f5ac8cd36c7636a5a" translate="yes" xml:space="preserve">
          <source>Your script sources can be placed either in your web application's normal web root (allows for subdirectories) or in /WEB-INF/groovy/* (also allows subdirectories).</source>
          <target state="translated">스크립트 소스는 웹 응용 프로그램의 일반 웹 루트 (하위 디렉토리 허용) 또는 / WEB-INF / groovy / * (하위 디렉토리 허용)에 배치 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a4c7b1c8a9a34e7ded22775d447e30b322328a36" translate="yes" xml:space="preserve">
          <source>Zero or more insignificant newlines, all gobbled up and thrown away, but a warning message is left for the user, if there was a newline.</source>
          <target state="translated">0 개 이상의 중요하지 않은 줄 바꿈, 모두 움켜 쥐고 버려지지만 줄 바꿈이 있으면 사용자에게 경고 메시지가 남습니다.</target>
        </trans-unit>
        <trans-unit id="b25ef747af6ebc64888d15302c255bfcc69b6856" translate="yes" xml:space="preserve">
          <source>Zero or more insignificant newlines, all gobbled up and thrown away.</source>
          <target state="translated">0 개 이상의 중요하지 않은 줄 바꿈, 모두 먹어 치워 버렸습니다.</target>
        </trans-unit>
        <trans-unit id="35676acd2669d43b4c51005e45a63421633dd4a8" translate="yes" xml:space="preserve">
          <source>Zips an Iterable with indices in (index, value) order.</source>
          <target state="translated">(인덱스, 값) 순서의 인덱스로 Iterable을 압축합니다.</target>
        </trans-unit>
        <trans-unit id="d4a4d93ae90dd780c8c710cf836153df95bc421d" translate="yes" xml:space="preserve">
          <source>Zips an Iterable with indices in (value, index) order.</source>
          <target state="translated">(값, 인덱스) 순서의 인덱스로 Iterable을 압축합니다.</target>
        </trans-unit>
        <trans-unit id="dc82c2e107a78561564679249b66e78086a0db0e" translate="yes" xml:space="preserve">
          <source>Zips an iterator with indices in (index, value) order.</source>
          <target state="translated">(인덱스, 값) 순서의 인덱스로 반복자를 압축합니다.</target>
        </trans-unit>
        <trans-unit id="a61d29f0c5dbdb3486d977011418bdd6dd33c37d" translate="yes" xml:space="preserve">
          <source>Zips an iterator with indices in (value, index) order.</source>
          <target state="translated">(값, 인덱스) 순서의 인덱스로 반복기를 압축합니다.</target>
        </trans-unit>
        <trans-unit id="c3fe10e3021a337ca1335cf9695b1e322b28566c" translate="yes" xml:space="preserve">
          <source>ZoneId.systemDefault</source>
          <target state="translated">ZoneId.systemDefault</target>
        </trans-unit>
        <trans-unit id="6a66abbe0f7f8b6c064c277c2fedcf88593ccd21" translate="yes" xml:space="preserve">
          <source>ZonedDateTime.parse</source>
          <target state="translated">ZonedDateTime.parse</target>
        </trans-unit>
        <trans-unit id="1b1bbf233a88a2f42fe417619cc3c0f64821164f" translate="yes" xml:space="preserve">
          <source>[&lt;a href=&quot;http://gee.cs.oswego.edu/dl/classes/EDU/oswego/cs/dl/util/concurrent/intro.html&quot;&gt; Introduction to this package. &lt;/a&gt;]</source>
          <target state="translated">[ &lt;a href=&quot;http://gee.cs.oswego.edu/dl/classes/EDU/oswego/cs/dl/util/concurrent/intro.html&quot;&gt;이 패키지 소개. &lt;/a&gt;]</target>
        </trans-unit>
        <trans-unit id="71bc03185dfaa70d2ac782f6b8905a9883eb5442" translate="yes" xml:space="preserve">
          <source>[Groovy] Annotation Type AutoExternalize</source>
          <target state="translated">[Groovy] 주석 유형 AutoExternalize</target>
        </trans-unit>
        <trans-unit id="c6ed5862efbe403c995b8311f6afe3af29f56806" translate="yes" xml:space="preserve">
          <source>[Groovy] Annotation Type Canonical</source>
          <target state="translated">[Groovy] 주석 유형 표준</target>
        </trans-unit>
        <trans-unit id="2b77d6a0644f44815a4b2599002d87e9507a486b" translate="yes" xml:space="preserve">
          <source>[Groovy] Annotation Type CompileDynamic</source>
          <target state="translated">[Groovy] 주석 유형 CompileDynamic</target>
        </trans-unit>
        <trans-unit id="fa4ae9c27af069279880925b11a130ceecd7496f" translate="yes" xml:space="preserve">
          <source>[Groovy] Annotation Type ConditionalInterrupt</source>
          <target state="translated">[Groovy] 주석 유형 ConditionalInterrupt</target>
        </trans-unit>
        <trans-unit id="9b37db9ad05f0b3c1833cd886bd173c3143f2ac7" translate="yes" xml:space="preserve">
          <source>[Groovy] Annotation Type Immutable</source>
          <target state="translated">[Groovy] 주석 유형 불변</target>
        </trans-unit>
        <trans-unit id="51d3ce8f0fb8254e39dd885481b7e155b32bf25d" translate="yes" xml:space="preserve">
          <source>[Groovy] Annotation Type ListenerList</source>
          <target state="translated">[Groovy] 주석 유형 ListenerList</target>
        </trans-unit>
        <trans-unit id="0c9e5184a6bf2570b94a47a2841d68460fbd577e" translate="yes" xml:space="preserve">
          <source>[Groovy] Annotation Type OptionField</source>
          <target state="translated">[Groovy] 주석 유형 OptionField</target>
        </trans-unit>
        <trans-unit id="75a5933cc48d1bee6943da66a27158156477ee1e" translate="yes" xml:space="preserve">
          <source>[Groovy] Annotation Type TailRecursive</source>
          <target state="translated">[Groovy] 주석 유형 TailRecursive</target>
        </trans-unit>
        <trans-unit id="46e74505fffc520c4f4f1d1fbfdbe13df6034dd1" translate="yes" xml:space="preserve">
          <source>[Groovy] Annotation Type ThreadInterrupt</source>
          <target state="translated">[Groovy] 주석 유형 ThreadInterrupt</target>
        </trans-unit>
        <trans-unit id="8960b374f51e61d3e4f8ecc895c823e98626ff93" translate="yes" xml:space="preserve">
          <source>[Groovy] Annotation Type TimedInterrupt</source>
          <target state="translated">[Groovy] 주석 유형 TimedInterrupt</target>
        </trans-unit>
        <trans-unit id="aa278324af657f04c75d43dabcf97b27972c091d" translate="yes" xml:space="preserve">
          <source>[Groovy] Annotation Type UnparsedField</source>
          <target state="translated">[Groovy] Annotation Type UnparsedField</target>
        </trans-unit>
        <trans-unit id="16a82d7d77734e46c18ffd5e6d78ca63e241757e" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ASTMatcher</source>
          <target state="translated">[그루비] 클래스 ASTMatcher</target>
        </trans-unit>
        <trans-unit id="6c82fb17b7a75ab1218f3037ea30181deef7573d" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ASTTestTransformation</source>
          <target state="translated">[Groovy] 클래스 ASTTestTransformation</target>
        </trans-unit>
        <trans-unit id="4bb51c926a0665f9fc1ef80155c99b8b7bd536df" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ASTTestTransformation.1</source>
          <target state="translated">[Groovy] 클래스 ASTTestTransformation.1</target>
        </trans-unit>
        <trans-unit id="14b3dca2a1a3801a9f5ac40fd07a931bf8e16971" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ASTTestTransformation.LabelFinder</source>
          <target state="translated">[Groovy] 클래스 ASTTestTransformation.LabelFinder</target>
        </trans-unit>
        <trans-unit id="a5e28cfd42c295689d38e4f0c686da95a3974bbe" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ASTTransformationCustomizer</source>
          <target state="translated">[Groovy] 클래스 ASTTransformationCustomizer</target>
        </trans-unit>
        <trans-unit id="724c207795bc67d015c7542bc828706647005508" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ASTTransformationCustomizerFactory</source>
          <target state="translated">[Groovy] 클래스 ASTTransformationCustomizerFactory</target>
        </trans-unit>
        <trans-unit id="cf03dc1373067e65d5167a035cc0e1222372fbed" translate="yes" xml:space="preserve">
          <source>[Groovy] Class AbstractStreamingBuilder</source>
          <target state="translated">[Groovy] 클래스 AbstractStreamingBuilder</target>
        </trans-unit>
        <trans-unit id="c36ab83a920028a7a9cd190586c5eb9dceff9d5d" translate="yes" xml:space="preserve">
          <source>[Groovy] Class AbstractSyntheticMetaMethods</source>
          <target state="translated">[Groovy] 클래스 AbstractSyntheticMetaMethods</target>
        </trans-unit>
        <trans-unit id="6eb6f2ec1e107f5dcfef2f456806b3a21e71b1e7" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ActionFactory</source>
          <target state="translated">[그루비] 클래스 ActionFactory</target>
        </trans-unit>
        <trans-unit id="22994fd09e1a1f0ae0393248b063587982edbfd1" translate="yes" xml:space="preserve">
          <source>[Groovy] Class AliasCommand</source>
          <target state="translated">[그루비] 클래스 AliasCommand</target>
        </trans-unit>
        <trans-unit id="8e464b4fc1496d228d4e9fc8cc67cb148491504b" translate="yes" xml:space="preserve">
          <source>[Groovy] Class AnsiDetector</source>
          <target state="translated">[그루비] 클래스 AnsiDetector</target>
        </trans-unit>
        <trans-unit id="74c9182235d3ef31c160b13e4d15a77555715bd3" translate="yes" xml:space="preserve">
          <source>[Groovy] Class AnyTokenMatch</source>
          <target state="translated">[Groovy] 클래스 AnyTokenMatch</target>
        </trans-unit>
        <trans-unit id="a0029c505982113019ec68548afe0a1047bb0758" translate="yes" xml:space="preserve">
          <source>[Groovy] Class AstBrowser</source>
          <target state="translated">[그루비] 클래스 AstBrowser</target>
        </trans-unit>
        <trans-unit id="5f13ae1b2ec556e17ad94fb208a53abea4551378" translate="yes" xml:space="preserve">
          <source>[Groovy] Class AstBuilder</source>
          <target state="translated">[그루비] 클래스 AstBuilder</target>
        </trans-unit>
        <trans-unit id="51c0707069c894fa934eae9cdf4119773d3c5410" translate="yes" xml:space="preserve">
          <source>[Groovy] Class AstHelper</source>
          <target state="translated">[그루비] 클래스 AstHelper</target>
        </trans-unit>
        <trans-unit id="32129b2ca08d004d6c200268121d030426cdbcc1" translate="yes" xml:space="preserve">
          <source>[Groovy] Class AstNodeToScriptAdapter</source>
          <target state="translated">[Groovy] 클래스 AstNodeToScriptAdapter</target>
        </trans-unit>
        <trans-unit id="6a5ffb5fe20deb6782272b7cc39e51c13eddc5ad" translate="yes" xml:space="preserve">
          <source>[Groovy] Class AstSpecificationCompiler</source>
          <target state="translated">[Groovy] 클래스 AstSpecificationCompiler</target>
        </trans-unit>
        <trans-unit id="999e57a8b6827ec9a7813cd10b28fb75046034af" translate="yes" xml:space="preserve">
          <source>[Groovy] Class AutoIndentAction</source>
          <target state="translated">[Groovy] 클래스 AutoIndentAction</target>
        </trans-unit>
        <trans-unit id="ecf1bf3186b368cfa39800036f64286b530f44ce" translate="yes" xml:space="preserve">
          <source>[Groovy] Class BackslashEscapeCompleter</source>
          <target state="translated">[Groovy] 클래스 BackslashEscapeCompleter</target>
        </trans-unit>
        <trans-unit id="56c58b600916a803684bf74258bac42ca0dbd055" translate="yes" xml:space="preserve">
          <source>[Groovy] Class BeanFactory</source>
          <target state="translated">[그루비] 클래스 BeanFactory</target>
        </trans-unit>
        <trans-unit id="4d3efaeda4b5bae28f32fd188fd63f99f3c79028" translate="yes" xml:space="preserve">
          <source>[Groovy] Class BevelBorderFactory</source>
          <target state="translated">[Groovy] 클래스 BevelBorderFactory</target>
        </trans-unit>
        <trans-unit id="42023d19faf1fbf178d23dd4d6cd9d36d3a2ddce" translate="yes" xml:space="preserve">
          <source>[Groovy] Class BindFactory</source>
          <target state="translated">[Groovy] 클래스 BindFactory</target>
        </trans-unit>
        <trans-unit id="cd5ab13a15d4ad66fcc6ed3fda5c5b80ad262e39" translate="yes" xml:space="preserve">
          <source>[Groovy] Class BindGroupFactory</source>
          <target state="translated">[Groovy] 클래스 BindGroupFactory</target>
        </trans-unit>
        <trans-unit id="0e42692536b1eeeb8f674341610d8092f6c1944e" translate="yes" xml:space="preserve">
          <source>[Groovy] Class BindProxyFactory</source>
          <target state="translated">[Groovy] 클래스 BindProxyFactory</target>
        </trans-unit>
        <trans-unit id="6f35b26f65a86d2e3359e5054ef71f50ca1615fd" translate="yes" xml:space="preserve">
          <source>[Groovy] Class BoxFactory</source>
          <target state="translated">[그루비] 클래스 BoxFactory</target>
        </trans-unit>
        <trans-unit id="01d6cda9d2c3769e8d96219acd048809e3cbcfe1" translate="yes" xml:space="preserve">
          <source>[Groovy] Class BoxLayoutFactory</source>
          <target state="translated">[Groovy] 클래스 BoxLayoutFactory</target>
        </trans-unit>
        <trans-unit id="e0ab39c131f83769bd8bd88d449c57396550123d" translate="yes" xml:space="preserve">
          <source>[Groovy] Class BufferManager</source>
          <target state="translated">[Groovy] 클래스 BufferManager</target>
        </trans-unit>
        <trans-unit id="02cbeb6b259da9f3d2b38bd2ed083e114985b60d" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ButtonGroupFactory</source>
          <target state="translated">[Groovy] 클래스 ButtonGroupFactory</target>
        </trans-unit>
        <trans-unit id="ee31d7a2f949957df5d31829ebbf4c888a0b6d99" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ButtonOrDefaultRenderer</source>
          <target state="translated">[Groovy] Class ButtonOrDefaultRenderer</target>
        </trans-unit>
        <trans-unit id="e2c949a9b8b26288a10c3284b02b0c46bb494429" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ButtonOrTextEditor</source>
          <target state="translated">[Groovy] 클래스 ButtonOrTextEditor</target>
        </trans-unit>
        <trans-unit id="915bef689aec9c3e7850d19b57d2ae609d6720d3" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CellEditorFactory</source>
          <target state="translated">[Groovy] 클래스 CellEditorFactory</target>
        </trans-unit>
        <trans-unit id="39eb1a8f929063a5fcc800908731ed8c0feb04b0" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ClearCommand</source>
          <target state="translated">[그루비] 클래스 ClearCommand</target>
        </trans-unit>
        <trans-unit id="8a0322144d5421a6e226c4a34b254d7dad9e9d10" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CliBuilder</source>
          <target state="translated">[그루비] 클래스 CliBuilder</target>
        </trans-unit>
        <trans-unit id="954a85e8ff9c5f41013dd803ba47fb32c4ac444a" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CliBuilderException</source>
          <target state="translated">[Groovy] 클래스 CliBuilderException</target>
        </trans-unit>
        <trans-unit id="ac1517d83f25ef650705f5f036f8da6b95932c3d" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CliBuilderInternal</source>
          <target state="translated">[Groovy] 클래스 CliBuilderInternal</target>
        </trans-unit>
        <trans-unit id="61a732e6dd6e1f0ad053887ca5fc66d7cb77a820" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ClosureCellEditor</source>
          <target state="translated">[Groovy] 클래스 ClosureCellEditor</target>
        </trans-unit>
        <trans-unit id="1abb259a16e6cf0f2f5a1cd644d423482395e140" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CollectRecursiveCalls</source>
          <target state="translated">[Groovy] 클래스 CollectRecursiveCalls</target>
        </trans-unit>
        <trans-unit id="b739887915bc6029875a256837a6df03052b49b7" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CollectionFactory</source>
          <target state="translated">[Groovy] 클래스 CollectionFactory</target>
        </trans-unit>
        <trans-unit id="d6b0a1a3fbcde40a20213d934f305937124e407c" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ColumnFactory</source>
          <target state="translated">[Groovy] 클래스 ColumnFactory</target>
        </trans-unit>
        <trans-unit id="4ba33ed422c3ce861b3bec619052c68e6a0cfba6" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ColumnModelFactory</source>
          <target state="translated">[Groovy] 클래스 ColumnModelFactory</target>
        </trans-unit>
        <trans-unit id="83499ef384c3b74ffffe19a03f0ba36c905e3fa4" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ComboBoxFactory</source>
          <target state="translated">[Groovy] 클래스 ComboBoxFactory</target>
        </trans-unit>
        <trans-unit id="09f7469f831bd436accad8c14ff17b18c2b20ee2" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CommandAlias</source>
          <target state="translated">[그루비] 클래스 CommandAlias</target>
        </trans-unit>
        <trans-unit id="5a8639403803615d565f6171b0182c64ff3fd2ab" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CommandArgumentParser</source>
          <target state="translated">[그루비] 클래스 CommandArgumentParser</target>
        </trans-unit>
        <trans-unit id="d848ec9f249d1c13c84738ff115c0b3bdcce2b5f" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CommandException</source>
          <target state="translated">[그루비] 클래스 CommandException</target>
        </trans-unit>
        <trans-unit id="1a99e3c1b4ceeb8db0159293ed29e6d6e1134eb5" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CommandNameCompleter</source>
          <target state="translated">[그루비] 클래스 CommandNameCompleter</target>
        </trans-unit>
        <trans-unit id="db4c0b9a04f028fdbcc38baee0d0ad78bd710056" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CommandRegistry</source>
          <target state="translated">[그루비] 클래스 CommandRegistry</target>
        </trans-unit>
        <trans-unit id="58b3a112d87fc3f45858a72e25d32beb56d05360" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CommandSupport</source>
          <target state="translated">[그루비] 클래스 CommandSupport</target>
        </trans-unit>
        <trans-unit id="c4bdd079251cd4294cd2493fdd856e4771469625" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CompilerCustomizationBuilder</source>
          <target state="translated">[Groovy] 클래스 CompilerCustomizationBuilder</target>
        </trans-unit>
        <trans-unit id="43a8deadaab38e8bf246d665798acf62a95cc538" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ComplexCommandSupport</source>
          <target state="translated">[Groovy] Class ComplexCommandSupport</target>
        </trans-unit>
        <trans-unit id="8de48738f36b7aece509a5ba2085488e8053049f" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ComponentFactory</source>
          <target state="translated">[Groovy] 클래스 ComponentFactory</target>
        </trans-unit>
        <trans-unit id="a7486a753b87273513dcf1276a7011d8c0d8303c" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CompoundBorderFactory</source>
          <target state="translated">[Groovy] Class CompoundBorderFactory</target>
        </trans-unit>
        <trans-unit id="ce0c84a62c57593e47d8d81c9768b098d454139c" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ConditionalInterruptibleASTTransformation</source>
          <target state="translated">[Groovy] 클래스 ConditionalInterruptibleASTTransformation</target>
        </trans-unit>
        <trans-unit id="2da9a021913dc7a6d46723dafea8a54e4c5d4da0" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ConfigSlurper</source>
          <target state="translated">[Groovy] 클래스 ConfigSlurper</target>
        </trans-unit>
        <trans-unit id="55c7f1f052fdb3ed641f39b297bbf05340126fbe" translate="yes" xml:space="preserve">
          <source>[Groovy] Class Console</source>
          <target state="translated">[Groovy] 클래스 콘솔</target>
        </trans-unit>
        <trans-unit id="45df95aad2410526086788b6920ace8919692506" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ConsoleApplet</source>
          <target state="translated">[Groovy] Class ConsoleApplet</target>
        </trans-unit>
        <trans-unit id="71a27ed115916217bb249d48afb55bcfaef1f235" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ConsoleIvyPlugin</source>
          <target state="translated">[Groovy] Class ConsoleIvyPlugin</target>
        </trans-unit>
        <trans-unit id="4effeaf03d38ff119d86bfe83c2293644d1c7f0d" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ConsolePreferences</source>
          <target state="translated">[Groovy] 클래스 ConsolePreferences</target>
        </trans-unit>
        <trans-unit id="dc33829dd3cb5d941bf4ef8035e8856a5667bace" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CurlyCountingGroovyLexer</source>
          <target state="translated">[Groovy] 클래스 CurlyCountingGroovyLexer</target>
        </trans-unit>
        <trans-unit id="0a6ab88fa6a55da14aecb0cef8e06c16dff444dc" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CustomClassSyntaxCompleter</source>
          <target state="translated">[Groovy] 클래스 CustomClassSyntaxCompleter</target>
        </trans-unit>
        <trans-unit id="05e151ca8f815dbbd1a903fe3a868c31898c985e" translate="yes" xml:space="preserve">
          <source>[Groovy] Class CustomClassSyntaxCompletor</source>
          <target state="translated">[Groovy] 클래스 CustomClassSyntaxCompletor</target>
        </trans-unit>
        <trans-unit id="f0df0441267baea9a8e8bbe181cd4166bf439637" translate="yes" xml:space="preserve">
          <source>[Groovy] Class DefaultCommandsRegistrar</source>
          <target state="translated">[Groovy] 클래스 DefaultCommandsRegistrar</target>
        </trans-unit>
        <trans-unit id="6182455ebe70ec5ddb1b20c6f9c571da68f96bd4" translate="yes" xml:space="preserve">
          <source>[Groovy] Class Demand</source>
          <target state="translated">[그루비] 클래스 수요</target>
        </trans-unit>
        <trans-unit id="770d9e5906dd257b18a596da172194502ff16a85" translate="yes" xml:space="preserve">
          <source>[Groovy] Class DialogFactory</source>
          <target state="translated">[Groovy] 클래스 DialogFactory</target>
        </trans-unit>
        <trans-unit id="84f845704724cb37b0be4b72c0722056deefff81" translate="yes" xml:space="preserve">
          <source>[Groovy] Class DisplayCommand</source>
          <target state="translated">[그루비] 클래스 DisplayCommand</target>
        </trans-unit>
        <trans-unit id="7d7020dc99e33f3da11fa02036761b4cde3641e9" translate="yes" xml:space="preserve">
          <source>[Groovy] Class DocCommand</source>
          <target state="translated">[Groovy] 클래스 DocCommand</target>
        </trans-unit>
        <trans-unit id="5d52a5e6013301a3f402e1d1f66e0c8a5d909ec4" translate="yes" xml:space="preserve">
          <source>[Groovy] Class DocGenerator</source>
          <target state="translated">[Groovy] 클래스 DocGenerator</target>
        </trans-unit>
        <trans-unit id="1194cfd2621f5ee44f8d4c8baa8dbdc108933a5b" translate="yes" xml:space="preserve">
          <source>[Groovy] Class EditCommand</source>
          <target state="translated">[그루비] 클래스 EditCommand</target>
        </trans-unit>
        <trans-unit id="33b0116f21291019e0915c1171a497d0bcd3272c" translate="yes" xml:space="preserve">
          <source>[Groovy] Class EmptyBorderFactory</source>
          <target state="translated">[Groovy] 클래스 EmptyBorderFactory</target>
        </trans-unit>
        <trans-unit id="40e78aff53f43a6be403001c1f694d97f5237fd8" translate="yes" xml:space="preserve">
          <source>[Groovy] Class Entity</source>
          <target state="translated">[Groovy] 클래스 엔티티</target>
        </trans-unit>
        <trans-unit id="bb3bf8e1ac00a67733fde84c904862bafe741502" translate="yes" xml:space="preserve">
          <source>[Groovy] Class EtchedBorderFactory</source>
          <target state="translated">[Groovy] EtchedBorderFactory 클래스</target>
        </trans-unit>
        <trans-unit id="40124fad729fff3daf37fceafd3b1802210a1595" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ExitCommand</source>
          <target state="translated">[그루비] 클래스 ExitCommand</target>
        </trans-unit>
        <trans-unit id="610b5fe589eabd1d7be4d1db811e381a8e478203" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ExitNotification</source>
          <target state="translated">[Groovy] Class ExitNotification</target>
        </trans-unit>
        <trans-unit id="18b7f23cf19a4ef138551b9498a5f3178250c3ec" translate="yes" xml:space="preserve">
          <source>[Groovy] Class FileNameByRegexFinder</source>
          <target state="translated">[Groovy] 클래스 FileNameByRegexFinder</target>
        </trans-unit>
        <trans-unit id="567aab3c45dafafb9acc8cf90e2ac8f6a8a7db10" translate="yes" xml:space="preserve">
          <source>[Groovy] Class FileNameCompleter</source>
          <target state="translated">[Groovy] 클래스 FileNameCompleter</target>
        </trans-unit>
        <trans-unit id="6c3b16c82a77887a682d869b9ea5361d7aef4d61" translate="yes" xml:space="preserve">
          <source>[Groovy] Class FileNameFinder</source>
          <target state="translated">[Groovy] 클래스 FileNameFinder</target>
        </trans-unit>
        <trans-unit id="01b32ecac9f69e23bfa665dcea1d64b54d2cc84a" translate="yes" xml:space="preserve">
          <source>[Groovy] Class FileTreeBuilder</source>
          <target state="translated">[Groovy] 클래스 FileTreeBuilder</target>
        </trans-unit>
        <trans-unit id="54942243102eb608c7ccbe198f4528c6f0c6f50e" translate="yes" xml:space="preserve">
          <source>[Groovy] Class FormattedTextFactory</source>
          <target state="translated">[Groovy] 클래스 FormattedTextFactory</target>
        </trans-unit>
        <trans-unit id="cf68e404f82d72c9fdb2294ac8277ff64adf9c64" translate="yes" xml:space="preserve">
          <source>[Groovy] Class FrameFactory</source>
          <target state="translated">[Groovy] 클래스 FrameFactory</target>
        </trans-unit>
        <trans-unit id="cd52c702de13d91709a6701aef2aa09e978a0916" translate="yes" xml:space="preserve">
          <source>[Groovy] Class GrabCommand</source>
          <target state="translated">[그루비] 클래스 GrabCommand</target>
        </trans-unit>
        <trans-unit id="a9acd7bb8b88bd92eaed41d875674fa328b56351" translate="yes" xml:space="preserve">
          <source>[Groovy] Class GrapeIvy</source>
          <target state="translated">[그루비] 그레이프 아이비 클래스</target>
        </trans-unit>
        <trans-unit id="6d9e78a2ecaf022461d1ed0912081e41441507a4" translate="yes" xml:space="preserve">
          <source>[Groovy] Class GrapeMain</source>
          <target state="translated">[그루비] 그레이프 메인 클래스</target>
        </trans-unit>
        <trans-unit id="b5963a102693e979745a942ac9ce6589ba7b6658" translate="yes" xml:space="preserve">
          <source>[Groovy] Class GridBagFactory</source>
          <target state="translated">[Groovy] 클래스 GridBagFactory</target>
        </trans-unit>
        <trans-unit id="8a10840eed511e90d5ca8a84b9a6a8bafb763509" translate="yes" xml:space="preserve">
          <source>[Groovy] Class GroovyJUnitRunnerHelper</source>
          <target state="translated">[그루비] 클래스 GroovyJUnitRunnerHelper</target>
        </trans-unit>
        <trans-unit id="c49a6722176ef6f9536dc798c91d99225d5fb35b" translate="yes" xml:space="preserve">
          <source>[Groovy] Class GroovyLogTestCase</source>
          <target state="translated">[Groovy] 클래스 GroovyLogTestCase</target>
        </trans-unit>
        <trans-unit id="01ed5e78ec110f1f8dfdb0cb4b23e59eb19b086a" translate="yes" xml:space="preserve">
          <source>[Groovy] Class GroovyShellTestCase</source>
          <target state="translated">[Groovy] 클래스 GroovyShellTestCase</target>
        </trans-unit>
        <trans-unit id="258799141c72638211f803aa66370903d4c41c4d" translate="yes" xml:space="preserve">
          <source>[Groovy] Class GroovySyntaxCompleter</source>
          <target state="translated">[Groovy] 클래스 GroovySyntaxCompleter</target>
        </trans-unit>
        <trans-unit id="5025e3e8448b8c20d91581c9091292c77514f52f" translate="yes" xml:space="preserve">
          <source>[Groovy] Class GroovySyntaxCompleter.InStringException</source>
          <target state="translated">[Groovy] 클래스 GroovySyntaxCompleter.InStringException</target>
        </trans-unit>
        <trans-unit id="0d75bc601bbae8762b797d03909d443c4a6d0b60" translate="yes" xml:space="preserve">
          <source>[Groovy] Class GroovySyntaxCompletor</source>
          <target state="translated">[Groovy] 클래스 GroovySyntaxCompletor</target>
        </trans-unit>
        <trans-unit id="b853a3a8afed0368e4e31f40db89ed05dfec024e" translate="yes" xml:space="preserve">
          <source>[Groovy] Class GroovySyntaxCompletor.InStringException</source>
          <target state="translated">[Groovy] 클래스 GroovySyntaxCompletor.InStringException</target>
        </trans-unit>
        <trans-unit id="29f6e15201a8a3df353e9990e7130a3a54ab3cba" translate="yes" xml:space="preserve">
          <source>[Groovy] Class Groovysh</source>
          <target state="translated">[그루비] 클래스 Groovysh</target>
        </trans-unit>
        <trans-unit id="22b05a67f762cd073220712adcea6649d366b062" translate="yes" xml:space="preserve">
          <source>[Groovy] Class HasRecursiveCalls</source>
          <target state="translated">[Groovy] 클래스 HasRecursiveCalls</target>
        </trans-unit>
        <trans-unit id="7086c4c6472114d6d4a00c360226e00f06262153" translate="yes" xml:space="preserve">
          <source>[Groovy] Class HelpCommand</source>
          <target state="translated">[그루비] 클래스 HelpCommand</target>
        </trans-unit>
        <trans-unit id="f89ced6d3197a9b0308442b0717c50f375718c4c" translate="yes" xml:space="preserve">
          <source>[Groovy] Class HistoryCommand</source>
          <target state="translated">[그루비] 클래스 HistoryCommand</target>
        </trans-unit>
        <trans-unit id="c33341365b035f546f349f7ea5f82ea3010872a3" translate="yes" xml:space="preserve">
          <source>[Groovy] Class HistoryRecord</source>
          <target state="translated">[그루비] 수업 이력 기록</target>
        </trans-unit>
        <trans-unit id="7f9dee5b8ad7225e6b2634c31740f20513a0211c" translate="yes" xml:space="preserve">
          <source>[Groovy] Class Ignore</source>
          <target state="translated">[그루비] 클래스 무시</target>
        </trans-unit>
        <trans-unit id="bbb395ceb750c5165a617585c8be3def7530edcd" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ImageIconFactory</source>
          <target state="translated">[Groovy] 클래스 ImageIconFactory</target>
        </trans-unit>
        <trans-unit id="43eac7b86032da1d2c14959765bd0db591ad4294" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ImportCommand</source>
          <target state="translated">[그루비] 클래스 ImportCommand</target>
        </trans-unit>
        <trans-unit id="2b2442c0f3546d31b3b9e6728db97df00d60c302" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ImportsSyntaxCompleter</source>
          <target state="translated">[Groovy] 클래스 ImportsSyntaxCompleter</target>
        </trans-unit>
        <trans-unit id="20b6c496bd458474e59194fa9eef40a4874cc168" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ImportsSyntaxCompletor</source>
          <target state="translated">[Groovy] 클래스 ImportsSyntaxCompletor</target>
        </trans-unit>
        <trans-unit id="272fa5763d34639ba24ade8f32328c5a3dae88b7" translate="yes" xml:space="preserve">
          <source>[Groovy] Class InWhileLoopWrapper</source>
          <target state="translated">[Groovy] 클래스 InWhileLoopWrapper</target>
        </trans-unit>
        <trans-unit id="df246db0c7d9c41106afbed8c29cee352cc62537" translate="yes" xml:space="preserve">
          <source>[Groovy] Class InfixKeywordSyntaxCompleter</source>
          <target state="translated">[Groovy] 클래스 InfixKeywordSyntaxCompleter</target>
        </trans-unit>
        <trans-unit id="37b5924587d7ade383a35faeb4c96d75cd72d510" translate="yes" xml:space="preserve">
          <source>[Groovy] Class InfixKeywordSyntaxCompletor</source>
          <target state="translated">[Groovy] 클래스 InfixKeywordSyntaxCompletor</target>
        </trans-unit>
        <trans-unit id="6626d790cca03f34969d7e892614c0b7953b3c18" translate="yes" xml:space="preserve">
          <source>[Groovy] Class InspectCommand</source>
          <target state="translated">[Groovy] 클래스 InspectCommand</target>
        </trans-unit>
        <trans-unit id="8b376b8b823fea80f6e2b89b7c1b103272811fdf" translate="yes" xml:space="preserve">
          <source>[Groovy] Class InteractiveShellRunner</source>
          <target state="translated">[Groovy] 클래스 InteractiveShellRunner</target>
        </trans-unit>
        <trans-unit id="f9ef724139360e06a6e7b1937ca69c9caa261c36" translate="yes" xml:space="preserve">
          <source>[Groovy] Class InternalFrameFactory</source>
          <target state="translated">[Groovy] 클래스 InternalFrameFactory</target>
        </trans-unit>
        <trans-unit id="e495df3e8a2797b28da82075a54bdb3b453f28bc" translate="yes" xml:space="preserve">
          <source>[Groovy] Class Interpreter</source>
          <target state="translated">[Groovy] 클래스 통역사</target>
        </trans-unit>
        <trans-unit id="10d111d761d82b3fd60039fc19a542b1e2e698f7" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JComboBoxMetaMethods</source>
          <target state="translated">[Groovy] 클래스 JComboBoxMetaMethods</target>
        </trans-unit>
        <trans-unit id="50d8c89b37b85ad164f994118a4204c4aeaca087" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JListMetaMethods</source>
          <target state="translated">[Groovy] 클래스 JListMetaMethods</target>
        </trans-unit>
        <trans-unit id="f2bcc45bd17df377506479ed2b20b4f03111ba01" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JListProperties</source>
          <target state="translated">[Groovy] 클래스 JListProperties</target>
        </trans-unit>
        <trans-unit id="49684d3a8a404aaa6f60ed162c79ec0163cb285b" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JListProperties.1</source>
          <target state="translated">[Groovy] 클래스 JListProperties.1</target>
        </trans-unit>
        <trans-unit id="e250355a49237e47c47a4e128f41ff31413d2791" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JListProperties.2</source>
          <target state="translated">[Groovy] 클래스 JListProperties.2</target>
        </trans-unit>
        <trans-unit id="c5123518c12c17101702bc4d71f0cc28f7c84fe2" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JListProperties.3</source>
          <target state="translated">[Groovy] 클래스 JListProperties.3</target>
        </trans-unit>
        <trans-unit id="9834991035978da7668b3bca7dbf43a376e5a010" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JListProperties.4</source>
          <target state="translated">[Groovy] 클래스 JListProperties.4</target>
        </trans-unit>
        <trans-unit id="1102d8527aec608c15c96044fc68ee47ed521b97" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JListProperties.5</source>
          <target state="translated">[Groovy] 클래스 JListProperties.5</target>
        </trans-unit>
        <trans-unit id="458df372b06bc3850e846e93e4f08c190a5eb563" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JListProperties.6</source>
          <target state="translated">[Groovy] 클래스 JListProperties.6</target>
        </trans-unit>
        <trans-unit id="328805d477fb51162350a628740756395deb2fa2" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JListProperties.7</source>
          <target state="translated">[Groovy] 클래스 JListProperties.7</target>
        </trans-unit>
        <trans-unit id="530ff944491e833a4fb028460dba4356020f045c" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JTableMetaMethods</source>
          <target state="translated">[Groovy] 클래스 JTableMetaMethods</target>
        </trans-unit>
        <trans-unit id="0b76c4ff662043f35663f36ce57b9260fafcbf00" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JavadocAssertionTestBuilder</source>
          <target state="translated">[Groovy] 클래스 JavadocAssertionTestBuilder</target>
        </trans-unit>
        <trans-unit id="a9566d69325267343a7ef5084d09870019650c9b" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JavadocAssertionTestSuite</source>
          <target state="translated">[Groovy] 클래스 JavadocAssertionTestSuite</target>
        </trans-unit>
        <trans-unit id="c72a7fc6acbc130c31b90cfba2e0e1fadd397adf" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxAttributeInfoManager</source>
          <target state="translated">[Groovy] 클래스 JmxAttributeInfoManager</target>
        </trans-unit>
        <trans-unit id="f94a6c4406d69a6efe6389b499daf703a4f36752" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxBeanExportFactory</source>
          <target state="translated">[Groovy] 클래스 JmxBeanExportFactory</target>
        </trans-unit>
        <trans-unit id="b5a1976aefa3ab75abcf17cebb8be0ef682d74ce" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxBeanFactory</source>
          <target state="translated">[Groovy] 클래스 JmxBeanFactory</target>
        </trans-unit>
        <trans-unit id="dc353bd69913711042306ec80a9f23ff4c89a68e" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxBeanInfoManager</source>
          <target state="translated">[Groovy] 클래스 JmxBeanInfoManager</target>
        </trans-unit>
        <trans-unit id="8e19406a01b9092f06ffdc05557392d3f7b14ee5" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxBeansFactory</source>
          <target state="translated">[Groovy] 클래스 JmxBeansFactory</target>
        </trans-unit>
        <trans-unit id="5907cf882848ccba613a0206fc8472eef2e64664" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxBuilder</source>
          <target state="translated">[Groovy] 클래스 JmxBuilder</target>
        </trans-unit>
        <trans-unit id="133f4dab1625211eadf5f42a9c424a7ad9f7717b" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxBuilderTools</source>
          <target state="translated">[Groovy] 클래스 JmxBuilderTools</target>
        </trans-unit>
        <trans-unit id="2d74cff854bab1a74b519f3fb78c6a2d449adcb8" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxClientConnectorFactory</source>
          <target state="translated">[Groovy] 클래스 JmxClientConnectorFactory</target>
        </trans-unit>
        <trans-unit id="29eb263b1790248fd1fb363689da168b32118244" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxEmitterFactory</source>
          <target state="translated">[Groovy] 클래스 JmxEmitterFactory</target>
        </trans-unit>
        <trans-unit id="6b571b3afe497926a476bf5c9b5d1ad0fdf6e213" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxListenerFactory</source>
          <target state="translated">[Groovy] 클래스 JmxListenerFactory</target>
        </trans-unit>
        <trans-unit id="fbe7d0e25089f293a6860e5b9d0ec747543cdb7e" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxMetaMapBuilder</source>
          <target state="translated">[Groovy] 클래스 JmxMetaMapBuilder</target>
        </trans-unit>
        <trans-unit id="608d53ff195fcb5054efbd095cb248c72760eed4" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxOperationInfoManager</source>
          <target state="translated">[Groovy] 클래스 JmxOperationInfoManager</target>
        </trans-unit>
        <trans-unit id="09c6fe54e47744f9f1fe54bad84dc3c07bb31055" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxServerConnectorFactory</source>
          <target state="translated">[Groovy] 클래스 JmxServerConnectorFactory</target>
        </trans-unit>
        <trans-unit id="e173ccd2fc6ad97e376b6ac789d8a691f8a40cd7" translate="yes" xml:space="preserve">
          <source>[Groovy] Class JmxTimerFactory</source>
          <target state="translated">[Groovy] 클래스 JmxTimerFactory</target>
        </trans-unit>
        <trans-unit id="7fa67170d9c2fe33cdbf425cbe8edb025674c898" translate="yes" xml:space="preserve">
          <source>[Groovy] Class KeywordSyntaxCompleter</source>
          <target state="translated">[Groovy] Class KeywordSyntaxCompleter</target>
        </trans-unit>
        <trans-unit id="3ac1a7830b4d188b9f765ee21629b23dde492ffc" translate="yes" xml:space="preserve">
          <source>[Groovy] Class KeywordSyntaxCompletor</source>
          <target state="translated">[Groovy] Class KeywordSyntaxCompletor</target>
        </trans-unit>
        <trans-unit id="7289d44490d482cc3cf864df64b39494277cc6da" translate="yes" xml:space="preserve">
          <source>[Groovy] Class LayoutFactory</source>
          <target state="translated">[Groovy] 클래스 LayoutFactory</target>
        </trans-unit>
        <trans-unit id="66368c8142a94855f1fc5b3a9354c90a04126ef2" translate="yes" xml:space="preserve">
          <source>[Groovy] Class LineBorderFactory</source>
          <target state="translated">[Groovy] 클래스 LineBorderFactory</target>
        </trans-unit>
        <trans-unit id="15988484586d3c958dc0cd3112dfc6e54af43ad2" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ListFactory</source>
          <target state="translated">[Groovy] 클래스 ListFactory</target>
        </trans-unit>
        <trans-unit id="4de17cb1f498647638bbb765fe3b022dbb908d73" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ListenerListASTTransformation</source>
          <target state="translated">[Groovy] 클래스 ListenerListASTTransformation</target>
        </trans-unit>
        <trans-unit id="c38546f5d754d86228af34bd3360e0e7306ece43" translate="yes" xml:space="preserve">
          <source>[Groovy] Class LoadCommand</source>
          <target state="translated">[그루비] 클래스 LoadCommand</target>
        </trans-unit>
        <trans-unit id="60b80a0d171da1e2889eee068f498c756683baea" translate="yes" xml:space="preserve">
          <source>[Groovy] Class LookAndFeelHelper</source>
          <target state="translated">[그루비] 클래스 LookAndFeelHelper</target>
        </trans-unit>
        <trans-unit id="281c39bb249cbf29de438674aafb839ebd28c0b9" translate="yes" xml:space="preserve">
          <source>[Groovy] Class LooseExpectation</source>
          <target state="translated">[Groovy] 클래스 LooseExpectation</target>
        </trans-unit>
        <trans-unit id="3b1c002c9f6767fe109599e344cf4cc778a6d24c" translate="yes" xml:space="preserve">
          <source>[Groovy] Class Main</source>
          <target state="translated">[그루비] 클래스 메인</target>
        </trans-unit>
        <trans-unit id="97128e78c470faca4f6ab0f6e76e48975c4ae317" translate="yes" xml:space="preserve">
          <source>[Groovy] Class MapFactory</source>
          <target state="translated">[Groovy] 클래스 MapFactory</target>
        </trans-unit>
        <trans-unit id="39d104fc4e9713dd461d78f3526a52ed40948801" translate="yes" xml:space="preserve">
          <source>[Groovy] Class MarkupTemplateTypeCheckingExtension</source>
          <target state="translated">[Groovy] 클래스 MarkupTemplateTypeCheckingExtension</target>
        </trans-unit>
        <trans-unit id="da1bcf008562403ca3dc14e6ce4ea1ef548fbaec" translate="yes" xml:space="preserve">
          <source>[Groovy] Class MarkupTemplateTypeCheckingExtension.1</source>
          <target state="translated">[Groovy] 클래스 MarkupTemplateTypeCheckingExtension.1</target>
        </trans-unit>
        <trans-unit id="28fc976905b1c8531171e275b8c2d4b73a68197f" translate="yes" xml:space="preserve">
          <source>[Groovy] Class MatchingConstraints</source>
          <target state="translated">[Groovy] 클래스 MatchingConstraints</target>
        </trans-unit>
        <trans-unit id="4fa4ed241033f456058c35658431fee3f47450f0" translate="yes" xml:space="preserve">
          <source>[Groovy] Class MatchingConstraintsBuilder</source>
          <target state="translated">[Groovy] 클래스 MatchingConstraintsBuilder</target>
        </trans-unit>
        <trans-unit id="ebf4b2e109dffa937bb6905fe86e867eb9fa6203" translate="yes" xml:space="preserve">
          <source>[Groovy] Class MatchingConstraintsBuilder.1</source>
          <target state="translated">[Groovy] 클래스 MatchingConstraintsBuilder.1</target>
        </trans-unit>
        <trans-unit id="3466977a9b245f1f73f8b59ca96de12a40b9b20b" translate="yes" xml:space="preserve">
          <source>[Groovy] Class MatchingConstraintsBuilder.2</source>
          <target state="translated">[Groovy] 클래스 MatchingConstraintsBuilder.2</target>
        </trans-unit>
        <trans-unit id="922aeb8c4f188f8c71edeea173e0eabb6ddcd275" translate="yes" xml:space="preserve">
          <source>[Groovy] Class MatteBorderFactory</source>
          <target state="translated">[Groovy] 클래스 MatteBorderFactory</target>
        </trans-unit>
        <trans-unit id="283f7b4558f1284cfd0c982606be688f372b2e4e" translate="yes" xml:space="preserve">
          <source>[Groovy] Class MockFor</source>
          <target state="translated">[Groovy] Class MockFor</target>
        </trans-unit>
        <trans-unit id="baf54e68e231423ec17694565bc2323d8fe3a2ea" translate="yes" xml:space="preserve">
          <source>[Groovy] Class MockInterceptor</source>
          <target state="translated">[Groovy] 클래스 MockInterceptor</target>
        </trans-unit>
        <trans-unit id="73bec6f370b87b41eeb023ad71033bb606d4c1d4" translate="yes" xml:space="preserve">
          <source>[Groovy] Class NavigablePropertiesCompleter</source>
          <target state="translated">[Groovy] 클래스 NavigablePropertiesCompleter</target>
        </trans-unit>
        <trans-unit id="c17eab34463d0e3c03d26ee5711e74efc8ff2a80" translate="yes" xml:space="preserve">
          <source>[Groovy] Class NoExitSecurityManager</source>
          <target state="translated">[Groovy] 클래스 NoExitSecurityManager</target>
        </trans-unit>
        <trans-unit id="2902fbb299fc75769ca4ba4119efda9a3d22a391" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ObjectBrowser</source>
          <target state="translated">[그루비] 클래스 ObjectBrowser</target>
        </trans-unit>
        <trans-unit id="ec44819380ededd05df9762187aba284dd881b0f" translate="yes" xml:space="preserve">
          <source>[Groovy] Class OptionAccessor</source>
          <target state="translated">[Groovy] 클래스 OptionAccessor</target>
        </trans-unit>
        <trans-unit id="4c10b232ced87951a5d876b29694646bd4f2f720" translate="yes" xml:space="preserve">
          <source>[Groovy] Class OutputTransforms</source>
          <target state="translated">[Groovy] 클래스 OutputTransforms</target>
        </trans-unit>
        <trans-unit id="d58b26df6527668ccf1ae4410ccd4e507ec29691" translate="yes" xml:space="preserve">
          <source>[Groovy] Class PackageHelperImpl</source>
          <target state="translated">[그루비] 클래스 PackageHelperImpl</target>
        </trans-unit>
        <trans-unit id="1cbac8a185c08121bc0029c8a21c8cb5c5ade0b7" translate="yes" xml:space="preserve">
          <source>[Groovy] Class PurgeCommand</source>
          <target state="translated">[그루비] 클래스 PurgeCommand</target>
        </trans-unit>
        <trans-unit id="d251be5058ea6be9e34baa60d2f950398c52a1ea" translate="yes" xml:space="preserve">
          <source>[Groovy] Class RecordCommand</source>
          <target state="translated">[그루비] 클래스 RecordCommand</target>
        </trans-unit>
        <trans-unit id="7eadde31984aa34651237d6879e2844046b88b1d" translate="yes" xml:space="preserve">
          <source>[Groovy] Class RecursivenessTester</source>
          <target state="translated">[Groovy] 클래스 RecursivenessTester</target>
        </trans-unit>
        <trans-unit id="99b8f56960e8bc0f619f61975ebaf5dbb56b1ac1" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ReflectionCompleter</source>
          <target state="translated">[그루비] 클래스 ReflectionCompleter</target>
        </trans-unit>
        <trans-unit id="682705e060d16c9a2e1a035cc412e399306fa4f0" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ReflectionCompletionCandidate</source>
          <target state="translated">[Groovy] 클래스 ReflectionCompletionCandidate</target>
        </trans-unit>
        <trans-unit id="c348da96b1000d372723e17bdcdc2f5bed76b7b0" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ReflectionCompletor</source>
          <target state="translated">[그루비] 클래스 ReflectionCompletor</target>
        </trans-unit>
        <trans-unit id="56b09f83675ae23eefb8560faf60b0ef36e6665e" translate="yes" xml:space="preserve">
          <source>[Groovy] Class RegisterCommand</source>
          <target state="translated">[그루비] 클래스 RegisterCommand</target>
        </trans-unit>
        <trans-unit id="e4ad0628aa0689345e5c054568108369a70da9d7" translate="yes" xml:space="preserve">
          <source>[Groovy] Class RelaxedParser</source>
          <target state="translated">[그루비] RelaxedParser 클래스</target>
        </trans-unit>
        <trans-unit id="6fb72261df6ef8063cdb0a0d4cc1ad6b1279e2f3" translate="yes" xml:space="preserve">
          <source>[Groovy] Class RendererFactory</source>
          <target state="translated">[Groovy] 클래스 RendererFactory</target>
        </trans-unit>
        <trans-unit id="7327a4469429549b457ac7d630c245f9234acc48" translate="yes" xml:space="preserve">
          <source>[Groovy] Class ReturnAdderForClosures</source>
          <target state="translated">[Groovy] 클래스 ReturnAdderForClosures</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
