<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="groovy">
    <body>
      <group id="groovy">
        <trans-unit id="47c49966d4682db6282ea83b016dc27f813bd958" translate="yes" xml:space="preserve">
          <source>Formats this date/time with the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_LOCAL_DATE_TIME&quot;&gt;DateTimeFormatter.ISO_LOCAL_DATE_TIME&lt;/a&gt; formatter and appends the zone's short name, e.g. &lt;code&gt;2018-03-10T14:34:55.144EST&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_LOCAL_DATE_TIME&quot;&gt;DateTimeFormatter.ISO_LOCAL_DATE_TIME&lt;/a&gt; 포맷터 로이 날짜 / 시간의 형식을 지정하고 영역의 짧은 이름 (예 : &lt;code&gt;2018-03-10T14:34:55.144EST&lt;/code&gt; )을 추가 합니다.</target>
        </trans-unit>
        <trans-unit id="21e35797c7a10f344df96d773b6510b90c4920c7" translate="yes" xml:space="preserve">
          <source>Formats this date/time with the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_LOCAL_DATE_TIME&quot;&gt;DateTimeFormatter.ISO_LOCAL_DATE_TIME&lt;/a&gt; formatter.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_LOCAL_DATE_TIME&quot;&gt;DateTimeFormatter.ISO_LOCAL_DATE_TIME&lt;/a&gt; 포맷터를 사용하여이 날짜 / 시간의 형식을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="a23cfaa0cfe4cc6a0902357e3781935c4e605ff1" translate="yes" xml:space="preserve">
          <source>Formats this date/time with the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_LOCAL_TIME&quot;&gt;DateTimeFormatter.ISO_LOCAL_TIME&lt;/a&gt; formatter and appends the zone's short name, e.g.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_LOCAL_TIME&quot;&gt;DateTimeFormatter.ISO_LOCAL_TIME&lt;/a&gt; 포맷터를 사용하여이 날짜 / 시간을 포맷하고 영역의 짧은 이름을 추가합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="68802783f9245a52165e444d6c038c263a27567d" translate="yes" xml:space="preserve">
          <source>Formats this date/time with the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_LOCAL_TIME&quot;&gt;DateTimeFormatter.ISO_LOCAL_TIME&lt;/a&gt; formatter and appends the zone's short name, e.g. &lt;code&gt;14:34:55.144EST&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_LOCAL_TIME&quot;&gt;DateTimeFormatter.ISO_LOCAL_TIME&lt;/a&gt; 포맷터 로이 날짜 / 시간을 포맷하고 영역의 짧은 이름을 추가합니다 (예 : &lt;code&gt;14:34:55.144EST&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="83978ecadf8bb78f4527632f55fe0ef2ace70e82" translate="yes" xml:space="preserve">
          <source>Formats this date/time with the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_LOCAL_TIME&quot;&gt;DateTimeFormatter.ISO_LOCAL_TIME&lt;/a&gt; formatter.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_LOCAL_TIME&quot;&gt;DateTimeFormatter.ISO_LOCAL_TIME&lt;/a&gt; 포맷터를 사용하여이 날짜 / 시간의 형식을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="69577d874e2cedc0f624db7318842f367d04da50" translate="yes" xml:space="preserve">
          <source>Formats this date/time with the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_OFFSET_DATE&quot;&gt;DateTimeFormatter.ISO_OFFSET_DATE&lt;/a&gt; formatter.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_OFFSET_DATE&quot;&gt;DateTimeFormatter.ISO_OFFSET_DATE&lt;/a&gt; 포맷터를 사용하여이 날짜 / 시간을 형식화합니다.</target>
        </trans-unit>
        <trans-unit id="5503fec537cc67c1f5028e5f9dfc8ffc542ca8a4" translate="yes" xml:space="preserve">
          <source>Formats this date/time with the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_OFFSET_DATE_TIME&quot;&gt;DateTimeFormatter.ISO_OFFSET_DATE_TIME&lt;/a&gt; formatter.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_OFFSET_DATE_TIME&quot;&gt;DateTimeFormatter.ISO_OFFSET_DATE_TIME&lt;/a&gt; 포맷터를 사용하여이 날짜 / 시간을 형식화합니다.</target>
        </trans-unit>
        <trans-unit id="c01303182af42901e8fe2ebadeab7c8d4ecb855c" translate="yes" xml:space="preserve">
          <source>Formats this date/time with the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_OFFSET_TIME&quot;&gt;DateTimeFormatter.ISO_OFFSET_TIME&lt;/a&gt; formatter.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_OFFSET_TIME&quot;&gt;DateTimeFormatter.ISO_OFFSET_TIME&lt;/a&gt; 포맷터를 사용하여이 날짜 / 시간을 형식화합니다.</target>
        </trans-unit>
        <trans-unit id="63e40e62983dd4196a9387976e4cefd73347f94c" translate="yes" xml:space="preserve">
          <source>Formats this date/time with the provided &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html&quot;&gt;DateTimeFormatter&lt;/a&gt; pattern.</source>
          <target state="translated">제공된 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html&quot;&gt;DateTimeFormatter&lt;/a&gt; 패턴을 사용하여이 날짜 / 시간을 형식화 합니다.</target>
        </trans-unit>
        <trans-unit id="bb48c806858158ddfff2a615ca300cde1a531541" translate="yes" xml:space="preserve">
          <source>Formats this time in the provided, localized &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/FormatStyle.html&quot;&gt;FormatStyle&lt;/a&gt;.</source>
          <target state="translated">이번에는 제공된 지역화 된 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/FormatStyle.html&quot;&gt;FormatStyle&lt;/a&gt; 형식으로 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="75a9c372983aa75d0db3b6c611d87f11d93689b3" translate="yes" xml:space="preserve">
          <source>Formats this time with the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_LOCAL_TIME&quot;&gt;DateTimeFormatter.ISO_LOCAL_TIME&lt;/a&gt; formatter.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_LOCAL_TIME&quot;&gt;DateTimeFormatter.ISO_LOCAL_TIME&lt;/a&gt; 포맷터 로이 시간을 포맷합니다.</target>
        </trans-unit>
        <trans-unit id="c8cc63241ea1b0fc65dec3af20598f7d9596fa27" translate="yes" xml:space="preserve">
          <source>Formats this time with the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_OFFSET_TIME&quot;&gt;DateTimeFormatter.ISO_OFFSET_TIME&lt;/a&gt; formatter.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_OFFSET_TIME&quot;&gt;DateTimeFormatter.ISO_OFFSET_TIME&lt;/a&gt; 포맷터를 사용 하여이 시간을 포맷합니다.</target>
        </trans-unit>
        <trans-unit id="06f2a28eabe8db822bf046ca223ea1432692091a" translate="yes" xml:space="preserve">
          <source>Formats this time with the provided &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html&quot;&gt;DateTimeFormatter&lt;/a&gt; pattern.</source>
          <target state="translated">제공된 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html&quot;&gt;DateTimeFormatter&lt;/a&gt; 패턴을 사용하여 이번에 형식을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="c8558b262bb2513543d91aec81a4aba697a8007f" translate="yes" xml:space="preserve">
          <source>Forms a list by stepping through the range by the indicated interval.</source>
          <target state="translated">표시된 간격으로 범위를 단계별로 이동하여 목록을 구성합니다.</target>
        </trans-unit>
        <trans-unit id="f921758c6f5d5d30ee122ca8d0a7a6b9249ac182" translate="yes" xml:space="preserve">
          <source>Frequently, the template source will be in a file but here is a simple example providing the template as a string:</source>
          <target state="translated">종종 템플릿 소스는 파일에 있지만 다음은 템플릿을 문자열로 제공하는 간단한 예입니다.</target>
        </trans-unit>
        <trans-unit id="21c869f40d73b68873b496793a70ef98b32c2949" translate="yes" xml:space="preserve">
          <source>FullBinding</source>
          <target state="translated">FullBinding</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="5af2e61f4e542848a1e205f04337780f90f5b19c" translate="yes" xml:space="preserve">
          <source>Further information about customising grape behavior can be found on the Grape documentation page: &lt;a href=&quot;http://groovy-lang.org/grape.html&quot;&gt;http://groovy-lang.org/grape.html&lt;/a&gt;.</source>
          <target state="translated">포도 동작을 사용자 정의하는 방법에 대한 자세한 내용은 Grape 설명서 페이지 &lt;a href=&quot;http://groovy-lang.org/grape.html&quot;&gt;http://groovy-lang.org/grape.html&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e4798acec31b0c3138672afd9b48b537642d4082" translate="yes" xml:space="preserve">
          <source>Further information such as where artifacts are downloaded to, how to add additional resolvers, how to customise artifact resolution etc., can be found on the Grape documentation page: &lt;a href=&quot;http://groovy-lang.org/grape.html&quot;&gt;http://groovy-lang.org/grape.html&lt;/a&gt;.</source>
          <target state="translated">아티팩트가 다운로드되는 위치, 추가 리졸버 추가 방법, 아티팩트 해상도 사용자 지정 방법 등과 같은 추가 정보는 Grape 문서 페이지 &lt;a href=&quot;http://groovy-lang.org/grape.html&quot;&gt;http://groovy-lang.org/grape.html&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0e8ffacc18eeaeb14cdd131d9cfb7198eb2d95e2" translate="yes" xml:space="preserve">
          <source>Further references on cloning:</source>
          <target state="translated">복제에 대한 추가 참조 :</target>
        </trans-unit>
        <trans-unit id="695111bf9ef1e680e21b1b0dc1726142c189faa6" translate="yes" xml:space="preserve">
          <source>GPathResult</source>
          <target state="translated">GPathResult</target>
        </trans-unit>
        <trans-unit id="80a99901216803700307ff510ed2ed2e60c3ddef" translate="yes" xml:space="preserve">
          <source>GRECLIPSE-805 Support for unicode escape sequences</source>
          <target state="translated">GRECLIPSE-805 유니 코드 이스케이프 시퀀스 지원</target>
        </trans-unit>
        <trans-unit id="d1077d035ea72a8ca64ab3abf345cfdd9b6efabf" translate="yes" xml:space="preserve">
          <source>GROOVY-7812</source>
          <target state="translated">GROOVY-7812</target>
        </trans-unit>
        <trans-unit id="2898cbe631c883f4ae3d2f80bf074997c12fe26e" translate="yes" xml:space="preserve">
          <source>GString</source>
          <target state="translated">GString</target>
        </trans-unit>
        <trans-unit id="d2451dceaea4a831c850bdb76b5281615b8a87d8" translate="yes" xml:space="preserve">
          <source>Gary Gregory</source>
          <target state="translated">게리 그레고리</target>
        </trans-unit>
        <trans-unit id="d93ba4949c406141711a0c8bf2c4a084c36fc3e6" translate="yes" xml:space="preserve">
          <source>Generally, it adds (if needed) a PropertyChangeSupport field and the needed add/removePropertyChangeListener methods to support the listeners.</source>
          <target state="translated">일반적으로 필요한 경우 PropertyChangeSupport 필드와 리스너를 지원하는 데 필요한 add / removePropertyChangeListener 메서드를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="9028656a86bc52b2c84982ccf8bd24d211388cfa" translate="yes" xml:space="preserve">
          <source>Generally, it adds (if needed) a VetoableChangeSupport field and the needed add/removeVetoableChangeListener methods to support the listeners.</source>
          <target state="translated">일반적으로 (필요한 경우) VetoableChangeSupport 필드와 리스너를 지원하기 위해 필요한 add / removeVetoableChangeListener 메서드를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="2e0f187b3bb439d387a964c0dd6bbe97d9517e09" translate="yes" xml:space="preserve">
          <source>Generally, it adds the needed add&amp;lt;Listener&amp;gt;, remove&amp;lt;Listener&amp;gt; and get&amp;lt;Listener&amp;gt;s methods to support the Java Beans API.</source>
          <target state="translated">일반적으로 Java Beans API를 지원하기 위해 필요한 add &amp;lt;Listener&amp;gt;, remove &amp;lt;Listener&amp;gt; 및 get &amp;lt;Listener&amp;gt; s 메소드를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="4df52511d49e0202881d10aee5ea3bb1a6b5ccdb" translate="yes" xml:space="preserve">
          <source>Generate a call to the delegate object.</source>
          <target state="translated">대리자 개체에 대한 호출을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="e3d3be670b873e01da15ad4c8acc448c6c336640" translate="yes" xml:space="preserve">
          <source>Generate a canEqual method to be used by equals.</source>
          <target state="translated">equals에서 사용할 canEqual 메서드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="dea1181f5a64c0f51095d026765ca752138190e5" translate="yes" xml:space="preserve">
          <source>Generate builder methods for properties from super classes.</source>
          <target state="translated">슈퍼 클래스에서 속성에 대한 빌더 메서드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="b37047b3892e54b9f839d6df4dbc2da092e591e3" translate="yes" xml:space="preserve">
          <source>Generate documentation about the methods provided by the Groovy Development Kit that enhance the standard JDK classes.</source>
          <target state="translated">표준 JDK 클래스를 향상시키는 Groovy Development Kit에서 제공하는 메서드에 대한 문서를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="3fb9021398ae78c285eb929a7195d822500fd690" translate="yes" xml:space="preserve">
          <source>Generate next permutation (algorithm from Rosen p. 284)</source>
          <target state="translated">다음 순열 생성 (Rosen 알고리즘 p. 284)</target>
        </trans-unit>
        <trans-unit id="e5ddb635593b9309ede197a216bf07a43ec7e701" translate="yes" xml:space="preserve">
          <source>Generated key values can be accessed using array notation. For example, to return the second auto-generated column value of the third row, use &lt;code&gt;keys[3][1]&lt;/code&gt;. The method is designed to be used with SQL INSERT statements, but is not limited to them.</source>
          <target state="translated">생성 된 키 값은 배열 표기법을 사용하여 액세스 할 수 있습니다. 예를 들어 세 번째 행의 두 번째 자동 생성 열 값을 반환하려면 &lt;code&gt;keys[3][1]&lt;/code&gt; 합니다. 이 메서드는 SQL INSERT 문과 함께 사용하도록 설계되었지만 이에 국한되지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="7aa755fe4488d0c137c72563ce0db1751157d545" translate="yes" xml:space="preserve">
          <source>Generates JSON from objects. The Options builder can be used to configure an instance of a JsonGenerator.</source>
          <target state="translated">객체에서 JSON을 생성합니다. 옵션 빌더를 사용하여 JsonGenerator의 인스턴스를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f543455f9f4db5b5ddcc30b5a2acb7e5f2b94b45" translate="yes" xml:space="preserve">
          <source>Generates Java class versions of Groovy classes using ASM.</source>
          <target state="translated">ASM을 사용하여 Groovy 클래스의 Java 클래스 버전을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="07d947963d9898fad05a5dd28eb21eb0156d379b" translate="yes" xml:space="preserve">
          <source>Generates Java classes for Groovy classes using ASM.</source>
          <target state="translated">ASM을 사용하여 Groovy 클래스 용 Java 클래스를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="75ad1da4cc803fe95bbc8e20b98cd077f12db4fa" translate="yes" xml:space="preserve">
          <source>Generates Java stubs from Groovy sources.</source>
          <target state="translated">Groovy 소스에서 Java 스텁을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="32f4449f035e1908c1eef2b7ff9439ec51557126" translate="yes" xml:space="preserve">
          <source>Generates a Meta Object Protocol method, that is used to call a non public method, or to make a call to super.</source>
          <target state="translated">비 공용 메서드를 호출하거나 super를 호출하는 데 사용되는 메타 개체 프로토콜 메서드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="8163ae3f375c68cb95c1510bee3fb56f40402ed0" translate="yes" xml:space="preserve">
          <source>Generates a ModelMBeanOperationInfo object from a meta map provided.</source>
          <target state="translated">제공된 메타 맵에서 ModelMBeanOperationInfo 객체를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="23e7111152a123c2389f56dee855e72994a68c78" translate="yes" xml:space="preserve">
          <source>Generates a detailed dump string of an object showing its class, hashCode and fields.</source>
          <target state="translated">클래스, hashCode 및 필드를 표시하는 객체의 자세한 덤프 문자열을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="4d17f3df95f88479ac4ed99ff491e8587f06337a" translate="yes" xml:space="preserve">
          <source>Generates a list of ModelMBeanAttributeInfo from a list meta data Maps.</source>
          <target state="translated">목록 메타 데이터 맵에서 ModelMBeanAttributeInfo 목록을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="5d0419ea876c9ae44422e922c3a5dad4b750c17d" translate="yes" xml:space="preserve">
          <source>Generates a wildcard generic type in order to be used for checks against class nodes.</source>
          <target state="translated">클래스 노드에 대한 검사에 사용하기 위해 와일드 카드 제네릭 유형을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="3f038ea51cd6d347579d0cb27ac1396b63f18d32" translate="yes" xml:space="preserve">
          <source>Generates a wildcard generic type in order to be used for checks against class nodes. See GenericsType#isCompatibleWith(org.codehaus.groovy.ast.ClassNode).</source>
          <target state="translated">클래스 노드에 대한 검사에 사용하기 위해 와일드 카드 제네릭 유형을 생성합니다. GenericsType # isCompatibleWith (org.codehaus.groovy.ast.ClassNode)를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="002cf0fb59b278467b84e3e6ec4529362e1c44ed" translate="yes" xml:space="preserve">
          <source>Generates an AST from the CST.</source>
          <target state="translated">CST에서 AST를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="88333a9a84d8b80c8d8b378d315c05405923f4be" translate="yes" xml:space="preserve">
          <source>Generates an AST from the CST. You can retrieve it with getAST().</source>
          <target state="translated">CST에서 AST를 생성합니다. getAST ()로 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4e13f66b2b6ba9debb9330713b2f61762acab8e2" translate="yes" xml:space="preserve">
          <source>Generates byte code for constants.</source>
          <target state="translated">상수에 대한 바이트 코드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="dfca3f70f403c1c95f85aff59d606d21352f134f" translate="yes" xml:space="preserve">
          <source>Generates code for the &lt;code&gt;@AutoImplement&lt;/code&gt; annotation.</source>
          <target state="translated">&lt;code&gt;@AutoImplement&lt;/code&gt; 주석에 대한 코드를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="8ce5319e11b768d812c335d1f38d900f0ab464a2" translate="yes" xml:space="preserve">
          <source>Generates code for the &lt;code&gt;@NotYetImplemented&lt;/code&gt; annotation.</source>
          <target state="translated">&lt;code&gt;@NotYetImplemented&lt;/code&gt; 주석에 대한 코드를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="009cb95c5e7ceb5978b60d5e83e5993adc3f23c3" translate="yes" xml:space="preserve">
          <source>Generates code for the legacy &lt;code&gt;@NotYetImplemented&lt;/code&gt; annotation.</source>
          <target state="translated">레거시 &lt;code&gt;@NotYetImplemented&lt;/code&gt; 주석에 대한 코드를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="8d3c1543e4946f7f60b1982d788386b44dcf6dcc" translate="yes" xml:space="preserve">
          <source>Generates the bytecode to autobox the current value on the stack.</source>
          <target state="translated">스택의 현재 값을 자동 상자에 넣는 바이트 코드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="7d2f9f2ce2448409dfbf2d083413e150437a18fb" translate="yes" xml:space="preserve">
          <source>Generates the bytecode to unbox the current value on the stack.</source>
          <target state="translated">스택의 현재 값을 풀기위한 바이트 코드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="aac85dbd510d776c34a55b34e0b5a72262a4a6d0" translate="yes" xml:space="preserve">
          <source>Get GroovydocHolder instance</source>
          <target state="translated">GroovydocHolder 인스턴스 가져 오기</target>
        </trans-unit>
        <trans-unit id="9370983ebdf1abc6391e3fba1f24eea19897f7d7" translate="yes" xml:space="preserve">
          <source>Get Quote to use when printing attributes.</source>
          <target state="translated">속성을 인쇄 할 때 사용할 견적을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="74051e61fdc9c5bb32924d0936b390411e7d4e0e" translate="yes" xml:space="preserve">
          <source>Get a new GroovyCodeSource for a script which may be given as a location (isScript is true) or as text (isScript is false).</source>
          <target state="translated">위치 (isScript가 true) 또는 텍스트 (isScript가 false)로 제공 될 수있는 스크립트에 대한 새 GroovyCodeSource를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="27071b9bb62c6e456992027b07274256b487711a" translate="yes" xml:space="preserve">
          <source>Get a particular initializer expression</source>
          <target state="translated">특정 이니셜 라이저 표현식 가져 오기</target>
        </trans-unit>
        <trans-unit id="f266159d3fb8547deff45a891e24194c5bff5231" translate="yes" xml:space="preserve">
          <source>Get a raw message from the resource bundles using the given code.</source>
          <target state="translated">주어진 코드를 사용하여 리소스 번들에서 원시 메시지를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="b140a66f6815f458db898f4e17ea444c9e5b6a37" translate="yes" xml:space="preserve">
          <source>Get a resource connection as a &lt;code&gt;URLConnection&lt;/code&gt; to retrieve a script from the &lt;code&gt;ResourceConnector&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ResourceConnector&lt;/code&gt; 에서 스크립트를 검색하려면 리소스 연결을 &lt;code&gt;URLConnection&lt;/code&gt; 으로 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="334e383d6f091144c23f2de22cac5f87d49a3b04" translate="yes" xml:space="preserve">
          <source>Get all cached values</source>
          <target state="translated">캐시 된 모든 값 가져 오기</target>
        </trans-unit>
        <trans-unit id="c31c935318101542259d82a3e86199f207e5d4b4" translate="yes" xml:space="preserve">
          <source>Get all keys associated to cached values</source>
          <target state="translated">캐시 된 값과 관련된 모든 키 가져 오기</target>
        </trans-unit>
        <trans-unit id="df8fa0fdbd699e3ac4cb2ea5b3a180a0c6f59c24" translate="yes" xml:space="preserve">
          <source>Get all properties including JavaBean pseudo properties matching JavaBean getter or setter conventions.</source>
          <target state="translated">JavaBean getter 또는 setter 규칙과 일치하는 JavaBean 의사 속성을 포함한 모든 속성을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="a19e894625d0e4fce2e1c8b505c6a9ff98b338e7" translate="yes" xml:space="preserve">
          <source>Get all properties including JavaBean pseudo properties matching getter conventions.</source>
          <target state="translated">getter 규칙과 일치하는 JavaBean 의사 속성을 포함한 모든 속성을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="a9cd4a74570cd9d56cede687def413eedd0ad7ee" translate="yes" xml:space="preserve">
          <source>Get info about Properties (Java and Groovy alike).</source>
          <target state="translated">속성 (Java 및 Groovy 모두)에 대한 정보를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="b2af1b04d202579346035eb98fa603547978ff7b" translate="yes" xml:space="preserve">
          <source>Get info about instance and class Methods that are dynamically added through Groovy.</source>
          <target state="translated">Groovy를 통해 동적으로 추가되는 인스턴스 및 클래스 메서드에 대한 정보를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="020dba2a0a6e75a7042a14ff4cd3652f6fbbc6e0" translate="yes" xml:space="preserve">
          <source>Get info about usual Java instance and class Methods as well as Constructors.</source>
          <target state="translated">일반적인 Java 인스턴스 및 클래스 메소드와 생성자에 대한 정보를 얻으십시오.</target>
        </trans-unit>
        <trans-unit id="5e31b6bf5645d2f0c2a9feda4f9b40ffd16a479c" translate="yes" xml:space="preserve">
          <source>Get info about usual Java public fields incl. constants.</source>
          <target state="translated">일반적인 Java 공용 필드에 대한 정보를 얻으십시오. 상수.</target>
        </trans-unit>
        <trans-unit id="bba170575173e201113f2d9c37bdda5bff1f2f5d" translate="yes" xml:space="preserve">
          <source>Get property invocation type</source>
          <target state="translated">속성 호출 유형 가져 오기</target>
        </trans-unit>
        <trans-unit id="832448a5a8bf06852441522d42651e35a6ad8206" translate="yes" xml:space="preserve">
          <source>Get ref to table; the reference and the cells it accesses will be at least as fresh as from last use of barrierLock</source>
          <target state="translated">테이블에 대한 참조를 얻으십시오. 참조 및 액세스하는 셀은 마지막으로 barrierLock을 사용한 것만 큼 신선합니다.</target>
        </trans-unit>
        <trans-unit id="03943a19a768c28dc5271a4b3a4363213ee2eeb7" translate="yes" xml:space="preserve">
          <source>Get runtime groovydoc</source>
          <target state="translated">런타임 groovydoc 가져 오기</target>
        </trans-unit>
        <trans-unit id="3e48aed1056b2d45025f0da6d94d1a0e80dac4f8" translate="yes" xml:space="preserve">
          <source>Get the &lt;code&gt;ClassLoader&lt;/code&gt; that will serve as the parent ClassLoader of the &lt;a href=&quot;../lang/groovyclassloader&quot;&gt;GroovyClassLoader&lt;/a&gt; in which scripts will be executed.</source>
          <target state="translated">가져 오기 &lt;code&gt;ClassLoader&lt;/code&gt; 의 상위 클래스 로더가 될 것 &lt;a href=&quot;../lang/groovyclassloader&quot;&gt;GroovyClassLoader&lt;/a&gt; 스크립트가 실행됩니다되는합니다.</target>
        </trans-unit>
        <trans-unit id="0b67d2e8632c203bedcb981f9f3192ecc4db075e" translate="yes" xml:space="preserve">
          <source>Get the &lt;code&gt;ClassLoader&lt;/code&gt; that will serve as the parent ClassLoader of the &lt;a href=&quot;../lang/groovyclassloader&quot;&gt;GroovyClassLoader&lt;/a&gt; in which scripts will be executed. By default, this is the ClassLoader that loaded the &lt;code&gt;GroovyScriptEngine&lt;/code&gt; class.</source>
          <target state="translated">가져 오기 &lt;code&gt;ClassLoader&lt;/code&gt; 의 상위 클래스 로더가 될 것 &lt;a href=&quot;../lang/groovyclassloader&quot;&gt;GroovyClassLoader&lt;/a&gt; 스크립트가 실행됩니다되는합니다. 기본적으로 이것은 &lt;code&gt;GroovyScriptEngine&lt;/code&gt; 클래스 를로드 한 ClassLoader입니다 .</target>
        </trans-unit>
        <trans-unit id="2cea2344f567332cb6a2eb33db4e297b762fd782" translate="yes" xml:space="preserve">
          <source>Get the Class Properties of the object under inspection.</source>
          <target state="translated">검사중인 개체의 클래스 속성을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="3374cbf90727319305bf8f812be535b034644efa" translate="yes" xml:space="preserve">
          <source>Get the DST offset (if any) for the default locale and the given date.</source>
          <target state="translated">기본 로케일 및 지정된 날짜에 대한 DST 오프셋 (있는 경우)을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="74d296a1e331196ca618588055d2d62c08d3eca9" translate="yes" xml:space="preserve">
          <source>Get the GroovyClasses generated by compile().</source>
          <target state="translated">compile ()에 의해 생성 된 GroovyClasses를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="b1dd989ff329bbd3f7ff645f18a810849737a70f" translate="yes" xml:space="preserve">
          <source>Get the JDBC datatype for this parameter.</source>
          <target state="translated">이 매개 변수에 대한 JDBC 데이터 유형을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="269e41430b407c654555e63d3a44998124893830" translate="yes" xml:space="preserve">
          <source>Get the MetaClassRegistry that originates this change</source>
          <target state="translated">이 변경을 시작하는 MetaClassRegistry를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="fcc88f14e872552a34ca292cf09a2bde529fa28d" translate="yes" xml:space="preserve">
          <source>Get the absolute value</source>
          <target state="translated">절대 값 얻기</target>
        </trans-unit>
        <trans-unit id="4a9e99852664f474673ec12a2ba9d88576c299b6" translate="yes" xml:space="preserve">
          <source>Get the base script class name for the scripts (must derive from Script)</source>
          <target state="translated">스크립트의 기본 스크립트 클래스 이름을 가져옵니다 (Script에서 파생되어야 함).</target>
        </trans-unit>
        <trans-unit id="15957a6df3b3e3334bcc8192ab3897f9d7257b20" translate="yes" xml:space="preserve">
          <source>Get the cached methodhandle. if the related methodhandle is not found in the inline cache, cache and return it.</source>
          <target state="translated">캐시 된 메서드 핸들을 가져옵니다. 인라인 캐시에서 관련 메서드 핸들을 찾을 수없는 경우 캐시하고 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d912526e15b80c7a43d7ab29000114619b4c5f9d" translate="yes" xml:space="preserve">
          <source>Get the class of the scriptName in question, so that you can instantiate Groovy objects with caching and reloading.</source>
          <target state="translated">캐싱 및 다시로드로 Groovy 개체를 인스턴스화 할 수 있도록 해당 scriptName의 클래스를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="2141297fde7787ad135c65d02cbec97e354b5d35" translate="yes" xml:space="preserve">
          <source>Get the class that is updated.</source>
          <target state="translated">업데이트 된 클래스를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="761f5b238f2d0ba8c3554ed462f76bca256cc88d" translate="yes" xml:space="preserve">
          <source>Get the configuration file used to customize the compilation configuration.</source>
          <target state="translated">컴파일 구성을 사용자 지정하는 데 사용되는 구성 파일을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="ad0c41e332296e5007c1c0c94a979cef356646af" translate="yes" xml:space="preserve">
          <source>Get the content of groovydoc</source>
          <target state="translated">groovydoc의 콘텐츠 가져 오기</target>
        </trans-unit>
        <trans-unit id="a5b9b44b78dd9819c8c77e001a1c8fd523414d9c" translate="yes" xml:space="preserve">
          <source>Get the current time in seconds</source>
          <target state="translated">현재 시간을 초 단위로 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="a298712e3ad9b3db327d97448c0f6c9a510ce224" translate="yes" xml:space="preserve">
          <source>Get the description of the specified operation.</source>
          <target state="translated">지정된 작업에 대한 설명을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="227c616f5c467750613839bfd9eb8582b19f116b" translate="yes" xml:space="preserve">
          <source>Get the description of the specified operation. This returns a Collection since operations can be overloaded and one operationName can have multiple forms.</source>
          <target state="translated">지정된 작업에 대한 설명을 가져옵니다. 작업이 오버로드 될 수 있고 하나의 operationName이 여러 형식을 가질 수 있으므로 컬렉션을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="94d34457e5289e64087ea868c055cb85690b64a3" translate="yes" xml:space="preserve">
          <source>Get the detail information of &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Throwable.html&quot;&gt;Throwable&lt;/a&gt; instance's stack trace</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Throwable.html&quot;&gt;Throwable&lt;/a&gt; 인스턴스의 스택 추적에 대한 세부 정보 가져 오기</target>
        </trans-unit>
        <trans-unit id="363ee065d565d188d16f82a6e185fe9da6501691" translate="yes" xml:space="preserve">
          <source>Get the extension to use when searching for Groovy source files.</source>
          <target state="translated">Groovy 소스 파일을 검색 할 때 사용할 확장자를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="b483bd4439128888c8e227a1f3280557ab4008bb" translate="yes" xml:space="preserve">
          <source>Get the getter method.</source>
          <target state="translated">getter 메서드를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="16f04a5ab410c4dd194e4cfec8985f0f95a7b01a" translate="yes" xml:space="preserve">
          <source>Get the groovydoc</source>
          <target state="translated">GroovyDoc 받기</target>
        </trans-unit>
        <trans-unit id="5513af0c3767d346ebc53d1917b2fe3ba801151e" translate="yes" xml:space="preserve">
          <source>Get the holder of the groovydoc</source>
          <target state="translated">groovydoc의 소유자 가져 오기</target>
        </trans-unit>
        <trans-unit id="776b66943c9b9cd541588160f8e176ff054cd2fa" translate="yes" xml:space="preserve">
          <source>Get the href attribute.</source>
          <target state="translated">href 속성을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="ddac83d941e9e50a2fa3365dc2c8237c5123c640" translate="yes" xml:space="preserve">
          <source>Get the initializer expressions</source>
          <target state="translated">이니셜 라이저 표현식 가져 오기</target>
        </trans-unit>
        <trans-unit id="95b52ad30078a6eec7f70c8354fb4741eded7273" translate="yes" xml:space="preserve">
          <source>Get the last hidden matcher that the system used to do a match.</source>
          <target state="translated">시스템이 일치를 수행하는 데 사용한 마지막 숨겨진 일치자를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="6e54817185acf09c6e10aa19d7d469d06ac2b3dd" translate="yes" xml:space="preserve">
          <source>Get the listfiles flag.</source>
          <target state="translated">listfiles 플래그를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="e6e816034e6da4736188bfcdaf919d01b5a381ae" translate="yes" xml:space="preserve">
          <source>Get the maximum number of rows to return in the ResultSet</source>
          <target state="translated">ResultSet에서 리턴 할 최대 행 수를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="ec4d1d94581114438e38b6b3b15c9e97c9ad5a9b" translate="yes" xml:space="preserve">
          <source>Get the new MetaClass</source>
          <target state="translated">새로운 MetaClass 받기</target>
        </trans-unit>
        <trans-unit id="d543216820bf88afe0d59bf351eb2da29f1a1368" translate="yes" xml:space="preserve">
          <source>Get the old MetaClass</source>
          <target state="translated">이전 MetaClass 가져 오기</target>
        </trans-unit>
        <trans-unit id="21fcb9eeb90a1fb8314ef1210f368496e9f4c93f" translate="yes" xml:space="preserve">
          <source>Get the packages attribute.</source>
          <target state="translated">패키지 속성을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="9bb72f72f1ccadda06402da42aa985230f8c198d" translate="yes" xml:space="preserve">
          <source>Get the parameterized type by searching the whole class hierarchy according to generics class and actual receiver.</source>
          <target state="translated">제네릭 클래스 및 실제 수신자에 따라 전체 클래스 계층을 검색하여 매개 변수화 된 유형을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="ba1f560e0bbe4bc9879a2c5081f8215dd3cf7351" translate="yes" xml:space="preserve">
          <source>Get the parameterized type by searching the whole class hierarchy according to generics class and actual receiver. &lt;a href=&quot;#findParameterizedTypeFromCache(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.ClassNode,%20boolean)&quot;&gt;findParameterizedTypeFromCache(ClassNode, ClassNode, boolean)&lt;/a&gt; is strongly recommended for better performance.</source>
          <target state="translated">제네릭 클래스 및 실제 수신자에 따라 전체 클래스 계층을 검색하여 매개 변수화 된 유형을 가져옵니다. 성능 향상을 위해 &lt;a href=&quot;#findParameterizedTypeFromCache(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.ClassNode,%20boolean)&quot;&gt;findParameterizedTypeFromCache (ClassNode, ClassNode, boolean)&lt;/a&gt; 를 적극 권장합니다.</target>
        </trans-unit>
        <trans-unit id="4f34fa76b9b34aa526710ed4ffd4f551a8a2cf94" translate="yes" xml:space="preserve">
          <source>Get the property of the given object.</source>
          <target state="translated">주어진 객체의 속성을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="b9dfd429130c9f32215eeb5fee433e316dfd0609" translate="yes" xml:space="preserve">
          <source>Get the result of the groovyc task (success or failure).</source>
          <target state="translated">groovyc 작업의 결과를 가져옵니다 (성공 또는 실패).</target>
        </trans-unit>
        <trans-unit id="95f7e7b05569ef2ec0376c232ec22d7d0a04defd" translate="yes" xml:space="preserve">
          <source>Get the root cause of an exception and sanitize it for display to the user</source>
          <target state="translated">예외의 근본 원인을 가져 와서 사용자에게 표시 할 수 있도록 삭제</target>
        </trans-unit>
        <trans-unit id="e49235ee2bcd5fb9e65d84b0b690d0bbe99303a7" translate="yes" xml:space="preserve">
          <source>Get the root node for lexing the document.</source>
          <target state="translated">문서를 렉싱하기위한 루트 노드를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="b9ac70f64ef0ab31c02282edb3aa22ad3e2cf7eb" translate="yes" xml:space="preserve">
          <source>Get the root node for lexing the document. Children can be added such that matching patterns can be further parsed if required.</source>
          <target state="translated">문서를 렉싱하기위한 루트 노드를 가져옵니다. 필요한 경우 일치하는 패턴을 추가로 구문 분석 할 수 있도록 자식을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7dec756fb3e1f399914b5c15a45f7f62d300dcce" translate="yes" xml:space="preserve">
          <source>Get the setter method.</source>
          <target state="translated">setter 메서드를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="c266ee0f7b7eea700bfa23e48503e9ff7e73fe60" translate="yes" xml:space="preserve">
          <source>Get the size of the cache</source>
          <target state="translated">캐시 크기 가져 오기</target>
        </trans-unit>
        <trans-unit id="8bb90ea053a21098bf682c76efc3dbb9f1e50d9e" translate="yes" xml:space="preserve">
          <source>Get the strings of this GString.</source>
          <target state="translated">이 GString의 문자열을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="e3f03a60c555c735fc9a37209d913769b45eb7fc" translate="yes" xml:space="preserve">
          <source>Get the text of the Groovy script at the given location.</source>
          <target state="translated">주어진 위치에서 Groovy 스크립트의 텍스트를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="2a662dcb99c228f8084e6b21bca0a84bdc74aa87" translate="yes" xml:space="preserve">
          <source>Get the text of the Groovy script at the given location. If the location is a file path and it does not exist as given, then &lt;a href=&quot;groovymain#huntForTheScriptFile(java.lang.String)&quot;&gt;GroovyMain.huntForTheScriptFile&lt;/a&gt; is called to try with some Groovy extensions appended. This method is not used to process scripts and is retained for backward compatibility. If you want to modify how GroovyMain processes scripts then use &lt;a href=&quot;groovymain#getScriptSource(boolean,%20java.lang.String)&quot;&gt;GroovyMain.getScriptSource&lt;/a&gt;.</source>
          <target state="translated">주어진 위치에서 Groovy 스크립트의 텍스트를 가져옵니다. 위치가 파일 경로이고 지정된대로 존재하지 않는 경우 &lt;a href=&quot;groovymain#huntForTheScriptFile(java.lang.String)&quot;&gt;GroovyMain.huntForTheScriptFile&lt;/a&gt; 이 호출되어 일부 Groovy 확장을 추가하여 시도합니다. 이 방법은 스크립트를 처리하는 데 사용되지 않으며 이전 버전과의 호환성을 위해 유지됩니다. GroovyMain이 스크립트를 처리하는 방법을 수정하려면 &lt;a href=&quot;groovymain#getScriptSource(boolean,%20java.lang.String)&quot;&gt;GroovyMain.getScriptSource&lt;/a&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="2862c981b26ee93bf7058decb2187081ceeaca7d" translate="yes" xml:space="preserve">
          <source>Get the type of array elements</source>
          <target state="translated">배열 요소의 유형 가져 오기</target>
        </trans-unit>
        <trans-unit id="ef642fee27b0acc6895f00a64c2958db95d13eca" translate="yes" xml:space="preserve">
          <source>Get the type of array elements by the dimension</source>
          <target state="translated">차원으로 배열 요소 유형 가져 오기</target>
        </trans-unit>
        <trans-unit id="2959a19fa8b781df067c3752d0304e12d78fd30b" translate="yes" xml:space="preserve">
          <source>Get the value of the includeDestClasses property.</source>
          <target state="translated">includeDestClasses 속성의 값을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="e4749f6a54a66023614c3891ee35d369bf616043" translate="yes" xml:space="preserve">
          <source>Get the value of the indy flag.</source>
          <target state="translated">indy 플래그의 값을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="ca995dc0e0c98abdc2659ca1b630c70158bf180f" translate="yes" xml:space="preserve">
          <source>Get the value.</source>
          <target state="translated">가치를 얻으십시오.</target>
        </trans-unit>
        <trans-unit id="342a45f0f35f5f622ed3aea2ca6550ad7ebc5050" translate="yes" xml:space="preserve">
          <source>Get the value. Note: In an entrySet or entrySet.iterator, unless the set or iterator is used under synchronization of the table as a whole (or you can otherwise guarantee lack of concurrent modification),</source>
          <target state="translated">가치를 얻으십시오. 참고 : entrySet 또는 entrySet.iterator에서 세트 또는 반복기가 테이블 전체의 동기화하에 사용되지 않는 한 (또는 동시 수정이 없음을 보장 할 수 있음)</target>
        </trans-unit>
        <trans-unit id="de4d5ecc4fdcc604c6bb0a614e86956e6f3ce4e8" translate="yes" xml:space="preserve">
          <source>Get this property from the given object.</source>
          <target state="translated">주어진 객체에서이 속성을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="5515e96eb2b467250658c15c7e46ee9c0cfdc70c" translate="yes" xml:space="preserve">
          <source>Get wrapper class for a given class.</source>
          <target state="translated">주어진 클래스에 대한 래퍼 클래스를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="b0a9eee6b08d523f73ca33b715a2906856c416d9" translate="yes" xml:space="preserve">
          <source>Get wrapper class for a given class. If the class is for a primitive number type, then the wrapper class will be returned. If it is no primitive number type, we return the class itself.</source>
          <target state="translated">주어진 클래스에 대한 래퍼 클래스를 가져옵니다. 클래스가 기본 숫자 유형용이면 래퍼 클래스가 반환됩니다. 원시 숫자 유형이 아니면 클래스 자체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e101234c81ab2a2dd35eacff0ea996cc079adad0" translate="yes" xml:space="preserve">
          <source>Gets a &lt;code&gt;BufferedReader&lt;/code&gt; (indeed a &lt;code&gt;LineNumberReader&lt;/code&gt;) from the &lt;code&gt;File&lt;/code&gt; specified in the constructor of &lt;code&gt;CharsetToolkit&lt;/code&gt; using the charset discovered or the default charset if an 8-bit &lt;code&gt;Charset&lt;/code&gt; is encountered.</source>
          <target state="translated">가져옵니다 &lt;code&gt;BufferedReader&lt;/code&gt; (참 &lt;code&gt;LineNumberReader&lt;/code&gt; 로부터) &lt;code&gt;File&lt;/code&gt; 의 생성자에 지정된 &lt;code&gt;CharsetToolkit&lt;/code&gt; 발견 된 캐릭터 세트 또는 8 비트 경우 디폴트 캐릭터 세트 사용하는 &lt;code&gt;Charset&lt;/code&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d19202feb825d4293d03514cb1e6a6703a1b1389" translate="yes" xml:space="preserve">
          <source>Gets a handle internally used to create MetaClass implementations WARNING: experimental code, likely to change soon</source>
          <target state="translated">MetaClass 구현을 만드는 데 내부적으로 사용되는 핸들을 가져옵니다. 경고 : 실험 코드, 곧 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ed9a45a0d2401676dfd3a0a650d7156480734870" translate="yes" xml:space="preserve">
          <source>Gets a map containing the class variables referenced by this scope.</source>
          <target state="translated">이 범위에서 참조하는 클래스 변수를 포함하는 맵을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="461ce90cc4b30273d139131bf0afa95682d96591" translate="yes" xml:space="preserve">
          <source>Gets a map containing the class variables referenced by this scope. This not can not be modified.</source>
          <target state="translated">이 범위에서 참조하는 클래스 변수를 포함하는 맵을 가져옵니다. 이것은 수정할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="447941a83625dc1f6773d3372425bb8bd5ddc369" translate="yes" xml:space="preserve">
          <source>Gets a map containing the variables declared in this scope.</source>
          <target state="translated">이 범위에 선언 된 변수를 포함하는 맵을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="1cd6efd2a44d2433da2320cbd1f91dbacdbad30a" translate="yes" xml:space="preserve">
          <source>Gets a map containing the variables declared in this scope. This map cannot be modified.</source>
          <target state="translated">이 범위에 선언 된 변수를 포함하는 맵을 가져옵니다. 이지도는 수정할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="58f572b458c7e59316a38dfb6b62d5b88e4b8cf1" translate="yes" xml:space="preserve">
          <source>Gets a proxy instance that can be used as GroovyResultSet.</source>
          <target state="translated">GroovyResultSet으로 사용할 수있는 프록시 인스턴스를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="fae8aef49db790ba5ba616babc04ff9b0b7653d2" translate="yes" xml:space="preserve">
          <source>Gets a snapshot of the current constant meta classes and returns it as Iterator.</source>
          <target state="translated">현재 상수 메타 클래스의 스냅 샷을 가져 와서 Iterator로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="672c35978ea9ec826db7354a0f5ab2e225e787b2" translate="yes" xml:space="preserve">
          <source>Gets a snapshot of the current constant meta classes and returns it as Iterator. Modifications done using this Iterator will not cause a ConcurrentModificationException. If a MetaClass is removed using this Iterator, then the MetaClass will only be removed if the MetaClass was not replaced by another MetaClass in the meantime. If a MetaClass is added while using this Iterator, then it will be part of the Iteration. If a MetaClass replaces another constant meta class, then the Iteration might show two meta classes for the same class.</source>
          <target state="translated">현재 상수 메타 클래스의 스냅 샷을 가져 와서 Iterator로 반환합니다. 이 반복자를 사용하여 수정 한 경우 ConcurrentModificationException이 발생하지 않습니다. 이 Iterator를 사용하여 MetaClass를 제거하면 그 동안 MetaClass가 다른 MetaClass로 대체되지 않은 경우에만 MetaClass가 제거됩니다. 이 Iterator를 사용하는 동안 MetaClass가 추가되면 Iteration의 일부가됩니다. MetaClass가 다른 상수 메타 클래스를 대체하는 경우 반복은 동일한 클래스에 대해 두 개의 메타 클래스를 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dabf05b8bcadba7fead40a74904efdb6a8be546e" translate="yes" xml:space="preserve">
          <source>Gets a value from the cache</source>
          <target state="translated">캐시에서 값을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="3e79a874af365c90715fef997f42731f419d81a9" translate="yes" xml:space="preserve">
          <source>Gets an array of all registered ConstantMetaClassListener instances.</source>
          <target state="translated">등록 된 모든 ConstantMetaClassListener 인스턴스의 배열을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="9ba842bb4f288262abc22d40a593955a62f2ccb4" translate="yes" xml:space="preserve">
          <source>Gets an iterator for the declared class variables.</source>
          <target state="translated">선언 된 클래스 변수에 대한 반복기를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="4ae285e82aeaf5c74d54bbe97796a11cd5b7936d" translate="yes" xml:space="preserve">
          <source>Gets an iterator for the declared class variables. The remove operation is not supported.</source>
          <target state="translated">선언 된 클래스 변수에 대한 반복기를 가져옵니다. 제거 작업은 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="734c6bf4e7a34d19c4d767cdcdf814d57bc576d5" translate="yes" xml:space="preserve">
          <source>Gets an iterator for the referenced class variables.</source>
          <target state="translated">참조 된 클래스 변수에 대한 반복기를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="1af62305fd3e2c92174a02a0abf044da2e8bf4b1" translate="yes" xml:space="preserve">
          <source>Gets an iterator for the referenced class variables. The remove operation is not supported.</source>
          <target state="translated">참조 된 클래스 변수에 대한 반복기를 가져옵니다. 제거 작업은 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ea1201620c2bc2fe510ac6737cd4ec02b5595136" translate="yes" xml:space="preserve">
          <source>Gets an iterator for the referenced local variables.</source>
          <target state="translated">참조 된 지역 변수에 대한 반복기를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="a3b2b057b8d36d4ea51d05c0a6f41e1b74afe63c" translate="yes" xml:space="preserve">
          <source>Gets an iterator for the referenced local variables. The remove operation *is* supported.</source>
          <target state="translated">참조 된 지역 변수에 대한 반복기를 가져옵니다. 제거 작업 * is *가 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="bf22ba9eab5c70c61361cf7ad823933295e9c59a" translate="yes" xml:space="preserve">
          <source>Gets methods from all interfaces.</source>
          <target state="translated">모든 인터페이스에서 메서드를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="07fce511989b09f089ae3f977f4505418dddfee2" translate="yes" xml:space="preserve">
          <source>Gets methods from all interfaces. Methods from interfaces visited early take precedence over later ones.</source>
          <target state="translated">모든 인터페이스에서 메서드를 가져옵니다. 초기에 방문한 인터페이스의 메소드가 이후 인터페이스보다 우선합니다.</target>
        </trans-unit>
        <trans-unit id="48885f73c7cd5277e765456b73f0d3883a8ab484" translate="yes" xml:space="preserve">
          <source>Gets the 'from' value as a primitive integer.</source>
          <target state="translated">원시 정수로 '시작'값을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="db961e9512d0136214b0466a55d7719592170d01" translate="yes" xml:space="preserve">
          <source>Gets the 'to' value as a primitive integer.</source>
          <target state="translated">기본 정수로 'to'값을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="4a54a6e90aa93b2db8db2b3e3027dc055cec3591" translate="yes" xml:space="preserve">
          <source>Gets the CompilerConfiguration for this ProcessingUnit.</source>
          <target state="translated">이 ProcessingUnit에 대한 CompilerConfiguration을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="a51f501f7eee681f5c42b1bd912d40af3f79f14b" translate="yes" xml:space="preserve">
          <source>Gets the Local part for this QName</source>
          <target state="translated">이 QName에 대한 로컬 부분을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="bf84ed3fe07222fa128a8eb2fd1778a583215102" translate="yes" xml:space="preserve">
          <source>Gets the Namespace URI for this QName</source>
          <target state="translated">이 QName의 네임 스페이스 URI를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="bf61e99800d3da13722db2c6bb5d513653b1e6c4" translate="yes" xml:space="preserve">
          <source>Gets the Prefix for this QName</source>
          <target state="translated">이 QName의 접두사를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="2ae27ea487b28cc67e951a75a15cd5900b8d7941" translate="yes" xml:space="preserve">
          <source>Gets the actual type according to the placeholder name.</source>
          <target state="translated">자리 표시 자 이름에 따라 실제 형식을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="69d552cee4320e2a5f5fe0216b2a2d5f7676ebca" translate="yes" xml:space="preserve">
          <source>Gets the called that is matchLevel stack frames before the call, ignoring MOP frames and desired exclude packages.</source>
          <target state="translated">MOP 프레임 및 원하는 제외 패키지를 무시하고 호출 전에 matchLevel 스택 프레임 인 호출을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="d743c93d2966c3622d74ebea76b1ffc1f2d4747d" translate="yes" xml:space="preserve">
          <source>Gets the called that is matchLevel stack frames before the call, ignoring MOP frames.</source>
          <target state="translated">MOP 프레임을 무시하고 호출 전에 matchLevel 스택 프레임 인 호출을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="1f7d5770c14b91c352af3d836fb022900e312839" translate="yes" xml:space="preserve">
          <source>Gets the class where this method is declared</source>
          <target state="translated">이 메서드가 선언 된 클래스를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="be9cbdb61ea46bf0b1b358396ea826987fbf3256" translate="yes" xml:space="preserve">
          <source>Gets the classpath to be used for this compilation.</source>
          <target state="translated">이 컴파일에 사용할 클래스 경로를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="4d37389f4715b6d66a90fabeeb6ad1b825704bbe" translate="yes" xml:space="preserve">
          <source>Gets the classpath.</source>
          <target state="translated">클래스 경로를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="4d828ab9b9870125204b889166e819c87ee5fc9c" translate="yes" xml:space="preserve">
          <source>Gets the code for a method (or constructor) as a block.</source>
          <target state="translated">메서드 (또는 생성자)의 코드를 블록으로 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="32b8ba8b7f8385b790dba265d6598c64ff08dd82" translate="yes" xml:space="preserve">
          <source>Gets the code for a method (or constructor) as a block. If no code is found, an empty block will be returned. If a single non-block statement is found, a block containing that statement will be returned. Otherwise the existing block statement will be returned. The original &lt;code&gt;node&lt;/code&gt; is not modified.</source>
          <target state="translated">메서드 (또는 생성자)의 코드를 블록으로 가져옵니다. 코드가 없으면 빈 블록이 반환됩니다. 블록이 아닌 문이 하나 발견되면 해당 문을 포함하는 블록이 반환됩니다. 그렇지 않으면 기존 블록 문이 반환됩니다. 원래 &lt;code&gt;node&lt;/code&gt; 는 수정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="447bfae08075f7e91f4b54089a6afd84ca09c4e5" translate="yes" xml:space="preserve">
          <source>Gets the current generated expression.</source>
          <target state="translated">현재 생성 된 식을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="8eb70e8252422eaf25b0edd8a0283d018219761c" translate="yes" xml:space="preserve">
          <source>Gets the current result set.</source>
          <target state="translated">현재 결과 집합을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="ea8d1a625233675215ee88bafbc573eae5d6adbd" translate="yes" xml:space="preserve">
          <source>Gets the currently configured output writer.</source>
          <target state="translated">현재 구성된 출력 작성기를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="438438682d0c675e3ce0f50d650a1b641aec7afc" translate="yes" xml:space="preserve">
          <source>Gets the currently configured source file encoding.</source>
          <target state="translated">현재 구성된 소스 파일 인코딩을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="7e4736157c0b263cd0a1e595d17a1ba4cfae74fd" translate="yes" xml:space="preserve">
          <source>Gets the currently configured warning level.</source>
          <target state="translated">현재 구성된 경고 수준을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="bc1b8f8272739056803e18109addea54fb76b95a" translate="yes" xml:space="preserve">
          <source>Gets the currently configured warning level. See &lt;a href=&quot;messages/warningmessage&quot;&gt;WarningMessage&lt;/a&gt; for level details.</source>
          <target state="translated">현재 구성된 경고 수준을 가져옵니다. 레벨 세부 사항 은 &lt;a href=&quot;messages/warningmessage&quot;&gt;WarningMessage&lt;/a&gt; 를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="47ef02e6c62d2360f8402078ab9c1162c83501c3" translate="yes" xml:space="preserve">
          <source>Gets the description for the specified type.</source>
          <target state="translated">지정된 형식에 대한 설명을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="08fc27cee42cfc8260206cd09ecedd8fca697adf" translate="yes" xml:space="preserve">
          <source>Gets the destination directory into which the java source files should be compiled.</source>
          <target state="translated">Java 소스 파일을 컴파일해야하는 대상 디렉토리를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="2078dbb3d275582998b637a13bc10fb5971ec78c" translate="yes" xml:space="preserve">
          <source>Gets the enforce8Bit flag, in case we do not want to ever get a US-ASCII encoding.</source>
          <target state="translated">US-ASCII 인코딩을 원하지 않는 경우 force8Bit 플래그를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="f0d03484bdf2609310c7245d3b2e32b3ef564ac7" translate="yes" xml:space="preserve">
          <source>Gets the error stream from a process and reads it to keep the process from blocking due to a full buffer.</source>
          <target state="translated">프로세스에서 오류 스트림을 가져 와서 읽어서 전체 버퍼로 인해 프로세스가 차단되지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="2792b8762e4675c893ff8cf9a88309aa15ea06b2" translate="yes" xml:space="preserve">
          <source>Gets the error stream from a process and reads it to keep the process from blocking due to a full buffer. The processed stream data is appended to the supplied Appendable. A new Thread is started, so this method will return immediately.</source>
          <target state="translated">프로세스에서 오류 스트림을 가져 와서 읽어서 전체 버퍼로 인해 프로세스가 차단되지 않도록합니다. 처리 된 스트림 데이터는 제공된 Appendable에 추가됩니다. 새 스레드가 시작되므로이 메서드는 즉시 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="04c412f1cb8c3543650b95e1d7a460c9f82ecd98" translate="yes" xml:space="preserve">
          <source>Gets the error stream from a process and reads it to keep the process from blocking due to a full buffer. The processed stream data is appended to the supplied OutputStream. A new Thread is started, so this method will return immediately.</source>
          <target state="translated">프로세스에서 오류 스트림을 가져 와서 읽어서 전체 버퍼로 인해 프로세스가 차단되지 않도록합니다. 처리 된 스트림 데이터는 제공된 OutputStream에 추가됩니다. 새 스레드가 시작되므로이 메서드는 즉시 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="f7fea4a98122dfa8631595c2bf2766320d9e7848" translate="yes" xml:space="preserve">
          <source>Gets the failonerror flag.</source>
          <target state="translated">failonerror 플래그를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="76d8021ffe7589327d076067b4c6d1c7b05c807a" translate="yes" xml:space="preserve">
          <source>Gets the field of this property</source>
          <target state="translated">이 속성의 필드를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="99e440e184bc9d4b910244799606b344acb3f7cb" translate="yes" xml:space="preserve">
          <source>Gets the forceLookupUnnamedFiles flag.</source>
          <target state="translated">forceLookupUnnamedFiles 플래그를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="417d83b74c72e6c8f3821910db9816dd54ce7cf5" translate="yes" xml:space="preserve">
          <source>Gets the immediate calling class, ignoring MOP frames.</source>
          <target state="translated">MOP 프레임을 무시하고 즉시 호출 클래스를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="89ecbd5a971c69519db9c46c16c0a07c214bb602" translate="yes" xml:space="preserve">
          <source>Gets the item by key from the mapping.</source>
          <target state="translated">매핑에서 키로 항목을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="1d80a56b3a70dd92447f5eb2049c7c9764edcdee" translate="yes" xml:space="preserve">
          <source>Gets the joint compilation options for this configuration.</source>
          <target state="translated">이 구성에 대한 공동 컴파일 옵션을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="0c08f54464ae4c4853d3b8f19d25d1d47083774f" translate="yes" xml:space="preserve">
          <source>Gets the keepStubs flag.</source>
          <target state="translated">keepStubs 플래그를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="10b9365fcf14aaac85e8b5549a409df0c5844991" translate="yes" xml:space="preserve">
          <source>Gets the list of files to be compiled.</source>
          <target state="translated">컴파일 할 파일 목록을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="3531073bc19423a114fcd4780a31b1716ccd2d9b" translate="yes" xml:space="preserve">
          <source>Gets the loop block.</source>
          <target state="translated">루프 블록을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="d54defafd6dd831cade960fa9ebfc0f15674e550" translate="yes" xml:space="preserve">
          <source>Gets the memoryInitialSize flag.</source>
          <target state="translated">memoryInitialSize 플래그를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="05e083a013f1034fd3ecfe17345e0877af8b0770" translate="yes" xml:space="preserve">
          <source>Gets the memoryMaximumSize flag.</source>
          <target state="translated">memoryMaximumSize 플래그를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="2dbcab46c5e06bdc01e190c821e347f58006a38b" translate="yes" xml:space="preserve">
          <source>Gets the name for the getter for this property</source>
          <target state="translated">이 속성에 대한 getter의 이름을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="81a59811fa5ef53cab9edcb76401c876dacde35c" translate="yes" xml:space="preserve">
          <source>Gets the name of the base class for scripts.</source>
          <target state="translated">스크립트의 기본 클래스 이름을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="083f8ea768901551c57424813cdc8a3add079d12" translate="yes" xml:space="preserve">
          <source>Gets the name of the base class for scripts. It must be a subclass of Script.</source>
          <target state="translated">스크립트의 기본 클래스 이름을 가져옵니다. Script의 하위 클래스 여야합니다.</target>
        </trans-unit>
        <trans-unit id="57da8864a5ce3f5da6a4ca408f353aaa642a7059" translate="yes" xml:space="preserve">
          <source>Gets the next character from the underlying reader, translating escapes as required.</source>
          <target state="translated">필요에 따라 이스케이프를 변환하여 기본 판독기에서 다음 문자를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="72e27b2813540a3357db31d152eeeb44ba1205ee" translate="yes" xml:space="preserve">
          <source>Gets the node meta data.</source>
          <target state="translated">노드 메타 데이터를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="2781095fa9a8b815e39cda34e4dac98d0d50a565" translate="yes" xml:space="preserve">
          <source>Gets the object being inspected.</source>
          <target state="translated">검사중인 개체를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="fcc324cda60145f129228516391d90f077d05e8d" translate="yes" xml:space="preserve">
          <source>Gets the optimization options for this configuration.</source>
          <target state="translated">이 구성에 대한 최적화 옵션을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="a37e18c9e89dbf46d0008f96e21cde2e03116dee" translate="yes" xml:space="preserve">
          <source>Gets the output and error streams from a process and reads them to keep the process from blocking due to a full output buffer.</source>
          <target state="translated">프로세스에서 출력 및 오류 스트림을 가져 와서 읽어서 전체 출력 버퍼로 인해 프로세스가 차단되지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="7c0e7f64a4dc9fefcd76afe51eabb4359c6a8088" translate="yes" xml:space="preserve">
          <source>Gets the output and error streams from a process and reads them to keep the process from blocking due to a full output buffer. The processed stream data is appended to the supplied Appendable. For this, two Threads are started, but join()ed, so we wait. As implied by the waitFor... name, we also wait until we finish as well. Finally, the input, output and error streams are closed.</source>
          <target state="translated">프로세스에서 출력 및 오류 스트림을 가져 와서 읽어서 전체 출력 버퍼로 인해 프로세스가 차단되지 않도록합니다. 처리 된 스트림 데이터는 제공된 Appendable에 추가됩니다. 이를 위해 두 개의 스레드가 시작되지만 join ()이 실행되므로 기다립니다. waitFor ... 이름에서 알 수 있듯이 우리도 끝낼 때까지 기다립니다. 마지막으로 입력, 출력 및 오류 스트림이 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="d601d252f9556ca5d6ea70ebe79bce9ac3036242" translate="yes" xml:space="preserve">
          <source>Gets the output and error streams from a process and reads them to keep the process from blocking due to a full output buffer. The processed stream data is appended to the supplied Appendable. For this, two Threads are started, so this method will return immediately. The threads will not be join()ed, even if waitFor() is called. To wait for the output to be fully consumed call waitForProcessOutput().</source>
          <target state="translated">프로세스에서 출력 및 오류 스트림을 가져 와서 읽어서 전체 출력 버퍼로 인해 프로세스가 차단되지 않도록합니다. 처리 된 스트림 데이터는 제공된 Appendable에 추가됩니다. 이를 위해 두 개의 스레드가 시작되므로이 메서드는 즉시 반환됩니다. 스레드는 waitFor ()가 호출 되더라도 join ()되지 않습니다. 출력이 완전히 소비 될 때까지 기다리려면 waitForProcessOutput ()을 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="59bb4f0d7ad17b4cc7b8d5949162028ea56a1abc" translate="yes" xml:space="preserve">
          <source>Gets the output and error streams from a process and reads them to keep the process from blocking due to a full output buffer. The processed stream data is appended to the supplied OutputStream. For this, two Threads are started, but join()ed, so we wait. As implied by the waitFor... name, we also wait until we finish as well. Finally, the input, output and error streams are closed.</source>
          <target state="translated">프로세스에서 출력 및 오류 스트림을 가져 와서 읽어서 전체 출력 버퍼로 인해 프로세스가 차단되지 않도록합니다. 처리 된 스트림 데이터는 제공된 OutputStream에 추가됩니다. 이를 위해 두 개의 스레드가 시작되지만 join ()이 실행되므로 기다립니다. waitFor ... 이름에서 알 수 있듯이 우리도 끝낼 때까지 기다립니다. 마지막으로 입력, 출력 및 오류 스트림이 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="ab8339b59e7e7f991731b7b86cf42412c380dd0e" translate="yes" xml:space="preserve">
          <source>Gets the output and error streams from a process and reads them to keep the process from blocking due to a full output buffer. The processed stream data is appended to the supplied OutputStream. For this, two Threads are started, so this method will return immediately. The threads will not be join()ed, even if waitFor() is called. To wait for the output to be fully consumed call waitForProcessOutput().</source>
          <target state="translated">프로세스에서 출력 및 오류 스트림을 가져 와서 읽어서 전체 출력 버퍼로 인해 프로세스가 차단되지 않도록합니다. 처리 된 스트림 데이터는 제공된 OutputStream에 추가됩니다. 이를 위해 두 개의 스레드가 시작되므로이 메서드는 즉시 반환됩니다. 스레드는 waitFor ()가 호출 되더라도 join ()되지 않습니다. 출력이 완전히 소비 될 때까지 기다리려면 waitForProcessOutput ()을 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="17c83ab5c7e67bfed9d6deb050577c4abbcf873a" translate="yes" xml:space="preserve">
          <source>Gets the output and error streams from a process and reads them to keep the process from blocking due to a full output buffer. The stream data is thrown away but blocking due to a full output buffer is avoided. Use this method if you don't care about the standard or error output and just want the process to run silently - use carefully however, because since the stream data is thrown away, it might be difficult to track down when something goes wrong. For this, two Threads are started, but join()ed, so we wait. As implied by the waitFor... name, we also wait until we finish as well. Finally, the output and error streams are closed.</source>
          <target state="translated">프로세스에서 출력 및 오류 스트림을 가져 와서 읽어서 전체 출력 버퍼로 인해 프로세스가 차단되지 않도록합니다. 스트림 데이터는 버려지지만 전체 출력 버퍼로 인한 차단은 피합니다. 표준 또는 오류 출력에 신경 쓰지 않고 프로세스가 조용히 실행되기를 원하는 경우이 방법을 사용하십시오. 그러나 스트림 데이터가 폐기되므로 문제가 발생하면 추적하기 어려울 수 있으므로 신중하게 사용하십시오. 이를 위해 두 개의 스레드가 시작되지만 join ()이 실행되므로 기다립니다. waitFor ... 이름에서 알 수 있듯이 우리도 끝낼 때까지 기다립니다. 마지막으로 출력 및 오류 스트림이 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="53826823be7d7af657d063a3ae9fe9974e932086" translate="yes" xml:space="preserve">
          <source>Gets the output and error streams from a process and reads them to keep the process from blocking due to a full output buffer. The stream data is thrown away but blocking due to a full output buffer is avoided. Use this method if you don't care about the standard or error output and just want the process to run silently - use carefully however, because since the stream data is thrown away, it might be difficult to track down when something goes wrong. For this, two Threads are started, so this method will return immediately.</source>
          <target state="translated">프로세스에서 출력 및 오류 스트림을 가져 와서 읽어서 전체 출력 버퍼로 인해 프로세스가 차단되지 않도록합니다. 스트림 데이터는 버려지지만 전체 출력 버퍼로 인한 차단은 피합니다. 표준 또는 오류 출력에 신경 쓰지 않고 프로세스가 조용히 실행되기를 원하는 경우이 방법을 사용하십시오. 그러나 스트림 데이터가 폐기되므로 문제가 발생하면 추적하기 어려울 수 있으므로 신중하게 사용하십시오. 이를 위해 두 개의 스레드가 시작되므로이 메서드는 즉시 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="675a71a605f6c44e31b6838e849232e273f163bc" translate="yes" xml:space="preserve">
          <source>Gets the output stream from a process and reads it to keep the process from blocking due to a full output buffer.</source>
          <target state="translated">프로세스에서 출력 스트림을 가져 와서 읽어서 전체 출력 버퍼로 인해 프로세스가 차단되지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="ca8b0c8be22a06052055685ac1fa9f8468c53644" translate="yes" xml:space="preserve">
          <source>Gets the output stream from a process and reads it to keep the process from blocking due to a full output buffer. The processed stream data is appended to the supplied Appendable. A new Thread is started, so this method will return immediately.</source>
          <target state="translated">프로세스에서 출력 스트림을 가져 와서 읽어서 전체 출력 버퍼로 인해 프로세스가 차단되지 않도록합니다. 처리 된 스트림 데이터는 제공된 Appendable에 추가됩니다. 새 스레드가 시작되므로이 메서드는 즉시 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="8fc81f57151278912a7a37a9442c0a09ee0b2072" translate="yes" xml:space="preserve">
          <source>Gets the output stream from a process and reads it to keep the process from blocking due to a full output buffer. The processed stream data is appended to the supplied OutputStream. A new Thread is started, so this method will return immediately.</source>
          <target state="translated">프로세스에서 출력 스트림을 가져 와서 읽어서 전체 출력 버퍼로 인해 프로세스가 차단되지 않도록합니다. 처리 된 스트림 데이터는 제공된 OutputStream에 추가됩니다. 새 스레드가 시작되므로이 메서드는 즉시 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="1ee646235cacb2a4855075bcd0f51c5f062c925f" translate="yes" xml:space="preserve">
          <source>Gets the parameter and return types of the abstract method of SAM.</source>
          <target state="translated">SAM의 추상 메서드에 대한 매개 변수 및 반환 형식을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="146d40bfa134ca57e5a065babe4c3ad868d61f68" translate="yes" xml:space="preserve">
          <source>Gets the parameter and return types of the abstract method of SAM. If the abstract method is not parameterized, we will get generics placeholders, e.g. T, U For example, the abstract method of &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html&quot;&gt;Function&lt;/a&gt; is</source>
          <target state="translated">SAM의 추상 메서드에 대한 매개 변수 및 반환 형식을 가져옵니다. 추상 메소드가 매개 변수화되지 않으면 제네릭 자리 표시 자 (예 : T, U)를 얻게됩니다. 예를 들어 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html&quot;&gt;Function&lt;/a&gt; 의 추상 메소드 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="624a2f5a45cf2e99efcc8e5b23c3029a38648026" translate="yes" xml:space="preserve">
          <source>Gets the resultSetConcurrency for statements created using the connection.</source>
          <target state="translated">연결을 사용하여 만든 문에 대한 resultSetConcurrency를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="ae4069be742634979087e6ff7365c7cd0d81349f" translate="yes" xml:space="preserve">
          <source>Gets the resultSetHoldability for statements created using the connection.</source>
          <target state="translated">연결을 사용하여 만든 문에 대한 resultSetHoldability를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="20e785689c7fa21d183fc77eb491cc63a4434bea" translate="yes" xml:space="preserve">
          <source>Gets the resultSetType for statements created using the connection.</source>
          <target state="translated">연결을 사용하여 만든 문에 대한 resultSetType을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="338c7b5308418f6b13557d6d79948e3e76f4638c" translate="yes" xml:space="preserve">
          <source>Gets the setter for the getter for this property.</source>
          <target state="translated">이 속성의 getter에 대한 setter를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="bfc1fbae4f3c4eb931eb8a05f9416c9f9fdc58d5" translate="yes" xml:space="preserve">
          <source>Gets the source dirs to find the source java files.</source>
          <target state="translated">소스 Java 파일을 찾기 위해 소스 디렉토리를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="223548b295dc81218ca159e15b3a61ec0d3c6c9a" translate="yes" xml:space="preserve">
          <source>Gets the sourcepath to be used for this compilation.</source>
          <target state="translated">이 컴파일에 사용할 소스 경로를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="86ad9859676e01d4664377485673406626356191" translate="yes" xml:space="preserve">
          <source>Gets the strategy which the closure uses to resolve methods and properties</source>
          <target state="translated">클로저가 메서드와 속성을 해결하는 데 사용하는 전략을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="f7f19a8458b29450f901a7417b5631e619815969" translate="yes" xml:space="preserve">
          <source>Gets the stub directory into which the Java source stub files should be generated</source>
          <target state="translated">Java 소스 스텁 파일이 생성되어야하는 스텁 디렉토리를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="81b3e3cd445397b02248adfce0b162a512eb00d8" translate="yes" xml:space="preserve">
          <source>Gets the target directory for writing classes.</source>
          <target state="translated">클래스 작성을위한 대상 디렉토리를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="50d71c4ef104bbc7a19f09342c3f3fb2489454e2" translate="yes" xml:space="preserve">
          <source>Gets the template created by the underlying engine parsing the request.</source>
          <target state="translated">요청을 구문 분석하는 기본 엔진에서 만든 템플릿을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="a6d33e0debf4fcf88cb0d1d9b8ab97eb6aa7cd0c" translate="yes" xml:space="preserve">
          <source>Gets the url of the jar file/source file containing the specified class</source>
          <target state="translated">지정된 클래스를 포함하는 jar 파일 / 소스 파일의 URL을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="157b6627534d8fbd65d7ff73f4d2b8631087d685" translate="yes" xml:space="preserve">
          <source>Gets the value of the designated column in the current row as an &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">현재 행의 지정된 열 값을 &lt;code&gt;Object&lt;/code&gt; 로 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="0c28937a34d3519743f8de3e98a0259c86b3c74a" translate="yes" xml:space="preserve">
          <source>Gets the value of the designated column in the current row of as an &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">의 현재 행에있는 지정된 열의 값을 &lt;code&gt;Object&lt;/code&gt; 로 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="a356fec98f7549642a09e764b7e1164c6885af0a" translate="yes" xml:space="preserve">
          <source>Gets the verbose flag.</source>
          <target state="translated">자세한 플래그를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="1676c78da5aa4adae01d99abc161a39ffeb04853" translate="yes" xml:space="preserve">
          <source>Gets the visibility modifiers for the property as defined by the getter and setter methods.</source>
          <target state="translated">getter 및 setter 메서드에 정의 된대로 속성의 가시성 수정자를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="5558add982dc955038f5dca3de1fa4a12b4c9f0d" translate="yes" xml:space="preserve">
          <source>Gets the xml context of Ant used while creating tasks</source>
          <target state="translated">작업을 만드는 동안 사용 된 Ant의 xml 컨텍스트를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="5c45b293bcd3b8efb2364f3f94cb4435c0128395" translate="yes" xml:space="preserve">
          <source>Gets whether or not the ant classpath is to be included in the classpath.</source>
          <target state="translated">ant 클래스 경로를 클래스 경로에 포함할지 여부를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="253f413ee0891991955c14a7feb52f4725291154" translate="yes" xml:space="preserve">
          <source>Gets whether or not the java runtime should be included in this task's classpath.</source>
          <target state="translated">이 태스크의 클래스 경로에 Java 런타임을 포함해야하는지 여부를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="58e642bacdb6fab75020ba47ea6aa134d2d7d9ab" translate="yes" xml:space="preserve">
          <source>Getter - returns event thrown by emitter.</source>
          <target state="translated">Getter-이미 터가 던진 이벤트를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3b30b6e8527e64a306adbf0f7b01d70fa77544b1" translate="yes" xml:space="preserve">
          <source>Give me the items in the map without hydrating the map.</source>
          <target state="translated">지도에 물을주지 않고지도에있는 항목을주세요.</target>
        </trans-unit>
        <trans-unit id="bda17da048264e5f1fa60e57950b380b176d3cb8" translate="yes" xml:space="preserve">
          <source>Give me the items in the map without hydrating the map. Realize that the array is likely larger than the length so array items can be null.</source>
          <target state="translated">지도에 물을주지 않고지도에있는 항목을주세요. 배열이 길이보다 클 가능성이 있으므로 배열 항목이 널이 될 수 있음을 인식하십시오.</target>
        </trans-unit>
        <trans-unit id="473df60d368716f835e4d68e03b08fc66e186263" translate="yes" xml:space="preserve">
          <source>Given a class node, if this class node implements a trait, then generate all the appropriate code which delegates calls to the trait.</source>
          <target state="translated">클래스 노드가 주어지면이 클래스 노드가 트레이 트를 구현하면 트레이 트에 대한 호출을 위임하는 모든 적절한 코드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="2b19d2d6c568ded549fd63b10c0f3e6accdfeda0" translate="yes" xml:space="preserve">
          <source>Given a class node, if this class node implements a trait, then generate all the appropriate code which delegates calls to the trait. It is safe to call this method on a class node which does not implement a trait.</source>
          <target state="translated">클래스 노드가 주어지면이 클래스 노드가 트레이 트를 구현하면 트레이 트에 대한 호출을 위임하는 모든 적절한 코드를 생성합니다. 트레이 트를 구현하지 않는 클래스 노드에서이 메서드를 호출하는 것이 안전합니다.</target>
        </trans-unit>
        <trans-unit id="e8277e079d32e3c6e49e9a7580fe3d173ac05505" translate="yes" xml:space="preserve">
          <source>Given a generics type representing SomeClass&amp;lt;T,V&amp;gt; and a resolved placeholder map, returns a new generics type for which placeholders are resolved recursively.</source>
          <target state="translated">SomeClass &amp;lt;T, V&amp;gt; 및 확인 된 자리 표시 자 맵을 나타내는 제네릭 형식이 주어지면 자리 표시자가 재귀 적으로 확인되는 새 제네릭 형식을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f2df1e43bd5e2cdf8622dbef77626c1a181fba52" translate="yes" xml:space="preserve">
          <source>Given a list of class nodes, returns the first common supertype.</source>
          <target state="translated">클래스 노드 목록이 주어지면 첫 번째 공통 상위 유형을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="79fb9bd425ff008261b95c0584c61584c28ec13c" translate="yes" xml:space="preserve">
          <source>Given a list of class nodes, returns the first common supertype. For example, Double and Float would return Number, while Set and String would return Object.</source>
          <target state="translated">클래스 노드 목록이 주어지면 첫 번째 공통 상위 유형을 반환합니다. 예를 들어 Double 및 Float는 Number를 반환하고 Set 및 String은 Object를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="74e7f3760cf5fb4b45ed12c840f9e6ccdef052e7" translate="yes" xml:space="preserve">
          <source>Given a list of constants, transform each item in the list.</source>
          <target state="translated">상수 목록이 주어지면 목록의 각 항목을 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="e125046cc5fc11d4668bb8c1b81ac1e61a167648" translate="yes" xml:space="preserve">
          <source>Given a loop collection type, returns the inferred type of the loop element.</source>
          <target state="translated">루프 컬렉션 유형이 주어지면 루프 요소의 유추 된 유형을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a83010e02641b74369aaedc079c35fcf44c25ad0" translate="yes" xml:space="preserve">
          <source>Given a loop collection type, returns the inferred type of the loop element. Used, for example, to infer the element type of a (for e in list) loop.</source>
          <target state="translated">루프 컬렉션 유형이 주어지면 루프 요소의 유추 된 유형을 반환합니다. 예를 들어, (for e in list) 루프의 요소 유형을 추론하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="42c01da58e5a57be4e6c75a5c0dcb052bab691c1" translate="yes" xml:space="preserve">
          <source>Given a matcher that matches a string against a pattern, returns true when the string matches the pattern or if a longer string, could match the pattern.</source>
          <target state="translated">패턴에 대해 문자열을 일치시키는 매 처가 주어지면 문자열이 패턴과 일치하거나 더 긴 문자열이 패턴과 일치 할 수 있으면 true를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="221eab182b06a49bf72e2b6f909b7b4265139c26" translate="yes" xml:space="preserve">
          <source>Given a matcher that matches a string against a pattern, returns true when the string matches the pattern or if a longer string, could match the pattern. For example:</source>
          <target state="translated">패턴에 대해 문자열을 일치시키는 매 처가 주어지면 문자열이 패턴과 일치하거나 더 긴 문자열이 패턴과 일치 할 수 있으면 true를 반환합니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="2ef6ce3771c3ff7e986f9bbd4ab17c6a3af43527" translate="yes" xml:space="preserve">
          <source>Given a method call, checks if it's a static method call and if it is, tells if the receiver matches the one supplied as an argument.</source>
          <target state="translated">메서드 호출이 주어지면 그것이 정적 메서드 호출인지 확인하고 만약 그렇다면 수신자가 인수로 제공된 것과 일치하는지 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="8eeb099a86f15595e186f12066b285d20873cdad" translate="yes" xml:space="preserve">
          <source>Given a method call, first checks that it's a static method call, and if it is, returns the class node for the receiver.</source>
          <target state="translated">메서드 호출이 주어지면 먼저 그것이 정적 메서드 호출인지 확인하고, 그렇다면 수신자의 클래스 노드를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="da89d749b19055ba5a405adb3d88c0e850d2ebb8" translate="yes" xml:space="preserve">
          <source>Given a method call, first checks that it's a static method call, and if it is, returns the class node for the receiver. For example, with the following code: Person.findAll { ... }, it would return the class node for</source>
          <target state="translated">메서드 호출이 주어지면 먼저 그것이 정적 메서드 호출인지 확인하고, 그렇다면 수신자의 클래스 노드를 반환합니다. 예를 들어 다음 코드를 사용하면 Person.findAll {...}에 대한 클래스 노드를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="cc58dbd3d1c0312db7138b9deb56b32b0fa6879d" translate="yes" xml:space="preserve">
          <source>Given a method name and a prefix, returns the name of the property that should be looked up, following the java beans rules.</source>
          <target state="translated">메소드 이름과 접두어가 주어지면 Java Bean 규칙에 따라 조회해야하는 속성의 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9ac49770c79e8583e8197ed8be797afb62fc2e69" translate="yes" xml:space="preserve">
          <source>Given a method name and a prefix, returns the name of the property that should be looked up, following the java beans rules. For example, &quot;getName&quot; would return &quot;name&quot;, while &quot;getFullName&quot; would return &quot;fullName&quot;. If the prefix is not found, returns null.</source>
          <target state="translated">메소드 이름과 접두어가 주어지면 Java Bean 규칙에 따라 조회해야하는 속성의 이름을 반환합니다. 예를 들어 &quot;getName&quot;은 &quot;name&quot;을 반환하고 &quot;getFullName&quot;은 &quot;fullName&quot;을 반환합니다. 접두사가 없으면 null을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="93f7fd421827ab9ac86046f901f6577ea7ab4ffa" translate="yes" xml:space="preserve">
          <source>Given a parameterized type and a generic type information, aligns actual type parameters.</source>
          <target state="translated">매개 변수화 된 유형과 일반 유형 정보가 주어지면 실제 유형 매개 변수를 정렬합니다.</target>
        </trans-unit>
        <trans-unit id="f4373a1df048e756f221e60ba73836a61c840d69" translate="yes" xml:space="preserve">
          <source>Given a parameterized type and a generic type information, aligns actual type parameters. For example, if a class uses generic type</source>
          <target state="translated">매개 변수화 된 유형과 일반 유형 정보가 주어지면 실제 유형 매개 변수를 정렬합니다. 예를 들어, 클래스가 제네릭 유형을 사용하는 경우</target>
        </trans-unit>
        <trans-unit id="c24f38fe5e524c14ab8b1cca6fc68b2f01cc57f3" translate="yes" xml:space="preserve">
          <source>Given a primitive number type (byte, integer, short, ...), generates bytecode to convert it to a wrapped number (Integer, Long, Double) using calls to [WrappedType].valueOf</source>
          <target state="translated">기본 숫자 유형 (byte, integer, short, ...)이 주어지면 [WrappedType] .valueOf에 대한 호출을 사용하여 래핑 된 숫자 (Integer, Long, Double)로 변환하는 바이트 코드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="95f9ccff544fa9b43fb69d1292f712d6d2974907" translate="yes" xml:space="preserve">
          <source>Given a receiver and a method node, parameterize the method arguments using available generic type information.</source>
          <target state="translated">수신자와 메소드 노드가 주어지면 사용 가능한 일반 유형 정보를 사용하여 메소드 인수를 매개 변수화하십시오.</target>
        </trans-unit>
        <trans-unit id="1689c01d451d4ba8a37facef6c8f6fea0ab0bfd1" translate="yes" xml:space="preserve">
          <source>Given a variable expression, returns the ultimately accessed variable.</source>
          <target state="translated">변수 표현식이 주어지면 최종적으로 액세스 된 변수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="14b5759c60a5cb478c68d5dd54e2207586a2ab70" translate="yes" xml:space="preserve">
          <source>Given a wrapped number type (Byte, Integer, Short, ...), generates bytecode to convert it to a primitive number (int, long, double) using calls to wrapped.</source>
          <target state="translated">래핑 된 숫자 유형 (Byte, Integer, Short, ...)이 주어지면 래핑 된 호출을 사용하여 기본 숫자 (int, long, double)로 변환하는 바이트 코드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="cad502e0c3b725480cc8450bc5bdd6ddfbacd33d" translate="yes" xml:space="preserve">
          <source>Given a wrapped number type (Byte, Integer, Short, ...), generates bytecode to convert it to a primitive number (int, long, double) using calls to wrapped.[targetType]Value()</source>
          <target state="translated">래핑 된 숫자 유형 (Byte, Integer, Short, ...)이 주어지면 래핑 된 호출을 사용하여 기본 숫자 (int, long, double)로 변환하는 바이트 코드를 생성합니다. [targetType] Value ()</target>
        </trans-unit>
        <trans-unit id="0792f859c10ffa9901b6e1d974f2f6b4d0643c18" translate="yes" xml:space="preserve">
          <source>Given an instance containing members with annotations, derive the options specification.</source>
          <target state="translated">주석이있는 멤버가 포함 된 인스턴스가 주어지면 옵션 사양을 파생시킵니다.</target>
        </trans-unit>
        <trans-unit id="cba6158e26275162edad128828c2acd7b9ab5175" translate="yes" xml:space="preserve">
          <source>Given an interface containing members with annotations, derive the options specification.</source>
          <target state="translated">어노테이션이있는 멤버가 포함 된 인터페이스가 주어지면 옵션 사양을 파생하십시오.</target>
        </trans-unit>
        <trans-unit id="ce469f450db7f0f1310bcda7e588ab42c0a6acd5" translate="yes" xml:space="preserve">
          <source>Given an object expression (a receiver expression), generate the list of potential receiver types.</source>
          <target state="translated">객체 표현식 (수신자 표현식)이 주어지면 잠재적 인 수신자 유형 목록을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="b7ac8764e49e76cfcb0fc291652f2bc5bdf4a0eb" translate="yes" xml:space="preserve">
          <source>Given the following example:</source>
          <target state="translated">다음 예가 주어집니다.</target>
        </trans-unit>
        <trans-unit id="e306275a914ff063a5ce84d88f36a0346f8334c1" translate="yes" xml:space="preserve">
          <source>Given two class nodes, returns the first common supertype, or the class itself if there are equal.</source>
          <target state="translated">두 개의 클래스 노드가 주어지면 첫 번째 공통 상위 유형을 반환하거나 동일한 경우 클래스 자체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="10ca78073d312acc7604fedd0e5c099383f5961e" translate="yes" xml:space="preserve">
          <source>Given two class nodes, returns the first common supertype, or the class itself if there are equal. For example, Double and Float would return Number, while Set and String would return Object. This method is not guaranteed to return a class node which corresponds to a real type. For example, if two types have more than one interface in common and are not in the same hierarchy branch, then the returned type will be a virtual type implementing all those interfaces. Calls to this method are supposed to be made with resolved generics. This means that you can have wildcards, but no placeholder.</source>
          <target state="translated">두 개의 클래스 노드가 주어지면 첫 번째 공통 상위 유형을 반환하거나 동일한 경우 클래스 자체를 반환합니다. 예를 들어 Double 및 Float는 Number를 반환하고 Set 및 String은 Object를 반환합니다. 이 메서드는 실제 유형에 해당하는 클래스 노드를 반환한다고 보장되지 않습니다. 예를 들어 두 유형에 공통 인터페이스가 두 개 이상 있고 동일한 계층 분기에없는 경우 반환 된 유형은 이러한 모든 인터페이스를 구현하는 가상 유형이됩니다. 이 메서드에 대한 호출은 해결 된 제네릭으로 이루어져야합니다. 즉, 와일드 카드는 사용할 수 있지만 자리 표시자는 없습니다.</target>
        </trans-unit>
        <trans-unit id="3067b811b7e412fa28feea7beb5dc21d43578edf" translate="yes" xml:space="preserve">
          <source>Given two types, returns true if the first can be viewed as the second.</source>
          <target state="translated">두 가지 유형이 주어지면 첫 번째 유형을 두 번째 유형으로 볼 수 있으면 true를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="353cbbc4ee4b035c7adec3e8bcfd15dd5459e6b8" translate="yes" xml:space="preserve">
          <source>Given two types, returns true if the first can be viewed as the second. NOTE that &lt;code&gt;canMean()&lt;/code&gt; is orthogonal to &lt;code&gt;ofType()&lt;/code&gt;.</source>
          <target state="translated">두 가지 유형이 주어지면 첫 번째 유형을 두 번째 유형으로 볼 수 있으면 true를 반환합니다. 참고 &lt;code&gt;canMean()&lt;/code&gt; 에 직교 &lt;code&gt;ofType()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b4ae4c9e83c4b1751ebb67f4f6e0739505e8f245" translate="yes" xml:space="preserve">
          <source>Given two types, returns true if the second describes the first.</source>
          <target state="translated">두 가지 유형이 주어지면 두 번째 유형이 첫 번째 유형을 설명하면 true를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="aa855f5abc36f64c7dcf83099fca709ee191e871" translate="yes" xml:space="preserve">
          <source>Gives the version the plugin is made for</source>
          <target state="translated">플러그인이 만들어진 버전을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="e6d4ca34c7adc483587eddcaff4344bc2f890cf1" translate="yes" xml:space="preserve">
          <source>Global flag to ignore checksums.</source>
          <target state="translated">체크섬을 무시하는 전역 플래그입니다.</target>
        </trans-unit>
        <trans-unit id="c524ea45510fe17507e48968b5bcbbeeb4be8ef0" translate="yes" xml:space="preserve">
          <source>Global flag to ignore checksums. By default it is set to false.</source>
          <target state="translated">체크섬을 무시하는 전역 플래그입니다. 기본적으로 false로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="cfd0a10ab6170584d12c124ccb4d59ef440419cb" translate="yes" xml:space="preserve">
          <source>GrapeEngine</source>
          <target state="translated">GrapeEngine</target>
        </trans-unit>
        <trans-unit id="7d304625e165197beb2bccab248c07169784fd2e" translate="yes" xml:space="preserve">
          <source>Groovy 1.1</source>
          <target state="translated">그루비 1.1</target>
        </trans-unit>
        <trans-unit id="2dd2483190eb968467f6deea92867ef94dce0fad" translate="yes" xml:space="preserve">
          <source>Groovy 1.5</source>
          <target state="translated">그루비 1.5</target>
        </trans-unit>
        <trans-unit id="ee16be405efbf469b25bf7ec4f0c81d99b02b262" translate="yes" xml:space="preserve">
          <source>Groovy 1.6</source>
          <target state="translated">그루비 1.6</target>
        </trans-unit>
        <trans-unit id="8c9e6cf0de0e2559ce510e55896d11fb72c33597" translate="yes" xml:space="preserve">
          <source>Groovy 1.6.4</source>
          <target state="translated">그루비 1.6.4</target>
        </trans-unit>
        <trans-unit id="cde148fec60bf40091a56cd99759077cfb69b1cc" translate="yes" xml:space="preserve">
          <source>Groovy 1.7.5</source>
          <target state="translated">그루비 1.7.5</target>
        </trans-unit>
        <trans-unit id="40881484fa282ed537d9b6aeec6a84e2a8fad89e" translate="yes" xml:space="preserve">
          <source>Groovy 1.8.7</source>
          <target state="translated">그루비 1.8.7</target>
        </trans-unit>
        <trans-unit id="84a415b4e7f61319279b8532ebb699773dce0c41" translate="yes" xml:space="preserve">
          <source>Groovy 2.1.0</source>
          <target state="translated">그루비 2.1.0</target>
        </trans-unit>
        <trans-unit id="9542efae9ceccb3f7dc5e8d89175c0f0f8c2e556" translate="yes" xml:space="preserve">
          <source>Groovy AST nodes for the syntax of the language</source>
          <target state="translated">언어 구문에 대한 Groovy AST 노드</target>
        </trans-unit>
        <trans-unit id="a0ece1eef080274582c47d722e8ce4961069c38e" translate="yes" xml:space="preserve">
          <source>Groovy Language for the JVM</source>
          <target state="translated">JVM 용 Groovy 언어</target>
        </trans-unit>
        <trans-unit id="b8c640c6eb7c65205993f299b0b44529b1bf1c76" translate="yes" xml:space="preserve">
          <source>Groovy Source Encoding Parameter</source>
          <target state="translated">Groovy 소스 인코딩 매개 변수</target>
        </trans-unit>
        <trans-unit id="dd2a91a83d5562f2a3af5c21f787a4ed6ac69c23" translate="yes" xml:space="preserve">
          <source>Groovy Swing console. Adds Groovy Grape feedback (via an Ivy listener).</source>
          <target state="translated">Groovy Swing 콘솔. Ivy 청취자를 통해 Groovy Grape 피드백을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="5ed8ea8afbadbd6a11d90569c148c9228b30fc6b" translate="yes" xml:space="preserve">
          <source>Groovy Swing console. Allows user to interactively enter and execute Groovy.</source>
          <target state="translated">Groovy Swing 콘솔. 사용자가 대화식으로 Groovy를 입력하고 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a16ac519ddcbb512f68945837383ace3d89f4f4e" translate="yes" xml:space="preserve">
          <source>Groovy XML Dom processing classes.</source>
          <target state="translated">Groovy XML Dom 처리 클래스.</target>
        </trans-unit>
        <trans-unit id="cbb9af026fdc1a626404a1c5984b935a49d010da" translate="yes" xml:space="preserve">
          <source>Groovy allows instances of Closures to be called in a short form. For example:</source>
          <target state="translated">Groovy는 Closure의 인스턴스를 짧은 형식으로 호출 할 수 있습니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="117590ae9191afe48c11d67445d6d83ac32ea146" translate="yes" xml:space="preserve">
          <source>Groovy categories are the original mechanism used by Groovy when augmenting classes with new methods. Writing categories required using a class writing style where all methods were static and an additional self parameter was defined. The self parameter and static nature of the methods disappeared once applied by Groovy's metaclass framework but some regarded the writing style as a little noisy. This transformation allows you to write your categories without the &quot;apparent noise&quot; but adds it back in during compilation so that the classes appear as normal categories.</source>
          <target state="translated">Groovy 카테고리는 새로운 메서드로 클래스를 확장 할 때 Groovy에서 사용하는 원래 메커니즘입니다. 모든 메소드가 정적이고 추가 self 매개 변수가 정의 된 클래스 작성 스타일을 사용하여 카테고리 작성이 필요합니다. 그루비의 메타 클래스 프레임 워크에 의해 적용되면 메소드의 self 매개 변수와 정적 속성은 사라졌지 만 어떤 사람들은 쓰기 스타일을 약간 시끄럽게 여겼습니다. 이 변환을 통해 &quot;명백한 노이즈&quot;없이 범주를 작성할 수 있지만 컴파일 중에 다시 추가하여 클래스가 일반 범주로 표시되도록합니다.</target>
        </trans-unit>
        <trans-unit id="3c8091e1e1466e9b4ae72591578eed081941a515" translate="yes" xml:space="preserve">
          <source>Groovy helper classes for working with SQL data as Groovy objects</source>
          <target state="translated">SQL 데이터를 Groovy 개체로 사용하기위한 Groovy 도우미 클래스</target>
        </trans-unit>
        <trans-unit id="9518540b052ca27d2203e2095ee4f8b6ad92cff6" translate="yes" xml:space="preserve">
          <source>Groovy markup builder classes for working with SAX and W3C DOM and Groovy markup.</source>
          <target state="translated">SAX 및 W3C DOM 및 Groovy 마크 업 작업을위한 Groovy 마크 업 빌더 클래스.</target>
        </trans-unit>
        <trans-unit id="2ca53dab53ef5e1ac0df436c4ae950a6dea2bbae" translate="yes" xml:space="preserve">
          <source>Groovy supports named-arguments for classes with a no-arg constructor or a constructor with a Map as the first argument. This is compatible with the default kind of constructor(s) that &lt;code&gt;@TupleConstructor&lt;/code&gt; produces.</source>
          <target state="translated">Groovy는 인수가없는 생성자를 사용하는 클래스 또는 첫 번째 인수로 Map을 사용하는 생성자를위한 명명 된 인수를 지원합니다. 이것은 &lt;code&gt;@TupleConstructor&lt;/code&gt; 가 생성 하는 기본 생성자 종류와 호환됩니다 .</target>
        </trans-unit>
        <trans-unit id="b1dcbe931f868b3725ecdfcabffaa73750075ec3" translate="yes" xml:space="preserve">
          <source>Groovy test case, which recreates internal GroovyShell in each setUp()</source>
          <target state="translated">각 setUp ()에서 내부 GroovyShell을 다시 생성하는 Groovy 테스트 케이스</target>
        </trans-unit>
        <trans-unit id="05ce2b496f679664f244baa22f5fddf5316bcd09" translate="yes" xml:space="preserve">
          <source>Groovy truth will be used to determine true and false, null is excluded from defaulting to false here. If all tests have been executed and all of them skipped, then the groovy standard filtering will take place.</source>
          <target state="translated">Groovy 진실은 참과 거짓을 결정하는 데 사용되며 여기서 null은 기본값이 거짓으로 제외됩니다. 모든 테스트가 실행되고 모든 테스트를 건너 뛰면 그루비 표준 필터링이 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="3c87d72b713743eae530deca37d3559c789f0634" translate="yes" xml:space="preserve">
          <source>Groovy wrapper classes for primitive types.</source>
          <target state="translated">기본 유형에 대한 Groovy 래퍼 클래스.</target>
        </trans-unit>
        <trans-unit id="2c5d41a0c244e2e987cf31024aeea4d1f183558d" translate="yes" xml:space="preserve">
          <source>Groovy's normal map-style naming conventions will not be available if the first property has type &lt;code&gt;LinkedHashMap&lt;/code&gt; or if there is a single Map, AbstractMap or HashMap property.</source>
          <target state="translated">첫 번째 속성에 &lt;code&gt;LinkedHashMap&lt;/code&gt; 유형이 있거나 단일 Map, AbstractMap 또는 HashMap 속성이있는 경우 Groovy의 일반 맵 스타일 명명 규칙을 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="cc9d7826dcc1d56d4e6ec1ea736961d76b5a2fe2" translate="yes" xml:space="preserve">
          <source>GroovyASTTransformation</source>
          <target state="translated">GroovyASTTransformation</target>
        </trans-unit>
        <trans-unit id="2afd993fb1e2d0df4bd1b8cb664c3fdb21c87502" translate="yes" xml:space="preserve">
          <source>GroovyAnnotationRef</source>
          <target state="translated">GroovyAnnotationRef</target>
        </trans-unit>
        <trans-unit id="9e5eea705af2b82930e663814660163f3ed83c96" translate="yes" xml:space="preserve">
          <source>GroovyAssert</source>
          <target state="translated">GroovyAssert</target>
        </trans-unit>
        <trans-unit id="b6a07cea4a691ad46855daee25a89c34f1a0b150" translate="yes" xml:space="preserve">
          <source>GroovyBugError if key is null</source>
          <target state="translated">키가 null 인 경우 GroovyBugError</target>
        </trans-unit>
        <trans-unit id="a6df8c4cb64c22d9fb8ea68c9d32277565a39e06" translate="yes" xml:space="preserve">
          <source>GroovyBugError if key is null or there is already meta data under that key</source>
          <target state="translated">키가 null이거나 해당 키 아래에 이미 메타 데이터가있는 경우 GroovyBugError</target>
        </trans-unit>
        <trans-unit id="ae7a870c6ac20d06e2700557f13097585eb6ff3d" translate="yes" xml:space="preserve">
          <source>GroovyBugError if the key is null</source>
          <target state="translated">키가 null 인 경우 GroovyBugError</target>
        </trans-unit>
        <trans-unit id="aca4932a2a323e34d6cf12112863407d92061988" translate="yes" xml:space="preserve">
          <source>GroovyClassDoc</source>
          <target state="translated">GroovyClassDoc</target>
        </trans-unit>
        <trans-unit id="6c8e00730a5c2f8a4fd0c7bd761d3aced8c738d1" translate="yes" xml:space="preserve">
          <source>GroovyClassValue</source>
          <target state="translated">GroovyClassValue</target>
        </trans-unit>
        <trans-unit id="2b6cd96c988ab5b02f081123f5307905aac08704" translate="yes" xml:space="preserve">
          <source>GroovyClassValue implementaion that simply delegates to Java 7's java.lang.ClassValue</source>
          <target state="translated">단순히 Java 7의 java.lang.ClassValue에 위임하는 GroovyClassValue 구현</target>
        </trans-unit>
        <trans-unit id="cda9be8a1c7cd33e2bbaef50c50588612650e92b" translate="yes" xml:space="preserve">
          <source>GroovyClassVisitor</source>
          <target state="translated">GroovyClassVisitor</target>
        </trans-unit>
        <trans-unit id="fbef2a047cf58f2ee6619bd5d13c9ca7ddc517e0" translate="yes" xml:space="preserve">
          <source>GroovyCodeVisitor</source>
          <target state="translated">GroovyCodeVisitor</target>
        </trans-unit>
        <trans-unit id="2f223df186fcc142fec326a290fe5b7eb43872cf" translate="yes" xml:space="preserve">
          <source>GroovyCollections.combinations</source>
          <target state="translated">GroovyCollections.combinations</target>
        </trans-unit>
        <trans-unit id="2a4cbe8dae8ee1016dc4ee01f02847667eaf9fca" translate="yes" xml:space="preserve">
          <source>GroovyCollections.max</source>
          <target state="translated">GroovyCollections.max</target>
        </trans-unit>
        <trans-unit id="8b4ed724bc4f42d512ae8b76bbc70375efaeeea4" translate="yes" xml:space="preserve">
          <source>GroovyCollections.min</source>
          <target state="translated">GroovyCollections.min</target>
        </trans-unit>
        <trans-unit id="a96c8014198854d83379dcbf65f30611eb1c4c83" translate="yes" xml:space="preserve">
          <source>GroovyCollections.transpose</source>
          <target state="translated">GroovyCollections.transpose</target>
        </trans-unit>
        <trans-unit id="d7e975ace7efbdb2d8431935b97b606ed7a79fae" translate="yes" xml:space="preserve">
          <source>GroovyConstructorDoc</source>
          <target state="translated">GroovyConstructorDoc</target>
        </trans-unit>
        <trans-unit id="7446dee6d30c52d65a238bea4ee89b27265918cb" translate="yes" xml:space="preserve">
          <source>GroovyDoc</source>
          <target state="translated">GroovyDoc</target>
        </trans-unit>
        <trans-unit id="17ffd3e55899b729d8b529182aac90b8ead7aa57" translate="yes" xml:space="preserve">
          <source>GroovyDoc internal classes.</source>
          <target state="translated">GroovyDoc 내부 클래스.</target>
        </trans-unit>
        <trans-unit id="fe7bff80f2b7289c2ab26bfa742e19becdd4511b" translate="yes" xml:space="preserve">
          <source>GroovyDoc tool.</source>
          <target state="translated">GroovyDoc 도구.</target>
        </trans-unit>
        <trans-unit id="87b1c86cedbd3ddf75f76ce7f8caccb7aa04ae22" translate="yes" xml:space="preserve">
          <source>GroovyDocParserI</source>
          <target state="translated">GroovyDocParserI</target>
        </trans-unit>
        <trans-unit id="82cf4f54a4f767db6088d95169f043583f98bc63" translate="yes" xml:space="preserve">
          <source>GroovyExceptionInterface</source>
          <target state="translated">GroovyExceptionInterface</target>
        </trans-unit>
        <trans-unit id="b884ba6297fef7d04ed665e9f01e02dfdb594b65" translate="yes" xml:space="preserve">
          <source>GroovyExecutableMemberDoc</source>
          <target state="translated">GroovyExecutableMemberDoc</target>
        </trans-unit>
        <trans-unit id="a6004d7e059e6f9e4138adf52fea151b9c153bda" translate="yes" xml:space="preserve">
          <source>GroovyFieldDoc</source>
          <target state="translated">GroovyFieldDoc</target>
        </trans-unit>
        <trans-unit id="91f473dc20ffcb4eb98f16bdeb7cdee55c9cd15b" translate="yes" xml:space="preserve">
          <source>GroovyInterceptable</source>
          <target state="translated">GroovyInterceptable</target>
        </trans-unit>
        <trans-unit id="9115a4d409b747597eb61c1ab4e67585c818fc45" translate="yes" xml:space="preserve">
          <source>GroovyLogTestCaseTest</source>
          <target state="translated">GroovyLogTestCaseTest</target>
        </trans-unit>
        <trans-unit id="511f9f82ae50d00faf241064f44ee7cd338beed8" translate="yes" xml:space="preserve">
          <source>GroovyMain.searchForGroovyScriptFile</source>
          <target state="translated">GroovyMain.searchForGroovyScriptFile</target>
        </trans-unit>
        <trans-unit id="8d7f7c1abfae5fe754e59f216687d90b7a1ee37f" translate="yes" xml:space="preserve">
          <source>GroovyMemberDoc</source>
          <target state="translated">GroovyMemberDoc</target>
        </trans-unit>
        <trans-unit id="328297455b281decac51105ae6bfed8920da4d2e" translate="yes" xml:space="preserve">
          <source>GroovyMethodDoc</source>
          <target state="translated">GroovyMethodDoc</target>
        </trans-unit>
        <trans-unit id="36d5dd230cb67e70140cd94cb2ca26f6bc6ec74b" translate="yes" xml:space="preserve">
          <source>GroovyObject</source>
          <target state="translated">GroovyObject</target>
        </trans-unit>
        <trans-unit id="f3e84b6cfaa953ebc4c38e0828d7577b12d97abb" translate="yes" xml:space="preserve">
          <source>GroovyObject.getProperty</source>
          <target state="translated">GroovyObject.getProperty</target>
        </trans-unit>
        <trans-unit id="787bf38f89c2c0ed8ca3fa68d3937e60396d4868" translate="yes" xml:space="preserve">
          <source>GroovyObject.setProperty</source>
          <target state="translated">GroovyObject.setProperty</target>
        </trans-unit>
        <trans-unit id="097ad01784ee583de407d5d7b1ff203eb56da4e6" translate="yes" xml:space="preserve">
          <source>GroovyPackageDoc</source>
          <target state="translated">GroovyPackageDoc</target>
        </trans-unit>
        <trans-unit id="8044fc03b0a9a0bd44e5bf541bb47677673d5fec" translate="yes" xml:space="preserve">
          <source>GroovyParameter</source>
          <target state="translated">GroovyParameter</target>
        </trans-unit>
        <trans-unit id="fa285db82b09f89fc71c4dbc6de6fddc1c74c0c1" translate="yes" xml:space="preserve">
          <source>GroovyParserVisitor</source>
          <target state="translated">GroovyParserVisitor</target>
        </trans-unit>
        <trans-unit id="32cb593dbf054684e076cf672564461ebfa98869" translate="yes" xml:space="preserve">
          <source>GroovyProgramElementDoc</source>
          <target state="translated">GroovyProgramElementDoc</target>
        </trans-unit>
        <trans-unit id="0ca646239c949b198c8d5fbc6b9483c290ad999a" translate="yes" xml:space="preserve">
          <source>GroovyResultSet</source>
          <target state="translated">GroovyResultSet</target>
        </trans-unit>
        <trans-unit id="f1693b04c21a4fdb349dc3f4e800616af9d9e0ad" translate="yes" xml:space="preserve">
          <source>GroovyResultSetExtension</source>
          <target state="translated">GroovyResultSetExtension</target>
        </trans-unit>
        <trans-unit id="d178673fbe6490a586f2d6bfdc4ae2470daee8b9" translate="yes" xml:space="preserve">
          <source>GroovyResultSetExtension implements additional logic for ResultSet. Due to the version incompatibility between java6 and java5 this methods are moved here from the original GroovyResultSet class. The methods in this class are used by the proxy GroovyResultSetProxy, which will try to invoke methods on this class before invoking it on ResultSet.</source>
          <target state="translated">GroovyResultSetExtension은 ResultSet에 대한 추가 논리를 구현합니다. java6과 java5 간의 버전 비 호환성으로 인해이 메소드는 원래 GroovyResultSet 클래스에서 여기로 이동되었습니다. 이 클래스의 메소드는 프록시 GroovyResultSetProxy에 의해 사용되며, ResultSet에서 호출하기 전에이 클래스에서 메소드 호출을 시도합니다.</target>
        </trans-unit>
        <trans-unit id="6b1d43238dcfb570a374cd22aebbfa544d282030" translate="yes" xml:space="preserve">
          <source>GroovyResultSetProxy</source>
          <target state="translated">GroovyResultSetProxy</target>
        </trans-unit>
        <trans-unit id="d92ea15a593765c587496f6d28f6cb7773873c1b" translate="yes" xml:space="preserve">
          <source>GroovyResultSetProxy is used to create a proxy for GroovyResultSet. Due to the version incompatibility between java 6 and older versions methods with additional logic were moved into an extension class. When getting properties or calling methods, the runtime will try to first execute these on the extension and then on the ResultSet itself. This way it is possible to replace and add methods. To overload methods from ResultSet all methods have to be implemented on the extension class.</source>
          <target state="translated">GroovyResultSetProxy는 GroovyResultSet에 대한 프록시를 만드는 데 사용됩니다. Java 6과 이전 버전 간의 버전 비 호환성으로 인해 추가 로직이있는 메소드가 확장 클래스로 이동되었습니다. 속성을 가져 오거나 메서드를 호출 할 때 런타임은 먼저 확장에서이를 실행 한 다음 ResultSet 자체에서이를 실행하려고합니다. 이렇게하면 메서드를 교체하고 추가 할 수 있습니다. ResultSet에서 메서드를 오버로드하려면 모든 메서드가 확장 클래스에서 구현되어야합니다.</target>
        </trans-unit>
        <trans-unit id="eeee447b9b05a7dce86048ab68e97651dc7022db" translate="yes" xml:space="preserve">
          <source>GroovyRootDoc</source>
          <target state="translated">GroovyRootDoc</target>
        </trans-unit>
        <trans-unit id="7facf7f939f3b2d444ac4aab44a52d79952cc313" translate="yes" xml:space="preserve">
          <source>GroovyRunner</source>
          <target state="translated">GroovyRunner</target>
        </trans-unit>
        <trans-unit id="cc6b53d7a423aabeb074136bae05efda8e8ee1ef" translate="yes" xml:space="preserve">
          <source>GroovyRuntimeException if &lt;code&gt;to&lt;/code&gt; is a different type than this</source>
          <target state="translated">&lt;code&gt;to&lt;/code&gt; 가 이것과 다른 유형 인 경우 GroovyRuntimeException</target>
        </trans-unit>
        <trans-unit id="fb185414c6d23b6e80a938d6881072059bb3c160" translate="yes" xml:space="preserve">
          <source>GroovyRuntimeException if the metaclass can't be set for this class</source>
          <target state="translated">이 클래스에 대해 메타 클래스를 설정할 수없는 경우 GroovyRuntimeException</target>
        </trans-unit>
        <trans-unit id="9bf4f3386ef89baf0507b3cdca9f5f4d574db461" translate="yes" xml:space="preserve">
          <source>GroovyRuntimeException if the metaclass can't be set for this object</source>
          <target state="translated">이 개체에 대해 메타 클래스를 설정할 수없는 경우 GroovyRuntimeException</target>
        </trans-unit>
        <trans-unit id="eb9b40350dc114a111d4e6373de77248a23fe69b" translate="yes" xml:space="preserve">
          <source>GroovyRuntimeException if there is more than one matching method</source>
          <target state="translated">일치하는 메서드가 두 개 이상인 경우 GroovyRuntimeException</target>
        </trans-unit>
        <trans-unit id="4b7514ad3ad67dc72e04d600d714c052745f90cb" translate="yes" xml:space="preserve">
          <source>GroovyRuntimeException if this value is earlier than &lt;code&gt;to&lt;/code&gt;</source>
          <target state="translated">GroovyRuntimeException이 값은 이전의 경우 &lt;code&gt;to&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="80b13b035428fd1df311a8836cfc774cba545bf7" translate="yes" xml:space="preserve">
          <source>GroovyRuntimeException if this value is later than &lt;code&gt;to&lt;/code&gt;</source>
          <target state="translated">GroovyRuntimeException은이 값보다 이후 인 경우 &lt;code&gt;to&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="975ff748035963bc3eb24b3c978553ed4f5fe466" translate="yes" xml:space="preserve">
          <source>GroovyTag</source>
          <target state="translated">GroovyTag</target>
        </trans-unit>
        <trans-unit id="3d17fb4bfc5f7b9f8096836bcaa1be8d4edc4572" translate="yes" xml:space="preserve">
          <source>GroovyTestCase</source>
          <target state="translated">GroovyTestCase</target>
        </trans-unit>
        <trans-unit id="b126ad56079de624094d8eaa63b23161a420067a" translate="yes" xml:space="preserve">
          <source>GroovyTokenTypes</source>
          <target state="translated">GroovyTokenTypes</target>
        </trans-unit>
        <trans-unit id="02c9d06b762475c86234c9e5de9f41a031e5b20d" translate="yes" xml:space="preserve">
          <source>GroovyType</source>
          <target state="translated">GroovyType</target>
        </trans-unit>
        <trans-unit id="a3cc99081e70d470e34d40eb0f6bb538e67a21f7" translate="yes" xml:space="preserve">
          <source>GroovydocHolder</source>
          <target state="translated">GroovydocHolder</target>
        </trans-unit>
        <trans-unit id="b0f853f111837418b4143bce5f21b51b55e5abce" translate="yes" xml:space="preserve">
          <source>GroovydocHolder instance</source>
          <target state="translated">GroovydocHolder 인스턴스</target>
        </trans-unit>
        <trans-unit id="f1ac5abd425ed6bfdafe74b1e85f316c7eb1d184" translate="yes" xml:space="preserve">
          <source>Groups all map entries into groups determined by the supplied mapping closure.</source>
          <target state="translated">모든 맵 항목을 제공된 매핑 클로저에 의해 결정된 그룹으로 그룹화합니다.</target>
        </trans-unit>
        <trans-unit id="09655079a5e2dd6ee708a5f45de7d07f92338a8a" translate="yes" xml:space="preserve">
          <source>Groups all map entries into groups determined by the supplied mapping closure. The closure will be passed a Map.Entry or key and value (depending on the number of parameters the closure accepts) and should return the key that each item should be grouped under. The resulting map will have an entry for each 'group' key returned by the closure, with values being the list of map entries that belong to each group. (If instead of a list of map entries, you want an actual map use {code}groupBy{code}.)</source>
          <target state="translated">모든 맵 항목을 제공된 매핑 클로저에 의해 결정된 그룹으로 그룹화합니다. 클로저는 Map.Entry 또는 키 및 값 (클로저가 허용하는 매개 변수 수에 따라 다름)을 전달하고 각 항목을 그룹화해야하는 키를 반환해야합니다. 결과 맵에는 클로저에 의해 반환 된 각 '그룹'키에 대한 항목이 있으며 값은 각 그룹에 속하는 맵 항목 목록입니다. (지도 항목 목록 대신 실제지도를 원하면 {code} groupBy {code}를 사용합니다.)</target>
        </trans-unit>
        <trans-unit id="88b18e09cf949cd690fba987c8af14b5246fc9df" translate="yes" xml:space="preserve">
          <source>Groups the current element according to the value</source>
          <target state="translated">값에 따라 현재 요소를 그룹화합니다.</target>
        </trans-unit>
        <trans-unit id="01b2fdc285a04fa0ca016d21ee921a28e7e7de0b" translate="yes" xml:space="preserve">
          <source>Groups the members of a map into groups determined by the supplied mapping closure and counts the frequency of the created groups.</source>
          <target state="translated">제공된 매핑 클로저에 의해 결정된 그룹으로 맵의 구성원을 그룹화하고 생성 된 그룹의 빈도를 계산합니다.</target>
        </trans-unit>
        <trans-unit id="d2a9c5650904cb345632b4f758fb7a5f772e1c5b" translate="yes" xml:space="preserve">
          <source>Groups the members of a map into groups determined by the supplied mapping closure and counts the frequency of the created groups. The closure will be passed a Map.Entry or key and value (depending on the number of parameters the closure accepts) and should return the key that each item should be grouped under. The resulting map will have an entry for each 'group' key returned by the closure, with values being the frequency counts for that 'group'.</source>
          <target state="translated">제공된 매핑 클로저에 의해 결정된 그룹으로 맵의 구성원을 그룹화하고 생성 된 그룹의 빈도를 계산합니다. 클로저는 Map.Entry 또는 키 및 값 (클로저가 허용하는 매개 변수 수에 따라 다름)을 전달하고 각 항목을 그룹화해야하는 키를 반환해야합니다. 결과 맵에는 클로저에 의해 반환 된 각 '그룹'키에 대한 항목이 있으며 값은 해당 '그룹'에 대한 빈도 수입니다.</target>
        </trans-unit>
        <trans-unit id="183befa5dc4c657bed738c0e388eaa2df8a78963" translate="yes" xml:space="preserve">
          <source>Groups the members of a map into sub maps determined by the supplied mapping closure.</source>
          <target state="translated">제공된 매핑 클로저에 의해 결정된 하위 맵으로 맵의 구성원을 그룹화합니다.</target>
        </trans-unit>
        <trans-unit id="94a47cfefa3baaba2b3cc6703a094fc6ce819246" translate="yes" xml:space="preserve">
          <source>Groups the members of a map into sub maps determined by the supplied mapping closure. The closure will be passed a Map.Entry or key and value (depending on the number of parameters the closure accepts) and should return the key that each item should be grouped under. The resulting map will have an entry for each 'group' key returned by the closure, with values being the map members from the original map that belong to each group. (If instead of a map, you want a list of map entries use {code}groupEntriesBy{code}.)</source>
          <target state="translated">제공된 매핑 클로저에 의해 결정된 하위 맵으로 맵의 구성원을 그룹화합니다. 클로저는 Map.Entry 또는 키 및 값 (클로저가 허용하는 매개 변수 수에 따라 다름)을 전달하고 각 항목을 그룹화해야하는 키를 반환해야합니다. 결과 맵에는 클로저에 의해 반환 된 각 '그룹'키에 대한 항목이 있으며 값은 각 그룹에 속하는 원래 맵의 맵 구성원입니다. (지도 대신지도 항목 목록을 원하면 {code} groupEntriesBy {code}를 사용합니다.)</target>
        </trans-unit>
        <trans-unit id="f1c68bce79200c96e7db364c9c2031817f417188" translate="yes" xml:space="preserve">
          <source>Groups the members of a map into sub maps determined by the supplied mapping closures.</source>
          <target state="translated">제공된 매핑 클로저에 의해 결정된 하위 맵으로 맵의 구성원을 그룹화합니다.</target>
        </trans-unit>
        <trans-unit id="a26c193798fbf51cee7c3242dddf6857eb0f25dd" translate="yes" xml:space="preserve">
          <source>Groups the members of a map into sub maps determined by the supplied mapping closures. Each closure will be passed a Map.Entry or key and value (depending on the number of parameters the closure accepts) and should return the key that each item should be grouped under. The resulting map will have an entry for each 'group path' returned by all closures, with values being the map members from the original map that belong to each such 'group path'. If the &lt;code&gt;self&lt;/code&gt; map is one of TreeMap, Hashtable, or Properties, the returned Map will preserve that type, otherwise a LinkedHashMap will be returned.</source>
          <target state="translated">제공된 매핑 클로저에 의해 결정된 하위 맵으로 맵의 구성원을 그룹화합니다. 각 클로저에는 Map.Entry 또는 키와 값 (클로저가 허용하는 매개 변수 수에 따라 다름)이 전달되고 각 항목을 그룹화해야하는 키를 반환해야합니다. 결과 맵에는 모든 클로저에 의해 반환 된 각 '그룹 경로'에 대한 항목이 있으며 값은 이러한 각 '그룹 경로'에 속하는 원래 맵의 맵 구성원입니다. 는 IF &lt;code&gt;self&lt;/code&gt; 맵 트리 맵, 해시 테이블, 또는 속성 중 하나입니다, 반환 된지도 유형, 그렇지 않으면의 LinkedHashMap이 반환됩니다 보존됩니다.</target>
        </trans-unit>
        <trans-unit id="bd2db70b4e4fad2a4d49adb0c1f7c8c211363837" translate="yes" xml:space="preserve">
          <source>Guard for enumConstants.</source>
          <target state="translated">enumConstants 보호.</target>
        </trans-unit>
        <trans-unit id="766e38b5d12444c5c31d2c3164396cb67e80f61d" translate="yes" xml:space="preserve">
          <source>Guard to check if the argument is null.</source>
          <target state="translated">인수가 null인지 확인하도록 보호합니다.</target>
        </trans-unit>
        <trans-unit id="52c516d5ccb99d1c1df7d58c0328f00f7e828fc8" translate="yes" xml:space="preserve">
          <source>Guard to check if the argument is null. This method is called by the handle to check if the provided argument is null.</source>
          <target state="translated">인수가 null인지 확인하도록 보호합니다. 이 메서드는 제공된 인수가 null인지 확인하기 위해 핸들에 의해 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="bced2de10fd5d2185edf3cd79006b4648d852bf2" translate="yes" xml:space="preserve">
          <source>Guard to check if the provided Object has the same class as the provided Class.</source>
          <target state="translated">제공된 Object가 제공된 Class와 동일한 클래스인지 확인하기 위해 Guard.</target>
        </trans-unit>
        <trans-unit id="52598061917ec2d780a5ff8f549b7776e96d599d" translate="yes" xml:space="preserve">
          <source>Guard to check if the provided Object has the same class as the provided Class. This method will return false if the Object is null.</source>
          <target state="translated">제공된 Object가 제공된 Class와 동일한 클래스인지 확인하기 위해 Guard. 이 메서드는 Object가 null 인 경우 false를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="370f989db787a30bd2ca3f95cd006148a598f8cb" translate="yes" xml:space="preserve">
          <source>Handle for all information we want to keep about the class</source>
          <target state="translated">수업에 대해 유지하려는 모든 정보를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="7673739d3ffab9615c0b7891330a0d603e4fcb48" translate="yes" xml:space="preserve">
          <source>Handle web requests to the GroovyServlet</source>
          <target state="translated">GroovyServlet에 대한 웹 요청 처리</target>
        </trans-unit>
        <trans-unit id="e8f86f0609353c5818d375ffa4ddb4121f458854" translate="yes" xml:space="preserve">
          <source>Handles converting a given type.</source>
          <target state="translated">주어진 유형 변환을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="63017fe046d1633ceef71a72ad5f7001a3776e67" translate="yes" xml:space="preserve">
          <source>Handles generation of code for the</source>
          <target state="translated">코드 생성을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="b148571474b1e2a23fcbab31eeca3c4f26a90e68" translate="yes" xml:space="preserve">
          <source>Handles generation of code for the &lt;a href=&quot;../../../../groovy/transform/autofinal&quot;&gt;AutoFinal&lt;/a&gt; annotation.</source>
          <target state="translated">&lt;a href=&quot;../../../../groovy/transform/autofinal&quot;&gt;AutoFinal&lt;/a&gt; 주석에 대한 코드 생성을 처리합니다 .</target>
        </trans-unit>
        <trans-unit id="cab01b5b7331c83f3e664a0e348738c855d91b70" translate="yes" xml:space="preserve">
          <source>Handles generation of code for the &lt;a href=&quot;../../../../groovy/transform/builder/builder&quot;&gt;Builder&lt;/a&gt; annotation.</source>
          <target state="translated">&lt;a href=&quot;../../../../groovy/transform/builder/builder&quot;&gt;Builder&lt;/a&gt; 주석에 대한 코드 생성을 처리합니다 .</target>
        </trans-unit>
        <trans-unit id="0f5f7eae912148cd38675727f83b3881cdfcd01c" translate="yes" xml:space="preserve">
          <source>Handles generation of code for the &lt;a href=&quot;../../../../groovy/transform/memoized&quot;&gt;Memoized&lt;/a&gt; annotation.</source>
          <target state="translated">&lt;a href=&quot;../../../../groovy/transform/memoized&quot;&gt;Memoized&lt;/a&gt; 주석에 대한 코드 생성을 처리합니다 .</target>
        </trans-unit>
        <trans-unit id="7f0766989a4ba4ae7585e4a141b2eb58f1ddb948" translate="yes" xml:space="preserve">
          <source>Handles generation of code for the &lt;code&gt;@&lt;/code&gt;IndexedProperty annotation.</source>
          <target state="translated">&lt;code&gt;@&lt;/code&gt; IndexedProperty 주석에 대한 코드 생성을 처리합니다 .</target>
        </trans-unit>
        <trans-unit id="ec9da99344f66be574642d2aab49e85f09e3ee42" translate="yes" xml:space="preserve">
          <source>Handles generation of code for the &lt;code&gt;@&lt;/code&gt;InheritConstructors annotation.</source>
          <target state="translated">&lt;code&gt;@&lt;/code&gt; InheritConstructors 주석에 대한 코드 생성을 처리합니다 .</target>
        </trans-unit>
        <trans-unit id="dd96af09ee65ff66f77dfb539ecc37ffd4bb9cb7" translate="yes" xml:space="preserve">
          <source>Handles generation of code for the &lt;code&gt;@&lt;/code&gt;WithReadLock and &lt;code&gt;@&lt;/code&gt;WithWriteLock annotation.</source>
          <target state="translated">&lt;code&gt;@&lt;/code&gt; WithReadLock 및 &lt;code&gt;@&lt;/code&gt; WithWriteLock 주석에 대한 코드 생성을 처리 합니다.</target>
        </trans-unit>
        <trans-unit id="2a93c3d5cb76830d15346e214fa8f06c53ce9c65" translate="yes" xml:space="preserve">
          <source>Handles generation of code for the &lt;code&gt;@Bindable&lt;/code&gt; annotation when &lt;code&gt;@Vetoable&lt;/code&gt; is not present.</source>
          <target state="translated">에 대한 코드의 핸들 생성 &lt;code&gt;@Bindable&lt;/code&gt; 주석 때 &lt;code&gt;@Vetoable&lt;/code&gt; 은 존재하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dd4f04cf99fa4f2f2e1e711a12532b5613fdcaca" translate="yes" xml:space="preserve">
          <source>Handles generation of code for the &lt;code&gt;@Delegate&lt;/code&gt; annotation</source>
          <target state="translated">&lt;code&gt;@Delegate&lt;/code&gt; 주석에 대한 코드 생성을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="76a764b281a7afb386be57901cbdf50f7f99cc0b" translate="yes" xml:space="preserve">
          <source>Handles generation of code for the &lt;code&gt;@ListenerList&lt;/code&gt; annotation.</source>
          <target state="translated">&lt;code&gt;@ListenerList&lt;/code&gt; 주석에 대한 코드 생성을 처리합니다 .</target>
        </trans-unit>
        <trans-unit id="0d3449dd7e62c6bca50515cde6799d54864d14b9" translate="yes" xml:space="preserve">
          <source>Handles generation of code for the &lt;code&gt;@Newify&lt;/code&gt; AST transform.</source>
          <target state="translated">&lt;code&gt;@Newify&lt;/code&gt; AST 변환에 대한 코드 생성을 처리합니다 .</target>
        </trans-unit>
        <trans-unit id="aa2c8dd83e998e114ea2e5885b579a14fd5c0c61" translate="yes" xml:space="preserve">
          <source>Handles generation of code for the &lt;code&gt;@Synchronized&lt;/code&gt; annotation.</source>
          <target state="translated">&lt;code&gt;@Synchronized&lt;/code&gt; 주석에 대한 코드 생성을 처리합니다 .</target>
        </trans-unit>
        <trans-unit id="16186c3464ed4dbd8a101d50d16972ea506dc5c8" translate="yes" xml:space="preserve">
          <source>Handles generation of code for the &lt;code&gt;@Vetoable&lt;/code&gt; annotation, and &lt;code&gt;@Bindable&lt;/code&gt; if also present.</source>
          <target state="translated">&lt;code&gt;@Vetoable&lt;/code&gt; 주석 및 &lt;code&gt;@Bindable&lt;/code&gt; (있는 경우)에 대한 코드 생성을 처리 합니다.</target>
        </trans-unit>
        <trans-unit id="2a9a5a453b05ee71f20fb5e3ccc34cd094e66425" translate="yes" xml:space="preserve">
          <source>Handles generation of code for the traits (trait keyword is equivalent to using the</source>
          <target state="translated">트레이 트에 대한 코드 생성을 처리합니다 (trait 키워드는</target>
        </trans-unit>
        <trans-unit id="22fca81025384c0695509f53fe84cd506499bc4d" translate="yes" xml:space="preserve">
          <source>Handles parsing the properties from the closure into values that can be referenced. This object is very stateful and not threadsafe. It accumulates expressions in the 'expression' field as they are found and executed within the DSL. Note: this class consists of many one-line method calls. A better implementation might be to take a declarative approach and replace the one-liners with map entries.</source>
          <target state="translated">클로저의 속성을 참조 할 수있는 값으로 구문 분석합니다. 이 개체는 상태가 매우 높으며 스레드로부터 안전하지 않습니다. DSL 내에서 발견되고 실행될 때 '표현식'필드에 표현식이 누적됩니다. 참고 :이 클래스는 여러 단선 메서드 호출로 구성됩니다. 더 나은 구현은 선언적 접근 방식을 취하고 one-liners를 맵 항목으로 대체하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="3f224549ab8c4ac68785278d9096a7f7a84aa8f2" translate="yes" xml:space="preserve">
          <source>Handles the ability to use the left shift operator to append new constructors</source>
          <target state="translated">왼쪽 시프트 연산자를 사용하여 새 생성자를 추가하는 기능을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="171bf06b66b227ead8c64690b15df83980dc0f5f" translate="yes" xml:space="preserve">
          <source>Handles the bulk of the processing, mostly delegating to other methods.</source>
          <target state="translated">대부분 다른 메서드에 위임하는 대량 처리를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="2b6a35795ddb333ae2d06686dccff230ae24456a" translate="yes" xml:space="preserve">
          <source>Handles the common English regular plurals with the following rules.</source>
          <target state="translated">다음 규칙에 따라 일반적인 영어 정규 복수형을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="9839a05bdf7620236de90b57403ab1c43cf45a0d" translate="yes" xml:space="preserve">
          <source>Handles the implementation of the &lt;a href=&quot;../../../../../groovy/transform/compilestatic&quot;&gt;CompileStatic&lt;/a&gt; transformation.</source>
          <target state="translated">&lt;a href=&quot;../../../../../groovy/transform/compilestatic&quot;&gt;CompileStatic&lt;/a&gt; 변환 의 구현을 처리합니다 .</target>
        </trans-unit>
        <trans-unit id="d4b26877c095f64376c2519959785e9fa9f00cdc" translate="yes" xml:space="preserve">
          <source>Handles the implementation of the &lt;a href=&quot;../../../../groovy/transform/typechecked&quot;&gt;TypeChecked&lt;/a&gt; transformation.</source>
          <target state="translated">&lt;a href=&quot;../../../../groovy/transform/typechecked&quot;&gt;TypeChecked&lt;/a&gt; 변환 의 구현을 처리합니다 .</target>
        </trans-unit>
        <trans-unit id="a6423168480ca75b03dba862f57b95cb373502fb" translate="yes" xml:space="preserve">
          <source>Handles transformation for the</source>
          <target state="translated">변환을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="9c8a7367b9d4a1c79102ee0cdcd4823b3f4b340f" translate="yes" xml:space="preserve">
          <source>Handy methods when working with Closure AST data structures.</source>
          <target state="translated">Closure AST 데이터 구조로 작업 할 때 편리한 방법.</target>
        </trans-unit>
        <trans-unit id="7a352ce8944eff9832d06ab3ecec09d4030ba856" translate="yes" xml:space="preserve">
          <source>Handy methods when working with the Groovy AST</source>
          <target state="translated">Groovy AST로 작업 할 때 편리한 방법</target>
        </trans-unit>
        <trans-unit id="80cde5069513321577e0d32fdd1071d4724fdf1b" translate="yes" xml:space="preserve">
          <source>Has a Byte Order Marker for UTF-16 Big Endian (utf-16 and ucs-2).</source>
          <target state="translated">UTF-16 Big Endian (utf-16 및 ucs-2)에 대한 바이트 순서 마커가 있습니다.</target>
        </trans-unit>
        <trans-unit id="a464c8513b4ee4e8634933af87baa6d1e293dec1" translate="yes" xml:space="preserve">
          <source>Has a Byte Order Marker for UTF-16 Low Endian (ucs-2le, ucs-4le, and ucs-16le).</source>
          <target state="translated">UTF-16 Low Endian (ucs-2le, ucs-4le 및 ucs-16le) 용 바이트 순서 마커가 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa1333e11683bd96448abfaf10d321f8464c2959" translate="yes" xml:space="preserve">
          <source>Has a Byte Order Marker for UTF-8 (Used by Microsoft's Notepad and other editors).</source>
          <target state="translated">UTF-8 용 바이트 순서 마커가 있습니다 (Microsoft 메모장 및 기타 편집기에서 사용).</target>
        </trans-unit>
        <trans-unit id="8eb201973ca6bcf454f9ba929cec40bc77b20837" translate="yes" xml:space="preserve">
          <source>Has the map been hydrated.</source>
          <target state="translated">지도가 수화 되었습니까?</target>
        </trans-unit>
        <trans-unit id="aadc1ed9913446b6e4b297b982d95d23e3a9d49c" translate="yes" xml:space="preserve">
          <source>HasCleanup</source>
          <target state="translated">HasCleanup</target>
        </trans-unit>
        <trans-unit id="3ffb3d2c87f9f756a0b7aa1358d05c9efbd64a8a" translate="yes" xml:space="preserve">
          <source>HashCodeHelper</source>
          <target state="translated">HashCodeHelper</target>
        </trans-unit>
        <trans-unit id="b3df19275465f143523f93f2137a466098ac211c" translate="yes" xml:space="preserve">
          <source>Helge Tesgaard</source>
          <target state="translated">헬게 테스 가드</target>
        </trans-unit>
        <trans-unit id="2f141a9e74c34e6283e928532521b7b84b7412b8" translate="yes" xml:space="preserve">
          <source>Helper Class for Antlr AST traversal and visitation.</source>
          <target state="translated">Antlr AST 순회 및 방문을위한 도우미 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="dbb908a6bf3d3972eb47c850d92e7652ce1eabbb" translate="yes" xml:space="preserve">
          <source>Helper base class used for lazy updates.</source>
          <target state="translated">지연 업데이트에 사용되는 도우미 기본 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="91414c5a35fe62bd78161153831afa6dfb9941a2" translate="yes" xml:space="preserve">
          <source>Helper class for converting AST into text.</source>
          <target state="translated">AST를 텍스트로 변환하기위한 도우미 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="c9da9d1164858d7fbe88433c9e311ee6348ae871" translate="yes" xml:space="preserve">
          <source>Helper class for internal use only. This allows to call a &lt;a href=&quot;../../../../../groovy/lang/closure&quot;&gt;Closure&lt;/a&gt; and convert the result to a boolean. It will do this by caching the possible &quot;doCall&quot; as well as the &quot;asBoolean&quot; in CallSiteArray fashion. &quot;asBoolean&quot; will not be called if the result is null or a Boolean. In case of null we return false and in case of a Boolean we simply unbox. This logic is designed after the one present in &lt;a href=&quot;../typehandling/defaulttypetransformation#castToBoolean(Object)&quot;&gt;DefaultTypeTransformation.castToBoolean&lt;/a&gt;. The purpose of this class is to avoid the slow &quot;asBoolean&quot; call in that method. &lt;a href=&quot;booleanreturningmethodinvoker&quot;&gt;BooleanReturningMethodInvoker&lt;/a&gt; is used for caching.</source>
          <target state="translated">내부 전용 도우미 클래스입니다. 이를 통해 &lt;a href=&quot;../../../../../groovy/lang/closure&quot;&gt;Closure&lt;/a&gt; 를 호출 하고 결과를 부울로 변환 할 수 있습니다. CallSiteArray 형식의 &quot;asBoolean&quot;뿐만 아니라 가능한 &quot;doCall&quot;을 캐싱하여이를 수행합니다. 결과가 null 또는 Boolean이면 &quot;asBoolean&quot;이 호출되지 않습니다. null 인 경우 false를 반환하고 Boolean 인 경우 단순히 unbox를 해제합니다. 이 논리는 &lt;a href=&quot;../typehandling/defaulttypetransformation#castToBoolean(Object)&quot;&gt;DefaultTypeTransformation.castToBoolean에&lt;/a&gt; 있는 논리 다음에 설계되었습니다 . 이 클래스의 목적은 해당 메서드에서 느린 &quot;asBoolean&quot;호출을 방지하는 것입니다. &lt;a href=&quot;booleanreturningmethodinvoker&quot;&gt;BooleanReturningMethodInvoker&lt;/a&gt; 는 캐싱에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="08c361ccc9bc9397bb13e503ede19620762f439b" translate="yes" xml:space="preserve">
          <source>Helper class for internal use only. This allows to call a given method and convert the result to a boolean. It will do this by caching the method call as well as the &quot;asBoolean&quot; in &lt;a href=&quot;callsitearray&quot;&gt;CallSiteArray&lt;/a&gt; fashion. &quot;asBoolean&quot; will not be called if the result is null or a Boolean. In case of null we return false and in case of a Boolean we simply unbox. This logic is designed after the one present in &lt;a href=&quot;../typehandling/defaulttypetransformation#castToBoolean(Object)&quot;&gt;DefaultTypeTransformation.castToBoolean&lt;/a&gt;. The purpose of this class is to avoid the slow &quot;asBoolean&quot; call in that method. The nature of this class allows a per instance caching instead of a per class caching like the normal &lt;a href=&quot;callsitearray&quot;&gt;CallSiteArray&lt;/a&gt; logic.</source>
          <target state="translated">내부 전용 도우미 클래스입니다. 이를 통해 주어진 메소드를 호출하고 결과를 부울로 변환 할 수 있습니다. &lt;a href=&quot;callsitearray&quot;&gt;CallSiteArray&lt;/a&gt; 방식으로 &quot;asBoolean&quot;뿐만 아니라 메서드 호출을 캐싱하여이를 수행합니다 . 결과가 null 또는 Boolean이면 &quot;asBoolean&quot;이 호출되지 않습니다. null 인 경우 false를 반환하고 Boolean 인 경우 단순히 unbox를 해제합니다. 이 논리는 &lt;a href=&quot;../typehandling/defaulttypetransformation#castToBoolean(Object)&quot;&gt;DefaultTypeTransformation.castToBoolean에&lt;/a&gt; 있는 논리 다음에 설계되었습니다 . 이 클래스의 목적은 해당 메서드에서 느린 &quot;asBoolean&quot;호출을 방지하는 것입니다. 이 클래스의 특성은 일반 &lt;a href=&quot;callsitearray&quot;&gt;CallSiteArray&lt;/a&gt; 논리 와 같이 클래스 별 캐싱 대신 인스턴스 별 캐싱을 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="4baf31f3e44f4a830ae84e62e91fa29839c3bc4e" translate="yes" xml:space="preserve">
          <source>Helper class for iterating through nodes.</source>
          <target state="translated">노드를 반복하기위한 도우미 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="c16a67305d226f8fa576f15de1446959523529ca" translate="yes" xml:space="preserve">
          <source>Helper class for processing Groovy numeric literals.</source>
          <target state="translated">Groovy 숫자 리터럴을 처리하기위한 도우미 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="dfd49f9e7e9b2005f84911ed3928de78ca798405" translate="yes" xml:space="preserve">
          <source>Helper class that crawls all items of the classpath for packages. Retrieves from those sources the list of subpackages and classes on demand.</source>
          <target state="translated">패키지에 대한 클래스 경로의 모든 항목을 크롤링하는 도우미 클래스입니다. 해당 소스에서 요청시 하위 패키지 및 클래스 목록을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="fd1ee99af0c02e3fd76feee055e40bb7996b9cce" translate="yes" xml:space="preserve">
          <source>Helper class that takes an Expression and if visited will load it normally, storing the result in a helper variable, which then can be requested after the visit is completed. A copy of the variable will stay on the stack. Subsequent visits will load the stored value instead of visiting the expression again</source>
          <target state="translated">Expression을받는 도우미 클래스는 방문한 경우 정상적으로로드하여 도우미 변수에 결과를 저장하고 방문이 완료된 후 요청할 수 있습니다. 변수의 복사본은 스택에 남아 있습니다. 이후 방문은 표현식을 다시 방문하는 대신 저장된 값을로드합니다.</target>
        </trans-unit>
        <trans-unit id="222371186cb84c4fb4be9eb7c786f23dfdaeb514" translate="yes" xml:space="preserve">
          <source>Helper class to initialize the Groovy runtime.</source>
          <target state="translated">Groovy 런타임을 초기화하는 도우미 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="474424728aacf125d196bf34f1bacc278655ecd0" translate="yes" xml:space="preserve">
          <source>Helper class to return either a SourceUnit or ClassNode.</source>
          <target state="translated">SourceUnit 또는 ClassNode를 반환하는 도우미 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="d036448a18b3739d08f3a35a24b369031627dfcc" translate="yes" xml:space="preserve">
          <source>Helper class to spoof log entries as produced by calling arbitrary code. This allows non-intrusive testing of dependent objects without explicitly using Mock objects as long as those dependent objects do some proper logging. As a measure of last resort, it can be used on MetaClass to spoof it's log entries on 'invokeMethod'.</source>
          <target state="translated">임의의 코드를 호출하여 생성 된 로그 항목을 스푸핑하는 도우미 클래스입니다. 이를 통해 종속 객체가 적절한 로깅을 수행하는 한 명시 적으로 Mock 객체를 사용하지 않고도 종속 객체를 비침 입적으로 테스트 할 수 있습니다. 최후의 수단으로 MetaClass에서 'invokeMethod'의 로그 항목을 스푸핑하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="76ce062e1bdc329b2f4b0f1cd94c1f54ee8a656f" translate="yes" xml:space="preserve">
          <source>Helper classes for ASMClassGenerator.</source>
          <target state="translated">ASMClassGenerator에 대한 도우미 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="2115bb0332348e91e3e9790d4742e98b48fa2ca0" translate="yes" xml:space="preserve">
          <source>Helper classes for XmlSlurper.</source>
          <target state="translated">XmlSlurper 용 도우미 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="bb90d95811652d84b518f4c440b739ae26aebcdd" translate="yes" xml:space="preserve">
          <source>Helper for &lt;a href=&quot;classnode&quot;&gt;ClassNode&lt;/a&gt; and classes handling them. Contains a set of pre-defined instances for the most used types and some code for cached node creation and basic handling.</source>
          <target state="translated">&lt;a href=&quot;classnode&quot;&gt;ClassNode&lt;/a&gt; 및이를 처리하는 클래스에 대한 도우미 . 가장 많이 사용되는 유형에 대한 사전 정의 된 인스턴스 세트와 캐시 된 노드 생성 및 기본 처리를위한 일부 코드를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="bf0d1deeff1b5753649fd2172b2369e656744689" translate="yes" xml:space="preserve">
          <source>Helper method for entrySet.remove</source>
          <target state="translated">entrySet.remove의 도우미 메서드</target>
        </trans-unit>
        <trans-unit id="8780a8781cd21ff397475f874842eba52a14a01c" translate="yes" xml:space="preserve">
          <source>Helper method to add a new method to a ClassNode.</source>
          <target state="translated">ClassNode에 새 메서드를 추가하는 도우미 메서드입니다.</target>
        </trans-unit>
        <trans-unit id="baec945aec7421962e43545ae29bdceaec7b2835" translate="yes" xml:space="preserve">
          <source>Helper method to add a new method to a ClassNode. Depending on the shouldBeSynthetic flag the call will either be made to ClassNode.addSyntheticMethod() or ClassNode.addMethod(). If a non-synthetic method is to be added the ACC_SYNTHETIC modifier is removed if it has been accidentally supplied.</source>
          <target state="translated">ClassNode에 새 메서드를 추가하는 도우미 메서드입니다. shouldBeSynthetic 플래그에 따라 ClassNode.addSyntheticMethod () 또는 ClassNode.addMethod ()에 대한 호출이 수행됩니다. 비 합성 방법이 추가되는 경우 ACC_SYNTHETIC 수정자는 실수로 제공된 경우 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="17ae30764c6e13a8bf759f1780d91286fb15ebe8" translate="yes" xml:space="preserve">
          <source>Helper method to create a buffered writer for a file without writing a BOM.</source>
          <target state="translated">BOM을 작성하지 않고 파일에 대해 버퍼링 된 작성기를 만드는 도우미 메서드입니다.</target>
        </trans-unit>
        <trans-unit id="83a7ed2116a070d909bc0288a109cd7ad3e14c2a" translate="yes" xml:space="preserve">
          <source>Helper method to create a buffered writer for a file.</source>
          <target state="translated">파일에 대해 버퍼링 된 작성기를 만드는 도우미 메서드입니다.</target>
        </trans-unit>
        <trans-unit id="d38fe5dce4fe3f1dc6edf6bee6ac1ac7a655b54c" translate="yes" xml:space="preserve">
          <source>Helper method to create a buffered writer for a file. If the given charset is &quot;UTF-16BE&quot; or &quot;UTF-16LE&quot; (or an equivalent alias), the requisite byte order mark is written to the stream before the writer is returned.</source>
          <target state="translated">파일에 대해 버퍼링 된 작성기를 만드는 도우미 메서드입니다. 주어진 문자 집합이 &quot;UTF-16BE&quot;또는 &quot;UTF-16LE&quot;(또는 동등한 별칭)이면 작성기가 반환되기 전에 필요한 바이트 순서 표시가 스트림에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="e74e748cfd1ed2b35140e469f70143636896d8b9" translate="yes" xml:space="preserve">
          <source>Helper method to create a new BufferedReader for a URL and then passes it to the closure.</source>
          <target state="translated">URL에 대한 새 BufferedReader를 만든 다음 클로저에 전달하는 도우미 메서드입니다.</target>
        </trans-unit>
        <trans-unit id="3679675f0dccc348f9339e2febdee69791ff1ef8" translate="yes" xml:space="preserve">
          <source>Helper method to create a new BufferedReader for a URL and then passes it to the closure. The reader is closed after the closure returns.</source>
          <target state="translated">URL에 대한 새 BufferedReader를 만든 다음 클로저에 전달하는 도우미 메서드입니다. 클로저가 돌아온 후 판독기가 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="6d09c2f8aeac0318953bb0a3b9058e887329ce4a" translate="yes" xml:space="preserve">
          <source>Helper method to create a new Reader for a URL and then passes it to the closure.</source>
          <target state="translated">URL에 대한 새 리더를 만든 다음 클로저에 전달하는 도우미 메서드입니다.</target>
        </trans-unit>
        <trans-unit id="a97b5bbe8932dabb9f134afe20c57f3152efbc96" translate="yes" xml:space="preserve">
          <source>Helper method to create a new Reader for a URL and then passes it to the closure. The reader is closed after the closure returns.</source>
          <target state="translated">URL에 대한 새 리더를 만든 다음 클로저에 전달하는 도우미 메서드입니다. 클로저가 돌아온 후 판독기가 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="d8238fd0fcd178ae816fac8a807fcac14406dc49" translate="yes" xml:space="preserve">
          <source>Helper method to create a new Reader for a stream and then passes it into the closure.</source>
          <target state="translated">스트림에 대한 새 Reader를 만든 다음이를 클로저로 전달하는 도우미 메서드입니다.</target>
        </trans-unit>
        <trans-unit id="89ef2114cacd774335be5aae86bfa79611c81527" translate="yes" xml:space="preserve">
          <source>Helper method to create a new Reader for a stream and then passes it into the closure. The reader (and this stream) is closed after the closure returns.</source>
          <target state="translated">스트림에 대한 새 Reader를 만든 다음이를 클로저로 전달하는 도우미 메서드입니다. 판독기 (및이 스트림)는 클로저가 반환 된 후 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="f4a4cd09f4fcf149047c5a4beded7930c7603fc6" translate="yes" xml:space="preserve">
          <source>Helper method to handle object hashes for possibly null values</source>
          <target state="translated">null 값에 대한 개체 해시를 처리하는 도우미 메서드</target>
        </trans-unit>
        <trans-unit id="c2c30161459e74d0c7a6c3c528c912daa7b7dde6" translate="yes" xml:space="preserve">
          <source>Helper object to support convenience &quot;ignore.methodName&quot; notation similar to demand notation. Can't be used with methods within &lt;code&gt;java.lang.Object&lt;/code&gt;.</source>
          <target state="translated">수요 표기법과 유사한 편의 &quot;ignore.methodName&quot;표기법을 지원하는 도우미 개체입니다. &lt;code&gt;java.lang.Object&lt;/code&gt; 내의 메소드 와 함께 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="793b42d8f5d0c0e6d39696aa8be4bdc070eb1fb2" translate="yes" xml:space="preserve">
          <source>Helper to construct a new instance from the given arguments.</source>
          <target state="translated">주어진 인수에서 새 인스턴스를 생성하는 도우미입니다.</target>
        </trans-unit>
        <trans-unit id="7d910d66f2efb7b0c69346a1b0c4fc52ba45c0bb" translate="yes" xml:space="preserve">
          <source>Helper to construct a new instance from the given arguments. The constructor is called based on the number and types in the args array. Use &lt;code&gt;newInstance(null)&lt;/code&gt; or simply &lt;code&gt;newInstance()&lt;/code&gt; for the default (no-arg) constructor.</source>
          <target state="translated">주어진 인수에서 새 인스턴스를 생성하는 도우미입니다. 생성자는 args 배열의 수와 유형에 따라 호출됩니다. 사용 &lt;code&gt;newInstance(null)&lt;/code&gt; 또는 단순히 &lt;code&gt;newInstance()&lt;/code&gt; (인수 없음) 생성자 기본합니다.</target>
        </trans-unit>
        <trans-unit id="1b398a14d7f2f9c7efa941461f22a964a6ba84d6" translate="yes" xml:space="preserve">
          <source>Helper to interpret a source buffer.</source>
          <target state="translated">소스 버퍼를 해석하는 도우미입니다.</target>
        </trans-unit>
        <trans-unit id="1062b2b2a06a74947e8272b47dd4a66468522e2d" translate="yes" xml:space="preserve">
          <source>Helper to make logging from Ant easier.</source>
          <target state="translated">Ant에서 로깅을 더 쉽게 만드는 도우미.</target>
        </trans-unit>
        <trans-unit id="b33925cefc1ea4dbe82eb4352788d7f5451ce913" translate="yes" xml:space="preserve">
          <source>Helper to turn a list with an even number of elements into a Map.</source>
          <target state="translated">요소 수가 짝수 인 목록을지도로 변환하는 도우미입니다.</target>
        </trans-unit>
        <trans-unit id="bb284d4f5c4e1ae6821a5a81024fe1f60ab0567a" translate="yes" xml:space="preserve">
          <source>Helping to create a few standard AST constructs</source>
          <target state="translated">몇 가지 표준 AST 구성 생성 지원</target>
        </trans-unit>
        <trans-unit id="562d2542948855096edf020dcbb8bd2f628504c5" translate="yes" xml:space="preserve">
          <source>Here is a simple example of how to annotate a class with Vetoable:</source>
          <target state="translated">다음은 Vetoable로 클래스에 주석을 추가하는 방법에 대한 간단한 예입니다.</target>
        </trans-unit>
        <trans-unit id="b8440ce9750ed4d2b8950578a72b1a0b0979f598" translate="yes" xml:space="preserve">
          <source>Here is an example of how to use this class to open a listening socket on the server, listen for incoming data, and then echo the data back to the client in reverse order:</source>
          <target state="translated">다음은이 클래스를 사용하여 서버에서 수신 소켓을 열고 수신 데이터를 수신 한 다음 데이터를 역순으로 클라이언트에 다시 에코하는 방법의 예입니다.</target>
        </trans-unit>
        <trans-unit id="e65f2082d5bfef68a65771c010804c8af3022fe6" translate="yes" xml:space="preserve">
          <source>Here is an example of usage. We will create a groovy classloader which only supports arithmetic operations and imports the &lt;code&gt;java.lang.Math&lt;/code&gt; classes by default.</source>
          <target state="translated">다음은 사용 예입니다. 산술 연산 만 지원 하고 기본적으로 &lt;code&gt;java.lang.Math&lt;/code&gt; 클래스를 가져 오는 멋진 클래스 로더를 만들 것 입니다.</target>
        </trans-unit>
        <trans-unit id="7496207acd98e443ba54028307f06f17d35bf210" translate="yes" xml:space="preserve">
          <source>Here is an example using a delegate parameter.</source>
          <target state="translated">다음은 델리게이트 매개 변수를 사용하는 예입니다.</target>
        </trans-unit>
        <trans-unit id="a62bd4799dde46dc9b70cc58f103089cf2d3419d" translate="yes" xml:space="preserve">
          <source>Here is an example which converts the vowels in a word from lower to uppercase:</source>
          <target state="translated">다음은 단어의 모음을 소문자에서 대문자로 변환하는 예입니다.</target>
        </trans-unit>
        <trans-unit id="e62d07e8cad545a0f1595d3dbff0bf70ec979010" translate="yes" xml:space="preserve">
          <source>Here is an example, which only logs the class name during compilation:</source>
          <target state="translated">다음은 컴파일 중에 클래스 이름 만 기록하는 예입니다.</target>
        </trans-unit>
        <trans-unit id="540ee2aaf7182c6dfc449b18e5accb694e3b0894" translate="yes" xml:space="preserve">
          <source>Here is an example:</source>
          <target state="translated">다음은 그 예입니다.</target>
        </trans-unit>
        <trans-unit id="275a6e48f4b65805932d0d641a91ddc6693d6d56" translate="yes" xml:space="preserve">
          <source>Here name is a place holder for info, debug, warning, error, etc. If the expression exp is a constant or only a variable access the method call will not be transformed. But this will still cause a call on the injected logger.</source>
          <target state="translated">여기서 name은 정보, 디버그, 경고, 오류 등에 대한 자리 표시 자입니다. exp 표현식이 상수이거나 변수 액세스 만 있으면 메서드 호출이 변환되지 않습니다. 그러나 이것은 여전히 ​​삽입 된 로거에 대한 호출을 유발합니다.</target>
        </trans-unit>
        <trans-unit id="93e39c3309b18b1afd9c198b704b1e229b623994" translate="yes" xml:space="preserve">
          <source>Here name is a place holder for info, fine, finer, finest, config, warning, severe. NAME is name transformed to upper case. if anything else is used it will result in an exception at runtime. If the expression exp is a constant or only a variable access the method call will not be transformed. But this will still cause a call on the injected logger.</source>
          <target state="translated">여기 이름은 정보, 미세, 미세, 미세, 구성, 경고, 심각에 대한 자리 표시 자입니다. NAME은 대문자로 변환 된 이름입니다. 다른 것이 사용되면 런타임에 예외가 발생합니다. 표현식 exp가 상수이거나 변수 액세스 일 경우 메서드 호출은 변환되지 않습니다. 그러나 이것은 여전히 ​​삽입 된 로거에 대한 호출을 유발합니다.</target>
        </trans-unit>
        <trans-unit id="33eebf2412447da05840a6c8eb96fd539ce96dee" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;Family&lt;/code&gt; is our class under test and &lt;code&gt;Person&lt;/code&gt; is the collaborator. We are using normal Groovy property semantics here; hence the statement &lt;code&gt;father.first&lt;/code&gt; causes a call to &lt;code&gt;father.getFirst()&lt;/code&gt; to occur. For a complete list of features, see: &lt;a href=&quot;mockfor&quot;&gt;MockFor&lt;/a&gt;.</source>
          <target state="translated">여기에서 &lt;code&gt;Family&lt;/code&gt; 는 테스트중인 클래스이고 &lt;code&gt;Person&lt;/code&gt; 은 협력자입니다. 여기서는 일반적인 Groovy 속성 의미 체계를 사용합니다. 따라서 &lt;code&gt;father.first&lt;/code&gt; 문 은 &lt;code&gt;father.getFirst()&lt;/code&gt; 에 대한 호출 을 발생시킵니다. 전체 기능 목록은 &lt;a href=&quot;mockfor&quot;&gt;MockFor를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0068249f4298ba4b8cb950944bb5666562f37a15" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;Family&lt;/code&gt; is our class under test and &lt;code&gt;Person&lt;/code&gt; is the collaborator. We are using normal Groovy property semantics here; hence the statement &lt;code&gt;mother.last&lt;/code&gt; causes a call to &lt;code&gt;mother.getLast()&lt;/code&gt; to occur. The following features are supported:</source>
          <target state="translated">여기에서 &lt;code&gt;Family&lt;/code&gt; 는 테스트중인 클래스이고 &lt;code&gt;Person&lt;/code&gt; 은 협력자입니다. 여기서는 일반적인 Groovy 속성 의미 체계를 사용합니다. 따라서 &lt;code&gt;mother.last&lt;/code&gt; 문 은 &lt;code&gt;mother.getLast()&lt;/code&gt; 에 대한 호출 을 발생시킵니다. 다음 기능이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="3a750735f9dd5059970987198f4e24adb1303b69" translate="yes" xml:space="preserve">
          <source>Hook method to setup the GroovyScriptEngine to use.</source>
          <target state="translated">사용할 GroovyScriptEngine을 설정하는 후크 메서드입니다.</target>
        </trans-unit>
        <trans-unit id="557bb37db36ea1b9f3e09f6142ba1c0c6ef48cf7" translate="yes" xml:space="preserve">
          <source>Hook to allow derived classes to access the log</source>
          <target state="translated">파생 클래스가 로그에 액세스 할 수 있도록하는 후크</target>
        </trans-unit>
        <trans-unit id="42aa6177be434867ae51a0ddcdbd339e7c150075" translate="yes" xml:space="preserve">
          <source>Hook to allow derived classes to override behavior associated with extracting params from a GString.</source>
          <target state="translated">파생 클래스가 GString에서 매개 변수 추출과 관련된 동작을 재정의 할 수 있도록하는 후크입니다.</target>
        </trans-unit>
        <trans-unit id="d0f5ce21a0465fc3ed72d68900c5c2583bd65750" translate="yes" xml:space="preserve">
          <source>Hook to allow derived classes to override behavior associated with setting params for a prepared statement.</source>
          <target state="translated">파생 클래스가 준비된 문에 대한 매개 변수 설정과 관련된 동작을 재정의 할 수 있도록하는 후크입니다.</target>
        </trans-unit>
        <trans-unit id="163b9f2daeb8ed52a6a7c24ecac6c960628e1076" translate="yes" xml:space="preserve">
          <source>Hook to allow derived classes to override behavior associated with setting params for a prepared statement. Default behavior is to append the parameters to the given statement using &lt;code&gt;setObject&lt;/code&gt;.</source>
          <target state="translated">파생 클래스가 준비된 문에 대한 매개 변수 설정과 관련된 동작을 재정의 할 수 있도록하는 후크입니다. 기본 동작은 &lt;code&gt;setObject&lt;/code&gt; 를 사용하여 주어진 문에 매개 변수를 추가하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="8abb605b91bf3dd645006899f7cb959678a216e0" translate="yes" xml:space="preserve">
          <source>Hook to allow derived classes to override behavior associated with the parsing and indexing of parameters from a given sql statement.</source>
          <target state="translated">파생 클래스가 지정된 SQL 문에서 매개 변수의 구문 분석 및 인덱싱과 관련된 동작을 재정의 할 수 있도록하는 후크입니다.</target>
        </trans-unit>
        <trans-unit id="03c964c7bb8028d6ec12d052e6f3f38c90d760ef" translate="yes" xml:space="preserve">
          <source>Hook to allow derived classes to override list of result collection behavior.</source>
          <target state="translated">파생 클래스가 결과 수집 동작 목록을 재정의 할 수 있도록하는 후크입니다.</target>
        </trans-unit>
        <trans-unit id="47385c1ef384fe6d7b6374027599713cf51dd26e" translate="yes" xml:space="preserve">
          <source>Hook to allow derived classes to override list of result collection behavior. The default behavior is to return a list of GroovyRowResult objects corresponding to each row in the ResultSet.</source>
          <target state="translated">파생 클래스가 결과 수집 동작 목록을 재정의 할 수 있도록하는 후크입니다. 기본 동작은 ResultSet의 각 행에 해당하는 GroovyRowResult 개체 목록을 반환하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="3c170ec8c359e27ae40b22929c8c6d4ca2cca184" translate="yes" xml:space="preserve">
          <source>Hook to allow derived classes to override null handling.</source>
          <target state="translated">파생 클래스가 null 처리를 재정의 할 수 있도록하는 후크입니다.</target>
        </trans-unit>
        <trans-unit id="5af345513ecc35c6b880bdad5fb15f4dbe46262a" translate="yes" xml:space="preserve">
          <source>Hook to allow derived classes to override null handling. Default behavior is to replace ?'&quot;? references with NULLish</source>
          <target state="translated">파생 클래스가 null 처리를 재정의 할 수 있도록하는 후크입니다. 기본 동작은? ' &quot;? 참조를 NULL로 바꾸는 것입니다.</target>
        </trans-unit>
        <trans-unit id="deeeed053368e20a57e4b6d96719bdebf30fa4ee" translate="yes" xml:space="preserve">
          <source>Hook to allow derived classes to override sql generation from GStrings.</source>
          <target state="translated">파생 클래스가 GStrings에서 SQL 생성을 재정의 할 수 있도록하는 후크입니다.</target>
        </trans-unit>
        <trans-unit id="bfdfe397f860cdbc770460591d51b50488bdb138" translate="yes" xml:space="preserve">
          <source>Hook to allow derived classes to override where clause sniffing.</source>
          <target state="translated">파생 클래스가 where 절 스니핑을 재정의 할 수 있도록하는 후크입니다.</target>
        </trans-unit>
        <trans-unit id="957bb3dd3871ddf1a6ca5aaf6951df7947fa1727" translate="yes" xml:space="preserve">
          <source>Hook to allow derived classes to override where clause sniffing. Default behavior is to find the first 'where' keyword in the sql doing simple avoidance of the word 'where' within quotes.</source>
          <target state="translated">파생 클래스가 where 절 스니핑을 재정의 할 수 있도록하는 후크입니다. 기본 동작은 따옴표 안에 'where'라는 단어를 간단히 피하고 SQL에서 첫 번째 'where'키워드를 찾는 것입니다.</target>
        </trans-unit>
        <trans-unit id="bc8be380ed7c5196400ccbece94ca34ab1d0e1d5" translate="yes" xml:space="preserve">
          <source>How it works: The decorated list intercepts all calls to &lt;code&gt;getAt(index)&lt;/code&gt; and &lt;code&gt;get(index)&lt;/code&gt;. If an index greater than or equal to the current &lt;code&gt;size()&lt;/code&gt; is used, the list will grow automatically up to the specified index. Gaps will be filled by &lt;code&gt;null&lt;/code&gt;. If a default value should also be used to fill gaps instead of &lt;code&gt;null&lt;/code&gt;, use &lt;code&gt;withEagerDefault&lt;/code&gt;. If &lt;code&gt;getAt(index)&lt;/code&gt; or &lt;code&gt;get(index)&lt;/code&gt; are called and a null value is found, it is assumed that the null value was a consequence of an earlier grow list operation and the &lt;code&gt;init&lt;/code&gt; Closure is called to populate the value.</source>
          <target state="translated">작동 &lt;code&gt;getAt(index)&lt;/code&gt; : 데코 레이팅 된 목록은 getAt (index) 및 &lt;code&gt;get(index)&lt;/code&gt; 모든 호출을 차단합니다 . 현재 &lt;code&gt;size()&lt;/code&gt; 보다 크거나 같은 인덱스 가 사용되면 목록은 지정된 인덱스까지 자동으로 증가합니다. &lt;code&gt;null&lt;/code&gt; 은 null 로 채워집니다 . &lt;code&gt;null&lt;/code&gt; 대신 공백을 채우기 위해 기본값을 사용해야하는 경우 &lt;code&gt;withEagerDefault&lt;/code&gt; 를 사용 하십시오 . 경우 &lt;code&gt;getAt(index)&lt;/code&gt; 또는 &lt;code&gt;get(index)&lt;/code&gt; 라고하며 널 (null) 값이 발견, 널 값이 이전의 성장 목록 작업의 결과와 것을 가정한다 &lt;code&gt;init&lt;/code&gt; 폐쇄가 값을 채우는 데라고는.</target>
        </trans-unit>
        <trans-unit id="a6265ad045882bcf65ad36de46a5365ec0c9beea" translate="yes" xml:space="preserve">
          <source>How it works: The decorated list intercepts all calls to &lt;code&gt;getAt(index)&lt;/code&gt; and &lt;code&gt;get(index)&lt;/code&gt;. If an index greater than or equal to the current &lt;code&gt;size()&lt;/code&gt; is used, the list will grow automatically up to the specified index. Gaps will be filled by calling the &lt;code&gt;init&lt;/code&gt; Closure. If generating a default value is a costly operation consider using &lt;code&gt;withLazyDefault&lt;/code&gt;.</source>
          <target state="translated">작동 &lt;code&gt;getAt(index)&lt;/code&gt; : 데코 레이팅 된 목록은 getAt (index) 및 &lt;code&gt;get(index)&lt;/code&gt; 모든 호출을 차단합니다 . 현재 &lt;code&gt;size()&lt;/code&gt; 보다 크거나 같은 인덱스 가 사용되면 목록은 지정된 인덱스까지 자동으로 증가합니다. &lt;code&gt;init&lt;/code&gt; Closure 를 호출하면 간격이 채워집니다 . 기본값 생성이 비용이 많이 드는 작업 인 경우 &lt;code&gt;withLazyDefault&lt;/code&gt; 를 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="49e5f8dc37e91a0bbba74cf26874f8074a84e393" translate="yes" xml:space="preserve">
          <source>How many arguments this option has represented as a String.</source>
          <target state="translated">이 옵션이 문자열로 표현한 인수 수입니다.</target>
        </trans-unit>
        <trans-unit id="6083750120522c896c288699d5774a52f6d7a729" translate="yes" xml:space="preserve">
          <source>How many arguments this option has represented as a String. Only allowed for array-typed arguments. Overrides &lt;code&gt;numberOfArguments&lt;/code&gt; if set. The special values of '+' means one or more and '*' as 0 or more.</source>
          <target state="translated">이 옵션이 문자열로 표현한 인수 수입니다. 배열 유형 인수에만 허용됩니다. 설정된 경우 &lt;code&gt;numberOfArguments&lt;/code&gt; 를 재정의 합니다. '+'의 특수 값은 하나 이상을 의미하고 '*'는 0 이상을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="9e0576c47d83f1ed4a8fd87be8e6dc45b05f06e1" translate="yes" xml:space="preserve">
          <source>How many arguments this option has.</source>
          <target state="translated">이 옵션에는 몇 개의 인수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="92f83d4d2c6d023193b71d61aa6ce36f53260c9a" translate="yes" xml:space="preserve">
          <source>How many arguments this option has. A value greater than 1 is only allowed for array-typed arguments. Ignored for boolean options which are assumed to have a default of 0 or if &lt;code&gt;numberOfArgumentsString&lt;/code&gt; is set.</source>
          <target state="translated">이 옵션에는 몇 개의 인수가 있습니다. 1보다 큰 값은 배열 유형 인수에만 허용됩니다. 기본값이 0 인 것으로 간주되는 부울 옵션 또는 &lt;code&gt;numberOfArgumentsString&lt;/code&gt; 이 설정된 경우 무시 됩니다.</target>
        </trans-unit>
        <trans-unit id="5fd94ef08224c6200790e4a482e323959218c820" translate="yes" xml:space="preserve">
          <source>Hunt for the script file by calling searchForGroovyScriptFile(String).</source>
          <target state="translated">searchForGroovyScriptFile (String)을 호출하여 스크립트 파일을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="2530c52218b9f3255d7229299c3a4da99546fd74" translate="yes" xml:space="preserve">
          <source>Hyphens at the start or end of sourceSet or replacementSet are treated as normal hyphens and are not considered to be part of a range specification. Similarly, a hyphen immediately after an earlier range is treated as a normal hyphen. So, '-x', 'x-' have no ranges while 'a-c-e' has the range 'a-c' plus the '-' character plus the 'e' character.</source>
          <target state="translated">sourceSet 또는 replacementSet의 시작 또는 끝에있는 하이픈은 일반 하이픈으로 처리되며 범위 사양의 일부로 간주되지 않습니다. 마찬가지로 이전 범위 바로 뒤의 하이픈은 일반 하이픈으로 처리됩니다. 따라서 '-x', 'x-'에는 범위가 없지만 'ace'에는 범위 'ac'더하기 '-'문자와 'e'문자가 있습니다.</target>
        </trans-unit>
        <trans-unit id="481bdbd566bdb153feaaee549ccd93b273c12162" translate="yes" xml:space="preserve">
          <source>I don't know how many days in a month unless I know the name of the month (and if it's a leap year if the month is February)</source>
          <target state="translated">월 이름을 모르면 한 달에 몇 일인지 모르겠습니다 (2 월이면 윤년 인 경우).</target>
        </trans-unit>
        <trans-unit id="570097fca9261245d59a01adc60556e3f605688c" translate="yes" xml:space="preserve">
          <source>I don't know how many days in a year unless I know if it's a leap year or not.</source>
          <target state="translated">윤년인지 아닌지 알지 못하면 1 년에 몇 일인지 모르겠습니다.</target>
        </trans-unit>
        <trans-unit id="fa6df889286973cac5d2338ddc245bc54677f4c8" translate="yes" xml:space="preserve">
          <source>I've split out constructors separately; we could maybe integrate back into variableDefinitions later on if we maybe simplified 'def' to be a type declaration?</source>
          <target state="translated">생성자를 따로 분리했습니다. 'def'를 형식 선언으로 단순화하면 나중에 variableDefinitions에 다시 통합 할 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="c6a18dbdcb7e3f9a93fd907dc091279b10c4053f" translate="yes" xml:space="preserve">
          <source>IFileNameFinder</source>
          <target state="translated">IFileNameFinder</target>
        </trans-unit>
        <trans-unit id="f7784d0b19464062418f9e2df5195aafadaec560" translate="yes" xml:space="preserve">
          <source>IGroovyClassOperation</source>
          <target state="translated">IGroovyClassOperation</target>
        </trans-unit>
        <trans-unit id="319a21ad8b671794467e4935946062d4d1e04338" translate="yes" xml:space="preserve">
          <source>IOException</source>
          <target state="translated">IOException</target>
        </trans-unit>
        <trans-unit id="af8054e60e63cbcd7d22e3588e999c473d5170a9" translate="yes" xml:space="preserve">
          <source>IOException An IO exception from the parser, possibly from a byte stream or character stream supplied by the application.</source>
          <target state="translated">IOException 파서의 IO 예외, 가능하면 응용 프로그램에서 제공하는 바이트 스트림 또는 문자 스트림에서.</target>
        </trans-unit>
        <trans-unit id="bb2c57248f1cfda0851f69e8fda8bc55cd3f3e29" translate="yes" xml:space="preserve">
          <source>IOException if &lt;code&gt;self&lt;/code&gt; is not readable</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 를 읽을 수없는 경우 IOException</target>
        </trans-unit>
        <trans-unit id="2de304c02aef07d80da93a49a0bb0b0a56210596" translate="yes" xml:space="preserve">
          <source>IOException if File object specified does not exist</source>
          <target state="translated">지정된 파일 객체가없는 경우 IOException</target>
        </trans-unit>
        <trans-unit id="a81a2a9bd97d43eeee50fdea2622f599f4c7a152" translate="yes" xml:space="preserve">
          <source>IOException if an I/O error occurs while creating the input stream</source>
          <target state="translated">입력 스트림을 생성하는 동안 I / O 오류가 발생하면 IOException</target>
        </trans-unit>
        <trans-unit id="9016029862d523792a41e66df49e2ab478b5beb0" translate="yes" xml:space="preserve">
          <source>IOException if an I/O error occurs.</source>
          <target state="translated">I / O 오류가 발생하면 IOException입니다.</target>
        </trans-unit>
        <trans-unit id="31c78d56260fb2549a59806c9e8d30df48cfbdad" translate="yes" xml:space="preserve">
          <source>IOException if an IO error occurs</source>
          <target state="translated">IO 오류가 발생한 경우 IOException</target>
        </trans-unit>
        <trans-unit id="6444994a22d683c483d26f44cfdf4cdc6ce94f4f" translate="yes" xml:space="preserve">
          <source>IOException if an IO exception occurs</source>
          <target state="translated">IO 예외가 발생하는 경우 IOException</target>
        </trans-unit>
        <trans-unit id="21a2996f1dac7f11c748670809e38bad18c3069c" translate="yes" xml:space="preserve">
          <source>IOException if an IOException occurs</source>
          <target state="translated">IOException이 발생하는 경우 IOException</target>
        </trans-unit>
        <trans-unit id="5e444b0e26e3aba34793725e201cd9d8eb37db4a" translate="yes" xml:space="preserve">
          <source>IOException if an IOException occurs.</source>
          <target state="translated">IOException이 발생하면 IOException입니다.</target>
        </trans-unit>
        <trans-unit id="dbc7c2323635b7481a19aefcc6c5256274cfba52" translate="yes" xml:space="preserve">
          <source>IOException if an error occurred while outputting data to the writer</source>
          <target state="translated">기록기로 데이터를 출력하는 동안 오류가 발생한 경우 IOException</target>
        </trans-unit>
        <trans-unit id="729ef0a896110411f741eaeaa0a2769d504db348" translate="yes" xml:space="preserve">
          <source>IOException if an input or output error occurs while the servlet is handling the HTTP request</source>
          <target state="translated">서블릿이 HTTP 요청을 처리하는 동안 입력 또는 출력 오류가 발생하는 경우 IOException</target>
        </trans-unit>
        <trans-unit id="dc4439fe60d7bc5dd5de80cf57c6a82362585a0f" translate="yes" xml:space="preserve">
          <source>IOException if an issue arises opening and reading the file.</source>
          <target state="translated">파일을 열고 읽는 데 문제가 발생하면 IOException이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="1680b390bb0c479ca9c55f76eadc59d42776874c" translate="yes" xml:space="preserve">
          <source>IOException if error occurs on underlying Writer</source>
          <target state="translated">기본 작성기에서 오류가 발생한 경우 IOException</target>
        </trans-unit>
        <trans-unit id="c947d9d7075c4f149fcfe8a57576790ab82f7a45" translate="yes" xml:space="preserve">
          <source>IOException if it is not possible to open an connection for the given source</source>
          <target state="translated">주어진 소스에 대한 연결을 열 수없는 경우 IOException</target>
        </trans-unit>
        <trans-unit id="7123874a45a1a13b1ae5e467d117664c46c51e1b" translate="yes" xml:space="preserve">
          <source>IOException if reading from this URL is impossible</source>
          <target state="translated">이 URL에서 읽을 수없는 경우 IOException</target>
        </trans-unit>
        <trans-unit id="b585f7da4f232edb9e98b39e191378a9d1d76e98" translate="yes" xml:space="preserve">
          <source>IOException if reading or parsing the contents of the stream fails</source>
          <target state="translated">스트림의 내용을 읽거나 구문 분석하지 못한 경우 IOException</target>
        </trans-unit>
        <trans-unit id="33be085d88045ec9ac6f9d5cc14527305e5aea00" translate="yes" xml:space="preserve">
          <source>IOException if the source is not readable</source>
          <target state="translated">소스를 읽을 수없는 경우 IOException</target>
        </trans-unit>
        <trans-unit id="ab872db00b9a76825c74e6082492bc47a0181dcd" translate="yes" xml:space="preserve">
          <source>IOGroovyMethods#withStream(java.io.OutputStream, groovy.lang.Closure)</source>
          <target state="translated">IOGroovyMethods#withStream(java.io.OutputStream, groovy.lang.Closure)</target>
        </trans-unit>
        <trans-unit id="604450c0f1409c4b9caad0f89e5807db8562f55a" translate="yes" xml:space="preserve">
          <source>IOGroovyMethods.eachByte</source>
          <target state="translated">IOGroovyMethods.eachByte</target>
        </trans-unit>
        <trans-unit id="a07051d03eb862cd30fc8c0560d57db6c0cedf47" translate="yes" xml:space="preserve">
          <source>IOGroovyMethods.eachLine</source>
          <target state="translated">IOGroovyMethods.eachLine</target>
        </trans-unit>
        <trans-unit id="28bfb1c375b3df59599ceec0e64dc33dd8d595bb" translate="yes" xml:space="preserve">
          <source>IOGroovyMethods.eachObject</source>
          <target state="translated">IOGroovyMethods.eachObject</target>
        </trans-unit>
        <trans-unit id="cd1456866b84be01465b2b25381128c10253020d" translate="yes" xml:space="preserve">
          <source>IOGroovyMethods.filterLine</source>
          <target state="translated">IOGroovyMethods.filterLine</target>
        </trans-unit>
        <trans-unit id="f9717f16f5b1ce0118028237ae24db896fd16fd9" translate="yes" xml:space="preserve">
          <source>IOGroovyMethods.readLines</source>
          <target state="translated">IOGroovyMethods.readLines</target>
        </trans-unit>
        <trans-unit id="747c7db6469155967248b0032590fc6fcc6b2145" translate="yes" xml:space="preserve">
          <source>IOGroovyMethods.splitEachLine</source>
          <target state="translated">IOGroovyMethods.splitEachLine</target>
        </trans-unit>
        <trans-unit id="5e5c82ef0ddae99974ce6622b22b0d4c673965fd" translate="yes" xml:space="preserve">
          <source>IOGroovyMethods.withCloseable</source>
          <target state="translated">IOGroovyMethods.withCloseable</target>
        </trans-unit>
        <trans-unit id="324ef6ca8f847b85eb566ed00d45b5ff9ef4355b" translate="yes" xml:space="preserve">
          <source>IOGroovyMethods.withStream</source>
          <target state="translated">IOGroovyMethods.withStream</target>
        </trans-unit>
        <trans-unit id="8c6dbbfd6a7457dbf30c41d9430ab586ca61ce98" translate="yes" xml:space="preserve">
          <source>IOW, if self is before then the result is a negative value.</source>
          <target state="translated">IOW, self가 그 이전이면 결과는 음수 값입니다.</target>
        </trans-unit>
        <trans-unit id="13ae91c047948d58175eeed72436686a416a2bd8" translate="yes" xml:space="preserve">
          <source>IPrimaryClassNodeOperation</source>
          <target state="translated">IPrimaryClassNodeOperation</target>
        </trans-unit>
        <trans-unit id="2827acacda25593d432db89f7d10b6faf7781d28" translate="yes" xml:space="preserve">
          <source>ISourceUnitOperation</source>
          <target state="translated">ISourceUnitOperation</target>
        </trans-unit>
        <trans-unit id="62c939e74447ccafb2c3d7f88939b78b1a4282a5" translate="yes" xml:space="preserve">
          <source>Idea copied from HtmlUnit (many thanks to Marc Guillemot). Future versions maybe available in the JUnit distribution.</source>
          <target state="translated">HtmlUnit에서 아이디어를 복사했습니다 (Marc Guillemot 덕분에 많이). 향후 버전은 JUnit 배포판에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7bdf629e3211995680b7bd6208e387293f7b3fb1" translate="yes" xml:space="preserve">
          <source>IdentifierCompleter</source>
          <target state="translated">IdentifierCompleter</target>
        </trans-unit>
        <trans-unit id="809445acd133835bb504c0b08ac65317699dbd33" translate="yes" xml:space="preserve">
          <source>IdentifierCompletor</source>
          <target state="translated">IdentifierCompletor</target>
        </trans-unit>
        <trans-unit id="0ee8e3fbc3a91775dc8cee1e4c47932adcf00b19" translate="yes" xml:space="preserve">
          <source>Identifies a variable to be expanded into the sql string rather than representing a placeholder.</source>
          <target state="translated">자리 표시자를 나타내는 대신 SQL 문자열로 확장 할 변수를 식별합니다.</target>
        </trans-unit>
        <trans-unit id="db86701ab5e0f8cefca1421dc5eaecdd6b8fdcd5" translate="yes" xml:space="preserve">
          <source>Identifies the Closure where the mocked collaborator behavior will be applied and verified.</source>
          <target state="translated">모의 공동 작업자 동작이 적용되고 확인되는 클로저를 식별합니다.</target>
        </trans-unit>
        <trans-unit id="7f4016481c56c661eb920356ab533024815a03de" translate="yes" xml:space="preserve">
          <source>Identity check.</source>
          <target state="translated">신원 확인.</target>
        </trans-unit>
        <trans-unit id="e5b0f605cfd3b1809f02d214d14b90d0976b5360" translate="yes" xml:space="preserve">
          <source>Identity check. Since == is overridden in Groovy with the meaning of equality we need some fallback to check for object identity. Invoke using the 'is' method, like so: &lt;code&gt;def same = this.is(that)&lt;/code&gt;</source>
          <target state="translated">신원 확인. ==는 평등의 의미로 Groovy에서 재정의되었으므로 개체 ID를 확인하기 위해 일부 폴 백이 필요합니다. 다음과 같이 'is'메서드를 사용하여 호출합니다. &lt;code&gt;def same = this.is(that)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ac6e6d9ec43d8b050b412fdbec16bdabc675ddc0" translate="yes" xml:space="preserve">
          <source>Identity conversion which returns Boolean.TRUE for a true Boolean and Boolean.FALSE for a false Boolean.</source>
          <target state="translated">참 부울에 대해 Boolean.TRUE를 반환하고 거짓 부울에 대해 Boolean.FALSE를 반환하는 ID 변환.</target>
        </trans-unit>
        <trans-unit id="b0bbc17f5eb8f149cb15a19c0c9cc72f83203dc9" translate="yes" xml:space="preserve">
          <source>If '&lt;code&gt;properties&lt;/code&gt;' is supplied, neither '&lt;code&gt;user&lt;/code&gt;' nor '&lt;code&gt;password&lt;/code&gt;' should be supplied.</source>
          <target state="translated">' &lt;code&gt;properties&lt;/code&gt; '가 제공되면 ' &lt;code&gt;user&lt;/code&gt; '또는 ' &lt;code&gt;password&lt;/code&gt; '를 제공 하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="fbe4d1ccad1b32966f8eee3ebafa4fc5886d6403" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;autoDelegate&lt;/code&gt; is false (the default), all parameters are treated as if they were named parameters</source>
          <target state="translated">경우 &lt;code&gt;autoDelegate&lt;/code&gt; 가 false (기본값)가 매개 변수를 명명 된 것처럼, 모든 매개 변수 처리됩니다</target>
        </trans-unit>
        <trans-unit id="9641390fd88b1b5f45e1aa68e88a69ce90e1ff9f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;autoDelegate&lt;/code&gt; is true, the first parameters is treated as if it was a delegate parameter</source>
          <target state="translated">경우 &lt;code&gt;autoDelegate&lt;/code&gt; 이 사실은 대리인 파라미터 것처럼, 제 파라미터가 처리 될 때</target>
        </trans-unit>
        <trans-unit id="1be8e0e64157a1559562c09edb701f59adcaba00" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;builder&lt;/code&gt; is null a new instance with default capacity will be created.</source>
          <target state="translated">경우 &lt;code&gt;builder&lt;/code&gt; 입니다 기본 용량 널 (null) 새로운 인스턴스가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="2cb00889bfb942130788ad9b678e16c2e1e3546a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;exception&lt;/code&gt; is defined, &lt;code&gt;message&lt;/code&gt; can be used to specify the exception message.</source>
          <target state="translated">경우 &lt;code&gt;exception&lt;/code&gt; 정의되고, &lt;code&gt;message&lt;/code&gt; 예외 메시지를 지정하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c88f2bd0beac01bd9b32c898a716a52b9f331226" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;exception&lt;/code&gt; is defined, &lt;code&gt;message&lt;/code&gt; can be used to specify the exception message. Will be ignored if &lt;code&gt;code&lt;/code&gt; is defined or &lt;code&gt;exception&lt;/code&gt; isn't defined.</source>
          <target state="translated">경우 &lt;code&gt;exception&lt;/code&gt; 정의되고, &lt;code&gt;message&lt;/code&gt; 예외 메시지를 지정하는 데 사용할 수 있습니다. &lt;code&gt;code&lt;/code&gt; 가 정의되었거나 &lt;code&gt;exception&lt;/code&gt; 가 정의되지 않은 경우 무시됩니다 .</target>
        </trans-unit>
        <trans-unit id="68878c4d6a62426875bab1f5c5b269b867215d25" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;lazyDefaultValues&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; any gaps when growing the list are filled with nulls. Subsequent attempts to retrieve items from the list from those gap index values will, upon finding null, call the &lt;code&gt;initClosure&lt;/code&gt; to populate the list for the given list value. Hence, when in this mode, nulls cannot be stored in this list. If &lt;code&gt;lazyDefaultValues&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; any gaps when growing the list are filled eagerly by calling the &lt;code&gt;initClosure&lt;/code&gt; for all gap indexes during list growth. No calls to &lt;code&gt;initClosure&lt;/code&gt; are made except during list growth and it is ok to store null values in the list when in this mode.</source>
          <target state="translated">경우 &lt;code&gt;lazyDefaultValues&lt;/code&gt; 이 있다 &lt;code&gt;true&lt;/code&gt; 목록을 성장의 틈새는 널 (null)로 채워져있다. 이후에 해당 갭 인덱스 값의 목록에서 항목을 검색하려는 시도는 null을 찾으면 &lt;code&gt;initClosure&lt;/code&gt; 를 호출 하여 지정된 목록 값에 대한 목록을 채 웁니다. 따라서이 모드에서는이 목록에 null을 저장할 수 없습니다. 경우 &lt;code&gt;lazyDefaultValues&lt;/code&gt; 이 있습니다 &lt;code&gt;false&lt;/code&gt; 목록을 성장의 틈새는 호출하여 열심히 가득 &lt;code&gt;initClosure&lt;/code&gt; 을 목록 성장하는 동안 모든 갭 인덱스에 대해. 목록이 증가하는 동안을 제외하고는 &lt;code&gt;initClosure&lt;/code&gt; 에 대한 호출이 수행 되지 않으며이 모드에있을 때 목록에 null 값을 저장하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="e6dcd9d8c8040a9c5af1f0fecd12a54adeb027a0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;mustExist&lt;/code&gt; is true and the normal variable doesn't exist, then this method will throw a GroovyBugError. It is not the intention of this method to let this happen! And the exception should not be used for flow control - it is just acting as an assertion. If the exception is thrown then it indicates a bug in the class using CompileStack. This method can also not be used to return a temporary variable. Temporary variables are not normal variables.</source>
          <target state="translated">경우 &lt;code&gt;mustExist&lt;/code&gt; 가 사실이고 정상적인 변수가 존재하지 않는,이 방법은 GroovyBugError 발생합니다. 이것이 일어나도록하는 것은이 방법의 의도가 아닙니다! 그리고 예외는 흐름 제어에 사용되어서는 안됩니다. 단지 어설 션 역할을합니다. 예외가 발생하면 CompileStack을 사용하는 클래스의 버그를 나타냅니다. 이 메서드는 임시 변수를 반환하는데도 사용할 수 없습니다. 임시 변수는 일반 변수가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="aaa89ce9d01303c26c9df2683b05b4b22d3a0dfb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;optionalArg=true&lt;/code&gt;, then &lt;code&gt;args=3&lt;/code&gt; is the equivalent of &lt;code&gt;arity=&quot;0..3&quot;&lt;/code&gt; in picocli. When &lt;code&gt;optionalArg=true&lt;/code&gt;, &lt;code&gt;args='+'&lt;/code&gt; is equivalent to &lt;code&gt;arity=&quot;0..*&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;optionalArg=true&lt;/code&gt; 다음 &lt;code&gt;args=3&lt;/code&gt; 의 것과 동일 &lt;code&gt;arity=&quot;0..3&quot;&lt;/code&gt; picocli에서이. 경우 &lt;code&gt;optionalArg=true&lt;/code&gt; , &lt;code&gt;args='+'&lt;/code&gt; 에 해당 &lt;code&gt;arity=&quot;0..*&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cd46b28e6ad8a2e6b9b5b8ec1f915585316dafca" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;response.getWriter()&lt;/code&gt; is called directly (without using out), then a write method call on 'sout' will not cause the &lt;code&gt;IllegalStateException&lt;/code&gt;, but it will still be invalid. It is the responsibility of the user of this class, to not to mix these different usage styles. The same applies to calling &lt;code&gt;response.getOutputStream()&lt;/code&gt; and using 'out' or 'html'.</source>
          <target state="translated">경우 &lt;code&gt;response.getWriter()&lt;/code&gt; 'SOUT'에, 다음 쓰기 메서드 호출 (교체 아웃 사용하지 않고) 직접 호출되는 원인이되지 않습니다 &lt;code&gt;IllegalStateException&lt;/code&gt; 이 있지만, 그것은 여전히 유효 할 것이다. 이러한 서로 다른 사용 스타일을 혼합하지 않는 것은이 클래스의 사용자의 책임입니다. &lt;code&gt;response.getOutputStream()&lt;/code&gt; 호출 및 'out'또는 'html'사용 에도 동일하게 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="940189632ab709388054fed597b891395031b506" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, this adds a method &lt;code&gt;copyWith&lt;/code&gt; which takes a Map of new property values and returns a new instance of the Immutable class with these values set.</source>
          <target state="translated">경우 &lt;code&gt;true&lt;/code&gt; ,이 방법의 추가 &lt;code&gt;copyWith&lt;/code&gt; 새 속성 값의지도를 받아 설정이 값으로 불변 클래스의 새 인스턴스를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="629e0634b773d0b4eaa623c6a0e1247f18871be4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, this adds a method &lt;code&gt;copyWith&lt;/code&gt; which takes a Map of new property values and returns a new instance of the Immutable class with these values set. Example:</source>
          <target state="translated">경우 &lt;code&gt;true&lt;/code&gt; ,이 방법의 추가 &lt;code&gt;copyWith&lt;/code&gt; 새 속성 값의지도를 받아 설정이 값으로 불변 클래스의 새 인스턴스를 반환합니다. 예:</target>
        </trans-unit>
        <trans-unit id="d5cf85387dfd98e168be29f06d68dbea93608d91" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, this option must be specified on the command line, or an exception is thrown.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 이면이 옵션을 명령 줄에 지정해야합니다. 그렇지 않으면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="493c10ab345693291a4f685ee3d8ac2b7eaf7829" translate="yes" xml:space="preserve">
          <source>If US-ASCII is recognized, enforce to return the default encoding, rather than US-ASCII.</source>
          <target state="translated">US-ASCII가 인식되면 US-ASCII가 아닌 기본 인코딩을 반환하도록 강제합니다.</target>
        </trans-unit>
        <trans-unit id="78368e20d6221f338d8e9f6469d0e719dba5429c" translate="yes" xml:space="preserve">
          <source>If US-ASCII is recognized, enforce to return the default encoding, rather than US-ASCII. It might be a file without any special character in the range 128-255, but that may be or become a file encoded with the default &lt;code&gt;charset&lt;/code&gt; rather than US-ASCII.</source>
          <target state="translated">US-ASCII가 인식되면 US-ASCII가 아닌 기본 인코딩을 반환하도록 강제합니다. 128-255 범위의 특수 문자가없는 파일 일 수 있지만 US-ASCII가 아닌 기본 &lt;code&gt;charset&lt;/code&gt; 으로 인코딩 된 파일이거나 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ee40f66bc8eef2ff3bbab44b379b11be2ac312f6" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;bindable&quot;&gt;Bindable&lt;/a&gt; annotation is detected it also adds support similar to what &lt;a href=&quot;bindableasttransformation&quot;&gt;BindableASTTransformation&lt;/a&gt; would do.</source>
          <target state="translated">경우 &lt;a href=&quot;bindable&quot;&gt;바인딩&lt;/a&gt; 주석이 그것을 감지 또한 것과 유사한 지원이 추가 &lt;a href=&quot;bindableasttransformation&quot;&gt;BindableASTTransformation이&lt;/a&gt; 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="00e7d1b673d879df7d885dfa5637d643507faec6" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;vetoable&quot;&gt;Vetoable&lt;/a&gt; annotation is detected it does nothing and lets the &lt;a href=&quot;vetoableasttransformation&quot;&gt;VetoableASTTransformation&lt;/a&gt; handle all the changes.</source>
          <target state="translated">경우 &lt;a href=&quot;vetoable&quot;&gt;거부의&lt;/a&gt; 주석이 발견은 아무것도하지 않습니다하고 있습니다 &lt;a href=&quot;vetoableasttransformation&quot;&gt;VetoableASTTransformation의&lt;/a&gt; 모든 변경 사항을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="d5c69f733688abdc090d4f2396adbb581e5bd455" translate="yes" xml:space="preserve">
          <source>If a capture group is optional, and doesn't match, then the corresponding value for that capture group passed to the closure will be null as illustrated here:</source>
          <target state="translated">캡처 그룹이 선택 사항이고 일치하지 않는 경우 클로저에 전달 된 해당 캡처 그룹의 해당 값은 다음과 같이 null이됩니다.</target>
        </trans-unit>
        <trans-unit id="90b770581b40db979b640a8dd650ff56c15547bf" translate="yes" xml:space="preserve">
          <source>If a dot is followed by a parenthesized or quoted expression, the member is computed dynamically, and the member selection is done only at runtime.</source>
          <target state="translated">점 뒤에 괄호 또는 따옴표로 묶인식이 오면 멤버가 동적으로 계산되고 멤버 선택은 런타임에만 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="f4503683c4aae2db746405121221f531a66a727b" translate="yes" xml:space="preserve">
          <source>If a dot is followed by a parenthesized or quoted expression, the member is computed dynamically, and the member selection is done only at runtime. This forces a statically unchecked member access.</source>
          <target state="translated">점 뒤에 괄호 또는 따옴표로 묶인식이 오면 멤버가 동적으로 계산되고 멤버 선택은 런타임에만 수행됩니다. 이것은 정적으로 확인되지 않은 멤버 액세스를 강제합니다.</target>
        </trans-unit>
        <trans-unit id="3b41f55c2946e3637ea992f39e08a252a7adb4e4" translate="yes" xml:space="preserve">
          <source>If a match is found the error message associated with the matching exception is returned. If no match was found the method will fail.</source>
          <target state="translated">일치하는 항목이 발견되면 일치하는 예외와 관련된 오류 메시지가 반환됩니다. 일치하는 항목이 없으면 메서드가 실패합니다.</target>
        </trans-unit>
        <trans-unit id="6586d27c39a3152cb046c7bbf3ad5494dc9e8c80" translate="yes" xml:space="preserve">
          <source>If a match is found, the matching exception is returned otherwise the method will fail.</source>
          <target state="translated">일치하는 항목이 있으면 일치하는 예외가 반환됩니다. 그렇지 않으면 메서드가 실패합니다.</target>
        </trans-unit>
        <trans-unit id="bb7e2e1b63f36bbc6d69bc624993c88bcba256bd" translate="yes" xml:space="preserve">
          <source>If a method call returns a parameterized type, then we can perform additional inference on the return type, so that the type gets actual type parameters.</source>
          <target state="translated">메서드 호출이 매개 변수화 된 유형을 반환하는 경우 반환 유형에 대해 추가 추론을 수행하여 유형이 실제 유형 매개 변수를 가져 오도록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e4563bd31d34a89cfef32b95992399a15e933223" translate="yes" xml:space="preserve">
          <source>If a method call returns a parameterized type, then we can perform additional inference on the return type, so that the type gets actual type parameters. For example, the method Arrays.asList(T...) is generified with type T which can be deduced from actual type arguments.</source>
          <target state="translated">메서드 호출이 매개 변수화 된 유형을 반환하는 경우 반환 유형에 대해 추가 추론을 수행하여 유형이 실제 유형 매개 변수를 가져 오도록 할 수 있습니다. 예를 들어 Arrays.asList (T ...) 메서드는 실제 형식 인수에서 추론 할 수있는 T 형식으로 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="87b9c05cf2362f9aae014be5a15cfca3ab208d2c" translate="yes" xml:space="preserve">
          <source>If a method with the given name and parameters is already defined then it is returned otherwise the given method is added to this node.</source>
          <target state="translated">주어진 이름과 매개 변수를 가진 메소드가 이미 정의되어 있으면 반환됩니다. 그렇지 않으면 주어진 메소드가이 노드에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="d724b42c340749475f71a55e82c0df0cee2cc938" translate="yes" xml:space="preserve">
          <source>If a method with the given name and parameters is already defined then it is returned otherwise the given method is added to this node. This method is useful for default method adding like getProperty() or invokeMethod() where there may already be a method defined in a class and so the default implementations should not be added if already present.</source>
          <target state="translated">주어진 이름과 매개 변수를 가진 메소드가 이미 정의되어 있으면 반환됩니다. 그렇지 않으면 주어진 메소드가이 노드에 추가됩니다. 이 메서드는 getProperty () 또는 invokeMethod ()와 같은 기본 메서드 추가에 유용합니다. 여기서 클래스에 이미 정의 된 메서드가있을 수 있으므로 기본 구현이 이미있는 경우 추가하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="8cc5e5d09a808408d257fb7d6a4e83a2d943c79c" translate="yes" xml:space="preserve">
          <source>If a property with a user defined setter method is annotated the code block is wrapped with the needed code to fire off the event.</source>
          <target state="translated">사용자 정의 setter 메서드가있는 속성에 주석이 추가되면 코드 블록이 이벤트를 발생시키는 데 필요한 코드로 래핑됩니다.</target>
        </trans-unit>
        <trans-unit id="74b17e55582302b1fb390bc11397777dfd6afe3d" translate="yes" xml:space="preserve">
          <source>If a value is present in the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html&quot;&gt;Optional&lt;/a&gt;, returns a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html&quot;&gt;Stream&lt;/a&gt; with the value as its source or else an empty stream.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html&quot;&gt;Optional&lt;/a&gt; 에 값이있는 경우 값이 소스 인 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html&quot;&gt;Stream&lt;/a&gt; 을 반환 하거나 빈 스트림을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="ab8bb890b0e9914e1e0b2838b7f3d03cda85ed1b" translate="yes" xml:space="preserve">
          <source>If a value is present in the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/OptionalDouble.html&quot;&gt;OptionalDouble&lt;/a&gt;, returns a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/DoubleStream.html&quot;&gt;DoubleStream&lt;/a&gt; with the value as its source or else an empty stream.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/OptionalDouble.html&quot;&gt;OptionalDouble&lt;/a&gt; 에 값이 있으면 값을 소스로 사용 하는 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/DoubleStream.html&quot;&gt;DoubleStream&lt;/a&gt; 을 반환 하거나 그렇지 않으면 빈 스트림을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="6f85fc39b5b8281b592e05f35c750a34edc95c8f" translate="yes" xml:space="preserve">
          <source>If a value is present in the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/OptionalInt.html&quot;&gt;OptionalInt&lt;/a&gt;, returns an &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html&quot;&gt;IntStream&lt;/a&gt; with the value as its source or else an empty stream.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/OptionalInt.html&quot;&gt;OptionalInt&lt;/a&gt; 에 값이있는 경우 해당 값을 소스로 사용하거나 빈 스트림 인 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html&quot;&gt;IntStream&lt;/a&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="554eb4fd4592493a71ca79163c940e2fd95f916a" translate="yes" xml:space="preserve">
          <source>If a value is present in the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/OptionalLong.html&quot;&gt;OptionalLong&lt;/a&gt;, returns a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/LongStream.html&quot;&gt;LongStream&lt;/a&gt; with the value as its source or else an empty stream.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/OptionalLong.html&quot;&gt;OptionalLong&lt;/a&gt; 에 값이있는 경우 값이 소스 인 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/LongStream.html&quot;&gt;LongStream&lt;/a&gt; 또는 빈 스트림을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="47ac1fcf84d1d229cb530849c7c8be6fbf268318" translate="yes" xml:space="preserve">
          <source>If a value is present in the &lt;code&gt;OptionalDouble&lt;/code&gt;, returns an &lt;code&gt;Optional&lt;/code&gt; consisting of the result of applying the given function to the value or else empty.</source>
          <target state="translated">값이 존재하면 &lt;code&gt;OptionalDouble&lt;/code&gt; , 반환 &lt;code&gt;Optional&lt;/code&gt; 값 또는 다른 빈에 주어진 함수를 적용한 결과로 구성.</target>
        </trans-unit>
        <trans-unit id="6642e96a6015fdcad698486be3721a989ddfc435" translate="yes" xml:space="preserve">
          <source>If a value is present in the &lt;code&gt;OptionalDouble&lt;/code&gt;, returns an &lt;code&gt;OptionalDouble&lt;/code&gt; consisting of the result of applying the given function to the value or else empty.</source>
          <target state="translated">값이 존재하면 &lt;code&gt;OptionalDouble&lt;/code&gt; , 반환 &lt;code&gt;OptionalDouble&lt;/code&gt; 값으로, 지정된 함수를 적용하거나 다른 비워 결과 이루어진한다.</target>
        </trans-unit>
        <trans-unit id="d925f75ac160186f59c30c0d35aa24060b8d4b13" translate="yes" xml:space="preserve">
          <source>If a value is present in the &lt;code&gt;OptionalDouble&lt;/code&gt;, returns the value, otherwise throws &lt;code&gt;NoSuchElementException&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OptionalDouble&lt;/code&gt; 에 값이 있으면 값을 반환하고, 그렇지 않으면 &lt;code&gt;NoSuchElementException&lt;/code&gt; 을 throw 합니다.</target>
        </trans-unit>
        <trans-unit id="9c58cb62508a55f624764f60308d12b50d4fa3ac" translate="yes" xml:space="preserve">
          <source>If a value is present in the &lt;code&gt;OptionalDouble&lt;/code&gt;, tests the value using the given predicate and returns the optional if the test returns true or empty otherwise.</source>
          <target state="translated">&lt;code&gt;OptionalDouble&lt;/code&gt; 에 값이 있으면 주어진 조건자를 사용하여 값을 테스트하고 테스트가 true를 반환하면 optional을 반환하고 그렇지 않으면 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="f18ec045602967791a57464fbc92701e4d51c03c" translate="yes" xml:space="preserve">
          <source>If a value is present in the &lt;code&gt;OptionalInt&lt;/code&gt;, returns an &lt;code&gt;Optional&lt;/code&gt; consisting of the result of applying the given function to the value or else empty.</source>
          <target state="translated">값이 존재하면 &lt;code&gt;OptionalInt&lt;/code&gt; , 반환 &lt;code&gt;Optional&lt;/code&gt; 값 또는 다른 빈에 주어진 함수를 적용한 결과로 구성.</target>
        </trans-unit>
        <trans-unit id="8ffdd5aabe94d577312183db4007bc6ae08a62bb" translate="yes" xml:space="preserve">
          <source>If a value is present in the &lt;code&gt;OptionalInt&lt;/code&gt;, returns an &lt;code&gt;OptionalInt&lt;/code&gt; consisting of the result of applying the given function to the value or else empty.</source>
          <target state="translated">값이 존재하면 &lt;code&gt;OptionalInt&lt;/code&gt; , 반환 &lt;code&gt;OptionalInt&lt;/code&gt; 값 또는 다른 빈에 소정 함수를 적용하는 결과로 구성한다.</target>
        </trans-unit>
        <trans-unit id="cad88c260ee3091e553632cb67e5df0a9019d118" translate="yes" xml:space="preserve">
          <source>If a value is present in the &lt;code&gt;OptionalInt&lt;/code&gt;, returns the value, otherwise throws &lt;code&gt;NoSuchElementException&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OptionalInt&lt;/code&gt; 에 값이 있으면 값을 반환하고, 그렇지 않으면 &lt;code&gt;NoSuchElementException&lt;/code&gt; 을 throw 합니다.</target>
        </trans-unit>
        <trans-unit id="2515b6c54728bda755889c35d240edc614e7cd70" translate="yes" xml:space="preserve">
          <source>If a value is present in the &lt;code&gt;OptionalInt&lt;/code&gt;, tests the value using the given predicate and returns the optional if the test returns true or else empty.</source>
          <target state="translated">&lt;code&gt;OptionalInt&lt;/code&gt; 에 값이 있으면 주어진 조건자를 사용하여 값을 테스트하고 테스트가 true를 반환하거나 비어 있으면 optional을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5e778153562a7960fe4b94cd4f349b185c3e6389" translate="yes" xml:space="preserve">
          <source>If a value is present in the &lt;code&gt;OptionalLong&lt;/code&gt;, returns an &lt;code&gt;Optional&lt;/code&gt; consisting of the result of applying the given function to the value or else empty.</source>
          <target state="translated">값이 존재하면 &lt;code&gt;OptionalLong&lt;/code&gt; , 반환 &lt;code&gt;Optional&lt;/code&gt; 값 또는 다른 빈에 주어진 함수를 적용한 결과로 구성.</target>
        </trans-unit>
        <trans-unit id="fd3a9e174d76e3b6caf9283ab38ba95719928fec" translate="yes" xml:space="preserve">
          <source>If a value is present in the &lt;code&gt;OptionalLong&lt;/code&gt;, returns an &lt;code&gt;OptionalLong&lt;/code&gt; consisting of the result of applying the given function to the value or else empty.</source>
          <target state="translated">값이 존재하면 &lt;code&gt;OptionalLong&lt;/code&gt; , 반환 &lt;code&gt;OptionalLong&lt;/code&gt; 이 값 또는 다른 빈에 소정 함수를 적용하는 결과로 이루어지는.</target>
        </trans-unit>
        <trans-unit id="ed875f95a3f792f3e9be667cd5d8237b2136a8e5" translate="yes" xml:space="preserve">
          <source>If a value is present in the &lt;code&gt;OptionalLong&lt;/code&gt;, returns the value, otherwise throws &lt;code&gt;NoSuchElementException&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OptionalLong&lt;/code&gt; 에 값이 있으면 값을 반환하고, 그렇지 않으면 &lt;code&gt;NoSuchElementException&lt;/code&gt; 을 throw 합니다.</target>
        </trans-unit>
        <trans-unit id="6f9aa35ab2c32f9b3efa287fb5846a62f29941f7" translate="yes" xml:space="preserve">
          <source>If a value is present in the &lt;code&gt;OptionalLong&lt;/code&gt;, tests the value using the given predicate and returns the optional if the test returns true or else empty.</source>
          <target state="translated">&lt;code&gt;OptionalLong&lt;/code&gt; 에 값이 있으면 주어진 조건자를 사용하여 값을 테스트하고 테스트가 true를 반환하거나 비어 있으면 optional을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8424474eba6ceede86c0c9f12185ad235946a871" translate="yes" xml:space="preserve">
          <source>If an &quot;underscore&quot; version of the respective method already exists, then no default implementation is provided.</source>
          <target state="translated">각 메소드의 &quot;밑줄&quot;버전이 이미 존재하는 경우 기본 구현이 제공되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d1b01e2032148a80322e31f501f355face136765" translate="yes" xml:space="preserve">
          <source>If an empty array of closures is supplied the IDENTITY Closure will be used.</source>
          <target state="translated">비어있는 클로저 배열이 제공되면 IDENTITY 클로저가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="82bc73f47d5c7c8ab2288c6ff44b6e3abff67e77" translate="yes" xml:space="preserve">
          <source>If an empty list of closures is supplied the IDENTITY Closure will be used.</source>
          <target state="translated">빈 폐쇄 목록이 제공되면 IDENTITY 폐쇄가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="2f2abf56f90259914f21658fd286a4fcc0166c1e" translate="yes" xml:space="preserve">
          <source>If an input stream is open for the current row, a call to the method &lt;code&gt;next&lt;/code&gt; will implicitly close it. A &lt;code&gt;getResultSet()&lt;/code&gt; object's warning chain is cleared when a new row is read.</source>
          <target state="translated">현재 행에 대해 입력 스트림이 열려있는 경우 &lt;code&gt;next&lt;/code&gt; 메서드를 호출 하면 암시 적 으로 해당 행 이 닫힙니다. &lt;code&gt;getResultSet()&lt;/code&gt; 새로운 행이 읽힐 때, 객체의 경고 체인이 지워집니다.</target>
        </trans-unit>
        <trans-unit id="938cfb2384e5104f7870bf4ab3b12bddb7621ef3" translate="yes" xml:space="preserve">
          <source>If any other type is given, the call is delegated to &lt;a href=&quot;defaultgroovymethods#asType(Object,Class)&quot;&gt;DefaultGroovyMethods.asType&lt;/a&gt;.</source>
          <target state="translated">다른 유형이 제공되면 호출이 &lt;a href=&quot;defaultgroovymethods#asType(Object,Class)&quot;&gt;DefaultGroovyMethods.asType에&lt;/a&gt; 위임됩니다 .</target>
        </trans-unit>
        <trans-unit id="2f8c408d39a6843dcec1b731c7750661cde099c1" translate="yes" xml:space="preserve">
          <source>If c is a primitive class this method returns a boxed version otherwise c is returned.</source>
          <target state="translated">c가 기본 클래스이면이 메서드는 박스형 버전을 반환합니다. 그렇지 않으면 c가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="c764d8652ff416fa1e7baeaf3f12e364c65c4b5d" translate="yes" xml:space="preserve">
          <source>If c is a primitive class this method returns a boxed version otherwise c is returned. In java 1.5 this can be simplified thanks to the Type class.</source>
          <target state="translated">c가 기본 클래스이면이 메서드는 박스형 버전을 반환합니다. 그렇지 않으면 c가 반환됩니다. Java 1.5에서는 Type 클래스 덕분에 단순화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7f63ee4f7d9f0f19b14ca42df6d2be25504632c8" translate="yes" xml:space="preserve">
          <source>If cache is enabled, then templates are compiled once for each source (URL or File).</source>
          <target state="translated">캐시가 활성화 된 경우 템플릿은 각 소스 (URL 또는 파일)에 대해 한 번씩 컴파일됩니다.</target>
        </trans-unit>
        <trans-unit id="3709a4d48b18f71236cadae06fa18d54c5fde6c1" translate="yes" xml:space="preserve">
          <source>If cache is enabled, then templates are compiled once for each source (URL or File). It is recommended to keep this flag to true unless you are in development mode and want automatic reloading of templates.</source>
          <target state="translated">캐시가 활성화 된 경우 템플릿은 각 소스 (URL 또는 파일)에 대해 한 번씩 컴파일됩니다. 개발 모드에 있지 않고 템플릿을 자동으로 다시로드하려는 경우가 아니면이 플래그를 true로 유지하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="deed72fd6f71ccb2c5890d7ad59e444b77351190" translate="yes" xml:space="preserve">
          <source>If calling inside a process and you don't want the JVM to exit on an error call commandLineCompile(String[]), which this method simply wraps</source>
          <target state="translated">프로세스 내에서 호출하고 오류 발생시 JVM이 종료되지 않도록하려면 commandLineCompile (String [])을 호출합니다.이 메서드는 단순히 래핑합니다.</target>
        </trans-unit>
        <trans-unit id="dbc6bcf60cbf4e01b252725b8bfc70a47f8c0ff8" translate="yes" xml:space="preserve">
          <source>If childName ends in {consonant}y, replace 'y' with &quot;ies&quot;. For example, allergy to allergies.</source>
          <target state="translated">childName이 {자음} y로 끝나면 'y'를 'ies'로 바꿉니다. 예를 들어, 알레르기에 대한 알레르기.</target>
        </trans-unit>
        <trans-unit id="442162ce9da751d1028aa15f7629d60b3edd6fda" translate="yes" xml:space="preserve">
          <source>If defined, all unimplemented methods will execute the code found within the supplied closure.</source>
          <target state="translated">정의 된 경우 구현되지 않은 모든 메서드는 제공된 클로저 내에서 발견 된 코드를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="a51304925607198ae5f1730335c0a539fd38435b" translate="yes" xml:space="preserve">
          <source>If defined, all unimplemented methods will throw this exception.</source>
          <target state="translated">정의 된 경우 구현되지 않은 모든 메서드는이 예외를 throw합니다.</target>
        </trans-unit>
        <trans-unit id="91827f1613a3e6da280972c7905478aec02dfdf6" translate="yes" xml:space="preserve">
          <source>If defined, all unimplemented methods will throw this exception. Will be ignored if &lt;code&gt;code&lt;/code&gt; is defined.</source>
          <target state="translated">정의 된 경우 구현되지 않은 모든 메서드는이 예외를 throw합니다. &lt;code&gt;code&lt;/code&gt; 가 정의 된 경우 무시됩니다 .</target>
        </trans-unit>
        <trans-unit id="fe37eadc9109834730a2d52eb286970b06c229b6" translate="yes" xml:space="preserve">
          <source>If defined, tests which unexpectedly pass will throw this exception.</source>
          <target state="translated">정의 된 경우 예기치 않게 통과 된 테스트에서이 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f7326377b23cdeec0e3181b39a51722bcc2eeda2" translate="yes" xml:space="preserve">
          <source>If defined, tests which unexpectedly pass will throw this exception. The supplied exception class should have a constructor variant accepting a single String error message.</source>
          <target state="translated">정의 된 경우 예기치 않게 통과 된 테스트에서이 예외가 발생합니다. 제공된 예외 클래스에는 단일 문자열 오류 메시지를 허용하는 생성자 변형이 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="6a3362bc449e5167ee76c5f945fad34ec24267b4" translate="yes" xml:space="preserve">
          <source>If for example you look at x = 1 + 2l we have the first category applying to the number 1 being int, since the 1 is an int. The 2l is a long, therefore the int category will not apply and the result type can't be int. The next category in the list is long, and since both apply to long, the result type is a long.</source>
          <target state="translated">예를 들어 x = 1 + 2l을 보면 1이 정수이기 때문에 정수 1에 적용되는 첫 번째 범주가 있습니다. 2l은 길기 때문에 int 범주는 적용되지 않으며 결과 유형은 int 일 수 없습니다. 목록의 다음 범주는 길고 둘 다 long에 적용되므로 결과 유형은 long입니다.</target>
        </trans-unit>
        <trans-unit id="5eb9ed5b52ba9968e515b1e701325429d2c239df" translate="yes" xml:space="preserve">
          <source>If instead of &lt;code&gt;newInstance&lt;/code&gt; you use &lt;code&gt;withInstance&lt;/code&gt;, then &lt;code&gt;close()&lt;/code&gt; will be called automatically for you.</source>
          <target state="translated">대신의 경우 &lt;code&gt;newInstance&lt;/code&gt; 사용 &lt;code&gt;withInstance&lt;/code&gt; 을 한 후 &lt;code&gt;close()&lt;/code&gt; 당신을 위해 자동으로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="e5c42a3a46a9788c409281ad777f2993948e1836" translate="yes" xml:space="preserve">
          <source>If it does match and we don't have any capture groups in our regex, there is a single parameter on the closure that the match gets passed to:</source>
          <target state="translated">일치하고 정규 표현식에 캡처 그룹이없는 경우 일치가 전달되는 클로저에 대한 단일 매개 변수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="f494722999ef5b864350f74a802a230ba3628e7d" translate="yes" xml:space="preserve">
          <source>If it does match, we get the matching string back:</source>
          <target state="translated">일치하면 일치하는 문자열을 다시 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="c70187db616b55fcfd2e4cbb5e558f94a51267fc" translate="yes" xml:space="preserve">
          <source>If it is set to false, only previously downloaded grapes will be used. This may cause failure in the grape call if the library has not yet been downloaded</source>
          <target state="translated">false로 설정하면 이전에 다운로드 한 포도 만 사용됩니다. 라이브러리가 아직 다운로드되지 않은 경우 포도 호출에 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d17a8467eb80d6bf1779114bbec378e2beef877" translate="yes" xml:space="preserve">
          <source>If it is set to false, only previously downloaded grapes will be used. This may cause failure in the grape call if the library has not yet been downloaded.</source>
          <target state="translated">false로 설정하면 이전에 다운로드 한 포도 만 사용됩니다. 라이브러리를 아직 다운로드하지 않은 경우 포도 호출에 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fef1fc4b5245b8af08268f2c5f998421ab97143f" translate="yes" xml:space="preserve">
          <source>If it is set to true, then any jars not already downloaded will automatically be downloaded. Also, any versions expressed as a range will be checked for new versions and downloaded (with dependencies) if found.</source>
          <target state="translated">true로 설정하면 아직 다운로드되지 않은 모든 jar가 자동으로 다운로드됩니다. 또한 범위로 표현 된 모든 버전은 새 버전이 있는지 확인하고 발견되면 다운로드 (종속성 포함)됩니다.</target>
        </trans-unit>
        <trans-unit id="fd9149e8db335357ba07493f34e072fd0e558b1b" translate="yes" xml:space="preserve">
          <source>If it is set to true, then any jars not already downloaded will automatically be downloaded. Also, any versions expressed as a range will be checked for new versions and downloaded (with dependencies) if found. By default it is set to true.</source>
          <target state="translated">true로 설정하면 아직 다운로드되지 않은 모든 jar가 자동으로 다운로드됩니다. 또한 범위로 표현 된 모든 버전은 새 버전이 있는지 확인하고 발견되면 다운로드 (종속성 포함)됩니다. 기본적으로 true로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="10d50a4c77df253055e12c2ecc9fe6a0ebd5e4a2" translate="yes" xml:space="preserve">
          <source>If manual verification is required</source>
          <target state="translated">수동 확인이 필요한 경우</target>
        </trans-unit>
        <trans-unit id="b5772fc42f893708d53daa7dae28dcc657980bc8" translate="yes" xml:space="preserve">
          <source>If multiple candidate signatures are found after applying type hints, a conflict resolver can attempt to resolve the ambiguity.</source>
          <target state="translated">유형 힌트를 적용한 후 여러 후보 서명이 발견되면 충돌 해결 프로그램이 모호성을 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b8d933645aa015006414f8185e275306ad8ab117" translate="yes" xml:space="preserve">
          <source>If multiple delegation targets are used and the same method signature occurs in more than one of the respective delegate types, then the delegate will be made to the first defined target having that signature. If this does occur, it might be regarded as a smell (or at least poor style) and it might be clearer to do the delegation by long hand.</source>
          <target state="translated">여러 위임 대상이 사용되고 동일한 메서드 서명이 각 대리자 유형 중 둘 이상에서 발생하는 경우 해당 서명이있는 첫 번째 정의 된 대상에 대리자가 만들어집니다. 이것이 발생하면 냄새 (또는 적어도 나쁜 스타일)로 간주 될 수 있으며 긴 손으로 위임하는 것이 더 명확 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="133211e7628ba98c4009bf6c6b276dd90f91f446" translate="yes" xml:space="preserve">
          <source>If neither an allowed list nor a disallowed list is set, then everything is permitted.</source>
          <target state="translated">허용 된 목록이나 허용되지 않는 목록이 모두 설정되지 않은 경우 모든 것이 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="37e2e3564b496b9412d2345b26f5ec66f936a149" translate="yes" xml:space="preserve">
          <source>If no further options are specified, this is the default style for &lt;code&gt;@Canonical&lt;/code&gt; and &lt;code&gt;@EqualsAndHashCode&lt;/code&gt; annotated classes. The advantage of this style is that it allows inheritance to be used in limited cases where its purpose is for overriding implementation details rather than creating a derived type with different behavior. This is useful when using JPA Proxies for example or as shown in the following examples:</source>
          <target state="translated">추가 옵션이 지정되지 않은 경우 &lt;code&gt;@Canonical&lt;/code&gt; 및 &lt;code&gt;@EqualsAndHashCode&lt;/code&gt; 주석이 달린 클래스 의 기본 스타일입니다 . 이 스타일의 장점은 다른 동작으로 파생 된 형식을 만드는 것이 아니라 구현 세부 정보를 재정의하는 것이 목적인 제한된 경우에 상속을 사용할 수 있다는 것입니다. 예를 들어 JPA 프록시를 사용할 때 또는 다음 예에 표시된대로 유용합니다.</target>
        </trans-unit>
        <trans-unit id="11449d785cedd736a5372a0f44e9f579638c992e" translate="yes" xml:space="preserve">
          <source>If no parameters with &lt;code&gt;@NamedParam&lt;/code&gt; or &lt;code&gt;@NamedDelegate&lt;/code&gt; annotations are found then:</source>
          <target state="translated">&lt;code&gt;@NamedParam&lt;/code&gt; 또는 &lt;code&gt;@NamedDelegate&lt;/code&gt; 어노테이션이있는 매개 변수가없는 경우 :</target>
        </trans-unit>
        <trans-unit id="0b37698cada5bd14814c9002b94be59a00c96d8c" translate="yes" xml:space="preserve">
          <source>If one of '&lt;code&gt;user&lt;/code&gt;' or '&lt;code&gt;password&lt;/code&gt;' is supplied, both should be supplied.</source>
          <target state="translated">' &lt;code&gt;user&lt;/code&gt; '또는 ' &lt;code&gt;password&lt;/code&gt; ' 중 하나를 제공하면 둘 다 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="ac9be1ea585ef9f7ce15dfdcffd2675eb85665c8" translate="yes" xml:space="preserve">
          <source>If one of your properties contains an object that doesn't support cloning or attempts deep copying of a data structure containing an object that doesn't support cloning, then a &lt;code&gt;CloneNotSupportedException&lt;/code&gt; may occur at runtime.</source>
          <target state="translated">속성 중 하나에 복제를 지원하지 않는 개체가 포함되어 있거나 복제를 지원하지 않는 개체가 포함 된 데이터 구조의 전체 복사를 시도 하면 런타임에 &lt;code&gt;CloneNotSupportedException&lt;/code&gt; 이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b37d7a7e4bc5d1b1e83c2d07eb9b7d99aac35c6" translate="yes" xml:space="preserve">
          <source>If parent.propertyName is a Collection it will try to add child to the collection.</source>
          <target state="translated">parent.propertyName이 컬렉션 인 경우 컬렉션에 자식을 추가하려고합니다.</target>
        </trans-unit>
        <trans-unit id="cb272e13d27c9faf4899d07f6b14b988964664e9" translate="yes" xml:space="preserve">
          <source>If replacementSet is smaller than sourceSet, then the last character from replacementSet is used as the replacement for all remaining source characters as shown here:</source>
          <target state="translated">replacementSet이 sourceSet보다 작 으면 다음과 같이 replacementSet의 마지막 문자가 나머지 모든 소스 문자의 교체로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8a22ac35379c7ad7fca1ce931140aa8529326844" translate="yes" xml:space="preserve">
          <source>If set to false, 'public static void main' method will not be displayed.</source>
          <target state="translated">false로 설정하면 'public static void main'메소드가 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b282ceba11a7e31eba4fa20c872d35d39d73dcc1" translate="yes" xml:space="preserve">
          <source>If set to false, 'public static void main' method will not be displayed. Defaults to true. Ignored when not processing Scripts.</source>
          <target state="translated">false로 설정하면 'public static void main'메소드가 표시되지 않습니다. 기본값은 true입니다. 스크립트를 처리하지 않을 때 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="af803be21af00b873e4d3c29708c59ee09776510" translate="yes" xml:space="preserve">
          <source>If set to false, Scripts will not be processed.</source>
          <target state="translated">false로 설정하면 스크립트가 처리되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="945f77a1c6631a03dcbc6ccce6cc47971e413b1f" translate="yes" xml:space="preserve">
          <source>If set to false, Scripts will not be processed. Defaults to true.</source>
          <target state="translated">false로 설정하면 스크립트가 처리되지 않습니다. 기본값은 true입니다.</target>
        </trans-unit>
        <trans-unit id="ee8488aea8ff0eb53a3233d06958c245621da42d" translate="yes" xml:space="preserve">
          <source>If set to false, author will not be displayed.</source>
          <target state="translated">false로 설정하면 작성자가 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d7fe65d0541733888c0c7a5c3edecaccd62fb873" translate="yes" xml:space="preserve">
          <source>If set to false, author will not be displayed. Currently not used.</source>
          <target state="translated">false로 설정하면 작성자가 표시되지 않습니다. 현재는 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="924596b8eab3a7c90b36d314eb99b21495e09929" translate="yes" xml:space="preserve">
          <source>If set to true, hidden timestamp will not appear within generated HTML.</source>
          <target state="translated">true로 설정하면 숨겨진 타임 스탬프가 생성 된 HTML에 나타나지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1290c5f8f6a3fd9fd698ec47d1cffb3e0a894ba7" translate="yes" xml:space="preserve">
          <source>If set to true, hidden version stamp will not appear within generated HTML.</source>
          <target state="translated">true로 설정하면 숨겨진 버전 스탬프가 생성 된 HTML에 나타나지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bb28fa8fc2c0dd16a2b735e12b187aa2e8dacef7" translate="yes" xml:space="preserve">
          <source>If sourceSet contains repeated characters, the last specified replacement is used as shown here:</source>
          <target state="translated">sourceSet에 반복되는 문자가 포함 된 경우 마지막으로 지정된 대체가 다음과 같이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0f62e029dec1e453ee6dc6c5bb1c2c89305032ba" translate="yes" xml:space="preserve">
          <source>If specified, must match the &quot;id&quot; attribute in a VisibilityOptions annotation to enable a custom visibility.</source>
          <target state="translated">지정된 경우 사용자 지정 가시성을 활성화하려면 VisibilityOptions 주석의 &quot;id&quot;속성과 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="9c893c222de9039ded36f868dd74389bfcca897f" translate="yes" xml:space="preserve">
          <source>If specified, must match the optional &quot;id&quot; attribute in an applicable &lt;code&gt;VisibilityOptions&lt;/code&gt; annotation.</source>
          <target state="translated">지정된 경우 적용 가능한 &lt;code&gt;VisibilityOptions&lt;/code&gt; 주석 의 선택적 &quot;id&quot;속성과 일치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="5b329502c5afbf78007fcf1795a382005f0dee9a" translate="yes" xml:space="preserve">
          <source>If strict mode is true, then when the compiler generates a cast, it will disable Groovy casts and rely on a strict cast (CHECKCAST).</source>
          <target state="translated">엄격 모드가 true이면 컴파일러가 캐스트를 생성 할 때 Groovy 캐스트를 비활성화하고 엄격한 캐스트 (CHECKCAST)에 의존합니다.</target>
        </trans-unit>
        <trans-unit id="42fc83ab5a0db551349bb6e6708c97a9ac857534" translate="yes" xml:space="preserve">
          <source>If supported, Causes the values to be propagated from the target to the source, If not supported, an exception may be thrown</source>
          <target state="translated">지원되는 경우 값이 대상에서 소스로 전파됩니다. 지원되지 않는 경우 예외가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d9b7696c9777c3fdef5f5f1690ef14ee23382d9" translate="yes" xml:space="preserve">
          <source>If the</source>
          <target state="translated">만약</target>
        </trans-unit>
        <trans-unit id="9261f103249815b5548b32356b7dfbcdd640649a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;defaults&lt;/code&gt; annotation attribute is set to &lt;code&gt;false&lt;/code&gt;, and no other map-based constructor are added then named-argument processing will not be available.</source>
          <target state="translated">경우 &lt;code&gt;defaults&lt;/code&gt; 주석 속성이 설정되어 &lt;code&gt;false&lt;/code&gt; , 그리고 다른 맵 기반 생성자가 추가되지 않습니다 다음 명명 된 인수 처리는 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="9dc24cecb215bbbe513abec5e10b149eaeb892bb" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;self&lt;/code&gt; map is one of TreeMap, Hashtable or Properties, the returned Map will preserve that type, otherwise a LinkedHashMap will be returned.</source>
          <target state="translated">는 IF &lt;code&gt;self&lt;/code&gt; 맵 트리 맵, 해시 테이블 또는 속성 중 하나입니다, 반환 된지도 유형, 그렇지 않으면의 LinkedHashMap이 반환됩니다 보존됩니다.</target>
        </trans-unit>
        <trans-unit id="635a189513bc69306a1cc6affd125e5131643403" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;self&lt;/code&gt; map is one of TreeMap, LinkedHashMap, Hashtable or Properties, the returned Map will preserve that type, otherwise a HashMap will be returned.</source>
          <target state="translated">는 IF &lt;code&gt;self&lt;/code&gt; 맵 트리 맵,의 LinkedHashMap, 해시 테이블 또는 속성 중 하나입니다, 반환 된지도 유형, 그렇지 않은 경우는 HashMap가 반환됩니다 보존됩니다.</target>
        </trans-unit>
        <trans-unit id="82617162a84e01e4040b6310e580d5bed577d186" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;soft&lt;/code&gt; flag for the annotation is not set but the field is static, then the &lt;a href=&quot;http://en.wikipedia.org/wiki/Initialization_on_demand_holder_idiom&quot;&gt;initialization on demand holder idiom&lt;/a&gt; is used as follows:</source>
          <target state="translated">는 IF &lt;code&gt;soft&lt;/code&gt; 주석에 대한 플래그가 설정하지만 필드가 고정되어 있지 않으며, 그 &lt;a href=&quot;http://en.wikipedia.org/wiki/Initialization_on_demand_holder_idiom&quot;&gt;수요 홀더 관용구에 대한 초기화는&lt;/a&gt; 다음과 같이 사용된다 :</target>
        </trans-unit>
        <trans-unit id="385febdfa7ef07a1b28cace87e29028ac6d6ba97" translate="yes" xml:space="preserve">
          <source>If the Closure has two parameters it is used like a traditional Comparator. I.e. it should compare its two parameters for order, returning a negative integer, zero, or a positive integer when the first parameter is less than, equal to, or greater than the second respectively. Otherwise, the Closure is assumed to take a single parameter and return a Comparable (typically an Integer) which is then used for further comparison.</source>
          <target state="translated">클로저에 두 개의 매개 변수가있는 경우 기존 비교기처럼 사용됩니다. 즉, 첫 번째 매개 변수가 각각 두 번째 매개 변수보다 작거나 같거나 클 때 음의 정수, 0 또는 양의 정수를 리턴하여 순서를 위해 두 매개 변수를 비교해야합니다. 그렇지 않으면 Closure는 단일 매개 변수를 취하고 추가 비교에 사용되는 Comparable (일반적으로 Integer)을 반환한다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="8a3df9e7547ec4b6d738373bb90d2531b788d4d9" translate="yes" xml:space="preserve">
          <source>If the String is already the same size or bigger than the target &lt;code&gt;numberOfChars&lt;/code&gt;, then the original String is returned. An example:</source>
          <target state="translated">String이 이미 동일한 크기이거나 대상 &lt;code&gt;numberOfChars&lt;/code&gt; 보다 큰 경우 원래 String이 반환됩니다. 예 :</target>
        </trans-unit>
        <trans-unit id="fec170b2d985ec59b1ec3aec64163e5690dce806" translate="yes" xml:space="preserve">
          <source>If the closure has two parameters it is used like a traditional Comparator. I.e. it should compare its two entry parameters for order, returning a negative integer, zero, or a positive integer when the first parameter is less than, equal to, or greater than the second respectively. Otherwise, the Closure is assumed to take a single entry parameter and return a Comparable (typically an Integer) which is then used for further comparison.</source>
          <target state="translated">클로저에 두 개의 매개 변수가있는 경우 기존 비교기처럼 사용됩니다. 즉, 첫 번째 매개 변수가 각각 두 번째 매개 변수보다 작거나 같거나 클 때 음의 정수, 0 또는 양의 정수를 리턴하는 순서에 대한 두 항목 매개 변수를 비교해야합니다. 그렇지 않으면 Closure는 단일 항목 매개 변수를 취하고 추가 비교에 사용되는 Comparable (일반적으로 Integer)을 반환한다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="ae862b3fcc741884eff9dce9a4c1d186e853a84f" translate="yes" xml:space="preserve">
          <source>If the closure has two parameters it is used like a traditional Comparator. I.e. it should compare its two parameters for order, returning a negative integer, zero, or a positive integer when the first parameter is less than, equal to, or greater than the second respectively. Otherwise, the Closure is assumed to take a single parameter and return a Comparable (typically an Integer) which is then used for further comparison.</source>
          <target state="translated">클로저에 두 개의 매개 변수가있는 경우 기존 비교기처럼 사용됩니다. 즉, 첫 번째 매개 변수가 두 번째 매개 변수보다 작거나 같거나 클 때 음의 정수, 0 또는 양의 정수를 반환하는 순서를 위해 두 매개 변수를 비교해야합니다. 그렇지 않으면 Closure는 단일 매개 변수를 취하고 추가 비교에 사용되는 Comparable (일반적으로 Integer)을 반환한다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="d18963ec46721d8a0c427332570d7221425c0b7c" translate="yes" xml:space="preserve">
          <source>If the closure has two parameters it is used like a traditional Comparator. I.e. it should compare its two parameters for order, returning a negative integer, zero, or a positive integer when the first parameter is less than, equal to, or greater than the second respectively. Otherwise, the Closure is assumed to take a single parameter and return a Comparable (typically an Integer) which is then used for further comparison. An example:</source>
          <target state="translated">클로저에 두 개의 매개 변수가있는 경우 기존 비교기처럼 사용됩니다. 즉, 첫 번째 매개 변수가 두 번째 매개 변수보다 작거나 같거나 클 때 음의 정수, 0 또는 양의 정수를 반환하는 순서를 위해 두 매개 변수를 비교해야합니다. 그렇지 않으면 Closure는 단일 매개 변수를 취하고 추가 비교에 사용되는 Comparable (일반적으로 Integer)을 반환한다고 가정합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="0932623fb5eb340752020104e642ff30e170d5dc" translate="yes" xml:space="preserve">
          <source>If the closure takes a single parameter, each element from the Collection will be passed to the closure. The closure should return a value used for comparison (either using &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo(java.lang.Object)&quot;&gt;Comparable.compareTo&lt;/a&gt; or &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals(java.lang.Object)&quot;&gt;Object.equals&lt;/a&gt;). If the closure takes two parameters, two items from the collection will be passed as arguments, and the closure should return an int value (with 0 indicating the items are not unique).</source>
          <target state="translated">클로저가 단일 매개 변수를 취하면 컬렉션의 각 요소가 클로저로 전달됩니다. 클로저는 비교에 사용되는 값을 반환해야합니다 ( &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo(java.lang.Object)&quot;&gt;Comparable.compareTo&lt;/a&gt; 또는 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals(java.lang.Object)&quot;&gt;Object.equals 사용&lt;/a&gt; ). 클로저가 두 개의 매개 변수를 사용하면 컬렉션의 두 항목이 인수로 전달되고 클로저는 int 값을 반환해야합니다 (0은 항목이 고유하지 않음을 나타냄).</target>
        </trans-unit>
        <trans-unit id="160eb3d3c15e5f3ed499c00e99d25dc873827b50" translate="yes" xml:space="preserve">
          <source>If the closure takes a single parameter, each element from the Iterable will be passed to the closure. The closure should return a value used for comparison (either using &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo(java.lang.Object)&quot;&gt;Comparable.compareTo&lt;/a&gt; or &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals(java.lang.Object)&quot;&gt;Object.equals&lt;/a&gt;). If the closure takes two parameters, two items from the Iterable will be passed as arguments, and the closure should return an int value (with 0 indicating the items are not unique).</source>
          <target state="translated">클로저가 단일 매개 변수를 취하면 Iterable의 각 요소가 클로저로 전달됩니다. 클로저는 비교에 사용되는 값을 반환해야합니다 ( &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo(java.lang.Object)&quot;&gt;Comparable.compareTo&lt;/a&gt; 또는 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals(java.lang.Object)&quot;&gt;Object.equals 사용&lt;/a&gt; ). 클로저가 두 개의 매개 변수를 사용하면 Iterable의 두 항목이 인수로 전달되고 클로저는 int 값을 반환해야합니다 (0은 항목이 고유하지 않음을 나타냄).</target>
        </trans-unit>
        <trans-unit id="c1f2f98db7f3cd8cd1966ae04f614e6bc273ea7e" translate="yes" xml:space="preserve">
          <source>If the closure takes a single parameter, each element from the List will be passed to the closure. The closure should return a value used for comparison (either using &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo(java.lang.Object)&quot;&gt;Comparable.compareTo&lt;/a&gt; or &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals(java.lang.Object)&quot;&gt;Object.equals&lt;/a&gt;). If the closure takes two parameters, two items from the collection will be passed as arguments, and the closure should return an int value (with 0 indicating the items are not unique).</source>
          <target state="translated">클로저가 단일 매개 변수를 취하면 List의 각 요소가 클로저로 전달됩니다. 클로저는 비교에 사용되는 값을 반환해야합니다 ( &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo(java.lang.Object)&quot;&gt;Comparable.compareTo&lt;/a&gt; 또는 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals(java.lang.Object)&quot;&gt;Object.equals 사용&lt;/a&gt; ). 클로저가 두 개의 매개 변수를 사용하면 컬렉션의 두 항목이 인수로 전달되고 클로저는 int 값을 반환해야합니다 (0은 항목이 고유하지 않음을 나타냄).</target>
        </trans-unit>
        <trans-unit id="c80fbf9d484f1727998638148a2bf1f1929aedd6" translate="yes" xml:space="preserve">
          <source>If the closure takes a single parameter, the argument passed will be each element, and the closure should return a value used for comparison (either using &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo(java.lang.Object)&quot;&gt;Comparable.compareTo&lt;/a&gt; or &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals(java.lang.Object)&quot;&gt;Object.equals&lt;/a&gt;). If the closure takes two parameters, two items from the Iterator will be passed as arguments, and the closure should return an int value (with 0 indicating the items are not unique).</source>
          <target state="translated">클로저가 단일 매개 변수를 사용하는 경우 전달 된 인수는 각 요소가되고 클로저는 비교에 사용되는 값을 반환해야합니다 ( &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo(java.lang.Object)&quot;&gt;Comparable.compareTo&lt;/a&gt; 또는 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals(java.lang.Object)&quot;&gt;Object.equals 사용&lt;/a&gt; ). 클로저가 두 개의 매개 변수를 취하는 경우, Iterator의 두 항목이 인수로 전달되고 클로저는 int 값을 반환해야합니다 (0은 항목이 고유하지 않음을 나타냄).</target>
        </trans-unit>
        <trans-unit id="1ed2ec1e03cb68f98b720593353f0b57872161bd" translate="yes" xml:space="preserve">
          <source>If the closure takes a single parameter, the argument passed will be each element, and the closure should return a value used for comparison (either using &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo(java.lang.Object)&quot;&gt;Comparable.compareTo&lt;/a&gt; or &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals(java.lang.Object)&quot;&gt;Object.equals&lt;/a&gt;). If the closure takes two parameters, two items from the List will be passed as arguments, and the closure should return an int value (with 0 indicating the items are not unique).</source>
          <target state="translated">클로저가 단일 매개 변수를 사용하는 경우 전달 된 인수는 각 요소가되고 클로저는 비교에 사용되는 값을 반환해야합니다 ( &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo(java.lang.Object)&quot;&gt;Comparable.compareTo&lt;/a&gt; 또는 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals(java.lang.Object)&quot;&gt;Object.equals 사용&lt;/a&gt; ). 클로저가 두 개의 매개 변수를 사용하면 List의 두 항목이 인수로 전달되고 클로저는 int 값을 반환해야합니다 (0은 항목이 고유하지 않음을 나타냄).</target>
        </trans-unit>
        <trans-unit id="f54b771a68545b41e8ca80f90b0b38cf12a27779" translate="yes" xml:space="preserve">
          <source>If the closure takes a single parameter, the argument passed will be each element, and the closure should return a value used for comparison (either using &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo(java.lang.Object)&quot;&gt;Comparable.compareTo&lt;/a&gt; or &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals(java.lang.Object)&quot;&gt;Object.equals&lt;/a&gt;). If the closure takes two parameters, two items from the collection will be passed as arguments, and the closure should return an int value (with 0 indicating the items are not unique).</source>
          <target state="translated">클로저가 단일 매개 변수를 사용하는 경우 전달 된 인수는 각 요소가되고 클로저는 비교에 사용되는 값을 반환해야합니다 ( &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo(java.lang.Object)&quot;&gt;Comparable.compareTo&lt;/a&gt; 또는 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals(java.lang.Object)&quot;&gt;Object.equals 사용&lt;/a&gt; ). 클로저가 두 개의 매개 변수를 사용하면 컬렉션의 두 항목이 인수로 전달되고 클로저는 int 값을 반환해야합니다 (0은 항목이 고유하지 않음을 나타냄).</target>
        </trans-unit>
        <trans-unit id="8d3d646e6aaa70a0f22b744eb08d721f2569fd2f" translate="yes" xml:space="preserve">
          <source>If the field is declared volatile then initialization will be synchronized using the &lt;a href=&quot;http://en.wikipedia.org/wiki/Double-checked_locking&quot;&gt;double-checked locking&lt;/a&gt; pattern as shown here:</source>
          <target state="translated">필드가 volatile로 선언되면 다음 과 같이 &lt;a href=&quot;http://en.wikipedia.org/wiki/Double-checked_locking&quot;&gt;두 번 확인 된 잠금&lt;/a&gt; 패턴을 사용하여 초기화가 동기화 됩니다.</target>
        </trans-unit>
        <trans-unit id="1a1205800ae2de1ec9038017b14a79d924446a55" translate="yes" xml:space="preserve">
          <source>If the filename will be placed inside a single/double quoted String we must escape backslash when on e.g.</source>
          <target state="translated">파일 이름이 작은 따옴표 / 큰 따옴표로 묶인 문자열 안에 배치 될 경우 예를 들어 백 슬래시를 이스케이프해야합니다.</target>
        </trans-unit>
        <trans-unit id="243f568e6bf6818ee3d25e256bc650bc948cab0b" translate="yes" xml:space="preserve">
          <source>If the filename will be placed inside a single/double quoted String we must escape backslash when on e.g. Windows.</source>
          <target state="translated">파일 이름이 작은 따옴표 / 큰 따옴표로 묶인 문자열 안에 배치되는 경우 예를 들어 Windows에서 백 슬래시를 이스케이프해야합니다.</target>
        </trans-unit>
        <trans-unit id="551b89fe0a437419189c6f8c839918d7eea11cde" translate="yes" xml:space="preserve">
          <source>If the first property (or field) has type &lt;code&gt;LinkedHashMap&lt;/code&gt; or if there is a single Object, AbstractMap, Map or HashMap property (or field), then no additional constructor will be added and Groovy's normal map-style naming conventions will not be available.</source>
          <target state="translated">첫 번째 속성 (또는 필드)에 &lt;code&gt;LinkedHashMap&lt;/code&gt; 유형이 있거나 단일 Object, AbstractMap, Map 또는 HashMap 속성 (또는 필드)이있는 경우 추가 생성자가 추가되지 않으며 Groovy의 일반 맵 스타일 명명 규칙을 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="6666ea272dc6a58d7be8367dca451786ca411ade" translate="yes" xml:space="preserve">
          <source>If the given object is not a QName or String equivalent or is null then this method returns</source>
          <target state="translated">주어진 객체가 QName 또는 String과 동등하지 않거나 null이면이 메소드는</target>
        </trans-unit>
        <trans-unit id="78a3adf1234ea781998047f66a3ced12d5a100f0" translate="yes" xml:space="preserve">
          <source>If the includePackage flag is &lt;code&gt;true&lt;/code&gt; (the default), then the output will be:</source>
          <target state="translated">includePackage 플래그가 &lt;code&gt;true&lt;/code&gt; (기본값)이면 출력은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8a209b730ddb00a7bf1c46539ce71c3f830a135a" translate="yes" xml:space="preserve">
          <source>If the map instance does not have ordered keys, then this function could appear to drop random entries. Groovy by default uses LinkedHashMap, so this shouldn't be an issue in the main.</source>
          <target state="translated">맵 인스턴스에 순서가 지정된 키가없는 경우이 함수는 임의의 항목을 삭제하는 것처럼 보일 수 있습니다. Groovy는 기본적으로 LinkedHashMap을 사용하므로 메인에서 문제가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2411a5928d0e4edf31e665b4568b866427899251" translate="yes" xml:space="preserve">
          <source>If the map instance does not have ordered keys, then this function could appear to take random entries. Groovy by default uses LinkedHashMap, so this shouldn't be an issue in the main.</source>
          <target state="translated">맵 인스턴스에 순서가 지정된 키가없는 경우이 함수는 임의의 항목을 취하는 것처럼 보일 수 있습니다. Groovy는 기본적으로 LinkedHashMap을 사용하므로 메인에서 문제가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2a16459dd5caf99fc1cc625be428a47da3b0a22b" translate="yes" xml:space="preserve">
          <source>If the map instance does not have ordered keys, then this function could drop a random &lt;code&gt;num&lt;/code&gt; entries. Groovy by default uses LinkedHashMap, so this shouldn't be an issue in the main.</source>
          <target state="translated">맵 인스턴스에 순서가 지정된 키가없는 경우이 함수는 임의의 &lt;code&gt;num&lt;/code&gt; 항목을 삭제할 수 있습니다. Groovy는 기본적으로 LinkedHashMap을 사용하므로 메인에서 문제가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9adc0af7234a7f7dddf303a1f63b8a38c2f148ea" translate="yes" xml:space="preserve">
          <source>If the methodCallArgs are absent, it is a property reference. If there is no property, it is treated as a field reference, but never a method reference.</source>
          <target state="translated">methodCallArgs가 없으면 속성 참조입니다. 속성이 없으면 필드 참조로 처리되지만 메서드 참조는 처리되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b08a5b8915893a4d84d527e562180f850967d380" translate="yes" xml:space="preserve">
          <source>If the offset's total seconds are negative, a negative value will be returned.</source>
          <target state="translated">오프셋의 총 초가 음수이면 음수 값이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="48d60872cf9e840dd2c8ef946bbccf55f54207e9" translate="yes" xml:space="preserve">
          <source>If the optional contains a value, returns an optional containing the transformed value obtained using the &lt;code&gt;transform&lt;/code&gt; closure or otherwise an empty optional.</source>
          <target state="translated">옵션에 값이 포함 된 경우 &lt;code&gt;transform&lt;/code&gt; 클로저 를 사용하여 얻은 변환 된 값을 포함하는 옵션을 반환 하거나 그렇지 않으면 빈 옵션을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3ace9d4a8c1b6f5ffc5497f185f9d10c05faf2b5" translate="yes" xml:space="preserve">
          <source>If the parameter is no primitive type, the redirected ClassNode will be returned</source>
          <target state="translated">매개 변수가 기본 유형이 아닌 경우 리디렉션 된 ClassNode가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="34c92379090ff518dcd552d20613d5ed106e37fa" translate="yes" xml:space="preserve">
          <source>If the property does not exist then it will return childName unchanged.</source>
          <target state="translated">속성이 존재하지 않으면 변경되지 않은 childName을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6107b4d5266bf408264e8a734eb446c3449b2b14" translate="yes" xml:space="preserve">
          <source>If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">지정된 키가 아직 값과 연결되어 있지 않은 경우 지정된 매핑 함수를 사용하여 해당 값을 계산하고 &lt;code&gt;null&lt;/code&gt; 이 아닌 한이 맵에 입력합니다 .</target>
        </trans-unit>
        <trans-unit id="551c906c1bb44aa217c725bb3e6835b67419ea34" translate="yes" xml:space="preserve">
          <source>If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless &lt;code&gt;null&lt;/code&gt;. The entire method invocation is performed atomically, so the function is applied at most once per key. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this map.</source>
          <target state="translated">지정된 키가 아직 값과 연결되어 있지 않은 경우 지정된 매핑 함수를 사용하여 해당 값을 계산하고 &lt;code&gt;null&lt;/code&gt; 이 아닌 한이 맵에 입력합니다 . 전체 메서드 호출은 원자 적으로 수행되므로 함수는 키당 최대 한 번만 적용됩니다. 다른 스레드가이 맵에서 시도한 일부 업데이트 작업은 계산이 진행되는 동안 차단 될 수 있으므로 계산이 짧고 간단해야하며이 맵의 다른 매핑을 업데이트하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="743038d9cfc4ae8b0289cd027cb2db92c1f9fd53" translate="yes" xml:space="preserve">
          <source>If the supplied Closure takes a single parameter, the argument passed will be each element, and the closure should return a value used for comparison (either using &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo(java.lang.Object)&quot;&gt;Comparable.compareTo&lt;/a&gt; or &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals(java.lang.Object)&quot;&gt;Object.equals&lt;/a&gt;). If the closure takes two parameters, two items from the Iterator will be passed as arguments, and the closure should return an int value (with 0 indicating the items are not unique).</source>
          <target state="translated">제공된 Closure가 단일 매개 변수를 사용하는 경우 전달 된 인수는 각 요소가되고, 클로저는 비교에 사용되는 값을 반환해야합니다 ( &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo(java.lang.Object)&quot;&gt;Comparable.compareTo&lt;/a&gt; 또는 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals(java.lang.Object)&quot;&gt;Object.equals 사용&lt;/a&gt; ). 클로저가 두 개의 매개 변수를 취하는 경우, Iterator의 두 항목이 인수로 전달되고 클로저는 int 값을 반환해야합니다 (0은 항목이 고유하지 않음을 나타냄).</target>
        </trans-unit>
        <trans-unit id="88dd583fef354911284306e4281f94d0de49aa53" translate="yes" xml:space="preserve">
          <source>If the transform is associated with a single annotation, returns a name suitable for displaying in error messages.</source>
          <target state="translated">변환이 단일 주석과 연관된 경우 오류 메시지에 표시하기에 적합한 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c703c20b00fea5a8d7acfa056c400e06876f5279" translate="yes" xml:space="preserve">
          <source>If the unit is too large to iterate to the second Temporal exactly, such as iterating from two LocalDateTimes that are seconds apart using &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/temporal/ChronoUnit.html#DAYS&quot;&gt;ChronoUnit.DAYS&lt;/a&gt; as the unit, the iteration will cease as soon as the current value of the iteration is earlier than the second Temporal argument. The closure will not be called with any value earlier than the &lt;code&gt;to&lt;/code&gt; value.</source>
          <target state="translated">단위가 너무 커서 두 번째 Temporal로 정확하게 반복 할 수없는 경우 (예 : &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/temporal/ChronoUnit.html#DAYS&quot;&gt;ChronoUnit.DAYS&lt;/a&gt; 를 단위로 사용하여 초 간격의 두 LocalDateTimes 에서 반복하는 경우) 반복의 현재 값이 초보다 빠르면 반복이 중지됩니다. 시간적 논쟁. 폐쇄는 값 이전보다 더 호출되지 않습니다 &lt;code&gt;to&lt;/code&gt; 값입니다.</target>
        </trans-unit>
        <trans-unit id="b4174e6520e84cd5dc569c5b02e90212b12e6b44" translate="yes" xml:space="preserve">
          <source>If the unit is too large to iterate to the second Temporal exactly, such as iterating from two LocalDateTimes that are seconds apart using &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/temporal/ChronoUnit.html#DAYS&quot;&gt;ChronoUnit.DAYS&lt;/a&gt; as the unit, the iteration will cease as soon as the current value of the iteration is later than the second Temporal argument. The closure will not be called with any value later than the &lt;code&gt;to&lt;/code&gt; value.</source>
          <target state="translated">단위가 너무 커서 두 번째 Temporal로 정확하게 반복 할 수없는 경우 (예 : &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/temporal/ChronoUnit.html#DAYS&quot;&gt;ChronoUnit.DAYS&lt;/a&gt; 를 단위로 사용하여 초 간격의 두 LocalDateTimes 에서 반복하는 경우) 반복의 현재 값 이 초 보다 늦으면 반복이 중지됩니다. 시간적 논쟁. 폐쇄는 나중에보다 값이 호출되지 않습니다 &lt;code&gt;to&lt;/code&gt; 값입니다.</target>
        </trans-unit>
        <trans-unit id="f55b91ace44131b6a02cbb4d50c69c844c42f9f6" translate="yes" xml:space="preserve">
          <source>If there are capture groups, the first parameter will be the match followed by one parameter for each capture group:</source>
          <target state="translated">캡처 그룹이있는 경우 첫 번째 매개 변수는 각 캡처 그룹에 대해 하나의 매개 변수가 뒤 따르는 일치입니다.</target>
        </trans-unit>
        <trans-unit id="f7433ccb7f792490e503bc92811e7797292fa5bf" translate="yes" xml:space="preserve">
          <source>If there are no matches, the closure will not be called, and an empty List will be returned.</source>
          <target state="translated">일치하는 항목이 없으면 클로저가 호출되지 않고 빈 목록이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="313e74861b90bc8486f13c4249d5e33002d10138" translate="yes" xml:space="preserve">
          <source>If there is more than one included property (and/or field) and the first property (or field) has type Object, AbstractMap, Map or HashMap, then a special &lt;code&gt;LinkedHashMap&lt;/code&gt; constructor will be created in addition to the tuple constructor to support named parameters in the normal way. This won't be created if the class is already annotated with &lt;code&gt;@MapConstructor&lt;/code&gt; or if the &lt;code&gt;defaults&lt;/code&gt; annotation attribute is set to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">포함 된 속성 (및 / 또는 필드)이 두 개 이상이고 첫 번째 속성 (또는 필드)에 Object, AbstractMap, Map 또는 HashMap 유형 이있는 경우 튜플 생성자에 추가로 특수 &lt;code&gt;LinkedHashMap&lt;/code&gt; 생성자가 생성되어 명명 된 매개 변수를 지원합니다. 정상적인 방식으로. 클래스가 이미 &lt;code&gt;@MapConstructor&lt;/code&gt; 로 주석 처리 되었거나 &lt;code&gt;defaults&lt;/code&gt; 주석 속성이 &lt;code&gt;false&lt;/code&gt; 로 설정된 경우에는 생성되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="34557aeb28967e4173c76474dc3c1c26e8004a32" translate="yes" xml:space="preserve">
          <source>If this SQL object was created with a Connection then this method closes the connection.</source>
          <target state="translated">이 SQL 개체가 Connection으로 생성 된 경우이 메서드는 연결을 닫습니다.</target>
        </trans-unit>
        <trans-unit id="a4e914ad3c22b6d8f38df01a52a0a4a8f400f9ee" translate="yes" xml:space="preserve">
          <source>If this SQL object was created with a Connection then this method closes the connection. If this SQL object was created from a DataSource then this method only frees any cached objects (statements in particular).</source>
          <target state="translated">이 SQL 개체가 Connection으로 생성 된 경우이 메서드는 연결을 닫습니다. 이 SQL 개체가 DataSource에서 생성 된 경우이 메서드는 캐시 된 개체 (특히 문) 만 해제합니다.</target>
        </trans-unit>
        <trans-unit id="80f1087cf128253592eb01d3329359ea84971471" translate="yes" xml:space="preserve">
          <source>If this SQL object was created with a Connection then this method commits the connection.</source>
          <target state="translated">이 SQL 개체가 Connection으로 생성 된 경우이 메서드는 연결을 커밋합니다.</target>
        </trans-unit>
        <trans-unit id="754d73a1be3c48b9a219df6177bc784abf10e825" translate="yes" xml:space="preserve">
          <source>If this SQL object was created with a Connection then this method commits the connection. If this SQL object was created from a DataSource then this method does nothing.</source>
          <target state="translated">이 SQL 개체가 Connection으로 생성 된 경우이 메서드는 연결을 커밋합니다. 이 SQL 개체가 DataSource에서 생성 된 경우이 메서드는 아무 작업도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="49f5e16329c067f10c1d3522e8f9bf2c55b78c04" translate="yes" xml:space="preserve">
          <source>If this SQL object was created with a Connection then this method rolls back the connection.</source>
          <target state="translated">이 SQL 개체가 Connection으로 생성 된 경우이 메서드는 연결을 롤백합니다.</target>
        </trans-unit>
        <trans-unit id="25557c1bbccedf4372beb3200a77ed591d02e948" translate="yes" xml:space="preserve">
          <source>If this SQL object was created with a Connection then this method rolls back the connection. If this SQL object was created from a DataSource then this method does nothing.</source>
          <target state="translated">이 SQL 개체가 Connection으로 생성 된 경우이 메서드는 연결을 롤백합니다. 이 SQL 개체가 DataSource에서 생성 된 경우이 메서드는 아무 작업도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b98b14eb1aa561c54ac7fdbec4de0c697a5b9cb4" translate="yes" xml:space="preserve">
          <source>If this instance was created with a single Connection then the connection is returned.</source>
          <target state="translated">이 인스턴스가 단일 연결로 생성 된 경우 연결이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="d80d163fb13021ac33ad8b849d2ec36ab0e6a956" translate="yes" xml:space="preserve">
          <source>If this instance was created with a single Connection then the connection is returned. Otherwise if this instance was created with a DataSource then this method returns null</source>
          <target state="translated">이 인스턴스가 단일 연결로 생성 된 경우 연결이 반환됩니다. 그렇지 않으면이 인스턴스가 DataSource로 생성 된 경우이 메서드는 null을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="530823b483057fc27e8d70b4ea2614facbe9f9a0" translate="yes" xml:space="preserve">
          <source>If this method throws an exception, then the expression cannot be evaluated on its own.</source>
          <target state="translated">이 메서드에서 예외가 발생하면 식을 자체적으로 평가할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="662272f21b42eaf89c3e4ef2b09ce7ba2fa614de" translate="yes" xml:space="preserve">
          <source>If true forks the Groovy compiler.</source>
          <target state="translated">참이면 Groovy 컴파일러를 포크합니다.</target>
        </trans-unit>
        <trans-unit id="918ff30ae4b9ebdaf99e850f651586cf4ad90cbb" translate="yes" xml:space="preserve">
          <source>If true forks the Groovy compiler. Default is false.</source>
          <target state="translated">참이면 Groovy 컴파일러를 포크합니다. 기본값은 거짓입니다.</target>
        </trans-unit>
        <trans-unit id="c2d184e8bab4da6de50e7ba285f1a32d6c033a81" translate="yes" xml:space="preserve">
          <source>If true, add an implicit</source>
          <target state="translated">true이면 암시 적</target>
        </trans-unit>
        <trans-unit id="6c3567a288f7acafdac2a5a4706c9ca197110580" translate="yes" xml:space="preserve">
          <source>If true, change the type of the map constructor argument from Map to LinkedHashMap only for the case where the class has a single property (or field) with a Map-like type.</source>
          <target state="translated">true이면 클래스에 Map과 유사한 유형의 단일 속성 (또는 필드)이있는 경우에만 맵 생성자 인수의 유형을 Map에서 LinkedHashMap으로 변경합니다.</target>
        </trans-unit>
        <trans-unit id="e17887876f5bf178aeca16840c1bc8351abefcfa" translate="yes" xml:space="preserve">
          <source>If true, change the type of the map constructor argument from Map to LinkedHashMap only for the case where the class has a single property (or field) with a Map-like type. This allows both a map and a tuple constructor to be used side-by-side so long as care is taken about the types used when calling.</source>
          <target state="translated">true이면 클래스에 Map과 유사한 유형의 단일 속성 (또는 필드)이있는 경우에만 맵 생성자 인수의 유형을 Map에서 LinkedHashMap으로 변경합니다. 이를 통해 호출 할 때 사용되는 유형에주의를 기울이는 한 맵과 튜플 생성자를 나란히 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="72d4dff7f3e6baf20cb9e25613e460d69a5619c7" translate="yes" xml:space="preserve">
          <source>If true, enable preview Java features (JEP 12) (jdk12+ only).</source>
          <target state="translated">true 인 경우 미리보기 Java 기능 (JEP 12)을 활성화합니다 (jdk12 + 만 해당).</target>
        </trans-unit>
        <trans-unit id="dc4e6667db22120bb70083ebedf13fa88275e875" translate="yes" xml:space="preserve">
          <source>If true, generates metadata for reflection on method parameter names (jdk8+ only).</source>
          <target state="translated">true 인 경우 메서드 매개 변수 이름에 대한 반영을위한 메타 데이터를 생성합니다 (jdk8 + 만 해당).</target>
        </trans-unit>
        <trans-unit id="bceab3e330a8ad18725513359ff5ee5b6aaf34d1" translate="yes" xml:space="preserve">
          <source>If true, generates metadata for reflection on method parameter names (jdk8+ only). Defaults to false.</source>
          <target state="translated">true 인 경우 메서드 매개 변수 이름에 대한 반영을위한 메타 데이터를 생성합니다 (jdk8 + 만 해당). 기본값은 false입니다.</target>
        </trans-unit>
        <trans-unit id="3e78e9f11c63cc0854ae4d5aeed706a2dae1119e" translate="yes" xml:space="preserve">
          <source>If true, includes Ant's own classpath in the classpath.</source>
          <target state="translated">true 인 경우 클래스 경로에 Ant의 자체 클래스 경로를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="3f3161fc492230ca00ea7c2dd55dfe5056395e20" translate="yes" xml:space="preserve">
          <source>If true, includes Ant's own classpath in the classpath. Default is true. If setting to false and using groovyc in conjunction with AntBuilder you might need to explicitly add the Groovy jar(s) to the groovyc classpath using a nested classpath task.</source>
          <target state="translated">true 인 경우 클래스 경로에 Ant의 자체 클래스 경로를 포함합니다. 기본값은 true입니다. false로 설정하고 AntBuilder와 함께 groovyc를 사용하는 경우 중첩 된 클래스 경로 작업을 사용하여 Groovy jar (s)를 groovyc 클래스 경로에 명시 적으로 추가해야 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="13f9970075f664ff6b4cd009c403c7d806a8ce42" translate="yes" xml:space="preserve">
          <source>If true, includes the Java runtime libraries in the classpath.</source>
          <target state="translated">true 인 경우 클래스 경로에 Java 런타임 라이브러리를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="b81196dc2edbf2d4cefa21fcbc512a80a5c045d4" translate="yes" xml:space="preserve">
          <source>If true, includes the Java runtime libraries in the classpath. Default is false.</source>
          <target state="translated">true 인 경우 클래스 경로에 Java 런타임 라이브러리를 포함합니다. 기본값은 거짓입니다.</target>
        </trans-unit>
        <trans-unit id="0ba44a73e6e4775c0aa822cc3dc52bd7a344700b" translate="yes" xml:space="preserve">
          <source>If true, list the source files being handed off to the compiler.</source>
          <target state="translated">참이면 컴파일러에 전달되는 소스 파일을 나열합니다.</target>
        </trans-unit>
        <trans-unit id="a97c39b3265bed869865762e1a16c293d1d0a633" translate="yes" xml:space="preserve">
          <source>If true, list the source files being handed off to the compiler. Default is false.</source>
          <target state="translated">참이면 컴파일러에 전달되는 소스 파일을 나열합니다. 기본값은 거짓입니다.</target>
        </trans-unit>
        <trans-unit id="ba92c67d424716707ce7d8b849384cf2d6835cdb" translate="yes" xml:space="preserve">
          <source>If true, will use &lt;code&gt;as&lt;/code&gt; to convert map parameter to required class</source>
          <target state="translated">true 인 경우 &lt;code&gt;as&lt;/code&gt; 를 사용 하여 맵 매개 변수를 필수 클래스로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="f7a6cc857a9ef98bc6cf563f9533273e18b7f98e" translate="yes" xml:space="preserve">
          <source>If two or more closures are registered for the exact same type the last closure based on the order they were specified will be used. When serializing an object its type is compared to the list of registered types in the order the were given and the closure for the first suitable type will be called. Therefore, it is important to register more specific types first.</source>
          <target state="translated">둘 이상의 클로저가 정확히 동일한 유형에 등록 된 경우 지정된 순서에 따라 마지막 클로저가 사용됩니다. 객체를 직렬화 할 때 해당 유형은 제공된 순서대로 등록 된 유형 목록과 비교되며 첫 번째 적합한 유형에 대한 클로저가 호출됩니다. 따라서 더 구체적인 유형을 먼저 등록하는 것이 중요합니다.</target>
        </trans-unit>
        <trans-unit id="98ba7a0356d56339bb54adadd182a0c5ffd2670f" translate="yes" xml:space="preserve">
          <source>If two statements are separated by newline (not SEMI), the second had better not look like the latter half of an expression.</source>
          <target state="translated">두 문장이 줄 바꿈 (SEMI 아님)으로 구분되면 두 번째 문장은 식의 후반부처럼 보이지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="f6f0b0d7e0b7072f6ed34101c6d05aaaee512503" translate="yes" xml:space="preserve">
          <source>If two statements are separated by newline (not SEMI), the second had better not look like the latter half of an expression. If it does, issue a warning.</source>
          <target state="translated">두 문장이 줄 바꿈 (SEMI 아님)으로 구분되면 두 번째 문장은 식의 후반부처럼 보이지 않는 것이 좋습니다. 그렇다면 경고를 발행하십시오.</target>
        </trans-unit>
        <trans-unit id="18c952d88ede564c8979d3148b210c652d1f9036" translate="yes" xml:space="preserve">
          <source>If we are using a DataSource and we haven't enabled statement caching, then strictly speaking the final &lt;code&gt;close()&lt;/code&gt; method isn't required - as all connection handling is performed transparently on our behalf; however, it doesn't hurt to have it there as it will return silently in that case.</source>
          <target state="translated">DataSource를 사용하고 있고 명령문 캐싱을 활성화 하지 않은 경우 모든 연결 처리가 우리를 대신하여 투명하게 수행되므로 엄격하게 말하면 final &lt;code&gt;close()&lt;/code&gt; 메서드가 필요하지 않습니다. 그러나 그 경우 조용히 돌아올 것이기 때문에 거기에 두어도 아프지 않습니다.</target>
        </trans-unit>
        <trans-unit id="41559bac1ce5d79fb92f7b7644937c027d085018" translate="yes" xml:space="preserve">
          <source>If we didn't want to assume that callers of our &lt;code&gt;EmptyStringIterator&lt;/code&gt; correctly followed the &lt;code&gt;Iterator&lt;/code&gt; contract, then we might want to guard against inappropriate calls to &lt;code&gt;next&lt;/code&gt;. Rather than just returning &lt;code&gt;null&lt;/code&gt;, we might want to throw an exception. This is easily done using the &lt;code&gt;exception&lt;/code&gt; annotation attribute as shown below:</source>
          <target state="translated">&lt;code&gt;EmptyStringIterator&lt;/code&gt; 의 호출자가 &lt;code&gt;Iterator&lt;/code&gt; 계약을 올바르게 따랐다 고 가정하고 싶지 않다면 &lt;code&gt;next&lt;/code&gt; 에 대한 부적절한 호출을 방지 할 수 있습니다 . &lt;code&gt;null&lt;/code&gt; 을 반환하는 것보다 예외를 던질 수 있습니다. 이는 아래와 같이 &lt;code&gt;exception&lt;/code&gt; 주석 속성을 사용하여 쉽게 수행 됩니다.</target>
        </trans-unit>
        <trans-unit id="90c5b1a9c3f8af72c752d5f6b93a1576464dee8c" translate="yes" xml:space="preserve">
          <source>If we have capture groups in our expression, and our closure has one parameter, the closure will be passed an array with the first element corresponding to the whole match, followed by an element for each of the capture groups:</source>
          <target state="translated">표현식에 캡처 그룹이 있고 클로저에 하나의 매개 변수가있는 경우, 클로저는 전체 일치에 해당하는 첫 번째 요소와 각 캡처 그룹에 대한 요소가있는 배열로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="8a2fdfe997821cf5f70e068da54d119cd3697be4" translate="yes" xml:space="preserve">
          <source>If we have capture groups in our expression, our closure has one parameter for the match, followed by one for each of the capture groups:</source>
          <target state="translated">표현식에 캡처 그룹이있는 경우 클로저에는 일치에 대한 하나의 매개 변수가 있고 그 뒤에 각 캡처 그룹에 대한 매개 변수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="c89b749c39731f93bcdd95c740a8962c1d69adb4" translate="yes" xml:space="preserve">
          <source>If we have capture groups in our expression, the groups are ignored and we get back the full match:</source>
          <target state="translated">표현식에 캡처 그룹이있는 경우 그룹이 무시되고 전체 일치 항목이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="afb6429f36b2279a75a4aa1e047d8ece3063b406" translate="yes" xml:space="preserve">
          <source>If we have capture groups in our expression, we still get back the full match</source>
          <target state="translated">식에 캡처 그룹이있는 경우에도 전체 경기로 돌아갑니다.</target>
        </trans-unit>
        <trans-unit id="5af16e5cb7a1ee17375d9f00e0ebd120bb82be7b" translate="yes" xml:space="preserve">
          <source>If you ask Duration to convert itself to milliseconds then it will work on the basis of 24 hours in a day. If you add or subtract it from a date it will take daylight saving into account.</source>
          <target state="translated">Duration을 밀리 초로 변환하도록 요청하면 하루 24 시간을 기준으로 작동합니다. 날짜에 더하거나 빼면 일광 절약 시간이 고려됩니다.</target>
        </trans-unit>
        <trans-unit id="6a6a0913fc66ae450d7e6b2ed6bc058dad4ff313" translate="yes" xml:space="preserve">
          <source>If you create Groovy constructors with optional arguments this leads to multiple constructors created in the byte code. The expansion to multiple constructors occurs in a later phase to this AST transformation. This means that you can't override (i.e. not inherit) the constructors with signatures that Groovy adds later. If you get it wrong you will get a compile-time error about the duplication.</source>
          <target state="translated">선택적 인수를 사용하여 Groovy 생성자를 생성하면 바이트 코드에 여러 생성자가 생성됩니다. 여러 생성자에 대한 확장은이 AST 변환의 이후 단계에서 발생합니다. 이것은 Groovy가 나중에 추가하는 서명으로 생성자를 재정의 할 수 없다는 것을 의미합니다. 잘못하면 복제에 대한 컴파일 타임 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="4213eaa1d31200e4a312d01c8724ee287522ee2e" translate="yes" xml:space="preserve">
          <source>If you don't initialise some of the properties, your code won't compile, e.g. if the method body above was changed to this:</source>
          <target state="translated">일부 속성을 초기화하지 않으면 코드가 컴파일되지 않습니다. 예를 들어 위의 메서드 본문이 다음과 같이 변경된 경우 :</target>
        </trans-unit>
        <trans-unit id="431a708cccb1f7814cc82700f344d1e30a36690c" translate="yes" xml:space="preserve">
          <source>If you don't need all of the functionality of &lt;code&gt;@Canonical&lt;/code&gt;, you can simply directly use one or more of the individual annotations which &lt;code&gt;@Canonical&lt;/code&gt; aggregates. In addition, you can use &lt;code&gt;@Canonical&lt;/code&gt; in combination with explicit use one or more of the individual annotations in cases where you need to further customize the annotation attributes. Any applicable annotation attributes from &lt;code&gt;@Canonical&lt;/code&gt; missing from the explicit annotation will be merged but any existing annotation attributes within the explicit annotation take precedence. So, for example in this case here:</source>
          <target state="translated">&lt;code&gt;@Canonical&lt;/code&gt; 의 모든 기능이 필요하지 않은 경우 &lt;code&gt;@Canonical&lt;/code&gt; 이 집계 하는 하나 이상의 개별 주석을 직접 사용할 수 있습니다 . 또한 주석 속성을 추가로 사용자 정의해야하는 경우 &lt;code&gt;@Canonical&lt;/code&gt; 을 명시 적으로 하나 이상의 개별 주석과 함께 사용할 수 있습니다 . 명시 적 주석에서 누락 된 &lt;code&gt;@Canonical&lt;/code&gt; 의 적용 가능한 주석 속성은 병합되지만 명시 적 주석 내의 기존 주석 속성이 우선합니다. 예를 들어이 경우에는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e47dc22a75fb142df4d2e60d0e6474640fddf067" translate="yes" xml:space="preserve">
          <source>If you experience class-loading-troubles with Tomcat 4 (or higher) or any other servlet container using custom class loader setups, you can fallback to use (slower) reflection in Groovy's MetaClass implementation. Please contact the dev team with your problem! Thanks. The servlet init parameter name is:</source>
          <target state="translated">Tomcat 4 이상 또는 사용자 정의 클래스 로더 설정을 사용하는 다른 서블릿 컨테이너에서 클래스 로딩 문제가 발생하는 경우 Groovy의 MetaClass 구현에서 (느린) 리플렉션을 사용하도록 폴백 할 수 있습니다. 문제가있는 개발자 팀에 문의하세요! 감사. 서블릿 초기화 매개 변수 이름은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ec7c04f3855370a00c76ca51211656f5250db797" translate="yes" xml:space="preserve">
          <source>If you find yourself creating queries based on any kind of input from the user or a 3rd party application you might wish to avoid the pure string method variants in this class. While this is safe: &lt;code&gt;sql.firstRow('select * from PersonTable')&lt;/code&gt; This example is potentially at risk of SQL injection: &lt;code&gt;sql.firstRow('select * from PersonTable where SurnameColumn = ' + userInput)&lt;/code&gt; This in turn will be fine if '&lt;code&gt;userInput&lt;/code&gt;' is something like 'Smith' but maybe not so fine if '&lt;code&gt;userInput&lt;/code&gt;' is something like 'Smith; DROP table PersonTable'. Instead, use one of the variants with parameters and placeholders: &lt;code&gt;sql.firstRow(&quot;select * from PersonTable where SurnameColumn = ?&quot;, [userInput])&lt;/code&gt; or the GString variants which will be converted to the placeholder variants under the covers: &lt;code&gt;sql.firstRow(&quot;select * from PersonTable where SurnameColumn = $userInput&quot;)&lt;/code&gt; or the named parameter variants discussed next.</source>
          <target state="translated">사용자 또는 타사 응용 프로그램의 모든 종류의 입력을 기반으로 쿼리를 생성하는 경우이 클래스에서 순수한 문자열 메서드 변형을 피할 수 있습니다. 이것은 안전하지만 : &lt;code&gt;sql.firstRow('select * from PersonTable')&lt;/code&gt; 이 예제는 잠재적으로 SQL 주입의 위험이 있습니다. &lt;code&gt;sql.firstRow('select * from PersonTable where SurnameColumn = ' + userInput)&lt;/code&gt; 이것은 ' &lt;code&gt;userInput&lt;/code&gt; '은'Smith '와 비슷하지만' &lt;code&gt;userInput&lt;/code&gt; '이'Smith '와 같은 경우에는 그렇게 좋지 않을 수 있습니다 . DROP 테이블 PersonTable '. 대신 매개 변수 및 자리 표시 자와 함께 변형 중 하나를 사용 &lt;code&gt;sql.firstRow(&quot;select * from PersonTable where SurnameColumn = ?&quot;, [userInput])&lt;/code&gt; . sql.firstRow ( &quot;select * from PersonTable where SurnameColumn =?&quot;, [userInput])또는 커버 아래 자리 표시 자 변형으로 변환 될 GString 변형 : &lt;code&gt;sql.firstRow(&quot;select * from PersonTable where SurnameColumn = $userInput&quot;)&lt;/code&gt; 또는 다음에 설명하는 명명 된 매개 변수 변형.</target>
        </trans-unit>
        <trans-unit id="b01d03c69a42d04f3addad05e42162f7aab566b7" translate="yes" xml:space="preserve">
          <source>If you have this example:</source>
          <target state="translated">이 예가있는 경우 :</target>
        </trans-unit>
        <trans-unit id="6c0ea2c55af269dd868616b975c117bca2599f18" translate="yes" xml:space="preserve">
          <source>If you need to work with capture groups, then use the closure version of this method or use Groovy's matcher operators or use &lt;code&gt;eachMatch&lt;/code&gt;.</source>
          <target state="translated">캡처 그룹으로 작업해야하는 경우이 메서드의 클로저 버전을 사용하거나 Groovy의 매처 연산자를 사용하거나 &lt;code&gt;eachMatch&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="93b38ca6db99b463b3090b6a2cc47a70e094987e" translate="yes" xml:space="preserve">
          <source>If you use named arguments and a closure as last argument, the key/value pairs of the map (as named arguments) and the key/value pairs represented in the closure will be merged together &amp;mdash; the closure properties overriding the map key/values in case the same key is used.</source>
          <target state="translated">이름이 지정된 인수와 클로저를 마지막 인수로 사용하면 맵의 키 / 값 쌍 (이름이 지정된 인수)과 클로저에 표시된 키 / 값 쌍이 함께 병합됩니다. 클로저 속성이 맵 키 / 값을 재정의합니다. 동일한 키가 사용되는 경우.</target>
        </trans-unit>
        <trans-unit id="26b278538945be0eb3581b3b0ef10654c411f95d" translate="yes" xml:space="preserve">
          <source>If you use this style on a child class, the parent class must also have a copy constructor (created using this annotation or by hand). This approach can be slightly slower than the traditional cloning approach but the &lt;code&gt;Cloneable&lt;/code&gt; fields of your class can be final. When using the copy constructor style, you can provide your own custom constructor by hand if you wish. If you do so, it is up to you to correctly copy, clone or deep clone the properties of your class.</source>
          <target state="translated">자식 클래스에서이 스타일을 사용하는 경우 부모 클래스에도 복사 생성자가 있어야합니다 (이 주석을 사용하거나 수동으로 생성됨). 이 접근 방식은 기존의 복제 접근 방식보다 약간 느릴 수 있지만 클래스 의 &lt;code&gt;Cloneable&lt;/code&gt; 필드는 최종적 일 수 있습니다. 복사 생성자 스타일을 사용할 때 원하는 경우 직접 사용자 지정 생성자를 제공 할 수 있습니다. 그렇게하는 경우 클래스 속성을 올바르게 복사, 복제 또는 딥 복제하는 것은 사용자에게 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="60952ca33ec3b238f9c2aa322a94359a2e5200a0" translate="yes" xml:space="preserve">
          <source>If you want similar functionality to what this annotation provides but also require immutability, see the &lt;code&gt;@&lt;/code&gt;&lt;a href=&quot;immutable&quot;&gt;Immutable&lt;/a&gt; annotation.</source>
          <target state="translated">이 주석이 제공하는 것과 유사한 기능을 원하지만 불변성이 필요한 경우 &lt;code&gt;@&lt;/code&gt; &lt;a href=&quot;immutable&quot;&gt;Immutable&lt;/a&gt; 주석을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a8437cb6e58c0942451e3d747d9e5f80fe50a1d4" translate="yes" xml:space="preserve">
          <source>If you want to omit fields or properties referring to</source>
          <target state="translated">다음을 참조하는 필드 또는 속성을 생략하려는 경우</target>
        </trans-unit>
        <trans-unit id="a84f817570293665d02520c9e81e898fc5c6dda0" translate="yes" xml:space="preserve">
          <source>If you want, you can create these locks yourself. The &lt;code&gt;$lock&lt;/code&gt; and &lt;code&gt;$LOCK&lt;/code&gt; fields will not be generated if you create them yourself. You can also choose to lock on another field, by specifying its name as parameter to the &lt;code&gt;@Synchronized&lt;/code&gt; annotation. In this usage variant, the lock field will not be created automatically, and you must explicitly create it yourself.</source>
          <target state="translated">원하는 경우 이러한 잠금을 직접 만들 수 있습니다. &lt;code&gt;$lock&lt;/code&gt; 및 &lt;code&gt;$LOCK&lt;/code&gt; 당신이 그 (것)들에게 자신을 만들 경우 필드는 생성되지 않습니다. &lt;code&gt;@Synchronized&lt;/code&gt; 주석에 매개 변수로 이름을 지정하여 다른 필드를 잠그도록 선택할 수도 있습니다 . 이 사용 변형에서 잠금 필드는 자동으로 생성되지 않으며 직접 명시 적으로 생성해야합니다.</target>
        </trans-unit>
        <trans-unit id="7701fc78ed9aff5d4c09977427ccf64d8c9fb50e" translate="yes" xml:space="preserve">
          <source>If you wish to automatically apply the annotation to all classes of a project, consider using &lt;code&gt;groovyc --configscript&lt;/code&gt;. Google &quot;Customising The Groovy Compiler&quot;, or see &lt;a href=&quot;../../org/codehaus/groovy/control/compilerconfiguration&quot;&gt;CompilerConfiguration&lt;/a&gt; for further details. This will ensure that all arguments will automatically be final, completely eliminating the need to clutter the code with final keywords in any parameter list.</source>
          <target state="translated">프로젝트의 모든 클래스에 주석을 자동으로 적용하려면 &lt;code&gt;groovyc --configscript&lt;/code&gt; 사용을 고려하십시오 . Google &quot;Groovy 컴파일러 사용자 지정&quot;또는 자세한 내용은 &lt;a href=&quot;../../org/codehaus/groovy/control/compilerconfiguration&quot;&gt;CompilerConfiguration&lt;/a&gt; 을 참조 하세요. 이렇게하면 모든 인수가 자동으로 최종 항목이되어 매개 변수 목록에서 최종 키워드로 코드를 복잡하게 만들 필요가 완전히 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="c0c9b0de7502e4c349b1699e62eb7a692029d7e8" translate="yes" xml:space="preserve">
          <source>If your classes require deep cloning, it is up to you to provide the appropriate deep cloning logic in the respective &lt;code&gt;clone()&lt;/code&gt; method for your class.</source>
          <target state="translated">클래스에 딥 클로닝이 필요한 경우 클래스에 대한 각 &lt;code&gt;clone()&lt;/code&gt; 메서드 에서 적절한 딥 클로닝 논리를 제공하는 것은 사용자에게 달려 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c71e13f2d44cbcf22f7a1abb8b6d4ceeb5d6fa6f" translate="yes" xml:space="preserve">
          <source>If your database returns scalar functions as ResultSets, you can also use firstRow to gain access to stored procedure results, e.g. using hsqldb 1.9 RC4:</source>
          <target state="translated">데이터베이스가 스칼라 함수를 ResultSet으로 반환하는 경우 firstRow를 사용하여 저장 프로 시저 결과에 액세스 할 수도 있습니다 (예 : hsqldb 1.9 RC4 사용).</target>
        </trans-unit>
        <trans-unit id="dd91bcefa6284f552972a0be97fee45225f084db" translate="yes" xml:space="preserve">
          <source>IllegalAccessException</source>
          <target state="translated">IllegalAccessException</target>
        </trans-unit>
        <trans-unit id="df060f033243ef3e529950ac651d65d5bb658e94" translate="yes" xml:space="preserve">
          <source>IllegalAccessException if the instance can't be created due to a security violation</source>
          <target state="translated">보안 위반으로 인해 인스턴스를 만들 수없는 경우 IllegalAccessException</target>
        </trans-unit>
        <trans-unit id="9470a464366a48c841abcce34b92408b4cdb642a" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if &lt;code&gt;from&lt;/code&gt; is greater than &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;from&lt;/code&gt; 이 &lt;code&gt;to&lt;/code&gt; 보다 큰 경우 IllegalArgumentException .</target>
        </trans-unit>
        <trans-unit id="c8f3c5dc485395e82d262b0feaaf2f34ec4bfac3" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if nameValue is null</source>
          <target state="translated">IllegalArgumentException nameValue가 null 인 경우</target>
        </trans-unit>
        <trans-unit id="6ff24b3b5e8b2c5b7b81d950d45ba2d18e705265" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if object is not an array</source>
          <target state="translated">IllegalArgumentException 객체가 배열이 아닌 경우</target>
        </trans-unit>
        <trans-unit id="9294d057aa692cca37ecbab7d2085fac81e44d3b" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if source is null or empty</source>
          <target state="translated">IllegalArgumentException 소스가 null이거나 비어있는 경우</target>
        </trans-unit>
        <trans-unit id="86ea2f8a2286b63107713eaaede22f19946aaa09" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if the Writer is &lt;code&gt;null&lt;/code&gt;</source>
          <target state="translated">Writer가 &lt;code&gt;null&lt;/code&gt; 인 경우 IllegalArgumentException</target>
        </trans-unit>
        <trans-unit id="cdd5f1147ceb772fb77499be9d319020d957b3f4" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if the capacity is negative</source>
          <target state="translated">용량이 음수 인 경우 IllegalArgumentException</target>
        </trans-unit>
        <trans-unit id="7b8289dc3e59f86aad73cd7ff7bcb625bc959bbc" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if the concurrencyLevel is less than or equal to zero</source>
          <target state="translated">concurrencyLevel이 0보다 작거나 같은 경우 IllegalArgumentException</target>
        </trans-unit>
        <trans-unit id="c6e4654217af54bd70af816ed88a002fca576abd" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if the given closure does not accept a parameter of the given type</source>
          <target state="translated">IllegalArgumentException 지정된 클로저가 지정된 유형의 매개 변수를 허용하지 않는 경우</target>
        </trans-unit>
        <trans-unit id="67661783811bbe6d4df32243b7cc35b091bbd8bf" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if the given delegate is null</source>
          <target state="translated">IllegalArgumentException 지정된 대리자가 null 인 경우</target>
        </trans-unit>
        <trans-unit id="60badf536647c3f3f67ce90015aa8a96b9ee7823" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if the given pattern is invalid</source>
          <target state="translated">IllegalArgumentException 지정된 패턴이 유효하지 않은 경우</target>
        </trans-unit>
        <trans-unit id="3ab53b540cc008215c9d994c3a8b2ca99220b174" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if the initial maximum number of elements is less than zero, or if the load factor is non-positive.</source>
          <target state="translated">IllegalArgumentException 초기 최대 요소 수가 0보다 작거나로드 계수가 양수가 아닌 경우.</target>
        </trans-unit>
        <trans-unit id="0013d03312c48b52ddfa1b44ca089b3e1e963bc9" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if the initial maximum number of elements is less than zero.</source>
          <target state="translated">IllegalArgumentException 초기 최대 요소 수가 0보다 작은 경우.</target>
        </trans-unit>
        <trans-unit id="071385e94c06c7df8fef81cd5cfe157a215f180c" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if the initialCapacity is negative</source>
          <target state="translated">initialCapacity가 음수 인 경우 IllegalArgumentException</target>
        </trans-unit>
        <trans-unit id="d651f8f3e9190248932c4cca9396a54f2e2b69a5" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if the limit is negative</source>
          <target state="translated">한계가 음수 인 경우 IllegalArgumentException</target>
        </trans-unit>
        <trans-unit id="929c1adbfb817ce84250f7eec8a9b1e03d66c782" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if the maximumWeightedCapacity is negative</source>
          <target state="translated">maximumWeightedCapacity가 음수 인 경우 IllegalArgumentException</target>
        </trans-unit>
        <trans-unit id="ecf36c08fcecd4ff420ca507c7c9148183f9db17" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if the number of repetitions is &amp;lt; 0</source>
          <target state="translated">반복 횟수가 0 미만인 경우 IllegalArgumentException</target>
        </trans-unit>
        <trans-unit id="08175de67da4cd91e33b20427c00dcc5ff506bd5" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if the options are null</source>
          <target state="translated">옵션이 null 인 경우 IllegalArgumentException</target>
        </trans-unit>
        <trans-unit id="c0ba29c618866ec7128e13a68cbf0e2c342f9d00" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if the parameters are not valid</source>
          <target state="translated">매개 변수가 유효하지 않은 경우 IllegalArgumentException</target>
        </trans-unit>
        <trans-unit id="990c30e2e54bdf0c824bfc1347c8614edfe9bce6" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if the provided File object does not represent a directory</source>
          <target state="translated">제공된 File 객체가 디렉토리를 나타내지 않는 경우 IllegalArgumentException</target>
        </trans-unit>
        <trans-unit id="70463272c77eae3c0c6912b8e0c96b0c5e4de45d" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if the provided File object does not represent a directory or illegal filter combinations are supplied</source>
          <target state="translated">IllegalArgumentException 제공된 File 객체가 디렉토리를 나타내지 않거나 잘못된 필터 조합이 제공된 경우</target>
        </trans-unit>
        <trans-unit id="5f94a88312115100be59b27f9153db721ffae9a9" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if the provided Path object does not represent a directory</source>
          <target state="translated">IllegalArgumentException 제공된 Path 객체가 디렉토리를 나타내지 않는 경우</target>
        </trans-unit>
        <trans-unit id="7f64a10a518582832c0bfdf8c8e0c0b0c65bd37d" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if the provided Path object does not represent a directory or illegal filter combinations are supplied</source>
          <target state="translated">IllegalArgumentException 제공된 Path 객체가 디렉토리를 나타내지 않거나 잘못된 필터 조합이 제공된 경우</target>
        </trans-unit>
        <trans-unit id="7f67a8bc93676719434f61569eff2968b821ecbe" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if the range would contain more than &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html#MAX_VALUE&quot;&gt;Integer.MAX_VALUE&lt;/a&gt; values.</source>
          <target state="translated">범위에 &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html#MAX_VALUE&quot;&gt;Integer.MAX_VALUE&lt;/a&gt; 값 보다 많은 값 이 포함 된 경우 IllegalArgumentException 입니다.</target>
        </trans-unit>
        <trans-unit id="d46104b04c559e00a3e5ba8d9ebb30c77fc291c7" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException if the step is zero.</source>
          <target state="translated">단계가 0 인 경우 IllegalArgumentException입니다.</target>
        </trans-unit>
        <trans-unit id="26425ec5177f693a81710a97723421a2ffe11e2d" translate="yes" xml:space="preserve">
          <source>IllegalStateException if the computation detectably attempts a recursive update to this map that would otherwise never complete</source>
          <target state="translated">IllegalStateException 계산이 완료되지 않는이 맵에 대한 재귀 업데이트를 감지 할 수있는 경우</target>
        </trans-unit>
        <trans-unit id="9258bb692eaf68ff11b8313150e35bb75a82b34f" translate="yes" xml:space="preserve">
          <source>IllegalStateException if the maximum weighted capacity was not set</source>
          <target state="translated">최대 가중 용량이 설정되지 않은 경우 IllegalStateException</target>
        </trans-unit>
        <trans-unit id="80af9be8bbbc0f1890cc19171639de9e63869563" translate="yes" xml:space="preserve">
          <source>IllegalStateException this method may not be invoked at runtime. It works via a compile-time transformation of the closure source code into a String, which is sent to the &lt;a href=&quot;astbuilder#buildFromString(org.codehaus.groovy.control.CompilePhase,%20boolean,%20java.lang.String)&quot;&gt;AstBuilder.buildFromString&lt;/a&gt; method. The buildFromCode() method must be invoked against a strongly typed AstBuilder.</source>
          <target state="translated">IllegalStateException이 메서드는 런타임에 호출되지 않을 수 있습니다. 클로저 소스 코드를 &lt;a href=&quot;astbuilder#buildFromString(org.codehaus.groovy.control.CompilePhase,%20boolean,%20java.lang.String)&quot;&gt;AstBuilder.buildFromString&lt;/a&gt; 메소드로 전송되는 String으로 컴파일 타임 변환하여 작동 합니다. 강력한 형식의 AstBuilder에 대해 buildFromCode () 메서드를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="6e5a32a1bd41d5b21404f176ae361427aff05142" translate="yes" xml:space="preserve">
          <source>Immutable</source>
          <target state="translated">Immutable</target>
        </trans-unit>
        <trans-unit id="2e3839da4308a55b2d905190c12abe4986a65270" translate="yes" xml:space="preserve">
          <source>Immutable classes are particularly useful for functional and concurrent styles of programming and for use as key values within maps. If you want similar functionality to what this annotation provides but don't need immutability then consider using &lt;code&gt;@Canonical&lt;/code&gt;.</source>
          <target state="translated">변경 불가능한 클래스는 기능 및 동시 프로그래밍 스타일과 맵 내에서 키 값으로 사용하는 데 특히 유용합니다. 이 주석이 제공하는 것과 유사한 기능을 원하지만 불변성이 필요하지 않은 경우 &lt;code&gt;@Canonical&lt;/code&gt; 사용을 고려 하십시오 .</target>
        </trans-unit>
        <trans-unit id="cd72d86d41558d3f9974137a9eafb50fa818e9d3" translate="yes" xml:space="preserve">
          <source>Immutable singleton that is recommended for use when source range or any other occurrence-specific metadata is not needed.</source>
          <target state="translated">소스 범위 또는 기타 발생 특정 메타 데이터가 필요하지 않은 경우 사용하도록 권장되는 변경 불가능한 싱글 톤입니다.</target>
        </trans-unit>
        <trans-unit id="8c8566035184b0abeec02cf77bfe0810137a9b25" translate="yes" xml:space="preserve">
          <source>ImmutableBase</source>
          <target state="translated">ImmutableBase</target>
        </trans-unit>
        <trans-unit id="54769b65bb63b8a979acb6c30a0c9bc9f29d9897" translate="yes" xml:space="preserve">
          <source>ImmutableOptions</source>
          <target state="translated">ImmutableOptions</target>
        </trans-unit>
        <trans-unit id="3a4b87af21a5cceca314e63d8f0cf69189a62150" translate="yes" xml:space="preserve">
          <source>ImmutablePropertyHandler</source>
          <target state="translated">ImmutablePropertyHandler</target>
        </trans-unit>
        <trans-unit id="d3f08b4a9088d68620bccf675f3e49ef763afc8a" translate="yes" xml:space="preserve">
          <source>Implement this method in order to be notified whenever a return statement is generated.</source>
          <target state="translated">return 문이 생성 될 때마다 알림을 받으려면이 메서드를 구현하십시오.</target>
        </trans-unit>
        <trans-unit id="0c545f498c78adc1a627407c181e2bcf91837bd2" translate="yes" xml:space="preserve">
          <source>Implementation classes for SwingBuilder</source>
          <target state="translated">SwingBuilder의 구현 클래스</target>
        </trans-unit>
        <trans-unit id="40651c9b75650f4bf4e71f571b83bf813400630d" translate="yes" xml:space="preserve">
          <source>Implementation method of the alias annotation processor.</source>
          <target state="translated">별칭 주석 프로세서의 구현 방법입니다.</target>
        </trans-unit>
        <trans-unit id="935e9ddadc5d308d635ed21a2869f1b5a87d5208" translate="yes" xml:space="preserve">
          <source>Implementation method of the alias annotation processor. This method will get the list of annotations we aliased from the collector and adds it to aliasAnnotationUsage. The method will also map all members from aliasAnnotationUsage to the aliased nodes. Should a member stay unmapped, we will ad an error. Further processing of those members is done by the annotations.</source>
          <target state="translated">별칭 주석 프로세서의 구현 방법입니다. 이 메서드는 수집기에서 별칭을 지정한 주석 목록을 가져와이를 aliasAnnotationUsage에 추가합니다. 또한이 메서드는 aliasAnnotationUsage의 모든 멤버를 별칭이 지정된 노드에 매핑합니다. 회원이 매핑되지 않은 상태로 유지되면 오류가 발생합니다. 해당 멤버의 추가 처리는 주석에 의해 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="344fd948f994fa7bce1c7d72483a6f65795c5e9b" translate="yes" xml:space="preserve">
          <source>Implementation note: A slightly faster implementation of this class will be possible once planned Java Memory Model revisions are in place.</source>
          <target state="translated">구현 참고 사항 : 계획된 Java 메모리 모델 개정이 적용되면이 클래스를 약간 더 빠르게 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ddda46891b614d48be20ca4b97c58973b9a1ac6" translate="yes" xml:space="preserve">
          <source>Implementation of the left shift operator for integral types.</source>
          <target state="translated">정수 유형에 대한 왼쪽 시프트 연산자 구현.</target>
        </trans-unit>
        <trans-unit id="7741648627b95263d7debece80a8a1e5178acba1" translate="yes" xml:space="preserve">
          <source>Implementation of the left shift operator for integral types. Non integral Number types throw UnsupportedOperationException.</source>
          <target state="translated">정수 유형에 대한 왼쪽 시프트 연산자 구현. 정수가 아닌 숫자 유형은 UnsupportedOperationException을 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="77d7ad4620d5f69ebebaa1e72482294dfb93a19e" translate="yes" xml:space="preserve">
          <source>Implementation of the right shift (unsigned) operator for integral types.</source>
          <target state="translated">정수 유형에 대한 오른쪽 시프트 (부호없는) 연산자 구현.</target>
        </trans-unit>
        <trans-unit id="4659d10637094d24fbc49cb1b9e39b91e059255c" translate="yes" xml:space="preserve">
          <source>Implementation of the right shift (unsigned) operator for integral types. Non integral Number types throw UnsupportedOperationException.</source>
          <target state="translated">정수 유형에 대한 오른쪽 시프트 (부호없는) 연산자 구현. 정수가 아닌 숫자 유형은 UnsupportedOperationException을 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="aceccfe1bbe5e98b8ec1e701c20153afbbaac662" translate="yes" xml:space="preserve">
          <source>Implementation of the right shift operator for integral types.</source>
          <target state="translated">정수 유형에 대한 오른쪽 시프트 연산자 구현.</target>
        </trans-unit>
        <trans-unit id="1a21aa3ac770a4191038a7964f3bb94579deac31" translate="yes" xml:space="preserve">
          <source>Implementation of the right shift operator for integral types. Non integral Number types throw UnsupportedOperationException.</source>
          <target state="translated">정수 유형에 대한 오른쪽 시프트 연산자 구현. 정수가 아닌 숫자 유형은 UnsupportedOperationException을 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="0ed455879e3d12fa31d560f7dfc070659d901ff8" translate="yes" xml:space="preserve">
          <source>Implementation supporting &lt;code&gt;@Grape&lt;/code&gt; and &lt;code&gt;@Grab&lt;/code&gt; annotations based on Ivy.</source>
          <target state="translated">Ivy를 기반으로 &lt;code&gt;@Grape&lt;/code&gt; 및 &lt;code&gt;@Grab&lt;/code&gt; 주석을 지원하는 구현 .</target>
        </trans-unit>
        <trans-unit id="e1d650ce3925a95081925332ee5c62799056e369" translate="yes" xml:space="preserve">
          <source>Implemented here to check package access prior to returning an already loaded class.</source>
          <target state="translated">이미로드 된 클래스를 반환하기 전에 패키지 액세스를 확인하기 위해 여기에 구현되었습니다.</target>
        </trans-unit>
        <trans-unit id="dbcded04c2cf17f9e1c72930594d83adac97c7ae" translate="yes" xml:space="preserve">
          <source>Implementers of this interface can be registered in the ProxyMetaClass for notifications about method calls for objects managed by the ProxyMetaClass. See groovy/lang/InterceptorTest.groovy for details.</source>
          <target state="translated">이 인터페이스의 구현자는 ProxyMetaClass에서 관리하는 개체에 대한 메서드 호출에 대한 알림을 위해 ProxyMetaClass에 등록 할 수 있습니다. 자세한 내용은 groovy / lang / InterceptorTest.groovy를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9372245eacbc048f03913a09687b99f042a1f1cb" translate="yes" xml:space="preserve">
          <source>Implements memoize for Closures. It is supposed to be used by the Closure class itself to implement the memoize() family of methods.</source>
          <target state="translated">클로저를위한 메모를 구현합니다. memoize () 메서드 패밀리를 구현하기 위해 Closure 클래스 자체에서 사용되어야합니다.</target>
        </trans-unit>
        <trans-unit id="fb178f2f627f60411afc815962ca61b85784dccd" translate="yes" xml:space="preserve">
          <source>Implements the Completer interface to provide completions for GroovyShell by tokenizing the buffer and invoking other classes depending on the tokens found.</source>
          <target state="translated">버퍼를 토큰 화하고 발견 된 토큰에 따라 다른 클래스를 호출하여 GroovyShell에 대한 완성을 제공하는 Completer 인터페이스를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="c0d276793046cde44fe17f8078e69b751fcc36fc" translate="yes" xml:space="preserve">
          <source>Implements the Completor interface to provide competions for GroovyShell by tokenizing the buffer and invoking other classes depending on the tokens found.</source>
          <target state="translated">Completor 인터페이스를 구현하여 버퍼를 토큰 화하고 발견 된 토큰에 따라 다른 클래스를 호출하여 GroovyShell에 대한 경쟁을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f554bc2402284c53c488749e649be13a0354b39e" translate="yes" xml:space="preserve">
          <source>Implements the getAt(Collection) method for primitive type arrays.</source>
          <target state="translated">기본 유형 배열에 대한 getAt (Collection) 메소드를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="b49316ed55bda0281f8f3e716d309cfa20fe369b" translate="yes" xml:space="preserve">
          <source>Implements the getAt(Collection) method for primitive type arrays. Each value in the collection argument is assumed to be a valid array index. The value at each index is then added to a list which is returned.</source>
          <target state="translated">기본 유형 배열에 대한 getAt (Collection) 메소드를 구현합니다. 컬렉션 인수의 각 값은 유효한 배열 인덱스로 간주됩니다. 그런 다음 각 인덱스의 값이 반환되는 목록에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="53b8deeabfb15b9951d234e28c38666dc312c769" translate="yes" xml:space="preserve">
          <source>Implements the getAt(Range) method for primitive type arrays.</source>
          <target state="translated">기본 유형 배열에 대한 getAt (Range) 메소드를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="d312b00ce0dcc4d626573529bde2c1c7f8cfbbb1" translate="yes" xml:space="preserve">
          <source>Implements the getAt(int) method for primitive type arrays.</source>
          <target state="translated">기본 유형 배열에 대한 getAt (int) 메소드를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="cfc6d3ba1e1abaa97cb63bbadea3f58f41bd9663" translate="yes" xml:space="preserve">
          <source>Implements the setAt(int idx) method for primitive type arrays.</source>
          <target state="translated">기본 유형 배열에 대한 setAt (int idx) 메소드를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="7c994187cd760dda0ca4f18c3bc32ae0e7519d20" translate="yes" xml:space="preserve">
          <source>Imports a template and renders it using the specified model, allowing fine grained composition of templates and layouting.</source>
          <target state="translated">템플릿을 가져 와서 지정된 모델을 사용하여 렌더링하여 템플릿과 레이아웃을 세밀하게 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eab5e71f5c06bb46d575e93e649dc06eba10288e" translate="yes" xml:space="preserve">
          <source>Imports a template and renders it using the specified model, allowing fine grained composition of templates and layouting. This works similarily to a template include but allows a distinct model to be used. If the layout inherits from the parent model, a new model is created, with the values from the parent model, eventually overridden with those provided specifically for this layout.</source>
          <target state="translated">템플릿을 가져 와서 지정된 모델을 사용하여 렌더링하여 템플릿과 레이아웃을 세밀하게 구성 할 수 있습니다. 이는 템플릿 포함과 유사하게 작동하지만 별개의 모델을 사용할 수 있습니다. 레이아웃이 상위 모델에서 상속되는 경우 상위 모델의 값을 사용하여 새 모델이 생성되고 결국이 레이아웃에 대해 특별히 제공된 값으로 재정의됩니다.</target>
        </trans-unit>
        <trans-unit id="c75b32a393c287efb68c3e671a6dd2e068e6daf3" translate="yes" xml:space="preserve">
          <source>Imports a template and renders it using the specified model, allowing fine grained composition of templates and layouting. This works similarily to a template include but allows a distinct model to be used. This version doesn't inherit the model from the parent. If you need model inheritance, see &lt;a href=&quot;#layout(java.util.Map,%20java.lang.String,%20boolean)&quot;&gt;layout(java.util.Map, String, boolean)&lt;/a&gt;.</source>
          <target state="translated">템플릿을 가져 와서 지정된 모델을 사용하여 렌더링하여 템플릿과 레이아웃을 세밀하게 구성 할 수 있습니다. 이는 템플릿 포함과 유사하게 작동하지만 별개의 모델을 사용할 수 있습니다. 이 버전은 부모로부터 모델을 상속하지 않습니다. 모델 상속이 필요한 경우 &lt;a href=&quot;#layout(java.util.Map,%20java.lang.String,%20boolean)&quot;&gt;layout (java.util.Map, String, boolean)을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="48c1330801d4dccc5ea8a4a4f2bd39dfe7e6714d" translate="yes" xml:space="preserve">
          <source>In Groovy, return, break, continue, throw, and assert can be used in a parenthesized expression context.</source>
          <target state="translated">Groovy에서 return, break, continue, throw 및 assert는 괄호로 묶인 식 컨텍스트에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7bc9e5f8cf5f647c49af8253387a44211f0eba36" translate="yes" xml:space="preserve">
          <source>In Groovy, return, break, continue, throw, and assert can be used in a parenthesized expression context. Example: println (x || (return)); println assert x, &quot;won't print a false value!&quot; If an optional expression is missing, its value is void (this coerces to null when a value is required).</source>
          <target state="translated">Groovy에서 return, break, continue, throw 및 assert는 괄호로 묶인 식 컨텍스트에서 사용할 수 있습니다. 예 : println (x || (return)); println assert x, &quot;잘못된 값을 인쇄하지 않습니다!&quot; 선택적 표현식이 누락 된 경우 해당 값은 void입니다 (값이 필요한 경우 null로 강제 변환 됨).</target>
        </trans-unit>
        <trans-unit id="0e738126f8c85f5c570a8505f3ef087f65262374" translate="yes" xml:space="preserve">
          <source>In Java, &quot;if&quot;, &quot;while&quot;, and &quot;for&quot; statements can take random, non-braced statements as their bodies.</source>
          <target state="translated">Java에서 &quot;if&quot;, &quot;while&quot;및 &quot;for&quot;문은 중괄호가 아닌 임의의 문을 본문으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1b516f0fc02b5f1b453bc01a427a29507de351c5" translate="yes" xml:space="preserve">
          <source>In Java, &quot;if&quot;, &quot;while&quot;, and &quot;for&quot; statements can take random, non-braced statements as their bodies. Support this practice, even though it isn't very Groovy.</source>
          <target state="translated">Java에서 &quot;if&quot;, &quot;while&quot;및 &quot;for&quot;문은 중괄호가 아닌 임의의 문을 본문으로 사용할 수 있습니다. 그루비는 아니지만이 방법을 지원하십시오.</target>
        </trans-unit>
        <trans-unit id="f7d1a7aea3eb56854c467b12c9c106c619d631a8" translate="yes" xml:space="preserve">
          <source>In a chain of data manipulators some behaviour is common. TableMap provides most of this behaviour and can be subclassed by filters that only need to override a handful of specific methods. TableMap implements TableModel by routing all requests to its model, and TableModelListener by routing all events to its listeners. Inserting a TableMap which has not been subclassed into a chain of table filters should have no effect.</source>
          <target state="translated">일련의 데이터 조작자에서 일부 동작은 일반적입니다. TableMap은 이러한 동작의 대부분을 제공하며 몇 가지 특정 메서드 만 재정의하면되는 필터로 하위 클래스화할 수 있습니다. TableMap은 모든 요청을 해당 모델로 라우팅하여 TableModel을 구현하고 모든 이벤트를 해당 리스너로 라우팅하여 TableModelListener를 구현합니다. 서브 클래 싱되지 않은 TableMap을 테이블 필터 체인에 삽입해도 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="ac8898ab55e87cf3747b265d8a0bbe0cc8803f6b" translate="yes" xml:space="preserve">
          <source>In addition to internal caches this method also clears any previously set MetaClass information for the given set of classes being removed.</source>
          <target state="translated">내부 캐시 외에도이 메서드는 제거되는 지정된 클래스 집합에 대해 이전에 설정된 MetaClass 정보를 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="a5d8d159a911a775ded0353a2d395078754090cb" translate="yes" xml:space="preserve">
          <source>In addition to the map constructor, provide a no-arg constructor which calls the map constructor with an empty map.</source>
          <target state="translated">지도 생성자 외에도 빈지도로지도 생성자를 호출하는 인수없는 생성자를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="560ee3b74fabd40d5a818607c3c7362dd571394e" translate="yes" xml:space="preserve">
          <source>In addition, the &lt;code&gt;metaClosure&lt;/code&gt; will be called once passing in the &lt;code&gt;ResultSetMetaData&lt;/code&gt; as argument.</source>
          <target state="translated">또한 &lt;code&gt;metaClosure&lt;/code&gt; 는 &lt;code&gt;ResultSetMetaData&lt;/code&gt; 를 인수로 전달하면 호출 됩니다.</target>
        </trans-unit>
        <trans-unit id="78cb48f324910a1a5154fd739a7750443a3c2ed8" translate="yes" xml:space="preserve">
          <source>In addition, the &lt;code&gt;metaClosure&lt;/code&gt; will be called once passing in the &lt;code&gt;ResultSetMetaData&lt;/code&gt; as argument. The query may contain GString expressions.</source>
          <target state="translated">또한 &lt;code&gt;metaClosure&lt;/code&gt; 는 &lt;code&gt;ResultSetMetaData&lt;/code&gt; 를 인수로 전달하면 호출 됩니다. 쿼리에는 GString 표현식이 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d89b7fde6e771767e533b9acead2af3b0ea98651" translate="yes" xml:space="preserve">
          <source>In addition, the &lt;code&gt;metaClosure&lt;/code&gt; will be called once passing in the &lt;code&gt;ResultSetMetaData&lt;/code&gt; as argument. The query may contain placeholder question marks which match the given list of parameters.</source>
          <target state="translated">또한 &lt;code&gt;metaClosure&lt;/code&gt; 는 &lt;code&gt;ResultSetMetaData&lt;/code&gt; 를 인수로 전달하면 호출 됩니다. 쿼리에는 주어진 매개 변수 목록과 일치하는 자리 표시 자 물음표가 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="391f1a755656a8aebdd61842ad7313b3e1d04856" translate="yes" xml:space="preserve">
          <source>In addition, you can add any valid Ivy attributes at the end of your string value using semi-colon separated name = value pairs, e.g.:</source>
          <target state="translated">또한 세미콜론으로 구분 된 이름 = 값 쌍을 사용하여 문자열 값 끝에 유효한 Ivy 속성을 추가 할 수 있습니다. 예 :</target>
        </trans-unit>
        <trans-unit id="661369e292c2c2ef57b20567d0751eec05cbf599" translate="yes" xml:space="preserve">
          <source>In cases when there are multiple &lt;code&gt;@DelegatesTo.Target&lt;/code&gt; annotated parameters, this member should be set to the DelegatesTo.Target#value() of the correct target.</source>
          <target state="translated">&lt;code&gt;@DelegatesTo.Target&lt;/code&gt; 어노테이션이있는 매개 변수 가 여러 개인 경우이 멤버는 올바른 대상의 DelegatesTo.Target # value ()로 설정되어야합니다.</target>
        </trans-unit>
        <trans-unit id="4efa70c8b0d453566afda894e9eacf0dc41e6fcf" translate="yes" xml:space="preserve">
          <source>In essence we start with a closure on the form:</source>
          <target state="translated">본질적으로 우리는 양식에 대한 폐쇄로 시작합니다.</target>
        </trans-unit>
        <trans-unit id="7826837060358c204ea0f1d5c344aa69c88bd9bb" translate="yes" xml:space="preserve">
          <source>In general, the order in which the map contents are processed cannot be guaranteed. In practise, specialized forms of Map, e.g. a TreeMap will have its contents processed according to the natural ordering of the map.</source>
          <target state="translated">일반적으로지도 콘텐츠의 처리 순서는 보장 할 수 없습니다. 실제로, 특수화 된 형태의 Map, 예를 들어 TreeMap은 맵의 자연스러운 순서에 따라 콘텐츠를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="ddad056e2794ccb282e28f4c5b21a2897193e2fd" translate="yes" xml:space="preserve">
          <source>In many scenarios, it is better to overwrite the invokeCustom method where the core Object related methods are filtered out.</source>
          <target state="translated">많은 시나리오에서 핵심 Object 관련 메서드가 필터링되는 invokeCustom 메서드를 덮어 쓰는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="a45ee100b9cdac2bc1d12748aad07f149d7a6dc7" translate="yes" xml:space="preserve">
          <source>In order to modify JLine Behavior, we need to wrap the IO streams so we can hack into them This allows autoindent and redisplaying the chars typed so far after exceptions during completion</source>
          <target state="translated">JLine Behavior를 수정하려면 IO 스트림을 래핑하여 해킹 할 수 있도록해야합니다. 이렇게하면 완료 중 예외가 발생한 후 지금까지 입력 한 문자를 자동 들여 쓰기하고 다시 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="14ad66ba5554bcc9cee69aad54f7f268a92e9f04" translate="yes" xml:space="preserve">
          <source>In order to support class-loading-troubles-debugging with Tomcat 4 or higher, you can log the class loader responsible for loading some classes. See &lt;a href=&quot;https://issues.apache.org/jira/browse/GROOVY-861&quot;&gt;GROOVY-861&lt;/a&gt; for details. The servlet init parameter name is:</source>
          <target state="translated">Tomcat 4 이상에서 class-loading-troubles-debugging을 지원하려면 일부 클래스를로드하는 클래스 로더를 로깅 할 수 있습니다. 자세한 내용은 &lt;a href=&quot;https://issues.apache.org/jira/browse/GROOVY-861&quot;&gt;GROOVY-861&lt;/a&gt; 을 참조하십시오. 서블릿 초기화 매개 변수 이름은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e5ad142c70af59aa4d257bbc55331a8aa6fbc22c" translate="yes" xml:space="preserve">
          <source>In previous Groovy versions, such methods could only be defined in a single class called &lt;a href=&quot;../defaultgroovymethods&quot;&gt;DefaultGroovyMethods&lt;/a&gt; for instance methods, and &lt;a href=&quot;../defaultgroovystaticmethods&quot;&gt;DefaultGroovyStaticMethods&lt;/a&gt; for static methods.</source>
          <target state="translated">이전 Groovy 버전에서 이러한 메서드는 인스턴스 메서드의 경우 &lt;a href=&quot;../defaultgroovystaticmethods&quot;&gt;DefaultGroovyMethods&lt;/a&gt; , 정적 메서드의 경우 &lt;a href=&quot;../defaultgroovymethods&quot;&gt;DefaultGroovyStaticMethods&lt;/a&gt; 라는 단일 클래스에서만 정의 할 수있었습니다 .</target>
        </trans-unit>
        <trans-unit id="45a0d1c9d551c89c05e8dffb936ada3cd37caa10" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;code&gt;super.clone()&lt;/code&gt; is called which in this case calls &lt;code&gt;clone()&lt;/code&gt; from &lt;code&gt;java.lang.Object&lt;/code&gt;. This does a bit-wise copy of all the properties (references and primitive values). Properties like &lt;code&gt;first&lt;/code&gt; has type &lt;code&gt;String&lt;/code&gt; which is not &lt;code&gt;Cloneable&lt;/code&gt; so it is left as the bit-wise copy. Both &lt;code&gt;Date&lt;/code&gt; and &lt;code&gt;ArrayList&lt;/code&gt; are &lt;code&gt;Cloneable&lt;/code&gt; so the &lt;code&gt;clone()&lt;/code&gt; method on each of those properties will be called. For the list, a shallow copy is made during its &lt;code&gt;clone()&lt;/code&gt; method.</source>
          <target state="translated">위의 예에서 &lt;code&gt;super.clone()&lt;/code&gt; 이 호출 되며이 경우 &lt;code&gt;java.lang.Object&lt;/code&gt; 에서 &lt;code&gt;clone()&lt;/code&gt; 을 호출합니다 . 이것은 모든 속성 (참조 및 기본 값)의 비트 단위 복사를 수행합니다. &lt;code&gt;first&lt;/code&gt; 와 같은 속성 에는 &lt;code&gt;Cloneable&lt;/code&gt; 이 아닌 &lt;code&gt;String&lt;/code&gt; 유형 이 있으므로 비트 단위 복사본으로 남습니다. 두 &lt;code&gt;Date&lt;/code&gt; 와 &lt;code&gt;ArrayList&lt;/code&gt; 있습니다 &lt;code&gt;Cloneable&lt;/code&gt; 을 너무 &lt;code&gt;clone()&lt;/code&gt; 이러한 속성의 각 메소드가 호출됩니다. 목록의 경우 &lt;code&gt;clone()&lt;/code&gt; 메서드 중에 얕은 복사본이 만들어집니다 .</target>
        </trans-unit>
        <trans-unit id="c961f595aa1b66614bf543f7a3520b53429152b2" translate="yes" xml:space="preserve">
          <source>In the above example, since &lt;code&gt;hasNext&lt;/code&gt; returns false, the &lt;code&gt;next&lt;/code&gt; method should never be called, so any dummy implementation would do for &lt;code&gt;next&lt;/code&gt;. The &quot;empty&quot; implementation provided by default when using &lt;code&gt;@AutoImplement&lt;/code&gt; will suffice - which effectively returns &lt;code&gt;null&lt;/code&gt; in Groovy for non-void, non-primitive methods. As a point of interest, the default implementation for methods returning primitive types is to return the default value (which incidentally never satisfies Groovy truth). For &lt;code&gt;boolean&lt;/code&gt; this means returning &lt;code&gt;false&lt;/code&gt;, so for the above example we could have (albeit perhaps less instructive of our intent) by just using:</source>
          <target state="translated">때문에 위의 예에서, &lt;code&gt;hasNext&lt;/code&gt; 가 false를 돌려는 &lt;code&gt;next&lt;/code&gt; 어떤 더미 구현을 위해 할 것이다, 그래서 방법은 호출되지 않아야 &lt;code&gt;next&lt;/code&gt; . &lt;code&gt;@AutoImplement&lt;/code&gt; 를 사용할 때 기본적으로 제공되는 &quot;빈&quot;구현으로 충분합니다. 이는 무효가 아닌 원시 메서드에 대해 Groovy에서 효과적으로 &lt;code&gt;null&lt;/code&gt; 을 반환 합니다. 흥미로운 점으로, 기본 유형을 반환하는 메서드의 기본 구현은 기본값을 반환하는 것입니다 (부수적으로 Groovy 진실을 충족하지 않음). 들어 &lt;code&gt;boolean&lt;/code&gt; 이 수단이 돌아 &lt;code&gt;false&lt;/code&gt; 위의 예를 들어, 그래서 우리는 단지 사용하여 (우리의 의도 아마도 덜 교육적이기는하지만) 수 :</target>
        </trans-unit>
        <trans-unit id="76b2bf06ad75750d4e298c5d4bd3ee4673aeab78" translate="yes" xml:space="preserve">
          <source>In the above example.</source>
          <target state="translated">위의 예에서.</target>
        </trans-unit>
        <trans-unit id="398d527bbb278129aa090563201fa72f4322ea64" translate="yes" xml:space="preserve">
          <source>In the case of a &lt;em&gt;Object.with { ... }&lt;/em&gt; call, this method is supposed to retrieve the inferred closure return type.</source>
          <target state="translated">a의 경우 &lt;em&gt;Object.with {...}&lt;/em&gt; 호출,이 방법은 추정 폐쇄 반환 유형을 검색 할 예정이다.</target>
        </trans-unit>
        <trans-unit id="c71c1c9300505d5197cbeae407764360330a2b06" translate="yes" xml:space="preserve">
          <source>In the example above we have Alias as the alias annotation and an argument excludes which will be mapped to ToString and EqualsAndHashCode. Immutable doesn't have excludes, thus nothing will be done there.</source>
          <target state="translated">위의 예에서 별칭 주석으로 Alias가 있고 ToString 및 EqualsAndHashCode에 매핑 될 인수가 제외됩니다. Immutable에는 제외가 없으므로 아무 작업도 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b4319a417d236b315c3ddb01cf87a1373fda4b86" translate="yes" xml:space="preserve">
          <source>In the example above we have again Alias as the alias annotation, but this time the argument is part of the alias. Instead of mapping excludes to ToString as well as EqualsAndHashCode, only ToString will have the excludes. Again the alias can have an argument excludes, which would overwrite the excludes given in from the definition and be mapped to ToString as well as EqualsAndHashCode. If both ways are combined, then the list overwrites annotation usage. NOTE: The aliasing does not support aliasing of aliased annotations.</source>
          <target state="translated">위의 예에서 별칭 주석으로 Alias가 다시 있지만 이번에는 인수가 별칭의 일부입니다. 제외를 ToString 및 EqualsAndHashCode에 매핑하는 대신 ToString에만 제외가 있습니다. 다시 별칭은 excludes 인수를 가질 수 있으며, 이는 정의에서 제공된 제외를 덮어 쓰고 EqualsAndHashCode뿐만 아니라 ToString에 매핑됩니다. 두 가지 방법이 결합 된 경우 목록이 주석 사용을 덮어 씁니다. 참고 : 앨리어싱은 앨리어싱 된 주석의 앨리어싱을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2804ef58cc247133102f1dfbd63188258d7e32e8" translate="yes" xml:space="preserve">
          <source>In the presence of method overloading and method overriding you might run into situations where a call is considered recursive although it really is not.</source>
          <target state="translated">메서드 오버로딩 및 메서드 재정의가있는 경우 호출이 실제로는 아니지만 재귀 적으로 간주되는 상황에 처할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d9b11dbffee5a4b8c9412d03ea2ceda7b10e5c1" translate="yes" xml:space="preserve">
          <source>In this case, the parameter(s) for the constructor or static method become the properties available in the builder. For the case of a static method, the return type of the static method becomes the class of the instance being created. For static factory methods, this is normally the class containing the static method but in general it can be any class. Note: if using more than one &lt;code&gt;@Builder&lt;/code&gt; annotation, which is only possible when using static method or constructor variants, it is up to you to ensure that any generated helper classes or builder methods have unique names. E.g. we can modify the previous example to have three builders. At least two of the builders in our case will need to set the 'builderClassName' and 'builderMethodName' annotation attributes to ensure we have unique names. This is shown in the following example:</source>
          <target state="translated">이 경우 생성자 또는 정적 메서드의 매개 변수는 빌더에서 사용 가능한 속성이됩니다. 정적 메서드의 경우 정적 메서드의 반환 유형이 생성되는 인스턴스의 클래스가됩니다. 정적 팩토리 메소드의 경우 일반적으로 정적 메소드를 포함하는 클래스이지만 일반적으로 모든 클래스가 될 수 있습니다. 참고 : 하나 이상의 &lt;code&gt;@Builder&lt;/code&gt; 를 사용하는 경우주석은 정적 메서드 또는 생성자 변형을 사용할 때만 가능합니다. 생성 된 모든 도우미 클래스 또는 빌더 메서드에 고유 한 이름이 있는지 확인하는 것은 사용자에게 달려 있습니다. 예를 들어 이전 예제를 3 개의 빌더로 수정할 수 있습니다. 우리의 경우 적어도 두 개의 빌더는 고유 한 이름을 갖도록 'builderClassName'및 'builderMethodName'주석 속성을 설정해야합니다. 이는 다음 예에 나와 있습니다.</target>
        </trans-unit>
        <trans-unit id="bc3739dbec9e244b09e9db80740990dfb0930ab5" translate="yes" xml:space="preserve">
          <source>In this case, your template source file should be HTML with the appropriate embedded placeholders.</source>
          <target state="translated">이 경우 템플릿 소스 파일은 적절한 삽입 된 자리 표시자가있는 HTML이어야합니다.</target>
        </trans-unit>
        <trans-unit id="de44e3e9cd5cbc81afe2b348cd97a03de868714d" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;Event&lt;/code&gt; class will have a method called &lt;code&gt;before(Date otherDate)&lt;/code&gt; as well as other public methods of the &lt;code&gt;Date&lt;/code&gt; class. The implementation of the &lt;code&gt;before()&lt;/code&gt; method will look like this:</source>
          <target state="translated">이 예제에서 &lt;code&gt;Event&lt;/code&gt; 클래스에는 &lt;code&gt;before(Date otherDate)&lt;/code&gt; 라는 메서드와 &lt;code&gt;Date&lt;/code&gt; 클래스 의 다른 공용 메서드가 있습니다. &lt;code&gt;before()&lt;/code&gt; 메서드 의 구현 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c3b54a6ae1487664290ae93480a2f6026f492088" translate="yes" xml:space="preserve">
          <source>In this example, the base script of the current script will be changed to &lt;code&gt;CustomScript&lt;/code&gt; allowing usage of &lt;code&gt;getTheMeaningOfLife()&lt;/code&gt; method. &lt;code&gt;baseScript&lt;/code&gt; variable will become typed shortcut for &lt;code&gt;this&lt;/code&gt; object which enables better IDE support.</source>
          <target state="translated">이 예에서 현재 스크립트 기반 스크립트는 변경 될 &lt;code&gt;CustomScript&lt;/code&gt; 의 사용 가능 &lt;code&gt;getTheMeaningOfLife()&lt;/code&gt; 방법. &lt;code&gt;baseScript&lt;/code&gt; 변수는 더 나은 IDE 지원을 가능하게하는 &lt;code&gt;this&lt;/code&gt; 개체의 입력 된 바로 가기가됩니다 .</target>
        </trans-unit>
        <trans-unit id="c4d023660251369695912411539ddc1e95f260aa" translate="yes" xml:space="preserve">
          <source>In this example, without the annotation, variable &lt;code&gt;awe&lt;/code&gt; would be a local script variable (technically speaking it will be a local variable within the &lt;code&gt;run&lt;/code&gt; method of the script class). Such a local variable would not be visible inside the &lt;code&gt;awesum&lt;/code&gt; method. With the annotation, &lt;code&gt;awe&lt;/code&gt; becomes a private List field in the script class and is visible within the &lt;code&gt;awesum&lt;/code&gt; method.</source>
          <target state="translated">이 예에서 주석이 없으면 변수 &lt;code&gt;awe&lt;/code&gt; 는 로컬 스크립트 변수가됩니다 (기술적으로 말하면 스크립트 클래스 의 &lt;code&gt;run&lt;/code&gt; 메서드 내에서 로컬 변수가됩니다 ). 이러한 지역 변수는 &lt;code&gt;awesum&lt;/code&gt; 메서드 내에서 볼 수 없습니다 . 주석을 사용하면 &lt;code&gt;awe&lt;/code&gt; 는 스크립트 클래스에서 비공개 목록 필드가되고 &lt;code&gt;awesum&lt;/code&gt; 메서드 내에서 볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c39b7e0b217eb469e199200ed5b1a95c137d92d6" translate="yes" xml:space="preserve">
          <source>In this method, you are given a ClassNode, a field name and a category name, and you must add a new Field onto the class.</source>
          <target state="translated">이 메서드에서는 ClassNode, 필드 이름 및 범주 이름이 제공되며 클래스에 새 필드를 추가해야합니다.</target>
        </trans-unit>
        <trans-unit id="6665bad8119f1bd7f2518f89949adca37cd36bbc" translate="yes" xml:space="preserve">
          <source>In this method, you are given a ClassNode, a field name and a category name, and you must add a new Field onto the class. Return the result of the ClassNode.addField operations.</source>
          <target state="translated">이 메서드에서는 ClassNode, 필드 이름 및 범주 이름이 제공되며 클래스에 새 필드를 추가해야합니다. ClassNode.addField 작업의 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1ae4ccb76f0db2cdb3f0c74d0410c8f11a15c277" translate="yes" xml:space="preserve">
          <source>Include fields as well as properties in equals and hashCode calculations.</source>
          <target state="translated">equals 및 hashCode 계산에 필드와 속성을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="c828a1230ccbee289e6dea690133fb83c0b90210" translate="yes" xml:space="preserve">
          <source>Include fields as well as properties in the generated toString.</source>
          <target state="translated">생성 된 toString에 필드와 속성을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="d073a3a7d666cfeda89e25193e056818e167c36e" translate="yes" xml:space="preserve">
          <source>Include fields as well as properties in the generated toString. Fields come after any properties.</source>
          <target state="translated">생성 된 toString에 필드와 속성을 포함합니다. 필드는 속성 뒤에옵니다.</target>
        </trans-unit>
        <trans-unit id="c64c570555f732f9916d71dc427343992febc276" translate="yes" xml:space="preserve">
          <source>Include fields as well as properties when cloning.</source>
          <target state="translated">복제 할 때 속성과 필드를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="7860a567b2da95da693eab6763b3d1241859e8f2" translate="yes" xml:space="preserve">
          <source>Include fields as well as properties when externalizing.</source>
          <target state="translated">외부화 할 때 필드와 속성을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="dc1ea7b64049e095cf8d9133182c579185333bb6" translate="yes" xml:space="preserve">
          <source>Include fields as well as properties when verifying externalization properties.</source>
          <target state="translated">외부화 속성을 확인할 때 속성과 필드를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="9d5722b5ace7ec1e35c8f2b30fb4c4411fc92d12" translate="yes" xml:space="preserve">
          <source>Include fields from super classes in the constructor.</source>
          <target state="translated">생성자에 슈퍼 클래스의 필드를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="09ad9eb1f2e997d37ca654a1b8c0557fd88bc9e9" translate="yes" xml:space="preserve">
          <source>Include fields from super classes in the constructor. Groovy properties, JavaBean properties and fields (in that order) from superclasses come before the members from a subclass (unless 'includes' is used to determine the order).</source>
          <target state="translated">생성자에 슈퍼 클래스의 필드를 포함합니다. 슈퍼 클래스의 Groovy 속성, JavaBean 속성 및 필드 (순서대로)는 하위 클래스의 멤버보다 먼저옵니다 (순서를 결정하는 데 'includes'가 사용되지 않는 한).</target>
        </trans-unit>
        <trans-unit id="50bfc4af25ee043a076484cd1b5a91e929b8bfd5" translate="yes" xml:space="preserve">
          <source>Include fields in the constructor.</source>
          <target state="translated">생성자에 필드를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="f469808a26a6bbb0467d23661d335f208326a081" translate="yes" xml:space="preserve">
          <source>Include fields in the constructor. Fields come after any properties.</source>
          <target state="translated">생성자에 필드를 포함합니다. 필드는 속성 뒤에옵니다.</target>
        </trans-unit>
        <trans-unit id="f2b8d5528f4b0b7bbae4e0f9a674154c2990c5c5" translate="yes" xml:space="preserve">
          <source>Include properties from super classes in the constructor.</source>
          <target state="translated">생성자에 슈퍼 클래스의 속성을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="400a8891d3f031e65f5e2aa3e1e6df8635428dab" translate="yes" xml:space="preserve">
          <source>Include properties from super classes in the constructor. Groovy properties, JavaBean properties and fields (in that order) from superclasses come before the members from a subclass (unless 'includes' is used to determine the order).</source>
          <target state="translated">생성자에 슈퍼 클래스의 속성을 포함합니다. 슈퍼 클래스의 Groovy 속성, JavaBean 속성 및 필드 (순서대로)는 하위 클래스의 멤버보다 먼저옵니다 (순서를 결정하는 데 'includes'가 사용되지 않는 한).</target>
        </trans-unit>
        <trans-unit id="15996bc60c75db626a50053404bf46a781426e15" translate="yes" xml:space="preserve">
          <source>Include properties in the constructor.</source>
          <target state="translated">생성자에 속성을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="345b73a890e8c3e03f6651ad3bcad29be1a9dff5" translate="yes" xml:space="preserve">
          <source>Include super fields in the generated toString.</source>
          <target state="translated">생성 된 toString에 수퍼 필드를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="8d599a640b7926068fb069414072f67dda1f3c61" translate="yes" xml:space="preserve">
          <source>Include super fields in the generated toString. Groovy properties, JavaBean properties and fields (in that order) from superclasses come after the members from a subclass (unless 'includes' is used to determine the order).</source>
          <target state="translated">생성 된 toString에 수퍼 필드를 포함합니다. 수퍼 클래스의 Groovy 속성, JavaBean 속성 및 필드 (순서대로)는 하위 클래스의 멤버 뒤에옵니다 (순서를 결정하는 데 'includes'가 사용되지 않는 한).</target>
        </trans-unit>
        <trans-unit id="ea5774487b882678a03293876f43087c3f8af6b9" translate="yes" xml:space="preserve">
          <source>Include visible fields from super classes in the constructor.</source>
          <target state="translated">생성자에 슈퍼 클래스의 표시 필드를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="8356a7c79eed62ee5b3c0381729058e4135d0f60" translate="yes" xml:space="preserve">
          <source>Include visible fields from super classes in the constructor. Groovy properties, JavaBean properties and fields (in that order) from superclasses come before the members from a subclass (unless 'includes' is used to determine the order).</source>
          <target state="translated">생성자에 슈퍼 클래스에서 보이는 필드를 포함합니다. 슈퍼 클래스의 Groovy 속성, JavaBean 속성 및 필드 (순서대로)는 하위 클래스의 멤버보다 먼저옵니다 (순서를 결정하는 데 'includes'가 사용되지 않는 한).</target>
        </trans-unit>
        <trans-unit id="6cbcf96558c836bf857abb1a76a392639ccd39e0" translate="yes" xml:space="preserve">
          <source>Include whitespace tokens.</source>
          <target state="translated">공백 토큰을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="36b0cee182e9b536cbd58dc99bcca24daea7018e" translate="yes" xml:space="preserve">
          <source>Include whitespace tokens. Note that this breaks the parser.</source>
          <target state="translated">공백 토큰을 포함합니다. 이로 인해 파서가 중단됩니다.</target>
        </trans-unit>
        <trans-unit id="f675b35064da76cf0f99afe3d1232be006ab091e" translate="yes" xml:space="preserve">
          <source>Included enum types in this package.</source>
          <target state="translated">이 패키지에 포함 된 열거 형입니다.</target>
        </trans-unit>
        <trans-unit id="ad8101fdfa12bd2afd7603a3769d1bd20f15c337" translate="yes" xml:space="preserve">
          <source>Included errors in this package.</source>
          <target state="translated">이 패키지에 오류가 포함되었습니다.</target>
        </trans-unit>
        <trans-unit id="3536d6b2571bd5e2da3d7b13a5ad28c3e43e7e2c" translate="yes" xml:space="preserve">
          <source>Included exceptions in this package.</source>
          <target state="translated">이 패키지에는 예외가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="a31e9e05626ce9bc6bd56c0f66c3968378e47823" translate="yes" xml:space="preserve">
          <source>Included interfaces in this package.</source>
          <target state="translated">이 패키지에 포함 된 인터페이스.</target>
        </trans-unit>
        <trans-unit id="9b4de5d26b79350fd3a2d84ab681c4b93524558b" translate="yes" xml:space="preserve">
          <source>Included ordinary classes in this package.</source>
          <target state="translated">이 패키지에는 일반 수업이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ce93040f2bbde2501f5743d59fd52bfedd4c57f" translate="yes" xml:space="preserve">
          <source>Includes another template inside this template.</source>
          <target state="translated">이 템플릿 안에 다른 템플릿을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="04c446d4b2f7da094a7aa2938d636b9a4aafe411" translate="yes" xml:space="preserve">
          <source>Includes contents of another file, not as a template but as escaped text.</source>
          <target state="translated">템플릿이 아니라 이스케이프 된 텍스트로 다른 파일의 내용을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="9e1e28ba5bf4463b6673389c543d4bdea0a07d1c" translate="yes" xml:space="preserve">
          <source>Includes contents of another file, not as a template but as unescaped text.</source>
          <target state="translated">템플릿이 아닌 이스케이프 처리되지 않은 텍스트로 다른 파일의 내용을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="0de98a6813b057074479b8a095aa9aaa5efa9199" translate="yes" xml:space="preserve">
          <source>Incorrect class or method access modifiers</source>
          <target state="translated">잘못된 클래스 또는 메서드 액세스 수정 자</target>
        </trans-unit>
        <trans-unit id="5e4e8fabf3def3ed3aa13d0b146a1bcb1e81bd3c" translate="yes" xml:space="preserve">
          <source>Increment a Calendar by one day.</source>
          <target state="translated">달력을 하루 씩 늘립니다.</target>
        </trans-unit>
        <trans-unit id="2130f07cf98313196621bf7eb03f08d4372f5e48" translate="yes" xml:space="preserve">
          <source>Increment a Character by one.</source>
          <target state="translated">캐릭터를 1 씩 증가시킵니다.</target>
        </trans-unit>
        <trans-unit id="18baeff2e56c096a42f9d7fa3562b117d6bdcb34" translate="yes" xml:space="preserve">
          <source>Increment a Date by one day.</source>
          <target state="translated">날짜를 하루 씩 늘립니다.</target>
        </trans-unit>
        <trans-unit id="e676450834683edb9bca6cb9bd67640d33572c28" translate="yes" xml:space="preserve">
          <source>Increment a Number by one.</source>
          <target state="translated">숫자를 1 씩 증가시킵니다.</target>
        </trans-unit>
        <trans-unit id="7e666c2e9c4eca966b4e7f4f22713640172b0012" translate="yes" xml:space="preserve">
          <source>Increment a java.sql.Date by one day.</source>
          <target state="translated">java.sql.Date를 하루 씩 늘립니다.</target>
        </trans-unit>
        <trans-unit id="8f4438848e5dcdbecd68e2ee08cdc58548f3283e" translate="yes" xml:space="preserve">
          <source>Increments batch count (after addBatch(..) has been called) and execute &lt;code&gt;delegate.executeBatch()&lt;/code&gt; if batchSize has been reached.</source>
          <target state="translated">addBatch (..)가 호출 된 후 일괄 처리 수를 늘리고 batchSize에 도달하면 &lt;code&gt;delegate.executeBatch()&lt;/code&gt; 실행 합니다.</target>
        </trans-unit>
        <trans-unit id="8df654d78d1e52f736e37daa71a518bea8977a19" translate="yes" xml:space="preserve">
          <source>Increments by one</source>
          <target state="translated">1 씩 증가</target>
        </trans-unit>
        <trans-unit id="340e104d8c94c234cc284d3169443867ddb5a757" translate="yes" xml:space="preserve">
          <source>IndentPrinter(Writer, String)</source>
          <target state="translated">IndentPrinter (작성기, 문자열)</target>
        </trans-unit>
        <trans-unit id="4c09b0da1e60181c4f58437e4da7193acba519e6" translate="yes" xml:space="preserve">
          <source>IndentPrinter(Writer, String, boolean)</source>
          <target state="translated">IndentPrinter (작성기, 문자열, 부울)</target>
        </trans-unit>
        <trans-unit id="011c729e05413a2d998282aedce187ab410703d1" translate="yes" xml:space="preserve">
          <source>IndentPrinter.IndentPrinter</source>
          <target state="translated">IndentPrinter.IndentPrinter</target>
        </trans-unit>
        <trans-unit id="33531defa11460112257e84636254d0ce04bd6e3" translate="yes" xml:space="preserve">
          <source>Indention by default is 2 characters but can be changed by passing a different value as a constructor argument.</source>
          <target state="translated">기본적으로 들여 쓰기는 2 자이지만 생성자 인수로 다른 값을 전달하여 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bfd2a4ef244c8714c3075fce5a24010de2edf97d" translate="yes" xml:space="preserve">
          <source>Index overlay parsers (INDEX_OVERLAY and LAX) are the fastest JSON parsers. However they are not the default for a good reason. Index overlay parsers has pointers (indexes really) to original char buffer. Care must be used if putting parsed maps into a long term cache as members of map maybe index overlay objects pointing to original buffer. You can mitigate these risks by using chop and lazy chop properties.  Chop eagerly dices up the buffer so each Value element points to a small copy of the original buffer.  Lazy Chop dices up the buffer when a list get or map get is called so if an GPath expression or such is applied.  You do not need chop or lazy chop if you are NOT putting the map into a long term cache. You do not need chop or lazy chop if you are doing object de-serialization. Recommendation is to use INDEX_OVERLAY for JSON buffers under 2MB. The maxSizeForInMemory is set to 2MB and any file over 2MB will use a parser designed for large files, which is slower than the INDEX_OVERLAY, LAX, and CHAR_BUFFER parsers, but faster than most commonly used JSON parsers on the JVM for most use cases circa January 2014.  To enable the INDEX_OVERLAY parser do this: &lt;code&gt;&lt;pre&gt;
             parser = new JsonSlurper().setType(JsonParserType.INDEX_OVERLAY);
 &lt;/pre&gt;&lt;/code&gt;</source>
          <target state="translated">인덱스 오버레이 파서 (INDEX_OVERLAY 및 LAX)는 가장 빠른 JSON 파서입니다. 그러나 정당한 이유로 기본값이 아닙니다. 인덱스 오버레이 파서에는 원래 문자 버퍼에 대한 포인터 (실제로 인덱스)가 있습니다. 맵의 구성원이 원래 버퍼를 가리키는 오버레이 객체를 색인화 할 수 있으므로 파싱 된 맵을 장기 캐시에 넣는 경우주의해야합니다. chop 및 lazy chop 속성을 사용하여 이러한 위험을 완화 할 수 있습니다. 각 값 요소가 원본 버퍼의 작은 복사본을 가리 키도록 열심히 버퍼를 잘라냅니다. Lazy Chop은 GPath 표현식 등이 적용될 때 list get 또는 map get이 호출 될 때 버퍼를 깎습니다. 장기 캐시에 맵을 넣지 않는 경우 찹 또는 게으른 찹이 필요하지 않습니다. 객체 역 직렬화를 수행하는 경우 절단 또는 지연 절단이 필요하지 않습니다. 권장 사항은 2MB 미만의 JSON 버퍼에 INDEX_OVERLAY를 사용하는 것입니다.maxSizeForInMemory는 2MB로 설정되고 2MB를 초과하는 모든 파일은 INDEX_OVERLAY, LAX 및 CHAR_BUFFER 파서보다 느리지 만 1 월경 대부분의 사용 사례에서 JVM에서 가장 일반적으로 사용되는 JSON 파서보다 빠른 대용량 파일 용으로 설계된 파서를 사용합니다. 2014. INDEX_OVERLAY 파서를 활성화하려면 다음을 수행하십시오. &lt;code&gt;&lt;pre&gt; parser = new JsonSlurper().setType(JsonParserType.INDEX_OVERLAY); &lt;/pre&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f2c01dbbbb93eac9e56f88d11cd5d2fdc42f86cc" translate="yes" xml:space="preserve">
          <source>IndexOutOfBoundsException always</source>
          <target state="translated">IndexOutOfBoundsException 항상</target>
        </trans-unit>
        <trans-unit id="28983c206f9625cd64307149e8ffcc6117e018a5" translate="yes" xml:space="preserve">
          <source>Indicate whether all classes and members are to be included in the scope processed.</source>
          <target state="translated">모든 클래스와 멤버가 처리 된 범위에 포함되는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="37af5eb3c5984103d16acba2b6b6e435cc858a38" translate="yes" xml:space="preserve">
          <source>Indicate whether only package, protected and public classes and members are to be included in the scope processed.</source>
          <target state="translated">패키지, 보호 및 공용 클래스 및 멤버 만 처리 된 범위에 포함되는지 여부를 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="9a2c50887984f6ea1fbd250c291f305766fb59fd" translate="yes" xml:space="preserve">
          <source>Indicate whether only package, protected and public classes and members are to be included in the scope processed. Package scoped access is ignored for fields of Groovy classes where they correspond to properties.</source>
          <target state="translated">패키지, 보호 및 공용 클래스 및 멤버 만 처리 된 범위에 포함되는지 여부를 표시하십시오. 속성에 해당하는 Groovy 클래스의 필드에 대해서는 패키지 범위 액세스가 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="9151450e9695b288e940eaed4e5ff9ae64d32e8e" translate="yes" xml:space="preserve">
          <source>Indicate whether only protected and public classes and members are to be included in the scope processed.</source>
          <target state="translated">보호 된 클래스와 공용 클래스 및 멤버 만 처리 된 범위에 포함되는지 여부를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="04f2fdf68956d6b9287c18a8527bb90561cc4767" translate="yes" xml:space="preserve">
          <source>Indicate whether only public classes and members are to be included in the scope processed.</source>
          <target state="translated">처리 된 범위에 공용 클래스 및 멤버 만 포함할지 여부를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="797adb5c89ad5f0756111cbca64e4e4490b284aa" translate="yes" xml:space="preserve">
          <source>Indicates if a class is recompilable.</source>
          <target state="translated">클래스를 다시 컴파일 할 수 있는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="136ff849ce9296a31b281d1dec2754d21f36c8fd" translate="yes" xml:space="preserve">
          <source>Indicates if a class is recompilable. Recompilable means, that the classloader will try to locate a groovy source file for this class and then compile it again, adding the resulting class as entry to the cache. Giving null as class is like a recompilation, so the method should always return true here. Only classes that are implementing GroovyObject are compilable and only if the timestamp in the class is lower than Long.MAX_VALUE.</source>
          <target state="translated">클래스를 다시 컴파일 할 수 있는지 여부를 나타냅니다. 재 컴파일 가능이란 클래스 로더가이 클래스에 대한 멋진 소스 파일을 찾은 다음 다시 컴파일하여 결과 클래스를 캐시에 항목으로 추가한다는 것을 의미합니다. 클래스로 null을 제공하는 것은 재 컴파일과 같으므로 메서드는 항상 여기에서 true를 반환해야합니다. GroovyObject를 구현하는 클래스 만 컴파일 가능하며 클래스의 타임 스탬프가 Long.MAX_VALUE보다 낮은 경우에만 가능합니다.</target>
        </trans-unit>
        <trans-unit id="630a1fdbc53509cab6a90707dcdcd82177e722f5" translate="yes" xml:space="preserve">
          <source>Indicates if this node was added by the compiler.</source>
          <target state="translated">이 노드가 컴파일러에 의해 추가되었는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4044b1721ebebee783d419b3ad05dc384e34d734" translate="yes" xml:space="preserve">
          <source>Indicates that a method or property can be used to set a CLI option.</source>
          <target state="translated">메서드 또는 속성을 사용하여 CLI 옵션을 설정할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="111ec9e52a672f298dada3e2c35de7ed8d6e1a02" translate="yes" xml:space="preserve">
          <source>Indicates that a method or property will contain the remaining arguments.</source>
          <target state="translated">메서드 또는 속성에 나머지 인수가 포함됨을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="688d661e02c805465235986d525218a481a44928" translate="yes" xml:space="preserve">
          <source>Indicates that a power assertion has failed.</source>
          <target state="translated">전원 어설 션이 실패했음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="5c74b8b9377b918c22b16e2e0536d37a2ea0f40f" translate="yes" xml:space="preserve">
          <source>Indicates that adding final to parameters should not be applied on this node.</source>
          <target state="translated">매개 변수에 최종 추가가이 노드에 적용되지 않아야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="515d2853261830b17f6d9ee3c4649a17e78f6bfa" translate="yes" xml:space="preserve">
          <source>Indicates that option processing should continue for all arguments even if arguments not recognized as options are encountered (default true).</source>
          <target state="translated">옵션으로 인식되지 않는 인수가 발견 된 경우에도 모든 인수에 대해 옵션 처리가 계속되어야 함을 나타냅니다 (기본값 true).</target>
        </trans-unit>
        <trans-unit id="16c5983aaf38d489ce1e9e09a931fa86402bd34b" translate="yes" xml:space="preserve">
          <source>Indicates that the source text for an assertion statement is not available.</source>
          <target state="translated">어설 션 문의 소스 텍스트를 사용할 수 없음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="505880517a15e270bf9ada478e0c993af67b4028" translate="yes" xml:space="preserve">
          <source>Indicates that this class has been &quot;promoted&quot; to public by Groovy when in fact there was no public modifier explicitly in the source code.</source>
          <target state="translated">실제로 소스 코드에 명시 적으로 공개 수정자가없는 경우 Groovy가이 클래스를 공개로 &quot;승격&quot;했음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="3b0dd73c5b0268fc6174fc78a27c5ce0f408284e" translate="yes" xml:space="preserve">
          <source>Indicates that this class has been &quot;promoted&quot; to public by Groovy when in fact there was no public modifier explicitly in the source code. That is, it remembers that it has applied Groovy's &quot;public classes by default&quot; rule. This property is typically only of interest to AST transform writers.</source>
          <target state="translated">실제로 소스 코드에 명시 적으로 공개 수정자가없는 경우 Groovy가이 클래스를 공개로 &quot;승격&quot;했음을 나타냅니다. 즉, Groovy의 &quot;기본적으로 공용 클래스&quot;규칙을 적용했음을 기억합니다. 이 속성은 일반적으로 AST 변환 작성자에게만 중요합니다.</target>
        </trans-unit>
        <trans-unit id="1dbf181544581165a2aafe84fc8700dad185c075" translate="yes" xml:space="preserve">
          <source>Indicates that this method has been &quot;promoted&quot; to public by Groovy when in fact there was no public modifier explicitly in the source code.</source>
          <target state="translated">실제로 소스 코드에 명시 적으로 공개 수정자가없는 경우 Groovy에 의해이 메소드가 공개적으로 &quot;승격&quot;되었음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="a7ce180a91783f1049e3f844f88313e87c2d6a12" translate="yes" xml:space="preserve">
          <source>Indicates that this method has been &quot;promoted&quot; to public by Groovy when in fact there was no public modifier explicitly in the source code. I.e. it remembers that it has applied Groovy's &quot;public methods by default&quot; rule. This property is typically only of interest to AST transform writers.</source>
          <target state="translated">실제로 소스 코드에 명시 적으로 공개 수정자가없는 경우 Groovy에 의해이 메소드가 공개적으로 &quot;승격&quot;되었음을 나타냅니다. 즉, Groovy의 &quot;기본적으로 공용 메서드&quot;규칙을 적용했음을 기억합니다. 이 속성은 일반적으로 AST 변환 작성자에게만 중요합니다.</target>
        </trans-unit>
        <trans-unit id="9e91399ce962d879d1a90977bd497afa41e07f1b" translate="yes" xml:space="preserve">
          <source>Indicates that we save stdin, stdout, stderr and replace them while AntBuilder is executing tasks with streams that funnel the normal streams into Ant's logs.</source>
          <target state="translated">stdin, stdout, stderr을 저장하고 AntBuilder가 일반 스트림을 Ant의 로그로 퍼널 스트림으로 작업을 실행하는 동안 대체 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d2c0574153cb32a84757b41d5b5bba3b0874ad6f" translate="yes" xml:space="preserve">
          <source>Indicates the access mode or scope of interest: one of public, protected, package, or private.</source>
          <target state="translated">액세스 모드 또는 관심 범위 (공용, 보호, 패키지 또는 개인 중 하나)를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="e34e836702855ff2a38ad110c1b2d865f4e281ec" translate="yes" xml:space="preserve">
          <source>Indicates the access mode or scope of interest: one of public, protected, package, or private. Package scoped access is ignored for fields of Groovy classes where they correspond to properties.</source>
          <target state="translated">액세스 모드 또는 관심 범위 (공용, 보호, 패키지 또는 개인 중 하나)를 나타냅니다. 속성에 해당하는 Groovy 클래스의 필드에 대해서는 패키지 범위 액세스가 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="bf09860494a25745ac4146d1ec679d4964be79ce" translate="yes" xml:space="preserve">
          <source>Indicates the visibility of a node.</source>
          <target state="translated">노드의 가시성을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="54ff3cf4cc8a0eadcb739383275700fcba97fefc" translate="yes" xml:space="preserve">
          <source>Indicates whether a method in a trait interface has a default implementation.</source>
          <target state="translated">트레이 트 인터페이스의 메서드에 기본 구현이 있는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="c1fedeb686d6f6dffb0b910cbefc0072bb08a324" translate="yes" xml:space="preserve">
          <source>Indicates whether an object is greater than or equal to the &lt;code&gt;from&lt;/code&gt; value for the range and less than or equal to the &lt;code&gt;to&lt;/code&gt; value.</source>
          <target state="translated">물체가 이상인지 여부를 나타냄 &lt;code&gt;from&lt;/code&gt; 보다 작은 범위의 값과 같거나 &lt;code&gt;to&lt;/code&gt; 값.</target>
        </trans-unit>
        <trans-unit id="3d7ca37b34bf0b4c07aa13e30e0972d68ab74459" translate="yes" xml:space="preserve">
          <source>Indicates whether some other object is &quot;equal to&quot; this one.</source>
          <target state="translated">다른 개체가이 개체와 &quot;같은&quot;지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="ad12be725e3b21db9d70cc068cec9d3b12569235" translate="yes" xml:space="preserve">
          <source>Indicates whether some other object is &quot;equal to&quot; this one. The delegate is used if the class of the parameter and the current class are equal. In other cases the method will return false. The exact class is here used, if inheritance is needed, this method must be overwritten.</source>
          <target state="translated">다른 개체가이 개체와 &quot;같은&quot;지 여부를 나타냅니다. 매개 변수의 클래스와 현재 클래스가 같은 경우 대리자가 사용됩니다. 다른 경우에는 메서드가 false를 반환합니다. 여기에서는 정확한 클래스가 사용되며 상속이 필요한 경우이 메서드를 덮어 써야합니다.</target>
        </trans-unit>
        <trans-unit id="e2d97fc712ad2782088acd2ed361fc5abb4e5319" translate="yes" xml:space="preserve">
          <source>Indicates whether the build will continue even if there are compilation errors; defaults to true.</source>
          <target state="translated">컴파일 오류가 있어도 빌드를 계속할지 여부를 나타냅니다. 기본값은 true입니다.</target>
        </trans-unit>
        <trans-unit id="7e3c6405066426e5e0b860c3e6ec74708b52de06" translate="yes" xml:space="preserve">
          <source>Indicates whether the given type should be excluded from the generated output.</source>
          <target state="translated">지정된 유형이 생성 된 출력에서 ​​제외되어야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="6f693dd64de275122519ea98317b05d94048404b" translate="yes" xml:space="preserve">
          <source>Indicates whether this JsonGenerator is configured to exclude fields by the given name.</source>
          <target state="translated">이 JsonGenerator가 지정된 이름으로 필드를 제외하도록 구성되었는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="125f3f9c7ccd5bb1ff4d8f7ab5f44c458b443e72" translate="yes" xml:space="preserve">
          <source>Indicates whether this JsonGenerator is configured to exclude values of the given object (may be &lt;code&gt;null&lt;/code&gt;).</source>
          <target state="translated">이 JsonGenerator가 지정된 개체의 값을 제외하도록 구성되었는지 여부를 나타냅니다 ( &lt;code&gt;null&lt;/code&gt; 일 수 있음 ).</target>
        </trans-unit>
        <trans-unit id="32d8d3f4878eb89f5a96e339cf2002b26c78e2b0" translate="yes" xml:space="preserve">
          <source>Indicates whether this is a reverse range which iterates backwards starting from the to value and ending on the from value</source>
          <target state="translated">시작 값에서 시작하여 시작 값에서 끝나는 역방향 반복 범위인지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="e2bbd100b61c132a1d1fa306cfb83c47ce1cc49f" translate="yes" xml:space="preserve">
          <source>Inherited Methods</source>
          <target state="translated">상속 된 메서드</target>
        </trans-unit>
        <trans-unit id="525b08441bb8c0644d7c96c43785500201217653" translate="yes" xml:space="preserve">
          <source>Inherited Methods Summary</source>
          <target state="translated">상속 된 메서드 요약</target>
        </trans-unit>
        <trans-unit id="1113923ba75acdf59f5f11ac7135267eb1a45ab4" translate="yes" xml:space="preserve">
          <source>Inherited fields</source>
          <target state="translated">상속 된 필드</target>
        </trans-unit>
        <trans-unit id="eb878c6f16903697157c351e3e8ebe115fc5dfe9" translate="yes" xml:space="preserve">
          <source>Initialize the ErrorReporter.</source>
          <target state="translated">ErrorReporter를 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="59b83c798f78c0a1d3f60fe765e592bc94b7a685" translate="yes" xml:space="preserve">
          <source>Initialize the GroovyServlet.</source>
          <target state="translated">GroovyServlet을 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="a6fb58cc9802092bf3a3cc95b8853dd5b3d66a1b" translate="yes" xml:space="preserve">
          <source>Initialize the engine.</source>
          <target state="translated">엔진을 초기화하십시오.</target>
        </trans-unit>
        <trans-unit id="b8e78616cee764a31e917e99d83ea2d947192c4b" translate="yes" xml:space="preserve">
          <source>InitializerStrategy</source>
          <target state="translated">InitializerStrategy</target>
        </trans-unit>
        <trans-unit id="d4a147d3a58f6a93b03ce020cbbebc024da5094d" translate="yes" xml:space="preserve">
          <source>Initializes a servlet binding.</source>
          <target state="translated">서블릿 바인딩을 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="018fdbe1ea47775a5cef23b1aac0fed048fd86c0" translate="yes" xml:space="preserve">
          <source>Initializes all fields with default values.</source>
          <target state="translated">기본값으로 모든 필드를 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="7e13e98506ee6c263f6387e3abf33c8d3b1b1d65" translate="yes" xml:space="preserve">
          <source>Initializes the &lt;code&gt;Reduction&lt;/code&gt; with the specified root.</source>
          <target state="translated">지정된 루트를 사용 하여 &lt;code&gt;Reduction&lt;/code&gt; 를 초기화합니다 .</target>
        </trans-unit>
        <trans-unit id="4d29e8b13f98f3fc521b8b5f6372148290314c00" translate="yes" xml:space="preserve">
          <source>Initializes the CompilationUnit with a CodeSource for controlling security stuff and a class loader for loading classes.</source>
          <target state="translated">보안 항목을 제어하기위한 CodeSource와 클래스로드를위한 클래스 로더를 사용하여 CompilationUnit을 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="21cefd573af25261c92ef632e7a0db6749a64236" translate="yes" xml:space="preserve">
          <source>Initializes the CompilationUnit with a CodeSource for controlling security stuff, a class loader for loading classes, and a class loader for loading AST transformations.</source>
          <target state="translated">보안 항목을 제어하기위한 CodeSource, 클래스로드를위한 클래스 로더 및 AST 변환을로드하기위한 클래스 로더를 사용하여 CompilationUnit을 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="95dbb5f188b9328589a14e7d7d8f4780c516eba1" translate="yes" xml:space="preserve">
          <source>Initializes the CompilationUnit with defaults except for class loader.</source>
          <target state="translated">클래스 로더를 제외한 기본값으로 CompilationUnit을 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="b4102b04129b7ed5a876d7ae367d015ee87f881b" translate="yes" xml:space="preserve">
          <source>Initializes the CompilationUnit with defaults.</source>
          <target state="translated">기본값으로 CompilationUnit을 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="b3179075e8e32f7cbfffbc996362f312d1d9a5bd" translate="yes" xml:space="preserve">
          <source>Initializes the CompilationUnit with no security considerations.</source>
          <target state="translated">보안 고려 사항없이 CompilationUnit을 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="ca52279e8fb4897719c0575a2e97960ed7463938" translate="yes" xml:space="preserve">
          <source>Initializes the Compiler with default configuration.</source>
          <target state="translated">기본 구성으로 컴파일러를 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="263d4a4bea61da7144e7e58d47cd89a846921d8f" translate="yes" xml:space="preserve">
          <source>Initializes the Compiler with the specified configuration.</source>
          <target state="translated">지정된 구성을 사용하여 컴파일러를 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="15af0111cf2f4d615f2c5de582b344aee5d306e0" translate="yes" xml:space="preserve">
          <source>Initializes the ProcessingUnit to the empty state.</source>
          <target state="translated">ProcessingUnit을 빈 상태로 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="51f2c812f742acf60d43647d4095c3863bd6e218" translate="yes" xml:space="preserve">
          <source>Initializes the SourceUnit for a string of source.</source>
          <target state="translated">소스 문자열에 대한 SourceUnit을 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="9f46ea457ddbfaa478187081ddc94608b1d9cc45" translate="yes" xml:space="preserve">
          <source>Initializes the SourceUnit from existing machinery.</source>
          <target state="translated">기존 기계에서 SourceUnit을 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="7f13c83fe940838e90743fbe7fe5f5fc6c100744" translate="yes" xml:space="preserve">
          <source>Initializes the SourceUnit from the specified URL.</source>
          <target state="translated">지정된 URL에서 SourceUnit을 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="9921c0f2eaf5788735b382aa7b73b2ab8fdf6e63" translate="yes" xml:space="preserve">
          <source>Initializes the SourceUnit from the specified file.</source>
          <target state="translated">지정된 파일에서 SourceUnit을 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="8e3df46aaae75466f4bacb9ca62e36f0fa90d610" translate="yes" xml:space="preserve">
          <source>Initializes the Token with the specified information.</source>
          <target state="translated">지정된 정보로 토큰을 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="5ccaf4086cb4983e387ee64edfd34030f12e5429" translate="yes" xml:space="preserve">
          <source>Initializes the exception from a cause exception.</source>
          <target state="translated">원인 예외에서 예외를 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="5193595db809d1ca78357bf43059222e32a48ebe" translate="yes" xml:space="preserve">
          <source>Initializes the exception with just a message.</source>
          <target state="translated">메시지만으로 예외를 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="2f90639a807d84eed531876e842e56bdff997141" translate="yes" xml:space="preserve">
          <source>Initializes the servlet from hints the container passes.</source>
          <target state="translated">컨테이너가 전달하는 힌트에서 서블릿을 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="3351595f5d922e5915dde2489705b78f804beefd" translate="yes" xml:space="preserve">
          <source>Initializes the variable scopes for an AST.</source>
          <target state="translated">AST의 변수 범위를 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="79ec6f67ff66e011adab964b5ec89eb42717fb37" translate="yes" xml:space="preserve">
          <source>Injects a set of Comparators and sort methods.</source>
          <target state="translated">비교기 및 정렬 방법 세트를 삽입합니다.</target>
        </trans-unit>
        <trans-unit id="5ca42c5b7e7077d99eaf0259c9e2d36ecd218191" translate="yes" xml:space="preserve">
          <source>InputStreamReader</source>
          <target state="translated">InputStreamReader</target>
        </trans-unit>
        <trans-unit id="974925732faa25666ea3a7a61450acd786571d50" translate="yes" xml:space="preserve">
          <source>Insert a string into the document, and then parse it if the parser has been set.</source>
          <target state="translated">문서에 문자열을 삽입 한 다음 구문 분석기가 설정된 경우 구문 분석합니다.</target>
        </trans-unit>
        <trans-unit id="f60a39dc2a4544292380f685df34a712cb4bfece" translate="yes" xml:space="preserve">
          <source>Inspects returns the String that matches what would be typed into a terminal to create this object.</source>
          <target state="translated">Inspects는이 객체를 생성하기 위해 터미널에 입력 할 내용과 일치하는 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f71de9d0e1b97507aa3a1c35f7d679019aa7c00c" translate="yes" xml:space="preserve">
          <source>Instance logger for the command, initialized late to include the command name.</source>
          <target state="translated">명령에 대한 인스턴스 로거, 명령 이름을 포함하도록 늦게 초기화되었습니다.</target>
        </trans-unit>
        <trans-unit id="8f2a045c48beddae4470c8eb9f88775f2874e35d" translate="yes" xml:space="preserve">
          <source>Instances of this class are returned when using the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; left shift operator.</source>
          <target state="translated">이 클래스의 인스턴스는 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 왼쪽 시프트 연산자를 사용할 때 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="cbb5cb56dfcc372628a3ae1a595518bc9f517323" translate="yes" xml:space="preserve">
          <source>Instances of this class may be either inclusive aware or non-inclusive aware. See the relevant constructors for creating each type. Inclusive aware IntRange instances are suitable for use with Groovy's range indexing - in particular if the from or to values might be negative. This normally happens underneath the covers but is worth keeping in mind if creating these ranges yourself explicitly.</source>
          <target state="translated">이 클래스의 인스턴스는 포괄적 인식 또는 비 포함 인식 일 수 있습니다. 각 유형을 작성하려면 관련 생성자를 참조하십시오. 포괄적 인식 IntRange 인스턴스는 Groovy의 범위 인덱싱과 함께 사용하기에 적합합니다. 특히 from 또는 to 값이 음수 일 수 있습니다. 이것은 일반적으로 커버 아래에서 발생하지만 이러한 범위를 명시 적으로 직접 생성하는 경우 명심할 가치가 있습니다.</target>
        </trans-unit>
        <trans-unit id="fe9045c39f61d602eb927eacd5ccf37b7715969d" translate="yes" xml:space="preserve">
          <source>Instantiates a JSON builder with a configured generator.</source>
          <target state="translated">구성된 생성기로 JSON 빌더를 인스턴스화합니다.</target>
        </trans-unit>
        <trans-unit id="ab1655ecd6e379b69ade58c6fb0256dda6df8f3a" translate="yes" xml:space="preserve">
          <source>Instantiates a JSON builder with some existing data structure and a configured generator.</source>
          <target state="translated">기존 데이터 구조와 구성된 생성기로 JSON 빌더를 인스턴스화합니다.</target>
        </trans-unit>
        <trans-unit id="024cd6f45ac7dec6052f5ded44708bd82874aa05" translate="yes" xml:space="preserve">
          <source>Instantiates a JSON builder with some existing data structure.</source>
          <target state="translated">기존 데이터 구조로 JSON 빌더를 인스턴스화합니다.</target>
        </trans-unit>
        <trans-unit id="42f1b5fbc27acba496786d41004ae62ba205bf32" translate="yes" xml:space="preserve">
          <source>Instantiates a JSON builder with the given generator.</source>
          <target state="translated">지정된 생성기로 JSON 빌더를 인스턴스화합니다.</target>
        </trans-unit>
        <trans-unit id="54c96df382f08472d6631bb6e772a12405602377" translate="yes" xml:space="preserve">
          <source>Instantiates a JSON builder, possibly with some existing data structure and the given generator.</source>
          <target state="translated">기존 데이터 구조와 지정된 생성기를 사용하여 JSON 빌더를 인스턴스화합니다.</target>
        </trans-unit>
        <trans-unit id="141cef8318094b1983ce9fa1c2a4d869be71804c" translate="yes" xml:space="preserve">
          <source>Instantiates a JSON builder, possibly with some existing data structure.</source>
          <target state="translated">기존 데이터 구조를 사용하여 JSON 빌더를 인스턴스화합니다.</target>
        </trans-unit>
        <trans-unit id="5dd21d8c79e7150205d021fc437e3e0ae133c9d9" translate="yes" xml:space="preserve">
          <source>Instantiates a JSON builder.</source>
          <target state="translated">JSON 빌더를 인스턴스화합니다.</target>
        </trans-unit>
        <trans-unit id="699fb02e1fced90c275177b0d7a711a57517e3f9" translate="yes" xml:space="preserve">
          <source>Instantiates a lexer with a reader from which to read JSON tokens.</source>
          <target state="translated">JSON 토큰을 읽을 리더로 어휘 분석기를 인스턴스화합니다.</target>
        </trans-unit>
        <trans-unit id="a2aaa2aa5c8a8c74c12672eb9fe39641af9e0252" translate="yes" xml:space="preserve">
          <source>Instantiates a lexer with a reader from which to read JSON tokens. Under the hood, the reader is wrapped in a &lt;code&gt;LineColumnReader&lt;/code&gt;, for line and column information, unless it's already an instance of that class.</source>
          <target state="translated">JSON 토큰을 읽을 리더로 어휘 분석기를 인스턴스화합니다. 내부적으로 리더는 해당 클래스의 인스턴스가 아닌 경우 행 및 열 정보를 위해 &lt;code&gt;LineColumnReader&lt;/code&gt; 로 래핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="ef10dd1a9b12de51bbd9401d757f87db07d5d41d" translate="yes" xml:space="preserve">
          <source>InstantiationException</source>
          <target state="translated">InstantiationException</target>
        </trans-unit>
        <trans-unit id="66148a5f176a715cb6a8fa060b2bb31495aa640b" translate="yes" xml:space="preserve">
          <source>InstantiationException if attempting to instantiate an interface or abstract class</source>
          <target state="translated">인터페이스 또는 추상 클래스를 인스턴스화하려는 경우 InstantiationException</target>
        </trans-unit>
        <trans-unit id="f49d92979e6adf342140051a68886e26c421fe1e" translate="yes" xml:space="preserve">
          <source>Instead, if the values are intended to be the same in each case, just take advantage of the fact that put returns null if the key was not previously present:</source>
          <target state="translated">대신 값이 각 경우에 동일하도록 의도 된 경우 키가 이전에 없었던 경우 put이 null을 반환한다는 사실을 활용하십시오.</target>
        </trans-unit>
        <trans-unit id="d0ef219554460ea946d899d3af957e808033169c" translate="yes" xml:space="preserve">
          <source>Instead, the class should be used as:</source>
          <target state="translated">대신 클래스를 다음과 같이 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="10190743fb8223eeb16d7c0324c2fe8937eedbbf" translate="yes" xml:space="preserve">
          <source>Instructs &lt;code&gt;ProxyGenerator&lt;/code&gt; to dump generated Groovy source code to standard output during construction.</source>
          <target state="translated">&lt;code&gt;ProxyGenerator&lt;/code&gt; 에 생성 된 Groovy 소스 코드를 생성하는 동안 표준 출력에 덤프하도록 지시 합니다.</target>
        </trans-unit>
        <trans-unit id="5c0d68a404938ba3c9b64f06287a8bf217ec1265" translate="yes" xml:space="preserve">
          <source>Instructs &lt;code&gt;ProxyGenerator&lt;/code&gt; to dump generated Groovy source code to standard output during construction. This is useful for debugging purposes but should be turned off in production.</source>
          <target state="translated">&lt;code&gt;ProxyGenerator&lt;/code&gt; 에 생성 된 Groovy 소스 코드를 생성하는 동안 표준 출력에 덤프하도록 지시 합니다. 이것은 디버깅 목적으로 유용하지만 프로덕션에서는 꺼야합니다.</target>
        </trans-unit>
        <trans-unit id="44a47af36c3357cb073689cf5c5aee4bbe200cdd" translate="yes" xml:space="preserve">
          <source>Instructs the type checker that a property access is dynamic, returning an instance of an Object.</source>
          <target state="translated">속성 액세스가 동적임을 유형 검사기에 지시하여 Object의 인스턴스를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="696b76462a7efaa66fa4555536e507c9c7cb8d8d" translate="yes" xml:space="preserve">
          <source>Instructs the type checker that a property access is dynamic, returning an instance of an Object. Calling this method automatically sets the handled flag to true.</source>
          <target state="translated">속성 액세스가 동적임을 유형 검사기에 지시하여 Object의 인스턴스를 반환합니다. 이 메서드를 호출하면 처리 된 플래그가 자동으로 true로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="f5783076db2d8bc8f6e05b71aff1a725bda33e17" translate="yes" xml:space="preserve">
          <source>Instructs the type checker that a property access is dynamic.</source>
          <target state="translated">속성 액세스가 동적임을 유형 검사기에 지시합니다.</target>
        </trans-unit>
        <trans-unit id="13a35877ee250e0b95f32df7c7142282003c22c4" translate="yes" xml:space="preserve">
          <source>Instructs the type checker that a property access is dynamic. Calling this method automatically sets the handled flag to true.</source>
          <target state="translated">속성 액세스가 동적임을 유형 검사기에 지시합니다. 이 메서드를 호출하면 처리 된 플래그가 자동으로 true로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="3fb090cda925adff9cab9618ac57d782c45f9af2" translate="yes" xml:space="preserve">
          <source>Instructs the type checker that an unresolved variable is a dynamic variable of type Object.</source>
          <target state="translated">해결되지 않은 변수가 Object 유형의 동적 변수임을 유형 검사기에 지시합니다.</target>
        </trans-unit>
        <trans-unit id="5e645caee01bf36ede65b503f18ae7e451cf5a93" translate="yes" xml:space="preserve">
          <source>Instructs the type checker that an unresolved variable is a dynamic variable of type Object. Calling this method automatically sets the handled flag to true.</source>
          <target state="translated">해결되지 않은 변수가 Object 유형의 동적 변수임을 유형 검사기에 지시합니다. 이 메서드를 호출하면 처리 된 플래그가 자동으로 true로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="9d14d5ec662e09e05e2a351f2e33645a5e0b7711" translate="yes" xml:space="preserve">
          <source>Instructs the type checker that an unresolved variable is a dynamic variable.</source>
          <target state="translated">해결되지 않은 변수가 동적 변수임을 유형 검사기에 지시합니다.</target>
        </trans-unit>
        <trans-unit id="1ecd34c101b616e04032d5f18915a529dbf2c1ba" translate="yes" xml:space="preserve">
          <source>IntRange</source>
          <target state="translated">IntRange</target>
        </trans-unit>
        <trans-unit id="9edcffff4461c9083fbff857f8dcee0f0769cbd4" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Integer</target>
        </trans-unit>
        <trans-unit id="282bee276f291473af31dcfb27b04e885aa9e464" translate="yes" xml:space="preserve">
          <source>Integer Divide a Character by a Number.</source>
          <target state="translated">정수 문자를 숫자로 나눕니다.</target>
        </trans-unit>
        <trans-unit id="523de5b1efc3884facd85bd7960b60820cc80e38" translate="yes" xml:space="preserve">
          <source>Integer Divide a Character by a Number. The ordinal value of the Character is used in the division (the ordinal value is the unicode value which for simple character sets is the ASCII value).</source>
          <target state="translated">정수 문자를 숫자로 나눕니다. 문자의 서수 값은 나눗셈에서 사용됩니다 (서수 값은 단순 문자 집합의 경우 ASCII 값인 유니 코드 값입니다).</target>
        </trans-unit>
        <trans-unit id="af9bcd985439abcaa482fdc61d2aeb35e354049d" translate="yes" xml:space="preserve">
          <source>Integer Divide a Number by a Character.</source>
          <target state="translated">정수는 숫자를 문자로 나눕니다.</target>
        </trans-unit>
        <trans-unit id="e7e5ff13a9c79a559ce3c6d980b890b987919c24" translate="yes" xml:space="preserve">
          <source>Integer Divide a Number by a Character. The ordinal value of the Character is used in the division (the ordinal value is the unicode value which for simple character sets is the ASCII value).</source>
          <target state="translated">정수는 숫자를 문자로 나눕니다. 문자의 서수 값은 나눗셈에서 사용됩니다 (서수 값은 단순 문자 집합의 경우 ASCII 값인 유니 코드 값입니다).</target>
        </trans-unit>
        <trans-unit id="8dbb3c4f6a5c7e8ea9df752a169f767916a19496" translate="yes" xml:space="preserve">
          <source>Integer Divide two Characters.</source>
          <target state="translated">정수 두 문자를 나눕니다.</target>
        </trans-unit>
        <trans-unit id="d2ce5e4524d2deba8d2495c765a494d3f9d4f417" translate="yes" xml:space="preserve">
          <source>Integer Divide two Characters. The ordinal values of the Characters are used in the division (the ordinal value is the unicode value which for simple character sets is the ASCII value).</source>
          <target state="translated">정수 두 문자를 나눕니다. 문자의 서수 값은 나눗셈에서 사용됩니다 (서수 값은 단순 문자 집합의 경우 ASCII 값인 유니 코드 값입니다).</target>
        </trans-unit>
        <trans-unit id="769a8fc3a15f9677e4479913a38cada19a7d6a3d" translate="yes" xml:space="preserve">
          <source>Integer Divide two Numbers.</source>
          <target state="translated">정수 두 숫자를 나눕니다.</target>
        </trans-unit>
        <trans-unit id="a1a5a5ffc5b09ed1348c99c2c5f25a7060b93321" translate="yes" xml:space="preserve">
          <source>Integer NumberMath operations</source>
          <target state="translated">Integer NumberMath 연산</target>
        </trans-unit>
        <trans-unit id="b160768b4b5f9616a76c29f6c42dc462b87234a7" translate="yes" xml:space="preserve">
          <source>Integer.toHexString</source>
          <target state="translated">Integer.toHexString</target>
        </trans-unit>
        <trans-unit id="da2005159ca4c8d71ba85e9ff00b443dbdd809d8" translate="yes" xml:space="preserve">
          <source>Integer.valueOf</source>
          <target state="translated">Integer.valueOf</target>
        </trans-unit>
        <trans-unit id="af4e92c3977d25a130dec0d64c4d9a879aa6518d" translate="yes" xml:space="preserve">
          <source>Integration code for running JUnit5 tests in Groovy.</source>
          <target state="translated">Groovy에서 JUnit5 테스트를 실행하기위한 통합 코드.</target>
        </trans-unit>
        <trans-unit id="ed5c6ff87ae992b7bc738f80f9d81d8125f0c5e0" translate="yes" xml:space="preserve">
          <source>Integration code for running TestNG tests in Groovy.</source>
          <target state="translated">Groovy에서 TestNG 테스트를 실행하기위한 통합 코드.</target>
        </trans-unit>
        <trans-unit id="dd3eaab4334570b25633ba2d249f4195f42ade7e" translate="yes" xml:space="preserve">
          <source>Intended style to use for cloning when using the &lt;code&gt;@&lt;/code&gt;AutoClone annotation.</source>
          <target state="translated">&lt;code&gt;@&lt;/code&gt; AutoClone 주석 을 사용할 때 복제에 사용할 의도 된 스타일 입니다.</target>
        </trans-unit>
        <trans-unit id="4e271243406cc97bddb89bda451e1ef2a0fd931f" translate="yes" xml:space="preserve">
          <source>Intended target when &lt;code&gt;@&lt;/code&gt;PackageScope is placed at the class level.</source>
          <target state="translated">&lt;code&gt;@&lt;/code&gt; PackageScope가 클래스 수준에 배치 될 때의 대상 입니다.</target>
        </trans-unit>
        <trans-unit id="69cad189c01e0d81e121559b26c93fff2c5b42e1" translate="yes" xml:space="preserve">
          <source>Intercepting calls to the collaborating object and notify the expectation object.</source>
          <target state="translated">공동 작업 개체에 대한 호출을 가로 채서 예상 개체에 알립니다.</target>
        </trans-unit>
        <trans-unit id="25e97337ebc803a40ea4ba33c2ef4895c55ad558" translate="yes" xml:space="preserve">
          <source>Interceptor</source>
          <target state="translated">Interceptor</target>
        </trans-unit>
        <trans-unit id="3711158676504254123b7d5710e4044213a5ebef" translate="yes" xml:space="preserve">
          <source>Interceptor that registers the timestamp of each method call before and after invocation. The timestamps are stored internally and can be retrieved through the with the</source>
          <target state="translated">호출 전후 각 메서드 호출의 타임 스탬프를 등록하는 인터셉터입니다. 타임 스탬프는 내부적으로 저장되며를 통해 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d35a22de69f97431f7c956a90af66e1a51c95720" translate="yes" xml:space="preserve">
          <source>Interceptors the call to a property setter if a PropertyAccessInterceptor is available</source>
          <target state="translated">PropertyAccessInterceptor를 사용할 수있는 경우 속성 setter에 대한 호출을 인터셉터합니다.</target>
        </trans-unit>
        <trans-unit id="7e40b6f8124f11fd093aa8257c34718368004c9b" translate="yes" xml:space="preserve">
          <source>Interceptors the call to getProperty if a PropertyAccessInterceptor is available</source>
          <target state="translated">PropertyAccessInterceptor를 사용할 수있는 경우 getProperty에 대한 호출을 인터셉터합니다.</target>
        </trans-unit>
        <trans-unit id="2b11688434243ec948303820617069cce4c61836" translate="yes" xml:space="preserve">
          <source>Intercepts System.out/System.err. Implementation helper for Console.groovy.</source>
          <target state="translated">System.out / System.err을 가로 챕니다. Console.groovy에 대한 구현 도우미입니다.</target>
        </trans-unit>
        <trans-unit id="7e267a27738cb944d4bd1469e2c7850c9179052e" translate="yes" xml:space="preserve">
          <source>Intercepts a getXXX call and returns a result.</source>
          <target state="translated">getXXX 호출을 가로 채서 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="92d9cb1faa3a1dcad3e87d033070745c5236e603" translate="yes" xml:space="preserve">
          <source>Intercepts a getXXX call and returns a result. The result is replaced by the real value if doGet() return false</source>
          <target state="translated">getXXX 호출을 가로 채서 결과를 반환합니다. doGet ()이 false를 반환하면 결과는 실제 값으로 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="c79ef7c67d23201013fdd8798f24bf77148ea15e" translate="yes" xml:space="preserve">
          <source>Intercepts a setXXX call</source>
          <target state="translated">setXXX 호출을 가로 챕니다.</target>
        </trans-unit>
        <trans-unit id="9484648b0e9aa989c8e367b5ade3bf15e19dd6ce" translate="yes" xml:space="preserve">
          <source>Intercepts calls for setting a key and value for a JSON object</source>
          <target state="translated">JSON 객체의 키와 값을 설정하기위한 호출을 차단합니다.</target>
        </trans-unit>
        <trans-unit id="70f9887b1d1d30067762a751d4454610a113b3fd" translate="yes" xml:space="preserve">
          <source>Intercepts output - more common case of byte[]</source>
          <target state="translated">출력 차단-byte []의 일반적인 경우</target>
        </trans-unit>
        <trans-unit id="c80f5668deda45ae6800ab7d9462acf81d202fc4" translate="yes" xml:space="preserve">
          <source>Intercepts output - single characters</source>
          <target state="translated">출력 차단-단일 문자</target>
        </trans-unit>
        <trans-unit id="02afcdec53dc1afddc018f7c53dc9dc63d29d958" translate="yes" xml:space="preserve">
          <source>Interface class nodes retrieved from &lt;a href=&quot;../classnode#getInterfaces()&quot;&gt;ClassNode.getInterfaces&lt;/a&gt; or &lt;a href=&quot;../classnode#getAllInterfaces()&quot;&gt;ClassNode.getAllInterfaces&lt;/a&gt; are returned with generic type arguments.</source>
          <target state="translated">&lt;a href=&quot;../classnode#getInterfaces()&quot;&gt;ClassNode.getInterfaces&lt;/a&gt; 또는 &lt;a href=&quot;../classnode#getAllInterfaces()&quot;&gt;ClassNode.getAllInterfaces&lt;/a&gt; 에서 검색된 인터페이스 클래스 노드는 일반 유형 인수와 함께 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="5dd6272f6e8b0a4e6096ab1d7d51794d5ace55fb" translate="yes" xml:space="preserve">
          <source>Interface class nodes retrieved from &lt;a href=&quot;../classnode#getInterfaces()&quot;&gt;ClassNode.getInterfaces&lt;/a&gt; or &lt;a href=&quot;../classnode#getAllInterfaces()&quot;&gt;ClassNode.getAllInterfaces&lt;/a&gt; are returned with generic type arguments. This method allows returning a parameterized interface given the parameterized class node which implements this interface.</source>
          <target state="translated">&lt;a href=&quot;../classnode#getInterfaces()&quot;&gt;ClassNode.getInterfaces&lt;/a&gt; 또는 &lt;a href=&quot;../classnode#getAllInterfaces()&quot;&gt;ClassNode.getAllInterfaces&lt;/a&gt; 에서 검색된 인터페이스 클래스 노드는 일반 유형 인수와 함께 반환됩니다. 이 메소드는이 인터페이스를 구현하는 매개 변수화 된 클래스 노드가 주어진 경우 매개 변수화 된 인터페이스를 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d2b3bd657d3e455e63b4f1dbaa48e1a539ac68b" translate="yes" xml:space="preserve">
          <source>Interface defining common methods for method calls.</source>
          <target state="translated">메서드 호출을위한 일반적인 메서드를 정의하는 인터페이스입니다.</target>
        </trans-unit>
        <trans-unit id="b0550a33e5759508a1cb87c787a671cfd46f93e8" translate="yes" xml:space="preserve">
          <source>Interface for classes that complete identifier tokens within a groovy Statement (Class, variable, keyword, method, ...) Similar to JLine Completer, but adapted for usage in GroovySyntaxCompleter</source>
          <target state="translated">groovy Statement 내에서 식별자 토큰을 완성하는 클래스를위한 인터페이스 (클래스, 변수, 키워드, 메서드, ...) JLine Completer와 유사하지만 GroovySyntaxCompleter에서 사용하도록 조정 됨</target>
        </trans-unit>
        <trans-unit id="8eee19345a1303f341fe86a44b3b1bff16e60373" translate="yes" xml:space="preserve">
          <source>Interface for classes that complete identifier tokens within a groovy Statement (Class, variable, keyword, method, ...) Similar to JLine Completor, but adapted for usage in GroovySyntaxCompletor</source>
          <target state="translated">groovy Statement 내에서 식별자 토큰을 완성하는 클래스 용 인터페이스 (Class, 변수, 키워드, 메소드 등) JLine Completor와 유사하지만 GroovySyntaxCompletor에서 사용하도록 조정 됨</target>
        </trans-unit>
        <trans-unit id="b37a6843d15d14dc949d5868c628724093b2a300" translate="yes" xml:space="preserve">
          <source>Interface for modules which are capable of resolving the type of an expression. Several implementations are available, depending on whether you are in a dynamic or static compilation mode.</source>
          <target state="translated">표현식 유형을 확인할 수있는 모듈 용 인터페이스입니다. 동적 컴파일 모드인지 정적 컴파일 모드인지에 따라 여러 구현을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d6e682184f1a6740708c8da252dc09b57ba9c67f" translate="yes" xml:space="preserve">
          <source>Interface for template resolvers, which, given a template identifier, return an URL where the template can be loaded.</source>
          <target state="translated">템플릿 식별자가 주어지면 템플릿을로드 할 수있는 URL을 반환하는 템플릿 해석 기용 인터페이스입니다.</target>
        </trans-unit>
        <trans-unit id="60123c6e55da44275a760bd643979e93651e4d37" translate="yes" xml:space="preserve">
          <source>Interface method for ResourceContainer.</source>
          <target state="translated">ResourceContainer의 인터페이스 메소드입니다.</target>
        </trans-unit>
        <trans-unit id="fb4311e90e0dc166b0e0e647d2a1608b232b2fa3" translate="yes" xml:space="preserve">
          <source>Interface method for ResourceContainer. This is used by the GroovyScriptEngine.</source>
          <target state="translated">ResourceContainer의 인터페이스 메소드입니다. 이것은 GroovyScriptEngine에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="2876141e98e65cc67dd95091b911a391f510a33f" translate="yes" xml:space="preserve">
          <source>Interface to access VM version based actions. This interface is for internal use only!</source>
          <target state="translated">VM 버전 기반 작업에 액세스하기위한 인터페이스입니다. 이 인터페이스는 내부 전용입니다!</target>
        </trans-unit>
        <trans-unit id="579791cafbfcd6393e3192a05ca26926bd6b0bcb" translate="yes" xml:space="preserve">
          <source>Internal annotation used to indicate that a method is a bridge method to a trait default implementation.</source>
          <target state="translated">메서드가 트레이 트 기본 구현에 대한 브리지 메서드임을 나타내는 데 사용되는 내부 주석입니다.</target>
        </trans-unit>
        <trans-unit id="c2fd45abfe2594f4e9d1291f9f433e59a95a7827" translate="yes" xml:space="preserve">
          <source>Internal annotation used to indicate which methods in a trait interface have a default implementation.</source>
          <target state="translated">트레이 트 인터페이스에서 기본 구현이있는 메서드를 나타내는 데 사용되는 내부 주석입니다.</target>
        </trans-unit>
        <trans-unit id="b20c242f02b17111d0adc998b51f64ec5af233c3" translate="yes" xml:space="preserve">
          <source>Internal class for fast processing of Strings during JSON parsing</source>
          <target state="translated">JSON 구문 분석 중 빠른 문자열 처리를위한 내부 클래스</target>
        </trans-unit>
        <trans-unit id="15f67d5ef1b2b2111ad63d01cef82b566d79aa92" translate="yes" xml:space="preserve">
          <source>Internal class for fast processing of Strings during JSON parsing - default version</source>
          <target state="translated">JSON 구문 분석 중 빠른 문자열 처리를위한 내부 클래스-기본 버전</target>
        </trans-unit>
        <trans-unit id="17bd43b68c581b9ad663869131187544604ffc26" translate="yes" xml:space="preserve">
          <source>Internal classes for Groovier Input/Output.</source>
          <target state="translated">Groovier 입력 / 출력을위한 내부 클래스.</target>
        </trans-unit>
        <trans-unit id="678abdec88ee14a8aac84f1ed2283bf4c03e47a2" translate="yes" xml:space="preserve">
          <source>Internal classes for assisting with reflection.</source>
          <target state="translated">성찰을 돕기위한 내부 수업.</target>
        </trans-unit>
        <trans-unit id="086a028ffc5b48301eaeca6a6fb1a84ca6461e66" translate="yes" xml:space="preserve">
          <source>Internal classes related to Groovy's metaclass implementation.</source>
          <target state="translated">Groovy의 메타 클래스 구현과 관련된 내부 클래스.</target>
        </trans-unit>
        <trans-unit id="0a7b0b1753578ca410d14ddd40a3be855c75937e" translate="yes" xml:space="preserve">
          <source>Internal data structure mapping option names to their associated &lt;a href=&quot;../typedoption&quot;&gt;TypedOption&lt;/a&gt; object.</source>
          <target state="translated">옵션 이름을 관련 &lt;a href=&quot;../typedoption&quot;&gt;TypedOption&lt;/a&gt; 개체에 매핑하는 내부 데이터 구조</target>
        </trans-unit>
        <trans-unit id="e69b395ac69df7a253c99003270262009c017220" translate="yes" xml:space="preserve">
          <source>Internal data structure mapping option names to their associated TypedOption object.</source>
          <target state="translated">옵션 이름을 관련 TypedOption 개체에 매핑하는 내부 데이터 구조</target>
        </trans-unit>
        <trans-unit id="1b873ff79602fd0c61ebe5db004502946ac92a42" translate="yes" xml:space="preserve">
          <source>Internal helper used to indicate a cache hit for a class that does not exist.</source>
          <target state="translated">존재하지 않는 클래스에 대한 캐시 적중을 나타내는 데 사용되는 내부 도우미입니다.</target>
        </trans-unit>
        <trans-unit id="27f007db952ef82246476699eef2f602fd6e7434" translate="yes" xml:space="preserve">
          <source>Internal helper used to indicate a cache hit for a class that does not exist. This way further lookups through a slow &lt;a href=&quot;#findClassNode(java.lang.String,%20org.codehaus.groovy.control.CompilationUnit)&quot;&gt;findClassNode(String, CompilationUnit)&lt;/a&gt; path can be avoided. WARNING: This class is not to be used outside of ClassNodeResolver.</source>
          <target state="translated">존재하지 않는 클래스에 대한 캐시 적중을 나타내는 데 사용되는 내부 도우미입니다. 이렇게하면 느린 &lt;a href=&quot;#findClassNode(java.lang.String,%20org.codehaus.groovy.control.CompilationUnit)&quot;&gt;findClassNode (String, CompilationUnit)&lt;/a&gt; 경로를 통한 추가 조회를 피할 수 있습니다. 경고 :이 클래스는 ClassNodeResolver 외부에서 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8b12a17f5c68de50c6154bf9822d966199ba50e6" translate="yes" xml:space="preserve">
          <source>Internal method to support Groovy runtime.</source>
          <target state="translated">Groovy 런타임을 지원하는 내부 메서드입니다.</target>
        </trans-unit>
        <trans-unit id="3ee5e1540f58516c29ca30aff61d40136d65647f" translate="yes" xml:space="preserve">
          <source>Internal method to support Groovy runtime. Not for client usage.</source>
          <target state="translated">Groovy 런타임을 지원하는 내부 메서드입니다. 클라이언트 용이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="6c3bad9f008c89ec54bf4b8b1f6f9424ac52451c" translate="yes" xml:space="preserve">
          <source>Internal method: Detect option specification method calls.</source>
          <target state="translated">내부 방법 : 옵션 사양 메서드 호출을 감지합니다.</target>
        </trans-unit>
        <trans-unit id="d487f885c7031ddd96573dc4e771af0c5061ee07" translate="yes" xml:space="preserve">
          <source>Internal method: How to create an OptionSpec from the specification.</source>
          <target state="translated">내부 방법 : 사양에서 OptionSpec을 만드는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="d01c2756261815414033ee7c1d345a7a229adf2b" translate="yes" xml:space="preserve">
          <source>Internal method: How to create an option from the specification.</source>
          <target state="translated">내부 방법 : 사양에서 옵션을 만드는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="6610f1924bc8bb6290aa900fb2751ff511df5d97" translate="yes" xml:space="preserve">
          <source>Internal phantom type used by the &lt;code&gt;InitializerStrategy&lt;/code&gt; to indicate that a property has been set.</source>
          <target state="translated">속성이 설정되었음을 나타 내기 위해 &lt;code&gt;InitializerStrategy&lt;/code&gt; 에서 사용하는 내부 팬텀 유형 입니다.</target>
        </trans-unit>
        <trans-unit id="0241f0d9f01367948a331f2c058594f9bbe99a66" translate="yes" xml:space="preserve">
          <source>Internal phantom type used by the &lt;code&gt;InitializerStrategy&lt;/code&gt; to indicate that a property has been set. It is used in conjunction with the generated parameterized type helper class.</source>
          <target state="translated">속성이 설정되었음을 나타 내기 위해 &lt;code&gt;InitializerStrategy&lt;/code&gt; 에서 사용하는 내부 팬텀 유형 입니다. 생성 된 매개 변수화 된 유형 도우미 클래스와 함께 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fa18545c686f7663b08f5d72ff1d01d74910941b" translate="yes" xml:space="preserve">
          <source>Internal phantom type used by the &lt;code&gt;InitializerStrategy&lt;/code&gt; to indicate that a property remains unset.</source>
          <target state="translated">속성이 설정되지 않은 상태로 유지됨을 나타 내기 위해 &lt;code&gt;InitializerStrategy&lt;/code&gt; 에서 사용하는 내부 팬텀 유형 입니다.</target>
        </trans-unit>
        <trans-unit id="8a9ef78b250c604234a17d70b3ade63aeed81d73" translate="yes" xml:space="preserve">
          <source>Internal phantom type used by the &lt;code&gt;InitializerStrategy&lt;/code&gt; to indicate that a property remains unset. It is used in conjunction with the generated parameterized type helper class.</source>
          <target state="translated">속성이 설정되지 않은 상태로 유지됨을 나타 내기 위해 &lt;code&gt;InitializerStrategy&lt;/code&gt; 에서 사용하는 내부 팬텀 유형 입니다. 생성 된 매개 변수화 된 유형 도우미 클래스와 함께 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a8565dfbaacc2588737133c997d5453f79b70458" translate="yes" xml:space="preserve">
          <source>Invalid attempts to override final members</source>
          <target state="translated">최종 구성원을 무시하려는 잘못된 시도</target>
        </trans-unit>
        <trans-unit id="b3f05295aaa27209884b6774e0ab796cba868a55" translate="yes" xml:space="preserve">
          <source>InvocationHandler</source>
          <target state="translated">InvocationHandler</target>
        </trans-unit>
        <trans-unit id="e0e9e3e48ce64e3bb5db98882dbc294634d3d6af" translate="yes" xml:space="preserve">
          <source>InvocationHandler#invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])</source>
          <target state="translated">InvocationHandler#invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])</target>
        </trans-unit>
        <trans-unit id="1b01aacb93f4e2e05ab6d459bc968160ffe794a2" translate="yes" xml:space="preserve">
          <source>InvocationHandler.invoke</source>
          <target state="translated">InvocationHandler.invoke</target>
        </trans-unit>
        <trans-unit id="1b5d6ea19b68566cefe69467c14317d9ea7ab0fa" translate="yes" xml:space="preserve">
          <source>Invoke a method (or closure in the binding) defined.</source>
          <target state="translated">정의 된 메서드 (또는 바인딩의 클로저)를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="a01f8c205d54490bbc8d6e01c74d1205e4a52d5c" translate="yes" xml:space="preserve">
          <source>Invoke a method through reflection.</source>
          <target state="translated">리플렉션을 통해 메서드를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="feb578098e3da0ffbf1b2622a6dff20dbf09d212" translate="yes" xml:space="preserve">
          <source>Invoke a method through reflection. Falls through to using the Invoker to call the method in case the reflection call fails..</source>
          <target state="translated">리플렉션을 통해 메서드를 호출합니다. 리플렉션 호출이 실패 할 경우 Invoker를 사용하여 메서드를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="ad55840213cb71230d7b3cf4372abfaa4088e15c" translate="yes" xml:space="preserve">
          <source>Invoke this method</source>
          <target state="translated">이 메서드 호출</target>
        </trans-unit>
        <trans-unit id="87c8522dff577f897b2fb84758c7717fce7e2f6d" translate="yes" xml:space="preserve">
          <source>Invoked by calling &lt;code&gt;mkp.comment&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;mkp.comment&lt;/code&gt; 를 호출하여 호출 됩니다.</target>
        </trans-unit>
        <trans-unit id="bbc360e546f1ad2be3533812128683c7aba4ba42" translate="yes" xml:space="preserve">
          <source>Invoked by calling &lt;code&gt;mkp.pi&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;mkp.pi&lt;/code&gt; 를 호출하여 호출</target>
        </trans-unit>
        <trans-unit id="8d737cb4dcea4dfccbe1ccf4e9f77866e6f4c6ce" translate="yes" xml:space="preserve">
          <source>Invoked by calling &lt;code&gt;mkp.xmlDeclaration&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;mkp.xmlDeclaration&lt;/code&gt; 을 호출하여 호출 됩니다.</target>
        </trans-unit>
        <trans-unit id="de1ccdd1e48ee335b763678d22decaaca881304d" translate="yes" xml:space="preserve">
          <source>Invoked by calling &lt;code&gt;mkp.yield&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mkp.yield&lt;/code&gt; 를 호출하여 호출 됩니다 .</target>
        </trans-unit>
        <trans-unit id="cf01423799ce850bda36d9d9a132af3d91ab8337" translate="yes" xml:space="preserve">
          <source>Invoked by calling &lt;code&gt;mkp.yield&lt;/code&gt;. Used to render text to the output stream. Any XML reserved characters will be escaped to ensure well-formedness.</source>
          <target state="translated">&lt;code&gt;mkp.yield&lt;/code&gt; 를 호출하여 호출 됩니다 . 출력 스트림에 텍스트를 렌더링하는 데 사용됩니다. XML 예약 문자는 올바른 형식을 보장하기 위해 이스케이프됩니다.</target>
        </trans-unit>
        <trans-unit id="620451f6d9802ea4954d01008df05584cac753ed" translate="yes" xml:space="preserve">
          <source>Invoked by calling &lt;code&gt;mkp.yieldUnescaped&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mkp.yieldUnescaped&lt;/code&gt; 를 호출하여 호출 됩니다 .</target>
        </trans-unit>
        <trans-unit id="f08a437d7b1d380c29159fc329e6bfa7b404b1cf" translate="yes" xml:space="preserve">
          <source>Invoked by calling &lt;code&gt;mkp.yieldUnescaped&lt;/code&gt;. Used to render literal text or markup to the output stream. No escaping is done on the output.</source>
          <target state="translated">&lt;code&gt;mkp.yieldUnescaped&lt;/code&gt; 를 호출하여 호출 됩니다 . 리터럴 텍스트 또는 마크 업을 출력 스트림에 렌더링하는 데 사용됩니다. 출력에서 이스케이프가 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="17eedd25556954e9508e709deca5f965e209f486" translate="yes" xml:space="preserve">
          <source>Invoked when some of the held SoftReferences have been evicted by the garbage collector and so should be removed from the cache.</source>
          <target state="translated">보유 된 SoftReference 중 일부가 가비지 수집기에 의해 제거되어 캐시에서 제거되어야 할 때 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="250a45959d8bb6b436d04c0390b07f869e5bd151" translate="yes" xml:space="preserve">
          <source>Invoked when some of the held SoftReferences have been evicted by the garbage collector and so should be removed from the cache. The implementation must ensure that concurrent invocations of all methods on the cache may occur from other threads and thus should protect any shared resources.</source>
          <target state="translated">보유 된 SoftReference 중 일부가 가비지 수집기에 의해 제거되어 캐시에서 제거되어야 할 때 호출됩니다. 구현시 캐시에있는 모든 메서드의 동시 호출이 다른 스레드에서 발생할 수 있으므로 공유 리소스를 보호해야합니다.</target>
        </trans-unit>
        <trans-unit id="f5906ff9f6da77bf0687b834bde52a63a81638f9" translate="yes" xml:space="preserve">
          <source>Invokes a Closure that uses a Formatter taking care of resource handling.</source>
          <target state="translated">리소스 처리를 처리하는 Formatter를 사용하는 Closure를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="3e696c0b35cea8bf0aa52ba02659ae276c962aa1" translate="yes" xml:space="preserve">
          <source>Invokes a Closure that uses a Formatter taking care of resource handling. A Formatter is created and passed to the Closure as its argument. After the Closure executes, the Formatter is flushed and closed releasing any associated resources.</source>
          <target state="translated">리소스 처리를 처리하는 Formatter를 사용하는 Closure를 호출합니다. Formatter가 생성되고 Closure에 인수로 전달됩니다. Closure가 실행 된 후 Formatter는 플러시되고 닫히고 관련 리소스가 해제됩니다.</target>
        </trans-unit>
        <trans-unit id="3dd1860038d751c5dd53ab446b48724e469af3ba" translate="yes" xml:space="preserve">
          <source>Invokes a Closure that uses a Formatter taking care of resource handling. A Formatter is created using the given Locale and passed to the Closure as its argument. After the Closure executes, the Formatter is flushed and closed releasing any associated resources.</source>
          <target state="translated">리소스 처리를 처리하는 Formatter를 사용하는 Closure를 호출합니다. 지정된 로케일을 사용하여 Formatter가 생성되고 인수로 Closure에 전달됩니다. Closure가 실행 된 후 Formatter는 플러시되고 닫히고 관련 리소스가 해제됩니다.</target>
        </trans-unit>
        <trans-unit id="9cce2eb1b481934e56e9a76e82ad8a2fa8aa2d48" translate="yes" xml:space="preserve">
          <source>Invokes a closure passing it a new Sql instance created from the given JDBC connection URL and properties.</source>
          <target state="translated">지정된 JDBC 연결 URL 및 속성에서 생성 된 새 SQL 인스턴스를 전달하는 클로저를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="4fff5443aec8845f0d081181901a1a6083963541" translate="yes" xml:space="preserve">
          <source>Invokes a closure passing it a new Sql instance created from the given JDBC connection URL and properties. The created connection will be closed if required.</source>
          <target state="translated">지정된 JDBC 연결 URL 및 속성에서 생성 된 새 SQL 인스턴스를 전달하는 클로저를 호출합니다. 필요한 경우 생성 된 연결이 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="92e11ff0d25263520e9aa507010ae867bfa1d18b" translate="yes" xml:space="preserve">
          <source>Invokes a closure passing it a new Sql instance created from the given JDBC connection URL, properties and driver classname.</source>
          <target state="translated">지정된 JDBC 연결 URL, 속성 및 드라이버 클래스 이름에서 생성 된 새 SQL 인스턴스를 전달하는 클로저를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="5ccec9dca12c446cbf8014bb784d6a3eeb6d59c3" translate="yes" xml:space="preserve">
          <source>Invokes a closure passing it a new Sql instance created from the given JDBC connection URL, properties and driver classname. The created connection will be closed if required.</source>
          <target state="translated">지정된 JDBC 연결 URL, 속성 및 드라이버 클래스 이름에서 생성 된 새 SQL 인스턴스를 전달하는 클로저를 호출합니다. 필요한 경우 생성 된 연결이 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="94b557171553e899ef2644e6c7de7a2309a26ad3" translate="yes" xml:space="preserve">
          <source>Invokes a closure passing it a new Sql instance created from the given JDBC connection URL, user and password.</source>
          <target state="translated">지정된 JDBC 연결 URL, 사용자 및 암호에서 생성 된 새 SQL 인스턴스를 전달하는 클로저를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="31b625dd20e521a7eb6b106d50c48f7d55149dad" translate="yes" xml:space="preserve">
          <source>Invokes a closure passing it a new Sql instance created from the given JDBC connection URL, user and password. The created connection will be closed if required.</source>
          <target state="translated">지정된 JDBC 연결 URL, 사용자 및 암호에서 생성 된 새 SQL 인스턴스를 전달하는 클로저를 호출합니다. 필요한 경우 생성 된 연결이 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="4c2bda0179ff1222fbb26d425b1fbf21feca66ed" translate="yes" xml:space="preserve">
          <source>Invokes a closure passing it a new Sql instance created from the given JDBC connection URL.</source>
          <target state="translated">지정된 JDBC 연결 URL에서 생성 된 새 Sql 인스턴스를 전달하는 클로저를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="f955fbf3e8d1a4f37177dba0fb1ff9c71d58ed7b" translate="yes" xml:space="preserve">
          <source>Invokes a closure passing it a new Sql instance created from the given JDBC connection URL. The created connection will be closed if required.</source>
          <target state="translated">지정된 JDBC 연결 URL에서 생성 된 새 Sql 인스턴스를 전달하는 클로저를 호출합니다. 필요한 경우 생성 된 연결이 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="395275ffb9967a1c145b5493778159a8a6ae2ed6" translate="yes" xml:space="preserve">
          <source>Invokes a closure passing it a new Sql instance created from the given map of arguments.</source>
          <target state="translated">주어진 인수 맵에서 생성 된 새 Sql 인스턴스를 전달하는 클로저를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="de106f964e8b0a4a44d6e508d303a3a726d5ab83" translate="yes" xml:space="preserve">
          <source>Invokes a closure passing it a new Sql instance created from the given map of arguments. The created connection will be closed if required.</source>
          <target state="translated">주어진 인수 맵에서 생성 된 새 Sql 인스턴스를 전달하는 클로저를 호출합니다. 필요한 경우 생성 된 연결이 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="751ae69bb3c4a727e0a73a4377a088cfa8b7e0ed" translate="yes" xml:space="preserve">
          <source>Invokes a constructor for the given arguments.</source>
          <target state="translated">지정된 인수에 대한 생성자를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="e869c12b4385bca09066459ddd8ffa1bbebec06b" translate="yes" xml:space="preserve">
          <source>Invokes a constructor for the given arguments. The MetaClass will attempt to pick the best argument which matches the types of the objects passed within the arguments array</source>
          <target state="translated">지정된 인수에 대한 생성자를 호출합니다. MetaClass는 arguments 배열 내에서 전달 된 개체의 유형과 일치하는 최상의 인수를 선택하려고합니다.</target>
        </trans-unit>
        <trans-unit id="31bd129052b70e1eb10388ae68cb416dfc1bb5d8" translate="yes" xml:space="preserve">
          <source>Invokes a handle produced by #getInvokeSpecialdHandle</source>
          <target state="translated">#getInvokeSpecialdHandle에 의해 생성 된 핸들을 호출합니다.</target>
        </trans-unit>
        <trans-unit id="b869776d247c322cafc82c46a70f683ef453ef90" translate="yes" xml:space="preserve">
          <source>Invokes a method for the GroovyResultSet.</source>
          <target state="translated">GroovyResultSet에 대한 메서드를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="131b75064d3bbc248839e654bafb0f5fe086a67d" translate="yes" xml:space="preserve">
          <source>Invokes a method for the GroovyResultSet. This will try to invoke the given method first on the extension and then on the result set given as proxy parameter.</source>
          <target state="translated">GroovyResultSet에 대한 메서드를 호출합니다. 이것은 먼저 확장에서 주어진 메소드를 호출 한 다음 프록시 매개 변수로 제공된 결과 세트에서 호출하려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="4536aeb0a0e4240d65c9a5c7f7d2e6e38a9d4116" translate="yes" xml:space="preserve">
          <source>Invokes a method on the given Object with the given name and arguments.</source>
          <target state="translated">지정된 이름과 인수를 사용하여 지정된 Object에 대한 메서드를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="eecc05dda5aa85d3bdeed2fd2f004c3e5f847cef" translate="yes" xml:space="preserve">
          <source>Invokes a method on the given Object with the given name and arguments. The MetaClass will attempt to pick the best method for the given name and arguments. If a method cannot be invoked a MissingMethodException will be thrown.</source>
          <target state="translated">지정된 이름과 인수를 사용하여 지정된 Object에 대한 메서드를 호출합니다. MetaClass는 주어진 이름과 인수에 가장 적합한 방법을 선택하려고합니다. 메서드를 호출 할 수없는 경우 MissingMethodException이 throw됩니다.</target>
        </trans-unit>
        <trans-unit id="f3610230cdefc7f8df225464429b3a3302de5686" translate="yes" xml:space="preserve">
          <source>Invokes a method on the given object, with the given name and single argument.</source>
          <target state="translated">지정된 이름과 단일 인수를 사용하여 지정된 개체에 대한 메서드를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="f56c8023197c89da7dc5515bc1561d796a979161" translate="yes" xml:space="preserve">
          <source>Invokes a method on the given receiver for the specified arguments. The sender is the class that invoked the method on the object. The MetaClass will attempt to establish the method to invoke based on the name and arguments provided.</source>
          <target state="translated">지정된 인수에 대해 지정된 수신자에서 메서드를 호출합니다. 보낸 사람은 개체에서 메서드를 호출 한 클래스입니다. MetaClass는 제공된 이름과 인수를 기반으로 호출 할 메서드를 설정하려고합니다.</target>
        </trans-unit>
        <trans-unit id="e15f12f58d6467c0d2e5025e2e555da17217b48d" translate="yes" xml:space="preserve">
          <source>Invokes a static method on the given Object with the given name and arguments.</source>
          <target state="translated">지정된 이름과 인수를 사용하여 지정된 Object에서 정적 메서드를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="45eef663687ac9d0041d8a7df5794bb9d664ad85" translate="yes" xml:space="preserve">
          <source>Invokes the closure for each 'child' file in this 'parent' folder/directory.</source>
          <target state="translated">이 '부모'폴더 / 디렉토리에있는 각 '하위'파일에 대한 클로저를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="fbc16179b33b27a2d59f2c7081939cd62610db4e" translate="yes" xml:space="preserve">
          <source>Invokes the closure for each 'child' file in this 'parent' folder/directory. Both regular files and subfolders/subdirectories are processed.</source>
          <target state="translated">이 '부모'폴더 / 디렉토리에있는 각 '하위'파일에 대한 클로저를 호출합니다. 일반 파일과 하위 폴더 / 하위 디렉터리가 모두 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="91ad5cf347256d0e340502c93ff3e64c59174d52" translate="yes" xml:space="preserve">
          <source>Invokes the closure for each 'child' file in this 'parent' folder/directory. Both regular files and subfolders/subdirectories can be processed depending on the fileType enum value.</source>
          <target state="translated">이 '부모'폴더 / 디렉토리에있는 각 '하위'파일에 대한 클로저를 호출합니다. 일반 파일과 하위 폴더 / 하위 디렉터리는 모두 fileType 열거 형 값에 따라 처리 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="54c59ab9c10a30c72e6e450ba2ba3b7308898998" translate="yes" xml:space="preserve">
          <source>Invokes the closure for each file whose name (file.name) matches the given nameFilter in the given directory - calling the &lt;a href=&quot;../../../../codehaus/groovy/runtime/defaultgroovymethods#isCase(Object,%20Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; method to determine if a match occurs.</source>
          <target state="translated">이름 (file.name)이 주어진 디렉토리에서 주어진 nameFilter와 일치하는 각 파일에 대해 클로저를 호출합니다. &lt;a href=&quot;../../../../codehaus/groovy/runtime/defaultgroovymethods#isCase(Object,%20Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; 메서드를 호출하여 일치가 발생하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="84d4e7cf060e5e75c1053d46d6e6d3dd2ff5f06b" translate="yes" xml:space="preserve">
          <source>Invokes the closure for each file whose name (file.name) matches the given nameFilter in the given directory - calling the &lt;a href=&quot;../../../../codehaus/groovy/runtime/defaultgroovymethods#isCase(Object,%20Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; method to determine if a match occurs. This method can be used with different kinds of filters like regular expressions, classes, ranges etc. Both regular files and subdirectories are matched.</source>
          <target state="translated">이름 (file.name)이 주어진 디렉토리에서 주어진 nameFilter와 일치하는 각 파일에 대해 클로저를 호출합니다. &lt;a href=&quot;../../../../codehaus/groovy/runtime/defaultgroovymethods#isCase(Object,%20Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; 메서드를 호출하여 일치가 발생하는지 확인합니다. 이 방법은 정규식, 클래스, 범위 등과 같은 다양한 종류의 필터와 함께 사용할 수 있습니다. 정규 파일과 하위 디렉터리가 모두 일치합니다.</target>
        </trans-unit>
        <trans-unit id="ea09e6ac983b8f6254c3e7d2be64c1a519311368" translate="yes" xml:space="preserve">
          <source>Invokes the closure for each file whose name (file.name) matches the given nameFilter in the given directory - calling the &lt;a href=&quot;../../../../codehaus/groovy/runtime/defaultgroovymethods#isCase(Object,%20Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; method to determine if a match occurs. This method can be used with different kinds of filters like regular expressions, classes, ranges etc. Both regular files and subdirectories may be candidates for matching depending on the value of fileType.</source>
          <target state="translated">이름 (file.name)이 주어진 디렉토리에서 주어진 nameFilter와 일치하는 각 파일에 대해 클로저를 호출합니다. &lt;a href=&quot;../../../../codehaus/groovy/runtime/defaultgroovymethods#isCase(Object,%20Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; 메서드를 호출하여 일치가 발생하는지 확인합니다. 이 메서드는 정규식, 클래스, 범위 등과 같은 다양한 종류의 필터와 함께 사용할 수 있습니다. 정규 파일과 하위 디렉터리 모두 fileType 값에 따라 일치 대상이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="538f5d9f69fbfe9fb4894172854e85f6d95fd4ca" translate="yes" xml:space="preserve">
          <source>Invokes the closure for each file whose name (file.name) matches the given nameFilter in the given directory - calling the &lt;a href=&quot;defaultgroovymethods#isCase(Object,%20Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; method to determine if a match occurs.</source>
          <target state="translated">이름 (file.name)이 주어진 디렉토리에서 주어진 nameFilter와 일치하는 각 파일에 대해 클로저를 호출합니다. &lt;a href=&quot;defaultgroovymethods#isCase(Object,%20Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; 메서드를 호출하여 일치가 발생하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="ebd83da05db26da4f03fa7aa86ede89d76304a9c" translate="yes" xml:space="preserve">
          <source>Invokes the closure for each file whose name (file.name) matches the given nameFilter in the given directory - calling the &lt;a href=&quot;defaultgroovymethods#isCase(Object,%20Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; method to determine if a match occurs. This method can be used with different kinds of filters like regular expressions, classes, ranges etc. Both regular files and subdirectories are matched.</source>
          <target state="translated">이름 (file.name)이 주어진 디렉토리에서 주어진 nameFilter와 일치하는 각 파일에 대해 클로저를 호출합니다. &lt;a href=&quot;defaultgroovymethods#isCase(Object,%20Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; 메서드를 호출하여 일치가 발생하는지 확인합니다. 이 방법은 정규식, 클래스, 범위 등과 같은 다양한 종류의 필터와 함께 사용할 수 있습니다. 정규 파일과 하위 디렉터리가 모두 일치합니다.</target>
        </trans-unit>
        <trans-unit id="3dd1718dd885eda866406dcd448c8fe56fdd4157" translate="yes" xml:space="preserve">
          <source>Invokes the closure for each file whose name (file.name) matches the given nameFilter in the given directory - calling the &lt;a href=&quot;defaultgroovymethods#isCase(Object,%20Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; method to determine if a match occurs. This method can be used with different kinds of filters like regular expressions, classes, ranges etc. Both regular files and subdirectories may be candidates for matching depending on the value of fileType.</source>
          <target state="translated">이름 (file.name)이 주어진 디렉토리에서 주어진 nameFilter와 일치하는 각 파일에 대해 클로저를 호출합니다. &lt;a href=&quot;defaultgroovymethods#isCase(Object,%20Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; 메서드를 호출하여 일치가 발생하는지 확인합니다. 이 메서드는 정규식, 클래스, 범위 등과 같은 다양한 종류의 필터와 함께 사용할 수 있습니다. 정규 파일과 하위 디렉터리 모두 fileType 값에 따라 일치 대상이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="12a49c0c1df5dc8d98463707bb0dabb1bb99c4a5" translate="yes" xml:space="preserve">
          <source>Invokes the closure for each file whose name (file.name) matches the given nameFilter in the given directory - calling the &lt;a href=&quot;defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; method to determine if a match occurs.</source>
          <target state="translated">이름 (file.name)이 주어진 디렉토리에서 주어진 nameFilter와 일치하는 각 파일에 대해 클로저를 호출합니다. &lt;a href=&quot;defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; 메서드를 호출하여 일치가 발생하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="a5566b1f45b69cb7cf3eb6a2c5f60572270eaccd" translate="yes" xml:space="preserve">
          <source>Invokes the closure for each file whose name (file.name) matches the given nameFilter in the given directory - calling the &lt;a href=&quot;defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; method to determine if a match occurs. This method can be used with different kinds of filters like regular expressions, classes, ranges etc. Both regular files and subdirectories are matched.</source>
          <target state="translated">이름 (file.name)이 주어진 디렉토리에서 주어진 nameFilter와 일치하는 각 파일에 대해 클로저를 호출합니다. &lt;a href=&quot;defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; 메서드를 호출하여 일치가 발생하는지 확인합니다. 이 방법은 정규식, 클래스, 범위 등과 같은 다양한 종류의 필터와 함께 사용할 수 있습니다. 정규 파일과 하위 디렉터리가 모두 일치합니다.</target>
        </trans-unit>
        <trans-unit id="78253573a5ba0033fd11eaa72b690f99eb2be821" translate="yes" xml:space="preserve">
          <source>Invokes the closure for each file whose name (file.name) matches the given nameFilter in the given directory - calling the &lt;a href=&quot;defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; method to determine if a match occurs. This method can be used with different kinds of filters like regular expressions, classes, ranges etc. Both regular files and subdirectories may be candidates for matching depending on the value of fileType.</source>
          <target state="translated">이름 (file.name)이 주어진 디렉토리에서 주어진 nameFilter와 일치하는 각 파일에 대해 클로저를 호출합니다. &lt;a href=&quot;defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; 메서드를 호출하여 일치가 발생하는지 확인합니다. 이 메서드는 정규식, 클래스, 범위 등과 같은 다양한 종류의 필터와 함께 사용할 수 있습니다. 정규 파일과 하위 디렉터리 모두 fileType 값에 따라 일치 대상이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0eefd49616ba93ed49495f1ed1baa92128411910" translate="yes" xml:space="preserve">
          <source>Invokes the closure for each subdirectory in this directory, ignoring regular files.</source>
          <target state="translated">일반 파일을 무시하고이 디렉토리의 각 하위 디렉토리에 대한 클로저를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="eadda88ea7e4ba8993a63f2a13684720b0176da3" translate="yes" xml:space="preserve">
          <source>Invokes the closure for each subdirectory whose name (dir.name) matches the given nameFilter in the given directory - calling the &lt;a href=&quot;defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; method to determine if a match occurs.</source>
          <target state="translated">이름 (dir.name)이 주어진 디렉토리에서 주어진 nameFilter와 일치하는 각 하위 디렉토리에 대해 클로저를 호출합니다. &lt;a href=&quot;defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; 메서드를 호출하여 일치가 발생하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="5780c5a1ab042cc566cd280f5a47a3954176171c" translate="yes" xml:space="preserve">
          <source>Invokes the closure for each subdirectory whose name (dir.name) matches the given nameFilter in the given directory - calling the &lt;a href=&quot;defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; method to determine if a match occurs. This method can be used with different kinds of filters like regular expressions, classes, ranges etc. Only subdirectories are matched; regular files are ignored.</source>
          <target state="translated">이름 (dir.name)이 주어진 디렉토리에서 주어진 nameFilter와 일치하는 각 하위 디렉토리에 대해 클로저를 호출합니다. &lt;a href=&quot;defaultgroovymethods#isCase(java.lang.Object,%20java.lang.Object)&quot;&gt;DefaultGroovyMethods.isCase&lt;/a&gt; 메서드를 호출하여 일치가 발생하는지 확인합니다. 이 메서드는 정규식, 클래스, 범위 등과 같은 다양한 종류의 필터와 함께 사용할 수 있습니다. 하위 디렉터리 만 일치합니다. 일반 파일은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="8cb60a5ecea6112c8f9a8853a4908f93069305a8" translate="yes" xml:space="preserve">
          <source>Invokes the closure for each subdirectory whose name (dir.name) matches the given nameFilter in the given directory - calling the DefaultGroovyMethods#isCase(java.lang.Object, java.lang.Object) method to determine if a match occurs.</source>
          <target state="translated">이름 (dir.name)이 주어진 디렉토리에서 주어진 nameFilter와 일치하는 각 하위 디렉토리에 대한 클로저를 호출합니다. DefaultGroovyMethods # isCase (java.lang.Object, java.lang.Object) 메서드를 호출하여 일치가 발생하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="0396d0004f231a0b43eec8aa42dcf02e716e2031" translate="yes" xml:space="preserve">
          <source>Invokes the closure for each subdirectory whose name (dir.name) matches the given nameFilter in the given directory - calling the DefaultGroovyMethods#isCase(java.lang.Object, java.lang.Object) method to determine if a match occurs. This method can be used with different kinds of filters like regular expressions, classes, ranges etc. Only subdirectories are matched; regular files are ignored.</source>
          <target state="translated">이름 (dir.name)이 주어진 디렉토리에서 주어진 nameFilter와 일치하는 각 하위 디렉토리에 대한 클로저를 호출합니다. DefaultGroovyMethods # isCase (java.lang.Object, java.lang.Object) 메서드를 호출하여 일치가 발생하는지 확인합니다. 이 메서드는 정규식, 클래스, 범위 등과 같은 다양한 종류의 필터와 함께 사용할 수 있습니다. 하위 디렉터리 만 일치합니다. 일반 파일은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="39006f08945227df06d374666dc803b7b6af6b89" translate="yes" xml:space="preserve">
          <source>Invokes the closure specified with key 'visit' in the options Map for each descendant file in this directory tree.</source>
          <target state="translated">이 디렉토리 트리의 각 하위 파일에 대한 옵션 맵에서 'visit'키로 지정된 클로저를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="a62cceda9c955115aa4e19a454874532a2835fe0" translate="yes" xml:space="preserve">
          <source>Invokes the closure specified with key 'visit' in the options Map for each descendant file in this directory tree. Convenience method for &lt;a href=&quot;#traverse(java.io.File,%20java.util.Map,%20groovy.lang.Closure)&quot;&gt;traverse(java.io.File, java.util.Map, groovy.lang.Closure)&lt;/a&gt; allowing the 'visit' closure to be included in the options Map rather than as a parameter.</source>
          <target state="translated">이 디렉토리 트리의 각 하위 파일에 대한 옵션 맵에서 'visit'키로 지정된 클로저를 호출합니다. &lt;a href=&quot;#traverse(java.io.File,%20java.util.Map,%20groovy.lang.Closure)&quot;&gt;traverse (java.io.File, java.util.Map, groovy.lang.Closure)에&lt;/a&gt; 대한 편리한 메소드로 '방문'클로저가 매개 변수가 아닌 옵션 맵에 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8d79d1942aeb5cb410bbd40b90aedea689cc5334" translate="yes" xml:space="preserve">
          <source>Invokes the closure specified with key 'visit' in the options Map for each descendant file in this directory tree. Convenience method for &lt;a href=&quot;#traverse(java.nio.file.Path,%20java.util.Map,%20groovy.lang.Closure)&quot;&gt;traverse(Path, java.util.Map, groovy.lang.Closure)&lt;/a&gt; allowing the 'visit' closure to be included in the options Map rather than as a parameter.</source>
          <target state="translated">이 디렉토리 트리의 각 하위 파일에 대한 옵션 맵에서 'visit'키로 지정된 클로저를 호출합니다. &lt;a href=&quot;#traverse(java.nio.file.Path,%20java.util.Map,%20groovy.lang.Closure)&quot;&gt;traverse (Path, java.util.Map, groovy.lang.Closure)를&lt;/a&gt; 위한 편리한 메소드로 'visit'클로저가 매개 변수가 아닌 옵션 Map에 포함될 수 있습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
