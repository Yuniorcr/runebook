<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="groovy">
    <body>
      <group id="groovy">
        <trans-unit id="760fa228657db73b5eb21ed04a541b45f18d6dbc" translate="yes" xml:space="preserve">
          <source>Create a collection as a union of an Iterable and an Object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ede90227e819e6dd3fccfdedb446e9fb4ab59fc" translate="yes" xml:space="preserve">
          <source>Create a collection as a union of an Iterable and an Object. If the iterable is a Set, then the returned collection will be a Set otherwise a List. This operation will always create a new object for the result, while the operands remain unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e085427d18bce067dc0acfb9ddb543de1c6b898" translate="yes" xml:space="preserve">
          <source>Create a data input stream for this file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c09ecb1e9797a7682c24f4535ec88339216d68c" translate="yes" xml:space="preserve">
          <source>Create a new BufferedReader for this file and then passes it into the closure, ensuring the reader is closed after the closure returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="860203911559034125b6e84202224e6c30a93006" translate="yes" xml:space="preserve">
          <source>Create a new BufferedReader for this file using the specified charset and then passes it into the closure, ensuring the reader is closed after the closure returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="631fd1efed9f06e5eaf53242905c5b163d802fc3" translate="yes" xml:space="preserve">
          <source>Create a new BufferedReader for this file using the specified charset and then passes it into the closure, ensuring the reader is closed after the closure returns. The writer will use the given charset encoding, but will not write a BOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eab8d09e36f04a3e346e8d2be2f1e32629c7ee4e" translate="yes" xml:space="preserve">
          <source>Create a new BufferedWriter for this file in append mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="723672956fc8c3b9a1564a51a7ae5cc8cdff177e" translate="yes" xml:space="preserve">
          <source>Create a new BufferedWriter for this file in append mode. The writer is passed to the closure and is closed after the closure returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fed61330a440dbc21b83160a9a0fda32488aa33" translate="yes" xml:space="preserve">
          <source>Create a new BufferedWriter for this file in append mode. The writer is passed to the closure and is closed after the closure returns. The writer will not write a BOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ee9940eff00d29a4bcbc86a93fdaa68d9e42773" translate="yes" xml:space="preserve">
          <source>Create a new BufferedWriter which will append to this file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e15577b4939927d332f2d7bfe9e90615a409192a" translate="yes" xml:space="preserve">
          <source>Create a new BufferedWriter which will append to this file. If the given charset is &quot;UTF-16BE&quot; or &quot;UTF-16LE&quot; (or an equivalent alias), the requisite byte order mark is written to the stream when the writer is created. The writer is passed to the closure and will be closed before this method returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a8e8712a082d5c088660a4041341f33f72ca664" translate="yes" xml:space="preserve">
          <source>Create a new BufferedWriter which will append to this file. The writer is passed to the closure and will be closed before this method returns. The writer will use the given charset encoding, but will not write a BOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06bb7b2df95e2abec6a026543d48445ee2da5ffe" translate="yes" xml:space="preserve">
          <source>Create a new BufferedWriter which will append to this file. The writer is passed to the closure and will be closed before this method returns. The writer will use the given charset encoding. If the given charset is &quot;UTF-16BE&quot; or &quot;UTF-16LE&quot; (or an equivalent alias), &lt;code&gt;writeBom&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, and the file doesn't already exist, the requisite byte order mark is written to the stream when the writer is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="216f20f991675e99cd9bc6882d9f2b84df8846bc" translate="yes" xml:space="preserve">
          <source>Create a new Collection composed of the elements of the first Collection minus every occurrence of elements of the given Collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36627c57c4abb6230e58ba6d273390942cde6be3" translate="yes" xml:space="preserve">
          <source>Create a new Collection composed of the elements of the first Iterable minus every occurrence of elements of the given Iterable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c17f0a81b6286523e9c5e8b3c2cf6c58e3a8d5f5" translate="yes" xml:space="preserve">
          <source>Create a new Collection composed of the elements of the first Iterable minus every occurrence of the given element to remove.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e60e26a2754e6ec470fdf3a44ce009dde7ac2a08" translate="yes" xml:space="preserve">
          <source>Create a new DataInputStream for this file and passes it into the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c246268498e1431e82b634964f3ee5a5e2216e" translate="yes" xml:space="preserve">
          <source>Create a new DataInputStream for this file and passes it into the closure. This method ensures the stream is closed after the closure returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13afbe3846bc307e141626a1684661c55ccf580d" translate="yes" xml:space="preserve">
          <source>Create a new DataOutputStream for this file and passes it into the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="042c19cdf56a03656446c81b639d478941cb5574" translate="yes" xml:space="preserve">
          <source>Create a new DataOutputStream for this file and passes it into the closure. This method ensures the stream is closed after the closure returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="645a0352dbc04cf064b7d14e6d56e7d326ad430a" translate="yes" xml:space="preserve">
          <source>Create a new GString with values and strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0cfd73d653f1944d387484e8630a8a0c769645e" translate="yes" xml:space="preserve">
          <source>Create a new InParameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ac904b4dcea914c0975e5fb3fbaf9e6efff16c" translate="yes" xml:space="preserve">
          <source>Create a new InputStream for this file and passes it into the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f2d422b01a18f1649544a81428b0d2d2a0f3752" translate="yes" xml:space="preserve">
          <source>Create a new InputStream for this file and passes it into the closure. This method ensures the stream is closed after the closure returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae12e40b027d4993dc7ae133b4553c279f1dd33" translate="yes" xml:space="preserve">
          <source>Create a new LexerNode for adding to root.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c28bae8109aa4f95cbcb253b38484c9aec7c73" translate="yes" xml:space="preserve">
          <source>Create a new List composed of the elements of the first List minus every occurrence of elements of the given Iterable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f35977695d613b6d3b8ddcba051288fa9ae39a29" translate="yes" xml:space="preserve">
          <source>Create a new List composed of the elements of the first List minus every occurrence of the given element to remove.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a9bc4801c8facc9888ed1eb37db73d4313ace69" translate="yes" xml:space="preserve">
          <source>Create a new ObjectInputStream for this file and pass it to the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdebd03cb3809ec9774496f82b99eab5a43c106c" translate="yes" xml:space="preserve">
          <source>Create a new ObjectInputStream for this file and pass it to the closure. This method ensures the stream is closed after the closure returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7df6efa78ad6b62bd6981d30834344c5c3b3b933" translate="yes" xml:space="preserve">
          <source>Create a new ObjectInputStream for this file associated with the given class loader and pass it to the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e071056c88f0a487c277266ac92e2def301a4e97" translate="yes" xml:space="preserve">
          <source>Create a new ObjectInputStream for this file associated with the given class loader and pass it to the closure. This method ensures the stream is closed after the closure returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f27aa36aee2ac5b380525c63e19366cf507e11" translate="yes" xml:space="preserve">
          <source>Create a new ObjectOutputStream for this file and then pass it to the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21e179123c7a359651e9bac3998e81e095710be0" translate="yes" xml:space="preserve">
          <source>Create a new ObjectOutputStream for this file and then pass it to the closure. This method ensures the stream is closed after the closure returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b301379ef57b033fd4fc83b79f3377b644f14f8a" translate="yes" xml:space="preserve">
          <source>Create a new ObjectOutputStream for this output stream and then pass it to the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d6fddb49d646e73da71d93c80e896f70dc58f4" translate="yes" xml:space="preserve">
          <source>Create a new ObjectOutputStream for this output stream and then pass it to the closure. This method ensures the stream is closed after the closure returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c214150fc0379787c8acc044dbd47825e7f7c461" translate="yes" xml:space="preserve">
          <source>Create a new ObjectOutputStream for this path and then pass it to the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c88ac10f505d9bc07888e14f2e961a2f96662a7a" translate="yes" xml:space="preserve">
          <source>Create a new ObjectOutputStream for this path and then pass it to the closure. This method ensures the stream is closed after the closure returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fa21a84e0c7407983f06bdb9ad30865845833e7" translate="yes" xml:space="preserve">
          <source>Create a new OutParameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0702845dc682442ce6cdf535ca55ccd28d0b5666" translate="yes" xml:space="preserve">
          <source>Create a new PrintWriter for this OutputStream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16fdf2412bcea2a3e5d6fd9169fbb3a4166617bf" translate="yes" xml:space="preserve">
          <source>Create a new PrintWriter for this OutputStream. The writer is passed to the closure, and will be closed before this method returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0dfba1a4fa22627bef5abf009c414d476e9b2f" translate="yes" xml:space="preserve">
          <source>Create a new PrintWriter for this Writer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e4503aeeed2e2bb3d56621031952239ebcd25a" translate="yes" xml:space="preserve">
          <source>Create a new PrintWriter for this Writer. The writer is passed to the closure, and will be closed before this method returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcc6ae10cc8fd9587cd331a9cd780ac976529d8c" translate="yes" xml:space="preserve">
          <source>Create a new PrintWriter for this file which is then passed it into the given closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="768ca8e444cb269aa88e8817ce8789990bf74d97" translate="yes" xml:space="preserve">
          <source>Create a new PrintWriter for this file which is then passed it into the given closure. This method ensures its the writer is closed after the closure returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed37a5c3c0e46a0794487319d6ef8d55ec8a23e" translate="yes" xml:space="preserve">
          <source>Create a new PrintWriter for this file, using specified charset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b064589933cee9387eaca255b6a3055d79e07068" translate="yes" xml:space="preserve">
          <source>Create a new PrintWriter for this file, using specified charset. If the given charset is &quot;UTF-16BE&quot; or &quot;UTF-16LE&quot; (or an equivalent alias), the requisite byte order mark is written to the stream before the writer is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c1c55166843083f89121a2292250b55a84f029f" translate="yes" xml:space="preserve">
          <source>Create a new PrintWriter for this file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d511a3847952d9f1173c878f6339494eb05d641b" translate="yes" xml:space="preserve">
          <source>Create a new PrintWriter with a specified charset for this file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9936a3583b45c3f5f09fbe3e87a6da6ede0ea24a" translate="yes" xml:space="preserve">
          <source>Create a new PrintWriter with a specified charset for this file. If the given charset is &quot;UTF-16BE&quot; or &quot;UTF-16LE&quot; (or an equivalent alias), the requisite byte order mark is written to the stream when the writer is created. The writer is passed to the closure, and will be closed before this method returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f18e15f209e24f41f837d5f20cdde8b84d562808" translate="yes" xml:space="preserve">
          <source>Create a new PrintWriter with a specified charset for this file. The writer is passed to the closure, and will be closed before this method returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d09771d53fd2e1c43a96f496c8fe012dfa0095" translate="yes" xml:space="preserve">
          <source>Create a new ResultSetOutParameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ddfc2d22ee8c1cd0afb598afae4bcaef17c3c3" translate="yes" xml:space="preserve">
          <source>Create a new completer with the default jline.console.completer.ArgumentCompleter.WhitespaceArgumentDelimiter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7435bb5ae592753d2fe74df1804359bd90b21b5" translate="yes" xml:space="preserve">
          <source>Create a new instance of Class klass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b41ed4e77ea6ea6b4cfe6999f3142eaf0149341f" translate="yes" xml:space="preserve">
          <source>Create a new instance of the given script class and parse a configuration object from it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b69538b25c26968145d5e81fca99380c9c930864" translate="yes" xml:space="preserve">
          <source>Create a new object array composed of the elements of the first array minus the element to remove.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0a4001b8a54e491c34ad4a942641031de06183" translate="yes" xml:space="preserve">
          <source>Create a new string writer which will append the text to the given StringBuffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b80e674da126a5a08910d84d99e8753d526a81" translate="yes" xml:space="preserve">
          <source>Create a scope based on given categoryClass and invoke closure within that scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e59bef1d9a25ffe42628623686090f0462785e4" translate="yes" xml:space="preserve">
          <source>Create a scope based on given categoryClasses and invoke closure within that scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d74268b9d90e1b98fb92c9fd4d1f5308cd2052e6" translate="yes" xml:space="preserve">
          <source>Create a statement that will initialize the property including any defensive copying.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4373d01f84211572e7052bf3beb507df5ea9bab5" translate="yes" xml:space="preserve">
          <source>Create a statement that will initialize the property including any defensive copying. Null if no statement should be added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a60a54765e4392351be57a5e989122c0e7d6e2" translate="yes" xml:space="preserve">
          <source>Create a streaming template engine instance using a custom class loader</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="569adb800f7328273fc56fe26504f3e6bca69c64" translate="yes" xml:space="preserve">
          <source>Create a streaming template engine instance using the default class loader</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c507e0a2520b5dea2778e32b7f063d7033438e" translate="yes" xml:space="preserve">
          <source>Create a suffix of the given Map by dropping as many entries as possible from the front of the original Map such that calling the given closure condition evaluates to true when passed each of the dropped entries (or key/value pairs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c529eacf48d24f1aa19f4e5669cc2d481b2a569" translate="yes" xml:space="preserve">
          <source>Create a suffix of the given array by dropping as many elements as possible from the front of the original array such that calling the given closure condition evaluates to true when passed each of the dropped elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d98b5bb0d5f1f04cd897b8c0b0b8572f38be092" translate="yes" xml:space="preserve">
          <source>Create an AST node with the token type and text passed in, but with the same background information as another supplied Token (e.g. line numbers) to be used in place of antlr tree construction syntax, i.e.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3619daeb12e3151c61144d4259963e76c71e884" translate="yes" xml:space="preserve">
          <source>Create an AST node with the token type and text passed in, but with the same background information as another supplied Token (e.g. line numbers) to be used in place of antlr tree construction syntax, i.e. #[TOKEN,&quot;text&quot;] becomes create(TOKEN,&quot;text&quot;,anotherToken) todo - change antlr.ASTFactory to do this instead...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd9d3dd14e7d33a7909c8bbd46cdc5a7ef9d8c3" translate="yes" xml:space="preserve">
          <source>Create an IndentPrinter to the given PrintWriter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4a75dc781b6ed62f051735a4d846562c27f0fde" translate="yes" xml:space="preserve">
          <source>Create an array as a union of two arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26a937b06524e6c92712609661dfd061e66fa22" translate="yes" xml:space="preserve">
          <source>Create an array composed of the elements of the first array minus the elements of the given Iterable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="811250026bb609ba176eb4aded074588acd9ddbc" translate="yes" xml:space="preserve">
          <source>Create an array composed of the elements of the first array minus the elements of the given array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14cba969c1c5639d56d2730a2f0b4870b2a1f8f7" translate="yes" xml:space="preserve">
          <source>Create an array containing elements from an original array plus an additional appended element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1910e5ce4b024cae0678dc641c10717f24c993c3" translate="yes" xml:space="preserve">
          <source>Create an array containing elements from an original array plus those from a Collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3fcd039ea3fd65d49d0034d74d90592ee504016" translate="yes" xml:space="preserve">
          <source>Create an array containing elements from an original array plus those from an Iterable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b57d9de2fc0eca12759e108c7eed2dc72f7a02" translate="yes" xml:space="preserve">
          <source>Create an inout parameter using this in parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a5315c4c0a23b89d084a3fd240632f4cc4bc3b" translate="yes" xml:space="preserve">
          <source>Create an object input stream for this file using the given class loader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee509ec4f7b270faf57771d8ee7b192ff22a8fa7" translate="yes" xml:space="preserve">
          <source>Create an object input stream for this file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca03d2159b58bbc13b53b9a85d648279389130c9" translate="yes" xml:space="preserve">
          <source>Create an object input stream for this input stream using the given class loader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80066a8d9aba23cf0ae564188d263e113c378375" translate="yes" xml:space="preserve">
          <source>Create an object input stream for this input stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be0b6b2d2b9037a50b47585e2af302ffac64aa53" translate="yes" xml:space="preserve">
          <source>Create an object input stream for this path using the given class loader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e1c16984c081f8133c730eb16d53cc639336f4b" translate="yes" xml:space="preserve">
          <source>Create an object output stream for this file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aabf06b831334b81ce660876a7af606b368bf17" translate="yes" xml:space="preserve">
          <source>Create an object output stream for this output stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac3e74aaac1e8256ccae8afc64bca134a1cd62e" translate="yes" xml:space="preserve">
          <source>Create an object output stream for this path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99444920b2ddabe4b757d60d28bb63bfbc6093ec" translate="yes" xml:space="preserve">
          <source>Create link to Javadoc/GroovyDoc output at the given URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c151225eda785420bd5ec9f0b8c9e71e65ca74f9" translate="yes" xml:space="preserve">
          <source>Create lowerBound ClassNode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a3ba03309d174268c54d82eff59578bb84cabd8" translate="yes" xml:space="preserve">
          <source>Create new TemplateServlet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8032bd896858df728aa48db3840d9e8bd0590183" translate="yes" xml:space="preserve">
          <source>Create new shell instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41f3bf9713fc2d9359e72643c2fb19c1063803b9" translate="yes" xml:space="preserve">
          <source>Create new shell instance. Overwrite it to customize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c21c57953532dcef6ae70d60124fbc1d3eb5c4" translate="yes" xml:space="preserve">
          <source>Create the getter block used when reading the property including any defensive copying.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3078e8c19acdf3ba7cf18d83914fb6b3f2006d2a" translate="yes" xml:space="preserve">
          <source>Create the setter block used when setting the property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beb92eb96d83026c3eb2f72c80fbdc222a298da9" translate="yes" xml:space="preserve">
          <source>Create the setter block used when setting the property. Can be null for read-only properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="276f61af0f21919797cb99268eb76cdb722f241d" translate="yes" xml:space="preserve">
          <source>Creates EmptyStatement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e3e9020facfcca1e20a36dfe1a92b45bbbd7528" translate="yes" xml:space="preserve">
          <source>Creates a 2 element list of name and Annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a35420ccd06e0eccf8431c3127f22c1c02155c31" translate="yes" xml:space="preserve">
          <source>Creates a 2 element list of name and Annotation. Used with Annotation Members.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="174db231e855a87e37521d617c5f0014ca65cbaa" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/MonthDay.html&quot;&gt;MonthDay&lt;/a&gt; at the provided day of the month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="343d13d08c5646d8fdc929c3fb49cedb229410b1" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/YearMonth.html&quot;&gt;YearMonth&lt;/a&gt; at the provided &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/Year.html&quot;&gt;Year&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94fe20faafab9d713cd311c7b194e8b80c15976e" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;jsongenerator&quot;&gt;JsonGenerator&lt;/a&gt; that is based on the current options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e92d66e9afb5310ce01563fe439c7dc5c7810a92" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;numberrange&quot;&gt;NumberRange&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c8033da3e00047fcdc39098a1963ad6fae052a" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;numberrange&quot;&gt;NumberRange&lt;/a&gt;. Creates a reversed range if &lt;code&gt;from&lt;/code&gt; &amp;lt; &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af574dcb458a74bc393a45aa9685a71a4c8777f9" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Reduction&lt;/code&gt; from this node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1103b7e4468b27187eec6220fe85ac97e56fd54d" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Reduction&lt;/code&gt; from this node. Returns self if the node is already a &lt;code&gt;Reduction&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16424d7e4082e23a6e9360c5b8d64a6f7026de79" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Reduction&lt;/code&gt; from this token, adding the supplied node as the second element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="445c0bf08585e00960dd51745a72e3cf503f280a" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Reduction&lt;/code&gt; from this token, adding the supplied nodes as the second and third element, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f05628554707da11a9616fe25a40a48f766795e8" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Reduction&lt;/code&gt; from this token, adding the supplied nodes as the second, third, and fourth element, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b8327f94c96352652409b0e850733dac9d56f3c" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Reduction&lt;/code&gt; from this token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14a9ec83e89c9f365f84c05f3120a18d5da4dda8" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Reduction&lt;/code&gt; from this token. Returns self if the node is already a &lt;code&gt;Reduction&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d66b19e7c1c2411c6e2356363dca3e316805636c" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;XmlParser&lt;/code&gt; which does not allow DOCTYPE declarations in documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6630a2d8cf05147cd572e103a2500e16cd25cb51" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;XmlParser&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acd49ca7756d00e6a5afba790b365592bc0cddab" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;XmlSlurper&lt;/code&gt; which does not allow DOCTYPE declarations in documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c427c3952e319cf2ad6301cbaba5812546f038" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;XmlSlurper&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059110831319ae046b634150939ef9fc69c41020" translate="yes" xml:space="preserve">
          <source>Creates a BinaryExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="043fdbed6162be7fbef95a398d64e970e9c4ff69" translate="yes" xml:space="preserve">
          <source>Creates a BitwiseNegationExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b5bf0aa3a605277ac094af96509bfe34085602b" translate="yes" xml:space="preserve">
          <source>Creates a BlockStatement with a scope and children statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25881141db51a2b658110d7bfc5f41a5744cf37" translate="yes" xml:space="preserve">
          <source>Creates a BlockStatement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb838bf6dc319b51a1e11d154ff279d6558f60c" translate="yes" xml:space="preserve">
          <source>Creates a BooleanExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="839d52e6c9d297a71d861876d3a4c92f667bacf9" translate="yes" xml:space="preserve">
          <source>Creates a BreakStatement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa22b91b92cf5c0fb8f791e734883ab801f5d9fe" translate="yes" xml:space="preserve">
          <source>Creates a CastExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25bf39349067955e7677a63d5a1c100d59e058e9" translate="yes" xml:space="preserve">
          <source>Creates a CatchStatement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c76c7138db549850286e96817546bac43f0660f0" translate="yes" xml:space="preserve">
          <source>Creates a ClassExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="067cb2af95edd9bc078eaa42a8f2e3293980a79b" translate="yes" xml:space="preserve">
          <source>Creates a ClassNode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96b07ba28d5792246861fcd0fd56803123547d17" translate="yes" xml:space="preserve">
          <source>Creates a ClassNode containing the wrapper of a ClassNode of primitive type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c5b4ea5f5b5d81269ec79b14aaf55d341a6dac" translate="yes" xml:space="preserve">
          <source>Creates a ClassNode containing the wrapper of a ClassNode of primitive type. Any ClassNode representing a primitive type should be created using the predefined types used in class. The method will check the parameter for known references of ClassNode representing a primitive type. If Reference is found, then a ClassNode will be contained that represents the wrapper class. For example for boolean, the wrapper class is java.lang.Boolean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73b97d3ecd0bfd8f059cf419cb4ae448f0758261" translate="yes" xml:space="preserve">
          <source>Creates a ClassNode using a given class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3402ace8c8ea7719a4ddb0f0312bff68955a88f" translate="yes" xml:space="preserve">
          <source>Creates a ClassNode using a given class. A new ClassNode object is only created if the class is not one of the predefined ones</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241717d4252e3596246e2586a10e88709beab8ed" translate="yes" xml:space="preserve">
          <source>Creates a ClassNode using a given class. If the name is one of the predefined ClassNodes then the corresponding ClassNode instance will be returned. If the name is null or of length 0 the dynamic type is returned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb434c9fc1bfbb0b8666452840447b4f674fe29e" translate="yes" xml:space="preserve">
          <source>Creates a ClassNode using a given class. Unlike make(String) this method will not use the cache to create the ClassNode. This means the ClassNode created from this method using the same name will have a different reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c831c63d180357a6a94b957399f1c3ab05057ada" translate="yes" xml:space="preserve">
          <source>Creates a ClassNode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42b50280188a46e19b3ce28d8497344bc215b6cd" translate="yes" xml:space="preserve">
          <source>Creates a ClassNode[].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bab94bb3f6d46d1397004768f70802dbcd86ffa" translate="yes" xml:space="preserve">
          <source>Creates a Closure representing the body of this GPathResult.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2652a96a14f51185993f869617323e0a119d7414" translate="yes" xml:space="preserve">
          <source>Creates a ClosureExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84571ad023e89a6a926c03cb1caf84a5bde07228" translate="yes" xml:space="preserve">
          <source>Creates a ClosureListExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9131ed4c2a846ebcd91b6ac57dd425952610c145" translate="yes" xml:space="preserve">
          <source>Creates a ConstantExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf6a4bd1fb0ba18a48bce3c982e0077e4d672a7" translate="yes" xml:space="preserve">
          <source>Creates a ConstructorNode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b25d0a01280043d0bf763aff1a9ced696de701e4" translate="yes" xml:space="preserve">
          <source>Creates a ContinueStatement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="400e894d02a2ec1380fd982a16d2ec74abad6fe1" translate="yes" xml:space="preserve">
          <source>Creates a ConversionHandler with an delegate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="478e7ead686f7cd7adce0ea8a9bae2570e75d36c" translate="yes" xml:space="preserve">
          <source>Creates a DeclarationExpression for Expressions like &quot;def (x, y) = [1, 2]&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b84d2b25c4226f751853fbe0ebe203673e5125ba" translate="yes" xml:space="preserve">
          <source>Creates a DeclarationExpression for VariableExpressions like &quot;def x&quot; or &quot;String y = 'foo'&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e915e9d81c343d01994b6cce86a7e4856bf70615" translate="yes" xml:space="preserve">
          <source>Creates a DeclarationExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dfa2901aba0adff2072a0a09fde3a7c27801693" translate="yes" xml:space="preserve">
          <source>Creates a DocumentBuilder and uses it to parse the XML text read from the given reader, allowing parser validation and namespace awareness to be controlled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="745248e09141e530ba170748d5caa7cf605d7641" translate="yes" xml:space="preserve">
          <source>Creates a DocumentBuilder and uses it to parse the XML text read from the given reader, allowing parser validation and namespace awareness to be controlled. Documents are not allowed to contain DOCYTYPE declarations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2457f8af17cc28d14b8a0956a7e53c251e864d99" translate="yes" xml:space="preserve">
          <source>Creates a DocumentBuilder and uses it to parse the XML text read from the given reader, allowing parser validation, namespace awareness and permission of DOCTYPE declarations to be controlled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a564e7ce9e68d11ce6d632f9c2a1ab0ae68cd1e" translate="yes" xml:space="preserve">
          <source>Creates a DocumentBuilder and uses it to parse the XML text read from the given reader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="292b346efdc8c1105e09a59d8cfcdde0da7107b5" translate="yes" xml:space="preserve">
          <source>Creates a DocumentBuilder and uses it to parse the XML text read from the given reader. A non-validating, namespace aware parser which does not allow DOCTYPE declarations is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f2fc0ba5b079e6f70ed8fa350811fffe3a630f3" translate="yes" xml:space="preserve">
          <source>Creates a DynamicVariable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0baf2abc90666d98517f3bab06786ae0928577c" translate="yes" xml:space="preserve">
          <source>Creates a FieldExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e7e3be20c6279a18696b6f59b3bddfa0ba21700" translate="yes" xml:space="preserve">
          <source>Creates a FieldNode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a735a8937148942e2a36de4fe8aa64036ebc1ea7" translate="yes" xml:space="preserve">
          <source>Creates a GenericsType.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0feb21d81052f2cb59bc4426cf03a1297be180ce" translate="yes" xml:space="preserve">
          <source>Creates a GenericsTypes[].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56fec4c1393c5de997d503e0acb8e06dd108b65" translate="yes" xml:space="preserve">
          <source>Creates a Groovy language LexerFrame for the given script text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ebf0b9fc54f82af537644da4d046e52b116250" translate="yes" xml:space="preserve">
          <source>Creates a GroovyResultSet implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a1adfc5449e7fa6c5af689f91575909f84e4f20" translate="yes" xml:space="preserve">
          <source>Creates a ListExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2a3172cbe8d79b7dff56ffd3a5c9dbc340cb9fa" translate="yes" xml:space="preserve">
          <source>Creates a MOP method name from a method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="115c45b037b0fe3dcb28dd443acd8c3087678f87" translate="yes" xml:space="preserve">
          <source>Creates a MapEntryExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fb04273d92dec45a3901ba16f74aabcea453d64" translate="yes" xml:space="preserve">
          <source>Creates a MapExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f23ada2debb1cfb2371929ade738b7a45a76c9a" translate="yes" xml:space="preserve">
          <source>Creates a MethodCallExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e001d44532e4fe5db2342da9683e1cfa0ec894a" translate="yes" xml:space="preserve">
          <source>Creates a MethodNode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a95d6a70038cb2e9f895f769eef5b4a7197049" translate="yes" xml:space="preserve">
          <source>Creates a MixinNode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a375c88f3fd49647b9264189e8675b7b831e04b0" translate="yes" xml:space="preserve">
          <source>Creates a MixinNode[].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f1500f096971f73da338929c9184d3166adf96e" translate="yes" xml:space="preserve">
          <source>Creates a NamedArgumentListExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8339cacb7033a92fa0bda01e0207ac778e301eb1" translate="yes" xml:space="preserve">
          <source>Creates a NotExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="742ed563c8478784976bb57a0c7f74d6c39f8bb0" translate="yes" xml:space="preserve">
          <source>Creates a Parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="559407cd29158eb6ff1be570a8f6e1de7e04be8c" translate="yes" xml:space="preserve">
          <source>Creates a Parameter[].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff352e6da30b97bc9207c873660f81313518c34" translate="yes" xml:space="preserve">
          <source>Creates a PostfixExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34593be67b96f702e3200e8cc0f74a5e36ef7a51" translate="yes" xml:space="preserve">
          <source>Creates a PrefixExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3514602ded8898d890e82d31762bf774ef0f5a3c" translate="yes" xml:space="preserve">
          <source>Creates a PropertyNode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd609698cc5bae76022c5e6d90e5cdd137f27269" translate="yes" xml:space="preserve">
          <source>Creates a RangeExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="457554a2de75d2c4fa187241f2dfe05bb37d4305" translate="yes" xml:space="preserve">
          <source>Creates a ReturnStatement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6c1bf58780eca3143adf2ca660697bbacaf425" translate="yes" xml:space="preserve">
          <source>Creates a Script with a given scriptName and binding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7fb1aadf200f56efc727566198a434f5f57c9a3" translate="yes" xml:space="preserve">
          <source>Creates a SpreadExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399beb6a7c85026b7e3887a60657b79fd4ea8d06" translate="yes" xml:space="preserve">
          <source>Creates a SpreadMapExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f7cddbdea69024d835997b85b677663284a8b8d" translate="yes" xml:space="preserve">
          <source>Creates a StaticMethodCallExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="421d49d0678ea69aa3b3f651957980d2008fbb38" translate="yes" xml:space="preserve">
          <source>Creates a String which is the reverse (backwards) of this CharSequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11553c68b87409d0f5d8a5076faf84886d0f02a2" translate="yes" xml:space="preserve">
          <source>Creates a SwitchStatement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96cab1706d3890710b67f039330345ba19156131" translate="yes" xml:space="preserve">
          <source>Creates a SynchronizedStatement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c67b7831021b1b9320ca7bb8ef9da5d7e2d5fe" translate="yes" xml:space="preserve">
          <source>Creates a ThrowStatement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="673e99e4b863af1c48b4bd35dabf079c0baee4ca" translate="yes" xml:space="preserve">
          <source>Creates a TryCatchStatement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a267e0093cffb9f5de4a141bf87450e306ca8f09" translate="yes" xml:space="preserve">
          <source>Creates a TupleExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8577c826c37fbd191566f74978276ef7e4957c1" translate="yes" xml:space="preserve">
          <source>Creates a UnaryMinusExpression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb1cf791f8f83a7871f74dfb8e1ca89b6aaf05b9" translate="yes" xml:space="preserve">
          <source>Creates a UnaryPlusExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c32892d6807b4fedd7eaf01d5244bb85d37b26af" translate="yes" xml:space="preserve">
          <source>Creates a VariableExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308c8f2901d178e802fe9999cd274b89f4d0df39" translate="yes" xml:space="preserve">
          <source>Creates a WhileStatement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f640a21348a5d44ed5bc1d86f34b13d3468e965" translate="yes" xml:space="preserve">
          <source>Creates a boolean value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b194115408457636d27d2a2a79295b3726bbae92" translate="yes" xml:space="preserve">
          <source>Creates a buffered input stream for this URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2f6f88813acf5ad8f2739cbb7c4d7d4a64f0fb2" translate="yes" xml:space="preserve">
          <source>Creates a buffered input stream for this URL. The default connection parameters can be modified by adding keys to the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4cef90f5a69f0a521e158fd790c6066d209f55" translate="yes" xml:space="preserve">
          <source>Creates a buffered input stream for this file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6766540902b4654d0a3ea1c4093f1e48f0b43fc" translate="yes" xml:space="preserve">
          <source>Creates a buffered reader for this URL using the given encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2476a90200c31332caf203cd6aa03bae6c1a72c1" translate="yes" xml:space="preserve">
          <source>Creates a buffered reader for this URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da7ac8c8fb7396c0dd6c9eac7e2146673af111d8" translate="yes" xml:space="preserve">
          <source>Creates a buffered reader for this URL. The default connection parameters can be modified by adding keys to the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de61a30e5a0ef7990b63e4c72ac72e0d1d96e8a" translate="yes" xml:space="preserve">
          <source>Creates a buffered writer for this file without writing a BOM, writing data using the given encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e1489ddcd80b27f1bb9157a5373bce449e2344" translate="yes" xml:space="preserve">
          <source>Creates a buffered writer for this file, optionally appending to the existing file content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad9f861bc7c66211750e8fc0bab029f0d88ddb58" translate="yes" xml:space="preserve">
          <source>Creates a buffered writer for this file, writing data without writing a BOM, using a specified encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="372db7b765978b4bb162cf7acc238dd8c57bcb3b" translate="yes" xml:space="preserve">
          <source>Creates a caching variant of the closure with automatic cache size adjustment and lower and upper limits on the cache size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91bf4fc32e82dbf2b28f38fc94657140dbbc0850" translate="yes" xml:space="preserve">
          <source>Creates a caching variant of the closure with automatic cache size adjustment and lower and upper limits on the cache size. Whenever the closure is called, the mapping between the parameters and the return value is preserved in cache making subsequent calls with the same arguments fast. This variant allows the garbage collector to release entries from the cache and at the same time allows the user to specify how many entries should be protected from the eventual gc-initiated eviction. Cached entries exceeding the specified preservation threshold are made available for eviction based on the LRU (Last Recently Used) strategy. Given the non-deterministic nature of garbage collector, the actual cache size may grow well beyond the protected size limits set by the user, if memory is plentiful. Also, this variant will never exceed in size the upper size limit. Once the upper size limit has been reached, the values in the cache start rotating using the LRU (Last Recently Used) strategy. The returned function can be safely used concurrently from multiple threads, however, the implementation values high average-scenario performance and so concurrent calls on the memoized function with identical argument values may not necessarily be able to benefit from each other's cached return value. Also the protectedCacheSize parameter might not be respected accurately in such scenarios for some periods of time. With this having been mentioned, the performance trade-off still makes concurrent use of memoized functions safe and highly recommended. The cache gets garbage-collected together with the memoized closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="684a6c7763f56b7b08dc9d681021d60d2f02a626" translate="yes" xml:space="preserve">
          <source>Creates a caching variant of the closure with automatic cache size adjustment and lower limit on the cache size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fb2e6c4ffa3c5593032edf2e9926b3749886d27" translate="yes" xml:space="preserve">
          <source>Creates a caching variant of the closure with automatic cache size adjustment and lower limit on the cache size. Whenever the closure is called, the mapping between the parameters and the return value is preserved in cache making subsequent calls with the same arguments fast. This variant allows the garbage collector to release entries from the cache and at the same time allows the user to specify how many entries should be protected from the eventual gc-initiated eviction. Cached entries exceeding the specified preservation threshold are made available for eviction based on the LRU (Last Recently Used) strategy. Given the non-deterministic nature of garbage collector, the actual cache size may grow well beyond the limits set by the user if memory is plentiful. The returned function can be safely used concurrently from multiple threads, however, the implementation values high average-scenario performance and so concurrent calls on the memoized function with identical argument values may not necessarily be able to benefit from each other's cached return value. Also the protectedCacheSize parameter might not be respected accurately in such scenarios for some periods of time. With this having been mentioned, the performance trade-off still makes concurrent use of memoized functions safe and highly recommended. The cache gets garbage-collected together with the memoized closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cf74245072e5ca0cb82d3ef7b7104f731183ebb" translate="yes" xml:space="preserve">
          <source>Creates a caching variant of the closure with upper limit on the cache size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38ef435f59299b8af6d5ae8d173d8563ae87034d" translate="yes" xml:space="preserve">
          <source>Creates a caching variant of the closure with upper limit on the cache size. Whenever the closure is called, the mapping between the parameters and the return value is preserved in cache making subsequent calls with the same arguments fast. This variant will keep all values until the upper size limit is reached. Then the values in the cache start rotating using the LRU (Last Recently Used) strategy. The returned function can be safely used concurrently from multiple threads, however, the implementation values high average-scenario performance and so concurrent calls on the memoized function with identical argument values may not necessarily be able to benefit from each other's cached return value. With this having been mentioned, the performance trade-off still makes concurrent use of memoized functions safe and highly recommended. The cache gets garbage-collected together with the memoized closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d7aa4416b93045738f2c3bbd2ec3c0e5441e81b" translate="yes" xml:space="preserve">
          <source>Creates a caching variant of the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21d61ec13cdb52f21bf8cfccf06711fb1f1e61ae" translate="yes" xml:space="preserve">
          <source>Creates a caching variant of the closure. Whenever the closure is called, the mapping between the parameters and the return value is preserved in cache making subsequent calls with the same arguments fast. This variant will keep all cached values forever, i.e. till the closure gets garbage-collected. The returned function can be safely used concurrently from multiple threads, however, the implementation values high average-scenario performance and so concurrent calls on the memoized function with identical argument values may not necessarily be able to benefit from each other's cached return value. With this having been mentioned, the performance trade-off still makes concurrent use of memoized functions safe and highly recommended. The cache gets garbage-collected together with the memoized closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e8d7eedd1fc230de92264b26c01d6c62f5e822b" translate="yes" xml:space="preserve">
          <source>Creates a child shell using a new ClassLoader which uses the parent shell's class loader as its parent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e58eda825276ededc2f0d64c93e160f5b2521dd" translate="yes" xml:space="preserve">
          <source>Creates a file with the specified name and the contents from the source file (copy).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d15c8bf4f135b140551683bcbabf07a73a58b8b" translate="yes" xml:space="preserve">
          <source>Creates a file with the specified name and the specified binary contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e83490082b665f1e72916f34c7892c9634640918" translate="yes" xml:space="preserve">
          <source>Creates a file with the specified name and the text contents using the system default encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ddc2692c41f2fb5e413b50c931f6bd674f5795a" translate="yes" xml:space="preserve">
          <source>Creates a fully-normalized meta map for a given collection of listeners.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58febe97fc6e26cc317c57d2e6a4753c3df860eb" translate="yes" xml:space="preserve">
          <source>Creates a gString.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58444dd225d939b14e0a4009291c4fc27ae851a7" translate="yes" xml:space="preserve">
          <source>Creates a getter, setter and field</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="819553cd01020586d964c40cc0cb7a9011c5f8c0" translate="yes" xml:space="preserve">
          <source>Creates a label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cd7a3cbb43903ee85da034ac6f02f4c1bdebb03" translate="yes" xml:space="preserve">
          <source>Creates a list of objects representing this GPathResult.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f48ef4ef6f1608899b5791c58e8c443e806691c" translate="yes" xml:space="preserve">
          <source>Creates a list of upperBound ClassNodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ac585fdca5da64ec7e9de2d3c2e3a2b83faa041" translate="yes" xml:space="preserve">
          <source>Creates a mapEntry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="519e4df9075bd9470c4de55f094b84b861d3b472" translate="yes" xml:space="preserve">
          <source>Creates a metaclass implementation for theClass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b35b7e0f712d00625e7e21efa06b73b1ad276f56" translate="yes" xml:space="preserve">
          <source>Creates a methodPointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d952330c82297fe446316a59f5e8c5139c864b10" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;concurrentlinkedhashmap&quot;&gt;ConcurrentLinkedHashMap&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4223ae82c9624b24ac756300c9cdc3143b768c0" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;emptyrange&quot;&gt;EmptyRange&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="908b1340418ecb0a75f26c8398b22eca8c80fc77" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;numberrange&quot;&gt;NumberRange&lt;/a&gt; with step size 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c5fdbefef0d61cce357576b8a7d57946d18e2ed" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;numberrange&quot;&gt;NumberRange&lt;/a&gt; with step size 1. Creates a reversed range if &lt;code&gt;from&lt;/code&gt; &amp;lt; &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9677238f2a22e025765a2516d9019fc75afeaf89" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;objectrange&quot;&gt;ObjectRange&lt;/a&gt; assumes smaller &amp;lt;= larger, else behavior is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6eea34b7db705913b62e0c0e0b2c1e806738bd" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;objectrange&quot;&gt;ObjectRange&lt;/a&gt; assumes smaller &amp;lt;= larger, else behavior is undefined. Caution: Prefer the other constructor when in doubt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac91744b154f1ab112d0b78828f264b29843125a" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;objectrange&quot;&gt;ObjectRange&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a165ca071c5c04deb592ae031ef1dfc721d405" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;objectrange&quot;&gt;ObjectRange&lt;/a&gt;. Creates a reversed range if &lt;code&gt;from&lt;/code&gt; &amp;lt; &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd16db8cb4632bcb55547bd2576ce2ee5f842ceb" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Reduction&lt;/code&gt; with &lt;code&gt;Token.NULL&lt;/code&gt; as its root.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a24075398c667e222593b663e366846f3c752e16" translate="yes" xml:space="preserve">
          <source>Creates a new BufferedWriter as stdin for this process, passes it to the closure, and ensures the stream is flushed and closed after the closure returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efc8c542f0df0c8b2f25254d0c751a237fa87c25" translate="yes" xml:space="preserve">
          <source>Creates a new BufferedWriter as stdin for this process, passes it to the closure, and ensures the stream is flushed and closed after the closure returns. A new Thread is started, so this method will return immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fef1a0f471576d77be0beca9f2131daa3dcfa0d" translate="yes" xml:space="preserve">
          <source>Creates a new BufferedWriter for this file, passes it to the closure, and ensures the stream is flushed and closed after the closure returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42e60265c7c38d1310d6a96bec129cf3ce6158e0" translate="yes" xml:space="preserve">
          <source>Creates a new BufferedWriter for this file, passes it to the closure, and ensures the stream is flushed and closed after the closure returns. The writer will not write a BOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eed2bb73796ac947e78bf9a774180424f03d426" translate="yes" xml:space="preserve">
          <source>Creates a new BufferedWriter for this file, passes it to the closure, and ensures the stream is flushed and closed after the closure returns. The writer will use the given charset encoding, but will not write a BOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="203fbe2212c309b8253af8e70be379044584f361" translate="yes" xml:space="preserve">
          <source>Creates a new BufferedWriter for this file, passes it to the closure, and ensures the stream is flushed and closed after the closure returns. The writer will use the given charset encoding. If the given charset is &quot;UTF-16BE&quot; or &quot;UTF-16LE&quot; (or an equivalent alias), &lt;code&gt;writeBom&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, and the file doesn't already exist, the requisite byte order mark is written to the stream when the writer is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981350e27b38ba9d85e8b1193f13d909d62802bf" translate="yes" xml:space="preserve">
          <source>Creates a new BufferedWriter for this file, passes it to the closure, and ensures the stream is flushed and closed after the closure returns. The writer will use the given charset encoding. If the given charset is &quot;UTF-16BE&quot; or &quot;UTF-16LE&quot; (or an equivalent alias), the requisite byte order mark is written to the stream when the writer is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6acfd9f62335689ba2dac71f3ec9435fb4d44237" translate="yes" xml:space="preserve">
          <source>Creates a new GPathResult named &lt;code&gt;name&lt;/code&gt; with the parent &lt;code&gt;parent&lt;/code&gt;, the namespacePrefix &lt;code&gt;namespacePrefix&lt;/code&gt; and the namespaceTagHints specified in the &lt;code&gt;namespaceTagHints&lt;/code&gt; Map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb5dba6d30bcb4de444468317e23f9ebb2e1660f" translate="yes" xml:space="preserve">
          <source>Creates a new InputStream for this URL and passes it into the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5881d5532e5c727c96fe6916dffd5b446ffd4c4d" translate="yes" xml:space="preserve">
          <source>Creates a new InputStream for this URL and passes it into the closure. This method ensures the stream is closed after the closure returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="543e26c5ca5882a48086c7caecd9e33f4ee68bcd" translate="yes" xml:space="preserve">
          <source>Creates a new List by inserting all of the elements in the given Iterable to the elements from this List at the specified index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e93d89a5b3a741be6b254ec502b0c5dad9f9d26" translate="yes" xml:space="preserve">
          <source>Creates a new List by inserting all of the elements in the given additions List to the elements from the original List at the specified index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d6fe095ac51891cc8a8d97ad8155ab295bffd27" translate="yes" xml:space="preserve">
          <source>Creates a new List by inserting all of the elements in the given additions List to the elements from the original List at the specified index. Shifts the element currently at that index (if any) and any subsequent elements to the right (increasing their indices). The new elements will appear in the resulting List in the order that they occur in the original lists. The behavior of this operation is undefined if the original lists are modified while the operation is in progress. The original lists remain unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="794c622f5fd82d00b80883bbfb706ae5d3dd07a3" translate="yes" xml:space="preserve">
          <source>Creates a new List by inserting all of the elements in the specified array to the elements from the original List at the specified index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13306215e9dda01f5701b325b2d73b1982eef5ca" translate="yes" xml:space="preserve">
          <source>Creates a new List by inserting all of the elements in the specified array to the elements from the original List at the specified index. Shifts the element currently at that index (if any) and any subsequent elements to the right (increasing their indices). The new elements will appear in the resulting List in the order that they occur in the original array. The behavior of this operation is undefined if the list or array operands are modified while the operation is in progress. The original list and array operands remain unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a0c62ed325f5ade86ea4bd6fbd2bb3ba2a5cf68" translate="yes" xml:space="preserve">
          <source>Creates a new List with the identical contents to this list but in reverse order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69df289237765738067f84b5cfd9408d7768defd" translate="yes" xml:space="preserve">
          <source>Creates a new Message from the specified SyntaxException.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84c49cadd0567ba5308bc4044c738eebae6be9d3" translate="yes" xml:space="preserve">
          <source>Creates a new Message from the specified text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1912573a91c63df230d247189794d1da9fa7902" translate="yes" xml:space="preserve">
          <source>Creates a new MethodSelectionException.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a2c550873599b92927aab3407ab7fae062cbf8a" translate="yes" xml:space="preserve">
          <source>Creates a new Node named &lt;code&gt;name&lt;/code&gt; and if a parent is supplied, adds the newly created node as a child of the parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="756dd3138f5a51a608ab6667311b1f0a43f24d5e" translate="yes" xml:space="preserve">
          <source>Creates a new Node named &lt;code&gt;name&lt;/code&gt; with attributes specified in the &lt;code&gt;attributes&lt;/code&gt; Map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d6c506ca5cadacc80653a843a07c04dbda4d91b" translate="yes" xml:space="preserve">
          <source>Creates a new Node named &lt;code&gt;name&lt;/code&gt; with attributes specified in the &lt;code&gt;attributes&lt;/code&gt; Map. If a parent is supplied, the newly created node is added as a child of the parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea421c58fd772174d845fe91cda6e0df2f288fb" translate="yes" xml:space="preserve">
          <source>Creates a new Node named &lt;code&gt;name&lt;/code&gt; with value &lt;code&gt;value&lt;/code&gt; and if a parent is supplied, adds the newly created node as a child of the parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d42d45e55e8394dbf2aca59be22629944b5c08" translate="yes" xml:space="preserve">
          <source>Creates a new Node named &lt;code&gt;name&lt;/code&gt; with value &lt;code&gt;value&lt;/code&gt; and with attributes specified in the &lt;code&gt;attributes&lt;/code&gt; Map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f9340c1116190e566bbaef296a8541c14c982e" translate="yes" xml:space="preserve">
          <source>Creates a new Node named &lt;code&gt;name&lt;/code&gt; with value &lt;code&gt;value&lt;/code&gt; and with attributes specified in the &lt;code&gt;attributes&lt;/code&gt; Map. If a parent is supplied, the newly created node is added as a child of the parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45564aead0df4f370b20ec3585fc1f2980e941c9" translate="yes" xml:space="preserve">
          <source>Creates a new Node with the same name, no parent, shallow cloned attributes and if the value is a NodeList, a (deep) clone of those nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a344d731f02f0a9eb957999287eec7f13871994c" translate="yes" xml:space="preserve">
          <source>Creates a new NodeList containing the same elements as the original (but cloned in the case of Nodes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c988f7f0451ae67b2c3970ab6d9faed24cc5f986" translate="yes" xml:space="preserve">
          <source>Creates a new NumberRange with the same &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; as this IntRange but with a step size of &lt;code&gt;stepSize&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449ccbf78567c824365adbd62877929890a0067a" translate="yes" xml:space="preserve">
          <source>Creates a new OutputStream for this file and passes it into the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e11732dd166b2367880ba11ff8f66eb7a8a864c7" translate="yes" xml:space="preserve">
          <source>Creates a new OutputStream for this file and passes it into the closure. This method ensures the stream is closed after the closure returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a16d742f74fe30d064fd676c874813260583ca53" translate="yes" xml:space="preserve">
          <source>Creates a new Sql instance given a JDBC connection URL and a driver class name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d6e41488dc5c5d03847edb91c2ec6ce21cbe7ea" translate="yes" xml:space="preserve">
          <source>Creates a new Sql instance given a JDBC connection URL and some properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="595c130ccd79fbb5dbb8c5b5d83fe638212b6a75" translate="yes" xml:space="preserve">
          <source>Creates a new Sql instance given a JDBC connection URL, a username and a password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e84b8e3fad08a72362b8bb2e0b71bf2938a2c65b" translate="yes" xml:space="preserve">
          <source>Creates a new Sql instance given a JDBC connection URL, a username, a password and a driver class name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19da87cdc78572b7a7324d048ad803cd3e7d9616" translate="yes" xml:space="preserve">
          <source>Creates a new Sql instance given a JDBC connection URL, some properties and a driver class name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60a63c6051a55e0df64e3f77fb687d446bbb6b18" translate="yes" xml:space="preserve">
          <source>Creates a new Sql instance given a JDBC connection URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bbd3854535f0645d18ce354e6a7b73100bd868e" translate="yes" xml:space="preserve">
          <source>Creates a new Sql instance given parameters in a Map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3ae36f632da465a4b34f9dc9d80e6609d759d7f" translate="yes" xml:space="preserve">
          <source>Creates a new Sql instance given parameters in a Map. Recognized keys for the Map include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cf2f001ef7995b63a4e71296f42111e4ab9d82a" translate="yes" xml:space="preserve">
          <source>Creates a new array containing items which are the same as this array but in reverse order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046bb7c4a9baec7284d2544213e6bc4e7eb6a164" translate="yes" xml:space="preserve">
          <source>Creates a new array containing the elements of the specified array but in a random order using the specified random instance as the source of randomness.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a5fb049e3c31fa19a3fd63d46d5855fbcc5d570" translate="yes" xml:space="preserve">
          <source>Creates a new array containing the elements of the specified array but in a random order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700242aa47d8b8077ebd140bfb8ba025fa3de510" translate="yes" xml:space="preserve">
          <source>Creates a new break label and a element for the state stack so pop has to be called later</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01cb85bd6fdd5ad86eef6dcbbed3307f9a22916f" translate="yes" xml:space="preserve">
          <source>Creates a new buffered OutputStream as stdin for this process, passes it to the closure, and ensures the stream is flushed and closed after the closure returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88736ca110d2ef020eef1888fae023dd94b9bdd3" translate="yes" xml:space="preserve">
          <source>Creates a new buffered OutputStream as stdin for this process, passes it to the closure, and ensures the stream is flushed and closed after the closure returns. A new Thread is started, so this method will return immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71ac51cca2035c1a93ac69ec23b8f2f6c96cd544" translate="yes" xml:space="preserve">
          <source>Creates a new caching template resolver using a concurrent hash map as the backing cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc630dfdd6053aaade9098a80d94db5ec7750e9" translate="yes" xml:space="preserve">
          <source>Creates a new caching template resolver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3622e057c1c302c812c97858d7300cc4aedf8050" translate="yes" xml:space="preserve">
          <source>Creates a new caching template resolver. The cache implementation being used depends on the use of the template engine. If multiple templates can be rendered in parallel, it &lt;b&gt;must&lt;/b&gt; be using a thread-safe cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="426390d7f08eaeb4ff3a15ffe7e00b26257eeffa" translate="yes" xml:space="preserve">
          <source>Creates a new closure delegating to the supplied one and memoizing all return values by the arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e98c3aad69642e10423b83fe3bfacd33b79bffd5" translate="yes" xml:space="preserve">
          <source>Creates a new closure delegating to the supplied one and memoizing all return values by the arguments. The memoizing closure will use SoftReferences to remember the return values allowing the garbage collector to reclaim the memory, if needed. The supplied cache is used to store the memoized values and it is the cache's responsibility to put limits on the cache size or implement cache eviction strategy. The LRUCache, for example, allows to set the maximum cache size constraint and implements the LRU (Last Recently Used) eviction strategy. If the protectedCacheSize argument is greater than 0 an optional LRU (Last Recently Used) cache of hard references is maintained to protect recently touched memoized values against eviction by the garbage collector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c172b559202c7ebb9ef0e5ea18ce73a136446f2" translate="yes" xml:space="preserve">
          <source>Creates a new closure delegating to the supplied one and memoizing all return values by the arguments. The supplied cache is used to store the memoized values and it is the cache's responsibility to put limits on the cache size or implement cache eviction strategy. The LRUCache, for example, allows to set the maximum cache size constraint and implements the LRU (Last Recently Used) eviction strategy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe452b5442317525d789527090c182179d7cfc5" translate="yes" xml:space="preserve">
          <source>Creates a new constructor for each combination of default parameter expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3e004e2a87ef6c0f5dd5ba66dcc7349a311e0fd" translate="yes" xml:space="preserve">
          <source>Creates a new data output stream for this file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93a4618684a53b13a368998f7ad3826e76c38c17" translate="yes" xml:space="preserve">
          <source>Creates a new directory and allows to specify a subdirectory structure using the closure as a specification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a092fa680658efd1f7598b55ae5f0edeec925b5" translate="yes" xml:space="preserve">
          <source>Creates a new empty directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f190c29d1b6f809ff5781118481cce3ecba0c9" translate="yes" xml:space="preserve">
          <source>Creates a new file in the current directory, whose contents is going to be generated in the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7772bcbd1f17fe9f064929da851a99a981c6560" translate="yes" xml:space="preserve">
          <source>Creates a new file in the current directory, whose contents is going to be generated in the closure. The delegate of the closure is the file being created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4636e933708d9dfb66f4cd0fb6365692f9081782" translate="yes" xml:space="preserve">
          <source>Creates a new helper method for each combination of default parameter expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b06fa34b298f7bdc7962ce6bb4bb8a890da46ba" translate="yes" xml:space="preserve">
          <source>Creates a new inclusive aware &lt;code&gt;IntRange&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c7c490ecd0ccc419958f30ab7e7b24f03adf80" translate="yes" xml:space="preserve">
          <source>Creates a new instance of ConsoleTextEditor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d22584caa263ad1215d9eaf61a1614ecaeafb61" translate="yes" xml:space="preserve">
          <source>Creates a new instance of GroovyFilter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="698396835bdc0d4d7fa574fd5ac60c0d08e98743" translate="yes" xml:space="preserve">
          <source>Creates a new instance of MasterFrameHandler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f6b8076ee87e0c4611a80357e0bc099cb5afb3" translate="yes" xml:space="preserve">
          <source>Creates a new instance of StructuredSyntaxDocumentFilter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50362eeccb0ccd751034a9ce778f97539229a7a3" translate="yes" xml:space="preserve">
          <source>Creates a new instance of TextEditor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd319e32adade9ec140a3049a5118357721c971" translate="yes" xml:space="preserve">
          <source>Creates a new instance of TextUndoManager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4704847cb769bed883fd1a2593d75830f3827b7" translate="yes" xml:space="preserve">
          <source>Creates a new list containing the elements of the specified list but in a random order using the specified random instance as the source of randomness.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81af5ef9b4978eef09716b504ec64d7fd10560d5" translate="yes" xml:space="preserve">
          <source>Creates a new list containing the elements of the specified list but in a random order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0097373c52d95c4c9680ba5f2a83b312ca6778" translate="yes" xml:space="preserve">
          <source>Creates a new method for each combination of default parameter expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d892c2c51fc7c82ccb27e7abe07c1bf93778c36" translate="yes" xml:space="preserve">
          <source>Creates a new node as a child of the current node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92c0a80010196cd231ffdce4a05639b3a1477533" translate="yes" xml:space="preserve">
          <source>Creates a new node with the given parent, name, and attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57d8a7f4aae577d1a7b932405ddc678d4c9ec780" translate="yes" xml:space="preserve">
          <source>Creates a new node with the given parent, name, and attributes. The default implementation returns an instance of &lt;code&gt;groovy.util.Node&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461373a6b570067ef1446d43f93e9cf24c3f3232" translate="yes" xml:space="preserve">
          <source>Creates a new non-inclusive aware &lt;code&gt;IntRange&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0008cae52cf07c084e726e20cebe132df40770be" translate="yes" xml:space="preserve">
          <source>Creates a new non-inclusive aware &lt;code&gt;IntRange&lt;/code&gt;. If &lt;code&gt;from&lt;/code&gt; is greater than &lt;code&gt;to&lt;/code&gt;, a reverse range is created with &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; swapped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55583734f66c0c2d4ad2d1c74a52476a45b5e4e4" translate="yes" xml:space="preserve">
          <source>Creates a new print stream, without automatic line flushing, with the specified file and charset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85d72a3e66c3643d92c1588151f576ddf511be21" translate="yes" xml:space="preserve">
          <source>Creates a new print stream, without automatic line flushing, with the specified file name and charset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00778e267b7bcd4867ca7c3bd8218da57790d1fa" translate="yes" xml:space="preserve">
          <source>Creates a new print stream, without automatic line flushing, with the specified file name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a3a3856098966207bf047e9f8aa771b451f33b" translate="yes" xml:space="preserve">
          <source>Creates a new print stream, without automatic line flushing, with the specified file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6231b913fccb40583ad8cd1ce8e38e176c54c2e9" translate="yes" xml:space="preserve">
          <source>Creates a new print stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5104be0c4992d29cd8fab8cee43e7d2065efcc87" translate="yes" xml:space="preserve">
          <source>Creates a new print stream. This stream will not flush automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96a4bc312923d7a395584999b6e51f433ba99d2a" translate="yes" xml:space="preserve">
          <source>Creates a new proxy instance with a custom extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d20fa675d1bf641bef5014cb9a0559e51ffecf" translate="yes" xml:space="preserve">
          <source>Creates a new proxy instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1934bb9e094e43fcc9f263388dad536400d668c0" translate="yes" xml:space="preserve">
          <source>Creates a new proxy instance. This will create the extension automatically using GroovyResultSetExtension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce01a3ab2a4d7f931a54575aa9222a96cea1148" translate="yes" xml:space="preserve">
          <source>Creates a new row index for child tr tags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8d5acd60f4a0b4c2e3def86df96b96ee7c7b047" translate="yes" xml:space="preserve">
          <source>Creates a new warning message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebf5d1ae79787ed5a5b425445f03a76dd7fe4010" translate="yes" xml:space="preserve">
          <source>Creates a non-primary &lt;code&gt;ClassNode&lt;/code&gt; from a real class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29908d42eb33f56031ec464f8ede68270f451a7c" translate="yes" xml:space="preserve">
          <source>Creates a non-validating and namespace-aware &lt;code&gt;XmlParser&lt;/code&gt; which does not allow DOCTYPE declarations in documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c681d46a023c9f670849f8ece048c48c5774fc2a" translate="yes" xml:space="preserve">
          <source>Creates a non-validating and namespace-aware &lt;code&gt;XmlSlurper&lt;/code&gt; which does not allow DOCTYPE declarations in documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3205802b6563f173dff82a911488779a6479788b" translate="yes" xml:space="preserve">
          <source>Creates a picker which will extract the parameterIndex-th parameter type, or its genericTypeIndex-th generic type genericTypeIndex is &amp;gt;=0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d0b8db88d2751c20d2d5d1d3dc1c507de275853" translate="yes" xml:space="preserve">
          <source>Creates a property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56aaa520af682116cff6a1d40d816afe74ac78be" translate="yes" xml:space="preserve">
          <source>Creates a proxy with a delegate object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="382127f4376dae989d458ee01beabe23bbdf5db7" translate="yes" xml:space="preserve">
          <source>Creates a reader for this input stream, using the specified charset as the encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1401fa2425a82ba43791ef59ee2d111ff43e05ca" translate="yes" xml:space="preserve">
          <source>Creates a reader for this input stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b51a59bcc2382efcff7f088ba87c116e07cd389f" translate="yes" xml:space="preserve">
          <source>Creates a setter method with the given body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="780d092deabf69fc2ef985f3d117a1a93cf6bb7a" translate="yes" xml:space="preserve">
          <source>Creates a spreadable map from this array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b336a3f41417571ca3758c6ac89a007fca4b470" translate="yes" xml:space="preserve">
          <source>Creates a spreadable map from this iterable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c49470aeb5c2f3a0f27a5907fd598ae8f0958e6b" translate="yes" xml:space="preserve">
          <source>Creates a spreadable map from this list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c2a5dd13a6198936201770d9e71c5c37f291660" translate="yes" xml:space="preserve">
          <source>Creates a statement body similar to: &lt;code&gt;field = value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4630818dcebed741d58c905528b6df0b756b4bbc" translate="yes" xml:space="preserve">
          <source>Creates a statement body similar to: &lt;code&gt;this.firePropertyChange(&quot;field&quot;, field, field = value)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1604841a0dd55cec1c108d5960f96e99100049fb" translate="yes" xml:space="preserve">
          <source>Creates a statement body similar to: &lt;code&gt;this.fireVetoableChange(&quot;field&quot;, field, field = value)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddb20e832b1cfbfc7926d956f7dc7ca2293dc03d" translate="yes" xml:space="preserve">
          <source>Creates a string representation of an assertion and its recorded values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c89bb189fa2653598cd79a72a3ef8b81665385c" translate="yes" xml:space="preserve">
          <source>Creates a sub-Map containing the given keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21ad643f5cbc77d4ba190a9db658d61ae9a253c" translate="yes" xml:space="preserve">
          <source>Creates a sub-Map containing the given keys. This method is similar to List.subList() but uses keys rather than index ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa00d62a22df30a400d9cd576c9fb51811d35412" translate="yes" xml:space="preserve">
          <source>Creates a sub-Map containing the given keys. This method is similar to List.subList() but uses keys rather than index ranges. The original map is unaltered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a5859b058e879b15fd87161b027ff2e4052886" translate="yes" xml:space="preserve">
          <source>Creates a suffix of the given CharSequence by dropping as many characters as possible from the front of the original CharSequence such that calling the given closure condition evaluates to true when passed each of the dropped characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d21de9ce3feb3596362f3ec11e17c53a88454660" translate="yes" xml:space="preserve">
          <source>Creates a template by reading content from the Reader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c9acb5db3c0ff83486ce8ca7750636c851a7a4" translate="yes" xml:space="preserve">
          <source>Creates a template from the File contents using the given charset encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed73916a56c04c2a4052df2b9d4de2891f1b17ee" translate="yes" xml:space="preserve">
          <source>Creates a template from the File contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="623d381610ff489b769a14edaa3bfd7a0c10466d" translate="yes" xml:space="preserve">
          <source>Creates a template from the File contents. If the encoding for the file can be determined, that encoding will be used, otherwise the default encoding will be used. Consider using &lt;a href=&quot;#createTemplate(java.io.File,%20java.nio.charset.Charset)&quot;&gt;createTemplate(File, Charset)&lt;/a&gt; if you need to explicitly set the encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8739073092a68d1d08e2aabeaa5732b94258d55" translate="yes" xml:space="preserve">
          <source>Creates a template from the String contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="596e2d40ea73a38e7fe612350eb9d1d59de71b56" translate="yes" xml:space="preserve">
          <source>Creates a template from the content found at the URL using the default encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2df858bfcdfe4a9c530e90601fd512d2f748fdb6" translate="yes" xml:space="preserve">
          <source>Creates a template from the content found at the URL using the default encoding. Please consider using &lt;a href=&quot;#createTemplate(java.net.URL,%20java.nio.charset.Charset)&quot;&gt;createTemplate(URL, Charset)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a6b36a717b54bfe8c10bb2065eb29f97edf1e0" translate="yes" xml:space="preserve">
          <source>Creates a template from the content found at the URL using the given charset encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="941123cfaaabccef003dd973227ed41fba2fc1db" translate="yes" xml:space="preserve">
          <source>Creates a template instance using the template source from the provided Reader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16845315307c7edb782c61e82d6683ad8f1e36f2" translate="yes" xml:space="preserve">
          <source>Creates a template instance using the template source from the provided Reader. The template can be applied repeatedly on different bindings to produce custom output. &lt;strong&gt;Technical detail&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c39e64c97531e41f77afa02763f6aef46ddd34ff" translate="yes" xml:space="preserve">
          <source>Creates a token that represents a decimal number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d9a7fef93eee227d4813a53cd46e95a0e62a009" translate="yes" xml:space="preserve">
          <source>Creates a token that represents a double-quoted string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54eb6915a2b7495268b14636b7c6f220b7368fa6" translate="yes" xml:space="preserve">
          <source>Creates a token that represents a keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6545a1d821781c556746b373894ddaa3f07ff3" translate="yes" xml:space="preserve">
          <source>Creates a token that represents a keyword. Returns null if the specified text isn't a keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="777e3d3eaa4f3c7a1c0623b595dc0f3640381dd8" translate="yes" xml:space="preserve">
          <source>Creates a token that represents a symbol, using a library for the text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15fd0fb9d669070e9eb79725102a9a3c68c14ab0" translate="yes" xml:space="preserve">
          <source>Creates a token that represents a symbol, using a library for the type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09324ddd0d6a23b8f8e2d8351cf5877c515d1c2e" translate="yes" xml:space="preserve">
          <source>Creates a token that represents an identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="579442ea9be45af118cc31650005e0db05eb2c62" translate="yes" xml:space="preserve">
          <source>Creates a token that represents an integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a0120d32cca333fdbc47e264f3c17cd3a14295e" translate="yes" xml:space="preserve">
          <source>Creates a token with the specified meaning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6436498577613c952daa4eabd8f97d7bb615ea5" translate="yes" xml:space="preserve">
          <source>Creates a token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21886627d183357adfb10c766522387e0dc7ec5f" translate="yes" xml:space="preserve">
          <source>Creates a writer for this stream using the given charset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc8b468b30a52aa7d60e57c21f9d25427131d71" translate="yes" xml:space="preserve">
          <source>Creates a writer for this stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84817b34779b895007fb0f49c774677e0237e01a" translate="yes" xml:space="preserve">
          <source>Creates a writer from this stream, passing it to the given closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c68ec489b2806b51e31fbde41a599c8af37dbfe8" translate="yes" xml:space="preserve">
          <source>Creates a writer from this stream, passing it to the given closure. This method ensures the stream is closed after the closure returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9058b4550c960a51cdd22fda6fa3df4e25f5ba82" translate="yes" xml:space="preserve">
          <source>Creates an AST node with the token type and text passed in, but with the same background information as another supplied Token (e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1cf683965fc3cd023a74bcfad95738ce8c85bea" translate="yes" xml:space="preserve">
          <source>Creates an AST node with the token type and text passed in, but with the same background information as another supplied Token (e.g. line numbers). To be used in place of antlr tree construction syntax, i.e. #[TOKEN,&quot;text&quot;] becomes create(TOKEN,&quot;text&quot;,anotherToken)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="131491a1e94c03ecd5503d62758b49f9ab5ecaad" translate="yes" xml:space="preserve">
          <source>Creates an AST transformation customizer using the specified annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa1d9c92d6430a9a3c5ecc3b0783c800a93b232d" translate="yes" xml:space="preserve">
          <source>Creates an AST transformation customizer using the specified annotation. It's assumed that the annotation is not annotated with &lt;code&gt;GroovyASTTransformationClass&lt;/code&gt; and so the second argument supplies the link to the ASTTransformation class that should be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a09c539ea009d4cd71b2d088ccac645bfb2e59" translate="yes" xml:space="preserve">
          <source>Creates an AST transformation customizer using the specified annotation. The transformation classloader can be used if the transformation class cannot be loaded from the same class loader as the annotation class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b88944e90804e52e9f118960da9620758bd9b63c" translate="yes" xml:space="preserve">
          <source>Creates an AST transformation customizer using the specified annotation. The transformation classloader can be used if the transformation class cannot be loaded from the same class loader as the annotation class. Additionally, you can pass a map of parameters that will be used to parameterize the annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb2266df8472f004f936ec6edce61fbde525308" translate="yes" xml:space="preserve">
          <source>Creates an AST transformation customizer using the specified annotation. The transformation classloader can be used if the transformation class cannot be loaded from the same class loader as the annotation class. Additionally, you can pass a map of parameters that will be used to parameterize the annotation. It's assumed that the annotation is not annotated with &lt;code&gt;GroovyASTTransformationClass&lt;/code&gt; and so the second argument supplies the link to the ASTTransformation class that should be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e14452e05aee4d08d6d1f946c6283d2eed101201" translate="yes" xml:space="preserve">
          <source>Creates an AST transformation customizer using the specified annotation. The transformation classloader can be used if the transformation class cannot be loaded from the same class loader as the annotation class. It's assumed that the annotation is not annotated with &lt;code&gt;GroovyASTTransformationClass&lt;/code&gt; and so the second argument supplies the link to the ASTTransformation class that should be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bc02eca292089eb82ff482863cc9ad3dec69289" translate="yes" xml:space="preserve">
          <source>Creates an AST transformation customizer using the specified transformation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdf786c7108c242bc6571630bc6616c3fcba27c5" translate="yes" xml:space="preserve">
          <source>Creates an AnnotationConstantExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ffbd1374c132161fa0af53dec4b9d43b56ee112" translate="yes" xml:space="preserve">
          <source>Creates an AnnotationNode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bdaef5fc60b26420cc0765c4418a935dfb2c7ce" translate="yes" xml:space="preserve">
          <source>Creates an ArgumentListExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9802800caec1394f573dd9e7ef2855c8fecc3a78" translate="yes" xml:space="preserve">
          <source>Creates an ArrayExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcf03fb0be820ec304d4e16091a8da133e7fc154" translate="yes" xml:space="preserve">
          <source>Creates an AssertStatement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cff083fce1a58b86c6d97728e3022e982fdff907" translate="yes" xml:space="preserve">
          <source>Creates an AttributeExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="029aa5d5aeea3887e68152299b814dc60994011f" translate="yes" xml:space="preserve">
          <source>Creates an ConstructorCallExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49bfab580002442901fb92830b380a24ced6692b" translate="yes" xml:space="preserve">
          <source>Creates an ElvisOperatorExpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f50ae9590712f40e582956f888ea7922929365f" translate="yes" xml:space="preserve">
          <source>Creates an ExpressionStatement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3110a5c6ca9038cf0738752dd8f1d16f74cfc95" translate="yes" xml:space="preserve">
          <source>Creates an IfStatement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba132c24c4923efb3265efcd717bd30feff85c2" translate="yes" xml:space="preserve">
          <source>Creates an ImportNode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615fc421753e2045f3f59ba2d95a188dd5c98c51" translate="yes" xml:space="preserve">
          <source>Creates an IndentPrinter backed by a PrintWriter pointing to System.out, with an indent of two spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8735ad316e11fc62545c59cf0f0d85ed583569" translate="yes" xml:space="preserve">
          <source>Creates an IndentPrinter backed by the supplied Writer, with a user-supplied String to be used for indenting and the ability to override newline handling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66857209130ac1eb07cca487212620452c70c99d" translate="yes" xml:space="preserve">
          <source>Creates an IndentPrinter backed by the supplied Writer, with a user-supplied String to be used for indenting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="231edc7bea999d0a4424cbad9d1982b6f7ab57e5" translate="yes" xml:space="preserve">
          <source>Creates an IndentPrinter backed by the supplied Writer, with an indent of two spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5cbcab898ea9f67842fc5b27f1f589e1bda8b3c" translate="yes" xml:space="preserve">
          <source>Creates an InputObjectStream and an OutputObjectStream from a Socket, and passes them to the closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61e1e25678102e6a74155714e6cee18192ec96a" translate="yes" xml:space="preserve">
          <source>Creates an InputObjectStream and an OutputObjectStream from a Socket, and passes them to the closure. The streams will be closed after the closure returns, even if an exception is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3270a70bfd329852072b3897f6f28b696d553872" translate="yes" xml:space="preserve">
          <source>Creates an Iterator that returns a suffix of the elements from an original Iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a912c74d7d309f4f946c02e33c8429127c9da5ed" translate="yes" xml:space="preserve">
          <source>Creates an Iterator that returns a suffix of the elements from an original Iterator. As many elements as possible are dropped from the front of the original Iterator such that calling the given closure condition evaluates to true when passed each of the dropped elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092932f0ef0d125e11e57fd8c50cb3ab8b5a64f8" translate="yes" xml:space="preserve">
          <source>Creates an array of ClassNodes using an array of classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d4d2b115e2cb16f485ca7be66de61a74b7588f3" translate="yes" xml:space="preserve">
          <source>Creates an array of ClassNodes using an array of classes. For each of the given classes a new ClassNode will be created</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90a9a320f66509185c7c1d69c20f1b8fffea053" translate="yes" xml:space="preserve">
          <source>Creates an array using an initializer (list of expressions corresponding to array elements)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fdedaa8e5e325a2e23bbc46a1ac3f3d2ff7a602" translate="yes" xml:space="preserve">
          <source>Creates an empty ManagedConcurrentLinkedQueue that will use the provided &lt;code&gt;ReferenceBundle&lt;/code&gt; to store values as the given Reference type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f4edceadd00b6133e7c6808441bfe5326f222ac" translate="yes" xml:space="preserve">
          <source>Creates an immutable copy that we can cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bb853d65311fda3b707cb06c9733afb7ce3347a" translate="yes" xml:space="preserve">
          <source>Creates an inclusive &lt;a href=&quot;numberrange&quot;&gt;NumberRange&lt;/a&gt; with step size 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57319aaf4e2728769e4d2b4ec70e641a6290e912" translate="yes" xml:space="preserve">
          <source>Creates an inclusive &lt;a href=&quot;numberrange&quot;&gt;NumberRange&lt;/a&gt; with step size 1. Creates a reversed range if &lt;code&gt;from&lt;/code&gt; &amp;lt; &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f560bda94398bf97bc2df930554e0dcac15318c" translate="yes" xml:space="preserve">
          <source>Creates an inclusive &lt;a href=&quot;numberrange&quot;&gt;NumberRange&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c6075ef2d2ce38352eb770f7438c4419a3611a" translate="yes" xml:space="preserve">
          <source>Creates an inclusive &lt;a href=&quot;numberrange&quot;&gt;NumberRange&lt;/a&gt;. Creates a reversed range if &lt;code&gt;from&lt;/code&gt; &amp;lt; &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfd00f49a874622c699a490448914b9804b596bd" translate="yes" xml:space="preserve">
          <source>Creates an inner class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e48f69454b3636a380b24004a83021a957def98" translate="yes" xml:space="preserve">
          <source>Creates an iterator which will traverse through the reader a line at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d045797d645df99cdce0f71b69a687e11a40df" translate="yes" xml:space="preserve">
          <source>Creates an unmodifiable view of a Collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44490399c2496c9bc5121081056c77e3d1f3e81b" translate="yes" xml:space="preserve">
          <source>Creates an unmodifiable view of a List.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a279ae51a916d99cc20fc78a4cedcb922a655a03" translate="yes" xml:space="preserve">
          <source>Creates an unmodifiable view of a Map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f532e04cd962acc6212dd789b36e33e8320273a2" translate="yes" xml:space="preserve">
          <source>Creates an unmodifiable view of a Set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5a754a863a2ff0f51c2c49d4e4e302cddd899dd" translate="yes" xml:space="preserve">
          <source>Creates an unmodifiable view of a SortedMap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55e3743db29d3d67131a623f5bb055096f74fbc5" translate="yes" xml:space="preserve">
          <source>Creates an unmodifiable view of a SortedSet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="350c6870aab2a45f3f94e76d419b8bf20f384269" translate="yes" xml:space="preserve">
          <source>Creates and returns an array of class template classpath entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d7eb86d8874262f4e40c5a54cec6909abc4ad6f" translate="yes" xml:space="preserve">
          <source>Creates and returns an array of doc template classpath entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b816182dfb895253b3c2b11a71b1c3414c45841e" translate="yes" xml:space="preserve">
          <source>Creates and returns an array of package template classpath entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c220c781165b7be049a01aa68c8eb828e9ab2bd1" translate="yes" xml:space="preserve">
          <source>Creates the ANTLR 2 parser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff20d33fe577c01ca70c5759020848255b9b09a" translate="yes" xml:space="preserve">
          <source>Creates the ANTLR 4 parser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e816dc525ba819cf02153b90b23646d186582b76" translate="yes" xml:space="preserve">
          <source>Creates the DSL compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d065d532bd32cfd29d609368ea3ce2d9ff9725af" translate="yes" xml:space="preserve">
          <source>Creates the ReaderSource from a File descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="140be0949d2199bf7df603ecbb6712913ef5b2ca" translate="yes" xml:space="preserve">
          <source>Creates the an argument picker which extracts the type of the first parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f586e9d69eac89cd7a8208d8c1c0ebbe4d63a006" translate="yes" xml:space="preserve">
          <source>Creates the curried closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dc4d742cf67c96235acdc7d0db16f5988b7a9b7" translate="yes" xml:space="preserve">
          <source>Creates the template engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea8ca447c8b41d38c326504f7541ecaf36029d7e" translate="yes" xml:space="preserve">
          <source>Creates the test helper.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb49d435274fa52acc4b4f9c86985549de2c850e" translate="yes" xml:space="preserve">
          <source>Current limitations: - annotations on local variables are not supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d6495e5e1e237c4b4cf2424f32295d572dfe48" translate="yes" xml:space="preserve">
          <source>Currently &lt;code&gt;BigInteger&lt;/code&gt; and &lt;code&gt;BigDecimal&lt;/code&gt; are deemed immutable but see: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6348370</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b87829a6afede917a8d799f67f8213a8d5ef8d4" translate="yes" xml:space="preserve">
          <source>Currently, the Groovy source code for any accessed POGO must be on the classpath at runtime. Also, at the moment, the expressions (or nested expressions) can only contain references to fields of the POGO or literals (i.e. constant Strings or numbers). This limitation may be removed in a future version of Groovy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c93715e29bd88b518fa9c4d892a4628d6a722f" translate="yes" xml:space="preserve">
          <source>Custom property handling:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b018fd167d51a508728aa2ee72b867174284383" translate="yes" xml:space="preserve">
          <source>Custom security manager to &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#exit&quot;&gt;System.exit&lt;/a&gt; (and related) from being used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ca840e117c70c2b5a6ace139889bb0de71244d" translate="yes" xml:space="preserve">
          <source>Custom type checking extensions may extend this method in order to benefit from a lot of support methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b376827069b8dd1933e0d504c6c1d240a66e9618" translate="yes" xml:space="preserve">
          <source>Custom visibility:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc42b5258ac5d7ab96d4228b6a7edda6e04cd345" translate="yes" xml:space="preserve">
          <source>Customising behaviour:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91b065206dce58084a6aca6bc7c4b50e8c5991d1" translate="yes" xml:space="preserve">
          <source>Cut-down version of CliBuilder with just enough functionality for Groovy's internal usage. Uses the embedded version of picocli classes. TODO: prune this right back to have only the functionality needed by Groovy commandline tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bc0a595a39d9c5f9b2bdcd8eb685497e963cc3d" translate="yes" xml:space="preserve">
          <source>Data URI containing the literal value of this source string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15c353116d0784694c4d0f92c09c360a042c805" translate="yes" xml:space="preserve">
          <source>Data structures holding class info to enable lazy loading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab30ea084a3a66c3e29f37f5542a6869e078105" translate="yes" xml:space="preserve">
          <source>Date self = Date then + (Date self - Date then)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08c4f247a9313b7deabbd7b3a99ae896b8be7689" translate="yes" xml:space="preserve">
          <source>DateFormat.MEDIUM</source>
          <target state="translated">DateFormat.MEDIUM</target>
        </trans-unit>
        <trans-unit id="41b184613e2b4a164a0e562175d92b2184764a61" translate="yes" xml:space="preserve">
          <source>DateFormat.SHORT</source>
          <target state="translated">DateFormat.SHORT</target>
        </trans-unit>
        <trans-unit id="58a9befbb2aa0119c1c3e921a56e0e97d7e5ad90" translate="yes" xml:space="preserve">
          <source>DateFormat.getDateInstance</source>
          <target state="translated">DateFormat.getDateInstance</target>
        </trans-unit>
        <trans-unit id="4bc4083116bcfa0f7d4c933dbe9267dbbd08d282" translate="yes" xml:space="preserve">
          <source>DateFormat.getDateTimeInstance</source>
          <target state="translated">DateFormat.getDateTimeInstance</target>
        </trans-unit>
        <trans-unit id="b3a1839057e5b201ea9bad2cdff7327f00a6cdab" translate="yes" xml:space="preserve">
          <source>DateFormat.getTimeInstance</source>
          <target state="translated">DateFormat.getTimeInstance</target>
        </trans-unit>
        <trans-unit id="e2b43867be2d2e9eb251716049a54e576987b3d0" translate="yes" xml:space="preserve">
          <source>DateFormat.setTimeZone</source>
          <target state="translated">DateFormat.setTimeZone</target>
        </trans-unit>
        <trans-unit id="4dfc279664ff16f6e4a3933c53943ff2e6417724" translate="yes" xml:space="preserve">
          <source>DateTimeException if a value for the field cannot be obtained</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e78460371bdf3d217773ebce887f347b061b7e1c" translate="yes" xml:space="preserve">
          <source>DateTimeFormatter</source>
          <target state="translated">DateTimeFormatter</target>
        </trans-unit>
        <trans-unit id="791c4c24e79007167e9f7fa76cfbc1fcd8a4e7a5" translate="yes" xml:space="preserve">
          <source>DatumDependentDuration represents durations whose length in milliseconds cannot be determined without knowing the datum point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2825e1b30db6133278e1cfbe411f0eecf3ed7695" translate="yes" xml:space="preserve">
          <source>Deal with the cache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3af12b79db66980622d3edc879357c5a9d38e610" translate="yes" xml:space="preserve">
          <source>Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff8d1b8c5e2e9bb89f2a061bc881b0562348cf3a" translate="yes" xml:space="preserve">
          <source>Debugging Template Code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf123fd7d88d254d055efde081d2eb1586c805e5" translate="yes" xml:space="preserve">
          <source>Decides if the given source is newer than a class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00c77cb57cae1a193a09c43f8cfcf86c4b2f6ede" translate="yes" xml:space="preserve">
          <source>Declaration of a variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="064bf6374883b0afe7d47f16d27f0e715965f6b3" translate="yes" xml:space="preserve">
          <source>Declaration of a variable. This can be a class/instance variable, or a local variable in a method It can also include possible initialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb5674beedee1bafaea0a5d70676ad5c23b9955" translate="yes" xml:space="preserve">
          <source>Declare a bean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f0805b118a14ae2946a187ab1c555dc81a5454" translate="yes" xml:space="preserve">
          <source>Declare the encoding to use when inputting from a resource; If not supplied or the empty encoding is supplied, a guess will be made for file resources, otherwise the platform's default encoding will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f483320b9c6b00a62554bd9f5a5c692be4d77724" translate="yes" xml:space="preserve">
          <source>Declare the encoding to use when outputting to a file; Leave unspecified or use &quot;&quot; for the platform's default encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d070a62ec505e1bfa8ed5316da482d48a09aa9b0" translate="yes" xml:space="preserve">
          <source>Decode the String from Base64 into a byte array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5085de1da1e9877c4d4ae41193b8fd66bf732496" translate="yes" xml:space="preserve">
          <source>Decodes a Base64 URL and Filename Safe encoded String into a byte array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4522a32b272dc75298f522f47311026f315175e7" translate="yes" xml:space="preserve">
          <source>Decodes a hex string to a byte array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9de9f0ebcc76f43d9ff7ffeabd67fcec2a0b80a" translate="yes" xml:space="preserve">
          <source>Decodes a hex string to a byte array. The hex string can contain either upper case or lower case letters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f26bba1490a6707f457d173c3f2bde49afd227" translate="yes" xml:space="preserve">
          <source>Decodes a number from a JSON value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79fa0679fbb08631ca6249694e2dfdeaf798ede1" translate="yes" xml:space="preserve">
          <source>Decodes a number from a JSON value. If at any point it is determined that the value is not a valid number the value is treated as a &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="352bb585b28c52ea7e9e6c98bcd411bd4112bec3" translate="yes" xml:space="preserve">
          <source>DecompiledClassNode</source>
          <target state="translated">DecompiledClassNode</target>
        </trans-unit>
        <trans-unit id="b56afbc46a3a88c187e9e1347b63a802c481d918" translate="yes" xml:space="preserve">
          <source>Decorates a list allowing it to grow when called with a non-existent index value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aced10fda6b57679204e64a897b3189dc32af331" translate="yes" xml:space="preserve">
          <source>Decorates a list allowing it to grow when called with a non-existent index value. When called with such values, the list is grown in size and a default value is placed in the list by calling a supplied &lt;code&gt;init&lt;/code&gt; Closure. Null values can be stored in the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd4b2c88b74fe58a45cc2443f7ac2f5b4c1abdca" translate="yes" xml:space="preserve">
          <source>Decorates a list allowing it to grow when called with a non-existent index value. When called with such values, the list is grown in size and a default value is placed in the list by calling a supplied &lt;code&gt;init&lt;/code&gt; Closure. Subsequent retrieval operations if finding a null value in the list assume it was set as null from an earlier growing operation and again call the &lt;code&gt;init&lt;/code&gt; Closure to populate the retrieved value; consequently the list can't be used to store null values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d237ac481a87b307ecd4d9ece817a9b87786dc0" translate="yes" xml:space="preserve">
          <source>Decrement a Calendar by one day.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="558109c7b123d6d5012c7f97bc0a0d2473090c2b" translate="yes" xml:space="preserve">
          <source>Decrement a Character by one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74005aec1d14b1e01b0530b485f90a83a4649fa8" translate="yes" xml:space="preserve">
          <source>Decrement a Date by one day.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1368d3355c03da64a6a571af7d5bbdf223d9bb08" translate="yes" xml:space="preserve">
          <source>Decrement a Number by one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02fef633244756ab339953d99c4f2ca74cb6428e" translate="yes" xml:space="preserve">
          <source>Decrement a java.sql.Date by one day.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d3f73bf7878c4662d3160817ffe3fff53b089ae" translate="yes" xml:space="preserve">
          <source>Decrements by one</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a77bad723cab8b8c7e8ac6c9603e6fb94ae5cb" translate="yes" xml:space="preserve">
          <source>Default &lt;code&gt;equals&lt;/code&gt;, &lt;code&gt;hashCode&lt;/code&gt; and &lt;code&gt;toString&lt;/code&gt; methods are provided based on the property values. See the GroovyDoc for the individual annotations for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6036beb4d3232361cbaf29613e2dd5ebe2823e51" translate="yes" xml:space="preserve">
          <source>Default &lt;code&gt;equals&lt;/code&gt;, &lt;code&gt;hashCode&lt;/code&gt; and &lt;code&gt;toString&lt;/code&gt; methods are provided based on the property values. Though not normally required, you may write your own implementations of these methods. For &lt;code&gt;equals&lt;/code&gt; and &lt;code&gt;hashCode&lt;/code&gt;, if you do write your own method, it is up to you to obey the general contract for &lt;code&gt;equals&lt;/code&gt; methods and supply a corresponding matching &lt;code&gt;hashCode&lt;/code&gt; method. If you do provide one of these methods explicitly, the default implementation will be made available in a private &quot;underscore&quot; variant which you can call. E.g., you could provide a (not very elegant) multi-line formatted &lt;code&gt;toString&lt;/code&gt; method for &lt;code&gt;Customer&lt;/code&gt; above as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff00529d3a262845e71aa6d1b18bb9fe6835b5c8" translate="yes" xml:space="preserve">
          <source>Default constructor for exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acaecf77cccea432d25d4b94f8da3ac0f14530e9" translate="yes" xml:space="preserve">
          <source>Default impl that calls Class.newInstance()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c36ed6ab19a8928c7bc6356e9d6059c6ad5c67c6" translate="yes" xml:space="preserve">
          <source>Default impl that calls parent.propertyName = child</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddef3a325eed074159bcdc7464f056311238a4b8" translate="yes" xml:space="preserve">
          <source>Default impl that capitalizes the classname.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c5ebf357d7bfa7fea3774ba1baa8b586b53e004" translate="yes" xml:space="preserve">
          <source>Default impl that returns parentName and childName accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="756804542299f6886510c2200489f028ef5f90cc" translate="yes" xml:space="preserve">
          <source>Default impl, always returns 'id'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e02c82d77a263237e579fbd91e27a9b1e514b96a" translate="yes" xml:space="preserve">
          <source>Default impl, always returns 'refId'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="436f1c1d3953f3c26cdfb4a2015ad08ad4567ffc" translate="yes" xml:space="preserve">
          <source>Default implementation of a GString used by the compiler. A GString consist of a list of values and strings which can be combined to create a new String.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b12059ca2671eb4040f15216b51833b21a5167d" translate="yes" xml:space="preserve">
          <source>DefaultGroovyMethods#sort(java.lang.Iterable, groovy.lang.Closure)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74a35ea9ad603aa68133f69513ec3829837e1870" translate="yes" xml:space="preserve">
          <source>DefaultGroovyMethods.sort</source>
          <target state="translated">DefaultGroovyMethods.sort</target>
        </trans-unit>
        <trans-unit id="ff9b89bf4723736e1ab9286ffc1fe842a19f85fa" translate="yes" xml:space="preserve">
          <source>DefaultPropertyHandler.class</source>
          <target state="translated">DefaultPropertyHandler.class</target>
        </trans-unit>
        <trans-unit id="4241f4bdfc6340d2ed064d2bdd5a9e71cba097a2" translate="yes" xml:space="preserve">
          <source>DefaultStrategy</source>
          <target state="translated">DefaultStrategy</target>
        </trans-unit>
        <trans-unit id="3a8d26149e2d583337fafc16866a4da02784e591" translate="yes" xml:space="preserve">
          <source>DefaultStrategy.class</source>
          <target state="translated">DefaultStrategy.class</target>
        </trans-unit>
        <trans-unit id="48f3ef26f048fd6099b7ac4c416ba1063643f197" translate="yes" xml:space="preserve">
          <source>DefaultTypeTransformation.asCollection</source>
          <target state="translated">DefaultTypeTransformation.asCollection</target>
        </trans-unit>
        <trans-unit id="20b998883f3bca3b93309d554f0f63ef6aa9c5ff" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;false&lt;/code&gt; but set to &lt;code&gt;true&lt;/code&gt; if the dependency artifacts may change without a corresponding revision change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cd518575b71d5ec2c345d5d8aa2838f232be19e" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;false&lt;/code&gt; but set to &lt;code&gt;true&lt;/code&gt; if the dependency artifacts may change without a corresponding revision change. Not normally recommended but may be useful for certain kinds of snapshot artifacts. May reduce the amount of underlying Ivy caching. Proper behavior may be dependent on the resolver in use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d4a66ce818be7cb118ebbdf94bb3d07dc9fd985" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;false&lt;/code&gt; but set to &lt;code&gt;true&lt;/code&gt; to indicate to the underlying Ivy conflict manager that this dependency should be forced to the given revision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb962341b26ab9ba2d792c1a19c6e9689c45fdc" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;false&lt;/code&gt; but set to &lt;code&gt;true&lt;/code&gt; to indicate to the underlying Ivy conflict manager that this dependency should be forced to the given revision. Otherwise, depending on the conflict manager in play, a later compatible version might be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="079b963ab79c0717c17ede0fa138d0e05103e4f0" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;true&lt;/code&gt; but set to &lt;code&gt;false&lt;/code&gt; if you don't want transitive dependencies also to be downloaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af29c850ade1b90e3d3401d25fef6493d7bfd15b" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;true&lt;/code&gt; but set to &lt;code&gt;false&lt;/code&gt; if you don't want transitive dependencies also to be downloaded. You may then need additional &lt;code&gt;@Grab&lt;/code&gt; statements for any required dependencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5036817dbb959a8a19a63439c2bd6904d0d38af2" translate="yes" xml:space="preserve">
          <source>Defaults to Maven2 compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31761ddfbb570dcfa0eb3fffd400d6c27007951d" translate="yes" xml:space="preserve">
          <source>Defaults to Maven2 compatibility. Set false for Ivy only compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9e146ac45dbc8040b71825cc9f293d22033e68e" translate="yes" xml:space="preserve">
          <source>Defaults to stdout but you can provide your own PrintWriter if desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="853e313cbc1ae641b0f0d90750b36571b2380aae" translate="yes" xml:space="preserve">
          <source>Defaults to true. If set to false then you must escape any special characters within attribute values such as '&amp;amp;', '&amp;lt;', CR/LF, single and double quotes etc. manually as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab95c29831ddeff436d1e75a48359c2fd5f3d3e" translate="yes" xml:space="preserve">
          <source>Defaults to true. If set to false then you must escape any special characters within attribute values such as '&amp;amp;', '&amp;lt;', CR/LF, single and double quotes etc. manually as needed. The builder will not guard against producing invalid XML when in this mode and the output may not be able to be parsed/round-tripped but it does give you full control when producing for instance HTML output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b1ec3cbcfc742e801e440cd73041c8b047561b" translate="yes" xml:space="preserve">
          <source>Define any system properties which must be set before invoking the grab - useful for declaring SSL certificates or proxy settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72961da890bd221d6608dccc715519dab4852359" translate="yes" xml:space="preserve">
          <source>Define any system properties which must be set before invoking the grab - useful for declaring SSL certificates or proxy settings. Currently, this only affects the generated class or script. You may need to also set those same properties for the Groovy compiler. For convenience, a String with comma separated name=value pairs can be used in addition to an array (using Groovy's literal list notation) of String name=value items. The single String shorthand form can't be used if value part of a property contains a comma.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff9d4d0ee8f909b64c74bd8107bf0146f6356ae5" translate="yes" xml:space="preserve">
          <source>Defines a new Variable using an AST variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c74f613d01467daeb91e43be4db7f6b705e15372" translate="yes" xml:space="preserve">
          <source>Defines new Groovy methods which appear on standard Java 8 classes within the Groovy environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d19ce94e1cc10460ad9be79862d33b36639dc3" translate="yes" xml:space="preserve">
          <source>Defines the BSF Engine for using Groovy inside any BSF application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c643e4e42b57858f0d4a0aae9f808d9a14fc0c9" translate="yes" xml:space="preserve">
          <source>Defines the default &lt;code&gt;Charset&lt;/code&gt; used in case the buffer represents an 8-bit &lt;code&gt;Charset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde8f742a311c7f18aab9d3016e2eedfb4ebcec6" translate="yes" xml:space="preserve">
          <source>Defining the main class is required unless setRequireMain(boolean) is called with false, before reading the configuration. You can use the wildcard &quot;*&quot; to filter the path, but only for files, not directories. To match directories use &quot;**&quot;. The ${propertyname} is replaced by the value of the system's property name. You can use user.home here for example. If the property does not exist, an empty string will be used. If the path or file after the load command does not exist, the path will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c9c59a95425d43b60f2f39e6bdf42881d3dff8e" translate="yes" xml:space="preserve">
          <source>Delegates to &lt;a href=&quot;#call(java.lang.Iterable,%20groovy.lang.Closure)&quot;&gt;call(Iterable, Closure)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a9a296db6b41bf230fb41a68501854a9d460a0f" translate="yes" xml:space="preserve">
          <source>Delegates to &lt;a href=&quot;#call(java.lang.String,%20java.lang.Iterable,%20groovy.lang.Closure)&quot;&gt;call(String, Iterable, Closure)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="019f8a171f0b2099c864016bec54cd1eb99e35ae" translate="yes" xml:space="preserve">
          <source>Delegates to sub-init methods and parses the following parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2153a13025927aa79877b26d183b7c69b280eb03" translate="yes" xml:space="preserve">
          <source>Delegates to the visit method used for this class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a2a402825c6e4e0573bbf9e0432cf96cc06a77b" translate="yes" xml:space="preserve">
          <source>Delegates to the visit method used for this class. If the visitor is a ClassGenerator, then &lt;a href=&quot;classgenerator#visitBytecodeSequence(org.codehaus.groovy.classgen.BytecodeSequence)&quot;&gt;ClassGenerator.visitBytecodeSequence&lt;/a&gt; is called with this instance. If the visitor is no ClassGenerator, then this method will call visit on each ASTNode element sorted by this class. If one element is a BytecodeInstruction, then it will be skipped as it is no ASTNode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bedff1eedfe80a524262ca0f753f79609fba0cbe" translate="yes" xml:space="preserve">
          <source>Deletes a directory with all contained files and subdirectories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba05379f86067feb241de5d2282f9874ba5d36fb" translate="yes" xml:space="preserve">
          <source>Deprecated alias for collectNested</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="643e385859e5818b88289365e1301393ef77fbd6" translate="yes" xml:space="preserve">
          <source>Dequeues any source units add through addSource and resets the compiler phase to initialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="2ab6fa2cec65d58a506631e86f503d99a8a5c800" translate="yes" xml:space="preserve">
          <source>Description of all of the operations available on the MBean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="defef58f4eb1a0c6cde568af6db854597ead7514" translate="yes" xml:space="preserve">
          <source>Description of the operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa7018cac5657a8f33fb706fede5a3fe6c6e6b95" translate="yes" xml:space="preserve">
          <source>Description of the package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7651baf3a270824b7f6c2837fa9cc6ac27ca6734" translate="yes" xml:space="preserve">
          <source>Description of the specified attribute name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e70223a8c86bc6c0d67aea52d831479cfbb147e" translate="yes" xml:space="preserve">
          <source>Designates a list of &lt;code&gt;FieldNode&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bc14c9fcb74d256483d910e9286a4048e97dbc9" translate="yes" xml:space="preserve">
          <source>Designates a list of &lt;code&gt;PropertyNode&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53cc920493f5956b76e4fc96d75b3288b4e9333a" translate="yes" xml:space="preserve">
          <source>Designates a list of AnnotationNodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c53a61f6fa0084829717dec10fcb2e68fe3b588e" translate="yes" xml:space="preserve">
          <source>Designates a list of ConstantExpressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc65c6e0db35f424727ff691d8d029602876a5d7" translate="yes" xml:space="preserve">
          <source>Designates a list of ConstructorNodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7142ff90b0ce2b7d753a60146384447df3516bc0" translate="yes" xml:space="preserve">
          <source>Designates a list of Expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8c99ecc052ded471b464472203db7c03ad04e94" translate="yes" xml:space="preserve">
          <source>Designates a list of MethodNodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d29db9cc464cbb8c2c6a0ec8bbd916a6c301e6" translate="yes" xml:space="preserve">
          <source>Detect whether a given ClassNode is a inner class (non-static).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c40214b57ff7230fff9ccddf8bed8f00a1c22b7c" translate="yes" xml:space="preserve">
          <source>Detect whether a static property with the given name is within the class or a super class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39df209af824228a51cd2ead77dd6367f9252377" translate="yes" xml:space="preserve">
          <source>Detect whether the given accessor name starts with &quot;get&quot;, &quot;set&quot; or &quot;is&quot; followed by at least one character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1232df5cda9d261f48b7922a88e888ec303e2dfd" translate="yes" xml:space="preserve">
          <source>Determine if a Character is lowercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c49136d9235dda80e4842ababf7d61622abc940d" translate="yes" xml:space="preserve">
          <source>Determine if a Character is lowercase. Synonym for 'Character.isLowerCase(this)'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32866f1de6508aa490a7577bff69449260b80737" translate="yes" xml:space="preserve">
          <source>Determine if a Character is uppercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed5691635f4c43c092ff77040a8516a77256ae4d" translate="yes" xml:space="preserve">
          <source>Determine if a Character is uppercase. Synonym for 'Character.isUpperCase(this)'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e176f109f67de989a345c4aca64d5e0f37eee8c9" translate="yes" xml:space="preserve">
          <source>Determine if a type is derived from Number (or array thereof).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89cb73243bd549489e368a07b6f45fb715f19ab5" translate="yes" xml:space="preserve">
          <source>Determine if a type matches another type (or array thereof).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8d64b683aae7ff370f862631c720928f237f2c" translate="yes" xml:space="preserve">
          <source>Determine if an explicit (non-generated) constructor is in the class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8b6fe3360ac362608a6e0c0f14b4252b6029b41" translate="yes" xml:space="preserve">
          <source>Determine if namespace handling is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf0299c4c039dbda283d8bb1b0c1ec6871a35b9" translate="yes" xml:space="preserve">
          <source>Determine if slurper will automatically parse strings it recognizes as dates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efaa376019dd7be59c90b229b5692dbf006b122e" translate="yes" xml:space="preserve">
          <source>Determine if slurper will automatically parse strings it recognizes as dates. Index overlay only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62cee695b8030f96717b2aaac08cd53ed4c20dc6" translate="yes" xml:space="preserve">
          <source>Determine if the given ClassNode values have the same package name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a0a33a700c05d25ff42314319a0a69026d2a31" translate="yes" xml:space="preserve">
          <source>Determine the correct modifiers by looking for a potential</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cecb4d46eb07bfb7248705e8444055db7920288" translate="yes" xml:space="preserve">
          <source>Determine whether empty attributes will appear in the produced markup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68ffec70ecec46e236b3a2237b247b1bfbaedc4" translate="yes" xml:space="preserve">
          <source>Determine whether null attributes will appear in the produced markup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="499a80beb39eb945165ac8d47c488a7bb3f8d14f" translate="yes" xml:space="preserve">
          <source>Determine which NumberMath instance to use, given the supplied operands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a69e28e8b86977daca769aa934fc37e2357416c" translate="yes" xml:space="preserve">
          <source>Determine which NumberMath instance to use, given the supplied operands. This method implements the type promotion rules discussed in the documentation. Note that by the time this method is called, any Byte, Character or Short operands will have been promoted to Integer. For reference, here is the promotion matrix: bD bI D F L I bD bD bD D D bD bD bI bD bI D D bI bI D D D D D D D F D D D D D D L bD bI D D L L I bD bI D D L I Note that for division, if either operand isFloatingPoint, the result will be floating. Otherwise, the result is BigDecimal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b049ec92a60d55a60f5d2f7debd22db884187c" translate="yes" xml:space="preserve">
          <source>Determines if a CharSequence can be parsed as a BigDecimal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="422478d77dc5172647061e53c12e94f65854c70c" translate="yes" xml:space="preserve">
          <source>Determines if a CharSequence can be parsed as a BigInteger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc4950bfb38ee1774a10691f7118cdebd892e76f" translate="yes" xml:space="preserve">
          <source>Determines if a CharSequence can be parsed as a Double.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b87f72155c76cd782cb2c1077c813aac7d9fa2" translate="yes" xml:space="preserve">
          <source>Determines if a CharSequence can be parsed as a Float.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c33f62382ac86ecd96d5b9d01db90ed3f44445" translate="yes" xml:space="preserve">
          <source>Determines if a CharSequence can be parsed as a Long.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a201a595f22f903473b9ccc2aad368561d90d892" translate="yes" xml:space="preserve">
          <source>Determines if a CharSequence can be parsed as a Number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24b053e3a9d635c3c3c7cae199d3c9aa2bd41679" translate="yes" xml:space="preserve">
          <source>Determines if a CharSequence can be parsed as an Integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0292f0d554f78e21158506c906d7ca3e4aca63b4" translate="yes" xml:space="preserve">
          <source>Determines if a CharSequence matches the given regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8686b7e957af8e2f52901d297a0b17297d763c0d" translate="yes" xml:space="preserve">
          <source>Determines if a character is a digit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb27546ae72afc1e4f5598e6b286a7499a829ce" translate="yes" xml:space="preserve">
          <source>Determines if a character is a digit. Synonym for 'Character.isDigit(this)'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0400376b1b4d43f92f3ee120d74cd482a0fd57ae" translate="yes" xml:space="preserve">
          <source>Determines if a character is a letter or digit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cde3e2430d73d4186a39a8a969c6b0bd4e5d2357" translate="yes" xml:space="preserve">
          <source>Determines if a character is a letter or digit. Synonym for 'Character.isLetterOrDigit(this)'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac9df33c702baa117511d4c8554ae050760c557" translate="yes" xml:space="preserve">
          <source>Determines if a character is a letter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb669ec66fa1571fcc383f09e1b5dd6d4cf2953" translate="yes" xml:space="preserve">
          <source>Determines if a character is a letter. Synonym for 'Character.isLetter(this)'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e1e9b9f8bdddaa5dd4613cdb4537da63e10489" translate="yes" xml:space="preserve">
          <source>Determines if a character is a whitespace character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df61c2a614ef437bbb04573dfda51509721612ba" translate="yes" xml:space="preserve">
          <source>Determines if a character is a whitespace character. Synonym for 'Character.isWhitespace(this)'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="998a10561c6351325c891c6a75161683fa7ad56a" translate="yes" xml:space="preserve">
          <source>Determines if a main class is required when calling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2b48f70f9d46cf4a774c5db9f08a0fc1214282f" translate="yes" xml:space="preserve">
          <source>Determines if a method is a MOP method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="028418ea4050e93cc3eebb72dcd9c36111009de2" translate="yes" xml:space="preserve">
          <source>Determines if a method is a MOP method. This is done by the method name. If the name starts with &quot;this$&quot; or &quot;super$&quot; but does not contain &quot;$dist$&quot;, then it is an MOP method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ad06b8b5dea84712fc778ed1a6506c9a2806bc9" translate="yes" xml:space="preserve">
          <source>Determines if all items of this array are of the same type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeacfdfe5046e350260ba9e90384207b46a76b13" translate="yes" xml:space="preserve">
          <source>Determines if the cache contains an entry for the specified key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76ff77e4fa31bc4addcd91a2a3a0026fc827cc17" translate="yes" xml:space="preserve">
          <source>Determines if the contents of this array are equal to the contents of the given list, in the same order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2f4578aadd52cf9d07346b41bc35499ddf72987" translate="yes" xml:space="preserve">
          <source>Determines if the contents of this array are equal to the contents of the given list, in the same order. This returns &lt;code&gt;false&lt;/code&gt; if either collection is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1b0733687da6a7c96bc1d3b51424589ac9e5ed" translate="yes" xml:space="preserve">
          <source>Determines if the contents of this list are equal to the contents of the given array in the same order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656de2e5d1b4a4ed6c822214fd96286532537e95" translate="yes" xml:space="preserve">
          <source>Determines if the contents of this list are equal to the contents of the given array in the same order. This returns &lt;code&gt;false&lt;/code&gt; if either collection is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895eb875409fb50da8e9055a66c8a5a0f3093f1c" translate="yes" xml:space="preserve">
          <source>Determines if the given class can directly access the given field (via &lt;code&gt;GETFIELD&lt;/code&gt;, &lt;code&gt;GETSTATIC&lt;/code&gt;, etc. bytecode instructions).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c659487ef73f7a1b2025dd76f4fcadd23ecfdb" translate="yes" xml:space="preserve">
          <source>Determines if the source class implements an interface or subclasses the target type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64dc49fb77c6dbb43baa81a413448a6341772352" translate="yes" xml:space="preserve">
          <source>Determines if the source class implements an interface or subclasses the target type. This method takes the org.codehaus.groovy.ast.tools.WideningCategories.LowestUpperBoundClassNode type into account, allowing to remove unnecessary casts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47cb96a57e31d352ca1243f887b8dc61b4d52f45" translate="yes" xml:space="preserve">
          <source>Determines if the type has a possibly-matching instance method with the given name and arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0475e345b4f4807e41d1a3dea08027baa1dc879a" translate="yes" xml:space="preserve">
          <source>Determines if this event is for a change for a single instance or all instances of the Class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41853b6a33be43840e3e3c55d6a19846755059f4" translate="yes" xml:space="preserve">
          <source>Determines if this object is equal to another object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ac59f01adf162ba592f0315895c0a08003b831" translate="yes" xml:space="preserve">
          <source>Determines if this object is equal to another object. Delegates to &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/AbstractList.html#equals(java.lang.Object)&quot;&gt;AbstractList.equals&lt;/a&gt; if &lt;code&gt;that&lt;/code&gt; is anything other than an &lt;a href=&quot;intrange&quot;&gt;IntRange&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d77aad6f9772b9866fb5a248f312b254ff8126" translate="yes" xml:space="preserve">
          <source>Determines whether or not the getCallingClass methods will return any sensible results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4432be30d51bef6af4b2042de39bd95216dfcb4b" translate="yes" xml:space="preserve">
          <source>Determines whether or not the getCallingClass methods will return any sensible results. On JVMs that are not Sun derived i.e. (gcj, Harmony) this will likely return false. When not available all getCallingClass methods will return null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c79ddf5e82ff8190adca5d419eb98a45506548a" translate="yes" xml:space="preserve">
          <source>Determines whether the value object is a Class object representing a subclass of java.lang.Enum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a70070a94d9601a992f8aea09051af98846583d" translate="yes" xml:space="preserve">
          <source>Determines whether the value object is a Class object representing a subclass of java.lang.Enum. Uses class name check to avoid breaking on pre-Java 5 JREs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c60993e4ef1e0d5deacd0ed80e9c6ffd2d5d1d2" translate="yes" xml:space="preserve">
          <source>Determines, when the ANT Task that is represented by the &quot;node&quot; should perform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0173c1df88d8773ca500634f8bc67bed6f1b571d" translate="yes" xml:space="preserve">
          <source>Determines, when the ANT Task that is represented by the &quot;node&quot; should perform. Node must be an ANT Task or no &quot;perform&quot; is called. If node is an ANT Task, it performs right after complete construction. If node is nested in a TaskContainer, calling &quot;perform&quot; is delegated to that TaskContainer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="356f023ed044936da0f83473cb1e200c63cc0467" translate="yes" xml:space="preserve">
          <source>Disables the escaping of Unicode characters in JSON String values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="585797fc703e24b1c242894ae9c472cc07518414" translate="yes" xml:space="preserve">
          <source>Disables the specified global AST transformations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa53fa31781e2b83b57ecf2aff6a83602bba5e5" translate="yes" xml:space="preserve">
          <source>Disables the specified global AST transformations. In order to avoid class loading side effects, it is not recommended to use MyASTTransformation.class.getName() but instead directly use the class name as a string. Disabled AST transformations only apply to automatically loaded global AST transformations, that is to say transformations defined in a META-INF/services/org.codehaus.groovy.transform.ASTTransformation file. If you explicitly add a global AST transformation in your compilation process, for example using the &lt;a href=&quot;customizers/asttransformationcustomizer&quot;&gt;ASTTransformationCustomizer&lt;/a&gt; or using a org.codehaus.groovy.control.CompilationUnit.IPrimaryClassNodeOperation, then nothing will prevent the transformation from being loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73f27c960dee0dc267bd7a5e75c2780d14e98e5d" translate="yes" xml:space="preserve">
          <source>Display the given buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5140cebec5f7e09ead4f35e8bf5f94a64504dbb" translate="yes" xml:space="preserve">
          <source>Displays an exception's stack trace, if &lt;code&gt;debug&lt;/code&gt; or &lt;code&gt;always&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c37c473fb7aefd2e1e4c5e8258b3f66cd84e4965" translate="yes" xml:space="preserve">
          <source>Distinguish a parameter array from Object[].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="414c58b2b7854a3c627ed486e4822627fedc364c" translate="yes" xml:space="preserve">
          <source>Distinguish between local variable declaration and method call, e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa01c2cf366a13f5f31c6bc05ec8900ded60466" translate="yes" xml:space="preserve">
          <source>Distinguish between local variable declaration and method call, e.g. `a b`</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b52cd2961d80f748461f11b804f7ba83fd7ed378" translate="yes" xml:space="preserve">
          <source>Distinguish between method declaration and method call/constructor declaration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1113bf04da7b8fb5e445c6e591986966534f9f73" translate="yes" xml:space="preserve">
          <source>Divide a Character by a Number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3037fbf11528a1fb2743016887f79e55b2674f6" translate="yes" xml:space="preserve">
          <source>Divide a Character by a Number. The ordinal value of the Character is used in the division (the ordinal value is the unicode value which for simple character sets is the ASCII value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b467ecbe0487fd3d4890f0228f6a08e5ad694fc0" translate="yes" xml:space="preserve">
          <source>Divide a Number by a Character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ff4883c4f095113b784a432cfe8a683099c8043" translate="yes" xml:space="preserve">
          <source>Divide a Number by a Character. The ordinal value of the Character is used in the division (the ordinal value is the unicode value which for simple character sets is the ASCII value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f8ca7a0d1f7391fc93e82b248098eb2b76d17b" translate="yes" xml:space="preserve">
          <source>Divide one Character by another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83f64d1b107484d6728f2554cde89d727aec5703" translate="yes" xml:space="preserve">
          <source>Divide one Character by another. The ordinal values of the Characters are used in the division (the ordinal value is the unicode value which for simple character sets is the ASCII value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="835e9feeb067e04b47d523e528d1e2c62525c98a" translate="yes" xml:space="preserve">
          <source>Divide two Numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0430f632d7b33c2edeae74bc2e79771857d55cc1" translate="yes" xml:space="preserve">
          <source>Divide two Numbers. Note: Method name different from 'divide' to avoid collision with BigInteger method that has different semantics. We want a BigDecimal result rather than a BigInteger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6845cf6500a6ef622e8cde6abfa608711e0ef6ba" translate="yes" xml:space="preserve">
          <source>Do not force the appearance of exactness on a number that is by definition not guaranteed to be exact. In particular this means that if an operand in a NumberMath operation is a binary floating point number, ensure that the result remains a binary floating point number (i.e. never automatically promote a binary floating point number to a BigDecimal). This has the effect of preserving the expectations of binary floating point users and helps performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af8893faf790b7661a4bc80bfce027be6c4c9e8c" translate="yes" xml:space="preserve">
          <source>Do not process any more files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a188672f1197bf799db8d7f686951c935c594c6f" translate="yes" xml:space="preserve">
          <source>Do not process the child files/subdirectories within the current directory being processed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaaf988bcdd90dc58030cdfe52006a1158780ebc" translate="yes" xml:space="preserve">
          <source>Do not serialize &lt;code&gt;null&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00e660bf65e137fde385c107de67e8ebeaa5d284" translate="yes" xml:space="preserve">
          <source>Do some overrides for standard component handlers, else use super</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02bb88aa4712aba0caa436f4f93e56a5cc377aba" translate="yes" xml:space="preserve">
          <source>Does not check for matching return types; even void and any object type are considered to be compatible</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f36c8fbffd51353b2c2df02ad346426791e8a4" translate="yes" xml:space="preserve">
          <source>Does not check for method overloading or overridden methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b0850f753a5e8ef435166f96821a084bc9e55d" translate="yes" xml:space="preserve">
          <source>Does not escape control characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8c70c8ad32f20ad192d1414425c8d249b1541a" translate="yes" xml:space="preserve">
          <source>Does not escape non-ascii characters above 0x7e</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c703cd2efd6739f29028261e833180b544f1063c" translate="yes" xml:space="preserve">
          <source>Does not perform Unicode validation on its input</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8959c7c702d7fd0597a7dcda3baaa5ae8a538f65" translate="yes" xml:space="preserve">
          <source>Does not support DTDs or external entities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="300044c853cd3b82b2eb340972c89b81850ffae8" translate="yes" xml:space="preserve">
          <source>Does not treat surrogate pairs specially</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae206d8933af511b02d371a4eacb710699071328" translate="yes" xml:space="preserve">
          <source>Does not write any output, just returns the writer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afae45dce815dca9804b8fa4db6fdc757a6237d2" translate="yes" xml:space="preserve">
          <source>Does nothing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e444a35bf93138264863e2c5351f0db3a85498" translate="yes" xml:space="preserve">
          <source>Does the Closure have a single String argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92e06104fcb5e1b8773b37d5f78c74ea9ff714eb" translate="yes" xml:space="preserve">
          <source>Does the Closure have a single char-like (char or Character) argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b2b068a0dc364e9fea897c5ade09682aa20a7a" translate="yes" xml:space="preserve">
          <source>Does this factory &quot;Own&quot; its child closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf73d38a3970b02ae305a93fe24e270630e778a" translate="yes" xml:space="preserve">
          <source>Don't display any fields or properties with value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81581597044514bf54d4f97266022fc991f3915e" translate="yes" xml:space="preserve">
          <source>Double</source>
          <target state="translated">Double</target>
        </trans-unit>
        <trans-unit id="faf4e718fa324c4a61410d90dab3e64f4fbc041d" translate="yes" xml:space="preserve">
          <source>Drops the given number of chars from the head of this CharSequence if they are available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="135165dd7c81442f94adcc6115eda8c4b8cd329d" translate="yes" xml:space="preserve">
          <source>Drops the given number of elements from the head of this Iterable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c49bf67415ff45a3516e06653c2a102422da139e" translate="yes" xml:space="preserve">
          <source>Drops the given number of elements from the head of this List.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a090e370070b8d1fef9462da7e0612d59d31209" translate="yes" xml:space="preserve">
          <source>Drops the given number of elements from the head of this array if they are available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a398c5bfd532482ba80312c34e1fba92d0c4e0" translate="yes" xml:space="preserve">
          <source>Drops the given number of elements from the head of this iterator if they are available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31191aa7e5e8b570708585d0b0954c5e7b86c191" translate="yes" xml:space="preserve">
          <source>Drops the given number of elements from the head of this iterator if they are available. The original iterator is stepped along by &lt;code&gt;num&lt;/code&gt; elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc4ab6e4876f135e7d91df2fe9f83480ead617d9" translate="yes" xml:space="preserve">
          <source>Drops the given number of elements from the tail of this Iterable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7efd6a3b95772d9c289ad09818947a84c6130f6" translate="yes" xml:space="preserve">
          <source>Drops the given number of elements from the tail of this Iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c840b8c699e30157730e2272d38129828a3b07e6" translate="yes" xml:space="preserve">
          <source>Drops the given number of elements from the tail of this List.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9c89249c5d8551fd85db376ebd0d382d1d2a463" translate="yes" xml:space="preserve">
          <source>Drops the given number of elements from the tail of this SortedSet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb4498065548184273c7d681bbc4a3a87ca8270f" translate="yes" xml:space="preserve">
          <source>Drops the given number of elements from the tail of this array if they are available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce592282c482870f555b9a9e0da0e2e86bbc3d57" translate="yes" xml:space="preserve">
          <source>Drops the given number of key/value pairs from the head of this map if they are available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e6f08da9eb1f7ba65b9c21fdaef9394da62848" translate="yes" xml:space="preserve">
          <source>Dummy class used by the indy implementation. This class mostly contains empty stubs for calls to the call site writer, since this class is normally used to prepare call site caching and in indy call site caching is done by the jvm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c8b758bfd91cdc828303d2fd8cacea1a09d13c" translate="yes" xml:space="preserve">
          <source>Dump the thread dump of all threads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524ef9e4ba12e4c3f1232e97f0e5816d76fae344" translate="yes" xml:space="preserve">
          <source>Duplicate interfaces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1370004da76fa4f3b7a5180fd5436065ef4c7d5b" translate="yes" xml:space="preserve">
          <source>Duration</source>
          <target state="translated">Duration</target>
        </trans-unit>
        <trans-unit id="24f28a555b9af2378c1eac60fd152f08f3a5c36c" translate="yes" xml:space="preserve">
          <source>Duration represents time periods which have values independent of the context. So, whilst we can't say how long a month is without knowing the year and the name of the month, we know how long a day is independent of the date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212e2c01dda17fff294cd96f1ce0160db8203348" translate="yes" xml:space="preserve">
          <source>Dynamic groovy proxy for another object. All method invocations get forwarded to actual object, unless the proxy overrides it. See groovy/util/ProxyTest.groovy for usage details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6fe2953cff40b4468722f7d59e6d33d21db0ce7" translate="yes" xml:space="preserve">
          <source>Dynamically wraps an instance into something which implements the supplied trait classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5eec10ebde3492d62ebef5062f507ef1d61643" translate="yes" xml:space="preserve">
          <source>Dynamically wraps an instance into something which implements the supplied trait classes. It is guaranteed that the returned object will implement the trait interfaces, but the original type of the object is lost (replaced with a proxy).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bcf9537dae555b4fb7bcb9b35526e161e1e9e59" translate="yes" xml:space="preserve">
          <source>Each node defines the class to be created and the property on its parent (if any) at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="151678e95b86e5b6b8757fb083e2277311fcce05" translate="yes" xml:space="preserve">
          <source>Each value is prefixed by a string, after the last value an additional String might be used. This means &lt;code&gt;strings.length == values.length  ||  strings.length == values.length + 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1015339123417d53671240e466acec4cce4d928b" translate="yes" xml:space="preserve">
          <source>Eager variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef40d99083d909387fbe1ab8a70e589abeed7cbc" translate="yes" xml:space="preserve">
          <source>Edge case for multiple max values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d573d432463d5c62c12ecfe57a288b217591bbc2" translate="yes" xml:space="preserve">
          <source>Edge case for multiple min values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba5a347213d11fb87b76cff0bb0b9b6ef0fbcc8f" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;null&lt;/code&gt; or a compiled pattern read from &quot;{</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9996941ca5ede1ec0df239e637066f091586a928" translate="yes" xml:space="preserve">
          <source>Element Detail</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1677f5f2cd765b3d961a9a602c2acec6ab910e28" translate="yes" xml:space="preserve">
          <source>Element Summary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fdf648fb77166a023c70d5c3964c8a6f8ff45b3" translate="yes" xml:space="preserve">
          <source>EmptyExpression.INSTANCE</source>
          <target state="translated">EmptyExpression.INSTANCE</target>
        </trans-unit>
        <trans-unit id="7338aabbee39bdf179e27364f6a3678dc189cd4e" translate="yes" xml:space="preserve">
          <source>EmptyStatement</source>
          <target state="translated">EmptyStatement</target>
        </trans-unit>
        <trans-unit id="c988741e32431b8fa5657098a1ddd4f5d3ca3fbd" translate="yes" xml:space="preserve">
          <source>EmptyStatement.INSTANCE</source>
          <target state="translated">EmptyStatement.INSTANCE</target>
        </trans-unit>
        <trans-unit id="d7e61853969ad2c5c6474c0e73cc0c6b64341ea6" translate="yes" xml:space="preserve">
          <source>Enable and/or disable namespace handling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f030da78ffd44a5255c2f45a89c499abcb3ab83" translate="yes" xml:space="preserve">
          <source>Enable and/or disable preservation of whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89fa1070a4cad85f8f5edc200169313e53cd6b4f" translate="yes" xml:space="preserve">
          <source>Enable compiler to report stack trace information if a problem occurs during compilation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7e288afe05274116e84a63af1d9cbab69161a1c" translate="yes" xml:space="preserve">
          <source>Enable compiler to report stack trace information if a problem occurs during compilation. Default is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73fc66a8595b44e00bab36189a9a2a045f1c4f0b" translate="yes" xml:space="preserve">
          <source>Enable the &quot;assert&quot; keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db2de1967d6fc5f979f2ac22ae4a081bd6de828" translate="yes" xml:space="preserve">
          <source>Enable the &quot;enum&quot; keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2585b6bab777017409f90081ec690f9100327e6f" translate="yes" xml:space="preserve">
          <source>Enable verbose compiling which will display which files are being compiled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0762b2224724ef6fc7fb5c8c046e6baeaca6e8af" translate="yes" xml:space="preserve">
          <source>Enable verbose compiling which will display which files are being compiled. Default is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a80e07b1935dfa0a8a9809d0d79a6458a48f5042" translate="yes" xml:space="preserve">
          <source>Enables named query caching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a9481448bd255029ae2040fa60e4e834d9239a" translate="yes" xml:space="preserve">
          <source>Enables named query support:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af9507a7e9f90ac9101490220c3bd20b7e1399a3" translate="yes" xml:space="preserve">
          <source>Enables statement caching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c7d88558cced75c5350a87ce26a5031517e4822" translate="yes" xml:space="preserve">
          <source>Enables the ExpandoMetaClassCreationHandle with the registry &lt;code&gt;ExpandoMetaClassCreationHandle.enable();&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58f9d5c788ed5ab15ba41b4bffe74f054e243e21" translate="yes" xml:space="preserve">
          <source>Encapsulates non-specific i/o exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fce0a7546447572d0ae5d88bd15775106f6f7f0" translate="yes" xml:space="preserve">
          <source>Encoding to use, becomes charset part of contentType.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a6bbb6f9160d65e5132d23962b565111db05113" translate="yes" xml:space="preserve">
          <source>EncodingGroovyMethods.encodeBase64Url</source>
          <target state="translated">EncodingGroovyMethods.encodeBase64Url</target>
        </trans-unit>
        <trans-unit id="84644175cb14784231bf40ccdf6438e043efa417" translate="yes" xml:space="preserve">
          <source>English_plural</source>
          <target state="translated">English_plural</target>
        </trans-unit>
        <trans-unit id="8331d35282f4d26e6fd67924b240bfca8b188cab" translate="yes" xml:space="preserve">
          <source>Ensures that the provided object is wrapped into a closure if it's not a closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ec455a6b2df30d3547d1c9d6fa8c565a931ed6" translate="yes" xml:space="preserve">
          <source>Ensures that the provided object is wrapped into a closure if it's not a closure. Do not trust IDEs, this method is used in bytecode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da9d0d022395c798513c0430afee14d8e3ce8cd2" translate="yes" xml:space="preserve">
          <source>Entries are evicted in the same order as they come in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9eabc4d45a36bd2271576477b1acc8daec5ba49" translate="yes" xml:space="preserve">
          <source>Enum Constant Detail</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ece7b715b555fb8f8e1452ab0161e59c78884a5d" translate="yes" xml:space="preserve">
          <source>Enum Constants Summary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3af409b72bf0da9ca592676b53202e8af880e60a" translate="yes" xml:space="preserve">
          <source>Enum constant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0387f0a57b2960f2de1c99cd09cc513f2843d4d0" translate="yes" xml:space="preserve">
          <source>Enum constants classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50644abb6ac73722afb4573840a71175b83b7820" translate="yes" xml:space="preserve">
          <source>Enum for easy differentiation between call types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe0d2dc12d0aa622bacbe23b5516c2e7895e1d7" translate="yes" xml:space="preserve">
          <source>Enumeration</source>
          <target state="translated">Enumeration</target>
        </trans-unit>
        <trans-unit id="18acfd4885b5587241833119a0fb0ef89e4717bb" translate="yes" xml:space="preserve">
          <source>Enums have a parent constructor with two arguments from java.lang.Enum. This visitor adds those two arguments into manually created constructors and performs the necessary super call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b23084f8dd07fc08efb32948e42d76889802f2c5" translate="yes" xml:space="preserve">
          <source>EqualsAndHashCode</source>
          <target state="translated">EqualsAndHashCode</target>
        </trans-unit>
        <trans-unit id="ad33dd53f7a478fff34350514313843dbd68eef8" translate="yes" xml:space="preserve">
          <source>Equivalent to calling the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/Year.html#get(java.time.temporal.TemporalField)&quot;&gt;Year.get&lt;/a&gt; method with a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/temporal/ChronoField.html#ERA&quot;&gt;ChronoField.ERA&lt;/a&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb6f4319aab500aa3aa57676867b4bbd0fff478c" translate="yes" xml:space="preserve">
          <source>Equivalent to calling the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/Year.html#get(java.time.temporal.TemporalField)&quot;&gt;Year.get&lt;/a&gt; method with a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/temporal/ChronoField.html#YEAR_OF_ERA&quot;&gt;ChronoField.YEAR_OF_ERA&lt;/a&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3fc3a9850fe7c2dd9d3adb956491460e03651c1" translate="yes" xml:space="preserve">
          <source>Error message classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92148667423865c8af32629efb0da81fad8ea54c" translate="yes" xml:space="preserve">
          <source>ErrorMessages collected during processing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a0c79c2cb2cd552bf6453d7c05369eb548ff80" translate="yes" xml:space="preserve">
          <source>Errors found during the compilation should be reported through the ErrorCollector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e80661ac66f2bcdac70fc69de5d34094a658dbc" translate="yes" xml:space="preserve">
          <source>Escape control characters (below 0x20) with their XML entities, e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f99420929ccc8911833faf58b0e8f9766646f0" translate="yes" xml:space="preserve">
          <source>Escape control characters (below 0x20) with their XML entities, e.g. carriage return (&lt;code&gt;Ctrl-M or \r&lt;/code&gt;) becomes  Notes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f151fff385b6330551b9b552edf230e3c62599c3" translate="yes" xml:space="preserve">
          <source>Escape the following characters &lt;code&gt;&quot; ' &amp;amp; &amp;lt; &amp;gt;&lt;/code&gt; with their XML entities, e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c51c69e5677be1b948d0b825bef7e98da8954324" translate="yes" xml:space="preserve">
          <source>Escape the following characters &lt;code&gt;&quot; ' &amp;amp; &amp;lt; &amp;gt;&lt;/code&gt; with their XML entities, e.g. &lt;code&gt;&quot;bread&quot; &amp;amp; &quot;butter&quot;&lt;/code&gt; becomes &lt;code&gt;&quot;bread&quot; &amp;amp; &quot;butter&amp;amp;quot&lt;/code&gt;. Notes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="276b79dc2c0836de085d3e73f659dd7c78b571c4" translate="yes" xml:space="preserve">
          <source>Escapes and unescapes &lt;code&gt;String&lt;/code&gt;s for Java, Java Script, HTML, XML, and SQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8263a2bff56413269490da914c540bedd615757f" translate="yes" xml:space="preserve">
          <source>Escapes any values it finds into their JavaScript String form. Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e897306ea96cf9f3a1a1a46ae063963eff8bf5d7" translate="yes" xml:space="preserve">
          <source>Escapes the characters in a &lt;code&gt;String&lt;/code&gt; using Java String rules to a &lt;code&gt;Writer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3c20aa249ed6e96bd8051f175b403d0d7149897" translate="yes" xml:space="preserve">
          <source>Escapes the characters in a &lt;code&gt;String&lt;/code&gt; using Java String rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51d104aefdfbe5b80bbcfd751b35bb80921ead9" translate="yes" xml:space="preserve">
          <source>Escapes the characters in a &lt;code&gt;String&lt;/code&gt; using JavaScript String rules to a &lt;code&gt;Writer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb50cdaefcd0d40facd80506ac19891d148acdb4" translate="yes" xml:space="preserve">
          <source>Escapes the characters in a &lt;code&gt;String&lt;/code&gt; using JavaScript String rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cbc313a40882f3ec2cb93dd9eb9f230369b4589" translate="yes" xml:space="preserve">
          <source>Escapes the string representation of the supplied object if it derives from &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/CharSequence.html&quot;&gt;CharSequence&lt;/a&gt;, otherwise returns the object itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa93443db6f628a657c09ca907e3dee5629a77a0" translate="yes" xml:space="preserve">
          <source>Especially handy for using Groovy objects when in the Java world.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce5165dc75157c33f487946c4764f0c42ec65c79" translate="yes" xml:space="preserve">
          <source>Evaluate an expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7e237e19344720bcddc903e3e15c29131b6a03" translate="yes" xml:space="preserve">
          <source>Evaluates script with given binding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2816bd4cae529e8fadc156868d27980981a33915" translate="yes" xml:space="preserve">
          <source>Evaluates the specified String expression and makes the first three parameters available inside the script bound to variables named 'x', 'y', and 'z' respectively, returning the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25fe6134996b2b32e42e17c551dc238fb828d41c" translate="yes" xml:space="preserve">
          <source>Evaluates the specified String expression and makes the first three parameters available inside the script bound to variables named 'x', 'y', and 'z' respectively, returning the result. For example, this code executes without failure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6fb6e6a0d39e1018f2bf15aaf01bce33f52245c" translate="yes" xml:space="preserve">
          <source>Evaluates the specified String expression and makes the first two parameters available inside the script bound to variables named 'x' and 'y' respectively, returning the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff217fefe30eea336bedccfbbb165d9d3a5a2499" translate="yes" xml:space="preserve">
          <source>Evaluates the specified String expression and makes the first two parameters available inside the script bound to variables named 'x' and 'y' respectively, returning the result. For example, this code executes without failure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23307044b725589a007b19d46b03987d200c7175" translate="yes" xml:space="preserve">
          <source>Evaluates the specified String expression and makes the parameter available inside the script bound to a variable named 'x', returning the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a83e6f46054a7d4c7e65fbb546a60bce1478c21" translate="yes" xml:space="preserve">
          <source>Evaluates the specified String expression and makes the parameter available inside the script bound to a variable named 'x', returning the result. For example, this code executes without failure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b38ed29894cddc9f527518c705e5847a59d7529b" translate="yes" xml:space="preserve">
          <source>Evaluates the specified String expression and makes the parameter available inside the script, returning the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1618e50e2f0a5b3706c85877b8f7f41557c471f7" translate="yes" xml:space="preserve">
          <source>Evaluates the specified String expression and makes the parameter available inside the script, returning the result. For example, this code binds the 'x' variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6008d12f0c325c5f8d2e650c687d43f75529505c" translate="yes" xml:space="preserve">
          <source>Evaluates the specified String expression and returns the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55c9d318a608f8aba1bbdea36939ce35b27bfba3" translate="yes" xml:space="preserve">
          <source>Evaluates the specified String expression and returns the result. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96488d7998bf759634c49ea871042778258ccfe" translate="yes" xml:space="preserve">
          <source>Evaluates the value of a cell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191ad260780f88040eaeed6ba16ee124717b07c2" translate="yes" xml:space="preserve">
          <source>Evaluator</source>
          <target state="translated">Evaluator</target>
        </trans-unit>
        <trans-unit id="ebecc055e53ede753200c8838588736df4016c43" translate="yes" xml:space="preserve">
          <source>Even if x is no atomic expression, x will be evaluated only once. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a18afae45246ec45581ad9787187f359f3a98ff0" translate="yes" xml:space="preserve">
          <source>Event message getter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e821fa1c6cba949848bdfb3151a7aae8ead4fdb9" translate="yes" xml:space="preserve">
          <source>Event message setter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b02d60363fc83c5c86a98f0522cbacc1c0a20db0" translate="yes" xml:space="preserve">
          <source>Event type getter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04b4046fc1e6ad44ac1b0da47ee666ea1341f81e" translate="yes" xml:space="preserve">
          <source>Event type setter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca2b2ab7074e93c36c5cfbb29f095881fa020eb" translate="yes" xml:space="preserve">
          <source>Eventually, if the features provided here are not sufficient, you may implement custom AST filtering handlers, either implementing the StatementChecker interface or ExpressionChecker interface then register your handlers thanks to the &lt;a href=&quot;#addExpressionCheckers(org.codehaus.groovy.control.customizers.SecureASTCustomizer.ExpressionChecker...)&quot;&gt;addExpressionCheckers(org.codehaus.groovy.control.customizers.SecureASTCustomizer.ExpressionChecker...)&lt;/a&gt; and &lt;a href=&quot;#addStatementCheckers(org.codehaus.groovy.control.customizers.SecureASTCustomizer.StatementChecker...)&quot;&gt;addStatementCheckers(org.codehaus.groovy.control.customizers.SecureASTCustomizer.StatementChecker...)&lt;/a&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec96fd8124f4220c2fc040e303a17cd1cc467ce" translate="yes" xml:space="preserve">
          <source>Every cached preparedStatement is closed after closure has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8dafe563f8bf7b0b84f204f0d2e7bf08e798e12" translate="yes" xml:space="preserve">
          <source>Every cached preparedStatement is closed after closure has been called. If the closure takes a single argument, it will be called with the connection, otherwise it will be called with no arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="882421aa5c1c6bc06e2e969ce87c37b2bcb3325e" translate="yes" xml:space="preserve">
          <source>Example binding all servlet context variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="500e5353291c9d6b05ef34d42edc4f09d101409a" translate="yes" xml:space="preserve">
          <source>Example usage (tested with MySQL) - suppose we have the following stored procedure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71ab0c87fba7b18d279193e354273b8d073f980f" translate="yes" xml:space="preserve">
          <source>Example usage - see &lt;a href=&quot;#call(java.lang.String)&quot;&gt;call(String)&lt;/a&gt; for more details about creating a &lt;code&gt;HouseSwap(IN name1, IN name2)&lt;/code&gt; stored procedure. Once created, it can be called like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5064f313f8aea4640282dd0b158eb1206bce6be4" translate="yes" xml:space="preserve">
          <source>Example usage - suppose we create a stored procedure (ignore its simplistic implementation):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20966688eb74bd8d36d88b2058b2b9786b295977" translate="yes" xml:space="preserve">
          <source>Example usage without any special modifiers just defers initialization until the first call but is not thread-safe:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b7d916f23b96aa167f159b1caa343ca10e6cc2" translate="yes" xml:space="preserve">
          <source>Example usage: &lt;code&gt;&lt;pre&gt;
 def slurper = new groovy.json.JsonSlurper()
 def result = slurper.parseText('{&quot;person&quot;:{&quot;name&quot;:&quot;Guillaume&quot;,&quot;age&quot;:33,&quot;pets&quot;:[&quot;dog&quot;,&quot;cat&quot;]}}')

 assert result.person.name == &quot;Guillaume&quot;
 assert result.person.age == 33
 assert result.person.pets.size() == 2
 assert result.person.pets[0] == &quot;dog&quot;
 assert result.person.pets[1] == &quot;cat&quot;
 &lt;/pre&gt;&lt;/code&gt; JsonSlurper can use several types of JSON parsers. Please read the documentation for JsonParserType. There are relaxed mode parsers, large file parser, and index overlay parsers. Don't worry, it is all groovy. JsonSlurper will just work, but understanding the different parser types may allow you to drastically improve the performance of your JSON parsing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a32df290b2e90edb703fefc15645665487c42e4" translate="yes" xml:space="preserve">
          <source>Example usage: &lt;code&gt;&lt;pre&gt;
 def slurper = new groovy.json.JsonSlurperClassic()
 def result = slurper.parseText('{&quot;person&quot;:{&quot;name&quot;:&quot;Guillaume&quot;,&quot;age&quot;:33,&quot;pets&quot;:[&quot;dog&quot;,&quot;cat&quot;]}}')

 assert result.person.name == &quot;Guillaume&quot;
 assert result.person.age == 33
 assert result.person.pets.size() == 2
 assert result.person.pets[0] == &quot;dog&quot;
 assert result.person.pets[1] == &quot;cat&quot;
 &lt;/pre&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a505abf7f54e3274cba0a2717abc85492798de7e" translate="yes" xml:space="preserve">
          <source>Example usages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="babf960f590e0a1fef8091c73ed240cde927ac95" translate="yes" xml:space="preserve">
          <source>Example with a classical builder-style:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="66c85a97507aafe1646fe930e07a311bc9852433" translate="yes" xml:space="preserve">
          <source>Exception if an Exception occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96c9a90b8b90184d7e259709257f7896deba0499" translate="yes" xml:space="preserve">
          <source>Exception if something goes wrong</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6998e4e298e7607e5e1842fcbab9d1a7f936e05" translate="yes" xml:space="preserve">
          <source>Exception if the property could not be evaluated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ed387429516d9db8de1fbd4fe1073913efa2da" translate="yes" xml:space="preserve">
          <source>Excludes from the output any fields that match the specified names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d0476f82f8fed1b328ce2e60e932ed7ba1591d2" translate="yes" xml:space="preserve">
          <source>Excludes from the output any fields whose type is the same or is assignable to any of the given types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59513ce01742a6be6f4408942daae5a07e71a7dd" translate="yes" xml:space="preserve">
          <source>Exclusive disjunction of two boolean operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e87de259f40bb7067175e64833638fcab025ce" translate="yes" xml:space="preserve">
          <source>Exec the statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705355f625cb37f10a23869396b9c774d4182d02" translate="yes" xml:space="preserve">
          <source>Execute a script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84c2c9d2ca18dac0d646f69e65841ec38f567dfa" translate="yes" xml:space="preserve">
          <source>Execute a single line, where the line may be a command or Groovy code (complete or incomplete).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c181f236af3e5bb811a1f2f2c3c525c83bbda1d" translate="yes" xml:space="preserve">
          <source>Execute the command that's defined by the subclass following the Command pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2744a1007a92fdd7692f846c7913a1dda607d6d3" translate="yes" xml:space="preserve">
          <source>Execute the command that's defined by the subclass following the Command pattern. Specialized parameters are held in the command instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1367a8244a8690823e59c46cd3cb131f0b8a419" translate="yes" xml:space="preserve">
          <source>Execute the given Closure with the according level for the Logger that is qualified by the qualifier and return the log output as a String.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afe41d439f971ddc3053a984af65111d077db31a" translate="yes" xml:space="preserve">
          <source>Execute the given Closure with the according level for the Logger that is qualified by the qualifier and return the log output as a String. Qualifiers are usually package or class names. Existing log level and handlers are restored after execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5bf802f2fd9ea637fb369d3a102a28b348baec" translate="yes" xml:space="preserve">
          <source>Execute the given Closure with the according level for the Logger that is qualified by the qualifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df1c74bba7498bbc17ddba5eeac098666e0ca3e4" translate="yes" xml:space="preserve">
          <source>Execute the given Closure with the according level for the Logger that is qualified by the qualifier. Qualifiers are usually package or class names. The log level is restored after execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="931c09780e57ac08e242f4f7f0a37695c5747034" translate="yes" xml:space="preserve">
          <source>Executes a series of Groovy statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="730c16957e24a5e05b5ff3d8b2a6fa4ea2e58adc" translate="yes" xml:space="preserve">
          <source>Executes closure with given binding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff83750b2e259d3f1c9b94025893e576cc4723b" translate="yes" xml:space="preserve">
          <source>Executes the closure this many times, starting from zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f048a4fd26d94ca3ffac35ada9c9417b8e82a571" translate="yes" xml:space="preserve">
          <source>Executes the closure this many times, starting from zero. The current index is passed to the closure each time. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af282e004865838bcf70607eb1923363a761ec6" translate="yes" xml:space="preserve">
          <source>Executes the command specified by &lt;code&gt;self&lt;/code&gt; as a command-line process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64c82a7392caeedad17b05ba8097d3b062d14f3" translate="yes" xml:space="preserve">
          <source>Executes the command specified by &lt;code&gt;self&lt;/code&gt; with environment defined by &lt;code&gt;envp&lt;/code&gt; and under the working directory &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd5a11155a054b355fd99a7599cab17457f11e1e" translate="yes" xml:space="preserve">
          <source>Executes the command specified by the &lt;code&gt;String&lt;/code&gt; array given in the first parameter, with the environment defined by &lt;code&gt;envp&lt;/code&gt; and under the working directory &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578c6bb7209b5f76308baa379ef8f830396a41bd" translate="yes" xml:space="preserve">
          <source>Executes the command specified by the &lt;code&gt;String&lt;/code&gt; array given in the first parameter, with the environment defined by &lt;code&gt;envp&lt;/code&gt; and under the working directory &lt;code&gt;dir&lt;/code&gt;. The first item in the array is the command; the others are the parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2801b126c9d5b10a301f0637d48efbb8030db930" translate="yes" xml:space="preserve">
          <source>Executes the command specified by the given &lt;code&gt;String&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d34a6e2d25ea008398bab04d0073fb488405543" translate="yes" xml:space="preserve">
          <source>Executes the command specified by the given &lt;code&gt;String&lt;/code&gt; array. The first item in the array is the command; the others are the parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a909a7cfef9fc52fc7061bc3f01251f84c5211" translate="yes" xml:space="preserve">
          <source>Executes the command specified by the given list, with the environment defined by &lt;code&gt;envp&lt;/code&gt; and under the working directory &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b73889a285c4a06c0b5f9146d55c3277ee16517" translate="yes" xml:space="preserve">
          <source>Executes the command specified by the given list, with the environment defined by &lt;code&gt;envp&lt;/code&gt; and under the working directory &lt;code&gt;dir&lt;/code&gt;. The first item in the list is the command; the others are the parameters. The toString() method is called on items in the list to convert them to Strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="931351ac0fa3db7b3f099a46867e4e2f76183f1b" translate="yes" xml:space="preserve">
          <source>Executes the command specified by the given list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3148565dd8c530f591959b3f992c2d2a44d850" translate="yes" xml:space="preserve">
          <source>Executes the command specified by the given list. The toString() method is called for each item in the list to convert into a resulting String. The first item in the list is the command the others are the parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58297398e330c895f9e5fb6bd21845f3a93f0c7d" translate="yes" xml:space="preserve">
          <source>Executes the given SQL statement (typically an INSERT statement).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="000ba56c11df4e1584a964eefdb922e7dba1de78" translate="yes" xml:space="preserve">
          <source>Executes the given SQL statement (typically an INSERT statement). This variant allows you to receive the values of any auto-generated columns, such as an autoincrement ID field (or fields) when you know the column name(s) of the ID field(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3eb89db3778b40f94e8f63b42281fffd519337" translate="yes" xml:space="preserve">
          <source>Executes the given SQL statement (typically an INSERT statement). Use this variant when you want to receive the values of any auto-generated columns, such as an autoincrement ID field (or fields) and you know the column name(s) of the ID field(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b93fc63ac92c0d2c01c7d0c4771e5c5cbbfc2ea" translate="yes" xml:space="preserve">
          <source>Executes the given SQL statement (typically an INSERT statement). Use this variant when you want to receive the values of any auto-generated columns, such as an autoincrement ID field (or fields) and you know the column name(s) of the ID field(s). The query may contain placeholder question marks which match the given list of parameters. See &lt;a href=&quot;#executeInsert(groovy.lang.GString)&quot;&gt;executeInsert(GString)&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3adaa4e82decc5df9559110f4bd388ed67db55c2" translate="yes" xml:space="preserve">
          <source>Executes the given SQL statement (typically an INSERT statement). Use this variant when you want to receive the values of any auto-generated columns, such as an autoincrement ID field. See &lt;a href=&quot;#executeInsert(groovy.lang.GString)&quot;&gt;executeInsert(GString)&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="758094feeb68e241e32124fd8797e5d19af3fa50" translate="yes" xml:space="preserve">
          <source>Executes the given SQL statement (typically an INSERT statement). Use this variant when you want to receive the values of any auto-generated columns, such as an autoincrement ID field. The query may contain GString expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b269d2a43d4f92cce4ea84b4970c13c5dc26d2d8" translate="yes" xml:space="preserve">
          <source>Executes the given SQL statement (typically an INSERT statement). Use this variant when you want to receive the values of any auto-generated columns, such as an autoincrement ID field. The query may contain placeholder question marks which match the given list of parameters. See &lt;a href=&quot;#executeInsert(groovy.lang.GString)&quot;&gt;executeInsert(GString)&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f34246f71c05c34e588a74b12766f0723564fd9a" translate="yes" xml:space="preserve">
          <source>Executes the given SQL update with embedded expressions inside.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="595c006248c6e4dad2ac3aaee43303aa43ebcd98" translate="yes" xml:space="preserve">
          <source>Executes the given SQL update with parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecddc4ba1dce91755c58fae1e681ac7cadf903a9" translate="yes" xml:space="preserve">
          <source>Executes the given SQL update.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b8db63a00a10c3ac7f3c4289964c72b8720d91c" translate="yes" xml:space="preserve">
          <source>Executes the given SQL with embedded expressions inside.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c72ae34821677996160ec7c214489ae2459f13" translate="yes" xml:space="preserve">
          <source>Executes the given SQL with embedded expressions inside. Also calls the provided processResults Closure to process any ResultSet or UpdateCount results that executing the SQL might produce. Resource handling is performed automatically where appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8c19fee8f01b4a12b7b09e8a84a6314f138230b" translate="yes" xml:space="preserve">
          <source>Executes the given SQL with embedded expressions inside. Also saves the updateCount, if any, for subsequent examination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1910887e311e77a9d5f146f8ecf4aa351214ca8d" translate="yes" xml:space="preserve">
          <source>Executes the given piece of SQL with parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13d01787ab0a6173fa1666d7322f3710122ec549" translate="yes" xml:space="preserve">
          <source>Executes the given piece of SQL with parameters. Also calls the provided processResults Closure to process any ResultSet or UpdateCount results that executing the SQL might produce.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e19229937a82a31e0630de2bb32b9ae0b3be48fe" translate="yes" xml:space="preserve">
          <source>Executes the given piece of SQL with parameters. Also saves the updateCount, if any, for subsequent examination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f676d4ec3177994516ab5b944ffa3602e11118e2" translate="yes" xml:space="preserve">
          <source>Executes the given piece of SQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d8c2454a51cbb96d9fcb94fc6b1f5ab16bc8b54" translate="yes" xml:space="preserve">
          <source>Executes the given piece of SQL. Also calls the provided processResults Closure to process any ResultSet or UpdateCount results that executing the SQL might produce.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f3ba04d27c856e69dd5b2fb56d904c3d5c1788" translate="yes" xml:space="preserve">
          <source>Executes the given piece of SQL. Also saves the updateCount, if any, for subsequent examination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2b205367d860e908fccf832cd4327487740ce7" translate="yes" xml:space="preserve">
          <source>Executes the specified script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f4937d23bcb12974930b0046c6da597d15e99dd" translate="yes" xml:space="preserve">
          <source>Executes the specified script. The default &lt;code&gt;ScriptContext&lt;/code&gt; for the &lt;code&gt;ScriptEngine&lt;/code&gt; is used. Variables from a Groovy &lt;code&gt;Binding&lt;/code&gt; are made available in the default scope of the &lt;code&gt;Bindings&lt;/code&gt; of the &lt;code&gt;ScriptEngine&lt;/code&gt;. Resulting variables in the &lt;code&gt;Bindings&lt;/code&gt; are returned back to the Groovy &lt;code&gt;Binding&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="708b20eea28ceb9f44c3d460368ed8972606b26a" translate="yes" xml:space="preserve">
          <source>Executes the task.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c3fbc8d2d6c4979c21920fba6611be3309d483" translate="yes" xml:space="preserve">
          <source>Existence and correct visibility for inherited members</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc9d1b63e49be93f9e872291b80f7e2e60fcb2ca" translate="yes" xml:space="preserve">
          <source>Expando.getMetaPropertyValues</source>
          <target state="translated">Expando.getMetaPropertyValues</target>
        </trans-unit>
        <trans-unit id="80aace83d834d5163ec547589d748187abbb2963" translate="yes" xml:space="preserve">
          <source>ExpandoMetaClass</source>
          <target state="translated">ExpandoMetaClass</target>
        </trans-unit>
        <trans-unit id="7bee940df042298427a580292bde786d72b1f961" translate="yes" xml:space="preserve">
          <source>ExpandoMetaClass also supports a DSL/builder like notation to combine multiple definitions together. So instead of this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a75150f2e680e7cd2476562d0b1be5c8e11c97c" translate="yes" xml:space="preserve">
          <source>ExpandoMetaClass also supports runtime mixins. While &lt;code&gt;@Mixin&lt;/code&gt; allows you to mix in new behavior to classes you own and are designing, you can not easily mixin anything to types you didn't own, e.g. from third party libraries or from JDK library classes. Runtime mixins let you add a mixin on any type at runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fd187008b2b392af23ffdf251bf6e7491ffa1c8" translate="yes" xml:space="preserve">
          <source>ExpandoMetaClass differs here from the default in that it allows you to add methods after initialize has been called. This is done by setting the initialize flag internally to false and then add the methods. Since this is not thread safe it has to be done in a synchronized block. The methods to check for modification and initialization are therefore synchronized as well. Any method call done through this meta class will first check if the it is synchronized. Should this happen during a modification, then the method cannot be selected or called unless the modification is completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00116010d33340b07c8b649b0102276112e4ca64" translate="yes" xml:space="preserve">
          <source>ExpandoMetaClass is a MetaClass that behaves like an Expando, allowing the addition or replacement of methods, properties and constructors on the fly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="976841e5528977e06c1d2886c19458c410653ac9" translate="yes" xml:space="preserve">
          <source>ExpandoMetaClass.Callable</source>
          <target state="translated">ExpandoMetaClass.Callable</target>
        </trans-unit>
        <trans-unit id="8b854497f7cc35661cb82ce2403fa407fa3888cd" translate="yes" xml:space="preserve">
          <source>Expands all tabs into spaces with tabStops of size 8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b628a998410e57f4fb14c331227125c2804fcd" translate="yes" xml:space="preserve">
          <source>Expands all tabs into spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9085386cea64767c649429c22fc35cb1c9211292" translate="yes" xml:space="preserve">
          <source>Expands all tabs into spaces. Assumes the CharSequence represents a single line of text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bd0dac49b4c27706b0acf57a3cf30b3b8bd07f5" translate="yes" xml:space="preserve">
          <source>Expands all tabs into spaces. If the CharSequence has multiple lines, expand each line - restarting tab stops at the start of each line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9da53d82c1bef1645426890a9d6edaa77938110" translate="yes" xml:space="preserve">
          <source>Expects demanded call cardinalities to match demanded ranges in the sequence of recording.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58f589388f14d38455d4de4d8ff473231099b18c" translate="yes" xml:space="preserve">
          <source>Expects demanded call cardinalities to match demanded ranges. The calls are allowed to be out of the recorded sequence. If a method is demanded multiple times, the ranges are filled by order of recording.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e03bf8184a3e5b4d1ff1e31626cc8b0a70d6bf" translate="yes" xml:space="preserve">
          <source>Exposes the Groovy release information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b10b1fdb354dd1bbac0d26c971a717c8fe8f0f" translate="yes" xml:space="preserve">
          <source>ExpressionTransformer</source>
          <target state="translated">ExpressionTransformer</target>
        </trans-unit>
        <trans-unit id="6c55941b5aac4e2d7b180145d6bcd9794f094b3e" translate="yes" xml:space="preserve">
          <source>Extend class globally with category methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f221add591c5a7ac02fac2a2b08a6e3910818fe3" translate="yes" xml:space="preserve">
          <source>Extend class globally with category methods. All methods for given class and all super classes will be added to the class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021c2d424ce60ee1f10df5624898dc4782693bac" translate="yes" xml:space="preserve">
          <source>Extend object with category methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a0011838a380a70983a9d6425b40a338f994ce7" translate="yes" xml:space="preserve">
          <source>Extend object with category methods. All methods for given class and all super classes will be added to the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad113a3fe0bce8b825ad589d1bd8d12c19c07e27" translate="yes" xml:space="preserve">
          <source>Extends the method node property table by adding custom properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="354351f8a9ffa435537bb83311e948e0a4675665" translate="yes" xml:space="preserve">
          <source>Extension point for custom lookup logic of finding ClassNodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64f4f04a6c1f457f6329294d7758c591fb723c07" translate="yes" xml:space="preserve">
          <source>Extension point for custom lookup logic of finding ClassNodes. Per default this will use the CompilationUnit class loader to do a lookup on the class path and load the needed class using that loader. Or if a script is found and that script is seen as &quot;newer&quot;, the script will be used instead of the class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c33260f55bf2918f995f0bc29018b9fbe3a9fed9" translate="yes" xml:space="preserve">
          <source>Extension point for subclasses to override the metaclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64eacf1adbd94f0b246db63d3f651fcdb4e2aba7" translate="yes" xml:space="preserve">
          <source>Extension point for subclasses to override the metaclass. The default one supports the property and @ attribute notations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="495d75c1865eb686d7e16c39af5fa72e0682c8f0" translate="yes" xml:space="preserve">
          <source>ExternalStrategy</source>
          <target state="translated">ExternalStrategy</target>
        </trans-unit>
        <trans-unit id="693a7f649e187580d0219f28766db497f68f4ad8" translate="yes" xml:space="preserve">
          <source>ExternalizeMethods</source>
          <target state="translated">ExternalizeMethods</target>
        </trans-unit>
        <trans-unit id="d4109b60fcadc2df4b182adeda77b16f6ca0b891" translate="yes" xml:space="preserve">
          <source>Extracted from Verifier as it can be useful for some AST transformations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae9f5e67fa4b0038f2f21bfda5f571d769e4980" translate="yes" xml:space="preserve">
          <source>Extracts an identifier from the Antlr AST</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3601acc85208e57484586f82ad94fc37ae952bb2" translate="yes" xml:space="preserve">
          <source>Extracts the root cause of the exception, no matter how nested it is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac26bce903e51cdd150efc1aa44070834624da29" translate="yes" xml:space="preserve">
          <source>Facade to GrapeEngine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d9005e350bd13e3e5f9423cda3b023e0b4d0a3c" translate="yes" xml:space="preserve">
          <source>Facilitates the generation of statically-compiled bytecode for property access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e47b9b1021034a56b7d5f70d92d0481524e78f69" translate="yes" xml:space="preserve">
          <source>Factory</source>
          <target state="translated">Factory</target>
        </trans-unit>
        <trans-unit id="fb2e4caa94a5a391a933f954f4f7e068afd40260" translate="yes" xml:space="preserve">
          <source>Factory class to get functionality based on the VM version. The usage of this class is not for public use, only for the runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab7a16ae587ce48ed9e53b765782c6e9d08b998" translate="yes" xml:space="preserve">
          <source>Factory for aggregate bindings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2159db7a6ffccff7d7515f4055cbb355fe09130" translate="yes" xml:space="preserve">
          <source>Factory for the PreparedQueryCommand command pattern object allows subclass to supply implementations of the command class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6da0669d6691cf76eed75f115ffeeca8f62ffe33" translate="yes" xml:space="preserve">
          <source>Factory for the QueryCommand command pattern object allows subclasses to supply implementations of the command class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="900731a456cc7faa9b1fa50737f406d7945cf99c" translate="yes" xml:space="preserve">
          <source>Factory for the QueryCommand command pattern object allows subclasses to supply implementations of the command class. The factory will be used in a pattern similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca74cac773b56b8c490867253be21bc8c62f0ebd" translate="yes" xml:space="preserve">
          <source>Factory for use with &lt;a href=&quot;compilercustomizationbuilder&quot;&gt;CompilerCustomizationBuilder&lt;/a&gt;. Allows the construction of &lt;a href=&quot;../sourceawarecustomizer&quot;&gt; source aware customizers&lt;/a&gt;. Syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd9b762c3c022d54aca12aa42ee0f008a899f09" translate="yes" xml:space="preserve">
          <source>Factory method for creating &lt;code&gt;JsonDelegate&lt;/code&gt;s from closures currying an object argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd3714c661e62928e919741649037e92d48c020" translate="yes" xml:space="preserve">
          <source>Factory method for creating &lt;code&gt;JsonDelegate&lt;/code&gt;s from closures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7956bca4c0f205b4ea06b25ce9e05988dc3edc76" translate="yes" xml:space="preserve">
          <source>Factory method that returns an instance of the listener.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1377941d4ed15de4ae1e3df7df623e3067c34ad" translate="yes" xml:space="preserve">
          <source>Factory method to create a SAXParser configured to validate according to a particular schema language and a File containing the schema to validate against.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caba7d87bdf4bb4f952b4b470dc0c3ba444bea8e" translate="yes" xml:space="preserve">
          <source>Factory method to create a SAXParser configured to validate according to a particular schema language and a File containing the schema to validate against. The created SAXParser will be namespace-aware and not validate against DTDs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8a7b6c2d9c72bf2ea61c38dd27f4452b2d620d" translate="yes" xml:space="preserve">
          <source>Factory method to create a SAXParser configured to validate according to a particular schema language and an URL pointing to the schema to validate against.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab862b89eab78742d5a77e1fc8863b0875682c97" translate="yes" xml:space="preserve">
          <source>Factory method to create a SAXParser configured to validate according to a particular schema language and an URL pointing to the schema to validate against. The created SAXParser will be namespace-aware and not validate against DTDs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59bca7e1995f1c7a1df3131a8021a1516b022313" translate="yes" xml:space="preserve">
          <source>Factory method to create a SAXParser configured to validate according to a particular schema language and optionally providing the schema sources to validate with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ece35af569971c9e22fa46b3c8b2be0f55da5b12" translate="yes" xml:space="preserve">
          <source>Factory method to create a SAXParser configured to validate according to a particular schema language and optionally providing the schema sources to validate with. The created SAXParser will be namespace-aware and not validate against DTDs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50416ec426f2908ed44fbb2871bbb6211a73868f" translate="yes" xml:space="preserve">
          <source>Factory method to create a SwingBuilder, and run the the closure in it on the EDT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7dc520fd7cf4a85743acf42f7bed8fc364dd988" translate="yes" xml:space="preserve">
          <source>Factory method to create a new Map used to store the expando properties map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="755d13fcefa31d705d8d65585fe70f6dcab482d7" translate="yes" xml:space="preserve">
          <source>Factory method to create new Project instances</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386ac220de96b1ffa4832a179f88f27c304cedb3" translate="yes" xml:space="preserve">
          <source>Factory method to create the service. Should return null if the particular implementation isn't suitable because of the JDK environment (e.g. JVM version) or config settings otherwise disable the service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d185957deecfb49da4b80c04e1175a3af54760" translate="yes" xml:space="preserve">
          <source>Fallback for null+null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d145625ffa7cf29bb7026359f64d880779d389a" translate="yes" xml:space="preserve">
          <source>Fallback for null+null. The result is always a NPE. The plus(String) version will catch the case of adding a non null String to null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06ed08915d6b859c00ada6606f7b75110fab5f4c" translate="yes" xml:space="preserve">
          <source>Fast lookahead across balanced brackets of all sorts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="004d7879186f7c479a24b5176be82e14e639fadb" translate="yes" xml:space="preserve">
          <source>FastStringService</source>
          <target state="translated">FastStringService</target>
        </trans-unit>
        <trans-unit id="7b003d0f70cbaae9314d0e463969cc5b9040a178" translate="yes" xml:space="preserve">
          <source>FastStringServiceFactory</source>
          <target state="translated">FastStringServiceFactory</target>
        </trans-unit>
        <trans-unit id="237d48daedf0868df23ba22ddec2faa57f304f4a" translate="yes" xml:space="preserve">
          <source>Fastest parser, but has pointers (indexes really) to original char buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e081ff79b7624a9affd3ab23ebd2b44dff95a92a" translate="yes" xml:space="preserve">
          <source>Fastest parser, but has pointers (indexes really) to original char buffer. Care must be used if putting parse maps into a long term cache as members of map maybe index overlay objects pointing to original buffer. You can mitigate these risks by using chop and lazy chop. Chop eagerly dices up the buffer so each Value element points to a small copy of the original buffer. Lazy Chop dices up the buffer when a list get or map get is called so if an GPath expression or such is applied. You do not need chop or lazy chop if you are not putting the map into a long term cache. You do not need chop or lazy chop if you are doing object de-serialization. Recommendation is to use this for JSON buffers under 2MB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296753442373aaa08df90fbb7fde4aadff193ad4" translate="yes" xml:space="preserve">
          <source>Field Detail</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e71409d0407da073201223ef9f09544478f16547" translate="yes" xml:space="preserve">
          <source>Field Summary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b178c5f3df5fb05eb39d2cc7f007b692c4cf07" translate="yes" xml:space="preserve">
          <source>Field annotation to simplify lazy initialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b6507579722adb0bb0bfc69017281713b64ca14" translate="yes" xml:space="preserve">
          <source>Field annotation used with properties to provide an indexed getter and setter for the property. Groovy provides nice GPath syntax support for accessing indexed properties but Java tools or frameworks may expect the JavaBean style setters and getters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8b685271238adf161cffed3c91f54d97023262b" translate="yes" xml:space="preserve">
          <source>Fields</source>
          <target state="translated">Fields</target>
        </trans-unit>
        <trans-unit id="ab6b5dc3e56dbad6847dd641b05c92deecdb3bd9" translate="yes" xml:space="preserve">
          <source>Fields inherited from class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="306719594d7ba368697636765ee389601dc207cc" translate="yes" xml:space="preserve">
          <source>Fields that are enums or other &lt;code&gt;@Immutable&lt;/code&gt; classes are allowed but for an otherwise possible mutable property type, an error is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f5ff8917f9e97e58b0a5eb3019e60eb22602c59" translate="yes" xml:space="preserve">
          <source>Fields within the AST that have no explicit visibility are deemed to be properties and represented by a PropertyNode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d78948e6d28c0e13b8351f6c1a49540a8f59332" translate="yes" xml:space="preserve">
          <source>Fields within the AST that have no explicit visibility are deemed to be properties and represented by a PropertyNode. The Groovy compiler creates accessor methods and a backing field for such property nodes. During this process, all modifiers from the property are carried over to the backing field (so a property marked as &lt;code&gt;transient&lt;/code&gt; will have a &lt;code&gt;transient&lt;/code&gt; backing field) but when creating the accessor methods we don't carry over modifier values which don't make sense for methods (this includes VOLATILE and TRANSIENT) but other modifiers are carried over, for example &lt;code&gt;static&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c3cafa4db3f3e1e51b3dff4303502dbe42b7a89" translate="yes" xml:space="preserve">
          <source>File</source>
          <target state="translated">File</target>
        </trans-unit>
        <trans-unit id="30416b2b9e4ac95abe1a8eeb766d777dfc1e2ebc" translate="yes" xml:space="preserve">
          <source>File which wraps the input file and which implements Writable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a98c84f42182997438f4b6a1536905065da821fa" translate="yes" xml:space="preserve">
          <source>File.listFiles</source>
          <target state="translated">File.listFiles</target>
        </trans-unit>
        <trans-unit id="c6aac2fc1d632b4f718ce2fadb8307dfb1cffad9" translate="yes" xml:space="preserve">
          <source>File.pathSeparator</source>
          <target state="translated">File.pathSeparator</target>
        </trans-unit>
        <trans-unit id="f274908baf857ef8cdba3c2284433e50c0cc0f86" translate="yes" xml:space="preserve">
          <source>FileNotFoundException if the File was not found</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a2513009a0ab63e53bb88a6073f6e9f8732b70" translate="yes" xml:space="preserve">
          <source>FileNotFoundException if the file is not found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a4c1c252e242b2b86264cf7eb6684951760a9c" translate="yes" xml:space="preserve">
          <source>FileNotFoundException if the given directory does not exist</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1baa34e6560f1522cca6ce9d9df461092e8ec59b" translate="yes" xml:space="preserve">
          <source>FileType</source>
          <target state="translated">FileType</target>
        </trans-unit>
        <trans-unit id="26602f87bbdbe38f769ac6bc5934fcff0b8c3da8" translate="yes" xml:space="preserve">
          <source>FileVisitResult</source>
          <target state="translated">FileVisitResult</target>
        </trans-unit>
        <trans-unit id="9e53f061378e1680746abe1ee10350b322b36304" translate="yes" xml:space="preserve">
          <source>Filter lines from a URL using a closure predicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b6199e6d0745c3a6e6e418cdc3ef9a46b2fd9e2" translate="yes" xml:space="preserve">
          <source>Filter lines from a URL using a closure predicate. The closure will be passed each line as a String, and it should return &lt;code&gt;true&lt;/code&gt; if the line should be passed to the writer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c97723268f97423d5b042aa8fedb636b75520f" translate="yes" xml:space="preserve">
          <source>Filter lines from an input stream using a closure predicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e5a6d050652d49d68cef24ad2d02ff0196909df" translate="yes" xml:space="preserve">
          <source>Filter lines from an input stream using a closure predicate. The closure will be passed each line as a String, and it should return &lt;code&gt;true&lt;/code&gt; if the line should be passed to the writer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e1c6035d609d0cc773233f01e17741bd0731928" translate="yes" xml:space="preserve">
          <source>Filter methods according to visibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c70b7ce8a65e15d762dcd003e00e3a70e0426f93" translate="yes" xml:space="preserve">
          <source>Filter the lines from a reader and write them on the writer, according to a closure which returns true if the line should be included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07bdbcaf4f87811dbb6915e467f27ef7917c936c" translate="yes" xml:space="preserve">
          <source>Filter the lines from a reader and write them on the writer, according to a closure which returns true if the line should be included. Both Reader and Writer are closed after the operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d836050c1d15e3eead145b7f3e27eed9fee344d9" translate="yes" xml:space="preserve">
          <source>Filter the lines from this File, and write them to the given writer based on the given closure predicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc8656d16817914901d18327affe15194ca5a3ba" translate="yes" xml:space="preserve">
          <source>Filter the lines from this Path, and write them to the given writer based on the given closure predicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4f41d045c77ec53ac686d28799bdf0fe877f052" translate="yes" xml:space="preserve">
          <source>Filter the lines from this Reader, and return a Writable which can be used to stream the filtered lines to a destination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd62b46078c6b6e4573ce223a1ac6b2210800da9" translate="yes" xml:space="preserve">
          <source>Filter the lines from this Reader, and return a Writable which can be used to stream the filtered lines to a destination. The closure should return &lt;code&gt;true&lt;/code&gt; if the line should be passed to the writer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7484b7acd2a35a4ffce74acd21af4ef835fd073a" translate="yes" xml:space="preserve">
          <source>Filters the lines of a File and creates a Writable in return to stream the filtered lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3480e597102b604344c9b01ba64625a96af80d27" translate="yes" xml:space="preserve">
          <source>Filters the lines of a Path and creates a Writable in return to stream the filtered lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da43798a7385308952f1ae6101e92c9f5c1f0c53" translate="yes" xml:space="preserve">
          <source>Finalizable</source>
          <target state="translated">Finalizable</target>
        </trans-unit>
        <trans-unit id="a8125d2e38cbfd6ac66c644ab0f29b15be0e5039" translate="yes" xml:space="preserve">
          <source>Finally, we should clean up:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b30111ed75bff257b5a2f192657e5fcf9b22ae1" translate="yes" xml:space="preserve">
          <source>Finally, you can alternatively supply a &lt;code&gt;code&lt;/code&gt; annotation attribute in which case a closure block can be supplied which should contain the code to execute for all implemented methods. This can be seen in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6252d549e3cc9da777053a34e2a8d791ed532b9" translate="yes" xml:space="preserve">
          <source>Find a class or interface within this package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd7ba725103069054a1aa997d5f1a821221a8426" translate="yes" xml:space="preserve">
          <source>Find all traits associated with the given type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f614b6ba1dcd39e9926a1a4d19d9290871029c67" translate="yes" xml:space="preserve">
          <source>Find classes under the specified package via some classpath entry Usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17d11eed90060a132862f15065dd1ae9f0e2c628" translate="yes" xml:space="preserve">
          <source>Find files according to a base directory and an includes and excludes pattern. The include and exclude patterns conform to Ant's fileset pattern conventions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fab672f63c9ddece9ac70a73113a59f245c0c45" translate="yes" xml:space="preserve">
          <source>Find files according to a base directory and an includes and excludes pattern. The include and exclude patterns conform to regex conventions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9cae7d5c7719fa436342198b0cad9d1df62a7e9" translate="yes" xml:space="preserve">
          <source>Find the property value for the given name (ignoring case).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a397992aaf92a60d7ff752819a32bc4c85cca452" translate="yes" xml:space="preserve">
          <source>Find the right hand regex within the left hand string and return a matcher.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="462f32997058d5e34026e78ac9a2b9e4bfbe7ad2" translate="yes" xml:space="preserve">
          <source>Find which JSON value might be starting with a given character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3757519cccd0b60b99e572a62d18c9f9970e8f64" translate="yes" xml:space="preserve">
          <source>Finds a class node given a string representing the type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebb6507387d1e51cb013c9ee84b701a0bda20cc9" translate="yes" xml:space="preserve">
          <source>Finds a class node given a string representing the type. Performs a lookup in the compilation unit to check if it is done in the same source unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe00ac5a7acaf0a7d85301a10e2890b1953121b" translate="yes" xml:space="preserve">
          <source>Finds a converter that can handle the given type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1dc3af6d7993b810ea9fe71f83c857990c52b5d" translate="yes" xml:space="preserve">
          <source>Finds a converter that can handle the given type. The first converter that reports it can handle the type is returned, based on the order in which the converters were specified. A &lt;code&gt;null&lt;/code&gt; value will be returned if no suitable converter can be found for the given type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ed2652d9f4c09493c34c7981f326ef40477c81" translate="yes" xml:space="preserve">
          <source>Finds a field matching the given name in this class or a parent class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360045d575f79c3422a0f519ff33456a8e2f5020" translate="yes" xml:space="preserve">
          <source>Finds a field matching the given name in this class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1428f7531a8afa435be6a35f41c71d08354fd213" translate="yes" xml:space="preserve">
          <source>Finds a method matching the given name and parameters in this class or any parent class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc54fd7ca351b0232ddeb5c19efc4ccf01b1dfa3" translate="yes" xml:space="preserve">
          <source>Finds a method matching the given name and parameters in this class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f8aafd9d1d00ae09e1a89cf87a0a153ffa08afe" translate="yes" xml:space="preserve">
          <source>Finds all combinations of items from the given Iterable aggregate of collections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f293ccdd34e3651412ddb61db9047c3de067d7c" translate="yes" xml:space="preserve">
          <source>Finds all combinations of items from the given Iterable aggregate of collections. So, &lt;code&gt;combinations([[true, false], [true, false]])&lt;/code&gt; is &lt;code&gt;[[true, true], [false, true], [true, false], [false, false]]&lt;/code&gt; and &lt;code&gt;combinations([['a', 'b'],[1, 2, 3]])&lt;/code&gt; is &lt;code&gt;[['a', 1], ['b', 1], ['a', 2], ['b', 2], ['a', 3], ['b', 3]]&lt;/code&gt;. If a non-collection item is given, it is treated as a singleton collection, i.e. &lt;code&gt;combinations([[1, 2], 'x'])&lt;/code&gt; is &lt;code&gt;[[1, 'x'], [2, 'x']]&lt;/code&gt;. If an empty collection is found within the given collections, the result will be an empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc252e18840bb3e34bf38c9a499877cfe45e252" translate="yes" xml:space="preserve">
          <source>Finds all combinations of items from the given collections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4138edcd8e758c3ffc229ada8f75431c53a1d694" translate="yes" xml:space="preserve">
          <source>Finds all elements of the array matching the given Closure condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41221388442c7cccd5b5e35bbb64cf51ec687a6d" translate="yes" xml:space="preserve">
          <source>Finds all entries matching the closure condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a321d95a173b5e5c353b54a15ac8ac44dc3322fb" translate="yes" xml:space="preserve">
          <source>Finds all entries matching the closure condition. If the closure takes one parameter then it will be passed the Map.Entry. Otherwise if the closure should take two parameters, which will be the key and the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3689cd4c04079f23039f88ddf1815f6ab36b31f" translate="yes" xml:space="preserve">
          <source>Finds all items matching the IDENTITY Closure (i.e. matching Groovy truth).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6cd05d8dd6c63375c7393e56045219c9f71e276" translate="yes" xml:space="preserve">
          <source>Finds all items matching the closure condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d13eefcadf47ec6910298e05a1c25af952845d7" translate="yes" xml:space="preserve">
          <source>Finds all non-null subsequences of a list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="475217f0806f1459a30bd4c2ab47f6d3354ad4ae" translate="yes" xml:space="preserve">
          <source>Finds all non-null subsequences of a list. E.g. &lt;code&gt;subsequences([1, 2, 3])&lt;/code&gt; would be: [[1, 2, 3], [1, 3], [2, 3], [1, 2], [1], [2], [3]]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7918555c8bcded6520b766162ee9b54e85569388" translate="yes" xml:space="preserve">
          <source>Finds all occurrences of a compiled regular expression Pattern within a CharSequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beae284392c225e4700d14b8df40f53bb276289f" translate="yes" xml:space="preserve">
          <source>Finds all occurrences of a compiled regular expression Pattern within a CharSequence. Any matches are passed to the specified closure. The closure is expected to have the full match in the first parameter. If there are any capture groups, they will be placed in subsequent parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f2fe98f2557eb2e26faafea49b5575ead0625ca" translate="yes" xml:space="preserve">
          <source>Finds all occurrences of a regular expression string within a CharSequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf1e34ee4494737297c13f596c1477afdffaef2d" translate="yes" xml:space="preserve">
          <source>Finds all occurrences of a regular expression string within a CharSequence. Any matches are passed to the specified closure. The closure is expected to have the full match in the first parameter. If there are any capture groups, they will be placed in subsequent parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc416f83a94e65bde6cec1f0d4742d034cf9f8a3" translate="yes" xml:space="preserve">
          <source>Finds all permutations of an iterable, applies a function to each permutation and collects the result into a list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d550e1c85a6ce51b7ebdfa359e3743bbf380697b" translate="yes" xml:space="preserve">
          <source>Finds all permutations of an iterable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb090c6e962447c24445b0930e3b6207fdc11d63" translate="yes" xml:space="preserve">
          <source>Finds all values matching the closure condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec3f9217fe6035f70ac54eec5feea2590be0e6ee" translate="yes" xml:space="preserve">
          <source>Finds the elements of the array matching the IDENTITY Closure (i.e. matching Groovy truth).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bdf99123efa392358921b8a5f790ae05a4a6adc" translate="yes" xml:space="preserve">
          <source>Finds the first element in the array that matches the given closure condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96fd7359fdfe0f18d3f8bb2b649fc9ede3ed1f18" translate="yes" xml:space="preserve">
          <source>Finds the first element in the array that matches the given closure condition. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f6a5f14d12a5e930fff641eaa14a9797ad7be9a" translate="yes" xml:space="preserve">
          <source>Finds the first entry matching the closure condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1070c106561f4f56859ec230990933036ccb1f60" translate="yes" xml:space="preserve">
          <source>Finds the first entry matching the closure condition. If the closure takes two parameters, the entry key and value are passed. If the closure takes one parameter, the Map.Entry object is passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cc931fafabed1f247647b8feee79576edbcd024" translate="yes" xml:space="preserve">
          <source>Finds the first item matching the IDENTITY Closure (i.e. matching Groovy truth).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b9e1083c1aa609bf5b2e5758faa0ce30660beec" translate="yes" xml:space="preserve">
          <source>Finds the first occurrence of a compiled regular expression Pattern within a String.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5189f75edb707fffdad9ff171de9de070af868f" translate="yes" xml:space="preserve">
          <source>Finds the first occurrence of a compiled regular expression Pattern within a String. If the pattern doesn't match, null will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dea32ea2f40927172793eb337e18063ef31b1617" translate="yes" xml:space="preserve">
          <source>Finds the first occurrence of a regular expression String within a String.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68eeae6d8939d46f1b95a6d763a6db4375bf9052" translate="yes" xml:space="preserve">
          <source>Finds the first occurrence of a regular expression String within a String. If the regex doesn't match, null will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab44c1bcba81d08562eee176ca8a6f0eb8e84331" translate="yes" xml:space="preserve">
          <source>Finds the first value matching the closure condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fbb3b6b74fda5ad7b3e9248ac658dcd54a01093" translate="yes" xml:space="preserve">
          <source>Finds the first value matching the closure condition. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9f3aeec0a42782efe2dfd182d7b257f1d14a7de" translate="yes" xml:space="preserve">
          <source>Finds the items matching the IDENTITY Closure (i.e. matching Groovy truth).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e97cc5a73538ff4e48d69f7e29bbb57e8c664e1a" translate="yes" xml:space="preserve">
          <source>Finds the number of Strings matched to the given Matcher.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="914ff593b9b6621bea2579fcb5ef4c39d89242df" translate="yes" xml:space="preserve">
          <source>First implementation of an inferred type signature codec.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c98294cfe2d7d00544f4299a149640469ce05ad9" translate="yes" xml:space="preserve">
          <source>First the request is parsed for the source file uri. If the specified file could not be found or can not be read an error message is sent as response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5752d98ce998f68b2ac60e41fc58a31f2a237564" translate="yes" xml:space="preserve">
          <source>First you need to set up your sql instance. There are several constructors and a few &lt;code&gt;newInstance&lt;/code&gt; factory methods available to do this. In simple cases, you can just provide the necessary details to set up a connection (e.g. for hsqldb):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781efc4b632bed2f98137f416a1f0228e2dacd2c" translate="yes" xml:space="preserve">
          <source>First, it delegates to the super visitClass so we can collect the relevant annotations in an AST tree walk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdbd6f9d584131c8f8e8280f1a80df4ef824a24b" translate="yes" xml:space="preserve">
          <source>Flag corresponding to &lt;code&gt;RetentionPolicy.CLASS&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4970a5be725bdffd903b8130ab288c18c7862a39" translate="yes" xml:space="preserve">
          <source>Flag corresponding to &lt;code&gt;RetentionPolicy.CLASS&lt;/code&gt;. This is the default when no &lt;code&gt;RetentionPolicy&lt;/code&gt; annotations are present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39aae20dfc58e6858a611e87ff50411ffa53f7e1" translate="yes" xml:space="preserve">
          <source>Flag corresponding to &lt;code&gt;RetentionPolicy.RUNTIME&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d09cd916ce1b0f5bef2f1d52f458ba0a259389c" translate="yes" xml:space="preserve">
          <source>Flag corresponding to &lt;code&gt;RetentionPolicy.SOURCE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb3469b2abdcb606292f136bf24febe5543c844" translate="yes" xml:space="preserve">
          <source>Flag to indicate if the command should be hidden or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1c4d3b2852b93cadff2e4f70ac0fb837aaf471" translate="yes" xml:space="preserve">
          <source>Flatten a Collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="195c21ab5a36e33b1cca4941d5088af3f92824ed" translate="yes" xml:space="preserve">
          <source>Flatten a Collection. This Collection and any nested arrays or collections have their contents (recursively) added to the new collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa91102f5501cd9d3003a72c52202dad8403c84" translate="yes" xml:space="preserve">
          <source>Flatten a List.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632904fdcc4bd2b1d0d0f65ff85018ad35589f56" translate="yes" xml:space="preserve">
          <source>Flatten a List. This List and any nested arrays or collections have their contents (recursively) added to the new List.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e909698ff865ba19778a345f510e350c5a59740" translate="yes" xml:space="preserve">
          <source>Flatten a Set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d717d8706431ba230e222e9706b79ca9a28ca48" translate="yes" xml:space="preserve">
          <source>Flatten a Set. This Set and any nested arrays or collections have their contents (recursively) added to the new Set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48b49963c7986ce277f2250df20c1a250066c631" translate="yes" xml:space="preserve">
          <source>Flatten a SortedSet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d00b0197246bfa4f55af0f6debb6a0f2d6879e4" translate="yes" xml:space="preserve">
          <source>Flatten a SortedSet. This SortedSet and any nested arrays or collections have their contents (recursively) added to the new SortedSet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe4a70c9421a41085d7e7718877755af2cb02248" translate="yes" xml:space="preserve">
          <source>Flatten an Iterable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb19e0ed1cfbf723af5f0e87a84867509ab06fde" translate="yes" xml:space="preserve">
          <source>Flatten an Iterable. This Iterable and any nested arrays or collections have their contents (recursively) added to the new collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c56039c1ec2eb82073ff28d770dc28a10b0efcc1" translate="yes" xml:space="preserve">
          <source>Flatten an Iterable. This Iterable and any nested arrays or collections have their contents (recursively) added to the new collection. For any non-Array, non-Collection object which represents some sort of collective type, the supplied closure should yield the contained items; otherwise, the closure should just return any element which corresponds to a leaf.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ae07dda6bf925c297f3b5869b3a9ca1415a226" translate="yes" xml:space="preserve">
          <source>Flatten an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b79662b293dd2ee3e1455320360ec81c5283252" translate="yes" xml:space="preserve">
          <source>Flatten an array. This array and any nested arrays or collections have their contents (recursively) added to the new collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21a9aa11ba043ca3158fd391cbe5f5d2a5ccaa9" translate="yes" xml:space="preserve">
          <source>Flattens this ConfigObject populating the results into the target Map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64435fd82de7b1d614dfb9844848a48b14c6cd2c" translate="yes" xml:space="preserve">
          <source>Float</source>
          <target state="translated">Float</target>
        </trans-unit>
        <trans-unit id="2acc9d679d41e36b64874f34bdd9cce2b2823f76" translate="yes" xml:space="preserve">
          <source>FloatingPoint (Double and Float) NumberMath operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa4a2b4ab20d891b2e978beb358548470e8be362" translate="yes" xml:space="preserve">
          <source>Flush both output streams.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc3fd57810a894c7625b9a523573427c6dd958a" translate="yes" xml:space="preserve">
          <source>Flush the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a757814f04a0bf3b9682bf921e012db1bf28108" translate="yes" xml:space="preserve">
          <source>Flushing this writer has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3421c2d32b6f3e0bd762d01f2cc78859ea3181b6" translate="yes" xml:space="preserve">
          <source>Follow the most conventional pattern, returns the parentName unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="201a6b3053cc1422d2c3670b62616221d2290929" translate="yes" xml:space="preserve">
          <source>Foo</source>
          <target state="translated">Foo</target>
        </trans-unit>
        <trans-unit id="99a761d5d5f808a1e330cd6f496b137f291455c9" translate="yes" xml:space="preserve">
          <source>For CompilationFailedException.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66535ed6bc26c0703e58a4b6c4f5978fbace3eaa" translate="yes" xml:space="preserve">
          <source>For Exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="922a805583ae216f1d8ceecf1d69ef9204679286" translate="yes" xml:space="preserve">
          <source>For GroovyException.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91a6a8abe057245b6d7a17a0ef41ddb2b9a234e2" translate="yes" xml:space="preserve">
          <source>For ReaderSources that can choose a parent class, a base that provides common functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc117c6e6a7f4c3f343be9be66f2debb20cfa5e" translate="yes" xml:space="preserve">
          <source>For a NumberRange with step size 1, creates a new NumberRange with the same &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; as this NumberRange but with a step size of &lt;code&gt;stepSize&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f0bb870bfc355ba1672b240ee78d82f9c9c4bbf" translate="yes" xml:space="preserve">
          <source>For a given classnode, fills in the supplied map with the parameterized types it defines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="996eb170f894e0f3e8da1a04b2e5c20c24c252ee" translate="yes" xml:space="preserve">
          <source>For a method node potentially representing a property, returns the name of the property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="638b4714d0ae808978545e5e7fa32bb867e59fde" translate="yes" xml:space="preserve">
          <source>For advanced usage, the class provides numerous extension points for overriding the facade behavior associated with the various aspects of managing the interaction with the underlying database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be4d0920778521a0d2cf6de22d08dbeb5a3641e3" translate="yes" xml:space="preserve">
          <source>For an example using group matches,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5f433ca2e96a9bba213a9269154366ee81d93c4" translate="yes" xml:space="preserve">
          <source>For an example using no group match,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acc276b7154180c1e5028dd39926b8b4f763c6dc" translate="yes" xml:space="preserve">
          <source>For another example using group matches,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb1dcbd2068d937f747ba4f99302b363155aad4" translate="yes" xml:space="preserve">
          <source>For any given Collection property, several methods will be written into the enclosing class during the compile phase. These changes are visible from Java or other languages. The List is intended to hold listeners of some sort, and the methods addListener, removeListener, and getListeners are all added to the class. The actual methods names depend on the generic type of the collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7da5d301d27f633b27184658ba0aff455ba24fda" translate="yes" xml:space="preserve">
          <source>For backwards compatibility reasons, if a custom &lt;code&gt;writer&lt;/code&gt; is set, this sets both the &lt;a href=&quot;#writer&quot;&gt;writer&lt;/a&gt; and the &lt;a href=&quot;#errorWriter&quot;&gt;errorWriter&lt;/a&gt; to the specified writer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cebcbda956ea0a9c6028c21820aec0c10c623c9b" translate="yes" xml:space="preserve">
          <source>For backwards compatibility with Apache Commons CLI, set this property to &lt;code&gt;true&lt;/code&gt; if the parser should recognize long options with both a single hyphen and a double hyphen prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b777eef970131170bef9740c6a40f06703c0b377" translate="yes" xml:space="preserve">
          <source>For backwards compatibility with Apache Commons CLI, set this property to &lt;code&gt;true&lt;/code&gt; if the parser should recognize long options with both a single hyphen and a double hyphen prefix. The default is &lt;code&gt;false&lt;/code&gt;, so only long options with a double hypen prefix (&lt;code&gt;--option&lt;/code&gt;) are recognized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a919bff782be50f389453f0b7af10c725553a78f" translate="yes" xml:space="preserve">
          <source>For commodity, multiple extension classes may be defined in a single module, including classes used to define new static methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0ea17ae86254e11f825888507143217be4b6a57" translate="yes" xml:space="preserve">
          <source>For compatibility with pre 2.5 compiled classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b3733d25b4b1c21992d8a00c6ae07f262e5a10" translate="yes" xml:space="preserve">
          <source>For compatibility with previous versions, this registry implements the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Map.html&quot;&gt;Map&lt;/a&gt; interface. All &lt;code&gt;null&lt;/code&gt; keys and values will be ignored and no exception thrown, except where noted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f510e924176919a989078d1be6b81c08d63c2d32" translate="yes" xml:space="preserve">
          <source>For convenience, this class implements several methods that you may extend to customize the behaviour of this utility. For example, if you want to apply a customizer only for classes matching the '.foo' file extension, then you only have to override the &lt;a href=&quot;#acceptExtension(java.lang.String)&quot;&gt;acceptExtension(String)&lt;/a&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0672cd4b0b2e2107c286074754aa54942de09d" translate="yes" xml:space="preserve">
          <source>For crude customization, you can add your own methods to your own version and place it on the classpath ahead of this one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c94e04871efccaabde59698c910d2474a775762" translate="yes" xml:space="preserve">
          <source>For everything else.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab1832542628ae1f0393a802bbccad89da4dcebf" translate="yes" xml:space="preserve">
          <source>For example (with some replaceAll variants thrown in for comparison purposes),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac499bf974f268a2a46b30442215844dd26b0aa" translate="yes" xml:space="preserve">
          <source>For example, if the pattern doesn't match the result is null:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="626487541f3956a88dac4c942670f339dd602f48" translate="yes" xml:space="preserve">
          <source>For example, if the pattern doesn't match, it returns an empty list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e23e22dc7f01c8fcd130a6ebc1f11300f2ce9f" translate="yes" xml:space="preserve">
          <source>For example, if the pattern doesn't match, the result is null:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9e31982945095620a05bcdad0c852e286006ce7" translate="yes" xml:space="preserve">
          <source>For example, if the regex doesn't match the result is null:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbfec2e0d5e1d483f8a5530a088e0b0d9b31a80a" translate="yes" xml:space="preserve">
          <source>For example, if the regex doesn't match, it returns an empty list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d0963c21a921f7d48342bb043373f494b643fa" translate="yes" xml:space="preserve">
          <source>For example, if the system timezone is GMT, &lt;code&gt;new Date(0).format('MM/dd/yy')&lt;/code&gt; would return the string &lt;code&gt;&quot;01/01/70&quot;&lt;/code&gt;. See documentation for &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html&quot;&gt;SimpleDateFormat&lt;/a&gt; for format pattern use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf2845dcdd7d4b2d401e3a64f1a34bb1b0511649" translate="yes" xml:space="preserve">
          <source>For example, in the example above if we change the delegate definition to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa2edc9c0aee29005d9f186c110f9c371240246" translate="yes" xml:space="preserve">
          <source>For example, it will turn a sequence of &lt;code&gt;'\'&lt;/code&gt; and &lt;code&gt;'n'&lt;/code&gt; into a newline character, unless the &lt;code&gt;'\'&lt;/code&gt; is preceded by another &lt;code&gt;'\'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3be247ff8b1bc83f5321aede934ba311891bc4d" translate="yes" xml:space="preserve">
          <source>For example, to define a module adding methods to the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html&quot;&gt;String&lt;/a&gt; class, you can write a helper class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c4afec6dd6eb8f1226b6ebf9df73df955b93320" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;
 def d = new Date(0)
 def tz = TimeZone.getTimeZone('GMT')
 println d.format('dd/MMM/yyyy', tz)
 &lt;/code&gt; would return the string &lt;code&gt;&quot;01/Jan/1970&quot;&lt;/code&gt;. See documentation for &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html&quot;&gt;SimpleDateFormat&lt;/a&gt; for format pattern use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea5b8599580cd634d8243a40b1261522e1d283c" translate="yes" xml:space="preserve">
          <source>For examples,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="990c9d03771faa080a01e799af24080c90823b97" translate="yes" xml:space="preserve">
          <source>For general usage, when debug output is required, it is better to use the logging facility instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1ebf54fba54af979d0fc04122fd285c758e406" translate="yes" xml:space="preserve">
          <source>For integrity and performance reasons, you may wish to consider executing your batch command(s) within a transaction:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50db753621ec06865fa82cb475ba7cf56d99bda7" translate="yes" xml:space="preserve">
          <source>For internal use only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d23e5d342bb5633172411fd211c1f73b663436" translate="yes" xml:space="preserve">
          <source>For internal use only. This flag is used by compiler internals and should probably be converted to a node metadata in future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d4dcd747f97710e8acbbb004b9f89e1f8317f1c" translate="yes" xml:space="preserve">
          <source>For lookahead only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8bde2e0d4b13171c6781f4652e08d7ce36bed2d" translate="yes" xml:space="preserve">
          <source>For lookahead only. Fast approximate parse of an argumentLabel followed by a colon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c85daea5d8a046c68d4d6df64a06faeaf8f792" translate="yes" xml:space="preserve">
          <source>For manual verification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="499aeb57a7f856bafb1ac2974c07f931b49af26b" translate="yes" xml:space="preserve">
          <source>For more control over Process construction you can use &lt;code&gt;java.lang.ProcessBuilder&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2f38e9aab70deaa57edf8c9d4bdd3cb344cf615" translate="yes" xml:space="preserve">
          <source>For more information see &lt;a href=&quot;../../../../groovy/transform/withreadlock&quot;&gt;WithReadLock&lt;/a&gt; and &lt;a href=&quot;../../../../groovy/transform/withwritelock&quot;&gt;WithWriteLock&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="119f72aedd11bb65c7de8e0b1b704e5e7ef916ff" translate="yes" xml:space="preserve">
          <source>For strategies which create a builder helper class that creates the instance, the method name to call to create the instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3dd96c958bf26d9b03bfe87c0872ae84dd7fae3" translate="yes" xml:space="preserve">
          <source>For strategies which create a builder helper class that creates the instance, the method name to call to create the instance. Default is determined by the strategy, e.g. &lt;em&gt;build&lt;/em&gt; or &lt;em&gt;create&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f72199b214a23179bcdad0001791a23871196ef8" translate="yes" xml:space="preserve">
          <source>For strategies which create a builder helper class, the class name to use for the helper class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5282906065098b4264ca249a88f6d3d20a3a57f3" translate="yes" xml:space="preserve">
          <source>For strategies which create a builder helper class, the class name to use for the helper class. Not used if using &lt;code&gt;forClass&lt;/code&gt; since in such cases the builder class is explicitly supplied. Default is determined by the strategy, e.g. &lt;em&gt;TargetClass&lt;/em&gt; + &quot;Builder&quot; or &lt;em&gt;TargetClass&lt;/em&gt; + &quot;Initializer&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aa8ece869b2a3bf59d7f01106c24f4eed3cf576" translate="yes" xml:space="preserve">
          <source>For the &quot;Python-style&quot; conversions you can either specify each class name on which you want them to apply, or supply a pattern to match class names against. The transformation then works by matching the basename of the provided classes to any similarly named instance method calls not specifically bound to an object, i.e. associated with the 'this' object. In other words &lt;code&gt;Leaf(&quot;A&quot;)&lt;/code&gt; would be transformed to &lt;code&gt;new Leaf(&quot;A&quot;)&lt;/code&gt; but &lt;code&gt;x.Leaf(&quot;A&quot;)&lt;/code&gt; would not be touched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540ff3906d5e7a53d2d64b3ed9b55c48bf17f2c3" translate="yes" xml:space="preserve">
          <source>For the above example, the generated constructor will be something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2096f495c6538db62d83da386f5545d35cb4530d" translate="yes" xml:space="preserve">
          <source>For the application needs, it is possible to provide more helper methods by extending this class and configuring the base template class using the &lt;a href=&quot;templateconfiguration#setBaseTemplateClass(Class)&quot;&gt;TemplateConfiguration.setBaseTemplateClass&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8339986bb02349dcec03fd93c256ce1abe80723" translate="yes" xml:space="preserve">
          <source>For this operation, consider the operands independently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ea67dc18d32e2e53e44b4d96e6bd1a1f5351fb0" translate="yes" xml:space="preserve">
          <source>For this operation, consider the operands independently. Throw an exception if the right operand (shift distance) is not an integral type. For the left operand (shift value) also require an integral type, but do NOT promote from Integer to Long. This is consistent with Java, and makes sense for the shift operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5084da07b90fc8deede95ebab329c6c1e5daab8f" translate="yes" xml:space="preserve">
          <source>For those reasons, the &lt;a href=&quot;closureparams&quot;&gt;ClosureParams&lt;/a&gt; annotation takes these arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1351aa0b899c800d5c813a725aa6fa5c50686a8" translate="yes" xml:space="preserve">
          <source>For two QNames to be considered equal requires that both localPart and namespaceURI must be equal. This method uses &lt;code&gt;String.equals&lt;/code&gt; to check equality of localPart and namespaceURI. Any class that extends QName is required to satisfy this equality contract. If the supplied object is a String, then it is split in two on the last colon and the first half is compared against the prefix || namespaceURI and the second half is compared against the localPart i.e. assert new QName(&quot;namespace&quot;,&quot;localPart&quot;).equals(&quot;namespace:localPart&quot;) Intended Usage: for gpath accessors, e.g. root.'urn:mynamespace:node' Warning: this equivalence is not commutative, i.e. qname.equals(string) may be true/false but string.equals(qname) is always false</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d8c8c01b80319810e28a852a6b6d0ccc447c2ef" translate="yes" xml:space="preserve">
          <source>For two QNames to be considered matching requires that both localPart and namespaceURI must be equal or one of them is a wildcard. If the supplied object is a String, then it is split in two on the last colon and the first half is matched against the prefix || namespaceURI and the second half is matched against the localPart</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5470bf0d77ed36fad0a6703f605df0149938ca6c" translate="yes" xml:space="preserve">
          <source>Force a memory synchronization that will cause all readers to see table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c92ec9578e4e2f8020529b08753e9260745a95" translate="yes" xml:space="preserve">
          <source>Force a memory synchronization that will cause all readers to see table. Call only when already holding main sync lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c7ef2a97614d545e7c2ae53f7c6ba45ced4c156" translate="yes" xml:space="preserve">
          <source>Format a calendar instance that is parseable from JavaScript, according to ISO-8601.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e9a90109b1ff32c04defd2557b7bf64f11a502" translate="yes" xml:space="preserve">
          <source>Format a date that is parseable from JavaScript, according to ISO-8601.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44501247b3a941f448efb69cf147d5b5d0aeed34" translate="yes" xml:space="preserve">
          <source>Format a message (based on &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/text/MessageFormat.html&quot;&gt;MessageFormat&lt;/a&gt; using the message from the resource bundles using the given code as a pattern and the given objects as arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="300e7d36ed19d7160e34259b142e924a0b6788b3" translate="yes" xml:space="preserve">
          <source>Format the given number suitable for rendering as a line number column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba6d80258b1b9a5afe7fb5ccad2d929bd131131" translate="yes" xml:space="preserve">
          <source>Formats a type name into a human readable version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8dc720324648925990e7d71020e6881d3ecc79c" translate="yes" xml:space="preserve">
          <source>Formats a type name into a human readable version. For arrays, appends &quot;[]&quot; to the formatted type name of the component. For unit class nodes, uses the class node name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b777d186ce3b996999bab8189f491f7b653070c" translate="yes" xml:space="preserve">
          <source>Formats the node and writes it to the specified &lt;code&gt;Writer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b9982e500d7149977e785b942a35585dc3c3341" translate="yes" xml:space="preserve">
          <source>Formats the node and writes it to the specified &lt;code&gt;Writer&lt;/code&gt;. The indent is prepended to each output line, and is increased for each recursion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b340af54376c1e1d1783e9db21de07c0052b0b6" translate="yes" xml:space="preserve">
          <source>Formats the node as a &lt;code&gt;String&lt;/code&gt; and returns it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="867e710525b2f288a1a1803f149d537af7552019" translate="yes" xml:space="preserve">
          <source>Formats this date in the provided, localized &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/FormatStyle.html&quot;&gt;FormatStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db12049dbe2ed8565418432669b9201f4c0cd58a" translate="yes" xml:space="preserve">
          <source>Formats this date with the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_LOCAL_DATE&quot;&gt;DateTimeFormatter.ISO_LOCAL_DATE&lt;/a&gt; formatter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743b4c4dd848c0de7e83bdc380c4e30c262e056f" translate="yes" xml:space="preserve">
          <source>Formats this date with the provided &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html&quot;&gt;DateTimeFormatter&lt;/a&gt; pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa829a727e7e40159e1fc8add938e4c277a7c201" translate="yes" xml:space="preserve">
          <source>Formats this date/time in the provided, localized &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/FormatStyle.html&quot;&gt;FormatStyle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18a5cf5da4ac4d103297a7930a19bb6702075445" translate="yes" xml:space="preserve">
          <source>Formats this date/time with the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_LOCAL_DATE&quot;&gt;DateTimeFormatter.ISO_LOCAL_DATE&lt;/a&gt; formatter and appends the zone's short name, e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c37b42b55c8154bf6b7effe1b876d2f24336d21" translate="yes" xml:space="preserve">
          <source>Formats this date/time with the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_LOCAL_DATE&quot;&gt;DateTimeFormatter.ISO_LOCAL_DATE&lt;/a&gt; formatter and appends the zone's short name, e.g. &lt;code&gt;2018-03-10EST&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d5155e1d848b12837180c9ed5786b5553ee6024" translate="yes" xml:space="preserve">
          <source>Formats this date/time with the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_LOCAL_DATE&quot;&gt;DateTimeFormatter.ISO_LOCAL_DATE&lt;/a&gt; formatter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb18d0a72961b19aafa6592bb18fb33f43d50b0" translate="yes" xml:space="preserve">
          <source>Formats this date/time with the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_LOCAL_DATE_TIME&quot;&gt;DateTimeFormatter.ISO_LOCAL_DATE_TIME&lt;/a&gt; formatter and appends the zone's short name, e.g.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
