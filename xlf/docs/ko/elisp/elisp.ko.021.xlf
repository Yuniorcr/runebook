<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="elisp">
    <body>
      <group id="elisp">
        <trans-unit id="db140447ee8174a2469e79f3a449481bef9eb597" translate="yes" xml:space="preserve">
          <source>When you have to look at the contents of a key sequence that might be a string, use &lt;code&gt;listify-key-sequence&lt;/code&gt; (see &lt;a href=&quot;event-input-misc#Event-Input-Misc&quot;&gt;Event Input Misc&lt;/a&gt;) first, to convert it to a list.</source>
          <target state="translated">When you have to look at the contents of a key sequence that might be a string, use &lt;code&gt;listify-key-sequence&lt;/code&gt; (see &lt;a href=&quot;event-input-misc#Event-Input-Misc&quot;&gt;Event Input Misc&lt;/a&gt;) first, to convert it to a list.</target>
        </trans-unit>
        <trans-unit id="fa1c1f94288fba61082beac1e047b620c6c5c4e8" translate="yes" xml:space="preserve">
          <source>When you insert a new item in an existing menu, you probably want to put it in a particular place among the menu&amp;rsquo;s existing items. If you use &lt;code&gt;define-key&lt;/code&gt; to add the item, it normally goes at the front of the menu. To put it elsewhere in the menu, use &lt;code&gt;define-key-after&lt;/code&gt;:</source>
          <target state="translated">When you insert a new item in an existing menu, you probably want to put it in a particular place among the menu&amp;rsquo;s existing items. If you use &lt;code&gt;define-key&lt;/code&gt; to add the item, it normally goes at the front of the menu. To put it elsewhere in the menu, use &lt;code&gt;define-key-after&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4ace45c3d17a404d7ddc45441ae3c56685ab458e" translate="yes" xml:space="preserve">
          <source>When you insert text directly at the place where a marker points, there are two possible ways to relocate that marker: it can point before the inserted text, or point after it. You can specify which one a given marker should do by setting its &lt;em&gt;insertion type&lt;/em&gt;. Note that use of &lt;code&gt;insert-before-markers&lt;/code&gt; ignores markers&amp;rsquo; insertion types, always relocating a marker to point after the inserted text.</source>
          <target state="translated">When you insert text directly at the place where a marker points, there are two possible ways to relocate that marker: it can point before the inserted text, or point after it. You can specify which one a given marker should do by setting its &lt;em&gt;insertion type&lt;/em&gt;. Note that use of &lt;code&gt;insert-before-markers&lt;/code&gt; ignores markers&amp;rsquo; insertion types, always relocating a marker to point after the inserted text.</target>
        </trans-unit>
        <trans-unit id="1376d36136c03ac766ebe953a082636da9bce32c" translate="yes" xml:space="preserve">
          <source>When you introduce a new group into Emacs, use the &lt;code&gt;:version&lt;/code&gt; keyword in the &lt;code&gt;defgroup&lt;/code&gt;; then you need not use it for the individual members of the group.</source>
          <target state="translated">When you introduce a new group into Emacs, use the &lt;code&gt;:version&lt;/code&gt; keyword in the &lt;code&gt;defgroup&lt;/code&gt; ; then you need not use it for the individual members of the group.</target>
        </trans-unit>
        <trans-unit id="dc2f909a65ee1114b4a704963febe2d4ed0ef40c" translate="yes" xml:space="preserve">
          <source>When you invoke command</source>
          <target state="translated">When you invoke command</target>
        </trans-unit>
        <trans-unit id="9e70d8400e251f1195c63d2550e6a672fed619c6" translate="yes" xml:space="preserve">
          <source>When you load or reload files, bear in mind that the &lt;code&gt;load&lt;/code&gt; and &lt;code&gt;load-library&lt;/code&gt; functions automatically load a byte-compiled file rather than a non-compiled file of similar name. If you rewrite a file that you intend to save and reinstall, you need to byte-compile the new version; otherwise Emacs will load the older, byte-compiled file instead of your newer, non-compiled file! If that happens, the message displayed when loading the file includes, &amp;lsquo;</source>
          <target state="translated">When you load or reload files, bear in mind that the &lt;code&gt;load&lt;/code&gt; and &lt;code&gt;load-library&lt;/code&gt; functions automatically load a byte-compiled file rather than a non-compiled file of similar name. If you rewrite a file that you intend to save and reinstall, you need to byte-compile the new version; otherwise Emacs will load the older, byte-compiled file instead of your newer, non-compiled file! If that happens, the message displayed when loading the file includes, &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="2e43dc75880c5e42db7ee1d9da0158991a0b03f8" translate="yes" xml:space="preserve">
          <source>When you move to this item with &lt;code&gt;widget-forward&lt;/code&gt; or &lt;code&gt;widget-backward&lt;/code&gt;, it will display the string &lt;var&gt;motion-doc&lt;/var&gt; in the echo area. In addition, &lt;var&gt;motion-doc&lt;/var&gt; is used as the mouse &lt;code&gt;help-echo&lt;/code&gt; string and may actually be a function or form evaluated to yield a help string. If it is a function, it is called with one argument, the widget.</source>
          <target state="translated">When you move to this item with &lt;code&gt;widget-forward&lt;/code&gt; or &lt;code&gt;widget-backward&lt;/code&gt; , it will display the string &lt;var&gt;motion-doc&lt;/var&gt; in the echo area. In addition, &lt;var&gt;motion-doc&lt;/var&gt; is used as the mouse &lt;code&gt;help-echo&lt;/code&gt; string and may actually be a function or form evaluated to yield a help string. If it is a function, it is called with one argument, the widget.</target>
        </trans-unit>
        <trans-unit id="6f87e825d0eb5cf4f1104ba14fafbc8b0f0b6158" translate="yes" xml:space="preserve">
          <source>When you need to modify a function defined in another library, or when you need to modify a hook like &lt;code&gt;&lt;var&gt;foo&lt;/var&gt;-function&lt;/code&gt;, a process filter, or basically any variable or object field which holds a function value, you can use the appropriate setter function, such as &lt;code&gt;fset&lt;/code&gt; or &lt;code&gt;defun&lt;/code&gt; for named functions, &lt;code&gt;setq&lt;/code&gt; for hook variables, or &lt;code&gt;set-process-filter&lt;/code&gt; for process filters, but those are often too blunt, completely throwing away the previous value.</source>
          <target state="translated">When you need to modify a function defined in another library, or when you need to modify a hook like &lt;code&gt;&lt;var&gt;foo&lt;/var&gt;-function&lt;/code&gt; , a process filter, or basically any variable or object field which holds a function value, you can use the appropriate setter function, such as &lt;code&gt;fset&lt;/code&gt; or &lt;code&gt;defun&lt;/code&gt; for named functions, &lt;code&gt;setq&lt;/code&gt; for hook variables, or &lt;code&gt;set-process-filter&lt;/code&gt; for process filters, but those are often too blunt, completely throwing away the previous value.</target>
        </trans-unit>
        <trans-unit id="a39b71d5d4babed1c190cd88fc543b454b1a30a9" translate="yes" xml:space="preserve">
          <source>When you run Emacs, it enters the &lt;em&gt;editor command loop&lt;/em&gt; almost immediately. This loop reads key sequences, executes their definitions, and displays the results. In this chapter, we describe how these things are done, and the subroutines that allow Lisp programs to do them.</source>
          <target state="translated">When you run Emacs, it enters the &lt;em&gt;editor command loop&lt;/em&gt; almost immediately. This loop reads key sequences, executes their definitions, and displays the results. In this chapter, we describe how these things are done, and the subroutines that allow Lisp programs to do them.</target>
        </trans-unit>
        <trans-unit id="bcb11ba33e37d812266385875ce1818f6c3b5d98" translate="yes" xml:space="preserve">
          <source>When you signal an error, you specify an &lt;em&gt;error symbol&lt;/em&gt; to specify the kind of error you have in mind. Each error has one and only one error symbol to categorize it. This is the finest classification of errors defined by the Emacs Lisp language.</source>
          <target state="translated">When you signal an error, you specify an &lt;em&gt;error symbol&lt;/em&gt; to specify the kind of error you have in mind. Each error has one and only one error symbol to categorize it. This is the finest classification of errors defined by the Emacs Lisp language.</target>
        </trans-unit>
        <trans-unit id="b793737cfa50e1afd7288a0b029662a6368a275c" translate="yes" xml:space="preserve">
          <source>When you start Emacs, it normally attempts to load your &lt;em&gt;init file&lt;/em&gt;. This is either a file named</source>
          <target state="translated">When you start Emacs, it normally attempts to load your &lt;em&gt;init file&lt;/em&gt;. This is either a file named</target>
        </trans-unit>
        <trans-unit id="c8ff56c98c659b4c2a82cbf9d308d3140f1a11bd" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;:group&lt;/code&gt; in a &lt;code&gt;defgroup&lt;/code&gt;, it makes the new group a subgroup of &lt;var&gt;group&lt;/var&gt;.</source>
          <target state="translated">When you use &lt;code&gt;:group&lt;/code&gt; in a &lt;code&gt;defgroup&lt;/code&gt; , it makes the new group a subgroup of &lt;var&gt;group&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="9394c249d0193b7bb56563b934fca6beb80699b7" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;compute-motion&lt;/code&gt; for the minibuffer, you need to use &lt;code&gt;minibuffer-prompt-width&lt;/code&gt; to get the horizontal position of the beginning of the first screen line. See &lt;a href=&quot;minibuffer-contents#Minibuffer-Contents&quot;&gt;Minibuffer Contents&lt;/a&gt;.</source>
          <target state="translated">When you use &lt;code&gt;compute-motion&lt;/code&gt; for the minibuffer, you need to use &lt;code&gt;minibuffer-prompt-width&lt;/code&gt; to get the horizontal position of the beginning of the first screen line. See &lt;a href=&quot;minibuffer-contents#Minibuffer-Contents&quot;&gt;Minibuffer Contents&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="9553413c3f23b971e4db382ac958c06f8af34a3d" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;frame-parameter&lt;/code&gt; to query the value of either of these two frame parameters, the return value is always an integer. When using &lt;code&gt;set-frame-parameter&lt;/code&gt;, passing a &lt;code&gt;nil&lt;/code&gt; value imposes an actual default value of 8 pixels.</source>
          <target state="translated">When you use &lt;code&gt;frame-parameter&lt;/code&gt; to query the value of either of these two frame parameters, the return value is always an integer. When using &lt;code&gt;set-frame-parameter&lt;/code&gt; , passing a &lt;code&gt;nil&lt;/code&gt; value imposes an actual default value of 8 pixels.</target>
        </trans-unit>
        <trans-unit id="44103a26b593a1a072ebe4f6ac9f1f8d807f5700" translate="yes" xml:space="preserve">
          <source>When you use the command</source>
          <target state="translated">When you use the command</target>
        </trans-unit>
        <trans-unit id="b8ad75dd6a50d9891847f305b97c9d0dcb7f39a5" translate="yes" xml:space="preserve">
          <source>When you use the read syntax &amp;lsquo;</source>
          <target state="translated">When you use the read syntax &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="b41758871c41b9129acbafdd3508fda1aa612647" translate="yes" xml:space="preserve">
          <source>When you visit a file whose expanded file name (see &lt;a href=&quot;file-name-expansion#File-Name-Expansion&quot;&gt;File Name Expansion&lt;/a&gt;), with version numbers and backup suffixes removed using &lt;code&gt;file-name-sans-versions&lt;/code&gt; (see &lt;a href=&quot;file-name-components#File-Name-Components&quot;&gt;File Name Components&lt;/a&gt;), matches a &lt;var&gt;regexp&lt;/var&gt;, &lt;code&gt;set-auto-mode&lt;/code&gt; calls the corresponding &lt;var&gt;mode-function&lt;/var&gt;. This feature enables Emacs to select the proper major mode for most files.</source>
          <target state="translated">When you visit a file whose expanded file name (see &lt;a href=&quot;file-name-expansion#File-Name-Expansion&quot;&gt;File Name Expansion&lt;/a&gt;), with version numbers and backup suffixes removed using &lt;code&gt;file-name-sans-versions&lt;/code&gt; (see &lt;a href=&quot;file-name-components#File-Name-Components&quot;&gt;File Name Components&lt;/a&gt;), matches a &lt;var&gt;regexp&lt;/var&gt; , &lt;code&gt;set-auto-mode&lt;/code&gt; calls the corresponding &lt;var&gt;mode-function&lt;/var&gt; . This feature enables Emacs to select the proper major mode for most files.</target>
        </trans-unit>
        <trans-unit id="c40090d6c39f85f238b391a1e2407892e201a9c6" translate="yes" xml:space="preserve">
          <source>When you want to get rid of a window used for displaying a buffer, you can call &lt;code&gt;delete-window&lt;/code&gt; or &lt;code&gt;delete-windows-on&lt;/code&gt; (see &lt;a href=&quot;deleting-windows#Deleting-Windows&quot;&gt;Deleting Windows&lt;/a&gt;) to remove that window from its frame. If the buffer is shown on a separate frame, you might want to call &lt;code&gt;delete-frame&lt;/code&gt; (see &lt;a href=&quot;deleting-frames#Deleting-Frames&quot;&gt;Deleting Frames&lt;/a&gt;) instead. If, on the other hand, a window has been reused for displaying the buffer, you might prefer showing the buffer previously shown in that window, by calling the function &lt;code&gt;switch-to-prev-buffer&lt;/code&gt; (see &lt;a href=&quot;window-history#Window-History&quot;&gt;Window History&lt;/a&gt;). Finally, you might want to either bury (see &lt;a href=&quot;buffer-list#Buffer-List&quot;&gt;Buffer List&lt;/a&gt;) or kill (see &lt;a href=&quot;killing-buffers#Killing-Buffers&quot;&gt;Killing Buffers&lt;/a&gt;) the window&amp;rsquo;s buffer.</source>
          <target state="translated">When you want to get rid of a window used for displaying a buffer, you can call &lt;code&gt;delete-window&lt;/code&gt; or &lt;code&gt;delete-windows-on&lt;/code&gt; (see &lt;a href=&quot;deleting-windows#Deleting-Windows&quot;&gt;Deleting Windows&lt;/a&gt;) to remove that window from its frame. If the buffer is shown on a separate frame, you might want to call &lt;code&gt;delete-frame&lt;/code&gt; (see &lt;a href=&quot;deleting-frames#Deleting-Frames&quot;&gt;Deleting Frames&lt;/a&gt;) instead. If, on the other hand, a window has been reused for displaying the buffer, you might prefer showing the buffer previously shown in that window, by calling the function &lt;code&gt;switch-to-prev-buffer&lt;/code&gt; (see &lt;a href=&quot;window-history#Window-History&quot;&gt;Window History&lt;/a&gt;). Finally, you might want to either bury (see &lt;a href=&quot;buffer-list#Buffer-List&quot;&gt;Buffer List&lt;/a&gt;) or kill (see &lt;a href=&quot;killing-buffers#Killing-Buffers&quot;&gt;Killing Buffers&lt;/a&gt;) the window&amp;rsquo;s buffer.</target>
        </trans-unit>
        <trans-unit id="707ae37eb58de80b6c30a330553423c84bd2692d" translate="yes" xml:space="preserve">
          <source>When you write a list as an expression in your program, you specify which function to call, and how many arguments to give it, in the text of the program. Usually that&amp;rsquo;s just what you want. Occasionally you need to compute at run time which function to call. To do that, use the function &lt;code&gt;funcall&lt;/code&gt;. When you also need to determine at run time how many arguments to pass, use &lt;code&gt;apply&lt;/code&gt;.</source>
          <target state="translated">When you write a list as an expression in your program, you specify which function to call, and how many arguments to give it, in the text of the program. Usually that&amp;rsquo;s just what you want. Occasionally you need to compute at run time which function to call. To do that, use the function &lt;code&gt;funcall&lt;/code&gt; . When you also need to determine at run time how many arguments to pass, use &lt;code&gt;apply&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="874bbfe629036b3a6d9635eb5f25968f20745e46" translate="yes" xml:space="preserve">
          <source>When you write a selectively displayed buffer into a file, all the control-m&amp;rsquo;s are output as newlines. This means that when you next read in the file, it looks OK, with nothing hidden. The selective display effect is seen only within Emacs.</source>
          <target state="translated">When you write a selectively displayed buffer into a file, all the control-m&amp;rsquo;s are output as newlines. This means that when you next read in the file, it looks OK, with nothing hidden. The selective display effect is seen only within Emacs.</target>
        </trans-unit>
        <trans-unit id="b53fd76361fdcb42e825a91e2de7846b8aa8e17c" translate="yes" xml:space="preserve">
          <source>When your program encounters invalid input data, it can either signal a Lisp error by calling &lt;code&gt;error&lt;/code&gt; or &lt;code&gt;signal&lt;/code&gt; or report a warning with severity &lt;code&gt;:error&lt;/code&gt;. Signaling a Lisp error is the easiest thing to do, but it means the program cannot continue processing. If you want to take the trouble to implement a way to continue processing despite the bad data, then reporting a warning of severity &lt;code&gt;:error&lt;/code&gt; is the right way to inform the user of the problem. For instance, the Emacs Lisp byte compiler can report an error that way and continue compiling other functions. (If the program signals a Lisp error and then handles it with &lt;code&gt;condition-case&lt;/code&gt;, the user won&amp;rsquo;t see the error message; it could show the message to the user by reporting it as a warning.)</source>
          <target state="translated">When your program encounters invalid input data, it can either signal a Lisp error by calling &lt;code&gt;error&lt;/code&gt; or &lt;code&gt;signal&lt;/code&gt; or report a warning with severity &lt;code&gt;:error&lt;/code&gt; . Signaling a Lisp error is the easiest thing to do, but it means the program cannot continue processing. If you want to take the trouble to implement a way to continue processing despite the bad data, then reporting a warning of severity &lt;code&gt;:error&lt;/code&gt; is the right way to inform the user of the problem. For instance, the Emacs Lisp byte compiler can report an error that way and continue compiling other functions. (If the program signals a Lisp error and then handles it with &lt;code&gt;condition-case&lt;/code&gt; , the user won&amp;rsquo;t see the error message; it could show the message to the user by reporting it as a warning.)</target>
        </trans-unit>
        <trans-unit id="66c78cc9e204ca6eccaf9a3e94bebe32de83cbaf" translate="yes" xml:space="preserve">
          <source>Whenever Edebug is entered, it needs to save and restore certain data before even deciding whether to make trace information or stop the program.</source>
          <target state="translated">Whenever Edebug is entered, it needs to save and restore certain data before even deciding whether to make trace information or stop the program.</target>
        </trans-unit>
        <trans-unit id="25e25ae381cb2fae34d659db4a0640b5794226a9" translate="yes" xml:space="preserve">
          <source>Whenever Emacs starts up, it automatically calls the function &lt;code&gt;package-activate-all&lt;/code&gt; to make installed packages available to the current session. This is done after loading the early init file, but before loading the regular init file (see &lt;a href=&quot;startup-summary#Startup-Summary&quot;&gt;Startup Summary&lt;/a&gt;). Packages are not automatically made available if the user option &lt;code&gt;package-enable-at-startup&lt;/code&gt; is set to &lt;code&gt;nil&lt;/code&gt; in the early init file.</source>
          <target state="translated">Whenever Emacs starts up, it automatically calls the function &lt;code&gt;package-activate-all&lt;/code&gt; to make installed packages available to the current session. This is done after loading the early init file, but before loading the regular init file (see &lt;a href=&quot;startup-summary#Startup-Summary&quot;&gt;Startup Summary&lt;/a&gt;). Packages are not automatically made available if the user option &lt;code&gt;package-enable-at-startup&lt;/code&gt; is set to &lt;code&gt;nil&lt;/code&gt; in the early init file.</target>
        </trans-unit>
        <trans-unit id="43b31733a33654bdd2805cbb8407b551234cd747" translate="yes" xml:space="preserve">
          <source>Whenever Font Lock mode performs syntactic fontification on a stretch of text, it first calls the function specified by &lt;code&gt;syntax-propertize-function&lt;/code&gt;. Major modes can use this to apply &lt;code&gt;syntax-table&lt;/code&gt; text properties to override the buffer&amp;rsquo;s syntax table in special cases. See &lt;a href=&quot;syntax-properties#Syntax-Properties&quot;&gt;Syntax Properties&lt;/a&gt;.</source>
          <target state="translated">Whenever Font Lock mode performs syntactic fontification on a stretch of text, it first calls the function specified by &lt;code&gt;syntax-propertize-function&lt;/code&gt; . Major modes can use this to apply &lt;code&gt;syntax-table&lt;/code&gt; text properties to override the buffer&amp;rsquo;s syntax table in special cases. See &lt;a href=&quot;syntax-properties#Syntax-Properties&quot;&gt;Syntax Properties&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="9701532f8ac11b4570ffcf320b2ed064240dd127" translate="yes" xml:space="preserve">
          <source>Whenever you change the sort direction in Tabulated List buffers, this indicator toggles between ascending (&amp;ldquo;asc&amp;rdquo;) and descending (&amp;ldquo;desc&amp;rdquo;).</source>
          <target state="translated">Whenever you change the sort direction in Tabulated List buffers, this indicator toggles between ascending (&amp;ldquo;asc&amp;rdquo;) and descending (&amp;ldquo;desc&amp;rdquo;).</target>
        </trans-unit>
        <trans-unit id="3e1bafb7630a8bc5ab2531e22bb1081e38243747" translate="yes" xml:space="preserve">
          <source>Where a &lt;var&gt;button&lt;/var&gt; parameter is specified, it means an object referring to a specific button, either an overlay (for overlay buttons), or a buffer-position or marker (for text property buttons). Such an object is passed as the first argument to a button&amp;rsquo;s invocation function when it is invoked.</source>
          <target state="translated">Where a &lt;var&gt;button&lt;/var&gt; parameter is specified, it means an object referring to a specific button, either an overlay (for overlay buttons), or a buffer-position or marker (for text property buttons). Such an object is passed as the first argument to a button&amp;rsquo;s invocation function when it is invoked.</target>
        </trans-unit>
        <trans-unit id="d02666e8ab0c39778c99525936a2eaabd73b0532" translate="yes" xml:space="preserve">
          <source>Where doc strings are defined and stored.</source>
          <target state="translated">Where doc strings are defined and stored.</target>
        </trans-unit>
        <trans-unit id="3f4813623d55184860c5f6a01f4e228c1283117a" translate="yes" xml:space="preserve">
          <source>Where exactly paragraphs start and end, for the purpose of the Emacs</source>
          <target state="translated">Where exactly paragraphs start and end, for the purpose of the Emacs</target>
        </trans-unit>
        <trans-unit id="ba39325c6742aa442576d455038d87a41dd28808" translate="yes" xml:space="preserve">
          <source>Where removed text sometimes is saved for later use.</source>
          <target state="translated">Where removed text sometimes is saved for later use.</target>
        </trans-unit>
        <trans-unit id="5462eb41ab2f1c98473618bced8fdcf5d18a95ce" translate="yes" xml:space="preserve">
          <source>Whether a child frame can have a menu or tool bar is window-system or window manager dependent. Most window-systems explicitly disallow menu bars for child frames. It seems advisable to disable both, menu and tool bars, via the frame&amp;rsquo;s initial parameters settings.</source>
          <target state="translated">Whether a child frame can have a menu or tool bar is window-system or window manager dependent. Most window-systems explicitly disallow menu bars for child frames. It seems advisable to disable both, menu and tool bars, via the frame&amp;rsquo;s initial parameters settings.</target>
        </trans-unit>
        <trans-unit id="a101caa7a5eec779be4af1d0623f1d986489dd25" translate="yes" xml:space="preserve">
          <source>Whether or not a box should be drawn around characters, its color, the width of the box lines, and 3D appearance. Here are the possible values of the &lt;code&gt;:box&lt;/code&gt; attribute, and what they mean:</source>
          <target state="translated">Whether or not a box should be drawn around characters, its color, the width of the box lines, and 3D appearance. Here are the possible values of the &lt;code&gt;:box&lt;/code&gt; attribute, and what they mean:</target>
        </trans-unit>
        <trans-unit id="cd3ff50be6d445e1a4ed9f70f6f9b1bb63841a38" translate="yes" xml:space="preserve">
          <source>Whether or not characters should be displayed in inverse video. The value should be &lt;code&gt;t&lt;/code&gt; (yes) or &lt;code&gt;nil&lt;/code&gt; (no).</source>
          <target state="translated">Whether or not characters should be displayed in inverse video. The value should be &lt;code&gt;t&lt;/code&gt; (yes) or &lt;code&gt;nil&lt;/code&gt; (no).</target>
        </trans-unit>
        <trans-unit id="621368ad433e8ead587b19fc3ef1c07ad4ba1121" translate="yes" xml:space="preserve">
          <source>Whether or not characters should be overlined, and in what color. If the value is &lt;code&gt;t&lt;/code&gt;, overlining uses the foreground color of the face. If the value is a string, overlining uses that color. The value &lt;code&gt;nil&lt;/code&gt; means do not overline.</source>
          <target state="translated">Whether or not characters should be overlined, and in what color. If the value is &lt;code&gt;t&lt;/code&gt; , overlining uses the foreground color of the face. If the value is a string, overlining uses that color. The value &lt;code&gt;nil&lt;/code&gt; means do not overline.</target>
        </trans-unit>
        <trans-unit id="87b82f71ddfeb6b5f036533b3f7f4860e4362d1a" translate="yes" xml:space="preserve">
          <source>Whether or not characters should be strike-through, and in what color. The value is used like that of &lt;code&gt;:overline&lt;/code&gt;.</source>
          <target state="translated">Whether or not characters should be strike-through, and in what color. The value is used like that of &lt;code&gt;:overline&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a349727f4624f6ab021246da8483aa44028c8643" translate="yes" xml:space="preserve">
          <source>Whether or not characters should be underlined, and in what way. The possible values of the &lt;code&gt;:underline&lt;/code&gt; attribute are:</source>
          <target state="translated">Whether or not characters should be underlined, and in what way. The possible values of the &lt;code&gt;:underline&lt;/code&gt; attribute are:</target>
        </trans-unit>
        <trans-unit id="3a36329c0176b418cdd12abd5e5ccbc9ca3d83e2" translate="yes" xml:space="preserve">
          <source>Whether or not the terminal can display the face attributes given in &lt;var&gt;value&lt;/var&gt;&amp;hellip; (see &lt;a href=&quot;face-attributes#Face-Attributes&quot;&gt;Face Attributes&lt;/a&gt;). See &lt;a href=&quot;display-feature-testing#Display-Face-Attribute-Testing&quot;&gt;Display Face Attribute Testing&lt;/a&gt;, for more information on exactly how this testing is done.</source>
          <target state="translated">Whether or not the terminal can display the face attributes given in &lt;var&gt;value&lt;/var&gt; &amp;hellip; (see &lt;a href=&quot;face-attributes#Face-Attributes&quot;&gt;Face Attributes&lt;/a&gt;). See &lt;a href=&quot;display-feature-testing#Display-Face-Attribute-Testing&quot;&gt;Display Face Attribute Testing&lt;/a&gt;, for more information on exactly how this testing is done.</target>
        </trans-unit>
        <trans-unit id="9ee7143441116933b2b1d2fb74c143183a73d67e" translate="yes" xml:space="preserve">
          <source>Whether or not this face will be extended beyond end of line and will affect the display of the empty space between the end of line and the edge of the window. The value should be &lt;code&gt;t&lt;/code&gt; to display the empty space between end of line and edge of the window using this face, or &lt;code&gt;nil&lt;/code&gt; to not use this face for the space between the end of the line and the edge of the window. When Emacs merges several faces for displaying the empty space beyond end of line, only those faces with &lt;code&gt;:extend&lt;/code&gt; non-&lt;code&gt;nil&lt;/code&gt; will be merged. By default, only a small number of faces, notably, &lt;code&gt;region&lt;/code&gt;, have this attribute set. This attribute is different from the others in that when a theme doesn&amp;rsquo;t specify an explicit value for a face, the value from the original face definition by &lt;code&gt;defface&lt;/code&gt; is inherited (see &lt;a href=&quot;defining-faces#Defining-Faces&quot;&gt;Defining Faces&lt;/a&gt;).</source>
          <target state="translated">Whether or not this face will be extended beyond end of line and will affect the display of the empty space between the end of line and the edge of the window. The value should be &lt;code&gt;t&lt;/code&gt; to display the empty space between end of line and edge of the window using this face, or &lt;code&gt;nil&lt;/code&gt; to not use this face for the space between the end of the line and the edge of the window. When Emacs merges several faces for displaying the empty space beyond end of line, only those faces with &lt;code&gt;:extend&lt;/code&gt; non- &lt;code&gt;nil&lt;/code&gt; will be merged. By default, only a small number of faces, notably, &lt;code&gt;region&lt;/code&gt; , have this attribute set. This attribute is different from the others in that when a theme doesn&amp;rsquo;t specify an explicit value for a face, the value from the original face definition by &lt;code&gt;defface&lt;/code&gt; is inherited (see &lt;a href=&quot;defining-faces#Defining-Faces&quot;&gt;Defining Faces&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="1b103ae335cfa2bb9c78948f91ad92c8adb3c29b" translate="yes" xml:space="preserve">
          <source>Whether or not to pause for &lt;code&gt;edebug-sit-for-seconds&lt;/code&gt; on reaching a breakpoint. Set to &lt;code&gt;nil&lt;/code&gt; to prevent the pause, non-&lt;code&gt;nil&lt;/code&gt; to allow it.</source>
          <target state="translated">Whether or not to pause for &lt;code&gt;edebug-sit-for-seconds&lt;/code&gt; on reaching a breakpoint. Set to &lt;code&gt;nil&lt;/code&gt; to prevent the pause, non- &lt;code&gt;nil&lt;/code&gt; to allow it.</target>
        </trans-unit>
        <trans-unit id="3339a6de20f77bd40ffb1ed898ed4bb70552d7e6" translate="yes" xml:space="preserve">
          <source>Whether recursive entry to minibuffer is allowed.</source>
          <target state="translated">Whether recursive entry to minibuffer is allowed.</target>
        </trans-unit>
        <trans-unit id="1ce168d2c5a0dc5c2330545c5a50a1abb3761466" translate="yes" xml:space="preserve">
          <source>Whether the action &lt;code&gt;renamed&lt;/code&gt; is returned, depends on the used watch library. Otherwise, the actions &lt;code&gt;deleted&lt;/code&gt; and &lt;code&gt;created&lt;/code&gt; could be returned in a random order.</source>
          <target state="translated">Whether the action &lt;code&gt;renamed&lt;/code&gt; is returned, depends on the used watch library. Otherwise, the actions &lt;code&gt;deleted&lt;/code&gt; and &lt;code&gt;created&lt;/code&gt; could be returned in a random order.</target>
        </trans-unit>
        <trans-unit id="96dabfa3befc4cf90264ef632624f49c9ceaaef3" translate="yes" xml:space="preserve">
          <source>Whether the frame has scroll bars (see &lt;a href=&quot;scroll-bars#Scroll-Bars&quot;&gt;Scroll Bars&lt;/a&gt;) for vertical scrolling, and which side of the frame they should be on. The possible values are &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, and &lt;code&gt;nil&lt;/code&gt; for no scroll bars.</source>
          <target state="translated">Whether the frame has scroll bars (see &lt;a href=&quot;scroll-bars#Scroll-Bars&quot;&gt;Scroll Bars&lt;/a&gt;) for vertical scrolling, and which side of the frame they should be on. The possible values are &lt;code&gt;left&lt;/code&gt; , &lt;code&gt;right&lt;/code&gt; , and &lt;code&gt;nil&lt;/code&gt; for no scroll bars.</target>
        </trans-unit>
        <trans-unit id="570cdec0afbab44285125073d07498367313b12c" translate="yes" xml:space="preserve">
          <source>Whether the frame has scroll bars for horizontal scrolling (&lt;code&gt;t&lt;/code&gt; and &lt;code&gt;bottom&lt;/code&gt; mean yes, &lt;code&gt;nil&lt;/code&gt; means no).</source>
          <target state="translated">Whether the frame has scroll bars for horizontal scrolling ( &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;bottom&lt;/code&gt; mean yes, &lt;code&gt;nil&lt;/code&gt; means no).</target>
        </trans-unit>
        <trans-unit id="46c8e8c485a23a80ef755951ee8e139296254b76" translate="yes" xml:space="preserve">
          <source>Whether the menu bar is wrapped or truncated whenever its width becomes too large to fit on its frame depends on the toolkit . Usually, only Motif and MS-Windows builds can wrap the menu bar. When they (un-)wrap the menu bar, they try to keep the outer height of the frame unchanged, so the native height of the frame (see below) will change instead.</source>
          <target state="translated">Whether the menu bar is wrapped or truncated whenever its width becomes too large to fit on its frame depends on the toolkit . Usually, only Motif and MS-Windows builds can wrap the menu bar. When they (un-)wrap the menu bar, they try to keep the outer height of the frame unchanged, so the native height of the frame (see below) will change instead.</target>
        </trans-unit>
        <trans-unit id="3225f8a8df7af5e6c1696d052e30a6fd5b493417" translate="yes" xml:space="preserve">
          <source>Whether this frame has its own minibuffer. The value &lt;code&gt;t&lt;/code&gt; means yes, &lt;code&gt;nil&lt;/code&gt; means no, &lt;code&gt;only&lt;/code&gt; means this frame is just a minibuffer. If the value is a minibuffer window (in some other frame), the frame uses that minibuffer.</source>
          <target state="translated">Whether this frame has its own minibuffer. The value &lt;code&gt;t&lt;/code&gt; means yes, &lt;code&gt;nil&lt;/code&gt; means no, &lt;code&gt;only&lt;/code&gt; means this frame is just a minibuffer. If the value is a minibuffer window (in some other frame), the frame uses that minibuffer.</target>
        </trans-unit>
        <trans-unit id="d2f6aa5530c5eed14409c879a79ce151a1ce3180" translate="yes" xml:space="preserve">
          <source>Whether to query if exiting will kill a process.</source>
          <target state="translated">Whether to query if exiting will kill a process.</target>
        </trans-unit>
        <trans-unit id="a30cb334b0a4c61c095185a2336a959e81e282e4" translate="yes" xml:space="preserve">
          <source>Which File Defined a Certain Symbol</source>
          <target state="translated">Which File Defined a Certain Symbol</target>
        </trans-unit>
        <trans-unit id="6333b28a91521bad756efc5b44c75736ce6349f6" translate="yes" xml:space="preserve">
          <source>Which buffer is current, and the positions of point and the mark in the current buffer, are saved and restored.</source>
          <target state="translated">Which buffer is current, and the positions of point and the mark in the current buffer, are saved and restored.</target>
        </trans-unit>
        <trans-unit id="4604b0e4277280e8cbbfe834a63404bd4ec61668" translate="yes" xml:space="preserve">
          <source>Which buffers have been or should be shown.</source>
          <target state="translated">Which buffers have been or should be shown.</target>
        </trans-unit>
        <trans-unit id="d57ea32eeaa1bddbc30ef3b79fbf8e85b67e6b87" translate="yes" xml:space="preserve">
          <source>Which character sets are used in a buffer?</source>
          <target state="translated">Which character sets are used in a buffer?</target>
        </trans-unit>
        <trans-unit id="46c8ee6549ff4d0835a19102159828fa10263ac4" translate="yes" xml:space="preserve">
          <source>Which parameters are accepted by the notification server can be checked via &lt;code&gt;notifications-get-capabilities&lt;/code&gt;.</source>
          <target state="translated">Which parameters are accepted by the notification server can be checked via &lt;code&gt;notifications-get-capabilities&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d5d68f0edd1de7e191fb9888edee4a6bdb5cd0a8" translate="yes" xml:space="preserve">
          <source>Which window system is being used.</source>
          <target state="translated">Which window system is being used.</target>
        </trans-unit>
        <trans-unit id="982c8a6972c3e9f30d81bf085e5ad89215bdf352" translate="yes" xml:space="preserve">
          <source>While Edebug is active, the command</source>
          <target state="translated">While Edebug is active, the command</target>
        </trans-unit>
        <trans-unit id="e77219cea90f180ba9fd77cd16c9872f93dcfca6" translate="yes" xml:space="preserve">
          <source>While Emacs waits for the synchronous subprocess to terminate, the user can quit by typing</source>
          <target state="translated">While Emacs waits for the synchronous subprocess to terminate, the user can quit by typing</target>
        </trans-unit>
        <trans-unit id="a0e9cf839f5ec54d82aeb0511d9c2ac3ea7094c9" translate="yes" xml:space="preserve">
          <source>While a sentinel is running, the process sentinel is temporarily set to &lt;code&gt;nil&lt;/code&gt; so that the sentinel won&amp;rsquo;t run recursively. For this reason it is not possible for a sentinel to specify a new sentinel.</source>
          <target state="translated">While a sentinel is running, the process sentinel is temporarily set to &lt;code&gt;nil&lt;/code&gt; so that the sentinel won&amp;rsquo;t run recursively. For this reason it is not possible for a sentinel to specify a new sentinel.</target>
        </trans-unit>
        <trans-unit id="3bca0316676840ea135f514876dcb5d700c34bac" translate="yes" xml:space="preserve">
          <source>While a sentinel or filter function is running, this function returns non-&lt;code&gt;nil&lt;/code&gt; if Emacs was waiting for keyboard input from the user at the time the sentinel or filter function was called, or &lt;code&gt;nil&lt;/code&gt; if it was not.</source>
          <target state="translated">센티넬 또는 필터 기능이 실행되는 동안,이 기능은 비 반환 &lt;code&gt;nil&lt;/code&gt; 이맥스는 감시 또는 필터 함수가 호출, 또는 한 시간에 사용자의 키보드 입력을 기다리는 경우 &lt;code&gt;nil&lt;/code&gt; 가 아니었다면.</target>
        </trans-unit>
        <trans-unit id="44c6b48c29b2eea207adfb6603fdd19cc584e716" translate="yes" xml:space="preserve">
          <source>While executing or tracing, you can interrupt the execution by typing any Edebug command. Edebug stops the program at the next stop point and then executes the command you typed. For example, typing</source>
          <target state="translated">실행 또는 추적하는 동안 Edebug 명령을 입력하여 실행을 중단 할 수 있습니다. Edebug는 다음 중지 지점에서 프로그램을 중지 한 다음 입력 한 명령을 실행합니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="4b7d809185c9cf5559ee0f75e3a5509cf67c9b64" translate="yes" xml:space="preserve">
          <source>While global variables are shared among all Emacs Lisp threads, local variables are not&amp;mdash;a dynamic &lt;code&gt;let&lt;/code&gt; binding is local. Each thread also has its own current buffer (see &lt;a href=&quot;current-buffer#Current-Buffer&quot;&gt;Current Buffer&lt;/a&gt;) and its own match data (see &lt;a href=&quot;match-data#Match-Data&quot;&gt;Match Data&lt;/a&gt;).</source>
          <target state="translated">전역 변수는 모든 Emacs Lisp 스레드에서 공유되지만 로컬 변수는 공유되지 않습니다. 동적 &lt;code&gt;let&lt;/code&gt; 바인딩은 로컬입니다. 각 스레드는 또한 자신의 현재 버퍼 (참조가 &lt;a href=&quot;current-buffer#Current-Buffer&quot;&gt;현재 버퍼&lt;/a&gt; )와 자신의 경기 데이터 (참조 &lt;a href=&quot;match-data#Match-Data&quot;&gt;일치 데이터&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="9f6b6c536addb2d944507d585c2d3b9b43662ada" translate="yes" xml:space="preserve">
          <source>While holding down the meta and shift keys, the user might press the second mouse button on the window&amp;rsquo;s mode line, and then drag the mouse into another window. That produces a pair of events like these:</source>
          <target state="translated">meta 및 shift 키를 누른 상태에서 사용자는 창의 모드 라인에서 두 번째 마우스 버튼을 누른 다음 마우스를 다른 창으로 끌 수 있습니다. 그러면 다음과 같은 한 쌍의 이벤트가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="0ce07a1bc20c1df5be5ff473ceaca3be3b6dfe4d" translate="yes" xml:space="preserve">
          <source>While holding the control key down, the user might hold down the second mouse button, and drag the mouse from one line to the next. That produces two events, as shown here:</source>
          <target state="translated">컨트롤 키를 누른 상태에서 두 번째 마우스 버튼을 누른 상태에서 마우스를 한 줄에서 다음 줄로 끌 수 있습니다. 다음과 같이 두 가지 이벤트가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="aa2b138dc7a434874a587f2ea0714355fe7e8345" translate="yes" xml:space="preserve">
          <source>While in Edebug, you can set a breakpoint with</source>
          <target state="translated">Edebug에서 다음을 사용하여 중단 점을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b96e5a724c0ebbb3de9c153f70114adfb541cb53" translate="yes" xml:space="preserve">
          <source>While this function is mainly intended for use in auto-reverting, it could be used for other purposes as well. For instance, if auto-reverting is not enabled, it could be used to warn the user that the buffer needs reverting. The idea behind the &lt;var&gt;noconfirm&lt;/var&gt; argument is that it should be &lt;code&gt;t&lt;/code&gt; if the buffer is going to be reverted without asking the user and &lt;code&gt;nil&lt;/code&gt; if the function is just going to be used to warn the user that the buffer is out of date. In particular, for use in auto-reverting, &lt;var&gt;noconfirm&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt;. If the function is only going to be used for auto-reverting, you can ignore the &lt;var&gt;noconfirm&lt;/var&gt; argument.</source>
          <target state="translated">이 기능은 주로 자동 되돌리기에 사용하기위한 것이지만 다른 용도로도 사용할 수 있습니다. 예를 들어 자동 되돌리기가 활성화되지 않은 경우 버퍼를 되돌릴 필요가 있음을 사용자에게 경고하는 데 사용할 수 있습니다. &lt;var&gt;noconfirm&lt;/var&gt; 인수의 배후에있는 아이디어 는 사용자에게 묻지 않고 버퍼를 되돌리려 면 &lt;code&gt;t&lt;/code&gt; 여야 하고 버퍼가 만료되었음을 사용자에게 경고하는 데 함수가 사용되는 경우 &lt;code&gt;nil&lt;/code&gt; 이어야한다는 것입니다. 특히 자동 되돌리기에 사용하는 경우 &lt;var&gt;noconfirm&lt;/var&gt; 은 &lt;code&gt;t&lt;/code&gt; 입니다. 함수가 자동 복귀에만 사용되는 경우 &lt;var&gt;noconfirm&lt;/var&gt; 인수를 무시할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="09ec9a61d40e758f8a1ea280765235554cb46e51" translate="yes" xml:space="preserve">
          <source>While using Edebug, you can specify &lt;em&gt;breakpoints&lt;/em&gt; in the program you are testing: these are places where execution should stop. You can set a breakpoint at any stop point, as defined in &lt;a href=&quot;using-edebug#Using-Edebug&quot;&gt;Using Edebug&lt;/a&gt;. For setting and unsetting breakpoints, the stop point that is affected is the first one at or after point in the source code buffer. Here are the Edebug commands for breakpoints:</source>
          <target state="translated">Edebug를 사용하는 동안 테스트중인 프로그램에서 &lt;em&gt;중단 점&lt;/em&gt; 을 지정할 수 있습니다 . 여기에서 실행을 중지해야합니다. &lt;a href=&quot;using-edebug#Using-Edebug&quot;&gt;Edebug 사용에&lt;/a&gt; 정의 된대로 모든 중지 점에서 중단 점을 설정할 수 있습니다 . 중단 점 설정 및 설정 해제의 경우 영향을받는 중지 지점은 소스 코드 버퍼의 지점 또는 이후 지점에서 첫 번째 중지 지점입니다. 중단 점에 대한 Edebug 명령은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fa12cd365478af88379663588f57e8ff97a39d58" translate="yes" xml:space="preserve">
          <source>While window change functions are run, the functions described next can be called to get more insight into what has changed for a specific window or frame since the last redisplay. All these functions take a live window as single, optional argument, defaulting to the selected window.</source>
          <target state="translated">창 변경 기능이 실행되는 동안 다음에 설명 된 기능을 호출하여 마지막 재표시 이후 특정 창 또는 프레임에 대해 변경된 내용을 더 자세히 파악할 수 있습니다. 이러한 모든 함수는 라이브 창을 하나의 선택적 인수로 사용하며 기본값은 선택한 창입니다.</target>
        </trans-unit>
        <trans-unit id="21a7273c21de5277f0ec77123f7d544d0ae946c6" translate="yes" xml:space="preserve">
          <source>While within Edebug, you can evaluate expressions as if Edebug were not running. Edebug tries to be invisible to the expression&amp;rsquo;s evaluation and printing. Evaluation of expressions that cause side effects will work as expected, except for changes to data that Edebug explicitly saves and restores. See &lt;a href=&quot;the-outside-context#The-Outside-Context&quot;&gt;The Outside Context&lt;/a&gt;, for details on this process.</source>
          <target state="translated">Edebug 내에서 Edebug가 실행 중이 아닌 것처럼 식을 평가할 수 있습니다. Edebug는 표현식의 평가 및 인쇄에 보이지 않게 시도합니다. 부작용을 일으키는 식의 평가는 Edebug가 명시 적으로 저장하고 복원하는 데이터 변경을 제외하고 예상대로 작동합니다. &lt;a href=&quot;the-outside-context#The-Outside-Context&quot;&gt;외부 컨텍스트&lt;/a&gt; 참조이 프로세스에 대한 자세한 내용 .</target>
        </trans-unit>
        <trans-unit id="ddce35a991a7cc6488454c01eee293fd067c30fc" translate="yes" xml:space="preserve">
          <source>Whitespace characters before and after the commas are ignored.</source>
          <target state="translated">쉼표 앞뒤의 공백 문자는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="cefe02b00f13ea6c3bbe7d3da7dad90a1a52f9a6" translate="yes" xml:space="preserve">
          <source>Whitespace characters: &amp;lsquo;&amp;rsquo; or &amp;lsquo;</source>
          <target state="translated">공백 문자 : ''또는 '</target>
        </trans-unit>
        <trans-unit id="6070f5330973d3f20cf4dd45a51e33df12e43edc" translate="yes" xml:space="preserve">
          <source>Whole number of seconds.</source>
          <target state="translated">초의 정수입니다.</target>
        </trans-unit>
        <trans-unit id="5978321d9551ea526dd1e41cdfbcda064a3e0c90" translate="yes" xml:space="preserve">
          <source>Why Text Properties are not Intervals</source>
          <target state="translated">텍스트 속성이 간격이 아닌 이유</target>
        </trans-unit>
        <trans-unit id="7c8f385f8776abe3ee23cd356b28fcbf13f32163" translate="yes" xml:space="preserve">
          <source>Why text properties do not use Lisp-visible text intervals.</source>
          <target state="translated">텍스트 속성이 Lisp 표시 텍스트 간격을 사용하지 않는 이유.</target>
        </trans-unit>
        <trans-unit id="55b1b545af40f90e002eebaef362d6c451427538" translate="yes" xml:space="preserve">
          <source>Width and height in millimeters as &amp;lsquo;</source>
          <target state="translated">너비와 높이 (밀리미터)</target>
        </trans-unit>
        <trans-unit id="4f2caf4fd01ef1de25a0fa06f078de09fbbe7ae0" translate="yes" xml:space="preserve">
          <source>Window Configuration Type</source>
          <target state="translated">창 구성 유형</target>
        </trans-unit>
        <trans-unit id="4719b364ada9ea80bc95dadf1a46b5d6e42f300b" translate="yes" xml:space="preserve">
          <source>Window Configurations</source>
          <target state="translated">창 구성</target>
        </trans-unit>
        <trans-unit id="383fc633828b7f53a6347e277fbc6931a7fb4718" translate="yes" xml:space="preserve">
          <source>Window Dividers</source>
          <target state="translated">창 분할기</target>
        </trans-unit>
        <trans-unit id="f2acc5dfa54156a214d1606598b55d8bc1d36e43" translate="yes" xml:space="preserve">
          <source>Window Frame Parameters</source>
          <target state="translated">창 프레임 매개 변수</target>
        </trans-unit>
        <trans-unit id="23cfeec33d3985ca43bf26e706bb33e16524aae7" translate="yes" xml:space="preserve">
          <source>Window Header Lines</source>
          <target state="translated">창 헤더 라인</target>
        </trans-unit>
        <trans-unit id="aea40a08850dedc93176c8c25cbf6c46773b984b" translate="yes" xml:space="preserve">
          <source>Window History</source>
          <target state="translated">창 역사</target>
        </trans-unit>
        <trans-unit id="2adeacaba642526348dabb53054e0f9ba68a48ff" translate="yes" xml:space="preserve">
          <source>Window Internals</source>
          <target state="translated">창 내부</target>
        </trans-unit>
        <trans-unit id="0aa526e852b8c127dccb3d9d8f01d311682e7f8e" translate="yes" xml:space="preserve">
          <source>Window Management Parameters</source>
          <target state="translated">창 관리 매개 변수</target>
        </trans-unit>
        <trans-unit id="7e63c35b290d11eceb95853777f7c66c956be145" translate="yes" xml:space="preserve">
          <source>Window Parameters</source>
          <target state="translated">창 매개 변수</target>
        </trans-unit>
        <trans-unit id="ddf6b6b64a3f967df5de0d5f500dc367c7816d58" translate="yes" xml:space="preserve">
          <source>Window Sizes</source>
          <target state="translated">창 크기</target>
        </trans-unit>
        <trans-unit id="e3d90bae9b52e6df713535cc491f9d7260cb7e1d" translate="yes" xml:space="preserve">
          <source>Window System Selections</source>
          <target state="translated">윈도우 시스템 선택</target>
        </trans-unit>
        <trans-unit id="99cc4ccf3f53f630b2d30920cc334165dfa70c56" translate="yes" xml:space="preserve">
          <source>Window Systems</source>
          <target state="translated">윈도우 시스템</target>
        </trans-unit>
        <trans-unit id="92bfda0dd090278d55f83c688172701c41d07f9e" translate="yes" xml:space="preserve">
          <source>Window Type</source>
          <target state="translated">창 유형</target>
        </trans-unit>
        <trans-unit id="22a63e85e94d72b84de62c3dd1b814e7ef77e9dd" translate="yes" xml:space="preserve">
          <source>Window change functions are called during redisplay for each frame as follows: First, any buffer-local window buffer change function, window size change function, selected window change and window state change functions are called in this order. Next, the default values for these functions are called in the same order. Then any buffer-local window configuration change functions are called followed by functions specified by the default value of those functions. Finally, functions on &lt;code&gt;window-state-change-hook&lt;/code&gt; are run.</source>
          <target state="translated">창 변경 기능은 각 프레임에 대해 다시 표시하는 동안 다음과 같이 호출됩니다. 먼저 모든 버퍼 로컬 창 버퍼 변경 기능, 창 크기 변경 기능, 선택한 창 변경 및 창 상태 변경 기능이이 순서대로 호출됩니다. 다음으로 이러한 함수의 기본값이 동일한 순서로 호출됩니다. 그런 다음 버퍼 로컬 창 구성 변경 기능이 호출되고 그 뒤에 해당 기능의 기본값으로 지정된 기능이 호출됩니다. 마지막으로 &lt;code&gt;window-state-change-hook&lt;/code&gt; 함수 가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="0a566afc3561cc5cec927cae0207cc941a9353aa" translate="yes" xml:space="preserve">
          <source>Window change functions are run for a specific frame only if a corresponding change was registered for that frame earlier. Such changes include the creation or deletion of a window or the assignment of another buffer or size to a window. Note that even when such a change has been registered, this does not mean that any of the hooks described above is run. If, for example, a change was registered within the scope of a window excursion (see &lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;Window Configurations&lt;/a&gt;), this will trigger a call of window change functions only if that excursion still persists at the time change functions are run. If it is exited earlier, hooks will be run only if registered by a change outside the scope of that excursion.</source>
          <target state="translated">창 변경 기능은 해당 프레임에 대해 해당 변경이 이전에 등록 된 경우에만 특정 프레임에 대해 실행됩니다. 이러한 변경에는 창 생성 또는 삭제 또는 창에 다른 버퍼 또는 크기 할당이 포함됩니다. 이러한 변경 사항이 등록 된 경우에도 위에서 설명한 후크가 실행되는 것은 아닙니다. 예를 들어 윈도우 익스커션 범위 내에서 변경 사항이 등록 된 경우 ( &lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;윈도우 구성&lt;/a&gt; 참조) ) 변경 함수가 실행될 때 익스커션이 여전히 지속되는 경우에만 윈도우 변경 함수 호출이 트리거됩니다. 더 일찍 종료되면 해당 익스커션의 범위를 벗어난 변경으로 등록 된 경우에만 후크가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="b6e565000823201cf9f76d83eeb2ce5e7ac9f359" translate="yes" xml:space="preserve">
          <source>Window change functions should not create or delete windows or change the buffer, size or selection status of any window because there is no guarantee that the information about such a change will be propagated to other window change functions. If at all, any such change should be executed only by the last function listed by the default value of &lt;code&gt;window-state-change-hook&lt;/code&gt;.</source>
          <target state="translated">창 변경 기능은 창을 생성 또는 삭제하거나 창 버퍼, 크기 또는 선택 상태를 변경해서는 안됩니다. 이러한 변경에 대한 정보가 다른 창 변경 기능에 전파된다는 보장이 없기 때문입니다. 모든 변경은 &lt;code&gt;window-state-change-hook&lt;/code&gt; 의 기본값에 나열된 마지막 함수에 의해서만 실행되어야합니다. .</target>
        </trans-unit>
        <trans-unit id="1ca7163596db4bd70d63749d7a570ef34f5c5069" translate="yes" xml:space="preserve">
          <source>Window configurations do not have a read syntax; their print syntax looks like &amp;lsquo;</source>
          <target state="translated">창 구성에는 읽기 구문이 없습니다. 그들의 인쇄 구문은 '</target>
        </trans-unit>
        <trans-unit id="1d3d93f781bc955d732be578f67fb0deca437299" translate="yes" xml:space="preserve">
          <source>Window dividers are bars drawn between a frame&amp;rsquo;s windows. A right divider is drawn between a window and any adjacent windows on the right. Its width (thickness) is specified by the frame parameter &lt;code&gt;right-divider-width&lt;/code&gt;. A bottom divider is drawn between a window and adjacent windows on the bottom or the echo area. Its width is specified by the frame parameter &lt;code&gt;bottom-divider-width&lt;/code&gt;. In either case, specifying a width of zero means to not draw such dividers. See &lt;a href=&quot;layout-parameters#Layout-Parameters&quot;&gt;Layout Parameters&lt;/a&gt;.</source>
          <target state="translated">창 구분선은 프레임의 창 사이에 그려진 막대입니다. 창과 오른쪽의 인접한 창 사이에 오른쪽 구분선이 그려집니다. 너비 (두께)는 프레임 매개 변수 &lt;code&gt;right-divider-width&lt;/code&gt; 로 지정됩니다 . 하단 구분선은 창과 하단 또는 에코 영역의 인접한 창 사이에 그려집니다. 너비는 프레임 매개 변수 &lt;code&gt;bottom-divider-width&lt;/code&gt; width로 지정됩니다 . 두 경우 모두 너비를 0으로 지정하면 이러한 구분선을 그리지 않습니다. &lt;a href=&quot;layout-parameters#Layout-Parameters&quot;&gt;레이아웃 매개 변수&lt;/a&gt; 참조 .</target>
        </trans-unit>
        <trans-unit id="7d7ad521e7ccb431c898f004aae10b9fcd97052e" translate="yes" xml:space="preserve">
          <source>Window managers generally heed user-specified positions, and some heed program-specified positions too. But many ignore program-specified positions, placing the window in a default fashion or letting the user place it with the mouse. Some window managers, including &lt;code&gt;twm&lt;/code&gt;, let the user specify whether to obey program-specified positions or ignore them.</source>
          <target state="translated">창 관리자는 일반적으로 사용자 지정 위치에 유의하고 일부는 프로그램 지정 위치에도 유의합니다. 그러나 많은 사람들이 프로그램 지정 위치를 무시하고 창을 기본 방식으로 배치하거나 사용자가 마우스로 배치하도록합니다. &lt;code&gt;twm&lt;/code&gt; 을 포함한 일부 창 관리자 사용하면 사용자가 프로그램 지정 위치를 따를 것인지 무시할 것인지 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1ac30c43ebb99ef6fdeeea2b26ee628487f8b105" translate="yes" xml:space="preserve">
          <source>Window managers might not bother to extend their focus follows mouse policy to child frames. Customizing &lt;code&gt;mouse-autoselect-window&lt;/code&gt; can help in this regard (see &lt;a href=&quot;mouse-window-auto_002dselection#Mouse-Window-Auto_002dselection&quot;&gt;Mouse Window Auto-selection&lt;/a&gt;).</source>
          <target state="translated">창 관리자는 마우스 정책에 따라 포커스를 자식 프레임으로 확장하지 않아도됩니다. &lt;code&gt;mouse-autoselect-window&lt;/code&gt; 를 사용자 정의 하면 이와 관련하여 도움이 될 수 있습니다 ( &lt;a href=&quot;mouse-window-auto_002dselection#Mouse-Window-Auto_002dselection&quot;&gt;Mouse Window Auto-selection 참조&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="6e452eeb875beec394b3abe50031295c7bb2eae1" translate="yes" xml:space="preserve">
          <source>Window systems provide general ways for the user to control which window gets keyboard input. This choice of window is called the &lt;em&gt;focus&lt;/em&gt;. When the user does something to switch between Emacs frames, that generates a &lt;em&gt;focus event&lt;/em&gt;. The normal definition of a focus event, in the global keymap, is to select a new frame within Emacs, as the user would expect. See &lt;a href=&quot;input-focus#Input-Focus&quot;&gt;Input Focus&lt;/a&gt;, which also describes hooks related to focus events.</source>
          <target state="translated">윈도우 시스템은 사용자가 키보드 입력을받는 윈도우를 제어 할 수있는 일반적인 방법을 제공합니다. 이 창 선택을 &lt;em&gt;초점&lt;/em&gt; 이라고합니다 . 사용자가 Emacs 프레임 사이를 전환하는 작업을 수행하면 &lt;em&gt;포커스 이벤트&lt;/em&gt; 가 생성됩니다 . 글로벌 키맵에서 포커스 이벤트의 일반적인 정의는 사용자가 예상하는대로 Emacs 내에서 새 프레임을 선택하는 것입니다. &lt;a href=&quot;input-focus#Input-Focus&quot;&gt;입력 초점&lt;/a&gt; 보기포커스 이벤트와 관련된 후크도 설명하는 .</target>
        </trans-unit>
        <trans-unit id="26d9c28d789c254f71ea99a3463b99a7ccc2f4fa" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="translated">Windows</target>
        </trans-unit>
        <trans-unit id="be6f7128e1368ad70800befb826104ed0c1bda9a" translate="yes" xml:space="preserve">
          <source>Windows and Frames</source>
          <target state="translated">창 및 프레임</target>
        </trans-unit>
        <trans-unit id="2e188987453ed30440b9c0e01d3bc06dc6caecbc" translate="yes" xml:space="preserve">
          <source>Windows and Point</source>
          <target state="translated">창과 점</target>
        </trans-unit>
        <trans-unit id="8eaccfa1394601c417974424029ea241c342bf12" translate="yes" xml:space="preserve">
          <source>Windows are grouped into frames (see &lt;a href=&quot;frames#Frames&quot;&gt;Frames&lt;/a&gt;). Each frame contains at least one window; the user can subdivide it into multiple, non-overlapping windows to view several buffers at once. Lisp programs can use multiple windows for a variety of purposes. In Rmail, for example, you can view a summary of message titles in one window, and the contents of the selected message in another window.</source>
          <target state="translated">윈도우는 프레임 (참조로 그룹화되어 &lt;a href=&quot;frames#Frames&quot;&gt;프레임을&lt;/a&gt; ). 각 프레임에는 적어도 하나의 창이 포함됩니다. 사용자는 여러 개의 겹치지 않는 창으로 세분화하여 한 번에 여러 버퍼를 볼 수 있습니다. Lisp 프로그램은 다양한 목적으로 여러 창을 사용할 수 있습니다. 예를 들어 Rmail에서는 한 창에서 메시지 제목의 요약을 볼 수 있고 다른 창에서 선택한 메시지의 내용을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="442df2648c226eb5a7b76a491a65f77c9ed3c717" translate="yes" xml:space="preserve">
          <source>Windows are grouped on the screen into frames; each window belongs to one and only one frame. See &lt;a href=&quot;frame-type#Frame-Type&quot;&gt;Frame Type&lt;/a&gt;.</source>
          <target state="translated">창은 화면에서 프레임으로 그룹화됩니다. 각 창은 하나의 프레임에만 속합니다. &lt;a href=&quot;frame-type#Frame-Type&quot;&gt;프레임 유형을&lt;/a&gt; 참고하십시오 .</target>
        </trans-unit>
        <trans-unit id="ae05c0cf1406d754b9681ad2b7e23e7ead25ad0e" translate="yes" xml:space="preserve">
          <source>Windows have no read syntax. They print in hash notation, giving the window number and the name of the buffer being displayed. The window numbers exist to identify windows uniquely, since the buffer displayed in any given window can change frequently.</source>
          <target state="translated">Windows에는 읽기 구문이 없습니다. 해시 표기법으로 인쇄하여 창 번호와 표시되는 버퍼의 이름을 제공합니다. 주어진 창에 표시되는 버퍼가 자주 변경 될 수 있으므로 창 번호는 창을 고유하게 식별하기 위해 존재합니다.</target>
        </trans-unit>
        <trans-unit id="fdf9128b6bea0651ba58ad62c53b7ddaebe1ea6c" translate="yes" xml:space="preserve">
          <source>Windows icon file. If &lt;var&gt;icon&lt;/var&gt; is not a string, or if this parameter is not specified, the standard Emacs icon will be used.</source>
          <target state="translated">Windows 아이콘 파일. 경우 &lt;var&gt;icon&lt;/var&gt; 문자열이 아닌이 매개 변수가 지정되지 않은 경우, 또는, 표준 이맥스 아이콘이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="2eced8326ec21d9f7d69dba0bfb2bcdec56754d5" translate="yes" xml:space="preserve">
          <source>Windows in the same frame are organized into a &lt;em&gt;window tree&lt;/em&gt;, whose leaf nodes are the live windows. The internal nodes of a window tree are not live; they exist for the purpose of organizing the relationships between live windows. The root node of a window tree is called the &lt;em&gt;root window&lt;/em&gt;. It can be either a live window (if the frame has just one window), or an internal window.</source>
          <target state="translated">동일한 프레임의 &lt;em&gt;창&lt;/em&gt; 은 리프 노드가 라이브 창인 &lt;em&gt;창 트리&lt;/em&gt; 로 구성됩니다 . 창 트리의 내부 노드는 라이브가 아닙니다. 라이브 창 간의 관계를 구성하기 위해 존재합니다. 창 트리의 루트 노드를 &lt;em&gt;루트 창&lt;/em&gt; 이라고합니다 . 라이브 창 (프레임에 창이 하나만있는 경우) 또는 내부 창일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fa199959bd4c34b8dec232ab0f4f26f817f32d3a" translate="yes" xml:space="preserve">
          <source>Windows subdivide frames.</source>
          <target state="translated">Windows는 프레임을 세분화합니다.</target>
        </trans-unit>
        <trans-unit id="9625ad71e1126b85f0c9b31dbd77fa5cb6db2ec0" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;cl-case&lt;/code&gt;, you would need to explicitly declare a local variable &lt;code&gt;code&lt;/code&gt; to hold the return value of &lt;code&gt;get-return-code&lt;/code&gt;. Also &lt;code&gt;cl-case&lt;/code&gt; is difficult to use with strings because it uses &lt;code&gt;eql&lt;/code&gt; for comparison.</source>
          <target state="translated">함께 &lt;code&gt;cl-case&lt;/code&gt; , 당신은 명시 적으로 지역 변수를 선언 할 필요가 &lt;code&gt;code&lt;/code&gt; 의 반환 값 개최 &lt;code&gt;get-return-code&lt;/code&gt; . 또한 &lt;code&gt;cl-case&lt;/code&gt; 는 비교를 위해 &lt;code&gt;eql&lt;/code&gt; 을 사용하기 때문에 문자열과 함께 사용하기 어렵습니다 .</target>
        </trans-unit>
        <trans-unit id="379c5ad0fc05121b28d86312f7275e845327cfdf" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;debugger-stack-frame-as-list&lt;/code&gt; non-&lt;code&gt;nil&lt;/code&gt;, the above example would look as follows:</source>
          <target state="translated">와 &lt;code&gt;debugger-stack-frame-as-list&lt;/code&gt; 비 &lt;code&gt;nil&lt;/code&gt; 로서 보일 것 위의 예는 다음과 같다 :</target>
        </trans-unit>
        <trans-unit id="6100bd81973aa5e616388683b73c2c5e9ccd6566" translate="yes" xml:space="preserve">
          <source>With Emacs, you can have a drag event without even changing your clothes. A &lt;em&gt;drag event&lt;/em&gt; happens every time the user presses a mouse button and then moves the mouse to a different character position before releasing the button. Like all mouse events, drag events are represented in Lisp as lists. The lists record both the starting mouse position and the final position, like this:</source>
          <target state="translated">Emacs를 사용하면 옷을 갈아 입지 않고도 드래그 이벤트를 할 수 있습니다. &lt;em&gt;드래그 이벤트는&lt;/em&gt; 사용자가 마우스 버튼을 누른 후 버튼을 해제하기 전에 다른 문자 위치로 마우스를 이동 할 때마다 발생합니다. 모든 마우스 이벤트와 마찬가지로 드래그 이벤트는 Lisp에서 목록으로 표시됩니다. 목록은 다음과 같이 시작 마우스 위치와 최종 위치를 모두 기록합니다.</target>
        </trans-unit>
        <trans-unit id="d1dc946c2f6fe89324445abc6e222b559616382c" translate="yes" xml:space="preserve">
          <source>With a prefix argument &lt;var&gt;n&lt;/var&gt;, the temporary breakpoint is placed &lt;var&gt;n&lt;/var&gt; sexps beyond point. If the containing list ends before &lt;var&gt;n&lt;/var&gt; more elements, then the place to stop is after the containing expression.</source>
          <target state="translated">접두사 인수 &lt;var&gt;n&lt;/var&gt; 을 사용하면 임시 중단 점이 점을 넘어서 &lt;var&gt;n&lt;/var&gt; 개의 sexps에 배치 됩니다. 포함하는 목록이 &lt;var&gt;n&lt;/var&gt; 개 이상의 요소 앞에서 끝나는 경우 중지 할 위치는 포함하는 표현식 뒤입니다.</target>
        </trans-unit>
        <trans-unit id="ecb154911a9d6e366231dc08d7ca7f3855eaa8fd" translate="yes" xml:space="preserve">
          <source>With a prefix argument,</source>
          <target state="translated">접두사 인수를 사용하면</target>
        </trans-unit>
        <trans-unit id="210c23b8bcc2767909392a98f4eda932b17f5a83" translate="yes" xml:space="preserve">
          <source>With an argument of 0, unconditionally do &lt;em&gt;not&lt;/em&gt; make any backup file.</source>
          <target state="translated">0의 인수와 함께, 무조건 할 &lt;em&gt;수 없습니다&lt;/em&gt; 모든 백업 파일을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="8c81c5821676f0924542fa74b61fdd66d16a6e61" translate="yes" xml:space="preserve">
          <source>With an argument of 16 or 64, reflecting 2 or 3</source>
          <target state="translated">16 또는 64의 인수로 2 또는 3을 반영</target>
        </trans-unit>
        <trans-unit id="87eba365dd983ee0592230b13c20c52100f40dd2" translate="yes" xml:space="preserve">
          <source>With an argument of 4 or 64, reflecting 1 or 3</source>
          <target state="translated">4 또는 64의 인수로 1 또는 3 반영</target>
        </trans-unit>
        <trans-unit id="e7ce6ed10fead795cfac1fde7a353d1e9aebcb87" translate="yes" xml:space="preserve">
          <source>With an argument of zero, &lt;code&gt;recenter&lt;/code&gt; positions the current line at the top of the window. The command &lt;code&gt;recenter-top-bottom&lt;/code&gt; offers a more convenient way to achieve this.</source>
          <target state="translated">인수가 0 인 경우 &lt;code&gt;recenter&lt;/code&gt; 는 현재 행을 창의 맨 위에 배치합니다. &lt;code&gt;recenter-top-bottom&lt;/code&gt; 명령 은이를 수행하는보다 편리한 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="347d2530c8917d08eba5b99f61f3aa4d6352f05f" translate="yes" xml:space="preserve">
          <source>With one or more &lt;var&gt;divisors&lt;/var&gt;, this function divides &lt;var&gt;number&lt;/var&gt; by each divisor in &lt;var&gt;divisors&lt;/var&gt; in turn, and returns the quotient. With no &lt;var&gt;divisors&lt;/var&gt;, this function returns 1/&lt;var&gt;number&lt;/var&gt;, i.e., the multiplicative inverse of &lt;var&gt;number&lt;/var&gt;. Each argument may be a number or a marker.</source>
          <target state="translated">하나 이상의 &lt;var&gt;divisors&lt;/var&gt; 하면이 함수는 &lt;var&gt;number&lt;/var&gt; 를 각 &lt;var&gt;divisors&lt;/var&gt; 로 차례로 제수로 나누고 몫을 반환합니다. 아니오 &lt;var&gt;divisors&lt;/var&gt; 이 함수는 1 / 반환 &lt;var&gt;number&lt;/var&gt; , 즉,의 역수 &lt;var&gt;number&lt;/var&gt; . 각 인수는 숫자 또는 마커 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a3c3cd80ce77cd76a8344934a743105c47af6c03" translate="yes" xml:space="preserve">
          <source>With point at the start:</source>
          <target state="translated">시작 지점에서 :</target>
        </trans-unit>
        <trans-unit id="3566916c616498258bd7794ada3495127a35c723" translate="yes" xml:space="preserve">
          <source>With rare exceptions, the only reasonable way to use &lt;code&gt;make-variable-buffer-local&lt;/code&gt; in a Lisp package is for a variable which is used only within that package. Using it on a variable used by other packages would interfere with them.</source>
          <target state="translated">드문 예외를 제외 하고 Lisp 패키지에서 &lt;code&gt;make-variable-buffer-local&lt;/code&gt; 을 사용하는 유일한 합리적인 방법 은 해당 패키지 내에서만 사용되는 변수를위한 것입니다. 다른 패키지에서 사용하는 변수에 사용하면 방해가됩니다.</target>
        </trans-unit>
        <trans-unit id="f49f278bd7d6fdff3d1215f4f54950d09d622b6c" translate="yes" xml:space="preserve">
          <source>With some window managers you may have to customize the variable &lt;code&gt;frame-resize-pixelwise&lt;/code&gt; (see &lt;a href=&quot;frame-size#Frame-Size&quot;&gt;Frame Size&lt;/a&gt;) in order to make a frame truly appear maximized or full-screen. Moreover, some window managers might not support smooth transition between the various full-screen or maximization states. Customizing the variable &lt;code&gt;x-frame-normalize-before-maximize&lt;/code&gt; can help to overcome that.</source>
          <target state="translated">일부 창 관리자의 경우 프레임이 실제로 최대화되거나 전체 화면으로 표시되도록 하려면 가변 &lt;code&gt;frame-resize-pixelwise&lt;/code&gt; ( &lt;a href=&quot;frame-size#Frame-Size&quot;&gt;프레임 크기&lt;/a&gt; 참조 ) 를 사용자 정의해야 할 수 있습니다 . 또한 일부 창 관리자는 다양한 전체 화면 또는 최대화 상태 간의 원활한 전환을 지원하지 않을 수 있습니다. 변수 &lt;code&gt;x-frame-normalize-before-maximize&lt;/code&gt; 를 사용자 지정하면이 를 극복하는 데 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="46fdf2b4d7e3cd9b5e28a3b4a9a7952875281ecb" translate="yes" xml:space="preserve">
          <source>With some window managers you may have to set this to non-&lt;code&gt;nil&lt;/code&gt; in order to make a frame appear truly maximized or full-screen.</source>
          <target state="translated">일부 창 관리자의 경우 프레임이 완전히 최대화되거나 전체 화면으로 표시되도록하려면 이것을 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값으로 설정해야 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b1dfcbaccda3157f5fe6d62d6b90e1b8f41f4014" translate="yes" xml:space="preserve">
          <source>With the help of &lt;code&gt;apply&lt;/code&gt; (see &lt;a href=&quot;calling-functions#Calling-Functions&quot;&gt;Calling Functions&lt;/a&gt;), we can append all the lists in a list of lists:</source>
          <target state="translated">&lt;code&gt;apply&lt;/code&gt; ( &lt;a href=&quot;calling-functions#Calling-Functions&quot;&gt;함수 호출&lt;/a&gt; 참조) 의 도움으로 목록 목록에 모든 목록을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b2f47f160c5a2523aadfbc79ba2e6750a57bd5e3" translate="yes" xml:space="preserve">
          <source>With the return point in effect, &lt;code&gt;catch&lt;/code&gt; evaluates the forms of the &lt;var&gt;body&lt;/var&gt; in textual order. If the forms execute normally (without error or nonlocal exit) the value of the last body form is returned from the &lt;code&gt;catch&lt;/code&gt;.</source>
          <target state="translated">리턴 포인트가 적용되면 &lt;code&gt;catch&lt;/code&gt; 는 &lt;var&gt;body&lt;/var&gt; 의 형태를 텍스트 순서로 평가합니다 . 양식이 정상적으로 실행되면 (오류 또는 비 로컬 종료없이) 마지막 본문 양식의 값이 &lt;code&gt;catch&lt;/code&gt; 에서 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="10051c84c8f5c674f94fa417b4da657f0b49040c" translate="yes" xml:space="preserve">
          <source>With the second form of &lt;var&gt;variables&lt;/var&gt;, if &lt;var&gt;directory&lt;/var&gt; is the initial substring of the file&amp;rsquo;s directory, then &lt;var&gt;list&lt;/var&gt; is applied recursively by following the above rules; &lt;var&gt;list&lt;/var&gt; should be of one of the two forms accepted by this function in &lt;var&gt;variables&lt;/var&gt;.</source>
          <target state="translated">두 번째 형태의 &lt;var&gt;variables&lt;/var&gt; 에서 &lt;var&gt;directory&lt;/var&gt; 가 파일 디렉토리의 초기 하위 문자열 이면 위의 규칙에 따라 &lt;var&gt;list&lt;/var&gt; 가 재귀 적으로 적용됩니다. &lt;var&gt;list&lt;/var&gt; 은 &lt;var&gt;variables&lt;/var&gt; 에서이 함수가 허용하는 두 가지 형식 중 하나 여야 합니다 .</target>
        </trans-unit>
        <trans-unit id="7d29af94b07c044caf68181642a1733e49ac59d4" translate="yes" xml:space="preserve">
          <source>With this erroneous macro definition, the program worked fine when interpreted but failed when compiled. This macro definition called &lt;code&gt;set-buffer-multibyte&lt;/code&gt; during compilation, which was wrong, and then did nothing when the compiled package was run. The definition that the programmer really wanted was this:</source>
          <target state="translated">이 잘못된 매크로 정의를 사용하면 프로그램이 해석 될 때는 제대로 작동했지만 컴파일 할 때는 실패했습니다. 이 매크로 정의는 컴파일 중에 &lt;code&gt;set-buffer-multibyte&lt;/code&gt; 라고 하는데, 이는 잘못되었으며 컴파일 된 패키지가 실행될 때 아무 작업도 수행하지 않았습니다. 프로그래머가 정말로 원했던 정의는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a1d036ceb743d38c138e7a131e52930adf1628cc" translate="yes" xml:space="preserve">
          <source>With this method, you can easily define different commands for different links. Furthermore, the global definition of</source>
          <target state="translated">이 방법을 사용하면 서로 다른 링크에 대해 서로 다른 명령을 쉽게 정의 할 수 있습니다. 또한, 글로벌 정의</target>
        </trans-unit>
        <trans-unit id="35b5bb0fc1084b49d0782acec9ceac821436a3ab" translate="yes" xml:space="preserve">
          <source>With this method, you can specify any order for the list, but there is no danger of losing a buffer or adding something that is not a valid live buffer.</source>
          <target state="translated">이 방법을 사용하면 목록의 순서를 지정할 수 있지만 버퍼가 손실되거나 유효한 라이브 버퍼가 아닌 것을 추가 할 위험은 없습니다.</target>
        </trans-unit>
        <trans-unit id="4e98f5e43b9ac57e09faf03bee04730bd5197ff0" translate="yes" xml:space="preserve">
          <source>With very few exceptions, most modules need to exchange data with Lisp programs that call them: accept arguments to module functions and return values from module functions. For this purpose, the module</source>
          <target state="translated">거의 예외를 제외하고 대부분의 모듈은이를 호출하는 Lisp 프로그램과 데이터를 교환해야합니다. 모듈 함수에 대한 인수를 받아들이고 모듈 함수에서 값을 반환합니다. 이를 위해 모듈은</target>
        </trans-unit>
        <trans-unit id="7caf467bdd796e36080976d3906617d560556261" translate="yes" xml:space="preserve">
          <source>Within Edebug, the recursion depth appears one deeper than the recursion depth outside Edebug. This is not true of the automatically updated evaluation list window.</source>
          <target state="translated">Edebug 내에서 재귀 깊이는 Edebug 외부의 재귀 깊이보다 한 단계 더 깊게 나타납니다. 자동으로 업데이트 된 평가 목록 창에는 해당되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4731ff9126f64e37ebf637bf6384565db7275f18" translate="yes" xml:space="preserve">
          <source>Within Edebug, you normally view an Emacs buffer showing the source of the Lisp code you are debugging. This is referred to as the &lt;em&gt;source code buffer&lt;/em&gt;, and it is temporarily read-only.</source>
          <target state="translated">Edebug 내에서 일반적으로 디버깅중인 Lisp 코드의 소스를 보여주는 Emacs 버퍼를 봅니다. 이를 &lt;em&gt;소스 코드 버퍼&lt;/em&gt; 라고하며 일시적으로 읽기 전용입니다.</target>
        </trans-unit>
        <trans-unit id="d1bb6325e0ab022386022d97ac9161d9afc1f618" translate="yes" xml:space="preserve">
          <source>Within a macro definition, you can use the &lt;code&gt;declare&lt;/code&gt; form (see &lt;a href=&quot;defining-macros#Defining-Macros&quot;&gt;Defining Macros&lt;/a&gt;) to specify how</source>
          <target state="translated">매크로 정의 내에서 &lt;code&gt;declare&lt;/code&gt; 양식 ( &lt;a href=&quot;defining-macros#Defining-Macros&quot;&gt;매크로 정의&lt;/a&gt; 참조 )을 사용하여 방법을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ec232c680982df144b8116755db517b98c19d63" translate="yes" xml:space="preserve">
          <source>Within the function &lt;code&gt;For&lt;/code&gt; itself, the local variable &lt;code&gt;args&lt;/code&gt; refers to objects controlled by Emacs&amp;rsquo;s stack-marking garbage collector. Although the garbage collector does not reclaim objects reachable from C &lt;code&gt;Lisp_Object&lt;/code&gt; stack variables, it may move some of the components of an object, such as the contents of a string or the text of a buffer. Therefore, functions that access these components must take care to refetch their addresses after performing Lisp evaluation. This means that instead of keeping C pointers to string contents or buffer text, the code should keep the buffer or string position, and recompute the C pointer from the position after performing Lisp evaluation. Lisp evaluation can occur via calls to &lt;code&gt;eval_sub&lt;/code&gt; or &lt;code&gt;Feval&lt;/code&gt;, either directly or indirectly.</source>
          <target state="translated">&lt;code&gt;For&lt;/code&gt; 자체 함수 내에서 지역 변수 &lt;code&gt;args&lt;/code&gt; 는 Emacs의 스택 표시 가비지 수집기에 의해 제어되는 객체를 참조합니다. 가비지 수집기는 C &lt;code&gt;Lisp_Object&lt;/code&gt; 스택 변수 에서 도달 할 수있는 개체를 회수하지 않지만 문자열 내용이나 버퍼 텍스트와 같은 개체의 일부 구성 요소를 이동할 수 있습니다. 따라서 이러한 구성 요소에 액세스하는 함수는 Lisp 평가를 수행 한 후 주소를 다시 가져 오도록주의해야합니다. 즉, 코드는 문자열 내용이나 버퍼 텍스트에 대한 C 포인터를 유지하는 대신 버퍼 또는 문자열 위치를 유지하고 Lisp 평가를 수행 한 후 위치에서 C 포인터를 다시 계산해야합니다. Lisp 평가는 &lt;code&gt;eval_sub&lt;/code&gt; 또는 &lt;code&gt;Feval&lt;/code&gt; , 직접 또는 간접.</target>
        </trans-unit>
        <trans-unit id="4eeaacf4f0fbb0afa707847e230d8aa614f5ae4c" translate="yes" xml:space="preserve">
          <source>Word constituents: &amp;lsquo;</source>
          <target state="translated">단어 구성 요소 : '</target>
        </trans-unit>
        <trans-unit id="9572417b1d5255e84a942b3aa87434cf833f506f" translate="yes" xml:space="preserve">
          <source>Word matching regards &lt;var&gt;string&lt;/var&gt; as a sequence of words, disregarding punctuation that separates them. It searches the buffer for the same sequence of words. Each word must be distinct in the buffer (searching for the word &amp;lsquo;</source>
          <target state="translated">단어 일치는 &lt;var&gt;string&lt;/var&gt; 을 구분하는 구두점을 무시하고 문자열 을 단어 시퀀스로 간주 합니다. 버퍼에서 동일한 단어 시퀀스를 검색합니다. 각 단어는 버퍼에서 구별되어야합니다 (단어 '</target>
        </trans-unit>
        <trans-unit id="00040bab8a787438c2c0cf5248ac025642115fad" translate="yes" xml:space="preserve">
          <source>Work</source>
          <target state="translated">Work</target>
        </trans-unit>
        <trans-unit id="91af2af195b855fa2238bc0f535f365700aeec06" translate="yes" xml:space="preserve">
          <source>Working around the parser&amp;rsquo;s limitations.</source>
          <target state="translated">파서의 한계를 해결합니다.</target>
        </trans-unit>
        <trans-unit id="cb8d5d1705b3b9faf14d2484c5e4e44780d9afad" translate="yes" xml:space="preserve">
          <source>Write a documentation string for this command that describes the special commands available in this mode. See &lt;a href=&quot;mode-help#Mode-Help&quot;&gt;Mode Help&lt;/a&gt;.</source>
          <target state="translated">이 모드에서 사용할 수있는 특수 명령을 설명하는이 명령에 대한 문서 문자열을 작성하십시오. &lt;a href=&quot;mode-help#Mode-Help&quot;&gt;모드 도움말을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="864a8eef75c1c894b7cab5feb09ac3718b4b9410" translate="yes" xml:space="preserve">
          <source>Write display actions without stress</source>
          <target state="translated">스트레스없이 디스플레이 작업 작성</target>
        </trans-unit>
        <trans-unit id="fd000642f00fc412d748e915b7fbf684c1227f4c" translate="yes" xml:space="preserve">
          <source>Writing C code for Emacs.</source>
          <target state="translated">Emacs 용 C 코드 작성.</target>
        </trans-unit>
        <trans-unit id="660c8694caa7ef2967d6e21173a5034c7875f8fd" translate="yes" xml:space="preserve">
          <source>Writing Code to Handle Errors</source>
          <target state="translated">오류 처리를위한 코드 작성</target>
        </trans-unit>
        <trans-unit id="4af63b63f2a7ae43c3f6325bbc82300036f0434a" translate="yes" xml:space="preserve">
          <source>Writing Custom themes.</source>
          <target state="translated">사용자 정의 테마 작성.</target>
        </trans-unit>
        <trans-unit id="f5c12b8b18b9d8c5848942dbd94e868460b590ae" translate="yes" xml:space="preserve">
          <source>Writing Dynamically-Loaded Modules</source>
          <target state="translated">동적으로로드 된 모듈 작성</target>
        </trans-unit>
        <trans-unit id="cad83bf497fdcbae89ec83a1f8895ba4a2abe72d" translate="yes" xml:space="preserve">
          <source>Writing Emacs Primitives</source>
          <target state="translated">Emacs 프리미티브 작성</target>
        </trans-unit>
        <trans-unit id="fb433a8ef0470f85a2d44720d6d0064769e11ef9" translate="yes" xml:space="preserve">
          <source>Writing Module Functions</source>
          <target state="translated">모듈 함수 작성</target>
        </trans-unit>
        <trans-unit id="8b1775056003275de1952faafc3b7f9ff185031c" translate="yes" xml:space="preserve">
          <source>Writing a good indentation function can be difficult and to a large extent it is still a black art. Many major mode authors will start by writing a simple indentation function that works for simple cases, for example by comparing with the indentation of the previous text line. For most programming languages that are not really line-based, this tends to scale very poorly: improving such a function to let it handle more diverse situations tends to become more and more difficult, resulting in the end with a large, complex, unmaintainable indentation function which nobody dares to touch.</source>
          <target state="translated">좋은 들여 쓰기 함수를 작성하는 것은 어려울 수 있으며 대체로 여전히 검은 예술입니다. 많은 주요 모드 작성자는 예를 들어 이전 텍스트 줄의 들여 쓰기와 비교하여 간단한 경우에 작동하는 간단한 들여 쓰기 함수를 작성하는 것으로 시작합니다. 실제로 줄 기반이 아닌 대부분의 프로그래밍 언어의 경우 확장이 매우 약한 경향이 있습니다. 이러한 기능을 개선하여 더 다양한 상황을 처리 할 수 ​​있도록하는 것은 점점 더 어려워지는 경향이 있으며 결과적으로 크고 복잡하며 유지 관리 할 수없는 들여 쓰기가 발생합니다. 아무도 감히 만지지 않는 기능.</target>
        </trans-unit>
        <trans-unit id="2a05f677633a2316415855a3c46061d24cc1bae7" translate="yes" xml:space="preserve">
          <source>Writing a module and integrating it into Emacs comprises the following tasks:</source>
          <target state="translated">모듈을 작성하고 Emacs에 통합하는 작업은 다음 작업으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="87b5bc351f6388fc831c182bad1fddd07f5a27e5" translate="yes" xml:space="preserve">
          <source>Writing and using documentation strings.</source>
          <target state="translated">문서 문자열 작성 및 사용.</target>
        </trans-unit>
        <trans-unit id="e0cfa66332938119e483b2dd8067f05476ab0cd5" translate="yes" xml:space="preserve">
          <source>Writing changed buffers back into files.</source>
          <target state="translated">변경된 버퍼를 다시 파일에 기록합니다.</target>
        </trans-unit>
        <trans-unit id="a8d27d5a6ca7448a081f7d90c27269f1bafb63d4" translate="yes" xml:space="preserve">
          <source>Writing customization group definitions.</source>
          <target state="translated">사용자 정의 그룹 정의 작성.</target>
        </trans-unit>
        <trans-unit id="2676ae17d67dd3eff0363728ab580e2cc26726e5" translate="yes" xml:space="preserve">
          <source>Writing display actions can be a pain because one has to lump together action functions and action alists in one huge list. (Historical reasons prevented us from having &lt;code&gt;display-buffer&lt;/code&gt; support separate arguments for these.) It might help to memorize some basic forms like the ones listed below:</source>
          <target state="translated">하나의 거대한 목록에 액션 함수와 액션 목록을 함께 묶어야하기 때문에 디스플레이 액션을 작성하는 것은 고통 스러울 수 있습니다. (역사적인 이유로 인해 &lt;code&gt;display-buffer&lt;/code&gt; 가 이들에 대한 별도의 인수를 지원 하지 못했습니다 .) 아래 나열된 것과 같은 몇 가지 기본 형식을 외우면 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c745756ceb786034792158e8cc61d7e702e6c1d7" translate="yes" xml:space="preserve">
          <source>Writing initialization code for the module.</source>
          <target state="translated">모듈에 대한 초기화 코드를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="d56a22849f994b20f6600cd3460bcd34f83598c7" translate="yes" xml:space="preserve">
          <source>Writing loadable modules for Emacs.</source>
          <target state="translated">Emacs 용로드 가능한 모듈 작성.</target>
        </trans-unit>
        <trans-unit id="959325f732b116da9f4c17d9d52b38658b0cbc9a" translate="yes" xml:space="preserve">
          <source>Writing new files from parts of buffers.</source>
          <target state="translated">버퍼의 일부에서 새 파일을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="5bf31f22f8e9138838ff5aca48a3d16351326757" translate="yes" xml:space="preserve">
          <source>Writing one or more module functions.</source>
          <target state="translated">하나 이상의 모듈 함수를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="626850315f11a109b89b0e2ca304b47d1ebd1583" translate="yes" xml:space="preserve">
          <source>Writing to Files</source>
          <target state="translated">파일에 쓰기</target>
        </trans-unit>
        <trans-unit id="df13e2249d0344c5995feed860c249b907bbf885" translate="yes" xml:space="preserve">
          <source>Writing your own completion function.</source>
          <target state="translated">자신 만의 완성 기능 작성.</target>
        </trans-unit>
        <trans-unit id="81cecdbcf5a884358d6d64dd07151bcc864ea3cb" translate="yes" xml:space="preserve">
          <source>Wrong Time</source>
          <target state="translated">잘못된 시간</target>
        </trans-unit>
        <trans-unit id="847312eff98f615b33d04af640ff3b0aef444a8d" translate="yes" xml:space="preserve">
          <source>Wrong number of arguments</source>
          <target state="translated">잘못된 인수 개수</target>
        </trans-unit>
        <trans-unit id="6785d9d939e22abdd99b9e4cc3100ddf46a32841" translate="yes" xml:space="preserve">
          <source>Wrong type argument</source>
          <target state="translated">잘못된 유형 인수</target>
        </trans-unit>
        <trans-unit id="1116afb51e066f31e7f64320374c74be96ef6620" translate="yes" xml:space="preserve">
          <source>Wrote &lt;var&gt;filename&lt;/var&gt;</source>
          <target state="translated">쓴 &lt;var&gt;filename&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="c032adc1ff629c9b66f22749ad667e6beadf144b" translate="yes" xml:space="preserve">
          <source>X</source>
          <target state="translated">X</target>
        </trans-unit>
        <trans-unit id="701b9b6003d2ac52c5714c24742c56c8bfed8cfd" translate="yes" xml:space="preserve">
          <source>X Resources</source>
          <target state="translated">X 리소스</target>
        </trans-unit>
        <trans-unit id="91ad8eeae3f28e745985c0e4c09aa39f01cb0d2a" translate="yes" xml:space="preserve">
          <source>X resource settings typically apply to all frames. If you want to specify some X resources solely for the sake of the initial frame, and you don&amp;rsquo;t want them to apply to subsequent frames, here&amp;rsquo;s how to achieve this. Specify parameters in &lt;code&gt;default-frame-alist&lt;/code&gt; to override the X resources for subsequent frames; then, to prevent these from affecting the initial frame, specify the same parameters in &lt;code&gt;initial-frame-alist&lt;/code&gt; with values that match the X resources.</source>
          <target state="translated">X 리소스 설정은 일반적으로 모든 프레임에 적용됩니다. 초기 프레임을 위해서만 일부 X 리소스를 지정하고 후속 프레임에 적용하지 않으려는 경우이를 달성하는 방법은 다음과 같습니다. 후속 프레임의 X 리소스를 재정의하려면 &lt;code&gt;default-frame-alist&lt;/code&gt; 에 매개 변수를 지정합니다 . 그런 다음 이들이 초기 프레임에 영향을주지 않도록 하려면 X 리소스와 일치하는 값을 사용하여 &lt;code&gt;initial-frame-alist&lt;/code&gt; 에 동일한 매개 변수를 지정하십시오 .</target>
        </trans-unit>
        <trans-unit id="295b502d3fe0cbfa2c47b23759be43a0d24bc09f" translate="yes" xml:space="preserve">
          <source>XBM Images</source>
          <target state="translated">XBM 이미지</target>
        </trans-unit>
        <trans-unit id="c0aa9ef764d832b80428d756a731a94251b0e3a1" translate="yes" xml:space="preserve">
          <source>XML</source>
          <target state="translated">XML</target>
        </trans-unit>
        <trans-unit id="6b648f9c53c1f8ff2d73b0125b92611fa1d058b9" translate="yes" xml:space="preserve">
          <source>XPM Images</source>
          <target state="translated">XPM 이미지</target>
        </trans-unit>
        <trans-unit id="c25d1d4d6e52e9b859267b4c39eb8ed6ab93b267" translate="yes" xml:space="preserve">
          <source>XRandr</source>
          <target state="translated">XRandr</target>
        </trans-unit>
        <trans-unit id="2e0cbcf7084f2751edbe292078a9e429a70d4a39" translate="yes" xml:space="preserve">
          <source>Xinerama</source>
          <target state="translated">Xinerama</target>
        </trans-unit>
        <trans-unit id="23eb4d3f4155395a74e9d534f97ff4c1908f5aac" translate="yes" xml:space="preserve">
          <source>Y</source>
          <target state="translated">Y</target>
        </trans-unit>
        <trans-unit id="28da44953259e9f3ad2f2968f0c36dd2281452a2" translate="yes" xml:space="preserve">
          <source>Yanking</source>
          <target state="translated">Yanking</target>
        </trans-unit>
        <trans-unit id="5a9d6022b3fc910ff5ce0ae8a84f4a2d88164efc" translate="yes" xml:space="preserve">
          <source>Yanking means inserting text from the kill ring, but it does not insert the text blindly. The &lt;code&gt;yank&lt;/code&gt; command, and related commands, use &lt;code&gt;insert-for-yank&lt;/code&gt; to perform special processing on the text before it is inserted.</source>
          <target state="translated">Yanking은 킬 링에서 텍스트를 삽입하는 것을 의미하지만 텍스트를 맹목적으로 삽입하지는 않습니다. &lt;code&gt;yank&lt;/code&gt; 명령 및 관련 명령, 사용 &lt;code&gt;insert-for-yank&lt;/code&gt; 가 삽입하기 전에 텍스트에 특수 처리를 수행하도록.</target>
        </trans-unit>
        <trans-unit id="c8557f4942f696413e60e05c86fcdfeb0830b5eb" translate="yes" xml:space="preserve">
          <source>Year numbers less than 100 are not treated specially. If you want them to stand for years above 1900, or years above 2000, you must alter them yourself before you call &lt;code&gt;encode-time&lt;/code&gt;. The operating system limits the range of time and zone values.</source>
          <target state="translated">100 미만의 연도 번호는 특별히 처리되지 않습니다. 1900 년 이상 또는 2000 년 이상을 유지하려면 &lt;code&gt;encode-time&lt;/code&gt; 을 호출하기 전에 직접 변경해야합니다 . 운영 체제는 시간 및 구역 값의 범위를 제한합니다.</target>
        </trans-unit>
        <trans-unit id="4387457351337c625059239292f6521a6452f04f" translate="yes" xml:space="preserve">
          <source>Yes-or-No Queries</source>
          <target state="translated">예 또는 아니요 쿼리</target>
        </trans-unit>
        <trans-unit id="bcb8f8f01a5f0d55249b6245600855530c735d13" translate="yes" xml:space="preserve">
          <source>Yield execution to the next runnable thread.</source>
          <target state="translated">다음 실행 가능한 스레드에 실행을 양보합니다.</target>
        </trans-unit>
        <trans-unit id="55d573b4dbea36ece9f7bfb7fec6ee20df0b57f6" translate="yes" xml:space="preserve">
          <source>You can &lt;em&gt;raise&lt;/em&gt; a frame to the top of that order or &lt;em&gt;lower&lt;/em&gt; a frame to its bottom by using the functions &lt;code&gt;raise-frame&lt;/code&gt; and &lt;code&gt;lower-frame&lt;/code&gt;. You can &lt;em&gt;restack&lt;/em&gt; a frame directly above or below another frame using the function &lt;code&gt;frame-restack&lt;/code&gt;.</source>
          <target state="translated">넌 수 &lt;em&gt;상향&lt;/em&gt; 순서의 톱 프레임 또는 &lt;em&gt;낮추는&lt;/em&gt; 기능을 이용하여 바닥 프레임 &lt;code&gt;raise-frame&lt;/code&gt; 과 &lt;code&gt;lower-frame&lt;/code&gt; . &lt;code&gt;frame-restack&lt;/code&gt; 함수를 사용하여 다른 프레임 바로 위 또는 아래에 프레임을 재 &lt;em&gt;접착&lt;/em&gt; 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0c4f5384f714810b4a431619bd383e5278926561" translate="yes" xml:space="preserve">
          <source>You can access or change the position of a frame using the frame parameters &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;top&lt;/code&gt; (see &lt;a href=&quot;position-parameters#Position-Parameters&quot;&gt;Position Parameters&lt;/a&gt;). Here are two additional functions for working with the positions of an existing, visible frame. For both functions, the argument &lt;var&gt;frame&lt;/var&gt; must denote a live frame and defaults to the selected frame.</source>
          <target state="translated">&lt;code&gt;left&lt;/code&gt; 및 &lt;code&gt;top&lt;/code&gt; 프레임 매개 변수를 사용하여 프레임에 액세스하거나 위치를 변경할 수 있습니다 ( &lt;a href=&quot;position-parameters#Position-Parameters&quot;&gt;위치 매개 변수&lt;/a&gt; 참조 ). 다음은 기존의 보이는 프레임 위치 작업을위한 두 가지 추가 기능입니다. 두 함수의 경우 인수 &lt;var&gt;frame&lt;/var&gt; 은 라이브 프레임을 나타내야하며 기본값은 선택한 프레임으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="2bacaf650357135a358ed5a74c9e5319c617d436" translate="yes" xml:space="preserve">
          <source>You can also &lt;em&gt;splice&lt;/em&gt; an evaluated value into the resulting list, using the special marker &amp;lsquo;</source>
          <target state="translated">특수 마커 '를 사용하여 평가 된 값을 결과 목록에 &lt;em&gt;스플 라이스&lt;/em&gt; 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f8782cde9ee59f529bb9d1c373d6dc44b72bbe90" translate="yes" xml:space="preserve">
          <source>You can also arrange to override some of the actions of the terminal-specific library by using &lt;code&gt;tty-setup-hook&lt;/code&gt;. This is a normal hook that Emacs runs after initializing a new text terminal. You could use this hook to define initializations for terminals that do not have their own libraries. See &lt;a href=&quot;hooks#Hooks&quot;&gt;Hooks&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;tty-setup-hook&lt;/code&gt; 을 사용하여 터미널 별 라이브러리의 일부 작업을 재정의하도록 배열 할 수도 있습니다 . 이것은 새 텍스트 터미널을 초기화 한 후 Emacs가 실행하는 일반적인 후크입니다. 이 후크를 사용하여 자체 라이브러리가없는 터미널에 대한 초기화를 정의 할 수 있습니다. &lt;a href=&quot;hooks#Hooks&quot;&gt;후크를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a8f0ac98fd6b6d6fc1c3726734f7c2cd1bcbb63f" translate="yes" xml:space="preserve">
          <source>You can also create a new hash table using the printed representation for hash tables. The Lisp reader can read this printed representation, provided each element in the specified hash table has a valid read syntax (see &lt;a href=&quot;printed-representation#Printed-Representation&quot;&gt;Printed Representation&lt;/a&gt;). For instance, the following specifies a new hash table containing the keys &lt;code&gt;key1&lt;/code&gt; and &lt;code&gt;key2&lt;/code&gt; (both symbols) associated with &lt;code&gt;val1&lt;/code&gt; (a symbol) and &lt;code&gt;300&lt;/code&gt; (a number) respectively.</source>
          <target state="translated">해시 테이블에 대한 인쇄 된 표현을 사용하여 새 해시 테이블을 만들 수도 있습니다. Lisp 판독기는 지정된 해시 테이블의 각 요소에 유효한 읽기 구문이있는 경우이 인쇄 된 표현을 읽을 수 있습니다 ( &lt;a href=&quot;printed-representation#Printed-Representation&quot;&gt;인쇄 된 표현&lt;/a&gt; 참조 ). 예를 들어, 다음은 각각 &lt;code&gt;val1&lt;/code&gt; (기호) 및 &lt;code&gt;300&lt;/code&gt; (숫자) 과 연관된 &lt;code&gt;key1&lt;/code&gt; 및 &lt;code&gt;key2&lt;/code&gt; (두 기호) 키를 포함하는 새 해시 테이블을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="1f5cd6796ce308889fc7c51368b54257a583731e" translate="yes" xml:space="preserve">
          <source>You can also create network connections by operating at a lower level than that of &lt;code&gt;open-network-stream&lt;/code&gt;, using &lt;code&gt;make-network-process&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;make-network-process&lt;/code&gt; 를 사용하여 &lt;code&gt;open-network-stream&lt;/code&gt; 보다 낮은 수준에서 작동하여 네트워크 연결을 만들 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="868f9a29ec40f4dbab30a0cfc4d78838b525c929" translate="yes" xml:space="preserve">
          <source>You can also define an edebug specification for a macro separately from the macro definition with &lt;code&gt;def-edebug-spec&lt;/code&gt;. Adding &lt;code&gt;debug&lt;/code&gt; declarations is preferred, and more convenient, for macro definitions in Lisp, but &lt;code&gt;def-edebug-spec&lt;/code&gt; makes it possible to define Edebug specifications for special forms implemented in C.</source>
          <target state="translated">&lt;code&gt;def-edebug-spec&lt;/code&gt; 을 사용하여 매크로 정의와 별도로 매크로에 대한 edebug 사양을 정의 할 수도 있습니다 . Lisp의 매크로 정의에는 &lt;code&gt;debug&lt;/code&gt; 선언을 추가 하는 것이 선호되고 더 편리하지만 &lt;code&gt;def-edebug-spec&lt;/code&gt; 을 사용하면 C로 구현 된 특수 양식에 대한 Edebug 사양을 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd22228cb1960d0708a09aa3e9b6172e445a7acf" translate="yes" xml:space="preserve">
          <source>You can also give these names in another style, adding a colon after the double-dash and replacing each single dash with capitalization of the following word. Thus, &lt;code&gt;&quot;--:singleLine&quot;&lt;/code&gt;, is equivalent to &lt;code&gt;&quot;--single-line&quot;&lt;/code&gt;.</source>
          <target state="translated">또한 이러한 이름을 다른 스타일로 지정하여 이중 대시 뒤에 콜론을 추가하고 각 단일 대시를 다음 단어의 대문자로 바꿀 수 있습니다. 따라서 &lt;code&gt;&quot;--:singleLine&quot;&lt;/code&gt; 은 &lt;code&gt;&quot;--single-line&quot;&lt;/code&gt; 과 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="bf4c2b4229417625b85b55d1833e6731a73e611e" translate="yes" xml:space="preserve">
          <source>You can also include character ranges in a character alternative, by writing the starting and ending characters with a &amp;lsquo;</source>
          <target state="translated">시작 및 끝 문자를 '로 작성하여 대체 문자에 문자 범위를 포함 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="a34fcc698dd0977adbbd456e7db72540166db69b" translate="yes" xml:space="preserve">
          <source>You can also print circular structures and structures that share elements more informatively by binding &lt;code&gt;print-circle&lt;/code&gt; to a non-&lt;code&gt;nil&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;print-circle&lt;/code&gt; 을 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값 에 바인딩하여보다 정보 적으로 요소를 공유하는 원형 구조 및 구조를 인쇄 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fc98edffac674b6d0f86a7a98064ce2d71ed631a" translate="yes" xml:space="preserve">
          <source>You can also say that a function is a primitive by specifying a file name ending in &amp;lsquo;</source>
          <target state="translated">'로 끝나는 파일 이름을 지정하여 함수가 기본 요소라고 말할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="a25730302dd2f2ffc5d19e6cf673d04d2ee0d064" translate="yes" xml:space="preserve">
          <source>You can also set the margin widths immediately.</source>
          <target state="translated">여백 너비를 즉시 설정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ebb34ba8bb7e00f0cb0ae1eb4abd588d3d4e243" translate="yes" xml:space="preserve">
          <source>You can also specify &lt;code&gt;nil&lt;/code&gt; for &lt;var&gt;parent&lt;/var&gt;. This gives the new mode no parent. Then &lt;code&gt;define-derived-mode&lt;/code&gt; behaves as described above, but, of course, omits all actions connected with &lt;var&gt;parent&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;parent&lt;/var&gt; 에 &lt;code&gt;nil&lt;/code&gt; 을 지정할 수도 있습니다 . 이렇게하면 새 모드에 부모가 없습니다. 그런 다음 &lt;code&gt;define-derived-mode&lt;/code&gt; 는 위에서 설명한대로 동작하지만, 물론 &lt;var&gt;parent&lt;/var&gt; 와 연결된 모든 작업을 생략합니다 .</target>
        </trans-unit>
        <trans-unit id="1b52ac13e6b9b4664324da8162b7dd0ecb723d8a" translate="yes" xml:space="preserve">
          <source>You can also specify other valid faces as the value of &lt;var&gt;face&lt;/var&gt;. If specified, that face provides the &lt;code&gt;face&lt;/code&gt; property for characters whose face is not specified by &lt;var&gt;format&lt;/var&gt;.</source>
          <target state="translated">다른 유효한면을 &lt;var&gt;face&lt;/var&gt; 값으로 지정할 수도 있습니다 . 지정된 경우 해당 얼굴은 &lt;var&gt;format&lt;/var&gt; 에 의해 얼굴이 지정되지 않은 캐릭터에 대한 &lt;code&gt;face&lt;/code&gt; 속성을 제공 합니다 .</target>
        </trans-unit>
        <trans-unit id="82949a550ea547e58a63f94e3a916a0b67cd9770" translate="yes" xml:space="preserve">
          <source>You can also specify the field width and type of padding for any of these &amp;lsquo;</source>
          <target state="translated">이러한 '에 대해 필드 너비와 패딩 유형을 지정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="518bc5ccf190a3a7486fc251988bfa69fcc6044f" translate="yes" xml:space="preserve">
          <source>You can also specify the field width by following the &amp;lsquo;</source>
          <target state="translated">'를 따라 필드 너비를 지정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="bdc0d6d5e9fefdf0bc4a1580707e889916fbf4f8" translate="yes" xml:space="preserve">
          <source>You can also supply a second string, called the help string, as follows:</source>
          <target state="translated">다음과 같이 도움말 문자열이라는 두 번째 문자열을 제공 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="da858753ded8e48ae4cf419db7c7ee2cf316d97f" translate="yes" xml:space="preserve">
          <source>You can also suppress compiler warnings within a certain expression using the &lt;code&gt;with-suppressed-warnings&lt;/code&gt; macro:</source>
          <target state="translated">&lt;code&gt;with-suppressed-warnings&lt;/code&gt; 매크로를 사용하여 특정 표현식 내에서 컴파일러 경고를 억제 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="66c5aa3a5e0516f6cc8529bf81c65e40d2cb6288" translate="yes" xml:space="preserve">
          <source>You can also tell &lt;code&gt;display-buffer&lt;/code&gt; to mark a window it creates as dedicated to its buffer by providing a suitable &lt;code&gt;dedicated&lt;/code&gt; action alist entry (see &lt;a href=&quot;buffer-display-action-alists#Buffer-Display-Action-Alists&quot;&gt;Buffer Display Action Alists&lt;/a&gt;).</source>
          <target state="translated">또한 적절한 &lt;code&gt;dedicated&lt;/code&gt; 작업 목록 항목 을 제공하여 만든 창을 해당 버퍼 전용으로 표시하도록 &lt;code&gt;display-buffer&lt;/code&gt; 에 지시 할 수 있습니다 ( &lt;a href=&quot;buffer-display-action-alists#Buffer-Display-Action-Alists&quot;&gt;Buffer Display Action Alists&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="f2ebb37ec21552e099e7e22d48d5fd968fe5a037" translate="yes" xml:space="preserve">
          <source>You can also use a function as &lt;var&gt;collection&lt;/var&gt;. Then the function is solely responsible for performing completion; &lt;code&gt;try-completion&lt;/code&gt; returns whatever this function returns. The function is called with three arguments: &lt;var&gt;string&lt;/var&gt;, &lt;var&gt;predicate&lt;/var&gt; and &lt;code&gt;nil&lt;/code&gt; (the third argument is so that the same function can be used in &lt;code&gt;all-completions&lt;/code&gt; and do the appropriate thing in either case). See &lt;a href=&quot;programmed-completion#Programmed-Completion&quot;&gt;Programmed Completion&lt;/a&gt;.</source>
          <target state="translated">함수를 &lt;var&gt;collection&lt;/var&gt; 사용할 수도 있습니다 . 그런 다음 기능은 완료를 수행하는 데 전적으로 책임이 있습니다. &lt;code&gt;try-completion&lt;/code&gt; 은이 함수가 반환하는 모든 것을 반환합니다. 이 함수는 &lt;var&gt;string&lt;/var&gt; , &lt;var&gt;predicate&lt;/var&gt; 및 &lt;code&gt;nil&lt;/code&gt; 의 세 가지 인수로 호출됩니다 (세 번째 인수는 동일한 함수를 &lt;code&gt;all-completions&lt;/code&gt; 에서 사용할 수 있고 두 경우 모두 적절한 작업을 수행하는 것입니다). &lt;a href=&quot;programmed-completion#Programmed-Completion&quot;&gt;프로그래밍 된 완성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6d9b4353133f96f073f8dea803a7cd01f60d0d52" translate="yes" xml:space="preserve">
          <source>You can also use a magic comment to execute a form at build time &lt;em&gt;without&lt;/em&gt; executing it when the file itself is loaded. To do this, write the form &lt;em&gt;on the same line&lt;/em&gt; as the magic comment. Since it is in a comment, it does nothing when you load the source file; but</source>
          <target state="translated">매직 주석을 사용 하여 파일 자체가로드 될 때 실행 &lt;em&gt;하지 않고&lt;/em&gt; 빌드시 양식을 실행할 수도 있습니다 . 이렇게하려면 매직 주석 &lt;em&gt;과 같은 줄에&lt;/em&gt; 양식 &lt;em&gt;을&lt;/em&gt; 작성하십시오 . 주석에 있기 때문에 소스 파일을로드 할 때 아무 작업도 수행하지 않습니다. 그러나</target>
        </trans-unit>
        <trans-unit id="865c260262df33c6b60d52560daf7f9929f29f1b" translate="yes" xml:space="preserve">
          <source>You can also use hexadecimal escape sequences (&amp;lsquo;</source>
          <target state="translated">16 진수 이스케이프 시퀀스 ( '</target>
        </trans-unit>
        <trans-unit id="1388e16fe2b1ce09a74738185edf6c3b225ca43f" translate="yes" xml:space="preserve">
          <source>You can also use prefixes &amp;lsquo;</source>
          <target state="translated">접두사 '</target>
        </trans-unit>
        <trans-unit id="f6a8a51fa415b48c5179ea4eda78f486ca7b4f4d" translate="yes" xml:space="preserve">
          <source>You can also use the same syntax to make a circular structure, which appears as an element within itself. Here is an example:</source>
          <target state="translated">동일한 구문을 사용하여 자체 요소로 나타나는 원형 구조를 만들 수도 있습니다. 다음은 그 예입니다.</target>
        </trans-unit>
        <trans-unit id="96e0c7bc0afca23e50b6b4c0afd543355632d7ec" translate="yes" xml:space="preserve">
          <source>You can also use, as the data element value, a Lisp object (list or vector) that is a container for the real value, or an index into some other structure. The example (see &lt;a href=&quot;abstract-display-example#Abstract-Display-Example&quot;&gt;Abstract Display Example&lt;/a&gt;) uses the latter approach.</source>
          <target state="translated">데이터 요소 값으로 실제 값의 컨테이너 인 Lisp 객체 (목록 또는 벡터) 또는 다른 구조에 대한 인덱스를 사용할 수도 있습니다. 예제 ( &lt;a href=&quot;abstract-display-example#Abstract-Display-Example&quot;&gt;추상 디스플레이 예제&lt;/a&gt; 참조 )는 후자의 접근 방식을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e0bf56efc4b83c6580305c7e6f4fd94870ba5869" translate="yes" xml:space="preserve">
          <source>You can alter the contents of a mutable string via operations described in this section. See &lt;a href=&quot;mutability#Mutability&quot;&gt;Mutability&lt;/a&gt;.</source>
          <target state="translated">이 섹션에 설명 된 작업을 통해 변경 가능한 문자열의 내용을 변경할 수 있습니다. &lt;a href=&quot;mutability#Mutability&quot;&gt;Mutability를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="533e21dcb2001e99f93c31391ea4fd8bff59a298" translate="yes" xml:space="preserve">
          <source>You can alter the way help text is displayed by setting the variable &lt;code&gt;show-help-function&lt;/code&gt; (see &lt;a href=&quot;#Help-display&quot;&gt;Help display&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;show-help-function&lt;/code&gt; 변수를 설정하여 도움말 텍스트가 표시되는 방식을 변경할 수 있습니다 ( &lt;a href=&quot;#Help-display&quot;&gt;도움말 표시&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="fe103737b480baef010d2dda744085c5d3621c2a" translate="yes" xml:space="preserve">
          <source>You can ask about the entire matching text, or about a particular parenthetical subexpression of a regular expression. The &lt;var&gt;count&lt;/var&gt; argument in the functions below specifies which. If &lt;var&gt;count&lt;/var&gt; is zero, you are asking about the entire match. If &lt;var&gt;count&lt;/var&gt; is positive, it specifies which subexpression you want.</source>
          <target state="translated">일치하는 전체 텍스트 또는 정규 표현식의 특정 괄호 하위 표현식에 대해 질문 할 수 있습니다. 아래 함수 의 &lt;var&gt;count&lt;/var&gt; 인수는 어느 것을 지정합니다. 경우 &lt;var&gt;count&lt;/var&gt; 제로, 당신은 전체 경기에 대한 요구하고있다. 경우 &lt;var&gt;count&lt;/var&gt; 긍정적이다, 당신이 원하는 표현식을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="8b68d2a3ffc269102762a19c29fc092ce5d379c1" translate="yes" xml:space="preserve">
          <source>You can ask for code to be executed each time Emacs loads a library, by using the variable &lt;code&gt;after-load-functions&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;after-load-functions&lt;/code&gt; 변수를 사용하여 Emacs가 라이브러리를로드 할 때마다 코드가 실행되도록 요청할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cd9bd144dc8c6dca30e14365e4cbeb9b802fa846" translate="yes" xml:space="preserve">
          <source>You can autoload macros and keymaps as well as ordinary functions. Specify &lt;var&gt;type&lt;/var&gt; as &lt;code&gt;macro&lt;/code&gt; if &lt;var&gt;function&lt;/var&gt; is really a macro. Specify &lt;var&gt;type&lt;/var&gt; as &lt;code&gt;keymap&lt;/code&gt; if &lt;var&gt;function&lt;/var&gt; is really a keymap. Various parts of Emacs need to know this information without loading the real definition.</source>
          <target state="translated">일반 기능뿐만 아니라 매크로와 키맵을 자동로드 할 수 있습니다. &lt;var&gt;function&lt;/var&gt; 가 실제로 &lt;code&gt;macro&lt;/code&gt; 경우 &lt;var&gt;type&lt;/var&gt; 을 매크로 로 지정하십시오 . &lt;var&gt;function&lt;/var&gt; 가 실제로 &lt;code&gt;keymap&lt;/code&gt; 경우 &lt;var&gt;type&lt;/var&gt; 을 키맵으로 지정 합니다 . Emacs의 다양한 부분은 실제 정의를로드하지 않고이 정보를 알아야합니다.</target>
        </trans-unit>
        <trans-unit id="36d97f14664aac18b68c47d3a4967a00be272e55" translate="yes" xml:space="preserve">
          <source>You can bring back an entire frame layout by restoring a previously saved window configuration. If you want to record the layout of all frames instead of just one, use a frame configuration instead of a window configuration. See &lt;a href=&quot;frame-configurations#Frame-Configurations&quot;&gt;Frame Configurations&lt;/a&gt;.</source>
          <target state="translated">이전에 저장 한 창 구성을 복원하여 전체 프레임 레이아웃을 다시 가져올 수 있습니다. 하나가 아닌 모든 프레임의 레이아웃을 기록하려면 창 구성 대신 프레임 구성을 사용하십시오. &lt;a href=&quot;frame-configurations#Frame-Configurations&quot;&gt;프레임 구성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a6a9518e243380d5eca24c5657d832471aa3582e" translate="yes" xml:space="preserve">
          <source>You can byte-compile an individual function or macro definition with the &lt;code&gt;byte-compile&lt;/code&gt; function. You can compile a whole file with &lt;code&gt;byte-compile-file&lt;/code&gt;, or several files with &lt;code&gt;byte-recompile-directory&lt;/code&gt; or &lt;code&gt;batch-byte-compile&lt;/code&gt;.</source>
          <target state="translated">바이트 컴파일 함수를 사용하여 개별 함수 또는 매크로 정의를 &lt;code&gt;byte-compile&lt;/code&gt; 있습니다. &lt;code&gt;byte-compile-file&lt;/code&gt; 을 사용하여 전체 파일을 컴파일 하거나 &lt;code&gt;byte-recompile-directory&lt;/code&gt; 또는 &lt;code&gt;batch-byte-compile&lt;/code&gt; 을 사용 하여 여러 파일을 컴파일 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4b9fbecbd8814f8acb1931e69bc32ac2f0ddcaea" translate="yes" xml:space="preserve">
          <source>You can cause &lt;code&gt;constrain-to-field&lt;/code&gt; to ignore all field boundaries (and so never constrain anything) by binding the variable &lt;code&gt;inhibit-field-text-motion&lt;/code&gt; to a non-&lt;code&gt;nil&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;constrain-to-field&lt;/code&gt; &lt;code&gt;inhibit-field-text-motion&lt;/code&gt; 변수를 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값 에 바인딩하여 필드에 제한이 모든 필드 경계를 무시 하도록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4fe9f0a12b1177d2e8cf5b8482f8fbf46cd674f9" translate="yes" xml:space="preserve">
          <source>You can cause the debugger to be called at a certain point in your program by writing the expression &lt;code&gt;(debug)&lt;/code&gt; at that point. To do this, visit the source file, insert the text &amp;lsquo;</source>
          <target state="translated">프로그램의 특정 지점에서 해당 지점에 식 &lt;code&gt;(debug)&lt;/code&gt; 을 작성하여 디버거가 호출되도록 할 수 있습니다 . 이렇게하려면 소스 파일을 방문하여 '</target>
        </trans-unit>
        <trans-unit id="5afa89ad709c283a5355db95631f288374cadaf0" translate="yes" xml:space="preserve">
          <source>You can change the backup-file naming convention by redefining this function. The following example redefines &lt;code&gt;make-backup-file-name&lt;/code&gt; to prepend a &amp;lsquo;</source>
          <target state="translated">이 기능을 재정 의하여 백업 파일 이름 지정 규칙을 변경할 수 있습니다. 다음 예제 는 '를 추가하기 &lt;code&gt;make-backup-file-name&lt;/code&gt; 을 재정의 합니다.</target>
        </trans-unit>
        <trans-unit id="d89e3c84504426821c01be861ae626604a23636a" translate="yes" xml:space="preserve">
          <source>You can check for invisibility using the following function:</source>
          <target state="translated">다음 기능을 사용하여 투명성을 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="58057761dac2ce099ac5425cf8f2306f7683714e" translate="yes" xml:space="preserve">
          <source>You can combine dotted pair notation with list notation to represent conveniently a chain of cons cells with a non-&lt;code&gt;nil&lt;/code&gt; final &lt;small&gt;CDR&lt;/small&gt;. You write a dot after the last element of the list, followed by the &lt;small&gt;CDR&lt;/small&gt; of the final cons cell. For example, &lt;code&gt;(rose violet
. buttercup)&lt;/code&gt; is equivalent to &lt;code&gt;(rose . (violet . buttercup))&lt;/code&gt;. The object looks like this:</source>
          <target state="translated">점선 표기법과 목록 표기법을 결합하여 &lt;code&gt;nil&lt;/code&gt; 이 아닌 최종 &lt;small&gt;CDR을&lt;/small&gt; 가진 cons 셀 체인을 편리하게 나타낼 수 있습니다. 목록의 마지막 요소 뒤에 점을 쓰고 그 뒤에 최종 단점 셀 의 &lt;small&gt;CDR&lt;/small&gt; 을 씁니다 . 예를 들어, &lt;code&gt;(rose violet . buttercup)&lt;/code&gt; 은 &lt;code&gt;(rose . (violet . buttercup))&lt;/code&gt; . 개체는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5011d0148df0e481c610f29e770b691888671b30" translate="yes" xml:space="preserve">
          <source>You can control the appearance of scroll bars for a particular buffer by setting the following variables which automatically become buffer-local when set.</source>
          <target state="translated">설정시 자동으로 버퍼 로컬이되는 다음 변수를 설정하여 특정 버퍼의 스크롤 막대 모양을 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="222f7ab802149b9f6a042d7ba0837fd35fee9ed7" translate="yes" xml:space="preserve">
          <source>You can control the stickiness of various text properties with two specific text properties, &lt;code&gt;front-sticky&lt;/code&gt; and &lt;code&gt;rear-nonsticky&lt;/code&gt;, and with the variable &lt;code&gt;text-property-default-nonsticky&lt;/code&gt;. You can use the variable to specify a different default for a given property. You can use those two text properties to make any specific properties sticky or nonsticky in any particular part of the text.</source>
          <target state="translated">두 가지 특정 텍스트 속성 인 &lt;code&gt;front-sticky&lt;/code&gt; 및 &lt;code&gt;rear-nonsticky&lt;/code&gt; 및 변수 &lt;code&gt;text-property-default-nonsticky&lt;/code&gt; 를 사용하여 다양한 텍스트 속성의 고 정성을 제어 할 수 있습니다 . 변수를 사용하여 주어진 속성에 대해 다른 기본값을 지정할 수 있습니다. 이 두 가지 텍스트 속성을 사용하여 텍스트의 특정 부분에서 특정 속성을 고정 또는 비고 정적으로 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cd5c6328f118d9c93be49e374cdf83f3921cf4cc" translate="yes" xml:space="preserve">
          <source>You can customize case conversion by installing a special &lt;em&gt;case table&lt;/em&gt;. A case table specifies the mapping between upper case and lower case letters. It affects both the case conversion functions for Lisp objects (see the previous section) and those that apply to text in the buffer (see &lt;a href=&quot;case-changes#Case-Changes&quot;&gt;Case Changes&lt;/a&gt;). Each buffer has a case table; there is also a standard case table which is used to initialize the case table of new buffers.</source>
          <target state="translated">특수 &lt;em&gt;케이스 테이블&lt;/em&gt; 을 설치하여 케이스 변환을 사용자 정의 할 수 있습니다 . 케이스 테이블은 대문자와 소문자 간의 매핑을 지정합니다. Lisp 객체 (이전 섹션 참조)에 대한 대소 문자 변환 함수와 버퍼의 텍스트에 적용되는 함수 ( &lt;a href=&quot;case-changes#Case-Changes&quot;&gt;케이스 변경&lt;/a&gt; 참조) 모두에 영향을줍니다 . 각 버퍼에는 케이스 테이블이 있습니다. 새 버퍼의 케이스 테이블을 초기화하는 데 사용되는 표준 케이스 테이블도 있습니다.</target>
        </trans-unit>
        <trans-unit id="4f4ec139ebea7e400349ab66e37da158078fc333" translate="yes" xml:space="preserve">
          <source>You can customize how &lt;code&gt;revert-buffer&lt;/code&gt; does its work by setting the variables described in the rest of this section.</source>
          <target state="translated">이 섹션의 나머지 부분에서 설명하는 변수를 설정하여 &lt;code&gt;revert-buffer&lt;/code&gt; 가 작동 하는 방식을 사용자 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3a79361ecf3d1c852d33c5c8c829d11953b80eec" translate="yes" xml:space="preserve">
          <source>You can customize trace recording for function entry and exit by redefining the functions &lt;code&gt;edebug-print-trace-before&lt;/code&gt; and &lt;code&gt;edebug-print-trace-after&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;edebug-print-trace-before&lt;/code&gt; 및 &lt;code&gt;edebug-print-trace-after&lt;/code&gt; 함수를 재정 의하여 함수 시작 및 종료에 대한 추적 기록을 사용자 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="835f12d89fde2b2800e43439d61f2193b14c6678" translate="yes" xml:space="preserve">
          <source>You can define a special meaning for clicking on a tool bar item with the shift, control, meta, etc., modifiers. You do this by setting up additional items that relate to the original item through the fake function keys. Specifically, the additional items should use the modified versions of the same fake function key used to name the original item.</source>
          <target state="translated">이동, 제어, 메타 등 수정자를 사용하여 도구 모음 항목을 클릭하는 데 특별한 의미를 정의 할 수 있습니다. 가짜 기능 키를 통해 원본 항목과 관련된 추가 항목을 설정하면됩니다. 특히 추가 항목은 원래 항목의 이름을 지정하는 데 사용 된 동일한 가짜 기능 키의 수정 된 버전을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="36ae5ff4a5018c19a49a48098bf064b01ee3337e" translate="yes" xml:space="preserve">
          <source>You can define multiple overlay arrows via the variable &lt;code&gt;overlay-arrow-variable-list&lt;/code&gt;.</source>
          <target state="translated">변수 &lt;code&gt;overlay-arrow-variable-list&lt;/code&gt; 를 통해 여러 오버레이 화살표를 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4f5ab8831230e6a615be9f72d05d9787207369e3" translate="yes" xml:space="preserve">
          <source>You can define new methods of key lookup by means of &lt;code&gt;define-hash-table-test&lt;/code&gt;. In order to use this feature, you need to understand how hash tables work, and what a &lt;em&gt;hash code&lt;/em&gt; means.</source>
          <target state="translated">&lt;code&gt;define-hash-table-test&lt;/code&gt; 를 사용 하여 새로운 키 조회 방법을 정의 할 수 있습니다 . 이 기능을 사용하려면 해시 테이블의 작동 방식과 &lt;em&gt;해시 코드의&lt;/em&gt; 의미 를 이해해야합니다 .</target>
        </trans-unit>
        <trans-unit id="08e4ffc82f61ee89e641b587286bd711a88539fa" translate="yes" xml:space="preserve">
          <source>You can delete elements from the middle of a list by altering the &lt;small&gt;CDR&lt;/small&gt;s of the cons cells in the list. For example, here we delete the second element, &lt;code&gt;b&lt;/code&gt;, from the list &lt;code&gt;(a b c)&lt;/code&gt;, by changing the &lt;small&gt;CDR&lt;/small&gt; of the first cons cell:</source>
          <target state="translated">목록에 있는 cons 셀 의 &lt;small&gt;CDR&lt;/small&gt; 을 변경하여 목록 중간에서 요소를 삭제할 수 있습니다 . 예를 들어, 여기 에서는 첫 번째 cons 셀 의 &lt;small&gt;CDR&lt;/small&gt; 을 변경하여 목록 &lt;code&gt;(a b c)&lt;/code&gt; 에서 두 번째 요소 &lt;code&gt;b&lt;/code&gt; 를 삭제합니다 .&lt;small&gt;&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d1522384be55c89e1a6c3aaf7e595ab6a98a0673" translate="yes" xml:space="preserve">
          <source>You can discard the functions and variables loaded by a library to reclaim memory for other Lisp objects. To do this, use the function &lt;code&gt;unload-feature&lt;/code&gt;:</source>
          <target state="translated">라이브러리에서로드 한 함수와 변수를 삭제하여 다른 Lisp 개체에 대한 메모리를 회수 할 수 있습니다. 이렇게하려면 &lt;code&gt;unload-feature&lt;/code&gt; 함수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="8a12e1ca0976cb2975a94deb38b95296b848642a" translate="yes" xml:space="preserve">
          <source>You can distinguish valid windows from deleted windows with &lt;code&gt;window-valid-p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;window-valid-p&lt;/code&gt; 를 사용 하여 유효한 창과 삭제 된 창을 구분할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ba01a8c69fee355477417b99f1a25e57d0730fef" translate="yes" xml:space="preserve">
          <source>You can do a similar job by creating an overlay with a &lt;code&gt;before-string&lt;/code&gt; property. See &lt;a href=&quot;overlay-properties#Overlay-Properties&quot;&gt;Overlay Properties&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;before-string&lt;/code&gt; 속성으로 오버레이를 만들어 비슷한 작업을 수행 할 수 있습니다 . &lt;a href=&quot;overlay-properties#Overlay-Properties&quot;&gt;오버레이 속성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7b17179206364b102a61f55d1c4dbd6ad7037a6d" translate="yes" xml:space="preserve">
          <source>You can do coverage testing for a file of Lisp code by loading the &lt;code&gt;testcover&lt;/code&gt; library and using the command</source>
          <target state="translated">Lisp 코드 파일을로드하여 커버리지 테스트를 수행 할 수 있습니다. &lt;code&gt;testcover&lt;/code&gt; 라이브러리 다음 명령을 사용하여</target>
        </trans-unit>
        <trans-unit id="384d23c91adb5c9310d784fab4c4e1b75122f331" translate="yes" xml:space="preserve">
          <source>You can enlarge (or even reduce) the region to refontify by setting the following variable:</source>
          <target state="translated">다음 변수를 설정하여 글꼴을 다시 설정할 영역을 확대 (또는 축소) 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4db15b6da0ef3a8447c90d0df3f72ceee7e342b3" translate="yes" xml:space="preserve">
          <source>You can evaluate expressions in the evaluation list window with</source>
          <target state="translated">평가 목록 창에서 식을 평가할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eeb83b75ee325ffb4507a657581455d2eb56e68e" translate="yes" xml:space="preserve">
          <source>You can express the characters control-g, backspace, tab, newline, vertical tab, formfeed, space, return, del, and escape as &amp;lsquo;</source>
          <target state="translated">control-g, backspace, tab, newline, vertical tab, formfeed, space, return, del, escape 문자를 '</target>
        </trans-unit>
        <trans-unit id="635adf41d89b01728af263c091ab95eba6f97682" translate="yes" xml:space="preserve">
          <source>You can force use of the mouse or of the echo area by binding &lt;code&gt;last-nonmenu-event&lt;/code&gt; to a suitable value around the call.</source>
          <target state="translated">&lt;code&gt;last-nonmenu-event&lt;/code&gt; 를 호출 주변의 적절한 값 에 바인딩하여 마우스 또는 에코 영역을 강제로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="28ca9fc4a6ad1466778477597ee3aa3dfc251bea" translate="yes" xml:space="preserve">
          <source>You can get a similar result by putting &lt;var&gt;body&lt;/var&gt; in a separate file and referring to that file with &lt;code&gt;require&lt;/code&gt;. That method is preferable when &lt;var&gt;body&lt;/var&gt; is large. Effectively &lt;code&gt;require&lt;/code&gt; is automatically &lt;code&gt;eval-and-compile&lt;/code&gt;, the package is loaded both when compiling and executing.</source>
          <target state="translated">&lt;var&gt;body&lt;/var&gt; 를 별도의 파일 에 넣고 &lt;code&gt;require&lt;/code&gt; 로 해당 파일을 참조 하면 비슷한 결과를 얻을 수 있습니다 . 이 방법은 &lt;var&gt;body&lt;/var&gt; 이 클 때 바람직 합니다. 효과적으로 자동으로 &lt;code&gt;require&lt;/code&gt; &lt;code&gt;eval-and-compile&lt;/code&gt; 이며 컴파일 및 실행시 패키지가로드됩니다.</target>
        </trans-unit>
        <trans-unit id="00fd5d6ff08aee1606919ade5bbb5c97badb4c16" translate="yes" xml:space="preserve">
          <source>You can get the sizes of the dividers of a specific window with the following two functions.</source>
          <target state="translated">다음 두 가지 기능을 사용하여 특정 창의 구분선 크기를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="36c965dcc6ced9f21e9be780079b2b70a64fde8e" translate="yes" xml:space="preserve">
          <source>You can implement special handling for certain file names. This is called making those names &lt;em&gt;magic&lt;/em&gt;. The principal use for this feature is in implementing access to remote files (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Remote-Files.html#Remote-Files&quot;&gt;Remote Files&lt;/a&gt; in</source>
          <target state="translated">특정 파일 이름에 대해 특수 처리를 구현할 수 있습니다. 이것을 &lt;em&gt;마법으로&lt;/em&gt; 만드는 것 입니다. 이 기능의 주요 사용은 원격 파일에 대한 액세스를 구현이다 ( &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Remote-Files.html#Remote-Files&quot;&gt;원격 파일&lt;/a&gt; 에</target>
        </trans-unit>
        <trans-unit id="970ba52a03b80c488613c6d81948b6e5130988b6" translate="yes" xml:space="preserve">
          <source>You can implement special handling for certain file names. This is called making those names &lt;em&gt;magic&lt;/em&gt;. The principal use for this feature is in implementing access to remote files (see &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Remote-Files.html#Remote-Files&quot;&gt;Remote Files&lt;/a&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd217192998844dcdd980ef8d58c7286b48ee06" translate="yes" xml:space="preserve">
          <source>You can include a non-</source>
          <target state="translated">비</target>
        </trans-unit>
        <trans-unit id="17a3bff7c131bde5de4f4ff001f3d564f610f04d" translate="yes" xml:space="preserve">
          <source>You can invoke commands from Edebug that activate Edebug again recursively. Whenever Edebug is active, you can quit to the top level with</source>
          <target state="translated">Edebug를 재귀 적으로 다시 활성화하는 명령을 Edebug에서 호출 할 수 있습니다. Edebug가 활성화 될 때마다 다음을 사용하여 최상위 수준으로 종료 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e91d3e48f16383727b33817d9f376d7b64347da" translate="yes" xml:space="preserve">
          <source>You can load a given file more than once in an Emacs session. For example, after you have rewritten and reinstalled a function definition by editing it in a buffer, you may wish to return to the original version; you can do this by reloading the file it came from.</source>
          <target state="translated">Emacs 세션에서 주어진 파일을 두 번 이상로드 할 수 있습니다. 예를 들어, 버퍼에서 편집하여 함수 정의를 다시 작성하고 다시 설치 한 후 원래 버전으로 돌아갈 수 있습니다. 원본 파일을 다시로드하면됩니다.</target>
        </trans-unit>
        <trans-unit id="afd57cd7f606eab41ccb766a5a9459b509d27ba8" translate="yes" xml:space="preserve">
          <source>You can look at the error and warning messages produced by the byte compiler when it compiles the program. See &lt;a href=&quot;compiler-errors#Compiler-Errors&quot;&gt;Compiler Errors&lt;/a&gt;.</source>
          <target state="translated">프로그램을 컴파일 할 때 바이트 컴파일러가 생성하는 오류 및 경고 메시지를 볼 수 있습니다. &lt;a href=&quot;compiler-errors#Compiler-Errors&quot;&gt;컴파일러 오류&lt;/a&gt; 참조 .</target>
        </trans-unit>
        <trans-unit id="52c430a0595cd4b70fd0a10d7e767b886853d19c" translate="yes" xml:space="preserve">
          <source>You can make a conditional or unconditional breakpoint &lt;em&gt;temporary&lt;/em&gt; by using a prefix argument with the command to set the breakpoint. When a temporary breakpoint stops the program, it is automatically unset.</source>
          <target state="translated">조건부 또는 무조건 중단 점을 &lt;em&gt;임시로&lt;/em&gt; 만들 수 있습니다.&lt;em&gt;&lt;/em&gt; 을 설정하는 명령과 함께 접두사 인수를 사용하여 로 . 임시 중단 점이 프로그램을 중지하면 자동으로 설정 해제됩니다.</target>
        </trans-unit>
        <trans-unit id="a9f33e1ba480aafb4f65ab9fb004d566f1edf6f2" translate="yes" xml:space="preserve">
          <source>You can make any display specification conditional. To do that, package it in another list of the form &lt;code&gt;(when &lt;var&gt;condition&lt;/var&gt; . &lt;var&gt;spec&lt;/var&gt;)&lt;/code&gt;. Then the specification &lt;var&gt;spec&lt;/var&gt; applies only when &lt;var&gt;condition&lt;/var&gt; evaluates to a non-&lt;code&gt;nil&lt;/code&gt; value. During the evaluation, &lt;code&gt;object&lt;/code&gt; is bound to the string or buffer having the conditional &lt;code&gt;display&lt;/code&gt; property. &lt;code&gt;position&lt;/code&gt; and &lt;code&gt;buffer-position&lt;/code&gt; are bound to the position within &lt;code&gt;object&lt;/code&gt; and the buffer position where the &lt;code&gt;display&lt;/code&gt; property was found, respectively. Both positions can be different when &lt;code&gt;object&lt;/code&gt; is a string.</source>
          <target state="translated">모든 디스플레이 사양을 조건부로 만들 수 있습니다. 이를 수행하려면 양식의 다른 목록 &lt;code&gt;(when &lt;var&gt;condition&lt;/var&gt; . &lt;var&gt;spec&lt;/var&gt;)&lt;/code&gt; 패키지화하십시오 . 그런 다음 사양 &lt;var&gt;spec&lt;/var&gt; 에만 적용 &lt;var&gt;condition&lt;/var&gt; &lt;code&gt;nil&lt;/code&gt; 이 아닌 값으로 평가 . 평가하는 동안 &lt;code&gt;object&lt;/code&gt; 는 조건부 &lt;code&gt;display&lt;/code&gt; 속성 이있는 문자열 또는 버퍼에 바인딩됩니다 . &lt;code&gt;position&lt;/code&gt; 와 &lt;code&gt;buffer-position&lt;/code&gt; 는 &lt;code&gt;object&lt;/code&gt; 내의 위치 와 &lt;code&gt;display&lt;/code&gt; 속성이 발견 . 경우 두 위치가 다를 수 있습니다 &lt;code&gt;object&lt;/code&gt; 가 문자열 인 버퍼 위치에 바인딩됩니다 .</target>
        </trans-unit>
        <trans-unit id="1c57e3f41439d1794fea2432172f271fc50a611b" translate="yes" xml:space="preserve">
          <source>You can make characters &lt;em&gt;invisible&lt;/em&gt;, so that they do not appear on the screen, with the &lt;code&gt;invisible&lt;/code&gt; property. This can be either a text property (see &lt;a href=&quot;text-properties#Text-Properties&quot;&gt;Text Properties&lt;/a&gt;) or an overlay property (see &lt;a href=&quot;overlays#Overlays&quot;&gt;Overlays&lt;/a&gt;). Cursor motion also partly ignores these characters; if the command loop finds that point is inside a range of invisible text after a command, it relocates point to the other side of the text.</source>
          <target state="translated">&lt;code&gt;invisible&lt;/code&gt; 속성을 사용하여 문자를 &lt;em&gt;보이지 않도록&lt;/em&gt; 만들 수 있습니다 . 이는 텍스트 속성 ( &lt;a href=&quot;text-properties#Text-Properties&quot;&gt;Text 속성&lt;/a&gt; 참조 ) 또는 오버레이 속성 ( &lt;a href=&quot;overlays#Overlays&quot;&gt;Overlays&lt;/a&gt; 참조 ) 일 수 있습니다. 커서 동작도 이러한 문자를 부분적으로 무시합니다. 명령 루프에서 해당 지점이 명령 후 보이지 않는 텍스트 범위 내에 있음을 발견하면 지점을 텍스트의 다른쪽에 재배치합니다.</target>
        </trans-unit>
        <trans-unit id="dc99f104edf557ddaded16d29eafec52b002f7b3" translate="yes" xml:space="preserve">
          <source>You can make collections more frequent by specifying a smaller value, down to 1/10th of &lt;code&gt;GC_DEFAULT_THRESHOLD&lt;/code&gt;. A value less than this minimum will remain in effect only until the subsequent garbage collection, at which time &lt;code&gt;garbage-collect&lt;/code&gt; will set the threshold back to the minimum.</source>
          <target state="translated">&lt;code&gt;GC_DEFAULT_THRESHOLD&lt;/code&gt; 의 1/10까지 더 작은 값을 지정하여 컬렉션을 더 자주 만들 수 있습니다 . 이 최소값보다 적은 값 만 후속 가비지 컬렉션까지 유효 할 한번에 &lt;code&gt;garbage-collect&lt;/code&gt; 최소의 임계 값을 다시 설정한다.</target>
        </trans-unit>
        <trans-unit id="1a8ed3019165cc2e91112182309e45f48026fac2" translate="yes" xml:space="preserve">
          <source>You can make two variables synonyms and declare one obsolete at the same time using the macro &lt;code&gt;define-obsolete-variable-alias&lt;/code&gt;.</source>
          <target state="translated">두 개의 변수 동의어를 만들고 매크로 &lt;code&gt;define-obsolete-variable-alias&lt;/code&gt; 를 사용하여 동시에 사용되지 않는 변수를 선언 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b00d90ea94b6de8d52731f600b63a1aa115b23b3" translate="yes" xml:space="preserve">
          <source>You can mark a named function as &lt;em&gt;obsolete&lt;/em&gt;, meaning that it may be removed at some point in the future. This causes Emacs to warn that the function is obsolete whenever it byte-compiles code containing that function, and whenever it displays the documentation for that function. In all other respects, an obsolete function behaves like any other function.</source>
          <target state="translated">명명 된 함수를 &lt;em&gt;사용되지 않음&lt;/em&gt; 으로 표시 할 수 있습니다. 즉, 나중에 언젠가 제거 될 수 있습니다. 이로 인해 Emacs는 해당 함수를 포함하는 코드를 바이트 컴파일 할 때마다 그리고 해당 함수에 대한 문서를 표시 할 때마다 해당 함수가 사용되지 않는다고 경고합니다. 다른 모든 측면에서 사용되지 않는 함수는 다른 함수처럼 작동합니다.</target>
        </trans-unit>
        <trans-unit id="36d67c4aee293c4450b38f08b33ea35e2c467dc2" translate="yes" xml:space="preserve">
          <source>You can measure the time it takes to evaluate individual Emacs Lisp forms using the</source>
          <target state="translated">다음을 사용하여 개별 Emacs Lisp 양식을 평가하는 데 걸리는 시간을 측정 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c41c81c969875c658b1fa944951ca4e686edc3fd" translate="yes" xml:space="preserve">
          <source>You can modify how each character is displayed by defining a &lt;em&gt;display table&lt;/em&gt;, which maps each character code into a sequence of glyphs. See &lt;a href=&quot;display-tables#Display-Tables&quot;&gt;Display Tables&lt;/a&gt;.</source>
          <target state="translated">다음을 정의하여 각 문자가 표시되는 방식을 수정할 수 있습니다. &lt;em&gt;&lt;/em&gt;각 문자 코드를 글리프 시퀀스로 매핑&lt;em&gt; 표시 테이블&lt;/em&gt; . &lt;a href=&quot;display-tables#Display-Tables&quot;&gt;디스플레이 테이블을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a65ceeb001ee56dcdfe1486933a8001c8fc1a938" translate="yes" xml:space="preserve">
          <source>You can modify the &lt;small&gt;CAR&lt;/small&gt; and &lt;small&gt;CDR&lt;/small&gt; contents of a cons cell with the primitives &lt;code&gt;setcar&lt;/code&gt; and &lt;code&gt;setcdr&lt;/code&gt;. These are destructive operations because they change existing list structure. Destructive operations should be applied only to mutable lists, that is, lists constructed via &lt;code&gt;cons&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt; or similar operations. Lists created by quoting are part of the program and should not be changed by destructive operations. See &lt;a href=&quot;mutability#Mutability&quot;&gt;Mutability&lt;/a&gt;.</source>
          <target state="translated">기본 &lt;code&gt;setcar&lt;/code&gt; 및 &lt;code&gt;setcdr&lt;/code&gt; 을 사용하여 cons 셀 의 &lt;small&gt;CAR&lt;/small&gt; 및 &lt;small&gt;CDR&lt;/small&gt; 컨텐츠를 수정할 수 있습니다 . 이는 기존 목록 구조를 변경하기 때문에 파괴적인 작업입니다. 파괴적인 작업은 변경 가능한 목록, 즉 &lt;code&gt;cons&lt;/code&gt; 를 통해 구성된 목록에만 적용되어야합니다. , &lt;code&gt;list&lt;/code&gt; 또는 유사한 작업을 . 인용으로 생성 된 목록은 프로그램의 일부이며 파괴적인 작업으로 변경해서는 안됩니다. &lt;a href=&quot;mutability#Mutability&quot;&gt;Mutability를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a9eb526ad886f7a3fd539724752e7de1f8d9a3dc" translate="yes" xml:space="preserve">
          <source>You can override the frame specific settings for individual windows by using the following function:</source>
          <target state="translated">다음 기능을 사용하여 개별 창에 대한 프레임 별 설정을 재정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e77615cbb116daea14cfa5e30d12da34759278c1" translate="yes" xml:space="preserve">
          <source>You can perform simple date arithmetic by using out-of-range values for &lt;var&gt;seconds&lt;/var&gt;, &lt;var&gt;minutes&lt;/var&gt;, &lt;var&gt;hour&lt;/var&gt;, &lt;var&gt;day&lt;/var&gt;, and &lt;var&gt;month&lt;/var&gt;; for example, day 0 means the day preceding the given month.</source>
          <target state="translated">&lt;var&gt;seconds&lt;/var&gt; , &lt;var&gt;minutes&lt;/var&gt; , &lt;var&gt;hour&lt;/var&gt; , &lt;var&gt;day&lt;/var&gt; 및 &lt;var&gt;month&lt;/var&gt; 대해 범위를 벗어난 값을 사용하여 간단한 날짜 산술을 수행 할 수 있습니다 . 예를 들어, 0 일은 주어진 달의 전날을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="5271b3563c640a38bd217e67b0391d559718885b" translate="yes" xml:space="preserve">
          <source>You can prevent quitting for a portion of a Lisp function by binding the variable &lt;code&gt;inhibit-quit&lt;/code&gt; to a non-&lt;code&gt;nil&lt;/code&gt; value. Then, although</source>
          <target state="translated">&lt;code&gt;inhibit-quit&lt;/code&gt; 변수를 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값 에 바인딩하여 Lisp 함수의 일부에 대한 종료를 방지 할 수 있습니다 . 그런 다음</target>
        </trans-unit>
        <trans-unit id="65948ed3b80d6eed57a03017bf1c975d5acf8b22" translate="yes" xml:space="preserve">
          <source>You can profile the program to get hints about how to make it more efficient.</source>
          <target state="translated">프로그램을 프로파일 링하여보다 효율적으로 만드는 방법에 대한 힌트를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5ba3b38e9fb2820490ea76905863a421d0731b11" translate="yes" xml:space="preserve">
          <source>You can read this as &amp;ldquo;&lt;code&gt;(car '(1 2))&lt;/code&gt; evaluates to 1&amp;rdquo;.</source>
          <target state="translated">이것을&amp;ldquo; &lt;code&gt;(car '(1 2))&lt;/code&gt; 는 1로 평가됨 &amp;rdquo;으로 읽을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="808d228b8badb3ca346b56a55eb441843312b038" translate="yes" xml:space="preserve">
          <source>You can rewrite the example in the beginning of this subsection using this macro as follows:</source>
          <target state="translated">다음과 같이이 매크로를 사용하여이 하위 섹션의 시작 부분에있는 예제를 다시 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f719c4d7fb16a5182683fce1ebcc90210b9cd79" translate="yes" xml:space="preserve">
          <source>You can save and restore the match data with &lt;code&gt;save-match-data&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;save-match-data&lt;/code&gt; 를 사용하여 일치 데이터를 저장하고 복원 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="57d070f70e8f3342dee88c6e238f245116c251c2" translate="yes" xml:space="preserve">
          <source>You can see how &lt;code&gt;append&lt;/code&gt; works by looking at a box diagram. The variable &lt;code&gt;trees&lt;/code&gt; is set to the list &lt;code&gt;(pine oak)&lt;/code&gt; and then the variable &lt;code&gt;more-trees&lt;/code&gt; is set to the list &lt;code&gt;(maple birch pine
oak)&lt;/code&gt;. However, the variable &lt;code&gt;trees&lt;/code&gt; continues to refer to the original list:</source>
          <target state="translated">상자 다이어그램을 보면 &lt;code&gt;append&lt;/code&gt; 가 어떻게 작동 하는지 확인할 수 있습니다 . 변수 &lt;code&gt;trees&lt;/code&gt; 는 목록 &lt;code&gt;(pine oak)&lt;/code&gt; 으로 설정되고 &lt;code&gt;more-trees&lt;/code&gt; 변수 는 목록 &lt;code&gt;(maple birch pine oak)&lt;/code&gt; 됩니다. 그러나 가변 &lt;code&gt;trees&lt;/code&gt; 계속해서 원래 목록을 참조합니다.</target>
        </trans-unit>
        <trans-unit id="c0885c80f58e833be9be1796aa278ea1d9ff012c" translate="yes" xml:space="preserve">
          <source>You can see the expansion of a given macro call by calling &lt;code&gt;macroexpand&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;macroexpand&lt;/code&gt; 를 호출하여 지정된 매크로 호출의 확장을 볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="988d03ce5c456e84b5cd5c59ad2765a29318f832" translate="yes" xml:space="preserve">
          <source>You can send signals explicitly by calling the functions in this section. Emacs also sends signals automatically at certain times: killing a buffer sends a &lt;code&gt;SIGHUP&lt;/code&gt; signal to all its associated processes; killing Emacs sends a &lt;code&gt;SIGHUP&lt;/code&gt; signal to all remaining processes. (&lt;code&gt;SIGHUP&lt;/code&gt; is a signal that usually indicates that the user &amp;ldquo;hung up the phone&amp;rdquo;, i.e., disconnected.)</source>
          <target state="translated">이 섹션의 함수를 호출하여 명시 적으로 신호를 보낼 수 있습니다. Emacs는 또한 특정 시간에 자동으로 신호를 보냅니다. 버퍼를 죽이면 모든 관련 프로세스에 &lt;code&gt;SIGHUP&lt;/code&gt; 신호를 보냅니다 . Emacs를 죽이면 나머지 모든 프로세스에 &lt;code&gt;SIGHUP&lt;/code&gt; 신호를 보냅니다 . ( &lt;code&gt;SIGHUP&lt;/code&gt; 는 일반적으로 사용자가 &quot;전화를 끊었다&quot;, 즉 연결이 끊어 졌음을 나타내는 신호입니다.)</target>
        </trans-unit>
        <trans-unit id="191fe54817d4002a1c3a88196b69c4fce5b4c4ed" translate="yes" xml:space="preserve">
          <source>You can set up a &lt;em&gt;glyph table&lt;/em&gt; to change how glyph codes are actually displayed on text terminals. This feature is semi-obsolete; use &lt;code&gt;glyphless-char-display&lt;/code&gt; instead (see &lt;a href=&quot;glyphless-chars#Glyphless-Chars&quot;&gt;Glyphless Chars&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;글리프 테이블&lt;/em&gt; 을 설정하여 글리프 코드가 실제로 텍스트 터미널에 표시되는 방식을 변경할 수 있습니다 . 이 기능은 거의 사용되지 않습니다. 사용 &lt;code&gt;glyphless-char-display&lt;/code&gt; 대신 (참조 &lt;a href=&quot;glyphless-chars#Glyphless-Chars&quot;&gt;Glyphless 자까지만&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="1ae028f5156ca27eec975dbc6cef6df2418885a1" translate="yes" xml:space="preserve">
          <source>You can set up a &lt;em&gt;timer&lt;/em&gt; to call a function at a specified future time or after a certain length of idleness. A timer is a special object that stores the information about the next invocation times and the function to invoke.</source>
          <target state="translated">지정된 미래 시간 또는 특정 유휴 시간 후에 함수를 호출 하도록 &lt;em&gt;타이머&lt;/em&gt; 를 설정할 수 있습니다 . 타이머는 다음 호출 시간 및 호출 할 함수에 대한 정보를 저장하는 특수 개체입니다.</target>
        </trans-unit>
        <trans-unit id="95959190b0ff17b28d8647cdc8885e9a2b4149ae" translate="yes" xml:space="preserve">
          <source>You can specify a character other than</source>
          <target state="translated">이외의 문자를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6775c1ff691e764fce6b044e68213e6dbc96b50c" translate="yes" xml:space="preserve">
          <source>You can specify additional files to preload by writing a library named</source>
          <target state="translated">라이브러리 이름을 작성하여 미리로드 할 추가 파일을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f6f4be83abc793dc19089cc95fe097975214497e" translate="yes" xml:space="preserve">
          <source>You can specify characters by their Unicode names, if any. &lt;code&gt;?\N{&lt;var&gt;NAME&lt;/var&gt;}&lt;/code&gt; represents the Unicode character named &lt;var&gt;NAME&lt;/var&gt;. Thus, &amp;lsquo;</source>
          <target state="translated">유니 코드 이름 (있는 경우)으로 문자를 지정할 수 있습니다. &lt;code&gt;?\N{&lt;var&gt;NAME&lt;/var&gt;}&lt;/code&gt; 은 &lt;var&gt;NAME&lt;/var&gt; 이라는 유니 코드 문자를 나타냅니다 . 따라서 '</target>
        </trans-unit>
        <trans-unit id="db50cadb51b5309693dfbd618c6b0c206e8a3a20" translate="yes" xml:space="preserve">
          <source>You can specify characters by their Unicode values. &lt;code&gt;?\N{U+&lt;var&gt;X&lt;/var&gt;}&lt;/code&gt; represents a character with Unicode code point &lt;var&gt;X&lt;/var&gt;, where &lt;var&gt;X&lt;/var&gt; is a hexadecimal number. Also, &lt;code&gt;?\u&lt;var&gt;xxxx&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;?\U&lt;var&gt;xxxxxxxx&lt;/var&gt;&lt;/code&gt; represent code points &lt;var&gt;xxxx&lt;/var&gt; and &lt;var&gt;xxxxxxxx&lt;/var&gt;, respectively, where each &lt;var&gt;x&lt;/var&gt; is a single hexadecimal digit. For example, &lt;code&gt;?\N{U+E0}&lt;/code&gt;, &lt;code&gt;?\u00e0&lt;/code&gt; and &lt;code&gt;?\U000000E0&lt;/code&gt; are all equivalent to &lt;code&gt;?&amp;agrave;&lt;/code&gt; and to &amp;lsquo;</source>
          <target state="translated">유니 코드 값으로 문자를 지정할 수 있습니다. &lt;code&gt;?\N{U+&lt;var&gt;X&lt;/var&gt;}&lt;/code&gt; 는 유니 코드 코드 포인트 &lt;var&gt;X&lt;/var&gt; 가 있는 문자를 나타냅니다. 여기서 &lt;var&gt;X&lt;/var&gt; 는 16 진수입니다. 또한 &lt;code&gt;?\u&lt;var&gt;xxxx&lt;/var&gt;&lt;/code&gt; 및 &lt;code&gt;?\U&lt;var&gt;xxxxxxxx&lt;/var&gt;&lt;/code&gt; 는 각각 코드 포인트 &lt;var&gt;xxxx&lt;/var&gt; 및 &lt;var&gt;xxxxxxxx&lt;/var&gt; 를 나타냅니다 . 여기서 각 &lt;var&gt;x&lt;/var&gt; 는 단일 16 진수 숫자입니다. 예를 들어, &lt;code&gt;?\N{U+E0}&lt;/code&gt; , &lt;code&gt;?\u00e0&lt;/code&gt; 와 &lt;code&gt;?\U000000E0&lt;/code&gt; 모두 동일로 &lt;code&gt;?&amp;agrave;&lt;/code&gt; 과에 '</target>
        </trans-unit>
        <trans-unit id="99b89bbb349076c0264b77f65dc63b38485ca758" translate="yes" xml:space="preserve">
          <source>You can specify characters by their character code in octal. An octal escape sequence consists of a backslash followed by up to three octal digits; thus, &amp;lsquo;</source>
          <target state="translated">8 진수의 문자 코드로 문자를 지정할 수 있습니다. 8 진 이스케이프 시퀀스는 백 슬래시와 최대 3 개의 8 진 숫자로 구성됩니다. 따라서 '</target>
        </trans-unit>
        <trans-unit id="e29573a3c2b2873e834d65bde8ec8e470b73ac4b" translate="yes" xml:space="preserve">
          <source>You can specify characters by their hexadecimal character codes. A hexadecimal escape sequence consists of a backslash, &amp;lsquo;</source>
          <target state="translated">16 진 문자 코드로 문자를 지정할 수 있습니다. 16 진수 이스케이프 시퀀스는 백 슬래시 '</target>
        </trans-unit>
        <trans-unit id="6a5d2cd72a1a42ee02a1333681db2b9d229c84c6" translate="yes" xml:space="preserve">
          <source>You can specify keyword-argument pairs in a customization type after the type name symbol. Here are the keywords you can use, and their meanings:</source>
          <target state="translated">유형 이름 기호 뒤에 사용자 정의 유형에서 키워드-인수 쌍을 지정할 수 있습니다. 사용할 수있는 키워드와 그 의미는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="038e5a26e574b8c0ec5a206c501ba172deac575a" translate="yes" xml:space="preserve">
          <source>You can specify more complex ways of choosing a fill prefix automatically by setting this variable to a function. The function is called with point after the left margin (if any) of a line, and it must preserve point. It should return either that line&amp;rsquo;s fill prefix or &lt;code&gt;nil&lt;/code&gt;, meaning it has failed to determine a prefix.</source>
          <target state="translated">이 변수를 함수로 설정하여 채우기 접두사를 자동으로 선택하는 더 복잡한 방법을 지정할 수 있습니다. 이 함수는 선의 왼쪽 여백 (있는 경우) 뒤의 점으로 호출되며 점을 유지해야합니다. 해당 줄의 채우기 접두사 또는 &lt;code&gt;nil&lt;/code&gt; 을 반환해야합니다. 즉 , 접두사를 결정하는 데 실패했습니다.</target>
        </trans-unit>
        <trans-unit id="4a04e7330981d42e158fa474bd6ff308c3738ec8" translate="yes" xml:space="preserve">
          <source>You can specify more than a single attribute, one after the other. Currently, only the following attributes are recognized:</source>
          <target state="translated">둘 이상의 속성을 차례로 지정할 수 있습니다. 현재 다음 속성 만 인식됩니다.</target>
        </trans-unit>
        <trans-unit id="603b19c2e2de6ad83d5fb5ef626f336560adff8e" translate="yes" xml:space="preserve">
          <source>You can specify named character classes, just like in character alternatives. For instance, &amp;lsquo;</source>
          <target state="translated">문자 대체에서와 같이 명명 된 문자 클래스를 지정할 수 있습니다. 예를 들어 '</target>
        </trans-unit>
        <trans-unit id="756e5dbf3f0bfc7edf160c271a59a572fcaf47d6" translate="yes" xml:space="preserve">
          <source>You can specify other Lisp expressions to execute just before dumping by putting them in a library named</source>
          <target state="translated">덤핑 직전에 실행할 다른 Lisp 표현식을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="13c402b3c9308f7f5ca752a2b4ada7983442ea94" translate="yes" xml:space="preserve">
          <source>You can specify safe values for a variable with a &lt;code&gt;safe-local-variable&lt;/code&gt; property. The property has to be a function of one argument; any value is safe if the function returns non-&lt;code&gt;nil&lt;/code&gt; given that value. Many commonly-encountered file variables have &lt;code&gt;safe-local-variable&lt;/code&gt; properties; these include &lt;code&gt;fill-column&lt;/code&gt;, &lt;code&gt;fill-prefix&lt;/code&gt;, and &lt;code&gt;indent-tabs-mode&lt;/code&gt;. For boolean-valued variables that are safe, use &lt;code&gt;booleanp&lt;/code&gt; as the property value.</source>
          <target state="translated">&lt;code&gt;safe-local-variable&lt;/code&gt; 속성 을 사용하여 변수에 대한 안전한 값을 지정할 수 있습니다 . 속성은 한 인수의 함수 여야합니다. 함수가 해당 값이 주어지면 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값을 반환하면 모든 값이 안전 합니다. 일반적으로 발생하는 많은 파일 변수에는 &lt;code&gt;safe-local-variable&lt;/code&gt; 속성이 있습니다. 여기에는 &lt;code&gt;fill-column&lt;/code&gt; , &lt;code&gt;fill-prefix&lt;/code&gt; 및 &lt;code&gt;indent-tabs-mode&lt;/code&gt; 가 포함됩니다 . 안전한 부울 값 변수의 경우 &lt;code&gt;booleanp&lt;/code&gt; 를 속성 값으로 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7b5de67febc2dec619a9ddea914b0305e9b79595" translate="yes" xml:space="preserve">
          <source>You can specify the coding system for a specific operation by binding the variables &lt;code&gt;coding-system-for-read&lt;/code&gt; and/or &lt;code&gt;coding-system-for-write&lt;/code&gt;.</source>
          <target state="translated">특정 작업에 대한 코딩 시스템은 &lt;code&gt;coding-system-for-read&lt;/code&gt; 및 / 또는 &lt;code&gt;coding-system-for-write&lt;/code&gt; 변수를 바인딩하여 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="451961e5aef89ab407a1570a05cebab5741c6910" translate="yes" xml:space="preserve">
          <source>You can specify the coding system to use either explicitly (see &lt;a href=&quot;specifying-coding-systems#Specifying-Coding-Systems&quot;&gt;Specifying Coding Systems&lt;/a&gt;), or implicitly using a default mechanism (see &lt;a href=&quot;default-coding-systems#Default-Coding-Systems&quot;&gt;Default Coding Systems&lt;/a&gt;). But these methods may not completely specify what to do. For example, they may choose a coding system such as &lt;code&gt;undecided&lt;/code&gt; which leaves the character code conversion to be determined from the data. In these cases, the I/O operation finishes the job of choosing a coding system. Very often you will want to find out afterwards which coding system was chosen.</source>
          <target state="translated">You can specify the coding system to use either explicitly (see &lt;a href=&quot;specifying-coding-systems#Specifying-Coding-Systems&quot;&gt;Specifying Coding Systems&lt;/a&gt;), or implicitly using a default mechanism (see &lt;a href=&quot;default-coding-systems#Default-Coding-Systems&quot;&gt;Default Coding Systems&lt;/a&gt;). But these methods may not completely specify what to do. For example, they may choose a coding system such as &lt;code&gt;undecided&lt;/code&gt; which leaves the character code conversion to be determined from the data. In these cases, the I/O operation finishes the job of choosing a coding system. Very often you will want to find out afterwards which coding system was chosen.</target>
        </trans-unit>
        <trans-unit id="6453110f6c0c88bfddfc9e3591ffa32be27563ba" translate="yes" xml:space="preserve">
          <source>You can specify the line spacing for all lines in a buffer via the buffer-local &lt;code&gt;line-spacing&lt;/code&gt; variable. An integer specifies the number of pixels put below lines. A floating-point number specifies the spacing relative to the default frame line height. This overrides line spacings specified for the frame.</source>
          <target state="translated">You can specify the line spacing for all lines in a buffer via the buffer-local &lt;code&gt;line-spacing&lt;/code&gt; variable. An integer specifies the number of pixels put below lines. A floating-point number specifies the spacing relative to the default frame line height. This overrides line spacings specified for the frame.</target>
        </trans-unit>
        <trans-unit id="a66db481db7c101248d28b76de2aac79a7c360be" translate="yes" xml:space="preserve">
          <source>You can specify the mouse pointer style for particular text or images using the &lt;code&gt;pointer&lt;/code&gt; text property, and for images with the &lt;code&gt;:pointer&lt;/code&gt; and &lt;code&gt;:map&lt;/code&gt; image properties. The values you can use in these properties are &lt;code&gt;text&lt;/code&gt; (or &lt;code&gt;nil&lt;/code&gt;), &lt;code&gt;arrow&lt;/code&gt;, &lt;code&gt;hand&lt;/code&gt;, &lt;code&gt;vdrag&lt;/code&gt;, &lt;code&gt;hdrag&lt;/code&gt;, &lt;code&gt;modeline&lt;/code&gt;, and &lt;code&gt;hourglass&lt;/code&gt;. &lt;code&gt;text&lt;/code&gt; stands for the usual mouse pointer style used over text.</source>
          <target state="translated">You can specify the mouse pointer style for particular text or images using the &lt;code&gt;pointer&lt;/code&gt; text property, and for images with the &lt;code&gt;:pointer&lt;/code&gt; and &lt;code&gt;:map&lt;/code&gt; image properties. The values you can use in these properties are &lt;code&gt;text&lt;/code&gt; (or &lt;code&gt;nil&lt;/code&gt; ), &lt;code&gt;arrow&lt;/code&gt; , &lt;code&gt;hand&lt;/code&gt; , &lt;code&gt;vdrag&lt;/code&gt; , &lt;code&gt;hdrag&lt;/code&gt; , &lt;code&gt;modeline&lt;/code&gt; , and &lt;code&gt;hourglass&lt;/code&gt; . &lt;code&gt;text&lt;/code&gt; stands for the usual mouse pointer style used over text.</target>
        </trans-unit>
        <trans-unit id="9eecac5724696ecbf6e43af8e2bc46c233ae794e" translate="yes" xml:space="preserve">
          <source>You can specify the parameters for the initial startup frame by setting &lt;code&gt;initial-frame-alist&lt;/code&gt; in your init file (see &lt;a href=&quot;init-file#Init-File&quot;&gt;Init File&lt;/a&gt;).</source>
          <target state="translated">You can specify the parameters for the initial startup frame by setting &lt;code&gt;initial-frame-alist&lt;/code&gt; in your init file (see &lt;a href=&quot;init-file#Init-File&quot;&gt;Init File&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="944f41fd72108f4f5b0ec80eb8b18e1f568f2022" translate="yes" xml:space="preserve">
          <source>You can specify the text to use in the customization buffer by adding &lt;code&gt;:tag &lt;var&gt;name&lt;/var&gt;&lt;/code&gt; after the first element of the &lt;var&gt;link-data&lt;/var&gt;; for example, &lt;code&gt;(info-link :tag &quot;foo&quot; &quot;(emacs)Top&quot;)&lt;/code&gt; makes a link to the Emacs manual which appears in the buffer as &amp;lsquo;</source>
          <target state="translated">You can specify the text to use in the customization buffer by adding &lt;code&gt;:tag &lt;var&gt;name&lt;/var&gt;&lt;/code&gt; after the first element of the &lt;var&gt;link-data&lt;/var&gt; ; for example, &lt;code&gt;(info-link :tag &quot;foo&quot; &quot;(emacs)Top&quot;)&lt;/code&gt; makes a link to the Emacs manual which appears in the buffer as &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="3f8d374bada8e52133f36bfee4cd3d5882ae7896" translate="yes" xml:space="preserve">
          <source>You can specify which buffer to scroll by setting the variable &lt;code&gt;other-window-scroll-buffer&lt;/code&gt; to a buffer. If that buffer isn&amp;rsquo;t already displayed, &lt;code&gt;scroll-other-window&lt;/code&gt; displays it in some window.</source>
          <target state="translated">You can specify which buffer to scroll by setting the variable &lt;code&gt;other-window-scroll-buffer&lt;/code&gt; to a buffer. If that buffer isn&amp;rsquo;t already displayed, &lt;code&gt;scroll-other-window&lt;/code&gt; displays it in some window.</target>
        </trans-unit>
        <trans-unit id="090fe002989c86a53fc670fecc0fc1b86c8cdd6a" translate="yes" xml:space="preserve">
          <source>You can specify which keysyms Emacs should use for the Control, Meta, Alt, Hyper, and Super modifiers by setting these variables:</source>
          <target state="translated">You can specify which keysyms Emacs should use for the Control, Meta, Alt, Hyper, and Super modifiers by setting these variables:</target>
        </trans-unit>
        <trans-unit id="e2f3d4dd18da2288a92ea52b44ddcd66255461d3" translate="yes" xml:space="preserve">
          <source>You can stop and resume operation of a network process by calling &lt;code&gt;stop-process&lt;/code&gt; and &lt;code&gt;continue-process&lt;/code&gt;. For a server process, being stopped means not accepting new connections. (Up to 5 connection requests will be queued for when you resume the server; you can increase this limit, unless it is imposed by the operating system&amp;mdash;see the &lt;code&gt;:server&lt;/code&gt; keyword of &lt;code&gt;make-network-process&lt;/code&gt;, &lt;a href=&quot;network-processes#Network-Processes&quot;&gt;Network Processes&lt;/a&gt;.) For a network stream connection, being stopped means not processing input (any arriving input waits until you resume the connection). For a datagram connection, some number of packets may be queued but input may be lost. You can use the function &lt;code&gt;process-command&lt;/code&gt; to determine whether a network connection or server is stopped; a non-&lt;code&gt;nil&lt;/code&gt; value means yes.</source>
          <target state="translated">You can stop and resume operation of a network process by calling &lt;code&gt;stop-process&lt;/code&gt; and &lt;code&gt;continue-process&lt;/code&gt; . For a server process, being stopped means not accepting new connections. (Up to 5 connection requests will be queued for when you resume the server; you can increase this limit, unless it is imposed by the operating system&amp;mdash;see the &lt;code&gt;:server&lt;/code&gt; keyword of &lt;code&gt;make-network-process&lt;/code&gt; , &lt;a href=&quot;network-processes#Network-Processes&quot;&gt;Network Processes&lt;/a&gt;.) For a network stream connection, being stopped means not processing input (any arriving input waits until you resume the connection). For a datagram connection, some number of packets may be queued but input may be lost. You can use the function &lt;code&gt;process-command&lt;/code&gt; to determine whether a network connection or server is stopped; a non- &lt;code&gt;nil&lt;/code&gt; value means yes.</target>
        </trans-unit>
        <trans-unit id="09e644fb1b5fcd65be9977b5d88096c2a1451720" translate="yes" xml:space="preserve">
          <source>You can supply a &amp;ldquo;focus follows mouse&amp;rdquo; policy for individual Emacs windows by customizing the variable &lt;code&gt;mouse-autoselect-window&lt;/code&gt; (see &lt;a href=&quot;mouse-window-auto_002dselection#Mouse-Window-Auto_002dselection&quot;&gt;Mouse Window Auto-selection&lt;/a&gt;).</source>
          <target state="translated">You can supply a &amp;ldquo;focus follows mouse&amp;rdquo; policy for individual Emacs windows by customizing the variable &lt;code&gt;mouse-autoselect-window&lt;/code&gt; (see &lt;a href=&quot;mouse-window-auto_002dselection#Mouse-Window-Auto_002dselection&quot;&gt;Mouse Window Auto-selection&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="d505b7142511d692afb7bf330056e22c40b7ee7e" translate="yes" xml:space="preserve">
          <source>You can suppress the warning for a specific call to a function &lt;var&gt;func&lt;/var&gt; by conditionalizing it on an &lt;code&gt;fboundp&lt;/code&gt; test, like this:</source>
          <target state="translated">You can suppress the warning for a specific call to a function &lt;var&gt;func&lt;/var&gt; by conditionalizing it on an &lt;code&gt;fboundp&lt;/code&gt; test, like this:</target>
        </trans-unit>
        <trans-unit id="50aae38861bd74bc551fb9215eb842d46219608e" translate="yes" xml:space="preserve">
          <source>You can tell the compiler that a function is defined using &lt;code&gt;declare-function&lt;/code&gt;. See &lt;a href=&quot;declaring-functions#Declaring-Functions&quot;&gt;Declaring Functions&lt;/a&gt;.</source>
          <target state="translated">You can tell the compiler that a function is defined using &lt;code&gt;declare-function&lt;/code&gt; . See &lt;a href=&quot;declaring-functions#Declaring-Functions&quot;&gt;Declaring Functions&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="242e5c9f62ba920a7ef2e01b2046f2ae25c28304" translate="yes" xml:space="preserve">
          <source>You can test an object to see whether it is a marker, or whether it is either an integer or a marker. The latter test is useful in connection with the arithmetic functions that work with both markers and integers.</source>
          <target state="translated">You can test an object to see whether it is a marker, or whether it is either an integer or a marker. The latter test is useful in connection with the arithmetic functions that work with both markers and integers.</target>
        </trans-unit>
        <trans-unit id="ca1f03885dbe1a880635516b88dcebc50cc540a9" translate="yes" xml:space="preserve">
          <source>You can test the voidness of a symbol&amp;rsquo;s function definition with &lt;code&gt;fboundp&lt;/code&gt;. After you have given a symbol a function definition, you can make it void once more using &lt;code&gt;fmakunbound&lt;/code&gt;.</source>
          <target state="translated">You can test the voidness of a symbol&amp;rsquo;s function definition with &lt;code&gt;fboundp&lt;/code&gt; . After you have given a symbol a function definition, you can make it void once more using &lt;code&gt;fmakunbound&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d8e18e52aba1bb0d4801e32af3c8e8c5b15f9b00" translate="yes" xml:space="preserve">
          <source>You can test whether an arbitrary Lisp object is a symbol with &lt;code&gt;symbolp&lt;/code&gt;:</source>
          <target state="translated">You can test whether an arbitrary Lisp object is a symbol with &lt;code&gt;symbolp&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="42a8cc088f3055eacf6f83215cea24410407efa9" translate="yes" xml:space="preserve">
          <source>You can then activate the multibuffer change group with a single call to &lt;code&gt;activate-change-group&lt;/code&gt;, and finish it with a single call to &lt;code&gt;accept-change-group&lt;/code&gt; or &lt;code&gt;cancel-change-group&lt;/code&gt;.</source>
          <target state="translated">You can then activate the multibuffer change group with a single call to &lt;code&gt;activate-change-group&lt;/code&gt; , and finish it with a single call to &lt;code&gt;accept-change-group&lt;/code&gt; or &lt;code&gt;cancel-change-group&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a5c5d2ac10244ab14ef8f9ed2a439c5b56810c63" translate="yes" xml:space="preserve">
          <source>You can think of a hash table conceptually as a large array of many slots, each capable of holding one association. To look up a key, &lt;code&gt;gethash&lt;/code&gt; first computes an integer, the hash code, from the key. It can reduce this integer modulo the length of the array, to produce an index in the array. Then it looks in that slot, and if necessary in other nearby slots, to see if it has found the key being sought.</source>
          <target state="translated">You can think of a hash table conceptually as a large array of many slots, each capable of holding one association. To look up a key, &lt;code&gt;gethash&lt;/code&gt; first computes an integer, the hash code, from the key. It can reduce this integer modulo the length of the array, to produce an index in the array. Then it looks in that slot, and if necessary in other nearby slots, to see if it has found the key being sought.</target>
        </trans-unit>
        <trans-unit id="7a297cf6ad10d5b7cde372990d5abb748d81bbf2" translate="yes" xml:space="preserve">
          <source>You can trace the execution of functions involved in the problem using the tracing facilities provided by the</source>
          <target state="translated">You can trace the execution of functions involved in the problem using the tracing facilities provided by the</target>
        </trans-unit>
        <trans-unit id="5d8c58722b6dcc78e5b5eca134c7ee5d56f77691" translate="yes" xml:space="preserve">
          <source>You can turn off multibyte support in a specific buffer by invoking the command &lt;code&gt;toggle-enable-multibyte-characters&lt;/code&gt; in that buffer.</source>
          <target state="translated">You can turn off multibyte support in a specific buffer by invoking the command &lt;code&gt;toggle-enable-multibyte-characters&lt;/code&gt; in that buffer.</target>
        </trans-unit>
        <trans-unit id="8abbdc8deefc4fda9746ca12a4279d4733e246cd" translate="yes" xml:space="preserve">
          <source>You can use &amp;lsquo;</source>
          <target state="translated">You can use &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="0a4d3379f24b4eed1c3da5592770950caab51b9e" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;define-hash-table-test&lt;/code&gt; (see &lt;a href=&quot;defining-hash#Defining-Hash&quot;&gt;Defining Hash&lt;/a&gt;) to define additional possibilities for &lt;var&gt;test&lt;/var&gt;.</source>
          <target state="translated">You can use &lt;code&gt;define-hash-table-test&lt;/code&gt; (see &lt;a href=&quot;defining-hash#Defining-Hash&quot;&gt;Defining Hash&lt;/a&gt;) to define additional possibilities for &lt;var&gt;test&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="16fc2e8805143f22077355b0f09ddcca63437e06" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;font-lock-add-keywords&lt;/code&gt; to add additional search-based fontification rules to a major mode, and &lt;code&gt;font-lock-remove-keywords&lt;/code&gt; to remove rules.</source>
          <target state="translated">You can use &lt;code&gt;font-lock-add-keywords&lt;/code&gt; to add additional search-based fontification rules to a major mode, and &lt;code&gt;font-lock-remove-keywords&lt;/code&gt; to remove rules.</target>
        </trans-unit>
        <trans-unit id="ce09da096fce8be0b9f2889d61db1c88e2bef038" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;forward-comment&lt;/code&gt; to move forward or backward over one comment or several comments.</source>
          <target state="translated">You can use &lt;code&gt;forward-comment&lt;/code&gt; to move forward or backward over one comment or several comments.</target>
        </trans-unit>
        <trans-unit id="d1315ba3644568f81395912dfb5a13252fff19c0" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;input-decode-map&lt;/code&gt;, &lt;code&gt;local-function-key-map&lt;/code&gt;, and &lt;code&gt;key-translation-map&lt;/code&gt; for more than simple aliases, by using a function, instead of a key sequence, as the translation of a key. Then this function is called to compute the translation of that key.</source>
          <target state="translated">You can use &lt;code&gt;input-decode-map&lt;/code&gt; , &lt;code&gt;local-function-key-map&lt;/code&gt; , and &lt;code&gt;key-translation-map&lt;/code&gt; for more than simple aliases, by using a function, instead of a key sequence, as the translation of a key. Then this function is called to compute the translation of that key.</target>
        </trans-unit>
        <trans-unit id="a52609c7a14d99ff04cb4a84eb444776aa181413" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;set-process-coding-system&lt;/code&gt; to specify which coding system to use (see &lt;a href=&quot;process-information#Process-Information&quot;&gt;Process Information&lt;/a&gt;). Otherwise, the coding system comes from &lt;code&gt;coding-system-for-read&lt;/code&gt;, if that is non-&lt;code&gt;nil&lt;/code&gt;; or else from the defaulting mechanism (see &lt;a href=&quot;default-coding-systems#Default-Coding-Systems&quot;&gt;Default Coding Systems&lt;/a&gt;). If the text output by a process contains null bytes, Emacs by default uses &lt;code&gt;no-conversion&lt;/code&gt; for it; see &lt;a href=&quot;lisp-and-coding-systems#Lisp-and-Coding-Systems&quot;&gt;inhibit-nul-byte-detection&lt;/a&gt;, for how to control this behavior.</source>
          <target state="translated">You can use &lt;code&gt;set-process-coding-system&lt;/code&gt; to specify which coding system to use (see &lt;a href=&quot;process-information#Process-Information&quot;&gt;Process Information&lt;/a&gt;). Otherwise, the coding system comes from &lt;code&gt;coding-system-for-read&lt;/code&gt; , if that is non- &lt;code&gt;nil&lt;/code&gt; ; or else from the defaulting mechanism (see &lt;a href=&quot;default-coding-systems#Default-Coding-Systems&quot;&gt;Default Coding Systems&lt;/a&gt;). If the text output by a process contains null bytes, Emacs by default uses &lt;code&gt;no-conversion&lt;/code&gt; for it; see &lt;a href=&quot;lisp-and-coding-systems#Lisp-and-Coding-Systems&quot;&gt;inhibit-nul-byte-detection&lt;/a&gt;, for how to control this behavior.</target>
        </trans-unit>
        <trans-unit id="aa14cfe3eeb5b6a06b39c4132db95b4a971ed233" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;vconcat&lt;/code&gt; to print a bool-vector like other vectors:</source>
          <target state="translated">You can use &lt;code&gt;vconcat&lt;/code&gt; to print a bool-vector like other vectors:</target>
        </trans-unit>
        <trans-unit id="a7522500771e414a03cc4038c31e65c8b9eb4fd6" translate="yes" xml:space="preserve">
          <source>You can use &lt;em&gt;overlays&lt;/em&gt; to alter the appearance of a buffer&amp;rsquo;s text on the screen, for the sake of presentation features. An overlay is an object that belongs to a particular buffer, and has a specified beginning and end. It also has properties that you can examine and set; these affect the display of the text within the overlay.</source>
          <target state="translated">You can use &lt;em&gt;overlays&lt;/em&gt; to alter the appearance of a buffer&amp;rsquo;s text on the screen, for the sake of presentation features. An overlay is an object that belongs to a particular buffer, and has a specified beginning and end. It also has properties that you can examine and set; these affect the display of the text within the overlay.</target>
        </trans-unit>
        <trans-unit id="162e252290dff840906d704d1d1169f825b753de" translate="yes" xml:space="preserve">
          <source>You can use &lt;var&gt;action-alist&lt;/var&gt; to specify additional possible answers and what they mean. It is an alist of elements of the form &lt;code&gt;(&lt;var&gt;char&lt;/var&gt; &lt;var&gt;function&lt;/var&gt; &lt;var&gt;help&lt;/var&gt;)&lt;/code&gt;, each of which defines one additional answer. In this element, &lt;var&gt;char&lt;/var&gt; is a character (the answer); &lt;var&gt;function&lt;/var&gt; is a function of one argument (an object from &lt;var&gt;list&lt;/var&gt;); &lt;var&gt;help&lt;/var&gt; is a string.</source>
          <target state="translated">You can use &lt;var&gt;action-alist&lt;/var&gt; to specify additional possible answers and what they mean. It is an alist of elements of the form &lt;code&gt;(&lt;var&gt;char&lt;/var&gt; &lt;var&gt;function&lt;/var&gt; &lt;var&gt;help&lt;/var&gt;)&lt;/code&gt; , each of which defines one additional answer. In this element, &lt;var&gt;char&lt;/var&gt; is a character (the answer); &lt;var&gt;function&lt;/var&gt; is a function of one argument (an object from &lt;var&gt;list&lt;/var&gt; ); &lt;var&gt;help&lt;/var&gt; is a string.</target>
        </trans-unit>
        <trans-unit id="4b1f3ec2142da96f2f1929a76752ad36e1c4483d" translate="yes" xml:space="preserve">
          <source>You can use &lt;var&gt;case-fold&lt;/var&gt; in &lt;code&gt;font-lock-defaults&lt;/code&gt; to specify the value of &lt;code&gt;font-lock-keywords-case-fold-search&lt;/code&gt; which says whether search-based fontification should be case-insensitive.</source>
          <target state="translated">You can use &lt;var&gt;case-fold&lt;/var&gt; in &lt;code&gt;font-lock-defaults&lt;/code&gt; to specify the value of &lt;code&gt;font-lock-keywords-case-fold-search&lt;/code&gt; which says whether search-based fontification should be case-insensitive.</target>
        </trans-unit>
        <trans-unit id="cf09f755e1f8ce745389a2da2a007e527db16fac" translate="yes" xml:space="preserve">
          <source>You can use Auto Fill mode (see &lt;a href=&quot;auto-filling#Auto-Filling&quot;&gt;Auto Filling&lt;/a&gt;) to fill text automatically as you insert it, but changes to existing text may leave it improperly filled. Then you must fill the text explicitly.</source>
          <target state="translated">You can use Auto Fill mode (see &lt;a href=&quot;auto-filling#Auto-Filling&quot;&gt;Auto Filling&lt;/a&gt;) to fill text automatically as you insert it, but changes to existing text may leave it improperly filled. Then you must fill the text explicitly.</target>
        </trans-unit>
        <trans-unit id="a87278b19a10a1405a845414b4efa69c5867e45c" translate="yes" xml:space="preserve">
          <source>You can use Edebug, a source-level debugger for Emacs Lisp.</source>
          <target state="translated">You can use Edebug, a source-level debugger for Emacs Lisp.</target>
        </trans-unit>
        <trans-unit id="bd358ceeaead124b192baf3e41c34a92a040d5f4" translate="yes" xml:space="preserve">
          <source>You can use a &lt;em&gt;transaction queue&lt;/em&gt; to communicate with a subprocess using transactions. First use &lt;code&gt;tq-create&lt;/code&gt; to create a transaction queue communicating with a specified process. Then you can call &lt;code&gt;tq-enqueue&lt;/code&gt; to send a transaction.</source>
          <target state="translated">You can use a &lt;em&gt;transaction queue&lt;/em&gt; to communicate with a subprocess using transactions. First use &lt;code&gt;tq-create&lt;/code&gt; to create a transaction queue communicating with a specified process. Then you can call &lt;code&gt;tq-enqueue&lt;/code&gt; to send a transaction.</target>
        </trans-unit>
        <trans-unit id="93f1f2b0f4be59334d39ac4609885aa4ee22dbf9" translate="yes" xml:space="preserve">
          <source>You can use a display table to substitute other text for the ellipsis (&amp;lsquo;</source>
          <target state="translated">You can use a display table to substitute other text for the ellipsis (&amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="3e769c74636448420805448846b68d823e62ed42" translate="yes" xml:space="preserve">
          <source>You can use a longer form to specify keywords such as &lt;code&gt;:enable&lt;/code&gt; and &lt;code&gt;:visible&lt;/code&gt; for a menu separator:</source>
          <target state="translated">You can use a longer form to specify keywords such as &lt;code&gt;:enable&lt;/code&gt; and &lt;code&gt;:visible&lt;/code&gt; for a menu separator:</target>
        </trans-unit>
        <trans-unit id="663cd45dc3813939091f6c964a4573591a9fb55b" translate="yes" xml:space="preserve">
          <source>You can use a non-default string as the autoload cookie and have the corresponding autoload calls written into a file whose name is different from the default</source>
          <target state="translated">You can use a non-default string as the autoload cookie and have the corresponding autoload calls written into a file whose name is different from the default</target>
        </trans-unit>
        <trans-unit id="e735b38a87c1bcd5faacacb0143ca21732f64ebc" translate="yes" xml:space="preserve">
          <source>You can use an image descriptor by setting up the &lt;code&gt;display&lt;/code&gt; property yourself, but it is easier to use the functions in this section.</source>
          <target state="translated">You can use an image descriptor by setting up the &lt;code&gt;display&lt;/code&gt; property yourself, but it is easier to use the functions in this section.</target>
        </trans-unit>
        <trans-unit id="c3f59a33a52b6c57525279ddfc90d34fbe5a9ffe" translate="yes" xml:space="preserve">
          <source>You can use command-line arguments to request various actions when you start Emacs. Note that the recommended way of using Emacs is to start it just once, after logging in, and then do all editing in the same Emacs session (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Entering-Emacs.html#Entering-Emacs&quot;&gt;Entering Emacs&lt;/a&gt; in</source>
          <target state="translated">You can use command-line arguments to request various actions when you start Emacs. Note that the recommended way of using Emacs is to start it just once, after logging in, and then do all editing in the same Emacs session (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Entering-Emacs.html#Entering-Emacs&quot;&gt;Entering Emacs&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="3b952857e85550f87e25935f96471c9cb6976f9d" translate="yes" xml:space="preserve">
          <source>You can use command-line arguments to request various actions when you start Emacs. Note that the recommended way of using Emacs is to start it just once, after logging in, and then do all editing in the same Emacs session (see &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Entering-Emacs.html#Entering-Emacs&quot;&gt;Entering Emacs&lt;/a&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb1ba31b7bb70797db8871d22e8485dc4a5fb88" translate="yes" xml:space="preserve">
          <source>You can use the</source>
          <target state="translated">당신은 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="e7db821774b3d488810d1ba9263017f5f08ae4ef" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;keymap&lt;/code&gt; property to specify a keymap. This keymap only takes real effect for mouse clicks; binding character keys and function keys to it has no effect, since it is impossible to move point into the mode line.</source>
          <target state="translated">You can use the &lt;code&gt;keymap&lt;/code&gt; property to specify a keymap. This keymap only takes real effect for mouse clicks; binding character keys and function keys to it has no effect, since it is impossible to move point into the mode line.</target>
        </trans-unit>
        <trans-unit id="3cf88e11b368928ae88d164bcfeb9074e25799aa" translate="yes" xml:space="preserve">
          <source>You can use the &lt;em&gt;evaluation list buffer&lt;/em&gt;, called</source>
          <target state="translated">You can use the &lt;em&gt;evaluation list buffer&lt;/em&gt;, called</target>
        </trans-unit>
        <trans-unit id="67360eaf4e68f560650dc3bcc8e49328d4d42b07" translate="yes" xml:space="preserve">
          <source>You can use the ERT package to write regression tests for the program. See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/ert/index.html#Top&quot;&gt;the ERT manual&lt;/a&gt; in</source>
          <target state="translated">You can use the ERT package to write regression tests for the program. See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/ert/index.html#Top&quot;&gt;the ERT manual&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="f8663e28726bbb5467db8677e3800111194a380d" translate="yes" xml:space="preserve">
          <source>You can use the Testcover package to perform coverage testing on the program.</source>
          <target state="translated">You can use the Testcover package to perform coverage testing on the program.</target>
        </trans-unit>
        <trans-unit id="8456af73bfb54e43f4f609e8a59655ab8542b993" translate="yes" xml:space="preserve">
          <source>You can use the following function to replace the text of one buffer with the text of another buffer:</source>
          <target state="translated">You can use the following function to replace the text of one buffer with the text of another buffer:</target>
        </trans-unit>
        <trans-unit id="68c5260e0ce4876ffde2aa7c3d7839c91f40b312" translate="yes" xml:space="preserve">
          <source>You can use the function &lt;code&gt;format-mode-line&lt;/code&gt; to compute the text that would appear in a mode line or header line based on a certain mode line construct.</source>
          <target state="translated">You can use the function &lt;code&gt;format-mode-line&lt;/code&gt; to compute the text that would appear in a mode line or header line based on a certain mode line construct.</target>
        </trans-unit>
        <trans-unit id="647337087dbd3ac6af4256b2d8a0f7ab79fd793a" translate="yes" xml:space="preserve">
          <source>You can use the function &lt;code&gt;functionp&lt;/code&gt; to test if an object is a function:</source>
          <target state="translated">You can use the function &lt;code&gt;functionp&lt;/code&gt; to test if an object is a function:</target>
        </trans-unit>
        <trans-unit id="024702a02bb9d06418f52623f8e21b5e697d605b" translate="yes" xml:space="preserve">
          <source>You can use the function &lt;code&gt;read-quoted-char&lt;/code&gt; to ask the user to specify a character, and allow the user to specify a control or meta character conveniently, either literally or as an octal character code. The command &lt;code&gt;quoted-insert&lt;/code&gt; uses this function.</source>
          <target state="translated">You can use the function &lt;code&gt;read-quoted-char&lt;/code&gt; to ask the user to specify a character, and allow the user to specify a control or meta character conveniently, either literally or as an octal character code. The command &lt;code&gt;quoted-insert&lt;/code&gt; uses this function.</target>
        </trans-unit>
        <trans-unit id="cc07e6bfa6ba8b31466364fe3cfad3370af669c3" translate="yes" xml:space="preserve">
          <source>You can use the modifier keys</source>
          <target state="translated">You can use the modifier keys</target>
        </trans-unit>
        <trans-unit id="5c232c0ab13da24a4cc6ce9b08cf5e220308c74c" translate="yes" xml:space="preserve">
          <source>You can use the same backslash escape-sequences in a string constant as in character literals (but do not use the question mark that begins a character constant). For example, you can write a string containing the nonprinting characters tab and</source>
          <target state="translated">You can use the same backslash escape-sequences in a string constant as in character literals (but do not use the question mark that begins a character constant). For example, you can write a string containing the nonprinting characters tab and</target>
        </trans-unit>
        <trans-unit id="adb88bd2158d3b6c848999aac14e89db6eadc53b" translate="yes" xml:space="preserve">
          <source>You can use the same syntax for punctuation characters. However, if the punctuation character has a special syntactic meaning in Lisp, you must quote it with a &amp;lsquo;</source>
          <target state="translated">You can use the same syntax for punctuation characters. However, if the punctuation character has a special syntactic meaning in Lisp, you must quote it with a &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="1d42eeec527c746a76130993ed10aead35d1760f" translate="yes" xml:space="preserve">
          <source>You can use the variable &lt;code&gt;load-read-function&lt;/code&gt; to specify a function for &lt;code&gt;load&lt;/code&gt; to use instead of &lt;code&gt;read&lt;/code&gt; for reading expressions. See below.</source>
          <target state="translated">You can use the variable &lt;code&gt;load-read-function&lt;/code&gt; to specify a function for &lt;code&gt;load&lt;/code&gt; to use instead of &lt;code&gt;read&lt;/code&gt; for reading expressions. See below.</target>
        </trans-unit>
        <trans-unit id="6c95943e19015b6302e08aa860452b2f3e608a83" translate="yes" xml:space="preserve">
          <source>You can use this function for directory names and for file names, because it recognizes abbreviations even as part of the name.</source>
          <target state="translated">You can use this function for directory names and for file names, because it recognizes abbreviations even as part of the name.</target>
        </trans-unit>
        <trans-unit id="3cac207c4c46a09de33ab85187359f2ae081cbcd" translate="yes" xml:space="preserve">
          <source>You can use this keyword more than once, to add multiple links.</source>
          <target state="translated">You can use this keyword more than once, to add multiple links.</target>
        </trans-unit>
        <trans-unit id="6aeccbd317ca70cbbc3a40ac318c169a41df333e" translate="yes" xml:space="preserve">
          <source>You can use this to explicitly specify a syntax table for the new mode. If you specify a &lt;code&gt;nil&lt;/code&gt; value, the new mode uses the same syntax table as &lt;var&gt;parent&lt;/var&gt;, or the standard syntax table if &lt;var&gt;parent&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;. (Note that this does &lt;em&gt;not&lt;/em&gt; follow the convention used for non-keyword arguments that a &lt;code&gt;nil&lt;/code&gt; value is equivalent with not specifying the argument.)</source>
          <target state="translated">You can use this to explicitly specify a syntax table for the new mode. If you specify a &lt;code&gt;nil&lt;/code&gt; value, the new mode uses the same syntax table as &lt;var&gt;parent&lt;/var&gt; , or the standard syntax table if &lt;var&gt;parent&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt; . (Note that this does &lt;em&gt;not&lt;/em&gt; follow the convention used for non-keyword arguments that a &lt;code&gt;nil&lt;/code&gt; value is equivalent with not specifying the argument.)</target>
        </trans-unit>
        <trans-unit id="438d7938e3134fe96d063bb650ea2bd68b503d4f" translate="yes" xml:space="preserve">
          <source>You can use this to explicitly specify an abbrev table for the new mode. If you specify a &lt;code&gt;nil&lt;/code&gt; value, the new mode uses the same abbrev table as &lt;var&gt;parent&lt;/var&gt;, or &lt;code&gt;fundamental-mode-abbrev-table&lt;/code&gt; if &lt;var&gt;parent&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;. (Again, a &lt;code&gt;nil&lt;/code&gt; value is &lt;em&gt;not&lt;/em&gt; equivalent to not specifying this keyword.)</source>
          <target state="translated">You can use this to explicitly specify an abbrev table for the new mode. If you specify a &lt;code&gt;nil&lt;/code&gt; value, the new mode uses the same abbrev table as &lt;var&gt;parent&lt;/var&gt; , or &lt;code&gt;fundamental-mode-abbrev-table&lt;/code&gt; if &lt;var&gt;parent&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt; . (Again, a &lt;code&gt;nil&lt;/code&gt; value is &lt;em&gt;not&lt;/em&gt; equivalent to not specifying this keyword.)</target>
        </trans-unit>
        <trans-unit id="0f835a1e538f8a103ce81fc94f5fb317773cda73" translate="yes" xml:space="preserve">
          <source>You can view the outside window configuration with</source>
          <target state="translated">You can view the outside window configuration with</target>
        </trans-unit>
        <trans-unit id="4b640a1a5b11175dee4943544e3e5610ad3fac4d" translate="yes" xml:space="preserve">
          <source>You can write the contents of a buffer, or part of a buffer, directly to a file on disk using the &lt;code&gt;append-to-file&lt;/code&gt; and &lt;code&gt;write-region&lt;/code&gt; functions. Don&amp;rsquo;t use these functions to write to files that are being visited; that could cause confusion in the mechanisms for visiting.</source>
          <target state="translated">You can write the contents of a buffer, or part of a buffer, directly to a file on disk using the &lt;code&gt;append-to-file&lt;/code&gt; and &lt;code&gt;write-region&lt;/code&gt; functions. Don&amp;rsquo;t use these functions to write to files that are being visited; that could cause confusion in the mechanisms for visiting.</target>
        </trans-unit>
        <trans-unit id="0163d17d593f136604592bed49659f4ea2b76557" translate="yes" xml:space="preserve">
          <source>You can&amp;rsquo;t directly specify a buffer to put the error output in; that is too difficult to implement. But you can achieve this result by sending the error output to a temporary file and then inserting the file into a buffer when the subprocess finishes.</source>
          <target state="translated">You can&amp;rsquo;t directly specify a buffer to put the error output in; that is too difficult to implement. But you can achieve this result by sending the error output to a temporary file and then inserting the file into a buffer when the subprocess finishes.</target>
        </trans-unit>
        <trans-unit id="c2183b62f25e3a7da13dcd2d861c5a3ab2dc7d2d" translate="yes" xml:space="preserve">
          <source>You can&amp;rsquo;t use</source>
          <target state="translated">You can&amp;rsquo;t use</target>
        </trans-unit>
        <trans-unit id="3b0dd8c6e78e6f7f388fd751e8bdf44d25000c85" translate="yes" xml:space="preserve">
          <source>You cannot create a new primitive function with &lt;code&gt;defun&lt;/code&gt; or &lt;code&gt;defalias&lt;/code&gt;, but you can use them to change the function definition of any symbol, even one such as &lt;code&gt;car&lt;/code&gt; or &lt;code&gt;x-popup-menu&lt;/code&gt; whose normal definition is a primitive. However, this is risky: for instance, it is next to impossible to redefine &lt;code&gt;car&lt;/code&gt; without breaking Lisp completely. Redefining an obscure function such as &lt;code&gt;x-popup-menu&lt;/code&gt; is less dangerous, but it still may not work as you expect. If there are calls to the primitive from C code, they call the primitive&amp;rsquo;s C definition directly, so changing the symbol&amp;rsquo;s definition will have no effect on them.</source>
          <target state="translated">You cannot create a new primitive function with &lt;code&gt;defun&lt;/code&gt; or &lt;code&gt;defalias&lt;/code&gt; , but you can use them to change the function definition of any symbol, even one such as &lt;code&gt;car&lt;/code&gt; or &lt;code&gt;x-popup-menu&lt;/code&gt; whose normal definition is a primitive. However, this is risky: for instance, it is next to impossible to redefine &lt;code&gt;car&lt;/code&gt; without breaking Lisp completely. Redefining an obscure function such as &lt;code&gt;x-popup-menu&lt;/code&gt; is less dangerous, but it still may not work as you expect. If there are calls to the primitive from C code, they call the primitive&amp;rsquo;s C definition directly, so changing the symbol&amp;rsquo;s definition will have no effect on them.</target>
        </trans-unit>
        <trans-unit id="1a4d8cd12ebf7c377d08237c0b71f848ebb99f5d" translate="yes" xml:space="preserve">
          <source>You cannot set this variable directly; instead, use the function &lt;code&gt;set-buffer-multibyte&lt;/code&gt; to change a buffer&amp;rsquo;s representation.</source>
          <target state="translated">You cannot set this variable directly; instead, use the function &lt;code&gt;set-buffer-multibyte&lt;/code&gt; to change a buffer&amp;rsquo;s representation.</target>
        </trans-unit>
        <trans-unit id="ee4bfbb9070478dabf0b4f53d99a8ad81ab66910" translate="yes" xml:space="preserve">
          <source>You close the dribble file by calling this function with an argument of &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">You close the dribble file by calling this function with an argument of &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="67e889ec4248f5efe8521e0364d6b36c14b7b60a" translate="yes" xml:space="preserve">
          <source>You close the termscript file by calling this function with an argument of &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">You close the termscript file by calling this function with an argument of &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="73d60164ab607d3298c4570f40085ef934b5026f" translate="yes" xml:space="preserve">
          <source>You could almost write &lt;code&gt;or&lt;/code&gt; in terms of &lt;code&gt;if&lt;/code&gt;, but not quite:</source>
          <target state="translated">You could almost write &lt;code&gt;or&lt;/code&gt; in terms of &lt;code&gt;if&lt;/code&gt; , but not quite:</target>
        </trans-unit>
        <trans-unit id="04e9a71f1450ae98fd113e171d33bbb22f156543" translate="yes" xml:space="preserve">
          <source>You could define &lt;code&gt;put&lt;/code&gt; in terms of &lt;code&gt;setplist&lt;/code&gt; and &lt;code&gt;plist-put&lt;/code&gt;, as follows:</source>
          <target state="translated">You could define &lt;code&gt;put&lt;/code&gt; in terms of &lt;code&gt;setplist&lt;/code&gt; and &lt;code&gt;plist-put&lt;/code&gt; , as follows:</target>
        </trans-unit>
        <trans-unit id="3105762d47cc6ddb00531bebedb381e7b8472b65" translate="yes" xml:space="preserve">
          <source>You could use &lt;code&gt;set-match-data&lt;/code&gt; together with &lt;code&gt;match-data&lt;/code&gt; to imitate the effect of the special form &lt;code&gt;save-match-data&lt;/code&gt;. Here is how:</source>
          <target state="translated">You could use &lt;code&gt;set-match-data&lt;/code&gt; together with &lt;code&gt;match-data&lt;/code&gt; to imitate the effect of the special form &lt;code&gt;save-match-data&lt;/code&gt; . Here is how:</target>
        </trans-unit>
        <trans-unit id="83f0c3ff12a175b5bd61986907e7575fa94c2a7c" translate="yes" xml:space="preserve">
          <source>You create a server by calling &lt;code&gt;make-network-process&lt;/code&gt; (see &lt;a href=&quot;network-processes#Network-Processes&quot;&gt;Network Processes&lt;/a&gt;) with &lt;code&gt;:server t&lt;/code&gt;. The server will listen for connection requests from clients. When it accepts a client connection request, that creates a new network connection, itself a process object, with the following parameters:</source>
          <target state="translated">You create a server by calling &lt;code&gt;make-network-process&lt;/code&gt; (see &lt;a href=&quot;network-processes#Network-Processes&quot;&gt;Network Processes&lt;/a&gt;) with &lt;code&gt;:server t&lt;/code&gt; . The server will listen for connection requests from clients. When it accepts a client connection request, that creates a new network connection, itself a process object, with the following parameters:</target>
        </trans-unit>
        <trans-unit id="881c0ee895ce85f5865eab61cfa10d0f6a76397b" translate="yes" xml:space="preserve">
          <source>You don&amp;rsquo;t need to give a directory or extension in the file name &lt;var&gt;library&lt;/var&gt;. Normally, you just give a bare file name, like this:</source>
          <target state="translated">You don&amp;rsquo;t need to give a directory or extension in the file name &lt;var&gt;library&lt;/var&gt; . Normally, you just give a bare file name, like this:</target>
        </trans-unit>
        <trans-unit id="fbd7565e6ef2c69ebc424cd4d55eda96abba6825" translate="yes" xml:space="preserve">
          <source>You have to really understand the workings of Custom to use &lt;code&gt;:get&lt;/code&gt; correctly. It is meant for values that are treated in Custom as variables but are not actually stored in Lisp variables. It is almost surely a mistake to specify &lt;var&gt;getfunction&lt;/var&gt; for a value that really is stored in a Lisp variable.</source>
          <target state="translated">You have to really understand the workings of Custom to use &lt;code&gt;:get&lt;/code&gt; correctly. It is meant for values that are treated in Custom as variables but are not actually stored in Lisp variables. It is almost surely a mistake to specify &lt;var&gt;getfunction&lt;/var&gt; for a value that really is stored in a Lisp variable.</target>
        </trans-unit>
        <trans-unit id="250e9de8dfdad97a789ba335883b8381db6cff3b" translate="yes" xml:space="preserve">
          <source>You may not have any Chinese font matching the above font specification. Most X distributions include only Chinese fonts that have &amp;lsquo;</source>
          <target state="translated">You may not have any Chinese font matching the above font specification. Most X distributions include only Chinese fonts that have &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="5592784496a96bf64ba4c588372aaa108775800a" translate="yes" xml:space="preserve">
          <source>You may set the &lt;code&gt;term-file-prefix&lt;/code&gt; variable to &lt;code&gt;nil&lt;/code&gt; in your init file if you do not wish to load the terminal-initialization file.</source>
          <target state="translated">You may set the &lt;code&gt;term-file-prefix&lt;/code&gt; variable to &lt;code&gt;nil&lt;/code&gt; in your init file if you do not wish to load the terminal-initialization file.</target>
        </trans-unit>
        <trans-unit id="254ad5806cfc1ef4994dcfb1615e5f6bf32875fe" translate="yes" xml:space="preserve">
          <source>You may use</source>
          <target state="translated">You may use</target>
        </trans-unit>
        <trans-unit id="705dd37ab9efea425b6b2d825f010aff8486d766" translate="yes" xml:space="preserve">
          <source>You may want to restrict the value type for specific keys, for example, the value associated with the &lt;code&gt;&quot;bar&quot;&lt;/code&gt; key can only be an integer. You can specify this by using a list instead of an atom in the list. The first element will specify the key, like before, while the second element will specify the value type. For example:</source>
          <target state="translated">You may want to restrict the value type for specific keys, for example, the value associated with the &lt;code&gt;&quot;bar&quot;&lt;/code&gt; key can only be an integer. You can specify this by using a list instead of an atom in the list. The first element will specify the key, like before, while the second element will specify the value type. For example:</target>
        </trans-unit>
        <trans-unit id="9273477536a6ec4516bebb4420ddf1d040c31c38" translate="yes" xml:space="preserve">
          <source>You may wonder how the documentation string could be optional, since there are required components of the function that follow it (the body). Since evaluation of a string returns that string, without any side effects, it has no effect if it is not the last form in the body. Thus, in practice, there is no confusion between the first form of the body and the documentation string; if the only body form is a string then it serves both as the return value and as the documentation.</source>
          <target state="translated">You may wonder how the documentation string could be optional, since there are required components of the function that follow it (the body). Since evaluation of a string returns that string, without any side effects, it has no effect if it is not the last form in the body. Thus, in practice, there is no confusion between the first form of the body and the documentation string; if the only body form is a string then it serves both as the return value and as the documentation.</target>
        </trans-unit>
        <trans-unit id="900c89aa7858404ac352621578900c924533f33e" translate="yes" xml:space="preserve">
          <source>You might ask why we take the trouble to compute an expansion for a macro and then evaluate the expansion. Why not have the macro body produce the desired results directly? The reason has to do with compilation.</source>
          <target state="translated">You might ask why we take the trouble to compute an expansion for a macro and then evaluate the expansion. Why not have the macro body produce the desired results directly? The reason has to do with compilation.</target>
        </trans-unit>
        <trans-unit id="299a28df52a8b70a93fbe14f3581cd5c98f77237" translate="yes" xml:space="preserve">
          <source>You might think that we could just as well write &lt;code&gt;(kill-buffer
(current-buffer))&lt;/code&gt; and dispense with the variable &lt;code&gt;buffer&lt;/code&gt;. However, the way shown above is safer, if &lt;var&gt;body-form&lt;/var&gt; happens to get an error after switching to a different buffer! (Alternatively, you could write a &lt;code&gt;save-current-buffer&lt;/code&gt; around &lt;var&gt;body-form&lt;/var&gt;, to ensure that the temporary buffer becomes current again in time to kill it.)</source>
          <target state="translated">You might think that we could just as well write &lt;code&gt;(kill-buffer (current-buffer))&lt;/code&gt; and dispense with the variable &lt;code&gt;buffer&lt;/code&gt; . However, the way shown above is safer, if &lt;var&gt;body-form&lt;/var&gt; happens to get an error after switching to a different buffer! (Alternatively, you could write a &lt;code&gt;save-current-buffer&lt;/code&gt; around &lt;var&gt;body-form&lt;/var&gt; , to ensure that the temporary buffer becomes current again in time to kill it.)</target>
        </trans-unit>
        <trans-unit id="da3bf328c9848febb6d15ded7d6844d35421d122" translate="yes" xml:space="preserve">
          <source>You might wish to save the file modes value returned by &lt;code&gt;backup-buffer&lt;/code&gt; and use that (if non-&lt;code&gt;nil&lt;/code&gt;) to set the mode bits of the file that you write. This is what &lt;code&gt;save-buffer&lt;/code&gt; normally does. See &lt;a href=&quot;making-backups#Making-Backups&quot;&gt;Making Backup Files&lt;/a&gt;.</source>
          <target state="translated">You might wish to save the file modes value returned by &lt;code&gt;backup-buffer&lt;/code&gt; and use that (if non- &lt;code&gt;nil&lt;/code&gt; ) to set the mode bits of the file that you write. This is what &lt;code&gt;save-buffer&lt;/code&gt; normally does. See &lt;a href=&quot;making-backups#Making-Backups&quot;&gt;Making Backup Files&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="e9215673aefab481b45813f0fa92c883f61b0c29" translate="yes" xml:space="preserve">
          <source>You must check that the position &lt;code&gt;forward-sexp&lt;/code&gt; finds is a place that the program will really get to. In &lt;code&gt;cond&lt;/code&gt;, for example, this may not be true.</source>
          <target state="translated">You must check that the position &lt;code&gt;forward-sexp&lt;/code&gt; finds is a place that the program will really get to. In &lt;code&gt;cond&lt;/code&gt; , for example, this may not be true.</target>
        </trans-unit>
        <trans-unit id="51f5656401ab51893908bb7a3769d00c811f8e97" translate="yes" xml:space="preserve">
          <source>You must instrument your code in order to debug it with Edebug.</source>
          <target state="translated">You must instrument your code in order to debug it with Edebug.</target>
        </trans-unit>
        <trans-unit id="92d8a5f57a7342ca8d6994763be4e024fc25de83" translate="yes" xml:space="preserve">
          <source>You must not use C initializers for static or global variables unless the variables are never written once Emacs is dumped. These variables with initializers are allocated in an area of memory that becomes read-only (on certain operating systems) as a result of dumping Emacs. See &lt;a href=&quot;pure-storage#Pure-Storage&quot;&gt;Pure Storage&lt;/a&gt;.</source>
          <target state="translated">You must not use C initializers for static or global variables unless the variables are never written once Emacs is dumped. These variables with initializers are allocated in an area of memory that becomes read-only (on certain operating systems) as a result of dumping Emacs. See &lt;a href=&quot;pure-storage#Pure-Storage&quot;&gt;Pure Storage&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="44f7d5820fc6877d2ebf1e1337d191b902950554" translate="yes" xml:space="preserve">
          <source>You should always call this function and not hope for &lt;code&gt;progress-reporter-update&lt;/code&gt; to print &amp;lsquo;</source>
          <target state="translated">You should always call this function and not hope for &lt;code&gt;progress-reporter-update&lt;/code&gt; to print &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="1be9d26f5e8a75fb2fba0237a3ccf7878eff6e8f" translate="yes" xml:space="preserve">
          <source>You should check nonlocal exit conditions where it matters: before you allocated some resource or after you allocated a resource that might need freeing, or where a failure means further processing is impossible or infeasible.</source>
          <target state="translated">You should check nonlocal exit conditions where it matters: before you allocated some resource or after you allocated a resource that might need freeing, or where a failure means further processing is impossible or infeasible.</target>
        </trans-unit>
        <trans-unit id="17e06068fbddd22d9fbea7d3518b0194a6db9f0c" translate="yes" xml:space="preserve">
          <source>You should make sure that the &lt;code&gt;revert-buffer-function&lt;/code&gt; does not print messages that unnecessarily duplicate Auto Revert&amp;rsquo;s own messages, displayed if &lt;code&gt;auto-revert-verbose&lt;/code&gt; is &lt;code&gt;t&lt;/code&gt;, and effectively override a &lt;code&gt;nil&lt;/code&gt; value for &lt;code&gt;auto-revert-verbose&lt;/code&gt;. Hence, adapting a mode for auto-reverting often involves getting rid of such messages. This is especially important for buffers that automatically revert every &lt;code&gt;auto-revert-interval&lt;/code&gt; seconds.</source>
          <target state="translated">You should make sure that the &lt;code&gt;revert-buffer-function&lt;/code&gt; does not print messages that unnecessarily duplicate Auto Revert&amp;rsquo;s own messages, displayed if &lt;code&gt;auto-revert-verbose&lt;/code&gt; is &lt;code&gt;t&lt;/code&gt; , and effectively override a &lt;code&gt;nil&lt;/code&gt; value for &lt;code&gt;auto-revert-verbose&lt;/code&gt; . Hence, adapting a mode for auto-reverting often involves getting rid of such messages. This is especially important for buffers that automatically revert every &lt;code&gt;auto-revert-interval&lt;/code&gt; seconds.</target>
        </trans-unit>
        <trans-unit id="f43c32e904e2d01bffda8f48a464506ecb5abfdb" translate="yes" xml:space="preserve">
          <source>You should not change this flag in a running Emacs.</source>
          <target state="translated">You should not change this flag in a running Emacs.</target>
        </trans-unit>
        <trans-unit id="78382bec96f1383b3b9f7cf1d0ee49e56451d4a0" translate="yes" xml:space="preserve">
          <source>You should not try to come up with the elements for a byte-code function yourself, because if they are inconsistent, Emacs may crash when you call the function. Always leave it to the byte compiler to create these objects; it makes the elements consistent (we hope).</source>
          <target state="translated">You should not try to come up with the elements for a byte-code function yourself, because if they are inconsistent, Emacs may crash when you call the function. Always leave it to the byte compiler to create these objects; it makes the elements consistent (we hope).</target>
        </trans-unit>
        <trans-unit id="a8b99313ac8b106147a2ee5daf11626c31e11b74" translate="yes" xml:space="preserve">
          <source>You should only ever change this variable with a let-binding; never with &lt;code&gt;setq&lt;/code&gt;.</source>
          <target state="translated">You should only ever change this variable with a let-binding; never with &lt;code&gt;setq&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dc343ca2fc3ffa018a3e0252552bf4fd83a22960" translate="yes" xml:space="preserve">
          <source>You should use one and only one of the above properties. You can also specify the height of the space, with these properties:</source>
          <target state="translated">You should use one and only one of the above properties. You can also specify the height of the space, with these properties:</target>
        </trans-unit>
        <trans-unit id="d51f5b9f224606f1a98062af9d6e5bde45206890" translate="yes" xml:space="preserve">
          <source>You specify a field with a buffer position, &lt;var&gt;pos&lt;/var&gt;. We think of each field as containing a range of buffer positions, so the position you specify stands for the field containing that position.</source>
          <target state="translated">You specify a field with a buffer position, &lt;var&gt;pos&lt;/var&gt; . We think of each field as containing a range of buffer positions, so the position you specify stands for the field containing that position.</target>
        </trans-unit>
        <trans-unit id="1442db37243e3e8261203bdbbe8c4604c6e2a5f6" translate="yes" xml:space="preserve">
          <source>You specify a minibuffer history list with the optional &lt;var&gt;history&lt;/var&gt; argument to &lt;code&gt;read-from-minibuffer&lt;/code&gt; or &lt;code&gt;completing-read&lt;/code&gt;. Here are the possible values for it:</source>
          <target state="translated">You specify a minibuffer history list with the optional &lt;var&gt;history&lt;/var&gt; argument to &lt;code&gt;read-from-minibuffer&lt;/code&gt; or &lt;code&gt;completing-read&lt;/code&gt; . Here are the possible values for it:</target>
        </trans-unit>
        <trans-unit id="0fcc1942078d1f3399b7b8f94f330e183e349c24" translate="yes" xml:space="preserve">
          <source>You specify a value for a symbol with &lt;code&gt;setq&lt;/code&gt;. For example,</source>
          <target state="translated">You specify a value for a symbol with &lt;code&gt;setq&lt;/code&gt; . For example,</target>
        </trans-unit>
        <trans-unit id="ce5aac5f8358ca3925cb91173688137456aa4da1" translate="yes" xml:space="preserve">
          <source>You specify the customization type in &lt;code&gt;defcustom&lt;/code&gt; with the &lt;code&gt;:type&lt;/code&gt; keyword. The argument of &lt;code&gt;:type&lt;/code&gt; is evaluated, but only once when the &lt;code&gt;defcustom&lt;/code&gt; is executed, so it isn&amp;rsquo;t useful for the value to vary. Normally we use a quoted constant. For example:</source>
          <target state="translated">You specify the customization type in &lt;code&gt;defcustom&lt;/code&gt; with the &lt;code&gt;:type&lt;/code&gt; keyword. The argument of &lt;code&gt;:type&lt;/code&gt; is evaluated, but only once when the &lt;code&gt;defcustom&lt;/code&gt; is executed, so it isn&amp;rsquo;t useful for the value to vary. Normally we use a quoted constant. For example:</target>
        </trans-unit>
        <trans-unit id="0ab2fc33508c339c78d220056f9d56bbb674dd89" translate="yes" xml:space="preserve">
          <source>You use &amp;lsquo;</source>
          <target state="translated">You use &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="2fe2a0ef56cf84320662c46b2e058fa32addd4ed" translate="yes" xml:space="preserve">
          <source>Your code should use &lt;code&gt;unwind-protect&lt;/code&gt; to make sure the group is always finished. The call to &lt;code&gt;activate-change-group&lt;/code&gt; should be inside the &lt;code&gt;unwind-protect&lt;/code&gt;, in case the user types</source>
          <target state="translated">Your code should use &lt;code&gt;unwind-protect&lt;/code&gt; to make sure the group is always finished. The call to &lt;code&gt;activate-change-group&lt;/code&gt; should be inside the &lt;code&gt;unwind-protect&lt;/code&gt; , in case the user types</target>
        </trans-unit>
        <trans-unit id="f5c071241f297fef004a78d6b450966295cda23d" translate="yes" xml:space="preserve">
          <source>Your init file can prevent the loading of the terminal-specific library by setting the variable &lt;code&gt;term-file-prefix&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">Your init file can prevent the loading of the terminal-specific library by setting the variable &lt;code&gt;term-file-prefix&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="909f99a779adb66a76fc53ab56c7dd1caf35d0fd" translate="yes" xml:space="preserve">
          <source>Z</source>
          <target state="translated">Z</target>
        </trans-unit>
        <trans-unit id="d157bdbb8b0218e146ce9e4a5902cc725e6b45d2" translate="yes" xml:space="preserve">
          <source>Zero-terminated string, in a fixed-size field with length &lt;var&gt;len&lt;/var&gt;.</source>
          <target state="translated">Zero-terminated string, in a fixed-size field with length &lt;var&gt;len&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="0fb2a07b830cc5f9c7a47e39dbda6ab2e792b799" translate="yes" xml:space="preserve">
          <source>Zero-width assertions</source>
          <target state="translated">Zero-width assertions</target>
        </trans-unit>
        <trans-unit id="7d68a3f9fab2f5c22860445ad1e27f2244cf4517" translate="yes" xml:space="preserve">
          <source>[ &amp;hellip; ]</source>
          <target state="translated">[ &amp;hellip; ]</target>
        </trans-unit>
        <trans-unit id="27fdedbae650ebb23065095be6258bdecf0822e5" translate="yes" xml:space="preserve">
          <source>[&amp;hellip;]</source>
          <target state="translated">[&amp;hellip;]</target>
        </trans-unit>
        <trans-unit id="a0e0509a9d4fcac34650f92bdac71de61fb5d62b" translate="yes" xml:space="preserve">
          <source>[-+[:digit:]]</source>
          <target state="translated">[-+[:digit:]]</target>
        </trans-unit>
        <trans-unit id="f9acad03b97b7138344a3a4f90107e0319dd3913" translate="yes" xml:space="preserve">
          <source>[-a-z]</source>
          <target state="translated">[-a-z]</target>
        </trans-unit>
        <trans-unit id="65bdd6f65d6cb983742ae4c75df46041f8d87aef" translate="yes" xml:space="preserve">
          <source>[:alnum:]</source>
          <target state="translated">[:alnum:]</target>
        </trans-unit>
        <trans-unit id="96b292d79c7cbc2b2607da3f0978cc08951d3c7f" translate="yes" xml:space="preserve">
          <source>[:alnum:]+</source>
          <target state="translated">[:alnum:]+</target>
        </trans-unit>
        <trans-unit id="01b38721bab3c2b63e0904afe7f2e7ac64012d88" translate="yes" xml:space="preserve">
          <source>[:alpha:]</source>
          <target state="translated">[:alpha:]</target>
        </trans-unit>
        <trans-unit id="dd2fed522aff13d6271f4435361dffe0817f7569" translate="yes" xml:space="preserve">
          <source>[:ascii:]</source>
          <target state="translated">[:ascii:]</target>
        </trans-unit>
        <trans-unit id="c90f96e2fb7b759a2ca2a6deb69ad17b81412395" translate="yes" xml:space="preserve">
          <source>[:blank:]</source>
          <target state="translated">[:blank:]</target>
        </trans-unit>
        <trans-unit id="3fb98d15f444128feff27791d9b47604d8140988" translate="yes" xml:space="preserve">
          <source>[:cntrl:]</source>
          <target state="translated">[:cntrl:]</target>
        </trans-unit>
        <trans-unit id="3bba7cec63b636d38b757769603cad1079a0a01e" translate="yes" xml:space="preserve">
          <source>[:digit:]</source>
          <target state="translated">[:digit:]</target>
        </trans-unit>
        <trans-unit id="8f002d85c535f9c16175fe06294c8e55a04e86ce" translate="yes" xml:space="preserve">
          <source>[:graph:]</source>
          <target state="translated">[:graph:]</target>
        </trans-unit>
        <trans-unit id="36f002a8f57e089972d13fb35cdf7cb50753b4ec" translate="yes" xml:space="preserve">
          <source>[:lower:]</source>
          <target state="translated">[:lower:]</target>
        </trans-unit>
        <trans-unit id="96c6f19a2ec26b4ca8706f9fada3e397ef3d4402" translate="yes" xml:space="preserve">
          <source>[:multibyte:]</source>
          <target state="translated">[:multibyte:]</target>
        </trans-unit>
        <trans-unit id="bbcc7daa34bbfbf571c753dc197548aa4fe79489" translate="yes" xml:space="preserve">
          <source>[:nonascii:]</source>
          <target state="translated">[:nonascii:]</target>
        </trans-unit>
        <trans-unit id="6a4700c3f8d796a490753099cd8ba369d781e21a" translate="yes" xml:space="preserve">
          <source>[:print:]</source>
          <target state="translated">[:print:]</target>
        </trans-unit>
        <trans-unit id="0884729c97bed44aad0ffcf5ff3563854be867a9" translate="yes" xml:space="preserve">
          <source>[:punct:]</source>
          <target state="translated">[:punct:]</target>
        </trans-unit>
        <trans-unit id="ea405a150d88f722b178e52913b011c304385ce5" translate="yes" xml:space="preserve">
          <source>[:space:]</source>
          <target state="translated">[:space:]</target>
        </trans-unit>
        <trans-unit id="1a1d468b38ccda9349b2e209faedc430d49ae372" translate="yes" xml:space="preserve">
          <source>[:unibyte:]</source>
          <target state="translated">[:unibyte:]</target>
        </trans-unit>
        <trans-unit id="985a5973c64047e3a3c7d8de526c2a1a40ecaae2" translate="yes" xml:space="preserve">
          <source>[:upper:]</source>
          <target state="translated">[:upper:]</target>
        </trans-unit>
        <trans-unit id="73f18cd8a2f2dc4a446cd066725f9a97e9a9476f" translate="yes" xml:space="preserve">
          <source>[:word:]</source>
          <target state="translated">[:word:]</target>
        </trans-unit>
        <trans-unit id="7a71d6f1eeddfe5f75a1d723045a4e015efbb61e" translate="yes" xml:space="preserve">
          <source>[:xdigit:]</source>
          <target state="translated">[:xdigit:]</target>
        </trans-unit>
        <trans-unit id="276f013cda94340c0e0e7fd7e1520b322804a377" translate="yes" xml:space="preserve">
          <source>[&lt;var&gt;from&lt;/var&gt;..&lt;var&gt;to&lt;/var&gt;]</source>
          <target state="translated">[&lt;var&gt;from&lt;/var&gt;..&lt;var&gt;to&lt;/var&gt;]</target>
        </trans-unit>
        <trans-unit id="118a41a1ccd27e39efabbc6dfbb671aa7e57bc6c" translate="yes" xml:space="preserve">
          <source>[&lt;var&gt;optional-arg&lt;/var&gt;]</source>
          <target state="translated">[&lt;var&gt;optional-arg&lt;/var&gt;]</target>
        </trans-unit>
        <trans-unit id="22d257011f032b9adb9e6f17ebb5ddfaafd1b032" translate="yes" xml:space="preserve">
          <source>[?\C-\H-x home]</source>
          <target state="translated">[?\C-\H-x home]</target>
        </trans-unit>
        <trans-unit id="4ba5a7b502eb763999de7549b9f71593d61859f7" translate="yes" xml:space="preserve">
          <source>[DEL]</source>
          <target state="translated">[DEL]</target>
        </trans-unit>
        <trans-unit id="d6a5e74455a327d0554791fee74b81ee64ed4c9e" translate="yes" xml:space="preserve">
          <source>[INS]</source>
          <target state="translated">[INS]</target>
        </trans-unit>
        <trans-unit id="37c4f2211eadce5bb7a765f1c50ba8ac90f72ae9" translate="yes" xml:space="preserve">
          <source>[Manual]</source>
          <target state="translated">[Manual]</target>
        </trans-unit>
        <trans-unit id="4dfb66a8c5b5102b00087c67023cc90ced001cec" translate="yes" xml:space="preserve">
          <source>[XYa-yYb-zX]</source>
          <target state="translated">[XYa-yYb-zX]</target>
        </trans-unit>
        <trans-unit id="147c9f0b3e491e6f3d6824f52cc541aeb2c89fb2" translate="yes" xml:space="preserve">
          <source>[XYa-z]</source>
          <target state="translated">[XYa-z]</target>
        </trans-unit>
        <trans-unit id="0d82241232a05e4ca13588ff385c2986ac3c9f1e" translate="yes" xml:space="preserve">
          <source>[[:&lt;var&gt;class&lt;/var&gt;:]]</source>
          <target state="translated">[[:&lt;var&gt;class&lt;/var&gt;:]]</target>
        </trans-unit>
        <trans-unit id="1246d2d1adbda600e44223536b15e99673e276fc" translate="yes" xml:space="preserve">
          <source>[[:alnum:]]+</source>
          <target state="translated">[[:alnum:]]+</target>
        </trans-unit>
        <trans-unit id="ea6c94973ae08ec52be2ff2effd909ce46f075f4" translate="yes" xml:space="preserve">
          <source>[[:ascii:]]</source>
          <target state="translated">[[:ascii:]]</target>
        </trans-unit>
        <trans-unit id="5f81c1b9d5411cfec040ad629fce7acf19641d5c" translate="yes" xml:space="preserve">
          <source>[\u0E01-\u0E3A\u0E3F-\u0E5B]</source>
          <target state="translated">[\u0E01-\u0E3A\u0E3F-\u0E5B]</target>
        </trans-unit>
        <trans-unit id="5087b737b3ecc52a600a2c96b006b06dcc14c434" translate="yes" xml:space="preserve">
          <source>[^ &amp;hellip; ]</source>
          <target state="translated">[^ &amp;hellip; ]</target>
        </trans-unit>
        <trans-unit id="5c693ec58dd2579a67f2549705b9a4c86bebc3ba" translate="yes" xml:space="preserve">
          <source>[^&amp;hellip;]</source>
          <target state="translated">[^&amp;hellip;]</target>
        </trans-unit>
        <trans-unit id="bb39ed2c198086ef983f84ea96ab03e825f3c623" translate="yes" xml:space="preserve">
          <source>[^[:ascii:]]</source>
          <target state="translated">[^[:ascii:]]</target>
        </trans-unit>
        <trans-unit id="c893b729639d6808bb7e9db74aa766368e4b0957" translate="yes" xml:space="preserve">
          <source>[^\]</source>
          <target state="translated">[^\]</target>
        </trans-unit>
        <trans-unit id="84027ade59d5fe1a9df7ef91114a28b11f6c4f67" translate="yes" xml:space="preserve">
          <source>[^a-z0-9A-Z]</source>
          <target state="translated">[^a-z0-9A-Z]</target>
        </trans-unit>
        <trans-unit id="556d1a0029f7da6fb7e26d9637f6628ff739a3cb" translate="yes" xml:space="preserve">
          <source>[^z-a]</source>
          <target state="translated">[^z-a]</target>
        </trans-unit>
        <trans-unit id="aee9651b5adc1f147736baf3e64beafe6c69a1b5" translate="yes" xml:space="preserve">
          <source>[`-~]</source>
          <target state="translated">[`-~]</target>
        </trans-unit>
        <trans-unit id="423e4b62335292deff7eb9fde1daee6516a5eeba" translate="yes" xml:space="preserve">
          <source>[`a-z{|}~]</source>
          <target state="translated">[`a-z{|}~]</target>
        </trans-unit>
        <trans-unit id="8e7965f4c396908525d410ae91893d1d2bb4e106" translate="yes" xml:space="preserve">
          <source>[a-a0]</source>
          <target state="translated">[a-a0]</target>
        </trans-unit>
        <trans-unit id="86be9db54d3af08374085e6223393004f710c4ad" translate="yes" xml:space="preserve">
          <source>[a-m-z]</source>
          <target state="translated">[a-m-z]</target>
        </trans-unit>
        <trans-unit id="81994cedf58ee82ea36ed3376be34bd77d2206b5" translate="yes" xml:space="preserve">
          <source>[a-z$%.]</source>
          <target state="translated">[a-z$%.]</target>
        </trans-unit>
        <trans-unit id="6395b1b5c03ad4c32bdee5a6be8d32171f15e65d" translate="yes" xml:space="preserve">
          <source>[a-z-]</source>
          <target state="translated">[a-z-]</target>
        </trans-unit>
        <trans-unit id="a0da97a2a929ec523c3e9f2e0aba6a1efba3fc61" translate="yes" xml:space="preserve">
          <source>[a-z]</source>
          <target state="translated">[a-z]</target>
        </trans-unit>
        <trans-unit id="3d4dcea6f7e1f116401a70c922c08fd2beb6625e" translate="yes" xml:space="preserve">
          <source>[a0]</source>
          <target state="translated">[a0]</target>
        </trans-unit>
        <trans-unit id="03b3a4613e299be8c6c0ed73d200dafbbd59eb49" translate="yes" xml:space="preserve">
          <source>[aB]</source>
          <target state="translated">[aB]</target>
        </trans-unit>
        <trans-unit id="6c0abf7e4785da39a67c0257df7d5d70bfbd5cea" translate="yes" xml:space="preserve">
          <source>[ad]</source>
          <target state="translated">[ad]</target>
        </trans-unit>
        <trans-unit id="b4d6893034b5e3a809e67c31a9ea83d389b2736f" translate="yes" xml:space="preserve">
          <source>[ad]*</source>
          <target state="translated">[ad]*</target>
        </trans-unit>
        <trans-unit id="377b624f58d16125a51983fe233ab74af1bd42d9" translate="yes" xml:space="preserve">
          <source>[ad]*?</source>
          <target state="translated">[ad]*?</target>
        </trans-unit>
        <trans-unit id="0d5ba9abdafef20cfcfcabbf14e3a10c626378cd" translate="yes" xml:space="preserve">
          <source>[i-j]</source>
          <target state="translated">[i-j]</target>
        </trans-unit>
        <trans-unit id="1bae2e6a68baf12829665e7101cd6e2cb5157591" translate="yes" xml:space="preserve">
          <source>[i-k]</source>
          <target state="translated">[i-k]</target>
        </trans-unit>
        <trans-unit id="12677cdbbaa5a36ff13c71a558520dd54203099e" translate="yes" xml:space="preserve">
          <source>[ij]</source>
          <target state="translated">[ij]</target>
        </trans-unit>
        <trans-unit id="1db3098df5b746be8788ae0ded47d45dcd9aa92b" translate="yes" xml:space="preserve">
          <source>[ijk]</source>
          <target state="translated">[ijk]</target>
        </trans-unit>
        <trans-unit id="c2f30e21cd9f84f7870359574e5b7fe2bc9ac42c" translate="yes" xml:space="preserve">
          <source>[z-a]</source>
          <target state="translated">[z-a]</target>
        </trans-unit>
        <trans-unit id="4ba04ba30eb77f13222fff5c4528f233d4be9a80" translate="yes" xml:space="preserve">
          <source>[ก-ฺ฿-๛]</source>
          <target state="translated">[ก-ฺ฿-๛]</target>
        </trans-unit>
        <trans-unit id="08534f33c201a45017b502e90a800f1b708ebcb3" translate="yes" xml:space="preserve">
          <source>\</source>
          <target state="translated">\</target>
        </trans-unit>
        <trans-unit id="ab006bb8aacdf6e68299bc1dffccc9bcc8ac3eaf" translate="yes" xml:space="preserve">
          <source>\&quot;</source>
          <target state="translated">\&quot;</target>
        </trans-unit>
        <trans-unit id="d713754a2f5429b28533071b75723dacd3ad9dc8" translate="yes" xml:space="preserve">
          <source>\$</source>
          <target state="translated">\$</target>
        </trans-unit>
        <trans-unit id="6ffcd413016c911d25260ecb424f0d1bcb26f571" translate="yes" xml:space="preserve">
          <source>\&amp;amp;</source>
          <target state="translated">\&amp;amp;</target>
        </trans-unit>
        <trans-unit id="0674c0fe5b9c2842c6e9699001c4cc702fe90c89" translate="yes" xml:space="preserve">
          <source>\&amp;gt;</source>
          <target state="translated">\&amp;gt;</target>
        </trans-unit>
        <trans-unit id="521c22f69c16eddb8cd5294cd7d4ab14f2fd96d8" translate="yes" xml:space="preserve">
          <source>\&amp;lt;</source>
          <target state="translated">\&amp;lt;</target>
        </trans-unit>
        <trans-unit id="7c3b6b03e00373e6bf97d9a5cecaaebaadc04370" translate="yes" xml:space="preserve">
          <source>\&amp;lt;&lt;var&gt;keymap&lt;/var&gt;&amp;gt;</source>
          <target state="translated">\&amp;lt;&lt;var&gt;keymap&lt;/var&gt;&amp;gt;</target>
        </trans-unit>
        <trans-unit id="c78811037b1378ea2be22f5a0d100493c4ce3c8d" translate="yes" xml:space="preserve">
          <source>\&amp;lt;\(</source>
          <target state="translated">\&amp;lt;\(</target>
        </trans-unit>
        <trans-unit id="e32ea9ae1a5d0898134354e5fc56199a3c705918" translate="yes" xml:space="preserve">
          <source>\&amp;lt;f\w*\&amp;gt;</source>
          <target state="translated">\&amp;lt;f\w*\&amp;gt;</target>
        </trans-unit>
        <trans-unit id="9ca863000c0131ce2b74e96a2de49fddf5ae1e10" translate="yes" xml:space="preserve">
          <source>\'</source>
          <target state="translated">\'</target>
        </trans-unit>
        <trans-unit id="6226971b34a982c0868cae196a821b0ff0498a84" translate="yes" xml:space="preserve">
          <source>\(</source>
          <target state="translated">\(</target>
        </trans-unit>
        <trans-unit id="d9210fed6ff19ae164fa4a08771cb415c655b35d" translate="yes" xml:space="preserve">
          <source>\( &amp;hellip; \)</source>
          <target state="translated">\( &amp;hellip; \)</target>
        </trans-unit>
        <trans-unit id="79056355fcd548f300e79e1dc6571bca1d1808b2" translate="yes" xml:space="preserve">
          <source>\(&amp;hellip;\)</source>
          <target state="translated">\(&amp;hellip;\)</target>
        </trans-unit>
        <trans-unit id="c6b1a92fe08d8b4a58b1c0005a2f3c2d6f79d343" translate="yes" xml:space="preserve">
          <source>\(.*\)</source>
          <target state="translated">\(.*\)</target>
        </trans-unit>
        <trans-unit id="ffe2da11e27eca60e291fd03693138eee3f577dc" translate="yes" xml:space="preserve">
          <source>\(.*\)\1</source>
          <target state="translated">\(.*\)\1</target>
        </trans-unit>
        <trans-unit id="e80c8147c6dd88550778c7fd3ed3d61d56edcabd" translate="yes" xml:space="preserve">
          <source>\(...\)</source>
          <target state="translated">\(...\)</target>
        </trans-unit>
        <trans-unit id="446ac16fcd7feac2f7ae565aad94731686f2168b" translate="yes" xml:space="preserve">
          <source>\(?:</source>
          <target state="translated">\(?:</target>
        </trans-unit>
        <trans-unit id="5262066312127aab6f3df9b7e436a1319a5b8c36" translate="yes" xml:space="preserve">
          <source>\(?: &amp;hellip; \)</source>
          <target state="translated">\(?: &amp;hellip; \)</target>
        </trans-unit>
        <trans-unit id="0a680dc91701e8907e72a15fa28614021c030869" translate="yes" xml:space="preserve">
          <source>\(?:&amp;hellip;\)</source>
          <target state="translated">\(?:&amp;hellip;\)</target>
        </trans-unit>
        <trans-unit id="1a3c6b531df3ece28eb6a8a69ec13f8410b258d9" translate="yes" xml:space="preserve">
          <source>\(?&lt;var&gt;n&lt;/var&gt;:&amp;hellip;\)</source>
          <target state="translated">\(?&lt;var&gt;n&lt;/var&gt;:&amp;hellip;\)</target>
        </trans-unit>
        <trans-unit id="10590a9ad03ce6b1c6cf4c8a2aa703a93b332633" translate="yes" xml:space="preserve">
          <source>\(?&lt;var&gt;num&lt;/var&gt;: &amp;hellip; \)</source>
          <target state="translated">\(? &lt;var&gt;num&lt;/var&gt; : &amp;hellip; \)</target>
        </trans-unit>
        <trans-unit id="a902a90280b3d9d5fd59031e1d184024726fcf46" translate="yes" xml:space="preserve">
          <source>\(ba*r\)</source>
          <target state="translated">\(ba*r\)</target>
        </trans-unit>
        <trans-unit id="842b9e5fd229cdf5e6442595391f464e516f67cb" translate="yes" xml:space="preserve">
          <source>\(foo\(b*\)\|lose\)\2</source>
          <target state="translated">\(foo\(b*\)\|lose\)\2</target>
        </trans-unit>
        <trans-unit id="9059729433a98c764264378eb964b8f5d0c1028f" translate="yes" xml:space="preserve">
          <source>\(foo\|bar\)x</source>
          <target state="translated">\(foo\|bar\)x</target>
        </trans-unit>
        <trans-unit id="9ab03a42b5dbb498787e70c214c406175bfd5515" translate="yes" xml:space="preserve">
          <source>\(x*\)*</source>
          <target state="translated">\(x*\)*</target>
        </trans-unit>
        <trans-unit id="95a27da1f5a9ce4abfb3347aba532a9d71e57191" translate="yes" xml:space="preserve">
          <source>\(x+y*\)*a</source>
          <target state="translated">\(x+y*\)*a</target>
        </trans-unit>
        <trans-unit id="7b8c2fdd51dbaf559a3ead8bd197b367510384a9" translate="yes" xml:space="preserve">
          <source>\)</source>
          <target state="translated">\)</target>
        </trans-unit>
        <trans-unit id="103ec6eb736a187bdf0920d8aba6d9851277c3b4" translate="yes" xml:space="preserve">
          <source>\)\&amp;gt;</source>
          <target state="translated">\)\&amp;gt;</target>
        </trans-unit>
        <trans-unit id="63ba9a14d805e6a6b8903a280a3f80e9cdc2bdb7" translate="yes" xml:space="preserve">
          <source>\)\_&amp;gt;</source>
          <target state="translated">\)\_&amp;gt;</target>
        </trans-unit>
        <trans-unit id="d4317fdc26437cb39ef7b1e25d9168a28794ee79" translate="yes" xml:space="preserve">
          <source>\001</source>
          <target state="translated">\001</target>
        </trans-unit>
        <trans-unit id="2de673b7fa2e0a0e52326460a59d3f726ea66d02" translate="yes" xml:space="preserve">
          <source>\1</source>
          <target state="translated">\1</target>
        </trans-unit>
        <trans-unit id="c016fb3c2d71f02e58827dbbb11225ca77cbae92" translate="yes" xml:space="preserve">
          <source>\2</source>
          <target state="translated">\2</target>
        </trans-unit>
        <trans-unit id="d0b8c7b863cf4449b021f6d37c0bdf6778137f63" translate="yes" xml:space="preserve">
          <source>\230</source>
          <target state="translated">\230</target>
        </trans-unit>
        <trans-unit id="3f3ddd7e378d6a97ad0b3c7d3e80aaef1aaffbf3" translate="yes" xml:space="preserve">
          <source>\9</source>
          <target state="translated">\9</target>
        </trans-unit>
        <trans-unit id="ea3d4522c960f37d7f56e95598a0b60979cbe2e6" translate="yes" xml:space="preserve">
          <source>\&lt;var&gt;digit&lt;/var&gt;</source>
          <target state="translated">\&lt;var&gt;digit&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="bf36052348e38be1be39a0beea666f9c31ec6629" translate="yes" xml:space="preserve">
          <source>\&lt;var&gt;n&lt;/var&gt;</source>
          <target state="translated">\&lt;var&gt;n&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="b9c84742bd468babcef33d3cb8848ed2b57f191f" translate="yes" xml:space="preserve">
          <source>\=</source>
          <target state="translated">\=</target>
        </trans-unit>
        <trans-unit id="7b907b8b8555612bfad20ba9a4c2838126bd65ad" translate="yes" xml:space="preserve">
          <source>\=\=</source>
          <target state="translated">\=\=</target>
        </trans-unit>
        <trans-unit id="e93c80053bfce51a5762432d480911933e2a2666" translate="yes" xml:space="preserve">
          <source>\=\[</source>
          <target state="translated">\=\[</target>
        </trans-unit>
        <trans-unit id="ebfab5b6318a693844f86f6529442e6d0842201e" translate="yes" xml:space="preserve">
          <source>\=`</source>
          <target state="translated">\=`</target>
        </trans-unit>
        <trans-unit id="1967f9b2e21f10c7ebc603769e0ebe941ec0d64e" translate="yes" xml:space="preserve">
          <source>\?</source>
          <target state="translated">\?</target>
        </trans-unit>
        <trans-unit id="2a58381e2c1c2f2ffb702f9e67ee72b93cde32b2" translate="yes" xml:space="preserve">
          <source>\A-</source>
          <target state="translated">\A-</target>
        </trans-unit>
        <trans-unit id="95bc0dc370dc108367da33cf82301a753f2e319e" translate="yes" xml:space="preserve">
          <source>\B</source>
          <target state="translated">\B</target>
        </trans-unit>
        <trans-unit id="6d5eaec347cfa4cc0c65baecc55531a51cca6dfa" translate="yes" xml:space="preserve">
          <source>\C-</source>
          <target state="translated">\C-</target>
        </trans-unit>
        <trans-unit id="e4166a8c92fc100fe8138332db6e651ea0aa52b6" translate="yes" xml:space="preserve">
          <source>\C&lt;var&gt;c&lt;/var&gt;</source>
          <target state="translated">\C&lt;var&gt;c&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="fa2dbae47baccb8578bb52e0a81011e3abe248b2" translate="yes" xml:space="preserve">
          <source>\C&lt;var&gt;code&lt;/var&gt;</source>
          <target state="translated">\C&lt;var&gt;code&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="cf0aa3440c86c766307437b6095e590dde229ab2" translate="yes" xml:space="preserve">
          <source>\H-</source>
          <target state="translated">\H-</target>
        </trans-unit>
        <trans-unit id="3587e40143c0dbbd2d7b314e1af2d358046d8b40" translate="yes" xml:space="preserve">
          <source>\M-</source>
          <target state="translated">\M-</target>
        </trans-unit>
        <trans-unit id="5abfb32523185e5f54d61feaa08e7cb2ef092606" translate="yes" xml:space="preserve">
          <source>\S-</source>
          <target state="translated">\S-</target>
        </trans-unit>
        <trans-unit id="795c363da7a4cc972165fe480488d4ca9976d8be" translate="yes" xml:space="preserve">
          <source>\S&lt;var&gt;code&lt;/var&gt;</source>
          <target state="translated">\S&lt;var&gt;code&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="ba7c636e514f58789072538028569823681faf9d" translate="yes" xml:space="preserve">
          <source>\U00NNNNNN</source>
          <target state="translated">\U00NNNNNN</target>
        </trans-unit>
        <trans-unit id="dd763376ee8ab23121ea96f020a65565c5e68687" translate="yes" xml:space="preserve">
          <source>\W</source>
          <target state="translated">\W</target>
        </trans-unit>
        <trans-unit id="b4ab9888ef92ead7b21a3c7e8dd91a2e77d98230" translate="yes" xml:space="preserve">
          <source>\[</source>
          <target state="translated">\[</target>
        </trans-unit>
        <trans-unit id="c5cef0c84f05947e1da2b7fc2049dd672f532c97" translate="yes" xml:space="preserve">
          <source>\[&lt;var&gt;command&lt;/var&gt;]</source>
          <target state="translated">\[&lt;var&gt;command&lt;/var&gt;]</target>
        </trans-unit>
        <trans-unit id="9e94758983980504af303ef297fd2bf9d9cea063" translate="yes" xml:space="preserve">
          <source>\\</source>
          <target state="translated">\\</target>
        </trans-unit>
        <trans-unit id="181a0753b3fe2a4d795730d55277a7fe8c24bcc3" translate="yes" xml:space="preserve">
          <source>\\(\\sw\\|\\s_\\)+</source>
          <target state="translated">\\(\\sw\\|\\s_\\)+</target>
        </trans-unit>
        <trans-unit id="fc7cbf2bdfb940bfdae1229f28a4cde7f630b6b0" translate="yes" xml:space="preserve">
          <source>\\.\COM10</source>
          <target state="translated">\\.\COM10</target>
        </trans-unit>
        <trans-unit id="5a6ccc13b9cd760c08582c1976c9225e148b1609" translate="yes" xml:space="preserve">
          <source>\\[...]</source>
          <target state="translated">\\[...]</target>
        </trans-unit>
        <trans-unit id="512bb4099826ee32980158bdee23219738278088" translate="yes" xml:space="preserve">
          <source>\\sw+</source>
          <target state="translated">\\sw+</target>
        </trans-unit>
        <trans-unit id="537d27161a67db8be85295137fdab2efd401ca57" translate="yes" xml:space="preserve">
          <source>\_&amp;gt;</source>
          <target state="translated">\_&amp;gt;</target>
        </trans-unit>
        <trans-unit id="66db9f43e1ddaff6b0ef3ea5f7dbe1bba07c4c98" translate="yes" xml:space="preserve">
          <source>\_&amp;lt;</source>
          <target state="translated">\_&amp;lt;</target>
        </trans-unit>
        <trans-unit id="2028482cf71f36399420ce1217d0cf45ed8c36b9" translate="yes" xml:space="preserve">
          <source>\_&amp;lt;\(</source>
          <target state="translated">\_&amp;lt;\(</target>
        </trans-unit>
        <trans-unit id="b302788f6bbb39476ae634f9d7e0bd038ea24834" translate="yes" xml:space="preserve">
          <source>\`</source>
          <target state="translated">\`</target>
        </trans-unit>
        <trans-unit id="4629ca1b60e263bdc4326334b23323e0434717a5" translate="yes" xml:space="preserve">
          <source>\b</source>
          <target state="translated">\b</target>
        </trans-unit>
        <trans-unit id="8f9b02f0aa3592d6ecdc282edb24043f9b01c77b" translate="yes" xml:space="preserve">
          <source>\bballs?\b</source>
          <target state="translated">\bballs?\b</target>
        </trans-unit>
        <trans-unit id="c2c708b9d3c208586594c8767c31348ecab3e39a" translate="yes" xml:space="preserve">
          <source>\bfoo\b</source>
          <target state="translated">\bfoo\b</target>
        </trans-unit>
        <trans-unit id="f9c6037a49fa5188b35d4eaf5b5bc39b84a40811" translate="yes" xml:space="preserve">
          <source>\c&lt;var&gt;c&lt;/var&gt;</source>
          <target state="translated">\c&lt;var&gt;c&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="7c10f3a2df858b7c658a708e30d3987738d58808" translate="yes" xml:space="preserve">
          <source>\c&lt;var&gt;code&lt;/var&gt;</source>
          <target state="translated">\c&lt;var&gt;code&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="794a729d2e4ffbb094fec03ae9b3acd219371385" translate="yes" xml:space="preserve">
          <source>\f</source>
          <target state="translated">\f</target>
        </trans-unit>
        <trans-unit id="ef7e6794ca9c6a06b54b66f279237fb8daaaeea8" translate="yes" xml:space="preserve">
          <source>\n</source>
          <target state="translated">\n</target>
        </trans-unit>
        <trans-unit id="e1c702e348504013ae2a1faa8cec6a558f9315a8" translate="yes" xml:space="preserve">
          <source>\s</source>
          <target state="translated">\s</target>
        </trans-unit>
        <trans-unit id="a92a54233120d0e800990f99e0c682539eaface7" translate="yes" xml:space="preserve">
          <source>\s-</source>
          <target state="translated">\s-</target>
        </trans-unit>
        <trans-unit id="197d841fa9fb2eb3cdd3854366a33745a4787040" translate="yes" xml:space="preserve">
          <source>\s&lt;var&gt;code&lt;/var&gt;</source>
          <target state="translated">\s&lt;var&gt;code&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="8bf81043e29dfc96a6fe1f30f7116f552de6e7d7" translate="yes" xml:space="preserve">
          <source>\t</source>
          <target state="translated">\t</target>
        </trans-unit>
        <trans-unit id="fae64705e1d51309b68b8bee9ec088553b81876e" translate="yes" xml:space="preserve">
          <source>\uNNNN</source>
          <target state="translated">\uNNNN</target>
        </trans-unit>
        <trans-unit id="84a1312a8a946a90cf99ad056ddaeb081ebe238e" translate="yes" xml:space="preserve">
          <source>\w</source>
          <target state="translated">\w</target>
        </trans-unit>
        <trans-unit id="3149b2b83eb5b14b5d4aaaa2d022394b58be2573" translate="yes" xml:space="preserve">
          <source>\x&lt;var&gt;n&lt;/var&gt;</source>
          <target state="translated">\x&lt;var&gt;n&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="c27b8309dd3ebe3c44adcaadac01ddd01055c738" translate="yes" xml:space="preserve">
          <source>\xe0\</source>
          <target state="translated">\xe0\</target>
        </trans-unit>
        <trans-unit id="3573175dc565405bd7441863e2029d2d321df833" translate="yes" xml:space="preserve">
          <source>\{,1\}</source>
          <target state="translated">\{,1\}</target>
        </trans-unit>
        <trans-unit id="6d499d9e3bc331617d426b261a22596ede69bd8a" translate="yes" xml:space="preserve">
          <source>\{,\}</source>
          <target state="translated">\{,\}</target>
        </trans-unit>
        <trans-unit id="1bebf3720e0772ff068fdb4902dbb92249cb4bb6" translate="yes" xml:space="preserve">
          <source>\{0,1\}</source>
          <target state="translated">\{0,1\}</target>
        </trans-unit>
        <trans-unit id="465f004ce9d90d9bb86fa6b853aed7ec84ca91cb" translate="yes" xml:space="preserve">
          <source>\{0,\}</source>
          <target state="translated">\{0,\}</target>
        </trans-unit>
        <trans-unit id="5848affbf60f5bef81e10b50a4f3dfe8cc89aafa" translate="yes" xml:space="preserve">
          <source>\{1,\}</source>
          <target state="translated">\{1,\}</target>
        </trans-unit>
        <trans-unit id="7b8bb60c66482cc64c71319de5a770dbbc58dbfa" translate="yes" xml:space="preserve">
          <source>\{&lt;var&gt;keymap&lt;/var&gt;}</source>
          <target state="translated">\{&lt;var&gt;keymap&lt;/var&gt;}</target>
        </trans-unit>
        <trans-unit id="68d17f7b12aeaf27d730efe901cb3ce2e17c4362" translate="yes" xml:space="preserve">
          <source>\{&lt;var&gt;m&lt;/var&gt;,&lt;var&gt;n&lt;/var&gt;\}</source>
          <target state="translated">\{&lt;var&gt;m&lt;/var&gt;,&lt;var&gt;n&lt;/var&gt;\}</target>
        </trans-unit>
        <trans-unit id="dd633f08e22338177f7f09984ef3fbae094ca79b" translate="yes" xml:space="preserve">
          <source>\{&lt;var&gt;m&lt;/var&gt;\}</source>
          <target state="translated">\{&lt;var&gt;m&lt;/var&gt;\}</target>
        </trans-unit>
        <trans-unit id="75f55739a2cf803c528710550991a95420fe2ddb" translate="yes" xml:space="preserve">
          <source>\|</source>
          <target state="translated">\|</target>
        </trans-unit>
        <trans-unit id="85e31d55324b34266a6703175212a2ea8282a925" translate="yes" xml:space="preserve">
          <source>^A</source>
          <target state="translated">^A</target>
        </trans-unit>
        <trans-unit id="e7fca6d8f1a9367c717af192e0b0dcba2c5cb68a" translate="yes" xml:space="preserve">
          <source>^L</source>
          <target state="translated">^L</target>
        </trans-unit>
        <trans-unit id="b23707ffb23d2608097e4174e7c475d4ca808677" translate="yes" xml:space="preserve">
          <source>^foo</source>
          <target state="translated">^foo</target>
        </trans-unit>
        <trans-unit id="deb8ccf25fe4c28454012c03785eb57ded7283e7" translate="yes" xml:space="preserve">
          <source>_Noreturn</source>
          <target state="translated">_Noreturn</target>
        </trans-unit>
        <trans-unit id="1927546ecc48790395f3739c5386ecc7c6b3b072" translate="yes" xml:space="preserve">
          <source>_~!@$%^&amp;amp;:&amp;lt;&amp;gt;{}?</source>
          <target state="translated">_~!@$%^&amp;amp;:&amp;lt;&amp;gt;{}?</target>
        </trans-unit>
        <trans-unit id="7e15bb5c01e7dd56499e37c634cf791d3a519aee" translate="yes" xml:space="preserve">
          <source>`</source>
          <target state="translated">`</target>
        </trans-unit>
        <trans-unit id="effd53c64bed7ff6ede6e81e7f15d11111daa224" translate="yes" xml:space="preserve">
          <source>`like this'</source>
          <target state="translated">`like this'</target>
        </trans-unit>
        <trans-unit id="86f7e437faa5a7fce15d1ddcb9eaeaea377667b8" translate="yes" xml:space="preserve">
          <source>a</source>
          <target state="translated">a</target>
        </trans-unit>
        <trans-unit id="f86953c3dd91feb188fa353bfd696a6a142dc802" translate="yes" xml:space="preserve">
          <source>a &lt;var&gt;file&lt;/var&gt; attribute was changed</source>
          <target state="translated">&lt;var&gt;file&lt;/var&gt; 속성이 변경되었습니다</target>
        </trans-unit>
        <trans-unit id="dcf6f0a6a279755af19e17261032e7ab76f14d24" translate="yes" xml:space="preserve">
          <source>a buffer</source>
          <target state="translated">버퍼</target>
        </trans-unit>
        <trans-unit id="ba5c69691fe7dcb0f5492dea8f6685fad9953249" translate="yes" xml:space="preserve">
          <source>a buffer name (a string)</source>
          <target state="translated">버퍼 이름 (문자열)</target>
        </trans-unit>
        <trans-unit id="96209eeedd22efea63befcb2f2889c362324a49d" translate="yes" xml:space="preserve">
          <source>a cons cell</source>
          <target state="translated">단점 셀</target>
        </trans-unit>
        <trans-unit id="a7bf39a7aa4533fae185ed3396ec14da3dc8440a" translate="yes" xml:space="preserve">
          <source>a cons cell &lt;code&gt;(&lt;var&gt;graphical&lt;/var&gt; . &lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;</source>
          <target state="translated">단점 셀 &lt;code&gt;(&lt;var&gt;graphical&lt;/var&gt; . &lt;var&gt;text&lt;/var&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d4d51ccf0158540ecbfa6183866a2dc7228b7e2e" translate="yes" xml:space="preserve">
          <source>a floating-point value</source>
          <target state="translated">부동 소수점 값</target>
        </trans-unit>
        <trans-unit id="fca5763a93bd77ffb39288f08e68cf8e96fcacb0" translate="yes" xml:space="preserve">
          <source>a function</source>
          <target state="translated">기능</target>
        </trans-unit>
        <trans-unit id="f583c9992ce428b42da72b94d362e8df4caab665" translate="yes" xml:space="preserve">
          <source>a glyph code</source>
          <target state="translated">글리프 코드</target>
        </trans-unit>
        <trans-unit id="e3206e3d9903d6b482a1ec57beb3831b1014b556" translate="yes" xml:space="preserve">
          <source>a list</source>
          <target state="translated">목록</target>
        </trans-unit>
        <trans-unit id="9ad4b2f96cfd13d71b7876f2835e8f3b9850107d" translate="yes" xml:space="preserve">
          <source>a list of buffer-local variable bindings (see &lt;a href=&quot;buffer_002dlocal-variables#Buffer_002dLocal-Variables&quot;&gt;Buffer-Local Variables&lt;/a&gt;).</source>
          <target state="translated">버퍼 로컬 변수 바인딩리스트 (참조 : &lt;a href=&quot;buffer_002dlocal-variables#Buffer_002dLocal-Variables&quot;&gt;버퍼 로컬 변수&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="8aa18e81b47642b632c2119bf7f7121ca85a8229" translate="yes" xml:space="preserve">
          <source>a local keymap (see &lt;a href=&quot;keymaps#Keymaps&quot;&gt;Keymaps&lt;/a&gt;); and,</source>
          <target state="translated">로컬 키맵 (참조 &lt;a href=&quot;keymaps#Keymaps&quot;&gt;키맵을&lt;/a&gt; ); 과,</target>
        </trans-unit>
        <trans-unit id="5bdea77ac6426ddf792797324dff5e0cd49c3e1e" translate="yes" xml:space="preserve">
          <source>a local syntax table (see &lt;a href=&quot;syntax-tables#Syntax-Tables&quot;&gt;Syntax Tables&lt;/a&gt;);</source>
          <target state="translated">로컬 구문 테이블 ( &lt;a href=&quot;syntax-tables#Syntax-Tables&quot;&gt;Syntax Tables&lt;/a&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="1d138ee70c40a571f53900806384a5c9f9d176ea" translate="yes" xml:space="preserve">
          <source>a marker</source>
          <target state="translated">마커</target>
        </trans-unit>
        <trans-unit id="c37f5d4c24ebe19faceff2fa752f48ced17e4bc7" translate="yes" xml:space="preserve">
          <source>a number</source>
          <target state="translated">숫자</target>
        </trans-unit>
        <trans-unit id="1cf08907c20af74dbafbd5d9fab58c4c2c99704f" translate="yes" xml:space="preserve">
          <source>a number, &lt;var&gt;factor&lt;/var&gt;</source>
          <target state="translated">숫자, &lt;var&gt;factor&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="48690dc4bbe6fa410b9f0227874582961d09ca4e" translate="yes" xml:space="preserve">
          <source>a prefix key in the local keymap, in such a way that</source>
          <target state="translated">로컬 키맵의 접두사 키입니다.</target>
        </trans-unit>
        <trans-unit id="1b0ec7471233bc1d7240306620f32499b6c0a661" translate="yes" xml:space="preserve">
          <source>a rectangle</source>
          <target state="translated">직사각형</target>
        </trans-unit>
        <trans-unit id="60300ac1168a0d3227ac869dd139121b3e9c03dd" translate="yes" xml:space="preserve">
          <source>a regular expression</source>
          <target state="translated">정규식</target>
        </trans-unit>
        <trans-unit id="555d01e6c83266b3e9f92bd811905370caf62770" translate="yes" xml:space="preserve">
          <source>a string</source>
          <target state="translated">줄</target>
        </trans-unit>
        <trans-unit id="8406980d7ae05fccc52eafb4af56b4cee538dee9" translate="yes" xml:space="preserve">
          <source>a string or vector</source>
          <target state="translated">문자열 또는 벡터</target>
        </trans-unit>
        <trans-unit id="94c892fc69517e7275b6439c9862d88dc6d51ab9" translate="yes" xml:space="preserve">
          <source>a symbol</source>
          <target state="translated">상징</target>
        </trans-unit>
        <trans-unit id="6799304ed80963bf9bdbca491146c3d574dc98d5" translate="yes" xml:space="preserve">
          <source>a symbol, &lt;var&gt;function&lt;/var&gt;</source>
          <target state="translated">상징, &lt;var&gt;function&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="1ecf1381c93094fda27556be04beb19a33e53e8b" translate="yes" xml:space="preserve">
          <source>a symbol, &lt;var&gt;symbol&lt;/var&gt;</source>
          <target state="translated">상징, &lt;var&gt;symbol&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="1fdb5f6c02d6b5f86e2e1882dcedad289e91f303" translate="yes" xml:space="preserve">
          <source>a window</source>
          <target state="translated">창문</target>
        </trans-unit>
        <trans-unit id="308ab8140c595dbad9d3ac81515fac02e6c3e988" translate="yes" xml:space="preserve">
          <source>a*</source>
          <target state="translated">a*</target>
        </trans-unit>
        <trans-unit id="69f6642c9d71b463485b4faf4e989dc3fe77a8c6" translate="yes" xml:space="preserve">
          <source>a.b</source>
          <target state="translated">a.b</target>
        </trans-unit>
        <trans-unit id="3ec69c85a4ff96830024afeef2d4e512181c8f7b" translate="yes" xml:space="preserve">
          <source>a/b</source>
          <target state="translated">a/b</target>
        </trans-unit>
        <trans-unit id="ee2be6da91ae879476b152d7ca041f1b683907d0" translate="yes" xml:space="preserve">
          <source>a/b/c</source>
          <target state="translated">a/b/c</target>
        </trans-unit>
        <trans-unit id="378e7a5b72f1d230a631ca8d369607ca69afb621" translate="yes" xml:space="preserve">
          <source>a[i] = x</source>
          <target state="translated">a [i] = x</target>
        </trans-unit>
        <trans-unit id="b0f9a29f8387167e91e7920581c5bab37c2f98bb" translate="yes" xml:space="preserve">
          <source>abbrev-all-caps</source>
          <target state="translated">abbrev-all-caps</target>
        </trans-unit>
        <trans-unit id="90f9b829eb6464830836528e28a3055be5dddcf3" translate="yes" xml:space="preserve">
          <source>abbrev-expand-function</source>
          <target state="translated">abbrev-expand-function</target>
        </trans-unit>
        <trans-unit id="64aadbc15867dca890cf12670e2bea6f10497631" translate="yes" xml:space="preserve">
          <source>abbrev-expansion</source>
          <target state="translated">abbrev-expansion</target>
        </trans-unit>
        <trans-unit id="c0aba5d3634b9ea832b9f37645e574fc163c89eb" translate="yes" xml:space="preserve">
          <source>abbrev-file-name</source>
          <target state="translated">abbrev-file-name</target>
        </trans-unit>
        <trans-unit id="ed35de2ebca31bf684e38db844f7e4f383ccda18" translate="yes" xml:space="preserve">
          <source>abbrev-get</source>
          <target state="translated">abbrev-get</target>
        </trans-unit>
        <trans-unit id="fd92599594970802c5dde91382848553bd04b95a" translate="yes" xml:space="preserve">
          <source>abbrev-insert</source>
          <target state="translated">abbrev-insert</target>
        </trans-unit>
        <trans-unit id="f55d20aa4b67bb0848505f5f21a9f6f8959b8cb7" translate="yes" xml:space="preserve">
          <source>abbrev-minor-mode-table-alist</source>
          <target state="translated">abbrev-minor-mode-table-alist</target>
        </trans-unit>
        <trans-unit id="47ec8937783b078c6436311c191c57a4d2ba4d92" translate="yes" xml:space="preserve">
          <source>abbrev-prefix-mark</source>
          <target state="translated">abbrev-prefix-mark</target>
        </trans-unit>
        <trans-unit id="0657b7dbe6d56e3b2c2e2a10ae61cd2c08aa9f8f" translate="yes" xml:space="preserve">
          <source>abbrev-put</source>
          <target state="translated">abbrev-put</target>
        </trans-unit>
        <trans-unit id="d5cbc24c194dced7676177553bbc929778fb1b40" translate="yes" xml:space="preserve">
          <source>abbrev-start-location</source>
          <target state="translated">abbrev-start-location</target>
        </trans-unit>
        <trans-unit id="6bb5dd6daa6b40b1fce17f14d733624d4ca93d64" translate="yes" xml:space="preserve">
          <source>abbrev-start-location-buffer</source>
          <target state="translated">abbrev-start-location-buffer</target>
        </trans-unit>
        <trans-unit id="ddc566799892329cacf09273a98ce28f0e207631" translate="yes" xml:space="preserve">
          <source>abbrev-symbol</source>
          <target state="translated">abbrev-symbol</target>
        </trans-unit>
        <trans-unit id="6775bce3f1091a9e55f97960f46c114eb1284f42" translate="yes" xml:space="preserve">
          <source>abbrev-table-get</source>
          <target state="translated">abbrev-table-get</target>
        </trans-unit>
        <trans-unit id="72fe8e8ed8bad683f4c0170456fc25646359a78f" translate="yes" xml:space="preserve">
          <source>abbrev-table-name-list</source>
          <target state="translated">abbrev-table-name-list</target>
        </trans-unit>
        <trans-unit id="c7764ddcd16c0ce2cbca184a1aaa194f6cb44c90" translate="yes" xml:space="preserve">
          <source>abbrev-table-p</source>
          <target state="translated">abbrev-table-p</target>
        </trans-unit>
        <trans-unit id="7f4754234cac65c7bdac6187ff50ccfa12276a9b" translate="yes" xml:space="preserve">
          <source>abbrev-table-put</source>
          <target state="translated">abbrev-table-put</target>
        </trans-unit>
        <trans-unit id="e4508d4ac9a33a48aef987b584aeee176d7e5731" translate="yes" xml:space="preserve">
          <source>abbreviate-file-name</source>
          <target state="translated">abbreviate-file-name</target>
        </trans-unit>
        <trans-unit id="ac42dc39c509ffe41dd367bae7ab4d8aec0103f6" translate="yes" xml:space="preserve">
          <source>abbrevs-changed</source>
          <target state="translated">abbrevs-changed</target>
        </trans-unit>
        <trans-unit id="a9993e364706816aba3e25717850c26c9cd0d89d" translate="yes" xml:space="preserve">
          <source>abc</source>
          <target state="translated">abc</target>
        </trans-unit>
        <trans-unit id="ab2780e3d97faa5b51b44bdd0c4aa32c78344d6d" translate="yes" xml:space="preserve">
          <source>abort-recursive-edit</source>
          <target state="translated">abort-recursive-edit</target>
        </trans-unit>
        <trans-unit id="82451b41fd7878180b6aa2b54e369cbec4e8032c" translate="yes" xml:space="preserve">
          <source>abs</source>
          <target state="translated">abs</target>
        </trans-unit>
        <trans-unit id="06653551f2bec9c2d63d3e0cba6db2106798339b" translate="yes" xml:space="preserve">
          <source>accept-change-group</source>
          <target state="translated">accept-change-group</target>
        </trans-unit>
        <trans-unit id="e84f857bfa3606a01c9d9c3be0d4a15cf2447c37" translate="yes" xml:space="preserve">
          <source>accept-process-output</source>
          <target state="translated">accept-process-output</target>
        </trans-unit>
        <trans-unit id="67fa2dcb99c9f8e87bed79c99ec87cd5184bb6ed" translate="yes" xml:space="preserve">
          <source>access-file</source>
          <target state="translated">access-file</target>
        </trans-unit>
        <trans-unit id="66eb838940a63ceb9e3ed17c05d82bf065d5ea2a" translate="yes" xml:space="preserve">
          <source>accessible-keymaps</source>
          <target state="translated">accessible-keymaps</target>
        </trans-unit>
        <trans-unit id="328f0742cf74e8ffdb253376b1803615055e215b" translate="yes" xml:space="preserve">
          <source>acos</source>
          <target state="translated">acos</target>
        </trans-unit>
        <trans-unit id="4b8091654c7e7d22508f6c852329f2aca790d17f" translate="yes" xml:space="preserve">
          <source>activate-change-group</source>
          <target state="translated">activate-change-group</target>
        </trans-unit>
        <trans-unit id="df5835d8fa06288b7ec31102790415680d984736" translate="yes" xml:space="preserve">
          <source>activate-mark-hook</source>
          <target state="translated">activate-mark-hook</target>
        </trans-unit>
        <trans-unit id="85ab6457d485c1f107f68a9ce08ef13756018052" translate="yes" xml:space="preserve">
          <source>active-minibuffer-window</source>
          <target state="translated">active-minibuffer-window</target>
        </trans-unit>
        <trans-unit id="912023acb550a9ae675eb84733dfa4596533ba9f" translate="yes" xml:space="preserve">
          <source>actually works by changing an entry in &lt;code&gt;ctl-x-map&lt;/code&gt;, and this has the effect of changing the bindings of both</source>
          <target state="translated">실제로 &lt;code&gt;ctl-x-map&lt;/code&gt; 의 항목을 변경하여 작동 하며 이것은 둘 다의 바인딩을 변경하는 효과가 있습니다.</target>
        </trans-unit>
        <trans-unit id="eac92748b8b9a7e17c67ff451ce666f9a273ff8e" translate="yes" xml:space="preserve">
          <source>adaptive-fill-first-line-regexp</source>
          <target state="translated">adaptive-fill-first-line-regexp</target>
        </trans-unit>
        <trans-unit id="0a55e085e282ffbc92b4d8b36b746561e294f2be" translate="yes" xml:space="preserve">
          <source>adaptive-fill-function</source>
          <target state="translated">adaptive-fill-function</target>
        </trans-unit>
        <trans-unit id="368ae8c059d91df24d567f2dd38e5b281327e122" translate="yes" xml:space="preserve">
          <source>adaptive-fill-mode</source>
          <target state="translated">adaptive-fill-mode</target>
        </trans-unit>
        <trans-unit id="0e6901052be87b1077913d4235d33372871e29c2" translate="yes" xml:space="preserve">
          <source>adaptive-fill-regexp</source>
          <target state="translated">adaptive-fill-regexp</target>
        </trans-unit>
        <trans-unit id="5fcd58b9e6f65ea2e9d7aa8e404eeb5d34259d74" translate="yes" xml:space="preserve">
          <source>add-face-text-property</source>
          <target state="translated">add-face-text-property</target>
        </trans-unit>
        <trans-unit id="362df00e54b7ea2ab36885a1593164fb8c7ee359" translate="yes" xml:space="preserve">
          <source>add-function</source>
          <target state="translated">add-function</target>
        </trans-unit>
        <trans-unit id="d543acc4f92d2540876d091043075058eb4085b4" translate="yes" xml:space="preserve">
          <source>add-hook</source>
          <target state="translated">add-hook</target>
        </trans-unit>
        <trans-unit id="f8298ba605df840f55782fc14bee2a4df1713119" translate="yes" xml:space="preserve">
          <source>add-name-to-file</source>
          <target state="translated">add-name-to-file</target>
        </trans-unit>
        <trans-unit id="7999f2aabdcc2ea549966aea0060fa3c3dc59c41" translate="yes" xml:space="preserve">
          <source>add-text-properties</source>
          <target state="translated">add-text-properties</target>
        </trans-unit>
        <trans-unit id="e0ac4b26263a6fee52c3f404204ed7bdd69f41f8" translate="yes" xml:space="preserve">
          <source>add-to-history</source>
          <target state="translated">add-to-history</target>
        </trans-unit>
        <trans-unit id="90bbd7a33c89135cc8085b561e4d2335a8b50249" translate="yes" xml:space="preserve">
          <source>add-to-invisibility-spec</source>
          <target state="translated">add-to-invisibility-spec</target>
        </trans-unit>
        <trans-unit id="81a42179ffe9eb53331b112999d1c8bd72c93219" translate="yes" xml:space="preserve">
          <source>add-to-list</source>
          <target state="translated">add-to-list</target>
        </trans-unit>
        <trans-unit id="b12d32108f0712b7c262c0663300960ff549c22e" translate="yes" xml:space="preserve">
          <source>add-to-ordered-list</source>
          <target state="translated">add-to-ordered-list</target>
        </trans-unit>
        <trans-unit id="728f5317e44ead5a4097a1d00a52975c65a9d861" translate="yes" xml:space="preserve">
          <source>add-variable-watcher</source>
          <target state="translated">add-variable-watcher</target>
        </trans-unit>
        <trans-unit id="e075d4f78f76511a55006aa90d853a37451a3558" translate="yes" xml:space="preserve">
          <source>adds &lt;code&gt;my-text-hook-function&lt;/code&gt; to the hook called &lt;code&gt;text-mode-hook&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;my-text-hook-function&lt;/code&gt; 후크라는에 &lt;code&gt;text-mode-hook&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8e92b3f340e645b0cf632829072b615b0f3fae25" translate="yes" xml:space="preserve">
          <source>adjust-window-trailing-edge</source>
          <target state="translated">adjust-window-trailing-edge</target>
        </trans-unit>
        <trans-unit id="da397a984c228db8504051ab813794ef542f9dbd" translate="yes" xml:space="preserve">
          <source>advice-add</source>
          <target state="translated">advice-add</target>
        </trans-unit>
        <trans-unit id="f2f1617428855ab8e93455ca76d4b6eee7bfb5ae" translate="yes" xml:space="preserve">
          <source>advice-eval-interactive-spec</source>
          <target state="translated">advice-eval-interactive-spec</target>
        </trans-unit>
        <trans-unit id="3d9190d99e18108e83a26be36de1a9df76acb9b2" translate="yes" xml:space="preserve">
          <source>advice-function-mapc</source>
          <target state="translated">advice-function-mapc</target>
        </trans-unit>
        <trans-unit id="7ef9de6831ee9fccf99973db97c843ac6d6a58c3" translate="yes" xml:space="preserve">
          <source>advice-function-member-p</source>
          <target state="translated">advice-function-member-p</target>
        </trans-unit>
        <trans-unit id="ddfd72a0be23dd00cac2115cd957143435b68b72" translate="yes" xml:space="preserve">
          <source>advice-mapc</source>
          <target state="translated">advice-mapc</target>
        </trans-unit>
        <trans-unit id="cc2d22aec47ce30ee4b510425a3d03fa456f93bd" translate="yes" xml:space="preserve">
          <source>advice-member-p</source>
          <target state="translated">advice-member-p</target>
        </trans-unit>
        <trans-unit id="aafa4c093fd51eb2105c09f99b28bf27a5ad5a37" translate="yes" xml:space="preserve">
          <source>advice-remove</source>
          <target state="translated">advice-remove</target>
        </trans-unit>
        <trans-unit id="3f4db60e8d59d2d3075150f757377900ea75bb5a" translate="yes" xml:space="preserve">
          <source>after-change-functions</source>
          <target state="translated">after-change-functions</target>
        </trans-unit>
        <trans-unit id="b8de09de57826fdeb467ca065bed02230ec0f8c3" translate="yes" xml:space="preserve">
          <source>after-change-major-mode-hook</source>
          <target state="translated">after-change-major-mode-hook</target>
        </trans-unit>
        <trans-unit id="b4e9dcc4d3dba4a3a74234f2197bb59d9af4f9cc" translate="yes" xml:space="preserve">
          <source>after-find-file</source>
          <target state="translated">after-find-file</target>
        </trans-unit>
        <trans-unit id="d1daad89250e323af3643367ce583f36d073a483" translate="yes" xml:space="preserve">
          <source>after-focus-change-function</source>
          <target state="translated">after-focus-change-function</target>
        </trans-unit>
        <trans-unit id="d7d3e09ba335197cbd6bb1e128976aae52331709" translate="yes" xml:space="preserve">
          <source>after-init-hook</source>
          <target state="translated">after-init-hook</target>
        </trans-unit>
        <trans-unit id="626148d64ad837aa507a8653180b15cb25d5b891" translate="yes" xml:space="preserve">
          <source>after-insert-file-functions</source>
          <target state="translated">after-insert-file-functions</target>
        </trans-unit>
        <trans-unit id="e374803b5550b696e1e6696ce5d7d9caf2078c03" translate="yes" xml:space="preserve">
          <source>after-load-functions</source>
          <target state="translated">after-load-functions</target>
        </trans-unit>
        <trans-unit id="fab2e820859f36159d07a03a03e53a3da2bb8e30" translate="yes" xml:space="preserve">
          <source>after-make-frame-functions</source>
          <target state="translated">after-make-frame-functions</target>
        </trans-unit>
        <trans-unit id="c09a4e037af9e4e568eff8b0601018b127b567c2" translate="yes" xml:space="preserve">
          <source>after-revert-hook</source>
          <target state="translated">after-revert-hook</target>
        </trans-unit>
        <trans-unit id="ab558f90eefa78c995c7525b6c72e3cd16a96405" translate="yes" xml:space="preserve">
          <source>after-save-hook</source>
          <target state="translated">after-save-hook</target>
        </trans-unit>
        <trans-unit id="703fe58832eac76ac1e008a993356696b6c0261a" translate="yes" xml:space="preserve">
          <source>again will collapse back to the original state.</source>
          <target state="translated">다시 원래 상태로 축소됩니다.</target>
        </trans-unit>
        <trans-unit id="193e40d4ccdcae0e81746c3fd2a7bc4a66155992" translate="yes" xml:space="preserve">
          <source>again without changing the buffer text, the evaluation list is effectively unchanged.</source>
          <target state="translated">다시 버퍼 텍스트를 변경하지 않고 평가 목록은 사실상 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5b0d2bcb9c51734cc66248084ebae62a52660166" translate="yes" xml:space="preserve">
          <source>again. If the old indentation actually fit the intended nesting of parentheses, and you have put back those parentheses,</source>
          <target state="translated">다시. 이전 들여 쓰기가 의도 한 괄호 중첩에 실제로 맞고 해당 괄호를 다시 넣은 경우</target>
        </trans-unit>
        <trans-unit id="4cc71e8d9620617dbc0f33f4e09d7b22c0dc2f92" translate="yes" xml:space="preserve">
          <source>again. If the old indentation actually fits the intended nesting of parentheses, and you have put back those parentheses,</source>
          <target state="translated">다시. 이전 들여 쓰기가 의도 한 괄호 중첩에 실제로 맞고 해당 괄호를 다시 넣은 경우</target>
        </trans-unit>
        <trans-unit id="fe575dd87f1c575db4c16f0e957d0e5668fa75ec" translate="yes" xml:space="preserve">
          <source>alist-get</source>
          <target state="translated">alist-get</target>
        </trans-unit>
        <trans-unit id="478a0bf91848f4714b982203f3aa484d371b06e4" translate="yes" xml:space="preserve">
          <source>all-completions</source>
          <target state="translated">all-completions</target>
        </trans-unit>
        <trans-unit id="c79b31cc83d1cacd22d4f8d89542dd3f31de3525" translate="yes" xml:space="preserve">
          <source>all-threads</source>
          <target state="translated">all-threads</target>
        </trans-unit>
        <trans-unit id="d3a526ed61ac37d96b189e7dd169c6fbdb51cfa3" translate="yes" xml:space="preserve">
          <source>alloc.c</source>
          <target state="translated">alloc.c</target>
        </trans-unit>
        <trans-unit id="4e2ad8e6ee0b90393e71ab8caf5544d84ef8b17b" translate="yes" xml:space="preserve">
          <source>allocates dynamic memory for the part that didn&amp;rsquo;t fit. If Emacs will be dumped using the &lt;code&gt;pdump&lt;/code&gt; method (see &lt;a href=&quot;building-emacs#Building-Emacs&quot;&gt;Building Emacs&lt;/a&gt;), the pure-space overflow is of no special importance (it just means some of the preloaded stuff cannot be shared with other Emacs jobs). However, if Emacs will be dumped using the now obsolete &lt;code&gt;unexec&lt;/code&gt; method, the resulting image will work, but garbage collection (see &lt;a href=&quot;garbage-collection#Garbage-Collection&quot;&gt;Garbage Collection&lt;/a&gt;) is disabled in this situation, causing a memory leak. Such an overflow normally won&amp;rsquo;t happen unless you try to preload additional libraries or add features to the standard ones. Emacs will display a warning about the overflow when it starts, if it was dumped using &lt;code&gt;unexec&lt;/code&gt;. If this happens, you should increase the compilation parameter &lt;code&gt;SYSTEM_PURESIZE_EXTRA&lt;/code&gt; in the file</source>
          <target state="translated">적합하지 않은 부품에 동적 메모리를 할당합니다. Emacs가 &lt;code&gt;pdump&lt;/code&gt; 메서드를 사용하여 덤프된다면 (Emacs &lt;a href=&quot;building-emacs#Building-Emacs&quot;&gt;빌드&lt;/a&gt; 참조 ), 순수 공간 오버플로는 특별한 중요성이 없습니다 (사전로드 된 항목 중 일부를 다른 Emacs 작업과 공유 할 수 없음을 의미합니다). 그러나 현재 사용되지 않는 &lt;code&gt;unexec&lt;/code&gt; 메서드를 사용하여 Emacs를 덤프 하면 결과 이미지가 작동하지만 이 상황에서는 가비지 수집 ( &lt;a href=&quot;garbage-collection#Garbage-Collection&quot;&gt;Garbage Collection&lt;/a&gt; 참조 )이 비활성화되어 메모리 누수가 발생합니다. 이러한 오버플로는 일반적으로 추가 라이브러리를 미리로드하거나 표준 라이브러리에 기능을 추가하지 않는 한 발생하지 않습니다. Emacs는 시작할 때 오버플로에 대한 경고를 표시합니다. 만약 &lt;code&gt;unexec&lt;/code&gt; 를 사용하여 덤프 된 경우. 이 경우 파일에서 컴파일 매개 변수 &lt;code&gt;SYSTEM_PURESIZE_EXTRA&lt;/code&gt; 를 늘려야 합니다.</target>
        </trans-unit>
        <trans-unit id="092cc25f5295b80e29167bc77f8fb3128dbbd114" translate="yes" xml:space="preserve">
          <source>allows integers, &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt; as legitimate values.</source>
          <target state="translated">정수, &lt;code&gt;t&lt;/code&gt; 및 &lt;code&gt;nil&lt;/code&gt; 을 합법적 인 값으로 허용 합니다.</target>
        </trans-unit>
        <trans-unit id="9fa2f36820e686a6b74313f3cd8771d2d82efd04" translate="yes" xml:space="preserve">
          <source>allows the use of scalable fonts with registry &lt;code&gt;iso10646-1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;iso10646-1&lt;/code&gt; 레지스트리와 함께 확장 가능한 글꼴을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="00f342d2e7c31618b8f7f391c63b84a1380d6c17" translate="yes" xml:space="preserve">
          <source>already, but succeed in popping up a new window. Evaluating the same form again will now not cause any visible changes&amp;mdash;&lt;code&gt;display-buffer&lt;/code&gt; reused the window already showing</source>
          <target state="translated">이미 있지만 새 창 팝업에 성공했습니다. 동일한 양식을 다시 평가해도 가시적 인 변경이 발생하지 않습니다. &lt;code&gt;display-buffer&lt;/code&gt; 이미 표시된 창을 재사용했습니다.</target>
        </trans-unit>
        <trans-unit id="325562c769da3f80d0e63bb56514bc2e2723c9b5" translate="yes" xml:space="preserve">
          <source>alt</source>
          <target state="translated">alt</target>
        </trans-unit>
        <trans-unit id="28ef5d0f98ff4d0e83b4d2d5ddf19beca46d7ea2" translate="yes" xml:space="preserve">
          <source>always equals &lt;var&gt;dividend&lt;/var&gt; if &lt;var&gt;divisor&lt;/var&gt; is nonzero.</source>
          <target state="translated">항상 동일 &lt;var&gt;dividend&lt;/var&gt; 하는 경우 &lt;var&gt;divisor&lt;/var&gt; 제로가 아닌 것입니다.</target>
        </trans-unit>
        <trans-unit id="ff639548eb63a43c77806d09c0400b3c1d00eff2" translate="yes" xml:space="preserve">
          <source>always equals &lt;var&gt;dividend&lt;/var&gt;, subject to rounding error if either argument is floating point and to an &lt;code&gt;arith-error&lt;/code&gt; if &lt;var&gt;dividend&lt;/var&gt; is an integer and &lt;var&gt;divisor&lt;/var&gt; is 0. For &lt;code&gt;floor&lt;/code&gt;, see &lt;a href=&quot;numeric-conversions#Numeric-Conversions&quot;&gt;Numeric Conversions&lt;/a&gt;.</source>
          <target state="translated">항상 동일 &lt;var&gt;dividend&lt;/var&gt; 주제 인수 중의 하나가 부동 소수점 인 경우 오류를 반올림하고,에, &lt;code&gt;arith-error&lt;/code&gt; 경우 &lt;var&gt;dividend&lt;/var&gt; 의 정수이고 &lt;var&gt;divisor&lt;/var&gt; 0입니다 &lt;code&gt;floor&lt;/code&gt; 참조 &lt;a href=&quot;numeric-conversions#Numeric-Conversions&quot;&gt;숫자 변환을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5fdbcbbb5e1a0f539e5687031e441a8a1b6442c2" translate="yes" xml:space="preserve">
          <source>always quit directly.</source>
          <target state="translated">항상 직접 종료하십시오.</target>
        </trans-unit>
        <trans-unit id="de73eac0c305038f0437bc6a1f994a5a4379ed28" translate="yes" xml:space="preserve">
          <source>an</source>
          <target state="translated">an</target>
        </trans-unit>
        <trans-unit id="0aa1ddf621628987d586a3d4d944e74af1a742b7" translate="yes" xml:space="preserve">
          <source>an expression such as &lt;code&gt;(cadr (assq 'handler list))&lt;/code&gt; is a macro call, and its expansion is:</source>
          <target state="translated">&lt;code&gt;(cadr (assq 'handler list))&lt;/code&gt; 와 같은 표현식 은 매크로 호출이며 확장은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3c3d09b722f1fde9c701578ae9e8d2375d5495fd" translate="yes" xml:space="preserve">
          <source>an integer</source>
          <target state="translated">정수</target>
        </trans-unit>
        <trans-unit id="6238c0de14c3560c8a17193fb4b81a0cf48869b0" translate="yes" xml:space="preserve">
          <source>an integer, &lt;var&gt;number&lt;/var&gt;</source>
          <target state="translated">정수, &lt;var&gt;number&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="f06df609aed50661247cc6ec96c1599c193c3ec4" translate="yes" xml:space="preserve">
          <source>anchor</source>
          <target state="translated">anchor</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="0b2d72a6529bc1acf8a7bda7bccdc652a56cfe3a" translate="yes" xml:space="preserve">
          <source>and 8-bit raw bytes. In general, these conversions happen when inserting text into a buffer, or when putting text from several strings together in one string. You can also explicitly convert a string&amp;rsquo;s contents to either representation.</source>
          <target state="translated">및 8 비트 원시 바이트. 일반적으로 이러한 변환은 텍스트를 버퍼에 삽입하거나 여러 문자열의 텍스트를 하나의 문자열에 함께 넣을 때 발생합니다. 문자열의 내용을 두 표현 중 하나로 명시 적으로 변환 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="ee86b0a154fa2b192c528eed48cd6f581e963b46" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;&quot;2&quot;&lt;/code&gt; represents</source>
          <target state="translated">및 &lt;code&gt;&quot;2&quot;&lt;/code&gt; 대표</target>
        </trans-unit>
        <trans-unit id="63ea6fadc482f8197445dc9092750534caedfb2d" translate="yes" xml:space="preserve">
          <source>and &lt;var&gt;filename&lt;/var&gt; has handler &lt;var&gt;handler&lt;/var&gt;, then &lt;var&gt;handler&lt;/var&gt; is called like this:</source>
          <target state="translated">및 &lt;var&gt;filename&lt;/var&gt; 핸들러가 &lt;var&gt;handler&lt;/var&gt; 후, &lt;var&gt;handler&lt;/var&gt; 과 같이 호출됩니다 :</target>
        </trans-unit>
        <trans-unit id="6aedb7d930592a1c3ab0ab0607b28bc65e6806e6" translate="yes" xml:space="preserve">
          <source>and Simula, methods that implement generic functions don&amp;rsquo;t belong to a class, they belong to the generic function they implement.</source>
          <target state="translated">Simula, 제네릭 함수를 구현하는 메서드는 클래스에 속하지 않고 구현하는 제네릭 함수에 속합니다.</target>
        </trans-unit>
        <trans-unit id="1b1da2c3359192295d28d91f0757dd5967a4c2ac" translate="yes" xml:space="preserve">
          <source>and defining the GPL compatibility symbol:</source>
          <target state="translated">GPL 호환성 기호 정의 :</target>
        </trans-unit>
        <trans-unit id="24255e2574b8602edc1cdbf86937eba1945c819c" translate="yes" xml:space="preserve">
          <source>and direct it to load</source>
          <target state="translated">로드하도록 지시하십시오.</target>
        </trans-unit>
        <trans-unit id="d2a46a03fe226e5c5a1c72a28937989f1d972ae2" translate="yes" xml:space="preserve">
          <source>and eight-bit characters (see &lt;a href=&quot;explicit-encoding#Explicit-Encoding&quot;&gt;Explicit Encoding&lt;/a&gt;).</source>
          <target state="translated">및 8 비트 문자 ( &lt;a href=&quot;explicit-encoding#Explicit-Encoding&quot;&gt;명시 적 인코딩&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="fd1214de18f394d87faf6f0f77ac56fc3ea9c56a" translate="yes" xml:space="preserve">
          <source>and eight-bit characters to their single-byte form, but loses information for non-</source>
          <target state="translated">및 8 비트 문자를 단일 바이트 형식으로 변경하지만 비</target>
        </trans-unit>
        <trans-unit id="1bbff02f657a5935e72870538bc7ef53b2e645a8" translate="yes" xml:space="preserve">
          <source>and eight-bit characters.</source>
          <target state="translated">8 비트 문자.</target>
        </trans-unit>
        <trans-unit id="95dc1e322ad5713420c3eee3d49a2dc874e92f0b" translate="yes" xml:space="preserve">
          <source>and eight-bit characters. In unibyte buffers and strings, these characters have codes in the range 0 through #xFF (255). In a multibyte buffer or string, eight-bit characters have character codes higher than #xFF (see &lt;a href=&quot;text-representations#Text-Representations&quot;&gt;Text Representations&lt;/a&gt;), but Emacs transparently converts them to their single-byte values when you encode or decode such text.</source>
          <target state="translated">8 비트 문자. 유니 바이트 버퍼 및 문자열에서 이러한 문자는 0에서 #xFF (255) 범위의 코드를 갖습니다. 멀티 바이트 버퍼 또는 문자열에서 8 비트 문자는 #xFF보다 높은 문자 코드를 갖지만 ( &lt;a href=&quot;text-representations#Text-Representations&quot;&gt;텍스트 표현&lt;/a&gt; 참조 ) Emacs는 이러한 텍스트를 인코딩하거나 디코딩 할 때 해당 문자를 단일 바이트 값으로 투명하게 변환합니다.</target>
        </trans-unit>
        <trans-unit id="4f1f0402bdcb413b722b565e77b3956938cadeea" translate="yes" xml:space="preserve">
          <source>and evaluate the form again. This should display</source>
          <target state="translated">양식을 다시 평가하십시오. 표시되어야합니다.</target>
        </trans-unit>
        <trans-unit id="23e10e2852342704bfcbcae2bba248c7edb4e29e" translate="yes" xml:space="preserve">
          <source>and evaluate the form once more,</source>
          <target state="translated">양식을 다시 한 번 평가합니다.</target>
        </trans-unit>
        <trans-unit id="cf66ef7c394c49cae30c492db17351d6eb27df2d" translate="yes" xml:space="preserve">
          <source>and evaluating our canonical &lt;code&gt;display-buffer&lt;/code&gt; form. This will usually create (and give focus to) a new frame whose root window shows</source>
          <target state="translated">표준 &lt;code&gt;display-buffer&lt;/code&gt; 형식을 평가 합니다. 일반적으로 루트 창이 표시되는 새 프레임을 만들고 포커스를줍니다.</target>
        </trans-unit>
        <trans-unit id="13c0a13f05352e42e72f2ab30ed5dbe368b5e078" translate="yes" xml:space="preserve">
          <source>and here is how the result is interpreted:</source>
          <target state="translated">결과가 해석되는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6f45fa747fc914092b39064df109c9e751c339ff" translate="yes" xml:space="preserve">
          <source>and how to use it as part of writing extension modules for Emacs. The module</source>
          <target state="translated">그리고 Emacs를위한 확장 모듈 작성의 일부로 그것을 사용하는 방법. 모듈</target>
        </trans-unit>
        <trans-unit id="a2b942ebebb64de66f93a27af658cffb0230eeef" translate="yes" xml:space="preserve">
          <source>and it says to execute the forms &lt;var&gt;a&lt;/var&gt;, &lt;var&gt;b&lt;/var&gt;, &lt;var&gt;c&lt;/var&gt;, and so on, in that order. These forms are called the &lt;em&gt;body&lt;/em&gt; of the &lt;code&gt;progn&lt;/code&gt; form. The value of the last form in the body becomes the value of the entire &lt;code&gt;progn&lt;/code&gt;. &lt;code&gt;(progn)&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">그리고 &lt;var&gt;a&lt;/var&gt; , &lt;var&gt;b&lt;/var&gt; , &lt;var&gt;c&lt;/var&gt; 등 의 형식 을 순서대로 실행하라고 말합니다 . 이 양식은라고 &lt;em&gt;몸&lt;/em&gt; 의 &lt;code&gt;progn&lt;/code&gt; 형태. 신체의 마지막 형태의 가치는 전체 &lt;code&gt;progn&lt;/code&gt; 의 가치가됩니다 . &lt;code&gt;(progn)&lt;/code&gt; 은 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="41cd18a69f5a83ba9ac309c0830fc3704a87222c" translate="yes" xml:space="preserve">
          <source>and it should return the restored buffer. Here &lt;var&gt;desktop-buffer-misc&lt;/var&gt; is the value returned by the function optionally bound to &lt;code&gt;desktop-save-buffer&lt;/code&gt;.</source>
          <target state="translated">복원 된 버퍼를 반환해야합니다. 여기서 &lt;var&gt;desktop-buffer-misc&lt;/var&gt; 는 선택적으로 &lt;code&gt;desktop-save-buffer&lt;/code&gt; 에 바인딩 된 함수에 의해 반환 된 값 입니다.</target>
        </trans-unit>
        <trans-unit id="233e0f4d00cae535e69968da6678c48f88674960" translate="yes" xml:space="preserve">
          <source>and list the files again. Now there are three names for one file:</source>
          <target state="translated">파일을 다시 나열하십시오. 이제 하나의 파일에 대해 세 가지 이름이 있습니다.</target>
        </trans-unit>
        <trans-unit id="9322412fae94c4cc8107c93b8280d12fd73444be" translate="yes" xml:space="preserve">
          <source>and non-</source>
          <target state="translated">그리고 비</target>
        </trans-unit>
        <trans-unit id="730aa929a8a637b7b3b7e661e1028ee2394dac7d" translate="yes" xml:space="preserve">
          <source>and not in</source>
          <target state="translated">그리고 안</target>
        </trans-unit>
        <trans-unit id="fc5673f441e70d62f1a957435777ea1ac0f866bb" translate="yes" xml:space="preserve">
          <source>and puts it right after the binding for</source>
          <target state="translated">바인딩 바로 뒤에 넣습니다.</target>
        </trans-unit>
        <trans-unit id="a3201046dba4255789c615c0ff760fc79e071cfa" translate="yes" xml:space="preserve">
          <source>and rebuild Emacs.</source>
          <target state="translated">Emacs를 다시 빌드하십시오.</target>
        </trans-unit>
        <trans-unit id="42fcafa9b2c4cd1a30c3c1d0fedc7b54077cda93" translate="yes" xml:space="preserve">
          <source>and returns it as the vector &lt;code&gt;[?\C-c pf1]&lt;/code&gt;.</source>
          <target state="translated">벡터 &lt;code&gt;[?\C-c pf1]&lt;/code&gt; 로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="542b42542c1c5a98e530f6b091a33f665828b7bc" translate="yes" xml:space="preserve">
          <source>and that both these directories contain a file named</source>
          <target state="translated">이 두 디렉토리 모두</target>
        </trans-unit>
        <trans-unit id="a119cd6caabe412d2f55c15ae37aa618d4468367" translate="yes" xml:space="preserve">
          <source>and the empty string). See &lt;a href=&quot;file-name-expansion#File-Name-Expansion&quot;&gt;File Name Expansion&lt;/a&gt;.</source>
          <target state="translated">및 빈 문자열). &lt;a href=&quot;file-name-expansion#File-Name-Expansion&quot;&gt;파일 이름 확장을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7dde40742210f41aa5c4cb0ace39cab9757ae3df" translate="yes" xml:space="preserve">
          <source>and the following newline or POP DIRECTIONAL FORMATTING (</source>
          <target state="translated">다음 줄 바꿈 또는 POP 방향성 서식 (</target>
        </trans-unit>
        <trans-unit id="27044964c88206a031be8a17de0cff776da43986" translate="yes" xml:space="preserve">
          <source>and the font specification for Chinese GB2312 characters would be this:</source>
          <target state="translated">중국어 GB2312 문자의 글꼴 사양은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fdcb00caab62194c01e9a75d69f4f0623909dc62" translate="yes" xml:space="preserve">
          <source>and the function call &lt;code&gt;(message &quot;Alias for `foo'.&quot;)&lt;/code&gt; both translate to</source>
          <target state="translated">함수 호출 &lt;code&gt;(message &quot;Alias for `foo'.&quot;)&lt;/code&gt; 모두 다음과 같이 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="f5e18da4f46485af0b793cdba87ced182020386f" translate="yes" xml:space="preserve">
          <source>and the host name.</source>
          <target state="translated">및 호스트 이름.</target>
        </trans-unit>
        <trans-unit id="e1d7213cf495cc6c3ad7ccb6629f6ab1ba11d695" translate="yes" xml:space="preserve">
          <source>and the like, where most users would expect the network traffic to be encrypted.</source>
          <target state="translated">대부분의 사용자는 네트워크 트래픽이 암호화되기를 기대합니다.</target>
        </trans-unit>
        <trans-unit id="30f68b839b907eb05d2222e4c8e617690efaa47e" translate="yes" xml:space="preserve">
          <source>and thus calls &lt;code&gt;autoload&lt;/code&gt;.</source>
          <target state="translated">따라서 &lt;code&gt;autoload&lt;/code&gt; 를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="e8fdfe6e409242171acf28647aa76797569670a4" translate="yes" xml:space="preserve">
          <source>and to</source>
          <target state="translated">그리고</target>
        </trans-unit>
        <trans-unit id="0aea8551e6fb9789c6cf22206efffc7c4c276f9d" translate="yes" xml:space="preserve">
          <source>and to add another alist entry one would write</source>
          <target state="translated">또 다른 alist 항목을 추가하려면</target>
        </trans-unit>
        <trans-unit id="3e6feeec00df6ea9e884c63733fb6f584de51395" translate="yes" xml:space="preserve">
          <source>and unset one with</source>
          <target state="translated">다음으로 설정 해제</target>
        </trans-unit>
        <trans-unit id="4979298e8691ebfa825a680550fd002e4f60e986" translate="yes" xml:space="preserve">
          <source>and uses &lt;code&gt;minibuffer-local-completion-map&lt;/code&gt; as its parent keymap.</source>
          <target state="translated">그리고 &lt;code&gt;minibuffer-local-completion-map&lt;/code&gt; 을 부모 키맵으로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="7182596c162f56fa3fb57988c89558b018fd024b" translate="yes" xml:space="preserve">
          <source>and uses &lt;code&gt;minibuffer-local-map&lt;/code&gt; as its parent keymap (see &lt;a href=&quot;text-from-minibuffer#Definition-of-minibuffer_002dlocal_002dmap&quot;&gt;Definition of minibuffer-local-map&lt;/a&gt;).</source>
          <target state="translated">그리고 &lt;code&gt;minibuffer-local-map&lt;/code&gt; 을 부모 키맵으로 사용합니다 ( minibuffer-local-map &lt;a href=&quot;text-from-minibuffer#Definition-of-minibuffer_002dlocal_002dmap&quot;&gt;정의&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="f3f6cf55a5e75a17c89cadc371b8d2e14f373a05" translate="yes" xml:space="preserve">
          <source>and your language environment is multibyte Latin-1, these commands actually bind the multibyte character with code 246, not the byte code 246 (</source>
          <target state="translated">언어 환경은 멀티 바이트 Latin-1입니다.이 명령은 실제로 멀티 바이트 문자를 바이트 코드 246이 아닌 코드 246으로 바인딩합니다 (</target>
        </trans-unit>
        <trans-unit id="e5c6404c4921b47d1046d71c2169ca2a54672bfe" translate="yes" xml:space="preserve">
          <source>any non-alist</source>
          <target state="translated">비동 립 주의자</target>
        </trans-unit>
        <trans-unit id="3c305d671dd1d39b0b5796b00915162f7f25d581" translate="yes" xml:space="preserve">
          <source>anything else</source>
          <target state="translated">다른 것</target>
        </trans-unit>
        <trans-unit id="572d966a5b4c36fcf117481d477439dc0386ea63" translate="yes" xml:space="preserve">
          <source>anything else, &lt;var&gt;form&lt;/var&gt;</source>
          <target state="translated">다른 것, &lt;var&gt;form&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="c22edb7bdbee7d2c2b3c24533d83f4302b3101eb" translate="yes" xml:space="preserve">
          <source>anywhere, will display</source>
          <target state="translated">어디서나 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="db43bff34c78044870bc6b1ae2aa16902bb1bb8a" translate="yes" xml:space="preserve">
          <source>append</source>
          <target state="translated">append</target>
        </trans-unit>
        <trans-unit id="13a85c4d4f0e2098d47edd09be2b2c7b45175208" translate="yes" xml:space="preserve">
          <source>append-to-file</source>
          <target state="translated">append-to-file</target>
        </trans-unit>
        <trans-unit id="69f45da1683c501696ebfa086d25192af3807dc6" translate="yes" xml:space="preserve">
          <source>apply</source>
          <target state="translated">apply</target>
        </trans-unit>
        <trans-unit id="21a1a18787447edabc813af16ac3c2b4adb04f35" translate="yes" xml:space="preserve">
          <source>apply-partially</source>
          <target state="translated">apply-partially</target>
        </trans-unit>
        <trans-unit id="e11c360506fddab2fef56a4ecc82fd830d307db5" translate="yes" xml:space="preserve">
          <source>apropos</source>
          <target state="translated">apropos</target>
        </trans-unit>
        <trans-unit id="23d8e0156062165ca3736e9f1e364d414e1d82d5" translate="yes" xml:space="preserve">
          <source>ar</source>
          <target state="translated">ar</target>
        </trans-unit>
        <trans-unit id="60d78b739ca209160c702be65edde27ccb195df1" translate="yes" xml:space="preserve">
          <source>archive-contents</source>
          <target state="translated">archive-contents</target>
        </trans-unit>
        <trans-unit id="031d16ac7f65a9ae69a6df1abe241ee3349582ce" translate="yes" xml:space="preserve">
          <source>are lost.</source>
          <target state="translated">손실됩니다.</target>
        </trans-unit>
        <trans-unit id="320a6687dbbc9794f90d8a0089a8ab94f17fbaaa" translate="yes" xml:space="preserve">
          <source>are normally generated automatically when Emacs is installed.</source>
          <target state="translated">일반적으로 Emacs가 설치 될 때 자동으로 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="f5d7a5bb9dd91a0afcf8ddcdb2796b1ac45e8af1" translate="yes" xml:space="preserve">
          <source>are the same character. If the terminal can distinguish between them, Emacs conveys the distinction to Lisp programs by representing the former as the integer 9, and the latter as the symbol &lt;code&gt;tab&lt;/code&gt;.</source>
          <target state="translated">같은 캐릭터입니다. 터미널이 그것들을 구별 할 수 있다면, Emacs는 전자를 정수 9로, 후자를 기호 &lt;code&gt;tab&lt;/code&gt; 으로 표현함으로써 Lisp 프로그램에 구별을 전달합니다 .</target>
        </trans-unit>
        <trans-unit id="3070a7ee67e0461aa4678951be934593dbccd410" translate="yes" xml:space="preserve">
          <source>aref</source>
          <target state="translated">aref</target>
        </trans-unit>
        <trans-unit id="666e64488d74b00196677602cd28af2bf11e36a5" translate="yes" xml:space="preserve">
          <source>arrayp</source>
          <target state="translated">arrayp</target>
        </trans-unit>
        <trans-unit id="3d01b15f1ea9f06eaee5805b2c909ec09dcdb415" translate="yes" xml:space="preserve">
          <source>as &amp;lsquo;</source>
          <target state="translated">같이 '</target>
        </trans-unit>
        <trans-unit id="44b2b85ecf80cc5b480b0158de904c01eefa0d24" translate="yes" xml:space="preserve">
          <source>as follows:</source>
          <target state="translated">다음과 같이 :</target>
        </trans-unit>
        <trans-unit id="d09d6a4afb52b443c73d1c619e170ec8fd5815f3" translate="yes" xml:space="preserve">
          <source>as prefix keys appear in the global map, so these prefix keys are always available. Major and minor modes can redefine a key as a prefix by putting a prefix key definition for it in the local map or the minor mode&amp;rsquo;s map. See &lt;a href=&quot;active-keymaps#Active-Keymaps&quot;&gt;Active Keymaps&lt;/a&gt;.</source>
          <target state="translated">접두사 키가 전역 맵에 표시되므로 이러한 접두사 키를 항상 사용할 수 있습니다. 메이저 및 마이너 모드는 로컬 맵이나 마이너 모드의 맵에 접두사 키 정의를 넣어 키를 접두사로 재정의 할 수 있습니다. &lt;a href=&quot;active-keymaps#Active-Keymaps&quot;&gt;활성 키맵을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="34349d0fc5baeec98ff3df564ce62b47e6bea2af" translate="yes" xml:space="preserve">
          <source>as the prefix sets the &lt;var&gt;count&lt;/var&gt; to a non-&lt;code&gt;nil&lt;/code&gt; list, while typing</source>
          <target state="translated">접두사가 &lt;var&gt;count&lt;/var&gt; 를 &lt;code&gt;nil&lt;/code&gt; 이 아닌 목록으로 설정하고 입력하는 동안</target>
        </trans-unit>
        <trans-unit id="a6114f67b2de090215f5c7c259fdc3818d50681b" translate="yes" xml:space="preserve">
          <source>as well as various versions of Emacs, you can use conditional compilation based on &lt;code&gt;EMACS_MAJOR_VERSION&lt;/code&gt;.</source>
          <target state="translated">다양한 버전의 Emacs뿐만 아니라 &lt;code&gt;EMACS_MAJOR_VERSION&lt;/code&gt; 기반의 조건부 컴파일을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3887c4a64884e62db83a9909df6803b978531acf" translate="yes" xml:space="preserve">
          <source>ascii-case-table</source>
          <target state="translated">ascii-case-table</target>
        </trans-unit>
        <trans-unit id="11aaaef3be5e5905c02f4c7d9b02a2b9a57af3e9" translate="yes" xml:space="preserve">
          <source>aset</source>
          <target state="translated">aset</target>
        </trans-unit>
        <trans-unit id="cb101192dff2cc1ddd0272f73de307c89bebc181" translate="yes" xml:space="preserve">
          <source>ash</source>
          <target state="translated">ash</target>
        </trans-unit>
        <trans-unit id="f6b3e9a1435d3f432e7a6b9003583871fcb26de3" translate="yes" xml:space="preserve">
          <source>asin</source>
          <target state="translated">asin</target>
        </trans-unit>
        <trans-unit id="76e475c2f42f9153c529c710aeb95930ffaac123" translate="yes" xml:space="preserve">
          <source>ask-user-about-lock</source>
          <target state="translated">ask-user-about-lock</target>
        </trans-unit>
        <trans-unit id="a4355f66d0ac2c1d213ce5eb9f7904dc6fa6b64e" translate="yes" xml:space="preserve">
          <source>ask-user-about-supersession-threat</source>
          <target state="translated">ask-user-about-supersession-threat</target>
        </trans-unit>
        <trans-unit id="fb5c548c8f8558c093ed35aa916c97e92b798c49" translate="yes" xml:space="preserve">
          <source>assoc</source>
          <target state="translated">assoc</target>
        </trans-unit>
        <trans-unit id="8484c696921fa3e517d6baaf6ee1d76e79f966b5" translate="yes" xml:space="preserve">
          <source>assoc-default</source>
          <target state="translated">assoc-default</target>
        </trans-unit>
        <trans-unit id="81786bb5f15477867b2dfe035558a080158a8aa7" translate="yes" xml:space="preserve">
          <source>assoc-delete-all</source>
          <target state="translated">assoc-delete-all</target>
        </trans-unit>
        <trans-unit id="5b2c40d54854f57f8ba04bfbe584ce1c26639436" translate="yes" xml:space="preserve">
          <source>assoc-string</source>
          <target state="translated">assoc-string</target>
        </trans-unit>
        <trans-unit id="aa94d9528188a0e7156511d841b65d403e2ec067" translate="yes" xml:space="preserve">
          <source>assq</source>
          <target state="translated">assq</target>
        </trans-unit>
        <trans-unit id="a22d80138d288e3ac044941672238669501f7ff2" translate="yes" xml:space="preserve">
          <source>assq-delete-all</source>
          <target state="translated">assq-delete-all</target>
        </trans-unit>
        <trans-unit id="ccaccb0a8dab85a08ac36168fa0a2e902bf347fb" translate="yes" xml:space="preserve">
          <source>assuming the &lt;code&gt;setq&lt;/code&gt; form shown above has already been executed.</source>
          <target state="translated">위에 표시된 &lt;code&gt;setq&lt;/code&gt; 형식이 이미 실행 되었다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="a42ff3be78d0fe4a2319fb4bf641bf1b4f309630" translate="yes" xml:space="preserve">
          <source>at command level or to quit a user command would be unpredictable. If you want to permit quitting inside a filter function, bind &lt;code&gt;inhibit-quit&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;. In most cases, the right way to do this is with the macro &lt;code&gt;with-local-quit&lt;/code&gt;. See &lt;a href=&quot;quitting#Quitting&quot;&gt;Quitting&lt;/a&gt;.</source>
          <target state="translated">명령 수준에서 또는 사용자 명령을 종료하는 것은 예측할 수 없습니다. 필터 함수 내에서 종료를 허용하려면 &lt;code&gt;inhibit-quit&lt;/code&gt; 를 &lt;code&gt;nil&lt;/code&gt; 에 바인딩하십시오 . 대부분의 경우이를 수행하는 올바른 방법은 매크로 &lt;code&gt;with-local-quit&lt;/code&gt; 입니다. 참조 &lt;a href=&quot;quitting#Quitting&quot;&gt;끝내기를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fa2df0dd8a0d825ff39335dff8e464257a3d2877" translate="yes" xml:space="preserve">
          <source>at command level or to quit a user command would be unpredictable. If you want to permit quitting inside a sentinel, bind &lt;code&gt;inhibit-quit&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;. In most cases, the right way to do this is with the macro &lt;code&gt;with-local-quit&lt;/code&gt;. See &lt;a href=&quot;quitting#Quitting&quot;&gt;Quitting&lt;/a&gt;.</source>
          <target state="translated">명령 수준에서 또는 사용자 명령을 종료하는 것은 예측할 수 없습니다. 센티넬 내부에서 종료를 허용하려면 &lt;code&gt;inhibit-quit&lt;/code&gt; 를 &lt;code&gt;nil&lt;/code&gt; 에 바인딩하십시오 . 대부분의 경우이를 수행하는 올바른 방법은 매크로 &lt;code&gt;with-local-quit&lt;/code&gt; 입니다. 참조 &lt;a href=&quot;quitting#Quitting&quot;&gt;끝내기를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7688a477de066aadc28f24c02bab1701c61973bf" translate="yes" xml:space="preserve">
          <source>at the bottom of the frame.</source>
          <target state="translated">프레임 하단에 있습니다.</target>
        </trans-unit>
        <trans-unit id="f7a308dc35fefdec5e00fb2608d38aac641c2666" translate="yes" xml:space="preserve">
          <source>at the end of the buffer.</source>
          <target state="translated">버퍼의 끝에.</target>
        </trans-unit>
        <trans-unit id="f077504d04fa1bc96b042497b434fd33fabdf43d" translate="yes" xml:space="preserve">
          <source>atan</source>
          <target state="translated">atan</target>
        </trans-unit>
        <trans-unit id="c6f57180e462a4f1e9de24fbe811cfb2c24a0cf9" translate="yes" xml:space="preserve">
          <source>atom</source>
          <target state="translated">atom</target>
        </trans-unit>
        <trans-unit id="1f73b8fc30c9cb9ddf9834f3ffc47ec38965f3d9" translate="yes" xml:space="preserve">
          <source>auctex</source>
          <target state="translated">auctex</target>
        </trans-unit>
        <trans-unit id="0dc6d3fa47fc7bbafb9a8b9576efc54a3f36b3f3" translate="yes" xml:space="preserve">
          <source>aug-19</source>
          <target state="translated">aug-19</target>
        </trans-unit>
        <trans-unit id="1948926965b9f9c343da0eceb17616fddbad0d67" translate="yes" xml:space="preserve">
          <source>aug-20</source>
          <target state="translated">aug-20</target>
        </trans-unit>
        <trans-unit id="2cca81002b8f10e6dc04f008a2a2ec0648d3e693" translate="yes" xml:space="preserve">
          <source>auto-coding-alist</source>
          <target state="translated">auto-coding-alist</target>
        </trans-unit>
        <trans-unit id="e477e8d5856047ef48d7cb6fa1303bb852e4b206" translate="yes" xml:space="preserve">
          <source>auto-coding-functions</source>
          <target state="translated">auto-coding-functions</target>
        </trans-unit>
        <trans-unit id="f6290e9c62303c3095056c43c7c2ff6d273f4f32" translate="yes" xml:space="preserve">
          <source>auto-coding-regexp-alist</source>
          <target state="translated">auto-coding-regexp-alist</target>
        </trans-unit>
        <trans-unit id="5f2728dd1a8eacd616d0222b00f78d652947fbad" translate="yes" xml:space="preserve">
          <source>auto-fill-chars</source>
          <target state="translated">auto-fill-chars</target>
        </trans-unit>
        <trans-unit id="70ed55af54b85d2777e285be439640cf396b52de" translate="yes" xml:space="preserve">
          <source>auto-fill-function</source>
          <target state="translated">auto-fill-function</target>
        </trans-unit>
        <trans-unit id="c3a37941bf89934f84f657be6ebf344ffab68570" translate="yes" xml:space="preserve">
          <source>auto-mode-alist</source>
          <target state="translated">auto-mode-alist</target>
        </trans-unit>
        <trans-unit id="f5ef034a2ef53539a4f4f51f26cdd95d023e4c14" translate="yes" xml:space="preserve">
          <source>auto-raise-tool-bar-buttons</source>
          <target state="translated">auto-raise-tool-bar-buttons</target>
        </trans-unit>
        <trans-unit id="fde4ad3d56a7e79f11c2c53130aadf276bb81444" translate="yes" xml:space="preserve">
          <source>auto-resize-tool-bars</source>
          <target state="translated">auto-resize-tool-bars</target>
        </trans-unit>
        <trans-unit id="3199abec89bac7a79e7aaf2cbe5ec51f5da61418" translate="yes" xml:space="preserve">
          <source>auto-save-default</source>
          <target state="translated">auto-save-default</target>
        </trans-unit>
        <trans-unit id="ab7b28778729b7d45836e9e39c1e1e3ad2ac1517" translate="yes" xml:space="preserve">
          <source>auto-save-file-name-p</source>
          <target state="translated">auto-save-file-name-p</target>
        </trans-unit>
        <trans-unit id="fdb722369334e14495ed1c6c993b4dc960666f1e" translate="yes" xml:space="preserve">
          <source>auto-save-hook</source>
          <target state="translated">auto-save-hook</target>
        </trans-unit>
        <trans-unit id="94faba19af4b11c77675febd015b426de0c2ed19" translate="yes" xml:space="preserve">
          <source>auto-save-interval</source>
          <target state="translated">auto-save-interval</target>
        </trans-unit>
        <trans-unit id="a06087dc5121c9a59c4babee12870e76f1b368c3" translate="yes" xml:space="preserve">
          <source>auto-save-list-file-name</source>
          <target state="translated">auto-save-list-file-name</target>
        </trans-unit>
        <trans-unit id="6d5edf86412ad58d7bfbd8da64eb0f469ae0b15e" translate="yes" xml:space="preserve">
          <source>auto-save-list-file-prefix</source>
          <target state="translated">auto-save-list-file-prefix</target>
        </trans-unit>
        <trans-unit id="7d39953f6fc7cddd77dbedcd643dc2077241a743" translate="yes" xml:space="preserve">
          <source>auto-save-mode</source>
          <target state="translated">auto-save-mode</target>
        </trans-unit>
        <trans-unit id="b6c26b4607d11d303a26508ba415e54958ec6ece" translate="yes" xml:space="preserve">
          <source>auto-save-timeout</source>
          <target state="translated">auto-save-timeout</target>
        </trans-unit>
        <trans-unit id="dd7cd182262afb5b95c29ada96180a23dc158e31" translate="yes" xml:space="preserve">
          <source>auto-save-visited-file-name</source>
          <target state="translated">auto-save-visited-file-name</target>
        </trans-unit>
        <trans-unit id="b2ec3adbcd777378cb630efcfc1bc6506f7f66af" translate="yes" xml:space="preserve">
          <source>auto-window-vscroll</source>
          <target state="translated">auto-window-vscroll</target>
        </trans-unit>
        <trans-unit id="4f25d09afc26355e099f60888cb6afb436cd27bf" translate="yes" xml:space="preserve">
          <source>autoload</source>
          <target state="translated">autoload</target>
        </trans-unit>
        <trans-unit id="658f4634c6a8746a0ab495ceb870770f2bb86209" translate="yes" xml:space="preserve">
          <source>autoload-do-load</source>
          <target state="translated">autoload-do-load</target>
        </trans-unit>
        <trans-unit id="dd3e054e10fc1da8e24e8f5f09db5512116227ed" translate="yes" xml:space="preserve">
          <source>autoloadp</source>
          <target state="translated">autoloadp</target>
        </trans-unit>
        <trans-unit id="e9d71f5ee7c92d6dc9e92ffdad17b8bd49418f98" translate="yes" xml:space="preserve">
          <source>b</source>
          <target state="translated">b</target>
        </trans-unit>
        <trans-unit id="98f873c77d33d8cd47c21a16b1dd71778f7a510f" translate="yes" xml:space="preserve">
          <source>bFrobnicate buffer:</source>
          <target state="translated">bFrobnicate 버퍼 :</target>
        </trans-unit>
        <trans-unit id="6c0596b8ac609191181a90517d51c0b486f23799" translate="yes" xml:space="preserve">
          <source>ba</source>
          <target state="translated">ba</target>
        </trans-unit>
        <trans-unit id="0bb5e22f6a70b2a917f9374337339eb2b91803ed" translate="yes" xml:space="preserve">
          <source>ba\(na\)*</source>
          <target state="translated">ba\(na\)*</target>
        </trans-unit>
        <trans-unit id="2c15bcf3ec9c3fa99561a3541757a78b08bbfdb4" translate="yes" xml:space="preserve">
          <source>back-to-indentation</source>
          <target state="translated">back-to-indentation</target>
        </trans-unit>
        <trans-unit id="f8cf4c5e990d4d92bfd5726b7dedffe8bccba7b6" translate="yes" xml:space="preserve">
          <source>backtrace</source>
          <target state="translated">backtrace</target>
        </trans-unit>
        <trans-unit id="345cf83ab40ab50fc7c9cc0d303048c6217fdae7" translate="yes" xml:space="preserve">
          <source>backtrace-debug</source>
          <target state="translated">backtrace-debug</target>
        </trans-unit>
        <trans-unit id="8d5e1a7a0ba9554a7b79a17f2948fb8e7a9541ae" translate="yes" xml:space="preserve">
          <source>backtrace-frame</source>
          <target state="translated">backtrace-frame</target>
        </trans-unit>
        <trans-unit id="ce5e424a11c9eab73fbe3bfc03de728f69601d55" translate="yes" xml:space="preserve">
          <source>backtrace-output</source>
          <target state="translated">backtrace-output</target>
        </trans-unit>
        <trans-unit id="d039d4c6ba9c0dab8f07e4cf3b238495525fba74" translate="yes" xml:space="preserve">
          <source>backup-buffer</source>
          <target state="translated">backup-buffer</target>
        </trans-unit>
        <trans-unit id="7eeb79111469f50397b0ebf778c00df225153e12" translate="yes" xml:space="preserve">
          <source>backup-by-copying</source>
          <target state="translated">backup-by-copying</target>
        </trans-unit>
        <trans-unit id="24a2a991657de8f5e319feca9be49e261b27796f" translate="yes" xml:space="preserve">
          <source>backup-by-copying-when-linked</source>
          <target state="translated">backup-by-copying-when-linked</target>
        </trans-unit>
        <trans-unit id="99078d8f5dee485ea7a63ac67f2436caca9b3d3c" translate="yes" xml:space="preserve">
          <source>backup-by-copying-when-mismatch</source>
          <target state="translated">backup-by-copying-when-mismatch</target>
        </trans-unit>
        <trans-unit id="bb27c170241cd8793926d5932ed11a8e4a8d4040" translate="yes" xml:space="preserve">
          <source>backup-by-copying-when-privileged-mismatch</source>
          <target state="translated">backup-by-copying-when-privileged-mismatch</target>
        </trans-unit>
        <trans-unit id="54c0b8a350979b072c9837799ccca54926dd5072" translate="yes" xml:space="preserve">
          <source>backup-directory-alist</source>
          <target state="translated">backup-directory-alist</target>
        </trans-unit>
        <trans-unit id="be07c94a6e00e0fddf5c1a60d31b4ebb852d07a0" translate="yes" xml:space="preserve">
          <source>backup-enable-predicate</source>
          <target state="translated">backup-enable-predicate</target>
        </trans-unit>
        <trans-unit id="cfd887a750b212ef7344c4fb28f9e1f33498c8b6" translate="yes" xml:space="preserve">
          <source>backup-file-name-p</source>
          <target state="translated">backup-file-name-p</target>
        </trans-unit>
        <trans-unit id="b6e5ad5b61698a536fe13a7408bd2fcbb21be977" translate="yes" xml:space="preserve">
          <source>backup-inhibited</source>
          <target state="translated">backup-inhibited</target>
        </trans-unit>
        <trans-unit id="fcbc2c188ed7acf286457e9e1ea264bf07915d42" translate="yes" xml:space="preserve">
          <source>backward-button</source>
          <target state="translated">backward-button</target>
        </trans-unit>
        <trans-unit id="f35aa8a3d2c646ab16fe945a015ac0d4f5944541" translate="yes" xml:space="preserve">
          <source>backward-char</source>
          <target state="translated">backward-char</target>
        </trans-unit>
        <trans-unit id="ebefc160d47abebea58fa3053fc11b1571931af7" translate="yes" xml:space="preserve">
          <source>backward-delete-char-untabify</source>
          <target state="translated">backward-delete-char-untabify</target>
        </trans-unit>
        <trans-unit id="483980313584643676d2e3d78a03789e4b61e192" translate="yes" xml:space="preserve">
          <source>backward-delete-char-untabify-method</source>
          <target state="translated">backward-delete-char-untabify-method</target>
        </trans-unit>
        <trans-unit id="16b277053f23d56e63db08da23db2c572886aeaf" translate="yes" xml:space="preserve">
          <source>backward-list</source>
          <target state="translated">backward-list</target>
        </trans-unit>
        <trans-unit id="47952e9d9dd5d84ed1494cfd1dbed2922c583f28" translate="yes" xml:space="preserve">
          <source>backward-prefix-chars</source>
          <target state="translated">backward-prefix-chars</target>
        </trans-unit>
        <trans-unit id="18ba58858414838d1e52aaf98905bae91cfe9508" translate="yes" xml:space="preserve">
          <source>backward-sexp</source>
          <target state="translated">backward-sexp</target>
        </trans-unit>
        <trans-unit id="7910e79081c0256e062f508d705fa6223be45436" translate="yes" xml:space="preserve">
          <source>backward-to-indentation</source>
          <target state="translated">backward-to-indentation</target>
        </trans-unit>
        <trans-unit id="9b8d5a34cc53ede3ca46c415490186b23d022183" translate="yes" xml:space="preserve">
          <source>backward-up-list</source>
          <target state="translated">backward-up-list</target>
        </trans-unit>
        <trans-unit id="71fd16ceda4af3b749b5a00f2c6f2cf1cbeac808" translate="yes" xml:space="preserve">
          <source>backward-word</source>
          <target state="translated">backward-word</target>
        </trans-unit>
        <trans-unit id="8a70e4f46674745de32ba105b000754ba5614ac0" translate="yes" xml:space="preserve">
          <source>backward-word-strictly</source>
          <target state="translated">backward-word-strictly</target>
        </trans-unit>
        <trans-unit id="2147603dc2f627c2ef0364fade52fb370eed4bc5" translate="yes" xml:space="preserve">
          <source>balance-windows</source>
          <target state="translated">balance-windows</target>
        </trans-unit>
        <trans-unit id="a4ad22a50eddc93b54edfd9ec035dc1457ce9592" translate="yes" xml:space="preserve">
          <source>balance-windows-area</source>
          <target state="translated">balance-windows-area</target>
        </trans-unit>
        <trans-unit id="8bec0406497ccf8bb93933005b504d85785dfc14" translate="yes" xml:space="preserve">
          <source>ball</source>
          <target state="translated">ball</target>
        </trans-unit>
        <trans-unit id="788c3efd44143927b270006db1e8b11e8d3cb837" translate="yes" xml:space="preserve">
          <source>ball boy</source>
          <target state="translated">볼 보이</target>
        </trans-unit>
        <trans-unit id="14df8d9ce9d6f26a9909e08b9b687c74803a731a" translate="yes" xml:space="preserve">
          <source>ball boyee</source>
          <target state="translated">볼 보이이</target>
        </trans-unit>
        <trans-unit id="8b9dc552137abd17e4da88b214a1d2914b57f2b9" translate="yes" xml:space="preserve">
          <source>ball. Boy!</source>
          <target state="translated">공. 소년!</target>
        </trans-unit>
        <trans-unit id="99e4f5b9e5272cc0b5ff5f29909fd508cd49e5f2" translate="yes" xml:space="preserve">
          <source>balls</source>
          <target state="translated">balls</target>
        </trans-unit>
        <trans-unit id="9f391cd473a4879e4e4c34e3e0750eacc9b6332d" translate="yes" xml:space="preserve">
          <source>balls boy</source>
          <target state="translated">공 소년</target>
        </trans-unit>
        <trans-unit id="d33a73667de58cb2066b7b2e57d11d5fffd85ef3" translate="yes" xml:space="preserve">
          <source>bana</source>
          <target state="translated">bana</target>
        </trans-unit>
        <trans-unit id="250e77f12a5ab6972a0895d290c4792f0a326ea8" translate="yes" xml:space="preserve">
          <source>banana</source>
          <target state="translated">banana</target>
        </trans-unit>
        <trans-unit id="46595eb6f5fe1cb2ec74de2d2e9929f27fe7c771" translate="yes" xml:space="preserve">
          <source>bananana</source>
          <target state="translated">bananana</target>
        </trans-unit>
        <trans-unit id="62cdb7020ff920e5aa642c3d4066950dd1f01f4d" translate="yes" xml:space="preserve">
          <source>bar</source>
          <target state="translated">bar</target>
        </trans-unit>
        <trans-unit id="dbb92031d6688f26f429cd909257e6921d58cca8" translate="yes" xml:space="preserve">
          <source>barf-if-buffer-read-only</source>
          <target state="translated">barf-if-buffer-read-only</target>
        </trans-unit>
        <trans-unit id="289d9b777c2b4341b4d94e681baeeaaa7406802d" translate="yes" xml:space="preserve">
          <source>barx</source>
          <target state="translated">barx</target>
        </trans-unit>
        <trans-unit id="e95c0d71e5a737bfc209f7013e45e233a7480a96" translate="yes" xml:space="preserve">
          <source>base-name</source>
          <target state="translated">base-name</target>
        </trans-unit>
        <trans-unit id="da3886fef56605de840fe573e5666e880f0ab5c6" translate="yes" xml:space="preserve">
          <source>base64-decode-region</source>
          <target state="translated">base64-decode-region</target>
        </trans-unit>
        <trans-unit id="6172a725d9bd14ddd86409d1a845041704c3bf40" translate="yes" xml:space="preserve">
          <source>base64-decode-string</source>
          <target state="translated">base64-decode-string</target>
        </trans-unit>
        <trans-unit id="0be8ae738036faeef7f39babec0e879ce288a177" translate="yes" xml:space="preserve">
          <source>base64-encode-region</source>
          <target state="translated">base64-encode-region</target>
        </trans-unit>
        <trans-unit id="06e6fcd533f50151a38d0240221a2f100ef5a81d" translate="yes" xml:space="preserve">
          <source>base64-encode-string</source>
          <target state="translated">base64-encode-string</target>
        </trans-unit>
        <trans-unit id="f0891966f29cf887f37d8e1d92a9b1ac22e4e216" translate="yes" xml:space="preserve">
          <source>base64url-encode-region</source>
          <target state="translated">base64url-encode-region</target>
        </trans-unit>
        <trans-unit id="c39bfc804dd6ff7e5d1f689a32613295717a0a75" translate="yes" xml:space="preserve">
          <source>base64url-encode-string</source>
          <target state="translated">base64url-encode-string</target>
        </trans-unit>
        <trans-unit id="84646782ce2781372868d01daa89942d297164c7" translate="yes" xml:space="preserve">
          <source>baseline, positive upward.</source>
          <target state="translated">기준선, 양의 상향.</target>
        </trans-unit>
        <trans-unit id="5e6e16d34eae46677b0f383fa69022edb5503a7d" translate="yes" xml:space="preserve">
          <source>batch-byte-compile</source>
          <target state="translated">batch-byte-compile</target>
        </trans-unit>
        <trans-unit id="ccfca0309ba27c56755a8011f91e62c41fdc9745" translate="yes" xml:space="preserve">
          <source>baud-rate</source>
          <target state="translated">baud-rate</target>
        </trans-unit>
        <trans-unit id="94bbf63ba980be54380e5e3fae165b5c312ca7d3" translate="yes" xml:space="preserve">
          <source>baz/foo.bar</source>
          <target state="translated">baz/foo.bar</target>
        </trans-unit>
        <trans-unit id="2993adfde2f08c972d4bdfee44cd9f6994b8d645" translate="yes" xml:space="preserve">
          <source>because it will stop reading keys right after</source>
          <target state="translated">바로 후에 키 읽기를 중지하기 때문에</target>
        </trans-unit>
        <trans-unit id="793cef3c7c9c6a9e33ab0278aff49b5f9c34819e" translate="yes" xml:space="preserve">
          <source>because that action was applicable and had the highest precedence among all applicable actions.</source>
          <target state="translated">해당 조치가 적용 가능하고 적용 가능한 모든 조치 중에서 가장 높은 우선 순위를 가졌기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="a3d6b94fac99dd59a3505e2e72e276c10b719c12" translate="yes" xml:space="preserve">
          <source>because this is not portable. Always use &lt;code&gt;file-name-as-directory&lt;/code&gt;.</source>
          <target state="translated">이것은 휴대용이 아니기 때문입니다. 항상 &lt;code&gt;file-name-as-directory&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="38d8fe5c3796e1b93ceb59dcdb879c010507e64a" translate="yes" xml:space="preserve">
          <source>beep</source>
          <target state="translated">beep</target>
        </trans-unit>
        <trans-unit id="f13e68e8e53889d720f8b26eb3d6b188e9c48c48" translate="yes" xml:space="preserve">
          <source>before-change-functions</source>
          <target state="translated">before-change-functions</target>
        </trans-unit>
        <trans-unit id="44f5a3d6efdcb2797c96ba31e6cf4a6e872d66b2" translate="yes" xml:space="preserve">
          <source>before-hack-local-variables-hook</source>
          <target state="translated">before-hack-local-variables-hook</target>
        </trans-unit>
        <trans-unit id="e5d1efe91a85851a226aa712ad5749ceefb6a47c" translate="yes" xml:space="preserve">
          <source>before-init-hook</source>
          <target state="translated">before-init-hook</target>
        </trans-unit>
        <trans-unit id="b65f6aebecdafa7ca869c6575e5c05e9846ec3cb" translate="yes" xml:space="preserve">
          <source>before-make-frame-hook</source>
          <target state="translated">before-make-frame-hook</target>
        </trans-unit>
        <trans-unit id="7f989cf856f85948249d5befcf865ba5df5d1a12" translate="yes" xml:space="preserve">
          <source>before-revert-hook</source>
          <target state="translated">before-revert-hook</target>
        </trans-unit>
        <trans-unit id="8e8b1d0f110b050a8bf84826caa7f347c11074ca" translate="yes" xml:space="preserve">
          <source>before-save-hook</source>
          <target state="translated">before-save-hook</target>
        </trans-unit>
        <trans-unit id="9a6ab0ee3e8ca57ccc2691576a659add71810df4" translate="yes" xml:space="preserve">
          <source>beginning-of-buffer</source>
          <target state="translated">beginning-of-buffer</target>
        </trans-unit>
        <trans-unit id="a1b9107e42b217f36c7450a7b7a33000479cf89f" translate="yes" xml:space="preserve">
          <source>beginning-of-defun</source>
          <target state="translated">beginning-of-defun</target>
        </trans-unit>
        <trans-unit id="c248d5a838d8a1fb10bc74b8ef3f4127c3f1cde1" translate="yes" xml:space="preserve">
          <source>beginning-of-defun-function</source>
          <target state="translated">beginning-of-defun-function</target>
        </trans-unit>
        <trans-unit id="0c0ba84fc6473bda64913099025a1e8f1b2561e1" translate="yes" xml:space="preserve">
          <source>beginning-of-line</source>
          <target state="translated">beginning-of-line</target>
        </trans-unit>
        <trans-unit id="fc38e4aeb7a5b66c5616d1fa21a41af646fb7594" translate="yes" xml:space="preserve">
          <source>benchmark</source>
          <target state="translated">benchmark</target>
        </trans-unit>
        <trans-unit id="3ca051ebb35d46f4efe134fda784712cf3e55213" translate="yes" xml:space="preserve">
          <source>benchmark.el</source>
          <target state="translated">benchmark.el</target>
        </trans-unit>
        <trans-unit id="f66723c07f9f3c00e7720198e32939be417b2223" translate="yes" xml:space="preserve">
          <source>bidi-class</source>
          <target state="translated">bidi-class</target>
        </trans-unit>
        <trans-unit id="fac0f929ad6fe032b202b5fb48b04926d2f98fb5" translate="yes" xml:space="preserve">
          <source>bidi-display-reordering</source>
          <target state="translated">bidi-display-reordering</target>
        </trans-unit>
        <trans-unit id="2dba00ad4d052adb6e55eda7bee402b6e32ba8ad" translate="yes" xml:space="preserve">
          <source>bidi-find-overridden-directionality</source>
          <target state="translated">bidi-find-overridden-directionality</target>
        </trans-unit>
        <trans-unit id="cd4bd7ad008d2751f3a785520c26e7121d2fd2e4" translate="yes" xml:space="preserve">
          <source>bidi-paragraph-direction</source>
          <target state="translated">bidi-paragraph-direction</target>
        </trans-unit>
        <trans-unit id="90f02d5835146ab3efbcd660d8357f6341916726" translate="yes" xml:space="preserve">
          <source>bidi-paragraph-separate-re</source>
          <target state="translated">bidi-paragraph-separate-re</target>
        </trans-unit>
        <trans-unit id="911e1e938be7ff04b84e1a9ecc08ed88b5f8d552" translate="yes" xml:space="preserve">
          <source>bidi-paragraph-start-re</source>
          <target state="translated">bidi-paragraph-start-re</target>
        </trans-unit>
        <trans-unit id="b19e181a27a49cd6714d7083e18308093bb8c21f" translate="yes" xml:space="preserve">
          <source>bidi-string-mark-left-to-right</source>
          <target state="translated">bidi-string-mark-left-to-right</target>
        </trans-unit>
        <trans-unit id="bf2c21e7a88fb42c0d1eb00e0d25db8df70a7bc3" translate="yes" xml:space="preserve">
          <source>bignump</source>
          <target state="translated">bignump</target>
        </trans-unit>
        <trans-unit id="b77e52035f3b00d07c6f7889d4873c8ebdf6ca96" translate="yes" xml:space="preserve">
          <source>binary64 floating point format, which is standardized by &lt;a href=&quot;https://standards.ieee.org/standard/754-2019.html&quot;&gt;IEEE Std 754-2019&lt;/a&gt; and is discussed further in David Goldberg&amp;rsquo;s paper &amp;ldquo;&lt;a href=&quot;https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&quot;&gt;What Every Computer Scientist Should Know About Floating-Point Arithmetic&lt;/a&gt;&amp;rdquo;. On modern platforms, floating-point operations follow the IEEE-754 standard closely; however, results are not always rounded correctly on some obsolescent platforms, notably 32-bit x86.</source>
          <target state="translated">이진 64 부동 소수점 형식은 &lt;a href=&quot;https://standards.ieee.org/standard/754-2019.html&quot;&gt;IEEE Std 754-2019에&lt;/a&gt; 의해 표준화되고 David Goldberg의 논문&amp;ldquo; &lt;a href=&quot;https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&quot;&gt;모든 컴퓨터 과학자가 부동 소수점 산술에 대해 알아야 할 사항&lt;/a&gt; &amp;rdquo;에서 자세히 설명 합니다. 최신 플랫폼에서 부동 소수점 연산은 IEEE-754 표준을 밀접하게 따릅니다. 그러나 일부 오래된 플랫폼, 특히 32 비트 x86에서는 결과가 항상 올바르게 반올림되지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="d7f50d9b790ead41cb8993a8965bc8e7e63b5e67" translate="yes" xml:space="preserve">
          <source>bindat-get-field</source>
          <target state="translated">bindat-get-field</target>
        </trans-unit>
        <trans-unit id="f334803ef60b614055cad0e1db66d1fb90611e70" translate="yes" xml:space="preserve">
          <source>bindat-ip-to-string</source>
          <target state="translated">bindat-ip-to-string</target>
        </trans-unit>
        <trans-unit id="dd1b4313fae72c763a08a6c86211acf68d720b33" translate="yes" xml:space="preserve">
          <source>bindat-length</source>
          <target state="translated">bindat-length</target>
        </trans-unit>
        <trans-unit id="822dd3931e1f2fe9e5206aa1a81c56c44bd6ed5e" translate="yes" xml:space="preserve">
          <source>bindat-pack</source>
          <target state="translated">bindat-pack</target>
        </trans-unit>
        <trans-unit id="3a01c7a09eb715a3ea323bd05808eece290cc01a" translate="yes" xml:space="preserve">
          <source>bindat-unpack</source>
          <target state="translated">bindat-unpack</target>
        </trans-unit>
        <trans-unit id="7bc6cf8d4a7054e8dc938bac7e0c1fc0c5e89051" translate="yes" xml:space="preserve">
          <source>binds &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; to the first two actual arguments, which are required. If one or two more arguments are provided, &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; are bound to them respectively; any arguments after the first four are collected into a list and &lt;code&gt;e&lt;/code&gt; is bound to that list. Thus, if there are only two arguments, &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt; and &lt;code&gt;e&lt;/code&gt; are &lt;code&gt;nil&lt;/code&gt;; if two or three arguments, &lt;code&gt;d&lt;/code&gt; and &lt;code&gt;e&lt;/code&gt; are &lt;code&gt;nil&lt;/code&gt;; if four arguments or fewer, &lt;code&gt;e&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;. Note that exactly five arguments with an explicit &lt;code&gt;nil&lt;/code&gt; argument provided for &lt;code&gt;e&lt;/code&gt; will cause that &lt;code&gt;nil&lt;/code&gt; argument to be passed as a list with one element, &lt;code&gt;(nil)&lt;/code&gt;, as with any other single value for &lt;code&gt;e&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; 와 &lt;code&gt;b&lt;/code&gt; 를 필요한 처음 두 개의 실제 인수에 바인딩 합니다. 하나 또는 두 개의 인수가 더 제공되면 &lt;code&gt;c&lt;/code&gt; 와 &lt;code&gt;d&lt;/code&gt; 가 각각 바인딩됩니다. 처음 4 개 이후의 모든 인수는 목록으로 수집되고 &lt;code&gt;e&lt;/code&gt; 는 해당 목록에 바인딩됩니다. 따라서 인수가 두 개뿐이면 &lt;code&gt;c&lt;/code&gt; , &lt;code&gt;d&lt;/code&gt; 및 &lt;code&gt;e&lt;/code&gt; 는 &lt;code&gt;nil&lt;/code&gt; 입니다 . 두 개 또는 세 개의 인수 인 경우 &lt;code&gt;d&lt;/code&gt; 와 &lt;code&gt;e&lt;/code&gt; 는 &lt;code&gt;nil&lt;/code&gt; 입니다 . 인수가 4 개 이하이면 &lt;code&gt;e&lt;/code&gt; 는 &lt;code&gt;nil&lt;/code&gt; 입니다. 명시 적 &lt;code&gt;nil&lt;/code&gt; 이있는 정확히 5 개의 인수제공된 인수 &lt;code&gt;e&lt;/code&gt; 유발한다 &lt;code&gt;nil&lt;/code&gt; 인수는 하나 개의 요소로 목록으로 전달되는 &lt;code&gt;(nil)&lt;/code&gt; 에 대한 다른 하나의 값과 마찬가지로, &lt;code&gt;e&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b21b2ad2e55b4f4c18f5244a49abc3022e0d4307" translate="yes" xml:space="preserve">
          <source>bit is set for both others and group, and the sticky bit is set.</source>
          <target state="translated">다른 사람과 그룹 모두에 대해 비트가 설정되고 고정 비트가 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="5733a76950d4ffcf3d885cd8b562f7afc97e79d6" translate="yes" xml:space="preserve">
          <source>bitmap-spec-p</source>
          <target state="translated">bitmap-spec-p</target>
        </trans-unit>
        <trans-unit id="466bc8cef3e71de796ec483e212724a2c2044c68" translate="yes" xml:space="preserve">
          <source>black</source>
          <target state="translated">black</target>
        </trans-unit>
        <trans-unit id="43dba1f918d507717793447d9d3642c0b933f876" translate="yes" xml:space="preserve">
          <source>blink-cursor-alist</source>
          <target state="translated">blink-cursor-alist</target>
        </trans-unit>
        <trans-unit id="a104ae1ae162413d29ff405c941795a6bce11a7a" translate="yes" xml:space="preserve">
          <source>blink-matching-delay</source>
          <target state="translated">blink-matching-delay</target>
        </trans-unit>
        <trans-unit id="defe4780459134ce5aff4a3083afe440928367d3" translate="yes" xml:space="preserve">
          <source>blink-matching-open</source>
          <target state="translated">blink-matching-open</target>
        </trans-unit>
        <trans-unit id="cf451154dbabadfd6aad6ecedb4a5dc16273fae9" translate="yes" xml:space="preserve">
          <source>blink-matching-paren</source>
          <target state="translated">blink-matching-paren</target>
        </trans-unit>
        <trans-unit id="697240338e7779ea86c6fd8dfdec21f640f1c147" translate="yes" xml:space="preserve">
          <source>blink-matching-paren-distance</source>
          <target state="translated">blink-matching-paren-distance</target>
        </trans-unit>
        <trans-unit id="a78d6893ac34bc742d1eecd3cfce7ecaa28dfbe6" translate="yes" xml:space="preserve">
          <source>blink-paren-function</source>
          <target state="translated">blink-paren-function</target>
        </trans-unit>
        <trans-unit id="009c8881d699229bd395f09fa16c5ff619f3aed6" translate="yes" xml:space="preserve">
          <source>bobp</source>
          <target state="translated">bobp</target>
        </trans-unit>
        <trans-unit id="f2eeb85b41f624b0692099c9f0bf0b67b24ab308" translate="yes" xml:space="preserve">
          <source>bolp</source>
          <target state="translated">bolp</target>
        </trans-unit>
        <trans-unit id="5d7d7dc8983bd1c074e5c119186c00bfa1dea154" translate="yes" xml:space="preserve">
          <source>bool-vector</source>
          <target state="translated">bool-vector</target>
        </trans-unit>
        <trans-unit id="8fe30276046678da8e61fa9b269bc4726febc141" translate="yes" xml:space="preserve">
          <source>bool-vector-count-consecutive</source>
          <target state="translated">bool-vector-count-consecutive</target>
        </trans-unit>
        <trans-unit id="d99dc236052eb618bb29404d9709c59b4adfb183" translate="yes" xml:space="preserve">
          <source>bool-vector-count-population</source>
          <target state="translated">bool-vector-count-population</target>
        </trans-unit>
        <trans-unit id="746259cd494b147d7b71edb02f931ed78047d8b4" translate="yes" xml:space="preserve">
          <source>bool-vector-exclusive-or</source>
          <target state="translated">bool-vector-exclusive-or</target>
        </trans-unit>
        <trans-unit id="5a9a5349a722c37d30537dd4dd0d3423806d0660" translate="yes" xml:space="preserve">
          <source>bool-vector-intersection</source>
          <target state="translated">bool-vector-intersection</target>
        </trans-unit>
        <trans-unit id="599d4cd4caa4548dcaffde5f20d2cd4d69dcb966" translate="yes" xml:space="preserve">
          <source>bool-vector-not</source>
          <target state="translated">bool-vector-not</target>
        </trans-unit>
        <trans-unit id="3a98504bbe671c6bafc94a5da752398791874b4a" translate="yes" xml:space="preserve">
          <source>bool-vector-p</source>
          <target state="translated">bool-vector-p</target>
        </trans-unit>
        <trans-unit id="3b237ab398028e560bed4ce868b2109294b975e1" translate="yes" xml:space="preserve">
          <source>bool-vector-set-difference</source>
          <target state="translated">bool-vector-set-difference</target>
        </trans-unit>
        <trans-unit id="907edaa23d619fb67ec8250956afff6d18cbd527" translate="yes" xml:space="preserve">
          <source>bool-vector-subsetp</source>
          <target state="translated">bool-vector-subsetp</target>
        </trans-unit>
        <trans-unit id="936cd9d2984681998c36e58e5278e406e38f5daf" translate="yes" xml:space="preserve">
          <source>bool-vector-union</source>
          <target state="translated">bool-vector-union</target>
        </trans-unit>
        <trans-unit id="22e8129cee15712c1431f81b4bd653368c6d75cd" translate="yes" xml:space="preserve">
          <source>booleanp</source>
          <target state="translated">booleanp</target>
        </trans-unit>
        <trans-unit id="3c71cc99d2fc1c12a3d3e1b27e448ca612a89a1d" translate="yes" xml:space="preserve">
          <source>bootstrap</source>
          <target state="translated">bootstrap</target>
        </trans-unit>
        <trans-unit id="6fec8e1be05965245e145b2c190eb6ae6293d43f" translate="yes" xml:space="preserve">
          <source>bootstrap-emacs.pdmp</source>
          <target state="translated">bootstrap-emacs.pdmp</target>
        </trans-unit>
        <trans-unit id="1279cfb5998f3b589a7f02558880240d85885666" translate="yes" xml:space="preserve">
          <source>boundp</source>
          <target state="translated">boundp</target>
        </trans-unit>
        <trans-unit id="d733442bbada420840556026d804c7be31b9a42c" translate="yes" xml:space="preserve">
          <source>buffer (using Lisp Interaction mode) is a sparse keymap in which the entry for</source>
          <target state="translated">버퍼 (Lisp 상호 작용 모드 사용)는 다음 항목에 대한 항목이있는 희소 키맵입니다.</target>
        </trans-unit>
        <trans-unit id="58f21b4d7e3add27f74d2a6576161142083474b8" translate="yes" xml:space="preserve">
          <source>buffer directly and wants to ensure that it exists should use the function &lt;code&gt;messages-buffer&lt;/code&gt;.</source>
          <target state="translated">직접 버퍼링하고 그것이 존재하는지 확인하려면 &lt;code&gt;messages-buffer&lt;/code&gt; 함수를 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="af42e51fcd451856bb84a262257dba30345872ad" translate="yes" xml:space="preserve">
          <source>buffer does not call these functions, and neither do certain internal buffer changes, such as changes in buffers created by Emacs internally for certain jobs, that should not be visible to Lisp programs.</source>
          <target state="translated">buffer는 이러한 함수를 호출하지 않으며, Lisp 프로그램에서 볼 수없는 특정 작업을 위해 내부적으로 Emacs에 의해 생성 된 버퍼의 변경과 같은 특정 내부 버퍼 변경도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cbbc622444327fd3d2997a3e1ebfd2f6a5a6c679" translate="yes" xml:space="preserve">
          <source>buffer exists and is empty, it inserts &lt;code&gt;(substitute-command-keys initial-scratch-message)&lt;/code&gt; into that buffer.</source>
          <target state="translated">버퍼가 존재하고 비어 있으면 해당 버퍼에 &lt;code&gt;(substitute-command-keys initial-scratch-message)&lt;/code&gt; 삽입합니다.</target>
        </trans-unit>
        <trans-unit id="ddc2bf20ceb958bc5260dc360c155b1d09f99316" translate="yes" xml:space="preserve">
          <source>buffer is &lt;code&gt;(&quot;:%s&quot;)&lt;/code&gt;, which allows the shell to display its status along with the major mode as: &amp;lsquo;</source>
          <target state="translated">buffer is &lt;code&gt;(&quot;:%s&quot;)&lt;/code&gt; , 쉘이 주 모드와 함께 상태를 다음과 같이 표시 할 수 있도록합니다. '</target>
        </trans-unit>
        <trans-unit id="903ddc52cf55d7c93ec03b8faa3a73f8b1231c22" translate="yes" xml:space="preserve">
          <source>buffer is displayed alongside &lt;code&gt;initial-buffer-choice&lt;/code&gt;.</source>
          <target state="translated">buffer는 &lt;code&gt;initial-buffer-choice&lt;/code&gt; 와 함께 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="397ce7c7103a1c54e5ca057446231bc4eae64a16" translate="yes" xml:space="preserve">
          <source>buffer is empty.</source>
          <target state="translated">버퍼가 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a4897ff4f51a834ab02ea3f3a09f8c1a9faf465" translate="yes" xml:space="preserve">
          <source>buffer is killed when you continue execution, and recreated next time it is needed.</source>
          <target state="translated">실행을 계속하면 버퍼가 종료되고 다음에 필요할 때 다시 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="efe858af0aa6b0e93a9a54f8fdaf2cc375d72683" translate="yes" xml:space="preserve">
          <source>buffer should invoke this function before clearing the buffer. The &lt;var&gt;item&lt;/var&gt; argument should have the form &lt;code&gt;(&lt;var&gt;function&lt;/var&gt; . &lt;var&gt;args&lt;/var&gt;)&lt;/code&gt;, where &lt;var&gt;function&lt;/var&gt; is a function to call, with argument list &lt;var&gt;args&lt;/var&gt;, to regenerate the help buffer. The &lt;var&gt;interactive-p&lt;/var&gt; argument is non-&lt;code&gt;nil&lt;/code&gt; if the calling command was invoked interactively; in that case, the stack of items for the</source>
          <target state="translated">버퍼는 버퍼를 지우기 전에이 함수를 호출해야합니다. &lt;var&gt;item&lt;/var&gt; 인수의 형식이 있어야합니다 &lt;code&gt;(&lt;var&gt;function&lt;/var&gt; . &lt;var&gt;args&lt;/var&gt;)&lt;/code&gt; , &lt;var&gt;function&lt;/var&gt; 인수 목록으로 호출하는 기능입니다 &lt;var&gt;args&lt;/var&gt; 도움말 버퍼를 다시 생성. &lt;var&gt;interactive-p&lt;/var&gt; 인수는 비입니다 &lt;code&gt;nil&lt;/code&gt; 호출 명령을 대화식으로 호출 된 경우; 이 경우에 대한 항목 스택</target>
        </trans-unit>
        <trans-unit id="b483d433c36187b1adf5ea032bc54e899009cc8d" translate="yes" xml:space="preserve">
          <source>buffer so that the user can refer back to them. This includes all the messages that are output with &lt;code&gt;message&lt;/code&gt;. By default, this buffer is read-only and uses the major mode &lt;code&gt;messages-buffer-mode&lt;/code&gt;. Nothing prevents the user from killing the</source>
          <target state="translated">사용자가 다시 참조 할 수 있도록 버퍼링합니다. 여기에는 &lt;code&gt;message&lt;/code&gt; 와 함께 출력되는 모든 메시지가 포함됩니다 . 기본적으로이 버퍼는 읽기 전용이며 주 모드 &lt;code&gt;messages-buffer-mode&lt;/code&gt; 를 사용합니다 . 사용자가</target>
        </trans-unit>
        <trans-unit id="d7a56994331d66dc471a526995820f657450d1fd" translate="yes" xml:space="preserve">
          <source>buffer when Emacs starts up. If it is &lt;code&gt;nil&lt;/code&gt;, the</source>
          <target state="translated">Emacs가 시작될 때 버퍼링합니다. 이 경우 &lt;code&gt;nil&lt;/code&gt; 는</target>
        </trans-unit>
        <trans-unit id="c69684b69d2b6f0988d6369adcb38be45f217c8b" translate="yes" xml:space="preserve">
          <source>buffer will automatically update twice per second. You can make the refresh rate faster or slower by customizing this variable.</source>
          <target state="translated">버퍼는 초당 두 번 자동으로 업데이트됩니다. 이 변수를 사용자 지정하여 새로 고침 빈도를 더 빠르게 또는 더 느리게 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e07342d4fdd9efc4573078f9dcb37521bad24c81" translate="yes" xml:space="preserve">
          <source>buffer you can use the commands of Lisp Interaction mode (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Lisp-Interaction.html#Lisp-Interaction&quot;&gt;Lisp Interaction&lt;/a&gt; in</source>
          <target state="translated">당신이 리스프 상호 작용 모드의 명령을 사용할 수 있습니다 버퍼 (참조 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Lisp-Interaction.html#Lisp-Interaction&quot;&gt;리스프의 상호 작용&lt;/a&gt; 에</target>
        </trans-unit>
        <trans-unit id="0d42d98629d297b2a9c52cce3d7ccddc304d78df" translate="yes" xml:space="preserve">
          <source>buffer you can use the commands of Lisp Interaction mode (see &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Lisp-Interaction.html#Lisp-Interaction&quot;&gt;Lisp Interaction&lt;/a&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2722ab6ba8f927264d9ae97e1b9f25e5ac0040b1" translate="yes" xml:space="preserve">
          <source>buffer&amp;rsquo;s &amp;lsquo;</source>
          <target state="translated">버퍼의 '</target>
        </trans-unit>
        <trans-unit id="f56af144b95cb289ec4ac9347e9a75290840da03" translate="yes" xml:space="preserve">
          <source>buffer, but the next display of a message recreates it. Any Lisp code that needs to access the</source>
          <target state="translated">버퍼, 그러나 메시지의 다음 디스플레이는 그것을 다시 만듭니다. 액세스해야하는 Lisp 코드</target>
        </trans-unit>
        <trans-unit id="b6ded2b5a5bb2962f6ba9f1606eafc7f88a6fb9c" translate="yes" xml:space="preserve">
          <source>buffer, but without text properties (see &lt;a href=&quot;logging-messages#Logging-Messages&quot;&gt;Logging Messages&lt;/a&gt;).</source>
          <target state="translated">버퍼이지만 텍스트 속성이 없습니다 ( &lt;a href=&quot;logging-messages#Logging-Messages&quot;&gt;메시지 로깅&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="b025fb1abe38ba90bbb82204e14a0563b16c68b7" translate="yes" xml:space="preserve">
          <source>buffer, or to the echo area.</source>
          <target state="translated">버퍼 또는 에코 영역에.</target>
        </trans-unit>
        <trans-unit id="59022bd261061ce35b0bbbb0e92792cc520e88fc" translate="yes" xml:space="preserve">
          <source>buffer, so that the user can see them. Except as described below, this is the &lt;em&gt;only&lt;/em&gt; way these arguments are used.</source>
          <target state="translated">버퍼링하여 사용자가 볼 수 있도록합니다. 아래에 설명 된 경우를 제외하고 이것이 이러한 인수가 사용되는 &lt;em&gt;유일한&lt;/em&gt; 방법입니다.</target>
        </trans-unit>
        <trans-unit id="4f26236e474459a3b85ccbacdedc35bdc5db877a" translate="yes" xml:space="preserve">
          <source>buffer, which is used to regenerate the help information when the user clicks on the &amp;lsquo;</source>
          <target state="translated">사용자가 '를 클릭 할 때 도움말 정보를 다시 생성하는 데 사용되는 버퍼</target>
        </trans-unit>
        <trans-unit id="38d68bac11ecb765a69d8caa0f02ab49aa8fe349" translate="yes" xml:space="preserve">
          <source>buffer-access-fontified-property</source>
          <target state="translated">buffer-access-fontified-property</target>
        </trans-unit>
        <trans-unit id="fa56a362b5598122cb69c8a2c44f4afc56bdc95e" translate="yes" xml:space="preserve">
          <source>buffer-access-fontify-functions</source>
          <target state="translated">buffer-access-fontify-functions</target>
        </trans-unit>
        <trans-unit id="959beb1b125a9e14e3939248a4feb437ef85c998" translate="yes" xml:space="preserve">
          <source>buffer-auto-save-file-format</source>
          <target state="translated">buffer-auto-save-file-format</target>
        </trans-unit>
        <trans-unit id="6b0478a2b971706d6cdd2ec88fcd15709a1610e3" translate="yes" xml:space="preserve">
          <source>buffer-auto-save-file-name</source>
          <target state="translated">buffer-auto-save-file-name</target>
        </trans-unit>
        <trans-unit id="1d3f5e36669056c6d4945414ed1cddac2d4f6f59" translate="yes" xml:space="preserve">
          <source>buffer-backed-up</source>
          <target state="translated">buffer-backed-up</target>
        </trans-unit>
        <trans-unit id="a9874674f9112ef3f612dfc5b526c01f2f2367e6" translate="yes" xml:space="preserve">
          <source>buffer-base-buffer</source>
          <target state="translated">buffer-base-buffer</target>
        </trans-unit>
        <trans-unit id="6bb47e5c59fd7c42431c423142e4cf9755851246" translate="yes" xml:space="preserve">
          <source>buffer-chars-modified-tick</source>
          <target state="translated">buffer-chars-modified-tick</target>
        </trans-unit>
        <trans-unit id="f72fe7163404a75f553e3fde30a40e7aaa073b8e" translate="yes" xml:space="preserve">
          <source>buffer-disable-undo</source>
          <target state="translated">buffer-disable-undo</target>
        </trans-unit>
        <trans-unit id="52410217d62bf8fba94aa7d7b2061677091f294f" translate="yes" xml:space="preserve">
          <source>buffer-display-count</source>
          <target state="translated">buffer-display-count</target>
        </trans-unit>
        <trans-unit id="23b1c0036af87f34ee2e1c935edf732b708418e4" translate="yes" xml:space="preserve">
          <source>buffer-display-table</source>
          <target state="translated">buffer-display-table</target>
        </trans-unit>
        <trans-unit id="5cec8d617b90cff5dfee0fc316974a3fa5952d1f" translate="yes" xml:space="preserve">
          <source>buffer-display-time</source>
          <target state="translated">buffer-display-time</target>
        </trans-unit>
        <trans-unit id="8199f8a859ad1b67d73d9fcea2a076c22df2c504" translate="yes" xml:space="preserve">
          <source>buffer-enable-undo</source>
          <target state="translated">buffer-enable-undo</target>
        </trans-unit>
        <trans-unit id="c74db4d19f29d4bdd2c8c655f0276a1d03a39700" translate="yes" xml:space="preserve">
          <source>buffer-end</source>
          <target state="translated">buffer-end</target>
        </trans-unit>
        <trans-unit id="ec1e379e6ce51afd5b052e9b922891ea9819e973" translate="yes" xml:space="preserve">
          <source>buffer-file-coding-system</source>
          <target state="translated">buffer-file-coding-system</target>
        </trans-unit>
        <trans-unit id="686c0bdcc61e42f9f36b362fe893c548a36cc5ff" translate="yes" xml:space="preserve">
          <source>buffer-file-format</source>
          <target state="translated">buffer-file-format</target>
        </trans-unit>
        <trans-unit id="3ae670d04b55bac49ff26e0327dd6f1d159da9f1" translate="yes" xml:space="preserve">
          <source>buffer-file-name</source>
          <target state="translated">buffer-file-name</target>
        </trans-unit>
        <trans-unit id="70982799934a4d5fa8e1d4fb1df4654d971239ca" translate="yes" xml:space="preserve">
          <source>buffer-file-number</source>
          <target state="translated">buffer-file-number</target>
        </trans-unit>
        <trans-unit id="216d8e7b5e9b5813b28a3498e800391e42429b19" translate="yes" xml:space="preserve">
          <source>buffer-file-truename</source>
          <target state="translated">buffer-file-truename</target>
        </trans-unit>
        <trans-unit id="0a39477e84277394720ace19581fd0fbb985d7ca" translate="yes" xml:space="preserve">
          <source>buffer-hash</source>
          <target state="translated">buffer-hash</target>
        </trans-unit>
        <trans-unit id="499d1e0bcb7c23ad6f114235eb7219c4844257a1" translate="yes" xml:space="preserve">
          <source>buffer-invisibility-spec</source>
          <target state="translated">buffer-invisibility-spec</target>
        </trans-unit>
        <trans-unit id="8e32567f5293d1386ded0cbba21ed097d69f00ec" translate="yes" xml:space="preserve">
          <source>buffer-list</source>
          <target state="translated">buffer-list</target>
        </trans-unit>
        <trans-unit id="939077514c3778dc81a49d0702a03df6da57a15d" translate="yes" xml:space="preserve">
          <source>buffer-list-update-hook</source>
          <target state="translated">buffer-list-update-hook</target>
        </trans-unit>
        <trans-unit id="e6b5fa613d57049e0036dd1721a400a14b6dc045" translate="yes" xml:space="preserve">
          <source>buffer-live-p</source>
          <target state="translated">buffer-live-p</target>
        </trans-unit>
        <trans-unit id="0157e7ceea37b99aab0db3bb40e4fb505d625a42" translate="yes" xml:space="preserve">
          <source>buffer-local-value</source>
          <target state="translated">buffer-local-value</target>
        </trans-unit>
        <trans-unit id="371ac9dd28299a86e514ef351729fddf92f8e40e" translate="yes" xml:space="preserve">
          <source>buffer-local-variables</source>
          <target state="translated">buffer-local-variables</target>
        </trans-unit>
        <trans-unit id="a8522e2b576d30ec1602919d39e5e4aacc4d88c8" translate="yes" xml:space="preserve">
          <source>buffer-modified-p</source>
          <target state="translated">buffer-modified-p</target>
        </trans-unit>
        <trans-unit id="e2a1424870e63c465011f8ccad14ed9e8bc6147b" translate="yes" xml:space="preserve">
          <source>buffer-modified-tick</source>
          <target state="translated">buffer-modified-tick</target>
        </trans-unit>
        <trans-unit id="200953599b3ec9e57158518f017c087de6188a21" translate="yes" xml:space="preserve">
          <source>buffer-name</source>
          <target state="translated">buffer-name</target>
        </trans-unit>
        <trans-unit id="a8c2e5ceea11408922937b1d12c48f58ab8ccd26" translate="yes" xml:space="preserve">
          <source>buffer-name-history</source>
          <target state="translated">buffer-name-history</target>
        </trans-unit>
        <trans-unit id="06e27a82cf57c2354d57b94b82fe63085996b064" translate="yes" xml:space="preserve">
          <source>buffer-narrowed-p</source>
          <target state="translated">buffer-narrowed-p</target>
        </trans-unit>
        <trans-unit id="27065f4e1488cdb7751d589dd88b0da785786a14" translate="yes" xml:space="preserve">
          <source>buffer-offer-save</source>
          <target state="translated">buffer-offer-save</target>
        </trans-unit>
        <trans-unit id="864a56cd58d2c12fc6f9665b849df0ddf3e07fa9" translate="yes" xml:space="preserve">
          <source>buffer-read-only</source>
          <target state="translated">buffer-read-only</target>
        </trans-unit>
        <trans-unit id="5aaccef76daa22bb1670a9ce8b87d0e4a6367278" translate="yes" xml:space="preserve">
          <source>buffer-save-without-query</source>
          <target state="translated">buffer-save-without-query</target>
        </trans-unit>
        <trans-unit id="fe3c1ce19cec397f5f04b0386c138e93d520a208" translate="yes" xml:space="preserve">
          <source>buffer-saved-size</source>
          <target state="translated">buffer-saved-size</target>
        </trans-unit>
        <trans-unit id="9ab6cee5533b07249f5233abdb78a4e0d038e2f2" translate="yes" xml:space="preserve">
          <source>buffer-size</source>
          <target state="translated">buffer-size</target>
        </trans-unit>
        <trans-unit id="d41a9f78dd23777a3219301afe7bf6577b26e60f" translate="yes" xml:space="preserve">
          <source>buffer-stale-function</source>
          <target state="translated">buffer-stale-function</target>
        </trans-unit>
        <trans-unit id="32454fd3d46e11b88c81d9eabe5cfbd55cde6b96" translate="yes" xml:space="preserve">
          <source>buffer-string</source>
          <target state="translated">buffer-string</target>
        </trans-unit>
        <trans-unit id="a8ea6b0becada411248444bc708d9915a88921d9" translate="yes" xml:space="preserve">
          <source>buffer-substring</source>
          <target state="translated">buffer-substring</target>
        </trans-unit>
        <trans-unit id="de1077e0b8a89084393930a9162dbcf5b9aeef46" translate="yes" xml:space="preserve">
          <source>buffer-substring-filters</source>
          <target state="translated">buffer-substring-filters</target>
        </trans-unit>
        <trans-unit id="7851e639b28a002fcf66bc142c64f608ed003057" translate="yes" xml:space="preserve">
          <source>buffer-substring-no-properties</source>
          <target state="translated">buffer-substring-no-properties</target>
        </trans-unit>
        <trans-unit id="39d153c88190e48e8b23786bc3cffe5601820745" translate="yes" xml:space="preserve">
          <source>buffer-substring-with-bidi-context</source>
          <target state="translated">buffer-substring-with-bidi-context</target>
        </trans-unit>
        <trans-unit id="1837545526a9bff5da92b96e4b9cec09bb013dbc" translate="yes" xml:space="preserve">
          <source>buffer-swap-text</source>
          <target state="translated">buffer-swap-text</target>
        </trans-unit>
        <trans-unit id="5df10256974def134391094b0a53e4e3eeed87da" translate="yes" xml:space="preserve">
          <source>buffer-undo-list</source>
          <target state="translated">buffer-undo-list</target>
        </trans-unit>
        <trans-unit id="907d07509ad60935ecd8f264c2e81ec1e99439b4" translate="yes" xml:space="preserve">
          <source>buffer.</source>
          <target state="translated">buffer.</target>
        </trans-unit>
        <trans-unit id="a12ca972d58cc4fb6b990ba5cb882aed8f221f77" translate="yes" xml:space="preserve">
          <source>buffer. If it does not exist, it creates it, and switches it to &lt;code&gt;messages-buffer-mode&lt;/code&gt;.</source>
          <target state="translated">완충기. 존재하지 않는 경우 생성하고 &lt;code&gt;messages-buffer-mode&lt;/code&gt; 로 전환합니다 .</target>
        </trans-unit>
        <trans-unit id="09d46d037f83ec5d76f20f399a28941fe4a0f023" translate="yes" xml:space="preserve">
          <source>buffer. In other respects it is equivalent to &lt;code&gt;display-warning&lt;/code&gt;.</source>
          <target state="translated">완충기. 다른 측면에서는 &lt;code&gt;display-warning&lt;/code&gt; 과 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="e472ed87aefd7845d5fee161efecf9bd9e131fdf" translate="yes" xml:space="preserve">
          <source>buffer. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/List-Buffers.html#List-Buffers&quot;&gt;Listing Existing Buffers&lt;/a&gt; in</source>
          <target state="translated">완충기. 참조 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/List-Buffers.html#List-Buffers&quot;&gt;목록이 버퍼를 기존&lt;/a&gt; 에</target>
        </trans-unit>
        <trans-unit id="ad1ab7af8576f07758ce779f445480deb40767d4" translate="yes" xml:space="preserve">
          <source>buffer. See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/List-Buffers.html#List-Buffers&quot;&gt;Listing Existing Buffers&lt;/a&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33376ca530eb0f8f98a255afe0034c615da5aea1" translate="yes" xml:space="preserve">
          <source>buffer. The return value is always nil.</source>
          <target state="translated">완충기. 반환 값은 항상 nil입니다.</target>
        </trans-unit>
        <trans-unit id="b793428fda847b25484e686eb150e10fb4e8c573" translate="yes" xml:space="preserve">
          <source>buffer. The value &lt;code&gt;t&lt;/code&gt; means there is no limit on how many lines to keep. The value &lt;code&gt;nil&lt;/code&gt; disables message logging entirely. Here&amp;rsquo;s how to display a message and prevent it from being logged:</source>
          <target state="translated">완충기. 값 &lt;code&gt;t&lt;/code&gt; 는 유지할 줄 수에 제한이 없음을 의미합니다. &lt;code&gt;nil&lt;/code&gt; 값 은 메시지 로깅을 완전히 비활성화합니다. 메시지를 표시하고 기록되지 않도록하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="46855e94144a938d2553a493571fe7cd8572b8f1" translate="yes" xml:space="preserve">
          <source>buffer. The value should be a symbol that is a major mode command. The default value is &lt;code&gt;lisp-interaction-mode&lt;/code&gt;.</source>
          <target state="translated">완충기. 값은 주 모드 명령 인 기호 여야합니다. 기본값은 &lt;code&gt;lisp-interaction-mode&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="4eef8524fd3e2758d1eb93d5d558899c3e43f21c" translate="yes" xml:space="preserve">
          <source>buffer.)</source>
          <target state="translated">buffer.)</target>
        </trans-unit>
        <trans-unit id="9cd76be221821899abeb75f7a9bf5d51bfda6497" translate="yes" xml:space="preserve">
          <source>buffer.h</source>
          <target state="translated">buffer.h</target>
        </trans-unit>
        <trans-unit id="33a1956c41361312de7802ac3febe603aa2f2899" translate="yes" xml:space="preserve">
          <source>buffer; but see &lt;code&gt;initial-buffer-choice&lt;/code&gt;, below.</source>
          <target state="translated">완충기; 그러나 아래의 &lt;code&gt;initial-buffer-choice&lt;/code&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="936e1a12761df7718dc5dafb1c3466dcd2f7e3eb" translate="yes" xml:space="preserve">
          <source>bufferp</source>
          <target state="translated">bufferp</target>
        </trans-unit>
        <trans-unit id="9b7b514c4b1b5087609224e9e9ce45134a0c4eaa" translate="yes" xml:space="preserve">
          <source>bufferpos-to-filepos</source>
          <target state="translated">bufferpos-to-filepos</target>
        </trans-unit>
        <trans-unit id="1ef184f7bccca4536ce8b6db722e4e08770090b4" translate="yes" xml:space="preserve">
          <source>buffers appear in a window on the bottom right side of the frame.</source>
          <target state="translated">버퍼는 프레임의 오른쪽 하단에있는 창에 나타납니다.</target>
        </trans-unit>
        <trans-unit id="25a13e8c216a4d30810b68744f8b1583e9f7c032" translate="yes" xml:space="preserve">
          <source>buffers share a window on the bottom left side of the frame and the</source>
          <target state="translated">버퍼는 프레임의 왼쪽 하단에있는 창을 공유하고</target>
        </trans-unit>
        <trans-unit id="0f401af511bfff44e32812b989befbfd7a2f90f9" translate="yes" xml:space="preserve">
          <source>buffers, and also when evaluating expressions via</source>
          <target state="translated">버퍼를 통해 식을 평가할 때</target>
        </trans-unit>
        <trans-unit id="5180d602cf70d63c77ea9dabd804e37a427ca655" translate="yes" xml:space="preserve">
          <source>buffers, nor evaluation using</source>
          <target state="translated">버퍼를 사용하거나</target>
        </trans-unit>
        <trans-unit id="1706b34bc261c7eb4cb4d94c4d98a51467d797c9" translate="yes" xml:space="preserve">
          <source>buffers.</source>
          <target state="translated">buffers.</target>
        </trans-unit>
        <trans-unit id="90532ff0e1a43ddc5de084570990cf0010a4e35b" translate="yes" xml:space="preserve">
          <source>bury-buffer</source>
          <target state="translated">bury-buffer</target>
        </trans-unit>
        <trans-unit id="7a8e7aec4fe149efae0a82e3fcb71c353a2eaa0f" translate="yes" xml:space="preserve">
          <source>but you can also add keyword-value pairs before the arguments, like this:</source>
          <target state="translated">그러나 다음과 같이 인수 앞에 키워드-값 쌍을 추가 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="efc2425b3c0f0d465563a4ed6aa8fcbd7a0ee37c" translate="yes" xml:space="preserve">
          <source>but you really want to quit, and not debug, use the</source>
          <target state="translated">하지만 디버그가 아닌 종료하려면</target>
        </trans-unit>
        <trans-unit id="d176897bc8cd324d780808a42bde9444b72a6afd" translate="yes" xml:space="preserve">
          <source>butlast</source>
          <target state="translated">butlast</target>
        </trans-unit>
        <trans-unit id="084ed578964817e3de6d5eccddfca1a2694d4628" translate="yes" xml:space="preserve">
          <source>button-activate</source>
          <target state="translated">button-activate</target>
        </trans-unit>
        <trans-unit id="cc349336c170a066ae2327b784a9ffad73a20d32" translate="yes" xml:space="preserve">
          <source>button-at</source>
          <target state="translated">button-at</target>
        </trans-unit>
        <trans-unit id="d7e10429515f87a9bdd7ee901429f5d7114a44be" translate="yes" xml:space="preserve">
          <source>button-end</source>
          <target state="translated">button-end</target>
        </trans-unit>
        <trans-unit id="9c458c797c0623f5b7adf9cf98c62a65bf6e8a5a" translate="yes" xml:space="preserve">
          <source>button-get</source>
          <target state="translated">button-get</target>
        </trans-unit>
        <trans-unit id="a90df4b62390dcc83258a8d0d8a3172b9c7b66a5" translate="yes" xml:space="preserve">
          <source>button-has-type-p</source>
          <target state="translated">button-has-type-p</target>
        </trans-unit>
        <trans-unit id="06e70233fdf00ba1f955fa7a79169f6e2548ed62" translate="yes" xml:space="preserve">
          <source>button-label</source>
          <target state="translated">button-label</target>
        </trans-unit>
        <trans-unit id="2800f938e159cf7f3d28fbdbbb810b69813230d9" translate="yes" xml:space="preserve">
          <source>button-put</source>
          <target state="translated">button-put</target>
        </trans-unit>
        <trans-unit id="c856561217cb5cfbf222a276539b7ceb14a41fc7" translate="yes" xml:space="preserve">
          <source>button-start</source>
          <target state="translated">button-start</target>
        </trans-unit>
        <trans-unit id="7c189ae5728b5f54f88fe8233d5409efb30705b5" translate="yes" xml:space="preserve">
          <source>button-type</source>
          <target state="translated">button-type</target>
        </trans-unit>
        <trans-unit id="7b499c03075dc2fd26441e76c1f13a0f56e39343" translate="yes" xml:space="preserve">
          <source>button-type-get</source>
          <target state="translated">button-type-get</target>
        </trans-unit>
        <trans-unit id="cf37b75faff9dbbd6c2c867cefa09a3a5f9c4ded" translate="yes" xml:space="preserve">
          <source>button-type-put</source>
          <target state="translated">button-type-put</target>
        </trans-unit>
        <trans-unit id="2d4c3629d6e60b0d06b9bddc17789c8ef613071e" translate="yes" xml:space="preserve">
          <source>button-type-subtype-p</source>
          <target state="translated">button-type-subtype-p</target>
        </trans-unit>
        <trans-unit id="3f668ce345889a9c5c97e38a3e8f8a4d8766d41c" translate="yes" xml:space="preserve">
          <source>by default (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html#Find-Init&quot;&gt;How Emacs Finds Your Init File&lt;/a&gt; in</source>
          <target state="translated">기본적으로 ( &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html#Find-Init&quot;&gt;Emacs가 Init 파일&lt;/a&gt; 을 찾는 방법 참조)</target>
        </trans-unit>
        <trans-unit id="c1e3687c7629691d416b9e62c50f1e6499bf19cc" translate="yes" xml:space="preserve">
          <source>by default (see &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html#Find-Init&quot;&gt;How Emacs Finds Your Init File&lt;/a&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cc2a2cb48c20313765f650d97c2e52d0fa74354" translate="yes" xml:space="preserve">
          <source>by installing the &lt;code&gt;no-delete-other-windows&lt;/code&gt; parameter for each of these windows.</source>
          <target state="translated">각 &lt;code&gt;no-delete-other-windows&lt;/code&gt; 에 대해 no-delete-other-windows 매개 변수를 설치하여 .</target>
        </trans-unit>
        <trans-unit id="78123ca74bacf885bb1937d816faafc08f9a637d" translate="yes" xml:space="preserve">
          <source>by installing the &lt;code&gt;no-other-window&lt;/code&gt; parameter for each of these windows. In addition, it makes sure that side windows are not deleted via</source>
          <target state="translated">각 &lt;code&gt;no-other-window&lt;/code&gt; 에 대해 no-other-window 매개 변수를 설치합니다 . 또한 사이드 윈도우가 다음을 통해 삭제되지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="2ee6de454a5d0628ee9cc825d8aba8c3d62b7add" translate="yes" xml:space="preserve">
          <source>byte-boolean-vars</source>
          <target state="translated">byte-boolean-vars</target>
        </trans-unit>
        <trans-unit id="9be77cd87f2373c29943c630b8a0c2cd87d5e7f8" translate="yes" xml:space="preserve">
          <source>byte-code-function-p</source>
          <target state="translated">byte-code-function-p</target>
        </trans-unit>
        <trans-unit id="8081fb7bff7a085d0e50482fd816cb30f49f3c06" translate="yes" xml:space="preserve">
          <source>byte-compile</source>
          <target state="translated">byte-compile</target>
        </trans-unit>
        <trans-unit id="d7900311bcfbee549187e00c3d2d4a4e7332fcdf" translate="yes" xml:space="preserve">
          <source>byte-compile-dynamic</source>
          <target state="translated">byte-compile-dynamic</target>
        </trans-unit>
        <trans-unit id="c72769ac84a5daf28e4e7b8d5f24a5a41a155ccc" translate="yes" xml:space="preserve">
          <source>byte-compile-dynamic-docstrings</source>
          <target state="translated">byte-compile-dynamic-docstrings</target>
        </trans-unit>
        <trans-unit id="7acd752daff3d85f70604b7bddd0b90a47e5a059" translate="yes" xml:space="preserve">
          <source>byte-compile-file</source>
          <target state="translated">byte-compile-file</target>
        </trans-unit>
        <trans-unit id="ecb12d2384122429e0953210f8c282b41c32d5b4" translate="yes" xml:space="preserve">
          <source>byte-compiled Lisp files are available. The produced dump file is usually named</source>
          <target state="translated">바이트 컴파일 된 Lisp 파일을 사용할 수 있습니다. 생성 된 덤프 파일의 이름은 일반적으로</target>
        </trans-unit>
        <trans-unit id="b0725338da5e468be1acc5185ed52c27b34d8b75" translate="yes" xml:space="preserve">
          <source>byte-recompile-directory</source>
          <target state="translated">byte-recompile-directory</target>
        </trans-unit>
        <trans-unit id="9ede40359b6e2a961f1c1c354dfac69c94a49f78" translate="yes" xml:space="preserve">
          <source>byte-to-position</source>
          <target state="translated">byte-to-position</target>
        </trans-unit>
        <trans-unit id="b97a0d0ead0eae5595a4aabdc862718937e70052" translate="yes" xml:space="preserve">
          <source>byte-to-string</source>
          <target state="translated">byte-to-string</target>
        </trans-unit>
        <trans-unit id="84a516841ba77a5b4648de2cd0dfcb30ea46dbb4" translate="yes" xml:space="preserve">
          <source>c</source>
          <target state="translated">c</target>
        </trans-unit>
        <trans-unit id="a9ce2a90e6c58260b61bac3dc8c6a2f7815b5c02" translate="yes" xml:space="preserve">
          <source>c[ad]*?a</source>
          <target state="translated">c[ad]*?a</target>
        </trans-unit>
        <trans-unit id="629401451e43ab67b5cedb61e2dabb9c75bcf2f1" translate="yes" xml:space="preserve">
          <source>c[ad]*a</source>
          <target state="translated">c[ad]*a</target>
        </trans-unit>
        <trans-unit id="1a1f9233a4bf0e4dd0c20c67215b488d94cd83c0" translate="yes" xml:space="preserve">
          <source>c[ad]*r</source>
          <target state="translated">c[ad]*r</target>
        </trans-unit>
        <trans-unit id="5ac07116a74946049a68a42d4f37dea306438e77" translate="yes" xml:space="preserve">
          <source>c[ad]\{1,2\}r</source>
          <target state="translated">c[ad]\{1,2\}r</target>
        </trans-unit>
        <trans-unit id="f36535485786b84ea5efd5a877a6d96886c17301" translate="yes" xml:space="preserve">
          <source>c[ad]\{3\}r</source>
          <target state="translated">c[ad]\{3\}r</target>
        </trans-unit>
        <trans-unit id="dcb0ff4e089a10040363ea36b4d1fa7f4a3af0e3" translate="yes" xml:space="preserve">
          <source>ca*ar</source>
          <target state="translated">ca*ar</target>
        </trans-unit>
        <trans-unit id="a552b6caaca24cb07fb55f243c37fb05154a44ec" translate="yes" xml:space="preserve">
          <source>ca*r</source>
          <target state="translated">ca*r</target>
        </trans-unit>
        <trans-unit id="c3868259179474183737c9668da22b170f850355" translate="yes" xml:space="preserve">
          <source>ca+r</source>
          <target state="translated">ca+r</target>
        </trans-unit>
        <trans-unit id="f8c228fb8c7d0e1a1f035b2583c122cd708b1dcb" translate="yes" xml:space="preserve">
          <source>ca?r</source>
          <target state="translated">ca?r</target>
        </trans-unit>
        <trans-unit id="5c5ced81454f97923733662cbe39a4e6ce7a80ba" translate="yes" xml:space="preserve">
          <source>caaaar</source>
          <target state="translated">caaaar</target>
        </trans-unit>
        <trans-unit id="442b1afbc3497978b2168231c11ae0e3c95810d1" translate="yes" xml:space="preserve">
          <source>caaar</source>
          <target state="translated">caaar</target>
        </trans-unit>
        <trans-unit id="d4d94f2ad0e8f77bb0c637ade0269a07c87d0bf7" translate="yes" xml:space="preserve">
          <source>caar</source>
          <target state="translated">caar</target>
        </trans-unit>
        <trans-unit id="3ae4fd30878e4976c17bd3b8a7617ffef5696073" translate="yes" xml:space="preserve">
          <source>cadar</source>
          <target state="translated">cadar</target>
        </trans-unit>
        <trans-unit id="60491490302662b62661d27f693332a105cc25c4" translate="yes" xml:space="preserve">
          <source>caddaar</source>
          <target state="translated">caddaar</target>
        </trans-unit>
        <trans-unit id="8ce5acfef22fd5c9f1f07019cd36124acffd8ed2" translate="yes" xml:space="preserve">
          <source>cadr</source>
          <target state="translated">cadr</target>
        </trans-unit>
        <trans-unit id="d3be657323053cff42a39e59fbe30db8bd5c515e" translate="yes" xml:space="preserve">
          <source>call-interactively</source>
          <target state="translated">call-interactively</target>
        </trans-unit>
        <trans-unit id="729cea9fa87157e1ff1598d40cb6d634dff3cbd6" translate="yes" xml:space="preserve">
          <source>call-process</source>
          <target state="translated">call-process</target>
        </trans-unit>
        <trans-unit id="9f0f3dc8e1eb024ee59b990b3adc50e71f3c324c" translate="yes" xml:space="preserve">
          <source>call-process-region</source>
          <target state="translated">call-process-region</target>
        </trans-unit>
        <trans-unit id="4e2e2c93bf5bd0866e0f33e7cc3458ac476c8ad8" translate="yes" xml:space="preserve">
          <source>call-process-shell-command</source>
          <target state="translated">call-process-shell-command</target>
        </trans-unit>
        <trans-unit id="32cc53b3df07a1bc16ef92c83c9033a0209d57d1" translate="yes" xml:space="preserve">
          <source>call-shell-region</source>
          <target state="translated">call-shell-region</target>
        </trans-unit>
        <trans-unit id="1f72f886991fdbce562e900d25ebfb1a34beee23" translate="yes" xml:space="preserve">
          <source>called-interactively-p</source>
          <target state="translated">called-interactively-p</target>
        </trans-unit>
        <trans-unit id="c3999ca1b813a76e6d36bb4fa954c4097baea217" translate="yes" xml:space="preserve">
          <source>calls functions in &lt;code&gt;after-insert-file-functions&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;after-insert-file-functions&lt;/code&gt; 의 함수를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="0e77d05e62a09c63c214f01dab75556e10df6dda" translate="yes" xml:space="preserve">
          <source>can be symbolic links that are followed, possibly recursively if the link targets are themselves symbolic links. However, a few functions do not follow symbolic links at the end of a file name (</source>
          <target state="translated">뒤 따르는 기호 링크 일 수 있으며 링크 대상 자체가 기호 링크 인 경우 재귀적일 수 있습니다. 그러나 일부 함수는 파일 이름 끝에있는 기호 링크를 따르지 않습니다 (</target>
        </trans-unit>
        <trans-unit id="5f44edbaab95a81a34823e384150f9908271143b" translate="yes" xml:space="preserve">
          <source>can be used to quote a</source>
          <target state="translated">인용하는 데 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="fc0a3b3406f85a2de505f1f1226a3079da51d0ab" translate="yes" xml:space="preserve">
          <source>can see the individual items in that menu and provide help for them. If instead you implement the menu by defining a command that calls &lt;code&gt;x-popup-menu&lt;/code&gt;, the help facilities cannot know what happens inside that command, so they cannot give any help for the menu&amp;rsquo;s items.</source>
          <target state="translated">해당 메뉴의 개별 항목을보고 도움말을 제공 할 수 있습니다. 대신 &lt;code&gt;x-popup-menu&lt;/code&gt; 를 호출하는 명령을 정의하여 메뉴를 구현하면 도움말 기능이 해당 명령 내에서 무슨 일이 발생하는지 알 수 없으므로 메뉴 항목에 대한 도움말을 제공 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="1aa0a0ff576aa98b76976f7e10542ecbe512725f" translate="yes" xml:space="preserve">
          <source>cancel-change-group</source>
          <target state="translated">cancel-change-group</target>
        </trans-unit>
        <trans-unit id="d63faaa25add93538fb1fda4d3c6313db4b98b8a" translate="yes" xml:space="preserve">
          <source>cancel-debug-on-entry</source>
          <target state="translated">cancel-debug-on-entry</target>
        </trans-unit>
        <trans-unit id="fa9d14f7ff965dcea90c439ce6e363a996076801" translate="yes" xml:space="preserve">
          <source>cancel-debug-on-variable-change</source>
          <target state="translated">cancel-debug-on-variable-change</target>
        </trans-unit>
        <trans-unit id="d8d3abd86c9799cb35502c91fe0759637e803fea" translate="yes" xml:space="preserve">
          <source>cancel-timer</source>
          <target state="translated">cancel-timer</target>
        </trans-unit>
        <trans-unit id="9b9273d335af3058c719fe97631905752703864f" translate="yes" xml:space="preserve">
          <source>cannot be a key sequence.</source>
          <target state="translated">키 시퀀스가 ​​될 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="98c055e6c8391c7ae20d6b485747ae21120e3edb" translate="yes" xml:space="preserve">
          <source>cannot be represented as strings; they have to be represented as vectors.</source>
          <target state="translated">문자열로 표현할 수 없습니다. 벡터로 표현되어야합니다.</target>
        </trans-unit>
        <trans-unit id="f75b4887b48dd029ecac24ce20fc8d78ac680314" translate="yes" xml:space="preserve">
          <source>capital I is downcased into a Turkish dotless i (&amp;lsquo;</source>
          <target state="translated">자본 I는 터키어 점없는 i ( '</target>
        </trans-unit>
        <trans-unit id="d01a341706c2a5c67a30eb227bba3d0fd7ace906" translate="yes" xml:space="preserve">
          <source>capitalize</source>
          <target state="translated">capitalize</target>
        </trans-unit>
        <trans-unit id="b44c222faf9a458f9066de866b38a8d561f4d5fc" translate="yes" xml:space="preserve">
          <source>capitalize-region</source>
          <target state="translated">capitalize-region</target>
        </trans-unit>
        <trans-unit id="8f9accc3c8c5616c3a43c57c96ae8b85dd5f4e06" translate="yes" xml:space="preserve">
          <source>capitalize-word</source>
          <target state="translated">capitalize-word</target>
        </trans-unit>
        <trans-unit id="9e32521dd2f8b27b64fe869fdadfa53e7d976f56" translate="yes" xml:space="preserve">
          <source>car</source>
          <target state="translated">car</target>
        </trans-unit>
        <trans-unit id="4dbd9f697e1e53b79562849742dc9f39b85b7443" translate="yes" xml:space="preserve">
          <source>car-safe</source>
          <target state="translated">car-safe</target>
        </trans-unit>
        <trans-unit id="a993daa06cb5a6dc0e923793da2ea2381220e93b" translate="yes" xml:space="preserve">
          <source>case conversion, such as implementations of</source>
          <target state="translated">구현과 같은 케이스 변환</target>
        </trans-unit>
        <trans-unit id="7ceac34f8a09413fde8c368f7fecec9afa40f548" translate="yes" xml:space="preserve">
          <source>case-fold-search</source>
          <target state="translated">case-fold-search</target>
        </trans-unit>
        <trans-unit id="eb46750138a0b8c9a10ea154e97b0a9e14f5d0c4" translate="yes" xml:space="preserve">
          <source>case-replace</source>
          <target state="translated">case-replace</target>
        </trans-unit>
        <trans-unit id="3ea7abae8cd16e45fa1222fff278b78d291bb563" translate="yes" xml:space="preserve">
          <source>case-table-p</source>
          <target state="translated">case-table-p</target>
        </trans-unit>
        <trans-unit id="9ebad64e5d2b9542779537fce0354f34c099e7ff" translate="yes" xml:space="preserve">
          <source>catch</source>
          <target state="translated">catch</target>
        </trans-unit>
        <trans-unit id="bba17176b529abdfa87f859602aece9432497b63" translate="yes" xml:space="preserve">
          <source>category-docstring</source>
          <target state="translated">category-docstring</target>
        </trans-unit>
        <trans-unit id="930b336bd892a00d44f00461dc40c99246a53bfc" translate="yes" xml:space="preserve">
          <source>category-set-mnemonics</source>
          <target state="translated">category-set-mnemonics</target>
        </trans-unit>
        <trans-unit id="d45cd5edea03b6fb85828c6e5451c26e07b17310" translate="yes" xml:space="preserve">
          <source>category-table</source>
          <target state="translated">category-table</target>
        </trans-unit>
        <trans-unit id="13560419661c15e8796aad7638a2c8db6f2ada26" translate="yes" xml:space="preserve">
          <source>category-table-p</source>
          <target state="translated">category-table-p</target>
        </trans-unit>
        <trans-unit id="c5bf2a9bddaa655e1e7f3157013c3ea31fb0bdf6" translate="yes" xml:space="preserve">
          <source>causes menu items for &lt;code&gt;make-read-only&lt;/code&gt; and &lt;code&gt;make-writable&lt;/code&gt; to show the keyboard bindings for &lt;code&gt;read-only-mode&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;make-read-only&lt;/code&gt; 및 &lt;code&gt;make-writable&lt;/code&gt; 에 대한 메뉴 항목이 &lt;code&gt;read-only-mode&lt;/code&gt; 대한 키보드 바인딩을 표시하도록 합니다 .</target>
        </trans-unit>
        <trans-unit id="2f1bc6b4e708ba66975f245cb9b4817747c7451f" translate="yes" xml:space="preserve">
          <source>cda</source>
          <target state="translated">cda</target>
        </trans-unit>
        <trans-unit id="f3c8a3826de32172df5ac9fddd8b7176c366dc1d" translate="yes" xml:space="preserve">
          <source>cdaaada</source>
          <target state="translated">cdaaada</target>
        </trans-unit>
        <trans-unit id="ffa4ccf3e252eb760014dcf5db59c2d60b70f36d" translate="yes" xml:space="preserve">
          <source>cdar</source>
          <target state="translated">cdar</target>
        </trans-unit>
        <trans-unit id="7459f8228fb44e1a2554d0955b76a4861a91fce8" translate="yes" xml:space="preserve">
          <source>cdddr</source>
          <target state="translated">cdddr</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
