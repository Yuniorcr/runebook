<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="elisp">
    <body>
      <group id="elisp">
        <trans-unit id="338332c00ceaa9fdea31e35d6188944036e1afd8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, then the function skips characters whose syntax is &lt;em&gt;not&lt;/em&gt; in &lt;var&gt;syntaxes&lt;/var&gt;.</source>
          <target state="translated">'이면, 기능은, 그 문자 구문 스킵 &lt;em&gt;되지&lt;/em&gt; 의 &lt;var&gt;syntaxes&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="2bdea50e7f60979a583a9fcb9b89f1c9d5c7273f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, then the variable name is everything up to the matching &amp;lsquo;</source>
          <target state="translated">', 변수 이름은 일치하는'</target>
        </trans-unit>
        <trans-unit id="aed664b1485da6cc9f55a5212ab99a86dd143d39" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, there is no way to determine which representation was actually written by the programmer.</source>
          <target state="translated">', 프로그래머가 실제로 어떤 표현을 작성했는지 확인할 방법이 없습니다.</target>
        </trans-unit>
        <trans-unit id="2171df2942c5004d336176e3f04900c47e3cab8a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, to format just integers you can also use &amp;lsquo;</source>
          <target state="translated">', 정수 형식을 지정하려면'</target>
        </trans-unit>
        <trans-unit id="9553dca23f7df3d735e2a2f87dd5cc9b0f829e23" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, to play when the notification pops up. Similar to the icon name, only for sounds. An example would be &amp;lsquo;</source>
          <target state="translated">', 알림이 표시 될 때 재생됩니다. 아이콘 이름과 유사하며 사운드에만 해당됩니다. 예를 들면 '</target>
        </trans-unit>
        <trans-unit id="ace62d39c190b1878f45bacfc172fb2f90ecd0b3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, to remind you to recompile it.</source>
          <target state="translated">', 다시 컴파일하도록 상기시켜줍니다.</target>
        </trans-unit>
        <trans-unit id="88ef3b1775658920726073f79ed020824f423672" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, use the POSIX regular expression functions (see &lt;a href=&quot;posix-regexps#POSIX-Regexps&quot;&gt;POSIX Regexps&lt;/a&gt;).</source>
          <target state="translated">', POSIX 정규식 함수를 사용합니다 ( &lt;a href=&quot;posix-regexps#POSIX-Regexps&quot;&gt;POSIX Regexps&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="a9b5e78cae42d88b75bc99367644d755daf1e5d6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, waits about two seconds and repeats the request.</source>
          <target state="translated">', 2 초 정도 기다린 후 요청을 반복합니다.</target>
        </trans-unit>
        <trans-unit id="fb4a71de67abc3082610c7289044290808c5f73d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, where &lt;var&gt;base&lt;/var&gt; is the same each time, while &lt;var&gt;how-far&lt;/var&gt; varies. Logging each message in the series discards the previous one, provided they are consecutive.</source>
          <target state="translated">', 여기서 &lt;var&gt;base&lt;/var&gt; 는 매번 동일하지만 &lt;var&gt;how-far&lt;/var&gt; 는 다릅니다. 연속 된 각 메시지를 기록하면 이전 메시지가 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="61fb2b1012aea8d283974b4e0fd853063f053478" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, where &lt;var&gt;n&lt;/var&gt; is a digit</source>
          <target state="translated">', 여기서 &lt;var&gt;n&lt;/var&gt; 은 숫자입니다.</target>
        </trans-unit>
        <trans-unit id="04d7417b6c4ef86f0c2050612c8ec7002b5df152" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, where &lt;var&gt;n&lt;/var&gt; is an integer, is appended to &lt;var&gt;name&lt;/var&gt;.</source>
          <target state="translated">', 여기서 &lt;var&gt;n&lt;/var&gt; 은 정수이며 &lt;var&gt;name&lt;/var&gt; 에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="a1ff7eb7a886b2d9e457cfd13dafd34fe8a24d90" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, where &lt;var&gt;r&lt;/var&gt; specifies the red level, &lt;var&gt;g&lt;/var&gt; specifies the green level, and &lt;var&gt;b&lt;/var&gt; specifies the blue level. You can use either one, two, three, or four hex digits for &lt;var&gt;r&lt;/var&gt;; then you must use the same number of hex digits for all &lt;var&gt;g&lt;/var&gt; and &lt;var&gt;b&lt;/var&gt; as well, making either 3, 6, 9 or 12 hex digits in all. (See the documentation of the X Window System for more details about numerical RGB specification of colors.)</source>
          <target state="translated">', 여기서 &lt;var&gt;r&lt;/var&gt; 은 빨간색 레벨, &lt;var&gt;g&lt;/var&gt; 는 녹색 레벨, &lt;var&gt;b&lt;/var&gt; 는 파란색 레벨을 지정합니다. &lt;var&gt;r&lt;/var&gt; 에 1, 2, 3 또는 4 개의 16 진수를 사용할 수 있습니다 . 그런 다음 모든 &lt;var&gt;g&lt;/var&gt; 및 &lt;var&gt;b&lt;/var&gt; 에 대해 동일한 수의 16 진수를 사용해야 하며 모두 3, 6, 9 또는 12 개의 16 진수를 만들어야합니다. (숫자 RGB 색상 사양에 대한 자세한 내용은 X Window System 설명서를 참조하십시오.)</target>
        </trans-unit>
        <trans-unit id="3c2f9311da690eaf37ce5c0b510e9164b436662e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, where &lt;var&gt;x&lt;/var&gt; is the &lt;em&gt;drive letter&lt;/em&gt;.</source>
          <target state="translated">', 여기서 &lt;var&gt;x&lt;/var&gt; 는 &lt;em&gt;드라이브 문자&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0d7c8c360c0472e973e270d62630a18a011a7fcd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, whereas &amp;lsquo;</source>
          <target state="translated">', 반면'</target>
        </trans-unit>
        <trans-unit id="879c3210340c30ecd701be24b016be260ce63b4e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which allow the help display to adapt automatically to the user&amp;rsquo;s own key bindings. See &lt;a href=&quot;keys-in-documentation#Keys-in-Documentation&quot;&gt;Keys in Documentation&lt;/a&gt;.</source>
          <target state="translated">', 도움말 디스플레이가 사용자의 키 바인딩에 자동으로 적용되도록합니다. &lt;a href=&quot;keys-in-documentation#Keys-in-Documentation&quot;&gt;문서의 키를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a6787399974f01415854e862ce6afbcd47efe2d1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which are ignored by the function that parses the</source>
          <target state="translated">'를 구문 분석하는 함수에서 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="d4ddbbfb8c7f68bd68b9bd9c5c89d832b357b3b7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which calls &lt;var&gt;function&lt;/var&gt; with no arguments, or &amp;lsquo;</source>
          <target state="translated">', 인수없이 &lt;var&gt;function&lt;/var&gt; 를 호출 하거나'</target>
        </trans-unit>
        <trans-unit id="1e65a9601b871f47626748643f8be406ae56e423" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which loads the library named &lt;var&gt;file&lt;/var&gt;, or &amp;lsquo;</source>
          <target state="translated">', &lt;var&gt;file&lt;/var&gt; 이라는 라이브러리를로드 하거나'</target>
        </trans-unit>
        <trans-unit id="43a51c29ec65b042e84daf8e15be7f5da8aa6929" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which matches any lower case</source>
          <target state="translated">', 모든 소문자와 일치</target>
        </trans-unit>
        <trans-unit id="3dcfb4839df9c9ca10346fbe7c02133bfae62886" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which matches any three-character string that begins with &amp;lsquo;</source>
          <target state="translated">','로 시작하는 3 자 문자열과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="d8e0c9fd9f4f8214b3eabe1c211a987660b3a172" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which matches lines with at least one character besides a newline, would make each such line into a sort record. See &lt;a href=&quot;regular-expressions#Regular-Expressions&quot;&gt;Regular Expressions&lt;/a&gt;, for a description of the syntax and meaning of regular expressions.</source>
          <target state="translated">'는 개행 문자 외에 적어도 하나의 문자가있는 행과 일치하면 이러한 각 행을 정렬 레코드로 만듭니다. &lt;a href=&quot;regular-expressions#Regular-Expressions&quot;&gt;정규식&lt;/a&gt; 의 구문 및 의미에 대한 설명은 정규식을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cba5f1bd32077e31accecfad9acfb7d1ba8fc1a4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which matches only the string &amp;lsquo;</source>
          <target state="translated">', 문자열'</target>
        </trans-unit>
        <trans-unit id="4981a07874b78f3759572884d9b16e71937e2c5a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which represents an address and port number. Otherwise, it is a unique number in brackets, as in &amp;lsquo;</source>
          <target state="translated">', 주소 및 포트 번호를 나타냅니다. 그렇지 않으면 '에서와 같이 괄호 안의 고유 한 숫자입니다.</target>
        </trans-unit>
        <trans-unit id="4b6e5eb87b7790d18f80df6523f87cd833951944" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which tells the Lisp reader to produce an uninterned symbol.</source>
          <target state="translated">'는 Lisp 독자에게 인턴되지 않은 기호를 생성하도록 지시합니다.</target>
        </trans-unit>
        <trans-unit id="33d9b89ccd3d6ed5e32e2f0e23459fd8f7dfd98b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, while the newline character (character code 10) starts a new screen line.</source>
          <target state="translated">', 개행 문자 (문자 코드 10)는 새 화면 행을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="37692e520010377b8fac0335a7efb6bbd566d31e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, you can add a decimal integer after the &amp;lsquo;</source>
          <target state="translated">','</target>
        </trans-unit>
        <trans-unit id="1b84c5fe09d8790bb872ab98bfdbcf83d26c6cbd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, you can use &amp;lsquo;</source>
          <target state="translated">', 당신이 사용할 수있는 '</target>
        </trans-unit>
        <trans-unit id="e2fa97858f2ed56784046caa01023aada5bd0429" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, you can use &lt;code&gt;(concat
(file-name-as-directory directory) filename)&lt;/code&gt; instead of &lt;code&gt;(expand-file-name filename directory)&lt;/code&gt;.</source>
          <target state="translated">', &lt;code&gt;(expand-file-name filename directory)&lt;/code&gt; 대신 &lt;code&gt;(concat (file-name-as-directory directory) filename)&lt;/code&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0dd5d55150e4ed47f72d838d31bc8d0e13093376" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, you must use a second &amp;lsquo;</source>
          <target state="translated">', 두 번째'</target>
        </trans-unit>
        <trans-unit id="d9f56707bf372f103356f64429dc88156c9b72c3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, you should make sure to call &lt;code&gt;file-truename&lt;/code&gt; without prior direct or indirect calls to &lt;code&gt;expand-file-name&lt;/code&gt;. See &lt;a href=&quot;truenames#Truenames&quot;&gt;Truenames&lt;/a&gt;.</source>
          <target state="translated">', &lt;code&gt;expand-file-name&lt;/code&gt; 에 대한 직접 또는 간접 호출없이 &lt;code&gt;file-truename&lt;/code&gt; 을 호출해야합니다 . &lt;a href=&quot;truenames#Truenames&quot;&gt;Truenames를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4c3919354e6e193030d935f78e0dd6d55b33930d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, you should set &lt;var&gt;record-regexp&lt;/var&gt; to &amp;lsquo;</source>
          <target state="translated">', &lt;var&gt;record-regexp&lt;/var&gt; 를'로 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="f1108c40fd2cd8bbc1916e140e4fba0de0fddf4e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-modified construct in the hope that this will make it possible to match the rest of the pattern. For example, in matching &amp;lsquo;</source>
          <target state="translated">'-수정 된 구조가 나머지 패턴과 일치 할 수 있기를 바랍니다. 예를 들어 '</target>
        </trans-unit>
        <trans-unit id="4b8ba4b864cdb2f1481e0e7a343357dcafc7fff9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-sequence, after any flags. For example, &amp;lsquo;</source>
          <target state="translated">'-시퀀스, 플래그 뒤. 예 : '</target>
        </trans-unit>
        <trans-unit id="5804150be1743d4212af0df893b430fbb5d1fc77" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-sequence. &amp;lsquo;</source>
          <target state="translated">'-순서. '</target>
        </trans-unit>
        <trans-unit id="f623182097fcbcb235fca9208ca5fae8ae747ddb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-sequence; e.g., &lt;code&gt;&quot;Error: %S&quot;&lt;/code&gt;. Use &lt;code&gt;with-demoted-errors&lt;/code&gt; around code that is not expected to signal errors, but should be robust if one does occur. Note that this macro uses &lt;code&gt;condition-case-unless-debug&lt;/code&gt; rather than &lt;code&gt;condition-case&lt;/code&gt;.</source>
          <target state="translated">'-순서; 예 : &lt;code&gt;&quot;Error: %S&quot;&lt;/code&gt; . &lt;code&gt;with-demoted-errors&lt;/code&gt; 신호를 보내지 않을 것으로 예상되는 코드에 with-demoted-errors를 사용하십시오 . 그러나 오류가 발생하면 강력해야합니다. 참고이 매크로 사용의 &lt;code&gt;condition-case-unless-debug&lt;/code&gt; 가 아닌 &lt;code&gt;condition-case&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9c629d2a7582da3a286d41bf61f93a8ba8c266b5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-sequences as extensions.</source>
          <target state="translated">'-시퀀스를 확장으로.</target>
        </trans-unit>
        <trans-unit id="1fe79c758286747b35f9b4c8a50c44c703211327" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-sequences mean:</source>
          <target state="translated">'-시퀀스는 다음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="bc1d4c02feb5871d8593dd8ff121cf6ad6f65f87" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-sequences stand for themselves and are output as-is. Programs should not rely on this behavior, as future versions of Emacs may recognize new &amp;lsquo;</source>
          <target state="translated">'-시퀀스는 스스로를 나타내며있는 그대로 출력됩니다. 프로그램은이 동작에 의존해서는 안됩니다. 이후 버전의 Emacs는 새로운 '</target>
        </trans-unit>
        <trans-unit id="ee3ad3f0448eebc9630ef7231f0397acd4ee35bc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-sequences which control the conversion. Here is a table of what the &amp;lsquo;</source>
          <target state="translated">'-변환을 제어하는 ​​시퀀스. 다음은 '</target>
        </trans-unit>
        <trans-unit id="6d9b0622efde68eb979cb56ed40c4831d9cd79db" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-sequences which say to substitute parts of the time. Here is a table of what the &amp;lsquo;</source>
          <target state="translated">'-시간의 일부를 대체한다고 말하는 시퀀스. 다음은 '</target>
        </trans-unit>
        <trans-unit id="d0882996099b2f7f2b40d1baac9ef6d816431329" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-sequences. This works as in &lt;code&gt;printf&lt;/code&gt;: you write the field width as digits in a &amp;lsquo;</source>
          <target state="translated">'-시퀀스. 이것은 &lt;code&gt;printf&lt;/code&gt; 에서와 같이 작동합니다 : 필드 너비를 '</target>
        </trans-unit>
        <trans-unit id="e3452488ae13df1d0d8c33070cfb15b84b474e0e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-specification to be used in the C function &lt;code&gt;sprintf&lt;/code&gt;. For further restrictions on what you can use, see the variable&amp;rsquo;s documentation string.</source>
          <target state="translated">'-C 함수 &lt;code&gt;sprintf&lt;/code&gt; 에서 사용할 사양 입니다. 사용할 수있는 항목에 대한 추가 제한 사항은 변수의 문서 문자열을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4dece5708020cd65d858b4b08e3d8683a52a6a69" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;.</source>
          <target state="translated">&amp;rsquo;.</target>
        </trans-unit>
        <trans-unit id="5d70589a69d369e7bf4347c7ccd68068ef698e63" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. &amp;lsquo;</source>
          <target state="translated">'. '</target>
        </trans-unit>
        <trans-unit id="ce683316fec4ce2b4c77e592d1a6caa5f31270c0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. (Case is significant in these prefixes.) Thus, &amp;lsquo;</source>
          <target state="translated">'. (대소 문자는 이러한 접두사에서 중요합니다.) 따라서 '</target>
        </trans-unit>
        <trans-unit id="5700b394aac85a4f74b32b84ce806e1e2a5efa9b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. (That is always the prompt used when you read from the stream &lt;code&gt;t&lt;/code&gt;.) The user&amp;rsquo;s input is shown following the prompt.</source>
          <target state="translated">'. (이것은 항상 스트림 &lt;code&gt;t&lt;/code&gt; 에서 읽을 때 사용되는 프롬프트 입니다.) 사용자 입력은 프롬프트 다음에 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="791ebac6f04ed7defa6c85545d2fb268c5f4cd1d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. (The &amp;lsquo;</source>
          <target state="translated">'. ( '</target>
        </trans-unit>
        <trans-unit id="fc9f7e8c740a399e62be768334b6aa70b37dc63d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. (The smallest possible match here for &amp;lsquo;</source>
          <target state="translated">'. (여기에서 '</target>
        </trans-unit>
        <trans-unit id="0780074e3bfd7a227144227ddd2d9c202ba2c832" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. (The value of &lt;var&gt;directory&lt;/var&gt; should itself be an absolute directory name or directory file name; it may start with &amp;lsquo;</source>
          <target state="translated">'. ( &lt;var&gt;directory&lt;/var&gt; 값 자체는 절대 디렉토리 이름 또는 디렉토리 파일 이름이어야합니다. '</target>
        </trans-unit>
        <trans-unit id="3af07e8a0a0c868bc6380d5bcfd850c9c10b16df" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. (We use a backslash to split the documentation string&amp;rsquo;s first line into two lines in the text, but produce just one line in the string itself.)</source>
          <target state="translated">'. (백 슬래시를 사용하여 문서 문자열의 첫 번째 줄을 텍스트에서 두 줄로 분할하지만 문자열 자체에는 한 줄만 생성합니다.)</target>
        </trans-unit>
        <trans-unit id="02a05aaf9ce60da2b6de04de1b5d5d05095fd647" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. &lt;strong&gt;Warning:&lt;/strong&gt; don&amp;rsquo;t use this default group name unless you have written a &lt;code&gt;defgroup&lt;/code&gt; to define that group properly. See &lt;a href=&quot;group-definitions#Group-Definitions&quot;&gt;Group Definitions&lt;/a&gt;.</source>
          <target state="translated">'. &lt;strong&gt;경고 :&lt;/strong&gt; 해당 그룹을 올바르게 정의하기 위해 &lt;code&gt;defgroup&lt;/code&gt; 을 작성하지 않은 경우이 기본 그룹 이름을 사용하지 마십시오 . &lt;a href=&quot;group-definitions#Group-Definitions&quot;&gt;그룹 정의를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5ac688c1cb4d74dbcdc8b0089bf92eafc6894297" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. A period can be used instead of a colon to separate the hour and minute parts.</source>
          <target state="translated">'. 콜론 대신 마침표를 사용하여 시간과 분 부분을 구분할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5194eb7bf695b34f40173275513368807dd43657" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. After the form is evaluated, point is located at the end of that line (between the &amp;lsquo;</source>
          <target state="translated">'. 양식이 평가 된 후 점은 해당 선의 끝 ( '</target>
        </trans-unit>
        <trans-unit id="ba211da8c053a9a7ea6d06b0cf9f2723d5db8c85" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. All the arguments are evaluated, and &lt;code&gt;edebug-tracing&lt;/code&gt; returns the value of the last form in &lt;var&gt;body&lt;/var&gt;.</source>
          <target state="translated">'. 모든 인수가 평가되고 &lt;code&gt;edebug-tracing&lt;/code&gt; 은 &lt;var&gt;body&lt;/var&gt; 의 마지막 양식 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="37156d7116474ca00aaa48ebbe5e1d51ec116a40" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Although functions like &lt;code&gt;shell-quote-argument&lt;/code&gt; can help avoid this sort of problem, they are not panaceas; for example, on a POSIX platform &lt;code&gt;shell-quote-argument&lt;/code&gt; quotes shell metacharacters but not leading &amp;lsquo;</source>
          <target state="translated">'. &lt;code&gt;shell-quote-argument&lt;/code&gt; 와 같은 함수는 이런 종류의 문제를 피하는 데 도움이 될 수 있지만 만병 통치약은 아닙니다. 예를 들어, POSIX 플랫폼에서 &lt;code&gt;shell-quote-argument&lt;/code&gt; 는 쉘 메타 문자를 인용하지만 선행 '</target>
        </trans-unit>
        <trans-unit id="a729093898cb227c36a8ac74a480b12d242044ec" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. An event that is a list appears as the name of the symbol in the &lt;small&gt;CAR&lt;/small&gt; of the list, inside angle brackets.</source>
          <target state="translated">'. 목록 인 이벤트는 목록의 &lt;small&gt;CAR&lt;/small&gt; 에서 꺾쇠 괄호 안에 있는 기호 이름으로 나타납니다 .</target>
        </trans-unit>
        <trans-unit id="32dfe4e846148041bca3b8953e155b799b33eeaf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Assuming that &amp;lsquo;</source>
          <target state="translated">'. '</target>
        </trans-unit>
        <trans-unit id="0c8eb27555415c9f392a451455af6f7bfbde325b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. At the end, point is located directly before that same &amp;lsquo;</source>
          <target state="translated">'. 끝에서 지점은 동일한 '</target>
        </trans-unit>
        <trans-unit id="9b0bd4cb477dbe85b51c361ff287c8b444632ea2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. At the end, the marker has advanced over the inserted text so that it remains positioned before the same &amp;lsquo;</source>
          <target state="translated">'. 마지막에 마커는 삽입 된 텍스트 위로 이동하여 동일한 '</target>
        </trans-unit>
        <trans-unit id="ae99819f0533cb20ecece6175293d84961985773" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Be aware that sensitive information (such as passwords) may end up recorded in the dribble file.</source>
          <target state="translated">'. 민감한 정보 (예 : 암호)는 드리블 파일에 기록 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e8fa641becff1133fce5c4d2b3077ede4731b4fd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Both designators are equivalent.</source>
          <target state="translated">'. 두 지정자는 동일합니다.</target>
        </trans-unit>
        <trans-unit id="7ea803d48b5ab9465ce9437026a4b8f993404bbd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. But</source>
          <target state="translated">'. 그러나</target>
        </trans-unit>
        <trans-unit id="ca99c6d74effa1eedd1d09232836becae45476c3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. But if the handler that would be used for them has a non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;safe-magic&lt;/code&gt; property, the &amp;lsquo;</source>
          <target state="translated">'. 그러나 그것들을 위해 사용될 핸들러가 &lt;code&gt;nil&lt;/code&gt; 이 아닌 &lt;code&gt;safe-magic&lt;/code&gt; 속성을 가지고 있다면 '</target>
        </trans-unit>
        <trans-unit id="f5b0d53a91116fad250a268160e8a7ad915d0341" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Each hook function is called with no arguments and should return a string describing the current prefix state, or &lt;code&gt;nil&lt;/code&gt; if there&amp;rsquo;s no prefix state. See &lt;a href=&quot;prefix-command-arguments#Prefix-Command-Arguments&quot;&gt;Prefix Command Arguments&lt;/a&gt;.</source>
          <target state="translated">'. 각 후크 함수는 인수없이 호출되며 현재 접두사 상태를 설명하는 문자열을 반환해야합니다 . 접두사 상태가 없으면 &lt;code&gt;nil&lt;/code&gt; 을 반환해야합니다 . &lt;a href=&quot;prefix-command-arguments#Prefix-Command-Arguments&quot;&gt;접두사 명령 인수를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ffec325b908df24f0b42898919b420f6124ce0a0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Evaluating the search call moves point to the end of that line (between the &amp;lsquo;</source>
          <target state="translated">'. 검색 호출을 평가하면 포인트가 해당 줄의 끝 ( '</target>
        </trans-unit>
        <trans-unit id="b585ed881f3c66399f451ef8bd952d9006480d9d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Firstly, it may never print it, there are many good reasons for this not to happen. Secondly, &amp;lsquo;</source>
          <target state="translated">'. 첫째, 인쇄하지 않을 수도 있습니다. 이것이 발생하지 않는 데는 여러 가지 이유가 있습니다. 둘째, '</target>
        </trans-unit>
        <trans-unit id="c15206d709fc8785c12654bcc271fe6f4c42516a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. For &amp;lsquo;</source>
          <target state="translated">'. '</target>
        </trans-unit>
        <trans-unit id="dc0e40f41f99905a57a0d4d5df269fc359a22807" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. For &lt;code&gt;nil&lt;/code&gt;-terminated lists, you can use either notation, but list notation is usually clearer and more convenient. When printing a list, the dotted pair notation is only used if the &lt;small&gt;CDR&lt;/small&gt; of a cons cell is not a list.</source>
          <target state="translated">'. 들어 &lt;code&gt;nil&lt;/code&gt; 로 끝나는 목록, 당신도 표기를 사용할 수 있지만 목록 표기법은 일반적으로 명확하고 더 편리합니다. 목록을 인쇄 할 때 점선 표기법은 cons 셀 의 &lt;small&gt;CDR&lt;/small&gt; 이 목록이 아닌 경우에만 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="5adab14b4c2596d0b1e0f2f9383d94df6c450797" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. For example, &amp;lsquo;</source>
          <target state="translated">'. 예 : '</target>
        </trans-unit>
        <trans-unit id="d3ccaa08216b0003d5a6887a2f3bb30d14ddf518" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. For example, &lt;code&gt;Canonical_Combining_Class&lt;/code&gt; becomes &lt;code&gt;canonical-combining-class&lt;/code&gt;. However, sometimes we shorten the names to make their use easier.</source>
          <target state="translated">'. 예를 들어 &lt;code&gt;Canonical_Combining_Class&lt;/code&gt; 는 &lt;code&gt;canonical-combining-class&lt;/code&gt; 가 됩니다. 그러나 때로는 사용하기 쉽도록 이름을 줄입니다.</target>
        </trans-unit>
        <trans-unit id="7a6554765a74201f045996ef2c9444441def4729" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. For example, dragging the mouse with button 2 held down generates a &lt;code&gt;drag-mouse-2&lt;/code&gt; event. The second and third elements of the event give the starting and ending position of the drag, as mouse position lists (see &lt;a href=&quot;click-events#Click-Events&quot;&gt;Click Events&lt;/a&gt;). You can access the second element of any mouse event in the same way. However, the drag event may end outside the boundaries of the frame that was initially selected. In that case, the third element&amp;rsquo;s position list contains that frame in place of a window.</source>
          <target state="translated">'. 예를 들어, 버튼 2를 누른 상태에서 마우스를 &lt;code&gt;drag-mouse-2&lt;/code&gt; 하면 drag-mouse-2 이벤트가 생성됩니다. 이벤트의 두 번째 및 세 번째 요소는 마우스 위치 목록으로 드래그의 시작 및 끝 위치를 제공합니다 ( &lt;a href=&quot;click-events#Click-Events&quot;&gt;클릭 이벤트&lt;/a&gt; 참조 ). 같은 방식으로 마우스 이벤트의 두 번째 요소에 액세스 할 수 있습니다. 그러나 드래그 이벤트는 처음에 선택한 프레임의 경계 밖에서 끝날 수 있습니다. 이 경우 세 번째 요소의 위치 목록에는 창 대신 해당 프레임이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="13af62e71e2ed62cc31a5b3b908923935f085ce2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. For example, the regular expression that matches the &amp;lsquo;</source>
          <target state="translated">'. 예를 들어, '</target>
        </trans-unit>
        <trans-unit id="e34901926b6215f3fc0c34c033c7d77570e136f5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. For example:</source>
          <target state="translated">'. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0a00c3f523b24ed6aa68808921edff61bc78ec43" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. For more serious errors, the caller should usually not call &lt;code&gt;after-find-file&lt;/code&gt;.</source>
          <target state="translated">'. 더 심각한 오류의 경우 호출자는 일반적으로 &lt;code&gt;after-find-file&lt;/code&gt; 을 호출하지 않아야 합니다 .</target>
        </trans-unit>
        <trans-unit id="96a6031b28740b83c68cd6e394a2e32fcfd51dbf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If &lt;var&gt;device&lt;/var&gt; is a frame, this function returns that frame&amp;rsquo;s terminal; &lt;code&gt;nil&lt;/code&gt; means the selected frame. Finally, if &lt;var&gt;device&lt;/var&gt; is a terminal object that represents a live terminal, that terminal is returned. The function signals an error if its argument is none of the above.</source>
          <target state="translated">'. 경우 &lt;var&gt;device&lt;/var&gt; 프레임, 프레임의 단말이 해당 함수 리턴이고; &lt;code&gt;nil&lt;/code&gt; 은 선택된 프레임을 의미합니다. 마지막으로 &lt;var&gt;device&lt;/var&gt; 가 라이브 터미널을 나타내는 터미널 객체이면 해당 터미널이 반환됩니다. 이 함수는 인수가 위에없는 경우 오류 신호를 보냅니다.</target>
        </trans-unit>
        <trans-unit id="3d420d77d9d35f5350119833c36d23337a9acf8e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If &lt;var&gt;name&lt;/var&gt; is a remote file name, the local part of &lt;var&gt;name&lt;/var&gt; (see &lt;a href=&quot;magic-file-names#Magic-File-Names&quot;&gt;Magic File Names&lt;/a&gt;) is quoted. If &lt;var&gt;name&lt;/var&gt; is already a quoted file name, &lt;var&gt;name&lt;/var&gt; is returned unchanged.</source>
          <target state="translated">'. 경우 &lt;var&gt;name&lt;/var&gt; 원격 파일 이름의 로컬 부분 &lt;var&gt;name&lt;/var&gt; (참조 &lt;a href=&quot;magic-file-names#Magic-File-Names&quot;&gt;매직 파일 이름을&lt;/a&gt; 인용). 경우 &lt;var&gt;name&lt;/var&gt; 이미 인용 된 파일 이름이며, &lt;var&gt;name&lt;/var&gt; 변경되지 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="f14284b6330372b5a8699e400c1d5d1354e83cf4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If &lt;var&gt;name&lt;/var&gt; is a remote file name, the local part of &lt;var&gt;name&lt;/var&gt; is checked.</source>
          <target state="translated">'. 경우 &lt;var&gt;name&lt;/var&gt; 원격 파일 이름의 로컬 부분 &lt;var&gt;name&lt;/var&gt; 확인됩니다.</target>
        </trans-unit>
        <trans-unit id="9f6ecdd04482a6f8b07743fe94a2a7ec46a35988" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If a double-down event has no binding, Emacs looks for an alternate binding as if the event were an ordinary button-down event. If it finds no binding that way either, the double-down event is ignored.</source>
          <target state="translated">'. 이중 다운 이벤트에 바인딩이없는 경우 Emacs는 이벤트가 일반 버튼 다운 이벤트 인 것처럼 대체 바인딩을 찾습니다. 그런 식으로 바인딩을 찾지 못하면 double-down 이벤트가 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="e1e6a1d60f047343795d3248611683b7cbc3227e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If a double-drag event has no binding, Emacs looks for an alternate binding as if the event were an ordinary drag.</source>
          <target state="translated">'. 이중 끌기 이벤트에 바인딩이 없으면 Emacs는 이벤트가 일반 끌기 인 것처럼 대체 바인딩을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="ee97193ac124230bc8e2851e3b47d2c7949413df" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If an invalid regular expression is passed to any of the search functions, an &lt;code&gt;invalid-regexp&lt;/code&gt; error is signaled.</source>
          <target state="translated">'. 유효하지 않은 정규식이 검색 함수에 전달되면 &lt;code&gt;invalid-regexp&lt;/code&gt; 오류가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="c43c1af8551069bcc23f0fcf9206beea58cd9891" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If any triple event has no binding, Emacs uses the binding that it would use for the corresponding double event.</source>
          <target state="translated">'. 트리플 이벤트에 바인딩이 없으면 Emacs는 해당 더블 이벤트에 사용할 바인딩을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="786afad75112f4b223d0194b0fe9ed5268777e73" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If it is &lt;code&gt;nil&lt;/code&gt;, they are displayed as octal escapes: a backslash followed by three octal digits, as in &amp;lsquo;</source>
          <target state="translated">'. 이 경우 &lt;code&gt;nil&lt;/code&gt; , 그들은 8 진수 이스케이프로 표시됩니다 : 백 슬래시가 같이 세 진수 숫자 뒤에 '</target>
        </trans-unit>
        <trans-unit id="eab5c635fd9e22fdb16917557714a82c895614e6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If it were anywhere else, the result would be &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">'. 다른 곳에 있다면 결과는 &lt;code&gt;nil&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="09432d6277531883880b5f9a58bf2c60976740e8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If the &lt;var&gt;n&lt;/var&gt;th subexpression never matched, an empty string is substituted.</source>
          <target state="translated">'. &lt;var&gt;n&lt;/var&gt; 번째 하위 표현식이 일치하지 않으면 빈 문자열이 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="92863a8a35d7bdcceaa2b9efd33b1642dcf657e8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If the character following the &amp;lsquo;</source>
          <target state="translated">'. 다음 문자가 '</target>
        </trans-unit>
        <trans-unit id="4a5475c92b03f9c7200836a9c6303120ee86224e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If the input is not one of the expected answers (</source>
          <target state="translated">'. 입력이 예상 답변 중 하나가 아닌 경우 (</target>
        </trans-unit>
        <trans-unit id="2f9fb271915928a85a5c6ed2f37081f8f2c8f29e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If you do not follow that convention, it will not cause serious problems, but these commands may give less-than-desirable results.</source>
          <target state="translated">'. 이 규칙을 따르지 않으면 심각한 문제가 발생하지 않지만 이러한 명령은 바람직하지 않은 결과를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="89e0f1a9db158118461ac0b7367081182e99fec9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. In Emacs Lisp, the delimiters for lists and vectors (&amp;lsquo;</source>
          <target state="translated">'. Emacs Lisp에서 목록과 벡터의 구분 기호 ( '</target>
        </trans-unit>
        <trans-unit id="1fc3aa88e01777813c1e0a8c689bf314f92c8e57" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. In most of the symbols, this is followed with a &amp;lsquo;</source>
          <target state="translated">'. 대부분의 기호에서 뒤에 '</target>
        </trans-unit>
        <trans-unit id="cc5fd2b1bdb505b556c6d9175851365facef0805" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. In such situations, it sometimes may be necessary to carefully parse the regexp from the start to determine which square brackets enclose a character alternative. For example, &amp;lsquo;</source>
          <target state="translated">'. 이러한 상황에서는 대체 문자를 포함하는 대괄호를 결정하기 위해 처음부터 정규 표현식을 신중하게 구문 분석해야 할 수 있습니다. 예 : '</target>
        </trans-unit>
        <trans-unit id="83671e8067adc46fcf4ffdbd64413d23aff097c4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. In the entry, &lt;var&gt;name&lt;/var&gt; is a symbol describing the kind of objects this entry represents, &lt;var&gt;size&lt;/var&gt; is the number of bytes used by each one, &lt;var&gt;used&lt;/var&gt; is the number of those objects that were found live in the heap, and optional &lt;var&gt;free&lt;/var&gt; is the number of those objects that are not live but that Emacs keeps around for future allocations. So an overall result is:</source>
          <target state="translated">'. 항목에서 &lt;var&gt;name&lt;/var&gt; 은이 항목이 나타내는 개체의 종류를 설명하는 기호이고, &lt;var&gt;size&lt;/var&gt; 는 각 항목에서 사용하는 바이트 수, &lt;var&gt;used&lt;/var&gt; 는 힙에서 라이브로 발견 된 개체 수, 선택 사항 인 &lt;var&gt;free&lt;/var&gt; 는 개수입니다. 라이브는 아니지만 Emacs가 향후 할당을 위해 유지하는 객체. 따라서 전반적인 결과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7d161f4c9c2d5c5f20181ee969791cd28af2be80" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. In the simplest case, the characters between the two brackets are what this character alternative can match.</source>
          <target state="translated">'. 가장 간단한 경우, 두 대괄호 사이의 문자는이 대체 문자가 일치 할 수있는 것입니다.</target>
        </trans-unit>
        <trans-unit id="ed46d4f68f388b8c89728dff64bd1d307c770875" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. In this case, you must specify the precise file name you want, except that, if Auto Compression mode is enabled, &lt;code&gt;load&lt;/code&gt; will still use &lt;code&gt;jka-compr-load-suffixes&lt;/code&gt; to find compressed versions. By specifying the precise file name and using &lt;code&gt;t&lt;/code&gt; for &lt;var&gt;nosuffix&lt;/var&gt;, you can prevent file names like</source>
          <target state="translated">'. 이 경우 원하는 정확한 파일 이름을 지정해야합니다. 단, 자동 압축 모드가 활성화 된 경우 &lt;code&gt;load&lt;/code&gt; 는 여전히 &lt;code&gt;jka-compr-load-suffixes&lt;/code&gt; 를 사용하여 압축 된 버전을 찾습니다. 정확한 파일 이름을 지정하고 &lt;var&gt;nosuffix&lt;/var&gt; 에 &lt;code&gt;t&lt;/code&gt; 를 사용 하면 다음과 같은 파일 이름을 방지 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c92ca67c5717c288379bdd9710e3b12196eec542" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. In this instance, you need to know the</source>
          <target state="translated">'. 이 경우, 당신은 알아야 할</target>
        </trans-unit>
        <trans-unit id="9401e7f65dc5de67271b7cea25dae316982838a0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. It also contains the Emacs process</source>
          <target state="translated">'. Emacs 프로세스도 포함합니다.</target>
        </trans-unit>
        <trans-unit id="f83d4ac61c9df0201304a44f0845b94ebd2bea81" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. It causes the format specification to convert the argument with the given number instead of the next argument. Field numbers start at 1. A format can contain either numbered or unnumbered format specifications but not both, except that &amp;lsquo;</source>
          <target state="translated">'. 형식 스펙이 다음 인수 대신 주어진 숫자로 인수를 변환하도록합니다. 필드 번호는 1부터 시작합니다. 형식은 '</target>
        </trans-unit>
        <trans-unit id="0325e44c83acce524655fd535d64063d868c79a9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. It is not easy to change this, as various Lisp files refer to</source>
          <target state="translated">'. 다양한 Lisp 파일이 참조하기 때문에 이것을 변경하는 것은 쉽지 않습니다.</target>
        </trans-unit>
        <trans-unit id="660a2931515004c6a26bede9de1851870a0b2207" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. It matches &amp;lsquo;</source>
          <target state="translated">'. '</target>
        </trans-unit>
        <trans-unit id="17ddd1b5810a7b7be0f5c04faeb0d55d093937fd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. It must have at least four elements; there is no maximum number, but only the first six elements have any normal use. They are:</source>
          <target state="translated">'. 최소한 4 개의 요소가 있어야합니다. 최대 개수는 없지만 처음 6 개 요소 만 정상적으로 사용됩니다. 그들은:</target>
        </trans-unit>
        <trans-unit id="6c32e555bd043ace8153528c942fea1141afec64" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. It returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">'. &lt;code&gt;nil&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e7a6758750fbc3643e324cb92b72b6b217dc315b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. It starts at 2 and keeps incrementing the number until it is not the name of an existing buffer.</source>
          <target state="translated">'. 2에서 시작하여 기존 버퍼의 이름이 아닐 때까지 숫자를 계속 증가시킵니다.</target>
        </trans-unit>
        <trans-unit id="fe954a715ef3135e354b3199514af046ba05ff59" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Letter case is ignored and there is no initial sign or final period. For example:</source>
          <target state="translated">'. 대소 문자는 무시되며 초기 부호 나 마지막 마침표가 없습니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="b313b00afd56ff0e4d0f4201e92ba270cc12e5d2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Likewise, you can write</source>
          <target state="translated">'. 마찬가지로 다음과 같이 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="920d116ef31dce31f371939ed945afe9a2b64c10" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Normally these characters are printed as actual newlines and formfeeds.</source>
          <target state="translated">'. 일반적으로 이러한 문자는 실제 줄 바꿈 및 용지 공급으로 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="c8d656e5c6efdb5d777c45caff340de0c360f2fe" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Normally this variable is &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">'. 일반적으로이 변수는 &lt;code&gt;nil&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f5033799763d08b021660d520078ce1d7313d968" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Note that &amp;lsquo;</source>
          <target state="translated">'. '</target>
        </trans-unit>
        <trans-unit id="952a240e8d4ff59265a8614f5e5ad27ca364e2d6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Note that if &lt;var&gt;file&lt;/var&gt; is a symbolic link, &lt;code&gt;vc-responsible-backend&lt;/code&gt; will not resolve it&amp;mdash;the backend of the symbolic link file itself is reported. To get the backend VC of the file to which &lt;var&gt;file&lt;/var&gt; refers, wrap &lt;var&gt;file&lt;/var&gt; with a symbolic link resolving function such as &lt;code&gt;file-chase-links&lt;/code&gt;:</source>
          <target state="translated">'. 경우 참고 &lt;var&gt;file&lt;/var&gt; 심볼릭 링크이며, &lt;code&gt;vc-responsible-backend&lt;/code&gt; IT-자체가보고되는 심볼릭 링크 파일의 백엔드가 해결되지 않습니다. &lt;var&gt;file&lt;/var&gt; 참조 하는 파일 의 백엔드 VC를 가져 오려면 &lt;code&gt;file-chase-links&lt;/code&gt; 와 같은 심볼릭 링크 해결 함수로 파일을 래핑 &lt;var&gt;file&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="a042478bb7b805167a4e3dc4622510eb66219528" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Note that the default mode line construct truncates this to three characters.</source>
          <target state="translated">'. 기본 모드 라인 구성은 이것을 세 문자로 자릅니다.</target>
        </trans-unit>
        <trans-unit id="11f821e083cd0266b540825f770e25afc7f591c9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Note that the location of point, shown in the usual fashion, has no effect.</source>
          <target state="translated">'. 일반적인 방식으로 표시된 점의 위치는 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="aab99fbafa26397628ee2ebabc8fedd3e1efe586" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Note that this is not a subcategory of &lt;code&gt;file-error&lt;/code&gt;, because it pertains to the Lisp reader, not to file I/O. See &lt;a href=&quot;input-functions#Input-Functions&quot;&gt;Input Functions&lt;/a&gt;.</source>
          <target state="translated">'. 이것은 파일 I / O가 아니라 Lisp 리더와 관련이 있기 때문에 &lt;code&gt;file-error&lt;/code&gt; 의 하위 범주가 아닙니다 . &lt;a href=&quot;input-functions#Input-Functions&quot;&gt;입력 함수를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="812a48de1a51edc7cb8f75b50065813f0710bb67" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Note that this technique may be inconvenient when the mode needs to limit the initial character of a name to a smaller set of characters than are allowed in the rest of a name.</source>
          <target state="translated">'. 모드가 이름의 초기 문자를 나머지 이름에서 허용되는 것보다 더 작은 문자 세트로 제한해야하는 경우이 기술이 불편할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1275c6b0d8f2ab8404ce559438e61304735bf9d0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Note that, if the monitor is not the primary monitor, some of the coordinates might be negative.</source>
          <target state="translated">'. 모니터가 기본 모니터가 아닌 경우 일부 좌표가 음수 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a699b01aa70bc4021daead05db706585b9646693" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. On MS-DOS the relationship is more complicated.</source>
          <target state="translated">'. MS-DOS에서는 관계가 더 복잡합니다.</target>
        </trans-unit>
        <trans-unit id="89ad4af2ba16b71d599aa8b0b16ece9bb49d7d60" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. On MS-Windows, quoting for &amp;lsquo;</source>
          <target state="translated">'. MS-Windows에서 '</target>
        </trans-unit>
        <trans-unit id="68b0c22b9a7c53dac6af3537f1e7a53d27509fdb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Other formats may be problematic; for example, &amp;lsquo;</source>
          <target state="translated">'. 다른 형식은 문제가 될 수 있습니다. 예 : '</target>
        </trans-unit>
        <trans-unit id="fa13adab25eeab730e17e5f7623285de995402f1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Recursive minibuffers are named by incrementing the number at the end of the name. (The names begin with a space so that they won&amp;rsquo;t show up in normal buffer lists.) Of several recursive minibuffers, the innermost (or most recently entered) is the active minibuffer. We usually call this &lt;em&gt;the&lt;/em&gt; minibuffer. You can permit or forbid recursive minibuffers by setting the variable &lt;code&gt;enable-recursive-minibuffers&lt;/code&gt;, or by putting properties of that name on command symbols (See &lt;a href=&quot;recursive-mini#Recursive-Mini&quot;&gt;Recursive Mini&lt;/a&gt;.)</source>
          <target state="translated">'. 재귀 미니 버퍼는 이름 끝에있는 숫자를 증가시켜 명명됩니다. (이름은 일반 버퍼 목록에 표시되지 않도록 공백으로 시작합니다.) 여러 재귀 미니 버퍼 중 가장 안쪽 (또는 가장 최근에 입력 한)은 활성 미니 버퍼입니다. 우리는 일반적으로이 전화 미니 버퍼. &lt;code&gt;enable-recursive-minibuffers&lt;/code&gt; 변수를 설정 하거나 명령 기호에 해당 이름의 속성을 입력하여 &lt;a href=&quot;recursive-mini#Recursive-Mini&quot;&gt;재귀 미니&lt;/a&gt; 버퍼를 허용하거나 금지 할 수 있습니다 ( Recursive Mini 참조 ).&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1eb6fb51d0b937f80387af624efa9250bf90f772" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;accessing-variables#Accessing-Variables&quot;&gt;Accessing Variables&lt;/a&gt;.</source>
          <target state="translated">'. &lt;a href=&quot;accessing-variables#Accessing-Variables&quot;&gt;변수 액세스를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8da730b30acac0cce8f9cdfd9cce6dd48f5a6bb4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;argument-list#Argument-List&quot;&gt;Argument List&lt;/a&gt;.</source>
          <target state="translated">'. &lt;a href=&quot;argument-list#Argument-List&quot;&gt;인수 목록을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c7d964c8d1a648402b3d2d8f63175a8dbe8e07a4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;buffer-file-name#Buffer-File-Name&quot;&gt;Buffer File Name&lt;/a&gt;, for functions and variables that access the visited file name of a buffer or that find an existing buffer by its visited file name.</source>
          <target state="translated">'. &lt;a href=&quot;buffer-file-name#Buffer-File-Name&quot;&gt;버퍼&lt;/a&gt; 의 방문한 파일 이름에 액세스하거나 방문한 파일 이름으로 기존 버퍼를 찾는 함수 및 변수에 대해서는 버퍼 파일 이름을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b6932fa39d1d0a56a1acc983bb1d8304a0853076" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;catch-and-throw#Catch-and-Throw&quot;&gt;Catch and Throw&lt;/a&gt;.</source>
          <target state="translated">'. &lt;a href=&quot;catch-and-throw#Catch-and-Throw&quot;&gt;Catch and Throw를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6d835b0439cdc56eea14d68848f9fc4f2d68fec1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;character-motion#Character-Motion&quot;&gt;Character Motion&lt;/a&gt;.</source>
          <target state="translated">'. &lt;a href=&quot;character-motion#Character-Motion&quot;&gt;캐릭터 모션을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6ff3b798a1ea12a41e7aee0f8afdeb3efcdfe4e4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;character-type#Character-Type&quot;&gt;Character Type&lt;/a&gt;.</source>
          <target state="translated">'. &lt;a href=&quot;character-type#Character-Type&quot;&gt;문자 유형을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cc7df82090928974419a9818517d487d065edb62" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;color-names#Color-Names&quot;&gt;Color Names&lt;/a&gt;.</source>
          <target state="translated">'. &lt;a href=&quot;color-names#Color-Names&quot;&gt;색상 이름을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7311b04bec5a42fbe3f2b3d769165aeeb5e8009e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;errors#Errors&quot;&gt;Errors&lt;/a&gt;.</source>
          <target state="translated">'. &lt;a href=&quot;errors#Errors&quot;&gt;오류를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0f11bdbe8d58d482196546474b48331d4a5340b3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;function-cells#Function-Cells&quot;&gt;Function Cells&lt;/a&gt;.</source>
          <target state="translated">'. &lt;a href=&quot;function-cells#Function-Cells&quot;&gt;기능 셀을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c00d3c273c37139c1fa00d5c10fc880035a5e8a1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;function-indirection#Function-Indirection&quot;&gt;Function Indirection&lt;/a&gt;.</source>
          <target state="translated">'. &lt;a href=&quot;function-indirection#Function-Indirection&quot;&gt;함수 간접&lt;/a&gt; 참조 .</target>
        </trans-unit>
        <trans-unit id="2339ffb1d0a728a9ab5091b45827cfd0262a46cf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Edit-Keyboard-Macro.html#Edit-Keyboard-Macro&quot;&gt;Edit Keyboard Macro&lt;/a&gt; in</source>
          <target state="translated">'. 의 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Edit-Keyboard-Macro.html#Edit-Keyboard-Macro&quot;&gt;키보드 매크로 편집을&lt;/a&gt; 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="8a22c01f6694975280688068f654af727fd48a93" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/dbus/Errors-and-Events.html#Errors-and-Events&quot;&gt;Errors and Events&lt;/a&gt; in</source>
          <target state="translated">'. 참조 &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/dbus/Errors-and-Events.html#Errors-and-Events&quot;&gt;오류 및 이벤트&lt;/a&gt; 에</target>
        </trans-unit>
        <trans-unit id="bd82692f132c70466eaada657ab683b51b064435" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;images#Images&quot;&gt;Images&lt;/a&gt;.</source>
          <target state="translated">'. &lt;a href=&quot;images#Images&quot;&gt;이미지를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="beae9936e8492d297bd98e80b412895ad89dcda8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;lisp-and-coding-systems#Lisp-and-Coding-Systems&quot;&gt;Lisp and Coding Systems&lt;/a&gt;.</source>
          <target state="translated">'. &lt;a href=&quot;lisp-and-coding-systems#Lisp-and-Coding-Systems&quot;&gt;Lisp 및 코딩 시스템을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7c41251b9b7b1c45ce1d56d76bf0f93d7e5e1418" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;printed-representation#Printed-Representation&quot;&gt;Printed Representation&lt;/a&gt;. This error can also be raised by commands like &lt;code&gt;eval-expression&lt;/code&gt; when there&amp;rsquo;s text following an expression. In that case, the message is &amp;lsquo;</source>
          <target state="translated">'. &lt;a href=&quot;printed-representation#Printed-Representation&quot;&gt;인쇄 된 표현을&lt;/a&gt; 참조하십시오 . 이 오류는 &lt;code&gt;eval-expression&lt;/code&gt; 뒤에 텍스트가있을 때 eval-expression 과 같은 명령으로도 발생할 수 있습니다 . 이 경우 메시지는 '</target>
        </trans-unit>
        <trans-unit id="cc08ed04cdffbd5fd65c26146270f9bbb1a04702" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;quitting#Quitting&quot;&gt;Quitting&lt;/a&gt;.</source>
          <target state="translated">'. 참조 &lt;a href=&quot;quitting#Quitting&quot;&gt;끝내기를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="589de1814a7fa1ad0f947d9308fc5521cb679891" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;read-only-buffers#Read-Only-Buffers&quot;&gt;Read Only Buffers&lt;/a&gt;.</source>
          <target state="translated">'. &lt;a href=&quot;read-only-buffers#Read-Only-Buffers&quot;&gt;읽기 전용 버퍼를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e2cb54699a2c2524bd274091a851bcc89919846e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;regular-expressions#Regular-Expressions&quot;&gt;Regular Expressions&lt;/a&gt;.</source>
          <target state="translated">'. &lt;a href=&quot;regular-expressions#Regular-Expressions&quot;&gt;정규식을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="da9e031a0e96e1f92cd69f013bf68b178fcbfc7b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;searching-and-matching#Searching-and-Matching&quot;&gt;Searching and Matching&lt;/a&gt;.</source>
          <target state="translated">'. &lt;a href=&quot;searching-and-matching#Searching-and-Matching&quot;&gt;검색 및 일치를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0bb7aa62695d7aa685b32da8243848e09cce0326" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;signaling-errors#Signaling-Errors&quot;&gt;Signaling Errors&lt;/a&gt;, and see &lt;a href=&quot;searching-and-matching#Searching-and-Matching&quot;&gt;Searching and Matching&lt;/a&gt;. This is used for searching in Info files, see &lt;a href=&quot;http://www.gnu.org/software/texinfo/manual/info/html_node/Search-Text.html#Search-Text&quot;&gt;Search Text&lt;/a&gt; in</source>
          <target state="translated">'. 참조 &lt;a href=&quot;signaling-errors#Signaling-Errors&quot;&gt;오류 시그널링&lt;/a&gt; , 볼 &lt;a href=&quot;searching-and-matching#Searching-and-Matching&quot;&gt;검색 및 매칭&lt;/a&gt; . 이것은 정보 파일에서 검색에 사용되는 참조 &lt;a href=&quot;http://www.gnu.org/software/texinfo/manual/info/html_node/Search-Text.html#Search-Text&quot;&gt;검색 텍스트&lt;/a&gt; 의를</target>
        </trans-unit>
        <trans-unit id="abd11e7bc3c3e1d55ae3839cab31be824a78387f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;the-mark#The-Mark&quot;&gt;The Mark&lt;/a&gt;.</source>
          <target state="translated">'. &lt;a href=&quot;the-mark#The-Mark&quot;&gt;마크를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9af09d0863a34e91acd72eabe4a0bead8eca76e7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;type-predicates#Type-Predicates&quot;&gt;Type Predicates&lt;/a&gt;.</source>
          <target state="translated">'. &lt;a href=&quot;type-predicates#Type-Predicates&quot;&gt;유형 술어를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="78a66d5295da80a184cf1e0415df5ae43abf9ae5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;variable-aliases#Variable-Aliases&quot;&gt;Variable Aliases&lt;/a&gt;.</source>
          <target state="translated">'. &lt;a href=&quot;variable-aliases#Variable-Aliases&quot;&gt;변수 별칭을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0d2dc46695cab2abafe665a0ab23ab1e7e831602" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;Window Configurations&lt;/a&gt;, for a description of several functions related to window configurations.</source>
          <target state="translated">'. &lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;창 구성&lt;/a&gt; 과 관련된 여러 기능에 대한 설명은 창 구성을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6ee7cff7fa0778ba210ce16dfbd4f06464fbc8a2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Shy groups are particularly useful for mechanically-constructed regular expressions, because they can be added automatically without altering the numbering of ordinary, non-shy groups.</source>
          <target state="translated">'. 부끄러워하지 않는 그룹의 번호 매기기를 변경하지 않고 자동으로 추가 될 수 있기 때문에 Shy 그룹은 기계적으로 구성된 정규식에 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="708084086d79648a8110eed3665d422c8ffd666f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Similarly, the modifiers list for an</source>
          <target state="translated">'. 마찬가지로 수정 자 목록은</target>
        </trans-unit>
        <trans-unit id="5cf026f0f492ab0affae3c0f66630e78e42df892" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. So you should not quote these characters when they have no special meaning either. This would not clarify anything, since backslashes can legitimately precede these characters where they &lt;em&gt;have&lt;/em&gt; special meaning, as in &amp;lsquo;</source>
          <target state="translated">'. 따라서 특별한 의미가없는 경우 이러한 문자를 인용해서는 안됩니다. 백 슬래시가 '에서와 같이 특별한 의미 &lt;em&gt;가&lt;/em&gt; 있는 이러한 문자 앞에 합법적으로 선행 할 수 있기 때문에 이것은 명확하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cd1d2047c2fd7918d45532fbecf28b3cc52c2b6c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Some characters, however, are displayed specially. For example, the formfeed character (character code 12) is usually displayed as a sequence of two glyphs, &amp;lsquo;</source>
          <target state="translated">'. 그러나 일부 문자는 특별히 표시됩니다. 예를 들어, 용지 공급 문자 (문자 코드 12)는 일반적으로 두 개의 글리프 ( ')의 시퀀스로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="14eea4763dde3ddf5ce53a86a1896eb1fd318bb7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Still trivial. To do something more powerful, you need to use one of the special regular expression constructs.</source>
          <target state="translated">'. 여전히 사소합니다. 더 강력한 작업을 수행하려면 특수 정규식 구조 중 하나를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="e07226d2be075ac9dda9196295d008c4e3fc810c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Such names require no special punctuation; the characters of the name suffice as long as the name does not look like a number. (If it does, write a &amp;lsquo;</source>
          <target state="translated">'. 이러한 이름에는 특별한 구두점이 필요하지 않습니다. 이름이 숫자처럼 보이지 않는 한 이름의 문자로 충분합니다. (그렇다면 '</target>
        </trans-unit>
        <trans-unit id="906bb999bf9ee508c31bffefdbc7d73f14771f08" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. That way, none of these functions will block.</source>
          <target state="translated">'. 이렇게하면 이러한 기능이 차단되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fd1611dd4569a88af914da509268caa5134b1296" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The &amp;lsquo;</source>
          <target state="translated">'. '</target>
        </trans-unit>
        <trans-unit id="37628035fbcce70009f881ac679633ada127de15" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The &lt;var&gt;count&lt;/var&gt;th subexpression is found by counting occurrences of &amp;lsquo;</source>
          <target state="translated">'. &lt;var&gt;count&lt;/var&gt; 번째 부분 식의 계산 발생에 의해 발견 '</target>
        </trans-unit>
        <trans-unit id="12baa4d667ec3a90f60c245e7e86979c6d6e442a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The &lt;var&gt;target&lt;/var&gt; argument is treated only as a string; it need not name an existing file. If &lt;var&gt;ok-if-already-exists&lt;/var&gt; is an integer, indicating interactive use, then leading &amp;lsquo;</source>
          <target state="translated">'. &lt;var&gt;target&lt;/var&gt; 인수은 문자열로 처리됩니다; 기존 파일의 이름을 지정할 필요가 없습니다. 경우 &lt;var&gt;ok-if-already-exists&lt;/var&gt; '다음, 대화 형 사용을 나타내는 선도, 정수</target>
        </trans-unit>
        <trans-unit id="8b6cfc9f76c474ed48699fb8ae94e5576e6036f0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The Unicode Standard defines code points only up to &amp;lsquo;</source>
          <target state="translated">'. 유니 코드 표준은 최대 '</target>
        </trans-unit>
        <trans-unit id="b29a3c4f0556ebcb72ab0596e39a357e6936b460" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The beginning of the entire match is at the 9th character of the buffer (&amp;lsquo;</source>
          <target state="translated">'. 전체 일치의 시작은 버퍼의 9 번째 문자 ( '</target>
        </trans-unit>
        <trans-unit id="f37afdff242ec169a2f84592cd3cc3b9468bb20d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The binding to use is the command &lt;var&gt;def&lt;/var&gt;, and &lt;var&gt;key&lt;/var&gt; is the fake function key symbol in the prefix keymap. The remaining arguments &lt;var&gt;props&lt;/var&gt; are additional property list elements to add to the menu item specification.</source>
          <target state="translated">'. 사용할 바인딩은 &lt;var&gt;def&lt;/var&gt; 명령 이고 &lt;var&gt;key&lt;/var&gt; 는 접두사 keymap의 가짜 기능 키 기호입니다. 나머지 인수 &lt;var&gt;props&lt;/var&gt; 은 메뉴 항목 사양에 추가 할 추가 속성 목록 요소입니다.</target>
        </trans-unit>
        <trans-unit id="e50bcddf2c441313d584f0d54ae74d7b638a4786" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The character codes for these non-</source>
          <target state="translated">'. 이러한 비의 문자 코드</target>
        </trans-unit>
        <trans-unit id="793c3d36052d9aa3c00cec57f54fd273ea5df407" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The elements of the spliced list become elements at the same level as the other elements of the resulting list. The equivalent code without using &amp;lsquo;</source>
          <target state="translated">'. 스 플라이 싱 된 목록의 요소는 결과 목록의 다른 요소와 동일한 수준의 요소가됩니다. '를 사용하지 않는 동등한 코드</target>
        </trans-unit>
        <trans-unit id="cad679c43232df637e874176b4445335999ad74d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The first message conveys no additional information beyond what&amp;rsquo;s in the second, so logging the second message discards the first from the log.</source>
          <target state="translated">'. 첫 번째 메시지는 두 번째 메시지 이외의 추가 정보를 전달하지 않으므로 두 번째 메시지를 로깅하면 첫 번째 메시지가 로그에서 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="2970f815d2c99b66e86ad69cb3e0cec486a88a95" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The first part, &lt;var&gt;hostname&lt;/var&gt;, specifies the name of the machine to which the display is physically connected. The second part, &lt;var&gt;displaynumber&lt;/var&gt;, is a zero-based number that identifies one or more monitors connected to that machine that share a common keyboard and pointing device (mouse, tablet, etc.). The third part, &lt;var&gt;screennumber&lt;/var&gt;, identifies a zero-based screen number (a separate monitor) that is part of a single monitor collection on that X server. When you use two or more screens belonging to one server, Emacs knows by the similarity in their names that they share a single keyboard.</source>
          <target state="translated">'. 첫 번째 부분 인 &lt;var&gt;hostname&lt;/var&gt; 은 디스플레이가 물리적으로 연결된 시스템의 이름을 지정합니다. 두 번째 부분 인 &lt;var&gt;displaynumber&lt;/var&gt; 는 공통 키보드 및 포인팅 장치 (마우스, 태블릿 등)를 공유하는 해당 컴퓨터에 연결된 하나 이상의 모니터를 식별하는 0부터 시작하는 숫자입니다. 세 번째 부분 인 &lt;var&gt;screennumber&lt;/var&gt; 는 해당 X 서버에서 단일 모니터 컬렉션의 일부인 0부터 시작하는 화면 번호 (별도의 모니터)를 식별합니다. 하나의 서버에 속한 두 개 이상의 화면을 사용할 때 Emacs는 이름의 유사성을 통해 단일 키보드를 공유한다는 것을 압니다.</target>
        </trans-unit>
        <trans-unit id="1fd22dd646a09e9239d462916bff3e97ef3f5f54" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The former is used for &lt;code&gt;message-box&lt;/code&gt; (see &lt;a href=&quot;displaying-messages#message_002dbox&quot;&gt;message-box&lt;/a&gt;). (On text terminals, the box title is not displayed.)</source>
          <target state="translated">'. 전자는 사용되는 &lt;code&gt;message-box&lt;/code&gt; (참조 &lt;a href=&quot;displaying-messages#message_002dbox&quot;&gt;메시지 상자&lt;/a&gt; ). (텍스트 터미널에서는 상자 제목이 표시되지 않습니다.)</target>
        </trans-unit>
        <trans-unit id="7359acff8f50c55cfea4a3c96b0f985db936f774" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The latter is also used in Lisp strings, so this function can handle those as well.</source>
          <target state="translated">'. 후자는 Lisp 문자열에서도 사용되므로이 함수는 이러한 문자열도 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="852e94652163a71ebbf771fc8cdd98e3887a9eb9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The major mode command runs this normal hook with &lt;code&gt;run-mode-hooks&lt;/code&gt; as the very last thing it does. See &lt;a href=&quot;mode-hooks#Mode-Hooks&quot;&gt;Mode Hooks&lt;/a&gt;. Most minor modes have mode hooks too.</source>
          <target state="translated">'. 주 모드 명령은 실행 모드 후크를 사용하여이 일반 후크를 마지막으로 &lt;code&gt;run-mode-hooks&lt;/code&gt; . &lt;a href=&quot;mode-hooks#Mode-Hooks&quot;&gt;모드 후크를&lt;/a&gt; 참조하십시오 . 대부분의 마이너 모드에는 모드 후크도 있습니다.</target>
        </trans-unit>
        <trans-unit id="a5baebd66099b401b4fcb10b83cff4483027a3b5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The next conversion will start with the wrong data straight away.</source>
          <target state="translated">'. 다음 변환은 잘못된 데이터로 바로 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="1d0b8ed2d6113a855e1100f3ed92552702615a37" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The number is unique for each connection in the Emacs session.</source>
          <target state="translated">'. 이 번호는 Emacs 세션의 각 연결에 대해 고유합니다.</target>
        </trans-unit>
        <trans-unit id="91c8923474bd22278c1eb58f69beafd83ed9a013" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The rest of the list should consist of zero or more property-value pairs specifying the hash table&amp;rsquo;s properties and initial contents. The properties and values are read literally. Valid property names are &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;weakness&lt;/code&gt;, &lt;code&gt;rehash-size&lt;/code&gt;, &lt;code&gt;rehash-threshold&lt;/code&gt;, and &lt;code&gt;data&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; property should be a list of key-value pairs for the initial contents; the other properties have the same meanings as the matching &lt;code&gt;make-hash-table&lt;/code&gt; keywords (&lt;code&gt;:size&lt;/code&gt;, &lt;code&gt;:test&lt;/code&gt;, etc.), described above.</source>
          <target state="translated">'. 나머지 목록은 해시 테이블의 속성과 초기 내용을 지정하는 0 개 이상의 속성-값 쌍으로 구성되어야합니다. 속성과 값은 문자 그대로 읽습니다. 유효한 속성 이름은 &lt;code&gt;size&lt;/code&gt; , &lt;code&gt;test&lt;/code&gt; , &lt;code&gt;weakness&lt;/code&gt; , &lt;code&gt;rehash-size&lt;/code&gt; , &lt;code&gt;rehash-threshold&lt;/code&gt; 및 &lt;code&gt;data&lt;/code&gt; 입니다. &lt;code&gt;data&lt;/code&gt; 속성의 초기 내용에 대한 키 - 값 쌍들의리스트되어야한다 다른 속성은 위에서 설명한 &lt;code&gt;make-hash-table&lt;/code&gt; 키워드 ( &lt;code&gt;:size&lt;/code&gt; , &lt;code&gt;:test&lt;/code&gt; 등) 와 동일한 의미를 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="9d46cc9c8482c75316f352d083633117c60ce1c4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The resulting expression looks like this:</source>
          <target state="translated">'. 결과 표현식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="000bce74e71c14f772e17a4725ffb2983c6c237c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The special option</source>
          <target state="translated">'. 특별한 옵션</target>
        </trans-unit>
        <trans-unit id="2919e410441cd3fa14c70862d86e23d936c19ddd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The title can be anything, though implementations are free not to display it.</source>
          <target state="translated">'. 제목은 무엇이든 될 수 있지만 구현은 자유롭게 표시 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="e00cf602888dbc607dc52fd64e22b253efc27627" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The tooltip text can be up to 127 characters long (63 on Windows versions before W2K). Longer strings will be truncated.</source>
          <target state="translated">'. 도구 설명 텍스트는 최대 127 자 (W2K 이전 Windows 버전에서는 63 자)까지 가능합니다. 더 긴 문자열은 잘립니다.</target>
        </trans-unit>
        <trans-unit id="e83a72ffdf79671929a84095de854f2be8408d18" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The user must type</source>
          <target state="translated">'. 사용자는 입력해야합니다.</target>
        </trans-unit>
        <trans-unit id="ca8cca00f15f099c0463338b17073df8dcef4b8a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The user must type one of the expected responses; otherwise, the function responds &amp;lsquo;</source>
          <target state="translated">'. 사용자는 예상 응답 중 하나를 입력해야합니다. 그렇지 않으면 함수는 '</target>
        </trans-unit>
        <trans-unit id="6d2ead8c402d58d069a0a75b0ac5ba0038afde6c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The value is 2 because the first substring is greater at the second character.</source>
          <target state="translated">'. 첫 번째 부분 문자열이 두 번째 문자에서 더 크기 때문에 값은 2입니다.</target>
        </trans-unit>
        <trans-unit id="161102cc186fe64e67ec8696a8c4ec982a46cf83" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The value is an integer, or &lt;code&gt;nil&lt;/code&gt; if the character has no decimal digit value. For unassigned codepoints, the value is &lt;code&gt;nil&lt;/code&gt;, which means</source>
          <target state="translated">'. 값은 정수이거나 문자에 10 진수 값이없는 경우 &lt;code&gt;nil&lt;/code&gt; 입니다. 할당되지 않은 코드 포인트의 경우 값은 &lt;code&gt;nil&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="1df558a104e07868e3cbcf719429951a4fc4da12" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The value is an integer. Examples of such characters include compatibility subscript and superscript digits, for which the value is the corresponding number. For characters that don&amp;rsquo;t have any numeric value, and for unassigned codepoints, the value is &lt;code&gt;nil&lt;/code&gt;, which means</source>
          <target state="translated">'. 값은 정수입니다. 이러한 문자의 예에는 호환성 아래 첨자와 위 첨자 숫자가 포함되며 값은 해당 숫자입니다. 숫자 값이없는 문자 및 할당되지 않은 코드 포인트의 경우 값은 &lt;code&gt;nil&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="0ddb1fa3cf6e34b1f3363e5b6f36e2a8cc474f68" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The value of this property is a number. Examples of characters that have this property include fractions, subscripts, superscripts, Roman numerals, currency numerators, and encircled numbers. For example, the value of this property for the character U+2155 &lt;small&gt;VULGAR FRACTION ONE FIFTH&lt;/small&gt; is &lt;code&gt;0.2&lt;/code&gt;. For characters that don&amp;rsquo;t have any numeric value, and for unassigned codepoints, the value is &lt;code&gt;nil&lt;/code&gt;, which means</source>
          <target state="translated">'. 이 속성의 값은 숫자입니다. 이 속성이있는 문자의 예로는 분수, 아래 첨자, 위 첨자, 로마 숫자, 통화 분자 및 둘러싸여있는 숫자가 있습니다. 예를 들어 U + 2155 &lt;small&gt;VULGAR FRACTION ONE FIFTH&lt;/small&gt; 문자의이 속성 값 은 &lt;code&gt;0.2&lt;/code&gt; 입니다. 숫자 값이없는 문자 및 할당되지 않은 코드 포인트의 경우 값은 &lt;code&gt;nil&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="57464e10812884a2a7fdf8e2192323a75775afc5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The value should be a string or a symbol.</source>
          <target state="translated">'. 값은 문자열 또는 기호 여야합니다.</target>
        </trans-unit>
        <trans-unit id="e98566487fca63f26672521f75752ff8b09e552a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. There is no reason to add a backslash before most characters. However, you must add a backslash before any of the characters &amp;lsquo;</source>
          <target state="translated">'. 대부분의 문자 앞에 백 슬래시를 추가 할 이유가 없습니다. 그러나 '문자'앞에 백 슬래시를 추가해야합니다.</target>
        </trans-unit>
        <trans-unit id="5e0e6b6040e359e05222db840c43e4cc73bbef06" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Therefore, the read syntax for a regular expression matching &amp;lsquo;</source>
          <target state="translated">'. 따라서 '와 일치하는 정규식에 대한 읽기 구문</target>
        </trans-unit>
        <trans-unit id="9bf973b7b01692cd39ee5163b36b22c75b948c67" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. These specification characters accept the &amp;lsquo;</source>
          <target state="translated">'. 이러한 사양 문자는 '</target>
        </trans-unit>
        <trans-unit id="cb2069f434d89c890103ae08358351f3a31fa354" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. They are &lt;em&gt;normal hooks&lt;/em&gt;, run by means of &lt;code&gt;run-hooks&lt;/code&gt;. The value of such a hook is a list of functions; the functions are called with no arguments and their values are completely ignored. The recommended way to put a new function on such a hook is to call &lt;code&gt;add-hook&lt;/code&gt;. See &lt;a href=&quot;hooks#Hooks&quot;&gt;Hooks&lt;/a&gt;, for more information about using hooks.</source>
          <target state="translated">'. 그들은있는 &lt;em&gt;정상 후크&lt;/em&gt; 에 의해 실행, &lt;code&gt;run-hooks&lt;/code&gt; . 이러한 후크의 가치는 함수 목록입니다. 함수는 인수없이 호출되며 해당 값은 완전히 무시됩니다. 이러한 후크에 새 함수를 배치하는 데 권장되는 방법은 &lt;code&gt;add-hook&lt;/code&gt; 을 호출하는 것 입니다. &lt;a href=&quot;hooks#Hooks&quot;&gt;후크 사용&lt;/a&gt; 에 대한 자세한 정보는 후크를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6c0441774ee83f80549b8d2a5a8e22cc03db7a33" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This binds &lt;code&gt;debug-on-error&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; while loading the init file, and bypasses the &lt;code&gt;condition-case&lt;/code&gt; which normally catches errors in the init file.</source>
          <target state="translated">'. 이것은 init 파일을로드하는 동안 &lt;code&gt;debug-on-error&lt;/code&gt; 를 &lt;code&gt;t&lt;/code&gt; 에 바인드 하고 일반적으로 init 파일에서 오류를 포착 하는 &lt;code&gt;condition-case&lt;/code&gt; 를 우회 합니다.</target>
        </trans-unit>
        <trans-unit id="05650f6565c7cb5517800d8261d59997f84ab135" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This causes Emacs to display the nested keymap using a separate &lt;em&gt;menu pane&lt;/em&gt;; the rest of the item string after the &amp;lsquo;</source>
          <target state="translated">'. 이로 인해 Emacs는 별도의 &lt;em&gt;메뉴 창을&lt;/em&gt; 사용하여 중첩 된 키맵을 표시합니다 . '뒤의 나머지 항목 문자열</target>
        </trans-unit>
        <trans-unit id="15182435e26097bab3e00fe7539278a0bf7847c0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This command takes care of switching to that mode in the current buffer, by setting various buffer-local variables such as a local keymap. See &lt;a href=&quot;major-mode-conventions#Major-Mode-Conventions&quot;&gt;Major Mode Conventions&lt;/a&gt;. Note that unlike minor modes there is no way to &amp;ldquo;turn off&amp;rdquo; a major mode, instead the buffer must be switched to a different one. However, you can temporarily &lt;em&gt;suspend&lt;/em&gt; a major mode and later &lt;em&gt;restore&lt;/em&gt; the suspended mode, see below.</source>
          <target state="translated">'. 이 명령은 로컬 키맵과 같은 다양한 버퍼 로컬 변수를 설정하여 현재 버퍼에서 해당 모드로의 전환을 처리합니다. &lt;a href=&quot;major-mode-conventions#Major-Mode-Conventions&quot;&gt;주요 모드 규칙을&lt;/a&gt; 참조하십시오 . 마이너 모드와 달리 메이저 모드를 &quot;끄는&quot;방법이 없으며 대신 버퍼를 다른 모드로 전환해야합니다. 그러나 일시적 으로 주 모드를 &lt;em&gt;일시 중지&lt;/em&gt; 하고 나중에 일시 중지 된 모드를 &lt;em&gt;복원&lt;/em&gt; 할 수 있습니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="d216d0272cb4897fcf3c66233f3dd47d81871679" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This construct skips the next &lt;var&gt;count&lt;/var&gt; characters. It also uses the &amp;lsquo;</source>
          <target state="translated">'. 이 구조는 다음 &lt;var&gt;count&lt;/var&gt; 문자를 건너 뜁니다 . 또한 '</target>
        </trans-unit>
        <trans-unit id="5816f84c39272f885290eee298a72b6c9d0c116a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This format specification is unusual in that its only form is plain &amp;lsquo;</source>
          <target state="translated">'. 이 형식 사양은 유일한 형식이 일반 '</target>
        </trans-unit>
        <trans-unit id="316f3bb4ab1f8ea0d64ff173acca0438022f0ab0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This happens when a circular structure is encountered. See &lt;a href=&quot;circular-objects#Circular-Objects&quot;&gt;Circular Objects&lt;/a&gt;.</source>
          <target state="translated">'. 이것은 원형 구조가 발견 될 때 발생합니다. &lt;a href=&quot;circular-objects#Circular-Objects&quot;&gt;원형 객체를&lt;/a&gt; 참고하십시오 .</target>
        </trans-unit>
        <trans-unit id="09bff7c889bdb5a4b33dee11801255ae7a83831f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This happens when attempting to assign values to &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;most-positive-fixnum&lt;/code&gt;, &lt;code&gt;most-negative-fixnum&lt;/code&gt;, and keyword symbols. It also happens when attempting to assign values to &lt;code&gt;enable-multibyte-characters&lt;/code&gt; and some other symbols whose direct assignment is not allowed for some reason. See &lt;a href=&quot;constant-variables#Constant-Variables&quot;&gt;Constant Variables&lt;/a&gt;.</source>
          <target state="translated">'. 이는 &lt;code&gt;nil&lt;/code&gt; , &lt;code&gt;t&lt;/code&gt; , &lt;code&gt;most-positive-fixnum&lt;/code&gt; , &lt;code&gt;most-negative-fixnum&lt;/code&gt; 및 키워드 기호에 값을 할당하려고 할 때 발생합니다 . 또한 &lt;code&gt;enable-multibyte-characters&lt;/code&gt; 를 활성화 하고 어떤 이유로 직접 할당이 허용되지 않는 다른 기호에 값을 할당하려고 할 때도 발생합니다 . &lt;a href=&quot;constant-variables#Constant-Variables&quot;&gt;상수 변수를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="75f592dac877729f6703ed64009997e93d7a39cf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This happens when certain syntax-parsing functions find invalid syntax or mismatched parentheses. Conventionally raised with three argument: a human-readable error message, the start of the obstacle that cannot be moved over, and the end of the obstacle. See &lt;a href=&quot;list-motion#List-Motion&quot;&gt;List Motion&lt;/a&gt;, and see &lt;a href=&quot;parsing-expressions#Parsing-Expressions&quot;&gt;Parsing Expressions&lt;/a&gt;.</source>
          <target state="translated">'. 특정 구문 구문 분석 함수가 유효하지 않은 구문이나 일치하지 않는 괄호를 찾을 때 발생합니다. 일반적으로 사람이 읽을 수있는 오류 메시지, 이동할 수없는 장애물의 시작 및 장애물의 끝이라는 세 가지 인수로 제기되었습니다. 참조 &lt;a href=&quot;list-motion#List-Motion&quot;&gt;목록 모션&lt;/a&gt; , 볼 &lt;a href=&quot;parsing-expressions#Parsing-Expressions&quot;&gt;구문 분석 표현식&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="318f0e093037067226b703cd3f50f1d5280b9791" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This happens when the &lt;code&gt;cl-assert&lt;/code&gt; macro fails a test. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/cl/Assertions.html#Assertions&quot;&gt;Assertions&lt;/a&gt; in</source>
          <target state="translated">'. 이것은 &lt;code&gt;cl-assert&lt;/code&gt; 매크로가 테스트에 실패 할 때 발생합니다. 다음 에서 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/cl/Assertions.html#Assertions&quot;&gt;어설 션&lt;/a&gt; 참조</target>
        </trans-unit>
        <trans-unit id="21a076e5d7d04b2f124f63daa11a44ed7155139e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This happens when trying to access an element beyond the range of a sequence, buffer, or other container-like object. See &lt;a href=&quot;sequences-arrays-vectors#Sequences-Arrays-Vectors&quot;&gt;Sequences Arrays Vectors&lt;/a&gt;, and see &lt;a href=&quot;text#Text&quot;&gt;Text&lt;/a&gt;.</source>
          <target state="translated">'. 이것은 시퀀스, 버퍼 또는 기타 컨테이너와 같은 객체의 범위를 벗어난 요소에 액세스하려고 할 때 발생합니다. 참조 &lt;a href=&quot;sequences-arrays-vectors#Sequences-Arrays-Vectors&quot;&gt;시퀀스 배열 벡터&lt;/a&gt; 및 참조 &lt;a href=&quot;text#Text&quot;&gt;텍스트&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ee0d4705c8bb4207d391f22dc73c8bbb2e3086cd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This is a subcategory of &lt;code&gt;buffer-read-only&lt;/code&gt;. See &lt;a href=&quot;special-properties#Special-Properties&quot;&gt;Special Properties&lt;/a&gt;.</source>
          <target state="translated">'. 이것은 &lt;code&gt;buffer-read-only&lt;/code&gt; 의 하위 범주입니다 . &lt;a href=&quot;special-properties#Special-Properties&quot;&gt;특수 속성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="95666866996419c404d9ef874e3cd2863c08ec2d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This is a subcategory of &lt;code&gt;range-error&lt;/code&gt;. This can happen with integers exceeding the &lt;code&gt;integer-width&lt;/code&gt; limit. See &lt;a href=&quot;integer-basics#Integer-Basics&quot;&gt;Integer Basics&lt;/a&gt;.</source>
          <target state="translated">'. 이것은 &lt;code&gt;range-error&lt;/code&gt; 의 하위 범주입니다 . 이는 &lt;code&gt;integer-width&lt;/code&gt; 제한을 초과하는 정수에서 발생할 수 있습니다 . &lt;a href=&quot;integer-basics#Integer-Basics&quot;&gt;Integer Basics를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="48a9681d36036edee101467989e10875fb905fcf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This is useful only when you call a primitive that is defined only on certain systems. Most primitives are always defined, so they will never give you a warning.</source>
          <target state="translated">'. 특정 시스템에서만 정의 된 기본 요소를 호출 할 때만 유용합니다. 대부분의 프리미티브는 항상 정의되어 있으므로 경고를 표시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5270a644dbe96004ce03d796db44c47e8b1011eb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This lasts until the next special &amp;lsquo;</source>
          <target state="translated">'. 이것은 다음 스페셜 '</target>
        </trans-unit>
        <trans-unit id="5bda5f2613d9531266fe2c54156a16ead54aaec8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This may be different from &amp;lsquo;</source>
          <target state="translated">'. 이것은 '와 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="81f287934ec906215054a3c0d5eb5ca99e14aac6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This occurs when trying to perform integer division by zero. See &lt;a href=&quot;numeric-conversions#Numeric-Conversions&quot;&gt;Numeric Conversions&lt;/a&gt;, and see &lt;a href=&quot;arithmetic-operations#Arithmetic-Operations&quot;&gt;Arithmetic Operations&lt;/a&gt;.</source>
          <target state="translated">'. 이것은 정수를 0으로 나누려고 할 때 발생합니다. 참조 &lt;a href=&quot;numeric-conversions#Numeric-Conversions&quot;&gt;숫자 변환을&lt;/a&gt; , 볼 &lt;a href=&quot;arithmetic-operations#Arithmetic-Operations&quot;&gt;산술 연산을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="414ff2267f9826d7bd13cd2d374b957d138e2861" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This variable is buffer-local in every buffer.</source>
          <target state="translated">'. 이 변수는 모든 버퍼에서 로컬 버퍼입니다.</target>
        </trans-unit>
        <trans-unit id="70581dcd87789833c6a0f3144cc5bd0f17aa6998" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Thus, &amp;lsquo;</source>
          <target state="translated">'. 따라서 '</target>
        </trans-unit>
        <trans-unit id="ca053ea1d986e2dfa62edc9c38303d448e2c4f99" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Thus, &lt;code&gt;&quot;a-zA-Z&quot;&lt;/code&gt; skips over all letters, stopping before the first nonletter, and &lt;code&gt;&quot;^a-zA-Z&quot;&lt;/code&gt; skips nonletters stopping before the first letter (see &lt;a href=&quot;regular-expressions#Regular-Expressions&quot;&gt;Regular Expressions&lt;/a&gt;). Character classes can also be used, e.g., &lt;code&gt;&quot;[:alnum:]&quot;&lt;/code&gt; (see &lt;a href=&quot;char-classes#Char-Classes&quot;&gt;Char Classes&lt;/a&gt;).</source>
          <target state="translated">'. 따라서 &lt;code&gt;&quot;a-zA-Z&quot;&lt;/code&gt; 는 모든 문자를 건너 뛰고 첫 번째 문자가 아닌 문자 앞에 멈 춥니 다. &lt;code&gt;&quot;^a-zA-Z&quot;&lt;/code&gt; 는 첫 번째 문자 앞에있는 문자가 아닌 문자를 건너 뜁니다 ( &lt;a href=&quot;regular-expressions#Regular-Expressions&quot;&gt;정규식&lt;/a&gt; 참조 ). 문자 클래스도 사용할 수 있습니다 (예 : &lt;code&gt;&quot;[:alnum:]&quot;&lt;/code&gt; ( &lt;a href=&quot;char-classes#Char-Classes&quot;&gt;Char 클래스&lt;/a&gt; 참조 )).</target>
        </trans-unit>
        <trans-unit id="31db43e0f62f5918021f4304c3b57c98b1f485d7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Thus, a double click on the second mouse button with</source>
          <target state="translated">'. 따라서 두 번째 마우스 버튼을 두 번 클릭하면</target>
        </trans-unit>
        <trans-unit id="49226b43496927226013c375a3905de681bc1894" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Thus, if there is a &amp;lsquo;</source>
          <target state="translated">'. 따라서 '</target>
        </trans-unit>
        <trans-unit id="874956d01e70f45a109825abc27d584d72e4f201" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. To activate the packages in the latter case, &lt;code&gt;package-activate-all&lt;/code&gt; should be called explicitly (e.g., via the &amp;lsquo;</source>
          <target state="translated">'. 후자의 경우 패키지를 활성화하려면 &lt;code&gt;package-activate-all&lt;/code&gt; 을 명시 적으로 호출해야합니다 (예 : '</target>
        </trans-unit>
        <trans-unit id="5d17f34aad040ac16bbe3e7e207e5072f9097300" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. To have a symbol with a tab character in its name, you must actually use a tab (preceded with a backslash). But it&amp;rsquo;s rare to do such a thing.</source>
          <target state="translated">'. 이름에 탭 문자가있는 기호를 사용하려면 실제로 탭 (앞에 백 슬래시가 있음)을 사용해야합니다. 그러나 그런 일을하는 것은 드뭅니다.</target>
        </trans-unit>
        <trans-unit id="40d1da7236353b66283a8e0d665f7aa50d39c40a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. To include &amp;lsquo;</source>
          <target state="translated">'. 포함하는 '</target>
        </trans-unit>
        <trans-unit id="cfd4671f7f558d7f9826bc96f1106cac5603f8eb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. To remove this advice, say</source>
          <target state="translated">'. 이 조언을 제거하려면 다음과 같이 말하십시오.</target>
        </trans-unit>
        <trans-unit id="5978960388f3c9dbfeacd5a01349a4f2fd056b14" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. To write a Lisp string that contains the characters &amp;lsquo;</source>
          <target state="translated">'. 문자 '를 포함하는 Lisp 문자열을 작성하려면</target>
        </trans-unit>
        <trans-unit id="d51ac1a5016e8263d8d91254e30b5f5b6bd21bf9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Unicode character escapes can help here; for example, for most programmers &amp;lsquo;</source>
          <target state="translated">'. 여기서는 유니 코드 문자 이스케이프가 도움이 될 수 있습니다. 예를 들어 대부분의 프로그래머의 경우 '</target>
        </trans-unit>
        <trans-unit id="e508b205c9c36ae9bed615f782193f132fc3aa2c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. We call this the &lt;em&gt;mode variable&lt;/em&gt;. The minor mode command should set this variable. The value will be &lt;code&gt;nil&lt;/code&gt; if the mode is disabled, and non-&lt;code&gt;nil&lt;/code&gt; if the mode is enabled. The variable should be buffer-local if the minor mode is buffer-local.</source>
          <target state="translated">'. 이것을 &lt;em&gt;모드 변수&lt;/em&gt; 라고 &lt;em&gt;합니다&lt;/em&gt; . 부 모드 명령은이 변수를 설정해야합니다. 값 것이다 &lt;code&gt;nil&lt;/code&gt; 모드가 비활성화되고 아닌 경우 &lt;code&gt;nil&lt;/code&gt; 모드가 설정되어 있으면. 부 모드가 버퍼 로컬 인 경우 변수는 버퍼 로컬이어야합니다.</target>
        </trans-unit>
        <trans-unit id="bc90b4943ed58fc986b8cd750926a26e0d3eafcd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. We may or may not show the result of the evaluation of the expanded form.</source>
          <target state="translated">'. 확장 된 양식의 평가 결과를 표시하거나 표시하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c2abaf3dccae438c3e3bec735f16d20fb5b2dc2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. When called with no arguments, this command should switch to the new mode in the current buffer by setting up the keymap, syntax table, and buffer-local variables in an existing buffer. It should not change the buffer&amp;rsquo;s contents.</source>
          <target state="translated">'. 인수없이이 명령을 호출하면 기존 버퍼에 키맵, 구문 테이블 및 버퍼 로컬 변수를 설정하여 현재 버퍼에서 새 모드로 전환해야합니다. 버퍼의 내용을 변경해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="3778a1de9c11c4ca20a07cd8f1e4b79f4bcb089a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Where those operators match the largest possible substring (consistent with matching the entire containing expression), the non-greedy variants match the smallest possible substring (consistent with matching the entire containing expression).</source>
          <target state="translated">'. 이러한 연산자가 가능한 가장 큰 하위 문자열과 일치하는 경우 (전체 포함 표현식과 일치하는 것과 일치) 비 탐욕적인 변형은 가능한 가장 작은 하위 문자열과 일치합니다 (전체 포함하는 표현식과 일치하는 것과 일치 함).</target>
        </trans-unit>
        <trans-unit id="4f5b78b0f81e0b29716f109e21129103b5e1cda4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. You can refer to the fontset by either name. If a fontset with the same name already exists, an error is signaled, unless &lt;var&gt;noerror&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, in which case this function does nothing.</source>
          <target state="translated">'. 두 이름 중 하나로 글꼴 세트를 참조 할 수 있습니다. 같은 이름의 폰트 셋이 이미 존재한다면, &lt;var&gt;noerror&lt;/var&gt; 가 &lt;code&gt;nil&lt;/code&gt; 이 아닌 한 오류가 발생 합니다.이 경우이 함수는 아무 작업도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7828357c077844f0538b33bc92cb44411f658edd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. You specify the name of a category when you define it with &lt;code&gt;define-category&lt;/code&gt;.</source>
          <target state="translated">'. &lt;code&gt;define-category&lt;/code&gt; 로 정의 할 때 카테고리의 이름을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="6ed3aa9a75d90fa30ae4fd470caff45c2e0442f1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;.)</source>
          <target state="translated">&amp;rsquo;.)</target>
        </trans-unit>
        <trans-unit id="4695df59bc44fdf1f0b9ccceafc6bcc3537b8d3f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;.) Otherwise, the current buffer&amp;rsquo;s value of &lt;code&gt;default-directory&lt;/code&gt; is used. For example:</source>
          <target state="translated">'.) 그렇지 않으면 현재 버퍼의 &lt;code&gt;default-directory&lt;/code&gt; 값 이 사용됩니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="156309a7b165cae2860384c8bd41ff8b92b091f4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;:</source>
          <target state="translated">&amp;rsquo;:</target>
        </trans-unit>
        <trans-unit id="e3aac28a5bcca39e6df51325cb075999557416de" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;: the second alternative inside the larger group matches it, but then &amp;lsquo;</source>
          <target state="translated">': 더 큰 그룹 내의 두 번째 대안이 일치하지만'</target>
        </trans-unit>
        <trans-unit id="deeb59fff1e51675d1aae26f3821e4d1d2865c23" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; 1 for a comment of style &amp;lsquo;</source>
          <target state="translated">'; 스타일 '에 대한 주석 1</target>
        </trans-unit>
        <trans-unit id="22f826cf2c98a14b68e4605a706e32fbe4128ad7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; 2 for a comment of style &amp;lsquo;</source>
          <target state="translated">'; 2 스타일에 대한 코멘트 '</target>
        </trans-unit>
        <trans-unit id="9cb73a66b531834fedad3d7de77945cd8757552f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; and &lt;code&gt;syntax-table&lt;/code&gt; for a comment that should be ended by a generic comment delimiter character.</source>
          <target state="translated">'; 및 &lt;code&gt;syntax-table&lt;/code&gt; 일반적인 주석 구분 기호 문자로 종료되어야 코멘트.</target>
        </trans-unit>
        <trans-unit id="cefb6e8274a49b4a2bba22f6b26c68707c2c5b2c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; and so on. Thus, the ten characters appear as five A&amp;rsquo;s.</source>
          <target state="translated">'; 등등. 따라서 10 개의 문자는 5 개의 A로 나타납니다.</target>
        </trans-unit>
        <trans-unit id="4fa6fb399deb8a666e11816ad0dd2045410d2da7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; here, &amp;lsquo;</source>
          <target state="translated">'; 여기, '</target>
        </trans-unit>
        <trans-unit id="8454a0c551c38668fa1152aca2478b5d63bcb854" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; if &lt;var&gt;filename&lt;/var&gt; does not end in &amp;lsquo;</source>
          <target state="translated">'; &lt;var&gt;filename&lt;/var&gt; 이 '로 끝나지 않는 경우</target>
        </trans-unit>
        <trans-unit id="cbba786de7468587648939c0e7e0527e85168c0a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; if you try to read this text, you get an error. There is no way to read those data types.</source>
          <target state="translated">'; 이 텍스트를 읽으려고하면 오류가 발생합니다. 이러한 데이터 유형을 읽을 수있는 방법이 없습니다.</target>
        </trans-unit>
        <trans-unit id="d2db7d37546a01e935190c342f3e16620c41d180" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; it is the logical truth value &lt;var&gt;false&lt;/var&gt;; and it is the empty list&amp;mdash;the list of zero elements. When used as a variable, &lt;code&gt;nil&lt;/code&gt; always has the value &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">'; 그것은 논리적 인 진실 값 &lt;var&gt;false&lt;/var&gt; . 빈 목록, 즉 요소가없는 목록입니다. 변수로 사용되는 경우 &lt;code&gt;nil&lt;/code&gt; 은 항상 &lt;code&gt;nil&lt;/code&gt; 값을 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="14d49f5f4cb91d122f34aa9f738bd01a8eaf65f2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; no new special characters will be defined in the future. The character &amp;lsquo;</source>
          <target state="translated">'; 앞으로 새로운 특수 문자가 정의되지 않습니다. 캐릭터 '</target>
        </trans-unit>
        <trans-unit id="615d4290dbeb4980cb06a27a02058feaa5b4af62" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; nothing else.</source>
          <target state="translated">'; 다른 것은 없습니다.</target>
        </trans-unit>
        <trans-unit id="add5af4d45fdfbae08c257d45949a9120ae2346d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Text-Display.html#Text-Display&quot;&gt;How Text Is Displayed&lt;/a&gt; in</source>
          <target state="translated">'; &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Text-Display.html#Text-Display&quot;&gt;텍스트가 표시&lt;/a&gt; 되는 방법 보기</target>
        </trans-unit>
        <trans-unit id="5b99dfe7a482d74e67f02559e3b0cfc188912d25" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; that kind of name is automatically recognized as risky.</source>
          <target state="translated">'; 그런 종류의 이름은 자동으로 위험한 것으로 인식됩니다.</target>
        </trans-unit>
        <trans-unit id="8eb026e1ad4a50a1d0320af7236ebd940775864f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; the fact that the display property was assigned in two separate calls to &lt;code&gt;put-text-property&lt;/code&gt; is irrelevant. Similarly, the next two characters get a second string (&lt;code&gt;concat&lt;/code&gt; creates a new string object), so they are replaced with one &amp;lsquo;</source>
          <target state="translated">'; 디스플레이 속성이 &lt;code&gt;put-text-property&lt;/code&gt; 에 대한 두 개의 개별 호출에서 할당되었다는 사실 은 관련이 없습니다. 마찬가지로 다음 두 문자는 두 번째 문자열을 가져 &lt;code&gt;concat&lt;/code&gt; ( concat 은 새 문자열 객체를 생성 함) '</target>
        </trans-unit>
        <trans-unit id="4182bfcd623839a25901982ab84a7ce748ac5e5f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; then the expansion of the %-construct will have that same text property.</source>
          <target state="translated">'; 그러면 % -construct의 확장은 동일한 텍스트 속성을 갖게됩니다.</target>
        </trans-unit>
        <trans-unit id="f7b94bbcaf99fbf3d23c67965aa2111cace5d269" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; they distinguish strings from symbols, and prevent punctuation characters in strings and symbols from being taken as delimiters when reading. See &lt;a href=&quot;printed-representation#Printed-Representation&quot;&gt;Printed Representation&lt;/a&gt;, for full details. You specify quoting or no quoting by the choice of printing function.</source>
          <target state="translated">'; 문자열과 기호를 구별하고 읽을 때 문자열 및 기호의 구두점 문자가 구분자로 간주되는 것을 방지합니다. 자세한 내용은 &lt;a href=&quot;printed-representation#Printed-Representation&quot;&gt;Printed Representation을&lt;/a&gt; 참조 하십시오. 인쇄 기능을 선택하여 인용 또는 인용 없음을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="b7297e8488917747040cac9d9f00e72cbe782ad2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; this gives the user a way to quote a &amp;lsquo;</source>
          <target state="translated">'; 이것은 사용자에게 '</target>
        </trans-unit>
        <trans-unit id="5eca84d86a4bc4a83fd6bfa2c0a6970138953dfa" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; thus, &amp;lsquo;</source>
          <target state="translated">'; 따라서 '</target>
        </trans-unit>
        <trans-unit id="3faca3177de3d387dfb50a0757c458a953b0da4d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s (including no &amp;lsquo;</source>
          <target state="translated">의 ( '</target>
        </trans-unit>
        <trans-unit id="7dcc27923e605aadb2c1017616d5f7e8c4169923" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s (including the empty string). It follows that &amp;lsquo;</source>
          <target state="translated">의 (빈 문자열 포함). 그것은 '</target>
        </trans-unit>
        <trans-unit id="ab709833e2c64b80aadc23e7eacc6135ca7721e3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s &lt;em&gt;environment&lt;/em&gt;, a C &lt;code&gt;struct&lt;/code&gt; which also has a &lt;code&gt;size&lt;/code&gt; field holding the size of the structure in bytes.</source>
          <target state="translated">의 &lt;em&gt;환경&lt;/em&gt; , 바이트 단위로 구조의 크기를 보유하는 &lt;code&gt;size&lt;/code&gt; 필드 도 있는 C &lt;code&gt;struct&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="81beab491315974c75546e90975912f61ad751ec" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s and &amp;lsquo;</source>
          <target state="translated">'모래 '</target>
        </trans-unit>
        <trans-unit id="14d12665396a3bce7258df47f6abec7f699fb21e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s before concluding that none of them can work. Even worse, &amp;lsquo;</source>
          <target state="translated">그들 중 누구도 일할 수 없다는 결론을 내리기 전에. 더 나쁜 것은 '</target>
        </trans-unit>
        <trans-unit id="0f735e2e37377ec4eba340dcdf4ebdc9e655d789" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s extension is &lt;code&gt;nil&lt;/code&gt;, not &amp;lsquo;</source>
          <target state="translated">의 확장자는 '가 아니라 &lt;code&gt;nil&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="a411072e6ab56489a6405f8d3ae96eafca5d392f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s in an entry shows its recursion depth. You can use the braces in the trace buffer to find the matching beginning or end of function calls.</source>
          <target state="translated">항목의 's는 재귀 깊이를 보여줍니다. 추적 버퍼에서 중괄호를 사용하여 일치하는 함수 호출의 시작 또는 끝을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d2b7dc883d476931d7fc0476d34c263f7e5e49c6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s).</source>
          <target state="translated">&amp;rsquo;s).</target>
        </trans-unit>
        <trans-unit id="9d2b1b1916f9e66dc77b6276688ff21f0d18b8dc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s, the &lt;code&gt;save-buffer&lt;/code&gt; function marks this version of the file to be backed up when the buffer is next saved.</source>
          <target state="translated">의, &lt;code&gt;save-buffer&lt;/code&gt; 기능은 다음에 버퍼가 저장 될 때 백업 될 파일의이 버전을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="86f7b5eeee874afb36f96509a49da5ba435536b7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s, the &lt;code&gt;save-buffer&lt;/code&gt; function unconditionally backs up the previous version of the file before saving it.</source>
          <target state="translated">의 경우 &lt;code&gt;save-buffer&lt;/code&gt; 기능은 파일을 저장하기 전에 이전 버전의 파일을 무조건 백업합니다.</target>
        </trans-unit>
        <trans-unit id="62c00ed21835d6b53c6ca6cfe57b9f2b852c221e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s. With this choice, the rest of the regexp matches successfully.</source>
          <target state="translated">'에스. 이 선택으로 나머지 정규 표현식이 성공적으로 일치합니다.</target>
        </trans-unit>
        <trans-unit id="cbed273fd9bd702b1594782e2ff1c6576cce9456" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s; but the rest of the pattern is &amp;lsquo;</source>
          <target state="translated">'에스; 하지만 나머지 패턴은 '</target>
        </trans-unit>
        <trans-unit id="eebe33eb3b07fce4794dd29b4efa03e937445cd2" translate="yes" xml:space="preserve">
          <source>'like this'</source>
          <target state="translated">'이렇게'</target>
        </trans-unit>
        <trans-unit id="28ed3a797da3c48c309a4ef792147f3c56cfec40" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>
        </trans-unit>
        <trans-unit id="11f9ee4d666a516beba09ca14b6114cc113eac8e" translate="yes" xml:space="preserve">
          <source>(&quot;This is a &quot; &quot;and here's &quot; &quot;and this is the end&quot;)</source>
          <target state="translated">( &quot;이것은&quot; &quot;이고 여기는&quot; &quot;이고 이것은 끝이다&quot;)</target>
        </trans-unit>
        <trans-unit id="3b68c6de2c66f2968f2d8fb4be216af6f9995901" translate="yes" xml:space="preserve">
          <source>(&quot;bold&quot; &quot;bold&quot; &quot;italic&quot;)</source>
          <target state="translated">( &quot;bold&quot; &quot;bold&quot; &quot;italic&quot;)</target>
        </trans-unit>
        <trans-unit id="29ad299bb8dea092301514db6455f6485ec7bef0" translate="yes" xml:space="preserve">
          <source>()[]\;&quot;</source>
          <target state="translated">()[]\;&quot;</target>
        </trans-unit>
        <trans-unit id="ca2bd2464ffff926c3bddb3fc9b1f4f2e0b1de72" translate="yes" xml:space="preserve">
          <source>(1 . (2 . (3 . nil)))</source>
          <target state="translated">(1. (2. (3. nil)))</target>
        </trans-unit>
        <trans-unit id="af5c8e3c39491ea4acc2b4f636081c4d8019041a" translate="yes" xml:space="preserve">
          <source>(1 2 3)</source>
          <target state="translated">(12 3)</target>
        </trans-unit>
        <trans-unit id="91ce9374a8d9b3758172a4a4957c8babf824efb5" translate="yes" xml:space="preserve">
          <source>(1) non-toolkit and terminal frames</source>
          <target state="translated">(1) 비 툴킷 및 터미널 프레임</target>
        </trans-unit>
        <trans-unit id="fdecdfa43a63c75b199dc29afcd065e93dab4228" translate="yes" xml:space="preserve">
          <source>(2) Lucid, Motif and MS-Windows frames</source>
          <target state="translated">(2) Lucid, Motif 및 MS-Windows 프레임</target>
        </trans-unit>
        <trans-unit id="d90f53517a44bd4ce027a53dd0801b007378b6ed" translate="yes" xml:space="preserve">
          <source>(3) GTK+ and NS frames</source>
          <target state="translated">(3) GTK + 및 NS 프레임</target>
        </trans-unit>
        <trans-unit id="1c6c7ac584dca2dbba4009ad6b227a32fab8b826" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;abort-recursive-edit&lt;/code&gt;).</source>
          <target state="translated">(&lt;code&gt;abort-recursive-edit&lt;/code&gt;).</target>
        </trans-unit>
        <trans-unit id="2634b0147564e044c324bb9fcfa5a8f97c3963dc" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;backward-up-list&lt;/code&gt; with an argument of -1) to find the end of the first unbalanced defun.</source>
          <target state="translated">( 인수가 -1 인 &lt;code&gt;backward-up-list&lt;/code&gt; ) 첫 번째 불균형의 끝을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="136f562371d96cdc09795acbc8fd79e6e121ffb8" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;backward-up-list&lt;/code&gt;, see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Moving-by-Parens.html#Moving-by-Parens&quot;&gt;Moving by Parens&lt;/a&gt; in</source>
          <target state="translated">( &lt;code&gt;backward-up-list&lt;/code&gt; , &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Moving-by-Parens.html#Moving-by-Parens&quot;&gt;괄호&lt;/a&gt; 로 이동 참조</target>
        </trans-unit>
        <trans-unit id="630d83872ba9379547256811651469b9ca58d41d" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;compose-mail&lt;/code&gt;) command prompt for a &amp;lsquo;</source>
          <target state="translated">( &lt;code&gt;compose-mail&lt;/code&gt; ) 명령 프롬프트 '</target>
        </trans-unit>
        <trans-unit id="740b034935c3cbdf1dde371e0af19631b0527f97" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;describe-function&lt;/code&gt;) for a function.</source>
          <target state="translated">( &lt;code&gt;describe-function&lt;/code&gt; ) 함수입니다.</target>
        </trans-unit>
        <trans-unit id="361879d4baa9f1223fefd18765e48c74241c0c7e" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;describe-package&lt;/code&gt;), following the package&amp;rsquo;s brief description and installation status. It normally spans multiple lines, and should fully describe the package&amp;rsquo;s capabilities and how to begin using it once it is installed.</source>
          <target state="translated">( &lt;code&gt;describe-package&lt;/code&gt; ), 패키지의 간략한 설명 및 설치 상태를 따릅니다. 일반적으로 여러 줄에 걸쳐 있으며 패키지의 기능과 설치 후 사용을 시작하는 방법을 완전히 설명해야합니다.</target>
        </trans-unit>
        <trans-unit id="0d90a1dc54b79002bf44d9632619588f61f6c4e1" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;dired-clean-directory&lt;/code&gt;). That&amp;rsquo;s the same thing &lt;code&gt;kept-new-versions&lt;/code&gt; specifies when you make a new backup file. The default is 2.</source>
          <target state="translated">( &lt;code&gt;dired-clean-directory&lt;/code&gt; ). 이는 새 백업 파일을 만들 때 &lt;code&gt;kept-new-versions&lt;/code&gt; 지정 하는 것과 같습니다 . 기본값은 2입니다.</target>
        </trans-unit>
        <trans-unit id="4bb1adb9281e7d020ff8780a79f20e07873f5e64" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;display-bindings&lt;/code&gt;), since the main use of this prefix key is for mode-specific bindings.</source>
          <target state="translated">( &lt;code&gt;display-bindings&lt;/code&gt; ),이 접두사 키의 주요 사용은 모드 별 바인딩에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="7ad92bba8bac6c3fab512955948832c5457c615f" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;display-bindings&lt;/code&gt;), where it describes the main use of the</source>
          <target state="translated">( &lt;code&gt;display-bindings&lt;/code&gt; ), 여기서는</target>
        </trans-unit>
        <trans-unit id="6cf6a219d97ea532dcd6c2484a195a07565bad33" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;edebug-display-freq-count&lt;/code&gt;) to display both the coverage information and the frequency counts for a definition. Just</source>
          <target state="translated">( &lt;code&gt;edebug-display-freq-count&lt;/code&gt; ) 정의에 대한 커버리지 정보와 빈도 수를 모두 표시합니다. 다만</target>
        </trans-unit>
        <trans-unit id="f09a553bf50d8983fa2e1b39d83e2a024e45ea86" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;edebug-instrument-callee&lt;/code&gt;) instruments the definition of the function or macro called by the list form after point, if it is not already instrumented. This is possible only if Edebug knows where to find the source for that function; for this reason, after loading Edebug, &lt;code&gt;eval-region&lt;/code&gt; records the position of every definition it evaluates, even if not instrumenting it. See also the</source>
          <target state="translated">( &lt;code&gt;edebug-instrument-callee&lt;/code&gt; ) 아직 계측되지 않은 경우 포인트 이후 목록 양식에서 호출되는 함수 또는 매크로의 정의를 계측합니다. 이것은 Edebug가 해당 함수의 소스를 찾을 위치를 알고있는 경우에만 가능합니다. 이러한 이유로 Edebug를로드 한 후 &lt;code&gt;eval-region&lt;/code&gt; 은 계측하지 않더라도 평가하는 모든 정의의 위치를 ​​기록합니다. 참조</target>
        </trans-unit>
        <trans-unit id="d69ee4faa7a9df650d3a2ee0c5b823d88d505eac" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;edebug-set-initial-mode&lt;/code&gt;). See &lt;a href=&quot;edebug-execution-modes#Edebug-Execution-Modes&quot;&gt;Edebug Execution Modes&lt;/a&gt;.</source>
          <target state="translated">( &lt;code&gt;edebug-set-initial-mode&lt;/code&gt; ). &lt;a href=&quot;edebug-execution-modes#Edebug-Execution-Modes&quot;&gt;Edebug 실행 모드를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8fec78c3510d8b0be46e3b64324da65d8edb04d5" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;edebug-set-initial-mode&lt;/code&gt;):</source>
          <target state="translated">(&lt;code&gt;edebug-set-initial-mode&lt;/code&gt;):</target>
        </trans-unit>
        <trans-unit id="83587ec6a0c832834e1e8f4e14e17d1d0a69f8da" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;edebug-temp-display-freq-count&lt;/code&gt;) displays the same information temporarily, only until you type another key.</source>
          <target state="translated">( &lt;code&gt;edebug-temp-display-freq-count&lt;/code&gt; )는 다른 키를 입력 할 때까지만 동일한 정보를 일시적으로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="8a4b2db1825bf5709210fde987eb4d55d7a73269" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;edebug-update-eval-list&lt;/code&gt;) rebuilds the evaluation list, scanning the buffer and using the first expression of each group. (The idea is that the second expression of the group is the value previously computed and displayed.)</source>
          <target state="translated">( &lt;code&gt;edebug-update-eval-list&lt;/code&gt; ) 평가 목록을 다시 작성하고 버퍼를 스캔하고 각 그룹의 첫 번째 표현식을 사용합니다. (아이디어는 그룹의 두 번째 표현이 이전에 계산되고 표시된 값이라는 것입니다.)</target>
        </trans-unit>
        <trans-unit id="63d17b05f8e2dd85d78721c4368319535f3f580c" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;edebug-visit-eval-list&lt;/code&gt;).</source>
          <target state="translated">(&lt;code&gt;edebug-visit-eval-list&lt;/code&gt;).</target>
        </trans-unit>
        <trans-unit id="c9a3ceb4283bee610278cbf32d651f6412634f3c" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;edebug-where&lt;/code&gt;) to move point there, and then type</source>
          <target state="translated">( &lt;code&gt;edebug-where&lt;/code&gt; ) 지점을 거기로 이동 한 다음 입력</target>
        </trans-unit>
        <trans-unit id="34a37fbadf9f311136deca164af7dda68ddadc7c" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;end-of-defun&lt;/code&gt;) to move there, since that too will fail to work until the defun is balanced.</source>
          <target state="translated">( &lt;code&gt;end-of-defun&lt;/code&gt; ) 거기로 이동하면 defun이 균형을 이룰 때까지 작동하지 않기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="069d038fa487a150d9c81374523d8f46d4980e8e" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;end-of-defun&lt;/code&gt;, see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Moving-by-Defuns.html#Moving-by-Defuns&quot;&gt;Moving by Defuns&lt;/a&gt; in</source>
          <target state="translated">( &lt;code&gt;end-of-defun&lt;/code&gt; , &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Moving-by-Defuns.html#Moving-by-Defuns&quot;&gt;Move by Defuns&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="0a68ae59982c8b45a2fd1fad0b7f74df3824bbef" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;eval-defun&lt;/code&gt; with a prefix argument). See &lt;a href=&quot;instrumenting#Instrumenting&quot;&gt;Instrumenting&lt;/a&gt;, for alternative ways to instrument code.</source>
          <target state="translated">( 접두사 인수가있는 &lt;code&gt;eval-defun&lt;/code&gt; ). 코드를 계측하는 다른 방법 은 &lt;a href=&quot;instrumenting#Instrumenting&quot;&gt;계측을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="12069c528422ffc29a95633b0435727f408c7268" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;eval-defun&lt;/code&gt;) with a prefix argument on a function definition, it instruments the definition before evaluating it. (This does not modify the source code itself.) If the variable &lt;code&gt;edebug-all-defs&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, that inverts the meaning of the prefix argument: in this case,</source>
          <target state="translated">( &lt;code&gt;eval-defun&lt;/code&gt; ) 함수 정의에 접두사 인수를 사용하면 평가하기 전에 정의를 계측합니다. (이것은 소스 코드 자체를 수정하지 않습니다.) &lt;code&gt;edebug-all-defs&lt;/code&gt; 변수 가 &lt;code&gt;nil&lt;/code&gt; 이 아니면 접두사 인수의 의미를 반전시킵니다.이 경우,</target>
        </trans-unit>
        <trans-unit id="4fedc5b77d15f0147d4d36f8492491644651b00e" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;eval-defun&lt;/code&gt;, a Lisp mode key binding). &lt;strong&gt;Warning:&lt;/strong&gt; if you do this for temporary debugging purposes, be sure to undo this insertion before you save the file!</source>
          <target state="translated">( &lt;code&gt;eval-defun&lt;/code&gt; , Lisp 모드 키 바인딩). &lt;strong&gt;경고 :&lt;/strong&gt; 임시 디버깅 목적으로이 작업을 수행하는 경우 파일을 저장하기 전에이 삽입을 취소해야합니다!</target>
        </trans-unit>
        <trans-unit id="9621cb6485f91bfb7496f8fa0055569d8c7dfee8" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;eval-expression&lt;/code&gt;) and when processing the</source>
          <target state="translated">( &lt;code&gt;eval-expression&lt;/code&gt; ) 및 처리 할 때</target>
        </trans-unit>
        <trans-unit id="4536fa0a23bbecf146727bcea90c618f590602ac" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;exit-recursive-edit&lt;/code&gt;) does this. Throwing a &lt;code&gt;t&lt;/code&gt; value causes &lt;code&gt;recursive-edit&lt;/code&gt; to quit, so that control returns to the command loop one level up. This is called &lt;em&gt;aborting&lt;/em&gt;, and is done by</source>
          <target state="translated">( &lt;code&gt;exit-recursive-edit&lt;/code&gt; )이 작업을 수행합니다. &lt;code&gt;t&lt;/code&gt; 값을 던지면 &lt;code&gt;recursive-edit&lt;/code&gt; 이 종료되어 제어가 한 수준 위로 명령 루프로 돌아갑니다. 이를 &lt;em&gt;중단&lt;/em&gt; 이라고 하며</target>
        </trans-unit>
        <trans-unit id="0576ea6c0dbb6d4d070277c9c2026745e9da1bb2" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;font-lock-fontify-block&lt;/code&gt;).</source>
          <target state="translated">(&lt;code&gt;font-lock-fontify-block&lt;/code&gt;).</target>
        </trans-unit>
        <trans-unit id="18d13345fe58077b2b840f6700a5491e9d9a3fab" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;forward-char&lt;/code&gt;) moves point unhesitatingly into hidden text. However, the replacement of newline characters with carriage return characters affects some editing commands. For example, &lt;code&gt;next-line&lt;/code&gt; skips hidden lines, since it searches only for newlines. Modes that use selective display can also define commands that take account of the newlines, or that control which parts of the text are hidden.</source>
          <target state="translated">( &lt;code&gt;forward-char&lt;/code&gt; ) 포인트를 숨겨진 텍스트로 주저없이 이동합니다. 그러나 개행 문자를 캐리지 리턴 문자로 대체하면 일부 편집 명령에 영향을줍니다. 예를 들어, &lt;code&gt;next-line&lt;/code&gt; 은 줄 바꿈 만 검색하므로 은선을 건너 뜁니다. 선택적 표시를 사용하는 모드는 줄 바꿈을 고려하거나 텍스트의 어떤 부분을 숨길 것인지 제어하는 ​​명령을 정의 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="75187f2d3d4323af398d0fe1824a00cbee09fb34" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;forward-sexp&lt;/code&gt;, see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Expressions.html#Expressions&quot;&gt;Expressions&lt;/a&gt; in</source>
          <target state="translated">( &lt;code&gt;forward-sexp&lt;/code&gt; , 참조 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Expressions.html#Expressions&quot;&gt;식&lt;/a&gt; 으로</target>
        </trans-unit>
        <trans-unit id="3a182ee44f0a5f60aff29d2e46cb12af9bf119e6" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;indent-for-tab-command&lt;/code&gt;) command. If the value is &lt;code&gt;t&lt;/code&gt; (the default), the command normally just indents the current line. If the value is &lt;code&gt;nil&lt;/code&gt;, the command indents the current line only if point is at the left margin or in the line&amp;rsquo;s indentation; otherwise, it inserts a tab character. If the value is &lt;code&gt;complete&lt;/code&gt;, the command first tries to indent the current line, and if the line was already indented, it calls &lt;code&gt;completion-at-point&lt;/code&gt; to complete the text at point (see &lt;a href=&quot;completion-in-buffers#Completion-in-Buffers&quot;&gt;Completion in Buffers&lt;/a&gt;).</source>
          <target state="translated">( &lt;code&gt;indent-for-tab-command&lt;/code&gt; ) 명령. 값이 &lt;code&gt;t&lt;/code&gt; (기본값)이면 일반적으로 명령은 현재 행만 들여 씁니다. 값이 &lt;code&gt;nil&lt;/code&gt; 이면 명령은 포인트가 왼쪽 여백이나 줄의 들여 쓰기에있는 경우에만 현재 줄을 들여 씁니다. 그렇지 않으면 탭 문자를 삽입합니다. 값이 &lt;code&gt;complete&lt;/code&gt; 인 경우 명령은 먼저 현재 행을 들여 쓰려고 시도하고 행이 이미 들여 쓰기 된 경우 &lt;code&gt;completion-at-point&lt;/code&gt; 을 호출 하여 시점에서 텍스트를 완료합니다 ( &lt;a href=&quot;completion-in-buffers#Completion-in-Buffers&quot;&gt;버퍼에서 완료&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="059558b470d0a3087d9942b079d5d123b926c71b" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;indent-pp-sexp&lt;/code&gt;) at the beginning of the defun. A range of lines will probably shift left; if so, the missing open parenthesis or spurious close parenthesis is probably near the first of those lines. (However, don&amp;rsquo;t assume this is true; study the code to make sure.) Once you have found the discrepancy, undo the</source>
          <target state="translated">( &lt;code&gt;indent-pp-sexp&lt;/code&gt; ) defun 시작 부분. 선의 범위는 아마도 왼쪽으로 이동할 것입니다. 그렇다면 누락 된 여는 괄호 또는 가짜 닫는 괄호가 해당 줄의 첫 번째 줄에 가깝습니다. (그러나 이것이 사실이라고 가정하지 마십시오. 코드를 조사하여 확인하십시오.) 불일치를 발견하면 실행 취소</target>
        </trans-unit>
        <trans-unit id="4e3464f9d4e7d903682ed0c920dbee7e8468a206" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;indent-pp-sexp&lt;/code&gt;, see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Multi_002dline-Indent.html#Multi_002dline-Indent&quot;&gt;Multi-line Indent&lt;/a&gt; in</source>
          <target state="translated">( &lt;code&gt;indent-pp-sexp&lt;/code&gt; 참조 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Multi_002dline-Indent.html#Multi_002dline-Indent&quot;&gt;여러 줄 들여 쓰기&lt;/a&gt; 의를</target>
        </trans-unit>
        <trans-unit id="c244d556639ec6e57f8159952332254d4820f8a0" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;kbd-macro-query&lt;/code&gt;).</source>
          <target state="translated">(&lt;code&gt;kbd-macro-query&lt;/code&gt;).</target>
        </trans-unit>
        <trans-unit id="b98f990aef5298be7eabc9558464eec34d2a71b2" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;kmacro-edit-macro&lt;/code&gt;) command; in particular, you must surround function key names with &amp;lsquo;</source>
          <target state="translated">( &lt;code&gt;kmacro-edit-macro&lt;/code&gt; ) 명령; 특히 기능 키 이름은 '</target>
        </trans-unit>
        <trans-unit id="7630a8cfd9a78274f5209735a446539830fb0654" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;minibuffer-complete&lt;/code&gt;), Emacs extends the name as far as it can.</source>
          <target state="translated">( &lt;code&gt;minibuffer-complete&lt;/code&gt; ), Emacs는 가능한 한 이름을 확장합니다.</target>
        </trans-unit>
        <trans-unit id="dfa0a924fd5af63f1ed64781eceb79fddd80e302" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;other-window&lt;/code&gt;) to select some other window, it moves through live windows in a specific order. For any given configuration of windows, this order never varies. It is called the &lt;em&gt;cyclic ordering of windows&lt;/em&gt;.</source>
          <target state="translated">( &lt;code&gt;other-window&lt;/code&gt; ) 다른 창을 선택하려면 특정 순서로 라이브 창을 이동합니다. 주어진 창 구성에 대해이 순서는 변하지 않습니다. 이것을 &lt;em&gt;윈도우&lt;/em&gt; 의 &lt;em&gt;주기적 순서&lt;/em&gt; 라고합니다 .</target>
        </trans-unit>
        <trans-unit id="017cb8b82c0ddef5c6f2193de4290a09e0be5be0" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;save-buffers-kill-terminal&lt;/code&gt;). See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Exiting.html#Exiting&quot;&gt;Exiting&lt;/a&gt; in</source>
          <target state="translated">( &lt;code&gt;save-buffers-kill-terminal&lt;/code&gt; ). 참조 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Exiting.html#Exiting&quot;&gt;종료&lt;/a&gt; 에</target>
        </trans-unit>
        <trans-unit id="440956cbb48fb5fbf0713447ce0ea8a97410f378" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;switch-to-buffer&lt;/code&gt;) and then type the first few letters of the name of the buffer to which you wish to switch, and then type</source>
          <target state="translated">( &lt;code&gt;switch-to-buffer&lt;/code&gt; 로 전환) 전환하려는 버퍼 이름의 처음 몇 글자를 입력 한 다음</target>
        </trans-unit>
        <trans-unit id="734a207cf7bcb26532f691a76b25f1895de7079e" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;switch-to-buffer&lt;/code&gt;), the new buffer is put in the major mode of the previously current buffer. As an exception, if the major mode of the previous buffer has a &lt;code&gt;mode-class&lt;/code&gt; symbol property with value &lt;code&gt;special&lt;/code&gt;, the new buffer is put in Fundamental mode (see &lt;a href=&quot;major-mode-conventions#Major-Mode-Conventions&quot;&gt;Major Mode Conventions&lt;/a&gt;).</source>
          <target state="translated">( &lt;code&gt;switch-to-buffer&lt;/code&gt; ), 새 버퍼는 이전 현재 버퍼의 주 모드에 놓입니다. 예외적으로 이전 버퍼의 주 모드에 &lt;code&gt;special&lt;/code&gt; 값 이있는 &lt;code&gt;mode-class&lt;/code&gt; 기호 속성이있는 경우 새 버퍼는 기본 모드로 설정됩니다 ( &lt;a href=&quot;major-mode-conventions#Major-Mode-Conventions&quot;&gt;주 모드 규칙&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="852f21db3aabffffe9911c1ff687b3ddc740499d" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;timer-list-cancel&lt;/code&gt;) that will cancel the timer on the line under point.</source>
          <target state="translated">( &lt;code&gt;timer-list-cancel&lt;/code&gt; ) 포인트 아래 라인에서 타이머를 취소합니다.</target>
        </trans-unit>
        <trans-unit id="186fd4236f28d3428e47c7edbfe0261b0fe96c49" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;undo&lt;/code&gt;), since the old indentation is probably appropriate to the intended parentheses.</source>
          <target state="translated">( &lt;code&gt;undo&lt;/code&gt; ), 이전 들여 쓰기가 의도 한 괄호에 적절할 수 있기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="cdae63d07f404492d9cce97a177b919021d3347f" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;universal-coding-system-argument&lt;/code&gt;) and specify &amp;lsquo;</source>
          <target state="translated">( &lt;code&gt;universal-coding-system-argument&lt;/code&gt; ) 그리고 '</target>
        </trans-unit>
        <trans-unit id="b3d5a45272297a43c8c518ef8ee8149f234076c0" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;universal-coding-system-argument&lt;/code&gt;) works by binding &lt;code&gt;coding-system-for-write&lt;/code&gt;, and Emacs should obey user selection. If a Lisp program binds &lt;code&gt;coding-system-for-write&lt;/code&gt; to a value that might not be safe for encoding the text to be written, it can also bind &lt;code&gt;coding-system-require-warning&lt;/code&gt; to a non-&lt;code&gt;nil&lt;/code&gt; value, which will force the output primitives to check the encoding by calling the value of &lt;code&gt;select-safe-coding-system-function&lt;/code&gt; even though &lt;code&gt;coding-system-for-write&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;. Alternatively, call &lt;code&gt;select-safe-coding-system&lt;/code&gt; explicitly before using the specified encoding.</source>
          <target state="translated">( &lt;code&gt;universal-coding-system-argument&lt;/code&gt; )는 &lt;code&gt;coding-system-for-write&lt;/code&gt; 를 바인딩하여 작동 하며 Emacs는 사용자 선택에 따라야합니다. Lisp 프로그램 &lt;code&gt;coding-system-for-write&lt;/code&gt; 할 텍스트를 인코딩하기에 안전하지 않을 수있는 값에 쓰기 를위한 &lt;code&gt;coding-system-require-warning&lt;/code&gt; 바인딩하는 경우 코딩 시스템 요구 사항 경고 를 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값에 바인딩 할 수도 있습니다 . &lt;code&gt;coding-system-for-write&lt;/code&gt; 이 &lt;code&gt;nil&lt;/code&gt; 이 아니더라도 &lt;code&gt;select-safe-coding-system-function&lt;/code&gt; 의 값을 호출하여 인코딩을 확인하는 출력 프리미티브 . 또는 지정된 인코딩을 사용하기 전에 명시 적으로 &lt;code&gt;select-safe-coding-system&lt;/code&gt; 을 호출 하십시오 .</target>
        </trans-unit>
        <trans-unit id="826346b927705138c21f8da99aa96f6ce39a7ffa" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;yank-pop&lt;/code&gt;).</source>
          <target state="translated">(&lt;code&gt;yank-pop&lt;/code&gt;).</target>
        </trans-unit>
        <trans-unit id="ea81403f9ddefa112baedefc5b8ece579249316d" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;yank&lt;/code&gt;) immediately followed by</source>
          <target state="translated">( &lt;code&gt;yank&lt;/code&gt; ) 바로 뒤에</target>
        </trans-unit>
        <trans-unit id="905f108a0fc13fbe61b6a2de013d658c7e2c26c7" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;JavaScript Object Notation&lt;/em&gt;) support, it provides several functions to convert between Lisp objects and JSON values. Any JSON value can be converted to a Lisp object, but not vice versa. Specifically:</source>
          <target state="translated">( &lt;em&gt;JavaScript Object Notation&lt;/em&gt; ) 지원, Lisp 객체와 JSON 값 간 변환을위한 여러 기능을 제공합니다. 모든 JSON 값은 Lisp 개체로 변환 할 수 있지만 그 반대의 경우는 불가능합니다. 구체적으로 특별히:</target>
        </trans-unit>
        <trans-unit id="258cf028ecc1ad2f169b333d5b5c9867d653d25f" translate="yes" xml:space="preserve">
          <source>(&lt;var&gt;name&lt;/var&gt;&lt;var&gt;size&lt;/var&gt;&lt;var&gt;used&lt;/var&gt;)</source>
          <target state="translated">(&lt;var&gt;name&lt;/var&gt;&lt;var&gt;size&lt;/var&gt;&lt;var&gt;used&lt;/var&gt;)</target>
        </trans-unit>
        <trans-unit id="0706df67f0840c13147810fdc4a37dba93b9296b" translate="yes" xml:space="preserve">
          <source>(&lt;var&gt;name&lt;/var&gt;&lt;var&gt;size&lt;/var&gt;&lt;var&gt;used&lt;/var&gt;&lt;var&gt;free&lt;/var&gt;)</source>
          <target state="translated">(&lt;var&gt;name&lt;/var&gt;&lt;var&gt;size&lt;/var&gt;&lt;var&gt;used&lt;/var&gt;&lt;var&gt;free&lt;/var&gt;)</target>
        </trans-unit>
        <trans-unit id="bb2ab752a93f2b3cee4a56ee6003cc4a526ad1b9" translate="yes" xml:space="preserve">
          <source>(&lt;var&gt;variable&lt;/var&gt; . &lt;var&gt;startpos&lt;/var&gt;)</source>
          <target state="translated">( &lt;var&gt;variable&lt;/var&gt; . &lt;var&gt;startpos&lt;/var&gt; )</target>
        </trans-unit>
        <trans-unit id="eec0c430beb7f790d88f7a69d30cdd77ba0e1c7c" translate="yes" xml:space="preserve">
          <source>(&lt;var&gt;width&lt;/var&gt;&lt;var&gt;height&lt;/var&gt;)</source>
          <target state="translated">(&lt;var&gt;width&lt;/var&gt;&lt;var&gt;height&lt;/var&gt;)</target>
        </trans-unit>
        <trans-unit id="aa73839d3eb6099df7cd47a7612f305c910d91e0" translate="yes" xml:space="preserve">
          <source>(&lt;var&gt;x&lt;/var&gt;&lt;var&gt;y&lt;/var&gt;&lt;var&gt;width&lt;/var&gt;&lt;var&gt;height&lt;/var&gt;)</source>
          <target state="translated">(&lt;var&gt;x&lt;/var&gt;&lt;var&gt;y&lt;/var&gt;&lt;var&gt;width&lt;/var&gt;&lt;var&gt;height&lt;/var&gt;)</target>
        </trans-unit>
        <trans-unit id="40c0f523f5f1e9c4a05077a7af0277d8eeb61901" translate="yes" xml:space="preserve">
          <source>(Application Programming Interface) defined and documented in the header file</source>
          <target state="translated">(응용 프로그래밍 인터페이스) 헤더 파일에 정의 및 문서화</target>
        </trans-unit>
        <trans-unit id="f40d8814f1414c949b4462ef99ca7a3de65dab7c" translate="yes" xml:space="preserve">
          <source>(In this and the following examples, replace</source>
          <target state="translated">(이 예제와 다음 예제에서</target>
        </trans-unit>
        <trans-unit id="29bfa1d6d3398320644f775b0b8be618a36cfe69" translate="yes" xml:space="preserve">
          <source>(In this case, the index returned is a buffer position; the first character of the buffer counts as 1.)</source>
          <target state="translated">(이 경우 반환 된 인덱스는 버퍼 위치이며 버퍼의 첫 번째 문자는 1로 계산됩니다.)</target>
        </trans-unit>
        <trans-unit id="88b75919331fd3484b0ad066bf3acbdebad1ba20" translate="yes" xml:space="preserve">
          <source>(Internally, the lexical environment is an alist of symbol-value pairs, with the final element in the alist being the symbol &lt;code&gt;t&lt;/code&gt; rather than a cons cell. Such an alist can be passed as the second argument to the &lt;code&gt;eval&lt;/code&gt; function, in order to specify a lexical environment in which to evaluate a form. See &lt;a href=&quot;eval#Eval&quot;&gt;Eval&lt;/a&gt;. Most Emacs Lisp programs, however, should not interact directly with lexical environments in this way; only specialized programs like debuggers.)</source>
          <target state="translated">(내부적으로 어휘 환경은 기호-값 쌍의 목록이며, alist의 마지막 요소 는 cons 셀이 아닌 기호 &lt;code&gt;t&lt;/code&gt; 입니다. 이러한 alist는 &lt;code&gt;eval&lt;/code&gt; 함수에 두 번째 인수로 전달되어 다음을 수행 할 수 있습니다. 양식을 평가할 어휘 환경을 지정하십시오. &lt;a href=&quot;eval#Eval&quot;&gt;Eval을&lt;/a&gt; 참조하십시오 . 그러나 대부분의 Emacs Lisp 프로그램은 이러한 방식으로 어휘 환경과 직접 상호 작용해서는 안됩니다. 디버거와 같은 특수 프로그램 만 가능합니다.)</target>
        </trans-unit>
        <trans-unit id="38286f5ce7f65f5286c3070ba523832996be7bbe" translate="yes" xml:space="preserve">
          <source>(New file)</source>
          <target state="translated">(새로운 파일)</target>
        </trans-unit>
        <trans-unit id="80c561e8d30e05008668bb423efdbbafef3ad412" translate="yes" xml:space="preserve">
          <source>(Note that the &lt;small&gt;CDR&lt;/small&gt; of this list is a lambda expression.) This macro object is stored in the function cell of &lt;var&gt;name&lt;/var&gt;. The meaning of &lt;var&gt;args&lt;/var&gt; is the same as in a function, and the keywords &lt;code&gt;&amp;amp;rest&lt;/code&gt; and &lt;code&gt;&amp;amp;optional&lt;/code&gt; may be used (see &lt;a href=&quot;argument-list#Argument-List&quot;&gt;Argument List&lt;/a&gt;). Neither &lt;var&gt;name&lt;/var&gt; nor &lt;var&gt;args&lt;/var&gt; should be quoted. The return value of &lt;code&gt;defmacro&lt;/code&gt; is undefined.</source>
          <target state="translated">( 이 목록 의 &lt;small&gt;CDR&lt;/small&gt; 은 람다 식입니다.)이 매크로 개체는 &lt;var&gt;name&lt;/var&gt; 의 함수 셀에 저장됩니다 . &lt;var&gt;args&lt;/var&gt; 의 의미는 함수에서와 동일하며 &lt;code&gt;&amp;amp;rest&lt;/code&gt; 및 &lt;code&gt;&amp;amp;optional&lt;/code&gt; 키워드를 사용할 수 있습니다 ( &lt;a href=&quot;argument-list#Argument-List&quot;&gt;Argument List&lt;/a&gt; 참조 ). 둘 다 &lt;var&gt;name&lt;/var&gt; 않고 &lt;var&gt;args&lt;/var&gt; 인용되어야한다. &lt;code&gt;defmacro&lt;/code&gt; 의 반환 값 이 정의되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="9c80acf240bd3970f9277d522549217e76f774c1" translate="yes" xml:space="preserve">
          <source>(See &lt;code&gt;switch-to-buffer&lt;/code&gt; in &lt;a href=&quot;switching-buffers#Switching-Buffers&quot;&gt;Switching Buffers&lt;/a&gt;.)</source>
          <target state="translated">( &lt;code&gt;switch-to-buffer&lt;/code&gt; &lt;a href=&quot;switching-buffers#Switching-Buffers&quot;&gt;전환&lt;/a&gt; 에서 버퍼 로 전환 을 참조하십시오 .)</target>
        </trans-unit>
        <trans-unit id="821773db32b91b9f4bdddf26ea974a732e3681a7" translate="yes" xml:space="preserve">
          <source>(Shell:run)</source>
          <target state="translated">(Shell:run)</target>
        </trans-unit>
        <trans-unit id="60e2994049eb942c34cc6da4c8d819d20e369086" translate="yes" xml:space="preserve">
          <source>(The ellipsis &amp;lsquo;</source>
          <target state="translated">(줄임표 '</target>
        </trans-unit>
        <trans-unit id="ac62bda9f101ee60d925d4499778c013fbb2ac0a" translate="yes" xml:space="preserve">
          <source>(The variables &lt;code&gt;line-number-mode&lt;/code&gt;, &lt;code&gt;column-number-mode&lt;/code&gt; and &lt;code&gt;which-func-mode&lt;/code&gt; enable particular minor modes; as usual, these variable names are also the minor mode command names.)</source>
          <target state="translated">(변수 &lt;code&gt;line-number-mode&lt;/code&gt; , &lt;code&gt;column-number-mode&lt;/code&gt; 및 &lt;code&gt;which-func-mode&lt;/code&gt; 는 특정 부 모드를 활성화합니다. 일반적으로 이러한 변수 이름은 부 모드 명령 이름이기도합니다.)</target>
        </trans-unit>
        <trans-unit id="96ee79fadbf19bf35bcb5af0fbcdc7e445756bb5" translate="yes" xml:space="preserve">
          <source>(To silence byte-compiler warnings about unused variables, just use a variable name that starts with an underscore. The byte-compiler interprets this as an indication that this is a variable known not to be used.)</source>
          <target state="translated">(사용하지 않는 변수에 대한 바이트 컴파일러 경고를 없애려면 밑줄로 시작하는 변수 이름을 사용하십시오. 바이트 컴파일러는 이것을 사용되지 않는 것으로 알려진 변수라는 표시로 해석합니다.)</target>
        </trans-unit>
        <trans-unit id="6a37f8d47f88018745a1d4d859201b574654a8ac" translate="yes" xml:space="preserve">
          <source>(Transport Layer Security) connection.</source>
          <target state="translated">(전송 계층 보안) 연결.</target>
        </trans-unit>
        <trans-unit id="44f8b7b7a370f875f5899b978bfb21f49cf1859c" translate="yes" xml:space="preserve">
          <source>(a . (b))</source>
          <target state="translated">(a. (b))</target>
        </trans-unit>
        <trans-unit id="f3f59b60231e6c33e27c252046033b9e1191f3a7" translate="yes" xml:space="preserve">
          <source>(a . 5)</source>
          <target state="translated">(a. 5)</target>
        </trans-unit>
        <trans-unit id="752848797c854b8af57db419ecd8c1fe5c00fa6f" translate="yes" xml:space="preserve">
          <source>(a b)</source>
          <target state="translated">(ab)</target>
        </trans-unit>
        <trans-unit id="c77b7e4b36d6e7cb4e46b368349cd6c80d618080" translate="yes" xml:space="preserve">
          <source>(an integer); that allows you to send signals to processes that are not children of Emacs. See &lt;a href=&quot;system-processes#System-Processes&quot;&gt;System Processes&lt;/a&gt;.</source>
          <target state="translated">(정수); Emacs의 자식이 아닌 프로세스에 신호를 보낼 수 있습니다. &lt;a href=&quot;system-processes#System-Processes&quot;&gt;시스템 프로세스를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7634eb19ab6a83b09060922e4bfa27adad033ad9" translate="yes" xml:space="preserve">
          <source>(apostrophe) stands for a right quote. This generates a right single quotation mark or an apostrophe depending on the value of &lt;code&gt;text-quoting-style&lt;/code&gt;.</source>
          <target state="translated">(아포스트로피)는 올바른 따옴표를 나타냅니다. 이렇게하면 &lt;code&gt;text-quoting-style&lt;/code&gt; 값에 따라 오른쪽 작은 따옴표 또는 아포스트로피가 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="49df1c4d6ddf8623c038723b9f7b51eb792e71f0" translate="yes" xml:space="preserve">
          <source>(compiled; note, source is newer)</source>
          <target state="translated">(컴파일 됨, 참고, 소스가 최신 임)</target>
        </trans-unit>
        <trans-unit id="b4b11101a472ba50a9408019f325ea89b71aa318" translate="yes" xml:space="preserve">
          <source>(debug)</source>
          <target state="translated">(debug)</target>
        </trans-unit>
        <trans-unit id="315c82c8a05a0195a20701755571d7e19d2e0d5f" translate="yes" xml:space="preserve">
          <source>(document object model):</source>
          <target state="translated">(문서 개체 모델) :</target>
        </trans-unit>
        <trans-unit id="4311f9cae0dc679a7cc182285961309a6ce14f93" translate="yes" xml:space="preserve">
          <source>(double the backslashes in Lisp strings).</source>
          <target state="translated">(Lisp 문자열에서 백 슬래시 두 배).</target>
        </trans-unit>
        <trans-unit id="84fae69de84d42f2c2ff8baf9a07eb9745bf9c6f" translate="yes" xml:space="preserve">
          <source>(file &lt;var&gt;filename&lt;/var&gt;)</source>
          <target state="translated">(파일 &lt;var&gt;filename&lt;/var&gt; )</target>
        </trans-unit>
        <trans-unit id="c2fccc3de2d90ef363a4fbd14678f63b995c43c3" translate="yes" xml:space="preserve">
          <source>(file-query &lt;var&gt;filename&lt;/var&gt;&lt;var&gt;position&lt;/var&gt;)</source>
          <target state="translated">(파일 쿼리 &lt;var&gt;filename&lt;/var&gt; &lt;var&gt;position&lt;/var&gt; )</target>
        </trans-unit>
        <trans-unit id="b1fb49a3263a25153d18fe4b9a1ac5b5438e42ed" translate="yes" xml:space="preserve">
          <source>(fn)</source>
          <target state="translated">(fn)</target>
        </trans-unit>
        <trans-unit id="5ad79fb0d27d755bdd16802033cb504810714523" translate="yes" xml:space="preserve">
          <source>(grave accent) stands for a left quote. This generates a left single quotation mark, an apostrophe, or a grave accent depending on the value of &lt;code&gt;text-quoting-style&lt;/code&gt;. See &lt;a href=&quot;text-quoting-style#Text-Quoting-Style&quot;&gt;Text Quoting Style&lt;/a&gt;.</source>
          <target state="translated">(억음 악센트)는 왼쪽 따옴표를 나타냅니다. 이렇게하면 &lt;code&gt;text-quoting-style&lt;/code&gt; 값에 따라 왼쪽 작은 따옴표, 아포스트로피 또는 억음 악센트가 생성 됩니다. &lt;a href=&quot;text-quoting-style#Text-Quoting-Style&quot;&gt;텍스트 인용 스타일을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4c8306629e6f12f78ef0b0f55459408d40919a4b" translate="yes" xml:space="preserve">
          <source>(much like the way the menu bar is controlled). So you define a tool bar item using &lt;code&gt;define-key&lt;/code&gt;, like this:</source>
          <target state="translated">(메뉴 막대가 제어되는 방식과 매우 유사합니다). 따라서 다음 과 같이 &lt;code&gt;define-key&lt;/code&gt; 를 사용하여 도구 모음 항목을 정의 합니다.</target>
        </trans-unit>
        <trans-unit id="7739136dc697141cd8d76585cab6736b910f012b" translate="yes" xml:space="preserve">
          <source>(or</source>
          <target state="translated">(or</target>
        </trans-unit>
        <trans-unit id="377f179340caaa760087487edbe34af88115de6a" translate="yes" xml:space="preserve">
          <source>(or whatever is currently the value of &lt;code&gt;meta-prefix-char&lt;/code&gt;). Thus, the key</source>
          <target state="translated">(또는 현재 &lt;code&gt;meta-prefix-char&lt;/code&gt; 값 ). 따라서 열쇠</target>
        </trans-unit>
        <trans-unit id="0db8549c1f910da7f3c9adafb7e0c72c4760527a" translate="yes" xml:space="preserve">
          <source>(period) to act on the current object and then exit; or</source>
          <target state="translated">(마침표) 현재 개체에 대해 작업 한 다음 종료합니다. 또는</target>
        </trans-unit>
        <trans-unit id="6ef0b111c345816525a69085924018c995a04259" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;directory-names#abbreviate_002dfile_002dname&quot;&gt;abbreviate-file-name&lt;/a&gt;), and eliminating redundancies like</source>
          <target state="translated">( &lt;a href=&quot;directory-names#abbreviate_002dfile_002dname&quot;&gt;abbreviate-file-name 참조&lt;/a&gt; ), 다음과 같은 중복 제거</target>
        </trans-unit>
        <trans-unit id="943fdbeb9be9997a6dc5392484c5f87e816ccfaf" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;non_002dascii-characters#Non_002dASCII-Characters&quot;&gt;Non-ASCII Characters&lt;/a&gt;). Characters that represent keyboard input have a much wider range, to encode modifier keys such as Control, Meta and Shift.</source>
          <target state="translated">( &lt;a href=&quot;non_002dascii-characters#Non_002dASCII-Characters&quot;&gt;비 ASCII 문자&lt;/a&gt; 참조 ). 키보드 입력을 나타내는 문자는 Control, Meta 및 Shift와 같은 수정 자 키를 인코딩하기 위해 훨씬 더 넓은 범위를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="4c1ad032690b4d35651b3c82e19652c9c12c67fb" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;quitting#Quitting&quot;&gt;Quitting&lt;/a&gt;). The following function, which is available since Emacs 26.1, is provided for that purpose.</source>
          <target state="translated">(참고 &lt;a href=&quot;quitting#Quitting&quot;&gt;끝내기를&lt;/a&gt; ). 이를 위해 Emacs 26.1부터 사용할 수있는 다음 기능이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="2df9c4c74e30edf93d4baadda4992e6091eb99bb" translate="yes" xml:space="preserve">
          <source>(see below)&amp;mdash;the valid values are &lt;code&gt;'string&lt;/code&gt; and &lt;code&gt;'integer&lt;/code&gt;. The latter is the default, but we plan to change that, so you should specify a non-&lt;code&gt;nil&lt;/code&gt; value for &lt;var&gt;id-format&lt;/var&gt; if you use the returned</source>
          <target state="translated">(아래 참조) &amp;mdash; 유효한 값은 &lt;code&gt;'string&lt;/code&gt; 및 &lt;code&gt;'integer&lt;/code&gt; 입니다. 후자가 기본값이지만이를 변경할 계획이므로 반환 된 &lt;var&gt;id-format&lt;/var&gt; 을 사용하는 경우 id-format에 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값을 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="bef3d6c70c291ea68bbd3a2248f77782001a83c7" translate="yes" xml:space="preserve">
          <source>(the &amp;lsquo;</source>
          <target state="translated">( '</target>
        </trans-unit>
        <trans-unit id="d7457f0b7e386400081654bd498fa4f1c8375ea3" translate="yes" xml:space="preserve">
          <source>(the actual value also contains a menu binding, which is omitted here for the sake of brevity).</source>
          <target state="translated">(실제 값에는 메뉴 바인딩도 포함되어 있으므로 간결함을 위해 여기에서 생략합니다).</target>
        </trans-unit>
        <trans-unit id="cc5cd7aa465f9acce5b29508cf6807f6d8b99073" translate="yes" xml:space="preserve">
          <source>(the default global key sequence for &lt;code&gt;kill-line&lt;/code&gt;) Emacs will instead run &lt;code&gt;my-kill-line&lt;/code&gt;.</source>
          <target state="translated">( &lt;code&gt;kill-line&lt;/code&gt; 의 기본 전역 키 시퀀스 ) Emacs는 대신 &lt;code&gt;my-kill-line&lt;/code&gt; 을 실행 합니다 .</target>
        </trans-unit>
        <trans-unit id="4087c2138ee8b1340faa9e075ce65eda7d21c71f" translate="yes" xml:space="preserve">
          <source>(there is a small overhead associated with profiling, so we don&amp;rsquo;t recommend leaving it active except when you are actually running the code you want to examine).</source>
          <target state="translated">(프로파일 링과 관련된 약간의 오버 헤드가 있으므로 검사하려는 코드를 실제로 실행하는 경우를 제외하고는 활성 상태로 두지 않는 것이 좋습니다).</target>
        </trans-unit>
        <trans-unit id="f9b9bcb23ccd5677387cf40296fb8445134d8d8c" translate="yes" xml:space="preserve">
          <source>(unless you specify otherwise using the optional argument &lt;var&gt;buffer&lt;/var&gt;), whose major mode is Process Menu mode.</source>
          <target state="translated">(선택적 인수 &lt;var&gt;buffer&lt;/var&gt; 를 사용하여 달리 지정하지 않는 한 ), 주 모드는 프로세스 메뉴 모드입니다.</target>
        </trans-unit>
        <trans-unit id="4d681bab37cd1884ea4a6643078af3dc3ee21876" translate="yes" xml:space="preserve">
          <source>(we assume</source>
          <target state="translated">(우리는 추정하다</target>
        </trans-unit>
        <trans-unit id="af6440240624b1b9d5c1a311005afb49e2e4578a" translate="yes" xml:space="preserve">
          <source>(which is really</source>
          <target state="translated">(정말</target>
        </trans-unit>
        <trans-unit id="e20cbcdf209f423372032d0b29b4fa14581771e3" translate="yes" xml:space="preserve">
          <source>(y or n)</source>
          <target state="translated">(y 또는 n)</target>
        </trans-unit>
        <trans-unit id="65801b9a65f764d63a93c1b6420eb8ea8b7f2a69" translate="yes" xml:space="preserve">
          <source>(yes or no)</source>
          <target state="translated">(예 혹은 아니오)</target>
        </trans-unit>
        <trans-unit id="49c04a14dd8cf0dd8f75941d3cabd49ff8457766" translate="yes" xml:space="preserve">
          <source>) also applies to &lt;code&gt;tab&lt;/code&gt;. Likewise for the other symbols in this group. The function &lt;code&gt;read-char&lt;/code&gt; likewise converts these events into characters.</source>
          <target state="translated">)는 &lt;code&gt;tab&lt;/code&gt; 에도 적용됩니다 . 이 그룹의 다른 기호도 마찬가지입니다. &lt;code&gt;read-char&lt;/code&gt; 함수 는 마찬가지로 이러한 이벤트를 문자로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="073d0308b8b9be18296d367b35ec54590b48f865" translate="yes" xml:space="preserve">
          <source>) and</source>
          <target state="translated">) 및</target>
        </trans-unit>
        <trans-unit id="f7533b731a30b7a7fbf3b293e6320144bd5ed4cc" translate="yes" xml:space="preserve">
          <source>) and &lt;code&gt;emacsclient&lt;/code&gt; (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/emacsclient-Options.html#emacsclient-Options&quot;&gt;emacsclient Options&lt;/a&gt; in</source>
          <target state="translated">)과 &lt;code&gt;emacsclient&lt;/code&gt; (참조 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/emacsclient-Options.html#emacsclient-Options&quot;&gt;는 emacsclient 옵션&lt;/a&gt; 의를</target>
        </trans-unit>
        <trans-unit id="3bd6e10d0da7de3b6289cd88476e45a3c9912b45" translate="yes" xml:space="preserve">
          <source>) and RIGHT-TO-LEFT OVERRIDE (</source>
          <target state="translated">) 및 오른쪽에서 왼쪽 무시 (</target>
        </trans-unit>
        <trans-unit id="1b1f05124bb78c06731d2242a8f635cc9051c553" translate="yes" xml:space="preserve">
          <source>) and apostrophes (</source>
          <target state="translated">) 및 아포스트로피 (</target>
        </trans-unit>
        <trans-unit id="ab290a5596a04d9fbbf91d37653cabc8f7cd0fb3" translate="yes" xml:space="preserve">
          <source>) and see what moves. &lt;strong&gt;But don&amp;rsquo;t do this yet!&lt;/strong&gt; Keep reading, first.</source>
          <target state="translated">) 이동하는 것을 확인하십시오. &lt;strong&gt;하지만 아직하지 마세요! &lt;/strong&gt;먼저 계속 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="4aab9d329d6e91ff4036ef14bba18b1529b2d482" translate="yes" xml:space="preserve">
          <source>) and suggests (but doesn&amp;rsquo;t force) its clients to do the same. A macro &lt;code&gt;jsonrpc-lambda&lt;/code&gt; can be used to create a lambda for destructuring a JSON-object like in this example:</source>
          <target state="translated">) 클라이언트가 똑같이하도록 제안 (강제하지는 않음)합니다. 매크로 &lt;code&gt;jsonrpc-lambda&lt;/code&gt; 를 사용하여 다음 예제와 같이 JSON 객체를 분해 하기위한 람다를 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1353df51549f889516902de9667420c3c56428f5" translate="yes" xml:space="preserve">
          <source>) and then delays this many seconds before continuing, the prefix key is echoed in the echo area. (Once echoing begins in a key sequence, all subsequent characters in the same key sequence are echoed immediately.)</source>
          <target state="translated">) 계속하기 전에이 시간을 몇 초 지연하면 접두사 키가 에코 영역에 에코됩니다. (키 시퀀스에서 에코가 시작되면 동일한 키 시퀀스의 모든 후속 문자가 즉시 에코됩니다.)</target>
        </trans-unit>
        <trans-unit id="c32f77ec06151493cf05d77453ac89af9fe62fa7" translate="yes" xml:space="preserve">
          <source>) are used to represent buffers in C. The &lt;code&gt;buffer_text&lt;/code&gt; structure contains fields describing the text of a buffer; the &lt;code&gt;buffer&lt;/code&gt; structure holds other fields. In the case of indirect buffers, two or more &lt;code&gt;buffer&lt;/code&gt; structures reference the same &lt;code&gt;buffer_text&lt;/code&gt; structure.</source>
          <target state="translated">)는 C에서 버퍼를 나타내는 데 사용됩니다. &lt;code&gt;buffer_text&lt;/code&gt; 구조는 버퍼의 텍스트를 설명하는 필드를 포함합니다. &lt;code&gt;buffer&lt;/code&gt; 구조는 다른 필드를 보유하고있다. 간접 버퍼의 경우 두 개 이상의 &lt;code&gt;buffer&lt;/code&gt; 구조가 동일한 &lt;code&gt;buffer_text&lt;/code&gt; 구조를 참조합니다 .</target>
        </trans-unit>
        <trans-unit id="d6bcdf8d3c943e850736212105a03f41b8fe2b3b" translate="yes" xml:space="preserve">
          <source>) as well as these special commands:</source>
          <target state="translated">) 및 다음 특수 명령 :</target>
        </trans-unit>
        <trans-unit id="01858794e3d8177e7fa3eee0717e350c240fd6c9" translate="yes" xml:space="preserve">
          <source>) at the beginning of each defun, and see if it goes to the place where that defun appears to end. If it does not, there is a problem in that defun.</source>
          <target state="translated">) 각 defun의 시작 부분에, defun이 끝나는 것처럼 보이는 곳으로 이동하는지 확인하십시오. 그렇지 않다면 그 소멸에 문제가있는 것입니다.</target>
        </trans-unit>
        <trans-unit id="226c5d823b47223a2d7cdd562977ca13d7ca3a63" translate="yes" xml:space="preserve">
          <source>) at the beginning of that defun. This will leave you somewhere short of the place where the defun ought to end. It is possible that you will find a spurious close parenthesis in that vicinity.</source>
          <target state="translated">)의 시작 부분에. 이것은 죽은 사람이 끝나야 할 곳이 부족한 곳에 당신을 남겨 둘 것입니다. 그 근처에서 가짜 닫는 괄호를 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="636fa4f254723003d55ea731a6de152cb35a07ec" translate="yes" xml:space="preserve">
          <source>) can be used to name registers. Thus, there are 255 possible registers. A register is designated in Emacs Lisp by the character that is its name.</source>
          <target state="translated">)을 사용하여 레지스터 이름을 지정할 수 있습니다. 따라서 255 개의 가능한 레지스터가 있습니다. 레지스터는 이름 인 문자로 Emacs Lisp에서 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="45e4a53d28525007ce8f377bc0da016122463461" translate="yes" xml:space="preserve">
          <source>) commands.</source>
          <target state="translated">) 명령.</target>
        </trans-unit>
        <trans-unit id="f3e2748c1e69f3a4944821404d571f635550ab73" translate="yes" xml:space="preserve">
          <source>) control character, whichever comes first, will be displayed as if they were strong right-to-left characters, i.e. they will be reversed on display. Similarly, any characters between</source>
          <target state="translated">) 제어 문자 중 먼저 오는 문자는 강력한 오른쪽에서 왼쪽 문자 인 것처럼 표시됩니다. 즉, 화면에서 반전됩니다. 마찬가지로</target>
        </trans-unit>
        <trans-unit id="940a384a1806a126600072809d5e730a29183ce6" translate="yes" xml:space="preserve">
          <source>) doesn&amp;rsquo;t delete the region before &lt;code&gt;post-self-insert-hook&lt;/code&gt; functions are invoked. The way to do so is to add a function that returns &lt;code&gt;nil&lt;/code&gt; to &lt;code&gt;self-insert-uses-region-functions&lt;/code&gt;, a special hook that tells Delete Selection mode it should not delete the region.</source>
          <target state="translated">)는 &lt;code&gt;post-self-insert-hook&lt;/code&gt; 함수가 호출 되기 전에 영역을 삭제하지 않습니다 . 이를 수행하는 방법은 &lt;code&gt;nil&lt;/code&gt; 을 반환하는 함수 를 &lt;code&gt;self-insert-uses-region-functions&lt;/code&gt; 에 추가하는 것입니다. 이 함수 는 선택 삭제 모드에서 영역을 삭제하지 말라고 알려주는 특수 후크입니다.</target>
        </trans-unit>
        <trans-unit id="4613299a5ee2e95f135d131fcd00a53826266d97" translate="yes" xml:space="preserve">
          <source>) flow control for output to the terminal. This has no effect except in &lt;small&gt;CBREAK&lt;/small&gt; mode.</source>
          <target state="translated">) 터미널로의 출력을위한 흐름 제어. 이것은 &lt;small&gt;CBREAK&lt;/small&gt; 모드를 제외하고는 효과가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="3ccc814fbb8c7b4bbba9ac223b05b01e02fc42c0" translate="yes" xml:space="preserve">
          <source>) flow control for output to the terminal. This value is meaningful only when &lt;var&gt;interrupt&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">) 터미널로의 출력을위한 흐름 제어. 이 값은 &lt;var&gt;interrupt&lt;/var&gt; 가 &lt;code&gt;nil&lt;/code&gt; 인 경우에만 의미 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="35f58811071207be5ed3db04c572133659408c42" translate="yes" xml:space="preserve">
          <source>) for an example of a mode that uses &lt;code&gt;show-help-function&lt;/code&gt;.</source>
          <target state="translated">)는 &lt;code&gt;show-help-function&lt;/code&gt; 을 사용하는 모드의 예입니다 .</target>
        </trans-unit>
        <trans-unit id="5c18c29b4e3509699afc78360bfb7f6239584fd3" translate="yes" xml:space="preserve">
          <source>) for this category.</source>
          <target state="translated">).</target>
        </trans-unit>
        <trans-unit id="26bed234a17e894c978fee1d007d77ab8d3f7d05" translate="yes" xml:space="preserve">
          <source>) in &lt;var&gt;string&lt;/var&gt; as per the value of &lt;code&gt;text-quoting-style&lt;/code&gt;.</source>
          <target state="translated">) &lt;var&gt;string&lt;/var&gt; 에서 &lt;code&gt;text-quoting-style&lt;/code&gt; 값에 따라 .</target>
        </trans-unit>
        <trans-unit id="3501b0c5ea8b351768f7ac5a9241095b622535d0" translate="yes" xml:space="preserve">
          <source>) in the &amp;ldquo;fullboth&amp;rdquo; state. Normally this parameter is installed automatically by that command when toggling the state to fullboth. If, however, you start Emacs in the &amp;ldquo;fullboth&amp;rdquo; state, you have to specify the desired behavior in your initial file as, for example</source>
          <target state="translated">) &quot;fullboth&quot;상태. 일반적으로이 매개 변수는 상태를 fullboth로 전환 할 때 해당 명령에 의해 자동으로 설치됩니다. 그러나 &quot;fullboth&quot;상태에서 Emacs를 시작하면 초기 파일에서 원하는 동작을 다음과 같이 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="b234c04b41508a5bd9df2801fd6a4dc23f62210f" translate="yes" xml:space="preserve">
          <source>) include:</source>
          <target state="translated">) 포함:</target>
        </trans-unit>
        <trans-unit id="621e654b796198d3886b46a1846923b4710210e8" translate="yes" xml:space="preserve">
          <source>) is enabled, commands that operate on the active region (a.k.a. &amp;ldquo;selection&amp;rdquo;) behave slightly differently. This works by adding the function &lt;code&gt;delete-selection-pre-hook&lt;/code&gt; to the &lt;code&gt;pre-command-hook&lt;/code&gt; (see &lt;a href=&quot;command-overview#Command-Overview&quot;&gt;Command Overview&lt;/a&gt;). That function calls &lt;code&gt;delete-selection-helper&lt;/code&gt; to delete the selection as appropriate for the command. If you want to adapt a command to Delete Selection mode, put the &lt;code&gt;delete-selection&lt;/code&gt; property on the function&amp;rsquo;s symbol (see &lt;a href=&quot;symbol-plists#Symbol-Plists&quot;&gt;Symbol Plists&lt;/a&gt;); commands that don&amp;rsquo;t have this property on their symbol won&amp;rsquo;t delete the selection. This property can have one of several values to tailor the behavior to what the command is supposed to do; see the doc strings of &lt;code&gt;delete-selection-pre-hook&lt;/code&gt; and &lt;code&gt;delete-selection-helper&lt;/code&gt; for the details.</source>
          <target state="translated">)가 활성화되면 활성 영역에서 작동하는 명령 ( &quot;선택&quot;이라고도 함)이 약간 다르게 작동합니다. 기능을 추가하여이 작품 &lt;code&gt;delete-selection-pre-hook&lt;/code&gt; 받는 &lt;code&gt;pre-command-hook&lt;/code&gt; (참조 &lt;a href=&quot;command-overview#Command-Overview&quot;&gt;명령 개요&lt;/a&gt; ). 이 함수는 &lt;code&gt;delete-selection-helper&lt;/code&gt; 를 호출 하여 명령에 적합한 선택을 삭제합니다. 선택 항목 삭제 모드에 명령을 적용 하려면 함수 심볼에 &lt;code&gt;delete-selection&lt;/code&gt; 속성을 지정합니다 ( &lt;a href=&quot;symbol-plists#Symbol-Plists&quot;&gt;Symbol Plists&lt;/a&gt; 참조 ). 심볼에이 속성이없는 명령은 선택 항목을 삭제하지 않습니다. 이 속성은 명령이 수행해야하는 작업에 맞게 동작을 조정하는 여러 값 중 하나를 가질 수 있습니다. 의 문서 문자열 참조 &lt;code&gt;delete-selection-pre-hook&lt;/code&gt; 및 &lt;code&gt;delete-selection-helper&lt;/code&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e7b28f78a86403f4dcad79dbba94916e498dee62" translate="yes" xml:space="preserve">
          <source>) normally sends the &lt;code&gt;SIGTSTP&lt;/code&gt; signal to a subprocess. When &lt;var&gt;current-group&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, you can think of this function as typing</source>
          <target state="translated">) 일반적으로 &lt;code&gt;SIGTSTP&lt;/code&gt; 신호를 하위 프로세스로 보냅니다 . 때 &lt;var&gt;current-group&lt;/var&gt; 비입니다 &lt;code&gt;nil&lt;/code&gt; , 당신은 입력으로이 기능을 생각할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="c7dba5f36ad3244d4529eef581ce34deef656b1c" translate="yes" xml:space="preserve">
          <source>) or 160 through 255 (&lt;code&gt;eight-bit-graphic&lt;/code&gt;). However, when a unibyte string is converted to a multibyte string, all characters with codes in the range 160 through 255 are converted to characters with higher codes, whereas</source>
          <target state="translated">) 또는 160 ~ 255 ( &lt;code&gt;eight-bit-graphic&lt;/code&gt; ). 그러나 유니 바이트 문자열이 멀티 바이트 문자열로 변환되면 코드가 160에서 255 사이 인 모든 문자는 더 높은 코드를 가진 문자로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="bf24b0073668a08646c687c6cf07c938af06ebe3" translate="yes" xml:space="preserve">
          <source>) or the file name of a file which is a directory (such as</source>
          <target state="translated">) 또는 디렉토리 인 파일의 파일 이름 (예 :</target>
        </trans-unit>
        <trans-unit id="7f6afa2ebd2052d9da57e030feeedff4d52e4821" translate="yes" xml:space="preserve">
          <source>) runs these two hooks just as a keyboard command does.</source>
          <target state="translated">)은 키보드 명령처럼이 두 가지 후크를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="e2deb8d69fd107234cd1204579040571cc46b2e0" translate="yes" xml:space="preserve">
          <source>) sandboxing system.</source>
          <target state="translated">) 샌드 박스 시스템.</target>
        </trans-unit>
        <trans-unit id="ad337ca541ac98f5169649b9256a37a1af4fde66" translate="yes" xml:space="preserve">
          <source>) sent by a Latin-1 terminal. In order to use this binding, you need to teach Emacs how to decode the keyboard by using an appropriate input method (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Input-Methods.html#Input-Methods&quot;&gt;Input Methods&lt;/a&gt; in</source>
          <target state="translated">) Latin-1 터미널에서 전송됩니다. 이 바인딩을 사용하려면 적절한 입력 방법을 사용하여 키보드를 디코딩하는 방법을 Emacs에 가르쳐야합니다 ( &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Input-Methods.html#Input-Methods&quot;&gt;입력 방법&lt;/a&gt; 참조) .</target>
        </trans-unit>
        <trans-unit id="f573b0ba691b201b5ab47a7b830b5b498fedcd85" translate="yes" xml:space="preserve">
          <source>) that overcomes their limitations and introduces the &lt;em&gt;pattern matching programming style&lt;/em&gt;. The limitations that &lt;code&gt;pcase&lt;/code&gt; overcomes are:</source>
          <target state="translated">)의 한계를 극복하고 &lt;em&gt;패턴 매칭 프로그래밍 스타일을&lt;/em&gt; 도입했습니다 . &lt;code&gt;pcase&lt;/code&gt; 가 극복 하는 한계 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="72606b384cda61d767f2667441cea324cb2f3d72" translate="yes" xml:space="preserve">
          <source>) to do most of the work. In order to communicate with that function, it first converts &lt;var&gt;time&lt;/var&gt; and &lt;var&gt;zone&lt;/var&gt; to internal form; the operating system limits the range of time and zone values. This function also encodes &lt;var&gt;format-string&lt;/var&gt; using the coding system specified by &lt;code&gt;locale-coding-system&lt;/code&gt; (see &lt;a href=&quot;locales#Locales&quot;&gt;Locales&lt;/a&gt;); after &lt;code&gt;strftime&lt;/code&gt; returns the resulting string, this function decodes the string using that same coding system.</source>
          <target state="translated">) 대부분의 작업을 수행합니다. 해당 기능과 통신하기 위해 먼저 &lt;var&gt;time&lt;/var&gt; 과 &lt;var&gt;zone&lt;/var&gt; 을 내부 형식으로 변환 합니다. 운영 체제는 시간 및 구역 값의 범위를 제한합니다. 이 함수는 또한 &lt;code&gt;locale-coding-system&lt;/code&gt; 에서 지정한 코딩 시스템을 사용하여 &lt;var&gt;format-string&lt;/var&gt; 을 인코딩 합니다 ( &lt;a href=&quot;locales#Locales&quot;&gt;로케일&lt;/a&gt; 참조 ). &lt;code&gt;strftime&lt;/code&gt; 이 결과 문자열을 반환 한 후이 함수는 동일한 코딩 시스템을 사용하여 문자열을 디코딩합니다.</target>
        </trans-unit>
        <trans-unit id="bfcc0e1afb4479acd81a2ba043bf80a1bdeffe5c" translate="yes" xml:space="preserve">
          <source>) to move back beyond the start of your Info browsing history, Emacs signals a &lt;code&gt;user-error&lt;/code&gt;. Such errors do not cause entry to the debugger, even when &lt;code&gt;debug-on-error&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;. See &lt;a href=&quot;error-debugging#Error-Debugging&quot;&gt;Error Debugging&lt;/a&gt;.</source>
          <target state="translated">) 정보 검색 기록의 시작 부분을 넘어 다시 이동하기 위해 Emacs는 &lt;code&gt;user-error&lt;/code&gt; 신호를 보냅니다 . 이러한 오류는 &lt;code&gt;debug-on-error&lt;/code&gt; 가 &lt;code&gt;nil&lt;/code&gt; 이 아닌 경우에도 디버거에 항목을 유발하지 않습니다 . &lt;a href=&quot;error-debugging#Error-Debugging&quot;&gt;오류 디버깅을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bccb2df169c5d4a1b38e22322dff12cd1b92de1c" translate="yes" xml:space="preserve">
          <source>) to see the whole call tree below a function. Pressing</source>
          <target state="translated">)를 클릭하면 함수 아래의 전체 호출 트리를 볼 수 있습니다. 누르기</target>
        </trans-unit>
        <trans-unit id="053bcd05153d7d65f9cce71ab70156c8db3f4663" translate="yes" xml:space="preserve">
          <source>) when you are not inside Emacs.</source>
          <target state="translated">) Emacs 내부에 있지 않을 때.</target>
        </trans-unit>
        <trans-unit id="b556254390b4e0259df3206dd9ecceca497ee366" translate="yes" xml:space="preserve">
          <source>) which should return a string describing the current prefix state. For example,</source>
          <target state="translated">) 현재 접두사 상태를 설명하는 문자열을 반환해야합니다. 예를 들면</target>
        </trans-unit>
        <trans-unit id="951c4cdbbef269d94c75128aac88d0f7ffc4c9bf" translate="yes" xml:space="preserve">
          <source>) with no modifier bits, it calls that function, passing the character as an argument.</source>
          <target state="translated">) 수정 자 비트가없는 경우 해당 함수를 호출하여 문자를 인수로 전달합니다.</target>
        </trans-unit>
        <trans-unit id="15a5313afd38cc04f828b34a31382864d7d7a8b0" translate="yes" xml:space="preserve">
          <source>), Prog mode and Special mode exist mainly to let other modes derive from them.</source>
          <target state="translated">), Prog 모드 및 특수 모드는 주로 다른 모드에서 파생 될 수 있도록 존재합니다.</target>
        </trans-unit>
        <trans-unit id="f9a440382d28b0557a916a28a2786ffb723a1a6d" translate="yes" xml:space="preserve">
          <source>), and &lt;code&gt;define-overloadable-function&lt;/code&gt; (see the commentary in</source>
          <target state="translated">) 및 &lt;code&gt;define-overloadable-function&lt;/code&gt; (의 주석 참조)</target>
        </trans-unit>
        <trans-unit id="e830d495d0a5eefc8074113b8e40dd8904c9a9d9" translate="yes" xml:space="preserve">
          <source>), and &lt;code&gt;define-skeleton&lt;/code&gt; (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/autotype/index.html#Top&quot;&gt;Autotyping&lt;/a&gt; in</source>
          <target state="translated">) 및 &lt;code&gt;define-skeleton&lt;/code&gt; (참조 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/autotype/index.html#Top&quot;&gt;Autotyping를&lt;/a&gt; 년</target>
        </trans-unit>
        <trans-unit id="8715387dc4046bb21c373d26d670b2ef9a870574" translate="yes" xml:space="preserve">
          <source>), as well as in Lisp programs. The return value is the buffer switched to.</source>
          <target state="translated">)뿐만 아니라 Lisp 프로그램에서도 마찬가지입니다. 반환 값은 전환 된 버퍼입니다.</target>
        </trans-unit>
        <trans-unit id="4087ef7cf3a90e72351d90652bae11ec7bf2334c" translate="yes" xml:space="preserve">
          <source>), before loading the terminal-specific library (if started on a text terminal) and processing the command-line action arguments.</source>
          <target state="translated">), 터미널 별 라이브러리 (텍스트 터미널에서 시작된 경우)를로드하고 명령 줄 작업 인수를 처리하기 전에.</target>
        </trans-unit>
        <trans-unit id="651dd418a9f33f79b50005fed18a5c5cdb923769" translate="yes" xml:space="preserve">
          <source>), but some are defined in Lisp. For example, the file</source>
          <target state="translated">), 일부는 Lisp에 정의되어 있습니다. 예를 들어, 파일</target>
        </trans-unit>
        <trans-unit id="a63155659a13b513d8930deae62c784d6975959f" translate="yes" xml:space="preserve">
          <source>), don&amp;rsquo;t shorten long items (like strings and lists).</source>
          <target state="translated">), 긴 항목 (예 : 문자열 및 목록)을 줄이지 마십시오.</target>
        </trans-unit>
        <trans-unit id="8af74967f6e976df5b905ce2d09f7edcc3959f66" translate="yes" xml:space="preserve">
          <source>), except the first element of the list is the archive version.</source>
          <target state="translated">), 목록의 첫 번째 요소는 아카이브 버전입니다.</target>
        </trans-unit>
        <trans-unit id="833963ce398ca1c512dfb2ffd10e295afb07c3a1" translate="yes" xml:space="preserve">
          <source>), it is sometimes useful to know the width taken for displaying the line numbers. The following function is for Lisp programs which need this information for layout calculations.</source>
          <target state="translated">), 줄 번호를 표시하는 데 걸리는 너비를 아는 것이 때때로 유용합니다. 다음 기능은 레이아웃 계산을 위해이 정보가 필요한 Lisp 프로그램을위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="e2f944ee593e735a3b155a648092b983a852f18b" translate="yes" xml:space="preserve">
          <source>), like this:</source>
          <target state="translated">), 다음과 같이 :</target>
        </trans-unit>
        <trans-unit id="30e9e1571a45871ae2600c659e07c6f67e8b2816" translate="yes" xml:space="preserve">
          <source>), not into code 8 (</source>
          <target state="translated">), 코드 8 (</target>
        </trans-unit>
        <trans-unit id="757528d5b33a28606a5ae2e1e0ce3703323b990d" translate="yes" xml:space="preserve">
          <source>), or of one of its child classes.</source>
          <target state="translated">) 또는 하위 클래스 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="6672345a5e5d7e1e8bae19710e4a683c087fafc5" translate="yes" xml:space="preserve">
          <source>), the printed text is inserted into the buffer. If you execute the example by other means (such as by evaluating the function &lt;code&gt;eval-region&lt;/code&gt;), the printed text is displayed in the echo area.</source>
          <target state="translated">), 인쇄 된 텍스트가 버퍼에 삽입됩니다. 다른 방법 (예 : &lt;code&gt;eval-region&lt;/code&gt; 함수 평가)으로 예제를 실행하면 인쇄 된 텍스트가 에코 영역에 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="a56fc82dd2da4ba4272eeceb2622080fa79c4840" translate="yes" xml:space="preserve">
          <source>), then substitutes &amp;lsquo;</source>
          <target state="translated">) 그런 다음 '</target>
        </trans-unit>
        <trans-unit id="4f20f1100e3ba8d23ce2bbad7bb5e3a3bcadf952" translate="yes" xml:space="preserve">
          <source>), this support is based on &lt;em&gt;generic functions&lt;/em&gt;. The Emacs generic functions closely follow</source>
          <target state="translated">),이 지원은 &lt;em&gt;일반 기능을&lt;/em&gt; 기반으로 &lt;em&gt;합니다&lt;/em&gt; . Emacs 일반 함수는 밀접하게 따릅니다.</target>
        </trans-unit>
        <trans-unit id="8a858352706cfaa69f1c00b730ab3f9321d381c5" translate="yes" xml:space="preserve">
          <source>), which is described in Annex #9 of the Unicode standard (&lt;a href=&quot;http://www.unicode.org/reports/tr9/&quot;&gt;http://www.unicode.org/reports/tr9/&lt;/a&gt;). Emacs provides a &amp;ldquo;Full Bidirectionality&amp;rdquo; class implementation of the</source>
          <target state="translated">), 이는 유니 코드 표준의 부록 # 9 ( &lt;a href=&quot;http://www.unicode.org/reports/tr9/&quot;&gt;http://www.unicode.org/reports/tr9/&lt;/a&gt; )에 설명되어 있습니다. Emacs는 &quot;Full Bidirectionality&quot;클래스 구현을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d41919407ce8f78b6cd89401353e39179fec9ab2" translate="yes" xml:space="preserve">
          <source>).</source>
          <target state="translated">).</target>
        </trans-unit>
        <trans-unit id="6bc702cb6b19e4fb55b91ac44da9f15726a86ef9" translate="yes" xml:space="preserve">
          <source>). (The only way to change it with real effect is before dumping Emacs.)</source>
          <target state="translated">). (실제 효과로 변경하는 유일한 방법은 Emacs를 버리기 전입니다.)</target>
        </trans-unit>
        <trans-unit id="e430dcad94c6273b9afd285db151fe1da6688fe1" translate="yes" xml:space="preserve">
          <source>). &lt;var&gt;buffer-or-name&lt;/var&gt; can be a buffer, a buffer name (a string), or &lt;code&gt;nil&lt;/code&gt; (or omitted), which means to use the current buffer. &lt;var&gt;stream&lt;/var&gt; is used as in &lt;code&gt;eval-region&lt;/code&gt;, unless &lt;var&gt;stream&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt; and &lt;var&gt;print&lt;/var&gt; non-&lt;code&gt;nil&lt;/code&gt;. In that case, values that result from evaluating the expressions are still discarded, but the output of the output functions is printed in the echo area. &lt;var&gt;filename&lt;/var&gt; is the file name to use for &lt;code&gt;load-history&lt;/code&gt; (see &lt;a href=&quot;unloading#Unloading&quot;&gt;Unloading&lt;/a&gt;), and defaults to &lt;code&gt;buffer-file-name&lt;/code&gt; (see &lt;a href=&quot;buffer-file-name#Buffer-File-Name&quot;&gt;Buffer File Name&lt;/a&gt;). If &lt;var&gt;unibyte&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;read&lt;/code&gt; converts strings to unibyte whenever possible.</source>
          <target state="translated">). &lt;var&gt;buffer-or-name&lt;/var&gt; 은 버퍼, 버퍼 이름 (문자열) 또는 &lt;code&gt;nil&lt;/code&gt; (또는 생략)이 될 수 있으며 이는 현재 버퍼를 사용함을 의미합니다. &lt;var&gt;stream&lt;/var&gt; 에서와 같이 사용되는 &lt;code&gt;eval-region&lt;/code&gt; 않는 &lt;var&gt;stream&lt;/var&gt; 이다 &lt;code&gt;nil&lt;/code&gt; 및 &lt;var&gt;print&lt;/var&gt; 비 &lt;code&gt;nil&lt;/code&gt; . 이 경우 표현식 평가 결과 값은 여전히 ​​버려지지만 출력 함수의 출력은 에코 영역에 인쇄됩니다. &lt;var&gt;filename&lt;/var&gt; 은 &lt;code&gt;load-history&lt;/code&gt; 에 사용할 파일 이름이며 ( &lt;a href=&quot;unloading#Unloading&quot;&gt;언로드&lt;/a&gt; 참조 ) 기본값은 &lt;code&gt;buffer-file-name&lt;/code&gt; 입니다 ( &lt;a href=&quot;buffer-file-name#Buffer-File-Name&quot;&gt;버퍼 파일 이름&lt;/a&gt; 참조 ). &lt;var&gt;unibyte&lt;/var&gt; 경우 &lt;code&gt;nil&lt;/code&gt; 이 아닌 경우 &lt;code&gt;read&lt;/code&gt; 는 가능할 때마다 문자열을 유니 바이트로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="07a2510c420a7965262548fdd3405514483b8c1d" translate="yes" xml:space="preserve">
          <source>). After the frame is created, this function applies any parameters specified in &lt;code&gt;frame-inherited-parameters&lt;/code&gt; (see below) it has no assigned yet, taking the values from the frame that was selected when &lt;code&gt;make-frame&lt;/code&gt; was called.</source>
          <target state="translated">). 프레임이 생성 된 후이 함수는 &lt;code&gt;frame-inherited-parameters&lt;/code&gt; (아래 참조)에 아직 할당되지 않은 매개 변수를 적용하여 &lt;code&gt;make-frame&lt;/code&gt; 이 호출 될 때 선택한 프레임에서 값을 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="0216cddf360a2a85d790b19bbbc35086b0fdcab8" translate="yes" xml:space="preserve">
          <source>). Any characters between a</source>
          <target state="translated">). 사이의 모든 문자</target>
        </trans-unit>
        <trans-unit id="d5f243bc61820b15169ec95c36fe9c706ac2323e" translate="yes" xml:space="preserve">
          <source>). Documentation strings and message formats should be written so that they display well with any of these styles. For example, the documentation string</source>
          <target state="translated">). 문서화 문자열과 메시지 형식은 이러한 스타일과 잘 어울리도록 작성되어야합니다. 예를 들어, 문서 문자열</target>
        </trans-unit>
        <trans-unit id="b73b129cee71ad3bf5376cffeb058aa050c76526" translate="yes" xml:space="preserve">
          <source>). Emacs can connect to other X displays via the command &lt;code&gt;make-frame-on-display&lt;/code&gt;. Each X display has its own selected frame and its own minibuffer windows; however, only one of those frames is &lt;em&gt;the&lt;/em&gt; selected frame at any given moment (see &lt;a href=&quot;input-focus#Input-Focus&quot;&gt;Input Focus&lt;/a&gt;). Emacs can even connect to other text terminals, by interacting with the &lt;code&gt;emacsclient&lt;/code&gt; program. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html#Emacs-Server&quot;&gt;Emacs Server&lt;/a&gt; in</source>
          <target state="translated">). Emacs는 &lt;code&gt;make-frame-on-display&lt;/code&gt; 명령 을 통해 다른 X 디스플레이에 연결할 수 있습니다 . 각 X 디스플레이에는 자체 선택된 프레임과 자체 미니 버퍼 창이 있습니다. 그러나, 그 프레임의 하나는 임의의 주어진 순간에 선택된 프레임 (참조 : &lt;a href=&quot;input-focus#Input-Focus&quot;&gt;입력 포커스&lt;/a&gt; ). Emacs는 &lt;code&gt;emacsclient&lt;/code&gt; 프로그램 과 상호 작용하여 다른 텍스트 터미널에 연결할 수도 있습니다 . &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html#Emacs-Server&quot;&gt;Emacs Server&lt;/a&gt; 를 참조하십시오 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="066d1d65d8509797f2d96be2e3015ba666bf465f" translate="yes" xml:space="preserve">
          <source>). For example, abbrev definitions are stored by default in</source>
          <target state="translated">). 예를 들어, 약어 정의는 기본적으로</target>
        </trans-unit>
        <trans-unit id="94c00897f2e11a204eb5c6761348c0f8312af235" translate="yes" xml:space="preserve">
          <source>). For this reason, you might not use command-line arguments very often; nonetheless, they can be useful when invoking Emacs from session scripts or debugging Emacs. This section describes how Emacs processes command-line arguments.</source>
          <target state="translated">). 이러한 이유로 명령 줄 인수를 자주 사용하지 않을 수 있습니다. 그럼에도 불구하고 세션 스크립트에서 Emacs를 호출하거나 Emacs를 디버깅 할 때 유용 할 수 있습니다. 이 섹션에서는 Emacs가 명령 줄 인수를 처리하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="728f8798e5be4aedb202df13fa2c782d1de335ff" translate="yes" xml:space="preserve">
          <source>). If &lt;code&gt;debug-on-quit&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt; (the default), then the debugger is not called when you quit.</source>
          <target state="translated">). 종료시 &lt;code&gt;debug-on-quit&lt;/code&gt; 가 &lt;code&gt;nil&lt;/code&gt; (기본값)이면 종료 할 때 디버거가 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fb170b189eb5437331809439a20255ffb7f79fff" translate="yes" xml:space="preserve">
          <source>). If not present, mouse-clicks use &lt;code&gt;action&lt;/code&gt; instead.</source>
          <target state="translated">). 없는 경우 마우스 클릭은 대신 &lt;code&gt;action&lt;/code&gt; 사용합니다.</target>
        </trans-unit>
        <trans-unit id="b396761af7a7f7aaf287d0561b9bf7ea930bd58c" translate="yes" xml:space="preserve">
          <source>). If the part before the first slash is &amp;lsquo;</source>
          <target state="translated">). 첫 번째 슬래시 앞 부분이 '</target>
        </trans-unit>
        <trans-unit id="6f1da0e0e0efb94a375946201121a0262ccc4281" translate="yes" xml:space="preserve">
          <source>). In modern object-oriented parlance, this class is &amp;ldquo;abstract&amp;rdquo;, i.e. the actual class of a useful connection object is always a subclass of &lt;code&gt;jsonrpc-connection&lt;/code&gt;. Nevertheless, we can define two distinct APIs around the &lt;code&gt;jsonrpc-connection&lt;/code&gt; class:</source>
          <target state="translated">). 현대 객체 지향 용어에서이 클래스는 &quot;추상&quot;입니다. 즉, 유용한 연결 객체의 실제 클래스는 항상 &lt;code&gt;jsonrpc-connection&lt;/code&gt; 의 하위 클래스입니다 . 그럼에도 불구하고 &lt;code&gt;jsonrpc-connection&lt;/code&gt; 클래스 주위에 두 개의 별개의 API를 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c0bab5a1784a2fcb2c482c80fe9763233a1547b0" translate="yes" xml:space="preserve">
          <source>). In particular, stack-allocated objects should never be made visible to user Lisp code.</source>
          <target state="translated">). 특히, 스택 할당 개체는 사용자 Lisp 코드에 표시되지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="1a31c66c7664254198e479280c1092ac3f0f380f" translate="yes" xml:space="preserve">
          <source>). It also adds the directories where optional packages are installed, if any (see &lt;a href=&quot;packaging-basics#Packaging-Basics&quot;&gt;Packaging Basics&lt;/a&gt;).</source>
          <target state="translated">). 또한 옵션 패키지가 설치된 경우 디렉토리를 추가합니다 ( &lt;a href=&quot;packaging-basics#Packaging-Basics&quot;&gt;패키징 기본 사항&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="eb6eccfa6a3552625a92765ed4eabc0113ca9cc4" translate="yes" xml:space="preserve">
          <source>). It returns a list of all key sequences (of any length) that are bound to &lt;var&gt;command&lt;/var&gt; in a set of keymaps.</source>
          <target state="translated">). 키맵 세트의 &lt;var&gt;command&lt;/var&gt; 에 바인드 된 모든 키 시퀀스 (길이에 관계없이) 목록을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="1a87dce53bb8cbe87969c28c20182d110ecbc478" translate="yes" xml:space="preserve">
          <source>). Modes whose buffers visit a file, don&amp;rsquo;t have to do anything to use this feature.</source>
          <target state="translated">). 버퍼가 파일을 방문하는 모드는이 기능을 사용하기 위해 아무것도 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="0a2d02183133f0bcaa675cd6203051bc17dc3838" translate="yes" xml:space="preserve">
          <source>). Only used for</source>
          <target state="translated">). 용도로만 사용</target>
        </trans-unit>
        <trans-unit id="17ce559712d512ce869b08af5a3c13919cdf3479" translate="yes" xml:space="preserve">
          <source>). Prompt.</source>
          <target state="translated">). Prompt.</target>
        </trans-unit>
        <trans-unit id="3a49fa7f0dffd6cb3bfa090eb4e34ffb81c5bda0" translate="yes" xml:space="preserve">
          <source>). See the &lt;a href=&quot;https://www.unicode.org/versions/Unicode12.1.0/ch04.pdf&quot;&gt;Character Properties chapter of the Unicode Standard&lt;/a&gt;, for a detailed description of Unicode character properties and their meaning. This section assumes you are already familiar with that chapter of the Unicode Standard, and want to apply that knowledge to Emacs Lisp programs.</source>
          <target state="translated">). See the &lt;a href=&quot;https://www.unicode.org/versions/Unicode12.1.0/ch04.pdf&quot;&gt;Character Properties chapter of the Unicode Standard&lt;/a&gt;, for a detailed description of Unicode character properties and their meaning. This section assumes you are already familiar with that chapter of the Unicode Standard, and want to apply that knowledge to Emacs Lisp programs.</target>
        </trans-unit>
        <trans-unit id="1419299c74c981ec36a2579df8c6be1c026603d0" translate="yes" xml:space="preserve">
          <source>). The &lt;code&gt;harfbuzz&lt;/code&gt; driver is similarly recommended. On other systems, there is only one available font backend, so it does not make sense to modify this frame parameter.</source>
          <target state="translated">). The &lt;code&gt;harfbuzz&lt;/code&gt; driver is similarly recommended. On other systems, there is only one available font backend, so it does not make sense to modify this frame parameter.</target>
        </trans-unit>
        <trans-unit id="572ec2df6091e2de7abdb26132c366a418487f98" translate="yes" xml:space="preserve">
          <source>). The &lt;code&gt;help-echo&lt;/code&gt; and &lt;code&gt;keymap&lt;/code&gt; properties in &lt;var&gt;string&lt;/var&gt; have special meanings. See &lt;a href=&quot;properties-in-mode#Properties-in-Mode&quot;&gt;Properties in Mode&lt;/a&gt;.</source>
          <target state="translated">). The &lt;code&gt;help-echo&lt;/code&gt; and &lt;code&gt;keymap&lt;/code&gt; properties in &lt;var&gt;string&lt;/var&gt; have special meanings. See &lt;a href=&quot;properties-in-mode#Properties-in-Mode&quot;&gt;Properties in Mode&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="f4e8d2341b1c3f661e9dc908fa9a2024bfff000c" translate="yes" xml:space="preserve">
          <source>). The chosen level&amp;rsquo;s symbol value is used to initialize &lt;code&gt;font-lock-keywords&lt;/code&gt;.</source>
          <target state="translated">). The chosen level&amp;rsquo;s symbol value is used to initialize &lt;code&gt;font-lock-keywords&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8089685677ab37cbc7dda734039ddd03a3bfe4cb" translate="yes" xml:space="preserve">
          <source>). The image type symbol for images loaded via ImageMagick is &lt;code&gt;imagemagick&lt;/code&gt;, regardless of the actual underlying image format.</source>
          <target state="translated">). The image type symbol for images loaded via ImageMagick is &lt;code&gt;imagemagick&lt;/code&gt; , regardless of the actual underlying image format.</target>
        </trans-unit>
        <trans-unit id="b678b15930d746fbaaa829bd817ec8e13d1fb3ba" translate="yes" xml:space="preserve">
          <source>). The listing command should create or switch to a buffer, turn on the derived mode, specify the tabulated data, and finally call &lt;code&gt;tabulated-list-print&lt;/code&gt; to populate the buffer.</source>
          <target state="translated">). The listing command should create or switch to a buffer, turn on the derived mode, specify the tabulated data, and finally call &lt;code&gt;tabulated-list-print&lt;/code&gt; to populate the buffer.</target>
        </trans-unit>
        <trans-unit id="7d08e33dad037ba3ba25aedd7ea0a5ed0e5de9a2" translate="yes" xml:space="preserve">
          <source>). The minibuffer is displayed on the bottom line of the frame, in the same place as the echo area (see &lt;a href=&quot;the-echo-area#The-Echo-Area&quot;&gt;The Echo Area&lt;/a&gt;), but only while it is in use for reading an argument.</source>
          <target state="translated">). The minibuffer is displayed on the bottom line of the frame, in the same place as the echo area (see &lt;a href=&quot;the-echo-area#The-Echo-Area&quot;&gt;The Echo Area&lt;/a&gt;), but only while it is in use for reading an argument.</target>
        </trans-unit>
        <trans-unit id="072f1abd96aeba3a7f4a4c818f1d0c3967bd54de" translate="yes" xml:space="preserve">
          <source>). The order of looking for a matching rule is &lt;code&gt;auto-coding-alist&lt;/code&gt; first, then &lt;code&gt;auto-coding-regexp-alist&lt;/code&gt;, then the &lt;code&gt;coding:&lt;/code&gt; tag, and lastly &lt;code&gt;auto-coding-functions&lt;/code&gt;. If no matching rule was found, the function returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">). The order of looking for a matching rule is &lt;code&gt;auto-coding-alist&lt;/code&gt; first, then &lt;code&gt;auto-coding-regexp-alist&lt;/code&gt; , then the &lt;code&gt;coding:&lt;/code&gt; tag, and lastly &lt;code&gt;auto-coding-functions&lt;/code&gt; . If no matching rule was found, the function returns &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="250c795e9ba43ff9a60c730d6ee6993b65cec415" translate="yes" xml:space="preserve">
          <source>). Then:</source>
          <target state="translated">). Then:</target>
        </trans-unit>
        <trans-unit id="286e2b3bf949060c30be8e9f33bc4371c6f9f0f2" translate="yes" xml:space="preserve">
          <source>). This is not done if the options &amp;lsquo;</source>
          <target state="translated">). This is not done if the options &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="0cda135f2159c3d8fa253292c549c5efa01b21b7" translate="yes" xml:space="preserve">
          <source>). This is what most users prefer.</source>
          <target state="translated">). This is what most users prefer.</target>
        </trans-unit>
        <trans-unit id="9ed31daed3ddf208b63a3857f511f34f5e96c456" translate="yes" xml:space="preserve">
          <source>). This section explains how to customize Imenu&amp;rsquo;s method of finding definitions or buffer portions for a particular major mode.</source>
          <target state="translated">). This section explains how to customize Imenu&amp;rsquo;s method of finding definitions or buffer portions for a particular major mode.</target>
        </trans-unit>
        <trans-unit id="1af39ec0f6e6fe3b30164370716a75eb2fdda459" translate="yes" xml:space="preserve">
          <source>). This will move you to the beginning of the first defun that is unbalanced.</source>
          <target state="translated">). This will move you to the beginning of the first defun that is unbalanced.</target>
        </trans-unit>
        <trans-unit id="123fb6098721cdb942517f5b61e2ee732ce7ff0a" translate="yes" xml:space="preserve">
          <source>). We call this the package&amp;rsquo;s &lt;em&gt;content directory&lt;/em&gt;. It is where Emacs puts the package&amp;rsquo;s contents (the single Lisp file for a simple package, or the files extracted from a multi-file package).</source>
          <target state="translated">). We call this the package&amp;rsquo;s &lt;em&gt;content directory&lt;/em&gt;. It is where Emacs puts the package&amp;rsquo;s contents (the single Lisp file for a simple package, or the files extracted from a multi-file package).</target>
        </trans-unit>
        <trans-unit id="a7099ed7d17868c66e5e144077105d5e67f7ba6f" translate="yes" xml:space="preserve">
          <source>). Within an XLFD string, wildcard characters may be used: the &amp;lsquo;</source>
          <target state="translated">). Within an XLFD string, wildcard characters may be used: the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="aa39a761bab27ab071435ed15061c91ffcd1cea8" translate="yes" xml:space="preserve">
          <source>). Within the minibuffer, the usual minibuffer history commands are available.</source>
          <target state="translated">). Within the minibuffer, the usual minibuffer history commands are available.</target>
        </trans-unit>
        <trans-unit id="67f69ef0c07d30c0476bd886f60193097cb47f3e" translate="yes" xml:space="preserve">
          <source>):</source>
          <target state="translated">):</target>
        </trans-unit>
        <trans-unit id="02f9e08f032c78a11939dd4121fe5f583c13a5b7" translate="yes" xml:space="preserve">
          <source>); if the font name is an XLFD containing wildcards, Emacs chooses the first font matching those wildcards. Specifying this attribute also changes the values of the &lt;code&gt;:family&lt;/code&gt;, &lt;code&gt;:foundry&lt;/code&gt;, &lt;code&gt;:width&lt;/code&gt;, &lt;code&gt;:height&lt;/code&gt;, &lt;code&gt;:weight&lt;/code&gt;, and &lt;code&gt;:slant&lt;/code&gt; attributes.</source>
          <target state="translated">); if the font name is an XLFD containing wildcards, Emacs chooses the first font matching those wildcards. Specifying this attribute also changes the values of the &lt;code&gt;:family&lt;/code&gt; , &lt;code&gt;:foundry&lt;/code&gt; , &lt;code&gt;:width&lt;/code&gt; , &lt;code&gt;:height&lt;/code&gt; , &lt;code&gt;:weight&lt;/code&gt; , and &lt;code&gt;:slant&lt;/code&gt; attributes.</target>
        </trans-unit>
        <trans-unit id="fa5911a23ca6e694ca03a8ad5fb73cf752432e07" translate="yes" xml:space="preserve">
          <source>); then the value specified in the</source>
          <target state="translated">); then the value specified in the</target>
        </trans-unit>
        <trans-unit id="df58248c414f342c81e056b40bee12d17a08bf61" translate="yes" xml:space="preserve">
          <source>*</source>
          <target state="translated">*</target>
        </trans-unit>
        <trans-unit id="68c8f260d94a8e5f1351012b584ed42e859abe7e" translate="yes" xml:space="preserve">
          <source>*.elc</source>
          <target state="translated">*.elc</target>
        </trans-unit>
        <trans-unit id="ea248735dfd6dbdc9955c9c29db3e45b0a846e0c" translate="yes" xml:space="preserve">
          <source>*Apropos*</source>
          <target state="translated">*Apropos*</target>
        </trans-unit>
        <trans-unit id="a5a9034f996ce8c8eb96feecf9a5469bc891720e" translate="yes" xml:space="preserve">
          <source>*Backtrace*</source>
          <target state="translated">*Backtrace*</target>
        </trans-unit>
        <trans-unit id="aaa04024d52053fe290aaad9fea028d106a431ee" translate="yes" xml:space="preserve">
          <source>*Backtrace*&amp;lt;2&amp;gt;</source>
          <target state="translated">*Backtrace*&amp;lt;2&amp;gt;</target>
        </trans-unit>
        <trans-unit id="b6c60dba32bf3e855ffa22a9f9343edc7b276ef2" translate="yes" xml:space="preserve">
          <source>*Buffer List*</source>
          <target state="translated">*Buffer List*</target>
        </trans-unit>
        <trans-unit id="3f1b850fad17b9bd4d19a42a8838ea9e792e3f0c" translate="yes" xml:space="preserve">
          <source>*Colors*</source>
          <target state="translated">*Colors*</target>
        </trans-unit>
        <trans-unit id="fafdbbbe7d281c0d76f42085678b94deecea55a8" translate="yes" xml:space="preserve">
          <source>*Compilation*</source>
          <target state="translated">*Compilation*</target>
        </trans-unit>
        <trans-unit id="b9eac9c2978a0a9695595b6e10c10a3c2471918d" translate="yes" xml:space="preserve">
          <source>*Compile-Log*</source>
          <target state="translated">*Compile-Log*</target>
        </trans-unit>
        <trans-unit id="ed700b174c4129e0eb6aaabac5f8da20b7c01b64" translate="yes" xml:space="preserve">
          <source>*Compiler Input*</source>
          <target state="translated">*Compiler Input*</target>
        </trans-unit>
        <trans-unit id="6f9e827d0fdc6f7904289a06985c3029002a6e76" translate="yes" xml:space="preserve">
          <source>*Completions*</source>
          <target state="translated">*Completions*</target>
        </trans-unit>
        <trans-unit id="ee55bb497d1a87de8bad6ce68e9e25a27702f288" translate="yes" xml:space="preserve">
          <source>*Custom Themes*</source>
          <target state="translated">*Custom Themes*</target>
        </trans-unit>
        <trans-unit id="1258cb964a55e938757facfaffe0e3066fb2dc5f" translate="yes" xml:space="preserve">
          <source>*Debugger-record*</source>
          <target state="translated">*Debugger-record*</target>
        </trans-unit>
        <trans-unit id="401281af20e4abf320fb5aacd768fe40abb7c013" translate="yes" xml:space="preserve">
          <source>*Disassemble*</source>
          <target state="translated">*Disassemble*</target>
        </trans-unit>
        <trans-unit id="c146cba2a0b674281b65aeaf8e308df7f1f5518b" translate="yes" xml:space="preserve">
          <source>*Help*</source>
          <target state="translated">*Help*</target>
        </trans-unit>
        <trans-unit id="59539fb500987835722817a5e7ff58519e4cb398" translate="yes" xml:space="preserve">
          <source>*Message*</source>
          <target state="translated">*Message*</target>
        </trans-unit>
        <trans-unit id="b9bd88492bc70e2dd4330c65a4383edfd519a961" translate="yes" xml:space="preserve">
          <source>*Messages*</source>
          <target state="translated">*Messages*</target>
        </trans-unit>
        <trans-unit id="feb90cf3c960ea7a4cfd04a832764b8813ba4454" translate="yes" xml:space="preserve">
          <source>*Minibuf-1*</source>
          <target state="translated">*Minibuf-1*</target>
        </trans-unit>
        <trans-unit id="7a3eb7ea2ec32045165f08df94f4a8c4778567bd" translate="yes" xml:space="preserve">
          <source>*Minibuf-&lt;var&gt;number&lt;/var&gt;*</source>
          <target state="translated">*Minibuf-&lt;var&gt;number&lt;/var&gt;*</target>
        </trans-unit>
        <trans-unit id="a42fbe55623f4315fd315074ccb709dae31b546f" translate="yes" xml:space="preserve">
          <source>*Process List*</source>
          <target state="translated">*Process List*</target>
        </trans-unit>
        <trans-unit id="8f97af6851bd60a5f921865002bd80037108fe5c" translate="yes" xml:space="preserve">
          <source>*Tags List*</source>
          <target state="translated">*Tags List*</target>
        </trans-unit>
        <trans-unit id="b2b65bb9ae79c3dc80d05a2e1ed1e071c0b184d0" translate="yes" xml:space="preserve">
          <source>*Threads*</source>
          <target state="translated">*Threads*</target>
        </trans-unit>
        <trans-unit id="9cb3a64ae7348a788e4fc7cd891ea796fec435e2" translate="yes" xml:space="preserve">
          <source>*Warnings*</source>
          <target state="translated">*Warnings*</target>
        </trans-unit>
        <trans-unit id="d86f82c774ee81f0658888cf6d7e300b6996ef32" translate="yes" xml:space="preserve">
          <source>*compilation*</source>
          <target state="translated">*compilation*</target>
        </trans-unit>
        <trans-unit id="658ea5dcf1e5d596edafe96dbac597ed1af57153" translate="yes" xml:space="preserve">
          <source>*edebug*</source>
          <target state="translated">*edebug*</target>
        </trans-unit>
        <trans-unit id="10cf21b6ab56ca4d626bb645b8181ed601b3007a" translate="yes" xml:space="preserve">
          <source>*edebug-trace*</source>
          <target state="translated">*edebug-trace*</target>
        </trans-unit>
        <trans-unit id="8c71091087d744a5ade4945df7f7d4b84df0f3c5" translate="yes" xml:space="preserve">
          <source>*foo</source>
          <target state="translated">*foo</target>
        </trans-unit>
        <trans-unit id="f803fdca3304ab50f5ba4e785578531dc4389f43" translate="yes" xml:space="preserve">
          <source>*foo*</source>
          <target state="translated">*foo*</target>
        </trans-unit>
        <trans-unit id="9503b9951f97b2b5fe2fd74075ce8f65dbb12ad8" translate="yes" xml:space="preserve">
          <source>*get_user_ptr</source>
          <target state="translated">*get_user_ptr</target>
        </trans-unit>
        <trans-unit id="21e9556909ab1ace2fa09c307dcc369e91dfd93d" translate="yes" xml:space="preserve">
          <source>*grep*</source>
          <target state="translated">*grep*</target>
        </trans-unit>
        <trans-unit id="649a23dfcc137b308a4d9882bc937af2b1ff2d84" translate="yes" xml:space="preserve">
          <source>*help*</source>
          <target state="translated">*help*</target>
        </trans-unit>
        <trans-unit id="f0f4859236d45d31122f0e646c9d122a91c100ba" translate="yes" xml:space="preserve">
          <source>*ielm*</source>
          <target state="translated">*ielm*</target>
        </trans-unit>
        <trans-unit id="b034cc570736bf7a3e6729e74744869564f2adbc" translate="yes" xml:space="preserve">
          <source>*scratch*</source>
          <target state="translated">*scratch*</target>
        </trans-unit>
        <trans-unit id="d7ab9abadedbc53f8391d372e8ef97545ef282db" translate="yes" xml:space="preserve">
          <source>*shell*</source>
          <target state="translated">*shell*</target>
        </trans-unit>
        <trans-unit id="a979ef10cc6f6a36df6b8a323307ee3bb2e2db9c" translate="yes" xml:space="preserve">
          <source>+</source>
          <target state="translated">+</target>
        </trans-unit>
        <trans-unit id="b402299c46b0b238d8c24883c7bd7740667cb495" translate="yes" xml:space="preserve">
          <source>+1500000e-3</source>
          <target state="translated">+1500000e-3</target>
        </trans-unit>
        <trans-unit id="2edd79e233fb1dc2172342f60592616ee96377a8" translate="yes" xml:space="preserve">
          <source>+15e2</source>
          <target state="translated">+15e2</target>
        </trans-unit>
        <trans-unit id="5c10b5b2cd673a0616d529aa5234b12ee7153808" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="translated">,</target>
        </trans-unit>
        <trans-unit id="7c0185ac95f3306ac515ae5ad432d9e50eb43d6d" translate="yes" xml:space="preserve">
          <source>, &amp;hellip;,</source>
          <target state="translated">, &amp;hellip;,</target>
        </trans-unit>
        <trans-unit id="85664cc490e650e69d51808edcdb018b5b8aa244" translate="yes" xml:space="preserve">
          <source>, &amp;lsquo;</source>
          <target state="translated">, '</target>
        </trans-unit>
        <trans-unit id="f5dd631869970d4dee36348e800412f90a6b95e2" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;&quot;\C-f&quot;&lt;/code&gt; is read as containing a single</source>
          <target state="translated">, &lt;code&gt;&quot;\C-f&quot;&lt;/code&gt; is read as containing a single</target>
        </trans-unit>
        <trans-unit id="cfa97495f691c0ad49ac23d10a91d7bb25dd6f6d" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;completing-read&lt;/code&gt; returns &lt;code&gt;barfoo&lt;/code&gt;.</source>
          <target state="translated">, &lt;code&gt;completing-read&lt;/code&gt; returns &lt;code&gt;barfoo&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f3f249ee1ff34d3ffaadba0feceb027bf38a6a80" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;display-buffer&lt;/code&gt; would have split the window at the bottom instead.</source>
          <target state="translated">, &lt;code&gt;display-buffer&lt;/code&gt; would have split the window at the bottom instead.</target>
        </trans-unit>
        <trans-unit id="94447616798f16a11fc24490129a4bf5e56314e8" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;load&lt;/code&gt; searches for the file using the variable &lt;code&gt;load-path&lt;/code&gt;. It appends &lt;var&gt;filename&lt;/var&gt; to each of the directories listed in &lt;code&gt;load-path&lt;/code&gt;, and loads the first file it finds whose name matches. The current default directory is tried only if it is specified in &lt;code&gt;load-path&lt;/code&gt;, where &lt;code&gt;nil&lt;/code&gt; stands for the default directory. &lt;code&gt;load&lt;/code&gt; tries all three possible suffixes in the first directory in &lt;code&gt;load-path&lt;/code&gt;, then all three suffixes in the second directory, and so on. See &lt;a href=&quot;library-search#Library-Search&quot;&gt;Library Search&lt;/a&gt;.</source>
          <target state="translated">, &lt;code&gt;load&lt;/code&gt; searches for the file using the variable &lt;code&gt;load-path&lt;/code&gt; . It appends &lt;var&gt;filename&lt;/var&gt; to each of the directories listed in &lt;code&gt;load-path&lt;/code&gt; , and loads the first file it finds whose name matches. The current default directory is tried only if it is specified in &lt;code&gt;load-path&lt;/code&gt; , where &lt;code&gt;nil&lt;/code&gt; stands for the default directory. &lt;code&gt;load&lt;/code&gt; tries all three possible suffixes in the first directory in &lt;code&gt;load-path&lt;/code&gt; , then all three suffixes in the second directory, and so on. See &lt;a href=&quot;library-search#Library-Search&quot;&gt;Library Search&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="adf6a2abe31dc18c938fb4a07e258d85ab7105eb" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;nil&lt;/code&gt; if the user types</source>
          <target state="translated">, &lt;code&gt;nil&lt;/code&gt; if the user types</target>
        </trans-unit>
        <trans-unit id="51e3d81dbc7e9e489fa73def469509de76cb04bf" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;read-file-name&lt;/code&gt; returns the file name as the string &lt;code&gt;&quot;/gp/gnu/elisp/manual.texi&quot;&lt;/code&gt;.</source>
          <target state="translated">, &lt;code&gt;read-file-name&lt;/code&gt; returns the file name as the string &lt;code&gt;&quot;/gp/gnu/elisp/manual.texi&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="49a2625d3fb8b511a96cbc3daa7c0c8e556258b5" translate="yes" xml:space="preserve">
          <source>, a function key, is not converted into</source>
          <target state="translated">, a function key, is not converted into</target>
        </trans-unit>
        <trans-unit id="e4b747ad0cf9e010babc53671044228154230534" translate="yes" xml:space="preserve">
          <source>, a numerical process ID that is assigned by the OS and distinguishes the process from all the other processes running on the same machine at the same time.</source>
          <target state="translated">, a numerical process ID that is assigned by the OS and distinguishes the process from all the other processes running on the same machine at the same time.</target>
        </trans-unit>
        <trans-unit id="4124957bc7d216e466f96a4f986787553fa34eff" translate="yes" xml:space="preserve">
          <source>, acts like &lt;code&gt;recenter&lt;/code&gt;, except if called with no argument. In that case, successive calls place point according to the cycling order defined by the variable &lt;code&gt;recenter-positions&lt;/code&gt;.</source>
          <target state="translated">, acts like &lt;code&gt;recenter&lt;/code&gt; , except if called with no argument. In that case, successive calls place point according to the cycling order defined by the variable &lt;code&gt;recenter-positions&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1b9143dac34627130fb9e82380a06dbdf41719e9" translate="yes" xml:space="preserve">
          <source>, also called a &lt;em&gt;bare impure Emacs&lt;/em&gt;. It contains the Emacs Lisp interpreter and I/O routines, but not the editing commands.</source>
          <target state="translated">, also called a &lt;em&gt;bare impure Emacs&lt;/em&gt;. It contains the Emacs Lisp interpreter and I/O routines, but not the editing commands.</target>
        </trans-unit>
        <trans-unit id="51fc51348600db0345fa8dbcf1a349175e802240" translate="yes" xml:space="preserve">
          <source>, an unusual style in English.</source>
          <target state="translated">, an unusual style in English.</target>
        </trans-unit>
        <trans-unit id="8278d2adba7612cf98a492d21a4ac4c78acb1202" translate="yes" xml:space="preserve">
          <source>, and</source>
          <target state="translated">,</target>
        </trans-unit>
        <trans-unit id="f426f972d9e2e410d1cd265b7d8eb71579d193d3" translate="yes" xml:space="preserve">
          <source>, and &amp;lsquo;</source>
          <target state="translated">, '</target>
        </trans-unit>
        <trans-unit id="5bab5a6b07998c4c11abd29d6290c02a4d252ae1" translate="yes" xml:space="preserve">
          <source>, and &lt;code&gt;&quot;\M-\C-x&quot;&lt;/code&gt; and &lt;code&gt;&quot;\C-\M-x&quot;&lt;/code&gt; are both read as containing a single</source>
          <target state="translated">, and &lt;code&gt;&quot;\M-\C-x&quot;&lt;/code&gt; and &lt;code&gt;&quot;\C-\M-x&quot;&lt;/code&gt; are both read as containing a single</target>
        </trans-unit>
        <trans-unit id="c7db769c033926aa7c242e36cccf2673f752b45b" translate="yes" xml:space="preserve">
          <source>, and &lt;code&gt;?\002&lt;/code&gt; for the character</source>
          <target state="translated">, and &lt;code&gt;?\002&lt;/code&gt; for the character</target>
        </trans-unit>
        <trans-unit id="880d2fd9ca0a909a8bdd1e0f511e0ae3047499a0" translate="yes" xml:space="preserve">
          <source>, and &lt;code&gt;?\xe0&lt;/code&gt; is the character</source>
          <target state="translated">, and &lt;code&gt;?\xe0&lt;/code&gt; is the character</target>
        </trans-unit>
        <trans-unit id="5af374137c6bea5c9b94d6e1f7122e8167f72507" translate="yes" xml:space="preserve">
          <source>, and &lt;code&gt;read-key-sequence&lt;/code&gt; translates this back into</source>
          <target state="translated">, and &lt;code&gt;read-key-sequence&lt;/code&gt; translates this back into</target>
        </trans-unit>
        <trans-unit id="f9758ac9f3d00fc7044bb30aa84f59a95a71bb2c" translate="yes" xml:space="preserve">
          <source>, and if so, aborts the processing. You should do that in any loop that can potentially require a large number of iterations; in this case, the list of arguments could be very long. This increases Emacs responsiveness and improves user experience.</source>
          <target state="translated">, and if so, aborts the processing. You should do that in any loop that can potentially require a large number of iterations; in this case, the list of arguments could be very long. This increases Emacs responsiveness and improves user experience.</target>
        </trans-unit>
        <trans-unit id="5b454d6e8f3f0305d032dc68337000e1f3c9dfa3" translate="yes" xml:space="preserve">
          <source>, and if so, loads it. The</source>
          <target state="translated">, and if so, loads it. The</target>
        </trans-unit>
        <trans-unit id="ba74b354a1b71c68fdb9b3cbb3deba3328e3c0ac" translate="yes" xml:space="preserve">
          <source>, and is installed in the Emacs &lt;code&gt;exec-directory&lt;/code&gt; (see &lt;a href=&quot;help-functions#Help-Functions&quot;&gt;Help Functions&lt;/a&gt;). This method is the most preferred one, as it does not require Emacs to employ any special techniques of memory allocation, which might get in the way of various memory-layout techniques used by modern systems to enhance security and privacy.</source>
          <target state="translated">, and is installed in the Emacs &lt;code&gt;exec-directory&lt;/code&gt; (see &lt;a href=&quot;help-functions#Help-Functions&quot;&gt;Help Functions&lt;/a&gt;). This method is the most preferred one, as it does not require Emacs to employ any special techniques of memory allocation, which might get in the way of various memory-layout techniques used by modern systems to enhance security and privacy.</target>
        </trans-unit>
        <trans-unit id="6af435c9caa0dc387e46ddfe28f51b04c3fa595c" translate="yes" xml:space="preserve">
          <source>, and is therefore not recommended. Any changes to the bidirectional properties of a character have global effect: they affect all Emacs frames and windows.</source>
          <target state="translated">, and is therefore not recommended. Any changes to the bidirectional properties of a character have global effect: they affect all Emacs frames and windows.</target>
        </trans-unit>
        <trans-unit id="678e2ccc3b5a4e1ed7f6b32d047f22355c246a99" translate="yes" xml:space="preserve">
          <source>, and it demonstrates the use of macros and functions to manipulate Lisp objects.</source>
          <target state="translated">, and it demonstrates the use of macros and functions to manipulate Lisp objects.</target>
        </trans-unit>
        <trans-unit id="7d3a6a77ade5d26d3f6ab3688a4fb6e098c4dfd0" translate="yes" xml:space="preserve">
          <source>, and its global binding is found at the slot for</source>
          <target state="translated">, and its global binding is found at the slot for</target>
        </trans-unit>
        <trans-unit id="4ca786015ce7cee99e7bb4f3600ffa91cc2df171" translate="yes" xml:space="preserve">
          <source>, and one of these would be the file</source>
          <target state="translated">, and one of these would be the file</target>
        </trans-unit>
        <trans-unit id="709717e7ffe4a23dfdce97248749484eaa2a3993" translate="yes" xml:space="preserve">
          <source>, and similar evaluation commands in &lt;code&gt;lisp-interaction-mode&lt;/code&gt;.) The elements are ordered most recent first.</source>
          <target state="translated">, and similar evaluation commands in &lt;code&gt;lisp-interaction-mode&lt;/code&gt; .) The elements are ordered most recent first.</target>
        </trans-unit>
        <trans-unit id="7b410e10184ce986d71ead2776d4612aebf7eff8" translate="yes" xml:space="preserve">
          <source>, and so on.</source>
          <target state="translated">, 등등.</target>
        </trans-unit>
        <trans-unit id="e7a2e530a6ab9efe11fd30e0b8433961dd1df333" translate="yes" xml:space="preserve">
          <source>, and some others. Files that begin with the POSIX-standard &amp;lsquo;</source>
          <target state="translated">, and some others. Files that begin with the POSIX-standard &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="9e46e03e5a95d351f5856f34e08245231c022303" translate="yes" xml:space="preserve">
          <source>, and specify the condition expression in the minibuffer. Setting a conditional breakpoint at a stop point that has a previously established conditional breakpoint puts the previous condition expression in the minibuffer so you can edit it.</source>
          <target state="translated">, and specify the condition expression in the minibuffer. Setting a conditional breakpoint at a stop point that has a previously established conditional breakpoint puts the previous condition expression in the minibuffer so you can edit it.</target>
        </trans-unit>
        <trans-unit id="3edf3f0a7da4b78580f03d9cf78969cb53bfa05b" translate="yes" xml:space="preserve">
          <source>, and subdirectories containing a file named</source>
          <target state="translated">, and subdirectories containing a file named</target>
        </trans-unit>
        <trans-unit id="9ca9c3e24d166e2eaeadbd0a8b46a94d9a74eb56" translate="yes" xml:space="preserve">
          <source>, and subsequently evaluate that form. &lt;code&gt;display-buffer&lt;/code&gt; should split the upper window, and show</source>
          <target state="translated">, and subsequently evaluate that form. &lt;code&gt;display-buffer&lt;/code&gt; should split the upper window, and show</target>
        </trans-unit>
        <trans-unit id="58da794c6ca02d6805a157ee26db647de9910145" translate="yes" xml:space="preserve">
          <source>, and the corresponding</source>
          <target state="translated">, and the corresponding</target>
        </trans-unit>
        <trans-unit id="9b81b6f863e116358d7583422c3eea5a997a6970" translate="yes" xml:space="preserve">
          <source>, and the environment variables &lt;code&gt;LOGNAME&lt;/code&gt; and &lt;code&gt;USER&lt;/code&gt;.</source>
          <target state="translated">, and the environment variables &lt;code&gt;LOGNAME&lt;/code&gt; and &lt;code&gt;USER&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c534cd8e28058510fdfee9345ac8a307dfcdaacf" translate="yes" xml:space="preserve">
          <source>, and the specified return value does not matter.</source>
          <target state="translated">, and the specified return value does not matter.</target>
        </trans-unit>
        <trans-unit id="f18f186299547a638f2d7f34072e462016a2b2a3" translate="yes" xml:space="preserve">
          <source>, and then in &lt;code&gt;load-path&lt;/code&gt;, followed by a path suitable for &lt;var&gt;library&lt;/var&gt;, which includes</source>
          <target state="translated">, and then in &lt;code&gt;load-path&lt;/code&gt; , followed by a path suitable for &lt;var&gt;library&lt;/var&gt; , which includes</target>
        </trans-unit>
        <trans-unit id="31787317c96642dfb03546ca2f99160b3196879c" translate="yes" xml:space="preserve">
          <source>, and you can&amp;rsquo;t kill it or send it signals. All you can do is send and receive data. &lt;code&gt;delete-process&lt;/code&gt; closes the connection, but does not kill the program at the other end; that program must decide what to do about closure of the connection.</source>
          <target state="translated">, and you can&amp;rsquo;t kill it or send it signals. All you can do is send and receive data. &lt;code&gt;delete-process&lt;/code&gt; closes the connection, but does not kill the program at the other end; that program must decide what to do about closure of the connection.</target>
        </trans-unit>
        <trans-unit id="c9fa2a8a9f759de21b4ee61a63b53936873ce301" translate="yes" xml:space="preserve">
          <source>, and, if not found, for</source>
          <target state="translated">, and, if not found, for</target>
        </trans-unit>
        <trans-unit id="aa903064855ec84062f817d0337fbfae20014dc7" translate="yes" xml:space="preserve">
          <source>, any of</source>
          <target state="translated">, any of</target>
        </trans-unit>
        <trans-unit id="21cfc7b0c8fbd493f6ae5ad4a7f0f32f44adca02" translate="yes" xml:space="preserve">
          <source>, as defined in the active keymaps.</source>
          <target state="translated">, as defined in the active keymaps.</target>
        </trans-unit>
        <trans-unit id="1e56c701225feeb10483edc89ec9cb976253ae00" translate="yes" xml:space="preserve">
          <source>, but also save the result of evaluation in the buffer</source>
          <target state="translated">, but also save the result of evaluation in the buffer</target>
        </trans-unit>
        <trans-unit id="df812f699659b6688a957387b282052199292f8d" translate="yes" xml:space="preserve">
          <source>, but did not proceed to resolve it, although that file is itself a symbolic link. That is because this function does not follow symbolic links&amp;mdash;the process of following the symbolic links does not apply to the last component of the file name.</source>
          <target state="translated">, but did not proceed to resolve it, although that file is itself a symbolic link. That is because this function does not follow symbolic links&amp;mdash;the process of following the symbolic links does not apply to the last component of the file name.</target>
        </trans-unit>
        <trans-unit id="a29508653431ad938083f2e8b4879d5701db8dd7" translate="yes" xml:space="preserve">
          <source>, but don&amp;rsquo;t stop even for protected code (&lt;code&gt;edebug-top-level-nonstop&lt;/code&gt;).</source>
          <target state="translated">, but don&amp;rsquo;t stop even for protected code ( &lt;code&gt;edebug-top-level-nonstop&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="2239ec7079476973c61c4399ef8aa8692af31971" translate="yes" xml:space="preserve">
          <source>, but temporarily disable break-on-entry for all functions that are set up to do so by &lt;code&gt;debug-on-entry&lt;/code&gt;.</source>
          <target state="translated">, but temporarily disable break-on-entry for all functions that are set up to do so by &lt;code&gt;debug-on-entry&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eea052ca7bf78a8639e93773560c5889c28b7123" translate="yes" xml:space="preserve">
          <source>, but you can override that, e.g., in the local variables section of a</source>
          <target state="translated">, but you can override that, e.g., in the local variables section of a</target>
        </trans-unit>
        <trans-unit id="f3a4a5a915a593fde2a3701f53edb97e28d24d32" translate="yes" xml:space="preserve">
          <source>, by calling the more powerful Emacs &lt;code&gt;intern&lt;/code&gt; function (see &lt;a href=&quot;creating-symbols#Creating-Symbols&quot;&gt;Creating Symbols&lt;/a&gt;):</source>
          <target state="translated">, by calling the more powerful Emacs &lt;code&gt;intern&lt;/code&gt; function (see &lt;a href=&quot;creating-symbols#Creating-Symbols&quot;&gt;Creating Symbols&lt;/a&gt;):</target>
        </trans-unit>
        <trans-unit id="b1975d20ff6eefb16c4c59086070e2171f7c2714" translate="yes" xml:space="preserve">
          <source>, can also be used on any identifier in a backtrace (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Looking-Up-Identifiers.html#Looking-Up-Identifiers&quot;&gt;Looking Up Identifiers&lt;/a&gt; in</source>
          <target state="translated">, can also be used on any identifier in a backtrace (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Looking-Up-Identifiers.html#Looking-Up-Identifiers&quot;&gt;Looking Up Identifiers&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="b9662b99a6653f47f010f2abb10d94d7212d3047" translate="yes" xml:space="preserve">
          <source>, consistent with the requirements of the Unicode Standard v9.0. Note, however, that the way Emacs displays continuation lines when text direction is opposite to the base paragraph direction deviates from the UBA, which requires to perform line wrapping before reordering text for display.</source>
          <target state="translated">, consistent with the requirements of the Unicode Standard v9.0. Note, however, that the way Emacs displays continuation lines when text direction is opposite to the base paragraph direction deviates from the UBA, which requires to perform line wrapping before reordering text for display.</target>
        </trans-unit>
        <trans-unit id="3db09a6e437b17347c95ff452a8339c59f838eea" translate="yes" xml:space="preserve">
          <source>, described below and in the following subsections, provides facilities for conversion between basic C data types and the corresponding &lt;code&gt;emacs_value&lt;/code&gt; objects.</source>
          <target state="translated">, described below and in the following subsections, provides facilities for conversion between basic C data types and the corresponding &lt;code&gt;emacs_value&lt;/code&gt; objects.</target>
        </trans-unit>
        <trans-unit id="4a50f9bc271adbc472119a91de220395bd21ff79" translate="yes" xml:space="preserve">
          <source>, each with a one-line description taken from the beginning of its documentation string.</source>
          <target state="translated">, each with a one-line description taken from the beginning of its documentation string.</target>
        </trans-unit>
        <trans-unit id="d895bb1209c5f2b478c3e514b0e684577ee98ed8" translate="yes" xml:space="preserve">
          <source>, etc.) between the process and its children, and because interactive programs treat ptys as terminal devices, whereas pipes don&amp;rsquo;t support these features. However, for subprocesses used by Lisp programs for internal purposes (i.e., no user interaction with the subprocess is required), where significant amounts of data need to be exchanged between the subprocess and the Lisp program, it is often better to use a pipe, because pipes are more efficient. Also, the total number of ptys is limited on many systems, and it is good not to waste them unnecessarily.</source>
          <target state="translated">, etc.) between the process and its children, and because interactive programs treat ptys as terminal devices, whereas pipes don&amp;rsquo;t support these features. However, for subprocesses used by Lisp programs for internal purposes (i.e., no user interaction with the subprocess is required), where significant amounts of data need to be exchanged between the subprocess and the Lisp program, it is often better to use a pipe, because pipes are more efficient. Also, the total number of ptys is limited on many systems, and it is good not to waste them unnecessarily.</target>
        </trans-unit>
        <trans-unit id="a22ce430a5b62c295056d355313b80ff0114f835" translate="yes" xml:space="preserve">
          <source>, evaluation of &lt;code&gt;(load &quot;foo.el&quot;)&lt;/code&gt; will indeed find it.)</source>
          <target state="translated">, evaluation of &lt;code&gt;(load &quot;foo.el&quot;)&lt;/code&gt; will indeed find it.)</target>
        </trans-unit>
        <trans-unit id="e5a1268712480aa95c0218117a55890eb20d28e2" translate="yes" xml:space="preserve">
          <source>, even if it is not normally displayed.</source>
          <target state="translated">, even if it is not normally displayed.</target>
        </trans-unit>
        <trans-unit id="950f055f692941d0732489afb3c87c393e5b4217" translate="yes" xml:space="preserve">
          <source>, followed by a control character, a digit, or</source>
          <target state="translated">, followed by a control character, a digit, or</target>
        </trans-unit>
        <trans-unit id="b007ec8bf6702cc8237da75271bf78b9f29a1563" translate="yes" xml:space="preserve">
          <source>, for Emacs commands that make use of these selections. This section documents the low-level functions for reading and setting window-system selections.</source>
          <target state="translated">, for Emacs commands that make use of these selections. This section documents the low-level functions for reading and setting window-system selections.</target>
        </trans-unit>
        <trans-unit id="20f7d2663951c54d4b52f7c9239ca65bae3a98b4" translate="yes" xml:space="preserve">
          <source>, for a description of file mode specifications.</source>
          <target state="translated">, for a description of file mode specifications.</target>
        </trans-unit>
        <trans-unit id="793eae959d2cbca89e75e046b4a2b7b626fdbf46" translate="yes" xml:space="preserve">
          <source>, for a description of mode bit specifications.</source>
          <target state="translated">, for a description of mode bit specifications.</target>
        </trans-unit>
        <trans-unit id="b194e15bf7628c069794dc50861c39d04eb9b20e" translate="yes" xml:space="preserve">
          <source>, for a description of mode bits. For example, if the low-order bit is 1, the file is executable by all users; if the second-lowest-order bit is 1, the file is writable by all users; etc. The highest possible value is 4095 (7777 octal), meaning that everyone has read, write, and execute permission, the</source>
          <target state="translated">, for a description of mode bits. For example, if the low-order bit is 1, the file is executable by all users; if the second-lowest-order bit is 1, the file is writable by all users; etc. The highest possible value is 4095 (7777 octal), meaning that everyone has read, write, and execute permission, the</target>
        </trans-unit>
        <trans-unit id="db7d098258232badcef8107e75ae191e8ff619e5" translate="yes" xml:space="preserve">
          <source>, for a description of the available completion styles.</source>
          <target state="translated">, for a description of the available completion styles.</target>
        </trans-unit>
        <trans-unit id="585c324b520785697bd3b571a6d51316a9eccae5" translate="yes" xml:space="preserve">
          <source>, for a description of user-level features of the packaging system.</source>
          <target state="translated">, for a description of user-level features of the packaging system.</target>
        </trans-unit>
        <trans-unit id="5fdba2f3c85273e11fb3c7c2d762f2461cb5710a" translate="yes" xml:space="preserve">
          <source>, for basic information about file-local variables. This section describes the functions and variables that affect how file-local variables are processed.</source>
          <target state="translated">, for basic information about file-local variables. This section describes the functions and variables that affect how file-local variables are processed.</target>
        </trans-unit>
        <trans-unit id="bd58e28c4b7f5b816bd711f90aacde43f8a23c0d" translate="yes" xml:space="preserve">
          <source>, for details.</source>
          <target state="translated">자세한 내용은</target>
        </trans-unit>
        <trans-unit id="104ab1ab741152cc42897531cd059413e04b3b84" translate="yes" xml:space="preserve">
          <source>, for examples of how to make various commonly desired customizations in your</source>
          <target state="translated">, for examples of how to make various commonly desired customizations in your</target>
        </trans-unit>
        <trans-unit id="a1d481a3867e08f3e83c10412ec67ffc9ef84492" translate="yes" xml:space="preserve">
          <source>, for information about XLFDs. If the name is too long for an XLFD (which can contain at most 255 characters), the function returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">, for information about XLFDs. If the name is too long for an XLFD (which can contain at most 255 characters), the function returns &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="85bd4ad821eec4d4d1c0a55b469f8aa705350f27" translate="yes" xml:space="preserve">
          <source>, for information on auto-save for users. Here we describe the functions used to implement auto-saving and the variables that control them.</source>
          <target state="translated">, for information on auto-save for users. Here we describe the functions used to implement auto-saving and the variables that control them.</target>
        </trans-unit>
        <trans-unit id="fbcb41f680fdc0f30920ae9c189fa440d07aee3e" translate="yes" xml:space="preserve">
          <source>, for information on how users use input methods to enter text.) How to define input methods is not yet documented in this manual, but here we describe how to use them.</source>
          <target state="translated">, for information on how users use input methods to enter text.) How to define input methods is not yet documented in this manual, but here we describe how to use them.</target>
        </trans-unit>
        <trans-unit id="8844630297e4483f6d0b066bd991a4fbbd9871bf" translate="yes" xml:space="preserve">
          <source>, for more details.</source>
          <target state="translated">, for more details.</target>
        </trans-unit>
        <trans-unit id="56b35b1f0c39ee275d44400e546966add8810635" translate="yes" xml:space="preserve">
          <source>, for more information about X resources.</source>
          <target state="translated">, for more information about X resources.</target>
        </trans-unit>
        <trans-unit id="65675fd31b2974ea1401d0e2ceb3562c1bab856e" translate="yes" xml:space="preserve">
          <source>, for more information about font families. The function &lt;code&gt;font-family-list&lt;/code&gt; (see below) returns a list of available family names.</source>
          <target state="translated">, for more information about font families. The function &lt;code&gt;font-family-list&lt;/code&gt; (see below) returns a list of available family names.</target>
        </trans-unit>
        <trans-unit id="2f644b60d3d513dab1caba09d9d23731c9e7b301" translate="yes" xml:space="preserve">
          <source>, for more information about locales and locale items.</source>
          <target state="translated">, for more information about locales and locale items.</target>
        </trans-unit>
        <trans-unit id="9f39a21badb6706968aaf6c6f88fea87fa23ff8c" translate="yes" xml:space="preserve">
          <source>, for that. Instead we are going to demonstrate the minimal functionality needed for defining new customize types by a simple example.</source>
          <target state="translated">, for that. Instead we are going to demonstrate the minimal functionality needed for defining new customize types by a simple example.</target>
        </trans-unit>
        <trans-unit id="d4b370a66bde502f6b741a0018aadba6ae1b0039" translate="yes" xml:space="preserve">
          <source>, for the commands to use in that buffer. You can change the speed and the configuration in the mode line menu. If &lt;var&gt;line-mode&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;term-line-mode&lt;/code&gt; is used; otherwise &lt;code&gt;term-raw-mode&lt;/code&gt; is used.</source>
          <target state="translated">, for the commands to use in that buffer. You can change the speed and the configuration in the mode line menu. If &lt;var&gt;line-mode&lt;/var&gt; is non- &lt;code&gt;nil&lt;/code&gt; , &lt;code&gt;term-line-mode&lt;/code&gt; is used; otherwise &lt;code&gt;term-raw-mode&lt;/code&gt; is used.</target>
        </trans-unit>
        <trans-unit id="f2d956e3325f132feba7fd3f3e93cf7539b748fe" translate="yes" xml:space="preserve">
          <source>, for the details on what happens when a disabled command is invoked interactively. Disabling a command has no effect on calling it as a function from Lisp programs.</source>
          <target state="translated">, for the details on what happens when a disabled command is invoked interactively. Disabling a command has no effect on calling it as a function from Lisp programs.</target>
        </trans-unit>
        <trans-unit id="ad9b95b93b64a88d5404f19fe41f0990e8365e02" translate="yes" xml:space="preserve">
          <source>, for the syntax of the local variables section of a file.</source>
          <target state="translated">, for the syntax of the local variables section of a file.</target>
        </trans-unit>
        <trans-unit id="00fc6fc5bd1f54b3ca5a1af3116e61fd7be936be" translate="yes" xml:space="preserve">
          <source>, for various integers &lt;var&gt;v&lt;/var&gt;, like this:</source>
          <target state="translated">, for various integers &lt;var&gt;v&lt;/var&gt; , like this:</target>
        </trans-unit>
        <trans-unit id="53ff2b2e7c84eba26737940f1be2d6a10a3c5995" translate="yes" xml:space="preserve">
          <source>, if it exists. This is not done if &lt;code&gt;inhibit-default-init&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, nor if the options &amp;lsquo;</source>
          <target state="translated">, if it exists. This is not done if &lt;code&gt;inhibit-default-init&lt;/code&gt; is non- &lt;code&gt;nil&lt;/code&gt; , nor if the options &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="ccdf080c9ca45b69c54e877cf9fd45c289dd473f" translate="yes" xml:space="preserve">
          <source>, if it exists. This is not done if the options &amp;lsquo;</source>
          <target state="translated">, if it exists. This is not done if the options &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="271d47b6a11f895a0fedfe51053d20cfd75195f4" translate="yes" xml:space="preserve">
          <source>, if you do it in an Emacs with standard bindings:</source>
          <target state="translated">, if you do it in an Emacs with standard bindings:</target>
        </trans-unit>
        <trans-unit id="40c2c6b4b8428f90a56994e3b6b74a1c96e54d2e" translate="yes" xml:space="preserve">
          <source>, in order to see the function(s) called by the higher-level function. Use a prefix argument (</source>
          <target state="translated">, in order to see the function(s) called by the higher-level function. Use a prefix argument (</target>
        </trans-unit>
        <trans-unit id="331dee74741b368fc0ab29ac0935fd691368d3e7" translate="yes" xml:space="preserve">
          <source>, in the directory specified by &lt;code&gt;doc-directory&lt;/code&gt; (see &lt;a href=&quot;accessing-documentation#Accessing-Documentation&quot;&gt;Accessing Documentation&lt;/a&gt;). Secondly, when a function or variable is loaded from a byte-compiled file, Emacs avoids loading its documentation string (see &lt;a href=&quot;docs-and-compilation#Docs-and-Compilation&quot;&gt;Docs and Compilation&lt;/a&gt;). In both cases, Emacs looks up the documentation string from the file only when needed, such as when the user calls</source>
          <target state="translated">, in the directory specified by &lt;code&gt;doc-directory&lt;/code&gt; (see &lt;a href=&quot;accessing-documentation#Accessing-Documentation&quot;&gt;Accessing Documentation&lt;/a&gt;). Secondly, when a function or variable is loaded from a byte-compiled file, Emacs avoids loading its documentation string (see &lt;a href=&quot;docs-and-compilation#Docs-and-Compilation&quot;&gt;Docs and Compilation&lt;/a&gt;). In both cases, Emacs looks up the documentation string from the file only when needed, such as when the user calls</target>
        </trans-unit>
        <trans-unit id="7254429858fea6e1dfaa04c558d313cd2c1adc29" translate="yes" xml:space="preserve">
          <source>, in which case Emacs should not sit there waiting for the next key to decide whether the user really pressed</source>
          <target state="translated">, in which case Emacs should not sit there waiting for the next key to decide whether the user really pressed</target>
        </trans-unit>
        <trans-unit id="a1dde2f6c518f2de5fd42e1b7dece35513c35a3f" translate="yes" xml:space="preserve">
          <source>, including use of similar names, so if you have experience with</source>
          <target state="translated">, 유사한 이름의 사용을 포함하므로</target>
        </trans-unit>
        <trans-unit id="5fb0e65b91cd2cf002ddd52c60f0956d8c1dd410" translate="yes" xml:space="preserve">
          <source>, instead.) This is one of the solutions recommended by the UBA.</source>
          <target state="translated">, 대신.) 이것은 UBA에서 권장하는 솔루션 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="1b30181c2e8b8c2e46c27c2ea2678bb5246f89f4" translate="yes" xml:space="preserve">
          <source>, invoke Emacs with the</source>
          <target state="translated">, 다음을 사용하여 Emacs를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="7ebf3357763f24dbfffbc00326a57137cee7d5de" translate="yes" xml:space="preserve">
          <source>, is available to instrument any top-level form regardless of the values of &lt;code&gt;edebug-all-defs&lt;/code&gt; and &lt;code&gt;edebug-all-forms&lt;/code&gt;. &lt;code&gt;edebug-defun&lt;/code&gt; is an alias for &lt;code&gt;edebug-eval-top-level-form&lt;/code&gt;.</source>
          <target state="translated">, &lt;code&gt;edebug-all-defs&lt;/code&gt; 및 &lt;code&gt;edebug-all-forms&lt;/code&gt; 의 값에 관계없이 모든 최상위 양식을 계측하는 데 사용할 수 있습니다 . &lt;code&gt;edebug-defun&lt;/code&gt; 은 &lt;code&gt;edebug-eval-top-level-form&lt;/code&gt; 의 별칭입니다 .</target>
        </trans-unit>
        <trans-unit id="8c1be56b68bc613247fe8bb6974c0abe61da899a" translate="yes" xml:space="preserve">
          <source>, is not considered an error, but it is handled almost like an error. See &lt;a href=&quot;quitting#Quitting&quot;&gt;Quitting&lt;/a&gt;.</source>
          <target state="translated">는 오류로 간주되지 않지만 거의 오류처럼 처리됩니다. 참조 &lt;a href=&quot;quitting#Quitting&quot;&gt;끝내기를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b19964093ad87aca99cd799771143b36f13cdce5" translate="yes" xml:space="preserve">
          <source>, it &lt;em&gt;is&lt;/em&gt; possible to put a space into the string, by quoting it.</source>
          <target state="translated">&lt;em&gt;이다&lt;/em&gt; 를 인용하여, 문자열에 공백을 넣을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2af423e7ec002dc9f382ded690f80c2da79045b4" translate="yes" xml:space="preserve">
          <source>, it finds the documentation strings for primitive and preloaded functions (and variables) in the file</source>
          <target state="translated">, 파일에서 기본 및 미리로드 된 함수 (및 변수)에 대한 문서 문자열을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="5a01ba5cc3073713f30497e256a743de76d646b2" translate="yes" xml:space="preserve">
          <source>, it is discarded. Any other terminating character is used as input after this function returns.</source>
          <target state="translated">, 폐기됩니다. 다른 종료 문자는이 함수가 반환 된 후 입력으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f01de15c191684f3a94dfac8ae99aaed5c70bea1" translate="yes" xml:space="preserve">
          <source>, it is marked as read-only (on operating systems that permit this), so that the memory space can be shared by all the Emacs jobs running on the machine at once. Pure storage is not expandable; a fixed amount is allocated when Emacs is compiled, and if that is not sufficient for the preloaded libraries,</source>
          <target state="translated">, 읽기 전용 (이를 허용하는 운영 체제에서)으로 표시되어 메모리 공간을 컴퓨터에서 한 번에 실행중인 모든 Emacs 작업에서 공유 할 수 있습니다. 퓨어 스토리지는 확장 할 수 없습니다. Emacs가 컴파일 될 때 고정 된 양이 할당되며, 사전로드 된 라이브러리에 충분하지 않은 경우</target>
        </trans-unit>
        <trans-unit id="a0778941e4c9248c045cf2bf276ef338d80ddd50" translate="yes" xml:space="preserve">
          <source>, it is possible to define more complex function and data types: interactive functions, inline functions, macros, etc. However, the resulting C code will be cumbersome and hard to read. Therefore, we recommend that you limit the module code which creates functions and data structures to the absolute minimum, and leave the rest for a Lisp package that will accompany your module, because doing these additional tasks in Lisp is much easier, and will produce a much more readable code. For example, given a module function &lt;code&gt;module-func&lt;/code&gt; defined as above, one way of making an interactive command &lt;code&gt;module-cmd&lt;/code&gt; based on it is with the following simple Lisp wrapper:</source>
          <target state="translated">, 인터랙티브 함수, 인라인 함수, 매크로 등 더 복잡한 함수와 데이터 유형을 정의 할 수 있습니다. 그러나 결과 C 코드는 번거롭고 읽기 어렵습니다. 따라서 함수와 데이터 구조를 생성하는 모듈 코드를 최소한으로 제한하고 나머지는 모듈과 함께 제공되는 Lisp 패키지에 남겨 두는 것이 좋습니다. Lisp에서 이러한 추가 작업을 수행하는 것이 훨씬 쉽고 훨씬 더 읽기 쉬운 코드. 예를 들어, 모듈 함수 &lt;code&gt;module-func&lt;/code&gt; 가 위에서 정의 된 경우이를 기반으로 대화식 명령 &lt;code&gt;module-cmd&lt;/code&gt; 를 만드는 한 가지 방법은 다음과 같은 간단한 Lisp 래퍼를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="e7f0fff2629f320da8fa8bd6e27ad4a352f52e1c" translate="yes" xml:space="preserve">
          <source>, it means you should consider recompiling</source>
          <target state="translated">, 재 컴파일을 고려해야 함을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="b1aded5e1ebeb3e1027f429710f9ceef9614fc4c" translate="yes" xml:space="preserve">
          <source>, it sets the mode to &lt;code&gt;initial-major-mode&lt;/code&gt;.</source>
          <target state="translated">, 모드를 &lt;code&gt;initial-major-mode&lt;/code&gt; 로 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="850f4fcb9bb52103cd0cad2bd7acd0f822828335" translate="yes" xml:space="preserve">
          <source>, just as you would in</source>
          <target state="translated">에서와 마찬가지로</target>
        </trans-unit>
        <trans-unit id="84832595d3cbe2b517545c0c4504977d15e937f6" translate="yes" xml:space="preserve">
          <source>, leaving</source>
          <target state="translated">, 떠나기</target>
        </trans-unit>
        <trans-unit id="c45dbcf2752b210609d4ca15ceb586e283ab9947" translate="yes" xml:space="preserve">
          <source>, likewise (&lt;code&gt;file-attribute-group-id&lt;/code&gt;).</source>
          <target state="translated">, 마찬가지로 ( &lt;code&gt;file-attribute-group-id&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="259c114ff84a62fbecc21be8d807ee9cea0da371" translate="yes" xml:space="preserve">
          <source>, non-printing characters &lt;code&gt;U+0080&lt;/code&gt; to &lt;code&gt;U+009F&lt;/code&gt; (normally displayed as octal escape sequences like &amp;lsquo;</source>
          <target state="translated">, 인쇄되지 않는 문자 &lt;code&gt;U+0080&lt;/code&gt; ~ &lt;code&gt;U+009F&lt;/code&gt; (일반적으로 '</target>
        </trans-unit>
        <trans-unit id="a65d6b7901ddab6bf32beb522c2ee8923c1da658" translate="yes" xml:space="preserve">
          <source>, normally as a string (&lt;code&gt;file-attribute-user-id&lt;/code&gt;). However, if it does not correspond to a named user, the value is an integer.</source>
          <target state="translated">, 일반적으로 문자열 ( &lt;code&gt;file-attribute-user-id&lt;/code&gt; ). 그러나 이름이 지정된 사용자에 해당하지 않는 경우 값은 정수입니다.</target>
        </trans-unit>
        <trans-unit id="74fb43cfb1e296ecc158b16063c7aa5647a5fd0a" translate="yes" xml:space="preserve">
          <source>, not the real</source>
          <target state="translated">, 진짜가 아님</target>
        </trans-unit>
        <trans-unit id="801d3767fa2e19fb28c1655e44d8607d399b04ad" translate="yes" xml:space="preserve">
          <source>, one function entry or exit per line, indented by the recursion level.</source>
          <target state="translated">, 한 줄에 하나의 함수 시작 또는 종료, 재귀 수준으로 들여 쓰기.</target>
        </trans-unit>
        <trans-unit id="b366d1a229ec84d93ba42e7ecafb33db5b7b9b39" translate="yes" xml:space="preserve">
          <source>, or</source>
          <target state="translated">또는</target>
        </trans-unit>
        <trans-unit id="7bfcc2866caf44f9ba3993d6d7be5414fab59b55" translate="yes" xml:space="preserve">
          <source>, or &amp;ldquo;not a number&amp;rdquo;.</source>
          <target state="translated">, 또는 &quot;숫자가 아님&quot;.</target>
        </trans-unit>
        <trans-unit id="c2dd491507686d31a3a4ac2c1232e40603b3f0b2" translate="yes" xml:space="preserve">
          <source>, or a control character or digit, are reserved for major modes. Also,</source>
          <target state="translated">, 또는 제어 문자 나 숫자는 주요 모드 용으로 예약되어 있습니다. 또한,</target>
        </trans-unit>
        <trans-unit id="ad3ce66cbe484a009c1b8dbe0e19d592c8f03cb0" translate="yes" xml:space="preserve">
          <source>, or any editing command.</source>
          <target state="translated">, 또는 편집 명령.</target>
        </trans-unit>
        <trans-unit id="95cbc9818cfc368701ad4b911e5f5c40e68f5ffd" translate="yes" xml:space="preserve">
          <source>, or if the module function or its callees signaled an error or exited nonlocally (see &lt;a href=&quot;module-nonlocal#Module-Nonlocal&quot;&gt;Module Nonlocal&lt;/a&gt;), Emacs will ignore the returned value and quit or throw as it does when Lisp code encounters the same situations.</source>
          <target state="translated">, 또는 모듈 함수 또는 피 &lt;a href=&quot;module-nonlocal#Module-Nonlocal&quot;&gt;호출자&lt;/a&gt; 가 오류 신호를 보냈거나 비 로컬에서 종료 된 경우 ( Module Nonlocal 참조 ), Emacs는 반환 된 값을 무시하고 Lisp 코드가 동일한 상황에 직면했을 때처럼 종료하거나 throw합니다.</target>
        </trans-unit>
        <trans-unit id="7a9a4144d73765f2025df16e9ae920efa23ffda9" translate="yes" xml:space="preserve">
          <source>, or simply delete the text for the group and update the evaluation list with</source>
          <target state="translated">또는 그룹의 텍스트를 삭제하고 다음으로 평가 목록을 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="ebeaf27d279a4390c9a93f2537dd066f9203fcfe" translate="yes" xml:space="preserve">
          <source>, or something that quits), the function responds &amp;lsquo;</source>
          <target state="translated">또는 종료되는 항목) 함수는 '</target>
        </trans-unit>
        <trans-unit id="384021a65d1d1a4f831c785a4314b21c72918bb7" translate="yes" xml:space="preserve">
          <source>, or that some analogous thing has happened.</source>
          <target state="translated">또는 유사한 일이 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="a5441141ea72b94e39215f9e0c87dfc2b5309741" translate="yes" xml:space="preserve">
          <source>, or up- and down-arrow keys.</source>
          <target state="translated">, 또는 위쪽 및 아래쪽 화살표 키.</target>
        </trans-unit>
        <trans-unit id="c3553652b6dbe514bb22b0b88ea52b357cd0bc87" translate="yes" xml:space="preserve">
          <source>, sets &lt;code&gt;edebug-initial-mode&lt;/code&gt;. It prompts you for a key to indicate the mode. You should enter one of the eight keys listed above, which sets the corresponding mode.</source>
          <target state="translated">, &lt;code&gt;edebug-initial-mode&lt;/code&gt; 를 설정 합니다 . 모드를 나타내는 키를 입력하라는 메시지가 표시됩니다. 해당 모드를 설정하는 위에 나열된 8 개의 키 중 하나를 입력해야합니다.</target>
        </trans-unit>
        <trans-unit id="491c3177bf09e8149addbed4486879dbfda63e5c" translate="yes" xml:space="preserve">
          <source>, so Emacs uses the 2**25 bit in</source>
          <target state="translated">, 그래서 Emacs는 2 ** 25 비트를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="2d4fdb2d9eef4209a8679c5d398da855fa007b68" translate="yes" xml:space="preserve">
          <source>, so it uses the string &amp;lsquo;</source>
          <target state="translated">이므로 문자열 '</target>
        </trans-unit>
        <trans-unit id="75a62d4bb14e4617f0ec8777696c00a78e6355cd" translate="yes" xml:space="preserve">
          <source>, so that users can override your changes if they wish. See &lt;a href=&quot;startup-summary#Startup-Summary&quot;&gt;Startup Summary&lt;/a&gt;. Note that if either</source>
          <target state="translated">, 사용자가 원하는 경우 변경 사항을 무시할 수 있습니다. &lt;a href=&quot;startup-summary#Startup-Summary&quot;&gt;시작 요약을&lt;/a&gt; 참조하십시오 . 둘 중 하나 인 경우</target>
        </trans-unit>
        <trans-unit id="936c93afcbf934222d5dff1671b0eecf323f0d2d" translate="yes" xml:space="preserve">
          <source>, such as</source>
          <target state="translated">, 예 :</target>
        </trans-unit>
        <trans-unit id="bce5222fc5fc63bb67a806b561a412a2ad48ccc7" translate="yes" xml:space="preserve">
          <source>, that is, for a file whose name is &lt;var&gt;filename&lt;/var&gt; with the extension &amp;lsquo;</source>
          <target state="translated">, 즉, 그 이름의 파일을위한 &lt;var&gt;filename&lt;/var&gt; '확장자</target>
        </trans-unit>
        <trans-unit id="8ef49190ec4cb9b5814fd9d63465c6426302cbda" translate="yes" xml:space="preserve">
          <source>, that kills the subprocess instantly with &lt;code&gt;SIGKILL&lt;/code&gt; and quits immediately (except on MS-DOS, where killing other processes doesn&amp;rsquo;t work). See &lt;a href=&quot;quitting#Quitting&quot;&gt;Quitting&lt;/a&gt;.</source>
          <target state="translated">, &lt;code&gt;SIGKILL&lt;/code&gt; 을 사용하여 하위 프로세스를 즉시 종료하고 즉시 종료합니다 (다른 프로세스 종료가 작동하지 않는 MS-DOS 제외). 참조 &lt;a href=&quot;quitting#Quitting&quot;&gt;끝내기를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b76999fd0fa519f9eae96e8e6d9eae19226fb53f" translate="yes" xml:space="preserve">
          <source>, the &lt;em&gt;content directory&lt;/em&gt; (see &lt;a href=&quot;packaging-basics#Packaging-Basics&quot;&gt;Packaging Basics&lt;/a&gt;). Files may also extract into subdirectories of the content directory.</source>
          <target state="translated">, &lt;em&gt;콘텐츠 디렉토리&lt;/em&gt; ( &lt;a href=&quot;packaging-basics#Packaging-Basics&quot;&gt;패키징 기본 사항&lt;/a&gt; 참조 ). 파일은 콘텐츠 디렉터리의 하위 디렉터리로 추출 될 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="8465b7d48ed4ca88d608a874cc8429e836a56ae5" translate="yes" xml:space="preserve">
          <source>, the &lt;var&gt;newname&lt;/var&gt;</source>
          <target state="translated">, 새 &lt;var&gt;newname&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="6f625e702b29cb575b0a620b0d66dedcfd75b493" translate="yes" xml:space="preserve">
          <source>, the character whose value is 9.</source>
          <target state="translated">, 값이 9 인 문자.</target>
        </trans-unit>
        <trans-unit id="570ce3746587271f7e97d2af2dcaaa694bb83415" translate="yes" xml:space="preserve">
          <source>, the definition for &lt;code&gt;idlwave-complete-filename&lt;/code&gt; includes the following code:</source>
          <target state="translated">, &lt;code&gt;idlwave-complete-filename&lt;/code&gt; 에 대한 정의 에는 다음 코드가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="693758fe3cc6c68b4177a63b54de56e3820df82c" translate="yes" xml:space="preserve">
          <source>, the function returns 1, which is the</source>
          <target state="translated">, 함수는 1을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f7635ad74fd6b235954b8ca05a1ccc51695adac9" translate="yes" xml:space="preserve">
          <source>, the function returns 134217729, 8000001 in hex, i.e. &amp;lsquo;</source>
          <target state="translated">,이 함수는 16 진수로 134217729, 8000001을 반환합니다. 즉 '</target>
        </trans-unit>
        <trans-unit id="07bb66bbcd3d6aa188e3c9b7b9823aa1bf18ef9d" translate="yes" xml:space="preserve">
          <source>, the names of its numbered backup versions are</source>
          <target state="translated">, 번호가 매겨진 백업 버전의 이름은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="de3218635582472b0098ed4fbb4005530692c1eb" translate="yes" xml:space="preserve">
          <source>, the rest of this section will sound very familiar.</source>
          <target state="translated">,이 섹션의 나머지 부분은 매우 친숙하게 들립니다.</target>
        </trans-unit>
        <trans-unit id="74c551eda534f73b849ea817621b9b1b8680f2db" translate="yes" xml:space="preserve">
          <source>, the value refers to the corresponding source file.</source>
          <target state="translated">, 값은 해당 소스 파일을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="570e3d1970c63f701be009a816968c5405646cd7" translate="yes" xml:space="preserve">
          <source>, then Emacs will translate</source>
          <target state="translated">, 그러면 Emacs가</target>
        </trans-unit>
        <trans-unit id="f5a07451cc9a412265cc9c56a26655232cecf72b" translate="yes" xml:space="preserve">
          <source>, then copy the files into the installation directory for Lisp files when you install Emacs.</source>
          <target state="translated">을 클릭 한 다음 Emacs를 설치할 때 Lisp 파일의 설치 디렉토리에 파일을 복사합니다.</target>
        </trans-unit>
        <trans-unit id="8fe6de79f8f8d7ff4ec4961ba6b858d923159e00" translate="yes" xml:space="preserve">
          <source>, then it reads the name of another command, which it then calls. This is done by the command &lt;code&gt;execute-extended-command&lt;/code&gt; (see &lt;a href=&quot;interactive-call#Interactive-Call&quot;&gt;Interactive Call&lt;/a&gt;).</source>
          <target state="translated">, 그런 다음 다른 명령의 이름을 읽고 호출합니다. 이것은 &lt;code&gt;execute-extended-command&lt;/code&gt; 명령에 의해 수행됩니다 ( &lt;a href=&quot;interactive-call#Interactive-Call&quot;&gt;대화식 호출&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="cb833ae231baf6ef09e8c5f4f0d530ef71ba493f" translate="yes" xml:space="preserve">
          <source>, then this function returns &lt;code&gt;forward-char&lt;/code&gt;.</source>
          <target state="translated">이면이 함수는 &lt;code&gt;forward-char&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="9bff9c70df1ebf8baf219de2feaeff785195c039" translate="yes" xml:space="preserve">
          <source>, then this normally results in a quit and &lt;code&gt;x-popup-menu&lt;/code&gt; does not return. But if &lt;var&gt;position&lt;/var&gt; is a mouse button event (indicating that the user invoked the menu with the mouse) then no quit occurs and &lt;code&gt;x-popup-menu&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">, 그러면 일반적으로 종료되고 &lt;code&gt;x-popup-menu&lt;/code&gt; 가 반환되지 않습니다. 그러나 &lt;var&gt;position&lt;/var&gt; 가 마우스 버튼 이벤트 (사용자가 마우스로 메뉴를 호출했음을 나타냄)이면 종료가 발생하지 않고 &lt;code&gt;x-popup-menu&lt;/code&gt; 가 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="3f5581ab98055d42a927035928858c39da8897b8" translate="yes" xml:space="preserve">
          <source>, this file is used as the long description (overriding any &amp;lsquo;</source>
          <target state="translated">,이 파일은 자세한 설명으로 사용됩니다 ( '</target>
        </trans-unit>
        <trans-unit id="34887d4f30f8425f4c841e6b5d4a249dfc4ae9b1" translate="yes" xml:space="preserve">
          <source>, this is assumed to be an Info directory file made with &lt;code&gt;install-info&lt;/code&gt;. See &lt;a href=&quot;http://www.gnu.org/software/texinfo/manual/texinfo/html_node/Invoking-install_002dinfo.html#Invoking-install_002dinfo&quot;&gt;Invoking install-info&lt;/a&gt; in</source>
          <target state="translated">, 이것은 &lt;code&gt;install-info&lt;/code&gt; 로 만든 Info 디렉토리 파일이라고 가정합니다 . &lt;a href=&quot;http://www.gnu.org/software/texinfo/manual/texinfo/html_node/Invoking-install_002dinfo.html#Invoking-install_002dinfo&quot;&gt;설치 정보 호출을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3ab7f8a96990afab1ca4d331462ceffc479cc7fb" translate="yes" xml:space="preserve">
          <source>, this would map &amp;lsquo;</source>
          <target state="translated">, 이것은 '</target>
        </trans-unit>
        <trans-unit id="75a2ab01a9d133f3393cad3c0b33aa097865fb29" translate="yes" xml:space="preserve">
          <source>, to evaluate expressions interactively. You can also set up the &lt;em&gt;evaluation list&lt;/em&gt; of expressions to be evaluated automatically each time Edebug updates the display.</source>
          <target state="translated">, 대화식으로 표현식을 평가합니다. Edebug가 디스플레이를 업데이트 할 때마다 자동으로 평가되도록 표현식 의 &lt;em&gt;평가 목록&lt;/em&gt; 을 설정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="3171d5064865c9dbd2c26248d58a4a642fa2257d" translate="yes" xml:space="preserve">
          <source>, to the end of each field that may have bidirectional content, or prepend it to the beginning of the following field. The function &lt;code&gt;bidi-string-mark-left-to-right&lt;/code&gt;, described below, comes in handy for this purpose. (In a right-to-left paragraph, use U+200F &lt;small&gt;RIGHT-TO-LEFT MARK&lt;/small&gt;, or</source>
          <target state="translated">, 양방향 콘텐츠가있을 수있는 각 필드의 끝에 추가하거나 다음 필드의 시작 부분에 추가합니다. 아래에 설명 된 &lt;code&gt;bidi-string-mark-left-to-right&lt;/code&gt; 함수 는 이러한 목적에 유용합니다. (오른쪽에서 왼쪽 단락에서 U + 200F &lt;small&gt;오른쪽에서 왼쪽&lt;/small&gt; 으로 표시 사용 또는</target>
        </trans-unit>
        <trans-unit id="f532f4650c3b6bb5627c80d03456904539897e9b" translate="yes" xml:space="preserve">
          <source>, to visit the source code. You can also type</source>
          <target state="translated">, 소스 코드를 방문하십시오. 입력 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="afc0091c7f573bf20611ebe5d30457ae56ff9b22" translate="yes" xml:space="preserve">
          <source>, type</source>
          <target state="translated">, 유형</target>
        </trans-unit>
        <trans-unit id="f1567d51181fba773ba40085364e6edaaf98999f" translate="yes" xml:space="preserve">
          <source>, uses a keymap which is also the value of the variable &lt;code&gt;ctl-x-4-map&lt;/code&gt;. The event &lt;code&gt;mode-line&lt;/code&gt; is one of several dummy events used as prefixes for mouse actions in special parts of a window.</source>
          <target state="translated">, 변수 &lt;code&gt;ctl-x-4-map&lt;/code&gt; 의 값이기도 한 키맵을 사용합니다 . 이벤트 &lt;code&gt;mode-line&lt;/code&gt; 은 창의 특정 부분에서 마우스 동작에 대한 접두사로 사용되는 여러 더미 이벤트 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="33fab3a53ef64d0b8deade8f74732ed726444ee7" translate="yes" xml:space="preserve">
          <source>, where &lt;var&gt;emacs-name&lt;/var&gt; is the name of the Emacs executable file. The optional argument &lt;var&gt;track-referrers&lt;/var&gt;, if non-&lt;code&gt;nil&lt;/code&gt;, causes the portable dumper to keep additional information to help track down the provenance of object types that are not yet supported by the &lt;code&gt;pdump&lt;/code&gt; method.</source>
          <target state="translated">, 여기서 &lt;var&gt;emacs-name&lt;/var&gt; 은 Emacs 실행 파일의 이름입니다. 선택적 인수 &lt;var&gt;track-referrers&lt;/var&gt; 는 &lt;code&gt;nil&lt;/code&gt; 이 아닌 경우 휴대용 덤퍼가 &lt;code&gt;pdump&lt;/code&gt; 메서드 에서 아직 지원하지 않는 개체 유형의 출처를 추적하는 데 도움이되는 추가 정보를 유지하도록합니다 .</target>
        </trans-unit>
        <trans-unit id="c369b21f1741d6a2f5d19477217e5c5eb2cbc15a" translate="yes" xml:space="preserve">
          <source>, where &lt;var&gt;ext&lt;/var&gt; is a system-dependent file-name extension of shared libraries. Finally, if neither of those names is found, &lt;code&gt;load&lt;/code&gt; looks for a file named &lt;var&gt;filename&lt;/var&gt; with nothing appended, and loads it if it exists. (The &lt;code&gt;load&lt;/code&gt; function is not clever about looking at &lt;var&gt;filename&lt;/var&gt;. In the perverse case of a file named</source>
          <target state="translated">여기서 &lt;var&gt;ext&lt;/var&gt; 는 공유 라이브러리의 시스템 종속 파일 이름 확장자입니다. 마지막으로, 이러한 이름이 모두 발견되지 않으면 &lt;code&gt;load&lt;/code&gt; 는 아무것도 추가되지 않은 &lt;var&gt;filename&lt;/var&gt; 이라는 파일 을 찾고 파일 이 있으면로드합니다. ( 불러 &lt;code&gt;load&lt;/code&gt; 기능은 &lt;var&gt;filename&lt;/var&gt; 을 보는 것에 대해 영리하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="5ffdef9a047e69c5f12ce0156850fe05da245a31" translate="yes" xml:space="preserve">
          <source>, where &lt;var&gt;foo&lt;/var&gt; is the theme name. The first Lisp form in the file should be a call to &lt;code&gt;deftheme&lt;/code&gt;, and the last form should be a call to &lt;code&gt;provide-theme&lt;/code&gt;.</source>
          <target state="translated">, 여기서 &lt;var&gt;foo&lt;/var&gt; 는 테마 이름입니다. 파일의 첫 번째 Lisp 양식은 &lt;code&gt;deftheme&lt;/code&gt; 에 대한 호출이어야하며 마지막 양식은 &lt;code&gt;provide-theme&lt;/code&gt; 에 대한 호출이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="6382fed52749a12d31bfb08ac6fa61b93e72d37a" translate="yes" xml:space="preserve">
          <source>, where &lt;var&gt;name&lt;/var&gt; is the package name and &lt;var&gt;version&lt;/var&gt; is the version number. Its contents, once extracted, must all appear in a directory named</source>
          <target state="translated">여기서 &lt;var&gt;name&lt;/var&gt; 은 패키지 이름이고 &lt;var&gt;version&lt;/var&gt; 은 버전 번호입니다. 압축을 푼 내용은 모두 다음 이름의 디렉토리에 나타나야합니다.</target>
        </trans-unit>
        <trans-unit id="1a9f4c48d422ccf449aa38cb62b4fd0124311a2d" translate="yes" xml:space="preserve">
          <source>, where &lt;var&gt;name&lt;/var&gt; is the package&amp;rsquo;s name and &lt;var&gt;version&lt;/var&gt; its version (e.g.,</source>
          <target state="translated">여기서 &lt;var&gt;name&lt;/var&gt; 패키지의 이름입니다 &lt;var&gt;version&lt;/var&gt; 등의 버전 (,</target>
        </trans-unit>
        <trans-unit id="7bbbacd399e08c955bc5a67df4a442eac8874c6b" translate="yes" xml:space="preserve">
          <source>, where it is executed while building Emacs.</source>
          <target state="translated">, Emacs를 빌드하는 동안 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="2c558cea7def2b18e7e6c2af543726d48805fb8b" translate="yes" xml:space="preserve">
          <source>, which causes a &lt;em&gt;quit&lt;/em&gt;. See &lt;a href=&quot;quitting#Quitting&quot;&gt;Quitting&lt;/a&gt;.</source>
          <target state="translated">이로 인해 &lt;em&gt;종료&lt;/em&gt; 됩니다. 참조 &lt;a href=&quot;quitting#Quitting&quot;&gt;끝내기를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b4831f4c79670e5a03ee0d15897e2ccd52664e78" translate="yes" xml:space="preserve">
          <source>, which has all the standard Lisp files already preloaded into it. (The &amp;lsquo;</source>
          <target state="translated">, 모든 표준 Lisp 파일이 이미 미리로드되어 있습니다. ( '</target>
        </trans-unit>
        <trans-unit id="0108761494e477fe492ad06c3903eeb071193995" translate="yes" xml:space="preserve">
          <source>, which is a meaningful input character under X, using &amp;lsquo;</source>
          <target state="translated">, X 아래의 의미있는 입력 문자 인 '</target>
        </trans-unit>
        <trans-unit id="f23f37f9d90b4de59787272c7b1c55a3f9e766bd" translate="yes" xml:space="preserve">
          <source>, which is displayed as &amp;lsquo;</source>
          <target state="translated">, '로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="2c62658d01fac9b357a47cc2f4f4e77c55982578" translate="yes" xml:space="preserve">
          <source>, which is invalid because this function demands the entire word &amp;lsquo;</source>
          <target state="translated">,이 함수는 전체 단어 '</target>
        </trans-unit>
        <trans-unit id="c15fdbbc43d3ff48ce5bd7b97ba691fdfaada446" translate="yes" xml:space="preserve">
          <source>, which is normally defined as the &lt;code&gt;backward-word&lt;/code&gt; command. However, if you were to set &lt;code&gt;meta-prefix-char&lt;/code&gt; to 24, the code for</source>
          <target state="translated">, 일반적으로 &lt;code&gt;backward-word&lt;/code&gt; 명령 으로 정의됩니다 . 그러나 &lt;code&gt;meta-prefix-char&lt;/code&gt; 를 24로 설정하면</target>
        </trans-unit>
        <trans-unit id="5dc227c531e0734955bcbffe2093e4dab1200cf0" translate="yes" xml:space="preserve">
          <source>, which is preloaded. The default value is set based on &lt;code&gt;data-directory&lt;/code&gt;. The variable needs to access the value of &lt;code&gt;data-directory&lt;/code&gt; when Emacs starts, not when it is dumped, because the Emacs executable has probably been installed in a different location since it was dumped.</source>
          <target state="translated">, 미리로드되어 있습니다. 기본값은 &lt;code&gt;data-directory&lt;/code&gt; 를 기반으로 설정 됩니다. 변수 는 덤프 된 이후에 Emacs 실행 파일이 다른 위치에 설치되었을 가능성이 있기 때문에 Emacs가 시작될 때가 아니라 Emacs가 시작될 때 &lt;code&gt;data-directory&lt;/code&gt; 의 값에 액세스해야합니다 .</target>
        </trans-unit>
        <trans-unit id="d79712411c1c9a25e15789984ff0672b70486c25" translate="yes" xml:space="preserve">
          <source>, which uses Compilation mode. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation-Mode.html#Compilation-Mode&quot;&gt;Compilation Mode&lt;/a&gt; in</source>
          <target state="translated">, 컴파일 모드를 사용합니다. 참조 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation-Mode.html#Compilation-Mode&quot;&gt;편집 모드&lt;/a&gt; 에서</target>
        </trans-unit>
        <trans-unit id="1bb1325314b0546ff09aaeb225d0141d3b90107c" translate="yes" xml:space="preserve">
          <source>, whose standard binding is the &lt;code&gt;switch-to-buffer&lt;/code&gt; command. (Don&amp;rsquo;t actually do this!) Here is an illustration of what would happen:</source>
          <target state="translated">, 표준 바인딩은 &lt;code&gt;switch-to-buffer&lt;/code&gt; 명령입니다. (실제로이 작업을 수행하지 마십시오!) 다음은 어떤 일이 일어날 지에 대한 그림입니다.</target>
        </trans-unit>
        <trans-unit id="dae9d538231b4711e332a6db49564125c77314e1" translate="yes" xml:space="preserve">
          <source>, whose standard meaning is rarely of any use in the minibuffer. Major modes such as Dired or Rmail that do not allow self-insertion of text can reasonably redefine letters and other printing characters as special commands.</source>
          <target state="translated">, 표준 의미는 미니 버퍼에서 거의 사용되지 않습니다. 텍스트의 자체 삽입을 허용하지 않는 Dired 또는 Rmail과 같은 주요 모드는 문자 및 기타 인쇄 문자를 특수 명령으로 합리적으로 재정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="54e0ddbf180a14c2b8420316f0adffc4ed1aa3d2" translate="yes" xml:space="preserve">
          <source>, with commas and spaces between them, like this: &lt;code&gt;&quot;\t, \C-a&quot;&lt;/code&gt;. See &lt;a href=&quot;character-type#Character-Type&quot;&gt;Character Type&lt;/a&gt;, for a description of the read syntax for characters.</source>
          <target state="translated">, 사이에 쉼표와 공백이 포함되어 있습니다 (예 : &lt;code&gt;&quot;\t, \C-a&quot;&lt;/code&gt; . &lt;a href=&quot;character-type#Character-Type&quot;&gt;문자&lt;/a&gt; 읽기 구문에 대한 설명은 문자 유형을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b2f72cb53c5d48ea7ac064ffd4880c483576335d" translate="yes" xml:space="preserve">
          <source>, without the final slash).</source>
          <target state="translated">, 마지막 슬래시없이).</target>
        </trans-unit>
        <trans-unit id="2c7b15edf84ace76ceebd4e6f87c7b26d24e3b21" translate="yes" xml:space="preserve">
          <source>, you can return to the source code buffer with</source>
          <target state="translated">, 다음을 사용하여 소스 코드 버퍼로 돌아갈 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6546d41b943f923ac4efda201cb58b4407fd5d23" translate="yes" xml:space="preserve">
          <source>, your init file, and</source>
          <target state="translated">, init 파일 및</target>
        </trans-unit>
        <trans-unit id="3bc15c8aae3e4124dd409035f32ea2fd6835efc9" translate="yes" xml:space="preserve">
          <source>-</source>
          <target state="translated">-</target>
        </trans-unit>
        <trans-unit id="33285e44fa9db112bb52db18a1217ab92887c9ae" translate="yes" xml:space="preserve">
          <source>-  Separate fields with a &lt;code&gt;display&lt;/code&gt; property or overlay with a property value of the form &lt;code&gt;(space . PROPS)&lt;/code&gt; (see &lt;a href=&quot;specified-space#Specified-Space&quot;&gt;Specified Space&lt;/a&gt;). Emacs treats this display specification as a &lt;em&gt;paragraph separator&lt;/em&gt;, and reorders the text on either side separately.</source>
          <target state="translated">- &lt;code&gt;display&lt;/code&gt; 속성으로 필드를 분리 하거나 &lt;code&gt;(space . PROPS)&lt;/code&gt; 형식의 속성 값으로 오버레이합니다 ( &lt;a href=&quot;specified-space#Specified-Space&quot;&gt;지정된 공간&lt;/a&gt; 참조 ). Emacs는이 표시 사양을 &lt;em&gt;단락 구분 기호&lt;/em&gt; 로 취급 하고 양쪽 텍스트를 개별적으로 재정렬합니다.</target>
        </trans-unit>
        <trans-unit id="06b3cad9047eefc675d5e3671032a05da35fa6a5" translate="yes" xml:space="preserve">
          <source>- &lt;code&gt;regexp-history-last&lt;/code&gt;, which means to use the first element of the appropriate minibuffer history list (see below).</source>
          <target state="translated">- &lt;code&gt;regexp-history-last&lt;/code&gt; 수단에 해당 미니 버퍼 기록 목록의 첫 번째 요소를 사용하여 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="dcf3de43a93dc25082ccdd72fbcf352df3aaef7f" translate="yes" xml:space="preserve">
          <source>- A function of no arguments that returns either &lt;code&gt;nil&lt;/code&gt;, a string, or a list of strings.</source>
          <target state="translated">&lt;code&gt;nil&lt;/code&gt; , 문자열 또는 문자열 목록 을 반환하는 인수가없는 함수입니다 .</target>
        </trans-unit>
        <trans-unit id="5dea26830b748014bf1b420fb899e2ba1c59d256" translate="yes" xml:space="preserve">
          <source>- A function of no arguments, whose return value (which should be &lt;code&gt;nil&lt;/code&gt;, a string, or a list of strings) becomes the value of &lt;var&gt;defaults&lt;/var&gt;.</source>
          <target state="translated">-반환 값 ( &lt;code&gt;nil&lt;/code&gt; , 문자열 또는 문자열 목록 이어야 함 )이 &lt;var&gt;defaults&lt;/var&gt; 값이되는 인수가없는 함수입니다 .</target>
        </trans-unit>
        <trans-unit id="fa3f9ae03fb00240a0e68896ebc3ddfc89b4659e" translate="yes" xml:space="preserve">
          <source>- A local address is represented as a string, which specifies the address in the local address space.</source>
          <target state="translated">-로컬 주소는 로컬 주소 공간에 주소를 지정하는 문자열로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="88bb42990b1b8e57893b33faf96e22c7130707d2" translate="yes" xml:space="preserve">
          <source>- An IPv4 address is represented as a five-element vector of four 8-bit integers and one 16-bit integer &lt;code&gt;[&lt;var&gt;a&lt;/var&gt; &lt;var&gt;b&lt;/var&gt; &lt;var&gt;c&lt;/var&gt; &lt;var&gt;d&lt;/var&gt; &lt;var&gt;p&lt;/var&gt;]&lt;/code&gt; corresponding to numeric IPv4 address &lt;var&gt;a&lt;/var&gt;.&lt;var&gt;b&lt;/var&gt;.&lt;var&gt;c&lt;/var&gt;.&lt;var&gt;d&lt;/var&gt; and port number &lt;var&gt;p&lt;/var&gt;.</source>
          <target state="translated">-IPv4 주소는 숫자 IPv4 주소 &lt;var&gt;a&lt;/var&gt; 에 해당하는 4 개의 8 비트 정수와 1 개의 16 비트 정수 &lt;code&gt;[&lt;var&gt;a&lt;/var&gt; &lt;var&gt;b&lt;/var&gt; &lt;var&gt;c&lt;/var&gt; &lt;var&gt;d&lt;/var&gt; &lt;var&gt;p&lt;/var&gt;]&lt;/code&gt; 로 구성된 5 개 요소 벡터로 표시됩니다 . &lt;var&gt;b&lt;/var&gt; . &lt;var&gt;c&lt;/var&gt; . &lt;var&gt;d&lt;/var&gt; 및 포트 번호 &lt;var&gt;p&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="506aa8260502ca04f0e854fe853e0488a019c794" translate="yes" xml:space="preserve">
          <source>- An IPv6 address is represented as a nine-element vector of 16-bit integers &lt;code&gt;[&lt;var&gt;a&lt;/var&gt; &lt;var&gt;b&lt;/var&gt; &lt;var&gt;c&lt;/var&gt; &lt;var&gt;d&lt;/var&gt; &lt;var&gt;e&lt;/var&gt; &lt;var&gt;f&lt;/var&gt;
&lt;var&gt;g&lt;/var&gt; &lt;var&gt;h&lt;/var&gt; &lt;var&gt;p&lt;/var&gt;]&lt;/code&gt; corresponding to numeric IPv6 address &lt;var&gt;a&lt;/var&gt;:&lt;var&gt;b&lt;/var&gt;:&lt;var&gt;c&lt;/var&gt;:&lt;var&gt;d&lt;/var&gt;:&lt;var&gt;e&lt;/var&gt;:&lt;var&gt;f&lt;/var&gt;:&lt;var&gt;g&lt;/var&gt;:&lt;var&gt;h&lt;/var&gt; and port number &lt;var&gt;p&lt;/var&gt;.</source>
          <target state="translated">-IPv6 주소는 숫자 IPv6 주소 &lt;var&gt;a&lt;/var&gt; : &lt;var&gt;b&lt;/var&gt; : &lt;var&gt;c&lt;/var&gt; : &lt;var&gt;d&lt;/var&gt; : &lt;var&gt;e&lt;/var&gt; : &lt;var&gt;f&lt;/var&gt; : &lt;var&gt;g&lt;/var&gt; : &lt;var&gt;h&lt;/var&gt; 및 포트에 해당하는 16 비트 정수 &lt;code&gt;[&lt;var&gt;a&lt;/var&gt; &lt;var&gt;b&lt;/var&gt; &lt;var&gt;c&lt;/var&gt; &lt;var&gt;d&lt;/var&gt; &lt;var&gt;e&lt;/var&gt; &lt;var&gt;f&lt;/var&gt; &lt;var&gt;g&lt;/var&gt; &lt;var&gt;h&lt;/var&gt; &lt;var&gt;p&lt;/var&gt;]&lt;/code&gt; 의 9 개 요소 벡터로 표시됩니다 . 번호 &lt;var&gt;p&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="1511637c65bc913962272cf479cb7e658e62c4e2" translate="yes" xml:space="preserve">
          <source>- An unsupported-family address is represented by a cons &lt;code&gt;(&lt;var&gt;f&lt;/var&gt; . &lt;var&gt;av&lt;/var&gt;)&lt;/code&gt;, where &lt;var&gt;f&lt;/var&gt; is the family number and &lt;var&gt;av&lt;/var&gt; is a vector specifying the socket address using one element per address data byte. Do not rely on this format in portable code, as it may depend on implementation defined constants, data sizes, and data structure alignment.</source>
          <target state="translated">-지원되지 않는 패밀리 주소는 cons &lt;code&gt;(&lt;var&gt;f&lt;/var&gt; . &lt;var&gt;av&lt;/var&gt;)&lt;/code&gt; 로 표시됩니다 . 여기서 &lt;var&gt;f&lt;/var&gt; 는 패밀리 번호이고 &lt;var&gt;av&lt;/var&gt; 는 주소 데이터 바이트 당 하나의 요소를 사용하여 소켓 주소를 지정하는 벡터입니다. 구현 정의 상수, 데이터 크기 및 데이터 구조 정렬에 따라 달라질 수 있으므로 이식 가능한 코드에서이 형식에 의존하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="4c9931ffcf7dd05812353dc1871c96a9ae6bd545" translate="yes" xml:space="preserve">
          <source>- Append the special character U+200E &lt;small&gt;LEFT-TO-RIGHT MARK&lt;/small&gt;, or</source>
          <target state="translated">-특수 문자 U + 200E &lt;small&gt;LEFT-TO-RIGHT MARK 추가&lt;/small&gt; 또는</target>
        </trans-unit>
        <trans-unit id="ab933652fb2c86dd986ef8dc07896036bc653b32" translate="yes" xml:space="preserve">
          <source>- Functions defined using &lt;code&gt;apply-partially&lt;/code&gt; (see &lt;a href=&quot;calling-functions#Calling-Functions&quot;&gt;apply-partially&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;apply-partially&lt;/code&gt; 사용하여 정의 된 함수 ( &lt;a href=&quot;calling-functions#Calling-Functions&quot;&gt;apply-partially&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="a08759998820b3bb00f1c9d5cf53c84dcc31cb5e" translate="yes" xml:space="preserve">
          <source>- Functions that are advised using &lt;code&gt;advice-add&lt;/code&gt; (see &lt;a href=&quot;advising-named-functions#Advising-Named-Functions&quot;&gt;Advising Named Functions&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;advising-named-functions#Advising-Named-Functions&quot;&gt;-advice &lt;/a&gt; &lt;code&gt;advice-add&lt;/code&gt; 사용하여 권고되는 기능 ( 명명 된 기능 권고 참조 ).</target>
        </trans-unit>
        <trans-unit id="08c2c0220fb6124298cefd652d025ee86c1e1db0" translate="yes" xml:space="preserve">
          <source>- Functions that determine the argument list dynamically, as part of their code.</source>
          <target state="translated">-인수 목록을 코드의 일부로 동적으로 결정하는 함수.</target>
        </trans-unit>
        <trans-unit id="7600b849e55951bc092b7d8c88afc385dfe1f531" translate="yes" xml:space="preserve">
          <source>- Include the tab character in the field separator. The tab character plays the role of &lt;em&gt;segment separator&lt;/em&gt; in bidirectional reordering, causing the text on either side to be reordered separately.</source>
          <target state="translated">-필드 구분자에 탭 문자를 포함합니다. 탭 문자는 양방향 재정렬에서 &lt;em&gt;세그먼트 구분자&lt;/em&gt; 역할을 하여 양쪽 텍스트가 개별적으로 재정렬되도록합니다.</target>
        </trans-unit>
        <trans-unit id="451dd44a910f938c000b4af610c9702adcffb0fe" translate="yes" xml:space="preserve">
          <source>- The last regexp used in an incremental search.</source>
          <target state="translated">-증분 검색에 사용 된 마지막 정규식입니다.</target>
        </trans-unit>
        <trans-unit id="71545aa56444671fd4b06e3ccb47466525b243b7" translate="yes" xml:space="preserve">
          <source>- The last string or pattern used in query-replace commands.</source>
          <target state="translated">-쿼리-바꾸기 명령에 사용 된 마지막 문자열 또는 패턴입니다.</target>
        </trans-unit>
        <trans-unit id="34811aa9bdac4e20fbb69643c8c3bd96b3d8c531" translate="yes" xml:space="preserve">
          <source>- The last string used in an incremental search.</source>
          <target state="translated">-증분 검색에 사용 된 마지막 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="eb7095e549a94198834ab25fcc1944b0d63cafaa" translate="yes" xml:space="preserve">
          <source>- The symbol &lt;code&gt;regexp-history-last&lt;/code&gt;.</source>
          <target state="translated">-기호 &lt;code&gt;regexp-history-last&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bfcc72d1fa008fc21cb979da0cd6fba59c8e79fe" translate="yes" xml:space="preserve">
          <source>- The word or symbol at point.</source>
          <target state="translated">-지점의 단어 또는 기호.</target>
        </trans-unit>
        <trans-unit id="3223424cc2cb4c13d8bbdacc0d1eb71a628c0844" translate="yes" xml:space="preserve">
          <source>- They are more efficient.</source>
          <target state="translated">-더 효율적입니다.</target>
        </trans-unit>
        <trans-unit id="5105129deaf3ab492601160ad4a267494b2310dd" translate="yes" xml:space="preserve">
          <source>- They behave in a more predictable way than &lt;code&gt;cl-defsubst&lt;/code&gt; (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/cl/Argument-Lists.html#Argument-Lists&quot;&gt;Argument Lists&lt;/a&gt; in</source>
          <target state="translated">-이들은 &lt;code&gt;cl-defsubst&lt;/code&gt; 보다 더 예측 가능한 방식으로 작동합니다 (의 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/cl/Argument-Lists.html#Argument-Lists&quot;&gt;인수 목록&lt;/a&gt; 참조) .</target>
        </trans-unit>
        <trans-unit id="b0614b60fd4ade25f0db81a8c7174c93e6f1976d" translate="yes" xml:space="preserve">
          <source>- They can be passed to &lt;code&gt;mapcar&lt;/code&gt; (see &lt;a href=&quot;mapping-functions#Mapping-Functions&quot;&gt;Mapping Functions&lt;/a&gt;).</source>
          <target state="translated">- &lt;code&gt;mapcar&lt;/code&gt; 전달할 수 있습니다 ( &lt;a href=&quot;mapping-functions#Mapping-Functions&quot;&gt;매핑 함수&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="9cde96239b628f73da4ee4557f1bd83336a79dfd" translate="yes" xml:space="preserve">
          <source>- They can be used as &lt;em&gt;place forms&lt;/em&gt; to store values (see &lt;a href=&quot;generalized-variables#Generalized-Variables&quot;&gt;Generalized Variables&lt;/a&gt;).</source>
          <target state="translated">- 값을 저장하기위한 &lt;em&gt;장소 양식&lt;/em&gt; 으로 사용할 수 있습니다 ( &lt;a href=&quot;generalized-variables#Generalized-Variables&quot;&gt;일반화 된 변수&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="a76dc48d4e001c4f8e825c32371f9c999ce8919c" translate="yes" xml:space="preserve">
          <source>- Your module function might use uninitialized or undefined values, since</source>
          <target state="translated">-모듈 함수는 초기화되지 않거나 정의되지 않은 값을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="475eb258658c4a55de3a576c495d8edab2e5dd72" translate="yes" xml:space="preserve">
          <source>- Your module might leak resources, because it might not have the opportunity to release them.</source>
          <target state="translated">-모듈이 리소스를 해제 할 기회가 없기 때문에 리소스가 누출 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d7013d67e8298bc4e00947c349fa968b1df0dc69" translate="yes" xml:space="preserve">
          <source>--batch</source>
          <target state="translated">--batch</target>
        </trans-unit>
        <trans-unit id="e3746e8966e5886a1a9491aa8442ff100a441035" translate="yes" xml:space="preserve">
          <source>--debug-init</source>
          <target state="translated">--debug-init</target>
        </trans-unit>
        <trans-unit id="dd8390426042729fa28a3e5e2529e9247dbf1584" translate="yes" xml:space="preserve">
          <source>--dired</source>
          <target state="translated">--dired</target>
        </trans-unit>
        <trans-unit id="e556d49418327e5df95b69cb87420177b3b8558b" translate="yes" xml:space="preserve">
          <source>--disable-build-details</source>
          <target state="translated">--disable-build-details</target>
        </trans-unit>
        <trans-unit id="36a45e0c3a55a850fa8754c49a95b16beadd0893" translate="yes" xml:space="preserve">
          <source>--display</source>
          <target state="translated">--display</target>
        </trans-unit>
        <trans-unit id="a6d99f8eb52f3d2882bd5bcfd18fc32f13994665" translate="yes" xml:space="preserve">
          <source>--enable-locallisppath</source>
          <target state="translated">--enable-locallisppath</target>
        </trans-unit>
        <trans-unit id="6a5c0d431d80728f444faf2b6934c85226337a6c" translate="yes" xml:space="preserve">
          <source>--enable-profiling</source>
          <target state="translated">--enable-profiling</target>
        </trans-unit>
        <trans-unit id="75b28b862f9c65a9ba883e6a4fc25107a961037b" translate="yes" xml:space="preserve">
          <source>--eval</source>
          <target state="translated">--eval</target>
        </trans-unit>
        <trans-unit id="1cc39fb1039691c5a005c1747f71ffe31b8a4ff1" translate="yes" xml:space="preserve">
          <source>--eval=&lt;var&gt;form&lt;/var&gt;</source>
          <target state="translated">--eval=&lt;var&gt;form&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="da9f4060ee141b437a6813b862c3abb5c5023e29" translate="yes" xml:space="preserve">
          <source>--funcall</source>
          <target state="translated">--funcall</target>
        </trans-unit>
        <trans-unit id="9bbdc553421327ea6503065b19ad8c2746194038" translate="yes" xml:space="preserve">
          <source>--geometry</source>
          <target state="translated">--geometry</target>
        </trans-unit>
        <trans-unit id="c07381c98fadbc874a2793fce70ac1fc156492cb" translate="yes" xml:space="preserve">
          <source>--maximized</source>
          <target state="translated">--maximized</target>
        </trans-unit>
        <trans-unit id="abe5632014bfba52c35d27f79de36cc4e97615a1" translate="yes" xml:space="preserve">
          <source>--module-assertions</source>
          <target state="translated">--module-assertions</target>
        </trans-unit>
        <trans-unit id="4b56a9ef9f1124865e2b90acbe9a1a53404d03fd" translate="yes" xml:space="preserve">
          <source>--no-site-file</source>
          <target state="translated">--no-site-file</target>
        </trans-unit>
        <trans-unit id="d6c6ba76b3ee19f65456bd988c6e49390537bde6" translate="yes" xml:space="preserve">
          <source>--no-site-lisp</source>
          <target state="translated">--no-site-lisp</target>
        </trans-unit>
        <trans-unit id="004d00a7bcbcdf314bf386f5ef646ba38c1d8907" translate="yes" xml:space="preserve">
          <source>--no-splash</source>
          <target state="translated">--no-splash</target>
        </trans-unit>
        <trans-unit id="bec877af6426434d79c88d98d466faff6debbfc6" translate="yes" xml:space="preserve">
          <source>--smid &lt;var&gt;session&lt;/var&gt;</source>
          <target state="translated">-중간 &lt;var&gt;session&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="55c71bddcb182d9e3d12232e79587180b074ef25" translate="yes" xml:space="preserve">
          <source>--temacs</source>
          <target state="translated">--temacs</target>
        </trans-unit>
        <trans-unit id="a99c29d552237adb11edc13899229fdee541254a" translate="yes" xml:space="preserve">
          <source>--with-modules</source>
          <target state="translated">--with-modules</target>
        </trans-unit>
        <trans-unit id="d48cd3f3cb4e695558dda91f4e1d74d40a1adb45" translate="yes" xml:space="preserve">
          <source>-0.0e+NaN</source>
          <target state="translated">-0.0e+NaN</target>
        </trans-unit>
        <trans-unit id="6cfe453a9bea6dbb425a96d0901b8e56aad33cea" translate="yes" xml:space="preserve">
          <source>-1 is represented as all ones. (This is called &lt;em&gt;two&amp;rsquo;s complement&lt;/em&gt; notation.)</source>
          <target state="translated">-1은 모두 1로 표시됩니다. (이를 &lt;em&gt;2의 보수&lt;/em&gt; 표기법 이라고 합니다.)</target>
        </trans-unit>
        <trans-unit id="45acbc42ae78935fd0dce00a8fea0f7104dcd452" translate="yes" xml:space="preserve">
          <source>-1.0e+INF</source>
          <target state="translated">-1.0e+INF</target>
        </trans-unit>
        <trans-unit id="ad9aee0e02aa7df5696f88c33c3f5b0003d54711" translate="yes" xml:space="preserve">
          <source>-D</source>
          <target state="translated">-D</target>
        </trans-unit>
        <trans-unit id="c20a39eb3af4897aa4dea2bd9a1ba1a16fa16352" translate="yes" xml:space="preserve">
          <source>-L</source>
          <target state="translated">-L</target>
        </trans-unit>
        <trans-unit id="6422eedc12255e6b5d4e04ab2b26ee196c74c4c7" translate="yes" xml:space="preserve">
          <source>-Q</source>
          <target state="translated">-Q</target>
        </trans-unit>
        <trans-unit id="1e8af43a53eabd62fd847b1aacadc92c281cff51" translate="yes" xml:space="preserve">
          <source>-based network protocols. In that case, use the &lt;code&gt;with-case-table&lt;/code&gt; macro with the variable &lt;var&gt;ascii-case-table&lt;/var&gt;, which stores the unmodified case table for the</source>
          <target state="translated">기반 네트워크 프로토콜. 이 경우 &lt;var&gt;ascii-case-table&lt;/var&gt; 변수와 &lt;code&gt;with-case-table&lt;/code&gt; 매크로를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="17d3a498e96fc364bea369a8b040d59536425b86" translate="yes" xml:space="preserve">
          <source>-batch</source>
          <target state="translated">-batch</target>
        </trans-unit>
        <trans-unit id="252ed75b388acc56155130114d64702e8d9fafa5" translate="yes" xml:space="preserve">
          <source>-bindat-spec</source>
          <target state="translated">-bindat-spec</target>
        </trans-unit>
        <trans-unit id="50ef56ca72c755dcbde6ce4b013f4deb64cb1044" translate="yes" xml:space="preserve">
          <source>-command</source>
          <target state="translated">-command</target>
        </trans-unit>
        <trans-unit id="d5537351313df4188977a7d2a773daedb94d0b26" translate="yes" xml:space="preserve">
          <source>-d</source>
          <target state="translated">-d</target>
        </trans-unit>
        <trans-unit id="ca33a1f12ea9e40ab6e3467dbc0955a758ab0b11" translate="yes" xml:space="preserve">
          <source>-dos</source>
          <target state="translated">-dos</target>
        </trans-unit>
        <trans-unit id="4b580664b594ba557e0be8fd1d011e617e854549" translate="yes" xml:space="preserve">
          <source>-f &lt;var&gt;function&lt;/var&gt;</source>
          <target state="translated">-f &lt;var&gt;function&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="fc5ed6287b5f2ae9862d00fd7ce70882c8a720a1" translate="yes" xml:space="preserve">
          <source>-face</source>
          <target state="translated">-face</target>
        </trans-unit>
        <trans-unit id="7eb4f04f23eb05a225581041feabf2dfdc300e8d" translate="yes" xml:space="preserve">
          <source>-form</source>
          <target state="translated">-form</target>
        </trans-unit>
        <trans-unit id="b0f2e2a8eceb4685aadb3c682c78b8fcd4e0d7b8" translate="yes" xml:space="preserve">
          <source>-forms</source>
          <target state="translated">-forms</target>
        </trans-unit>
        <trans-unit id="7168d25cda7eab2741830258912a1bf4f709044b" translate="yes" xml:space="preserve">
          <source>-frame-alist</source>
          <target state="translated">-frame-alist</target>
        </trans-unit>
        <trans-unit id="36cfe871fc80707c410b0c0818e4529ad91f7ccd" translate="yes" xml:space="preserve">
          <source>-function</source>
          <target state="translated">-function</target>
        </trans-unit>
        <trans-unit id="379f41c43d80c925b34dec28336919e5c9a40619" translate="yes" xml:space="preserve">
          <source>-functions</source>
          <target state="translated">-functions</target>
        </trans-unit>
        <trans-unit id="8c79005e9a3ea7467c761c3670f0009087f9a634" translate="yes" xml:space="preserve">
          <source>-handling in strings.</source>
          <target state="translated">-문자열 처리.</target>
        </trans-unit>
        <trans-unit id="f68842a72182e6aac1382641cf9d776940cab416" translate="yes" xml:space="preserve">
          <source>-hook</source>
          <target state="translated">-hook</target>
        </trans-unit>
        <trans-unit id="9865da85c07a3d1655e9a4fb8c2ea54c2555bf95" translate="yes" xml:space="preserve">
          <source>-hooks</source>
          <target state="translated">-hooks</target>
        </trans-unit>
        <trans-unit id="1545d123761e7946eb208a62f8f771b22f9df5b0" translate="yes" xml:space="preserve">
          <source>-internal</source>
          <target state="translated">-internal</target>
        </trans-unit>
        <trans-unit id="95251b6a3cd71cc3cacb9667af58e23a7ca6b7fd" translate="yes" xml:space="preserve">
          <source>-l &lt;var&gt;file&lt;/var&gt;</source>
          <target state="translated">-l &lt;var&gt;file&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="51063ef1d5283f6f3133bca32f524c07b2f6ee7d" translate="yes" xml:space="preserve">
          <source>-mac</source>
          <target state="translated">-mac</target>
        </trans-unit>
        <trans-unit id="7574c6815ca15ee845975a62923bb10e43f3db6c" translate="yes" xml:space="preserve">
          <source>-map</source>
          <target state="translated">-map</target>
        </trans-unit>
        <trans-unit id="f906a9c10ce29a8203def61bd8771066f73fbb03" translate="yes" xml:space="preserve">
          <source>-map-alist</source>
          <target state="translated">-map-alist</target>
        </trans-unit>
        <trans-unit id="fabcf398478e51ffd357feaa3784ed9d256fdee9" translate="yes" xml:space="preserve">
          <source>-mode</source>
          <target state="translated">-mode</target>
        </trans-unit>
        <trans-unit id="54553690612602f22254056cb3aa1246ba8dc6a1" translate="yes" xml:space="preserve">
          <source>-mode-alist</source>
          <target state="translated">-mode-alist</target>
        </trans-unit>
        <trans-unit id="da1a3943047a29a7896c92a3403dcb5daa326d89" translate="yes" xml:space="preserve">
          <source>-name</source>
          <target state="translated">-name</target>
        </trans-unit>
        <trans-unit id="75cf423bb669c8605f4dd84a2a66999aab8fe69c" translate="yes" xml:space="preserve">
          <source>-predicate</source>
          <target state="translated">-predicate</target>
        </trans-unit>
        <trans-unit id="8df6bb5f94912d1640cab447d949ade49cde100a" translate="yes" xml:space="preserve">
          <source>-program</source>
          <target state="translated">-program</target>
        </trans-unit>
        <trans-unit id="ac33d7b02f2a5c6708f6060ad24e0c1c16b31e96" translate="yes" xml:space="preserve">
          <source>-q</source>
          <target state="translated">-q</target>
        </trans-unit>
        <trans-unit id="40cb771f2c893ba1a8854b2bc66328ee281f0645" translate="yes" xml:space="preserve">
          <source>-q --no-site-file --no-splash</source>
          <target state="translated">-q-사이트 파일 없음-스플래시 없음</target>
        </trans-unit>
        <trans-unit id="bc194590c381e1da75d92f4ee397555078cb7f92" translate="yes" xml:space="preserve">
          <source>-rn</source>
          <target state="translated">-rn</target>
        </trans-unit>
        <trans-unit id="2c2dcf44f1bc9aa15d180db1d30d26a50922272d" translate="yes" xml:space="preserve">
          <source>-u</source>
          <target state="translated">-u</target>
        </trans-unit>
        <trans-unit id="82e2ceb5c950d49804fd0abd0ce8edf026a0a61a" translate="yes" xml:space="preserve">
          <source>-u &lt;var&gt;user&lt;/var&gt;</source>
          <target state="translated">-u &lt;var&gt;user&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="d641d018df28470d43a9eae843d1ec0b040a3205" translate="yes" xml:space="preserve">
          <source>-unix</source>
          <target state="translated">-unix</target>
        </trans-unit>
        <trans-unit id="05063fbbb236a1065c0dc3ba7b1564fcb5907343" translate="yes" xml:space="preserve">
          <source>-|</source>
          <target state="translated">-|</target>
        </trans-unit>
        <trans-unit id="3a52ce780950d4d969792a2559cd519d7ee8c727" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="translated">.</target>
        </trans-unit>
        <trans-unit id="8be4e9178931d35b1a218eda82e20d3678deccf3" translate="yes" xml:space="preserve">
          <source>. &amp;lsquo;</source>
          <target state="translated">. '</target>
        </trans-unit>
        <trans-unit id="8c8bc713978c45d08afcc3b34a65c24b3233a5f0" translate="yes" xml:space="preserve">
          <source>. (</source>
          <target state="translated">. (</target>
        </trans-unit>
        <trans-unit id="13a2ba527b55af39a157e15de1a1a3c6a4cfcf67" translate="yes" xml:space="preserve">
          <source>. (An ordinary function would have the same general appearance.)</source>
          <target state="translated">. (일반 기능은 일반적인 모양과 동일합니다.)</target>
        </trans-unit>
        <trans-unit id="35d4c3e988667ef3dba7222a2c938da86bb5967d" translate="yes" xml:space="preserve">
          <source>. (Emacs code contributed before 2018 may follow other conventions, which are being phased out.)</source>
          <target state="translated">. (2018 년 이전에 제공된 Emacs 코드는 단계적으로 폐지되는 다른 규칙을 따를 수 있습니다.)</target>
        </trans-unit>
        <trans-unit id="fa3148bb5019bb32d68f9748fdbd4adbba05aaee" translate="yes" xml:space="preserve">
          <source>. (Note that &amp;lsquo;</source>
          <target state="translated">. ( '</target>
        </trans-unit>
        <trans-unit id="1921a75312a79bb6553bd77eace60b332cdb4cb2" translate="yes" xml:space="preserve">
          <source>. (Note that a minibuffer window is active as long as its minibuffer is in use; see &lt;a href=&quot;minibuffers#Minibuffers&quot;&gt;Minibuffers&lt;/a&gt;).</source>
          <target state="translated">. ( &lt;a href=&quot;minibuffers#Minibuffers&quot;&gt;미니 버퍼&lt;/a&gt; 창은 미니 버퍼 가 사용중인 동안 활성화됩니다 . 미니 버퍼 참조 ).</target>
        </trans-unit>
        <trans-unit id="b99baecbe569e7c851169b41d4caa104682438c0" translate="yes" xml:space="preserve">
          <source>. (The string that serves as the autoload cookie and the name of the file generated by &lt;code&gt;update-file-autoloads&lt;/code&gt; can be changed from the above defaults, see below.) Building Emacs loads</source>
          <target state="translated">. (자동로드 쿠키 역할을하는 문자열과 &lt;code&gt;update-file-autoloads&lt;/code&gt; 에 의해 생성 된 파일 이름은 위의 기본값에서 변경할 수 있습니다. 아래를 참조하십시오.) Building Emacs loads</target>
        </trans-unit>
        <trans-unit id="538dd1ba7c8db78241e77d2c4ab52f3bfd7d5db7" translate="yes" xml:space="preserve">
          <source>. (This buffer name starts with a space, so it does not show up in the Buffer Menu.) This buffer contains the program being compiled, and point shows how far the byte compiler was able to read; the cause of the error might be nearby. See &lt;a href=&quot;syntax-errors#Syntax-Errors&quot;&gt;Syntax Errors&lt;/a&gt;, for some tips for locating syntax errors.</source>
          <target state="translated">. (이 버퍼 이름은 공백으로 시작하므로 버퍼 메뉴에 표시되지 않습니다.)이 버퍼에는 컴파일중인 프로그램이 포함되어 있으며 point는 바이트 컴파일러가 읽을 수있는 거리를 보여줍니다. 오류의 원인이 근처에있을 수 있습니다. &lt;a href=&quot;syntax-errors#Syntax-Errors&quot;&gt;구문 오류&lt;/a&gt; 를 찾기위한 몇 가지 팁 은 구문 오류를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="be04a39d9ba0d7f687c583df1fd357c9259c0bf1" translate="yes" xml:space="preserve">
          <source>. (This method has the drawback that the documentation strings take up space in Emacs all the time.)</source>
          <target state="translated">. (이 방법은 문서화 문자열이 Emacs에서 항상 공간을 차지한다는 단점이 있습니다.)</target>
        </trans-unit>
        <trans-unit id="ff168b9513b7c24d5a5055e7c6b0461b7c7acc5a" translate="yes" xml:space="preserve">
          <source>. (Try adding increments of 20000 until it is big enough.) However, the advantage of preloading additional files decreases as machines get faster. On modern machines, it is usually not advisable.</source>
          <target state="translated">. (충분히 커질 때까지 20000 증분을 추가해보십시오.) 그러나 추가 파일을 미리로드하는 이점은 시스템이 빨라질수록 감소합니다. 현대 기계에서는 일반적으로 권장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4cfbaff69fdaea57f5ad594a8409a4d323dc955f" translate="yes" xml:space="preserve">
          <source>. 14</source>
          <target state="translated">. 14</target>
        </trans-unit>
        <trans-unit id="8f31f866cd3a305246e0ce2870cb40292e17cf9a" translate="yes" xml:space="preserve">
          <source>. Be aware that the backtrace is a snapshot; the thread could have meanwhile resumed execution, and be in a different state, or could have exited.</source>
          <target state="translated">. 역 추적은 스냅 샷입니다. 스레드는 그 동안 실행을 재개하고 다른 상태에 있거나 종료되었을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="41dd6802b000bf77cd6971c020e380b6f2fe42c1" translate="yes" xml:space="preserve">
          <source>. Below we list some functions to access and set the size of an existing, visible frame, by default the selected one.</source>
          <target state="translated">. 아래에는 기존의 보이는 프레임 (기본적으로 선택된 프레임)에 액세스하고 크기를 설정하는 몇 가지 기능이 나열되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="6d6e3b8a0212db4d70e67ccc10e5a9a3ddc93de9" translate="yes" xml:space="preserve">
          <source>. But &lt;code&gt;backspace&lt;/code&gt; converts into the character code 127 (</source>
          <target state="translated">. 그러나 &lt;code&gt;backspace&lt;/code&gt; 는 문자 코드 127 (</target>
        </trans-unit>
        <trans-unit id="0249300dca04b7ddd672e51917cc03689940477a" translate="yes" xml:space="preserve">
          <source>. Character codes 160 through 255 are not entirely proper in multibyte text, even though they can occur. As a consequence, the situation where a unibyte and a multibyte string are &lt;code&gt;equal&lt;/code&gt; without both being all</source>
          <target state="translated">. 160에서 255까지의 문자 코드는 발생할 수 있지만 멀티 바이트 텍스트에서 완전히 적절하지는 않습니다. 결과적으로 유니 바이트와 멀티 바이트 문자열이 모두 &lt;code&gt;equal&lt;/code&gt; 하지 않고 동일한 상황</target>
        </trans-unit>
        <trans-unit id="2b29a4884002727e4b8ab004dbc336c620aa70db" translate="yes" xml:space="preserve">
          <source>. Control character events are prefixed by the substring &lt;code&gt;&quot;\C-&quot;&lt;/code&gt;, and meta characters by &lt;code&gt;&quot;\M-&quot;&lt;/code&gt;; for example, &lt;code&gt;&quot;\C-x&quot;&lt;/code&gt; represents the key</source>
          <target state="translated">. 제어 문자 이벤트는 하위 문자열 &lt;code&gt;&quot;\C-&quot;&lt;/code&gt; 로 시작하고 메타 문자는 &lt;code&gt;&quot;\M-&quot;&lt;/code&gt; . 예를 들어 &lt;code&gt;&quot;\C-x&quot;&lt;/code&gt; 는 키를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="cb31ce05aca9a97f8ebba0980e6d5c3668ff392f" translate="yes" xml:space="preserve">
          <source>. Each Custom theme is defined by an Emacs Lisp source file, which should follow the conventions described in this section. (Instead of writing a Custom theme by hand, you can also create one using a Customize-like interface; see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Creating-Custom-Themes.html#Creating-Custom-Themes&quot;&gt;Creating Custom Themes&lt;/a&gt; in</source>
          <target state="translated">. 각 사용자 정의 테마는이 섹션에서 설명하는 규칙을 따라야하는 Emacs Lisp 소스 파일에 의해 정의됩니다. (대신 손으로 사용자 정의 테마를 작성, 당신은 또한 사용자 정의 같은 인터페이스 사용을 만들 수 있습니다; 참조 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Creating-Custom-Themes.html#Creating-Custom-Themes&quot;&gt;만들기 사용자 정의 테마&lt;/a&gt; 에를</target>
        </trans-unit>
        <trans-unit id="2c7a299af752f1e98effa1480204e7fc34ff5cda" translate="yes" xml:space="preserve">
          <source>. Emacs comes with an interface to GNU Privacy Guard, see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/epa/index.html#Top&quot;&gt;EasyPG&lt;/a&gt; in</source>
          <target state="translated">. Emacs에는 GNU Privacy Guard에 대한 인터페이스가 함께 제공됩니다. &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/epa/index.html#Top&quot;&gt;EasyPG&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ebfb5f96b19d2e5229e6180c748242504bd89ca5" translate="yes" xml:space="preserve">
          <source>. Emacs finds this file through the standard search path for libraries (see &lt;a href=&quot;how-programs-do-loading#How-Programs-Do-Loading&quot;&gt;How Programs Do Loading&lt;/a&gt;). The Emacs distribution does not come with this file; it is intended for local customizations. If the default init file exists, it is loaded whenever you start Emacs. But your own personal init file, if any, is loaded first; if it sets &lt;code&gt;inhibit-default-init&lt;/code&gt; to a non-&lt;code&gt;nil&lt;/code&gt; value, then Emacs does not subsequently load the</source>
          <target state="translated">. Emacs는 라이브러리의 표준 검색 경로를 통해이 파일을 찾습니다 ( &lt;a href=&quot;how-programs-do-loading#How-Programs-Do-Loading&quot;&gt;How Programs Do Loading&lt;/a&gt; 참조 ). Emacs 배포판은이 파일과 함께 제공되지 않습니다. 로컬 사용자 지정을위한 것입니다. 기본 init 파일이 있으면 Emacs를 시작할 때마다로드됩니다. 그러나 자신의 개인 init 파일이 있으면 먼저로드됩니다. 이 설정하면 &lt;code&gt;inhibit-default-init&lt;/code&gt; 비에 &lt;code&gt;nil&lt;/code&gt; 값 다음 이맥스이어서로드되지 않는다</target>
        </trans-unit>
        <trans-unit id="7478a10ba8529477feecf6198f79e2763f2c6d6a" translate="yes" xml:space="preserve">
          <source>. Emacs loads this &lt;em&gt;before&lt;/em&gt; the user&amp;rsquo;s init file. You can inhibit the loading of this file with the option &amp;lsquo;</source>
          <target state="translated">. Emacs 는 사용자의 초기화 파일 &lt;em&gt;전에&lt;/em&gt; 이것을로드 합니다. '옵션을 사용하여이 파일의로드를 금지 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e7e255ce9eca1411dfe1d79789b01a01454ea130" translate="yes" xml:space="preserve">
          <source>. Emacs normally shows a tool bar on graphical displays.</source>
          <target state="translated">. Emacs는 일반적으로 그래픽 디스플레이에 도구 모음을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="7e2b2d797568d56142a89f973e8897484d236746" translate="yes" xml:space="preserve">
          <source>. Emacs provides two variables to control this:</source>
          <target state="translated">. Emacs는이를 제어하기 위해 두 가지 변수를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="64a3c82cbcc305c0ee22f249aaaae0c5a0be37ef" translate="yes" xml:space="preserve">
          <source>. Examples of defined complete keys are</source>
          <target state="translated">. 정의 된 전체 키의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="39e2af243206d8de8ea55c6b9c894e22b1a458f5" translate="yes" xml:space="preserve">
          <source>. Examples of undefined complete keys are</source>
          <target state="translated">. 정의되지 않은 전체 키의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="206f0a508d1817288afd6666e42f2c7d992b0120" translate="yes" xml:space="preserve">
          <source>. First move point to the Edebug stop point of your choice, then type</source>
          <target state="translated">. 먼저 선택한 Edebug 중지 지점으로 지점을 이동 한 다음</target>
        </trans-unit>
        <trans-unit id="333aef616ff29e6af0efca27e6a6b6d0b6bbe48f" translate="yes" xml:space="preserve">
          <source>. For an external menu bar (see &lt;a href=&quot;frame-layout#Frame-Layout&quot;&gt;Frame Layout&lt;/a&gt;), this value remains unchanged even when the menu bar wraps to two or more lines. In that case, the &lt;code&gt;menu-bar-size&lt;/code&gt; value returned by &lt;code&gt;frame-geometry&lt;/code&gt; (see &lt;a href=&quot;frame-geometry#Frame-Geometry&quot;&gt;Frame Geometry&lt;/a&gt;) allows to derive whether the menu bar actually occupies one or more lines.</source>
          <target state="translated">. 외부 메뉴 표시 줄 ( &lt;a href=&quot;frame-layout#Frame-Layout&quot;&gt;프레임 레이아웃&lt;/a&gt; 참조 )의 경우 메뉴 표시 줄이 두 개 이상의 줄로 줄 바꿈되는 경우에도이 값은 변경되지 않습니다. 이 경우 &lt;code&gt;frame-geometry&lt;/code&gt; ( &lt;a href=&quot;frame-geometry#Frame-Geometry&quot;&gt;프레임 지오메트리&lt;/a&gt; 참조)에 의해 반환 된 &lt;code&gt;menu-bar-size&lt;/code&gt; 값 은 메뉴 바가 실제로 하나 이상의 선을 차지하는지 여부를 유도 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b3d2c0dfaacb26c7f33418797db935878bbdde14" translate="yes" xml:space="preserve">
          <source>. For example,</source>
          <target state="translated">. 예를 들어</target>
        </trans-unit>
        <trans-unit id="e25b45dcef7dc232a55d1969530e00f6a5c3fe96" translate="yes" xml:space="preserve">
          <source>. For how to define new categories, see &lt;a href=&quot;categories#Categories&quot;&gt;Categories&lt;/a&gt;. Corresponding string regexp: &amp;lsquo;</source>
          <target state="translated">. 어떻게 새로운 범주를 정의하려면, 참조 &lt;a href=&quot;categories#Categories&quot;&gt;카테고리&lt;/a&gt; . 해당 문자열 regexp : '</target>
        </trans-unit>
        <trans-unit id="711ff22643d3a2db4df9bc5593a3ac61c83640c6" translate="yes" xml:space="preserve">
          <source>. For more information about them, see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Help.html#Help&quot;&gt;Help&lt;/a&gt; in</source>
          <target state="translated">. 이에 대한 자세한 내용은 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Help.html#Help&quot;&gt;도움말&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d20bfe8f05ce9074f162e0d47ee4d3991470965c" translate="yes" xml:space="preserve">
          <source>. For the saved variable to work, you should ensure that the &lt;code&gt;define-minor-mode&lt;/code&gt; form is evaluated each time Emacs starts; for packages that are not part of Emacs, the easiest way to do this is to specify a &lt;code&gt;:require&lt;/code&gt; keyword.</source>
          <target state="translated">. 저장된 변수가 작동하려면 Emacs가 시작될 때마다 &lt;code&gt;define-minor-mode&lt;/code&gt; 양식이 평가 되는지 확인해야 합니다. Emacs의 일부가 아닌 패키지의 경우이를 수행하는 가장 쉬운 방법은 &lt;code&gt;:require&lt;/code&gt; 키워드 를 지정하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="95193deaa824af2c6aff93efa64b69c81562e950" translate="yes" xml:space="preserve">
          <source>. Here is the definition of &lt;code&gt;abbrev-file-name&lt;/code&gt;:</source>
          <target state="translated">. 다음은 &lt;code&gt;abbrev-file-name&lt;/code&gt; 의 정의입니다 .</target>
        </trans-unit>
        <trans-unit id="8eee7b87f6c6aaaafb82616b2c324ec6ebea7e8e" translate="yes" xml:space="preserve">
          <source>. Here we describe only the search functions useful in programs. The principal one is &lt;code&gt;re-search-forward&lt;/code&gt;.</source>
          <target state="translated">. 여기에서는 프로그램에서 유용한 검색 기능 만 설명합니다. 주요한 것은 &lt;code&gt;re-search-forward&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e87bf62597c0febf53c83fd4c2c8f0f306663e93" translate="yes" xml:space="preserve">
          <source>. Here we describe some program-level interfaces to the same information.</source>
          <target state="translated">. 여기서는 동일한 정보에 대한 프로그램 수준 인터페이스를 설명합니다.</target>
        </trans-unit>
        <trans-unit id="90bf8ebe3bd4c93714c097c5b320e8fc568f9172" translate="yes" xml:space="preserve">
          <source>. However, for compatibility with other graphical applications, Emacs also recognizes</source>
          <target state="translated">. 그러나 다른 그래픽 응용 프로그램과의 호환성을 위해 Emacs는</target>
        </trans-unit>
        <trans-unit id="1ec36c003ececcceae3eb9086b04ae839dd072d4" translate="yes" xml:space="preserve">
          <source>. However, if the variable &lt;code&gt;byte-compile-debug&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, error messages will be signaled as Lisp errors instead (see &lt;a href=&quot;errors#Errors&quot;&gt;Errors&lt;/a&gt;).</source>
          <target state="translated">. 그러나 &lt;code&gt;byte-compile-debug&lt;/code&gt; 변수 가 &lt;code&gt;nil&lt;/code&gt; 이 아닌 경우 오류 메시지는 대신 Lisp 오류로 표시됩니다 ( &lt;a href=&quot;errors#Errors&quot;&gt;오류&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="56fd94aa2d1a1881b6f4bff8185b7e3b81ac8674" translate="yes" xml:space="preserve">
          <source>. Iconify that frame and evaluate the canonical form again: &lt;code&gt;display-buffer&lt;/code&gt; will reuse the window on the new frame (usually raising the frame and giving it focus too).</source>
          <target state="translated">. 해당 프레임을 아이콘 화하고 표준 형식을 다시 평가합니다. &lt;code&gt;display-buffer&lt;/code&gt; 는 새 프레임에서 창을 다시 사용합니다 (일반적으로 프레임을 올리고 포커스도 제공).</target>
        </trans-unit>
        <trans-unit id="fea93d4a86a9e13404b50840e0556e45632663ff" translate="yes" xml:space="preserve">
          <source>. If &lt;code&gt;enable-local-variables&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;set-auto-mode&lt;/code&gt; does not check the &amp;lsquo;</source>
          <target state="translated">. 경우 &lt;code&gt;enable-local-variables&lt;/code&gt; 것입니다 &lt;code&gt;nil&lt;/code&gt; , &lt;code&gt;set-auto-mode&lt;/code&gt; '를 확인하지 않습니다</target>
        </trans-unit>
        <trans-unit id="961949e4bf72b3049770b194f9f5f795d0f51c82" translate="yes" xml:space="preserve">
          <source>. If &lt;code&gt;use-dialog-box&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, and this function was invoked by mouse events, the question and the answers will be displayed in a GUI dialog box.</source>
          <target state="translated">. 경우 &lt;code&gt;use-dialog-box&lt;/code&gt; 비입니다 &lt;code&gt;nil&lt;/code&gt; ,이 기능은 마우스 이벤트에 의해 호출 된 질문과 답변은 GUI 대화 상자에 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="6705f94c319841dd6c1924f134c5716ea701f700" translate="yes" xml:space="preserve">
          <source>. If &lt;var&gt;buffer-or-name&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, it must be a buffer or the name of an existing buffer. Then the output goes there, at point, and point is left before the output.</source>
          <target state="translated">. 경우 &lt;var&gt;buffer-or-name&lt;/var&gt; 비이다 &lt;code&gt;nil&lt;/code&gt; , 그것은 버퍼 또는 기존 버퍼의 이름이어야한다. 그런 다음 출력이 지점에 가고 지점이 출력 전에 남습니다.</target>
        </trans-unit>
        <trans-unit id="35e58247418f59b69ab75bd234148ba301302221" translate="yes" xml:space="preserve">
          <source>. If it is &lt;code&gt;[foo]&lt;/code&gt;,</source>
          <target state="translated">. 이 경우 &lt;code&gt;[foo]&lt;/code&gt; ,</target>
        </trans-unit>
        <trans-unit id="4d34d806826f8bcaa528b15232637eb05115f9ef" translate="yes" xml:space="preserve">
          <source>. If necessary, the terminal library can evaluate &lt;code&gt;(getenv &quot;TERM&quot;)&lt;/code&gt; to find the full name of the terminal type.</source>
          <target state="translated">. 필요한 경우 터미널 라이브러리는 터미널 유형의 전체 이름을 찾기 위해 평가 &lt;code&gt;(getenv &quot;TERM&quot;)&lt;/code&gt; 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cf2dffe7279d180fd805dbbdc95a991e2382a40e" translate="yes" xml:space="preserve">
          <source>. If neither option is specified, Emacs uses the &lt;code&gt;LOGNAME&lt;/code&gt; environment variable, or the &lt;code&gt;USER&lt;/code&gt; (most systems) or &lt;code&gt;USERNAME&lt;/code&gt; (MS systems) variable, to find your home directory and thus your init file; this way, even if you have su&amp;rsquo;d, Emacs still loads your own init file. If those environment variables are absent, though, Emacs uses your user-id to find your home directory.</source>
          <target state="translated">. 두 옵션이 모두 지정되지 않으면 Emacs는 &lt;code&gt;LOGNAME&lt;/code&gt; 환경 변수 또는 &lt;code&gt;USER&lt;/code&gt; (대부분의 시스템) 또는 &lt;code&gt;USERNAME&lt;/code&gt; (MS 시스템) 변수를 사용하여 홈 디렉토리와 init 파일을 찾습니다. 이렇게하면 su'd가 있더라도 Emacs는 여전히 자신의 init 파일을로드합니다. 그러나 이러한 환경 변수가 없으면 Emacs는 사용자 ID를 사용하여 홈 디렉토리를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="1a200a3d911aa9408bacbf9888deeff42a2f9df3" translate="yes" xml:space="preserve">
          <source>. If such a file exists, the return value is the absolute name of that file, instead of the file specified by &lt;var&gt;base-name&lt;/var&gt;. This argument is intended to be used by Emacs packages to provide backward compatibility. For instance, prior to the introduction of &lt;code&gt;user-emacs-directory&lt;/code&gt;, the abbrev file was located in</source>
          <target state="translated">. 이러한 파일이있는 경우 반환 값은 &lt;var&gt;base-name&lt;/var&gt; 으로 지정된 파일 대신 해당 파일의 절대 이름입니다 . 이 인수는 이전 버전과의 호환성을 제공하기 위해 Emacs 패키지에서 사용됩니다. 예를 들어 &lt;code&gt;user-emacs-directory&lt;/code&gt; 를 도입하기 전에 abbrev 파일은 다음 위치에있었습니다.</target>
        </trans-unit>
        <trans-unit id="e547009bb9faaac26e744a98030dd4909047be32" translate="yes" xml:space="preserve">
          <source>. If that fails, retain the unencrypted connection.</source>
          <target state="translated">. 실패하면 암호화되지 않은 연결을 유지하십시오.</target>
        </trans-unit>
        <trans-unit id="f22f6b1b1b115a9327260d499d9298c2ebce530b" translate="yes" xml:space="preserve">
          <source>. If that file exists, it is loaded. If Emacs was compiled with support for dynamic modules (see &lt;a href=&quot;dynamic-modules#Dynamic-Modules&quot;&gt;Dynamic Modules&lt;/a&gt;), &lt;code&gt;load&lt;/code&gt; next looks for a file named</source>
          <target state="translated">. 해당 파일이 있으면로드됩니다. 이맥스 동적 모듈 (참조에 대한 지원과 함께 컴파일 된 경우 &lt;a href=&quot;dynamic-modules#Dynamic-Modules&quot;&gt;동적 모듈&lt;/a&gt; )을 &lt;code&gt;load&lt;/code&gt; 라는 이름의 파일에 대해 다음 모양을</target>
        </trans-unit>
        <trans-unit id="5e508e912d3b91da715965b763460b62772cb2ab" translate="yes" xml:space="preserve">
          <source>. If the last component of a file name begins with a &amp;lsquo;</source>
          <target state="translated">. 파일 이름의 마지막 구성 요소가 '로 시작하는 경우</target>
        </trans-unit>
        <trans-unit id="71e2eb976224a50ecaaf9a8d431d8704fbd63fbd" translate="yes" xml:space="preserve">
          <source>. If this second dir-locals file is present, then that is loaded in addition to</source>
          <target state="translated">. 이 두 번째 dir-locals 파일이 있으면 다음과 함께로드됩니다.</target>
        </trans-unit>
        <trans-unit id="c6ba57dfab0cde2fb24c7d6fd117fb991851283e" translate="yes" xml:space="preserve">
          <source>. In addition, the</source>
          <target state="translated">. In addition, the</target>
        </trans-unit>
        <trans-unit id="59d26d7d6bde81e9af387a0aac16088b6c2a4df6" translate="yes" xml:space="preserve">
          <source>. In particular, boolean bitfields should be of type &lt;code&gt;bool_bf&lt;/code&gt;, not &lt;code&gt;bool&lt;/code&gt;, so that they work correctly even when compiling Objective C with standard GCC.</source>
          <target state="translated">. 특히 부울 비트 필드는 &lt;code&gt;bool&lt;/code&gt; 이 아닌 &lt;code&gt;bool_bf&lt;/code&gt; 유형이어야합니다 . 그래야 표준 GCC로 Objective C를 컴파일 할 때도 올바르게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="aab0959b990df8440546fcc08ca6d8bcf7a811ea" translate="yes" xml:space="preserve">
          <source>. In the case where &lt;var&gt;message&lt;/var&gt; is a string and displayed in the echo area, it is not specified whether the contents are inserted into the buffer anyway.</source>
          <target state="translated">. 경우 &lt;var&gt;message&lt;/var&gt; 내용 어쨌든 버퍼에 삽입 할 것인지를 캐릭터 및 에코 영역에 표시하고, 그 지정되지 않는다.</target>
        </trans-unit>
        <trans-unit id="353a0c46c14e1b14af584f63da9cba3aa48268e2" translate="yes" xml:space="preserve">
          <source>. Internal-use functions written in C have names ending in &amp;lsquo;</source>
          <target state="translated">. C로 작성된 내부 용 함수에는 '로 끝나는 이름이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e0e6b1b2cc3d3c88d928454c3e431e7b7f41c24" translate="yes" xml:space="preserve">
          <source>. It also &lt;em&gt;enables&lt;/em&gt; the theme (unless the optional argument &lt;var&gt;no-enable&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;), causing its variable and face settings to take effect. It prompts the user for confirmation before loading the theme, unless the optional argument &lt;var&gt;no-confirm&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">. 또한 테마를 &lt;em&gt;활성화&lt;/em&gt; 하여 (선택적 인수 &lt;var&gt;no-enable&lt;/var&gt; 이 &lt;code&gt;nil&lt;/code&gt; 이 아닌 경우 ) 변수 및 얼굴 설정이 적용되도록합니다. 선택적 인수 &lt;var&gt;no-confirm&lt;/var&gt; 이 non- &lt;code&gt;nil&lt;/code&gt; 이 아니라면 테마를로드하기 전에 사용자에게 확인을 요청합니다 .</target>
        </trans-unit>
        <trans-unit id="996522e882fa954a6cf1a3c9fcd10b28f926d01a" translate="yes" xml:space="preserve">
          <source>. It is also called automatically if Emacs receives a &lt;code&gt;SIGTERM&lt;/code&gt; or &lt;code&gt;SIGHUP&lt;/code&gt; operating system signal (e.g., when the controlling terminal is disconnected), or if it receives a &lt;code&gt;SIGINT&lt;/code&gt; signal while running in batch mode (see &lt;a href=&quot;batch-mode#Batch-Mode&quot;&gt;Batch Mode&lt;/a&gt;).</source>
          <target state="translated">. 또한 Emacs가 &lt;code&gt;SIGTERM&lt;/code&gt; 또는 &lt;code&gt;SIGHUP&lt;/code&gt; 운영 체제 신호를 수신 하거나 (예 : 제어 터미널이 연결 해제 된 경우) 또는 배치 모드에서 실행되는 동안 &lt;code&gt;SIGINT&lt;/code&gt; 신호를 수신하는 경우 ( &lt;a href=&quot;batch-mode#Batch-Mode&quot;&gt;배치 모드&lt;/a&gt; 참조 ) 자동으로 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="bcca18c5dbd9219202aacc29792c5ac902eb0218" translate="yes" xml:space="preserve">
          <source>. It is also used as a subroutine by many functions and commands, including &lt;code&gt;switch-to-buffer&lt;/code&gt; and &lt;code&gt;pop-to-buffer&lt;/code&gt; (see &lt;a href=&quot;switching-buffers#Switching-Buffers&quot;&gt;Switching Buffers&lt;/a&gt;).</source>
          <target state="translated">. 또한 &lt;code&gt;switch-to-buffer&lt;/code&gt; 및 버퍼 로 &lt;code&gt;pop-to-buffer&lt;/code&gt; 을 포함하여 많은 기능 및 명령에서 서브 루틴으로 사용됩니다 ( &lt;a href=&quot;switching-buffers#Switching-Buffers&quot;&gt;버퍼 전환&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="bd3529526e8c4b930cd1955cfb7766880867b7c5" translate="yes" xml:space="preserve">
          <source>. It is always active, and is bound to the variable &lt;code&gt;global-map&lt;/code&gt;.</source>
          <target state="translated">. 항상 활성화되어 있으며 &lt;code&gt;global-map&lt;/code&gt; 변수에 바인딩 됩니다 .</target>
        </trans-unit>
        <trans-unit id="1a6af467d41002c8a4433b75c34addf44537978a" translate="yes" xml:space="preserve">
          <source>. It is called automatically by the Emacs command loop whenever a command with a &amp;lsquo;</source>
          <target state="translated">. '가있는 명령이있을 때마다 Emacs 명령 루프에 의해 자동으로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="431b5574dcfcd5b3640654bd9a0a2207b262a870" translate="yes" xml:space="preserve">
          <source>. It must contain a single Lisp form, consisting of a call to the function &lt;code&gt;define-package&lt;/code&gt;, described below. This defines the package&amp;rsquo;s attributes: version, brief description, and requirements.</source>
          <target state="translated">. 아래에 설명 된 &lt;code&gt;define-package&lt;/code&gt; 함수에 대한 호출로 구성된 단일 Lisp 양식을 포함해야합니다 . 이는 패키지의 속성 (버전, 간략한 설명 및 요구 사항)을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="08804c313ef450f88e0f4a91fd42c9e85799fe5d" translate="yes" xml:space="preserve">
          <source>. It returns &lt;code&gt;&quot;&quot;&lt;/code&gt; for null extensions, as in</source>
          <target state="translated">. null 확장에 대해 &lt;code&gt;&quot;&quot;&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="eb4c57305878200472bfdbc0b173a7459cf3d223" translate="yes" xml:space="preserve">
          <source>. It uses the value of the variable &lt;code&gt;major-mode&lt;/code&gt; (see &lt;a href=&quot;major-modes#Major-Modes&quot;&gt;Major Modes&lt;/a&gt;), which is why every major mode command needs to set that variable.</source>
          <target state="translated">. &lt;code&gt;major-mode&lt;/code&gt; 변수의 값을 사용 합니다 ( &lt;a href=&quot;major-modes#Major-Modes&quot;&gt;주요 모드&lt;/a&gt; 참조 ). 이것이 모든 주요 모드 명령이 해당 변수를 설정해야하는 이유입니다.</target>
        </trans-unit>
        <trans-unit id="b4dfdcd4a458b5286b2c302eb5e6eafef1d9bf5f" translate="yes" xml:space="preserve">
          <source>. Its argument list and return value are the same as for &lt;code&gt;display-sort-function&lt;/code&gt;.</source>
          <target state="translated">. 인수 목록과 반환 값은 &lt;code&gt;display-sort-function&lt;/code&gt; 과 동일 합니다 .</target>
        </trans-unit>
        <trans-unit id="1fafe6978133265f94ac7cdc43be74f2af449ae2" translate="yes" xml:space="preserve">
          <source>. Its contents would extract into the directory</source>
          <target state="translated">. 그 내용은 디렉토리로 추출됩니다.</target>
        </trans-unit>
        <trans-unit id="603ebda48d985675b3c2e85ec67d2510a70d7f05" translate="yes" xml:space="preserve">
          <source>. Less commonly, Emacs displays grave accents and apostrophes as themselves, or as apostrophes only (e.g.,</source>
          <target state="translated">. 덜 일반적으로 Emacs는 억음 악센트와 아포스트로피를 그 자체로 표시하거나 아포스트로피로만 표시합니다 (예 :</target>
        </trans-unit>
        <trans-unit id="c0e05fddc64bed3aa11501318aff2c5657711077" translate="yes" xml:space="preserve">
          <source>. Like the functions described in previous subsections, all of them are actually function pointers, and need to be called via the &lt;code&gt;emacs_env&lt;/code&gt; pointer. Description of functions that were introduced after Emacs 25 calls out the first version where they became available.</source>
          <target state="translated">. 이전 하위 섹션에서 설명한 함수와 마찬가지로 모든 함수는 실제로 함수 포인터이며 &lt;code&gt;emacs_env&lt;/code&gt; 포인터 를 통해 호출해야합니다 . Emacs 25 이후에 소개 된 기능에 대한 설명은 사용 가능한 첫 번째 버전을 호출합니다.</target>
        </trans-unit>
        <trans-unit id="7346eb47bb411138dfd549f1f9a80ac42d359bdd" translate="yes" xml:space="preserve">
          <source>. Likewise, &lt;code&gt;debug-on-quit&lt;/code&gt; has no effect on errors.</source>
          <target state="translated">. 마찬가지로, &lt;code&gt;debug-on-quit&lt;/code&gt; 는 오류에 영향을주지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d7ce77027dd8e0d18b045760997449f01023cb25" translate="yes" xml:space="preserve">
          <source>. Menu bar items are subcommands of the fake function key</source>
          <target state="translated">. 메뉴 모음 항목은 가짜 기능 키의 하위 명령입니다.</target>
        </trans-unit>
        <trans-unit id="d934afd6a2f775b0095b3c992e9dde252a82a219" translate="yes" xml:space="preserve">
          <source>. Normally, Emacs automatically chooses a font based on the faces assigned to that character&amp;mdash;specifically, the face attributes &lt;code&gt;:family&lt;/code&gt;, &lt;code&gt;:weight&lt;/code&gt;, &lt;code&gt;:slant&lt;/code&gt;, and &lt;code&gt;:width&lt;/code&gt; (see &lt;a href=&quot;face-attributes#Face-Attributes&quot;&gt;Face Attributes&lt;/a&gt;). The choice of font also depends on the character to be displayed; some fonts can only display a limited set of characters. If no available font exactly fits the requirements, Emacs looks for the &lt;em&gt;closest matching font&lt;/em&gt;. The variables in this section control how Emacs makes this selection.</source>
          <target state="translated">. 일반적으로 Emacs는 해당 캐릭터에 할당 된 얼굴, 특히 face 속성 &lt;code&gt;:family&lt;/code&gt; , &lt;code&gt;:weight&lt;/code&gt; , &lt;code&gt;:slant&lt;/code&gt; 및 &lt;code&gt;:width&lt;/code&gt; ( &lt;a href=&quot;face-attributes#Face-Attributes&quot;&gt;Face 속성&lt;/a&gt; 참조 ) 에 따라 글꼴을 자동으로 선택합니다 . 글꼴 선택은 표시 할 문자에 따라 다릅니다. 일부 글꼴은 제한된 문자 집합 만 표시 할 수 있습니다. 사용 가능한 글꼴이 요구 사항에 정확히 맞지 않으면 Emacs는 &lt;em&gt;가장 일치하는 글꼴을&lt;/em&gt; 찾습니다 . 이 섹션의 변수는 Emacs가 선택하는 방법을 제어합니다.</target>
        </trans-unit>
        <trans-unit id="2583a19c7e4bd38586dccc8af716cc77ef7b52c8" translate="yes" xml:space="preserve">
          <source>. Note, this is in the global map. This map is not actually mode-specific: its name was chosen to be informative in</source>
          <target state="translated">. 이것은 세계지도에 있습니다. 이 맵은 실제로 모드별로 다르지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a3d1fd232c7e60d72cae3c44e8a025a16c8737ea" translate="yes" xml:space="preserve">
          <source>. On MS-Windows, iconifying such a frame will &quot;roll in&quot; its window-system window at the bottom of the desktop. Some window managers may not honor this parameter.</source>
          <target state="translated">. MS-Windows에서 이러한 프레임을 아이콘 화하면 바탕 화면 하단에있는 창 시스템 창이 &quot;롤인&quot;됩니다. 일부 창 관리자는이 매개 변수를 따르지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1bd06221ce0de286d1bf2de7194d3cdab61ac9a9" translate="yes" xml:space="preserve">
          <source>. On Windows, this could be</source>
          <target state="translated">. Windows에서 이것은</target>
        </trans-unit>
        <trans-unit id="19c3890948b9a3aba4e79c688b0169be6e51b0c1" translate="yes" xml:space="preserve">
          <source>. On other filesystems,</source>
          <target state="translated">. 다른 파일 시스템에서는</target>
        </trans-unit>
        <trans-unit id="29e201f97283e805ce0a9144155b71c6b13d0090" translate="yes" xml:space="preserve">
          <source>. Only characters up to octal code 777 can be specified this way.</source>
          <target state="translated">. 8 진수 코드 777까지만이 방법으로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e1aec4a91b6d397d09e55b40ba5c02bc2190b243" translate="yes" xml:space="preserve">
          <source>. Other characters that normally terminate a symbol (e.g., whitespace, parentheses and brackets) do not do so here. Prompt.</source>
          <target state="translated">. 일반적으로 기호를 종료하는 다른 문자 (예 : 공백, 괄호 및 대괄호)는 여기에서 사용하지 않습니다. 신속한.</target>
        </trans-unit>
        <trans-unit id="d8f49da478473aed4f47c1ea3bd74dfcf85159c8" translate="yes" xml:space="preserve">
          <source>. Pseudo-processes such as network or serial connections use a value of 0.</source>
          <target state="translated">. 네트워크 또는 직렬 연결과 같은 의사 프로세스는 0 값을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="46ee29e6101f276b77e5902a024614f2f8862b99" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;byte-compilation#Byte-Compilation&quot;&gt;Byte Compilation&lt;/a&gt;.</source>
          <target state="translated">. &lt;a href=&quot;byte-compilation#Byte-Compilation&quot;&gt;바이트 컴파일을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="74707ef096791e6cc5666db9522b66b3ac3b28f3" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;help-functions#Help-Functions&quot;&gt;Help Functions&lt;/a&gt;.</source>
          <target state="translated">. &lt;a href=&quot;help-functions#Help-Functions&quot;&gt;도움말 기능을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6f995d5b769ba31a67028090ef391a3524591944" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Defining-Abbrevs.html#Defining-Abbrevs&quot;&gt;Defining Abbrevs&lt;/a&gt; in</source>
          <target state="translated">. &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Defining-Abbrevs.html#Defining-Abbrevs&quot;&gt;약어 정의를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="14041e0efa7f9c899bf974e9274c4dd6fdd4c6ad" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Registers.html#Registers&quot;&gt;Registers&lt;/a&gt; in</source>
          <target state="translated">. 참조 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Registers.html#Registers&quot;&gt;레지스터&lt;/a&gt; 에서</target>
        </trans-unit>
        <trans-unit id="b4cd068d9d7df6cc1c72c6269c9f5cc1e83f115e" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Two_002dColumn.html#Two_002dColumn&quot;&gt;Two-Column Editing&lt;/a&gt; in</source>
          <target state="translated">. &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Two_002dColumn.html#Two_002dColumn&quot;&gt;2 열 편집&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8e52ff90382e995df7ab32a9e6fc5ea715b319ca" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;prefix-command-arguments#Prefix-Command-Arguments&quot;&gt;Prefix Command Arguments&lt;/a&gt;.</source>
          <target state="translated">. &lt;a href=&quot;prefix-command-arguments#Prefix-Command-Arguments&quot;&gt;접두사 명령 인수를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="95c7a8506fec4b3e0b273ef0426b855a14aa2191" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;prefix-keys#Prefix-Keys&quot;&gt;Prefix Keys&lt;/a&gt;, for more details.</source>
          <target state="translated">. 자세한 내용은 &lt;a href=&quot;prefix-keys#Prefix-Keys&quot;&gt;접두사 키&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ec14033a78239324a871bb5a07d43a86f1755d48" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;quitting#Quitting&quot;&gt;Quitting&lt;/a&gt;.</source>
          <target state="translated">. 참조 &lt;a href=&quot;quitting#Quitting&quot;&gt;끝내기를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3f061fa44abe579708fd084a483068c3a9de2704" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;text-quoting-style#Text-Quoting-Style&quot;&gt;Text Quoting Style&lt;/a&gt;, for how to influence or inhibit this translation.</source>
          <target state="translated">. 이 번역에 영향을 미치거나 억제하는 방법 은 &lt;a href=&quot;text-quoting-style#Text-Quoting-Style&quot;&gt;텍스트 인용 스타일을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fe61f7a42795a6bc8b6926db866dc77f5a795fe1" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;variable-definitions#Variable-Definitions&quot;&gt;Variable Definitions&lt;/a&gt;, for a description of the format to use.</source>
          <target state="translated">. 사용할 형식에 대한 설명은 &lt;a href=&quot;variable-definitions#Variable-Definitions&quot;&gt;변수 정의를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="54c7a199b142658032d0f0b89fff0f2a31642f1f" translate="yes" xml:space="preserve">
          <source>. Since it&amp;rsquo;s defined in &lt;code&gt;word_size&lt;/code&gt; units, the value is 400,000 for the default 32-bit configuration and 800,000 for the 64-bit one. If you specify a larger value, garbage collection will happen less often. This reduces the amount of time spent garbage collecting, but increases total memory use. You may want to do this when running a program that creates lots of Lisp data.</source>
          <target state="translated">. &lt;code&gt;word_size&lt;/code&gt; 단위로 정의되어 있으므로 기본 32 비트 구성의 경우 값은 400,000이고 64 비트 구성의 경우 800,000입니다. 더 큰 값을 지정하면 가비지 콜렉션이 덜 자주 발생합니다. 이렇게하면 가비지 수집에 소요되는 시간이 줄어들지 만 총 메모리 사용량은 늘어납니다. Lisp 데이터를 많이 생성하는 프로그램을 실행할 때이 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="338bcb0d0b4f6443c09736e45408c62579701cfd" translate="yes" xml:space="preserve">
          <source>. The</source>
          <target state="translated">. 그만큼</target>
        </trans-unit>
        <trans-unit id="23a79640c6758182cbf73db2bd65149e28201353" translate="yes" xml:space="preserve">
          <source>. The &lt;code&gt;loadup&lt;/code&gt; library loads additional Lisp libraries, which set up the normal Emacs editing environment. After this step, the Emacs executable is no longer &lt;em&gt;bare&lt;/em&gt;.</source>
          <target state="translated">. &lt;code&gt;loadup&lt;/code&gt; 의 정상적인 이맥스 편집 환경을 설정 라이브러리로드 추가 리스프 라이브러리. 이 단계 후에 Emacs 실행 파일은 더 이상 &lt;em&gt;bare&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="26236e4dba3e996086a95468bd66c546f6b92df6" translate="yes" xml:space="preserve">
          <source>. The advantage of the Button package is that it is faster, smaller, and simpler to program. From the point of view of the user, the interfaces produced by the two packages are very similar.</source>
          <target state="translated">. Button 패키지의 장점은 프로그램이 더 빠르고, 작고, 간단하다는 것입니다. 사용자의 관점에서 보면 두 패키지가 생성하는 인터페이스는 매우 유사합니다.</target>
        </trans-unit>
        <trans-unit id="c6a2563c885987fdb47ea86421206b327aad596b" translate="yes" xml:space="preserve">
          <source>. The argument &lt;var&gt;require-match&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt;, and the only buffer name starting with the given input is &amp;lsquo;</source>
          <target state="translated">. 인수 &lt;var&gt;require-match&lt;/var&gt; 는 &lt;code&gt;t&lt;/code&gt; 이고 주어진 입력으로 시작하는 유일한 버퍼 이름은 '</target>
        </trans-unit>
        <trans-unit id="6b94ae472daf8827612d9bd7a473765fb5c612c4" translate="yes" xml:space="preserve">
          <source>. The bindings for</source>
          <target state="translated">. 바인딩</target>
        </trans-unit>
        <trans-unit id="cb18a5479398dd6fd86a2d53428e997ea2bf744e" translate="yes" xml:space="preserve">
          <source>. The easiest way to specify such a file name is to use the function &lt;code&gt;locate-user-emacs-file&lt;/code&gt;.</source>
          <target state="translated">. 이러한 파일 이름을 지정하는 가장 쉬운 방법은 &lt;code&gt;locate-user-emacs-file&lt;/code&gt; 함수를 사용하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="bd3288412e142272f9ea1bc76ec7be9679af164c" translate="yes" xml:space="preserve">
          <source>. The external support uses the</source>
          <target state="translated">. 외부 지원은</target>
        </trans-unit>
        <trans-unit id="60785fa6a4f94a2c12cd06082ed5341b6c5b6d8e" translate="yes" xml:space="preserve">
          <source>. The first</source>
          <target state="translated">. 첫번째</target>
        </trans-unit>
        <trans-unit id="13e56506ef207bd9b703c8eb290d69b655a3e3fb" translate="yes" xml:space="preserve">
          <source>. The following function is supported when D-Bus support is available:</source>
          <target state="translated">. D-Bus 지원이 가능한 경우 다음 기능이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="c0e9f01a21dfe7cd4620a588af9eef24f4e7e650" translate="yes" xml:space="preserve">
          <source>. The form following the magic comment is copied verbatim, &lt;em&gt;except&lt;/em&gt; if it is one of the forms which the autoload facility handles specially (e.g., by conversion into an &lt;code&gt;autoload&lt;/code&gt; call). The forms which are not copied verbatim are the following:</source>
          <target state="translated">. 자동로드 기능이 특별히 처리하는 형식 (예 : &lt;code&gt;autoload&lt;/code&gt; 호출 로의 변환) 중 하나 인 경우를 &lt;em&gt;제외하고&lt;/em&gt; 매직 주석 다음에 오는 형식은 그대로 복사됩니다 . 그대로 복사되지 않는 양식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="10f1895d53b3240cf2d73a60d5ba00301827dd28" translate="yes" xml:space="preserve">
          <source>. The key sequence</source>
          <target state="translated">. 키 시퀀스</target>
        </trans-unit>
        <trans-unit id="11be9ca5acbfd855db785c3e4c725411af3782c2" translate="yes" xml:space="preserve">
          <source>. The link appears in the customization buffer as &lt;var&gt;url&lt;/var&gt; and invokes the WWW browser specified by &lt;code&gt;browse-url-browser-function&lt;/code&gt;.</source>
          <target state="translated">. 링크는 사용자 정의 버퍼에 &lt;var&gt;url&lt;/var&gt; 로 나타나고 &lt;code&gt;browse-url-browser-function&lt;/code&gt; 에 지정된 WWW 브라우저를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="93b8b9d2f3c3c65f5d4e443fd5c49f41dcdfdfff" translate="yes" xml:space="preserve">
          <source>. The object is not evaluated. See &lt;a href=&quot;object-from-minibuffer#Object-from-Minibuffer&quot;&gt;Object from Minibuffer&lt;/a&gt;. Prompt.</source>
          <target state="translated">. 개체가 평가되지 않습니다. &lt;a href=&quot;object-from-minibuffer#Object-from-Minibuffer&quot;&gt;미니 버퍼의 객체를&lt;/a&gt; 참조하십시오 . 신속한.</target>
        </trans-unit>
        <trans-unit id="d6a9f9615fa516e1109ff463714edbe0584098f1" translate="yes" xml:space="preserve">
          <source>. The old contents of</source>
          <target state="translated">. 의 오래된 내용</target>
        </trans-unit>
        <trans-unit id="89c25e995b112763a704e24b23de32055f221f2e" translate="yes" xml:space="preserve">
          <source>. The other punctuation characters are reserved for minor modes, and ordinary letters are reserved for users.</source>
          <target state="translated">. 다른 구두점 문자는 부 모드 용으로 예약되어 있고 일반 문자는 사용자 용으로 예약되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="f2ca8d0ef6637d50dd596c53b66fc0e54cd0cb26" translate="yes" xml:space="preserve">
          <source>. The relevant Info files should also be present in the content directory. In this case, Emacs will automatically add the content directory to &lt;code&gt;Info-directory-list&lt;/code&gt; when the package is activated.</source>
          <target state="translated">. 관련 정보 파일도 콘텐츠 디렉토리에 있어야합니다. 이 경우 Emacs는 패키지가 활성화 될 때 자동으로 컨텐츠 디렉토리를 &lt;code&gt;Info-directory-list&lt;/code&gt; 에 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="d3a300dba763d73e8e6b749884746ae06a7daa93" translate="yes" xml:space="preserve">
          <source>. The text is grouped by modes&amp;mdash;minor modes first, then the major mode, then global bindings.</source>
          <target state="translated">. 텍스트는 모드별로 그룹화됩니다. 먼저 부 모드, 주 모드, 글로벌 바인딩 순입니다.</target>
        </trans-unit>
        <trans-unit id="e79e3f2b523be18620a16e977128d31076d8e2df" translate="yes" xml:space="preserve">
          <source>. The value is always a number. See &lt;a href=&quot;prefix-command-arguments#Prefix-Command-Arguments&quot;&gt;Prefix Command Arguments&lt;/a&gt;. Prompt.</source>
          <target state="translated">. 값은 항상 숫자입니다. &lt;a href=&quot;prefix-command-arguments#Prefix-Command-Arguments&quot;&gt;접두사 명령 인수를&lt;/a&gt; 참조하십시오 . 신속한.</target>
        </trans-unit>
        <trans-unit id="2c28b2f60408a4d6fc3319bbfb0b669caefe3119" translate="yes" xml:space="preserve">
          <source>. The variable &lt;code&gt;tab-width&lt;/code&gt; controls the number of spaces per tab stop (see below).</source>
          <target state="translated">. &lt;code&gt;tab-width&lt;/code&gt; 변수 는 탭 정지 당 공백 수를 제어합니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="475a25562a32072d9abbca007e216cc16dd719dd" translate="yes" xml:space="preserve">
          <source>. Then &lt;code&gt;(require 'foo)&lt;/code&gt; never loads the file in the second directory. Such a situation might indicate a problem in the way Emacs was installed.</source>
          <target state="translated">. 그런 다음 &lt;code&gt;(require 'foo)&lt;/code&gt; 는 두 번째 디렉토리에 파일을로드하지 않습니다. 이러한 상황은 Emacs가 설치된 방식에 문제가 있음을 나타낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0d500eb08f53c5641e92c7cd39f8fc453eed984c" translate="yes" xml:space="preserve">
          <source>. Then &lt;code&gt;eval-expression&lt;/code&gt; displays its return value in the echo area.</source>
          <target state="translated">. 그런 다음 &lt;code&gt;eval-expression&lt;/code&gt; 은 에코 영역에 반환 값을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="6ff7a8a7b9804f2e196c5f95f8e6e4a127cc2c37" translate="yes" xml:space="preserve">
          <source>. Then continue execution like</source>
          <target state="translated">. 그런 다음 다음과 같이 실행을 계속하십시오.</target>
        </trans-unit>
        <trans-unit id="7987dcae896ae71467dbee888a196581900f2a3a" translate="yes" xml:space="preserve">
          <source>. Then the binding for</source>
          <target state="translated">. 그런 다음 바인딩</target>
        </trans-unit>
        <trans-unit id="dfa79532760661317b61b7d30fecfa193d651d95" translate="yes" xml:space="preserve">
          <source>. There are no &lt;var&gt;body&lt;/var&gt; forms&amp;mdash;many minor modes don&amp;rsquo;t need any.</source>
          <target state="translated">. &lt;var&gt;body&lt;/var&gt; 형태 는 없습니다. 많은 부 모드는 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d7a7e02f056566031479ae440458f3963c92f90d" translate="yes" xml:space="preserve">
          <source>. These messages include file names and line numbers identifying the location of the problem. The usual Emacs commands for operating on compiler output can be used on these messages.</source>
          <target state="translated">. 이러한 메시지에는 문제의 위치를 ​​식별하는 파일 이름과 줄 번호가 포함됩니다. 컴파일러 출력에서 ​​작동하는 일반적인 Emacs 명령을이 메시지에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6de359c4ae6f3d9bf1f938a972654462d7d36fba" translate="yes" xml:space="preserve">
          <source>. These values apply to all Emacs frames created on this display, overriding the resource values recorded in the X server. Here&amp;rsquo;s an example of what this string might look like:</source>
          <target state="translated">. 이 값은이 디스플레이에서 생성 된 모든 Emacs 프레임에 적용되며 X 서버에 기록 된 리소스 값을 무시합니다. 다음은이 문자열의 예입니다.</target>
        </trans-unit>
        <trans-unit id="ab37342e51a64e7e4aaf7b35420e6e052b66960c" translate="yes" xml:space="preserve">
          <source>. They all return lists of matching nodes.</source>
          <target state="translated">. 모두 일치하는 노드 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="62573a4326c7e966f0ccc21f04c44d60ead448db" translate="yes" xml:space="preserve">
          <source>. They use keymaps that have no special names.</source>
          <target state="translated">. 특수 이름이없는 키맵을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="d3e96f9d9598fb97c0f86c580b9a077a05c131ce" translate="yes" xml:space="preserve">
          <source>. This chapter describes how to define &lt;em&gt;customization items&lt;/em&gt; that users can interact with through the Customize interface.</source>
          <target state="translated">. 이 장에서는 사용자 정의 인터페이스를 통해 상호 작용할 수있는 사용자 &lt;em&gt;정의 항목&lt;/em&gt; 을 정의하는 방법에 대해 설명합니다 .</target>
        </trans-unit>
        <trans-unit id="b276f5d39c0f07465dca4475a7187f3dfb760832" translate="yes" xml:space="preserve">
          <source>. This command uses the abnormal hook variable &lt;code&gt;completion-at-point-functions&lt;/code&gt;:</source>
          <target state="translated">. 이 명령은 비정상적인 후크 변수 &lt;code&gt;completion-at-point-functions&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="440e8b65c220454eda49f23925a1c481db332bb9" translate="yes" xml:space="preserve">
          <source>. This file is executed after the documentation strings are found.</source>
          <target state="translated">. 이 파일은 문서 문자열을 찾은 후에 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="0ac510c906c2ba1fe0e42b295df8444b06fa6e43" translate="yes" xml:space="preserve">
          <source>. This file is reserved for the package&amp;rsquo;s autoload definitions (see &lt;a href=&quot;packaging-basics#Packaging-Basics&quot;&gt;Packaging Basics&lt;/a&gt;). It is created automatically when the package is installed, by searching all the Lisp files in the package for autoload magic comments.</source>
          <target state="translated">. 이 파일은 패키지의 자동로드 정의용으로 예약되어 있습니다 ( &lt;a href=&quot;packaging-basics#Packaging-Basics&quot;&gt;패키징 기본 사항&lt;/a&gt; 참조 ). 패키지가 설치 될 때 자동로드 매직 주석을 위해 패키지의 모든 Lisp 파일을 검색하여 자동으로 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="9083dd2188875736a04b396d142e6789b8938c5d" translate="yes" xml:space="preserve">
          <source>. This file should have been compiled into the Emacs executable when it was built.</source>
          <target state="translated">. 이 파일은 빌드 될 때 Emacs 실행 파일로 컴파일되어야합니다.</target>
        </trans-unit>
        <trans-unit id="9fb24ef0316e818466d6ee65409af277724a4326" translate="yes" xml:space="preserve">
          <source>. This function also accepts</source>
          <target state="translated">. 이 기능은 또한</target>
        </trans-unit>
        <trans-unit id="75bfea971cd20cf7ae8c1bead0746148234b64d0" translate="yes" xml:space="preserve">
          <source>. This handling is done at a very low level, so you may assume that all the functions described in this chapter accept magic file names as file name arguments, except where noted. See &lt;a href=&quot;magic-file-names#Magic-File-Names&quot;&gt;Magic File Names&lt;/a&gt;, for details.</source>
          <target state="translated">. 이 처리는 매우 낮은 수준에서 수행되므로이 ​​장에서 설명하는 모든 함수는 언급 된 경우를 제외하고 매직 파일 이름을 파일 이름 인수로 허용한다고 가정 할 수 있습니다. 자세한 내용은 &lt;a href=&quot;magic-file-names#Magic-File-Names&quot;&gt;매직 파일 이름&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e9d0ec542029b062fdc942a354352adebd9cc164" translate="yes" xml:space="preserve">
          <source>. This ignores the effective</source>
          <target state="translated">. 이것은 효과적인</target>
        </trans-unit>
        <trans-unit id="7feac71636196c6d9ece4f2d7a4ac0179123d423" translate="yes" xml:space="preserve">
          <source>. This is a log of function calls and returns, showing the function names and their arguments and values. To enable trace recording, set &lt;code&gt;edebug-trace&lt;/code&gt; to a non-&lt;code&gt;nil&lt;/code&gt; value.</source>
          <target state="translated">. 이것은 함수 호출 및 반환 로그이며 함수 이름과 인수 및 값을 보여줍니다. 추적 기록을 활성화하려면 &lt;code&gt;edebug-trace&lt;/code&gt; 를 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="9d3972c2f73be112c14da46593cbcebfbe3de606" translate="yes" xml:space="preserve">
          <source>. This is useful when</source>
          <target state="translated">. 이것은 다음과 같은 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="f67f10c496ecf97ea2af4f07ed9f5dbd5b44142e" translate="yes" xml:space="preserve">
          <source>. This map is actually global, not mode-specific, but its name provides useful information about</source>
          <target state="translated">. 이 맵은 실제로 전역이며 모드별로 다르지 않지만 이름은 다음에 대한 유용한 정보를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="79788305f020097034ee12f7dadb97bf6ff2763e" translate="yes" xml:space="preserve">
          <source>. This section describes some variables used by Auto Fill mode. For a description of functions that you can call explicitly to fill and justify existing text, see &lt;a href=&quot;filling#Filling&quot;&gt;Filling&lt;/a&gt;.</source>
          <target state="translated">. 이 섹션에서는 자동 채우기 모드에서 사용되는 몇 가지 변수에 대해 설명합니다. 기존 텍스트를 채우고 양쪽 정렬하기 위해 명시 적으로 호출 할 수있는 함수에 대한 설명은 &lt;a href=&quot;filling#Filling&quot;&gt;Filling을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f13a11b97d1ed9c0650d9ba61a57a68db27f6ec6" translate="yes" xml:space="preserve">
          <source>. This special treatment does not apply if &lt;var&gt;newname&lt;/var&gt; is not a directory name but names a file that is a directory; for example, the &lt;var&gt;newname&lt;/var&gt;</source>
          <target state="translated">. 이 특별한 처리는 &lt;var&gt;newname&lt;/var&gt; 이 디렉토리 이름이 아니라 디렉토리 인 파일의 이름을 지정하는 경우에는 적용되지 않습니다 . 예를 들어, 새 &lt;var&gt;newname&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="2bc32a518110730920225717e4ef7ff03240c1bb" translate="yes" xml:space="preserve">
          <source>. This value may change whenever the tool bar wraps (see &lt;a href=&quot;frame-layout#Frame-Layout&quot;&gt;Frame Layout&lt;/a&gt;).</source>
          <target state="translated">. 이 값은 도구 모음이 래핑 될 때마다 변경 될 수 있습니다 ( &lt;a href=&quot;frame-layout#Frame-Layout&quot;&gt;프레임 레이아웃&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="0e040ea259233cb8831ee6cd1514da2d1c0f498f" translate="yes" xml:space="preserve">
          <source>. To add a new expression to the evaluation list, insert the expression at a suitable place, insert a new comment line, then type</source>
          <target state="translated">. 평가 목록에 새 표현식을 추가하려면 적절한 위치에 표현식을 삽입하고 새 주석 행을 삽입 한 다음 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="c53a8234aae95a2dc0f7d035ebba5aed21f904cb" translate="yes" xml:space="preserve">
          <source>. To enable automatic queries of &lt;code&gt;auth-source&lt;/code&gt; when &lt;code&gt;:client-certificate&lt;/code&gt; is not specified customize &lt;code&gt;network-stream-use-client-certificates&lt;/code&gt; to t.</source>
          <target state="translated">. &lt;code&gt;:client-certificate&lt;/code&gt; 가 지정되지 않은 경우 &lt;code&gt;auth-source&lt;/code&gt; 의 자동 쿼리를 활성화하려면 &lt;code&gt;network-stream-use-client-certificates&lt;/code&gt; 를 t로 사용자 지정 합니다 .</target>
        </trans-unit>
        <trans-unit id="e33a0ed1c7912c2a54c99ecf031b5f9c3eab7768" translate="yes" xml:space="preserve">
          <source>. To hide them again use</source>
          <target state="translated">. 다시 숨기려면</target>
        </trans-unit>
        <trans-unit id="2298f613da3424a27f72fa532169aa303d2086a7" translate="yes" xml:space="preserve">
          <source>. Unlike &lt;code&gt;find-file-literally&lt;/code&gt;, finding a file as &amp;lsquo;</source>
          <target state="translated">. &lt;code&gt;find-file-literally&lt;/code&gt; 와 달리 파일을 '</target>
        </trans-unit>
        <trans-unit id="493af3014138d1d8c2f9ce4fecc7ed908edeba2f" translate="yes" xml:space="preserve">
          <source>. Use</source>
          <target state="translated">. 사용하다</target>
        </trans-unit>
        <trans-unit id="5c59fdf4315978390ace5e00226c159499e7c9fe" translate="yes" xml:space="preserve">
          <source>. Usually all the lines from a certain point to the end of the function will shift to the right. There is probably a missing close parenthesis, or a superfluous open parenthesis, near that point. (However, don&amp;rsquo;t assume this is true; study the code to make sure.) Once you have found the discrepancy, undo the</source>
          <target state="translated">. 일반적으로 특정 지점에서 함수 끝까지의 모든 줄은 오른쪽으로 이동합니다. 해당 지점 근처에 누락 된 닫는 괄호 또는 불필요한 여는 괄호가있을 수 있습니다. (그러나 이것이 사실이라고 가정하지 마십시오. 코드를 조사하여 확인하십시오.) 불일치를 발견하면 실행 취소</target>
        </trans-unit>
        <trans-unit id="430df61a1948fbf603f53eda89fa439bd575ee9c" translate="yes" xml:space="preserve">
          <source>. When Emacs reads this character, if &lt;code&gt;help-form&lt;/code&gt; is a non-&lt;code&gt;nil&lt;/code&gt; Lisp expression, it evaluates that expression, and displays the result in a window if it is a string.</source>
          <target state="translated">. Emacs가이 문자를 읽을 때 &lt;code&gt;help-form&lt;/code&gt; 이 &lt;code&gt;nil&lt;/code&gt; 이 아닌 Lisp 표현식이면 해당 표현식을 평가하고 문자열이면 결과를 창에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="f68eb18b1e7f0028b830056453fb798d1d79ad51" translate="yes" xml:space="preserve">
          <source>. When called interactively, &lt;var&gt;trash&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt; if no prefix argument is given, and &lt;code&gt;nil&lt;/code&gt; otherwise.</source>
          <target state="translated">. 대화식으로 호출 할 때 접두사 인수가 제공되지 않으면 &lt;var&gt;trash&lt;/var&gt; 는 &lt;code&gt;t&lt;/code&gt; 이고 그렇지 않으면 &lt;code&gt;nil&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a0c27330a94e7b867923b5db36265c8d0bb0bd10" translate="yes" xml:space="preserve">
          <source>. When disabling Read Only mode, it disables View mode if View mode was enabled.</source>
          <target state="translated">. 읽기 전용 모드를 비활성화하면보기 모드가 활성화 된 경우보기 모드가 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="e0c60baa39e76c33679739010e7071bd49a26a76" translate="yes" xml:space="preserve">
          <source>. You can also define your own categories in addition to the standard ones using the &lt;code&gt;define-category&lt;/code&gt; function (see &lt;a href=&quot;categories#Categories&quot;&gt;Categories&lt;/a&gt;).</source>
          <target state="translated">. 또한 사용하는 표준들에 추가하여 자신 만의 카테고리를 정의 할 수 있습니다 &lt;code&gt;define-category&lt;/code&gt; 기능을합니다 ( &lt;a href=&quot;categories#Categories&quot;&gt;카테고리&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="bb813dc19fbdc426d076c3177df98a0979c8e6cd" translate="yes" xml:space="preserve">
          <source>. You can also use the &lt;code&gt;benchmark&lt;/code&gt; command for timing forms interactively.</source>
          <target state="translated">. 또한 양식 타이밍에 대한 &lt;code&gt;benchmark&lt;/code&gt; 명령을 대화식으로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f5da1b103fb5770d46c5dbca3ca074025b8ae069" translate="yes" xml:space="preserve">
          <source>. You can also use this escape syntax in vectors, as well as others that aren&amp;rsquo;t allowed in strings; one example is &amp;lsquo;</source>
          <target state="translated">. 이 이스케이프 구문을 벡터뿐만 아니라 문자열에서 허용되지 않는 다른 구문에서도 사용할 수 있습니다. 한 가지 예는 '</target>
        </trans-unit>
        <trans-unit id="4f1d734ed57c16c20097a3e6242d286cf28b8c65" translate="yes" xml:space="preserve">
          <source>. You can choose to profile by processor usage, memory usage, or both. Then run the code you&amp;rsquo;d like to speed up. After that, type</source>
          <target state="translated">. 프로세서 사용량, 메모리 사용량 또는 둘 다를 기준으로 프로파일 링하도록 선택할 수 있습니다. 그런 다음 속도를 높이려는 코드를 실행하십시오. 그 후에</target>
        </trans-unit>
        <trans-unit id="8d2280ed98781dfe279ab9ab06c266368c257c71" translate="yes" xml:space="preserve">
          <source>. You can compare two profiles using</source>
          <target state="translated">. 다음을 사용하여 두 프로필을 비교할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="027f25f51706acde06611f59d7afbab61442f2fd" translate="yes" xml:space="preserve">
          <source>. You can display a backtrace of all the pending evaluations with</source>
          <target state="translated">. 다음을 사용하여 보류중인 모든 평가의 역 추적을 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9556ea1c9440f59c0b01a3f0b09baafe0132b153" translate="yes" xml:space="preserve">
          <source>. You can study these libraries to see how modes are written.</source>
          <target state="translated">. 이러한 라이브러리를 연구하여 모드가 어떻게 작성되는지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a1a734d2c879ab7f9c3f87b2d8782c1736d17d8" translate="yes" xml:space="preserve">
          <source>. You can use &amp;lsquo;</source>
          <target state="translated">. 당신이 사용할 수있는 '</target>
        </trans-unit>
        <trans-unit id="b0bd1788e82700c0b129739bcb5285ffb34bf612" translate="yes" xml:space="preserve">
          <source>. You need not insert dashes in the comment line&amp;mdash;its contents don&amp;rsquo;t matter.</source>
          <target state="translated">. 주석 줄에 대시를 삽입 할 필요는 없습니다. 내용은 중요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d3e80f8035b29cb513aafe9628c9427b0b7b99f3" translate="yes" xml:space="preserve">
          <source>.)</source>
          <target state="translated">.)</target>
        </trans-unit>
        <trans-unit id="539689767d2e3addf7138caf13f1ee79f653c44b" translate="yes" xml:space="preserve">
          <source>.) Choose one or more of them (but not too many), and add your group to each of them using the &lt;code&gt;:group&lt;/code&gt; keyword.</source>
          <target state="translated">.) 하나 이상을 선택하고 (너무 많지는 않음) &lt;code&gt;:group&lt;/code&gt; 키워드를 사용하여 각각에 그룹을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="5e8ea8e32ad7a5cfb33297cc5b2b742abbd4c82a" translate="yes" xml:space="preserve">
          <source>.) If the primitive is a special form, it must accept a Lisp list containing its unevaluated Lisp arguments as a single argument of type &lt;code&gt;Lisp_Object&lt;/code&gt;. If the primitive has no upper limit on the number of evaluated Lisp arguments, it must have exactly two C arguments: the first is the number of Lisp arguments, and the second is the address of a block containing their values. These have types &lt;code&gt;ptrdiff_t&lt;/code&gt; and &lt;code&gt;Lisp_Object&amp;nbsp;*&lt;/code&gt;, respectively. Since &lt;code&gt;Lisp_Object&lt;/code&gt; can hold any Lisp object of any data type, you can determine the actual data type only at run time; so if you want a primitive to accept only a certain type of argument, you must check the type explicitly using a suitable predicate (see &lt;a href=&quot;type-predicates#Type-Predicates&quot;&gt;Type Predicates&lt;/a&gt;).</source>
          <target state="translated">.) 프리미티브가 특수 형식이면 평가되지 않은 Lisp 인수를 포함하는 Lisp 목록을 &lt;code&gt;Lisp_Object&lt;/code&gt; 유형의 단일 인수로 받아 들여야 합니다. 프리미티브가 평가 된 Lisp 인수의 수에 대한 상한이없는 경우 정확히 두 개의 C 인수가 있어야합니다. 첫 번째는 Lisp 인수의 수이고 두 번째는 해당 값을 포함하는 블록의 주소입니다. 이들은 각각 &lt;code&gt;ptrdiff_t&lt;/code&gt; 및 &lt;code&gt;Lisp_Object&amp;nbsp;*&lt;/code&gt; 유형 을 갖습니다 . 이후 &lt;code&gt;Lisp_Object&lt;/code&gt; 는 모든 데이터 유형의 리스프 객체를 저장할 수있는, 당신은 단지 런타임에서의 실제 데이터 유형을 확인할 수 있습니다; 따라서 기본 형식이 특정 유형의 인수 만 받아들이도록하려면 적절한 조건자를 사용하여 명시 적으로 형식을 확인해야합니다 ( &lt;a href=&quot;type-predicates#Type-Predicates&quot;&gt;Type Predicates&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="f95503a9df52be0a55e5e848a1ec32db30fac5f9" translate="yes" xml:space="preserve">
          <source>.) Note that the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;top&lt;/code&gt; parameters, if present, override the values of mouse-relative offsets.</source>
          <target state="translated">.) &lt;code&gt;left&lt;/code&gt; 및 &lt;code&gt;top&lt;/code&gt; 매개 변수가있는 경우 마우스 기준 오프셋 값을 재정의합니다.</target>
        </trans-unit>
        <trans-unit id="76205ae30772ac93486c0a3c2a85562d154592d3" translate="yes" xml:space="preserve">
          <source>../../etc/images</source>
          <target state="translated">../../etc/images</target>
        </trans-unit>
        <trans-unit id="7936c668c3f30126965691fdeacaf56c349267d4" translate="yes" xml:space="preserve">
          <source>../etc/images</source>
          <target state="translated">../etc/images</target>
        </trans-unit>
        <trans-unit id="b2aa0d96b99ab0f0b362ffad234f827ee35020ec" translate="yes" xml:space="preserve">
          <source>.15e4</source>
          <target state="translated">.15e4</target>
        </trans-unit>
        <trans-unit id="fa63aa964f4c14b9885f272aadf411cb9ea4dc99" translate="yes" xml:space="preserve">
          <source>.Xresources</source>
          <target state="translated">.Xresources</target>
        </trans-unit>
        <trans-unit id="6b74f8382b73f81104ed866789f2261a7109348d" translate="yes" xml:space="preserve">
          <source>.\|\n</source>
          <target state="translated">.\|\n</target>
        </trans-unit>
        <trans-unit id="e473aee93856e9575d33fb51693f35c2eaddeb44" translate="yes" xml:space="preserve">
          <source>.au</source>
          <target state="translated">.au</target>
        </trans-unit>
        <trans-unit id="59ad5dfb199e0d50018178fc31e4529d6df35d35" translate="yes" xml:space="preserve">
          <source>.bat</source>
          <target state="translated">.bat</target>
        </trans-unit>
        <trans-unit id="48022311225df803178b78acbdb71930dbf6c39c" translate="yes" xml:space="preserve">
          <source>.bmp</source>
          <target state="translated">.bmp</target>
        </trans-unit>
        <trans-unit id="089d0d0acddf66296ea6622a4bc5373e7afeb2db" translate="yes" xml:space="preserve">
          <source>.c</source>
          <target state="translated">.c</target>
        </trans-unit>
        <trans-unit id="27dad88631482fda4301df1d6fbf9278c94c0f1f" translate="yes" xml:space="preserve">
          <source>.com</source>
          <target state="translated">.com</target>
        </trans-unit>
        <trans-unit id="4434bacef9c00424a65bfd8afe1a0799d2a54d23" translate="yes" xml:space="preserve">
          <source>.dir-locals-2.el</source>
          <target state="translated">.dir-locals-2.el</target>
        </trans-unit>
        <trans-unit id="f9cb3a52c9078cde24bd83b34488343ab4538f65" translate="yes" xml:space="preserve">
          <source>.dir-locals.el</source>
          <target state="translated">.dir-locals.el</target>
        </trans-unit>
        <trans-unit id="e68a65cce98da78e6fa59f7acde8480614e6c25f" translate="yes" xml:space="preserve">
          <source>.dll</source>
          <target state="translated">.dll</target>
        </trans-unit>
        <trans-unit id="37e85384bfabab60684432b98cfd134b74a64e93" translate="yes" xml:space="preserve">
          <source>.el</source>
          <target state="translated">.el</target>
        </trans-unit>
        <trans-unit id="5bc31f8d3859e89df1b10b4407da261743609da9" translate="yes" xml:space="preserve">
          <source>.elc</source>
          <target state="translated">.elc</target>
        </trans-unit>
        <trans-unit id="749725386ab34f45d93016ad1809528d8d6dd6bc" translate="yes" xml:space="preserve">
          <source>.emacs</source>
          <target state="translated">.emacs</target>
        </trans-unit>
        <trans-unit id="d5652b137d9bd31dbc103d8c6107cdf43741963c" translate="yes" xml:space="preserve">
          <source>.emacs.d</source>
          <target state="translated">.emacs.d</target>
        </trans-unit>
        <trans-unit id="767dddbb5742ce5d7ca4b29e327f1f6fb9d8ac6a" translate="yes" xml:space="preserve">
          <source>.emacs.el</source>
          <target state="translated">.emacs.el</target>
        </trans-unit>
        <trans-unit id="a9085093a9d58148571626b42be2902497a50db1" translate="yes" xml:space="preserve">
          <source>.emacs.elc</source>
          <target state="translated">.emacs.elc</target>
        </trans-unit>
        <trans-unit id="fc4302a8973108f7b86565d5a49182ded2b0bf31" translate="yes" xml:space="preserve">
          <source>.exe</source>
          <target state="translated">.exe</target>
        </trans-unit>
        <trans-unit id="86d263da4dff65808ce6105209554674768d0759" translate="yes" xml:space="preserve">
          <source>.gz</source>
          <target state="translated">.gz</target>
        </trans-unit>
        <trans-unit id="af3df703ca523bbde4c5317a8bc7d22bc7a3ac3b" translate="yes" xml:space="preserve">
          <source>.ico</source>
          <target state="translated">.ico</target>
        </trans-unit>
        <trans-unit id="a9ca8ac26a06f7f78fb0177657c1b734adaf2ba4" translate="yes" xml:space="preserve">
          <source>.m</source>
          <target state="translated">.m</target>
        </trans-unit>
        <trans-unit id="c2f992fd652f93bf13447aa31922ed3e0a189712" translate="yes" xml:space="preserve">
          <source>.nosearch</source>
          <target state="translated">.nosearch</target>
        </trans-unit>
        <trans-unit id="d8acaf02a6271f2c0f6dc24f707ad72d0f009e89" translate="yes" xml:space="preserve">
          <source>.pbm</source>
          <target state="translated">.pbm</target>
        </trans-unit>
        <trans-unit id="d558ce4a0c95ff70bdf9fd133b3f27587c7a2ab0" translate="yes" xml:space="preserve">
          <source>.saves-</source>
          <target state="translated">.saves-</target>
        </trans-unit>
        <trans-unit id="db01633920422b5141ebc872759171f089fc1102" translate="yes" xml:space="preserve">
          <source>.sig</source>
          <target state="translated">.sig</target>
        </trans-unit>
        <trans-unit id="c17b4000f3f9edf25c74222bf5e8a16e787cee11" translate="yes" xml:space="preserve">
          <source>.so</source>
          <target state="translated">.so</target>
        </trans-unit>
        <trans-unit id="39cb42ed04010c3ce1112ee8fdbe978799a17590" translate="yes" xml:space="preserve">
          <source>.txt</source>
          <target state="translated">.txt</target>
        </trans-unit>
        <trans-unit id="c5ef9b806cbd2bfa0d6c179fe35e3ab475bf5aaf" translate="yes" xml:space="preserve">
          <source>.wav</source>
          <target state="translated">.wav</target>
        </trans-unit>
        <trans-unit id="0aba491d681d7be6e2b4fb159297be35fae172a0" translate="yes" xml:space="preserve">
          <source>.xbm</source>
          <target state="translated">.xbm</target>
        </trans-unit>
        <trans-unit id="9e2efa39f5d920790904583da479565824ac74d9" translate="yes" xml:space="preserve">
          <source>.xpm</source>
          <target state="translated">.xpm</target>
        </trans-unit>
        <trans-unit id="207e6c15ec0274ab39b0485f4b922d9d2105cb22" translate="yes" xml:space="preserve">
          <source>.~3~</source>
          <target state="translated">.~3~</target>
        </trans-unit>
        <trans-unit id="42099b4af021e53fd8fd4e056c2568d7c2e3ffa8" translate="yes" xml:space="preserve">
          <source>/</source>
          <target state="translated">/</target>
        </trans-unit>
        <trans-unit id="45f99afec6361c417ce6f676d8dba2f8876eb051" translate="yes" xml:space="preserve">
          <source>/=</source>
          <target state="translated">/=</target>
        </trans-unit>
        <trans-unit id="b95096d8d85c98f17d6bfc99b6aa1ce94cfcfcd9" translate="yes" xml:space="preserve">
          <source>/dev/pts65</source>
          <target state="translated">/dev/pts65</target>
        </trans-unit>
        <trans-unit id="e9293bc922cf9f349bd144647c40226343f5bc6f" translate="yes" xml:space="preserve">
          <source>/dev/tty</source>
          <target state="translated">/dev/tty</target>
        </trans-unit>
        <trans-unit id="d4baa1182495c2678ec727ce7cb0afa61dff3382" translate="yes" xml:space="preserve">
          <source>/dev/ttyS0</source>
          <target state="translated">/dev/ttyS0</target>
        </trans-unit>
        <trans-unit id="6dbd548cc03e44b8b44b6e68e56255ce4273ae49" translate="yes" xml:space="preserve">
          <source>/foo</source>
          <target state="translated">/foo</target>
        </trans-unit>
        <trans-unit id="8d960560c82f4e6c8b1b0f03eb30a1afd00e5696" translate="yes" xml:space="preserve">
          <source>/foo/</source>
          <target state="translated">/foo/</target>
        </trans-unit>
        <trans-unit id="93c32861879e0bba207915a3e4fd3119d42b98ab" translate="yes" xml:space="preserve">
          <source>/foo/bar/baz</source>
          <target state="translated">/foo/bar/baz</target>
        </trans-unit>
        <trans-unit id="0749b21ed6719a6647cd8c0fdaa1976eb25559cd" translate="yes" xml:space="preserve">
          <source>/home/foo</source>
          <target state="translated">/home/foo</target>
        </trans-unit>
        <trans-unit id="c866ca20d08741307126bed71c0bb57400b84064" translate="yes" xml:space="preserve">
          <source>/home/foo/hello</source>
          <target state="translated">/home/foo/hello</target>
        </trans-unit>
        <trans-unit id="671b61f950d8ef9c05cfff332e853b1a881f9d6d" translate="yes" xml:space="preserve">
          <source>/tmp/bar</source>
          <target state="translated">/tmp/bar</target>
        </trans-unit>
        <trans-unit id="3fe85dc53534214baefbe5977efa4ac05c5ad3c1" translate="yes" xml:space="preserve">
          <source>/tmp/foo/bar</source>
          <target state="translated">/tmp/foo/bar</target>
        </trans-unit>
        <trans-unit id="aeac54337a02692badcbfc48701e6bd5bd866f5a" translate="yes" xml:space="preserve">
          <source>/usr/foo</source>
          <target state="translated">/usr/foo</target>
        </trans-unit>
        <trans-unit id="153276ff164eab5666ed7f41c2115213fab725c5" translate="yes" xml:space="preserve">
          <source>/usr/local</source>
          <target state="translated">/usr/local</target>
        </trans-unit>
        <trans-unit id="0a8950e282f8fbecf98e8ac31d419a2feffeab0c" translate="yes" xml:space="preserve">
          <source>/xcssun/users/rms</source>
          <target state="translated">/xcssun/users/rms</target>
        </trans-unit>
        <trans-unit id="a0729eb28491ac5f96025cf2e34c20b27a174b99" translate="yes" xml:space="preserve">
          <source>0 (the number zero) means do not switch to a buffer shown on any visible or iconified frame.</source>
          <target state="translated">0 (숫자 0)은 표시되거나 아이콘 화 된 프레임에 표시된 버퍼로 전환하지 않음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="7390c3e77d0e92d1d0ab05507f0d9af5aca52e88" translate="yes" xml:space="preserve">
          <source>0 means consider windows on all visible or iconified frames.</source>
          <target state="translated">0은 표시되거나 아이콘 화 된 모든 프레임의 창을 고려함을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="2dab72e25a5fcd4d5b0760e515fa132fbd8ffec2" translate="yes" xml:space="preserve">
          <source>0 means to consider windows on all visible or iconified frames.</source>
          <target state="translated">0은 표시되거나 아이콘 화 된 모든 프레임의 창을 고려함을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="7cf37d39b6231fc24159aebe60ebda94b435bfe2" translate="yes" xml:space="preserve">
          <source>0.0e+NaN</source>
          <target state="translated">0.0e+NaN</target>
        </trans-unit>
        <trans-unit id="79854e52752d02d886cecd248ab4073d810e3072" translate="yes" xml:space="preserve">
          <source>0X</source>
          <target state="translated">0X</target>
        </trans-unit>
        <trans-unit id="1a349dcc540a3978584510d982075f838b17cd6d" translate="yes" xml:space="preserve">
          <source>0x</source>
          <target state="translated">0x</target>
        </trans-unit>
        <trans-unit id="3eb8a90885d8f08dbcb4bfc386c68bf8b5895e42" translate="yes" xml:space="preserve">
          <source>1 min</source>
          <target state="translated">1 분</target>
        </trans-unit>
        <trans-unit id="18cd3712fcf41d0c1eac4e680abc0719fde3242b" translate="yes" xml:space="preserve">
          <source>1 min 2 sec 3 hour 4 day 5 week 6 fortnight 7 month 8 year</source>
          <target state="translated">1 분 2 초 3 시간 4 일 5 주 6 주 2 주 7 개월 8 년</target>
        </trans-unit>
        <trans-unit id="b805f34e4ae8286300214103187151bcc69f1087" translate="yes" xml:space="preserve">
          <source>1 min 5 sec</source>
          <target state="translated">1 분 5 초</target>
        </trans-unit>
        <trans-unit id="658484f978118fcffcbd5dd045a0837ac46a3bdf" translate="yes" xml:space="preserve">
          <source>1+</source>
          <target state="translated">1+</target>
        </trans-unit>
        <trans-unit id="c8768506501239f7fab1e229fbf2c762ea7060e4" translate="yes" xml:space="preserve">
          <source>1-</source>
          <target state="translated">1-</target>
        </trans-unit>
        <trans-unit id="96b81708e432414e7f04119cf66e0038e375e61a" translate="yes" xml:space="preserve">
          <source>1.0e+INF</source>
          <target state="translated">1.0e+INF</target>
        </trans-unit>
        <trans-unit id="e0a44f4caaca9c2a4127895099aad2c35bbac8bb" translate="yes" xml:space="preserve">
          <source>1.5e2</source>
          <target state="translated">1.5e2</target>
        </trans-unit>
        <trans-unit id="f53b25481e85dc640ed4304089aacd524cbec116" translate="yes" xml:space="preserve">
          <source>126, and the characters between them include all the normal printing characters, (e.g., letters, digits, punctuation, etc.); all these characters are bound to &lt;code&gt;self-insert-command&lt;/code&gt;.</source>
          <target state="translated">126 및 그 사이의 문자에는 모든 일반 인쇄 문자 (예 : 문자, 숫자, 구두점 등)가 포함됩니다. 이 모든 문자는 &lt;code&gt;self-insert-command&lt;/code&gt; 에 바인딩됩니다 .</target>
        </trans-unit>
        <trans-unit id="27a52d6e5c5ddb6850d0526f5687ceb2c9eb938c" translate="yes" xml:space="preserve">
          <source>15.0e+2</source>
          <target state="translated">15.0e+2</target>
        </trans-unit>
        <trans-unit id="5ef72bf91f8254ac2a64a56cb3202c82d2f72b80" translate="yes" xml:space="preserve">
          <source>1value</source>
          <target state="translated">1value</target>
        </trans-unit>
        <trans-unit id="0730a1ea68bdaa5e01fa52d15e69551e40cf7c03" translate="yes" xml:space="preserve">
          <source>23b</source>
          <target state="translated">23b</target>
        </trans-unit>
        <trans-unit id="2cc4e1dc9104676883b5aa72fb69b6028fdf40dd" translate="yes" xml:space="preserve">
          <source>32,</source>
          <target state="translated">32,</target>
        </trans-unit>
        <trans-unit id="05a79f06cf3f67f726dae68d18a2290f6c9a50c9" translate="yes" xml:space="preserve">
          <source>:</source>
          <target state="translated">:</target>
        </trans-unit>
        <trans-unit id="686979267e9da5d4c8ad4b6924620505630e4ca7" translate="yes" xml:space="preserve">
          <source>: &lt;code&gt;lexical-let&lt;/code&gt;, &lt;code&gt;macrolet&lt;/code&gt;, and &lt;code&gt;symbol-macrolet&lt;/code&gt;.</source>
          <target state="translated">: &lt;code&gt;lexical-let&lt;/code&gt; , &lt;code&gt;macrolet&lt;/code&gt; 및 &lt;code&gt;symbol-macrolet&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="40ee31002957968f0f91eb4bcfac390eb980bc86" translate="yes" xml:space="preserve">
          <source>:align-to 0</source>
          <target state="translated">: 0에 정렬</target>
        </trans-unit>
        <trans-unit id="06b2ab1ae934d7be012660f4712efa7122fa0e29" translate="yes" xml:space="preserve">
          <source>:bindtodevice &lt;var&gt;device-name&lt;/var&gt;</source>
          <target state="translated">: bindtodevice &lt;var&gt;device-name&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="94419904883b01a6927eb024d986e83d90db7825" translate="yes" xml:space="preserve">
          <source>:broadcast &lt;var&gt;broadcast-flag&lt;/var&gt;</source>
          <target state="translated">: broadcast &lt;var&gt;broadcast-flag&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="cc455516b52f9a9ce367ead04ad9701928d3ec46" translate="yes" xml:space="preserve">
          <source>:buffer &lt;var&gt;buffer&lt;/var&gt;</source>
          <target state="translated">: 버퍼 &lt;var&gt;buffer&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="abfcb809caa604adc590f3687175c98edad0cbc3" translate="yes" xml:space="preserve">
          <source>:capability-command</source>
          <target state="translated">:capability-command</target>
        </trans-unit>
        <trans-unit id="69971d9acd038eca21ffe9464cee50780c5a8bd9" translate="yes" xml:space="preserve">
          <source>:coding &lt;var&gt;coding&lt;/var&gt;</source>
          <target state="translated">: 코딩 &lt;var&gt;coding&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="a96cc2afdbc17a8c5b066c48df6623ebcc405409" translate="yes" xml:space="preserve">
          <source>:command &lt;var&gt;command&lt;/var&gt;</source>
          <target state="translated">: 명령 &lt;var&gt;command&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="bf2fbbba4ce1298f81a19a5eab503f3d10523f52" translate="yes" xml:space="preserve">
          <source>:connection-type &lt;var&gt;type&lt;/var&gt;</source>
          <target state="translated">: 연결 유형 &lt;var&gt;type&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="002df618c8fe131f8e5e1438d70618a95dea94a7" translate="yes" xml:space="preserve">
          <source>:dontroute &lt;var&gt;dontroute-flag&lt;/var&gt;</source>
          <target state="translated">: dontroute &lt;var&gt;dontroute-flag&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="0af505286f7f7820ff04b8d8fecfff964428ba41" translate="yes" xml:space="preserve">
          <source>:family &lt;var&gt;family&lt;/var&gt;</source>
          <target state="translated">: 가족 &lt;var&gt;family&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="5e3342710cfcf858961d9e51d8e92b7d7579d258" translate="yes" xml:space="preserve">
          <source>:file-handler &lt;var&gt;file-handler&lt;/var&gt;</source>
          <target state="translated">: 파일 처리기 &lt;var&gt;file-handler&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="f10b29323191dcc64eddf1db11977dd7492ecc03" translate="yes" xml:space="preserve">
          <source>:filter &lt;var&gt;filter&lt;/var&gt;</source>
          <target state="translated">: 필터 &lt;var&gt;filter&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="a68ccd576a4715e68d844f3f6da2743b9c41b22a" translate="yes" xml:space="preserve">
          <source>:filter-multibyte &lt;var&gt;multibyte&lt;/var&gt;</source>
          <target state="translated">: 필터 멀티 &lt;var&gt;multibyte&lt;/var&gt; 멀티 바이트</target>
        </trans-unit>
        <trans-unit id="693a7120b632aacaa3b5f1a0984898dee6fdd376" translate="yes" xml:space="preserve">
          <source>:host &lt;var&gt;host&lt;/var&gt;</source>
          <target state="translated">: 호스트 &lt;var&gt;host&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="4ba19e2f71a6d15372664d787de00cb7f44150a3" translate="yes" xml:space="preserve">
          <source>:keepalive &lt;var&gt;keepalive-flag&lt;/var&gt;</source>
          <target state="translated">: keepalive &lt;var&gt;keepalive-flag&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="5c9b811c8bcf49f557ef432e6822086fdc7caf8d" translate="yes" xml:space="preserve">
          <source>:linger &lt;var&gt;linger-arg&lt;/var&gt;</source>
          <target state="translated">: linger &lt;var&gt;linger-arg&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="c317142f4ed8008d1706d5b4d5ebfdc7b979a377" translate="yes" xml:space="preserve">
          <source>:local &lt;var&gt;local-address&lt;/var&gt;</source>
          <target state="translated">: 로컬 &lt;var&gt;local-address&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="040a5b3baddb43fa16ba824983caee445ffa0e37" translate="yes" xml:space="preserve">
          <source>:log &lt;var&gt;log&lt;/var&gt;</source>
          <target state="translated">: log &lt;var&gt;log&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="8a7f34685b9a9391287a0b3faed05f1e418720eb" translate="yes" xml:space="preserve">
          <source>:name &lt;var&gt;name&lt;/var&gt;</source>
          <target state="translated">: 이름 &lt;var&gt;name&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="c1741ed5abc6d8dda267d87b408ce574177b6427" translate="yes" xml:space="preserve">
          <source>:noquery &lt;var&gt;query-flag&lt;/var&gt;</source>
          <target state="translated">: noquery &lt;var&gt;query-flag&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="66948ec55ea5b8f5e05d36d5ee74e530cb37875a" translate="yes" xml:space="preserve">
          <source>:nowait &lt;var&gt;bool&lt;/var&gt;</source>
          <target state="translated">: nowait &lt;var&gt;bool&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="630d54f26f290e46f025fee907b7e839b191e428" translate="yes" xml:space="preserve">
          <source>:oobinline &lt;var&gt;oobinline-flag&lt;/var&gt;</source>
          <target state="translated">: oobinline &lt;var&gt;oobinline-flag&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="6ad2ef94214dbc0f97577fc7d429c822ffc5d857" translate="yes" xml:space="preserve">
          <source>:plist &lt;var&gt;plist&lt;/var&gt;</source>
          <target state="translated">: plist &lt;var&gt;plist&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="4dc2e6100fc48ffcd5a6f346febaeef11a3d9b69" translate="yes" xml:space="preserve">
          <source>:priority &lt;var&gt;priority&lt;/var&gt;</source>
          <target state="translated">: 우선 &lt;var&gt;priority&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="8275f6dacc343622b2b7d5bc4ffbca327bfd9f1b" translate="yes" xml:space="preserve">
          <source>:remote &lt;var&gt;remote-address&lt;/var&gt;</source>
          <target state="translated">: 원격 &lt;var&gt;remote-address&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="62a3a1ccb1692695cb63c5cdfb140254ed7cd3f7" translate="yes" xml:space="preserve">
          <source>:reuseaddr &lt;var&gt;reuseaddr-flag&lt;/var&gt;</source>
          <target state="translated">: reuseaddr 재사용 &lt;var&gt;reuseaddr-flag&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="f033a7c5f1f67c3c092625af8cb229d9b0d91fb0" translate="yes" xml:space="preserve">
          <source>:sentinel &lt;var&gt;sentinel&lt;/var&gt;</source>
          <target state="translated">: 보초 &lt;var&gt;sentinel&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="5430b870212b2d41c84bbdb2bf3970307429aea5" translate="yes" xml:space="preserve">
          <source>:server &lt;var&gt;server-flag&lt;/var&gt;</source>
          <target state="translated">: 서버 &lt;var&gt;server-flag&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="7c54002f57a058c7bd294ef92d9f45fcf3b53bd3" translate="yes" xml:space="preserve">
          <source>:service &lt;var&gt;service&lt;/var&gt;</source>
          <target state="translated">: 서비스 &lt;var&gt;service&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="52ac3afb89aec9d4328b970c3efc2ef579887474" translate="yes" xml:space="preserve">
          <source>:stderr &lt;var&gt;stderr&lt;/var&gt;</source>
          <target state="translated">: stderr &lt;var&gt;stderr&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="df7f14baba2db19cbb14466a356a1ea6e49d0891" translate="yes" xml:space="preserve">
          <source>:stop &lt;var&gt;stopped&lt;/var&gt;</source>
          <target state="translated">: 정지 &lt;var&gt;stopped&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="c0787384dc28b5bfeff1e4be66d825dde3d88647" translate="yes" xml:space="preserve">
          <source>:success</source>
          <target state="translated">:success</target>
        </trans-unit>
        <trans-unit id="a3248cab13383ae1d63eb9acc0f857d018e6f981" translate="yes" xml:space="preserve">
          <source>:tls-parameters</source>
          <target state="translated">:tls-parameters</target>
        </trans-unit>
        <trans-unit id="f51a4ea8d4341d7c62aa0896a05006d78d350e6d" translate="yes" xml:space="preserve">
          <source>:type &lt;var&gt;type&lt;/var&gt;</source>
          <target state="translated">: 유형 &lt;var&gt;type&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="69be668ac7ab45003f7aad02b655a486d76f1041" translate="yes" xml:space="preserve">
          <source>:use-external-socket &lt;var&gt;use-external-socket&lt;/var&gt;</source>
          <target state="translated">: use-external-socket &lt;var&gt;use-external-socket&lt;/var&gt; 사용</target>
        </trans-unit>
        <trans-unit id="b05656c08d7ab767fee43f538b3b9d8c2e174064" translate="yes" xml:space="preserve">
          <source>; because filenames can contain spaces. The function &lt;code&gt;read-file-name&lt;/code&gt; combines this keymap with either &lt;code&gt;minibuffer-local-completion-map&lt;/code&gt; or &lt;code&gt;minibuffer-local-must-match-map&lt;/code&gt;.</source>
          <target state="translated">; 파일 이름에 공백이 포함될 수 있기 때문입니다. &lt;code&gt;read-file-name&lt;/code&gt; 함수 는이 키맵을 &lt;code&gt;minibuffer-local-completion-map&lt;/code&gt; 또는 &lt;code&gt;minibuffer-local-must-match-map&lt;/code&gt; 과 결합합니다 .</target>
        </trans-unit>
        <trans-unit id="850c15f3fa85d86d20b68663e13efe43a1a41188" translate="yes" xml:space="preserve">
          <source>; but for keyboard input purposes, you can turn any character into a control character with &amp;lsquo;</source>
          <target state="translated">; 그러나 키보드 입력을 위해 '를 사용하여 모든 문자를 제어 문자로 바꿀 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="73ea0cea742a3db6ec3c431020f69339a5e3b558" translate="yes" xml:space="preserve">
          <source>; but they are evaluated in the context outside of Edebug.</source>
          <target state="translated">; 그러나 그들은 Edebug 외부의 컨텍스트에서 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="dfd9d0ecb96384cfbf0c3941bf53363cec430cf8" translate="yes" xml:space="preserve">
          <source>; if neither file exists, Emacs will create</source>
          <target state="translated">; 두 파일이 모두 존재하지 않으면 Emacs는</target>
        </trans-unit>
        <trans-unit id="60522d957b18879e8563e5360ed6913eb48199c8" translate="yes" xml:space="preserve">
          <source>; if such a buffer does not exist, it is first created.</source>
          <target state="translated">; 그러한 버퍼가 존재하지 않으면 먼저 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="8c757a33edcb033f1030119f1cb438615b02bc52" translate="yes" xml:space="preserve">
          <source>; if the value is a number,</source>
          <target state="translated">; 값이 숫자이면</target>
        </trans-unit>
        <trans-unit id="cece8767090f8fbec9bbca7b3c6458fcf1d69bc0" translate="yes" xml:space="preserve">
          <source>; in a nutshell, the first character in a paragraph that has an explicit directionality determines the base direction of the paragraph. However, sometimes a buffer may need to force a certain base direction for its paragraphs. For example, buffers containing program source code should force all paragraphs to be displayed left-to-right. You can use following variable to do this:</source>
          <target state="translated">; 간단히 말해서, 명시적인 방향성이있는 단락의 첫 번째 문자가 단락의 기본 방향을 결정합니다. 그러나 때때로 버퍼는 단락에 대해 특정 기본 방향을 강제해야 할 수 있습니다. 예를 들어, 프로그램 소스 코드를 포함하는 버퍼는 모든 단락이 왼쪽에서 오른쪽으로 표시되도록해야합니다. 이를 위해 다음 변수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a076f7afa562b44c53c4203c05631ef27627a9d1" translate="yes" xml:space="preserve">
          <source>; it is the functional equivalent of the &lt;code&gt;Lisp_Object&lt;/code&gt; type used in Emacs C primitives (see &lt;a href=&quot;writing-emacs-primitives#Writing-Emacs-Primitives&quot;&gt;Writing Emacs Primitives&lt;/a&gt;). This section describes the parts of the module</source>
          <target state="translated">; Emacs C 프리미티브에서 사용되는 &lt;code&gt;Lisp_Object&lt;/code&gt; 유형 과 기능적으로 동일합니다 ( &lt;a href=&quot;writing-emacs-primitives#Writing-Emacs-Primitives&quot;&gt;Emacs 프리미티브 작성&lt;/a&gt; 참조 ). 이 섹션에서는 모듈의 일부를 설명합니다.</target>
        </trans-unit>
        <trans-unit id="c6261eb921e3e265e24a0f8ecaa56fe3c2a3322f" translate="yes" xml:space="preserve">
          <source>; they tell &lt;code&gt;make-docfile&lt;/code&gt; to put the documentation string in the</source>
          <target state="translated">; 그들은 말할 &lt;code&gt;make-docfile&lt;/code&gt; 에서 문서 문자열을 넣어</target>
        </trans-unit>
        <trans-unit id="71af3a99d714ad2fe85d56e631bdea4cf4d950b6" translate="yes" xml:space="preserve">
          <source>;;; Commentary:</source>
          <target state="translated">;;; 해설:</target>
        </trans-unit>
        <trans-unit id="8f84e2b6e48f86dfa7bce8ca1ad38eb966945aae" translate="yes" xml:space="preserve">
          <source>;;;###autoload</source>
          <target state="translated">;;;###autoload</target>
        </trans-unit>
        <trans-unit id="eac858a1a2a92559fd14a2a67a2f33fba7b2b8d8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#FOOT10&quot; name=&quot;DOCF10&quot;&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt;. A file by that name in a directory causes Emacs to apply its settings to any file in that directory or any of its subdirectories (optionally, you can exclude subdirectories; see below). If some of the subdirectories have their own</source>
          <target state="translated">&lt;a href=&quot;#FOOT10&quot; name=&quot;DOCF10&quot;&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt; . 디렉토리에있는 해당 이름의 파일은 Emacs가 해당 디렉토리 또는 하위 디렉토리에있는 모든 파일에 설정을 적용하도록합니다 (선택적으로 하위 디렉토리를 제외 할 수 있습니다. 아래 참조). 일부 하위 디렉터리에 자체</target>
        </trans-unit>
        <trans-unit id="7d5c3733b2b97d204545bd541ceb9ba2260298b5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; Common Lisp allows the function to specify what default value to use when an optional argument is omitted; Emacs Lisp always uses &lt;code&gt;nil&lt;/code&gt;. Emacs Lisp does not support &lt;code&gt;supplied-p&lt;/code&gt; variables that tell you whether an argument was explicitly passed.</source>
          <target state="translated">&lt;b&gt;Common Lisp 참고 :&lt;/b&gt; Common Lisp를 사용하면 선택적 인수가 생략 될 때 사용할 기본값을 함수에서 지정할 수 있습니다. Emacs Lisp는 항상 &lt;code&gt;nil&lt;/code&gt; 을 사용합니다 . Emacs Lisp는 인수가 명시 적으로 전달되었는지 여부를 알려주 는 &lt;code&gt;supplied-p&lt;/code&gt; 변수를 지원하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="6367857ee9e29c4473084381a801ec8349aeb22c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; Common Lisp defines another way to specify the &lt;code&gt;setf&lt;/code&gt; behavior of a function, namely &lt;code&gt;setf&lt;/code&gt; functions, whose names are lists &lt;code&gt;(setf &lt;var&gt;name&lt;/var&gt;)&lt;/code&gt; rather than symbols. For example, &lt;code&gt;(defun (setf foo) &amp;hellip;)&lt;/code&gt; defines the function that is used when &lt;code&gt;setf&lt;/code&gt; is applied to &lt;code&gt;foo&lt;/code&gt;. Emacs does not support this. It is a compile-time error to use &lt;code&gt;setf&lt;/code&gt; on a form that has not already had an appropriate expansion defined. In Common Lisp, this is not an error since the function &lt;code&gt;(setf
&lt;var&gt;func&lt;/var&gt;)&lt;/code&gt; might be defined later.</source>
          <target state="translated">&lt;b&gt;Common Lisp 참고 :&lt;/b&gt; Common Lisp는 이름이 기호가 아닌 목록 &lt;code&gt;(setf &lt;var&gt;name&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;name&lt;/var&gt; ) 인 함수, 즉 &lt;code&gt;setf&lt;/code&gt; 함수 의 &lt;code&gt;setf&lt;/code&gt; 동작 을 지정하는 또 다른 방법을 정의합니다 . 예를 들어, &lt;code&gt;(defun (setf foo) &amp;hellip;)&lt;/code&gt; 는 &lt;code&gt;setf&lt;/code&gt; 가 &lt;code&gt;foo&lt;/code&gt; 에 적용될 때 사용되는 함수를 정의합니다 . Emacs는 이것을 지원하지 않습니다. 적절한 확장이 정의되지 않은 양식에서 &lt;code&gt;setf&lt;/code&gt; 를 사용하는 것은 컴파일 타임 오류 입니다. Common Lisp에서는 함수 &lt;code&gt;(setf &lt;var&gt;func&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;func&lt;/var&gt; ) 가 나중에 정의 될 수 있으므로 오류가 아닙니다 .</target>
        </trans-unit>
        <trans-unit id="b553724505c7b2ff9cd2dd0f6f26179f25ff53d9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; Common Lisp has functions &lt;code&gt;union&lt;/code&gt; (which avoids duplicate elements) and &lt;code&gt;intersection&lt;/code&gt; for set operations. In Emacs Lisp, variants of these facilities are provided by the</source>
          <target state="translated">&lt;b&gt;Common Lisp 참고 :&lt;/b&gt; Common Lisp에는 집합 작업에 대한 함수 &lt;code&gt;union&lt;/code&gt; (중복 요소 방지) 및 &lt;code&gt;intersection&lt;/code&gt; 가 있습니다. Emacs Lisp에서 이러한 기능의 변형은</target>
        </trans-unit>
        <trans-unit id="22015162b0b6cf562a348be322a99274ab88223c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; Common Lisp uses functions &lt;code&gt;rplaca&lt;/code&gt; and &lt;code&gt;rplacd&lt;/code&gt; to alter list structure; they change structure the same way as &lt;code&gt;setcar&lt;/code&gt; and &lt;code&gt;setcdr&lt;/code&gt;, but the Common Lisp functions return the cons cell while &lt;code&gt;setcar&lt;/code&gt; and &lt;code&gt;setcdr&lt;/code&gt; return the new &lt;small&gt;CAR&lt;/small&gt; or &lt;small&gt;CDR&lt;/small&gt;.</source>
          <target state="translated">&lt;b&gt;Common Lisp 참고 :&lt;/b&gt; Common Lisp는 &lt;code&gt;rplaca&lt;/code&gt; 및 &lt;code&gt;rplacd&lt;/code&gt; 함수를 사용 하여 목록 구조를 변경합니다. 그들은 구조를 같은 방법으로 변경 &lt;code&gt;setcar&lt;/code&gt; 및 &lt;code&gt;setcdr&lt;/code&gt; 을 하지만, CL의 기능은 단점 셀 동안 돌아 &lt;code&gt;setcar&lt;/code&gt; 을 하고 &lt;code&gt;setcdr&lt;/code&gt; 새로운 돌아 &lt;small&gt;CAR&lt;/small&gt; 나 &lt;small&gt;CDR을&lt;/small&gt; .</target>
        </trans-unit>
        <trans-unit id="ebb79170f9f6008be3b36f4402d4c4ffd7c7d3eb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; Emacs Lisp has nothing like the Common Lisp concept of continuable errors.</source>
          <target state="translated">&lt;b&gt;Common Lisp 참고 :&lt;/b&gt; Emacs Lisp에는 지속 가능한 오류의 Common Lisp 개념과 같은 것이 없습니다.</target>
        </trans-unit>
        <trans-unit id="e1c1987c8ae7965c8aeef374c399a5aba221a9db" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; Here are some comparisons of special forms in GNU Emacs Lisp and Common Lisp. &lt;code&gt;setq&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, and &lt;code&gt;catch&lt;/code&gt; are special forms in both Emacs Lisp and Common Lisp. &lt;code&gt;save-excursion&lt;/code&gt; is a special form in Emacs Lisp, but doesn&amp;rsquo;t exist in Common Lisp. &lt;code&gt;throw&lt;/code&gt; is a special form in Common Lisp (because it must be able to throw multiple values), but it is a function in Emacs Lisp (which doesn&amp;rsquo;t have multiple values).</source>
          <target state="translated">&lt;b&gt;Common Lisp 참고 :&lt;/b&gt; 다음은 GNU Emacs Lisp와 Common Lisp의 특수 형식 비교입니다. &lt;code&gt;setq&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt; 및 &lt;code&gt;catch&lt;/code&gt; 는 Emacs Lisp 및 Common Lisp 모두에서 특수한 형식입니다. &lt;code&gt;save-excursion&lt;/code&gt; 은 Emacs Lisp의 특별한 형식이지만 Common Lisp에는 존재하지 않습니다. &lt;code&gt;throw&lt;/code&gt; 는 Common Lisp의 특별한 형식입니다 (여러 값을 던질 수 있어야하기 때문). 그러나 Emacs Lisp의 함수입니다 (여러 값이 없음).</target>
        </trans-unit>
        <trans-unit id="461775aaf52be2a8f8b9da187f5469e279a12664" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; In Common Lisp a similar function is called &lt;code&gt;sxhash&lt;/code&gt;. Emacs provides this name as a compatibility alias for &lt;code&gt;sxhash-equal&lt;/code&gt;.</source>
          <target state="translated">&lt;b&gt;Common Lisp 참고 :&lt;/b&gt; Common Lisp에서 유사한 함수를 &lt;code&gt;sxhash&lt;/code&gt; 라고 합니다 . Emacs는이 이름을 &lt;code&gt;sxhash-equal&lt;/code&gt; 의 호환성 별칭으로 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="1e6ce144f4e2ab72dfb3bf32261406e5ea16e7d1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; In Common Lisp, &lt;code&gt;clrhash&lt;/code&gt; returns the empty &lt;var&gt;table&lt;/var&gt;. In Emacs Lisp, it returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;b&gt;Common Lisp 참고 :&lt;/b&gt; Common Lisp에서 &lt;code&gt;clrhash&lt;/code&gt; 는 빈 &lt;var&gt;table&lt;/var&gt; 반환 합니다 . Emacs Lisp에서는 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="883fddb1102b92cffd11c402a566a42b36bdc655" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; In Common Lisp, &lt;code&gt;remhash&lt;/code&gt; returns non-&lt;code&gt;nil&lt;/code&gt; if it actually removed an association and &lt;code&gt;nil&lt;/code&gt; otherwise. In Emacs Lisp, &lt;code&gt;remhash&lt;/code&gt; always returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;b&gt;Common Lisp 참고 :&lt;/b&gt; Common Lisp에서 &lt;code&gt;remhash&lt;/code&gt; 는 실제로 연결을 제거하면 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값을 반환 하고 그렇지 않으면 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다. Emacs Lisp에서 &lt;code&gt;remhash&lt;/code&gt; 는 항상 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="bbcea5c9de01b724f73c8bdf1b9a568d2ece9b4d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; In Common Lisp, lower case letters are always folded to upper case, unless they are explicitly escaped. In Emacs Lisp, upper case and lower case letters are distinct.</source>
          <target state="translated">&lt;b&gt;Common Lisp 참고 :&lt;/b&gt; Common Lisp에서 소문자는 명시 적으로 이스케이프되지 않는 한 항상 대문자로 접 힙니다. Emacs Lisp에서는 대문자와 소문자가 구별됩니다.</target>
        </trans-unit>
        <trans-unit id="4448631a5e3f6b8bdf37d289aa6b1dfc59dbc1a4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; In Common Lisp, you can intern an existing symbol in an obarray. In Emacs Lisp, you cannot do this, because the argument to &lt;code&gt;intern&lt;/code&gt; must be a string, not a symbol.</source>
          <target state="translated">&lt;b&gt;Common Lisp 참고 :&lt;/b&gt; Common Lisp에서는 obarray의 기존 기호를 인턴 할 수 있습니다. Emacs Lisp에서는 &lt;code&gt;intern&lt;/code&gt; 에 대한 인수가 기호가 아닌 문자열이어야 하므로이를 수행 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="35bdc599b057feab1fdbac7138b61708594fbf48" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; Most other versions of Lisp, including Common Lisp, have several ways of transferring control nonsequentially: &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;return-from&lt;/code&gt;, and &lt;code&gt;go&lt;/code&gt;, for example. Emacs Lisp has only &lt;code&gt;throw&lt;/code&gt;. The</source>
          <target state="translated">&lt;b&gt;Common Lisp 참고 : Common Lisp를&lt;/b&gt; 포함한 대부분의 다른 Lisp 버전에는 제어를 비 순차적으로 전송하는 여러 가지 방법이 있습니다. 예를 들어 &lt;code&gt;return&lt;/code&gt; , &lt;code&gt;return-from&lt;/code&gt; , &lt;code&gt;go&lt;/code&gt; . 이맥스 리스프는있다 &lt;code&gt;throw&lt;/code&gt; . 그만큼</target>
        </trans-unit>
        <trans-unit id="0a28db1ab06daa4ba2de19e43209b90772c24bbf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; The functions &lt;code&gt;member&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt; and &lt;code&gt;remove&lt;/code&gt; in GNU Emacs Lisp are derived from Maclisp, not Common Lisp. The Common Lisp versions do not use &lt;code&gt;equal&lt;/code&gt; to compare elements.</source>
          <target state="translated">&lt;b&gt;Common Lisp 참고 :&lt;/b&gt; GNU Emacs Lisp의 &lt;code&gt;member&lt;/code&gt; , &lt;code&gt;delete&lt;/code&gt; 및 &lt;code&gt;remove&lt;/code&gt; 함수 는 Common Lisp가 아닌 Maclisp에서 파생되었습니다. Common Lisp 버전은 요소를 비교 하기 위해 &lt;code&gt;equal&lt;/code&gt; 을 사용하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="481b03630d7d1963a68afcb9aa760048b4e87a17" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; Unlike Common Lisp, Emacs Lisp does not provide for interning a single symbol in several obarrays.</source>
          <target state="translated">&lt;b&gt;Common Lisp 참고 :&lt;/b&gt; Common Lisp와 달리 Emacs Lisp는 여러 오바 레이에서 단일 기호를 인턴하는 기능을 제공하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8bff408889e4337d00cf240d84d8156cfe8464c4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Common Lisp note:&lt;/b&gt; Unlike other Lisps, GNU Emacs Lisp does not call the garbage collector when the free list is empty. Instead, it simply requests the operating system to allocate more storage, and processing continues until &lt;code&gt;gc-cons-threshold&lt;/code&gt; bytes have been used.</source>
          <target state="translated">&lt;b&gt;Common Lisp 참고 :&lt;/b&gt; 다른 Lisps와 달리 GNU Emacs Lisp는 사용 가능한 목록이 비어있을 때 가비지 수집기를 호출하지 않습니다. 대신 운영 체제에 더 많은 스토리지를 할당하도록 요청하고 &lt;code&gt;gc-cons-threshold&lt;/code&gt; 바이트가 사용될 때까지 처리가 계속 됩니다.</target>
        </trans-unit>
        <trans-unit id="2777476ce485422646e2c57bff88f755808cde88" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Completion&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Completion&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="677fe5061c3339a3af7e2fcddfa71f830896e1f9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Default&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Default&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="644966ccd81f72102c8b8359c223d687f6a87adf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Existing&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Existing&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="d6475c26f45a98f3c2a9c7476df7ac9e61a68fba" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;No I/O&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;I / O 없음&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="517425362cbb54fe23154f4b6072a55c40083eab" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Prompt&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Prompt&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="7bbc5663e059ef4b86f48f96a3cf6a6ccdee95f4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Special&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Special&lt;/b&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
