<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="elisp">
    <body>
      <group id="elisp">
        <trans-unit id="896ab34550a7492756e323bef2ff216fb8497103" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;switch-to-buffer-in-dedicated-window&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;전용 창에서 버퍼로 전환&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3798a9a233f35f6cde0cd69ea78cbd23c345a1b9" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;switch-to-buffer-obey-display-actions&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;버퍼-순종-디스플레이-액션 전환&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a143024cb4b6228295e787e286c2c6267de0b7d6" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;switch-to-buffer-preserve-window-point&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;버퍼 유지 창 지점으로 전환&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e68ec057fc0b9e3146c14ce7808504b31ff9a7db" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;switch-to-prev-buffer-skip&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;이전 버퍼 건너 뛰기로 전환&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f7839e796b54df17769fe69391454ca9db84d40a" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;tab-always-indent&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;탭-항상 들여 쓰기&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e652f8e5f07d16b1a40334c3bc7373d186d0de80" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;tab-stop-list&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;탭 중지 목록&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="79d223b0d15d829694c113dd790eb3276d3f881b" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;tab-width&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;탭 너비&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="52a26745bca4eb7bc5f2b5c7c5f72771e117b9b6" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;tabulated-list-gui-sort-indicator-asc&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;tabulated-list-gui-sort-indicator-asc&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f6efdb80f3960f3082272ebb78968b22d0fc7357" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;tabulated-list-gui-sort-indicator-desc&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;tabulated-list-gui-sort-indicator-desc&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bfb5cd49ebc3ad8078e8d8838e0362559e800df1" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;tabulated-list-tty-sort-indicator-asc&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;tabulated-list-tty-sort-indicator-asc&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c97f196bfec167b4f18a4d093d9e198e3dc51542" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;tabulated-list-tty-sort-indicator-desc&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;tabulated-list-tty-sort-indicator-desc&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b7ae21690300459c3b5e7bfca879d16189bcfaaf" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;temp-buffer-max-height&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;temp-buffer-max-height&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fae0b229d78fabd9aa64607e2acd4cda493f6c29" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;temp-buffer-max-width&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;temp-buffer-max-width&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f0bbd29a3cafe0aab90cd939d78b9a72d951ac7e" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;temp-buffer-resize-mode&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;temp-buffer-resize-mode&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="80ac221c7a8fa6d33e76cdb4923156022cac0e2b" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;temp-buffer-show-function&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;temp-buffer-show-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5c6dbae4864415e056792bece71e17287a4bc3cf" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;temporary-file-directory&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;임시 파일 디렉토리&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="158ff1d824dbf0cb8f872a727a5768694ba90c36" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;term-file-aliases&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;용어 파일 별칭&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f30eb96004f9bf4382b0a6ab5b624ece0c3d3201" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;term-file-prefix&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;용어 파일 접두사&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e398d9159d118db283fb9aec57fd618415718382" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;text-quoting-style&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;텍스트 인용 스타일&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b300ae39b452fc803b0523327f30959605ebc0fe" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;three-step-help&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;3 단계 도움말&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5b5c5c70a4a56ff9ab74ad77acffa2f11467f844" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;timer-max-repeats&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;timer-max-repeats&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2fc2a22a8e359b5ac0a4852ad4cfcff1bb7e601f" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;tooltip-frame-parameters&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;tooltip-frame-parameters&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d47ff3a2f50e36a97b4ad7cbc9408b6bd5fd7f97" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;transient-mark-mode&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;과도 표시 모드&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b9dd7936ee0951639bf0fd3e0effaa4496a105d2" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;truncate-lines&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;줄 자르기&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="072be005f3102f99e2a41226d54ad91c16668f32" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;truncate-partial-width-windows&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;truncate-partial-width-windows&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1a3405291198f09371d3cb55d4e63e56bfeacf52" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;underline-minimum-offset&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;밑줄 최소 오프셋&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="40e4bfc8dfdb0e6a063c7aa9f58669568c3cef91" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;undo-ask-before-discard&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;undo-ask-before-discard&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="11bafcfd995818dad19da4797a111aab176e3cdf" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;undo-limit&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;실행 취소 제한&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3fa5f1b1aa067c429149e6db67333067b262f7db" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;undo-outer-limit&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;undo-outer-limit&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="74b2d3bae0a1cffb0386c84f322370bf9a8a9ab2" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;undo-strong-limit&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;undo-strong-limit&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9912767bf86a847037ecaaa22fa1c2fea232e3b3" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;user-mail-address&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;사용자 메일 주소&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c96a62ba733c08a38da4667b78490e9f2ffda758" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;version-control&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;버전 제어&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7d3a9ce2bcdb48275ccdaa93d12c868d9bf33af7" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;visible-bell&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;보이는 종&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="18d36ee66aa82f89bb8eddb4f3290cb1f6720ddb" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;void-text-area-pointer&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;void-text-area-pointer&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2f1e938519e13f216a3504489f3bb280dbb7c635" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;warning-minimum-level&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;경고 최소 수준&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d83b4b1937e016912ce72bc306f4c08856a7cad1" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;warning-minimum-log-level&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;경고 최소 로그 수준&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e928cc30beba638abb1c494ce1225cc5b3353089" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;warning-suppress-log-types&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;경고 억제 로그 유형&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fba4d2f39ad852a4f3609d0684e4f62533ff2deb" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;warning-suppress-types&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;경고 억제 유형&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="53de0c555da42bc2fe8aa3e2f723c67952632ec7" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;window-adjust-process-window-size-function&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;window-adjust-process-window-size-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0b792d6805d6b6dd41d5b43ee69fa74b80b2d8e5" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;window-combination-limit&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;창 조합 제한&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="187fb24132852740b155c22b64a13a1a09b562a7" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;window-combination-resize&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;창 조합 크기 조정&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1b7a7d3c4ceebe8b031bf8fe14986c101eae04cd" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;window-min-height&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;창 최소 높이&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9164bb10b5ddf9f1bb0e79e8b11619648a12b2a7" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;window-min-width&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;창 최소 너비&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e2b3e88854df7a84c6ddcfdd1cb9c57b28fa4d31" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;window-resize-pixelwise&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;window-resize-pixelwise&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5d89dec3a22b55b593c2e7750a2375300002483d" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;window-sides-reversed&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;창 쪽 반전&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="615ed7728d91858ac0624a248aa03ccc5a31de1d" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;window-sides-slots&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;창쪽 슬롯&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="99bf091e7d31b65627a48aa97e3140fc9a4032dd" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;window-sides-vertical&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;window-sides-vertical&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="de4e17b6d7064f487c214da5878c69325d1038cb" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;words-include-escapes&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;단어 포함 이스케이프&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2c45a675b2c67cc1d4bd06de53d8f87fd76a2534" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;x-bitmap-file-path&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;x-bitmap-file-path&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2dbe2dc654c85ab338898c68de51e878c4a440b1" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;x-stretch-cursor&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;x-stretch-cursor&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8818578254b5734074b99780afe1fa82aa87ca73" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;yank-excluded-properties&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;yank-excluded-properties&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f5ba98f6bdbb94daef0464f8ae60d624a645fe5d" translate="yes" xml:space="preserve">
          <source>User Option: &lt;strong&gt;yank-handled-properties&lt;/strong&gt;</source>
          <target state="translated">사용자 옵션 : &lt;strong&gt;yank-handled-properties&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1de7235e5e18c45e9eee3f7459ead96aa520a838" translate="yes" xml:space="preserve">
          <source>User name corresponding to the process&amp;rsquo;s effective user ID, a string.</source>
          <target state="translated">프로세스의 유효 사용자 ID, 문자열에 해당하는 사용자 이름입니다.</target>
        </trans-unit>
        <trans-unit id="7ea9da211f91ec53882d2cbfad3f68ea513110aa" translate="yes" xml:space="preserve">
          <source>User option descriptions have the same format, but &amp;lsquo;</source>
          <target state="translated">사용자 옵션 설명의 형식은 동일하지만 '</target>
        </trans-unit>
        <trans-unit id="924ea45dba9cfb737de93b201fb9138336e9f0d1" translate="yes" xml:space="preserve">
          <source>User-Chosen Coding Systems</source>
          <target state="translated">사용자가 선택한 코딩 시스템</target>
        </trans-unit>
        <trans-unit id="1e828498ee7c4a1a0818bba472ac957d278b44db" translate="yes" xml:space="preserve">
          <source>User-Level Deletion Commands</source>
          <target state="translated">사용자 수준 삭제 명령</target>
        </trans-unit>
        <trans-unit id="1dfe2708d6ba334c0751034b7ad614ba7d91f9dd" translate="yes" xml:space="preserve">
          <source>User-Level Insertion Commands</source>
          <target state="translated">사용자 수준 삽입 명령</target>
        </trans-unit>
        <trans-unit id="fb5b174bf760eb8257b4356d98745298bae543fe" translate="yes" xml:space="preserve">
          <source>User-defined forms are allowed wherever arbitrary &lt;code&gt;rx&lt;/code&gt; expressions are expected; for example, in the body of a &lt;code&gt;zero-or-one&lt;/code&gt; form, but not inside &lt;code&gt;any&lt;/code&gt; or &lt;code&gt;category&lt;/code&gt; forms. They are also allowed inside &lt;code&gt;not&lt;/code&gt; and &lt;code&gt;intersection&lt;/code&gt; forms.</source>
          <target state="translated">임의의 &lt;code&gt;rx&lt;/code&gt; 표현식이 예상 되는 모든 곳에서 사용자 정의 형식이 허용 됩니다. 예를 들면, 본문에 &lt;code&gt;zero-or-one&lt;/code&gt; 형태가 아니라 내부의 &lt;code&gt;any&lt;/code&gt; 또는 &lt;code&gt;category&lt;/code&gt; 형성한다. &lt;code&gt;not&lt;/code&gt; 및 &lt;code&gt;intersection&lt;/code&gt; 형태 내부에서도 허용됩니다 .</target>
        </trans-unit>
        <trans-unit id="0914d12fede3ba9837cdc0fb8c03368b3883648f" translate="yes" xml:space="preserve">
          <source>User-level commands to delete text.</source>
          <target state="translated">텍스트를 삭제하는 사용자 수준 명령입니다.</target>
        </trans-unit>
        <trans-unit id="760c2e5d6a2ed0b161891b3ed8da3b71c82542f7" translate="yes" xml:space="preserve">
          <source>User-level commands to insert text.</source>
          <target state="translated">텍스트를 삽입하는 사용자 수준 명령입니다.</target>
        </trans-unit>
        <trans-unit id="d8ad8ebea60071702ac3b98801544d46519b4e75" translate="yes" xml:space="preserve">
          <source>User-level facilities such as &lt;code&gt;save-some-buffers&lt;/code&gt; can save abbrevs in a file automatically, under the control of variables described here.</source>
          <target state="translated">&lt;code&gt;save-some-buffers&lt;/code&gt; 와 같은 사용자 수준 기능 은 여기에 설명 된 변수의 제어하에 자동으로 파일에 약어를 저장할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="016dcba589061035865effd67304a44827db53e0" translate="yes" xml:space="preserve">
          <source>Users of Emacs can customize variables and faces without writing Lisp code, by using the Customize interface. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Easy-Customization.html#Easy-Customization&quot;&gt;Easy Customization&lt;/a&gt; in</source>
          <target state="translated">Emacs 사용자는 Customize 인터페이스를 사용하여 Lisp 코드를 작성하지 않고도 변수와 얼굴을 사용자 정의 할 수 있습니다. 보기 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Easy-Customization.html#Easy-Customization&quot;&gt;쉬운 사용자 정의를&lt;/a&gt; 에</target>
        </trans-unit>
        <trans-unit id="1ad707f4715c76ce728310c37e50dc04b9904ff1" translate="yes" xml:space="preserve">
          <source>Users of Emacs can customize variables and faces without writing Lisp code, by using the Customize interface. See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Easy-Customization.html#Easy-Customization&quot;&gt;Easy Customization&lt;/a&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="073cb1a9f02790f1c382d66a5e165fbd879ed812" translate="yes" xml:space="preserve">
          <source>Users should not pose too many and too severe restrictions on how arbitrary buffers get displayed. Otherwise, they will risk to lose the characteristics of showing a buffer for a certain purpose. Suppose a Lisp program has been written to compare different versions of a buffer in two windows side-by-side. If the customization of &lt;code&gt;display-buffer-alist&lt;/code&gt; prescribes that any such buffer should be always shown in or below the selected window, the program will have a hard time to set up the desired window configuration via &lt;code&gt;display-buffer&lt;/code&gt;.</source>
          <target state="translated">사용자는 임의의 버퍼가 표시되는 방식에 대해 너무 많고 너무 심한 제한을 가해서는 안됩니다. 그렇지 않으면 특정 목적을 위해 버퍼를 표시하는 특성을 잃을 위험이 있습니다. 두 개의 창에서 서로 다른 버전의 버퍼를 나란히 비교하기 위해 Lisp 프로그램이 작성되었다고 가정합니다. &lt;code&gt;display-buffer-alist&lt;/code&gt; 의 사용자 정의에서 이러한 버퍼가 항상 선택된 창 안이나 아래에 표시되어야한다고 규정하는 경우 프로그램은 &lt;code&gt;display-buffer&lt;/code&gt; 를 통해 원하는 창 구성을 설정하는 데 어려움을 겪습니다 .</target>
        </trans-unit>
        <trans-unit id="d3ff2b8805121b4b737f60e17ad2a4471c66f3a9" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;define-button-type&lt;/code&gt; to define default properties for buttons is not necessary&amp;mdash;buttons without any specified type use the built-in button-type &lt;code&gt;button&lt;/code&gt;&amp;mdash;but it is encouraged, since doing so usually makes the resulting code clearer and more efficient.</source>
          <target state="translated">사용 &lt;code&gt;define-button-type&lt;/code&gt; 버튼에 대한 기본 속성을 정의하면 내장 된 버튼형 지정된 모든 종류를 사용하지 않고 필요한-버튼 아니다 &lt;code&gt;button&lt;/code&gt; 보통 결과 코드가 명확하고 더 효율적이 그렇게하기 때문에, 권장 -하지만.</target>
        </trans-unit>
        <trans-unit id="507877882630243a7ce7ff32f7d32c64ee159759" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;defvar&lt;/code&gt; without a value, it is possible to bind a variable dynamically just in one file, or in just one part of a file while still binding it lexically elsewhere. For example:</source>
          <target state="translated">값없이 &lt;code&gt;defvar&lt;/code&gt; 를 사용하면 변수를 한 파일에만 동적으로 바인딩하거나 파일의 한 부분에만 동적으로 바인딩하면서 다른 곳에서는 어휘 적으로 바인딩 할 수 있습니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="7e80543e1e49de1a96e62663bd68adf904370039" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;format-alist&lt;/code&gt;.</source>
          <target state="translated">사용 &lt;code&gt;format-alist&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7ccb759ca3677aabfad1af8b10708463e0b51ad0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;make-network-process&lt;/code&gt;.</source>
          <target state="translated">사용 &lt;code&gt;make-network-process&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="db4348769ca897770226b71b32116b0169de0af5" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;save-current-buffer&lt;/code&gt; or &lt;code&gt;with-current-buffer&lt;/code&gt;, as we did, correctly handles quitting, errors, and &lt;code&gt;throw&lt;/code&gt;, as well as ordinary evaluation.</source>
          <target state="translated">사용하는 &lt;code&gt;save-current-buffer&lt;/code&gt; 또는 &lt;code&gt;with-current-buffer&lt;/code&gt; 우리가 그랬던 것처럼, 제대로 핸들, 오류를 종료하고, &lt;code&gt;throw&lt;/code&gt; 뿐만 아니라 일반적인 평가.</target>
        </trans-unit>
        <trans-unit id="f7f934e347d52fbd65d974a6bf9703170eacea74" translate="yes" xml:space="preserve">
          <source>Using Edebug</source>
          <target state="translated">Edebug 사용</target>
        </trans-unit>
        <trans-unit id="4b15083f2f55228225f883511993852a1c781cc9" translate="yes" xml:space="preserve">
          <source>Using Lexical Binding</source>
          <target state="translated">어휘 바인딩 사용</target>
        </trans-unit>
        <trans-unit id="b03b6832c9a810aee38ef3d568c1355d93e602b9" translate="yes" xml:space="preserve">
          <source>Using Lists as Sets</source>
          <target state="translated">목록을 세트로 사용</target>
        </trans-unit>
        <trans-unit id="62c447976c01d9a4f5d0e19fbea8379041fbd394" translate="yes" xml:space="preserve">
          <source>Using a reporter object as the &lt;var&gt;reporter-or-message&lt;/var&gt; argument is useful if you want to specify the optional arguments in &lt;var&gt;make-progress-reporter&lt;/var&gt;. For instance, you can write the previous example as follows:</source>
          <target state="translated">reporter 개체를 &lt;var&gt;reporter-or-message&lt;/var&gt; 인수로 사용하면 &lt;var&gt;make-progress-reporter&lt;/var&gt; 에 선택적 인수를 지정하려는 경우 유용합니다 . 예를 들어, 다음과 같이 이전 예제를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="205f104bb020f38a62085e15c61ad67a762df080" translate="yes" xml:space="preserve">
          <source>Using an alist to specify conversions gives rise to some useful properties:</source>
          <target state="translated">alist를 사용하여 변환을 지정하면 몇 가지 유용한 속성이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="d5e5bba75e7cf96fcaa85285c5cd69704e0d3648" translate="yes" xml:space="preserve">
          <source>Using bindat to pack and unpack binary data.</source>
          <target state="translated">bindat를 사용하여 바이너리 데이터를 압축 및 압축 해제합니다.</target>
        </trans-unit>
        <trans-unit id="1802746be476744aea6b38f0de7463e8ec32dea5" translate="yes" xml:space="preserve">
          <source>Using command aliases in menu items.</source>
          <target state="translated">메뉴 항목에서 명령 별칭 사용.</target>
        </trans-unit>
        <trans-unit id="6feb767b97f9e00ed5b6b489effa8307a4645014" translate="yes" xml:space="preserve">
          <source>Using completion to read file names and shell commands.</source>
          <target state="translated">완성 기능을 사용하여 파일 이름 및 셸 명령을 읽습니다.</target>
        </trans-unit>
        <trans-unit id="bd870a5d90a07a6d28b538e446a4aac640e031cc" translate="yes" xml:space="preserve">
          <source>Using interactive</source>
          <target state="translated">대화 형 사용</target>
        </trans-unit>
        <trans-unit id="afb897c6f70341e0c1fa71a2c50417e796c5ccf9" translate="yes" xml:space="preserve">
          <source>Using pcase patterns to extract subfields.</source>
          <target state="translated">pcase 패턴을 사용하여 서브 필드 추출.</target>
        </trans-unit>
        <trans-unit id="b7f122774f1889c6feb365b1f55c6257fd361088" translate="yes" xml:space="preserve">
          <source>Using symbols in programs to stand for values.</source>
          <target state="translated">프로그램에서 기호를 사용하여 값을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="7b3fece2328c443bec9ec80fb28a0616ec779b0e" translate="yes" xml:space="preserve">
          <source>Using text properties in the mode line.</source>
          <target state="translated">모드 라인에서 텍스트 속성 사용.</target>
        </trans-unit>
        <trans-unit id="4fb999282d5753b2cc18251ca1c23c3341ffbab5" translate="yes" xml:space="preserve">
          <source>Using text properties to make regions of text do something when you click on them.</source>
          <target state="translated">텍스트 속성을 사용하여 텍스트 영역을 클릭 할 때 작업을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="f90be5f76d735c2d7a72679b0a07f29c0c1c2fa8" translate="yes" xml:space="preserve">
          <source>Using the &lt;var&gt;persistent&lt;/var&gt; argument of &lt;code&gt;set-window-scroll-bars&lt;/code&gt; and &lt;code&gt;set-window-fringes&lt;/code&gt; (see &lt;a href=&quot;fringe-size_002fpos#Fringe-Size_002fPos&quot;&gt;Fringe Size/Pos&lt;/a&gt;) you can reliably and permanently turn off scroll bars and/or fringes in any minibuffer window by adding the following snippet to your early init file (see &lt;a href=&quot;init-file#Init-File&quot;&gt;Init File&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;set-window-scroll-bars&lt;/code&gt; 및 &lt;code&gt;set-window-fringes&lt;/code&gt; ( &lt;a href=&quot;fringe-size_002fpos#Fringe-Size_002fPos&quot;&gt;프린지 크기 / 위치&lt;/a&gt; 참조) 의 &lt;var&gt;persistent&lt;/var&gt; 인수를 사용하면 다음 코드 조각을 초기에 추가하여 모든 미니 버퍼 창에서 스크롤 막대 및 / 또는 테두리를 안정적이고 영구적으로 끌 수 있습니다. init 파일 ( &lt;a href=&quot;init-file#Init-File&quot;&gt;Init 파일&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="845af645f6b5ea1d7ffb87dcb9e348ff5e3549a1" translate="yes" xml:space="preserve">
          <source>Using the Debugger</source>
          <target state="translated">디버거 사용</target>
        </trans-unit>
        <trans-unit id="67d5f08a0f0cb5ef571645c16fd7a0663a9e7a84" translate="yes" xml:space="preserve">
          <source>Using the GNU Compiler Collection</source>
          <target state="translated">GNU 컴파일러 컬렉션 사용</target>
        </trans-unit>
        <trans-unit id="a5798d72ad4fcb99b7225108b09ea92cb4ad8bcc" translate="yes" xml:space="preserve">
          <source>Using the first element in &lt;var&gt;coordinate-sets&lt;/var&gt;, draw a cubic B&amp;eacute;zier curve from the current point. If there are multiple coordinate sets, draw a polybezier. Each coordinate set is a list of the form &lt;code&gt;(&lt;var&gt;x1&lt;/var&gt; &lt;var&gt;y1&lt;/var&gt; &lt;var&gt;x2&lt;/var&gt; &lt;var&gt;y2&lt;/var&gt; &lt;var&gt;x&lt;/var&gt; &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt;, where (&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;) is the curve&amp;rsquo;s end point. (&lt;var&gt;x1&lt;/var&gt;, &lt;var&gt;y1&lt;/var&gt;) and (&lt;var&gt;x2&lt;/var&gt;, &lt;var&gt;y2&lt;/var&gt;) are control points at the beginning and at the end, respectively.</source>
          <target state="translated">&lt;var&gt;coordinate-sets&lt;/var&gt; 의 첫 번째 요소를 사용하여 현재 점에서 3 차 베 지어 곡선을 그립니다. 좌표 세트가 여러 개인 경우 폴리 베 지어를 그립니다. 각 좌표 집합은 &lt;code&gt;(&lt;var&gt;x1&lt;/var&gt; &lt;var&gt;y1&lt;/var&gt; &lt;var&gt;x2&lt;/var&gt; &lt;var&gt;y2&lt;/var&gt; &lt;var&gt;x&lt;/var&gt; &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt; 형식의 목록입니다. 여기서 ( &lt;var&gt;x&lt;/var&gt; , &lt;var&gt;y&lt;/var&gt; )는 곡선의 끝점입니다. ( &lt;var&gt;x1&lt;/var&gt; , &lt;var&gt;y1&lt;/var&gt; ) 및 ( &lt;var&gt;x2&lt;/var&gt; , &lt;var&gt;y2&lt;/var&gt; )는 각각 시작과 끝의 제어점입니다.</target>
        </trans-unit>
        <trans-unit id="8607cfbfe7607bcd97cb2731ef458e12b3b2fdd0" translate="yes" xml:space="preserve">
          <source>Using the first element in &lt;var&gt;coordinate-sets&lt;/var&gt;, draw a cubic B&amp;eacute;zier curve from the current point. If there are multiple coordinate sets, draw a polybezier. Each coordinate set is a list of the form &lt;code&gt;(&lt;var&gt;x2&lt;/var&gt; &lt;var&gt;y2&lt;/var&gt; &lt;var&gt;x&lt;/var&gt; &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt;, where (&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;) is the curve&amp;rsquo;s end point and (&lt;var&gt;x2&lt;/var&gt;, &lt;var&gt;y2&lt;/var&gt;) is the corresponding control point. The first control point is the reflection of the second control point of the previous command relative to the current point, if that command was &lt;code&gt;curveto&lt;/code&gt; or &lt;code&gt;smooth-curveto&lt;/code&gt;. Otherwise the first control point coincides with the current point.</source>
          <target state="translated">&lt;var&gt;coordinate-sets&lt;/var&gt; 의 첫 번째 요소를 사용하여 현재 점에서 3 차 베 지어 곡선을 그립니다. 좌표 세트가 여러 개인 경우 폴리 베 지어를 그립니다. 각 좌표 집합은 &lt;code&gt;(&lt;var&gt;x2&lt;/var&gt; &lt;var&gt;y2&lt;/var&gt; &lt;var&gt;x&lt;/var&gt; &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt; 형식의 목록입니다. 여기서 ( &lt;var&gt;x&lt;/var&gt; , &lt;var&gt;y&lt;/var&gt; )는 곡선의 끝 점이고 ( &lt;var&gt;x2&lt;/var&gt; , &lt;var&gt;y2&lt;/var&gt; )는 해당 제어점입니다. 첫 번째 제어점은 해당 명령이 &lt;code&gt;curveto&lt;/code&gt; 또는 &lt;code&gt;smooth-curveto&lt;/code&gt; 인 경우 현재 점을 기준으로 이전 명령의 두 번째 제어점을 반영한 것 입니다. 그렇지 않으면 첫 번째 제어점이 현재 점과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="33c42fd0fe0681d5844e8882c20b96f73ac7ba77" translate="yes" xml:space="preserve">
          <source>Using the first element in &lt;var&gt;coordinate-sets&lt;/var&gt;, draw a quadratic B&amp;eacute;zier curve from the current point. If there are multiple coordinate sets, draw a polybezier. Each coordinate set is a list of the form &lt;code&gt;(&lt;var&gt;x1&lt;/var&gt; &lt;var&gt;y1&lt;/var&gt; &lt;var&gt;x&lt;/var&gt; &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt;, where (&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;) is the curve&amp;rsquo;s end point and (&lt;var&gt;x1&lt;/var&gt;, &lt;var&gt;y1&lt;/var&gt;) is the control point.</source>
          <target state="translated">&lt;var&gt;coordinate-sets&lt;/var&gt; 의 첫 번째 요소를 사용하여 현재 점에서 2 차 베 지어 곡선을 그립니다. 좌표 세트가 여러 개인 경우 폴리 베 지어를 그립니다. 각 좌표 세트는 &lt;code&gt;(&lt;var&gt;x1&lt;/var&gt; &lt;var&gt;y1&lt;/var&gt; &lt;var&gt;x&lt;/var&gt; &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt; 형식의 목록입니다. 여기서 ( &lt;var&gt;x&lt;/var&gt; , &lt;var&gt;y&lt;/var&gt; )는 곡선의 끝 점이고 ( &lt;var&gt;x1&lt;/var&gt; , &lt;var&gt;y1&lt;/var&gt; )은 제어점입니다.</target>
        </trans-unit>
        <trans-unit id="c19dd1f643d1da36df54f9fa72bb47b3c42164f2" translate="yes" xml:space="preserve">
          <source>Using the first element in &lt;var&gt;coordinate-sets&lt;/var&gt;, draw a quadratic B&amp;eacute;zier curve from the current point. If there are multiple coordinate sets, draw a polybezier. Each coordinate set is a list of the form &lt;code&gt;(&lt;var&gt;x&lt;/var&gt; &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt;, where (&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;) is the curve&amp;rsquo;s end point. The control point is the reflection of the control point of the previous command relative to the current point, if that command was &lt;code&gt;quadratic-bezier-curveto&lt;/code&gt; or &lt;code&gt;smooth-quadratic-bezier-curveto&lt;/code&gt;. Otherwise the control point coincides with the current point.</source>
          <target state="translated">&lt;var&gt;coordinate-sets&lt;/var&gt; 의 첫 번째 요소를 사용하여 현재 점에서 2 차 베 지어 곡선을 그립니다. 좌표 세트가 여러 개인 경우 폴리 베 지어를 그립니다. 각 좌표 세트는 &lt;code&gt;(&lt;var&gt;x&lt;/var&gt; &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt; 형식의 목록입니다. 여기서 ( &lt;var&gt;x&lt;/var&gt; , &lt;var&gt;y&lt;/var&gt; )는 곡선의 끝점입니다. 제어점은 해당 명령이 &lt;code&gt;quadratic-bezier-curveto&lt;/code&gt; 또는 &lt;code&gt;smooth-quadratic-bezier-curveto&lt;/code&gt; 인 경우 현재 점을 기준으로 이전 명령의 제어점을 반영한 것 입니다. 그렇지 않으면 제어점이 현재 점과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="78017e08e4c0da9c01bf13555ba41b7cf9c572df" translate="yes" xml:space="preserve">
          <source>Using the first element in &lt;var&gt;coordinate-sets&lt;/var&gt;, draw an elliptical arc from the current point. If there are multiple coordinate sets, draw a sequence of elliptical arcs. Each coordinate set is a list of the form &lt;code&gt;(&lt;var&gt;rx&lt;/var&gt; &lt;var&gt;ry&lt;/var&gt; &lt;var&gt;x&lt;/var&gt; &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt;, where (&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;) is the end point of the ellipse, and (&lt;var&gt;rx&lt;/var&gt;, &lt;var&gt;ry&lt;/var&gt;) are its radii. Attributes may be appended to the list:</source>
          <target state="translated">&lt;var&gt;coordinate-sets&lt;/var&gt; 의 첫 번째 요소를 사용하여 현재 점에서 타원형 호를 그립니다. 여러 좌표 세트가있는 경우 일련의 타원형 호를 그립니다. 각 좌표 집합은 &lt;code&gt;(&lt;var&gt;rx&lt;/var&gt; &lt;var&gt;ry&lt;/var&gt; &lt;var&gt;x&lt;/var&gt; &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt; 형식의 목록입니다. 여기서 ( &lt;var&gt;x&lt;/var&gt; , &lt;var&gt;y&lt;/var&gt; )는 타원의 끝 점이고 ( &lt;var&gt;rx&lt;/var&gt; , &lt;var&gt;ry&lt;/var&gt; )는 반경입니다. 목록에 속성을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7be49b5e5c7a33e195d62a77829135efa43c037e" translate="yes" xml:space="preserve">
          <source>Using the minibuffer to read input.</source>
          <target state="translated">미니 버퍼를 사용하여 입력을 읽습니다.</target>
        </trans-unit>
        <trans-unit id="f7505ee25600083f29457ce4a7ee395181c7cf5d" translate="yes" xml:space="preserve">
          <source>Using the module</source>
          <target state="translated">모듈 사용</target>
        </trans-unit>
        <trans-unit id="8d768b22b5b81aa1c86e79689008416c960b7ad9" translate="yes" xml:space="preserve">
          <source>Using this option may require special privileges on some systems.</source>
          <target state="translated">이 옵션을 사용하려면 일부 시스템에서 특별한 권한이 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b26d9004a1fd1e976a780d938c440fed4f12515f" translate="yes" xml:space="preserve">
          <source>Using this transport, the JSONRPC messages are encoded on the wire as plain text and prefaced by some basic HTTP-style enveloping headers, such as &amp;ldquo;Content-Length&amp;rdquo;.</source>
          <target state="translated">이 전송을 사용하여 JSONRPC 메시지는 와이어에서 일반 텍스트로 인코딩되고 &quot;Content-Length&quot;와 같은 일부 기본 HTTP 스타일 엔 벨로 핑 헤더로 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="2e3bbc57e7ecf30215f79db6fcfe7bca11189b47" translate="yes" xml:space="preserve">
          <source>Usual Display Conventions</source>
          <target state="translated">일반적인 디스플레이 규칙</target>
        </trans-unit>
        <trans-unit id="ad5f0a9ee46915e3da4ecb9449eeff7d4c18cfa4" translate="yes" xml:space="preserve">
          <source>Usual PC monitors have a screen gamma of 2.2, so color values in Emacs, and in X windows generally, are calibrated to display properly on a monitor with that gamma value. If you specify 2.2 for &lt;code&gt;screen-gamma&lt;/code&gt;, that means no correction is needed. Other values request correction, designed to make the corrected colors appear on your screen the way they would have appeared without correction on an ordinary monitor with a gamma value of 2.2.</source>
          <target state="translated">일반적인 PC 모니터의 화면 감마는 2.2이므로 Emacs 및 일반적으로 X 윈도우의 색상 값은 해당 감마 값으로 모니터에 제대로 표시되도록 보정됩니다. &lt;code&gt;screen-gamma&lt;/code&gt; 에 2.2를 지정하면 보정이 필요하지 않습니다. 다른 값은 보정을 요청하며, 감마 값이 2.2 인 일반 모니터에서 보정하지 않고 표시되는 방식으로 보정 된 색상이 화면에 표시되도록 설계되었습니다.</target>
        </trans-unit>
        <trans-unit id="d8a9652e07fdba948c91b8e1799d7dc8298b8437" translate="yes" xml:space="preserve">
          <source>Usually it&amp;rsquo;s best to use &lt;code&gt;overriding-local-map&lt;/code&gt; as the expression for &lt;var&gt;keymap&lt;/var&gt;. Then &lt;code&gt;where-is-internal&lt;/code&gt; searches precisely the keymaps that are active. To search only the global map, pass the value &lt;code&gt;(keymap)&lt;/code&gt; (an empty keymap) as &lt;var&gt;keymap&lt;/var&gt;.</source>
          <target state="translated">일반적으로 &lt;var&gt;keymap&lt;/var&gt; 의 표현식으로 &lt;code&gt;overriding-local-map&lt;/code&gt; 을 사용하는 것이 가장 좋습니다 . 그런 다음 &lt;code&gt;where-is-internal&lt;/code&gt; 은 활성화 된 키맵을 정확하게 검색합니다. 글로벌 맵만 검색하려면 값 &lt;code&gt;(keymap)&lt;/code&gt; (빈 키맵)을 &lt;var&gt;keymap&lt;/var&gt; 으로 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="6c82832b7dd765e152b9fc84537c6ced1bf62aef" translate="yes" xml:space="preserve">
          <source>Usually the value of &lt;code&gt;help-form&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;. Then the help character has no special meaning at the level of command input, and it becomes part of a key sequence in the normal way. The standard key binding of</source>
          <target state="translated">일반적으로 &lt;code&gt;help-form&lt;/code&gt; 의 값 은 &lt;code&gt;nil&lt;/code&gt; 입니다. 그러면 도움말 문자는 명령 입력 수준에서 특별한 의미가 없으며 일반적인 방식으로 키 시퀀스의 일부가됩니다. 표준 키 바인딩</target>
        </trans-unit>
        <trans-unit id="a385e6e4a6245a46630df8ddd8fd2679076ce468" translate="yes" xml:space="preserve">
          <source>Usually this function is called when the next input event arrives after displaying an echo-area message. The function is expected to clear the message displayed by its counterpart function specified by &lt;code&gt;set-message-function&lt;/code&gt;.</source>
          <target state="translated">일반적으로이 함수는 에코 영역 메시지를 표시 한 후 다음 입력 이벤트가 도착할 때 호출됩니다. 이 함수는 &lt;code&gt;set-message-function&lt;/code&gt; 에 지정된 대응 함수에 의해 표시된 메시지를 지울 것으로 예상됩니다 .</target>
        </trans-unit>
        <trans-unit id="f8f11570428f4529fd87952bdb9ba00c3da9a496" translate="yes" xml:space="preserve">
          <source>Usually, a function is implemented as a primitive because it is a fundamental part of Lisp (e.g., &lt;code&gt;car&lt;/code&gt;), or because it provides a low-level interface to operating system services, or because it needs to run fast. Unlike functions defined in Lisp, primitives can be modified or added only by changing the C sources and recompiling Emacs. See &lt;a href=&quot;writing-emacs-primitives#Writing-Emacs-Primitives&quot;&gt;Writing Emacs Primitives&lt;/a&gt;.</source>
          <target state="translated">일반적으로 함수는 Lisp의 기본 부분 (예 : &lt;code&gt;car&lt;/code&gt; )이거나 운영 체제 서비스에 대한 저수준 인터페이스를 제공하거나 빠르게 실행해야하기 때문에 기본 요소로 구현됩니다 . Lisp에 정의 된 함수와 달리, C 소스를 변경하고 Emacs를 다시 컴파일해야만 프리미티브를 수정하거나 추가 할 수 있습니다. &lt;a href=&quot;writing-emacs-primitives#Writing-Emacs-Primitives&quot;&gt;Emacs Primitives 작성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8fbabc42b68953507e477df44ec250d700d7774e" translate="yes" xml:space="preserve">
          <source>Usually, child frames do not exhibit window manager decorations like a title bar or external borders (see &lt;a href=&quot;frame-geometry#Frame-Geometry&quot;&gt;Frame Geometry&lt;/a&gt;). When the child frame does not show a menu or tool bar, any other of the frame&amp;rsquo;s borders (see &lt;a href=&quot;layout-parameters#Layout-Parameters&quot;&gt;Layout Parameters&lt;/a&gt;) can be used instead of the external borders.</source>
          <target state="translated">일반적으로 자식 프레임은 제목 표시 줄이나 외부 테두리와 같은 창 관리자 장식을 표시하지 않습니다 ( &lt;a href=&quot;frame-geometry#Frame-Geometry&quot;&gt;프레임 형상&lt;/a&gt; 참조 ). 하위 프레임에 메뉴 또는 도구 모음이 표시되지 않으면 외부 테두리 대신 프레임의 다른 테두리 ( &lt;a href=&quot;layout-parameters#Layout-Parameters&quot;&gt;레이아웃 매개 변수&lt;/a&gt; 참조 )를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f387a3c3858f1e35ee5cdc8abd757df62aabda5" translate="yes" xml:space="preserve">
          <source>Usually, moving a parent frame moves along all its child frames and their descendants as well, keeping their relative positions unaltered. Note that the hook &lt;code&gt;move-frame-functions&lt;/code&gt; (see &lt;a href=&quot;frame-position#Frame-Position&quot;&gt;Frame Position&lt;/a&gt;) is run for a child frame only when the position of the child frame relative to its parent frame changes.</source>
          <target state="translated">일반적으로 상위 프레임을 이동하면 모든 하위 프레임과 하위 프레임도 함께 이동하여 상대 위치는 변경되지 않습니다. 후크 &lt;code&gt;move-frame-functions&lt;/code&gt; ( &lt;a href=&quot;frame-position#Frame-Position&quot;&gt;프레임 위치&lt;/a&gt; 참조 )은 상위 프레임에 상대적인 하위 프레임의 위치가 변경 될 때만 하위 프레임에 대해 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="dc9c0beada3128b35482d65aae16abbbc5f26533" translate="yes" xml:space="preserve">
          <source>Usually, no horizontal scrolling is in effect; then the leftmost column is at the left edge of the window. In this state, scrolling to the right is meaningless, since there is no data to the left of the edge to be revealed by it; so this is not allowed. Scrolling to the left is allowed; it scrolls the first columns of text off the edge of the window and can reveal additional columns on the right that were truncated before. Once a window has a nonzero amount of leftward horizontal scrolling, you can scroll it back to the right, but only so far as to reduce the net horizontal scroll to zero. There is no limit to how far left you can scroll, but eventually all the text will disappear off the left edge.</source>
          <target state="translated">일반적으로 수평 스크롤은 적용되지 않습니다. 그러면 가장 왼쪽 열이 창의 왼쪽 가장자리에 있습니다. 이 상태에서는 가장자리의 왼쪽에 데이터가 표시되지 않기 때문에 오른쪽으로 스크롤하는 것은 의미가 없습니다. 그래서 이것은 허용되지 않습니다. 왼쪽으로 스크롤 할 수 있습니다. 창 가장자리에서 텍스트의 첫 번째 열을 스크롤하고 이전에 잘린 추가 열을 오른쪽에 표시 할 수 있습니다. 창에 0이 아닌 양의 왼쪽 수평 스크롤이 있으면 오른쪽으로 다시 스크롤 할 수 있지만 순 수평 스크롤을 0으로 줄일 수 있습니다. 스크롤 할 수있는 왼쪽 끝까지 제한이 없지만 결국 모든 텍스트가 왼쪽 가장자리에서 사라집니다.</target>
        </trans-unit>
        <trans-unit id="ea62aa2fe86a457a72fe4de5203baf8fc2f210d4" translate="yes" xml:space="preserve">
          <source>Usually, the active keymaps are: (i) the keymap specified by the &lt;code&gt;keymap&lt;/code&gt; property, (ii) the keymaps of enabled minor modes, (iii) the current buffer&amp;rsquo;s local keymap, and (iv) the global keymap, in that order. Emacs searches for each input key sequence in all these keymaps.</source>
          <target state="translated">일반적으로 활성 키맵은 (i) &lt;code&gt;keymap&lt;/code&gt; 속성으로 지정된 키맵 , (ii) 활성화 된 부 모드의 키맵, (iii) 현재 버퍼의 로컬 키맵, (iv) 글로벌 키맵 순서입니다. Emacs는 이러한 모든 키맵에서 각 입력 키 시퀀스를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="9b9fb838eb5fcdc300a49526342dda78379aacd1" translate="yes" xml:space="preserve">
          <source>Usually, the records are rearranged in order of ascending sort key. If the first argument to the &lt;code&gt;sort-subr&lt;/code&gt; function, &lt;var&gt;reverse&lt;/var&gt;, is non-&lt;code&gt;nil&lt;/code&gt;, the sort records are rearranged in order of descending sort key.</source>
          <target state="translated">일반적으로 레코드는 오름차순 정렬 키 순서로 재 배열됩니다. &lt;code&gt;sort-subr&lt;/code&gt; 함수에 대한 첫 번째 인수 인 &lt;var&gt;reverse&lt;/var&gt; 가 &lt;code&gt;nil&lt;/code&gt; 이 아닌 경우 정렬 레코드는 내림차순 정렬 키 순서로 재정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="3b041849051a37134572bb487f95e27b79674028" translate="yes" xml:space="preserve">
          <source>Usually, this function returns the fill prefix, a string. However, before doing this, the function makes a final check (not specially mentioned in the following) that a line starting with this prefix wouldn&amp;rsquo;t look like the start of a paragraph. Should this happen, the function signals the anomaly by returning &lt;code&gt;nil&lt;/code&gt; instead.</source>
          <target state="translated">일반적으로이 함수는 채우기 접두사 인 문자열을 반환합니다. 그러나이 작업을 수행하기 전에 함수는이 접두사로 시작하는 줄이 단락의 시작처럼 보이지 않는지 최종 확인 (다음에서 특별히 언급하지 않음)합니다. 이런 일이 발생하면 함수는 대신 &lt;code&gt;nil&lt;/code&gt; 을 반환하여 이상 신호를 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="7fac3b4d5003c79523fe0f703a0c72bb5d7727dc" translate="yes" xml:space="preserve">
          <source>Utility functions:</source>
          <target state="translated">유틸리티 기능 :</target>
        </trans-unit>
        <trans-unit id="9303be7e663e13165b626f75ad7f1ef9bd96eba2" translate="yes" xml:space="preserve">
          <source>Valid RGB values are described in &lt;a href=&quot;color-names#Color-Names&quot;&gt;Color Names&lt;/a&gt;.</source>
          <target state="translated">유효한 RGB 값은 &lt;a href=&quot;color-names#Color-Names&quot;&gt;색상 이름에&lt;/a&gt; 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="ea32ee2963c0ab05a7001c3313cbf39dcb651b15" translate="yes" xml:space="preserve">
          <source>Value is either 1 or 0, depending on whether &lt;code&gt;normal-erase-is-backspace-mode&lt;/code&gt; is turned on or off on this terminal. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/DEL-Does-Not-Delete.html#DEL-Does-Not-Delete&quot;&gt;DEL Does Not Delete&lt;/a&gt; in</source>
          <target state="translated">이 터미널에서 &lt;code&gt;normal-erase-is-backspace-mode&lt;/code&gt; 가 켜져 있는지 꺼져 있는지에 따라 값은 1 또는 0 입니다. &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/DEL-Does-Not-Delete.html#DEL-Does-Not-Delete&quot;&gt;DEL이에서 삭제되지 않음을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1082c8deff15085df2c9de098380e0207041ac29" translate="yes" xml:space="preserve">
          <source>Value is either 1 or 0, depending on whether &lt;code&gt;normal-erase-is-backspace-mode&lt;/code&gt; is turned on or off on this terminal. See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/DEL-Does-Not-Delete.html#DEL-Does-Not-Delete&quot;&gt;DEL Does Not Delete&lt;/a&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27fec02551d2c7b23758814b159a5dd18c8d9bf7" translate="yes" xml:space="preserve">
          <source>Value is the integer unique ID of the notification that can be used to remove the notification using &lt;code&gt;w32-notification-close&lt;/code&gt;, described below. If the function fails, the return value is &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">Value는 아래에 설명 된 &lt;code&gt;w32-notification-close&lt;/code&gt; 를 사용하여 알림을 제거하는 데 사용할 수있는 알림의 정수 고유 ID입니다 . 함수가 실패하면 반환 값은 &lt;code&gt;nil&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="97a0b0ead5d29482d2854affebf4ac2810d1dede" translate="yes" xml:space="preserve">
          <source>Value must be a function of a single argument, the &lt;code&gt;jsonrpc-process-connection&lt;/code&gt; object. The function is called after the underlying process object has been deleted (either deliberately by &lt;code&gt;jsonrpc-shutdown&lt;/code&gt;, or unexpectedly, because of some external cause).</source>
          <target state="translated">값은 단일 인수 인 &lt;code&gt;jsonrpc-process-connection&lt;/code&gt; 객체 의 함수 여야 합니다. 이 함수는 기본 프로세스 객체가 삭제 된 후 호출됩니다 (고의적으로 &lt;code&gt;jsonrpc-shutdown&lt;/code&gt; 에 의해 또는 일부 외부 원인으로 인해 예기치 않게).</target>
        </trans-unit>
        <trans-unit id="10f70f2ede4a93ca4e2ea44b3cbb460825ad069b" translate="yes" xml:space="preserve">
          <source>Value must be a live process object or a function of no arguments producing one such object. If passed a process object, the object is expected to contain a pre-established connection; otherwise, the function is called immediately after the object is made.</source>
          <target state="translated">값은 라이브 프로세스 객체이거나 그러한 객체를 생성하는 인수가없는 함수 여야합니다. 프로세스 개체가 전달 된 경우 개체는 미리 설정된 연결을 포함 할 것으로 예상됩니다. 그렇지 않으면 객체가 만들어진 직후 함수가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="fb9f869922fac372b4eb1e810a4a38f0c49180dc" translate="yes" xml:space="preserve">
          <source>Value of the last field processed.</source>
          <target state="translated">마지막으로 처리 된 필드의 값입니다.</target>
        </trans-unit>
        <trans-unit id="8fd35ac25d6d0ab9b948eca26cb84bd76d2b9225" translate="yes" xml:space="preserve">
          <source>Values can be the symbols &lt;code&gt;always&lt;/code&gt;, &lt;code&gt;when-mapped&lt;/code&gt;, or &lt;code&gt;not-useful&lt;/code&gt;. The function can also return &lt;code&gt;nil&lt;/code&gt; when the question is inapplicable to a certain kind of display.</source>
          <target state="translated">값은 &lt;code&gt;always&lt;/code&gt; , &lt;code&gt;when-mapped&lt;/code&gt; 또는 &lt;code&gt;not-useful&lt;/code&gt; 기호 일 수 있습니다 . 이 함수는 질문이 특정 종류의 디스플레이에 적용되지 않는 경우 &lt;code&gt;nil&lt;/code&gt; 을 반환 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="19de69cb601f53a4ea7af22a65c71ae63251365c" translate="yes" xml:space="preserve">
          <source>Variable</source>
          <target state="translated">Variable</target>
        </trans-unit>
        <trans-unit id="7e50dbc760408fb500260afea8b047b38d0007e8" translate="yes" xml:space="preserve">
          <source>Variable Aliases</source>
          <target state="translated">변수 별칭</target>
        </trans-unit>
        <trans-unit id="1e81fac2c7879f6589f4e7917936fbc714b78210" translate="yes" xml:space="preserve">
          <source>Variable aliases are convenient for replacing an old name for a variable with a new name. &lt;code&gt;make-obsolete-variable&lt;/code&gt; declares that the old name is obsolete and therefore that it may be removed at some stage in the future.</source>
          <target state="translated">변수 별칭은 변수의 이전 이름을 새 이름으로 바꾸는 데 편리합니다. &lt;code&gt;make-obsolete-variable&lt;/code&gt; 은 이전 이름이 더 이상 사용되지 않으므로 향후 일부 단계에서 제거 될 수 있음을 선언합니다.</target>
        </trans-unit>
        <trans-unit id="5328b4a344a25829c6d43b1c8a757f75ced9250c" translate="yes" xml:space="preserve">
          <source>Variable values in effect only in one buffer.</source>
          <target state="translated">하나의 버퍼에만 적용되는 변수 값.</target>
        </trans-unit>
        <trans-unit id="64b77fd2c3194f1999e81482226ab5e74b0b4528" translate="yes" xml:space="preserve">
          <source>Variable values that exist only temporarily.</source>
          <target state="translated">일시적으로 만 존재하는 변수 값.</target>
        </trans-unit>
        <trans-unit id="6a0e70f15443599912e2ebe9fa29e3f5e7a88104" translate="yes" xml:space="preserve">
          <source>Variable values that exist permanently, everywhere.</source>
          <target state="translated">영구적으로 모든 곳에 존재하는 변수 값.</target>
        </trans-unit>
        <trans-unit id="f7a3501076850280c5cfc97caa779a34c98dbdd0" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;abbrev-expand-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;abbrev-expand-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="33808904c2fa1c9855605ab44950be7a4edd2970" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;abbrev-minor-mode-table-alist&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;abbrev-minor-mode-table-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="74183064d32636f4099cb1fd975697c3a4201c34" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;abbrev-start-location-buffer&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;abbrev-start-location-buffer&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9f94f4c98db644fe81df061b14ddac64605eba34" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;abbrev-start-location&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;abbrev-start-location&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="47e94df2550463086bd3bb16c19b477072ef921e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;abbrev-table-name-list&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;abbrev-table-name-list&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="016a31c3a2d4212df698cb095ea2509a574aa665" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;abbrevs-changed&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;약어 변경&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1513d387d78c29996055b161f0a7afa8db403f4a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;activate-mark-hook&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;activate-mark-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="242dc639864126b7024c078ef93109fd927e5d3f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;after-change-functions&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;변경 후 기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b74a7c414ed36d6229dcfe78bc5f686c183d1832" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;after-change-major-mode-hook&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;변경 후 주요 모드 후크&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c1df72d09e159c3c938dfbf526d3cc5a1b98f49c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;after-focus-change-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;초점 변경 후 기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f2a28059dc38c6e6e1e674c0da6c7521120a093c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;after-init-hook&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;초기화 후 후크&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8659e75230e10d890b526a96369c02b7a89c1b61" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;after-insert-file-functions&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;파일 삽입 후 함수&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ea92b9bf812aa138f462af09efa08b7346d3adbd" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;after-load-functions&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;부하 후 기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7090e66024352f23061910053c293e2194ac1953" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;after-make-frame-functions&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;프레임 후 기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0f7075690f7f1ac5e0597adb68c7c9c357259a6d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;after-revert-hook&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;후 복귀 후크&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d8fa557c5b5f530320075e9f06c8e20eee45aa6f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;ascii-case-table&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;ascii-case-table&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1c0023efb5f53f4c2d08e17e0b9fdbaa3723bab6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;auto-fill-chars&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;자동 채우기 문자&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2bd1dbf30bcd5f5d23cf26f523eab2ad56bdeadc" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;auto-fill-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;자동 채우기 기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="21da8ffa2dd9d317e33f938bea16a95d493fc54a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;auto-mode-alist&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;auto-mode-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0a3281bcc6d12d375b7e121e2be57203e790a022" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;auto-raise-tool-bar-buttons&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;자동 올리기 도구 모음 버튼&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="45e8558758e110107557214d8b354cccbda7ea1d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;auto-resize-tool-bars&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;auto-resize-tool-bars&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="025ec1f413272cddcd07c4a634c584beea58b8e3" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;auto-save-hook&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;auto-save-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="171a642e185227a72766f2c35d638cb346363bff" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;auto-save-list-file-name&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;auto-save-list-file-name&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fd0283f5e93ae7621381ad25ad6ff3b5999e2a89" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;auto-window-vscroll&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;auto-window-vscroll&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f26775ebce6d195c0edbd9b246482a52fb91ca50" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;backup-enable-predicate&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;backup-enable-predicate&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1ed1688ce62143c5c0d1c7ac505e1329f262fba2" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;backup-inhibited&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;backup-inhibited&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d04a4fa335fe7697599d15570860b1d73bc6b29c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;before-change-functions&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;before-change-functions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c33d44f6716dcffc0a75e506f670bb8953768510" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;before-hack-local-variables-hook&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;before-hack-local-variables-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="160c62b6e327e365b2a48fbcd1359366110d5d57" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;before-init-hook&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;before-init-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e7a06fe895df569728125c2dcce6f1a11092ba22" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;before-make-frame-hook&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;before-make-frame-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="26256f794e2e98edfbcf81376a5bbae7ef01eddf" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;before-revert-hook&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;before-revert-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="772d2b9fdf23c3d163c286ee4fa36d24fb8ad72e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;beginning-of-defun-function&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;beginning-of-defun-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d162ca2408549a8341b160b96d75c25bce2b197e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;bidi-display-reordering&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;bidi-display-reordering&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8a08279602dfcce01cdeef36d7249896ac2b3f95" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;bidi-paragraph-separate-re&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;bidi-paragraph-separate-re&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4ff40d8b286789cb63d13eaf13acef63e5598914" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;bidi-paragraph-start-re&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;bidi-paragraph-start-re&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="18d149bc7ec32d5cf3972b111bb0b79ff749b2de" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;blink-paren-function&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;blink-paren-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="329d7de8b8cfe1c815943ac69bc958aaeaf8a368" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-access-fontified-property&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;buffer-access-fontified-property&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a551f75d223a0ab7ec885477b95fca09e9f43fd7" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-access-fontify-functions&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;buffer-access-fontify-functions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f3597833ca99c1e75c74fd553371e8d545f2a0c8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-auto-save-file-format&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;buffer-auto-save-file-format&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="615f3fdd1d2ce32af7b8537c0ea8ad451a7ad66a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-auto-save-file-name&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;buffer-auto-save-file-name&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc49432931c7562cd976a7638c7f255118114e66" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-backed-up&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;buffer-backed-up&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b2b74d3aec67af0163bbf44dad639b8ff01e04dc" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-display-count&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;buffer-display-count&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e3c4e3bfe8c23f7fa0ad77a29264506b09fa02ce" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-display-table&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;buffer-display-table&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d6b9f4219fdafc1cfe744b1e782eca6cf75bd425" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-display-time&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;buffer-display-time&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="81530e5415afba2eadead8c884373d28486b52bd" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-file-coding-system&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;buffer-file-coding-system&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b0efab2c319e42687ca840159e44b661d254a0ed" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-file-format&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;buffer-file-format&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b4829afa2b5012d27c6a6a2435099a329b292b78" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-file-name&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;buffer-file-name&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4d9a780b2ba95ca5ccd27079d0bfe72a2a2549b5" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-file-number&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;buffer-file-number&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6aac11918e39674348f06ba9b899c87b94a0affe" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-file-truename&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;buffer-file-truename&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d2a06d907b5f3924887d87fbfaee355ba67efc11" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-invisibility-spec&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;buffer-invisibility-spec&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="77cb440108a55b543ce3afc35fb43568ef8f940b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-list-update-hook&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;buffer-list-update-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b5e48c4ebd90dfd345158701778425282a008e00" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-name-history&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;buffer-name-history&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8002a1ae5ea21ef50f058cbfe52b1edb89d3a871" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-read-only&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;buffer-read-only&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a57c43e7c8bf3e450c9a2e4e291d946e427cc248" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-save-without-query&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;buffer-save-without-query&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dab121293d32a8bd096dcd4d60e80dc31f942852" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-saved-size&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;buffer-saved-size&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="938fac4b102264f4f09d96abb0bb7dd12aade3f2" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-stale-function&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;buffer-stale-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="735ab3e525afdef7c7eee4848cabadeaed98c98c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-substring-filters&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;buffer-substring-filters&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="06e25d2d4270540aef88663feec7bc94a21a6da5" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;buffer-undo-list&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;buffer-undo-list&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d6f28adb99965f69ae640b7707b0875c1fa8e592" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;byte-boolean-vars&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;byte-boolean-vars&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3699e79f2e1fc9aee81a2f23f411a69dc430be16" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;byte-compile-dynamic&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;byte-compile-dynamic&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a8e688bba5c1dc571affb376bde9d7356d24d024" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;change-major-mode-after-body-hook&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;change-major-mode-after-body-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e7069dd188311abbf96076c67d9ad0a8490aa518" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;change-major-mode-hook&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;change-major-mode-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e82f9b7ca50645546eb014f66e686d05bca12501" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;char-property-alias-alist&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;char-property-alias-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="70155b2e01ffd51a21a77ece8f167bd54b507037" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;char-script-table&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;char-script-table&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dab701e34eb03116428c1274f6f923d78b7da983" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;char-width-table&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;char-width-table&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e44a098f278fd20c44d59bb1cf1850f08b395be7" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;charset-list&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;charset-list&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="38c45335d82065ece2eae54749b56a87d83767ff" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;clear-message-function&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;clear-message-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="06c48b2e653c3c4c5f23e4ccf17b08abf47dea2f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;coding-system-for-read&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;coding-system-for-read&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="237b3ec37bf4ffcd1163cb3241942cb39f0495ec" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;coding-system-for-write&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;coding-system-for-write&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8a02ca7e84c05a2806a711eda7d62e442101dcec" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;coding-system-require-warning&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;coding-system-require-warning&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8cdcbd46965566da527b9c0d91945176a9333907" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;command-debug-status&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;command-debug-status&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6ac5eb7bf45ed828c9a998f77ac84284867d1fef" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;command-error-function&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;command-error-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7a46c52a5dcbac1c7555f39b1eed975802fb3304" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;command-history&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;command-history&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="15991290f9fcd1b10e7c5161bd2abd606d2e7188" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;command-line-args-left&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;command-line-args-left&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f740bda3f24c136675288e3b85d8eca12a180b37" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;command-line-args&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;command-line-args&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="05e180088f33c3694145f9997282c03e91ac3eac" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;command-line-functions&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;command-line-functions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="973cba4bd40d06109656f6e222d62746a0c54e77" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;command-line-processed&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;command-line-processed&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e0f98997365e84bc67073a659031c153ccdf5444" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;command-switch-alist&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;command-switch-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e0544212a7a9fd29bdd834acde9042fff1945064" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;comment-end-can-be-escaped&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;comment-end-can-be-escaped&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a972e830d788c516e07e8e1069348c44e8112782" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;completing-read-function&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;completing-read-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="56197906a16fbf5412e09405e8273d5e511e5002" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;completion-at-point-functions&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;completion-at-point-functions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d3ba38f455dddb925d82f9796cac5f20173f5541" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;completion-extra-properties&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;completion-extra-properties&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0a9715499444aa58ded2d4575acf35f475402c5e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;completion-ignore-case&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;completion-ignore-case&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9ff3bda33de242b922bedcb668295bf7d42f438e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;completion-regexp-list&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;completion-regexp-list&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="58a5282eefe23f39008cb178d130dba3bed31cf6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;completion-styles-alist&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;completion-styles-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e71579a15148aec951e74bf140f82c711ccf2cae" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;connection-local-criteria-alist&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;connection-local-criteria-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="043f5967f3f7b3b167156deec2791d6aac3a4a4f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;connection-local-profile-alist&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;connection-local-profile-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0ce57e5c1b0a8fcea1f950d76e4de5110813d074" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;cons-cells-consed&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;cons-cells-consed&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6918b55d20e3b4ca9be4d20891c03d67e79669ef" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;current-input-method&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;current-input-method&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="825b95f158eb32b6e25f63d24989ea2e1dcee797" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;current-prefix-arg&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;current-prefix-arg&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8f7f769cf1b07f06f2d59735dd5c6cb2d6c98258" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;cursor-in-echo-area&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;cursor-in-echo-area&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee5c44f0f6a1b1774ab1141e2d2461a287ef0f3e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;custom-known-themes&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;custom-known-themes&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dd00ff64457832b07a071512a0526b20547c2d62" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;custom-variable-history&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;custom-variable-history&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2d68fb85da48d3b5123954444e9ebca76216ea21" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;customize-package-emacs-version-alist&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;customize-package-emacs-version-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="78aaf60f55ebb357b9c49070c6260ac533ac5309" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;data-directory&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;data-directory&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="58a344a54387c4d3cc3f8a135180c6330d774090" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;deactivate-mark-hook&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;deactivate-mark-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b53b3589f950da70ad7f1f25fdd1d05df9fbb20f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;deactivate-mark&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;deactivate-mark&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="39dd7757ff1c5333e03254275d94fb280c321db8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;debug-on-message&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;debug-on-message&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="025f1d67816992df92152ebe279d65b9518f5615" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;debug-on-next-call&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;debug-on-next-call&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="50d338b5f23a809dc2a0cb9109abaec4324d4238" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;debugger&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;debugger&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6534bdaf2e2ba38c81da6e8d634f37465f8dd88c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;default-directory&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;default-directory&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="275bdca4549fcd8342f290882afdd8e418503f1c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;default-minibuffer-frame&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;default-minibuffer-frame&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="02f9aa2f88c57d1ee05c7718935fc2ced046a877" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;default-process-coding-system&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;default-process-coding-system&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="91760fc229cc7edc4da0e20baa039bf6b1204b82" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;default-text-properties&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;default-text-properties&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2cafd55ad7e01593695f50891907a42c70bb710d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;defining-kbd-macro&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;defining-kbd-macro&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b7adca875f4718d7921d41f390665433131c0010" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;delayed-warnings-hook&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;delayed-warnings-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="893866261754a55185a42bbeba3db35a122e4a36" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;delayed-warnings-list&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;delayed-warnings-list&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="998b448264ccd9ac2669d11874547faab39db821" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;delete-terminal-functions&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;delete-terminal-functions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4609acd81e58b4c8feccb2fa5b99454639b1aeb1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;desktop-buffer-mode-handlers&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;desktop-buffer-mode-handlers&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d788b919041731306d1ed3119d25c4e3d05dbc0" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;desktop-save-buffer&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;desktop-save-buffer&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a030c59362bee119e34d5212c639c00f2995fae6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;dir-locals-class-alist&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;dir-locals-class-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee359c15d9b05fdd28a1416beee90ffa0c78359f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;dir-locals-directory-cache&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;dir-locals-directory-cache&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5769de24ebf0a362e3ae0397ccd00822081e65ac" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;disable-point-adjustment&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;disable-point-adjustment&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="16747d6e620da11d5bfac54379fc916cf8cd6744" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;disabled-command-function&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;disabled-command-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="36376cf2e4eab1506ba8678c25cf5a9446845fae" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;display-buffer-overriding-action&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;display-buffer-overriding-action&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="11b1e365b77825bee10060a7efdeecab8ada0d7b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;doc-directory&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;doc-directory&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="626d7212e019d152b500c7f29944f939c0d1274c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;dynamic-library-alist&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;dynamic-library-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="89a55fe0d12a27c3430e2ba258035e97a38061fc" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;echo-area-clear-hook&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;echo-area-clear-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2c5b58bd144477d747ec4c7b213da60ad5c128ea" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;electric-future-map&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;electric-future-map&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1e572806cd8a1b31ec37dbf1bb0543b62ffd09a1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;emacs-build-number&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;emacs-build-number&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c0ff3ee648a18aea594a95f7ececbc237a2f4fc3" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;emacs-build-time&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;emacs-build-time&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="03a7d12289e8c73c549b44bcf96e4731efd34482" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;emacs-major-version&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;emacs-major-version&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1d9dd7d9fc7e1909ad18700a0c992d54ab74c642" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;emacs-minor-version&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;emacs-minor-version&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cde688285cb63e6e47cd05b7a43cdfc6becf3530" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;emacs-repository-branch&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;emacs-repository-branch&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c79e2cde6a178ae85fb74875425b6570a91c3742" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;emacs-repository-version&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;emacs-repository-version&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="68bca76b22e84992fafedae258c451654ae6fe9a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;emacs-save-session-functions&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;emacs-save-session-functions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3474b62651949c2ac00100f372c7fca5154f21a2" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;emacs-startup-hook&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;emacs-startup-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0c103c2b6bac39dcb4a58c4c5fa99ec066ee4fd1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;emacs-version&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;emacs-version&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="695ad02566db163e5a095d9e16294685522a209e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;emulation-mode-map-alists&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;에뮬레이션 모드 맵 앨리스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="83142f971da47b444028352263e23e4b2e004630" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;enable-connection-local-variables&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;enable-connection-local-variables&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d990c8adbf5a9051ccd8bb4ddc6e11f972b2fb9e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;enable-dir-local-variables&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;enable-dir-local-variables&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fa68ff277a4e1c1baab0a2eae6801f8ceb7c6dd6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;enable-multibyte-characters&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;멀티 바이트 문자 활성화&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9384f8e0da35165c269268c827c3b9400be030e1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;end-of-defun-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;소멸 기능의 끝&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bb2228773e3960a3562a5d0b4529f5a6fbb3913d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;exec-directory&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;exec-directory&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e5f7a072909a05a7acfb2ce2787a33b3347643ab" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;executing-kbd-macro&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;running-kbd-macro&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="834c14039e894e584c7b3d902fc981ca4a539569" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;extended-command-history&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;확장 명령 기록&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ff8f547fe22eed580ffc25dffb58b76bb3257aa2" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;extra-keyboard-modifiers&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;추가 키보드 수정 자&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a0aeb0a225689960d486ebdf69c2e38cd9e9ee83" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;face-filters-always-match&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;얼굴 필터 항상 일치&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="62541be3ae6f08037064f7c0bb564b0d180c908c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;face-font-rescale-alist&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;face-font-rescale-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0b62dc8f353a7f5dd27b394ef7acc1c5e16b9e9b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;face-name-history&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;얼굴 이름 기록&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c2a308e761438a1704af8121ef5e2415c2a6330a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;face-remapping-alist&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;face-remapping-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="faaba21d02cede45118faf08bfce32e5dda7c0d8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;features&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="91251a6d2a8edb55b95291421556302c81edaad1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;file-local-variables-alist&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;file-local-variables-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="57b79c8ec03eec3862be2d6a6480af4839299e29" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;file-name-coding-system&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;파일 이름 코딩 시스템&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d8d558ad0cbff6804288b3d05654d202a1b159ed" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;file-name-history&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;파일 이름 기록&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="14b8c1e425948c3184278e87044dbb8ca3c63512" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;fill-forward-paragraph-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;fill-forward-paragraph-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7c60ed11cd687952dfc052511e6c9f2c2e195008" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;fill-paragraph-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;fill-paragraph-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="591bce891a3c54f19fb55f0ad3c019e87b097bcb" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;filter-buffer-substring-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;filter-buffer-substring-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f2e1f9b5804d236ba09779f04d95675887ba394f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;filter-buffer-substring-functions&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;필터 버퍼 하위 문자열 함수&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="585104e9374304c859e19d5667cb1f64900fa2bb" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;find-file-literally&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;문자 그대로 파일 찾기&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eb827ade32890a4fe0f8fc6a4c3e5342a327c92b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;find-file-not-found-functions&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;파일을 찾을 수 없음 기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ed85746600a7dfa5dc23fe254e262b263f31c022" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;find-word-boundary-function-table&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;단어 경계 기능 테이블 찾기&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="25306f8fd9fc42d16ab6abe41e38be90fb4b628a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;first-change-hook&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;첫 번째 변경 후크&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="83845b8b3877cbe023af9234e29b4392b57b9add" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;float-e&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;float-e&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="027bc66973ac341a1e132966c194a359c88924ca" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;float-output-format&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;부동 출력 형식&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ef73d36721a81f228697e5e4d457a3dd8323f13f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;float-pi&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;float-pi&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eef3414efac7c8d43e9d9bbf068c2e0b64caf85b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;floats-consed&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;floats-consed&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee7eec64b2bcd92dc96f1c273b98d250346dc8bd" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-defaults&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;font-lock-defaults&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db03ce99cd86a1454e0b5b57e7ffe4a3153e44d4" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-ensure-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;font-lock-ensure-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9464a2a14d824ace645bc668d35b60df1fb42517" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-extend-after-change-region-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;font-lock-extend-after-change-region-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="02636e08e837432c2f3e40f575d8a2100c7e2f2b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-extra-managed-props&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;font-lock-extra-managed-props&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c71c5fd31b4541e464a5198a032fe8ff599a753a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-flush-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;font-lock-flush-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12cfe1ce4d216177efe622d37adba4c2f250227d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-fontify-buffer-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;font-lock-fontify-buffer-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db5473f5b4aabfeb0457b3d9aa747450a05dd451" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-fontify-region-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;font-lock-fontify-region-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="30e3a572298f59c2b7f7f9e74f14957464e36566" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-keywords-case-fold-search&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;font-lock-keywords-case-fold-search&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4a6fe37d5ff10375f3d780faadb23e68ceb198a7" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-keywords-only&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;font-lock-keywords-only&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="21102dbbc493fd628cc24cdf265d17943d0793e3" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-keywords&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;font-lock-keywords&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a36fa4c7e5ee47670c599a925a533ce771a9fd89" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-mark-block-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;font-lock-mark-block-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="19eb2d1cfba942ae4c84708271c9163f9b06bc9d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-multiline&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;font-lock-multiline&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2196f924b36579e5fc9ee3390dbf45e66799817e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-syntactic-face-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;font-lock-syntactic-face-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="84f4f72a765edcb7c39861e845caa9b59e2ba09a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-syntax-table&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;font-lock-syntax-table&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b5c43421370a8b59101b34e2068ad9af004ed645" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-unfontify-buffer-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;font-lock-unfontify-buffer-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ec149d6877ab7d0bba8c5d27a589fdac4c2d3ca2" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;font-lock-unfontify-region-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;font-lock-unfontify-region-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="24f727ec96cf594b7b8aa5f6391db95e8a33dcf1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;fontification-functions&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;글꼴 화 기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f34e993525d6343f94a9827aded56abc7d6ef101" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;format-alist&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;format-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="649f33a94aa49939d2fa245cb0e028f541ba4433" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;frame-inherited-parameters&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;프레임 상속 매개 변수&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0f565f1138d3f3a7ce54f864a13be1dcec283109" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;frame-title-format&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;프레임 제목 형식&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="07057d74b91061d9025776d121cce7ca5ba6aeba" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;fringe-cursor-alist&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;fringe-cursor-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="63d6c18885f7ad23a8d5754a1dbf24ced95ce67b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;fringe-indicator-alist&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;fringe-indicator-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6041715157fe646c1c0c8c1d2bdb6ae72c12b0db" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;fringes-outside-margins&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;fringes-outside-margins&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="88794fb04afccf3403ae9dccbfef23179b6a931c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;fundamental-mode-abbrev-table&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;기본 모드 축약 테이블&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f3c22701d1fdf02da728289a3f73faf581b99cfb" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;gc-elapsed&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;gc-elapsed&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8930565c355d5760c551e36543b675e0a33c70c6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;gcs-done&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;gcs-done&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="48ea952abc9024944e3c7523862fd17e9879a1d0" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;generate-autoload-cookie&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;generate-autoload-cookie&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ac6a250704ecaeb08adf9c23fb834141852876be" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;generated-autoload-file&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;생성 된 자동로드 파일&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e9f41253b6b62b0db371ed8a1e330eceec28ccb3" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;global-abbrev-table&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;global-abbrev-table&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bc72fb4e4c67c3dee4b352f7baa97d361205738e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;global-disable-point-adjustment&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;전역 비활성화 지점 조정&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1c9d72d6617840f90a42a094068d79efd4f284db" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;global-map&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;글로벌 맵&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a64319d323b168c2ee147692a7e2769ee8678646" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;global-mode-string&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;전역 모드 문자열&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3d8266f7b5134d2783643aabf38542fcdaaa5a3a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;glyph-table&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;글리프 테이블&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="972890e59e2e94041ffb0d3eb287638c7e67c603" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;glyphless-char-display&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;glyphless-char-display&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d5bd126732c5a689c60f4fa30f2fc99674b96fc" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;hack-local-variables-hook&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;hack-local-variables-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5d33fb13795104cad204969a38c5497b29f76b4b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;header-line-format&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;헤더 행 형식&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a4af2c637e941a26d3d19589a43bec81d254669f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;help-form&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;도움말 양식&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f48969bf12c7cf4839db82e73855d85f267c5b70" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;help-map&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;help-map&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="750f869fb23f23cee1fee2105c01417daaa4ad90" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;history-add-new-input&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;history-add-new-input&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="29465b30417743b333d7c84ef79146b1aa8ad90a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;horizontal-scroll-bar&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;가로 스크롤바&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4881cc80a7be12a1ea0e0c13378523bc6a758aa9" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;icon-title-format&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;icon-title-format&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="134ea33599fbe952e4b2f0430a8b7be9eba62633" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;ignore-window-parameters&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;창 매개 변수 무시&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1a6a9ebc069b334bd1989c295d318c71d537ccbd" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;ignored-local-variables&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;무시 된 로컬 변수&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ce976267f721e66fb9cdb2df0691a35b65f78830" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;image-cache-eviction-delay&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;image-cache-eviction-delay&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8f3f67543c0910582bc345ec8d8da12623bec259" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;image-format-suffixes&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;이미지 형식 접미사&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="93076f3e181dd44e767f4cac8ee5c9914474fcf4" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;image-types&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;이미지 유형&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bcb6301d7e02d199df35733be265b4f5dc58baf4" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;imenu-case-fold-search&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;imenu-case-fold-search&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12841214bf1ee0abf3d90f9f16f636a3c02af2a1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;imenu-create-index-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;imenu-create-index-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf4daaa2d0345e3ad0f904211795269692a0e7ce" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;imenu-extract-index-name-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;imenu-extract-index-name-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eecb03b08ff89084b8741eb2241e06dc00399d86" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;imenu-generic-expression&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;imenu-generic-expression&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="99011bbe7e103078ecd6305a69041849f359adaa" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;imenu-prev-index-position-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;imenu-prev-index-position-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a4a7fea2af016e6f0a09cd0962be035e093bf5d6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;imenu-syntax-alist&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;imenu-syntax-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ed73e5cee338c7da8c00206d21355602b2423f59" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;indent-line-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;들여 쓰기 줄 기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c5882339a055b45f93766ac3355b28df51f139c4" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;indent-region-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;들여 쓰기 영역 함수&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8d284fb592c3cc8e50e327f982ca53e3cd64e5d2" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-field-text-motion&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;금지 필드 텍스트 모션&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="afd80f320b5dca6e8beb50da8efa52ce375f703f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-file-name-handlers&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;금지 파일 이름 처리기&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ca5f5890cefa08d0a543d569f04d99e965e96905" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-file-name-operation&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;금지 파일 이름 작업&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="039ef8e8b4e638a35c2bc4e50df6b6b90d0351fc" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-iso-escape-detection&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;iso-escape-detection 금지&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5ec319f37fdc63e67ecb3e58a626becfbc53d956" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-local-variables-regexps&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;억제 지역 변수 정규식&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5d71cc032c21a7cfc38a023e2941a3afbbac59b3" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-message&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;금지 메시지&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="65f5708c068faf42c5b7286078887c104b886982" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-modification-hooks&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;금지 수정 후크&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ad0336fbb452882a0ccdb4c5b812731ba52747cf" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-nul-byte-detection&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;null-byte-detection 금지&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d2f039dfdbbc072b3ad5281a953a5919378dceb" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-point-motion-hooks&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;금지 포인트 모션 후크&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="faaa955b0125731248af2398a7d66c47ceb8456c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-quit&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;금지 종료&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c031c9eb003d3b092f3dabe61a1dedc5db78a4d3" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-read-only&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;읽기 전용 금지&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e3dde91c10dcfbf4886fae480fdd843dcca8b560" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;inhibit-x-resources&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;금지 x- 자원&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0015ffbab64fe134a7d2e9a4724e27a55845763e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;init-file-user&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;init-file-user&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e12f2a805c8f1c9f3594978f7f73cdd40ba04edc" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;initial-environment&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;초기 환경&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a985547af432add4e3770c87690a50125d518898" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;initial-window-system&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;초기 창 시스템&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="55034724c0dab295f75f1bff98c0963f249a62c6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;input-decode-map&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;입력-디코딩-맵&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="81bd6c10f538c08c57371beba88f4f30b8d0bca9" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;input-method-alist&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;input-method-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bba40919ef2d21c050e0b7335238b6c6791180be" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;input-method-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;입력 방법 기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee04aa78f14b7407883d8ca1cf2cb8e04d003e5e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;insert-directory-program&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;디렉토리 프로그램 삽입&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5bab59ec28a0f277fc42f87f0f9b7460ca7373ac" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;installation-directory&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;설치 디렉토리&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="476d9c121bfcd62224bb96944fe580bb5a16b987" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;integer-width&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;정수 너비&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cb2d7b912c8d9b4daed1f37f2e74844c8a3dfabf" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;interpreter-mode-alist&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;인터프리터 모드 앨리스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="04df42f994c147d8b450ad8eeb717fcf322e9b97" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;interprogram-cut-function&lt;/strong&gt;</source>
          <target state="translated">변수 : 프로그램 &lt;strong&gt;간 컷 기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="449f09f32206b0efafab7bbbcb0bb99a3e1e4f1c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;interprogram-paste-function&lt;/strong&gt;</source>
          <target state="translated">변수 : 프로그램 &lt;strong&gt;간 붙여 넣기 기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8ceeea85c96a2b53a8147a9651d4ed6f86de385f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;interrupt-process-functions&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;인터럽트 프로세스 기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1b7da71a51ca22f6d0649d4e49da2c6f532582e5" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;intervals-consed&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;간격 제한&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b1841506aadcfa9c2345ec0fb933dccd7202407c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;invocation-directory&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;호출 디렉토리&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d6d374e7e1c262ae90d86f64fb90a0d9f2a49b5e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;invocation-name&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;호출 이름&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c0dac215e7b7b8b9366c40ed4902aeecff38a6d7" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;kbd-macro-termination-hook&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;kbd-macro-termination-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f5574207789a0daa909861e150ab15bdc4e40d9d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;key-translation-map&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;키 번역 맵&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c3343ceddb7cc3efab5d188777f410e7c31d50ee" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;keyboard-translate-table&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;키보드 번역 테이블&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bfed6bf42f1bc8686bb5d859423b890d11e8b110" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;kill-buffer-hook&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;kill-buffer-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f304cf696f1e632f8ba6c6f3f7cb1e0454e1509b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;kill-buffer-query-functions&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;kill-buffer-query-functions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="749877e0fc6c5aa02a13f97fc887fd8db1f6e476" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;kill-emacs-hook&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;kill-emacs-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="40941afa9950702d326f1c9da0042f539f733a10" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;kill-ring-yank-pointer&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;kill-ring-yank-pointer&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e5059432d4ff9d735e103bc89015adc88b5adfee" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;kill-ring&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;킬링&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1964fa4e6700a184342396a1d2bd401c8fd0720b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-abbrev-location&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;last-abbrev-location&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5b44dddd4d20daa9c41c65b545c820845da4ed61" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-abbrev-text&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;last-abbrev-text&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f96b335a8c129e24aa3097b0fc86a899050ca7e2" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-abbrev&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;last-abbrev&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ca26530c67f996e5541f0ab83dec583360a22f2e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-coding-system-used&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;마지막 코딩 시스템 사용&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="51e3eb3975eec5c5759fd9a546287e64731599df" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-command-event&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;마지막 명령 이벤트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3380cb0f128839cd32c459048a4215f4926a4016" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-command&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;마지막 명령&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d078b5c5e51e95f9a7a268c5f2d9f851d179742a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-event-frame&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;마지막 이벤트 프레임&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ae2a5b88183f50ea2726089d09b423ec138a6182" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-input-event&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;마지막 입력 이벤트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eb3a1cdd9122df6d277a06dc000cd7aa859effad" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-kbd-macro&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;last-kbd-macro&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f4848b4e152b3099900cb1a959ee4675ac9c2bd2" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-nonmenu-event&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;last-nonmenu-event&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="27e7c66cb75639059adf73d34bab5b5bd0c7cca5" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-prefix-arg&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;last-prefix-arg&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c32208b76441fd5ea9a3e76c03d6912d2ff47b3d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;last-repeatable-command&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;last-repeatable-command&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b9cbfca51379fc5fe9297a60cc5743e716a3fc9" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;left-fringe-width&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;왼쪽 가장자리 너비&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c95db88a3ef3b72bacdfaeecffbeb5ac4a55fa41" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;left-margin-width&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;왼쪽 여백 너비&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2a8db3555a15edb3345757dfe61ad6d5b0783075" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;lexical-binding&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;어휘 바인딩&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d68310d75a8c0ee563c1ec4e7aff36e695d0a0b4" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;line-prefix&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;줄 접두사&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1404a9ebfce7ce4aa2e3035ae79670320daa7499" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;lisp-mode-abbrev-table&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;lisp-mode-abbrev-table&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6d5fb860b020172330fb869243b452da35b8d505" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;list-buffers-directory&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;list-buffers-directory&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bfdb8dce81c3d1d46af0a55b31a105593ae0989d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;load-file-name&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;로드 파일 이름&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d92e6a91cb2f54dcef758a714a32ba306022835a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;load-file-rep-suffixes&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;load-file-rep-suffixes&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4a3adcba049a8a1eb3b2f8db21046b838dada441" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;load-history&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;로드 내역&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2652913099839783dda97daf2885c83512045b50" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;load-in-progress&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;로드 진행 중&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="156a83c628b13502fceb68bce4ebddbce2f500c6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;load-path&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;로드 경로&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c5c4ea914af7bf5b8fc5b4df05326e0d4d7b43bf" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;load-read-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;로드 읽기 기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="524da005ae21cb2be7bba034c6ab91915be388a3" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;load-suffixes&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;로드 접미사&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="52ba13393b38ffe6932edc53e5301d3fe4e7fef6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;local-abbrev-table&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;local-abbrev-table&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f002f80933e739fddd590ca99382d39cc14f095b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;local-function-key-map&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;로컬 기능 키 맵&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9b13161aabecdf4c0615593e29aa09372a4ec0bc" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;locale-coding-system&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;로케일 코딩 시스템&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7883292371dd9a11c33eac750d16abb0d9df9d1c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;magic-fallback-mode-alist&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;magic-fallback-mode-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="467d984102d2abb25ab5382e6f1a5c574366d77d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;magic-mode-alist&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;magic-mode-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5ec82cf7fe2e7a62bc48aae427a05a9eaae5bff5" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;main-thread&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;메인 스레드&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc5a9a7e98931e8d7e10153a0f7c7144f093c841" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mark-active&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;마크 활성&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="045c81c631d3b2764659e78504e9d44a49a115a8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mark-ring&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;마크 링&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9efe4d7ea63f72b8d724a0319952c7a28ab43bf6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;max-image-size&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;최대 이미지 크기&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="28feacf8069377da4aa006c59fb32992cda1ff04" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;memory-full&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;메모리 가득 참&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a097ea61a90c49b8d606ccb60adc8e64511f1e63" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;menu-bar-final-items&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;메뉴 바 최종 항목&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e069f19aed0c14bbbcf81984b8666ddb356dbf47" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;menu-bar-update-hook&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;메뉴 모음 업데이트 후크&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a0529b052823000714aadfbf82fb4ff4ce7e6110" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;menu-prompt-more-char&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;menu-prompt-more-char&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="34b38083db8f5da8c612cf1e5a2134f6bdba0e95" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;message-truncate-lines&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;message-truncate-lines&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="36e64c46211624bbb7a2f3439c98b2417a6816bb" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-allow-text-properties&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;minibuffer-allow-text-properties&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="86b47266ef2a3eae6c4b8962cb8a73d897d6e5ea" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-beginning-of-buffer-movement&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;minibuffer-beginning-of-buffer-movement&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="37c700bdc7690fa0ad301820b3a2cdb5ab0c07d8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-completion-confirm&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;minibuffer-completion-confirm&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e62331aef18940cd6c49a50df7cf0575ecab6e3e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-completion-predicate&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;minibuffer-completion-predicate&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e0551ff0d7bf8af1580682c938e31b56936ca615" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-completion-table&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;minibuffer-completion-table&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a5869206b9d91facdf9db29437298498742a3312" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-confirm-exit-commands&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;minibuffer-confirm-exit-commands&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="34550c599fbf8b8bbc2a1fa54fb46642bf3b76eb" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-exit-hook&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;minibuffer-exit-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0a22995f59730cd89e9c1eb8927fdabacfa7de1e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-help-form&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;minibuffer-help-form&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0bd1acdcef197b3efe50a90aa8ba1f4b847eae1f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-history&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;미니 버퍼 히스토리&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d00bd8f5e128d888b8abbc37b73e034daaf1686c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-local-completion-map&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;minibuffer-local-completion-map&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6f999839f578fc1106e86e0e5b8ecd7460ad7890" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-local-filename-completion-map&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;minibuffer-local-filename-completion-map&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e4c20ba978278bf2a699d3aafcb093496e71d27c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-local-map&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;minibuffer-local-map&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dc3290e95d0abc5c5a4ffdd336d2234c0a1ed241" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-local-must-match-map&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;minibuffer-local-must-match-map&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="371c2aa40cf0069dfb0d401511c45d932d8238f6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-local-ns-map&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;minibuffer-local-ns-map&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5cbbfcc0ed02b54140603b63b89033d33dae2f92" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-local-shell-command-map&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;minibuffer-local-shell-command-map&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d7b4ce29a29a7c6f817da21c4909ef69ac3efb28" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-scroll-window&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;minibuffer-scroll-window&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a08709c9c2588b67608a23d1742a508b869f2542" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minibuffer-setup-hook&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;minibuffer-setup-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bc8e53c5bd52cd50b0b333e186c9367d3136e0e1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minor-mode-alist&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;마이너 모드 앨리스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b2c6b66a95d6dc19d899fbdb9c9112b5e4a751f1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minor-mode-list&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;부 모드 목록&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="75b26988be05941df375b7b79242dd83889e7bfe" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minor-mode-map-alist&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;마이너 모드 맵 앨리스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e74d14d7b54e493e613a0220791483515214e9ba" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;minor-mode-overriding-map-alist&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;마이너 모드 재정의 맵 앨리스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9b6b5f09de50ea712ae5dda6a260a8b8a458650e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-buffer-identification&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;모드 라인 버퍼 식별&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a39b9719d0eb92aa934a11f68548787d75711a1f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-client&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;mode-line-client&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="193b431ced64a25d5c8de815f38c000a183a6f56" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-end-spaces&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;mode-line-end-spaces&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e592780a6bb8217f5a2cb4b75efc8f36fae68864" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-frame-identification&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;모드 라인 프레임 식별&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="19a63c09c4d2c80b54f791ad3b590f8322dbf9cd" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-front-space&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;mode-line-front-space&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c54859dfb75068f2e71380e81e19ba090df19f84" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-misc-info&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;mode-line-misc-info&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="21ae1572fa855751b49de70b55d7840d072daec3" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-modes&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;모드 라인 모드&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="31be35ce48d60668b8d58487a6ac27b0568901f9" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-modified&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;모드 라인 수정&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5b0b36caa88ac8370144eec1c571477e56f52065" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-mule-info&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;mode-line-mule-info&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="43147db483c6f4a7c771e30c27461fe9cf96f66b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-position&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;모드 라인 위치&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ec09ff8078ff4edcc85cd6424826f8ed96c383a4" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-process&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;모드 라인 프로세스&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a9caf1e759a19fc1db0810fb7b4e34454445d267" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-line-remote&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;mode-line-remote&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0701e4ff67cec7ea958aab00ee3cd086d8fe263d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mode-name&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;모드 이름&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8919b150b1fb6edb5ac01fbe97c9d96aad42abb2" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;module-file-suffix&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;module-file-suffix&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="14f2aab67668982d108b9787519b786903ec5616" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;most-negative-fixnum&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;대부분의 음수 고정 번호&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="177381edcb8d6f7bc846ccc5afed7b1a41dc3e4c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;most-positive-fixnum&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;가장 긍정적 인 수정 번호&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e75a139cac8e7a6d5a7f1f9ae4935949865a8835" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mouse-fine-grained-tracking&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;마우스 세밀한 추적&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6b3b6d24c2c91a430784e9e79b4b57c6ed60330d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;mouse-position-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;마우스 위치 기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a63840e30d158bb98ba4e73f1adb0a02ac78e44f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;move-frame-functions&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;프레임 이동 기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ff3e1902dda28b93b22a5fd0aaa492bacaa45273" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;multi-query-replace-map&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;다중 쿼리 교체 맵&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3e2034c1ca142d075989cc4ecba1b88fdc95449f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;multibyte-syntax-as-symbol&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;기호로 멀티 바이트 구문&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6f5e8bf6ed474b07f85f77262ab0f53b5a661141" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;multiple-frames&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;다중 프레임&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="44829187d84e231d104c3f32ccb3e7363823b4ce" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;network-coding-system-alist&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;네트워크 코딩 시스템 앨리스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5616abbb16ee2dd9ac85619d73481dc1589693f7" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;noninteractive&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;비대화 형&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a2510ab78884472b0f79a5e3d8e671650e020991" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;normal-auto-fill-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;일반 자동 채우기 기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="76791fb61d841a3f5f76587e39489a38c5798400" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;num-input-keys&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;num-input-keys&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b7abfe57f177c980f51dd02deb7bd33b443966c0" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;num-nonmacro-input-events&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;num-nonmacro-input-events&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="baf513fcccc590093485e4d72dcfc0afeff09de0" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;obarray&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;obarray&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b8213a62a693e3766666dad4a7bd2a22373f177a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;other-window-scroll-buffer&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;other-window-scroll-buffer&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3f2c60d4788d574c5a9cef281fc82cbd3a16e4aa" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;overlay-arrow-position&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;오버레이 화살표 위치&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ca1987d4674cf936e4b1fb4d2afa7ddfe232112c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;overlay-arrow-string&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;오버레이 화살표 문자열&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e07efe1f447c463c1c08fb38d39c55ea30acbd98" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;overlay-arrow-variable-list&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;overlay-arrow-variable-list&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="20dd5d84417ea8ca8312a14b7914f7fc8eea3cee" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;overriding-local-map-menu-flag&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;overriding-local-map-menu-flag&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="be13b9a768581043e77c56f764d76fb94d660319" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;overriding-local-map&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;재정의-로컬 맵&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="98be6517446b95446c3d1709a616102fdf7644ff" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;overriding-terminal-local-map&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;재정의 터미널 로컬 맵&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8dc0f7318b1f19ef26b3bd67109c22c8467271af" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;overwrite-mode&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;덮어 쓰기 모드&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9e8245cfaf85314e5235e930f971ef6ee8f9dc6d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;parse-sexp-lookup-properties&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;parse-sexp-lookup-properties&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f726b493c8fb9d6d8d69be4d17e1e6505d5a7cc4" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;path-separator&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;경로 구분자&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="53cb9b52cf9d9b46ec49de66d098b2ec962b9fd0" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;play-sound-functions&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;소리 재생 기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5c3584f80d28e5c0513edeaa1e092d476761b597" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;post-command-hook&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;사후 명령 후크&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d70f6026c68c1e06124135755d292c256c4c1db8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;post-gc-hook&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;post-gc-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="08bd5edcc50375e7b65fac1fd0a3e04dfccb828e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;pre-command-hook&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;사전 명령 후크&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eb1b1cde643fe4cc480040f4519a81bc020c5761" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;pre-redisplay-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;사전 재표시 기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e2ca063852b7b8e485ec89989264c7b77c73fac8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;pre-redisplay-functions&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;사전 재표시 기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ba2467d8320e945004dfe3fc03effb39d9052088" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;prefix-arg&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;prefix-arg&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bab24bb81b6a382b7350fd86e8658845cd3d67f7" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;prefix-help-command&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;prefix-help-command&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6672468f034c87daa5836ec0f0b4d9b677154918" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-charset-text-property&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;print-charset-text-property&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="79882dccfc319f221de8f30046959567ce11ee96" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-circle&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;print-circle&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2a2b6c11a9bc60be105ac033d07a0a66d9d78849" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-continuous-numbering&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;연속 번호 인쇄&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9714a11d0a7f99d9a01cd1c64315ece9a26b76db" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-escape-control-characters&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;print-escape-control-characters&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="714b8812329d456aefecfcf671cfc7dd1891d8fc" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-escape-multibyte&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;print-escape-multibyte&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1feb35a095a241deb563cb8d9f690e6d84ded0dd" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-escape-newlines&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;print-escape-newlines&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bcbb9005440f3c38af11aec3fa222a5dea048308" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-escape-nonascii&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;print-escape-nonascii&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5b89dd5b2970558e5b018540d117f3df1f3ade4d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-gensym&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;print-gensym&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="51c00282e03f0a5aa400ea87143c27f75327b598" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-length&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;인쇄 길이&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="57b41f21e22342d0bbd7fffaef361e2d6e5f36f7" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-level&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;인쇄 수준&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="74ead417ddae9a2d75066b36d9e696a1a78d729d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-number-table&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;print-number-table&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="037401177cb07b1411186c4aba51fe7c0c040adf" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;print-quoted&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;인쇄 인용&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a65714133a8408f0bd7be560a8cdd47c8f4fc426" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;printable-chars&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;printable-chars&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="611ea996f10d4c25a854fc5ea8a54166d7a44148" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;process-adaptive-read-buffering&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;프로세스 적응 형 읽기 버퍼링&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d5e12b2e996994ec0cf11b9a8f4debfa0926e2d8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;process-coding-system-alist&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;프로세스 코딩 시스템 앨리스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5f11e76a3793ebab21a369f36821f4a89bb4ba2c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;process-connection-type&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;프로세스 연결 유형&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b67b6b5510e69a1f4e3a022dd80be4c2e36d462d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;process-environment&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;프로세스 환경&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d8ac6385b0dc4dc0ee1ee8f4c46ef6ebe503020b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;process-file-side-effects&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;프로세스 파일 부작용&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b1b2d7460a6b05a9bcb642a5700723553bae6847" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;prog-indentation-context&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;prog-indentation-context&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1830c06835a0e20db16bafca31f5834b929a50a1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;pure-bytes-used&lt;/strong&gt;</source>
          <target state="translated">변수 : 사용 된 &lt;strong&gt;순수 바이트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="66a3f792e474e308672f80838c4f10432f4e118a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;purify-flag&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;purify-flag&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3adf5b7133413df563c91a0ef11cdf76cb3790da" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;query-replace-history&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;쿼리 교체 기록&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ff95803fedda17b5114acac43e82f5c140a4226a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;query-replace-map&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;query-replace-map&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6ce45a120c6e49a7b41bfc8716d2e9653fc4b7e8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;quit-flag&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;quit-flag&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="72a441d06bb7a1bd54c919b6c6f3e874d524c2a1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;read-circle&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;읽기 원&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c4ac3e99cb62a29779dcd3ab7c007943ed1231a7" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;read-expression-history&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;읽기 식 기록&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ff19bc17082940aa0807bc01430858d484427adb" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;read-file-name-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;파일 이름 읽기 기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e91adc5b898dad023be62b9a78c7b1c3a50dbc8a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;real-last-command&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;실제 마지막 명령&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="98810949447199bb0eb664559937043db90450a5" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;regexp-history&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;regexp-history&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="97489fd0dd0f3b7690d60f65e7052743ff8be68b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;regexp-unmatchable&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;정규 표현식과 일치하지 않음&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="675f28b09b2460be6c86903892d66725e86df6f8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;register-alist&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;register-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4387cf85b95bd49498e71693448f5e0d8dadb142" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;replace-re-search-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;재검색 기능 바꾸기&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b0846d5930674e38df65035db55dd49557d1e765" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;replace-search-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;검색 기능 바꾸기&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4d37342bfc29ff0e0b5bbdc6b01ce20166eab36a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;revert-buffer-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;revert-buffer-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="41e3e32f56700d7ba77f106f5ce525fb99f1456e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;revert-buffer-in-progress-p&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;revert-buffer-in-progress-p&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e2053393ff152cc2e43e01d7f777405fd47b93dc" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;revert-buffer-insert-file-contents-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;revert-buffer-insert-file-contents-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9cd926fe96114e69f7b5c891374db5574c760fd9" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;right-fringe-width&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;오른쪽 가장자리 너비&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7d96194d8740752b78f1a809dbd3478924eb6aed" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;right-margin-width&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;오른쪽 여백 너비&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="889a66244500fe2d8c18b731ae5feae3f92bb45f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;save-buffer-coding-system&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;저장 버퍼 코딩 시스템&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="57afdb21a853bff7428faa03cfad7c9a448ffcd8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;scroll-bar-height&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;스크롤바 높이&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="be5e7109c45594cf33f12b6ea4a9e7f3dadaf0f8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;scroll-bar-width&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;스크롤 막대 너비&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="434e2b3dcefbafa5398278f5a61dfe4b7fcb8345" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;search-spaces-regexp&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;search-spaces-regexp&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4340847e2f67616ec787e195a7c2858210b56015" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;select-safe-coding-system-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;select-safe-coding-system-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1831e733b22a056af98882b1552151fc46c02c59" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;selective-display&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;선택적 표시&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="11b4c9eb78618adbff73e39b444a72117d7411d0" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;set-message-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;set-message-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3f491412f89b307e4a0ec96f592ab35133196c69" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;shell-command-history&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;shell-command-history&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b7e6c4d7ad25138d099d053482e6703291f7b7e7" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;show-help-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;show-help-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="783ec957c651f7f83782b450a000b309a4ce1364" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;special-event-map&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;특수 이벤트 맵&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="99e7c5a93ad99e869e213461270445d9078f0d5c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;split-string-default-separators&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;분할 문자열 기본 구분 기호&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b2c521cb94f3c5649e630c4d705fe2d1926a77f4" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;standard-display-table&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;표준 디스플레이 테이블&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9dd8c63e1fb4d533225e769169d3d10c63eb7088" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;standard-input&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;표준 입력&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b9d4a7bd5f8b9fdb133e14531a6a698fd0b71bf0" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;standard-output&lt;/strong&gt;</source>
          <target state="translated">가변 : &lt;strong&gt;표준 출력&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="08f0ae2d7753d8824a05d6b6ad21e2889d5290db" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;standard-translation-table-for-decode&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;디코딩을위한 표준 번역 테이블&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dc2440913b14411c208887c1f19285ce0a191b96" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;standard-translation-table-for-encode&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;인코딩을위한 표준 번역 테이블&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="461a0aa834801ae75fd0086eaef04f87d5a78be8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;string-chars-consed&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;string-chars-consed&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="699b056f171c4f5afdd73367578c672468f29b60" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;strings-consed&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;문자열 고려&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0dcf3720d4b860619097e3a21dafe1f7b9299d84" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;suspend-hook&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;suspend-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b1a71b978079f7cff48c84c8ecd0bcda1770d484" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;suspend-resume-hook&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;suspend-resume-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e6337538882e76d02586bd36c531849a951d1cdf" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;symbols-consed&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;기호 고려&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="25e6dec88de3f226b07d5e8bf0f69b2be742b7c1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;syntax-propertize-extend-region-functions&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;구문 속성 확장 영역 함수&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="87d9905c2701294a4109f6a48b8979936a068393" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;syntax-propertize-function&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;구문 특성화 기능&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e3f87b4286f3265a19fb998dd555768298f25bba" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;system-configuration&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;시스템 구성&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="66df9703724b9d759fcd2b043b2d01184b130233" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;system-key-alist&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;system-key-alist&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6786ef8a1f37da4d6319dd616ce81b8227b6eb8c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;system-messages-locale&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;시스템 메시지 로케일&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="371c0190f5ec25197c7630ba577cbf8c1331b042" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;system-time-locale&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;시스템 시간 로케일&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bf5639fde8821d5cc1ad48437ebfe6aa9738f61d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;system-type&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;시스템 유형&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a675e2d72ecd1da0387d63049b2828deb093673a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tabulated-list-entries&lt;/strong&gt;</source>
          <target state="translated">변수 : &lt;strong&gt;표로 된 목록 항목&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4f2eb578ff0d245bd0dff6ecf8ee761a766a23de" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tabulated-list-format&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;tabulated-list-format&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9f7067dd7254e3238c983aed1d37f4ebe77aa9b7" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tabulated-list-printer&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;tabulated-list-printer&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3c97bf95b79e019d9b5182776a8f5c6609866827" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tabulated-list-revert-hook&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;tabulated-list-revert-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0f3e483f91a1d8dfa7b09ce5a22f77c609145824" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tabulated-list-sort-key&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;tabulated-list-sort-key&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1147eb98194a351344e2d997c3ee7bf11a9bb126" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;temp-buffer-setup-hook&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;temp-buffer-setup-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0caa429d00a021bc1556866553fa6b73d4e0fc34" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;temp-buffer-show-hook&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;temp-buffer-show-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f212a24b60e537a15e8f75d9119b9567ef469020" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;text-mode-abbrev-table&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;text-mode-abbrev-table&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1f0844b40a97b4be956f62eae1cfbbff3d6258da" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;text-property-default-nonsticky&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;text-property-default-nonsticky&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b1e419c165532c632e00ccd95f70d330d0f64a5b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;this-command&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;this-command&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="297d1979b7f5427b9509fa3cf06f815bb0af8a7f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;this-original-command&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;this-original-command&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b48a39108eff4653b524e31944527f365b05cd4d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;thread-list-refresh-seconds&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;thread-list-refresh-seconds&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7884b8e2bb05230dbde0f0d7365de33252300aa0" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tool-bar-border&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;tool-bar-border&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="44f25abc25808c3a7744b9241a14d72bbd11ff8c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tool-bar-button-margin&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;tool-bar-button-margin&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="14f8f2b605670e591498747110b0c33eb42a0af2" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tool-bar-button-relief&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;tool-bar-button-relief&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e9b3a9b587a8775736da9d44a31e7c5d99336097" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tool-bar-map&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;tool-bar-map&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a05cad28a5e4d8b51cccde2de6a5fa7a94abd288" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tooltip-functions&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;tooltip-functions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="573211452e6c4ef792ce21c1db73b1a814df64f0" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;translation-table-for-input&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;translation-table-for-input&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b79311360ceb7e6638e083bedd1df2c417eb75c3" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tty-erase-char&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;tty-erase-char&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3aa6e2d754f329ffbff935d1ac0a93ad80d0733c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;tty-setup-hook&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;tty-setup-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9b73efc43ce425c94e83e17f30f7449470d8dd86" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;undo-auto-current-boundary-timer&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;undo-auto-current-boundary-timer&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e338284678203b7463487f3a38f18668a9d26d39" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;undo-in-progress&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;undo-in-progress&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc3a27d0e93099cfc7171ba95e793bb7ed353ec6" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;unicode-category-table&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;unicode-category-table&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7afe370e1d46249c18d745a0dc7fbf9bdb8eef67" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;unload-feature-special-hooks&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;unload-feature-special-hooks&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fd11fc4e6e42b3cc0de62db98be3a4c0c8bccc1d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;unread-command-events&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;unread-command-events&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="946722b8cb0ff2ee2910d07130fdc7f7c782c426" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;use-hard-newlines&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;use-hard-newlines&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="786c193f286ea5179898653206c020a80768c208" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;user-emacs-directory&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;user-emacs-directory&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ceebe7ba64bfea0f550ec298cc153ca246f98e86" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;user-init-file&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;user-init-file&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cfea75ea634eb8ad39199db99d8ba535b9ed2097" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;values&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;values&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="522e5625b0fbc01e798b27a4c5f94bdb885d18c4" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;vc-mode&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;vc-mode&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="43e2a353a5150a903df3ca4b92c7ab3f88ce13fa" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;vector-cells-consed&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;vector-cells-consed&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c071c04398be6f2cb186133995742e61ccc7befc" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;vertical-scroll-bar&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;vertical-scroll-bar&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="81d4633888dccbafa8bde2eda5ec728b34192711" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;warning-fill-column&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;warning-fill-column&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3fa8b172d156adef920428241bd31b7cb754834c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;warning-fill-prefix&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;warning-fill-prefix&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6c69263a21bccd8bfbfed2061779efaee5079e32" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;warning-levels&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;warning-levels&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="096047b56aa4383656a9ac163f7f38391c0c4089" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;warning-prefix-function&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;warning-prefix-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7c843af6368d9caae09ff7b4e66524346dd31636" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;warning-series&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;warning-series&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7c63597e64edc181a5396ee2666084330c5edb71" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;warning-type-format&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;warning-type-format&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4bf59029547cbdbb42e4323a83f43477dbcfed16" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;while-no-input-ignore-events&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;while-no-input-ignore-events&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="69fbaf905df9b00d1942a22becc24ad885240319" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-buffer-change-functions&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;window-buffer-change-functions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="14679c115dc17fc87633dd0f01ba2be5c85754f1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-configuration-change-hook&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;window-configuration-change-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fb739634a1df959fb1dd68e97b424a1e72719e11" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-persistent-parameters&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;window-persistent-parameters&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="95fa8e8146f1850ede6c947edeb16d5d45c98b77" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-point-insertion-type&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;window-point-insertion-type&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0ebb5e1d0bcd5e84e0a7dbbf5089a09750c2f68b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-scroll-functions&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;window-scroll-functions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1c9809b2bd728344c75b4e3b6b9d2f9db98047b2" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-selection-change-functions&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;window-selection-change-functions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="acb59aff6dbaa1554bd50a78e972502e8e5404ef" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-setup-hook&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;window-setup-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c65e15c55a876fb6083a4b736809b2a104daf409" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-size-change-functions&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;window-size-change-functions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d75612fc50a8d1813f4abe88bf49cdc0c8880dc8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-size-fixed&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;window-size-fixed&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b5627f954b0b8a495bfbe237b060b108651d3c6a" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-state-change-functions&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;window-state-change-functions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="757c57f59ca994c10853355266d4e88bba5288fd" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-state-change-hook&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;window-state-change-hook&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b8645cf95e9c550c8ed3f67ebc8fd826e42fc307" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;window-system&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;window-system&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="adbe12baa2db23a062813dd3a646e8edfa77ea37" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;wrap-prefix&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;wrap-prefix&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c4549ca7273c71bfdf8b223c03f9d767e14e0478" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;write-contents-functions&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;write-contents-functions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="29333e33d28e0e40a9904f8d0ffd91d95ab3effa" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;write-file-functions&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;write-file-functions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7d11877c1e6846044b38635ab52216f7c4b6c73b" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;write-region-annotate-functions&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;write-region-annotate-functions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5d2a14032fdb83dd7fe009543a2246d77fb45a62" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;write-region-inhibit-fsync&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;write-region-inhibit-fsync&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0c076e43081d7a072111ddc45af25035b493dd5e" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;write-region-post-annotation-function&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;write-region-post-annotation-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8b6a885eab74f501f58feaae71104b968467c358" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;x-alt-keysym&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;x-alt-keysym&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fd8079b44c5955bef31cee1b7517d4cedaf4811f" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;x-ctrl-keysym&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;x-ctrl-keysym&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="de0e63247b3545a9e78734530920dce49af33df8" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;x-hyper-keysym&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;x-hyper-keysym&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="59dfd7c295892d35a49b7bdf7aa718574fe2e935" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;x-meta-keysym&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;x-meta-keysym&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7153899d926404f7f4bb38e2f4d1a0e234c70d1c" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;x-pointer-shape&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;x-pointer-shape&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3e847ce358f0ff8d292d83ad98b5d71abfbffdf1" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;x-resource-class&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;x-resource-class&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3dd14373280f6ec7ed9a984e9fc628e7bf92b467" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;x-resource-name&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;x-resource-name&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dacb08b5af492be0690f390524227c1097fad694" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;x-sensitive-text-pointer-shape&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;x-sensitive-text-pointer-shape&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dcb26b46ff482368de45867502ed3f4cf6ed6d1d" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;x-super-keysym&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;x-super-keysym&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6b433ffb98ceda78f8bfff33db982f8f2bfe5f47" translate="yes" xml:space="preserve">
          <source>Variable: &lt;strong&gt;yank-undo-function&lt;/strong&gt;</source>
          <target state="translated">Variable: &lt;strong&gt;yank-undo-function&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="5aa8072cb7560c375b88fab2c25f2edc71292437" translate="yes" xml:space="preserve">
          <source>Variables Affecting Output</source>
          <target state="translated">Variables Affecting Output</target>
        </trans-unit>
        <trans-unit id="4d580b8a57c61e0eb63214714c032421b8be0275" translate="yes" xml:space="preserve">
          <source>Variables Used in the Mode Line</source>
          <target state="translated">Variables Used in the Mode Line</target>
        </trans-unit>
        <trans-unit id="485d8da4dbe56f282ec7d77c6e57875429143138" translate="yes" xml:space="preserve">
          <source>Variables can also have buffer-local bindings (see &lt;a href=&quot;buffer_002dlocal-variables#Buffer_002dLocal-Variables&quot;&gt;Buffer-Local Variables&lt;/a&gt;); a few variables have terminal-local bindings (see &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;). These kinds of bindings work somewhat like ordinary local bindings, but they are localized depending on where you are in Emacs.</source>
          <target state="translated">Variables can also have buffer-local bindings (see &lt;a href=&quot;buffer_002dlocal-variables#Buffer_002dLocal-Variables&quot;&gt;Buffer-Local Variables&lt;/a&gt;); a few variables have terminal-local bindings (see &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;). These kinds of bindings work somewhat like ordinary local bindings, but they are localized depending on where you are in Emacs.</target>
        </trans-unit>
        <trans-unit id="d5d280c591e7e33c5e92151fce25a4e8e58e3f0e" translate="yes" xml:space="preserve">
          <source>Variables controlling completion behavior.</source>
          <target state="translated">Variables controlling completion behavior.</target>
        </trans-unit>
        <trans-unit id="7be681eb34254c92b95a0818571edd5b6ea48661" translate="yes" xml:space="preserve">
          <source>Variables of type &lt;code&gt;DEFVAR_BOOL&lt;/code&gt; can only take on the values &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;t&lt;/code&gt;. Attempting to assign them any other value will set them to &lt;code&gt;t&lt;/code&gt;:</source>
          <target state="translated">Variables of type &lt;code&gt;DEFVAR_BOOL&lt;/code&gt; can only take on the values &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;t&lt;/code&gt; . Attempting to assign them any other value will set them to &lt;code&gt;t&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="58eb0b8c5a0676018a2981e2b03fce8d93b69a0f" translate="yes" xml:space="preserve">
          <source>Variables of type &lt;code&gt;DEFVAR_INT&lt;/code&gt; can take on only integer values. Attempting to assign them any other value will result in an error:</source>
          <target state="translated">Variables of type &lt;code&gt;DEFVAR_INT&lt;/code&gt; can take on only integer values. Attempting to assign them any other value will result in an error:</target>
        </trans-unit>
        <trans-unit id="a760b32f10356fd693c0e949f3529b8609b2405d" translate="yes" xml:space="preserve">
          <source>Variables programs bind to customize their warnings.</source>
          <target state="translated">Variables programs bind to customize their warnings.</target>
        </trans-unit>
        <trans-unit id="5260444b76ef1bd438c61585595a2c39f70147c5" translate="yes" xml:space="preserve">
          <source>Variables set by the command loop for you to examine.</source>
          <target state="translated">Variables set by the command loop for you to examine.</target>
        </trans-unit>
        <trans-unit id="9e74dc189f2d7f134363b60d83dc79b5f8b9a1e5" translate="yes" xml:space="preserve">
          <source>Variables that Never Change</source>
          <target state="translated">Variables that Never Change</target>
        </trans-unit>
        <trans-unit id="a3ec36552e7ef886e8d62fdcd9e40602c84c636a" translate="yes" xml:space="preserve">
          <source>Variables that are aliases for other variables.</source>
          <target state="translated">Variables that are aliases for other variables.</target>
        </trans-unit>
        <trans-unit id="e4cdcb436e2561abd3e1325f7eefb1a1b1e71a30" translate="yes" xml:space="preserve">
          <source>Variables that control what the printing functions do.</source>
          <target state="translated">Variables that control what the printing functions do.</target>
        </trans-unit>
        <trans-unit id="ff2c99475d7a3d9deddc9d798776c373e2470e09" translate="yes" xml:space="preserve">
          <source>Variables that hold kill ring data.</source>
          <target state="translated">Variables that hold kill ring data.</target>
        </trans-unit>
        <trans-unit id="29c9d74f4b54df072a8bc059ae81983cad7e4a7c" translate="yes" xml:space="preserve">
          <source>Variables that never change.</source>
          <target state="translated">Variables that never change.</target>
        </trans-unit>
        <trans-unit id="a6083e693117f8c2616afa79a4ff3a68d44f37e9" translate="yes" xml:space="preserve">
          <source>Variables used in that data structure.</source>
          <target state="translated">Variables used in that data structure.</target>
        </trans-unit>
        <trans-unit id="a4d0dc31792c68fdca52220f79d3af04e609de89" translate="yes" xml:space="preserve">
          <source>Variables users set to control display of warnings.</source>
          <target state="translated">Variables users set to control display of warnings.</target>
        </trans-unit>
        <trans-unit id="b2a556c5d947fd30acff0aa48693d5eb2b778b10" translate="yes" xml:space="preserve">
          <source>Variables usually don&amp;rsquo;t need to be autoloaded. An exception is if the variable on its own is generally useful without the whole defining library being loaded. (An example of this might be something like &lt;code&gt;find-exec-terminator&lt;/code&gt;.)</source>
          <target state="translated">Variables usually don&amp;rsquo;t need to be autoloaded. An exception is if the variable on its own is generally useful without the whole defining library being loaded. (An example of this might be something like &lt;code&gt;find-exec-terminator&lt;/code&gt; .)</target>
        </trans-unit>
        <trans-unit id="2766d9e281c08653c4618f82d2023d28bdbb7732" translate="yes" xml:space="preserve">
          <source>Variables with Restricted Values</source>
          <target state="translated">Variables with Restricted Values</target>
        </trans-unit>
        <trans-unit id="6421a722adc5c1bcc5c731d9a977c2b5318c3f53" translate="yes" xml:space="preserve">
          <source>Various customization hooks and variables.</source>
          <target state="translated">Various customization hooks and variables.</target>
        </trans-unit>
        <trans-unit id="4e1c7ebb12752ab41efb9466049f1adff93ab977" translate="yes" xml:space="preserve">
          <source>Various data types that can be used as input streams.</source>
          <target state="translated">Various data types that can be used as input streams.</target>
        </trans-unit>
        <trans-unit id="839ac4fca006549962c3f7de05f36bcb82e169ab" translate="yes" xml:space="preserve">
          <source>Various data types that can be used as output streams.</source>
          <target state="translated">Various data types that can be used as output streams.</target>
        </trans-unit>
        <trans-unit id="5ca1f5efe5ff9860ebf2a0c8b320c6474710eb78" translate="yes" xml:space="preserve">
          <source>Various other formats are supported.</source>
          <target state="translated">Various other formats are supported.</target>
        </trans-unit>
        <trans-unit id="0ac489d9a1895c6f2eb014ecb11d0e2c0cdd725c" translate="yes" xml:space="preserve">
          <source>Vector Type</source>
          <target state="translated">Vector Type</target>
        </trans-unit>
        <trans-unit id="4cad8cb182489b679287441dffb83204bc591f30" translate="yes" xml:space="preserve">
          <source>Vector of &lt;var&gt;len&lt;/var&gt; elements of type &lt;var&gt;type&lt;/var&gt;, defaulting to bytes. The &lt;var&gt;type&lt;/var&gt; is any of the simple types above, or another vector specified as a list of the form &lt;code&gt;(vec &lt;var&gt;len&lt;/var&gt; [&lt;var&gt;type&lt;/var&gt;])&lt;/code&gt;.</source>
          <target state="translated">Vector of &lt;var&gt;len&lt;/var&gt; elements of type &lt;var&gt;type&lt;/var&gt; , defaulting to bytes. The &lt;var&gt;type&lt;/var&gt; is any of the simple types above, or another vector specified as a list of the form &lt;code&gt;(vec &lt;var&gt;len&lt;/var&gt; [&lt;var&gt;type&lt;/var&gt;])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c4d8fa69b55a1468bf147abf44bbdbf7cd114cec" translate="yes" xml:space="preserve">
          <source>Vectors</source>
          <target state="translated">Vectors</target>
        </trans-unit>
        <trans-unit id="dd890137f12c8269fe2f6e2d8f00dbeec49853de" translate="yes" xml:space="preserve">
          <source>Vectors are printed with square brackets surrounding the elements. Thus, a vector whose elements are the symbols &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; is printed as &lt;code&gt;[a b a]&lt;/code&gt;. You can write vectors in the same way in Lisp input.</source>
          <target state="translated">Vectors are printed with square brackets surrounding the elements. Thus, a vector whose elements are the symbols &lt;code&gt;a&lt;/code&gt; , &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; is printed as &lt;code&gt;[a b a]&lt;/code&gt; . You can write vectors in the same way in Lisp input.</target>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="f6ac74c77426f288c7c85c95d3e2e0752da06bc7" translate="yes" xml:space="preserve">
          <source>Version Information</source>
          <target state="translated">Version Information</target>
        </trans-unit>
        <trans-unit id="6f961280b418e89ebf7d9a94a505fd17524de6c1" translate="yes" xml:space="preserve">
          <source>Vertical Fractional Scrolling</source>
          <target state="translated">Vertical Fractional Scrolling</target>
        </trans-unit>
        <trans-unit id="24f114ffd0d6b48f33aeb1c66fd28edb81d979f9" translate="yes" xml:space="preserve">
          <source>Vertical scroll amount, in pixels. Normally, this is 0.</source>
          <target state="translated">Vertical scroll amount, in pixels. Normally, this is 0.</target>
        </trans-unit>
        <trans-unit id="3f9b0b4839d8e13d831fc5b511adb5b36b696d39" translate="yes" xml:space="preserve">
          <source>Very fast lookup-tables.</source>
          <target state="translated">Very fast lookup-tables.</target>
        </trans-unit>
        <trans-unit id="b6da6c696ae90f36386ef2ac32097cf341e0e381" translate="yes" xml:space="preserve">
          <source>Via the Package Menu, users may download packages from &lt;em&gt;package archives&lt;/em&gt;. Such archives are specified by the variable &lt;code&gt;package-archives&lt;/code&gt;, whose default value contains a single entry: the archive hosted by the GNU project at &lt;a href=&quot;https://elpa.gnu.org&quot;&gt;https://elpa.gnu.org&lt;/a&gt;. This section describes how to set up and maintain a package archive.</source>
          <target state="translated">Via the Package Menu, users may download packages from &lt;em&gt;package archives&lt;/em&gt;. Such archives are specified by the variable &lt;code&gt;package-archives&lt;/code&gt; , whose default value contains a single entry: the archive hosted by the GNU project at &lt;a href=&quot;https://elpa.gnu.org&quot;&gt;https://elpa.gnu.org&lt;/a&gt;. This section describes how to set up and maintain a package archive.</target>
        </trans-unit>
        <trans-unit id="968106212d48214e704ba7218007699b908cc011" translate="yes" xml:space="preserve">
          <source>Views inside and outside of Edebug.</source>
          <target state="translated">Views inside and outside of Edebug.</target>
        </trans-unit>
        <trans-unit id="d4cd645bdf9acd554823451c75a4b3ac95fd503c" translate="yes" xml:space="preserve">
          <source>Visibility is meaningless on text terminals, since only the selected frame is actually displayed in any case.</source>
          <target state="translated">Visibility is meaningless on text terminals, since only the selected frame is actually displayed in any case.</target>
        </trans-unit>
        <trans-unit id="08d6eb9d7d0b70e1e2f7ff16375b109c59731e9d" translate="yes" xml:space="preserve">
          <source>Visibility of Frames</source>
          <target state="translated">Visibility of Frames</target>
        </trans-unit>
        <trans-unit id="d3a94bce45b2297d43744ffef2942438b299a47f" translate="yes" xml:space="preserve">
          <source>Visiting Files</source>
          <target state="translated">Visiting Files</target>
        </trans-unit>
        <trans-unit id="0c362d65c0b71c0282bdf8488948910da13a2012" translate="yes" xml:space="preserve">
          <source>Visiting a file means reading a file into a buffer. Once this is done, we say that the buffer is &lt;em&gt;visiting&lt;/em&gt; that file, and call the file &lt;em&gt;the visited file&lt;/em&gt; of the buffer.</source>
          <target state="translated">Visiting a file means reading a file into a buffer. Once this is done, we say that the buffer is &lt;em&gt;visiting&lt;/em&gt; that file, and call the file &lt;em&gt;the visited file&lt;/em&gt; of the buffer.</target>
        </trans-unit>
        <trans-unit id="0274a1e55edf09cbea63b919421a47f8e8c9255d" translate="yes" xml:space="preserve">
          <source>Visiting a file, with &lt;code&gt;find-file-noselect&lt;/code&gt; or the commands that use it, performs conversion likewise (because it calls &lt;code&gt;insert-file-contents&lt;/code&gt;); it also calls the mode function for each format that it decodes. It stores a list of the format names in the buffer-local variable &lt;code&gt;buffer-file-format&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;find-file-noselect&lt;/code&gt; 또는이를 사용하는 명령을 사용 하여 파일을 방문하면 마찬가지로 변환이 수행됩니다 ( &lt;code&gt;insert-file-contents&lt;/code&gt; 를 호출하기 때문 ). 또한 디코딩하는 각 형식에 대해 모드 함수를 호출합니다. 버퍼 로컬 변수 &lt;code&gt;buffer-file-format&lt;/code&gt; 에 형식 이름 목록을 저장 합니다. .</target>
        </trans-unit>
        <trans-unit id="e2415cb7f63df0c9de23362326ad3c37a9adfc96" translate="yes" xml:space="preserve">
          <source>W</source>
          <target state="translated">W</target>
        </trans-unit>
        <trans-unit id="a7be8dbb65beeab8726a0f360d79b84f3d32f6e2" translate="yes" xml:space="preserve">
          <source>Wait for another thread to notify &lt;var&gt;cond&lt;/var&gt;, a condition variable. This function will block until the condition is notified, or until a signal is delivered to this thread using &lt;code&gt;thread-signal&lt;/code&gt;.</source>
          <target state="translated">다른 스레드가 조건 변수 인 &lt;var&gt;cond&lt;/var&gt; 를 알릴 때까지 기다리십시오 . 이 함수는 조건이 통보 될 때까지 또는 &lt;code&gt;thread-signal&lt;/code&gt; 사용하여이 스레드에 신호가 전달 될 때까지 차단됩니다. .</target>
        </trans-unit>
        <trans-unit id="749d36dff23d4698291f2b055c5b31742ec5a07c" translate="yes" xml:space="preserve">
          <source>Waiting for Elapsed Time or Input</source>
          <target state="translated">경과 시간 또는 입력 대기</target>
        </trans-unit>
        <trans-unit id="1813a330b6da950a7eb66012d9aa259525fc97b5" translate="yes" xml:space="preserve">
          <source>Waiting for user input or elapsed time.</source>
          <target state="translated">사용자 입력 또는 경과 시간을 기다리는 중입니다.</target>
        </trans-unit>
        <trans-unit id="d0ceaaba51082c2077dd631e1a6651753c03c5ef" translate="yes" xml:space="preserve">
          <source>Warning Basics</source>
          <target state="translated">경고 기본 사항</target>
        </trans-unit>
        <trans-unit id="ea0ef30fd9bda293d78af05a20b81fc75c62d811" translate="yes" xml:space="preserve">
          <source>Warning Options</source>
          <target state="translated">경고 옵션</target>
        </trans-unit>
        <trans-unit id="21cc223192651b1e1f7f5e6e6bc104650334196f" translate="yes" xml:space="preserve">
          <source>Warning Variables</source>
          <target state="translated">경고 변수</target>
        </trans-unit>
        <trans-unit id="950eb9ff619006f2694bdc4c44fc4914c6240d09" translate="yes" xml:space="preserve">
          <source>Warnings concepts and functions to report them.</source>
          <target state="translated">경고 개념 및보고 기능.</target>
        </trans-unit>
        <trans-unit id="a8d4aaa3899c67cd460bfb444f7db67a1e36b907" translate="yes" xml:space="preserve">
          <source>Ways to compose advice</source>
          <target state="translated">조언을 작성하는 방법</target>
        </trans-unit>
        <trans-unit id="79f5da6994eb4e0faa629213a3ff5a2cfe6f96b4" translate="yes" xml:space="preserve">
          <source>Ways to compose advice.</source>
          <target state="translated">조언을 작성하는 방법.</target>
        </trans-unit>
        <trans-unit id="9f42c347cd6eb3cb730ffd48876b95e8ac4d10f8" translate="yes" xml:space="preserve">
          <source>We also speak of the &lt;em&gt;global binding&lt;/em&gt;, which is where (conceptually) the global value is kept.</source>
          <target state="translated">우리는 또한 &lt;em&gt;글로벌 바인딩에&lt;/em&gt; 대해 이야기합니다.&lt;em&gt;&lt;/em&gt; (개념적으로) 글로벌 가치가 유지되는 .</target>
        </trans-unit>
        <trans-unit id="0d668e5cb1bf3fedea5caf8974c18fb37bb6627b" translate="yes" xml:space="preserve">
          <source>We can call this function by passing it to &lt;code&gt;funcall&lt;/code&gt;, like this:</source>
          <target state="translated">다음 과 같이 &lt;code&gt;funcall&lt;/code&gt; 에 전달하여이 함수를 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="34783863c944d7c3a4275a0a72a8a7a87a6a5772" translate="yes" xml:space="preserve">
          <source>We can, however, reasonably conclude that customizing &lt;code&gt;display-buffer-alist&lt;/code&gt; differs from customizing &lt;code&gt;display-buffer-base-action&lt;/code&gt; in two major aspects: it is stronger because it overrides the &lt;var&gt;action&lt;/var&gt; argument of &lt;code&gt;display-buffer&lt;/code&gt;, and it allows to explicitly specify the affected buffers. In fact, displaying other buffers is not affected in any way by a customization for</source>
          <target state="translated">그러나 우리는 합리적으로 그 사용자 정의 결론을 내릴 수있다 &lt;code&gt;display-buffer-alist&lt;/code&gt; 정의는 다른 &lt;code&gt;display-buffer-base-action&lt;/code&gt; 가 우선 있기 때문에 강한 : 두 가지 측면에서이 &lt;var&gt;action&lt;/var&gt; 의 인수 &lt;code&gt;display-buffer&lt;/code&gt; , 그리고 명시 적으로 지정할 수 있습니다 영향을받는 버퍼. 실제로 다른 버퍼를 표시하는 것은 다음에 대한 사용자 정의의 영향을받지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9d3194adcf565512ddaefe5ff7ccea51d2f1f332" translate="yes" xml:space="preserve">
          <source>We could stop with our examples here but Lisp programs still have an ace up their sleeves which they can use to overrule any customization of &lt;code&gt;display-buffer-alist&lt;/code&gt;. It&amp;rsquo;s the variable &lt;code&gt;display-buffer-overriding-action&lt;/code&gt; which they can bind around &lt;code&gt;display-buffer&lt;/code&gt; calls as follows:</source>
          <target state="translated">여기에서 예제로 멈출 수는 있지만 Lisp 프로그램은 여전히 &lt;code&gt;display-buffer-alist&lt;/code&gt; 의 모든 사용자 정의를 무시하는 데 사용할 수있는 에이스를 가지고 있습니다 . 다음과 같이 &lt;code&gt;display-buffer&lt;/code&gt; 호출 주위에 바인딩 할 수 있는 변수 &lt;code&gt;display-buffer-overriding-action&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="bfc5ece5ba431e6c326e9f44789684fd3627a82c" translate="yes" xml:space="preserve">
          <source>We do not bind &lt;code&gt;this-command&lt;/code&gt; with &lt;code&gt;let&lt;/code&gt; because that would restore the old value in case of error&amp;mdash;a feature of &lt;code&gt;let&lt;/code&gt; which in this case does precisely what we want to avoid.</source>
          <target state="translated">&lt;code&gt;this-command&lt;/code&gt; 을 &lt;code&gt;let&lt;/code&gt; 과 결합하지 않는 이유는 오류 발생시 이전 값을 복원하기 때문입니다 .이 경우에는 우리가 피하고 싶은 것을 정확히 수행하는 &lt;code&gt;let&lt;/code&gt; 의 기능입니다 .</target>
        </trans-unit>
        <trans-unit id="159a9d35556998bedeef1f723841442c69d829a8" translate="yes" xml:space="preserve">
          <source>We do not list the error-strings of this error and its subcategories, because the error message is normally constructed from the data items alone when the error condition &lt;code&gt;file-error&lt;/code&gt; is present. Thus, the error-strings are not very relevant. However, these error symbols do have &lt;code&gt;error-message&lt;/code&gt; properties, and if no data is provided, the &lt;code&gt;error-message&lt;/code&gt; property &lt;em&gt;is&lt;/em&gt; used. See &lt;a href=&quot;files#Files&quot;&gt;Files&lt;/a&gt;.</source>
          <target state="translated">오류 조건 &lt;code&gt;file-error&lt;/code&gt; 가 있을 때 오류 메시지는 일반적으로 데이터 항목만으로 구성되기 때문에이 오류 및 해당 하위 범주의 오류 문자열은 나열하지 않습니다 . 따라서 오류 문자열은 그다지 관련성이 없습니다. 그러나 이러한 오류 기호에는 &lt;code&gt;error-message&lt;/code&gt; 속성이 있으며 데이터가 제공되지 않으면 &lt;code&gt;error-message&lt;/code&gt; 속성 &lt;em&gt;이&lt;/em&gt; 사용됩니다. &lt;a href=&quot;files#Files&quot;&gt;파일&lt;/a&gt; 보기 .</target>
        </trans-unit>
        <trans-unit id="5decfae24bac2b0751e1b6135e50a2e5cd9a8a08" translate="yes" xml:space="preserve">
          <source>We do not wish to add new symbols to make finer distinctions unless it is absolutely necessary! In fact, we hope to eliminate some of these alternatives in the future. If you need to make a finer distinction than &lt;code&gt;system-type&lt;/code&gt; allows for, you can test &lt;code&gt;system-configuration&lt;/code&gt;, e.g., against a regexp.</source>
          <target state="translated">꼭 필요한 경우가 아니면 더 세밀하게 구별하기 위해 새 기호를 추가하고 싶지 않습니다! 실제로 우리는 앞으로 이러한 대안 중 일부를 제거하기를 희망합니다. &lt;code&gt;system-type&lt;/code&gt; 이 허용하는 것보다 더 세밀하게 구별해야하는 경우 , 예를 들어 regexp에 대해 &lt;code&gt;system-configuration&lt;/code&gt; 을 테스트 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7be098d6a87976d013ead5aa99eb0d69a9e5b2d1" translate="yes" xml:space="preserve">
          <source>We emphasize that, unlike &lt;code&gt;read-key-sequence&lt;/code&gt;, the functions &lt;code&gt;read-event&lt;/code&gt;, &lt;code&gt;read-char&lt;/code&gt;, and &lt;code&gt;read-char-exclusive&lt;/code&gt; do not perform the translations described in &lt;a href=&quot;translation-keymaps#Translation-Keymaps&quot;&gt;Translation Keymaps&lt;/a&gt;. If you wish to read a single key taking these translations into account, use the function &lt;code&gt;read-key&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;read-key-sequence&lt;/code&gt; 와 달리 read- &lt;code&gt;read-event&lt;/code&gt; , &lt;code&gt;read-char&lt;/code&gt; 및 &lt;code&gt;read-char-exclusive&lt;/code&gt; 함수 는 &lt;a href=&quot;translation-keymaps#Translation-Keymaps&quot;&gt;Translation Keymaps에&lt;/a&gt; 설명 된 번역을 수행하지 않는다는 점을 강조합니다 . 이러한 번역을 고려하여 단일 키를 &lt;code&gt;read-key&lt;/code&gt; 함수를 사용하십시오. .</target>
        </trans-unit>
        <trans-unit id="670f88a4884b1b803e1eba7ef68c45091b8b9985" translate="yes" xml:space="preserve">
          <source>We give functions names because it is convenient to refer to them by their names in Lisp expressions. Also, a named Lisp function can easily refer to itself&amp;mdash;it can be recursive. Furthermore, primitives can only be referred to textually by their names, since primitive function objects (see &lt;a href=&quot;primitive-function-type#Primitive-Function-Type&quot;&gt;Primitive Function Type&lt;/a&gt;) have no read syntax.</source>
          <target state="translated">Lisp 표현식에서 이름으로 참조하는 것이 편리하기 때문에 함수 이름을 지정합니다. 또한 명명 된 Lisp 함수는 자신을 쉽게 참조 할 수 있으며 재귀적일 수 있습니다. 또한, 프리미티브 함수 객체 ( &lt;a href=&quot;primitive-function-type#Primitive-Function-Type&quot;&gt;프리미티브 함수 유형&lt;/a&gt; 참조 )에는 읽기 구문이 없기 때문에 프리미티브는 이름으로 만 텍스트로 참조 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6a7c6edd92c0307bfe9f5ccde285aa6b6206dd77" translate="yes" xml:space="preserve">
          <source>We illustrate these possibilities by calling the following function with various prefixes:</source>
          <target state="translated">다양한 접두사와 함께 다음 함수를 호출하여 이러한 가능성을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="fbd7c8d6e030bec37125599c7ed1141f965b2b86" translate="yes" xml:space="preserve">
          <source>We invite users to write Lisp programs to store and retrieve text properties in files, using these hooks, and thus to experiment with various data formats and find good ones. Eventually we hope users will produce good, general extensions we can install in Emacs.</source>
          <target state="translated">우리는 사용자가 Lisp 프로그램을 작성하여 이러한 후크를 사용하여 파일에 텍스트 속성을 저장 및 검색하고 다양한 데이터 형식을 실험하고 좋은 형식을 찾도록 초대합니다. 결국 우리는 사용자들이 우리가 Emacs에 설치할 수있는 훌륭하고 일반적인 확장을 생산하기를 바랍니다.</target>
        </trans-unit>
        <trans-unit id="5fadf83090f30144af161405290746495a705dbd" translate="yes" xml:space="preserve">
          <source>We now describe some technical details about the exact suffixes that &lt;code&gt;load&lt;/code&gt; tries.</source>
          <target state="translated">이제 &lt;code&gt;load&lt;/code&gt; 가 시도 하는 정확한 접미사에 대한 몇 가지 기술적 세부 사항을 설명 합니다.</target>
        </trans-unit>
        <trans-unit id="98dbbe6139420af597b3a2bbdb6e62506d894544" translate="yes" xml:space="preserve">
          <source>We recommend that modules always perform the compatibility verification, unless they do their job entirely in the initialization function, and don&amp;rsquo;t access any Lisp objects or use any Emacs functions accessible through the environment structure.</source>
          <target state="translated">모듈이 초기화 함수에서 작업을 완전히 수행하지 않는 한 항상 호환성 확인을 수행하고 Lisp 객체에 액세스하거나 환경 구조를 통해 액세스 할 수있는 Emacs 함수를 사용하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="57c90ae2691e132592b9cb39b509e4c7e9d9dffe" translate="yes" xml:space="preserve">
          <source>We recommend that new programs avoid dealing with these complexities by not storing keyboard events in strings. Here is how to do that:</source>
          <target state="translated">새 프로그램은 키보드 이벤트를 문자열에 저장하지 않음으로써 이러한 복잡성을 처리하지 않는 것이 좋습니다. 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0d6e0d2496e8712d25196ff14ad46a0c40573ade" translate="yes" xml:space="preserve">
          <source>We recommend that you only bind this variable for modifications that do not result in lasting changes to buffer text contents (for example face changes or temporary modifications). If you need to delay change hooks during a series of changes (typically for performance reasons), use &lt;code&gt;combine-change-calls&lt;/code&gt; or &lt;code&gt;combine-after-change-calls&lt;/code&gt; instead.</source>
          <target state="translated">버퍼 텍스트 내용을 지속적으로 변경하지 않는 수정 (예 : 얼굴 변경 또는 임시 수정)에 대해서만이 변수를 바인딩하는 것이 좋습니다. 일련의 변경 중 (일반적으로 성능상의 이유로) 변경 후크를 지연해야하는 경우, &lt;code&gt;combine-change-calls&lt;/code&gt; 또는 &lt;code&gt;combine-after-change-calls&lt;/code&gt; 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="74eff4c45f3a86af34cf84ff95f9377a7b69ca68" translate="yes" xml:space="preserve">
          <source>We recommend that you use &lt;code&gt;with-suppressed-warnings&lt;/code&gt; instead, but if you do use this construct, that you use it around the smallest possible piece of code to avoid missing possible warnings other than one you intend to suppress.</source>
          <target state="translated">대신 &lt;code&gt;with-suppressed-warnings&lt;/code&gt; 를 사용 하는 것이 좋지만 이 구문을 사용하는 경우 억제하려는 경고 이외의 가능한 경고가 누락되지 않도록 가능한 가장 작은 코드 부분에 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="6b912ba2b2cf33a76a20dc963c1bb3be8ad475bb" translate="yes" xml:space="preserve">
          <source>We say that &amp;ldquo;the &lt;small&gt;CAR&lt;/small&gt; of this cons cell is&amp;rdquo; whatever object its &lt;small&gt;CAR&lt;/small&gt; slot currently holds, and likewise for the &lt;small&gt;CDR&lt;/small&gt;.</source>
          <target state="translated">우리 는 &quot;이 단점 셀 의 &lt;small&gt;CAR&lt;/small&gt; 은&quot; &lt;small&gt;CAR&lt;/small&gt; 슬롯이 현재 보유하고있는 모든 객체이며 &lt;small&gt;CDR에&lt;/small&gt; 대해서도 마찬가지입니다 .</target>
        </trans-unit>
        <trans-unit id="465e576b1e106e138ab23c2c80f5f7c0d040d01e" translate="yes" xml:space="preserve">
          <source>We say that a variable is void if its symbol has an unassigned value cell (see &lt;a href=&quot;symbol-components#Symbol-Components&quot;&gt;Symbol Components&lt;/a&gt;).</source>
          <target state="translated">심볼에 할당되지 않은 값 셀이 있으면 변수가 무효라고 말합니다 ( &lt;a href=&quot;symbol-components#Symbol-Components&quot;&gt;기호 구성 요소&lt;/a&gt; 참조). ).</target>
        </trans-unit>
        <trans-unit id="b9ff279e59573eaf1b4bba7e1686aa464914ac68" translate="yes" xml:space="preserve">
          <source>We still have two return points, but this time only the outer one has the tag &lt;code&gt;hack&lt;/code&gt;; the inner one has the tag &lt;code&gt;quux&lt;/code&gt; instead. Therefore, &lt;code&gt;throw&lt;/code&gt; makes the outer &lt;code&gt;catch&lt;/code&gt; return the value &lt;code&gt;yes&lt;/code&gt;. The function &lt;code&gt;print&lt;/code&gt; is never called, and the body-form &lt;code&gt;'no&lt;/code&gt; is never evaluated.</source>
          <target state="translated">우리는 여전히 두 개의 리턴 포인트를 가지고 있지만 이번에는 외부 포인트에만 태그 &lt;code&gt;hack&lt;/code&gt; . 내부에는 태그 &lt;code&gt;quux&lt;/code&gt; 가 대신 있습니다. 따라서 &lt;code&gt;throw&lt;/code&gt; 는 외부 &lt;code&gt;catch&lt;/code&gt; 가 &lt;code&gt;yes&lt;/code&gt; 값을 반환하도록합니다 . 함수 &lt;code&gt;print&lt;/code&gt; 는 호출되지 않으며 body-form &lt;code&gt;'no&lt;/code&gt; 는 평가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="247b16deead2e69a7c5e42167c6021981978e59d" translate="yes" xml:space="preserve">
          <source>We suggest not trying to handle arbitrary Lisp objects as text property names or values&amp;mdash;because a program that general is probably difficult to write, and slow. Instead, choose a set of possible data types that are reasonably flexible, and not too hard to encode.</source>
          <target state="translated">임의의 Lisp 개체를 텍스트 속성 이름이나 값으로 처리하지 않는 것이 좋습니다. 일반적인 프로그램은 작성하기 어렵고 느리기 때문입니다. 대신 합리적으로 유연하고 인코딩하기 너무 어렵지 않은 가능한 데이터 유형 세트를 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="71128c7fdcf74454bb577a9a486c3871ebdeee25" translate="yes" xml:space="preserve">
          <source>We use &lt;code&gt;&quot;p&quot;&lt;/code&gt; because the numeric prefix argument is never &lt;code&gt;nil&lt;/code&gt;. Defined in this way, the function does display the message when called from a keyboard macro.</source>
          <target state="translated">숫자 접두사 인수가 &lt;code&gt;nil&lt;/code&gt; 이 아니기 때문에 &lt;code&gt;&quot;p&quot;&lt;/code&gt; 를 사용합니다. 합니다. 이러한 방식으로 정의 된 함수는 키보드 매크로에서 호출 될 때 메시지를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="a0d8bcb390422815013c66894042de12f406dd8c" translate="yes" xml:space="preserve">
          <source>We usually give a name to a function when it is first created. This is called &lt;em&gt;defining a function&lt;/em&gt;, and we usually do it with the &lt;code&gt;defun&lt;/code&gt; macro. This section also describes other ways to define a function.</source>
          <target state="translated">일반적으로 함수가 처음 생성 될 때 이름을 지정합니다. 이를 &lt;em&gt;함수 정의&lt;/em&gt; 라고하며 일반적으로 &lt;code&gt;defun&lt;/code&gt; 매크로를 사용합니다. 이 섹션에서는 함수를 정의하는 다른 방법도 설명합니다.</target>
        </trans-unit>
        <trans-unit id="873aa91f570e057f9aa3234f6805ed6332e2535e" translate="yes" xml:space="preserve">
          <source>We will forget about that form immediately after observing that it fails to create a new frame and uses a fallback action instead.</source>
          <target state="translated">새 프레임을 만들지 못하고 대신 폴백 작업을 사용한다는 사실을 확인한 후 즉시 해당 양식을 잊어 버릴 것입니다.</target>
        </trans-unit>
        <trans-unit id="c4a3883630468df1e98b0ca77da51ca930066e11" translate="yes" xml:space="preserve">
          <source>What &lt;code&gt;re-search-forward&lt;/code&gt; does when the search fails depends on the value of &lt;var&gt;noerror&lt;/var&gt;:</source>
          <target state="translated">무엇을 &lt;code&gt;re-search-forward&lt;/code&gt; 검색이 실패 할 때 수행하는의 값에 따라 달라집니다 &lt;var&gt;noerror&lt;/var&gt; :</target>
        </trans-unit>
        <trans-unit id="05ea3d35535da7f87673c1cd1eeb34b20cc37a96" translate="yes" xml:space="preserve">
          <source>What C variant Emacs is written in.</source>
          <target state="translated">C 변종 Emacs가 작성된 것.</target>
        </trans-unit>
        <trans-unit id="861fd8b53999b4a17c738d46511ecb936ab080b0" translate="yes" xml:space="preserve">
          <source>What Edebug does when matching fails.</source>
          <target state="translated">일치가 실패 할 때 Edebug가 수행하는 작업.</target>
        </trans-unit>
        <trans-unit id="c67ade89bb4aa6b239a652f1f4b73337d1d0d6fc" translate="yes" xml:space="preserve">
          <source>What Emacs does when you report an error.</source>
          <target state="translated">오류를보고 할 때 Emacs가하는 일.</target>
        </trans-unit>
        <trans-unit id="28e86541f604237f1ddde85ce3753dcce2b65f73" translate="yes" xml:space="preserve">
          <source>What Is a Function?</source>
          <target state="translated">기능이란?</target>
        </trans-unit>
        <trans-unit id="087378c8e38ed12b52d683f43c14ee8ece9e15c4" translate="yes" xml:space="preserve">
          <source>What a display table consists of.</source>
          <target state="translated">디스플레이 테이블이 구성하는 것.</target>
        </trans-unit>
        <trans-unit id="ec616d2df336547dda35a45c17f3e58298ee87d6" translate="yes" xml:space="preserve">
          <source>What a keymap looks like as a Lisp object.</source>
          <target state="translated">Lisp 객체로 키맵이 어떻게 보이는지.</target>
        </trans-unit>
        <trans-unit id="021ec0738237627ae757ca297d8c6b9599099f2f" translate="yes" xml:space="preserve">
          <source>What fraction of a line the vertical scrolling covers, or how many lines, depends on what the lines contain. A value of .5 could scroll a line whose height is very short off the screen, while a value of 3.3 could scroll just part of the way through a tall line or an image.</source>
          <target state="translated">세로 스크롤이 덮는 줄의 비율 또는 줄 수는 줄에 포함 된 내용에 따라 다릅니다. 값이 .5이면 높이가 화면에서 매우 짧은 줄을 스크롤 할 수있는 반면 3.3 값은 긴 줄이나 이미지를 통해 중간 부분 만 스크롤 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6fdd046d2b8a52f691781e5e4b4065ce8a7e042a" translate="yes" xml:space="preserve">
          <source>What function a keystroke invokes.</source>
          <target state="translated">키 입력이 호출하는 기능.</target>
        </trans-unit>
        <trans-unit id="443952c0cfcf874d30a07193a08c9c39f6a5cca4" translate="yes" xml:space="preserve">
          <source>What happens when the search fails depends on the value of &lt;var&gt;noerror&lt;/var&gt;. If &lt;var&gt;noerror&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, a &lt;code&gt;search-failed&lt;/code&gt; error is signaled. If &lt;var&gt;noerror&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;search-forward&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt; and does nothing. If &lt;var&gt;noerror&lt;/var&gt; is neither &lt;code&gt;nil&lt;/code&gt; nor &lt;code&gt;t&lt;/code&gt;, then &lt;code&gt;search-forward&lt;/code&gt; moves point to the upper bound and returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">검색이 실패하면 어떤 일이 발생하는지는 &lt;var&gt;noerror&lt;/var&gt; 값에 따라 다릅니다 . 경우 &lt;var&gt;noerror&lt;/var&gt; 있다 &lt;code&gt;nil&lt;/code&gt; 하는 &lt;code&gt;search-failed&lt;/code&gt; 오류가 신호됩니다. 경우 &lt;var&gt;noerror&lt;/var&gt; 이다 &lt;code&gt;t&lt;/code&gt; , &lt;code&gt;search-forward&lt;/code&gt; 반환 &lt;code&gt;nil&lt;/code&gt; 아무것도하지 않습니다. &lt;var&gt;noerror&lt;/var&gt; 가 &lt;code&gt;nil&lt;/code&gt; 도 &lt;code&gt;t&lt;/code&gt; 도 아닌 경우 , &lt;code&gt;search-forward&lt;/code&gt; 은 포인트를 상한으로 이동하고 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="f19193d2fbedb672944d0291bc293133d60a7942" translate="yes" xml:space="preserve">
          <source>What input looks like when you read it.</source>
          <target state="translated">당신이 그것을 읽을 때 어떤 입력이 보이는지.</target>
        </trans-unit>
        <trans-unit id="a42b5e44c394bd52777815237c3498ce41ae6bb8" translate="yes" xml:space="preserve">
          <source>What is a buffer?</source>
          <target state="translated">버퍼 란 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="5ae38b03174dc4954ba4b06e0e5e4b38a7bb839e" translate="yes" xml:space="preserve">
          <source>What is in a face?</source>
          <target state="translated">얼굴에 무엇이 있습니까?</target>
        </trans-unit>
        <trans-unit id="c4ae6bd14e01eb20113c18dbca5377d7ce068c17" translate="yes" xml:space="preserve">
          <source>What kind of comment is active: &lt;code&gt;nil&lt;/code&gt; if not in a comment or in a comment of style &amp;lsquo;</source>
          <target state="translated">어떤 종류의 주석이 활성화되어 있는지 : 주석 또는 스타일 주석에 없으면 &lt;code&gt;nil&lt;/code&gt; '</target>
        </trans-unit>
        <trans-unit id="c9160ba4ba7268eb81a48fb489876b40899f70b7" translate="yes" xml:space="preserve">
          <source>What kinds of colors the terminal supports&amp;mdash;either &lt;code&gt;color&lt;/code&gt;, &lt;code&gt;grayscale&lt;/code&gt;, or &lt;code&gt;mono&lt;/code&gt;.</source>
          <target state="translated">터미널이 지원하는 색상의 종류 ( &lt;code&gt;color&lt;/code&gt; , &lt;code&gt;grayscale&lt;/code&gt; 또는 &lt;code&gt;mono&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7206440741f715ed5c44ff6f60d315b4ef73962f" translate="yes" xml:space="preserve">
          <source>What text looks like in the kill ring.</source>
          <target state="translated">킬 링에 텍스트가 어떻게 생겼는지.</target>
        </trans-unit>
        <trans-unit id="eccb1f7107637b64a67d5c014009d8c69bfd5675" translate="yes" xml:space="preserve">
          <source>What the debugger does.</source>
          <target state="translated">디버거가하는 일.</target>
        </trans-unit>
        <trans-unit id="ed13d4d55780ebbe3cf675a642d9153cf539e6aa" translate="yes" xml:space="preserve">
          <source>What you see while in the debugger.</source>
          <target state="translated">디버거에서 보는 것.</target>
        </trans-unit>
        <trans-unit id="cecc4af34db9dcdfa481eaa7cb202db99df882e8" translate="yes" xml:space="preserve">
          <source>Whatever the name under which the file is eventually found, and the directory where Emacs found it, Emacs sets the value of the variable &lt;code&gt;load-file-name&lt;/code&gt; to that file&amp;rsquo;s name.</source>
          <target state="translated">결국 파일을 찾은 이름과 Emacs가 찾은 디렉토리가 무엇이든 Emacs는 변수 &lt;code&gt;load-file-name&lt;/code&gt; 의 값을 설정합니다. 을 해당 파일의 이름으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="769bb19e615b7f8e2809e5882e2d05a18f57a531" translate="yes" xml:space="preserve">
          <source>When</source>
          <target state="translated">When</target>
        </trans-unit>
        <trans-unit id="97f07d6b05b134b6e3b2450078e6198580db985c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;auto-compression-mode&lt;/code&gt; is enabled, Emacs automatically uncompresses compressed files when you visit them, and automatically recompresses them if you alter and save them. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Compressed-Files.html#Compressed-Files&quot;&gt;Compressed Files&lt;/a&gt; in</source>
          <target state="translated">때 &lt;code&gt;auto-compression-mode&lt;/code&gt; 활성화되어 당신이 그들을 방문 할 때, 이맥스 자동으로 파일을 압축 압축 해제하고 자동으로 변경하는 경우이를 다시 압축하고 저장. &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Compressed-Files.html#Compressed-Files&quot;&gt;압축 파일&lt;/a&gt; 보기 에</target>
        </trans-unit>
        <trans-unit id="646e66db110bb549337e36a5ad5580b44fe21778" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;auto-compression-mode&lt;/code&gt; is enabled, Emacs automatically uncompresses compressed files when you visit them, and automatically recompresses them if you alter and save them. See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Compressed-Files.html#Compressed-Files&quot;&gt;Compressed Files&lt;/a&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c280855fec978ae7ea588ae44343f3fa904554" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;bury-buffer&lt;/code&gt; (see &lt;a href=&quot;buffer-list#Buffer-List&quot;&gt;Buffer List&lt;/a&gt;) operates on the selected window (which shows the buffer that shall be buried), it handles case (2) by calling &lt;code&gt;frame-auto-hide-function&lt;/code&gt; (see &lt;a href=&quot;quitting-windows#Quitting-Windows&quot;&gt;Quitting Windows&lt;/a&gt;) to deal with the selected frame. The other two cases are handled as with &lt;code&gt;replace-buffer-in-windows&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bury-buffer&lt;/code&gt; ( &lt;a href=&quot;buffer-list#Buffer-List&quot;&gt;버퍼 목록&lt;/a&gt; 참조 )가 선택된 창 (매립 될 버퍼를 보여줌)에서 작동 할 때 , 선택된 것을 처리하기 &lt;code&gt;frame-auto-hide-function&lt;/code&gt; ( &lt;a href=&quot;quitting-windows#Quitting-Windows&quot;&gt;Windows 종료&lt;/a&gt; 참조 )을 호출하여 case (2 )를 처리합니다. 틀. 다른 두 경우는 &lt;code&gt;replace-buffer-in-windows&lt;/code&gt; 에서 와 같이 처리됩니다 .</target>
        </trans-unit>
        <trans-unit id="62dc28175bde9a72a361f1efefa93526f51f8e0d" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;capitalize-region&lt;/code&gt; is called interactively, &lt;var&gt;start&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt; are point and the mark, with the smallest first.</source>
          <target state="translated">때 &lt;code&gt;capitalize-region&lt;/code&gt; 대화 형으로,라고 &lt;var&gt;start&lt;/var&gt; 과 &lt;var&gt;end&lt;/var&gt; 먼저 가장 작은, 지점과 마크입니다.</target>
        </trans-unit>
        <trans-unit id="d3633d4051e74c8040e753e9fc8ad78c48eac2b8" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;capitalize-word&lt;/code&gt; is called interactively, &lt;var&gt;count&lt;/var&gt; is set to the numeric prefix argument.</source>
          <target state="translated">때 &lt;code&gt;capitalize-word&lt;/code&gt; 대화라고, &lt;var&gt;count&lt;/var&gt; 숫자 접두사 인수로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="14c2c19840d8f51b1009fb410cb8b7577795b1ee" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;debug-on-entry&lt;/code&gt; is called interactively, it prompts for &lt;var&gt;function-name&lt;/var&gt; in the minibuffer. If the function is already set up to invoke the debugger on entry, &lt;code&gt;debug-on-entry&lt;/code&gt; does nothing. &lt;code&gt;debug-on-entry&lt;/code&gt; always returns &lt;var&gt;function-name&lt;/var&gt;.</source>
          <target state="translated">때 &lt;code&gt;debug-on-entry&lt;/code&gt; 대화 형이라고, 그것은를 입력하라는 메시지 &lt;var&gt;function-name&lt;/var&gt; 미니 버퍼이다. 함수가 입력시 디버거를 호출하도록 이미 설정된 경우 입력시 &lt;code&gt;debug-on-entry&lt;/code&gt; 는 아무 작업도 수행하지 않습니다. &lt;code&gt;debug-on-entry&lt;/code&gt; 는 항상 &lt;var&gt;function-name&lt;/var&gt; 을 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="d9cdcbd511c7be9b7613226685d59905e4e81d54" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;downcase-region&lt;/code&gt; is called interactively, &lt;var&gt;start&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt; are point and the mark, with the smallest first.</source>
          <target state="translated">&lt;code&gt;downcase-region&lt;/code&gt; 이 대화식으로 호출 될 때 &lt;var&gt;start&lt;/var&gt; 과 &lt;var&gt;end&lt;/var&gt; 은 점과 표시이며 가장 작은 것이 먼저 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="9a91b4d51711faa0f3b607fbadd18a85bc85c025" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;downcase-word&lt;/code&gt; is called interactively, &lt;var&gt;count&lt;/var&gt; is set to the numeric prefix argument.</source>
          <target state="translated">때 &lt;code&gt;downcase-word&lt;/code&gt; 대화 형이라고, &lt;var&gt;count&lt;/var&gt; 숫자 접두사 인수로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="ffdc0a04c7d29eefb34897364d931986470c13ac" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;find-file&lt;/code&gt; is called interactively, it prompts for &lt;var&gt;filename&lt;/var&gt; in the minibuffer.</source>
          <target state="translated">때 &lt;code&gt;find-file&lt;/code&gt; 대화 형이라고, 그것은를 입력하라는 메시지 &lt;var&gt;filename&lt;/var&gt; 미니 버퍼이다.</target>
        </trans-unit>
        <trans-unit id="41be64811f6682691b8ab255cfdf3b08798221d5" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;fringe-cursor-alist&lt;/code&gt; has a buffer-local value, and there is no bitmap defined for a cursor type, the corresponding value from the default value of &lt;code&gt;fringes-indicator-alist&lt;/code&gt; is used.</source>
          <target state="translated">경우 &lt;code&gt;fringe-cursor-alist&lt;/code&gt; 버퍼 로컬 값을 가지며, 커서 타입에 대해 정의 된 비트 맵이없는, 디폴트 값에서 해당 값 &lt;code&gt;fringes-indicator-alist&lt;/code&gt; 사용된다.</target>
        </trans-unit>
        <trans-unit id="6102f7fe59282a53519abc9cd1a7ba36dafbcdb5" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;fringe-indicator-alist&lt;/code&gt; has a buffer-local value, and there is no bitmap defined for a logical indicator, or the bitmap is &lt;code&gt;t&lt;/code&gt;, the corresponding value from the default value of &lt;code&gt;fringe-indicator-alist&lt;/code&gt; is used.</source>
          <target state="translated">경우 &lt;code&gt;fringe-indicator-alist&lt;/code&gt; 버퍼 로컬 값을 갖고, 논리 표시 자에 대해 정의 된 비트 맵이없는, 또는 비트 맵이 &lt;code&gt;t&lt;/code&gt; 의 디폴트 값에서 해당 값 &lt;code&gt;fringe-indicator-alist&lt;/code&gt; 사용된다.</target>
        </trans-unit>
        <trans-unit id="ff7569124d2f1bdb1909ed5176f270e51522c325" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;inhibit-message&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, no message will be displayed in the echo area, it will only be logged to &amp;lsquo;</source>
          <target state="translated">경우 &lt;code&gt;inhibit-message&lt;/code&gt; 비이다 &lt;code&gt;nil&lt;/code&gt; 어떠한 메시지는 에코 영역에 표시되지 않으며, 그것은 단지 '로 기록 될</target>
        </trans-unit>
        <trans-unit id="dc1103873e3db33b4aaa3401944505ce479e7276" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;locate-library&lt;/code&gt; is called from a program, it returns the file name as a string. When the user runs &lt;code&gt;locate-library&lt;/code&gt; interactively, the argument &lt;var&gt;interactive-call&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt;, and this tells &lt;code&gt;locate-library&lt;/code&gt; to display the file name in the echo area.</source>
          <target state="translated">때 &lt;code&gt;locate-library&lt;/code&gt; 프로그램에서 호출, 그것은 문자열로 파일 이름을 반환합니다. 사용자가 &lt;code&gt;locate-library&lt;/code&gt; 대화식으로 실행할 때, &lt;var&gt;interactive-call&lt;/var&gt; 인수 는 &lt;code&gt;t&lt;/code&gt; 이며, 이것은 &lt;code&gt;locate-library&lt;/code&gt; 에 에코 영역에 파일 이름을 표시하도록 지시 합니다.</target>
        </trans-unit>
        <trans-unit id="8be3636632ca887811e97095ce158e03f16a012c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;make-temp-file&lt;/code&gt; returns, the file has been created and is empty. At that point, you should write the intended contents into the file.</source>
          <target state="translated">때 &lt;code&gt;make-temp-file&lt;/code&gt; 파일이 생성 비어있다 반환. 이 시점에서 의도 한 내용을 파일에 기록해야합니다.</target>
        </trans-unit>
        <trans-unit id="4a54287d699c1137f2330e3d8c9d0d2560327885" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;nil&lt;/code&gt; is used for &lt;var&gt;end&lt;/var&gt;, it stands for the length of the string. Thus,</source>
          <target state="translated">&lt;var&gt;end&lt;/var&gt; 에 &lt;code&gt;nil&lt;/code&gt; 이 사용 되면 문자열의 길이를 나타냅니다. 그러므로,</target>
        </trans-unit>
        <trans-unit id="0e1b580ad41f89e13ab97c3895fac0b26641a1c1" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;recenter&lt;/code&gt; is called interactively, &lt;var&gt;count&lt;/var&gt; is the raw prefix argument. Thus, typing</source>
          <target state="translated">때 &lt;code&gt;recenter&lt;/code&gt; 대화 형이라고, &lt;var&gt;count&lt;/var&gt; 원시 접두사 인수입니다. 따라서 입력</target>
        </trans-unit>
        <trans-unit id="0d795c479f785a22c40363cc857c013c1e18d457" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;require&lt;/code&gt; is used at top level in a file, it takes effect when you byte-compile that file (see &lt;a href=&quot;byte-compilation#Byte-Compilation&quot;&gt;Byte Compilation&lt;/a&gt;) as well as when you load it. This is in case the required package contains macros that the byte compiler must know about. It also avoids byte compiler warnings for functions and variables defined in the file loaded with &lt;code&gt;require&lt;/code&gt;.</source>
          <target state="translated">파일의 최상위 레벨에서 &lt;code&gt;require&lt;/code&gt; 가 사용 되면 해당 파일을 바이트 컴파일 ( &lt;a href=&quot;byte-compilation#Byte-Compilation&quot;&gt;Byte Compilation&lt;/a&gt; 참조 ) 할 때와로드 할 때 적용됩니다. 이는 필수 패키지에 바이트 컴파일러가 알아야하는 매크로가 포함 된 경우입니다. 또한 &lt;code&gt;require&lt;/code&gt; 로 로드 된 파일에 정의 된 함수 및 변수에 대한 바이트 컴파일러 경고를 방지 합니다. .</target>
        </trans-unit>
        <trans-unit id="be3ab7615ce3da45abc454d09196bf106573f082" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;save-buffers-kill-terminal&lt;/code&gt; is killing Emacs, it calls the functions in this hook, after asking the standard questions and before calling &lt;code&gt;kill-emacs&lt;/code&gt;. The functions are called in order of appearance, with no arguments. Each function can ask for additional confirmation from the user. If any of them returns &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;save-buffers-kill-emacs&lt;/code&gt; does not kill Emacs, and does not run the remaining functions in this hook. Calling &lt;code&gt;kill-emacs&lt;/code&gt; directly does not run this hook.</source>
          <target state="translated">&lt;code&gt;save-buffers-kill-terminal&lt;/code&gt; 이 Emacs를 죽일 때 표준 질문을하고 &lt;code&gt;kill-emacs&lt;/code&gt; 를 호출하기 전에이 후크의 함수를 호출합니다 . 함수는 인수없이 나타나는 순서대로 호출됩니다. 각 기능은 사용자에게 추가 확인을 요청할 수 있습니다. 그들 중 하나가 &lt;code&gt;nil&lt;/code&gt; 을 반환 하면 &lt;code&gt;save-buffers-kill-emacs&lt;/code&gt; 는 Emacs를 죽이지 않고이 후크의 나머지 함수를 실행하지 않습니다. &lt;code&gt;kill-emacs&lt;/code&gt; 를 직접 호출 하면이 후크가 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e0ce83af193f6f7c9ff4ed6d0442606f8f22899c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;upcase-region&lt;/code&gt; is called interactively, &lt;var&gt;start&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt; are point and the mark, with the smallest first.</source>
          <target state="translated">&lt;code&gt;upcase-region&lt;/code&gt; 이 대화식으로 호출 될 때 &lt;var&gt;start&lt;/var&gt; 과 &lt;var&gt;end&lt;/var&gt; 은 점과 표시이며 가장 작은 것이 먼저 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="1fcf4096bb79a3729289a41ba9696402ad41fc4e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;upcase-word&lt;/code&gt; is called interactively, &lt;var&gt;count&lt;/var&gt; is set to the numeric prefix argument.</source>
          <target state="translated">때 &lt;code&gt;upcase-word&lt;/code&gt; , 대화 형이라고 &lt;var&gt;count&lt;/var&gt; 숫자 접두사 인수로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="b242d967f89d29cc4deaaa87e4fe29fd952b20f4" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;write-region&lt;/code&gt; actually writes the text from the buffer to the file, it intermixes the specified annotations at the corresponding positions. All this takes place without modifying the buffer.</source>
          <target state="translated">&lt;code&gt;write-region&lt;/code&gt; 은 실제로 버퍼의 텍스트를 파일에 쓸 때 해당 위치에서 지정된 주석을 혼합합니다. 이 모든 작업은 버퍼를 수정하지 않고 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="622bd1ed237bdc49bff8e369b92159969081e3a1" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;write-region&lt;/code&gt; writes data into a file, it first calls the encoding functions for the formats listed in &lt;code&gt;buffer-file-format&lt;/code&gt;, in the order of appearance in the list.</source>
          <target state="translated">&lt;code&gt;write-region&lt;/code&gt; 은 파일에 데이터를 쓸 때 먼저 목록 에 나타나는 순서대로 &lt;code&gt;buffer-file-format&lt;/code&gt; 에 나열된 형식에 대한 인코딩 함수를 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="f58c2cefd6c24f0142fd39252193f0da0ed56609" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;Adaptive Fill Mode&lt;/em&gt; is enabled, Emacs determines the fill prefix automatically from the text in each paragraph being filled rather than using a predetermined value. During filling, this fill prefix gets inserted at the start of the second and subsequent lines of the paragraph as described in &lt;a href=&quot;filling#Filling&quot;&gt;Filling&lt;/a&gt;, and in &lt;a href=&quot;auto-filling#Auto-Filling&quot;&gt;Auto Filling&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;em&gt;적응 채움 모드가&lt;/em&gt; 활성화되어 이맥스 각 단락의 텍스트에서 자동 충전 프리픽스를 결정하는 소정의 값을 사용하지 않고 충전되어있다. 채우기 중에이 채우기 접두사는 &lt;a href=&quot;filling#Filling&quot;&gt;채우기&lt;/a&gt; 및 &lt;a href=&quot;auto-filling#Auto-Filling&quot;&gt;자동 채우기&lt;/a&gt; 에 설명 된대로 단락의 두 번째 및 후속 줄의 시작 부분에 삽입됩니다. .</target>
        </trans-unit>
        <trans-unit id="95611c2ce3b163c164fe37e201833ea246ed2c76" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;alist&lt;/var&gt; specifies more than one parameter whose value can affect the new size of &lt;var&gt;frame&lt;/var&gt;, the final size of the frame may differ according to the toolkit used. For example, specifying that a frame should from now on have a menu and/or tool bar instead of none and simultaneously specifying the new height of the frame will inevitably lead to a recalculation of the frame&amp;rsquo;s height. Conceptually, in such case, this function will try to have the explicit height specification prevail. It cannot be excluded, however, that the addition (or removal) of the menu or tool bar, when eventually performed by the toolkit, will defeat this intention.</source>
          <target state="translated">경우 &lt;var&gt;alist&lt;/var&gt; 값이 지정하는 하나 개 이상의 파라미터의 새로운 크기에 영향을 미칠 수있는 &lt;var&gt;frame&lt;/var&gt; , 상기 프레임의 최종 크기는 사용되는 키트에 따라 다를 수있다. 예를 들어, 이제부터 프레임에 없음 대신 메뉴 및 / 또는 도구 모음이 있어야 함을 지정하고 동시에 프레임의 새 높이를 지정하면 필연적으로 프레임의 높이가 다시 계산됩니다. 개념적으로 이러한 경우이 함수는 명시적인 높이 사양이 우선하도록합니다. 그러나 툴킷에 의해 최종적으로 수행 될 때 메뉴 또는 도구 모음의 추가 (또는 제거)가 이러한 의도를 무효화한다는 사실을 배제 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="36122306d706808c769481ee234345a7afcd9690" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;arg&lt;/var&gt; is a token, the function is called with point just before that token. A return value of &lt;code&gt;nil&lt;/code&gt; always means to fallback on the default behavior, so the function should return &lt;code&gt;nil&lt;/code&gt; for arguments it does not expect.</source>
          <target state="translated">때 &lt;var&gt;arg&lt;/var&gt; 토큰이며, 기능은 그냥 토큰 전에 포인트라고합니다. 반환 값 &lt;code&gt;nil&lt;/code&gt; 은 항상 기본 동작을 대체하는 것을 의미하므로 함수는 예상하지 않은 인수에 대해 &lt;code&gt;nil&lt;/code&gt; 을 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="70afa656b8297636394f7bda1869f0f1b5584bea" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;function-object&lt;/var&gt; is a symbol and the code is byte compiled, the byte-compiler will warn if that function is not defined or might not be known at run time.</source>
          <target state="translated">때 &lt;var&gt;function-object&lt;/var&gt; 상징하고 코드가 컴파일 된 바이트 그 함수가 정의되지 않았거나 런타임에 알려진되지 않을 경우, 바이트 컴파일러는 경고합니다.</target>
        </trans-unit>
        <trans-unit id="c1b0783bfe169e954b315d95c75f22ea10f96602" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;function&lt;/var&gt; is called, it receives one argument, the limit of the search; it should begin searching at point, and not search beyond the limit. It should return non-&lt;code&gt;nil&lt;/code&gt; if it succeeds, and set the match data to describe the match that was found. Returning &lt;code&gt;nil&lt;/code&gt; indicates failure of the search.</source>
          <target state="translated">&lt;var&gt;function&lt;/var&gt; 가 호출 되면 검색 한계 인 하나의 인수를받습니다. 한 지점에서 검색을 시작해야하며 한계를 넘어서는 검색하지 않아야합니다. 성공하면 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값을 반환 하고 찾은 일치를 설명하는 일치 데이터를 설정해야합니다. &lt;code&gt;nil&lt;/code&gt; 을 반환 하면 검색이 실패했음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="1c193cf78598fb2b982c1e7311aab178608c3fe8" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;function&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, it is called instead of &lt;code&gt;insert&lt;/code&gt; to insert the string, with one argument&amp;mdash;the string to insert.</source>
          <target state="translated">때 &lt;var&gt;function&lt;/var&gt; 비입니다 &lt;code&gt;nil&lt;/code&gt; , 대신이라고 &lt;code&gt;insert&lt;/code&gt; 삽입 한 인수 - 문자열로, 문자열을 삽입 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7edfcd2927d7eb3ce9ee67df28d50f6d3f65913c" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;region&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, then if Transient Mark mode is enabled and the mark is active, this command calls &lt;code&gt;fill-region&lt;/code&gt; to fill all the paragraphs in the region, instead of filling only the current paragraph. When this command is called interactively, &lt;var&gt;region&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">시 &lt;var&gt;region&lt;/var&gt; 비이다 &lt;code&gt;nil&lt;/code&gt; 과도 표시 모드가 활성화되고, 마크가 활성화되는 다음 경우,이 명령은 호출 &lt;code&gt;fill-region&lt;/code&gt; 대신에 단지 현재 단락 충전, 영역의 모든 단락을 채우기. 이 명령이 대화식으로 호출되면 &lt;var&gt;region&lt;/var&gt; 은 &lt;code&gt;t&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="cb96a32f33ce616e5d94a223da7e43cb71ce3e58" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;seqpat&lt;/var&gt; is &lt;code&gt;or&lt;/code&gt;, things are different: &lt;code&gt;or&lt;/code&gt; matches at the first sub-pattern that matches; the rest of the sub-patterns are ignored. It makes no sense for each sub-pattern to let-bind a different set of symbols because the body forms have no way to distinguish which sub-pattern matched and choose among the different sets. For example, the following is invalid:</source>
          <target state="translated">경우 &lt;var&gt;seqpat&lt;/var&gt; 는 인 &lt;code&gt;or&lt;/code&gt; 상황이 다르다 : &lt;code&gt;or&lt;/code&gt; 일치하는 제 1 서브 패턴에 일치; 나머지 하위 패턴은 무시됩니다. 본문 형태가 일치하는 하위 패턴을 구별하고 다른 집합 중에서 선택할 수있는 방법이 없기 때문에 각 하위 패턴이 다른 기호 집합을 바인딩하는 것은 의미가 없습니다. 예를 들어 다음은 유효하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5c6905373c56d1e189d1b9e72d2927ce0d02b25e" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;string-or-char&lt;/var&gt; is a character, this function does the same thing as &lt;code&gt;upcase&lt;/code&gt;.</source>
          <target state="translated">때 &lt;var&gt;string-or-char&lt;/var&gt; 문자이며,이 기능은 같은 일을 수행 &lt;code&gt;upcase&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="68993d69a5f33572faef27da041ff42b247bfdf5" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;string-or-char&lt;/var&gt; is a string, this function returns a new string in which each letter in the argument that is lower case is converted to upper case. When &lt;var&gt;string-or-char&lt;/var&gt; is a character, this function returns the corresponding upper case character (an integer); if the original character is upper case, or is not a letter, the return value is equal to the original character.</source>
          <target state="translated">때 &lt;var&gt;string-or-char&lt;/var&gt; 문자열이며,이 함수는 소문자 인 인수의 각 문자를 대문자로 변환하는 새로운 문자열을 반환합니다. 경우 &lt;var&gt;string-or-char&lt;/var&gt; 캐릭터이며,이 함수는 해당 대문자 문자 (정수)을 반환 원래 문자가 대문자이거나 문자가 아닌 경우 반환 값은 원래 문자와 같습니다.</target>
        </trans-unit>
        <trans-unit id="548ed209f2ebeecb5ac09a3226d2177e0fc957e3" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;string-or-char&lt;/var&gt; is a string, this function returns a new string in which each letter in the argument that is upper case is converted to lower case. When &lt;var&gt;string-or-char&lt;/var&gt; is a character, this function returns the corresponding lower case character (an integer); if the original character is lower case, or is not a letter, the return value is equal to the original character.</source>
          <target state="translated">때 &lt;var&gt;string-or-char&lt;/var&gt; 문자열이며,이 함수는 대문자입니다 인수의 각 문자는 소문자로 변환하는 새로운 문자열을 반환합니다. 경우 &lt;var&gt;string-or-char&lt;/var&gt; 캐릭터이며,이 함수는 해당 소문자 (정수)를 반환한다; 원래 문자가 소문자이거나 문자가 아닌 경우 반환 값은 원래 문자와 같습니다.</target>
        </trans-unit>
        <trans-unit id="aec7bf298d655e4d79266c6f5395a36975ae5701" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;symbol&lt;/var&gt; occurs more than once in &lt;var&gt;seqpat&lt;/var&gt;, the second and subsequent occurrences do not expand to re-binding, but instead expand to an equality test using &lt;code&gt;eq&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;symbol&lt;/var&gt; 가 두 번 이상 나타날 때 &lt;var&gt;seqpat&lt;/var&gt; , 두 번째 이후 발생 재 바인딩 확장 대신 사용하여 동등성 시험을 확장하지 않는 &lt;code&gt;eq&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="79ee6379a626450775445557cdc33e9ac77c6947" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;window&lt;/var&gt; is the selected window, the value returned is the value of point in that window&amp;rsquo;s buffer. Strictly speaking, it would be more correct to return the top-level value of point, outside of any &lt;code&gt;save-excursion&lt;/code&gt; forms. But that value is hard to find.</source>
          <target state="translated">언제 &lt;var&gt;window&lt;/var&gt; 선택 창이며, 반환 값은 윈도우의 버퍼 내의 점의 값이다. 엄밀히 말하면 &lt;code&gt;save-excursion&lt;/code&gt; 양식 외부에서 포인트의 최상위 값을 반환하는 것이 더 정확 합니다. 그러나 그 가치는 찾기가 어렵습니다.</target>
        </trans-unit>
        <trans-unit id="ff2b38e7398922085b671c3927f5aabf2d0875ce" translate="yes" xml:space="preserve">
          <source>When Delete Selection mode (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Using-Region.html#Using-Region&quot;&gt;Delete Selection&lt;/a&gt; in</source>
          <target state="translated">선택 모드를 삭제할 때 ( &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Using-Region.html#Using-Region&quot;&gt; 삭제 선택&lt;/a&gt; 의를</target>
        </trans-unit>
        <trans-unit id="dc2a49a271d7de691db24c72f46d5d386180ed0f" translate="yes" xml:space="preserve">
          <source>When Delete Selection mode (see &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Using-Region.html#Using-Region&quot;&gt;Delete Selection&lt;/a&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed8d89dce2db72b1d1fc0a9ce173807457faeded" translate="yes" xml:space="preserve">
          <source>When Edebug decides what to do.</source>
          <target state="translated">Edebug가 수행 할 작업을 결정할 때.</target>
        </trans-unit>
        <trans-unit id="682a1c03e8a5f83dafa8b82bac23ab76dd35c93f" translate="yes" xml:space="preserve">
          <source>When Edebug instruments an expression that calls a Lisp macro, it needs additional information about the macro to do the job properly. This is because there is no a-priori way to tell which subexpressions of the macro call are forms to be evaluated. (Evaluation may occur explicitly in the macro body, or when the resulting expansion is evaluated, or any time later.)</source>
          <target state="translated">Edebug가 Lisp 매크로를 호출하는 표현식을 계측 할 때 작업을 제대로 수행하려면 매크로에 대한 추가 정보가 필요합니다. 이것은 매크로 호출의 어떤 부분식이 평가 될 양식인지를 알 수있는 선구적인 방법이 없기 때문입니다. (평가는 매크로 본문에서 명시 적으로 또는 결과 확장이 평가 될 때 또는 나중에 언제든지 발생할 수 있습니다.)</target>
        </trans-unit>
        <trans-unit id="f6ab1edab0ab78847a8335a5c30102a954d1d119" translate="yes" xml:space="preserve">
          <source>When Edebug is about to instrument code for the first time in a session, it runs the hook &lt;code&gt;edebug-setup-hook&lt;/code&gt;, then sets it to &lt;code&gt;nil&lt;/code&gt;. You can use this to load Edebug specifications associated with a package you are using, but only when you use Edebug.</source>
          <target state="translated">Edebug가 세션에서 처음으로 코드를 계측하려고 할 때 후크 &lt;code&gt;edebug-setup-hook&lt;/code&gt; 을 실행 한 다음 &lt;code&gt;nil&lt;/code&gt; 로 설정합니다. . 이것을 사용하여 사용중인 패키지와 관련된 Edebug 사양을로드 할 수 있지만 Edebug를 사용할 때만 가능합니다.</target>
        </trans-unit>
        <trans-unit id="86db9bb2c44cec8ea05f030677a24c74887d0c52" translate="yes" xml:space="preserve">
          <source>When Edebug is entered and actually reads commands from the user, it saves (and later restores) these additional data:</source>
          <target state="translated">Edebug가 입력되고 실제로 사용자로부터 명령을 읽을 때 다음 추가 데이터를 저장하고 나중에 복원합니다.</target>
        </trans-unit>
        <trans-unit id="ee514d5086b47d2e011ce7bbf8930ee5f269b78a" translate="yes" xml:space="preserve">
          <source>When Edebug needs to display something (e.g., in trace mode), it saves the current window configuration from outside Edebug (see &lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;Window Configurations&lt;/a&gt;). When you exit Edebug, it restores the previous window configuration.</source>
          <target state="translated">Edebug가 무언가를 표시해야 할 때 (예 : 추적 모드에서), Edebug 외부에서 현재 창 구성을 저장합니다 ( &lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;Window 구성&lt;/a&gt; 참조 ). Edebug를 종료하면 이전 창 구성을 복원합니다.</target>
        </trans-unit>
        <trans-unit id="76b7b5b962265dbb538b0806a45dc4fe39967e57" translate="yes" xml:space="preserve">
          <source>When Edebug responds to an error, it shows the last stop point encountered before the error. This may be the location of a call to a function which was not instrumented, and within which the error actually occurred. For an unbound variable error, the last known stop point might be quite distant from the offending variable reference. In that case, you might want to display a full backtrace (see &lt;a href=&quot;edebug-misc#Edebug-Misc&quot;&gt;Edebug Misc&lt;/a&gt;).</source>
          <target state="translated">Edebug가 오류에 응답하면 오류 전에 발생한 마지막 중지 지점을 표시합니다. 계측되지 않았고 실제로 오류가 발생한 함수에 대한 호출 위치 일 수 있습니다. 바인딩되지 않은 변수 오류의 경우 마지막으로 알려진 중지 지점이 문제가되는 변수 참조에서 상당히 멀리 떨어져있을 수 있습니다. 이 경우 전체 역 추적을 표시 할 수 있습니다 ( &lt;a href=&quot;edebug-misc#Edebug-Misc&quot;&gt;Edebug Misc&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="6176eb9ac04a1b1ea4d273f0ed9eb65b0b655da7" translate="yes" xml:space="preserve">
          <source>When Edebug stops execution after an expression, it displays the expression&amp;rsquo;s value in the echo area.</source>
          <target state="translated">Edebug가 식 후 실행을 중지하면 에코 영역에 식의 값이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="260e8d789584dc294a01939a6c450fc9752d90c7" translate="yes" xml:space="preserve">
          <source>When Edebug stops execution.</source>
          <target state="translated">Edebug가 실행을 중지 할 때.</target>
        </trans-unit>
        <trans-unit id="4ee25a0dac628201355c2b1fcdb34b79efca147e" translate="yes" xml:space="preserve">
          <source>When Edebug updates the display.</source>
          <target state="translated">Edebug가 디스플레이를 업데이트 할 때.</target>
        </trans-unit>
        <trans-unit id="1c783d2dbc0911610c080668bcd92807c67e4f84" translate="yes" xml:space="preserve">
          <source>When Emacs Lisp attempts to evaluate a form that, for some reason, cannot be evaluated, it &lt;em&gt;signals&lt;/em&gt; an &lt;em&gt;error&lt;/em&gt;.</source>
          <target state="translated">Emacs Lisp가 어떤 이유로 평가할 수없는 양식을 평가하려고 하면 &lt;em&gt;오류 &lt;/em&gt;&lt;em&gt;신호를 보냅니다&lt;/em&gt; .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c9c93579fb954356e4374a2562c6d5dd7762d774" translate="yes" xml:space="preserve">
          <source>When Emacs Lisp programs contain string constants with non-</source>
          <target state="translated">Emacs Lisp 프로그램에 비</target>
        </trans-unit>
        <trans-unit id="ef0ba63035e5812ec8cf30d30919bc9010ab1f1f" translate="yes" xml:space="preserve">
          <source>When Emacs asks the user whether or not to obey a set of file-local variable specifications, the user can choose to mark them as safe. Doing so adds those variable/value pairs to &lt;code&gt;safe-local-variable-values&lt;/code&gt;, and saves it to the user&amp;rsquo;s custom file.</source>
          <target state="translated">Emacs가 사용자에게 일련의 파일-로컬 변수 사양을 따를 것인지 물으면 사용자는이를 안전한 것으로 표시하도록 선택할 수 있습니다. 이렇게하면 해당 변수 / 값 쌍이 &lt;code&gt;safe-local-variable-values&lt;/code&gt; 에 추가되고 사용자의 사용자 정의 파일에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="ca273e1e51517c29f0f51d90a1b83aa74056e41e" translate="yes" xml:space="preserve">
          <source>When Emacs calls a process filter function, it provides the process output as a multibyte string or as a unibyte string according to the process&amp;rsquo;s filter coding system. Emacs decodes the output according to the process output coding system, which usually produces a multibyte string, except for coding systems such as &lt;code&gt;binary&lt;/code&gt; and &lt;code&gt;raw-text&lt;/code&gt;.</source>
          <target state="translated">Emacs가 프로세스 필터 함수를 호출하면 프로세스의 필터 코딩 시스템에 따라 프로세스 출력을 멀티 바이트 문자열 또는 유니 바이트 문자열로 제공합니다. Emacs는 &lt;code&gt;binary&lt;/code&gt; 및 &lt;code&gt;raw-text&lt;/code&gt; 와 같은 코딩 시스템을 제외하고 일반적으로 멀티 바이트 문자열을 생성하는 프로세스 출력 코딩 시스템에 따라 출력을 디코딩합니다 .</target>
        </trans-unit>
        <trans-unit id="fa900a90494b2447338dc8d35032a8183faaaca3" translate="yes" xml:space="preserve">
          <source>When Emacs communicates directly with X, it ignores this argument and uses interrupts if that is the way it knows how to communicate.</source>
          <target state="translated">Emacs가 X와 직접 통신 할 때이 인수를 무시하고 통신 방법을 알고있는 경우 인터럽트를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="05940a516394b0e719a8192ae47954dbf634ca6f" translate="yes" xml:space="preserve">
          <source>When Emacs displays a given piece of text, the visual appearance of the text may be determined by faces drawn from different sources. If these various sources together specify more than one face for a particular character, Emacs merges the attributes of the various faces. Here is the order in which Emacs merges the faces, from highest to lowest priority:</source>
          <target state="translated">Emacs가 주어진 텍스트를 표시 할 때 텍스트의 시각적 모양은 다른 소스에서 그린 얼굴에 의해 결정될 수 있습니다. 이러한 다양한 소스가 함께 특정 캐릭터에 대해 둘 이상의 얼굴을 지정하면 Emacs는 다양한 얼굴의 속성을 병합합니다. Emacs가 가장 높은 우선 순위에서 가장 낮은 우선 순위로 얼굴을 병합하는 순서는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="73897f5fccae4d7e373fc474c00a800dd3da53e9" translate="yes" xml:space="preserve">
          <source>When Emacs displays its frames on several terminals (see &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;), each terminal has its own selected frame. But only one of these is &lt;em&gt;the&lt;/em&gt; selected frame: it&amp;rsquo;s the frame that belongs to the terminal from which the most recent input came. That is, when Emacs runs a command that came from a certain terminal, the selected frame is the one of that terminal. Since Emacs runs only a single command at any given time, it needs to consider only one selected frame at a time; this frame is what we call &lt;em&gt;the selected frame&lt;/em&gt; in this manual. The display on which the selected frame is shown is the &lt;em&gt;selected frame&amp;rsquo;s display&lt;/em&gt;.</source>
          <target state="translated">Emacs가 여러 터미널에 프레임을 표시 할 때 ( &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;다중 터미널&lt;/a&gt; 참조 ) 각 터미널은 자체적으로 선택한 프레임을 갖습니다. 하지만 이들 중 하나는 선택한 프레임 : 그것은 가장 최근의 입력을 보낸 단자에 속하는 프레임입니다. 즉, Emacs가 특정 터미널에서 온 명령을 실행할 때 선택한 프레임이 해당 터미널 중 하나입니다. Emacs는 주어진 시간에 하나의 명령 만 실행하므로 한 번에 하나의 선택된 프레임 만 고려하면됩니다. 이 프레임 을이 설명서에서 &lt;em&gt;선택한 프레임&lt;/em&gt; 이라고 &lt;em&gt;합니다&lt;/em&gt; . &lt;em&gt;선택한 프레임이 표시되는 디스플레이&lt;/em&gt; 가 &lt;em&gt;선택한 프레임의 디스플레이&lt;/em&gt; 입니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2d78f27244918217b23dc3674a1ede749010e4ad" translate="yes" xml:space="preserve">
          <source>When Emacs exhausts memory or other operating system resources, its behavior can be less reliable, in that computations that ordinarily run to completion may abort back to the top level. This may cause Emacs to neglect operations that it normally would have done.</source>
          <target state="translated">Emacs가 메모리 또는 기타 운영 체제 리소스를 모두 사용하면 일반적으로 완료 될 때까지 실행되는 계산이 최상위 수준으로 다시 중단 될 수 있으므로 동작의 안정성이 떨어질 수 있습니다. 이로 인해 Emacs가 일반적으로 수행했던 작업을 무시할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="721595b660b32b294a384ee588874d2425404613" translate="yes" xml:space="preserve">
          <source>When Emacs exits normally, it deletes this file; if Emacs crashes, you can look in the file to find all the auto-save files that might contain work that was otherwise lost. The &lt;code&gt;recover-session&lt;/code&gt; command uses this file to find them.</source>
          <target state="translated">Emacs가 정상적으로 종료되면이 파일을 삭제합니다. Emacs가 충돌하면 파일에서 손실 된 작업을 포함 할 수있는 모든 자동 저장 파일을 찾을 수 있습니다. &lt;code&gt;recover-session&lt;/code&gt; 명령을 찾으려면이 파일을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="aa8e5347135f0be09e0c0987eace74507335ce70" translate="yes" xml:space="preserve">
          <source>When Emacs exits, it terminates all its subprocesses. For subprocesses that run a program, it sends them the &lt;code&gt;SIGHUP&lt;/code&gt; signal; connections are simply closed. Because subprocesses may be doing valuable work, Emacs normally asks the user to confirm that it is ok to terminate them. Each process has a query flag, which, if non-&lt;code&gt;nil&lt;/code&gt;, says that Emacs should ask for confirmation before exiting and thus killing that process. The default for the query flag is &lt;code&gt;t&lt;/code&gt;, meaning &lt;em&gt;do&lt;/em&gt; query.</source>
          <target state="translated">Emacs가 종료되면 모든 하위 프로세스를 종료합니다. 프로그램을 실행하는 서브 프로세스의 경우 &lt;code&gt;SIGHUP&lt;/code&gt; 신호를 보냅니다 . 연결은 단순히 닫힙니다. 하위 프로세스가 귀중한 작업을 수행 할 수 있기 때문에 Emacs는 일반적으로 사용자에게 종료해도 괜찮은지 확인하도록 요청합니다. 각 프로세스에는 쿼리 플래그가 있는데, &lt;code&gt;nil&lt;/code&gt; 이 아닌 경우 Emacs가 종료하기 전에 확인을 요청하여 해당 프로세스를 종료해야한다고 말합니다. 쿼리 플래그의 기본값은 &lt;code&gt;t&lt;/code&gt; , 즉 &lt;em&gt;do&lt;/em&gt; query입니다.</target>
        </trans-unit>
        <trans-unit id="a531efbc87917902456b02438434d7bc899262eb" translate="yes" xml:space="preserve">
          <source>When Emacs is built with GTK+ support, it by default displays tooltips using GTK+ functions, and the appearance of the tooltips is then controlled by GTK+ settings. GTK+ tooltips can be disabled by changing the value of the variable &lt;code&gt;x-gtk-use-system-tooltips&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;. The rest of this subsection describes how to control non-GTK+ tooltips, which are presented by Emacs itself.</source>
          <target state="translated">Emacs가 GTK + 지원으로 빌드되면 기본적으로 GTK + 기능을 사용하여 툴팁을 표시하고 툴팁의 모양은 GTK + 설정에 의해 제어됩니다. GTK + 툴팁은 &lt;code&gt;x-gtk-use-system-tooltips&lt;/code&gt; 변수의 값 을 &lt;code&gt;nil&lt;/code&gt; 로 변경하여 비활성화 할 수 있습니다 . 이 하위 섹션의 나머지 부분에서는 Emacs 자체에서 제공하는 비 GTK + 툴팁을 제어하는 ​​방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="62def33471bd6066f54f227edc99f3fb9c53c88b" translate="yes" xml:space="preserve">
          <source>When Emacs is compiled with</source>
          <target state="translated">Emacs가 다음으로 컴파일 될 때</target>
        </trans-unit>
        <trans-unit id="fad13f129d52068f507d7a1cdb6e9c459607627d" translate="yes" xml:space="preserve">
          <source>When Emacs is in the process of loading a file, this variable&amp;rsquo;s value is the name of that file, as Emacs found it during the search described earlier in this section.</source>
          <target state="translated">Emacs가 파일을로드하는 중일 때이 변수의 값은이 섹션의 앞부분에서 설명한 검색 중에 Emacs가 찾은 파일 이름입니다.</target>
        </trans-unit>
        <trans-unit id="651c0f6fc25b25ac8f39d30aea53d0c0bf063daa" translate="yes" xml:space="preserve">
          <source>When Emacs is installed, if the installation directory hierarchy can be modified by untrusted users, the application cannot be trusted. This applies also to the directory hierarchies of the programs that Emacs uses, and of the files that Emacs reads and writes.</source>
          <target state="translated">Emacs가 설치되어있을 때 신뢰할 수없는 사용자가 설치 디렉토리 계층을 수정할 수 있으면 응용 프로그램을 신뢰할 수 없습니다. 이것은 Emacs가 사용하는 프로그램과 Emacs가 읽고 쓰는 파일의 디렉토리 계층 구조에도 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="e1e0980ee90daa94d4bbe7a41e5e59ab5026bf4d" translate="yes" xml:space="preserve">
          <source>When Emacs is killed, all the information in the Emacs process, aside from files that have been saved, is lost. Because killing Emacs inadvertently can lose a lot of work, the &lt;code&gt;save-buffers-kill-terminal&lt;/code&gt; command queries for confirmation if you have buffers that need saving or subprocesses that are running. It also runs the abnormal hook &lt;code&gt;kill-emacs-query-functions&lt;/code&gt;:</source>
          <target state="translated">Emacs가 종료되면 저장된 파일을 제외하고 Emacs 프로세스의 모든 정보가 손실됩니다. Emacs를 우연히 죽이면 많은 작업이 손실 될 수 있기 때문에 &lt;code&gt;save-buffers-kill-terminal&lt;/code&gt; 명령은 저장이 필요한 버퍼 나 실행중인 하위 프로세스가 있는지 확인을 위해 쿼리합니다. 또한 비정상 후크 &lt;code&gt;kill-emacs-query-functions&lt;/code&gt; 를 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="10b1ca42c7e5562833e9929714587793d702d9aa" translate="yes" xml:space="preserve">
          <source>When Emacs is nearly out of memory for Lisp objects, a brief message saying so. Otherwise, this is empty.</source>
          <target state="translated">Emacs가 Lisp 객체에 대한 메모리가 거의 부족할 때 그렇게 말하는 간단한 메시지입니다. 그렇지 않으면 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="82223f5bcf52ab7b125dc53d52c9b5ab9ae9b00e" translate="yes" xml:space="preserve">
          <source>When Emacs is not idle, &lt;code&gt;current-idle-time&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;. This is a convenient way to test whether Emacs is idle.</source>
          <target state="translated">Emacs가 유휴 상태가 아닐 때 &lt;code&gt;current-idle-time&lt;/code&gt; 은 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다 . 이것은 Emacs가 유휴 상태인지 테스트하는 편리한 방법입니다.</target>
        </trans-unit>
        <trans-unit id="ebd864041b3e164df73c4b5c73bd3d97aa2d40fc" translate="yes" xml:space="preserve">
          <source>When Emacs is running in batch mode, any request to read from the minibuffer actually reads a line from the standard input descriptor that was supplied when Emacs was started. This supports only basic input: none of the special minibuffer features (history, completion, etc.) are available in batch mode.</source>
          <target state="translated">Emacs가 배치 모드에서 실행 중일 때, 미니 버퍼에서 읽기 요청은 실제로 Emacs가 시작될 때 제공된 표준 입력 설명자에서 한 줄을 읽습니다. 기본 입력 만 지원합니다. 배치 모드에서는 특별한 미니 버퍼 기능 (이력, 완료 등)을 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="494a76744e9128b2960f31be01919655045499b5" translate="yes" xml:space="preserve">
          <source>When Emacs is started up, it performs the following operations (see &lt;code&gt;normal-top-level&lt;/code&gt; in</source>
          <target state="translated">이맥스를 시작하면, 다음과 같은 작업을합니다 (수행 &lt;code&gt;normal-top-level&lt;/code&gt; 에</target>
        </trans-unit>
        <trans-unit id="1a1d14620acb1cf574a4a270597c85b458cf2d34" translate="yes" xml:space="preserve">
          <source>When Emacs loads a Lisp library, it searches for the library in a list of directories specified by the variable &lt;code&gt;load-path&lt;/code&gt;.</source>
          <target state="translated">Emacs는 Lisp 라이브러리를로드 할 때 변수 &lt;code&gt;load-path&lt;/code&gt; 로 지정된 디렉토리 목록에서 라이브러리를 검색 합니다 .</target>
        </trans-unit>
        <trans-unit id="8a46d181efa7ff915beb48c6c5e4501bb1c20a19" translate="yes" xml:space="preserve">
          <source>When Emacs loads functions and variables from a byte-compiled file, it normally does not load their documentation strings into memory. Each documentation string is dynamically loaded from the byte-compiled file only when needed. This saves memory, and speeds up loading by skipping the processing of the documentation strings.</source>
          <target state="translated">Emacs가 바이트 컴파일 된 파일에서 함수와 변수를로드 할 때 일반적으로 문서 문자열을 메모리로로드하지 않습니다. 각 문서 문자열은 필요할 때만 바이트 컴파일 된 파일에서 동적으로로드됩니다. 이렇게하면 메모리가 절약되고 문서 문자열 처리를 건너 뛰어로드 속도가 빨라집니다.</target>
        </trans-unit>
        <trans-unit id="fd6a9034841fc5bb27a1ec385001272526bc68a7" translate="yes" xml:space="preserve">
          <source>When Emacs reads or writes a file, and when Emacs sends text to a subprocess or receives text from a subprocess, it normally performs character code conversion and end-of-line conversion as specified by a particular &lt;em&gt;coding system&lt;/em&gt;.</source>
          <target state="translated">Emacs가 파일을 읽거나 쓸 때, Emacs가 텍스트를 서브 프로세스로 보내거나 서브 프로세스에서 텍스트를 수신 할 때, 일반적으로 특정 &lt;em&gt;코딩 시스템에서&lt;/em&gt; 지정한대로 문자 코드 변환 및 줄 끝 변환을 수행 &lt;em&gt;합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="9ad23996e44b97133257128f9eecfa2703f34fca" translate="yes" xml:space="preserve">
          <source>When Emacs runs on MS-Windows as a GUI session, it supports a small subset of the D-Bus notifications functionality via a native primitive:</source>
          <target state="translated">Emacs가 MS-Windows에서 GUI 세션으로 실행될 때 네이티브 프리미티브를 통해 D-Bus 알림 기능의 작은 하위 집합을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="bc45c6eeb8ef943a775378bb93e8c468b705489b" translate="yes" xml:space="preserve">
          <source>When Emacs runs on MS-Windows, it does not implement X selections in general, but it does support the clipboard. &lt;code&gt;gui-get-selection&lt;/code&gt; and &lt;code&gt;gui-set-selection&lt;/code&gt; on MS-Windows support the text data type only; if the clipboard holds other types of data, Emacs treats the clipboard as empty. The supported data type is &lt;code&gt;STRING&lt;/code&gt;.</source>
          <target state="translated">Emacs가 MS-Windows에서 실행될 때, 일반적으로 X 선택을 구현하지 않지만 클립 보드를 지원합니다. MS-Windows의 &lt;code&gt;gui-get-selection&lt;/code&gt; 및 &lt;code&gt;gui-set-selection&lt;/code&gt; 은 텍스트 데이터 유형 만 지원합니다. 클립 보드에 다른 유형의 데이터가있는 경우 Emacs는 클립 보드를 비어있는 것으로 처리합니다. 지원되는 데이터 유형은 &lt;code&gt;STRING&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ee2e007d9e7c9cdce5db36bc3c94e230e120d467" translate="yes" xml:space="preserve">
          <source>When Emacs starts up, it sets up the value of &lt;code&gt;load-path&lt;/code&gt; in several steps. First, it initializes &lt;code&gt;load-path&lt;/code&gt; using default locations set when Emacs was compiled. Normally, this is a directory something like</source>
          <target state="translated">Emacs가 시작되면 여러 단계 로 &lt;code&gt;load-path&lt;/code&gt; 의 값을 설정 합니다. 첫째, Emacs가 컴파일 될 때 설정된 기본 위치를 사용하여 &lt;code&gt;load-path&lt;/code&gt; 를 초기화 합니다. 일반적으로 이것은 다음과 같은 디렉토리입니다.</target>
        </trans-unit>
        <trans-unit id="52a18c61573b84ddab859aad581875c9ff91491d" translate="yes" xml:space="preserve">
          <source>When Emacs visits a file, it automatically selects a major mode for the buffer based on information in the file name or in the file itself. It also processes local variables specified in the file text.</source>
          <target state="translated">Emacs가 파일을 방문하면 파일 이름이나 파일 자체의 정보를 기반으로 버퍼의 주요 모드를 자동으로 선택합니다. 또한 파일 텍스트에 지정된 지역 변수를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="605a3b4c2931745a1a2d86235b7957d822fefa95" translate="yes" xml:space="preserve">
          <source>When Emacs writes process output directly into a multibyte buffer, it decodes the output according to the process output coding system. If the coding system is &lt;code&gt;raw-text&lt;/code&gt; or &lt;code&gt;no-conversion&lt;/code&gt;, Emacs converts the unibyte output to multibyte using &lt;code&gt;string-to-multibyte&lt;/code&gt;, and inserts the resulting multibyte text.</source>
          <target state="translated">Emacs가 프로세스 출력을 멀티 바이트 버퍼에 직접 쓸 때 프로세스 출력 코딩 시스템에 따라 출력을 디코딩합니다. 코딩 시스템이 &lt;code&gt;raw-text&lt;/code&gt; 또는 &lt;code&gt;no-conversion&lt;/code&gt; 인 경우 Emacs는 &lt;code&gt;string-to-multibyte&lt;/code&gt; 를 사용하여 유니 바이트 출력을 멀티 바이트로 변환 하고 결과 멀티 바이트 텍스트를 삽입합니다.</target>
        </trans-unit>
        <trans-unit id="a266b19b2d02b82200082904f4b14cd6d1cc3ba3" translate="yes" xml:space="preserve">
          <source>When Font Lock is about to highlight a range of text, it first extends the boundaries of the range as necessary so that they do not fall within text marked with the &lt;code&gt;font-lock-multiline&lt;/code&gt; property. Then it removes any &lt;code&gt;font-lock-multiline&lt;/code&gt; properties from the range, and highlights it. The highlighting specification (mostly &lt;code&gt;font-lock-keywords&lt;/code&gt;) must reinstall this property each time, whenever it is appropriate.</source>
          <target state="translated">글꼴 잠금이 텍스트 범위를 강조 표시하려고 할 때 먼저 필요한 범위의 경계를 확장하여 &lt;code&gt;font-lock-multiline&lt;/code&gt; 속성으로 표시된 텍스트에 포함되지 않도록 합니다. 그런 다음 범위에서 &lt;code&gt;font-lock-multiline&lt;/code&gt; 속성을 제거 하고 강조 표시합니다. 강조 표시 사양 (대부분 &lt;code&gt;font-lock-keywords&lt;/code&gt; )은 적절할 때마다이 속성을 다시 설치해야합니다.</target>
        </trans-unit>
        <trans-unit id="e854bf31a3863b140612f0097581c4fb72f24a20" translate="yes" xml:space="preserve">
          <source>When Font Lock is activated in a buffer, it calls this function with a non-&lt;code&gt;nil&lt;/code&gt; value of &lt;var&gt;contextual&lt;/var&gt; if the value of &lt;code&gt;font-lock-keywords-only&lt;/code&gt; (see &lt;a href=&quot;syntactic-font-lock#Syntactic-Font-Lock&quot;&gt;Syntactic Font Lock&lt;/a&gt;) is &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">버퍼에서 Font Lock이 활성화되면 &lt;code&gt;font-lock-keywords-only&lt;/code&gt; 값 ( &lt;a href=&quot;syntactic-font-lock#Syntactic-Font-Lock&quot;&gt;Syntactic Font Lock&lt;/a&gt; 참조 )이 &lt;code&gt;nil&lt;/code&gt; 이면 &lt;var&gt;contextual&lt;/var&gt; 값이 &lt;code&gt;nil&lt;/code&gt; 이 아닌이 함수를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="8c92048d20681de8310ca3537f534a52eac489ce" translate="yes" xml:space="preserve">
          <source>When NaNs and signed zeros are involved, non-numeric functions like &lt;code&gt;eql&lt;/code&gt;, &lt;code&gt;equal&lt;/code&gt;, &lt;code&gt;sxhash-eql&lt;/code&gt;, &lt;code&gt;sxhash-equal&lt;/code&gt; and &lt;code&gt;gethash&lt;/code&gt; determine whether values are indistinguishable, not whether they are numerically equal. For example, when &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; are the same NaN, &lt;code&gt;(equal x y)&lt;/code&gt; returns &lt;code&gt;t&lt;/code&gt; whereas &lt;code&gt;(= x y)&lt;/code&gt; uses numeric comparison and returns &lt;code&gt;nil&lt;/code&gt;; conversely, &lt;code&gt;(equal 0.0 -0.0)&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt; whereas &lt;code&gt;(= 0.0 -0.0)&lt;/code&gt; returns &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">NaN 및 부호있는 0이 관련되면 &lt;code&gt;eql&lt;/code&gt; , &lt;code&gt;equal&lt;/code&gt; , &lt;code&gt;sxhash-eql&lt;/code&gt; , &lt;code&gt;sxhash-equal&lt;/code&gt; 및 &lt;code&gt;gethash&lt;/code&gt; 와 같은 숫자가 아닌 함수는 값이 숫자가 같은지 아닌지가 아니라 구별 할 수 없는지 여부를 결정합니다. 예를 들면, &lt;var&gt;x&lt;/var&gt; 및 &lt;var&gt;y&lt;/var&gt; 동일 NaN가이다 &lt;code&gt;(equal x y)&lt;/code&gt; 리턴 &lt;code&gt;t&lt;/code&gt; 를 반면 &lt;code&gt;(= x y)&lt;/code&gt; 숫자 비교 되돌아 사용 &lt;code&gt;nil&lt;/code&gt; ; 반대로 &lt;code&gt;(equal 0.0 -0.0)&lt;/code&gt; 은 &lt;code&gt;nil&lt;/code&gt; 을 반환 하는 반면 &lt;code&gt;(= 0.0 -0.0)&lt;/code&gt; 은 &lt;code&gt;t&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="f7628eedf7d5a55741cdd4254c8f9f4e3f8a48cd" translate="yes" xml:space="preserve">
          <source>When Transient Mark mode is enabled and the mark is active, many commands that normally apply to the text near point instead apply to the region. Such commands should use the function &lt;code&gt;use-region-p&lt;/code&gt; to test whether they should operate on the region. See &lt;a href=&quot;the-region#The-Region&quot;&gt;The Region&lt;/a&gt;.</source>
          <target state="translated">과도 마크 모드가 활성화되고 마크가 활성화되면 일반적으로 지점 근처의 텍스트에 적용되는 많은 명령이 대신 영역에 적용됩니다. 이러한 명령은 use &lt;code&gt;use-region-p&lt;/code&gt; 함수를 사용 하여 해당 지역에서 작동해야하는지 여부를 테스트해야합니다. &lt;a href=&quot;the-region#The-Region&quot;&gt;지역을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7748fb9dee7da8e8fdc2df120965ca7b27bf6bc9" translate="yes" xml:space="preserve">
          <source>When a &amp;lsquo;</source>
          <target state="translated">'</target>
        </trans-unit>
        <trans-unit id="23ccc8d76cb3a5f6f72a7f75c504f21009fe6c44" translate="yes" xml:space="preserve">
          <source>When a Variable is Void</source>
          <target state="translated">변수가 무효 인 경우</target>
        </trans-unit>
        <trans-unit id="4bdc00a97eac58b11693b2d0ca9889f59b932904" translate="yes" xml:space="preserve">
          <source>When a buffer is changed, the region that Font Lock refontifies is by default the smallest sequence of whole lines that spans the change. While this works well most of the time, sometimes it doesn&amp;rsquo;t&amp;mdash;for example, when a change alters the syntactic meaning of text on an earlier line.</source>
          <target state="translated">버퍼가 변경되면 글꼴 잠금이 다시 글꼴로 표시되는 영역은 기본적으로 변경 사항을 포함하는 전체 줄의 가장 작은 시퀀스입니다. 이것은 대부분의 경우 잘 작동하지만 때로는 그렇지 않습니다. 예를 들어 변경으로 인해 이전 줄의 텍스트 구문 의미가 변경되는 경우가 있습니다.</target>
        </trans-unit>
        <trans-unit id="a84da298c04ef18b307cd5117078865d12124fb0" translate="yes" xml:space="preserve">
          <source>When a buffer is displayed with line numbers (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Display-Custom.html#Display-Custom&quot;&gt;Display Custom&lt;/a&gt; in</source>
          <target state="translated">버퍼가 줄 번호로 표시되면 (참조 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Display-Custom.html#Display-Custom&quot;&gt;디스플레이 사용자 정의&lt;/a&gt; 에</target>
        </trans-unit>
        <trans-unit id="a0509e5b335daa198f21533823de8ae6ba2e2f6b" translate="yes" xml:space="preserve">
          <source>When a buffer is displayed with line numbers (see &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Display-Custom.html#Display-Custom&quot;&gt;Display Custom&lt;/a&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cfe7af88a87c3ae11ebee495f5e55eb0adbabb5" translate="yes" xml:space="preserve">
          <source>When a child frame is used during minibuffer interaction, for example, to display completions in a separate window, the &lt;code&gt;minibuffer-exit&lt;/code&gt; parameter (see &lt;a href=&quot;frame-interaction-parameters#Frame-Interaction-Parameters&quot;&gt;Frame Interaction Parameters&lt;/a&gt;) is useful in order to deal with the frame when the minibuffer is exited.</source>
          <target state="translated">예를 들어, 별도의 창에 완료를 표시하기 위해 미니 버퍼 상호 작용 중에 자식 프레임이 사용되는 경우 미니 버퍼 &lt;code&gt;minibuffer-exit&lt;/code&gt; 매개 변수 ( &lt;a href=&quot;frame-interaction-parameters#Frame-Interaction-Parameters&quot;&gt;프레임 상호 작용 매개 변수&lt;/a&gt; 참조 )는 미니 버퍼가 종료 될 때 프레임을 처리하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="087c1187a1c448c9270824395c547ec4113f8445" translate="yes" xml:space="preserve">
          <source>When a child frame is used for displaying a buffer via &lt;code&gt;display-buffer-in-child-frame&lt;/code&gt; (see &lt;a href=&quot;buffer-display-action-functions#Buffer-Display-Action-Functions&quot;&gt;Buffer Display Action Functions&lt;/a&gt;), the frame&amp;rsquo;s &lt;code&gt;auto-hide-function&lt;/code&gt; parameter (see &lt;a href=&quot;frame-interaction-parameters#Frame-Interaction-Parameters&quot;&gt;Frame Interaction Parameters&lt;/a&gt;) can be set to a function, in order to appropriately deal with the frame when the window displaying the buffer shall be quit.</source>
          <target state="translated">&lt;code&gt;display-buffer-in-child-frame&lt;/code&gt; ( &lt;a href=&quot;buffer-display-action-functions#Buffer-Display-Action-Functions&quot;&gt;버퍼 디스플레이 액션 함수&lt;/a&gt; 참조)을 통해 버퍼를 표시 하는 데 자식 프레임이 사용되는 경우 프레임의 &lt;code&gt;auto-hide-function&lt;/code&gt; 매개 변수 ( &lt;a href=&quot;frame-interaction-parameters#Frame-Interaction-Parameters&quot;&gt;프레임 상호 작용 매개 변수&lt;/a&gt; 참조 )를 함수로 설정할 수 있습니다. 버퍼를 표시하는 창이 종료 될 때 프레임을 적절하게 처리하도록 명령합니다.</target>
        </trans-unit>
        <trans-unit id="2d1f655bdefdfc9fe340c82147407511f9a46b06" translate="yes" xml:space="preserve">
          <source>When a closure is called as a function, any lexical variable references within its definition use the retained lexical environment. Here is an example:</source>
          <target state="translated">클로저가 함수로 호출 될 때 정의 내의 모든 어휘 변수 참조는 보유 된 어휘 환경을 사용합니다. 다음은 그 예입니다.</target>
        </trans-unit>
        <trans-unit id="e66189de57a74cfc4e86c13b679ebcd5ba04472c" translate="yes" xml:space="preserve">
          <source>When a command to save the buffer starts out to use &lt;code&gt;buffer-file-coding-system&lt;/code&gt; (or &lt;code&gt;save-buffer-coding-system&lt;/code&gt;), and that coding system cannot handle the actual text in the buffer, the command asks the user to choose another coding system (by calling &lt;code&gt;select-safe-coding-system&lt;/code&gt;). After that happens, the command also updates &lt;code&gt;buffer-file-coding-system&lt;/code&gt; to represent the coding system that the user specified.</source>
          <target state="translated">버퍼를 저장하는 명령이 &lt;code&gt;buffer-file-coding-system&lt;/code&gt; (또는 &lt;code&gt;save-buffer-coding-system&lt;/code&gt; )을 사용하기 시작하고 해당 코딩 시스템이 버퍼의 실제 텍스트를 처리 할 수없는 경우 명령은 사용자에게 다른 것을 선택하도록 요청합니다. 코딩 시스템 ( &lt;code&gt;select-safe-coding-system&lt;/code&gt; 호출 ). 그런 다음 명령 은 사용자가 지정한 코딩 시스템을 나타 내기 위해 &lt;code&gt;buffer-file-coding-system&lt;/code&gt; 도 업데이트 합니다.</target>
        </trans-unit>
        <trans-unit id="f3acb80ad28b55e133f80b83c259f999c95278dc" translate="yes" xml:space="preserve">
          <source>When a cons cell is part of the shared structure of several lists, storing a new &lt;small&gt;CAR&lt;/small&gt; into the cons changes one element of each of these lists. Here is an example:</source>
          <target state="translated">cons 셀이 여러 목록의 공유 구조의 일부인 경우 새 &lt;small&gt;CAR&lt;/small&gt; 을 cons에 저장하면 이러한 각 목록의 한 요소가 변경됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="24ce297f11d818aee0f401f1b75ca3ab16f216b8" translate="yes" xml:space="preserve">
          <source>When a divider is less than three pixels wide, it is drawn solidly with the foreground of this face. For larger dividers this face is used for the inner part only, excluding the first and last pixel.</source>
          <target state="translated">구분선 폭이 3 픽셀 미만이면이면의 전경과 함께 단단하게 그려집니다. 더 큰 구분선의 경우이면은 첫 번째 및 마지막 픽셀을 제외한 내부 부분에만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="861b459804113837922aa9dbdf9df0cc85298e3e" translate="yes" xml:space="preserve">
          <source>When a file is loaded to satisfy an autoload, and it stops due to an error in the evaluation of its contents, any function definitions or &lt;code&gt;provide&lt;/code&gt; calls that occurred during the load are undone. See &lt;a href=&quot;autoload#Autoload&quot;&gt;Autoload&lt;/a&gt;.</source>
          <target state="translated">파일이 자동로드를 충족하기 위해로드되고 해당 내용 평가 오류로 인해 중지 되면로드 중에 발생한 함수 정의 또는 &lt;code&gt;provide&lt;/code&gt; 호출이 실행 취소됩니다. &lt;a href=&quot;autoload#Autoload&quot;&gt;자동로드를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="36076467ece93a138319bd92ddfdda23365adb7f" translate="yes" xml:space="preserve">
          <source>When a file specifies local variable values, these become buffer-local values when you visit the file. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/File-Variables.html#File-Variables&quot;&gt;File Variables&lt;/a&gt; in</source>
          <target state="translated">파일이 로컬 변수 값을 지정하면 파일을 방문 할 때 버퍼 로컬 값이됩니다. 의 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/File-Variables.html#File-Variables&quot;&gt;파일 변수&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9532814e6be84dde173622a7aa962c57e8863425" translate="yes" xml:space="preserve">
          <source>When a file specifies local variable values, these become buffer-local values when you visit the file. See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/File-Variables.html#File-Variables&quot;&gt;File Variables&lt;/a&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68f2d158004444aa9ccf7548e354c7dbffab22bf" translate="yes" xml:space="preserve">
          <source>When a form is a macro call, it expands into a new form for Lisp to evaluate. We show the result of the expansion with &amp;lsquo;</source>
          <target state="translated">양식이 매크로 호출이면 Lisp가 평가할 수 있도록 새 양식으로 확장됩니다. 확장 결과를 '</target>
        </trans-unit>
        <trans-unit id="83eac9bafca98d01a15907eb91f4fe79f6bd983c" translate="yes" xml:space="preserve">
          <source>When a frame has side windows, the following function returns the main window of that frame.</source>
          <target state="translated">프레임에 측면 창이있는 경우 다음 함수는 해당 프레임의 기본 창을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f808ee525a7bb0fa88006d87d6523fc2f1a8b1ec" translate="yes" xml:space="preserve">
          <source>When a function recognizes and processes the argument in &lt;code&gt;argi&lt;/code&gt;, it should return a non-&lt;code&gt;nil&lt;/code&gt; value to say it has dealt with that argument. If it has also dealt with some of the following arguments, it can indicate that by deleting them from &lt;code&gt;command-line-args-left&lt;/code&gt;.</source>
          <target state="translated">함수가 &lt;code&gt;argi&lt;/code&gt; 의 인수를 인식하고 처리 할 때 해당 인수를 처리했음을 알리기 위해 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값을 반환해야합니다 . 또한 다음 인수 중 일부를 처리 한 경우 &lt;code&gt;command-line-args-left&lt;/code&gt; 에서 삭제하여이를 나타낼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="53c12968a72f82623cb9cdd8ab8be9c144e6d8d5" translate="yes" xml:space="preserve">
          <source>When a function takes two or more arguments that must be file names, it checks each of those names for a handler. For example, if you do this:</source>
          <target state="translated">함수가 파일 이름이어야하는 두 개 이상의 인수를 사용하는 경우 각 이름에서 핸들러를 확인합니다. 예를 들어 다음과 같이하면됩니다.</target>
        </trans-unit>
        <trans-unit id="15aca1807f4a43b6a6607c91b93863f63117ce73" translate="yes" xml:space="preserve">
          <source>When a generic function is invoked, it selects the applicable methods by comparing the actual arguments passed by the caller with the argument specializers of each method. A method is applicable if the actual arguments of the call are compatible with the method&amp;rsquo;s specializers. If more than one method is applicable, they are combined using certain rules, described below, and the combination then handles the call.</source>
          <target state="translated">제네릭 함수가 호출되면 호출자가 전달한 실제 인수와 각 메서드의 인수 전문화자를 비교하여 적용 가능한 메서드를 선택합니다. 호출의 실제 인수가 메서드의 전문 화자와 호환되는 경우 메서드를 적용 할 수 있습니다. 둘 이상의 메서드를 적용 할 수있는 경우 아래에 설명 된 특정 규칙을 사용하여 조합되고 조합이 호출을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="71a5e1c7f4395ec5c6d1fb3ede82f9e01cfc9590" translate="yes" xml:space="preserve">
          <source>When a handler function decides to call the ordinary Emacs primitive for the operation at hand, it needs to prevent the primitive from calling the same handler once again, thus leading to an infinite recursion. The example above shows how to do this, with the variables &lt;code&gt;inhibit-file-name-handlers&lt;/code&gt; and &lt;code&gt;inhibit-file-name-operation&lt;/code&gt;. Be careful to use them exactly as shown above; the details are crucial for proper behavior in the case of multiple handlers, and for operations that have two file names that may each have handlers.</source>
          <target state="translated">핸들러 함수가 당면한 작업을 위해 일반 Emacs 프리미티브를 호출하기로 결정할 때 프리미티브가 동일한 핸들러를 다시 한 번 호출하는 것을 방지해야하므로 무한 재귀가 발생합니다. 위의 예는 변수 &lt;code&gt;inhibit-file-name-handlers&lt;/code&gt; 및 &lt;code&gt;inhibit-file-name-operation&lt;/code&gt; 사용하여이를 수행하는 방법을 보여줍니다 . 위에 표시된대로 정확하게 사용하도록주의하십시오. 여러 핸들러의 경우 적절한 동작과 각각 핸들러가있을 수있는 두 개의 파일 이름이있는 작업의 경우 세부 정보가 중요합니다.</target>
        </trans-unit>
        <trans-unit id="3e3d75c0b75d9f3769c40a1a07432101f3bc7dea" translate="yes" xml:space="preserve">
          <source>When a key binding is found in one of the active keymaps, and that binding is a command, the search is over&amp;mdash;the command is executed. However, if the binding is a symbol with a value or a string, Emacs replaces the input key sequences with the variable&amp;rsquo;s value or the string, and restarts the search of the active keymaps. See &lt;a href=&quot;key-lookup#Key-Lookup&quot;&gt;Key Lookup&lt;/a&gt;.</source>
          <target state="translated">활성 키맵 중 하나에서 키 바인딩이 발견되고 해당 바인딩이 명령이면 검색이 종료되고 명령이 실행됩니다. 그러나 바인딩이 값 또는 문자열이있는 기호 인 경우 Emacs는 입력 키 시퀀스를 변수 값 또는 문자열로 대체하고 활성 키맵 검색을 다시 시작합니다. &lt;a href=&quot;key-lookup#Key-Lookup&quot;&gt;키 조회를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="879e91eed40123d3428319aa38e604d0a9931f3e" translate="yes" xml:space="preserve">
          <source>When a line is exactly as wide as the window, Emacs displays the cursor in the right fringe instead of using two lines. Different bitmaps are used to represent the cursor in the fringe depending on the current buffer&amp;rsquo;s cursor type.</source>
          <target state="translated">한 줄이 창 너비와 똑같 으면 Emacs는 두 줄을 사용하는 대신 오른쪽 가장자리에 커서를 표시합니다. 현재 버퍼의 커서 유형에 따라 프린지의 커서를 나타내는 데 다른 비트 맵이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="efa2f36d31bd662a1c15d5f57bdd3a139e686c70" translate="yes" xml:space="preserve">
          <source>When a line of text extends beyond the right edge of a window, Emacs can &lt;em&gt;continue&lt;/em&gt; the line (make it wrap to the next screen line), or &lt;em&gt;truncate&lt;/em&gt; the line (limit it to one screen line). The additional screen lines used to display a long text line are called &lt;em&gt;continuation&lt;/em&gt; lines. Continuation is not the same as filling; continuation happens on the screen only, not in the buffer contents, and it breaks a line precisely at the right margin, not at a word boundary. See &lt;a href=&quot;filling#Filling&quot;&gt;Filling&lt;/a&gt;.</source>
          <target state="translated">텍스트 행이 창의 오른쪽 가장자리를 넘어 확장되면 Emacs는 행을 &lt;em&gt;계속&lt;/em&gt; 하거나 (다음 화면 행으로 줄 바꿈) 행을 &lt;em&gt;자를&lt;/em&gt; 수 있습니다 (한 화면 행으로 제한). 긴 텍스트 줄을 표시하는 데 사용되는 추가 화면 줄을 &lt;em&gt;연속&lt;/em&gt; 줄 이라고 합니다. 계속은 채우기와 같지 않습니다. 연속은 버퍼 내용이 아닌 화면에서만 발생하며 단어 경계가 아닌 오른쪽 여백에서 정확하게 줄을 끊습니다. &lt;a href=&quot;filling#Filling&quot;&gt;채우기를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ba9d289e0f20cab7c52b3068c87dd0cb613ad299" translate="yes" xml:space="preserve">
          <source>When a macro call appears in a Lisp program being compiled, the Lisp compiler calls the macro definition just as the interpreter would, and receives an expansion. But instead of evaluating this expansion, it compiles the expansion as if it had appeared directly in the program. As a result, the compiled code produces the value and side effects intended for the macro, but executes at full compiled speed. This would not work if the macro body computed the value and side effects itself&amp;mdash;they would be computed at compile time, which is not useful.</source>
          <target state="translated">컴파일되는 Lisp 프로그램에 매크로 호출이 나타나면 Lisp 컴파일러는 인터프리터처럼 매크로 정의를 호출하고 확장을받습니다. 그러나이 확장을 평가하는 대신 프로그램에 직접 나타난 것처럼 확장을 컴파일합니다. 결과적으로 컴파일 된 코드는 매크로를위한 값과 부작용을 생성하지만 전체 컴파일 속도로 실행됩니다. 매크로 본문이 값과 부작용 자체를 계산 한 경우에는 작동하지 않습니다. 컴파일 시간에 계산되므로 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1eb0dd1586afbfbb0e3724f438c3cd30d30714bc" translate="yes" xml:space="preserve">
          <source>When a major mode defines a system abbrev, it should call &lt;code&gt;define-abbrev&lt;/code&gt; and specify &lt;code&gt;t&lt;/code&gt; for the &lt;code&gt;:system&lt;/code&gt; property. Be aware that any saved non-system abbrevs are restored at startup, i.e., before some major modes are loaded. Therefore, major modes should not assume that their abbrev tables are empty when they are first loaded.</source>
          <target state="translated">주 모드가 시스템 약어를 정의하면 &lt;code&gt;define-abbrev&lt;/code&gt; 를 호출 하고 다음을 지정해야합니다. &lt;code&gt;t&lt;/code&gt; 하고 &lt;code&gt;:system&lt;/code&gt; 속성에 t 를 합니다. 저장된 비 시스템 약어는 시작시, 즉 일부 주요 모드가로드되기 전에 복원됩니다. 따라서 주요 모드는 처음로드 될 때 약어 테이블이 비어 있다고 가정해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="8a03105c21fb50ee3d93c13fa671419d66c0f8e1" translate="yes" xml:space="preserve">
          <source>When a minibuffer is inactive, its major mode is &lt;code&gt;minibuffer-inactive-mode&lt;/code&gt;, with keymap &lt;code&gt;minibuffer-inactive-mode-map&lt;/code&gt;. This is only really useful if the minibuffer is in a separate frame. See &lt;a href=&quot;minibuffers-and-frames#Minibuffers-and-Frames&quot;&gt;Minibuffers and Frames&lt;/a&gt;.</source>
          <target state="translated">미니 버퍼가 비활성 상태 일 때 주요 모드는 &lt;code&gt;minibuffer-inactive-mode&lt;/code&gt; 이며 keymap &lt;code&gt;minibuffer-inactive-mode-map&lt;/code&gt; 이 있습니다. 입니다. 이것은 미니 버퍼가 별도의 프레임에있는 경우에만 정말 유용합니다. &lt;a href=&quot;minibuffers-and-frames#Minibuffers-and-Frames&quot;&gt;미니 버퍼 및 프레임을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="48ac006d9a3055538851ac5d15d58ffe2652f56f" translate="yes" xml:space="preserve">
          <source>When a parent frame is about to be deleted (see &lt;a href=&quot;deleting-frames#Deleting-Frames&quot;&gt;Deleting Frames&lt;/a&gt;), its child frames are recursively deleted before it. There is one exception to this rule: When the child frame serves as a surrogate minibuffer frame (see &lt;a href=&quot;minibuffers-and-frames#Minibuffers-and-Frames&quot;&gt;Minibuffers and Frames&lt;/a&gt;) for another frame, it is retained until the parent frame has been deleted. If, at this time, no remaining frame uses the child frame as its minibuffer frame, Emacs will try to delete the child frame too. If that deletion fails for whatever reason, the child frame is made a top-level frame.</source>
          <target state="translated">상위 프레임이 &lt;a href=&quot;deleting-frames#Deleting-Frames&quot;&gt;삭제 되려고&lt;/a&gt; 할 때 ( 프레임 삭제 참조) ) 하위 프레임은 그 전에 재귀 적으로 삭제됩니다. 이 규칙에는 한 가지 예외가 있습니다. 자식 프레임 이 다른 프레임에 대한 대리 &lt;a href=&quot;minibuffers-and-frames#Minibuffers-and-Frames&quot;&gt;미니 버퍼&lt;/a&gt; 프레임 ( 미니 버퍼 및 프레임 참조) 역할을하는 경우 부모 프레임이 삭제 될 때까지 유지됩니다. 현재 남아있는 프레임이 자식 프레임을 미니 버퍼 프레임으로 사용하지 않는 경우 Emacs는 자식 프레임도 삭제하려고 시도합니다. 어떤 이유로 든 삭제가 실패하면 하위 프레임이 최상위 프레임이됩니다.</target>
        </trans-unit>
        <trans-unit id="ed05a75e23177eb915215123c32f76bdb4c61bc4" translate="yes" xml:space="preserve">
          <source>When a parent frame is resized, its child frames conceptually retain their previous sizes and their positions relative to the left upper corner of the parent. This means that a child frame may become (partially) invisible when its parent frame shrinks. The parameter &lt;code&gt;keep-ratio&lt;/code&gt; (see &lt;a href=&quot;frame-interaction-parameters#Frame-Interaction-Parameters&quot;&gt;Frame Interaction Parameters&lt;/a&gt;) can be used to resize and reposition a child frame proportionally whenever its parent frame is resized. This may avoid obscuring parts of a frame when its parent frame is shrunk.</source>
          <target state="translated">부모 프레임의 크기가 조정되면 해당 자식 프레임은 개념적으로 이전 크기와 부모의 왼쪽 상단 모서리를 기준으로 위치를 유지합니다. 이것은 부모 프레임이 축소 될 때 자식 프레임이 (부분적으로) 보이지 않게 될 수 있음을 의미합니다. 매개 변수 &lt;code&gt;keep-ratio&lt;/code&gt; (&lt;a href=&quot;frame-interaction-parameters#Frame-Interaction-Parameters&quot;&gt; 프레임 상호 작용 매개 변수&lt;/a&gt; )는 상위 프레임의 크기가 조정될 때마다 비례 적으로 하위 프레임의 크기와 위치를 조정하는 데 사용할 수 있습니다. 이렇게하면 상위 프레임이 축소 될 때 프레임의 일부가 가려지는 것을 방지 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5c3f9b5837def7e9b15c164f72cd506efec7632" translate="yes" xml:space="preserve">
          <source>When a prefix key ending with a keyboard event (a character or function key) has a definition that is a menu keymap, the keymap operates as a keyboard menu; the user specifies the next event by choosing a menu item with the keyboard.</source>
          <target state="translated">키보드 이벤트 (문자 또는 기능 키)로 끝나는 접두사 키에 메뉴 키맵 정의가있는 경우 키맵은 키보드 메뉴로 작동합니다. 사용자는 키보드로 메뉴 항목을 선택하여 다음 이벤트를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="f440b9496fba6ce132e0464b8bda1fe9486b9bae" translate="yes" xml:space="preserve">
          <source>When a process is deleted, the process object itself continues to exist as long as other Lisp objects point to it. All the Lisp primitives that work on process objects accept deleted processes, but those that do I/O or send signals will report an error. The process mark continues to point to the same place as before, usually into a buffer where output from the process was being inserted.</source>
          <target state="translated">프로세스가 삭제되면 다른 Lisp 개체가 가리키는 한 프로세스 개체 자체는 계속 존재합니다. 프로세스 객체에서 작동하는 모든 Lisp 프리미티브는 삭제 된 프로세스를 수락하지만 I / O를 수행하거나 신호를 보내는 프로세스는 오류를보고합니다. 프로세스 표시는 이전과 동일한 위치를 계속 가리키며 일반적으로 프로세스의 출력이 삽입되는 버퍼를 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="56ddd4f83c391de6b941efd892052015c708047f" translate="yes" xml:space="preserve">
          <source>When a program creates a list or the user defines a new function (such as by loading a library), that data is placed in normal storage. If normal storage runs low, then Emacs asks the operating system to allocate more memory. Different types of Lisp objects, such as symbols, cons cells, small vectors, markers, etc., are segregated in distinct blocks in memory. (Large vectors, long strings, buffers and certain other editing types, which are fairly large, are allocated in individual blocks, one per object; small strings are packed into blocks of 8k bytes, and small vectors are packed into blocks of 4k bytes).</source>
          <target state="translated">프로그램이 목록을 만들거나 사용자가 새 기능을 정의하면 (예 : 라이브러리로드) 해당 데이터는 일반 저장소에 저장됩니다. 정상적인 저장 공간이 부족하면 Emacs는 운영 체제에 더 많은 메모리를 할당하도록 요청합니다. 기호, 죄수 셀, 작은 벡터, 마커 등과 같은 다양한 유형의 Lisp 객체는 메모리의 개별 블록으로 분리됩니다. (큰 벡터, 긴 문자열, 버퍼 및 상당히 큰 특정 기타 편집 유형은 개체 당 하나씩 개별 블록에 할당됩니다. 작은 문자열은 8k 바이트 블록으로 압축되고 작은 벡터는 4k 바이트 블록으로 압축됩니다) .</target>
        </trans-unit>
        <trans-unit id="e858995b7d6397134442bae4500cffe28c53d118" translate="yes" xml:space="preserve">
          <source>When a program loops infinitely and fails to return, your first problem is to stop the loop. On most operating systems, you can do this with</source>
          <target state="translated">프로그램이 무한 반복되고 반환에 실패하면 첫 번째 문제는 루프를 중지하는 것입니다. 대부분의 운영 체제에서이 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="99fc92ca1ef12829e3b40b2fdb5f985c36dc412c" translate="yes" xml:space="preserve">
          <source>When a single operation does both input and output, as do &lt;code&gt;call-process-region&lt;/code&gt; and &lt;code&gt;start-process&lt;/code&gt;, both &lt;code&gt;coding-system-for-read&lt;/code&gt; and &lt;code&gt;coding-system-for-write&lt;/code&gt; affect it.</source>
          <target state="translated">한 번의 동작은 입력 및 출력 모두를 수행 할 때,과 같이 &lt;code&gt;call-process-region&lt;/code&gt; 및 &lt;code&gt;start-process&lt;/code&gt; 모두 &lt;code&gt;coding-system-for-read&lt;/code&gt; 및 &lt;code&gt;coding-system-for-write&lt;/code&gt; 를 영향을줍니다.</target>
        </trans-unit>
        <trans-unit id="516a97ac3ec0fdf483b3ca895c8f711f63330dd4" translate="yes" xml:space="preserve">
          <source>When a specification list involves alternatives or repetition, matching it against an actual macro call may require backtracking. For more details, see &lt;a href=&quot;backtracking#Backtracking&quot;&gt;Backtracking&lt;/a&gt;.</source>
          <target state="translated">사양 목록에 대안 또는 반복이 포함 된 경우 실제 매크로 호출과 일치 시키려면 역 추적이 필요할 수 있습니다. 자세한 내용은 &lt;a href=&quot;backtracking#Backtracking&quot;&gt;역 추적을&lt;/a&gt; 참조하십시오. .</target>
        </trans-unit>
        <trans-unit id="a299fd429f9b94cfd9d16f7a978ab66b811cfe4f" translate="yes" xml:space="preserve">
          <source>When a subprocess terminates, Emacs reads any pending output, then stops reading output from that subprocess. Therefore, if the subprocess has children that are still live and still producing output, Emacs won&amp;rsquo;t receive that output.</source>
          <target state="translated">하위 프로세스가 종료되면 Emacs는 보류중인 출력을 읽은 다음 해당 하위 프로세스에서 출력 읽기를 중지합니다. 따라서 하위 프로세스에 아직 활성 상태이고 여전히 출력을 생성하는 자식이있는 경우 Emacs는 해당 출력을 수신하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d02327464eaa317bb28db233571b0947ae26b2fc" translate="yes" xml:space="preserve">
          <source>When a symbol appears as the car of a list, we find the real function via the symbol.</source>
          <target state="translated">기호가 목록의 자동차로 나타나면 기호를 통해 실제 기능을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="c9b22baeefc4620bae940ad60f585e0fdebdf930" translate="yes" xml:space="preserve">
          <source>When a symbol is evaluated, it is treated as a variable. The result is the variable&amp;rsquo;s value, if it has one. If the symbol has no value as a variable, the Lisp interpreter signals an error. For more information on the use of variables, see &lt;a href=&quot;variables#Variables&quot;&gt;Variables&lt;/a&gt;.</source>
          <target state="translated">기호가 평가되면 변수로 처리됩니다. 결과는 변수의 값입니다 (있는 경우). 기호에 변수 값이 없으면 Lisp 인터프리터는 오류 신호를 보냅니다. 변수의 사용에 대한 자세한 내용은 다음을 참조 &lt;a href=&quot;variables#Variables&quot;&gt;변수&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ca3260b389344f34b98f56c5734682c7799e0212" translate="yes" xml:space="preserve">
          <source>When a syntax error is detected, it might not be reported until much later, after higher-level alternatives have been exhausted, and with the point positioned further from the real error. But if backtracking is disabled when an error occurs, it can be reported immediately. Note that backtracking is also reenabled automatically in several situations; when a new alternative is established by &lt;code&gt;&amp;amp;optional&lt;/code&gt;, &lt;code&gt;&amp;amp;rest&lt;/code&gt;, or &lt;code&gt;&amp;amp;or&lt;/code&gt;, or at the start of processing a sublist, group, or indirect specification. The effect of enabling or disabling backtracking is limited to the remainder of the level currently being processed and lower levels.</source>
          <target state="translated">구문 오류가 감지되면 더 높은 수준의 대안이 모두 사용 된 후 실제 오류에서 더 멀리 위치하는 지점으로 훨씬 나중에보고되지 않을 수 있습니다. 그러나 오류가 발생했을 때 역 추적을 비활성화하면 즉시보고 할 수 있습니다. 역 추적은 여러 상황에서 자동으로 다시 활성화됩니다. &lt;code&gt;&amp;amp;optional&lt;/code&gt; , &lt;code&gt;&amp;amp;rest&lt;/code&gt; , &lt;code&gt;&amp;amp;or&lt;/code&gt; 의해 새로운 대안이 설정 될 때 또는 하위 목록, 그룹 또는 간접 사양 처리를 시작할 때. 역 추적 활성화 또는 비활성화의 효과는 현재 처리중인 나머지 수준과 더 낮은 수준으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="b11e2d87637b03c717ef6efd4945b67ae857ecab" translate="yes" xml:space="preserve">
          <source>When a user drags something from another application over Emacs, that other application expects Emacs to tell it if Emacs can handle the data that is dragged. The variable &lt;code&gt;x-dnd-test-function&lt;/code&gt; is used by Emacs to determine what to reply. The default value is &lt;code&gt;x-dnd-default-test-function&lt;/code&gt; which accepts drops if the type of the data to be dropped is present in &lt;code&gt;x-dnd-known-types&lt;/code&gt;. You can customize &lt;code&gt;x-dnd-test-function&lt;/code&gt; and/or &lt;code&gt;x-dnd-known-types&lt;/code&gt; if you want Emacs to accept or reject drops based on some other criteria.</source>
          <target state="translated">사용자가 Emacs를 통해 다른 응용 프로그램에서 무언가를 드래그 할 때 다른 응용 프로그램은 Emacs가 Emacs가 드래그 된 데이터를 처리 할 수 ​​있는지 알려줄 것을 기대합니다. 변수 &lt;code&gt;x-dnd-test-function&lt;/code&gt; 은 Emacs에서 응답 할 내용을 결정하는 데 사용됩니다. 기본값은 &lt;code&gt;x-dnd-default-test-function&lt;/code&gt; 이며 삭제할 데이터 유형이 &lt;code&gt;x-dnd-known-types&lt;/code&gt; 에있는 경우 삭제를 허용 합니다 . Emacs가 다른 기준에 따라 드롭을 수락하거나 거부하도록하려면 &lt;code&gt;x-dnd-test-function&lt;/code&gt; 및 / 또는 &lt;code&gt;x-dnd-known-types&lt;/code&gt; 사용자 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1088cc10e444d7abc4d69e025d9a0f2f59cc4c10" translate="yes" xml:space="preserve">
          <source>When a user runs</source>
          <target state="translated">사용자가 실행할 때</target>
        </trans-unit>
        <trans-unit id="013b54ee6a433237ecb0a87b09afb3684e276c9e" translate="yes" xml:space="preserve">
          <source>When a window is split, there are two live windows where previously there was one. One of these is represented by the same Lisp window object as the original window, and the other is represented by a newly-created Lisp window object. Both of these live windows become leaf nodes of the window tree, as &lt;em&gt;child windows&lt;/em&gt; of a single internal window. If necessary, Emacs automatically creates this internal window, which is also called the &lt;em&gt;parent window&lt;/em&gt;, and assigns it to the appropriate position in the window tree. A set of windows that share the same parent are called &lt;em&gt;siblings&lt;/em&gt;.</source>
          <target state="translated">창이 분할되면 이전에 하나가 있었던 두 개의 라이브 창이 있습니다. 이 중 하나는 원래 창과 동일한 Lisp 창 개체로 표시되고 다른 하나는 새로 생성 된 Lisp 창 개체로 표시됩니다. 이러한 라이브 창은 모두 단일 내부 창의 &lt;em&gt;자식 창&lt;/em&gt; 으로 창 트리의 리프 노드가 됩니다. 필요한 경우 Emacs는 자동으로 &lt;em&gt;부모 창&lt;/em&gt; 이라고도하는이 내부 창을 만들고 창 트리의 적절한 위치에 할당합니다. 동일한 부모를 공유하는 일련의 창을 &lt;em&gt;형제&lt;/em&gt; 라고 합니다.</target>
        </trans-unit>
        <trans-unit id="a0fff40bc687c049f98993acb43336fd2dbaafc1" translate="yes" xml:space="preserve">
          <source>When an URL is dropped on Emacs it may be a file, but it may also be another URL type (https, etc.). Emacs first checks &lt;code&gt;dnd-protocol-alist&lt;/code&gt; to determine what to do with the URL. If there is no match there and if &lt;code&gt;browse-url-browser-function&lt;/code&gt; is an alist, Emacs looks for a match there. If no match is found the text for the URL is inserted. If you want to alter Emacs behavior, you can customize these variables.</source>
          <target state="translated">URL이 Emacs에 드롭되면 파일 일 수 있지만 다른 URL 유형 (https 등) 일 수도 있습니다. Emacs는 먼저 &lt;code&gt;dnd-protocol-alist&lt;/code&gt; 를 확인하여 URL로 수행 할 작업을 결정합니다. 일치하는 항목이없고 &lt;code&gt;browse-url-browser-function&lt;/code&gt; 이 목록이면 Emacs는 일치하는 항목을 찾습니다. 일치하는 항목이 없으면 URL 텍스트가 삽입됩니다. Emacs 동작을 변경하려면 이러한 변수를 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d905b87f7dc12935b9ba5bafff41eb6ecc8d654c" translate="yes" xml:space="preserve">
          <source>When an editing command returns to the editor command loop, Emacs automatically calls &lt;code&gt;set-buffer&lt;/code&gt; on the buffer shown in the selected window. This is to prevent confusion: it ensures that the buffer that the cursor is in, when Emacs reads a command, is the buffer to which that command applies (see &lt;a href=&quot;command-loop#Command-Loop&quot;&gt;Command Loop&lt;/a&gt;). Thus, you should not use &lt;code&gt;set-buffer&lt;/code&gt; to switch visibly to a different buffer; for that, use the functions described in &lt;a href=&quot;switching-buffers#Switching-Buffers&quot;&gt;Switching Buffers&lt;/a&gt;.</source>
          <target state="translated">편집 명령이 편집기 명령 루프로 돌아 오면 Emacs 는 선택한 창에 표시된 &lt;code&gt;set-buffer&lt;/code&gt; 에서 자동으로 set-buffer 를 호출합니다 . 이는 혼동을 방지하기위한 것입니다. Emacs가 명령을 읽을 때 커서가있는 버퍼가 해당 명령이 적용되는 버퍼인지 확인합니다 ( &lt;a href=&quot;command-loop#Command-Loop&quot;&gt;Command Loop&lt;/a&gt; 참조 ). 따라서 다른 버퍼로 가시적으로 전환하기 위해 &lt;code&gt;set-buffer&lt;/code&gt; 를 사용해서는 안됩니다 . 이를 위해 &lt;a href=&quot;switching-buffers#Switching-Buffers&quot;&gt;버퍼 전환에&lt;/a&gt; 설명 된 기능을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="a63b9424b082eb16ff6e47f9ec417106a08efb63" translate="yes" xml:space="preserve">
          <source>When an element to be deleted appears in the middle of the list, removing it involves changing the &lt;small&gt;CDR&lt;/small&gt;s (see &lt;a href=&quot;setcdr#Setcdr&quot;&gt;Setcdr&lt;/a&gt;).</source>
          <target state="translated">삭제할 요소가 목록 중간에 나타나면 제거 할 때 &lt;small&gt;CDR&lt;/small&gt; 변경이 포함됩니다 ( &lt;a href=&quot;setcdr#Setcdr&quot;&gt;Setcdr&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="f91f46b78ede2a184a9ff10dc05a67b641f68fc1" translate="yes" xml:space="preserve">
          <source>When an error is due to invalid syntax in the program, the byte compiler might get confused about the error&amp;rsquo;s exact location. One way to investigate is to switch to the buffer</source>
          <target state="translated">오류가 프로그램의 유효하지 않은 구문으로 인한 경우 바이트 컴파일러는 오류의 정확한 위치에 대해 혼동 할 수 있습니다. 조사하는 한 가지 방법은 버퍼로 전환하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="fe67ca8b13923e7334c27d3034d89eaf3eaeaf0e" translate="yes" xml:space="preserve">
          <source>When an error is signaled, &lt;code&gt;signal&lt;/code&gt; searches for an active &lt;em&gt;handler&lt;/em&gt; for the error. A handler is a sequence of Lisp expressions designated to be executed if an error happens in part of the Lisp program. If the error has an applicable handler, the handler is executed, and control resumes following the handler. The handler executes in the environment of the &lt;code&gt;condition-case&lt;/code&gt; that established it; all functions called within that &lt;code&gt;condition-case&lt;/code&gt; have already been exited, and the handler cannot return to them.</source>
          <target state="translated">오류가 시그널링 될 때, &lt;code&gt;signal&lt;/code&gt; 활성에 대한 검색을 &lt;em&gt;핸들러&lt;/em&gt; 오류에 대한. 핸들러는 Lisp 프로그램의 일부에서 오류가 발생하는 경우 실행되도록 지정된 Lisp 표현식의 시퀀스입니다. 오류에 적용 가능한 처리기가 있으면 처리기가 실행되고 처리기 다음에 제어가 다시 시작됩니다. 핸들러는 설정 한 &lt;code&gt;condition-case&lt;/code&gt; 의 환경에서 실행됩니다 . 해당 &lt;code&gt;condition-case&lt;/code&gt; 내에서 호출 된 모든 함수 는 이미 종료되었으며 핸들러는 리턴 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="526e253e8a5f3181a9d9da8a1b7155b742b86978" translate="yes" xml:space="preserve">
          <source>When an error is signaled, Emacs&amp;rsquo;s default reaction is to print an error message and terminate execution of the current command. This is the right thing to do in most cases, such as if you type</source>
          <target state="translated">오류가 발생하면 Emacs의 기본 반응은 오류 메시지를 인쇄하고 현재 명령의 실행을 종료하는 것입니다. 이것은 입력하는 경우와 같이 대부분의 경우에 올바른 작업입니다.</target>
        </trans-unit>
        <trans-unit id="57011ae63cb24d3bbaef9a2a30919d44a5c13eb5" translate="yes" xml:space="preserve">
          <source>When an operation can take a while to finish, you should inform the user about the progress it makes. This way the user can estimate remaining time and clearly see that Emacs is busy working, not hung. A convenient way to do this is to use a &lt;em&gt;progress reporter&lt;/em&gt;.</source>
          <target state="translated">작업이 완료되는 데 시간이 걸릴 수있는 경우 사용자에게 진행 상황을 알려야합니다. 이런 식으로 사용자는 남은 시간을 추정하고 Emacs가 중단되지 않고 작업 중인지 명확하게 확인할 수 있습니다. 이를 수행하는 편리한 방법은 &lt;em&gt;진행보고자&lt;/em&gt; 를 사용하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="d7b21e47df479ca24f88848b86d2e4329934e81a" translate="yes" xml:space="preserve">
          <source>When any event happens, Emacs will call the &lt;var&gt;callback&lt;/var&gt; function passing it a single argument &lt;var&gt;event&lt;/var&gt;, which is of the form</source>
          <target state="translated">어떤 이벤트가 발생하면, 이맥스는 호출 할 &lt;var&gt;callback&lt;/var&gt; 그것을 하나의 인자를 전달하는 기능 &lt;var&gt;event&lt;/var&gt; 양식입니다,</target>
        </trans-unit>
        <trans-unit id="f54087aa444a51ff54f6c514333f1db9ca4b0182" translate="yes" xml:space="preserve">
          <source>When called after a change, each function receives five arguments: the overlay, &lt;code&gt;t&lt;/code&gt;, the beginning and end of the text range just modified, and the length of the pre-change text replaced by that range. (For an insertion, the pre-change length is zero; for a deletion, that length is the number of characters deleted, and the post-change beginning and end are equal.)</source>
          <target state="translated">변경 후 호출 될 때 각 함수는 오버레이, &lt;code&gt;t&lt;/code&gt; , 방금 수정 한 텍스트 범위의 시작과 끝, 해당 범위로 대체 된 변경 전 텍스트의 길이 등 5 개의 인수를받습니다 . (삽입의 경우 변경 전 길이는 0이고, 삭제의 경우 해당 길이는 삭제 된 문자 수이며 변경 후 시작과 끝은 동일합니다.)</target>
        </trans-unit>
        <trans-unit id="32901ad7853d3072da02c269a04b96f55a95d101" translate="yes" xml:space="preserve">
          <source>When called before a change, each function receives four arguments: the overlay, &lt;code&gt;nil&lt;/code&gt;, and the beginning and end of the text range to be modified.</source>
          <target state="translated">변경 전에 호출 될 때 각 함수는 오버레이, &lt;code&gt;nil&lt;/code&gt; 및 수정할 텍스트 범위의 시작과 끝의 네 가지 인수를받습니다 .</target>
        </trans-unit>
        <trans-unit id="379e276f62a8b0d26dd454758763b3c43a823f7d" translate="yes" xml:space="preserve">
          <source>When called from Lisp, this function is completely equivalent to:</source>
          <target state="translated">Lisp에서 호출하면이 함수는 다음과 완전히 동일합니다.</target>
        </trans-unit>
        <trans-unit id="1e4ecd1153bce92bc43401b33a3763adb2023a7d" translate="yes" xml:space="preserve">
          <source>When called from Lisp, this function prints a message listing the shadowed files, instead of displaying them in a buffer. If the optional argument &lt;code&gt;stringp&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, it instead returns the shadowed files as a string.</source>
          <target state="translated">Lisp에서 호출되면이 함수는 버퍼에 표시하는 대신 음영 처리 된 파일을 나열하는 메시지를 인쇄합니다. 선택적 인수 &lt;code&gt;stringp&lt;/code&gt; 가 &lt;code&gt;nil&lt;/code&gt; 이 아니면 대신에 섀도우 파일을 문자열로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1025d2ab7f41cbfd9c8680dcbf05ab1356f6200a" translate="yes" xml:space="preserve">
          <source>When called interactively, &lt;var&gt;column&lt;/var&gt; is the value of prefix numeric argument. If &lt;var&gt;column&lt;/var&gt; is not an integer, an error is signaled.</source>
          <target state="translated">대화식으로 호출 할 때 &lt;var&gt;column&lt;/var&gt; 은 접두사 숫자 인수의 값입니다. &lt;var&gt;column&lt;/var&gt; 이 정수가 아닌 경우 오류가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="ddbb33035ae6026ae4fcd8439b1ecc8b75c72889" translate="yes" xml:space="preserve">
          <source>When called interactively, it prints the uptime in the echo area.</source>
          <target state="translated">대화식으로 호출하면 에코 영역에 가동 시간이 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="512b6ff9d518561c55b0c73d9b583830f1e19c4a" translate="yes" xml:space="preserve">
          <source>When called interactively, the command defaults to putting point after text, and a prefix argument inverts this behavior.</source>
          <target state="translated">대화식으로 호출 할 때 명령은 기본적으로 텍스트 뒤에 포인트를 배치하고 접두사 인수는이 동작을 반전시킵니다.</target>
        </trans-unit>
        <trans-unit id="c1e95c99e8bc8c354f749aa3affddeba03679d17" translate="yes" xml:space="preserve">
          <source>When choosing the key sequences for Lisp programs to rebind, please follow the Emacs conventions for use of various keys (see &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html#Key-Binding-Conventions&quot;&gt;Key Binding Conventions&lt;/a&gt;).</source>
          <target state="translated">리 바인딩 할 Lisp 프로그램의 키 시퀀스를 선택할 때 다양한 키 사용에 대한 Emacs 규칙을 따르십시오 ( &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html#Key-Binding-Conventions&quot;&gt;키 바인딩 규칙&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="53b48e62ee1a029c3d507ab151392d9b81fa4a99" translate="yes" xml:space="preserve">
          <source>When code run by a thread signals an error that is unhandled, the thread exits. Other threads can access the error form which caused the thread to exit using the following function.</source>
          <target state="translated">스레드에 의해 실행 된 코드가 처리되지 않은 오류를 신호하면 스레드가 종료됩니다. 다른 스레드는 다음 함수를 사용하여 스레드가 종료 된 오류 양식에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="26fc8259867dd56763a05c30c19e9f26b5dbdaaa" translate="yes" xml:space="preserve">
          <source>When commands are remapped (see &lt;a href=&quot;remapping-commands#Remapping-Commands&quot;&gt;Remapping Commands&lt;/a&gt;), &lt;code&gt;key-binding&lt;/code&gt; normally processes command remappings so as to return the remapped command that will actually be executed. However, if &lt;var&gt;no-remap&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;key-binding&lt;/code&gt; ignores remappings and returns the binding directly specified for &lt;var&gt;key&lt;/var&gt;.</source>
          <target state="translated">명령이 재 매핑 될 때 (참조 &lt;a href=&quot;remapping-commands#Remapping-Commands&quot;&gt;리매핑 명령&lt;/a&gt; ), &lt;code&gt;key-binding&lt;/code&gt; 통상 실제로 실행될 재배치 명령을 복귀 시키도록 명령을 재 매핑 처리한다. 그러나, &lt;var&gt;no-remap&lt;/var&gt; 비없는 &lt;code&gt;nil&lt;/code&gt; , &lt;code&gt;key-binding&lt;/code&gt; 무시의 재 매핑 및 반품 직접 지정된 바인딩 &lt;var&gt;key&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="1bcc346f6a00bc954a41f55bb8f168c5d28fa7bd" translate="yes" xml:space="preserve">
          <source>When constructing a case table, you can provide &lt;code&gt;nil&lt;/code&gt; for &lt;var&gt;canonicalize&lt;/var&gt;; then Emacs fills in this slot from the lower case and upper case mappings. You can also provide &lt;code&gt;nil&lt;/code&gt; for &lt;var&gt;equivalences&lt;/var&gt;; then Emacs fills in this slot from &lt;var&gt;canonicalize&lt;/var&gt;. In a case table that is actually in use, those components are non-&lt;code&gt;nil&lt;/code&gt;. Do not try to specify &lt;var&gt;equivalences&lt;/var&gt; without also specifying &lt;var&gt;canonicalize&lt;/var&gt;.</source>
          <target state="translated">케이스 테이블을 구성 할 때 &lt;var&gt;canonicalize&lt;/var&gt; 에 &lt;code&gt;nil&lt;/code&gt; 을 제공 할 수 있습니다 . 그러면 Emacs는 소문자 및 대문자 매핑에서이 슬롯을 채 웁니다. &lt;var&gt;equivalences&lt;/var&gt; 대해 &lt;code&gt;nil&lt;/code&gt; 을 제공 할 수도 있습니다 . Emacs는 &lt;var&gt;canonicalize&lt;/var&gt; 에서이 슬롯을 채 웁니다 . 실제로 사용중인 케이스 테이블에서 해당 구성 요소는 &lt;code&gt;nil&lt;/code&gt; 이 아닙니다 . &lt;var&gt;canonicalize&lt;/var&gt; 를 지정 하지 않고 &lt;var&gt;equivalences&lt;/var&gt; 을 지정하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="9c7036dd834760da23b77a262006bb0d858781c8" translate="yes" xml:space="preserve">
          <source>When defining a lambda expression that is to be used as an anonymous function, you can in principle use any method to construct the list. But typically you should use the &lt;code&gt;lambda&lt;/code&gt; macro, or the &lt;code&gt;function&lt;/code&gt; special form, or the &lt;code&gt;#'&lt;/code&gt; read syntax:</source>
          <target state="translated">익명 함수로 사용할 람다 식을 정의 할 때 원칙적으로 모든 메서드를 사용하여 목록을 구성 할 수 있습니다. 그러나 일반적으로 &lt;code&gt;lambda&lt;/code&gt; 매크로, &lt;code&gt;function&lt;/code&gt; 특수 형식 또는 &lt;code&gt;#'&lt;/code&gt; 읽기 구문 을 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="d1ea493148249faf21a7954fe286fc73f09681a6" translate="yes" xml:space="preserve">
          <source>When defining a macro you must pay attention to the number of times the arguments will be evaluated when the expansion is executed. The following macro (used to facilitate iteration) illustrates the problem. This macro allows us to write a for-loop construct.</source>
          <target state="translated">매크로를 정의 할 때 확장이 실행될 때 인수가 평가되는 횟수에주의해야합니다. 다음 매크로 (반복을 용이하게하는 데 사용됨)는 문제를 보여줍니다. 이 매크로를 사용하면 for 루프 구조를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea87e0d7dbdf5374ec0e7361bf0a991a49440aba" translate="yes" xml:space="preserve">
          <source>When defining a user option using &lt;code&gt;defcustom&lt;/code&gt;, you can set its &lt;code&gt;safe-local-variable&lt;/code&gt; property by adding the arguments &lt;code&gt;:safe &lt;var&gt;function&lt;/var&gt;&lt;/code&gt; to &lt;code&gt;defcustom&lt;/code&gt; (see &lt;a href=&quot;variable-definitions#Variable-Definitions&quot;&gt;Variable Definitions&lt;/a&gt;). However, a safety predicate defined using &lt;code&gt;:safe&lt;/code&gt; will only be known once the package that contains the &lt;code&gt;defcustom&lt;/code&gt; is loaded, which is often too late. As an alternative, you can use the autoload cookie (see &lt;a href=&quot;autoload#Autoload&quot;&gt;Autoload&lt;/a&gt;) to assign the option its safety predicate, like this:</source>
          <target state="translated">&lt;code&gt;defcustom&lt;/code&gt; 을 사용하여 사용자 옵션을 정의 할 때 인수 &lt;code&gt;:safe &lt;var&gt;function&lt;/var&gt;&lt;/code&gt; &lt;var&gt;function&lt;/var&gt; 를 &lt;code&gt;defcustom&lt;/code&gt; 에 추가하여 &lt;code&gt;safe-local-variable&lt;/code&gt; 속성을 설정할 수 있습니다 ( &lt;a href=&quot;variable-definitions#Variable-Definitions&quot;&gt;변수 정의&lt;/a&gt; 참조 ). 그러나 &lt;code&gt;:safe&lt;/code&gt; 를 사용하여 정의 된 안전 조건 자는 &lt;code&gt;defcustom&lt;/code&gt; 을 포함하는 패키지 가로드 된 후에 만 ​​알려집니다. 이는 종종 너무 늦습니다. 대안으로 자동로드 쿠키 ( &lt;a href=&quot;autoload#Autoload&quot;&gt;Autoload&lt;/a&gt; 참조 )를 사용하여 다음과 같이 안전 조건자를 옵션에 할당 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2806d24cf47d96d2e5d91ed9a9c954116c18c451" translate="yes" xml:space="preserve">
          <source>When defining and initializing a variable that holds a complicated value (such as a keymap with bindings in it), it&amp;rsquo;s best to put the entire computation of the value into the &lt;code&gt;defvar&lt;/code&gt;, like this:</source>
          <target state="translated">복잡한 값 (예 : 바인딩이있는 키맵)을 포함하는 변수를 정의하고 초기화 할 때 다음과 같이 값의 전체 계산을 &lt;code&gt;defvar&lt;/code&gt; 에 넣는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="c977341f7fff9083b488a6a6277d4ef2105523d4" translate="yes" xml:space="preserve">
          <source>When deleting the last sibling of a window &lt;var&gt;W&lt;/var&gt;, its parent window is deleted too, with &lt;var&gt;W&lt;/var&gt; replacing it in the window tree. This means that &lt;var&gt;W&lt;/var&gt; must be recombined with its parent&amp;rsquo;s siblings to form a new window combination (see &lt;a href=&quot;windows-and-frames#Windows-and-Frames&quot;&gt;Windows and Frames&lt;/a&gt;). In some occasions, deleting a live window may even entail the deletion of two internal windows.</source>
          <target state="translated">창 &lt;var&gt;W&lt;/var&gt; 의 마지막 형제를 삭제하면 상위 창도 삭제되고 &lt;var&gt;W&lt;/var&gt; 는 창 트리에서이를 대체합니다. 즉, &lt;var&gt;W&lt;/var&gt; 는 새 창 조합을 형성하기 위해 부모의 형제와 다시 결합되어야합니다 ( &lt;a href=&quot;windows-and-frames#Windows-and-Frames&quot;&gt;Windows 및 프레임&lt;/a&gt; 참조 ). 경우에 따라 라이브 창을 삭제하면 두 개의 내부 창이 삭제 될 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="1f21ac0b84af4a66f3cc646c451b88df78bbc28a" translate="yes" xml:space="preserve">
          <source>When documentation strings refer to key sequences, they should use the current, actual key bindings. They can do so using certain special text sequences described below. Accessing documentation strings in the usual way substitutes current key binding information for these special sequences. This works by calling &lt;code&gt;substitute-command-keys&lt;/code&gt;. You can also call that function yourself.</source>
          <target state="translated">문서 문자열이 키 시퀀스를 참조 할 때 현재의 실제 키 바인딩을 사용해야합니다. 아래에 설명 된 특정 특수 텍스트 시퀀스를 사용하여 그렇게 할 수 있습니다. 일반적인 방법으로 문서 문자열에 액세스하면 이러한 특수 시퀀스에 대한 현재 키 바인딩 정보가 대체됩니다. 이것은 &lt;code&gt;substitute-command-keys&lt;/code&gt; 를 호출 하여 작동 합니다 . 이 함수를 직접 호출 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="38784df2dd5c218a5d66ce72d620d406cb126c89" translate="yes" xml:space="preserve">
          <source>When dynamic variable binding is in effect (the default), &lt;code&gt;set&lt;/code&gt; has the same effect as &lt;code&gt;setq&lt;/code&gt;, apart from the fact that &lt;code&gt;set&lt;/code&gt; evaluates its &lt;var&gt;symbol&lt;/var&gt; argument whereas &lt;code&gt;setq&lt;/code&gt; does not. But when a variable is lexically bound, &lt;code&gt;set&lt;/code&gt; affects its &lt;em&gt;dynamic&lt;/em&gt; value, whereas &lt;code&gt;setq&lt;/code&gt; affects its current (lexical) value. See &lt;a href=&quot;variable-scoping#Variable-Scoping&quot;&gt;Variable Scoping&lt;/a&gt;.</source>
          <target state="translated">동적 변수는 결합 효과 (기본)의 경우, &lt;code&gt;set&lt;/code&gt; 동일한 효과를 갖는다 &lt;code&gt;setq&lt;/code&gt; 따로 사실에서, &lt;code&gt;set&lt;/code&gt; 의 평가 &lt;var&gt;symbol&lt;/var&gt; 반면 인수 &lt;code&gt;setq&lt;/code&gt; 하지 않는다. 그러나 변수가 어휘 적으로 바인딩되면 &lt;code&gt;set&lt;/code&gt; 는 &lt;em&gt;동적&lt;/em&gt; 값에 영향을 미치는 반면 &lt;code&gt;setq&lt;/code&gt; 는 현재 (어휘) 값에 영향을줍니다. &lt;a href=&quot;variable-scoping#Variable-Scoping&quot;&gt;변수 범위 지정을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f1d9000f8f63f9308377ae130b2620fb8b2d598a" translate="yes" xml:space="preserve">
          <source>When enabling Read Only mode, this mode command also enables View mode if the option &lt;code&gt;view-read-only&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Misc-Buffer.html#Misc-Buffer&quot;&gt;Miscellaneous Buffer Operations&lt;/a&gt; in</source>
          <target state="translated">읽기 전용 모드를 활성화하면 옵션의 경우,이 모드 명령은보기 모드를 활성화 &lt;code&gt;view-read-only&lt;/code&gt; 아닌 것입니다 &lt;code&gt;nil&lt;/code&gt; . 의 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Misc-Buffer.html#Misc-Buffer&quot;&gt;기타 버퍼 작업&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="39bed6ebb0cf7453c269f15c5b34671fbc317d4a" translate="yes" xml:space="preserve">
          <source>When enabling Read Only mode, this mode command also enables View mode if the option &lt;code&gt;view-read-only&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;. See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Misc-Buffer.html#Misc-Buffer&quot;&gt;Miscellaneous Buffer Operations&lt;/a&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aa5d17efedfa09b34f34f20b7fb94849c3e7350" translate="yes" xml:space="preserve">
          <source>When evaluating Emacs Lisp code directly using an &lt;code&gt;eval&lt;/code&gt; call, lexical binding is enabled if the &lt;var&gt;lexical&lt;/var&gt; argument to &lt;code&gt;eval&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;. See &lt;a href=&quot;eval#Eval&quot;&gt;Eval&lt;/a&gt;.</source>
          <target state="translated">직접 사용 이맥스 리스프 코드를 평가할 때 &lt;code&gt;eval&lt;/code&gt; 통화를하는 경우, 어휘는 사용 가능 바인딩 &lt;var&gt;lexical&lt;/var&gt; 인수 &lt;code&gt;eval&lt;/code&gt; IS 비 &lt;code&gt;nil&lt;/code&gt; . &lt;a href=&quot;eval#Eval&quot;&gt;Eval을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5ff58c996861fc90fd655da46d45167aa63d6f1a" translate="yes" xml:space="preserve">
          <source>When file I/O functions signal Lisp errors, they usually use the condition &lt;code&gt;file-error&lt;/code&gt; (see &lt;a href=&quot;handling-errors#Handling-Errors&quot;&gt;Handling Errors&lt;/a&gt;). The error message is in most cases obtained from the operating system, according to locale &lt;code&gt;system-messages-locale&lt;/code&gt;, and decoded using coding system &lt;code&gt;locale-coding-system&lt;/code&gt; (see &lt;a href=&quot;locales#Locales&quot;&gt;Locales&lt;/a&gt;).</source>
          <target state="translated">파일 I / O 함수가 Lisp 오류를 신호 할 때 일반적으로 조건 &lt;code&gt;file-error&lt;/code&gt; 사용합니다 ( &lt;a href=&quot;handling-errors#Handling-Errors&quot;&gt;오류 처리&lt;/a&gt; 참조 ). 오류 메시지는 대부분의 경우 locale &lt;code&gt;system-messages-locale&lt;/code&gt; 에 따라 운영 체제 에서 가져오고 코딩 시스템 &lt;code&gt;locale-coding-system&lt;/code&gt; 을 사용하여 디코딩 됩니다 ( &lt;a href=&quot;locales#Locales&quot;&gt;Locales&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="350c5b56322aaae92e48e1490682ff07a3544764" translate="yes" xml:space="preserve">
          <source>When horizontal scrolling (see &lt;a href=&quot;horizontal-scrolling#Horizontal-Scrolling&quot;&gt;Horizontal Scrolling&lt;/a&gt;) is in use in a window, that forces truncation.</source>
          <target state="translated">수평 스크롤 (볼 때 &lt;a href=&quot;horizontal-scrolling#Horizontal-Scrolling&quot;&gt;수평 스크롤을&lt;/a&gt; ) 창, 그 힘의 절단에 사용 중입니다.</target>
        </trans-unit>
        <trans-unit id="271aaab86b1337a5ba506711da21c73442cad0a7" translate="yes" xml:space="preserve">
          <source>When inserting text into a buffer, Emacs converts the text to the buffer&amp;rsquo;s representation, as specified by &lt;code&gt;enable-multibyte-characters&lt;/code&gt; in that buffer. In particular, when you insert multibyte text into a unibyte buffer, Emacs converts the text to unibyte, even though this conversion cannot in general preserve all the characters that might be in the multibyte text. The other natural alternative, to convert the buffer contents to multibyte, is not acceptable because the buffer&amp;rsquo;s representation is a choice made by the user that cannot be overridden automatically.</source>
          <target state="translated">텍스트를 버퍼에 삽입 할 때 Emacs는 해당 버퍼의 &lt;code&gt;enable-multibyte-characters&lt;/code&gt; 지정된대로 텍스트를 버퍼의 표현으로 변환합니다 . 특히, 멀티 바이트 텍스트를 유니 바이트 버퍼에 삽입 할 때 Emacs는이 변환이 일반적으로 멀티 바이트 텍스트에있을 수있는 모든 문자를 보존 할 수는 없지만 텍스트를 유니 바이트로 변환합니다. 버퍼 내용을 멀티 바이트로 변환하는 또 다른 자연스러운 대안은 버퍼의 표현이 자동으로 재정의 될 수없는 사용자가 선택한 것이기 때문에 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="78400401d74f8d9f7e140a6ba21ba56a7349b7ae" translate="yes" xml:space="preserve">
          <source>When invoked from within the lexical body of a primary or an &lt;code&gt;:around&lt;/code&gt; auxiliary method, call the next applicable method for the same generic function. Normally, it is called with no arguments, which means to call the next applicable method with the same arguments that the calling method was invoked. Otherwise, the specified arguments are used instead.</source>
          <target state="translated">기본 또는 &lt;code&gt;:around&lt;/code&gt; 보조 메서드 의 어휘 본문 내에서 호출되면 동일한 일반 함수에 대해 다음 적용 가능한 메서드를 호출합니다. 일반적으로 인수없이 호출됩니다. 즉, 호출하는 메서드가 호출 된 것과 동일한 인수를 사용하여 다음 적용 가능한 메서드를 호출합니다. 그렇지 않으면 지정된 인수가 대신 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="22a73a2c2f52de133ad681f2f8a5379ca6fbcaa7" translate="yes" xml:space="preserve">
          <source>When invoked, &lt;var&gt;fname&lt;/var&gt; displays &lt;var&gt;help-text&lt;/var&gt; in a window, then reads and executes a key sequence according to &lt;var&gt;help-map&lt;/var&gt;. The string &lt;var&gt;help-text&lt;/var&gt; should describe the bindings available in &lt;var&gt;help-map&lt;/var&gt;.</source>
          <target state="translated">호출되면 &lt;var&gt;fname&lt;/var&gt; 은 창에 &lt;var&gt;help-text&lt;/var&gt; 를 표시 한 다음 &lt;var&gt;help-map&lt;/var&gt; 에 따라 키 시퀀스를 읽고 실행합니다 . &lt;var&gt;help-text&lt;/var&gt; 문자열 은 &lt;var&gt;help-map&lt;/var&gt; 에서 사용 가능한 바인딩을 설명해야합니다 .</target>
        </trans-unit>
        <trans-unit id="270e8799b814cfce4a286fe2e722afa5227a904d" translate="yes" xml:space="preserve">
          <source>When it appears inside a generator function, &lt;code&gt;iter-yield&lt;/code&gt; indicates that the current iterator should pause and return &lt;var&gt;value&lt;/var&gt; from &lt;code&gt;iter-next&lt;/code&gt;. &lt;code&gt;iter-yield&lt;/code&gt; evaluates to the &lt;code&gt;value&lt;/code&gt; parameter of next call to &lt;code&gt;iter-next&lt;/code&gt;.</source>
          <target state="translated">제너레이터 함수 내에 나타날 때 &lt;code&gt;iter-yield&lt;/code&gt; 는 현재 반복기가 일시 중지하고 &lt;code&gt;iter-next&lt;/code&gt; 에서 &lt;var&gt;value&lt;/var&gt; 을 반환해야 함을 나타냅니다 . &lt;code&gt;iter-yield&lt;/code&gt; 는 &lt;code&gt;iter-next&lt;/code&gt; 에 대한 다음 호출 의 &lt;code&gt;value&lt;/code&gt; 매개 변수로 평가됩니다 .</target>
        </trans-unit>
        <trans-unit id="8e06cf5c06f558efb415ea91b49073c2f1392b41" translate="yes" xml:space="preserve">
          <source>When it is called with no arguments, it should return the next character.</source>
          <target state="translated">인수없이 호출되면 다음 문자를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="d04ba64362f113898459c5f6a31354c18e8509fe" translate="yes" xml:space="preserve">
          <source>When it is called with one argument (always a character), &lt;var&gt;function&lt;/var&gt; should save the argument and arrange to return it on the next call. This is called &lt;em&gt;unreading&lt;/em&gt; the character; it happens when the Lisp reader reads one character too many and wants to put it back where it came from. In this case, it makes no difference what value &lt;var&gt;function&lt;/var&gt; returns.</source>
          <target state="translated">하나의 인수 (항상 문자)로 호출 될 때 &lt;var&gt;function&lt;/var&gt; 는 인수를 저장하고 다음 호출에서 반환하도록 배열해야합니다. 이것을 문자 &lt;em&gt;읽지 않음&lt;/em&gt; 이라고 합니다. Lisp 리더가 한 문자를 너무 많이 읽고 원래 위치로 되돌리려 고 할 때 발생합니다. 이 경우 &lt;var&gt;function&lt;/var&gt; 반환 하는 값에 차이가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="95baf6905d346ff81689596bbb3b320ff6f3106c" translate="yes" xml:space="preserve">
          <source>When its value is non-&lt;code&gt;nil&lt;/code&gt;, this variable takes precedence over all other methods of specifying a coding system to use for input, including &lt;code&gt;file-coding-system-alist&lt;/code&gt;, &lt;code&gt;process-coding-system-alist&lt;/code&gt; and &lt;code&gt;network-coding-system-alist&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;nil&lt;/code&gt; 이 아닌 경우이 변수는 &lt;code&gt;file-coding-system-alist&lt;/code&gt; , &lt;code&gt;process-coding-system-alist&lt;/code&gt; 및 &lt;code&gt;network-coding-system-alist&lt;/code&gt; 를 포함하여 입력에 사용할 코딩 시스템을 지정하는 다른 모든 방법보다 우선 합니다. .</target>
        </trans-unit>
        <trans-unit id="75d41964794dd951ed71d985fbd5fd1e7a11f18e" translate="yes" xml:space="preserve">
          <source>When kill commands are interwoven with other commands, each kill command makes a new entry in the kill ring. Multiple kill commands in succession build up a single kill ring entry, which would be yanked as a unit; the second and subsequent consecutive kill commands add text to the entry made by the first one.</source>
          <target state="translated">kill 명령이 다른 명령과 결합되면 각 kill 명령은 kill 링에 새 항목을 만듭니다. 연속 된 여러 킬 명령은 하나의 킬 링 항목을 구성하며, 이는 하나의 유닛으로 잡아 당깁니다. 두 번째 및 후속 연속 kill 명령은 첫 번째 항목이 만든 항목에 텍스트를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="b3160ac97062e53673f5b7ae6733ac8a5c41c006" translate="yes" xml:space="preserve">
          <source>When lexical binding is enabled, &lt;var&gt;function-object&lt;/var&gt; is converted into a closure. See &lt;a href=&quot;closures#Closures&quot;&gt;Closures&lt;/a&gt;.</source>
          <target state="translated">어휘 바인딩이 활성화되면 &lt;var&gt;function-object&lt;/var&gt; 가 클로저로 변환됩니다. &lt;a href=&quot;closures#Closures&quot;&gt;폐쇄를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="649a0e0a802e8cb989511e43554feca7e3834c9d" translate="yes" xml:space="preserve">
          <source>When libxml2 support is available, the following functions can be used to parse HTML or XML text into Lisp object trees.</source>
          <target state="translated">libxml2 지원을 사용할 수있는 경우 다음 함수를 사용하여 HTML 또는 XML 텍스트를 Lisp 개체 트리로 구문 분석 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2fbc121df2e7d75994e696c8cd6756e93b4a9a7f" translate="yes" xml:space="preserve">
          <source>When loading a source file (not compiled), &lt;code&gt;load&lt;/code&gt; performs character set translation just as Emacs would do when visiting the file. See &lt;a href=&quot;coding-systems#Coding-Systems&quot;&gt;Coding Systems&lt;/a&gt;.</source>
          <target state="translated">소스 파일 (컴파일되지 않음)을 &lt;code&gt;load&lt;/code&gt; 할 때로드는 파일을 방문 할 때 Emacs가 수행하는 것처럼 문자 집합 변환을 수행합니다. &lt;a href=&quot;coding-systems#Coding-Systems&quot;&gt;코딩 시스템을&lt;/a&gt; 참고하십시오 .</target>
        </trans-unit>
        <trans-unit id="f966d17e6f91b40f18d6f070e990c0794fe58fe3" translate="yes" xml:space="preserve">
          <source>When loading an Emacs Lisp file or evaluating a Lisp buffer, lexical binding is enabled if the buffer-local variable &lt;code&gt;lexical-binding&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;:</source>
          <target state="translated">Emacs Lisp 파일을로드하거나 Lisp 버퍼를 평가할 때 buffer-local 변수 &lt;code&gt;lexical-binding&lt;/code&gt; 이 &lt;code&gt;nil&lt;/code&gt; 이 아니면 어휘 바인딩이 활성화됩니다 .</target>
        </trans-unit>
        <trans-unit id="e1913cebbaf53d7eca6a957e910ce8d79fca8ec9" translate="yes" xml:space="preserve">
          <source>When loading an uncompiled file, Emacs tries to expand any macros that the file contains (see &lt;a href=&quot;macros#Macros&quot;&gt;Macros&lt;/a&gt;). We refer to this as &lt;em&gt;eager macro expansion&lt;/em&gt;. Doing this (rather than deferring the expansion until the relevant code runs) can significantly speed up the execution of uncompiled code. Sometimes, this macro expansion cannot be done, owing to a cyclic dependency. In the simplest example of this, the file you are loading refers to a macro defined in another file, and that file in turn requires the file you are loading. This is generally harmless. Emacs prints a warning (&amp;lsquo;</source>
          <target state="translated">컴파일되지 않은 파일을로드 할 때 Emacs는 파일에 포함 된 모든 매크로를 확장하려고합니다 ( &lt;a href=&quot;macros#Macros&quot;&gt;Macros&lt;/a&gt; 참조 ). 이것을 &lt;em&gt;열망 매크로 확장이라고&lt;/em&gt; 합니다. 이렇게하면 (관련 코드가 실행될 때까지 확장을 지연하는 대신) 컴파일되지 않은 코드의 실행 속도를 크게 높일 수 있습니다. 순환 종속성으로 인해이 매크로 확장을 수행 할 수없는 경우가 있습니다. 가장 간단한 예에서로드중인 파일은 다른 파일에 정의 된 매크로를 참조하고 해당 파일에는로드중인 파일이 필요합니다. 이것은 일반적으로 무해합니다. Emacs는 경고 ( '</target>
        </trans-unit>
        <trans-unit id="d977efe2ca2e7e0c3c47bd1b756ac94422eccd1b" translate="yes" xml:space="preserve">
          <source>When marking is finished, all objects still unmarked are garbage. No matter what the Lisp program or the user does, it is impossible to refer to them, since there is no longer a way to reach them. Their space might as well be reused, since no one will miss them. The second (sweep) phase of the garbage collector arranges to reuse them.</source>
          <target state="translated">마킹이 완료되면 표시되지 않은 모든 개체는 쓰레기입니다. Lisp 프로그램이나 사용자가 무엇을하든 그들에게 도달 할 방법이 더 이상 없기 때문에 그들을 참조하는 것은 불가능합니다. 아무도 놓칠 수 없기 때문에 공간을 재사용하는 것이 좋습니다. 가비지 수집기의 두 번째 (스윕) 단계에서는이를 다시 사용합니다.</target>
        </trans-unit>
        <trans-unit id="100be2e7228977cae18240a2a3d8c8d9124982d4" translate="yes" xml:space="preserve">
          <source>When matching a buffer, &amp;lsquo;</source>
          <target state="translated">버퍼와 일치 할 때 '</target>
        </trans-unit>
        <trans-unit id="3bae7d6a440557da3c24f776682bba86a8a7bfd3" translate="yes" xml:space="preserve">
          <source>When matching a string instead of a buffer, &amp;lsquo;</source>
          <target state="translated">버퍼 대신 문자열을 일치시킬 때 '</target>
        </trans-unit>
        <trans-unit id="5b36abe96eb4b6f19c26bd1ec5a147768f1c4a66" translate="yes" xml:space="preserve">
          <source>When modifying a variable (whose name will usually end with &lt;code&gt;-function&lt;/code&gt;), you can choose whether &lt;var&gt;function&lt;/var&gt; is used globally or only in the current buffer: if &lt;var&gt;place&lt;/var&gt; is just a symbol, then &lt;var&gt;function&lt;/var&gt; is added to the global value of &lt;var&gt;place&lt;/var&gt;. Whereas if &lt;var&gt;place&lt;/var&gt; is of the form &lt;code&gt;(local &lt;var&gt;symbol&lt;/var&gt;)&lt;/code&gt;, where &lt;var&gt;symbol&lt;/var&gt; is an expression which returns the variable name, then &lt;var&gt;function&lt;/var&gt; will only be added in the current buffer. Finally, if you want to modify a lexical variable, you will have to use &lt;code&gt;(var &lt;var&gt;variable&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">(이름이 일반적으로 종료됩니다 변수를 수정하는 경우 &lt;code&gt;-function&lt;/code&gt; ), 당신은 여부를 선택할 수 있습니다 &lt;var&gt;function&lt;/var&gt; 현재 버퍼에 전 세계적으로 또는에만 사용됩니다 경우 &lt;var&gt;place&lt;/var&gt; 단지 상징, 다음 &lt;var&gt;function&lt;/var&gt; 의 전역 값에 추가됩니다 &lt;var&gt;place&lt;/var&gt; . 반면 만약 &lt;var&gt;place&lt;/var&gt; 형태이다 &lt;code&gt;(local &lt;var&gt;symbol&lt;/var&gt;)&lt;/code&gt; , &lt;var&gt;symbol&lt;/var&gt; 변수 이름을 반환하는 식이고, 그 다음 &lt;var&gt;function&lt;/var&gt; 은 현재 버퍼에 추가된다. 마지막으로 어휘 변수를 수정하려면 &lt;code&gt;(var &lt;var&gt;variable&lt;/var&gt;)&lt;/code&gt; 을 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="a3a3f2a8a8a6dc07a8079628465edef16d500fc7" translate="yes" xml:space="preserve">
          <source>When more than one active keymap defines the same function key for the menu bar, the item appears just once. If the user clicks on that menu bar item, it brings up a single, combined menu containing all the subcommands of that item&amp;mdash;the global subcommands, the local subcommands, and the minor mode subcommands.</source>
          <target state="translated">둘 이상의 활성 키맵이 메뉴 모음에 대해 동일한 기능 키를 정의하면 항목이 한 번만 나타납니다. 사용자가 해당 메뉴 모음 항목을 클릭하면 해당 항목의 모든 하위 명령 (전역 하위 명령, 로컬 하위 명령 및 부 모드 하위 명령)이 포함 된 단일 결합 메뉴가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="69fd4885d44a5f3a4a20f7e032731c7f78263a05" translate="yes" xml:space="preserve">
          <source>When more than one minor mode keymap is active, the earlier one in &lt;code&gt;minor-mode-map-alist&lt;/code&gt; takes priority. But you should design minor modes so that they don&amp;rsquo;t interfere with each other. If you do this properly, the order will not matter.</source>
          <target state="translated">둘 이상의 부 모드 키맵이 활성화되면 부 모드 맵 &lt;code&gt;minor-mode-map-alist&lt;/code&gt; 의 이전 키맵이 우선합니다. 그러나 서로 간섭하지 않도록 보조 모드를 설계해야합니다. 이 작업을 올바르게 수행하면 순서가 중요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1a8050c7a27dcb66bca7ebd9d7f895d40aee87aa" translate="yes" xml:space="preserve">
          <source>When mouse events occur in special parts of a window, such as a mode line or a scroll bar, the event type shows nothing special&amp;mdash;it is the same symbol that would normally represent that combination of mouse button and modifier keys. The information about the window part is kept elsewhere in the event&amp;mdash;in the coordinates. But &lt;code&gt;read-key-sequence&lt;/code&gt; translates this information into imaginary prefix keys, all of which are symbols: &lt;code&gt;tab-line&lt;/code&gt;, &lt;code&gt;header-line&lt;/code&gt;, &lt;code&gt;horizontal-scroll-bar&lt;/code&gt;, &lt;code&gt;menu-bar&lt;/code&gt;, &lt;code&gt;tab-bar&lt;/code&gt;, &lt;code&gt;mode-line&lt;/code&gt;, &lt;code&gt;vertical-line&lt;/code&gt;, and &lt;code&gt;vertical-scroll-bar&lt;/code&gt;. You can define meanings for mouse clicks in special window parts by defining key sequences using these imaginary prefix keys.</source>
          <target state="translated">모드 라인이나 스크롤 막대와 같은 창의 특수 부분에서 마우스 이벤트가 발생하면 이벤트 유형은 특별한 것을 표시하지 않습니다. 일반적으로 마우스 버튼과 수정 자 키의 조합을 나타내는 동일한 기호입니다. 창 부분에 대한 정보는 이벤트의 다른 위치 (좌표)에 보관됩니다. 그러나 &lt;code&gt;read-key-sequence&lt;/code&gt; 는이 정보를 가상의 접두사 키로 변환합니다.이 키는 모두 &lt;code&gt;tab-line&lt;/code&gt; , &lt;code&gt;header-line&lt;/code&gt; , &lt;code&gt;horizontal-scroll-bar&lt;/code&gt; , &lt;code&gt;menu-bar&lt;/code&gt; , &lt;code&gt;tab-bar&lt;/code&gt; , &lt;code&gt;mode-line&lt;/code&gt; , &lt;code&gt;vertical-line&lt;/code&gt; , 및 &lt;code&gt;vertical-scroll-bar&lt;/code&gt; . 이러한 가상의 접두사 키를 사용하여 키 시퀀스를 정의하여 특수 창 부분에서 마우스 클릭의 의미를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c84b29b0559591bfde54d52963f64fa669d6447" translate="yes" xml:space="preserve">
          <source>When multiple overlays cover one character, an overlay with higher priority overrides those with lower priority. See &lt;a href=&quot;overlays#Overlays&quot;&gt;Overlays&lt;/a&gt;.</source>
          <target state="translated">여러 오버레이가 한 문자를 덮는 경우 우선 순위가 높은 오버레이가 우선 순위가 낮은 오버레이보다 우선합니다. &lt;a href=&quot;overlays#Overlays&quot;&gt;오버레이를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="25eb5c698117c37d3a9783e95ab97ef5ef9f5588" translate="yes" xml:space="preserve">
          <source>When non-&lt;code&gt;nil&lt;/code&gt;, mouse motion events are generated even for very small movements. Otherwise, motion events are not generated as long as the mouse cursor remains pointing to the same glyph in the text.</source>
          <target state="translated">&lt;code&gt;nil&lt;/code&gt; 이 아닌 경우 아주 작은 움직임에도 마우스 모션 이벤트가 생성됩니다. 그렇지 않으면 마우스 커서가 텍스트에서 동일한 글리프를 가리키고있는 한 모션 이벤트가 생성되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="047e53ac675fd24d28c78f6b730c89bfd8552535" translate="yes" xml:space="preserve">
          <source>When none of the simple types is appropriate, you can use composite types, which build new types from other types or from specified data. The specified types or data are called the &lt;em&gt;arguments&lt;/em&gt; of the composite type. The composite type normally looks like this:</source>
          <target state="translated">적절한 단순 유형이없는 경우 다른 유형 또는 지정된 데이터에서 새 유형을 빌드하는 복합 유형을 사용할 수 있습니다. 지정된 유형 또는 데이터를 복합 유형 의 &lt;em&gt;인수&lt;/em&gt; 라고합니다 . 복합 유형은 일반적으로 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="779d725ab8d9715d9f6601fd3bcd1e39eb8f6906" translate="yes" xml:space="preserve">
          <source>When one major mode command calls another, it should do so inside of &lt;code&gt;delay-mode-hooks&lt;/code&gt;.</source>
          <target state="translated">하나의 주요 모드 명령이 다른 명령을 호출하면 &lt;code&gt;delay-mode-hooks&lt;/code&gt; 내에서 수행해야합니다 .</target>
        </trans-unit>
        <trans-unit id="de0947bb744aee21a132ab3b19d62edc58d7711a" translate="yes" xml:space="preserve">
          <source>When opening a TLS connection, this should be where the first element is the TLS type (which should either be &lt;code&gt;gnutls-x509pki&lt;/code&gt; or &lt;code&gt;gnutls-anon&lt;/code&gt;, and the remaining elements should form a keyword list acceptable for &lt;code&gt;gnutls-boot&lt;/code&gt;. (This keyword list can be obtained from the &lt;code&gt;gnutls-boot-parameters&lt;/code&gt; function.) The TLS connection will then be negotiated after completing the connection to the host.</source>
          <target state="translated">TLS 연결을 열 때 첫 번째 요소가 TLS 유형 ( &lt;code&gt;gnutls-x509pki&lt;/code&gt; 또는 &lt;code&gt;gnutls-anon&lt;/code&gt; )이고 나머지 요소는 &lt;code&gt;gnutls-boot&lt;/code&gt; 에 허용되는 키워드 목록을 형성해야 합니다 (이 키워드 목록은 가능합니다. &lt;code&gt;gnutls-boot-parameters&lt;/code&gt; 함수 에서 얻을 수 있습니다 .) TLS 연결은 호스트에 대한 연결이 완료된 후 협상됩니다.</target>
        </trans-unit>
        <trans-unit id="53bf8b39424917bd24fe81e1c5d9a76120ed60ed" translate="yes" xml:space="preserve">
          <source>When performing &lt;code&gt;copy-keymap&lt;/code&gt;, any keymaps that appear directly as bindings in &lt;var&gt;keymap&lt;/var&gt; are also copied recursively, and so on to any number of levels. However, recursive copying does not take place when the definition of a character is a symbol whose function definition is a keymap; the same symbol appears in the new copy.</source>
          <target state="translated">&lt;code&gt;copy-keymap&lt;/code&gt; 을 수행 할 때 keymap 에서 바인딩으로 직접 나타나는 모든 &lt;var&gt;keymap&lt;/var&gt; 도 재귀 적으로 복사되는 방식으로 여러 수준으로 복사됩니다. 그러나 문자 정의가 기능 정의가 키맵 인 기호 인 경우 재귀 복사가 발생하지 않습니다. 새 사본에 동일한 기호가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="3a067675652faa97e22eb59de180ecad738e3406" translate="yes" xml:space="preserve">
          <source>When possible, this command actually works by calling the &lt;code&gt;sort&lt;/code&gt; utility program.</source>
          <target state="translated">가능하면이 명령은 실제로 &lt;code&gt;sort&lt;/code&gt; 유틸리티 프로그램 을 호출하여 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="22565d2a77541296c231ea9076bb0b93e0a926ea" translate="yes" xml:space="preserve">
          <source>When pre-allocating, you should make sure &lt;code&gt;(length &lt;var&gt;bindat-raw&lt;/var&gt;)&lt;/code&gt; meets or exceeds the total length to avoid an out-of-range error.</source>
          <target state="translated">사전 할당 시 범위를 벗어난 오류를 방지하려면 &lt;code&gt;(length &lt;var&gt;bindat-raw&lt;/var&gt;)&lt;/code&gt; 가 총 길이를 충족하거나 초과하는지 확인해야 합니다.</target>
        </trans-unit>
        <trans-unit id="0ee0a4c579b96173c4d92e82677349c6811a11d2" translate="yes" xml:space="preserve">
          <source>When present, a list of strings containing escape sequences that Emacs will output while configuring a tty for rendering. Emacs emits these strings only when configuring a terminal: if you want to enable a mode on a terminal that is already active (for example, while in &lt;code&gt;tty-setup-hook&lt;/code&gt;), explicitly output the necessary escape sequence using &lt;code&gt;send-string-to-terminal&lt;/code&gt; in addition to adding the sequence to &lt;code&gt;tty-mode-set-strings&lt;/code&gt;.</source>
          <target state="translated">존재하면, Emacs가 렌더링을 위해 tty를 구성하는 동안 출력 할 이스케이프 시퀀스를 포함하는 문자열 목록입니다. Emacs는 터미널을 구성 할 때만 이러한 문자열을 내 &lt;code&gt;send-string-to-terminal&lt;/code&gt; 이미 활성화 된 터미널에서 모드를 활성화하려면 (예 : &lt;code&gt;tty-setup-hook&lt;/code&gt; 에있는 동안 ) send-string-to-를 사용하여 필요한 이스케이프 시퀀스를 명시 적으로 출력합니다. &lt;code&gt;tty-mode-set-strings&lt;/code&gt; 에 시퀀스를 추가하는 것 외에도 터미널 .</target>
        </trans-unit>
        <trans-unit id="9a83e89087505c41136f9017d7224c99949728e0" translate="yes" xml:space="preserve">
          <source>When present, a list of strings that undo the effects of the strings in &lt;code&gt;tty-mode-set-strings&lt;/code&gt;. Emacs emits these strings when exiting, deleting a terminal, or suspending itself.</source>
          <target state="translated">존재하는 경우 &lt;code&gt;tty-mode-set-strings&lt;/code&gt; 의 문자열 효과를 취소하는 문자열 목록입니다 . Emacs는 종료, 터미널 삭제 또는 자체 일시 중지시 이러한 문자열을 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="08fd877eb8e87706105bac0db9a2794817e4b63a" translate="yes" xml:space="preserve">
          <source>When printing circular structures, this construct is used to represent where the structure loops back onto itself, and &amp;lsquo;</source>
          <target state="translated">원형 구조를 인쇄 할 때이 구조는 구조가 자체적으로 반복되는 위치를 나타내는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="da6bcd1fadc74242a658fbfe9f9ad9c68afd303f" translate="yes" xml:space="preserve">
          <source>When reading input results in such a &lt;em&gt;shift-translation&lt;/em&gt;, Emacs sets the variable &lt;code&gt;this-command-keys-shift-translated&lt;/code&gt; to a non-&lt;code&gt;nil&lt;/code&gt; value. Lisp programs can examine this variable if they need to modify their behavior when invoked by shift-translated keys. For example, the function &lt;code&gt;handle-shift-selection&lt;/code&gt; examines the value of this variable to determine how to activate or deactivate the region (see &lt;a href=&quot;the-mark#The-Mark&quot;&gt;handle-shift-selection&lt;/a&gt;).</source>
          <target state="translated">입력 결과를 읽을 때 이러한 &lt;em&gt;shift-translation이 발생&lt;/em&gt; 하면 Emacs는 &lt;code&gt;this-command-keys-shift-translated&lt;/code&gt; 변수를 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값으로 설정합니다. Lisp 프로그램은 시프트 변환 키에 의해 호출 될 때 동작을 수정해야하는 경우이 변수를 검사 할 수 있습니다. 예를 들어, &lt;code&gt;handle-shift-selection&lt;/code&gt; 함수 는이 변수의 값을 검사하여 영역을 활성화 또는 비활성화하는 방법을 결정합니다 ( &lt;a href=&quot;the-mark#The-Mark&quot;&gt;handle-shift-selection 참조&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="dd04cadc13a94e0780eae3bc26ccc9f254510535" translate="yes" xml:space="preserve">
          <source>When reading or writing from the standard input/output streams of the Emacs process in batch mode, it is sometimes required to make sure any arbitrary binary data will be read/written verbatim, and/or that no translation of newlines to or from CR-LF pairs is performed. This issue does not exist on POSIX hosts, only on MS-Windows and MS-DOS. The following function allows you to control the I/O mode of any standard stream of the Emacs process.</source>
          <target state="translated">배치 모드에서 Emacs 프로세스의 표준 입력 / 출력 스트림에서 읽거나 쓸 때, 임의의 바이너리 데이터가 그대로 읽히거나 쓰여지는지 확인하고 / 또는 CR-로 또는 CR-에서 줄 바꿈을 번역하지 않도록해야하는 경우가 있습니다. LF 쌍이 수행됩니다. 이 문제는 POSIX 호스트에는 존재하지 않으며 MS-Windows 및 MS-DOS에서만 발생합니다. 다음 기능을 사용하면 Emacs 프로세스의 모든 표준 스트림의 I / O 모드를 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b67d232f5124d34368688aba61e81bd9b263a2df" translate="yes" xml:space="preserve">
          <source>When representing a system value (such as a file size or a count of seconds since the Epoch), prefer the corresponding system type (e.g., &lt;code&gt;off_t&lt;/code&gt;, &lt;code&gt;time_t&lt;/code&gt;). Do not assume that a system type is signed, unless this assumption is known to be safe. For example, although &lt;code&gt;off_t&lt;/code&gt; is always signed, &lt;code&gt;time_t&lt;/code&gt; need not be.</source>
          <target state="translated">시스템 값 (예 : 파일 크기 또는 Epoch 이후 초 수)을 나타낼 때 해당 시스템 유형 (예 : &lt;code&gt;off_t&lt;/code&gt; , &lt;code&gt;time_t&lt;/code&gt; )을 선호합니다 . 이 가정이 안전한 것으로 알려진 경우가 아니면 시스템 유형이 서명되었다고 가정하지 마십시오. 예를 들어 &lt;code&gt;off_t&lt;/code&gt; 는 항상 서명되지만 &lt;code&gt;time_t&lt;/code&gt; 는 서명 될 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="ac40e3df18fc1975f34cddbac15e959e496bbd8c" translate="yes" xml:space="preserve">
          <source>When set the server will not automatically remove the notification when an action has been invoked. The notification will remain resident in the server until it is explicitly removed by the user or by the sender. This hint is likely only useful when the server has the &lt;code&gt;:persistence&lt;/code&gt; capability.</source>
          <target state="translated">설정시 서버는 작업이 호출 될 때 알림을 자동으로 제거하지 않습니다. 알림은 사용자 또는 보낸 사람이 명시 적으로 제거 할 때까지 서버에 남아 있습니다. 이 힌트는 서버에 &lt;code&gt;:persistence&lt;/code&gt; 기능 이있는 경우에만 유용 합니다.</target>
        </trans-unit>
        <trans-unit id="f9368dc6fce3c40353f1e2bb0df437fe8d76702b" translate="yes" xml:space="preserve">
          <source>When set the server will treat the notification as transient and by-pass the server&amp;rsquo;s persistence capability, if it should exist.</source>
          <target state="translated">설정되면 서버는 알림을 일시적으로 처리하고 서버의 지속성 기능이 있어야하는 경우이를 우회합니다.</target>
        </trans-unit>
        <trans-unit id="9e6e6c017b1e2de9bbba4574f219e054f0ed3f4f" translate="yes" xml:space="preserve">
          <source>When setting variables according to saved customizations, make sure to set the variables &lt;var&gt;variables&lt;/var&gt; before this one; i.e., delay setting this variable until after those others have been handled. Use &lt;code&gt;:set-after&lt;/code&gt; if setting this variable won&amp;rsquo;t work properly unless those other variables already have their intended values.</source>
          <target state="translated">저장된 사용자 정의에 따라 변수를 설정할 때이 &lt;var&gt;variables&lt;/var&gt; 보다 먼저 변수 변수 를 설정해야합니다 . 즉, 다른 변수가 처리 될 때까지이 변수 설정을 지연합니다. 다른 변수가 의도 한 값을 이미 가지고 있지 않으면이 변수를 설정해도 제대로 작동하지 않으면 &lt;code&gt;:set-after&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="cfff7ef3ea4fdcd00a65945cf2e104dc5743d452" translate="yes" xml:space="preserve">
          <source>When several characters with consecutive</source>
          <target state="translated">연속으로 여러 문자가있는 경우</target>
        </trans-unit>
        <trans-unit id="2d8b4838128ea072c0106a113248abb6b63cf660" translate="yes" xml:space="preserve">
          <source>When similar constants occur as parts of a program, the Lisp interpreter might save time or space by reusing existing constants or their components. For example, &lt;code&gt;(eq &quot;abc&quot; &quot;abc&quot;)&lt;/code&gt; returns &lt;code&gt;t&lt;/code&gt; if the interpreter creates only one instance of the string literal &lt;code&gt;&quot;abc&quot;&lt;/code&gt;, and returns &lt;code&gt;nil&lt;/code&gt; if it creates two instances. Lisp programs should be written so that they work regardless of whether this optimization is in use.</source>
          <target state="translated">유사한 상수가 프로그램의 일부로 발생하면 Lisp 인터프리터는 기존 상수 또는 해당 구성 요소를 재사용하여 시간이나 공간을 절약 할 수 있습니다. 예를 들어, &lt;code&gt;(eq &quot;abc&quot; &quot;abc&quot;)&lt;/code&gt; 는 인터프리터가 문자열 리터럴 &lt;code&gt;&quot;abc&quot;&lt;/code&gt; 의 인스턴스를 하나만 생성하면 &lt;code&gt;t&lt;/code&gt; 를 반환하고 두 개의 인스턴스를 생성하면 &lt;code&gt;nil&lt;/code&gt; 을 반환 합니다. Lisp 프로그램은이 최적화가 사용 중인지 여부에 관계없이 작동하도록 작성되어야합니다.</target>
        </trans-unit>
        <trans-unit id="3f26b87f1bbbefd1a6d0f776d0a92015f1677217" translate="yes" xml:space="preserve">
          <source>When some Lisp code called by a module function signals an error or throws, the nonlocal exit is trapped, and the pending exit and its associated data are stored in the environment. Whenever a nonlocal exit is pending in the environment, any module</source>
          <target state="translated">모듈 함수에 의해 호출 된 일부 Lisp 코드가 오류 신호를 보내거나 발생하면 비 로컬 종료가 트랩되고 보류중인 종료 및 관련 데이터가 환경에 저장됩니다. 비 로컬 엑시트가 환경에서 보류 중일 때마다 모든 모듈</target>
        </trans-unit>
        <trans-unit id="9db45b5609d26dfd7efc9feec92be1511642a357" translate="yes" xml:space="preserve">
          <source>When some portion of a buffer is hidden, the vertical movement commands operate as if that portion did not exist, allowing a single &lt;code&gt;next-line&lt;/code&gt; command to skip any number of hidden lines. However, character movement commands (such as &lt;code&gt;forward-char&lt;/code&gt;) do not skip the hidden portion, and it is possible (if tricky) to insert or delete text in a hidden portion.</source>
          <target state="translated">버퍼의 일부가 숨겨지면 수직 이동 명령은 해당 부분이 존재하지 않는 것처럼 작동하여 단일 &lt;code&gt;next-line&lt;/code&gt; 명령으로 은선을 여러 개 건너 뛸 수 있습니다. 그러나 문자 이동 명령 (예 : &lt;code&gt;forward-char&lt;/code&gt; )은 숨겨진 부분을 건너 뛰지 않으며 (까다로운 경우) 숨겨진 부분에 텍스트를 삽입하거나 삭제할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e574ca399de3ea69015e3e8671da1891747a608c" translate="yes" xml:space="preserve">
          <source>When specifying this attribute using &lt;code&gt;set-face-attribute&lt;/code&gt; or &lt;code&gt;set-face-font&lt;/code&gt; (see &lt;a href=&quot;attribute-functions#Attribute-Functions&quot;&gt;Attribute Functions&lt;/a&gt;), you may also supply a font spec, a font entity, or a string. Emacs converts such values to an appropriate font object, and stores that font object as the actual attribute value. If you specify a string, the contents of the string should be a font name (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Fonts.html#Fonts&quot;&gt;Fonts&lt;/a&gt; in</source>
          <target state="translated">&lt;code&gt;set-face-attribute&lt;/code&gt; 또는 &lt;code&gt;set-face-font&lt;/code&gt; 를 사용하여이 속성을 지정할 때 ( &lt;a href=&quot;attribute-functions#Attribute-Functions&quot;&gt;속성 함수&lt;/a&gt; 참조 ) 글꼴 사양, 글꼴 엔티티 또는 문자열을 제공 할 수도 있습니다. Emacs는 이러한 값을 적절한 글꼴 개체로 변환하고 해당 글꼴 개체를 실제 속성 값으로 저장합니다. 당신이 문자열을 지정하는 경우, 문자열의 내용이 글꼴 이름이어야합니다 ( &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Fonts.html#Fonts&quot;&gt;글꼴&lt;/a&gt; 에</target>
        </trans-unit>
        <trans-unit id="5a444b26a67841fbe919e47a78d4e883cd5c4b9d" translate="yes" xml:space="preserve">
          <source>When specifying this attribute using &lt;code&gt;set-face-attribute&lt;/code&gt; or &lt;code&gt;set-face-font&lt;/code&gt; (see &lt;a href=&quot;attribute-functions#Attribute-Functions&quot;&gt;Attribute Functions&lt;/a&gt;), you may also supply a font spec, a font entity, or a string. Emacs converts such values to an appropriate font object, and stores that font object as the actual attribute value. If you specify a string, the contents of the string should be a font name (see &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Fonts.html#Fonts&quot;&gt;Fonts&lt;/a&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b11ce5d6802b26c7f2b961ad907723f9d570ab2" translate="yes" xml:space="preserve">
          <source>When text that includes mixed right-to-left and left-to-right characters and bidirectional controls is copied into a different location, it can change its visual appearance, and also can affect the visual appearance of the surrounding text at destination. This is because reordering of bidirectional text specified by the</source>
          <target state="translated">오른쪽에서 왼쪽 및 왼쪽에서 오른쪽으로 혼합 된 문자와 양방향 컨트롤이 포함 된 텍스트를 다른 위치에 복사하면 시각적 모양이 변경 될 수 있으며 대상에서 주변 텍스트의 시각적 모양에도 영향을 미칠 수 있습니다. 이는에 의해 지정된 양방향 텍스트의 재정렬 때문입니다.</target>
        </trans-unit>
        <trans-unit id="15ed882fb69d01ac6fbd84eb0a9a01f6db124216" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;fac&lt;/code&gt; definition is instrumented and the function is called, the call to &lt;code&gt;edebug&lt;/code&gt; acts as a breakpoint. Depending on the execution mode, Edebug stops or pauses there.</source>
          <target state="translated">경우 &lt;code&gt;fac&lt;/code&gt; 정의가 계측되고, 함수가 호출 될 때, 호출 &lt;code&gt;edebug&lt;/code&gt; 가 중단 점으로 작용한다. 실행 모드에 따라 Edebug는 거기에서 중지하거나 일시 중지합니다.</target>
        </trans-unit>
        <trans-unit id="1139523c738a471ce6a2d8309dc3871f01ec27a0" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;read-key-sequence&lt;/code&gt; function reads a key sequence (see &lt;a href=&quot;key-sequence-input#Key-Sequence-Input&quot;&gt;Key Sequence Input&lt;/a&gt;), it uses &lt;em&gt;translation keymaps&lt;/em&gt; to translate certain event sequences into others. The translation keymaps are &lt;code&gt;input-decode-map&lt;/code&gt;, &lt;code&gt;local-function-key-map&lt;/code&gt;, and &lt;code&gt;key-translation-map&lt;/code&gt; (in order of priority).</source>
          <target state="translated">&lt;code&gt;read-key-sequence&lt;/code&gt; 함수가 키 시퀀스를 읽을 때 ( &lt;a href=&quot;key-sequence-input#Key-Sequence-Input&quot;&gt;키 시퀀스 입력&lt;/a&gt; 참조 ) &lt;em&gt;변환 키맵&lt;/em&gt; 을 사용 하여 특정 이벤트 시퀀스를 다른 시퀀스로 변환합니다. 번역 키맵은 &lt;code&gt;input-decode-map&lt;/code&gt; , &lt;code&gt;local-function-key-map&lt;/code&gt; , &lt;code&gt;key-translation-map&lt;/code&gt; (우선 순위 순)입니다.</target>
        </trans-unit>
        <trans-unit id="510adf48c83c6cb02951a4ea57e9191853fd42fb" translate="yes" xml:space="preserve">
          <source>When the Lisp reader encounters a symbol, it reads all the characters of the name. Then it hashes those characters to find an index in a table called an &lt;em&gt;obarray&lt;/em&gt;. Hashing is an efficient method of looking something up. For example, instead of searching a telephone book cover to cover when looking up Jan Jones, you start with the J&amp;rsquo;s and go from there. That is a simple version of hashing. Each element of the obarray is a &lt;em&gt;bucket&lt;/em&gt; which holds all the symbols with a given hash code; to look for a given name, it is sufficient to look through all the symbols in the bucket for that name&amp;rsquo;s hash code. (The same idea is used for general Emacs hash tables, but they are a different data type; see &lt;a href=&quot;hash-tables#Hash-Tables&quot;&gt;Hash Tables&lt;/a&gt;.)</source>
          <target state="translated">Lisp 리더가 기호를 만나면 이름의 모든 문자를 읽습니다. 그런 다음 해당 문자를 해시하여 &lt;em&gt;obarray&lt;/em&gt; 라는 테이블에서 인덱스를 찾습니다 . 해싱은 무언가를 찾는 효율적인 방법입니다. 예를 들어 Jan Jones를 찾을 때 커버 할 전화 번호부 표지를 검색하는 대신 J로 시작하여 거기에서 이동합니다. 이것은 간단한 해싱 버전입니다. obarray의 각 요소 는 주어진 해시 코드를 가진 모든 기호를 보유 하는 &lt;em&gt;버킷&lt;/em&gt; 입니다. 주어진 이름을 찾으려면 버킷에있는 모든 기호에서 해당 이름의 해시 코드를 살펴 보는 것으로 충분합니다. (일반적인 Emacs 해시 테이블에도 동일한 아이디어가 사용되지만 데이터 유형이 다릅니다 . &lt;a href=&quot;hash-tables#Hash-Tables&quot;&gt;해시 테이블을&lt;/a&gt; 참조하십시오 .)</target>
        </trans-unit>
        <trans-unit id="28edbb235f4190b9615e134862d5947f7521701a" translate="yes" xml:space="preserve">
          <source>When the argument to &lt;code&gt;upcase-initials&lt;/code&gt; is a character, &lt;code&gt;upcase-initials&lt;/code&gt; has the same result as &lt;code&gt;upcase&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;upcase-initials&lt;/code&gt; 에 대한 인수가 문자이면 &lt;code&gt;upcase-initials&lt;/code&gt; 는 &lt;code&gt;upcase&lt;/code&gt; 와 동일한 결과를 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="903eba992e3e61c401fd6817aaa779226f6240ea" translate="yes" xml:space="preserve">
          <source>When the binding is &lt;code&gt;nil&lt;/code&gt;, it doesn&amp;rsquo;t constitute a definition but it does take precedence over a default binding or a binding in the parent keymap. On the other hand, a binding of &lt;code&gt;nil&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; override lower-precedence keymaps; thus, if the local map gives a binding of &lt;code&gt;nil&lt;/code&gt;, Emacs uses the binding from the global map.</source>
          <target state="translated">바인딩이 &lt;code&gt;nil&lt;/code&gt; 이면 정의를 구성하지 않지만 기본 바인딩 또는 부모 키맵의 바인딩보다 우선합니다. 반면에 &lt;code&gt;nil&lt;/code&gt; 바인딩은 우선 순위가 낮은 키맵을 재정의 하지 &lt;em&gt;않습니다&lt;/em&gt; . 따라서 로컬 맵이 &lt;code&gt;nil&lt;/code&gt; 바인딩을 제공하면 Emacs는 글로벌 맵의 바인딩을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="20571cabec1ca29dcf057e55fc1b7097d15497a2" translate="yes" xml:space="preserve">
          <source>When the buffer has many overlay strings (e.g., see &lt;a href=&quot;overlay-properties#Overlay-Properties&quot;&gt;before-string&lt;/a&gt;) that conceal some of the buffer text or &lt;code&gt;display&lt;/code&gt; properties that are strings, it is a good idea to use the &lt;code&gt;cursor&lt;/code&gt; property on these strings to cue the Emacs display about the places where to put the cursor while traversing these strings. This directly communicates to the display engine where the Lisp program wants to put the cursor, or where the user would expect the cursor, when point is located on some buffer position that is &amp;ldquo;covered&amp;rdquo; by the display or overlay string.</source>
          <target state="translated">버퍼에 버퍼 텍스트의 일부를 숨기거나 문자열 인 &lt;code&gt;display&lt;/code&gt; 속성 을 숨기는 오버레이 문자열이 많이있는 경우 (예 : &lt;a href=&quot;overlay-properties#Overlay-Properties&quot;&gt;before-string&lt;/a&gt; 참조 ) , 이러한 문자열 의 &lt;code&gt;cursor&lt;/code&gt; 속성 을 사용 하여 Emacs 디스플레이에 장소를 표시 하는 것이 좋습니다. 이 문자열을 순회하는 동안 커서를 놓을 위치. 이것은 Lisp 프로그램이 커서를 놓으려고하는 디스플레이 엔진과 직접 통신하거나, 포인트가 디스플레이 또는 오버레이 문자열에 의해&amp;ldquo;덮인&amp;rdquo;버퍼 위치에있을 때 사용자가 커서를 예상 할 위치에 전달합니다.</target>
        </trans-unit>
        <trans-unit id="20eff5623e92ef1e3650b5301a263aee2445dae2" translate="yes" xml:space="preserve">
          <source>When the characters before and after &lt;var&gt;pos&lt;/var&gt; are part of the same field, there is no doubt which field contains &lt;var&gt;pos&lt;/var&gt;: the one those characters both belong to. When &lt;var&gt;pos&lt;/var&gt; is at a boundary between fields, which field it belongs to depends on the stickiness of the &lt;code&gt;field&lt;/code&gt; properties of the two surrounding characters (see &lt;a href=&quot;sticky-properties#Sticky-Properties&quot;&gt;Sticky Properties&lt;/a&gt;). The field whose property would be inherited by text inserted at &lt;var&gt;pos&lt;/var&gt; is the field that contains &lt;var&gt;pos&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;pos&lt;/var&gt; 앞뒤의 문자 가 같은 필드의 일부인 경우 &lt;var&gt;pos&lt;/var&gt; 를 포함하는 필드는 의심 할 여지가 없습니다 . 두 문자가 모두 속하는 필드 입니다. &lt;var&gt;pos&lt;/var&gt; 가 필드 사이의 경계에 있을 때 속하는 &lt;code&gt;field&lt;/code&gt; 는 두 주변 문자 의 필드 속성 &lt;a href=&quot;sticky-properties#Sticky-Properties&quot;&gt;고정&lt;/a&gt; 성에 따라 달라집니다 ( 고정 속성 참조 ). &lt;var&gt;pos&lt;/var&gt; 에 삽입 된 텍스트에 의해 속성이 상속되는 필드는 &lt;var&gt;pos&lt;/var&gt; 를 포함하는 필드입니다 .</target>
        </trans-unit>
        <trans-unit id="c85287eeb03ccaab5ae0349af6b14a141439609b" translate="yes" xml:space="preserve">
          <source>When the code is byte-compiled, &lt;var&gt;function-object&lt;/var&gt; is compiled into a byte-code function object (see &lt;a href=&quot;byte-compilation#Byte-Compilation&quot;&gt;Byte Compilation&lt;/a&gt;).</source>
          <target state="translated">코드가 바이트 컴파일 될 때 &lt;var&gt;function-object&lt;/var&gt; 는 바이트 코드 함수 객체로 컴파일됩니다 ( &lt;a href=&quot;byte-compilation#Byte-Compilation&quot;&gt;Byte Compilation&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="16eb5d5db50ce3f76fa52383db660c768327699a" translate="yes" xml:space="preserve">
          <source>When the command &lt;code&gt;completion-at-point&lt;/code&gt; runs, it calls the functions in the list one by one, without any argument. Each function should return &lt;code&gt;nil&lt;/code&gt; unless it can and wants to take responsibility for the completion data for the text at point. Otherwise it should return a list of the following form:</source>
          <target state="translated">명령 &lt;code&gt;completion-at-point&lt;/code&gt; 실행되면 인수없이 목록의 함수를 하나씩 호출합니다. 각 함수는 가능한 한 &lt;code&gt;nil&lt;/code&gt; 을 반환해야 하며 해당 시점의 텍스트에 대한 완료 데이터에 대한 책임을 져야합니다. 그렇지 않으면 다음 형식의 목록을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="cc9842d846c44bcb20fb609c0236af44d089fe37" translate="yes" xml:space="preserve">
          <source>When the data changes, you will want to update the text in the buffer. You can update all nodes by calling &lt;code&gt;ewoc-refresh&lt;/code&gt;, or just specific nodes using &lt;code&gt;ewoc-invalidate&lt;/code&gt;, or all nodes satisfying a predicate using &lt;code&gt;ewoc-map&lt;/code&gt;. Alternatively, you can delete invalid nodes using &lt;code&gt;ewoc-delete&lt;/code&gt; or &lt;code&gt;ewoc-filter&lt;/code&gt;, and add new nodes in their place. Deleting a node from an ewoc deletes its associated textual description from buffer, as well.</source>
          <target state="translated">데이터가 변경되면 버퍼의 텍스트를 업데이트해야합니다. &lt;code&gt;ewoc-refresh&lt;/code&gt; 를 호출하여 모든 노드를 업데이트 하거나 &lt;code&gt;ewoc-invalidate&lt;/code&gt; 를 사용하여 특정 노드 만 업데이트 하거나 &lt;code&gt;ewoc-map&lt;/code&gt; 을 사용하여 조건 자를 충족하는 모든 노드를 업데이트 할 수 있습니다 . 또는 &lt;code&gt;ewoc-delete&lt;/code&gt; 또는 &lt;code&gt;ewoc-filter&lt;/code&gt; 를 사용하여 유효하지 않은 노드를 삭제 하고 그 자리에 새 노드를 추가 할 수 있습니다 . ewoc에서 노드를 삭제하면 버퍼에서 관련 텍스트 설명도 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="6388524eb3dc02caf6125a1a89d5a5245a8a2c27" translate="yes" xml:space="preserve">
          <source>When the debugger has been entered, the &lt;code&gt;debug-on-error&lt;/code&gt; variable is temporarily set according to &lt;code&gt;eval-expression-debug-on-error&lt;/code&gt;. If the latter variable is non-&lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;debug-on-error&lt;/code&gt; will temporarily be set to &lt;code&gt;t&lt;/code&gt;. This means that any further errors that occur while doing a debugging session will (by default) trigger another backtrace. If this is not what you want, you can either set &lt;code&gt;eval-expression-debug-on-error&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;, or set &lt;code&gt;debug-on-error&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; in &lt;code&gt;debugger-mode-hook&lt;/code&gt;.</source>
          <target state="translated">디버거가 입력되면 &lt;code&gt;debug-on-error&lt;/code&gt; 변수가 &lt;code&gt;eval-expression-debug-on-error&lt;/code&gt; 에 따라 일시적으로 설정됩니다 . 후자 변수가 아닌 경우, &lt;code&gt;nil&lt;/code&gt; , &lt;code&gt;debug-on-error&lt;/code&gt; 일시적으로 설정 될 &lt;code&gt;t&lt;/code&gt; . 이는 디버깅 세션을 수행하는 동안 발생하는 추가 오류가 기본적으로 다른 역 추적을 트리거 함을 의미합니다. 이것이 원하는 것이 아니라면 &lt;code&gt;eval-expression-debug-on-error&lt;/code&gt; 를 &lt;code&gt;nil&lt;/code&gt; 로 설정하거나 &lt;code&gt;debug-on-error&lt;/code&gt; 를 &lt;code&gt;debugger-mode-hook&lt;/code&gt; 에서 &lt;code&gt;nil&lt;/code&gt; 로 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="116b487d24afef3c502923ab2671a73c01141758" translate="yes" xml:space="preserve">
          <source>When the debugger is entered, it displays the previously selected buffer in one window and a buffer named</source>
          <target state="translated">디버거를 입력하면 이전에 선택한 버퍼를 하나의 창에 표시하고</target>
        </trans-unit>
        <trans-unit id="1fc26a4083b90b099be3cf1a7e543139a468f085" translate="yes" xml:space="preserve">
          <source>When the developers of X labeled software distributors as &amp;ldquo;vendors&amp;rdquo;, they showed their false assumption that no system could ever be developed and distributed noncommercially.</source>
          <target state="translated">X의 개발자가 소프트웨어 배포자를 &quot;공급 업체&quot;라고 표시했을 때, 그들은 어떤 시스템도 비상업적으로 개발 및 배포 될 수 없다는 잘못된 가정을 보여주었습니다.</target>
        </trans-unit>
        <trans-unit id="868aa93cf62b554bd54442f30c7fbe16cecc3883" translate="yes" xml:space="preserve">
          <source>When the element-type is a &lt;code&gt;choice&lt;/code&gt;, you use &lt;code&gt;:inline&lt;/code&gt; not in the &lt;code&gt;choice&lt;/code&gt; itself, but in (some of) the alternatives of the &lt;code&gt;choice&lt;/code&gt;. For example, to match a list which must start with a file name, followed either by the symbol &lt;code&gt;t&lt;/code&gt; or two strings, use this customization type:</source>
          <target state="translated">element-type이 &lt;code&gt;choice&lt;/code&gt; 일 때 , &lt;code&gt;choice&lt;/code&gt; 자체가 아니라 선택 의 대안 (일부)에서 &lt;code&gt;:inline&lt;/code&gt; 을 사용 &lt;code&gt;choice&lt;/code&gt; . 예를 들어, 파일 이름으로 시작하고 뒤에 기호 &lt;code&gt;t&lt;/code&gt; 또는 두 개의 문자열이 와야하는 목록을 일치 시키려면 다음 사용자 정의 유형을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="50f85733da0cca31724a927061810bc233cc29b7" translate="yes" xml:space="preserve">
          <source>When the first argument is &lt;code&gt;error&lt;/code&gt;, the debugger indicates that it is being entered because an error or &lt;code&gt;quit&lt;/code&gt; was signaled and not handled, by displaying &amp;lsquo;</source>
          <target state="translated">첫 번째 인수가 &lt;code&gt;error&lt;/code&gt; 인 경우 디버거는 '를 표시 하여 오류 또는 &lt;code&gt;quit&lt;/code&gt; 신호가 표시되고 처리되지 않았기 때문에 입력 중임을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4aaff6bd65dbb250e1c7c10b992a01f561f55200" translate="yes" xml:space="preserve">
          <source>When the first argument is &lt;code&gt;exit&lt;/code&gt;, it indicates the exit of a stack frame previously marked to invoke the debugger on exit. The second argument given to &lt;code&gt;debug&lt;/code&gt; in this case is the value being returned from the frame. The debugger displays &amp;lsquo;</source>
          <target state="translated">첫 번째 인수가 &lt;code&gt;exit&lt;/code&gt; 인 경우 종료시 디버거를 호출하도록 이전에 표시된 스택 프레임의 종료를 나타냅니다. 이 경우 &lt;code&gt;debug&lt;/code&gt; 에 제공되는 두 번째 인수 는 프레임에서 반환되는 값입니다. 디버거에 '</target>
        </trans-unit>
        <trans-unit id="2d2b82d4695d852dec34c98cac550f0643b2cad0" translate="yes" xml:space="preserve">
          <source>When the first argument is &lt;code&gt;t&lt;/code&gt;, this indicates a call to &lt;code&gt;debug&lt;/code&gt; due to evaluation of a function call form when &lt;code&gt;debug-on-next-call&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;. The debugger displays &amp;lsquo;</source>
          <target state="translated">첫 번째 인수가 &lt;code&gt;t&lt;/code&gt; 이면 &lt;code&gt;debug-on-next-call&lt;/code&gt; 이 &lt;code&gt;nil&lt;/code&gt; 이 아닐 때 함수 호출 양식의 평가로 인해 &lt;code&gt;debug&lt;/code&gt; 호출을 나타냅니다 . 디버거에 '</target>
        </trans-unit>
        <trans-unit id="437fb785eaff0110643951108b4c2601385f2eda" translate="yes" xml:space="preserve">
          <source>When the function &lt;code&gt;set-visited-file-name&lt;/code&gt; is called interactively, it prompts for &lt;var&gt;filename&lt;/var&gt; in the minibuffer.</source>
          <target state="translated">&lt;code&gt;set-visited-file-name&lt;/code&gt; 함수를 대화식으로 호출 하면 미니 버퍼 에 &lt;var&gt;filename&lt;/var&gt; 을 입력 하라는 메시지가 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="88c8fa590b3fc15bf32a65bc9619b93076007948" translate="yes" xml:space="preserve">
          <source>When the key sequence consists of multiple events, key lookup processes the events sequentially: the binding of the first event is found, and must be a keymap; then the second event&amp;rsquo;s binding is found in that keymap, and so on until all the events in the key sequence are used up. (The binding thus found for the last event may or may not be a keymap.) Thus, the process of key lookup is defined in terms of a simpler process for looking up a single event in a keymap. How that is done depends on the type of object associated with the event in that keymap.</source>
          <target state="translated">키 시퀀스가 ​​여러 이벤트로 구성된 경우 키 조회는 이벤트를 순차적으로 처리합니다. 첫 번째 이벤트의 바인딩이 발견되고 키맵이어야합니다. 그런 다음 두 번째 이벤트의 바인딩이 해당 키맵에서 발견되며 키 시퀀스의 모든 이벤트가 모두 사용될 때까지 계속됩니다. (마지막 이벤트에 대해 발견 된 바인딩은 키맵 일 수도 있고 아닐 수도 있습니다.) 따라서 키 검색 프로세스는 키맵에서 단일 이벤트를 검색하는 더 간단한 프로세스의 관점에서 정의됩니다. 수행 방법은 해당 키맵의 이벤트와 관련된 객체 유형에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="c78aa7d01e0f3dda797421d0f1e715ec1fc8cab9" translate="yes" xml:space="preserve">
          <source>When the last buffer position scanned was the (potential) first character of a two character construct (comment delimiter or escaped/char-quoted character pair), the &lt;var&gt;syntax-code&lt;/var&gt; (see &lt;a href=&quot;syntax-table-internals#Syntax-Table-Internals&quot;&gt;Syntax Table Internals&lt;/a&gt;) of that position. Otherwise &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">스캔 된 마지막 버퍼 위치가 두 문자 구조 (주석 구분 기호 또는 이스케이프 / 문자 인용 문자 쌍)의 (잠재적) 첫 번째 문자 인 경우 해당 위치의 &lt;a href=&quot;syntax-table-internals#Syntax-Table-Internals&quot;&gt;구문 &lt;/a&gt; &lt;var&gt;syntax-code&lt;/var&gt; ( 구문 테이블 내부 참조 )입니다. 그렇지 않으면 &lt;code&gt;nil&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="825967648fe4b8b05ea065a8874cda93ed1c6b99" translate="yes" xml:space="preserve">
          <source>When the length of a field is not fixed, it typically depends on the value of a preceding field. In this case, the length &lt;var&gt;len&lt;/var&gt; can be given either as a list &lt;code&gt;(&lt;var&gt;name&lt;/var&gt; ...)&lt;/code&gt; identifying a &lt;em&gt;field name&lt;/em&gt; in the format specified for &lt;code&gt;bindat-get-field&lt;/code&gt; below, or by an expression &lt;code&gt;(eval &lt;var&gt;form&lt;/var&gt;)&lt;/code&gt; where &lt;var&gt;form&lt;/var&gt; should evaluate to an integer, specifying the field length.</source>
          <target state="translated">필드의 길이가 고정되지 않은 경우 일반적으로 이전 필드의 값에 따라 다릅니다. 이 경우 길이 &lt;var&gt;len&lt;/var&gt; 은 아래의 &lt;code&gt;bindat-get-field&lt;/code&gt; 에 지정된 형식으로 &lt;em&gt;필드 이름&lt;/em&gt; 을 식별 하는 목록 &lt;code&gt;(&lt;var&gt;name&lt;/var&gt; ...)&lt;/code&gt; 으로 제공 되거나 &lt;var&gt;form&lt;/var&gt; 이 다음으로 평가되어야 하는 표현식 &lt;code&gt;(eval &lt;var&gt;form&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;form&lt;/var&gt; ) 으로 제공 될 수 있습니다. 정수, 필드 길이를 지정합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9aa6539eef0b2917849bccf8335e069d4701fcaf" translate="yes" xml:space="preserve">
          <source>When the list reaches &lt;code&gt;kill-ring-max&lt;/code&gt; entries in length, adding a new entry automatically deletes the last entry.</source>
          <target state="translated">목록이 &lt;code&gt;kill-ring-max&lt;/code&gt; 항목 길이에 도달하면 새 항목을 추가하면 마지막 항목이 자동으로 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="0f7bf8623de177bc6d5806aaa805e68bb56585b7" translate="yes" xml:space="preserve">
          <source>When the minibuffer is active, it is the next window if the selected window is the one at the bottom right corner. In this case, &lt;code&gt;scroll-other-window&lt;/code&gt; attempts to scroll the minibuffer. If the minibuffer contains just one line, it has nowhere to scroll to, so the line reappears after the echo area momentarily displays the message &amp;lsquo;</source>
          <target state="translated">미니 버퍼가 활성화 된 상태에서 선택한 창이 오른쪽 하단에있는 창이 다음 창입니다. 이 경우 &lt;code&gt;scroll-other-window&lt;/code&gt; 는 미니 버퍼 스크롤을 시도합니다. 미니 버퍼에 한 줄만 포함되어 있으면 스크롤 할 곳이 없으므로 에코 영역에 잠시 ''메시지가 표시된 후 줄이 다시 나타납니다.</target>
        </trans-unit>
        <trans-unit id="b511155a847eb0dd269cb9b74a381ee567232762" translate="yes" xml:space="preserve">
          <source>When the minor mode &lt;code&gt;cursor-intangible-mode&lt;/code&gt; is turned on, point is moved away from any position that has a non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;cursor-intangible&lt;/code&gt; property, just before redisplay happens.</source>
          <target state="translated">부 모드 &lt;code&gt;cursor-intangible-mode&lt;/code&gt; 가 켜지면 다시 표시되기 직전에 &lt;code&gt;nil&lt;/code&gt; 이 아닌 &lt;code&gt;cursor-intangible&lt;/code&gt; 속성 이있는 위치에서 포인트가 멀어 집니다.</target>
        </trans-unit>
        <trans-unit id="e67379465709e25367fcee329d3d8b8588cea3df" translate="yes" xml:space="preserve">
          <source>When the mode line refers to a variable which does not have a non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;risky-local-variable&lt;/code&gt; property, any text properties given or specified within that variable&amp;rsquo;s values are ignored. This is because such properties could otherwise specify functions to be called, and those functions could come from file local variables.</source>
          <target state="translated">모드 행이 &lt;code&gt;nil&lt;/code&gt; 이 아닌 &lt;code&gt;risky-local-variable&lt;/code&gt; 속성 이없는 변수를 참조 할 때 해당 변수의 값 내에 지정되거나 지정된 모든 텍스트 속성은 무시됩니다. 이는 이러한 속성이 호출 할 함수를 지정할 수 있고 해당 함수는 파일 로컬 변수에서 가져올 수 있기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="867868a0f1c45320b706ebd1ebe235b75366cb8a" translate="yes" xml:space="preserve">
          <source>When the mouse pointer lies on a hot-spot area of an image, the &lt;var&gt;plist&lt;/var&gt; of that hot-spot is consulted; if it contains a &lt;code&gt;help-echo&lt;/code&gt; property, that defines a tool-tip for the hot-spot, and if it contains a &lt;code&gt;pointer&lt;/code&gt; property, that defines the shape of the mouse cursor when it is on the hot-spot. See &lt;a href=&quot;pointer-shape#Pointer-Shape&quot;&gt;Pointer Shape&lt;/a&gt;, for available pointer shapes.</source>
          <target state="translated">마우스 포인터가 이미지의 핫스팟 영역에있을 때 해당 핫스팟의 &lt;var&gt;plist&lt;/var&gt; 가 참조됩니다. 핫스팟에 대한 툴팁을 정의 하는 &lt;code&gt;help-echo&lt;/code&gt; 속성을 포함하는 경우 , 마우스 커서가 핫스팟에있을 때의 모양을 정의 하는 &lt;code&gt;pointer&lt;/code&gt; 속성을 포함하는 경우 . 사용 가능한 포인터 모양 은 &lt;a href=&quot;pointer-shape#Pointer-Shape&quot;&gt;포인터 모양을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="72113dbbbb848882544104dd72c42be0c0e260c9" translate="yes" xml:space="preserve">
          <source>When the name of the terminal type contains a hyphen or underscore, and no library is found whose name is identical to the terminal&amp;rsquo;s name, Emacs strips from the terminal&amp;rsquo;s name the last hyphen or underscore and everything that follows it, and tries again. This process is repeated until Emacs finds a matching library, or until there are no more hyphens or underscores in the name (i.e., there is no terminal-specific library). For example, if the terminal name is &amp;lsquo;</source>
          <target state="translated">터미널 유형의 이름에 하이픈 또는 밑줄이 포함되어 있고 이름이 터미널 이름과 동일한 라이브러리가없는 경우 Emacs는 터미널 이름에서 마지막 하이픈 또는 밑줄과 그 뒤에 오는 모든 항목을 제거하고 다시 시도합니다. 이 프로세스는 Emacs가 일치하는 라이브러리를 찾을 때까지 또는 이름에 더 이상 하이픈이나 밑줄이 없을 때까지 반복됩니다 (즉, 터미널 별 라이브러리가 없음). 예를 들어, 터미널 이름이 '</target>
        </trans-unit>
        <trans-unit id="08f7c1705d495e69780bc2bcc50f97a26e1059c3" translate="yes" xml:space="preserve">
          <source>When the optional argument &lt;var&gt;no-properties&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, this function strips text properties from the return value.</source>
          <target state="translated">선택적 인수 &lt;var&gt;no-properties&lt;/var&gt; 가 &lt;code&gt;nil&lt;/code&gt; 이 아닌 경우이 함수는 반환 값에서 텍스트 속성을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="1b74a1907b8b052e24ae5b68dcf685e26d16cb4b" translate="yes" xml:space="preserve">
          <source>When the paragraph already has two lines, the function next looks for a prefix candidate on the second line, in just the same way it did for the first line. If it doesn&amp;rsquo;t find one, it returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">단락에 이미 두 줄이있는 경우 함수는 다음으로 첫 번째 줄에서와 동일한 방식으로 두 번째 줄에서 접두사 후보를 찾습니다. 찾을 수 없으면 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="0f154952d92c35cb0658c37cf9dfc68160ea96f4" translate="yes" xml:space="preserve">
          <source>When the selected window is a member of a group of windows, this function returns a list of the windows in the group, ordered such that the first window in the list is displaying the earliest part of the buffer, and so on. Otherwise the function returns a list containing just the selected window.</source>
          <target state="translated">선택한 창이 창 그룹의 구성원 인 경우이 함수는 목록의 첫 번째 창이 버퍼의 가장 빠른 부분을 표시하도록 정렬 된 그룹의 창 목록을 반환합니다. 그렇지 않으면 함수는 선택한 창만 포함하는 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7c1a91e1facfa16f4d1f57d01bd761ee745cfffc" translate="yes" xml:space="preserve">
          <source>When the selected window is the minibuffer, the next window is normally the leftmost one immediately above it. You can specify a different window to scroll, when the minibuffer is selected, by setting the variable &lt;code&gt;minibuffer-scroll-window&lt;/code&gt;. This variable has no effect when any other window is selected. When it is non-&lt;code&gt;nil&lt;/code&gt; and the minibuffer is selected, it takes precedence over &lt;code&gt;other-window-scroll-buffer&lt;/code&gt;. See &lt;a href=&quot;minibuffer-misc#Definition-of-minibuffer_002dscroll_002dwindow&quot;&gt;Definition of minibuffer-scroll-window&lt;/a&gt;.</source>
          <target state="translated">선택한 창이 미니 버퍼 인 경우 다음 창은 일반적으로 바로 위에있는 가장 왼쪽 창입니다. &lt;code&gt;minibuffer-scroll-window&lt;/code&gt; 변수를 설정하여 미니 버퍼를 선택한 경우 스크롤 할 다른 창을 지정할 수 있습니다 . 이 변수는 다른 창을 선택하면 효과가 없습니다. 이 아닌 경우 &lt;code&gt;nil&lt;/code&gt; 및 미니 버퍼가 선택되면, 그것보다 우선 &lt;code&gt;other-window-scroll-buffer&lt;/code&gt; . &lt;a href=&quot;minibuffer-misc#Definition-of-minibuffer_002dscroll_002dwindow&quot;&gt;minibuffer-scroll-window 정의를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="65b73cca993f2fe1cb5f748b78ef4aa722107d7b" translate="yes" xml:space="preserve">
          <source>When the session manager restarts a suspended session, it directs these applications to individually reload their saved state. It does this by specifying a special command-line argument that says what saved session to restore. For Emacs, this argument is &amp;lsquo;</source>
          <target state="translated">세션 관리자가 일시 중단 된 세션을 다시 시작하면 이러한 응용 프로그램이 저장된 상태를 개별적으로 다시로드하도록 지시합니다. 복원 할 저장된 세션을 나타내는 특수 명령 줄 인수를 지정하여이를 수행합니다. Emacs의 경우이 인수는 '</target>
        </trans-unit>
        <trans-unit id="4e0bfac048c5fbdf0664b55932d085da1a85dae9" translate="yes" xml:space="preserve">
          <source>When the strings have different lengths, and they match up to the length of &lt;var&gt;string1&lt;/var&gt;, then the result is &lt;code&gt;t&lt;/code&gt;. If they match up to the length of &lt;var&gt;string2&lt;/var&gt;, the result is &lt;code&gt;nil&lt;/code&gt;. A string of no characters is less than any other string.</source>
          <target state="translated">문자열의 길이가 다르고 &lt;var&gt;string1&lt;/var&gt; 길이까지 일치 하면 결과는 &lt;code&gt;t&lt;/code&gt; 입니다. &lt;var&gt;string2&lt;/var&gt; 길이까지 일치 하면 결과는 &lt;code&gt;nil&lt;/code&gt; 입니다. 문자가없는 문자열은 다른 문자열보다 작습니다.</target>
        </trans-unit>
        <trans-unit id="af0300acfd03cbaa9a0a6bf99f2ac8060ee62768" translate="yes" xml:space="preserve">
          <source>When the syntax table is not flexible enough to specify the syntax of a language, you can override the syntax table for specific character occurrences in the buffer, by applying a &lt;code&gt;syntax-table&lt;/code&gt; text property. See &lt;a href=&quot;text-properties#Text-Properties&quot;&gt;Text Properties&lt;/a&gt;, for how to apply text properties.</source>
          <target state="translated">구문 테이블이 언어 구문을 지정할만큼 유연하지 않은 경우 &lt;code&gt;syntax-table&lt;/code&gt; 텍스트 속성 을 적용하여 버퍼에서 특정 문자 발생에 대한 구문 테이블을 재정의 할 수 있습니다 . &lt;a href=&quot;text-properties#Text-Properties&quot;&gt;텍스트 속성&lt;/a&gt; 을 적용하는 방법 은 텍스트 속성을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1db00d52e9bbcfea5035cd408802b3a0306b3dfc" translate="yes" xml:space="preserve">
          <source>When the user calls a completion command like &lt;code&gt;minibuffer-complete&lt;/code&gt; (see &lt;a href=&quot;completion-commands#Completion-Commands&quot;&gt;Completion Commands&lt;/a&gt;), Emacs looks for the first style listed in &lt;code&gt;completion-styles&lt;/code&gt; and calls its &lt;var&gt;try-completion&lt;/var&gt; function. If this function returns &lt;code&gt;nil&lt;/code&gt;, Emacs moves to the next listed completion style and calls its &lt;var&gt;try-completion&lt;/var&gt; function, and so on until one of the &lt;var&gt;try-completion&lt;/var&gt; functions successfully performs completion and returns a non-&lt;code&gt;nil&lt;/code&gt; value. A similar procedure is used for listing completions, via the &lt;var&gt;all-completions&lt;/var&gt; functions.</source>
          <target state="translated">사용자가 &lt;code&gt;minibuffer-complete&lt;/code&gt; ( &lt;a href=&quot;completion-commands#Completion-Commands&quot;&gt;Completion Commands&lt;/a&gt; 참조) 와 같은 완료 명령을 호출하면 Emacs는 &lt;code&gt;completion-styles&lt;/code&gt; 스타일에 나열된 첫 번째 스타일을 찾고 &lt;var&gt;try-completion&lt;/var&gt; 함수를 호출 합니다. 이 함수가 &lt;code&gt;nil&lt;/code&gt; 을 반환 하면 Emacs는 다음으로 나열된 완료 스타일로 이동하고 &lt;var&gt;try-completion&lt;/var&gt; 함수 중 하나가 성공적으로 완료를 수행하고 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값을 반환 할 때까지 &lt;var&gt;try-completion&lt;/var&gt; 함수를 호출 합니다. &lt;var&gt;all-completions&lt;/var&gt; 기능을 통해 완료를 나열하는 데 유사한 절차가 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="14f683f2a85a22a1e45fced6299295b17164ca51" translate="yes" xml:space="preserve">
          <source>When the user has found the desired alternative from the menu, he or she should type the corresponding character&amp;mdash;the one whose binding is that alternative.</source>
          <target state="translated">사용자가 메뉴에서 원하는 대체 문자를 찾으면 해당 문자 (바인딩이 대체 문자 인 문자)를 입력해야합니다.</target>
        </trans-unit>
        <trans-unit id="9317c688985f82ebf84721bb442636b2f8139dd1" translate="yes" xml:space="preserve">
          <source>When the user is expected to enter input in the process buffer for transmission to the process, the process marker separates the new input from previous output.</source>
          <target state="translated">사용자가 프로세스로의 전송을 위해 프로세스 버퍼에 입력을 입력 할 것으로 예상되면 프로세스 마커는 새 입력을 이전 출력과 분리합니다.</target>
        </trans-unit>
        <trans-unit id="ac010bcd028637555de6cf7eabeafb1cd4753b5c" translate="yes" xml:space="preserve">
          <source>When the user performs a double click, Emacs generates first an ordinary click event, and then a double-click event. Therefore, you must design the command binding of the double click event to assume that the single-click command has already run. It must produce the desired results of a double click, starting from the results of a single click.</source>
          <target state="translated">사용자가 더블 클릭을 수행하면 Emacs는 먼저 일반 클릭 이벤트를 생성 한 다음 더블 클릭 이벤트를 생성합니다. 따라서 단일 클릭 명령이 이미 실행되었다고 가정하도록 두 번 클릭 이벤트의 명령 바인딩을 디자인해야합니다. 단일 클릭의 결과에서 시작하여 원하는 더블 클릭 결과를 생성해야합니다.</target>
        </trans-unit>
        <trans-unit id="42c946654a87e7d3b90db47be73a1375093f4282" translate="yes" xml:space="preserve">
          <source>When the user presses a mouse button and releases it at the same location, that generates a &lt;em&gt;click&lt;/em&gt; event. All mouse click event share the same format:</source>
          <target state="translated">사용자가 마우스 버튼을 눌렀다가 같은 위치에서 놓으면 &lt;em&gt;클릭&lt;/em&gt; 이벤트 가 생성됩니다 . 모든 마우스 클릭 이벤트는 동일한 형식을 공유합니다.</target>
        </trans-unit>
        <trans-unit id="faec751060a4a3168faff64c732fb50f43804cfd" translate="yes" xml:space="preserve">
          <source>When the user responds with &lt;var&gt;char&lt;/var&gt;, &lt;code&gt;map-y-or-n-p&lt;/code&gt; calls &lt;var&gt;function&lt;/var&gt;. If it returns non-&lt;code&gt;nil&lt;/code&gt;, the object is considered acted upon, and &lt;code&gt;map-y-or-n-p&lt;/code&gt; advances to the next object in &lt;var&gt;list&lt;/var&gt;. If it returns &lt;code&gt;nil&lt;/code&gt;, the prompt is repeated for the same object.</source>
          <target state="translated">때와 사용자 응답 &lt;var&gt;char&lt;/var&gt; , &lt;code&gt;map-y-or-n-p&lt;/code&gt; 통화 &lt;var&gt;function&lt;/var&gt; . non- &lt;code&gt;nil&lt;/code&gt; 을 반환 하면 객체가 실행 된 것으로 간주되고 &lt;code&gt;map-y-or-n-p&lt;/code&gt; 는 &lt;var&gt;list&lt;/var&gt; 의 다음 객체로 이동 합니다 . &lt;code&gt;nil&lt;/code&gt; 을 반환 하면 동일한 객체에 대해 프롬프트가 반복됩니다.</target>
        </trans-unit>
        <trans-unit id="741ae86db3b85a667d27d7e6c6aae8b804c436b2" translate="yes" xml:space="preserve">
          <source>When the user supplies input, Emacs becomes non-idle while executing the input. Then it becomes idle again, and all the idle timers that are set up to repeat will subsequently run another time, one by one.</source>
          <target state="translated">사용자가 입력을 제공하면 Emacs는 입력을 실행하는 동안 유휴 상태가 아닙니다. 그런 다음 다시 유휴 상태가되고 반복하도록 설정된 모든 유휴 타이머는 이후에 하나씩 하나씩 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="89716f5cb5eeb5b8c85a3590d36ec0859f4a7c29" translate="yes" xml:space="preserve">
          <source>When the user types a command to exit the minibuffer, &lt;code&gt;read-from-minibuffer&lt;/code&gt; constructs the return value from the text in the minibuffer. Normally it returns a string containing that text. However, if &lt;var&gt;read&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;read-from-minibuffer&lt;/code&gt; reads the text and returns the resulting Lisp object, unevaluated. (See &lt;a href=&quot;input-functions#Input-Functions&quot;&gt;Input Functions&lt;/a&gt;, for information about reading.)</source>
          <target state="translated">사용자가 미니 버퍼를 종료하는 명령을 입력하면 미니 버퍼에서 &lt;code&gt;read-from-minibuffer&lt;/code&gt; 는 미니 버퍼 의 텍스트에서 반환 값을 구성합니다. 일반적으로 해당 텍스트를 포함하는 문자열을 반환합니다. 그러나 &lt;var&gt;read&lt;/var&gt; 가 &lt;code&gt;nil&lt;/code&gt; 이 아닌 경우 , &lt;code&gt;read-from-minibuffer&lt;/code&gt; 는 텍스트를 읽고 평가되지 않은 결과 Lisp 객체를 반환합니다. ( 읽기에 대한 정보는 &lt;a href=&quot;input-functions#Input-Functions&quot;&gt;입력 함수&lt;/a&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="97f45c4ec31296ee422fe0b971089f7631eaa365" translate="yes" xml:space="preserve">
          <source>When the variable &lt;code&gt;cursor-sensor-inhibit&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, the &lt;code&gt;cursor-intangible&lt;/code&gt; property and the &lt;code&gt;cursor-sensor-functions&lt;/code&gt; property (described below) are ignored.</source>
          <target state="translated">&lt;code&gt;cursor-sensor-inhibit&lt;/code&gt; 변수 가 &lt;code&gt;nil&lt;/code&gt; 이 아닌 경우 &lt;code&gt;cursor-intangible&lt;/code&gt; 속성 및 &lt;code&gt;cursor-sensor-functions&lt;/code&gt; 속성 (아래 설명)은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="2dde0528a1289ac3a5932cd0bf44f453463d97b7" translate="yes" xml:space="preserve">
          <source>When the variable &lt;code&gt;cursor-sensor-inhibit&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, the &lt;code&gt;cursor-sensor-functions&lt;/code&gt; property is ignored.</source>
          <target state="translated">&lt;code&gt;cursor-sensor-inhibit&lt;/code&gt; 변수 가 &lt;code&gt;nil&lt;/code&gt; 이 아닌 경우 &lt;code&gt;cursor-sensor-functions&lt;/code&gt; 속성은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="6144c35a4d6dfbb14e5c9c91910a7a2deb2b5670" translate="yes" xml:space="preserve">
          <source>When the variable &lt;code&gt;inhibit-point-motion-hooks&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt; (as it is by default), the &lt;code&gt;intangible&lt;/code&gt; property is ignored.</source>
          <target state="translated">&lt;code&gt;inhibit-point-motion-hooks&lt;/code&gt; 변수 가 &lt;code&gt;nil&lt;/code&gt; 이 아닌 경우 (기본값) &lt;code&gt;intangible&lt;/code&gt; 속성은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="ba305369b4288ce358505822a5c384bb32983af6" translate="yes" xml:space="preserve">
          <source>When these functions are called, &lt;code&gt;inhibit-modification-hooks&lt;/code&gt; is bound to non-&lt;code&gt;nil&lt;/code&gt;. If the functions modify the buffer, you might want to bind &lt;code&gt;inhibit-modification-hooks&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;, so as to cause the change hooks to run for these modifications. However, doing this may call your own change hook recursively, so be sure to prepare for that.</source>
          <target state="translated">이러한 함수가 호출되면 &lt;code&gt;inhibit-modification-hooks&lt;/code&gt; 가 비 &lt;code&gt;nil&lt;/code&gt; 에 바인딩됩니다 . 함수가 버퍼를 수정하는 경우, 이러한 수정을 위해 변경 후크가 실행되도록 &lt;code&gt;inhibit-modification-hooks&lt;/code&gt; 를 &lt;code&gt;nil&lt;/code&gt; 에 바인딩 할 수 있습니다 . 그러나 이렇게하면 자체 변경 후크가 재귀 적으로 호출 될 수 있으므로 준비해야합니다.</target>
        </trans-unit>
        <trans-unit id="db50335fab79153d655d1d69d82d0d93bfc61107" translate="yes" xml:space="preserve">
          <source>When these functions are called, &lt;code&gt;inhibit-modification-hooks&lt;/code&gt; is bound to non-&lt;code&gt;nil&lt;/code&gt;. If the functions modify the buffer, you might want to bind &lt;code&gt;inhibit-modification-hooks&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;, so as to cause the change hooks to run for these modifications. However, doing this may call your own change hook recursively, so be sure to prepare for that. See &lt;a href=&quot;change-hooks#Change-Hooks&quot;&gt;Change Hooks&lt;/a&gt;.</source>
          <target state="translated">이러한 함수가 호출되면 &lt;code&gt;inhibit-modification-hooks&lt;/code&gt; 가 비 &lt;code&gt;nil&lt;/code&gt; 에 바인딩됩니다 . 함수가 버퍼를 수정하는 경우, 이러한 수정을 위해 변경 후크가 실행되도록 &lt;code&gt;inhibit-modification-hooks&lt;/code&gt; 를 &lt;code&gt;nil&lt;/code&gt; 에 바인딩 할 수 있습니다 . 그러나 이렇게하면 자체 변경 후크가 재귀 적으로 호출 될 수 있으므로 준비해야합니다. &lt;a href=&quot;change-hooks#Change-Hooks&quot;&gt;후크 변경을&lt;/a&gt; 참고 하십시오 .</target>
        </trans-unit>
        <trans-unit id="6b15446f7a271c0367154a83a6d06ed034256569" translate="yes" xml:space="preserve">
          <source>When this command is called interactively, it prompts for &lt;var&gt;filename&lt;/var&gt;.</source>
          <target state="translated">이 명령을 대화식으로 호출하면 &lt;var&gt;filename&lt;/var&gt; 을 입력 하라는 메시지가 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="fed0c479d83fce5cc1e10bf3f041d1165c0811c5" translate="yes" xml:space="preserve">
          <source>When this function is called during the execution of a &lt;code&gt;delay-mode-hooks&lt;/code&gt; form, it does not run the hooks or &lt;code&gt;hack-local-variables&lt;/code&gt; or evaluate the forms immediately. Instead, it arranges for the next call to &lt;code&gt;run-mode-hooks&lt;/code&gt; to run them.</source>
          <target state="translated">&lt;code&gt;delay-mode-hooks&lt;/code&gt; 양식을 실행하는 동안이 함수가 호출 되면 후크 또는 &lt;code&gt;hack-local-variables&lt;/code&gt; 를 실행 하거나 양식을 즉시 평가 하지 않습니다 . 대신 &lt;code&gt;run-mode-hooks&lt;/code&gt; 에 대한 다음 호출이 실행되도록 정렬 합니다.</target>
        </trans-unit>
        <trans-unit id="cba05056187d43b5da8624443810218851db7488" translate="yes" xml:space="preserve">
          <source>When this function is called interactively, &lt;var&gt;position&lt;/var&gt; is the numeric prefix argument, if provided; otherwise it is read from the minibuffer.</source>
          <target state="translated">이 함수가 대화식으로 호출 될 때 &lt;var&gt;position&lt;/var&gt; 은 제공된 경우 숫자 접두사 인수입니다. 그렇지 않으면 미니 버퍼에서 읽습니다.</target>
        </trans-unit>
        <trans-unit id="596b547820cdaa6f0bcdaac5093b2c88521ba9b0" translate="yes" xml:space="preserve">
          <source>When this is &lt;code&gt;bidi&lt;/code&gt;, the drawing order is reversed if and only if the value of &lt;code&gt;bidi-paragraph-direction&lt;/code&gt; (see &lt;a href=&quot;bidirectional-display#Bidirectional-Display&quot;&gt;Bidirectional Display&lt;/a&gt;) is &lt;code&gt;right-to-left&lt;/code&gt; in the buffer displayed in the window most recently selected within the main window area of this frame. Sometimes that window may be hard to find, so heuristics are used to avoid that the drawing order changes inadvertently when another window gets selected.</source>
          <target state="translated">이것이 &lt;code&gt;bidi&lt;/code&gt; 인 경우, &lt;code&gt;bidi-paragraph-direction&lt;/code&gt; ( &lt;a href=&quot;bidirectional-display#Bidirectional-Display&quot;&gt;양방향 표시&lt;/a&gt; 참조 ) 의 값이이 기본 창 영역 내에서 가장 최근에 선택된 창에 표시된 버퍼에서 &lt;code&gt;right-to-left&lt;/code&gt; 에서 왼쪽 인 경우에만 그리기 순서가 반전 됩니다. 틀. 때로는 해당 창을 찾기가 어려울 수 있으므로 다른 창이 선택 될 때 그리기 순서가 실수로 변경되는 것을 방지하기 위해 휴리스틱 스가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3dad205ad2aecabde94354eb00231e56ad99a1c5" translate="yes" xml:space="preserve">
          <source>When this is called with &lt;code&gt;(inc x)&lt;/code&gt;, the argument &lt;var&gt;var&lt;/var&gt; is the symbol &lt;code&gt;x&lt;/code&gt;&amp;mdash;&lt;em&gt;not&lt;/em&gt; the &lt;em&gt;value&lt;/em&gt; of &lt;code&gt;x&lt;/code&gt;, as it would be in a function. The body of the macro uses this to construct the expansion, which is &lt;code&gt;(setq x (1+ x))&lt;/code&gt;. Once the macro definition returns this expansion, Lisp proceeds to evaluate it, thus incrementing &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">이것이 &lt;code&gt;(inc x)&lt;/code&gt; 와 함께 호출 될 때 , 인자 &lt;var&gt;var&lt;/var&gt; 는 기호 &lt;code&gt;x&lt;/code&gt; &amp;mdash; 함수에서와 같이 &lt;code&gt;x&lt;/code&gt; 의 &lt;em&gt;값&lt;/em&gt; 이 &lt;em&gt;아닙니다&lt;/em&gt; . 매크로의 본문은 이것을 사용하여 확장을 구성합니다. 즉, &lt;code&gt;(setq x (1+ x))&lt;/code&gt; 입니다. 매크로 정의가이 확장을 반환하면 Lisp는 계속 평가하여 &lt;code&gt;x&lt;/code&gt; 를 증가시킵니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="70ec9983d5d4c52908190215a3df6033c89819ff" translate="yes" xml:space="preserve">
          <source>When this is non-&lt;code&gt;nil&lt;/code&gt;, Emacs displays a special glyph in the fringe of each empty line at the end of the buffer, on graphical displays. See &lt;a href=&quot;fringes#Fringes&quot;&gt;Fringes&lt;/a&gt;. This variable is automatically buffer-local in every buffer.</source>
          <target state="translated">이것이 &lt;code&gt;nil&lt;/code&gt; 이 아닌 경우 , Emacs는 그래픽 디스플레이에서 버퍼 끝에있는 각 빈 줄의 가장자리에 특수 글리프를 표시합니다. &lt;a href=&quot;fringes#Fringes&quot;&gt;Fringes를&lt;/a&gt; 참조하십시오 . 이 변수는 모든 버퍼에서 자동으로 버퍼 로컬입니다.</target>
        </trans-unit>
        <trans-unit id="538e76672c08a7e7749673909c0c44f11608e76b" translate="yes" xml:space="preserve">
          <source>When this is non-&lt;code&gt;nil&lt;/code&gt;, all macro arguments will be instrumented in the generated code. For any macro, an &lt;code&gt;edebug-form-spec&lt;/code&gt; overrides this option. So to specify exceptions for macros that have some arguments evaluated and some not, use &lt;code&gt;def-edebug-spec&lt;/code&gt; to specify an &lt;code&gt;edebug-form-spec&lt;/code&gt;.</source>
          <target state="translated">이것이 &lt;code&gt;nil&lt;/code&gt; 이 아닌 경우 모든 매크로 인수가 생성 된 코드에서 계측됩니다. 모든 매크로의 경우 &lt;code&gt;edebug-form-spec&lt;/code&gt; 이이 옵션을 재정의합니다. 따라서 일부 인수가 평가되고 일부가 평가되지 않은 매크로에 대한 예외를 지정하려면 &lt;code&gt;def-edebug-spec&lt;/code&gt; 을 사용하여 &lt;code&gt;edebug-form-spec&lt;/code&gt; 을 지정하십시오 .</target>
        </trans-unit>
        <trans-unit id="de2b4a24778e77b285b4c2c9f14744354940bf00" translate="yes" xml:space="preserve">
          <source>When this is set non-&lt;code&gt;nil&lt;/code&gt;, an abbrev entered entirely in upper case is expanded using all upper case. Otherwise, an abbrev entered entirely in upper case is expanded by capitalizing each word of the expansion.</source>
          <target state="translated">non- &lt;code&gt;nil&lt;/code&gt; 로 설정하면 대문자로만 입력 된 약어가 모두 대문자로 확장됩니다. 그렇지 않으면 확장의 각 단어를 대문자로 대문자로 완전히 입력 된 약어가 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="41d0968ffa34e55de40f328d2e63e3f268a1d1c3" translate="yes" xml:space="preserve">
          <source>When this keyword is given, the &lt;var&gt;title&lt;/var&gt; string of the actions is interpreted as icon name.</source>
          <target state="translated">이 키워드가 제공되면 작업의 &lt;var&gt;title&lt;/var&gt; 문자열이 아이콘 이름으로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="d4c8a243d1bb8a9bda4f06cc416116ce664c6329" translate="yes" xml:space="preserve">
          <source>When this minor mode is enabled, windows showing a temporary buffer are automatically resized to fit their buffer&amp;rsquo;s contents.</source>
          <target state="translated">이 부 모드가 활성화되면 임시 버퍼를 표시하는 창은 해당 버퍼의 내용에 맞게 자동으로 크기가 조정됩니다.</target>
        </trans-unit>
        <trans-unit id="7aa9f8f7d9d30e1064e24ad0694a6eb136e28b2b" translate="yes" xml:space="preserve">
          <source>When this obsolete variable is non-&lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;point-left&lt;/code&gt; and &lt;code&gt;point-entered&lt;/code&gt; hooks are not run, and the &lt;code&gt;intangible&lt;/code&gt; property has no effect. Do not set this variable globally; bind it with &lt;code&gt;let&lt;/code&gt;. Since the affected properties are obsolete, this variable&amp;rsquo;s default value is &lt;code&gt;t&lt;/code&gt;, to effectively disable them.</source>
          <target state="translated">이 사용되지 않는 변수가 아닌 경우 &lt;code&gt;nil&lt;/code&gt; , &lt;code&gt;point-left&lt;/code&gt; 과 &lt;code&gt;point-entered&lt;/code&gt; 후크 실행하고 있지 않은 &lt;code&gt;intangible&lt;/code&gt; 자산은 적용되지 않습니다. 이 변수를 전역 적으로 설정하지 마십시오. &lt;code&gt;let&lt;/code&gt; 으로 바인딩하십시오 . 영향을받는 속성은 더 이상 사용되지 않으므로이 변수의 기본값은 &lt;code&gt;t&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ce5d9ccf3510c648f74876cddfb3f8fa432f414d" translate="yes" xml:space="preserve">
          <source>When this parameter is non-&lt;code&gt;nil&lt;/code&gt;, Emacs will by default make this frame invisible whenever the minibuffer (see &lt;a href=&quot;minibuffers#Minibuffers&quot;&gt;Minibuffers&lt;/a&gt;) is exited. Alternatively, it can specify the functions &lt;code&gt;iconify-frame&lt;/code&gt; and &lt;code&gt;delete-frame&lt;/code&gt;. This parameter is useful to make a child frame disappear automatically (similar to how Emacs deals with a window) when exiting the minibuffer.</source>
          <target state="translated">이 매개 변수가 &lt;code&gt;nil&lt;/code&gt; 이 아닌 경우 Emacs는 기본적으로 &lt;a href=&quot;minibuffers#Minibuffers&quot;&gt;미니 버퍼&lt;/a&gt; ( Minibuffers 참조 )가 종료 될 때마다이 프레임을 보이지 않게합니다 . 또는 &lt;code&gt;iconify-frame&lt;/code&gt; 및 &lt;code&gt;delete-frame&lt;/code&gt; 함수를 지정할 수 있습니다 . 이 매개 변수는 미니 버퍼를 종료 할 때 자식 프레임이 자동으로 사라지도록하는 데 유용합니다 (Emacs가 창을 처리하는 방식과 유사).</target>
        </trans-unit>
        <trans-unit id="65a370dce07b5f1356430e60c6962d6907472d6a" translate="yes" xml:space="preserve">
          <source>When this parameter specifies a function, that function will be called instead of the function specified by the variable &lt;code&gt;frame-auto-hide-function&lt;/code&gt; when quitting the frame&amp;rsquo;s only window (see &lt;a href=&quot;quitting-windows#Quitting-Windows&quot;&gt;Quitting Windows&lt;/a&gt;) and there are other frames left.</source>
          <target state="translated">이 매개 변수가 함수를 지정 하면 프레임의 유일한 창을 종료하고 ( &lt;a href=&quot;quitting-windows#Quitting-Windows&quot;&gt;Windows&lt;/a&gt; 종료 참조 ) 다른 프레임이 남아있을 때 변수 &lt;code&gt;frame-auto-hide-function&lt;/code&gt; 에 지정된 함수 대신 해당 함수가 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="ee3e7677010e786cb09365087ed57f54fcce0e2a" translate="yes" xml:space="preserve">
          <source>When this progress reporter is subsequently used, it will display &lt;var&gt;message&lt;/var&gt; in the echo area, followed by progress percentage. &lt;var&gt;message&lt;/var&gt; is treated as a simple string. If you need it to depend on a filename, for instance, use &lt;code&gt;format-message&lt;/code&gt; before calling this function.</source>
          <target state="translated">이 진행률보고가 이후에 사용되면 에코 영역에 &lt;var&gt;message&lt;/var&gt; 와 진행률이 표시됩니다. &lt;var&gt;message&lt;/var&gt; 는 단순 문자열로 처리됩니다. 예를 들어 파일 이름에 의존해야하는 경우이 함수를 호출하기 전에 &lt;code&gt;format-message&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="e061fdfe432d1444a6ef2c8ecfe8107d7e038ba0" translate="yes" xml:space="preserve">
          <source>When this variable is non-&lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt; and related functions will not use the Echo Area to display messages.</source>
          <target state="translated">이 변수가 &lt;code&gt;nil&lt;/code&gt; 이 아닌 경우 &lt;code&gt;message&lt;/code&gt; 및 관련 함수는 메시지를 표시하는 데 에코 영역을 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4021b690b71c815e17de814ae4283cefc26865b2" translate="yes" xml:space="preserve">
          <source>When this variable is non-&lt;code&gt;nil&lt;/code&gt;, Emacs does not create an error handler around process filter functions and sentinels. Therefore, errors in these functions also invoke the debugger. See &lt;a href=&quot;processes#Processes&quot;&gt;Processes&lt;/a&gt;.</source>
          <target state="translated">When this variable is non- &lt;code&gt;nil&lt;/code&gt; , Emacs does not create an error handler around process filter functions and sentinels. Therefore, errors in these functions also invoke the debugger. See &lt;a href=&quot;processes#Processes&quot;&gt;Processes&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="5068bf891eebc3cb3bbda675336428c5e895d463" translate="yes" xml:space="preserve">
          <source>When this variable is non-&lt;code&gt;nil&lt;/code&gt;, it specifies a fill prefix to use for filling each warning&amp;rsquo;s text.</source>
          <target state="translated">When this variable is non- &lt;code&gt;nil&lt;/code&gt; , it specifies a fill prefix to use for filling each warning&amp;rsquo;s text.</target>
        </trans-unit>
        <trans-unit id="81ca35ca79ea45a3fbfe9c0787260d134bf307a1" translate="yes" xml:space="preserve">
          <source>When this variable is non-&lt;code&gt;nil&lt;/code&gt;, no end-of-line conversion is done, no matter which coding system is specified. This applies to all the Emacs I/O and subprocess primitives, and to the explicit encoding and decoding functions (see &lt;a href=&quot;explicit-encoding#Explicit-Encoding&quot;&gt;Explicit Encoding&lt;/a&gt;).</source>
          <target state="translated">When this variable is non- &lt;code&gt;nil&lt;/code&gt; , no end-of-line conversion is done, no matter which coding system is specified. This applies to all the Emacs I/O and subprocess primitives, and to the explicit encoding and decoding functions (see &lt;a href=&quot;explicit-encoding#Explicit-Encoding&quot;&gt;Explicit Encoding&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="8687cb3c3b79cbfcb026745e0f9f09477f64a956" translate="yes" xml:space="preserve">
          <source>When this variable is set to &lt;code&gt;nil&lt;/code&gt;, cached values are never expired. Use this setting with caution, only if you are sure nothing other than Emacs ever changes the remote files. If it is set to &lt;code&gt;t&lt;/code&gt;, cached values are never used. This is the safest value, but could result in performance degradation.</source>
          <target state="translated">When this variable is set to &lt;code&gt;nil&lt;/code&gt; , cached values are never expired. Use this setting with caution, only if you are sure nothing other than Emacs ever changes the remote files. If it is set to &lt;code&gt;t&lt;/code&gt; , cached values are never used. This is the safest value, but could result in performance degradation.</target>
        </trans-unit>
        <trans-unit id="ab0579fa2fce2dc10de79c7ad712aaa99c2337cb" translate="yes" xml:space="preserve">
          <source>When to Use Autoload</source>
          <target state="translated">When to Use Autoload</target>
        </trans-unit>
        <trans-unit id="3ed62392e425d09f177ad5809b0daa952ff79ca8" translate="yes" xml:space="preserve">
          <source>When to Use Autoload.</source>
          <target state="translated">When to Use Autoload.</target>
        </trans-unit>
        <trans-unit id="fdf6d344287a175c6a8967387442678350b04d03" translate="yes" xml:space="preserve">
          <source>When trace recording is enabled, each function entry and exit adds lines to the trace buffer. A function entry record consists of &amp;lsquo;</source>
          <target state="translated">When trace recording is enabled, each function entry and exit adds lines to the trace buffer. A function entry record consists of &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="834ea781fa499fac97ca17a9fe5554133e348a79" translate="yes" xml:space="preserve">
          <source>When two users edit the same file at the same time, they are likely to interfere with each other. Emacs tries to prevent this situation from arising by recording a &lt;em&gt;file lock&lt;/em&gt; when a file is being modified. Emacs can then detect the first attempt to modify a buffer visiting a file that is locked by another Emacs job, and ask the user what to do. The file lock is really a file, a symbolic link with a special name, stored in the same directory as the file you are editing. The name is constructed by prepending</source>
          <target state="translated">When two users edit the same file at the same time, they are likely to interfere with each other. Emacs tries to prevent this situation from arising by recording a &lt;em&gt;file lock&lt;/em&gt; when a file is being modified. Emacs can then detect the first attempt to modify a buffer visiting a file that is locked by another Emacs job, and ask the user what to do. The file lock is really a file, a symbolic link with a special name, stored in the same directory as the file you are editing. The name is constructed by prepending</target>
        </trans-unit>
        <trans-unit id="5bc6bfbf01248a0c2fbe9946e76e0bc18182e404" translate="yes" xml:space="preserve">
          <source>When used interactively, this command will set the height of the currently selected frame to the number of lines specified by the numeric prefix.</source>
          <target state="translated">When used interactively, this command will set the height of the currently selected frame to the number of lines specified by the numeric prefix.</target>
        </trans-unit>
        <trans-unit id="5cafc503dcb04c5c70f5d47179201c8f2874b550" translate="yes" xml:space="preserve">
          <source>When used interactively, this command will set the width of the currently selected frame to the number of columns specified by the numeric prefix.</source>
          <target state="translated">When used interactively, this command will set the width of the currently selected frame to the number of columns specified by the numeric prefix.</target>
        </trans-unit>
        <trans-unit id="df05d2e62b078fec8b896bb8287c2d4222c3b139" translate="yes" xml:space="preserve">
          <source>When using X, you can specify what the &lt;code&gt;text&lt;/code&gt; pointer style really looks like by setting the variable &lt;code&gt;x-pointer-shape&lt;/code&gt;.</source>
          <target state="translated">When using X, you can specify what the &lt;code&gt;text&lt;/code&gt; pointer style really looks like by setting the variable &lt;code&gt;x-pointer-shape&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e9b92ac174a5019eef5c2e0102afe0200a8ed13b" translate="yes" xml:space="preserve">
          <source>When using a text terminal, only one frame can be displayed at a time on the terminal, so after a call to &lt;code&gt;select-frame&lt;/code&gt;, the next redisplay actually displays the newly selected frame. This frame remains selected until a subsequent call to &lt;code&gt;select-frame&lt;/code&gt;. Each frame on a text terminal has a number which appears in the mode line before the buffer name (see &lt;a href=&quot;mode-line-variables#Mode-Line-Variables&quot;&gt;Mode Line Variables&lt;/a&gt;).</source>
          <target state="translated">When using a text terminal, only one frame can be displayed at a time on the terminal, so after a call to &lt;code&gt;select-frame&lt;/code&gt; , the next redisplay actually displays the newly selected frame. This frame remains selected until a subsequent call to &lt;code&gt;select-frame&lt;/code&gt; . Each frame on a text terminal has a number which appears in the mode line before the buffer name (see &lt;a href=&quot;mode-line-variables#Mode-Line-Variables&quot;&gt;Mode Line Variables&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="1fb240f590926f4790a778103dba455bb7437554" translate="yes" xml:space="preserve">
          <source>When using a window system, the program can press any of the modifier keys in this way. Otherwise, only the</source>
          <target state="translated">When using a window system, the program can press any of the modifier keys in this way. Otherwise, only the</target>
        </trans-unit>
        <trans-unit id="743e4b1bde33abccc30e27027d01b2d431af1429" translate="yes" xml:space="preserve">
          <source>When using aliases in menus, often it is useful to display the equivalent key bindings for the real command name, not the aliases (which typically don&amp;rsquo;t have any key bindings except for the menu itself). To request this, give the alias symbol a non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;menu-alias&lt;/code&gt; property. Thus,</source>
          <target state="translated">When using aliases in menus, often it is useful to display the equivalent key bindings for the real command name, not the aliases (which typically don&amp;rsquo;t have any key bindings except for the menu itself). To request this, give the alias symbol a non- &lt;code&gt;nil&lt;/code&gt; &lt;code&gt;menu-alias&lt;/code&gt; property. Thus,</target>
        </trans-unit>
        <trans-unit id="2255f628b701429ffde71421b986144bd381a09c" translate="yes" xml:space="preserve">
          <source>When using this hook to save buffers that are not visiting files (for instance, special-mode buffers), keep in mind that, if the function fails to save correctly and returns a &lt;code&gt;nil&lt;/code&gt; value, &lt;code&gt;save-buffer&lt;/code&gt; will go on to prompt the user for a file to save the buffer in. If this is undesirable, consider having the function fail by raising an error.</source>
          <target state="translated">When using this hook to save buffers that are not visiting files (for instance, special-mode buffers), keep in mind that, if the function fails to save correctly and returns a &lt;code&gt;nil&lt;/code&gt; value, &lt;code&gt;save-buffer&lt;/code&gt; will go on to prompt the user for a file to save the buffer in. If this is undesirable, consider having the function fail by raising an error.</target>
        </trans-unit>
        <trans-unit id="52d9ebeef7f578e57680b4e7adf0127d0fce594f" translate="yes" xml:space="preserve">
          <source>When we added support for larger basic character codes beyond 127, and additional modifier bits, we had to change the representation of meta characters. Now the flag that represents the Meta modifier in a character is 2**27 and such numbers cannot be included in a string.</source>
          <target state="translated">When we added support for larger basic character codes beyond 127, and additional modifier bits, we had to change the representation of meta characters. Now the flag that represents the Meta modifier in a character is 2**27 and such numbers cannot be included in a string.</target>
        </trans-unit>
        <trans-unit id="5c65e6c00ce9da8e43ad1a0dd48d10b0a70b6e63" translate="yes" xml:space="preserve">
          <source>When windows that display buffers associated with process change their dimensions, the affected processes should be told about these changes. By default, when the window configuration changes, Emacs will automatically call &lt;code&gt;set-process-window-size&lt;/code&gt; on behalf of every process whose buffer is displayed in a window, passing it the smallest dimensions of all the windows displaying the process&amp;rsquo;s buffer. This works via &lt;code&gt;window-configuration-change-hook&lt;/code&gt; (see &lt;a href=&quot;window-hooks#Window-Hooks&quot;&gt;Window Hooks&lt;/a&gt;), which is told to invoke the function that is the value of the variable &lt;code&gt;window-adjust-process-window-size-function&lt;/code&gt; for each process whose buffer is displayed in at least one window. You can customize this behavior by setting the value of that variable.</source>
          <target state="translated">When windows that display buffers associated with process change their dimensions, the affected processes should be told about these changes. By default, when the window configuration changes, Emacs will automatically call &lt;code&gt;set-process-window-size&lt;/code&gt; on behalf of every process whose buffer is displayed in a window, passing it the smallest dimensions of all the windows displaying the process&amp;rsquo;s buffer. This works via &lt;code&gt;window-configuration-change-hook&lt;/code&gt; (see &lt;a href=&quot;window-hooks#Window-Hooks&quot;&gt;Window Hooks&lt;/a&gt;), which is told to invoke the function that is the value of the variable &lt;code&gt;window-adjust-process-window-size-function&lt;/code&gt; for each process whose buffer is displayed in at least one window. You can customize this behavior by setting the value of that variable.</target>
        </trans-unit>
        <trans-unit id="06746e6b5df68fb0c28eb425241d6ff6da24c050" translate="yes" xml:space="preserve">
          <source>When writing a Lisp function, do &lt;em&gt;not&lt;/em&gt; rely on this behavior of the command loop to restore the current buffer after an operation. Editing commands can also be called as Lisp functions by other programs, not just from the command loop; it is convenient for the caller if the subroutine does not change which buffer is current (unless, of course, that is the subroutine&amp;rsquo;s purpose).</source>
          <target state="translated">When writing a Lisp function, do &lt;em&gt;not&lt;/em&gt; rely on this behavior of the command loop to restore the current buffer after an operation. Editing commands can also be called as Lisp functions by other programs, not just from the command loop; it is convenient for the caller if the subroutine does not change which buffer is current (unless, of course, that is the subroutine&amp;rsquo;s purpose).</target>
        </trans-unit>
        <trans-unit id="699d5342c4bf3085a86ab0f7d9279ec17f711cd4" translate="yes" xml:space="preserve">
          <source>When writing an application, you should normally use &lt;code&gt;display-buffer&lt;/code&gt; (see &lt;a href=&quot;choosing-window#Choosing-Window&quot;&gt;Choosing Window&lt;/a&gt;) or the higher-level functions described in &lt;a href=&quot;switching-buffers#Switching-Buffers&quot;&gt;Switching Buffers&lt;/a&gt;, instead of calling &lt;code&gt;set-window-buffer&lt;/code&gt; directly.</source>
          <target state="translated">When writing an application, you should normally use &lt;code&gt;display-buffer&lt;/code&gt; (see &lt;a href=&quot;choosing-window#Choosing-Window&quot;&gt;Choosing Window&lt;/a&gt;) or the higher-level functions described in &lt;a href=&quot;switching-buffers#Switching-Buffers&quot;&gt;Switching Buffers&lt;/a&gt;, instead of calling &lt;code&gt;set-window-buffer&lt;/code&gt; directly.</target>
        </trans-unit>
        <trans-unit id="c82038cf5b058ded1e983cec027be8a019d1723f" translate="yes" xml:space="preserve">
          <source>When writing the forms in a Lisp library file, keep in mind that the file might be loaded more than once. For example, think about whether each variable should be reinitialized when you reload the library; &lt;code&gt;defvar&lt;/code&gt; does not change the value if the variable is already initialized. (See &lt;a href=&quot;defining-variables#Defining-Variables&quot;&gt;Defining Variables&lt;/a&gt;.)</source>
          <target state="translated">When writing the forms in a Lisp library file, keep in mind that the file might be loaded more than once. For example, think about whether each variable should be reinitialized when you reload the library; &lt;code&gt;defvar&lt;/code&gt; does not change the value if the variable is already initialized. (See &lt;a href=&quot;defining-variables#Defining-Variables&quot;&gt;Defining Variables&lt;/a&gt;.)</target>
        </trans-unit>
        <trans-unit id="382b15cd020a2d009645451fcf8e7fed06614cd0" translate="yes" xml:space="preserve">
          <source>When you access files using NFS, there may be a small probability that you and another user will both lock the same file simultaneously. If this happens, it is possible for the two users to make changes simultaneously, but Emacs will still warn the user who saves second. Also, the detection of modification of a buffer visiting a file changed on disk catches some cases of simultaneous editing; see &lt;a href=&quot;modification-time#Modification-Time&quot;&gt;Modification Time&lt;/a&gt;.</source>
          <target state="translated">When you access files using NFS, there may be a small probability that you and another user will both lock the same file simultaneously. If this happens, it is possible for the two users to make changes simultaneously, but Emacs will still warn the user who saves second. Also, the detection of modification of a buffer visiting a file changed on disk catches some cases of simultaneous editing; see &lt;a href=&quot;modification-time#Modification-Time&quot;&gt;Modification Time&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0bc690f6f6404e9a83bedaa30fd2ec320db85c84" translate="yes" xml:space="preserve">
          <source>When you add an association to a hash table and the table is full, it grows automatically. This value specifies how to make the hash table larger, at that time.</source>
          <target state="translated">When you add an association to a hash table and the table is full, it grows automatically. This value specifies how to make the hash table larger, at that time.</target>
        </trans-unit>
        <trans-unit id="f5f338d0f03189daa964f980d00248ed9d67844e" translate="yes" xml:space="preserve">
          <source>When you add an element to &lt;code&gt;minor-mode-alist&lt;/code&gt;, use &lt;code&gt;assq&lt;/code&gt; to check for an existing element, to avoid duplication. For example:</source>
          <target state="translated">When you add an element to &lt;code&gt;minor-mode-alist&lt;/code&gt; , use &lt;code&gt;assq&lt;/code&gt; to check for an existing element, to avoid duplication. For example:</target>
        </trans-unit>
        <trans-unit id="3b7dc1a49eeb6202c3978c8353b9e37c0e990fc3" translate="yes" xml:space="preserve">
          <source>When you call &lt;code&gt;make-frame&lt;/code&gt;, you should specify a non-&lt;code&gt;nil&lt;/code&gt; value for this parameter if the values of the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;top&lt;/code&gt; parameters represent the user&amp;rsquo;s stated preference; otherwise, use &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">When you call &lt;code&gt;make-frame&lt;/code&gt; , you should specify a non- &lt;code&gt;nil&lt;/code&gt; value for this parameter if the values of the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;top&lt;/code&gt; parameters represent the user&amp;rsquo;s stated preference; otherwise, use &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3c9a0f4eb4f88581582ff9d8911f62ecfaf9f852" translate="yes" xml:space="preserve">
          <source>When you call a function that may search, you may need to save and restore the match data around that call, if you want to preserve the match data from an earlier search for later use. Here is an example that shows the problem that arises if you fail to save the match data:</source>
          <target state="translated">When you call a function that may search, you may need to save and restore the match data around that call, if you want to preserve the match data from an earlier search for later use. Here is an example that shows the problem that arises if you fail to save the match data:</target>
        </trans-unit>
        <trans-unit id="8adf75ef3b7d98de1964eb6600f9c9a22a53218a" translate="yes" xml:space="preserve">
          <source>When you call the filling functions interactively, using a prefix argument implies the value &lt;code&gt;full&lt;/code&gt; for &lt;var&gt;justify&lt;/var&gt;.</source>
          <target state="translated">When you call the filling functions interactively, using a prefix argument implies the value &lt;code&gt;full&lt;/code&gt; for &lt;var&gt;justify&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="7cfab4b20b6c663c69d9cbc3db830f5a8762989f" translate="yes" xml:space="preserve">
          <source>When you change the value of this variable, the new value does not take effect in an existing buffer until the next time auto-save mode is reenabled in it. If auto-save mode is already enabled, auto-saves continue to go in the same file name until &lt;code&gt;auto-save-mode&lt;/code&gt; is called again.</source>
          <target state="translated">When you change the value of this variable, the new value does not take effect in an existing buffer until the next time auto-save mode is reenabled in it. If auto-save mode is already enabled, auto-saves continue to go in the same file name until &lt;code&gt;auto-save-mode&lt;/code&gt; is called again.</target>
        </trans-unit>
        <trans-unit id="f5d2fa55b53970ef1e24e90fb466cf91b6bfbaff" translate="yes" xml:space="preserve">
          <source>When you click the mouse when the mouse pointer is over a hot-spot, an event is composed by combining the &lt;var&gt;id&lt;/var&gt; of the hot-spot with the mouse event; for instance, &lt;code&gt;[area4 mouse-1]&lt;/code&gt; if the hot-spot&amp;rsquo;s &lt;var&gt;id&lt;/var&gt; is &lt;code&gt;area4&lt;/code&gt;.</source>
          <target state="translated">When you click the mouse when the mouse pointer is over a hot-spot, an event is composed by combining the &lt;var&gt;id&lt;/var&gt; of the hot-spot with the mouse event; for instance, &lt;code&gt;[area4 mouse-1]&lt;/code&gt; if the hot-spot&amp;rsquo;s &lt;var&gt;id&lt;/var&gt; is &lt;code&gt;area4&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6d3ba12b14f1396bca73837bdcf2f3e95ccefc5b" translate="yes" xml:space="preserve">
          <source>When you compile a file, you can optionally enable the &lt;em&gt;dynamic function loading&lt;/em&gt; feature (also known as &lt;em&gt;lazy loading&lt;/em&gt;). With dynamic function loading, loading the file doesn&amp;rsquo;t fully read the function definitions in the file. Instead, each function definition contains a place-holder which refers to the file. The first time each function is called, it reads the full definition from the file, to replace the place-holder.</source>
          <target state="translated">When you compile a file, you can optionally enable the &lt;em&gt;dynamic function loading&lt;/em&gt; feature (also known as &lt;em&gt;lazy loading&lt;/em&gt;). With dynamic function loading, loading the file doesn&amp;rsquo;t fully read the function definitions in the file. Instead, each function definition contains a place-holder which refers to the file. The first time each function is called, it reads the full definition from the file, to replace the place-holder.</target>
        </trans-unit>
        <trans-unit id="8308354e56a292ba74b0e5ee1a6b1a8bb32c4bca" translate="yes" xml:space="preserve">
          <source>When you create a frame and specify its screen position with the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;top&lt;/code&gt; parameters, use this parameter to say whether the specified position was user-specified (explicitly requested in some way by a human user) or merely program-specified (chosen by a program). A non-&lt;code&gt;nil&lt;/code&gt; value says the position was user-specified.</source>
          <target state="translated">When you create a frame and specify its screen position with the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;top&lt;/code&gt; parameters, use this parameter to say whether the specified position was user-specified (explicitly requested in some way by a human user) or merely program-specified (chosen by a program). A non- &lt;code&gt;nil&lt;/code&gt; value says the position was user-specified.</target>
        </trans-unit>
        <trans-unit id="6216690caef48b451a547d4473f7640a85757634" translate="yes" xml:space="preserve">
          <source>When you create a local binding for a variable, that binding takes effect only within a limited portion of the program (see &lt;a href=&quot;local-variables#Local-Variables&quot;&gt;Local Variables&lt;/a&gt;). This section describes exactly what this means.</source>
          <target state="translated">When you create a local binding for a variable, that binding takes effect only within a limited portion of the program (see &lt;a href=&quot;local-variables#Local-Variables&quot;&gt;Local Variables&lt;/a&gt;). This section describes exactly what this means.</target>
        </trans-unit>
        <trans-unit id="ae6ddb6b4899f10919c333c5ad4b6f0c875117cc" translate="yes" xml:space="preserve">
          <source>When you create a new marker, you can make it point nowhere, or point to the present position of point, or to the beginning or end of the accessible portion of the buffer, or to the same place as another given marker.</source>
          <target state="translated">When you create a new marker, you can make it point nowhere, or point to the present position of point, or to the beginning or end of the accessible portion of the buffer, or to the same place as another given marker.</target>
        </trans-unit>
        <trans-unit id="bc07e734d3ee625873ceb670d1e297bf66f905b7" translate="yes" xml:space="preserve">
          <source>When you create a window, or display a different buffer in it, the display-start position is set to a display-start position recently used for the same buffer, or to &lt;code&gt;point-min&lt;/code&gt; if the buffer doesn&amp;rsquo;t have any.</source>
          <target state="translated">When you create a window, or display a different buffer in it, the display-start position is set to a display-start position recently used for the same buffer, or to &lt;code&gt;point-min&lt;/code&gt; if the buffer doesn&amp;rsquo;t have any.</target>
        </trans-unit>
        <trans-unit id="1f14104fde1b22ca43537088f2503e50d4d6208d" translate="yes" xml:space="preserve">
          <source>When you create an array, other than a char-table, you must specify its length. You cannot specify the length of a char-table, because that is determined by the range of character codes.</source>
          <target state="translated">When you create an array, other than a char-table, you must specify its length. You cannot specify the length of a char-table, because that is determined by the range of character codes.</target>
        </trans-unit>
        <trans-unit id="f498d932b50abb178ecbeec8eb4b30ad419fb787" translate="yes" xml:space="preserve">
          <source>When you create the frame, you can explicitly specify its minibuffer window (in some other frame) with the &lt;code&gt;minibuffer&lt;/code&gt; frame parameter (see &lt;a href=&quot;buffer-parameters#Buffer-Parameters&quot;&gt;Buffer Parameters&lt;/a&gt;). If you don&amp;rsquo;t, then the minibuffer is found in the frame which is the value of the variable &lt;code&gt;default-minibuffer-frame&lt;/code&gt;. Its value should be a frame that does have a minibuffer.</source>
          <target state="translated">When you create the frame, you can explicitly specify its minibuffer window (in some other frame) with the &lt;code&gt;minibuffer&lt;/code&gt; frame parameter (see &lt;a href=&quot;buffer-parameters#Buffer-Parameters&quot;&gt;Buffer Parameters&lt;/a&gt;). If you don&amp;rsquo;t, then the minibuffer is found in the frame which is the value of the variable &lt;code&gt;default-minibuffer-frame&lt;/code&gt; . Its value should be a frame that does have a minibuffer.</target>
        </trans-unit>
        <trans-unit id="a4c7bd55ccf34c0d514c7fbbf83e872160c62ddb" translate="yes" xml:space="preserve">
          <source>When you define a major mode using &lt;code&gt;define-derived-mode&lt;/code&gt;, it automatically makes sure these conventions are followed. If you define a major mode &amp;ldquo;by hand&amp;rdquo;, not using &lt;code&gt;define-derived-mode&lt;/code&gt;, use the following functions to handle these conventions automatically.</source>
          <target state="translated">When you define a major mode using &lt;code&gt;define-derived-mode&lt;/code&gt; , it automatically makes sure these conventions are followed. If you define a major mode &amp;ldquo;by hand&amp;rdquo;, not using &lt;code&gt;define-derived-mode&lt;/code&gt; , use the following functions to handle these conventions automatically.</target>
        </trans-unit>
        <trans-unit id="dfbf91163ec659ba66214fef082c1b87b2196d04" translate="yes" xml:space="preserve">
          <source>When you define a user option with &lt;code&gt;defcustom&lt;/code&gt;, you must specify its &lt;em&gt;customization type&lt;/em&gt;. That is a Lisp object which describes (1) which values are legitimate and (2) how to display the value in the customization buffer for editing.</source>
          <target state="translated">When you define a user option with &lt;code&gt;defcustom&lt;/code&gt; , you must specify its &lt;em&gt;customization type&lt;/em&gt;. That is a Lisp object which describes (1) which values are legitimate and (2) how to display the value in the customization buffer for editing.</target>
        </trans-unit>
        <trans-unit id="a9ef6e1fd038c8fa62c42e173a11f9fc1cc461a7" translate="yes" xml:space="preserve">
          <source>When you define a variable whose value is a function, or a list of functions, use a name that ends in &amp;lsquo;</source>
          <target state="translated">When you define a variable whose value is a function, or a list of functions, use a name that ends in &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="3d1a6d288d8bfcd06e684f9ee90b340e528a3d00" translate="yes" xml:space="preserve">
          <source>When you define a variable, always consider whether you should mark it as safe or risky; see &lt;a href=&quot;file-local-variables#File-Local-Variables&quot;&gt;File Local Variables&lt;/a&gt;.</source>
          <target state="translated">When you define a variable, always consider whether you should mark it as safe or risky; see &lt;a href=&quot;file-local-variables#File-Local-Variables&quot;&gt;File Local Variables&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="089dfe2b00a702a3713c6ffc6f296f35b798e416" translate="yes" xml:space="preserve">
          <source>When you do insertion with inheritance, &lt;em&gt;which&lt;/em&gt; properties are inherited, and from where, depends on which properties are &lt;em&gt;sticky&lt;/em&gt;. Insertion after a character inherits those of its properties that are &lt;em&gt;rear-sticky&lt;/em&gt;. Insertion before a character inherits those of its properties that are &lt;em&gt;front-sticky&lt;/em&gt;. When both sides offer different sticky values for the same property, the previous character&amp;rsquo;s value takes precedence.</source>
          <target state="translated">When you do insertion with inheritance, &lt;em&gt;which&lt;/em&gt; properties are inherited, and from where, depends on which properties are &lt;em&gt;sticky&lt;/em&gt;. Insertion after a character inherits those of its properties that are &lt;em&gt;rear-sticky&lt;/em&gt;. Insertion before a character inherits those of its properties that are &lt;em&gt;front-sticky&lt;/em&gt;. When both sides offer different sticky values for the same property, the previous character&amp;rsquo;s value takes precedence.</target>
        </trans-unit>
        <trans-unit id="37b7fd18304bc6eb9c8301a24ddc05493f27d27f" translate="yes" xml:space="preserve">
          <source>When you edit a file in Emacs, you are actually working on a buffer that is visiting that file&amp;mdash;that is, the contents of the file are copied into the buffer and the copy is what you edit. Changes to the buffer do not change the file until you &lt;em&gt;save&lt;/em&gt; the buffer, which means copying the contents of the buffer into the file. Buffers which are not visiting a file can still be &amp;ldquo;saved&amp;rdquo;, in a sense, using functions in the buffer-local &lt;code&gt;write-contents-functions&lt;/code&gt; hook.</source>
          <target state="translated">When you edit a file in Emacs, you are actually working on a buffer that is visiting that file&amp;mdash;that is, the contents of the file are copied into the buffer and the copy is what you edit. Changes to the buffer do not change the file until you &lt;em&gt;save&lt;/em&gt; the buffer, which means copying the contents of the buffer into the file. Buffers which are not visiting a file can still be &amp;ldquo;saved&amp;rdquo;, in a sense, using functions in the buffer-local &lt;code&gt;write-contents-functions&lt;/code&gt; hook.</target>
        </trans-unit>
        <trans-unit id="7f427de0f7b199c666b32e125fa591ceef64dc1a" translate="yes" xml:space="preserve">
          <source>When you enter a new Edebug level, Edebug will normally stop at the first instrumented function it encounters. If you prefer to stop only at a break point, or not at all (for example, when gathering coverage data), change the value of &lt;code&gt;edebug-initial-mode&lt;/code&gt; from its default &lt;code&gt;step&lt;/code&gt; to &lt;code&gt;go&lt;/code&gt;, or &lt;code&gt;Go-nonstop&lt;/code&gt;, or one of its other values (see &lt;a href=&quot;edebug-options#Edebug-Options&quot;&gt;Edebug Options&lt;/a&gt;). You can do this readily with</source>
          <target state="translated">When you enter a new Edebug level, Edebug will normally stop at the first instrumented function it encounters. If you prefer to stop only at a break point, or not at all (for example, when gathering coverage data), change the value of &lt;code&gt;edebug-initial-mode&lt;/code&gt; from its default &lt;code&gt;step&lt;/code&gt; to &lt;code&gt;go&lt;/code&gt; , or &lt;code&gt;Go-nonstop&lt;/code&gt; , or one of its other values (see &lt;a href=&quot;edebug-options#Edebug-Options&quot;&gt;Edebug Options&lt;/a&gt;). You can do this readily with</target>
        </trans-unit>
        <trans-unit id="940d8ca82d6954332936bae37ad5371c634676bd" translate="yes" xml:space="preserve">
          <source>When you evaluate a &lt;code&gt;defcustom&lt;/code&gt; form with</source>
          <target state="translated">When you evaluate a &lt;code&gt;defcustom&lt;/code&gt; form with</target>
        </trans-unit>
        <trans-unit id="d5707edb8d3bfbb1a648002d26ade65f6366c3b8" translate="yes" xml:space="preserve">
          <source>When you evaluate a top-level &lt;code&gt;defvar&lt;/code&gt; form with</source>
          <target state="translated">When you evaluate a top-level &lt;code&gt;defvar&lt;/code&gt; form with</target>
        </trans-unit>
        <trans-unit id="c02e2bd19a86bb2d429aa5ecdbb164c754d42b8b" translate="yes" xml:space="preserve">
          <source>When you evaluate an expression interactively, the Lisp interpreter first reads the textual representation of it, producing a Lisp object, and then evaluates that object (see &lt;a href=&quot;evaluation#Evaluation&quot;&gt;Evaluation&lt;/a&gt;). However, evaluation and reading are separate activities. Reading returns the Lisp object represented by the text that is read; the object may or may not be evaluated later. See &lt;a href=&quot;input-functions#Input-Functions&quot;&gt;Input Functions&lt;/a&gt;, for a description of &lt;code&gt;read&lt;/code&gt;, the basic function for reading objects.</source>
          <target state="translated">When you evaluate an expression interactively, the Lisp interpreter first reads the textual representation of it, producing a Lisp object, and then evaluates that object (see &lt;a href=&quot;evaluation#Evaluation&quot;&gt;Evaluation&lt;/a&gt;). However, evaluation and reading are separate activities. Reading returns the Lisp object represented by the text that is read; the object may or may not be evaluated later. See &lt;a href=&quot;input-functions#Input-Functions&quot;&gt;Input Functions&lt;/a&gt;, for a description of &lt;code&gt;read&lt;/code&gt; , the basic function for reading objects.</target>
        </trans-unit>
        <trans-unit id="71e2c1e3e799c338bea9e1fae2a8af5c0b8b11e8" translate="yes" xml:space="preserve">
          <source>When you have a series of similar questions to ask, such as &amp;ldquo;Do you want to save this buffer?&amp;rdquo; for each buffer in turn, you should use &lt;code&gt;map-y-or-n-p&lt;/code&gt; to ask the collection of questions, rather than asking each question individually. This gives the user certain convenient facilities such as the ability to answer the whole series at once.</source>
          <target state="translated">When you have a series of similar questions to ask, such as &amp;ldquo;Do you want to save this buffer?&amp;rdquo; for each buffer in turn, you should use &lt;code&gt;map-y-or-n-p&lt;/code&gt; to ask the collection of questions, rather than asking each question individually. This gives the user certain convenient facilities such as the ability to answer the whole series at once.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
