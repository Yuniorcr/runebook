<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="elisp">
    <body>
      <group id="elisp">
        <trans-unit id="03e85f9d7f00ac8f062c08dcfe544b25b136aa87" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;window-configuration-type#Window-Configuration-Type&quot;&gt;Window Configuration Type&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;window-configuration-type#Window-Configuration-Type&quot;&gt;Window Configuration Type&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="415f0c380ab740163438bbdcba65517c91c2576c" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;Window Configurations&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;Window Configurations&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="3d1cc7b88cc02e9315e205428f84326456ea25d9" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;window-dividers#Window-Dividers&quot;&gt;Window Dividers&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;window-dividers#Window-Dividers&quot;&gt;Window Dividers&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="9b1446db81b6364c2cc0c5ae5e92fdf9fbfb73dd" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;window-frame-parameters#Window-Frame-Parameters&quot;&gt;Window Frame Parameters&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;window-frame-parameters#Window-Frame-Parameters&quot;&gt;Window Frame Parameters&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="a8595a9e926350370374660e1b9a9baeaf338a60" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;window-history#Window-History&quot;&gt;Window History&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;window-history#Window-History&quot;&gt;Window History&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="aee484a2f7b2dcc907f762bfb626ee965d79683b" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;window-hooks#Window-Hooks&quot;&gt;Window Hooks&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;window-hooks#Window-Hooks&quot;&gt;Window Hooks&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="035044a74dfcb10b57719505e339ebf10b145e19" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;window-internals#Window-Internals&quot;&gt;Window Internals&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;window-internals#Window-Internals&quot;&gt;Window Internals&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="3231677fbbd081c52db1b183b0369e55315306c2" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;window-parameters#Window-Parameters&quot;&gt;Window Parameters&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;window-parameters#Window-Parameters&quot;&gt;Window Parameters&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="5de91ae547eb79705c20d7fc8dbcea5bc617d941" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;window-point#Window-Point&quot;&gt;Window Point&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;window-point#Window-Point&quot;&gt;Window Point&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="df2ecf3e4327185030ed843e85fcc5ac760b8ff8" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;window-sizes#Window-Sizes&quot;&gt;Window Sizes&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;window-sizes#Window-Sizes&quot;&gt;Window Sizes&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="d4c0b226a4b0cf5ecae75c94e441cec8bac8312c" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;window-start-and-end#Window-Start-and-End&quot;&gt;Window Start and End&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;window-start-and-end#Window-Start-and-End&quot;&gt;Window Start and End&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="a3bcf74cb8631439798f437a3719a635dc1b6a88" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;window-system-selections#Window-System-Selections&quot;&gt;Window System Selections&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;window-system-selections#Window-System-Selections&quot;&gt;Window System Selections&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="38b649f0f3c778e3365887a78412ed278dc8f66d" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;window-systems#Window-Systems&quot;&gt;Window Systems&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;window-systems#Window-Systems&quot;&gt;Window Systems&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="d139b9b7a33a4f26c13bcb55d7116a8fd870b9c0" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;window-type#Window-Type&quot;&gt;Window Type&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;window-type#Window-Type&quot;&gt;Window Type&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="d7215df0f0d5daa2052ffc45a9c19ca32448218f" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;windows-and-frames#Windows-and-Frames&quot;&gt;Windows and Frames&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;windows-and-frames#Windows-and-Frames&quot;&gt;Windows and Frames&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="6a541b7f9cf08683be6ba3c638fee3f6b55d67c8" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;word-motion#Word-Motion&quot;&gt;Word Motion&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;word-motion#Word-Motion&quot;&gt;Word Motion&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="20db2177e8708a8c4efd6bf2ff98d659507bb2cf" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;writing-dynamic-modules#Writing-Dynamic-Modules&quot;&gt;Writing Dynamic Modules&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;writing-dynamic-modules#Writing-Dynamic-Modules&quot;&gt;Writing Dynamic Modules&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="0365e184296f633c0945a188a35131957a796b48" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;writing-emacs-primitives#Writing-Emacs-Primitives&quot;&gt;Writing Emacs Primitives&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;writing-emacs-primitives#Writing-Emacs-Primitives&quot;&gt;Writing Emacs Primitives&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="f4dfdf0243e804bfa357a22a8c338f342299dc19" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;writing-to-files#Writing-to-Files&quot;&gt;Writing to Files&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;writing-to-files#Writing-to-Files&quot;&gt;Writing to Files&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="c4869eedd1dc14ad148d4e53064bab697fb01b28" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;wrong-time#Wrong-Time&quot;&gt;Wrong Time&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;wrong-time#Wrong-Time&quot;&gt;Wrong Time&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="c2310446889bb8837b301ca8fffd1c8af688f89d" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;x11-keysyms#X11-Keysyms&quot;&gt;X11 Keysyms&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;x11-keysyms#X11-Keysyms&quot;&gt;X11 Keysyms&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="2fd0ce640e2df2ddbdf1b394eda2dc53d8811175" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;xbm-images#XBM-Images&quot;&gt;XBM Images&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;xbm-images#XBM-Images&quot;&gt;XBM Images&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="3cc064a3897f57d821e331d20ddf7926d9479ad5" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;xpm-images#XPM-Images&quot;&gt;XPM Images&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;xpm-images#XPM-Images&quot;&gt;XPM Images&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="49f72c265914e127a26244b2bc873fd01ef3e9f0" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;xwidgets#Xwidgets&quot;&gt;Xwidgets&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;xwidgets#Xwidgets&quot;&gt;Xwidgets&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="8c7aff3b3a9e8690377f4e1f9c215a5d60ef2406" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;yank-commands#Yank-Commands&quot;&gt;Yank Commands&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;yank-commands#Yank-Commands&quot;&gt;Yank Commands&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="7ca0e7e82572c7be034a3e59c1039d65db790256" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;yanking#Yanking&quot;&gt;Yanking&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;yanking#Yanking&quot;&gt;Yanking&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="b1f05b7b3f8572f87a606a97bdc9d421c2751bdd" translate="yes" xml:space="preserve">
          <source>&amp;bull; &lt;a href=&quot;yes_002dor_002dno-queries#Yes_002dor_002dNo-Queries&quot;&gt;Yes-or-No Queries&lt;/a&gt;:</source>
          <target state="translated">&amp;bull; &lt;a href=&quot;yes_002dor_002dno-queries#Yes_002dor_002dNo-Queries&quot;&gt;Yes-or-No Queries&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="bfd190aabb29247e4b592c851a5990857551a7f6" translate="yes" xml:space="preserve">
          <source>&amp;equiv;</source>
          <target state="translated">&amp;equiv;</target>
        </trans-unit>
        <trans-unit id="03c7b3d3b9655eace132158a150dcd952feb9a0a" translate="yes" xml:space="preserve">
          <source>&amp;gt;</source>
          <target state="translated">&amp;gt;</target>
        </trans-unit>
        <trans-unit id="bd855de81a8ada57c0160e9ec0d49f1815670c8a" translate="yes" xml:space="preserve">
          <source>&amp;gt;=</source>
          <target state="translated">&amp;gt;=</target>
        </trans-unit>
        <trans-unit id="839e4a2006b278a93c4dc0f1936567078302c3f3" translate="yes" xml:space="preserve">
          <source>&amp;hellip;</source>
          <target state="translated">&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="55e0002737af0ebaff88beadf86bf66d5ade273a" translate="yes" xml:space="preserve">
          <source>&amp;hellip;-command</source>
          <target state="translated">&amp;hellip;-command</target>
        </trans-unit>
        <trans-unit id="3c4b9d72a275526c8b7b65a59b830bcc8b221710" translate="yes" xml:space="preserve">
          <source>&amp;hellip;-flag</source>
          <target state="translated">&amp;hellip;-flag</target>
        </trans-unit>
        <trans-unit id="73e253c7c43a104566debe1924c0a38d10781d17" translate="yes" xml:space="preserve">
          <source>&amp;hellip;-form</source>
          <target state="translated">&amp;hellip;-form</target>
        </trans-unit>
        <trans-unit id="827baec0d2afbf5d362d3203ad9baab0792bb2ae" translate="yes" xml:space="preserve">
          <source>&amp;hellip;-forms</source>
          <target state="translated">&amp;hellip;-forms</target>
        </trans-unit>
        <trans-unit id="0bf50ce0ae3dae3320e59fdef40dd7d9d1fbf73e" translate="yes" xml:space="preserve">
          <source>&amp;hellip;-function</source>
          <target state="translated">&amp;hellip;-function</target>
        </trans-unit>
        <trans-unit id="617af4b329c4b250c119e44be92f9c1e7ed9ad55" translate="yes" xml:space="preserve">
          <source>&amp;hellip;-functions</source>
          <target state="translated">&amp;hellip;-functions</target>
        </trans-unit>
        <trans-unit id="0a608ad9d5b0cb7c4e592e3d47fd2eddc4b796d3" translate="yes" xml:space="preserve">
          <source>&amp;hellip;-hook</source>
          <target state="translated">&amp;hellip;-hook</target>
        </trans-unit>
        <trans-unit id="d497c3b280241d987af300ddadaef84a9b105f0d" translate="yes" xml:space="preserve">
          <source>&amp;hellip;-internal</source>
          <target state="translated">&amp;hellip;-internal</target>
        </trans-unit>
        <trans-unit id="b6114d8d12c565a43a055c465f54018819d42cd3" translate="yes" xml:space="preserve">
          <source>&amp;hellip;-predicate</source>
          <target state="translated">&amp;hellip;-predicate</target>
        </trans-unit>
        <trans-unit id="7538c6474b8983106ec5a3411d34b25ae7f828ac" translate="yes" xml:space="preserve">
          <source>&amp;hellip;-program</source>
          <target state="translated">&amp;hellip;-program</target>
        </trans-unit>
        <trans-unit id="fd8f4ea47c3e0fd23213fa644c5d65fb2c367ecc" translate="yes" xml:space="preserve">
          <source>&amp;hellip;-switches</source>
          <target state="translated">&amp;hellip;-switches</target>
        </trans-unit>
        <trans-unit id="127c5c3c33d794f8577ee09de43e9a365775bf69" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Asking the question&amp;rdquo; means printing &lt;var&gt;prompt&lt;/var&gt; in the minibuffer, followed by the string &amp;lsquo;</source>
          <target state="translated">&amp;ldquo;Asking the question&amp;rdquo; means printing &lt;var&gt;prompt&lt;/var&gt; in the minibuffer, followed by the string &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="66c5d69663443cd5315c3b45e21666c3e98dced0" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Moving one word&amp;rdquo; means moving until point crosses a word-constituent character, which indicates the beginning of a word, and then continue moving until the word ends. By default, characters that begin and end words, known as &lt;em&gt;word boundaries&lt;/em&gt;, are defined by the current buffer&amp;rsquo;s syntax table (see &lt;a href=&quot;syntax-class-table#Syntax-Class-Table&quot;&gt;Syntax Class Table&lt;/a&gt;), but modes can override that by setting up a suitable &lt;code&gt;find-word-boundary-function-table&lt;/code&gt;, described below. Characters that belong to different scripts (as defined by &lt;code&gt;char-script-table&lt;/code&gt;), also define a word boundary (see &lt;a href=&quot;character-properties#Character-Properties&quot;&gt;Character Properties&lt;/a&gt;). In any case, this function cannot move point past the boundary of the accessible portion of the buffer, or across a field boundary (see &lt;a href=&quot;fields#Fields&quot;&gt;Fields&lt;/a&gt;). The most common case of a field boundary is the end of the prompt in the minibuffer.</source>
          <target state="translated">&amp;ldquo;Moving one word&amp;rdquo; means moving until point crosses a word-constituent character, which indicates the beginning of a word, and then continue moving until the word ends. By default, characters that begin and end words, known as &lt;em&gt;word boundaries&lt;/em&gt;, are defined by the current buffer&amp;rsquo;s syntax table (see &lt;a href=&quot;syntax-class-table#Syntax-Class-Table&quot;&gt;Syntax Class Table&lt;/a&gt;), but modes can override that by setting up a suitable &lt;code&gt;find-word-boundary-function-table&lt;/code&gt; , described below. Characters that belong to different scripts (as defined by &lt;code&gt;char-script-table&lt;/code&gt; ), also define a word boundary (see &lt;a href=&quot;character-properties#Character-Properties&quot;&gt;Character Properties&lt;/a&gt;). In any case, this function cannot move point past the boundary of the accessible portion of the buffer, or across a field boundary (see &lt;a href=&quot;fields#Fields&quot;&gt;Fields&lt;/a&gt;). The most common case of a field boundary is the end of the prompt in the minibuffer.</target>
        </trans-unit>
        <trans-unit id="1567ebc6b7de65d05c7c7ee9ebc5ed0678a1df45" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Potentially&amp;rdquo; means that Emacs knows about the image types, not necessarily that they can be used (for example, they could depend on unavailable dynamic libraries). To know which image types are really available, use &lt;code&gt;image-type-available-p&lt;/code&gt;.</source>
          <target state="translated">&amp;ldquo;Potentially&amp;rdquo; means that Emacs knows about the image types, not necessarily that they can be used (for example, they could depend on unavailable dynamic libraries). To know which image types are really available, use &lt;code&gt;image-type-available-p&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="20e5ab259ecbce12a1a5405dc13f1146c0c2aac9" translate="yes" xml:space="preserve">
          <source>&amp;lowast;</source>
          <target state="translated">&amp;lowast;</target>
        </trans-unit>
        <trans-unit id="900fd13b4e78138fa5c8437d4820c6cb910a7517" translate="yes" xml:space="preserve">
          <source>&amp;lsquo;</source>
          <target state="translated">&amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="dbe46c56ae1db5f504494850ad1b2873c0b57fc2" translate="yes" xml:space="preserve">
          <source>&amp;lsquo;foo</source>
          <target state="translated">&amp;lsquo;foo</target>
        </trans-unit>
        <trans-unit id="b9847042aa1dbbcd2aa72f59cb3a8740e0312660" translate="yes" xml:space="preserve">
          <source>&amp;lsquo;like this&amp;rsquo;</source>
          <target state="translated">&amp;lsquo;like this&amp;rsquo;</target>
        </trans-unit>
        <trans-unit id="5d2c1a80d8c17e5a143aee09c29a86838f18ab02" translate="yes" xml:space="preserve">
          <source>&amp;lt;</source>
          <target state="translated">&amp;lt;</target>
        </trans-unit>
        <trans-unit id="e3b9f11fca4507aafd71385bac17a306be3f77a9" translate="yes" xml:space="preserve">
          <source>&amp;lt;&amp;hellip;&amp;gt;</source>
          <target state="translated">&amp;lt;&amp;hellip;&amp;gt;</target>
        </trans-unit>
        <trans-unit id="037fc9a552493e786bcd7aed89b2148f48d87642" translate="yes" xml:space="preserve">
          <source>&amp;lt;&lt;var&gt;a&lt;/var&gt;.&lt;var&gt;b&lt;/var&gt;.&lt;var&gt;c&lt;/var&gt;.&lt;var&gt;d&lt;/var&gt;:&lt;var&gt;p&lt;/var&gt;&amp;gt;</source>
          <target state="translated">&amp;lt;&lt;var&gt;a&lt;/var&gt;.&lt;var&gt;b&lt;/var&gt;.&lt;var&gt;c&lt;/var&gt;.&lt;var&gt;d&lt;/var&gt;:&lt;var&gt;p&lt;/var&gt;&amp;gt;</target>
        </trans-unit>
        <trans-unit id="5b3395a82316d36df5276272d419f8e788574abe" translate="yes" xml:space="preserve">
          <source>&amp;lt;&lt;var&gt;n&lt;/var&gt;&amp;gt;</source>
          <target state="translated">&amp;lt;&lt;var&gt;n&lt;/var&gt;&amp;gt;</target>
        </trans-unit>
        <trans-unit id="31c40125b3296ddaed4f32be58c0e7076909e006" translate="yes" xml:space="preserve">
          <source>&amp;lt;&lt;var&gt;nnn&lt;/var&gt;&amp;gt;</source>
          <target state="translated">&amp;lt;&lt;var&gt;nnn&lt;/var&gt;&amp;gt;</target>
        </trans-unit>
        <trans-unit id="dab86dd68ddaa4a7434b78f1b7a70c9ae75568fb" translate="yes" xml:space="preserve">
          <source>&amp;lt;=</source>
          <target state="translated">&amp;lt;=</target>
        </trans-unit>
        <trans-unit id="1dad44b0bd95ca9b08a1589ba3500d158e72224e" translate="yes" xml:space="preserve">
          <source>&amp;lt;file name&amp;gt;</source>
          <target state="translated">&amp;lt;file name&amp;gt;</target>
        </trans-unit>
        <trans-unit id="1ec6c3128c94109cafe2815d651f5fd02f53c59c" translate="yes" xml:space="preserve">
          <source>&amp;lt;file name&amp;gt;.sig</source>
          <target state="translated">&amp;lt;file name&amp;gt;.sig</target>
        </trans-unit>
        <trans-unit id="1db4b0bab71d1e71e08cab39b56283befad95546" translate="yes" xml:space="preserve">
          <source>&amp;lt;package name&amp;gt;-readme.txt</source>
          <target state="translated">&amp;lt;package name&amp;gt;-readme.txt</target>
        </trans-unit>
        <trans-unit id="a30aebfc404b1b2536c6298ba67c2466b8744524" translate="yes" xml:space="preserve">
          <source>&amp;lt;stdalign.h&amp;gt;</source>
          <target state="translated">&amp;lt;stdalign.h&amp;gt;</target>
        </trans-unit>
        <trans-unit id="154fae0e3298f7750f432093b9d49314208fb5ce" translate="yes" xml:space="preserve">
          <source>&amp;mdash;they don&amp;rsquo;t correspond to any character. The Unicode Standard defines default values of properties for such codepoints; they are mentioned below for each property.</source>
          <target state="translated">&amp;mdash;they don&amp;rsquo;t correspond to any character. The Unicode Standard defines default values of properties for such codepoints; they are mentioned below for each property.</target>
        </trans-unit>
        <trans-unit id="ecdbd96f5533c54585e2516c1c1c53f748158ebf" translate="yes" xml:space="preserve">
          <source>&amp;rArr;</source>
          <target state="translated">&amp;rArr;</target>
        </trans-unit>
        <trans-unit id="4466f5ea01bad40a521f3168b5b7a9dbde092776" translate="yes" xml:space="preserve">
          <source>&amp;rarr;</source>
          <target state="translated">&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="05c2d1fbe28d7fb9be1b5d7de9b1b069520d7548" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;</source>
          <target state="translated">&amp;rsquo;</target>
        </trans-unit>
        <trans-unit id="66ad1843713658733d26a95ba12ff1d29e6b3c14" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; &amp;ldquo;variable&amp;rdquo; in a file local variables list.</source>
          <target state="translated">&amp;rsquo; &amp;ldquo;variable&amp;rdquo; in a file local variables list.</target>
        </trans-unit>
        <trans-unit id="3171ec0701159b9ad5dc63d0acc338c76201d8ec" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; &amp;ldquo;variable&amp;rdquo; is also a potential loophole, so Emacs normally asks for confirmation before handling it.</source>
          <target state="translated">&amp;rsquo; &amp;ldquo;variable&amp;rdquo; is also a potential loophole, so Emacs normally asks for confirmation before handling it.</target>
        </trans-unit>
        <trans-unit id="48e2cf8821bdbc9f249ef6255eae02692f5ee494" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (&lt;code&gt;&quot;[^\\]&quot;&lt;/code&gt; for Lisp string syntax), which matches any single character except a backslash.</source>
          <target state="translated">&amp;rsquo; ( &lt;code&gt;&quot;[^\\]&quot;&lt;/code&gt; for Lisp string syntax), which matches any single character except a backslash.</target>
        </trans-unit>
        <trans-unit id="bc49ba903e8cc761548ddd0913ce0a4d016a47c8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (&lt;code&gt;file-attribute-modes&lt;/code&gt;).</source>
          <target state="translated">&amp;rsquo; ( &lt;code&gt;file-attribute-modes&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="2cd09c029dab28a24c9a88c5a89d99dacfad70ba" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (Period)</source>
          <target state="translated">&amp;rsquo; (Period)</target>
        </trans-unit>
        <trans-unit id="288acbc250d2d18a015a2c7a7b6b97af117f87e7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (a display table can specify a glyph to use instead of &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; (a display table can specify a glyph to use instead of &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="9f4885d9ce3dea00cedc414f1eea97e16907f58c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (and the stronger &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; (and the stronger &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="424ce5e4e502233e49d39362b7cfd5a04e24505d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (backslash and space) to terminate the escape sequence. For example, &amp;lsquo;</source>
          <target state="translated">'(백 슬래시 및 공백)는 이스케이프 시퀀스를 종료합니다. 예 : '</target>
        </trans-unit>
        <trans-unit id="ddf7430c97a29b56b3c63d1b97e02c5d64942c11" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (character code 97) is displayed as &amp;lsquo;</source>
          <target state="translated">'(문자 코드 97)은'로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="56225b914e269e1db6e63220042d5540b1c01bb6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (dot)</source>
          <target state="translated">'(점)</target>
        </trans-unit>
        <trans-unit id="dc10e063e86587ced80b5215820c7ffbe013611f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (followed by optional whitespace), the function adds &amp;lsquo;</source>
          <target state="translated">'(뒤에 선택적 공백), 함수는'</target>
        </trans-unit>
        <trans-unit id="0d4e55fab12776ec3c9a5643f78a6661dd645f09" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (for example)</source>
          <target state="translated">'(예 :)</target>
        </trans-unit>
        <trans-unit id="92aacff825801e7ae6bec7e730e1a1fc77cbaef4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (greedy), &amp;lsquo;</source>
          <target state="translated">'(욕심쟁이),'</target>
        </trans-unit>
        <trans-unit id="1621f3a530776619e57b5653280dad30fef22ffe" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (i.e., punctuation, matching character slot unused, first character of a comment-starter, second character of a comment-ender).</source>
          <target state="translated">'(즉, 구두점, 사용되지 않은 일치하는 문자 슬롯, 주석 시작 기의 첫 번째 문자, 주석 작성자의 두 번째 문자).</target>
        </trans-unit>
        <trans-unit id="7c6a5dd054a873ec7b16702bab22994904a58cc1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (military time), and &amp;lsquo;</source>
          <target state="translated">'(군사 시대) 및'</target>
        </trans-unit>
        <trans-unit id="847cbf5bbf966944190e93304905b7e214c0ce53" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (non-greedy)</source>
          <target state="translated">'(탐욕적이지 않음)</target>
        </trans-unit>
        <trans-unit id="5c8a458003477aaefe01135843752ad1f7c2d68d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (non-greedy).</source>
          <target state="translated">'(탐욕적이지 않음).</target>
        </trans-unit>
        <trans-unit id="83fef044ca64bc0b3fd93201094e4a6ceb7ee9c6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (only reversed, since we used &lt;code&gt;push&lt;/code&gt;).</source>
          <target state="translated">'(우리가 &lt;code&gt;push&lt;/code&gt; 를 사용했기 때문에 반대로 ).</target>
        </trans-unit>
        <trans-unit id="b42cabd0ba9f80f9f6393ad0cfa5a1d565fa9de0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (or &amp;lsquo;</source>
          <target state="translated">'(또는'</target>
        </trans-unit>
        <trans-unit id="db11053e80e8d51b1a16cd20784b66d8c7bebaec" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (or the deprecated suffix &amp;lsquo;</source>
          <target state="translated">'(또는 더 이상 사용되지 않는 접미사'</target>
        </trans-unit>
        <trans-unit id="179141f3b217afa5caf2cbe9cb72f61495cb022f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (possibly extended with a compression suffix) or the shared-library extension, unless it contains an explicit directory name.</source>
          <target state="translated">'(압축 접미사로 확장 될 수 있음) 또는 공유 라이브러리 확장 (명시적인 디렉토리 이름이 포함되어 있지 않은 경우).</target>
        </trans-unit>
        <trans-unit id="cedc92290ba28727ece08300f92b93b6998f9846" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (see &lt;a href=&quot;_0025_002dconstructs#g_t_0025_002dConstructs&quot;&gt;%-Constructs&lt;/a&gt;). This is normally the case when Emacs is not using a window system, and can only display one frame at a time. See &lt;a href=&quot;frame-titles#Frame-Titles&quot;&gt;Frame Titles&lt;/a&gt;.</source>
          <target state="translated">'( &lt;a href=&quot;_0025_002dconstructs#g_t_0025_002dConstructs&quot;&gt;% -Constructs&lt;/a&gt; 참조 ). 이것은 일반적으로 Emacs가 윈도우 시스템을 사용하지 않고 한 번에 한 프레임 만 표시 할 수있는 경우입니다. &lt;a href=&quot;frame-titles#Frame-Titles&quot;&gt;프레임 제목을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="546e34ab3684645ce16762b570bd0a0e649dafc8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (see &lt;a href=&quot;backquote#Backquote&quot;&gt;Backquote&lt;/a&gt;), which is used to quote only part of a list, while computing and substituting other parts.</source>
          <target state="translated">'( &lt;a href=&quot;backquote#Backquote&quot;&gt;Backquote&lt;/a&gt; 참조 ), 목록의 일부만 인용하고 다른 부분을 계산하고 대체하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9fbb45a85255e42f61f4cce80f1a312cceff4e02" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (see &lt;a href=&quot;directory-names#Directory-Names&quot;&gt;Directory Names&lt;/a&gt;). For example, if the old name is</source>
          <target state="translated">'( &lt;a href=&quot;directory-names#Directory-Names&quot;&gt;디렉토리 이름&lt;/a&gt; 참조 ). 예를 들어, 이전 이름이</target>
        </trans-unit>
        <trans-unit id="ad1d2453cfa79fbd3af52afeedda9b0479725f1e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (see &lt;a href=&quot;directory-names#abbreviate_002dfile_002dname&quot;&gt;abbreviate-file-name&lt;/a&gt;), and a relative one does not. On MS-DOS and MS-Windows, an absolute file name starts with a slash or a backslash, or with a drive specification &amp;lsquo;</source>
          <target state="translated">'( &lt;a href=&quot;directory-names#abbreviate_002dfile_002dname&quot;&gt;abbreviate-file-name 참조&lt;/a&gt; ), 상대적인 것은 그렇지 않습니다. MS-DOS 및 MS-Windows에서 절대 파일 이름은 슬래시 또는 백 슬래시로 시작하거나 드라이브 사양 '</target>
        </trans-unit>
        <trans-unit id="535e1778ed9d3fb5bf3f42153705104bd441380c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (see &lt;a href=&quot;symbol-type#Symbol-Type&quot;&gt;Symbol Type&lt;/a&gt;).</source>
          <target state="translated">'( &lt;a href=&quot;symbol-type#Symbol-Type&quot;&gt;기호 유형&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="6c99bee4c76c8e5b26a68129b299f68fbe8506ec" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (see below).</source>
          <target state="translated">'(아래 참조).</target>
        </trans-unit>
        <trans-unit id="8b480c3a6e43dfa7f7c1e6046d6a2e4aae5e3a38" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (subexpressions in sequence).</source>
          <target state="translated">'(서열의 하위 표현식).</target>
        </trans-unit>
        <trans-unit id="a9ae002965caf5a2f42e6f4f0dcee1c57b06b8c8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (such as &lt;code&gt;&amp;amp;optional&lt;/code&gt;).</source>
          <target state="translated">'(예 : &lt;code&gt;&amp;amp;optional&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="5ae840ed1977e265e201f3ea7d08f075e5d901c2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (that would be redundant). The argument &lt;var&gt;doc&lt;/var&gt; is a documentation string for the face. The additional &lt;var&gt;keyword&lt;/var&gt; arguments have the same meanings as in &lt;code&gt;defgroup&lt;/code&gt; and &lt;code&gt;defcustom&lt;/code&gt; (see &lt;a href=&quot;common-keywords#Common-Keywords&quot;&gt;Common Keywords&lt;/a&gt;).</source>
          <target state="translated">'(중복). &lt;var&gt;doc&lt;/var&gt; 인수 는 얼굴에 대한 문서 문자열입니다. 추가 &lt;var&gt;keyword&lt;/var&gt; 인수는 &lt;code&gt;defgroup&lt;/code&gt; 및 &lt;code&gt;defcustom&lt;/code&gt; 에서와 동일한 의미를 갖 습니다 ( &lt;a href=&quot;common-keywords#Common-Keywords&quot;&gt;일반 키워드&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="b943e68b8fcb2232f2e0ea92aae8ea61b5b42b5b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (the word &amp;lsquo;</source>
          <target state="translated">'('</target>
        </trans-unit>
        <trans-unit id="0221e7f7c55b6b8a61383b6edf2f93ea57d26b5a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (these are called &lt;em&gt;keywords&lt;/em&gt;). These symbols cannot be rebound, nor can their values be changed. Any attempt to set or bind &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;t&lt;/code&gt; signals a &lt;code&gt;setting-constant&lt;/code&gt; error. The same is true for a keyword (a symbol whose name starts with &amp;lsquo;</source>
          <target state="translated">'(이를 &lt;em&gt;키워드&lt;/em&gt; 라고 함 ). 이러한 기호는 리바운드 할 수 없으며 값을 변경할 수도 없습니다. &lt;code&gt;nil&lt;/code&gt; 또는 &lt;code&gt;t&lt;/code&gt; 를 설정하거나 바인딩하려는 모든 시도 는 &lt;code&gt;setting-constant&lt;/code&gt; 오류를 나타냅니다. 키워드 (이름이 '로 시작하는 기호)도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="290d894abaae2e415e32f7054e6a59e878c19f1e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (this is often appropriate when matching programming-language keywords and the like).</source>
          <target state="translated">'(프로그래밍 언어 키워드 등을 일치시킬 때 종종 적합합니다).</target>
        </trans-unit>
        <trans-unit id="b20258646d0bd3b406ad77bc7723b9e7ec54a293" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (those are called &lt;em&gt;keywords&lt;/em&gt;). See &lt;a href=&quot;constant-variables#Constant-Variables&quot;&gt;Constant Variables&lt;/a&gt;.</source>
          <target state="translated">'( &lt;em&gt;키워드&lt;/em&gt; 라고 함 ). &lt;a href=&quot;constant-variables#Constant-Variables&quot;&gt;상수 변수를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="eb7795af977e42373a97fa91d7601ee73dbaf0a6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (used for quoting), the comma, &amp;lsquo;</source>
          <target state="translated">'(인용에 사용됨), 쉼표,'</target>
        </trans-unit>
        <trans-unit id="25364199edfbec43d6442378787413448f50e0df" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (used in macros), and &amp;lsquo;</source>
          <target state="translated">'(매크로에서 사용됨) 및'</target>
        </trans-unit>
        <trans-unit id="797fabb6a14a2e06f4d7985bdee5190608a35c3c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (used in the read syntax for certain data types).</source>
          <target state="translated">'(특정 데이터 유형의 읽기 구문에 사용됨).</target>
        </trans-unit>
        <trans-unit id="edd7f4ad761c0b15b7abf82671297e2807e2c6c5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (where &lt;var&gt;instance&lt;/var&gt; is the name under which Emacs was invoked), and using &amp;lsquo;</source>
          <target state="translated">'(여기서 &lt;var&gt;instance&lt;/var&gt; 는 Emacs가 호출 된 이름입니다),'</target>
        </trans-unit>
        <trans-unit id="5e8b0d99abaef87512ad30463468a83a8a9e9c25" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; (which matches any single character that is not a square bracket), followed by a literal &amp;lsquo;</source>
          <target state="translated">'(대괄호가 아닌 단일 문자와 일치) 뒤에 리터럴'</target>
        </trans-unit>
        <trans-unit id="fe39fcd45acb9045ff9e60d33cc20b7f54fe86d7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; Unicode property (see &lt;a href=&quot;character-properties#Character-Properties&quot;&gt;bidi-class&lt;/a&gt;).</source>
          <target state="translated">'유니 코드 속성 ( &lt;a href=&quot;character-properties#Character-Properties&quot;&gt;bidi-class&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="009f5242e52568463c63af2fbe544fa87b009eb5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; according to this predicate, even if &amp;lsquo;</source>
          <target state="translated">'이 조건 자에 따라'</target>
        </trans-unit>
        <trans-unit id="4f669d3296b9ae2cac8803b672613c7b646986ef" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; act as modifiers when used after any flags and field widths in a &amp;lsquo;</source>
          <target state="translated">'에서 플래그 및 필드 너비 뒤에 사용될 때 수정 자로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="15c4f2d76a47bfd27b17bbed855750fddff39fb8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; after an expression, or on the last character of a variable. To simplify the display, a count is not shown if it is equal to the count of an earlier expression on the same line.</source>
          <target state="translated">'표현식 뒤 또는 변수의 마지막 문자. 표시를 단순화하기 위해 같은 줄에있는 이전 표현식의 개수와 같으면 개수가 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e18aab417098460640546845fe4f0de89b0e1986" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; against the string &amp;lsquo;</source>
          <target state="translated">'문자열'에 대해</target>
        </trans-unit>
        <trans-unit id="577353a774e02e377313cbd5258fc758732bdfa8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; also has special meaning in the read syntax of Lisp strings (see &lt;a href=&quot;string-type#String-Type&quot;&gt;String Type&lt;/a&gt;), and must be quoted with &amp;lsquo;</source>
          <target state="translated">'는 Lisp 문자열의 읽기 구문에서도 특별한 의미를 가지며 ( &lt;a href=&quot;string-type#String-Type&quot;&gt;String Type&lt;/a&gt; 참조 )'</target>
        </trans-unit>
        <trans-unit id="5744380a421a4193659eaa88125a285008f66d5e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; also matches upper-case letters.</source>
          <target state="translated">'도 대문자와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="81f44daab7ad651ae48091994c30fd8577937762" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; also self-evaluates in the same way; likewise, its value ordinarily cannot be changed. See &lt;a href=&quot;constant-variables#Constant-Variables&quot;&gt;Constant Variables&lt;/a&gt;.</source>
          <target state="translated">'또한 같은 방식으로 자체 평가합니다. 마찬가지로 그 값은 일반적으로 변경할 수 없습니다. &lt;a href=&quot;constant-variables#Constant-Variables&quot;&gt;상수 변수를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fc31ced975aa379697fb0851a7d736c665e468a7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; alternative that wasn&amp;rsquo;t used or a repetition that repeated zero times.</source>
          <target state="translated">'사용되지 않은 대안 또는 0 회 반복되는 반복.</target>
        </trans-unit>
        <trans-unit id="c1a74ffb0dc4dc7e4c743a8920b27f5524948f77" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; alternatives for other operations. Thus, the regular expression &amp;lsquo;</source>
          <target state="translated">'다른 작업에 대한 대안. 따라서 정규 표현식 '</target>
        </trans-unit>
        <trans-unit id="1b2cbbbf4e466dbeed4b392c50613382ceec151c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; always applies to the &lt;em&gt;smallest&lt;/em&gt; possible preceding expression. Thus, &amp;lsquo;</source>
          <target state="translated">'는 항상 가능한 &lt;em&gt;가장 작은&lt;/em&gt; 선행 표현식에 적용됩니다 . 따라서 '</target>
        </trans-unit>
        <trans-unit id="492195ee73c10e6ff600cddd309e3309bbf18930" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; always fails to match, and &amp;lsquo;</source>
          <target state="translated">'항상 일치하지 않으며'</target>
        </trans-unit>
        <trans-unit id="db984dac3ea4c40350c99f39817ec3464d6adf1d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and &amp;lsquo;</source>
          <target state="translated">'와'</target>
        </trans-unit>
        <trans-unit id="508503a9e2a05cfc1a6ff5daaaf46331d0447994" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and (after subtracting 6) the &amp;lsquo;</source>
          <target state="translated">'및 (6을 뺀 후)'</target>
        </trans-unit>
        <trans-unit id="327a4fbd6d63f9a637e1b43664518f89a4c9ad3b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and any field number, you can put certain &lt;em&gt;flag characters&lt;/em&gt;.</source>
          <target state="translated">'및 모든 필드 번호, 특정 &lt;em&gt;플래그 문자를&lt;/em&gt; 넣을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b9aab084e2297ff3e467ec0192310693b03e868c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and balancing &amp;lsquo;</source>
          <target state="translated">'및 균형'</target>
        </trans-unit>
        <trans-unit id="0da286f89f5103c076755e052918a78dd35af032" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and convert the result to an absolute name using &lt;code&gt;expand-file-name&lt;/code&gt; (see &lt;a href=&quot;file-name-expansion#File-Name-Expansion&quot;&gt;File Name Expansion&lt;/a&gt;). This function converts absolute file names to relative names:</source>
          <target state="translated">' &lt;code&gt;expand-file-name&lt;/code&gt; 이름을 사용하여 결과를 절대 이름으로 변환합니다 ( &lt;a href=&quot;file-name-expansion#File-Name-Expansion&quot;&gt;파일 이름 확장&lt;/a&gt; 참조 ). 이 함수는 절대 파일 이름을 상대 이름으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="baa616ebd8df11244e914c0a299b17750d209788" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and ending with an alphabetic letter such as &amp;lsquo;</source>
          <target state="translated">'및'와 같은 알파벳 문자로 끝나는</target>
        </trans-unit>
        <trans-unit id="79175cb0ff520e44fb8e6a542a984c3a0eceeee7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and ends with &amp;lsquo;</source>
          <target state="translated">'로 끝나고'</target>
        </trans-unit>
        <trans-unit id="c2fcf8b620f3fdf5b52d2b37a68369b92fe7521f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and formfeeds are printed as &amp;lsquo;</source>
          <target state="translated">'및 용지 공급은'로 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="bd2fbaf99b92497ff77fe9085f15c33bfebe50c9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and if &lt;var&gt;user&lt;/var&gt; is a valid login name, it expands to &lt;var&gt;user&lt;/var&gt;&amp;rsquo;s home directory. If you do not want this expansion for a relative &lt;var&gt;filename&lt;/var&gt; that might begin with a literal &amp;lsquo;</source>
          <target state="translated">' &lt;var&gt;user&lt;/var&gt; 가 유효한 로그인 이름이면 &lt;var&gt;user&lt;/var&gt; 의 홈 디렉토리로 확장됩니다 . 리터럴 '로 시작할 수 있는 상대 &lt;var&gt;filename&lt;/var&gt; 대해이 확장을 원하지 않는 경우</target>
        </trans-unit>
        <trans-unit id="ddbe212092a3850a6592ebfd9def86080b3cc6a6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and is terminated by &amp;lsquo;</source>
          <target state="translated">'이며'로 끝납니다.</target>
        </trans-unit>
        <trans-unit id="90485833f1091e44ff644a3bd643f887a7ed7491" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and no other string. (It does &lt;em&gt;not&lt;/em&gt; match the string &amp;lsquo;</source>
          <target state="translated">'및 다른 문자열은 없습니다. (그것은 않습니다 &lt;em&gt;하지&lt;/em&gt; '문자열과 일치</target>
        </trans-unit>
        <trans-unit id="3f1a1ce48abc8bd6dcd260b86ac4ee2fcb976110" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and nothing else. &amp;lsquo;</source>
          <target state="translated">'그리고 다른 것은 없습니다. '</target>
        </trans-unit>
        <trans-unit id="021529858e53a43870675359b472a92ddc6d8040" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and repetition constructs, but they continue this only until they find &lt;em&gt;some&lt;/em&gt; match. Then they succeed and report the first match found.</source>
          <target state="translated">'및 반복 구조이지만 일치 &lt;em&gt;하는&lt;/em&gt; 항목 을 찾을 때까지만 계속합니다 . 그런 다음 성공하고 발견 된 첫 번째 일치를보고합니다.</target>
        </trans-unit>
        <trans-unit id="7af7761459cf1ff05cd2ae488989fd2c8f6d9bfc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and return &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">'를 반환하고 &lt;code&gt;nil&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="2d3237545fe9ec84fc3498a7ecd7047d9e3ce90e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and set &lt;var&gt;key-regexp&lt;/var&gt; to &amp;lsquo;</source>
          <target state="translated">'및 &lt;var&gt;key-regexp&lt;/var&gt; 를'로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="99e18431d36f8701544ec32fc691661acde42b69" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and that it does not use a value. For example, &lt;code&gt;(format &quot;%% %d&quot; 30)&lt;/code&gt; returns &lt;code&gt;&quot;% 30&quot;&lt;/code&gt;.</source>
          <target state="translated">'값을 사용하지 않습니다. 예를 들어, &lt;code&gt;(format &quot;%% %d&quot; 30)&lt;/code&gt; 은 &lt;code&gt;&quot;% 30&quot;&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="fa11802d92e8c341644e83302e57832f8ff69486" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and the &amp;lsquo;</source>
          <target state="translated">' 그리고 '</target>
        </trans-unit>
        <trans-unit id="7fedb197efda3051edb4aab2a2779281afab7a08" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and the newline).</source>
          <target state="translated">'및 개행).</target>
        </trans-unit>
        <trans-unit id="43e0fda5cf1f0baa6dd47d16a1cf435b967ee6c6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and the newline). The function skips all letters and spaces, but not newlines.</source>
          <target state="translated">'및 개행). 이 함수는 모든 문자와 공백을 건너 뛰지 만 개행 문자는 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="247f1aa738740a7dd22ec6d782476124ec59835a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and then &amp;lsquo;</source>
          <target state="translated">' 그리고 '</target>
        </trans-unit>
        <trans-unit id="c0f9c9b1704fc28364e58d29c4d471c435cba2ff" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and there is no</source>
          <target state="translated">'그리고 없습니다</target>
        </trans-unit>
        <trans-unit id="b951d99e0dfb67a30a002cf5928920d3032ade5c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and there is only &amp;lsquo;</source>
          <target state="translated">'만 있고'</target>
        </trans-unit>
        <trans-unit id="ae4d9be3cce71811fc61c530e4bf942939a13c96" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and to &amp;lsquo;</source>
          <target state="translated">'및'</target>
        </trans-unit>
        <trans-unit id="4527582eca518ba12b5c935b4134aac1268ac714" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; and truncating to three characters after the &amp;lsquo;</source>
          <target state="translated">'및'뒤의 세 문자로 잘립니다.</target>
        </trans-unit>
        <trans-unit id="89f26838e683b3b65b002ddddf5fd6ebcd8e2c7e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; appear in the echo area during loading unless &lt;var&gt;nomessage&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">' &lt;var&gt;nomessage&lt;/var&gt; 가 &lt;code&gt;nil&lt;/code&gt; 이 아닌 경우로드하는 동안 에코 영역에 나타납니다 .</target>
        </trans-unit>
        <trans-unit id="8c56dec29890ea600e9b5aa180c92ec30bb2bd73" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; appearing as a name component, call &lt;code&gt;file-truename&lt;/code&gt; without prior direct or indirect calls to &lt;code&gt;expand-file-name&lt;/code&gt;. Otherwise, the file name component immediately preceding &amp;lsquo;</source>
          <target state="translated">'이름 구성 요소로 나타나는 경우, &lt;code&gt;expand-file-name&lt;/code&gt; 에 대한 사전 직접 또는 간접 호출없이 &lt;code&gt;file-truename&lt;/code&gt; 을 호출합니다 . 그렇지 않으면 '바로 앞의 파일 이름 구성 요소</target>
        </trans-unit>
        <trans-unit id="ebc0bde22a1ebb5515ba33e674f9363fd1fcbee2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; appearing as name components. This results in a sort of canonical name for the file. A file does not always have a unique truename; the number of distinct truenames a file has is equal to the number of hard links to the file. However, truenames are useful because they eliminate symbolic links as a cause of name variation.</source>
          <target state="translated">'이름 구성 요소로 나타납니다. 이로 인해 파일에 대한 일종의 정식 이름이 생성됩니다. 파일에 항상 고유 한 실제 이름이있는 것은 아닙니다. 파일에있는 고유 한 실제 이름의 수는 파일에 대한 하드 링크의 수와 같습니다. 그러나 트루 네임은 이름 변형의 원인으로 심볼릭 링크를 제거하기 때문에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="3e8ec1766e925a3b991fa020e1194ff01608836c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; appears at the beginning of the string, and if the command was invoked through &lt;em&gt;shift-translation&lt;/em&gt;, set the mark and activate the region temporarily, or extend an already active region, before the command is run. If the command was invoked without shift-translation, and the region is temporarily active, deactivate the region before the command is run. Shift-translation is controlled on the user level by &lt;code&gt;shift-select-mode&lt;/code&gt;; see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Shift-Selection.html#Shift-Selection&quot;&gt;Shift Selection&lt;/a&gt; in</source>
          <target state="translated">'는 문자열의 시작 부분에 나타나며, 명령이 &lt;em&gt;shift-translation을&lt;/em&gt; 통해 호출 된 경우 표시를 설정하고 영역을 임시로 활성화하거나 명령을 실행하기 전에 이미 활성화 된 영역을 확장합니다. 명령이 shift-translation없이 호출되고 영역이 일시적으로 활성화 된 경우 명령을 실행하기 전에 영역을 비활성화하십시오. shift-translation은 &lt;code&gt;shift-select-mode&lt;/code&gt; 에 의해 사용자 수준에서 제어 됩니다 . 참조 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Shift-Selection.html#Shift-Selection&quot;&gt;선택 시프트&lt;/a&gt; 에</target>
        </trans-unit>
        <trans-unit id="b65a8cf6478558a372a3d356f3fcfc07aa18da09" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; appears at the beginning of the string, and if the key sequence used to invoke the command includes any mouse events, then the window associated with the first of those events is selected before the command is run.</source>
          <target state="translated">'는 문자열의 시작 부분에 나타나며 명령을 호출하는 데 사용되는 키 시퀀스에 마우스 이벤트가 포함되어 있으면 명령이 실행되기 전에 해당 이벤트 중 첫 번째 이벤트와 관련된 창이 선택됩니다.</target>
        </trans-unit>
        <trans-unit id="1ce319931b4caa56e5a4283b1cd7191423d41c4e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; appears at the beginning of the string, then an error is signaled if the buffer is read-only.</source>
          <target state="translated">'가 문자열의 시작 부분에 나타나면 버퍼가 읽기 전용이면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8f50c6189461d2b2f5ede79f600d6b45dcb65e56" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; appears immediately after another &amp;lsquo;</source>
          <target state="translated">'바로 뒤에'</target>
        </trans-unit>
        <trans-unit id="a593561295c25cec0686925c263d54b149086755" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; appears in &lt;var&gt;replacement&lt;/var&gt;, then it must be part of one of the following sequences:</source>
          <target state="translated">'가 &lt;var&gt;replacement&lt;/var&gt; 로 표시 되면 다음 시퀀스 중 하나의 일부 여야합니다.</target>
        </trans-unit>
        <trans-unit id="1a6ae001aefa2d13ada5377db62c3de347f7a3db" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; appended. If such a file exists, it is loaded. If there is no file by that name, then &lt;code&gt;load&lt;/code&gt; looks for a file named</source>
          <target state="translated">'가 추가되었습니다. 그러한 파일이 있으면로드됩니다. 해당 이름의 파일이없는 경우 &lt;code&gt;load&lt;/code&gt; 는</target>
        </trans-unit>
        <trans-unit id="118ad287732c3ec7c4882a00216cdc28e2d8db4d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; applies to the largest possible surrounding expressions. Only a surrounding &amp;lsquo;</source>
          <target state="translated">'는 가능한 가장 큰 주변 표현에 적용됩니다. 주변 '</target>
        </trans-unit>
        <trans-unit id="f202db6fbdbbdb468fd12f93e1537d7259dba9f6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; are also considered risky.</source>
          <target state="translated">'또한 위험한 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="e2115cc6fa452250ecedb1acb5c1518b982ef761" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; are comments. You want to use Text mode abbrevs for those lines. The regular local abbrev table, &lt;code&gt;foo-mode-abbrev-table&lt;/code&gt; is appropriate for all other lines. See &lt;a href=&quot;standard-abbrev-tables#Standard-Abbrev-Tables&quot;&gt;Standard Abbrev Tables&lt;/a&gt;, for the definitions of &lt;code&gt;local-abbrev-table&lt;/code&gt; and &lt;code&gt;text-mode-abbrev-table&lt;/code&gt;. See &lt;a href=&quot;advising-functions#Advising-Functions&quot;&gt;Advising Functions&lt;/a&gt;, for details of &lt;code&gt;add-function&lt;/code&gt;.</source>
          <target state="translated">'는 주석입니다. 해당 행에 텍스트 모드 약어를 사용하려고합니다. 일반 로컬 약어 테이블 인 &lt;code&gt;foo-mode-abbrev-table&lt;/code&gt; 은 다른 모든 행에 적합합니다. &lt;code&gt;local-abbrev-table&lt;/code&gt; 및 &lt;code&gt;text-mode-abbrev-table&lt;/code&gt; 의 정의는 &lt;a href=&quot;standard-abbrev-tables#Standard-Abbrev-Tables&quot;&gt;Standard Abbrev Tables를&lt;/a&gt; 참조하십시오 . &lt;code&gt;add-function&lt;/code&gt; 에 대한 자세한 내용은 &lt;a href=&quot;advising-functions#Advising-Functions&quot;&gt;Advising Functions를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5c8fb015d740c91579b7ded517e78763c6d721a9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; are described by a single line.</source>
          <target state="translated">'는 한 줄로 설명됩니다.</target>
        </trans-unit>
        <trans-unit id="604ce82486dd944d232102dac03151482f50b413" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; are five ways of writing a floating-point number whose value is 1500. They are all equivalent.</source>
          <target state="translated">'는 값이 1500 인 부동 소수점 숫자를 작성하는 다섯 가지 방법입니다. 모두 동일합니다.</target>
        </trans-unit>
        <trans-unit id="8227e2fa50c66aded206d8f8cf46d294d39a9906" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; are five ways of writing a floating-point number whose value is 1500. They are all equivalent. Like Common Lisp, Emacs Lisp requires at least one digit after any decimal point in a floating-point number; &amp;lsquo;</source>
          <target state="translated">'는 값이 1500 인 부동 소수점 숫자를 작성하는 다섯 가지 방법입니다. 모두 동일합니다. Common Lisp와 마찬가지로 Emacs Lisp는 부동 소수점 숫자의 소수점 뒤에 최소한 한 자리가 필요합니다. '</target>
        </trans-unit>
        <trans-unit id="8123359dddfa5c001f5a58773cb06a1c1eaa8390" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; are identical: they stand for the same object, the symbol &lt;code&gt;nil&lt;/code&gt;. The different ways of writing the symbol are intended entirely for human readers. After the Lisp reader has read either &amp;lsquo;</source>
          <target state="translated">'는 동일합니다 : 동일한 객체 인 &lt;code&gt;nil&lt;/code&gt; 기호를 나타 냅니다. 기호를 작성하는 다양한 방법은 전적으로 인간 독자를위한 것입니다. Lisp 독자가 '</target>
        </trans-unit>
        <trans-unit id="f54e5b2c44249d3d8785b7a822c24a0f536e589f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; are included, and &amp;lsquo;</source>
          <target state="translated">'가 포함되고'</target>
        </trans-unit>
        <trans-unit id="6fd60d3ccea9c46fd6f16e5edda306eb18ee673c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; are less often used but also require no special punctuation. Any other characters may be included in a symbol&amp;rsquo;s name by escaping them with a backslash. In contrast to its use in strings, however, a backslash in the name of a symbol simply quotes the single character that follows the backslash. For example, in a string, &amp;lsquo;</source>
          <target state="translated">'는 덜 자주 사용되지만 특별한 구두점도 필요하지 않습니다. 다른 문자는 백 슬래시로 이스케이프 처리하여 기호 이름에 포함될 수 있습니다. 그러나 문자열에서의 사용과 달리 기호 이름의 백 슬래시는 단순히 백 슬래시 뒤에 오는 단일 문자를 인용합니다. 예를 들어, 문자열에서 '</target>
        </trans-unit>
        <trans-unit id="d4b853ee2c7f99c4e62509082a7dd1643fbbdeaa" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; are not affected by &lt;code&gt;search-spaces-regexp&lt;/code&gt;.</source>
          <target state="translated">'는 &lt;code&gt;search-spaces-regexp&lt;/code&gt; 의 영향을받지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="8bc32668d784ad2f2ae6fd14726948f56aabfb3f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; are not special there).</source>
          <target state="translated">'는 특별하지 않습니다).</target>
        </trans-unit>
        <trans-unit id="69bc91c5318fbf77227c1ef2adeddbb6da909565" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; are not used without a check, typically at configuration time, and the Emacs build procedure provides a substitute implementation if necessary. Some C11 features, such as anonymous structures and unions, are too difficult to emulate, so they are avoided entirely.</source>
          <target state="translated">'는 일반적으로 구성 시간에 확인없이 사용되지 않으며 Emacs 빌드 절차는 필요한 경우 대체 구현을 제공합니다. 익명 구조 및 공용체와 같은 일부 C11 기능은 에뮬레이션하기가 너무 어렵 기 때문에 완전히 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3ac949cb5261b5173f6488d28e70930719ea262d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; are present, the &amp;lsquo;</source>
          <target state="translated">'가 있으면'</target>
        </trans-unit>
        <trans-unit id="1af52a5f700a05d4b905a61acaf355b40c2419f5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; are related by case-conversion, they should have the same canonical equivalent character (which should be either &amp;lsquo;</source>
          <target state="translated">'는 대 / 소문자 변환에 의해 관련되며, 동일한 정규 문자 ('</target>
        </trans-unit>
        <trans-unit id="7d86d133258798e410e1e77697ab8bd7adf5b529" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; are simplified to their canonical form:</source>
          <target state="translated">'는 표준 형식으로 단순화됩니다.</target>
        </trans-unit>
        <trans-unit id="aca1f53c80c56da79bef0ccc4d2b59e57a45f1c3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; are supplied, try to upgrade to an encrypted connection via</source>
          <target state="translated">'가 제공되면 다음을 통해 암호화 된 연결로 업그레이드하십시오.</target>
        </trans-unit>
        <trans-unit id="b77499b49fe35e7e37442358274ccb42cec2ca70" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; are treated as hexadecimal.</source>
          <target state="translated">'는 16 진수로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="93e2cdf6227923b44c1d22b7763dce83038e110f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; are used to describe comment delimiters. The digit flags are used for comment delimiters made up of 2 characters. They indicate that a character can &lt;em&gt;also&lt;/em&gt; be part of a comment sequence, in addition to the syntactic properties associated with its character class. The flags are independent of the class and each other for the sake of characters such as &amp;lsquo;</source>
          <target state="translated">'는 주석 구분 기호를 설명하는 데 사용됩니다. 숫자 플래그는 2 자로 구성된 주석 구분 기호에 사용됩니다. 그들은 문자 수 있음을 나타냅니다 &lt;em&gt;또한&lt;/em&gt; 그 문자 클래스와 관련된 문법적인 특성뿐만 아니라 주석 시퀀스의 일부가 될. 플래그는 '와 같은 문자를 위해 클래스와 서로 독립적입니다.</target>
        </trans-unit>
        <trans-unit id="5257b174575eff29e85a5aacd2c432f8e3f7001c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; are used to qualify the corresponding comment delimiter.</source>
          <target state="translated">'는 해당 주석 구분 기호를 한정하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="321dd44a8abe77dbfe2b3e98ca9aa0d3221453ec" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; are usually &lt;em&gt;abnormal hooks&lt;/em&gt; (some old code may also use the deprecated &amp;lsquo;</source>
          <target state="translated">'는 일반적으로 &lt;em&gt;비정상적인 후크입니다&lt;/em&gt; (일부 오래된 코드는 더 이상 사용되지 않는'</target>
        </trans-unit>
        <trans-unit id="c383756bbc973cca9d09cfd350fc1b4ba148ee37" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; are valid read syntax for the character</source>
          <target state="translated">'은 문자에 대한 유효한 읽기 구문입니다.</target>
        </trans-unit>
        <trans-unit id="0aae17f19e8930715b75ae5218e2f6cc638e46b3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; argument prevents &lt;code&gt;temacs&lt;/code&gt; from trying to initialize any of its data on the terminal, so that the tables of terminal information are empty in the dumped Emacs.) This method is also known as &lt;em&gt;unexec&lt;/em&gt;, because it produces a program file from a running process, and thus is in some sense the opposite of executing a program to start a process. Although this method was the way that Emacs traditionally saved its state, it is now deprecated.</source>
          <target state="translated">'인수는 &lt;code&gt;temacs&lt;/code&gt; 가 터미널에서 데이터를 초기화하지 못하도록 하여 터미널 정보 테이블이 덤프 된 Emacs에서 비어 있도록합니다.)이 메서드는 실행중인 프로세스에서 프로그램 파일을 생성하기 때문에 &lt;em&gt;unexec&lt;/em&gt; 라고도 합니다. 따라서 어떤 의미에서 프로세스를 시작하기 위해 프로그램을 실행하는 것과 반대입니다. 이 방법은 Emacs가 전통적으로 상태를 저장하는 방법 이었지만 이제는 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="27924b7f8f3659c402eb0d72e17c1a332adfc0a0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; argument to get the up-event that was discarded (if any) after &amp;lsquo;</source>
          <target state="translated">'인수 후 버려진 (있는 경우) up-event를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="0c92ce7a76dcb5d065edf08b4093c02368db0781" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; as a designator character always stands for escape character syntax, regardless of whether the &amp;lsquo;</source>
          <target state="translated">'지정자 문자는'</target>
        </trans-unit>
        <trans-unit id="b77e04ef4b66e5fd50844e90f33f697f49586411" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; as a line of text at the top of the buffer.</source>
          <target state="translated">'버퍼의 맨 위에있는 텍스트 행으로.</target>
        </trans-unit>
        <trans-unit id="c9e70687ee5c8e3a1744e1cbce62c7f6661bce3c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; as a prompt. (It would be better to take the prompt from the events used to invoke &lt;code&gt;execute-extended-command&lt;/code&gt;, but that is painful to implement.) A description of the value of the prefix argument, if any, also becomes part of the prompt.</source>
          <target state="translated">'프롬프트로. ( &lt;code&gt;execute-extended-command&lt;/code&gt; 를 호출 하는 데 사용 된 이벤트에서 프롬프트를 가져 오는 것이 더 좋지만 구현하기가 어렵습니다.) prefix 인수 값에 대한 설명도 프롬프트의 일부가됩니다.</target>
        </trans-unit>
        <trans-unit id="1f228695dc603516a34530149b4e5121c738ff11" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; as a separate word.</source>
          <target state="translated">'별도의 단어로.</target>
        </trans-unit>
        <trans-unit id="e6120cd8b2fbac7c542717f87c17c3bffd3dc683" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; as a separate word. &amp;lsquo;</source>
          <target state="translated">'별도의 단어로. '</target>
        </trans-unit>
        <trans-unit id="d3a2591a458e355ad7fec90cff33b85c44761259" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; as directory separators.</source>
          <target state="translated">'디렉터리 구분 기호로.</target>
        </trans-unit>
        <trans-unit id="71198f20e0c8c1dc076c446098f0c5767070c5ea" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; as keywords.</source>
          <target state="translated">'키워드로.</target>
        </trans-unit>
        <trans-unit id="482e5fb76e9043d0c0eb0660b0477ed7a6947f37" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; as ordinary since there is no preceding expression on which the &amp;lsquo;</source>
          <target state="translated">'는'</target>
        </trans-unit>
        <trans-unit id="343d43642dcf2e6ab419a2a1c0b2e0ea3ffe3eb0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; as the class.</source>
          <target state="translated">'클래스로.</target>
        </trans-unit>
        <trans-unit id="2f57b66c871499626d93936a95531675f4dcf975" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; as the coding system with which to visit or save a file. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Text-Coding.html#Text-Coding&quot;&gt;Specifying a Coding System for File Text&lt;/a&gt; in</source>
          <target state="translated">'파일을 방문하거나 저장할 코딩 시스템으로. &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Text-Coding.html#Text-Coding&quot;&gt;파일 텍스트&lt;/a&gt; 에 대한 코딩 시스템 지정을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c6cfdf2d8ed3977b4c868f2f791e857b0b6e8347" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; as the current buffer. We assume that buffer &amp;lsquo;</source>
          <target state="translated">'현재 버퍼로. 우리는 버퍼 '</target>
        </trans-unit>
        <trans-unit id="6c0a00b3d88593f9b381a92f96ebce2e8fafb03b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; as the first character in the symbol name will be bound. Finding the keys is done with &lt;code&gt;assq&lt;/code&gt;, and the &lt;code&gt;cdr&lt;/code&gt; of the return value of this &lt;code&gt;assq&lt;/code&gt; is assigned as the value for the binding.</source>
          <target state="translated">'기호 이름의 첫 번째 문자가 바인딩됩니다. 열쇠를 찾기가 이루어집니다 &lt;code&gt;assq&lt;/code&gt; 및 &lt;code&gt;cdr&lt;/code&gt; 이의 반환 값의 &lt;code&gt;assq&lt;/code&gt; 는 바인딩의 값으로 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="99d29cbd60f85684a1962658b99cbda3ff670b02" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; as the top line in the buffer.</source>
          <target state="translated">'버퍼의 맨 위 줄로.</target>
        </trans-unit>
        <trans-unit id="59e883f998af40fe432b0b4f3d4bb76892bb0b41" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; assumes none of the environment variables have &amp;lsquo;</source>
          <target state="translated">'는 환경 변수에'</target>
        </trans-unit>
        <trans-unit id="6712fe290fb96f31da4fd0ec2fbb6cbf65b166e0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; at the beginning of an item string is omitted when the menu label is displayed, and has no other effect.</source>
          <target state="translated">'항목 문자열의 시작 부분에있는'는 메뉴 레이블이 표시 될 때 생략되며 다른 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="353a606510a25c4189f802b036bb8fda207fc65b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; at the beginning of the name to force interpretation as a symbol.) The characters &amp;lsquo;</source>
          <target state="translated">'기호로 해석하도록 이름 시작 부분에 표시합니다.) 문자'</target>
        </trans-unit>
        <trans-unit id="e3b2fe16e7144766bb792a8cf8ac0eb4dc5fca99" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; at the beginning of this sentence or the first &amp;lsquo;</source>
          <target state="translated">'이 문장의 시작 또는 첫 번째'</target>
        </trans-unit>
        <trans-unit id="7a458b3a56d4dcac32516e5c242dcb242d303290" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; at the beginning.&lt;a href=&quot;#FOOT1&quot; name=&quot;DOCF1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;</source>
          <target state="translated">'처음에. &lt;a href=&quot;#FOOT1&quot; name=&quot;DOCF1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8c1cdbaa61f053e162f772264854db40e29721f3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; at the end indicates that the immediately preceding regular expression (a character alternative, in this case) may be repeated zero or more times.</source>
          <target state="translated">'끝에있는'은 바로 앞의 정규식 (이 경우 대체 문자)이 0 번 이상 반복 될 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="780e1d53f801411d133606df2fd44863e2d71323" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; at the end of a line that is followed by hidden text. This example is a continuation of the previous one.</source>
          <target state="translated">'뒤에 숨겨진 텍스트가 오는 줄 끝에. 이 예는 이전 예의 연속입니다.</target>
        </trans-unit>
        <trans-unit id="0073273586ba687ce65b600b551e2e1f332744fc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; at the proper place, and type</source>
          <target state="translated">'적절한 위치에 입력하고</target>
        </trans-unit>
        <trans-unit id="48098c5c7a51a970226595b17cba205eec0f996b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; before an expression or the &amp;lsquo;</source>
          <target state="translated">'앞 또는'</target>
        </trans-unit>
        <trans-unit id="f8cb1492f53723c854828b1c829c4fa8d0bb950b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; before making a plain connection, then this parameter could be something like &amp;lsquo;</source>
          <target state="translated">'일반 연결을 만들기 전에이 매개 변수는'</target>
        </trans-unit>
        <trans-unit id="737b81b601c125186fac023ceb8348fa67c55c6c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; before nonnegative year numbers with more than four digits, &amp;lsquo;</source>
          <target state="translated">'네 자리 이상이있는 음이 아닌 연도 숫자 앞에'</target>
        </trans-unit>
        <trans-unit id="c8d3aaa26e8b8eafff86d4458dd0e1c515ab8601" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; before the opening &amp;lsquo;</source>
          <target state="translated">'개막전'</target>
        </trans-unit>
        <trans-unit id="b6ade00eb0d6f65cccb39ce2d6bc2fbddbad69dc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; begins a &lt;em&gt;complemented character alternative&lt;/em&gt;. This matches any character except the ones specified. Thus, &amp;lsquo;</source>
          <target state="translated">' &lt;em&gt;보완 문자 대체를&lt;/em&gt; 시작합니다 . 지정된 문자를 제외한 모든 문자와 일치합니다. 따라서 '</target>
        </trans-unit>
        <trans-unit id="5f6d78a45e40f35f67dc486da793536076533846" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; begins a comment, but in C mode, it terminates a statement. To support these variations, the syntax table is local to each buffer. Typically, each major mode has its own syntax table, which it installs in all buffers that use that mode. For example, the variable &lt;code&gt;emacs-lisp-mode-syntax-table&lt;/code&gt; holds the syntax table used by Emacs Lisp mode, and &lt;code&gt;c-mode-syntax-table&lt;/code&gt; holds the syntax table used by C mode. Changing a major mode&amp;rsquo;s syntax table alters the syntax in all of that mode&amp;rsquo;s buffers, as well as in any buffers subsequently put in that mode. Occasionally, several similar modes share one syntax table. See &lt;a href=&quot;example-major-modes#Example-Major-Modes&quot;&gt;Example Major Modes&lt;/a&gt;, for an example of how to set up a syntax table.</source>
          <target state="translated">'는 주석을 시작하지만 C 모드에서는 명령문을 종료합니다. 이러한 변형을 지원하기 위해 구문 테이블은 각 버퍼에 로컬입니다. 일반적으로 각 주 모드에는 해당 모드를 사용하는 모든 버퍼에 설치되는 자체 구문 테이블이 있습니다. 예를 들어, &lt;code&gt;emacs-lisp-mode-syntax-table&lt;/code&gt; 변수 는 Emacs Lisp 모드에서 사용하는 구문 테이블을 보유하고 &lt;code&gt;c-mode-syntax-table&lt;/code&gt; 은 C 모드에서 사용하는 구문 테이블을 보유합니다. 메이저 모드의 구문 테이블을 변경하면 해당 모드의 모든 버퍼와 이후에 해당 모드에 놓이는 버퍼의 구문이 변경됩니다. 때때로 여러 유사한 모드가 하나의 구문 테이블을 공유합니다. 구문 테이블을 설정하는 방법에 대한 예는 &lt;a href=&quot;example-major-modes#Example-Major-Modes&quot;&gt;Example Major Modes를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b61cdb240ed3c5cfc81e4da1e936257039b9db2e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; belongs to this class in both C and Lisp. (In C, it is used thus only inside strings, but it turns out to cause no trouble to treat it this way throughout C code.)</source>
          <target state="translated">'는 C와 Lisp 모두에서이 클래스에 속합니다. (C에서는 문자열 내에서만 사용되지만 C 코드 전체에서 이러한 방식으로 처리하는 데 문제가없는 것으로 나타났습니다.)</target>
        </trans-unit>
        <trans-unit id="2cb37013e936ae00401d8a005e184151a40fb56d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; between them. Thus, &amp;lsquo;</source>
          <target state="translated">' 그들 사이에. 따라서 '</target>
        </trans-unit>
        <trans-unit id="972edce46d63dafc165883e8b37f3bf2676a3b79" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; buffer.</source>
          <target state="translated">'버퍼.</target>
        </trans-unit>
        <trans-unit id="5d1887a3953c81c38d3a397b9d4b433d4f6ffebc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; but is slightly greater than 1/10.</source>
          <target state="translated">'이지만 1/10보다 약간 큽니다.</target>
        </trans-unit>
        <trans-unit id="4afc4a6f88775dfaccd67a8428a1256c20778acc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; but matches only at the end of a line (or the end of the accessible portion of the buffer). Thus, &amp;lsquo;</source>
          <target state="translated">'하지만 줄의 끝 (또는 버퍼의 액세스 가능한 부분의 끝)에서만 일치합니다. 따라서 '</target>
        </trans-unit>
        <trans-unit id="c814a4c2425281503dfa29b94a443bba238f5a74" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; but no other string.</source>
          <target state="translated">'하지만 다른 문자열은 없습니다.</target>
        </trans-unit>
        <trans-unit id="c1511ed758c2eab8b05923945a7ed1e3922b8559" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; but no user named &amp;lsquo;</source>
          <target state="translated">'하지만 이름이'인 사용자가 없습니다.</target>
        </trans-unit>
        <trans-unit id="010d722d4e4566fc05d8582626d2d0e11b8e91b5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; but not the string &amp;lsquo;</source>
          <target state="translated">'하지만 문자열'은 아님</target>
        </trans-unit>
        <trans-unit id="60db1f54efc74f259de4d769d48e0d019f180dcb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; buttons for adding more elements or removing elements.</source>
          <target state="translated">'버튼을 사용하여 요소를 추가하거나 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fca2a1b46f232f9b263b618d7a16d86a37e50a0c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; buttons is cleared.</source>
          <target state="translated">'버튼이 지워집니다.</target>
        </trans-unit>
        <trans-unit id="d048c0f4f80c1d2d5eaa292a2276f3b2d23b084e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; buttons. Most commands that use the</source>
          <target state="translated">'버튼. 사용하는 대부분의 명령</target>
        </trans-unit>
        <trans-unit id="d76ee2e57deb5720c6464869da82b3bea0294404" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; by itself at the end of a character alternative. For example, although &amp;lsquo;</source>
          <target state="translated">'그 자체로 대체 문자 끝에. 예를 들어 '</target>
        </trans-unit>
        <trans-unit id="f9988145bb5f1e29df0129c5e08106e390392663" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; can act. It is poor practice to depend on this behavior; quote the special character anyway, regardless of where it appears.</source>
          <target state="translated">'행동 할 수 있습니다. 이 동작에 의존하는 것은 좋지 않습니다. 특수 문자가 표시되는 위치에 관계없이 어쨌든 인용하십시오.</target>
        </trans-unit>
        <trans-unit id="d4939f22243b4fb108fb32a219337f3eed051521" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; can appear at the beginning of a character alternative or as the upper bound of a range, it is better style to put &amp;lsquo;</source>
          <target state="translated">'대체 문자의 시작 부분 또는 범위의 상한으로 나타날 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d91691910c0c30a32a4c97de099f465dd248f0cc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; can be completed.</source>
          <target state="translated">'완료 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d7c1e2b7f4841b767a31da4e4ec3c7e6f3721d13" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; can be continued onto the next line by escaping the newline with &amp;lsquo;</source>
          <target state="translated">'는'로 줄 바꿈을 이스케이프하여 다음 줄로 계속할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ef746faddb8f48a09d0cd9875993ed45ed085a9f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; can be mixed with numbered specifications.</source>
          <target state="translated">'는 번호가 지정된 사양과 혼합 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dc59af0338238089f989c756a132b0538980195a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; can be omitted). The compiler takes for granted that that file really defines the function, and does not check.</source>
          <target state="translated">'생략 가능). 컴파일러는 그 파일이 실제로 함수를 정의하고 확인하지 않는다는 것을 당연하게 여깁니다.</target>
        </trans-unit>
        <trans-unit id="89b580c6344418bebc098740011755267715a04f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; can be preceded by one, two, or three colons; if plain &amp;lsquo;</source>
          <target state="translated">'앞에는 1 개, 2 개 또는 3 개의 콜론이 올 수 있습니다. 평범한 경우 '</target>
        </trans-unit>
        <trans-unit id="eadcaf72286f019a9fcf57aadfb2f5255a12188b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; can be specified as below:</source>
          <target state="translated">'는 아래와 같이 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4bc91ac4dbf2b590de83064bdf5c79f4494f314e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; can be used only at the beginning of the regular expression, or after &amp;lsquo;</source>
          <target state="translated">'는 정규 표현식의 시작 부분이나'뒤에 만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="72ba700a6cf4dad4ec38460b710154d3ca6e18f5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; can be used only at the end of the regular expression, or before &amp;lsquo;</source>
          <target state="translated">'는 정규식의 끝 또는'앞에만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad5af02beeebc6a4653d0da6dab1c4b8df4ed06d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; can match the null string in infinitely many ways, so it causes an infinite loop. To avoid these problems, check nested repetitions carefully, to make sure that they do not cause combinatorial explosions in backtracking.</source>
          <target state="translated">'는 무한한 방법으로 null 문자열과 일치 할 수 있으므로 무한 루프가 발생합니다. 이러한 문제를 방지하려면 중첩 된 반복을주의 깊게 확인하여 역 추적에서 조합 폭발을 일으키지 않는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="455b913b743153f5e8c30c8d141c496e9cfc1685" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; can mishandle NaNs and can lose precision and type, and &amp;lsquo;</source>
          <target state="translated">'는 NaN을 잘못 처리하고 정밀도와 유형을 잃을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8a590f2b9d7745d2f9521604847d0781d0bbf420" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; can mishandle negative integers. See &lt;a href=&quot;input-functions#Input-Functions&quot;&gt;Input Functions&lt;/a&gt;.</source>
          <target state="translated">'는 음의 정수를 잘못 처리 할 수 ​​있습니다. &lt;a href=&quot;input-functions#Input-Functions&quot;&gt;입력 함수를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="dafb38d98964d8f67b5057847b1c243511764692" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; cannot match &amp;lsquo;</source>
          <target state="translated">'는'와 일치 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="24b3b7306c0cd587a7c17f71e1f8ca7616db5156" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; causes Emacs to run noninteractively. In this mode, Emacs does not read commands from the terminal, it does not alter the terminal modes, and it does not expect to be outputting to an erasable screen. The idea is that you specify Lisp programs to run; when they are finished, Emacs should exit. The way to specify the programs to run is with &amp;lsquo;</source>
          <target state="translated">'는 Emacs가 비대화 형으로 실행되도록합니다. 이 모드에서 Emacs는 터미널에서 명령을 읽지 않으며 터미널 모드를 변경하지 않으며 지울 수있는 화면으로 출력 될 것으로 예상하지 않습니다. 아이디어는 실행할 Lisp 프로그램을 지정하는 것입니다. 완료되면 Emacs가 종료됩니다. 실행할 프로그램을 지정하는 방법은 '</target>
        </trans-unit>
        <trans-unit id="76b611104dc9e6a6b8de4a319204b9d340b562be" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; causes any padding inserted by the width, if specified, to be inserted on the right rather than the left. If both &amp;lsquo;</source>
          <target state="translated">'너비로 삽입 된 패딩이 지정된 경우 왼쪽이 아닌 오른쪽에 삽입됩니다. 둘 다 '</target>
        </trans-unit>
        <trans-unit id="207c9f1b3f981c23ba6e4ca996ef94f40ced1f45" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; character actually has that syntax in the current syntax table. See &lt;a href=&quot;syntax-class-table#Syntax-Class-Table&quot;&gt;Syntax Class Table&lt;/a&gt;, for a list of syntax classes and their designator characters.</source>
          <target state="translated">'문자는 실제로 현재 구문 테이블에 해당 구문을 가지고 있습니다. 구문 클래스 및 지정자 문자 목록은 &lt;a href=&quot;syntax-class-table#Syntax-Class-Table&quot;&gt;구문 클래스 테이블을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5d7d35e4b75771eb910f211279940f259093b193" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; character in its &lt;code&gt;interactive&lt;/code&gt; spec is invoked, before the command itself is executed (see &lt;a href=&quot;interactive-codes#Interactive-Codes&quot;&gt;^&lt;/a&gt;).</source>
          <target state="translated">'자신의 캐릭터 &lt;code&gt;interactive&lt;/code&gt; 스펙이 호출 자체가 실행되는 명령 전에 (참조 &lt;a href=&quot;interactive-codes#Interactive-Codes&quot;&gt;^&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="8d2ab82eb70d18c112a661590b728d62d6f980a7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; character is &amp;lsquo;</source>
          <target state="translated">'문자는'</target>
        </trans-unit>
        <trans-unit id="4cbfa92faa4afd47786f51bdf876bf4b3ffe1326" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; character matches any single character. Case is ignored when matching font names.</source>
          <target state="translated">'문자는 단일 문자와 일치합니다. 글꼴 이름과 일치 할 때 대소 문자는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="eab23ce77ddb610a093d1b53633e4af4ca504166" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; character matches any substring, and the &amp;lsquo;</source>
          <target state="translated">'문자는 모든 하위 문자열과 일치하며'</target>
        </trans-unit>
        <trans-unit id="b95555c0a4b80b53f4d749ed29753037a6b53629" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; character used in the printed representations of objects with no read representation, has nothing to do with hash tables. See &lt;a href=&quot;printed-representation#Printed-Representation&quot;&gt;Printed Representation&lt;/a&gt;.)</source>
          <target state="translated">'문자는 읽기 표현이없는 객체의 인쇄 된 표현에 사용되며 해시 테이블과 관련이 없습니다. &lt;a href=&quot;printed-representation#Printed-Representation&quot;&gt;인쇄 된 표현을&lt;/a&gt; 참조하십시오 .)</target>
        </trans-unit>
        <trans-unit id="6427feb738743c5d2257b422949e6f0dfe5c01ad" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; character with a dash &amp;lsquo;</source>
          <target state="translated">'대시가있는 문자'</target>
        </trans-unit>
        <trans-unit id="cc32b0657736c97a1a39ad818518e451327ca725" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; character. If some of the modifiers cannot be reflected in the character code, &lt;code&gt;read-char&lt;/code&gt; leaves the unresolved modifier bits set in the returned event. For example, if the user types</source>
          <target state="translated">' 캐릭터. 수정 자 중 일부를 문자 코드에 반영 할 수없는 경우 &lt;code&gt;read-char&lt;/code&gt; 는 반환 된 이벤트에 설정된 확인되지 않은 수정 자 비트를 그대로 둡니다. 예를 들어 사용자가</target>
        </trans-unit>
        <trans-unit id="5f8c49c96c5b6c9e7ff31ba5210f25cc0e4247a2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; character. The function includes in the prompt the possible responses in &lt;var&gt;answers&lt;/var&gt; by appending them to the end of &lt;var&gt;question&lt;/var&gt;. The possible responses are provided in &lt;var&gt;answers&lt;/var&gt; as an alist whose elements are of the following form:</source>
          <target state="translated">' 캐릭터. 이 기능은 &lt;var&gt;question&lt;/var&gt; 끝에 &lt;var&gt;answers&lt;/var&gt; 을 추가 하여 가능한 응답을 프롬프트에 포함합니다 . 가능한 응답이 제공된다 &lt;var&gt;answers&lt;/var&gt; 요소의 형식은 다음과 같은 식의 AN alist :</target>
        </trans-unit>
        <trans-unit id="bfdc527d56ed43c7ac622de888f18baa6f25871b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; characters (see &lt;a href=&quot;comments#Comments&quot;&gt;Comments&lt;/a&gt;).</source>
          <target state="translated">'문자 ( &lt;a href=&quot;comments#Comments&quot;&gt;주석&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="837caec4da69ae65c61891a264b40fdd7f4f7387" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; characters (see &lt;a href=&quot;comments#Comments&quot;&gt;Comments&lt;/a&gt;). This is used in byte-compiled files, and is not meant to be used in Emacs Lisp source files.</source>
          <target state="translated">'문자 ( &lt;a href=&quot;comments#Comments&quot;&gt;주석&lt;/a&gt; 참조 ). 이것은 바이트 컴파일 된 파일에서 사용되며 Emacs Lisp 소스 파일에서는 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="40a0cb8e1b406ec642b8e7a63eb41b2bb9acb3c4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; characters appear where necessary before special characters.</source>
          <target state="translated">'문자는 특수 문자 앞에 필요한 곳에 나타납니다.</target>
        </trans-unit>
        <trans-unit id="f12b4e42180838700555599784714962b0dbdf2e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; characters as format specifications, you should &lt;em&gt;never&lt;/em&gt; pass an arbitrary string as the first argument. This is particularly true when the string is generated by some Lisp code. Unless the string is &lt;em&gt;known&lt;/em&gt; to never include any &amp;lsquo;</source>
          <target state="translated">'문자를 형식 사양 으로 사용하는 경우 첫 번째 인수로 임의의 문자열을 전달 해서는 &lt;em&gt;안됩니다&lt;/em&gt; . 이것은 일부 Lisp 코드에 의해 문자열이 생성 될 때 특히 그렇습니다. 문자열이되지 않는다면 &lt;em&gt;알려진&lt;/em&gt; '하나를 포함하지 않을 수 있습니다</target>
        </trans-unit>
        <trans-unit id="527f296119faf3a6b276660de1062ac41ae355c4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; characters as having punctuation syntax (see &lt;a href=&quot;syntax-class-table#Syntax-Class-Table&quot;&gt;Syntax Class Table&lt;/a&gt;), and binds</source>
          <target state="translated">'문자는 구두점 구문이있는 것으로 ( &lt;a href=&quot;syntax-class-table#Syntax-Class-Table&quot;&gt;구문 클래스 표&lt;/a&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="678d283e76dd55b4dcd84ec12555c174517f1ed7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; characters instead of spaces.</source>
          <target state="translated">공백 대신 '문자.</target>
        </trans-unit>
        <trans-unit id="5363fd93483cac5baf805bf1b0a735aa4a85da46" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; characters instead of spaces. This flag is ignored for non-numerical specification characters like &amp;lsquo;</source>
          <target state="translated">공백 대신 '문자. 이 플래그는 '와 같은 숫자가 아닌 사양 문자에 대해 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="3d0a8d23f16cf0032596eb27847468987afba806" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; characters or &amp;lsquo;</source>
          <target state="translated">'문자 또는'</target>
        </trans-unit>
        <trans-unit id="b3594111ba0ecafb65048987063d85f660226b2b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; characters that enclose the class name are part of the name, so a regular expression using these classes needs one more pair of brackets. For example, a regular expression matching a sequence of one or more letters and digits would be &amp;lsquo;</source>
          <target state="translated">'클래스 이름을 묶는 문자는 이름의 일부이므로 이러한 클래스를 사용하는 정규식에는 한 쌍의 대괄호가 더 필요합니다. 예를 들어, 하나 이상의 문자 및 숫자 시퀀스와 일치하는 정규 표현식은 '</target>
        </trans-unit>
        <trans-unit id="89c233272a8554bd40f4eaed30a08449832250ed" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; characters to prevent subsequent incorrect results.</source>
          <target state="translated">'문자를 사용하여 후속 잘못된 결과를 방지합니다.</target>
        </trans-unit>
        <trans-unit id="c8435efd5724e3e1e478a29b41315286c61ca4d0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; characters, and &amp;lsquo;</source>
          <target state="translated">'문자 및'</target>
        </trans-unit>
        <trans-unit id="192c42d97615bb98ad0e034a255a8a3d003d2e48" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; characters, and symbols appear without &amp;lsquo;</source>
          <target state="translated">'문자 및 기호는'없이 나타납니다.</target>
        </trans-unit>
        <trans-unit id="f5160feb1befbb5792410becb607fc37171d9f89" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; characters, pass &lt;code&gt;&quot;%s&quot;&lt;/code&gt;, described below, as the first argument, and the string as the second, like this:</source>
          <target state="translated">'문자, 아래 설명 된 &lt;code&gt;&quot;%s&quot;&lt;/code&gt; 첫 번째 인수로 전달하고 문자열을 두 번째 인수로 전달합니다.</target>
        </trans-unit>
        <trans-unit id="8b77cee5b6563a4de6ac77cb077be15ddbbf2a2f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; characters.</source>
          <target state="translated">'문자.</target>
        </trans-unit>
        <trans-unit id="6e99b143b986c613902ac390529d3cb29755b49b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; characters. For unassigned codepoints, the value is &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">'문자. 할당되지 않은 코드 포인트의 경우 값은 &lt;code&gt;nil&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b40c78d379d0db9711301cce01ce3f243b30c572" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; code character.</source>
          <target state="translated">'코드 문자.</target>
        </trans-unit>
        <trans-unit id="c308006ab1d703e2247a3d0f277a432605ac1076" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; command-line options were specified.</source>
          <target state="translated">'명령 줄 옵션이 지정되었습니다.</target>
        </trans-unit>
        <trans-unit id="2a165fa4001872456de7d47871c6e5514134638c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; commands sent through the connection. The value of &lt;code&gt;nil&lt;/code&gt; for &lt;var&gt;speed&lt;/var&gt; is valid only for connections that were already opened by a previous call to &lt;code&gt;make-serial-process&lt;/code&gt; or &lt;code&gt;serial-term&lt;/code&gt;.</source>
          <target state="translated">'명령이 연결을 통해 전송되었습니다. &lt;var&gt;speed&lt;/var&gt; 에 대한 &lt;code&gt;nil&lt;/code&gt; 값은 이전 &lt;code&gt;make-serial-process&lt;/code&gt; 또는 &lt;code&gt;serial-term&lt;/code&gt; 호출에 의해 이미 열린 연결에만 유효합니다 .</target>
        </trans-unit>
        <trans-unit id="9233cb0afed24a43fd899b6e0b1b057332405b8b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; component can remain in the output:</source>
          <target state="translated">'구성 요소는 출력에 남아있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a04d2d2adbf5c45326202275c2c5de900e7f03d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; concluded.</source>
          <target state="translated">'가 끝났다.</target>
        </trans-unit>
        <trans-unit id="72f930f55bbfcba394f4e628c19456940ece7497" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; connection.</source>
          <target state="translated">'연결.</target>
        </trans-unit>
        <trans-unit id="82873e05db414d218046b8f3fabdfd5ec660bf4e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; consists of the complemented character alternative &amp;lsquo;</source>
          <target state="translated">'보완 문자 대체'로 구성</target>
        </trans-unit>
        <trans-unit id="ad9154a17e0aac5b0527d1980e86b585508ffac8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; construct because, in practice, there was usually no conflict between the two meanings. But occasionally there is a conflict, and that led to the introduction of shy groups.</source>
          <target state="translated">'구문은 실제로 두 의미간에 충돌이 없었기 때문입니다. 그러나 때때로 갈등이 발생하여 수줍은 그룹이 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="f1a985d4f574bce864bf4368958c345fc3542699" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; construct by matching, immediately, as many repetitions as can be found. Then it continues with the rest of the pattern. If that fails, backtracking occurs, discarding some of the matches of the &amp;lsquo;</source>
          <target state="translated">'찾을 수있는 한 많은 반복을 즉시 일치시켜 구성합니다. 그런 다음 나머지 패턴으로 계속됩니다. 실패하면 역 추적이 발생하여 '</target>
        </trans-unit>
        <trans-unit id="77b90b1c32d51efe9034181e56be40c7d764287b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; construct matches more than once (which can happen, for instance, if it is followed by &amp;lsquo;</source>
          <target state="translated">'구조는 두 번 이상 일치합니다 (예를 들어'</target>
        </trans-unit>
        <trans-unit id="1130d990613770867e04d17ced8ba136908af9d7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; construct never matches anything. To use an artificial example, &amp;lsquo;</source>
          <target state="translated">'구조는 어떤 것과도 일치하지 않습니다. 인위적인 예를 사용하려면 '</target>
        </trans-unit>
        <trans-unit id="a65899090d45e166a19990779e47f027497cad1e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; construct substitutes the value of &lt;code&gt;global-mode-string&lt;/code&gt;, but that is obsolete, since the variable is included in the mode line from &lt;code&gt;mode-line-format&lt;/code&gt;.</source>
          <target state="translated">'구문은 &lt;code&gt;global-mode-string&lt;/code&gt; 값을 대체 하지만 &lt;code&gt;mode-line-format&lt;/code&gt; 의 모드 행에 변수가 포함되어 있기 때문에 더 이상 사용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="d97b7cd37c9edcb2fdc6ef4a28b8f6b3f404085c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; construct, which skips the next &lt;var&gt;count&lt;/var&gt; characters, is useful for program-generated comments containing binary data. The Emacs Lisp byte compiler uses this in its output files (see &lt;a href=&quot;byte-compilation#Byte-Compilation&quot;&gt;Byte Compilation&lt;/a&gt;). It isn&amp;rsquo;t meant for source files, however.</source>
          <target state="translated">'다음 &lt;var&gt;count&lt;/var&gt; 문자 를 건너 뛰는 구조 는 바이너리 데이터를 포함하는 프로그램 생성 주석에 유용합니다. Emacs Lisp 바이트 컴파일러는 출력 파일에서 이것을 사용합니다 ( &lt;a href=&quot;byte-compilation#Byte-Compilation&quot;&gt;Byte Compilation&lt;/a&gt; 참조 ). 그러나 소스 파일을위한 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="b6dd7466daba9cbfc241101eb12abc4b21df91fe" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; construct, which stands for the name of this file, as a string. Do not use these constructs in Lisp source files; they are not designed to be clear to humans reading the file.</source>
          <target state="translated">'구문은이 파일의 이름을 문자열로 나타냅니다. Lisp 소스 파일에서 이러한 구성을 사용하지 마십시오. 사람이 파일을 읽을 수 있도록 설계되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="aff70e1236c7ada1af36786575e284eaf597b37e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; construct: treat the second line as the start of a &lt;em&gt;body&lt;/em&gt;.</source>
          <target state="translated">'구조 : 두 번째 줄을 &lt;em&gt;본문&lt;/em&gt; 의 시작으로 취급합니다 .</target>
        </trans-unit>
        <trans-unit id="9bc24c1488111b71a66865851fdd440f53f7c76e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; constructs are ignored. See &lt;a href=&quot;mode-line-data#Mode-Line-Data&quot;&gt;Mode Line Data&lt;/a&gt;.</source>
          <target state="translated">'구문은 무시됩니다. &lt;a href=&quot;mode-line-data#Mode-Line-Data&quot;&gt;모드 라인 데이터를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a7751ea682d8bcb703696dda872236e4589659a3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; constructs.</source>
          <target state="translated">'구조.</target>
        </trans-unit>
        <trans-unit id="9641d30bfb8ed5dfe23b1da562e24e1092613789" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; control whether and where to find the init file; &amp;lsquo;</source>
          <target state="translated">'초기화 파일을 찾을 지 여부와 위치를 제어합니다. '</target>
        </trans-unit>
        <trans-unit id="b333f4a31359342f6a1dac4bb5c7235a9d2113e9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; could take hours before it ultimately fails. Emacs must try each way of grouping the &amp;lsquo;</source>
          <target state="translated">'궁극적으로 실패하기까지 몇 시간이 걸릴 수 있습니다. Emacs는 '</target>
        </trans-unit>
        <trans-unit id="f4a28ad8c59d2e0e562deb102a7172f79a609879" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; delimiters that begin and end the comment are not part of the documentation string.</source>
          <target state="translated">'주석을 시작하고 끝나는 구분 기호는 문서 문자열의 일부가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="ea07e7509a6000c25d8f6e4fae8f6b2803df6863" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; documentation construct in &lt;var&gt;string&lt;/var&gt;.</source>
          <target state="translated">' &lt;var&gt;string&lt;/var&gt; 의 문서 구성 .</target>
        </trans-unit>
        <trans-unit id="9db7d23aae3572437b132d34cab720a8a185a1b6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; does match &amp;lsquo;</source>
          <target state="translated">'는'와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="fdab41e7787c350c9d0dc86425878107b2d3cdcd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; does not match the word &amp;lsquo;</source>
          <target state="translated">'는'단어와 일치하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="997e5bfd11bbfc477d39ab873e3fa3ba7d25ca7d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; does not terminate it, and &amp;lsquo;</source>
          <target state="translated">'종료하지 않고'</target>
        </trans-unit>
        <trans-unit id="93a5f5eb3bd4107973a92c79a57cdd775276cb72" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; does not understand (e.g., &lt;code&gt;defstruct&lt;/code&gt; and some other macros). In such cases, you can pass a non-&lt;code&gt;nil&lt;/code&gt;&lt;var&gt;fileonly&lt;/var&gt; argument to &lt;code&gt;declare-function&lt;/code&gt;, meaning to only check that the file exists, not that it actually defines the function. Note that to do this without having to specify an argument list, you should set the &lt;var&gt;arglist&lt;/var&gt; argument to &lt;code&gt;t&lt;/code&gt; (because &lt;code&gt;nil&lt;/code&gt; means an empty argument list, as opposed to an unspecified one).</source>
          <target state="translated">'이해하지 못합니다 (예 : &lt;code&gt;defstruct&lt;/code&gt; 및 기타 매크로). 이러한 경우에는 &lt;code&gt;nil&lt;/code&gt; 이 아닌 &lt;var&gt;fileonly&lt;/var&gt; 인수를 &lt;code&gt;declare-function&lt;/code&gt; 에 전달할 수 있습니다. 즉, 실제로 함수를 정의하는 것이 아니라 파일이 존재하는지 확인하는 것입니다. 인수 목록을 지정하지 않고이를 수행하려면 &lt;var&gt;arglist&lt;/var&gt; 인수를 &lt;code&gt;t&lt;/code&gt; 로 설정해야합니다 ( &lt;code&gt;nil&lt;/code&gt; 은 지정되지 않은 인수 목록이 아니라 빈 인수 목록을 의미 하기 때문입니다 ).</target>
        </trans-unit>
        <trans-unit id="1b9bc7e59c2e45dbc08353a2483132fd02e19d3f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; does, then evaluates the form so that its value becomes the argument for the command. Prompt.</source>
          <target state="translated">'그런 다음 해당 값이 명령에 대한 인수가되도록 양식을 평가합니다. 신속한.</target>
        </trans-unit>
        <trans-unit id="909cae0d38b302e8668f6698aefe2a9dcc1c7b5a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; doesn&amp;rsquo;t count as the beginning of an extension. Thus,</source>
          <target state="translated">'는 확장의 시작으로 간주되지 않습니다. 그러므로,</target>
        </trans-unit>
        <trans-unit id="0db4416a8673938e603ab36217df8a0d2209df2f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; doesn&amp;rsquo;t disable format conversion, uncompression, or auto mode selection.</source>
          <target state="translated">'형식 변환, 압축 해제 또는 자동 모드 선택을 비활성화하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="12b2ba3c75fa9584ca4f234db436788267dc9f92" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; element if it specifies the same major mode as the buffer already has.</source>
          <target state="translated">'요소가 이미 버퍼에있는 것과 동일한 주 모드를 지정하는 경우.</target>
        </trans-unit>
        <trans-unit id="b054b9af9236f71de3bcab289f661de15c94bf91" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; enclose a character class inside a character alternative. Any other character appearing in a regular expression is ordinary, unless a &amp;lsquo;</source>
          <target state="translated">'문자 대체 문자 안에 문자 클래스를 묶습니다. 정규식에 나타나는 다른 모든 문자는 '</target>
        </trans-unit>
        <trans-unit id="c2e78890a6d1dbc2f1a90b1473ea8c9b114a0a84" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; ensures that the padding consists of &amp;lsquo;</source>
          <target state="translated">'는 패딩이'</target>
        </trans-unit>
        <trans-unit id="74fb6864bd031031751cf27bd56ba31e75a1e957" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; error.</source>
          <target state="translated">'오류.</target>
        </trans-unit>
        <trans-unit id="d79c837aeca9436531b94abe66c85b592e0b79cd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; escapes are available for use in &lt;var&gt;format-string&lt;/var&gt;:</source>
          <target state="translated">'이스케이프는 &lt;var&gt;format-string&lt;/var&gt; 에서 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5e07daa0b60881f422be295054af8483799c5fba" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; except it suppresses trailing instances of &amp;lsquo;</source>
          <target state="translated">'를 제외하고'의 후행 인스턴스를 억제합니다.</target>
        </trans-unit>
        <trans-unit id="c3bf72f24683499cc0354e1a7b1f90c0e56c4cd7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; except that any flags or field width override the &amp;lsquo;</source>
          <target state="translated">'플래그 또는 필드 너비가'</target>
        </trans-unit>
        <trans-unit id="5f789cc15c6232b4beb16ea7eb5040df570d2de5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; except that it must match the preceding expression at least once. So, for example, &amp;lsquo;</source>
          <target state="translated">'를 제외하고는 이전 표현식과 한 번 이상 일치해야합니다. 예를 들어 '</target>
        </trans-unit>
        <trans-unit id="5d70b13ab69d055c698b6d9a6582962f7b12f786" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; except that it must match the preceding expression either once or not at all. For example, &amp;lsquo;</source>
          <target state="translated">'를 제외하고는 이전 표현식과 한 번만 일치하거나 전혀 일치하지 않아야합니다. 예 : '</target>
        </trans-unit>
        <trans-unit id="7ea0e985f8692da016bc06581645fc5450d21c49" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; exist,</source>
          <target state="translated">'존재,</target>
        </trans-unit>
        <trans-unit id="411dbb5a7c6a157726268ed410217c1ccfe169cb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; file exists but is older than the &amp;lsquo;</source>
          <target state="translated">'파일이 있지만'</target>
        </trans-unit>
        <trans-unit id="7f78afef1c163d989cbebb27aeba2a51eb3250d5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; file has no corresponding &amp;lsquo;</source>
          <target state="translated">'파일에 해당하는'가 없습니다.</target>
        </trans-unit>
        <trans-unit id="2a56cbe17c274c7dd4bb6069c35c351dd32123c7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; file in &lt;var&gt;directory&lt;/var&gt; (or its subdirectories) that needs recompilation. A file needs recompilation if a &amp;lsquo;</source>
          <target state="translated">' 재 컴파일이 필요한 &lt;var&gt;directory&lt;/var&gt; (또는 하위 디렉터리) 의 파일 . 파일은 재 컴파일이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="2893a28e9a2c55183be2d847ee71c4d47a376215" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; file that has a &amp;lsquo;</source>
          <target state="translated">'가있는'파일</target>
        </trans-unit>
        <trans-unit id="d8f680b8150f3e898bacbbfd48e4bcb172c4215f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; file, &lt;var&gt;flag&lt;/var&gt; says what to do. If it is &lt;code&gt;nil&lt;/code&gt;, this command ignores these files. If &lt;var&gt;flag&lt;/var&gt; is 0, it compiles them. If it is neither &lt;code&gt;nil&lt;/code&gt; nor 0, it asks the user whether to compile each such file, and asks about each subdirectory as well.</source>
          <target state="translated">'파일, &lt;var&gt;flag&lt;/var&gt; 는 수행 할 작업을 나타냅니다. 이 경우 &lt;code&gt;nil&lt;/code&gt; ,이 명령은이 파일을 무시합니다. 경우 &lt;var&gt;flag&lt;/var&gt; 0을, 그것은 그들을 컴파일합니다. &lt;code&gt;nil&lt;/code&gt; 도 0 도 아닌 경우 사용자에게 이러한 각 파일을 컴파일할지 여부를 묻고 각 하위 디렉토리에 대해서도 묻습니다.</target>
        </trans-unit>
        <trans-unit id="895d361cd57fc37a743eedf2d554328ef1dd5123" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; file.</source>
          <target state="translated">'파일.</target>
        </trans-unit>
        <trans-unit id="7831bf4bdd2bd1f4e71d3e196a6b39a30d0dc440" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; first tries to match all three &amp;lsquo;</source>
          <target state="translated">'먼저 세 가지 모두 일치 시도'</target>
        </trans-unit>
        <trans-unit id="1697cc772413722bdc27a3ad366fdbcb64bffe22" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; flag is ignored.</source>
          <target state="translated">'플래그는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="1d8fbf3b5c916f184a6cdcf7b45e953787590d69" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; flag means include a decimal point even if the precision is zero. For &amp;lsquo;</source>
          <target state="translated">'플래그는 정밀도가 0 인 경우에도 소수점을 포함 함을 의미합니다. '</target>
        </trans-unit>
        <trans-unit id="82fa6105b0d3d2eaebf9189a99338f1934c58d7e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; flag, but still pad with &lt;em&gt;spaces&lt;/em&gt;.</source>
          <target state="translated">'플래그이지만 여전히 &lt;em&gt;공백&lt;/em&gt; 으로 채 &lt;em&gt;웁니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="c852f11eae5935f1bcb1f3459b9eee069da434c3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; flag.</source>
          <target state="translated">' 깃발.</target>
        </trans-unit>
        <trans-unit id="193bf12078a65ec07299222414a99b757d0b6613" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; followed by &lt;var&gt;digit&lt;/var&gt; to match that same text, whatever it may have been.</source>
          <target state="translated">'그 뒤에 &lt;var&gt;digit&lt;/var&gt; 가 나오면 동일한 텍스트와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="99962e41a63929f88d327c0456939247075c140a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; followed by a &amp;lsquo;</source>
          <target state="translated">'뒤에'</target>
        </trans-unit>
        <trans-unit id="933f77cc5da23246b4c5c9ddc6c36fdb72c395d3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; followed by a dash has a different meaning&amp;mdash;it applies the Super modifier to the following character.) Thus,</source>
          <target state="translated">'다음에 대시가 오는 것은 다른 의미를 갖습니다. 다음 문자에 Super 수정자를 적용합니다. 따라서,</target>
        </trans-unit>
        <trans-unit id="4cf2af5099109983e79da0f5e0da269d9e4312f4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; followed by a digit, and &amp;lsquo;</source>
          <target state="translated">'뒤에 숫자가오고'</target>
        </trans-unit>
        <trans-unit id="b9861cd6de235e766911a9aaeaa0ea0e380ee76d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; followed by a digit-string. For the floating-point specifications (&amp;lsquo;</source>
          <target state="translated">'뒤에 숫자 문자열이옵니다. 부동 소수점 사양 ( '</target>
        </trans-unit>
        <trans-unit id="1ea514747282026e0a7688e1271c181f87262988" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; followed by a list beginning with &amp;lsquo;</source>
          <target state="translated">'뒤에'로 시작하는 목록이옵니다.</target>
        </trans-unit>
        <trans-unit id="e0b8bd63c817eed7054b47e3cb897d5228d4d890" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; followed by a list specifying the contents. The first list element must be the record type. The following elements are the record slots.</source>
          <target state="translated">'뒤에 내용을 지정하는 목록이옵니다. 첫 번째 목록 요소는 레코드 유형이어야합니다. 다음 요소는 레코드 슬롯입니다.</target>
        </trans-unit>
        <trans-unit id="0c1e9b580901b9ff44337b3256cb9906a877c4c5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; followed by a list specifying the hash table properties and contents. See &lt;a href=&quot;creating-hash#Creating-Hash&quot;&gt;Creating Hash&lt;/a&gt;. (Hash notation, the initial &amp;lsquo;</source>
          <target state="translated">'뒤에 해시 테이블 속성 및 내용을 지정하는 목록이옵니다. &lt;a href=&quot;creating-hash#Creating-Hash&quot;&gt;해시 만들기를&lt;/a&gt; 참조하십시오 . (해시 표기법, 이니셜 '</target>
        </trans-unit>
        <trans-unit id="3ed59adcb971c42f2a76b4ce556a14b700f94e5a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; followed by a radix indication followed by one or more digits. The radix indications are &amp;lsquo;</source>
          <target state="translated">'뒤에 기수 표시와 하나 이상의 숫자가 이어집니다. 기수 표시는 '</target>
        </trans-unit>
        <trans-unit id="811f2f9c62e859afa231c9f79f89db150ce6304b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; followed by any character matches only that character. However, there are several exceptions: certain sequences starting with &amp;lsquo;</source>
          <target state="translated">'뒤에 오는 모든 문자는 해당 문자와 ​​만 일치합니다. 그러나 몇 가지 예외가 있습니다. '로 시작하는 특정 시퀀스</target>
        </trans-unit>
        <trans-unit id="088c203eb35ca9aadbd9148cf4bf4106f863347e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; followed by the error signaled and any arguments to &lt;code&gt;signal&lt;/code&gt;. For example,</source>
          <target state="translated">'그 뒤에 신호 된 오류 및 &lt;code&gt;signal&lt;/code&gt; 할 인수가 이어집니다 . 예를 들면</target>
        </trans-unit>
        <trans-unit id="b981a61cebc1e081a6c95b0693e28c52860c1273" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; followed by the length. The string constant that follows actually specifies the contents of the bool-vector as a bitmap&amp;mdash;each character in the string contains 8 bits, which specify the next 8 elements of the bool-vector (1 stands for &lt;code&gt;t&lt;/code&gt;, and 0 for &lt;code&gt;nil&lt;/code&gt;). The least significant bits of the character correspond to the lowest indices in the bool-vector.</source>
          <target state="translated">'뒤에 길이가 있습니다. 뒤에 오는 문자열 상수는 실제로 bool-vector의 내용을 비트 맵으로 지정합니다. 문자열의 각 문자는 bool-vector의 다음 8 개 요소를 지정하는 8 비트를 포함합니다 (1은 &lt;code&gt;t&lt;/code&gt; 를 , 0은 &lt;code&gt;nil&lt;/code&gt; 을 나타냄). 문자의 최하위 비트는 bool-vector의 가장 낮은 인덱스에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="fafefae50d27e1f617734532d66d7e932fab07e6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; following the count for an expression says that the expression has returned the same value each time it was evaluated. In other words, it is not yet covered for coverage testing purposes.</source>
          <target state="translated">'표현식에 대한 개수 뒤에는 표현식이 평가 될 때마다 동일한 값을 반환했음을 나타냅니다. 즉, 커버리지 테스트 목적으로는 아직 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1486728da01c2819f9b6ac3a49b5bb7f13382c8e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for 10^3, &amp;lsquo;</source>
          <target state="translated">'10 ^ 3,'</target>
        </trans-unit>
        <trans-unit id="3901fc2ce26fe6333201c45410ebfc9e9bff240a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for 10^6, &amp;lsquo;</source>
          <target state="translated">'10 ^ 6,'</target>
        </trans-unit>
        <trans-unit id="cac864cc22483f5d59a8a19927f5561b988e98fa" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for 10^9, etc., to abbreviate.</source>
          <target state="translated">'10 ^ 9 등으로 축약합니다.</target>
        </trans-unit>
        <trans-unit id="0a5860940c90037a2ed69ee1f0af2ea5bd907f06" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for China Standard Time or for U.S. Central Standard Time. Both elements can change when daylight saving time begins or ends; if the user has specified a time zone that does not use a seasonal time adjustment, then the value is constant through time.</source>
          <target state="translated">'는 중국 표준시 또는 미국 중부 표준시입니다. 두 요소 모두 일광 절약 시간이 시작되거나 종료 될 때 변경 될 수 있습니다. 사용자가 계절별 시간 조정을 사용하지 않는 시간대를 지정한 경우 값은 시간에 따라 일정합니다.</target>
        </trans-unit>
        <trans-unit id="80f38e0f3906303dd24b0b875402610b98c50cb5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for Chinese characters or &amp;lsquo;</source>
          <target state="translated">'중국어 문자 또는'</target>
        </trans-unit>
        <trans-unit id="6e8c1dce9b851d36224021538b5f5fee75a0408b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for Greek characters in the standard category table. You can see the list of all the currently defined categories with</source>
          <target state="translated">'표준 카테고리 테이블의 그리스 문자입니다. 현재 정의 된 모든 범주의 목록을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e041979ac74a06fdb1eaadd94ee81c56d8f2cf4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for IPv4 or &amp;lsquo;</source>
          <target state="translated">'IPv4 또는'</target>
        </trans-unit>
        <trans-unit id="321ef4db2c026856480ec662f82e980d6dc82f3b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for IPv6. Note that on some operating systems, listening on &amp;lsquo;</source>
          <target state="translated">'IPv6의 경우. 일부 운영 체제에서는 '</target>
        </trans-unit>
        <trans-unit id="d646f0f981cc6db3325106373d0d570e045084f7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for a backslash as part of the string, &amp;lsquo;</source>
          <target state="translated">'문자열의 일부인 백 슬래시의 경우'</target>
        </trans-unit>
        <trans-unit id="05e037827ff70125202b76a9a083bc21a50bf1c4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for a newline.</source>
          <target state="translated">'개행.</target>
        </trans-unit>
        <trans-unit id="d35abf5f1a74c960e117e6dc6c3295473cb470dd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for a tab and &amp;lsquo;</source>
          <target state="translated">'탭 및'</target>
        </trans-unit>
        <trans-unit id="53b8d0aa796623a1e8241598e559a57eab24c34d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for all characters belonging to the charset &lt;code&gt;japanese-jisx0208&lt;/code&gt;.</source>
          <target state="translated">'문자 세트 &lt;code&gt;japanese-jisx0208&lt;/code&gt; 에 속하는 모든 문자에 대해 .</target>
        </trans-unit>
        <trans-unit id="35cd8deed70890b3a92a2c467fc4c42106853448" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for binary, &amp;lsquo;</source>
          <target state="translated">'바이너리의 경우'</target>
        </trans-unit>
        <trans-unit id="d80656a68e9a7e551114aba972aaac0859ab3fc6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for both of them).</source>
          <target state="translated">'둘 다).</target>
        </trans-unit>
        <trans-unit id="19ca0d9a992f2a162ea1d3d89c1a1a8ba5b89e47" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for both of them, or &amp;lsquo;</source>
          <target state="translated">'둘 다 또는'</target>
        </trans-unit>
        <trans-unit id="009693825eda04b200da2f91720554f601000505" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for each character in the password. If you want to apply another character to hide the password, let-bind the variable &lt;code&gt;read-hide-char&lt;/code&gt; with that character.</source>
          <target state="translated">'암호의 각 문자에 대해. 다른 문자를 적용하여 암호를 숨기려면 &lt;code&gt;read-hide-char&lt;/code&gt; 변수 를 해당 문자와 바인딩하십시오 .</target>
        </trans-unit>
        <trans-unit id="8840ff155eea7ab40fd21c42ea7509914c5c847e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for each editing level. See &lt;a href=&quot;recursive-editing#Recursive-Editing&quot;&gt;Recursive Editing&lt;/a&gt;.</source>
          <target state="translated">'각 편집 수준에 대해. &lt;a href=&quot;recursive-editing#Recursive-Editing&quot;&gt;재귀 편집을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e98da4a337d562323295d1a4e5e06c1c620b829f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for each recursive editing level (not counting minibuffer levels).</source>
          <target state="translated">'각 재귀 편집 수준 (미니 버퍼 수준은 계산하지 않음).</target>
        </trans-unit>
        <trans-unit id="9cae2135ebed9dbcd12eef399c084d13fed85bd1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for hex, and &amp;lsquo;</source>
          <target state="translated">'16 진수,'</target>
        </trans-unit>
        <trans-unit id="1a8805b2fa97d48da8c1689619862668dc593204" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for microseconds, etc. Any excess digits are discarded, without rounding.</source>
          <target state="translated">'마이크로 초 등의 경우 초과 자릿수는 반올림하지 않고 버립니다.</target>
        </trans-unit>
        <trans-unit id="1edb3d27c2e6e44c86fd1c2da036eab21663a02c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for milliseconds, &amp;lsquo;</source>
          <target state="translated">'밀리 초의 경우'</target>
        </trans-unit>
        <trans-unit id="ded285b327e56736571a899aa2af9702b74c4af5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for modifiers alt, control, hyper, meta, shift and super, just as you would with function keys.</source>
          <target state="translated">'수정 자 alt, control, hyper, meta, shift 및 super의 경우 기능 키를 사용할 때와 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="4182b5058dd7fbe7a229a5e7a0aa8a7bba04f114" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for mouse events and for special system events (see &lt;a href=&quot;misc-events#Misc-Events&quot;&gt;Misc Events&lt;/a&gt;). The event list that the command receives depends on the event. See &lt;a href=&quot;input-events#Input-Events&quot;&gt;Input Events&lt;/a&gt;, which describes the forms of the list for each event in the corresponding subsections.</source>
          <target state="translated">'마우스 이벤트 및 특수 시스템 이벤트 ( &lt;a href=&quot;misc-events#Misc-Events&quot;&gt;기타 이벤트&lt;/a&gt; 참조 ). 명령이 수신하는 이벤트 목록은 이벤트에 따라 다릅니다. 해당 하위 섹션의 각 이벤트에 대한 목록 형식을 설명하는 &lt;a href=&quot;input-events#Input-Events&quot;&gt;입력 이벤트를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="affb635e884a4589b67a1fc2252356a0272271f5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for octal, &amp;lsquo;</source>
          <target state="translated">'8 진수'</target>
        </trans-unit>
        <trans-unit id="55b855790ebed904cd030227cdae00e541884e51" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for open parenthesis, etc. To represent whitespace syntax, use either &amp;lsquo;</source>
          <target state="translated">'여는 괄호 등을 나타냅니다. 공백 구문을 나타내려면'</target>
        </trans-unit>
        <trans-unit id="3ae97f975ff9362176c6a04682d3aa3e286f7f89" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for radix &lt;var&gt;radix&lt;/var&gt;. Thus, &amp;lsquo;</source>
          <target state="translated">'기수 &lt;var&gt;radix&lt;/var&gt; . 따라서 '</target>
        </trans-unit>
        <trans-unit id="94b3860e4730313415af41e4a5c7b4b29de35a41" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for the character</source>
          <target state="translated">'캐릭터</target>
        </trans-unit>
        <trans-unit id="1c8218ac75fcbc53721e8844832eefc248cbad01" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for the host name and &amp;lsquo;</source>
          <target state="translated">'호스트 이름 및'</target>
        </trans-unit>
        <trans-unit id="8bc6e6286c28c56fb3b2df13cf606d6a11c85818" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for the port number. For instance, if you want to first ssh to &amp;lsquo;</source>
          <target state="translated">'포트 번호입니다. 예를 들어, 먼저 ssh를 '</target>
        </trans-unit>
        <trans-unit id="5de8b32e69b7232791cb6d4eb5a68bb6f1d582a5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for the sake of uniqueness. It inserts the directory listing at the end of the buffer &amp;lsquo;</source>
          <target state="translated">'독창성을 위해. 버퍼 '의 끝에 디렉토리 목록을 삽입합니다.</target>
        </trans-unit>
        <trans-unit id="d63480dc6bb71c67a26d0d9f70c13dba57f2c94d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for the user&amp;rsquo;s home directory if the argument names a file in the home directory or one of its subdirectories. If the home directory is a root directory, it is not replaced with &amp;lsquo;</source>
          <target state="translated">'인수가 홈 디렉토리 또는 하위 디렉토리 중 하나에있는 파일의 이름을 지정하는 경우 사용자의 홈 디렉토리입니다. 홈 디렉토리가 루트 디렉토리 인 경우 '로 대체되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="181dda12681a51970663a81c801f04c54a36cd64" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for whitespace, &amp;lsquo;</source>
          <target state="translated">'공백의 경우'</target>
        </trans-unit>
        <trans-unit id="bb72a19aea5241ef20990a3881e953dbc16a5a9d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; for word constituent, &amp;lsquo;</source>
          <target state="translated">'단어 구성 요소의 경우'</target>
        </trans-unit>
        <trans-unit id="78c5ea124cdbecabbac70cb3c050c81390007fcd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; from the beginning of the whole regular expression. The first subexpression is numbered 1, the second 2, and so on. Only regular expressions can have subexpressions&amp;mdash;after a simple string search, the only information available is about the entire match.</source>
          <target state="translated">'전체 정규 표현식의 시작 부분부터. 첫 번째 하위 표현식은 1, 두 번째 2 등으로 번호가 지정됩니다. 정규 표현식 만 하위 표현식을 가질 수 있습니다. 간단한 문자열 검색 후에 사용 가능한 유일한 정보는 전체 일치 항목에 대한 것입니다.</target>
        </trans-unit>
        <trans-unit id="d8c733ced233ebc0113b22ea5047d592f041c51b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; from the file &lt;var&gt;name&lt;/var&gt;, if any. If &lt;var&gt;name&lt;/var&gt; is a remote file name, the local part of &lt;var&gt;name&lt;/var&gt; is unquoted.</source>
          <target state="translated">'파일 &lt;var&gt;name&lt;/var&gt; (있는 경우)에서. 경우 &lt;var&gt;name&lt;/var&gt; 원격 파일 이름은, 로컬 부분 &lt;var&gt;name&lt;/var&gt; 인용 부호로 둘러싸입니다.</target>
        </trans-unit>
        <trans-unit id="9ba9a9dfee15f9465bcf87f02ebcc2563e86f7b8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; from the menu of alternatives, that specifies the value &lt;code&gt;foo&lt;/code&gt;; but any other value (not &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;foo&lt;/code&gt;) displays as &amp;lsquo;</source>
          <target state="translated">'값을 지정하는 대안 메뉴에서 &lt;code&gt;foo&lt;/code&gt; ; 그러나 다른 값 ( &lt;code&gt;t&lt;/code&gt; , &lt;code&gt;nil&lt;/code&gt; 또는 &lt;code&gt;foo&lt;/code&gt; 아님)은 '</target>
        </trans-unit>
        <trans-unit id="94d0cc601c9b9c5fbc75f786a652d311b324bbe1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; functions also perform a kind of searching. See &lt;a href=&quot;skipping-characters#Skipping-Characters&quot;&gt;Skipping Characters&lt;/a&gt;. To search for changes in character properties, see &lt;a href=&quot;property-search#Property-Search&quot;&gt;Property Search&lt;/a&gt;.</source>
          <target state="translated">'함수도 일종의 검색을 수행합니다. &lt;a href=&quot;skipping-characters#Skipping-Characters&quot;&gt;문자 건너 뛰기를&lt;/a&gt; 참조하십시오 . 캐릭터 속성의 변경 사항을 검색하려면 &lt;a href=&quot;property-search#Property-Search&quot;&gt;속성 검색을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="759eed83f203c73ed8da9860fc1c5e0e315e20b1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; gets an element from an array and &amp;lsquo;</source>
          <target state="translated">'배열에서 요소를 가져오고'</target>
        </trans-unit>
        <trans-unit id="241f64b7c00229861d9fa6be7dd86b923560f23c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; gets events that are lists, so you can look at the data in the lists. See &lt;a href=&quot;input-events#Input-Events&quot;&gt;Input Events&lt;/a&gt;. No I/O.</source>
          <target state="translated">'는 목록 인 이벤트를 가져 오므로 목록의 데이터를 볼 수 있습니다. &lt;a href=&quot;input-events#Input-Events&quot;&gt;입력 이벤트를&lt;/a&gt; 참조하십시오 . I / O가 없습니다.</target>
        </trans-unit>
        <trans-unit id="75cd84a4b517cc2929ced2a8a99f8183186c8a23" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; gives the name to an object, and &amp;lsquo;</source>
          <target state="translated">'는 객체에 이름을 부여하고'</target>
        </trans-unit>
        <trans-unit id="4abf6e9baec4567ee8f3dd1c65afbef436758430" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; grouping can limit the grouping power of &amp;lsquo;</source>
          <target state="translated">'그룹화는'의 그룹화 능력을 제한 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a00b89adc9a936084d8a6b8ab8fc10ef3346c99" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; has a repeating &amp;lsquo;</source>
          <target state="translated">'에 반복되는'가 있습니다.</target>
        </trans-unit>
        <trans-unit id="2ab3233ccc723599017bf80bb6e1d2ca2c6fa2e2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; has been expanded, an absolute file name starts with a &amp;lsquo;</source>
          <target state="translated">'이 확장 된 경우 절대 파일 이름은'로 시작합니다.</target>
        </trans-unit>
        <trans-unit id="bb5d59ab940c1bda7977be493314b22f5efcc3c5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; has only 3 letters, and needs 4 blank spaces as padding. In the second case, the string &lt;code&gt;&quot;specification&quot;&lt;/code&gt; is 13 letters wide but is not truncated.</source>
          <target state="translated">'는 3 글자 만 있으며 패딩으로 4 개의 공백이 필요합니다. 두 번째 경우 문자열 &lt;code&gt;&quot;specification&quot;&lt;/code&gt; 은 13 자 폭이지만 잘리지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1762ee0a19d45a6820c4873b556be4137c275ff7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; have single functions as their values.</source>
          <target state="translated">'값으로 단일 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="7affe7d0f4c0f033844df2552228e7fd4ff94778" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; header otherwise. One or the other &lt;em&gt;must&lt;/em&gt; be present. Here, the version number is 1.3.</source>
          <target state="translated">'헤더. 둘 중 하나가 &lt;em&gt;있어야&lt;/em&gt; 합니다. 여기서 버전 번호는 1.3입니다.</target>
        </trans-unit>
        <trans-unit id="a58029aa61658192d0cdfd63809853776f451a7f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; header should contain at least one standard keyword from the &lt;code&gt;finder-known-keywords&lt;/code&gt; list.</source>
          <target state="translated">'헤더에는 &lt;code&gt;finder-known-keywords&lt;/code&gt; 목록 에서 최소한 하나의 표준 키워드가 포함되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="0e320c35533c66c358c9b86e27a217173c1dfd10" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; header, if it exists, or from the &amp;lsquo;</source>
          <target state="translated">'헤더 (존재하는 경우) 또는'</target>
        </trans-unit>
        <trans-unit id="3d369fc0fdf731ed52fb6959d57c0a0d952df17f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; header, that is used as the package dependencies. In the above example, the package depends on the &amp;lsquo;</source>
          <target state="translated">'헤더, 패키지 종속성으로 사용됩니다. 위의 예에서 패키지는 '</target>
        </trans-unit>
        <trans-unit id="b34bd223f7ffee06e883d4ad26ee72148bd44ab1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; header, you could say something like this:</source>
          <target state="translated">'헤더, 다음과 같이 말할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d3eb7135c81465e42e0e6964178e729a3ea2dbc1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; header. If the header is omitted, the package has no dependencies.</source>
          <target state="translated">' 머리글. 헤더가 생략되면 패키지에 종속성이 없습니다.</target>
        </trans-unit>
        <trans-unit id="0d5b97c7499cdeaa166e55f86ab4a7071db81a94" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; headers are optional, but recommended. The command &lt;code&gt;describe-package&lt;/code&gt; uses these to add links to its output. The &amp;lsquo;</source>
          <target state="translated">'헤더는 선택 사항이지만 권장됩니다. &lt;code&gt;describe-package&lt;/code&gt; 명령 은이를 사용하여 출력에 링크를 추가합니다. '</target>
        </trans-unit>
        <trans-unit id="ee5b8e23e96768b41389a18b696ee6bed3b3f247" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; identifies an additional prefix character for Lisp syntax. These characters are treated as whitespace when they appear between expressions. When they appear within an expression, they are handled according to their usual syntax classes.</source>
          <target state="translated">'는 Lisp 구문에 대한 추가 접두사 문자를 식별합니다. 이러한 문자는 표현식 사이에 나타날 때 공백으로 처리됩니다. 표현식 내에 나타날 때 일반적인 구문 클래스에 따라 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="1dd01fd8efeeb1dfa66bcf844b972ca4314d55ad" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; identifies the comment that follows as the documentation string. The &amp;lsquo;</source>
          <target state="translated">'는 문서 문자열로 뒤에 오는 주석을 식별합니다. '</target>
        </trans-unit>
        <trans-unit id="4256c3372e5c57227785d60062bb1a4e2c4e15f0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; if &lt;var&gt;command&lt;/var&gt; has no key bindings.</source>
          <target state="translated">' &lt;var&gt;command&lt;/var&gt; 에 키 바인딩이없는 경우 .</target>
        </trans-unit>
        <trans-unit id="e59317c9f6a520dde792764a342abf7151e8fbdd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; if &lt;var&gt;var&lt;/var&gt; is set but null. Within Emacs, a list of environment variables and their values is kept in the variable &lt;code&gt;process-environment&lt;/code&gt;.</source>
          <target state="translated">' &lt;var&gt;var&lt;/var&gt; 가 설정되었지만 null 인 경우. Emacs 내에서 환경 변수 목록과 그 값은 &lt;code&gt;process-environment&lt;/code&gt; 변수에 보관됩니다 .</target>
        </trans-unit>
        <trans-unit id="6ec1629fd8c7e965080a56a46c805486b76cd446" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; if necessary to make a unique buffer name. It does most of this work by calling &lt;code&gt;set-visited-file-name&lt;/code&gt; (see &lt;a href=&quot;buffer-file-name#Buffer-File-Name&quot;&gt;Buffer File Name&lt;/a&gt;) and &lt;code&gt;save-buffer&lt;/code&gt;.</source>
          <target state="translated">'필요한 경우 고유 한 버퍼 이름을 만듭니다. &lt;code&gt;set-visited-file-name&lt;/code&gt; ( &lt;a href=&quot;buffer-file-name#Buffer-File-Name&quot;&gt;Buffer File Name&lt;/a&gt; 참조 ) 및 &lt;code&gt;save-buffer&lt;/code&gt; 를 호출하여이 작업의 대부분을 수행 합니다 .</target>
        </trans-unit>
        <trans-unit id="79b0b5675df6a50bbeedcfcde2516a9d0cd43e74" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; if the buffer is modified (see &lt;code&gt;buffer-modified-p&lt;/code&gt;);  &amp;lsquo;</source>
          <target state="translated">'버퍼가 수정 된 경우 ( &lt;code&gt;buffer-modified-p&lt;/code&gt; 참조 ) '</target>
        </trans-unit>
        <trans-unit id="59558dcbc38e0e426e0c960512e5d5cdec2cbc2e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; if the buffer is modified, &amp;lsquo;</source>
          <target state="translated">'버퍼가 수정되면'</target>
        </trans-unit>
        <trans-unit id="9b1677e2a907296c716dc0e2c36256e00f8c1d1d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; if the buffer is modified, and &amp;lsquo;</source>
          <target state="translated">'버퍼가 수정 된 경우'</target>
        </trans-unit>
        <trans-unit id="e7c804b269f5f5f125b78d52c1b0369493d9a483" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; if the buffer is not modified, &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; if the buffer is not modified, &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="ae5d1df7f7054f3a6a3f9f6499e29b8c1f8760b3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; if the buffer is read only (see &lt;code&gt;buffer-read-only&lt;/code&gt;);  &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; if the buffer is read only (see &lt;code&gt;buffer-read-only&lt;/code&gt; ); &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="e2d982c59c38a551fb85897fb01120c6a8f69fbf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; if the buffer is read only and modified.</source>
          <target state="translated">&amp;rsquo; if the buffer is read only and modified.</target>
        </trans-unit>
        <trans-unit id="a81693d1f271f71cc189595c7f46680a539aec5f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; if the buffer is read only, and &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; if the buffer is read only, and &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="bf8838899bcb7e9c7ec59dd3765b31422c62089e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; if the limits are exceeded. For instance, a system may not support years before 1970, or years before 1901, or years far in the future. You can convert a time value into a human-readable string using &lt;code&gt;format-time-string&lt;/code&gt;, into a Lisp timestamp using &lt;code&gt;time-convert&lt;/code&gt;, and into other forms using &lt;code&gt;decode-time&lt;/code&gt; and &lt;code&gt;float-time&lt;/code&gt;. These functions are described in the following sections.</source>
          <target state="translated">&amp;rsquo; if the limits are exceeded. For instance, a system may not support years before 1970, or years before 1901, or years far in the future. You can convert a time value into a human-readable string using &lt;code&gt;format-time-string&lt;/code&gt; , into a Lisp timestamp using &lt;code&gt;time-convert&lt;/code&gt; , and into other forms using &lt;code&gt;decode-time&lt;/code&gt; and &lt;code&gt;float-time&lt;/code&gt; . These functions are described in the following sections.</target>
        </trans-unit>
        <trans-unit id="0436e30863c4be505ddf5661cdbee00e637b7884" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; if the top of the buffer is visible on screen; or &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; if the top of the buffer is visible on screen; or &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="106534ed8655eef82955613d5d977f5e46468ea3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in &amp;lsquo;</source>
          <target state="translated">' 에 '</target>
        </trans-unit>
        <trans-unit id="41a34d600cecbce780ae09d2d9d5b238eaaff77e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in &lt;code&gt;delq&lt;/code&gt; says that it uses &lt;code&gt;eq&lt;/code&gt; to compare &lt;var&gt;object&lt;/var&gt; against the elements of the list, like &lt;code&gt;memq&lt;/code&gt; and &lt;code&gt;remq&lt;/code&gt;.</source>
          <target state="translated">&amp;rsquo; in &lt;code&gt;delq&lt;/code&gt; says that it uses &lt;code&gt;eq&lt;/code&gt; to compare &lt;var&gt;object&lt;/var&gt; against the elements of the list, like &lt;code&gt;memq&lt;/code&gt; and &lt;code&gt;remq&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b7b3949f12ecba9c07c2c9835ba455572ebe00f0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in &lt;code&gt;memq&lt;/code&gt; says that it uses &lt;code&gt;eq&lt;/code&gt; to compare &lt;var&gt;object&lt;/var&gt; against the elements of the list. For example:</source>
          <target state="translated">&amp;rsquo; in &lt;code&gt;memq&lt;/code&gt; says that it uses &lt;code&gt;eq&lt;/code&gt; to compare &lt;var&gt;object&lt;/var&gt; against the elements of the list. For example:</target>
        </trans-unit>
        <trans-unit id="dce56f39131f43304d8d4e64e4498be4bb376510" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in &lt;code&gt;remq&lt;/code&gt; says that it uses &lt;code&gt;eq&lt;/code&gt; to compare &lt;var&gt;object&lt;/var&gt; against the elements of &lt;code&gt;list&lt;/code&gt;.</source>
          <target state="translated">&amp;rsquo; in &lt;code&gt;remq&lt;/code&gt; says that it uses &lt;code&gt;eq&lt;/code&gt; to compare &lt;var&gt;object&lt;/var&gt; against the elements of &lt;code&gt;list&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="aa892e13a7a3b394e5bd41c08119b43b35f892bb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in &lt;code&gt;setq&lt;/code&gt; stands for &amp;ldquo;quoted&amp;rdquo;.</source>
          <target state="translated">&amp;rsquo; in &lt;code&gt;setq&lt;/code&gt; stands for &amp;ldquo;quoted&amp;rdquo;.</target>
        </trans-unit>
        <trans-unit id="d482e05a433731e35ea00bf0116eb2815bc43a74" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in &lt;var&gt;relfile&lt;/var&gt;, which may not be what you want. See &lt;a href=&quot;file-name-expansion#File-Name-Expansion&quot;&gt;File Name Expansion&lt;/a&gt;.</source>
          <target state="translated">&amp;rsquo; in &lt;var&gt;relfile&lt;/var&gt; , which may not be what you want. See &lt;a href=&quot;file-name-expansion#File-Name-Expansion&quot;&gt;File Name Expansion&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="be39c9e788e1ad854c6e65a4e58e88089179d38a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in &lt;var&gt;string&lt;/var&gt;, the &lt;code&gt;format&lt;/code&gt; function replaces it with the printed representation of one of the values to be formatted (one of the arguments &lt;var&gt;objects&lt;/var&gt;). For example:</source>
          <target state="translated">&amp;rsquo; in &lt;var&gt;string&lt;/var&gt; , the &lt;code&gt;format&lt;/code&gt; function replaces it with the printed representation of one of the values to be formatted (one of the arguments &lt;var&gt;objects&lt;/var&gt; ). For example:</target>
        </trans-unit>
        <trans-unit id="3120b4ec60cd39291616a064887d45baf06a7676" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in &lt;var&gt;template&lt;/var&gt; are left verbatim in the output, including their text properties, if any.</source>
          <target state="translated">&amp;rsquo; in &lt;var&gt;template&lt;/var&gt; are left verbatim in the output, including their text properties, if any.</target>
        </trans-unit>
        <trans-unit id="8395fb9bd867b010aeca60648a6116fa9c1ac662" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in C mode is &lt;code&gt;&quot;. 23&quot;&lt;/code&gt; (i.e., punctuation, matching character slot unused, second character of a comment-starter, first character of a comment-ender), and the entry for &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; in C mode is &lt;code&gt;&quot;. 23&quot;&lt;/code&gt; (i.e., punctuation, matching character slot unused, second character of a comment-starter, first character of a comment-ender), and the entry for &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="96877e8a95ea66a2f70283e09f73c14a7b332dde" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in C mode, which is a punctuation character, &lt;em&gt;and&lt;/em&gt; the second character of a start-of-comment sequence (&amp;lsquo;</source>
          <target state="translated">&amp;rsquo; in C mode, which is a punctuation character, &lt;em&gt;and&lt;/em&gt; the second character of a start-of-comment sequence (&amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="10b1fc07d718ba1c3cd1323556d76c338815b758" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in C.</source>
          <target state="translated">&amp;rsquo; in C.</target>
        </trans-unit>
        <trans-unit id="54e366fef475e999fa969928eac46cc851cb7bfd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in C. On most terminals, this inherits from &lt;code&gt;font-lock-comment-face&lt;/code&gt;.</source>
          <target state="translated">&amp;rsquo; in C. On most terminals, this inherits from &lt;code&gt;font-lock-comment-face&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cf1e13c280fec7c0035ff972e0ea089c49ef63e7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in Emacs Lisp and &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; in Emacs Lisp and &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="30a218e19a3ac3b9fbca88cf208696c98ca316a9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in Lisp mode, which may be part of a symbol name even though they are not part of English words. In standard C, the only non-word-constituent character that is valid in symbols is underscore (&amp;lsquo;</source>
          <target state="translated">&amp;rsquo; in Lisp mode, which may be part of a symbol name even though they are not part of English words. In standard C, the only non-word-constituent character that is valid in symbols is underscore (&amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="a6b6aaededb5d44e7a8d3f68eddb81943b29e41d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in a backquote construct (see &lt;a href=&quot;backquote#Backquote&quot;&gt;Backquote&lt;/a&gt;).</source>
          <target state="translated">&amp;rsquo; in a backquote construct (see &lt;a href=&quot;backquote#Backquote&quot;&gt;Backquote&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="a5c5c839667f302a312b337c21e02842e11993ac" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in a character alternative, put it at the beginning. To include &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; in a character alternative, put it at the beginning. To include &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="e4a064f9ca258335857d1e76bb92f76686f42dd3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in a header-line aligns with the first text column in the text area. When the window displays line numbers, the text is considered to start where the space used for line-number display ends.</source>
          <target state="translated">&amp;rsquo; in a header-line aligns with the first text column in the text area. When the window displays line numbers, the text is considered to start where the space used for line-number display ends.</target>
        </trans-unit>
        <trans-unit id="63b3af5e98c6ffa3681dc4e53d33267bfb1a4410" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in a local variables section. With that designator, the file will unconditionally be interpreted as unibyte. This can matter when making keybindings to non-</source>
          <target state="translated">&amp;rsquo; in a local variables section. With that designator, the file will unconditionally be interpreted as unibyte. This can matter when making keybindings to non-</target>
        </trans-unit>
        <trans-unit id="000aea18a9f4ec7189ee32179201b4108d4dcb8c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in a regular expression except that &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; in a regular expression except that &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="fdc52ba1b684eff507174903c31b434b386efd69" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in a string constant (even for an</source>
          <target state="translated">&amp;rsquo; in a string constant (even for an</target>
        </trans-unit>
        <trans-unit id="9923585923d132e6364cb87c6ed0c8b7e0fae773" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in a string constant is just like backslash-newline; it does not contribute any character to the string, but it does terminate any preceding hex escape.</source>
          <target state="translated">&amp;rsquo; in a string constant is just like backslash-newline; it does not contribute any character to the string, but it does terminate any preceding hex escape.</target>
        </trans-unit>
        <trans-unit id="781e22f88236cc89d399a0e6a5e40405404dd765" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in a string in which &lt;code&gt;%&lt;/code&gt;-constructs are allowed.</source>
          <target state="translated">&amp;rsquo; in a string in which &lt;code&gt;%&lt;/code&gt; -constructs are allowed.</target>
        </trans-unit>
        <trans-unit id="88cdb29bc95a87d14f7586c2f038419392234437" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in a string, it produces a code in the range of 128 to 255&amp;mdash;the same code that you get if you modify the corresponding keyboard event to put it in the string. Thus, meta events in strings work consistently regardless of how they get into the strings.</source>
          <target state="translated">&amp;rsquo; in a string, it produces a code in the range of 128 to 255&amp;mdash;the same code that you get if you modify the corresponding keyboard event to put it in the string. Thus, meta events in strings work consistently regardless of how they get into the strings.</target>
        </trans-unit>
        <trans-unit id="633c06c24432b0e1d1f8972736b3aaf23b3d249d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in addition to appending a tilde:</source>
          <target state="translated">&amp;rsquo; in addition to appending a tilde:</target>
        </trans-unit>
        <trans-unit id="0fce0e475e4eecf18ed954c1cadb6dc9f0b03e9b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in an environment variable&amp;rsquo;s value could lead to repeated substitution. Therefore, programs that call this function and put the output where it will be passed to this function need to double all &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; in an environment variable&amp;rsquo;s value could lead to repeated substitution. Therefore, programs that call this function and put the output where it will be passed to this function need to double all &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="65b60e5a6d8d5083ccc674d3996a6956b4d197ce" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in between form an expression that matches anything that either &lt;var&gt;a&lt;/var&gt; or &lt;var&gt;b&lt;/var&gt; matches.</source>
          <target state="translated">&amp;rsquo; in between form an expression that matches anything that either &lt;var&gt;a&lt;/var&gt; or &lt;var&gt;b&lt;/var&gt; matches.</target>
        </trans-unit>
        <trans-unit id="a4de30b56b6f51498e43147def4c55566ec5523a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in evaluating an expression indicates an excess of open parentheses (or square brackets). The reader detects this imbalance at the end of the file, but it cannot figure out where the close parenthesis should have been. Likewise, &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; in evaluating an expression indicates an excess of open parentheses (or square brackets). The reader detects this imbalance at the end of the file, but it cannot figure out where the close parenthesis should have been. Likewise, &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="8570aa62a2b423ece43aa13c01252cba5f6d63ac" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in its name). &lt;code&gt;kill-region&lt;/code&gt; puts the newly killed text in a new element at the beginning of the kill ring or adds it to the most recent element. It determines automatically (using &lt;code&gt;last-command&lt;/code&gt;) whether the previous command was a kill command, and if so appends the killed text to the most recent entry.</source>
          <target state="translated">&amp;rsquo; in its name). &lt;code&gt;kill-region&lt;/code&gt; puts the newly killed text in a new element at the beginning of the kill ring or adds it to the most recent element. It determines automatically (using &lt;code&gt;last-command&lt;/code&gt; ) whether the previous command was a kill command, and if so appends the killed text to the most recent entry.</target>
        </trans-unit>
        <trans-unit id="bcb1c1068c57cbae64a0c3fdf1a988c4af1b3100" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in string constants to stand for meta characters, especially in arguments to &lt;code&gt;define-key&lt;/code&gt; and similar functions, and key sequences and sequences of events were always represented as strings.</source>
          <target state="translated">&amp;rsquo; in string constants to stand for meta characters, especially in arguments to &lt;code&gt;define-key&lt;/code&gt; and similar functions, and key sequences and sequences of events were always represented as strings.</target>
        </trans-unit>
        <trans-unit id="9a954e64a6c0cffdbdd4ae3c65e713b9f9adfe1a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in string constants, there are special rules for including certain meta characters in a string. Here are the rules for interpreting a string as a sequence of input characters:</source>
          <target state="translated">&amp;rsquo; in string constants, there are special rules for including certain meta characters in a string. Here are the rules for interpreting a string as a sequence of input characters:</target>
        </trans-unit>
        <trans-unit id="e2c21b82a61031ebbbf3185aac79cfc4e7ed7896" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in that space occupied by various window manager features (docks, taskbars, etc.) may be excluded from the work area. Whether or not such features actually subtract from the work area depends on the platform and environment. Again, if the monitor is not the primary monitor, some of the coordinates might be negative.</source>
          <target state="translated">&amp;rsquo; in that space occupied by various window manager features (docks, taskbars, etc.) may be excluded from the work area. Whether or not such features actually subtract from the work area depends on the platform and environment. Again, if the monitor is not the primary monitor, some of the coordinates might be negative.</target>
        </trans-unit>
        <trans-unit id="9eb500f756053662de9b20453bd565bec9ca27ab" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in that value.</source>
          <target state="translated">&amp;rsquo; in that value.</target>
        </trans-unit>
        <trans-unit id="4d7ed95dc2af6610e884d149eac9c321a14787f6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; in the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="875e6fee9e7416544b87ec0e71c21e45c35e4c81" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the &lt;var&gt;family&lt;/var&gt; field, and the font specification for Chinese GB2312 characters has a wild card &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; in the &lt;var&gt;family&lt;/var&gt; field, and the font specification for Chinese GB2312 characters has a wild card &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="c049a5f401761144d793506a11286c21b240ac88" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the &lt;var&gt;family&lt;/var&gt; field.</source>
          <target state="translated">&amp;rsquo; in the &lt;var&gt;family&lt;/var&gt; field.</target>
        </trans-unit>
        <trans-unit id="1f583a565e54581e92772e796ec1e3303899058c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the &lt;var&gt;family&lt;/var&gt; field. In such a case, &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; in the &lt;var&gt;family&lt;/var&gt; field. In such a case, &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="92e2f67cfc55143c378fceeac767eda593b9a8fd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the Customize interface, that takes effect by writing a &lt;code&gt;custom-set-variables&lt;/code&gt; and/or a &lt;code&gt;custom-set-faces&lt;/code&gt; form into the custom file, to be evaluated the next time Emacs starts.</source>
          <target state="translated">&amp;rsquo; in the Customize interface, that takes effect by writing a &lt;code&gt;custom-set-variables&lt;/code&gt; and/or a &lt;code&gt;custom-set-faces&lt;/code&gt; form into the custom file, to be evaluated the next time Emacs starts.</target>
        </trans-unit>
        <trans-unit id="890670bd8b8fd3511ac171718660ae68f43b304a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the current buffer; then in this example the two substrings are &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; in the current buffer; then in this example the two substrings are &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="6aaaded0659dc4987cfc62546014aedfd3521fa4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the customization buffer and enters the built-in Info reader on &lt;var&gt;info-node&lt;/var&gt;.</source>
          <target state="translated">&amp;rsquo; in the customization buffer and enters the built-in Info reader on &lt;var&gt;info-node&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="24aa140a46f4f8b190ae78f6283e65c992763b30" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the drawing above) is the &lt;em&gt;outer position&lt;/em&gt; of the frame. The outer position of a graphical frame is also referred to as &amp;ldquo;the position&amp;rdquo; of the frame because it usually remains unchanged on its display whenever the frame is resized or its layout is changed.</source>
          <target state="translated">&amp;rsquo; in the drawing above) is the &lt;em&gt;outer position&lt;/em&gt; of the frame. The outer position of a graphical frame is also referred to as &amp;ldquo;the position&amp;rdquo; of the frame because it usually remains unchanged on its display whenever the frame is resized or its layout is changed.</target>
        </trans-unit>
        <trans-unit id="7a9c78fd3c4f8ee5170a3e77857ff850e7c94ad3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the echo area while auto-saving is going on. However, if &lt;var&gt;no-message&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, the message is inhibited.</source>
          <target state="translated">&amp;rsquo; in the echo area while auto-saving is going on. However, if &lt;var&gt;no-message&lt;/var&gt; is non- &lt;code&gt;nil&lt;/code&gt; , the message is inhibited.</target>
        </trans-unit>
        <trans-unit id="779fcc1d08cb136df482480d84404fab1f227168" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the echo area, and leaves the buffer empty.</source>
          <target state="translated">&amp;rsquo; in the echo area, and leaves the buffer empty.</target>
        </trans-unit>
        <trans-unit id="0cadb9230d10e904e9c59b9fa15240b6970ab233" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the echo area, and then the user types</source>
          <target state="translated">&amp;rsquo; in the echo area, and then the user types</target>
        </trans-unit>
        <trans-unit id="20050135fca43c50e92d5a4a603d60392c30f0b1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the echo area.</source>
          <target state="translated">&amp;rsquo; in the echo area.</target>
        </trans-unit>
        <trans-unit id="6f8a0e97bd73e97d68482747c215e7097a17b633" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the echo area. This message is inhibited if &lt;var&gt;visit&lt;/var&gt; is neither &lt;code&gt;t&lt;/code&gt; nor &lt;code&gt;nil&lt;/code&gt; nor a string, or if Emacs is operating in batch mode (see &lt;a href=&quot;batch-mode#Batch-Mode&quot;&gt;Batch Mode&lt;/a&gt;). This feature is useful for programs that use files for internal purposes, files that the user does not need to know about.</source>
          <target state="translated">&amp;rsquo; in the echo area. This message is inhibited if &lt;var&gt;visit&lt;/var&gt; is neither &lt;code&gt;t&lt;/code&gt; nor &lt;code&gt;nil&lt;/code&gt; nor a string, or if Emacs is operating in batch mode (see &lt;a href=&quot;batch-mode#Batch-Mode&quot;&gt;Batch Mode&lt;/a&gt;). This feature is useful for programs that use files for internal purposes, files that the user does not need to know about.</target>
        </trans-unit>
        <trans-unit id="ec6e0dfd97f45989b91af7c060ad8cc76b148143" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the first line. For the second invocation, point is directly after the &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; in the first line. For the second invocation, point is directly after the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="6c3393830908f0af8f8a601ddc5f3460cef27348" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the fourth example is escaped to prevent it from being read as a number. This is not necessary in the sixth example because the rest of the name makes it invalid as a number.</source>
          <target state="translated">&amp;rsquo; in the fourth example is escaped to prevent it from being read as a number. This is not necessary in the sixth example because the rest of the name makes it invalid as a number.</target>
        </trans-unit>
        <trans-unit id="d394b0a95c541c0bf6cc9ca00426ba739ea28ea8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the last name component (minus any version/backup part).</source>
          <target state="translated">&amp;rsquo; in the last name component (minus any version/backup part).</target>
        </trans-unit>
        <trans-unit id="573dbd62c28cd8421d8c6736cd9bfecb9e9aaabd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the menu bar) to assign faces explicitly to text in the buffer.</source>
          <target state="translated">&amp;rsquo; in the menu bar) to assign faces explicitly to text in the buffer.</target>
        </trans-unit>
        <trans-unit id="f8f4119429ab8897e6024ce418e246bf8a3b9711" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the replacement text.</source>
          <target state="translated">&amp;rsquo; in the replacement text.</target>
        </trans-unit>
        <trans-unit id="b95087c7540f674dec674912214aa598e3f0982a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the rightmost column of the window indicates truncation; a &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; in the rightmost column of the window indicates truncation; a &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="69e629e42a15deb89ecd3181145dfc0f61de27dc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the same example.</source>
          <target state="translated">&amp;rsquo; in the same example.</target>
        </trans-unit>
        <trans-unit id="23df226aad9e2159b9baea01f6a8030391de378e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the same way that &lt;code&gt;expand-file-name&lt;/code&gt; does.</source>
          <target state="translated">&amp;rsquo; in the same way that &lt;code&gt;expand-file-name&lt;/code&gt; does.</target>
        </trans-unit>
        <trans-unit id="4525b8ef193e0515ed18873ff6e02ce9778b2321" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the top line of the buffer, followed by the value being returned.</source>
          <target state="translated">&amp;rsquo; in the top line of the buffer, followed by the value being returned.</target>
        </trans-unit>
        <trans-unit id="fa133d21380bf052a80feaae40c1452184cc9cd9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the two last examples is the backup part, not an extension.</source>
          <target state="translated">&amp;rsquo; in the two last examples is the backup part, not an extension.</target>
        </trans-unit>
        <trans-unit id="6b82746a34c52ab40e2e73173473586efe078c01" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the usage part of the documentation string is replaced with the function&amp;rsquo;s name when the various help functions (see &lt;a href=&quot;help-functions#Help-Functions&quot;&gt;Help Functions&lt;/a&gt;) display it.</source>
          <target state="translated">&amp;rsquo; in the usage part of the documentation string is replaced with the function&amp;rsquo;s name when the various help functions (see &lt;a href=&quot;help-functions#Help-Functions&quot;&gt;Help Functions&lt;/a&gt;) display it.</target>
        </trans-unit>
        <trans-unit id="1082fc2aa19dfc05fb05e5d747af24e5f166f9c1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in the word &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; in the word &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="5612419bec63cc46e369a1a1f90e7cba39a4a1e0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in their interactive form. See &lt;a href=&quot;interactive-codes#Interactive-Codes&quot;&gt;Code Characters for interactive&lt;/a&gt;.) Its value controls whether &lt;code&gt;read-file-name&lt;/code&gt; starts by placing the name of the default directory in the minibuffer, plus the initial file name, if any. If the value of this variable is &lt;code&gt;nil&lt;/code&gt;, then &lt;code&gt;read-file-name&lt;/code&gt; does not place any initial input in the minibuffer (unless you specify initial input with the &lt;var&gt;initial&lt;/var&gt; argument). In that case, the default directory is still used for completion of relative file names, but is not displayed.</source>
          <target state="translated">&amp;rsquo; in their interactive form. See &lt;a href=&quot;interactive-codes#Interactive-Codes&quot;&gt;Code Characters for interactive&lt;/a&gt;.) Its value controls whether &lt;code&gt;read-file-name&lt;/code&gt; starts by placing the name of the default directory in the minibuffer, plus the initial file name, if any. If the value of this variable is &lt;code&gt;nil&lt;/code&gt; , then &lt;code&gt;read-file-name&lt;/code&gt; does not place any initial input in the minibuffer (unless you specify initial input with the &lt;var&gt;initial&lt;/var&gt; argument). In that case, the default directory is still used for completion of relative file names, but is not displayed.</target>
        </trans-unit>
        <trans-unit id="68b819b1a9ff341e382541d611e734e023101810" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in their name. By contrast, the functions whose names start with &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; in their name. By contrast, the functions whose names start with &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="2e78b30d4488553192a4145e92e06f213b2e97f2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; in their name. See &lt;a href=&quot;shell-arguments#Shell-Arguments&quot;&gt;Shell Arguments&lt;/a&gt;. Typically it is safer to use &lt;code&gt;call-process&lt;/code&gt; than a subshell. See &lt;a href=&quot;synchronous-processes#Synchronous-Processes&quot;&gt;Synchronous Processes&lt;/a&gt;. And it is safer yet to use builtin Emacs functions; for example, use &lt;code&gt;(rename-file &quot;&lt;var&gt;a&lt;/var&gt;&quot; &quot;&lt;var&gt;b&lt;/var&gt;&quot; t)&lt;/code&gt; instead of invoking &lt;code&gt;mv&lt;/code&gt;. See &lt;a href=&quot;changing-files#Changing-Files&quot;&gt;Changing Files&lt;/a&gt;.</source>
          <target state="translated">&amp;rsquo; in their name. See &lt;a href=&quot;shell-arguments#Shell-Arguments&quot;&gt;Shell Arguments&lt;/a&gt;. Typically it is safer to use &lt;code&gt;call-process&lt;/code&gt; than a subshell. See &lt;a href=&quot;synchronous-processes#Synchronous-Processes&quot;&gt;Synchronous Processes&lt;/a&gt;. And it is safer yet to use builtin Emacs functions; for example, use &lt;code&gt;(rename-file &quot;&lt;var&gt;a&lt;/var&gt;&quot; &quot;&lt;var&gt;b&lt;/var&gt;&quot; t)&lt;/code&gt; instead of invoking &lt;code&gt;mv&lt;/code&gt; . See &lt;a href=&quot;changing-files#Changing-Files&quot;&gt;Changing Files&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="367624ba958ecc1e496e3325f2ef81bdd9077b12" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; indicates a recursive reference to the object at level 0 of the current print operation:</source>
          <target state="translated">&amp;rsquo; indicates a recursive reference to the object at level 0 of the current print operation:</target>
        </trans-unit>
        <trans-unit id="88294f45104cb11a2b93f29f3f82449bdacecf66" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; indicates an excess close parenthesis or missing open parenthesis, but does not say where the missing parenthesis belongs. How, then, to find what to change?</source>
          <target state="translated">&amp;rsquo; indicates an excess close parenthesis or missing open parenthesis, but does not say where the missing parenthesis belongs. How, then, to find what to change?</target>
        </trans-unit>
        <trans-unit id="d736202b8f2b75b4460c680fff30b26a5571488f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; indicates the location of point. (The symbol for point, of course, is not part of the text in the buffer; it indicates the place &lt;em&gt;between&lt;/em&gt; two characters where point is currently located.)</source>
          <target state="translated">&amp;rsquo; indicates the location of point. (The symbol for point, of course, is not part of the text in the buffer; it indicates the place &lt;em&gt;between&lt;/em&gt; two characters where point is currently located.)</target>
        </trans-unit>
        <trans-unit id="24c421060921b8f941dce6836aa30c7664f4011a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; inserts a plus sign before a nonnegative number, so that it always has a sign. A space character as flag inserts a space before a nonnegative number. (Otherwise, nonnegative numbers start with the first digit.) These flags are useful for ensuring that nonnegative and negative numbers use the same number of columns. They are ignored except for &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; inserts a plus sign before a nonnegative number, so that it always has a sign. A space character as flag inserts a space before a nonnegative number. (Otherwise, nonnegative numbers start with the first digit.) These flags are useful for ensuring that nonnegative and negative numbers use the same number of columns. They are ignored except for &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="9b395a7db58c1258511c5db2d975502ef2239245" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; inside of the argument to backquote indicates a value that isn&amp;rsquo;t constant. The Emacs Lisp evaluator evaluates the argument of &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; inside of the argument to backquote indicates a value that isn&amp;rsquo;t constant. The Emacs Lisp evaluator evaluates the argument of &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="8abd10c5b240d14b3bd5a19999e341072b313fb5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; instead of &amp;lsquo;</source>
          <target state="translated">' 대신에 '</target>
        </trans-unit>
        <trans-unit id="23e62232a9d64c14a3585fb36c95dd44a5de08c4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; instead of just &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; instead of just &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="11828cb4eae1753964f547bb6f462463a3f3d411" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; instead of recursively printing an object already being printed. For example, here &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; instead of recursively printing an object already being printed. For example, here &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="b995f785171e05d8995e3b9330e838342bc906d9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; interactive code. See &lt;a href=&quot;interactive-codes#Interactive-Codes&quot;&gt;Interactive Codes&lt;/a&gt;.</source>
          <target state="translated">&amp;rsquo; interactive code. See &lt;a href=&quot;interactive-codes#Interactive-Codes&quot;&gt;Interactive Codes&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b29c2922e274a1bf7cc8be9ddfd1b748426dc69b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; into &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; into &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="87a01f2ca3b92480a893548913dc7d98fb06ca2f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; into the output, &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; into the output, &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="54aef35cad2173f4257f6e80be17e645ad3612db" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; into the output, and &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; into the output, and &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="522cc75da24e9fc36f72fbd6d68222d1bcec1164" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; into the output.</source>
          <target state="translated">&amp;rsquo; into the output.</target>
        </trans-unit>
        <trans-unit id="d498237e7bee8417df15f236f1f36e946e350154" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is &amp;ldquo;smaller&amp;rdquo; than &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; is &amp;ldquo;smaller&amp;rdquo; than &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="c3abfb5164bc6aa4b0dba97ce731128dfcbe740f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; is &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="f9227b981f8759c6d908d6226483bdc01a160f85" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is -1. Therefore, &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; is -1. Therefore, &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="22cb852484a3ed66695238ba951873923061092a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is -2, and the index for &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; is -2, and the index for &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="afafc17f4e8511135316787d9bc6d90b6b415ec9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is -3, the index for &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; is -3, the index for &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="5aed518e8ee5ff66868ca615b458032e89d85c32" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is 0, the index for &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; is 0, the index for &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="d4bc39cde35f2fe72d99798cb119b3dfb16011c2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is 1, and the index for &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; is 1, and the index for &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="9d7bb5c754520f82cfebb07c61b47169a3f8390e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is 111 and &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; is 111 and &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="1d46dcde0c0c367dfc483fbdef9ca01871631aa6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is 2. The index 3&amp;mdash;which is the fourth character in the string&amp;mdash;marks the character position up to which the substring is copied. Thus, &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; is 2. The index 3&amp;mdash;which is the fourth character in the string&amp;mdash;marks the character position up to which the substring is copied. Thus, &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="fee81936e9b4e784f3998fd21bf9035c5c231de5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is &lt;code&gt;&quot;\\\\&quot;&lt;/code&gt;.</source>
          <target state="translated">&amp;rsquo; is &lt;code&gt;&quot;\\\\&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c51e3412d1ac85d8ac2da432e25cfca565f71702" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is &lt;code&gt;(4 . 41)&lt;/code&gt;. 41 is the character code for &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; is &lt;code&gt;(4 . 41)&lt;/code&gt; . 41 is the character code for &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="340e9aea173250d8bbaac8d8950c8d67b37217a0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is a &amp;lsquo;</source>
          <target state="translated">'는'</target>
        </trans-unit>
        <trans-unit id="4003421de780ed5cf94ed14a5bf5a874db903d41" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is a regular expression that matches only &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; is a regular expression that matches only &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="509a63376f144b7a6e92661a781212600bbaac83" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is a regular expression that matches the string &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; is a regular expression that matches the string &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="7828f1964252a0521c88e38fb5aae45d05815d42" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is a symbolic link to the directory &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; is a symbolic link to the directory &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="20aa9ce58b89f15f45a9da4743ba1387fb24a4ac" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is allowed at deeper levels of the list structure also. For example:</source>
          <target state="translated">&amp;rsquo; is allowed at deeper levels of the list structure also. For example:</target>
        </trans-unit>
        <trans-unit id="ea48d3738466fd96ce9a82c87ce5af72c7fde947" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is allowed in &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; is allowed in &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="28157f1210768cf6701a9a08d484ec5bd6ef2a85" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is also considered a match. This applies to regular expressions, too; thus, &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; is also considered a match. This applies to regular expressions, too; thus, &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="70bf3c006e3498f442f4164a8c0736b03ac1310d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is an integer, not a floating-point number.</source>
          <target state="translated">&amp;rsquo; is an integer, not a floating-point number.</target>
        </trans-unit>
        <trans-unit id="ca8c7dd05989a0d8ef4097877e318ce1baa808c4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is automatically considered risky. The variables &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; is automatically considered risky. The variables &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="384b12997849ddd3ef116107c32e44d9791b5c43" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is better style; and although &amp;lsquo;</source>
          <target state="translated">&amp;rsquo; is better style; and although &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="403acf9c457e7e0cc17f003ab2903e884329cc57" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is clearer.</source>
          <target state="translated">&amp;rsquo; is clearer.</target>
        </trans-unit>
        <trans-unit id="fe30c8b7ead8959fa45e2186fd53dfc98a043722" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is concerned.</source>
          <target state="translated">&amp;rsquo; is concerned.</target>
        </trans-unit>
        <trans-unit id="4d0c497cc63611d5b00b4dac15067a50a645008e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is copied from the string &lt;code&gt;&quot;abcdefg&quot;&lt;/code&gt;.</source>
          <target state="translated">&amp;rsquo; is copied from the string &lt;code&gt;&quot;abcdefg&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="24f1863bc3936529f9683e1e25f85e1ae9310969" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is created immediately). Meanwhile, the second process is started, and given the name &amp;lsquo;</source>
          <target state="translated">'가 즉시 생성됨). 한편, 두 번째 프로세스가 시작되고 '</target>
        </trans-unit>
        <trans-unit id="7c1ccc5216dc84830669c3b2d17b1cdeb8788995" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is current.</source>
          <target state="translated">'는 현재입니다.</target>
        </trans-unit>
        <trans-unit id="ac3d70f8d50d9b6eb912afd8db54a938ffe2aaf8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is equivalent to &amp;lsquo;</source>
          <target state="translated">'는'</target>
        </trans-unit>
        <trans-unit id="cdb19e9bf915276245fb627b15038b23fcb9992a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is equivalent to &lt;code&gt;?&amp;agrave;&lt;/code&gt; and denotes the Unicode character U+00E0. To simplify entering multi-line strings, you can replace spaces in the names by non-empty sequences of whitespace (e.g., newlines).</source>
          <target state="translated">'는 &lt;code&gt;?&amp;agrave;&lt;/code&gt; 와 동일 하며 유니 코드 문자 U + 00E0을 나타냅니다. 여러 줄 문자열 입력을 단순화하기 위해 이름의 공백을 비어 있지 않은 공백 시퀀스 (예 : 줄 바꿈)로 바꿀 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c91b4d9cf9922fa27ac0e821e4aaa5dccaf7616b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is excluded.</source>
          <target state="translated">'는 제외됩니다.</target>
        </trans-unit>
        <trans-unit id="673ad73d493b4ae1de178f3d95626e78c764a0df" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is expanded and leading &amp;lsquo;</source>
          <target state="translated">'는 확장되고'</target>
        </trans-unit>
        <trans-unit id="1635b83ddf50e2684993c62531ba1cd247dc2444" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is harmless in modes where a left margin is never used.</source>
          <target state="translated">'왼쪽 여백이 사용되지 않는 모드에서는 무해합니다.</target>
        </trans-unit>
        <trans-unit id="78e70be81437f4427a741141e32f9d92807f040b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is initially empty.</source>
          <target state="translated">'는 처음에는 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="3acd035b095bf19cc37871791ae65b5751b1f038" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is invalid, and so is a string that ends with a single &amp;lsquo;</source>
          <target state="translated">'는 유효하지 않으며'로 끝나는 문자열도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="c078afcb3175cdadeb27ef90d4e61fa02ea5c902" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is less clear than &amp;lsquo;</source>
          <target state="translated">'는'보다 명확하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="11e7f66493115de70de64c528dee537a25618e0e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is lexicographically &amp;ldquo;smaller&amp;rdquo; than &amp;lsquo;</source>
          <target state="translated">'는 사 전적으로'보다 작다 '</target>
        </trans-unit>
        <trans-unit id="dc2b806f54031baf39689ed0fdb1624c237e75d5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is like &amp;lsquo;</source>
          <target state="translated">' 처럼 '</target>
        </trans-unit>
        <trans-unit id="2976bd162925c0c6508f9e52b6d51fadd7087073" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is likewise ignored.</source>
          <target state="translated">'도 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="3a77004409a526f3e97f88af5049ea6a36fa42ec" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is lower case.) No I/O.</source>
          <target state="translated">'는 소문자입니다.) I / O가 없습니다.</target>
        </trans-unit>
        <trans-unit id="3d2f7c65f3f197291568bd8a06bc92d57a325f97" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is matched by three of the alist &lt;small&gt;CAR&lt;/small&gt;s. All of the matches begin with the characters &amp;lsquo;</source>
          <target state="translated">'는 alist &lt;small&gt;CAR&lt;/small&gt; 중 세 개와 일치합니다 . 모든 일치는 문자 '로 시작합니다.</target>
        </trans-unit>
        <trans-unit id="ed1fe997acb6c25303091be10f599559c9e45d4c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is meant for use in character constants; in string constants, just write the space.</source>
          <target state="translated">'는 문자 상수에 사용하기위한 것입니다. 문자열 상수에서 공백을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="1e9bba80763798a209de71c33406ed8a7d7ff3e6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is more explicit.</source>
          <target state="translated">'가 더 명시 적입니다.</target>
        </trans-unit>
        <trans-unit id="ce58dc4440ef3cb2f6299ef60ab067e76c8ec7fe" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is no longer special (except when it starts a character class) but &amp;lsquo;</source>
          <target state="translated">'는 더 이상 특별하지 않지만 (문자 클래스를 시작할 때 제외)'</target>
        </trans-unit>
        <trans-unit id="d1f56972790db062d353f5280c4b34a0f1be3627" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is not a special character, so it is ordinary, and therefore &amp;lsquo;</source>
          <target state="translated">'는 특수 문자가 아니므로 일반이므로'</target>
        </trans-unit>
        <trans-unit id="68d67adf289837793c6ac754d1c95e2a9dcc4193" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is not added.</source>
          <target state="translated">'이 추가되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="400c3166dd89591584668dbbff23a26c47e063cf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is not echoed after Emacs is suspended. But it is read and executed by the shell.</source>
          <target state="translated">'는 Emacs가 일시 중단 된 후 에코되지 않습니다. 그러나 셸에서 읽고 실행합니다.</target>
        </trans-unit>
        <trans-unit id="c6bab50331ccfc798cea5da23c3b8e816c5a3834" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is not special here.</source>
          <target state="translated">'는 여기서 특별하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="35e1e7b5bf62a78fbcdc18ffdb27dc6dfa97b47f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is not special in a character alternative unless it is the first character. The character following the &amp;lsquo;</source>
          <target state="translated">'는 첫 번째 문자가 아닌 한 대체 문자에서 특별하지 않습니다. '뒤에 오는 문자</target>
        </trans-unit>
        <trans-unit id="ccd125a4eae3d8fb215d3df9880605b5cac90126" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is not special inside a character alternative, it can never remove the special meaning of &amp;lsquo;</source>
          <target state="translated">'는 문자 대안 내에서 특별하지 않으며'의 특별한 의미를 제거 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="6e11ba8f1f3d3db27dfee06a53b2061de369d64a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is not used in Emacs Lisp, but it is used in Common Lisp. C also has two string quote characters: double-quote for strings, and apostrophe (&amp;lsquo;</source>
          <target state="translated">'는 Emacs Lisp에서는 사용되지 않지만 Common Lisp에서는 사용됩니다. C에는 또한 두 개의 문자열 인용 문자가 있습니다 : 문자열에 대한 큰 따옴표와 아포스트로피 ( '</target>
        </trans-unit>
        <trans-unit id="d56c4664c80faa71d8e547bbf91f33b00c9f00d6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is often unreadable. Here are some examples:</source>
          <target state="translated">'는 종종 읽을 수 없습니다. 여기 예시들이 있습니다 :</target>
        </trans-unit>
        <trans-unit id="fe2e6244334d6ea28ad9785816295b1804b21c55" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is replaced by &amp;lsquo;</source>
          <target state="translated">'는'로 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="820b4d2a0fa09ab5b9be3ac83016605de5371286" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is replaced with &amp;lsquo;</source>
          <target state="translated">'는'로 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="0de23168336b0d854a9ce59ec29ca35b274f50c0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is required if the function has an unlimited number of arguments.</source>
          <target state="translated">'함수에 무제한의 인수가있는 경우 필수입니다.</target>
        </trans-unit>
        <trans-unit id="fa601f4dda239c8ba0ae662f0b8a4391031c4829" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is special again and a &amp;lsquo;</source>
          <target state="translated">'는 다시 특별하고'</target>
        </trans-unit>
        <trans-unit id="62f0edf75cac5828cd5189b444d2aff43f84d729" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is special and &amp;lsquo;</source>
          <target state="translated">'는 특별하고'</target>
        </trans-unit>
        <trans-unit id="162634062d9897d086922bf0c348d77c91b58ad7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is special if it ends a character alternative (see later). The character &amp;lsquo;</source>
          <target state="translated">'대체 문자로 끝나는 경우 특별합니다 (나중 참조). 캐릭터 '</target>
        </trans-unit>
        <trans-unit id="fc5b65309f24c5c423eca62a2fbab5a5dd75989f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is special inside a character alternative. A &amp;lsquo;</source>
          <target state="translated">'는 문자 대안 내부에서 특별합니다. ㅏ '</target>
        </trans-unit>
        <trans-unit id="9726f58a2bb5d76a5a2f5535ea3673b5ea0fe33d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is special, unless it immediately follows the special &amp;lsquo;</source>
          <target state="translated">'는 특별하다.</target>
        </trans-unit>
        <trans-unit id="d36c3633c48d2a34efe2bdd33512e3b2bb1f34fe" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is stripped in the &lt;var&gt;target&lt;/var&gt; string.</source>
          <target state="translated">'는 &lt;var&gt;target&lt;/var&gt; 문자열 에서 제거됩니다 .</target>
        </trans-unit>
        <trans-unit id="e326a91217033ddbee42978ba9a517c9eb17fddd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is the character</source>
          <target state="translated">'는 문자입니다.</target>
        </trans-unit>
        <trans-unit id="0a7c5cd1edc965030be238b8b00b178a8034ebea" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is the character with code 0.</source>
          <target state="translated">'는 코드가 0 인 문자입니다.</target>
        </trans-unit>
        <trans-unit id="aeea9bc324309416a4c99e0f2aa4b44f2b188365" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is the only URI schema supported right now) or a name in a freedesktop.org-compliant icon theme from &amp;lsquo;</source>
          <target state="translated">'는 현재 지원되는 유일한 URI 스키마) 또는'에서 freedesktop.org 호환 아이콘 테마의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="bb2feefbfc5a9910ebf6d5e0ffc3433ce6f5741b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is the pane label. If Emacs is compiled without X toolkit support, or if a menu is displayed on a text terminal, menu panes are not used; in that case, a &amp;lsquo;</source>
          <target state="translated">'는 창 레이블입니다. Emacs가 X 툴킷 지원없이 컴파일되거나 메뉴가 텍스트 터미널에 표시되면 메뉴 창은 사용되지 않습니다. 이 경우 '</target>
        </trans-unit>
        <trans-unit id="d3b1cea2bacb110c8bc8ecd7512fa7ac32efe0d0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is the prefix to substitute an environment variable value. If the input contains &amp;lsquo;</source>
          <target state="translated">'는 환경 변수 값을 대체하는 접두사입니다. 입력에 '</target>
        </trans-unit>
        <trans-unit id="f6ccf36e110259a6e435bc7978e6e023e90267b6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is the printed representation for an interned symbol whose name is an empty string. Furthermore, &amp;lsquo;</source>
          <target state="translated">'는 이름이 빈 문자열 인 인턴 심볼에 대한 인쇄 된 표현입니다. 또한 '</target>
        </trans-unit>
        <trans-unit id="c8ade1fd4c331ae90bfc52343cd1757de912522f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is the printed representation for an uninterned symbol whose name is &lt;var&gt;foo&lt;/var&gt;. (Normally, the Lisp reader interns all symbols; see &lt;a href=&quot;creating-symbols#Creating-Symbols&quot;&gt;Creating Symbols&lt;/a&gt;.)</source>
          <target state="translated">'는 이름이 &lt;var&gt;foo&lt;/var&gt; 인 비 인터 기호에 대한 인쇄 된 표현입니다 . (일반적으로 Lisp 리더는 모든 기호를 인턴합니다. 기호 &lt;a href=&quot;creating-symbols#Creating-Symbols&quot;&gt;만들기&lt;/a&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="1dce214ab935a6830c957397896ba237de24f480" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is the read syntax for a cons cell whose &lt;small&gt;CAR&lt;/small&gt; is &lt;code&gt;a&lt;/code&gt; and whose &lt;small&gt;CDR&lt;/small&gt; is the number 5.</source>
          <target state="translated">'는 &lt;small&gt;CAR&lt;/small&gt; 이 &lt;code&gt;a&lt;/code&gt; 이고 &lt;small&gt;CDR&lt;/small&gt; 이 5 인 cons 셀에 대한 읽기 구문입니다 .</target>
        </trans-unit>
        <trans-unit id="038644cfaa5082c5fa364bd04d3985485c2b7faf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is the same as &amp;lsquo;</source>
          <target state="translated">' 와 같다 '</target>
        </trans-unit>
        <trans-unit id="1a397343cee3bfb008ec608d273846414790ac94" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is the starting list count:</source>
          <target state="translated">'는 시작 목록 수입니다.</target>
        </trans-unit>
        <trans-unit id="d5cd8a3202ea3c887411631ef500ec8b50f51d20" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is the way to write the open-paren character. Likewise, if the character is &amp;lsquo;</source>
          <target state="translated">'는 괄호를 여는 문자를 쓰는 방법입니다. 마찬가지로 문자가 '</target>
        </trans-unit>
        <trans-unit id="b0979bd6bdd62223dddf46955754eb8fe9ca3eb5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is too short). Both of those begin with the string &amp;lsquo;</source>
          <target state="translated">'이 너무 짧습니다). 둘 다 '문자열'로 시작합니다.</target>
        </trans-unit>
        <trans-unit id="53d81175c31b046b38f7885d4998dbb79fbc198d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is treated as if it were first (in other words, &amp;lsquo;</source>
          <target state="translated">'는 첫 번째 인 것처럼 처리됩니다 (즉,'</target>
        </trans-unit>
        <trans-unit id="58fa3ca9aa94def726e00cd4ff0e36b67483b1a2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is treated specially. If a &amp;lsquo;</source>
          <target state="translated">'는 특별히 취급됩니다. 만약 '</target>
        </trans-unit>
        <trans-unit id="704a0f3c068b5c3a85050dff83aa92bde306cb6d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is undefined and can&amp;rsquo;t match anything. But it can match &amp;lsquo;</source>
          <target state="translated">'는 정의되지 않았으며 어떤 것과도 일치 할 수 없습니다. 하지만 '</target>
        </trans-unit>
        <trans-unit id="6e47eef5e6bc570277d8ee62fa0f58044c94f8c7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is upper case.) No I/O.</source>
          <target state="translated">'는 대문자입니다.) I / O가 없습니다.</target>
        </trans-unit>
        <trans-unit id="91bdfbf6e3875a125cbbff4469a5b86023d44be0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is used to avoid confusing the Emacs motion commands.) The calling convention specified in this way appears in help messages in place of the one derived from the actual arguments of the function.</source>
          <target state="translated">'는 Emacs 모션 명령의 혼동을 피하기 위해 사용됩니다.) 이렇게 지정된 호출 규칙은 함수의 실제 인수에서 파생 된 대신 도움말 메시지에 나타납니다.</target>
        </trans-unit>
        <trans-unit id="d8472adda6ff2888c022896cdc8b521126ba16d7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is used. See &lt;a href=&quot;signaling-errors#Definition-of-signal&quot;&gt;Definition of signal&lt;/a&gt;.</source>
          <target state="translated">' 사용. &lt;a href=&quot;signaling-errors#Definition-of-signal&quot;&gt;신호 정의를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4dc29ef87002bedee6c562b5bb672a803452cd8d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is valid, &amp;lsquo;</source>
          <target state="translated">'은 유효합니다.'</target>
        </trans-unit>
        <trans-unit id="19762136dce095273e2593b20f62d4f63c67dff0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; is written as &amp;lsquo;</source>
          <target state="translated">'는'</target>
        </trans-unit>
        <trans-unit id="d41e1906c39cf7321f4937eee3fa6f85de7777fd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; it may be reformatted, with undesirable results. Instead, use &lt;code&gt;(error &quot;%s&quot;
&lt;var&gt;string&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">'형식이 변경되어 원하지 않는 결과가 발생할 수 있습니다. 대신 &lt;code&gt;(error &quot;%s&quot; &lt;var&gt;string&lt;/var&gt;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0919b1e26b967ff72695ecb3db57c721bfa75172" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; it may be reformatted, with undesirable results. Instead, use &lt;code&gt;(message
&quot;%s&quot; &lt;var&gt;string&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">'형식이 변경되어 원하지 않는 결과가 발생할 수 있습니다. 대신 &lt;code&gt;(message &quot;%s&quot; &lt;var&gt;string&lt;/var&gt;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e6ae20b3327fe4e5b898dd2f6da72c551ea6ba01" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; itself are also copied, but those of the object take priority.</source>
          <target state="translated">'자체도 복사되지만 객체의 것이 우선합니다.</target>
        </trans-unit>
        <trans-unit id="de348be0975f54cd51aa2128c3d28f73b56fdbca" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; itself does not appear in the echo area.</source>
          <target state="translated">'자체는 에코 영역에 나타나지 않습니다.</target>
        </trans-unit>
        <trans-unit id="175912a67450457c4afbb9711c8565c5da711e0c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; labels and &amp;lsquo;</source>
          <target state="translated">'라벨 및'</target>
        </trans-unit>
        <trans-unit id="feb1eb8c6393e8c73095f64490e9be2ae7a57a63" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; left to match, so this try fails. The next alternative is for &amp;lsquo;</source>
          <target state="translated">'남아 있으므로이 시도는 실패합니다. 다음 대안은 '</target>
        </trans-unit>
        <trans-unit id="f60e08a87eb663632e1df3d9999e2e94eb4d16f9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; level is normally the same as level 1. It is used when &lt;code&gt;font-lock-maximum-decoration&lt;/code&gt; has a &lt;code&gt;nil&lt;/code&gt; value. See &lt;a href=&quot;levels-of-font-lock#Levels-of-Font-Lock&quot;&gt;Levels of Font Lock&lt;/a&gt;.</source>
          <target state="translated">'레벨은 일반적으로 레벨 1과 동일합니다. &lt;code&gt;font-lock-maximum-decoration&lt;/code&gt; 이 &lt;code&gt;nil&lt;/code&gt; 값을 가질 때 사용됩니다 . &lt;a href=&quot;levels-of-font-lock#Levels-of-Font-Lock&quot;&gt;글꼴 잠금 수준을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9af53348df52711604fb932fdfa9669adff33030" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; level of fontification, the next symbol level 1 fontification, the next level 2, and so on. The &amp;lsquo;</source>
          <target state="translated">'글꼴 수준, 다음 기호 수준 1 글꼴, 다음 수준 2 등. '</target>
        </trans-unit>
        <trans-unit id="ad8a19c6c8a22a5cce4a4214827648d7b3981847" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; like one of type &amp;lsquo;</source>
          <target state="translated">'같은 유형'</target>
        </trans-unit>
        <trans-unit id="2113b65d4db46fb7e318576b43874765d9c43ba3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; line (using &lt;code&gt;interpreter-mode-alist&lt;/code&gt;), on the text at the beginning of the buffer (using &lt;code&gt;magic-mode-alist&lt;/code&gt;), and finally on the visited file name (using &lt;code&gt;auto-mode-alist&lt;/code&gt;). See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Choosing-Modes.html#Choosing-Modes&quot;&gt;How Major Modes are Chosen&lt;/a&gt; in</source>
          <target state="translated">'줄 ( &lt;code&gt;interpreter-mode-alist&lt;/code&gt; 사용 ), 버퍼 시작 부분의 텍스트 ( &lt;code&gt;magic-mode-alist&lt;/code&gt; 사용 ), 마지막으로 방문한 파일 이름 ( &lt;code&gt;auto-mode-alist&lt;/code&gt; 사용 ). 참조 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Choosing-Modes.html#Choosing-Modes&quot;&gt;어떻게 주요 모드가 선택된입니다&lt;/a&gt; 에</target>
        </trans-unit>
        <trans-unit id="4c150d15183d3ee27616803eb8424e0fa3f5737c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; line or at the end of the file. The variable &lt;code&gt;enable-local-variables&lt;/code&gt; controls whether to do so. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/File-Variables.html#File-Variables&quot;&gt;Local Variables in Files&lt;/a&gt; in</source>
          <target state="translated">'줄 또는 파일 끝에. 변수는 &lt;code&gt;enable-local-variables&lt;/code&gt; 이렇게하는 여부를 제어합니다. &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/File-Variables.html#File-Variables&quot;&gt;파일의 로컬 변수를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a915c013be926df2da690c878ccecf9a00409577" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; line or the local variables list are ignored, and the other settings are applied. If &lt;var&gt;handle-mode&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, all the file local variables are set.</source>
          <target state="translated">'줄 또는 지역 변수 목록은 무시되고 다른 설정이 적용됩니다. 경우 &lt;var&gt;handle-mode&lt;/var&gt; 입니다 &lt;code&gt;nil&lt;/code&gt; , 모든 파일을 지역 변수가 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="3b5631d4200df156b834d7dda77e88e1432e8c0e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; line or the local variables list specifies one, and &lt;code&gt;nil&lt;/code&gt; otherwise. It does not set the mode or any other file-local variable. If &lt;var&gt;handle-mode&lt;/var&gt; has any value other than &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;t&lt;/code&gt;, any settings of &amp;lsquo;</source>
          <target state="translated">'줄 또는 지역 변수 목록은 하나를 지정하고 그렇지 않으면 &lt;code&gt;nil&lt;/code&gt; 을 지정합니다 . 모드 또는 기타 파일 로컬 변수를 설정하지 않습니다. 경우 &lt;var&gt;handle-mode&lt;/var&gt; 이외의 값이 &lt;code&gt;nil&lt;/code&gt; 또는 &lt;code&gt;t&lt;/code&gt; 의 설정을 '</target>
        </trans-unit>
        <trans-unit id="54bd1877bfbfc23f5641b80f273522907ec89aee" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; line, as well as the leading comment characters in the commentary itself.)</source>
          <target state="translated">'줄과 주석 자체의 선행 주석 문자.)</target>
        </trans-unit>
        <trans-unit id="178854747c9bbea35d551e55f65ebd1b5c62acdc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; line, on any &amp;lsquo;</source>
          <target state="translated">'줄, 모든'</target>
        </trans-unit>
        <trans-unit id="f884e0629d08d6e32dc896c3303314c964b876b1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; line, or near the end of the file, for any mode tag.</source>
          <target state="translated">'행 또는 파일 끝 근처에 있습니다.</target>
        </trans-unit>
        <trans-unit id="d3c71d3e9e102729c5fc3200b585e93328d92365" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; line. &lt;code&gt;set-auto-mode&lt;/code&gt; does that, also taking &lt;code&gt;enable-local-variables&lt;/code&gt; into account (see &lt;a href=&quot;auto-major-mode#Auto-Major-Mode&quot;&gt;Auto Major Mode&lt;/a&gt;).</source>
          <target state="translated">' 선. &lt;code&gt;set-auto-mode&lt;/code&gt; 는이를 수행하며 &lt;code&gt;enable-local-variables&lt;/code&gt; 도 고려합니다 ( &lt;a href=&quot;auto-major-mode#Auto-Major-Mode&quot;&gt;Auto Major Mode&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="7bff6caee8800706ab06b3524fcade0ecd5d9566" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; line. Its value is an alist with elements of the form &lt;code&gt;(&lt;var&gt;regexp&lt;/var&gt; . &lt;var&gt;mode&lt;/var&gt;)&lt;/code&gt;; this says to use mode &lt;var&gt;mode&lt;/var&gt; if the file specifies an interpreter which matches &lt;code&gt;\\`&lt;var&gt;regexp&lt;/var&gt;\\'&lt;/code&gt;. For example, one of the default elements is &lt;code&gt;(&quot;python[0-9.]*&quot; . python-mode)&lt;/code&gt;.</source>
          <target state="translated">' 선. 그 값은 형태의 요소와 alist이다 &lt;code&gt;(&lt;var&gt;regexp&lt;/var&gt; . &lt;var&gt;mode&lt;/var&gt;)&lt;/code&gt; ; 이것은 파일이 &lt;code&gt;\\`&lt;var&gt;regexp&lt;/var&gt;\\'&lt;/code&gt; &lt;var&gt;regexp&lt;/var&gt; \\ ' 와 일치하는 인터프리터를 지정하면 모드 &lt;var&gt;mode&lt;/var&gt; 를 사용하라는 의미 입니다. 예를 들어 기본 요소 중 하나는 &lt;code&gt;(&quot;python[0-9.]*&quot; . python-mode)&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3a5f1041e487981b5f9b52ce255eb5c43674ec4b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; lines or local variables lists in files being visited. A value of &lt;code&gt;t&lt;/code&gt; means process them unconditionally; &lt;code&gt;nil&lt;/code&gt; means ignore them; anything else means ask the user what to do for each file. The default value is &lt;code&gt;maybe&lt;/code&gt;.</source>
          <target state="translated">'행 또는 방문중인 파일의 지역 변수 목록. &lt;code&gt;t&lt;/code&gt; 값은 무조건 처리 함을 의미합니다. &lt;code&gt;nil&lt;/code&gt; 은 무시한다는 의미입니다. 다른 것은 사용자에게 각 파일에 대해 수행 할 작업을 묻는 것을 의미합니다. 기본값은 &lt;code&gt;maybe&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d1ec4d6e13800d9da30c82c79878494a1a0ff9a9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; literally.</source>
          <target state="translated">'말 그대로.</target>
        </trans-unit>
        <trans-unit id="74f008ef8e139675465fca72d719680179644473" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; literally. There are no characters with special meaning, unlike in string regexps.</source>
          <target state="translated">'말 그대로. 문자열 정규 표현식과 달리 특별한 의미를 가진 문자는 없습니다.</target>
        </trans-unit>
        <trans-unit id="e08b22bed0f02d1fab86b95ea089ae164e77d65f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; local variable in the &amp;lsquo;</source>
          <target state="translated">'의'지역 변수</target>
        </trans-unit>
        <trans-unit id="83ea15dd1533d02a07b921ba06eec4898c23d595" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; local variable near the end of a file, on the &amp;lsquo;</source>
          <target state="translated">'파일 끝 근처의 지역 변수'</target>
        </trans-unit>
        <trans-unit id="fd4733940f675dc6a79b838fd161a249bbd64060" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches &amp;lsquo;</source>
          <target state="translated">'일치'</target>
        </trans-unit>
        <trans-unit id="b264329fc0c545c4c70d0f1f5af6be983d8e3e92" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches a &amp;lsquo;</source>
          <target state="translated">'는'</target>
        </trans-unit>
        <trans-unit id="a8552c44486f126ade2449f530358c7c19e1ec53" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches a string of one &amp;lsquo;</source>
          <target state="translated">'는 하나의 문자열과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="17e7b84599d394be5ee6471f89264954e8628df5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches all characters &lt;em&gt;except&lt;/em&gt; ASCII letters and digits.</source>
          <target state="translated">'는 ASCII 문자 및 숫자를 &lt;em&gt;제외한&lt;/em&gt; 모든 문자와 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="294aa4be8d0ff8c89288ef0e319e2caa0ef19ad8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches all three of these special characters. You cannot use &amp;lsquo;</source>
          <target state="translated">'는이 세 가지 특수 문자 모두와 일치합니다. '를 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c1389f7346bfb348d0bb9c06adffe885e3ec29f7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches all three strings.</source>
          <target state="translated">'는 세 문자열 모두와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="f1f0d1deae19f58febbb1d537f0b52e0162536a7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches any</source>
          <target state="translated">'모든 항목과 일치</target>
        </trans-unit>
        <trans-unit id="0c53d2ade6e13283c99679316175bbf7459a8ccf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches any character, including newline. However, a reversed range should always be from the letter &amp;lsquo;</source>
          <target state="translated">'는 개행을 포함한 모든 문자와 일치합니다. 그러나 반전 된 범위는 항상 문자 '</target>
        </trans-unit>
        <trans-unit id="9ddfdc0fe6523ac99a79fd09a3045cb9e9b9c2bf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches any digit, as well as &amp;lsquo;</source>
          <target state="translated">'는 모든 숫자 및'</target>
        </trans-unit>
        <trans-unit id="2c293d27bb4c97a9bcc525ed1eb05e3efaea1cbe" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches any lower-case</source>
          <target state="translated">'는 모든 소문자와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="96654b579a952f7d53fba4f4bd32b0aedf530bdd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches any newline-free string that is composed of two identical halves. The &amp;lsquo;</source>
          <target state="translated">'는 두 개의 동일한 반쪽으로 구성된 줄 바꿈없는 문자열과 일치합니다. '</target>
        </trans-unit>
        <trans-unit id="ac1a32efde596fdd486ffb81b7783ad10b2b5ba6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches any non-</source>
          <target state="translated">'모든 비</target>
        </trans-unit>
        <trans-unit id="b0b3d00af5b0c16a25908fcf7d2de55c0ba06961" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches any number of &amp;lsquo;</source>
          <target state="translated">'는 모든'</target>
        </trans-unit>
        <trans-unit id="0637debf36412f536b11fc3ca78671e8915b0e9a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches any occurrence of &amp;lsquo;</source>
          <target state="translated">'는 모든'</target>
        </trans-unit>
        <trans-unit id="6eb7fe231bb7871032ddc960c23bf7423a1f7675" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches any string composed of just &amp;lsquo;</source>
          <target state="translated">'는'로 구성된 모든 문자열과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="43c98413b4eee7806522468b3ac46c96c7e1a216" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches at the beginning of the buffer (or string) only if a symbol-constituent character follows.</source>
          <target state="translated">'기호 구성 문자가 뒤에 오는 경우에만 버퍼 (또는 문자열)의 시작 부분에서 일치합니다.</target>
        </trans-unit>
        <trans-unit id="05c3a2fc74da4a597e4793ebff454c4a4eef7688" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches at the beginning of the buffer (or string) only if a word-constituent character follows.</source>
          <target state="translated">'단어 구성 문자가 뒤에 오는 경우에만 버퍼 (또는 문자열)의 시작 부분에서 일치합니다.</target>
        </trans-unit>
        <trans-unit id="c4d641489ad2d1c4292618d0cad2a5025905d98f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches at the beginning of the string or after a newline character.</source>
          <target state="translated">'문자열의 시작 부분이나 개행 문자 뒤에서 일치합니다.</target>
        </trans-unit>
        <trans-unit id="b1477b3a9226dfe1efe3022ff36d644ef3762a13" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches at the beginning or end of the buffer (or string) regardless of what text appears next to it.</source>
          <target state="translated">'옆에 나타나는 텍스트에 관계없이 버퍼 (또는 문자열)의 시작 또는 끝에서 일치합니다.</target>
        </trans-unit>
        <trans-unit id="daec0aa6e852548c762064870cca1e235e071884" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches at the end of the buffer (or string) only if the contents end with a symbol-constituent character.</source>
          <target state="translated">'내용이 기호 구성 문자로 끝나는 경우에만 버퍼 (또는 문자열)의 끝에서 일치합니다.</target>
        </trans-unit>
        <trans-unit id="125b9068b1a8ea37d93c2695fbdd7149d8fae615" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches at the end of the buffer (or string) only if the contents end with a word-constituent character.</source>
          <target state="translated">'내용이 단어 구성 문자로 끝나는 경우에만 버퍼 (또는 문자열)의 끝에서 일치합니다.</target>
        </trans-unit>
        <trans-unit id="07a214ad78b8eac47137312d416eab542c3c39c4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches at the end of the string or before a newline character.</source>
          <target state="translated">'문자열의 끝 또는 개행 문자 앞과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="0ead1717225ccad2a526bcb251b8b3db8eac4cf2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches either &amp;lsquo;</source>
          <target state="translated">'는'</target>
        </trans-unit>
        <trans-unit id="6e141fd122b27cf46985e62468b73e7795dd6404" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches either one &amp;lsquo;</source>
          <target state="translated">'둘 중 하나와 일치'</target>
        </trans-unit>
        <trans-unit id="acaba64446380add50c125375f2756d49a1db29a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches only ASCII letters, even outside the C or POSIX locale.</source>
          <target state="translated">'는 C 또는 POSIX 로케일 외부에서도 ASCII 문자 만 일치합니다.</target>
        </trans-unit>
        <trans-unit id="b8f009c35f1db00d09ad3dbd87f368e865307525" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches string such as &amp;lsquo;</source>
          <target state="translated">'는'와 같은 문자열과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="5b517d364aa6e997733965346f12e796b3972264" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches the empty string, but only at the beginning of a line in the text being matched (or the beginning of the accessible portion of the buffer). Otherwise it fails to match anything. Thus, &amp;lsquo;</source>
          <target state="translated">'는 빈 문자열과 일치하지만 일치하는 텍스트의 줄 시작 부분 (또는 버퍼의 액세스 가능한 부분의 시작 부분)에서만 일치합니다. 그렇지 않으면 아무것도 일치하지 않습니다. 따라서 '</target>
        </trans-unit>
        <trans-unit id="edbf5fb2bde6df6b209cc67502eacbccb247d31d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches the first half, which may be anything, but the &amp;lsquo;</source>
          <target state="translated">'는 무엇이든 될 수있는 전반부와 일치하지만'</target>
        </trans-unit>
        <trans-unit id="1e17b3c51402b2cef4651bd936e4059170abca14" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches the string &amp;lsquo;</source>
          <target state="translated">'문자열'과 일치</target>
        </trans-unit>
        <trans-unit id="6e0dadb6b2846d03cc6bc0a7f4c75c87c53f3321" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches the strings &amp;lsquo;</source>
          <target state="translated">'는 문자열'</target>
        </trans-unit>
        <trans-unit id="5e95d23076884d4c5b49982a66ce30bb3d482492" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; matches the whole string; but the regular expression &amp;lsquo;</source>
          <target state="translated">'전체 문자열과 일치합니다. 하지만 정규 표현식 '</target>
        </trans-unit>
        <trans-unit id="718db940cd7b0671976f68f3a0e662573b99a08f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; may be absent.</source>
          <target state="translated">'가 없을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="86b51b1492ca1577d3b9cdc1913f801542474d5b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; meaning Universal Time.</source>
          <target state="translated">'는 세계시를 의미합니다.</target>
        </trans-unit>
        <trans-unit id="44d64f62f81ef6965ee911104b948f23f5e2a021" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; means &lt;var&gt;c&lt;/var&gt; is the second character of such a sequence.</source>
          <target state="translated">'는 &lt;var&gt;c&lt;/var&gt; 가 그러한 시퀀스의 두 번째 문자 임을 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="34b1ab210febc7526e23a4f3326455b54b986ffa" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; means &lt;var&gt;c&lt;/var&gt; is the start of a two-character comment-end sequence.</source>
          <target state="translated">'는 &lt;var&gt;c&lt;/var&gt; 가 2 자 주석-끝 시퀀스의 시작 임을 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="7acbb8ff84ed65dc805339e6bf730ff98a6e2848" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; means &lt;var&gt;c&lt;/var&gt; is the start of a two-character comment-start sequence.</source>
          <target state="translated">'는 &lt;var&gt;c&lt;/var&gt; 가 2 자 주석 시작 시퀀스의 시작임을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="a7dfd59e1f2ed42738d2fab363719f884a91a44e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; means that &lt;var&gt;c&lt;/var&gt; as a comment delimiter belongs to the alternative &amp;ldquo;b&amp;rdquo; comment style. For a two-character comment starter, this flag is only significant on the second char, and for a 2-character comment ender it is only significant on the first char.</source>
          <target state="translated">' 는 주석 구분 기호 인 &lt;var&gt;c&lt;/var&gt; 가 대체 &quot;b&quot;주석 스타일에 속함을 의미합니다 . 2 자 주석 스타터의 경우이 플래그는 두 번째 문자에서만 중요하고 2 문자 주석 엔더의 경우 첫 번째 문자에서만 중요합니다.</target>
        </trans-unit>
        <trans-unit id="86ab2b219dbbca9b3e02f4641a558ba0434ca241" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; means that &lt;var&gt;c&lt;/var&gt; as a comment delimiter belongs to the alternative &amp;ldquo;c&amp;rdquo; comment style. For a two-character comment delimiter, &amp;lsquo;</source>
          <target state="translated">'한다는 의미 &lt;var&gt;c&lt;/var&gt; 주석 구분 기호로는 대안 &quot;C&quot;주석 스타일에 속한다. 2 자 주석 구분 기호의 경우 '</target>
        </trans-unit>
        <trans-unit id="215e954c8804b0f1297a992964c3e1bd522d2762" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; means that &lt;var&gt;optional-arg&lt;/var&gt; is optional and &amp;lsquo;</source>
          <target state="translated">'는 &lt;var&gt;optional-arg&lt;/var&gt; 가 선택적이며'</target>
        </trans-unit>
        <trans-unit id="d4d236a29df33a2ddffd1a28d970d131eb4255dc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; means that the following character is a control character and &amp;lsquo;</source>
          <target state="translated">'는 다음 문자가 제어 문자임을 의미하고'</target>
        </trans-unit>
        <trans-unit id="4f1afbf791bd451277513b2e3e3d6381dfa2149d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; means that the following character is a meta character. Thus, the string &lt;code&gt;&quot;\M-x&quot;&lt;/code&gt; is read as containing a single</source>
          <target state="translated">'는 다음 문자가 메타 문자임을 의미합니다. 따라서 문자열 &lt;code&gt;&quot;\M-x&quot;&lt;/code&gt; 는 단일</target>
        </trans-unit>
        <trans-unit id="c2d5024e1b645dbf6fa17efa834cb71ebd6a3696" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; means to decrease the size by 40%. The default is 20%.</source>
          <target state="translated">'는 크기를 40 % 줄이는 것을 의미합니다. 기본값은 20 %입니다.</target>
        </trans-unit>
        <trans-unit id="48bfde35c330137d92341faead16d982b4480466" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; means to increase the size by 40%. The default is 20%.</source>
          <target state="translated">'는 크기를 40 % 늘리는 것을 의미합니다. 기본값은 20 %입니다.</target>
        </trans-unit>
        <trans-unit id="fbe2428f1b1960fbdcd62020a852b09469ae49a5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; means to pad this with zeros to 3 positions, &amp;lsquo;</source>
          <target state="translated">'는 이것을 0에서 3 위치까지 채우는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="8ba4edc322a51e49d1ae0fc74bcef52906aa171a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; means to use the current locale&amp;rsquo;s alternative representation of numbers, instead of the ordinary decimal digits. This is allowed with most letters, all the ones that output numbers.</source>
          <target state="translated">'는 일반 십진수 대신 현재 로케일의 대체 숫자 표현을 사용함을 의미합니다. 이것은 대부분의 문자, 숫자를 출력하는 모든 문자에 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="ca84a1083a7441d555e1efe80deba59009304d6e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; menu (under &amp;lsquo;</source>
          <target state="translated">'메뉴 ('</target>
        </trans-unit>
        <trans-unit id="ee9e3ecbcef3d6b6885b1747234e0d35b512b954" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; menu bar item. The main reason to suppress a global menu bar item is to regain space for mode-specific items.</source>
          <target state="translated">'메뉴 모음 항목. 전역 메뉴 표시 줄 항목을 표시하지 않는 주된 이유는 모드 별 항목을위한 공간을 확보하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="347829944a3f24d8e08b958220e651146a155942" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; menu bar item:</source>
          <target state="translated">'메뉴 표시 줄 항목 :</target>
        </trans-unit>
        <trans-unit id="ae6791e92fc256978f6f0f36c748b35aabab6c14" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; menu in the menu bar, and it uses the extended menu item format (see &lt;a href=&quot;extended-menu-items#Extended-Menu-Items&quot;&gt;Extended Menu Items&lt;/a&gt;). First we create the keymap, and give it a name:</source>
          <target state="translated">'메뉴 바의 메뉴, 그리고 확장 된 메뉴 항목 형식을 (참조 사용 &lt;a href=&quot;extended-menu-items#Extended-Menu-Items&quot;&gt;확장 메뉴 항목&lt;/a&gt; ). 먼저 키맵을 만들고 이름을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="b49a75bc61bfa620cf82e0167cae826b87881c0d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; menu item normally appears at the end of the menu bar, following local menu items.</source>
          <target state="translated">'메뉴 항목은 일반적으로 로컬 메뉴 항목 다음의 메뉴 표시 줄 끝에 나타납니다.</target>
        </trans-unit>
        <trans-unit id="78b41d2a04230429de9527fac941033146511cc7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; menu of Shell mode, after the item &lt;code&gt;break&lt;/code&gt;:</source>
          <target state="translated">'쉘 모드의 메뉴, 항목 &lt;code&gt;break&lt;/code&gt; 후 :</target>
        </trans-unit>
        <trans-unit id="f161b19f209158a0672caf11e5d5a7e3104e1d2d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; merely quotes the letter &amp;lsquo;</source>
          <target state="translated">'단순히 문자를 인용합니다.</target>
        </trans-unit>
        <trans-unit id="bb187ab38f8c46760fecdabfabe14322af8e158f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; message is displayed unless &lt;var&gt;nomsg&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;nomsg&lt;/var&gt; 가 &lt;code&gt;nil&lt;/code&gt; 이 아니면 메시지가 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="010ea9c58dd482491fbcdbaabf85cd811851b7ce" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; method. For all other connection methods, runtime tests are performed.</source>
          <target state="translated">'방법. 다른 모든 연결 방법의 경우 런타임 테스트가 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="d350f1a2716f7a8f9b2e5f19ec69f8f40d5cd2a0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; more than once in a single command&amp;rsquo;s interactive specification. If the key sequence that invoked the command has &lt;var&gt;n&lt;/var&gt; events that are lists, the &lt;var&gt;n&lt;/var&gt;th &amp;lsquo;</source>
          <target state="translated">'단일 명령의 대화 형 사양에서 두 번 이상. 명령을 호출 한 키 시퀀스 에 목록 인 &lt;var&gt;n&lt;/var&gt; 개의 이벤트가있는 경우 &lt;var&gt;n&lt;/var&gt; 번째 '</target>
        </trans-unit>
        <trans-unit id="0cb689ebaee5a5b4252a1ee92c3308b32d6d2c45" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; must be a place where an additional form can be evaluated and its value ignored. (If the value of &lt;code&gt;(debug)&lt;/code&gt; isn&amp;rsquo;t ignored, it will alter the execution of the program!) The most common suitable places are inside a &lt;code&gt;progn&lt;/code&gt; or an implicit &lt;code&gt;progn&lt;/code&gt; (see &lt;a href=&quot;sequencing#Sequencing&quot;&gt;Sequencing&lt;/a&gt;).</source>
          <target state="translated">'는 추가 양식을 평가할 수 있고 해당 값을 무시할 수있는 위치 여야합니다. ( &lt;code&gt;(debug)&lt;/code&gt; 값이 무시되지 않으면 프로그램 실행이 변경됩니다!) 가장 일반적인 적절한 위치는 &lt;code&gt;progn&lt;/code&gt; 또는 암시 적 &lt;code&gt;progn&lt;/code&gt; 내부입니다 ( &lt;a href=&quot;sequencing#Sequencing&quot;&gt;Sequencing&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="d03c3f207325be73f1eecd6c52e5512446794f55" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; must be doubled when written in a string in Emacs Lisp.</source>
          <target state="translated">'는 Emacs Lisp에서 문자열로 작성 될 때 두 배가되어야합니다.</target>
        </trans-unit>
        <trans-unit id="01229be91d4fc10e776acdd80860c098341c2bb7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; never uses the prefix argument. Prompt.</source>
          <target state="translated">'접두사 인수를 사용하지 않습니다. 신속한.</target>
        </trans-unit>
        <trans-unit id="4f70b9c7058bd4fd58315f6b441a0708a4bf9218" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; nor flag &amp;lsquo;</source>
          <target state="translated">'플래그'</target>
        </trans-unit>
        <trans-unit id="b26981e2f0b12cfa1593262e15794c6489dfed68" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; normally do not save text for yanking (though they can still be undone); these are deletion functions.</source>
          <target state="translated">'일반적으로 yanking을 위해 텍스트를 저장하지 않습니다 (여전히 취소 할 수 있지만). 이것은 삭제 기능입니다.</target>
        </trans-unit>
        <trans-unit id="b9d849e5afe353f3961ad3e41c33a21421a153b3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; normally pads to two positions.</source>
          <target state="translated">'일반적으로 두 위치에 채 웁니다.</target>
        </trans-unit>
        <trans-unit id="544040af7d71cc17795062d8e1ce670211367a51" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; not.</source>
          <target state="translated">'아닙니다.</target>
        </trans-unit>
        <trans-unit id="dbcb8505b5498ef978265695320ec6dda3077dba" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; not. This lasts until the first unquoted &amp;lsquo;</source>
          <target state="translated">'아닙니다. 이것은 인용되지 않은 첫 번째 '</target>
        </trans-unit>
        <trans-unit id="12de9bd14b449570330f1c1e02ef7fd233b084e7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; notation labels the structure that follows it with the label &amp;lsquo;</source>
          <target state="translated">'표기법은 뒤에 오는 구조에'라는 레이블을 붙입니다.</target>
        </trans-unit>
        <trans-unit id="ffaf2beb40eda6b07d55cffcca1164795755324c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; notation references the previously labeled structure. This notation is used for any shared elements of lists or vectors.</source>
          <target state="translated">'표기법은 이전에 레이블이 지정된 구조를 참조합니다. 이 표기법은 목록 또는 벡터의 공유 요소에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="2d64795183cac722cd88955ee6835ff5abd7458c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; notation.)</source>
          <target state="translated">'표기법.)</target>
        </trans-unit>
        <trans-unit id="5a926f8ae24946423b6898217dcf427d14e0d88e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; occur after case conversion, if any. Therefore, the strings they substitute are never case-converted.</source>
          <target state="translated">'대소 문자 변환 후 발생합니다 (있는 경우). 따라서 대체하는 문자열은 대소 문자가 변환되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="66a9b72c7961d6e41cdd7c9d8fac6eed1e19b0d4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; of &amp;lsquo;</source>
          <target state="translated">' 의 '</target>
        </trans-unit>
        <trans-unit id="095416c1d9816555112d6686a892effbe74654e8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; on GNU and other POSIX-like systems; MS-Windows and MS-DOS recognize both the forward slash and the backslash &amp;lsquo;</source>
          <target state="translated">'GNU 및 기타 POSIX 유사 시스템에서; MS-Windows 및 MS-DOS는 슬래시와 백 슬래시를 모두 인식합니다.</target>
        </trans-unit>
        <trans-unit id="f4b9057e3e330be2a7337b5f850f02f6e35c82ec" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; on GNU/Linux, that supports complex text layout for scripts which need that. The value must be a list of the form</source>
          <target state="translated">'GNU / Linux에서 필요한 스크립트의 복잡한 텍스트 레이아웃을 지원합니다. 값은 양식 목록이어야합니다.</target>
        </trans-unit>
        <trans-unit id="42694ac85c225404d7a9ec6b4bfec2f8da6028bb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; on a comment delimiter character specifies that this kind of comment can be nested. Inside such a comment, only comments of the same style will be recognized. For a two-character comment delimiter, &amp;lsquo;</source>
          <target state="translated">'주석 구분 기호 문자에서 이러한 종류의 주석이 중첩 될 수 있음을 지정합니다. 이러한 주석 안에는 동일한 스타일의 주석 만 인식됩니다. 2 자 주석 구분 기호의 경우 '</target>
        </trans-unit>
        <trans-unit id="32f268519034a92dbfa88dc7a1eb3c296b87292d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; on either character makes it nestable.</source>
          <target state="translated">'두 문자 모두 중첩 가능하게 만듭니다.</target>
        </trans-unit>
        <trans-unit id="bf672452a6d47e5e5cdc2f4acf39618af46d821d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; on either character makes it of style &amp;ldquo;c&amp;rdquo;.</source>
          <target state="translated">'두 문자 모두 &quot;c&quot;스타일로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="61c1b1841845a83d5eac8567f4c796d3035086b9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; on the rightmost column indicates a line that wraps. (The display table can specify alternate characters to use for this; see &lt;a href=&quot;display-tables#Display-Tables&quot;&gt;Display Tables&lt;/a&gt;).</source>
          <target state="translated">가장 오른쪽 열의 '는 줄 바꿈되는 줄을 나타냅니다. (디스플레이 테이블은이를 위해 사용할 대체 문자를 지정할 수 있습니다 . &lt;a href=&quot;display-tables#Display-Tables&quot;&gt;디스플레이 테이블&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="70d0175dbbe8a38bd90d58db87d6226f35ecf565" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; only for a modified read-only buffer. See &lt;a href=&quot;buffer-modification#Buffer-Modification&quot;&gt;Buffer Modification&lt;/a&gt;.</source>
          <target state="translated">'수정 된 읽기 전용 버퍼에만 해당됩니다. &lt;a href=&quot;buffer-modification#Buffer-Modification&quot;&gt;버퍼 수정을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9133b2a75178d009fb279829df6fe382596d0bb4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; option (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Initial-Options.html#Initial-Options&quot;&gt;Initial Options&lt;/a&gt; in</source>
          <target state="translated">'옵션 (참조 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Initial-Options.html#Initial-Options&quot;&gt;초기 옵션&lt;/a&gt; 의를</target>
        </trans-unit>
        <trans-unit id="89ca5e0b8c7096366d5103ea6883183f29175d01" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; option is just passed on to &lt;code&gt;insert-directory-program&lt;/code&gt;, as any other option.</source>
          <target state="translated">'옵션은 다른 옵션과 마찬가지로 &lt;code&gt;insert-directory-program&lt;/code&gt; 에 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="b121cd4ff8c953305afc28dc9d4962972bbbb685" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; option to &lt;code&gt;ls&lt;/code&gt; says to describe a directory itself as a file, rather than showing its contents.)</source>
          <target state="translated">' &lt;code&gt;ls&lt;/code&gt; 옵션 은 디렉토리 자체를 내용을 표시하는 대신 파일로 설명하도록합니다.)</target>
        </trans-unit>
        <trans-unit id="3798b7e6993c4a7e2c48540ad518ce083c518fd1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; option was specified, Emacs looks for the init file in that user&amp;rsquo;s home directory instead.</source>
          <target state="translated">'옵션이 지정되면 Emacs는 대신 해당 사용자의 홈 디렉토리에서 init 파일을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="54d8d5b8e371c1ed89423f41206be0fef01c7f01" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; option was used, then Lisp packages should not load any customization files or user profile.</source>
          <target state="translated">'옵션이 사용 된 경우 Lisp 패키지는 사용자 지정 파일이나 사용자 프로필을로드하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="e7b4dbca616b2ed8cc7b52cc556e65b50922d1f1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; option).</source>
          <target state="translated">'옵션).</target>
        </trans-unit>
        <trans-unit id="5629dd57aa9a6a7ddef712fe4371ffda6cea9154" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; option, &lt;code&gt;insert-directory&lt;/code&gt; treats it specially, for the sake of dired. However, the normally equivalent short &amp;lsquo;</source>
          <target state="translated">'옵션, &lt;code&gt;insert-directory&lt;/code&gt; 는이를 위해 특별히 처리합니다. 그러나 일반적으로 동등한 짧은 '</target>
        </trans-unit>
        <trans-unit id="d75c38e2074e4830f8d154559133298f83048f9a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; option.</source>
          <target state="translated">옵션.</target>
        </trans-unit>
        <trans-unit id="c6a093c07146df74d608747c3cf75985ec62f50d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or</source>
          <target state="translated">'또는</target>
        </trans-unit>
        <trans-unit id="c051371f8937469bcb7c2e99a74ceea414f863fe" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or &amp;lsquo;</source>
          <target state="translated">'또는'</target>
        </trans-unit>
        <trans-unit id="077a92dddff7b2f1f571d9884a039cf2b16f1116" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or a &amp;lsquo;</source>
          <target state="translated">'또는'</target>
        </trans-unit>
        <trans-unit id="04335302a8671fd65edefddab6ed803acfdbcfc6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or a final &amp;lsquo;</source>
          <target state="translated">'또는 마지막'</target>
        </trans-unit>
        <trans-unit id="29dd0197099105c3c4c1966f445b14f264d1858f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or a space character. See &lt;a href=&quot;syntax-class-table#Syntax-Class-Table&quot;&gt;Syntax Class Table&lt;/a&gt;, for a list of syntax codes and the characters that stand for them.</source>
          <target state="translated">'또는 공백 문자. 구문 코드 및이를 나타내는 문자 목록은 &lt;a href=&quot;syntax-class-table#Syntax-Class-Table&quot;&gt;구문 클래스 테이블을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="486480c795cd7bd1531aa6d8b0313fb062590858" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or an integer string like &amp;lsquo;</source>
          <target state="translated">'또는'와 같은 정수 문자열</target>
        </trans-unit>
        <trans-unit id="8f19bb5422524ce5947f4298520b65422af6a1e1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or more at the end of a line.</source>
          <target state="translated">'또는 줄 끝에.</target>
        </trans-unit>
        <trans-unit id="fca6c61bc6bc00460cdbc335374d3be5ab17409e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or one &amp;lsquo;</source>
          <target state="translated">'또는 하나의'</target>
        </trans-unit>
        <trans-unit id="6668e68f2e880c9d326e3c1dc1d53e55c2e7859b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or period. However, the ending character of one range should not be the starting point of another one; for example, &amp;lsquo;</source>
          <target state="translated">'또는 마침표. 그러나 한 범위의 끝 문자가 다른 범위의 시작점이되어서는 안됩니다. 예 : '</target>
        </trans-unit>
        <trans-unit id="216fefe74ac0145ce416f525763d39e28c2d2d79" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or that &amp;lsquo;</source>
          <target state="translated">' 또는 '</target>
        </trans-unit>
        <trans-unit id="70f133a0836fde45b20e98860e7efb8a2086b367" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; otherwise.</source>
          <target state="translated">'그렇지 않으면.</target>
        </trans-unit>
        <trans-unit id="46cf0e824efb593198d3d2f785d219abeb52044b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; otherwise. See &lt;a href=&quot;buffer-modification#Buffer-Modification&quot;&gt;Buffer Modification&lt;/a&gt;.</source>
          <target state="translated">'그렇지 않으면. &lt;a href=&quot;buffer-modification#Buffer-Modification&quot;&gt;버퍼 수정을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b76791b82d6bd10cfe71a0297807810c4f6fe396" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; otherwise. This differs from &amp;lsquo;</source>
          <target state="translated">'그렇지 않으면. 이것은 '와 다릅니다.</target>
        </trans-unit>
        <trans-unit id="652193fe95f48ffd669ff421b5bcacbccbdfdead" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; package, version 1.0 or higher. See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html#Library-Headers&quot;&gt;Library Headers&lt;/a&gt;, for a description of the &amp;lsquo;</source>
          <target state="translated">'패키지, 버전 1.0 이상. '에 대한 설명은 &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html#Library-Headers&quot;&gt;라이브러리 헤더를&lt;/a&gt; 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8b34e15406aa977d406034ff41682e3b170553cd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; pads with blanks, &amp;lsquo;</source>
          <target state="translated">'공백이있는 패드,'</target>
        </trans-unit>
        <trans-unit id="bf731df80c868747aafe439e86a43b5185fc2a82" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; pads with zeros and also puts &amp;lsquo;</source>
          <target state="translated">'0으로 채우고'</target>
        </trans-unit>
        <trans-unit id="d6d07d69825434df6d52c014d63ac5a457fe2519" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; pads with zeros, &amp;lsquo;</source>
          <target state="translated">'0으로 채움,'</target>
        </trans-unit>
        <trans-unit id="b4cba6e5d1e8e0928608effa2ba12ebf8b6edc50" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; pads with zeros, because that is how &amp;lsquo;</source>
          <target state="translated">'0으로 채 웁니다.</target>
        </trans-unit>
        <trans-unit id="60c55b5c91fb20216ff33d8b40ba243abc5f98b2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; parenthesis grouping in &lt;var&gt;record-regexp&lt;/var&gt; is the sort key.</source>
          <target state="translated">' &lt;var&gt;record-regexp&lt;/var&gt; 의 괄호 그룹화 는 정렬 키입니다.</target>
        </trans-unit>
        <trans-unit id="8a2c2f24b1e5b7329e56dfc1f9b2e7fdc9de9b3e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; pattern. For these reasons, both these file extensions are members of the list &lt;code&gt;inhibit-local-variables-regexps&lt;/code&gt;. Add patterns to this list to prevent Emacs searching them for local variables of any kind (not just mode specifiers).</source>
          <target state="translated">'패턴. 이러한 이유로이 두 파일 확장자는 모두 &lt;code&gt;inhibit-local-variables-regexps&lt;/code&gt; 목록의 구성원입니다 . 이 목록에 패턴을 추가하여 Emacs가 (단지 모드 지정자뿐만 아니라) 모든 종류의 지역 변수를 검색하지 못하도록합니다.</target>
        </trans-unit>
        <trans-unit id="bf5d2e5e4c3a3bd0bcf027a317606663fa3e716d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; precedes it.</source>
          <target state="translated">'앞에 있습니다.</target>
        </trans-unit>
        <trans-unit id="555dac212b7e50742fe2a952c64d60bd4156c199" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; prefix follows modifier key prefixes such as &amp;lsquo;</source>
          <target state="translated">'접두사는'와 같은 수정 자 키 접두사 뒤에옵니다.</target>
        </trans-unit>
        <trans-unit id="f24cb7ff797afc905a543ea276971f42fd7adbc9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; prefix follows the modifier key prefixes such as &amp;lsquo;</source>
          <target state="translated">'접두사는'와 같은 수정 자 키 접두사 뒤에옵니다.</target>
        </trans-unit>
        <trans-unit id="4866cbc96ea0e6d9c21fb354b1cc9d7a10dd6c84" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; prepended to the Lisp name, with all dashes (&amp;lsquo;</source>
          <target state="translated">'Lisp 이름 앞에 모든 대시 ('</target>
        </trans-unit>
        <trans-unit id="583ff272b7d9f789e634e3c3c6ba53e1f3aaa169" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; prompts the user with &amp;lsquo;</source>
          <target state="translated">'사용자에게'</target>
        </trans-unit>
        <trans-unit id="ee01bf272a276165afb1530b7bc5a39914739352" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; property (see &lt;a href=&quot;character-properties#Character-Properties&quot;&gt;Character Properties&lt;/a&gt;) indicates they are alphabetic characters.</source>
          <target state="translated">'속성 ( &lt;a href=&quot;character-properties#Character-Properties&quot;&gt;문자 속성&lt;/a&gt; 참조 )은 알파벳 문자임을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="65af1bfe6bbdccc9d21b00819c583907c5184825" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; property (see &lt;a href=&quot;character-properties#Character-Properties&quot;&gt;Character Properties&lt;/a&gt;) indicates they are alphabetic or decimal number characters.</source>
          <target state="translated">'속성 ( &lt;a href=&quot;character-properties#Character-Properties&quot;&gt;문자 속성&lt;/a&gt; 참조 )은 알파벳 또는 10 진수 문자임을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="9578be96f22bde7c099791d5feffbd5d0286d5ff" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; property (see &lt;a href=&quot;character-properties#Character-Properties&quot;&gt;Character Properties&lt;/a&gt;) indicates they are spacing separators.</source>
          <target state="translated">'속성 ( &lt;a href=&quot;character-properties#Character-Properties&quot;&gt;문자 속성&lt;/a&gt; 참조 )은 간격 구분 기호임을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="aab0d89acaf5ad3d62f30e71825d5fefe77ba942" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; property (see &lt;a href=&quot;character-properties#Character-Properties&quot;&gt;Character Properties&lt;/a&gt;).</source>
          <target state="translated">'속성 ( &lt;a href=&quot;character-properties#Character-Properties&quot;&gt;Character 속성&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="3227d3d1e3024f21c3d02dfb3126771139114ba4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; property (see &lt;a href=&quot;overlay-properties#Overlay-Properties&quot;&gt;evaporate property&lt;/a&gt;).</source>
          <target state="translated">'속성 ( &lt;a href=&quot;overlay-properties#Overlay-Properties&quot;&gt;증발 속성&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="8440551b1ce2ea9070450f0e1556aed2e7aa03cc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; property indicates that they are alphabetic or decimal digits.</source>
          <target state="translated">'속성은 영문자 또는 십진수임을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="7213e6f0e55fe9470a91c7799238e0faeb9850f9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; property indicates that they are alphabetic.</source>
          <target state="translated">'속성은 알파벳임을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="5b1bd23c8716aedc52634bf794989e8732ef6dfa" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; property indicates that they are spacing separators.</source>
          <target state="translated">'속성은 간격 구분 기호임을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="09958adfd8af3eaf45bb2204cd25c0cd49ebd43c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; property.</source>
          <target state="translated">' 특성.</target>
        </trans-unit>
        <trans-unit id="22a4877a02dff396a4f394d6c7cbbf5fe4e2c686" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; provides &lt;code&gt;nil&lt;/code&gt; as the argument value. Completion, Existing, Prompt.</source>
          <target state="translated">'는 인수 값으로 &lt;code&gt;nil&lt;/code&gt; 을 제공 합니다. 완료, 기존, 프롬프트.</target>
        </trans-unit>
        <trans-unit id="675b174675a996a3325cff1b6009854b4e597596" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; provides &lt;code&gt;nil&lt;/code&gt; as the argument. No I/O.</source>
          <target state="translated">'는 인수로 &lt;code&gt;nil&lt;/code&gt; 을 제공합니다 . I / O가 없습니다.</target>
        </trans-unit>
        <trans-unit id="cc7e306e95fa301a4044617f1e30f8a666a9fa0b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; provides the &lt;var&gt;n&lt;/var&gt;th such event. Events that are not lists, such as function keys and</source>
          <target state="translated">'는 &lt;var&gt;n&lt;/var&gt; 번째 이벤트를 제공합니다 . 목록이 아닌 이벤트 (예 : 기능 키 및</target>
        </trans-unit>
        <trans-unit id="939a3e012feafd7b061e44dffb23a49156875ab9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; puts &amp;lsquo;</source>
          <target state="translated">'넣어'</target>
        </trans-unit>
        <trans-unit id="e70b56a75170ba739a4982997114487b15016a31" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; quotes &amp;lsquo;</source>
          <target state="translated">'따옴표'</target>
        </trans-unit>
        <trans-unit id="f74638a9490f724fd9478fa8a39d5bca3de30eab" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; quotes special characters, &amp;lsquo;</source>
          <target state="translated">'는 특수 문자를 인용합니다.'</target>
        </trans-unit>
        <trans-unit id="5e247fbdbc23a0ada1c57fcf515c0d7157cc5953" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; quotes.</source>
          <target state="translated">'따옴표.</target>
        </trans-unit>
        <trans-unit id="defa7344a1649b93a1b43c1af97fa03cea56040a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; rather than &amp;lsquo;</source>
          <target state="translated">'보다는'</target>
        </trans-unit>
        <trans-unit id="0e63d19d5c13d20747308773afdd581cbda8ab5b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; rather than the likely-intended four characters.</source>
          <target state="translated">'가 아닌 의도 된 네 문자가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="c199ce06a9106f79e10b3c857e8ba62ecb8782c8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; read a down-event. If no up-event has been discarded, &amp;lsquo;</source>
          <target state="translated">'다운 이벤트를 읽습니다. 삭제 된 up-event가 없으면 '</target>
        </trans-unit>
        <trans-unit id="c8bc9fee9ccde74836c91ff7040568b6f22901ff" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; reader macro (but not when interpreting) is closer to what &lt;code&gt;eval-when-compile&lt;/code&gt; does.</source>
          <target state="translated">'판독기 매크로 (해석시 아님)는 &lt;code&gt;eval-when-compile&lt;/code&gt; 이 수행 하는 작업에 더 가깝습니다 .</target>
        </trans-unit>
        <trans-unit id="b77bea9c0f34fc08da63988fd47f42ffbbf54f12" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; reads &lt;var&gt;integer&lt;/var&gt; in binary, and &amp;lsquo;</source>
          <target state="translated">' 는 이진수로 &lt;var&gt;integer&lt;/var&gt; 를 읽고 '</target>
        </trans-unit>
        <trans-unit id="4a977382ce35c3c33cdc854b9bddc945b825b35c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; reads &lt;var&gt;integer&lt;/var&gt; in radix &lt;var&gt;radix&lt;/var&gt;. Allowed values of &lt;var&gt;radix&lt;/var&gt; run from 2 to 36, and allowed digits are the first &lt;var&gt;radix&lt;/var&gt; characters taken from &amp;lsquo;</source>
          <target state="translated">' &lt;var&gt;integer&lt;/var&gt; 를 기수 &lt;var&gt;radix&lt;/var&gt; 읽습니다 . 허용되는 &lt;var&gt;radix&lt;/var&gt; 값은 2에서 36까지이며 허용되는 숫자는 '에서 가져온 첫 번째 &lt;var&gt;radix&lt;/var&gt; 문자입니다.</target>
        </trans-unit>
        <trans-unit id="189124fc2a4c9be730f7347dbfe98fca6d3ba4bd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; reads a key sequence that ends with a down-event, it also reads and discards the following up-event. You can get access to that up-event with the &amp;lsquo;</source>
          <target state="translated">'는 다운 이벤트로 끝나는 키 시퀀스를 읽고 다음 업 이벤트도 읽고 버립니다. '</target>
        </trans-unit>
        <trans-unit id="f518ec2f9ee04bce047dc1cea910142445c78e78" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; reads as &amp;lsquo;</source>
          <target state="translated">'는'로 읽습니다.</target>
        </trans-unit>
        <trans-unit id="571a2c67a40c68b8fa8e0a799d32129450f39fe3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; references. Don&amp;rsquo;t set this variable with &lt;code&gt;setq&lt;/code&gt;; you should only bind it temporarily to &lt;code&gt;t&lt;/code&gt; with &lt;code&gt;let&lt;/code&gt;. When you do that, you should also bind &lt;code&gt;print-number-table&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">'참조. 이 변수를 &lt;code&gt;setq&lt;/code&gt; 로 설정하지 마십시오 . 당신은 단지 바인드 일시적하는해야 &lt;code&gt;t&lt;/code&gt; 로 &lt;code&gt;let&lt;/code&gt; . 그렇게 할 때 &lt;code&gt;print-number-table&lt;/code&gt; 도 &lt;code&gt;nil&lt;/code&gt; 에 바인딩해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3e421379dbf061654d9083253ed737bd50a79bb9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; replaced with &amp;lsquo;</source>
          <target state="translated">'가'로 대체 됨</target>
        </trans-unit>
        <trans-unit id="581d3d96609cdb849f61aaa8bdd7e71319166e96" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; represent the same integer, and &amp;lsquo;</source>
          <target state="translated">'는 동일한 정수를 나타내고'</target>
        </trans-unit>
        <trans-unit id="41ee2da6c26ebcde2f624144aac95aca73d5c7e0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; represent the same list. Reading will accept any of the alternatives, but printing must choose one of them.</source>
          <target state="translated">'는 동일한 목록을 나타냅니다. 읽기는 모든 대안을 허용하지만 인쇄는 그중 하나를 선택해야합니다.</target>
        </trans-unit>
        <trans-unit id="9106dfbfae17116b90a82bc2ffe1f7b3626dbedd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; represented as a binary number (&amp;lsquo;</source>
          <target state="translated">'이진수 ('</target>
        </trans-unit>
        <trans-unit id="a54412dad20c8eb983993f1770db22c76c6b2f9c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; represented as a hexadecimal number (&amp;lsquo;</source>
          <target state="translated">'16 진수 ('</target>
        </trans-unit>
        <trans-unit id="58f28672130d4604ca4fedb13890488cb1472d2c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; represented as an octal number (&amp;lsquo;</source>
          <target state="translated">'8 진수 ('</target>
        </trans-unit>
        <trans-unit id="f8a45278993bdb03350144cd8a95644067202eba" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; represents</source>
          <target state="translated">'는</target>
        </trans-unit>
        <trans-unit id="2a12c9ddbda29611054438962fb9864cf85a92cf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; represents a tab character; in the name of a symbol, however, &amp;lsquo;</source>
          <target state="translated">'는 탭 문자를 나타냅니다. 그러나 상징의 이름으로 '</target>
        </trans-unit>
        <trans-unit id="594d4097cb43505af332eaeb9b897109bdfb958f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; represents one character, &amp;lsquo;</source>
          <target state="translated">'는 한 문자를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="c0eec8e912e03fd7d1194f437a47e875d21ea955" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; represents that object, so when reading back the object, they will be the same object instead of copies (see &lt;a href=&quot;circular-objects#Circular-Objects&quot;&gt;Circular Objects&lt;/a&gt;).</source>
          <target state="translated">'는 해당 개체를 나타내므로 개체를 다시 읽을 때 복사본이 아닌 동일한 개체가됩니다 ( &lt;a href=&quot;circular-objects#Circular-Objects&quot;&gt;원형 개체&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="e28015aab9920bad92ad95464421d2431c3ffa09" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; represents the shifted-control-o character.</source>
          <target state="translated">'는 shifted-control-o 문자를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="98fa870529761a5797fca87309df19496a6314e7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; represents the space character.) Numerically, the bit values are 2**22 for alt, 2**23 for super and 2**24 for hyper.</source>
          <target state="translated">'는 공백 문자를 나타냅니다.) 숫자 적으로 비트 값은 alt의 경우 2 ** 22, super의 경우 2 ** 23, hyper의 경우 2 ** 24입니다.</target>
        </trans-unit>
        <trans-unit id="f2b9e4bcb93f349f09b6112ed1913d20e28cdf70" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; respectively. See &lt;a href=&quot;low_002dlevel-font#Low_002dLevel-Font&quot;&gt;Low-Level Font&lt;/a&gt;, for a description of these Lisp objects.</source>
          <target state="translated">'각각. 이러한 Lisp 개체에 대한 설명은 &lt;a href=&quot;low_002dlevel-font#Low_002dLevel-Font&quot;&gt;Low-Level Font를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="139bb6039497390060931971fb52f4d5d99e56a9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; resumes from where searching for &amp;lsquo;</source>
          <target state="translated">'는'를 검색하는 위치에서 다시 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="35b99da3d9cfe3ed3226ae2162f70fe8692616b3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; reverses the case of letters.</source>
          <target state="translated">'문자의 대소 문자를 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="738eb4e4969146ffb255e77193e934b252299a48" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; says to load &lt;var&gt;user&lt;/var&gt;&amp;rsquo;s init file instead of yours. See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Entering-Emacs.html#Entering-Emacs&quot;&gt;Entering Emacs&lt;/a&gt; in</source>
          <target state="translated">' 대신 &lt;var&gt;user&lt;/var&gt; 의 init 파일 을로드하라는 메시지가 표시 됩니다. 참조 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Entering-Emacs.html#Entering-Emacs&quot;&gt;이맥스 입력&lt;/a&gt; 에</target>
        </trans-unit>
        <trans-unit id="9987f29e007db9fdc1b7639ff00f84b41c956487" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; section).</source>
          <target state="translated">' 부분).</target>
        </trans-unit>
        <trans-unit id="d034ee4d5f76fa35c04ad0797ce07d721729e100" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; section, this section is used as the long description. (When displaying the description, Emacs omits the &amp;lsquo;</source>
          <target state="translated">'섹션에서이 섹션은 자세한 설명으로 사용됩니다. (설명을 표시 할 때 Emacs는 '</target>
        </trans-unit>
        <trans-unit id="57ce281b19d067a18ad410e01ede9a3b1bbecd64" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; sequences in this documentation string.</source>
          <target state="translated">'이 문서 문자열의 시퀀스.</target>
        </trans-unit>
        <trans-unit id="6001034cee4b297f5ebbd4b211bbfc0fdbba7415" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; set, the resulting style is called the &amp;ldquo;a&amp;rdquo; style.</source>
          <target state="translated">'set, 결과 스타일을 &quot;a&quot;스타일이라고합니다.</target>
        </trans-unit>
        <trans-unit id="67ee16f83b6c06a1206352bba3c7e19bf51f5d81" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; sets the command&amp;rsquo;s first argument to the raw command prefix (see &lt;a href=&quot;prefix-command-arguments#Prefix-Command-Arguments&quot;&gt;Prefix Command Arguments&lt;/a&gt;). &amp;lsquo;</source>
          <target state="translated">'명령의 첫 번째 인수를 원시 명령 접두사로 설정합니다 ( &lt;a href=&quot;prefix-command-arguments#Prefix-Command-Arguments&quot;&gt;Prefix Command Arguments&lt;/a&gt; 참조 ). '</target>
        </trans-unit>
        <trans-unit id="ea2863c19bd454eafef2c5bc946ecf70f86a21e5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; should be avoided, because it matches only &amp;lsquo;</source>
          <target state="translated">'는'만 일치하므로 피해야합니다.</target>
        </trans-unit>
        <trans-unit id="3827805c5d1a506b821841f322eb5008d3c42e9d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; should be avoided.</source>
          <target state="translated">' 피해야한다.</target>
        </trans-unit>
        <trans-unit id="24ba4712baa1131e4bccb1d7757e1a3504265a67" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; shows only the first three characters of the representation for &lt;var&gt;object&lt;/var&gt;. For other specification characters, the effect of precision is what the local library functions of the &lt;code&gt;printf&lt;/code&gt; family produce.</source>
          <target state="translated">'는 &lt;var&gt;object&lt;/var&gt; 표현의 처음 세 문자 만 표시 합니다 . 다른 사양 문자의 경우 정밀도의 효과는 &lt;code&gt;printf&lt;/code&gt; 계열 의 로컬 라이브러리 함수가 생성하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="c076e4e6569b3aec9ea266ec18a7fc1d27b1f442" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; signals an error.</source>
          <target state="translated">'는 오류를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2884f7083c56548b3db993d1b0c9ee925bd712bb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; signature, such as shell and Perl scripts, are also considered executable. Directories are also reported as executable, for compatibility with POSIX. These conventions are also followed by &lt;code&gt;file-attributes&lt;/code&gt; (see &lt;a href=&quot;file-attributes#File-Attributes&quot;&gt;File Attributes&lt;/a&gt;).</source>
          <target state="translated">'쉘 및 Perl 스크립트와 같은 서명도 실행 가능한 것으로 간주됩니다. 디렉토리는 POSIX와의 호환성을 위해 실행 파일로도보고됩니다. 이러한 규칙 뒤에는 &lt;code&gt;file-attributes&lt;/code&gt; 도 따라옵니다 ( &lt;a href=&quot;file-attributes#File-Attributes&quot;&gt;파일 속성&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="a2b8a099ac457cff258c6e72d0ee549d2b566f0e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; so as not to include that information.</source>
          <target state="translated">'정보를 포함하지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="8c8fbbd75341e06aed8d5217cd074fab01a897ad" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; so it stands for &amp;lsquo;</source>
          <target state="translated">'그래서'</target>
        </trans-unit>
        <trans-unit id="2c5d75f45cd314d6763c0bc12950592a1ae9ced7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; specification to find the beginning and end of the region. This lets other Lisp programs specify the bounds explicitly as arguments. See &lt;a href=&quot;interactive-codes#Interactive-Codes&quot;&gt;Interactive Codes&lt;/a&gt;.</source>
          <target state="translated">'지정을 사용하여 영역의 시작과 끝을 찾습니다. 이를 통해 다른 Lisp 프로그램은 경계를 명시 적으로 인수로 지정할 수 있습니다. &lt;a href=&quot;interactive-codes#Interactive-Codes&quot;&gt;대화 형 코드를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="185e72d81ab6bd4ea26f5a3134de293461aaa7e4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; specification. This provides the values of point and the mark as arguments to the command in an interactive call, but permits other Lisp programs to specify arguments explicitly. See &lt;a href=&quot;interactive-codes#Interactive-Codes&quot;&gt;Interactive Codes&lt;/a&gt;.</source>
          <target state="translated">' 사양. 이는 대화식 호출에서 명령에 대한 인수로 point 및 mark 값을 제공하지만 다른 Lisp 프로그램이 인수를 명시 적으로 지정할 수 있도록합니다. &lt;a href=&quot;interactive-codes#Interactive-Codes&quot;&gt;대화 형 코드를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6f5b544c09298590202fffaac0179d8938ff9386" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; specifies a minimum width of 7. In the first case, the string inserted in place of &amp;lsquo;</source>
          <target state="translated">'는 최소 너비 7을 지정합니다. 첫 번째 경우'</target>
        </trans-unit>
        <trans-unit id="ca6a05604f0ed32c74f1a98ed8f0366e8f0b91af" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; specifies an alternate form which depends on the format in use. For &amp;lsquo;</source>
          <target state="translated">'는 사용중인 형식에 따라 다른 형식을 지정합니다. '</target>
        </trans-unit>
        <trans-unit id="d14ff4aadb33190a94d29881f65b7d831cdbcf42" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; specifies the number of seconds since the minute; &amp;lsquo;</source>
          <target state="translated">'는 분 이후의 초 수를 지정합니다. '</target>
        </trans-unit>
        <trans-unit id="d8a4d1e6de51592dd8e34402ca4d960cbe1659a9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; specifies the rules used in New York from 1987 through 2006. All systems support the string &amp;lsquo;</source>
          <target state="translated">'는 1987 년부터 2006 년까지 뉴욕에서 사용 된 규칙을 지정합니다. 모든 시스템은'</target>
        </trans-unit>
        <trans-unit id="e699d88171d6267c5b0089f4841a6b51fc558fc6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; specifies the time zone and daylight saving time history for locations near New York City. GNU and most other systems support POSIX-style &lt;code&gt;TZ&lt;/code&gt; strings, e.g., &amp;lsquo;</source>
          <target state="translated">'는 뉴욕시 근처 위치의 시간대 및 일광 절약 시간 기록을 지정합니다. GNU 및 대부분의 다른 시스템은 POSIX 스타일 &lt;code&gt;TZ&lt;/code&gt; 문자열을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="abdf6e560f8267c9de5c98e074ed1a17cd945921" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; specifies using the current locale&amp;rsquo;s alternative version of the date and time. In a Japanese locale, for example, &lt;code&gt;%Ex&lt;/code&gt; might yield a date format based on the Japanese Emperors&amp;rsquo; reigns. &amp;lsquo;</source>
          <target state="translated">'는 현재 로케일의 대체 버전의 날짜 및 시간을 사용하도록 지정합니다. 예를 들어, 일본어 로케일에서 &lt;code&gt;%Ex&lt;/code&gt; 는 일본 황제의 통치를 기반으로하는 날짜 형식을 산출 할 수 있습니다. '</target>
        </trans-unit>
        <trans-unit id="2f01962b8d7bbe4ceafc2ee0619b352f30ef0293" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; specifies which font to use (in this fontset) for one particular character set. Here, &lt;var&gt;charset&lt;/var&gt; is the name of a character set, and &lt;var&gt;font&lt;/var&gt; is the font to use for that character set. You can use this construct any number of times in the specification string.</source>
          <target state="translated">'는 특정 문자 집합에 사용할 글꼴 (이 글꼴 집합에서)을 지정합니다. 여기서 &lt;var&gt;charset&lt;/var&gt; 은 문자 집합의 이름이고 &lt;var&gt;font&lt;/var&gt; 는 해당 문자 집합에 사용할 글꼴입니다. 이 구성은 사양 문자열에서 여러 번 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1af57b36daf9bbab85c1d6aab7801303a450080f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; stands for</source>
          <target state="translated">'는</target>
        </trans-unit>
        <trans-unit id="3f77b91c30a3d55044b432a8c79262b81f7739ab" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; stands for &amp;lsquo;</source>
          <target state="translated">'는'</target>
        </trans-unit>
        <trans-unit id="aea904a13ad436cab74e64ef36423b6bb4333f05" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; stands for a conceptually infinite number of bits that match the leading bit; here, an infinite number of 0 bits. Later examples also use this &amp;lsquo;</source>
          <target state="translated">'는 선행 비트와 일치하는 개념적으로 무한한 비트 수를 나타냅니다. 여기에는 무한한 수의 0 비트가 있습니다. 이후의 예에서도이 '</target>
        </trans-unit>
        <trans-unit id="825661551b2e305f4ffdc7d01bd8311514b87650" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; stands for a double-quote as part of the string, &amp;lsquo;</source>
          <target state="translated">'는 문자열의 일부로 큰 따옴표를 의미합니다.</target>
        </trans-unit>
        <trans-unit id="6f8b26b062bc292a142a487deb1620bd2c1f6161" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; stands for ten to the second power, and that is multiplied by 1.5. Integer computations are exact. Floating-point computations often involve rounding errors, as the numbers have a fixed amount of precision.</source>
          <target state="translated">'는 10의 2 제곱을 나타내며 1.5를 곱합니다. 정수 계산은 정확합니다. 부동 소수점 계산에는 숫자의 정밀도가 고정되어 있으므로 반올림 오류가 종종 수반됩니다.</target>
        </trans-unit>
        <trans-unit id="4c8be83bc7ae968ee470f6f8e9ab11446043043e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; stands for zero or more arguments. Parentheses are used when several arguments are grouped into additional levels of list structure. Here is an example:</source>
          <target state="translated">'는 0 개 이상의 인수를 나타냅니다. 여러 인수가 목록 구조의 추가 수준으로 그룹화 될 때 괄호가 사용됩니다. 다음은 그 예입니다.</target>
        </trans-unit>
        <trans-unit id="da9f88006c6df540dd1a6562f684dfae668efc9c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; starts at the end of the match of &amp;lsquo;</source>
          <target state="translated">'는'의 경기가 끝날 때 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="d6620f72bde4b8b25b567ca2e6ffa29802d75882" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; stores an element using the same notation. Just as certain forms like &lt;code&gt;a[i]&lt;/code&gt; can be lvalues in C, there is a set of forms that can be generalized variables in Lisp.</source>
          <target state="translated">'는 동일한 표기법을 사용하여 요소를 저장합니다. &lt;code&gt;a[i]&lt;/code&gt; 와 같은 특정 형식 이 C에서 lvalue 일 수있는 것처럼 Lisp에서 일반화 변수가 될 수있는 형식 집합이 있습니다.</target>
        </trans-unit>
        <trans-unit id="10616b00dee4482423205affc9cea7e2449a8649" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; strings.</source>
          <target state="translated">'문자열.</target>
        </trans-unit>
        <trans-unit id="c767884f3b3c2e80626a67b9e4ac8c1a8bd274d9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; submenu in the &amp;lsquo;</source>
          <target state="translated">'의'하위 메뉴</target>
        </trans-unit>
        <trans-unit id="7aae75d7a79bc4f5d6c7ee9b67e2d47846ad522e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; substituted with matched groups. Arguments &lt;var&gt;replacement&lt;/var&gt; and optional &lt;var&gt;fixedcase&lt;/var&gt;, &lt;var&gt;literal&lt;/var&gt;, &lt;var&gt;string&lt;/var&gt; and &lt;var&gt;subexp&lt;/var&gt; have the same meaning as for &lt;code&gt;replace-match&lt;/code&gt;.</source>
          <target state="translated">'일치하는 그룹으로 대체되었습니다. 인수 &lt;var&gt;replacement&lt;/var&gt; 및 선택적 &lt;var&gt;fixedcase&lt;/var&gt; , &lt;var&gt;literal&lt;/var&gt; , &lt;var&gt;string&lt;/var&gt; 및 &lt;var&gt;subexp&lt;/var&gt; 는 &lt;code&gt;replace-match&lt;/code&gt; 와 동일한 의미를 갖 습니다 .</target>
        </trans-unit>
        <trans-unit id="e377fa383770537551bd15905f48f76948f4376c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; suffix (possibly extended with a compression suffix); a file whose name is just &lt;var&gt;feature&lt;/var&gt; won&amp;rsquo;t be used. (The variable &lt;code&gt;load-suffixes&lt;/code&gt; specifies the exact required Lisp suffixes.)</source>
          <target state="translated">'접미사 (압축 접미사로 확장 될 수 있음) 이름이 &lt;var&gt;feature&lt;/var&gt; 뿐인 파일은 사용되지 않습니다. (변수 &lt;code&gt;load-suffixes&lt;/code&gt; 는 정확한 필수 Lisp 접미사를 지정합니다.)</target>
        </trans-unit>
        <trans-unit id="5542b28100fb1bd974efbd2103fb7a44549e78cf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; suffix into &amp;lsquo;</source>
          <target state="translated">'접미사에'</target>
        </trans-unit>
        <trans-unit id="52cf1f7aca1ff2cb18e711edc49f8c0a95403130" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; suffix); their values are lists of functions, but these functions are called in a special way (they are passed arguments, or their return values are used). The variables whose names end in &amp;lsquo;</source>
          <target state="translated">'접미사); 해당 값은 함수 목록이지만 이러한 함수는 특별한 방식으로 호출됩니다 (인수가 전달되거나 반환 값이 사용됨). 이름이 '로 끝나는 변수</target>
        </trans-unit>
        <trans-unit id="baf547531142ea77731fd1217c0f1617242cc6aa" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; suffixes.</source>
          <target state="translated">'접미사.</target>
        </trans-unit>
        <trans-unit id="3124057609a582cbce668ec29e871b4886b5276e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; suppresses padding, &amp;lsquo;</source>
          <target state="translated">'는 패딩을 억제합니다.'</target>
        </trans-unit>
        <trans-unit id="855e9c1c70059d951cc7892e4af983c19abfff53" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; switches.</source>
          <target state="translated">'스위치.</target>
        </trans-unit>
        <trans-unit id="4335f7f0e6d447601bb197b80cf04c8b8888422f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; symbol at the left-hand side, you can expand that line by typing</source>
          <target state="translated">'기호를 입력하면 해당 줄을 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f71864dc8d7b4b37b99a868bb8e1cd5beabe2c8e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; syntax (see &lt;a href=&quot;backquote#Backquote&quot;&gt;Backquote&lt;/a&gt;). For example:</source>
          <target state="translated">'구문 ( &lt;a href=&quot;backquote#Backquote&quot;&gt;Backquote&lt;/a&gt; 참조 ). 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="3b2a710c0e29aad75e0fe571dc2015731a81a334" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; syntax to indicate a meta character in a string constant, this sets the 2**7 bit of the character in the string. If the string is used in &lt;code&gt;define-key&lt;/code&gt; or &lt;code&gt;lookup-key&lt;/code&gt;, this numeric code is translated into the equivalent meta character. See &lt;a href=&quot;character-type#Character-Type&quot;&gt;Character Type&lt;/a&gt;.</source>
          <target state="translated">'구문은 문자열 상수에서 메타 문자를 나타 내기 위해 문자열에서 문자의 2 ** 7 비트를 설정합니다. 문자열이 &lt;code&gt;define-key&lt;/code&gt; 또는 &lt;code&gt;lookup-key&lt;/code&gt; 에서 사용되는 경우이 숫자 코드는 동등한 메타 문자로 변환됩니다. &lt;a href=&quot;character-type#Character-Type&quot;&gt;문자 유형을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="20f3c6c6648bb2f7a7e5540e6e6b2aac635dbed3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; syntax, those facilities won&amp;rsquo;t work.</source>
          <target state="translated">'구문, 이러한 기능은 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="be8cd956e8c29618e37ab8bfa10aae893837d975" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; syntax. Which one you use does not affect the meaning of the program, but may guide the understanding of people who read it.</source>
          <target state="translated">'구문. 어떤 것을 사용하더라도 프로그램의 의미에는 영향을 미치지 않지만 읽는 사람들의 이해를 도울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="69b8dd310b55861377ef473df7392627ef5b37a0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; syntax; for control characters in keyboard input, we prefer the &amp;lsquo;</source>
          <target state="translated">'구문; 키보드 입력의 제어 문자의 경우 '</target>
        </trans-unit>
        <trans-unit id="6cebde34e2931b31c5f57d7af4eb126076cc68d3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; tag, that takes precedence, so these functions won&amp;rsquo;t be called.</source>
          <target state="translated">'태그가 우선하므로 이러한 함수가 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="388ef96582d73bb736bc0d52d1b9a2f1f82c8529" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; takes precedence.</source>
          <target state="translated">'가 우선합니다.</target>
        </trans-unit>
        <trans-unit id="3234ffb0227d98aa048b09db21db8ed2aefe72ed" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; tells the caller that the need for reverting was not checked, but that reverting the buffer is fast. It also tells Auto Revert not to print any revert messages, even if &lt;code&gt;auto-revert-verbose&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;. This is important, as getting revert messages every &lt;code&gt;auto-revert-interval&lt;/code&gt; seconds can be very annoying. The information provided by this return value could also be useful if the function is consulted for purposes other than auto-reverting.</source>
          <target state="translated">'는 호출자에게 되돌리기의 필요성이 확인되지 않았지만 버퍼 되돌리기가 빠르다는 것을 알려줍니다. 또한 &lt;code&gt;auto-revert-verbose&lt;/code&gt; 가 &lt;code&gt;nil&lt;/code&gt; 이 아니더라도 되돌리기 메시지를 인쇄하지 않도록 Auto Revert에 지시 합니다. &lt;code&gt;auto-revert-interval&lt;/code&gt; 초) 마다 복귀 메시지를받는 것이 매우 성 가실 수 있으므로 이는 중요 합니다. 이 반환 값이 제공하는 정보는 자동 복귀 이외의 목적으로 함수를 참조하는 경우에도 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5691494359351e39ed1bc769dfe74447927acd73" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; that both enters and leaves math mode.</source>
          <target state="translated">'수학 모드를 시작하고 종료합니다.</target>
        </trans-unit>
        <trans-unit id="7c5cec56a5b6c687837f17a0e57312cb0b36ba11" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; that does not end a character class. This ends the character alternative and restores the ordinary syntax of regular expressions; an unquoted &amp;lsquo;</source>
          <target state="translated">'문자 클래스를 끝내지 않습니다. 이렇게하면 대체 문자가 종료되고 정규식의 일반 구문이 복원됩니다. 인용되지 않은 '</target>
        </trans-unit>
        <trans-unit id="fe51f828d89f2d247ca20c5d6e2b0fe99b906d20" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; that follows must match the same exact text.</source>
          <target state="translated">'뒤에 오는 정확한 텍스트와 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="837bb1fdb2a24fcc41831348725c360328dbd844" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; that have special meanings. Here is a table of the special &amp;lsquo;</source>
          <target state="translated">'특별한 의미가 있습니다. 여기는 특별 표 '</target>
        </trans-unit>
        <trans-unit id="c011ffe01c008db1b3d7dc11d5fad3dc83ff4c69" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; that means that Edebug knows where the source code for the frame is located. Use</source>
          <target state="translated">'이는 Edebug가 프레임의 소스 코드가있는 위치를 알고 있음을 의미합니다. 사용하다</target>
        </trans-unit>
        <trans-unit id="f399fd594ee66f69a12794262be03a799245ea09" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; that occur in regular expressions close a character alternative and hence are special. However, occasionally a regular expression may try to match a complex pattern of literal &amp;lsquo;</source>
          <target state="translated">'정규식에서 발생하는 문자는 대체 문자를 닫으므로 특별합니다. 그러나 때때로 정규 표현식은 리터럴 '</target>
        </trans-unit>
        <trans-unit id="c2676b494a123f7d6467edf89f6a074a41ab7631" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; that occurs at the beginning of a line.</source>
          <target state="translated">'줄의 시작 부분에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="67cc82810089a3be070e25d1410ab25b938616c7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; that permits the whole expression to match is &amp;lsquo;</source>
          <target state="translated">'전체 표현식이 일치하도록 허용하는'</target>
        </trans-unit>
        <trans-unit id="337e44f09ec175d2367672df8828082114e29cc9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; that specifies the port number directly. For a server, it can also be &lt;code&gt;t&lt;/code&gt;, which means to let the system select an unused port number.</source>
          <target state="translated">'포트 번호를 직접 지정합니다. 서버의 경우 &lt;code&gt;t&lt;/code&gt; 일 수도 있습니다. 즉, 시스템이 사용되지 않는 포트 번호를 선택할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="08c8266e34135bf02587d248d177daa67776570f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; that translates to a port number, or an integer like &amp;lsquo;</source>
          <target state="translated">'포트 번호 또는'와 같은 정수로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="ef6fed6549190b0d965e5cf7e0fced517211eb29" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; through &amp;lsquo;</source>
          <target state="translated">'통해'</target>
        </trans-unit>
        <trans-unit id="1c96ef5db986721c2692b006a74b2645ab6ec4d7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to &amp;lsquo;</source>
          <target state="translated">'에서'</target>
        </trans-unit>
        <trans-unit id="1fbaa1a5cbd7b06a7b60e28d1fdaaf59254290d0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to &lt;var&gt;filename&lt;/var&gt;.</source>
          <target state="translated">' &lt;var&gt;filename&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="de0e73f2fecb5ec00dbb007a2ec1001afbb0f085" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to a directory file name that does not already end in &amp;lsquo;</source>
          <target state="translated">'로 끝나지 않는 디렉토리 파일 이름에'</target>
        </trans-unit>
        <trans-unit id="4bec36c0a01539d8a5d522ca50f75807d6c3923e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to anchor the match. Most often, the paragraph commands do check for a match only at the beginning of a line, which means that &amp;lsquo;</source>
          <target state="translated">'일치를 고정합니다. 대부분의 경우 단락 명령은 행의 시작 부분에서만 일치를 확인합니다. 즉, '</target>
        </trans-unit>
        <trans-unit id="f72731b36931105de36d122a933c076791842b8a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to avoid confusing the Emacs commands for editing Lisp code. You should also add a backslash before Unicode characters which resemble the previously mentioned</source>
          <target state="translated">'Lisp 코드를 편집 할 때 Emacs 명령을 혼동하지 않도록합니다. 또한 앞서 언급 한 유니 코드 문자 앞에 백 슬래시를 추가해야합니다.</target>
        </trans-unit>
        <trans-unit id="40c4b4aef798faaf4f947f07b14993886fb2e25b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to distinguish them from the ordinary help functions.</source>
          <target state="translated">'일반 도움말 기능과 구분합니다.</target>
        </trans-unit>
        <trans-unit id="7eaa456bedf68b61633834ea5ceefa0c4840dc3a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to encourage this. You can also add a backslash before whitespace characters such as space, tab, newline and formfeed. However, it is cleaner to use one of the easily readable escape sequences, such as &amp;lsquo;</source>
          <target state="translated">'장려합니다. 공백, 탭, 줄 바꿈 및 폼 피드와 같은 공백 문자 앞에 백 슬래시를 추가 할 수도 있습니다. 그러나 '와 같이 쉽게 읽을 수있는 이스케이프 시퀀스 중 하나를 사용하는 것이 더 깔끔합니다.</target>
        </trans-unit>
        <trans-unit id="93f39c19a746daa977773d444b10785c672cf535" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to enter the name of an existing buffer, which becomes the second and final argument.</source>
          <target state="translated">'두 번째이자 마지막 인수가되는 기존 버퍼의 이름을 입력합니다.</target>
        </trans-unit>
        <trans-unit id="a6e12e91adde194f55011fdcf2dc72ee6a35c47e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to escape these three characters, since &amp;lsquo;</source>
          <target state="translated">'이 세 문자를 이스케이프하려면'</target>
        </trans-unit>
        <trans-unit id="b651cce6a3b11d6713eb94a727d12bd1305455e3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to get an unused name. See also &lt;a href=&quot;creating-buffers#Creating-Buffers&quot;&gt;Creating Buffers&lt;/a&gt;. Note that the</source>
          <target state="translated">'사용하지 않는 이름을 가져옵니다. &lt;a href=&quot;creating-buffers#Creating-Buffers&quot;&gt;버퍼 생성을&lt;/a&gt; 참고하십시오 . 참고</target>
        </trans-unit>
        <trans-unit id="8125279c0c70dec6fc2b0e478eb7ec098bebf5bb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to get the regular expression &amp;lsquo;</source>
          <target state="translated">'정규 표현식을 얻으려면'</target>
        </trans-unit>
        <trans-unit id="4c1df7f2ef4455bd74521b1af25dddfd066ca67b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to include previous argument values (starting with the first argument) in the prompt. This is done using &lt;code&gt;format-message&lt;/code&gt; (see &lt;a href=&quot;formatting-strings#Formatting-Strings&quot;&gt;Formatting Strings&lt;/a&gt;). For example, here is how you could read the name of an existing buffer followed by a new name to give to that buffer:</source>
          <target state="translated">'프롬프트에 이전 인수 값 (첫 번째 인수로 시작)을 포함합니다. 이는 &lt;code&gt;format-message&lt;/code&gt; 를 사용하여 수행됩니다 ( &lt;a href=&quot;formatting-strings#Formatting-Strings&quot;&gt;문자열 형식화&lt;/a&gt; 참조 ). 예를 들어, 다음은 기존 버퍼의 이름과 그 버퍼에 부여 할 새 이름을 읽는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="4af85a06e77851340c307acd78a79eb01b528a8c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to make it clear that it is not a typo; for example, &amp;lsquo;</source>
          <target state="translated">'오타가 아님을 분명히하기 위해; 예 : '</target>
        </trans-unit>
        <trans-unit id="59fb4405e0f561119860d5e00c181a940f01bf69" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to match only two &amp;lsquo;</source>
          <target state="translated">'두 개만 일치'</target>
        </trans-unit>
        <trans-unit id="e40f63628ea31a783fe25d944b57bf3718fbacb7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to modify aspects of the substitution.</source>
          <target state="translated">'대체 측면을 수정합니다.</target>
        </trans-unit>
        <trans-unit id="6e0eebe6473304691cfb867291815ac3013a8336" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to operate on. Thus, &amp;lsquo;</source>
          <target state="translated">'에서 작동합니다. 따라서 '</target>
        </trans-unit>
        <trans-unit id="c32c3a2723d46d49b1de22357d2f9ace29500719" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to pad with spaces to 3 positions. Plain &amp;lsquo;</source>
          <target state="translated">'를 사용하여 3 자리까지 공백으로 채 웁니다. 일반 '</target>
        </trans-unit>
        <trans-unit id="8598fe93064166e0f6cc3efffb703454ce679443" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to prevent clashes. This will not work correctly if your filesystem truncates the resulting name.</source>
          <target state="translated">'충돌을 방지합니다. 파일 시스템이 결과 이름을 자르면 제대로 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9c41d9b8e20a792f5937641bd2c555083bb51341" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to produce an explicitly numbered group.</source>
          <target state="translated">'명시 적으로 번호가 매겨진 그룹을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="748064e670ffd3fda5cab1334f574838f25880f6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to quote a single &amp;lsquo;</source>
          <target state="translated">'하나를 인용하려면'</target>
        </trans-unit>
        <trans-unit id="47abbf881886d322f2b2e6e009f1ad7add21153a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to quote it: &amp;lsquo;</source>
          <target state="translated">'인용 :'</target>
        </trans-unit>
        <trans-unit id="92532dc29b7a5e551acbaba0808d199c1662ec8e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to refer to the text matched by the corresponding grouping constructs.</source>
          <target state="translated">'는 해당 그룹화 구성과 일치하는 텍스트를 참조합니다.</target>
        </trans-unit>
        <trans-unit id="edb4c75a0470775b9fa6017925232194e232eae1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to saving a non-file buffer is asked to specify the file name to use. The &lt;code&gt;save-buffers-kill-emacs&lt;/code&gt; function passes the value &lt;code&gt;t&lt;/code&gt; for &lt;var&gt;pred&lt;/var&gt;.</source>
          <target state="translated">'파일이 아닌 버퍼를 저장하려면 사용할 파일 이름을 지정하라는 메시지가 표시됩니다. &lt;code&gt;save-buffers-kill-emacs&lt;/code&gt; 기능은 값 전달 &lt;code&gt;t&lt;/code&gt; 을 위한 &lt;var&gt;pred&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="b6ac871afe1ce9ee251485fdc6ba803f72d43e1a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to specify a minimum field width. If the width is less, the field is padded to that width. Purely numeric constructs (&amp;lsquo;</source>
          <target state="translated">'최소 필드 너비를 지정합니다. 너비가 더 작 으면 필드가 해당 너비로 채워집니다. 순수한 숫자 구조 ( '</target>
        </trans-unit>
        <trans-unit id="31461638d6c8c2557f66615f99e8f5796623cfdd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to specify where to put the warning type information, or it can omit the &amp;lsquo;</source>
          <target state="translated">'경고 유형 정보를 넣을 위치를 지정하거나'</target>
        </trans-unit>
        <trans-unit id="f8bfa332b465ff832eb6522c0f3fcc1ac5d58f56" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to the end of &lt;var&gt;filename&lt;/var&gt;.</source>
          <target state="translated">' &lt;var&gt;filename&lt;/var&gt; 끝에 .</target>
        </trans-unit>
        <trans-unit id="84649512eefc30142a6bbc461a623ad5259aa9cc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to the end, preceded by the default return value (see below), if that is non-empty.</source>
          <target state="translated">'끝까지, 비어 있지 않은 경우 기본 반환 값 (아래 참조)이 앞에옵니다.</target>
        </trans-unit>
        <trans-unit id="e36951caa38e41c242015bf2138390a3b3030d4a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to the file &lt;var&gt;name&lt;/var&gt;. For a local file &lt;var&gt;name&lt;/var&gt;, it prefixes &lt;var&gt;name&lt;/var&gt; with &amp;lsquo;</source>
          <target state="translated">'파일 &lt;var&gt;name&lt;/var&gt; . 로컬 파일 &lt;var&gt;name&lt;/var&gt; 경우 &lt;var&gt;name&lt;/var&gt; 앞에 '</target>
        </trans-unit>
        <trans-unit id="cb56bc23bddad0560016cd43fff26d2ffcb417bd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to the letter &amp;lsquo;</source>
          <target state="translated">'문자'</target>
        </trans-unit>
        <trans-unit id="28d938f667314e25fca28b963a1dd7fa5a300e21" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to the specified name &lt;var&gt;library&lt;/var&gt;.</source>
          <target state="translated">'지정된 이름 &lt;var&gt;library&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="288fc71fcd2c329917ae1ff5f20fc3c78b805433" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; together with octal character codes (see below), with &amp;lsquo;</source>
          <target state="translated">'와 함께 8 진수 문자 코드 (아래 참조),'</target>
        </trans-unit>
        <trans-unit id="2a92c7cbdd555f69e74be17eeef83d74de911c1c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; treats &amp;lsquo;</source>
          <target state="translated">'취급'</target>
        </trans-unit>
        <trans-unit id="892789607539307a6b91299d73faafa844d8eea8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; until the first non-zero conversion is encountered. For example, the default format used by &lt;code&gt;emacs-uptime&lt;/code&gt; (see &lt;a href=&quot;processor-run-time#Processor-Run-Time&quot;&gt;emacs-uptime&lt;/a&gt;) &lt;code&gt;&quot;%Y,&amp;nbsp;%D,&amp;nbsp;%H,&amp;nbsp;%M,&amp;nbsp;%z%S&quot;&lt;/code&gt; means that the number of seconds will always be produced, but years, days, hours, and minutes will only be shown if they are non-zero.</source>
          <target state="translated">'0이 아닌 첫 번째 변환이 발생할 때까지. 예를 들어, 사용하는 기본 포맷 &lt;code&gt;emacs-uptime&lt;/code&gt; (참조 &lt;a href=&quot;processor-run-time#Processor-Run-Time&quot;&gt;이맥스 가동 시간&lt;/a&gt; ) &lt;code&gt;&quot;%Y,&amp;nbsp;%D,&amp;nbsp;%H,&amp;nbsp;%M,&amp;nbsp;%z%S&quot;&lt;/code&gt; 초 항상 생성 될 것임을 의미하지만, 년, 일 , 시간 및 분은 0이 아닌 경우에만 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="caf424476f05096caec27a29e6b75a7510c8e7b8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; upper-cases letters, and &amp;lsquo;</source>
          <target state="translated">'대문자 및'</target>
        </trans-unit>
        <trans-unit id="3499a75561c9dbbbf470451e5237774be453e7e8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; uses lower case and &amp;lsquo;</source>
          <target state="translated">'는 소문자를 사용하고'</target>
        </trans-unit>
        <trans-unit id="a71b8c8eacb0826e27acaa32053f7fa084b05c61" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; uses upper case. The object can also be a floating-point number that is formatted as an integer, dropping any fraction.</source>
          <target state="translated">'는 대문자를 사용합니다. 개체는 정수로 형식이 지정된 부동 소수점 숫자 일 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="edb0309decdb07ea141eca5bd8b5910537ff71f8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; value, i.e. each bit that is set in the argument &lt;var&gt;mode&lt;/var&gt; will be &lt;em&gt;reset&lt;/em&gt; in the default permissions with which Emacs creates files.</source>
          <target state="translated">'값, 즉 인수 &lt;var&gt;mode&lt;/var&gt; 에서 설정된 각 비트는 Emacs가 파일을 생성하는 기본 권한 으로 &lt;em&gt;재설정&lt;/em&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="d09097c0b1cf7352c121757e581ab340874001bb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; was specified.</source>
          <target state="translated">'이 지정되었습니다.</target>
        </trans-unit>
        <trans-unit id="49b9b7fd1318f4016f7d800be5d14329716ce91f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; we get:</source>
          <target state="translated">'우리는 다음을 얻습니다.</target>
        </trans-unit>
        <trans-unit id="826cdde19c9f960f07fda6ae214d32a1b07dd661" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; were specified.</source>
          <target state="translated">'이 지정되었습니다.</target>
        </trans-unit>
        <trans-unit id="b08d3c8483cc6a2908f98080f2f42824623cda2b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; were specified. If the &amp;lsquo;</source>
          <target state="translated">'이 지정되었습니다. '</target>
        </trans-unit>
        <trans-unit id="632ed7026a65788ccf78496b8792b6d68d69387e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; when applied to the string &amp;lsquo;</source>
          <target state="translated">'문자열'에 적용될 때</target>
        </trans-unit>
        <trans-unit id="222184bd234de4196da4c66e656f0a7213ab5c45" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; when narrowing is in effect; nothing otherwise (see &lt;code&gt;narrow-to-region&lt;/code&gt; in &lt;a href=&quot;narrowing#Narrowing&quot;&gt;Narrowing&lt;/a&gt;).</source>
          <target state="translated">'축소 효과가있을 때; 아무것도 그렇지 않으면 (볼 &lt;code&gt;narrow-to-region&lt;/code&gt; 에 &lt;a href=&quot;narrowing#Narrowing&quot;&gt;좁&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="3ead0c568213ef43431254c72c501e4d335b20ae" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; where &lt;var&gt;user&lt;/var&gt; is a valid login name. In the following examples, assume that there is a user named &amp;lsquo;</source>
          <target state="translated">'여기서 &lt;var&gt;user&lt;/var&gt; 는 유효한 로그인 이름입니다. 다음 예에서는 '라는 사용자가 있다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="411ebaab07ec42088e3a16e0f9cb019f484e1f00" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; which have</source>
          <target state="translated">'가지고있는</target>
        </trans-unit>
        <trans-unit id="b3a019a9c5ba51b255e4a07f4be0a8ff5ad210bd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; will also listen on IPv4, so attempting to then listen separately on IPv4 will result in &lt;code&gt;EADDRINUSE&lt;/code&gt; errors (&amp;lsquo;</source>
          <target state="translated">'또한 IPv4에서 수신 대기하므로 IPv4에서 별도로 수신하려고하면 &lt;code&gt;EADDRINUSE&lt;/code&gt; 오류 ('</target>
        </trans-unit>
        <trans-unit id="534e96c935f83edc99aefe8d22534f29e7bef3d2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; will be simplified away before &lt;code&gt;file-truename&lt;/code&gt; is called. To eliminate the need for a call to &lt;code&gt;expand-file-name&lt;/code&gt;, &lt;code&gt;file-truename&lt;/code&gt; handles &amp;lsquo;</source>
          <target state="translated">'는 &lt;code&gt;file-truename&lt;/code&gt; 이 호출 되기 전에 단순화됩니다 . 의 호출에 대한 필요성 제거하려면 &lt;code&gt;expand-file-name&lt;/code&gt; , &lt;code&gt;file-truename&lt;/code&gt; 핸들 '</target>
        </trans-unit>
        <trans-unit id="4f42be525ef96b592b1822c827c9d6af0d95f0f4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; with a number; shorter numbers will be padded with blanks. An optional period before the width requests zero-padding instead. For example, &lt;code&gt;&quot;%.3Y&quot;&lt;/code&gt; might produce &lt;code&gt;&quot;004 years&quot;&lt;/code&gt;.</source>
          <target state="translated">'숫자로; 더 짧은 숫자는 공백으로 채워집니다. 너비 앞의 선택적 마침표는 대신 제로 패딩을 요청합니다. 예를 들어 &lt;code&gt;&quot;%.3Y&quot;&lt;/code&gt; 는 &lt;code&gt;&quot;004 years&quot;&lt;/code&gt; 를 생성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ead5863ef381c47f30d418577fffd5673a55ef39" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; with a text property &lt;code&gt;foo&lt;/code&gt;. If the conversion for &lt;code&gt;foo&lt;/code&gt; is done by inserting into the buffer, say, &amp;lsquo;</source>
          <target state="translated">'텍스트 속성 &lt;code&gt;foo&lt;/code&gt; . &lt;code&gt;foo&lt;/code&gt; 에 대한 변환 이 버퍼에 삽입하여 수행되면 '</target>
        </trans-unit>
        <trans-unit id="2642272e9601bcc2acf6db8f56895469727cc48e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; with a value that names one character set. For the</source>
          <target state="translated">'하나의 문자 집합을 명명하는 값으로. 에 대한</target>
        </trans-unit>
        <trans-unit id="1b29111d2ea0a17133c6447720aca7202698a4d6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; with another &amp;lsquo;</source>
          <target state="translated">'다른'</target>
        </trans-unit>
        <trans-unit id="623fa15e1c8dc82973d518026b6a1aca0a2e0e4a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; with grave accent. &amp;lsquo;</source>
          <target state="translated">'억양으로. '</target>
        </trans-unit>
        <trans-unit id="f7f26767532c48864c68ffa5e07cb54fd5842dbe" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; with no following &amp;lsquo;</source>
          <target state="translated">'팔로우 없음'</target>
        </trans-unit>
        <trans-unit id="6ab5d53ef2ad7f0a13b455a2a948c27bd5de99f2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; with the Meta modifier bit set. This value is not a valid character code: it fails the &lt;code&gt;characterp&lt;/code&gt; test (see &lt;a href=&quot;character-codes#Character-Codes&quot;&gt;Character Codes&lt;/a&gt;). Use &lt;code&gt;event-basic-type&lt;/code&gt; (see &lt;a href=&quot;classifying-events#Classifying-Events&quot;&gt;Classifying Events&lt;/a&gt;) to recover the character code with the modifier bits removed; use &lt;code&gt;event-modifiers&lt;/code&gt; to test for modifiers in the character event returned by &lt;code&gt;read-char&lt;/code&gt;.</source>
          <target state="translated">'메타 수정 자 비트가 설정되었습니다. 이 값은 유효한 문자 코드가 아닙니다. &lt;code&gt;characterp&lt;/code&gt; 테스트에 실패했습니다 ( &lt;a href=&quot;character-codes#Character-Codes&quot;&gt;문자 코드&lt;/a&gt; 참조 ). 수정 자 비트가 제거 된 문자 코드를 복구 하려면 &lt;code&gt;event-basic-type&lt;/code&gt; ( &lt;a href=&quot;classifying-events#Classifying-Events&quot;&gt;이벤트 분류&lt;/a&gt; 참조 )을 사용하십시오. &lt;code&gt;event-modifiers&lt;/code&gt; 사용 하여 &lt;code&gt;read-char&lt;/code&gt; 가 반환하는 문자 이벤트에서 수정자를 테스트합니다 .</target>
        </trans-unit>
        <trans-unit id="9a887615c2a4bc089c26d55bcdbb3774a77d9f21" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; with the appropriate directory.</source>
          <target state="translated">'적절한 디렉토리로.</target>
        </trans-unit>
        <trans-unit id="7445b32446b1369fc752b6c22b2ed9f445d4bb62" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; won&amp;rsquo;t work properly, and &amp;lsquo;</source>
          <target state="translated">'가 제대로 작동하지 않고'</target>
        </trans-unit>
        <trans-unit id="abd5493f4e151e7f73b49fe5e6804e43c8776b47" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; would be incorrect. However, a &amp;lsquo;</source>
          <target state="translated">'가 잘못되었습니다. 그러나 '</target>
        </trans-unit>
        <trans-unit id="595625c67d7ff58c27a327004a426d86e80ec20c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; would be superfluous. When there is a nonzero left margin, they accept matches that start after the left margin. In that case, a &amp;lsquo;</source>
          <target state="translated">'는 불필요합니다. 0이 아닌 왼쪽 여백이있는 경우 왼쪽 여백 이후에 시작하는 일치 항목을 허용합니다. 이 경우 '</target>
        </trans-unit>
        <trans-unit id="65fa6eb071e53450b57c4e58474fdeb9a32bf2b8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; would match &amp;lsquo;</source>
          <target state="translated">'는'와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="ae1831d468602fdf7493ace2e8e08b0b07fde15d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;&amp;mdash;does not become part of the string; i.e., the Lisp reader ignores an escaped newline while reading a string. An escaped space &amp;lsquo;</source>
          <target state="translated">'-문자열의 일부가되지 않습니다. 즉, Lisp 리더는 문자열을 읽는 동안 이스케이프 된 개행 문자를 무시합니다. 탈출 한 공간 '</target>
        </trans-unit>
        <trans-unit id="30e316448df02cbb38e390f7434fc8adb6e950f8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;&amp;mdash;if the same character occurs in two different places, the two occurrences in general have different properties.</source>
          <target state="translated">'&amp;mdash; 동일한 문자가 서로 다른 두 위치에서 발생하는 경우 일반적으로 두 발생은 서로 다른 속성을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="6b385e8b04b9c5da3e5aa19e043d4cfe69f446a1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;&amp;mdash;this is how to include a literal &amp;lsquo;</source>
          <target state="translated">'-리터럴'을 포함하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="9e94b8c01d259c248dbbf9ee6c460cb05e81e039" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;&amp;ndash;&amp;lsquo;</source>
          <target state="translated">&amp;rsquo;&amp;ndash;&amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="e1628d96a320a1d73e33067769e59198bf606849" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) and octal escape sequences (&amp;lsquo;</source>
          <target state="translated">') 및 8 진 이스케이프 시퀀스 ('</target>
        </trans-unit>
        <trans-unit id="2ada1bfe0d1c55b5a14f5e36e865a508e5ad99b9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) and vertical bar (&amp;lsquo;</source>
          <target state="translated">') 및 세로 막대 ('</target>
        </trans-unit>
        <trans-unit id="cf7faa6c926c99c331f466fc7b4b1f1d2704a06d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) appear in the initial text. See &lt;a href=&quot;output-functions#Output-Functions&quot;&gt;Output Functions&lt;/a&gt;.</source>
          <target state="translated">')가 첫 텍스트에 나타납니다. &lt;a href=&quot;output-functions#Output-Functions&quot;&gt;출력 함수를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2800e5bb9addb48d806259a356ab0b37f0e70aac" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) are classified as parenthesis characters.</source>
          <target state="translated">')는 괄호 문자로 분류됩니다.</target>
        </trans-unit>
        <trans-unit id="78f9cd2346b7b1ce84f10f6fd3a54ef3e0d424cf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) are displayed literally.</source>
          <target state="translated">')는 문자 그대로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="931214108d5e53d40be3e5d25484a201dc23a13d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) are not allowed.</source>
          <target state="translated">') 허락되지 않는다.</target>
        </trans-unit>
        <trans-unit id="2c8e411a8187dfcd8b71e94b6a457693ecbef587" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) are padded by inserting spaces to the left, and others are padded by inserting spaces to the right.</source>
          <target state="translated">')는 왼쪽에 공백을 삽입하여 채워지고 나머지는 오른쪽에 공백을 삽입하여 채워집니다.</target>
        </trans-unit>
        <trans-unit id="1af826b0f40b6e66bce5f2a9e3434acf5f668219" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) construct.</source>
          <target state="translated">') 구성.</target>
        </trans-unit>
        <trans-unit id="e01512635ee43516d8a9a6f84df5ac449ae9a89b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) followed by a Lisp object (in read syntax) expands to a list whose first element is &lt;code&gt;quote&lt;/code&gt;, and whose second element is the object. Thus, the read syntax &lt;code&gt;'x&lt;/code&gt; is an abbreviation for &lt;code&gt;(quote x)&lt;/code&gt;.</source>
          <target state="translated">') 뒤에 Lisp 객체 (읽기 구문)는 첫 번째 요소가 &lt;code&gt;quote&lt;/code&gt; 이고 두 번째 요소가 객체 인 목록으로 확장됩니다 . 따라서 읽기 구문 &lt;code&gt;'x&lt;/code&gt; 는 &lt;code&gt;(quote x)&lt;/code&gt; 의 약어입니다 .</target>
        </trans-unit>
        <trans-unit id="81c18dfbc171088b2b6ef88343851dc479e755be" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) for character constants.</source>
          <target state="translated">') 문자 상수.</target>
        </trans-unit>
        <trans-unit id="cecad4099033a0ad51cd07d2347dbbb6c0ce9e76" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) giving details of the problem, but it still loads the file, just leaving the macro unexpanded for now. You may wish to restructure your code so that this does not happen. Loading a compiled file does not cause macroexpansion, because this should already have happened during compilation. See &lt;a href=&quot;compiling-macros#Compiling-Macros&quot;&gt;Compiling Macros&lt;/a&gt;.</source>
          <target state="translated">') 문제에 대한 세부 정보를 제공하지만 여전히 파일을로드하고 지금은 매크로를 확장하지 않은 상태로 둡니다. 이런 일이 발생하지 않도록 코드를 재구성 할 수 있습니다. 컴파일 된 파일을로드해도 매크로 확장이 발생하지 않습니다. 이는 컴파일 중에 이미 발생 했어야하기 때문입니다. &lt;a href=&quot;compiling-macros#Compiling-Macros&quot;&gt;매크로 컴파일을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="02920b936c56fa09eafc2216e90457438e7d80d3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) in string constants. &lt;strong&gt;But beware:&lt;/strong&gt; If a string constant contains hexadecimal or octal escape sequences, and these escape sequences all specify unibyte characters (i.e., less than 256), and there are no other literal non-</source>
          <target state="translated">') 문자열 상수에서. &lt;strong&gt;그러나주의하십시오.&lt;/strong&gt; 문자열 상수에 16 진수 또는 8 진수 이스케이프 시퀀스가 ​​포함되어 있고 이러한 이스케이프 시퀀스는 모두 유니 바이트 문자 (즉, 256 미만)를 지정하고 다른 리터럴 비</target>
        </trans-unit>
        <trans-unit id="987b209fdd9adaebcb5b4a5b49ff6f61599ef78d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) in the Lisp name changed to underscores. Thus, to call this function from C code, call &lt;code&gt;For&lt;/code&gt;.</source>
          <target state="translated">') Lisp 이름에서 밑줄로 변경되었습니다. 따라서 C 코드에서이 함수를 호출 &lt;code&gt;For&lt;/code&gt; 호출 하십시오 .</target>
        </trans-unit>
        <trans-unit id="75d850c0c734aa54116da42de8824fc37d47a4f3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) is a possible auto-save file name. The argument &lt;var&gt;filename&lt;/var&gt; should not contain a directory part.</source>
          <target state="translated">')는 가능한 자동 저장 파일 이름입니다. 인수 &lt;var&gt;filename&lt;/var&gt; 에는 디렉토리 부분이 포함되지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="97b718479f7fd7010058e75501f9fa1c3631cc0e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) is called a &lt;em&gt;keyword symbol&lt;/em&gt;. These symbols automatically act as constants, and are normally used only by comparing an unknown symbol with a few specific alternatives. See &lt;a href=&quot;constant-variables#Constant-Variables&quot;&gt;Constant Variables&lt;/a&gt;.</source>
          <target state="translated">')는 &lt;em&gt;키워드 기호&lt;/em&gt; 라고합니다 . 이러한 기호는 자동으로 상수 역할을하며 일반적으로 알 수없는 기호를 몇 가지 특정 대안과 비교하는 경우에만 사용됩니다. &lt;a href=&quot;constant-variables#Constant-Variables&quot;&gt;상수 변수를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c2b25303342f57c6c6903103e99e6483a2f0a9a0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) or Sun Audio format (&amp;lsquo;</source>
          <target state="translated">') 또는 Sun Audio 형식 ('</target>
        </trans-unit>
        <trans-unit id="a83f19522fffcb3424e00f18f018e94dea0f1964" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) precede the number and its exponent. For example, &amp;lsquo;</source>
          <target state="translated">')는 숫자와 지수 앞에옵니다. 예 : '</target>
        </trans-unit>
        <trans-unit id="5ee82abd247c66071157e10ad5962c65fc2b9921" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) prepended and appended to it. This function does not look at the variable &lt;code&gt;auto-save-visited-file-name&lt;/code&gt; (described below); callers of this function should check that variable first.</source>
          <target state="translated">') 앞에 추가하고 추가합니다. 이 함수는 &lt;code&gt;auto-save-visited-file-name&lt;/code&gt; 변수를 보지 않습니다 (아래에서 설명). 이 함수의 호출자는 먼저 해당 변수를 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="5f36439a1c90c1192fe619d7430e206cee219956" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) says not to load an init file, while &amp;lsquo;</source>
          <target state="translated">')는 초기화 파일을로드하지 말라고 말하는 반면'</target>
        </trans-unit>
        <trans-unit id="7906464c78490eb7dbe4bd8093d5cc632a6472fd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) starts a comment and a newline or formfeed ends one.</source>
          <target state="translated">')는 주석을 시작하고 개행 또는 폼 피드는 주석을 끝냅니다.</target>
        </trans-unit>
        <trans-unit id="c380a929b0fbfed7b21f8789cf9ae5ca36d9d257" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) starts a comment if it is not within a string or character constant. The comment continues to the end of line. The Lisp reader discards comments; they do not become part of the Lisp objects which represent the program within the Lisp system.</source>
          <target state="translated">')는 주석이 문자열 또는 문자 상수 내에 없으면 주석을 시작합니다. 주석은 줄 끝까지 계속됩니다. Lisp 독자는 주석을 버립니다. 그들은 Lisp 시스템 내에서 프로그램을 나타내는 Lisp 객체의 일부가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="09c9c375c40df32852a4f0b042c06198acffb6a1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) syntax class, i.e., their syntax is inherited from the parent table (see &lt;a href=&quot;syntax-class-table#Syntax-Class-Table&quot;&gt;Syntax Class Table&lt;/a&gt;).</source>
          <target state="translated">') 구문 클래스, 즉 해당 구문은 상위 테이블에서 상속됩니다 ( &lt;a href=&quot;syntax-class-table#Syntax-Class-Table&quot;&gt;구문 클래스 테이블&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="a1a860c4f51fc8563b1f5c3aa5bd30c702e9a489" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), &lt;em&gt;and&lt;/em&gt; the first character of an end-of-comment sequence (&amp;lsquo;</source>
          <target state="translated">') &lt;em&gt;및&lt;/em&gt; 주석 끝 시퀀스의 첫 번째 문자 ('</target>
        </trans-unit>
        <trans-unit id="12a83d6043ae77e6e82f05af392f54c31c8ab6c8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), Emacs loads neither your personal init file nor the default init file.</source>
          <target state="translated">'), Emacs는 개인 init 파일이나 기본 init 파일을로드하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2712fe912516b58ce3ff3a54d553d11f2d5445df" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), and it introduces additional special constructs.</source>
          <target state="translated">'), 추가 특수 구조를 도입합니다.</target>
        </trans-unit>
        <trans-unit id="696d805df02402823ccdf3dbec1f088c9ba9e7cc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), and the beginning of the match for the first subexpression is at the 13th character (&amp;lsquo;</source>
          <target state="translated">')이고 첫 번째 하위 표현식에 대한 일치의 시작은 13 번째 문자 ('</target>
        </trans-unit>
        <trans-unit id="20f9978ffd20367da06832b5ae6815a656dd5e8b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), but the details of punctuation and spacing are ignored (searching for &amp;lsquo;</source>
          <target state="translated">'), 구두점 및 공백의 세부 사항은 무시됩니다 ('</target>
        </trans-unit>
        <trans-unit id="2ad724ed78c0e49fcedc4d8192e444887bed5945" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), if it is interned in the standard obarray, except that setting such a symbol to itself is not an error.</source>
          <target state="translated">'), 표준 obarray에 인턴 된 경우 이러한 기호를 자체로 설정하는 것은 오류가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="f4cf90ef77d63a806d05ebfb8c742c0bf1f612a0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), it is equivalent to &amp;lsquo;</source>
          <target state="translated">'),'</target>
        </trans-unit>
        <trans-unit id="0ab41b38ca3d0aedf8f77be90d90ea12636c2a97" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), only the last match is recorded.</source>
          <target state="translated">'), 마지막 경기 만 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="3914d7be43e2aee9e83e3f25009f8e3873162599" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), or that greatly changes the meaning of other text, like &amp;lsquo;</source>
          <target state="translated">') 또는'와 같은 다른 텍스트의 의미를 크게 변경합니다.</target>
        </trans-unit>
        <trans-unit id="b8e60e2943d58c82fbc8007f162c814565dc4f7f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), plus those listed in &lt;code&gt;unload-feature-special-hooks&lt;/code&gt;, as well as &lt;code&gt;auto-mode-alist&lt;/code&gt;. This is to prevent Emacs from ceasing to function because important hooks refer to functions that are no longer defined.</source>
          <target state="translated">') 및 &lt;code&gt;unload-feature-special-hooks&lt;/code&gt; 및 &lt;code&gt;auto-mode-alist&lt;/code&gt; 에 나열된 항목을 포함 합니다 . 이것은 중요한 후크가 더 이상 정의되지 않은 함수를 참조하기 때문에 Emacs가 작동을 멈추는 것을 방지하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="c39c40dc54d95f8b4b6097b9b9a4cb0c4e740d4a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), the precision specifies how many digits following the decimal point to show; if zero, the decimal-point itself is also omitted. For &amp;lsquo;</source>
          <target state="translated">'), 정밀도는 표시 할 소수점 뒤의 자릿수를 지정합니다. 0이면 소수점 자체도 생략됩니다. '</target>
        </trans-unit>
        <trans-unit id="b1384fe0c31b5149aeb485dfa12fc6e40b1ee80a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;).</source>
          <target state="translated">&amp;rsquo;).</target>
        </trans-unit>
        <trans-unit id="8bbc3578566c634244844e6b969bb2dcb2e59fb9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). &amp;lsquo;</source>
          <target state="translated">'). '</target>
        </trans-unit>
        <trans-unit id="af979cb0d0cd64b722f99465069129a2fe26eb1c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). &lt;code&gt;cat&lt;/code&gt; copies its standard input into its standard output. Since the argument &lt;var&gt;destination&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt;, this output is inserted in the current buffer.</source>
          <target state="translated">'). &lt;code&gt;cat&lt;/code&gt; 은 표준 입력을 표준 출력으로 복사합니다. 인수 &lt;var&gt;destination&lt;/var&gt; 이 &lt;code&gt;t&lt;/code&gt; 이므로이 출력은 현재 버퍼에 삽입됩니다.</target>
        </trans-unit>
        <trans-unit id="c68dc4ae0e6d986a71bfd6c3643e5ebbf09caa5c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). But if &lt;var&gt;missing-ok&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, then &lt;code&gt;load&lt;/code&gt; just returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">'). 그러나 &lt;var&gt;missing-ok&lt;/var&gt; 가 &lt;code&gt;nil&lt;/code&gt; 이 아니면 &lt;code&gt;load&lt;/code&gt; 는 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="2df7b5be0531fd3efcf2cb272072aa67c6d72f64" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). Each release of a package should be accompanied by an increase in the version number so that it will be recognized as an upgrade by users querying the package archive.</source>
          <target state="translated">'). 패키지의 각 릴리스에는 패키지 아카이브를 쿼리하는 사용자가 업그레이드로 인식 할 수 있도록 버전 번호가 증가해야합니다.</target>
        </trans-unit>
        <trans-unit id="166adf5b7c951505c700cfe06cfcbe8dc77781d7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). On graphical terminals, Emacs by default uses curved arrows in the fringes to indicate continuation, so the display table has no effect, unless you disable the fringes.</source>
          <target state="translated">'). 그래픽 터미널에서 Emacs는 기본적으로 가장자리에 곡선 화살표를 사용하여 연속을 나타내므로 가장자리를 비활성화하지 않는 한 디스플레이 테이블이 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="cd3fbf018437e03b91c00df93322bbfedd9db447" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). See &lt;a href=&quot;display-tables#Display-Tables&quot;&gt;Display Tables&lt;/a&gt;.</source>
          <target state="translated">'). &lt;a href=&quot;display-tables#Display-Tables&quot;&gt;디스플레이 테이블을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a8b5aa9d187a754060e77c13a362bd9254fff14a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). See &lt;a href=&quot;glyphs#Glyphs&quot;&gt;Glyphs&lt;/a&gt;. On graphical terminals, Emacs by default uses arrows in the fringes to indicate truncation, so the display table has no effect, unless you disable the fringes (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Fringes.html#Fringes&quot;&gt;Window Fringes&lt;/a&gt; in</source>
          <target state="translated">'). &lt;a href=&quot;glyphs#Glyphs&quot;&gt;글리프를&lt;/a&gt; 참조하십시오 . 기본 사용하여 그래픽 터미널, 이맥스의 변두리에있는 화살표는 디스플레이 테이블에 영향을주지 않습니다 있도록 프린지를 해제하지 않는 한, (참조, 절단을 표시하는 &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Fringes.html#Fringes&quot;&gt;창 변두리을&lt;/a&gt; 에</target>
        </trans-unit>
        <trans-unit id="b4be67c5b758ddc02a3f5b61b51d03830715efde" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). See &lt;a href=&quot;motion-and-syntax#Motion-and-Syntax&quot;&gt;Motion and Syntax&lt;/a&gt;.</source>
          <target state="translated">'). &lt;a href=&quot;motion-and-syntax#Motion-and-Syntax&quot;&gt;동작 및 구문을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d08c021839e737438272feaca72be14f215533bb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). See &lt;a href=&quot;selective-display#Selective-Display&quot;&gt;Selective Display&lt;/a&gt;.</source>
          <target state="translated">'). &lt;a href=&quot;selective-display#Selective-Display&quot;&gt;선택적 표시를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="75fb6e2a921debc251db3b6545a4b259d2b1c0e8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). See &lt;a href=&quot;splitting-windows#Splitting-Windows&quot;&gt;Splitting Windows&lt;/a&gt;. This currently has effect only on text terminals; on graphical terminals, if vertical scroll bars are supported and in use, a scroll bar separates the two windows, and if there are no vertical scroll bars and no dividers (see &lt;a href=&quot;window-dividers#Window-Dividers&quot;&gt;Window Dividers&lt;/a&gt;), Emacs uses a thin line to indicate the border.</source>
          <target state="translated">'). &lt;a href=&quot;splitting-windows#Splitting-Windows&quot;&gt;창 분할을&lt;/a&gt; 참조하십시오 . 이것은 현재 텍스트 터미널에만 영향을 미칩니다. 그래픽 터미널에서 세로 스크롤 막대가 지원되고 사용중인 경우 스크롤 막대는 두 개의 창을 구분하고, 세로 스크롤 막대와 구분선이없는 경우 ( &lt;a href=&quot;window-dividers#Window-Dividers&quot;&gt;창 구분선&lt;/a&gt; 참조 ) Emacs는가는 선을 사용하여 테두리를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="6a5f2f12c8721402eaa23c5ff209cbfc17f6b805" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). The flags &amp;lsquo;</source>
          <target state="translated">'). 플래그 '</target>
        </trans-unit>
        <trans-unit id="77355f92ca528b086526811e4049b496417dee45" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). This can interfere with code that requires ordinary</source>
          <target state="translated">'). 이것은 평범한 코드가 필요한 코드를 방해 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="71c1842324fb68dbb3b18a8929f8297c9e75db86" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). This is usually also the symbol prefix used in the program (see &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-Conventions.html#Coding-Conventions&quot;&gt;Coding Conventions&lt;/a&gt;).</source>
          <target state="translated">'). 이것은 일반적으로 프로그램에서 사용되는 기호 접두사이기도합니다 ( &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-Conventions.html#Coding-Conventions&quot;&gt;코딩 규칙&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="5ccb7c25efe30fe61d3171bc5a486229d7216da1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;); a space specifies that there is no matching character. Then come characters specifying additional syntax properties (see &lt;a href=&quot;syntax-flags#Syntax-Flags&quot;&gt;Syntax Flags&lt;/a&gt;).</source>
          <target state="translated">'); 공백은 일치하는 문자가 없음을 지정합니다. 그런 다음 추가 구문 속성을 지정하는 문자가 표시됩니다 ( &lt;a href=&quot;syntax-flags#Syntax-Flags&quot;&gt;Syntax Flags&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="244db31c10b5706b3c258bf53be68945f3f34895" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;); e.g., the</source>
          <target state="translated">'); 예 :</target>
        </trans-unit>
        <trans-unit id="d9b93a89ea96064978297ef1411940f8df5fe34b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;,</source>
          <target state="translated">&amp;rsquo;,</target>
        </trans-unit>
        <trans-unit id="5539094fa0b03be2ecf5d76b2f76c3ceb8adb603" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, &amp;lsquo;</source>
          <target state="translated">','</target>
        </trans-unit>
        <trans-unit id="df3e9f4ba8549a3d06de0749585f0e61d7ccf284" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, &lt;code&gt;nil&lt;/code&gt; if the user types &amp;lsquo;</source>
          <target state="translated">', 사용자가 '를 입력하면 &lt;code&gt;nil&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="27acaac084b979f3b1b97668327c9bc00d6cf94f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, &lt;code&gt;read-event&lt;/code&gt; does not display any message to indicate it is waiting for input; instead, it prompts by echoing: it displays descriptions of the events that led to or were read by the current command. See &lt;a href=&quot;the-echo-area#The-Echo-Area&quot;&gt;The Echo Area&lt;/a&gt;.</source>
          <target state="translated">', &lt;code&gt;read-event&lt;/code&gt; 는 입력 대기 중임을 나타내는 메시지를 표시하지 않습니다. 대신 에코를 통해 프롬프트합니다. 현재 명령으로 읽거나 읽은 이벤트에 대한 설명을 표시합니다. &lt;a href=&quot;the-echo-area#The-Echo-Area&quot;&gt;에코 영역을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="23b792ae62caef6b854c659a112519dd81079931" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, Lisp syntax requires you to quote each &amp;lsquo;</source>
          <target state="translated">', Lisp 구문에서는'</target>
        </trans-unit>
        <trans-unit id="b4a59f9e4b8f8dbbb0e60397aaedd8e3ed369857" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, a descriptive string (typically the type name followed by the name of the object), and a closing &amp;lsquo;</source>
          <target state="translated">', 설명 문자열 (일반적으로 유형 이름 뒤에 객체 이름이 나옴) 및 닫는'</target>
        </trans-unit>
        <trans-unit id="2a9f3a0f3fc8dbfd78260be83e1a0118520974b9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, a meta character turns into a string starting with &amp;lsquo;</source>
          <target state="translated">', 메타 문자는'로 시작하는 문자열로 바뀝니다.</target>
        </trans-unit>
        <trans-unit id="097e5ed2eff306899394e192af415539f6c697b1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, add to &lt;code&gt;initial-frame-alist&lt;/code&gt;; the others add to &lt;code&gt;default-frame-alist&lt;/code&gt;. see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Invocation.html#Emacs-Invocation&quot;&gt;Command Line Arguments for Emacs Invocation&lt;/a&gt; in</source>
          <target state="translated">', &lt;code&gt;initial-frame-alist&lt;/code&gt; 에 추가하십시오 . 다른 것들은 &lt;code&gt;default-frame-alist&lt;/code&gt; 에 추가합니다 . &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Invocation.html#Emacs-Invocation&quot;&gt;Emacs 호출&lt;/a&gt; 에 대한 명령 줄 인수를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0ba94342316333b349754d7726774e8ca376b951" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, after which we are in a character alternative; &amp;lsquo;</source>
          <target state="translated">', 그 후에 우리는 문자 대안에 있습니다. '</target>
        </trans-unit>
        <trans-unit id="b4c2b924dddb74784fdc00cbc01bb9d353155e30" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and &amp;lsquo;</source>
          <target state="translated">'및'</target>
        </trans-unit>
        <trans-unit id="7507c3107d93398f1a3a42efd8facb7f4eefb5bb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and &lt;code&gt;^&lt;/code&gt; together; the order does not matter. Actual reading of arguments is controlled by the rest of the prompt string (starting with the first character that is not &amp;lsquo;</source>
          <target state="translated">', &lt;code&gt;^&lt;/code&gt; 함께; 순서는 중요하지 않습니다. 인수의 실제 읽기는 나머지 프롬프트 문자열 ( '이 아닌 첫 번째 문자로 시작)에 의해 제어됩니다.</target>
        </trans-unit>
        <trans-unit id="4600a372b88397972a67a000d46a8d5d0d5b556f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and all of them begin with the word &amp;lsquo;</source>
          <target state="translated">', 그들 모두는'</target>
        </trans-unit>
        <trans-unit id="c464e6c66edda8293effb3ee2951104596116a54" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and exists for compatibility, so that you could pass it to functions that expect a display name.</source>
          <target state="translated">'이며 호환성을 위해 존재하므로 표시 이름이 필요한 함수에 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f7e6a0f2ddcdbb0932b97022122ad3be50874d2b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and if both flags are used, &amp;lsquo;</source>
          <target state="translated">', 두 플래그가 모두 사용되는 경우'</target>
        </trans-unit>
        <trans-unit id="3f48614723a7e93ea40757016784be77dd496780" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and it cannot be changed. Minibuffers are displayed only in special windows used only for minibuffers; these windows always appear at the bottom of a frame. (Sometimes frames have no minibuffer window, and sometimes a special kind of frame contains nothing but a minibuffer window; see &lt;a href=&quot;minibuffers-and-frames#Minibuffers-and-Frames&quot;&gt;Minibuffers and Frames&lt;/a&gt;.)</source>
          <target state="translated">'이며 변경할 수 없습니다. 미니 버퍼는 미니 버퍼에만 사용되는 특수 창에만 표시됩니다. 이 창은 항상 프레임의 맨 아래에 나타납니다. (때때로 프레임에는 &lt;a href=&quot;minibuffers-and-frames#Minibuffers-and-Frames&quot;&gt;미니 버퍼&lt;/a&gt; 창이없고 특별한 종류의 프레임에는 미니 버퍼 창만 포함되어 있습니다. 미니 버퍼 및 프레임 참조 )</target>
        </trans-unit>
        <trans-unit id="5083f0a9380e592d4d3feb9b9eff708af9c2f377" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and it makes no difference if there are trailing spaces in the preceding line.</source>
          <target state="translated">'이며, 선행 줄에 후행 공백이 있으면 차이가 없습니다.</target>
        </trans-unit>
        <trans-unit id="5e8c4b2f52bb7a282a1eab0f72359c044de4182a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and likewise for each set of equivalent characters.)</source>
          <target state="translated">&amp;rsquo;, and likewise for each set of equivalent characters.)</target>
        </trans-unit>
        <trans-unit id="b07014d84e3e4b2451b512c382577e06fef80aea" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and nothing else. &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, and nothing else. &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="e59d6865633c50fce2fae557747a34250af5da84" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and puts the value in the list structure:</source>
          <target state="translated">&amp;rsquo;, and puts the value in the list structure:</target>
        </trans-unit>
        <trans-unit id="5f5edae4aa262f2bc5176fcfb06ee918cbf5ce15" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and reading that text produces a list (but not the same list) with elements &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">&amp;rsquo;, and reading that text produces a list (but not the same list) with elements &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="399c4fe374d27da23ed459e3f0b74183918742fc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and reading that text returns the symbol &lt;code&gt;foo&lt;/code&gt;. Printing a list whose elements are &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; produces the text &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, and reading that text returns the symbol &lt;code&gt;foo&lt;/code&gt; . Printing a list whose elements are &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; produces the text &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="162c4fa7cd580fb02ea9b7ec21a851a124045518" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and repeats the request.</source>
          <target state="translated">&amp;rsquo;, and repeats the request.</target>
        </trans-unit>
        <trans-unit id="21e26494476ef1b6fb7e594c6bd540333f1a5ef7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and searching for subsequent instances of &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, and searching for subsequent instances of &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="361c5abac6e6f661cfe4930a08d506bfa694cec7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and so on). For making key bindings with &lt;code&gt;define-key&lt;/code&gt;, you can use lists such as &lt;code&gt;(control hyper ?x)&lt;/code&gt; to specify the characters (see &lt;a href=&quot;changing-key-bindings#Changing-Key-Bindings&quot;&gt;Changing Key Bindings&lt;/a&gt;). The function &lt;code&gt;event-convert-list&lt;/code&gt; converts such a list into an event type (see &lt;a href=&quot;classifying-events#Classifying-Events&quot;&gt;Classifying Events&lt;/a&gt;).</source>
          <target state="translated">&amp;rsquo;, and so on). For making key bindings with &lt;code&gt;define-key&lt;/code&gt; , you can use lists such as &lt;code&gt;(control hyper ?x)&lt;/code&gt; to specify the characters (see &lt;a href=&quot;changing-key-bindings#Changing-Key-Bindings&quot;&gt;Changing Key Bindings&lt;/a&gt;). The function &lt;code&gt;event-convert-list&lt;/code&gt; converts such a list into an event type (see &lt;a href=&quot;classifying-events#Classifying-Events&quot;&gt;Classifying Events&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="609fd798d1c7d9d0fb0f69d017ef98b2923d946f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and so on.</source>
          <target state="translated">&amp;rsquo;, and so on.</target>
        </trans-unit>
        <trans-unit id="60588d4161391aeb0b298e91356209936039bdf9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and space, tab, etc., appear as &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, and space, tab, etc., appear as &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="ba27f2dc083575807a9e85e1ed54fe7135c4dc45" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and the &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, and the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="96f154f55463581317f08eea3fb8ece521806d67" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and the class is &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, and the class is &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="d2934060178bab17730e6827836cad89feebedb4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and the constructs &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, and the constructs &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="b46d0e4b793605bbcac0948eee13618b319d26f7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and the hexadecimal character code. Thus, &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, and the hexadecimal character code. Thus, &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="840b77e202945e4e26604678ce01e934d3fd90b0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and the others are digit characters representing the character code in octal. (A display table can specify a glyph to use instead of &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, and the others are digit characters representing the character code in octal. (A display table can specify a glyph to use instead of &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="5c978fbc7c65257c70271e3e92fca193c622a393" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and the second is &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, and the second is &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="e468f3e68cca32638e6fb4d51f350ded372d26d2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and then provides assistance in finding out what the key bindings are, and what the mode is intended for. It returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&amp;rsquo;, and then provides assistance in finding out what the key bindings are, and what the mode is intended for. It returns &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5c4de5bb8974d13b31c30bf5f6ffb705f73c4f51" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and then types</source>
          <target state="translated">&amp;rsquo;, and then types</target>
        </trans-unit>
        <trans-unit id="2d18e8834f14830b4930260bc33e5f18af73b427" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and to format just nonnegative integers you can also use &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, and to format just nonnegative integers you can also use &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="259481542e2ccfb8e2e8bed8c7792c4b1741ba41" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and you should add a backslash before any of the characters &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, and you should add a backslash before any of the characters &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="d84d4b31b0a62a2e0f01a16d5313bb486905f729" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, any edits previously made in the buffer are lost.</source>
          <target state="translated">&amp;rsquo;, any edits previously made in the buffer are lost.</target>
        </trans-unit>
        <trans-unit id="3862e086cc3fbd5e98336c0827d406317d7d8075" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, applied to that same string, matches just &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, applied to that same string, matches just &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="2ded37fdb7807cd0b2a20bd5c7f09731bf81070a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, are interpreted as usual in &lt;code&gt;exec-path&lt;/code&gt;, but environment variable substitutions (&amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, are interpreted as usual in &lt;code&gt;exec-path&lt;/code&gt; , but environment variable substitutions (&amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="3e4d4715755215a66d86ca37f92ade06fae4b47f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, are not hardwired, and are specified by the keymap &lt;code&gt;query-replace-map&lt;/code&gt; (see &lt;a href=&quot;search-and-replace#Search-and-Replace&quot;&gt;Search and Replace&lt;/a&gt;). In particular, if the user enters the special responses &lt;code&gt;recenter&lt;/code&gt;, &lt;code&gt;scroll-up&lt;/code&gt;, &lt;code&gt;scroll-down&lt;/code&gt;, &lt;code&gt;scroll-other-window&lt;/code&gt;, or &lt;code&gt;scroll-other-window-down&lt;/code&gt; (respectively bound to</source>
          <target state="translated">&amp;rsquo;, are not hardwired, and are specified by the keymap &lt;code&gt;query-replace-map&lt;/code&gt; (see &lt;a href=&quot;search-and-replace#Search-and-Replace&quot;&gt;Search and Replace&lt;/a&gt;). In particular, if the user enters the special responses &lt;code&gt;recenter&lt;/code&gt; , &lt;code&gt;scroll-up&lt;/code&gt; , &lt;code&gt;scroll-down&lt;/code&gt; , &lt;code&gt;scroll-other-window&lt;/code&gt; , or &lt;code&gt;scroll-other-window-down&lt;/code&gt; (respectively bound to</target>
        </trans-unit>
        <trans-unit id="9dd84280385d00bd2b1ee68b082b112bdc0fd428" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, as appropriate.</source>
          <target state="translated">&amp;rsquo;, as appropriate.</target>
        </trans-unit>
        <trans-unit id="dd6a2805f2f963b0be3ba8b33bfea7dbaf2bae7a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, as well as non-</source>
          <target state="translated">&amp;rsquo;, as well as non-</target>
        </trans-unit>
        <trans-unit id="cf71817d582852c22bf34174bab7285f97e98138" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, because the first alternative matches &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, because the first alternative matches &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="a5eeb7e27e20f7c95143b3f5f98bd9accad35990" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, because this does not make the result shorter on many systems.</source>
          <target state="translated">&amp;rsquo;, because this does not make the result shorter on many systems.</target>
        </trans-unit>
        <trans-unit id="e7319ec80359dd64367acbbf52a52abc5b0ac7ac" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, before the first process finishes. Then it finishes, and a message to that effect is inserted in the buffer. Much later, the first process finishes, and another message is inserted in the buffer for it.</source>
          <target state="translated">&amp;rsquo;, before the first process finishes. Then it finishes, and a message to that effect is inserted in the buffer. Much later, the first process finishes, and another message is inserted in the buffer for it.</target>
        </trans-unit>
        <trans-unit id="62687524905fd3217ebef6a7f3a08f508131933b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but does not match &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, but does not match &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="c52ad5539e65fef0eeef4cf635e079ab241e2ec1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but doesn&amp;rsquo;t trigger the debugger, like &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, but doesn&amp;rsquo;t trigger the debugger, like &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="5f09cbf589014435dbb7b986c44c06fb63bbac75" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but if the documentation string is more than one line, add a button to control whether to show all of it or just the first line.</source>
          <target state="translated">&amp;rsquo;, but if the documentation string is more than one line, add a button to control whether to show all of it or just the first line.</target>
        </trans-unit>
        <trans-unit id="7ceba937bfc9a96b6a099111312d4ae79763a04d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but including the end-of-line format.</source>
          <target state="translated">&amp;rsquo;, but including the end-of-line format.</target>
        </trans-unit>
        <trans-unit id="859b879cb4a6f1a71cb6973d20358a673fa9d9ec" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but it does match a &lt;em&gt;part&lt;/em&gt; of that string.) Likewise, &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, but it does match a &lt;em&gt;part&lt;/em&gt; of that string.) Likewise, &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="e7b9f80d7801c176927afa59dcd8c02d42b70f17" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but not in all, so no more than &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, but not in all, so no more than &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="0142711131c20a9b6c8bfc476c54fc1f255841b5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but the size is printed in a more readable way by using &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, but the size is printed in a more readable way by using &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="87d19d6b140356263751c838f6a12d58195bff82" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but this need not be the case. An ordinary element of the alist looks like &lt;code&gt;(&lt;var&gt;regexp&lt;/var&gt; .  &lt;var&gt;mode-function&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">&amp;rsquo;, but this need not be the case. An ordinary element of the alist looks like &lt;code&gt;(&lt;var&gt;regexp&lt;/var&gt; . &lt;var&gt;mode-function&lt;/var&gt;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9bc318f345b18ef1218daf8d3548ccfa3e2fe847" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but used when bootstrapping Emacs with the &lt;code&gt;unexec&lt;/code&gt; method.</source>
          <target state="translated">&amp;rsquo;, but used when bootstrapping Emacs with the &lt;code&gt;unexec&lt;/code&gt; method.</target>
        </trans-unit>
        <trans-unit id="dda3dbfad9ce80bdcd98c7d7577e074881ef817a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but used while &lt;em&gt;bootstrapping&lt;/em&gt; Emacs, when no previous Emacs binary and no</source>
          <target state="translated">&amp;rsquo;, but used while &lt;em&gt;bootstrapping&lt;/em&gt; Emacs, when no previous Emacs binary and no</target>
        </trans-unit>
        <trans-unit id="6edf9c6e42cb1b8af0583036aa2a27ff0ea91717" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, calling &lt;code&gt;replace-match&lt;/code&gt; with 1 as &lt;var&gt;subexp&lt;/var&gt; means to replace just the text that matched &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, calling &lt;code&gt;replace-match&lt;/code&gt; with 1 as &lt;var&gt;subexp&lt;/var&gt; means to replace just the text that matched &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="4c61544a2ca1c94566789e3f17496259ce0ca65d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, contains &lt;code&gt;control&lt;/code&gt;, even though reading such an event via &lt;code&gt;read-char&lt;/code&gt; will return the value 1 with the control modifier bit removed.</source>
          <target state="translated">&amp;rsquo;, contains &lt;code&gt;control&lt;/code&gt; , even though reading such an event via &lt;code&gt;read-char&lt;/code&gt; will return the value 1 with the control modifier bit removed.</target>
        </trans-unit>
        <trans-unit id="26718c8e3e230761411b4e6694bd329645c493d6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, does not have the &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, does not have the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="7f3284e26aa04e7ac21bbc46bc429686b975f1ed" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, e.g. use &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, e.g. use &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="33d5eb9b39c7958f64baa156603face69d362adc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, e.g., &lt;code&gt;bury-buffer-internal&lt;/code&gt;. Emacs code contributed before 2018 may follow other internal-use naming conventions, which are being phased out.</source>
          <target state="translated">&amp;rsquo;, e.g., &lt;code&gt;bury-buffer-internal&lt;/code&gt; . Emacs code contributed before 2018 may follow other internal-use naming conventions, which are being phased out.</target>
        </trans-unit>
        <trans-unit id="5899fa884bf6a23ef37e4ff79b3a5d5a62adf694" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, etc.</source>
          <target state="translated">&amp;rsquo;, etc.</target>
        </trans-unit>
        <trans-unit id="4b72eac989215486a1a51108725f3a7d0efc53ec" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, etc. A function key symbol appears inside angle brackets &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, etc. A function key symbol appears inside angle brackets &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="5b75f27279a8328cc1ea5e9c24e09f83535108b7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, etc.) are not recognized; use &lt;code&gt;substitute-in-file-name&lt;/code&gt; to perform them (see &lt;a href=&quot;file-name-expansion#File-Name-Expansion&quot;&gt;File Name Expansion&lt;/a&gt;). &lt;code&gt;nil&lt;/code&gt; in this list refers to &lt;code&gt;default-directory&lt;/code&gt;.</source>
          <target state="translated">&amp;rsquo;, etc.) are not recognized; use &lt;code&gt;substitute-in-file-name&lt;/code&gt; to perform them (see &lt;a href=&quot;file-name-expansion#File-Name-Expansion&quot;&gt;File Name Expansion&lt;/a&gt;). &lt;code&gt;nil&lt;/code&gt; in this list refers to &lt;code&gt;default-directory&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7813427aade80c1314ac6927d6793b1321a0a1e9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, etc.) has been modified most recently.</source>
          <target state="translated">&amp;rsquo;, etc.) has been modified most recently.</target>
        </trans-unit>
        <trans-unit id="a44d89b0939008a6b5d0726a80bd725ce696b317" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, etc.) to be unique.</source>
          <target state="translated">&amp;rsquo;, etc.) to be unique.</target>
        </trans-unit>
        <trans-unit id="3471a058ca997cbc925d62756d5891f72374258b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, etc., are allowed; use</source>
          <target state="translated">&amp;rsquo;, etc., are allowed; use</target>
        </trans-unit>
        <trans-unit id="b0eff0a73f03d758217829a28766d07feef2eaf1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, etc., with any number (zero or more) of &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, etc., with any number (zero or more) of &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="72aa9b4cba8dc77e0788decce34009e8d7ff4e3f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, even in comments, and another to fontify the words &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, even in comments, and another to fontify the words &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="6cadb9c9597504f595d438bea28b6197fcf2461a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, except that it suppresses, for the last input event in the key sequence, the conversions that are normally used (when necessary) to convert an undefined key into a defined one.</source>
          <target state="translated">&amp;rsquo;, except that it suppresses, for the last input event in the key sequence, the conversions that are normally used (when necessary) to convert an undefined key into a defined one.</target>
        </trans-unit>
        <trans-unit id="b559bdf2c4948c3101eba4777f23ae665f33d458" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, followed by a literal dollar sign &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, followed by a literal dollar sign &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="a670724dd2089632f9f5dfa64baf70a0beaec53d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, followed by the function name and argument values. A function exit record consists of &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, followed by the function name and argument values. A function exit record consists of &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="71e626d7e00f88fbc99772a03efd0bbd3f2d6bdc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, followed by the function name and result of the function.</source>
          <target state="translated">&amp;rsquo;, followed by the function name and result of the function.</target>
        </trans-unit>
        <trans-unit id="ef1dbf1340b0ad5e609277891c75820552596dc1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, followed by the original error message.</source>
          <target state="translated">&amp;rsquo;, followed by the original error message.</target>
        </trans-unit>
        <trans-unit id="7cbc2be0f94402568f184a400397666ec97e5f28" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, has the &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, has the &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="a90beacfb62e7aff19d5941f65c4681b9680491f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, hyperlinks, or images. Special HTML characters must be encoded, as &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, hyperlinks, or images. Special HTML characters must be encoded, as &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="8ff967d1e85ab5b812b2b0a3d0719cd5dec1c057" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, if it is necessary to ensure that a postfix operator appended to it will apply to the whole expression.</source>
          <target state="translated">&amp;rsquo;, if it is necessary to ensure that a postfix operator appended to it will apply to the whole expression.</target>
        </trans-unit>
        <trans-unit id="42e580d8888181b0569cb8f8f481c65766ed18f5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, if necessary to ensure that a postfix operator appended to it will apply to the whole expression.</source>
          <target state="translated">&amp;rsquo;, if necessary to ensure that a postfix operator appended to it will apply to the whole expression.</target>
        </trans-unit>
        <trans-unit id="9fd91eff8d33cb0a712338a9b0255efc6b408b19" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, in which the first three characters have a &lt;code&gt;face&lt;/code&gt; property with value &lt;code&gt;bold&lt;/code&gt;, and the last three have a &lt;code&gt;face&lt;/code&gt; property with value &lt;code&gt;italic&lt;/code&gt;. (The fourth character has no text properties, so its property list is &lt;code&gt;nil&lt;/code&gt;. It is not actually necessary to mention ranges with &lt;code&gt;nil&lt;/code&gt; as the property list, since any characters not mentioned in any range will default to having no properties.)</source>
          <target state="translated">&amp;rsquo;, in which the first three characters have a &lt;code&gt;face&lt;/code&gt; property with value &lt;code&gt;bold&lt;/code&gt; , and the last three have a &lt;code&gt;face&lt;/code&gt; property with value &lt;code&gt;italic&lt;/code&gt; . (The fourth character has no text properties, so its property list is &lt;code&gt;nil&lt;/code&gt; . It is not actually necessary to mention ranges with &lt;code&gt;nil&lt;/code&gt; as the property list, since any characters not mentioned in any range will default to having no properties.)</target>
        </trans-unit>
        <trans-unit id="fd62f65ccd385e61ef3117c8c0554dba8febc645" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, instead of an actual whitespace character such as a tab or a space. (If you do write backslash followed by a space, you should write an extra space after the character constant to separate it from the following text.)</source>
          <target state="translated">&amp;rsquo;, instead of an actual whitespace character such as a tab or a space. (If you do write backslash followed by a space, you should write an extra space after the character constant to separate it from the following text.)</target>
        </trans-unit>
        <trans-unit id="8ea7e8bd5804f3451344697353520850d00e1e77" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, interned in the standard obarray, and returns &lt;code&gt;nil&lt;/code&gt; otherwise.</source>
          <target state="translated">&amp;rsquo;, interned in the standard obarray, and returns &lt;code&gt;nil&lt;/code&gt; otherwise.</target>
        </trans-unit>
        <trans-unit id="a8112eb688b9a06c9b61586ff27364c1c6d1efd3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, irrespective of where that text goes. The value returned by evaluating the form follows on a separate line with &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, irrespective of where that text goes. The value returned by evaluating the form follows on a separate line with &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="557a6be7e9046670afa396beb457e3eb865089c0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, is a prefix key whose definition is the sparse keymap &lt;code&gt;(keymap (83 . center-paragraph)
(115 . foo))&lt;/code&gt;.</source>
          <target state="translated">&amp;rsquo;, is a prefix key whose definition is the sparse keymap &lt;code&gt;(keymap (83 . center-paragraph) (115 . foo))&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9c8930179e5be49afb68b72ce3dc35efd148fa1b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, it adds &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, it adds &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="854289abca9f8e32f3c539d916a84aba1820a429" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, it always includes a decimal point, and also forces any trailing zeros after the decimal point to be left in place where they would otherwise be removed.</source>
          <target state="translated">&amp;rsquo;, it always includes a decimal point, and also forces any trailing zeros after the decimal point to be left in place where they would otherwise be removed.</target>
        </trans-unit>
        <trans-unit id="209a2bdfe4cef518986af06a47970f2f9571e9e1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, it ensures that the result begins with a &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, it ensures that the result begins with a &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="1cfc47c32f0b164cd7e9624c6d6b7ca0369854bc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, it expands to your home directory, which is typically specified by the value of the &lt;code&gt;HOME&lt;/code&gt; environment variable (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/General-Variables.html#General-Variables&quot;&gt;General Variables&lt;/a&gt; in</source>
          <target state="translated">&amp;rsquo;, it expands to your home directory, which is typically specified by the value of the &lt;code&gt;HOME&lt;/code&gt; environment variable (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/General-Variables.html#General-Variables&quot;&gt;General Variables&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="f8eb5aeea81c17bc738eba82be2498ff2ad544ae" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, it is treated as an HTTP(S) URL, and packages are downloaded from this archive via HTTP(S) (as is the case for the default GNU archive).</source>
          <target state="translated">&amp;rsquo;, it is treated as an HTTP(S) URL, and packages are downloaded from this archive via HTTP(S) (as is the case for the default GNU archive).</target>
        </trans-unit>
        <trans-unit id="f19355987aea63506d06dbaef16efeea45edcce9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, it prefixes nonzero results with &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, it prefixes nonzero results with &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="ddb0c1584f2dd17d31e5dace7a41d6aef83b9d85" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, it responds by displaying these prompts, with a brief pause between them:</source>
          <target state="translated">&amp;rsquo;, it responds by displaying these prompts, with a brief pause between them:</target>
        </trans-unit>
        <trans-unit id="a44e87f688870f275f8756f192b14ddd8822ef3f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, it signals a directory. The elements which do &lt;em&gt;not&lt;/em&gt; end in a slash will never match a directory; thus, the above value will not filter out a directory named</source>
          <target state="translated">&amp;rsquo;, it signals a directory. The elements which do &lt;em&gt;not&lt;/em&gt; end in a slash will never match a directory; thus, the above value will not filter out a directory named</target>
        </trans-unit>
        <trans-unit id="ec16eb7b0c1cb9c8607690b91d25398c8caf393a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, just as in the &lt;code&gt;lambda&lt;/code&gt; case. It also marks the stack frame for that function so that it will invoke the debugger when exited.</source>
          <target state="translated">&amp;rsquo;, just as in the &lt;code&gt;lambda&lt;/code&gt; case. It also marks the stack frame for that function so that it will invoke the debugger when exited.</target>
        </trans-unit>
        <trans-unit id="83092682c6a59fa344aca66d9ba9aaa7e1ccd9f8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, just like &lt;code&gt;foo&lt;/code&gt;.</source>
          <target state="translated">&amp;rsquo;, just like &lt;code&gt;foo&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d203181767dc37e11a2f6d26507baf1fdd7187cc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, just like the &lt;code&gt;DISPLAY&lt;/code&gt; environment variable. See &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;, for more details about display names.</source>
          <target state="translated">&amp;rsquo;, just like the &lt;code&gt;DISPLAY&lt;/code&gt; environment variable. See &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;, for more details about display names.</target>
        </trans-unit>
        <trans-unit id="a266aeed89e5fa57fed340244a45960f77e7691f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, not &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, not &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="baff3f4810431dfaf416e663468b15734a511eee" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, not a repeating &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, not a repeating &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="12808fdbb4df64a0d98e5d152321dc1940847ee6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, on a line by itself, just before the real definition of the function in its autoloadable source file. The command</source>
          <target state="translated">&amp;rsquo;, on a line by itself, just before the real definition of the function in its autoloadable source file. The command</target>
        </trans-unit>
        <trans-unit id="4dccfe9d8e373780189a9d807e3e807e20ad8ef7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, on some operating systems). Here is an example of how to set &lt;code&gt;EMACSLOADPATH&lt;/code&gt; variable (from a &lt;code&gt;sh&lt;/code&gt;-style shell):</source>
          <target state="translated">&amp;rsquo;, on some operating systems). Here is an example of how to set &lt;code&gt;EMACSLOADPATH&lt;/code&gt; variable (from a &lt;code&gt;sh&lt;/code&gt; -style shell):</target>
        </trans-unit>
        <trans-unit id="f307dbc595c36b91f1275e80e0395cbaf3c6504c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, or &amp;lsquo;</source>
          <target state="translated">'또는'</target>
        </trans-unit>
        <trans-unit id="29deaee94adb830817c01ea0a980e084a12109ed" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, or as &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, or as &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="9fe2680d738987448bf60b3b2a0b793a2e0f2ca5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, or is &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, or is &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="4b66dabd0d4854d0d4dcae65bf54578dba111bef" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, or might contain shell metacharacters like &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, or might contain shell metacharacters like &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="bca920cdc554383444bb3b6111e0a125ab56934e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, or with any other syntax for a character. Thus, you can write</source>
          <target state="translated">&amp;rsquo;, or with any other syntax for a character. Thus, you can write</target>
        </trans-unit>
        <trans-unit id="fd629104c213567c8b9b59cea5c4ac24d9e33891" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, otherwise it is &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, otherwise it is &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="932f9ad086811ac69de73094d20fdfc55cd1613d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, put it anywhere but at the beginning. To include &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, put it anywhere but at the beginning. To include &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="ac95d1c364a19e6fb93d67835c657da7c1f099a3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, put it at the end. Thus, &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, put it at the end. Thus, &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="eb1825d9bb4f80cd4b0eddca59742dda79ee843c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, respectively.</source>
          <target state="translated">&amp;rsquo;, respectively.</target>
        </trans-unit>
        <trans-unit id="ece817085c311045c341994b91039d3691810f09" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, respectively. (&amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, respectively. (&amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="7caf85ba2ce09d88ab0f5bef4bba21a8182b427c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, respectively. Commands are simply functions that may be called interactively; macros process their arguments differently from functions (the arguments are not evaluated), but are presented the same way.</source>
          <target state="translated">&amp;rsquo;, respectively. Commands are simply functions that may be called interactively; macros process their arguments differently from functions (the arguments are not evaluated), but are presented the same way.</target>
        </trans-unit>
        <trans-unit id="b55241cd025410601c89de1a217371d0596cf8fb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, say,</source>
          <target state="translated">&amp;rsquo;, say,</target>
        </trans-unit>
        <trans-unit id="3b8962283218f8939e13b86964ef267e637c6084" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, so if you specify a code point higher than that, Emacs signals an error.</source>
          <target state="translated">&amp;rsquo;, so if you specify a code point higher than that, Emacs signals an error.</target>
        </trans-unit>
        <trans-unit id="7631bcd28615461a5ac383b81747b98e37b04894" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, so that is the result. In the second example, there is only one possible match, and it is exact, so the return value is &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">&amp;rsquo;, so that is the result. In the second example, there is only one possible match, and it is exact, so the return value is &lt;code&gt;t&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="35656c1f675569c7fc5da83ac95612bcdbd042ed" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, so that name is the value.</source>
          <target state="translated">&amp;rsquo;, so that name is the value.</target>
        </trans-unit>
        <trans-unit id="7d924ec8513fd883b0d6beb8f2e9a44a4ff32cf8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, so there can be up to 8 different comment styles, each one named by the set of its flags. Each comment delimiter has a style and only matches comment delimiters of the same style. Thus if a comment starts with the comment-start sequence of style &amp;ldquo;bn&amp;rdquo;, it will extend until the next matching comment-end sequence of style &amp;ldquo;bn&amp;rdquo;. When the set of flags has neither flag &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, so there can be up to 8 different comment styles, each one named by the set of its flags. Each comment delimiter has a style and only matches comment delimiters of the same style. Thus if a comment starts with the comment-start sequence of style &amp;ldquo;bn&amp;rdquo;, it will extend until the next matching comment-end sequence of style &amp;ldquo;bn&amp;rdquo;. When the set of flags has neither flag &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="d696b5a7c5b206ec83795d9be662c3758e1de7d8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, that &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, that &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="866e14327fe9e8c1b6ba4037e3a8483924e20e54" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, that indicates it is probably an &lt;em&gt;abnormal hook&lt;/em&gt;. That means the hook functions are called with arguments, or their return values are used in some way. The hook&amp;rsquo;s documentation says how the functions are called. You can use &lt;code&gt;add-hook&lt;/code&gt; to add a function to an abnormal hook, but you must write the function to follow the hook&amp;rsquo;s calling convention. By convention, abnormal hook names end in &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, that indicates it is probably an &lt;em&gt;abnormal hook&lt;/em&gt;. That means the hook functions are called with arguments, or their return values are used in some way. The hook&amp;rsquo;s documentation says how the functions are called. You can use &lt;code&gt;add-hook&lt;/code&gt; to add a function to an abnormal hook, but you must write the function to follow the hook&amp;rsquo;s calling convention. By convention, abnormal hook names end in &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="853a694e67280628e5b76a9284a39d5522f57fd1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, that is converted to &amp;lsquo;</source>
          <target state="translated">&amp;rsquo;, that is converted to &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="e8d7fa8ce9d022e453d0adeb216bada67b751fb8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, that tells you it is normal. We try to make all hooks normal, as much as possible, so that you can use them in a uniform way.</source>
          <target state="translated">&amp;rsquo;, that tells you it is normal. We try to make all hooks normal, as much as possible, so that you can use them in a uniform way.</target>
        </trans-unit>
        <trans-unit id="e2eb2a6258c791792b7bf3dda00569c106401394" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the &amp;lsquo;</source>
          <target state="translated">','</target>
        </trans-unit>
        <trans-unit id="62e55f6f017857e9057f15f60589334a4b5a8c6e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the function discards everything before it (up through the immediately preceding &amp;lsquo;</source>
          <target state="translated">', 함수는 앞의 모든 것을 버립니다 (바로 앞의'</target>
        </trans-unit>
        <trans-unit id="85d87d3c3517809647aa4617f6597bc82cb23f09" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the function is intended for internal use and the first part names the file defining the function. For example, a function named &lt;code&gt;vc-git--rev-parse&lt;/code&gt; is an internal function defined in</source>
          <target state="translated">', 함수는 내부 사용을위한 것이며 첫 번째 부분은 함수를 정의하는 파일의 이름을 지정합니다. 예를 들어 &lt;code&gt;vc-git--rev-parse&lt;/code&gt; 라는 함수는 다음에 정의 된 내부 함수입니다.</target>
        </trans-unit>
        <trans-unit id="3a7d0a305d524183e3f69a672129983d7d75d0c5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the precision specifies how many significant digits to show (significant digits are the first digit before the decimal point and all the digits after it). If the precision of %g is zero or unspecified, it is treated as 1. For &amp;lsquo;</source>
          <target state="translated">', 정밀도는 표시 할 유효 자릿수를 지정합니다 (유효 자릿수는 소수점 앞의 첫 번째 자릿수이고 그 뒤의 모든 자릿수). % g의 정밀도가 0이거나 지정되지 않은 경우 1로 처리됩니다. For '</target>
        </trans-unit>
        <trans-unit id="decb2e4702d70d45ef3b95a6bd64411a38df276e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the precision truncates the string to the given width, so &amp;lsquo;</source>
          <target state="translated">', 정밀도는 문자열을 주어진 너비로 자릅니다.</target>
        </trans-unit>
        <trans-unit id="2cb17eb545b962e04c970c0ebfa55bffa9715562" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the rest of the line is treated as the argument list for documentation purposes. This way, you can use different argument names in the documentation string from the ones used in the C code. &amp;lsquo;</source>
          <target state="translated">', 나머지 줄은 문서화를 위해 인수 목록으로 처리됩니다. 이렇게하면 문서 문자열에서 C 코드에서 사용 된 것과 다른 인수 이름을 사용할 수 있습니다. '</target>
        </trans-unit>
        <trans-unit id="9189b2404d248d7a2ad6625ed4367651c520966b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the return value will be &amp;lsquo;</source>
          <target state="translated">', 반환 값은'</target>
        </trans-unit>
        <trans-unit id="aea06e406ebe66d4bfe0190ee8c59dce5e33f240" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the string is evaluated as a Lisp form. For example:</source>
          <target state="translated">', 문자열은 Lisp 형식으로 평가됩니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="ec5acb6796d089d53f0bd9f5fb99b7120e3b9a49" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, then &amp;lsquo;</source>
          <target state="translated">'다음에'</target>
        </trans-unit>
        <trans-unit id="073ff7bbc11ef3c90dbe7af4086e720077d0e7d6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, then it will be checked if it is found, otherwise skipped without error.</source>
          <target state="translated">', 찾은 경우 확인하고 그렇지 않으면 오류없이 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="9c73c5b2b3d990a4a1b53b499086d9e1166ecff2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, then its value is just a single function, not a list of functions. &lt;code&gt;add-hook&lt;/code&gt; cannot be used to modify such a &lt;em&gt;single function hook&lt;/em&gt;, and you have to use &lt;code&gt;add-function&lt;/code&gt; instead (see &lt;a href=&quot;advising-functions#Advising-Functions&quot;&gt;Advising Functions&lt;/a&gt;).</source>
          <target state="translated">', 그 값은 함수 목록이 아닌 단일 함수입니다. &lt;code&gt;add-hook&lt;/code&gt; 은 이러한 &lt;em&gt;단일 함수 hook&lt;/em&gt; 을 수정하는 데 사용할 수 없으며 대신 &lt;code&gt;add-function&lt;/code&gt; 을 사용해야 합니다 ( 함수 &lt;a href=&quot;advising-functions#Advising-Functions&quot;&gt;조언&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="a3347ecb11e71dfb31d9a228f924667affdd799e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, then that changes the character at position 42 from &amp;lsquo;</source>
          <target state="translated">', 그러면 위치 42의 문자가'</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
