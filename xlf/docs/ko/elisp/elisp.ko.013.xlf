<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="elisp">
    <body>
      <group id="elisp">
        <trans-unit id="b5f5818990ffb371882dce4537255efe1cd466f7" translate="yes" xml:space="preserve">
          <source>Predicates for Strings</source>
          <target state="translated">문자열에 대한 술어</target>
        </trans-unit>
        <trans-unit id="442ffe2a26e139b52c8f550f48e68a7ff0384a94" translate="yes" xml:space="preserve">
          <source>Predicates on Lists</source>
          <target state="translated">목록의 술어</target>
        </trans-unit>
        <trans-unit id="d49b8773d143e9fa0eb02a21089beeae242b1962" translate="yes" xml:space="preserve">
          <source>Predicates on Markers</source>
          <target state="translated">마커에 대한 술어</target>
        </trans-unit>
        <trans-unit id="46f7b3c414e7e9b45a8f34a40c695f3aa31c75d5" translate="yes" xml:space="preserve">
          <source>Prefer &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;true&lt;/code&gt; for booleans. Using &lt;code&gt;bool&lt;/code&gt; can make programs easier to read and a bit faster than using &lt;code&gt;int&lt;/code&gt;. Although it is also OK to use &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;, this older style is gradually being phased out. When using &lt;code&gt;bool&lt;/code&gt;, respect the limitations of the replacement implementation of &lt;code&gt;bool&lt;/code&gt;, as documented in the source file</source>
          <target state="translated">&lt;code&gt;bool&lt;/code&gt; 에는 bool , &lt;code&gt;false&lt;/code&gt; 및 &lt;code&gt;true&lt;/code&gt; 를 선호 합니다. &lt;code&gt;bool&lt;/code&gt; 을 사용하면 &lt;code&gt;int&lt;/code&gt; 를 사용하는 것보다 프로그램을 더 쉽게 읽을 수 있고 조금 더 빠르게 만들 수 있습니다 . &lt;code&gt;int&lt;/code&gt; , &lt;code&gt;0&lt;/code&gt; 및 &lt;code&gt;1&lt;/code&gt; 을 사용하는 것도 괜찮지 만이 이전 스타일은 점차 단계적으로 제거되고 있습니다. &lt;code&gt;bool&lt;/code&gt; 을 사용할 때 소스 파일에 설명 된대로 &lt;code&gt;bool&lt;/code&gt; 대체 구현의 제한 사항을 준수 하십시오.</target>
        </trans-unit>
        <trans-unit id="e90dac2bef91521c9b188ca145887974636ecc63" translate="yes" xml:space="preserve">
          <source>Prefer &lt;code&gt;int&lt;/code&gt; for Emacs character codes, in the range 0 .. 0x3FFFFF. More generally, prefer &lt;code&gt;int&lt;/code&gt; for integers known to be in &lt;code&gt;int&lt;/code&gt; range, e.g., screen column counts.</source>
          <target state="translated">0 .. 0x3FFFFF 범위의 Emacs 문자 코드에는 &lt;code&gt;int&lt;/code&gt; 를 선호 합니다. 더 일반적으로, &lt;code&gt;int&lt;/code&gt; 범위 에있는 것으로 알려진 정수 ( 예 : 화면 열 수)에 대해서는 &lt;code&gt;int&lt;/code&gt; 를 선호 합니다.</target>
        </trans-unit>
        <trans-unit id="6abf985b52c94873bd501a840ff79256f37b786f" translate="yes" xml:space="preserve">
          <source>Prefer &lt;code&gt;intmax_t&lt;/code&gt; for representing values that might be any signed integer value. A &lt;code&gt;printf&lt;/code&gt;-family function can print such a value via a format like &lt;code&gt;&quot;%&quot;PRIdMAX&lt;/code&gt;.</source>
          <target state="translated">부호있는 정수 값일 수있는 값을 표시하려면 &lt;code&gt;intmax_t&lt;/code&gt; 를 선호 합니다. &lt;code&gt;printf&lt;/code&gt; -family 함수와 같은 형식을 통해 이러한 값을 출력 할 수 &lt;code&gt;&quot;%&quot;PRIdMAX&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5aba5324ce8cab9dcb20a85c6046cc14468964db" translate="yes" xml:space="preserve">
          <source>Prefer &lt;code&gt;ptrdiff_t&lt;/code&gt; for sizes, i.e., for integers bounded by the maximum size of any individual C object or by the maximum number of elements in any C array. This is part of Emacs&amp;rsquo;s general preference for signed types. Using &lt;code&gt;ptrdiff_t&lt;/code&gt; limits objects to &lt;code&gt;PTRDIFF_MAX&lt;/code&gt; bytes, but larger objects would cause trouble anyway since they would break pointer subtraction, so this does not impose an arbitrary limit.</source>
          <target state="translated">크기에 대해 &lt;code&gt;ptrdiff_t&lt;/code&gt; 를 선호 합니다. 즉, 개별 C 객체의 최대 크기 또는 C 배열의 최대 요소 수에 의해 제한되는 정수의 경우. 이것은 서명 된 유형에 대한 Emacs의 일반적인 기본 설정의 일부입니다. &lt;code&gt;ptrdiff_t&lt;/code&gt; 를 사용하면 개체가 &lt;code&gt;PTRDIFF_MAX&lt;/code&gt; 바이트로 제한 되지만 더 큰 개체는 포인터 빼기를 중단하므로 문제가 발생할 수 있으므로 임의의 제한이 부과되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8e94bb20236e0858945d4668328a5de11ef32384" translate="yes" xml:space="preserve">
          <source>Prefer signed types to unsigned, as code gets confusing when signed and unsigned types are combined. Many other guidelines assume that types are signed; in the rarer cases where unsigned types are needed, similar advice may apply to the unsigned counterparts (e.g., &lt;code&gt;size_t&lt;/code&gt; instead of &lt;code&gt;ptrdiff_t&lt;/code&gt;, or &lt;code&gt;uintptr_t&lt;/code&gt; instead of &lt;code&gt;intptr_t&lt;/code&gt;).</source>
          <target state="translated">부호있는 유형과 서명되지 않은 유형이 결합되면 코드가 혼동을 일으키므로 부호없는 유형보다 서명 된 유형을 선호하십시오. 다른 많은 지침에서는 유형이 서명되었다고 가정합니다. 서명되지 않은 유형이 필요한 드문 경우에 유사한 조언이 서명되지 않은 대응 물에 적용될 수 있습니다 (예 : &lt;code&gt;ptrdiff_t&lt;/code&gt; 대신 &lt;code&gt;size_t&lt;/code&gt; 또는 &lt;code&gt;intptr_t&lt;/code&gt; 대신 &lt;code&gt;uintptr_t&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="eb7db6d9838695e18c3cfbbb520e7db0376d0493" translate="yes" xml:space="preserve">
          <source>Prefer the Emacs-defined type &lt;code&gt;EMACS_INT&lt;/code&gt; for representing values converted to or from Emacs Lisp fixnums, as fixnum arithmetic is based on &lt;code&gt;EMACS_INT&lt;/code&gt;.</source>
          <target state="translated">fixnum 산술은 EMACS_INT를 기반으로 &lt;code&gt;EMACS_INT&lt;/code&gt; Emacs Lisp fixnums로 또는 Emacs Lisp fixnums에서 변환 된 값을 나타내는 데 Emacs 정의 유형 &lt;code&gt;EMACS_INT&lt;/code&gt; 를 선호 합니다.</target>
        </trans-unit>
        <trans-unit id="90eceb016c51a762f15c7287008c113f6f37296c" translate="yes" xml:space="preserve">
          <source>Prefix</source>
          <target state="translated">Prefix</target>
        </trans-unit>
        <trans-unit id="f2dde8bb9369c48db82506a473e93f7ed3d5942d" translate="yes" xml:space="preserve">
          <source>Prefix Command Arguments</source>
          <target state="translated">접두사 명령 인수</target>
        </trans-unit>
        <trans-unit id="fc822d5fffcf943b9b68bade876c53fa39133517" translate="yes" xml:space="preserve">
          <source>Prefix Command: &lt;strong&gt;help-command&lt;/strong&gt;</source>
          <target state="translated">접두사 명령 : &lt;strong&gt;help-command&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8127e5cff40d331d2889508db678ae3da7edce03" translate="yes" xml:space="preserve">
          <source>Prefix Keys</source>
          <target state="translated">접두사 키</target>
        </trans-unit>
        <trans-unit id="817021ee105a177dc2b7d088adcd2a6072b0d3fc" translate="yes" xml:space="preserve">
          <source>Prefix key definitions can appear in any active keymap. The definitions of</source>
          <target state="translated">접두사 키 정의는 모든 활성 키맵에 나타날 수 있습니다. 정의</target>
        </trans-unit>
        <trans-unit id="5836ac851edf7d470c1d5663cc48d0f741b10afb" translate="yes" xml:space="preserve">
          <source>Prefix keys are not supported; each key binding must be for a single-event key sequence. This is because the functions don&amp;rsquo;t use &lt;code&gt;read-key-sequence&lt;/code&gt; to get the input; instead, they read a single event and look it up &amp;ldquo;by hand&amp;rdquo;.</source>
          <target state="translated">접두사 키는 지원되지 않습니다. 각 키 바인딩은 단일 이벤트 키 시퀀스에 대한 것이어야합니다. 이것은 함수가 입력을 얻기 위해 &lt;code&gt;read-key-sequence&lt;/code&gt; 를 사용하지 않기 때문입니다 . 대신, 그들은 단일 이벤트를 읽고 &quot;손으로&quot;조회합니다.</target>
        </trans-unit>
        <trans-unit id="c4ae4b776a504ab9c3984d5b960e50114372390f" translate="yes" xml:space="preserve">
          <source>Preparing Lisp code for distribution</source>
          <target state="translated">배포를위한 Lisp 코드 준비</target>
        </trans-unit>
        <trans-unit id="10350ff9d1e72d872a5f8f9d7298748467902f2b" translate="yes" xml:space="preserve">
          <source>Preparing Lisp code for distribution.</source>
          <target state="translated">배포를 위해 Lisp 코드 준비.</target>
        </trans-unit>
        <trans-unit id="3fbbb867e77ea91146750aea189a6cf551e1e134" translate="yes" xml:space="preserve">
          <source>Preserving Window Sizes</source>
          <target state="translated">창 크기 유지</target>
        </trans-unit>
        <trans-unit id="0c99adaa60348b0a7126fde1061a297dc36572d3" translate="yes" xml:space="preserve">
          <source>Preserving parts of the window layout.</source>
          <target state="translated">창 레이아웃의 일부를 유지합니다.</target>
        </trans-unit>
        <trans-unit id="6a0869815cba064e511a1c537e094bcd0e750151" translate="yes" xml:space="preserve">
          <source>Preserving the frame layout when splitting and deleting windows.</source>
          <target state="translated">창을 분할하고 삭제할 때 프레임 레이아웃을 유지합니다.</target>
        </trans-unit>
        <trans-unit id="9c0038945c8e114f3f1807b0a52d587b5b1bd28c" translate="yes" xml:space="preserve">
          <source>Preserving the size of windows.</source>
          <target state="translated">창 크기 유지.</target>
        </trans-unit>
        <trans-unit id="ea683ad616063b7347bdddeee7203a82e1a3805b" translate="yes" xml:space="preserve">
          <source>Press</source>
          <target state="translated">Press</target>
        </trans-unit>
        <trans-unit id="077d78d93e37589dfda68a661edba7765c9a96eb" translate="yes" xml:space="preserve">
          <source>Pretty name of the major mode, e.g., &lt;code&gt;&quot;Lisp&quot;&lt;/code&gt;.</source>
          <target state="translated">주 모드의 예쁜 이름, 예 : &lt;code&gt;&quot;Lisp&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="531715daf7ebc8ef98855e02895358381e85f316" translate="yes" xml:space="preserve">
          <source>Pretty-print &lt;var&gt;dom&lt;/var&gt; at point. If &lt;var&gt;remove-empty&lt;/var&gt;, don&amp;rsquo;t print textual nodes that just contain white-space.</source>
          <target state="translated">지점에서 예쁜 인쇄 &lt;var&gt;dom&lt;/var&gt; . &lt;var&gt;remove-empty&lt;/var&gt; 인 경우 공백 만 포함하는 텍스트 노드를 인쇄하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="e9e155626bd628166db4aa789fdecee502d51e80" translate="yes" xml:space="preserve">
          <source>Primitive Function Type</source>
          <target state="translated">원시 함수 유형</target>
        </trans-unit>
        <trans-unit id="d4b920e2aa288558fd4452eaffcbabb2af4ae49b" translate="yes" xml:space="preserve">
          <source>Primitive functions have no read syntax and print in hash notation with the name of the subroutine.</source>
          <target state="translated">기본 함수에는 읽기 구문이 없으며 서브 루틴의 이름과 함께 해시 표기법으로 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="6a9fe8615a701b97218da662f3a8ac14d6a4e2e2" translate="yes" xml:space="preserve">
          <source>Primitives to manipulate advice.</source>
          <target state="translated">조언을 조작하기위한 프리미티브.</target>
        </trans-unit>
        <trans-unit id="6fe4360c793f86fad27a09cbb948550825d8306d" translate="yes" xml:space="preserve">
          <source>Primitives to manipulate advices</source>
          <target state="translated">조언을 조작하는 프리미티브</target>
        </trans-unit>
        <trans-unit id="06e0d7c66571d0f6d87aa8043cbfa0b78303b0e0" translate="yes" xml:space="preserve">
          <source>Print name</source>
          <target state="translated">이름을 새기다</target>
        </trans-unit>
        <trans-unit id="69544e79a072d0314baaf9607247e3926667f4b3" translate="yes" xml:space="preserve">
          <source>Printed Representation and Read Syntax</source>
          <target state="translated">인쇄 된 표현 및 읽기 구문</target>
        </trans-unit>
        <trans-unit id="8ccedf5a8ea780671c6a52974e6be904b03133b1" translate="yes" xml:space="preserve">
          <source>Printing Notation</source>
          <target state="translated">표기법</target>
        </trans-unit>
        <trans-unit id="7312416c2b8010e4c72ab0d5fa97039ad88c9d67" translate="yes" xml:space="preserve">
          <source>Printing can produce text that cannot be read. For example, buffers, windows, frames, subprocesses and markers print as text that starts with &amp;lsquo;</source>
          <target state="translated">인쇄하면 읽을 수없는 텍스트가 생성 될 수 있습니다. 예를 들어, 버퍼, 창, 프레임, 하위 프로세스 및 마커는 '로 시작하는 텍스트로 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="a49547abb517cf476f465ac950cd09fc7cf42082" translate="yes" xml:space="preserve">
          <source>Printing in Edebug</source>
          <target state="translated">Edebug에서 인쇄</target>
        </trans-unit>
        <trans-unit id="1478d8b6646a5b6c28fcb2c26cdab0af796a34c6" translate="yes" xml:space="preserve">
          <source>Prior to executing the command, Emacs runs &lt;code&gt;undo-boundary&lt;/code&gt; to create an undo boundary. See &lt;a href=&quot;maintaining-undo#Maintaining-Undo&quot;&gt;Maintaining Undo&lt;/a&gt;.</source>
          <target state="translated">명령을 실행하기 전에 Emacs는 &lt;code&gt;undo-boundary&lt;/code&gt; 실행 취소 를 실행하여 실행 취소 경계 를 만듭니다. &lt;a href=&quot;maintaining-undo#Maintaining-Undo&quot;&gt;실행 취소 유지를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c9730a0155bb21c8af306ff2d9e1e2ca1ea11f5a" translate="yes" xml:space="preserve">
          <source>Prior to installation, a multi-file package is stored in a package archive as a tar file. The tar file must be named</source>
          <target state="translated">설치 전에 다중 파일 패키지는 패키지 아카이브에 tar 파일로 저장됩니다. tar 파일의 이름은</target>
        </trans-unit>
        <trans-unit id="ce845e6b0aa275c28de44782dd6ee706a0038583" translate="yes" xml:space="preserve">
          <source>Proceed to the stop point near where point is (&lt;code&gt;edebug-goto-here&lt;/code&gt;).</source>
          <target state="translated">지점이있는 지점 근처의 중지 지점 ( &lt;code&gt;edebug-goto-here&lt;/code&gt; )으로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="a7ddba4cc1f556ac8301507aef95c2eb40133e9b" translate="yes" xml:space="preserve">
          <source>Process &lt;var&gt;spec-name&lt;/var&gt; as a sub-specification. This describes a structure nested within another structure.</source>
          <target state="translated">처리 &lt;var&gt;spec-name&lt;/var&gt; 하위 사양 등을. 이것은 다른 구조 내에 중첩 된 구조를 설명합니다.</target>
        </trans-unit>
        <trans-unit id="b61ce7d62891ad9c77d8356faa4d21e99475b062" translate="yes" xml:space="preserve">
          <source>Process Buffers</source>
          <target state="translated">프로세스 버퍼</target>
        </trans-unit>
        <trans-unit id="388a07565282836943b234cb56d32f5aaedadf4d" translate="yes" xml:space="preserve">
          <source>Process Filter Functions</source>
          <target state="translated">공정 필터 기능</target>
        </trans-unit>
        <trans-unit id="82bbfe85a5064f53c30df0b409969f7286c3ee10" translate="yes" xml:space="preserve">
          <source>Process Information</source>
          <target state="translated">공정 정보</target>
        </trans-unit>
        <trans-unit id="47289f1e56f217b7b80a0cc10d8010bd99f47a6f" translate="yes" xml:space="preserve">
          <source>Process Internals</source>
          <target state="translated">프로세스 내부</target>
        </trans-unit>
        <trans-unit id="a3ecc75c0ef59a79b8629845db769dd698d63aee" translate="yes" xml:space="preserve">
          <source>Process Type</source>
          <target state="translated">프로세스 유형</target>
        </trans-unit>
        <trans-unit id="eb5f5e6bcdf5acb4a18fe835289e7deaa3131609" translate="yes" xml:space="preserve">
          <source>Process objects have no read syntax. They print in hash notation, giving the name of the process:</source>
          <target state="translated">프로세스 개체에는 읽기 구문이 없습니다. 해시 표기법으로 인쇄하여 프로세스 이름을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="7b2a6ac8c2aedf47a7dc723aeee816d7cb51bcb1" translate="yes" xml:space="preserve">
          <source>Process the &lt;var&gt;field-specs&lt;/var&gt; recursively, in order, then repeat starting from the first one, processing all the specifications &lt;var&gt;count&lt;/var&gt; times overall. The &lt;var&gt;count&lt;/var&gt; is given using the same formats as a field length&amp;mdash;if an &lt;code&gt;eval&lt;/code&gt; form is used, it is evaluated just once. For correct operation, each specification in &lt;var&gt;field-specs&lt;/var&gt; must include a name.</source>
          <target state="translated">프로세스 &lt;var&gt;field-specs&lt;/var&gt; 한 후, 처음부터 모든 사양은 처리를 반복하기, 반복적으로 &lt;var&gt;count&lt;/var&gt; 전반적인 번. &lt;var&gt;count&lt;/var&gt; 길이-경우 필드와 동일한 포맷을 사용하여 주어진 &lt;code&gt;eval&lt;/code&gt; 형태로 사용하고, 그것이 한번만 평가된다. 올바른 작동을 위해 &lt;var&gt;field-specs&lt;/var&gt; 각 사양 에는 이름이 포함되어야합니다.</target>
        </trans-unit>
        <trans-unit id="ce0e1a372c609efa3318c56c4f9bd77418472459" translate="yes" xml:space="preserve">
          <source>Process-based JSONRPC connections</source>
          <target state="translated">프로세스 기반 JSONRPC 연결</target>
        </trans-unit>
        <trans-unit id="ed7308bb59f2876220e45299939d241199595df2" translate="yes" xml:space="preserve">
          <source>Processes</source>
          <target state="translated">Processes</target>
        </trans-unit>
        <trans-unit id="5f86fd596bc409e1c58d5c382f46bf1605423851" translate="yes" xml:space="preserve">
          <source>Processes and Threads</source>
          <target state="translated">프로세스 및 스레드</target>
        </trans-unit>
        <trans-unit id="14f958f6abd050bdccac455398bea4f88719fe76" translate="yes" xml:space="preserve">
          <source>Processor Run time</source>
          <target state="translated">프로세서 실행 시간</target>
        </trans-unit>
        <trans-unit id="7ca6cefa03b4cc37b1ca7248c4b3124ef11af957" translate="yes" xml:space="preserve">
          <source>Produces a literal &amp;lsquo;</source>
          <target state="translated">리터럴 '</target>
        </trans-unit>
        <trans-unit id="cea5295b78ec1b99a624dda73a7e6d10f18cdf3f" translate="yes" xml:space="preserve">
          <source>Profiling</source>
          <target state="translated">Profiling</target>
        </trans-unit>
        <trans-unit id="c154c3adc3938975f05131376f2e5436e405861f" translate="yes" xml:space="preserve">
          <source>Prog mode binds &lt;code&gt;parse-sexp-ignore-comments&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; (see &lt;a href=&quot;motion-via-parsing#Motion-via-Parsing&quot;&gt;Motion via Parsing&lt;/a&gt;) and &lt;code&gt;bidi-paragraph-direction&lt;/code&gt; to &lt;code&gt;left-to-right&lt;/code&gt; (see &lt;a href=&quot;bidirectional-display#Bidirectional-Display&quot;&gt;Bidirectional Display&lt;/a&gt;).</source>
          <target state="translated">Prog 모드는 &lt;code&gt;parse-sexp-ignore-comments&lt;/code&gt; 를 &lt;code&gt;t&lt;/code&gt; ( &lt;a href=&quot;motion-via-parsing#Motion-via-Parsing&quot;&gt;파싱을 통한 동작&lt;/a&gt; 참조)에 바인딩 하고 &lt;code&gt;bidi-paragraph-direction&lt;/code&gt; 을 &lt;code&gt;left-to-right&lt;/code&gt; ( &lt;a href=&quot;bidirectional-display#Bidirectional-Display&quot;&gt;양방향 표시&lt;/a&gt; 참조 )에 바인딩 합니다.</target>
        </trans-unit>
        <trans-unit id="668caef4152238abda5f1efa569224f231dac599" translate="yes" xml:space="preserve">
          <source>Prog mode is a basic major mode for buffers containing programming language source code. Most of the programming language major modes built into Emacs are derived from it.</source>
          <target state="translated">Prog 모드는 프로그래밍 언어 소스 코드를 포함하는 버퍼의 기본 주 모드입니다. Emacs에 내장 된 대부분의 프로그래밍 언어 주요 모드는 여기에서 파생됩니다.</target>
        </trans-unit>
        <trans-unit id="4cea4cfeb3712ea10092eb76342518fae1684ff9" translate="yes" xml:space="preserve">
          <source>Programmed Completion</source>
          <target state="translated">프로그래밍 된 완성</target>
        </trans-unit>
        <trans-unit id="73ceda4e78259dd722c11f42a884506b0642dcb8" translate="yes" xml:space="preserve">
          <source>Programming Types</source>
          <target state="translated">프로그래밍 유형</target>
        </trans-unit>
        <trans-unit id="e4ad9d4a698f953901838f2b945f06a3bc720785" translate="yes" xml:space="preserve">
          <source>Programs can bind this variable to &lt;code&gt;t&lt;/code&gt; to say that the next warning should begin a series. When several warnings form a series, that means to leave point on the first warning of the series, rather than keep moving it for each warning so that it appears on the last one. The series ends when the local binding is unbound and &lt;code&gt;warning-series&lt;/code&gt; becomes &lt;code&gt;nil&lt;/code&gt; again.</source>
          <target state="translated">프로그램은이 변수를 &lt;code&gt;t&lt;/code&gt; 에 바인딩 하여 다음 경고가 시리즈를 시작해야한다고 말할 수 있습니다 . 여러 경고가 시리즈를 형성하는 경우, 이는 각 경고에 대해 계속 이동하여 마지막 경고에 표시되도록하는 것이 아니라 시리즈의 첫 번째 경고에 포인트를 두는 것을 의미합니다. 시리즈는 로컬 바인딩이 바인딩 해제되고 &lt;code&gt;warning-series&lt;/code&gt; 가 다시 &lt;code&gt;nil&lt;/code&gt; 이되면 종료 됩니다.</target>
        </trans-unit>
        <trans-unit id="92cd77ba5036da4c83c813bc771dc65c0e2a2e16" translate="yes" xml:space="preserve">
          <source>Programs can customize how their warnings appear by binding the variables described in this section.</source>
          <target state="translated">프로그램은이 섹션에 설명 된 변수를 바인딩하여 경고 표시 방식을 사용자 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="28306873004163f1c54815ba67d6f6a02d437add" translate="yes" xml:space="preserve">
          <source>Programs which need to further customize the delayed warnings mechanism can change the variable &lt;code&gt;delayed-warnings-hook&lt;/code&gt;:</source>
          <target state="translated">지연된 경고 메커니즘을 추가로 사용자 정의해야하는 프로그램은 &lt;code&gt;delayed-warnings-hook&lt;/code&gt; 변수를 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2b0e9946d875afe68c7ebbc29fc31bfb38e35193" translate="yes" xml:space="preserve">
          <source>Prompts the user whether to allow switching.</source>
          <target state="translated">사용자에게 전환 허용 여부를 묻습니다.</target>
        </trans-unit>
        <trans-unit id="452b9037bada9b0c89432df65970439b3d0e924a" translate="yes" xml:space="preserve">
          <source>Properly speaking, strings cannot hold meta characters; but when a string is to be used as a key sequence, there is a special convention that provides a way to represent meta versions of</source>
          <target state="translated">올바르게 말하면 문자열은 메타 문자를 포함 할 수 없습니다. 그러나 문자열이 키 시퀀스로 사용되는 경우 메타 버전을 나타내는 방법을 제공하는 특별한 규칙이 있습니다.</target>
        </trans-unit>
        <trans-unit id="27be843b2a0060fe359278ced4660e8808d9feaf" translate="yes" xml:space="preserve">
          <source>Properties for representing formatting of text.</source>
          <target state="translated">텍스트 서식을 나타내는 속성입니다.</target>
        </trans-unit>
        <trans-unit id="28fda1d29c479301b92b1d646a01dabebf2e9ec4" translate="yes" xml:space="preserve">
          <source>Properties in the Mode Line</source>
          <target state="translated">모드 라인의 속성</target>
        </trans-unit>
        <trans-unit id="213490567ef858f9bf66730bcc80eb0c08256c1b" translate="yes" xml:space="preserve">
          <source>Properties with Special Meanings</source>
          <target state="translated">특별한 의미를 가진 속성</target>
        </trans-unit>
        <trans-unit id="1e89be5f8e0cde7710ce257bc0ca4618ccdceedb" translate="yes" xml:space="preserve">
          <source>Property Lists</source>
          <target state="translated">부동산 목록</target>
        </trans-unit>
        <trans-unit id="612e4b2e166639467285e39b4ed1d8fd99f87210" translate="yes" xml:space="preserve">
          <source>Property Lists Outside Symbols</source>
          <target state="translated">기호 외부 속성 목록</target>
        </trans-unit>
        <trans-unit id="71dffa635be8196fa84e899f671cf85d7edd9bfd" translate="yes" xml:space="preserve">
          <source>Property Lists and Association Lists</source>
          <target state="translated">부동산 목록 및 연관 목록</target>
        </trans-unit>
        <trans-unit id="ff82d5b6b42140b1216123af4c6a6d9b5f0855c2" translate="yes" xml:space="preserve">
          <source>Property list</source>
          <target state="translated">부동산 목록</target>
        </trans-unit>
        <trans-unit id="46b689e66f80f0841016c7872d607ebdbd67532f" translate="yes" xml:space="preserve">
          <source>Property lists are better than association lists for attaching information to various Lisp function names or variables. If your program keeps all such information in one association list, it will typically need to search that entire list each time it checks for an association for a particular Lisp function name or variable, which could be slow. By contrast, if you keep the same information in the property lists of the function names or variables themselves, each search will scan only the length of one property list, which is usually short. This is why the documentation for a variable is recorded in a property named &lt;code&gt;variable-documentation&lt;/code&gt;. The byte compiler likewise uses properties to record those functions needing special treatment.</source>
          <target state="translated">속성 목록은 다양한 Lisp 함수 이름 또는 변수에 정보를 첨부 할 때 연관 목록보다 낫습니다. 프로그램이 이러한 모든 정보를 하나의 연결 목록에 보관하는 경우 일반적으로 특정 Lisp 함수 이름 또는 변수에 대한 연결을 확인할 때마다 전체 목록을 검색해야하므로 속도가 느려질 수 있습니다. 반대로 함수 이름이나 변수 자체의 속성 목록에 동일한 정보를 유지하면 각 검색은 일반적으로 짧은 하나의 속성 목록 길이 만 스캔합니다. 이것이 변수에 대한 문서가 &lt;code&gt;variable-documentation&lt;/code&gt; 속성에 기록되는 이유 입니다. 바이트 컴파일러는 마찬가지로 속성을 사용하여 특별한 처리가 필요한 함수를 기록합니다.</target>
        </trans-unit>
        <trans-unit id="b7b650cedbe6931fc274d356229231f9ce6992b0" translate="yes" xml:space="preserve">
          <source>Property lists are used in several contexts. For instance, the function &lt;code&gt;put-text-property&lt;/code&gt; takes an argument which is a property list, specifying text properties and associated values which are to be applied to text in a string or buffer. See &lt;a href=&quot;text-properties#Text-Properties&quot;&gt;Text Properties&lt;/a&gt;.</source>
          <target state="translated">속성 목록은 여러 컨텍스트에서 사용됩니다. 예를 들어, &lt;code&gt;put-text-property&lt;/code&gt; 함수 는 문자열이나 버퍼의 텍스트에 적용 할 텍스트 속성과 관련 값을 지정하는 속성 목록 인 인수를받습니다. &lt;a href=&quot;text-properties#Text-Properties&quot;&gt;텍스트 속성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="26c9c2b245fd32a1d270268516bccb5c02599371" translate="yes" xml:space="preserve">
          <source>Provide a default value.</source>
          <target state="translated">기본값을 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="c25a562aa1564b018459df8c958d13043bf1493a" translate="yes" xml:space="preserve">
          <source>Provide completion.</source>
          <target state="translated">완성을 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="69ca381250c3c3006fc14df7ced71bab7380a5f9" translate="yes" xml:space="preserve">
          <source>Providing a menu of definitions made in a buffer.</source>
          <target state="translated">버퍼에서 만들어진 정의 메뉴를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="7eb3824960aa38aac0253d4e86d70f62d6bf4d05" translate="yes" xml:space="preserve">
          <source>Providing code to be run when particular libraries are loaded.</source>
          <target state="translated">특정 라이브러리가로드 될 때 실행할 코드를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="645ce7ff3a9e362d4f39d88c21ee1a9e243a4dba" translate="yes" xml:space="preserve">
          <source>Providing point or the mark as an argument value is also common, but if you do this &lt;em&gt;and&lt;/em&gt; read input (whether using the minibuffer or not), be sure to get the integer values of point or the mark after reading. The current buffer may be receiving subprocess output; if subprocess output arrives while the command is waiting for input, it could relocate point and the mark.</source>
          <target state="translated">포인트 나 마크를 인자 값으로 제공하는 것도 일반적이지만 이렇게 &lt;em&gt;해서&lt;/em&gt; 입력을 읽으면 (미니 버퍼 사용 여부에 관계없이) 읽은 후 포인트 또는 마크의 정수 값을 가져와야합니다. 현재 버퍼는 하위 프로세스 출력을 수신 할 수 있습니다. 명령이 입력을 기다리는 동안 하위 프로세스 출력이 도착하면 지점과 마크를 재배치 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b8f35d8fc2ec94eb3ae367995ce77a849bd095af" translate="yes" xml:space="preserve">
          <source>Pseudo-random numbers are generated from a &lt;em&gt;seed value&lt;/em&gt;. Starting from any given seed, the &lt;code&gt;random&lt;/code&gt; function always generates the same sequence of numbers. By default, Emacs initializes the random seed at startup, in such a way that the sequence of values of &lt;code&gt;random&lt;/code&gt; (with overwhelming likelihood) differs in each Emacs run.</source>
          <target state="translated">의사 난수는 &lt;em&gt;시드 값&lt;/em&gt; 에서 생성됩니다 . 주어진 시드에서 시작하여 &lt;code&gt;random&lt;/code&gt; 함수는 항상 동일한 숫자 시퀀스를 생성합니다. 기본적으로 Emacs는 시작할 때 임의의 시드를 초기화합니다. 즉, &lt;code&gt;random&lt;/code&gt; 의 값 시퀀스가 각 Emacs가 실행될 때마다 달라집니다.</target>
        </trans-unit>
        <trans-unit id="2eb80e35d971a935837f24f84a6852b12c75cb7f" translate="yes" xml:space="preserve">
          <source>Punctuation characters: &amp;lsquo;</source>
          <target state="translated">구두점 문자 : '</target>
        </trans-unit>
        <trans-unit id="4b4cb70ba2cfe639a8da865361774dfa2c376cc9" translate="yes" xml:space="preserve">
          <source>Pure Storage</source>
          <target state="translated">퓨어 스토리지</target>
        </trans-unit>
        <trans-unit id="90aba799522d2d020ebb6ae6c41c3b9be6c0e7f6" translate="yes" xml:space="preserve">
          <source>Pure storage is allocated only while &lt;code&gt;temacs&lt;/code&gt; is loading the standard preloaded Lisp libraries. In the file</source>
          <target state="translated">순수 스토리지는 &lt;code&gt;temacs&lt;/code&gt; 가 표준 사전로드 된 Lisp 라이브러리를로드하는 동안에 만 할당됩니다 . 파일에서</target>
        </trans-unit>
        <trans-unit id="307d0e8cf258958b59c555f09777515eed5854cd" translate="yes" xml:space="preserve">
          <source>Pushing and releasing a mouse button.</source>
          <target state="translated">마우스 버튼을 눌렀다 놓습니다.</target>
        </trans-unit>
        <trans-unit id="b5742a72c0db888525b18c87e0c62d02e0e4ea94" translate="yes" xml:space="preserve">
          <source>Put a string with a text property directly into the mode line data structure.</source>
          <target state="translated">텍스트 속성이있는 문자열을 모드 라인 데이터 구조에 직접 넣습니다.</target>
        </trans-unit>
        <trans-unit id="0cd76f5f4d006c099b898a42926b589b7c1b8288" translate="yes" xml:space="preserve">
          <source>Put a text property on a mode line %-construct such as &amp;lsquo;</source>
          <target state="translated">모드 라인 % -construct에 '</target>
        </trans-unit>
        <trans-unit id="4dc0318a27df4bbd3819a2ae0650102cbfcad405" translate="yes" xml:space="preserve">
          <source>Put this customization item in group &lt;var&gt;group&lt;/var&gt;. If this keyword is missing from a customization item, it&amp;rsquo;ll be placed in the same group that was last defined (in the current file).</source>
          <target state="translated">이 사용자 정의 항목을 그룹 &lt;var&gt;group&lt;/var&gt; 에 넣습니다 . 이 키워드가 사용자 정의 항목에서 누락 된 경우 마지막으로 정의 된 동일한 그룹 (현재 파일에서)에 배치됩니다.</target>
        </trans-unit>
        <trans-unit id="5d0aee0599747fe1cef238e007941d3d3ff80b55" translate="yes" xml:space="preserve">
          <source>Putting Keyboard Events in Strings</source>
          <target state="translated">문자열에 키보드 이벤트 넣기</target>
        </trans-unit>
        <trans-unit id="573506225dbcbd9461c05f97b5cbb6e9b7ea4b2e" translate="yes" xml:space="preserve">
          <source>Putting information into a mode line.</source>
          <target state="translated">모드 라인에 정보 넣기.</target>
        </trans-unit>
        <trans-unit id="2e23fbce1e64b75a823c48bd07eb8cffd6a4db53" translate="yes" xml:space="preserve">
          <source>Putting so much code in the &lt;code&gt;defvar&lt;/code&gt; form has one disadvantage: it puts the documentation string far away from the line which names the variable. Here&amp;rsquo;s a safe way to avoid that:</source>
          <target state="translated">&lt;code&gt;defvar&lt;/code&gt; 형식 에 너무 많은 코드를 넣으면 한 가지 단점이 있습니다. 변수 이름을 지정하는 줄에서 문서 문자열을 멀리 떨어 뜨립니다. 이를 방지하는 안전한 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c3156e00d3c2588c639e0d3cf6821258b05761c7" translate="yes" xml:space="preserve">
          <source>Q</source>
          <target state="translated">Q</target>
        </trans-unit>
        <trans-unit id="464d9993abd4ae2c2c7c9e7b26a5f83fd64b3caa" translate="yes" xml:space="preserve">
          <source>Query (once) about all the variables.</source>
          <target state="translated">모든 변수에 대해 쿼리 (한 번)합니다.</target>
        </trans-unit>
        <trans-unit id="cd271b4ec3efd977479f9516f661f6689767b2d4" translate="yes" xml:space="preserve">
          <source>Querying Before Exit</source>
          <target state="translated">종료 전 쿼리</target>
        </trans-unit>
        <trans-unit id="002ff598115d84595ffeee6219cb5c03d3a1d4a6" translate="yes" xml:space="preserve">
          <source>Question</source>
          <target state="translated">Question</target>
        </trans-unit>
        <trans-unit id="1a2285d8881f226e13430515a9dd2b9fb6294200" translate="yes" xml:space="preserve">
          <source>Quit</source>
          <target state="translated">Quit</target>
        </trans-unit>
        <trans-unit id="d67020addf987d4f125096bc76d55fb8b1a84640" translate="yes" xml:space="preserve">
          <source>Quitting</source>
          <target state="translated">Quitting</target>
        </trans-unit>
        <trans-unit id="4db027af27fca0bea2af0a68a56488a1c5b9de06" translate="yes" xml:space="preserve">
          <source>Quitting Windows</source>
          <target state="translated">Windows 종료</target>
        </trans-unit>
        <trans-unit id="a3cc802195680348f44cbb231be84a5dc54879b0" translate="yes" xml:space="preserve">
          <source>Quitting is normally inhibited within a filter function&amp;mdash;otherwise, the effect of typing</source>
          <target state="translated">종료는 일반적으로 필터 기능 내에서 금지됩니다. 그렇지 않으면 입력 효과</target>
        </trans-unit>
        <trans-unit id="bc4c3d62226322f769a0d6b8e7d498f28cdd2558" translate="yes" xml:space="preserve">
          <source>Quitting is normally inhibited within a sentinel&amp;mdash;otherwise, the effect of typing</source>
          <target state="translated">종료는 일반적으로 감시자 내에서 금지됩니다. 그렇지 않으면 입력의 효과</target>
        </trans-unit>
        <trans-unit id="e1567648fe08fe203926902f68e917e061f091c5" translate="yes" xml:space="preserve">
          <source>Quitting is suppressed when the first character is read, so that the user can enter a</source>
          <target state="translated">첫 번째 문자를 읽을 때 종료가 억제되므로 사용자가</target>
        </trans-unit>
        <trans-unit id="db8553935753703e44d0db50c86241ee32525977" translate="yes" xml:space="preserve">
          <source>Quitting is suppressed while running &lt;code&gt;pre-command-hook&lt;/code&gt; and &lt;code&gt;post-command-hook&lt;/code&gt;. If an error happens while executing one of these hooks, it does not terminate execution of the hook; instead the error is silenced and the function in which the error occurred is removed from the hook.</source>
          <target state="translated">&lt;code&gt;pre-command-hook&lt;/code&gt; 및 &lt;code&gt;post-command-hook&lt;/code&gt; 을 실행하는 동안 종료가 억제 됩니다. 이러한 후크 중 하나를 실행하는 동안 오류가 발생하면 후크 실행이 종료되지 않습니다. 대신 오류가 침묵되고 오류가 발생한 함수가 후크에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="ce26abf6cced6dc5da82e3ef39e1e3c488338a57" translate="yes" xml:space="preserve">
          <source>Quitting with</source>
          <target state="translated">종료</target>
        </trans-unit>
        <trans-unit id="aad69021798ac9c7a8f72e9e4922a37dd53d20d1" translate="yes" xml:space="preserve">
          <source>Quitting, which happens when the user types</source>
          <target state="translated">사용자가 입력 할 때 발생하는 종료</target>
        </trans-unit>
        <trans-unit id="03863cc346cd3793bf9e796c80a4f6ef2e2965cc" translate="yes" xml:space="preserve">
          <source>Quotation marks in doc strings and messages.</source>
          <target state="translated">문서 문자열 및 메시지의 따옴표.</target>
        </trans-unit>
        <trans-unit id="623a7bbaccb5003a271944bf9dfc226aa0556b8e" translate="yes" xml:space="preserve">
          <source>Quote &lt;var&gt;expression&lt;/var&gt; for &lt;code&gt;define-inline&lt;/code&gt;. This is similar to the backquote (see &lt;a href=&quot;backquote#Backquote&quot;&gt;Backquote&lt;/a&gt;), but quotes code and accepts only &lt;code&gt;,&lt;/code&gt;, not &lt;code&gt;,@&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;define-inline&lt;/code&gt; 의 따옴표 &lt;var&gt;expression&lt;/var&gt; 입니다 . 이 역 인용 부호 (참조 유사하다 &lt;a href=&quot;backquote#Backquote&quot;&gt;역 인용 부호를&lt;/a&gt; )하지만, 코드를 인용하고 만 수락 &lt;code&gt;,&lt;/code&gt; 하지 &lt;code&gt;,@&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b18a6a7386d835bea0db8b9de8ae5aa959884376" translate="yes" xml:space="preserve">
          <source>Quoted Character Input</source>
          <target state="translated">인용 문자 입력</target>
        </trans-unit>
        <trans-unit id="60fefb29eda0237f92306cb85899330ca8b230ee" translate="yes" xml:space="preserve">
          <source>Quoting</source>
          <target state="translated">Quoting</target>
        </trans-unit>
        <trans-unit id="3562341fab873b1822d16e4fbaaa3663fcde537b" translate="yes" xml:space="preserve">
          <source>Quoting an argument to pass it to a shell.</source>
          <target state="translated">인수를 인용하여 쉘에 전달합니다.</target>
        </trans-unit>
        <trans-unit id="28e84ac43a2982f9ba3610654beb2d38a4d3269f" translate="yes" xml:space="preserve">
          <source>Quoting from the &lt;a href=&quot;https://www.jsonrpc.org/&quot;&gt;spec&lt;/a&gt;, JSONRPC &quot;is transport agnostic in that the concepts can be used within the same process, over sockets, over http, or in many various message passing environments.&quot;</source>
          <target state="translated">&lt;a href=&quot;https://www.jsonrpc.org/&quot;&gt;사양&lt;/a&gt; 에서 인용 하면 JSONRPC는 &quot;동일한 프로세스, 소켓, http 또는 다양한 메시지 전달 환경에서 개념을 사용할 수 있다는 점에서 전송에 구애받지 않습니다.&quot;</target>
        </trans-unit>
        <trans-unit id="06576556d1ad802f247cad11ae748be47b70cd9c" translate="yes" xml:space="preserve">
          <source>R</source>
          <target state="translated">R</target>
        </trans-unit>
        <trans-unit id="8539465b4b77d88914ea1b6ec8416cacd2d6e50b" translate="yes" xml:space="preserve">
          <source>RCS</source>
          <target state="translated">RCS</target>
        </trans-unit>
        <trans-unit id="69e27356ef629022720d868ab0c0e3394775b6c1" translate="yes" xml:space="preserve">
          <source>README</source>
          <target state="translated">README</target>
        </trans-unit>
        <trans-unit id="025925def95adcf722d9932a3c97d4dfaeaeba91" translate="yes" xml:space="preserve">
          <source>RET</source>
          <target state="translated">RET</target>
        </trans-unit>
        <trans-unit id="8a19437cf6e2b60b4b46e624f271872eec3c1ebc" translate="yes" xml:space="preserve">
          <source>RGB:&lt;var&gt;r&lt;/var&gt;/&lt;var&gt;g&lt;/var&gt;/&lt;var&gt;b&lt;/var&gt;</source>
          <target state="translated">RGB:&lt;var&gt;r&lt;/var&gt;/&lt;var&gt;g&lt;/var&gt;/&lt;var&gt;b&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="e143f36c4ca9c5d3b842c3decf88bd45054f708a" translate="yes" xml:space="preserve">
          <source>RLM</source>
          <target state="translated">RLM</target>
        </trans-unit>
        <trans-unit id="c75dff3aa48cb2ccd5b96f81ad5690623ffbeffa" translate="yes" xml:space="preserve">
          <source>RLO</source>
          <target state="translated">RLO</target>
        </trans-unit>
        <trans-unit id="c3282cbbcba660116d62c007822229220838a1c6" translate="yes" xml:space="preserve">
          <source>RPC</source>
          <target state="translated">RPC</target>
        </trans-unit>
        <trans-unit id="2f774c620027d9b3f46cf93e730db791918057be" translate="yes" xml:space="preserve">
          <source>Race conditions</source>
          <target state="translated">경쟁 조건</target>
        </trans-unit>
        <trans-unit id="1eb318b0c1df1f117a7c2182bc1a1788588c81b6" translate="yes" xml:space="preserve">
          <source>Raising, Lowering and Restacking Frames</source>
          <target state="translated">Raising, Lowering and Restacking Frames</target>
        </trans-unit>
        <trans-unit id="6e01f14f32639648e312d2a56505cd54edc8c1c2" translate="yes" xml:space="preserve">
          <source>Raising, Lowering and Restacking Frames.</source>
          <target state="translated">Raising, Lowering and Restacking Frames.</target>
        </trans-unit>
        <trans-unit id="a10d3322e2b68c994b24aa3423cd7b30f82409d9" translate="yes" xml:space="preserve">
          <source>Raising, lowering and restacking child frames (see &lt;a href=&quot;raising-and-lowering#Raising-and-Lowering&quot;&gt;Raising and Lowering&lt;/a&gt;) or changing the &lt;code&gt;z-group&lt;/code&gt; (see &lt;a href=&quot;position-parameters#Position-Parameters&quot;&gt;Position Parameters&lt;/a&gt;) of a child frame changes only the stacking order of child frames with the same parent.</source>
          <target state="translated">Raising, lowering and restacking child frames (see &lt;a href=&quot;raising-and-lowering#Raising-and-Lowering&quot;&gt;Raising and Lowering&lt;/a&gt;) or changing the &lt;code&gt;z-group&lt;/code&gt; (see &lt;a href=&quot;position-parameters#Position-Parameters&quot;&gt;Position Parameters&lt;/a&gt;) of a child frame changes only the stacking order of child frames with the same parent.</target>
        </trans-unit>
        <trans-unit id="3061bd379d8f3565753f638c056b711fd4433107" translate="yes" xml:space="preserve">
          <source>Random Numbers</source>
          <target state="translated">난수</target>
        </trans-unit>
        <trans-unit id="4094eec702394711a22f1c46e59d79bdb670dc76" translate="yes" xml:space="preserve">
          <source>Rapid continue: move point to each breakpoint, but don&amp;rsquo;t pause (&lt;code&gt;edebug-Continue-fast-mode&lt;/code&gt;).</source>
          <target state="translated">Rapid continue: move point to each breakpoint, but don&amp;rsquo;t pause ( &lt;code&gt;edebug-Continue-fast-mode&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="f80a0da928c5191b09527932e1b3665d86c38981" translate="yes" xml:space="preserve">
          <source>Rapid trace: update the display at each stop point, but don&amp;rsquo;t actually pause (&lt;code&gt;edebug-Trace-fast-mode&lt;/code&gt;).</source>
          <target state="translated">Rapid trace: update the display at each stop point, but don&amp;rsquo;t actually pause ( &lt;code&gt;edebug-Trace-fast-mode&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="dc2ca0f09d1e9b124ffa42aa636506f4eb25ef40" translate="yes" xml:space="preserve">
          <source>Rather than have a single &lt;em&gt;precs&lt;/em&gt; table to resolve conflicts, it is preferable to have several tables, so as to let the BNF part of the grammar specify relative precedences where possible.</source>
          <target state="translated">Rather than have a single &lt;em&gt;precs&lt;/em&gt; table to resolve conflicts, it is preferable to have several tables, so as to let the BNF part of the grammar specify relative precedences where possible.</target>
        </trans-unit>
        <trans-unit id="632a184d441b001355ec8aa3d8dcd9d5378a47bd" translate="yes" xml:space="preserve">
          <source>Rather than write your own indentation function from scratch, it is often preferable to try and reuse some existing ones or to rely on a generic indentation engine. There are sadly few such engines. The CC-mode indentation code (used with C, C++, Java, Awk and a few other such modes) has been made more generic over the years, so if your language seems somewhat similar to one of those languages, you might try to use that engine. Another one is SMIE which takes an approach in the spirit of Lisp sexps and adapts it to non-Lisp languages.</source>
          <target state="translated">Rather than write your own indentation function from scratch, it is often preferable to try and reuse some existing ones or to rely on a generic indentation engine. There are sadly few such engines. The CC-mode indentation code (used with C, C++, Java, Awk and a few other such modes) has been made more generic over the years, so if your language seems somewhat similar to one of those languages, you might try to use that engine. Another one is SMIE which takes an approach in the spirit of Lisp sexps and adapts it to non-Lisp languages.</target>
        </trans-unit>
        <trans-unit id="a8d87149d8f5a1af0cf09889395338496e67e84b" translate="yes" xml:space="preserve">
          <source>Re-evaluating or reinstrumenting a definition removes all of its previous breakpoints.</source>
          <target state="translated">Re-evaluating or reinstrumenting a definition removes all of its previous breakpoints.</target>
        </trans-unit>
        <trans-unit id="f4809bfd618abf7fb36743709051ce01ea7c0acf" translate="yes" xml:space="preserve">
          <source>Read Syntax for Circular Objects</source>
          <target state="translated">Read Syntax for Circular Objects</target>
        </trans-unit>
        <trans-unit id="6e9131d2136625bdddd14a8d07626169308db7f9" translate="yes" xml:space="preserve">
          <source>Read a Lisp expression in the minibuffer, evaluate it (with the relevant lexical environment, if applicable), and print the value in the echo area. The debugger alters certain important variables, and the current buffer, as part of its operation;</source>
          <target state="translated">Read a Lisp expression in the minibuffer, evaluate it (with the relevant lexical environment, if applicable), and print the value in the echo area. The debugger alters certain important variables, and the current buffer, as part of its operation;</target>
        </trans-unit>
        <trans-unit id="03b3047f56d9714cee32cb7bab845f9c4676b585" translate="yes" xml:space="preserve">
          <source>Read and Print</source>
          <target state="translated">Read and Print</target>
        </trans-unit>
        <trans-unit id="0fe8e273f1986af8d7aa325992727641b2a563a7" translate="yes" xml:space="preserve">
          <source>Read syntax for circular structure.</source>
          <target state="translated">Read syntax for circular structure.</target>
        </trans-unit>
        <trans-unit id="bc8344e206c5a28e5ae0119bee1d9e11cc61b01a" translate="yes" xml:space="preserve">
          <source>Read-Only Buffers</source>
          <target state="translated">Read-Only Buffers</target>
        </trans-unit>
        <trans-unit id="d1fc7e74f48183a030fd4d666342671cab238066" translate="yes" xml:space="preserve">
          <source>Read-only buffers are used in two kinds of situations:</source>
          <target state="translated">Read-only buffers are used in two kinds of situations:</target>
        </trans-unit>
        <trans-unit id="d56b0baf5ce89558d80f2adb9825f07459a53040" translate="yes" xml:space="preserve">
          <source>Reading File Names</source>
          <target state="translated">Reading File Names</target>
        </trans-unit>
        <trans-unit id="c5f8f3d99c0def76915d970418c8be32c0d70dae" translate="yes" xml:space="preserve">
          <source>Reading Input</source>
          <target state="translated">Reading Input</target>
        </trans-unit>
        <trans-unit id="48ff45329f2bdbb13e706f06342cc64ffd151d94" translate="yes" xml:space="preserve">
          <source>Reading Lisp Objects with the Minibuffer</source>
          <target state="translated">Reading Lisp Objects with the Minibuffer</target>
        </trans-unit>
        <trans-unit id="fd5b6e981a2105db597113fe1759987687c81303" translate="yes" xml:space="preserve">
          <source>Reading One Event</source>
          <target state="translated">Reading One Event</target>
        </trans-unit>
        <trans-unit id="f4408e56b25dde1d761da92de224451f3cd20e10" translate="yes" xml:space="preserve">
          <source>Reading Text Strings with the Minibuffer</source>
          <target state="translated">Reading Text Strings with the Minibuffer</target>
        </trans-unit>
        <trans-unit id="5fadc63a8660acc47c01d1b0d63b3f029bb57c1e" translate="yes" xml:space="preserve">
          <source>Reading a Password</source>
          <target state="translated">Reading a Password</target>
        </trans-unit>
        <trans-unit id="20afc0acccc31baf55ccd7798b86410ccb015f4f" translate="yes" xml:space="preserve">
          <source>Reading a key sequence includes translating the events in various ways. See &lt;a href=&quot;translation-keymaps#Translation-Keymaps&quot;&gt;Translation Keymaps&lt;/a&gt;.</source>
          <target state="translated">Reading a key sequence includes translating the events in various ways. See &lt;a href=&quot;translation-keymaps#Translation-Keymaps&quot;&gt;Translation Keymaps&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="bc2e6b116b040fff04e546c9b4433000b1c59c8b" translate="yes" xml:space="preserve">
          <source>Reading a password from the terminal.</source>
          <target state="translated">Reading a password from the terminal.</target>
        </trans-unit>
        <trans-unit id="76ea718adbc7d1e1c74075e2621a2b5347301d95" translate="yes" xml:space="preserve">
          <source>Reading and Printing Lisp Objects</source>
          <target state="translated">Reading and Printing Lisp Objects</target>
        </trans-unit>
        <trans-unit id="07c9c11d093e1c3cd6a5308e0ff50a4228adee70" translate="yes" xml:space="preserve">
          <source>Reading and printing are more or less inverse operations: printing the object that results from reading a given piece of text often produces the same text, and reading the text that results from printing an object usually produces a similar-looking object. For example, printing the symbol &lt;code&gt;foo&lt;/code&gt; produces the text &amp;lsquo;</source>
          <target state="translated">Reading and printing are more or less inverse operations: printing the object that results from reading a given piece of text often produces the same text, and reading the text that results from printing an object usually produces a similar-looking object. For example, printing the symbol &lt;code&gt;foo&lt;/code&gt; produces the text &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="576b8f76c2ef5406819848ab6d7bbb4f801f6878" translate="yes" xml:space="preserve">
          <source>Reading and writing the hash table contents.</source>
          <target state="translated">Reading and writing the hash table contents.</target>
        </trans-unit>
        <trans-unit id="3d79e2a061f6835e1839676065a4a6800e78670e" translate="yes" xml:space="preserve">
          <source>Reading files into Emacs buffers for editing.</source>
          <target state="translated">Reading files into Emacs buffers for editing.</target>
        </trans-unit>
        <trans-unit id="520a7c8b57c879330c02497327e31b60a4d5224d" translate="yes" xml:space="preserve">
          <source>Reading files into buffers without visiting.</source>
          <target state="translated">Reading files into buffers without visiting.</target>
        </trans-unit>
        <trans-unit id="3525f661fee5325e84abe461c42b34b4e7e9b853" translate="yes" xml:space="preserve">
          <source>Reading files of Lisp code into Lisp.</source>
          <target state="translated">Reading files of Lisp code into Lisp.</target>
        </trans-unit>
        <trans-unit id="0e2977ccb013d907cc86d66fe042533c50421cd1" translate="yes" xml:space="preserve">
          <source>Reading from Files</source>
          <target state="translated">Reading from Files</target>
        </trans-unit>
        <trans-unit id="167751eb8773d45d2c26ad519f83f6240a6836ed" translate="yes" xml:space="preserve">
          <source>Reading pending standard error from a process running on a remote host is not possible this way.</source>
          <target state="translated">Reading pending standard error from a process running on a remote host is not possible this way.</target>
        </trans-unit>
        <trans-unit id="f23106b618743952281c07f95a091b9d46c7dc72" translate="yes" xml:space="preserve">
          <source>Reading the file involves decoding the file&amp;rsquo;s contents (see &lt;a href=&quot;coding-systems#Coding-Systems&quot;&gt;Coding Systems&lt;/a&gt;), including end-of-line conversion, and format conversion (see &lt;a href=&quot;format-conversion#Format-Conversion&quot;&gt;Format Conversion&lt;/a&gt;). If &lt;var&gt;wildcards&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, then &lt;code&gt;find-file-noselect&lt;/code&gt; expands wildcard characters in &lt;var&gt;filename&lt;/var&gt; and visits all the matching files.</source>
          <target state="translated">Reading the file involves decoding the file&amp;rsquo;s contents (see &lt;a href=&quot;coding-systems#Coding-Systems&quot;&gt;Coding Systems&lt;/a&gt;), including end-of-line conversion, and format conversion (see &lt;a href=&quot;format-conversion#Format-Conversion&quot;&gt;Format Conversion&lt;/a&gt;). If &lt;var&gt;wildcards&lt;/var&gt; is non- &lt;code&gt;nil&lt;/code&gt; , then &lt;code&gt;find-file-noselect&lt;/code&gt; expands wildcard characters in &lt;var&gt;filename&lt;/var&gt; and visits all the matching files.</target>
        </trans-unit>
        <trans-unit id="b72ad71a3990000f0310122822a86f03a7bf273a" translate="yes" xml:space="preserve">
          <source>Recall that scroll bar events have two integers forming a ratio, in place of a pair of x and y coordinates.</source>
          <target state="translated">Recall that scroll bar events have two integers forming a ratio, in place of a pair of x and y coordinates.</target>
        </trans-unit>
        <trans-unit id="af2eed05d267c2a5c291c8c76894d03e2a088d09" translate="yes" xml:space="preserve">
          <source>Recall that the subexpressions of a regular expression are those expressions grouped with escaped parentheses, &amp;lsquo;</source>
          <target state="translated">Recall that the subexpressions of a regular expression are those expressions grouped with escaped parentheses, &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="f34ce9ddf20ed467c90ef556e0d89f69e05e8299" translate="yes" xml:space="preserve">
          <source>Receive or send characters.</source>
          <target state="translated">Receive or send characters.</target>
        </trans-unit>
        <trans-unit id="862caf2d0b0f5160028589c7196b4d16de3b720d" translate="yes" xml:space="preserve">
          <source>Receiving Output from Processes</source>
          <target state="translated">Receiving Output from Processes</target>
        </trans-unit>
        <trans-unit id="3067e7351c3c6f32894212c418cc5908ab3869e7" translate="yes" xml:space="preserve">
          <source>Reclaiming space for Lisp objects no longer used.</source>
          <target state="translated">Reclaiming space for Lisp objects no longer used.</target>
        </trans-unit>
        <trans-unit id="5daf7be7fd8981e9573a10adb7536c74f3d4e8dd" translate="yes" xml:space="preserve">
          <source>Recombining Windows</source>
          <target state="translated">Recombining Windows</target>
        </trans-unit>
        <trans-unit id="6574ca503104a44ee368161aa9c294ee0354949b" translate="yes" xml:space="preserve">
          <source>Record Functions</source>
          <target state="translated">Record Functions</target>
        </trans-unit>
        <trans-unit id="bdd640924608b8a67374799fb7038a8b1c5f61d7" translate="yes" xml:space="preserve">
          <source>Record Type</source>
          <target state="translated">Record Type</target>
        </trans-unit>
        <trans-unit id="cbe36316a6c9a1832ef0d0ce74d4e55fffc1a2cf" translate="yes" xml:space="preserve">
          <source>Record the preloaded Lisp data in a &lt;em&gt;dump file&lt;/em&gt;. This method produces an additional data file which Emacs will load at startup. The produced dump file is usually called</source>
          <target state="translated">Record the preloaded Lisp data in a &lt;em&gt;dump file&lt;/em&gt;. This method produces an additional data file which Emacs will load at startup. The produced dump file is usually called</target>
        </trans-unit>
        <trans-unit id="287c4d35a319cba2c2d66e76038dce806323b9bd" translate="yes" xml:space="preserve">
          <source>Recording Input</source>
          <target state="translated">Recording Input</target>
        </trans-unit>
        <trans-unit id="6f5292802cffe71c7680c764ca10109c80e5f777" translate="yes" xml:space="preserve">
          <source>Recording of undo information in a newly created buffer is normally enabled to start with; but if the buffer name starts with a space, the undo recording is initially disabled. You can explicitly enable or disable undo recording with the following two functions, or by setting &lt;code&gt;buffer-undo-list&lt;/code&gt; yourself.</source>
          <target state="translated">Recording of undo information in a newly created buffer is normally enabled to start with; but if the buffer name starts with a space, the undo recording is initially disabled. You can explicitly enable or disable undo recording with the following two functions, or by setting &lt;code&gt;buffer-undo-list&lt;/code&gt; yourself.</target>
        </trans-unit>
        <trans-unit id="6a69a7c10f388afb57fed4cdd6c5ccb1cf9ff1d8" translate="yes" xml:space="preserve">
          <source>Recording previous minibuffer inputs so the user can reuse them.</source>
          <target state="translated">Recording previous minibuffer inputs so the user can reuse them.</target>
        </trans-unit>
        <trans-unit id="9bd5b750794520ce0ebb27a6f6fe9c0b0a292174" translate="yes" xml:space="preserve">
          <source>Recording the status of all frames.</source>
          <target state="translated">Recording the status of all frames.</target>
        </trans-unit>
        <trans-unit id="346aabbabce32225a7fe3eb962f9083ccb9738b1" translate="yes" xml:space="preserve">
          <source>Recording the way a frame is subdivided.</source>
          <target state="translated">Recording the way a frame is subdivided.</target>
        </trans-unit>
        <trans-unit id="e51c55255be9007d473b3c04b4553c2a27d6f03b" translate="yes" xml:space="preserve">
          <source>Records</source>
          <target state="translated">Records</target>
        </trans-unit>
        <trans-unit id="bb573770f54950e854c384f499040fe647da8a29" translate="yes" xml:space="preserve">
          <source>Recursive Editing</source>
          <target state="translated">Recursive Editing</target>
        </trans-unit>
        <trans-unit id="2d1ed5152a6ff162c3511d793dbc47aea4567652" translate="yes" xml:space="preserve">
          <source>Recursive Minibuffers</source>
          <target state="translated">Recursive Minibuffers</target>
        </trans-unit>
        <trans-unit id="475955b1120782acb2e7905eaef965517bdc98d4" translate="yes" xml:space="preserve">
          <source>Recursive display specifications are not supported&amp;mdash;&lt;var&gt;string&lt;/var&gt;&amp;rsquo;s &lt;code&gt;display&lt;/code&gt; properties, if any, are not used.</source>
          <target state="translated">Recursive display specifications are not supported&amp;mdash; &lt;var&gt;string&lt;/var&gt; &amp;rsquo;s &lt;code&gt;display&lt;/code&gt; properties, if any, are not used.</target>
        </trans-unit>
        <trans-unit id="5103de3e1f115068ab56c49103b6a6c73b3b2ead" translate="yes" xml:space="preserve">
          <source>Recursive editing levels are also used when you type</source>
          <target state="translated">Recursive editing levels are also used when you type</target>
        </trans-unit>
        <trans-unit id="0fbb2175d19f56aa8f6d17bd1afb0da10da5bdc5" translate="yes" xml:space="preserve">
          <source>Recursive edits are useful in debugging. You can insert a call to &lt;code&gt;debug&lt;/code&gt; into a function definition as a sort of breakpoint, so that you can look around when the function gets there. &lt;code&gt;debug&lt;/code&gt; invokes a recursive edit but also provides the other features of the debugger.</source>
          <target state="translated">Recursive edits are useful in debugging. You can insert a call to &lt;code&gt;debug&lt;/code&gt; into a function definition as a sort of breakpoint, so that you can look around when the function gets there. &lt;code&gt;debug&lt;/code&gt; invokes a recursive edit but also provides the other features of the debugger.</target>
        </trans-unit>
        <trans-unit id="6ec9b76a71b5580adfadbc56852dc8421053b6b0" translate="yes" xml:space="preserve">
          <source>Redefining a key in a keymap.</source>
          <target state="translated">Redefining a key in a keymap.</target>
        </trans-unit>
        <trans-unit id="82627f7a3d49dce2fe6fd1303f5c72ddca15e911" translate="yes" xml:space="preserve">
          <source>Redisplay the most recently known expression result in the echo area (&lt;code&gt;edebug-previous-result&lt;/code&gt;).</source>
          <target state="translated">Redisplay the most recently known expression result in the echo area ( &lt;code&gt;edebug-previous-result&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="c59143945a522107dc421bf6a9ef4f51fb5fd8c2" translate="yes" xml:space="preserve">
          <source>Redisplay updates the window-start position (if you have not specified it explicitly since the previous redisplay)&amp;mdash;to make sure point appears on the screen. Nothing except redisplay automatically changes the window-start position; if you move point, do not expect the window-start position to change in response until after the next redisplay.</source>
          <target state="translated">Redisplay updates the window-start position (if you have not specified it explicitly since the previous redisplay)&amp;mdash;to make sure point appears on the screen. Nothing except redisplay automatically changes the window-start position; if you move point, do not expect the window-start position to change in response until after the next redisplay.</target>
        </trans-unit>
        <trans-unit id="97cea8d837fc9c1f491fa116bf188601e626d469" translate="yes" xml:space="preserve">
          <source>Refers to the default value.</source>
          <target state="translated">Refers to the default value.</target>
        </trans-unit>
        <trans-unit id="da38cfbadc69baabd90696cfe1177628ed103fa8" translate="yes" xml:space="preserve">
          <source>Refers to the element for character &lt;var&gt;char&lt;/var&gt; (supposing &lt;var&gt;char&lt;/var&gt; is a valid character code).</source>
          <target state="translated">Refers to the element for character &lt;var&gt;char&lt;/var&gt; (supposing &lt;var&gt;char&lt;/var&gt; is a valid character code).</target>
        </trans-unit>
        <trans-unit id="66746ea2cb040dd054c24510645b709548b4ea74" translate="yes" xml:space="preserve">
          <source>Refers to the whole range of character codes.</source>
          <target state="translated">Refers to the whole range of character codes.</target>
        </trans-unit>
        <trans-unit id="3aded1a53827b5d8b14126fa19ef59c98ff255e0" translate="yes" xml:space="preserve">
          <source>Refreshing the Screen</source>
          <target state="translated">Refreshing the Screen</target>
        </trans-unit>
        <trans-unit id="243cc10fd6e26d84f61e981279d04350da107692" translate="yes" xml:space="preserve">
          <source>Refuse any match. Equivalent to &lt;code&gt;(or)&lt;/code&gt;. See &lt;a href=&quot;regexp-functions#regexp_002dunmatchable&quot;&gt;regexp-unmatchable&lt;/a&gt;.</source>
          <target state="translated">Refuse any match. Equivalent to &lt;code&gt;(or)&lt;/code&gt; . See &lt;a href=&quot;regexp-functions#regexp_002dunmatchable&quot;&gt;regexp-unmatchable&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="4ee1a06a7e5c788b749713b6f650149e8091d387" translate="yes" xml:space="preserve">
          <source>Regarding the advice&amp;rsquo;s &lt;em&gt;class&lt;/em&gt;, note that the new &lt;code&gt;:before&lt;/code&gt; is not quite equivalent to the old &lt;code&gt;before&lt;/code&gt;, because in the old advice you could modify the function&amp;rsquo;s arguments (e.g., with &lt;code&gt;ad-set-arg&lt;/code&gt;), and that would affect the argument values seen by the original function, whereas in the new &lt;code&gt;:before&lt;/code&gt;, modifying an argument via &lt;code&gt;setq&lt;/code&gt; in the advice has no effect on the arguments seen by the original function. When porting &lt;code&gt;before&lt;/code&gt; advice which relied on this behavior, you&amp;rsquo;ll need to turn it into new &lt;code&gt;:around&lt;/code&gt; or &lt;code&gt;:filter-args&lt;/code&gt; advice instead.</source>
          <target state="translated">Regarding the advice&amp;rsquo;s &lt;em&gt;class&lt;/em&gt;, note that the new &lt;code&gt;:before&lt;/code&gt; is not quite equivalent to the old &lt;code&gt;before&lt;/code&gt; , because in the old advice you could modify the function&amp;rsquo;s arguments (e.g., with &lt;code&gt;ad-set-arg&lt;/code&gt; ), and that would affect the argument values seen by the original function, whereas in the new &lt;code&gt;:before&lt;/code&gt; , modifying an argument via &lt;code&gt;setq&lt;/code&gt; in the advice has no effect on the arguments seen by the original function. When porting &lt;code&gt;before&lt;/code&gt; advice which relied on this behavior, you&amp;rsquo;ll need to turn it into new &lt;code&gt;:around&lt;/code&gt; or &lt;code&gt;:filter-args&lt;/code&gt; advice instead.</target>
        </trans-unit>
        <trans-unit id="9184f4be2d849be998855feed1983132c7fac72e" translate="yes" xml:space="preserve">
          <source>Regardless of how this parameter was specified, functions reporting the value of this parameter like &lt;code&gt;frame-parameters&lt;/code&gt; always report the width of the frame&amp;rsquo;s text area in characters as an integer rounded, if necessary, to a multiple of the frame&amp;rsquo;s default character width. That value is also used by the desktop saving routines.</source>
          <target state="translated">Regardless of how this parameter was specified, functions reporting the value of this parameter like &lt;code&gt;frame-parameters&lt;/code&gt; always report the width of the frame&amp;rsquo;s text area in characters as an integer rounded, if necessary, to a multiple of the frame&amp;rsquo;s default character width. That value is also used by the desktop saving routines.</target>
        </trans-unit>
        <trans-unit id="7243ba2379bd1f3ba4e84c19d611718b1cf03ad1" translate="yes" xml:space="preserve">
          <source>Regardless of the value of &lt;var&gt;symbol&lt;/var&gt;, if &lt;var&gt;maps&lt;/var&gt; is a keymap, the menu is added to that keymap, as a top-level menu for the menu bar (see &lt;a href=&quot;menu-bar#Menu-Bar&quot;&gt;Menu Bar&lt;/a&gt;). It can also be a list of keymaps, in which case the menu is added separately to each of those keymaps.</source>
          <target state="translated">Regardless of the value of &lt;var&gt;symbol&lt;/var&gt; , if &lt;var&gt;maps&lt;/var&gt; is a keymap, the menu is added to that keymap, as a top-level menu for the menu bar (see &lt;a href=&quot;menu-bar#Menu-Bar&quot;&gt;Menu Bar&lt;/a&gt;). It can also be a list of keymaps, in which case the menu is added separately to each of those keymaps.</target>
        </trans-unit>
        <trans-unit id="44dc0e6d0beba3391f2e5e02043cc8ab793b25ec" translate="yes" xml:space="preserve">
          <source>Region to Fontify after a Buffer Change</source>
          <target state="translated">Region to Fontify after a Buffer Change</target>
        </trans-unit>
        <trans-unit id="5f74dc0ddee9e7d6215d2c06c183491e3166b44f" translate="yes" xml:space="preserve">
          <source>Registers</source>
          <target state="translated">Registers</target>
        </trans-unit>
        <trans-unit id="ff54c44d52d99648d6de0dbc8357d39a820e3162" translate="yes" xml:space="preserve">
          <source>Regular Expression Functions</source>
          <target state="translated">Regular Expression Functions</target>
        </trans-unit>
        <trans-unit id="96306be677c63b20918ab7e6e06a174857ad42c7" translate="yes" xml:space="preserve">
          <source>Regular Expression Searching</source>
          <target state="translated">Regular Expression Searching</target>
        </trans-unit>
        <trans-unit id="ab140354a34bd045ff52d42f722acc1c4ffada22" translate="yes" xml:space="preserve">
          <source>Regular Expressions</source>
          <target state="translated">정규식</target>
        </trans-unit>
        <trans-unit id="f842ac8456b804f9f051cb7c6386c36a9e434abe" translate="yes" xml:space="preserve">
          <source>Regular expression matching a successful</source>
          <target state="translated">Regular expression matching a successful</target>
        </trans-unit>
        <trans-unit id="b36371d5c3d744cf56ed64a526ca9027133bc2de" translate="yes" xml:space="preserve">
          <source>Regular expression matching the end of a command, or the end of the command &lt;var&gt;capability-command&lt;/var&gt;. The latter defaults to the former.</source>
          <target state="translated">Regular expression matching the end of a command, or the end of the command &lt;var&gt;capability-command&lt;/var&gt; . The latter defaults to the former.</target>
        </trans-unit>
        <trans-unit id="f0c3c42cbb945e204d5a3cb1ce810556ebc47cae" translate="yes" xml:space="preserve">
          <source>Regular expressions have a syntax in which a few characters are special constructs and the rest are &lt;em&gt;ordinary&lt;/em&gt;. An ordinary character is a simple regular expression that matches that character and nothing else. The special characters are &amp;lsquo;</source>
          <target state="translated">Regular expressions have a syntax in which a few characters are special constructs and the rest are &lt;em&gt;ordinary&lt;/em&gt;. An ordinary character is a simple regular expression that matches that character and nothing else. The special characters are &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="a0790edad37dc9bc262e0b370c146c0aa115691c" translate="yes" xml:space="preserve">
          <source>Relating windows to the frame they appear on.</source>
          <target state="translated">Relating windows to the frame they appear on.</target>
        </trans-unit>
        <trans-unit id="0208da66245f1a017cade6baa30ef2ccfc13c36c" translate="yes" xml:space="preserve">
          <source>Relative character width. This should be one of the symbols &lt;code&gt;ultra-condensed&lt;/code&gt;, &lt;code&gt;extra-condensed&lt;/code&gt;, &lt;code&gt;condensed&lt;/code&gt;, &lt;code&gt;semi-condensed&lt;/code&gt;, &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;semi-expanded&lt;/code&gt;, &lt;code&gt;expanded&lt;/code&gt;, &lt;code&gt;extra-expanded&lt;/code&gt;, or &lt;code&gt;ultra-expanded&lt;/code&gt;.</source>
          <target state="translated">Relative character width. This should be one of the symbols &lt;code&gt;ultra-condensed&lt;/code&gt; , &lt;code&gt;extra-condensed&lt;/code&gt; , &lt;code&gt;condensed&lt;/code&gt; , &lt;code&gt;semi-condensed&lt;/code&gt; , &lt;code&gt;normal&lt;/code&gt; , &lt;code&gt;semi-expanded&lt;/code&gt; , &lt;code&gt;expanded&lt;/code&gt; , &lt;code&gt;extra-expanded&lt;/code&gt; , or &lt;code&gt;ultra-expanded&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6b32b576c3443e390e9e316447bfc785f60faa8b" translate="yes" xml:space="preserve">
          <source>Release &lt;var&gt;mutex&lt;/var&gt;. If &lt;var&gt;mutex&lt;/var&gt; is not owned by this thread, this will signal an error.</source>
          <target state="translated">Release &lt;var&gt;mutex&lt;/var&gt; . If &lt;var&gt;mutex&lt;/var&gt; is not owned by this thread, this will signal an error.</target>
        </trans-unit>
        <trans-unit id="e1cf2fd1fb083fe51a5e455c7c68e87d8aaf9fc7" translate="yes" xml:space="preserve">
          <source>Remapping Commands</source>
          <target state="translated">Remapping Commands</target>
        </trans-unit>
        <trans-unit id="547befb9dcb0e70e06a45396428605ff607501e2" translate="yes" xml:space="preserve">
          <source>Remapping faces to alternative definitions.</source>
          <target state="translated">Remapping faces to alternative definitions.</target>
        </trans-unit>
        <trans-unit id="53a9dc41de39a89bfb2c63799520f2411e1ca953" translate="yes" xml:space="preserve">
          <source>Remember that point is always between characters, and the cursor normally appears over the character following point. Therefore, the character returned by &lt;code&gt;following-char&lt;/code&gt; is the character the cursor is over.</source>
          <target state="translated">Remember that point is always between characters, and the cursor normally appears over the character following point. Therefore, the character returned by &lt;code&gt;following-char&lt;/code&gt; is the character the cursor is over.</target>
        </trans-unit>
        <trans-unit id="d66a46736a98ac0dd4a9773b9907a1877a02c888" translate="yes" xml:space="preserve">
          <source>Remove &lt;var&gt;node&lt;/var&gt; from &lt;var&gt;dom&lt;/var&gt;.</source>
          <target state="translated">Remove &lt;var&gt;node&lt;/var&gt; from &lt;var&gt;dom&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="6df9cce6acb4992149ebdfbc63a8104b4705d011" translate="yes" xml:space="preserve">
          <source>Remove an object from &lt;var&gt;ring&lt;/var&gt;, and return that object. The argument &lt;var&gt;index&lt;/var&gt; specifies which item to remove; if it is &lt;code&gt;nil&lt;/code&gt;, that means to remove the oldest item. If &lt;var&gt;ring&lt;/var&gt; is empty, &lt;code&gt;ring-remove&lt;/code&gt; signals an error.</source>
          <target state="translated">Remove an object from &lt;var&gt;ring&lt;/var&gt; , and return that object. The argument &lt;var&gt;index&lt;/var&gt; specifies which item to remove; if it is &lt;code&gt;nil&lt;/code&gt; , that means to remove the oldest item. If &lt;var&gt;ring&lt;/var&gt; is empty, &lt;code&gt;ring-remove&lt;/code&gt; signals an error.</target>
        </trans-unit>
        <trans-unit id="dbc7785ee2b91b1998dd6cc373e2581f7516a5a9" translate="yes" xml:space="preserve">
          <source>Remove the advice &lt;var&gt;function&lt;/var&gt; from the named function &lt;var&gt;symbol&lt;/var&gt;. &lt;var&gt;function&lt;/var&gt; can also be the &lt;code&gt;name&lt;/code&gt; of a piece of advice.</source>
          <target state="translated">Remove the advice &lt;var&gt;function&lt;/var&gt; from the named function &lt;var&gt;symbol&lt;/var&gt; . &lt;var&gt;function&lt;/var&gt; can also be the &lt;code&gt;name&lt;/code&gt; of a piece of advice.</target>
        </trans-unit>
        <trans-unit id="196e7cf735144b51b1b5e1ce7891e986b5ddd0fe" translate="yes" xml:space="preserve">
          <source>Remove the element with identifier &lt;code&gt;id&lt;/code&gt; from the &lt;code&gt;svg&lt;/code&gt;.</source>
          <target state="translated">Remove the element with identifier &lt;code&gt;id&lt;/code&gt; from the &lt;code&gt;svg&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c01a3e6eeeab806d99abd03a2f6e6bbe01670fbe" translate="yes" xml:space="preserve">
          <source>Removes an existing file watch specified by its &lt;var&gt;descriptor&lt;/var&gt;. &lt;var&gt;descriptor&lt;/var&gt; should be an object returned by &lt;code&gt;file-notify-add-watch&lt;/code&gt;.</source>
          <target state="translated">Removes an existing file watch specified by its &lt;var&gt;descriptor&lt;/var&gt; . &lt;var&gt;descriptor&lt;/var&gt; should be an object returned by &lt;code&gt;file-notify-add-watch&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0f2de1a1f3be7c81f6a265ecaab96489e7b255cb" translate="yes" xml:space="preserve">
          <source>Removing a window from its frame.</source>
          <target state="translated">Removing a window from its frame.</target>
        </trans-unit>
        <trans-unit id="e44873db50363572788df07af1775a3d81c2cf93" translate="yes" xml:space="preserve">
          <source>Removing text from a buffer.</source>
          <target state="translated">Removing text from a buffer.</target>
        </trans-unit>
        <trans-unit id="e0ac28a0b3d433b5af58c57f037a0111af6948c2" translate="yes" xml:space="preserve">
          <source>Renaming files, changing permissions, etc.</source>
          <target state="translated">Renaming files, changing permissions, etc.</target>
        </trans-unit>
        <trans-unit id="d352abc275e8aaceddb8eb4399fff1eb2ea7acbd" translate="yes" xml:space="preserve">
          <source>Reordering the elements in a list; combining lists.</source>
          <target state="translated">Reordering the elements in a list; combining lists.</target>
        </trans-unit>
        <trans-unit id="733aad630ac49f5130728e8464f4395ffa4be7d7" translate="yes" xml:space="preserve">
          <source>Repeat Events</source>
          <target state="translated">Repeat Events</target>
        </trans-unit>
        <trans-unit id="42234f031484aab859df23a1d8723583a9c91007" translate="yes" xml:space="preserve">
          <source>Repeated Loading</source>
          <target state="translated">Repeated Loading</target>
        </trans-unit>
        <trans-unit id="98bffc5586284a1786332e248e9d829b5c230b43" translate="yes" xml:space="preserve">
          <source>Repeating the example used for &lt;code&gt;macroexpand&lt;/code&gt; above with &lt;code&gt;macroexpand-all&lt;/code&gt;, we see that &lt;code&gt;macroexpand-all&lt;/code&gt;&lt;em&gt;does&lt;/em&gt; expand the embedded calls to &lt;code&gt;inc&lt;/code&gt;:</source>
          <target state="translated">Repeating the example used for &lt;code&gt;macroexpand&lt;/code&gt; above with &lt;code&gt;macroexpand-all&lt;/code&gt; , we see that &lt;code&gt;macroexpand-all&lt;/code&gt; &lt;em&gt;does&lt;/em&gt; expand the embedded calls to &lt;code&gt;inc&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="711ba373a79d31376784182b72065d953222072d" translate="yes" xml:space="preserve">
          <source>Repetition</source>
          <target state="translated">Repetition</target>
        </trans-unit>
        <trans-unit id="a7cf7b25a703b308887c7f1d100c4326ef20ac46" translate="yes" xml:space="preserve">
          <source>Replace</source>
          <target state="translated">Replace</target>
        </trans-unit>
        <trans-unit id="bfe8f04c0691129ba469548bdd50e2695937ab4a" translate="yes" xml:space="preserve">
          <source>Replace all the attributes of the node with a new key/value list.</source>
          <target state="translated">Replace all the attributes of the node with a new key/value list.</target>
        </trans-unit>
        <trans-unit id="d64bf1e0817f4a87267fa2af970cde86ea5e6026" translate="yes" xml:space="preserve">
          <source>Replace the old file without confirmation if &lt;var&gt;ok-if-already-exists&lt;/var&gt; is any other value.</source>
          <target state="translated">Replace the old file without confirmation if &lt;var&gt;ok-if-already-exists&lt;/var&gt; is any other value.</target>
        </trans-unit>
        <trans-unit id="4f2f769e6ff8a47975173781fa99be9649b3422b" translate="yes" xml:space="preserve">
          <source>Replace the specification with a single &amp;lsquo;</source>
          <target state="translated">Replace the specification with a single &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="2a643f59581314f3fa60f77c5482a37d1c60d00d" translate="yes" xml:space="preserve">
          <source>Replace the specification with notation for a floating-point number, using either exponential notation or decimal-point notation. The exponential notation is used if the exponent would be less than -4 or greater than or equal to the precision (default: 6). By default, trailing zeros are removed from the fractional portion of the result and a decimal-point character appears only if it is followed by a digit.</source>
          <target state="translated">Replace the specification with notation for a floating-point number, using either exponential notation or decimal-point notation. The exponential notation is used if the exponent would be less than -4 or greater than or equal to the precision (default: 6). By default, trailing zeros are removed from the fractional portion of the result and a decimal-point character appears only if it is followed by a digit.</target>
        </trans-unit>
        <trans-unit id="fcc04c0e1f06cdeaade71176ff4a5728ed4dc1d3" translate="yes" xml:space="preserve">
          <source>Replace the specification with the base-eight representation of an integer. Negative integers are formatted in a platform-dependent way. The object can also be a floating-point number that is formatted as an integer, dropping any fraction.</source>
          <target state="translated">Replace the specification with the base-eight representation of an integer. Negative integers are formatted in a platform-dependent way. The object can also be a floating-point number that is formatted as an integer, dropping any fraction.</target>
        </trans-unit>
        <trans-unit id="ddec4a0303fb7405b6cfa96bb71c2c4cbe3de78d" translate="yes" xml:space="preserve">
          <source>Replace the specification with the base-sixteen representation of an integer. Negative integers are formatted in a platform-dependent way. &amp;lsquo;</source>
          <target state="translated">Replace the specification with the base-sixteen representation of an integer. Negative integers are formatted in a platform-dependent way. &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="be5ede05c5e36af20a8d9bb01fec0222c2a121ae" translate="yes" xml:space="preserve">
          <source>Replace the specification with the base-ten representation of a signed integer. The object can also be a floating-point number that is formatted as an integer, dropping any fraction.</source>
          <target state="translated">Replace the specification with the base-ten representation of a signed integer. The object can also be a floating-point number that is formatted as an integer, dropping any fraction.</target>
        </trans-unit>
        <trans-unit id="e0dc805cf6437ee437b4c3274dcde3d4e3436cbe" translate="yes" xml:space="preserve">
          <source>Replace the specification with the character which is the value given.</source>
          <target state="translated">Replace the specification with the character which is the value given.</target>
        </trans-unit>
        <trans-unit id="1550b00fc336c306eed95c7ebcda2fdbab23dce4" translate="yes" xml:space="preserve">
          <source>Replace the specification with the decimal-point notation for a floating-point number.</source>
          <target state="translated">Replace the specification with the decimal-point notation for a floating-point number.</target>
        </trans-unit>
        <trans-unit id="b1e9cff0cbef7e0ed7d5514047882c392768d3ee" translate="yes" xml:space="preserve">
          <source>Replace the specification with the exponential notation for a floating-point number.</source>
          <target state="translated">Replace the specification with the exponential notation for a floating-point number.</target>
        </trans-unit>
        <trans-unit id="8c24ed092d2070ee20fbc96b64f7a93f66a84167" translate="yes" xml:space="preserve">
          <source>Replace the specification with the printed representation of the object, made with quoting (that is, using &lt;code&gt;prin1&lt;/code&gt;&amp;mdash;see &lt;a href=&quot;output-functions#Output-Functions&quot;&gt;Output Functions&lt;/a&gt;). Thus, strings are enclosed in &amp;lsquo;</source>
          <target state="translated">Replace the specification with the printed representation of the object, made with quoting (that is, using &lt;code&gt;prin1&lt;/code&gt; &amp;mdash;see &lt;a href=&quot;output-functions#Output-Functions&quot;&gt;Output Functions&lt;/a&gt;). Thus, strings are enclosed in &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="370402267dfe3242c165a51b100f9ed6f0ad423a" translate="yes" xml:space="preserve">
          <source>Replace the specification with the printed representation of the object, made without quoting (that is, using &lt;code&gt;princ&lt;/code&gt;, not &lt;code&gt;prin1&lt;/code&gt;&amp;mdash;see &lt;a href=&quot;output-functions#Output-Functions&quot;&gt;Output Functions&lt;/a&gt;). Thus, strings are represented by their contents alone, with no &amp;lsquo;</source>
          <target state="translated">Replace the specification with the printed representation of the object, made without quoting (that is, using &lt;code&gt;princ&lt;/code&gt; , not &lt;code&gt;prin1&lt;/code&gt; &amp;mdash;see &lt;a href=&quot;output-functions#Output-Functions&quot;&gt;Output Functions&lt;/a&gt;). Thus, strings are represented by their contents alone, with no &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="75deeadb8abd51b328daa4b5aefcef8a586399bd" translate="yes" xml:space="preserve">
          <source>Replacing Buffer Text</source>
          <target state="translated">Replacing Buffer Text</target>
        </trans-unit>
        <trans-unit id="b9d8405533148d44c1a4dc4104dc32835596a1b7" translate="yes" xml:space="preserve">
          <source>Replacing a given character wherever it appears.</source>
          <target state="translated">Replacing a given character wherever it appears.</target>
        </trans-unit>
        <trans-unit id="ec2cef4533c2d6b31aa3ab06eed904118e81a465" translate="yes" xml:space="preserve">
          <source>Replacing a substring that was matched.</source>
          <target state="translated">Replacing a substring that was matched.</target>
        </trans-unit>
        <trans-unit id="e6480d64e3469949cb1e463839479c7a358a5359" translate="yes" xml:space="preserve">
          <source>Replacing an element in a list.</source>
          <target state="translated">목록의 요소 교체.</target>
        </trans-unit>
        <trans-unit id="2097c06b575d38f5822abb2858cacf4382af5c37" translate="yes" xml:space="preserve">
          <source>Replacing part of the list backbone. This can be used to remove or add elements.</source>
          <target state="translated">목록 백본의 일부를 대체합니다. 요소를 제거하거나 추가하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ab67e36e9ef6cd6d72b6fe8cfcfa5529f33e3dc" translate="yes" xml:space="preserve">
          <source>Replacing the Text that Matched</source>
          <target state="translated">일치하는 텍스트 바꾸기</target>
        </trans-unit>
        <trans-unit id="45bcbbf71f7925004eca76c4b5e2b72f96f6ac9b" translate="yes" xml:space="preserve">
          <source>Replacing the text of one buffer with the text of another buffer.</source>
          <target state="translated">한 버퍼의 텍스트를 다른 버퍼의 텍스트로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="5aface5653adfd367886934b6688662a61b1055b" translate="yes" xml:space="preserve">
          <source>Reporting Operation Progress</source>
          <target state="translated">작업 진행보고</target>
        </trans-unit>
        <trans-unit id="b4d894d8eb40ccca77247e2a71929e40e0bf2cb9" translate="yes" xml:space="preserve">
          <source>Reporting Warnings</source>
          <target state="translated">경고보고</target>
        </trans-unit>
        <trans-unit id="a51df0abbaade8c583020ba2a342365a636cac32" translate="yes" xml:space="preserve">
          <source>Representation and range of floating point.</source>
          <target state="translated">부동 소수점의 표현과 범위.</target>
        </trans-unit>
        <trans-unit id="ed1be477bd6f7d44cfb57ed17c79cb5952007d53" translate="yes" xml:space="preserve">
          <source>Representation and range of integers.</source>
          <target state="translated">정수의 표현과 범위.</target>
        </trans-unit>
        <trans-unit id="a54fea3d3c2fff302b3c452eb35fdd5feff88f04" translate="yes" xml:space="preserve">
          <source>Request confirmation if &lt;var&gt;ok-if-already-exists&lt;/var&gt; is a number.</source>
          <target state="translated">&lt;var&gt;ok-if-already-exists&lt;/var&gt; 가 숫자 인 경우 확인을 요청 합니다 .</target>
        </trans-unit>
        <trans-unit id="b120c96c48ff1faf795affd9e67c9c3134a9789e" translate="yes" xml:space="preserve">
          <source>Requesting a particular coding system for a single file operation.</source>
          <target state="translated">단일 파일 작업을 위해 특정 코딩 시스템을 요청합니다.</target>
        </trans-unit>
        <trans-unit id="31ffd972632b0f8b7d9a4698f27b5351744291ac" translate="yes" xml:space="preserve">
          <source>Require special confirmation to execute &lt;var&gt;command&lt;/var&gt; from now on, and alter the user&amp;rsquo;s init file so that this will apply to future sessions.</source>
          <target state="translated">지금부터 &lt;var&gt;command&lt;/var&gt; 을 실행하려면 특별한 확인이 필요 하고 사용자의 init 파일을 변경하여 향후 세션에 적용되도록합니다.</target>
        </trans-unit>
        <trans-unit id="80ba37ea133a922fda1409d60af72d74b2605305" translate="yes" xml:space="preserve">
          <source>Require the name of an existing object. An invalid name is not accepted; the commands to exit the minibuffer do not exit if the current input is not valid.</source>
          <target state="translated">기존 개체의 이름이 필요합니다. 잘못된 이름은 허용되지 않습니다. 현재 입력이 유효하지 않으면 미니 버퍼를 종료하는 명령이 종료되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c350786f82c6e1a7dcd02f79ec968f729357c1fa" translate="yes" xml:space="preserve">
          <source>Resist the temptation to use error handling to transfer control from one part of the program to another; use &lt;code&gt;catch&lt;/code&gt; and &lt;code&gt;throw&lt;/code&gt; instead. See &lt;a href=&quot;catch-and-throw#Catch-and-Throw&quot;&gt;Catch and Throw&lt;/a&gt;.</source>
          <target state="translated">프로그램의 한 부분에서 다른 부분으로 제어를 전송하기 위해 오류 처리를 사용하려는 유혹에 저항하십시오. 사용 &lt;code&gt;catch&lt;/code&gt; 하고 &lt;code&gt;throw&lt;/code&gt; 대신. &lt;a href=&quot;catch-and-throw#Catch-and-Throw&quot;&gt;Catch and Throw를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="aaaf66c282070c49bdab295a432372d6d530e9ac" translate="yes" xml:space="preserve">
          <source>Resizing Windows</source>
          <target state="translated">창 크기 조정</target>
        </trans-unit>
        <trans-unit id="817f6d32d45791e684f36eedfcfbf9aabc013c92" translate="yes" xml:space="preserve">
          <source>Resource limits</source>
          <target state="translated">자원 한도</target>
        </trans-unit>
        <trans-unit id="88d05891e1879d3b9a4aa9f7ebe36749dc054ee3" translate="yes" xml:space="preserve">
          <source>Resources are indexed by a combination of a &lt;em&gt;key&lt;/em&gt; and a &lt;em&gt;class&lt;/em&gt;. This function searches using a key of the form &amp;lsquo;</source>
          <target state="translated">리소스는 &lt;em&gt;키&lt;/em&gt; 와 &lt;em&gt;클래스&lt;/em&gt; 의 조합으로 색인이 생성됩니다 . 이 기능은 '</target>
        </trans-unit>
        <trans-unit id="6ed197f0b4c9e8e75db7ae27ec6534cf84214d6a" translate="yes" xml:space="preserve">
          <source>Restricting editing to a portion of the buffer.</source>
          <target state="translated">버퍼의 일부로 편집을 제한합니다.</target>
        </trans-unit>
        <trans-unit id="c474a91ce1d9f469e70e082bc2f9858ba0f5deb2" translate="yes" xml:space="preserve">
          <source>Result: #1=(#1# y)</source>
          <target state="translated">결과 : # 1 = (# 1 # y)</target>
        </trans-unit>
        <trans-unit id="d67f99fc92dd3e6b052c3436ae9b05ca0b9dcd2d" translate="yes" xml:space="preserve">
          <source>Retrieve the next value from &lt;var&gt;iterator&lt;/var&gt;. If there are no more values to be generated (because &lt;var&gt;iterator&lt;/var&gt;&amp;rsquo;s generator function returned), &lt;code&gt;iter-next&lt;/code&gt; signals the &lt;code&gt;iter-end-of-sequence&lt;/code&gt; condition; the data value associated with this condition is the value with which &lt;var&gt;iterator&lt;/var&gt;&amp;rsquo;s generator function returned.</source>
          <target state="translated">&lt;var&gt;iterator&lt;/var&gt; 에서 다음 값을 검색 합니다 . 더 이상 생성 할 값이 없으면 ( &lt;var&gt;iterator&lt;/var&gt; 의 생성기 함수가 반환 되었기 때문에 ) &lt;code&gt;iter-next&lt;/code&gt; 는 &lt;code&gt;iter-end-of-sequence&lt;/code&gt; 조건에 신호를 보냅니다 . 이 조건과 관련된 데이터 값은 &lt;var&gt;iterator&lt;/var&gt; 의 생성기 함수가 반환 되는 값입니다 .</target>
        </trans-unit>
        <trans-unit id="9d759ee9eb1881530cf543a70f7b52019a0019ab" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;string&lt;/code&gt; if the end position of the scan returning &lt;var&gt;state&lt;/var&gt; is in a string, and &lt;code&gt;comment&lt;/code&gt; if it&amp;rsquo;s in a comment.</source>
          <target state="translated">반환 &lt;code&gt;string&lt;/code&gt; 검색 반환의 끝 위치하는 경우 &lt;var&gt;state&lt;/var&gt; 문자열이며, &lt;code&gt;comment&lt;/code&gt; 이 주석에의합니다.</target>
        </trans-unit>
        <trans-unit id="7fcc50e3045ccda0b182ef933ad091acaa7f1478" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;t&lt;/code&gt; if &lt;var&gt;button&lt;/var&gt; has button-type &lt;var&gt;type&lt;/var&gt;, or one of &lt;var&gt;type&lt;/var&gt;&amp;rsquo;s subtypes.</source>
          <target state="translated">반환 &lt;code&gt;t&lt;/code&gt; 경우 &lt;var&gt;button&lt;/var&gt; 버튼 타입이 &lt;var&gt;type&lt;/var&gt; , 또는 한 &lt;var&gt;type&lt;/var&gt; 의 하위 유형.</target>
        </trans-unit>
        <trans-unit id="c969d3aa113ae9725dbad8e9dc472b8e35f1d3cd" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;t&lt;/code&gt; if &lt;var&gt;object&lt;/var&gt; is a font object, font spec, or font entity. Otherwise, return &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">반환 &lt;code&gt;t&lt;/code&gt; 경우 &lt;var&gt;object&lt;/var&gt; 글꼴 개체, 글꼴 사양, 또는 글꼴 엔티티입니다. 그렇지 않으면 &lt;code&gt;nil&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="8c70222abd3fd6defaa9ff3e9bd2820a05ccfa03" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;t&lt;/code&gt; if &lt;var&gt;string&lt;/var&gt; is a multibyte string, &lt;code&gt;nil&lt;/code&gt; otherwise. This function also returns &lt;code&gt;nil&lt;/code&gt; if &lt;var&gt;string&lt;/var&gt; is some object other than a string.</source>
          <target state="translated">&lt;var&gt;string&lt;/var&gt; 이 멀티 바이트 문자열 이면 &lt;code&gt;t&lt;/code&gt; 를 반환하고 그렇지 않으면 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다. 이 함수는 &lt;var&gt;string&lt;/var&gt; 이 문자열 이 아닌 객체 인 경우 &lt;code&gt;nil&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="26efa2cc0a944d724a7182f04611745f677d19c8" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;t&lt;/code&gt; if &lt;var&gt;thread&lt;/var&gt; is alive, or &lt;code&gt;nil&lt;/code&gt; if it is not. A thread is alive as long as its function is still executing.</source>
          <target state="translated">&lt;var&gt;thread&lt;/var&gt; 가 살아 있으면 &lt;code&gt;t&lt;/code&gt; 를 반환하고 그렇지 않으면 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다. 스레드는 함수가 계속 실행되는 한 살아 있습니다.</target>
        </trans-unit>
        <trans-unit id="d10bc9e34715ae487cab455ba26149a51a0fa61f" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;t&lt;/code&gt; if button-type &lt;var&gt;type&lt;/var&gt; is a subtype of &lt;var&gt;supertype&lt;/var&gt;.</source>
          <target state="translated">돌아 &lt;code&gt;t&lt;/code&gt; 을 버튼 타입의 경우 &lt;var&gt;type&lt;/var&gt; 의 하위 유형입니다 &lt;var&gt;supertype&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="4960603def2b333c76b6cee9ebd637d0fda02de5" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;t&lt;/code&gt; if every &lt;code&gt;t&lt;/code&gt; value in &lt;var&gt;a&lt;/var&gt; is also &lt;code&gt;t&lt;/code&gt; in &lt;var&gt;b&lt;/var&gt;, &lt;code&gt;nil&lt;/code&gt; otherwise. All arguments should be bool vectors of the same length.</source>
          <target state="translated">리턴 &lt;code&gt;t&lt;/code&gt; 모든 경우 &lt;code&gt;t&lt;/code&gt; 에서 의 값 &lt;var&gt;a&lt;/var&gt; 또한 &lt;code&gt;t&lt;/code&gt; 에서 &lt;var&gt;b&lt;/var&gt; , &lt;code&gt;nil&lt;/code&gt; 그렇지. 모든 인수는 길이가 같은 bool 벡터 여야합니다.</target>
        </trans-unit>
        <trans-unit id="a029fe8486186c7e1c75616231f51958944e1b20" translate="yes" xml:space="preserve">
          <source>Return &lt;em&gt;bitwise and&lt;/em&gt; of bool vectors &lt;var&gt;a&lt;/var&gt; and &lt;var&gt;b&lt;/var&gt;. If optional argument &lt;var&gt;c&lt;/var&gt; is given, the result of this operation is stored into &lt;var&gt;c&lt;/var&gt;. All arguments should be bool vectors of the same length.</source>
          <target state="translated">&lt;em&gt;비트 및&lt;/em&gt; 부울 벡터 &lt;var&gt;a&lt;/var&gt; 및 &lt;var&gt;b&lt;/var&gt; 를 반환합니다 . 선택적 인수 &lt;var&gt;c&lt;/var&gt; 가 주어지면이 연산의 결과는 &lt;var&gt;c&lt;/var&gt; 에 저장됩니다 . 모든 인수는 길이가 같은 bool 벡터 여야합니다.</target>
        </trans-unit>
        <trans-unit id="22dcf997d234a8251b020595a8e8fe7e640665eb" translate="yes" xml:space="preserve">
          <source>Return &lt;em&gt;bitwise exclusive or&lt;/em&gt; of bool vectors &lt;var&gt;a&lt;/var&gt; and &lt;var&gt;b&lt;/var&gt;. If optional argument &lt;var&gt;c&lt;/var&gt; is given, the result of this operation is stored into &lt;var&gt;c&lt;/var&gt;. All arguments should be bool vectors of the same length.</source>
          <target state="translated">&lt;em&gt;비트 배타적 또는&lt;/em&gt; bool 벡터 &lt;var&gt;a&lt;/var&gt; 및 &lt;var&gt;b&lt;/var&gt; 를 반환 합니다. 선택적 인수 &lt;var&gt;c&lt;/var&gt; 가 주어지면이 연산의 결과는 &lt;var&gt;c&lt;/var&gt; 에 저장됩니다 . 모든 인수는 길이가 같은 bool 벡터 여야합니다.</target>
        </trans-unit>
        <trans-unit id="d0978405df8b99f81fa1f1db79b1ca991d5320c6" translate="yes" xml:space="preserve">
          <source>Return &lt;em&gt;bitwise or&lt;/em&gt; of bool vectors &lt;var&gt;a&lt;/var&gt; and &lt;var&gt;b&lt;/var&gt;. If optional argument &lt;var&gt;c&lt;/var&gt; is given, the result of this operation is stored into &lt;var&gt;c&lt;/var&gt;. All arguments should be bool vectors of the same length.</source>
          <target state="translated">&lt;em&gt;비트 단위 또는&lt;/em&gt; 부울 벡터 &lt;var&gt;a&lt;/var&gt; 와 &lt;var&gt;b&lt;/var&gt; 를 반환합니다 . 선택적 인수 &lt;var&gt;c&lt;/var&gt; 가 주어지면이 연산의 결과는 &lt;var&gt;c&lt;/var&gt; 에 저장됩니다 . 모든 인수는 길이가 같은 bool 벡터 여야합니다.</target>
        </trans-unit>
        <trans-unit id="78e64e154365d4a36fe02545f77161113c09305b" translate="yes" xml:space="preserve">
          <source>Return &lt;em&gt;set complement&lt;/em&gt; of bool vector &lt;var&gt;a&lt;/var&gt;. If optional argument &lt;var&gt;b&lt;/var&gt; is given, the result of this operation is stored into &lt;var&gt;b&lt;/var&gt;. All arguments should be bool vectors of the same length.</source>
          <target state="translated">bool 벡터 &lt;var&gt;a&lt;/var&gt; 의&lt;em&gt;보수 집합을&lt;/em&gt; 반환 합니다 . 선택적 인수 &lt;var&gt;b&lt;/var&gt; 가 주어지면이 연산의 결과는 &lt;var&gt;b&lt;/var&gt; 에 저장됩니다 . 모든 인수는 길이가 같은 bool 벡터 여야합니다.</target>
        </trans-unit>
        <trans-unit id="448a5ecf34f3d596881df4dd93411813ae639236" translate="yes" xml:space="preserve">
          <source>Return &lt;em&gt;set difference&lt;/em&gt; of bool vectors &lt;var&gt;a&lt;/var&gt; and &lt;var&gt;b&lt;/var&gt;. If optional argument &lt;var&gt;c&lt;/var&gt; is given, the result of this operation is stored into &lt;var&gt;c&lt;/var&gt;. All arguments should be bool vectors of the same length.</source>
          <target state="translated">bool 벡터 &lt;var&gt;a&lt;/var&gt; 와 &lt;var&gt;b&lt;/var&gt; 의 &lt;em&gt;집합 차이&lt;/em&gt; 를 반환 &lt;em&gt;합니다&lt;/em&gt; . 선택적 인수 &lt;var&gt;c&lt;/var&gt; 가 주어지면이 연산의 결과는 &lt;var&gt;c&lt;/var&gt; 에 저장됩니다 . 모든 인수는 길이가 같은 bool 벡터 여야합니다.</target>
        </trans-unit>
        <trans-unit id="577df8858fb56b5d9e9a3919f645f2d18b3967dc" translate="yes" xml:space="preserve">
          <source>Return &lt;var&gt;button&lt;/var&gt;&amp;rsquo;s button-type.</source>
          <target state="translated">&lt;var&gt;button&lt;/var&gt; 의 버튼 유형을 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="a80dc7ea5718a0d5f3a54ed4cac70804c03f18fe" translate="yes" xml:space="preserve">
          <source>Return &lt;var&gt;button&lt;/var&gt;&amp;rsquo;s text label.</source>
          <target state="translated">&lt;var&gt;button&lt;/var&gt; 의 텍스트 라벨을 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="67ee78c3f2e416bc795527a5a676ad6e5b530df1" translate="yes" xml:space="preserve">
          <source>Return a 12-element vector of month names (locale items &lt;code&gt;MON_1&lt;/code&gt; through &lt;code&gt;MON_12&lt;/code&gt;).</source>
          <target state="translated">월 이름으로 구성된 요소가 12 개인 벡터를 반환합니다 (로케일 항목 &lt;code&gt;MON_1&lt;/code&gt; ~ &lt;code&gt;MON_12&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="9350858b9d50eba2991511f5ba15e2db1166cd92" translate="yes" xml:space="preserve">
          <source>Return a 7-element vector of day names (locale items &lt;code&gt;DAY_1&lt;/code&gt; through &lt;code&gt;DAY_7&lt;/code&gt;);</source>
          <target state="translated">요일 이름으로 구성된 요소를 7 개 가진 벡터를 반환합니다 (로케일 항목 &lt;code&gt;DAY_1&lt;/code&gt; ~ &lt;code&gt;DAY_7&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="3333f10c19f87382b3345fdbb0b08c67bd433f3b" translate="yes" xml:space="preserve">
          <source>Return a &lt;em&gt;thunk&lt;/em&gt; for evaluating the &lt;var&gt;forms&lt;/var&gt;. A thunk is a closure (see &lt;a href=&quot;closures#Closures&quot;&gt;Closures&lt;/a&gt;) that inherits the lexical environment of the &lt;code&gt;thunk-delay&lt;/code&gt; call. Using this macro requires &lt;code&gt;lexical-binding&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;forms&lt;/var&gt; 을 평가하기위한 &lt;em&gt;썽크&lt;/em&gt; 를 반환 합니다 . 썽 크는 썽크 &lt;code&gt;thunk-delay&lt;/code&gt; 호출 의 어휘 환경을 상속 하는 클로저 ( &lt;a href=&quot;closures#Closures&quot;&gt;Closures&lt;/a&gt; 참조 )입니다 . 이 매크로를 사용하려면 &lt;code&gt;lexical-binding&lt;/code&gt; 이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="af543b4ddffe2b38f723e19dd86e31084678dba8" translate="yes" xml:space="preserve">
          <source>Return a decoded time structure with only the given keywords filled out, leaving the rest &lt;code&gt;nil&lt;/code&gt;. For instance, to get a structure that represents &amp;ldquo;two months&amp;rdquo;, you could say:</source>
          <target state="translated">주어진 키워드 만 채우고 나머지는 &lt;code&gt;nil&lt;/code&gt; 으로 두고 디코딩 된 시간 구조를 반환합니다 . 예를 들어 &quot;2 개월&quot;을 나타내는 구조를 얻으려면 다음과 같이 말할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8af6f68e8b50ae71f3e1965d97cd6ff368456665" translate="yes" xml:space="preserve">
          <source>Return a hash of &lt;var&gt;buffer-or-name&lt;/var&gt;. If &lt;code&gt;nil&lt;/code&gt;, this defaults to the current buffer. As opposed to &lt;code&gt;secure-hash&lt;/code&gt;, this function computes the hash based on the internal representation of the buffer, disregarding any coding systems. It&amp;rsquo;s therefore only useful when comparing two buffers running in the same Emacs, and is not guaranteed to return the same hash between different Emacs versions. It should be somewhat more efficient on larger buffers than &lt;code&gt;secure-hash&lt;/code&gt; is, and should not allocate more memory.</source>
          <target state="translated">&lt;var&gt;buffer-or-name&lt;/var&gt; 해시를 반환합니다 . 만약 &lt;code&gt;nil&lt;/code&gt; , 현재 버퍼이 기본 설정됩니다. &lt;code&gt;secure-hash&lt;/code&gt; 와 반대로 ,이 함수는 코딩 시스템을 무시하고 버퍼의 내부 표현을 기반으로 해시를 계산합니다. 따라서 동일한 Emacs에서 실행되는 두 버퍼를 비교할 때만 유용하며 서로 다른 Emacs 버전간에 동일한 해시를 반환한다고 보장 할 수 없습니다. &lt;code&gt;secure-hash&lt;/code&gt; 보다 더 큰 버퍼에서 더 효율적이어야하며 더 많은 메모리를 할당해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="c7a43f101a171e5b20f60d3a48baa8300839e67b" translate="yes" xml:space="preserve">
          <source>Return a lisp form describing the archive contents. The form is a list of &amp;rsquo;package-desc&amp;rsquo; structures (see</source>
          <target state="translated">아카이브 내용을 설명하는 lisp 양식을 반환합니다. 형식은 'package-desc'구조 목록입니다 (</target>
        </trans-unit>
        <trans-unit id="a0d637e746fdf21abdf0e0f624c6a864ae21020f" translate="yes" xml:space="preserve">
          <source>Return a list &lt;code&gt;(&lt;var&gt;width&lt;/var&gt;&amp;nbsp;&lt;var&gt;height&lt;/var&gt;)&lt;/code&gt; of 2 integers, for the default paper size measured in millimeters (locale items &lt;code&gt;_NL_PAPER_WIDTH&lt;/code&gt; and &lt;code&gt;_NL_PAPER_HEIGHT&lt;/code&gt;).</source>
          <target state="translated">밀리미터 단위로 측정 된 기본 용지 크기 (로케일 항목 &lt;code&gt;_NL_PAPER_WIDTH&lt;/code&gt; 및 &lt;code&gt;_NL_PAPER_HEIGHT&lt;/code&gt; )에 대해 정수 2 개의 목록 &lt;code&gt;(&lt;var&gt;width&lt;/var&gt;&amp;nbsp;&lt;var&gt;height&lt;/var&gt;)&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="7bc47c15832543c2be445ee5b409aead8c3dafa6" translate="yes" xml:space="preserve">
          <source>Return a list of all the live thread objects. A new list is returned by each invocation.</source>
          <target state="translated">모든 라이브 스레드 객체의 목록을 반환합니다. 호출 할 때마다 새 목록이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="52ea91a8b61ffbcb3b8dcf9cad24548c6fa47570" translate="yes" xml:space="preserve">
          <source>Return a new bool-vector of &lt;var&gt;length&lt;/var&gt; elements, each one initialized to &lt;var&gt;initial&lt;/var&gt;.</source>
          <target state="translated">각각 &lt;var&gt;initial&lt;/var&gt; 로 초기화 된 &lt;var&gt;length&lt;/var&gt; 요소 의 새로운 부울 벡터를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="0f957089f7f0446cc230481f495e40c385cae586" translate="yes" xml:space="preserve">
          <source>Return a new font spec using the specifications in &lt;var&gt;arguments&lt;/var&gt;, which should come in &lt;code&gt;property&lt;/code&gt;-&lt;code&gt;value&lt;/code&gt; pairs. The possible specifications are as follows:</source>
          <target state="translated">의 사양을 사용하여 새 글꼴 사양 반환 &lt;var&gt;arguments&lt;/var&gt; 에 와야한다, &lt;code&gt;property&lt;/code&gt; - &lt;code&gt;value&lt;/code&gt; 쌍을. 가능한 사양은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="14b2726259933761f97dc67e964cb9c2bcb6c091" translate="yes" xml:space="preserve">
          <source>Return a newly-created char-table, with subtype &lt;var&gt;subtype&lt;/var&gt; (a symbol). Each element is initialized to &lt;var&gt;init&lt;/var&gt;, which defaults to &lt;code&gt;nil&lt;/code&gt;. You cannot alter the subtype of a char-table after the char-table is created.</source>
          <target state="translated">하위 &lt;var&gt;subtype&lt;/var&gt; 하위 유형 (기호) 으로 새로 생성 된 문자 테이블을 반환합니다 . 각 요소는 &lt;var&gt;init&lt;/var&gt; 로 초기화 되며 기본값은 &lt;code&gt;nil&lt;/code&gt; 입니다. char-table이 생성 된 후에는 char-table의 하위 유형을 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="d40383deb69fce5631cd5a06a0419ded3389c02f" translate="yes" xml:space="preserve">
          <source>Return a value from the debugger. The value is computed by reading an expression with the minibuffer and evaluating it.</source>
          <target state="translated">디버거에서 값을 반환합니다. 값은 미니 버퍼로 표현식을 읽고 평가하여 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="9863b13f11c8aa797ba082ddceefb81725b9bf5e" translate="yes" xml:space="preserve">
          <source>Return all files under &lt;var&gt;directory&lt;/var&gt; whose names match &lt;var&gt;regexp&lt;/var&gt;. This function searches the specified &lt;var&gt;directory&lt;/var&gt; and its sub-directories, recursively, for files whose basenames (i.e., without the leading directories) match the specified &lt;var&gt;regexp&lt;/var&gt;, and returns a list of the absolute file names of the matching files (see &lt;a href=&quot;relative-file-names#Relative-File-Names&quot;&gt;absolute file names&lt;/a&gt;). The file names are returned in depth-first order, meaning that files in some sub-directory are returned before the files in its parent directory. In addition, matching files found in each subdirectory are sorted alphabetically by their basenames. By default, directories whose names match &lt;var&gt;regexp&lt;/var&gt; are omitted from the list, but if the optional argument &lt;var&gt;include-directories&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, they are included.</source>
          <target state="translated">이름이 &lt;var&gt;regexp&lt;/var&gt; 와 일치하는 &lt;var&gt;directory&lt;/var&gt; 아래의 모든 파일을 반환합니다 . 이 함수는 지정된 &lt;var&gt;directory&lt;/var&gt; 및 하위 디렉토리에서 기본 이름 (즉, 선행 디렉토리 없음)이 지정된 &lt;var&gt;regexp&lt;/var&gt; 와 일치하는 파일을 반복적으로 검색하고 일치하는 파일의 절대 파일 이름 목록을 반환합니다 ( &lt;a href=&quot;relative-file-names#Relative-File-Names&quot;&gt;절대 파일 이름&lt;/a&gt; 참조 ). . 파일 이름은 깊이 우선 순서로 반환됩니다. 즉, 일부 하위 디렉토리의 파일이 상위 디렉토리의 파일보다 먼저 반환됩니다. 또한 각 하위 디렉토리에있는 일치하는 파일은 기본 이름에 따라 알파벳순으로 정렬됩니다. 기본적으로 이름이 &lt;var&gt;regexp&lt;/var&gt; 와 일치하는 디렉토리 는 목록에서 생략되지만 선택적 인수가 &lt;var&gt;include-directories&lt;/var&gt; 는 &lt;code&gt;nil&lt;/code&gt; 이 아니므 로 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="4cccc6d8b95aa11fff3b8d59ac75d4d0b670942c" translate="yes" xml:space="preserve">
          <source>Return all nodes in &lt;var&gt;dom&lt;/var&gt; that are of type &lt;var&gt;tag&lt;/var&gt;. A typical use would be:</source>
          <target state="translated">&lt;var&gt;tag&lt;/var&gt; 유형 인 &lt;var&gt;dom&lt;/var&gt; 의 모든 노드를 반환합니다 . 일반적인 용도는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1cee67087ab18b7b76100f30bd3d6aa7c085f083" translate="yes" xml:space="preserve">
          <source>Return all nodes in &lt;var&gt;dom&lt;/var&gt; that have IDs that match &lt;var&gt;match&lt;/var&gt;, which is a regular expression.</source>
          <target state="translated">정규식 인 match &lt;var&gt;match&lt;/var&gt; 하는 ID를 가진 &lt;var&gt;dom&lt;/var&gt; 의 모든 노드를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="91a4055906841947b3716ba4bdf4f3f8fd8d3bc9" translate="yes" xml:space="preserve">
          <source>Return all nodes in &lt;var&gt;dom&lt;/var&gt; that have class names that match &lt;var&gt;match&lt;/var&gt;, which is a regular expression.</source>
          <target state="translated">정규 표현식 인 match &lt;var&gt;match&lt;/var&gt; 하는 클래스 이름을 가진 &lt;var&gt;dom&lt;/var&gt; 의 모든 노드를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="35676e640392dd6f36bbc12c45cf879b1bb8aeb1" translate="yes" xml:space="preserve">
          <source>Return all nodes in &lt;var&gt;dom&lt;/var&gt; that have styles that match &lt;var&gt;match&lt;/var&gt;, which is a regular expression.</source>
          <target state="translated">모든 노드 돌아 &lt;var&gt;dom&lt;/var&gt; 스타일이 매치가 &lt;var&gt;match&lt;/var&gt; 정규 표현식입니다.</target>
        </trans-unit>
        <trans-unit id="12e283c6dc69337d344e18ed1c9f03b0cdbfce4f" translate="yes" xml:space="preserve">
          <source>Return all nodes in &lt;var&gt;dom&lt;/var&gt; where &lt;var&gt;predicate&lt;/var&gt; returns a non-&lt;code&gt;nil&lt;/code&gt; value. &lt;var&gt;predicate&lt;/var&gt; is called with the node to be tested as its parameter.</source>
          <target state="translated">모든 노드를 돌려줍니다 &lt;var&gt;dom&lt;/var&gt; 곳 &lt;var&gt;predicate&lt;/var&gt; 반환 비 &lt;code&gt;nil&lt;/code&gt; 값. &lt;var&gt;predicate&lt;/var&gt; 자는 테스트 할 노드를 매개 변수로 사용하여 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="6c912457826227b0c7dd5cadef9305699d802cab" translate="yes" xml:space="preserve">
          <source>Return all strings in &lt;var&gt;dom&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;dom&lt;/var&gt; 의 모든 문자열을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="df9ae5b9773b93dbac2d34d9539183c23a4161ab" translate="yes" xml:space="preserve">
          <source>Return all the children of the node.</source>
          <target state="translated">노드의 모든 자식을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="dd88c8b0042c771d1654744ee4789878f53b7274" translate="yes" xml:space="preserve">
          <source>Return all the non-string children of the node.</source>
          <target state="translated">노드의 문자열이 아닌 모든 자식을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="45945aaed3cfdb3f0d74fefe98e5ed1ab911d69e" translate="yes" xml:space="preserve">
          <source>Return all the textual elements of the node as a concatenated string.</source>
          <target state="translated">노드의 모든 텍스트 요소를 연결된 문자열로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="bbcae3f32d40f8ab230ddc546c8040cc887112da" translate="yes" xml:space="preserve">
          <source>Return all the textual elements of the node, as well as the textual elements of all the children of the node, recursively, as a concatenated string. This function also takes an optional separator to be inserted between the textual elements.</source>
          <target state="translated">노드의 모든 텍스트 요소와 노드의 모든 하위 요소의 텍스트 요소를 재귀 적으로 연결된 문자열로 반환합니다. 이 함수는 또한 텍스트 요소 사이에 삽입 할 선택적 구분 기호를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="75d7563a922e054e6e183c7ae33b5a50cf084c0e" translate="yes" xml:space="preserve">
          <source>Return information on the notification server, a list of strings. &lt;var&gt;bus&lt;/var&gt; can be a string denoting a D-Bus connection, the default is &lt;code&gt;:session&lt;/code&gt;. The returned list is &lt;code&gt;(&lt;var&gt;name&lt;/var&gt; &lt;var&gt;vendor&lt;/var&gt;
&lt;var&gt;version&lt;/var&gt; &lt;var&gt;spec-version&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">문자열 목록 인 알림 서버에 대한 정보를 반환합니다. &lt;var&gt;bus&lt;/var&gt; 는 D-Bus 연결을 나타내는 문자열 일 수 있으며 기본값은 &lt;code&gt;:session&lt;/code&gt; 입니다. 반환 된 목록은 &lt;code&gt;(&lt;var&gt;name&lt;/var&gt; &lt;var&gt;vendor&lt;/var&gt; &lt;var&gt;version&lt;/var&gt; &lt;var&gt;spec-version&lt;/var&gt;)&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="eb22ae5b86b7c27892e434b9647355713fbc9525" translate="yes" xml:space="preserve">
          <source>Return non-&lt;code&gt;nil&lt;/code&gt; if &lt;var&gt;advice&lt;/var&gt; is already in &lt;var&gt;function-def&lt;/var&gt;. Like for &lt;code&gt;remove-function&lt;/code&gt; above, instead of &lt;var&gt;advice&lt;/var&gt; being the actual function, it can also be the &lt;code&gt;name&lt;/code&gt; of the piece of advice.</source>
          <target state="translated">&lt;var&gt;advice&lt;/var&gt; 이 이미 &lt;var&gt;function-def&lt;/var&gt; 에 있으면 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값을 반환 합니다. 위의 &lt;code&gt;remove-function&lt;/code&gt; 과 마찬가지로 &lt;var&gt;advice&lt;/var&gt; 가 실제 함수가 아니라 어드바이스 의 &lt;code&gt;name&lt;/code&gt; 이 될 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9c79f6eadda5c6bf1edbf52e1f3ac2892a37893c" translate="yes" xml:space="preserve">
          <source>Return non-&lt;code&gt;nil&lt;/code&gt; if &lt;var&gt;object&lt;/var&gt; is one of the two canonical boolean values: &lt;code&gt;t&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;object&lt;/var&gt; 가 두 개의 표준 부울 값인 &lt;code&gt;t&lt;/code&gt; 또는 &lt;code&gt;nil&lt;/code&gt; 중 하나 이면 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="6b78442903da3c3a338977e6275d41e7672f01f9" translate="yes" xml:space="preserve">
          <source>Return non-&lt;code&gt;nil&lt;/code&gt; if the advice &lt;var&gt;function&lt;/var&gt; is already in the named function &lt;var&gt;symbol&lt;/var&gt;. &lt;var&gt;function&lt;/var&gt; can also be the &lt;code&gt;name&lt;/code&gt; of a piece of advice.</source>
          <target state="translated">어드바이스 &lt;var&gt;function&lt;/var&gt; 가 이미 명명 된 함수 &lt;var&gt;symbol&lt;/var&gt; 에 있으면 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값을 반환 합니다. &lt;var&gt;function&lt;/var&gt; 는 조언 의 &lt;code&gt;name&lt;/code&gt; 이 될 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e7774f5dc4fac47dba6d5d7c4910da583f39332a" translate="yes" xml:space="preserve">
          <source>Return non-&lt;code&gt;nil&lt;/code&gt; if the current token is &lt;em&gt;hanging&lt;/em&gt;. A token is &lt;em&gt;hanging&lt;/em&gt; if it is the last token on the line and if it is preceded by other tokens: a lone token on a line is not hanging.</source>
          <target state="translated">현재 토큰이 &lt;em&gt;중단&lt;/em&gt; 되면 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값을 반환합니다 . 라인의 마지막 토큰이고 앞에 다른 토큰이 &lt;em&gt;있는&lt;/em&gt; 경우 토큰이 &lt;em&gt;중단&lt;/em&gt; 됩니다. 한 줄의 단일 토큰이 중단되지 않습니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="749fdf20b039a6589727d385c01711993dfe65d7" translate="yes" xml:space="preserve">
          <source>Return non-&lt;code&gt;nil&lt;/code&gt; if the current token is the first on the line.</source>
          <target state="translated">현재 토큰이 줄의 첫 번째 토큰이면 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="21692945a976d2551625d2968080189f8378b625" translate="yes" xml:space="preserve">
          <source>Return non-&lt;code&gt;nil&lt;/code&gt; if the current token&amp;rsquo;s parent is actually a sibling. This is the case for example when the parent of a &lt;code&gt;&quot;,&quot;&lt;/code&gt; is just the previous &lt;code&gt;&quot;,&quot;&lt;/code&gt;.</source>
          <target state="translated">현재 토큰의 부모가 실제로 형제 인 경우 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값을 반환 합니다. 예를 들어 &lt;code&gt;&quot;,&quot;&lt;/code&gt; 의 부모가 이전 &lt;code&gt;&quot;,&quot;&lt;/code&gt; 인 경우 입니다.</target>
        </trans-unit>
        <trans-unit id="35d25d3e73f65253cd1e3eae099108919102b2fb" translate="yes" xml:space="preserve">
          <source>Return non-&lt;code&gt;nil&lt;/code&gt; if the current token&amp;rsquo;s parent is among &lt;var&gt;parents&lt;/var&gt;.</source>
          <target state="translated">현재 토큰의 부모가 &lt;var&gt;parents&lt;/var&gt; 사이에 있으면 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="7ac25114617a82f8dbbd908fe0ea16b1cbabe4c9" translate="yes" xml:space="preserve">
          <source>Return non-&lt;code&gt;nil&lt;/code&gt; if the next token is among &lt;var&gt;tokens&lt;/var&gt;.</source>
          <target state="translated">다음 토큰이 &lt;var&gt;tokens&lt;/var&gt; 사이에 있으면 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="2f8d3e2814d148e64a37ce29e28c26e57bb1afc6" translate="yes" xml:space="preserve">
          <source>Return non-&lt;code&gt;nil&lt;/code&gt; if the previous token is among &lt;var&gt;tokens&lt;/var&gt;.</source>
          <target state="translated">이전 토큰이 &lt;var&gt;tokens&lt;/var&gt; 사이에 있으면 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="9930fe3783ba3641ea7e20c428fd271988ee2823" translate="yes" xml:space="preserve">
          <source>Return non-&lt;code&gt;nil&lt;/code&gt; if the value of &lt;var&gt;expression&lt;/var&gt; is already known.</source>
          <target state="translated">&lt;var&gt;expression&lt;/var&gt; 의 값 이 이미 알려진 경우 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="43814b61271727616edbfed177a8099c0f16e295" translate="yes" xml:space="preserve">
          <source>Return the &lt;em&gt;tag&lt;/em&gt; (also called &amp;ldquo;node name&amp;rdquo;) of the node.</source>
          <target state="translated">노드 의 &lt;em&gt;태그&lt;/em&gt; ( &quot;노드 이름&quot;이라고도 함)를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="8481cb2be2eed2f2aec5002476ca21b615a95030" translate="yes" xml:space="preserve">
          <source>Return the &lt;var&gt;thing&lt;/var&gt; around or next to point, as a string.</source>
          <target state="translated">반환 &lt;var&gt;thing&lt;/var&gt; 문자열로 지점 주위에 또는 다음.</target>
        </trans-unit>
        <trans-unit id="f5ed95fbe858de6955230e212b6f4df38604f77f" translate="yes" xml:space="preserve">
          <source>Return the actual row and column in &lt;var&gt;position&lt;/var&gt;, as a cons cell &lt;code&gt;(&lt;var&gt;col&lt;/var&gt;&amp;nbsp;.&amp;nbsp;&lt;var&gt;row&lt;/var&gt;)&lt;/code&gt;. The values are the actual row and column numbers in the window given by &lt;var&gt;position&lt;/var&gt;. See &lt;a href=&quot;click-events#Click-Events&quot;&gt;Click Events&lt;/a&gt;, for details. The function returns &lt;code&gt;nil&lt;/code&gt; if &lt;var&gt;position&lt;/var&gt; does not include actual position values; in that case &lt;code&gt;posn-col-row&lt;/code&gt; can be used to get approximate values.</source>
          <target state="translated">cons 셀 &lt;code&gt;(&lt;var&gt;col&lt;/var&gt;&amp;nbsp;.&amp;nbsp;&lt;var&gt;row&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;col&lt;/var&gt; &amp;nbsp;.&amp;nbsp; &lt;var&gt;row&lt;/var&gt; ) 로 &lt;var&gt;position&lt;/var&gt; 의 실제 행과 열을 반환합니다 . 값은 &lt;var&gt;position&lt;/var&gt; 별로 주어진 창의 실제 행 및 열 번호입니다 . 자세한 내용은 &lt;a href=&quot;click-events#Click-Events&quot;&gt;클릭 이벤트를&lt;/a&gt; 참조 하십시오 . &lt;var&gt;position&lt;/var&gt; 실제 위치 값이 포함되지 않은 경우 함수는 &lt;code&gt;nil&lt;/code&gt; 을 반환 합니다. 이 경우 &lt;code&gt;posn-col-row&lt;/code&gt; 를 사용하여 대략적인 값을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7dff552a1dad9cfba13c8cd97e5cb3b58293ed5b" translate="yes" xml:space="preserve">
          <source>Return the buffer position in &lt;var&gt;position&lt;/var&gt;. When the event occurred in the text area of the window, in a marginal area, or on a fringe, this is an integer specifying a buffer position. Otherwise, the value is undefined.</source>
          <target state="translated">상기 버퍼 위치를 반환 &lt;var&gt;position&lt;/var&gt; . 창의 텍스트 영역, 경계 영역 또는 가장자리에서 이벤트가 발생한 경우 버퍼 위치를 지정하는 정수입니다. 그렇지 않으면 값이 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="27ad6ef17edb4d85d2fece6549d4dbf185bbcea6" translate="yes" xml:space="preserve">
          <source>Return the buffer position, in character units, corresponding to given &lt;var&gt;byte-position&lt;/var&gt; in the current buffer. If &lt;var&gt;byte-position&lt;/var&gt; is out of range, the value is &lt;code&gt;nil&lt;/code&gt;. In a multibyte buffer, an arbitrary value of &lt;var&gt;byte-position&lt;/var&gt; can be not at character boundary, but inside a multibyte sequence representing a single character; in this case, this function returns the buffer position of the character whose multibyte sequence includes &lt;var&gt;byte-position&lt;/var&gt;. In other words, the value does not change for all byte positions that belong to the same character.</source>
          <target state="translated">현재 버퍼의 지정된 &lt;var&gt;byte-position&lt;/var&gt; 에 해당하는 버퍼 위치를 문자 단위로 반환합니다 . 경우 &lt;var&gt;byte-position&lt;/var&gt; 범위를 벗어난 값은 &lt;code&gt;nil&lt;/code&gt; . 멀티 바이트 버퍼에서 임의의 &lt;var&gt;byte-position&lt;/var&gt; 값은 문자 경계가 아니라 단일 문자를 나타내는 멀티 바이트 시퀀스 내부에있을 수 있습니다. 이 경우이 함수는 멀티 바이트 시퀀스에 &lt;var&gt;byte-position&lt;/var&gt; 이 포함 된 문자의 버퍼 위치를 반환합니다 . 즉, 동일한 문자에 속하는 모든 바이트 위치에 대해 값이 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7afab1094e5a0fff7b29de2dc1054c51d88f01ac" translate="yes" xml:space="preserve">
          <source>Return the button at position &lt;var&gt;pos&lt;/var&gt; in the current buffer, or &lt;code&gt;nil&lt;/code&gt;. If the button at &lt;var&gt;pos&lt;/var&gt; is a text property button, the return value is a marker pointing to &lt;var&gt;pos&lt;/var&gt;.</source>
          <target state="translated">현재 버퍼의 &lt;var&gt;pos&lt;/var&gt; 위치 에 있는 버튼을 반환 하거나 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다 . &lt;var&gt;pos&lt;/var&gt; 의 버튼 이 텍스트 속성 버튼 인 경우 반환 값은 &lt;var&gt;pos&lt;/var&gt; 를 가리키는 마커 입니다.</target>
        </trans-unit>
        <trans-unit id="08ab8c2dcdedae851397afaff55bd02692fda3be" translate="yes" xml:space="preserve">
          <source>Return the character set as a string (locale item &lt;code&gt;CODESET&lt;/code&gt;).</source>
          <target state="translated">문자 세트를 문자열로 리턴합니다 (로케일 항목 &lt;code&gt;CODESET&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="0b70fe518e424a72c26a8f38f4e78b503365a5fd" translate="yes" xml:space="preserve">
          <source>Return the current thread.</source>
          <target state="translated">현재 스레드를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5511c55fefeee9bb1c8ef388f062deda4b962893" translate="yes" xml:space="preserve">
          <source>Return the date of &lt;var&gt;ordinal&lt;/var&gt; in &lt;var&gt;year&lt;/var&gt; as a decoded time structure. For instance, the 120th day in 2004 is April 29th.</source>
          <target state="translated">일 돌아 &lt;var&gt;ordinal&lt;/var&gt; 에 &lt;var&gt;year&lt;/var&gt; 복호화 시간 구조로. 예를 들어 2004 년 120 일은 4 월 29 일입니다.</target>
        </trans-unit>
        <trans-unit id="df29a6cea2f5bf8f32552b2a28a40714f15215bd" translate="yes" xml:space="preserve">
          <source>Return the file. This will be the tarball for a multi-file package, or the single file for a simple package.</source>
          <target state="translated">파일을 반환합니다. 이것은 다중 파일 패키지의 경우 tarball이거나 간단한 패키지의 경우 단일 파일입니다.</target>
        </trans-unit>
        <trans-unit id="da6466cedc5e98d3f8bc8446547c5b7c2b101bd4" translate="yes" xml:space="preserve">
          <source>Return the font object that is being used to display the character at position &lt;var&gt;position&lt;/var&gt; in the window &lt;var&gt;window&lt;/var&gt;. If &lt;var&gt;window&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, it defaults to the selected window. If &lt;var&gt;string&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, &lt;var&gt;position&lt;/var&gt; specifies a position in the current buffer; otherwise, &lt;var&gt;string&lt;/var&gt; should be a string, and &lt;var&gt;position&lt;/var&gt; specifies a position in that string.</source>
          <target state="translated">창 &lt;var&gt;window&lt;/var&gt; 위치 &lt;var&gt;position&lt;/var&gt; 에 문자를 표시하는 데 사용되는 글꼴 개체를 반환합니다 . 경우 &lt;var&gt;window&lt;/var&gt; 입니다 &lt;code&gt;nil&lt;/code&gt; 선택한 창, 기본값. 경우 &lt;var&gt;string&lt;/var&gt; 이다 &lt;code&gt;nil&lt;/code&gt; , &lt;var&gt;position&lt;/var&gt; 현재의 버퍼의 위치를 지정한다; 그렇지 않으면, &lt;var&gt;string&lt;/var&gt; 문자열이어야하며, &lt;var&gt;position&lt;/var&gt; 해당 캐릭터의 위치를 지정한다.</target>
        </trans-unit>
        <trans-unit id="32b14d68882151a0fde4123ac6a626d96600ec02" translate="yes" xml:space="preserve">
          <source>Return the image object in &lt;var&gt;position&lt;/var&gt;, either &lt;code&gt;nil&lt;/code&gt; (if there&amp;rsquo;s no image at &lt;var&gt;position&lt;/var&gt;), or an image spec &lt;code&gt;(image&amp;nbsp;&amp;hellip;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;nil&lt;/code&gt; ( &lt;var&gt;position&lt;/var&gt; 에 이미지가없는 경우 ) 또는 이미지 사양 &lt;code&gt;(image&amp;nbsp;&amp;hellip;)&lt;/code&gt; 중 하나의 &lt;var&gt;position&lt;/var&gt; 이미지 객체를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="bf9429abd773072db9140f722c6f504f354ed2b2" translate="yes" xml:space="preserve">
          <source>Return the image or string object described by &lt;var&gt;position&lt;/var&gt;, either &lt;code&gt;nil&lt;/code&gt; (which means &lt;var&gt;position&lt;/var&gt; describes buffer text), an image &lt;code&gt;(image&amp;nbsp;&amp;hellip;)&lt;/code&gt;, or a cons cell &lt;code&gt;(&lt;var&gt;string&lt;/var&gt;&amp;nbsp;.&amp;nbsp;&lt;var&gt;string-pos&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">에 의해 기술 된 이미지 나 캐릭터 오브젝트 반환 &lt;var&gt;position&lt;/var&gt; , 어느 &lt;code&gt;nil&lt;/code&gt; (수단 &lt;var&gt;position&lt;/var&gt; 텍스트 버퍼 설명), 화상 &lt;code&gt;(image&amp;nbsp;&amp;hellip;)&lt;/code&gt; 또는 반대 셀 &lt;code&gt;(&lt;var&gt;string&lt;/var&gt;&amp;nbsp;.&amp;nbsp;&lt;var&gt;string-pos&lt;/var&gt;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="998293615ee7b880e4e4d81ae8a278e9ef954953" translate="yes" xml:space="preserve">
          <source>Return the key/value pair list of attributes of the node.</source>
          <target state="translated">노드 속성의 키 / 값 쌍 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c90387729d07d81465ae3efcb8ccadcd10b2c23d" translate="yes" xml:space="preserve">
          <source>Return the long description of the package.</source>
          <target state="translated">패키지에 대한 자세한 설명을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3394155dd4935b6f49ec88b96983ee569ea6dcad" translate="yes" xml:space="preserve">
          <source>Return the mutex associated with &lt;var&gt;cond&lt;/var&gt;. Note that the associated mutex cannot be changed.</source>
          <target state="translated">&lt;var&gt;cond&lt;/var&gt; 와 관련된 뮤텍스를 반환합니다 . 연관된 뮤텍스는 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="da00a3b8325b0db6f435f2f705ecc4f9fe33bcef" translate="yes" xml:space="preserve">
          <source>Return the name of &lt;var&gt;cond&lt;/var&gt;, as passed to &lt;code&gt;make-condition-variable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;make-condition-variable&lt;/code&gt; 에 전달 된 &lt;var&gt;cond&lt;/var&gt; 의 이름을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="517ceee24533cc8162967ffefd08018e57eb8199" translate="yes" xml:space="preserve">
          <source>Return the name of &lt;var&gt;mutex&lt;/var&gt;, as specified to &lt;code&gt;make-mutex&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;make-mutex&lt;/code&gt; 에 지정된대로 &lt;var&gt;mutex&lt;/var&gt; 의 이름을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="fa72610436d4e442d9c3c19e2fb8d333d332a69f" translate="yes" xml:space="preserve">
          <source>Return the name of &lt;var&gt;thread&lt;/var&gt;, as specified to &lt;code&gt;make-thread&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;make-thread&lt;/code&gt; 에 지정된대로 &lt;var&gt;thread&lt;/var&gt; 의 이름을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="91a4bb81ae4ed3c1810975d55beda106ff3f2b2c" translate="yes" xml:space="preserve">
          <source>Return the next button after (for &lt;code&gt;next-button&lt;/code&gt;) or before (for &lt;code&gt;previous-button&lt;/code&gt;) position &lt;var&gt;pos&lt;/var&gt; in the current buffer. If &lt;var&gt;count-current&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, count any button at &lt;var&gt;pos&lt;/var&gt; in the search, instead of starting at the next button.</source>
          <target state="translated">현재 버퍼의 &lt;var&gt;pos&lt;/var&gt; 위치 뒤 ( &lt;code&gt;next-button&lt;/code&gt; ) 또는 이전 ( &lt;code&gt;previous-button&lt;/code&gt; ) 위치 다음 버튼을 반환합니다 . 경우 &lt;var&gt;count-current&lt;/var&gt; 비입니다 &lt;code&gt;nil&lt;/code&gt; 에서 어떤 버튼을 계산 &lt;var&gt;pos&lt;/var&gt; 대신 다음 버튼에서 시작하는 검색한다.</target>
        </trans-unit>
        <trans-unit id="45f6fdda6abd10a87def0d2bebb7c788cd08492a" translate="yes" xml:space="preserve">
          <source>Return the number of consecutive elements in &lt;var&gt;a&lt;/var&gt; equal &lt;var&gt;b&lt;/var&gt; starting at &lt;var&gt;i&lt;/var&gt;. &lt;code&gt;a&lt;/code&gt; is a bool vector, &lt;var&gt;b&lt;/var&gt; is &lt;code&gt;t&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;, and &lt;var&gt;i&lt;/var&gt; is an index into &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;i&lt;/var&gt; 에서 시작 &lt;var&gt;a&lt;/var&gt; 동일한 &lt;var&gt;b&lt;/var&gt; 의 연속 요소 수를 반환합니다 . &lt;code&gt;a&lt;/code&gt; 부울 벡터이며, &lt;var&gt;b&lt;/var&gt; 인 &lt;code&gt;t&lt;/code&gt; 또는 &lt;code&gt;nil&lt;/code&gt; 하고 &lt;var&gt;i&lt;/var&gt; 에 대한 인덱스이다 . &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5a9aae481e703108645548326f429bcc19dac322" translate="yes" xml:space="preserve">
          <source>Return the number of days in &lt;var&gt;month&lt;/var&gt; in &lt;var&gt;year&lt;/var&gt;. For instance, February 2020 has 29 days.</source>
          <target state="translated">의 일 수를 돌려 &lt;var&gt;month&lt;/var&gt; 에 &lt;var&gt;year&lt;/var&gt; . 예를 들어 2020 년 2 월에는 29 일이 있습니다.</target>
        </trans-unit>
        <trans-unit id="73c17fec03d8c8bc23be1affc4fc14b62174bf94" translate="yes" xml:space="preserve">
          <source>Return the number of elements that are &lt;code&gt;t&lt;/code&gt; in bool vector &lt;var&gt;a&lt;/var&gt;.</source>
          <target state="translated">bool 벡터 &lt;var&gt;a&lt;/var&gt; 에서 &lt;code&gt;t&lt;/code&gt; 인 요소의 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="b0a343012c09b4880277a5270dabe22fcdba6396" translate="yes" xml:space="preserve">
          <source>Return the object that &lt;var&gt;thread&lt;/var&gt; is waiting on. This function is primarily intended for debugging, and is given a &amp;ldquo;double hyphen&amp;rdquo; name to indicate that.</source>
          <target state="translated">&lt;var&gt;thread&lt;/var&gt; 가 대기중인 객체를 반환합니다 . 이 함수는 주로 디버깅을위한 것이며이를 나타 내기 위해 &quot;이중 하이픈&quot;이름이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="4e348e510457baf38c9c9b3f7ae9f3d47a43c7cf" translate="yes" xml:space="preserve">
          <source>Return the parent of &lt;var&gt;node&lt;/var&gt; in &lt;var&gt;dom&lt;/var&gt;.</source>
          <target state="translated">의 부모 돌아 &lt;var&gt;node&lt;/var&gt; 에 &lt;var&gt;dom&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="a1163d67fbe555ab351bb88e9e0e20faacead344" translate="yes" xml:space="preserve">
          <source>Return the pixel width and height of the object described by &lt;var&gt;position&lt;/var&gt;, as a cons cell &lt;code&gt;(&lt;var&gt;width&lt;/var&gt; . &lt;var&gt;height&lt;/var&gt;)&lt;/code&gt;. If the &lt;var&gt;position&lt;/var&gt; describes a buffer position, return the size of the character at that position.</source>
          <target state="translated">&lt;var&gt;position&lt;/var&gt; 설명 된 객체의 픽셀 너비와 높이를 단점 셀 &lt;code&gt;(&lt;var&gt;width&lt;/var&gt; . &lt;var&gt;height&lt;/var&gt;)&lt;/code&gt; 반환합니다 . &lt;var&gt;position&lt;/var&gt; 가 버퍼 위치를 설명하는 경우 해당 위치 의 문자 크기를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ffe0cdd70af1cca2c4eb67febbc9790a655ecef5" translate="yes" xml:space="preserve">
          <source>Return the pixel-based x and y coordinates in &lt;var&gt;position&lt;/var&gt;, as a cons cell &lt;code&gt;(&lt;var&gt;x&lt;/var&gt;&amp;nbsp;.&amp;nbsp;&lt;var&gt;y&lt;/var&gt;)&lt;/code&gt;. These coordinates are relative to the window given by &lt;code&gt;posn-window&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;position&lt;/var&gt; 의 픽셀 기반 x 및 y 좌표를 단점 셀 &lt;code&gt;(&lt;var&gt;x&lt;/var&gt;&amp;nbsp;.&amp;nbsp;&lt;var&gt;y&lt;/var&gt;)&lt;/code&gt; 반환합니다 . 이 좌표는 &lt;code&gt;posn-window&lt;/code&gt; 에 의해 주어진 창에 상대적 입니다.</target>
        </trans-unit>
        <trans-unit id="60e36a2d05a56bae6a503607205ab40b79c7ffd8" translate="yes" xml:space="preserve">
          <source>Return the pixel-based x and y coordinates relative to the upper left corner of the object described by &lt;var&gt;position&lt;/var&gt;, as a cons cell &lt;code&gt;(&lt;var&gt;dx&lt;/var&gt;&amp;nbsp;.&amp;nbsp;&lt;var&gt;dy&lt;/var&gt;)&lt;/code&gt;. If the &lt;var&gt;position&lt;/var&gt; describes buffer text, return the relative coordinates of the buffer-text character closest to that position.</source>
          <target state="translated">에 의해 기술 된 오브젝트의 왼쪽 상단 모서리에 상대적인 픽셀 기반의 x 및 y 좌표를 돌려 &lt;var&gt;position&lt;/var&gt; 반대 셀로서, &lt;code&gt;(&lt;var&gt;dx&lt;/var&gt;&amp;nbsp;.&amp;nbsp;&lt;var&gt;dy&lt;/var&gt;)&lt;/code&gt; . &lt;var&gt;position&lt;/var&gt; 버퍼 텍스트를 설명 하는 경우 해당 위치에 가장 가까운 버퍼 텍스트 문자의 상대 좌표를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7061ea94aabaa2416c01bc4562504861e05a4a97" translate="yes" xml:space="preserve">
          <source>Return the position at which &lt;var&gt;button&lt;/var&gt; ends.</source>
          <target state="translated">&lt;var&gt;button&lt;/var&gt; 끝나는 위치를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="73f7be2568522e0a72d19f9a5171c60606941a98" translate="yes" xml:space="preserve">
          <source>Return the position at which &lt;var&gt;button&lt;/var&gt; starts.</source>
          <target state="translated">&lt;var&gt;button&lt;/var&gt; 시작 되는 위치를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="ba30edee2b028cdedcae74a30bb8c41e1aeee43b" translate="yes" xml:space="preserve">
          <source>Return the position that &lt;code&gt;(beginning-of-line &lt;var&gt;count&lt;/var&gt;)&lt;/code&gt; would move to.</source>
          <target state="translated">&lt;code&gt;(beginning-of-line &lt;var&gt;count&lt;/var&gt;)&lt;/code&gt; 이동할 위치를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="c80e32f24ffb7459cc96301bc59d4055f827dbd1" translate="yes" xml:space="preserve">
          <source>Return the position that &lt;code&gt;(end-of-line &lt;var&gt;count&lt;/var&gt;)&lt;/code&gt; would move to.</source>
          <target state="translated">&lt;code&gt;(end-of-line &lt;var&gt;count&lt;/var&gt;)&lt;/code&gt; 이동할 위치를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ae265cac87b21d88120fb78dda6dac0ca3aefd51" translate="yes" xml:space="preserve">
          <source>Return the proper offset to align the current token with the parent. If non-&lt;code&gt;nil&lt;/code&gt;, &lt;var&gt;offset&lt;/var&gt; should be an integer giving an additional offset to apply.</source>
          <target state="translated">적절한 오프셋을 반환하여 현재 토큰을 부모와 정렬합니다. 비 경우 &lt;code&gt;nil&lt;/code&gt; , &lt;var&gt;offset&lt;/var&gt; 적용 오프셋 추가를주는 정수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="89552da9266862205d7e7f5fb7c4925d461d9a07" translate="yes" xml:space="preserve">
          <source>Return the property &lt;var&gt;prop&lt;/var&gt; of &lt;var&gt;abbrev&lt;/var&gt;, or &lt;code&gt;nil&lt;/code&gt; if the abbrev has no such property.</source>
          <target state="translated">&lt;var&gt;abbrev&lt;/var&gt; 의 속성 &lt;var&gt;prop&lt;/var&gt; 을 반환 하거나 abbrev에 그러한 속성이 없으면 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="32d0d3abcafda0bbf4c9a4b65f4a9a373328e390" translate="yes" xml:space="preserve">
          <source>Return the property &lt;var&gt;prop&lt;/var&gt; of abbrev table &lt;var&gt;table&lt;/var&gt;, or &lt;code&gt;nil&lt;/code&gt; if &lt;var&gt;table&lt;/var&gt; has no such property.</source>
          <target state="translated">abbrev table &lt;var&gt;table&lt;/var&gt; 의 속성 &lt;var&gt;prop&lt;/var&gt; 을 반환 하거나 &lt;var&gt;table&lt;/var&gt; 에 그러한 속성이 없으면 &lt;code&gt;nil&lt;/code&gt; 을 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="d344f6d8435ea011645a6b7a066c7d4619f7d559" translate="yes" xml:space="preserve">
          <source>Return the signature for the file.</source>
          <target state="translated">파일의 서명을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ecfab064a56207898b8124c4c36dc262030458f9" translate="yes" xml:space="preserve">
          <source>Return the string object described by &lt;var&gt;position&lt;/var&gt;, either &lt;code&gt;nil&lt;/code&gt; (which means &lt;var&gt;position&lt;/var&gt; describes buffer text), or a cons cell &lt;code&gt;(&lt;var&gt;string&lt;/var&gt;&amp;nbsp;.&amp;nbsp;&lt;var&gt;string-pos&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;nil&lt;/code&gt; ( &lt;var&gt;position&lt;/var&gt; 버퍼 텍스트 를 의미 함 ) 또는 cons 셀 &lt;code&gt;(&lt;var&gt;string&lt;/var&gt;&amp;nbsp;.&amp;nbsp;&lt;var&gt;string-pos&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;string&lt;/var&gt; &amp;nbsp;.&amp;nbsp; &lt;var&gt;string-pos&lt;/var&gt; ) 중 하나 인 &lt;var&gt;position&lt;/var&gt; 으로 설명 된 문자열 객체를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="541dc26b2ad10002e35b631e4db49204eb4f539a" translate="yes" xml:space="preserve">
          <source>Return the thread to which &lt;var&gt;process&lt;/var&gt; is locked. If &lt;var&gt;process&lt;/var&gt; is unlocked, return &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;process&lt;/var&gt; 가 잠긴 스레드를 반환합니다 . &lt;var&gt;process&lt;/var&gt; 가 잠금 해제 된 경우 &lt;code&gt;nil&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="c376d9b07558e05e3b0c714d72996292648b1e46" translate="yes" xml:space="preserve">
          <source>Return the timestamp in &lt;var&gt;position&lt;/var&gt;. This is the time at which the event occurred, in milliseconds.</source>
          <target state="translated">&lt;var&gt;position&lt;/var&gt; 의 타임 스탬프를 반환합니다 . 이벤트가 발생한 시간 (밀리 초)입니다.</target>
        </trans-unit>
        <trans-unit id="d4f2b9f35f57878969611520e75cb98a4e4b68d8" translate="yes" xml:space="preserve">
          <source>Return the value of &lt;var&gt;attribute&lt;/var&gt; in the node. A common usage would be:</source>
          <target state="translated">노드 의 &lt;var&gt;attribute&lt;/var&gt; 값을 반환합니다 . 일반적인 사용법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="76a2de8b2fc66bd3523d0021cc6d67125418cbdd" translate="yes" xml:space="preserve">
          <source>Return the value of &lt;var&gt;expression&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;expression&lt;/var&gt; 의 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="b0ed816e8ba6b4dafcc1e61ed622102facc78777" translate="yes" xml:space="preserve">
          <source>Return the value of &lt;var&gt;property&lt;/var&gt; in &lt;var&gt;image&lt;/var&gt;. Properties can be set by using &lt;code&gt;setf&lt;/code&gt;. Setting a property to &lt;code&gt;nil&lt;/code&gt; will remove the property from the image.</source>
          <target state="translated">의 값 반환 &lt;var&gt;property&lt;/var&gt; 의 &lt;var&gt;image&lt;/var&gt; . &lt;code&gt;setf&lt;/code&gt; 를 사용하여 속성을 설정할 수 있습니다 . 속성을 &lt;code&gt;nil&lt;/code&gt; 로 설정 하면 이미지에서 속성이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="a1a87bd6ed826d027d79425e68bb78320c28cc48" translate="yes" xml:space="preserve">
          <source>Return the width (thickness) in pixels of &lt;var&gt;window&lt;/var&gt;&amp;rsquo;s bottom divider. &lt;var&gt;window&lt;/var&gt; must be a live window and defaults to the selected one. The return value is zero for the minibuffer window or a bottommost window on a minibuffer-less frame.</source>
          <target state="translated">&lt;var&gt;window&lt;/var&gt; 하단 구분선 의 너비 (두께)를 픽셀 단위로 반환합니다 . &lt;var&gt;window&lt;/var&gt; 은 라이브 창 이어야하며 기본값은 선택한 창 이어야합니다. 미니 버퍼 창 또는 미니 버퍼없는 프레임의 맨 아래 창에 대한 반환 값은 0입니다.</target>
        </trans-unit>
        <trans-unit id="07dff9057087adcc56ee63446323baa36b2da0ac" translate="yes" xml:space="preserve">
          <source>Return the width (thickness) in pixels of &lt;var&gt;window&lt;/var&gt;&amp;rsquo;s right divider. &lt;var&gt;window&lt;/var&gt; must be a live window and defaults to the selected one. The return value is always zero for a rightmost window.</source>
          <target state="translated">&lt;var&gt;window&lt;/var&gt; 오른쪽 구분선 의 너비 (두께)를 픽셀 단위로 반환합니다 . &lt;var&gt;window&lt;/var&gt; 은 라이브 창 이어야하며 기본값은 선택한 창 이어야합니다. 가장 오른쪽 창에 대한 반환 값은 항상 0입니다.</target>
        </trans-unit>
        <trans-unit id="9d1962cadbf1a20107f5c250bd3f03da052cd81b" translate="yes" xml:space="preserve">
          <source>Return the window area recorded in &lt;var&gt;position&lt;/var&gt;. It returns &lt;code&gt;nil&lt;/code&gt; when the event occurred in the text area of the window; otherwise, it is a symbol identifying the area in which the event occurred.</source>
          <target state="translated">&lt;var&gt;position&lt;/var&gt; 기록 된 창 영역을 반환합니다 . 창의 텍스트 영역에서 이벤트가 발생하면 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다 . 그렇지 않으면 이벤트가 발생한 영역을 식별하는 기호입니다.</target>
        </trans-unit>
        <trans-unit id="985426041232947c5bed923c4ea9fed040fcbe12" translate="yes" xml:space="preserve">
          <source>Return the window that &lt;var&gt;position&lt;/var&gt; is in. If &lt;var&gt;position&lt;/var&gt; represents a location outside the frame where the event was initiated, return that frame instead.</source>
          <target state="translated">&lt;var&gt;position&lt;/var&gt; 가 있는 창을 반환합니다 . 위치 가 이벤트가 시작된 프레임 외부의 &lt;var&gt;position&lt;/var&gt; 나타내는 경우 대신 해당 프레임을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ead02eb694e824eb5a52793ad31f92a51b5b4631" translate="yes" xml:space="preserve">
          <source>Return to the top level editor command loop (&lt;code&gt;top-level&lt;/code&gt;). This exits all recursive editing levels, including all levels of Edebug activity. However, instrumented code protected with &lt;code&gt;unwind-protect&lt;/code&gt; or &lt;code&gt;condition-case&lt;/code&gt; forms may resume debugging.</source>
          <target state="translated">최상위 편집기 명령 루프 ( &lt;code&gt;top-level&lt;/code&gt; )로 돌아갑니다 . 이것은 모든 레벨의 Edebug 활동을 포함하여 모든 재귀 편집 레벨을 종료합니다. 그러나 &lt;code&gt;unwind-protect&lt;/code&gt; 또는 &lt;code&gt;condition-case&lt;/code&gt; 형식 으로 보호 된 계측 된 코드 는 디버깅을 다시 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c7d6f87e6c7b4d2dd3cc77be0038fa0b661a856" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;nil&lt;/code&gt; if &lt;var&gt;form&lt;/var&gt; is a &lt;em&gt;safe&lt;/em&gt; Lisp expression, or returns a list that describes why it might be unsafe. The argument &lt;var&gt;unsafep-vars&lt;/var&gt; is a list of symbols known to have temporary bindings at this point; it is mainly used for internal recursive calls. The current buffer is an implicit argument, which provides a list of buffer-local bindings.</source>
          <target state="translated">&lt;var&gt;form&lt;/var&gt; 이 &lt;em&gt;안전한&lt;/em&gt; Lisp 식 이면 &lt;code&gt;nil&lt;/code&gt; 을 반환 하거나 안전하지 않은 이유를 설명하는 목록을 반환합니다. &lt;var&gt;unsafep-vars&lt;/var&gt; 인수 는이 시점에서 임시 바인딩이있는 것으로 알려진 기호 목록입니다. 주로 내부 재귀 호출에 사용됩니다. 현재 버퍼는 버퍼 로컬 바인딩 목록을 제공하는 암시 적 인수입니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3a4a14f7e07d41a5faee55f0d2f026bb86d7b57d" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;t&lt;/code&gt; if &lt;var&gt;object&lt;/var&gt; is a symbol that names a character set, &lt;code&gt;nil&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;var&gt;object&lt;/var&gt; 가 문자 집합의 이름을 지정하는 기호 이면 &lt;code&gt;t&lt;/code&gt; 를 반환하고 그렇지 않으면 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4fabe257ce75606d6c949db20e0896d4a2c7c967" translate="yes" xml:space="preserve">
          <source>Returns either the string shown in the echo area, or when a pop-up buffer is used, the window used to display it.</source>
          <target state="translated">에코 영역에 표시된 문자열을 반환하거나 팝업 버퍼를 사용할 때이를 표시하는 데 사용되는 창을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f8cf7e9fe624f841abd011e27016b23cd231882d" translate="yes" xml:space="preserve">
          <source>Returns the capabilities of the notification server, a list of symbols. &lt;var&gt;bus&lt;/var&gt; can be a string denoting a D-Bus connection, the default is &lt;code&gt;:session&lt;/code&gt;. The following capabilities can be expected:</source>
          <target state="translated">알림 서버의 기능인 기호 목록을 반환합니다. &lt;var&gt;bus&lt;/var&gt; 는 D-Bus 연결을 나타내는 문자열 일 수 있으며 기본값은 &lt;code&gt;:session&lt;/code&gt; 입니다. 다음과 같은 기능을 기대할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf911dbc08bb9c0bc72df822f3a98b1d7afe196f" translate="yes" xml:space="preserve">
          <source>Reverting</source>
          <target state="translated">Reverting</target>
        </trans-unit>
        <trans-unit id="3373e33f94f507be9bb182872bffdfc503337932" translate="yes" xml:space="preserve">
          <source>Reverting tries to preserve marker positions in the buffer by using the replacement feature of &lt;code&gt;insert-file-contents&lt;/code&gt;. If the buffer contents and the file contents are identical before the revert operation, reverting preserves all the markers. If they are not identical, reverting does change the buffer; in that case, it preserves the markers in the unchanged text (if any) at the beginning and end of the buffer. Preserving any additional markers would be problematical.</source>
          <target state="translated">되돌리기는 &lt;code&gt;insert-file-contents&lt;/code&gt; 대체 기능을 사용하여 버퍼에서 마커 위치를 유지하려고합니다 . 되돌리기 작업 전에 버퍼 내용과 파일 내용이 동일한 경우 되 돌리면 모든 마커가 유지됩니다. 동일하지 않은 경우 되 돌리면 버퍼가 변경됩니다. 이 경우 버퍼의 시작과 끝에서 변경되지 않은 텍스트 (있는 경우)의 마커를 유지합니다. 추가 마커를 보존하는 것은 문제가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="73776d5b68dceec98acc490663799d4f99fa488c" translate="yes" xml:space="preserve">
          <source>Reworking the grammar to try and solve conflicts has its downsides, tho, because SMIE assumes that the grammar reflects the logical structure of the code, so it is preferable to keep the BNF closer to the intended abstract syntax tree.</source>
          <target state="translated">충돌을 해결하기 위해 문법을 재 작업하는 것은 단점이 있습니다. 왜냐하면 SMIE는 문법이 코드의 논리적 구조를 반영한다고 가정하기 때문에 BNF를 의도 된 추상 구문 트리에 더 가깝게 유지하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="c68a8d4726d60be762b51a641362f58db5a22a3c" translate="yes" xml:space="preserve">
          <source>Rotate the image by 90 degrees clockwise (&lt;code&gt;image-rotate&lt;/code&gt;). A prefix means to rotate by 90 degrees counter-clockwise instead.</source>
          <target state="translated">이미지를 시계 방향으로 90도 회전합니다 ( &lt;code&gt;image-rotate&lt;/code&gt; ). 접두사는 대신 시계 반대 방향으로 90도 회전하는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="63cd1f2bbe16226880ce3b96429eda5364eb25e2" translate="yes" xml:space="preserve">
          <source>Round-Trip Specification</source>
          <target state="translated">왕복 사양</target>
        </trans-unit>
        <trans-unit id="019c35c69487e51daa93b6ca45e4fe43394d641e" translate="yes" xml:space="preserve">
          <source>Rounding Operations</source>
          <target state="translated">반올림 작업</target>
        </trans-unit>
        <trans-unit id="4c2367a79f6dd9f384db915e3163fb47d998c60f" translate="yes" xml:space="preserve">
          <source>Rules for time zones and daylight saving time.</source>
          <target state="translated">시간대 및 일광 절약 시간에 대한 규칙.</target>
        </trans-unit>
        <trans-unit id="5c98d4f3fbe4f30d1eb7d8e9af8f16b99a6492cb" translate="yes" xml:space="preserve">
          <source>Rules for writing regular expressions.</source>
          <target state="translated">정규식 작성 규칙.</target>
        </trans-unit>
        <trans-unit id="1849b56de48087c27b0309ae045c3b8dff44dc82" translate="yes" xml:space="preserve">
          <source>Run &lt;var&gt;body&lt;/var&gt; with &lt;var&gt;var&lt;/var&gt; bound to each value that &lt;var&gt;iterator&lt;/var&gt; produces.</source>
          <target state="translated">&lt;var&gt;iterator&lt;/var&gt; 생성 하는 각 값에 &lt;var&gt;var&lt;/var&gt; 가 바인딩 된 &lt;var&gt;body&lt;/var&gt; 을 실행 합니다.</target>
        </trans-unit>
        <trans-unit id="04deb205be4a7ab8c325a7fc13efdadfbc458b8d" translate="yes" xml:space="preserve">
          <source>Run the program for one expression (&lt;code&gt;edebug-forward-sexp&lt;/code&gt;).</source>
          <target state="translated">하나의 표현식 ( &lt;code&gt;edebug-forward-sexp&lt;/code&gt; )에 대해 프로그램을 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="3d588dc7f25fd2a01f646bd7ca63e3be329d55e6" translate="yes" xml:space="preserve">
          <source>Run the program until the end of the containing sexp (&lt;code&gt;edebug-step-out&lt;/code&gt;).</source>
          <target state="translated">포함하는 sexp ( &lt;code&gt;edebug-step-out&lt;/code&gt; ) 가 끝날 때까지 프로그램을 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="98c8157782ca6963670b75f2f6b7516671ace802" translate="yes" xml:space="preserve">
          <source>Run without an interactive terminal. See &lt;a href=&quot;batch-mode#Batch-Mode&quot;&gt;Batch Mode&lt;/a&gt;.</source>
          <target state="translated">대화 형 터미널없이 실행합니다. &lt;a href=&quot;batch-mode#Batch-Mode&quot;&gt;배치 모드를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="be5b6cb427fd68c18fa5ef41915bfe7ea392d74c" translate="yes" xml:space="preserve">
          <source>Running Emacs in an unfriendly environment.</source>
          <target state="translated">비우호적 인 환경에서 Emacs를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="02db231fb5cb296bab91cd45fb2d56d9900e529b" translate="yes" xml:space="preserve">
          <source>Running Emacs without terminal interaction.</source>
          <target state="translated">터미널 상호 작용없이 Emacs 실행.</target>
        </trans-unit>
        <trans-unit id="cb19c3a26c8e0ca569cc71bbdc8cfc40fca3446a" translate="yes" xml:space="preserve">
          <source>Running Hooks</source>
          <target state="translated">러닝 훅</target>
        </trans-unit>
        <trans-unit id="5c4f806cf105786ce3d17cc253c6a9ea2dac3de6" translate="yes" xml:space="preserve">
          <source>Running a function when a variable is changed.</source>
          <target state="translated">변수가 변경 될 때 함수 실행.</target>
        </trans-unit>
        <trans-unit id="e5a402a1dd78dba64c6952ef1eb398898f18c09a" translate="yes" xml:space="preserve">
          <source>Running and communicating with subprocesses.</source>
          <target state="translated">하위 프로세스 실행 및 통신.</target>
        </trans-unit>
        <trans-unit id="d971566f87b102a960a790d9d248795b0d4e56a3" translate="yes" xml:space="preserve">
          <source>Running window change functions does not save and restore match data. Unless running &lt;code&gt;window-configuration-change-hook&lt;/code&gt; it does not save or restore the selected window or frame or the current buffer either.</source>
          <target state="translated">실행중인 창 변경 기능은 경기 데이터를 저장 및 복원하지 않습니다. 실행되지 않는 &lt;code&gt;window-configuration-change-hook&lt;/code&gt; 이 저장하거나 선택된 윈도우 또는 프레임 또는 현재의 버퍼 중 하나를 복원하지 않는다.</target>
        </trans-unit>
        <trans-unit id="ede813d7a36c01b56172920aa1f2bb327f73595d" translate="yes" xml:space="preserve">
          <source>Runs code when no longer reachable.</source>
          <target state="translated">더 이상 연결할 수 없을 때 코드를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="02aa629c8b16cd17a44f3a0efec2feed43937642" translate="yes" xml:space="preserve">
          <source>S</source>
          <target state="translated">S</target>
        </trans-unit>
        <trans-unit id="956da837f21f1162d031794cb53e38c348e5a2d9" translate="yes" xml:space="preserve">
          <source>S-</source>
          <target state="translated">S-</target>
        </trans-unit>
        <trans-unit id="090c3d63600fb0a56161730225850c055fd689b6" translate="yes" xml:space="preserve">
          <source>S-mouse-1</source>
          <target state="translated">S-mouse-1</target>
        </trans-unit>
        <trans-unit id="149b8de2b0282bcde23304b8948eaaf895a98809" translate="yes" xml:space="preserve">
          <source>SHIFT</source>
          <target state="translated">SHIFT</target>
        </trans-unit>
        <trans-unit id="431de839c3cfa8f3c21a44997868bec32d036c1f" translate="yes" xml:space="preserve">
          <source>SKIP</source>
          <target state="translated">SKIP</target>
        </trans-unit>
        <trans-unit id="745a31607dcecb9c3f083837516fc293998e5c06" translate="yes" xml:space="preserve">
          <source>SMIE Setup and Features</source>
          <target state="translated">SMIE 설정 및 기능</target>
        </trans-unit>
        <trans-unit id="a323aa84f785e027446756618551f38ccaf356e9" translate="yes" xml:space="preserve">
          <source>SMIE comes with a predefined lexical analyzer which uses syntax tables in the following way: any sequence of characters that have word or symbol syntax is considered a token, and so is any sequence of characters that have punctuation syntax. This default lexer is often a good starting point but is rarely actually correct for any given language. For example, it will consider &lt;code&gt;&quot;2,+3&quot;&lt;/code&gt; to be composed of 3 tokens: &lt;code&gt;&quot;2&quot;&lt;/code&gt;, &lt;code&gt;&quot;,+&quot;&lt;/code&gt;, and &lt;code&gt;&quot;3&quot;&lt;/code&gt;.</source>
          <target state="translated">SMIE는 다음과 같은 방식으로 구문 테이블을 사용하는 사전 정의 된 어휘 분석기와 함께 제공됩니다. 단어 또는 기호 구문이있는 모든 문자 시퀀스는 토큰으로 간주되며 구두점 구문이있는 모든 문자 시퀀스도 마찬가지입니다. 이 기본 어휘 분석기는 종종 좋은 시작점이지만 실제로는 어떤 언어에도 맞지 않습니다. 예를 들어 &lt;code&gt;&quot;2,+3&quot;&lt;/code&gt; 은 &lt;code&gt;&quot;2&quot;&lt;/code&gt; , &lt;code&gt;&quot;,+&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;3&quot;&lt;/code&gt; 의 3 개의 토큰으로 구성되는 것으로 간주 합니다.</target>
        </trans-unit>
        <trans-unit id="3ca28280fe8c9261318c79e00364b7c790d93607" translate="yes" xml:space="preserve">
          <source>SMIE indentation is based on the idea that indentation rules should be as local as possible. To this end, it relies on the idea of &lt;em&gt;virtual&lt;/em&gt; indentation, which is the indentation that a particular program point would have if it were at the beginning of a line. Of course, if that program point is indeed at the beginning of a line, its virtual indentation is its current indentation. But if not, then SMIE uses the indentation algorithm to compute the virtual indentation of that point. Now in practice, the virtual indentation of a program point does not have to be identical to the indentation it would have if we inserted a newline before it. To see how this works, the SMIE rule for indentation after a &lt;code&gt;{&lt;/code&gt; in C does not care whether the &lt;code&gt;{&lt;/code&gt; is standing on a line of its own or is at the end of the preceding line. Instead, these different cases are handled in the indentation rule that decides how to indent before a &lt;code&gt;{&lt;/code&gt;.</source>
          <target state="translated">SMIE 들여 쓰기는 들여 쓰기 규칙이 가능한 한 로컬이어야한다는 생각을 기반으로합니다. 이를 위해 특정 프로그램 포인트가 줄의 시작 부분에있을 경우 가질 들여 쓰기 인 &lt;em&gt;가상&lt;/em&gt; 들여 쓰기 개념에 의존 합니다. 물론 해당 프로그램 포인트가 실제로 줄의 시작 부분에 있으면 가상 들여 쓰기가 현재 들여 쓰기입니다. 그러나 그렇지 않은 경우 SMIE는 들여 쓰기 알고리즘을 사용하여 해당 지점의 가상 들여 쓰기를 계산합니다. 이제 실제로 프로그램 포인트의 가상 들여 쓰기는 그 앞에 개행을 삽입했을 때의 들여 쓰기와 동일 할 필요가 없습니다. 이것이 어떻게 작동하는지보기 위해 &lt;code&gt;{&lt;/code&gt; in C 에서 { 뒤에 들여 쓰기에 대한 SMIE 규칙 은 &lt;code&gt;{&lt;/code&gt; 자체 줄에 서 있거나 이전 줄의 끝에 있습니다. 대신 이러한 다른 경우는 &lt;code&gt;{&lt;/code&gt; 앞에 들여 쓰기하는 방법을 결정하는 들여 쓰기 규칙에서 처리됩니다 .</target>
        </trans-unit>
        <trans-unit id="647e9d9835804db4a04b47da3624a55498b44ee3" translate="yes" xml:space="preserve">
          <source>SMIE indentation rules are specified using a function that takes two arguments &lt;var&gt;method&lt;/var&gt; and &lt;var&gt;arg&lt;/var&gt; where the meaning of &lt;var&gt;arg&lt;/var&gt; and the expected return value depend on &lt;var&gt;method&lt;/var&gt;.</source>
          <target state="translated">SMIE 오목 규칙은 두 인수 얻어 기능 사용하여 지정 &lt;var&gt;method&lt;/var&gt; 및 &lt;var&gt;arg&lt;/var&gt; 의미 &lt;var&gt;arg&lt;/var&gt; 와 예정 반환 값에 의존하는 &lt;var&gt;method&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="0eaf99aaddc1334477c4382e239b81d6039e92cb" translate="yes" xml:space="preserve">
          <source>SMIE is a package that provides a generic navigation and indentation engine. Based on a very simple parser using an operator precedence grammar, it lets major modes extend the sexp-based navigation of Lisp to non-Lisp languages as well as provide a simple to use but reliable auto-indentation.</source>
          <target state="translated">SMIE는 일반 탐색 및 들여 쓰기 엔진을 제공하는 패키지입니다. 연산자 우선 순위 문법을 사용하는 매우 간단한 파서를 기반으로, 주요 모드는 Lisp의 sexp 기반 탐색을 Lisp가 아닌 언어로 확장 할뿐만 아니라 사용하기 간단하지만 안정적인 자동 들여 쓰기를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8cc32e3285358843e2bb18b22af60814435e8975" translate="yes" xml:space="preserve">
          <source>SMIE is meant to be a one-stop shop for structural navigation and various other features which rely on the syntactic structure of code, in particular automatic indentation. The main entry point is &lt;code&gt;smie-setup&lt;/code&gt; which is a function typically called while setting up a major mode.</source>
          <target state="translated">SMIE는 구조 탐색 및 코드의 구문 구조, 특히 자동 들여 쓰기에 의존하는 다양한 기타 기능을위한 원 스톱 상점입니다. 주요 진입 점은 &lt;code&gt;smie-setup&lt;/code&gt; 으로, 일반적으로 주요 모드를 설정하는 동안 호출되는 기능입니다.</target>
        </trans-unit>
        <trans-unit id="256fddfad4c5523da85ac4896b52a67dd5bba0b9" translate="yes" xml:space="preserve">
          <source>SMIE provides various functions designed specifically for use in the indentation rules function (several of those functions break if used in another context). These functions all start with the prefix &lt;code&gt;smie-rule-&lt;/code&gt;.</source>
          <target state="translated">SMIE는 들여 쓰기 규칙 기능에서 사용하도록 특별히 설계된 다양한 기능을 제공합니다 (다른 컨텍스트에서 사용되는 경우 이러한 기능 중 일부가 중단됨). 이러한 함수는 모두 &lt;code&gt;smie-rule-&lt;/code&gt; 접두사로 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="a55f21b5c19e3144a284b28c14e9cc99cbd1d0d8" translate="yes" xml:space="preserve">
          <source>SMIE setup and features.</source>
          <target state="translated">SMIE 설정 및 기능.</target>
        </trans-unit>
        <trans-unit id="2c6d6f2cc4b7bb340e6ff2c84c64795d25a7ac6d" translate="yes" xml:space="preserve">
          <source>SMIE&amp;rsquo;s precedence grammars simply give to each token a pair of precedences: the left-precedence and the right-precedence. We say &lt;code&gt;T1 &amp;lt; T2&lt;/code&gt; if the right-precedence of token &lt;code&gt;T1&lt;/code&gt; is less than the left-precedence of token &lt;code&gt;T2&lt;/code&gt;. A good way to read this &lt;code&gt;&amp;lt;&lt;/code&gt; is as a kind of parenthesis: if we find &lt;code&gt;... T1 something
T2 ...&lt;/code&gt; then that should be parsed as &lt;code&gt;... T1 (something T2 ...&lt;/code&gt; rather than as &lt;code&gt;... T1 something) T2 ...&lt;/code&gt;. The latter interpretation would be the case if we had &lt;code&gt;T1 &amp;gt; T2&lt;/code&gt;. If we have &lt;code&gt;T1 = T2&lt;/code&gt;, it means that token T2 follows token T1 in the same syntactic construction, so typically we have &lt;code&gt;&quot;begin&quot; = &quot;end&quot;&lt;/code&gt;. Such pairs of precedences are sufficient to express left-associativity or right-associativity of infix operators, nesting of tokens like parentheses and many other cases.</source>
          <target state="translated">SMIE의 우선 순위 문법은 각 토큰에 한 쌍의 우선 순위를 부여합니다 : 왼쪽 우선 순위와 오른쪽 우선 순위. 토큰 &lt;code&gt;T1&lt;/code&gt; 의 오른쪽 우선 순위가 토큰 &lt;code&gt;T2&lt;/code&gt; 의 왼쪽 우선 순위보다 작 으면 &lt;code&gt;T1 &amp;lt; T2&lt;/code&gt; 라고 합니다. 이 글을 읽을 수있는 좋은 방법은 &lt;code&gt;&amp;lt;&lt;/code&gt; 괄호의 일종으로이다 : 우리가 찾으면 &lt;code&gt;... T1 something T2 ...&lt;/code&gt; 그 구문 분석해야한다 등 &lt;code&gt;... T1 (something T2 ...&lt;/code&gt; 오히려 같은보다 &lt;code&gt;... T1 something) T2 ...&lt;/code&gt; . 후자의 해석은 &lt;code&gt;T1 &amp;gt; T2&lt;/code&gt; 가있는 경우 입니다. 우리가있는 경우 &lt;code&gt;T1 = T2&lt;/code&gt; , 그렇게 일반적으로 우리가, 토큰 T2는 같은 구문 건설 토큰 T1을 다음 것을 의미한다 &lt;code&gt;&quot;begin&quot; = &quot;end&quot;&lt;/code&gt; . 이러한 우선 순위 쌍은 중위 연산자의 왼쪽 연결성 또는 오른쪽 연결성, 괄호와 같은 토큰 중첩 및 기타 여러 경우를 표현하기에 충분합니다.</target>
        </trans-unit>
        <trans-unit id="99a38b98676fcda1dfd44294dab30329f47cc385" translate="yes" xml:space="preserve">
          <source>SPC</source>
          <target state="translated">SPC</target>
        </trans-unit>
        <trans-unit id="885556121357469ce9848d64ab90e4501f8d2c2a" translate="yes" xml:space="preserve">
          <source>SPC .. ~</source>
          <target state="translated">SPC .. ~</target>
        </trans-unit>
        <trans-unit id="715dff4ef846b32148b5b183222e444dbb141e03" translate="yes" xml:space="preserve">
          <source>STARTTLS</source>
          <target state="translated">STARTTLS</target>
        </trans-unit>
        <trans-unit id="6782959cbdf71155c681defb244e1ba5e73a9bfd" translate="yes" xml:space="preserve">
          <source>SUID</source>
          <target state="translated">SUID</target>
        </trans-unit>
        <trans-unit id="5004e324326f126462b0e342642c89495c28712d" translate="yes" xml:space="preserve">
          <source>SUPER</source>
          <target state="translated">SUPER</target>
        </trans-unit>
        <trans-unit id="eb6ebb3446da9061ed43f4408820e25b32cac2f3" translate="yes" xml:space="preserve">
          <source>SVG (Scalable Vector Graphics) is an XML format for specifying images. If your Emacs build has SVG support, you can create and manipulate these images with the following functions from the</source>
          <target state="translated">SVG (Scalable Vector Graphics)는 이미지를 지정하기위한 XML 형식입니다. Emacs 빌드에 SVG 지원이있는 경우 다음 기능을 사용하여 이러한 이미지를 만들고 조작 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="18ae68336084fd9129cbf51c4a376831f40b8822" translate="yes" xml:space="preserve">
          <source>SVG Images</source>
          <target state="translated">SVG 이미지</target>
        </trans-unit>
        <trans-unit id="0a7706c480bd8a72cba9bbc6eebb1849ab85193a" translate="yes" xml:space="preserve">
          <source>SVG Path Commands</source>
          <target state="translated">SVG 경로 명령</target>
        </trans-unit>
        <trans-unit id="9d50da2cbec96d67048ca4b7257681e9448b5bb0" translate="yes" xml:space="preserve">
          <source>Sample Indentation Rules</source>
          <target state="translated">샘플 들여 쓰기 규칙</target>
        </trans-unit>
        <trans-unit id="c3d9e934d6505dce3393aafb0f1bf00fe0301326" translate="yes" xml:space="preserve">
          <source>Sample indentation rules.</source>
          <target state="translated">샘플 들여 쓰기 규칙.</target>
        </trans-unit>
        <trans-unit id="a32a5271b843b4b247391cca71f69b213ed4a31d" translate="yes" xml:space="preserve">
          <source>Save all abbrev definitions (except system abbrevs), for all abbrev tables listed in &lt;code&gt;abbrev-table-name-list&lt;/code&gt;, in the file &lt;var&gt;filename&lt;/var&gt;, in the form of a Lisp program that when loaded will define the same abbrevs. Tables that do not have any abbrevs to save are omitted. If &lt;var&gt;filename&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt; or omitted, &lt;code&gt;abbrev-file-name&lt;/code&gt; is used. This function returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">에 나열된 모든 약칭 테이블에 대한 (시스템 abbrevs 제외) 모든 약칭 정의를 저장 &lt;code&gt;abbrev-table-name-list&lt;/code&gt; 파일에 &lt;var&gt;filename&lt;/var&gt; 로드 할 때 같은 abbrevs을 정의 할 것이라는 리스프 프로그램의 형태로. 저장할 약어가없는 테이블은 생략됩니다. 경우 &lt;var&gt;filename&lt;/var&gt; 이다 &lt;code&gt;nil&lt;/code&gt; 생략되거나, &lt;code&gt;abbrev-file-name&lt;/code&gt; 사용된다. 이 함수는 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="906566053674235c7ca6449815fb7bc029627a81" translate="yes" xml:space="preserve">
          <source>Save for future sessions</source>
          <target state="translated">향후 세션을 위해 저장</target>
        </trans-unit>
        <trans-unit id="5a6f1d809431958820f1bb6b35ca3a6b85acd01f" translate="yes" xml:space="preserve">
          <source>Save the image to a file (&lt;code&gt;image-save&lt;/code&gt;).</source>
          <target state="translated">이미지를 파일 &lt;code&gt;image-save&lt;/code&gt; 합니다 ( image-save ).</target>
        </trans-unit>
        <trans-unit id="2843abea8cc36fe5ce310744abd0d4c1836ca1bc" translate="yes" xml:space="preserve">
          <source>Saving Abbrevs in Files</source>
          <target state="translated">약어를 파일에 저장</target>
        </trans-unit>
        <trans-unit id="a469d4273a056edaa94987f2c1abc7a08c091e7e" translate="yes" xml:space="preserve">
          <source>Saving Buffers</source>
          <target state="translated">버퍼 저장</target>
        </trans-unit>
        <trans-unit id="60fe255268c4f121d68121a93c6f0557f378d4ae" translate="yes" xml:space="preserve">
          <source>Saving a buffer runs several hooks. It also performs format conversion (see &lt;a href=&quot;format-conversion#Format-Conversion&quot;&gt;Format Conversion&lt;/a&gt;). Note that these hooks, described below, are only run by &lt;code&gt;save-buffer&lt;/code&gt;, they are not run by other primitives and functions that write buffer text to files, and in particular auto-saving (see &lt;a href=&quot;auto_002dsaving#Auto_002dSaving&quot;&gt;Auto-Saving&lt;/a&gt;) doesn&amp;rsquo;t run these hooks.</source>
          <target state="translated">버퍼를 저장하면 여러 후크가 실행됩니다. 또한 형식 변환 (참조 수행하는 &lt;a href=&quot;format-conversion#Format-Conversion&quot;&gt;포맷 변환을&lt;/a&gt; ). 아래에 설명 된 이러한 후크는 &lt;code&gt;save-buffer&lt;/code&gt; 에 의해서만 실행되고 버퍼 텍스트를 파일에 쓰는 다른 기본 요소 및 함수에 의해 실행되지 않으며 특히 자동 저장 ( &lt;a href=&quot;auto_002dsaving#Auto_002dSaving&quot;&gt;자동 저장&lt;/a&gt; 참조 )은 이러한 후크를 실행하지 않습니다. .</target>
        </trans-unit>
        <trans-unit id="be3e17bd1459a1ba4054a5352e3cefc4c93a5e84" translate="yes" xml:space="preserve">
          <source>Saving abbrevs in files.</source>
          <target state="translated">약어를 파일에 저장합니다.</target>
        </trans-unit>
        <trans-unit id="1bc0703806a683fd5fbf3591683ed1d7e6a40381" translate="yes" xml:space="preserve">
          <source>Saving and Restoring the Match Data</source>
          <target state="translated">경기 데이터 저장 및 복원</target>
        </trans-unit>
        <trans-unit id="f2ab3c54e4086551a79715adae3432c327e6a581" translate="yes" xml:space="preserve">
          <source>Saving and restoring point in all buffers is expensive, since it requires selecting each window twice, so enable this only if you need it. See &lt;a href=&quot;edebug-display-update#Edebug-Display-Update&quot;&gt;Edebug Display Update&lt;/a&gt;.</source>
          <target state="translated">각 창을 두 번 선택해야하기 때문에 모든 버퍼에 포인트를 저장하고 복원하는 것은 비용이 많이 들기 때문에 필요한 경우에만 활성화하십시오. &lt;a href=&quot;edebug-display-update#Edebug-Display-Update&quot;&gt;Edebug 디스플레이 업데이트를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ca3c165c40df3590832cb7bc3e1591aa01a0e9aa" translate="yes" xml:space="preserve">
          <source>Saving and restoring point in other buffers is necessary if you are debugging code that changes the point of a buffer that is displayed in a non-selected window. If Edebug or the user then selects the window, point in that buffer will move to the window&amp;rsquo;s value of point.</source>
          <target state="translated">선택되지 않은 창에 표시되는 버퍼의 포인트를 변경하는 코드를 디버깅하는 경우 다른 버퍼에 포인트를 저장하고 복원해야합니다. Edebug 또는 사용자가 윈도우를 선택하면 해당 버퍼의 포인트가 윈도우의 포인트 값으로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="4d3c6410b58729b88f45870d3e7c55b7e62fadd0" translate="yes" xml:space="preserve">
          <source>Saving and restoring state with X Session Management.</source>
          <target state="translated">X 세션 관리로 상태 저장 및 복원.</target>
        </trans-unit>
        <trans-unit id="8671e243e41ead73c535d5d785c9920dae93887d" translate="yes" xml:space="preserve">
          <source>Saving and restoring the match data.</source>
          <target state="translated">경기 데이터 저장 및 복원.</target>
        </trans-unit>
        <trans-unit id="8763e229f4025af2badb37bbcbf9079ab6a88b1e" translate="yes" xml:space="preserve">
          <source>Saving and restoring the state of the screen.</source>
          <target state="translated">화면 상태 저장 및 복원.</target>
        </trans-unit>
        <trans-unit id="5fbbbe153d34b466dcf42115a93630fb5a66e5ff" translate="yes" xml:space="preserve">
          <source>Saving histories of recent or all input events.</source>
          <target state="translated">최근 또는 모든 입력 이벤트의 기록을 저장합니다.</target>
        </trans-unit>
        <trans-unit id="44ebeea4aad4da1f165425dc36057472f94c252a" translate="yes" xml:space="preserve">
          <source>Saving the state of all frames.</source>
          <target state="translated">모든 프레임의 상태를 저장합니다.</target>
        </trans-unit>
        <trans-unit id="0eb8e66aa03e8ad6035dc4d40f7c4c2b445df20e" translate="yes" xml:space="preserve">
          <source>Scan error</source>
          <target state="translated">스캔 오류</target>
        </trans-unit>
        <trans-unit id="929097f91b2a40c4a26bd5374ffb1b337e01cf7d" translate="yes" xml:space="preserve">
          <source>Scanning Keymaps</source>
          <target state="translated">키맵 스캔</target>
        </trans-unit>
        <trans-unit id="86dfa70530f3f4ff86078663ba45163a130723eb" translate="yes" xml:space="preserve">
          <source>Scanning for Character Sets</source>
          <target state="translated">문자 세트 스캔</target>
        </trans-unit>
        <trans-unit id="08e633fdbabb8dde61dc208715c2816dccc7759c" translate="yes" xml:space="preserve">
          <source>Scanning ignores comments if &lt;code&gt;parse-sexp-ignore-comments&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;parse-sexp-ignore-comments&lt;/code&gt; 가 &lt;code&gt;nil&lt;/code&gt; 이 아니면 스캔은 주석을 무시합니다 .</target>
        </trans-unit>
        <trans-unit id="597816d0a720b7dba3f9d218c2951feb541ff473" translate="yes" xml:space="preserve">
          <source>Scoping Rules for Variable Bindings</source>
          <target state="translated">변수 바인딩에 대한 범위 지정 규칙</target>
        </trans-unit>
        <trans-unit id="7efc743ee6de845d4a88d20ffbd2374e9ee253e5" translate="yes" xml:space="preserve">
          <source>Scroll Bars</source>
          <target state="translated">스크롤 바</target>
        </trans-unit>
        <trans-unit id="c1df02894357781da6103aa4f2c83dae1335a88b" translate="yes" xml:space="preserve">
          <source>Search and Replace</source>
          <target state="translated">검색 및 교체</target>
        </trans-unit>
        <trans-unit id="e2e904ac10fcdb3d34debb839009dc5b7812070f" translate="yes" xml:space="preserve">
          <source>Search failed</source>
          <target state="translated">검색 실패</target>
        </trans-unit>
        <trans-unit id="5c425c9ce211d9c7eaac8d86b2f8b6450d61e585" translate="yes" xml:space="preserve">
          <source>Search for an exact match.</source>
          <target state="translated">정확히 일치하는 것을 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="efdb36bb03ba1a660a667761e6fcd313f299f1d9" translate="yes" xml:space="preserve">
          <source>Search for the next region that has text property &lt;var&gt;prop&lt;/var&gt; set to &lt;var&gt;value&lt;/var&gt; according to &lt;var&gt;predicate&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;predicate&lt;/var&gt; 에 따라 text 속성 &lt;var&gt;prop&lt;/var&gt; 이 &lt;var&gt;value&lt;/var&gt; 로 설정된 다음 영역을 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="c1f3f1591ee981b75eb947343e9b7bce3de4fd1c" translate="yes" xml:space="preserve">
          <source>Search-based Fontification</source>
          <target state="translated">검색 기반 글꼴 화</target>
        </trans-unit>
        <trans-unit id="a2cd9075af5e3df68a05a35833456bcafd5af4de" translate="yes" xml:space="preserve">
          <source>Searching POSIX-style for the longest match.</source>
          <target state="translated">가장 긴 일치를 위해 POSIX 스타일을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="938457a2a99271d197ccf9ad24de5047ce21b9ba" translate="yes" xml:space="preserve">
          <source>Searching and Case</source>
          <target state="translated">검색 및 사례</target>
        </trans-unit>
        <trans-unit id="648435398120e5c13afd825a03edfb8423920b87" translate="yes" xml:space="preserve">
          <source>Searching and Matching</source>
          <target state="translated">검색 및 매칭</target>
        </trans-unit>
        <trans-unit id="240192b69b2585a53497c18ee0af9bc2392dc6f2" translate="yes" xml:space="preserve">
          <source>Searching buffers for strings or regexps.</source>
          <target state="translated">버퍼에서 문자열 또는 정규 표현식을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="9e3e6b5eaf1e69fbca4d75e7e4943770ccbfd0d7" translate="yes" xml:space="preserve">
          <source>Searching for Overlays</source>
          <target state="translated">오버레이 검색</target>
        </trans-unit>
        <trans-unit id="f8ff39ba712e61dbbacf3b17f005c9c90797c3ff" translate="yes" xml:space="preserve">
          <source>Searching for Strings</source>
          <target state="translated">문자열 검색</target>
        </trans-unit>
        <trans-unit id="87a17eda9542c5acaaebb765a6b20895c6adf422" translate="yes" xml:space="preserve">
          <source>Searching for a match for a regexp.</source>
          <target state="translated">정규 표현식과 일치하는 항목을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="77e2b5af4a602f67d417c33ca4bc4af91fda4f7b" translate="yes" xml:space="preserve">
          <source>Searching for overlays.</source>
          <target state="translated">오버레이를 검색 중입니다.</target>
        </trans-unit>
        <trans-unit id="1739c691f1389f4c3c564d3fd05558471ea68ea0" translate="yes" xml:space="preserve">
          <source>Searching for where a property changes value.</source>
          <target state="translated">속성이 값을 변경하는 위치를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="62e709d5958fe7e24e1201fcff7d2c4465829c9f" translate="yes" xml:space="preserve">
          <source>Searching the Active Keymaps</source>
          <target state="translated">활성 키맵 검색</target>
        </trans-unit>
        <trans-unit id="402cc3b6686cd294cb10dd3f5bccbebd0edd8a9b" translate="yes" xml:space="preserve">
          <source>Security Considerations</source>
          <target state="translated">보안 고려 사항</target>
        </trans-unit>
        <trans-unit id="9a0a51de2abb76fdfd33fd85a5bb63cb0c7e94ee" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;accessing-documentation#Accessing-Documentation&quot;&gt;Accessing Documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;accessing-documentation#Accessing-Documentation&quot;&gt;문서 액세스를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7b20b5e4a408c1a58f4912cc7e2d8f0f66418ce6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;accessing-documentation#describe_002dsymbols-example&quot;&gt;describe-symbols example&lt;/a&gt;, for an example of using &lt;code&gt;help-buffer&lt;/code&gt;, &lt;code&gt;with-help-window&lt;/code&gt;, and &lt;code&gt;help-setup-xref&lt;/code&gt;.</source>
          <target state="translated">참조 &lt;a href=&quot;accessing-documentation#describe_002dsymbols-example&quot;&gt;설명 - 귀하의 예를&lt;/a&gt; 사용하는 예를 들어, &lt;code&gt;help-buffer&lt;/code&gt; , &lt;code&gt;with-help-window&lt;/code&gt; 및 &lt;code&gt;help-setup-xref&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="518c934442d09bbbe7dad581bff318c8ce633e22" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;anonymous-functions#Anonymous-Functions&quot;&gt;Anonymous Functions&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;anonymous-functions#Anonymous-Functions&quot;&gt;익명 함수를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="70b7f47638681a3887c44d73bb1c1ab5f66fb312" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;array-functions#Array-Functions&quot;&gt;arrayp&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;array-functions#Array-Functions&quot;&gt;arrayp를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="364a3876adc8ba735794b74d771ef66e59172ef9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;association-lists#Association-Lists&quot;&gt;Association Lists&lt;/a&gt;, for a further explanation of alists and for functions that work on alists. See &lt;a href=&quot;hash-tables#Hash-Tables&quot;&gt;Hash Tables&lt;/a&gt;, for another kind of lookup table, which is much faster for handling a large number of keys.</source>
          <target state="translated">&lt;a href=&quot;association-lists#Association-Lists&quot;&gt;목록&lt;/a&gt; 에 대한 자세한 설명과 목록 에서 작동하는 함수에 대해서는 연관 목록을 참조하십시오 . 많은 수의 키를 처리하는 데 훨씬 더 빠른 다른 종류의 조회 테이블에 대해서는 &lt;a href=&quot;hash-tables#Hash-Tables&quot;&gt;해시 테이블을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bfec8520e35fd42ed2d804f461524d23bfc32cf6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;auto-faces#Auto-Faces&quot;&gt;Automatic Face Assignment&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;auto-faces#Auto-Faces&quot;&gt;자동면 할당을&lt;/a&gt; 참고하십시오 .</target>
        </trans-unit>
        <trans-unit id="3ee2481cb839a100a90ef3f9fa5f1d09e76d58c3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;auto_002dsaving#Auto_002dSaving&quot;&gt;Auto-Saving&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;auto_002dsaving#Auto_002dSaving&quot;&gt;자동 저장을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ec9e4044918b71025234b520baa2413f952b3792" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;autoload#Autoload&quot;&gt;Autoload&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;autoload#Autoload&quot;&gt;자동로드를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="edac4a82b5c56395a6ac7c47c57171234a43709b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;backtraces#Backtraces&quot;&gt;Backtraces&lt;/a&gt;, for a description of backtraces and the commands which work on them.</source>
          <target state="translated">&lt;a href=&quot;backtraces#Backtraces&quot;&gt;역&lt;/a&gt; 추적 및 이에 대해 작동하는 명령에 대한 설명은 역 추적을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ee01bc247305b3240415c3dd4c2fd1170cc0c4cd" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;basic-thread-functions#Basic-Thread-Functions&quot;&gt;threadp&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;basic-thread-functions#Basic-Thread-Functions&quot;&gt;threadp를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7f24a2d5e38d4d7ce9456024a0ee523a1533edfa" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;basic-windows#Basic-Windows&quot;&gt;windowp&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;basic-windows#Basic-Windows&quot;&gt;windowp를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ee1cc5a05f5ee8bdbb840079bd4eefe0f5a5e1bb" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;bool_002dvectors#Bool_002dVectors&quot;&gt;bool-vector-p&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;bool_002dvectors#Bool_002dVectors&quot;&gt;bool-vector-p를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ebdc452931bd31ee37ca90777a7e9948d95c92cc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;buffer-basics#Buffer-Basics&quot;&gt;bufferp&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;buffer-basics#Buffer-Basics&quot;&gt;bufferp를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2e618ffe5131ec2c9d32c88eff1df2caebd47cef" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;buffer-contents#Buffer-Contents&quot;&gt;Buffer Contents&lt;/a&gt;, for the function &lt;code&gt;buffer-substring-no-properties&lt;/code&gt;, which copies text from the buffer but does not copy its properties.</source>
          <target state="translated">&lt;a href=&quot;buffer-contents#Buffer-Contents&quot;&gt;버퍼&lt;/a&gt; 에서 텍스트를 복사하지만 속성을 복사하지는 않는 &lt;code&gt;buffer-substring-no-properties&lt;/code&gt; 함수에 대해서는 Buffer Contents를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b3d621e3ea3a12a1239750e594f233fcae6dae67" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;building-emacs#Building-Emacs&quot;&gt;Building Emacs&lt;/a&gt;, for related information. See &lt;a href=&quot;display#Display&quot;&gt;Display&lt;/a&gt;, for additional operating system status information pertaining to the terminal and the screen.</source>
          <target state="translated">관련 정보는 &lt;a href=&quot;building-emacs#Building-Emacs&quot;&gt;Building Emacs를&lt;/a&gt; 참조하십시오 . 터미널 및 화면과 관련된 추가 운영 체제 상태 정보는 &lt;a href=&quot;display#Display&quot;&gt;디스플레이를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3944d361b59b4be2506b9ec39ac6d192c5df810b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;byte_002dcode-type#Byte_002dCode-Type&quot;&gt;byte-code-function-p&lt;/a&gt;.</source>
          <target state="translated">참조 &lt;a href=&quot;byte_002dcode-type#Byte_002dCode-Type&quot;&gt;바이트 코드 기능-P를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cd4971e4bb3046cbb4a2aed0bd8f428ea920bf92" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;calling-functions#Calling-Functions&quot;&gt;Calling Functions&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;calling-functions#Calling-Functions&quot;&gt;Calling Functions&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="60710553886aead6073c6b05858b9b1c79023ab8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;case-tables#Case-Tables&quot;&gt;case-table-p&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;case-tables#Case-Tables&quot;&gt;case-table-p&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="cfc8d7e974a742b4495b5b1c184d5e160e3d2e5a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;change-hooks#Change-Hooks&quot;&gt;Change Hooks&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;change-hooks#Change-Hooks&quot;&gt;Change Hooks&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="488a966c45e866881572153a8542b294820b715d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;changing-files#Changing-Files&quot;&gt;Changing Files&lt;/a&gt;, for the &lt;code&gt;set-file-modes&lt;/code&gt; function, which can be used to set these permissions.</source>
          <target state="translated">See &lt;a href=&quot;changing-files#Changing-Files&quot;&gt;Changing Files&lt;/a&gt;, for the &lt;code&gt;set-file-modes&lt;/code&gt; function, which can be used to set these permissions.</target>
        </trans-unit>
        <trans-unit id="c373b8f66b71437ffb72d85db0c1f516fbf91564" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;char_002dtables#Char_002dTables&quot;&gt;Char-Tables&lt;/a&gt;, for special functions to operate on char-tables. Uses of char-tables include:</source>
          <target state="translated">See &lt;a href=&quot;char_002dtables#Char_002dTables&quot;&gt;Char-Tables&lt;/a&gt;, for special functions to operate on char-tables. Uses of char-tables include:</target>
        </trans-unit>
        <trans-unit id="396bf4b18badb825922259ebd758990655b2ba63" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;char_002dtables#Char_002dTables&quot;&gt;Char-Tables&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;char_002dtables#Char_002dTables&quot;&gt;Char-Tables&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="9fbca9413b9b039c9d587b90a6246415944c81a9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;char_002dtables#Char_002dTables&quot;&gt;char-table-p&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;char_002dtables#Char_002dTables&quot;&gt;char-table-p&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="9f2da4019fca159bd3be3eaa0ffbf4862024ef74" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;choosing-window-options#Choosing-Window-Options&quot;&gt;Choosing Window Options&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;choosing-window-options#Choosing-Window-Options&quot;&gt;Choosing Window Options&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="fb01ecd6edd6f782abddc404319fc81a63f89685" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;color-names#Color-Names&quot;&gt;Color Names&lt;/a&gt;, &lt;a href=&quot;text-terminal-colors#Text-Terminal-Colors&quot;&gt;Text Terminal Colors&lt;/a&gt;, for other functions to obtain information about displays.</source>
          <target state="translated">See &lt;a href=&quot;color-names#Color-Names&quot;&gt;Color Names&lt;/a&gt;, &lt;a href=&quot;text-terminal-colors#Text-Terminal-Colors&quot;&gt;Text Terminal Colors&lt;/a&gt;, for other functions to obtain information about displays.</target>
        </trans-unit>
        <trans-unit id="7d3824b66b0670b71cc683b92ea40790a70574c0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;command-overview#Command-Overview&quot;&gt;Command Overview&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;command-overview#Command-Overview&quot;&gt;Command Overview&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c909de41e8032b6d7b72d435972ce269a6360449" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;command_002dline-arguments#Command_002dLine-Arguments&quot;&gt;Command-Line Arguments&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;command_002dline-arguments#Command_002dLine-Arguments&quot;&gt;Command-Line Arguments&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c0319e26e2411eb47824b94445e6e1b600d2d28a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;condition-variables#Condition-Variables&quot;&gt;condition-variable-p&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;condition-variables#Condition-Variables&quot;&gt;condition-variable-p&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="1aec66035f33002d9d51452c037266816641f5ab" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;constant-variables#Constant-Variables&quot;&gt;Constant Variables&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;constant-variables#Constant-Variables&quot;&gt;Constant Variables&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="dc387c472d92e947081940c55a4e668464964391" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;creating-buffer_002dlocal#Creating-Buffer_002dLocal&quot;&gt;Creating Buffer-Local&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;creating-buffer_002dlocal#Creating-Buffer_002dLocal&quot;&gt;Creating Buffer-Local&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="e77d7d839e11c830e29296ae02341ab26f4f6680" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;creating-frames#Creating-Frames&quot;&gt;Creating Frames&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;creating-frames#Creating-Frames&quot;&gt;Creating Frames&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="5b146a832278deada6e6676264c098fa9de02e47" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;creating-keymaps#Creating-Keymaps&quot;&gt;keymapp&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;creating-keymaps#Creating-Keymaps&quot;&gt;keymapp&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="94046ef59e5d247df6873f71fcbb8b8463ff7745" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;creating-symbols#Creating-Symbols&quot;&gt;Creating Symbols&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;creating-symbols#Creating-Symbols&quot;&gt;Creating Symbols&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="e6b1ac8e2d3483f6eae03a25a819d27fcd92e2a5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;deleting-frames#Deleting-Frames&quot;&gt;Deleting Frames&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;deleting-frames#Deleting-Frames&quot;&gt;Deleting Frames&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a0050f789f527488f0c3100cae80d734b5d15528" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;deleting-frames#Deleting-Frames&quot;&gt;frame-live-p&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;deleting-frames#Deleting-Frames&quot;&gt;frame-live-p&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6ae7c50c9a75ce032be58ca2106d4324817dd17c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;deleting-windows#Deleting-Windows&quot;&gt;window-live-p&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;deleting-windows#Deleting-Windows&quot;&gt;window-live-p&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="19b0bb161db65be7a8c4f43b488b1278479b37ce" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;distinguish-interactive#Distinguish-Interactive&quot;&gt;Distinguish Interactive&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;distinguish-interactive#Distinguish-Interactive&quot;&gt;Distinguish Interactive&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="507488f3252f2a1ca7d8bfe331150189cfae2efc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;documentation#Documentation&quot;&gt;Documentation&lt;/a&gt;, for functions that produce textual descriptions of text characters and general input events (&lt;code&gt;single-key-description&lt;/code&gt; and &lt;code&gt;text-char-description&lt;/code&gt;). These are used primarily for making help messages.</source>
          <target state="translated">See &lt;a href=&quot;documentation#Documentation&quot;&gt;Documentation&lt;/a&gt;, for functions that produce textual descriptions of text characters and general input events ( &lt;code&gt;single-key-description&lt;/code&gt; and &lt;code&gt;text-char-description&lt;/code&gt; ). These are used primarily for making help messages.</target>
        </trans-unit>
        <trans-unit id="c46cffeabac6b7e14565937560679349470ee03e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;echo-area-customization#Echo-Area-Customization&quot;&gt;Echo Area Customization&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;echo-area-customization#Echo-Area-Customization&quot;&gt;Echo Area Customization&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b536c3708af680cd6bc871c99e4c642594189969" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;edebug-eval#Edebug-Eval&quot;&gt;Edebug Eval&lt;/a&gt;, for other evaluation functions available inside of Edebug.</source>
          <target state="translated">See &lt;a href=&quot;edebug-eval#Edebug-Eval&quot;&gt;Edebug Eval&lt;/a&gt;, for other evaluation functions available inside of Edebug.</target>
        </trans-unit>
        <trans-unit id="c06bd6b12dfb7efb4f4922c1b8f7aa9863e5a4af" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;errors#Errors&quot;&gt;Errors&lt;/a&gt;, for an explanation of how errors are generated and handled.</source>
          <target state="translated">See &lt;a href=&quot;errors#Errors&quot;&gt;Errors&lt;/a&gt;, for an explanation of how errors are generated and handled.</target>
        </trans-unit>
        <trans-unit id="8ae97f93433064cbb351d09c29849e1c4ef6e3b1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;eval#Eval&quot;&gt;Eval&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;eval#Eval&quot;&gt;Eval&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="e6dcde9840af59c4e498ccc304dfc433a30a2eeb" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;file-attributes#File-Attributes&quot;&gt;File Attributes&lt;/a&gt;, for the function &lt;code&gt;file-modes&lt;/code&gt;, which returns the permissions of a file.</source>
          <target state="translated">See &lt;a href=&quot;file-attributes#File-Attributes&quot;&gt;File Attributes&lt;/a&gt;, for the function &lt;code&gt;file-modes&lt;/code&gt; , which returns the permissions of a file.</target>
        </trans-unit>
        <trans-unit id="bbb99f9239dabf1f98641f4e946bd38a6515ad18" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;file-local-variables#File-Local-Variables&quot;&gt;File Local Variables&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;file-local-variables#File-Local-Variables&quot;&gt;File Local Variables&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="180ade25d296c80c1575aaf2d3c113b9560cf830" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;format-conversion#Format-Conversion&quot;&gt;Format Conversion&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;format-conversion#Format-Conversion&quot;&gt;Format Conversion&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ebadbf58de7d689b92fe067d67ade5ab9c38bb3c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;frame-configurations#Frame-Configurations&quot;&gt;Frame Configurations&lt;/a&gt;, for a description of several functions related to frame configurations.</source>
          <target state="translated">See &lt;a href=&quot;frame-configurations#Frame-Configurations&quot;&gt;Frame Configurations&lt;/a&gt;, for a description of several functions related to frame configurations.</target>
        </trans-unit>
        <trans-unit id="82fae6ef5b9cc88a5b0855cbda509c19314eba1c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;frame-configurations#Frame-Configurations&quot;&gt;frame-configuration-p&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;frame-configurations#Frame-Configurations&quot;&gt;frame-configuration-p&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="9efd408d67d63fb59921256426f435cd58fc1477" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;frames#Frames&quot;&gt;Frames&lt;/a&gt;, for a description of the functions that work on frames.</source>
          <target state="translated">See &lt;a href=&quot;frames#Frames&quot;&gt;Frames&lt;/a&gt;, for a description of the functions that work on frames.</target>
        </trans-unit>
        <trans-unit id="5e0abc4b48096bbd4c786054feef6c71301abdd5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;frames#Frames&quot;&gt;framep&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;frames#Frames&quot;&gt;framep&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="bb79aa141e94730b39fffa6733976ca3419e1070" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;fringe-bitmaps#Fringe-Bitmaps&quot;&gt;Fringe Bitmaps&lt;/a&gt;, for a list of standard bitmap symbols and how to define your own. In addition, &lt;code&gt;nil&lt;/code&gt; represents the empty bitmap (i.e., an indicator that is not shown).</source>
          <target state="translated">See &lt;a href=&quot;fringe-bitmaps#Fringe-Bitmaps&quot;&gt;Fringe Bitmaps&lt;/a&gt;, for a list of standard bitmap symbols and how to define your own. In addition, &lt;code&gt;nil&lt;/code&gt; represents the empty bitmap (i.e., an indicator that is not shown).</target>
        </trans-unit>
        <trans-unit id="88e8d1e2ea6eb64c9dfc7ccaaaffe00535b49f85" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;function-cells#Function-Cells&quot;&gt;subrp&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;function-cells#Function-Cells&quot;&gt;subrp&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="842829494c1fb6886abeb1d42588b06bb897ae95" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;function-indirection#Function-Indirection&quot;&gt;Function Indirection&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;function-indirection#Function-Indirection&quot;&gt;Function Indirection&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d25941e6f49461665ef7e1c8b3ae460691c09566" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;function-keys#Function-Keys&quot;&gt;Function Keys&lt;/a&gt;, for more information about how to add modifiers to function keys.</source>
          <target state="translated">See &lt;a href=&quot;function-keys#Function-Keys&quot;&gt;Function Keys&lt;/a&gt;, for more information about how to add modifiers to function keys.</target>
        </trans-unit>
        <trans-unit id="1b9292c37b1ac7b58cf788013bcc3db1c8e1f135" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;functions#Functions&quot;&gt;functionp&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;functions#Functions&quot;&gt;functionp&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="51f4e0f79a5d20aedc6d3489fab5cf222ad6d8bf" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;functions-for-key-lookup#Functions-for-Key-Lookup&quot;&gt;Functions for Key Lookup&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;functions-for-key-lookup#Functions-for-Key-Lookup&quot;&gt;Functions for Key Lookup&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8949cf27abc14466fc2cef80c3e1954e3eeffcce" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;garbage-collection#Garbage-Collection&quot;&gt;Garbage Collection&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;garbage-collection#Garbage-Collection&quot;&gt;Garbage Collection&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a25dac8d6f5de23bd4393b78610bedea874e6cd1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;hash-tables#Hash-Tables&quot;&gt;Hash Tables&lt;/a&gt;, for more information about hash tables.</source>
          <target state="translated">See &lt;a href=&quot;hash-tables#Hash-Tables&quot;&gt;Hash Tables&lt;/a&gt;, for more information about hash tables.</target>
        </trans-unit>
        <trans-unit id="4228373aa041bffa31dea2d69689c278adfe3d87" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.gnu.org/software/coreutils/manual/html_node/File-permissions.html#File-permissions&quot;&gt;File permissions&lt;/a&gt; in</source>
          <target state="translated">See &lt;a href=&quot;http://www.gnu.org/software/coreutils/manual/html_node/File-permissions.html#File-permissions&quot;&gt;File permissions&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="33140c72d087fddd36a1508f622f807def6f6a6b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Completion-Styles.html#Completion-Styles&quot;&gt;Completion Styles&lt;/a&gt; in</source>
          <target state="translated">See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Completion-Styles.html#Completion-Styles&quot;&gt;Completion Styles&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="5d825bbe301239ea1f7829d83716ffb6bffc7a70" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Disabling.html#Disabling&quot;&gt;Disabling&lt;/a&gt; in</source>
          <target state="translated">See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Disabling.html#Disabling&quot;&gt;Disabling&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="5b3852bba2984f6e74d66b8d844b61fc0f1b82de" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-Examples.html#Init-Examples&quot;&gt;Init File Examples&lt;/a&gt; in</source>
          <target state="translated">See &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-Examples.html#Init-Examples&quot;&gt;Init File Examples&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="21733637899ceeaf77bc09250499cf60e2851c83" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.gnu.org/software/libc/manual/html_node/Elapsed-Time.html#Elapsed-Time&quot;&gt;(libc)Elapsed Time&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;http://www.gnu.org/software/libc/manual/html_node/Elapsed-Time.html#Elapsed-Time&quot;&gt;(libc)Elapsed Time&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="f0dbc37815e1df1ca0c1df291e2bd9be66bc1ba2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.gnu.org/software/coreutils/manual/html_node/File-permissions.html#File-permissions&quot;&gt;File permissions&lt;/a&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b29dba133a767f7e68dec0815a95bee4b1ee6a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html#Comment-Tips&quot;&gt;Comment Tips&lt;/a&gt;, for conventions for formatting comments.</source>
          <target state="translated">See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html#Comment-Tips&quot;&gt;Comment Tips&lt;/a&gt;, for conventions for formatting comments.</target>
        </trans-unit>
        <trans-unit id="03f85301c5de0ee4867faf5c21fa45194ab6182b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Completion-Styles.html#Completion-Styles&quot;&gt;Completion Styles&lt;/a&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="223e7e5bf8a41c6ab8fe23bb98fe30cf596a637c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Disabling.html#Disabling&quot;&gt;Disabling&lt;/a&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16bf050f1b519a2a73f7d226bd99b2df3d91ff3b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-Examples.html#Init-Examples&quot;&gt;Init File Examples&lt;/a&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ccd3b399e79be44ae95517c1f8a0ce72f527afd" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.gnu.org/software/libc/manual/html_node/Elapsed-Time.html#Elapsed-Time&quot;&gt;(libc)Elapsed Time&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5d175468f961072b0ba8eee4f48c07cf021bc7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;init-file#Init-File&quot;&gt;Init File&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;init-file#Init-File&quot;&gt;Init File&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="845243aaf58e9b233fd62b4747142b1ad107a899" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;input-focus#Input-Focus&quot;&gt;Input Focus&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;input-focus#Input-Focus&quot;&gt;Input Focus&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="5144645b1e5be11309754584898c582fb39b244b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;insertion#Insertion&quot;&gt;Insertion&lt;/a&gt;, for the ordinary insertion functions which do not inherit.</source>
          <target state="translated">See &lt;a href=&quot;insertion#Insertion&quot;&gt;Insertion&lt;/a&gt;, for the ordinary insertion functions which do not inherit.</target>
        </trans-unit>
        <trans-unit id="a357beee41ec27a06ef1b44e2f2ef4e4e7f0fa86" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;interactive-call#Interactive-Call&quot;&gt;Interactive Call&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;interactive-call#Interactive-Call&quot;&gt;Interactive Call&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c1d78d351e26f5d7504acd07d75003afbc0c15c1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;interactive-call#Interactive-Call&quot;&gt;commandp&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;interactive-call#Interactive-Call&quot;&gt;commandp&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="dfb44aaedc0b957b351e6463e1e2bc8357aaf35f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;keymaps#Keymaps&quot;&gt;Keymaps&lt;/a&gt;, for information about creating keymaps, handling prefix keys, local as well as global keymaps, and changing key bindings.</source>
          <target state="translated">See &lt;a href=&quot;keymaps#Keymaps&quot;&gt;Keymaps&lt;/a&gt;, for information about creating keymaps, handling prefix keys, local as well as global keymaps, and changing key bindings.</target>
        </trans-unit>
        <trans-unit id="2459c40f13e4efe17ee6e37f21c11f3cc39b978c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;keymaps-and-minor-modes#Keymaps-and-Minor-Modes&quot;&gt;Keymaps and Minor Modes&lt;/a&gt;, for more information about minor modes. See also &lt;code&gt;minor-mode-key-binding&lt;/code&gt; (see &lt;a href=&quot;functions-for-key-lookup#Functions-for-Key-Lookup&quot;&gt;Functions for Key Lookup&lt;/a&gt;).</source>
          <target state="translated">See &lt;a href=&quot;keymaps-and-minor-modes#Keymaps-and-Minor-Modes&quot;&gt;Keymaps and Minor Modes&lt;/a&gt;, for more information about minor modes. See also &lt;code&gt;minor-mode-key-binding&lt;/code&gt; (see &lt;a href=&quot;functions-for-key-lookup#Functions-for-Key-Lookup&quot;&gt;Functions for Key Lookup&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="a7ec4ecdfaaf7ab8faef9ff0d6a1facfeb208282" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;keymaps-and-minor-modes#Keymaps-and-Minor-Modes&quot;&gt;Keymaps and Minor Modes&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;keymaps-and-minor-modes#Keymaps-and-Minor-Modes&quot;&gt;Keymaps and Minor Modes&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="be3d578bff3292b0de125dac402efaa2ee6ff8b5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;killing-buffers#Killing-Buffers&quot;&gt;Killing Buffers&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;killing-buffers#Killing-Buffers&quot;&gt;Killing Buffers&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="4906ccc5a57e06dc0d24d6b00c44cbb7eb9cd36c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;killing-emacs#Killing-Emacs&quot;&gt;Killing Emacs&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;killing-emacs#Killing-Emacs&quot;&gt;Killing Emacs&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="63dcbe699960bab53a95cf823f58f161bb0179a6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;lambda-expressions#Lambda-Expressions&quot;&gt;Lambda Expressions&lt;/a&gt;, for a more complete description of arguments modified by &lt;code&gt;&amp;amp;optional&lt;/code&gt; and &lt;code&gt;&amp;amp;rest&lt;/code&gt;.</source>
          <target state="translated">See &lt;a href=&quot;lambda-expressions#Lambda-Expressions&quot;&gt;Lambda Expressions&lt;/a&gt;, for a more complete description of arguments modified by &lt;code&gt;&amp;amp;optional&lt;/code&gt; and &lt;code&gt;&amp;amp;rest&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="be13a7782b9d1b41f200a7f4d529bded851308a8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;lazy-properties#Lazy-Properties&quot;&gt;Lazy Properties&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;lazy-properties#Lazy-Properties&quot;&gt;Lazy Properties&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ddfd897b79750b8273888efe043fff03b937aaf7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;lexical-binding#Lexical-Binding&quot;&gt;Lexical Binding&lt;/a&gt;, for an example of using a closure.</source>
          <target state="translated">See &lt;a href=&quot;lexical-binding#Lexical-Binding&quot;&gt;Lexical Binding&lt;/a&gt;, for an example of using a closure.</target>
        </trans-unit>
        <trans-unit id="719f012a205cba18097a278ffe5f836c8d6fe0e9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;list-elements#Definition-of-safe_002dlength&quot;&gt;Definition of safe-length&lt;/a&gt;, for the related function &lt;code&gt;safe-length&lt;/code&gt;.</source>
          <target state="translated">See &lt;a href=&quot;list-elements#Definition-of-safe_002dlength&quot;&gt;Definition of safe-length&lt;/a&gt;, for the related function &lt;code&gt;safe-length&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="07bad34837b29c37f3d94be0190645390aa24b21" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;list_002drelated-predicates#List_002drelated-Predicates&quot;&gt;atom&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;list_002drelated-predicates#List_002drelated-Predicates&quot;&gt;atom&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="afe2e93a2ba9353401720ddf51eeaa5f60b3132a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;list_002drelated-predicates#List_002drelated-Predicates&quot;&gt;consp&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;list_002drelated-predicates#List_002drelated-Predicates&quot;&gt;consp&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ba2bbe7c0d8f6600f83b5cca8a607683ab498980" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;list_002drelated-predicates#List_002drelated-Predicates&quot;&gt;listp&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;list_002drelated-predicates#List_002drelated-Predicates&quot;&gt;listp&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a78d12c680718c70cb40a4fda00fa2c591b39b3b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;list_002drelated-predicates#List_002drelated-Predicates&quot;&gt;nlistp&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;list_002drelated-predicates#List_002drelated-Predicates&quot;&gt;nlistp&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a2984c8fe54f131c0cc40d792d364148170beb01" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;low_002dlevel-font#Low_002dLevel-Font&quot;&gt;Low-Level Font&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;low_002dlevel-font#Low_002dLevel-Font&quot;&gt;Low-Level Font&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="5d451da8b3942df0e0294216c2912a8f66c4b5f4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;macros#Macros&quot;&gt;Macros&lt;/a&gt;, for a complete description of Emacs Lisp macros.</source>
          <target state="translated">See &lt;a href=&quot;macros#Macros&quot;&gt;Macros&lt;/a&gt;, for a complete description of Emacs Lisp macros.</target>
        </trans-unit>
        <trans-unit id="5599210861340d26d8cbf6070f5253b6e666ef41" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;mapping-functions#Mapping-Functions&quot;&gt;Mapping Functions&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;mapping-functions#Mapping-Functions&quot;&gt;Mapping Functions&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="40b89ad7ce5eb8263c2baf1501ec05b566a688ff" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;markers#Markers&quot;&gt;Markers&lt;/a&gt;, for information on how to test, create, copy, and move markers.</source>
          <target state="translated">See &lt;a href=&quot;markers#Markers&quot;&gt;Markers&lt;/a&gt;, for information on how to test, create, copy, and move markers.</target>
        </trans-unit>
        <trans-unit id="fdd043dad89b8428c30a218b62c08b3dd80cd672" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;menu-bar#Menu-Bar&quot;&gt;Menu Bar&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;menu-bar#Menu-Bar&quot;&gt;Menu Bar&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="2ed74a9f2f31c472e54603fe0a09d4152ce167bb" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;minibuffer-misc#Minibuffer-Misc&quot;&gt;Minibuffer Misc&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;minibuffer-misc#Minibuffer-Misc&quot;&gt;Minibuffer Misc&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="e979517da59f2c5906fb4d0acadcada240dc2d64" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;mode-hooks#Mode-Hooks&quot;&gt;Mode Hooks&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;mode-hooks#Mode-Hooks&quot;&gt;Mode Hooks&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="fa9665133d6cdf6131b56f7140d6f3baeb8a379b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;mouse-position#Mouse-Position&quot;&gt;Mouse Position&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;mouse-position#Mouse-Position&quot;&gt;Mouse Position&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="28606f4b73f0741ecf1921dd87dbb5ac6638fac2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;multi_002dframe-images#Multi_002dFrame-Images&quot;&gt;Multi-Frame Images&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;multi_002dframe-images#Multi_002dFrame-Images&quot;&gt;Multi-Frame Images&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b787ec91a309584beca18ebf290a54f74729bf61" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;multiline-font-lock#Multiline-Font-Lock&quot;&gt;Multiline Font Lock&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;multiline-font-lock#Multiline-Font-Lock&quot;&gt;Multiline Font Lock&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="65ca77c709e64e487583ddba40508d113cae4658" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;multiple-terminals#Multiple-Terminals&quot;&gt;Multiple Terminals&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d31da85685dd63c41b5b3d2c9355624721ea346d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;mutexes#Mutexes&quot;&gt;mutexp&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;mutexes#Mutexes&quot;&gt;mutexp&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="3e27694349a6f40c18814e0402e96f6feba7b93b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;nil-and-t#nil-and-t&quot;&gt;booleanp&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;nil-and-t#nil-and-t&quot;&gt;booleanp&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b68d2bdc7331e6a61c2a9528f56c5e45c38293c0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;numbers#Numbers&quot;&gt;Numbers&lt;/a&gt;, for more information.</source>
          <target state="translated">See &lt;a href=&quot;numbers#Numbers&quot;&gt;Numbers&lt;/a&gt;, for more information.</target>
        </trans-unit>
        <trans-unit id="f3482cc48715ec60e70a1e891f70b88a2da8f1f9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;other-font-lock-variables#Other-Font-Lock-Variables&quot;&gt;Other Font Lock Variables&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;other-font-lock-variables#Other-Font-Lock-Variables&quot;&gt;Other Font Lock Variables&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="1f6222b0dcc01c6a07dff44cb90bd0960f25c4d5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;other-hash#Other-Hash&quot;&gt;hash-table-p&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;other-hash#Other-Hash&quot;&gt;hash-table-p&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6be2825771808dee64487532e90e935fbfeea541" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;overlays#Overlays&quot;&gt;Overlays&lt;/a&gt;, for information on how you can create and use overlays.</source>
          <target state="translated">See &lt;a href=&quot;overlays#Overlays&quot;&gt;Overlays&lt;/a&gt;, for information on how you can create and use overlays.</target>
        </trans-unit>
        <trans-unit id="8a8305ab7c97bf0dd0a953313661f09cdaf26f30" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;overlays#Overlays&quot;&gt;overlayp&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;overlays#Overlays&quot;&gt;overlayp&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="13fb66fff0c1ceab1d3107ff5e6e4c5b98f10372" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;package-archives#Package-Archives&quot;&gt;Package Archives&lt;/a&gt;, for an explanation of how to add a single-file package to a package archive.</source>
          <target state="translated">See &lt;a href=&quot;package-archives#Package-Archives&quot;&gt;Package Archives&lt;/a&gt;, for an explanation of how to add a single-file package to a package archive.</target>
        </trans-unit>
        <trans-unit id="b888d2e414a25c3846650e3f053b935ca4d9e1a7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;predicates-for-strings#Predicates-for-Strings&quot;&gt;char-or-string-p&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;predicates-for-strings#Predicates-for-Strings&quot;&gt;char-or-string-p&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="afd0d7cf28262c05c90063d1654ae50fc453b274" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;predicates-for-strings#Predicates-for-Strings&quot;&gt;string-or-null-p&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;predicates-for-strings#Predicates-for-Strings&quot;&gt;string-or-null-p&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="22421dcf161ae4dc2831ff34b7a3f44654c9eaf3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;predicates-for-strings#Predicates-for-Strings&quot;&gt;stringp&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;predicates-for-strings#Predicates-for-Strings&quot;&gt;stringp&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="1c54686ebdb624234d4ec3891164b2d9600234d6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;predicates-on-markers#Predicates-on-Markers&quot;&gt;integer-or-marker-p&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;predicates-on-markers#Predicates-on-Markers&quot;&gt;integer-or-marker-p&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="cb637be16a85c88ceb6477d6e8232899d894650e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;predicates-on-markers#Predicates-on-Markers&quot;&gt;markerp&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;predicates-on-markers#Predicates-on-Markers&quot;&gt;markerp&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="7f7127873fd4f9386bda4016d9a5a0dccb50ac35" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;predicates-on-markers#Predicates-on-Markers&quot;&gt;number-or-marker-p&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;predicates-on-markers#Predicates-on-Markers&quot;&gt;number-or-marker-p&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="1f6b92dadf27cbfb68deea997c9c6f6f07d580a0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;predicates-on-numbers#Predicates-on-Numbers&quot;&gt;floatp&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;predicates-on-numbers#Predicates-on-Numbers&quot;&gt;floatp&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ffb5a38d3668cb62ef9649976cbd852f44ea1580" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;predicates-on-numbers#Predicates-on-Numbers&quot;&gt;integerp&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;predicates-on-numbers#Predicates-on-Numbers&quot;&gt;integerp&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="72a286f9bb85bfba1956aa240925785ccc04e0e6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;predicates-on-numbers#Predicates-on-Numbers&quot;&gt;numberp&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;predicates-on-numbers#Predicates-on-Numbers&quot;&gt;numberp&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c0434ff96a3cdef63b51dc04c4645f8c4d838d61" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;predicates-on-numbers#Predicates-on-Numbers&quot;&gt;wholenump&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;predicates-on-numbers#Predicates-on-Numbers&quot;&gt;wholenump&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a61ef2cfe86b358b53b20f9c16555e44d12510e3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;process-information#Coding-systems-for-a-subprocess&quot;&gt;Process Information&lt;/a&gt;, in particular the description of the functions &lt;code&gt;process-coding-system&lt;/code&gt; and &lt;code&gt;set-process-coding-system&lt;/code&gt;, for how to examine or set the coding systems used for I/O to a subprocess.</source>
          <target state="translated">See &lt;a href=&quot;process-information#Coding-systems-for-a-subprocess&quot;&gt;Process Information&lt;/a&gt;, in particular the description of the functions &lt;code&gt;process-coding-system&lt;/code&gt; and &lt;code&gt;set-process-coding-system&lt;/code&gt; , for how to examine or set the coding systems used for I/O to a subprocess.</target>
        </trans-unit>
        <trans-unit id="8873e4fea84d9d9fdc0a75019f7fafc5de92d302" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;processes#Processes&quot;&gt;Processes&lt;/a&gt;, for information about functions that create, delete, return information about, send input or signals to, and receive output from processes.</source>
          <target state="translated">See &lt;a href=&quot;processes#Processes&quot;&gt;Processes&lt;/a&gt;, for information about functions that create, delete, return information about, send input or signals to, and receive output from processes.</target>
        </trans-unit>
        <trans-unit id="1e57f16f7db38f1da06acd1b476d987ca69158a7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;processes#Processes&quot;&gt;processp&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;processes#Processes&quot;&gt;processp&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d0822c90b9f5ae745fd372370bd1eb4d593fa020" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;programmed-completion#Programmed-Completion&quot;&gt;Programmed Completion&lt;/a&gt;, for detailed requirements when &lt;var&gt;collection&lt;/var&gt; is a function.</source>
          <target state="translated">See &lt;a href=&quot;programmed-completion#Programmed-Completion&quot;&gt;Programmed Completion&lt;/a&gt;, for detailed requirements when &lt;var&gt;collection&lt;/var&gt; is a function.</target>
        </trans-unit>
        <trans-unit id="342619fa7694d0dbf1e1839cc5a2ad64398aa594" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;quitting-windows#Quitting-Windows&quot;&gt;Quitting Windows&lt;/a&gt;.</source>
          <target state="translated">See &lt;a href=&quot;quitting-windows#Quitting-Windows&quot;&gt;Quitting Windows&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0fa278a16662aba116dad315ec4667497df2b953" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;read-and-print#Read-and-Print&quot;&gt;Read and Print&lt;/a&gt;, for a description of functions related to streams, including parsing and printing functions.</source>
          <target state="translated">See &lt;a href=&quot;read-and-print#Read-and-Print&quot;&gt;Read and Print&lt;/a&gt;, for a description of functions related to streams, including parsing and printing functions.</target>
        </trans-unit>
        <trans-unit id="1feb66515068feea1a87fe7c107101a08e7c4655" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;reading-one-event#Reading-One-Event&quot;&gt;Reading One Event&lt;/a&gt;, for an example of using &lt;code&gt;execute-kbd-macro&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;execute-kbd-macro&lt;/code&gt; 사용의 예는 &lt;a href=&quot;reading-one-event#Reading-One-Event&quot;&gt;읽기 하나의 이벤트를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f7e90002d049b2fc76268242d6a11bc36e37025a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;record-type#Record-Type&quot;&gt;recordp&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;record-type#Record-Type&quot;&gt;recordp를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="32886223c1c6d0e41ea453ef22039cf9b6cc3fb6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;records#Records&quot;&gt;Records&lt;/a&gt;, for functions that work with records.</source>
          <target state="translated">&lt;a href=&quot;records#Records&quot;&gt;레코드&lt;/a&gt; 와 함께 작동하는 함수는 레코드를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c03f3a25c565025f9fa338165e3df11ffd4dace9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;region-to-refontify#Region-to-Refontify&quot;&gt;Region to Refontify&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;region-to-refontify#Region-to-Refontify&quot;&gt;다시 글꼴화할 영역을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cf36d2bcb44d9ac1bf3ed08f008233ee55ff8b50" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;replacing-match#Replacing-Match&quot;&gt;Replacing the Text that Matched&lt;/a&gt;, for a description of &lt;code&gt;replace-match&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;replace-match&lt;/code&gt; 에 대한 설명은 &lt;a href=&quot;replacing-match#Replacing-Match&quot;&gt;일치하는 텍스트 바꾸기를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="17aee5621c21c8d401902af0ff4156e1fccfebe4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;saving-buffers#Saving-Buffers&quot;&gt;Saving Buffers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;saving-buffers#Saving-Buffers&quot;&gt;버퍼 저장을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d321c56a955483a73245e0166a9c02beb7043a7f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;sequence-functions#Sequence-Functions&quot;&gt;sequencep&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;sequence-functions#Sequence-Functions&quot;&gt;sequencep를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="aa0d24238dec775d9f52f213a736e969d919095d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;sorting#Sorting&quot;&gt;Sorting&lt;/a&gt;, for more functions that perform sorting. See &lt;code&gt;documentation&lt;/code&gt; in &lt;a href=&quot;accessing-documentation#Accessing-Documentation&quot;&gt;Accessing Documentation&lt;/a&gt;, for a useful example of &lt;code&gt;sort&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;sorting#Sorting&quot;&gt;정렬&lt;/a&gt; 을 수행하는 추가 기능 은 정렬을 참조하십시오 . 참조 &lt;code&gt;documentation&lt;/code&gt; 에 &lt;a href=&quot;accessing-documentation#Accessing-Documentation&quot;&gt;액세스 문서&lt;/a&gt; 의 유용한 예를 들어, &lt;code&gt;sort&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="962cb3f032d4500ea31d60bc3d61abece22c1b19" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;standard-errors#Standard-Errors&quot;&gt;Standard Errors&lt;/a&gt;, for a list of the main error symbols and their conditions.</source>
          <target state="translated">주요 오류 기호 및 해당 조건 목록은 &lt;a href=&quot;standard-errors#Standard-Errors&quot;&gt;표준 오류를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="84aab3fef332a8de5e170835bc2e019a3ae896e6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;standard-keymaps#Standard-Keymaps&quot;&gt;Standard Keymaps&lt;/a&gt;, for a list of some standard keymaps.</source>
          <target state="translated">참조 &lt;a href=&quot;standard-keymaps#Standard-Keymaps&quot;&gt;표준 키맵을&lt;/a&gt; 일부 표준 키맵의 목록.</target>
        </trans-unit>
        <trans-unit id="9a03e98bcd37e72da0b3b9deceee27f5df95ba28" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;sticky-properties#Sticky-Properties&quot;&gt;Sticky Properties&lt;/a&gt;, for other insertion functions that inherit text properties from the nearby text in addition to inserting it. Whitespace inserted by indentation functions also inherits text properties.</source>
          <target state="translated">삽입하는 것 외에도 근처 텍스트에서 텍스트 속성을 상속하는 다른 삽입 함수에 대해서는 &lt;a href=&quot;sticky-properties#Sticky-Properties&quot;&gt;고정 속성을&lt;/a&gt; 참조하십시오 . 들여 쓰기 함수로 삽입 된 공백도 텍스트 속성을 상속합니다.</target>
        </trans-unit>
        <trans-unit id="98509a53833c5fc83ffcc12fbd16ec6c56972517" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;strings-and-characters#Strings-and-Characters&quot;&gt;Strings and Characters&lt;/a&gt;, for functions that operate on strings.</source>
          <target state="translated">&lt;a href=&quot;strings-and-characters#Strings-and-Characters&quot;&gt;문자열&lt;/a&gt; 에서 작동하는 함수는 문자열 및 문자를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="99840c7e8ef94ab69f5f8ef75fe11f5404a44ea9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;strings-of-events#Strings-of-Events&quot;&gt;Strings of Events&lt;/a&gt;, for special considerations for strings of keyboard character events.</source>
          <target state="translated">키보드 문자 이벤트 문자열에 대한 특별한 고려 사항 &lt;a href=&quot;strings-of-events#Strings-of-Events&quot;&gt;은 이벤트 문자열을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8e0aab21fb1723d66a5474ff63479ad9a81bf3e8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;suspending-emacs#Suspending-Emacs&quot;&gt;Suspending Emacs&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;suspending-emacs#Suspending-Emacs&quot;&gt;Emacs 일시 중단을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="dc20dd0de6e24b172f693244be5844a45581a6bc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;symbols#Symbols&quot;&gt;symbolp&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;symbols#Symbols&quot;&gt;symbolp를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fa158d4b9a294575509fba6ee5eecb450f053c65" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;syntactic-font-lock#Syntactic-Font-Lock&quot;&gt;Syntactic Font Lock&lt;/a&gt;. See &lt;a href=&quot;syntax-properties#Syntax-Properties&quot;&gt;Syntax Properties&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;syntactic-font-lock#Syntactic-Font-Lock&quot;&gt;구문 글꼴 잠금을&lt;/a&gt; 참조하십시오 . &lt;a href=&quot;syntax-properties#Syntax-Properties&quot;&gt;구문 속성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="224f1a2a24f00fcffb63caf2bd00e32c0891a255" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;syntax-tables#Syntax-Tables&quot;&gt;syntax-table-p&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;syntax-tables#Syntax-Tables&quot;&gt;syntax-table-p를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="062733bc56fab784f98b6bb9c64f9e13dfb6094c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;temporary-displays#Temporary-Displays&quot;&gt;Temporary Displays&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;temporary-displays#Temporary-Displays&quot;&gt;임시 표시를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="753b8b5475f0209bac3ca6fb69dbc60ddcad8a0d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;terminal_002dspecific#Terminal_002dSpecific&quot;&gt;Terminal-Specific&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;terminal_002dspecific#Terminal_002dSpecific&quot;&gt;터미널 별을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5cfe2579f6e2aeb6d81e8295eb8d7b032bbe59cf" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;text#Text&quot;&gt;Text&lt;/a&gt;, for information about functions that display strings or copy them into buffers. See &lt;a href=&quot;character-type#Character-Type&quot;&gt;Character Type&lt;/a&gt;, and &lt;a href=&quot;string-type#String-Type&quot;&gt;String Type&lt;/a&gt;, for information about the syntax of characters and strings. See &lt;a href=&quot;non_002dascii-characters#Non_002dASCII-Characters&quot;&gt;Non-ASCII Characters&lt;/a&gt;, for functions to convert between text representations and to encode and decode character codes. Also, note that &lt;code&gt;length&lt;/code&gt; should &lt;em&gt;not&lt;/em&gt; be used for computing the width of a string on display; use &lt;code&gt;string-width&lt;/code&gt; (see &lt;a href=&quot;size-of-displayed-text#Size-of-Displayed-Text&quot;&gt;Size of Displayed Text&lt;/a&gt;) instead.</source>
          <target state="translated">문자열을 표시하거나 버퍼에 복사하는 함수에 대한 정보는 &lt;a href=&quot;text#Text&quot;&gt;Text를&lt;/a&gt; 참조하십시오 . 문자 및 문자열 구문에 대한 정보는 &lt;a href=&quot;character-type#Character-Type&quot;&gt;문자 유형&lt;/a&gt; 및 &lt;a href=&quot;string-type#String-Type&quot;&gt;문자열 유형을&lt;/a&gt; 참조하십시오 . 텍스트 표현간에 변환하고 문자 코드를 인코딩 및 디코딩하는 함수는 &lt;a href=&quot;non_002dascii-characters#Non_002dASCII-Characters&quot;&gt;비 ASCII 문자를&lt;/a&gt; 참조하십시오 . 또한 표시되는 문자열의 너비를 계산하는 데 &lt;code&gt;length&lt;/code&gt; 해서는 &lt;em&gt;안됩니다&lt;/em&gt; . 사용 &lt;code&gt;string-width&lt;/code&gt; (참조 &lt;a href=&quot;size-of-displayed-text#Size-of-Displayed-Text&quot;&gt;표시되는 텍스트의 크기&lt;/a&gt; )를 대신.</target>
        </trans-unit>
        <trans-unit id="b296f69ee341163b7182568ba975c25e5304541d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;text-comparison#Text-Comparison&quot;&gt;Text Comparison&lt;/a&gt;, for functions that compare strings; some of them ignore case differences, or can optionally ignore case differences.</source>
          <target state="translated">문자열을 비교하는 함수는 &lt;a href=&quot;text-comparison#Text-Comparison&quot;&gt;텍스트 비교를&lt;/a&gt; 참조하십시오 . 그들 중 일부는 대소 문자 차이를 무시하거나 선택적으로 대소 문자 차이를 무시할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1962c887c918951daa0f438756a3c9491902b9bc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;the-mark#The-Mark&quot;&gt;The Mark&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;the-mark#The-Mark&quot;&gt;마크를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c70286c677883e44f7190e77754e2705c67b3360" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;time-of-day#Time-of-Day&quot;&gt;Time of Day&lt;/a&gt;, for functions to get the current time.</source>
          <target state="translated">현재 시간을 가져 오는 함수 &lt;a href=&quot;time-of-day#Time-of-Day&quot;&gt;는 시간을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0224cff01837766f226bb42ceb4f8848cdd789a4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;tips-for-defining#Tips-for-Defining&quot;&gt;Tips for Defining&lt;/a&gt;, for advice about how to write the code to set up the mode&amp;rsquo;s keymap variable.</source>
          <target state="translated">모드의 키맵 변수를 설정하는 코드를 작성하는 방법에 대한 조언은 &lt;a href=&quot;tips-for-defining#Tips-for-Defining&quot;&gt;정의 팁을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0f3d8f8f995047dbc5bbf869e9f68740084c541a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;translation-keymaps#Translation-Keymaps&quot;&gt;Translation Keymaps&lt;/a&gt;, for mechanisms that translate event sequences at the level of &lt;code&gt;read-key-sequence&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;read-key-sequence&lt;/code&gt; 수준에서 이벤트 시퀀스를 변환하는 메커니즘 은 &lt;a href=&quot;translation-keymaps#Translation-Keymaps&quot;&gt;Translation Keymaps를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="94ed3e2bf39e6b133ac7195dba20b491019e4cde" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;using-interactive#Using-Interactive&quot;&gt;Using Interactive&lt;/a&gt;, for another way to signal an error if the current buffer is read-only.</source>
          <target state="translated">현재 버퍼가 읽기 전용 인 경우 오류를 알리는 다른 방법 은 &lt;a href=&quot;using-interactive#Using-Interactive&quot;&gt;Using Interactive를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4fc521387f759bbd28ef0cc489e6f6c834fabdb9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;using-interactive#Using-Interactive&quot;&gt;Using Interactive&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;using-interactive#Using-Interactive&quot;&gt;대화 형 사용을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fe272ca1c324b7c65b4d68b6ab04bb891b8b349d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;variable-definitions#Variable-Definitions&quot;&gt;custom-variable-p&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;variable-definitions#Variable-Definitions&quot;&gt;custom-variable-p를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ae9580dd3d5af1aec03bdad020d749c61e241457" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;vectors#Vectors&quot;&gt;Vectors&lt;/a&gt;, for functions that work with vectors.</source>
          <target state="translated">벡터와 함께 작동하는 함수는 &lt;a href=&quot;vectors#Vectors&quot;&gt;벡터를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3cef1a72151f6324a5e5863d4d64f0445201fae2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;vectors#Vectors&quot;&gt;vectorp&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;vectors#Vectors&quot;&gt;vectorp를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="62702112e978271b88fb66687b0ac43587026cc8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;visiting-functions#Visiting-Functions&quot;&gt;Visiting Functions&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;visiting-functions#Visiting-Functions&quot;&gt;방문 기능을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3663c824346a20a3cedbeb9a7135ba007cde1a7f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;window-configuration-p&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;window-configurations#Window-Configurations&quot;&gt;window-configuration-p를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8c68db7c56373d29ab1c4bf43c3b9efe57e314d2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;window-hooks#Window-Hooks&quot;&gt;Window Hooks&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;window-hooks#Window-Hooks&quot;&gt;창 후크를&lt;/a&gt; 참고하십시오 .</target>
        </trans-unit>
        <trans-unit id="9a70d6a3511c0d624fcc4c1b214a8e17b73e838b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;windows#Windows&quot;&gt;Windows&lt;/a&gt;, for a description of the functions that work on windows.</source>
          <target state="translated">창에서 작동하는 기능에 대한 설명은 &lt;a href=&quot;windows#Windows&quot;&gt;Windows를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e78fed0fc84917cd4adcf99b81867f6ddad6f9ab" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;delq&lt;/code&gt;, in &lt;a href=&quot;sets-and-lists#Sets-And-Lists&quot;&gt;Sets And Lists&lt;/a&gt;, for another function that modifies cons cells.</source>
          <target state="translated">cons 셀을 수정하는 다른 함수 는 &lt;a href=&quot;sets-and-lists#Sets-And-Lists&quot;&gt;세트 및 목록의 &lt;/a&gt; &lt;code&gt;delq&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9d2e2f803497f85fd463c6953a14eadedd83629e" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;documentation&lt;/code&gt; in &lt;a href=&quot;accessing-documentation#Accessing-Documentation&quot;&gt;Accessing Documentation&lt;/a&gt;, for a realistic example of using &lt;code&gt;commandp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;commandp&lt;/code&gt; 사용에 대한 실제 예제는 &lt;a href=&quot;accessing-documentation#Accessing-Documentation&quot;&gt;Accessing Documentation의 &lt;/a&gt; &lt;code&gt;documentation&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="615519fd52dbaadc36bf6d2a20002c5d9c3393de" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;documentation&lt;/code&gt; in &lt;a href=&quot;accessing-documentation#Accessing-Documentation&quot;&gt;Accessing Documentation&lt;/a&gt;, for another example using &lt;code&gt;mapatoms&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mapatoms&lt;/code&gt; 를 사용하는 또 다른 예 는 &lt;a href=&quot;accessing-documentation#Accessing-Documentation&quot;&gt;Accessing Documentation의 &lt;/a&gt; &lt;code&gt;documentation&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3cda0db5af95f7c07dfca531f5e2f76c101619b6" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;format&lt;/code&gt;, in &lt;a href=&quot;formatting-strings#Formatting-Strings&quot;&gt;Formatting Strings&lt;/a&gt;, for other ways to obtain the printed representation of a Lisp object as a string.</source>
          <target state="translated">Lisp 객체의 인쇄 된 표현을 &lt;a href=&quot;formatting-strings#Formatting-Strings&quot;&gt;문자열&lt;/a&gt; 로 얻는 다른 방법 은 Formatting Strings의 &lt;code&gt;format&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="53972c6b7359f88a525166920a5f13adafa3e254" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;put&lt;/code&gt; for an example.</source>
          <target state="translated">예를 보려면 &lt;code&gt;put&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="54d9bec00ef8afbf14d52ab43fb284642d2d44d7" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;read-regexp&lt;/code&gt; above for details of how these values are used.</source>
          <target state="translated">이러한 값이 사용되는 방법에 대한 자세한 내용은 위의 &lt;code&gt;read-regexp&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6f8eff4758a0a7b45c20a1c17def64982c9d546a" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;change-hooks#Change-Hooks&quot;&gt;Change Hooks&lt;/a&gt;, for other hooks that are called when you change text in a buffer.</source>
          <target state="translated">버퍼의 텍스트를 변경할 때 호출되는 다른 후크에 대해서는 &lt;a href=&quot;change-hooks#Change-Hooks&quot;&gt;후크 변경을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="71966c8c290b6c5982644033cb668788b4b90dfe" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;append&lt;/code&gt; in &lt;a href=&quot;building-lists#Building-Lists&quot;&gt;Building Lists&lt;/a&gt;, &lt;code&gt;concat&lt;/code&gt; in &lt;a href=&quot;creating-strings#Creating-Strings&quot;&gt;Creating Strings&lt;/a&gt;, and &lt;code&gt;vconcat&lt;/code&gt; in &lt;a href=&quot;vector-functions#Vector-Functions&quot;&gt;Vector Functions&lt;/a&gt;, for other ways to copy sequences.</source>
          <target state="translated">참조 &lt;code&gt;append&lt;/code&gt; 에 &lt;a href=&quot;building-lists#Building-Lists&quot;&gt;건물 목록&lt;/a&gt; , &lt;code&gt;concat&lt;/code&gt; 에서 &lt;a href=&quot;creating-strings#Creating-Strings&quot;&gt;문자열을 생성&lt;/a&gt; 하고, &lt;code&gt;vconcat&lt;/code&gt; 에서 &lt;a href=&quot;vector-functions#Vector-Functions&quot;&gt;벡터 함수&lt;/a&gt; 복사 순서에 다른 방법을.</target>
        </trans-unit>
        <trans-unit id="7203e4cce52ccddf17ba22a90873987a61888250" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;defsubst&lt;/code&gt;, which defines a function like &lt;code&gt;defun&lt;/code&gt; and tells the Lisp compiler to perform inline expansion on it. See &lt;a href=&quot;inline-functions#Inline-Functions&quot;&gt;Inline Functions&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;defun&lt;/code&gt; 과 같은 함수를 정의 하고 Lisp 컴파일러에게 인라인 확장을 수행하도록 지시하는 &lt;code&gt;defsubst&lt;/code&gt; 도 참조하십시오 . &lt;a href=&quot;inline-functions#Inline-Functions&quot;&gt;인라인 함수를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a637ed86c3a6857bc74349c6dc07ed269034f21c" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;delete-directory&lt;/code&gt; in &lt;a href=&quot;create_002fdelete-dirs#Create_002fDelete-Dirs&quot;&gt;Create/Delete Dirs&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;create_002fdelete-dirs#Create_002fDelete-Dirs&quot;&gt;Create / Delete Dirs&lt;/a&gt; 에서 &lt;code&gt;delete-directory&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5dcf7a784f4bb666a3998ca45f7765ccb183f2ea" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;file-nlinks&lt;/code&gt; in &lt;a href=&quot;file-attributes#File-Attributes&quot;&gt;File Attributes&lt;/a&gt;.</source>
          <target state="translated">참조 &lt;code&gt;file-nlinks&lt;/code&gt; 에서 &lt;a href=&quot;file-attributes#File-Attributes&quot;&gt;파일 속성&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="297227b7f86dc76c0385c4b7cbbcf777210a241d" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;next-window&lt;/code&gt; and &lt;code&gt;previous-window&lt;/code&gt;, in &lt;a href=&quot;cyclic-window-ordering#Cyclic-Window-Ordering&quot;&gt;Cyclic Window Ordering&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;cyclic-window-ordering#Cyclic-Window-Ordering&quot;&gt;순환 창 순서&lt;/a&gt; 에서 &lt;code&gt;next-window&lt;/code&gt; 및 &lt;code&gt;previous-window&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0976cba06603d6856daf274834373a389726bd6f" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;open-dribble-file&lt;/code&gt; in &lt;a href=&quot;recording-input#Recording-Input&quot;&gt;Recording Input&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;recording-input#Recording-Input&quot;&gt;입력 기록&lt;/a&gt; 에서 &lt;code&gt;open-dribble-file&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cbdf15657d3b6d06e2558ae395f6ed0768492c06" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;string-bytes&lt;/code&gt;, in &lt;a href=&quot;text-representations#Text-Representations&quot;&gt;Text Representations&lt;/a&gt;.</source>
          <target state="translated">참조 &lt;code&gt;string-bytes&lt;/code&gt; 에, &lt;a href=&quot;text-representations#Text-Representations&quot;&gt;텍스트 표현&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9986904ad7866dcaf66bceaed9ac4e063c31f766" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;with-temp-buffer&lt;/code&gt; in &lt;a href=&quot;current-buffer#Definition-of-with_002dtemp_002dbuffer&quot;&gt;The Current Buffer&lt;/a&gt;.</source>
          <target state="translated">참조 &lt;code&gt;with-temp-buffer&lt;/code&gt; 에 &lt;a href=&quot;current-buffer#Definition-of-with_002dtemp_002dbuffer&quot;&gt;현재 버퍼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7bb971158dc8d8d2dc2fd7a1744ed5f671e955e1" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;with-temp-file&lt;/code&gt; in &lt;a href=&quot;writing-to-files#Definition-of-with_002dtemp_002dfile&quot;&gt;Writing to Files&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;with-temp-file&lt;/code&gt; 에 &lt;a href=&quot;writing-to-files#Definition-of-with_002dtemp_002dfile&quot;&gt;쓰기의 &lt;/a&gt;with-temp-file 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7df28c3640f5c53ad8a1aa78f72f5cbda97ec129" translate="yes" xml:space="preserve">
          <source>See also the &lt;code&gt;open-termscript&lt;/code&gt; function (see &lt;a href=&quot;terminal-output#Terminal-Output&quot;&gt;Terminal Output&lt;/a&gt;).</source>
          <target state="translated">또한 참조 &lt;code&gt;open-termscript&lt;/code&gt; 기능을합니다 ( &lt;a href=&quot;terminal-output#Terminal-Output&quot;&gt;터미널 출력&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="d79d69defc79a541e78dc09bc065c1b37635925a" translate="yes" xml:space="preserve">
          <source>See also the examples for &lt;code&gt;single-key-description&lt;/code&gt;, below.</source>
          <target state="translated">아래의 &lt;code&gt;single-key-description&lt;/code&gt; 예제도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8c5072b84ba971bddbd6290ba93dd0c159209015" translate="yes" xml:space="preserve">
          <source>See also the field feature (see &lt;a href=&quot;fields#Fields&quot;&gt;Fields&lt;/a&gt;), which provides functions that are used by many cursor-motion commands.</source>
          <target state="translated">또한 필드 기능 (참조 참조 &lt;a href=&quot;fields#Fields&quot;&gt;필드&lt;/a&gt; 많은 커서 이동 명령에 의해 사용되는 기능을 제공합니다).</target>
        </trans-unit>
        <trans-unit id="896901e45d8140796f5f9e3efc14645f1da57413" translate="yes" xml:space="preserve">
          <source>See also the file locking mechanism in &lt;a href=&quot;file-locks#File-Locks&quot;&gt;File Locks&lt;/a&gt;.</source>
          <target state="translated">또한에서 파일 잠금 장치 참조 &lt;a href=&quot;file-locks#File-Locks&quot;&gt;파일 잠금을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1f674bbb95ddc221f6e21e69b74da49b2c9b4e81" translate="yes" xml:space="preserve">
          <source>See also the function &lt;code&gt;add-to-list&lt;/code&gt;, in &lt;a href=&quot;list-variables#List-Variables&quot;&gt;List Variables&lt;/a&gt;, for a way to add an element to a list stored in a variable and used as a set.</source>
          <target state="translated">&lt;a href=&quot;list-variables#List-Variables&quot;&gt;변수&lt;/a&gt; 에 저장되고 집합으로 사용되는 목록에 요소를 추가하는 방법 은 List Variables의 &lt;code&gt;add-to-list&lt;/code&gt; 함수를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="572a84c9bb2078ce71c563b68198dd2754d843c4" translate="yes" xml:space="preserve">
          <source>See also the function &lt;code&gt;compare-buffer-substrings&lt;/code&gt; in &lt;a href=&quot;comparing-text#Comparing-Text&quot;&gt;Comparing Text&lt;/a&gt;, for a way to compare text in buffers. The function &lt;code&gt;string-match&lt;/code&gt;, which matches a regular expression against a string, can be used for a kind of string comparison; see &lt;a href=&quot;regexp-search#Regexp-Search&quot;&gt;Regexp Search&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;compare-buffer-substrings&lt;/code&gt; &lt;a href=&quot;comparing-text#Comparing-Text&quot;&gt;텍스트&lt;/a&gt; 를 비교하는 방법 은 Comparing Text의 compare-buffer-substrings 함수를 참조하십시오 . &lt;code&gt;string-match&lt;/code&gt; 에 대해 정규식을 일치시키는 함수 string-match 는 일종의 문자열 비교에 사용할 수 있습니다. &lt;a href=&quot;regexp-search#Regexp-Search&quot;&gt;Regexp 검색을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1b85e47917227a1a8f116fcb96fc9d9dcd32457a" translate="yes" xml:space="preserve">
          <source>See also the function &lt;code&gt;elt&lt;/code&gt;, in &lt;a href=&quot;sequence-functions#Sequence-Functions&quot;&gt;Sequence Functions&lt;/a&gt;.</source>
          <target state="translated">또한 함수 참조 &lt;code&gt;elt&lt;/code&gt; 에, &lt;a href=&quot;sequence-functions#Sequence-Functions&quot;&gt;시퀀스 기능&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="17c94f3a5750b9a1d3c2e77249a713b42a83150a" translate="yes" xml:space="preserve">
          <source>See also the function &lt;code&gt;format&lt;/code&gt; in &lt;a href=&quot;formatting-strings#Formatting-Strings&quot;&gt;Formatting Strings&lt;/a&gt;.</source>
          <target state="translated">또한 함수 참조 &lt;code&gt;format&lt;/code&gt; 의 &lt;a href=&quot;formatting-strings#Formatting-Strings&quot;&gt;포맷 문자열&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="81d9e0c4041e8e8d85666543ec2d086cbc7b4c64" translate="yes" xml:space="preserve">
          <source>See also the function &lt;code&gt;get-buffer-create&lt;/code&gt; in &lt;a href=&quot;creating-buffers#Creating-Buffers&quot;&gt;Creating Buffers&lt;/a&gt;.</source>
          <target state="translated">도 참조 기능은 &lt;code&gt;get-buffer-create&lt;/code&gt; 에 &lt;a href=&quot;creating-buffers#Creating-Buffers&quot;&gt;버퍼를 생성&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f429b2bba2632c9ba67dc4a46c6a533f44dd7892" translate="yes" xml:space="preserve">
          <source>See also the function &lt;code&gt;get-char-property&lt;/code&gt; which checks both overlay properties and text properties for a given character. See &lt;a href=&quot;examining-properties#Examining-Properties&quot;&gt;Examining Properties&lt;/a&gt;.</source>
          <target state="translated">주어진 문자에 대한 오버레이 속성과 텍스트 속성을 모두 확인 하는 함수 &lt;code&gt;get-char-property&lt;/code&gt; 도 참조하십시오 . &lt;a href=&quot;examining-properties#Examining-Properties&quot;&gt;속성 검사를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c07deec7048ab867f18b5c0014babec158f12bcc" translate="yes" xml:space="preserve">
          <source>See also the function &lt;code&gt;indirect-function&lt;/code&gt;. See &lt;a href=&quot;function-indirection#Definition-of-indirect_002dfunction&quot;&gt;Definition of indirect-function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;indirect-function&lt;/code&gt; 함수도 참조하십시오 . &lt;a href=&quot;function-indirection#Definition-of-indirect_002dfunction&quot;&gt;간접 기능 정의를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f736a6c7e753ef25322f4488c4166f3a2dbcdba8" translate="yes" xml:space="preserve">
          <source>See also the function &lt;code&gt;set-visited-file-name&lt;/code&gt; (see &lt;a href=&quot;buffer-file-name#Buffer-File-Name&quot;&gt;Buffer File Name&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;set-visited-file-name&lt;/code&gt; 함수도 참조하십시오 ( &lt;a href=&quot;buffer-file-name#Buffer-File-Name&quot;&gt;버퍼 파일 이름&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="2eb37cbffa380ff02e57df82961713943b68fa6b" translate="yes" xml:space="preserve">
          <source>See also the functions &lt;code&gt;read-coding-system&lt;/code&gt; and &lt;code&gt;read-non-nil-coding-system&lt;/code&gt;, in &lt;a href=&quot;user_002dchosen-coding-systems#User_002dChosen-Coding-Systems&quot;&gt;User-Chosen Coding Systems&lt;/a&gt;, and &lt;code&gt;read-input-method-name&lt;/code&gt;, in &lt;a href=&quot;input-methods#Input-Methods&quot;&gt;Input Methods&lt;/a&gt;.</source>
          <target state="translated">도 참조 기능은 &lt;code&gt;read-coding-system&lt;/code&gt; 및 &lt;code&gt;read-non-nil-coding-system&lt;/code&gt; 에서 &lt;a href=&quot;user_002dchosen-coding-systems#User_002dChosen-Coding-Systems&quot;&gt;사용자가 선택한를 시스템을 코딩&lt;/a&gt; 하고, &lt;code&gt;read-input-method-name&lt;/code&gt; 에 &lt;a href=&quot;input-methods#Input-Methods&quot;&gt;입력 방법&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6b1a38d3b5388355fdfac4676d5813d4a03acaf6" translate="yes" xml:space="preserve">
          <source>See the related function &lt;code&gt;generate-new-buffer&lt;/code&gt; in &lt;a href=&quot;creating-buffers#Creating-Buffers&quot;&gt;Creating Buffers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;creating-buffers#Creating-Buffers&quot;&gt;Create Buffers&lt;/a&gt; 에서 관련 함수 &lt;code&gt;generate-new-buffer&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4081cdcec2e6941841e913dbe076c35316127959" translate="yes" xml:space="preserve">
          <source>Select among Command Alternatives</source>
          <target state="translated">명령 대안 중에서 선택</target>
        </trans-unit>
        <trans-unit id="f0233e1f1d857eaa620ca23e19ea8211affd5160" translate="yes" xml:space="preserve">
          <source>Select among command alternatives.</source>
          <target state="translated">명령 대안 중에서 선택합니다.</target>
        </trans-unit>
        <trans-unit id="9c3e5c7a98306588c64257a7252bcceea266b3ac" translate="yes" xml:space="preserve">
          <source>Select the window mentioned in the first mouse event in the key sequence that invoked this command. Special.</source>
          <target state="translated">이 명령을 호출 한 키 시퀀스에서 첫 번째 마우스 이벤트에 언급 된 창을 선택합니다. 특별한.</target>
        </trans-unit>
        <trans-unit id="6de878736785d7ef8e9255890d71d25e9a6c3468" translate="yes" xml:space="preserve">
          <source>Selecting Windows</source>
          <target state="translated">Windows 선택</target>
        </trans-unit>
        <trans-unit id="dfb028aef8f4c68d1672154e39d0130ed37a2d90" translate="yes" xml:space="preserve">
          <source>Selecting a Representation</source>
          <target state="translated">표현 선택</target>
        </trans-unit>
        <trans-unit id="8c5d9be29ba6586b735131839faa725c6ce183c5" translate="yes" xml:space="preserve">
          <source>Selecting a frame can also change focus redirections. Selecting frame &lt;code&gt;bar&lt;/code&gt;, when &lt;code&gt;foo&lt;/code&gt; had been selected, changes any redirections pointing to &lt;code&gt;foo&lt;/code&gt; so that they point to &lt;code&gt;bar&lt;/code&gt; instead. This allows focus redirection to work properly when the user switches from one frame to another using &lt;code&gt;select-window&lt;/code&gt;.</source>
          <target state="translated">프레임을 선택하면 포커스 리디렉션을 변경할 수도 있습니다. 프레임 선택 &lt;code&gt;bar&lt;/code&gt; 때 &lt;code&gt;foo&lt;/code&gt; 는이 선택했다, 가리키는 어떤 리디렉션 변경 &lt;code&gt;foo&lt;/code&gt; 는 그들이 가리도록 &lt;code&gt;bar&lt;/code&gt; 대신합니다. 이렇게하면 사용자가 &lt;code&gt;select-window&lt;/code&gt; 를 사용하여 한 프레임에서 다른 프레임으로 전환 할 때 포커스 리디렉션이 제대로 작동 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="491155026e37ae0b1face788a45d3f6bb303f1fa" translate="yes" xml:space="preserve">
          <source>Selecting a simple element has the effect of moving to position &lt;var&gt;index-position&lt;/var&gt; in the buffer. Special elements look like this:</source>
          <target state="translated">단순 요소를 선택하면 버퍼에서 &lt;var&gt;index-position&lt;/var&gt; 위치로 이동하는 효과가 있습니다. 특수 요소는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0f6a8e416184c352684d641d30356c8fdeff922e" translate="yes" xml:space="preserve">
          <source>Selecting a special element performs:</source>
          <target state="translated">특수 요소를 선택하면 다음이 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="a560de5fd856bd0f7f7c2c3e48ab01b2c5176ca7" translate="yes" xml:space="preserve">
          <source>Selecting a window sets the value of point in its buffer from the window&amp;rsquo;s value of point. Conversely, deselecting a window sets the window&amp;rsquo;s value of point from that of the buffer. Thus, when you switch between windows that display a given buffer, the point value for the selected window is in effect in the buffer, while the point values for the other windows are stored in those windows.</source>
          <target state="translated">윈도우를 선택하면 윈도우의 포인트 값에서 버퍼의 포인트 값이 설정됩니다. 반대로, 윈도우를 선택 취소하면 버퍼의 포인트 값에서 윈도우의 포인트 값이 설정됩니다. 따라서 주어진 버퍼를 표시하는 창 사이를 전환하면 선택한 창에 대한 포인트 값이 버퍼에 적용되고 다른 창에 대한 포인트 값이 해당 창에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="31ecfd98c966c8902a42804edfef75d159a373f9" translate="yes" xml:space="preserve">
          <source>Selective Display</source>
          <target state="translated">선택적 디스플레이</target>
        </trans-unit>
        <trans-unit id="6f63fe8a0ec734445563a4f59a8eaba51d9a8e5a" translate="yes" xml:space="preserve">
          <source>Selective display does not directly affect editing commands. For example,</source>
          <target state="translated">선택적 표시는 편집 명령에 직접적인 영향을주지 않습니다. 예를 들면</target>
        </trans-unit>
        <trans-unit id="c278acd9b7f80ec49ccac01c4bfb867396ef19c5" translate="yes" xml:space="preserve">
          <source>Self-Evaluating Forms</source>
          <target state="translated">자기 평가 양식</target>
        </trans-unit>
        <trans-unit id="86d964671e91cac8b46ebe695d71cd59e38bde90" translate="yes" xml:space="preserve">
          <source>Self-inserting characters are translated through this translation table before they are inserted. Search commands also translate their input through this table, so they can compare more reliably with what&amp;rsquo;s in the buffer.</source>
          <target state="translated">자체 삽입 문자는 삽입되기 전에이 변환 표를 통해 번역됩니다. 검색 명령은 또한이 테이블을 통해 입력을 변환하므로 버퍼에있는 것과 더 안정적으로 비교할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a732cd2ef0d5fed9aa2caec06a287c6b564b1d20" translate="yes" xml:space="preserve">
          <source>Self-inserting characters, the ones that get inserted into a buffer when the user types them (see &lt;a href=&quot;commands-for-insertion#Commands-for-Insertion&quot;&gt;Commands for Insertion&lt;/a&gt;), normally take on the same properties as the preceding character. This is called &lt;em&gt;inheritance&lt;/em&gt; of properties.</source>
          <target state="translated">사용자가 입력 할 때 버퍼에 삽입되는 자체 삽입 문자 ( &lt;a href=&quot;commands-for-insertion#Commands-for-Insertion&quot;&gt;삽입 명령&lt;/a&gt; 참조 )는 일반적으로 이전 문자와 동일한 속성을가집니다. 이를 속성 &lt;em&gt;상속&lt;/em&gt; 이라고 합니다.</target>
        </trans-unit>
        <trans-unit id="b96a5c464613f24d7646121e7d9102c8a9234230" translate="yes" xml:space="preserve">
          <source>Self-insertion translates the input character through &lt;code&gt;translation-table-for-input&lt;/code&gt;. See &lt;a href=&quot;translation-of-characters#Translation-of-Characters&quot;&gt;Translation of Characters&lt;/a&gt;.</source>
          <target state="translated">자체 삽입은 &lt;code&gt;translation-table-for-input&lt;/code&gt; 을 통해 입력 문자를 번역합니다 . &lt;a href=&quot;translation-of-characters#Translation-of-Characters&quot;&gt;문자 번역을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="822a9ee64792cb6762a16320b701dc631f9eb524" translate="yes" xml:space="preserve">
          <source>Send the output to the file name specified, overwriting it if it already exists.</source>
          <target state="translated">출력을 지정된 파일 이름으로 보내고 이미있는 경우 덮어 씁니다.</target>
        </trans-unit>
        <trans-unit id="4a3ee096da797e579c1469607259ca0984c096c6" translate="yes" xml:space="preserve">
          <source>Sending Input to Processes</source>
          <target state="translated">프로세스에 입력 보내기</target>
        </trans-unit>
        <trans-unit id="025798ea2ac63c2247ac967f936ea440e48807f7" translate="yes" xml:space="preserve">
          <source>Sending Signals to Processes</source>
          <target state="translated">프로세스에 신호 보내기</target>
        </trans-unit>
        <trans-unit id="305b8c7d8dd760adc71ef2a109e1c3e91ca5d566" translate="yes" xml:space="preserve">
          <source>Sending input to an asynchronous subprocess.</source>
          <target state="translated">비동기 하위 프로세스에 입력을 보냅니다.</target>
        </trans-unit>
        <trans-unit id="3d7e520df1c6561eb0321bd3f938204883eb65fb" translate="yes" xml:space="preserve">
          <source>Sentinels run when process run-status changes.</source>
          <target state="translated">센티넬은 프로세스 실행 상태가 변경 될 때 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="bb1cbe614e2482e4bbe28bf6b9cd269e1101537f" translate="yes" xml:space="preserve">
          <source>Sentinels: Detecting Process Status Changes</source>
          <target state="translated">센티넬 : 프로세스 상태 변경 감지</target>
        </trans-unit>
        <trans-unit id="41731c7147c33780c09da41dfe563d86f41b597d" translate="yes" xml:space="preserve">
          <source>Separating windows visually.</source>
          <target state="translated">창을 시각적으로 분리합니다.</target>
        </trans-unit>
        <trans-unit id="1c51890be0fdeaaef998bd697231eb6abe7f05b1" translate="yes" xml:space="preserve">
          <source>Separators used in sequences (such as &lt;code&gt;&quot;,&quot;&lt;/code&gt; and &lt;code&gt;&quot;;&quot;&lt;/code&gt; above) are best defined with BNF rules such as &lt;code&gt;(foo (foo &quot;separator&quot; foo) ...)&lt;/code&gt; which generate precedence conflicts which are then resolved by giving them an explicit &lt;code&gt;(assoc &quot;separator&quot;)&lt;/code&gt;.</source>
          <target state="translated">시퀀스에서 사용되는 세퍼레이터 (예컨대 &lt;code&gt;&quot;,&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;;&quot;&lt;/code&gt; 위)와 같은 규칙 BNF 정의 최선이다 &lt;code&gt;(foo (foo &quot;separator&quot; foo) ...)&lt;/code&gt; 다음 그들을 명시를 제공함으로써 해결되는 우선 충돌을 생성 &lt;code&gt;(assoc &quot;separator&quot;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="657ae2f963a7ef2139ffd497ed0061bc894afa5c" translate="yes" xml:space="preserve">
          <source>Sequence Types</source>
          <target state="translated">시퀀스 유형</target>
        </trans-unit>
        <trans-unit id="fe8b9c3c37cb286d7cc9c4826fbe1b5fe52da019" translate="yes" xml:space="preserve">
          <source>Sequence and alternative</source>
          <target state="translated">순서 및 대안</target>
        </trans-unit>
        <trans-unit id="5ac4ac4b0cebd260f572d92190a2ffcba70fb740" translate="yes" xml:space="preserve">
          <source>Sequence of actions Emacs performs at startup.</source>
          <target state="translated">Emacs가 시작할 때 수행하는 일련의 작업입니다.</target>
        </trans-unit>
        <trans-unit id="b5fb636023abb67d347041d398442118f79ea091" translate="yes" xml:space="preserve">
          <source>Sequences</source>
          <target state="translated">Sequences</target>
        </trans-unit>
        <trans-unit id="b3fe69304bf904dec8045dfe6fdf9519b0fb8156" translate="yes" xml:space="preserve">
          <source>Sequences Arrays Vectors</source>
          <target state="translated">시퀀스 배열 벡터</target>
        </trans-unit>
        <trans-unit id="d55a2abe3a8076c5d88e86d5c48dba06c7e17146" translate="yes" xml:space="preserve">
          <source>Sequences, Arrays, and Vectors</source>
          <target state="translated">시퀀스, 배열 및 벡터</target>
        </trans-unit>
        <trans-unit id="4cc319cd193dd85832e275f1860302e7a49496e0" translate="yes" xml:space="preserve">
          <source>Sequencing</source>
          <target state="translated">Sequencing</target>
        </trans-unit>
        <trans-unit id="b93d56f56c1840ef4c394eac298b3d730ef00e85" translate="yes" xml:space="preserve">
          <source>Serial ports are available on GNU/Linux, Unix, and MS Windows systems.</source>
          <target state="translated">직렬 포트는 GNU / Linux, Unix 및 MS Windows 시스템에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e6e2d9084d6412e5422e252ec7b1bea911843c15" translate="yes" xml:space="preserve">
          <source>Session Management</source>
          <target state="translated">세션 관리</target>
        </trans-unit>
        <trans-unit id="e004947cf2be78b09277e2c5fea0bec914f034aa" translate="yes" xml:space="preserve">
          <source>Set &lt;var&gt;button&lt;/var&gt;&amp;rsquo;s &lt;var&gt;prop&lt;/var&gt; property to &lt;var&gt;val&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;button&lt;/var&gt; 의 &lt;var&gt;prop&lt;/var&gt; 속성을 &lt;var&gt;val&lt;/var&gt; 로 설정 합니다 .</target>
        </trans-unit>
        <trans-unit id="ba717b437ea675d3c99794a6a88f87fbb7987cc4" translate="yes" xml:space="preserve">
          <source>Set a breakpoint at the stop point at or after point (&lt;code&gt;edebug-set-breakpoint&lt;/code&gt;). If you use a prefix argument, the breakpoint is temporary&amp;mdash;it turns off the first time it stops the program. An overlay with the &lt;code&gt;edebug-enabled-breakpoint&lt;/code&gt; or &lt;code&gt;edebug-disabled-breakpoint&lt;/code&gt; faces is put at the breakpoint.</source>
          <target state="translated">지점 또는 지점 이후의 중지 지점에 중단 점을 &lt;code&gt;edebug-set-breakpoint&lt;/code&gt; 합니다 ( edebug-set-breakpoint ). 접두사 인수를 사용하는 경우 중단 점은 임시입니다. 프로그램을 처음 중지하면 중단됩니다. &lt;code&gt;edebug-enabled-breakpoint&lt;/code&gt; 또는 &lt;code&gt;edebug-disabled-breakpoint&lt;/code&gt; 면이 있는 오버레이가 중단 점 에 배치됩니다.</target>
        </trans-unit>
        <trans-unit id="19cb1521e7c9ba193d2500ca008206ec47839e30" translate="yes" xml:space="preserve">
          <source>Set a conditional breakpoint which stops the program only if evaluating &lt;var&gt;condition&lt;/var&gt; produces a non-&lt;code&gt;nil&lt;/code&gt; value (&lt;code&gt;edebug-set-conditional-breakpoint&lt;/code&gt;). With a prefix argument, the breakpoint is temporary.</source>
          <target state="translated">평가에만 프로그램 정지 조건 설정 중단 &lt;var&gt;condition&lt;/var&gt; 비 생산 &lt;code&gt;nil&lt;/code&gt; 값 ( &lt;code&gt;edebug-set-conditional-breakpoint&lt;/code&gt; ). 접두사 인수를 사용하면 중단 점이 일시적입니다.</target>
        </trans-unit>
        <trans-unit id="c9f9635e429eec7a3b5df197f6523a6598b8c6d0" translate="yes" xml:space="preserve">
          <source>Set all the variables and do not query.</source>
          <target state="translated">모든 변수를 설정하고 쿼리하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="13e8fb846a8fb81d5c4df72d5921406e316c4946" translate="yes" xml:space="preserve">
          <source>Set conditional or unconditional breakpoints.</source>
          <target state="translated">조건부 또는 무조건 중단 점을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="3320c9616154b0cc19a1b7c09fb7d27402558297" translate="yes" xml:space="preserve">
          <source>Set only the safe variables and do not query.</source>
          <target state="translated">안전한 변수 만 설정하고 쿼리하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="26815226b14883011f32ba183df05436be3e3e4d" translate="yes" xml:space="preserve">
          <source>Set the &lt;var&gt;attribute&lt;/var&gt; of the node to &lt;var&gt;value&lt;/var&gt;.</source>
          <target state="translated">노드 의 &lt;var&gt;attribute&lt;/var&gt; 을 &lt;var&gt;value&lt;/var&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="a7cd9c19536286df0de0abae6f7e47ca2a66c15f" translate="yes" xml:space="preserve">
          <source>Set the button-type &lt;var&gt;type&lt;/var&gt;&amp;rsquo;s &lt;var&gt;prop&lt;/var&gt; property to &lt;var&gt;val&lt;/var&gt;.</source>
          <target state="translated">버튼 유형 &lt;var&gt;type&lt;/var&gt; 의 &lt;var&gt;prop&lt;/var&gt; 속성을 &lt;var&gt;val&lt;/var&gt; 로 설정 합니다.</target>
        </trans-unit>
        <trans-unit id="24f6defe2d8623ad18f84a7a63b77ecc14e1bc1d" translate="yes" xml:space="preserve">
          <source>Set the font property &lt;var&gt;property&lt;/var&gt; in the font-spec &lt;var&gt;font-spec&lt;/var&gt; to &lt;var&gt;value&lt;/var&gt;.</source>
          <target state="translated">font-spec &lt;var&gt;font-spec&lt;/var&gt; 의 font 속성 &lt;var&gt;property&lt;/var&gt; 을 &lt;var&gt;value&lt;/var&gt; 로 설정 합니다 .</target>
        </trans-unit>
        <trans-unit id="5afa7b7a3f1af9e5c05f0ca90fa2ef7f74962cd3" translate="yes" xml:space="preserve">
          <source>Set the function&amp;rsquo;s &lt;code&gt;interactive-only&lt;/code&gt; property to &lt;var&gt;value&lt;/var&gt;. See &lt;a href=&quot;defining-commands#The-interactive_002donly-property&quot;&gt;The interactive-only property&lt;/a&gt;.</source>
          <target state="translated">함수의 &lt;code&gt;interactive-only&lt;/code&gt; 속성을 &lt;var&gt;value&lt;/var&gt; 로 설정 합니다 . &lt;a href=&quot;defining-commands#The-interactive_002donly-property&quot;&gt;대화 형 전용 속성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="45fbb38d0933bcce6aba90482d62f88de730bba7" translate="yes" xml:space="preserve">
          <source>Set the locking thread of &lt;var&gt;process&lt;/var&gt; to &lt;var&gt;thread&lt;/var&gt;. &lt;var&gt;thread&lt;/var&gt; may be &lt;code&gt;nil&lt;/code&gt;, in which case the process is unlocked.</source>
          <target state="translated">의 잠금 스레드 설정 &lt;var&gt;process&lt;/var&gt; 에 &lt;var&gt;thread&lt;/var&gt; . &lt;var&gt;thread&lt;/var&gt; 는 &lt;code&gt;nil&lt;/code&gt; 일 수 있으며 ,이 경우 프로세스가 잠금 해제됩니다.</target>
        </trans-unit>
        <trans-unit id="18675bfab9c83faccc02f27422d27d81e121605f" translate="yes" xml:space="preserve">
          <source>Set the priority for packets sent on this connection to the integer &lt;var&gt;priority&lt;/var&gt;. The interpretation of this number is protocol specific; such as setting the TOS (type of service) field on IP packets sent on this connection. It may also have system dependent effects, such as selecting a specific output queue on the network interface.</source>
          <target state="translated">이 연결에서 전송 된 패킷의 우선 순위를 정수 &lt;var&gt;priority&lt;/var&gt; 합니다. 이 번호의 해석은 프로토콜에 따라 다릅니다. 이 연결에서 전송 된 IP 패킷에 TOS (서비스 유형) 필드를 설정하는 것과 같은. 또한 네트워크 인터페이스에서 특정 출력 대기열을 선택하는 것과 같은 시스템에 따른 영향을 미칠 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="df44459082f4eae84d739f5f097da6443a1bab3c" translate="yes" xml:space="preserve">
          <source>Set the property &lt;var&gt;prop&lt;/var&gt; of &lt;var&gt;abbrev&lt;/var&gt; to value &lt;var&gt;val&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;abbrev&lt;/var&gt; 의 속성 &lt;var&gt;prop&lt;/var&gt; 을 &lt;var&gt;val&lt;/var&gt; 값으로 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="145369233f7d73084d55e8b884bc6a7fa6f2548d" translate="yes" xml:space="preserve">
          <source>Set the property &lt;var&gt;prop&lt;/var&gt; of abbrev table &lt;var&gt;table&lt;/var&gt; to value &lt;var&gt;val&lt;/var&gt;.</source>
          <target state="translated">abbrev 테이블 &lt;var&gt;table&lt;/var&gt; 의 속성 &lt;var&gt;prop&lt;/var&gt; 을 &lt;var&gt;val&lt;/var&gt; 값으로 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="8ccae5464c64741903caf78493a2e1cb4ea74608" translate="yes" xml:space="preserve">
          <source>Set the representation type of the current buffer. If &lt;var&gt;multibyte&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, the buffer becomes multibyte. If &lt;var&gt;multibyte&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;, the buffer becomes unibyte.</source>
          <target state="translated">현재 버퍼의 표현 유형을 설정합니다. &lt;var&gt;multibyte&lt;/var&gt; 가 &lt;code&gt;nil&lt;/code&gt; 이 아니면 버퍼는 멀티 바이트가됩니다. 경우 &lt;var&gt;multibyte&lt;/var&gt; 이다 &lt;code&gt;nil&lt;/code&gt; , 버퍼는 unibyte된다.</target>
        </trans-unit>
        <trans-unit id="095f49622b8ae4b6233b76f588bc7d817a209aaa" translate="yes" xml:space="preserve">
          <source>Set the safe variables, and query (once) about any unsafe variables.</source>
          <target state="translated">안전 변수를 설정하고 안전하지 않은 변수에 대해 쿼리 (한 번)합니다.</target>
        </trans-unit>
        <trans-unit id="d2a3e9e1786ed875a52f712c795d9226f392b518" translate="yes" xml:space="preserve">
          <source>Set the size of &lt;var&gt;ring&lt;/var&gt; to &lt;var&gt;size&lt;/var&gt;. If the new size is smaller, then the oldest items in the ring are discarded.</source>
          <target state="translated">의 크기 설정 &lt;var&gt;ring&lt;/var&gt; 에 &lt;var&gt;size&lt;/var&gt; . 새 크기가 더 작 으면 링에서 가장 오래된 항목이 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="ef7b62e94b29a6f396604036bc117f9e427ccc8c" translate="yes" xml:space="preserve">
          <source>Set the variable&amp;rsquo;s &lt;code&gt;risky-local-variable&lt;/code&gt; property to &lt;var&gt;value&lt;/var&gt; (see &lt;a href=&quot;file-local-variables#File-Local-Variables&quot;&gt;File Local Variables&lt;/a&gt;).</source>
          <target state="translated">변수의 &lt;code&gt;risky-local-variable&lt;/code&gt; 속성을 &lt;var&gt;value&lt;/var&gt; 로 설정 합니다 ( &lt;a href=&quot;file-local-variables#File-Local-Variables&quot;&gt;파일 로컬 변수&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="f628b711f8f0cf51bafad953c5363bc0521ae47e" translate="yes" xml:space="preserve">
          <source>Set the variable&amp;rsquo;s &lt;code&gt;safe-local-variable&lt;/code&gt; property to &lt;var&gt;function&lt;/var&gt; (see &lt;a href=&quot;file-local-variables#File-Local-Variables&quot;&gt;File Local Variables&lt;/a&gt;).</source>
          <target state="translated">변수의 &lt;code&gt;safe-local-variable&lt;/code&gt; 속성을 &lt;var&gt;function&lt;/var&gt; 하도록 설정 합니다 ( &lt;a href=&quot;file-local-variables#File-Local-Variables&quot;&gt;파일 로컬 변수&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="27e97a79ee5734fcdfb5ffc1d7a6a04ab0c7282b" translate="yes" xml:space="preserve">
          <source>Set up a timer which runs the next time Emacs is idle for &lt;var&gt;secs&lt;/var&gt; seconds. The value of &lt;var&gt;secs&lt;/var&gt; may be a number or a value of the type returned by &lt;code&gt;current-idle-time&lt;/code&gt;.</source>
          <target state="translated">다음에 Emacs가 &lt;var&gt;secs&lt;/var&gt; 동안 유휴 상태 일 때 실행되는 타이머를 설정하십시오 . 값 &lt;var&gt;secs&lt;/var&gt; 숫자 또는 의해 반환 된 타입의 값일 수도 &lt;code&gt;current-idle-time&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="254e42ea541fb8e32298bbe15de4f4e1f56fb5c8" translate="yes" xml:space="preserve">
          <source>Setting Hooks</source>
          <target state="translated">후크 설정</target>
        </trans-unit>
        <trans-unit id="be343cc818d8d6d89ba3f94f61140014d4981bea" translate="yes" xml:space="preserve">
          <source>Setting Variable Values</source>
          <target state="translated">변수 값 설정</target>
        </trans-unit>
        <trans-unit id="3dbb403c83c09c01d97396e5fa00c994ca2efff4" translate="yes" xml:space="preserve">
          <source>Setting a timer to call a function at a certain time.</source>
          <target state="translated">특정 시간에 함수를 호출하도록 타이머를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="3c697599f08654551058803ac0c0bcec8165178e" translate="yes" xml:space="preserve">
          <source>Setting a timer to call a function when Emacs has been idle for a certain length of time.</source>
          <target state="translated">Emacs가 일정 시간 동안 유휴 상태 일 때 함수를 호출하도록 타이머를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="625e1866157ffc17f349eafc8b9f773c1a5b603d" translate="yes" xml:space="preserve">
          <source>Setting breakpoints to make the program stop.</source>
          <target state="translated">프로그램을 중지하도록 중단 점을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="80a6fdb6741d007a2a46415eaa0a982eccb3e0ad" translate="yes" xml:space="preserve">
          <source>Setting the properties of a range of text.</source>
          <target state="translated">텍스트 범위의 속성 설정.</target>
        </trans-unit>
        <trans-unit id="1fbf28368f77cd04577718c4f073f816a264988e" translate="yes" xml:space="preserve">
          <source>Setting the window history to &lt;code&gt;nil&lt;/code&gt; ensures that a future call to &lt;code&gt;quit-window&lt;/code&gt; can delete the window altogether.</source>
          <target state="translated">창 기록을 &lt;code&gt;nil&lt;/code&gt; 로 설정하면 &lt;code&gt;quit-window&lt;/code&gt; 에 대한 향후 호출 이 창을 모두 삭제할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="53edc1c1c5b2b48f344338280bb457b62b1914ad" translate="yes" xml:space="preserve">
          <source>Setting these variables does not immediately affect the window. These variables are checked when a new buffer is displayed in the window. Thus, you can make changes take effect by calling &lt;code&gt;set-window-buffer&lt;/code&gt;. Do not use these variables to try to determine the current width of the left or right margin. Instead, use the function &lt;code&gt;window-margins&lt;/code&gt;.</source>
          <target state="translated">이러한 변수를 설정해도 창에 즉시 영향을주지는 않습니다. 이러한 변수는 새 버퍼가 창에 표시 될 때 확인됩니다. 따라서 &lt;code&gt;set-window-buffer&lt;/code&gt; 를 호출하여 변경 사항을 적용 할 수 있습니다 . 이러한 변수를 사용하여 왼쪽 또는 오른쪽 여백의 현재 너비를 확인하지 마십시오. 대신 &lt;code&gt;window-margins&lt;/code&gt; 함수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="a4679c2f0d9bf6e915afb21ccc40a79d8c38d1b5" translate="yes" xml:space="preserve">
          <source>Setting this variable does not affect existing frames. Furthermore, functions that display a buffer in a separate frame may override the default parameters by supplying their own parameters.</source>
          <target state="translated">이 변수를 설정해도 기존 프레임에는 영향을주지 않습니다. 또한 별도의 프레임에 버퍼를 표시하는 함수는 자체 매개 변수를 제공하여 기본 매개 변수를 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="97ece87aa616c467b22fec96cdf778d15cdcc608" translate="yes" xml:space="preserve">
          <source>Setting this variable makes it buffer-local in the current buffer.</source>
          <target state="translated">이 변수를 설정하면 현재 버퍼에서 버퍼 로컬이됩니다.</target>
        </trans-unit>
        <trans-unit id="bed08c3f49198db618fbd7b2cdfaa069202a9107" translate="yes" xml:space="preserve">
          <source>Setting this variable usually causes the next resize operation to pass the corresponding size hints to the window manager. This means that this variable should be set only in a user&amp;rsquo;s initial file; applications should never bind it temporarily.</source>
          <target state="translated">이 변수를 설정하면 일반적으로 다음 크기 조정 작업에서 해당 크기 힌트를 창 관리자에 전달합니다. 즉,이 변수는 사용자의 초기 파일에만 설정되어야합니다. 응용 프로그램은 일시적으로 바인딩해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="757ad1cca7dfa2c7063987ee4c8d6cf3c1f7b2b1" translate="yes" xml:space="preserve">
          <source>Setting up a function to autoload.</source>
          <target state="translated">자동로드 기능을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="5f0fbdd562909ca26f807732ed9daeee70e170b9" translate="yes" xml:space="preserve">
          <source>Setting up frame layouts with side windows.</source>
          <target state="translated">측면 창으로 프레임 레이아웃 설정.</target>
        </trans-unit>
        <trans-unit id="37d211a549ee6db6cd1b296a5cdb016c8481ef97" translate="yes" xml:space="preserve">
          <source>Setup SMIE navigation and indentation. &lt;var&gt;grammar&lt;/var&gt; is a grammar table generated by &lt;code&gt;smie-prec2-&amp;gt;grammar&lt;/code&gt;. &lt;var&gt;rules-function&lt;/var&gt; is a set of indentation rules for use on &lt;code&gt;smie-rules-function&lt;/code&gt;. &lt;var&gt;keywords&lt;/var&gt; are additional arguments, which can include the following keywords:</source>
          <target state="translated">SMIE 탐색 및 들여 쓰기를 설정합니다. &lt;var&gt;grammar&lt;/var&gt; 는 &lt;code&gt;smie-prec2-&amp;gt;grammar&lt;/code&gt; 에 의해 생성 된 문법 테이블 입니다. &lt;var&gt;rules-function&lt;/var&gt; 은 &lt;code&gt;smie-rules-function&lt;/code&gt; 에서 사용하기위한 들여 쓰기 규칙 세트입니다 . &lt;var&gt;keywords&lt;/var&gt; 는 다음 키워드를 포함 할 수 있는 추가 인수입니다.</target>
        </trans-unit>
        <trans-unit id="a323a74f4694f38469fdbe87c72cd84be3d71fff" translate="yes" xml:space="preserve">
          <source>Several functions return information about processes.</source>
          <target state="translated">여러 함수가 프로세스에 대한 정보를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b03d3e4af7377f376092575d02eb3bdc433e34b9" translate="yes" xml:space="preserve">
          <source>Several functions work specifically with bool-vectors; aside from that, you manipulate them with same functions used for other kinds of arrays.</source>
          <target state="translated">몇 가지 함수는 특히 bool-vector와 함께 작동합니다. 그 외에도 다른 종류의 배열에 사용되는 것과 동일한 함수로 조작합니다.</target>
        </trans-unit>
        <trans-unit id="3e9f1836e08811cf240c2fdb215ed3b945b44d63" translate="yes" xml:space="preserve">
          <source>Several hooks are available for customizing the behavior of this construct; they are listed below.</source>
          <target state="translated">이 구성의 동작을 사용자 정의하는 데 몇 가지 후크를 사용할 수 있습니다. 아래에 나열되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="d5c6c311b143c75bcaf3650a56c0b404f34fe12c" translate="yes" xml:space="preserve">
          <source>Several keywords make sense in &lt;code&gt;make-hash-table&lt;/code&gt;, but the only two that you really need to know about are &lt;code&gt;:test&lt;/code&gt; and &lt;code&gt;:weakness&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;make-hash-table&lt;/code&gt; 에서는 몇 가지 키워드가 의미가 있지만 실제로 알아야 할 두 가지 키워드 는 &lt;code&gt;:test&lt;/code&gt; 및 &lt;code&gt;:weakness&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="64ca05b7be3e9e152f0eceec4028fb729fdf7335" translate="yes" xml:space="preserve">
          <source>Several kinds of elements may appear in a keymap, after the symbol &lt;code&gt;keymap&lt;/code&gt; that begins it:</source>
          <target state="translated">&lt;code&gt;keymap&lt;/code&gt; 을 시작 하는 기호 키맵 뒤에 여러 종류의 요소가 키맵에 나타날 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="26f07c4bf7297f1dbea8ab7e16bc331bdf62ba4a" translate="yes" xml:space="preserve">
          <source>Several of the filling functions have an argument &lt;var&gt;justify&lt;/var&gt;. If it is non-&lt;code&gt;nil&lt;/code&gt;, that requests some kind of justification. It can be &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;full&lt;/code&gt;, or &lt;code&gt;center&lt;/code&gt;, to request a specific style of justification. If it is &lt;code&gt;t&lt;/code&gt;, that means to use the current justification style for this part of the text (see &lt;code&gt;current-justification&lt;/code&gt;, below). Any other value is treated as &lt;code&gt;full&lt;/code&gt;.</source>
          <target state="translated">채우기 함수 중 일부에는 &lt;var&gt;justify&lt;/var&gt; 인수가 있습니다. &lt;code&gt;nil&lt;/code&gt; 이 아니면 일종의 정당성을 요구합니다. 할 수있다 &lt;code&gt;left&lt;/code&gt; , &lt;code&gt;right&lt;/code&gt; , &lt;code&gt;full&lt;/code&gt; , 또는 &lt;code&gt;center&lt;/code&gt; 정당화의 특정 스타일을 요청합니다. 이 경우 &lt;code&gt;t&lt;/code&gt; 이 수단이 텍스트의이 부분에 대한 현재 정당화 스타일을 사용하는 것으로, (참조 &lt;code&gt;current-justification&lt;/code&gt; 아래). 다른 값은 &lt;code&gt;full&lt;/code&gt; 로 처리됩니다 .</target>
        </trans-unit>
        <trans-unit id="6e86854bd5641bda75ae79956e2571d32a5bfc2e" translate="yes" xml:space="preserve">
          <source>Several of the functions for minibuffer input have an argument called &lt;var&gt;initial&lt;/var&gt;. This is a mostly-deprecated feature for specifying that the minibuffer should start out with certain text, instead of empty as usual.</source>
          <target state="translated">미니 버퍼 입력을위한 여러 함수에는 &lt;var&gt;initial&lt;/var&gt; 이라는 인수가 있습니다 . 이것은 미니 버퍼가 평상시처럼 비어있는 대신 특정 텍스트로 시작하도록 지정하기 위해 대부분 사용되지 않는 기능입니다.</target>
        </trans-unit>
        <trans-unit id="0dad76a03e6165ba6f6368c81742fd348de9316e" translate="yes" xml:space="preserve">
          <source>Several of these functions use or return &lt;em&gt;rgb values&lt;/em&gt;, described in &lt;a href=&quot;color-names#Color-Names&quot;&gt;Color Names&lt;/a&gt;.</source>
          <target state="translated">이러한 함수 중 일부는 &lt;a href=&quot;color-names#Color-Names&quot;&gt;색상 이름에&lt;/a&gt; 설명 된 &lt;em&gt;rgb 값을&lt;/em&gt; 사용하거나 반환 &lt;em&gt;합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="0c70fc1859c87f6d0c5cc7e74db97a9a3c05bbf0" translate="yes" xml:space="preserve">
          <source>Several operating systems support watching of filesystems for changes of files. If configured properly, Emacs links a respective library like</source>
          <target state="translated">여러 운영 체제는 파일 변경에 대한 파일 시스템 감시를 지원합니다. 올바르게 구성되면 Emacs는 다음과 같은 각 라이브러리를 연결합니다.</target>
        </trans-unit>
        <trans-unit id="0ee34d7d31bd282c1a678a9c7bd58a149ecb395e" translate="yes" xml:space="preserve">
          <source>Several other data structures are associated with each buffer:</source>
          <target state="translated">여러 다른 데이터 구조가 각 버퍼와 연관됩니다.</target>
        </trans-unit>
        <trans-unit id="f14ecb19ff0f72eabaa8066abf21bfb80658f1a4" translate="yes" xml:space="preserve">
          <source>Shell Arguments</source>
          <target state="translated">셸 인수</target>
        </trans-unit>
        <trans-unit id="ef49b4eb19062f5d74c5f8495260cfeae4f31e03" translate="yes" xml:space="preserve">
          <source>Short for &lt;code&gt;&amp;amp;rest form&lt;/code&gt;. See &lt;code&gt;&amp;amp;rest&lt;/code&gt; below. If your macro wraps its body of code with &lt;code&gt;lambda&lt;/code&gt; before it is evaluated, use &lt;code&gt;def-body&lt;/code&gt; instead. See &lt;code&gt;def-body&lt;/code&gt; below.</source>
          <target state="translated">짧게 &lt;code&gt;&amp;amp;rest form&lt;/code&gt; . 아래 &lt;code&gt;&amp;amp;rest&lt;/code&gt; 참조하십시오 . 매크로 가 평가되기 전에 코드 본문을 &lt;code&gt;lambda&lt;/code&gt; 래핑하는 경우 대신 &lt;code&gt;def-body&lt;/code&gt; 를 사용합니다. 아래 &lt;code&gt;def-body&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="047c8ca63fec636816b4bbc1d74e3f89f9f23d0e" translate="yes" xml:space="preserve">
          <source>Should fontify the region between &lt;var&gt;beg&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt;. If &lt;var&gt;loudly&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, should display status messages while fontifying. Calls the function specified by &lt;code&gt;font-lock-fontify-region-function&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;beg&lt;/var&gt; 와 &lt;var&gt;end&lt;/var&gt; 사이의 영역을 글꼴로 표시해야합니다 . 경우 &lt;var&gt;loudly&lt;/var&gt; 비입니다 &lt;code&gt;nil&lt;/code&gt; fontifying 동안, 상태 메시지를 표시해야합니다. &lt;code&gt;font-lock-fontify-region-function&lt;/code&gt; 에 지정된 함수를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="2f5af8842e2c918c16a2dd5f8aa91909a958b15f" translate="yes" xml:space="preserve">
          <source>Should remove fontification from the region between &lt;var&gt;beg&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt;. Calls the function specified by &lt;code&gt;font-lock-unfontify-region-function&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;beg&lt;/var&gt; 와 &lt;var&gt;end&lt;/var&gt; 사이의 영역에서 글꼴을 제거해야합니다 . &lt;code&gt;font-lock-unfontify-region-function&lt;/code&gt; 에 지정된 함수를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="bd2e281c470aa7ed03f5b5855c5036b01edd56ec" translate="yes" xml:space="preserve">
          <source>Show &lt;var&gt;sample&lt;/var&gt; in a special face specified by &lt;code&gt;:sample-face&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:sample-face&lt;/code&gt; 로 지정된 특수면에 &lt;var&gt;sample&lt;/var&gt; 을 표시 합니다 .</target>
        </trans-unit>
        <trans-unit id="7adaea88c810cf9f28ed01828e2e827903a17e74" translate="yes" xml:space="preserve">
          <source>Show a backtrace of the thread at point. This will show where in its code the thread had yielded or was blocked at the moment you pressed</source>
          <target state="translated">지점에서 스레드의 역 추적을 표시합니다. 이것은 코드에서 당신이 눌렀을 때 스레드가 항복했거나 차단 된 위치를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="b0eba5770f4aec734295451c7ac3d6868d024f38" translate="yes" xml:space="preserve">
          <source>Show the active threads.</source>
          <target state="translated">활성 스레드를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="537b7497791f0fdfbe9edbf8c46a19d1419906aa" translate="yes" xml:space="preserve">
          <source>Showing Images</source>
          <target state="translated">이미지 표시</target>
        </trans-unit>
        <trans-unit id="eb19df13f7b941be7fcf997641cf4b2871da6eec" translate="yes" xml:space="preserve">
          <source>Showing how such nonlocal exits can be written.</source>
          <target state="translated">이러한 비 로컬 엑시트를 작성하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="2680369054ed3fd5ebc8683900c98c53b798fc04" translate="yes" xml:space="preserve">
          <source>Shut down transaction queue &lt;var&gt;queue&lt;/var&gt;, waiting for all pending transactions to complete, and then terminate the connection or child process.</source>
          <target state="translated">트랜잭션 큐 &lt;var&gt;queue&lt;/var&gt; 종료하고 보류중인 모든 트랜잭션이 완료 될 때까지 기다린 다음 연결 또는 자식 프로세스를 종료합니다.</target>
        </trans-unit>
        <trans-unit id="234d9a8a77154be86693ba05a4f109fe17615301" translate="yes" xml:space="preserve">
          <source>Shy groups are also called &lt;em&gt;non-capturing&lt;/em&gt; or &lt;em&gt;unnumbered groups&lt;/em&gt;.</source>
          <target state="translated">수줍음이 많은 그룹은 &lt;em&gt;비 캡처 &lt;/em&gt;&lt;em&gt;그룹&lt;/em&gt; 또는 &lt;em&gt;번호가 지정되지 않은 그룹&lt;/em&gt; 이라고도 &lt;em&gt;합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="fbbfa6e29d3553d09e661447794fc8276cb1fb9b" translate="yes" xml:space="preserve">
          <source>Side Window Options and Functions</source>
          <target state="translated">사이드 윈도우 옵션 및 기능</target>
        </trans-unit>
        <trans-unit id="5e398d2cb440373a20f241a7bbfceaa59906ecd0" translate="yes" xml:space="preserve">
          <source>Side Windows</source>
          <target state="translated">사이드 윈도우</target>
        </trans-unit>
        <trans-unit id="2010617910b4a75f256768b6d19ffc0a53228e7b" translate="yes" xml:space="preserve">
          <source>Side windows (see &lt;a href=&quot;side-windows#Side-Windows&quot;&gt;Side Windows&lt;/a&gt;) can be used for displaying specific buffers always in a window at the same position of a frame. This permits grouping buffers that do not compete for being shown at the same time on a frame and showing any such buffer in the same window without disrupting the display of other buffers.</source>
          <target state="translated">사이드 창 (참조 &lt;a href=&quot;side-windows#Side-Windows&quot;&gt;사이드 윈도우를&lt;/a&gt; ) 프레임의 같은 위치에 창에 항상 특정 버퍼를 표시 할 수 있습니다. 이렇게하면 프레임에 동시에 표시되기 위해 경쟁하지 않는 버퍼를 그룹화하고 다른 버퍼의 표시를 방해하지 않고 동일한 창에 이러한 버퍼를 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ca6523823e4aee4cffba7a68c80280559eb556a" translate="yes" xml:space="preserve">
          <source>Side windows are special windows positioned at any of the four sides of a frame&amp;rsquo;s root window (see &lt;a href=&quot;windows-and-frames#Windows-and-Frames&quot;&gt;Windows and Frames&lt;/a&gt;). In practice, this means that the area of the frame&amp;rsquo;s root window is subdivided into a main window and a number of side windows surrounding that main window. The main window is either a &amp;ldquo;normal&amp;rdquo; live window or specifies the area containing all the normal windows.</source>
          <target state="translated">측면 창은 프레임 루트 창의 네면에 위치한 특수 창입니다 (창 &lt;a href=&quot;windows-and-frames#Windows-and-Frames&quot;&gt;및 프레임&lt;/a&gt; 참조 ). 실제로 이것은 프레임의 루트 창 영역이 주 창과 해당 주 창을 둘러싼 여러 측면 창으로 세분된다는 것을 의미합니다. 기본 창은 &quot;일반&quot;라이브 창이거나 모든 일반 창을 포함하는 영역을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="693343be5385e287482c62c22a50c6ecc19a7db8" translate="yes" xml:space="preserve">
          <source>Side windows can be used to create more complex frame layouts like those provided by integrated development environments (IDEs). In such layouts, the area of the main window is where the normal editing activities take place. Side windows are not conceived for editing in the usual sense. Rather, they are supposed to display information complementary to the current editing activity, like lists of files, tags or buffers, help information, search or grep results or shell output.</source>
          <target state="translated">측면 창을 사용하여 IDE (통합 개발 환경)에서 제공하는 것과 같은 더 복잡한 프레임 레이아웃을 만들 수 있습니다. 이러한 레이아웃에서 기본 창의 영역은 일반적인 편집 작업이 수행되는 곳입니다. 사이드 윈도우는 일반적인 의미의 편집을 위해 고안된 것이 아닙니다. 오히려 파일 목록, 태그 또는 버퍼, 도움말 정보, 검색 또는 grep 결과 또는 쉘 출력과 같은 현재 편집 활동을 보완하는 정보를 표시해야합니다.</target>
        </trans-unit>
        <trans-unit id="c3d8cf29b1c7655e79373ce8a1465cf72030dd62" translate="yes" xml:space="preserve">
          <source>Side-effecting code referencing &lt;var&gt;symbol&lt;/var&gt; is undefined. Avoid. For example, here are two similar functions. Both use &lt;code&gt;and&lt;/code&gt;, &lt;var&gt;symbol&lt;/var&gt; and &lt;code&gt;guard&lt;/code&gt;:</source>
          <target state="translated">&lt;var&gt;symbol&lt;/var&gt; 참조하는 부작용 코드 가 정의되지 않았습니다. 기피. 예를 들어, 다음은 두 가지 유사한 기능입니다. 사용 &lt;code&gt;and&lt;/code&gt; , &lt;var&gt;symbol&lt;/var&gt; 및 &lt;code&gt;guard&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="550c328b29576b3520a2683437dd4a2426f6241f" translate="yes" xml:space="preserve">
          <source>Signal a &lt;code&gt;file-already-exists&lt;/code&gt; error if &lt;var&gt;ok-if-already-exists&lt;/var&gt; is &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">신호는 &lt;code&gt;file-already-exists&lt;/code&gt; 경우 오류를 &lt;var&gt;ok-if-already-exists&lt;/var&gt; 이다 &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4a92cb160354f2253da07bdd31ec9240b2272b00" translate="yes" xml:space="preserve">
          <source>Signal a &lt;code&gt;search-failed&lt;/code&gt; error.</source>
          <target state="translated">신호 &lt;code&gt;search-failed&lt;/code&gt; 오류가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="6725b50a00e3c51c4f6fe54090062db0465cccca" translate="yes" xml:space="preserve">
          <source>Signal an error if the current buffer is read-only. Special.</source>
          <target state="translated">현재 버퍼가 읽기 전용이면 오류 신호를 보냅니다. 특별한.</target>
        </trans-unit>
        <trans-unit id="00350e673f14ea1bf770f5928ac712383bdd9286" translate="yes" xml:space="preserve">
          <source>Signal an error, formatting &lt;var&gt;args&lt;/var&gt; according to &lt;var&gt;format&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;format&lt;/var&gt; 에 따라 &lt;var&gt;args&lt;/var&gt; 를 형식화하여 오류 신호를 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="bfdfc13f09f2ad8933d37acf7848a9ce0bf136be" translate="yes" xml:space="preserve">
          <source>Signal the thread at point. After</source>
          <target state="translated">지점에서 스레드에 신호를 보냅니다. 후</target>
        </trans-unit>
        <trans-unit id="c1d3c0d2dc466badb3153f1c538e8469d48ea37b" translate="yes" xml:space="preserve">
          <source>Signaled</source>
          <target state="translated">Signaled</target>
        </trans-unit>
        <trans-unit id="f4677bd5ccad3d56ae38717d7ff6a132e3af99dd" translate="yes" xml:space="preserve">
          <source>Signaled when encountering a premature end of the input text.</source>
          <target state="translated">입력 텍스트가 너무 일찍 끝날 때 신호를 보냅니다.</target>
        </trans-unit>
        <trans-unit id="7b6ddf68636ec2657191aae72cdde36ef7ca8be9" translate="yes" xml:space="preserve">
          <source>Signaled when encountering invalid JSON syntax.</source>
          <target state="translated">잘못된 JSON 구문이 발견되면 신호를 보냅니다.</target>
        </trans-unit>
        <trans-unit id="530ee20f0ab17301792cb5145f1201fc9c1a023a" translate="yes" xml:space="preserve">
          <source>Signaled when encountering unexpected input after the first JSON object parsed.</source>
          <target state="translated">첫 번째 JSON 개체가 구문 분석 된 후 예기치 않은 입력이 발생하면 신호를 보냅니다.</target>
        </trans-unit>
        <trans-unit id="2346a18ea3002ff04eca3a130c7f40e65c56f0c9" translate="yes" xml:space="preserve">
          <source>Signals</source>
          <target state="translated">Signals</target>
        </trans-unit>
        <trans-unit id="36c39e4251a9050104c4eb500ba9007d30df0ed3" translate="yes" xml:space="preserve">
          <source>Similar to string quote characters, except that the syntactic properties of the characters between the delimiters are not suppressed. Only TeX mode uses a paired delimiter presently&amp;mdash;the &amp;lsquo;</source>
          <target state="translated">구분 기호 사이에있는 문자의 구문 특성이 억제되지 않는다는 점을 제외하면 문자열 인용 문자와 유사합니다. 현재 TeX 모드에서만 쌍을 이룬 구분 기호 ( '</target>
        </trans-unit>
        <trans-unit id="3c6b7e55b5739f51ded5d3fa91b040f1b9453c13" translate="yes" xml:space="preserve">
          <source>Similarly old &lt;code&gt;after&lt;/code&gt; advice could modify the returned value by changing &lt;code&gt;ad-return-value&lt;/code&gt;, whereas new &lt;code&gt;:after&lt;/code&gt; advice cannot, so when porting such old &lt;code&gt;after&lt;/code&gt; advice, you&amp;rsquo;ll need to turn it into new &lt;code&gt;:around&lt;/code&gt; or &lt;code&gt;:filter-return&lt;/code&gt; advice instead.</source>
          <target state="translated">마찬가지로 old &lt;code&gt;after&lt;/code&gt; advice는 &lt;code&gt;ad-return-value&lt;/code&gt; value를 변경하여 반환 된 값을 수정할 수있는 반면 new &lt;code&gt;:after&lt;/code&gt; advice는 그렇게 할 수 없으므로, 그런 old &lt;code&gt;after&lt;/code&gt; advice를 포팅 할 때 대신 new &lt;code&gt;:around&lt;/code&gt; 또는 &lt;code&gt;:filter-return&lt;/code&gt; advice 로 바꿔야합니다 . .</target>
        </trans-unit>
        <trans-unit id="570f7ec9a2e1a0e6ce72b7677c1ce53f3118b620" translate="yes" xml:space="preserve">
          <source>Similarly, do not write an idle timer function that sets up another idle timer (including the same idle timer) with &lt;var&gt;secs&lt;/var&gt; argument less than or equal to the current idleness time. Such a timer will run almost immediately, and continue running again and again, instead of waiting for the next time Emacs becomes idle. The correct approach is to reschedule with an appropriate increment of the current value of the idleness time, as described below.</source>
          <target state="translated">마찬가지로 현재 유휴 시간보다 작거나 같은 &lt;var&gt;secs&lt;/var&gt; 인수를 사용 하여 다른 유휴 타이머 (동일한 유휴 타이머 포함)를 설정하는 유휴 타이머 함수를 작성하지 마십시오 . 이러한 타이머는 거의 즉시 실행되며 다음에 Emacs가 유휴 상태가 될 때까지 기다리는 대신 계속해서 계속 실행됩니다. 올바른 접근 방식은 아래에 설명 된대로 유휴 시간의 현재 값을 적절하게 증분하여 일정을 변경하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="59b654a5f60957493fe6130fb256c21bd55fd8ed" translate="yes" xml:space="preserve">
          <source>Similarly, if you want to trace the execution of the function named &lt;code&gt;display-buffer&lt;/code&gt;, you could use:</source>
          <target state="translated">마찬가지로 &lt;code&gt;display-buffer&lt;/code&gt; 라는 함수의 실행을 추적하려면 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="00189ce6f88500461b957045cb1fbfacb6303344" translate="yes" xml:space="preserve">
          <source>Similarly, the &lt;code&gt;mirroring&lt;/code&gt; property is used to display the appropriate mirrored character in the reordered text. Lisp programs can affect the mirrored display by changing this property. Again, any such changes affect all of Emacs display.</source>
          <target state="translated">마찬가지로, &lt;code&gt;mirroring&lt;/code&gt; 속성은 재정렬 된 텍스트에서 적절한 미러링 된 문자를 표시하는 데 사용됩니다. Lisp 프로그램은이 속성을 변경하여 미러링 된 디스플레이에 영향을 줄 수 있습니다. 다시 말하지만, 이러한 변경 사항은 모든 Emacs 디스플레이에 영향을 미칩니다.</target>
        </trans-unit>
        <trans-unit id="1376f4664c5fed679e0c56df5423e84799c09d71" translate="yes" xml:space="preserve">
          <source>Similarly, the mutex must be held before notifying the condition. The typical, and best, approach is to acquire the mutex, make the changes associated with this condition, and then notify it:</source>
          <target state="translated">마찬가지로 조건을 알리기 전에 뮤텍스를 보유해야합니다. 일반적이고 가장 좋은 방법은 뮤텍스를 획득하고이 조건과 관련된 변경을 수행 한 다음이를 알리는 것입니다.</target>
        </trans-unit>
        <trans-unit id="f320538e9f8c4bb0866fc13950029ccdcbbe2313" translate="yes" xml:space="preserve">
          <source>Similarly, the three-element list &lt;code&gt;(rose violet buttercup)&lt;/code&gt; is equivalent to &lt;code&gt;(rose . (violet . (buttercup)))&lt;/code&gt;. It looks like this:</source>
          <target state="translated">마찬가지로, 요소가 3 개인 목록 &lt;code&gt;(rose violet buttercup)&lt;/code&gt; 은 &lt;code&gt;(rose . (violet . (buttercup)))&lt;/code&gt; 합니다. 다음과 같이 보입니다.</target>
        </trans-unit>
        <trans-unit id="7960a5fbe36f57680cdc2d50caa76a5950902175" translate="yes" xml:space="preserve">
          <source>Similarly, you can have alists with more values associated with each key, using variations of this trick:</source>
          <target state="translated">마찬가지로,이 트릭의 변형을 사용하여 각 키와 관련된 더 많은 값이있는 목록을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="76faf73d39a8fbef3bf4e7a0e9e666c649c96449" translate="yes" xml:space="preserve">
          <source>Similarly, you should document the additions in the Emacs manual.</source>
          <target state="translated">마찬가지로 Emacs 매뉴얼에 추가 된 내용을 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="b6e7e5db4fd90213a96db3efca237fd49a5f2076" translate="yes" xml:space="preserve">
          <source>Simple Match Data Access</source>
          <target state="translated">단순 일치 데이터 액세스</target>
        </trans-unit>
        <trans-unit id="de80c0f45593a6c934a366105caaa1f6d28cb4bc" translate="yes" xml:space="preserve">
          <source>Simple Menu Items</source>
          <target state="translated">간단한 메뉴 항목</target>
        </trans-unit>
        <trans-unit id="f51fc86367e0a52ca67b77bcba192b6e142f3c10" translate="yes" xml:space="preserve">
          <source>Simple Minded Indentation Engine</source>
          <target state="translated">단순한 들여 쓰기 엔진</target>
        </trans-unit>
        <trans-unit id="b7c4ee84c7494dc0b5a61967837078512ea0e072" translate="yes" xml:space="preserve">
          <source>Simple Packages</source>
          <target state="translated">간단한 패키지</target>
        </trans-unit>
        <trans-unit id="27fadf337e8aabcf474835df19127d2b3d7a70f4" translate="yes" xml:space="preserve">
          <source>Simple Types</source>
          <target state="translated">간단한 유형</target>
        </trans-unit>
        <trans-unit id="da6f6d802878cccd5d6588d599fdf710219e456d" translate="yes" xml:space="preserve">
          <source>Simple accessors:</source>
          <target state="translated">간단한 접근 자 :</target>
        </trans-unit>
        <trans-unit id="8760ec82a2bbd4126f64b59d3be93bcf69768b7d" translate="yes" xml:space="preserve">
          <source>Simple customization types: sexp, integer, etc.</source>
          <target state="translated">간단한 사용자 정의 유형 : sexp, 정수 등</target>
        </trans-unit>
        <trans-unit id="82f21951d43bb4b1d165bd49144935c1fac9d423" translate="yes" xml:space="preserve">
          <source>Simply changing the buffer text or moving point does not update the value that &lt;code&gt;window-end&lt;/code&gt; returns. The value is updated only when Emacs redisplays and redisplay completes without being preempted.</source>
          <target state="translated">단순히 버퍼 텍스트 나 이동 지점을 변경해도 &lt;code&gt;window-end&lt;/code&gt; 반환 하는 값은 업데이트되지 않습니다 . 이 값은 Emacs가 다시 표시되고 다시 표시가 선점되지 않고 완료 될 때만 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="3a0a6d9e52297b2db5931d353b457ea60c992ca2" translate="yes" xml:space="preserve">
          <source>Simply deferring all operations to the usual primitives does not work. For instance, if the file name handler applies to &lt;code&gt;file-exists-p&lt;/code&gt;, then it must handle &lt;code&gt;load&lt;/code&gt; itself, because the usual &lt;code&gt;load&lt;/code&gt; code won&amp;rsquo;t work properly in that case. However, if the handler uses the &lt;code&gt;operations&lt;/code&gt; property to say it doesn&amp;rsquo;t handle &lt;code&gt;file-exists-p&lt;/code&gt;, then it need not handle &lt;code&gt;load&lt;/code&gt; nontrivially.</source>
          <target state="translated">모든 작업을 일반적인 기본 요소로 연기하는 것만으로는 작동하지 않습니다. 예를 들어 파일 이름 핸들러가 &lt;code&gt;file-exists-p&lt;/code&gt; 에 적용되는 경우 일반적인 &lt;code&gt;load&lt;/code&gt; 코드가 제대로 작동하지 않으므로 &lt;code&gt;load&lt;/code&gt; 자체 를 처리해야합니다 . 그러나 핸들러가 &lt;code&gt;operations&lt;/code&gt; 속성을 사용하여 &lt;code&gt;file-exists-p&lt;/code&gt; 를 처리하지 않는다고 말하면 &lt;code&gt;load&lt;/code&gt; 사소하게 처리 할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="6f9d95c7b050687559b692ab8c1364b9fd64a0ed" translate="yes" xml:space="preserve">
          <source>Simply passing a buffer as input means the whole buffer should be used.</source>
          <target state="translated">단순히 버퍼를 입력으로 전달하면 전체 버퍼를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="13a5e2a68347c8bb25748498b1345cbfcbb263b9" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;buffer-list-update-hook&lt;/code&gt; is also run by functions that are not related to window management, it will usually make sense to save the value of the selected window somewhere and compare it with the value of &lt;code&gt;selected-window&lt;/code&gt; while running that hook. Also, to avoid false positives when using &lt;code&gt;buffer-list-update-hook&lt;/code&gt;, it is good practice that every &lt;code&gt;select-window&lt;/code&gt; call supposed to select a window only temporarily passes a non-&lt;code&gt;nil&lt;/code&gt;&lt;var&gt;norecord&lt;/var&gt; argument. If possible, the macro &lt;code&gt;with-selected-window&lt;/code&gt; (see below) should be used in such cases.</source>
          <target state="translated">이후 &lt;code&gt;buffer-list-update-hook&lt;/code&gt; 또한 윈도우 관리 관련되지 않은 기능에 의해 운영되고, 보통 의미가 선택한 창 곳의 값을 저장하고의 값과 비교하는 것 &lt;code&gt;selected-window&lt;/code&gt; 그 훅을 실행하는 동안. 또한 &lt;code&gt;buffer-list-update-hook&lt;/code&gt; 을 사용할 때 잘못된 긍정을 방지 &lt;code&gt;select-window&lt;/code&gt; 을 선택해야하는 모든 선택 창 호출이 일시적으로 &lt;code&gt;nil&lt;/code&gt; 이 아닌 &lt;var&gt;norecord&lt;/var&gt; 인수 만 전달하는 것이 좋습니다 . 가능하면 &lt;code&gt;with-selected-window&lt;/code&gt; 있는 매크로 (아래 참조)를 이러한 경우에 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="92ee60b63d11f218f9962208ad2d4380be74d519" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;dired&lt;/code&gt; buffers have no fixed names, we use a special function &lt;code&gt;dired-default-directory-on-left&lt;/code&gt; in order to display a lean directory buffer on the left side of the frame.</source>
          <target state="translated">&lt;code&gt;dired&lt;/code&gt; 버퍼에는 고정 된 이름이 없기 때문에 프레임 왼쪽에 린 디렉토리 버퍼를 표시하기 위해 특수 함수 &lt;code&gt;dired-default-directory-on-left&lt;/code&gt; 를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="63ef26146411f76047b5cc3557affb4ccf181689" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;eval&lt;/code&gt; is a function, the argument expression that appears in a call to &lt;code&gt;eval&lt;/code&gt; is evaluated twice: once as preparation before &lt;code&gt;eval&lt;/code&gt; is called, and again by the &lt;code&gt;eval&lt;/code&gt; function itself. Here is an example:</source>
          <target state="translated">이후 &lt;code&gt;eval&lt;/code&gt; 함수를 호출에 나타나는지 인수 식입니다 &lt;code&gt;eval&lt;/code&gt; 하기 전에 한 번 준비하기 : 두 번 평가 &lt;code&gt;eval&lt;/code&gt; 에 의해 다시 호출하고, &lt;code&gt;eval&lt;/code&gt; 기능 자체. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c93db3a967c5056373b116f539b216a4a8e6dbd7" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;format&lt;/code&gt; interprets &amp;lsquo;</source>
          <target state="translated">이후 &lt;code&gt;format&lt;/code&gt; 해석 '</target>
        </trans-unit>
        <trans-unit id="7e22214d3e3c5ab4e19ad2988c9ed142fb2ffbd8" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;funcall&lt;/code&gt; is a function, all of its arguments, including &lt;var&gt;function&lt;/var&gt;, are evaluated before &lt;code&gt;funcall&lt;/code&gt; is called. This means that you can use any expression to obtain the function to be called. It also means that &lt;code&gt;funcall&lt;/code&gt; does not see the expressions you write for the &lt;var&gt;arguments&lt;/var&gt;, only their values. These values are &lt;em&gt;not&lt;/em&gt; evaluated a second time in the act of calling &lt;var&gt;function&lt;/var&gt;; the operation of &lt;code&gt;funcall&lt;/code&gt; is like the normal procedure for calling a function, once its arguments have already been evaluated.</source>
          <target state="translated">이후 &lt;code&gt;funcall&lt;/code&gt; 이 함수를 포함하여 인수의 모든 &lt;var&gt;function&lt;/var&gt; 하기 전에, 평가 &lt;code&gt;funcall&lt;/code&gt; 가 호출된다. 이것은 호출 할 함수를 얻기 위해 모든 표현식을 사용할 수 있음을 의미합니다. 또한 &lt;code&gt;funcall&lt;/code&gt; 은 &lt;var&gt;arguments&lt;/var&gt; 대해 작성한 표현식이 아니라 값만 볼 수 있음을 의미 합니다. 이 값은 &lt;var&gt;function&lt;/var&gt; 를 호출 할 때 두 번째로 평가 &lt;em&gt;되지 않습니다&lt;/em&gt; . &lt;code&gt;funcall&lt;/code&gt; 의 작업은 인수가 이미 평가되면 함수를 호출하는 일반적인 절차와 같습니다.</target>
        </trans-unit>
        <trans-unit id="fbcef7b265e1eba9db5292139c1a21015de6846d" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;rx&lt;/code&gt; regexps are just S-expressions, they can be formatted and commented as such.</source>
          <target state="translated">&lt;code&gt;rx&lt;/code&gt; regexp는 S- 표현식 이기 때문에 형식을 지정하고 주석을 달 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="772563e1f9a2cbc89210977445f0f64123f4a087" translate="yes" xml:space="preserve">
          <source>Since all global names are in the same name space, all the global variables, constants, and functions that are part of the mode should have names that start with the major mode name (or with an abbreviation of it if the name is long). See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-Conventions.html#Coding-Conventions&quot;&gt;Coding Conventions&lt;/a&gt;.</source>
          <target state="translated">모든 전역 이름이 동일한 이름 공간에 있기 때문에 모드의 일부인 모든 전역 변수, 상수 및 함수는 주 모드 이름으로 시작하는 이름을 가져야합니다 (또는 이름이 긴 경우 약어로 시작). &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-Conventions.html#Coding-Conventions&quot;&gt;코딩 규칙을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f085ca3b122b134d34112518fd0521f05e5870e8" translate="yes" xml:space="preserve">
          <source>Since all these libraries emit different events on notified file changes, there is the Emacs library &lt;code&gt;filenotify&lt;/code&gt; which provides a unified interface. Lisp programs that want to receive file notifications should always use this library in preference to the native ones.</source>
          <target state="translated">이러한 모든 라이브러리는 통지 된 파일 변경에 대해 서로 다른 이벤트를 방출하기 때문에 통합 인터페이스를 제공하는 Emacs 라이브러리 &lt;code&gt;filenotify&lt;/code&gt; 가 있습니다. 파일 알림을 수신하려는 Lisp 프로그램은 항상 기본 라이브러리보다이 라이브러리를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="4e3c2fb4931447dc0ed15e555e8a5ec4487982d0" translate="yes" xml:space="preserve">
          <source>Since both return points have tags that match the &lt;code&gt;throw&lt;/code&gt;, it goes to the inner one, the one established in &lt;code&gt;catch2&lt;/code&gt;. Therefore, &lt;code&gt;catch2&lt;/code&gt; returns normally with value &lt;code&gt;yes&lt;/code&gt;, and this value is printed. Finally the second body form in the outer &lt;code&gt;catch&lt;/code&gt;, which is &lt;code&gt;'no&lt;/code&gt;, is evaluated and returned from the outer &lt;code&gt;catch&lt;/code&gt;.</source>
          <target state="translated">두 반환 지점 모두 &lt;code&gt;throw&lt;/code&gt; 와 일치하는 태그가 &lt;code&gt;catch2&lt;/code&gt; 설정된 내부 지점으로 이동 합니다. 따라서 &lt;code&gt;catch2&lt;/code&gt; 는 일반적으로 &lt;code&gt;yes&lt;/code&gt; 값을 반환 하고이 값이 인쇄됩니다. 마지막으로, 외부에서 제 2 몸체 형태 &lt;code&gt;catch&lt;/code&gt; 하고, &lt;code&gt;'no&lt;/code&gt; 평가 외측에서 반환 &lt;code&gt;catch&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e166c3fed4e20535c2e63114156a588007834869" translate="yes" xml:space="preserve">
          <source>Since changing properties counts as modifying the buffer, it is not possible to remove a &lt;code&gt;read-only&lt;/code&gt; property unless you know the special trick: bind &lt;code&gt;inhibit-read-only&lt;/code&gt; to a non-&lt;code&gt;nil&lt;/code&gt; value and then remove the property. See &lt;a href=&quot;read-only-buffers#Read-Only-Buffers&quot;&gt;Read Only Buffers&lt;/a&gt;.</source>
          <target state="translated">속성 변경은 버퍼 수정으로 간주되기 때문에 특별한 트릭을 알지 못하면 &lt;code&gt;read-only&lt;/code&gt; 속성 을 제거 할 수 없습니다 . &lt;code&gt;inhibit-read-only&lt;/code&gt; 을 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값에 바인딩 한 다음 속성을 제거합니다. &lt;a href=&quot;read-only-buffers#Read-Only-Buffers&quot;&gt;읽기 전용 버퍼를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ec7b3e492c123b2e1384acb2a2a30b166bbd7e3f" translate="yes" xml:space="preserve">
          <source>Since characters are really integers, the printed representation of a character is a decimal number. This is also a possible read syntax for a character, but writing characters that way in Lisp programs is not clear programming. You should &lt;em&gt;always&lt;/em&gt; use the special read syntax formats that Emacs Lisp provides for characters. These syntax formats start with a question mark.</source>
          <target state="translated">문자는 실제로 정수이기 때문에 문자의 인쇄 된 표현은 10 진수입니다. 이것은 또한 문자에 대한 가능한 읽기 구문이지만 Lisp 프로그램에서 이러한 방식으로 문자를 작성하는 것은 명확한 프로그래밍이 아닙니다. 당신은해야한다 &lt;em&gt;항상&lt;/em&gt; 이맥스 리스프가 문자를 제공하는 특별한 읽기 구문 형식을 사용합니다. 이러한 구문 형식은 물음표로 시작합니다.</target>
        </trans-unit>
        <trans-unit id="13de05d3bb8aca0bc14c0beae9561ec8d1f04082" translate="yes" xml:space="preserve">
          <source>Since child frames can be arbitrarily nested, a frame can be both a child and a parent frame. Also, the relative roles of child and parent frame may be reversed at any time (though it&amp;rsquo;s usually a good idea to keep the size of a child frame sufficiently smaller than that of its parent). An error will be signaled for the attempt to make a frame an ancestor of itself.</source>
          <target state="translated">자식 프레임은 임의로 중첩 될 수 있으므로 프레임은 자식 및 부모 프레임이 될 수 있습니다. 또한 자식 프레임과 부모 프레임의 상대적 역할은 언제든지 바뀔 수 있습니다 (일반적으로 자식 프레임의 크기를 부모 프레임보다 충분히 작게 유지하는 것이 좋습니다). 프레임을 자신의 조상으로 만들려고하면 오류가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="95e11f373971a6e38b4a599cf18ed84141525d37" translate="yes" xml:space="preserve">
          <source>Since custom types are implemented as widgets, the way to define a new customize type is to define a new widget. We are not going to describe the widget interface here in details, see &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/widget/index.html#Top&quot;&gt;Introduction&lt;/a&gt; in</source>
          <target state="translated">사용자 정의 유형은 위젯으로 구현되므로 새 사용자 정의 유형을 정의하는 방법은 새 위젯을 정의하는 것입니다. 우리는 세부 사항을 여기에 위젯 인터페이스를 설명 참조하지 않을 &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/widget/index.html#Top&quot;&gt;소개&lt;/a&gt; 에</target>
        </trans-unit>
        <trans-unit id="b9be2d58b08dba264f2d36e1b5f4a61bd71af337" translate="yes" xml:space="preserve">
          <source>Since each buffer has its own current syntax table, we should make that more precise: &lt;code&gt;with-syntax-table&lt;/code&gt; temporarily alters the current syntax table of whichever buffer is current at the time the macro execution starts. Other buffers are not affected.</source>
          <target state="translated">각 버퍼에는 자체 현재 구문 테이블이 있으므로 더 정확하게 만들어야합니다. &lt;code&gt;with-syntax-table&lt;/code&gt; 은 매크로 실행이 시작될 때 현재 버퍼의 현재 구문 테이블을 일시적으로 변경합니다. 다른 버퍼는 영향을받지 않습니다.</target>
        </trans-unit>
        <trans-unit id="85e204be2f37edb7779f088258d4a821ac19e3b8" translate="yes" xml:space="preserve">
          <source>Since every module function must accept the pointer to the environment as its first argument, the call to &lt;code&gt;make_function&lt;/code&gt; could be made from any module function, but you will normally want to do that from the module initialization function, so that all the module functions are known to Emacs once the module is loaded.</source>
          <target state="translated">모든 모듈 함수는 환경에 대한 포인터를 첫 번째 인수로 받아 들여야하므로 모든 모듈 함수에서 &lt;code&gt;make_function&lt;/code&gt; 을 호출 할 수 있지만 일반적으로 모듈 초기화 함수에서이를 수행하여 모든 모듈 함수를 알 수 있습니다. 모듈이로드되면 Emacs로.</target>
        </trans-unit>
        <trans-unit id="4f333c71d6574f90e8e7b09e62db9d0e3fe94a7d" translate="yes" xml:space="preserve">
          <source>Since it is impossible to change the length of an existing string, it is an error if &lt;var&gt;obj&lt;/var&gt; doesn&amp;rsquo;t fit within &lt;var&gt;string&lt;/var&gt;&amp;rsquo;s actual length, or if any new character requires a different number of bytes from the character currently present at that point in &lt;var&gt;string&lt;/var&gt;.</source>
          <target state="translated">기존 문자열의 길이를 변경할 수 없기 때문에 &lt;var&gt;obj&lt;/var&gt; 가 &lt;var&gt;string&lt;/var&gt; 의 실제 길이에 맞지 않거나 새 문자가 현재 해당 지점에있는 문자와 다른 바이트 수를 필요로하는 경우 오류 입니다. &lt;var&gt;string&lt;/var&gt; .</target>
        </trans-unit>
        <trans-unit id="4f586dd4503bd64ff45ff1bc10739d047e841f5e" translate="yes" xml:space="preserve">
          <source>Since more than one overlay can specify a property value for the same character, Emacs lets you specify a priority value of each overlay. The priority value is used to decide which of the overlapping overlays will &amp;ldquo;win&amp;rdquo;.</source>
          <target state="translated">둘 이상의 오버레이가 동일한 문자에 대한 속성 값을 지정할 수 있기 때문에 Emacs에서는 각 오버레이의 우선 순위 값을 지정할 수 있습니다. 우선 순위 값은 겹치는 오버레이 중 어떤 것이 &quot;승리&quot;할지 결정하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c0a8d969d3a6f5a17d19a4d1a498117b4045516c" translate="yes" xml:space="preserve">
          <source>Since not all characters have the same width, these functions let you check the width of a character. See &lt;a href=&quot;primitive-indent#Primitive-Indent&quot;&gt;Primitive Indent&lt;/a&gt;, and &lt;a href=&quot;screen-lines#Screen-Lines&quot;&gt;Screen Lines&lt;/a&gt;, for related functions.</source>
          <target state="translated">모든 문자의 너비가 같지는 않기 때문에 이러한 함수를 사용하여 문자의 너비를 확인할 수 있습니다. 관련 함수는 &lt;a href=&quot;primitive-indent#Primitive-Indent&quot;&gt;Primitive Indent&lt;/a&gt; 및 &lt;a href=&quot;screen-lines#Screen-Lines&quot;&gt;Screen Lines를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f9d83b348a0c39f0900ce1497ea72608f5b3cfc2" translate="yes" xml:space="preserve">
          <source>Since strings are arrays, and therefore sequences as well, you can operate on them with the general array and sequence functions documented in &lt;a href=&quot;sequences-arrays-vectors#Sequences-Arrays-Vectors&quot;&gt;Sequences Arrays Vectors&lt;/a&gt;. For example, you can access individual characters in a string using the function &lt;code&gt;aref&lt;/code&gt; (see &lt;a href=&quot;array-functions#Array-Functions&quot;&gt;Array Functions&lt;/a&gt;).</source>
          <target state="translated">문자열은 배열이므로 시퀀스도 마찬가지이므로 시퀀스 &lt;a href=&quot;sequences-arrays-vectors#Sequences-Arrays-Vectors&quot;&gt;배열 벡터에&lt;/a&gt; 문서화 된 일반 배열 및 시퀀스 함수를 사용하여 작업 할 수 있습니다 . 예를 들어 &lt;code&gt;aref&lt;/code&gt; 함수를 사용하여 문자열의 개별 문자에 액세스 할 수 있습니다 ( &lt;a href=&quot;array-functions#Array-Functions&quot;&gt;배열 함수&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="4b885ecac6d7733e34eec9eb2eb8b53065ef6de1" translate="yes" xml:space="preserve">
          <source>Since text properties are considered part of the contents of the buffer (or string), and can affect how a buffer looks on the screen, any change in buffer text properties marks the buffer as modified. Buffer text property changes are undoable also (see &lt;a href=&quot;undo#Undo&quot;&gt;Undo&lt;/a&gt;). Positions in a string start from 0, whereas positions in a buffer start from 1.</source>
          <target state="translated">Since text properties are considered part of the contents of the buffer (or string), and can affect how a buffer looks on the screen, any change in buffer text properties marks the buffer as modified. Buffer text property changes are undoable also (see &lt;a href=&quot;undo#Undo&quot;&gt;Undo&lt;/a&gt;). Positions in a string start from 0, whereas positions in a buffer start from 1.</target>
        </trans-unit>
        <trans-unit id="28cf986e190b849079413367cd73edc4cd79bb63" translate="yes" xml:space="preserve">
          <source>Since the definition is global, it is recommended to give &lt;var&gt;name&lt;/var&gt; a package prefix to avoid name clashes with definitions elsewhere, as is usual when naming non-local variables and functions.</source>
          <target state="translated">Since the definition is global, it is recommended to give &lt;var&gt;name&lt;/var&gt; a package prefix to avoid name clashes with definitions elsewhere, as is usual when naming non-local variables and functions.</target>
        </trans-unit>
        <trans-unit id="b3f7378c0533b45ea3979efdd50e4a843296ca21" translate="yes" xml:space="preserve">
          <source>Since the expansion is evaluated in the normal manner, it may contain calls to other macros. It may even be a call to the same macro, though this is unusual.</source>
          <target state="translated">Since the expansion is evaluated in the normal manner, it may contain calls to other macros. It may even be a call to the same macro, though this is unusual.</target>
        </trans-unit>
        <trans-unit id="d8d5590000c54c57a9e753c1135b64075fed36b1" translate="yes" xml:space="preserve">
          <source>Since the last argument of &lt;code&gt;nconc&lt;/code&gt; is not itself modified, it is reasonable to use a constant list, such as &lt;code&gt;'(4 5)&lt;/code&gt;, as in the above example. For the same reason, the last argument need not be a list:</source>
          <target state="translated">Since the last argument of &lt;code&gt;nconc&lt;/code&gt; is not itself modified, it is reasonable to use a constant list, such as &lt;code&gt;'(4 5)&lt;/code&gt; , as in the above example. For the same reason, the last argument need not be a list:</target>
        </trans-unit>
        <trans-unit id="e2020888433fd9777649c7ecd8ff7671cd2ec816" translate="yes" xml:space="preserve">
          <source>Since the outer size of a frame (see &lt;a href=&quot;frame-geometry#Frame-Geometry&quot;&gt;Frame Geometry&lt;/a&gt;) is usually unavailable before a frame has been made visible, it is generally not advisable to use floating-point values when creating decorated frames. Floating-point values are more suited for ensuring that an (undecorated) child frame is positioned nicely within the area of its parent frame.</source>
          <target state="translated">Since the outer size of a frame (see &lt;a href=&quot;frame-geometry#Frame-Geometry&quot;&gt;Frame Geometry&lt;/a&gt;) is usually unavailable before a frame has been made visible, it is generally not advisable to use floating-point values when creating decorated frames. Floating-point values are more suited for ensuring that an (undecorated) child frame is positioned nicely within the area of its parent frame.</target>
        </trans-unit>
        <trans-unit id="91cdedef1610817a9e177cdc216f72f459be496a" translate="yes" xml:space="preserve">
          <source>Since the outer size of a frame is usually unavailable before a frame has been made visible, it is generally not advisable to use floating-point values when creating decorated frames. Floating-point values are more suited to ensure that a child frame always fits within the area of its parent frame as, for example, when customizing &lt;code&gt;display-buffer-alist&lt;/code&gt; (see &lt;a href=&quot;choosing-window#Choosing-Window&quot;&gt;Choosing Window&lt;/a&gt;) via &lt;code&gt;display-buffer-in-child-frame&lt;/code&gt;.</source>
          <target state="translated">Since the outer size of a frame is usually unavailable before a frame has been made visible, it is generally not advisable to use floating-point values when creating decorated frames. Floating-point values are more suited to ensure that a child frame always fits within the area of its parent frame as, for example, when customizing &lt;code&gt;display-buffer-alist&lt;/code&gt; (see &lt;a href=&quot;choosing-window#Choosing-Window&quot;&gt;Choosing Window&lt;/a&gt;) via &lt;code&gt;display-buffer-in-child-frame&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="21fcbc26870093593373de8c390bd4f87bfe85e7" translate="yes" xml:space="preserve">
          <source>Since this function is called after every buffer change, it should be reasonably fast.</source>
          <target state="translated">Since this function is called after every buffer change, it should be reasonably fast.</target>
        </trans-unit>
        <trans-unit id="f887d5fc58716f9a324461a5392abbedbe13a42b" translate="yes" xml:space="preserve">
          <source>Since this function modifies &lt;var&gt;keymap&lt;/var&gt;, you would normally use it on a newly created keymap. Operating on an existing keymap that is used for some other purpose is likely to cause trouble; for example, suppressing &lt;code&gt;global-map&lt;/code&gt; would make it impossible to use most of Emacs.</source>
          <target state="translated">Since this function modifies &lt;var&gt;keymap&lt;/var&gt; , you would normally use it on a newly created keymap. Operating on an existing keymap that is used for some other purpose is likely to cause trouble; for example, suppressing &lt;code&gt;global-map&lt;/code&gt; would make it impossible to use most of Emacs.</target>
        </trans-unit>
        <trans-unit id="0932d374cd011e2856ed8fa50ab52066b87ee433" translate="yes" xml:space="preserve">
          <source>Since this variable affects all regular expression search and match constructs, you should bind it temporarily for as small as possible a part of the code.</source>
          <target state="translated">Since this variable affects all regular expression search and match constructs, you should bind it temporarily for as small as possible a part of the code.</target>
        </trans-unit>
        <trans-unit id="c736ac46894856875aa8261d878c173cb7d28089" translate="yes" xml:space="preserve">
          <source>Since timers can run within a Lisp program only when the program calls a primitive that can wait, &lt;code&gt;with-timeout&lt;/code&gt; cannot stop executing &lt;var&gt;body&lt;/var&gt; while it is in the midst of a computation&amp;mdash;only when it calls one of those primitives. So use &lt;code&gt;with-timeout&lt;/code&gt; only with a &lt;var&gt;body&lt;/var&gt; that waits for input, not one that does a long computation.</source>
          <target state="translated">Since timers can run within a Lisp program only when the program calls a primitive that can wait, &lt;code&gt;with-timeout&lt;/code&gt; cannot stop executing &lt;var&gt;body&lt;/var&gt; while it is in the midst of a computation&amp;mdash;only when it calls one of those primitives. So use &lt;code&gt;with-timeout&lt;/code&gt; only with a &lt;var&gt;body&lt;/var&gt; that waits for input, not one that does a long computation.</target>
        </trans-unit>
        <trans-unit id="b31e625df282dbd04c3d466612f0d5567888ba0e" translate="yes" xml:space="preserve">
          <source>Since watchpoints are attached to symbols, modification to the objects contained within variables (e.g., by a list modification function see &lt;a href=&quot;modifying-lists#Modifying-Lists&quot;&gt;Modifying Lists&lt;/a&gt;) is not caught by this mechanism.</source>
          <target state="translated">Since watchpoints are attached to symbols, modification to the objects contained within variables (e.g., by a list modification function see &lt;a href=&quot;modifying-lists#Modifying-Lists&quot;&gt;Modifying Lists&lt;/a&gt;) is not caught by this mechanism.</target>
        </trans-unit>
        <trans-unit id="2c12150e2c9c52ded5b7dc3d5c315314ca7ff3a7" translate="yes" xml:space="preserve">
          <source>Since working with such a frame is not very practical, Emacs by default allows for more complex frame layouts controlled by the default values of the frame size and the &lt;code&gt;split-height-threshold&lt;/code&gt; and &lt;code&gt;split-width-threshold&lt;/code&gt; options. Displaying a buffer not yet shown on a frame then either splits the single window on that frame or (re-)uses one of its two windows.</source>
          <target state="translated">Since working with such a frame is not very practical, Emacs by default allows for more complex frame layouts controlled by the default values of the frame size and the &lt;code&gt;split-height-threshold&lt;/code&gt; and &lt;code&gt;split-width-threshold&lt;/code&gt; options. Displaying a buffer not yet shown on a frame then either splits the single window on that frame or (re-)uses one of its two windows.</target>
        </trans-unit>
        <trans-unit id="9ad099019f1901d05bedff87325f0bb06d1d9699" translate="yes" xml:space="preserve">
          <source>Size Parameters</source>
          <target state="translated">Size Parameters</target>
        </trans-unit>
        <trans-unit id="b05d1ff137c9c21e0275987562486facedb229d6" translate="yes" xml:space="preserve">
          <source>Size in bytes of a vector of length 1, including its header.</source>
          <target state="translated">Size in bytes of a vector of length 1, including its header.</target>
        </trans-unit>
        <trans-unit id="6867ffa6c1ab7504879063ed1d2b7fde815b9de4" translate="yes" xml:space="preserve">
          <source>Size of Displayed Text</source>
          <target state="translated">Size of Displayed Text</target>
        </trans-unit>
        <trans-unit id="ff304a31bbb8ec3245293986ab11cd55ab5b63b6" translate="yes" xml:space="preserve">
          <source>Size of carryover in decoding.</source>
          <target state="translated">Size of carryover in decoding.</target>
        </trans-unit>
        <trans-unit id="906e72db3cc062a08f0e15d4b71a5aabea212c1e" translate="yes" xml:space="preserve">
          <source>Size of parts of the frame, and enabling or disabling some parts.</source>
          <target state="translated">Size of parts of the frame, and enabling or disabling some parts.</target>
        </trans-unit>
        <trans-unit id="f9e355f9111e580dcc3d0ac0089a3edc7750e764" translate="yes" xml:space="preserve">
          <source>Skip &lt;var&gt;len&lt;/var&gt; bytes. In packing, this leaves them unchanged, which normally means they remain zero. In unpacking, this means they are ignored.</source>
          <target state="translated">Skip &lt;var&gt;len&lt;/var&gt; bytes. In packing, this leaves them unchanged, which normally means they remain zero. In unpacking, this means they are ignored.</target>
        </trans-unit>
        <trans-unit id="bcf1cadb62133499efb69b6b56f199c1c01e373b" translate="yes" xml:space="preserve">
          <source>Skip the next &amp;lsquo;</source>
          <target state="translated">Skip the next &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="ce5ddee9d1900d669da72bc01df34df096b2dccf" translate="yes" xml:space="preserve">
          <source>Skip to the next multiple of &lt;var&gt;len&lt;/var&gt; bytes.</source>
          <target state="translated">Skip to the next multiple of &lt;var&gt;len&lt;/var&gt; bytes.</target>
        </trans-unit>
        <trans-unit id="8e85762b796a34f7599c9ff78411a794a0f01cd5" translate="yes" xml:space="preserve">
          <source>Skipping Characters</source>
          <target state="translated">Skipping Characters</target>
        </trans-unit>
        <trans-unit id="619ae6d4101eb18b9d246d530e688ac241038aa5" translate="yes" xml:space="preserve">
          <source>Skipping characters belonging to a certain set.</source>
          <target state="translated">Skipping characters belonging to a certain set.</target>
        </trans-unit>
        <trans-unit id="44f24d3a905c86ee5b39bf6a31a53b09ba55d188" translate="yes" xml:space="preserve">
          <source>Snarf-documentation</source>
          <target state="translated">Snarf-documentation</target>
        </trans-unit>
        <trans-unit id="000b309b5cac296cb78a5b9247e0330cfc55d7f9" translate="yes" xml:space="preserve">
          <source>So far we have only observed the default behavior in an uncustomized Emacs session. To see how this behavior can be customized, let&amp;rsquo;s consider the option &lt;code&gt;display-buffer-base-action&lt;/code&gt;. It provides a very coarse customization which conceptually affects the display of &lt;em&gt;any&lt;/em&gt; buffer. It can be used to supplement the actions supplied by &lt;code&gt;display-buffer-fallback-action&lt;/code&gt; by reordering them or by adding actions that are not present there but fit more closely the user&amp;rsquo;s editing practice. However, it can also be used to change the default behavior in a more profound way.</source>
          <target state="translated">So far we have only observed the default behavior in an uncustomized Emacs session. To see how this behavior can be customized, let&amp;rsquo;s consider the option &lt;code&gt;display-buffer-base-action&lt;/code&gt; . It provides a very coarse customization which conceptually affects the display of &lt;em&gt;any&lt;/em&gt; buffer. It can be used to supplement the actions supplied by &lt;code&gt;display-buffer-fallback-action&lt;/code&gt; by reordering them or by adding actions that are not present there but fit more closely the user&amp;rsquo;s editing practice. However, it can also be used to change the default behavior in a more profound way.</target>
        </trans-unit>
        <trans-unit id="4e1ab71036198509a9921a19397b107e66b58e74" translate="yes" xml:space="preserve">
          <source>So far, we have only shown how &lt;em&gt;users&lt;/em&gt; can customize the default behavior of &lt;code&gt;display-buffer&lt;/code&gt;. Let us now see how &lt;em&gt;applications&lt;/em&gt; can change the course of &lt;code&gt;display-buffer&lt;/code&gt;. The canonical way to do that is to use the &lt;var&gt;action&lt;/var&gt; argument of &lt;code&gt;display-buffer&lt;/code&gt; or a function that calls it, like, for example, &lt;code&gt;pop-to-buffer&lt;/code&gt; (see &lt;a href=&quot;switching-buffers#Switching-Buffers&quot;&gt;Switching Buffers&lt;/a&gt;).</source>
          <target state="translated">So far, we have only shown how &lt;em&gt;users&lt;/em&gt; can customize the default behavior of &lt;code&gt;display-buffer&lt;/code&gt; . Let us now see how &lt;em&gt;applications&lt;/em&gt; can change the course of &lt;code&gt;display-buffer&lt;/code&gt; . The canonical way to do that is to use the &lt;var&gt;action&lt;/var&gt; argument of &lt;code&gt;display-buffer&lt;/code&gt; or a function that calls it, like, for example, &lt;code&gt;pop-to-buffer&lt;/code&gt; (see &lt;a href=&quot;switching-buffers#Switching-Buffers&quot;&gt;Switching Buffers&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="307495ded4140eda26a5384157f34d909e939691" translate="yes" xml:space="preserve">
          <source>So the simplest &amp;ldquo;handling&amp;rdquo; of nonlocal exits in module functions is to do nothing special and let the rest of your code to run as if nothing happened. However, this can cause two classes of problems:</source>
          <target state="translated">So the simplest &amp;ldquo;handling&amp;rdquo; of nonlocal exits in module functions is to do nothing special and let the rest of your code to run as if nothing happened. However, this can cause two classes of problems:</target>
        </trans-unit>
        <trans-unit id="3221b675f2d8c4fb6b71c4ae629483eb1d1b91c2" translate="yes" xml:space="preserve">
          <source>Some Lisp objects should never change. For example, the Lisp expression &lt;code&gt;&quot;aaa&quot;&lt;/code&gt; yields a string, but you should not change its contents. And some objects cannot be changed; for example, although you can create a new number by calculating one, Lisp provides no operation to change the value of an existing number.</source>
          <target state="translated">Some Lisp objects should never change. For example, the Lisp expression &lt;code&gt;&quot;aaa&quot;&lt;/code&gt; yields a string, but you should not change its contents. And some objects cannot be changed; for example, although you can create a new number by calculating one, Lisp provides no operation to change the value of an existing number.</target>
        </trans-unit>
        <trans-unit id="ca36429517ec17c6a2e1460316f841107d5af28f" translate="yes" xml:space="preserve">
          <source>Some Lisp programs set the flag explicitly. For example, the function &lt;code&gt;set-visited-file-name&lt;/code&gt; sets the flag to &lt;code&gt;t&lt;/code&gt;, because the text does not match the newly-visited file, even if it is unchanged from the file formerly visited.</source>
          <target state="translated">Some Lisp programs set the flag explicitly. For example, the function &lt;code&gt;set-visited-file-name&lt;/code&gt; sets the flag to &lt;code&gt;t&lt;/code&gt; , because the text does not match the newly-visited file, even if it is unchanged from the file formerly visited.</target>
        </trans-unit>
        <trans-unit id="f5266a9ec69bb526c31abd6b2f1a07f64cfe9494" translate="yes" xml:space="preserve">
          <source>Some Lisp programs therefore try to choose a window at the bottom of the frame, for example, in order to display the buffer in vicinity of the minibuffer window where the user is expected to answer a question related to the new window. For non-input related actions &lt;code&gt;display-buffer-below-selected&lt;/code&gt; might be preferable because the selected window usually already has the user&amp;rsquo;s attention.</source>
          <target state="translated">Some Lisp programs therefore try to choose a window at the bottom of the frame, for example, in order to display the buffer in vicinity of the minibuffer window where the user is expected to answer a question related to the new window. For non-input related actions &lt;code&gt;display-buffer-below-selected&lt;/code&gt; might be preferable because the selected window usually already has the user&amp;rsquo;s attention.</target>
        </trans-unit>
        <trans-unit id="74e4f08b65f5569a2bed97dd6529c638302a22db" translate="yes" xml:space="preserve">
          <source>Some Terms</source>
          <target state="translated">Some Terms</target>
        </trans-unit>
        <trans-unit id="79f226eb13f1c66ad3b6553d7e43501a21df74f5" translate="yes" xml:space="preserve">
          <source>Some X window managers are set up so that just moving the mouse into a window is enough to set the focus there. Usually, there is no need for a Lisp program to know about the focus change until some other kind of input arrives. Emacs generates a focus event only when the user actually types a keyboard key or presses a mouse button in the new frame; just moving the mouse between frames does not generate a focus event.</source>
          <target state="translated">Some X window managers are set up so that just moving the mouse into a window is enough to set the focus there. Usually, there is no need for a Lisp program to know about the focus change until some other kind of input arrives. Emacs generates a focus event only when the user actually types a keyboard key or presses a mouse button in the new frame; just moving the mouse between frames does not generate a focus event.</target>
        </trans-unit>
        <trans-unit id="8701bed8708fb4bc16cb08e8f5235a559a1bf48c" translate="yes" xml:space="preserve">
          <source>Some additional useful information is available from a parser state using these functions:</source>
          <target state="translated">Some additional useful information is available from a parser state using these functions:</target>
        </trans-unit>
        <trans-unit id="77154e30fd2fc7529836a30f66f05ca9cd0be346" translate="yes" xml:space="preserve">
          <source>Some buffers, such as process buffers, can change even when no commands are executing. In these cases, &lt;code&gt;undo-boundary&lt;/code&gt; is normally called periodically by the timer in this variable. Setting this variable to non-&lt;code&gt;nil&lt;/code&gt; prevents this behavior.</source>
          <target state="translated">Some buffers, such as process buffers, can change even when no commands are executing. In these cases, &lt;code&gt;undo-boundary&lt;/code&gt; is normally called periodically by the timer in this variable. Setting this variable to non- &lt;code&gt;nil&lt;/code&gt; prevents this behavior.</target>
        </trans-unit>
        <trans-unit id="9aee7dc0c501e9cac1d5f95516c00eb40ef1d189" translate="yes" xml:space="preserve">
          <source>Some codepoints are left &lt;em&gt;unassigned&lt;/em&gt; by the</source>
          <target state="translated">Some codepoints are left &lt;em&gt;unassigned&lt;/em&gt; by the</target>
        </trans-unit>
        <trans-unit id="403131455d6b96efb1c77b93b5acb83f343d041f" translate="yes" xml:space="preserve">
          <source>Some commands leave the region active after execution in such a way that it interferes with selective undo of that command. To make &lt;code&gt;undo&lt;/code&gt; ignore the active region when invoked immediately after such a command, set the property &lt;code&gt;undo-inhibit-region&lt;/code&gt; of the command&amp;rsquo;s function symbol to a non-nil value. See &lt;a href=&quot;standard-properties#Standard-Properties&quot;&gt;Standard Properties&lt;/a&gt;.</source>
          <target state="translated">Some commands leave the region active after execution in such a way that it interferes with selective undo of that command. To make &lt;code&gt;undo&lt;/code&gt; ignore the active region when invoked immediately after such a command, set the property &lt;code&gt;undo-inhibit-region&lt;/code&gt; of the command&amp;rsquo;s function symbol to a non-nil value. See &lt;a href=&quot;standard-properties#Standard-Properties&quot;&gt;Standard Properties&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8a18a800c283ef773eb1f49b8fc885d67cb65923" translate="yes" xml:space="preserve">
          <source>Some commands set the mark as a side-effect. Commands should do this only if it has a potential use to the user, and never for their own internal purposes. For example, the &lt;code&gt;replace-regexp&lt;/code&gt; command sets the mark to the value of point before doing any replacements, because this enables the user to move back there conveniently after the replace is finished.</source>
          <target state="translated">Some commands set the mark as a side-effect. Commands should do this only if it has a potential use to the user, and never for their own internal purposes. For example, the &lt;code&gt;replace-regexp&lt;/code&gt; command sets the mark to the value of point before doing any replacements, because this enables the user to move back there conveniently after the replace is finished.</target>
        </trans-unit>
        <trans-unit id="bd938b967783ba7f68f2487dee8207d2efd073a9" translate="yes" xml:space="preserve">
          <source>Some commands set this variable during their execution, as a flag for whatever command runs next. In particular, the functions for killing text set &lt;code&gt;this-command&lt;/code&gt; to &lt;code&gt;kill-region&lt;/code&gt; so that any kill commands immediately following will know to append the killed text to the previous kill.</source>
          <target state="translated">Some commands set this variable during their execution, as a flag for whatever command runs next. In particular, the functions for killing text set &lt;code&gt;this-command&lt;/code&gt; to &lt;code&gt;kill-region&lt;/code&gt; so that any kill commands immediately following will know to append the killed text to the previous kill.</target>
        </trans-unit>
        <trans-unit id="746d51de9f5ceffb76a1c0a475dec8f59f15a3c8" translate="yes" xml:space="preserve">
          <source>Some convenience functions are provided to make working with iterators easier:</source>
          <target state="translated">Some convenience functions are provided to make working with iterators easier:</target>
        </trans-unit>
        <trans-unit id="62c5822f4550474071b65797573eb151beb46ba3" translate="yes" xml:space="preserve">
          <source>Some editors that support adding attributes to text in the buffer do so by letting the user specify intervals within the text, and adding the properties to the intervals. Those editors permit the user or the programmer to determine where individual intervals start and end. We deliberately provided a different sort of interface in Emacs Lisp to avoid certain paradoxical behavior associated with text modification.</source>
          <target state="translated">Some editors that support adding attributes to text in the buffer do so by letting the user specify intervals within the text, and adding the properties to the intervals. Those editors permit the user or the programmer to determine where individual intervals start and end. We deliberately provided a different sort of interface in Emacs Lisp to avoid certain paradoxical behavior associated with text modification.</target>
        </trans-unit>
        <trans-unit id="79c3f7e89010e67e09a67704f80df4ad4eba33ec" translate="yes" xml:space="preserve">
          <source>Some examples describe modifications to the contents of a buffer, by showing the before and after versions of the text. These examples show the contents of the buffer in question between two lines of dashes containing the buffer name. In addition, &amp;lsquo;</source>
          <target state="translated">Some examples describe modifications to the contents of a buffer, by showing the before and after versions of the text. These examples show the contents of the buffer in question between two lines of dashes containing the buffer name. In addition, &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="39de3254e8b8a6c1bb1dcf09e215913214388acb" translate="yes" xml:space="preserve">
          <source>Some examples signal errors. This normally displays an error message in the echo area. We show the error message on a line starting with &amp;lsquo;</source>
          <target state="translated">Some examples signal errors. This normally displays an error message in the echo area. We show the error message on a line starting with &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="01706013cfdbcb0fc543d3c97784f3f4c235d630" translate="yes" xml:space="preserve">
          <source>Some examples:</source>
          <target state="translated">몇 가지 예 :</target>
        </trans-unit>
        <trans-unit id="7506e6ee3da054209a0fb13ae83cf54785c54dbe" translate="yes" xml:space="preserve">
          <source>Some file comparison commands use this function so that they can automatically compare a file with its most recent backup.</source>
          <target state="translated">Some file comparison commands use this function so that they can automatically compare a file with its most recent backup.</target>
        </trans-unit>
        <trans-unit id="b035d3c3376401bee651f4578fff32d980a4d464" translate="yes" xml:space="preserve">
          <source>Some file name handlers may not support &lt;code&gt;make-process&lt;/code&gt;. In such cases, this function does nothing and returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">Some file name handlers may not support &lt;code&gt;make-process&lt;/code&gt; . In such cases, this function does nothing and returns &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1649467dc62b6b14d5f17795dc0cf713c0b7891f" translate="yes" xml:space="preserve">
          <source>Some file name handlers may not support &lt;code&gt;start-file-process&lt;/code&gt; (for example the function &lt;code&gt;ange-ftp-hook-function&lt;/code&gt;). In such cases, this function does nothing and returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">Some file name handlers may not support &lt;code&gt;start-file-process&lt;/code&gt; (for example the function &lt;code&gt;ange-ftp-hook-function&lt;/code&gt; ). In such cases, this function does nothing and returns &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0049acf03482228e429585cbfb5f828a9d909ae6" translate="yes" xml:space="preserve">
          <source>Some file name handlers may not support all combinations and forms of the arguments &lt;var&gt;infile&lt;/var&gt;, &lt;var&gt;buffer&lt;/var&gt;, and &lt;var&gt;display&lt;/var&gt;. For example, some file name handlers might behave as if &lt;var&gt;display&lt;/var&gt; were &lt;code&gt;nil&lt;/code&gt;, regardless of the value actually passed. As another example, some file name handlers might not support separating standard output and error output by way of the &lt;var&gt;buffer&lt;/var&gt; argument.</source>
          <target state="translated">Some file name handlers may not support all combinations and forms of the arguments &lt;var&gt;infile&lt;/var&gt; , &lt;var&gt;buffer&lt;/var&gt; , and &lt;var&gt;display&lt;/var&gt; . For example, some file name handlers might behave as if &lt;var&gt;display&lt;/var&gt; were &lt;code&gt;nil&lt;/code&gt; , regardless of the value actually passed. As another example, some file name handlers might not support separating standard output and error output by way of the &lt;var&gt;buffer&lt;/var&gt; argument.</target>
        </trans-unit>
        <trans-unit id="f27719afa575a8c632d10a31bd1ac119c957091c" translate="yes" xml:space="preserve">
          <source>Some file names are relative to a current directory.</source>
          <target state="translated">Some file names are relative to a current directory.</target>
        </trans-unit>
        <trans-unit id="30eba5cb75908d92707da17924674751cc91ccc2" translate="yes" xml:space="preserve">
          <source>Some functions (notably &lt;code&gt;delete-window&lt;/code&gt;, &lt;code&gt;delete-other-windows&lt;/code&gt; and &lt;code&gt;split-window&lt;/code&gt;), may behave specially when the window specified by their &lt;var&gt;window&lt;/var&gt; argument has a parameter whose name is equal to the function&amp;rsquo;s name. You can override such special behavior by binding the following variable to a non-&lt;code&gt;nil&lt;/code&gt; value:</source>
          <target state="translated">Some functions (notably &lt;code&gt;delete-window&lt;/code&gt; , &lt;code&gt;delete-other-windows&lt;/code&gt; and &lt;code&gt;split-window&lt;/code&gt; ), may behave specially when the window specified by their &lt;var&gt;window&lt;/var&gt; argument has a parameter whose name is equal to the function&amp;rsquo;s name. You can override such special behavior by binding the following variable to a non- &lt;code&gt;nil&lt;/code&gt; value:</target>
        </trans-unit>
        <trans-unit id="821351b8bc37763a05e2e9f535a20b160c6496e5" translate="yes" xml:space="preserve">
          <source>Some functions are user-visible &lt;em&gt;commands&lt;/em&gt;, which can be called interactively (usually by a key sequence). It is possible to invoke such a command exactly as though it was called interactively, by using the &lt;code&gt;call-interactively&lt;/code&gt; function. See &lt;a href=&quot;interactive-call#Interactive-Call&quot;&gt;Interactive Call&lt;/a&gt;.</source>
          <target state="translated">Some functions are user-visible &lt;em&gt;commands&lt;/em&gt;, which can be called interactively (usually by a key sequence). It is possible to invoke such a command exactly as though it was called interactively, by using the &lt;code&gt;call-interactively&lt;/code&gt; function. See &lt;a href=&quot;interactive-call#Interactive-Call&quot;&gt;Interactive Call&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b07860a7f84c3c2a12b686e1aeff2769f46c6d5f" translate="yes" xml:space="preserve">
          <source>Some image files can contain more than one image. We say that there are multiple &amp;ldquo;frames&amp;rdquo; in the image. At present, Emacs supports multiple frames for GIF, TIFF, and certain ImageMagick formats such as DJVM.</source>
          <target state="translated">Some image files can contain more than one image. We say that there are multiple &amp;ldquo;frames&amp;rdquo; in the image. At present, Emacs supports multiple frames for GIF, TIFF, and certain ImageMagick formats such as DJVM.</target>
        </trans-unit>
        <trans-unit id="3595e9e6a4e9569c512c5c06cd87e7df2c7fb69d" translate="yes" xml:space="preserve">
          <source>Some images contain more than one frame.</source>
          <target state="translated">Some images contain more than one frame.</target>
        </trans-unit>
        <trans-unit id="e60b9658c0c2605f01019352ebf449957e56d29f" translate="yes" xml:space="preserve">
          <source>Some kinds of character alternatives are not the best style even though they have a well-defined meaning in Emacs. They include:</source>
          <target state="translated">Some kinds of character alternatives are not the best style even though they have a well-defined meaning in Emacs. They include:</target>
        </trans-unit>
        <trans-unit id="5f0cac76faeb26baac31aa2b5b127966d275ffc8" translate="yes" xml:space="preserve">
          <source>Some kinds of display specifications specify something to display instead of the text that has the property. These are called &lt;em&gt;replacing&lt;/em&gt; display specifications. Emacs does not allow the user to interactively move point into the middle of buffer text that is replaced in this way.</source>
          <target state="translated">Some kinds of display specifications specify something to display instead of the text that has the property. These are called &lt;em&gt;replacing&lt;/em&gt; display specifications. Emacs does not allow the user to interactively move point into the middle of buffer text that is replaced in this way.</target>
        </trans-unit>
        <trans-unit id="e6ab74872daeb04ccca64045f737003d5dbf1311" translate="yes" xml:space="preserve">
          <source>Some language environments modify the case conversions of</source>
          <target state="translated">Some language environments modify the case conversions of</target>
        </trans-unit>
        <trans-unit id="ac807ee8d2379ebd13a77281f72a32da4cef6814" translate="yes" xml:space="preserve">
          <source>Some major modes customize &lt;code&gt;revert-buffer&lt;/code&gt; by making buffer-local bindings for these variables:</source>
          <target state="translated">Some major modes customize &lt;code&gt;revert-buffer&lt;/code&gt; by making buffer-local bindings for these variables:</target>
        </trans-unit>
        <trans-unit id="ea8020af64cf16be2cd54fa92c83c5cfe0dbcb9a" translate="yes" xml:space="preserve">
          <source>Some major modes need to support embedded regions of text whose syntax belongs to a different major mode. Examples include &lt;em&gt;literate programming&lt;/em&gt; source files that combine documentation and snippets of source code, Yacc/Bison programs that include snippets of Python or JS code, etc. To correctly indent the embedded chunks, the primary mode needs to delegate the indentation to another mode&amp;rsquo;s indentation engine (e.g., call &lt;code&gt;js-indent-line&lt;/code&gt; for JS code or &lt;code&gt;python-indent-line&lt;/code&gt; for Python), while providing it with some context to guide the indentation. Major modes, for their part, should avoid calling &lt;code&gt;widen&lt;/code&gt; in their indentation code and obey &lt;code&gt;prog-first-column&lt;/code&gt;.</source>
          <target state="translated">Some major modes need to support embedded regions of text whose syntax belongs to a different major mode. Examples include &lt;em&gt;literate programming&lt;/em&gt; source files that combine documentation and snippets of source code, Yacc/Bison programs that include snippets of Python or JS code, etc. To correctly indent the embedded chunks, the primary mode needs to delegate the indentation to another mode&amp;rsquo;s indentation engine (e.g., call &lt;code&gt;js-indent-line&lt;/code&gt; for JS code or &lt;code&gt;python-indent-line&lt;/code&gt; for Python), while providing it with some context to guide the indentation. Major modes, for their part, should avoid calling &lt;code&gt;widen&lt;/code&gt; in their indentation code and obey &lt;code&gt;prog-first-column&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="21c105d635e1342bb3eda11282eef07a58bcc18c" translate="yes" xml:space="preserve">
          <source>Some major modes offer three different levels of fontification. You can define multiple levels by using a list of symbols for &lt;var&gt;keywords&lt;/var&gt; in &lt;code&gt;font-lock-defaults&lt;/code&gt;. Each symbol specifies one level of fontification; it is up to the user to choose one of these levels, normally by setting &lt;code&gt;font-lock-maximum-decoration&lt;/code&gt; (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html#Font-Lock&quot;&gt;Font Lock&lt;/a&gt; in</source>
          <target state="translated">Some major modes offer three different levels of fontification. You can define multiple levels by using a list of symbols for &lt;var&gt;keywords&lt;/var&gt; in &lt;code&gt;font-lock-defaults&lt;/code&gt; . Each symbol specifies one level of fontification; it is up to the user to choose one of these levels, normally by setting &lt;code&gt;font-lock-maximum-decoration&lt;/code&gt; (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html#Font-Lock&quot;&gt;Font Lock&lt;/a&gt; in</target>
        </trans-unit>
        <trans-unit id="97d2b770fbdf897915f92e43c0fb73238f56e11e" translate="yes" xml:space="preserve">
          <source>Some major modes offer three different levels of fontification. You can define multiple levels by using a list of symbols for &lt;var&gt;keywords&lt;/var&gt; in &lt;code&gt;font-lock-defaults&lt;/code&gt;. Each symbol specifies one level of fontification; it is up to the user to choose one of these levels, normally by setting &lt;code&gt;font-lock-maximum-decoration&lt;/code&gt; (see &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html#Font-Lock&quot;&gt;Font Lock&lt;/a&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="808993400021c891fd4d2de8ebf442fd98c93191" translate="yes" xml:space="preserve">
          <source>Some major modes such as &lt;code&gt;list-buffers&lt;/code&gt; and &lt;code&gt;occur&lt;/code&gt; construct the buffer text programmatically. The easiest way for them to support Font Lock mode is to specify the faces of text when they insert the text in the buffer.</source>
          <target state="translated">Some major modes such as &lt;code&gt;list-buffers&lt;/code&gt; and &lt;code&gt;occur&lt;/code&gt; construct the buffer text programmatically. The easiest way for them to support Font Lock mode is to specify the faces of text when they insert the text in the buffer.</target>
        </trans-unit>
        <trans-unit id="fb3dfe3d9e5bb3462ebf386ff6482aa43419e8f7" translate="yes" xml:space="preserve">
          <source>Some major modes, such as SES, call functions that are stored in user files. (See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/ses/index.html#Top&quot;&gt;(ses)Top&lt;/a&gt;, for more information on SES.) User files sometimes have poor pedigrees&amp;mdash;you can get a spreadsheet from someone you&amp;rsquo;ve just met, or you can get one through email from someone you&amp;rsquo;ve never met. So it is risky to call a function whose source code is stored in a user file until you have determined that it is safe.</source>
          <target state="translated">Some major modes, such as SES, call functions that are stored in user files. (See &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/ses/index.html#Top&quot;&gt;(ses)Top&lt;/a&gt;, for more information on SES.) User files sometimes have poor pedigrees&amp;mdash;you can get a spreadsheet from someone you&amp;rsquo;ve just met, or you can get one through email from someone you&amp;rsquo;ve never met. So it is risky to call a function whose source code is stored in a user file until you have determined that it is safe.</target>
        </trans-unit>
        <trans-unit id="74b9ecabaa09225167b2400d7fc5cffd14468340" translate="yes" xml:space="preserve">
          <source>Some miscellaneous Edebug commands are described here.</source>
          <target state="translated">Some miscellaneous Edebug commands are described here.</target>
        </trans-unit>
        <trans-unit id="b90ef76321f3efa1c603505619393d87cc01a727" translate="yes" xml:space="preserve">
          <source>Some modes give this variable a non-&lt;code&gt;nil&lt;/code&gt; buffer-local value in particular buffers.</source>
          <target state="translated">Some modes give this variable a non- &lt;code&gt;nil&lt;/code&gt; buffer-local value in particular buffers.</target>
        </trans-unit>
        <trans-unit id="5f656b80e7314e4ae45ace545975e0adabdf6eab" translate="yes" xml:space="preserve">
          <source>Some modes provide specialized support you can use in additional highlighting patterns. See the variables &lt;code&gt;c-font-lock-extra-types&lt;/code&gt;, &lt;code&gt;c++-font-lock-extra-types&lt;/code&gt;, and &lt;code&gt;java-font-lock-extra-types&lt;/code&gt;, for example.</source>
          <target state="translated">Some modes provide specialized support you can use in additional highlighting patterns. See the variables &lt;code&gt;c-font-lock-extra-types&lt;/code&gt; , &lt;code&gt;c++-font-lock-extra-types&lt;/code&gt; , and &lt;code&gt;java-font-lock-extra-types&lt;/code&gt; , for example.</target>
        </trans-unit>
        <trans-unit id="2ca6528ff75cf4ebd0e3a965a0f935cd940d69e6" translate="yes" xml:space="preserve">
          <source>Some objects should not be modified.</source>
          <target state="translated">Some objects should not be modified.</target>
        </trans-unit>
        <trans-unit id="af094d8cf5fd06bfc167a995bf7262080fb1ff00" translate="yes" xml:space="preserve">
          <source>Some of the Emacs printing functions add quoting characters to the output when necessary so that it can be read properly. The quoting characters used are &amp;lsquo;</source>
          <target state="translated">Some of the Emacs printing functions add quoting characters to the output when necessary so that it can be read properly. The quoting characters used are &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="d96c8d910eff4e09132672f51050a8b5ccd15bec" translate="yes" xml:space="preserve">
          <source>Some of the basic faces defined in Emacs are listed below. In addition to these, you might want to make use of the Font Lock faces for syntactic highlighting, if highlighting is not already handled by Font Lock mode, or if some Font Lock faces are not in use. See &lt;a href=&quot;faces-for-font-lock#Faces-for-Font-Lock&quot;&gt;Faces for Font Lock&lt;/a&gt;.</source>
          <target state="translated">Some of the basic faces defined in Emacs are listed below. In addition to these, you might want to make use of the Font Lock faces for syntactic highlighting, if highlighting is not already handled by Font Lock mode, or if some Font Lock faces are not in use. See &lt;a href=&quot;faces-for-font-lock#Faces-for-Font-Lock&quot;&gt;Faces for Font Lock&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="72343b809ebda32362307ac23f7f2063f452bc65" translate="yes" xml:space="preserve">
          <source>Some of the debugger commands operate on the current frame. If a frame starts with a star, that means that exiting that frame will call the debugger again. This is useful for examining the return value of a function.</source>
          <target state="translated">Some of the debugger commands operate on the current frame. If a frame starts with a star, that means that exiting that frame will call the debugger again. This is useful for examining the return value of a function.</target>
        </trans-unit>
        <trans-unit id="804a6cf29ca115648ee7315d6d4a79d4af87b177" translate="yes" xml:space="preserve">
          <source>Some of the display specifications allow inclusion of Lisp forms, which are evaluated at display time. This could be unsafe in certain situations, e.g., when the display specification was generated by some external program/agent. Wrapping a display specification in a list that begins with the special symbol &lt;code&gt;disable-eval&lt;/code&gt;, as in &lt;code&gt;('disable-eval&amp;nbsp;&lt;var&gt;spec&lt;/var&gt;)&lt;/code&gt;, will disable evaluation of any Lisp in &lt;var&gt;spec&lt;/var&gt;, while still supporting all the other display property features.</source>
          <target state="translated">Some of the display specifications allow inclusion of Lisp forms, which are evaluated at display time. This could be unsafe in certain situations, e.g., when the display specification was generated by some external program/agent. Wrapping a display specification in a list that begins with the special symbol &lt;code&gt;disable-eval&lt;/code&gt; , as in &lt;code&gt;('disable-eval&amp;nbsp;&lt;var&gt;spec&lt;/var&gt;)&lt;/code&gt; , will disable evaluation of any Lisp in &lt;var&gt;spec&lt;/var&gt; , while still supporting all the other display property features.</target>
        </trans-unit>
        <trans-unit id="613159ce43c45040036ae19ffa365f192550eea3" translate="yes" xml:space="preserve">
          <source>Some of the fields of &lt;code&gt;struct buffer&lt;/code&gt; are:</source>
          <target state="translated">Some of the fields of &lt;code&gt;struct buffer&lt;/code&gt; are:</target>
        </trans-unit>
        <trans-unit id="e062efacd595110c1477cba3ceb9adc5fbfd9eaf" translate="yes" xml:space="preserve">
          <source>Some of the standard Emacs prefix keys use keymaps that are also found in Lisp variables:</source>
          <target state="translated">Some of the standard Emacs prefix keys use keymaps that are also found in Lisp variables:</target>
        </trans-unit>
        <trans-unit id="c7acb8bab7c32f011dfdacb72639310abaa0f2b0" translate="yes" xml:space="preserve">
          <source>Some of these attributes are meaningful only on certain kinds of displays. If your display cannot handle a certain attribute, the attribute is ignored.</source>
          <target state="translated">Some of these attributes are meaningful only on certain kinds of displays. If your display cannot handle a certain attribute, the attribute is ignored.</target>
        </trans-unit>
        <trans-unit id="589a873de585273e7a1c61ce328cb691679250e8" translate="yes" xml:space="preserve">
          <source>Some operating systems (those without &lt;code&gt;SIGTSTP&lt;/code&gt;, or MS-DOS) do not support suspension of jobs; on these systems, suspension actually creates a new shell temporarily as a subprocess of Emacs. Then you would exit the shell to return to Emacs.</source>
          <target state="translated">Some operating systems (those without &lt;code&gt;SIGTSTP&lt;/code&gt; , or MS-DOS) do not support suspension of jobs; on these systems, suspension actually creates a new shell temporarily as a subprocess of Emacs. Then you would exit the shell to return to Emacs.</target>
        </trans-unit>
        <trans-unit id="4419ffb69d644ea6d729379e6a38f1070c7f218b" translate="yes" xml:space="preserve">
          <source>Some operating systems have limited space for buffered input in a pty. On these systems, Emacs sends an</source>
          <target state="translated">Some operating systems have limited space for buffered input in a pty. On these systems, Emacs sends an</target>
        </trans-unit>
        <trans-unit id="e00f1e2abd8e2565248c544b6840b76cfd25d361" translate="yes" xml:space="preserve">
          <source>Some operations will not trigger a call of window change functions. These include showing another buffer in a minibuffer window or any change of a tooltip window.</source>
          <target state="translated">Some operations will not trigger a call of window change functions. These include showing another buffer in a minibuffer window or any change of a tooltip window.</target>
        </trans-unit>
        <trans-unit id="9ef5fe6774783caa8bb43ef767552f372c9af662" translate="yes" xml:space="preserve">
          <source>Some parameters are only meaningful for frames on certain kinds of display (see &lt;a href=&quot;frames#Frames&quot;&gt;Frames&lt;/a&gt;). If &lt;var&gt;alist&lt;/var&gt; includes parameters that are not meaningful for the &lt;var&gt;frame&lt;/var&gt;&amp;rsquo;s display, this function will change its value in the frame&amp;rsquo;s parameter list, but will otherwise ignore it.</source>
          <target state="translated">Some parameters are only meaningful for frames on certain kinds of display (see &lt;a href=&quot;frames#Frames&quot;&gt;Frames&lt;/a&gt;). If &lt;var&gt;alist&lt;/var&gt; includes parameters that are not meaningful for the &lt;var&gt;frame&lt;/var&gt; &amp;rsquo;s display, this function will change its value in the frame&amp;rsquo;s parameter list, but will otherwise ignore it.</target>
        </trans-unit>
        <trans-unit id="eb59c1c0e5fe25963e088513dfc30b8aa03a29f0" translate="yes" xml:space="preserve">
          <source>Some parts of Emacs require named faces (e.g., the functions documented in &lt;a href=&quot;attribute-functions#Attribute-Functions&quot;&gt;Attribute Functions&lt;/a&gt;). Unless otherwise stated, we will use the term &lt;em&gt;face&lt;/em&gt; to refer only to named faces.</source>
          <target state="translated">Some parts of Emacs require named faces (e.g., the functions documented in &lt;a href=&quot;attribute-functions#Attribute-Functions&quot;&gt;Attribute Functions&lt;/a&gt;). Unless otherwise stated, we will use the term &lt;em&gt;face&lt;/em&gt; to refer only to named faces.</target>
        </trans-unit>
        <trans-unit id="9d9447f3aa8d4923b3219f3f78e83381064bcbe1" translate="yes" xml:space="preserve">
          <source>Some parts of Emacs, including some Dired commands, assume that backup file names end with &amp;lsquo;</source>
          <target state="translated">Some parts of Emacs, including some Dired commands, assume that backup file names end with &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="7e23447863e02fa432da55af33b11fc93a34f030" translate="yes" xml:space="preserve">
          <source>Some people think this use of the word &amp;ldquo;kill&amp;rdquo; is unfortunate, since it refers to operations that specifically &lt;em&gt;do not&lt;/em&gt; destroy the entities killed. This is in sharp contrast to ordinary life, in which death is permanent and killed entities do not come back to life. Therefore, other metaphors have been proposed. For example, the term &amp;ldquo;cut ring&amp;rdquo; makes sense to people who, in pre-computer days, used scissors and paste to cut up and rearrange manuscripts. However, it would be difficult to change the terminology now.</source>
          <target state="translated">Some people think this use of the word &amp;ldquo;kill&amp;rdquo; is unfortunate, since it refers to operations that specifically &lt;em&gt;do not&lt;/em&gt; destroy the entities killed. This is in sharp contrast to ordinary life, in which death is permanent and killed entities do not come back to life. Therefore, other metaphors have been proposed. For example, the term &amp;ldquo;cut ring&amp;rdquo; makes sense to people who, in pre-computer days, used scissors and paste to cut up and rearrange manuscripts. However, it would be difficult to change the terminology now.</target>
        </trans-unit>
        <trans-unit id="900a0a1942564ec5fef2aa11d9bba5ae0ddbb4c8" translate="yes" xml:space="preserve">
          <source>Some primitives have multiple definitions, one per platform (e.g., &lt;code&gt;x-create-frame&lt;/code&gt;). In such cases, rather than writing the same documentation string in each definition, only one definition has the actual documentation. The others have placeholders beginning with &amp;lsquo;</source>
          <target state="translated">Some primitives have multiple definitions, one per platform (e.g., &lt;code&gt;x-create-frame&lt;/code&gt; ). In such cases, rather than writing the same documentation string in each definition, only one definition has the actual documentation. The others have placeholders beginning with &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="19ee3e594145c1e30e422f57b1e29f706042aa9d" translate="yes" xml:space="preserve">
          <source>Some programs need to write temporary files. Here is the usual way to construct a name for such a file:</source>
          <target state="translated">Some programs need to write temporary files. Here is the usual way to construct a name for such a file:</target>
        </trans-unit>
        <trans-unit id="34514367601827bdc54d8478877ceddd72dd975a" translate="yes" xml:space="preserve">
          <source>Some suitable predicates include &lt;code&gt;symbolp&lt;/code&gt;, &lt;code&gt;integerp&lt;/code&gt;, &lt;code&gt;stringp&lt;/code&gt;, &lt;code&gt;vectorp&lt;/code&gt;, and &lt;code&gt;atom&lt;/code&gt;.</source>
          <target state="translated">Some suitable predicates include &lt;code&gt;symbolp&lt;/code&gt; , &lt;code&gt;integerp&lt;/code&gt; , &lt;code&gt;stringp&lt;/code&gt; , &lt;code&gt;vectorp&lt;/code&gt; , and &lt;code&gt;atom&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2393e343d286e6ad787337a5712eb0f57c1d1eed" translate="yes" xml:space="preserve">
          <source>Some systems and display toolkits don&amp;rsquo;t really handle all of these separator types. If you use a type that isn&amp;rsquo;t supported, the menu displays a similar kind of separator that is supported.</source>
          <target state="translated">Some systems and display toolkits don&amp;rsquo;t really handle all of these separator types. If you use a type that isn&amp;rsquo;t supported, the menu displays a similar kind of separator that is supported.</target>
        </trans-unit>
        <trans-unit id="f7e2559178f26c3c030e5e3e8239676524fe9a94" translate="yes" xml:space="preserve">
          <source>Some terminals support a different set of colors for foreground and background. If &lt;var&gt;background-p&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;, that means you are asking whether &lt;var&gt;color&lt;/var&gt; can be used as a background; otherwise you are asking whether it can be used as a foreground.</source>
          <target state="translated">Some terminals support a different set of colors for foreground and background. If &lt;var&gt;background-p&lt;/var&gt; is non- &lt;code&gt;nil&lt;/code&gt; , that means you are asking whether &lt;var&gt;color&lt;/var&gt; can be used as a background; otherwise you are asking whether it can be used as a foreground.</target>
        </trans-unit>
        <trans-unit id="8691d2e5fc3b12ad9435f079b07816ec20b74321" translate="yes" xml:space="preserve">
          <source>Some type symbols do not use any arguments; those are called &lt;em&gt;simple types&lt;/em&gt;. For a simple type, if you do not use any keyword-value pairs, you can omit the parentheses around the type symbol. For example just &lt;code&gt;string&lt;/code&gt; as a customization type is equivalent to &lt;code&gt;(string)&lt;/code&gt;.</source>
          <target state="translated">Some type symbols do not use any arguments; those are called &lt;em&gt;simple types&lt;/em&gt;. For a simple type, if you do not use any keyword-value pairs, you can omit the parentheses around the type symbol. For example just &lt;code&gt;string&lt;/code&gt; as a customization type is equivalent to &lt;code&gt;(string)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="40868cb43ade466153908eeb08f731725514d1c2" translate="yes" xml:space="preserve">
          <source>Some variables are considered &lt;em&gt;risky&lt;/em&gt;. If a variable is risky, it is never entered automatically into &lt;code&gt;safe-local-variable-values&lt;/code&gt;; Emacs always queries before setting a risky variable, unless the user explicitly allows a value by customizing &lt;code&gt;safe-local-variable-values&lt;/code&gt; directly.</source>
          <target state="translated">Some variables are considered &lt;em&gt;risky&lt;/em&gt;. If a variable is risky, it is never entered automatically into &lt;code&gt;safe-local-variable-values&lt;/code&gt; ; Emacs always queries before setting a risky variable, unless the user explicitly allows a value by customizing &lt;code&gt;safe-local-variable-values&lt;/code&gt; directly.</target>
        </trans-unit>
        <trans-unit id="97ee2571778484dd55157b4ca16621ef68f6cf76" translate="yes" xml:space="preserve">
          <source>Some window managers ignore program-specified positions. If you want to be sure the position you specify is not ignored, specify a non-&lt;code&gt;nil&lt;/code&gt; value for the &lt;code&gt;user-position&lt;/code&gt; parameter as in the following example:</source>
          <target state="translated">Some window managers ignore program-specified positions. If you want to be sure the position you specify is not ignored, specify a non- &lt;code&gt;nil&lt;/code&gt; value for the &lt;code&gt;user-position&lt;/code&gt; parameter as in the following example:</target>
        </trans-unit>
        <trans-unit id="c963e456b560d984c389ee390934cb303b37082c" translate="yes" xml:space="preserve">
          <source>Some window managers may refuse to restack windows.</source>
          <target state="translated">Some window managers may refuse to restack windows.</target>
        </trans-unit>
        <trans-unit id="c91bbd20cff61b2c2218cf0bb5a8812d7957dbed" translate="yes" xml:space="preserve">
          <source>Some window managers provide a command to delete a window. These work by sending a special message to the program that operates the window. When Emacs gets one of these commands, it generates a &lt;code&gt;delete-frame&lt;/code&gt; event, whose normal definition is a command that calls the function &lt;code&gt;delete-frame&lt;/code&gt;. See &lt;a href=&quot;misc-events#Misc-Events&quot;&gt;Misc Events&lt;/a&gt;.</source>
          <target state="translated">Some window managers provide a command to delete a window. These work by sending a special message to the program that operates the window. When Emacs gets one of these commands, it generates a &lt;code&gt;delete-frame&lt;/code&gt; event, whose normal definition is a command that calls the function &lt;code&gt;delete-frame&lt;/code&gt; . See &lt;a href=&quot;misc-events#Misc-Events&quot;&gt;Misc Events&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="20e0969715ca6115570f93616685554412d37d54" translate="yes" xml:space="preserve">
          <source>Some window systems and window managers direct keyboard input to the window object that the mouse is in; others require explicit clicks or commands to &lt;em&gt;shift the focus&lt;/em&gt; to various window objects. Either way, Emacs automatically keeps track of which frames have focus. To explicitly switch to a different frame from a Lisp function, call &lt;code&gt;select-frame-set-input-focus&lt;/code&gt;.</source>
          <target state="translated">Some window systems and window managers direct keyboard input to the window object that the mouse is in; others require explicit clicks or commands to &lt;em&gt;shift the focus&lt;/em&gt; to various window objects. Either way, Emacs automatically keeps track of which frames have focus. To explicitly switch to a different frame from a Lisp function, call &lt;code&gt;select-frame-set-input-focus&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b5e14bbae17680b3518ad4b0830626daeab5c5d2" translate="yes" xml:space="preserve">
          <source>Some window systems do not support the &lt;code&gt;alpha&lt;/code&gt; parameter for child frames (see &lt;a href=&quot;child-frames#Child-Frames&quot;&gt;Child Frames&lt;/a&gt;).</source>
          <target state="translated">Some window systems do not support the &lt;code&gt;alpha&lt;/code&gt; parameter for child frames (see &lt;a href=&quot;child-frames#Child-Frames&quot;&gt;Child Frames&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="1fc5066c82e4ee002625956eaa06daa2f4de2912" translate="yes" xml:space="preserve">
          <source>Somehow identify the multiline construct right when it gets inserted into the buffer (or at any point after that but before font-lock tries to highlight it), and mark it with a &lt;code&gt;font-lock-multiline&lt;/code&gt; which will instruct font-lock not to start or end the scan in the middle of the construct.</source>
          <target state="translated">Somehow identify the multiline construct right when it gets inserted into the buffer (or at any point after that but before font-lock tries to highlight it), and mark it with a &lt;code&gt;font-lock-multiline&lt;/code&gt; which will instruct font-lock not to start or end the scan in the middle of the construct.</target>
        </trans-unit>
        <trans-unit id="f94b0680efbd4d644b170d8eb0a009598e28af95" translate="yes" xml:space="preserve">
          <source>Sometimes a command should display additional visual feedback (such as an informative message in the echo area) for interactive calls only. There are three ways to do this. The recommended way to test whether the function was called using &lt;code&gt;call-interactively&lt;/code&gt; is to give it an optional argument &lt;code&gt;print-message&lt;/code&gt; and use the &lt;code&gt;interactive&lt;/code&gt; spec to make it non-&lt;code&gt;nil&lt;/code&gt; in interactive calls. Here&amp;rsquo;s an example:</source>
          <target state="translated">Sometimes a command should display additional visual feedback (such as an informative message in the echo area) for interactive calls only. There are three ways to do this. The recommended way to test whether the function was called using &lt;code&gt;call-interactively&lt;/code&gt; is to give it an optional argument &lt;code&gt;print-message&lt;/code&gt; and use the &lt;code&gt;interactive&lt;/code&gt; spec to make it non- &lt;code&gt;nil&lt;/code&gt; in interactive calls. Here&amp;rsquo;s an example:</target>
        </trans-unit>
        <trans-unit id="f7a7ac2d96f2c0977f852083e81808bec21fb8fe" translate="yes" xml:space="preserve">
          <source>Sometimes a file will optionally use functions from an external package. If you prefix the filename in the &lt;code&gt;declare-function&lt;/code&gt; statement with &amp;lsquo;</source>
          <target state="translated">Sometimes a file will optionally use functions from an external package. If you prefix the filename in the &lt;code&gt;declare-function&lt;/code&gt; statement with &amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="c6e677132335d346ad63791f6594e2ae3f1843cc" translate="yes" xml:space="preserve">
          <source>Sometimes a problem with a function is due to a wrong setting of a variable. Setting up the debugger to trigger whenever the variable is changed is a quick way to find the origin of the setting.</source>
          <target state="translated">Sometimes a problem with a function is due to a wrong setting of a variable. Setting up the debugger to trigger whenever the variable is changed is a quick way to find the origin of the setting.</target>
        </trans-unit>
        <trans-unit id="ecf2e871e2030f52f96078e134da44050a3ba4db" translate="yes" xml:space="preserve">
          <source>Sometimes broader classifications of events are useful. For example, you might want to ask whether an event involved the</source>
          <target state="translated">Sometimes broader classifications of events are useful. For example, you might want to ask whether an event involved the</target>
        </trans-unit>
        <trans-unit id="33b8002200f41bc570e3b9181bd46b85f3ef6bad" translate="yes" xml:space="preserve">
          <source>Sometimes file names or their parts need to be compared as strings, in which case it&amp;rsquo;s important to know whether the underlying filesystem is case-insensitive. This function returns &lt;code&gt;t&lt;/code&gt; if file &lt;var&gt;filename&lt;/var&gt; is on a case-insensitive filesystem. It always returns &lt;code&gt;t&lt;/code&gt; on MS-DOS and MS-Windows. On Cygwin and macOS, filesystems may or may not be case-insensitive, and the function tries to determine case-sensitivity by a runtime test. If the test is inconclusive, the function returns &lt;code&gt;t&lt;/code&gt; on Cygwin and &lt;code&gt;nil&lt;/code&gt; on macOS.</source>
          <target state="translated">Sometimes file names or their parts need to be compared as strings, in which case it&amp;rsquo;s important to know whether the underlying filesystem is case-insensitive. This function returns &lt;code&gt;t&lt;/code&gt; if file &lt;var&gt;filename&lt;/var&gt; is on a case-insensitive filesystem. It always returns &lt;code&gt;t&lt;/code&gt; on MS-DOS and MS-Windows. On Cygwin and macOS, filesystems may or may not be case-insensitive, and the function tries to determine case-sensitivity by a runtime test. If the test is inconclusive, the function returns &lt;code&gt;t&lt;/code&gt; on Cygwin and &lt;code&gt;nil&lt;/code&gt; on macOS.</target>
        </trans-unit>
        <trans-unit id="d0bc29989a39b653c9b87df0491180ad60ba1d6c" translate="yes" xml:space="preserve">
          <source>Sometimes it is better to design an alist to store the associated value in the &lt;small&gt;CAR&lt;/small&gt; of the &lt;small&gt;CDR&lt;/small&gt; of the element. Here is an example of such an alist:</source>
          <target state="translated">Sometimes it is better to design an alist to store the associated value in the &lt;small&gt;CAR&lt;/small&gt; of the &lt;small&gt;CDR&lt;/small&gt; of the element. Here is an example of such an alist:</target>
        </trans-unit>
        <trans-unit id="43d163a1c88b51052145c3ed47ea72fa5f5a68e5" translate="yes" xml:space="preserve">
          <source>Sometimes it is necessary to re-throw a signal caught by &lt;code&gt;condition-case&lt;/code&gt;, for some outer-level handler to catch. Here&amp;rsquo;s how to do that:</source>
          <target state="translated">Sometimes it is necessary to re-throw a signal caught by &lt;code&gt;condition-case&lt;/code&gt; , for some outer-level handler to catch. Here&amp;rsquo;s how to do that:</target>
        </trans-unit>
        <trans-unit id="090f5f4226faa15d72aadee397ed50425f4cdc4b" translate="yes" xml:space="preserve">
          <source>Sometimes it is not possible or convenient to create an alist or an obarray containing all the intended possible completions ahead of time. In such a case, you can supply your own function to compute the completion of a given string. This is called &lt;em&gt;programmed completion&lt;/em&gt;. Emacs uses programmed completion when completing file names (see &lt;a href=&quot;file-name-completion#File-Name-Completion&quot;&gt;File Name Completion&lt;/a&gt;), among many other cases.</source>
          <target state="translated">Sometimes it is not possible or convenient to create an alist or an obarray containing all the intended possible completions ahead of time. In such a case, you can supply your own function to compute the completion of a given string. This is called &lt;em&gt;programmed completion&lt;/em&gt;. Emacs uses programmed completion when completing file names (see &lt;a href=&quot;file-name-completion#File-Name-Completion&quot;&gt;File Name Completion&lt;/a&gt;), among many other cases.</target>
        </trans-unit>
        <trans-unit id="c489b46f1562f788c42049de988a32c2945c80c4" translate="yes" xml:space="preserve">
          <source>Sometimes it is useful to &lt;em&gt;track&lt;/em&gt; the mouse, which means to display something to indicate where the mouse is and move the indicator as the mouse moves. For efficient mouse tracking, you need a way to wait until the mouse actually moves.</source>
          <target state="translated">Sometimes it is useful to &lt;em&gt;track&lt;/em&gt; the mouse, which means to display something to indicate where the mouse is and move the indicator as the mouse moves. For efficient mouse tracking, you need a way to wait until the mouse actually moves.</target>
        </trans-unit>
        <trans-unit id="56961584f755821a15808d8cf7fd02e2cd73bde6" translate="yes" xml:space="preserve">
          <source>Sometimes it is useful to allow users and Lisp programs alike to control how certain text is generated via custom format control strings. For example, a format string could control how to display someone&amp;rsquo;s forename, surname, and email address. Using the function &lt;code&gt;format&lt;/code&gt; described in the previous section, the format string could be something like &lt;code&gt;&quot;%s&amp;nbsp;%s&amp;nbsp;&amp;lt;%s&amp;gt;&quot;&lt;/code&gt;. This approach quickly becomes impractical, however, as it can be unclear which specification character corresponds to which piece of information.</source>
          <target state="translated">Sometimes it is useful to allow users and Lisp programs alike to control how certain text is generated via custom format control strings. For example, a format string could control how to display someone&amp;rsquo;s forename, surname, and email address. Using the function &lt;code&gt;format&lt;/code&gt; described in the previous section, the format string could be something like &lt;code&gt;&quot;%s&amp;nbsp;%s&amp;nbsp;&amp;lt;%s&amp;gt;&quot;&lt;/code&gt; . This approach quickly becomes impractical, however, as it can be unclear which specification character corresponds to which piece of information.</target>
        </trans-unit>
        <trans-unit id="65de83bbbd14f273741c5e9ffe07ef9e56ab287f" translate="yes" xml:space="preserve">
          <source>Sometimes it is useful to compare numbers with &lt;code&gt;eql&lt;/code&gt; or &lt;code&gt;equal&lt;/code&gt;, which treat two numbers as equal if they have the same data type (both integers, or both floating point) and the same value. By contrast, &lt;code&gt;=&lt;/code&gt; can treat an integer and a floating-point number as equal. See &lt;a href=&quot;equality-predicates#Equality-Predicates&quot;&gt;Equality Predicates&lt;/a&gt;.</source>
          <target state="translated">Sometimes it is useful to compare numbers with &lt;code&gt;eql&lt;/code&gt; or &lt;code&gt;equal&lt;/code&gt; , which treat two numbers as equal if they have the same data type (both integers, or both floating point) and the same value. By contrast, &lt;code&gt;=&lt;/code&gt; can treat an integer and a floating-point number as equal. See &lt;a href=&quot;equality-predicates#Equality-Predicates&quot;&gt;Equality Predicates&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="29e9a5b542fa3fd92687c42189238058e1639a53" translate="yes" xml:space="preserve">
          <source>Sometimes it is useful to delay the evaluation of an expression, for example if you want to avoid performing a time-consuming calculation if it turns out that the result is not needed in the future of the program. The</source>
          <target state="translated">Sometimes it is useful to delay the evaluation of an expression, for example if you want to avoid performing a time-consuming calculation if it turns out that the result is not needed in the future of the program. The</target>
        </trans-unit>
        <trans-unit id="1cac5fdf3be2510cf10370dc28ef28ceb1df16fd" translate="yes" xml:space="preserve">
          <source>Sometimes it is useful to examine an existing buffer or string as multibyte when it was unibyte, or vice versa.</source>
          <target state="translated">때로는 기존 버퍼 또는 문자열이 유니 바이트 일 때 멀티 바이트로 검사하거나 그 반대로 검사하는 것이 유용합니다.</target>
        </trans-unit>
        <trans-unit id="303aa7a632a844138ffee65d496e59a566bc6c4b" translate="yes" xml:space="preserve">
          <source>Sometimes it is useful to find out which character set a particular character belongs to. One use for this is in determining which coding systems (see &lt;a href=&quot;coding-systems#Coding-Systems&quot;&gt;Coding Systems&lt;/a&gt;) are capable of representing all of the text in question; another is to determine the font(s) for displaying that text.</source>
          <target state="translated">때로는 특정 문자가 속한 문자 집합을 찾는 것이 유용합니다. 이것에 대한 하나 개의 사용 (참조 코딩하는 시스템 결정에 &lt;a href=&quot;coding-systems#Coding-Systems&quot;&gt;시스템을 코딩&lt;/a&gt; ) 문제의 모든 텍스트를 표시 할 수 있습니다; 다른 하나는 해당 텍스트를 표시하기위한 글꼴을 결정하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="16929ca97a6b572178fdcf80705aab6bc702f649" translate="yes" xml:space="preserve">
          <source>Sometimes it is useful to fix some of the function&amp;rsquo;s arguments at certain values, and leave the rest of arguments for when the function is actually called. The act of fixing some of the function&amp;rsquo;s arguments is called &lt;em&gt;partial application&lt;/em&gt; of the function&lt;a href=&quot;#FOOT11&quot; name=&quot;DOCF11&quot;&gt;&lt;sup&gt;11&lt;/sup&gt;&lt;/a&gt;. The result is a new function that accepts the rest of arguments and calls the original function with all the arguments combined.</source>
          <target state="translated">때로는 함수의 일부 인수를 특정 값으로 수정하고 함수가 실제로 호출 될 때를 위해 나머지 인수를 남겨 두는 것이 유용합니다. 함수의 일부 인수를 수정하는 행위를 함수 &lt;a href=&quot;#FOOT11&quot; name=&quot;DOCF11&quot;&gt;&lt;sup&gt;11&lt;/sup&gt;&lt;/a&gt; 의 &lt;em&gt;부분적 적용&lt;/em&gt; 이라고 합니다. 결과는 나머지 인수를 받아들이고 모든 인수가 결합 된 원래 함수를 호출하는 새 함수입니다.&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="7327869e47811d21d60b976fd236f5a2c04e7deb" translate="yes" xml:space="preserve">
          <source>Sometimes it is useful to make menu items that use the same command but with different enable conditions. The best way to do this in Emacs now is with extended menu items; before that feature existed, it could be done by defining alias commands and using them in menu items. Here&amp;rsquo;s an example that makes two aliases for &lt;code&gt;read-only-mode&lt;/code&gt; and gives them different enable conditions:</source>
          <target state="translated">때로는 동일한 명령을 사용하지만 활성화 조건이 다른 메뉴 항목을 만드는 것이 유용합니다. Emacs에서이 작업을 수행하는 가장 좋은 방법은 확장 메뉴 항목을 사용하는 것입니다. 해당 기능이 존재하기 전에 별칭 명령을 정의하고 메뉴 항목에서 사용하여 수행 할 수 있습니다. 다음은 &lt;code&gt;read-only-mode&lt;/code&gt; 대해 두 개의 별칭을 만들고 서로 다른 활성화 조건을 제공 하는 예입니다 .</target>
        </trans-unit>
        <trans-unit id="7b2870280d8c494633696f615eef42912a87b4ae" translate="yes" xml:space="preserve">
          <source>Sometimes key sequences are represented as unibyte strings. When a unibyte string is a key sequence, string elements in the range 128 to 255 represent meta characters (which are large integers) rather than character codes in the range 128 to 255. Strings cannot hold characters that have the hyper, super or alt modifiers; they can hold</source>
          <target state="translated">때로는 키 시퀀스가 ​​유니 바이트 문자열로 표시됩니다. 유니 바이트 문자열이 키 시퀀스 인 경우 128에서 255 범위의 문자열 요소는 128에서 255 범위의 문자 코드가 아닌 메타 문자 (큰 정수)를 나타냅니다. 문자열에는 하이퍼, 슈퍼 또는 alt 수정자가있는 문자를 포함 할 수 없습니다. ; 그들은 보유 할 수있다</target>
        </trans-unit>
        <trans-unit id="168d5659574624113fee9e26d692c1e074302898" translate="yes" xml:space="preserve">
          <source>Sometimes several windows collectively and cooperatively display a buffer, for example, under the management of Follow Mode (see &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Follow-Mode.html#Follow-Mode&quot;&gt;(emacs)Follow Mode&lt;/a&gt;), where the windows together display a bigger portion of the buffer than one window could alone. It is often useful to consider such a &lt;em&gt;window group&lt;/em&gt; as a single entity. Several functions such as &lt;code&gt;window-group-start&lt;/code&gt; (see &lt;a href=&quot;window-start-and-end#Window-Start-and-End&quot;&gt;Window Start and End&lt;/a&gt;) allow you to do this by supplying, as an argument, one of the windows as a stand in for the whole group.</source>
          <target state="translated">예를 들어, 팔로우 모드 ( &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Follow-Mode.html#Follow-Mode&quot;&gt;(emacs) 팔로우 모드&lt;/a&gt; 참조) 관리 하에서 여러 창에 집합 적으로 그리고 협력 적으로 버퍼가 표시되는 경우가 있습니다. 여기서 창은 함께 하나의 창만 사용할 수있는 것보다 더 큰 버퍼 부분을 표시합니다. 이러한 &lt;em&gt;창 그룹&lt;/em&gt; 을 단일 엔티티로 간주하는 것이 종종 유용합니다 . &lt;code&gt;window-group-start&lt;/code&gt; ( &lt;a href=&quot;window-start-and-end#Window-Start-and-End&quot;&gt;Window Start 및 End&lt;/a&gt; 참조) 와 같은 여러 기능 을 사용하면 전체 그룹에 대한 기준으로 창 중 하나를 인수로 제공하여이를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="34265f15698262a19379f3da05738e0d3bea720a" translate="yes" xml:space="preserve">
          <source>Sometimes several windows collectively and cooperatively display a buffer, for example, under the management of Follow Mode (see &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Follow-Mode.html#Follow-Mode&quot;&gt;(emacs)Follow Mode&lt;/a&gt;), where the windows together display a bigger portion of the buffer than one window could alone. It is often useful to consider such a &lt;em&gt;window group&lt;/em&gt; as a single entity. Several functions such as &lt;code&gt;window-group-start&lt;/code&gt; (see &lt;a href=&quot;window-start-and-end#Window-Start-and-End&quot;&gt;Window Start and End&lt;/a&gt;) allow you to do this by supplying, as an argument, one of the windows as a stand in for the whole group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2706feee5cfa5f6473ab14809e7e889158920d0e" translate="yes" xml:space="preserve">
          <source>Sometimes the system is unable to accept input for that process, because the input buffer is full. When this happens, the send functions wait a short while, accepting output from subprocesses, and then try again. This gives the subprocess a chance to read more of its pending input and make space in the buffer. It also allows filters (including the one currently running), sentinels and timers to run&amp;mdash;so take account of that in writing your code.</source>
          <target state="translated">때때로 시스템은 입력 버퍼가 가득 차서 해당 프로세스에 대한 입력을 받아 들일 수 없습니다. 이런 일이 발생하면 send 함수는 잠시 기다렸다가 하위 프로세스의 출력을 수락 한 다음 다시 시도합니다. 이렇게하면 하위 프로세스가 보류중인 입력을 더 많이 읽고 버퍼에 공간을 만들 수 있습니다. 또한 필터 (현재 실행중인 필터 포함), 센티넬 및 타이머를 실행할 수 있으므로 코드 작성시이를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="bfeee3112a01b02f9c80e9149d7fb594b20030a9" translate="yes" xml:space="preserve">
          <source>Sometimes there&amp;rsquo;s a need for modifying buffer in a way that doesn&amp;rsquo;t really change its text, like if only its text properties are changed. If your program needs to modify a buffer without triggering any hooks and features that react to buffer modifications, use the &lt;code&gt;with-silent-modifications&lt;/code&gt; macro.</source>
          <target state="translated">때로는 텍스트 속성 만 변경되는 것과 같이 실제로 텍스트를 변경하지 않는 방식으로 버퍼를 수정해야 할 필요가 있습니다. 프로그램이 버퍼 수정에 반응하는 후크 및 기능을 트리거하지 않고 버퍼를 수정해야하는 경우 &lt;code&gt;with-silent-modifications&lt;/code&gt; 매크로를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="e0013d100ab061bbb304f172931b69773b25428d" translate="yes" xml:space="preserve">
          <source>Sometimes there&amp;rsquo;s a need to move point in strict visual order, either to the left or to the right of its current screen position. Emacs provides a primitive to do that.</source>
          <target state="translated">때때로 현재 화면 위치의 왼쪽 또는 오른쪽으로 엄격한 시각적 순서로 포인트를 이동해야하는 경우가 있습니다. Emacs는이를위한 기본 요소를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="6cc2dd4abd2d50197d5ba31135739fc7e5941171" translate="yes" xml:space="preserve">
          <source>Sometimes they describe possible elements in an alist:</source>
          <target state="translated">때로는 목록에서 가능한 요소를 설명합니다.</target>
        </trans-unit>
        <trans-unit id="746dc00c93101b07a5279b09e9320454a625869b" translate="yes" xml:space="preserve">
          <source>Sometimes you may need to display a grave accent or apostrophe without translation, regardless of text quoting style. In a documentation string, you can do this with escapes. For example, in the documentation string</source>
          <target state="translated">때로는 텍스트 인용 스타일에 관계없이 번역없이 억양이나 아포스트로피를 표시해야 할 수도 있습니다. 문서 문자열에서 이스케이프를 사용하여이를 수행 할 수 있습니다. 예를 들어, 문서 문자열에서</target>
        </trans-unit>
        <trans-unit id="84555fbe17f99191e24b59b9af77a4193826a18a" translate="yes" xml:space="preserve">
          <source>Sometimes you may wish the byte-compiler warnings to be reported using &lt;code&gt;error&lt;/code&gt;. If so, set &lt;code&gt;byte-compile-error-on-warn&lt;/code&gt; to a non-&lt;code&gt;nil&lt;/code&gt; value.</source>
          <target state="translated">때때로 바이트 컴파일러 경고가 &lt;code&gt;error&lt;/code&gt; 를 사용하여보고되기를 원할 수 있습니다 . 그렇다면 &lt;code&gt;byte-compile-error-on-warn&lt;/code&gt; 을 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값으로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="19bbe197a4e56922ab426df225c901d61f182c7e" translate="yes" xml:space="preserve">
          <source>Sometimes you want the random number sequence to be repeatable. For example, when debugging a program whose behavior depends on the random number sequence, it is helpful to get the same behavior in each program run. To make the sequence repeat, execute &lt;code&gt;(random &quot;&quot;)&lt;/code&gt;. This sets the seed to a constant value for your particular Emacs executable (though it may differ for other Emacs builds). You can use other strings to choose various seed values.</source>
          <target state="translated">때로는 난수 시퀀스를 반복 할 수 있기를 원합니다. 예를 들어, 난수 시퀀스에 따라 동작이 달라지는 프로그램을 디버깅 할 때 각 프로그램 실행에서 동일한 동작을 얻는 것이 유용합니다. 시퀀스를 반복하려면 &lt;code&gt;(random &quot;&quot;)&lt;/code&gt; 을 실행하십시오 . 이것은 시드를 특정 Emacs 실행 파일에 대한 상수 값으로 설정합니다 (다른 Emacs 빌드에서는 다를 수 있음). 다른 문자열을 사용하여 다양한 시드 값을 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="39765ab31b90f8b118214aacc0af4cfffae23239" translate="yes" xml:space="preserve">
          <source>Sometimes you want to make a keymap that inherits from more than one map. You can use the function &lt;code&gt;make-composed-keymap&lt;/code&gt; for this.</source>
          <target state="translated">두 개 이상의 맵에서 상속되는 키맵을 만들고 싶을 때가 있습니다. 이를 &lt;code&gt;make-composed-keymap&lt;/code&gt; 함수를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e9a7085f5c46445dd39399b51c963c2b34b313be" translate="yes" xml:space="preserve">
          <source>Sometimes, Emacs does not keep documentation strings in memory. There are two such circumstances. Firstly, to save memory, the documentation for preloaded functions and variables (including primitives) is kept in a file named</source>
          <target state="translated">때때로 Emacs는 문서 문자열을 메모리에 보관하지 않습니다. 두 가지 상황이 있습니다. 첫째, 메모리를 절약하기 위해 미리로드 된 함수 및 변수 (프리미티브 포함)에 대한 문서는 다음과 같은 파일에 보관됩니다.</target>
        </trans-unit>
        <trans-unit id="aaa83f7107b2f4d3c097e2d8cecc9059e67620f7" translate="yes" xml:space="preserve">
          <source>Sometimes, a Lisp program may need to preserve the exact visual appearance of the copied text at destination, and of the text that surrounds the copy. Lisp programs can use the following function to achieve that effect.</source>
          <target state="translated">경우에 따라 Lisp 프로그램은 대상에 복사 된 텍스트와 복사본을 둘러싼 텍스트의 정확한 시각적 모양을 유지해야 할 수 있습니다. Lisp 프로그램은 그 효과를 얻기 위해 다음 기능을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e3ed70e843fcb6d735f48200daa1921e9f9e4d2" translate="yes" xml:space="preserve">
          <source>Sometimes, a function is only intended to be called interactively, never directly from Lisp. In that case, give the function a non-&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;interactive-only&lt;/code&gt; property, either directly or via &lt;code&gt;declare&lt;/code&gt; (see &lt;a href=&quot;declare-form#Declare-Form&quot;&gt;Declare Form&lt;/a&gt;). This causes the byte compiler to warn if the command is called from Lisp. The output of &lt;code&gt;describe-function&lt;/code&gt; will include similar information. The value of the property can be: a string, which the byte-compiler will use directly in its warning (it should end with a period, and not start with a capital, e.g., &lt;code&gt;&quot;use (system-name) instead.&quot;&lt;/code&gt;); &lt;code&gt;t&lt;/code&gt;; any other symbol, which should be an alternative function to use in Lisp code.</source>
          <target state="translated">때로는 함수를 Lisp에서 직접 호출하지 않고 대화식으로 만 호출 할 수 있습니다. 이 경우 직접 또는 &lt;code&gt;declare&lt;/code&gt; 통해 &lt;code&gt;nil&lt;/code&gt; 이 아닌 &lt;code&gt;interactive-only&lt;/code&gt; 속성을 함수에 제공합니다 ( &lt;a href=&quot;declare-form#Declare-Form&quot;&gt;Declare Form&lt;/a&gt; 참조 ). 이로 인해 Lisp에서 명령이 호출되면 바이트 컴파일러가 경고합니다. &lt;code&gt;describe-function&lt;/code&gt; 의 출력 에는 유사한 정보가 포함됩니다. 속성의 값은 다음과 같을 수 있습니다. 바이트 컴파일러가 경고에서 직접 사용할 문자열 (마침표로 끝나야하며 대문자로 시작하지 않아야 &lt;code&gt;&quot;use (system-name) instead.&quot;&lt;/code&gt; 예 : &quot;대신 (시스템 이름) 사용&quot; )). ; &lt;code&gt;t&lt;/code&gt; ; Lisp 코드에서 사용할 대체 기능이어야하는 기타 기호.</target>
        </trans-unit>
        <trans-unit id="6eea268fe3b73d8580f20b63ea1b3496fa966458" translate="yes" xml:space="preserve">
          <source>Sometimes, an Emacs Lisp program needs to specify a standard file name for a particular use&amp;mdash;typically, to hold configuration data specified by the current user. Usually, such files should be located in the directory specified by &lt;code&gt;user-emacs-directory&lt;/code&gt;, which is typically</source>
          <target state="translated">때로는 Emacs Lisp 프로그램이 특정 용도 (일반적으로 현재 사용자가 지정한 구성 데이터를 보유하기 위해)에 대한 표준 파일 이름을 지정해야합니다. 일반적으로 이러한 파일은 &lt;code&gt;user-emacs-directory&lt;/code&gt; 에서 지정한 디렉토리에 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="8515bf691ca57496b08f861f52381f1f2faa7998" translate="yes" xml:space="preserve">
          <source>Sometimes, binding &lt;code&gt;frame-inhibit-implied-resize&lt;/code&gt; (see &lt;a href=&quot;implied-frame-resizing#Implied-Frame-Resizing&quot;&gt;Implied Frame Resizing&lt;/a&gt;) to a non-&lt;code&gt;nil&lt;/code&gt; value around calls to this function may fix the problem sketched here. Sometimes, however, exactly such binding may be hit by the problem.</source>
          <target state="translated">때때로, 이 함수에 대한 호출 주변의 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값에 &lt;code&gt;frame-inhibit-implied-resize&lt;/code&gt; ( &lt;a href=&quot;implied-frame-resizing#Implied-Frame-Resizing&quot;&gt;묵시적 프레임 크기 조정&lt;/a&gt; 참조 )를 바인딩 하면 여기에 스케치 된 문제를 해결할 수 있습니다. 그러나 때로는 정확하게 그러한 바인딩이 문제에 맞을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="233d0d66145e152c5f8710295de5cb5189e70898" translate="yes" xml:space="preserve">
          <source>Sometimes, however, it makes sense to not delete a parent window like &lt;var&gt;W4&lt;/var&gt;. In particular, a parent window should not be removed when it was used to preserve a combination embedded in a combination of the same type. Such embeddings make sense to assure that when you split a window and subsequently delete the new window, Emacs reestablishes the layout of the associated frame as it existed before the splitting.</source>
          <target state="translated">그러나 때로는 &lt;var&gt;W4&lt;/var&gt; 와 같은 부모 창을 삭제하지 않는 것이 합리적 입니다. 특히 동일한 유형의 조합에 포함 된 조합을 유지하기 위해 사용 된 경우 상위 창을 제거해서는 안됩니다. 이러한 임베딩은 창을 분할하고 이후에 새 창을 삭제할 때 Emacs가 분할 이전에 존재했던 것처럼 연관된 프레임의 레이아웃을 다시 설정하도록하는 데 의미가 있습니다.</target>
        </trans-unit>
        <trans-unit id="86fd280cf44a42ae35b2c0b88a11245a762b11f7" translate="yes" xml:space="preserve">
          <source>Sometimes, it is necessary to create a temporary file on a remote host or a mounted directory. The following two functions support this.</source>
          <target state="translated">때로는 원격 호스트 또는 마운트 된 디렉토리에 임시 파일을 만들어야합니다. 다음 두 가지 기능이이를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="43178c8ee860771773d32210db546f46b1ae0e81" translate="yes" xml:space="preserve">
          <source>Sometimes, it is necessary to send a signal to a non-local asynchronous process. This is possible by writing an own &lt;code&gt;interrupt-process&lt;/code&gt; implementation. This function must be added then to &lt;code&gt;interrupt-process-functions&lt;/code&gt;.</source>
          <target state="translated">때로는 로컬이 아닌 비동기 프로세스에 신호를 보내야합니다. 이는 자체 &lt;code&gt;interrupt-process&lt;/code&gt; 구현 을 작성함으로써 가능합니다 . 이 함수는 &lt;code&gt;interrupt-process-functions&lt;/code&gt; 추가되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="aa885816541d362faea54da5484e99ef36826184" translate="yes" xml:space="preserve">
          <source>Sometimes, it is not desired to expand file names. In such cases, the file name can be quoted to suppress the expansion, and to handle the file name literally. Quoting happens by prefixing the file name with &amp;lsquo;</source>
          <target state="translated">때로는 파일 이름을 확장하는 것이 바람직하지 않습니다. 이러한 경우 파일 이름을 따옴표로 묶어 확장을 억제하고 파일 이름을 문자 그대로 처리 할 수 ​​있습니다. 인용은 파일 이름 앞에 '</target>
        </trans-unit>
        <trans-unit id="144861d58e21668db24c60b60ae0b7f66a23e4ad" translate="yes" xml:space="preserve">
          <source>Sometimes, mounted filesystems cannot be watched for file changes. This is not detected by this function, a non-&lt;code&gt;nil&lt;/code&gt; return value does not guarantee that changes on &lt;var&gt;file&lt;/var&gt; will be notified.</source>
          <target state="translated">때때로 마운트 된 파일 시스템은 파일 변경을 감시 할 수 없습니다. 이것은이 함수에 의해 감지 되지 않으며 &lt;code&gt;nil&lt;/code&gt; 이 아닌 반환 값은 &lt;var&gt;file&lt;/var&gt; 변경 사항 이 통보 된다는 것을 보장하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="12117e3007a358a3a8e9a5cfecf4d2872074fd81" translate="yes" xml:space="preserve">
          <source>Sometimes, the byte compiler produces warning and/or error messages (see &lt;a href=&quot;compiler-errors#Compiler-Errors&quot;&gt;Compiler Errors&lt;/a&gt;, for details). These messages are normally recorded in a buffer called</source>
          <target state="translated">때때로 바이트 컴파일러는 경고 및 / 또는 오류 메시지를 생성합니다 (자세한 내용은 &lt;a href=&quot;compiler-errors#Compiler-Errors&quot;&gt;컴파일러 오류&lt;/a&gt; 참조). 이러한 메시지는 일반적으로 다음과 같은 버퍼에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="4b80f7230c2839855947235b89909795fb022a95" translate="yes" xml:space="preserve">
          <source>Sometimes, the selected window may not be suitable for displaying the buffer. This happens if the selected window is a minibuffer window, or if the selected window is strongly dedicated to its buffer (see &lt;a href=&quot;dedicated-windows#Dedicated-Windows&quot;&gt;Dedicated Windows&lt;/a&gt;). In such cases, the command normally tries to display the buffer in some other window, by invoking &lt;code&gt;pop-to-buffer&lt;/code&gt; (see below).</source>
          <target state="translated">때로는 선택한 창이 버퍼를 표시하는 데 적합하지 않을 수 있습니다. 선택한 창이 미니 버퍼 창이거나 선택한 창이 해당 버퍼 전용 인 경우에 발생합니다 ( &lt;a href=&quot;dedicated-windows#Dedicated-Windows&quot;&gt;전용 창&lt;/a&gt; 참조 ). 이러한 경우 명령은 일반적으로 버퍼에 &lt;code&gt;pop-to-buffer&lt;/code&gt; 을 호출하여 다른 창에 버퍼를 표시하려고합니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="250f9544dc99f9d03600bc6d2f3b5bea969ab74b" translate="yes" xml:space="preserve">
          <source>Sometimes, those conflicts can be worked around by expressing the grammar slightly differently. For example, for Modula-2 it might seem natural to have a BNF grammar that looks like this:</source>
          <target state="translated">때로는 문법을 약간 다르게 표현하여 이러한 갈등을 해결할 수 있습니다. 예를 들어 Modula-2의 경우 다음과 같은 BNF 문법이 자연스럽게 보일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fc0fc8144fe3278c5f8e6a1cbc205c8365df875a" translate="yes" xml:space="preserve">
          <source>Sometimes, when you call a functional, it is useful to supply a no-op function as the argument. Here are two different kinds of no-op function:</source>
          <target state="translated">때로는 함수를 호출 할 때 no-op 함수를 인수로 제공하는 것이 유용합니다. 다음은 두 가지 종류의 무 작동 기능입니다.</target>
        </trans-unit>
        <trans-unit id="c7e40440b98723a0ae1f89d325688a47159a9cb5" translate="yes" xml:space="preserve">
          <source>Sometimes, you may wish to avoid showing a warning while a command is running, and only show it only after the end of the command. You can use the function &lt;code&gt;delay-warning&lt;/code&gt; for this.</source>
          <target state="translated">때로는 명령이 실행되는 동안 경고를 표시하지 않고 명령이 끝난 후에 만 ​​경고를 표시 할 수 있습니다. 이를 위해 &lt;code&gt;delay-warning&lt;/code&gt; 기능을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3d2d699ee992703b1201c41a6af64aada5e736ae" translate="yes" xml:space="preserve">
          <source>Sometimes, you need to prefer several coding systems for some operation, rather than fix a single one. Emacs lets you specify a priority order for using coding systems. This ordering affects the sorting of lists of coding systems returned by functions such as &lt;code&gt;find-coding-systems-region&lt;/code&gt; (see &lt;a href=&quot;lisp-and-coding-systems#Lisp-and-Coding-Systems&quot;&gt;Lisp and Coding Systems&lt;/a&gt;).</source>
          <target state="translated">때로는 단일 작업을 수정하는 것보다 일부 작업에 대해 여러 코딩 시스템을 선호해야합니다. Emacs를 사용하면 코딩 시스템을 사용하기위한 우선 순위를 지정할 수 있습니다. 이 순서는 &lt;code&gt;find-coding-systems-region&lt;/code&gt; 과 같은 함수가 반환하는 코딩 시스템 목록의 정렬에 영향을줍니다 ( &lt;a href=&quot;lisp-and-coding-systems#Lisp-and-Coding-Systems&quot;&gt;Lisp 및 코딩 시스템&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="44010839883c32c62f2131ead3a2b803c7433dfc" translate="yes" xml:space="preserve">
          <source>Somewhat odd, but predictable, behavior can occur for certain &amp;ldquo;non-greedy&amp;rdquo; values of &lt;var&gt;separators&lt;/var&gt; that can prefer empty matches over non-empty matches. Again, such values rarely occur in practice:</source>
          <target state="translated">비어 있지 않은 일치보다 빈 일치를 선호 할 수있는 &lt;var&gt;separators&lt;/var&gt; 특정 &quot;탐욕스럽지 않은&quot;값에 대해 다소 이상하지만 예측 가능한 동작이 발생할 수 있습니다 . 다시 말하지만 이러한 값은 실제로 거의 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3710ef3c0b9c3741c3ba67223627a26f73ff42ae" translate="yes" xml:space="preserve">
          <source>Sorting Text</source>
          <target state="translated">텍스트 정렬</target>
        </trans-unit>
        <trans-unit id="b91b07a615e7069de18e0ebe0a3e3eafa96e4c26" translate="yes" xml:space="preserve">
          <source>Sorting does not change the &lt;small&gt;CAR&lt;/small&gt;s of the cons cells in &lt;var&gt;sequence&lt;/var&gt;; the cons cell that originally contained the element &lt;code&gt;a&lt;/code&gt; in &lt;var&gt;sequence&lt;/var&gt; still has &lt;code&gt;a&lt;/code&gt; in its &lt;small&gt;CAR&lt;/small&gt; after sorting, but it now appears in a different position in the list due to the change of &lt;small&gt;CDR&lt;/small&gt;s. For example:</source>
          <target state="translated">정렬은 cons 셀 의 &lt;small&gt;CAR&lt;/small&gt; 을 &lt;var&gt;sequence&lt;/var&gt; 변경하지 않습니다 . 원래 소자 함유 단점 셀 &lt;code&gt;a&lt;/code&gt; 에 &lt;var&gt;sequence&lt;/var&gt; 여전히 보유 그것에서 &lt;small&gt;CAR를&lt;/small&gt; 정렬 한 후, 그러나 지금 인한 변화에 목록 내의 다른 위치에 표시 &lt;small&gt;CDR&lt;/small&gt; 들. 예를 들면 : &lt;code&gt;a&lt;/code&gt; &lt;small&gt;&lt;/small&gt;&lt;small&gt;&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3de2581188f5762e7351d0086bad995b124067d3" translate="yes" xml:space="preserve">
          <source>Sound Output</source>
          <target state="translated">사운드 출력</target>
        </trans-unit>
        <trans-unit id="babf455465c04b1d92cb97c84f2eae8c4e14dd74" translate="yes" xml:space="preserve">
          <source>Source Breakpoints</source>
          <target state="translated">소스 중단 점</target>
        </trans-unit>
        <trans-unit id="1a964a06592c36a6561cd0e204714bdd6a869556" translate="yes" xml:space="preserve">
          <source>Source of the multi-monitor information as &lt;var&gt;string&lt;/var&gt;; e.g., &amp;lsquo;</source>
          <target state="translated">다중 모니터 정보의 소스 ( &lt;var&gt;string&lt;/var&gt; ) 예 : '</target>
        </trans-unit>
        <trans-unit id="5ece9dc113704e90785feb26c5975b25e6b34c0a" translate="yes" xml:space="preserve">
          <source>Special Characters in Regular Expressions</source>
          <target state="translated">정규식의 특수 문자</target>
        </trans-unit>
        <trans-unit id="38bec90f3ce6804049a6d4a37dafcb6af2d8b40d" translate="yes" xml:space="preserve">
          <source>Special Events</source>
          <target state="translated">특별 이벤트</target>
        </trans-unit>
        <trans-unit id="1128ef515d9da4f49ef641d981e6fbe4479bba93" translate="yes" xml:space="preserve">
          <source>Special Form</source>
          <target state="translated">특별 양식</target>
        </trans-unit>
        <trans-unit id="56eb985fa721b70fab80bdca77f4fbf8d4a435a1" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;and&lt;/strong&gt;&lt;em&gt;conditions&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특별 양식 : &lt;strong&gt;및 &lt;/strong&gt;&lt;em&gt;조건&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9e2e0e15d1b8e9520dbdc997140f531d10d55c9f" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;catch&lt;/strong&gt;&lt;em&gt;tag body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특수 양식 : &lt;em&gt;태그 본문을 &lt;/em&gt;&lt;strong&gt;잡아라 &lt;/strong&gt;&lt;em&gt;&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ff8c3a24cd1ded2d16041af7575f8f608dd2d430" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;cond&lt;/strong&gt;&lt;em&gt;clause&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특수 형식 : &lt;strong&gt;cond &lt;/strong&gt;&lt;em&gt;조항&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d7a9c8e13b6c9ca33cd471d78c77de021ea5d48f" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;condition-case&lt;/strong&gt;&lt;em&gt;var protected-form handlers&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특수 양식 : &lt;strong&gt;condition-case &lt;/strong&gt;&lt;em&gt;var 보호 양식 핸들러&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a7b259ee6d31aaaa899941e7b182d537fa62acf2" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;count-loop&lt;/strong&gt;&lt;em&gt;(var [from to [inc]]) body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특수 형식 : &lt;strong&gt;카운트 루프 &lt;/strong&gt;&lt;em&gt;(var [from to [inc]]) 본문&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="947ec6b70e484dbe0986cbc019be035da9c396ef" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;defconst&lt;/strong&gt;&lt;em&gt;symbol value [doc-string]&lt;/em&gt;</source>
          <target state="translated">특수 형식 : &lt;strong&gt;defconst &lt;/strong&gt;&lt;em&gt;기호 값 [doc-string]&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ce5c3b766e918cb5744680fe8268097bd630b073" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;defvar&lt;/strong&gt;&lt;em&gt;symbol [value [doc-string]]&lt;/em&gt;</source>
          <target state="translated">특수 형식 : &lt;strong&gt;defvar &lt;/strong&gt;&lt;em&gt;기호 [value [doc-string]]&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6d481c0eb7de0ce6e8680ce954a4bf00c749c2de" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;eval-and-compile&lt;/strong&gt;&lt;em&gt;body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특수 형식 : &lt;strong&gt;평가 및 컴파일 &lt;/strong&gt;&lt;em&gt;본문&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c6ad1419ddacdc669318c1fa833b1ada1cf55870" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;eval-when-compile&lt;/strong&gt;&lt;em&gt;body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특수 형식 : &lt;strong&gt;eval-when-compile &lt;/strong&gt;&lt;em&gt;본문&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8764b8265cdbc64d6315f7a31080730ff2f4da6c" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;function&lt;/strong&gt;&lt;em&gt;function-object&lt;/em&gt;</source>
          <target state="translated">특수 형식 : &lt;strong&gt;함수 &lt;/strong&gt;&lt;em&gt;함수 개체&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c0b43403840ba175a4e5faa6c9a985f88136695a" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;if&lt;/strong&gt;&lt;em&gt;condition then-form else-forms&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특수 양식 : &lt;strong&gt;if &lt;/strong&gt;&lt;em&gt;조건 then-form else-forms&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="747d39ca515a7887dc23f8af23543bc9806431b7" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;interactive&lt;/strong&gt;&lt;em&gt;arg-descriptor&lt;/em&gt;</source>
          <target state="translated">특수 형식 : &lt;strong&gt;대화 형 &lt;/strong&gt;&lt;em&gt;인수 설명자&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="58d18be8c634eb0dbb5005e31984aca111e53bd0" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;let*&lt;/strong&gt;&lt;em&gt;(bindings&amp;hellip;) forms&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특수 양식 : &lt;strong&gt;let * &lt;/strong&gt;&lt;em&gt;(bindings&amp;hellip;) 양식&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ea26ad3c9f8f7d3c1c2ffc426f79daeccd0c0bf4" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;let&lt;/strong&gt;&lt;em&gt;(bindings&amp;hellip;) forms&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특수 양식 : &lt;strong&gt;let &lt;/strong&gt;&lt;em&gt;(bindings&amp;hellip;) forms&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="120c4ef89c484cb5d3be7685886e760248d99720" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;letrec&lt;/strong&gt;&lt;em&gt;(bindings&amp;hellip;) forms&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특수 형식 : &lt;strong&gt;letrec &lt;/strong&gt;&lt;em&gt;(바인딩&amp;hellip;) 형식&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0edb2674ddd1f58dbeeb544e5e1155db9d7f69a9" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;or&lt;/strong&gt;&lt;em&gt;conditions&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특수 양식 : &lt;strong&gt;또는 &lt;/strong&gt;&lt;em&gt;조건&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ff3033b662f869d1902590e9243761c5304dbe60" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;prog1&lt;/strong&gt;&lt;em&gt;form1 forms&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특수 양식 : &lt;strong&gt;prog1 &lt;/strong&gt;&lt;em&gt;form1 양식&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="335b5e9a1202af749015a3864738464d313f29a2" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;prog2&lt;/strong&gt;&lt;em&gt;form1 form2 forms&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특수 양식 : &lt;strong&gt;prog2 &lt;/strong&gt;&lt;em&gt;form1 form2 양식&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a19345e482afae00b79f6319213843f22bed4e59" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;progn&lt;/strong&gt;&lt;em&gt;forms&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특수 양식 : &lt;strong&gt;예후 &lt;/strong&gt;&lt;em&gt;양식&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="423b5ab3b6c437619c3593c4aee6ef296c74f09e" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;quote&lt;/strong&gt;&lt;em&gt;object&lt;/em&gt;</source>
          <target state="translated">특수 양식 : &lt;strong&gt;견적 &lt;/strong&gt;&lt;em&gt;객체&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="03ed27df74cb3d68643db3c880c265191a05524c" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;save-current-buffer&lt;/strong&gt;&lt;em&gt;body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특수 형식 : &lt;strong&gt;save-current-buffer &lt;/strong&gt;&lt;em&gt;body&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="42f5e6eab188b8d7a091f5d6caaf007b18c15f64" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;save-excursion&lt;/strong&gt;&lt;em&gt;body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특별 양식 : &lt;strong&gt;여행 저장 &lt;/strong&gt;&lt;em&gt;본문&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="264171e16d6c07d68fee17a43cdd0485e1c46784" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;save-restriction&lt;/strong&gt;&lt;em&gt;body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특수 양식 : &lt;strong&gt;저장 제한 &lt;/strong&gt;&lt;em&gt;본문&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aeb5c33538b94a8af54e06064033b23360480609" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;setq-default&lt;/strong&gt;&lt;em&gt;[symbol form]&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특수 형식 : &lt;strong&gt;setq-default &lt;/strong&gt;&lt;em&gt;[기호 형식]&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9d2117a2fe3dfcf673671a81b3671efcbe0a271f" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;setq&lt;/strong&gt;&lt;em&gt;[symbol form]&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특수 형식 : &lt;strong&gt;setq &lt;/strong&gt;&lt;em&gt;[기호 형식]&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="710c4c63cdbb60bfa6da03c856bd84f144df01db" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;unwind-protect&lt;/strong&gt;&lt;em&gt;body-form cleanup-forms&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특수 형태 : &lt;strong&gt;풀림 방지 &lt;/strong&gt;&lt;em&gt;신체 형태 정리 형태&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3098d58b88fd72b5e6f32b76f8543c72501c7b2c" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;while&lt;/strong&gt;&lt;em&gt;condition forms&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특수 양식 : &lt;em&gt;조건이 형성 &lt;/em&gt;&lt;strong&gt;되는 동안 &lt;/strong&gt;&lt;em&gt;&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7e1e24b8f0d65f442645be1a3281674f9983a9bf" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;with-no-warnings&lt;/strong&gt;&lt;em&gt;body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특수 형태 : &lt;strong&gt;경고 없음 &lt;/strong&gt;&lt;em&gt;바디&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3a750d282fc9e3c1c129e5132408d310347cc613" translate="yes" xml:space="preserve">
          <source>Special Form: &lt;strong&gt;with-suppressed-warnings&lt;/strong&gt;&lt;em&gt;warnings body&amp;hellip;&lt;/em&gt;</source>
          <target state="translated">특수 형식 : &lt;strong&gt;억제 경고 &lt;/strong&gt;&lt;em&gt;경고 본문&amp;hellip;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7fe554793910d2696857a6478cf16662776f307c" translate="yes" xml:space="preserve">
          <source>Special Forms</source>
          <target state="translated">특별 양식</target>
        </trans-unit>
        <trans-unit id="32995a271f5671167b682c661e9857ed0cb21f26" translate="yes" xml:space="preserve">
          <source>Special Read Syntax</source>
          <target state="translated">특수 읽기 구문</target>
        </trans-unit>
        <trans-unit id="e979448acfa68e3402928ac8074abbca65033811" translate="yes" xml:space="preserve">
          <source>Special characteristics of Emacs Lisp vectors.</source>
          <target state="translated">Emacs Lisp 벡터의 특별한 특성.</target>
        </trans-unit>
        <trans-unit id="631ab6a0d80a2e5b10d946e67a144774e7fee36f" translate="yes" xml:space="preserve">
          <source>Special characters in regular expressions.</source>
          <target state="translated">정규식의 특수 문자.</target>
        </trans-unit>
        <trans-unit id="dfb7c500a610654a43ffa9986af5e559842ac85d" translate="yes" xml:space="preserve">
          <source>Special considerations for putting keyboard character events in a string.</source>
          <target state="translated">키보드 문자 이벤트를 문자열에 넣을 때 특별히 고려해야 할 사항입니다.</target>
        </trans-unit>
        <trans-unit id="a65e26a0d9d19425102d97149c58a0de8c599b1f" translate="yes" xml:space="preserve">
          <source>Special events do not echo, they are never grouped into key sequences, and they never appear in the value of &lt;code&gt;last-command-event&lt;/code&gt; or &lt;code&gt;(this-command-keys)&lt;/code&gt;. They do not discard a numeric argument, they cannot be unread with &lt;code&gt;unread-command-events&lt;/code&gt;, they may not appear in a keyboard macro, and they are not recorded in a keyboard macro while you are defining one.</source>
          <target state="translated">특수 이벤트는 에코되지 않고 키 시퀀스로 그룹화되지 않으며 &lt;code&gt;last-command-event&lt;/code&gt; 또는 &lt;code&gt;(this-command-keys)&lt;/code&gt; 값에 나타나지 않습니다 . 숫자 인수를 버리지 않고 &lt;code&gt;unread-command-events&lt;/code&gt; 로 읽을 수 없으며 키보드 매크로에 나타나지 않을 수 있으며 정의하는 동안 키보드 매크로에 기록되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="35c9cade131986bafc15aeb44c11168e2d22c54a" translate="yes" xml:space="preserve">
          <source>Special events do, however, appear in &lt;code&gt;last-input-event&lt;/code&gt; immediately after they are read, and this is the way for the event&amp;rsquo;s definition to find the actual event.</source>
          <target state="translated">그러나 특수 이벤트 는 읽은 직후 &lt;code&gt;last-input-event&lt;/code&gt; 에 나타나며 , 이것이 이벤트 정의가 실제 이벤트를 찾는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="b41cf7d0adf5529b36ff0d5af40b33bd7255be1f" translate="yes" xml:space="preserve">
          <source>Special faces specifically for Font Lock.</source>
          <target state="translated">글꼴 잠금 전용 특수 얼굴.</target>
        </trans-unit>
        <trans-unit id="d4cbac2a25b292b49bb8fb8d81a6810d965938a6" translate="yes" xml:space="preserve">
          <source>Special features available through ImageMagick.</source>
          <target state="translated">ImageMagick을 통해 사용할 수있는 특수 기능.</target>
        </trans-unit>
        <trans-unit id="d4ebd1d55cc3c6af2bbc3d77deaf52c5b64f58b1" translate="yes" xml:space="preserve">
          <source>Special features for XBM format.</source>
          <target state="translated">XBM 형식의 특수 기능.</target>
        </trans-unit>
        <trans-unit id="49a48e6a7d96d610a394b51c270f5b0f0c2630fd" translate="yes" xml:space="preserve">
          <source>Special features for XPM format.</source>
          <target state="translated">XPM 형식의 특수 기능.</target>
        </trans-unit>
        <trans-unit id="ce96421098986d1c3387833e8584216f952ced04" translate="yes" xml:space="preserve">
          <source>Special forms (see &lt;a href=&quot;special-forms#Special-Forms&quot;&gt;Special Forms&lt;/a&gt;) cannot be advised, however macros can be advised, in much the same way as functions. Of course, this will not affect code that has already been macro-expanded, so you need to make sure the advice is installed before the macro is expanded.</source>
          <target state="translated">특수 양식 ( &lt;a href=&quot;special-forms#Special-Forms&quot;&gt;특수 양식&lt;/a&gt; 참조 )은 권장 할 수 없지만 매크로는 함수와 거의 같은 방식으로 권장 할 수 있습니다. 물론 이것은 이미 매크로가 확장 된 코드에 영향을 미치지 않으므로 매크로를 확장하기 전에 조언이 설치되어 있는지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="381bcea190328fdafd41de9d29813da335795c49" translate="yes" xml:space="preserve">
          <source>Special forms are idiosyncratic primitives, most of them extremely important.</source>
          <target state="translated">특수한 형태는 특이한 프리미티브이며 대부분이 매우 중요합니다.</target>
        </trans-unit>
        <trans-unit id="960ddd3ea67df4c0dd9fc8ab2db6662ae9b2cb58" translate="yes" xml:space="preserve">
          <source>Special handling for certain file names.</source>
          <target state="translated">특정 파일 이름에 대한 특수 처리.</target>
        </trans-unit>
        <trans-unit id="ae3db7d64326863f9a7f4cdcf1d1dab40cab252c" translate="yes" xml:space="preserve">
          <source>Special mode is a basic major mode for buffers containing text that is produced specially by Emacs, rather than directly from a file. Major modes derived from Special mode are given a &lt;code&gt;mode-class&lt;/code&gt; property of &lt;code&gt;special&lt;/code&gt; (see &lt;a href=&quot;major-mode-conventions#Major-Mode-Conventions&quot;&gt;Major Mode Conventions&lt;/a&gt;).</source>
          <target state="translated">특수 모드는 파일에서 직접 생성하는 것이 아니라 Emacs에 의해 특별히 생성 된 텍스트를 포함하는 버퍼의 기본 주 모드입니다. 특수 모드에서 파생 된 주요 모드는 주어진 &lt;code&gt;mode-class&lt;/code&gt; 의 프로퍼티 &lt;code&gt;special&lt;/code&gt; (참조 &lt;a href=&quot;major-mode-conventions#Major-Mode-Conventions&quot;&gt;주요 모드 규약&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="a11ed3467ae734249d893ce27e9f9d8355d65572" translate="yes" xml:space="preserve">
          <source>Special mode sets the buffer to read-only. Its keymap defines several common bindings, including</source>
          <target state="translated">특수 모드는 버퍼를 읽기 전용으로 설정합니다. 키맵은 다음과 같은 몇 가지 공통 바인딩을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="023740e0bfa228fee2e375771742c38f7ad27ac7" translate="yes" xml:space="preserve">
          <source>Special windows on a frame&amp;rsquo;s sides.</source>
          <target state="translated">프레임 측면의 특수 창.</target>
        </trans-unit>
        <trans-unit id="fdc407e36762e77e19b2828c49fde87d21246a96" translate="yes" xml:space="preserve">
          <source>Specialized modes sometimes need to let the user access from the same buffer several vastly different types of text. For example, you may need to display a summary of the buffer text, in addition to letting the user access the text itself.</source>
          <target state="translated">특수 모드에서는 사용자가 동일한 버퍼에서 여러 가지 매우 다른 유형의 텍스트에 액세스 할 수 있어야하는 경우가 있습니다. 예를 들어, 사용자가 텍스트 자체에 액세스 할 수 있도록 허용하는 것 외에도 버퍼 텍스트의 요약을 표시해야 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ccf1fc488b26672b571c1080b97df2f45de5a0c" translate="yes" xml:space="preserve">
          <source>Specification Examples</source>
          <target state="translated">사양 예</target>
        </trans-unit>
        <trans-unit id="5eb9e3c30477a5fe434b68d862daeee8e474b44a" translate="yes" xml:space="preserve">
          <source>Specification List</source>
          <target state="translated">사양 목록</target>
        </trans-unit>
        <trans-unit id="a5593f8de02c19653020dce1d12d690c799c5441" translate="yes" xml:space="preserve">
          <source>Specified Spaces</source>
          <target state="translated">지정된 공간</target>
        </trans-unit>
        <trans-unit id="c460382d47c60bbab80f4be53bc9235bdb3b3bc2" translate="yes" xml:space="preserve">
          <source>Specifies a general edge-detection algorithm. &lt;var&gt;matrix&lt;/var&gt; must be either a nine-element list or a nine-element vector of numbers. A pixel at position &lt;em&gt;x/y&lt;/em&gt; in the transformed image is computed from original pixels around that position. &lt;var&gt;matrix&lt;/var&gt; specifies, for each pixel in the neighborhood of &lt;em&gt;x/y&lt;/em&gt;, a factor with which that pixel will influence the transformed pixel; element &lt;em&gt;0&lt;/em&gt; specifies the factor for the pixel at &lt;em&gt;x-1/y-1&lt;/em&gt;, element &lt;em&gt;1&lt;/em&gt; the factor for the pixel at &lt;em&gt;x/y-1&lt;/em&gt; etc., as shown below:</source>
          <target state="translated">일반적인 가장자리 감지 알고리즘을 지정합니다. &lt;var&gt;matrix&lt;/var&gt; 은 요소를 9 개 가진 목록이거나 숫자로 구성된 요소를 9 개 가진 벡터 여야합니다. 변환 된 이미지의 &lt;em&gt;x / y&lt;/em&gt; 위치 에있는 픽셀은 해당 위치 주변의 원래 픽셀에서 계산됩니다. &lt;var&gt;matrix&lt;/var&gt; 은 &lt;em&gt;x / y&lt;/em&gt; 근처의 각 픽셀에 대해 해당 픽셀이 변환 된 픽셀에 영향을 미치는 요소를 지정합니다. 다음과 같이 요소 &lt;em&gt;0&lt;/em&gt; 은 &lt;em&gt;x-1 / y-1&lt;/em&gt; 의 픽셀에 대한 요소, 요소 &lt;em&gt;1&lt;/em&gt; 은 &lt;em&gt;x / y-1&lt;/em&gt; 의 픽셀에 대한 요소 등을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="c87cac3d707e8c047e07450d950a094d6195f82f" translate="yes" xml:space="preserve">
          <source>Specifies a rotation angle in degrees. Only multiples of 90 degrees are supported, unless the image type is &lt;code&gt;imagemagick&lt;/code&gt;. Positive values rotate clockwise, negative values counter-clockwise. Rotation is performed after scaling and cropping.</source>
          <target state="translated">회전 각도를도 단위로 지정합니다. 이미지 유형이 &lt;code&gt;imagemagick&lt;/code&gt; 이 아닌 경우 90 도의 배수 만 지원됩니다 . 양수 값은 시계 방향으로, 음수 값은 시계 반대 방향으로 회전합니다. 크기 조정 및 자르기 후에 회전이 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="4aee6143bc2bd5feebcf2efeac77c99ee7e8f50f" translate="yes" xml:space="preserve">
          <source>Specifies that the space should be wide enough to reach &lt;var&gt;hpos&lt;/var&gt;. If &lt;var&gt;hpos&lt;/var&gt; is a number, it is measured in units of the normal character width. &lt;var&gt;hpos&lt;/var&gt; can also be a &lt;em&gt;pixel width&lt;/em&gt; specification (see &lt;a href=&quot;pixel-specification#Pixel-Specification&quot;&gt;Pixel Specification&lt;/a&gt;).</source>
          <target state="translated">공간이 &lt;var&gt;hpos&lt;/var&gt; 에 도달 할만 큼 충분히 넓어야 함을 지정합니다 . 경우 &lt;var&gt;hpos&lt;/var&gt; 숫자이며, 이는 통상의 문자 폭의 단위로 측정된다. &lt;var&gt;hpos&lt;/var&gt; 는 &lt;em&gt;픽셀 너비&lt;/em&gt; 사양 일 수도 있습니다 ( &lt;a href=&quot;pixel-specification#Pixel-Specification&quot;&gt;픽셀 사양&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="af65e1940b6f6f49864ab7c6f10471c95d20fc9d" translate="yes" xml:space="preserve">
          <source>Specifies that the width of the stretch should be computed from the first character in the group of consecutive characters that have the same &lt;code&gt;display&lt;/code&gt; property. The space width is the pixel width of that character, multiplied by &lt;var&gt;factor&lt;/var&gt;. (On text-mode terminals, the &amp;ldquo;pixel width&amp;rdquo; of a character is usually 1, but it could be more for TABs and double-width CJK characters.)</source>
          <target state="translated">&lt;code&gt;display&lt;/code&gt; 속성 이 동일한 연속 문자 그룹의 첫 번째 문자에서 늘이기 너비를 계산하도록 지정합니다 . 공간 너비는 해당 문자의 픽셀 너비에 &lt;var&gt;factor&lt;/var&gt; 를 곱한 값 입니다. (텍스트 모드 터미널에서 문자의 &quot;픽셀 너비&quot;는 일반적으로 1이지만 TAB 및 이중 너비 CJK 문자의 경우 더 많을 수 있습니다.)</target>
        </trans-unit>
        <trans-unit id="028ccf57e504846c4e6e25ccbd41fcfe42d107e2" translate="yes" xml:space="preserve">
          <source>Specifies the Laplace edge detection algorithm, which blurs out small differences in color while highlighting larger differences. People sometimes consider this useful for displaying the image for a disabled button.</source>
          <target state="translated">색상의 작은 차이를 흐리게하는 동시에 더 큰 차이를 강조하는 Laplace 가장자리 감지 알고리즘을 지정합니다. 사람들은 때때로이 기능이 비활성화 된 버튼의 이미지를 표시하는 데 유용하다고 생각합니다.</target>
        </trans-unit>
        <trans-unit id="bc407ef25740da3fa1a0505290eb4ab5301771f9" translate="yes" xml:space="preserve">
          <source>Specifies the X, Y location on the screen that the notification should point to. Both arguments must be used together.</source>
          <target state="translated">알림이 가리켜 야하는 화면의 X, Y 위치를 지정합니다. 두 인수를 함께 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="e3af67db9a104a26ab8a8853f40e90fca504dbe8" translate="yes" xml:space="preserve">
          <source>Specifies the height of the space, multiplying the ordinary height of the text having this display specification by &lt;var&gt;factor&lt;/var&gt;.</source>
          <target state="translated">이 표시 사양을 갖는 텍스트의 일반 높이에 &lt;var&gt;factor&lt;/var&gt; 를 곱하여 공간의 높이를 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="f316d5722277c9d536971b86e6e3aa448757baae" translate="yes" xml:space="preserve">
          <source>Specifies the height of the space. If &lt;var&gt;height&lt;/var&gt; is a number, it specifies that the space height should be &lt;var&gt;height&lt;/var&gt; times the normal character height. The &lt;var&gt;height&lt;/var&gt; may also be a &lt;em&gt;pixel height&lt;/em&gt; specification (see &lt;a href=&quot;pixel-specification#Pixel-Specification&quot;&gt;Pixel Specification&lt;/a&gt;).</source>
          <target state="translated">공간의 높이를 지정합니다. 경우 &lt;var&gt;height&lt;/var&gt; 숫자, 그것은 공간의 높이가되어야한다고 지정 &lt;var&gt;height&lt;/var&gt; 배 일반 문자 높이입니다. &lt;var&gt;height&lt;/var&gt; 또한있을 수 &lt;em&gt;픽셀 높이&lt;/em&gt; 사양 (참조 &lt;a href=&quot;pixel-specification#Pixel-Specification&quot;&gt;픽셀 사양&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="4f6cc19ca5d7ff59d8bb0596de173853be4c4933" translate="yes" xml:space="preserve">
          <source>Specifies transforming the image so that it looks disabled.</source>
          <target state="translated">비활성화 된 것처럼 보이도록 이미지를 변형하도록 지정합니다.</target>
        </trans-unit>
        <trans-unit id="515bc75e814e1f2eb30e8f26c42e8ec559c31531" translate="yes" xml:space="preserve">
          <source>Specify &lt;var&gt;getfunction&lt;/var&gt; as the way to extract the value of this option. The function &lt;var&gt;getfunction&lt;/var&gt; should take one argument, a symbol, and should return whatever customize should use as the current value for that symbol (which need not be the symbol&amp;rsquo;s Lisp value). The default is &lt;code&gt;default-value&lt;/code&gt;.</source>
          <target state="translated">이 옵션의 값을 추출하는 방법으로 &lt;var&gt;getfunction&lt;/var&gt; 을 지정 하십시오 . &lt;var&gt;getfunction&lt;/var&gt; 함수 는 하나의 인수, 기호를 가져와야 하며 해당 기호의 현재 값으로 사용할 수있는 customize를 반환해야합니다 (심볼의 Lisp 값일 필요는 없음). 기본값은 &lt;code&gt;default-value&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="62a10d9d01e077e02b74d3e10b9c44659bda6895" translate="yes" xml:space="preserve">
          <source>Specify &lt;var&gt;setfunction&lt;/var&gt; as the way to change the value of this option when using the Customize interface. The function &lt;var&gt;setfunction&lt;/var&gt; should take two arguments, a symbol (the option name) and the new value, and should do whatever is necessary to update the value properly for this option (which may not mean simply setting the option as a Lisp variable); preferably, though, it should not modify its value argument destructively. The default for &lt;var&gt;setfunction&lt;/var&gt; is &lt;code&gt;set-default&lt;/code&gt;.</source>
          <target state="translated">사용자 정의 인터페이스를 사용할 때이 옵션의 값을 변경하는 방법으로 &lt;var&gt;setfunction&lt;/var&gt; 을 지정 하십시오 . 함수 &lt;var&gt;setfunction&lt;/var&gt; 은 두 개의 인수, 기호 (옵션 이름)와 새 값을 취해야 하며이 옵션에 대한 값을 적절하게 업데이트하는 데 필요한 모든 작업을 수행해야합니다 (이는 단순히 옵션을 Lisp 변수로 설정하는 것을 의미하지 않을 수도 있음). 그러나 가급적이면 값 인수를 파괴적으로 수정해서는 안됩니다. &lt;var&gt;setfunction&lt;/var&gt; 의 기본값 은 &lt;code&gt;set-default&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="4684bb69d362aacee163a5fb8f8d05ded24f661e" translate="yes" xml:space="preserve">
          <source>Specify a &lt;code&gt;nil&lt;/code&gt; value for &lt;code&gt;byte-compile-dynamic-docstrings&lt;/code&gt; as a local variable in each of these files, and load them with either</source>
          <target state="translated">지정 &lt;code&gt;nil&lt;/code&gt; 가치 &lt;code&gt;byte-compile-dynamic-docstrings&lt;/code&gt; 각 파일에 로컬 변수로서, 그리고 하나로로드</target>
        </trans-unit>
        <trans-unit id="72cea31e957edd3ab4c1af7eab7a10a952b9fe15" translate="yes" xml:space="preserve">
          <source>Specify a validation function for input. &lt;var&gt;function&lt;/var&gt; takes a widget as an argument, and should return &lt;code&gt;nil&lt;/code&gt; if the widget&amp;rsquo;s current value is valid for the widget. Otherwise, it should return the widget containing the invalid data, and set that widget&amp;rsquo;s &lt;code&gt;:error&lt;/code&gt; property to a string explaining the error.</source>
          <target state="translated">입력에 대한 유효성 검사 함수를 지정합니다. &lt;var&gt;function&lt;/var&gt; 는 위젯을 인수로 취하고 위젯의 현재 값이 위젯에 유효한 경우 &lt;code&gt;nil&lt;/code&gt; 을 반환해야합니다 . 그렇지 않으면 잘못된 데이터가 포함 된 위젯을 반환하고 해당 위젯의 &lt;code&gt;:error&lt;/code&gt; 속성을 오류를 설명하는 문자열로 설정해야 합니다.</target>
        </trans-unit>
        <trans-unit id="c1c2059990e1af97e24b8268f5484096a66daf30" translate="yes" xml:space="preserve">
          <source>Specify argument evaluation for macros and defining forms.</source>
          <target state="translated">매크로 및 정의 양식에 대한 인수 평가를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="5e7f40363bb09ec4e654bbbc611da28c2b3b95ab" translate="yes" xml:space="preserve">
          <source>Specify how to decide whether a value matches the type. The corresponding value, &lt;var&gt;function&lt;/var&gt;, should be a function that accepts two arguments, a widget and a value; it should return non-&lt;code&gt;nil&lt;/code&gt; if the value is acceptable.</source>
          <target state="translated">값이 유형과 일치하는지 여부를 결정하는 방법을 지정하십시오. 상응하는 값인 &lt;var&gt;function&lt;/var&gt; 은 두 개의 인수 인 위젯과 값을받는 함수 여야합니다. 값이 허용되면 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값을 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="29749db886950b6f84d3bbe633d34cb766dfc8a5" translate="yes" xml:space="preserve">
          <source>Specify how to decide whether an inline value matches the type. The corresponding value, &lt;var&gt;function&lt;/var&gt;, should be a function that accepts two arguments, a widget and an inline value; it should return non-&lt;code&gt;nil&lt;/code&gt; if the value is acceptable. See &lt;a href=&quot;splicing-into-lists#Splicing-into-Lists&quot;&gt;Splicing into Lists&lt;/a&gt; for more information about inline values.</source>
          <target state="translated">인라인 값이 유형과 일치하는지 여부를 결정하는 방법을 지정하십시오. 상응하는 값인 &lt;var&gt;function&lt;/var&gt; 은 두 개의 인수, 위젯과 인라인 값을받는 함수 여야합니다. 값이 허용되면 &lt;code&gt;nil&lt;/code&gt; 이 아닌 값을 반환해야합니다 . 인라인 값에 대한 자세한 내용은 &lt;a href=&quot;splicing-into-lists#Splicing-into-Lists&quot;&gt;목록&lt;/a&gt; 에 연결을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9f950e1464906f248ea78bb47209464389968658" translate="yes" xml:space="preserve">
          <source>Specify the communication type. A value of &lt;code&gt;nil&lt;/code&gt; specifies a stream connection (the default); &lt;code&gt;datagram&lt;/code&gt; specifies a datagram connection; &lt;code&gt;seqpacket&lt;/code&gt; specifies a sequenced packet stream connection. Both connections and servers can be of these types.</source>
          <target state="translated">통신 유형을 지정하십시오. &lt;code&gt;nil&lt;/code&gt; 값은 스트림 연결을 지정합니다 (기본값). &lt;code&gt;datagram&lt;/code&gt; 은 데이터 그램 연결을 지정합니다. &lt;code&gt;seqpacket&lt;/code&gt; 은 시퀀스 된 패킷 스트림 연결을 지정합니다. 연결과 서버 모두 이러한 유형이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f948eb87ba5cab2cbdc8574577bbfd1abd4e9855" translate="yes" xml:space="preserve">
          <source>Specify the host to connect to. &lt;var&gt;host&lt;/var&gt; should be a host name or Internet address, as a string, or the symbol &lt;code&gt;local&lt;/code&gt; to specify the local host. If you specify &lt;var&gt;host&lt;/var&gt; for a server, it must specify a valid address for the local host, and only clients connecting to that address will be accepted. When using &lt;code&gt;local&lt;/code&gt;, by default IPv4 will be used, specify a &lt;var&gt;family&lt;/var&gt; of &lt;code&gt;ipv6&lt;/code&gt; to override this. To listen on all interfaces, specify an address of &amp;lsquo;</source>
          <target state="translated">연결할 호스트를 지정하십시오. &lt;var&gt;host&lt;/var&gt; 문자열, 또는 상징으로, 호스트 이름 또는 인터넷 주소 여야 &lt;code&gt;local&lt;/code&gt; 로컬 호스트를 지정합니다. 지정하면 &lt;var&gt;host&lt;/var&gt; 서버에 대해, 그것은 로컬 호스트에 유효한 주소를 지정해야하며, 해당 주소로 연결하는 클라이언트 만 허용됩니다. &lt;code&gt;local&lt;/code&gt; 을 사용 하는 경우 기본적으로 IPv4가 사용되므로 &lt;code&gt;ipv6&lt;/code&gt; &lt;var&gt;family&lt;/var&gt; 을 지정하여 이를 재정의하십시오. 모든 인터페이스에서 수신하려면 '주소를 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="71f4f50c7f93910cc89225c4c491caa2d9bc573c" translate="yes" xml:space="preserve">
          <source>Specify the list of reasonable values for use in this option. The user is not restricted to using only these values, but they are offered as convenient alternatives.</source>
          <target state="translated">이 옵션에서 사용하기에 적합한 값 목록을 지정하십시오. 사용자는 이러한 값만을 사용하는 것에 국한되지 않고 편리한 대안으로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="1c8f6097cb902bfa860acae4a5ae314d21f4e3ba" translate="yes" xml:space="preserve">
          <source>Specify which expressions of a call to macro &lt;var&gt;macro&lt;/var&gt; are forms to be evaluated. &lt;var&gt;specification&lt;/var&gt; should be the edebug specification. Neither argument is evaluated.</source>
          <target state="translated">평가할 양식 인 매크로 &lt;var&gt;macro&lt;/var&gt; 호출 표현식을 지정하십시오 . &lt;var&gt;specification&lt;/var&gt; 은 edebug 사양 이어야합니다. 두 인수 모두 평가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="839ba84a40d64e8ee86f0dc4afe80b14db5ff9c8" translate="yes" xml:space="preserve">
          <source>Specifying 0 for &lt;var&gt;startpos&lt;/var&gt; is equivalent to just specifying the symbol &lt;var&gt;variable&lt;/var&gt;. &lt;code&gt;previous-history-element&lt;/code&gt; will display the most recent element of the history list in the minibuffer. If you specify a positive &lt;var&gt;startpos&lt;/var&gt;, the minibuffer history functions behave as if &lt;code&gt;(elt &lt;var&gt;variable&lt;/var&gt; (1- &lt;var&gt;startpos&lt;/var&gt;))&lt;/code&gt; were the history element currently shown in the minibuffer.</source>
          <target state="translated">&lt;var&gt;startpos&lt;/var&gt; 에 0을 지정하는 것은 기호 &lt;var&gt;variable&lt;/var&gt; 지정하는 것과 같습니다 . &lt;code&gt;previous-history-element&lt;/code&gt; 는 미니 버퍼에있는 히스토리 목록의 가장 최근 요소를 표시합니다. 양의 &lt;var&gt;startpos&lt;/var&gt; 를 지정하면 미니 버퍼 히스토리 함수는 &lt;code&gt;(elt &lt;var&gt;variable&lt;/var&gt; (1- &lt;var&gt;startpos&lt;/var&gt;))&lt;/code&gt; 가 현재 미니 버퍼에 표시된 히스토리 요소 인 것처럼 작동합니다.</target>
        </trans-unit>
        <trans-unit id="4a168305fb5a7fea7f805b549b7e9c7ac3b81177" translate="yes" xml:space="preserve">
          <source>Specifying Indentation Rules</source>
          <target state="translated">들여 쓰기 규칙 지정</target>
        </trans-unit>
        <trans-unit id="2ea07f9d813370e214412a0edc7a7ff44f07f13f" translate="yes" xml:space="preserve">
          <source>Specifying a Coding System for One Operation</source>
          <target state="translated">하나의 작업을위한 코딩 시스템 지정</target>
        </trans-unit>
        <trans-unit id="01c334f2ab0d89384a3278a2d18e54e6153350b8" translate="yes" xml:space="preserve">
          <source>Specifying abbreviations and their expansions.</source>
          <target state="translated">약어 및 확장 지정.</target>
        </trans-unit>
        <trans-unit id="c0451957a75eeeb14b63039eba8624b7f995ab67" translate="yes" xml:space="preserve">
          <source>Specifying and retrieving a frame&amp;rsquo;s size.</source>
          <target state="translated">프레임 크기 지정 및 검색.</target>
        </trans-unit>
        <trans-unit id="b22fcdb3fe6e6cdc014c8f96611e784304f28244" translate="yes" xml:space="preserve">
          <source>Specifying bitmaps for fringe indicators.</source>
          <target state="translated">언저리 표시기에 비트 맵을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="f84c7f11200ac5c0418c43edf1cb878aa052d355" translate="yes" xml:space="preserve">
          <source>Specifying frame parameters when you make a frame.</source>
          <target state="translated">프레임을 만들 때 프레임 매개 변수를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="42ed2fe425c4cd7ae9421beca3253c2cf2dfbb43" translate="yes" xml:space="preserve">
          <source>Specifying how a function should read arguments.</source>
          <target state="translated">함수가 인수를 읽는 방법을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="6c656164aee2c5b449bfb1da9e628d90fce2efb8" translate="yes" xml:space="preserve">
          <source>Specifying how to handle macro calls.</source>
          <target state="translated">매크로 호출을 처리하는 방법을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="a692a455405264fc334b3280fc7199fdb32f1ac1" translate="yes" xml:space="preserve">
          <source>Specifying how to indent macro calls.</source>
          <target state="translated">매크로 호출 들여 쓰기 방법 지정.</target>
        </trans-unit>
        <trans-unit id="18e73ab92ab44f0797c36968cd264fb052a334af" translate="yes" xml:space="preserve">
          <source>Specifying indentation rules.</source>
          <target state="translated">들여 쓰기 규칙 지정.</target>
        </trans-unit>
        <trans-unit id="d9dc01e36fc9dce32a434fe4879c6b2f0e6a4295" translate="yes" xml:space="preserve">
          <source>Specifying initial contents for the minibuffer.</source>
          <target state="translated">미니 버퍼의 초기 내용을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="11af694aaa0cea11df9a4fd771521dcbc06c83c2" translate="yes" xml:space="preserve">
          <source>Specifying non-paired conversion.</source>
          <target state="translated">페어링되지 않은 변환 지정.</target>
        </trans-unit>
        <trans-unit id="e5782b5d2a22438283b8c84281502024932a4eb9" translate="yes" xml:space="preserve">
          <source>Specifying space width or height in pixels.</source>
          <target state="translated">공간 너비 또는 높이를 픽셀 단위로 지정합니다.</target>
        </trans-unit>
        <trans-unit id="9ba55e807f9e689d2b8d18c22d36c6d2210dbb37" translate="yes" xml:space="preserve">
          <source>Specifying the selected frame.</source>
          <target state="translated">선택한 프레임 지정.</target>
        </trans-unit>
        <trans-unit id="c1b2d99ec88d1f6334fb6be6a132518c33eb4d7a" translate="yes" xml:space="preserve">
          <source>Specifying the shape of the mouse pointer.</source>
          <target state="translated">마우스 포인터의 모양을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="70851b33272de02fb338ec00f837f669d97b2347" translate="yes" xml:space="preserve">
          <source>Specifying the type of a user option.</source>
          <target state="translated">사용자 옵션 유형 지정.</target>
        </trans-unit>
        <trans-unit id="937c6151201b1f5d82e508d785ec89136272a01c" translate="yes" xml:space="preserve">
          <source>Specifying where to put the window fringes.</source>
          <target state="translated">창 테두리를 둘 위치 지정.</target>
        </trans-unit>
        <trans-unit id="eacf33dd1dbba2544054b45a37ebf5046e43f45a" translate="yes" xml:space="preserve">
          <source>Specifying your own bitmaps to use in the fringes.</source>
          <target state="translated">가장자리에 사용할 고유 한 비트 맵을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="eb0818ecddaa0c25bcc4c00ff53114121e76b1b9" translate="yes" xml:space="preserve">
          <source>Splice elements into list with &lt;code&gt;:inline&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:inline&lt;/code&gt; 을 사용 하여 요소를 목록에 결합합니다 .</target>
        </trans-unit>
        <trans-unit id="9e026ad9740bde9c2f9a9250b6d635ef962788b2" translate="yes" xml:space="preserve">
          <source>Splicing into Lists</source>
          <target state="translated">목록에 연결</target>
        </trans-unit>
        <trans-unit id="c86997a85a2e4e6bcc0c8ab2f0c5a0e0738aef8d" translate="yes" xml:space="preserve">
          <source>Split &lt;var&gt;W2&lt;/var&gt; to make a new window &lt;var&gt;W4&lt;/var&gt; as follows.</source>
          <target state="translated">&lt;var&gt;W2&lt;/var&gt; 를 분할 하여 다음과 같이 새 창 &lt;var&gt;W4&lt;/var&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="afa39ae5c3cfb141a74b47ced7bf2abdd2a4f59e" translate="yes" xml:space="preserve">
          <source>Splitting Windows</source>
          <target state="translated">창 분할</target>
        </trans-unit>
        <trans-unit id="d5fc72176bd573116a7799e8705f3628337f367a" translate="yes" xml:space="preserve">
          <source>Stack-allocated Objects</source>
          <target state="translated">스택 할당 개체</target>
        </trans-unit>
        <trans-unit id="72240ab198d70cd61d42bbaa0e9d27acf25c7467" translate="yes" xml:space="preserve">
          <source>Standard Abbrev Tables</source>
          <target state="translated">표준 Abbrev 테이블</target>
        </trans-unit>
        <trans-unit id="50597f47ec4187895cbb88ab40860fe051b7836c" translate="yes" xml:space="preserve">
          <source>Standard Emacs commands offer completion for names of symbols, files, buffers, and processes; with the functions in this section, you can implement completion for other kinds of names.</source>
          <target state="translated">표준 Emacs 명령은 심볼, 파일, 버퍼 및 프로세스의 이름을 완성합니다. 이 섹션의 함수를 사용하여 다른 종류의 이름에 대한 완성을 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d783ea66242ef3cd946c9f2034a8f4bebff05c83" translate="yes" xml:space="preserve">
          <source>Standard Errors</source>
          <target state="translated">표준 오류</target>
        </trans-unit>
        <trans-unit id="5424378597bf7906ef1f181e45e9504769c41d42" translate="yes" xml:space="preserve">
          <source>Standard File Names</source>
          <target state="translated">표준 파일 이름</target>
        </trans-unit>
        <trans-unit id="a8edcc4f41ed8a8bc1a30b8f8e0cfa8dda2f651f" translate="yes" xml:space="preserve">
          <source>Standard Hooks</source>
          <target state="translated">표준 후크</target>
        </trans-unit>
        <trans-unit id="65c1ad63d32ec215a53648580dd58e2d4e85c925" translate="yes" xml:space="preserve">
          <source>Standard Keymaps</source>
          <target state="translated">표준 키맵</target>
        </trans-unit>
        <trans-unit id="eeaae79ae02d4fe7181ea9a557b4d2c0bfc551a4" translate="yes" xml:space="preserve">
          <source>Standard Mathematical Functions</source>
          <target state="translated">표준 수학 함수</target>
        </trans-unit>
        <trans-unit id="6facd0c91eede92c3ffa82dcd129f83fac6952fd" translate="yes" xml:space="preserve">
          <source>Standard Regular Expressions Used in Editing</source>
          <target state="translated">편집에 사용되는 표준 정규식</target>
        </trans-unit>
        <trans-unit id="9faf8f075d06d9bd7adecbbc7ecd6575f69756ff" translate="yes" xml:space="preserve">
          <source>Standard Symbol Properties</source>
          <target state="translated">표준 기호 속성</target>
        </trans-unit>
        <trans-unit id="03f876910deb2eb7852a5c86b84b4982b499a25b" translate="yes" xml:space="preserve">
          <source>Standard meanings of symbol properties.</source>
          <target state="translated">기호 속성의 표준 의미.</target>
        </trans-unit>
        <trans-unit id="279b44e04871995ca7f0773059d6da20c4382eb9" translate="yes" xml:space="preserve">
          <source>Standard unloading activities also undoes ELP profiling of functions in that library, unprovides any features provided by the library, and cancels timers held in variables defined by the library.</source>
          <target state="translated">표준 언로드 활동은 또한 해당 라이브러리에있는 함수의 ELP 프로파일 링을 실행 취소하고, 라이브러리에서 제공하는 모든 기능을 제공하지 않으며, 라이브러리에서 정의한 변수에있는 타이머를 취소합니다.</target>
        </trans-unit>
        <trans-unit id="c79ef33cf1d7aef191f658520f71ccea57173bec" translate="yes" xml:space="preserve">
          <source>Start a terminal-emulator for a serial port in a new buffer. &lt;var&gt;port&lt;/var&gt; is the name of the serial port to connect to. For example, this could be</source>
          <target state="translated">새 버퍼에서 직렬 포트 용 터미널 에뮬레이터를 시작합니다. &lt;var&gt;port&lt;/var&gt; 는 연결할 직렬 포트의 이름입니다. 예를 들어, 이것은</target>
        </trans-unit>
        <trans-unit id="2e02423f9397ae2a48b9a64dc88b1029bb0d1676" translate="yes" xml:space="preserve">
          <source>Start process in the stopped state if &lt;var&gt;bool&lt;/var&gt; is non-&lt;code&gt;nil&lt;/code&gt;. In the stopped state, a serial process does not accept incoming data, but you can send outgoing data. The stopped state is cleared by &lt;code&gt;continue-process&lt;/code&gt; and set by &lt;code&gt;stop-process&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;bool&lt;/var&gt; 이 &lt;code&gt;nil&lt;/code&gt; 이 아니면 중지 된 상태에서 프로세스를 시작합니다 . 중지 된 상태에서 직렬 프로세스는 들어오는 데이터를 받아들이지 않지만 나가는 데이터를 보낼 수 있습니다. 중지 된 상태는 &lt;code&gt;continue-process&lt;/code&gt; 에 의해 지워지고 &lt;code&gt;stop-process&lt;/code&gt; 에 의해 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="da55ea993fbfd653a1767c13a3a5738f04752ccc" translate="yes" xml:space="preserve">
          <source>Start with a plain connection, and if parameters &amp;lsquo;</source>
          <target state="translated">일반 연결로 시작하고 매개 변수 '</target>
        </trans-unit>
        <trans-unit id="8135bfaa4ff2b77fc82624f5c17de635d9f7976f" translate="yes" xml:space="preserve">
          <source>Starting Up Emacs</source>
          <target state="translated">Emacs 시작</target>
        </trans-unit>
        <trans-unit id="74062b33252335d40cb019315c4d7cb3781b2016" translate="yes" xml:space="preserve">
          <source>Starting at &lt;var&gt;file&lt;/var&gt;, go up the directory tree hierarchy looking for the first directory where &lt;var&gt;name&lt;/var&gt;, a string, exists, and return that directory. If &lt;var&gt;file&lt;/var&gt; is a file, its directory will serve as the starting point for the search; otherwise &lt;var&gt;file&lt;/var&gt; should be a directory from which to start. The function looks in the starting directory, then in its parent, then in its parent&amp;rsquo;s parent, etc., until it either finds a directory with &lt;var&gt;name&lt;/var&gt; or reaches the root directory of the filesystem without finding &lt;var&gt;name&lt;/var&gt; &amp;ndash; in the latter case the function returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;file&lt;/var&gt; 에서 시작하여 &lt;var&gt;name&lt;/var&gt; , 문자열이 존재 하는 첫 번째 디렉토리를 찾고 해당 디렉토리를 반환하는 디렉토리 트리 계층 구조로 이동합니다 . 경우 &lt;var&gt;file&lt;/var&gt; 파일, 그 디렉토리는 검색을위한 출발점이 될 것입니다; 그렇지 않으면 &lt;var&gt;file&lt;/var&gt; 은 시작할 디렉토리 여야합니다. 함수는 &lt;var&gt;name&lt;/var&gt; 이있는 디렉토리를 찾 거나 &lt;var&gt;name&lt;/var&gt; 을 찾지 않고 파일 시스템의 루트 디렉토리에 도달 할 때까지 시작 디렉토리, 그 다음 부모, 부모의 부모 등을 찾습니다 . 후자의 경우 함수는 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다. .</target>
        </trans-unit>
        <trans-unit id="2c5931c52db0f7c9b56fa981421d875aea089f4a" translate="yes" xml:space="preserve">
          <source>Starting up an asynchronous subprocess.</source>
          <target state="translated">비동기 하위 프로세스 시작.</target>
        </trans-unit>
        <trans-unit id="bd4874061d65a5fe51703b703c5dc96a5366658b" translate="yes" xml:space="preserve">
          <source>Step into the function or macro called by the form after point (&lt;code&gt;edebug-step-in&lt;/code&gt;).</source>
          <target state="translated">포인트 ( &lt;code&gt;edebug-step-in&lt;/code&gt; ) 이후 양식에서 호출되는 함수 또는 매크로로 들어갑니다 .</target>
        </trans-unit>
        <trans-unit id="7271070f43092cbdb3a2dc9d33cc6f38a4434b59" translate="yes" xml:space="preserve">
          <source>Step through evaluation, stopping before and after each expression.</source>
          <target state="translated">평가를 단계별로 수행하고 각 표현식 전후에 중지합니다.</target>
        </trans-unit>
        <trans-unit id="afb9c4219a9fca6d6695cb2f9fd74289983e822e" translate="yes" xml:space="preserve">
          <source>Step: stop at the next stop point encountered (&lt;code&gt;edebug-step-mode&lt;/code&gt;).</source>
          <target state="translated">단계 : 다음 중지 지점에서 중지합니다 ( &lt;code&gt;edebug-step-mode&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="bf3db823911d97a04808ac8d71fb80673237f37f" translate="yes" xml:space="preserve">
          <source>Stickiness of Text Properties</source>
          <target state="translated">텍스트 속성의 끈적임</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
