<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="bluebird">
    <body>
      <group id="bluebird">
        <trans-unit id="3af417935e3058a63426b311ea1e8d95c622d314" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2013&amp;ndash;2017 Petka Antonov</source>
          <target state="translated">&amp;copy; 2013&amp;ndash;2017 Petka Antonov</target>
        </trans-unit>
        <trans-unit id="603115ccd99d703f8e011f458f46d13570a39dfc" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2013&amp;ndash;2018 Petka Antonov</source>
          <target state="translated">&amp;copy; 2013&amp;ndash;2018 Petka Antonov</target>
        </trans-unit>
        <trans-unit id="dca4012771323300860d759912c606f708d72fa4" translate="yes" xml:space="preserve">
          <source>(See also &lt;a href=&quot;install&quot;&gt;Installation&lt;/a&gt;.)</source>
          <target state="translated">&lt;a href=&quot;install&quot;&gt;설치&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7c902a83e91a094073c82562050ff61f6cf5f360" translate="yes" xml:space="preserve">
          <source>.all</source>
          <target state="translated">.all</target>
        </trans-unit>
        <trans-unit id="60f30da724a2aea6cd8dccd7b043e6819fa0f14f" translate="yes" xml:space="preserve">
          <source>.all()</source>
          <target state="translated">.all()</target>
        </trans-unit>
        <trans-unit id="0cc0bb04411a7e2b555fca6f3fbef88195713467" translate="yes" xml:space="preserve">
          <source>.any</source>
          <target state="translated">.any</target>
        </trans-unit>
        <trans-unit id="6b33de0e9dba55b46253828d1c54bdb48574898b" translate="yes" xml:space="preserve">
          <source>.any()</source>
          <target state="translated">.any()</target>
        </trans-unit>
        <trans-unit id="9f13a73070c066239b7dcc4c7c1b7694917e07a3" translate="yes" xml:space="preserve">
          <source>.asCallback</source>
          <target state="translated">.asCallback</target>
        </trans-unit>
        <trans-unit id="c75c6213972bcb17fd216863726075ffb279a49e" translate="yes" xml:space="preserve">
          <source>.asCallback()</source>
          <target state="translated">.asCallback()</target>
        </trans-unit>
        <trans-unit id="4a61b4fb83c74938922238ff53433e3d14bdbc9e" translate="yes" xml:space="preserve">
          <source>.bind</source>
          <target state="translated">.bind</target>
        </trans-unit>
        <trans-unit id="856a1b3cdbdb46b1ca6e91af0585578d48848d07" translate="yes" xml:space="preserve">
          <source>.bind()</source>
          <target state="translated">.bind()</target>
        </trans-unit>
        <trans-unit id="c526e55e1424378615f1e33e71c61bbe689aeeb0" translate="yes" xml:space="preserve">
          <source>.call</source>
          <target state="translated">.call</target>
        </trans-unit>
        <trans-unit id="2a45717569a9ab68e64668f0c3871481d0f9044b" translate="yes" xml:space="preserve">
          <source>.call()</source>
          <target state="translated">.call()</target>
        </trans-unit>
        <trans-unit id="5226f901520ff7dd6ae9b2efdf8dc52db44c7fcb" translate="yes" xml:space="preserve">
          <source>.cancel</source>
          <target state="translated">.cancel</target>
        </trans-unit>
        <trans-unit id="e7736015cfa961ad4c007b073c9bb1ef33149ce2" translate="yes" xml:space="preserve">
          <source>.cancel()</source>
          <target state="translated">.cancel()</target>
        </trans-unit>
        <trans-unit id="ca13f8417b274c2a98821463fc602c8a286ed52a" translate="yes" xml:space="preserve">
          <source>.catch</source>
          <target state="translated">.catch</target>
        </trans-unit>
        <trans-unit id="54e90cf454b63fd455dbc92d24a45d3da319e1c6" translate="yes" xml:space="preserve">
          <source>.catch()</source>
          <target state="translated">.catch()</target>
        </trans-unit>
        <trans-unit id="0de640020b84d0cf2e6455fc03e21482e28f34c3" translate="yes" xml:space="preserve">
          <source>.catchReturn</source>
          <target state="translated">.catchReturn</target>
        </trans-unit>
        <trans-unit id="6532886823c2c411466d8a83eaba1d0f340ecfb1" translate="yes" xml:space="preserve">
          <source>.catchReturn()</source>
          <target state="translated">.catchReturn()</target>
        </trans-unit>
        <trans-unit id="be11f04df2b519c5391debd4faa699a4c9c61070" translate="yes" xml:space="preserve">
          <source>.catchThrow</source>
          <target state="translated">.catchThrow</target>
        </trans-unit>
        <trans-unit id="a98a9413d7e720b2bc91174c95c3bb701872871e" translate="yes" xml:space="preserve">
          <source>.catchThrow()</source>
          <target state="translated">.catchThrow()</target>
        </trans-unit>
        <trans-unit id="792a36742350180934bdae93634164ee7cd9fcc5" translate="yes" xml:space="preserve">
          <source>.delay</source>
          <target state="translated">.delay</target>
        </trans-unit>
        <trans-unit id="0aaf4e50d11e8f8a2f658430dd9d2d92ff94208a" translate="yes" xml:space="preserve">
          <source>.delay()</source>
          <target state="translated">.delay()</target>
        </trans-unit>
        <trans-unit id="3fb41e505bd80d738176588e026c287994fa20f8" translate="yes" xml:space="preserve">
          <source>.disposer</source>
          <target state="translated">.disposer</target>
        </trans-unit>
        <trans-unit id="276fd689f792e9830712cb45fd4ac97e10dc9590" translate="yes" xml:space="preserve">
          <source>.disposer()</source>
          <target state="translated">.disposer()</target>
        </trans-unit>
        <trans-unit id="7f0808e5e595e2ac6e7dce9a789fd6f943198e13" translate="yes" xml:space="preserve">
          <source>.done</source>
          <target state="translated">.done</target>
        </trans-unit>
        <trans-unit id="67d6f4bea5900694a9da207afbd2b8b08f73e678" translate="yes" xml:space="preserve">
          <source>.done()</source>
          <target state="translated">.done()</target>
        </trans-unit>
        <trans-unit id="a7f1b57a57486c7738f1db8a959664f9da1addaf" translate="yes" xml:space="preserve">
          <source>.each</source>
          <target state="translated">.each</target>
        </trans-unit>
        <trans-unit id="edb4d9320e6dbcd0975f7e0478b0eac6f5a248ab" translate="yes" xml:space="preserve">
          <source>.each()</source>
          <target state="translated">.each()</target>
        </trans-unit>
        <trans-unit id="f8721a1d2e680d85a3d74d345c089685358f0626" translate="yes" xml:space="preserve">
          <source>.error</source>
          <target state="translated">.error</target>
        </trans-unit>
        <trans-unit id="21ca3ec6472e2fc3a4b4990f30f5184c04c17d1c" translate="yes" xml:space="preserve">
          <source>.error()</source>
          <target state="translated">.error()</target>
        </trans-unit>
        <trans-unit id="d02779e940de396c7bf0c78d67cd8d1dad079c82" translate="yes" xml:space="preserve">
          <source>.filter</source>
          <target state="translated">.filter</target>
        </trans-unit>
        <trans-unit id="0b55f75d20e84ea4218ae334a687431d8b584627" translate="yes" xml:space="preserve">
          <source>.filter()</source>
          <target state="translated">.filter()</target>
        </trans-unit>
        <trans-unit id="2ab831bda499f7a780a8da0546b296e95f504dee" translate="yes" xml:space="preserve">
          <source>.finally</source>
          <target state="translated">.finally</target>
        </trans-unit>
        <trans-unit id="5f3178cf78a184a4d4b7881ae5d1a0e8e7c7b10e" translate="yes" xml:space="preserve">
          <source>.finally()</source>
          <target state="translated">.finally()</target>
        </trans-unit>
        <trans-unit id="382aa3999b494f7aaca6171442d1ba6b8de43f94" translate="yes" xml:space="preserve">
          <source>.get</source>
          <target state="translated">.get</target>
        </trans-unit>
        <trans-unit id="f8035b07e5bf0d30eb4314a6e83a9c9012930836" translate="yes" xml:space="preserve">
          <source>.get()</source>
          <target state="translated">.get()</target>
        </trans-unit>
        <trans-unit id="7ac0cfe38889ebdc25da1922f2ae9a3b84db6302" translate="yes" xml:space="preserve">
          <source>.isCancelled</source>
          <target state="translated">.isCancelled</target>
        </trans-unit>
        <trans-unit id="09fb8930674b62405225796dd66be67f2ae388ae" translate="yes" xml:space="preserve">
          <source>.isCancelled()</source>
          <target state="translated">.isCancelled()</target>
        </trans-unit>
        <trans-unit id="f192284c9b94fd9d7b30eb0c8e9a9f9868f27efe" translate="yes" xml:space="preserve">
          <source>.isFulfilled</source>
          <target state="translated">.isFulfilled</target>
        </trans-unit>
        <trans-unit id="c5b9d5f421dc9e520d637b6c0c7a1c39921479bf" translate="yes" xml:space="preserve">
          <source>.isFulfilled()</source>
          <target state="translated">.isFulfilled()</target>
        </trans-unit>
        <trans-unit id="66544f666ca02a6960c992ad89110b37104959d4" translate="yes" xml:space="preserve">
          <source>.isPending</source>
          <target state="translated">.isPending</target>
        </trans-unit>
        <trans-unit id="cacdde42f0111a3762a08922c3920d276ef69e11" translate="yes" xml:space="preserve">
          <source>.isPending()</source>
          <target state="translated">.isPending()</target>
        </trans-unit>
        <trans-unit id="3d0bccdbc85f7e4398d1b0f76d7956f317cdc802" translate="yes" xml:space="preserve">
          <source>.isRejected</source>
          <target state="translated">.isRejected</target>
        </trans-unit>
        <trans-unit id="738234307f2f86a8d0ee9a694465f0bcf760b990" translate="yes" xml:space="preserve">
          <source>.isRejected()</source>
          <target state="translated">.isRejected()</target>
        </trans-unit>
        <trans-unit id="e4912e1aa0a5b644882314cd3021272d90900a14" translate="yes" xml:space="preserve">
          <source>.map</source>
          <target state="translated">.map</target>
        </trans-unit>
        <trans-unit id="3185d17866a519bedb219fdba7b49006d6c86ef6" translate="yes" xml:space="preserve">
          <source>.map()</source>
          <target state="translated">.map()</target>
        </trans-unit>
        <trans-unit id="b495a6103dc67d49d3fdccedeb6982d418d2e531" translate="yes" xml:space="preserve">
          <source>.mapSeries</source>
          <target state="translated">.mapSeries</target>
        </trans-unit>
        <trans-unit id="597ed6e5ccadf60925e37e88277ad330e0990442" translate="yes" xml:space="preserve">
          <source>.mapSeries()</source>
          <target state="translated">.mapSeries()</target>
        </trans-unit>
        <trans-unit id="0d7bd126bf6358cf3578e9775ae6fdbdc011c65a" translate="yes" xml:space="preserve">
          <source>.props</source>
          <target state="translated">.props</target>
        </trans-unit>
        <trans-unit id="2754e5782485dadee6f6cdc682297c0245c652dd" translate="yes" xml:space="preserve">
          <source>.props()</source>
          <target state="translated">.props()</target>
        </trans-unit>
        <trans-unit id="62d16a55db9ea0db85357e2ada99baaae86bd58d" translate="yes" xml:space="preserve">
          <source>.reason</source>
          <target state="translated">.reason</target>
        </trans-unit>
        <trans-unit id="da66488e14c3776e7538e9e703a7d1565433db6c" translate="yes" xml:space="preserve">
          <source>.reason()</source>
          <target state="translated">.reason()</target>
        </trans-unit>
        <trans-unit id="0fb2a0b9dfc18a2627537ea1abc5922be4d20a59" translate="yes" xml:space="preserve">
          <source>.reduce</source>
          <target state="translated">.reduce</target>
        </trans-unit>
        <trans-unit id="d0f4b4460b8db067171b431083b80dc1bb7de9b4" translate="yes" xml:space="preserve">
          <source>.reduce()</source>
          <target state="translated">.reduce()</target>
        </trans-unit>
        <trans-unit id="4ee766dad997cf53348cf64a9584c1cafd188a73" translate="yes" xml:space="preserve">
          <source>.reflect</source>
          <target state="translated">.reflect</target>
        </trans-unit>
        <trans-unit id="8c37511f0418fe07b2ed14d8dec0cca679df4155" translate="yes" xml:space="preserve">
          <source>.reflect()</source>
          <target state="translated">.reflect()</target>
        </trans-unit>
        <trans-unit id="674ab24db490f73549f69d90583cb01ec5c03c17" translate="yes" xml:space="preserve">
          <source>.return</source>
          <target state="translated">.return</target>
        </trans-unit>
        <trans-unit id="5e7ea9d4ad062634079a81e96f87819e1f7da054" translate="yes" xml:space="preserve">
          <source>.return()</source>
          <target state="translated">.return()</target>
        </trans-unit>
        <trans-unit id="88f1d25bc951b386d503368c8b72b80ccec324aa" translate="yes" xml:space="preserve">
          <source>.some</source>
          <target state="translated">.some</target>
        </trans-unit>
        <trans-unit id="a406c6b94f2b02818d5564224a8e92c8e6769bef" translate="yes" xml:space="preserve">
          <source>.some()</source>
          <target state="translated">.some()</target>
        </trans-unit>
        <trans-unit id="f384c4d051c1279243c4f86036d5e0904026cca8" translate="yes" xml:space="preserve">
          <source>.spread</source>
          <target state="translated">.spread</target>
        </trans-unit>
        <trans-unit id="806940ddceffcf9744d20d47f1bd16fbce4ff22c" translate="yes" xml:space="preserve">
          <source>.spread()</source>
          <target state="translated">.spread()</target>
        </trans-unit>
        <trans-unit id="0768eed242e8110cf400311382dc52019c3effb8" translate="yes" xml:space="preserve">
          <source>.suppressUnhandledRejections</source>
          <target state="translated">.suppressUnhandledRejections</target>
        </trans-unit>
        <trans-unit id="2937722c54cf04914b9b7e2109051051a8f1bf4d" translate="yes" xml:space="preserve">
          <source>.suppressUnhandledRejections()</source>
          <target state="translated">.suppressUnhandledRejections()</target>
        </trans-unit>
        <trans-unit id="64628339d634bd0092c4367fa4a121f3e88d3735" translate="yes" xml:space="preserve">
          <source>.tap</source>
          <target state="translated">.tap</target>
        </trans-unit>
        <trans-unit id="8ec03b5ff19bd2d8ace9844302870026c8848ddf" translate="yes" xml:space="preserve">
          <source>.tap()</source>
          <target state="translated">.tap()</target>
        </trans-unit>
        <trans-unit id="2146537be046cb1826d430c37ce439eb7ecf685e" translate="yes" xml:space="preserve">
          <source>.tapCatch</source>
          <target state="translated">.tapCatch</target>
        </trans-unit>
        <trans-unit id="cfc601980f8e95b51b27e1587a83fe0f9bb816ed" translate="yes" xml:space="preserve">
          <source>.tapCatch()</source>
          <target state="translated">.tapCatch()</target>
        </trans-unit>
        <trans-unit id="e7d2b9877a19e36f885fd28d3b197e6ad7958026" translate="yes" xml:space="preserve">
          <source>.then</source>
          <target state="translated">.then</target>
        </trans-unit>
        <trans-unit id="3b746a92956a266761e8d13a451cb51ad4e9e9a1" translate="yes" xml:space="preserve">
          <source>.then()</source>
          <target state="translated">.then()</target>
        </trans-unit>
        <trans-unit id="12b0c7417fcebe34ea794eb24a1c9e67a893ca9d" translate="yes" xml:space="preserve">
          <source>.throw</source>
          <target state="translated">.throw</target>
        </trans-unit>
        <trans-unit id="8ea3271e5f8836c89c2ca410ef318f54ced0bc3e" translate="yes" xml:space="preserve">
          <source>.throw()</source>
          <target state="translated">.throw()</target>
        </trans-unit>
        <trans-unit id="efe578ad7113713e917dab0001ec9c55d9e74111" translate="yes" xml:space="preserve">
          <source>.timeout</source>
          <target state="translated">.timeout</target>
        </trans-unit>
        <trans-unit id="8b0cee764e326f3a9bdca41a5ef9d7d1d10a996d" translate="yes" xml:space="preserve">
          <source>.timeout()</source>
          <target state="translated">.timeout()</target>
        </trans-unit>
        <trans-unit id="f7bb4c48b4f8fbb517eefbc2486c31bb22243a46" translate="yes" xml:space="preserve">
          <source>.value</source>
          <target state="translated">.value</target>
        </trans-unit>
        <trans-unit id="5350b65335115ee99ed4cd10e15f0b72d2a21a3e" translate="yes" xml:space="preserve">
          <source>.value()</source>
          <target state="translated">.value()</target>
        </trans-unit>
        <trans-unit id="d9321f1458c4d58c805557ac7ab0875675220405" translate="yes" xml:space="preserve">
          <source>0.10.0-0 (2013-11-17)</source>
          <target state="translated">0.10.0-0 (2013-11-17)</target>
        </trans-unit>
        <trans-unit id="95cdc1b1cdf3e3aff41dfa034c53320986b15103" translate="yes" xml:space="preserve">
          <source>0.10.0-1 (2013-11-17)</source>
          <target state="translated">0.10.0-1 (2013-11-17)</target>
        </trans-unit>
        <trans-unit id="55f31415337489cc177f30db3c24ae23d84d9f9d" translate="yes" xml:space="preserve">
          <source>0.10.1-0 (2013-11-21)</source>
          <target state="translated">0.10.1-0 (2013-11-21)</target>
        </trans-unit>
        <trans-unit id="66fb2b1bff9840d24a4e8825b00b25f87b0a7ad1" translate="yes" xml:space="preserve">
          <source>0.10.10-0 (2013-11-28)</source>
          <target state="translated">0.10.10-0 (2013-11-28)</target>
        </trans-unit>
        <trans-unit id="2f5e0f6026391951bcf30d2d498067f77a839e20" translate="yes" xml:space="preserve">
          <source>0.10.11-0 (2013-11-29)</source>
          <target state="translated">0.10.11-0 (2013-11-29)</target>
        </trans-unit>
        <trans-unit id="d294708eaab0a1bfeebd376124fb0bc0a13e6d48" translate="yes" xml:space="preserve">
          <source>0.10.11-1 (2013-11-29)</source>
          <target state="translated">0.10.11-1 (2013-11-29)</target>
        </trans-unit>
        <trans-unit id="9039554ca84588d75f24ce83e86029b6095f45cc" translate="yes" xml:space="preserve">
          <source>0.10.11-2 (2013-11-29)</source>
          <target state="translated">0.10.11-2 (2013-11-29)</target>
        </trans-unit>
        <trans-unit id="b2113784dd982378bc160cd1216a093e77bb186f" translate="yes" xml:space="preserve">
          <source>0.10.11-4 (2013-11-29)</source>
          <target state="translated">0.10.11-4 (2013-11-29)</target>
        </trans-unit>
        <trans-unit id="46b07102fe024535b930bbf3b3b486213ddd61aa" translate="yes" xml:space="preserve">
          <source>0.10.12-0 (2013-11-30)</source>
          <target state="translated">0.10.12-0 (2013-11-30)</target>
        </trans-unit>
        <trans-unit id="f50f438c65f5f660fd532fddedf8bb2d88b7b85b" translate="yes" xml:space="preserve">
          <source>0.10.13-0 (2013-11-30)</source>
          <target state="translated">0.10.13-0 (2013-11-30)</target>
        </trans-unit>
        <trans-unit id="16ba0d720322161854d88a721fd01b0d075b591c" translate="yes" xml:space="preserve">
          <source>0.10.13-1 (2013-11-30)</source>
          <target state="translated">0.10.13-1 (2013-11-30)</target>
        </trans-unit>
        <trans-unit id="b767344b96e5cb0ff4e2b51e8da5d270cbf19daa" translate="yes" xml:space="preserve">
          <source>0.10.14-0 (2013-12-01)</source>
          <target state="translated">0.10.14-0 (2013-12-01)</target>
        </trans-unit>
        <trans-unit id="dec75809e0ccd05b56363193818c39298fd9e599" translate="yes" xml:space="preserve">
          <source>0.10.2-0 (2013-11-24)</source>
          <target state="translated">0.10.2-0 (2013-11-24)</target>
        </trans-unit>
        <trans-unit id="928f4a55c1f18edad85e2ab96c3df29cb295ba69" translate="yes" xml:space="preserve">
          <source>0.10.2-1 (2013-11-24)</source>
          <target state="translated">0.10.2-1 (2013-11-24)</target>
        </trans-unit>
        <trans-unit id="68cc75e839af986056e2d606f983d58b877a0553" translate="yes" xml:space="preserve">
          <source>0.10.3-0 (2013-11-24)</source>
          <target state="translated">0.10.3-0 (2013-11-24)</target>
        </trans-unit>
        <trans-unit id="be62ce1a9aadeef87e7c134d70f16bed4770f266" translate="yes" xml:space="preserve">
          <source>0.10.4-0 (2013-11-24)</source>
          <target state="translated">0.10.4-0 (2013-11-24)</target>
        </trans-unit>
        <trans-unit id="94eb3efd9e4be66f24feec40b774ae50ffd4f12d" translate="yes" xml:space="preserve">
          <source>0.10.4-1 (2013-11-24)</source>
          <target state="translated">0.10.4-1 (2013-11-24)</target>
        </trans-unit>
        <trans-unit id="b13c4b86f7c8c6d8f0019d659bb6f54628e5f45c" translate="yes" xml:space="preserve">
          <source>0.10.5-0 (2013-11-24)</source>
          <target state="translated">0.10.5-0 (2013-11-24)</target>
        </trans-unit>
        <trans-unit id="e98bfbb321a6ae2dc7b66f35d28bd2900d510aa2" translate="yes" xml:space="preserve">
          <source>0.10.6-0 (2013-11-25)</source>
          <target state="translated">0.10.6-0 (2013-11-25)</target>
        </trans-unit>
        <trans-unit id="f863b3e22c16f38fa48751fa5ac1c2f19e369084" translate="yes" xml:space="preserve">
          <source>0.10.7-0 (2013-11-25)</source>
          <target state="translated">0.10.7-0 (2013-11-25)</target>
        </trans-unit>
        <trans-unit id="a4bc3a6fb8e47075240d083047f2490a94a4f47c" translate="yes" xml:space="preserve">
          <source>0.10.8-0 (2013-11-25)</source>
          <target state="translated">0.10.8-0 (2013-11-25)</target>
        </trans-unit>
        <trans-unit id="cc5258fd190d2aa4e640cbc9e986d92bb180b417" translate="yes" xml:space="preserve">
          <source>0.10.9-0 (2013-11-27)</source>
          <target state="translated">0.10.9-0 (2013-11-27)</target>
        </trans-unit>
        <trans-unit id="65385441dfe56da7e823e4a05626b792c901b506" translate="yes" xml:space="preserve">
          <source>0.10.9-1 (2013-11-27)</source>
          <target state="translated">0.10.9-1 (2013-11-27)</target>
        </trans-unit>
        <trans-unit id="7c124b96a5bc5e822579d6cbc7046377a57508a1" translate="yes" xml:space="preserve">
          <source>0.11.0-0 (2013-12-02)</source>
          <target state="translated">0.11.0-0 (2013-12-02)</target>
        </trans-unit>
        <trans-unit id="626c54e6c74f294363c4ec017f99ae4c194fe908" translate="yes" xml:space="preserve">
          <source>0.11.1-0 (2013-12-02)</source>
          <target state="translated">0.11.1-0 (2013-12-02)</target>
        </trans-unit>
        <trans-unit id="bb04c5a39879e889420a53cf6a58f7d457709129" translate="yes" xml:space="preserve">
          <source>0.11.2-0 (2013-12-02)</source>
          <target state="translated">0.11.2-0 (2013-12-02)</target>
        </trans-unit>
        <trans-unit id="cc0da961b4acbb36ac2040d5af862265fa64e67a" translate="yes" xml:space="preserve">
          <source>0.11.3-0 (2013-12-02)</source>
          <target state="translated">0.11.3-0 (2013-12-02)</target>
        </trans-unit>
        <trans-unit id="4dc3798aef8ac9eb42a8de79581a7e555be1c498" translate="yes" xml:space="preserve">
          <source>0.11.4-0 (2013-12-02)</source>
          <target state="translated">0.11.4-0 (2013-12-02)</target>
        </trans-unit>
        <trans-unit id="bb9c8e7a47681e040644c7c5af4dfce4fbd4dab1" translate="yes" xml:space="preserve">
          <source>0.11.4-1 (2013-12-02)</source>
          <target state="translated">0.11.4-1 (2013-12-02)</target>
        </trans-unit>
        <trans-unit id="5fac60000bd81efa6e0110bec38c520936a65819" translate="yes" xml:space="preserve">
          <source>0.11.5-0 (2013-12-03)</source>
          <target state="translated">0.11.5-0 (2013-12-03)</target>
        </trans-unit>
        <trans-unit id="3685b695998127e9e6764c961e6085196c763ed9" translate="yes" xml:space="preserve">
          <source>0.11.5-1 (2013-12-15)</source>
          <target state="translated">0.11.5-1 (2013-12-15)</target>
        </trans-unit>
        <trans-unit id="fa2404a036e1e81789296b61299d3bd95af532da" translate="yes" xml:space="preserve">
          <source>0.11.6-0 (2013-12-29)</source>
          <target state="translated">0.11.6-0 (2013-12-29)</target>
        </trans-unit>
        <trans-unit id="82d02e09b8e0d05ce67eec1350c9478e0e4c250d" translate="yes" xml:space="preserve">
          <source>0.11.6-1 (2013-12-29)</source>
          <target state="translated">0.11.6-1 (2013-12-29)</target>
        </trans-unit>
        <trans-unit id="6a62eaca226039f1a21579f622134b1ad0419f3b" translate="yes" xml:space="preserve">
          <source>0.3.0 (2013-09-06)</source>
          <target state="translated">0.3.0 (2013-09-06)</target>
        </trans-unit>
        <trans-unit id="502912fc07d4cd66cfbc15f82dfeb0852bea8af4" translate="yes" xml:space="preserve">
          <source>0.3.0-1 (2013-09-06)</source>
          <target state="translated">0.3.0-1 (2013-09-06)</target>
        </trans-unit>
        <trans-unit id="fe9228d70b99ca84ffeca74f1d54a1930992ecd3" translate="yes" xml:space="preserve">
          <source>0.4.0-0 (2013-09-06)</source>
          <target state="translated">0.4.0-0 (2013-09-06)</target>
        </trans-unit>
        <trans-unit id="b35a047045b9badbb04770b0514210ea1dec2e51" translate="yes" xml:space="preserve">
          <source>0.5.0-0 (2013-09-07)</source>
          <target state="translated">0.5.0-0 (2013-09-07)</target>
        </trans-unit>
        <trans-unit id="7b9c84395854fb2df4025c7d1375fa94ea32f45c" translate="yes" xml:space="preserve">
          <source>0.5.1-0 (2013-09-07)</source>
          <target state="translated">0.5.1-0 (2013-09-07)</target>
        </trans-unit>
        <trans-unit id="f91fccdbe85287894f57ca91bac6f5f605b06047" translate="yes" xml:space="preserve">
          <source>0.5.2-0 (2013-09-07)</source>
          <target state="translated">0.5.2-0 (2013-09-07)</target>
        </trans-unit>
        <trans-unit id="600bfb328166ad71c6c170dc2438a116be287c0a" translate="yes" xml:space="preserve">
          <source>0.5.3-0 (2013-09-07)</source>
          <target state="translated">0.5.3-0 (2013-09-07)</target>
        </trans-unit>
        <trans-unit id="fa2f7e5d5641634b29d56c877a60a9aada36add7" translate="yes" xml:space="preserve">
          <source>0.5.4-0 (2013-09-08)</source>
          <target state="translated">0.5.4-0 (2013-09-08)</target>
        </trans-unit>
        <trans-unit id="296d44b428d47a03dcd1817dabab663c1943f41f" translate="yes" xml:space="preserve">
          <source>0.5.4-1 (2013-09-08)</source>
          <target state="translated">0.5.4-1 (2013-09-08)</target>
        </trans-unit>
        <trans-unit id="6bbd605d1266431e6355f2db6ac5f9053db1efa0" translate="yes" xml:space="preserve">
          <source>0.5.5-0 (2013-09-09)</source>
          <target state="translated">0.5.5-0 (2013-09-09)</target>
        </trans-unit>
        <trans-unit id="f26c8cff7e29760d6cb7c3f0e0cf70dde132d803" translate="yes" xml:space="preserve">
          <source>0.5.5-1 (2013-09-10)</source>
          <target state="translated">0.5.5-1 (2013-09-10)</target>
        </trans-unit>
        <trans-unit id="8d6c6337b6042a663978094f3a0c5b6df269bbf4" translate="yes" xml:space="preserve">
          <source>0.5.6-0 (2013-09-10)</source>
          <target state="translated">0.5.6-0 (2013-09-10)</target>
        </trans-unit>
        <trans-unit id="38c9ba0ce17e08c1b934f009ea10bbdf75c5b08b" translate="yes" xml:space="preserve">
          <source>0.5.6-1 (2013-09-10)</source>
          <target state="translated">0.5.6-1 (2013-09-10)</target>
        </trans-unit>
        <trans-unit id="c069f4321e8a6d3e24dda17792012ef1a01329e5" translate="yes" xml:space="preserve">
          <source>0.5.7-0 (2013-09-11)</source>
          <target state="translated">0.5.7-0 (2013-09-11)</target>
        </trans-unit>
        <trans-unit id="8fd76802d924f81e0fa9503b8a8338b9d9f8862d" translate="yes" xml:space="preserve">
          <source>0.5.8-0 (2013-09-11)</source>
          <target state="translated">0.5.8-0 (2013-09-11)</target>
        </trans-unit>
        <trans-unit id="9030ff8a4aaad96f2c7444a68228ddb6a9393e43" translate="yes" xml:space="preserve">
          <source>0.5.8-1 (2013-09-11)</source>
          <target state="translated">0.5.8-1 (2013-09-11)</target>
        </trans-unit>
        <trans-unit id="279a0b946acf0c74b4a01a6fcf04b4e8e4c49ccc" translate="yes" xml:space="preserve">
          <source>0.5.9-0 (2013-09-11)</source>
          <target state="translated">0.5.9-0 (2013-09-11)</target>
        </trans-unit>
        <trans-unit id="2549b283ac48769c9069912d4e211ff368259f55" translate="yes" xml:space="preserve">
          <source>0.5.9-1 (2013-09-11)</source>
          <target state="translated">0.5.9-1 (2013-09-11)</target>
        </trans-unit>
        <trans-unit id="4bf5a244e7f74fb5a37854af9258234ff6a6d69d" translate="yes" xml:space="preserve">
          <source>0.5.9-2 (2013-09-11)</source>
          <target state="translated">0.5.9-2 (2013-09-11)</target>
        </trans-unit>
        <trans-unit id="dad74f4ac66b57b2881f001d9f53df08eb5a7188" translate="yes" xml:space="preserve">
          <source>0.5.9-3 (2013-09-11)</source>
          <target state="translated">0.5.9-3 (2013-09-11)</target>
        </trans-unit>
        <trans-unit id="b8471fc71250a13c24f1acb9b25e4915ebf689ef" translate="yes" xml:space="preserve">
          <source>0.5.9-4 (2013-09-12)</source>
          <target state="translated">0.5.9-4 (2013-09-12)</target>
        </trans-unit>
        <trans-unit id="bdae9addc30822542be5d775c231f0fb40f5cbef" translate="yes" xml:space="preserve">
          <source>0.5.9-5 (2013-09-12)</source>
          <target state="translated">0.5.9-5 (2013-09-12)</target>
        </trans-unit>
        <trans-unit id="474ca9cf9783bc5d30808dc299df51f69ba2e554" translate="yes" xml:space="preserve">
          <source>0.5.9-6 (2013-09-12)</source>
          <target state="translated">0.5.9-6 (2013-09-12)</target>
        </trans-unit>
        <trans-unit id="51f0e83023d6fc3f75f52b2899fce6f90170ebcf" translate="yes" xml:space="preserve">
          <source>0.6.0-0 (2013-09-13)</source>
          <target state="translated">0.6.0-0 (2013-09-13)</target>
        </trans-unit>
        <trans-unit id="98b893c892d935801aa28b9b9834aec986114bde" translate="yes" xml:space="preserve">
          <source>0.6.1-0 (2013-09-14)</source>
          <target state="translated">0.6.1-0 (2013-09-14)</target>
        </trans-unit>
        <trans-unit id="7b29a3d29df678fff83c8ca3dcbb248fd2f254fe" translate="yes" xml:space="preserve">
          <source>0.6.2-0 (2013-09-14)</source>
          <target state="translated">0.6.2-0 (2013-09-14)</target>
        </trans-unit>
        <trans-unit id="abdced6c0466b2c8d89cdd14060cbc47bf4c5c06" translate="yes" xml:space="preserve">
          <source>0.6.2-1 (2013-09-14)</source>
          <target state="translated">0.6.2-1 (2013-09-14)</target>
        </trans-unit>
        <trans-unit id="736400bdb114ad9ed86b9c014aec6bc907e1b3f7" translate="yes" xml:space="preserve">
          <source>0.6.3-0 (2013-09-15)</source>
          <target state="translated">0.6.3-0 (2013-09-15)</target>
        </trans-unit>
        <trans-unit id="9ff3d209dce935fbebcdab0b72d8375d264bb451" translate="yes" xml:space="preserve">
          <source>0.6.3-1 (2013-09-16)</source>
          <target state="translated">0.6.3-1 (2013-09-16)</target>
        </trans-unit>
        <trans-unit id="53622232d1be9ff4ea4f7aabf02880c4937e5b6a" translate="yes" xml:space="preserve">
          <source>0.6.3-2 (2013-09-16)</source>
          <target state="translated">0.6.3-2 (2013-09-16)</target>
        </trans-unit>
        <trans-unit id="0dcd80da62fe009a7c055f0ca868a13d2d7ee70e" translate="yes" xml:space="preserve">
          <source>0.6.3-3 (2013-09-18)</source>
          <target state="translated">0.6.3-3 (2013-09-18)</target>
        </trans-unit>
        <trans-unit id="426c64d7c7d3ddc0f2ade87642fe2331590ac07d" translate="yes" xml:space="preserve">
          <source>0.6.3-4 (2013-09-18)</source>
          <target state="translated">0.6.3-4 (2013-09-18)</target>
        </trans-unit>
        <trans-unit id="77365394918263f2b0cad59aa7500f690eceb655" translate="yes" xml:space="preserve">
          <source>0.6.4-0 (2013-09-18)</source>
          <target state="translated">0.6.4-0 (2013-09-18)</target>
        </trans-unit>
        <trans-unit id="70547a7f92b089694f08a60a2b48d477329bd097" translate="yes" xml:space="preserve">
          <source>0.6.4-1 (2013-09-18)</source>
          <target state="translated">0.6.4-1 (2013-09-18)</target>
        </trans-unit>
        <trans-unit id="d455f03c0b66c59a6cf42e683397636836a893f0" translate="yes" xml:space="preserve">
          <source>0.6.5-0 (2013-09-18)</source>
          <target state="translated">0.6.5-0 (2013-09-18)</target>
        </trans-unit>
        <trans-unit id="cfe95ccfc4b848668494e351f28dcd32ae76b6ae" translate="yes" xml:space="preserve">
          <source>0.6.5-1 (2013-09-18)</source>
          <target state="translated">0.6.5-1 (2013-09-18)</target>
        </trans-unit>
        <trans-unit id="c17c664186645c601d86b973ed04a4bc03e13fa3" translate="yes" xml:space="preserve">
          <source>0.6.5-2 (2013-09-20)</source>
          <target state="translated">0.6.5-2 (2013-09-20)</target>
        </trans-unit>
        <trans-unit id="bdcfcbea9fc753ce34b0d7a9570f39fd8f2e4d05" translate="yes" xml:space="preserve">
          <source>0.7.0-0 (2013-09-23)</source>
          <target state="translated">0.7.0-0 (2013-09-23)</target>
        </trans-unit>
        <trans-unit id="08ae9c83377f63ac5881f47512a0f3572d7bc998" translate="yes" xml:space="preserve">
          <source>0.7.0-1 (2013-09-23)</source>
          <target state="translated">0.7.0-1 (2013-09-23)</target>
        </trans-unit>
        <trans-unit id="557709ea9bd476790b710b5dfe7134fa2a29c5aa" translate="yes" xml:space="preserve">
          <source>0.7.1-0 (2013-09-24)</source>
          <target state="translated">0.7.1-0 (2013-09-24)</target>
        </trans-unit>
        <trans-unit id="020d9799bb5f23f5d8791181382d77187fd52a63" translate="yes" xml:space="preserve">
          <source>0.7.1-1 (2013-09-24)</source>
          <target state="translated">0.7.1-1 (2013-09-24)</target>
        </trans-unit>
        <trans-unit id="4feb4595d0e9a72b6fea365cb77c6b6a2ba25dd8" translate="yes" xml:space="preserve">
          <source>0.7.1-2 (2013-09-24)</source>
          <target state="translated">0.7.1-2 (2013-09-24)</target>
        </trans-unit>
        <trans-unit id="f2c7a84d0f2503977704a2b75e73533453dc4fd2" translate="yes" xml:space="preserve">
          <source>0.7.1-3 (2013-09-25)</source>
          <target state="translated">0.7.1-3 (2013-09-25)</target>
        </trans-unit>
        <trans-unit id="3b37f58ec1a25ffae44a1424ce0fd43fe47535be" translate="yes" xml:space="preserve">
          <source>0.7.1-4 (2013-09-25)</source>
          <target state="translated">0.7.1-4 (2013-09-25)</target>
        </trans-unit>
        <trans-unit id="5d935dcca5b83783fe4613af8d409c2c21fde322" translate="yes" xml:space="preserve">
          <source>0.7.1-5 (2013-09-26)</source>
          <target state="translated">0.7.1-5 (2013-09-26)</target>
        </trans-unit>
        <trans-unit id="ae53b44ce9851b1d13b18b083a92323da7e95394" translate="yes" xml:space="preserve">
          <source>0.7.10-0 (2013-10-05)</source>
          <target state="translated">0.7.10-0 (2013-10-05)</target>
        </trans-unit>
        <trans-unit id="4aac79005a8df69c44b5761309f76face976e516" translate="yes" xml:space="preserve">
          <source>0.7.10-1 (2013-10-05)</source>
          <target state="translated">0.7.10-1 (2013-10-05)</target>
        </trans-unit>
        <trans-unit id="581d4600891c467f980e48c32caea9fe6abb4787" translate="yes" xml:space="preserve">
          <source>0.7.11-0 (2013-10-08)</source>
          <target state="translated">0.7.11-0 (2013-10-08)</target>
        </trans-unit>
        <trans-unit id="66a68a720afaae8434a9993e7793c03ebc187f30" translate="yes" xml:space="preserve">
          <source>0.7.12-0 (2013-10-08)</source>
          <target state="translated">0.7.12-0 (2013-10-08)</target>
        </trans-unit>
        <trans-unit id="5b79f400af75ff94f90ae5a8042a37d1ca68c8e7" translate="yes" xml:space="preserve">
          <source>0.7.12-1 (2013-10-09)</source>
          <target state="translated">0.7.12-1 (2013-10-09)</target>
        </trans-unit>
        <trans-unit id="d0f0cd6d378c562cf21709816fdc87e7ad7330b4" translate="yes" xml:space="preserve">
          <source>0.7.12-2 (2013-10-09)</source>
          <target state="translated">0.7.12-2 (2013-10-09)</target>
        </trans-unit>
        <trans-unit id="3e5a7e9f65ecb25cb57c0f867c01a075b7b939f4" translate="yes" xml:space="preserve">
          <source>0.7.2-0 (2013-09-27)</source>
          <target state="translated">0.7.2-0 (2013-09-27)</target>
        </trans-unit>
        <trans-unit id="7f50eee6ae33d484be7cd2452a8c8ed3c90f85a7" translate="yes" xml:space="preserve">
          <source>0.7.3-0 (2013-09-27)</source>
          <target state="translated">0.7.3-0 (2013-09-27)</target>
        </trans-unit>
        <trans-unit id="bf4ee5cc3aa0d11643ba0b84e74584abf22ecbc2" translate="yes" xml:space="preserve">
          <source>0.7.3-1 (2013-09-28)</source>
          <target state="translated">0.7.3-1 (2013-09-28)</target>
        </trans-unit>
        <trans-unit id="ab7d9351ddba7dd715b7e9339d8454da6814d793" translate="yes" xml:space="preserve">
          <source>0.7.4-0 (2013-09-28)</source>
          <target state="translated">0.7.4-0 (2013-09-28)</target>
        </trans-unit>
        <trans-unit id="a41927f39a9bec841ac1f8bab215fca8bd303064" translate="yes" xml:space="preserve">
          <source>0.7.4-1 (2013-09-28)</source>
          <target state="translated">0.7.4-1 (2013-09-28)</target>
        </trans-unit>
        <trans-unit id="f14f43b369c727607b984595b9648e0e56728243" translate="yes" xml:space="preserve">
          <source>0.7.5-0 (2013-09-28)</source>
          <target state="translated">0.7.5-0 (2013-09-28)</target>
        </trans-unit>
        <trans-unit id="8d85cf0b2f3cf7386448751309ec78019eee32d4" translate="yes" xml:space="preserve">
          <source>0.7.6-0 (2013-09-29)</source>
          <target state="translated">0.7.6-0 (2013-09-29)</target>
        </trans-unit>
        <trans-unit id="e12869cdbdcc6864a355fff3899aaecfb9369c79" translate="yes" xml:space="preserve">
          <source>0.7.7-0 (2013-10-01)</source>
          <target state="translated">0.7.7-0 (2013-10-01)</target>
        </trans-unit>
        <trans-unit id="89e3edf19c33eabc36438ac0b0581d4cfe59a2ef" translate="yes" xml:space="preserve">
          <source>0.7.7-1 (2013-10-02)</source>
          <target state="translated">0.7.7-1 (2013-10-02)</target>
        </trans-unit>
        <trans-unit id="f473cbaf673cdb6e776f7e4d284d4bced1a6ac92" translate="yes" xml:space="preserve">
          <source>0.7.8-0 (2013-10-02)</source>
          <target state="translated">0.7.8-0 (2013-10-02)</target>
        </trans-unit>
        <trans-unit id="dd0265b9cde88fedb2d42302754ce694c8af4956" translate="yes" xml:space="preserve">
          <source>0.7.8-1 (2013-10-02)</source>
          <target state="translated">0.7.8-1 (2013-10-02)</target>
        </trans-unit>
        <trans-unit id="14c1f76dd1985306d699e229863ad4c171fad26c" translate="yes" xml:space="preserve">
          <source>0.7.9-0 (2013-10-03)</source>
          <target state="translated">0.7.9-0 (2013-10-03)</target>
        </trans-unit>
        <trans-unit id="5857b7ef87c6492c6c9e88880cb84a02d168f29f" translate="yes" xml:space="preserve">
          <source>0.7.9-1 (2013-10-03)</source>
          <target state="translated">0.7.9-1 (2013-10-03)</target>
        </trans-unit>
        <trans-unit id="6a8fed524b6d54b736a34938a0008ed1ec52b392" translate="yes" xml:space="preserve">
          <source>0.8.0-0 (2013-10-09)</source>
          <target state="translated">0.8.0-0 (2013-10-09)</target>
        </trans-unit>
        <trans-unit id="ad3e86d3ff10e2abf93cdfcbd94b83a08f892a84" translate="yes" xml:space="preserve">
          <source>0.8.0-1 (2013-10-09)</source>
          <target state="translated">0.8.0-1 (2013-10-09)</target>
        </trans-unit>
        <trans-unit id="f5f95dc86bdb3d205361198a062acadb3ddda1f4" translate="yes" xml:space="preserve">
          <source>0.8.0-2 (2013-10-10)</source>
          <target state="translated">0.8.0-2 (2013-10-10)</target>
        </trans-unit>
        <trans-unit id="089bf123e80c3bc98498a7674dfad5d3e0166928" translate="yes" xml:space="preserve">
          <source>0.8.0-3 (2013-10-10)</source>
          <target state="translated">0.8.0-3 (2013-10-10)</target>
        </trans-unit>
        <trans-unit id="324441923f593a9d968dbabe3c3ab0e440761bc6" translate="yes" xml:space="preserve">
          <source>0.8.1-0 (2013-10-11)</source>
          <target state="translated">0.8.1-0 (2013-10-11)</target>
        </trans-unit>
        <trans-unit id="1d417fbfedd02f21464acfcd2bdc699f8fb7ecef" translate="yes" xml:space="preserve">
          <source>0.8.2-0 (2013-10-12)</source>
          <target state="translated">0.8.2-0 (2013-10-12)</target>
        </trans-unit>
        <trans-unit id="ac4ccc10bbab6908a9ef13938fb40cbba0764979" translate="yes" xml:space="preserve">
          <source>0.8.2-1 (2013-10-12)</source>
          <target state="translated">0.8.2-1 (2013-10-12)</target>
        </trans-unit>
        <trans-unit id="b0fc91ebae625527496927cc8f74638670ec32f9" translate="yes" xml:space="preserve">
          <source>0.8.2-2 (2013-10-13)</source>
          <target state="translated">0.8.2-2 (2013-10-13)</target>
        </trans-unit>
        <trans-unit id="2b025886c74dfb6c57dfaea9c95bab5918710814" translate="yes" xml:space="preserve">
          <source>0.8.3-0 (2013-10-13)</source>
          <target state="translated">0.8.3-0 (2013-10-13)</target>
        </trans-unit>
        <trans-unit id="0084ac388dff8cf65183ecab4c1bd872dfb72dac" translate="yes" xml:space="preserve">
          <source>0.8.3-1 (2013-10-14)</source>
          <target state="translated">0.8.3-1 (2013-10-14)</target>
        </trans-unit>
        <trans-unit id="e39143f23ac98f5ee9706d9db0d99b00a3b3098e" translate="yes" xml:space="preserve">
          <source>0.8.3-2 (2013-10-14)</source>
          <target state="translated">0.8.3-2 (2013-10-14)</target>
        </trans-unit>
        <trans-unit id="fbca14469b617a44fb88ebe7317ed3c64fff7047" translate="yes" xml:space="preserve">
          <source>0.8.3-3 (2013-10-14)</source>
          <target state="translated">0.8.3-3 (2013-10-14)</target>
        </trans-unit>
        <trans-unit id="293ebd7492273d1c88a95e1cbb846aa9fb26c68d" translate="yes" xml:space="preserve">
          <source>0.8.4-0 (2013-10-15)</source>
          <target state="translated">0.8.4-0 (2013-10-15)</target>
        </trans-unit>
        <trans-unit id="efac954fab55d961c3b6a5965694c96e80b015a8" translate="yes" xml:space="preserve">
          <source>0.8.4-1 (2013-10-15)</source>
          <target state="translated">0.8.4-1 (2013-10-15)</target>
        </trans-unit>
        <trans-unit id="575fcee3bdb329a33a04838bcc77b9f13b23dccf" translate="yes" xml:space="preserve">
          <source>0.8.5-0 (2013-10-16)</source>
          <target state="translated">0.8.5-0 (2013-10-16)</target>
        </trans-unit>
        <trans-unit id="f492cf47d19109c0fe324b0877f63c2d6b3dda7c" translate="yes" xml:space="preserve">
          <source>0.8.5-1 (2013-10-17)</source>
          <target state="translated">0.8.5-1 (2013-10-17)</target>
        </trans-unit>
        <trans-unit id="dba6bec0115a1e252e39834c7f0013a0659a60a9" translate="yes" xml:space="preserve">
          <source>0.9.0-0 (2013-10-18)</source>
          <target state="translated">0.9.0-0 (2013-10-18)</target>
        </trans-unit>
        <trans-unit id="74accd88f514004e1614b1ad93948c5c849a0128" translate="yes" xml:space="preserve">
          <source>0.9.1-0 (2013-10-22)</source>
          <target state="translated">0.9.1-0 (2013-10-22)</target>
        </trans-unit>
        <trans-unit id="6e499432ef6abb61e5ef109406391a63842e17a1" translate="yes" xml:space="preserve">
          <source>0.9.1-1 (2013-10-22)</source>
          <target state="translated">0.9.1-1 (2013-10-22)</target>
        </trans-unit>
        <trans-unit id="dae6e6878de870ecaf8dd84dac79e6e4f6413c82" translate="yes" xml:space="preserve">
          <source>0.9.10-0 (2013-11-05)</source>
          <target state="translated">0.9.10-0 (2013-11-05)</target>
        </trans-unit>
        <trans-unit id="375170a72aa978a44633bf4af94087fa59bd7cba" translate="yes" xml:space="preserve">
          <source>0.9.10-1 (2013-11-05)</source>
          <target state="translated">0.9.10-1 (2013-11-05)</target>
        </trans-unit>
        <trans-unit id="fb0a5e2ed44135a809def2b6bb40cbcd0603b342" translate="yes" xml:space="preserve">
          <source>0.9.10-2 (2013-11-13)</source>
          <target state="translated">0.9.10-2 (2013-11-13)</target>
        </trans-unit>
        <trans-unit id="2a279f2212300c92c17a176f3e478acc6f887590" translate="yes" xml:space="preserve">
          <source>0.9.11-0 (2013-11-13)</source>
          <target state="translated">0.9.11-0 (2013-11-13)</target>
        </trans-unit>
        <trans-unit id="66a45503f1e0704066665513b77f5f124316e75a" translate="yes" xml:space="preserve">
          <source>0.9.11-1 (2013-11-14)</source>
          <target state="translated">0.9.11-1 (2013-11-14)</target>
        </trans-unit>
        <trans-unit id="86d409c9ef2ac5dc3187c57625911f2f14db4a6a" translate="yes" xml:space="preserve">
          <source>0.9.2-0 (2013-10-25)</source>
          <target state="translated">0.9.2-0 (2013-10-25)</target>
        </trans-unit>
        <trans-unit id="33855bb0e009ed3755de9bd7b251a1cd9ac35e24" translate="yes" xml:space="preserve">
          <source>0.9.2-1 (2013-10-25)</source>
          <target state="translated">0.9.2-1 (2013-10-25)</target>
        </trans-unit>
        <trans-unit id="ca7d418f988c23b08b8ab7a36a2d0cccf8a8c556" translate="yes" xml:space="preserve">
          <source>0.9.3-0 (2013-10-27)</source>
          <target state="translated">0.9.3-0 (2013-10-27)</target>
        </trans-unit>
        <trans-unit id="7d02a727bdb4e499c8990c79455fc0af044825c6" translate="yes" xml:space="preserve">
          <source>0.9.4-0 (2013-10-27)</source>
          <target state="translated">0.9.4-0 (2013-10-27)</target>
        </trans-unit>
        <trans-unit id="aeb61027c2cf8862dd3c9f5caaf799b50b362048" translate="yes" xml:space="preserve">
          <source>0.9.4-1 (2013-10-27)</source>
          <target state="translated">0.9.4-1 (2013-10-27)</target>
        </trans-unit>
        <trans-unit id="9b2e6ba44d104a9019bf9657bc2a788766e13bd2" translate="yes" xml:space="preserve">
          <source>0.9.5-0 (2013-10-27)</source>
          <target state="translated">0.9.5-0 (2013-10-27)</target>
        </trans-unit>
        <trans-unit id="a586629bdbb02b7191ced51553148c5225f7beeb" translate="yes" xml:space="preserve">
          <source>0.9.6-0 (2013-10-28)</source>
          <target state="translated">0.9.6-0 (2013-10-28)</target>
        </trans-unit>
        <trans-unit id="78534a5dfabf59a0a4145cc8513f10ff9c88fadd" translate="yes" xml:space="preserve">
          <source>0.9.7-0 (2013-10-29)</source>
          <target state="translated">0.9.7-0 (2013-10-29)</target>
        </trans-unit>
        <trans-unit id="461bebec6a64f138a5ca6d49c3bb794ffd56ec80" translate="yes" xml:space="preserve">
          <source>0.9.8-0 (2013-11-01)</source>
          <target state="translated">0.9.8-0 (2013-11-01)</target>
        </trans-unit>
        <trans-unit id="78ab8fdd132f9d2291376bb15daae472867a552a" translate="yes" xml:space="preserve">
          <source>0.9.9-0 (2013-11-05)</source>
          <target state="translated">0.9.9-0 (2013-11-05)</target>
        </trans-unit>
        <trans-unit id="e46169c636d3efef8f0ad3183c9521ec55da4765" translate="yes" xml:space="preserve">
          <source>1. DoxBee sequential</source>
          <target state="translated">1. DoxBee 순차</target>
        </trans-unit>
        <trans-unit id="5ed4948afd2475a2b8dc93e1dc83274a4e2c22a1" translate="yes" xml:space="preserve">
          <source>1. In Node.js, use &lt;code&gt;process.on&lt;/code&gt;:</source>
          <target state="translated">1. Node.js에서 &lt;code&gt;process.on&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="bc4263c8819ce365faa691a135641ecd74f6cd7d" translate="yes" xml:space="preserve">
          <source>1. You forgot to use &lt;code&gt;new&lt;/code&gt; when creating a new promise using &lt;code&gt;new Promise(resolver)&lt;/code&gt; syntax.</source>
          <target state="translated">1. &lt;code&gt;new Promise(resolver)&lt;/code&gt; 구문을 사용하여 새 약속을 만들 때 &lt;code&gt;new&lt;/code&gt; 를 사용하는 것을 잊었습니다 .</target>
        </trans-unit>
        <trans-unit id="b86cd342e46a5b54e586cef6bff9e5eea265c9f4" translate="yes" xml:space="preserve">
          <source>1.0.0 (2014-01-12)</source>
          <target state="translated">1.0.0 (2014-01-12)</target>
        </trans-unit>
        <trans-unit id="684ece7c4c2e16b563159418969a7b5e443520ee" translate="yes" xml:space="preserve">
          <source>1.0.1 (2014-01-28)</source>
          <target state="translated">1.0.1 (2014-01-28)</target>
        </trans-unit>
        <trans-unit id="daf5249bbcbc5ffc60507f1a53cd1109ebc61655" translate="yes" xml:space="preserve">
          <source>1.0.2 (2014-02-04)</source>
          <target state="translated">1.0.2 (2014-02-04)</target>
        </trans-unit>
        <trans-unit id="390f751481629bff8c70c02a14b9fc4a2eb86bd9" translate="yes" xml:space="preserve">
          <source>1.0.3 (2014-02-05)</source>
          <target state="translated">1.0.3 (2014-02-05)</target>
        </trans-unit>
        <trans-unit id="e4a000393c4a37f7b19dff7620106d0c69fe8515" translate="yes" xml:space="preserve">
          <source>1.0.4 (2014-02-09)</source>
          <target state="translated">1.0.4 (2014-02-09)</target>
        </trans-unit>
        <trans-unit id="9ecb1245f09def6e45d56bdda1aed27fb3ac4400" translate="yes" xml:space="preserve">
          <source>1.0.5 (2014-02-15)</source>
          <target state="translated">1.0.5 (2014-02-15)</target>
        </trans-unit>
        <trans-unit id="8f8c08b1ab8b1a6eed1ce9a040de30d6107cc06b" translate="yes" xml:space="preserve">
          <source>1.0.6 (2014-02-17)</source>
          <target state="translated">1.0.6 (2014-02-17)</target>
        </trans-unit>
        <trans-unit id="faf706bc6d163811d36e3d708f935d290369974d" translate="yes" xml:space="preserve">
          <source>1.0.7 (2014-02-25)</source>
          <target state="translated">1.0.7 (2014-02-25)</target>
        </trans-unit>
        <trans-unit id="98beb13cde7a273f309cb130f555cbb5d3dedf9d" translate="yes" xml:space="preserve">
          <source>1.0.8 (2014-03-03)</source>
          <target state="translated">1.0.8 (2014-03-03)</target>
        </trans-unit>
        <trans-unit id="6633c733c75f4845497d76e782f702e47d5d642b" translate="yes" xml:space="preserve">
          <source>1.1.0 (2014-03-08)</source>
          <target state="translated">1.1.0 (2014-03-08)</target>
        </trans-unit>
        <trans-unit id="d636d8ed2834864ec86790b294863cf212d4ed08" translate="yes" xml:space="preserve">
          <source>1.1.1 (2014-03-18)</source>
          <target state="translated">1.1.1 (2014-03-18)</target>
        </trans-unit>
        <trans-unit id="7f7b609269d6507356879d2f5e933c231a95fa2a" translate="yes" xml:space="preserve">
          <source>1.2.0 (2014-03-29)</source>
          <target state="translated">1.2.0 (2014-03-29)</target>
        </trans-unit>
        <trans-unit id="a521105ac132daedca16e213feab29ef9fef158c" translate="yes" xml:space="preserve">
          <source>1.2.1 (2014-03-31)</source>
          <target state="translated">1.2.1 (2014-03-31)</target>
        </trans-unit>
        <trans-unit id="a2af3cb9de9f090d0f71795abe77871276a93255" translate="yes" xml:space="preserve">
          <source>1.2.2 (2014-04-09)</source>
          <target state="translated">1.2.2 (2014-04-09)</target>
        </trans-unit>
        <trans-unit id="6624af32c93839f1fc2110fa14fac1d4c149befd" translate="yes" xml:space="preserve">
          <source>1.2.3 (2014-04-17)</source>
          <target state="translated">1.2.3 (2014-04-17)</target>
        </trans-unit>
        <trans-unit id="92d1654f2107baf05d6c529854193be5eb747243" translate="yes" xml:space="preserve">
          <source>1.2.4 (2014-04-27)</source>
          <target state="translated">1.2.4 (2014-04-27)</target>
        </trans-unit>
        <trans-unit id="9bf3c1e4f9a00d0988d825208e4abe2d292d9f0d" translate="yes" xml:space="preserve">
          <source>2. In modern browsers use &lt;code&gt;window.addEventListener&lt;/code&gt; (window context) or &lt;code&gt;self.addEventListener()&lt;/code&gt; (web worker or window context) method:</source>
          <target state="translated">2. 최신 브라우저에서는 &lt;code&gt;window.addEventListener&lt;/code&gt; (창 컨텍스트) 또는 &lt;code&gt;self.addEventListener()&lt;/code&gt; (웹 작업자 또는 창 컨텍스트) 메소드를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="28be139398c1458d4b5b0f373b73b3b7c71fdb10" translate="yes" xml:space="preserve">
          <source>2. Parallel</source>
          <target state="translated">2. 병렬</target>
        </trans-unit>
        <trans-unit id="55ad51035aea17ade3a2c7d7076a28f275eaa9a6" translate="yes" xml:space="preserve">
          <source>2. You are trying to subclass &lt;code&gt;Promise&lt;/code&gt;</source>
          <target state="translated">2. &lt;code&gt;Promise&lt;/code&gt; 을 서브 클래스하려고합니다.</target>
        </trans-unit>
        <trans-unit id="5b901a1bfcf49f232e93399c6811d5501f02393c" translate="yes" xml:space="preserve">
          <source>2.0.0 (2014-06-04)</source>
          <target state="translated">2.0.0 (2014-06-04)</target>
        </trans-unit>
        <trans-unit id="75427b72f73c61d3552a7d8fc371b10ae6cc9719" translate="yes" xml:space="preserve">
          <source>2.0.1 (2014-06-04)</source>
          <target state="translated">2.0.1 (2014-06-04)</target>
        </trans-unit>
        <trans-unit id="cf73fa4ab99cd2d7f6b7ca30b16fd6fc024fa83a" translate="yes" xml:space="preserve">
          <source>2.0.2 (2014-06-04)</source>
          <target state="translated">2.0.2 (2014-06-04)</target>
        </trans-unit>
        <trans-unit id="8963feddba2b2926b43b51fc228efdc0cb18c8df" translate="yes" xml:space="preserve">
          <source>2.0.3 (2014-06-05)</source>
          <target state="translated">2.0.3 (2014-06-05)</target>
        </trans-unit>
        <trans-unit id="9900879f5d081ee854f32596d24bc34579d61f21" translate="yes" xml:space="preserve">
          <source>2.0.4 (2014-06-05)</source>
          <target state="translated">2.0.4 (2014-06-05)</target>
        </trans-unit>
        <trans-unit id="3bcb0e9a7303a73b9cd2edc2689d67a5cdf94e64" translate="yes" xml:space="preserve">
          <source>2.0.5 (2014-06-05)</source>
          <target state="translated">2.0.5 (2014-06-05)</target>
        </trans-unit>
        <trans-unit id="5641d500de4f0affd20c3bc4a784b43b7e645c82" translate="yes" xml:space="preserve">
          <source>2.0.6 (2014-06-07)</source>
          <target state="translated">2.0.6 (2014-06-07)</target>
        </trans-unit>
        <trans-unit id="531d116dac46cc88355a7c83267674231be54fc4" translate="yes" xml:space="preserve">
          <source>2.0.7 (2014-06-08)</source>
          <target state="translated">2.0.7 (2014-06-08)</target>
        </trans-unit>
        <trans-unit id="a6a00f4f86b58b75bb3d5e9d4df0243f59fedb0b" translate="yes" xml:space="preserve">
          <source>2.1.0 (2014-06-11)</source>
          <target state="translated">2.1.0 (2014-06-11)</target>
        </trans-unit>
        <trans-unit id="bd44ceb5e31259b2205088f7525c127d8eec765d" translate="yes" xml:space="preserve">
          <source>2.1.1 (2014-06-11)</source>
          <target state="translated">2.1.1 (2014-06-11)</target>
        </trans-unit>
        <trans-unit id="28ce3e1e0001d98ce4fa3b96165e575daac2b197" translate="yes" xml:space="preserve">
          <source>2.1.2 (2014-06-15)</source>
          <target state="translated">2.1.2 (2014-06-15)</target>
        </trans-unit>
        <trans-unit id="7f937c3b99c5d3af4e693e459ad386eb73fd0144" translate="yes" xml:space="preserve">
          <source>2.1.3 (2014-06-18)</source>
          <target state="translated">2.1.3 (2014-06-18)</target>
        </trans-unit>
        <trans-unit id="b2fbbfc6d419c12ec7379bbe5cfa6d580bc0e170" translate="yes" xml:space="preserve">
          <source>2.10.0 (2015-09-08)</source>
          <target state="translated">2.10.0 (2015-09-08)</target>
        </trans-unit>
        <trans-unit id="2950cabd8ee1ab77749b670b388a20fbbf33fde3" translate="yes" xml:space="preserve">
          <source>2.10.1 (2015-09-21)</source>
          <target state="translated">2.10.1 (2015-09-21)</target>
        </trans-unit>
        <trans-unit id="e3be13bf6cf49238a5a68e59027790bb6f60ff28" translate="yes" xml:space="preserve">
          <source>2.10.2 (2015-10-01)</source>
          <target state="translated">2.10.2 (2015-10-01)</target>
        </trans-unit>
        <trans-unit id="cd7ec62b40bc25da8a2026f1cc0298f07af57a7b" translate="yes" xml:space="preserve">
          <source>2.11.0 (2016-08-30)</source>
          <target state="translated">2.11.0 (2016-08-30)</target>
        </trans-unit>
        <trans-unit id="64aac6840971559b6e053141fd2fde3e2c58ff61" translate="yes" xml:space="preserve">
          <source>2.2.0 (2014-07-07)</source>
          <target state="translated">2.2.0 (2014-07-07)</target>
        </trans-unit>
        <trans-unit id="7058a0390d383ee1b9429600f56ee50df16ba942" translate="yes" xml:space="preserve">
          <source>2.2.1 (2014-07-07)</source>
          <target state="translated">2.2.1 (2014-07-07)</target>
        </trans-unit>
        <trans-unit id="78cdf3d6a898ace15133eb4d59854362d09e8e55" translate="yes" xml:space="preserve">
          <source>2.2.2 (2014-07-14)</source>
          <target state="translated">2.2.2 (2014-07-14)</target>
        </trans-unit>
        <trans-unit id="f171c928c07a8e761cbe871032050a8d727c11b5" translate="yes" xml:space="preserve">
          <source>2.3.0 (2014-08-13)</source>
          <target state="translated">2.3.0 (2014-08-13)</target>
        </trans-unit>
        <trans-unit id="a85964895068ece65b4b6202fce4557b47fdc012" translate="yes" xml:space="preserve">
          <source>2.3.1 (2014-08-23)</source>
          <target state="translated">2.3.1 (2014-08-23)</target>
        </trans-unit>
        <trans-unit id="7a2b3cab8a4816af93db7a74f2ac31514301dcd8" translate="yes" xml:space="preserve">
          <source>2.3.10 (2014-10-28)</source>
          <target state="translated">2.3.10 (2014-10-28)</target>
        </trans-unit>
        <trans-unit id="554f50b6dd51a8d1208393331996a6064a8a266d" translate="yes" xml:space="preserve">
          <source>2.3.11 (2014-10-31)</source>
          <target state="translated">2.3.11 (2014-10-31)</target>
        </trans-unit>
        <trans-unit id="335fc4bb69da76533b5df85d08e1c703dc3f05c6" translate="yes" xml:space="preserve">
          <source>2.3.2 (2014-08-25)</source>
          <target state="translated">2.3.2 (2014-08-25)</target>
        </trans-unit>
        <trans-unit id="58892bcaceadf3e7c50ccc4c18546bdbe5746fa0" translate="yes" xml:space="preserve">
          <source>2.3.3 (2014-09-27)</source>
          <target state="translated">2.3.3 (2014-09-27)</target>
        </trans-unit>
        <trans-unit id="8923ae3d3722ab6ac40ed45adc9c63a8aac30ebf" translate="yes" xml:space="preserve">
          <source>2.3.4 (2014-09-27)</source>
          <target state="translated">2.3.4 (2014-09-27)</target>
        </trans-unit>
        <trans-unit id="712fb074f1b94b81199f45a8c994ee49d24e0cb7" translate="yes" xml:space="preserve">
          <source>2.3.5 (2014-10-06)</source>
          <target state="translated">2.3.5 (2014-10-06)</target>
        </trans-unit>
        <trans-unit id="aa858ceb22b0ccca81f0b663eb9041bcc2ae2e57" translate="yes" xml:space="preserve">
          <source>2.3.6 (2014-10-15)</source>
          <target state="translated">2.3.6 (2014-10-15)</target>
        </trans-unit>
        <trans-unit id="656c16308ceac62b1352adab09a9f102c2892225" translate="yes" xml:space="preserve">
          <source>2.3.7 (2014-10-25)</source>
          <target state="translated">2.3.7 (2014-10-25)</target>
        </trans-unit>
        <trans-unit id="816fe5fd1661ec620de19550ddda36fe9506d6f2" translate="yes" xml:space="preserve">
          <source>2.4.0 (2014-12-18)</source>
          <target state="translated">2.4.0 (2014-12-18)</target>
        </trans-unit>
        <trans-unit id="543bf9fa5b840079125529922b544e440fdf6ed5" translate="yes" xml:space="preserve">
          <source>2.4.1 (2014-12-20)</source>
          <target state="translated">2.4.1 (2014-12-20)</target>
        </trans-unit>
        <trans-unit id="1004af217f635178e921bca7bc6e0747ebf36b33" translate="yes" xml:space="preserve">
          <source>2.4.2 (2014-12-21)</source>
          <target state="translated">2.4.2 (2014-12-21)</target>
        </trans-unit>
        <trans-unit id="acef715c3655f602b3274635fbfbd3c4b09b8ac2" translate="yes" xml:space="preserve">
          <source>2.4.3 (2014-12-28)</source>
          <target state="translated">2.4.3 (2014-12-28)</target>
        </trans-unit>
        <trans-unit id="3a5f191a229d86b4ce6a9981dcc11ace4e75569c" translate="yes" xml:space="preserve">
          <source>2.5.0 (2014-12-28)</source>
          <target state="translated">2.5.0 (2014-12-28)</target>
        </trans-unit>
        <trans-unit id="363b6dd745d0e0732b61a21aeafef19bb91d3dea" translate="yes" xml:space="preserve">
          <source>2.5.1 (2014-12-29)</source>
          <target state="translated">2.5.1 (2014-12-29)</target>
        </trans-unit>
        <trans-unit id="2c4ae7a94a6794aa08be6e442b949eb2fe7ff435" translate="yes" xml:space="preserve">
          <source>2.5.2 (2014-12-29)</source>
          <target state="translated">2.5.2 (2014-12-29)</target>
        </trans-unit>
        <trans-unit id="9700bc41da70d2ac2bb09b99e053a1f96990dd30" translate="yes" xml:space="preserve">
          <source>2.5.3 (2014-12-30)</source>
          <target state="translated">2.5.3 (2014-12-30)</target>
        </trans-unit>
        <trans-unit id="41e19c7f052ba7674c7f443cdf894732d3063d7e" translate="yes" xml:space="preserve">
          <source>2.6.0 (2015-01-06)</source>
          <target state="translated">2.6.0 (2015-01-06)</target>
        </trans-unit>
        <trans-unit id="b8179105cad1a8bc1d2cded47907db8e6ec98f6c" translate="yes" xml:space="preserve">
          <source>2.6.1 (2015-01-07)</source>
          <target state="translated">2.6.1 (2015-01-07)</target>
        </trans-unit>
        <trans-unit id="277504dac08518a0b6c93bff66c9ebcf2a6ed362" translate="yes" xml:space="preserve">
          <source>2.6.2 (2015-01-07)</source>
          <target state="translated">2.6.2 (2015-01-07)</target>
        </trans-unit>
        <trans-unit id="e03791f20af6983aab76dd9f4eb6285f5dd22c73" translate="yes" xml:space="preserve">
          <source>2.6.3 (2015-01-12)</source>
          <target state="translated">2.6.3 (2015-01-12)</target>
        </trans-unit>
        <trans-unit id="34c168b8f8f563c34b04feaad9365ae9f6621a44" translate="yes" xml:space="preserve">
          <source>2.6.4 (2015-01-12)</source>
          <target state="translated">2.6.4 (2015-01-12)</target>
        </trans-unit>
        <trans-unit id="aa35ee24ed912ac09f710291280885c26d4923a2" translate="yes" xml:space="preserve">
          <source>2.7.0 (2015-01-15)</source>
          <target state="translated">2.7.0 (2015-01-15)</target>
        </trans-unit>
        <trans-unit id="6298c321797a9bdd96bdb8820c66529c1e45768e" translate="yes" xml:space="preserve">
          <source>2.7.1 (2015-01-15)</source>
          <target state="translated">2.7.1 (2015-01-15)</target>
        </trans-unit>
        <trans-unit id="422d574895b2131163181002c9ff294fd5c1cae8" translate="yes" xml:space="preserve">
          <source>2.8.0 (2015-01-19)</source>
          <target state="translated">2.8.0 (2015-01-19)</target>
        </trans-unit>
        <trans-unit id="96dc6c27c79bd3fc0d939e329a4e8b9b2e285526" translate="yes" xml:space="preserve">
          <source>2.8.1 (2015-01-20)</source>
          <target state="translated">2.8.1 (2015-01-20)</target>
        </trans-unit>
        <trans-unit id="f18bc56d2a0b92863e2e07b2a56d2a3de15d5eb5" translate="yes" xml:space="preserve">
          <source>2.8.2 (2015-01-20)</source>
          <target state="translated">2.8.2 (2015-01-20)</target>
        </trans-unit>
        <trans-unit id="6652dc95a2a6e8b1d72defcc38ba8c6ab05d8f62" translate="yes" xml:space="preserve">
          <source>2.9.0 (2015-01-24)</source>
          <target state="translated">2.9.0 (2015-01-24)</target>
        </trans-unit>
        <trans-unit id="9eea2d9b7d1f3fd74b10a3114c64d41d2430942a" translate="yes" xml:space="preserve">
          <source>2.9.1 (2015-01-24)</source>
          <target state="translated">2.9.1 (2015-01-24)</target>
        </trans-unit>
        <trans-unit id="0643e9546c1d96f52e1973d08f4c9e2c6327c29e" translate="yes" xml:space="preserve">
          <source>2.9.10 (2015-02-18)</source>
          <target state="translated">2.9.10 (2015-02-18)</target>
        </trans-unit>
        <trans-unit id="81134f4a5d3fdfd88dcd6993f0dd26bd43bdf9ba" translate="yes" xml:space="preserve">
          <source>2.9.11 (2015-02-19)</source>
          <target state="translated">2.9.11 (2015-02-19)</target>
        </trans-unit>
        <trans-unit id="9e9da4c7045634894ce6aabb20a838e6fcf7c811" translate="yes" xml:space="preserve">
          <source>2.9.12 (2015-02-19)</source>
          <target state="translated">2.9.12 (2015-02-19)</target>
        </trans-unit>
        <trans-unit id="9f3d28ecc62de396b2aade62381887e448a71d0a" translate="yes" xml:space="preserve">
          <source>2.9.13 (2015-02-27)</source>
          <target state="translated">2.9.13 (2015-02-27)</target>
        </trans-unit>
        <trans-unit id="1303a4cbe7df98e55055e2a78f8a05cfb9d32399" translate="yes" xml:space="preserve">
          <source>2.9.14 (2015-03-12)</source>
          <target state="translated">2.9.14 (2015-03-12)</target>
        </trans-unit>
        <trans-unit id="805b90db66dbc287c364e5785f403932322f8857" translate="yes" xml:space="preserve">
          <source>2.9.15 (2015-03-26)</source>
          <target state="translated">2.9.15 (2015-03-26)</target>
        </trans-unit>
        <trans-unit id="e3569e84909a15a297372e21220021e5c3c8ac43" translate="yes" xml:space="preserve">
          <source>2.9.16 (2015-03-28)</source>
          <target state="translated">2.9.16 (2015-03-28)</target>
        </trans-unit>
        <trans-unit id="1043ae61afc660082bb829706a5a3d01a9cae1bc" translate="yes" xml:space="preserve">
          <source>2.9.17 (2015-03-29)</source>
          <target state="translated">2.9.17 (2015-03-29)</target>
        </trans-unit>
        <trans-unit id="47bc17f5aa086222dcb85f9556387c854bf32c81" translate="yes" xml:space="preserve">
          <source>2.9.18 (2015-03-29)</source>
          <target state="translated">2.9.18 (2015-03-29)</target>
        </trans-unit>
        <trans-unit id="b582d7002ce9fdf0ca4ecddd38948d21f22d40db" translate="yes" xml:space="preserve">
          <source>2.9.19 (2015-03-29)</source>
          <target state="translated">2.9.19 (2015-03-29)</target>
        </trans-unit>
        <trans-unit id="2e71e950352c4c1c8fcc88035f4d575de57988d6" translate="yes" xml:space="preserve">
          <source>2.9.2 (2015-01-26)</source>
          <target state="translated">2.9.2 (2015-01-26)</target>
        </trans-unit>
        <trans-unit id="0526940be921137c2e4e0b09969995e408325a37" translate="yes" xml:space="preserve">
          <source>2.9.20 (2015-03-29)</source>
          <target state="translated">2.9.20 (2015-03-29)</target>
        </trans-unit>
        <trans-unit id="e8f550137cb85eb2ba6d8563a528d77af0700854" translate="yes" xml:space="preserve">
          <source>2.9.21 (2015-03-30)</source>
          <target state="translated">2.9.21 (2015-03-30)</target>
        </trans-unit>
        <trans-unit id="9f21034744fb3b88972ff00081e95b4cb0e5434b" translate="yes" xml:space="preserve">
          <source>2.9.22 (2015-04-02)</source>
          <target state="translated">2.9.22 (2015-04-02)</target>
        </trans-unit>
        <trans-unit id="0a63968f9dc8c917770ccc00ecfb261d2c83b83a" translate="yes" xml:space="preserve">
          <source>2.9.23 (2015-04-02)</source>
          <target state="translated">2.9.23 (2015-04-02)</target>
        </trans-unit>
        <trans-unit id="464ef719e640f0dcbc72a58decd0ce8d6a5ed0dd" translate="yes" xml:space="preserve">
          <source>2.9.24 (2015-04-02)</source>
          <target state="translated">2.9.24 (2015-04-02)</target>
        </trans-unit>
        <trans-unit id="8eed5a5273d77c8cab60ff2607ad8e6e53092b4b" translate="yes" xml:space="preserve">
          <source>2.9.25 (2015-04-28)</source>
          <target state="translated">2.9.25 (2015-04-28)</target>
        </trans-unit>
        <trans-unit id="bb47252dbdde6d425195aea8029b33e58ed5244b" translate="yes" xml:space="preserve">
          <source>2.9.26 (2015-05-25)</source>
          <target state="translated">2.9.26 (2015-05-25)</target>
        </trans-unit>
        <trans-unit id="b6c75e34540ffd3bec73b155aa57fae88ba0b3bc" translate="yes" xml:space="preserve">
          <source>2.9.27 (2015-05-30)</source>
          <target state="translated">2.9.27 (2015-05-30)</target>
        </trans-unit>
        <trans-unit id="f2205a8af2aa7349c2a8be9c7019ab4b03ba7f35" translate="yes" xml:space="preserve">
          <source>2.9.28 (2015-06-14)</source>
          <target state="translated">2.9.28 (2015-06-14)</target>
        </trans-unit>
        <trans-unit id="e1de5e1d358b8f7f1cec9350e70e4979588034d5" translate="yes" xml:space="preserve">
          <source>2.9.29 (2015-06-14)</source>
          <target state="translated">2.9.29 (2015-06-14)</target>
        </trans-unit>
        <trans-unit id="2eb34ea06c5bfa0e154b982fdf341122b1450799" translate="yes" xml:space="preserve">
          <source>2.9.3 (2015-01-27)</source>
          <target state="translated">2.9.3 (2015-01-27)</target>
        </trans-unit>
        <trans-unit id="5ffda1d19b3b0bf450429e7731a7c472ebaaaf0f" translate="yes" xml:space="preserve">
          <source>2.9.30 (2015-06-14)</source>
          <target state="translated">2.9.30 (2015-06-14)</target>
        </trans-unit>
        <trans-unit id="1a7dfdf323794395a081775456a6ebae6c30f5f4" translate="yes" xml:space="preserve">
          <source>2.9.31 (2015-07-03)</source>
          <target state="translated">2.9.31 (2015-07-03)</target>
        </trans-unit>
        <trans-unit id="991f52509c7dd2a20caf2f8ae0971c03f0905448" translate="yes" xml:space="preserve">
          <source>2.9.32 (2015-07-03)</source>
          <target state="translated">2.9.32 (2015-07-03)</target>
        </trans-unit>
        <trans-unit id="7ea658707e2b1186b94d936602e485011bb3b19d" translate="yes" xml:space="preserve">
          <source>2.9.33 (2015-07-09)</source>
          <target state="translated">2.9.33 (2015-07-09)</target>
        </trans-unit>
        <trans-unit id="139bdaa4f6ca9c7c9c4b10d77c7d9716a01f8b29" translate="yes" xml:space="preserve">
          <source>2.9.34 (2015-07-15)</source>
          <target state="translated">2.9.34 (2015-07-15)</target>
        </trans-unit>
        <trans-unit id="d941932a763206377d925a466135e423f3fc678c" translate="yes" xml:space="preserve">
          <source>2.9.4 (2015-01-30)</source>
          <target state="translated">2.9.4 (2015-01-30)</target>
        </trans-unit>
        <trans-unit id="34c735ad7f02df0837158b9be98be254cb0ef032" translate="yes" xml:space="preserve">
          <source>2.9.5 (2015-02-02)</source>
          <target state="translated">2.9.5 (2015-02-02)</target>
        </trans-unit>
        <trans-unit id="7e6ce08a5559d2537768ff2a93878ae2ce9cd7ae" translate="yes" xml:space="preserve">
          <source>2.9.6 (2015-02-02)</source>
          <target state="translated">2.9.6 (2015-02-02)</target>
        </trans-unit>
        <trans-unit id="8f9a5af90ec8260c1f8a01295acb8ce75e1010c8" translate="yes" xml:space="preserve">
          <source>2.9.7 (2015-02-08)</source>
          <target state="translated">2.9.7 (2015-02-08)</target>
        </trans-unit>
        <trans-unit id="675b88517303d80d656a631d9d7cc460a2ee0fa4" translate="yes" xml:space="preserve">
          <source>2.9.8 (2015-02-10)</source>
          <target state="translated">2.9.8 (2015-02-10)</target>
        </trans-unit>
        <trans-unit id="d9f55ef45d09057781de4db9ca393668cbad0f1b" translate="yes" xml:space="preserve">
          <source>2.9.9 (2015-02-12)</source>
          <target state="translated">2.9.9 (2015-02-12)</target>
        </trans-unit>
        <trans-unit id="c753da82e0bb712ba9c5ad74cddcdd9a325cd68d" translate="yes" xml:space="preserve">
          <source>3. In legacy browsers use &lt;code&gt;window.oneventname = handlerFunction;&lt;/code&gt;.</source>
          <target state="translated">3. 레거시 브라우저에서는 &lt;code&gt;window.oneventname = handlerFunction;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f4e4acaf594328197d6e099960c33eba2aaf7016" translate="yes" xml:space="preserve">
          <source>3. Latency benchmarks</source>
          <target state="translated">3. 지연 시간 벤치 마크</target>
        </trans-unit>
        <trans-unit id="fbdd9880d965f935e91626a574fe98529b015057" translate="yes" xml:space="preserve">
          <source>3.0.0 (2015-10-27)</source>
          <target state="translated">3.0.0 (2015-10-27)</target>
        </trans-unit>
        <trans-unit id="5d9841ca1c7c8c227ec8dcfa9955c77ad79b5c5c" translate="yes" xml:space="preserve">
          <source>3.0.1 (2015-10-28)</source>
          <target state="translated">3.0.1 (2015-10-28)</target>
        </trans-unit>
        <trans-unit id="90fed2280383c53575123c5499628a172320c146" translate="yes" xml:space="preserve">
          <source>3.0.1 update</source>
          <target state="translated">3.0.1 업데이트</target>
        </trans-unit>
        <trans-unit id="2b726a67eac9e7d4089235af61a0b39286e34653" translate="yes" xml:space="preserve">
          <source>3.0.2 (2015-10-29)</source>
          <target state="translated">3.0.2 (2015-10-29)</target>
        </trans-unit>
        <trans-unit id="22ae6296b1a55bea4f761c1e3217b8c3c87fed2a" translate="yes" xml:space="preserve">
          <source>3.0.3 (2015-11-01)</source>
          <target state="translated">3.0.3 (2015-11-01)</target>
        </trans-unit>
        <trans-unit id="8c7f97e8216b27b11d0960f172856980d81a51b8" translate="yes" xml:space="preserve">
          <source>3.0.4 (2015-11-01)</source>
          <target state="translated">3.0.4 (2015-11-01)</target>
        </trans-unit>
        <trans-unit id="59f001bf024a8e1cafbde1c4cdfac6303b384d3a" translate="yes" xml:space="preserve">
          <source>3.0.5 (2015-11-01)</source>
          <target state="translated">3.0.5 (2015-11-01)</target>
        </trans-unit>
        <trans-unit id="6c0ab14770cc637982d28bc7025338967f2fdd35" translate="yes" xml:space="preserve">
          <source>3.0.6 (2015-12-01)</source>
          <target state="translated">3.0.6 (2015-12-01)</target>
        </trans-unit>
        <trans-unit id="5ce32bf76563b0d6d1f9dd8346c43ac109f63ef1" translate="yes" xml:space="preserve">
          <source>3.1.0 (2015-12-16)</source>
          <target state="translated">3.1.0 (2015-12-16)</target>
        </trans-unit>
        <trans-unit id="c44ab6b81aa2726a2439430ac660d55860c56737" translate="yes" xml:space="preserve">
          <source>3.1.1 (2015-12-16)</source>
          <target state="translated">3.1.1 (2015-12-16)</target>
        </trans-unit>
        <trans-unit id="452a4edba0fd0593a224f3aef01d89383f82ac26" translate="yes" xml:space="preserve">
          <source>3.1.2 (2016-01-23)</source>
          <target state="translated">3.1.2 (2016-01-23)</target>
        </trans-unit>
        <trans-unit id="7dcd79febe19247686fb70af4e527d06e9b970ab" translate="yes" xml:space="preserve">
          <source>3.1.3 (2016-01-25)</source>
          <target state="translated">3.1.3 (2016-01-25)</target>
        </trans-unit>
        <trans-unit id="b720145f7f1f000ad749b6c891f142fd512d29de" translate="yes" xml:space="preserve">
          <source>3.1.4 (2016-01-25)</source>
          <target state="translated">3.1.4 (2016-01-25)</target>
        </trans-unit>
        <trans-unit id="eb1b42bd515e2ceee2a036fd7d93cf10e44bb987" translate="yes" xml:space="preserve">
          <source>3.1.5 (2016-01-26)</source>
          <target state="translated">3.1.5 (2016-01-26)</target>
        </trans-unit>
        <trans-unit id="1fbc726c7bf0eb572cb23563b744256402427ed3" translate="yes" xml:space="preserve">
          <source>3.2.0 (2016-02-01)</source>
          <target state="translated">3.2.0 (2016-02-01)</target>
        </trans-unit>
        <trans-unit id="443ee5d9010592a666b7fb4f9642bcd7df6509a3" translate="yes" xml:space="preserve">
          <source>3.2.1 (2016-02-01)</source>
          <target state="translated">3.2.1 (2016-02-01)</target>
        </trans-unit>
        <trans-unit id="3c01085a1b1dade05f0770c649e33f579883f287" translate="yes" xml:space="preserve">
          <source>3.2.2 (2016-02-05)</source>
          <target state="translated">3.2.2 (2016-02-05)</target>
        </trans-unit>
        <trans-unit id="65f8ec3dd2cba51e28cd092bb58e96802385bc52" translate="yes" xml:space="preserve">
          <source>3.3.0 (2016-02-12)</source>
          <target state="translated">3.3.0 (2016-02-12)</target>
        </trans-unit>
        <trans-unit id="aeebb4d0b073636cdabc99a91cb7b49f725642e9" translate="yes" xml:space="preserve">
          <source>3.3.1 (2016-02-13)</source>
          <target state="translated">3.3.1 (2016-02-13)</target>
        </trans-unit>
        <trans-unit id="19387b7e317bf8e33953f25ed56441578ed92792" translate="yes" xml:space="preserve">
          <source>3.3.2 (2016-02-25)</source>
          <target state="translated">3.3.2 (2016-02-25)</target>
        </trans-unit>
        <trans-unit id="e8cf43c0aafeb91bef4809b5dbf0465917acc162" translate="yes" xml:space="preserve">
          <source>3.3.3 (2016-02-25)</source>
          <target state="translated">3.3.3 (2016-02-25)</target>
        </trans-unit>
        <trans-unit id="80777f6839c2877ffd632fb844c036e55e0ee2e5" translate="yes" xml:space="preserve">
          <source>3.3.4 (2016-03-07)</source>
          <target state="translated">3.3.4 (2016-03-07)</target>
        </trans-unit>
        <trans-unit id="8924e3c6322dd0d740282f41857ac2c62b407a22" translate="yes" xml:space="preserve">
          <source>3.3.5 (2016-04-12)</source>
          <target state="translated">3.3.5 (2016-04-12)</target>
        </trans-unit>
        <trans-unit id="ce2b79cd944ed276bc67c124fe7105db3235fda9" translate="yes" xml:space="preserve">
          <source>3.4.0 (2016-05-17)</source>
          <target state="translated">3.4.0 (2016-05-17)</target>
        </trans-unit>
        <trans-unit id="6f877ba8ebd616b3d0f6b80f61128d33203e929a" translate="yes" xml:space="preserve">
          <source>3.4.1 (2016-06-17)</source>
          <target state="translated">3.4.1 (2016-06-17)</target>
        </trans-unit>
        <trans-unit id="59b7d475989c603b03497dd3f5973c6020791fe4" translate="yes" xml:space="preserve">
          <source>3.4.2 (2016-08-24)</source>
          <target state="translated">3.4.2 (2016-08-24)</target>
        </trans-unit>
        <trans-unit id="95bd30a40efaf9848f3fc84332e9e82ca3638093" translate="yes" xml:space="preserve">
          <source>3.4.3 (2016-08-25)</source>
          <target state="translated">3.4.3 (2016-08-25)</target>
        </trans-unit>
        <trans-unit id="96288ce2e3b9d03eb49daa28ebc5e1523c1df7e1" translate="yes" xml:space="preserve">
          <source>3.4.4 (2016-08-30)</source>
          <target state="translated">3.4.4 (2016-08-30)</target>
        </trans-unit>
        <trans-unit id="331f854640d9bd4167daec729e330a944a955729" translate="yes" xml:space="preserve">
          <source>3.4.5 (2016-08-31)</source>
          <target state="translated">3.4.5 (2016-08-31)</target>
        </trans-unit>
        <trans-unit id="732a0feaaeb5895baa8ffa9c0a5443e640d1359c" translate="yes" xml:space="preserve">
          <source>3.4.6 (2016-09-01)</source>
          <target state="translated">3.4.6 (2016-09-01)</target>
        </trans-unit>
        <trans-unit id="e6327c9d1cb629ee8ae015d63e0c29de8c8f5360" translate="yes" xml:space="preserve">
          <source>3.4.7 (2016-12-22)</source>
          <target state="translated">3.4.7 (2016-12-22)</target>
        </trans-unit>
        <trans-unit id="1e566a56a0a2e79259e9448a626ffbc68067c913" translate="yes" xml:space="preserve">
          <source>3.5.0 (2017-03-03)</source>
          <target state="translated">3.5.0 (2017-03-03)</target>
        </trans-unit>
        <trans-unit id="f75d48c506d76b397539df56c97cadf9cfbe186a" translate="yes" xml:space="preserve">
          <source>3.5.1 (2017-10-04)</source>
          <target state="translated">3.5.1 (2017-10-04)</target>
        </trans-unit>
        <trans-unit id="ca9d1f80111df656d42baaf2be7a0177c90d6d7f" translate="yes" xml:space="preserve">
          <source>3.5.2 (2018-09-03)</source>
          <target state="translated">3.5.2 (2018-09-03)</target>
        </trans-unit>
        <trans-unit id="c525ced7de582ad3d3bab4b8f30b96aabdbcb9a2" translate="yes" xml:space="preserve">
          <source>3.5.3 (2018-11-06)</source>
          <target state="translated">3.5.3 (2018-11-06)</target>
        </trans-unit>
        <trans-unit id="52f3dcf7e0f16f9e74d41d507f9706105bb8ca45" translate="yes" xml:space="preserve">
          <source>3.5.4 (2019-04-03)</source>
          <target state="translated">3.5.4 (2019-04-03)</target>
        </trans-unit>
        <trans-unit id="ff88cd7602917c3aade08fac1507a3394bd77517" translate="yes" xml:space="preserve">
          <source>3.5.5 (2019-05-24)</source>
          <target state="translated">3.5.5 (2019-05-24)</target>
        </trans-unit>
        <trans-unit id="df342646ca26df57b38ae84b22206daaa5065841" translate="yes" xml:space="preserve">
          <source>3.6.0 (2019-10-01)</source>
          <target state="translated">3.6.0 (2019-10-01)</target>
        </trans-unit>
        <trans-unit id="e515408ea3e86aea75236ce127fcfe304b8fbeca" translate="yes" xml:space="preserve">
          <source>3.7.0 (2019-10-01)</source>
          <target state="translated">3.7.0 (2019-10-01)</target>
        </trans-unit>
        <trans-unit id="f1a8a004ffa6a8695158fb90dc2739855764db6f" translate="yes" xml:space="preserve">
          <source>3.7.1 (2019-10-15)</source>
          <target state="translated">3.7.1 (2019-10-15)</target>
        </trans-unit>
        <trans-unit id="3d1d3557d13a1e5fd667cd7696a7d7b365d9492b" translate="yes" xml:space="preserve">
          <source>3.7.2 (2019-11-28)</source>
          <target state="translated">3.7.2 (2019-11-28)</target>
        </trans-unit>
        <trans-unit id="cc0812d738bffdce6053f5bc85cffbbb478a9a66" translate="yes" xml:space="preserve">
          <source>3rd party libraries rejecting promises with non-errors no longer causes warnings</source>
          <target state="translated">오류가 아닌 약속을 거부하는 타사 라이브러리는 더 이상 경고를 발생시키지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3e2512f4c6d6a628caa39bb944fe5f6f44e17df9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api-reference#promisification&quot;&gt;Promisification&lt;/a&gt; on steroids - entire modules can now be promisified with one line of code</source>
          <target state="translated">&lt;a href=&quot;api-reference#promisification&quot;&gt;&lt;/a&gt;스테로이드에 대한 약속 -이제 전체 코드를 한 줄의 코드로 약속 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e903835b91bb3bdf2df5d65e44455f85a267257" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api-reference#resource-management&quot;&gt;Resource management&lt;/a&gt; - never leak resources again</source>
          <target state="translated">&lt;a href=&quot;api-reference#resource-management&quot;&gt;자원 관리&lt;/a&gt; -다시는 자원을 유출하지 않습니다</target>
        </trans-unit>
        <trans-unit id="e5a46130bf05dde1389defa3538b67c2f765af14" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api-reference#synchronous-inspection&quot;&gt;Synchronous inspection&lt;/a&gt;: Removed &lt;code&gt;.inspect()&lt;/code&gt;, added &lt;a href=&quot;api/value&quot;&gt;&lt;code&gt;.value()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api/reason&quot;&gt;&lt;code&gt;.reason()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;api-reference#synchronous-inspection&quot;&gt;동기 검사&lt;/a&gt; : &lt;code&gt;.inspect()&lt;/code&gt; 제거 , &lt;a href=&quot;api/value&quot;&gt; &lt;code&gt;.value()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;api/reason&quot;&gt; &lt;code&gt;.reason()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8ca4097b02799b8214ab90e215eb0a0628c75f05" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/any&quot;&gt;&lt;code&gt;.any()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api/some&quot;&gt;&lt;code&gt;.some()&lt;/code&gt;&lt;/a&gt; no longer use an array as the rejection reason. &lt;a href=&quot;api/aggregateerror&quot;&gt;&lt;code&gt;AggregateError&lt;/code&gt;&lt;/a&gt; is used instead.</source>
          <target state="translated">&lt;a href=&quot;api/any&quot;&gt; &lt;code&gt;.any()&lt;/code&gt; &lt;/a&gt; 및&lt;a href=&quot;api/some&quot;&gt; &lt;code&gt;.some()&lt;/code&gt; &lt;/a&gt; 더 이상 거부 이유로 배열을 사용하지 않습니다. 대신&lt;a href=&quot;api/aggregateerror&quot;&gt; &lt;code&gt;AggregateError&lt;/code&gt; &lt;/a&gt; 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8d8de672f43adcbc6a838a2e438faacf17ad0479" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/bind&quot;&gt;&lt;code&gt;.bind()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api/promise.bind&quot;&gt;&lt;code&gt;Promise.bind()&lt;/code&gt;&lt;/a&gt; now await for the resolution of the &lt;code&gt;thisArg&lt;/code&gt; if it's a promise or a thenable</source>
          <target state="translated">&lt;a href=&quot;api/bind&quot;&gt; &lt;code&gt;.bind()&lt;/code&gt; &lt;/a&gt; 및&lt;a href=&quot;api/promise.bind&quot;&gt; &lt;code&gt;Promise.bind()&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;thisArg&lt;/code&gt; 가 약속이거나 약속 가능한 경우해결을 기다립니다.</target>
        </trans-unit>
        <trans-unit id="d3e908812ae16f1b819d40e9564210fb3bb9ab1d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/cancel&quot;&gt;&lt;code&gt;.cancel()&lt;/code&gt;&lt;/a&gt; supports a custom cancellation reason</source>
          <target state="translated">&lt;a href=&quot;api/cancel&quot;&gt; &lt;code&gt;.cancel()&lt;/code&gt; &lt;/a&gt; 은 맞춤 취소 이유를 지원합니다</target>
        </trans-unit>
        <trans-unit id="7be11b01805f67589e2bd4fc78b47c454106c985" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/catch&quot;&gt;&lt;code&gt;.catch()&lt;/code&gt;&lt;/a&gt; -&amp;gt; &lt;code&gt;.caught()&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;api/catch&quot;&gt; &lt;code&gt;.catch()&lt;/code&gt; &lt;/a&gt; -&amp;gt; &lt;code&gt;.caught()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1a7766542feb5795b30c03f87907f5e31a4ab710" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/catch&quot;&gt;&lt;code&gt;.catch()&lt;/code&gt;&lt;/a&gt; now supports an object predicate as a filter: &lt;code&gt;.catch({code: 'ENOENT'}, e =&amp;gt; ...)&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;api/catch&quot;&gt; &lt;code&gt;.catch()&lt;/code&gt; &lt;/a&gt; 이제 객체 술어를 필터로 지원합니다. &lt;code&gt;.catch({code: 'ENOENT'}, e =&amp;gt; ...)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="459e23721fba99440c05046dd4603ff8cbbadf82" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/done&quot;&gt;&lt;code&gt;.done&lt;/code&gt;&lt;/a&gt; causes an irrecoverable fatal error in Node.js environments now. See &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/471&quot;&gt;&lt;code&gt;#471&lt;/code&gt;&lt;/a&gt; for rationale.</source>
          <target state="translated">&lt;a href=&quot;api/done&quot;&gt; &lt;code&gt;.done&lt;/code&gt; &lt;/a&gt; 은 Node.js 환경에서 복구 할 수없는 치명적 오류를 발생시킵니다. 이론적 근거는&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/471&quot;&gt; &lt;code&gt;#471&lt;/code&gt; &lt;/a&gt; 을참조하십시오.</target>
        </trans-unit>
        <trans-unit id="19cbc8f4719ace7342440cdceb1d4231c70bacfd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/filter&quot;&gt;&lt;code&gt;.filter()&lt;/code&gt;&lt;/a&gt; now calls the handler as soon as items in the input array become fulfilled</source>
          <target state="translated">&lt;a href=&quot;api/filter&quot;&gt; &lt;code&gt;.filter()&lt;/code&gt; &lt;/a&gt; 이제 입력 배열의 항목이 이행되는 즉시 핸들러를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="61c77395cd8827126a77c4397a34ca4cc0523b3d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/finally&quot;&gt;&lt;code&gt;.finally()&lt;/code&gt;&lt;/a&gt; -&amp;gt; &lt;code&gt;.lastly()&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;api/finally&quot;&gt; &lt;code&gt;.finally()&lt;/code&gt; &lt;/a&gt; -&amp;gt; &lt;code&gt;.lastly()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="73a13394ea302105daf4bfd800a97cea39853a1e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/get&quot;&gt;&lt;code&gt;.get&lt;/code&gt;&lt;/a&gt; now supports negative indexing.</source>
          <target state="translated">&lt;a href=&quot;api/get&quot;&gt; &lt;code&gt;.get&lt;/code&gt; 은&lt;/a&gt; 이제 음수 색인을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="c2288a430828bddc50fa558880305808d3c287ed" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/map&quot;&gt;&lt;code&gt;.map()&lt;/code&gt;&lt;/a&gt; now calls the handler as soon as items in the input array become fulfilled</source>
          <target state="translated">&lt;a href=&quot;api/map&quot;&gt; &lt;code&gt;.map()&lt;/code&gt; &lt;/a&gt; 이제 입력 배열의 항목이 이행되는 즉시 핸들러를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="0e262870b4b28bae949c7095a9cb4c4972e3c278" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/map&quot;&gt;&lt;code&gt;.map()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;api/each&quot;&gt;&lt;code&gt;.each()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;api/filter&quot;&gt;&lt;code&gt;.filter()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;api/reduce&quot;&gt;&lt;code&gt;.reduce()&lt;/code&gt;&lt;/a&gt; reimagined from simple sugar to powerful concurrency coordination tools</source>
          <target state="translated">&lt;a href=&quot;api/map&quot;&gt; &lt;code&gt;.map()&lt;/code&gt; &lt;/a&gt; ,&lt;a href=&quot;api/each&quot;&gt; &lt;code&gt;.each()&lt;/code&gt; &lt;/a&gt; ,&lt;a href=&quot;api/filter&quot;&gt; &lt;code&gt;.filter()&lt;/code&gt; &lt;/a&gt; ,&lt;a href=&quot;api/reduce&quot;&gt; &lt;code&gt;.reduce()&lt;/code&gt; &lt;/a&gt; 강력한 동시성 조정 도구로 간단한 설탕에서 새롭게 선보인</target>
        </trans-unit>
        <trans-unit id="1cb00712ece9c8c0e164050263c5a8161d436853" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/map&quot;&gt;&lt;code&gt;.map&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;api/promise.map&quot;&gt;&lt;code&gt;Promise.map&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;api/filter&quot;&gt;&lt;code&gt;.filter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api/promise.filter&quot;&gt;&lt;code&gt;Promise.filter&lt;/code&gt;&lt;/a&gt; now return rejected promise when inappropriate options argument is passed (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1097&quot;&gt;&lt;code&gt;#1097&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;api/map&quot;&gt; &lt;code&gt;.map&lt;/code&gt; &lt;/a&gt; ,&lt;a href=&quot;api/promise.map&quot;&gt; &lt;code&gt;Promise.map&lt;/code&gt; &lt;/a&gt; ,&lt;a href=&quot;api/filter&quot;&gt; &lt;code&gt;.filter&lt;/code&gt; &lt;/a&gt; 및&lt;a href=&quot;api/promise.filter&quot;&gt; &lt;code&gt;Promise.filter&lt;/code&gt; 는&lt;/a&gt; 부적절 옵션 인수가 (전달 될 때 지금의 약속을 거부 돌려주는&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1097&quot;&gt; &lt;code&gt;#1097&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="e170a06f184cbaecd1729e047a13d8df2130e3f1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/nodeify&quot;&gt;&lt;code&gt;.nodeify()&lt;/code&gt;&lt;/a&gt; now supports passing multiple success results when mapping promises to nodebacks</source>
          <target state="translated">&lt;a href=&quot;api/nodeify&quot;&gt; &lt;code&gt;.nodeify()&lt;/code&gt; &lt;/a&gt; 이제 약속을 노드 백에 매핑 할 때 여러 성공 결과 전달을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="d3fc5e825d32339b28b439810b047a5badd97f88" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/promise.coroutine&quot;&gt;&lt;code&gt;Promise.coroutine&lt;/code&gt;&lt;/a&gt; is built to work with generators to form C# like &lt;code&gt;async/await&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;api/promise.coroutine&quot;&gt; &lt;code&gt;Promise.coroutine&lt;/code&gt; &lt;/a&gt; 은 &lt;code&gt;async/await&lt;/code&gt; 와 같은 생성자를 사용하여 C #을 형성하도록 빌드되었습니다.</target>
        </trans-unit>
        <trans-unit id="6ae17ea0bd3f6bf1693ddc553b700fd245caf6b7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/promise.coroutine&quot;&gt;&lt;code&gt;Promise.coroutine&lt;/code&gt;&lt;/a&gt; now returns function with same &lt;code&gt;.length&lt;/code&gt; as the original function (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/927&quot;&gt;&lt;code&gt;#927&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/933&quot;&gt;&lt;code&gt;#933&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;api/promise.coroutine&quot;&gt; &lt;code&gt;Promise.coroutine&lt;/code&gt; 은&lt;/a&gt; 이제원래 함수 (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/927&quot;&gt; &lt;code&gt;#927&lt;/code&gt; &lt;/a&gt; ,&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/933&quot;&gt; &lt;code&gt;#933&lt;/code&gt; &lt;/a&gt; )와 동일한 &lt;code&gt;.length&lt;/code&gt; 를가진 함수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c3dd634dda5fdae901e6bcaf7651877feec5473e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/promise.join&quot;&gt;&lt;code&gt;Promise.join()&lt;/code&gt;&lt;/a&gt; now takes a function as the last argument</source>
          <target state="translated">&lt;a href=&quot;api/promise.join&quot;&gt; &lt;code&gt;Promise.join()&lt;/code&gt; &lt;/a&gt; 이제 마지막 인수로 함수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="9551974ff6673a0cc77be6b166848a17728bc749" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/promise.promisify&quot;&gt;&lt;code&gt;Promise.promisify&lt;/code&gt;&lt;/a&gt; - converts a &lt;em&gt;single&lt;/em&gt; callback taking function into a promise returning function. It does not alter the original function and returns the modified version.</source>
          <target state="translated">&lt;a href=&quot;api/promise.promisify&quot;&gt; &lt;code&gt;Promise.promisify&lt;/code&gt; -&lt;/a&gt;&lt;em&gt; 단일&lt;/em&gt; 콜백 함수를 약속 반환 함수로변환합니다. 원래 함수를 변경하지 않고 수정 된 버전을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e073c9f92fdc5be9ec7ae95ccbb6730d993c52b3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/promise.promisify&quot;&gt;&lt;code&gt;Promise.promisify&lt;/code&gt;&lt;/a&gt;'s second argument is now an options object, so any code using the second argument needs to change:</source>
          <target state="translated">&lt;a href=&quot;api/promise.promisify&quot;&gt; &lt;code&gt;Promise.promisify&lt;/code&gt; &lt;/a&gt; 의 두 번째 인수는 이제 옵션 개체이므로 두 번째 인수를 사용하는 모든 코드를 변경해야합니다.</target>
        </trans-unit>
        <trans-unit id="d9f5b19403441771eae6408f96e4b817ded8b46e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/promise.promisifyall&quot;&gt;&lt;code&gt;Promise.promisifyAll&lt;/code&gt;&lt;/a&gt; - takes an &lt;em&gt;object&lt;/em&gt; full of functions and &lt;em&gt;converts each function&lt;/em&gt; into the new one with the &lt;code&gt;Async&lt;/code&gt; suffix (by default). It does not change the original functions but instead adds new ones.</source>
          <target state="translated">&lt;a href=&quot;api/promise.promisifyall&quot;&gt; &lt;code&gt;Promise.promisifyAll&lt;/code&gt; -&lt;/a&gt;&lt;em&gt; 함수&lt;/em&gt; 로가득 찬&lt;em&gt; 오브젝트를&lt;/em&gt; 가져 와서 &lt;code&gt;Async&lt;/code&gt; 접미어 (기본적으로)를 사용하여&lt;em&gt; 각 함수&lt;/em&gt; 를 새&lt;em&gt; 함수&lt;/em&gt; 로&lt;em&gt; 변환합니다&lt;/em&gt; . 원래 기능을 변경하지 않고 대신 새로운 기능을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="8f76d7c13f4ee6214d33f882737955ebe26f71a9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/promise.props&quot;&gt;&lt;code&gt;Promise.props&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api/props&quot;&gt;&lt;code&gt;.props&lt;/code&gt;&lt;/a&gt; now support &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot;&gt;ES6 &lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; objects along with normal objects. Actual &lt;code&gt;Map&lt;/code&gt; objects are only considered for their entries in the map instead of both entries and properties.</source>
          <target state="translated">&lt;a href=&quot;api/promise.props&quot;&gt; &lt;code&gt;Promise.props&lt;/code&gt; &lt;/a&gt; 및&lt;a href=&quot;api/props&quot;&gt; &lt;code&gt;.props&lt;/code&gt; 는&lt;/a&gt; 이제일반 객체와 함께&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot;&gt; ES6 &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt; 객체를지원합니다. 실제 &lt;code&gt;Map&lt;/code&gt; 개체는 항목과 속성 대신 맵에서 해당 항목에 대해서만 고려됩니다.</target>
        </trans-unit>
        <trans-unit id="9b118141014521c7ba4b2427b6b8353e9c30b7d6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/promise.resolve&quot;&gt;&lt;code&gt;Promise.resolve()&lt;/code&gt;&lt;/a&gt; behaves like &lt;code&gt;Promise.cast&lt;/code&gt;. &lt;code&gt;Promise.cast&lt;/code&gt; deprecated.</source>
          <target state="translated">&lt;a href=&quot;api/promise.resolve&quot;&gt; &lt;code&gt;Promise.resolve()&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;Promise.cast&lt;/code&gt; 와 같이 작동 합니다. &lt;code&gt;Promise.cast&lt;/code&gt; 는 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="951bd5ffafb5754ede9e728f8878813e2eed514c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/promise.try&quot;&gt;&lt;code&gt;Promise.try()&lt;/code&gt;&lt;/a&gt; -&amp;gt; &lt;code&gt;Promise.attempt()&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;api/promise.try&quot;&gt; &lt;code&gt;Promise.try()&lt;/code&gt; &lt;/a&gt; -&amp;gt; &lt;code&gt;Promise.attempt()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dae90d5e108ba042289a0bea29bb1b4506cccdec" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/promise.try&quot;&gt;&lt;code&gt;Promise.try&lt;/code&gt;&lt;/a&gt;'s &lt;code&gt;ctx&lt;/code&gt; and &lt;code&gt;arg&lt;/code&gt; arguments have been deprecated.</source>
          <target state="translated">&lt;a href=&quot;api/promise.try&quot;&gt; &lt;code&gt;Promise.try&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;ctx&lt;/code&gt; 및 &lt;code&gt;arg&lt;/code&gt; 인수는 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9fadbfd3c351f448d71bbf434ec56f7f40dfac66" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/reduce&quot;&gt;&lt;code&gt;.reduce()&lt;/code&gt;&lt;/a&gt; now calls the handler as soon as items in the input array become fulfilled, but in-order</source>
          <target state="translated">&lt;a href=&quot;api/reduce&quot;&gt; &lt;code&gt;.reduce()&lt;/code&gt; &lt;/a&gt; 이제 입력 배열의 항목이 이행 되 자마자 핸들러를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="18a6f9a52cd35e30f1889d344e3164193ced79e5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/return&quot;&gt;&lt;code&gt;.return()&lt;/code&gt;&lt;/a&gt; -&amp;gt; &lt;code&gt;.thenReturn()&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;api/return&quot;&gt; &lt;code&gt;.return()&lt;/code&gt; &lt;/a&gt; -&amp;gt; &lt;code&gt;.thenReturn()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b799149e26815f3c095d3d29a2dcd33d2a16b36e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/spread&quot;&gt;&lt;code&gt;.spread&lt;/code&gt;&lt;/a&gt;'s second argument has been removed.</source>
          <target state="translated">&lt;a href=&quot;api/spread&quot;&gt; &lt;code&gt;.spread&lt;/code&gt; &lt;/a&gt; 의 두 번째 인수가 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="cf0934e4e962716c522dd27fcccc0b82a9da123a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/throw&quot;&gt;&lt;code&gt;.throw()&lt;/code&gt;&lt;/a&gt; -&amp;gt; &lt;code&gt;.thenThrow()&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;api/throw&quot;&gt; &lt;code&gt;.throw()&lt;/code&gt; &lt;/a&gt; -&amp;gt; &lt;code&gt;.thenThrow()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c0e03273a3589e19ff7e14eeef0261aca6731a4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/timeout&quot;&gt;&lt;code&gt;.timeout()&lt;/code&gt;&lt;/a&gt; now &lt;code&gt;clearTimeout&lt;/code&gt;s the timer if the resulting promise is cancelled (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/926&quot;&gt;&lt;code&gt;#926&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;api/timeout&quot;&gt; &lt;code&gt;.timeout()&lt;/code&gt; &lt;/a&gt; 이제 &lt;code&gt;clearTimeout&lt;/code&gt; 결과 약속이 취소되면 타이머가 S (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/926&quot;&gt; &lt;code&gt;#926&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="048189b520b3ed715085ebe30958f91620c82959" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/timeout&quot;&gt;&lt;code&gt;.timeout()&lt;/code&gt;&lt;/a&gt; now cancels the promise instead of rejecting it</source>
          <target state="translated">&lt;a href=&quot;api/timeout&quot;&gt; &lt;code&gt;.timeout()&lt;/code&gt; &lt;/a&gt; 이제 약속을 거부하지 않고 취소합니다.</target>
        </trans-unit>
        <trans-unit id="dc4c91c73f2ec15e8686120dbaf63240b86d76d6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/timeout&quot;&gt;&lt;code&gt;.timeout()&lt;/code&gt;&lt;/a&gt; now takes a custom error object as second argument</source>
          <target state="translated">&lt;a href=&quot;api/timeout&quot;&gt; &lt;code&gt;.timeout()&lt;/code&gt; &lt;/a&gt; 이제 사용자 정의 오류 객체를 두 번째 인수로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="2df0aa709272f792bcd414409a36496971f131d3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;cancel&quot;&gt;&lt;code&gt;.cancel()&lt;/code&gt;&lt;/a&gt; is synchronous.</source>
          <target state="translated">&lt;a href=&quot;cancel&quot;&gt; &lt;code&gt;.cancel()&lt;/code&gt; &lt;/a&gt; 은 동 기적입니다.</target>
        </trans-unit>
        <trans-unit id="6cccbbcfdb26a95d964c060b22286ed602e50acd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;disposer&quot;&gt;disposers&lt;/a&gt;, objects that wrap a resource and a method to release that resource, together with</source>
          <target state="translated">&lt;a href=&quot;disposer&quot;&gt;disposers&lt;/a&gt; , 자원을 감싸는 객체 및 자원을 해제하는 방법</target>
        </trans-unit>
        <trans-unit id="d031affc1ba2b09e0866c4e8219eaabfd4e30f78" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://promises-aplus.github.io/promises-spec/&quot;&gt;Promises/A+ &lt;code&gt;.then&lt;/code&gt;&lt;/a&gt;. If you are new to promises, see the &lt;a href=&quot;../beginners-guide&quot;&gt;Beginner's Guide&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://promises-aplus.github.io/promises-spec/&quot;&gt;약속 / A + &lt;code&gt;.then&lt;/code&gt; &lt;/a&gt; . 약속을 처음 접하는 경우 &lt;a href=&quot;../beginners-guide&quot;&gt;초보자 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3d11f9f5f9f4def3f011b167c4db2badd387d892" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/petkaantonov/bluebird/blob/master/API.md#global-rejection-events&quot;&gt;Global rejection events&lt;/a&gt; are now fired both as DOM3 events and as legacy events in browsers</source>
          <target state="translated">&lt;a href=&quot;https://github.com/petkaantonov/bluebird/blob/master/API.md#global-rejection-events&quot;&gt;전역 거부 이벤트&lt;/a&gt; 는 이제 DOM3 이벤트 및 브라우저의 레거시 이벤트로 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="e60ea967fa3cdc31f1d6b20ee33695b6d72a809c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/petkaantonov/bluebird/blob/master/API.md#option-filter&quot;&gt;Promisification filters&lt;/a&gt; are now passed &lt;code&gt;passesDefaultFilter&lt;/code&gt; boolean</source>
          <target state="translated">&lt;a href=&quot;https://github.com/petkaantonov/bluebird/blob/master/API.md#option-filter&quot;&gt;Promisification 필터는&lt;/a&gt; 이제 전달됩니다 &lt;code&gt;passesDefaultFilter&lt;/code&gt; 부울</target>
        </trans-unit>
        <trans-unit id="9d886fa61fee135c57c00e420157e599d59d1039" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/petkaantonov/bluebird/blob/master/API.md#option-promisifier&quot;&gt;Custom promisifiers&lt;/a&gt; are now passed the default promisifier which can be used to add enhancements on top of normal node promisification</source>
          <target state="translated">&lt;a href=&quot;https://github.com/petkaantonov/bluebird/blob/master/API.md#option-promisifier&quot;&gt;커스텀 Promisifiers&lt;/a&gt; 는 이제 기본 Promisifier를 넘겨주었습니다.</target>
        </trans-unit>
        <trans-unit id="db6f8425b0fd742ed600902455d17daadb218099" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;index&quot;&gt;API Documentation&lt;/a&gt; has been reorganized and more elaborate examples added</source>
          <target state="translated">&lt;a href=&quot;index&quot;&gt;API 설명서&lt;/a&gt; 가 재구성되었으며보다 정교한 예제가 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="ec86f4d64f8b6063d7911f856fdd94e72573f44c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;promise.resolve&quot;&gt;&lt;code&gt;Promise.resolve(iterable).all()&lt;/code&gt;&lt;/a&gt; is the same as &lt;a href=&quot;promise.all&quot;&gt;&lt;code&gt;Promise.all(iterable)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;promise.resolve&quot;&gt; &lt;code&gt;Promise.resolve(iterable).all()&lt;/code&gt; &lt;/a&gt; 은&lt;a href=&quot;promise.all&quot;&gt; &lt;code&gt;Promise.all(iterable)&lt;/code&gt; &lt;/a&gt; 과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="25c010290f5f0e1723a9cf63750c31be0d48e5dc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;promise.some&quot;&gt;&lt;code&gt;Promise.some&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;promise.any&quot;&gt;&lt;code&gt;Promise.any&lt;/code&gt;&lt;/a&gt; use &lt;code&gt;AggregateError&lt;/code&gt; as rejection reason when they fail.</source>
          <target state="translated">&lt;a href=&quot;promise.some&quot;&gt; &lt;code&gt;Promise.some&lt;/code&gt; &lt;/a&gt; 및&lt;a href=&quot;promise.any&quot;&gt; &lt;code&gt;Promise.any&lt;/code&gt; &lt;/a&gt; 는실패시 &lt;code&gt;AggregateError&lt;/code&gt; 를 거부 사유로사용합니다.</target>
        </trans-unit>
        <trans-unit id="a700eded62228b611f66351595373a2d984805a8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;promise.using&quot;&gt;&lt;code&gt;Promise.using&lt;/code&gt;&lt;/a&gt;, a function to safely use disposers in a way that automatically calls their release method</source>
          <target state="translated">&lt;a href=&quot;promise.using&quot;&gt; &lt;code&gt;Promise.using&lt;/code&gt; &lt;/a&gt; , release 메소드를 자동으로 호출하는 방식으로 안전하게 disposers를 사용하는 기능</target>
        </trans-unit>
        <trans-unit id="707e2b8e91ce27db54eb34d48f5caf3ed16573b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;promiseCancelled&quot;&lt;/code&gt; - Fired when a promise is cancelled.</source>
          <target state="translated">&lt;code&gt;&quot;promiseCancelled&quot;&lt;/code&gt; -약속이 취소되면 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="e982920354e30f94ee46ce58ff653034858eef2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;promiseChained&quot;&lt;/code&gt; - Fired when a promise is created through chaining (e.g. &lt;a href=&quot;api/then&quot;&gt;&lt;code&gt;.then&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;&quot;promiseChained&quot;&lt;/code&gt; -체인을 통해 약속이 만들어 질 때 발생합니다 (예 : &lt;a href=&quot;api/then&quot;&gt; &lt;code&gt;.then&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="e6aebd7799b7616dcb72c84b664a52d3b871df3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;promiseCreated&quot;&lt;/code&gt; - Fired when a promise is created through the constructor.</source>
          <target state="translated">&lt;code&gt;&quot;promiseCreated&quot;&lt;/code&gt; -생성자를 통해 약속이 생성되면 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="2b80d78357499528791adc865566e5b7d2a20e23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;promiseFulfilled&quot;&lt;/code&gt; - Fired when a promise is fulfilled.</source>
          <target state="translated">&lt;code&gt;&quot;promiseFulfilled&quot;&lt;/code&gt; -약속이 이행되면 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="7ac738e152ab029d68b7e1a1d90fc3b9fa921ad1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;promiseRejected&quot;&lt;/code&gt; - Fired when a promise is rejected.</source>
          <target state="translated">&lt;code&gt;&quot;promiseRejected&quot;&lt;/code&gt; -약속이 거부되면 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="838e1d5622ace12a160ee851e839ecf5e8c09e68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;promiseResolved&quot;&lt;/code&gt; - Fired when a promise adopts another's state.</source>
          <target state="translated">&lt;code&gt;&quot;promiseResolved&quot;&lt;/code&gt; -약속이 다른 사람의 상태를 채택하면 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="e55f76a743ea5472e640c10393f607373e36a132" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;rejectionHandled&quot;&lt;/code&gt; (corresponds to the local &lt;a href=&quot;promise.onunhandledrejectionhandled&quot;&gt;&lt;code&gt;Promise.onUnhandledRejectionHandled&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;&quot;rejectionHandled&quot;&lt;/code&gt; (로컬 &lt;a href=&quot;promise.onunhandledrejectionhandled&quot;&gt; &lt;code&gt;Promise.onUnhandledRejectionHandled&lt;/code&gt; 에&lt;/a&gt; 해당 )</target>
        </trans-unit>
        <trans-unit id="ec47d34c92b5539434351de7e424ef8e6dd20f85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;unhandledRejection&quot;&lt;/code&gt; (corresponds to the local &lt;a href=&quot;promise.onpossiblyunhandledrejection&quot;&gt;&lt;code&gt;Promise.onPossiblyUnhandledRejection&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;&quot;unhandledRejection&quot;&lt;/code&gt; (로컬 &lt;a href=&quot;promise.onpossiblyunhandledrejection&quot;&gt; &lt;code&gt;Promise.onPossiblyUnhandledRejection&lt;/code&gt; 에&lt;/a&gt; 해당 )</target>
        </trans-unit>
        <trans-unit id="65a4e31b42be3ee6dfb26a818bb2ed0eed9ee5ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.any&lt;/code&gt; and &lt;code&gt;.some&lt;/code&gt; now consistently reject with RangeError when input array contains too few promises</source>
          <target state="translated">&lt;code&gt;.any&lt;/code&gt; 입력 배열에 약속이 너무 적을 때 .any 및 &lt;code&gt;.some&lt;/code&gt; 은 RangeError로 일관되게 거부합니다.</target>
        </trans-unit>
        <trans-unit id="99009ecbf90e53bf9f08b6164415d704b57e68b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.bind&lt;/code&gt; also has a useful side purpose - promise handlers don't need to share a function to use shared state:</source>
          <target state="translated">&lt;code&gt;.bind&lt;/code&gt; 는 유용한 부수적 목적을 가지고 있습니다. 약속 핸들러는 공유 상태를 사용하기 위해 함수를 공유 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="a3a32a6776a97c209a61f769d9f004188d876eff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.bind&lt;/code&gt; is the most efficient way of utilizing &lt;code&gt;this&lt;/code&gt; with promises. The handler functions in the above code are not closures and can therefore even be hoisted out if needed. There is literally no overhead when propagating the bound value from one promise to another.</source>
          <target state="translated">&lt;code&gt;.bind&lt;/code&gt; 는 &lt;code&gt;this&lt;/code&gt; 를 약속과 함께 사용하는 가장 효율적인 방법입니다 . 위 코드의 핸들러 함수는 클로저가 아니므로 필요한 경우 끌어 올릴 수도 있습니다. 한 약속에서 다른 약속으로 바인딩 된 값을 전파 할 때 문자 그대로 오버 헤드가 없습니다.</target>
        </trans-unit>
        <trans-unit id="fd5a4858ca86012f6aa23d7c8ab531c5b71cfc04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.catch&lt;/code&gt; is a convenience method for handling errors in promise chains. It comes in two variants - A catch-all variant similar to the synchronous &lt;code&gt;catch(e) {&lt;/code&gt; block. This variant is compatible with native promises. - A filtered variant (like other non-JS languages typically have) that lets you only handle specific errors. &lt;strong&gt;This variant is usually preferable and is significantly safer&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;.catch&lt;/code&gt; 는 약속 체인에서 오류를 처리하기위한 편리한 방법입니다. 동기 &lt;code&gt;catch(e) {&lt;/code&gt; 블록 과 유사한 catch-all 변형 입니다. 이 변형은 기본 약속과 호환됩니다. -특정 오류 만 처리 할 수있는 필터링 된 변형 (일반적으로 다른 비 JS 언어와 마찬가지로) &lt;strong&gt;이 변형은 일반적으로 바람직하며 훨씬 안전&lt;/strong&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="68152588c4a5ce0f359ea23644b8b04ba25fb413" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.catch&lt;/code&gt; is specified for built-in Javascript promises and is &quot;sugar&quot; for &lt;code&gt;.then(null, function(){})&lt;/code&gt;. Since the way errors work in promises is almost the entire point (and the only thing jQuery never got right, even if it used &lt;code&gt;.pipe&lt;/code&gt; as a &lt;code&gt;.then&lt;/code&gt;), I really hope the implementation you are using provides this method for readability.</source>
          <target state="translated">&lt;code&gt;.catch&lt;/code&gt; 는 내장 Javascript promise에 지정되며 &lt;code&gt;.then(null, function(){})&lt;/code&gt; &quot;설탕&quot;입니다 . 약속의 방법으로 오류 작업이 거의 모든 점 (그리고 유일한 것은 jQuery를 그것을 사용하는 경우에도 바로 없었어 때문에 &lt;code&gt;.pipe&lt;/code&gt; 을 A와 &lt;code&gt;.then&lt;/code&gt; ), 난 정말 당신이 사용하는 구현 가독성이 방법을 제공 바랍니다.</target>
        </trans-unit>
        <trans-unit id="9a3a8044055a104e91f43da9c466b2b3c0fa1be8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.done([Function fulfilledHandler] [, Function rejectedHandler ] [, Function progressHandler ])&lt;/code&gt; -&amp;gt; &lt;code&gt;void&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.done([Function fulfilledHandler] [, Function rejectedHandler ] [, Function progressHandler ])&lt;/code&gt; -&amp;gt; &lt;code&gt;void&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="887c91f398f8cbd3f2318580c32535b6cd356f3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.error()&lt;/code&gt; now catches additional sources of rejections:</source>
          <target state="translated">&lt;code&gt;.error()&lt;/code&gt; 이제 추가 거부 소스를 포착합니다.</target>
        </trans-unit>
        <trans-unit id="d939783501af855301d75a09a0831d05e00bb529" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.fail()&lt;/code&gt; -&amp;gt; &lt;a href=&quot;api/catch&quot;&gt;&lt;code&gt;.catch()&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;.caught()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.fail()&lt;/code&gt; -&amp;gt; &lt;a href=&quot;api/catch&quot;&gt; &lt;code&gt;.catch()&lt;/code&gt; &lt;/a&gt; 또는 &lt;code&gt;.caught()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a0984fd40a2e3f9a62fa0fa74e494c6743e1b7a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.filter&lt;/code&gt;, &lt;code&gt;.map&lt;/code&gt;, and &lt;code&gt;.reduce&lt;/code&gt; no longer skip sparse array holes. This is a backwards incompatible change.</source>
          <target state="translated">&lt;code&gt;.filter&lt;/code&gt; , &lt;code&gt;.map&lt;/code&gt; 및 &lt;code&gt;.reduce&lt;/code&gt; 더 이상 스파 스 배열 구멍을 건너 뜁니다. 이전 버전과 호환되지 않는 변경입니다.</target>
        </trans-unit>
        <trans-unit id="d52b956c7d1196833d3bfed5c1e2f75136c82af9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.fin()&lt;/code&gt; -&amp;gt; &lt;a href=&quot;api/finally&quot;&gt;&lt;code&gt;.finally()&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;.lastly()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.fin()&lt;/code&gt; -&amp;gt; &lt;a href=&quot;api/finally&quot;&gt; &lt;code&gt;.finally()&lt;/code&gt; &lt;/a&gt; 또는 &lt;code&gt;.lastly()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c07783ec7c94b9a6438693ca6240cc8bf4b03aff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.fromNode&lt;/code&gt; is now better known as &lt;a href=&quot;api/promise.fromcallback&quot;&gt;&lt;code&gt;Promise.fromCallback&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;.fromNode&lt;/code&gt; 는 이제 Promise.fromCallback 으로 잘 알려져 있습니다 &lt;a href=&quot;api/promise.fromcallback&quot;&gt; &lt;code&gt;Promise.fromCallback&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ed075d35404f23e83e47549c6a4effd61a464b78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.map()&lt;/code&gt; and &lt;code&gt;.filter()&lt;/code&gt; do not call the given mapper or filterer function in any specific order</source>
          <target state="translated">&lt;code&gt;.map()&lt;/code&gt; 및 &lt;code&gt;.filter()&lt;/code&gt; 는 특정 매퍼 또는 필터 함수를 특정 순서로 호출하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bc76d0cacb7feb924cd68fc29d95880f0de1ef06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.nodeify&lt;/code&gt; is now better known as &lt;a href=&quot;api/ascallback&quot;&gt;&lt;code&gt;.asCallback&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;.nodeify&lt;/code&gt; 는 이제 .asCallback 으로 잘 알려져 있습니다 &lt;a href=&quot;api/ascallback&quot;&gt; &lt;code&gt;.asCallback&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ce5eeaede6c311764a1f5146383c4e14e884351e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.progress(dynamic value)&lt;/code&gt; -&amp;gt; &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.progress(dynamic value)&lt;/code&gt; -&amp;gt; &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b59168b92c923af4c2a2ef1e34381cbcb28b063b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.progressed(Function handler)&lt;/code&gt; -&amp;gt; &lt;code&gt;Promise&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.progressed(Function handler)&lt;/code&gt; -&amp;gt; &lt;code&gt;Promise&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fe6d1f184cae64c1722058b6d10c6f5f80b23b52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.reject(dynamic reason)&lt;/code&gt; -&amp;gt; &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.reject(dynamic reason)&lt;/code&gt; -&amp;gt; &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="147b6487e534e359c024d5baeb9a1bf417dc4d6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.resolve(dynamic value)&lt;/code&gt; -&amp;gt; &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.resolve(dynamic value)&lt;/code&gt; -&amp;gt; &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0be3cd9fd10545106b47274b1e937795406a7ccf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.spread()&lt;/code&gt; now rejects if the ultimate value given to it is not spreadable.</source>
          <target state="translated">&lt;code&gt;.spread()&lt;/code&gt; 이제 주어진 최종 값이 분산 가능 하지 않으면 거부합니다.</target>
        </trans-unit>
        <trans-unit id="5e77b63ba0b864c159fe92e5a91f5763539bdcbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.tapCatch&lt;/code&gt; is a convenience method for reacting to errors without handling them with promises - similar to &lt;code&gt;finally&lt;/code&gt; but only called on rejections. Useful for logging errors.</source>
          <target state="translated">&lt;code&gt;.tapCatch&lt;/code&gt; 는 유사 - 약속을 처리하지 않고 오류에 반응하는 편리한 방법이다 &lt;code&gt;finally&lt;/code&gt; 하지만 거절을했다. 오류 기록에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="97e0188fe449e2e8662704edb71578f477f7caa2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.then([Function fulfilledHandler] [, Function rejectedHandler ] [, Function progressHandler ])&lt;/code&gt; -&amp;gt; &lt;code&gt;Promise&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.then([Function fulfilledHandler] [, Function rejectedHandler ] [, Function progressHandler ])&lt;/code&gt; -&amp;gt; &lt;code&gt;Promise&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f724d882e1a56b33876f411960e3f63411d81fbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.thenReject()&lt;/code&gt; -&amp;gt; &lt;a href=&quot;api/throw&quot;&gt;&lt;code&gt;.throw()&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;thenThrow()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.thenReject()&lt;/code&gt; -&amp;gt; &lt;a href=&quot;api/throw&quot;&gt; &lt;code&gt;.throw()&lt;/code&gt; &lt;/a&gt; 또는 &lt;code&gt;thenThrow()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5652ea8d9885be618c7937d63c9e753fbdd5102a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.thenResolve()&lt;/code&gt; -&amp;gt; &lt;a href=&quot;api/return&quot;&gt;&lt;code&gt;.return()&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;.thenReturn()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.thenResolve()&lt;/code&gt; -&amp;gt; &lt;a href=&quot;api/return&quot;&gt; &lt;code&gt;.return()&lt;/code&gt; &lt;/a&gt; 또는 &lt;code&gt;.thenReturn()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="088d5295640e0f46d25beb5fcaa48f0ad14d6b51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.using&lt;/code&gt; can now be used with disposers created from different bluebird copy</source>
          <target state="translated">&lt;code&gt;.using&lt;/code&gt; 은 이제 다른 블루 버드 사본에서 생성 된 디스 포저와 함께 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="d6b90502e0ca159b1adcaf1e424692995937d72d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AggregateError&lt;/code&gt;s are caught in &lt;a href=&quot;error&quot;&gt;&lt;code&gt;.error&lt;/code&gt;&lt;/a&gt; handlers, even if the contained errors are not operational.</source>
          <target state="translated">&lt;code&gt;AggregateError&lt;/code&gt; 포함 된 오류가 작동하지 않더라도 &lt;a href=&quot;error&quot;&gt; &lt;code&gt;.error&lt;/code&gt; &lt;/a&gt; 핸들러 에서 AggregateError 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="64b281a413cc242a1fca52f87647b0a6bac03cf6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BLUEBIRD_DEBUG&lt;/code&gt; - If set this will enable long stack traces and warnings, unless those are explicitly disabled. Setting this to exactly &lt;code&gt;0&lt;/code&gt; can be used to override &lt;code&gt;NODE_ENV=development&lt;/code&gt; enabling long stack traces and warnings.</source>
          <target state="translated">&lt;code&gt;BLUEBIRD_DEBUG&lt;/code&gt; - 설정하면 명시 적으로 비활성화하지 않는 한 긴 스택 추적 및 경고가 활성화됩니다. 이것을 정확히 &lt;code&gt;0&lt;/code&gt; 으로 설정하면 긴 스택 추적 및 경고를 가능하게하는 &lt;code&gt;NODE_ENV=development&lt;/code&gt; 를 재정의하는 데 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6506533846e7268e227ba824bd82d159b0d20d63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BLUEBIRD_DEBUG&lt;/code&gt; - Set to any truthy value this will enable long stack traces and warnings</source>
          <target state="translated">&lt;code&gt;BLUEBIRD_DEBUG&lt;/code&gt; - 정확한 값으로 설정하면 긴 스택 추적 및 경고가 가능합니다</target>
        </trans-unit>
        <trans-unit id="53f4c053be4e23ca93a86710702aad474f48142c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BLUEBIRD_LONG_STACK_TRACES&lt;/code&gt; - if set exactly to &lt;code&gt;0&lt;/code&gt; it will explicitly disable long stack traces and this overrides any other setting that might enable long stack traces. If set to any truthy value, it will explicitly enable long stack traces.</source>
          <target state="translated">&lt;code&gt;BLUEBIRD_LONG_STACK_TRACES&lt;/code&gt; - 정확히 &lt;code&gt;0&lt;/code&gt; 으로 설정하면 긴 스택 추적을 명시 적으로 비활성화하고 긴 스택 추적을 활성화 할 수있는 다른 설정을 무시합니다. 정확한 값으로 설정하면 긴 스택 추적을 명시 적으로 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="b8c81bad21bdc6adee17fc1e515a08dba86d76d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BLUEBIRD_WARNINGS&lt;/code&gt; - if set exactly to &lt;code&gt;0&lt;/code&gt; it will explicitly disable warnings and this overrides any other setting that might enable warnings. If set to any truthy value, it will explicitly enable warnings.</source>
          <target state="translated">&lt;code&gt;BLUEBIRD_WARNINGS&lt;/code&gt; - 정확히 &lt;code&gt;0&lt;/code&gt; 으로 설정하면 경고를 명시 적으로 비활성화하고 경고를 활성화 할 수있는 다른 설정을 무시합니다. 정확한 값으로 설정하면 명시 적으로 경고가 활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="ad3ab5f1afcd6f2f5f17d88239b1ef9b1421cdec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NODE_ENV&lt;/code&gt; - If set exactly to &lt;code&gt;development&lt;/code&gt; it will have the same effect as if the &lt;code&gt;BLUEBIRD_DEBUG&lt;/code&gt; variable was set.</source>
          <target state="translated">&lt;code&gt;NODE_ENV&lt;/code&gt; - &lt;code&gt;development&lt;/code&gt; 정확하게 설정된 경우 &lt;code&gt;BLUEBIRD_DEBUG&lt;/code&gt; 변수가 설정된 것과 동일한 효과를 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="f955bfcb235db672f64020fd15b0442be7e03971" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OperationalError&lt;/code&gt;s are caught in &lt;a href=&quot;error&quot;&gt;&lt;code&gt;.error&lt;/code&gt;&lt;/a&gt; handlers.</source>
          <target state="translated">&lt;code&gt;OperationalError&lt;/code&gt; 는 &lt;a href=&quot;error&quot;&gt; &lt;code&gt;.error&lt;/code&gt; &lt;/a&gt; 핸들러 에서 발견됩니다 .</target>
        </trans-unit>
        <trans-unit id="9794e6acd5e922a9e2f2a1d89ba81bd0785d2545" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OperationalErrors&lt;/code&gt; thrown by promisified functions retain custom properties, such as &lt;code&gt;.code&lt;/code&gt; and &lt;code&gt;.path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OperationalErrors&lt;/code&gt; promisified 기능에 의해 슬로우 같은 사용자 지정 속성, 유지 &lt;code&gt;.code&lt;/code&gt; 및 &lt;code&gt;.path&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="39dc89e423c98b53c4611f6e1d811c31863dc5cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;P&lt;/code&gt; alias for &lt;code&gt;Promise&lt;/code&gt; now exists in global scope when using browser builds without a module loader, fixing an issue with firefox extensions</source>
          <target state="translated">&lt;code&gt;P&lt;/code&gt; &lt;code&gt;Promise&lt;/code&gt; 의P 별명은 이제 모듈 로더없이 브라우저 빌드를 사용할 때 전역 범위에 존재하여 firefox 확장 문제를 해결합니다.</target>
        </trans-unit>
        <trans-unit id="76332c6723be116e6132e658c068c8c25b9f1ba9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;P&lt;/code&gt; alias was not declared inside WebWorkers</source>
          <target state="translated">&lt;code&gt;P&lt;/code&gt; WebWorkers에서 P 별명이 선언되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="1ea57576742734d845d386b5ec9c06a476441519" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise.each&lt;/code&gt; is very similar to &lt;a href=&quot;promise.mapseries&quot;&gt;&lt;code&gt;Promise.mapSeries&lt;/code&gt;&lt;/a&gt;. The difference between &lt;code&gt;Promise.each&lt;/code&gt; and &lt;code&gt;Promise.mapSeries&lt;/code&gt; is their resolution value. &lt;code&gt;Promise.each&lt;/code&gt; resolves with an array as explained above, while &lt;code&gt;Promise.mapSeries&lt;/code&gt; resolves with an array containing the &lt;em&gt;outputs&lt;/em&gt; of the iterator function on each step. This way, &lt;code&gt;Promise.each&lt;/code&gt; is meant to be mainly used for side-effect operations (since the outputs of the iterator are essentially discarded), just like the native &lt;code&gt;.forEach()&lt;/code&gt; method of arrays, while &lt;code&gt;Promise.map&lt;/code&gt; is meant to be used as an async version of the native &lt;code&gt;.map()&lt;/code&gt; method of arrays.</source>
          <target state="translated">&lt;code&gt;Promise.each&lt;/code&gt; 은 매우 유사하다 &lt;a href=&quot;promise.mapseries&quot;&gt; &lt;code&gt;Promise.mapSeries&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;Promise.each&lt;/code&gt; 와 &lt;code&gt;Promise.mapSeries&lt;/code&gt; 의 차이점은 해상도 값입니다. &lt;code&gt;Promise.each&lt;/code&gt; 는 위에서 설명한대로 배열로 해석되는 반면 &lt;code&gt;Promise.mapSeries&lt;/code&gt; 는 각 단계에서 반복기 함수 의 &lt;em&gt;출력&lt;/em&gt; 을 포함하는 배열로 해석됩니다 . 이런 식으로 &lt;code&gt;Promise.each&lt;/code&gt; 는 배열 의 네이티브 &lt;code&gt;.forEach()&lt;/code&gt; 메서드 와 마찬가지로 주로 부작용 작업에 사용되는 반면 &lt;code&gt;Promise.map&lt;/code&gt; 은 사용됩니다. 네이티브 &lt;code&gt;.map()&lt;/code&gt; 의 비동기 버전으로 배열 방법.</target>
        </trans-unit>
        <trans-unit id="ee44c1ff31fb14c3211e458ecbe4240de1adf541" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise.map()&lt;/code&gt;, &lt;code&gt;.map()&lt;/code&gt;, &lt;code&gt;Promise.filter()&lt;/code&gt; and &lt;code&gt;.filter()&lt;/code&gt; start calling their callbacks as soon as possible while retaining a correct order. See &lt;a href=&quot;https://github.com/petkaantonov/bluebird/commit/8085922fb95a9987fda0cf2337598ab4a98dc315&quot;&gt;&lt;code&gt;8085922f&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Promise.map()&lt;/code&gt; , &lt;code&gt;.map()&lt;/code&gt; , &lt;code&gt;Promise.filter()&lt;/code&gt; 및 &lt;code&gt;.filter()&lt;/code&gt; 가능한 한 빨리 올바른 순서를 유지하면서 그들의 콜백을 호출하기 시작합니다. &lt;a href=&quot;https://github.com/petkaantonov/bluebird/commit/8085922fb95a9987fda0cf2337598ab4a98dc315&quot;&gt; &lt;code&gt;8085922f&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1e54244a8eac754cfec002781e2e711140f4c203" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise.mapSeries&lt;/code&gt; is very similar to &lt;a href=&quot;promise.each&quot;&gt;&lt;code&gt;Promise.each&lt;/code&gt;&lt;/a&gt;. The difference between &lt;code&gt;Promise.each&lt;/code&gt; and &lt;code&gt;Promise.mapSeries&lt;/code&gt; is their resolution value. &lt;code&gt;Promise.mapSeries&lt;/code&gt; resolves with an array as explained above, while &lt;code&gt;Promise.each&lt;/code&gt; resolves with an array containing the &lt;em&gt;resolved values of the input elements&lt;/em&gt; (ignoring the outputs of the iteration steps). This way, &lt;code&gt;Promise.each&lt;/code&gt; is meant to be mainly used for side-effect operations (since the outputs of the iterator are essentially discarded), just like the native &lt;code&gt;.forEach()&lt;/code&gt; method of arrays, while &lt;code&gt;Promise.map&lt;/code&gt; is meant to be used as an async version of the native &lt;code&gt;.map()&lt;/code&gt; method of arrays.</source>
          <target state="translated">&lt;code&gt;Promise.mapSeries&lt;/code&gt; 은 매우 유사하다 &lt;a href=&quot;promise.each&quot;&gt; &lt;code&gt;Promise.each&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;Promise.each&lt;/code&gt; 와 &lt;code&gt;Promise.mapSeries&lt;/code&gt; 의 차이점은 해상도 값입니다. &lt;code&gt;Promise.mapSeries&lt;/code&gt; 는 위에서 설명한대로 배열로 해석되는 반면 &lt;code&gt;Promise.each&lt;/code&gt; &lt;em&gt;는 입력 요소&lt;/em&gt; 의 &lt;em&gt;해석 된 값을&lt;/em&gt; 포함하는 배열로 &lt;em&gt;해석됩니다&lt;/em&gt; (반복 단계의 출력 무시). 이런 식으로 &lt;code&gt;Promise.each&lt;/code&gt; 는 배열 의 네이티브 &lt;code&gt;.forEach()&lt;/code&gt; 메서드 와 마찬가지로 주로 부작용 작업에 사용되는 반면 Promise.map 은 반복기의 출력이 본질적으로 삭제 &lt;code&gt;Promise.map&lt;/code&gt; 배열 의 기본 &lt;code&gt;.map()&lt;/code&gt; 메서드의 비동기 버전으로 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="c612ed1c488abd3c82f87a98ee4582e44b5c7e34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise.method&lt;/code&gt; no longer wraps primitive errors</source>
          <target state="translated">&lt;code&gt;Promise.method&lt;/code&gt; 가 더 이상 원시 오류를 줄이지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2bc81586a8b97928a0929200d663cd2f9edb4618" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise.reduce&lt;/code&gt; will start calling the reducer as soon as possible, this is why you might want to use it over &lt;code&gt;Promise.all&lt;/code&gt; (which awaits for the entire array before you can call &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce&quot;&gt;&lt;code&gt;Array#reduce&lt;/code&gt;&lt;/a&gt; on it).</source>
          <target state="translated">&lt;code&gt;Promise.reduce&lt;/code&gt; 는 당신에 그것을 사용하는 것이 좋습니다 이유는, 가능한 한 빨리 감속기를 호출 시작합니다 &lt;code&gt;Promise.all&lt;/code&gt; (당신이 호출 할 수 있습니다 전에 전체 배열하는이 기다리고 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce&quot;&gt; &lt;code&gt;Array#reduce&lt;/code&gt; &lt;/a&gt; 그것에).</target>
        </trans-unit>
        <trans-unit id="c78964268a8ed72bcfe7046d9799f43e4722cc5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise.settle&lt;/code&gt; has been deprecated. Use &lt;a href=&quot;api/reflect&quot;&gt;&lt;code&gt;.reflect&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;Promise.settle&lt;/code&gt; 은 더 이상 사용되지 않습니다. 대신 &lt;a href=&quot;api/reflect&quot;&gt; &lt;code&gt;.reflect&lt;/code&gt; &lt;/a&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="7cde6df3e1481a8dd07f3f573c889f755a9afa15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise.spawn&lt;/code&gt; has been deprecated. Use &lt;a href=&quot;api/promise.coroutine&quot;&gt;&lt;code&gt;Promise.coroutine&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;Promise.spawn&lt;/code&gt; 은 더 이상 사용되지 않습니다. 대신 &lt;a href=&quot;api/promise.coroutine&quot;&gt; &lt;code&gt;Promise.coroutine&lt;/code&gt; &lt;/a&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="f8d686bce5ffd291bf2a3796a3731e1ddef203e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise.try&lt;/code&gt; no longer wraps primitive errors</source>
          <target state="translated">&lt;code&gt;Promise.try&lt;/code&gt; 는 더 이상 원시적 오류를 감쌀 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="2bb2705a3a84cd607744632559f2207591141b3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise.using&lt;/code&gt; can now take the promises-for-resources as an array (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/733&quot;&gt;&lt;code&gt;#733&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;Promise.using&lt;/code&gt; 은 자원에 대한 약속을 배열로 취할 수 있습니다 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/733&quot;&gt; &lt;code&gt;#733&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="889f71409c65707efed149f1dc021714c9846d87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise2&lt;/code&gt; is independent to &lt;code&gt;Promise&lt;/code&gt;. Any changes to &lt;code&gt;Promise2&lt;/code&gt; do not affect the copy of Bluebird returned by &lt;code&gt;require('bluebird')&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Promise2&lt;/code&gt; 는 &lt;code&gt;Promise&lt;/code&gt; 와 독립적 입니다. &lt;code&gt;Promise2&lt;/code&gt; 를 변경해 도 &lt;code&gt;require('bluebird')&lt;/code&gt; 가 반환 한 Bluebird 사본에는 영향을 미치지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="b852b4374f0ed82d663378662afb262ae016b5c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Q(...)&lt;/code&gt; -&amp;gt; &lt;a href=&quot;api/promise.resolve&quot;&gt;&lt;code&gt;Promise.resolve()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;Q(...)&lt;/code&gt; -&amp;gt; &lt;a href=&quot;api/promise.resolve&quot;&gt; &lt;code&gt;Promise.resolve()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b4411804d7f5e11e054507cdd694c4b11689e608" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Q.fcall()&lt;/code&gt; -&amp;gt; &lt;a href=&quot;api/promise.try&quot;&gt;&lt;code&gt;Promise.try&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;Promise.attempt()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Q.fcall()&lt;/code&gt; -&amp;gt; &lt;a href=&quot;api/promise.try&quot;&gt; &lt;code&gt;Promise.try&lt;/code&gt; &lt;/a&gt; 또는 &lt;code&gt;Promise.attempt()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2af391d3789fe4e6361836ccfb4331ebf08a25ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Task.FromResult&lt;/code&gt; is analogous to &lt;a href=&quot;api/promise.resolve&quot;&gt;&lt;code&gt;Promise.resolve&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Task.FromResult&lt;/code&gt; 는 유사 &lt;a href=&quot;api/promise.resolve&quot;&gt; &lt;code&gt;Promise.resolve&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cee898bf18d5fba8e117be63929096d59daf8d6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt; is given an array with a single element (see &lt;code&gt;[5]&lt;/code&gt; instead of &lt;code&gt;5&lt;/code&gt;), so this statement will work (but is bad practice).</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; 단일 요소 배열의 지정된된다 ( &lt;code&gt;[5]&lt;/code&gt; 대신 &lt;code&gt;5&lt;/code&gt; 이 사항이 작동하므로) (그러나 나쁜 방법입니다).</target>
        </trans-unit>
        <trans-unit id="b44610234c84683f3311d2f5cddde732bb738c9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tapCatch&lt;/code&gt; all</source>
          <target state="translated">&lt;code&gt;tapCatch&lt;/code&gt; 모두 잡기</target>
        </trans-unit>
        <trans-unit id="3daa3011c821af843ab957bc3d0cceb84cf83cf6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wForgottenReturn&lt;/code&gt; is the only warning type that can be separately configured. The corresponding environmental variable key is &lt;code&gt;BLUEBIRD_W_FORGOTTEN_RETURN&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;wForgottenReturn&lt;/code&gt; 은 별도로 구성 할 수있는 유일한 경고 유형입니다. 해당 환경 변수 키는 &lt;code&gt;BLUEBIRD_W_FORGOTTEN_RETURN&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="99725fd04854ce39c1f03f1d5a93e9fa4061aff5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;window.prompt&lt;/code&gt; blocks the web page from processing while it waits for the user to enter in data. It has to block because the input is returned and the next line of code needs that result. But for sake of this tutorial we are going to convert the typical conditional code into a promise API using a &lt;a href=&quot;api/new-promise&quot;&gt;promise constructor&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;window.prompt&lt;/code&gt; 는 사용자가 데이터를 입력 할 때까지 웹 페이지가 처리되지 않도록 차단합니다. 입력이 리턴되고 다음 코드 행에 해당 결과가 필요하므로 차단해야합니다. 그러나이 튜토리얼을 위해 우리는 &lt;a href=&quot;api/new-promise&quot;&gt;promise 생성자를&lt;/a&gt; 사용하여 일반적인 조건부 코드를 promise API로 변환 할 것 입니다.</target>
        </trans-unit>
        <trans-unit id="835adca953e270542963c6a3927fa6a673b8c21d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;( If you don't get the above - you need to enable &lt;a href=&quot;promise.config&quot;&gt;long stack traces&lt;/a&gt; )&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;(위의 내용이 없으면 &lt;a href=&quot;promise.config&quot;&gt;긴 스택 추적&lt;/a&gt; 을 활성화해야 합니다. )&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="671c25105b064be0020c96b9b72d9beff91d2d6f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;**If the map's keys happen to be &lt;code&gt;Promise&lt;/code&gt;s, they are not awaited for and the resulting &lt;code&gt;Map&lt;/code&gt; will still have those same &lt;code&gt;Promise&lt;/code&gt; instances as keys&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;**지도의 키가 &lt;code&gt;Promise&lt;/code&gt; 이면 대기 하지 않으며 결과 &lt;code&gt;Map&lt;/code&gt; 에는 여전히 키 와 동일한 &lt;code&gt;Promise&lt;/code&gt; 인스턴스가 있습니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="469de8616720c8373aee851bc01074e8f877051a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;*Only the native &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot;&gt;ECMAScript 6 &lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; implementation that is provided by the environment as is is supported&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;* 지원되는 환경에서 제공 하는 기본 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot;&gt;ECMAScript 6 &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt; 구현 만&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d38cffe41a41e55a571ecbb3376ab10ab35590cb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Almost&lt;/em&gt; a sure sign of using promises as glorified callbacks. Instead of &lt;code&gt;doThat(function(err, success))&lt;/code&gt; you do &lt;code&gt;doThat().then(success, err)&lt;/code&gt; and rationalize to yourself that at least the code is &quot;less coupled&quot; or something.</source>
          <target state="translated">&lt;em&gt;거의&lt;/em&gt; 영화 롭게 콜백으로 약속을 사용하는 확실한 표시. 대신 &lt;code&gt;doThat(function(err, success))&lt;/code&gt; 당신이 &lt;code&gt;doThat().then(success, err)&lt;/code&gt; 자신을 합리화 적어도 코드는 &quot;적은 결합&quot;또는 무언가이다.</target>
        </trans-unit>
        <trans-unit id="d28d455b2b68e5b5026f7ebda07c7eb8ece86951" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;For compatibility with earlier ECMAScript version, an alias &lt;code&gt;.caught&lt;/code&gt; is provided for &lt;a href=&quot;catch&quot;&gt;&lt;code&gt;.catch&lt;/code&gt;&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;이전 ECMAScript 버전과의 호환성을 위해 &lt;a href=&quot;catch&quot;&gt; &lt;code&gt;.catch&lt;/code&gt; 에&lt;/a&gt; 별명 &lt;code&gt;.caught&lt;/code&gt; 가 제공됩니다 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cdbf3074f829eae60d0c5be270da6aab08daa742" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;For compatibility with earlier ECMAScript version, an alias &lt;code&gt;.lastly&lt;/code&gt; is provided for &lt;a href=&quot;finally&quot;&gt;&lt;code&gt;.finally&lt;/code&gt;&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;이전 ECMAScript 버전과의 호환성을 위해 &lt;a href=&quot;finally&quot;&gt; &lt;code&gt;.finally&lt;/code&gt; &lt;/a&gt; 별명 &lt;code&gt;.lastly&lt;/code&gt; 가 제공됩니다 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="29f858a70aad32eb70475985095b4ba0b6c25890" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;For compatibility with earlier ECMAScript version, an alias &lt;code&gt;.thenReturn&lt;/code&gt; is provided for &lt;a href=&quot;return&quot;&gt;&lt;code&gt;.return&lt;/code&gt;&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;이전 ECMAScript 버전과의 호환성을 위해 &lt;a href=&quot;return&quot;&gt; &lt;code&gt;.return&lt;/code&gt; 에&lt;/a&gt; 별명 &lt;code&gt;.thenReturn&lt;/code&gt; 이 제공됩니다 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d49c63d4e6e5c17679ad229b08be6372c86bb3e3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;For compatibility with earlier ECMAScript version, an alias &lt;code&gt;.thenThrow&lt;/code&gt; is provided for &lt;a href=&quot;throw&quot;&gt;&lt;code&gt;.throw&lt;/code&gt;&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;이전 ECMAScript 버전과의 호환성을 위해 &lt;a href=&quot;throw&quot;&gt; &lt;code&gt;.throw&lt;/code&gt; 에&lt;/a&gt; 별명 &lt;code&gt;.thenThrow&lt;/code&gt; 가 제공됩니다 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="66fcaa88029b29d0d2ba001b065fbd897299df1e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;For compatibility with earlier ECMAScript version, an alias &lt;code&gt;Promise.attempt&lt;/code&gt; is provided for &lt;a href=&quot;promise.try&quot;&gt;&lt;code&gt;Promise.try&lt;/code&gt;&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;이전 ECMAScript 버전과의 호환성을 위해 &lt;a href=&quot;promise.try&quot;&gt; &lt;code&gt;Promise.try&lt;/code&gt; 에&lt;/a&gt; 별명 &lt;code&gt;Promise.attempt&lt;/code&gt; 가 제공됩니다 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7402195d74822040ac6c1c54f58ee19dc5f4c44f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;For compatibility with earlier ECMAScript versions, an alias &lt;code&gt;.caught&lt;/code&gt; is provided for &lt;a href=&quot;catch&quot;&gt;&lt;code&gt;.catch&lt;/code&gt;&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;이전 ECMAScript 버전과의 호환성을 위해 &lt;a href=&quot;catch&quot;&gt; &lt;code&gt;.catch&lt;/code&gt; 에&lt;/a&gt; 별명 &lt;code&gt;.caught&lt;/code&gt; 가 제공됩니다 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="593d5681c9a8bf1d4d620e19f34050407679f153" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;If &lt;code&gt;initialValue&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt; (or a promise that resolves to &lt;code&gt;undefined&lt;/code&gt;) and the iterable contains only 1 item, the callback will not be called and the iterable's single item is returned. If the iterable is empty, the callback will not be called and &lt;code&gt;initialValue&lt;/code&gt; is returned (which may be &lt;code&gt;undefined&lt;/code&gt;).&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;경우 &lt;code&gt;initialValue&lt;/code&gt; 되어 &lt;code&gt;undefined&lt;/code&gt; (또는 약속 것과 결의 &lt;code&gt;undefined&lt;/code&gt; )과는 반복자는 1 항목을 포함하고, 콜백이 호출되지 않고 반복 가능한의 단일 항목이 반환됩니다. iterable이 비어 있으면 콜백이 호출되지 않고 &lt;code&gt;initialValue&lt;/code&gt; 가 반환됩니다 ( &lt;code&gt;undefined&lt;/code&gt; 일 수 있음 ).&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2e7c248cd58ac5a0c0cfcc0543bdb6487415fb3e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;If you are wondering why this is a warning and not a simple TypeError it is because the due to historic reasons Promises/A+ specification requires that incorrect usage is silently ignored.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;이것이 단순한 TypeError가 아닌 경고 인 이유를 궁금해하는 경우 역사적인 이유 Promises / A + 사양에서는 잘못된 사용법을 자동으로 무시해야하기 때문입니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3f0a4e21f1cd7f12c4c626a9c929211a3f6dff42" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;If you're thinking, &quot;There's no &lt;code&gt;readFileAsync&lt;/code&gt; method on &lt;code&gt;fs&lt;/code&gt; that returns a promise!&quot; see &lt;a href=&quot;api/promisification&quot;&gt;promisification&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&quot; &lt;code&gt;fs&lt;/code&gt; 에는 약속을 반환하는 &lt;code&gt;readFileAsync&lt;/code&gt; 메서드 가 없습니다 !&quot; &lt;a href=&quot;api/promisification&quot;&gt;약속을&lt;/a&gt; 참조하십시오&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d353b2f5a3c52bc20e117d1b11210377c6590211" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note, &quot;errors&quot; mean errors, as in objects that are &lt;code&gt;instanceof Error&lt;/code&gt; - not strings, numbers and so on. See &lt;a href=&quot;http://www.devthought.com/2011/12/22/a-string-is-not-an-error/&quot;&gt;a string is not an error&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&quot;오류&quot;는 문자열, 숫자 등이 아닌 &lt;code&gt;instanceof Error&lt;/code&gt; 개체에서와 같이 오류를 의미합니다 . &lt;a href=&quot;http://www.devthought.com/2011/12/22/a-string-is-not-an-error/&quot;&gt;문자열이 오류가 아닌지&lt;/a&gt; 확인하십시오 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="22d9df1d807af05a7e861f11cdbf65c99a2c8aa2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: In 1.x and 0.x &lt;code&gt;Promise.join&lt;/code&gt; used to be a &lt;code&gt;Promise.all&lt;/code&gt; that took the values in as arguments instead of an array. This behavior has been deprecated but is still supported partially - when the last argument is an immediate function value the new semantics will apply&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;참고 : 1.x 및 0.x에서 &lt;code&gt;Promise.join&lt;/code&gt; 은 값을 배열 대신 인수로 사용 하는 &lt;code&gt;Promise.all&lt;/code&gt; 이었습니다 . 이 동작은 더 이상 사용되지 않지만 여전히 부분적으로 지원됩니다. 마지막 인수가 즉시 함수 값인 경우 새 의미 체계가 적용됩니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="49a30b4ac82bf3eb63dca24d2a10a6c43ce71857" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: See &lt;a href=&quot;../anti-patterns#the-explicit-construction-anti-pattern&quot;&gt;explicit construction anti-pattern&lt;/a&gt; before creating promises yourself&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;참고 : 약속을 직접 작성하기 전에 &lt;a href=&quot;../anti-patterns#the-explicit-construction-anti-pattern&quot;&gt;명시 적 구성 반 패턴&lt;/a&gt; 참조&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5c227ffc8620c8faca209767a03229c0010ff207" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: in browsers it is necessary to call &lt;code&gt;.tap&lt;/code&gt; with &lt;code&gt;console.log.bind(console)&lt;/code&gt; because console methods can not be called as stand-alone functions.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;참고 : 브라우저에서 호출 할 필요가 &lt;code&gt;.tap&lt;/code&gt; 와 &lt;code&gt;console.log.bind(console)&lt;/code&gt; 콘솔 방법은 독립 실행 형 함수로 호출 할 수 없습니다 때문입니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8c867c64bad09b7443027b56425d4e57eebe1d24" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: in browsers it is necessary to call &lt;code&gt;.tapCatch&lt;/code&gt; with &lt;code&gt;console.log.bind(console)&lt;/code&gt; because console methods can not be called as stand-alone functions.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;참고 : 브라우저에서는 콘솔 메소드를 독립형 함수로 호출 할 수 없으므로 &lt;code&gt;console.log.bind(console)&lt;/code&gt; 하여 &lt;code&gt;.tapCatch&lt;/code&gt; 를 호출 해야 합니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8d688bc9c4f9ea1c25b3f50ee19b6c0c74b3260e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: this hook is specific to the bluebird instance it's called on, application developers should use &lt;a href=&quot;error-management-configuration#global-rejection-events&quot;&gt;global rejection events&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;참고 :이 후크는 호출 된 블루 버드 인스턴스에만 해당되며 애플리케이션 개발자는 &lt;a href=&quot;error-management-configuration#global-rejection-events&quot;&gt;전역 거부 이벤트를&lt;/a&gt; 사용해야 합니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="35d5f78f6a3bb9c5734760bd7bee4ea789cfbda9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: this hook is specific to the bluebird instance its called on, application developers should use &lt;a href=&quot;error-management-configuration#global-rejection-events&quot;&gt;global rejection events&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;참고 :이 후크는 호출 된 블루 버드 인스턴스에만 해당되며 응용 프로그램 개발자는 &lt;a href=&quot;error-management-configuration#global-rejection-events&quot;&gt;전역 거부 이벤트를&lt;/a&gt; 사용해야 합니다&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="eb86a1add89c705f92ad687b5d3d69b322fd0cb7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: using &lt;a href=&quot;finally&quot;&gt;&lt;code&gt;.finally&lt;/code&gt;&lt;/a&gt; for resource management has better alternatives, see &lt;a href=&quot;resource-management&quot;&gt;resource management&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;참고 : &lt;a href=&quot;finally&quot;&gt; &lt;code&gt;.finally&lt;/code&gt; &lt;/a&gt; 를 자원 관리에 사용 하면 더 나은 대안이 있습니다. &lt;a href=&quot;resource-management&quot;&gt;자원 관리를&lt;/a&gt; 참조하십시오.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a3c1a2e124c8e5108de1ffff1cd7466e2384b1b2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;This is a demonstration of how powerful the feature is and not the recommended usage. For best performance you need to use &lt;code&gt;promisifyAll&lt;/code&gt; and yield promises directly.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;이 기능이 강력하고 권장 사용법이 아님을 보여줍니다. 최상의 성능을 위해서는 &lt;code&gt;promisifyAll&lt;/code&gt; 을 사용 하고 약속을 직접 산출 해야합니다 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7f455fa3aef6565294103c71fdc81f3295f9d304" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;in Node.js and other V8 environments, with support for &lt;code&gt;Error.captureStackTrace&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Node.js 및 기타 V8 환경에서 &lt;code&gt;Error.captureStackTrace&lt;/code&gt; 지원&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e647d2adf69ae0211b014773cdea810e4368088f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1. Working with collections (like arrays) but pass a single, non-collection element instead&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1. 컬렉션 (예 : 배열)으로 작업하지만 컬렉션이 아닌 단일 요소를 대신 전달&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3b1c0411ec0d8a1b31ac3de1341a81745c40bc2c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2.&lt;code&gt;return&lt;/code&gt; is forgotten in a 'fat' arrow / anonymous function call &lt;code&gt;=&amp;gt;&lt;/code&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2. '뚱뚱한'화살표 / 익명 함수 호출 &lt;code&gt;=&amp;gt;&lt;/code&gt; 에서 &lt;code&gt;return&lt;/code&gt; 이 잊혀졌습니다 .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b0021236a386168429d5d6f9cb6c1f352875f3d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Danger&lt;/strong&gt; - in order to keep bluebird promises &lt;a href=&quot;http://www.promisesaplus&quot;&gt;Promises/A+&lt;/a&gt; compliant a scheduler that executes the function asynchronously (like the examples in this page) must be used.</source>
          <target state="translated">&lt;strong&gt;위험&lt;/strong&gt; -블루 버드 약속을 유지하려면 &lt;a href=&quot;http://www.promisesaplus&quot;&gt;Promises / A +를&lt;/a&gt; 준수하는 기능을 비동기 적으로 (이 페이지의 예와 같이) 실행하는 스케줄러를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="30dae8d86239071dae84aae26f07dff8ea7ee168" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Danger&lt;/strong&gt; - in order to keep bluebird promises &lt;a href=&quot;https://promisesaplus.com/&quot;&gt;Promises/A+&lt;/a&gt; compliant a scheduler that executes the function asynchronously (like the examples in this page) must be used.</source>
          <target state="translated">&lt;strong&gt;위험&lt;/strong&gt; -bluebird promises &lt;a href=&quot;https://promisesaplus.com/&quot;&gt;/ A +&lt;/a&gt; 준수 를 유지하려면 이 페이지의 예제와 같이 비동기 적으로 함수를 실행하는 스케줄러를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="214b5a0503d3ec40a7749ae239f601d57222a2dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Easy to debug&lt;/strong&gt; - A major consequence of choosing pragmatism over theoretical elegance, a property that is unique to bluebird among promise libraries taken to this extent.</source>
          <target state="translated">&lt;strong&gt;디버그하기 쉬움&lt;/strong&gt; -이론적 우아함보다 실용주의를 선택한 주요 결과로,이 정도까지 취해진 약속 라이브러리 중에서 블루 버드 고유의 속성입니다.</target>
        </trans-unit>
        <trans-unit id="51bddc2a81445359ef3d42fcf9d12fe604c49165" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Easy to debug&lt;/strong&gt; - A major consequence of choosing pragmatism over theoretical elegancy, a property that among promise libraries taken to this extent is unique to bluebird.</source>
          <target state="translated">&lt;strong&gt;디버그 용이성&lt;/strong&gt; -이론적 우아함보다 실용주의를 선택한 결과, 약속 라이브러리 중이 정도까지는 블루 버드 고유의 속성입니다.</target>
        </trans-unit>
        <trans-unit id="5d9dffd130ddb41aa30482599c27b0a1c12bff5c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fully featured without bloat&lt;/strong&gt; - Bluebird provides all the tools and utilities needed to realize a highly expressive and fluent DSL for asynchronous JavaScript without suffering from bloat by avoiding incorporating features that are solely motivated by theoretical arguments, have extremely narrow applicability or have limited synergy and composability with existing features.</source>
          <target state="translated">&lt;strong&gt;부풀림없이 완벽하게 기능-Bluebird&lt;/strong&gt; 는 이론적 주장에 의해서만 동기를 부여하거나 적용 범위가 좁거나 시너지와 컴포지션이 제한적인 기능을 피함으로써 부풀림으로 고통받지 않고 비동기식 JavaScript를위한 표현력 있고 유창한 DSL을 실현하는 데 필요한 모든 도구와 유틸리티를 제공합니다. 기존 기능.</target>
        </trans-unit>
        <trans-unit id="cb0cf3afc3ff7ab8fbd79fda2a359a3f849fade0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fully featured without bloat&lt;/strong&gt; - Bluebird provides all the tools and utilities needed to realize a highly expressive and fluent DSL for asynchronous JavaScript without suffering from bloat by avoiding incorporating features that are solely motivated by theoretical arguments, have extremely narrow applicability, or have limited synergy and composability with existing features.</source>
          <target state="translated">&lt;strong&gt;부풀림없이 완전한 기능&lt;/strong&gt; 제공-Bluebird는 전적으로 이론적 주장에 의해 동기가 부여되거나 적용 가능성이 극히 좁거나 시너지 효과가 제한적인 기능을 통합하지 않음으로써 부풀어 오르지 않고 비동기 JavaScript 용 고도로 표현력 있고 유창한 DSL을 실현하는 데 필요한 모든 도구와 유틸리티를 제공합니다. 기존 기능과의 구성 가능성.</target>
        </trans-unit>
        <trans-unit id="7006ea531daae0c3dcde2e9246be072b8da4f3dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt; Bluebird supports &lt;a href=&quot;api/cancellation&quot;&gt;cancellation&lt;/a&gt; as an optional feature that is turned off by default. However, its implementation (since version 3.0) is meant to stop the then and catch callbacks from firing. It is not helpful in the example of a user cancellation as described here.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; Bluebird는 기본적으로 꺼져있는 선택적 기능으로 &lt;a href=&quot;api/cancellation&quot;&gt;취소&lt;/a&gt; 를 지원합니다 . 그러나 (버전 3.0 이후) 구현은 그때 중지하고 콜백이 발생하지 않도록하기위한 것입니다. 여기에 설명 된대로 사용자 취소의 예에서는 도움이되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="050cfe1149fd389497666b70df54adafc6270a26" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; - please check the linked docs for more parameters and usage examples.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; -더 많은 매개 변수 및 사용 예는 연결된 문서를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="d90170604f30779f245ec7b6a286a0b5011c8c89" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; Promise returning function should never throw</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; 약속 반환 기능을 던져해서는 안됩니다</target>
        </trans-unit>
        <trans-unit id="a112c16dd316154cde68ae4b9d884224f45feb45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; for more examples please see the &lt;a href=&quot;api/promise.using&quot;&gt;&lt;code&gt;Promise.using&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; 더 많은 예제는 참조하십시오 &lt;a href=&quot;api/promise.using&quot;&gt; &lt;code&gt;Promise.using&lt;/code&gt; 의&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ccd035b13000889bfd43b5800eaa50840b27ce56" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Bluebird used to eagerly check for generators which caused problems with transpilers. Because of this, you might get an error similar to &lt;code&gt;TypeError: Cannot read property 'next' of undefined&lt;/code&gt; if you pass a function instead of a generator function to Bluebird.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : 블루 버드는 트랜스 파일러에 문제를 일으킨 발전기를 열심히 점검하는 데 사용되었습니다. 이 때문에 생성기 함수 대신 함수를 블루 버드에 전달하면 &lt;code&gt;TypeError: Cannot read property 'next' of undefined&lt;/code&gt; 와 유사한 오류가 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="65174f1b4f0740a4113bfe4a0894de3d0cc0eff8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: In recent versions of Bluebird a design choice was made to expose &lt;a href=&quot;reason&quot;&gt;&lt;code&gt;.reason()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;value&quot;&gt;&lt;code&gt;.value()&lt;/code&gt;&lt;/a&gt; as well as other inspection methods on promises directly in order to make the below use case easier to work with. Every promise implements the &lt;a href=&quot;promiseinspection&quot;&gt;&lt;code&gt;PromiseInspection&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : 최신 버전의 Bluebird에서는 &lt;a href=&quot;reason&quot;&gt; &lt;code&gt;.reason()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;value&quot;&gt; &lt;code&gt;.value()&lt;/code&gt; &lt;/a&gt; 및 약속에 대한 다른 검사 방법을 직접 노출하도록 설계를 선택 하여 아래 사용 사례를보다 쉽게 ​​사용할 수 있도록했습니다. 모든 약속은 &lt;a href=&quot;promiseinspection&quot;&gt; &lt;code&gt;PromiseInspection&lt;/code&gt; &lt;/a&gt; 인터페이스를 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="11f6ea7c97dfb6b89dbf3be076fdd8ad17b1caec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;&lt;code&gt;Promise.promisify&lt;/code&gt; and &lt;code&gt;Promise.promisifyAll&lt;/code&gt; use dynamic recompilation for really fast wrappers and thus calling them should be done only once. &lt;a href=&quot;api/promise.fromcallback&quot;&gt;&lt;code&gt;Promise.fromCallback&lt;/code&gt;&lt;/a&gt; exists for cases where this is not possible.</source>
          <target state="translated">&lt;strong&gt;참고 &lt;/strong&gt; &lt;code&gt;Promise.promisify&lt;/code&gt; 및 &lt;code&gt;Promise.promisifyAll&lt;/code&gt; 은 매우 빠른 래퍼에 대해 동적 재 컴파일을 사용하므로 호출은 한 번만 수행해야합니다. &lt;a href=&quot;api/promise.fromcallback&quot;&gt; &lt;code&gt;Promise.fromCallback&lt;/code&gt; &lt;/a&gt; 경우 Promise.fromCallback 이 존재합니다.</target>
        </trans-unit>
        <trans-unit id="ba5f9241a5cb0c75a0a87327d9b1519e78755ae6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pragmatic and not theoretical.&lt;/strong&gt; - Bluebird will always pick the pragmatic route vs the theoretically elegant one when there is a conflict. The library's API was created based on real-life use cases and after a lot of consideration.</source>
          <target state="translated">&lt;strong&gt;실용적이고 이론적이지 않습니다. &lt;/strong&gt;-블루 버드는 충돌이있을 때 항상 실용적인 경로와 이론적으로 우아한 경로를 선택합니다. 라이브러리의 API는 실제 사용 사례를 기반으로하여 많은 고려를 거친 후에 작성되었습니다.</target>
        </trans-unit>
        <trans-unit id="d6d11778362564ef5f7ee7a6401423a0a01de3e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Runs everywhere&lt;/strong&gt; - Bluebird runs on pretty much every platform. This makes bluebird ideal for projects who care about providing consistent cross-platform and cross-version experience. It runs on old IE, it has even been known to run on Netscape 7.</source>
          <target state="translated">&lt;strong&gt;어디서나 실행&lt;/strong&gt; &amp;ndash; Bluebird는 거의 모든 플랫폼에서 실행됩니다. 따라서 블루 버드는 일관된 크로스 플랫폼 및 크로스 버전 경험을 제공하려는 프로젝트에 이상적입니다. 이전 IE에서 실행되며 Netscape 7에서 실행되는 것으로 알려져 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b0b5af1607f3153795cea13269b45150059701f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;So when should deferred be used?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;그렇다면 언제 연기해야합니까?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="32d0bb18aa082fbfaa3a509578fe829efc953bb0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Spec compatible&lt;/strong&gt; - Bluebird can work as a drop-in replacement for native promises for an instant performance boost. It passes the Promises/A+ test suite and is fully spec compliant.</source>
          <target state="translated">&lt;strong&gt;사양 호환&lt;/strong&gt; -Bluebird는 즉각적인 성능 향상을위한 기본 약속에 대한 드롭 인 대체품으로 작동 할 수 있습니다. Promises / A + 테스트 스위트를 통과하고 사양을 완전히 준수합니다.</target>
        </trans-unit>
        <trans-unit id="292a4a85ee2df0d9ae005dd6a6e76d6d06d44493" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Spec compatible&lt;/strong&gt; - bluebird can work as a drop-in replacement for native promises for an instant performance boost. It passes the Promises/A+ test suite and is fully spec compliant.</source>
          <target state="translated">&lt;strong&gt;사양 호환&lt;/strong&gt; -블루 버드는 즉각적인 성능 향상을위한 기본 약속을 대체 할 수 있습니다. Promises / A + 테스트 스위트를 통과했으며 사양을 완벽하게 준수합니다.</target>
        </trans-unit>
        <trans-unit id="888dd4c11ae3b2f3847d242edfac7ac5acf55653" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The use of &lt;code&gt;Promise.defer&lt;/code&gt; and deferred objects is discouraged - it is much more awkward and error-prone than using &lt;code&gt;new Promise&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;의 사용 &lt;code&gt;Promise.defer&lt;/code&gt; 이연 객체는 낙심 - 그것은 훨씬 더 어색하고 오류가 발생하기 쉬운 사용하는 것보다 &lt;code&gt;new Promise&lt;/code&gt; .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="05a1716d01f74f303c41f6d2d41bf5755234db73" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Tip&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bc64d0b45fcb9983c99c2b33f3998dbba9bbac3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Zero overhead abstraction&lt;/strong&gt; - In server-side applications the performance of a promise implementation matters. Bluebird's server side performance is measured with highly relevant realistic end-to-end macro &lt;a href=&quot;benchmarks&quot;&gt;benchmarks&lt;/a&gt; and consistently comes out on top. We understand that if bluebird is as close to a zero cost abstraction as possible, developers won't be tempted to short-circuit and absorb complexity themselves.</source>
          <target state="translated">&lt;strong&gt;오버 헤드없는 추상화&lt;/strong&gt; -서버 측 응용 프로그램에서 약속 이행 성능이 중요합니다. Bluebird의 서버 측 성능은 관련성이 높은 현실적인 엔드-투-엔드 매크로 &lt;a href=&quot;benchmarks&quot;&gt;벤치 마크를 통해 측정&lt;/a&gt; 되며 지속적으로 최고의 결과를 제공합니다. 우리는 블루 버드가 가능한 한 비용이 거의 들지 않는 추상화에 가깝다면 개발자는 단락을 일으키고 복잡성을 스스로 흡수하려는 유혹을받지 않을 것임을 이해합니다.</target>
        </trans-unit>
        <trans-unit id="76c734869e982efc90da94216ea710177a2e60ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Zero overhead abstraction&lt;/strong&gt; - In server-side applications the performance of a promise implementation matters. Bluebird's server-side performance is measured with highly relevant and realistic end-to-end macro &lt;a href=&quot;benchmarks&quot;&gt;benchmarks&lt;/a&gt;, and consistently comes out on top. We understand that if bluebird is as close to a zero cost abstraction as possible, developers won't be tempted to short-circuit and absorb complexity themselves.</source>
          <target state="translated">&lt;strong&gt;제로 오버 헤드 추상화&lt;/strong&gt; -서버 측 애플리케이션에서는 promise 구현의 성능이 중요합니다. Bluebird의 서버 측 성능은 관련성이 높고 현실적인 엔드-투-엔드 매크로 &lt;a href=&quot;benchmarks&quot;&gt;벤치 마크로 측정&lt;/a&gt; 되며 지속적으로 상위권을 차지합니다. 블루 버드가 가능한 한 제로 비용 추상화에 가까워지면 개발자가 스스로를 단락시키고 복잡성을 흡수하려는 유혹을받지 않을 것입니다.</target>
        </trans-unit>
        <trans-unit id="b8fb2f83aee2cbeff4ac6fcb5ea50cce08e5c218" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;fulfilled&lt;/strong&gt; meaning that the computation completed successfully.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;계산이 성공적으로 완료 &lt;strong&gt;되었음을&lt;/strong&gt; 의미합니다.</target>
        </trans-unit>
        <trans-unit id="3030d3b7a04661fbb4185df915ebeef20d9e0313" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rejected&lt;/strong&gt; meaning that the computation failed.</source>
          <target state="translated">&lt;strong&gt;거부&lt;/strong&gt; 계산이 실패했음을 의미한다.</target>
        </trans-unit>
        <trans-unit id="49b04ec504f2983332f03036c28eadbb6f95979c" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;Add undocumented experimental &lt;code&gt;yieldHandler&lt;/code&gt; option to &lt;code&gt;Promise.coroutine&lt;/code&gt;&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;문서화되지 않은 실험의 추가 &lt;code&gt;yieldHandler&lt;/code&gt; 의 에 옵션 &lt;code&gt;Promise.coroutine&lt;/code&gt; 을&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="86d85c01d6a08eda91f5abaf4f5b799fd1cd2d57" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PromiseResolver&lt;/code&gt; can be used to control the fate of a promise. It is like &quot;Deferred&quot; in jQuery or &lt;code&gt;$q.defer&lt;/code&gt; in $q. The &lt;code&gt;PromiseResolver&lt;/code&gt; objects have a &lt;code&gt;.promise&lt;/code&gt; property which returns a reference to the controlled promise that can be passed to clients. &lt;code&gt;.promise&lt;/code&gt; of a &lt;code&gt;PromiseResolver&lt;/code&gt; is not a getter function to match other implementations.</source>
          <target state="translated">&lt;code&gt;PromiseResolver&lt;/code&gt; 는 약속의 운명을 제어 할 수 있습니다. jQuery의 &quot;지연&quot;또는 $ q의 &lt;code&gt;$q.defer&lt;/code&gt; 와 같습니다 . &lt;code&gt;PromiseResolver&lt;/code&gt; 의 객체는이 &lt;code&gt;.promise&lt;/code&gt; 의 고객에게 전달 될 수있는 제어 약속에 대한 참조를 반환하는 속성을. &lt;code&gt;.promise&lt;/code&gt; 의 &lt;code&gt;PromiseResolver&lt;/code&gt; 는 다른 구현과 일치하는 getter 함수가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="de68b0254d3395cd1166c146fe6a24ff1250d4c5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TaskCompletionSource&lt;/code&gt; is analogous to the promise constructor. Although usually promisification is preferred (see the API reference or working with callbacks section).</source>
          <target state="translated">&lt;code&gt;TaskCompletionSource&lt;/code&gt; 는 약속 생성자 유사하다. 일반적으로 약속이 바람직하지만 API 참조 또는 콜백 작업 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="58cdbd4e4749375a003884d9f4eb272538b31a8e" translate="yes" xml:space="preserve">
          <source>A basic example:</source>
          <target state="translated">기본 예 :</target>
        </trans-unit>
        <trans-unit id="a5a9798c80434c94bedf00babb451bcdbe0ec94f" translate="yes" xml:space="preserve">
          <source>A bluebird promise is similar to a &lt;code&gt;std::future&lt;/code&gt; and the promise constructor is similar to an &lt;code&gt;std::promise&lt;/code&gt; although it should rarely be used in practice (see the promisification section).</source>
          <target state="translated">블루 버드 약속은 &lt;code&gt;std::future&lt;/code&gt; 와 유사하며 promise 생성자는 &lt;code&gt;std::promise&lt;/code&gt; 와 유사 하지만 실제로는 거의 사용하지 않아야합니다 ( 약속 섹션 참조).</target>
        </trans-unit>
        <trans-unit id="ff9b15fb9e5aa0362ad45e7443c6def66d1889ef" translate="yes" xml:space="preserve">
          <source>A bluebird promise is similar to a Scala &lt;code&gt;Future&lt;/code&gt;. A scala &lt;code&gt;Promise&lt;/code&gt; is similar to how the promise constructor can be used (previously, to a bluebird Deferred).</source>
          <target state="translated">블루 버드 약속은 스칼라 &lt;code&gt;Future&lt;/code&gt; 와 유사합니다 . 스칼라 &lt;code&gt;Promise&lt;/code&gt; 은 약속 생성자를 사용하는 방법 (이전의 블루 버드 지연)과 유사합니다.</target>
        </trans-unit>
        <trans-unit id="ca8fb77238f91f690b5c0980f19db268eea3f0dd" translate="yes" xml:space="preserve">
          <source>A collection of errors. &lt;code&gt;AggregateError&lt;/code&gt; is an array-like object, with numeric indices and a &lt;code&gt;.length&lt;/code&gt; property. It supports all generic array methods such as &lt;code&gt;.forEach&lt;/code&gt; directly.</source>
          <target state="translated">오류 모음. &lt;code&gt;AggregateError&lt;/code&gt; 는 숫자 형 인덱스와 &lt;code&gt;.length&lt;/code&gt; 속성을 가진 배열과 유사한 개체 입니다. &lt;code&gt;.forEach&lt;/code&gt; 와 같은 모든 일반 배열 메소드를 직접 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="c0454cd24930ac77861f97a7b612c7d48d0faa7a" translate="yes" xml:space="preserve">
          <source>A common misconception is that promises are a form of callback management. This is not the case and is why the idea of having a progress callback is not part of the Promise spec. However, much like the Promise library passes in a &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; callback when you create a new promise (&lt;code&gt;new Promise(&amp;hellip;)&lt;/code&gt;) we can do the same patter for a progress callback.</source>
          <target state="translated">일반적인 오해는 약속은 콜백 관리의 한 형태라는 것입니다. 이것은 사실이 아니며 진행 콜백을 갖는 아이디어가 Promise 사양의 일부가 아닌 이유입니다. 그러나, 약속의 라이브러리가에 전달 흡사 &lt;code&gt;resolve&lt;/code&gt; 하고 &lt;code&gt;reject&lt;/code&gt; 하면 (새로운 약속을 만들 때 콜백을 &lt;code&gt;new Promise(&amp;hellip;)&lt;/code&gt; 우리가 진행 콜백에 대해 동일한 후두둑를 할 수 있습니다).</target>
        </trans-unit>
        <trans-unit id="f7c6fe946298a2a13f7cbe808feba669a72d645b" translate="yes" xml:space="preserve">
          <source>A common use of &lt;code&gt;Promise.map&lt;/code&gt; is to replace the &lt;code&gt;.push&lt;/code&gt;+&lt;code&gt;Promise.all&lt;/code&gt; boilerplate:</source>
          <target state="translated">&lt;code&gt;Promise.map&lt;/code&gt; 의 일반적인 용도 는 &lt;code&gt;.push&lt;/code&gt; + &lt;code&gt;Promise.all&lt;/code&gt; 상용구 를 대체하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="e29d2f829dcd5a334a3d8524b61a295e78ac758c" translate="yes" xml:space="preserve">
          <source>A custom yield handler can also be used just for a single call to &lt;code&gt;Promise.coroutine()&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Promise.coroutine()&lt;/code&gt; 을 한 번만 호출하기 위해 커스텀 yield handler를 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dde751fa4614313f28da784fd3b3a97aace722e9" translate="yes" xml:space="preserve">
          <source>A meta method used to specify the disposer method that cleans up a resource when using &lt;a href=&quot;promise.using&quot;&gt;&lt;code&gt;Promise.using&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;promise.using&quot;&gt; &lt;code&gt;Promise.using&lt;/code&gt; 을&lt;/a&gt; 사용할 때 리소스를 정리하는 Disposer 메서드를 지정하는 데 사용되는 메타 메서드 입니다.</target>
        </trans-unit>
        <trans-unit id="e4ae11535b36f04c0b5368c84b24374a320dd8df" translate="yes" xml:space="preserve">
          <source>A more involved example:</source>
          <target state="translated">더 관련된 예 :</target>
        </trans-unit>
        <trans-unit id="91288f8c043f7cf81a84d371fa93d14f339c1cc2" translate="yes" xml:space="preserve">
          <source>A note on promise exception handling.</source>
          <target state="translated">약속 예외 처리에 대한 참고 사항.</target>
        </trans-unit>
        <trans-unit id="44d6e019a297198f4de6ec28d62313e3efc5fe49" translate="yes" xml:space="preserve">
          <source>A promise is &lt;em&gt;not&lt;/em&gt; similar to a Python &lt;code&gt;concurrent.Future&lt;/code&gt; which does not chain actions.</source>
          <target state="translated">약속은 &lt;em&gt;하지&lt;/em&gt; 파이썬과 비슷한 &lt;code&gt;concurrent.Future&lt;/code&gt; 작업을 체인하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="127e96fc72ee2023fcd158b8a5bc237f0176655e" translate="yes" xml:space="preserve">
          <source>A promise is a monadic construct with &lt;code&gt;.then&lt;/code&gt; filling the role of &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; (bind). The major difference is that &lt;code&gt;.then&lt;/code&gt; performs recursive assimilation which acts like a &lt;code&gt;flatMap&lt;/code&gt; or a map. The type signature of &lt;code&gt;then&lt;/code&gt; is quote complicated. If we omit the error argument and not throw - it's similar to:</source>
          <target state="translated">약속을 가진 모나드 구조체이며 &lt;code&gt;.then&lt;/code&gt; 역할 충전 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; (바인딩). 주요 차이점은. 그런 다음 &lt;code&gt;flatMap&lt;/code&gt; 또는 map 처럼 작동하는 재귀 동화를 수행 한다는 &lt;code&gt;.then&lt;/code&gt; 입니다. &lt;code&gt;then&lt;/code&gt; 의 형식 서명 은 인용 부호가 복잡합니다. 오류 인수를 생략하고 던지지 않으면 다음과 유사합니다.</target>
        </trans-unit>
        <trans-unit id="3af31ff970db37f5d3adb7be14ca815b8f72badf" translate="yes" xml:space="preserve">
          <source>A promise is similar to a C# &lt;code&gt;Task&lt;/code&gt;. They both represent the result of an operation.</source>
          <target state="translated">약속은 C # &lt;code&gt;Task&lt;/code&gt; 와 유사합니다 . 둘 다 작업 결과를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="f626074d999d56e1fe05b0566e2b5b5c264b30cb" translate="yes" xml:space="preserve">
          <source>A promise is similar to a Twisted Deferred object. In fact the first JavaScript implementations of promises were based on it. However, the APIs have diverged since. The mental model is still very similar.</source>
          <target state="translated">약속은 뒤틀린 지연 오브젝트와 유사합니다. 실제로 약속의 첫 번째 JavaScript 구현은이를 기반으로합니다. 그러나 API는 이후 다양해졌습니다. 정신 모델은 여전히 ​​매우 유사합니다.</target>
        </trans-unit>
        <trans-unit id="27f5569d300a4079fa33727bd033c698c77cc3c9" translate="yes" xml:space="preserve">
          <source>A promise is similar to a guava &lt;code&gt;Future&lt;/code&gt; with &lt;code&gt;chain&lt;/code&gt; being similar to &lt;code&gt;then&lt;/code&gt;.</source>
          <target state="translated">약속은 &lt;code&gt;chain&lt;/code&gt; 이 &lt;code&gt;then&lt;/code&gt; 과 비슷한 구아바 &lt;code&gt;Future&lt;/code&gt; 와 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="ec8aef7b256d19b4c118f9b91fd9a7e3f468cf1e" translate="yes" xml:space="preserve">
          <source>A promise's &lt;code&gt;then&lt;/code&gt; method is similar to a Task's &lt;code&gt;ContinueWith&lt;/code&gt; method in that both allow attaching a continuation to the promise. Bluebird's &lt;a href=&quot;api/promise.coroutine&quot;&gt;&lt;code&gt;Promise.coroutine&lt;/code&gt;&lt;/a&gt; is analogous to C#'s &lt;code&gt;async/await&lt;/code&gt; syntax.</source>
          <target state="translated">promise의 &lt;code&gt;then&lt;/code&gt; 메소드는 약속에 연속을 첨부 할 수 있다는 점에서 Task의 &lt;code&gt;ContinueWith&lt;/code&gt; 메소드 와 유사합니다 . Bluebird의 &lt;a href=&quot;api/promise.coroutine&quot;&gt; &lt;code&gt;Promise.coroutine&lt;/code&gt; &lt;/a&gt; 은 C #의 &lt;code&gt;async/await&lt;/code&gt; 구문 과 유사 합니다.</target>
        </trans-unit>
        <trans-unit id="b276f94cd8d0e74a21de6e5939b8c10ca9a975d6" translate="yes" xml:space="preserve">
          <source>API Reference</source>
          <target state="translated">API 참조</target>
        </trans-unit>
        <trans-unit id="bfac53dc7deea6cfbd38fa02e3a1a58e08bc9cf1" translate="yes" xml:space="preserve">
          <source>Abstraction is the key here. We will make an &lt;em&gt;object&lt;/em&gt; (or class) that is responsible for managing the dialog box. Its interface will manage only two function references (callbacks): when the user clicks ok and when user clicks cancel. And it will offer the value when asked.</source>
          <target state="translated">추상화가 핵심입니다. 대화 상자 관리를 담당 하는 &lt;em&gt;객체&lt;/em&gt; (또는 클래스)를 만듭니다. 이 인터페이스는 사용자가 확인을 클릭 할 때와 취소를 클릭 할 때 두 가지 함수 참조 (콜백) 만 관리합니다. 그리고 그것은 요청 될 때 가치를 제공 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="7ee22bdc1a4f1f13220ce222b1de04944f7bd197" translate="yes" xml:space="preserve">
          <source>Add &lt;a href=&quot;api/promise.allsettled&quot;&gt;&lt;code&gt;Promise.allSettled&lt;/code&gt;&lt;/a&gt; method (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1606&quot;&gt;&lt;code&gt;#1606&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;api/promise.allsettled&quot;&gt; &lt;code&gt;Promise.allSettled&lt;/code&gt; &lt;/a&gt; 메서드 추가 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1606&quot;&gt; &lt;code&gt;#1606&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="aeef22dc78ca14fe49375318a1cf07ace23fa9d9" translate="yes" xml:space="preserve">
          <source>Add &lt;a href=&quot;api/promise.fromnode&quot;&gt;&lt;code&gt;Promise.fromNode&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;api/promise.fromnode&quot;&gt; &lt;code&gt;Promise.fromNode&lt;/code&gt; &lt;/a&gt; 추가</target>
        </trans-unit>
        <trans-unit id="72c2e17d27e5a5049fae29a82448ed0d4e778786" translate="yes" xml:space="preserve">
          <source>Add &lt;a href=&quot;api/promisifier&quot;&gt;&lt;code&gt;promisifier&lt;/code&gt;&lt;/a&gt; option to &lt;code&gt;Promise.promisifyAll()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Promise.promisifyAll()&lt;/code&gt; &lt;a href=&quot;api/promisifier&quot;&gt; &lt;code&gt;promisifier&lt;/code&gt; &lt;/a&gt; 옵션 추가</target>
        </trans-unit>
        <trans-unit id="7265b76a39f50c53c59fd088fd06bf235340a7e5" translate="yes" xml:space="preserve">
          <source>Add &lt;a href=&quot;features#promise-monitoring&quot;&gt;monitoring and lifecycle hooks&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;features#promise-monitoring&quot;&gt;모니터링 및 수명주기 후크&lt;/a&gt; 추가</target>
        </trans-unit>
        <trans-unit id="b3fa317dcb83f9e4eba1b777f590cc1410ca0f4b" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;&quot;browser&quot;&lt;/code&gt; entry point to package.json</source>
          <target state="translated">package.json에 &lt;code&gt;&quot;browser&quot;&lt;/code&gt; 진입 점 추가</target>
        </trans-unit>
        <trans-unit id="b64bfbd68275cc1f73df20279ef9474cc9746f6a" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;'warning'&lt;/code&gt; hook for warnings (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/980&quot;&gt;&lt;code&gt;#980&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;'warning'&lt;/code&gt; 대한 '경고' 후크 추가 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/980&quot;&gt; &lt;code&gt;#980&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="fe2a34e1127b4885399145d08ad6d7d8a901b4b2" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;.asCallback&lt;/code&gt; property to &lt;code&gt;PromiseResolver&lt;/code&gt;s</source>
          <target state="translated">추가 &lt;code&gt;.asCallback&lt;/code&gt; 의 에 속성을 &lt;code&gt;PromiseResolver&lt;/code&gt; 의</target>
        </trans-unit>
        <trans-unit id="8c4c588139c76756116c5e0a24e701926832c02e" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;Promise.props()&lt;/code&gt; and &lt;code&gt;Promise.prototype.props()&lt;/code&gt;. They work like &lt;code&gt;.all()&lt;/code&gt; for object properties.</source>
          <target state="translated">&lt;code&gt;Promise.props()&lt;/code&gt; 및 &lt;code&gt;Promise.prototype.props()&lt;/code&gt; 추가하십시오 . 객체 속성의 경우 &lt;code&gt;.all()&lt;/code&gt; 처럼 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="1eabe729f70538e708b28b34413e8c729070ac43" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;Promise.race()&lt;/code&gt; and &lt;code&gt;.race()&lt;/code&gt;</source>
          <target state="translated">추가 &lt;code&gt;Promise.race()&lt;/code&gt; 와 &lt;code&gt;.race()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f0e0fae515a4782f8d739fd06957a7202d88985b" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;Promise.version&lt;/code&gt; which tells the bluebird version as a string e.g. &lt;code&gt;&quot;3.4.0&quot;&lt;/code&gt; (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1042&quot;&gt;&lt;code&gt;#1042&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">블루 버드 버전을 &lt;code&gt;&quot;3.4.0&quot;&lt;/code&gt; ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1042&quot;&gt; &lt;code&gt;#1042&lt;/code&gt; &lt;/a&gt; ) 문자열로 알려주는 &lt;code&gt;Promise.version&lt;/code&gt; 을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="04861d8a21be2a5089c3e17d94d6fcd778d2c714" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;handler&lt;/code&gt; as the handler to call when a rejected promise that was reported as &quot;possibly unhandled rejection&quot; became handled.</source>
          <target state="translated">&quot;처리되지 않은 거부&quot;로보고 된 거부 된 약속이 처리 될 때 호출 할 핸들러를 &lt;code&gt;handler&lt;/code&gt; 로 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="f59d045889be767e767f34e30064ebfcc104b4f4" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;handler&lt;/code&gt; as the handler to call when there is a possibly unhandled rejection. The default handler logs the error stack to stderr or &lt;code&gt;console.error&lt;/code&gt; in browsers.</source>
          <target state="translated">처리 할 수없는 거부가있을 때 호출 할 &lt;code&gt;handler&lt;/code&gt; 로 처리기를 추가하십시오 . 기본 핸들러 는 브라우저에서 오류 스택을 stderr 또는 &lt;code&gt;console.error&lt;/code&gt; 에 로그 합니다.</target>
        </trans-unit>
        <trans-unit id="c34258ff5462b16c5fd15fe91ce0eaa4f29139ee" translate="yes" xml:space="preserve">
          <source>Add methods &lt;code&gt;Promise.resolve()&lt;/code&gt;, &lt;code&gt;Promise.reject()&lt;/code&gt;, &lt;code&gt;Promise.defer()&lt;/code&gt; and &lt;code&gt;.resolve()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Promise.resolve()&lt;/code&gt; , &lt;code&gt;Promise.reject()&lt;/code&gt; , &lt;code&gt;Promise.defer()&lt;/code&gt; 및 &lt;code&gt;.resolve()&lt;/code&gt; 메소드를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="802e41b253330b99e44d104f5678824a29259d04" translate="yes" xml:space="preserve">
          <source>Add minimal build files to build (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/976&quot;&gt;&lt;code&gt;#976&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/757&quot;&gt;&lt;code&gt;#757&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">빌드 할 최소 빌드 파일 추가 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/976&quot;&gt; &lt;code&gt;#976&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/757&quot;&gt; &lt;code&gt;#757&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="d421f8de977756ac154a4e87629bba0a8f4f8b02" translate="yes" xml:space="preserve">
          <source>Add missing link to unhandled warning docs (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1205&quot;&gt;&lt;code&gt;#1205&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">처리되지 않은 경고 문서에 누락 된 링크 추가 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1205&quot;&gt; &lt;code&gt;#1205&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="4cfae1ae86e85f24c2ca30b54d0d3a78074ef513" translate="yes" xml:space="preserve">
          <source>Add more components to customized builds</source>
          <target state="translated">맞춤형 빌드에 더 많은 컴포넌트 추가</target>
        </trans-unit>
        <trans-unit id="02f838b8820f3ef47577136f0c7b2da914ea1f6d" translate="yes" xml:space="preserve">
          <source>Add new paramter &lt;code&gt;value&lt;/code&gt; for &lt;a href=&quot;api/promise.bind&quot;&gt;&lt;code&gt;Promise.bind&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">새로운 있었던 파라미터의 추가 &lt;code&gt;value&lt;/code&gt; 에 대한 &lt;a href=&quot;api/promise.bind&quot;&gt; &lt;code&gt;Promise.bind&lt;/code&gt; 을&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="539ed69e73ad463928b55e6f9dcc527ff2b419ad" translate="yes" xml:space="preserve">
          <source>Add nw testing facilities (&lt;code&gt;node tools/test --nw&lt;/code&gt;)</source>
          <target state="translated">nw 테스트 기능 추가 ( &lt;code&gt;node tools/test --nw&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="30fa1e020342159f6d48fc030d3905fcd06b3a93" translate="yes" xml:space="preserve">
          <source>Add support for AsyncResource (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1403&quot;&gt;&lt;code&gt;#1403&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">AsyncResource에 대한 지원 추가 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1403&quot;&gt; &lt;code&gt;#1403&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="468910638b6af4f47e2096e59ad97cea76023e2f" translate="yes" xml:space="preserve">
          <source>Added &lt;a href=&quot;api/catchreturn&quot;&gt;&lt;code&gt;.catchReturn()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">추가 &lt;a href=&quot;api/catchreturn&quot;&gt; &lt;code&gt;.catchReturn()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="78fc75729d3c74ffb0e064bc88ad834393ad5112" translate="yes" xml:space="preserve">
          <source>Added &lt;a href=&quot;api/catchthrow&quot;&gt;&lt;code&gt;.catchThrow()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;api/catchthrow&quot;&gt; &lt;code&gt;.catchThrow()&lt;/code&gt; &lt;/a&gt; 추가되었습니다 .</target>
        </trans-unit>
        <trans-unit id="29dcbf8a89908ed21a421bd94c05f418347279e7" translate="yes" xml:space="preserve">
          <source>Added &lt;a href=&quot;api/each&quot;&gt;&lt;code&gt;.each()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;api/each&quot;&gt; &lt;code&gt;.each()&lt;/code&gt; &lt;/a&gt; 추가</target>
        </trans-unit>
        <trans-unit id="0a5531bca5d86798b43cf33b95a950ceed452092" translate="yes" xml:space="preserve">
          <source>Added &lt;a href=&quot;api/promise.getnewlibrarycopy&quot;&gt;&lt;code&gt;Promise.getNewLibraryCopy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;api/promise.getnewlibrarycopy&quot;&gt; &lt;code&gt;Promise.getNewLibraryCopy&lt;/code&gt; 를&lt;/a&gt; 추가 했습니다.</target>
        </trans-unit>
        <trans-unit id="a6c7280d13a0788d1ec51fee197bab143cdafcd7" translate="yes" xml:space="preserve">
          <source>Added &lt;a href=&quot;api/promise.mapseries&quot;&gt;&lt;code&gt;Promise.mapSeries()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api/mapseries&quot;&gt;&lt;code&gt;.mapSeries()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">추가 &lt;a href=&quot;api/promise.mapseries&quot;&gt; &lt;code&gt;Promise.mapSeries()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;api/mapseries&quot;&gt; &lt;code&gt;.mapSeries()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c57c3d08bb3fe3d572d28599bc6e7eaee9b9b0a8" translate="yes" xml:space="preserve">
          <source>Added &lt;a href=&quot;api/promise.setscheduler&quot;&gt;&lt;code&gt;Promise.setScheduler()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;api/promise.setscheduler&quot;&gt; &lt;code&gt;Promise.setScheduler()&lt;/code&gt; &lt;/a&gt; 추가</target>
        </trans-unit>
        <trans-unit id="b7d1be5e3fc45d89d059e34dd5d6942f07de9720" translate="yes" xml:space="preserve">
          <source>Added &lt;a href=&quot;api/suppressunhandledrejections&quot;&gt;&lt;code&gt;.suppressUnhandledRejections()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;api/suppressunhandledrejections&quot;&gt; &lt;code&gt;.suppressUnhandledRejections()&lt;/code&gt; &lt;/a&gt; 추가 했습니다 .</target>
        </trans-unit>
        <trans-unit id="0825867cf5f37c2577ddd0eeb0de4f0ff5f7287f" translate="yes" xml:space="preserve">
          <source>Added &lt;a href=&quot;api/using&quot;&gt;&lt;code&gt;using()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api/disposer&quot;&gt;&lt;code&gt;disposer()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">추가 &lt;a href=&quot;api/using&quot;&gt; &lt;code&gt;using()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;api/disposer&quot;&gt; &lt;code&gt;disposer()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b1c01fafccc4ccf18ab4027855081cc52db59607" translate="yes" xml:space="preserve">
          <source>Added &lt;a href=&quot;warning-explanations#warning-a-promise-was-created-in-a-handler-but-none-were-returned-from-it&quot;&gt;forgotten return warnings&lt;/a&gt; to &lt;a href=&quot;api/promise.try&quot;&gt;&lt;code&gt;Promise.try&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api/promise.method&quot;&gt;&lt;code&gt;Promise.method&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;api/promise.try&quot;&gt; &lt;code&gt;Promise.try&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;api/promise.method&quot;&gt; &lt;code&gt;Promise.method&lt;/code&gt; 에&lt;/a&gt;&lt;a href=&quot;warning-explanations#warning-a-promise-was-created-in-a-handler-but-none-were-returned-from-it&quot;&gt; 잊혀진 리턴 경고&lt;/a&gt; 를 추가 했습니다.</target>
        </trans-unit>
        <trans-unit id="24980b5bd3b98d6cff6aafe2302bdbc04d53411c" translate="yes" xml:space="preserve">
          <source>Added &lt;code&gt;.asCallback&lt;/code&gt; alias for &lt;code&gt;.nodeify&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;.asCallback&lt;/code&gt; 의 별칭 &lt;code&gt;.nodeify&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d30e8bd4f78a3c52f30a3c1901c41e3f07d3fbde" translate="yes" xml:space="preserve">
          <source>Added &lt;code&gt;suffix&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; options to &lt;a href=&quot;api/promise.promisifyall&quot;&gt;&lt;code&gt;Promise.promisifyAll()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;api/promise.promisifyall&quot;&gt; &lt;code&gt;Promise.promisifyAll()&lt;/code&gt; &lt;/a&gt; &lt;code&gt;suffix&lt;/code&gt; 및 &lt;code&gt;filter&lt;/code&gt; 옵션 추가</target>
        </trans-unit>
        <trans-unit id="b72497b77fdf8d7d89ff0f9ec0e13a844397417d" translate="yes" xml:space="preserve">
          <source>Added Symbol.toStringTag support to Promise (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1421&quot;&gt;&lt;code&gt;#1421&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">Promise에 Symbol.toStringTag 지원 추가 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1421&quot;&gt; &lt;code&gt;#1421&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="5f8b53b0b1ed9798f5978015288f85faa17a8bbf" translate="yes" xml:space="preserve">
          <source>Added a concurrency option to &lt;a href=&quot;api/filter&quot;&gt;&lt;code&gt;.filter()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;api/filter&quot;&gt; &lt;code&gt;.filter()&lt;/code&gt; &lt;/a&gt; 동시성 옵션을 추가했습니다.</target>
        </trans-unit>
        <trans-unit id="5856b378cf57604eb0dfd50256df9934ec4db692" translate="yes" xml:space="preserve">
          <source>Added a concurrency option to &lt;a href=&quot;api/map&quot;&gt;&lt;code&gt;.map()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;api/map&quot;&gt; &lt;code&gt;.map()&lt;/code&gt; &lt;/a&gt; 동시성 옵션을 추가했습니다.</target>
        </trans-unit>
        <trans-unit id="a70ad679ce6b5075546299f0bc353c7fbcb89979" translate="yes" xml:space="preserve">
          <source>Added ability to configure the &lt;a href=&quot;warning-explanations#warning-a-promise-was-created-in-a-handler-but-none-were-returned-from-it&quot;&gt;forgotten return statement&lt;/a&gt; warning separately (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/920&quot;&gt;&lt;code&gt;#920&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;warning-explanations#warning-a-promise-was-created-in-a-handler-but-none-were-returned-from-it&quot;&gt;잊어 버린 리턴 명령문&lt;/a&gt; 경고를 별도로 구성하는 기능이 추가되었습니다 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/920&quot;&gt; &lt;code&gt;#920&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="f6b3479d96dc680c218ac926cba3969e33c45ff9" translate="yes" xml:space="preserve">
          <source>Added dedicated webpack entry point (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1318&quot;&gt;&lt;code&gt;#1318&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">전용 웹팩 진입 점 추가 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1318&quot;&gt; &lt;code&gt;#1318&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="38f0b7ba00dc0dc69db2cfbfaaf1947f39388027" translate="yes" xml:space="preserve">
          <source>Added more context to stack traces originating from coroutines (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/421&quot;&gt;#421&lt;/a&gt;)</source>
          <target state="translated">코 루틴에서 발생하는 추적 추적에 더 많은 컨텍스트 추가 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/421&quot;&gt;# 421&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="38456bc253b941f890753c62deaf985ff2b95b36" translate="yes" xml:space="preserve">
          <source>Added new method: &lt;a href=&quot;api/tapcatch&quot;&gt;&lt;code&gt;.tapCatch&lt;/code&gt;&lt;/a&gt; (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1220&quot;&gt;&lt;code&gt;#1220&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">새로운 방법 추가 : &lt;a href=&quot;api/tapcatch&quot;&gt; &lt;code&gt;.tapCatch&lt;/code&gt; &lt;/a&gt; ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1220&quot;&gt; &lt;code&gt;#1220&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="0410849456a0d85f1a226a506a1b58bf0f8dcc5e" translate="yes" xml:space="preserve">
          <source>Additional stack traces are now output on stderr/&lt;code&gt;console.warn&lt;/code&gt; for errors that are thrown in the process/window from rejected &lt;code&gt;.done()&lt;/code&gt; promises. See &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/411&quot;&gt;#411&lt;/a&gt;</source>
          <target state="translated">거부 된 &lt;code&gt;.done()&lt;/code&gt; 약속 에서 프로세스 / 창에 발생하는 오류에 대해 추가 스택 추적이 stderr / &lt;code&gt;console.warn&lt;/code&gt; 에 출력됩니다 . &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/411&quot;&gt;# 411&lt;/a&gt; 참조</target>
        </trans-unit>
        <trans-unit id="b39d780db281248ff6aa7dd36bf9d506b967be9a" translate="yes" xml:space="preserve">
          <source>AggregateError</source>
          <target state="translated">AggregateError</target>
        </trans-unit>
        <trans-unit id="e26a7559e993867db5ae589e0ae3f891ad0a4962" translate="yes" xml:space="preserve">
          <source>AggregateError()</source>
          <target state="translated">AggregateError()</target>
        </trans-unit>
        <trans-unit id="e1d84b89b2bcc43024e422df9d3914b13432c08d" translate="yes" xml:space="preserve">
          <source>All collection methods have a static equivalent on the Promise object, e.g. &lt;code&gt;somePromise.map(...)...&lt;/code&gt; is same as &lt;code&gt;Promise.map(somePromise, ...)...&lt;/code&gt;, &lt;code&gt;somePromise.all&lt;/code&gt; is same as &lt;a href=&quot;promise.all&quot;&gt;&lt;code&gt;Promise.all&lt;/code&gt;&lt;/a&gt; and so on.</source>
          <target state="translated">모든 콜렉션 메소드는 Promise 객체에 대해 정적 등가를 갖습니다. 예를 들어 &lt;code&gt;somePromise.map(...)...&lt;/code&gt; 은 &lt;code&gt;Promise.map(somePromise, ...)...&lt;/code&gt; 과 동일합니다. &lt;code&gt;somePromise.all&lt;/code&gt; 은 Promise.all 과 동일합니다 &lt;a href=&quot;promise.all&quot;&gt; &lt;code&gt;Promise.all&lt;/code&gt; &lt;/a&gt; 등등.</target>
        </trans-unit>
        <trans-unit id="2d2c8d5e4ba7e932b7034b3b05399ebddec2be3e" translate="yes" xml:space="preserve">
          <source>All collection methods now support objects that implement &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;ES6's &lt;em&gt;iterable&lt;/em&gt;&lt;/a&gt; protocol along with regular arrays.</source>
          <target state="translated">모든 수집 방법은 이제 일반 배열과 함께 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;ES6의 &lt;em&gt;반복 가능한&lt;/em&gt;&lt;/a&gt; 프로토콜 을 구현하는 객체를 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="6f1f9c624e505893235249aee432d8d850e0a5c7" translate="yes" xml:space="preserve">
          <source>All promise collection methods now reject when a promise-or-thenable-for-collection turns out not to give a collection</source>
          <target state="translated">모든 약속 수집 방법은 이제 약속 또는 수집 가능한 컬렉션이 컬렉션을 제공하지 않는 것으로 밝혀지면 거부합니다.</target>
        </trans-unit>
        <trans-unit id="c62e74ec34aac2f0f0e7eeb991e7c91bfa28ee05" translate="yes" xml:space="preserve">
          <source>All static collection methods take thenable-for-collection</source>
          <target state="translated">모든 정적 수집 방법은 수집 가능</target>
        </trans-unit>
        <trans-unit id="2ff9b8b8ad0732f56d2acc756a90398edccf62ae" translate="yes" xml:space="preserve">
          <source>All the above limitations apply to custom suffices:</source>
          <target state="translated">위의 모든 제한은 사용자 정의 충분에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="8d3afa6242af2a8aa4682b8dfcc2d6b8f8f7e577" translate="yes" xml:space="preserve">
          <source>Allow custom builds</source>
          <target state="translated">맞춤 빌드 허용</target>
        </trans-unit>
        <trans-unit id="6e4b7bde9344da4d6320f00fc634411e089a8516" translate="yes" xml:space="preserve">
          <source>Allow fresh copies of the library to be made</source>
          <target state="translated">라이브러리의 새로운 사본을 만들 수 있습니다</target>
        </trans-unit>
        <trans-unit id="ffa9dbda02b1f86cdb733e66a4847f9d021ef77f" translate="yes" xml:space="preserve">
          <source>Also see &lt;a href=&quot;http://stackoverflow.com/questions/23803743/what-is-the-deferred-antipattern-and-how-do-i-avoid-it&quot;&gt;this StackOverflow question&lt;/a&gt; for more examples and a debate around it.</source>
          <target state="translated">또한 더 많은 예제와 이에 대한 토론 은 &lt;a href=&quot;http://stackoverflow.com/questions/23803743/what-is-the-deferred-antipattern-and-how-do-i-avoid-it&quot;&gt;이 StackOverflow 질문&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="504ac7e18f36c403341c6f9b3dfebafd6b27122e" translate="yes" xml:space="preserve">
          <source>Also see this &lt;a href=&quot;http://stackoverflow.com/a/24412873/191693&quot;&gt;Stackoverflow answer&lt;/a&gt; as an additional example.</source>
          <target state="translated">또한 추가 예제 로이 &lt;a href=&quot;http://stackoverflow.com/a/24412873/191693&quot;&gt;Stackoverflow 답변&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3e1aa0bf282fd91ce2ca26d694eb3b40e3d7840c" translate="yes" xml:space="preserve">
          <source>Also, promises don't just give you correspondences for synchronous features; they can also be used as limited event emitters or callback aggregators.</source>
          <target state="translated">또한 약속은 동기 기능에 대한 서신을 제공하지 않습니다. 또한 제한된 이벤트 이미 터 또는 콜백 애그리 게이터로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a32b74c19d5dd4f70327e84ca2b9e29b8256027d" translate="yes" xml:space="preserve">
          <source>Alternatively in ES6</source>
          <target state="translated">또는 ES6에서</target>
        </trans-unit>
        <trans-unit id="2aa898b76ef8c9373f622120f8c7ffdeed060ba7" translate="yes" xml:space="preserve">
          <source>Alternatively, if you provide it a predicate be sure it's a simple function:</source>
          <target state="translated">또는 술어를 제공하는 경우 간단한 기능인지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="770163099079b870bb44b926561d6689cce0fce8" translate="yes" xml:space="preserve">
          <source>Although the code may look verbose it does provide the benefit that it is modular and can be easily changed. A trait difficult to achieve with a more procedural style.</source>
          <target state="translated">코드는 장황하게 보일 수 있지만 모듈 식이며 쉽게 변경할 수 있다는 이점을 제공합니다. 보다 절차적인 스타일로 달성하기 어려운 특성.</target>
        </trans-unit>
        <trans-unit id="e28794b3ffbac164dab76921e5175885e9612479" translate="yes" xml:space="preserve">
          <source>Always use process.nextTick. Fixes &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/525&quot;&gt;&lt;code&gt;#525&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">항상 process.nextTick을 사용하십시오. 수정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/525&quot;&gt; &lt;code&gt;#525&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f68565e4d3ecebfaf2479ddaf0c1feabb4801c0d" translate="yes" xml:space="preserve">
          <source>Always use the same suffix everywhere in your application, you could create a wrapper to make this easier:</source>
          <target state="translated">응용 프로그램의 모든 곳에서 항상 동일한 접미사를 사용하면 래퍼를 만들어 쉽게 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a979e9ede963528d8cb32731b5b05c0e0dc4b6ca" translate="yes" xml:space="preserve">
          <source>An advantage of using &lt;code&gt;Error&lt;/code&gt;s is the ability to test why a promise was rejected and make decisions on that. This ability is also baked into how Bluebird works. You can pass in a predicate to the &lt;code&gt;catch()&lt;/code&gt; block allowing you to have more than one block based on what &lt;code&gt;Error&lt;/code&gt; it was rejected with. For example:</source>
          <target state="translated">&lt;code&gt;Error&lt;/code&gt; 사용의 장점은 약속이 거부 된 이유를 테스트하고 결정을 내릴 수 있다는 것입니다. 이 기능은 블루 버드의 작동 방식에도 영향을 미칩니다. &lt;code&gt;catch()&lt;/code&gt; 블록에 술어를 전달하여 거부 된 &lt;code&gt;Error&lt;/code&gt; 따라 둘 이상의 블록을 가질 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f291b6d6a0eabfb15d274cc667b5cf0e4067eb33" translate="yes" xml:space="preserve">
          <source>An error is an object that is a &lt;code&gt;instanceof Error&lt;/code&gt;. It will at minimum have the properties &lt;code&gt;.stack&lt;/code&gt; and &lt;code&gt;.message&lt;/code&gt;, which are an absolute &lt;em&gt;must&lt;/em&gt; have for any value that is being used in an automatic propagation mechanism, such as exceptions and rejections. This is because errors are usually handled many levels above where they actually originate - the error object must have sufficient metadata about it so that its ultimate handler (possibly many levels above) will have all the information needed for creating a useful high level error report.</source>
          <target state="translated">오류는 &lt;code&gt;instanceof Error&lt;/code&gt; 의 인스턴스 인 객체입니다 . 그것은 최소한의 속성을 가질 것이다 &lt;code&gt;.stack&lt;/code&gt; 및 &lt;code&gt;.message&lt;/code&gt; 절대를이다 &lt;em&gt;해야&lt;/em&gt; 같은 예외 거부로서, 자동 전달기구에 사용되는 임의의 값을 갖는다. 오류는 일반적으로 실제로 발생하는 곳보다 많은 레벨에서 처리되기 때문입니다. 오류 객체는 궁극적 인 처리기 (위의 많은 레벨)가 유용한 높은 수준의 오류 보고서를 작성하는 데 필요한 모든 정보를 갖도록 충분한 메타 데이터를 가져야합니다.</target>
        </trans-unit>
        <trans-unit id="ec5b9000c997009df27ce536d5649dc80ba63554" translate="yes" xml:space="preserve">
          <source>An example of handling promises in parallel by adding an &lt;code&gt;addYieldHandler&lt;/code&gt; for arrays :</source>
          <target state="translated">배열에 &lt;code&gt;addYieldHandler&lt;/code&gt; 를 추가하여 약속을 병렬로 처리하는 예 :</target>
        </trans-unit>
        <trans-unit id="86f555da7e472985e20dabd68aa62a94888a663f" translate="yes" xml:space="preserve">
          <source>An example of implementing callback support with &lt;code&gt;addYieldHandler&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;addYieldHandler&lt;/code&gt; 로 콜백 지원을 구현하는 예제 :</target>
        </trans-unit>
        <trans-unit id="d7001f3418faa773632d9b9c03eec1ecbf3dd5f0" translate="yes" xml:space="preserve">
          <source>An example of implementing thunks support with &lt;code&gt;addYieldHandler&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;addYieldHandler&lt;/code&gt; 로 썽크 지원을 구현하는 예제 :</target>
        </trans-unit>
        <trans-unit id="3401ce65c00b7961eb548590c555e41edcabb3bf" translate="yes" xml:space="preserve">
          <source>And if the &lt;code&gt;fs&lt;/code&gt; module causes an error like file not found:</source>
          <target state="translated">그리고 &lt;code&gt;fs&lt;/code&gt; 모듈이 file not found와 같은 오류를 일으키는 경우 :</target>
        </trans-unit>
        <trans-unit id="f7375b6ae6e025a205bff562ee7657ddbcd2b99a" translate="yes" xml:space="preserve">
          <source>And if the file contains invalid JSON:</source>
          <target state="translated">파일에 유효하지 않은 JSON이 포함 된 경우 :</target>
        </trans-unit>
        <trans-unit id="7caf6a400d01ca23590d49a019d5c9649d0508ff" translate="yes" xml:space="preserve">
          <source>And in our usage case we can test for it:</source>
          <target state="translated">사용 사례에서 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3a1ed6e969d737177956915b3ea0e86c27493938" translate="yes" xml:space="preserve">
          <source>And there is more. Bluebird's long stack traces additionally eliminate cycles, don't leak memory, are not limited to a certain amount of asynchronous boundaries and are fast enough for most applications to be used in production. All these are non-trivial problems that haunt straight-forward long stack trace implementations.</source>
          <target state="translated">그리고 더 있습니다. Bluebird의 긴 스택 트레이스는 사이클을 추가로 제거하고 메모리를 누출하지 않으며 일정량의 비동기 경계로 제한되지 않으며 대부분의 응용 프로그램을 프로덕션에 사용할 수있을만큼 빠릅니다. 이 모든 것이 간단하고 긴 스택 추적 구현을 ​​방해하는 사소한 문제입니다.</target>
        </trans-unit>
        <trans-unit id="b3c1a933b1113a333cdad2506abaa5424ffffa43" translate="yes" xml:space="preserve">
          <source>Android Java</source>
          <target state="translated">안드로이드 자바</target>
        </trans-unit>
        <trans-unit id="4f5b0570fa38c7edfc837edf4ca104e822aefd85" translate="yes" xml:space="preserve">
          <source>Another example using &lt;code&gt;coroutine&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;coroutine&lt;/code&gt; 사용하는 또 다른 예 :</target>
        </trans-unit>
        <trans-unit id="a97875a69abe8b6f5c683025b8a3432e11276a8e" translate="yes" xml:space="preserve">
          <source>Another example with handling jQuery castable objects (&lt;code&gt;$&lt;/code&gt; is jQuery)</source>
          <target state="translated">jQuery 캐스트 가능한 객체를 처리하는 또 다른 예 ( &lt;code&gt;$&lt;/code&gt; 는 jQuery 임)</target>
        </trans-unit>
        <trans-unit id="21bcb81dd5ace9c2849790c7bbbd91b61a546d8b" translate="yes" xml:space="preserve">
          <source>Another key difference between a &lt;em&gt;progress bar&lt;/em&gt; dialog and any other dialog we've discussed here is that a progress bar represents information on another task and &lt;em&gt;not&lt;/em&gt; user import. Instead of the program waiting for the user to provide a value the dialog box is waiting on the program to provide a value (resolved: 100% complete, rejected: aborted half way through). Because of this the &lt;em&gt;progress bar&lt;/em&gt; dialog would have a different interface then the previous dialogs we've covered. However, there can still be some user interaction so in essence we are dealing with two promises.</source>
          <target state="translated">&lt;em&gt;진행률 표시 줄&lt;/em&gt; 대화 상자와 여기서 논의한 다른 대화 상자의 또 다른 주요 차이점은 진행률 표시 줄은 사용자 가져 오기가 &lt;em&gt;아닌&lt;/em&gt; 다른 작업에 대한 정보를 나타냅니다 . 프로그램이 사용자가 값을 제공하기를 기다리는 대신 대화 상자가 프로그램에서 값을 제공하기를 기다리고 있습니다 (해결 : 100 % 완료, 거부 됨 : 반쯤 중단됨). 이 때문에 &lt;em&gt;진행률 표시 줄&lt;/em&gt; 대화 상자는 이전 대화 상자와 다른 인터페이스를 갖습니다. 그러나 여전히 약간의 사용자 상호 작용이있을 수 있으므로 본질적으로 우리는 두 가지 약속을 다룹니다.</target>
        </trans-unit>
        <trans-unit id="f364101757fd7b07c462556f8631107344aea9a7" translate="yes" xml:space="preserve">
          <source>Anti-patterns</source>
          <target state="translated">Anti-patterns</target>
        </trans-unit>
        <trans-unit id="11662291bfadfed046b533087ad47a1323134c10" translate="yes" xml:space="preserve">
          <source>Aren't Promises Just Callbacks?</source>
          <target state="translated">콜백을 약속하지 않습니까?</target>
        </trans-unit>
        <trans-unit id="9544cf2c5bab626172752d9720c485fa58a24fc2" translate="yes" xml:space="preserve">
          <source>As a notable exception in &lt;code&gt;fs&lt;/code&gt;, &lt;code&gt;fs.existsAsync&lt;/code&gt; doesn't work as expected, because Node's &lt;code&gt;fs.exists&lt;/code&gt; doesn't call back with error as first argument. More at &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/418&quot;&gt;&lt;code&gt;#418&lt;/code&gt;&lt;/a&gt;. One possible workaround is using &lt;code&gt;fs.statAsync&lt;/code&gt;.</source>
          <target state="translated">에서 주목할만한 예외로 &lt;code&gt;fs&lt;/code&gt; , &lt;code&gt;fs.existsAsync&lt;/code&gt; 는 노드의 때문에, 예상대로 작동하지 않습니다 &lt;code&gt;fs.exists&lt;/code&gt; 는 첫 번째 인수로 오류로 다시 호출하지 않습니다. 더 많은 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/418&quot;&gt; &lt;code&gt;#418&lt;/code&gt; &lt;/a&gt; . 한 가지 가능한 해결 방법은 &lt;code&gt;fs.statAsync&lt;/code&gt; 를 사용하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="1edcbf51cabada04714fdec4fecb7e4036df8d62" translate="yes" xml:space="preserve">
          <source>As a result, if you anticipate thrown errors or promise rejections while disposing of the resource you should use a &lt;code&gt;try..catch&lt;/code&gt; block (or Promise.try) and write the appropriate catch code to handle the errors. If it's not possible to sensibly handle the error, letting the process crash is the next best option.</source>
          <target state="translated">결과적으로, 자원을 폐기하는 동안 오류가 발생하거나 거부가 예상되는 경우 &lt;code&gt;try..catch&lt;/code&gt; 블록 (또는 Promise.try)을 사용하고 오류를 처리하기 위해 적절한 catch 코드를 작성해야합니다. 오류를 현명하게 처리 할 수없는 경우, 프로세스 충돌을 일으키는 것이 차선책입니다.</target>
        </trans-unit>
        <trans-unit id="603337ef7db2d8e80201d11a1abb5f55ab298b7c" translate="yes" xml:space="preserve">
          <source>As an optimization, the cancellation signal propagates upwards the promise chain so that an ongoing operation e.g. network request can be aborted. However, &lt;em&gt;not&lt;/em&gt; aborting the network request still doesn't make any operational difference as the callbacks are still not called either way.</source>
          <target state="translated">최적화로서, 취소 신호는 약속 체인 위로 전파되어 네트워크 요청과 같은 진행중인 동작이 중단 될 수있다. 그러나 &lt;em&gt;하지&lt;/em&gt; 콜백가 여전히 어느 쪽이든이라고하지 않는 한 어떤 동작 차이를하지 않습니다 여전히 네트워크 요청을 중단.</target>
        </trans-unit>
        <trans-unit id="a56c9fe3310dcb60ca7ee9fdfd81c193ca2ece2a" translate="yes" xml:space="preserve">
          <source>As shown in the example the handlers registered with &lt;code&gt;.finally&lt;/code&gt; are called even if the promise is cancelled. Another such exception is &lt;a href=&quot;reflect&quot;&gt;&lt;code&gt;.reflect()&lt;/code&gt;&lt;/a&gt;. No other types of handlers will be called in case of cancellation. This means that in &lt;code&gt;.then(onSuccess, onFailure)&lt;/code&gt; neither &lt;code&gt;onSuccess&lt;/code&gt; or &lt;code&gt;onFailure&lt;/code&gt; handler is called. This is similar to how &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/return&quot;&gt;&lt;code&gt;Generator#return&lt;/code&gt;&lt;/a&gt; works - only active &lt;code&gt;finally&lt;/code&gt; blocks are executed and then the generator exits.</source>
          <target state="translated">예제에 표시된 것처럼 &lt;code&gt;.finally&lt;/code&gt; 로 등록 된 핸들러 는 약속이 취소 된 경우에도 호출됩니다. 또 다른 예외는 &lt;a href=&quot;reflect&quot;&gt; &lt;code&gt;.reflect()&lt;/code&gt; &lt;/a&gt; 입니다. 취소시 다른 유형의 핸들러는 호출되지 않습니다. 이는 &lt;code&gt;.then(onSuccess, onFailure)&lt;/code&gt; &lt;code&gt;onSuccess&lt;/code&gt; 또는 &lt;code&gt;onFailure&lt;/code&gt; 핸들러가 호출 되지 않음을 의미합니다 . 이것은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/return&quot;&gt; &lt;code&gt;Generator#return&lt;/code&gt; 의&lt;/a&gt; 작동 방식과 유사합니다. 활성 &lt;code&gt;finally&lt;/code&gt; 블록 만 실행 된 다음 생성기가 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="27d6c3d4f96a902c6e725f6002f31ff16dffef95" translate="yes" xml:space="preserve">
          <source>As this is an anonymous function call, we need to &lt;strong&gt;return&lt;/strong&gt; something, which is not currently happening.</source>
          <target state="translated">이것은 익명 함수 호출이므로 현재 일어나지 않은 것을 &lt;strong&gt;반환&lt;/strong&gt; 해야합니다 .</target>
        </trans-unit>
        <trans-unit id="285d5b5236fd15976995707d10b749cb93f2bb92" translate="yes" xml:space="preserve">
          <source>Async Dialogs</source>
          <target state="translated">비동기 대화 상자</target>
        </trans-unit>
        <trans-unit id="0cbd038e382b67c6a00e5cdb344803c88d5aafb1" translate="yes" xml:space="preserve">
          <source>Async hooks</source>
          <target state="translated">비동기 후크</target>
        </trans-unit>
        <trans-unit id="ca00c0dd63cccbc126e94f98980e4c829ba5589b" translate="yes" xml:space="preserve">
          <source>Async scheduler is a function that takes a callback function and calls the callback function as soon as possible, but asynchronously. For example &lt;code&gt;setTimeout&lt;/code&gt;.</source>
          <target state="translated">비동기 스케줄러는 콜백 함수를 사용하고 가능한 빨리 비동기식으로 콜백 함수를 호출하는 함수입니다. 예를 들어 &lt;code&gt;setTimeout&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f56a660f0dad726695b31dda5b8891615117ac6d" translate="yes" xml:space="preserve">
          <source>Async/Await</source>
          <target state="translated">Async/Await</target>
        </trans-unit>
        <trans-unit id="f0f594325f019c89bc273f6f6f1c28d8bf5a720b" translate="yes" xml:space="preserve">
          <source>Asyncio coroutines are similar to bluebird coroutines in what they let you do, however bluebird coroutines also enable functional-style chaining.</source>
          <target state="translated">Asyncio 코 루틴은 블루 버드 코 루틴과 비슷하지만 사용자가 기능 스타일 체인을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b67d9bcb5c6cf2d09fbff06298d7c77552e5d2c" translate="yes" xml:space="preserve">
          <source>Attaching global rejection event handlers in &lt;strong&gt;browsers&lt;/strong&gt;:</source>
          <target state="translated">글로벌 거부 이벤트 처리기를 부착 &lt;strong&gt;브라우저&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="58d667ef31e502c95304c3737803d8de17011fa1" translate="yes" xml:space="preserve">
          <source>Attaching global rejection event handlers in &lt;strong&gt;node.js&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;node.js&lt;/strong&gt; 에 전역 거부 이벤트 핸들러 첨부 :</target>
        </trans-unit>
        <trans-unit id="6ed3b240d46ca2ba05e75ca96dfc21ccb397a876" translate="yes" xml:space="preserve">
          <source>Automatic vs. Manual conversion</source>
          <target state="translated">자동 대 수동 변환</target>
        </trans-unit>
        <trans-unit id="de4170e8d22bb2e0912d3b03aba91a32b185c2d0" translate="yes" xml:space="preserve">
          <source>Basic example:</source>
          <target state="translated">기본 예 :</target>
        </trans-unit>
        <trans-unit id="10fad2fa7fa5603b045d80d81f79406e904455a7" translate="yes" xml:space="preserve">
          <source>Basically sugar for doing:</source>
          <target state="translated">기본적으로 설탕 :</target>
        </trans-unit>
        <trans-unit id="722eb20427fb15ffcbd37f92ecbbf6dbc860c8dc" translate="yes" xml:space="preserve">
          <source>Be warned that the above example implementations are only superficially equivalent. Callbacks, even with the help of async, require too much boilerplate code to provide the same guarantees as promises.</source>
          <target state="translated">위의 예제 구현은 피상적으로 만 동일하다는 점에주의하십시오. 콜백에는 비동기를 사용하더라도 약속과 동일한 보장을 제공하기 위해 너무 많은 상용구 코드가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="54a6e2698510f81b01dd20af79bae13b89519696" translate="yes" xml:space="preserve">
          <source>Because the &lt;code&gt;removeEventListener&lt;/code&gt; requires a reference to the original function that was used with the &lt;code&gt;addEventListener&lt;/code&gt; it makes it difficult to clean up after itself without storing the references in a scope higher then the handler itself. Using a named function we can reference it when a user clicks the button. To help with performance and to avoid duplicating code the example uses &lt;a href=&quot;https://davidwalsh.name/event-delegate&quot;&gt;event delegation&lt;/a&gt; to capture both buttons in one &lt;em&gt;click&lt;/em&gt; handler.</source>
          <target state="translated">때문에 &lt;code&gt;removeEventListener&lt;/code&gt; 함께 사용 된 본래의 기능에 대한 참조를 필요로 &lt;code&gt;addEventListener&lt;/code&gt; 이 어려운 높은 후 처리기 자체 범위에 대한 참조를 저장하지 않고 자체 뒤처리를 할 수있다. 명명 된 함수를 사용하여 사용자가 버튼을 클릭 할 때이를 참조 할 수 있습니다. 성능 향상과 코드 복제 방지를 위해 예제에서는 &lt;a href=&quot;https://davidwalsh.name/event-delegate&quot;&gt;이벤트 위임&lt;/a&gt; 을 사용 하여 한 번의 &lt;em&gt;클릭&lt;/em&gt; 처리기 에서 두 버튼을 모두 캡처 합니다.</target>
        </trans-unit>
        <trans-unit id="cc3b4f303dd6c2de7105e75c06dfe181b8af940c" translate="yes" xml:space="preserve">
          <source>Because the result of &lt;code&gt;getUserData()&lt;/code&gt; is not returned from the first then handler, it becomes a runaway promise that is not awaited for by the second then. The second &lt;a href=&quot;api/then&quot;&gt;&lt;code&gt;.then()&lt;/code&gt;&lt;/a&gt; simply gets immediately called with &lt;code&gt;undefined&lt;/code&gt; (because &lt;code&gt;undefined&lt;/code&gt; is the default return value when you don't return anything).</source>
          <target state="translated">&lt;code&gt;getUserData()&lt;/code&gt; 의 결과는 첫 번째 then 핸들러에서 리턴되지 않기 때문에 두 번째로 기다리지 않는 런 어웨이 약속이됩니다. 두 번째 &lt;a href=&quot;api/then&quot;&gt; &lt;code&gt;.then()&lt;/code&gt; &lt;/a&gt; 은 &lt;code&gt;undefined&lt;/code&gt; 로 즉시 호출됩니다 ( &lt;code&gt;undefined&lt;/code&gt; 는 아무것도 반환하지 않을 때 기본 반환 값 이기 때문에 ).</target>
        </trans-unit>
        <trans-unit id="26b1484f2f7905929d1106d6e4581903a40f35b5" translate="yes" xml:space="preserve">
          <source>Beginner&amp;#x27;s Guide</source>
          <target state="translated">초보자 안내서</target>
        </trans-unit>
        <trans-unit id="7e2f928b206ffd6c256181a6066a6731b801e247" translate="yes" xml:space="preserve">
          <source>Beginner's Guide</source>
          <target state="translated">초보자 안내서</target>
        </trans-unit>
        <trans-unit id="2db2dec26c8e60bd96facd3ed32930390d02bf9f" translate="yes" xml:space="preserve">
          <source>Benchmark fix</source>
          <target state="translated">벤치 마크 수정</target>
        </trans-unit>
        <trans-unit id="4f46ac72b3634f96c6860b1ed26d9d4cd71d21aa" translate="yes" xml:space="preserve">
          <source>Benchmarks</source>
          <target state="translated">Benchmarks</target>
        </trans-unit>
        <trans-unit id="01b2950afbbaf549ffded4d950b40008e42f8bbf" translate="yes" xml:space="preserve">
          <source>Benchmarks have been ran with the following versions of modules.</source>
          <target state="translated">벤치 마크는 다음 버전의 모듈에서 실행되었습니다.</target>
        </trans-unit>
        <trans-unit id="d6a7f92847d02384ecab7edad66ec0efec7dd0df" translate="yes" xml:space="preserve">
          <source>Better filtering of bluebird internal calls in long stack traces, especially when using minified file in browsers</source>
          <target state="translated">특히 브라우저에서 축소 된 파일을 사용하는 경우 긴 스택 추적에서 블루 버드 내부 호출을보다 효과적으로 필터링</target>
        </trans-unit>
        <trans-unit id="1f4dc63606d322c611b0cc408533dc10eec7fea6" translate="yes" xml:space="preserve">
          <source>Bluebird</source>
          <target state="translated">Bluebird</target>
        </trans-unit>
        <trans-unit id="e93fec65b41a508a24a9175a8bce46cfee091f85" translate="yes" xml:space="preserve">
          <source>Bluebird also has a &lt;code&gt;Promise.race()&lt;/code&gt; function which does the same thing but doesn't wait for all of them to finish. That is what we want. An example how this might look:</source>
          <target state="translated">블루 버드는 또한 &lt;code&gt;Promise.race()&lt;/code&gt; 함수를 가지고 있습니다.이 함수는 똑같은 일을하지만 모든 것이 끝날 때까지 기다리지 않습니다. 그것이 우리가 원하는 것입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b1dbefa0514cba0f9b7eafbadc97afcf262eab32" translate="yes" xml:space="preserve">
          <source>Bluebird design principles</source>
          <target state="translated">블루 버드 디자인 원칙</target>
        </trans-unit>
        <trans-unit id="2b21cd89379036a20dd8cee1eb3758dc1e1d6939" translate="yes" xml:space="preserve">
          <source>Bluebird does not support extending promises this way. Instead, see &lt;a href=&quot;features#scoped-prototypes&quot;&gt;scoped prototypes&lt;/a&gt;.</source>
          <target state="translated">Bluebird는 이러한 방식으로 약속 연장을 지원하지 않습니다. 대신 &lt;a href=&quot;features#scoped-prototypes&quot;&gt;범위가 지정된 프로토 타입을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d265170327496ac8e62ae886307300833c48992c" translate="yes" xml:space="preserve">
          <source>Bluebird has a way to manage more than one promise simultaneously. When you want to know if more then one promise completes there is a &lt;code&gt;Promise.all()&lt;/code&gt; function that takes an array of promises and returns a new promise waiting for them all to resolve. But if any one is rejected the returned promise is immediately rejected.</source>
          <target state="translated">블루 버드는 하나 이상의 약속을 동시에 관리 할 수있는 방법이 있습니다. 하나 이상의 약속이 완료되는지 알고 싶다면 &lt;code&gt;Promise.all()&lt;/code&gt; 함수가 있습니다.이 함수는 여러 약속을 취하고 모든 약속이 해결되기를 기다리는 새로운 약속을 반환합니다. 그러나 어느 하나가 거부되면 반환 된 약속은 즉시 거부됩니다.</target>
        </trans-unit>
        <trans-unit id="4725906d7f28ae94db3b3b71b6cee7b1b9543d0d" translate="yes" xml:space="preserve">
          <source>Bluebird includes a few built-in error types for common usage. All error types have the same identity across different copies of bluebird module so that pattern matching works in &lt;a href=&quot;catch&quot;&gt;&lt;code&gt;.catch&lt;/code&gt;&lt;/a&gt;. All error types have a constructor taking a message string as their first argument, with that message becoming the &lt;code&gt;.message&lt;/code&gt; property of the error object.</source>
          <target state="translated">Bluebird에는 일반적인 사용법을위한 몇 가지 기본 제공 오류 유형이 포함되어 있습니다. 모든 오류 유형은 서로 다른 블루 버드 모듈 사본에서 동일한 ID를 가지므로 패턴 일치는 &lt;a href=&quot;catch&quot;&gt; &lt;code&gt;.catch&lt;/code&gt; &lt;/a&gt; 에서 작동합니다 . 모든 오류 유형에는 메시지 문자열을 첫 번째 인수로 사용하는 생성자가 있으며 해당 메시지 는 오류 오브젝트 의 &lt;code&gt;.message&lt;/code&gt; 특성이됩니다.</target>
        </trans-unit>
        <trans-unit id="673717d5bbb5232b95facab445ef3d57bd4fffbc" translate="yes" xml:space="preserve">
          <source>Bluebird is built with the following design principles in mind:</source>
          <target state="translated">블루 버드는 다음과 같은 설계 원칙을 염두에두고 구축되었습니다.</target>
        </trans-unit>
        <trans-unit id="bc6a7847bad75522d1b3502a8ba2e0edb8a700fe" translate="yes" xml:space="preserve">
          <source>Bluebird officially supports and is tested on node.js, iojs and browsers starting from IE7. Unofficial platforms are supported with best effort only.</source>
          <target state="translated">Bluebird는 공식적으로 IE7부터 node.js, iojs 및 브라우저를 지원하고 테스트합니다. 비공식 플랫폼은 최선의 노력으로 만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="75a19b91a83ccbefb3c06d95b5fb5e627a9fa021" translate="yes" xml:space="preserve">
          <source>Bluebird promises are a drop-in replacement for native promises except for subclassing. Additionally you might want to replace usages of the often incorrectly used &lt;a href=&quot;api/promise.race&quot;&gt;&lt;code&gt;Promise.race&lt;/code&gt;&lt;/a&gt; with bluebird's &lt;a href=&quot;api/promise.any&quot;&gt;&lt;code&gt;Promise.any&lt;/code&gt;&lt;/a&gt; which does what is usually mistakenly expected from &lt;a href=&quot;api/promise.race&quot;&gt;&lt;code&gt;Promise.race&lt;/code&gt;&lt;/a&gt;. For maximum compatibility, bluebird does provide &lt;a href=&quot;api/promise.race&quot;&gt;&lt;code&gt;Promise.race&lt;/code&gt;&lt;/a&gt; with ES6 semantics.</source>
          <target state="translated">블루 버드 약속은 서브 클래 싱을 제외한 기본 약속을 대체 할 수있는 대체물입니다. 또한 자주 잘못 사용되는 &lt;a href=&quot;api/promise.race&quot;&gt; &lt;code&gt;Promise.race&lt;/code&gt; &lt;/a&gt; 사용법을 일반적으로 &lt;a href=&quot;api/promise.race&quot;&gt; &lt;code&gt;Promise.race&lt;/code&gt; &lt;/a&gt; 에서 실수로 예상되는 작업 을 수행하는 bluebird 's &lt;a href=&quot;api/promise.any&quot;&gt; &lt;code&gt;Promise.any&lt;/code&gt; 로 바꾸려고&lt;/a&gt; 할 수 있습니다. 최대한의 호환성을 위해 블루 버드는 &lt;a href=&quot;api/promise.race&quot;&gt; &lt;code&gt;Promise.race&lt;/code&gt; &lt;/a&gt; 에 ES6 의미를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="00b8a377251502a9c9e1cd53ca6a548de9a97abe" translate="yes" xml:space="preserve">
          <source>Bluebird ships with the best cross-platform long stack traces out there and a warning system. This helps you recognize common and devastating promise usage mistakes early before they lead to hard to debug code later.</source>
          <target state="translated">블루 버드는 최고의 크로스 플랫폼 긴 스택 추적과 경고 시스템을 제공합니다. 이를 통해 나중에 코드를 디버깅하기가 어렵 기 전에 일반적이고 파괴적인 약속 사용 실수를 조기에 인식 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="530d2465ef362ce90848b990660484804133b0a1" translate="yes" xml:space="preserve">
          <source>Bluebird supports &lt;a href=&quot;https://nodejs.org/api/async_hooks.html&quot;&gt;async hooks&lt;/a&gt; in node versions 9.6.0 and later. After it is enabled promises from the bluebird instance are assigned unique asyncIds:</source>
          <target state="translated">Bluebird는 노드 버전 9.6.0 이상에서 &lt;a href=&quot;https://nodejs.org/api/async_hooks.html&quot;&gt;비동기 후크&lt;/a&gt; 를 지원합니다 . 활성화되면 bluebird 인스턴스의 promise에 고유 한 asyncId가 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="841678111cbbbcbe7cbddd83261b3ea5ed2d43a5" translate="yes" xml:space="preserve">
          <source>Bluebird supports typed and predicate &lt;a href=&quot;api/catch&quot;&gt;&lt;code&gt;.catch()&lt;/code&gt;&lt;/a&gt; calls]. However in order to use the typed/predicate catch syntax for error handling you must do one of two things.</source>
          <target state="translated">Bluebird는 형식화 된 술어 &lt;a href=&quot;api/catch&quot;&gt; &lt;code&gt;.catch()&lt;/code&gt; &lt;/a&gt; 호출을 지원 합니다]. 그러나 오류 처리에 유형이 지정된 / 조건 자 catch 구문을 사용하려면 두 가지 중 하나를 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="7b3b2295f2a8ea8bb5b66e96c61eb37fe2bf39bb" translate="yes" xml:space="preserve">
          <source>Bluebird treats jQuery deferreds and promises interchangeably. Wherever you can take a promise or return a promise, you can take or return a jQuery deferred instead and it works the same.</source>
          <target state="translated">Bluebird는 jQuery 지연과 약속을 서로 바꿔서 처리합니다. 약속을 잡거나 약속을 반환 할 수있는 곳마다 지연 된 jQuery를 가져 오거나 반환 할 수 있으며 동일하게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="4202bb80fd89f9b3fe31cc7c6cbb153574b3bb12" translate="yes" xml:space="preserve">
          <source>Bluebird's &lt;a href=&quot;api/promise.coroutine&quot;&gt;&lt;code&gt;Promise.coroutine&lt;/code&gt;&lt;/a&gt; is a superset of the &lt;code&gt;co&lt;/code&gt; library, being more extensible as well as supporting cancellation (in environments where &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/return&quot;&gt;&lt;code&gt;Generator#return&lt;/code&gt;&lt;/a&gt; is implemented).</source>
          <target state="translated">Bluebird 's &lt;a href=&quot;api/promise.coroutine&quot;&gt; &lt;code&gt;Promise.coroutine&lt;/code&gt; &lt;/a&gt; 은 &lt;code&gt;co&lt;/code&gt; 라이브러리 의 상위 집합으로, 확장 성을 지원하고 취소를 지원할 수 있습니다 ( &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/return&quot;&gt; &lt;code&gt;Generator#return&lt;/code&gt; &lt;/a&gt; 이 구현 된 환경에서 ).</target>
        </trans-unit>
        <trans-unit id="0d88689cdf329b1eacc73297a0d6a810dd4c7635" translate="yes" xml:space="preserve">
          <source>Bookshelf</source>
          <target state="translated">Bookshelf</target>
        </trans-unit>
        <trans-unit id="826dd33de27713316ce415b244c5607f53c3a8b4" translate="yes" xml:space="preserve">
          <source>Bookshelf already uses Bluebird promises internally and has promise returning APIs. Use those.</source>
          <target state="translated">Bookshelf는 이미 내부적으로 Bluebird 약속을 사용하고 API를 반환 할 것을 약속합니다. 그것들을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="f793adfa7305423b489b09a42443e08f412ab947" translate="yes" xml:space="preserve">
          <source>Boost futures expose a &lt;code&gt;.then&lt;/code&gt; method similar to promises and allow this functionality.</source>
          <target state="translated">부스트 선물 은 약속과 유사한 &lt;code&gt;.then&lt;/code&gt; 방법을 제공하고이 기능을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="6b54e5722f5b9626ea48815de2014ade72268641" translate="yes" xml:space="preserve">
          <source>Both features are automatically enabled if the &lt;code&gt;BLUEBIRD_DEBUG&lt;/code&gt; environment variable has been set or if the &lt;code&gt;NODE_ENV&lt;/code&gt; environment variable is equal to &lt;code&gt;&quot;development&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BLUEBIRD_DEBUG&lt;/code&gt; 환경 변수가 설정되었거나 &lt;code&gt;NODE_ENV&lt;/code&gt; 환경 변수가 &lt;code&gt;&quot;development&quot;&lt;/code&gt; 와 같은 경우 두 기능 모두 자동으로 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="9ffb0208d392c8e265afd38556dcd1a34eb2bb33" translate="yes" xml:space="preserve">
          <source>Both promisification (&lt;a href=&quot;api/promise.promisify&quot;&gt;&lt;code&gt;Promise.promisify&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api/promise.promisifyall&quot;&gt;&lt;code&gt;Promise.promisifyAll&lt;/code&gt;&lt;/a&gt;) methods and &lt;a href=&quot;api/promise.fromcallback&quot;&gt;&lt;code&gt;Promise.fromCallback&lt;/code&gt;&lt;/a&gt; all take a new boolean option &lt;code&gt;multiArgs&lt;/code&gt; which defaults to &lt;code&gt;false&lt;/code&gt;. Enabling this option will make the adapter callback &lt;em&gt;always&lt;/em&gt; construct an array of the passed arguments regardless of amount of arguments. This can be used to reliably get access to all arguments rather than just the first one.</source>
          <target state="translated">약속 ( &lt;a href=&quot;api/promise.promisify&quot;&gt; &lt;code&gt;Promise.promisify&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;api/promise.promisifyall&quot;&gt; &lt;code&gt;Promise.promisifyAll&lt;/code&gt; &lt;/a&gt; ) 메서드와 &lt;a href=&quot;api/promise.fromcallback&quot;&gt; &lt;code&gt;Promise.fromCallback&lt;/code&gt; 은&lt;/a&gt; 모두 기본적으로 &lt;code&gt;false&lt;/code&gt; 로 &lt;code&gt;multiArgs&lt;/code&gt; 새로운 부울 옵션 multiArgs 를 사용 합니다. 이 옵션을 사용하면 어댑터 콜백 이 인수의 양에 관계없이 &lt;em&gt;항상&lt;/em&gt; 전달 된 인수의 배열을 구성합니다. 이것은 첫 번째 인수가 아닌 모든 인수에 안정적으로 액세스하는 데 사용할 수 있습니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f66c320d28b12ef0cf3ac5883d9827c29342af5c" translate="yes" xml:space="preserve">
          <source>Both promisification (&lt;a href=&quot;api/promise.promisify&quot;&gt;&lt;code&gt;Promise.promisify&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api/promise.promisifyall&quot;&gt;&lt;code&gt;Promise.promisifyAll&lt;/code&gt;&lt;/a&gt;) methods and &lt;a href=&quot;api/promise.fromcallback&quot;&gt;&lt;code&gt;Promise.fromCallback&lt;/code&gt;&lt;/a&gt; now by default ignore multiple arguments passed to the callback adapter and instead only the first argument is used to resolve the promise. The behavior in 2.x is to construct an array of the arguments and resolve the promise with it when more than one argument is passed to the callback adapter. The problems with this approach and reasons for the change are discussed in &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/307&quot;&gt;&lt;code&gt;#307&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">약속 ( &lt;a href=&quot;api/promise.promisify&quot;&gt; &lt;code&gt;Promise.promisify&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;api/promise.promisifyall&quot;&gt; &lt;code&gt;Promise.promisifyAll&lt;/code&gt; &lt;/a&gt; ) 메서드와 &lt;a href=&quot;api/promise.fromcallback&quot;&gt; &lt;code&gt;Promise.fromCallback&lt;/code&gt; &lt;/a&gt; 은 기본적으로 콜백 어댑터에 전달 된 여러 인수를 무시하고 대신 첫 번째 인수 만 약속을 해결하는 데 사용됩니다. 2.x의 동작은 인수 배열을 구성하고 둘 이상의 인수가 콜백 어댑터에 전달 될 때 인수로 약속을 해결하는 것입니다. 이 접근법의 문제점과 변경 이유는 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/307&quot;&gt; &lt;code&gt;#307&lt;/code&gt; &lt;/a&gt; 에서 논의됩니다 .</target>
        </trans-unit>
        <trans-unit id="1f688a06e547b5c3a43787858bd62f64749948d7" translate="yes" xml:space="preserve">
          <source>Bower</source>
          <target state="translated">Bower</target>
        </trans-unit>
        <trans-unit id="93d71e19cac582da38a7c286808b5243b0974217" translate="yes" xml:space="preserve">
          <source>Breaking changes:</source>
          <target state="translated">주요 변경 사항 :</target>
        </trans-unit>
        <trans-unit id="64fbee79d260dfa703205a63189635a44865ce3d" translate="yes" xml:space="preserve">
          <source>Broken build</source>
          <target state="translated">깨진 빌드</target>
        </trans-unit>
        <trans-unit id="dd4d6f39040899bc30b7e768772c9b1d93c09cb2" translate="yes" xml:space="preserve">
          <source>Browser builds for minimal core are now hosted on CDN (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/724&quot;&gt;&lt;code&gt;#724&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">최소 코어를위한 브라우저 빌드가 이제 CDN ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/724&quot;&gt; &lt;code&gt;#724&lt;/code&gt; &lt;/a&gt; ) 에서 호스팅됩니다 .</target>
        </trans-unit>
        <trans-unit id="02a4d8d5bd67d9e709274a4fb8d2b90a3b4a87d5" translate="yes" xml:space="preserve">
          <source>Browser installation</source>
          <target state="translated">브라우저 설치</target>
        </trans-unit>
        <trans-unit id="33520db36b5649a5392ee10e95c756bcc9b76e3f" translate="yes" xml:space="preserve">
          <source>Browserify and Webpack</source>
          <target state="translated">Browserify 및 Webpack</target>
        </trans-unit>
        <trans-unit id="6e92074d83472981588f0279868b23097eb04660" translate="yes" xml:space="preserve">
          <source>Browsers</source>
          <target state="translated">Browsers</target>
        </trans-unit>
        <trans-unit id="e169657052dec25dbb913fd7b6364b51fc241b7f" translate="yes" xml:space="preserve">
          <source>Bugfixes:</source>
          <target state="translated">Bugfixes:</target>
        </trans-unit>
        <trans-unit id="5e21babbc2d3e51eca8199d78356fda48e71c187" translate="yes" xml:space="preserve">
          <source>Building a library that depends on bluebird? You should know about the &quot;scoped prototype&quot; feature.</source>
          <target state="translated">블루 버드에 의존하는 라이브러리를 구축 하시겠습니까? &quot;범위가 지정된 프로토 타입&quot;기능에 대해 알아야합니다.</target>
        </trans-unit>
        <trans-unit id="c26dd098bcc6045a394860352616c62a850e7065" translate="yes" xml:space="preserve">
          <source>Built-in error types</source>
          <target state="translated">내장 오류 유형</target>
        </trans-unit>
        <trans-unit id="e91941d777309f5ee5115b3f672e5a2b30c4f6d8" translate="yes" xml:space="preserve">
          <source>But this will also work:</source>
          <target state="translated">그러나 이것은 또한 작동합니다 :</target>
        </trans-unit>
        <trans-unit id="d37bac43848c699e4990041402b5e542a05f71ce" translate="yes" xml:space="preserve">
          <source>By default bluebird only tries a few common async schedulers, such as &lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;process.nextTick&lt;/code&gt; and &lt;code&gt;MutationObserver&lt;/code&gt;. However if your JavaScript runtime environment doesn't expose any of these, you will see this error.</source>
          <target state="translated">기본적으로 블루 버드는 &lt;code&gt;setTimeout&lt;/code&gt; , &lt;code&gt;process.nextTick&lt;/code&gt; 및 &lt;code&gt;MutationObserver&lt;/code&gt; 와 같은 몇 가지 일반적인 비동기 스케줄러 만 시도합니다 . 그러나 JavaScript 런타임 환경에 이러한 환경이 표시되지 않으면이 오류가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="fcf764089c5c88492dcac8ddcfd3941229486afd" translate="yes" xml:space="preserve">
          <source>By default the error types need to be referenced from the Promise constructor, e.g. to get a reference to &lt;a href=&quot;timeouterror&quot;&gt;&lt;code&gt;TimeoutError&lt;/code&gt;&lt;/a&gt;, do &lt;code&gt;var TimeoutError = Promise.TimeoutError&lt;/code&gt;. However, for convenience you will probably want to just make the references global.</source>
          <target state="translated">기본적으로 오류 유형에 대한 참조를 얻기 위해, 약속 생성자에서 예를 참조 할 필요가 &lt;a href=&quot;timeouterror&quot;&gt; &lt;code&gt;TimeoutError&lt;/code&gt; 을&lt;/a&gt; 수행 &lt;code&gt;var TimeoutError = Promise.TimeoutError&lt;/code&gt; . 그러나 편의상 아마도 참조를 전역으로 만들고 싶을 것입니다.</target>
        </trans-unit>
        <trans-unit id="fac63ceaf875c42b747a7df6e9f84e97a51114d4" translate="yes" xml:space="preserve">
          <source>By default you can only yield Promises and Thenables inside coroutines. You can use this function to add yielding support for arbitrary types.</source>
          <target state="translated">기본적으로 코 루틴 안에서는 약속과 그 다음에 나오는 것을 얻을 수 있습니다. 이 함수를 사용하여 임의 유형에 대한 지원을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="47428cc6572fab900dc6b45f4a3e544d8049b39a" translate="yes" xml:space="preserve">
          <source>By not returning a rejected value or &lt;code&gt;throw&lt;/code&gt;ing from a catch, you &quot;recover from failure&quot; and continue the chain:</source>
          <target state="translated">거부 된 값을 반환하지 않거나 캐치를 &lt;code&gt;throw&lt;/code&gt; 않으면 &quot;실패에서 복구&quot;하고 체인을 계속합니다.</target>
        </trans-unit>
        <trans-unit id="e4bc4b1059294a74bcda71cd96a0c1b71757d094" translate="yes" xml:space="preserve">
          <source>C#</source>
          <target state="translated">C#</target>
        </trans-unit>
        <trans-unit id="fc2b4216164cfb01ac45112054b3fedda8b56c86" translate="yes" xml:space="preserve">
          <source>C++</source>
          <target state="translated">C++</target>
        </trans-unit>
        <trans-unit id="573fb753b7e4b3aa5b6a55cf68905fc96126bd2f" translate="yes" xml:space="preserve">
          <source>Call this right after the library is loaded to enable long stack traces. Long stack traces cannot be disabled after being enabled, and cannot be enabled after promises have alread been created. Long stack traces imply a substantial performance penalty, around 4-5x for throughput and 0.5x for latency.</source>
          <target state="translated">긴 스택 추적을 사용하려면 라이브러리가로드 된 직후에 이것을 호출하십시오. 긴 스택 추적은 활성화 된 후에 비활성화 할 수 없으며 약속이 이미 생성 된 후에는 활성화 할 수 없습니다. 긴 스택 추적은 처리량의 경우 약 4-5 배, 대기 시간의 경우 0.5 배로 상당한 성능 저하를 의미합니다.</target>
        </trans-unit>
        <trans-unit id="c271664e743b95a9e824618c3b050d77f77f6176" translate="yes" xml:space="preserve">
          <source>Call this right after the library is loaded to enable long stack traces. Long stack traces cannot be disabled after being enabled, and cannot be enabled after promises have already been created. Long stack traces imply a substantial performance penalty, around 4-5x for throughput and 0.5x for latency.</source>
          <target state="translated">긴 스택 추적을 사용하려면 라이브러리가로드 된 후 바로 호출하십시오. 긴 스택 추적은 활성화 한 후에 비활성화 할 수 없으며 약속이 이미 생성 된 후에는 활성화 할 수 없습니다. 긴 스택 추적은 처리량의 경우 약 4 ~ 5 배, 지연 시간의 경우 0.5 배의 상당한 성능 저하를 의미합니다.</target>
        </trans-unit>
        <trans-unit id="d64348c54e5cf448d82771cef2bcb8c112008d5c" translate="yes" xml:space="preserve">
          <source>Cancel this promise. Will not do anything if this promise is already settled or if the &lt;a href=&quot;cancellation&quot;&gt;&lt;code&gt;Cancellation&lt;/code&gt;&lt;/a&gt; feature has not been enabled. See &lt;a href=&quot;cancellation&quot;&gt;&lt;code&gt;Cancellation&lt;/code&gt;&lt;/a&gt; for how to use cancellation.</source>
          <target state="translated">이 약속을 취소하십시오. 이 약속이 이미 확정되었거나 &lt;a href=&quot;cancellation&quot;&gt; &lt;code&gt;Cancellation&lt;/code&gt; &lt;/a&gt; 기능이 활성화되지 않은 경우 아무 작업도 수행하지 않습니다. &lt;a href=&quot;cancellation&quot;&gt; &lt;code&gt;Cancellation&lt;/code&gt; &lt;/a&gt; 사용 방법 은 취소 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="319aaae4dec46a75861fd10bcf8d182f4a77298d" translate="yes" xml:space="preserve">
          <source>Cancellation</source>
          <target state="translated">Cancellation</target>
        </trans-unit>
        <trans-unit id="bef7bb5e57e5a92b8be6213bc977ef4ea4184ce0" translate="yes" xml:space="preserve">
          <source>Cancellation and timeouts</source>
          <target state="translated">취소 및 타임 아웃</target>
        </trans-unit>
        <trans-unit id="c34d7990bb380b27e4782eb853372e9ae67d3038" translate="yes" xml:space="preserve">
          <source>Cancellation has been redesigned for bluebird 3.0. Any code that relies on 2.x cancellation semantics won't work in 3.0 or later. See &lt;a href=&quot;api/cancellation&quot;&gt;&lt;code&gt;Cancellation&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">bluebird 3.0에 대한 취소가 재 설계되었습니다. 2.x 취소 시맨틱을 사용하는 코드는 3.0 이상에서 작동하지 않습니다. 자세한 내용은 &lt;a href=&quot;api/cancellation&quot;&gt; &lt;code&gt;Cancellation&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e0d6eb8f31ac4c108ff354921cc08f55acb7497b" translate="yes" xml:space="preserve">
          <source>Cancellation has been redesigned for bluebird 3.x, any code that relies on 2.x cancellation semantics won't work in 3.x.</source>
          <target state="translated">블루 버드 3.x에 대한 취소가 재 설계되었으며, 2.x 취소 시맨틱에 의존하는 코드는 3.x에서 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3149f7c6efb69661c3ebafec0e26aa11fe5ba530" translate="yes" xml:space="preserve">
          <source>Cancellation is always configured separately per bluebird instance.</source>
          <target state="translated">취소는 항상 블루 버드 인스턴스마다 별도로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="1d201e1485a7c5efa844e3a8694fbb8f753721bd" translate="yes" xml:space="preserve">
          <source>Cancellation overhaul</source>
          <target state="translated">취소 점검</target>
        </trans-unit>
        <trans-unit id="579b1264f895dbd881de12b7e8fd6b088092b804" translate="yes" xml:space="preserve">
          <source>Cancellation redesign.</source>
          <target state="translated">취소 재 설계.</target>
        </trans-unit>
        <trans-unit id="6aad7a11b0630f6336cd46a0e22032dc6decaa46" translate="yes" xml:space="preserve">
          <source>CancellationError</source>
          <target state="translated">CancellationError</target>
        </trans-unit>
        <trans-unit id="b30d777ad7d71e997078015bb6015177017c1577" translate="yes" xml:space="preserve">
          <source>CancellationError()</source>
          <target state="translated">CancellationError()</target>
        </trans-unit>
        <trans-unit id="62c39e5562e22828e5b5e45c33decce14ef3cae6" translate="yes" xml:space="preserve">
          <source>Cancelling Promise returned from &lt;a href=&quot;api/promise.delay&quot;&gt;&lt;code&gt;Promise.delay()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api/delay&quot;&gt;&lt;code&gt;.delay()&lt;/code&gt;&lt;/a&gt; now calls &lt;code&gt;clearTimeout&lt;/code&gt; (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1000&quot;&gt;&lt;code&gt;#1000&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;api/promise.delay&quot;&gt; &lt;code&gt;Promise.delay()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;api/delay&quot;&gt; &lt;code&gt;.delay()&lt;/code&gt; &lt;/a&gt; 에서 반환 된 Promise를 취소하면 이제 &lt;code&gt;clearTimeout&lt;/code&gt; ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1000&quot;&gt; &lt;code&gt;#1000&lt;/code&gt; &lt;/a&gt; )이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="067b9ecd38b812d7de5058cc4929d1dd7c409e64" translate="yes" xml:space="preserve">
          <source>Catch filter method calls showing in stack traces</source>
          <target state="translated">스택 추적에 표시되는 캐치 필터 메소드 호출</target>
        </trans-unit>
        <trans-unit id="53db8bc929b62252e75e4c900840ab940cc7134f" translate="yes" xml:space="preserve">
          <source>Catch-all</source>
          <target state="translated">Catch-all</target>
        </trans-unit>
        <trans-unit id="91718a50e9dab7fea8a099fd00e3f558afb623f4" translate="yes" xml:space="preserve">
          <source>Chaining lo-dash or underscore methods (Copy-pasteable example):</source>
          <target state="translated">로 대시 또는 밑줄 메서드 연결 (복사 붙여 넣기 가능한 예) :</target>
        </trans-unit>
        <trans-unit id="164b3d4809f98d0458414f1bf9cf3c9dcba16bb5" translate="yes" xml:space="preserve">
          <source>Changelog</source>
          <target state="translated">Changelog</target>
        </trans-unit>
        <trans-unit id="2ab6015480477453c65cb3f4806ba3cd8beba3ea" translate="yes" xml:space="preserve">
          <source>Check out the benchmarks section for examples of transitioning an API from Bacon/Rx to promises.</source>
          <target state="translated">API를 Bacon / Rx에서 약속으로 전환하는 예는 벤치 마크 섹션을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="0d9d47ead70034a9e3fb70eaa7eeeb73b78712d3" translate="yes" xml:space="preserve">
          <source>Choose the suffix carefully, it must not collide with anything</source>
          <target state="translated">접미사를 신중하게 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="d4dc2e3f58da917f3b7314cae72c8e1a2d207c40" translate="yes" xml:space="preserve">
          <source>Circuit Breakers</source>
          <target state="translated">회로 차단기</target>
        </trans-unit>
        <trans-unit id="163cac326dcf76379743efe9daa3bda2b8c416a9" translate="yes" xml:space="preserve">
          <source>Collection method changes</source>
          <target state="translated">수집 방법 변경</target>
        </trans-unit>
        <trans-unit id="4bbb632f02fd69807705c0179999c17d35c93b0f" translate="yes" xml:space="preserve">
          <source>Collections</source>
          <target state="translated">Collections</target>
        </trans-unit>
        <trans-unit id="46551671d82c7b384f789be0aba7053c002cbb80" translate="yes" xml:space="preserve">
          <source>Combining &lt;code&gt;filter&lt;/code&gt; with &lt;code&gt;promisifier&lt;/code&gt; for the restler module to promisify event emitter:</source>
          <target state="translated">이벤트 이미 터를 약속하기 위해 restler 모듈에 &lt;code&gt;filter&lt;/code&gt; 와 &lt;code&gt;promisifier&lt;/code&gt; 를 결합하십시오 .</target>
        </trans-unit>
        <trans-unit id="c797ae43627f0c8a02d868e7c912a0743bf6a034" translate="yes" xml:space="preserve">
          <source>Coming from &lt;code&gt;async&lt;/code&gt; module</source>
          <target state="translated">&lt;code&gt;async&lt;/code&gt; 모듈 에서 오는</target>
        </trans-unit>
        <trans-unit id="c339eeb2312abc6d062065672b98da9e44b1b3ea" translate="yes" xml:space="preserve">
          <source>Coming from Other Languages</source>
          <target state="translated">다른 언어에서 오는</target>
        </trans-unit>
        <trans-unit id="fb26e47e6afd73d646dcf5861c2fd568be0ca2a0" translate="yes" xml:space="preserve">
          <source>Coming from Other Libraries</source>
          <target state="translated">다른 라이브러리에서 오는</target>
        </trans-unit>
        <trans-unit id="2ea10f6fc1cd3f9aa68d18b140e4658ba1f337fe" translate="yes" xml:space="preserve">
          <source>Coming from Q</source>
          <target state="translated">Q에서 오는</target>
        </trans-unit>
        <trans-unit id="34a62879eca96e9e6ac3d6861d800b0c595577f5" translate="yes" xml:space="preserve">
          <source>Coming from co/koa</source>
          <target state="translated">co / koa에서 오는</target>
        </trans-unit>
        <trans-unit id="f5ef13e837ff640b5d17250c61cf17216cb5cf25" translate="yes" xml:space="preserve">
          <source>Coming from highland, RxJS or BaconJS</source>
          <target state="translated">고원, RxJS 또는 BaconJS에서</target>
        </trans-unit>
        <trans-unit id="c2ff9aee6f9e1b8a973da7d45a0c2d87565299e7" translate="yes" xml:space="preserve">
          <source>Coming from jQuery deferreds</source>
          <target state="translated">jQuery 연기에서 오는</target>
        </trans-unit>
        <trans-unit id="bbb7ab402e1c3d06b7715e8d1a01a8a8b2006ffe" translate="yes" xml:space="preserve">
          <source>Coming from native promises</source>
          <target state="translated">기본 약속에서 오는</target>
        </trans-unit>
        <trans-unit id="56115dc0ce2a77e4baef739140e3a2d3dde15c60" translate="yes" xml:space="preserve">
          <source>Command: &lt;code&gt;./bench doxbee&lt;/code&gt; (&lt;a href=&quot;http://bluebirdjs.com/docs/contribute.html#benchmarking&quot;&gt;needs cloned repository&lt;/a&gt;)</source>
          <target state="translated">명령 : &lt;code&gt;./bench doxbee&lt;/code&gt; ( &lt;a href=&quot;http://bluebirdjs.com/docs/contribute.html#benchmarking&quot;&gt;복제 저장소 필요&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="454430033770a09026ee0a45e19685de961a617e" translate="yes" xml:space="preserve">
          <source>Command: &lt;code&gt;./bench parallel&lt;/code&gt; (&lt;a href=&quot;http://bluebirdjs.com/docs/contribute.html#benchmarking&quot;&gt;needs cloned repository&lt;/a&gt;)</source>
          <target state="translated">명령 : &lt;code&gt;./bench parallel&lt;/code&gt; ( &lt;a href=&quot;http://bluebirdjs.com/docs/contribute.html#benchmarking&quot;&gt;복제 저장소 필요&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="5d6ef42fc37548c1dd940825bed98a5ef47b1636" translate="yes" xml:space="preserve">
          <source>Common case includes adding logging to an existing promise chain:</source>
          <target state="translated">일반적인 경우에는 기존 약속 체인에 로깅을 추가하는 것이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="fcfd2d285ffb42d221ade0eb18e3d448aee04199" translate="yes" xml:space="preserve">
          <source>Concurrency coordination</source>
          <target state="translated">동시성 조정</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">Configuration</target>
        </trans-unit>
        <trans-unit id="3883dcdd8c061d2cefccf20e19a6a9eb7b615fef" translate="yes" xml:space="preserve">
          <source>Configure long stack traces, warnings, monitoring and cancellation. Note that even though &lt;code&gt;false&lt;/code&gt; is the default here, a development environment might be detected which automatically enables long stack traces and warnings.</source>
          <target state="translated">긴 스택 추적, 경고, 모니터링 및 취소를 구성하십시오. 여기서는 &lt;code&gt;false&lt;/code&gt; 가 기본값 이지만 긴 스택 추적 및 경고를 자동으로 활성화하는 개발 환경이 감지 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c2654afe9d86e025eb7b9b2b6062d2924fe9e81" translate="yes" xml:space="preserve">
          <source>Configure long stack traces, warnings, monitoring, &lt;a href=&quot;https://nodejs.org/api/async_hooks.html&quot;&gt;async hooks&lt;/a&gt; and cancellation. Note that even though &lt;code&gt;false&lt;/code&gt; is the default here, a development environment might be detected which automatically enables long stack traces and warnings. For &lt;strong&gt;webpack&lt;/strong&gt; and &lt;strong&gt;browserify&lt;/strong&gt;&lt;em&gt;development&lt;/em&gt; environment is &lt;em&gt;always&lt;/em&gt; enabled. See &lt;a href=&quot;../install#browserify-and-webpack&quot;&gt;installation&lt;/a&gt; on how to configure webpack and browserify for production.</source>
          <target state="translated">긴 스택 추적, 경고, 모니터링, &lt;a href=&quot;https://nodejs.org/api/async_hooks.html&quot;&gt;비동기 후크&lt;/a&gt; 및 취소를 구성합니다. 여기서는 &lt;code&gt;false&lt;/code&gt; 가 기본값 이지만 긴 스택 추적 및 경고를 자동으로 활성화하는 개발 환경이 감지 될 수 있습니다. 들어 &lt;strong&gt;웹팩&lt;/strong&gt; 및 &lt;strong&gt;browserify &lt;/strong&gt;&lt;em&gt;개발&lt;/em&gt; 환경을 &lt;em&gt;항상&lt;/em&gt; 사용 가능. 프로덕션을 위해 webpack 및 browserify를 구성하는 방법 은 &lt;a href=&quot;../install#browserify-and-webpack&quot;&gt;설치&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="283962657f88f43c9e301445dfc296b205988dc0" translate="yes" xml:space="preserve">
          <source>Consider reading the section about &lt;a href=&quot;api/promisification&quot;&gt;&lt;code&gt;promisification&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;api/promisification&quot;&gt; &lt;code&gt;promisification&lt;/code&gt; &lt;/a&gt; 에 관한 부분을 읽으십시오</target>
        </trans-unit>
        <trans-unit id="0d3680cfac2f9a166e1de747a70580fbe0b2938f" translate="yes" xml:space="preserve">
          <source>Consider the example:</source>
          <target state="translated">예를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="9143429ab969602aefc2252cfb2cfc8075b027a4" translate="yes" xml:space="preserve">
          <source>Consider using &lt;a href=&quot;api/ispending&quot;&gt;&lt;code&gt;.isPending()&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;api/isfulfilled&quot;&gt;&lt;code&gt;.isFulfilled()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api/isrejected&quot;&gt;&lt;code&gt;.isRejected()&lt;/code&gt;&lt;/a&gt; in order to inspect the promise for status.</source>
          <target state="translated">사용을 고려 &lt;a href=&quot;api/ispending&quot;&gt; &lt;code&gt;.isPending()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;api/isfulfilled&quot;&gt; &lt;code&gt;.isFulfilled()&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;api/isrejected&quot;&gt; &lt;code&gt;.isRejected()&lt;/code&gt; &lt;/a&gt; 상태에 대한 약속을 검사하기 위해.</target>
        </trans-unit>
        <trans-unit id="75e291169a2ebb63c935a5de7382990c0513d618" translate="yes" xml:space="preserve">
          <source>Consider:</source>
          <target state="translated">Consider:</target>
        </trans-unit>
        <trans-unit id="274a3b2600c377b81643cb431a5ecace56cefb5f" translate="yes" xml:space="preserve">
          <source>Consume the resolved &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;&lt;code&gt;Iterable&lt;/code&gt;&lt;/a&gt; and wait for all items to fulfill similar to &lt;a href=&quot;promise.all&quot;&gt;&lt;code&gt;Promise.all()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">해결 된 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt; &lt;code&gt;Iterable&lt;/code&gt; 을&lt;/a&gt; 소비하고 모든 항목이 &lt;a href=&quot;promise.all&quot;&gt; &lt;code&gt;Promise.all()&lt;/code&gt; &lt;/a&gt; 과 유사하게 이행 될 때까지 기다립니다 .</target>
        </trans-unit>
        <trans-unit id="3ca5d8933758fde364bf85604aba2e2bc911808e" translate="yes" xml:space="preserve">
          <source>Continue by reading about &lt;a href=&quot;disposer&quot;&gt;disposers&lt;/a&gt; and &lt;a href=&quot;promise.using&quot;&gt;&lt;code&gt;Promise.using&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">에 대해 읽어 계속 &lt;a href=&quot;disposer&quot;&gt;음식물 쓰레기 처리기&lt;/a&gt; 및 &lt;a href=&quot;promise.using&quot;&gt; &lt;code&gt;Promise.using&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="26025092468b66b7fa89978994d196503519d4f5" translate="yes" xml:space="preserve">
          <source>Convenience method for:</source>
          <target state="translated">다음에 대한 편의 방법 :</target>
        </trans-unit>
        <trans-unit id="68836c550ee20fae0e06b2994e76a40348d2fc30" translate="yes" xml:space="preserve">
          <source>Core</source>
          <target state="translated">Core</target>
        </trans-unit>
        <trans-unit id="a1dfc5f18cea48907b0c3939e3a33853e2fda0a6" translate="yes" xml:space="preserve">
          <source>Core build &lt;a href=&quot;https://cdn.jsdelivr.net/bluebird/latest/bluebird.core.js&quot;&gt;bluebird.core.js&lt;/a&gt;</source>
          <target state="translated">핵심 빌드 &lt;a href=&quot;https://cdn.jsdelivr.net/bluebird/latest/bluebird.core.js&quot;&gt;bluebird.core.js&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9b4b3d809e1e5dbbc5461a149a3b1331f173f179" translate="yes" xml:space="preserve">
          <source>Core build minified &lt;a href=&quot;https://cdn.jsdelivr.net/bluebird/latest/bluebird.core.min.js&quot;&gt;bluebird.core.min.js&lt;/a&gt;</source>
          <target state="translated">코어 빌드 축소 된 &lt;a href=&quot;https://cdn.jsdelivr.net/bluebird/latest/bluebird.core.min.js&quot;&gt;bluebird.core.min.js&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a8fc6db865c91bea34e779c4b0e4d62d725d5a63" translate="yes" xml:space="preserve">
          <source>Core methods of &lt;code&gt;Promise&lt;/code&gt; instances and core static methods of the Promise class.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; 인스턴스 의 핵심 메서드 및 Promise 클래스의 핵심 정적 메서드</target>
        </trans-unit>
        <trans-unit id="deaf3520ea3820d037ed17ca51bece11cae48ac7" translate="yes" xml:space="preserve">
          <source>Coroutines now throw error when a non-promise is &lt;code&gt;yielded&lt;/code&gt;</source>
          <target state="translated">비 약속을 할 때 코 루틴은 이제 오류가 발생 &lt;code&gt;yielded&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ce677f2448feff30a9f9bd1a8d4491c5ca8ac36e" translate="yes" xml:space="preserve">
          <source>Correct domain for .map, .each, .filter, .reduce callbacks (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/701&quot;&gt;&lt;code&gt;#701&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">.map, .each, .filter, .reduce 콜백 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/701&quot;&gt; &lt;code&gt;#701&lt;/code&gt; &lt;/a&gt; )의 올바른 도메인</target>
        </trans-unit>
        <trans-unit id="b093bafd3e19f8219b3c0cf498ff0ded04c88ef9" translate="yes" xml:space="preserve">
          <source>Create a new promise. The passed in function will receive functions &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; as its arguments which can be called to seal the fate of the created promise.</source>
          <target state="translated">새로운 약속을 만드십시오. 함수에 전달 된 함수를받을 &lt;code&gt;resolve&lt;/code&gt; 하고 &lt;code&gt;reject&lt;/code&gt; 생성 된 약속의 운명을 밀봉하기 위해 호출 할 수있는 인자로.</target>
        </trans-unit>
        <trans-unit id="260647d079e74e4fe4a0b51d0badd2ffa6959cb8" translate="yes" xml:space="preserve">
          <source>Create a promise that follows this promise or in the static method is resolved with the given &lt;code&gt;value&lt;/code&gt;, but is bound to the given &lt;code&gt;thisArg&lt;/code&gt; value. A bound promise will call its handlers with the bound value set to &lt;code&gt;this&lt;/code&gt;. Additionally promises derived from a bound promise will also be bound promises with the same &lt;code&gt;thisArg&lt;/code&gt; binding as the original promise.</source>
          <target state="translated">이 약속을 따르거나 정적 메소드에서 약속을 작성하면 주어진 &lt;code&gt;value&lt;/code&gt; 로 해석 되지만 주어진 &lt;code&gt;thisArg&lt;/code&gt; 값에 바인드됩니다 . 바운드 약속은 바운드 값 &lt;code&gt;this&lt;/code&gt; 설정된 핸들러를 호출 합니다 . 또한 약속 된 약속에서 파생 된 약속은 원래 약속과 동일한 &lt;code&gt;thisArg&lt;/code&gt; 바인딩으로 약속 된 것입니다.</target>
        </trans-unit>
        <trans-unit id="bb0066c4361f93e2af84e0b23b0d99543933689a" translate="yes" xml:space="preserve">
          <source>Create a promise that is rejected with the given &lt;code&gt;error&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;error&lt;/code&gt; 거부 된 약속을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="c8160a0de692c57590992d73940c30121e4daff4" translate="yes" xml:space="preserve">
          <source>Create a promise that is resolved with the given value. If &lt;code&gt;value&lt;/code&gt; is already a trusted &lt;code&gt;Promise&lt;/code&gt;, it is returned as is. If &lt;code&gt;value&lt;/code&gt; is not a thenable, a fulfilled Promise is returned with &lt;code&gt;value&lt;/code&gt; as its fulfillment value. If &lt;code&gt;value&lt;/code&gt; is a thenable (Promise-like object, like those returned by jQuery's &lt;code&gt;$.ajax&lt;/code&gt;), returns a trusted Promise that assimilates the state of the thenable.</source>
          <target state="translated">주어진 가치로 해결되는 약속을 만드십시오. 경우 &lt;code&gt;value&lt;/code&gt; 이미 신뢰할 수있는 &lt;code&gt;Promise&lt;/code&gt; , 그대로 반환됩니다. &lt;code&gt;value&lt;/code&gt; 이 검색 가능하지 않은 경우 이행 된 약속은 이행 값 으로 &lt;code&gt;value&lt;/code&gt; 와 함께 리턴됩니다 . 경우 &lt;code&gt;value&lt;/code&gt; thenable이 (약속 같은 jQuery의에 의해 반환 된 것과 같은 오브젝트, &lt;code&gt;$.ajax&lt;/code&gt; ), A는 약속을 신뢰할 반환 동화 thenable의 상태.</target>
        </trans-unit>
        <trans-unit id="562c3f04925eaef45d14de9ac0d48ac63086cc94" translate="yes" xml:space="preserve">
          <source>Create browser tests</source>
          <target state="translated">브라우저 테스트 만들기</target>
        </trans-unit>
        <trans-unit id="92fe90cf033bf5e4081a5a3e1d1ba437020c6660" translate="yes" xml:space="preserve">
          <source>Debuggability and error handling</source>
          <target state="translated">디버깅 및 오류 처리</target>
        </trans-unit>
        <trans-unit id="992060573832ee8cbec67d247577c6fdc180bf4b" translate="yes" xml:space="preserve">
          <source>Debugging, we want to see the value of result, so we add a &lt;code&gt;console.log()&lt;/code&gt; line:</source>
          <target state="translated">디버깅, 결과 값을 확인하려면 &lt;code&gt;console.log()&lt;/code&gt; 행을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="e914bda5d0b719df4c0dacb23e32891d320c4246" translate="yes" xml:space="preserve">
          <source>Deferred migration</source>
          <target state="translated">지연된 마이그레이션</target>
        </trans-unit>
        <trans-unit id="1f2f2711288bee6ec93186bf51e9740fe7ee5dbe" translate="yes" xml:space="preserve">
          <source>Deferreds are deprecated in favor of the promise constructor. If you need deferreds for some reason, you can create them trivially using the constructor:</source>
          <target state="translated">약속 생성자를 위해 지연이 더 이상 사용되지 않습니다. 어떤 이유로 연기가 필요한 경우 생성자를 사용하여 사소하게 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3ee0421a8d2b0e01a9948ed9dd864b6a096d7c7b" translate="yes" xml:space="preserve">
          <source>Deprecate &lt;code&gt;Promise.promisify(Object target)&lt;/code&gt; in favor of &lt;code&gt;Promise.promisifyAll(Object target)&lt;/code&gt; to avoid confusion with function objects</source>
          <target state="translated">비추천 &lt;code&gt;Promise.promisify(Object target)&lt;/code&gt; 의 찬성 &lt;code&gt;Promise.promisifyAll(Object target)&lt;/code&gt; 함수 객체와 혼동을 피하기 위해</target>
        </trans-unit>
        <trans-unit id="51977f06e9562d026621861905e7501e014b68df" translate="yes" xml:space="preserve">
          <source>Deprecate &lt;code&gt;Promise.prototype.spawn&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Promise.prototype.spawn&lt;/code&gt; 사용 중단</target>
        </trans-unit>
        <trans-unit id="f42964243a0d9c6be535e390a19cb0cb021d258c" translate="yes" xml:space="preserve">
          <source>Deprecated &lt;a href=&quot;#progression-migration&quot;&gt;progression&lt;/a&gt; and &lt;a href=&quot;#deferred-migration&quot;&gt;deferreds&lt;/a&gt;</source>
          <target state="translated">더 이상 사용되지 않는 &lt;a href=&quot;#progression-migration&quot;&gt;진행&lt;/a&gt; 및 &lt;a href=&quot;#deferred-migration&quot;&gt;지연&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="600c4c32abbd0e6044d374f8d9f63e6c5b81d165" translate="yes" xml:space="preserve">
          <source>Deprecated APIs</source>
          <target state="translated">더 이상 사용되지 않는 API</target>
        </trans-unit>
        <trans-unit id="34730e9bbd5c0ba7b7655973316eed44e39da85f" translate="yes" xml:space="preserve">
          <source>Deprecations</source>
          <target state="translated">Deprecations</target>
        </trans-unit>
        <trans-unit id="524733edeeaeacd4c2cafa091755ffd83d630424" translate="yes" xml:space="preserve">
          <source>Detect deep circular resolutions</source>
          <target state="translated">깊은 원형 해상도 감지</target>
        </trans-unit>
        <trans-unit id="c29642c089aa92958e25d9b0da09f533f08b8139" translate="yes" xml:space="preserve">
          <source>Direct downloads</source>
          <target state="translated">직접 다운로드</target>
        </trans-unit>
        <trans-unit id="5e2d1e3421f7bbd3d0644458d8f079a704e1389d" translate="yes" xml:space="preserve">
          <source>Disable long stack traces in browsers by default. Call &lt;code&gt;Promise.longStackTraces()&lt;/code&gt; to enable them.</source>
          <target state="translated">기본적으로 브라우저에서 긴 스택 추적을 비활성화하십시오. 활성화하려면 &lt;code&gt;Promise.longStackTraces()&lt;/code&gt; 를 호출 하십시오 .</target>
        </trans-unit>
        <trans-unit id="9a49d830487cc9d2248fd7caef80c652ff60c94f" translate="yes" xml:space="preserve">
          <source>Disable wForgottenWarning when all warnings are disabled</source>
          <target state="translated">모든 경고가 비활성화되면 wForgottenWarning 비활성화</target>
        </trans-unit>
        <trans-unit id="15ad0fbcb60c3a9c160e72f39812435b431fb890" translate="yes" xml:space="preserve">
          <source>Disabling debug mode with &lt;code&gt;BLUEBIRD_DEBUG=0&lt;/code&gt; environment variable now works (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/719&quot;&gt;&lt;code&gt;#719&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;BLUEBIRD_DEBUG=0&lt;/code&gt; 환경 변수로 디버그 모드를 비활성화하면 이제 작동합니다 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/719&quot;&gt; &lt;code&gt;#719&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="4fb210408e569b091985d5b78da91e6fb86c36af" translate="yes" xml:space="preserve">
          <source>Doing &lt;code&gt;Promise.coroutine&lt;/code&gt; is almost like using the C# &lt;code&gt;async&lt;/code&gt; keyword to mark the function, with &lt;code&gt;yield&lt;/code&gt; working as the &lt;code&gt;await&lt;/code&gt; keyword. Promises are somewhat like &lt;code&gt;Task&lt;/code&gt;s.</source>
          <target state="translated">이렇게 &lt;code&gt;Promise.coroutine&lt;/code&gt; 은 거의 C #을 사용하여처럼 &lt;code&gt;async&lt;/code&gt; 로, 기능을 표시하는 키워드를 &lt;code&gt;yield&lt;/code&gt; 은 AS 작업 &lt;code&gt;await&lt;/code&gt; 를 키워드. 약속은 다소 &lt;code&gt;Task&lt;/code&gt; 과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="de4d2098f3299da1bd5b90b48c1359efb17e9c4c" translate="yes" xml:space="preserve">
          <source>Don't always use nextTick, but try to pick up setImmediate or setTimeout in NW. Fixes &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/534&quot;&gt;&lt;code&gt;#534&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/525&quot;&gt;&lt;code&gt;#525&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">항상 nextTick을 사용하지는 않지만 NW에서 setImmediate 또는 setTimeout을 선택하십시오. 수정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/534&quot;&gt; &lt;code&gt;#534&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/525&quot;&gt; &lt;code&gt;#525&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0b756e217bdb23753a766591f1961de5da4a16fd" translate="yes" xml:space="preserve">
          <source>Don't drop syntaxerror context from stack traces</source>
          <target state="translated">스택 추적에서 구문 오류 컨텍스트를 삭제하지 마십시오</target>
        </trans-unit>
        <trans-unit id="9321f1e45e110bffba03fa06904b8e36dfe7ef79" translate="yes" xml:space="preserve">
          <source>Don't try to detect if generators are available to allow shims to be used</source>
          <target state="translated">심을 사용할 수 있도록 발전기를 사용할 수 있는지 감지하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="594d05d724a6f103782570da71e2416ab4e93d03" translate="yes" xml:space="preserve">
          <source>Download &lt;a href=&quot;https://cdn.jsdelivr.net/bluebird/3.5.0/bluebird.js&quot;&gt;bluebird 3.5.0 (development)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://cdn.jsdelivr.net/bluebird/3.5.0/bluebird.js&quot;&gt;Bluebird 3.5.0 (개발)&lt;/a&gt; 다운로드</target>
        </trans-unit>
        <trans-unit id="58bfd4a73dc64b8f9f3ce7459309c4c1043e6d72" translate="yes" xml:space="preserve">
          <source>Download &lt;a href=&quot;https://cdn.jsdelivr.net/bluebird/3.5.0/bluebird.min.js&quot;&gt;bluebird 3.5.0 (production)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://cdn.jsdelivr.net/bluebird/3.5.0/bluebird.min.js&quot;&gt;블루 버드 3.5.0 (생산)&lt;/a&gt; 다운로드</target>
        </trans-unit>
        <trans-unit id="b7aa8fc2b045187319311a9394e7557bb7fc5487" translate="yes" xml:space="preserve">
          <source>Download &lt;a href=&quot;https://cdn.jsdelivr.net/npm/bluebird@3.7.2/js/browser/bluebird.js&quot;&gt;bluebird 3.7.2 (development)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://cdn.jsdelivr.net/npm/bluebird@3.7.2/js/browser/bluebird.js&quot;&gt;블루 버드 3.7.2&lt;/a&gt; 다운로드 (개발)</target>
        </trans-unit>
        <trans-unit id="b7e17d10be5eedbc88b9dd1cc890b2f864819536" translate="yes" xml:space="preserve">
          <source>Download &lt;a href=&quot;https://cdn.jsdelivr.net/npm/bluebird@3.7.2/js/browser/bluebird.min.js&quot;&gt;bluebird 3.7.2 (production)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://cdn.jsdelivr.net/npm/bluebird@3.7.2/js/browser/bluebird.min.js&quot;&gt;블루 버드 3.7.2 (프로덕션)&lt;/a&gt; 다운로드</target>
        </trans-unit>
        <trans-unit id="7b2a100c426d0ad66ea396f35d58b1ec140acb88" translate="yes" xml:space="preserve">
          <source>Due to a historic mistake in JavaScript, the &lt;code&gt;throw&lt;/code&gt; statement is allowed to be used with any value, not just errors, and Promises/A+ choosing to inherit this mistake, it is possible to reject a promise with a value that is not an error.</source>
          <target state="translated">JavaScript의 역사적인 실수로 인해 &lt;code&gt;throw&lt;/code&gt; 문은 오류뿐만 아니라 모든 값으로 사용될 수 있으며 Promises / A +는이 실수를 상속하기로 선택함으로써 오류가 아닌 값으로 약속을 거부 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="572ac38a1153d826d94329bc4a8349b70ab4728c" translate="yes" xml:space="preserve">
          <source>Dummy release to trigger CDN update.</source>
          <target state="translated">CDN 업데이트를 트리거하는 더미 릴리스.</target>
        </trans-unit>
        <trans-unit id="e559fb39f610a204cbea82d2ee3fbb56c53e7028" translate="yes" xml:space="preserve">
          <source>Enable process wide long stack traces through BLUEBIRD_DEBUG environment variable</source>
          <target state="translated">BLUEBIRD_DEBUG 환경 변수를 통해 프로세스 전체의 긴 스택 추적 사용</target>
        </trans-unit>
        <trans-unit id="1173b2e11bd16e5dc36c119a4b84f02be11626b5" translate="yes" xml:space="preserve">
          <source>Environment variables</source>
          <target state="translated">환경 변수</target>
        </trans-unit>
        <trans-unit id="1a7484261e136f513187639d59abfdc17b5b78c8" translate="yes" xml:space="preserve">
          <source>Environment variables supported by 2.x:</source>
          <target state="translated">2.x가 지원하는 환경 변수 :</target>
        </trans-unit>
        <trans-unit id="23a88125cafc15ec4a99faaf3c06e253bd2040e1" translate="yes" xml:space="preserve">
          <source>Environment variables supported by 3.x:</source>
          <target state="translated">3.x가 지원하는 환경 변수 :</target>
        </trans-unit>
        <trans-unit id="4afe9417121df8c24e8a691a35995c852b08c12a" translate="yes" xml:space="preserve">
          <source>Error Explanations</source>
          <target state="translated">오류 설명</target>
        </trans-unit>
        <trans-unit id="2426156fccf14118295eb7aebd2fb644bbffdc80" translate="yes" xml:space="preserve">
          <source>Error management configuration</source>
          <target state="translated">오류 관리 구성</target>
        </trans-unit>
        <trans-unit id="4c7be353f1a9c5c3942ca2a357ea00232c2aa06d" translate="yes" xml:space="preserve">
          <source>Error messages now have links to wiki pages for additional information</source>
          <target state="translated">오류 메시지에 추가 정보를위한 위키 페이지 링크가 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e095fbdb7d2ef438da9d4f6008c81610427b3e5" translate="yes" xml:space="preserve">
          <source>Error objects that have property &lt;code&gt;.isAsync = true&lt;/code&gt; will now be caught by &lt;code&gt;.error()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.isAsync = true&lt;/code&gt; 속성을 가진 오류 개체 는 이제 &lt;code&gt;.error()&lt;/code&gt; 의해 포착됩니다.</target>
        </trans-unit>
        <trans-unit id="5abfeb12ca3bc660aec6d34e0b22f1c6c78317ce" translate="yes" xml:space="preserve">
          <source>Error pattern matching</source>
          <target state="translated">오류 패턴 일치</target>
        </trans-unit>
        <trans-unit id="3cb8b8edd5a97e7dbc4d2546818597875c979c2e" translate="yes" xml:space="preserve">
          <source>Error: A value was yielded that could not be treated as a promise</source>
          <target state="translated">오류 : 약속으로 취급 할 수없는 값이 산출되었습니다</target>
        </trans-unit>
        <trans-unit id="619bace1dde9559833a0655ecec3205f7362a253" translate="yes" xml:space="preserve">
          <source>Error: Cannot promisify an API that has normal methods</source>
          <target state="translated">오류 : 일반적인 방법이있는 API를 약속 할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="79b5ede0cdf6284e4abfcefb594878077469426f" translate="yes" xml:space="preserve">
          <source>Error: Catch filter must inherit from Error or be a simple predicate function</source>
          <target state="translated">오류 : 캐치 필터는 Error에서 상속하거나 간단한 술어 함수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="696865b5a553ba3170942ec04c5f3dc42fa2d2e6" translate="yes" xml:space="preserve">
          <source>Error: No async scheduler available</source>
          <target state="translated">오류 : 사용 가능한 비동기 스케줄러가 없습니다.</target>
        </trans-unit>
        <trans-unit id="fc0ec2466a07b57135b31a73f712e1ed27ee4f41" translate="yes" xml:space="preserve">
          <source>Error: Promise.promisify called on an object</source>
          <target state="translated">오류 : Promise.promisify가 개체에서 호출되었습니다.</target>
        </trans-unit>
        <trans-unit id="a21053eb9c942ff093673beb9fb3e668aee8cee4" translate="yes" xml:space="preserve">
          <source>Error: cannot await properties of a non object</source>
          <target state="translated">오류 : 비 객체의 속성을 기다릴 수 없습니다</target>
        </trans-unit>
        <trans-unit id="f3e3d1ee7ee23e87c9183144756838723e5fda8c" translate="yes" xml:space="preserve">
          <source>Error: cannot await properties of a non-object</source>
          <target state="translated">오류 : 객체가 아닌 속성을 기다릴 수 없습니다</target>
        </trans-unit>
        <trans-unit id="89456e9bca724b697b99212b85ebb6f3219a7432" translate="yes" xml:space="preserve">
          <source>Error: cannot enable long stack traces after promises have been created</source>
          <target state="translated">오류 : 약속이 작성된 후 긴 스택 추적을 사용할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="40a14a45d1df054693ba6c618d9d769c6a07a8a2" translate="yes" xml:space="preserve">
          <source>Error: cannot get fulfillment value of a non-fulfilled promise</source>
          <target state="translated">오류 : 이행되지 않은 약속의 이행 가치를 얻을 수 없음</target>
        </trans-unit>
        <trans-unit id="42a2b6621c593d96e2c3414c920610e1086a3401" translate="yes" xml:space="preserve">
          <source>Error: cannot get rejection reason of a non-rejected promise</source>
          <target state="translated">오류 : 거부되지 않은 약속의 거부 이유를 알 수 없습니다</target>
        </trans-unit>
        <trans-unit id="644601415c1652bf7522056dd93ab3a936193c95" translate="yes" xml:space="preserve">
          <source>Error: circular promise resolution chain</source>
          <target state="translated">오류 : 순환 약속 해결 체인</target>
        </trans-unit>
        <trans-unit id="cfb3f532f3f071aeb3b8e0b1b3b9b15b26014c93" translate="yes" xml:space="preserve">
          <source>Error: expecting a positive integer</source>
          <target state="translated">오류 : 양의 정수를 기대 함</target>
        </trans-unit>
        <trans-unit id="5014bb734a5dc6def6300aef1fb64dd37130bc01" translate="yes" xml:space="preserve">
          <source>Error: expecting an array, a promise or a thenable</source>
          <target state="translated">오류 : 배열, 약속 또는 그때를 기대</target>
        </trans-unit>
        <trans-unit id="2e775c7c588224445a958243313cc45add1f3b75" translate="yes" xml:space="preserve">
          <source>Error: fn must be a function</source>
          <target state="translated">오류 : fn은 함수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="52ee49c044c4c9389df9607cb91ff31bfea49848" translate="yes" xml:space="preserve">
          <source>Error: generatorFunction must be a function</source>
          <target state="translated">오류 : generatorFunction은 함수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="cba7a4c58ea3fafef78f01712feeb384dc1a12b3" translate="yes" xml:space="preserve">
          <source>Error: the promise constructor cannot be invoked directly</source>
          <target state="translated">오류 : 약속 생성자를 직접 호출 할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="f1abcba86e72d5204a4126366af8b259948252ed" translate="yes" xml:space="preserve">
          <source>Error: the promise constructor requires a resolver function</source>
          <target state="translated">오류 : 약속 생성자에 리졸버 함수가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="cce7b00648e3b34c2b50f2457f1215dbcd16d700" translate="yes" xml:space="preserve">
          <source>Error: the target of promisifyAll must be an object or a function</source>
          <target state="translated">오류 : promisifyAll의 대상은 객체 또는 함수 여야합니다</target>
        </trans-unit>
        <trans-unit id="63d8dbb6fee1659c529d18597ae63ebda252d500" translate="yes" xml:space="preserve">
          <source>Errors created with &lt;a href=&quot;api/promise.reject&quot;&gt;&lt;code&gt;Promise.reject&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;reject&lt;/code&gt; callback of &lt;a href=&quot;api/new-promise&quot;&gt;&lt;code&gt;new Promise&lt;/code&gt;&lt;/a&gt; are no longer marked as &lt;a href=&quot;api/operationalerror&quot;&gt;&lt;code&gt;OperationalError&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">오류로 만든 &lt;a href=&quot;api/promise.reject&quot;&gt; &lt;code&gt;Promise.reject&lt;/code&gt; &lt;/a&gt; 또는 &lt;code&gt;reject&lt;/code&gt; 의 콜백 &lt;a href=&quot;api/new-promise&quot;&gt; &lt;code&gt;new Promise&lt;/code&gt; &lt;/a&gt; 더 이상으로 표시되지 않습니다 &lt;a href=&quot;api/operationalerror&quot;&gt; &lt;code&gt;OperationalError&lt;/code&gt; &lt;/a&gt; 의.</target>
        </trans-unit>
        <trans-unit id="cee6e4d3519b722033d396de4e1f74b1576c95d0" translate="yes" xml:space="preserve">
          <source>Essentially like &lt;code&gt;.then()&lt;/code&gt;, except that the value passed in is the value returned.</source>
          <target state="translated">전달 된 값이 반환 된 값이라는 점을 제외하면 기본적으로 &lt;code&gt;.then()&lt;/code&gt; 과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="f0988a3d3d1b3096a65cd04345120c513536956a" translate="yes" xml:space="preserve">
          <source>Even though in practice most users of promises will never have any need to take advantage of the fact that you can attach multiple consumers to a promise, it is nevertheless possible. The problem: &quot;what should happen if &lt;a href=&quot;cancel&quot;&gt;&lt;code&gt;.cancel()&lt;/code&gt;&lt;/a&gt; is called on &lt;code&gt;firstConsumer&lt;/code&gt;?&quot; Propagating the cancellation signal (and therefore making it abort the request) would be very bad as the second consumer might still be interested in the result despite the first consumer's disinterest.</source>
          <target state="translated">실제로 대부분의 약속 사용자는 약속에 여러 소비자를 연결할 수 있다는 사실을 활용할 필요가 없지만 그럼에도 불구하고 가능합니다. 문제 : &quot; &lt;a href=&quot;cancel&quot;&gt; &lt;code&gt;.cancel()&lt;/code&gt; &lt;/a&gt; 을 호출하면 &lt;code&gt;firstConsumer&lt;/code&gt; 됩니까?&quot; 두 번째 소비자가 첫 번째 소비자의 무관심에도 불구하고 여전히 결과에 관심을 가질 수 있기 때문에 취소 신호를 전파하여 요청을 중단시키는 것은 매우 나쁩니다.</target>
        </trans-unit>
        <trans-unit id="32136bb72e1249d96949c2dd36453f2f8e6448d0" translate="yes" xml:space="preserve">
          <source>Every implementation runs in a freshly created isolated process which is warmed up to the benchmark code before timing it. The memory column represents the highest snapshotted RSS memory (as reported by &lt;code&gt;process.memoryUsage().rss&lt;/code&gt;) during processing.</source>
          <target state="translated">모든 구현은 새로 생성 된 격리 된 프로세스에서 실행되며 타이밍을 설정하기 전에 벤치 마크 코드로 예열됩니다. 메모리 열은 처리 중 가장 높은 스냅 샷 RSS 메모리 ( &lt;code&gt;process.memoryUsage().rss&lt;/code&gt; 의해보고 된대로)를 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="cbd72c73197cf16b7be32f0420a4f9b8f2ec10c7" translate="yes" xml:space="preserve">
          <source>Example for filtering files that are accessible directories in the current directory:</source>
          <target state="translated">현재 디렉토리에서 액세스 가능한 디렉토리 인 파일을 필터링하는 예 :</target>
        </trans-unit>
        <trans-unit id="ea6867f8ed66a3cc67da9186e94b210d5b3e04f5" translate="yes" xml:space="preserve">
          <source>Example of promisifying the asynchronous &lt;code&gt;readFile&lt;/code&gt; of node.js &lt;code&gt;fs&lt;/code&gt;-module:</source>
          <target state="translated">node.js &lt;code&gt;fs&lt;/code&gt; -module의 비동기 &lt;code&gt;readFile&lt;/code&gt; 을 약속하는 예 :</target>
        </trans-unit>
        <trans-unit id="70828d496a9222d8799aa1dab9fd0db3038ac449" translate="yes" xml:space="preserve">
          <source>Example of using a predicate-based filter:</source>
          <target state="translated">술어 기반 필터 사용의 예 :</target>
        </trans-unit>
        <trans-unit id="7209f40c6421ebaa1c3b6e9186c7bf4b335728cc" translate="yes" xml:space="preserve">
          <source>Example where &lt;a href=&quot;mapseries&quot;&gt;&lt;code&gt;.mapSeries&lt;/code&gt;&lt;/a&gt;(the instance method) is used for iterating with side effects:</source>
          <target state="translated">예 &lt;a href=&quot;mapseries&quot;&gt; &lt;code&gt;.mapSeries&lt;/code&gt; &lt;/a&gt; (인스턴스 메소드) 부작용이 반복을 위해 사용된다 :</target>
        </trans-unit>
        <trans-unit id="8ed67236f56c7f2d41afa50d0f4ecc278a6d262e" translate="yes" xml:space="preserve">
          <source>Example where you might want to utilize &lt;code&gt;.each&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;.each&lt;/code&gt; 를 활용하려는 예 :</target>
        </trans-unit>
        <trans-unit id="6a3184621261489c06dfb13cc42dfb3beb2d0a7a" translate="yes" xml:space="preserve">
          <source>Example with a rejected promise in the array:</source>
          <target state="translated">거부 된 약속이 배열에있는 예 :</target>
        </trans-unit>
        <trans-unit id="f39a4a0b66a6a5895a4aa7ebdfab3e47750d8a8e" translate="yes" xml:space="preserve">
          <source>Example without using &lt;code&gt;Promise.method&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Promise.method&lt;/code&gt; 를 사용하지 않는 예 :</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="777613f9875d964d3262dfbe599abf766d39c21d" translate="yes" xml:space="preserve">
          <source>Exercises for the student</source>
          <target state="translated">학생을위한 연습</target>
        </trans-unit>
        <trans-unit id="3552717dc5df9427cceadb6f9f5287b684fbc8a8" translate="yes" xml:space="preserve">
          <source>Extend &lt;code&gt;Promise.try&lt;/code&gt; to accept arguments and ctx to make it more usable in promisification of synchronous functions.</source>
          <target state="translated">&lt;code&gt;Promise.try&lt;/code&gt; 를 확장 하여 인수와 ctx를 수락하여 동기 함수의 약속에 더 유용하게 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="274ec2aab6f4b2971ac92ec319fa57c6b4a756ee" translate="yes" xml:space="preserve">
          <source>Fail early when &lt;code&gt;new Promise&lt;/code&gt; is constructed incorrectly</source>
          <target state="translated">&lt;code&gt;new Promise&lt;/code&gt; 이 잘못 구축 되면 일찍 실패</target>
        </trans-unit>
        <trans-unit id="43c6cae9dfe0c772a80957e399c159e4e13cb1bc" translate="yes" xml:space="preserve">
          <source>Feature additions</source>
          <target state="translated">기능 추가</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">Features</target>
        </trans-unit>
        <trans-unit id="5df81ffa82179b458e1d55e350db9d88805a69b2" translate="yes" xml:space="preserve">
          <source>Features:</source>
          <target state="translated">Features:</target>
        </trans-unit>
        <trans-unit id="8ae77799c2deea283d58464345930b0132b3ffa3" translate="yes" xml:space="preserve">
          <source>Filter Option: concurrency</source>
          <target state="translated">필터 옵션 : 동시성</target>
        </trans-unit>
        <trans-unit id="be3be61cfc8f133e9d61bac5af70df59fb91f04c" translate="yes" xml:space="preserve">
          <source>Filtered &lt;code&gt;tapCatch&lt;/code&gt;</source>
          <target state="translated">필터링 된 &lt;code&gt;tapCatch&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="042cfd6eab24ee55952e3c098c0e3b4d36d1ca99" translate="yes" xml:space="preserve">
          <source>Filtered Catch</source>
          <target state="translated">필터링 된 캐치</target>
        </trans-unit>
        <trans-unit id="a8540f3afa3f7862cee52fd01843534113a0c6c4" translate="yes" xml:space="preserve">
          <source>First add the prompt dialog to the HTML:</source>
          <target state="translated">먼저 HTML에 프롬프트 대화 상자를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="920b3897d2db5c93f1af3838a6d9bb6917b7e807" translate="yes" xml:space="preserve">
          <source>First example is creating deferred object when you already have a promise or thenable:</source>
          <target state="translated">첫 번째 예는 이미 약속이 있거나 연기 가능할 때 지연된 오브젝트를 작성하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="8745f799fdac3bf5dafca4bdfd1218072fae48b1" translate="yes" xml:space="preserve">
          <source>First to make sure we're on the same page:</source>
          <target state="translated">먼저 동일한 페이지에 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="c78293f715fe27c2202c545605395274b073cdeb" translate="yes" xml:space="preserve">
          <source>Fix &quot;(node) warning: possible EventEmitter memory leak detected&quot; (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/661&quot;&gt;&lt;code&gt;#661&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&quot;(노드) 경고 : 가능한 EventEmitter 메모리 누수가 감지되었습니다&quot;( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/661&quot;&gt; &lt;code&gt;#661&lt;/code&gt; &lt;/a&gt; ) 수정.</target>
        </trans-unit>
        <trans-unit id="0ef0cd5305f2212b17a737f257c0fe8bc3ed864a" translate="yes" xml:space="preserve">
          <source>Fix &quot;unhandledrejection&quot; event not having .detail field when using DOM3 event listener api &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1209&quot;&gt;&lt;code&gt;#1209&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">DOM3 이벤트 리스너 API &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1209&quot;&gt; &lt;code&gt;#1209&lt;/code&gt; 를&lt;/a&gt; 사용할 때 &quot;unhandledrejection&quot;이벤트에 .detail 필드가없는 문제 수정</target>
        </trans-unit>
        <trans-unit id="d7003021bec312de015045b71d5917bd5f1bfc7f" translate="yes" xml:space="preserve">
          <source>Fix (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1613&quot;&gt;&lt;code&gt;#1613&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1613&quot;&gt; &lt;code&gt;#1613&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="b671ca67098aae22f7c4a139875ebc4e326eea2f" translate="yes" xml:space="preserve">
          <source>Fix (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1614&quot;&gt;&lt;code&gt;#1614&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1614&quot;&gt; &lt;code&gt;#1614&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="206ef6bba35c2bf35ff1938258ff5126d8c6d30a" translate="yes" xml:space="preserve">
          <source>Fix (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1616&quot;&gt;&lt;code&gt;#1616&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1616&quot;&gt; &lt;code&gt;#1616&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="1a56e5bbd4944d8821cc52b619ce74f27c4594af" translate="yes" xml:space="preserve">
          <source>Fix .cancel() not immediately marking a promise as being cancelled if it has cancellable parent (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1187&quot;&gt;&lt;code&gt;#1187&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">취소 할 수있는 부모가있는 약속을 취소 된 것으로 즉시 표시하지 않는 .cancel () 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1187&quot;&gt; &lt;code&gt;#1187&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="5753d0a18a1d76302da6bfc1ba66ad5fea54f2d4" translate="yes" xml:space="preserve">
          <source>Fix .each, .filter, .reduce and .map callbacks being called synchornously if the input is immediate. (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/513&quot;&gt;&lt;code&gt;#513&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">입력이 즉각적인 경우 .each, .filter, .reduce 및 .map 콜백이 동시에 호출되도록 수정하십시오. ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/513&quot;&gt; &lt;code&gt;#513&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="ca0aefaf6d54d6f4efac77005238cdbb7eae7945" translate="yes" xml:space="preserve">
          <source>Fix .finally passing the value to handlers</source>
          <target state="translated">.finally 값을 핸들러로 전달 수정</target>
        </trans-unit>
        <trans-unit id="ebb818de74996cb2282183b182584235286ee9ad" translate="yes" xml:space="preserve">
          <source>Fix .npmignore having irrelevant files</source>
          <target state="translated">관련없는 파일이있는 .npmignore 수정</target>
        </trans-unit>
        <trans-unit id="08c77e30147e67775fd7a283bf98eca4bd6d5d57" translate="yes" xml:space="preserve">
          <source>Fix .pending() call showing in long stack traces</source>
          <target state="translated">긴 스택 추적에서 .pending () 호출 표시 수정</target>
        </trans-unit>
        <trans-unit id="aeb406459615b46c7e3667ff8c81693de0a71e26" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;api/catch&quot;&gt;&lt;code&gt;.catch&lt;/code&gt;&lt;/a&gt; throwing an error later rather than immediately when passed non-function handler (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1517&quot;&gt;&lt;code&gt;#1517&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">비 함수 핸들러가 전달되었을 때 즉시가 아니라 나중에 오류를 던지는 &lt;a href=&quot;api/catch&quot;&gt; &lt;code&gt;.catch&lt;/code&gt; &lt;/a&gt; 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1517&quot;&gt; &lt;code&gt;#1517&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="bd9e8420b2aaa9d2f54b2072562754d6bdf49693" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;api/finally&quot;&gt;&lt;code&gt;.finally()&lt;/code&gt;&lt;/a&gt; handlers not being called when promise is cancelled while a domain is active (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/963&quot;&gt;&lt;code&gt;#963&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">도메인이 활성화되어있는 동안 약속이 취소 될 때 &lt;a href=&quot;api/finally&quot;&gt; &lt;code&gt;.finally()&lt;/code&gt; &lt;/a&gt; 핸들러가 호출되지 않는 문제 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/963&quot;&gt; &lt;code&gt;#963&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="4f4901c89a1a9c7dc1625ea84e15e21d33eee1cf" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;api/map&quot;&gt;&lt;code&gt;.map&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api/filter&quot;&gt;&lt;code&gt;.filter&lt;/code&gt;&lt;/a&gt; generating unhandled rejection events (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1487&quot;&gt;&lt;code&gt;#1487&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">처리되지 않은 거부 이벤트를 생성하는 &lt;a href=&quot;api/map&quot;&gt; &lt;code&gt;.map&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;api/filter&quot;&gt; &lt;code&gt;.filter&lt;/code&gt; &lt;/a&gt; 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1487&quot;&gt; &lt;code&gt;#1487&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="0046d101019a768ba7b6b55fa78f0315572e7b9c" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;api/promise.config&quot;&gt;&lt;code&gt;Promise.config()&lt;/code&gt;&lt;/a&gt; not disabling long stack traces when passing &lt;code&gt;longStackTraces: false&lt;/code&gt; (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/897&quot;&gt;&lt;code&gt;#897&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">수정 &lt;a href=&quot;api/promise.config&quot;&gt; &lt;code&gt;Promise.config()&lt;/code&gt; &lt;/a&gt; 통과 할 때 긴 스택 추적을 해제하지 &lt;code&gt;longStackTraces: false&lt;/code&gt; ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/897&quot;&gt; &lt;code&gt;#897&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="c2c54e994a866378a2dc0642ee4403e34197accf" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;api/promise.delay&quot;&gt;&lt;code&gt;Promise.delay&lt;/code&gt;&lt;/a&gt; not having a long stack trace (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1182&quot;&gt;&lt;code&gt;#1182&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;api/promise.delay&quot;&gt; &lt;code&gt;Promise.delay&lt;/code&gt; &lt;/a&gt; 에 긴 스택 추적이없는 문제 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1182&quot;&gt; &lt;code&gt;#1182&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="ac9cb5c773232e2f22a4171baf278c231663a089" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;api/promise.each&quot;&gt;&lt;code&gt;Promise.each&lt;/code&gt;&lt;/a&gt; maximum stack exceeded error (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1326&quot;&gt;&lt;code&gt;#1326&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;api/promise.each&quot;&gt; &lt;code&gt;Promise.each&lt;/code&gt; &lt;/a&gt; 최대 스택 초과 오류 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1326&quot;&gt; &lt;code&gt;#1326&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="9a4c6ea1404f5d14b0fc4eaa0935d60883a81b23" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;api/promise.join&quot;&gt;&lt;code&gt;Promise.join&lt;/code&gt;&lt;/a&gt; not ensuring asynchronous callback &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1153&quot;&gt;&lt;code&gt;#1153&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">비동기 콜백 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1153&quot;&gt; &lt;code&gt;#1153&lt;/code&gt; 을&lt;/a&gt; 보장하지 않는 &lt;a href=&quot;api/promise.join&quot;&gt; &lt;code&gt;Promise.join&lt;/code&gt; &lt;/a&gt; 수정</target>
        </trans-unit>
        <trans-unit id="84a0f8bdc33150ce00c67a495d0270e2e8440c1a" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;api/promise.join&quot;&gt;&lt;code&gt;Promise.join&lt;/code&gt;&lt;/a&gt; sometimes passing the passed in callback function as the last argument to itself.</source>
          <target state="translated">전달 된 콜백 함수를 마지막 인수로 전달하는 &lt;a href=&quot;api/promise.join&quot;&gt; &lt;code&gt;Promise.join&lt;/code&gt; 을&lt;/a&gt; 수정 했습니다 .</target>
        </trans-unit>
        <trans-unit id="db0a7afd5736698f5f0344e95be3e304894023d3" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;api/promise.map&quot;&gt;&lt;code&gt;Promise.map&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api/map&quot;&gt;&lt;code&gt;.map&lt;/code&gt;&lt;/a&gt; not always calling the callback asynchronously (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1148&quot;&gt;&lt;code&gt;#1148&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;api/promise.map&quot;&gt; &lt;code&gt;Promise.map&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;api/map&quot;&gt; &lt;code&gt;.map&lt;/code&gt; &lt;/a&gt; 이 항상 콜백을 비동기식으로 호출하지 않는 문제 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1148&quot;&gt; &lt;code&gt;#1148&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="aa113630728e39f238f12776d7bb0d87d2a542c3" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;api/promise.map&quot;&gt;&lt;code&gt;Promise.map&lt;/code&gt;&lt;/a&gt; unhandled rejection events (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1489&quot;&gt;&lt;code&gt;#1489&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;api/promise.map&quot;&gt; &lt;code&gt;Promise.map&lt;/code&gt; &lt;/a&gt; 처리되지 않은 거부 이벤트 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1489&quot;&gt; &lt;code&gt;#1489&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="1afc62e498017373b99bc8a94581684da180892b" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;api/promise.reduce&quot;&gt;&lt;code&gt;Promise.reduce&lt;/code&gt;&lt;/a&gt; generating unhandled rejction events (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1502&quot;&gt;&lt;code&gt;#1502&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">처리되지 않은 거부 이벤트를 생성하는 &lt;a href=&quot;api/promise.reduce&quot;&gt; &lt;code&gt;Promise.reduce&lt;/code&gt; &lt;/a&gt; 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1502&quot;&gt; &lt;code&gt;#1502&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="e878a09b2ae8a4110070fe574f0f87ffd478ebf8" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;api/reduce&quot;&gt;&lt;code&gt;.reduce&lt;/code&gt;&lt;/a&gt; generating unhandled rejection events (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1501&quot;&gt;&lt;code&gt;#1501&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">처리되지 않은 거부 이벤트를 생성하는 &lt;a href=&quot;api/reduce&quot;&gt; &lt;code&gt;.reduce&lt;/code&gt; &lt;/a&gt; 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1501&quot;&gt; &lt;code&gt;#1501&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="aaf3f41e6006ffc575b3bbca52a18b32a7819c23" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;api/return&quot;&gt;&lt;code&gt;.return()&lt;/code&gt;&lt;/a&gt; not supporting &lt;code&gt;undefined&lt;/code&gt; as return value &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/627&quot;&gt;&lt;code&gt;#627&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">반환 값 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/627&quot;&gt; &lt;code&gt;#627&lt;/code&gt; &lt;/a&gt; 로 &lt;code&gt;undefined&lt;/code&gt; 를 지원하지 않는 &lt;a href=&quot;api/return&quot;&gt; &lt;code&gt;.return()&lt;/code&gt; &lt;/a&gt; 수정</target>
        </trans-unit>
        <trans-unit id="3ce7112533ee446465d6c051131192b1a905b68f" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;api/timeout&quot;&gt;&lt;code&gt;.timeout()&lt;/code&gt;&lt;/a&gt; not calling &lt;code&gt;clearTimeout&lt;/code&gt; with the proper handle in node causing the process to wait for unneeded timeout. This was a regression introduced in 2.9.1.</source>
          <target state="translated">&lt;a href=&quot;api/timeout&quot;&gt; &lt;code&gt;.timeout()&lt;/code&gt; &lt;/a&gt; 이 프로세스가 불필요한 시간 종료를 기다리도록하는 노드의 적절한 핸들로 &lt;code&gt;clearTimeout&lt;/code&gt; 을 호출하지 않도록 수정 하십시오 . 이것은 2.9.1에서 소개 된 회귀입니다.</target>
        </trans-unit>
        <trans-unit id="a0c2274956fcb02813fa0cdca0d34b087a639ca7" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;api/timeout&quot;&gt;&lt;code&gt;.timeout()&lt;/code&gt;&lt;/a&gt; not cancelling parent (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/891&quot;&gt;&lt;code&gt;#891&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">부모를 취소하지 않는 &lt;a href=&quot;api/timeout&quot;&gt; &lt;code&gt;.timeout()&lt;/code&gt; &lt;/a&gt; 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/891&quot;&gt; &lt;code&gt;#891&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="3b27b0382d00b0ac99d9e96ff9e174024ee979bd" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;api/timeout&quot;&gt;&lt;code&gt;.timeout()&lt;/code&gt;&lt;/a&gt; trying to cancel a promise even if cancellation is disabled (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/970&quot;&gt;&lt;code&gt;#970&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">취소가 비활성화되어 있어도 약속을 취소하려고하는 &lt;a href=&quot;api/timeout&quot;&gt; &lt;code&gt;.timeout()&lt;/code&gt; &lt;/a&gt; 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/970&quot;&gt; &lt;code&gt;#970&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="4321293d7190c0df262d696a16ea033eebc32bfe" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/165&quot;&gt;#165&lt;/a&gt;</source>
          <target state="translated">수정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/165&quot;&gt;# 165&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="442e7e9a3e9af730f7cca4594b236f99b576de61" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/166&quot;&gt;#166&lt;/a&gt;</source>
          <target state="translated">수정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/166&quot;&gt;# 166&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="67c7acf40efcc5e81d1a0fd557d4a1f8945f9491" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/168&quot;&gt;#168&lt;/a&gt;</source>
          <target state="translated">수정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/168&quot;&gt;# 168&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="087246afe0330c08253eb6ddb69222566f6ab9ed" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/179&quot;&gt;#179&lt;/a&gt;</source>
          <target state="translated">수정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/179&quot;&gt;# 179&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="28bafb47c97e37dc910a1cc54c4163a2ec679ce5" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/232&quot;&gt;#232&lt;/a&gt;</source>
          <target state="translated">수정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/232&quot;&gt;# 232&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6456ee1486e8f98d3f479634d367177d179760d7" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/235&quot;&gt;#235&lt;/a&gt;</source>
          <target state="translated">수정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/235&quot;&gt;# 235&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="03ceeb0f8cacb6d4fa937f777aaf19cddfa84b11" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/259&quot;&gt;#259&lt;/a&gt;</source>
          <target state="translated">수정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/259&quot;&gt;# 259&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ae0fc853f15b3d341b64e83a5917cb7d13323b3a" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/276&quot;&gt;#276&lt;/a&gt;</source>
          <target state="translated">수정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/276&quot;&gt;# 276&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="439064aed0de04311b998fbdeccc14c1f69dd0b3" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/318&quot;&gt;#318&lt;/a&gt;, &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/#314&quot;&gt;#314&lt;/a&gt;</source>
          <target state="translated">수정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/318&quot;&gt;# 318&lt;/a&gt; , &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/#314&quot;&gt;# 314&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e87ba59c7c3e11063fc586e44fc16477ca19dc6d" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/359&quot;&gt;#359&lt;/a&gt;, &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/362&quot;&gt;#362&lt;/a&gt; and &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/364&quot;&gt;#364&lt;/a&gt;</source>
          <target state="translated">수정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/359&quot;&gt;# 359&lt;/a&gt; , &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/362&quot;&gt;# 362&lt;/a&gt; 및 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/364&quot;&gt;# 364&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d6137fb1a3f0c582ed315bdfddbb710c61a252ea" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/371&quot;&gt;#371&lt;/a&gt;, &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/373&quot;&gt;#373&lt;/a&gt;</source>
          <target state="translated">수정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/371&quot;&gt;# 371&lt;/a&gt; , &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/373&quot;&gt;# 373&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="109be1bca07e2fe9d05eb8ac5cb673cc911c9219" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/426&quot;&gt;#426&lt;/a&gt;</source>
          <target state="translated">수정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/426&quot;&gt;# 426&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d4e38f27f2fb0c45b0f8564249ca0708333f6362" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/429&quot;&gt;#429&lt;/a&gt;</source>
          <target state="translated">수정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/429&quot;&gt;# 429&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="26f3296d04e9f150e834af40df9dc5be3158f781" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/432&quot;&gt;#432&lt;/a&gt;</source>
          <target state="translated">수정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/432&quot;&gt;# 432&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4aa3a638b10fd3fb3f104a57104ae7c2a6f4b8de" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/433&quot;&gt;#433&lt;/a&gt;</source>
          <target state="translated">수정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/433&quot;&gt;# 433&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c59d9b5764e04400490f0eeab7624044acf334f5" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/447&quot;&gt;&lt;code&gt;#447&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">수정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/447&quot;&gt; &lt;code&gt;#447&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="48512ec3d48c193b330a45a0efed4845e91a693a" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/501&quot;&gt;&lt;code&gt;#501&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">수정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/501&quot;&gt; &lt;code&gt;#501&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7532386a737e8dc8f02078a018eaf5af45921d7c" translate="yes" xml:space="preserve">
          <source>Fix &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/503&quot;&gt;&lt;code&gt;#503&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">수정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/503&quot;&gt; &lt;code&gt;#503&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="810e8bd4ab6c1fdc86e861af10cbc622312835bc" translate="yes" xml:space="preserve">
          <source>Fix &lt;code&gt;.error()&lt;/code&gt; showing up in stack traces</source>
          <target state="translated">스택 추적에 &lt;code&gt;.error()&lt;/code&gt; 표시되는 문제 수정</target>
        </trans-unit>
        <trans-unit id="35ae4cfd42cadcf31304a1ea620e1e1871a0210b" translate="yes" xml:space="preserve">
          <source>Fix &lt;code&gt;.finally()&lt;/code&gt; not converting thenables returned from the handler to promises.</source>
          <target state="translated">처리기에서 반환 된 thenables를 promise로 변환하지 않는 &lt;code&gt;.finally()&lt;/code&gt; 수정 .</target>
        </trans-unit>
        <trans-unit id="eec40e9e8df0c1902b5c0b5be94192d263d4f9a6" translate="yes" xml:space="preserve">
          <source>Fix &lt;code&gt;.finally()&lt;/code&gt; rejecting if passed non-function. It will now ignore non-functions like &lt;code&gt;.then&lt;/code&gt;.</source>
          <target state="translated">비 기능으로 전달되면 &lt;code&gt;.finally()&lt;/code&gt; 거부 되도록 수정 하십시오 . 이제는 &lt;code&gt;.then&lt;/code&gt; 과 같은 비 기능을 무시 합니다.</target>
        </trans-unit>
        <trans-unit id="3032f18c8eec3ccbe6bebed81a1c7dc2e365b46f" translate="yes" xml:space="preserve">
          <source>Fix &lt;code&gt;.finally&lt;/code&gt; throwing null error when it is derived from a promise that is resolved with a promise that is resolved with a promise</source>
          <target state="translated">약속으로 해결 된 약속으로 해결 된 약속에서 파생 될 때 &lt;code&gt;.finally&lt;/code&gt; null 오류가 발생하는 문제 수정</target>
        </trans-unit>
        <trans-unit id="5a047d6c9273e907e42ab2228c4bb2482ff55f4e" translate="yes" xml:space="preserve">
          <source>Fix &lt;code&gt;.noConflict()&lt;/code&gt; call signature (&lt;a href=&quot;changelog&quot;&gt;#446&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;.noConflict()&lt;/code&gt; 호출 서명 수정 ( &lt;a href=&quot;changelog&quot;&gt;# 446&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="a4daef8a17cdc675d6700145302ce802114e3c05" translate="yes" xml:space="preserve">
          <source>Fix &lt;code&gt;.promisify&lt;/code&gt; crashing in phantom JS (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/556&quot;&gt;&lt;code&gt;#556&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">팬텀 JS에서 &lt;code&gt;.promisify&lt;/code&gt; 충돌 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/556&quot;&gt; &lt;code&gt;#556&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="bf4a501fcfc86e684888c130cda7ae038a32c40f" translate="yes" xml:space="preserve">
          <source>Fix &lt;code&gt;.race()&lt;/code&gt; not propagating bound values.</source>
          <target state="translated">바인딩 된 값을 전파하지 않는 &lt;code&gt;.race()&lt;/code&gt; 수정 .</target>
        </trans-unit>
        <trans-unit id="8f8e5957e01917a1355c4e6472b3488b7a625512" translate="yes" xml:space="preserve">
          <source>Fix &lt;code&gt;.return(primitiveValue)&lt;/code&gt; returning a wrapped version of the primitive value when a Node.js domain is active (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/689&quot;&gt;&lt;code&gt;#689&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Node.js 도메인이 활성화되어있을 때 &lt;code&gt;.return(primitiveValue)&lt;/code&gt; 이 래핑 된 프리미티브 값을 반환하도록 수정 했습니다 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/689&quot;&gt; &lt;code&gt;#689&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="358373d47937d7b24cf0fa4ac3dd0b2f405320e3" translate="yes" xml:space="preserve">
          <source>Fix &lt;code&gt;.some()&lt;/code&gt; when argument is a pending promise that later resolves to an array</source>
          <target state="translated">인수가 나중에 배열로 해석되는 보류중인 약속 인 경우 &lt;code&gt;.some()&lt;/code&gt; 수정</target>
        </trans-unit>
        <trans-unit id="84cdb17ff1583b270cef84fcc41fbefd70b6734a" translate="yes" xml:space="preserve">
          <source>Fix &lt;code&gt;.spread&lt;/code&gt; not unwrapping thenables</source>
          <target state="translated">&lt;code&gt;.spread&lt;/code&gt; 가 unwrapping thenables를 수정 하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="841a88b69ab5cc71c899c93268d314ff1e86fc07" translate="yes" xml:space="preserve">
          <source>Fix &lt;code&gt;Promise.map&lt;/code&gt; not unwrapping thenables</source>
          <target state="translated">&lt;code&gt;Promise.map&lt;/code&gt; 이 unwrapping thenables를 수정 하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="fe4b713df508137e26ada85c0234fb16e3a3add6" translate="yes" xml:space="preserve">
          <source>Fix &lt;code&gt;Promise.method&lt;/code&gt;ified functions being called with &lt;code&gt;undefined&lt;/code&gt; when they were called with no arguments</source>
          <target state="translated">&lt;code&gt;Promise.method&lt;/code&gt; ified 함수가 인수없이 호출 될 때 &lt;code&gt;undefined&lt;/code&gt; 상태 로 호출되는 문제 수정</target>
        </trans-unit>
        <trans-unit id="d452fc4e6531c10d96978535a3c59d22e539c8b6" translate="yes" xml:space="preserve">
          <source>Fix &lt;code&gt;Promise.some&lt;/code&gt; behavior with arguments like negative integers, 0...</source>
          <target state="translated">음의 정수, 0과 같은 인수로 &lt;code&gt;Promise.some&lt;/code&gt; 동작을 수정 하십시오 ...</target>
        </trans-unit>
        <trans-unit id="e61d7425a358fbc58ab26a65908f3f95ac6f3548" translate="yes" xml:space="preserve">
          <source>Fix &lt;code&gt;PromiseRejectionEvent&lt;/code&gt; to contain &lt;code&gt;.reason&lt;/code&gt; and &lt;code&gt;.promise&lt;/code&gt; properties. (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1509&quot;&gt;&lt;code&gt;#1509&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1464&quot;&gt;&lt;code&gt;#1464&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;.reason&lt;/code&gt; 및 &lt;code&gt;.promise&lt;/code&gt; 속성 을 포함 하도록 &lt;code&gt;PromiseRejectionEvent&lt;/code&gt; 를 수정 합니다. ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1509&quot;&gt; &lt;code&gt;#1509&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1464&quot;&gt; &lt;code&gt;#1464&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="9f95ce0ba2f5d9556514c7095095e7f292e3b63d" translate="yes" xml:space="preserve">
          <source>Fix &lt;code&gt;TypeError: Cannot assign to read only property 'length'&lt;/code&gt; when jsdom has declared a read-only length for all objects to inherit.</source>
          <target state="translated">수정 &lt;code&gt;TypeError: Cannot assign to read only property 'length'&lt;/code&gt; jsdom이 모든 객체가 상속 할 읽기 전용 길이를 선언하면 속성 'length'를 읽기 전용으로 할당 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="2a168ccc97c221536af9d26420aa5302d7727e3b" translate="yes" xml:space="preserve">
          <source>Fix &lt;code&gt;captureStackTrace&lt;/code&gt; being called when it was &lt;code&gt;null&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;captureStackTrace&lt;/code&gt; 가 &lt;code&gt;null&lt;/code&gt; 일 때 호출되는 문제 수정</target>
        </trans-unit>
        <trans-unit id="1c0220cbe1b2fdecdd91d571d762d013734ae2ac" translate="yes" xml:space="preserve">
          <source>Fix &lt;code&gt;process.nextTick&lt;/code&gt; being used over &lt;code&gt;setImmediate&lt;/code&gt; in node.</source>
          <target state="translated">&lt;code&gt;setImmediate&lt;/code&gt; 에서 &lt;code&gt;process.nextTick&lt;/code&gt; 을 사용하도록 수정했습니다 .</target>
        </trans-unit>
        <trans-unit id="b241192b19e2f8e3aa65bd76e11722a07cdbcec3" translate="yes" xml:space="preserve">
          <source>Fix &lt;code&gt;promisify&lt;/code&gt; not retaining custom properties of the function. This enables promisifying the &lt;code&gt;&quot;request&quot;&lt;/code&gt; module's export function and its methods at the same time.</source>
          <target state="translated">함수의 사용자 정의 속성을 유지하지 &lt;code&gt;promisify&lt;/code&gt; 수정 하십시오. 이것은 &lt;code&gt;&quot;request&quot;&lt;/code&gt; 모듈의 내보내기 기능과 그 방법을 동시에 약속합니다 .</target>
        </trans-unit>
        <trans-unit id="4c9c75aad6e58a687a4661dfe2fc549ec6cfd2aa" translate="yes" xml:space="preserve">
          <source>Fix &lt;code&gt;promisifyAll&lt;/code&gt; methods being dependent on &lt;code&gt;this&lt;/code&gt; when they are not originally dependent on &lt;code&gt;this&lt;/code&gt;. This enables e.g. passing promisified &lt;code&gt;fs&lt;/code&gt; functions directly as callbacks without having to bind them to &lt;code&gt;fs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;promisifyAll&lt;/code&gt; 메소드가 원래 이것에 의존하지 않을 때 &lt;code&gt;this&lt;/code&gt; 에 의존하는 문제를 해결 &lt;code&gt;this&lt;/code&gt; . 이를 통해 예를 들어 약속 된 &lt;code&gt;fs&lt;/code&gt; 함수를 &lt;code&gt;fs&lt;/code&gt; 에 바인딩하지 않고도 콜백으로 직접 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e2fbf07228a7978e0368608c9f2e4016286597ba" translate="yes" xml:space="preserve">
          <source>Fix &lt;code&gt;sinon.useFakeTimers()&lt;/code&gt; breaking scheduler (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/631&quot;&gt;&lt;code&gt;#631&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;sinon.useFakeTimers()&lt;/code&gt; 차단 스케줄러 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/631&quot;&gt; &lt;code&gt;#631&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="7c52373b732142482a037770970a0577fa555ed1" translate="yes" xml:space="preserve">
          <source>Fix AMD-declaration using named module.</source>
          <target state="translated">명명 된 모듈을 사용하여 AMD 선언을 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="a0191642454c21e5be60998e415104d9a666ba0e" translate="yes" xml:space="preserve">
          <source>Fix Chrome DevTools async stack traceability (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/542&quot;&gt;&lt;code&gt;#542&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Chrome DevTools 비동기 스택 추적 성을 수정합니다 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/542&quot;&gt; &lt;code&gt;#542&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="b7dcd01aacce051e5c5b033264218469121cc13c" translate="yes" xml:space="preserve">
          <source>Fix Promise.resolve is not a function error (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1192&quot;&gt;&lt;code&gt;#1192&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">Promise.resolve가 함수 오류가 아님 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1192&quot;&gt; &lt;code&gt;#1192&lt;/code&gt; &lt;/a&gt; ) 수정</target>
        </trans-unit>
        <trans-unit id="7ea00db1bcd118870ebcfc54289f771aa2061897" translate="yes" xml:space="preserve">
          <source>Fix PromiseArray and its sub-classes swallowing possibly unhandled rejections</source>
          <target state="translated">처리 할 수없는 거부를 삼키는 PromiseArray 및 해당 하위 클래스 수정</target>
        </trans-unit>
        <trans-unit id="9e8a0c65db407408b4249f6a319efa228e4ded70" translate="yes" xml:space="preserve">
          <source>Fix Promises/A+ compliance issue regarding circular thenables: the correct behavior is to go into an infinite loop instead of warning with an error (Fixes &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/682&quot;&gt;&lt;code&gt;#682&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">순환 형 회전 가능 항목에 대한 약속 / A + 준수 문제 수정 : 올바른 동작은 오류 경고 (고정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/682&quot;&gt; &lt;code&gt;#682&lt;/code&gt; &lt;/a&gt; ) 대신 무한 루프에 들어가는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="650c312b4309543a975593bcdbc042fcd8b8500c" translate="yes" xml:space="preserve">
          <source>Fix TypeError and RangeError shims not working without &lt;code&gt;new&lt;/code&gt; operator</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 연산자 없이 TypeError 및 RangeError shim이 작동하지 않는 문제 수정</target>
        </trans-unit>
        <trans-unit id="a6c77a9d113a33adf2ebfaf1699d9161a9b8185d" translate="yes" xml:space="preserve">
          <source>Fix a bug where .reduce calls the callback for an already visited item</source>
          <target state="translated">.reduce가 이미 방문한 항목에 대한 콜백을 호출하는 버그 수정</target>
        </trans-unit>
        <trans-unit id="1209eeffbd5e8f5c43ecbe2665cbc8a2a940b112" translate="yes" xml:space="preserve">
          <source>Fix a bug where stack trace limit is calculated to be too small, which resulted in too short stack traces</source>
          <target state="translated">스택 추적 한계가 너무 작게 계산되어 스택 추적이 너무 짧은 버그를 수정합니다.</target>
        </trans-unit>
        <trans-unit id="df8b4c25c0fb6faed2ac2f3bd0daf2b562547c84" translate="yes" xml:space="preserve">
          <source>Fix a file missing from build. (Critical fix)</source>
          <target state="translated">빌드에서 누락 된 파일을 수정하십시오. (중요 수정)</target>
        </trans-unit>
        <trans-unit id="25d2c4300b5829d589dfa63c88972d2f42b14073" translate="yes" xml:space="preserve">
          <source>Fix active domain being lost across asynchronous boundaries in Node.JS 10.xx</source>
          <target state="translated">Node.JS 10.xx의 비동기 경계에서 활성 도메인이 손실되는 문제 수정</target>
        </trans-unit>
        <trans-unit id="d1f73493e0f50316d0347de135483d29b2e0e701" translate="yes" xml:space="preserve">
          <source>Fix already rejected promises being reported as unhandled when handled through collection methods</source>
          <target state="translated">수집 방법을 통해 처리 할 때 이미 거부 된 약속이 처리되지 않은 것으로보고 수정</target>
        </trans-unit>
        <trans-unit id="98560c1914c66b0c14e1516a26075672ff237452" translate="yes" xml:space="preserve">
          <source>Fix another bug with progression.</source>
          <target state="translated">진행중인 다른 버그를 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="bad73c685ce87c86ab409b920d24a6b5965ed26f" translate="yes" xml:space="preserve">
          <source>Fix benchmark parallel in node 6 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1165&quot;&gt;&lt;code&gt;#1165&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">노드 6 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1165&quot;&gt; &lt;code&gt;#1165&lt;/code&gt; &lt;/a&gt; 에서 벤치 마크 병렬 수정</target>
        </trans-unit>
        <trans-unit id="b186170e04db2f457202dc9c718f0152b5124e6b" translate="yes" xml:space="preserve">
          <source>Fix broken npm prepublish script release</source>
          <target state="translated">깨진 npm 사전 게시 스크립트 릴리스 수정</target>
        </trans-unit>
        <trans-unit id="936b828ce609331c229fda70cd7f9b02aff82820" translate="yes" xml:space="preserve">
          <source>Fix browserisfy crashing from checking &lt;code&gt;process.version.indexOf&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;process.version.indexOf&lt;/code&gt; 확인으로 인해 브라우저가 다운되는 문제 수정</target>
        </trans-unit>
        <trans-unit id="fd63cca55c9798284fb8146dbd6a77b3228d41e4" translate="yes" xml:space="preserve">
          <source>Fix bug where already resolved promise gets attached more handlers while calling its handlers resulting in some handlers not being called</source>
          <target state="translated">이미 처리 된 약속이 처리기를 호출하는 동안 처리기가 더 연결되어 일부 처리기가 호출되지 않는 버그를 수정합니다.</target>
        </trans-unit>
        <trans-unit id="a97f0fd8349051b550b9c1a10903b096114e77c0" translate="yes" xml:space="preserve">
          <source>Fix bug where assimilating thenable throws unexpectedly when using hostile host objects as thenables (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1104&quot;&gt;&lt;code&gt;#1104&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">적대적인 호스트 객체를 thenables ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1104&quot;&gt; &lt;code&gt;#1104&lt;/code&gt; &lt;/a&gt; ) 로 사용할 때 예기치 않게 동화 가능한 객체가 발생하는 버그를 수정했습니다 .</target>
        </trans-unit>
        <trans-unit id="b1f33a5c349a38a68985c16d12f63030ff1fdaba" translate="yes" xml:space="preserve">
          <source>Fix bug where callback to &lt;a href=&quot;api/disposer&quot;&gt;&lt;code&gt;.disposer&lt;/code&gt;&lt;/a&gt; is not called if the resource is &lt;code&gt;null&lt;/code&gt; (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1099&quot;&gt;&lt;code&gt;#1099&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">리소스가 &lt;code&gt;null&lt;/code&gt; 인 경우 &lt;a href=&quot;api/disposer&quot;&gt; &lt;code&gt;.disposer&lt;/code&gt; &lt;/a&gt; 에 대한 콜백 이 호출되지 않는 버그를 수정합니다 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1099&quot;&gt; &lt;code&gt;#1099&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="26c29f4a5a5bc87a2a41cd3ce516078859ced589" translate="yes" xml:space="preserve">
          <source>Fix bug where spread rejected handler is ignored in case of rejection</source>
          <target state="translated">거부시 스프레드 거부 처리기가 무시되는 버그 수정</target>
        </trans-unit>
        <trans-unit id="eb41bc5e069b12ac4a1d47b5c02e9911b68add67" translate="yes" xml:space="preserve">
          <source>Fix bug where then handlers are not called in the same order as they would run if Promises/A+ 2.3.2 was implemented as adoption</source>
          <target state="translated">Promises / A + 2.3.2가 채택으로 구현 된 경우 처리기와 동일한 순서로 핸들러가 호출되지 않는 버그 수정</target>
        </trans-unit>
        <trans-unit id="4aa11ab5140d3d07fa98b295c48a4e32f6e24a43" translate="yes" xml:space="preserve">
          <source>Fix bug where using &lt;code&gt;Object.create(null)&lt;/code&gt; as a rejection reason would crash bluebird</source>
          <target state="translated">거부 사유로 &lt;code&gt;Object.create(null)&lt;/code&gt; 를 사용하면 블루 버드가 충돌하는 버그 수정</target>
        </trans-unit>
        <trans-unit id="4756836a98f01ee002ba80ca433bb29a4209475b" translate="yes" xml:space="preserve">
          <source>Fix bug with .some returning garbage when sparse arrays have rejections</source>
          <target state="translated">희소 배열에 거부가있을 때 .some가 쓰레기를 반환하는 버그 수정</target>
        </trans-unit>
        <trans-unit id="fee3d0f6c2e79086f71343624f13895623e0043e" translate="yes" xml:space="preserve">
          <source>Fix bug with &lt;code&gt;Promise.delay&lt;/code&gt; never resolving if the value is a promise that is resolved with another promise</source>
          <target state="translated">값이 다른 약속으로 해결되는 약속 인 경우 &lt;code&gt;Promise.delay&lt;/code&gt; 로 해결되지 않는 버그 수정</target>
        </trans-unit>
        <trans-unit id="7de2de71166f03f8fda987882e0940a30deee915" translate="yes" xml:space="preserve">
          <source>Fix bug with &lt;code&gt;Promise.method&lt;/code&gt; wrapped function returning a promise that never resolves if the function returns a promise that is resolved with another promise</source>
          <target state="translated">함수가 다른 약속으로 해결 된 약속을 반환하는 경우 절대로 해결되지 않는 약속을 반환하는 &lt;code&gt;Promise.method&lt;/code&gt; 랩핑 함수로 버그 수정</target>
        </trans-unit>
        <trans-unit id="509dbbc35ac726a4188eaeb9b568c10135181727" translate="yes" xml:space="preserve">
          <source>Fix bug with &lt;code&gt;Promise.try&lt;/code&gt; not unwrapping returned promises and thenables</source>
          <target state="translated">&lt;code&gt;Promise.try&lt;/code&gt; 로 반환 된 약속 및 thenables 를 풀지 않는 버그 수정</target>
        </trans-unit>
        <trans-unit id="94708af9d81c3fe964de85bdde1e3101586049cc" translate="yes" xml:space="preserve">
          <source>Fix bug with build files containing duplicated code for promise.js</source>
          <target state="translated">promise.js에 대한 중복 코드가 포함 된 빌드 파일 관련 버그 수정</target>
        </trans-unit>
        <trans-unit id="9ede090877997ba4c9f17a458b66a751e29633ef" translate="yes" xml:space="preserve">
          <source>Fix bug with progression.</source>
          <target state="translated">진행 버그 수정.</target>
        </trans-unit>
        <trans-unit id="19d2943bb4398e8b7ca1a5d736b94ab819cba39f" translate="yes" xml:space="preserve">
          <source>Fix bug with unhandled rejections not being reported when using &lt;code&gt;Promise.try&lt;/code&gt; or &lt;code&gt;Promise.method&lt;/code&gt; without attaching further handlers</source>
          <target state="translated">추가 처리기를 연결하지 않고 &lt;code&gt;Promise.try&lt;/code&gt; 또는 &lt;code&gt;Promise.method&lt;/code&gt; 를 사용할 때 처리되지 않은 거부가보고되지 않는 버그 수정</target>
        </trans-unit>
        <trans-unit id="7d53b8d2902e7da120c4caba9593553f0bba3ff6" translate="yes" xml:space="preserve">
          <source>Fix callbacks sometimes being called with a wrong node.js domain (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/664&quot;&gt;&lt;code&gt;#664&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">콜백이 때때로 잘못된 node.js 도메인 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/664&quot;&gt; &lt;code&gt;#664&lt;/code&gt; &lt;/a&gt; ) 으로 호출되는 문제를 해결 합니다.</target>
        </trans-unit>
        <trans-unit id="20a9a587f9efbfe3b1342b71c2172eaec207c5e2" translate="yes" xml:space="preserve">
          <source>Fix callbacks sometimes not being called at all in iOS 8.1 WebApp mode (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/666&quot;&gt;&lt;code&gt;#666&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/687&quot;&gt;&lt;code&gt;#687&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">iOS 8.1 WebApp 모드 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/666&quot;&gt; &lt;code&gt;#666&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/687&quot;&gt; &lt;code&gt;#687&lt;/code&gt; &lt;/a&gt; ) 에서 콜백이 전혀 호출되지 않는 문제 수정 .</target>
        </trans-unit>
        <trans-unit id="d3c71824168d1068b018dbd15ddad046621f1bcd" translate="yes" xml:space="preserve">
          <source>Fix cancel skipping upward propagation (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1459&quot;&gt;&lt;code&gt;#1459&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">상향 전파를 건너 뛰는 취소 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1459&quot;&gt; &lt;code&gt;#1459&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="c00a66cb5a3ee2ad463466dc2dd71fbcfea04ff7" translate="yes" xml:space="preserve">
          <source>Fix crash in NW &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/624&quot;&gt;&lt;code&gt;#624&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">NW &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/624&quot;&gt; &lt;code&gt;#624&lt;/code&gt; 의&lt;/a&gt; 충돌 수정</target>
        </trans-unit>
        <trans-unit id="cd1327de33a10d0cfa1315cb324c645a361ec6a9" translate="yes" xml:space="preserve">
          <source>Fix crash in node 0.8</source>
          <target state="translated">노드 0.8의 충돌 수정</target>
        </trans-unit>
        <trans-unit id="de921dcdbebd7abf0c5ad9f6e436a8ffa44a7b9a" translate="yes" xml:space="preserve">
          <source>Fix crash when cancelling a &lt;a href=&quot;api/tap&quot;&gt;&lt;code&gt;.tap()&lt;/code&gt;&lt;/a&gt; handler promise (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1006&quot;&gt;&lt;code&gt;#1006&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;api/tap&quot;&gt; &lt;code&gt;.tap()&lt;/code&gt; &lt;/a&gt; 핸들러 약속 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1006&quot;&gt; &lt;code&gt;#1006&lt;/code&gt; &lt;/a&gt; )을 취소 할 때의 크래시를 수정했습니다 .</target>
        </trans-unit>
        <trans-unit id="8f3b7f7cddea3a4e687f4464e1be6b393852360e" translate="yes" xml:space="preserve">
          <source>Fix crash when using node.js domains &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/829&quot;&gt;&lt;code&gt;#829&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">node.js 도메인을 사용할 때의 크래시 수정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/829&quot;&gt; &lt;code&gt;#829&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="71aa5c831255de0200297a438951f579475f68dc" translate="yes" xml:space="preserve">
          <source>Fix crashing in Chrome when long stack traces are disabled</source>
          <target state="translated">긴 스택 추적이 비활성화 된 경우 Chrome에서 충돌이 발생하는 문제 수정</target>
        </trans-unit>
        <trans-unit id="af645135b7bdde674c565ed1f889aa16c31b1810" translate="yes" xml:space="preserve">
          <source>Fix critical bug regarding to using promisifyAll in browser that was introduced in 2.9.0 (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/466&quot;&gt;#466&lt;/a&gt;).</source>
          <target state="translated">2.9.0 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/466&quot;&gt;# 466&lt;/a&gt; ) 에서 도입 된 브라우저에서 promisifyAll 사용과 관련된 중요한 버그를 수정 합니다.</target>
        </trans-unit>
        <trans-unit id="cb7e45dd423a5d3eeba40282e46d9154bfd1399f" translate="yes" xml:space="preserve">
          <source>Fix critical bug with collection methods.</source>
          <target state="translated">수집 방법으로 치명적인 버그 수정.</target>
        </trans-unit>
        <trans-unit id="adca0bbf0aba0b97f6ad2dad01d53fa8dfea31e6" translate="yes" xml:space="preserve">
          <source>Fix custom scheduler not being called in Google Chrome when long stack traces are enabled (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/650&quot;&gt;&lt;code&gt;#650&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">긴 스택 추적이 활성화 된 경우 Chrome에서 사용자 정의 스케줄러가 호출되지 않는 문제 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/650&quot;&gt; &lt;code&gt;#650&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="a1b05209d738e6683c2970028d047a0df64463c9" translate="yes" xml:space="preserve">
          <source>Fix custom schedulers not being called when using promisified functions (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1023&quot;&gt;&lt;code&gt;#1023&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">약속 된 기능 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1023&quot;&gt; &lt;code&gt;#1023&lt;/code&gt; &lt;/a&gt; )을 사용할 때 사용자 정의 스케줄러가 호출되지 않도록 수정 합니다.</target>
        </trans-unit>
        <trans-unit id="1b164b3af6d89e1476a588733ac9fed3e43dcffd" translate="yes" xml:space="preserve">
          <source>Fix domains leaking when synchronous error is thrown while a domain is active &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1125&quot;&gt;&lt;code&gt;#1125&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">도메인이 활성화 된 상태에서 동기 오류가 발생했을 때 도메인이 새는 문제 수정 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1125&quot;&gt; &lt;code&gt;#1125&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d62c1d556440bbe104f5338b1e69a3093af0d645" translate="yes" xml:space="preserve">
          <source>Fix environment variables sometimes causing long stack traces to be enabled</source>
          <target state="translated">때때로 긴 스택 추적을 활성화하는 환경 변수 수정</target>
        </trans-unit>
        <trans-unit id="2e596baf409644e5123176a21b1692b9d353cc6f" translate="yes" xml:space="preserve">
          <source>Fix error &quot;Cannot promisify an API that has normal methods with 'Async'-suffix&quot; when promisifying certain objects with a custom promisifier</source>
          <target state="translated">사용자 지정 Promisifier로 특정 개체를 약속 할 때 &quot; 'Async'-suffix로 일반적인 메서드가있는 API를 약속 할 수 없음&quot;오류 수정</target>
        </trans-unit>
        <trans-unit id="2bdd8fc9d690db121bc14ff756c72c2d26787481" translate="yes" xml:space="preserve">
          <source>Fix error in IE9 (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1591&quot;&gt;&lt;code&gt;#1591&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1592&quot;&gt;&lt;code&gt;#1592&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">IE9에서 오류 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1591&quot;&gt; &lt;code&gt;#1591&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1592&quot;&gt; &lt;code&gt;#1592&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="aeacd255fd34fd7597ba80b9661de967d9c327e0" translate="yes" xml:space="preserve">
          <source>Fix error object's &lt;code&gt;'stack'&lt;/code&gt;' overwriting causing an error when its defined to be a setter that throws an error (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/552&quot;&gt;&lt;code&gt;#552&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">오류 개체의 &lt;code&gt;'stack'&lt;/code&gt; '덮어 쓰기를 수정 하여 오류를 발생시키는 세터로 정의 될 때 오류가 발생하도록 수정 했습니다 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/552&quot;&gt; &lt;code&gt;#552&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="320e84b16b8d9c3f52b1e229165964b6eee387d9" translate="yes" xml:space="preserve">
          <source>Fix error with undefined stack trace (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1537&quot;&gt;&lt;code&gt;#1537&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">정의되지 않은 스택 추적으로 오류 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1537&quot;&gt; &lt;code&gt;#1537&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="67e2e2d1ecee56cf98bb55d41440d07b747d4087" translate="yes" xml:space="preserve">
          <source>Fix false positive unhandled rejection when using async await (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1404&quot;&gt;&lt;code&gt;#1404&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">비동기 대기 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1404&quot;&gt; &lt;code&gt;#1404&lt;/code&gt; &lt;/a&gt; )를 사용할 때 잘못된 긍정 처리되지 않은 거부 수정</target>
        </trans-unit>
        <trans-unit id="8f7cbf6a3add1a688126ed9c0073305f8117255a" translate="yes" xml:space="preserve">
          <source>Fix false positive when reporting error as non-error (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/990&quot;&gt;&lt;code&gt;#990&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">오류를 오류가 아닌 것으로보고 할 때 잘못된 긍정 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/990&quot;&gt; &lt;code&gt;#990&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="5d2dceeadd185247e49226b80638c41d9be397af" translate="yes" xml:space="preserve">
          <source>Fix false unhandled rejection events (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1468&quot;&gt;&lt;code&gt;#1468&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">잘못된 처리되지 않은 거부 이벤트 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1468&quot;&gt; &lt;code&gt;#1468&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="f864e2c0eca89800fbd72d71ad69beca1c459237" translate="yes" xml:space="preserve">
          <source>Fix false unhandled rejection when a rejected promise originating from one copy of bluebird is passed to another copy's &lt;a href=&quot;api/return&quot;&gt;&lt;code&gt;.return&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;api/catchreturn&quot;&gt;&lt;code&gt;.catchReturn&lt;/code&gt;&lt;/a&gt; (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1186&quot;&gt;&lt;code&gt;#1186&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">한 블루 버드 사본에서 발생하는 거부 된 약속이 다른 사본의 &lt;a href=&quot;api/return&quot;&gt; &lt;code&gt;.return&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;api/catchreturn&quot;&gt; &lt;code&gt;.catchReturn&lt;/code&gt; &lt;/a&gt; ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1186&quot;&gt; &lt;code&gt;#1186&lt;/code&gt; &lt;/a&gt; )으로 전달 될 때 처리되지 않은 허위 거부 문제를 해결합니다.</target>
        </trans-unit>
        <trans-unit id="ec2e66ef4369422dc601df540970212321e836a4" translate="yes" xml:space="preserve">
          <source>Fix generators crashing in node 0.12 (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/978&quot;&gt;&lt;code&gt;#978&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">노드 0.12에서 크래시 발생기 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/978&quot;&gt; &lt;code&gt;#978&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="7a4bbfeb0693c84d6ace1fe661d8defb065d5729" translate="yes" xml:space="preserve">
          <source>Fix global events not being fired through DOM 3 API inside a worker (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1190&quot;&gt;&lt;code&gt;#1190&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">작업자 내부의 DOM 3 API를 통해 글로벌 이벤트가 발생하지 않는 문제 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1190&quot;&gt; &lt;code&gt;#1190&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="a06078221798648e2c284b100b4ce5001b866f52" translate="yes" xml:space="preserve">
          <source>Fix handled errors being reported</source>
          <target state="translated">처리 된 오류보고</target>
        </trans-unit>
        <trans-unit id="a95da9904cebe607df8b6f6098efd7b322efbe25" translate="yes" xml:space="preserve">
          <source>Fix handled rejection being reported as unhandled in certain scenarios when using &lt;a href=&quot;api/all&quot;&gt;&lt;code&gt;.all&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;api/promise.join&quot;&gt;&lt;code&gt;Promise.join&lt;/code&gt;&lt;/a&gt; (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/645&quot;&gt;&lt;code&gt;#645&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;api/all&quot;&gt; &lt;code&gt;.all&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;api/promise.join&quot;&gt; &lt;code&gt;Promise.join&lt;/code&gt; &lt;/a&gt; ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/645&quot;&gt; &lt;code&gt;#645&lt;/code&gt; &lt;/a&gt; )을 사용할 때 특정 시나리오에서 처리 거부가 처리되지 않은 것으로보고 수정</target>
        </trans-unit>
        <trans-unit id="392c2d5ccc712dd9ee0a7850b3936095066558ad" translate="yes" xml:space="preserve">
          <source>Fix infinite loop when thenable resolves with itself</source>
          <target state="translated">그때 스스로 해결할 수있을 때 무한 루프 수정</target>
        </trans-unit>
        <trans-unit id="522f7b83886e117d5bac670d0559901762ef8c01" translate="yes" xml:space="preserve">
          <source>Fix issue when promisifying methods whose names contain the string 'args'</source>
          <target state="translated">이름에 문자열 'args'가 포함 된 방법을 약속 할 때 발생하는 문제 수정</target>
        </trans-unit>
        <trans-unit id="05adc1a0f467b33da2c2ae19bec894827b1f4e13" translate="yes" xml:space="preserve">
          <source>Fix iteration bug with &lt;code&gt;.reduce&lt;/code&gt; when input array contains already fulfilled promises</source>
          <target state="translated">입력 배열에 이미 이행 된 약속이 포함 된 경우 &lt;code&gt;.reduce&lt;/code&gt; 로 반복 버그 수정</target>
        </trans-unit>
        <trans-unit id="2c7e80e45d74ea9e6095f1a350133bb1e8a2f89d" translate="yes" xml:space="preserve">
          <source>Fix loadTimes deprecation (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1505&quot;&gt;&lt;code&gt;#1505&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">loadTimes 지원 중단 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1505&quot;&gt; &lt;code&gt;#1505&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="ee4742c64aa549cc2528a31fddab2f0ea727b762" translate="yes" xml:space="preserve">
          <source>Fix long stack trace stiching consistency when rejected from thenables</source>
          <target state="translated">thenables에서 거부 될 때 긴 스택 추적 스티칭 일관성 수정</target>
        </trans-unit>
        <trans-unit id="a37543cf98908956c566d6f35382aadd6c68924f" translate="yes" xml:space="preserve">
          <source>Fix long stack trace support in recent firefox versions</source>
          <target state="translated">최신 파이어 폭스 버전에서 긴 스택 추적 지원 수정</target>
        </trans-unit>
        <trans-unit id="9042c5618d4143cf6dd63c0b930446532b63406b" translate="yes" xml:space="preserve">
          <source>Fix long stack traces not working when promise is created from &lt;a href=&quot;api/promise.fromcallback&quot;&gt;&lt;code&gt;Promise.fromCallback&lt;/code&gt;&lt;/a&gt; (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/971&quot;&gt;&lt;code&gt;#971&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;api/promise.fromcallback&quot;&gt; &lt;code&gt;Promise.fromCallback&lt;/code&gt; &lt;/a&gt; 에서 약속을 만들 때 긴 스택 추적이 작동하지 않는 문제 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/971&quot;&gt; &lt;code&gt;#971&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="84f2af7950beaf7bcfcbf74bb025a52041b4ba24" translate="yes" xml:space="preserve">
          <source>Fix long stack traces when using &lt;a href=&quot;api/promise.resolve&quot;&gt;&lt;code&gt;Promise.resolve()&lt;/code&gt;&lt;/a&gt; (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/861&quot;&gt;&lt;code&gt;#861&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;api/promise.resolve&quot;&gt; &lt;code&gt;Promise.resolve()&lt;/code&gt; &lt;/a&gt; 사용시 긴 스택 추적 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/861&quot;&gt; &lt;code&gt;#861&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="13247711f7d2a455f4efaa3ff47b4ae80818485a" translate="yes" xml:space="preserve">
          <source>Fix maximum callstack exceeded with &lt;a href=&quot;api/promise.coroutine&quot;&gt;&lt;code&gt;Promise.coroutine&lt;/code&gt;&lt;/a&gt; (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1170&quot;&gt;&lt;code&gt;#1170&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;api/promise.coroutine&quot;&gt; &lt;code&gt;Promise.coroutine&lt;/code&gt; &lt;/a&gt; ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1170&quot;&gt; &lt;code&gt;#1170&lt;/code&gt; &lt;/a&gt; )으로 최대 콜 스택 수정</target>
        </trans-unit>
        <trans-unit id="42382301de7a6daa22aaa83384889ce045f4a576" translate="yes" xml:space="preserve">
          <source>Fix memory leak as described in &lt;a href=&quot;https://github.com/promises-aplus/promises-spec/issues/179&quot;&gt;this Promises/A+ spec issue&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/promises-aplus/promises-spec/issues/179&quot;&gt;이 Promises / A + 사양 문제에&lt;/a&gt; 설명 된대로 메모리 누출을 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="6f670587e1ed736e34005951200883ecff202b4c" translate="yes" xml:space="preserve">
          <source>Fix memory leak introduced in 2.9.0 (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/502&quot;&gt;&lt;code&gt;#502&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">2.9.0에서 도입 된 메모리 누수 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/502&quot;&gt; &lt;code&gt;#502&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="71f042061ab18aec6bd108a67744460efc3161e3" translate="yes" xml:space="preserve">
          <source>Fix memory leak when using the same promise to attach handlers over and over again</source>
          <target state="translated">동일한 약속을 사용하여 처리기를 반복해서 연결할 때 메모리 누수 수정</target>
        </trans-unit>
        <trans-unit id="d438eaf9f4f9c09db6cd826a77779534fc6c65bc" translate="yes" xml:space="preserve">
          <source>Fix memory leak with Promise.each &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1057&quot;&gt;&lt;code&gt;#1057&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Promise.each &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1057&quot;&gt; &lt;code&gt;#1057&lt;/code&gt; 로&lt;/a&gt; 메모리 누수 수정</target>
        </trans-unit>
        <trans-unit id="b6eb4d9b78d846af1eee47e8ea007a4c04d852bc" translate="yes" xml:space="preserve">
          <source>Fix missing newline in stack trace reported by &lt;a href=&quot;api/done&quot;&gt;&lt;code&gt;.done()&lt;/code&gt;&lt;/a&gt; (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1020&quot;&gt;&lt;code&gt;#1020&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;api/done&quot;&gt; &lt;code&gt;.done()&lt;/code&gt; &lt;/a&gt; ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1020&quot;&gt; &lt;code&gt;#1020&lt;/code&gt; &lt;/a&gt; )에 의해보고 된 스택 추적에서 누락 된 개행을 수정 합니다 .</target>
        </trans-unit>
        <trans-unit id="f020e5f67c3a470d6d7ebad09004081e3fe9b9b9" translate="yes" xml:space="preserve">
          <source>Fix multiline error messages only showing the first line</source>
          <target state="translated">첫 줄만 표시하는 여러 줄 오류 메시지 수정</target>
        </trans-unit>
        <trans-unit id="21553c0bf501b67fabcd532f56941c63ef77bf95" translate="yes" xml:space="preserve">
          <source>Fix node-webkit compatibility issue (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/pull/467&quot;&gt;#467&lt;/a&gt;)</source>
          <target state="translated">노드-웹킷 호환성 문제 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/pull/467&quot;&gt;# 467&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="a1d8fe4242d70c9af21c4cd742a36ee015cf20ec" translate="yes" xml:space="preserve">
          <source>Fix node.js domain propagation (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/521&quot;&gt;&lt;code&gt;#521&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">node.js 도메인 전파 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/521&quot;&gt; &lt;code&gt;#521&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="8771a226663a44edd4eda7713b9d5cdc1adf0cd1" translate="yes" xml:space="preserve">
          <source>Fix not being able to load multiple bluebird copies introduced in 2.9.22 (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/559&quot;&gt;&lt;code&gt;#559&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/561&quot;&gt;&lt;code&gt;#561&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/560&quot;&gt;&lt;code&gt;#560&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">2.9.22 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/559&quot;&gt; &lt;code&gt;#559&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/561&quot;&gt; &lt;code&gt;#561&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/560&quot;&gt; &lt;code&gt;#560&lt;/code&gt; &lt;/a&gt; )에 도입 된 여러 개의 블루 버드 사본을로드 할 수없는 문제를 해결했습니다 .</target>
        </trans-unit>
        <trans-unit id="d4bc4255948bde92bda4bf98cc0d51f758ecf928" translate="yes" xml:space="preserve">
          <source>Fix process exceptions interfering with internal queue flushing</source>
          <target state="translated">내부 큐 비우기를 방해하는 프로세스 예외 수정</target>
        </trans-unit>
        <trans-unit id="42110dc00e688362ea8c2e51df20136e9e1b0c8d" translate="yes" xml:space="preserve">
          <source>Fix promise cast bug when thenable fulfills using itself as the fulfillment value</source>
          <target state="translated">이행 가능 값으로 자체를 사용하여 이행 할 수있는 경우 약속 캐스트 버그 수정</target>
        </trans-unit>
        <trans-unit id="85744d34637b3b34fe9b729cfab19808d5d9546f" translate="yes" xml:space="preserve">
          <source>Fix promise chain retaining memory until the entire chain is resolved (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1544&quot;&gt;&lt;code&gt;#1544&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1529&quot;&gt;&lt;code&gt;#1529&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">전체 체인이 해결 될 때까지 메모리를 유지하는 promise 체인 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1544&quot;&gt; &lt;code&gt;#1544&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1529&quot;&gt; &lt;code&gt;#1529&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="3d1469fd209b406f5c9755f92e65dc5b93a251eb" translate="yes" xml:space="preserve">
          <source>Fix promises being able to use themselves as resolution or follower value</source>
          <target state="translated">결심 또는 추종자 가치로 자신을 사용할 수있는 약속을 수정</target>
        </trans-unit>
        <trans-unit id="00299b13397cb94d4628f368d579421a69fff8b1" translate="yes" xml:space="preserve">
          <source>Fix promises created in &lt;a href=&quot;api/disposers&quot;&gt;&lt;code&gt;disposers&lt;/code&gt;&lt;/a&gt; not having proper long stack trace context</source>
          <target state="translated">적절한 긴 스택 추적 컨텍스트가없는 &lt;a href=&quot;api/disposers&quot;&gt; &lt;code&gt;disposers&lt;/code&gt; &lt;/a&gt; 에서 작성된 약속 수정</target>
        </trans-unit>
        <trans-unit id="bbd709dd5785bea01b1c88f4ac3801962d5fbb9e" translate="yes" xml:space="preserve">
          <source>Fix promisified methods not turning synchronous exceptions into rejections</source>
          <target state="translated">동기식 예외를 거부로 변환하지 않는 약속 된 방법 수정</target>
        </trans-unit>
        <trans-unit id="a927a3b6b270ac49648bcb72856b388ed80ebea0" translate="yes" xml:space="preserve">
          <source>Fix promisifyAll causing a syntax error when a method name is not a valid identifier</source>
          <target state="translated">메소드 이름이 유효한 식별자가 아닌 경우 구문 오류를 일으키는 promisifyAll 수정</target>
        </trans-unit>
        <trans-unit id="544680385c8bb0b369ae674cfe7160bb203f9d7e" translate="yes" xml:space="preserve">
          <source>Fix race condition when mixing 3rd party asynchrony.</source>
          <target state="translated">타사 비동기 성을 혼합 할 때 경쟁 조건을 수정합니다.</target>
        </trans-unit>
        <trans-unit id="b17b31d940f5ef355ad35d27942f77b474508691" translate="yes" xml:space="preserve">
          <source>Fix regression introduced in 2.9.7 where promisify didn't properly dynamically look up methods on &lt;code&gt;this&lt;/code&gt;</source>
          <target state="translated">promisify 제대로 동적 메소드 조회하지 않은 경우 수정 회귀는 2.9.7에 도입 &lt;code&gt;this&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c8ded2819a76d454593b12fbec3035ed92e033c1" translate="yes" xml:space="preserve">
          <source>Fix regression where there is a long delay between calling &lt;code&gt;.cancel()&lt;/code&gt; and promise actually getting cancelled in Chrome when long stack traces are enabled</source>
          <target state="translated">&lt;code&gt;.cancel()&lt;/code&gt; 호출 사이에 지연이 오래 걸리고 긴 스택 추적이 활성화되면 Chrome에서 실제로 취소되는 약속 회귀 수정</target>
        </trans-unit>
        <trans-unit id="497cb9c4ee9e83c36449c610f4ebfb07acebabbc" translate="yes" xml:space="preserve">
          <source>Fix regression with &lt;code&gt;promisifyAll&lt;/code&gt; not promisifying certain methods</source>
          <target state="translated">특정 방법 을 &lt;code&gt;promisifyAll&lt;/code&gt; 하지 않는 모든 방법</target>
        </trans-unit>
        <trans-unit id="ec975fb1f3246a6b02fb581ac6ce9b998e6f7663" translate="yes" xml:space="preserve">
          <source>Fix runtime APIs throwing synchronous errors</source>
          <target state="translated">동기 오류가 발생하는 런타임 API 수정</target>
        </trans-unit>
        <trans-unit id="7895b29fe7c74c04f0d99523532043f6476f632d" translate="yes" xml:space="preserve">
          <source>Fix safari 6 not using &lt;code&gt;MutationObserver&lt;/code&gt; as a scheduler</source>
          <target state="translated">&lt;code&gt;MutationObserver&lt;/code&gt; 를 스케줄러로 사용하지 않는 Safari 6 수정</target>
        </trans-unit>
        <trans-unit id="dbb26d585b4b741ba883969e7c174a4fb7499470" translate="yes" xml:space="preserve">
          <source>Fix settlePromises using trampoline</source>
          <target state="translated">트램펄린을 사용한 약속 해결</target>
        </trans-unit>
        <trans-unit id="cc5e6b6474936b1658b85f057bdb11407bc791d8" translate="yes" xml:space="preserve">
          <source>Fix several issues with &lt;a href=&quot;api/cancellation&quot;&gt;&lt;code&gt;cancellation&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api/bind&quot;&gt;&lt;code&gt;.bind()&lt;/code&gt;&lt;/a&gt; interoperation when &lt;code&gt;thisArg&lt;/code&gt; is a promise or thenable</source>
          <target state="translated">&lt;code&gt;thisArg&lt;/code&gt; 가 약속 또는 다음 가능한 경우 &lt;a href=&quot;api/cancellation&quot;&gt; &lt;code&gt;cancellation&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;api/bind&quot;&gt; &lt;code&gt;.bind()&lt;/code&gt; &lt;/a&gt; 상호 운용 과 관련된 몇 가지 문제를 해결합니다.</target>
        </trans-unit>
        <trans-unit id="3852d120181c1eed90b366c8626e696d14b43573" translate="yes" xml:space="preserve">
          <source>Fix some bluebird library calls potentially appearing in stack traces</source>
          <target state="translated">스택 추적에 잠재적으로 나타나는 일부 블루 버드 라이브러리 호출 수정</target>
        </trans-unit>
        <trans-unit id="d9e372f0a841d1183b0f1a87a6c382cee6db6faf" translate="yes" xml:space="preserve">
          <source>Fix stack overflow error when a promise returned by promisified function rejects early in a huge array when using &lt;a href=&quot;api/promise.mapseries&quot;&gt;&lt;code&gt;Promise.mapSeries&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;api/promise.each&quot;&gt;&lt;code&gt;Promise.each&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;api/promise.mapseries&quot;&gt; &lt;code&gt;Promise.mapSeries&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;api/promise.each&quot;&gt; &lt;code&gt;Promise.each&lt;/code&gt; 를&lt;/a&gt; 사용할 때 약속 된 함수가 반환 한 약속이 거대한 배열에서 일찍 거부되는 경우 스택 오버플로 오류 수정</target>
        </trans-unit>
        <trans-unit id="b30de357a231b3cb6f234ce251e7ba678ac64364" translate="yes" xml:space="preserve">
          <source>Fix stack traces of synchronously throwing promisified functions'</source>
          <target state="translated">동 기적으로 던지는 약속 된 함수의 스택 추적 수정</target>
        </trans-unit>
        <trans-unit id="45fe7216b32ef2b0b408d3ea6efd7c384f2f109c" translate="yes" xml:space="preserve">
          <source>Fix stackoverflow error when function calls itself &quot;synchronously&quot; from a promise handler</source>
          <target state="translated">함수가 약속 핸들러에서 &quot;동기식으로&quot;호출 될 때의 스택 오버 플로우 오류 수정</target>
        </trans-unit>
        <trans-unit id="e2d80f5e1331f91b46196a490ab6c78878880be0" translate="yes" xml:space="preserve">
          <source>Fix synchronous scheduler passed to &lt;code&gt;setScheduler&lt;/code&gt; causing infinite loop</source>
          <target state="translated">무한 스케줄을 일으키는 &lt;code&gt;setScheduler&lt;/code&gt; 에 전달 된 동기 스케줄러 수정</target>
        </trans-unit>
        <trans-unit id="10a6456c8d79ed9c68ac09d4b838c1af7cd9660e" translate="yes" xml:space="preserve">
          <source>Fix syntax error when es5.js is used in strict mode</source>
          <target state="translated">엄격 모드에서 es5.js를 사용할 때 구문 오류 수정</target>
        </trans-unit>
        <trans-unit id="df68fa832d8e476ac0c655ad0e7e9d39b7a24830" translate="yes" xml:space="preserve">
          <source>Fix then sometimes not being called on iOS/Firefox (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1022&quot;&gt;&lt;code&gt;#1022&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">iOS / Firefox ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1022&quot;&gt; &lt;code&gt;#1022&lt;/code&gt; &lt;/a&gt; ) 에서 수정되지 않는 문제가 해결되었습니다 .</target>
        </trans-unit>
        <trans-unit id="1910b0ca582349e1068466e5890ba83dda12dd4f" translate="yes" xml:space="preserve">
          <source>Fix thenable passed to .return being evaluated too early &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1210&quot;&gt;&lt;code&gt;#1210&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1210&quot;&gt; &lt;code&gt;#1210&lt;/code&gt; 이&lt;/a&gt; 너무 일찍 평가되어 .return에 전달 된 수정 가능</target>
        </trans-unit>
        <trans-unit id="538661784ab11e6a96a35928b64fd325f085baf9" translate="yes" xml:space="preserve">
          <source>Fix unbound promise's then handlers being called with wrong &lt;code&gt;this&lt;/code&gt; value (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/738&quot;&gt;&lt;code&gt;#738&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">언 바운드 약속의 핸들러 &lt;code&gt;this&lt;/code&gt; 값 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/738&quot;&gt; &lt;code&gt;#738&lt;/code&gt; &lt;/a&gt; ) 으로 잘못 호출되도록 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="3befc3eefc6347e09451f7a4f768cc87abf1cea0" translate="yes" xml:space="preserve">
          <source>Fix unexpected error being thrown when promisifed function is called with no arguments (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1063&quot;&gt;&lt;code&gt;#1063&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">인수없이 약속 된 함수를 호출 할 때 예기치 않은 오류가 발생하는 문제를 해결합니다 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1063&quot;&gt; &lt;code&gt;#1063&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="a53a810b995916b93f29c023879500f2f4d32fb9" translate="yes" xml:space="preserve">
          <source>Fix unhandled error regression introduced in 3.4.3 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1217&quot;&gt;&lt;code&gt;#1217&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">3.4.3 &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1217&quot;&gt; &lt;code&gt;#1217&lt;/code&gt; 에&lt;/a&gt; 도입 된 처리되지 않은 오류 회귀 수정</target>
        </trans-unit>
        <trans-unit id="73f0405facbda243e9ddef54075afe90ad9a43be" translate="yes" xml:space="preserve">
          <source>Fix unhandled non-writable objects or primitives not reported by possibly unhandled rejection handler</source>
          <target state="translated">처리되지 않은 거부 처리기에서보고되지 않은 처리 할 수없는 쓰기 불가능한 개체 또는 프리미티브 수정</target>
        </trans-unit>
        <trans-unit id="e619cd7b96f0c38e3b51285e68cabcd489f6fe7d" translate="yes" xml:space="preserve">
          <source>Fix unhandled rejection reporting when passing rejected promise to &lt;code&gt;.return()&lt;/code&gt; (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/721&quot;&gt;&lt;code&gt;#721&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">거부 된 약속을 &lt;code&gt;.return()&lt;/code&gt; ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/721&quot;&gt; &lt;code&gt;#721&lt;/code&gt; &lt;/a&gt; )으로 전달할 때 처리되지 않은 거부보고를 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="89e362b622dd3597bf5ce01e7e88a4c79260c180" translate="yes" xml:space="preserve">
          <source>Fix unhandled rethrown exceptions not reported</source>
          <target state="translated">처리되지 않은 다시 throw 예외를보고하지 않는 문제 수정</target>
        </trans-unit>
        <trans-unit id="382cf1c2705d95e032f8d3cf1cd8526886d0689b" translate="yes" xml:space="preserve">
          <source>Fix warnings for &quot;promise was rejected with non-error&quot; being output when promises are rejected with errors from different realm (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/990&quot;&gt;&lt;code&gt;#990&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">다른 영역의 오류로 약속이 거부 될 때 &quot;오류가 아닌 약속이 거부되었습니다&quot;에 대한 경고가 수정됩니다 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/990&quot;&gt; &lt;code&gt;#990&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="bb2c1e6189a19a6c12d8c92a74a2926250ec202b" translate="yes" xml:space="preserve">
          <source>Fixed &lt;a href=&quot;api/props&quot;&gt;&lt;code&gt;.props&lt;/code&gt;&lt;/a&gt; resolving to empty object when called with empty &lt;code&gt;Map&lt;/code&gt; (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1338&quot;&gt;&lt;code&gt;#1338&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">빈 &lt;code&gt;Map&lt;/code&gt; ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1338&quot;&gt; &lt;code&gt;#1338&lt;/code&gt; &lt;/a&gt; )으로 호출 될 때 빈 오브젝트로 해석되는 &lt;a href=&quot;api/props&quot;&gt; &lt;code&gt;.props&lt;/code&gt; &lt;/a&gt; 수정</target>
        </trans-unit>
        <trans-unit id="d483fe22bdfa96a96edefbaebfbc0f2e843f0d49" translate="yes" xml:space="preserve">
          <source>Fixed &lt;code&gt;Promise.promisifyAll&lt;/code&gt; invoking property accessors. Only data properties with function values are considered.</source>
          <target state="translated">&lt;code&gt;Promise.promisifyAll&lt;/code&gt; 호출 속성 접근 자를 수정 했습니다 . 함수 값이있는 데이터 속성 만 고려됩니다.</target>
        </trans-unit>
        <trans-unit id="88c908cddf4de8c24c5a19e58a3c681100f863de" translate="yes" xml:space="preserve">
          <source>Fixed built browser files not being included in the git tag release for bower</source>
          <target state="translated">bower의 git tag release에 빌드 된 브라우저 파일이 포함되지 않던 것을 고쳤습니다.</target>
        </trans-unit>
        <trans-unit id="69d2e56757e80cd2c7154bad4c7413a3ad1b56a7" translate="yes" xml:space="preserve">
          <source>Fixed confusing error message when calling &lt;a href=&quot;api/catch&quot;&gt;&lt;code&gt;.catch&lt;/code&gt;&lt;/a&gt; with non function predicate (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1350&quot;&gt;&lt;code&gt;#1350&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">비 기능 술어로 &lt;a href=&quot;api/catch&quot;&gt; &lt;code&gt;.catch&lt;/code&gt; &lt;/a&gt; 를 호출 할 때 혼동되는 오류 메시지가 수정되었습니다 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1350&quot;&gt; &lt;code&gt;#1350&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="ce95f042ca06a5bb70cb04b52828b22191ddb5d5" translate="yes" xml:space="preserve">
          <source>Fixed confusing error message when invoking &lt;code&gt;Promise&lt;/code&gt; directly without &lt;code&gt;new&lt;/code&gt; (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1320&quot;&gt;&lt;code&gt;#1320&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 메시지 없이 &lt;code&gt;Promise&lt;/code&gt; 를 직접 호출 할 때 혼란스러운 오류 메시지를 수정했습니다 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1320&quot;&gt; &lt;code&gt;#1320&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="fd4e90682ef682b96bd42b4832ee0db843da480c" translate="yes" xml:space="preserve">
          <source>Fixed streamline benchmarks (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1233&quot;&gt;&lt;code&gt;#1233&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">고정 간소화 벤치 마크 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1233&quot;&gt; &lt;code&gt;#1233&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="ea5699886230f44c9705c53c72d9de8275b988ae" translate="yes" xml:space="preserve">
          <source>Fixed the bug where returning a value from &lt;a href=&quot;api/finally&quot;&gt;&lt;code&gt;.finally&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;api/tap&quot;&gt;&lt;code&gt;.tap&lt;/code&gt;&lt;/a&gt; handler did not make a warning about a forgotten return go away (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/846&quot;&gt;&lt;code&gt;#846&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;api/finally&quot;&gt; &lt;code&gt;.finally&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;api/tap&quot;&gt; &lt;code&gt;.tap&lt;/code&gt; &lt;/a&gt; 처리기 에서 값을 반환 해도 잊어 버린 반환에 대한 경고가 사라 지지 않는 버그가 수정되었습니다 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/846&quot;&gt; &lt;code&gt;#846&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="c5c93a3bfa8c14cb3c1304b8d55c7f6230671ce6" translate="yes" xml:space="preserve">
          <source>Fixed the bug where setTimeout is used in Chrome instead of MutationObserver (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/915&quot;&gt;&lt;code&gt;#915&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">MutationObserver ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/915&quot;&gt; &lt;code&gt;#915&lt;/code&gt; &lt;/a&gt; ) 대신 Chrome에서 setTimeout이 사용되는 버그를 수정했습니다.</target>
        </trans-unit>
        <trans-unit id="dbb1ad64e6c3b976cc45f35b212f3edcbb1dccd0" translate="yes" xml:space="preserve">
          <source>Fixed the bug where using &lt;a href=&quot;api/bind&quot;&gt;&lt;code&gt;.bind&lt;/code&gt;&lt;/a&gt; suppressed unhandled rejections (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/841&quot;&gt;&lt;code&gt;#841&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;api/bind&quot;&gt; &lt;code&gt;.bind&lt;/code&gt; 를&lt;/a&gt; 사용 하면 처리되지 않은 거부가 억제 되는 버그가 수정되었습니다 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/841&quot;&gt; &lt;code&gt;#841&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="c5363cbc3d1c2b5c5776c8a45516153372f3d4b7" translate="yes" xml:space="preserve">
          <source>Fixed yielding a function calling the function (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1314&quot;&gt;&lt;code&gt;#1314&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1315&quot;&gt;&lt;code&gt;#1315&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">함수를 호출하는 함수를 생성하도록 수정했습니다 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1314&quot;&gt; &lt;code&gt;#1314&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1315&quot;&gt; &lt;code&gt;#1315&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="462ac62e8371cc466bdcca08a35011487d44b4ec" translate="yes" xml:space="preserve">
          <source>Fixes firefox settimeout not initialized error (&lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1623&quot;&gt;&lt;code&gt;#1623&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">firefox settimeout not initialized 오류 수정 ( &lt;a href=&quot;https://github.com/petkaantonov/bluebird/issues/1623&quot;&gt; &lt;code&gt;#1623&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="e4f45e4e1c01c8dbc75004bc7ff1c01dd17a984a" translate="yes" xml:space="preserve">
          <source>For a parameter to be considered a type of error that you want to filter, you need the constructor to have its &lt;code&gt;.prototype&lt;/code&gt; property be &lt;code&gt;instanceof Error&lt;/code&gt;.</source>
          <target state="translated">매개 변수를 필터링하려는 오류 유형으로 간주하려면 생성자가 해당 &lt;code&gt;.prototype&lt;/code&gt; 속성을 &lt;code&gt;instanceof Error&lt;/code&gt; 로 설정해야 합니다.</target>
        </trans-unit>
        <trans-unit id="1e5e4226215f3151cda370fe9eb62257aabee845" translate="yes" xml:space="preserve">
          <source>For comparison I'll start with an example of a &lt;em&gt;synchronous&lt;/em&gt; user interaction using &lt;code&gt;window.prompt&lt;/code&gt; and then move to an &lt;em&gt;asynchronous&lt;/em&gt; interaction by making our own DOM based prompt. To begin, here is a template for a simple HTML page:</source>
          <target state="translated">비교를 위해 &lt;code&gt;window.prompt&lt;/code&gt; 를 사용 하는 &lt;em&gt;동기식&lt;/em&gt; 사용자 상호 작용 의 예부터 시작한 다음 자체 DOM 기반 프롬프트를 작성 하여 &lt;em&gt;비동기식&lt;/em&gt; 상호 작용으로 이동 합니다. 시작하려면 다음은 간단한 HTML 페이지의 템플릿입니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f1c9920d9182dcb4cc1daf72fa56f64834dba1a4" translate="yes" xml:space="preserve">
          <source>For coordinating multiple concurrent discrete promises. While &lt;a href=&quot;all&quot;&gt;&lt;code&gt;.all&lt;/code&gt;&lt;/a&gt; is good for handling a dynamically sized list of uniform promises, &lt;code&gt;Promise.join&lt;/code&gt; is much easier (and more performant) to use when you have a fixed amount of discrete promises that you want to coordinate concurrently. The final parameter, handler function, will be invoked with the result values of all of the fufilled promises. For example:</source>
          <target state="translated">여러 개의 동시 이산 약속을 조정합니다. &lt;a href=&quot;all&quot;&gt; &lt;code&gt;.all&lt;/code&gt; &lt;/a&gt; 은 동적으로 크기가 조정 된 균일 한 약속 목록을 처리하는 데 유용 하지만 , &lt;code&gt;Promise.join&lt;/code&gt; 은 동시에 조정하려는 고정 된 양의 개별 약속이있을 때 사용하기가 훨씬 더 쉽고 성능이 뛰어납니다. 최종 매개 변수 인 핸들러 함수는 모든 이행 된 약속의 결과 값으로 호출됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6f86dab476b2362202af50fbac92f7c1168ea74e" translate="yes" xml:space="preserve">
          <source>For every use case that the methods below solve there exists a better alternative in &lt;a href=&quot;index&quot;&gt;the API reference&lt;/a&gt;.</source>
          <target state="translated">아래 메소드가 해결하는 모든 유스 케이스에 &lt;a href=&quot;index&quot;&gt;대해 API 참조&lt;/a&gt; 에 더 나은 대안이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="437030bf6f74c5dc9916326038fa84befe62b851" translate="yes" xml:space="preserve">
          <source>For example (&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/some&quot;&gt;&lt;code&gt;some&lt;/code&gt; is a built-in array method&lt;/a&gt;):</source>
          <target state="translated">예를 들어 ( &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/some&quot;&gt; &lt;code&gt;some&lt;/code&gt; 는 내장 배열 방법입니다&lt;/a&gt; ) :</target>
        </trans-unit>
        <trans-unit id="04809d06d9f69954b86d4402977098e2705ec23b" translate="yes" xml:space="preserve">
          <source>For example, if a promisified function errbacks the node-style callback with an error, that could be caught with &lt;a href=&quot;error&quot;&gt;&lt;code&gt;.error&lt;/code&gt;&lt;/a&gt;. However if the node-style callback &lt;strong&gt;throws&lt;/strong&gt; an error, only &lt;code&gt;.catch&lt;/code&gt; would catch that.</source>
          <target state="translated">예를 들어, 약속 된 함수가 오류와 함께 노드 스타일 콜백을 errback하면 &lt;a href=&quot;error&quot;&gt; &lt;code&gt;.error&lt;/code&gt; &lt;/a&gt; 로 잡힐 수 있습니다 . 노드 스타일의 콜백 그러나 경우에 &lt;strong&gt;발생합니다&lt;/strong&gt; 오류 만 &lt;code&gt;.catch&lt;/code&gt; 은 그 잡을 것입니다.</target>
        </trans-unit>
        <trans-unit id="d3c5565e8f5d54dad2152858065745010ed5d79f" translate="yes" xml:space="preserve">
          <source>For example, if you need to use values of earlier promises in the chain, you could nest:</source>
          <target state="translated">예를 들어, 체인에서 이전 약속 값을 사용해야하는 경우 다음을 중첩 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5dec901e8a617e72014de5bf4bc91f6402d8f36d" translate="yes" xml:space="preserve">
          <source>For example, if you wanted &lt;code&gt;yield 500&lt;/code&gt; to be same as &lt;code&gt;yield Promise.delay&lt;/code&gt;:</source>
          <target state="translated">예를 들어 &lt;code&gt;yield 500&lt;/code&gt; 을 &lt;code&gt;yield Promise.delay&lt;/code&gt; 와 동일하게 하려면 다음 을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="d21a68b28e07ccc9ba3b0cd628ac4d6ccf68facb" translate="yes" xml:space="preserve">
          <source>For example, let's say you have a window &lt;code&gt;onload&lt;/code&gt; event you want to bind to. We can use the promise construction and resolve when the window has loaded as such:</source>
          <target state="translated">예를 들어, 바인딩하려는 창 &lt;code&gt;onload&lt;/code&gt; 이벤트 가 있다고 가정 합니다. 우리는 약속 구성을 사용하고 창이로드되면 해결 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="530af878d0a2fdaed3eccd06f3bfa88d5b0e4ae0" translate="yes" xml:space="preserve">
          <source>For example, something like:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c9c89040af397524dafd71c1e1627a2afbbcf506" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;var p = Promise.delay(100).then(function(){ return p});&lt;/code&gt; .</source>
          <target state="translated">예를 들면 다음과 같습니다. &lt;code&gt;var p = Promise.delay(100).then(function(){ return p});&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="02a31cbb455061961fd7a28539751a0e218a8286" translate="yes" xml:space="preserve">
          <source>For instance, there is no need to write something like this:</source>
          <target state="translated">예를 들어 다음과 같이 작성할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="abc897209b2f98b7966665fa36a5eddbbc44f66d" translate="yes" xml:space="preserve">
          <source>For instance:</source>
          <target state="translated">예를 들어 :</target>
        </trans-unit>
        <trans-unit id="43f17d389bf1d62acf75209625233dbd12af20c5" translate="yes" xml:space="preserve">
          <source>For old code that still uses deferred objects, see &lt;a href=&quot;../deprecated-apis#promise-resolution&quot;&gt;the deprecated API docs &lt;/a&gt;.</source>
          <target state="translated">여전히 지연된 객체를 사용하는 이전 코드 &lt;a href=&quot;../deprecated-apis#promise-resolution&quot;&gt;는 더 이상 사용되지 않는 API 문서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3f684ce176c7b7cacb68366f1ccf686bdca5d822" translate="yes" xml:space="preserve">
          <source>For old code that still uses it, see &lt;a href=&quot;../deprecated-apis#progression&quot;&gt;the progression docs in the deprecated API documentation&lt;/a&gt;.</source>
          <target state="translated">여전히 사용하는 이전 코드 &lt;a href=&quot;../deprecated-apis#progression&quot;&gt;는 더 이상 사용되지 않는 API 설명서의 진행 문서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2d2cf70403639b1585ded7d9a115a0577a3b7bf9" translate="yes" xml:space="preserve">
          <source>For reasonably fast promise implementations latency is going to be fully determined by the scheduler being used and is therefore not interesting to benchmark. &lt;a href=&quot;https://jsperf.com/&quot;&gt;JSPerfs&lt;/a&gt; that benchmark promises tend to benchmark latency.</source>
          <target state="translated">합리적으로 빠른 약속 구현을 위해서는 지연 시간이 사용되는 스케줄러에 의해 완전히 결정되므로 벤치마킹하기에는 흥미롭지 않습니다. 벤치 마크 약속을하는 &lt;a href=&quot;https://jsperf.com/&quot;&gt;JSPerfs&lt;/a&gt; 는 대기 시간을 벤치마킹하는 경향이 있습니다.</target>
        </trans-unit>
        <trans-unit id="8759c2d781d6d5fe57c8a2bd5f1f575c21cb865e" translate="yes" xml:space="preserve">
          <source>For resource management in general and databases in particular, bluebird includes the powerful &lt;a href=&quot;api/promise.using&quot;&gt;&lt;code&gt;Promise.using&lt;/code&gt;&lt;/a&gt; and disposers system. This is similar to &lt;code&gt;with&lt;/code&gt; in Python, &lt;code&gt;using&lt;/code&gt; in C#, try/resource in Java or RAII in C++ in that it lets you handle resource management in an automatic way.</source>
          <target state="translated">일반적인 리소스 관리 및 특히 데이터베이스를 위해 블루 버드는 강력한 &lt;a href=&quot;api/promise.using&quot;&gt; &lt;code&gt;Promise.using&lt;/code&gt; &lt;/a&gt; 및 disposers 시스템을 포함합니다 . 이것은 유사하다 &lt;code&gt;with&lt;/code&gt; , 파이썬에서 &lt;code&gt;using&lt;/code&gt; 당신이 자동 방식으로 자원 관리를 처리 할 수 있다는 점에서 C ++에서 Java 또는 RAII에서 C #을 시도 / 자원에.</target>
        </trans-unit>
        <trans-unit id="c3319c132d81b826b7f301257ff3bba4f6aa17b9" translate="yes" xml:space="preserve">
          <source>For transactions, you can use the following similar pattern instead:</source>
          <target state="translated">트랜잭션의 경우 다음과 유사한 패턴을 대신 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ac0821dbfba0c6a6f8f099a6fff33a46c5703809" translate="yes" xml:space="preserve">
          <source>Full build &lt;a href=&quot;https://cdn.jsdelivr.net/bluebird/latest/bluebird.js&quot;&gt;bluebird.js&lt;/a&gt;</source>
          <target state="translated">전체 빌드 &lt;a href=&quot;https://cdn.jsdelivr.net/bluebird/latest/bluebird.js&quot;&gt;bluebird.js&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4216988ab60caf130165bb71b1f15475d0929c4d" translate="yes" xml:space="preserve">
          <source>Full build minified &lt;a href=&quot;https://cdn.jsdelivr.net/bluebird/latest/bluebird.min.js&quot;&gt;bluebird.min.js&lt;/a&gt;</source>
          <target state="translated">전체 빌드 축소 된 &lt;a href=&quot;https://cdn.jsdelivr.net/bluebird/latest/bluebird.min.js&quot;&gt;bluebird.min.js&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c73143eee554addf7734abfc0a42d569ddae76f3" translate="yes" xml:space="preserve">
          <source>Function that returns the full path of the written file:</source>
          <target state="translated">작성된 파일의 전체 경로를 반환하는 함수 :</target>
        </trans-unit>
        <trans-unit id="08266679b584a603aede5a2575c67e77b0d39da1" translate="yes" xml:space="preserve">
          <source>Functions that could potentially be handy in some situations.</source>
          <target state="translated">일부 상황에서 유용 할 수있는 기능.</target>
        </trans-unit>
        <trans-unit id="a3e705cc61a19f33d7c9c030f107a70569966485" translate="yes" xml:space="preserve">
          <source>Generators</source>
          <target state="translated">Generators</target>
        </trans-unit>
        <trans-unit id="0ea83a5cb9ec91f263adbf767df89343c930477c" translate="yes" xml:space="preserve">
          <source>Get the fulfillment value of this promise. Throws an error if the promise isn't fulfilled - it is a bug to call this method on an unfulfilled promise.</source>
          <target state="translated">이 약속의 성취 가치를 얻으십시오. 약속이 이행되지 않으면 오류가 발생합니다. 이행되지 않은 약속에서이 메소드를 호출하는 것은 버그입니다.</target>
        </trans-unit>
        <trans-unit id="e2140b0fd8677e654df0b9d1cff9b46cd002b930" translate="yes" xml:space="preserve">
          <source>Get the rejection reason of this promise. Throws an error if the promise isn't rejected - it is a bug to call this method on an unrejected promise.</source>
          <target state="translated">이 약속의 거절 이유를 알아보십시오. 약속이 거부되지 않으면 오류가 발생합니다. 거부되지 않은 약속에서이 메소드를 호출하는 것은 버그입니다.</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">시작하기</target>
        </trans-unit>
        <trans-unit id="aec028b4f0ac5874fa6a9f330e693386c0751541" translate="yes" xml:space="preserve">
          <source>Give better stack traces when promisified callbacks throw or errback primitives such as strings by wrapping them in an &lt;code&gt;Error&lt;/code&gt; object.</source>
          <target state="translated">약속 된 콜백이 발생하거나 문자열과 같은 &lt;code&gt;Error&lt;/code&gt; 가있는 기본 요소를 Error 객체 로 감싸서 더 나은 스택 추적을 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="e9097308aaf77514fb18ee43d9cbf26da625df0a" translate="yes" xml:space="preserve">
          <source>Given a finite &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;&lt;code&gt;Iterable&lt;/code&gt;&lt;/a&gt;(arrays are &lt;code&gt;Iterable&lt;/code&gt;), or a promise of an &lt;code&gt;Iterable&lt;/code&gt;, which produces promises (or a mix of promises and values), iterate over all the values in the &lt;code&gt;Iterable&lt;/code&gt; into an array and &lt;a href=&quot;http://en.wikipedia.org/wiki/Map_(higher-order_function)&quot;&gt;map the array to another&lt;/a&gt; using the given &lt;code&gt;mapper&lt;/code&gt; function.</source>
          <target state="translated">유한 주어 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt; &lt;code&gt;Iterable&lt;/code&gt; &lt;/a&gt; (배열이 &lt;code&gt;Iterable&lt;/code&gt; ), 또는의 약속 &lt;code&gt;Iterable&lt;/code&gt; 약속을 생산 (또는 약속과 값의 혼합) 반복,가에있는 값 각지 &lt;code&gt;Iterable&lt;/code&gt; 배열로하고 &lt;a href=&quot;http://en.wikipedia.org/wiki/Map_(higher-order_function)&quot;&gt;다른 배열을지도&lt;/a&gt; 주어진 사용 &lt;code&gt;mapper&lt;/code&gt; 기능.</target>
        </trans-unit>
        <trans-unit id="b9e39ec680c8a6aa5ab875316749caa58ebf3e40" translate="yes" xml:space="preserve">
          <source>Given an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;&lt;code&gt;Iterable&lt;/code&gt;&lt;/a&gt; (an array, for example), or a promise of an &lt;code&gt;Iterable&lt;/code&gt;, iterates serially over all the values in it, executing the given &lt;code&gt;iterator&lt;/code&gt; on each element. If an element is a promise, the iterator will wait for it before proceeding. The &lt;code&gt;iterator&lt;/code&gt; function has signature &lt;code&gt;(value, index, arrayLength)&lt;/code&gt; where &lt;code&gt;value&lt;/code&gt; is the current element (or its resolved value if it is a promise).</source>
          <target state="translated">주어 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt; &lt;code&gt;Iterable&lt;/code&gt; 을&lt;/a&gt; (예를 들어, 배열), 또는의 약속 &lt;code&gt;Iterable&lt;/code&gt; 주어진 실행, 그 위에 순차적으로 모든 값을 반복 할 &lt;code&gt;iterator&lt;/code&gt; 각 요소에있다. 요소가 프라 미스이면 반복자는 계속하기 전에이를 기다립니다. &lt;code&gt;iterator&lt;/code&gt; 기능을 갖는 서명 &lt;code&gt;(value, index, arrayLength)&lt;/code&gt; &lt;code&gt;value&lt;/code&gt; (이 경우 약속 또는 해결 값) 현재 요소이다.</target>
        </trans-unit>
        <trans-unit id="a1a2040cef9eaa26486bc66ba0bacc960d2d0f6e" translate="yes" xml:space="preserve">
          <source>Given an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;&lt;code&gt;Iterable&lt;/code&gt;&lt;/a&gt; (an array, for example), or a promise of an &lt;code&gt;Iterable&lt;/code&gt;, iterates serially over all the values in it, executing the given &lt;code&gt;mapper&lt;/code&gt; on each element. If an element is a promise, the mapper will wait for it before proceeding. The &lt;code&gt;mapper&lt;/code&gt; function has signature &lt;code&gt;(value, index, arrayLength)&lt;/code&gt; where &lt;code&gt;value&lt;/code&gt; is the current element (or its resolved value if it is a promise).</source>
          <target state="translated">주어 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt; &lt;code&gt;Iterable&lt;/code&gt; 을&lt;/a&gt; (예를 들어, 배열), 또는의 약속 &lt;code&gt;Iterable&lt;/code&gt; 주어진 실행, 그 위에 순차적으로 모든 값을 반복 할 &lt;code&gt;mapper&lt;/code&gt; 각 요소에있다. 요소가 promise 인 경우 매퍼는 계속하기 전에이를 기다립니다. &lt;code&gt;mapper&lt;/code&gt; 기능을 갖는 서명 &lt;code&gt;(value, index, arrayLength)&lt;/code&gt; &lt;code&gt;value&lt;/code&gt; (이 경우 약속 또는 해결 값) 현재 요소이다.</target>
        </trans-unit>
        <trans-unit id="54860bc5a16d3a2c566d383ddf22c8930505613c" translate="yes" xml:space="preserve">
          <source>Given an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;&lt;code&gt;Iterable&lt;/code&gt;&lt;/a&gt;(arrays are &lt;code&gt;Iterable&lt;/code&gt;), or a promise of an &lt;code&gt;Iterable&lt;/code&gt;, which produces promises (or a mix of promises and values), iterate over all the values in the &lt;code&gt;Iterable&lt;/code&gt; into an array and &lt;a href=&quot;http://en.wikipedia.org/wiki/Filter_(higher-order_function)&quot;&gt;filter the array to another&lt;/a&gt; using the given &lt;code&gt;filterer&lt;/code&gt; function.</source>
          <target state="translated">감안할 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt; &lt;code&gt;Iterable&lt;/code&gt; &lt;/a&gt; (배열이다 &lt;code&gt;Iterable&lt;/code&gt; ), 또는의 약속 &lt;code&gt;Iterable&lt;/code&gt; 약속들을 생성 (또는 약속과 값의 조합)는, 반복 처리가있는 숫자 온통 &lt;code&gt;Iterable&lt;/code&gt; 배열로하고 &lt;a href=&quot;http://en.wikipedia.org/wiki/Filter_(higher-order_function)&quot;&gt;다른 배열을 필터링&lt;/a&gt; 주어진 사용 &lt;code&gt;filterer&lt;/code&gt; 을 함수.</target>
        </trans-unit>
        <trans-unit id="ea3da07c676ac52235a301bd1da9469234d8c103" translate="yes" xml:space="preserve">
          <source>Given an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;&lt;code&gt;Iterable&lt;/code&gt;&lt;/a&gt;(arrays are &lt;code&gt;Iterable&lt;/code&gt;), or a promise of an &lt;code&gt;Iterable&lt;/code&gt;, which produces promises (or a mix of promises and values), iterate over all the values in the &lt;code&gt;Iterable&lt;/code&gt; into an array and &lt;a href=&quot;http://en.wikipedia.org/wiki/Fold_(higher-order_function)&quot;&gt;reduce the array to a value&lt;/a&gt; using the given &lt;code&gt;reducer&lt;/code&gt; function.</source>
          <target state="translated">주어 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt; &lt;code&gt;Iterable&lt;/code&gt; &lt;/a&gt; (배열이 &lt;code&gt;Iterable&lt;/code&gt; ), 또는의 약속 &lt;code&gt;Iterable&lt;/code&gt; 약속을 생산 (또는 약속과 값의 혼합) 반복,가에있는 값 각지 &lt;code&gt;Iterable&lt;/code&gt; 배열로하고 &lt;a href=&quot;http://en.wikipedia.org/wiki/Fold_(higher-order_function)&quot;&gt;값으로 배열을 줄이기&lt;/a&gt; 주어진 사용 &lt;code&gt;reducer&lt;/code&gt; 기능.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
