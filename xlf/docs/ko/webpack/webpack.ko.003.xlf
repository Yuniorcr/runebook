<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="webpack">
    <body>
      <group id="webpack">
        <trans-unit id="1da67d4c92695e4df382bff0c3545fc3f18a7beb" translate="yes" xml:space="preserve">
          <source>Another case to customize output filename is to emit some kind of assets to a specified directory:</source>
          <target state="translated">Another case to customize output filename is to emit some kind of assets to a specified directory:</target>
        </trans-unit>
        <trans-unit id="dedf5ccdeb6bf446ef7cfb01d8db4c4b042b2078" translate="yes" xml:space="preserve">
          <source>Another example:</source>
          <target state="translated">다른 예시:</target>
        </trans-unit>
        <trans-unit id="4f871573df68e4a20a082bdabe2a2958b1eb7063" translate="yes" xml:space="preserve">
          <source>Another instance where &lt;em&gt;shimming&lt;/em&gt; can be useful is when you want to &lt;a href=&quot;https://en.wikipedia.org/wiki/Polyfill&quot;&gt;polyfill&lt;/a&gt; browser functionality to support more users. In this case, you may only want to deliver those polyfills to the browsers that need patching (i.e. load them on demand).</source>
          <target state="translated">&lt;em&gt;shimming&lt;/em&gt; 이 유용한 또 다른 예 는 더 많은 사용자를 지원하기 위해 브라우저 기능을 &lt;a href=&quot;https://en.wikipedia.org/wiki/Polyfill&quot;&gt;폴리 필&lt;/a&gt; 하려는 경우 입니다. 이 경우 패치를 필요로하는 브라우저에만 폴리 필을 제공 할 수 있습니다 (예 : 요청시로드).</target>
        </trans-unit>
        <trans-unit id="f051219a0c617dbe86362eabdca77293f0ef1278" translate="yes" xml:space="preserve">
          <source>Another instance where &lt;em&gt;shimming&lt;/em&gt; can be useful is when you want to &lt;a href=&quot;https://en.wikipedia.org/wiki/Polyfill_%28programming%29&quot;&gt;polyfill&lt;/a&gt; browser functionality to support more users. In this case, you may only want to deliver those polyfills to the browsers that need patching (i.e. load them on demand).</source>
          <target state="translated">Another instance where &lt;em&gt;shimming&lt;/em&gt; can be useful is when you want to &lt;a href=&quot;https://en.wikipedia.org/wiki/Polyfill_%28programming%29&quot;&gt;polyfill&lt;/a&gt; browser functionality to support more users. In this case, you may only want to deliver those polyfills to the browsers that need patching (i.e. load them on demand).</target>
        </trans-unit>
        <trans-unit id="7a699b383dcf262025b37670729b9e2b0388aff5" translate="yes" xml:space="preserve">
          <source>Another possible use case is to set the &lt;code&gt;publicPath&lt;/code&gt; on the fly. webpack exposes a global variable called &lt;code&gt;__webpack_public_path__&lt;/code&gt; that allows you to do that. So, in your application's entry point, you can simply do this:</source>
          <target state="translated">또 다른 가능한 사용 사례는 &lt;code&gt;publicPath&lt;/code&gt; 를 즉석 에서 설정하는 것 입니다. webpack은 __webpack_public_path__라는 전역 변수를 제공하므로이를 &lt;code&gt;__webpack_public_path__&lt;/code&gt; 할 수 있습니다. 따라서 응용 프로그램의 진입 점에서 간단히 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="050e434a4876411f5e8ab8420bfcebc190a8e33f" translate="yes" xml:space="preserve">
          <source>Another useful asset that can be loaded is data, like JSON files, CSVs, TSVs, and XML. Support for JSON is actually built-in, similar to NodeJS, meaning &lt;code&gt;import Data from './data.json'&lt;/code&gt; will work by default. To import CSVs, TSVs, and XML you could use the &lt;a href=&quot;https://github.com/theplatapi/csv-loader&quot;&gt;csv-loader&lt;/a&gt; and &lt;a href=&quot;https://github.com/gisikw/xml-loader&quot;&gt;xml-loader&lt;/a&gt;. Let's handle loading all three:</source>
          <target state="translated">로드 할 수있는 또 다른 유용한 자산은 JSON 파일, CSV, TSV 및 XML과 같은 데이터입니다. JSON 지원은 실제로 NodeJS와 유사하게 내장되어있어 &lt;code&gt;import Data from './data.json'&lt;/code&gt; 가 기본적으로 작동합니다. CSV, TSV 및 XML을 가져 오려면 &lt;a href=&quot;https://github.com/theplatapi/csv-loader&quot;&gt;csv-loader&lt;/a&gt; 및 &lt;a href=&quot;https://github.com/gisikw/xml-loader&quot;&gt;xml-loader를&lt;/a&gt; 사용할 수 있습니다 . 세 가지 모두를 처리하도록하겠습니다.</target>
        </trans-unit>
        <trans-unit id="4edd11df28ed6c63f597d964d4a8b8215d2886c4" translate="yes" xml:space="preserve">
          <source>Another way to view &lt;code&gt;val-loader&lt;/code&gt;, is that it allows a user a way to make their own custom loader logic, without having to write a custom loader.</source>
          <target state="translated">&lt;code&gt;val-loader&lt;/code&gt; 를 보는 또 다른 방법 은 사용자 정의 로더를 작성할 필요없이 사용자가 자신 만의 사용자 정의 로더 로직을 만들 수있는 방법을 허용한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="bbbacd9ab2638a93a9617666169da1970f4b8f59" translate="yes" xml:space="preserve">
          <source>Any &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; &quot;href&quot; or &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; &quot;src&quot; that is &lt;strong&gt;not an external link&lt;/strong&gt; and does not start with &lt;code&gt;~&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;./&lt;/code&gt; or a series of &lt;code&gt;../&lt;/code&gt; will have &lt;code&gt;./&lt;/code&gt; appended to the beginning of the value. To prevent this change use options ignoreLinks below.</source>
          <target state="translated">모든 &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; &quot;HREF&quot;또는 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 는 &quot;SRC&quot; &lt;strong&gt;외부 링크하지&lt;/strong&gt; 와 함께 시작되지 않습니다 &lt;code&gt;~&lt;/code&gt; 이 , &lt;code&gt;/&lt;/code&gt; , &lt;code&gt;./&lt;/code&gt; 또는 일련의 &lt;code&gt;../&lt;/code&gt; 는 것이다 &lt;code&gt;./&lt;/code&gt; 값의 시작 부분에 추가. 이 변경을 방지하려면 아래의 옵션 ignoreLinks를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="b2a1d7e20b53a348405de6c30976d03e1f292ad6" translate="yes" xml:space="preserve">
          <source>Any &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; that is inside the &lt;code&gt;&amp;lt;dom-module&amp;gt;&lt;/code&gt; but not in the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; will be added to the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; in the order the tags appear in the file.</source>
          <target state="translated">모든 &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 내부입니다 &lt;code&gt;&amp;lt;dom-module&amp;gt;&lt;/code&gt; 가 아니라에서 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 받는 추가됩니다 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 태그가 파일에 나타나는 순서대로.</target>
        </trans-unit>
        <trans-unit id="ec4455d67ff047e018b50003b3eff724578fe005" translate="yes" xml:space="preserve">
          <source>Any feature requiring the AST, like the &lt;code&gt;ProvidePlugin&lt;/code&gt;, will not work.</source>
          <target state="translated">&lt;code&gt;ProvidePlugin&lt;/code&gt; 과 같이 AST가 필요한 기능 은 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e60900fe2d5f25aae6c6dbeb8c5bb2d60e9a8eba" translate="yes" xml:space="preserve">
          <source>Any options under webpack &lt;a href=&quot;../configuration/resolve#resolve&quot;&gt;&lt;code&gt;resolve&lt;/code&gt; options&lt;/a&gt; are possible. They are merged with the configured &lt;code&gt;resolve&lt;/code&gt; options. Note that &lt;code&gt;&quot;...&quot;&lt;/code&gt; can be used in arrays to extend the value from &lt;code&gt;resolve&lt;/code&gt; options, e.g. &lt;code&gt;{ extensions: [&quot;.sass&quot;, &quot;...&quot;] }&lt;/code&gt;.</source>
          <target state="translated">웹팩에서 모든 옵션 &lt;a href=&quot;../configuration/resolve#resolve&quot;&gt; &lt;code&gt;resolve&lt;/code&gt; 옵션이&lt;/a&gt; 가능합니다. 구성된 &lt;code&gt;resolve&lt;/code&gt; 옵션 과 병합됩니다 . 참고 &lt;code&gt;&quot;...&quot;&lt;/code&gt; 의 값 확장 배열에서 사용할 수있는 &lt;code&gt;resolve&lt;/code&gt; 옵션, 예를 들어 &lt;code&gt;{ extensions: [&quot;.sass&quot;, &quot;...&quot;] }&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f26a2b875e0ff0bc5087ab2f1c37bb25bf8a841e" translate="yes" xml:space="preserve">
          <source>Any third-party library or &quot;vendor&quot; code your source is dependent on.</source>
          <target state="translated">소스가 의존하는 타사 라이브러리 또는 &quot;공급 업체&quot;코드</target>
        </trans-unit>
        <trans-unit id="778cdb2116ae6c808e8a6a2a43e59fe3b7721b93" translate="yes" xml:space="preserve">
          <source>Any time one file depends on another, webpack treats this as a &lt;em&gt;dependency&lt;/em&gt;. This allows webpack to take non-code assets, such as images or web fonts, and also provide them as &lt;em&gt;dependencies&lt;/em&gt; for your application.</source>
          <target state="translated">한 파일이 다른 파일에 의존 할 때마다, 웹팩은 이것을 파일을 &lt;em&gt;의존성&lt;/em&gt; 으로 취급합니다 . 이를 통해 웹팩은 이미지 또는 웹 글꼴과 같은 비 코드 자산을 가져와 애플리케이션에 대한 &lt;em&gt;종속성으로&lt;/em&gt; 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5822cbba36ad3780cbacac5d2540a102d7af7248" translate="yes" xml:space="preserve">
          <source>Applied loaders: An array of loaders applied to the resource.</source>
          <target state="translated">적용된 로더 : 자원에 적용된 로더의 배열.</target>
        </trans-unit>
        <trans-unit id="e637a81b6a8c061a739058f46b67fb7eb439620a" translate="yes" xml:space="preserve">
          <source>Applies Node.js style filesystem to the compiler.</source>
          <target state="translated">Node.js 스타일 파일 시스템을 컴파일러에 적용합니다.</target>
        </trans-unit>
        <trans-unit id="a75d73d5e5c8aa38a23084b54e1e2f4871cd2381" translate="yes" xml:space="preserve">
          <source>Apply loaders to the minimal number of modules necessary. Instead of:</source>
          <target state="translated">필요한 최소한의 모듈에 로더를 적용하십시오. 대신에:</target>
        </trans-unit>
        <trans-unit id="9db03fd3ff33a26612840a0b31db3e37e9f30d39" translate="yes" xml:space="preserve">
          <source>Arch users, add &lt;code&gt;fs.inotify.max_user_watches=524288&lt;/code&gt; to &lt;code&gt;/etc/sysctl.d/99-sysctl.conf&lt;/code&gt; and then execute &lt;code&gt;sysctl --system&lt;/code&gt;. Ubuntu users (and possibly others), execute: &lt;code&gt;echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;amp;&amp;amp; sudo sysctl -p&lt;/code&gt;.</source>
          <target state="translated">아치 사용자 인 경우 &lt;code&gt;/etc/sysctl.d/99-sysctl.conf&lt;/code&gt; 에 &lt;code&gt;fs.inotify.max_user_watches=524288&lt;/code&gt; 을 추가 한 다음 &lt;code&gt;sysctl --system&lt;/code&gt; 을 실행하십시오 . 우분투 사용자 (및 가능한 경우) : &lt;code&gt;echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;amp;&amp;amp; sudo sysctl -p&lt;/code&gt; sudo tee -a /etc/sysctl.conf &amp;amp;&amp;amp; sudo sysctl -p .</target>
        </trans-unit>
        <trans-unit id="c989fe49aac7b9f7e2452f1471d34450c58c3111" translate="yes" xml:space="preserve">
          <source>Are only provided when they are used.</source>
          <target state="translated">Are only provided when they are used.</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="a0478ca5f4c068ca3ac12f9474f6a15865ce9053" translate="yes" xml:space="preserve">
          <source>Arguments:</source>
          <target state="translated">Arguments:</target>
        </trans-unit>
        <trans-unit id="107004472b7ba4e5e31f3082ee1fb5a1239eec61" translate="yes" xml:space="preserve">
          <source>Array</source>
          <target state="translated">Array</target>
        </trans-unit>
        <trans-unit id="c309bbe323378571066b370b64cf2543f51c208a" translate="yes" xml:space="preserve">
          <source>Array of globs to ignore (applied to &lt;code&gt;from&lt;/code&gt;)</source>
          <target state="translated">무시 globs와의 배열 (적용 &lt;code&gt;from&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="b284c419e7e5bea38053b0c269d31d694258ca81" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;import()&lt;/code&gt; returns a promise, it can be used with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;&lt;code&gt;async&lt;/code&gt; functions&lt;/a&gt;. Here's how it would simplify the code:</source>
          <target state="translated">As &lt;code&gt;import()&lt;/code&gt; returns a promise, it can be used with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt; &lt;code&gt;async&lt;/code&gt; functions&lt;/a&gt;. Here's how it would simplify the code:</target>
        </trans-unit>
        <trans-unit id="c1a825072716064d4ed4b5bcba574133383ce499" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;import()&lt;/code&gt; returns a promise, it can be used with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;&lt;code&gt;async&lt;/code&gt; functions&lt;/a&gt;. However, this requires using a pre-processor like Babel and the &lt;a href=&quot;https://babeljs.io/docs/plugins/syntax-dynamic-import/#installation&quot;&gt;Syntax Dynamic Import Babel Plugin&lt;/a&gt;. Here's how it would simplify the code:</source>
          <target state="translated">으로 &lt;code&gt;import()&lt;/code&gt; 약속을 반환, 그것은 사용할 수 있습니다 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt; &lt;code&gt;async&lt;/code&gt; 기능&lt;/a&gt; . 그러나이를 위해서는 Babel 및 &lt;a href=&quot;https://babeljs.io/docs/plugins/syntax-dynamic-import/#installation&quot;&gt;Syntax Dynamic Import Babel Plugin&lt;/a&gt; 과 같은 전처리기를 사용해야합니다 . 코드를 단순화하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4bded8c873b073eb5339c8c1b052dce0b396166c" translate="yes" xml:space="preserve">
          <source>As a rule of thumb: Use exactly one entry point for each HTML document.</source>
          <target state="translated">As a rule of thumb: Use exactly one entry point for each HTML document.</target>
        </trans-unit>
        <trans-unit id="fbe8a8ba932739ab250da8260553327ecfb2f361" translate="yes" xml:space="preserve">
          <source>As a rule of thumb: Use exactly one entry point for each HTML document. See the issue &lt;a href=&quot;https://bundlers.tooling.report/code-splitting/multi-entry/#webpack&quot;&gt;described here&lt;/a&gt; for more details.</source>
          <target state="translated">경험상 각 HTML 문서에 대해 정확히 하나의 진입 점을 사용하십시오. 자세한 내용은 &lt;a href=&quot;https://bundlers.tooling.report/code-splitting/multi-entry/#webpack&quot;&gt;여기&lt;/a&gt; 에 설명 된 문제 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="16165d8709ab902d5eb41e46400ecdf6b732f775" translate="yes" xml:space="preserve">
          <source>As a rule of thumb: for each HTML document use exactly one entry point.</source>
          <target state="translated">경험상, 각 HTML 문서마다 정확히 하나의 진입 점을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="73675a2acdf4f44b48592549220c6f721ac43f04" translate="yes" xml:space="preserve">
          <source>As always, you should rather configure this in your &lt;code&gt;webpack.config.js&lt;/code&gt;:</source>
          <target state="translated">항상 그렇듯이 &lt;code&gt;webpack.config.js&lt;/code&gt; 에서이를 구성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="9e7ff77557c8ec83524cc4d7309bb2c34e3b4a29" translate="yes" xml:space="preserve">
          <source>As an alternative, if seeking better development performance and css outputs that mimic production. &lt;a href=&quot;https://github.com/faceyspacey/extract-css-chunks-webpack-plugin&quot;&gt;extract-css-chunks-webpack-plugin&lt;/a&gt; offers a hot module reload friendly, extended version of mini-css-extract-plugin. HMR real CSS files in dev, works like mini-css in non-dev</source>
          <target state="translated">As an alternative, if seeking better development performance and css outputs that mimic production. &lt;a href=&quot;https://github.com/faceyspacey/extract-css-chunks-webpack-plugin&quot;&gt;extract-css-chunks-webpack-plugin&lt;/a&gt; offers a hot module reload friendly, extended version of mini-css-extract-plugin. HMR real CSS files in dev, works like mini-css in non-dev</target>
        </trans-unit>
        <trans-unit id="c2eb85221ee69dbf73d1ce388236f8552782c57f" translate="yes" xml:space="preserve">
          <source>As an example, to externalize all imports where the import path matches a regular expression you could do the following:</source>
          <target state="translated">As an example, to externalize all imports where the import path matches a regular expression you could do the following:</target>
        </trans-unit>
        <trans-unit id="090ec8498e4957944bd58c3e63473c907211e5e2" translate="yes" xml:space="preserve">
          <source>As mentioned above, we'll only briefly touch on this. The runtime, along with the manifest data, is basically all the code webpack needs to connect your modularized application while it's running in the browser. It contains the loading and resolving logic needed to connect your modules as they interact. This includes connecting modules that have already been loaded into the browser as well as logic to lazy-load the ones that haven't.</source>
          <target state="translated">위에서 언급했듯이 간단히 살펴 보겠습니다. 매니페스트 데이터와 함께 런타임은 기본적으로 브라우저에서 실행되는 동안 모듈화 된 응용 프로그램을 연결하는 데 필요한 모든 코드 웹팩입니다. 여기에는 모듈이 상호 작용할 때 모듈을 연결하는 데 필요한로드 및 해결 로직이 포함되어 있습니다. 여기에는 브라우저에 이미로드 된 모듈과 연결되지 않은 모듈을 지연로드하는 연결이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="a5a36269a30af6ec3993024771e41a9cd637675a" translate="yes" xml:space="preserve">
          <source>As mentioned in &lt;a href=&quot;../guides/getting-started#using-a-configuration&quot;&gt;Getting Started&lt;/a&gt;, there are multiple ways to define the &lt;code&gt;entry&lt;/code&gt; property in your webpack configuration. We will show you the ways you &lt;strong&gt;can&lt;/strong&gt; configure the &lt;code&gt;entry&lt;/code&gt; property, in addition to explaining why it may be useful to you.</source>
          <target state="translated">&lt;a href=&quot;../guides/getting-started#using-a-configuration&quot;&gt;시작하기&lt;/a&gt; 에서 언급했듯이 웹팩 구성에서 &lt;code&gt;entry&lt;/code&gt; 속성 을 정의하는 여러 가지 방법이 있습니다. 우리는 당신에게 당신이 방법을 보여줍니다 &lt;strong&gt;수&lt;/strong&gt; 구성 &lt;code&gt;entry&lt;/code&gt; 당신에게 유용 할 수있는 이유를 설명뿐만 아니라, 속성을.</target>
        </trans-unit>
        <trans-unit id="2a94933832e6c325a385a44f28a6a9fb296abee6" translate="yes" xml:space="preserve">
          <source>As mentioned there are some pitfalls to this approach:</source>
          <target state="translated">언급 했듯이이 접근법에는 몇 가지 함정이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ba86b5c37bc79d584cce4ad079d9b0839dfe9d64" translate="yes" xml:space="preserve">
          <source>As of &lt;a href=&quot;https://momentjs.com/&quot;&gt;moment&lt;/a&gt; 2.18, all locales are bundled together with the core library (see &lt;a href=&quot;https://github.com/moment/moment/issues/2373&quot;&gt;this GitHub issue&lt;/a&gt;).</source>
          <target state="translated">현재 &lt;a href=&quot;https://momentjs.com/&quot;&gt;순간&lt;/a&gt; 2.18, 모든 로케일은 핵심 라이브러리 (참조와 함께 번들로 제공되는 &lt;a href=&quot;https://github.com/moment/moment/issues/2373&quot;&gt;이 GitHub의 문제&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="7e4744c3aa9b2573985e7966889816beadc5ff44" translate="yes" xml:space="preserve">
          <source>As of version 4, webpack doesn't require any configuration, but most projects will need a more complex setup, which is why webpack supports a &lt;a href=&quot;../concepts/configuration&quot;&gt;configuration file&lt;/a&gt;. This is much more efficient than having to manually type in a lot of commands in the terminal, so let's create one to replace the CLI line options used above:</source>
          <target state="translated">버전 4부터 웹팩에는 구성이 필요하지 않지만 대부분의 프로젝트에는보다 복잡한 설정이 필요하므로 웹팩이 &lt;a href=&quot;../concepts/configuration&quot;&gt;구성 파일을&lt;/a&gt; 지원 합니다 . 이것은 터미널에서 많은 명령을 수동으로 입력하는 것보다 훨씬 효율적이므로 위에서 사용한 CLI 행 옵션을 대체하는 명령을 작성해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="f6b4d16f99e98655d51f3de433ea8e5502b37df4" translate="yes" xml:space="preserve">
          <source>As of version 4, webpack doesn't require any configuration, but most projects will need a more complex setup, which is why webpack supports a &lt;a href=&quot;../concepts/configuration&quot;&gt;configuration file&lt;/a&gt;. This is much more efficient than having to manually type in a lot of commands in the terminal, so let's create one:</source>
          <target state="translated">As of version 4, webpack doesn't require any configuration, but most projects will need a more complex setup, which is why webpack supports a &lt;a href=&quot;../concepts/configuration&quot;&gt;configuration file&lt;/a&gt;. This is much more efficient than having to manually type in a lot of commands in the terminal, so let's create one:</target>
        </trans-unit>
        <trans-unit id="60c54a9cabe20ad342a548227b711bdea27af746" translate="yes" xml:space="preserve">
          <source>As of webpack 4, this is also easily toggled via the &lt;code&gt;&quot;mode&quot;&lt;/code&gt; configuration option, set to &lt;code&gt;&quot;production&quot;&lt;/code&gt;.</source>
          <target state="translated">웹팩 4부터는 &lt;code&gt;&quot;mode&quot;&lt;/code&gt; 구성 옵션을 통해 쉽게 전환 할 수 있으며 &lt;code&gt;&quot;production&quot;&lt;/code&gt; 으로 설정되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="26f7e3e329b3e1a79800c25697d752941cfdafe8" translate="yes" xml:space="preserve">
          <source>As of webpack 5, You can configure only &lt;code&gt;global&lt;/code&gt;, &lt;code&gt;__filename&lt;/code&gt; or &lt;code&gt;__dirname&lt;/code&gt; under &lt;code&gt;node&lt;/code&gt; option. If you're looking for how to polyfill &lt;code&gt;fs&lt;/code&gt; alike in Node.js under webpack 5, please check &lt;a href=&quot;resolve#resolvefallback&quot;&gt;resolve.fallback&lt;/a&gt; for help.</source>
          <target state="translated">As of webpack 5, You can configure only &lt;code&gt;global&lt;/code&gt; , &lt;code&gt;__filename&lt;/code&gt; or &lt;code&gt;__dirname&lt;/code&gt; under &lt;code&gt;node&lt;/code&gt; option. If you're looking for how to polyfill &lt;code&gt;fs&lt;/code&gt; alike in Node.js under webpack 5, please check &lt;a href=&quot;resolve#resolvefallback&quot;&gt;resolve.fallback&lt;/a&gt; for help.</target>
        </trans-unit>
        <trans-unit id="558d80f59b888dab045df18cd2c8de1436f14ce7" translate="yes" xml:space="preserve">
          <source>As of webpack 5, you can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers&quot;&gt;Web Workers&lt;/a&gt; without &lt;a href=&quot;https://github.com/webpack-contrib/worker-loader&quot;&gt;&lt;code&gt;worker-loader&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">webpack 5부터 &lt;a href=&quot;https://github.com/webpack-contrib/worker-loader&quot;&gt; &lt;code&gt;worker-loader&lt;/code&gt; &lt;/a&gt; 없이 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers&quot;&gt;Web Workers&lt;/a&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a247a1d63593cb6d1bc2f0c6717d46973f87bde4" translate="yes" xml:space="preserve">
          <source>As result you will be able to write styles in the following way</source>
          <target state="translated">결과적으로 다음과 같은 방식으로 스타일을 작성할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="38d15410534b7d3bfa04aca75ecd4ce01c8a8218" translate="yes" xml:space="preserve">
          <source>As seen above, this example allows you to move only one lib to a separate file if and only if all conditions are met inside the function.</source>
          <target state="translated">위에서 볼 수 있듯이,이 예제를 사용하면 함수 내에서 모든 조건이 충족되는 경우에만 하나의 lib 만 별도의 파일로 이동할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7769c9d6940186a876c0cd4a81c28ac8be2d19e2" translate="yes" xml:space="preserve">
          <source>As seen from the options above there are multiple different deployment &lt;em&gt;targets&lt;/em&gt; that you can choose from. Below is a list of examples, and resources that you can refer to.</source>
          <target state="translated">위의 옵션에서 볼 수 있듯이 선택할 수 있는 여러 가지 배포 &lt;em&gt;대상&lt;/em&gt; 이 있습니다. 아래는 참조 할 수있는 예제 및 리소스 목록입니다.</target>
        </trans-unit>
        <trans-unit id="ec063a1e3499d7c2d9ad931898525a8ba3dc47ed" translate="yes" xml:space="preserve">
          <source>As seen from the options above, there are multiple deployment &lt;em&gt;targets&lt;/em&gt; that you can choose from. Below is a list of examples and resources that you can refer to.</source>
          <target state="translated">As seen from the options above, there are multiple deployment &lt;em&gt;targets&lt;/em&gt; that you can choose from. Below is a list of examples and resources that you can refer to.</target>
        </trans-unit>
        <trans-unit id="3fc480a3fee4eb7ad5ac702aeddd14502ed05115" translate="yes" xml:space="preserve">
          <source>As such, &lt;code&gt;config-loader&lt;/code&gt; does not call &lt;code&gt;Function&lt;/code&gt; configs with the &lt;code&gt;env&lt;/code&gt; parameter. Rather, it makes calls with only the &lt;code&gt;argv&lt;/code&gt; parameter.</source>
          <target state="translated">따라서 &lt;code&gt;config-loader&lt;/code&gt; 는 &lt;code&gt;env&lt;/code&gt; 매개 변수를 사용하여 &lt;code&gt;Function&lt;/code&gt; 구성을 호출하지 않습니다 . 오히려 &lt;code&gt;argv&lt;/code&gt; 매개 변수 만 사용하여 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="7b89684bc9174e839988ec6d4c93384d0bb22ca5" translate="yes" xml:space="preserve">
          <source>As such, &lt;code&gt;config-loader&lt;/code&gt; will also search for the following file extensions; &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.es6&lt;/code&gt;, &lt;code&gt;.flow&lt;/code&gt;, &lt;code&gt;.mjs&lt;/code&gt;, and &lt;code&gt;.ts&lt;/code&gt;.</source>
          <target state="translated">따라서 &lt;code&gt;config-loader&lt;/code&gt; 는 다음 파일 확장자도 검색합니다. &lt;code&gt;.js&lt;/code&gt; , &lt;code&gt;.es6&lt;/code&gt; , &lt;code&gt;.flow&lt;/code&gt; , &lt;code&gt;.mjs&lt;/code&gt; 및 &lt;code&gt;.ts&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1f630aa21f7b484fbf24d0c7efa912c4fd1ab196" translate="yes" xml:space="preserve">
          <source>As the article explains, webpack attempts to achieve partial scope hoisting. It will merge modules into a single scope but cannot do so in every case. If webpack cannot merge a module, the two alternatives are Prevent and Root. Prevent means the module must be in its own scope. Root means a new module group will be created. The following conditions determine the outcome:</source>
          <target state="translated">이 기사에서 설명하는 것처럼 웹팩은 부분 범위 게양을 달성하려고 시도합니다. 모듈을 단일 범위로 병합하지만 모든 경우에 그렇게 할 수는 없습니다. 웹팩이 모듈을 병합 할 수없는 경우 두 가지 대안은 예방 및 루트입니다. 방지는 모듈이 자체 범위 내에 있어야 함을 의미합니다. 루트는 새로운 모듈 그룹이 생성됨을 의미합니다. 다음 조건에 따라 결과가 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="700f1b6e3a37259eb4539cb2183991433e135229" translate="yes" xml:space="preserve">
          <source>As the compiler enters, resolves, and maps out your application, it keeps detailed notes on all your modules. This collection of data is called the &quot;Manifest&quot; and it's what the runtime will use to resolve and load modules once they've been bundled and shipped to the browser. No matter which &lt;a href=&quot;../api/module-methods&quot;&gt;module syntax&lt;/a&gt; you have chosen, those &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; statements have now become &lt;code&gt;__webpack_require__&lt;/code&gt; methods that point to module identifiers. Using the data in the manifest, the runtime will be able to find out where to retrieve the modules behind the identifiers.</source>
          <target state="translated">컴파일러가 응용 프로그램을 시작, 해결 및 매핑 할 때 모든 모듈에 대한 자세한 메모를 유지합니다. 이 데이터 콜렉션을 &quot;Manifest&quot;라고하며 런타임에 모듈을 번들로 제공하여 브라우저에 제공 한 후에 런타임에서 모듈을 분석하고로드하는 데 사용됩니다. 어떤 &lt;a href=&quot;../api/module-methods&quot;&gt;모듈 구문&lt;/a&gt; 을 선택 하든 해당 &lt;code&gt;import&lt;/code&gt; 또는 &lt;code&gt;require&lt;/code&gt; 문은 이제 모듈 식별자를 가리키는 &lt;code&gt;__webpack_require__&lt;/code&gt; 메서드 가되었습니다 . 매니페스트의 데이터를 사용하면 런타임에서 식별자 뒤에 모듈을 검색 할 위치를 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c4a2198306d5c8c5b38b5399a4f1ce95db24bc5d" translate="yes" xml:space="preserve">
          <source>As the compiler enters, resolves, and maps out your application, it keeps detailed notes on all your modules. This collection of data is called the &quot;Manifest,&quot; and it's what the runtime will use to resolve and load modules once they've been bundled and shipped to the browser. No matter which &lt;a href=&quot;../api/module-methods&quot;&gt;module syntax&lt;/a&gt; you have chosen, those &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; statements have now become &lt;code&gt;__webpack_require__&lt;/code&gt; methods that point to module identifiers. Using the data in the manifest, the runtime will be able to find out where to retrieve the modules behind the identifiers.</source>
          <target state="translated">As the compiler enters, resolves, and maps out your application, it keeps detailed notes on all your modules. This collection of data is called the &quot;Manifest,&quot; and it's what the runtime will use to resolve and load modules once they've been bundled and shipped to the browser. No matter which &lt;a href=&quot;../api/module-methods&quot;&gt;module syntax&lt;/a&gt; you have chosen, those &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; statements have now become &lt;code&gt;__webpack_require__&lt;/code&gt; methods that point to module identifiers. Using the data in the manifest, the runtime will be able to find out where to retrieve the modules behind the identifiers.</target>
        </trans-unit>
        <trans-unit id="f10ddd0d93eca345eb6876aae4f25be3381bdf3c" translate="yes" xml:space="preserve">
          <source>As the future is unknown we assume an environment similar to browsers and module system similar to ESM.</source>
          <target state="translated">As the future is unknown we assume an environment similar to browsers and module system similar to ESM.</target>
        </trans-unit>
        <trans-unit id="d971d9bb4eda944bd13cab2acc081d0be1a9dc2d" translate="yes" xml:space="preserve">
          <source>As we learned in &lt;a href=&quot;code-splitting&quot;&gt;code splitting&lt;/a&gt;, the &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;&lt;code&gt;SplitChunksPlugin&lt;/code&gt;&lt;/a&gt; can be used to split modules out into separate bundles. webpack provides an optimization feature to split runtime code into a separate chunk using the &lt;a href=&quot;../configuration/optimization#optimizationruntimechunk&quot;&gt;&lt;code&gt;optimization.runtimeChunk&lt;/code&gt;&lt;/a&gt; option. Set it to &lt;code&gt;single&lt;/code&gt; to create a single runtime bundle for all chunks:</source>
          <target state="translated">As we learned in &lt;a href=&quot;code-splitting&quot;&gt;code splitting&lt;/a&gt;, the &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt; &lt;code&gt;SplitChunksPlugin&lt;/code&gt; &lt;/a&gt; can be used to split modules out into separate bundles. webpack provides an optimization feature to split runtime code into a separate chunk using the &lt;a href=&quot;../configuration/optimization#optimizationruntimechunk&quot;&gt; &lt;code&gt;optimization.runtimeChunk&lt;/code&gt; &lt;/a&gt; option. Set it to &lt;code&gt;single&lt;/code&gt; to create a single runtime bundle for all chunks:</target>
        </trans-unit>
        <trans-unit id="4caa0aeb2816346fe0c1c740ab1d84942c4b055a" translate="yes" xml:space="preserve">
          <source>As we learned in &lt;a href=&quot;code-splitting&quot;&gt;code splitting&lt;/a&gt;, the &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;&lt;code&gt;SplitChunksPlugin&lt;/code&gt;&lt;/a&gt; can be used to split modules out into separate bundles. webpack provides an optimization feature which does split out runtime code into a separate chunk(s) according to the options provided, simply use &lt;a href=&quot;../configuration/optimization#optimization-runtimechunk&quot;&gt;&lt;code&gt;optimization.runtimeChunk&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;single&lt;/code&gt; for creating one runtime bundle:</source>
          <target state="translated">우리가 배운대로 &lt;a href=&quot;code-splitting&quot;&gt;코드 분할&lt;/a&gt; 의 &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt; &lt;code&gt;SplitChunksPlugin&lt;/code&gt; 는&lt;/a&gt; 별도의 번들로에서 분리 모듈을 사용할 수 있습니다. webpack은 제공된 옵션에 따라 런타임 코드를 별도의 청크로 분할하는 최적화 기능을 제공합니다. 간단히 하나의 런타임 번들을 만들기 위해 &lt;a href=&quot;../configuration/optimization#optimization-runtimechunk&quot;&gt; &lt;code&gt;optimization.runtimeChunk&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;single&lt;/code&gt; 로 설정하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="cb80d81d52e645cdab93bd2b7ef7db2fcdde5f63" translate="yes" xml:space="preserve">
          <source>As with many other features, webpack's power lies in its customizability. There are &lt;em&gt;many&lt;/em&gt; ways of configuring HMR depending on the needs of a particular project. However, for most purposes, &lt;code&gt;webpack-dev-server&lt;/code&gt; is a good fit and will allow you to get started with HMR quickly.</source>
          <target state="translated">다른 많은 기능과 마찬가지로, 웹팩의 기능은 사용자 정의 기능에 있습니다. 있습니다 &lt;em&gt;많은&lt;/em&gt; 특정 프로젝트의 필요에 따라 HMR을 구성하는 방법. 그러나 대부분의 경우 &lt;code&gt;webpack-dev-server&lt;/code&gt; 가 적합하며 HMR을 빠르게 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c6b92d3ead73a6d6e6ab42c58e7a01d45dff4fac" translate="yes" xml:space="preserve">
          <source>As with the &lt;code&gt;compiler&lt;/code&gt;, &lt;code&gt;tapAsync&lt;/code&gt; and &lt;code&gt;tapPromise&lt;/code&gt; may also be available depending on the type of hook.</source>
          <target state="translated">와 같이 &lt;code&gt;compiler&lt;/code&gt; , &lt;code&gt;tapAsync&lt;/code&gt; 및 &lt;code&gt;tapPromise&lt;/code&gt; 는 또한 후크의 종류에 따라 사용할 수있다.</target>
        </trans-unit>
        <trans-unit id="3506c2c1dee509c9ca5ad999c0812f77b35a66c0" translate="yes" xml:space="preserve">
          <source>As you can see below, not only error message, but also details about which loader and module are involved:</source>
          <target state="translated">As you can see below, not only error message, but also details about which loader and module are involved:</target>
        </trans-unit>
        <trans-unit id="51dbc376a14d0853c9fc00dfc6b8a306ee6103db" translate="yes" xml:space="preserve">
          <source>As you can see the bundle's name now reflects its content (via the hash). If we run another build without making any changes, we'd expect that filename to stay the same. However, if we were to run it again, we may find that this is not the case:</source>
          <target state="translated">보시다시피 번들 이름은 이제 해시를 통해 해당 내용을 반영합니다. 변경하지 않고 다른 빌드를 실행하면 파일 이름이 동일하게 유지됩니다. 그러나 다시 실행하면 이것이 사실이 아님을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="227e43456c82f12e8082593bece70ecb61f0ed0b" translate="yes" xml:space="preserve">
          <source>As you can see there's another &lt;code&gt;runtime.bundle.js&lt;/code&gt; file generated besides &lt;code&gt;shared.bundle.js&lt;/code&gt;, &lt;code&gt;index.bundle.js&lt;/code&gt; and &lt;code&gt;another.bundle.js&lt;/code&gt;.</source>
          <target state="translated">As you can see there's another &lt;code&gt;runtime.bundle.js&lt;/code&gt; file generated besides &lt;code&gt;shared.bundle.js&lt;/code&gt; , &lt;code&gt;index.bundle.js&lt;/code&gt; and &lt;code&gt;another.bundle.js&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e742e3926ed42af381ce201a5b3a6d944d85ebda" translate="yes" xml:space="preserve">
          <source>As you can see, we now have 2 extra files being generated; &lt;code&gt;service-worker.js&lt;/code&gt; and the more verbose &lt;code&gt;precache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js&lt;/code&gt;. &lt;code&gt;service-worker.js&lt;/code&gt; is the Service Worker file and &lt;code&gt;precache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js&lt;/code&gt; is a file that &lt;code&gt;service-worker.js&lt;/code&gt; requires so it can run. Your own generated files will likely be different; but you should have a &lt;code&gt;service-worker.js&lt;/code&gt; file there.</source>
          <target state="translated">As you can see, we now have 2 extra files being generated; &lt;code&gt;service-worker.js&lt;/code&gt; and the more verbose &lt;code&gt;precache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js&lt;/code&gt; . &lt;code&gt;service-worker.js&lt;/code&gt; is the Service Worker file and &lt;code&gt;precache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js&lt;/code&gt; is a file that &lt;code&gt;service-worker.js&lt;/code&gt; requires so it can run. Your own generated files will likely be different; but you should have a &lt;code&gt;service-worker.js&lt;/code&gt; file there.</target>
        </trans-unit>
        <trans-unit id="9b452821f7d7a723157136a4c6eeebe9b71c666e" translate="yes" xml:space="preserve">
          <source>As you can see, we now have 2 extra files being generated; &lt;code&gt;service-worker.js&lt;/code&gt; and the more verbose &lt;code&gt;precache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js&lt;/code&gt;. &lt;code&gt;service-worker.js&lt;/code&gt; is the Service Worker file and &lt;code&gt;precache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js&lt;/code&gt; is a file that &lt;code&gt;service-worker.js&lt;/code&gt; requires so it can run. Your own generated files will likely be different; but you should have an &lt;code&gt;service-worker.js&lt;/code&gt; file there.</source>
          <target state="translated">보시다시피, 이제 2 개의 추가 파일이 생성됩니다. &lt;code&gt;service-worker.js&lt;/code&gt; 및 더 자세한 &lt;code&gt;precache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js&lt;/code&gt; . &lt;code&gt;service-worker.js&lt;/code&gt; 는 서비스 워커 파일이고 &lt;code&gt;precache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js&lt;/code&gt; 는 &lt;code&gt;service-worker.js&lt;/code&gt; 가 실행하기 위해 필요한 파일입니다 . 자신이 생성 한 파일은 다를 수 있습니다. 그러나 &lt;code&gt;service-worker.js&lt;/code&gt; 파일이 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="f1f884a0ec525533f5b5a7b6609079c49d270f22" translate="yes" xml:space="preserve">
          <source>As you might have noticed over the past guides and code example, our &lt;code&gt;/dist&lt;/code&gt; folder has become quite cluttered. Webpack will generate the files and put them in the &lt;code&gt;/dist&lt;/code&gt; folder for you, but it doesn't keep track of which files are actually in use by your project.</source>
          <target state="translated">지난 가이드와 코드 예제를 통해 알 수 있듯이 &lt;code&gt;/dist&lt;/code&gt; 폴더는 상당히 어수선 해졌습니다. Webpack은 파일을 생성하여 &lt;code&gt;/dist&lt;/code&gt; 폴더에 넣지 만 프로젝트에서 실제로 사용중인 파일은 추적하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="561f91cdae97e444267d6a081e99be0a780486e7" translate="yes" xml:space="preserve">
          <source>Aside from applications, webpack can also be used to bundle JavaScript libraries. The following guide is meant for library authors looking to streamline their bundling strategy.</source>
          <target state="translated">응용 프로그램 외에도 웹팩을 사용하여 JavaScript 라이브러리를 번들 할 수도 있습니다. 다음 안내서는 번들링 전략을 간소화하려는 라이브러리 작성자를위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="a00f742154bdb116b4a0f55ce9198b2f7af3d591" translate="yes" xml:space="preserve">
          <source>Aside from the module syntaxes described above, webpack also allows a few custom, webpack-specific methods:</source>
          <target state="translated">위에서 설명한 모듈 구문 외에도 webpack은 몇 가지 사용자 정의 웹팩 관련 메소드를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="5ec47dd14a3398efaa918c531afe96c8a53510dd" translate="yes" xml:space="preserve">
          <source>Asset Management</source>
          <target state="translated">자산 관리</target>
        </trans-unit>
        <trans-unit id="de6c4ef58235821807d5884f05be21f06befd6bc" translate="yes" xml:space="preserve">
          <source>Asset Modules</source>
          <target state="translated">Asset Modules</target>
        </trans-unit>
        <trans-unit id="8fd246cc1f81d70824e35e3543006904e22cad56" translate="yes" xml:space="preserve">
          <source>Asset Modules is a type of module that allows one to use asset files (fonts, icons, etc) without configuring additional loaders.</source>
          <target state="translated">Asset Modules is a type of module that allows one to use asset files (fonts, icons, etc) without configuring additional loaders.</target>
        </trans-unit>
        <trans-unit id="e0589977b4528a59664383b0e53fdcad28bd12fa" translate="yes" xml:space="preserve">
          <source>Asset Modules type replaces all of these loaders by adding 4 new module types:</source>
          <target state="translated">Asset Modules type replaces all of these loaders by adding 4 new module types:</target>
        </trans-unit>
        <trans-unit id="869cd919f22cac6b0848c42ec9f0a3b5003dd96d" translate="yes" xml:space="preserve">
          <source>Asset Objects</source>
          <target state="translated">자산 객체</target>
        </trans-unit>
        <trans-unit id="e4c71877aeecfa90a9470e26f4d1b67368340710" translate="yes" xml:space="preserve">
          <source>Asset processing.</source>
          <target state="translated">Asset processing.</target>
        </trans-unit>
        <trans-unit id="4dd6dfecb14c43b7a7a50e8294fdb78636cf167f" translate="yes" xml:space="preserve">
          <source>Asset's &lt;code&gt;info&lt;/code&gt; property is available since webpack v4.40.0</source>
          <target state="translated">Asset's &lt;code&gt;info&lt;/code&gt; property is available since webpack v4.40.0</target>
        </trans-unit>
        <trans-unit id="20e338624cee29d0effead85b0dd0e70de783b4c" translate="yes" xml:space="preserve">
          <source>Assets</source>
          <target state="translated">Assets</target>
        </trans-unit>
        <trans-unit id="93b79dedfff05c8d25a69f5233e7a47bb99d47dc" translate="yes" xml:space="preserve">
          <source>Assign modules to a cache group by module layer.</source>
          <target state="translated">모듈 계층별로 캐시 그룹에 모듈을 할당합니다.</target>
        </trans-unit>
        <trans-unit id="ded40437156e10fad5c1591656b307f57200da43" translate="yes" xml:space="preserve">
          <source>Assigns &lt;code&gt;depth&lt;/code&gt; to the given module and its dependency blocks recursively.</source>
          <target state="translated">Assigns &lt;code&gt;depth&lt;/code&gt; to the given module and its dependency blocks recursively.</target>
        </trans-unit>
        <trans-unit id="db37f55867798c63094a75db06886660e91436bf" translate="yes" xml:space="preserve">
          <source>Async</source>
          <target state="translated">Async</target>
        </trans-unit>
        <trans-unit id="d5708c56da0423a09cbb150f79ed85fab6c809e6" translate="yes" xml:space="preserve">
          <source>Async function:</source>
          <target state="translated">Async function:</target>
        </trans-unit>
        <trans-unit id="9c1ce282683fce7bb8c48ec88a9223e36f3e7a42" translate="yes" xml:space="preserve">
          <source>Async loading</source>
          <target state="translated">비동기 로딩</target>
        </trans-unit>
        <trans-unit id="256755156b47b213221f1a23ad8abb54f3a53985" translate="yes" xml:space="preserve">
          <source>Asynchronous Loaders</source>
          <target state="translated">비동기 로더</target>
        </trans-unit>
        <trans-unit id="b513c2cb40cb46c8be4a58fd1b68c9ae22d44bd8" translate="yes" xml:space="preserve">
          <source>Asynchronous Module Definition</source>
          <target state="translated">비동기 모듈 정의</target>
        </trans-unit>
        <trans-unit id="e3ceaf6cd3b4efd2c02f268aa98321ba6d6764bc" translate="yes" xml:space="preserve">
          <source>Asynchronous Module Definition (AMD) is a JavaScript specification that defines an interface for writing and loading modules. The following AMD methods are supported by webpack:</source>
          <target state="translated">비동기 모듈 정의 (AMD)는 모듈을 작성하고로드하기위한 인터페이스를 정의하는 JavaScript 사양입니다. 다음과 같은 AMD 방법이 웹팩에서 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="cd9863c31ed6b5c45aedadd65a76ca05d9a8fb46" translate="yes" xml:space="preserve">
          <source>Asynchronous vs Deferred JavaScript</source>
          <target state="translated">Asynchronous vs Deferred JavaScript</target>
        </trans-unit>
        <trans-unit id="355609822cd991b261e9f87c0a921684c0bf5d58" translate="yes" xml:space="preserve">
          <source>At a high level, &lt;strong&gt;loaders&lt;/strong&gt; have two properties in your webpack configuration:</source>
          <target state="translated">높은 수준의 &lt;strong&gt;로더&lt;/strong&gt; 는 웹팩 구성에 두 가지 특성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="88c725f128f01349ec14aac704b5251d418a4820" translate="yes" xml:space="preserve">
          <source>At its core, &lt;strong&gt;webpack&lt;/strong&gt; is a &lt;em&gt;static module bundler&lt;/em&gt; for modern JavaScript applications. When webpack processes your application, it internally builds a &lt;a href=&quot;dependency-graph&quot;&gt;dependency graph&lt;/a&gt; which maps every module your project needs and generates one or more &lt;em&gt;bundles&lt;/em&gt;.</source>
          <target state="translated">At its core, &lt;strong&gt;webpack&lt;/strong&gt; is a &lt;em&gt;static module bundler&lt;/em&gt; for modern JavaScript applications. When webpack processes your application, it internally builds a &lt;a href=&quot;dependency-graph&quot;&gt;dependency graph&lt;/a&gt; which maps every module your project needs and generates one or more &lt;em&gt;bundles&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="0bf38b80d843db75526ba6513ee39a89e444bffa" translate="yes" xml:space="preserve">
          <source>At its core, &lt;strong&gt;webpack&lt;/strong&gt; is a &lt;em&gt;static module bundler&lt;/em&gt; for modern JavaScript applications. When webpack processes your application, it internally builds a &lt;em&gt;dependency graph&lt;/em&gt; which maps every module your project needs and generates one or more &lt;em&gt;bundles&lt;/em&gt;.</source>
          <target state="translated">핵심적으로 &lt;strong&gt;webpack&lt;/strong&gt; 은 최신 JavaScript 응용 프로그램을위한 &lt;em&gt;정적 모듈 번 &lt;/em&gt;&lt;strong&gt;들러&lt;/strong&gt; 입니다 . 웹팩은 애플리케이션을 처리 할 때 프로젝트에 필요한 모든 모듈을 매핑하고 하나 이상의 &lt;em&gt;번들을&lt;/em&gt; 생성 하는 &lt;em&gt;종속성 그래프&lt;/em&gt; 를 내부적으로 빌드합니다.&lt;em&gt;&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="8f284d21abf0634445b2b4c1505e62fbcc4e82c3" translate="yes" xml:space="preserve">
          <source>Attempt to resolve these extensions in order.</source>
          <target state="translated">Attempt to resolve these extensions in order.</target>
        </trans-unit>
        <trans-unit id="1c04493b5b97dbe317e50f2e44133ccbc4c4fd45" translate="yes" xml:space="preserve">
          <source>Attempts to search for a module by its identifier.</source>
          <target state="translated">Attempts to search for a module by its identifier.</target>
        </trans-unit>
        <trans-unit id="5967cde5d313643d89aba86fac277df19fade726" translate="yes" xml:space="preserve">
          <source>Authoring Libraries</source>
          <target state="translated">제작 라이브러리</target>
        </trans-unit>
        <trans-unit id="e275fdd84f813df47721bdb4af16f3be22fa912d" translate="yes" xml:space="preserve">
          <source>Authoring a Library</source>
          <target state="translated">라이브러리 작성</target>
        </trans-unit>
        <trans-unit id="872519df27b7f474838a2de064504ec253d0766d" translate="yes" xml:space="preserve">
          <source>Auto-install missing dependencies during development</source>
          <target state="translated">개발 중 누락 된 종속성 자동 설치</target>
        </trans-unit>
        <trans-unit id="e99ad70044b87ea1a0ceea6e97b7d1c6416f2a24" translate="yes" xml:space="preserve">
          <source>Auto-installs &lt;code&gt;.babelrc&lt;/code&gt; plugins &amp;amp; presets.</source>
          <target state="translated">Auto-installs &lt;code&gt;.babelrc&lt;/code&gt; plugins &amp;amp; presets.</target>
        </trans-unit>
        <trans-unit id="dac7381e53d100247eea4419089983ef5efacac4" translate="yes" xml:space="preserve">
          <source>Auto-installs missing &lt;code&gt;peerDependencies&lt;/code&gt;. (e.g. &lt;code&gt;@cycle/core&lt;/code&gt; will automatically install &lt;code&gt;rx@*&lt;/code&gt;)</source>
          <target state="translated">Auto-installs missing &lt;code&gt;peerDependencies&lt;/code&gt; . (e.g. &lt;code&gt;@cycle/core&lt;/code&gt; will automatically install &lt;code&gt;rx@*&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="d3c21ffbbe54cf3b70e05de3916febef03b0ca8a" translate="yes" xml:space="preserve">
          <source>Automatic Dependency Collection</source>
          <target state="translated">Automatic Dependency Collection</target>
        </trans-unit>
        <trans-unit id="700b001013b18cc91376d35fdeb0a4dcf4351d33" translate="yes" xml:space="preserve">
          <source>Automatic and explicit loaders and params up to the name of the first loader</source>
          <target state="translated">첫 번째 로더 이름까지 자동 및 명시 적 로더 및 매개 변수</target>
        </trans-unit>
        <trans-unit id="edd617309d56e34ddaee3650f46adb6add6fe476" translate="yes" xml:space="preserve">
          <source>AutomaticPrefetchPlugin</source>
          <target state="translated">AutomaticPrefetchPlugin</target>
        </trans-unit>
        <trans-unit id="f68df541e29b0ef6587187052390153857e1b26a" translate="yes" xml:space="preserve">
          <source>Automatically adding &lt;code&gt;imagemin-loader&lt;/code&gt; (require for minification images using in &lt;code&gt;url-loader&lt;/code&gt;, &lt;code&gt;svg-url-loader&lt;/code&gt; or other)</source>
          <target state="translated">Automatically adding &lt;code&gt;imagemin-loader&lt;/code&gt; (require for minification images using in &lt;code&gt;url-loader&lt;/code&gt; , &lt;code&gt;svg-url-loader&lt;/code&gt; or other)</target>
        </trans-unit>
        <trans-unit id="e8ffdd9326ba45af3d1016b17bbc221d8b7ad4e4" translate="yes" xml:space="preserve">
          <source>Automatically adding &lt;code&gt;imagemin-loader&lt;/code&gt;.</source>
          <target state="translated">Automatically adding &lt;code&gt;imagemin-loader&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="53bc64715746dad3d497c776d455d9eda6570eff" translate="yes" xml:space="preserve">
          <source>Automatically injects styles into the DOM using multiple &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt;. It is &lt;strong&gt;default&lt;/strong&gt; behaviour.</source>
          <target state="translated">Automatically injects styles into the DOM using multiple &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; . It is &lt;strong&gt;default&lt;/strong&gt; behaviour.</target>
        </trans-unit>
        <trans-unit id="8bc0298a969902c80251a26238f1de480d84d6fc" translate="yes" xml:space="preserve">
          <source>Automatically injects styles into the DOM using one &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Automatically injects styles into the DOM using one &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="edba83607c98ffa4a857d0755f4fdb5ca0012bb9" translate="yes" xml:space="preserve">
          <source>Automatically load modules instead of having to &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; them everywhere.</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; 오거나 &lt;code&gt;require&lt;/code&gt; 하지 않고 자동으로 모듈로드어디서나 .</target>
        </trans-unit>
        <trans-unit id="393c1fe52a83083dd8d731e476ee7e8a32a575d7" translate="yes" xml:space="preserve">
          <source>Automatically resolve certain extensions. This defaults to:</source>
          <target state="translated">특정 확장명을 자동으로 해결합니다. 기본값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d12122d23d31efdd7f261aefce27184c7c6a9767" translate="yes" xml:space="preserve">
          <source>Autoprefixer</source>
          <target state="translated">Autoprefixer</target>
        </trans-unit>
        <trans-unit id="057b4b33c8569c09b413019743ff85bf2e11c330" translate="yes" xml:space="preserve">
          <source>Available options:</source>
          <target state="translated">사용 가능한 옵션 :</target>
        </trans-unit>
        <trans-unit id="c0b85e56165c1e2e99b7b0b9d0734322c972677c" translate="yes" xml:space="preserve">
          <source>Available placeholders: &lt;code&gt;[file]&lt;/code&gt;, &lt;code&gt;[query]&lt;/code&gt; and &lt;code&gt;[filebase]&lt;/code&gt; (&lt;code&gt;[base]&lt;/code&gt; for webpack 5).</source>
          <target state="translated">Available placeholders: &lt;code&gt;[file]&lt;/code&gt; , &lt;code&gt;[query]&lt;/code&gt; and &lt;code&gt;[filebase]&lt;/code&gt; ( &lt;code&gt;[base]&lt;/code&gt; for webpack 5).</target>
        </trans-unit>
        <trans-unit id="830858aa7eeb9296a603df302ca6e0badf5b363a" translate="yes" xml:space="preserve">
          <source>Available since webpack 4.39.0</source>
          <target state="translated">Available since webpack 4.39.0</target>
        </trans-unit>
        <trans-unit id="f6ee185146e00a9b33ebaf271577529afae2c04b" translate="yes" xml:space="preserve">
          <source>Available since webpack 4.40.0</source>
          <target state="translated">Available since webpack 4.40.0</target>
        </trans-unit>
        <trans-unit id="1013558956f3b311fe88097fce5c781452224445" translate="yes" xml:space="preserve">
          <source>Available: 5.17.0+</source>
          <target state="translated">사용 가능 : 5.17.0+</target>
        </trans-unit>
        <trans-unit id="5f85168845f760fc0b49d0fa869255b2b11ba3a8" translate="yes" xml:space="preserve">
          <source>Available: 5.21.0+</source>
          <target state="translated">사용 가능 : 5.21.0+</target>
        </trans-unit>
        <trans-unit id="e1fb168e83495e010c9eb184a616e08e01099c13" translate="yes" xml:space="preserve">
          <source>Available: 5.22.0+</source>
          <target state="translated">사용 가능 : 5.22.0+</target>
        </trans-unit>
        <trans-unit id="f28386f4f572bf1ea0d0d64767d5be40e0d2d827" translate="yes" xml:space="preserve">
          <source>Avoid &lt;code&gt;inline-***&lt;/code&gt; and &lt;code&gt;eval-***&lt;/code&gt; use in production as they can increase bundle size and reduce the overall performance.</source>
          <target state="translated">번들 크기를 늘리고 전체 성능을 저하시킬 수 있으므로 프로덕션에서 &lt;code&gt;inline-***&lt;/code&gt; 및 &lt;code&gt;eval-***&lt;/code&gt; 사용을 피하십시오 .</target>
        </trans-unit>
        <trans-unit id="4d9a8515bcc5bd8f608f25a7c98f070fb3983317" translate="yes" xml:space="preserve">
          <source>Avoid Extra Optimization Steps</source>
          <target state="translated">추가 최적화 단계를 피하십시오</target>
        </trans-unit>
        <trans-unit id="0a2e1880b2545aae1b10456c9052d8a573546a5f" translate="yes" xml:space="preserve">
          <source>Avoid Production Specific Tooling</source>
          <target state="translated">생산 별 툴링 피하기</target>
        </trans-unit>
        <trans-unit id="da10146597760b1069c5c3a2202261b9d0c7a785" translate="yes" xml:space="preserve">
          <source>Avoid the &lt;code&gt;default&lt;/code&gt; export. It's handled differently between tooling. Only use named exports.</source>
          <target state="translated">Avoid the &lt;code&gt;default&lt;/code&gt; export. It's handled differently between tooling. Only use named exports.</target>
        </trans-unit>
        <trans-unit id="0ad961b259a0254bc5b2251b3c70c318d0409c1f" translate="yes" xml:space="preserve">
          <source>Avoid using these options as they are &lt;strong&gt;deprecated&lt;/strong&gt; and will soon be removed.</source>
          <target state="translated">이 옵션은 &lt;strong&gt;더 이상 사용되지 않으며&lt;/strong&gt; 곧 제거 될 예정 이므로 사용하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="42d01158bb88bd3a5711c54c4c55ac555ed9e86c" translate="yes" xml:space="preserve">
          <source>Avoid using this option as it is &lt;strong&gt;deprecated&lt;/strong&gt; and will soon be removed.</source>
          <target state="translated">이 옵션은 &lt;strong&gt;더 이상 사용되지 않으며&lt;/strong&gt; 곧 제거 될 예정 이므로 &lt;strong&gt;사용&lt;/strong&gt; 하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="ca6ca17b1b8bc4b9e134f498f97a406593824b90" translate="yes" xml:space="preserve">
          <source>Awesome</source>
          <target state="translated">Awesome</target>
        </trans-unit>
        <trans-unit id="f3bf8dee016caf43ae3970fbea5f976d54898ed9" translate="yes" xml:space="preserve">
          <source>Babel</source>
          <target state="translated">Babel</target>
        </trans-unit>
        <trans-unit id="5b478ad9bea66e33f8806fe711651bc27ba1a766" translate="yes" xml:space="preserve">
          <source>Babel and JSX</source>
          <target state="translated">바벨과 JSX</target>
        </trans-unit>
        <trans-unit id="14d06d2d957a4360ee64189c91a0a88406fdfc03" translate="yes" xml:space="preserve">
          <source>Babel is injecting helpers into each file and bloating my code!</source>
          <target state="translated">Babel is injecting helpers into each file and bloating my code!</target>
        </trans-unit>
        <trans-unit id="ed8098f9c9f0928947694c7a20a4f24f5b7f5c60" translate="yes" xml:space="preserve">
          <source>Babel uses very small helpers for common functions such as &lt;code&gt;_extend&lt;/code&gt;. By default, this will be added to every file that requires it.</source>
          <target state="translated">Babel uses very small helpers for common functions such as &lt;code&gt;_extend&lt;/code&gt; . By default, this will be added to every file that requires it.</target>
        </trans-unit>
        <trans-unit id="ee81f2864adad3a5a2b97e6eb80a72781cfb196b" translate="yes" xml:space="preserve">
          <source>BabelMinifyWebpackPlugin</source>
          <target state="translated">BabelMinifyWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="31606e55fcdfff742f333464058778f924d6caaf" translate="yes" xml:space="preserve">
          <source>BannerPlugin</source>
          <target state="translated">BannerPlugin</target>
        </trans-unit>
        <trans-unit id="1693255137e306c6fc37382f7e13919926f5e27e" translate="yes" xml:space="preserve">
          <source>Base Configuration</source>
          <target state="translated">기본 구성</target>
        </trans-unit>
        <trans-unit id="affc789cd2262c78b33724625ffb28c58d73e7e1" translate="yes" xml:space="preserve">
          <source>Base Configuration with source map</source>
          <target state="translated">Base Configuration with source map</target>
        </trans-unit>
        <trans-unit id="4aa886e6f39d2bffc90bccdc5dbe407b7c0e162f" translate="yes" xml:space="preserve">
          <source>Base directory for the cache. Defaults to &lt;code&gt;node_modules/.cache/webpack&lt;/code&gt;.</source>
          <target state="translated">Base directory for the cache. Defaults to &lt;code&gt;node_modules/.cache/webpack&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="aa2c96dacf00c451ef465f6115a45a20bccf1256" translate="yes" xml:space="preserve">
          <source>Basic</source>
          <target state="translated">Basic</target>
        </trans-unit>
        <trans-unit id="dac6b24f78471a132bc9a7ec7774530351b54fb0" translate="yes" xml:space="preserve">
          <source>Basic Example</source>
          <target state="translated">기본 예</target>
        </trans-unit>
        <trans-unit id="27c201541e9702b97c568e12cac1d3cd5245954c" translate="yes" xml:space="preserve">
          <source>Basic Setup</source>
          <target state="translated">기본 설정</target>
        </trans-unit>
        <trans-unit id="b20cbc384159fd820ed034fd3615298ec09f5902" translate="yes" xml:space="preserve">
          <source>Basic Usage</source>
          <target state="translated">기본 사용법</target>
        </trans-unit>
        <trans-unit id="66434b09cff80cd56df08ac98d63f8cf507d34a2" translate="yes" xml:space="preserve">
          <source>Basic Use Case</source>
          <target state="translated">기본 사용 사례</target>
        </trans-unit>
        <trans-unit id="4b3830bb5526616c074490e652de38338995aac6" translate="yes" xml:space="preserve">
          <source>Be aware of the performance differences between the different &lt;code&gt;devtool&lt;/code&gt; settings.</source>
          <target state="translated">Be aware of the performance differences between the different &lt;code&gt;devtool&lt;/code&gt; settings.</target>
        </trans-unit>
        <trans-unit id="67d0377c9b7724fe212d1da75f2843ecaabdb145" translate="yes" xml:space="preserve">
          <source>Be aware of the performance differences of the different &lt;code&gt;devtool&lt;/code&gt; settings.</source>
          <target state="translated">다른 &lt;code&gt;devtool&lt;/code&gt; 설정 의 성능 차이에 유의하십시오 .</target>
        </trans-unit>
        <trans-unit id="49c7f9b7366eda8a24ccd7fe6b0dadf7e181c418" translate="yes" xml:space="preserve">
          <source>Be aware that if &lt;code&gt;MyLibrary&lt;/code&gt; isn't defined earlier your library will be set in global scope.</source>
          <target state="translated">&lt;code&gt;MyLibrary&lt;/code&gt; 인 경우 이전에 정의되지 않은 라이브러리는 전역 범위에서 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="64490bb96bb85507b6b0bdf1653ed21abd927a7a" translate="yes" xml:space="preserve">
          <source>Be aware that if you use ES6 module imports in your entry file the &lt;code&gt;__webpack_public_path__&lt;/code&gt; assignment will be done after the imports. In such cases, you'll have to move the public path assignment to its own dedicated module and then import it on top of your entry.js:</source>
          <target state="translated">입력 파일에서 ES6 모듈 가져 오기를 사용하는 경우 가져 오기 후에 &lt;code&gt;__webpack_public_path__&lt;/code&gt; 할당이 수행됩니다. 이 경우 공개 경로 할당을 전용 모듈로 옮긴 다음 entry.js 위에 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="a1cce8abc11175aa5de9add096d1e9aa89f4ed20" translate="yes" xml:space="preserve">
          <source>Be aware that when &lt;a href=&quot;configuration-types#exporting-multiple-configurations&quot;&gt;exporting multiple configurations&lt;/a&gt; only the &lt;code&gt;devServer&lt;/code&gt; options for the first configuration will be taken into account and used for all the configurations in the array.</source>
          <target state="translated">&lt;a href=&quot;configuration-types#exporting-multiple-configurations&quot;&gt;여러 구성을 내보낼&lt;/a&gt; 때는 첫 번째 구성에 대한 &lt;code&gt;devServer&lt;/code&gt; 옵션 만 고려하여 어레이의 모든 구성에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="bf8b36e3f2bb96029493af5379ceb61ba054f795" translate="yes" xml:space="preserve">
          <source>Be careful! The resource is the &lt;em&gt;resolved&lt;/em&gt; path of the file, which means symlinked resources are the real path &lt;em&gt;not&lt;/em&gt; the symlink location. This is good to remember when using tools that symlink packages (like &lt;code&gt;npm link&lt;/code&gt;), common conditions like &lt;code&gt;/node_modules/&lt;/code&gt; may inadvertently miss symlinked files. Note that you can turn off symlink resolving (so that resources are resolved to the symlink path) via &lt;a href=&quot;resolve#resolve-symlinks&quot;&gt;&lt;code&gt;resolve.symlinks&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">조심해! 리소스는 파일 의 &lt;em&gt;확인 된&lt;/em&gt; 경로이므로 심볼릭 링크 된 리소스는 심볼릭 링크 위치가 &lt;em&gt;아닌&lt;/em&gt; 실제 경로 입니다. 이는 &lt;code&gt;npm link&lt;/code&gt; 와 같은 패키지를 심볼릭 링크하는 도구를 사용할 때 &lt;code&gt;/node_modules/&lt;/code&gt; 와 같은 일반적인 조건 이 심볼릭 링크 된 파일을 실수로 놓칠 수 있음을 기억하는 것이 좋습니다 . &lt;a href=&quot;resolve#resolve-symlinks&quot;&gt; &lt;code&gt;resolve.symlinks&lt;/code&gt; &lt;/a&gt; 를 통해 심볼릭 링크 해결 (자원이 심볼릭 링크 경로로 분석되도록)을 해제 할 수 있습니다. .</target>
        </trans-unit>
        <trans-unit id="a8f33abdbd7b625296f1f0d222a1be8e10ce53b7" translate="yes" xml:space="preserve">
          <source>Be careful! The resource is the &lt;em&gt;resolved&lt;/em&gt; path of the file, which means symlinked resources are the real path &lt;em&gt;not&lt;/em&gt; the symlink location. This is good to remember when using tools that symlink packages (like &lt;code&gt;npm link&lt;/code&gt;), common conditions like &lt;code&gt;/node_modules/&lt;/code&gt; may inadvertently miss symlinked files. Note that you can turn off symlink resolving (so that resources are resolved to the symlink path) via &lt;a href=&quot;resolve#resolvesymlinks&quot;&gt;&lt;code&gt;resolve.symlinks&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Be careful! The resource is the &lt;em&gt;resolved&lt;/em&gt; path of the file, which means symlinked resources are the real path &lt;em&gt;not&lt;/em&gt; the symlink location. This is good to remember when using tools that symlink packages (like &lt;code&gt;npm link&lt;/code&gt; ), common conditions like &lt;code&gt;/node_modules/&lt;/code&gt; may inadvertently miss symlinked files. Note that you can turn off symlink resolving (so that resources are resolved to the symlink path) via &lt;a href=&quot;resolve#resolvesymlinks&quot;&gt; &lt;code&gt;resolve.symlinks&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8323e585bf6abf466094a1c8f4375995ea8fccd5" translate="yes" xml:space="preserve">
          <source>Bear in mind that when you define &lt;code&gt;configFile&lt;/code&gt;, &lt;code&gt;eslint&lt;/code&gt; doesn't automatically look for &lt;code&gt;.eslintrc&lt;/code&gt; files in the directory of the file to be linted. More information is available in official eslint documentation in section &lt;a href=&quot;http://eslint.org/docs/user-guide/configuring#using-configuration-files&quot;&gt;&lt;em&gt;Using Configuration Files&lt;/em&gt;&lt;/a&gt;. See &lt;a href=&quot;https://github.com/webpack-contrib/eslint-loader/issues/129&quot;&gt;#129&lt;/a&gt;.</source>
          <target state="translated">당신이 정의 할 때 명심 &lt;code&gt;configFile&lt;/code&gt; , &lt;code&gt;eslint&lt;/code&gt; 이 자동으로 찾지 않는 &lt;code&gt;.eslintrc&lt;/code&gt; 파일의 디렉토리에있는 파일은 linted합니다. 자세한 내용은 공식 eslint 설명서에서 &lt;a href=&quot;http://eslint.org/docs/user-guide/configuring#using-configuration-files&quot;&gt;&lt;em&gt;구성 파일 사용&lt;/em&gt;&lt;/a&gt; 섹션을 참조하십시오 . &lt;a href=&quot;https://github.com/webpack-contrib/eslint-loader/issues/129&quot;&gt;# 129&lt;/a&gt; 참조 .</target>
        </trans-unit>
        <trans-unit id="b8c835ecb895d167e27e8fef4a309459803e0e27" translate="yes" xml:space="preserve">
          <source>Because JavaScript can be written for both server and browser, webpack offers multiple deployment &lt;em&gt;targets&lt;/em&gt; that you can set in your webpack &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="translated">JavaScript는 서버와 브라우저 모두에 대해 작성 될 수 있으므로 웹팩은 웹팩 &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;구성&lt;/a&gt; 에서 설정할 수있는 여러 배치 &lt;em&gt;대상&lt;/em&gt; 을 제공 합니다 .</target>
        </trans-unit>
        <trans-unit id="6bae781992439f43c8bcf6f31e7f5db7b0402e7b" translate="yes" xml:space="preserve">
          <source>Because experimental features have relaxed semantic versioning and might contain breaking changes, make sure to fix webpack's version to minor e.g. &lt;code&gt;webpack: ~5.4.3&lt;/code&gt; instead of &lt;code&gt;webpack: ^5.4.3&lt;/code&gt; or use a lockfile when using &lt;code&gt;experiments&lt;/code&gt;.</source>
          <target state="translated">Because experimental features have relaxed semantic versioning and might contain breaking changes, make sure to fix webpack's version to minor e.g. &lt;code&gt;webpack: ~5.4.3&lt;/code&gt; instead of &lt;code&gt;webpack: ^5.4.3&lt;/code&gt; or use a lockfile when using &lt;code&gt;experiments&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="13fbfc61a9113110e07178279544789c4551bcc9" translate="yes" xml:space="preserve">
          <source>Because it's a standard Node.js CommonJS module, you &lt;strong&gt;can do the following&lt;/strong&gt;:</source>
          <target state="translated">표준 Node.js CommonJS 모듈이므로 다음 &lt;strong&gt;을 수행&lt;/strong&gt; 할 &lt;strong&gt;수 있습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="163e2075051ff4a436910011b3bfdd2afd416898" translate="yes" xml:space="preserve">
          <source>Because this happens after resolving every file in the dll bundle, the same paths must be available for the consumer of the dll bundle. i.e. if the dll contains &lt;code&gt;lodash&lt;/code&gt; and the file &lt;code&gt;abc&lt;/code&gt;, &lt;code&gt;require(&quot;lodash&quot;)&lt;/code&gt; and &lt;code&gt;require(&quot;./abc&quot;)&lt;/code&gt; will be used from the dll, rather than building them into the main bundle.</source>
          <target state="translated">이는 dll 번들의 모든 파일을 분석 한 후에 발생하므로 dll 번들 소비자에 대해 동일한 경로를 사용할 수 있어야합니다. DLL이 포함 즉 경우 &lt;code&gt;lodash&lt;/code&gt; 및 파일 &lt;code&gt;abc&lt;/code&gt; , &lt;code&gt;require(&quot;lodash&quot;)&lt;/code&gt; 하고 &lt;code&gt;require(&quot;./abc&quot;)&lt;/code&gt; 하지 않고 기본 번들로를 구축하는 것보다, DLL에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5ddf55c67bbaf7f5f306bb23911430febc9ffd50" translate="yes" xml:space="preserve">
          <source>Because this happens after resolving every file in the dll bundle, the same paths must be available for the consumer of the dll bundle. i.e. if the dll contains &lt;code&gt;lodash&lt;/code&gt; and the file &lt;code&gt;abc&lt;/code&gt;, &lt;code&gt;require('lodash')&lt;/code&gt; and &lt;code&gt;require('./abc')&lt;/code&gt; will be used from the dll, rather than building them into the main bundle.</source>
          <target state="translated">Because this happens after resolving every file in the dll bundle, the same paths must be available for the consumer of the dll bundle. i.e. if the dll contains &lt;code&gt;lodash&lt;/code&gt; and the file &lt;code&gt;abc&lt;/code&gt; , &lt;code&gt;require('lodash')&lt;/code&gt; and &lt;code&gt;require('./abc')&lt;/code&gt; will be used from the dll, rather than building them into the main bundle.</target>
        </trans-unit>
        <trans-unit id="be07ac447221892056e2d025e30a823d8ac53bb1" translate="yes" xml:space="preserve">
          <source>Because webpack expects absolute paths for many config options such as &lt;code&gt;__dirname + &quot;/app/folder&quot;&lt;/code&gt; the Windows &lt;code&gt;\&lt;/code&gt; path separator can break some functionality.</source>
          <target state="translated">webpack은 &lt;code&gt;__dirname + &quot;/app/folder&quot;&lt;/code&gt; 와 같은 많은 구성 옵션에 대한 절대 경로를 예상 하므로 Windows &lt;code&gt;\&lt;/code&gt; 경로 구분 기호는 일부 기능을 중단 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4878e31ecd1e40012e0fb8c523b3fc3821f762ba" translate="yes" xml:space="preserve">
          <source>Because webpack expects absolute paths for many configuration options such as &lt;code&gt;__dirname + '/app/folder'&lt;/code&gt; the Windows &lt;code&gt;\&lt;/code&gt; path separator can break some functionality.</source>
          <target state="translated">Because webpack expects absolute paths for many configuration options such as &lt;code&gt;__dirname + '/app/folder'&lt;/code&gt; the Windows &lt;code&gt;\&lt;/code&gt; path separator can break some functionality.</target>
        </trans-unit>
        <trans-unit id="911c12fde020a5fe39d0976adf74e2048f5bfb93" translate="yes" xml:space="preserve">
          <source>Before Asset Modules and Webpack 5, it was possible to use &lt;a href=&quot;../concepts/loaders#inline&quot;&gt;inline syntax&lt;/a&gt; with the legacy loaders mentioned above.</source>
          <target state="translated">Asset Modules 및 Webpack 5 이전에는 위에서 언급 한 레거시 로더에서 &lt;a href=&quot;../concepts/loaders#inline&quot;&gt;인라인 구문&lt;/a&gt; 을 사용할 수있었습니다 .</target>
        </trans-unit>
        <trans-unit id="6e44f654bf86561fd2e81fa4117d80c136d6849d" translate="yes" xml:space="preserve">
          <source>Before creating the chunk assets.</source>
          <target state="translated">청크 자산을 만들기 전에.</target>
        </trans-unit>
        <trans-unit id="bd745d8f127cf5570b5afe5d7a39b05e9f604b39" translate="yes" xml:space="preserve">
          <source>Before emitting assets to output dir</source>
          <target state="translated">dir을 출력하기 위해 자산을 방출하기 전에</target>
        </trans-unit>
        <trans-unit id="4c9b2830a6527774b634f8fe8eee3fde97277dc0" translate="yes" xml:space="preserve">
          <source>Before reading on, make sure to have a look at the &lt;a href=&quot;https://github.com/webpack/enhanced-resolve&quot;&gt;&lt;code&gt;enhanced-resolve&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;plugins#tapable&quot;&gt;&lt;code&gt;tapable&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">Before reading on, make sure to have a look at the &lt;a href=&quot;https://github.com/webpack/enhanced-resolve&quot;&gt; &lt;code&gt;enhanced-resolve&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;plugins#tapable&quot;&gt; &lt;code&gt;tapable&lt;/code&gt; &lt;/a&gt; documentation.</target>
        </trans-unit>
        <trans-unit id="713480d8e3af90f2f73563649847aa62ee1f6022" translate="yes" xml:space="preserve">
          <source>Before reading on, make sure you at least skim through the &lt;a href=&quot;https://github.com/webpack/enhanced-resolve&quot;&gt;&lt;code&gt;enhanced-resolve&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;plugins#tapable&quot;&gt;&lt;code&gt;tapable&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">계속 읽기 전에 적어도 &lt;a href=&quot;https://github.com/webpack/enhanced-resolve&quot;&gt; &lt;code&gt;enhanced-resolve&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;plugins#tapable&quot;&gt; &lt;code&gt;tapable&lt;/code&gt; &lt;/a&gt; 문서를 살펴보십시오 .</target>
        </trans-unit>
        <trans-unit id="5a6e6a920ad81484ce1cba3cab87e78c5ec299ac" translate="yes" xml:space="preserve">
          <source>Before the compilation is hashed.</source>
          <target state="translated">컴파일이 해시되기 전에.</target>
        </trans-unit>
        <trans-unit id="c25fd7fe8f4304734ea1be8350051a07c7845da8" translate="yes" xml:space="preserve">
          <source>Before we begin, make sure you have a fresh version of &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; installed. The current Long Term Support (LTS) release is an ideal starting point. You may run into a variety of issues with the older versions as they may be missing functionality webpack and/or its related packages require.</source>
          <target state="translated">시작하기 전에 최신 버전의 &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js가&lt;/a&gt; 설치되어 있는지 확인하십시오 . 현재 장기 지원 (LTS) 릴리스는 이상적인 시작점입니다. 웹 버전 및 / 또는 관련 패키지에 필요한 기능이 없을 수 있으므로 이전 버전과 관련하여 다양한 문제가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2ad6717bd794ace64523110ab6d5091da7c7d70f" translate="yes" xml:space="preserve">
          <source>Before we do a build, you should know that the &lt;code&gt;HtmlWebpackPlugin&lt;/code&gt; by default will generate its own &lt;code&gt;index.html&lt;/code&gt; file, even though we already have one in the &lt;code&gt;dist/&lt;/code&gt; folder. This means that it will replace our &lt;code&gt;index.html&lt;/code&gt; file with a newly generated one. Let's see what happens when we do an &lt;code&gt;npm run build&lt;/code&gt;:</source>
          <target state="translated">빌드하기 전에 &lt;code&gt;HtmlWebpackPlugin&lt;/code&gt; 이 &lt;code&gt;dist/&lt;/code&gt; 폴더 에 이미있는 경우에도 기본적으로 자체 &lt;code&gt;index.html&lt;/code&gt; 파일을 생성 한다는 것을 알아야 합니다. 즉, &lt;code&gt;index.html&lt;/code&gt; 파일이 새로 생성 된 파일로 대체됩니다 . &lt;code&gt;npm run build&lt;/code&gt; 수행 할 때 어떤 일이 발생하는지 봅시다 :</target>
        </trans-unit>
        <trans-unit id="418502eaf1784acc2d84d1963ab1673f09389d19" translate="yes" xml:space="preserve">
          <source>Before we start, let's remove the extra &lt;a href=&quot;../concepts/entry-points&quot;&gt;&lt;code&gt;entry&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;&lt;code&gt;optimization.splitChunks&lt;/code&gt;&lt;/a&gt; from our config as they won't be needed for this next demonstration:</source>
          <target state="translated">시작하기 전에 다음 데모에서는 필요하지 않으므로 추가 &lt;a href=&quot;../concepts/entry-points&quot;&gt; &lt;code&gt;entry&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt; &lt;code&gt;optimization.splitChunks&lt;/code&gt; &lt;/a&gt; 를 구성에서 제거해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="666c0884aba2e2748ffddc1870ca103f7b58e6f0" translate="yes" xml:space="preserve">
          <source>Before we start, let's remove the extra &lt;a href=&quot;../concepts/entry-points&quot;&gt;&lt;code&gt;entry&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;&lt;code&gt;optimization.splitChunks&lt;/code&gt;&lt;/a&gt; from our configuration in the above example as they won't be needed for this next demonstration:</source>
          <target state="translated">Before we start, let's remove the extra &lt;a href=&quot;../concepts/entry-points&quot;&gt; &lt;code&gt;entry&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt; &lt;code&gt;optimization.splitChunks&lt;/code&gt; &lt;/a&gt; from our configuration in the above example as they won't be needed for this next demonstration:</target>
        </trans-unit>
        <trans-unit id="ec3cd2821b6c116abc522175b097a685139d0c60" translate="yes" xml:space="preserve">
          <source>Before writing a &lt;code&gt;webpack-cli&lt;/code&gt; scaffold, think about what you're trying to achieve and who is going to use it:</source>
          <target state="translated">Before writing a &lt;code&gt;webpack-cli&lt;/code&gt; scaffold, think about what you're trying to achieve and who is going to use it:</target>
        </trans-unit>
        <trans-unit id="842beb51ca9c5417a27f472386d0e0d52dcc074f" translate="yes" xml:space="preserve">
          <source>Before:</source>
          <target state="translated">Before:</target>
        </trans-unit>
        <trans-unit id="ada30a6ec0912ab3c3479ac63da88146e4cfd14b" translate="yes" xml:space="preserve">
          <source>Behind the scenes, webpack actually &quot;&lt;strong&gt;transpiles&lt;/strong&gt;&quot; the code so that older browsers can also run it. If you inspect &lt;code&gt;dist/main.js&lt;/code&gt;, you might be able to see how webpack does this, it's quite ingenious! Besides &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt;, webpack supports various other module syntaxes as well, see &lt;a href=&quot;../api/module-methods&quot;&gt;Module API&lt;/a&gt; for more information.</source>
          <target state="translated">Behind the scenes, webpack actually &quot;&lt;strong&gt;transpiles&lt;/strong&gt;&quot; the code so that older browsers can also run it. If you inspect &lt;code&gt;dist/main.js&lt;/code&gt; , you might be able to see how webpack does this, it's quite ingenious! Besides &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; , webpack supports various other module syntaxes as well, see &lt;a href=&quot;../api/module-methods&quot;&gt;Module API&lt;/a&gt; for more information.</target>
        </trans-unit>
        <trans-unit id="bf5906f504106e7ba0f99611e8498a8761611955" translate="yes" xml:space="preserve">
          <source>Behind the scenes, webpack actually &quot;transpiles&quot; the code so that older browsers can also run it. If you inspect &lt;code&gt;dist/main.js&lt;/code&gt;, you might be able to see how webpack does this, it's quite ingenious! Besides &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt;, webpack supports various other module syntaxes as well, see &lt;a href=&quot;../api/module-methods&quot;&gt;Module API&lt;/a&gt; for more information.</source>
          <target state="translated">배후에서, 웹팩은 실제로 코드를 &quot;변환&quot;하여 오래된 브라우저에서도 실행할 수 있습니다. &lt;code&gt;dist/main.js&lt;/code&gt; 를 검사 하면 webpack이 어떻게 작동하는지 확인할 수 있습니다. 매우 독창적입니다! &lt;code&gt;import&lt;/code&gt; 및 &lt;code&gt;export&lt;/code&gt; 외에도 웹팩은 다양한 다른 모듈 구문도 지원합니다 . 자세한 정보는 &lt;a href=&quot;../api/module-methods&quot;&gt;모듈 API&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a3532395da1be4cd651e9d3b4bc3020261b897c5" translate="yes" xml:space="preserve">
          <source>Being able to access the library inside Node.js.</source>
          <target state="translated">Node.js 내의 라이브러리에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d6150e965a5ba4316e49bf83393097e5bc66ed38" translate="yes" xml:space="preserve">
          <source>Below is a list of entry configurations and their real-world use cases:</source>
          <target state="translated">다음은 항목 구성 및 실제 사용 사례 목록입니다.</target>
        </trans-unit>
        <trans-unit id="7703edea41148e6c3f44793e2a0625adff43097b" translate="yes" xml:space="preserve">
          <source>Benefits of custom logging API in webpack:</source>
          <target state="translated">Benefits of custom logging API in webpack:</target>
        </trans-unit>
        <trans-unit id="e2e975ebebd905ac031f4cd4219760e155ad10c3" translate="yes" xml:space="preserve">
          <source>Besides exporting a single config object, there are a few more ways that cover other needs as well.</source>
          <target state="translated">단일 구성 개체를 내보내는 것 외에도 다른 요구를 충족시키는 몇 가지 방법이 더 있습니다.</target>
        </trans-unit>
        <trans-unit id="4ce14a7642769afc6690e6844c32b05e0d7bdeeb" translate="yes" xml:space="preserve">
          <source>Besides exporting a single configuration object, there are a few more ways that cover other needs as well.</source>
          <target state="translated">Besides exporting a single configuration object, there are a few more ways that cover other needs as well.</target>
        </trans-unit>
        <trans-unit id="3830eb2a060c1d25310fda32c98dfebc466067f0" translate="yes" xml:space="preserve">
          <source>Beware the situation when &lt;code&gt;node-sass&lt;/code&gt; and &lt;code&gt;sass&lt;/code&gt; were installed! By default the &lt;code&gt;sass-loader&lt;/code&gt; prefers &lt;code&gt;sass&lt;/code&gt;. In order to avoid this situation you can use the &lt;code&gt;implementation&lt;/code&gt; option.</source>
          <target state="translated">Beware the situation when &lt;code&gt;node-sass&lt;/code&gt; and &lt;code&gt;sass&lt;/code&gt; were installed! By default the &lt;code&gt;sass-loader&lt;/code&gt; prefers &lt;code&gt;sass&lt;/code&gt; . In order to avoid this situation you can use the &lt;code&gt;implementation&lt;/code&gt; option.</target>
        </trans-unit>
        <trans-unit id="348663d0a1a4fe8b4a58ac0dc7afe3daf4de2859" translate="yes" xml:space="preserve">
          <source>Beware, if you already define loader(s) for extension(s) in &lt;code&gt;webpack.config.js&lt;/code&gt; you should use:</source>
          <target state="translated">Beware, if you already define loader(s) for extension(s) in &lt;code&gt;webpack.config.js&lt;/code&gt; you should use:</target>
        </trans-unit>
        <trans-unit id="a8c6bf285c1c3179f37b321b8da384b10b730e54" translate="yes" xml:space="preserve">
          <source>Bind an extension to a loader</source>
          <target state="translated">로더에 확장을 바인딩</target>
        </trans-unit>
        <trans-unit id="ceb73b5b9ef4ca69fd19033081bd06621f921946" translate="yes" xml:space="preserve">
          <source>Bind an extension to a post loader</source>
          <target state="translated">포스트 로더에 확장 기능 바인딩</target>
        </trans-unit>
        <trans-unit id="db5099d6f17256a1483c579f1dd632a678e50158" translate="yes" xml:space="preserve">
          <source>Bind an extension to a pre loader</source>
          <target state="translated">프리 로더에 익스텐션 바인딩</target>
        </trans-unit>
        <trans-unit id="b2982b597258bceff9947b8703e9315e6646fc56" translate="yes" xml:space="preserve">
          <source>Birth of JavaScript Modules happened thanks to Node.js</source>
          <target state="translated">Birth of JavaScript Modules happened thanks to Node.js</target>
        </trans-unit>
        <trans-unit id="8c91060c43bf62804b60107e165aa7afa7cd2914" translate="yes" xml:space="preserve">
          <source>Bleeding Edge</source>
          <target state="translated">최첨단</target>
        </trans-unit>
        <trans-unit id="b76ff4906f33c2dd97ddd929b9662ba8cac6174c" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="translated">Boolean</target>
        </trans-unit>
        <trans-unit id="cdb4a5969daa00f0cbae64436064b367ee6b5fd9" translate="yes" xml:space="preserve">
          <source>Boostrapping Your Application</source>
          <target state="translated">응용 프로그램 강화</target>
        </trans-unit>
        <trans-unit id="89ec4ec2bf400e823f3ca49d0cb938b0fedd7bab" translate="yes" xml:space="preserve">
          <source>Bootstrap</source>
          <target state="translated">Bootstrap</target>
        </trans-unit>
        <trans-unit id="93a13a7455862a7b6be4896354f79623810c4c86" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;https://github.com/adrianhall/stylelint-loader&quot;&gt;&lt;code&gt;stylelint-loader&lt;/code&gt;&lt;/a&gt; and this module have their uses. &lt;code&gt;stylelint-loader&lt;/code&gt; lints the files you &lt;code&gt;require&lt;/code&gt; (or the ones you define as an &lt;code&gt;entry&lt;/code&gt; in your &lt;code&gt;webpack&lt;/code&gt; config). However, &lt;code&gt;@imports&lt;/code&gt; in files are not followed, meaning only the main file for each &lt;code&gt;require/entry&lt;/code&gt; is linted.</source>
          <target state="translated">두 &lt;a href=&quot;https://github.com/adrianhall/stylelint-loader&quot;&gt; &lt;code&gt;stylelint-loader&lt;/code&gt; &lt;/a&gt; 와이 모듈은 용도가있다. &lt;code&gt;stylelint-loader&lt;/code&gt; 는 &lt;code&gt;require&lt;/code&gt; 파일 (또는 &lt;code&gt;webpack&lt;/code&gt; 구성 에서 &lt;code&gt;entry&lt;/code&gt; 으로 정의한 파일)을 보푸라기합니다 . 그러나 파일의 &lt;code&gt;@imports&lt;/code&gt; 는 따르지 않으므로 각 &lt;code&gt;require/entry&lt;/code&gt; 의 기본 파일 만 보풀이됩니다.</target>
        </trans-unit>
        <trans-unit id="14ba68cb9a55d197f7c9ad928eb5832092dabbbe" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;hash&lt;/code&gt; and &lt;code&gt;timestamp&lt;/code&gt; are optional.</source>
          <target state="translated">Both &lt;code&gt;hash&lt;/code&gt; and &lt;code&gt;timestamp&lt;/code&gt; are optional.</target>
        </trans-unit>
        <trans-unit id="c0e20c9d610432b6144fff6512a832f85e51dccf" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;webpack help [command] [option]&lt;/code&gt; and &lt;code&gt;webpack [command] --help&lt;/code&gt; are valid to get help:</source>
          <target state="translated">두 &lt;code&gt;webpack help [command] [option]&lt;/code&gt; 과 &lt;code&gt;webpack [command] --help&lt;/code&gt; 도움을받을 유효합니다 :</target>
        </trans-unit>
        <trans-unit id="c99245152ca6037fec3de91adb8826c5877dd307" translate="yes" xml:space="preserve">
          <source>Both local variable &lt;code&gt;head&lt;/code&gt; and global &lt;code&gt;window._&lt;/code&gt; will be exposed when you &lt;code&gt;import&lt;/code&gt;&lt;code&gt;lodash&lt;/code&gt;:</source>
          <target state="translated">Both local variable &lt;code&gt;head&lt;/code&gt; and global &lt;code&gt;window._&lt;/code&gt; will be exposed when you &lt;code&gt;import&lt;/code&gt; &lt;code&gt;lodash&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="7f4b3977321e9e70a84b0092f5b875ccd1e5aec5" translate="yes" xml:space="preserve">
          <source>Browser &amp;gt; node.js</source>
          <target state="translated">Browser &amp;gt; node.js</target>
        </trans-unit>
        <trans-unit id="aac7378f1efd1829430797b0495fda2b1605e7e6" translate="yes" xml:space="preserve">
          <source>Browser Compatibility</source>
          <target state="translated">브라우저 호환성</target>
        </trans-unit>
        <trans-unit id="dd6cf7fe35fcfa4d1e8058c6b69b251c2fd078d9" translate="yes" xml:space="preserve">
          <source>Browser support is different.</source>
          <target state="translated">브라우저 지원이 다릅니다.</target>
        </trans-unit>
        <trans-unit id="69d8e5756047cb8878ca80bc9dd20cbe1df71ada" translate="yes" xml:space="preserve">
          <source>Build Performance</source>
          <target state="translated">성능 구축</target>
        </trans-unit>
        <trans-unit id="e1b7232d32f03f843066b9a66a190564af197554" translate="yes" xml:space="preserve">
          <source>Build dependencies can also be added using &lt;code&gt;loaderContext.addBuildDependency(file: string)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;loaderContext.addBuildDependency(file: string)&lt;/code&gt; 사용하여 빌드 종속성을 추가 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3b73f1435e147f0aede784f96558ac1b404bf3b9" translate="yes" xml:space="preserve">
          <source>Building Eval Source Maps</source>
          <target state="translated">평가판 소스 맵 작성</target>
        </trans-unit>
        <trans-unit id="b2e1660ccfec7f64296b6c5bbd2b584f0d6b0acb" translate="yes" xml:space="preserve">
          <source>Building Source Maps</source>
          <target state="translated">빌딩 소스 맵</target>
        </trans-unit>
        <trans-unit id="5d7f3504504044d481b2cb93792c53ee903721c6" translate="yes" xml:space="preserve">
          <source>Building blocks</source>
          <target state="translated">빌딩 블록</target>
        </trans-unit>
        <trans-unit id="91a9f6fe5341ad1fbab4d2e8f11b11358267af1c" translate="yes" xml:space="preserve">
          <source>Builds the given module.</source>
          <target state="translated">Builds the given module.</target>
        </trans-unit>
        <trans-unit id="6730a35fb8bc77ceabda07b56124313531396e39" translate="yes" xml:space="preserve">
          <source>Bundle Analysis</source>
          <target state="translated">번들 분석</target>
        </trans-unit>
        <trans-unit id="e607c6d9fc658e5acdccba31af068a67299e9be2" translate="yes" xml:space="preserve">
          <source>Bundle loader for webpack</source>
          <target state="translated">웹 팩용 번들 로더</target>
        </trans-unit>
        <trans-unit id="94f119d57a1281ec83f6a0a575dd1858fc80eb7d" translate="yes" xml:space="preserve">
          <source>Bundlers help you get your JavaScript and stylesheets ready for deployment, transforming them into a format that's suitable for the browser. For example, JavaScript can be &lt;a href=&quot;../plugins/terser-webpack-plugin&quot;&gt;minified&lt;/a&gt; or &lt;a href=&quot;code-splitting&quot;&gt;split into chunks&lt;/a&gt; and &lt;a href=&quot;lazy-loading&quot;&gt;lazy-loaded&lt;/a&gt; to improve performance. Bundling is one of the most important challenges in web development, and solving it well can remove a lot of pain from the process.</source>
          <target state="translated">Bundlers help you get your JavaScript and stylesheets ready for deployment, transforming them into a format that's suitable for the browser. For example, JavaScript can be &lt;a href=&quot;../plugins/terser-webpack-plugin&quot;&gt;minified&lt;/a&gt; or &lt;a href=&quot;code-splitting&quot;&gt;split into chunks&lt;/a&gt; and &lt;a href=&quot;lazy-loading&quot;&gt;lazy-loaded&lt;/a&gt; to improve performance. Bundling is one of the most important challenges in web development, and solving it well can remove a lot of pain from the process.</target>
        </trans-unit>
        <trans-unit id="184f61d1e928fe4d87f6ec1379d7b44b2a01bc47" translate="yes" xml:space="preserve">
          <source>Bundlers help you get your JavaScript and stylesheets ready for deployment, transforming them into a format that's suitable for the browser. For example, JavaScript can be &lt;a href=&quot;../plugins/uglifyjs-webpack-plugin&quot;&gt;minified&lt;/a&gt; or &lt;a href=&quot;code-splitting&quot;&gt;split into chunks&lt;/a&gt; and &lt;a href=&quot;lazy-loading&quot;&gt;lazy-loaded&lt;/a&gt; to improve performance. Bundling is one of the most important challenges in web development, and solving it well can remove a lot of pain from the process.</source>
          <target state="translated">Bundlers를 사용하면 JavaScript 및 스타일 시트를 배치 할 준비가되어 브라우저에 적합한 형식으로 변환 할 수 있습니다. 예를 들어, 자바 스크립트가 될 수있다 &lt;a href=&quot;../plugins/uglifyjs-webpack-plugin&quot;&gt;축소 된&lt;/a&gt; 또는 &lt;a href=&quot;code-splitting&quot;&gt;조각으로 분할&lt;/a&gt; 및 &lt;a href=&quot;lazy-loading&quot;&gt;로드 게으른&lt;/a&gt; 성능을 개선 할 수 있습니다. 번들링은 웹 개발에서 가장 중요한 문제 중 하나이며이를 해결하면 프로세스에서 많은 고통을 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6d70448d5c6321d04aec47b23d8f91d231d0f044" translate="yes" xml:space="preserve">
          <source>Bundles a tiny, purpose-built RPC implementation into your app</source>
          <target state="translated">소규모의 특수 목적 RPC 구현을 앱에 번들로 제공</target>
        </trans-unit>
        <trans-unit id="a6d74b73c44fe2d3e0effc86668ed93b7a7d4fae" translate="yes" xml:space="preserve">
          <source>Bundling CSS with webpack has some nice advantages like referencing images and fonts with hashed urls or &lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;hot module replacement&lt;/a&gt; in development. In production, on the other hand, it's not a good idea to apply your style sheets depending on JS execution. Rendering may be delayed or even a &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_of_unstyled_content&quot;&gt;FOUC&lt;/a&gt; might be visible. Thus it's often still better to have them as separate files in your final production build.</source>
          <target state="translated">웹팩에 CSS를 번들링하면 해시 된 URL을 사용하여 이미지 및 글꼴을 참조하거나 개발시 &lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;핫 모듈을 교체하는&lt;/a&gt; 것과 같은 멋진 이점 이 있습니다. 반면, 프로덕션에서는 JS 실행에 따라 스타일 시트를 적용하는 것은 좋지 않습니다. 렌더링이 지연되거나 &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_of_unstyled_content&quot;&gt;FOUC&lt;/a&gt; 가 표시 될 수도 있습니다. 따라서 최종 프로덕션 빌드에서 별도의 파일로 유지하는 것이 더 좋습니다.</target>
        </trans-unit>
        <trans-unit id="171c7c7f62a36342e46701f45bb347535d5b6161" translate="yes" xml:space="preserve">
          <source>Bundling CSS with webpack has some nice advantages like referencing images and fonts with hashed urls or &lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;hot module replacement&lt;/a&gt; in development. In production, on the other hand, it's not a good idea to apply your stylesheets depending on JS execution. Rendering may be delayed or even a &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_of_unstyled_content&quot;&gt;FOUC&lt;/a&gt; might be visible. Thus it's still better to have them as separate files in your final production build.</source>
          <target state="translated">웹팩에 CSS를 번들링하면 해시 된 URL을 사용하여 이미지 및 글꼴을 참조하거나 개발시 &lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;핫 모듈을 교체하는&lt;/a&gt; 것과 같은 멋진 이점 이 있습니다. 반면, 프로덕션 환경에서는 JS 실행에 따라 스타일 시트를 적용하는 것은 좋지 않습니다. 렌더링이 지연되거나 &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_of_unstyled_content&quot;&gt;FOUC&lt;/a&gt; 가 표시 될 수도 있습니다. 따라서 최종 프로덕션 빌드에서 별도의 파일로 유지하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="3f6322fcef8be0a8f4d085bc63bb7341b4ce029a" translate="yes" xml:space="preserve">
          <source>Bundling your application is especially powerful for &lt;em&gt;HTTP/1.1&lt;/em&gt; clients, as it minimizes the number of times your app has to wait while the browser starts a new request. For &lt;em&gt;HTTP/2&lt;/em&gt;, you can also use &lt;a href=&quot;../guides/code-splitting&quot;&gt;Code Splitting&lt;/a&gt; to achieve best results.</source>
          <target state="translated">Bundling your application is especially powerful for &lt;em&gt;HTTP/1.1&lt;/em&gt; clients, as it minimizes the number of times your app has to wait while the browser starts a new request. For &lt;em&gt;HTTP/2&lt;/em&gt;, you can also use &lt;a href=&quot;../guides/code-splitting&quot;&gt;Code Splitting&lt;/a&gt; to achieve best results.</target>
        </trans-unit>
        <trans-unit id="3512fd7f0984ce365b87e905286b2433e6b80fe7" translate="yes" xml:space="preserve">
          <source>Bundling your application is especially powerful for &lt;em&gt;HTTP/1.1&lt;/em&gt; clients, as it minimizes the number of times your app has to wait while the browser starts a new request. For &lt;em&gt;HTTP/2&lt;/em&gt;, you can also use Code Splitting and bundling through webpack for the &lt;a href=&quot;https://medium.com/webpack/webpack-http-2-7083ec3f3ce6#.7y5d3hz59&quot;&gt;best optimization&lt;/a&gt;.</source>
          <target state="translated">애플리케이션 번들링 은 브라우저가 새 요청을 시작하는 동안 앱이 대기해야하는 횟수를 최소화하므로 &lt;em&gt;HTTP / 1.1&lt;/em&gt; 클라이언트에 특히 강력합니다 . 들어 &lt;em&gt;HTTP / 2&lt;/em&gt; , 당신은 또한 대한 웹팩을 통해 코드 분할 및 번들을 사용하여 &lt;a href=&quot;https://medium.com/webpack/webpack-http-2-7083ec3f3ce6#.7y5d3hz59&quot;&gt;가장 최적화&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9c56a903e17ed53ad6307862d044bc08dfd8ab88" translate="yes" xml:space="preserve">
          <source>But between input and output, it also has &lt;a href=&quot;modules&quot;&gt;modules&lt;/a&gt;, &lt;a href=&quot;entry-points&quot;&gt;entry points&lt;/a&gt;, chunks, chunk groups, and many other intermediate parts.</source>
          <target state="translated">But between input and output, it also has &lt;a href=&quot;modules&quot;&gt;modules&lt;/a&gt;, &lt;a href=&quot;entry-points&quot;&gt;entry points&lt;/a&gt;, chunks, chunk groups, and many other intermediate parts.</target>
        </trans-unit>
        <trans-unit id="249872e2c3fc18f27dee8ccf91ff43b6d9c2733c" translate="yes" xml:space="preserve">
          <source>But there is no browser support for CommonJS. There are no &lt;a href=&quot;https://medium.com/webpack/the-state-of-javascript-modules-4636d1774358&quot;&gt;live bindings&lt;/a&gt;. There are problems with circular references. Synchronous module resolution and loading is slow. While CommonJS was a great solution for Node.js projects, browsers didn't support modules, so bundlers and tools like Browserify, RequireJS and SystemJS were created, allowing us to write CommonJS modules that run in a browser.</source>
          <target state="translated">But there is no browser support for CommonJS. There are no &lt;a href=&quot;https://medium.com/webpack/the-state-of-javascript-modules-4636d1774358&quot;&gt;live bindings&lt;/a&gt;. There are problems with circular references. Synchronous module resolution and loading is slow. While CommonJS was a great solution for Node.js projects, browsers didn't support modules, so bundlers and tools like Browserify, RequireJS and SystemJS were created, allowing us to write CommonJS modules that run in a browser.</target>
        </trans-unit>
        <trans-unit id="e5da7ec821aad3a2e00a0ff900e3b6685db4912d" translate="yes" xml:space="preserve">
          <source>But we can help terser by using the &lt;code&gt;/*#__PURE__*/&lt;/code&gt; annotation. It flags a statement as side effect free. So a simple change would make it possible to tree-shake the code:</source>
          <target state="translated">But we can help terser by using the &lt;code&gt;/*#__PURE__*/&lt;/code&gt; annotation. It flags a statement as side effect free. So a simple change would make it possible to tree-shake the code:</target>
        </trans-unit>
        <trans-unit id="03ebf631d70557595ad1f4dce27ea491ea6abce2" translate="yes" xml:space="preserve">
          <source>But what would happen if we changed the name of one of our entry points, or even added a new one? The generated bundles would be renamed on a build, but our &lt;code&gt;index.html&lt;/code&gt; file would still reference the old names. Let's fix that with the &lt;a href=&quot;../plugins/html-webpack-plugin&quot;&gt;&lt;code&gt;HtmlWebpackPlugin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">그러나 진입 점 중 하나의 이름을 변경하거나 새로운 이름을 추가하면 어떻게됩니까? 생성 된 번들은 빌드에서 이름이 &lt;code&gt;index.html&lt;/code&gt; 만 index.html 파일은 여전히 ​​이전 이름을 참조합니다. &lt;a href=&quot;../plugins/html-webpack-plugin&quot;&gt; &lt;code&gt;HtmlWebpackPlugin&lt;/code&gt; 으로&lt;/a&gt; 수정 해 봅시다 .</target>
        </trans-unit>
        <trans-unit id="34e02bbb496ca21ee2c6a09fc145ffc5168195b3" translate="yes" xml:space="preserve">
          <source>But you should always use forward-slashes in &lt;code&gt;glob&lt;/code&gt; expressions See &lt;a href=&quot;https://github.com/mrmlnc/fast-glob#how-to-write-patterns-on-windows&quot;&gt;fast-glob manual&lt;/a&gt;.</source>
          <target state="translated">But you should always use forward-slashes in &lt;code&gt;glob&lt;/code&gt; expressions See &lt;a href=&quot;https://github.com/mrmlnc/fast-glob#how-to-write-patterns-on-windows&quot;&gt;fast-glob manual&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="befe55d5eaf483be37282fee1166feb873a21816" translate="yes" xml:space="preserve">
          <source>By adding &lt;code&gt;output.library&lt;/code&gt; to configuration in addition to having &lt;code&gt;output.libraryTarget&lt;/code&gt; set to &lt;code&gt;system&lt;/code&gt;, the output bundle will have the library name as an argument to &lt;code&gt;System.register&lt;/code&gt;:</source>
          <target state="translated">By adding &lt;code&gt;output.library&lt;/code&gt; to configuration in addition to having &lt;code&gt;output.libraryTarget&lt;/code&gt; set to &lt;code&gt;system&lt;/code&gt; , the output bundle will have the library name as an argument to &lt;code&gt;System.register&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="08ed099a4d61d9307ec723d06a6dd362fb9e8b26" translate="yes" xml:space="preserve">
          <source>By convention the &lt;code&gt;Reference Counter API&lt;/code&gt; should be bound to &lt;code&gt;.useable.css&lt;/code&gt; and the &lt;code&gt;.css&lt;/code&gt; should be loaded with basic &lt;code&gt;style-loader&lt;/code&gt; usage.(similar to other file types, i.e. &lt;code&gt;.useable.less&lt;/code&gt; and &lt;code&gt;.less&lt;/code&gt;).</source>
          <target state="translated">관례 적으로 &lt;code&gt;Reference Counter API&lt;/code&gt; 는 &lt;code&gt;.useable.css&lt;/code&gt; 에 바인딩되어야 하고 &lt;code&gt;.css&lt;/code&gt; 는 기본 &lt;code&gt;style-loader&lt;/code&gt; 사용법 으로로드되어야 합니다 (다른 파일 형식과 유사합니다 (예 : &lt;code&gt;.useable.less&lt;/code&gt; 및 &lt;code&gt;.less&lt;/code&gt; )).</target>
        </trans-unit>
        <trans-unit id="efc89ad11c97b4126b7bd8ec1724a2fead2ac60f" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;[id].js&lt;/code&gt; is used or a value inferred from &lt;a href=&quot;#output-filename&quot;&gt;&lt;code&gt;output.filename&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;[name]&lt;/code&gt; is replaced with &lt;code&gt;[id]&lt;/code&gt; or &lt;code&gt;[id].&lt;/code&gt; is prepended).</source>
          <target state="translated">기본적으로 &lt;code&gt;[id].js&lt;/code&gt; 가 사용되거나 &lt;a href=&quot;#output-filename&quot;&gt; &lt;code&gt;output.filename&lt;/code&gt; &lt;/a&gt; 에서 유추되는 값 ( &lt;code&gt;[name]&lt;/code&gt; 은 &lt;code&gt;[id]&lt;/code&gt; 또는 &lt;code&gt;[id].&lt;/code&gt; 로 대체됩니다 .) 이 앞에 옵니다 .</target>
        </trans-unit>
        <trans-unit id="2aaae80c1fac9c0650a37693e2300b13bdc369d8" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;[id].js&lt;/code&gt; is used or a value inferred from &lt;a href=&quot;#outputfilename&quot;&gt;&lt;code&gt;output.filename&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;[name]&lt;/code&gt; is replaced with &lt;code&gt;[id]&lt;/code&gt; or &lt;code&gt;[id].&lt;/code&gt; is prepended).</source>
          <target state="translated">By default &lt;code&gt;[id].js&lt;/code&gt; is used or a value inferred from &lt;a href=&quot;#outputfilename&quot;&gt; &lt;code&gt;output.filename&lt;/code&gt; &lt;/a&gt; ( &lt;code&gt;[name]&lt;/code&gt; is replaced with &lt;code&gt;[id]&lt;/code&gt; or &lt;code&gt;[id].&lt;/code&gt; is prepended).</target>
        </trans-unit>
        <trans-unit id="4fa01c8852c576a64749c8fa92214160cc36cffb" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;optimization.mangleExports: 'deterministic'&lt;/code&gt; is enabled in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;mode&quot;&gt;mode&lt;/a&gt; and disabled elsewise.</source>
          <target state="translated">By default &lt;code&gt;optimization.mangleExports: 'deterministic'&lt;/code&gt; is enabled in &lt;code&gt;production&lt;/code&gt; &lt;a href=&quot;mode&quot;&gt;mode&lt;/a&gt; and disabled elsewise.</target>
        </trans-unit>
        <trans-unit id="6cc7b44e3541567f30f97d451bac359d6657e43b" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;optimization.portableRecords&lt;/code&gt; is disabled. Automatically enabled if at least one of the records options provided to webpack config: &lt;a href=&quot;other-options#recordspath&quot;&gt;&lt;code&gt;recordsPath&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;other-options#recordsinputpath&quot;&gt;&lt;code&gt;recordsInputPath&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;other-options#recordsoutputpath&quot;&gt;&lt;code&gt;recordsOutputPath&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">By default &lt;code&gt;optimization.portableRecords&lt;/code&gt; is disabled. Automatically enabled if at least one of the records options provided to webpack config: &lt;a href=&quot;other-options#recordspath&quot;&gt; &lt;code&gt;recordsPath&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;other-options#recordsinputpath&quot;&gt; &lt;code&gt;recordsInputPath&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;other-options#recordsoutputpath&quot;&gt; &lt;code&gt;recordsOutputPath&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="4ff7a2a27d1f6b5f8c03d1054916c4f0c5799b38" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;optimization.sideEffects&lt;/code&gt; is enabled in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt; and disabled elsewise.</source>
          <target state="translated">기본적으로 &lt;code&gt;optimization.sideEffects&lt;/code&gt; 는 &lt;code&gt;production&lt;/code&gt; &lt;a href=&quot;../concepts/mode&quot;&gt;모드&lt;/a&gt; 에서 사용 가능하고 그렇지 않으면 사용 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="200aa13deab520170795d754b122d8ffac28cd53" translate="yes" xml:space="preserve">
          <source>By default CSS exports all classnames into a global selector scope. Styles can be locally scoped to avoid globally scoping styles.</source>
          <target state="translated">기본적으로 CSS는 모든 클래스 이름을 전역 선택기 범위로 내 보냅니다. 스타일의 범위를 전역 적으로 지정하지 않도록 스타일 범위를 로컬로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b90b124c2ae72e5f230ccf6d2e6e9e5e062b5d6a" translate="yes" xml:space="preserve">
          <source>By default dev-server will be served over HTTP. It can optionally be served over HTTP/2 with HTTPS:</source>
          <target state="translated">기본적으로 dev-server는 HTTP를 통해 제공됩니다. HTTPS를 사용하여 HTTP / 2를 통해 선택적으로 제공 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d12f1ad1f1f92b0ed6227fefc01f69769bdd61a" translate="yes" xml:space="preserve">
          <source>By default every loadable attributes (for example - &lt;code&gt;&amp;lt;img src=&quot;image.png&quot;&amp;gt;&lt;/code&gt;) is imported (&lt;code&gt;const img = require('./image.png')&lt;/code&gt; or &lt;code&gt;import img from &quot;./image.png&quot;&quot;&lt;/code&gt;). You may need to specify loaders for images in your configuration (recommended &lt;a href=&quot;../guides/asset-modules&quot;&gt;&lt;code&gt;asset modules&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">기본적으로로드 가능한 모든 속성 (예 : &lt;code&gt;&amp;lt;img src=&quot;image.png&quot;&amp;gt;&lt;/code&gt; )을 가져 옵니다 ( &lt;code&gt;const img = require('./image.png')&lt;/code&gt; 또는 &lt;code&gt;import img from &quot;./image.png&quot;&quot;&lt;/code&gt; ). 구성에서 이미지에 대한 로더를 지정해야 할 수 있습니다 (권장 &lt;a href=&quot;../guides/asset-modules&quot;&gt; &lt;code&gt;asset modules&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="340080f2f36ce2d27a445937c37161becf0ba9dd" translate="yes" xml:space="preserve">
          <source>By default every loadable attributes (for example - &lt;code&gt;&amp;lt;img src=&quot;image.png&quot;&amp;gt;&lt;/code&gt;) is imported (&lt;code&gt;const img = require('./image.png')&lt;/code&gt; or &lt;code&gt;import img from &quot;./image.png&quot;&quot;&lt;/code&gt;). You may need to specify loaders for images in your configuration (recommended &lt;code&gt;file-loader&lt;/code&gt; or &lt;code&gt;url-loader&lt;/code&gt;).</source>
          <target state="translated">By default every loadable attributes (for example - &lt;code&gt;&amp;lt;img src=&quot;image.png&quot;&amp;gt;&lt;/code&gt; ) is imported ( &lt;code&gt;const img = require('./image.png')&lt;/code&gt; or &lt;code&gt;import img from &quot;./image.png&quot;&quot;&lt;/code&gt; ). You may need to specify loaders for images in your configuration (recommended &lt;code&gt;file-loader&lt;/code&gt; or &lt;code&gt;url-loader&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="fbe4a9033b29c501eb6363ef1e05b4b7164d954d" translate="yes" xml:space="preserve">
          <source>By default every local &lt;code&gt;&amp;lt;img src=&quot;image.png&quot;&amp;gt;&lt;/code&gt; is required (&lt;code&gt;require('./image.png')&lt;/code&gt;). You may need to specify loaders for images in your configuration (recommended &lt;code&gt;file-loader&lt;/code&gt; or &lt;code&gt;url-loader&lt;/code&gt;).</source>
          <target state="translated">기본적으로 모든 로컬 &lt;code&gt;&amp;lt;img src=&quot;image.png&quot;&amp;gt;&lt;/code&gt; 이 필요합니다 ( &lt;code&gt;require('./image.png')&lt;/code&gt; ). 구성에서 이미지의 로더를 지정해야 할 수도 있습니다 (권장 &lt;code&gt;file-loader&lt;/code&gt; 또는 &lt;code&gt;url-loader&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="59dac9fae5ba617ffc0c9d601e411e601a2a561e" translate="yes" xml:space="preserve">
          <source>By default generation of source maps depends on the &lt;a href=&quot;../configuration/devtool&quot;&gt;&lt;code&gt;devtool&lt;/code&gt;&lt;/a&gt; option. All values enable source map generation except &lt;code&gt;eval&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; value.</source>
          <target state="translated">By default generation of source maps depends on the &lt;a href=&quot;../configuration/devtool&quot;&gt; &lt;code&gt;devtool&lt;/code&gt; &lt;/a&gt; option. All values enable source map generation except &lt;code&gt;eval&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; value.</target>
        </trans-unit>
        <trans-unit id="9675d0ecb298ea9789816c49132a2bd7df6927b1" translate="yes" xml:space="preserve">
          <source>By default it only affects on-demand chunks because changing initial chunks would affect the script tags the HTML file should include to run the project.</source>
          <target state="translated">초기 청크를 변경하면 프로젝트를 실행하기 위해 HTML 파일에 포함해야하는 스크립트 태그에 영향을주기 때문에 기본적으로 주문형 청크에만 영향을줍니다.</target>
        </trans-unit>
        <trans-unit id="b9ef04fec40f7348a3ed41cfe046544502d02d1e" translate="yes" xml:space="preserve">
          <source>By default it only affects on-demand chunks, because changing initial chunks would affect the script tags the HTML file should include to run the project.</source>
          <target state="translated">By default it only affects on-demand chunks, because changing initial chunks would affect the script tags the HTML file should include to run the project.</target>
        </trans-unit>
        <trans-unit id="bbfeb129556180b79c92780f6344cbbb0cea4d74" translate="yes" xml:space="preserve">
          <source>By default it will use your current working directory to serve content, but you can modify this to another directory:</source>
          <target state="translated">기본적으로 현재 작업 디렉토리를 사용하여 컨텐츠를 제공하지만 다른 디렉토리로 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7f794db7c0b232f4faf63f82799d448c51b00567" translate="yes" xml:space="preserve">
          <source>By default its value is &lt;code&gt;./src/index.js&lt;/code&gt;, but you can specify a different (or multiple entry points) by configuring the &lt;strong&gt;entry&lt;/strong&gt; property in the &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;webpack configuration&lt;/a&gt;. For example:</source>
          <target state="translated">기본적으로 값은 &lt;code&gt;./src/index.js&lt;/code&gt; 이지만 webpack 구성에서 &lt;strong&gt;entry&lt;/strong&gt; 속성 을 구성하여 다른 (또는 여러 개의 진입 점)을 지정할 수 &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;있습니다&lt;/a&gt; . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5b02bcc4174593814ec5fed913fe02bd6c95440e" translate="yes" xml:space="preserve">
          <source>By default its value is &lt;code&gt;./src/index.js&lt;/code&gt;, but you can specify a different (or multiple entry points) by setting an &lt;a href=&quot;../configuration/entry-context#entry&quot;&gt;&lt;code&gt;entry&lt;/code&gt; property in the webpack configuration&lt;/a&gt;. For example:</source>
          <target state="translated">By default its value is &lt;code&gt;./src/index.js&lt;/code&gt; , but you can specify a different (or multiple entry points) by setting an &lt;a href=&quot;../configuration/entry-context#entry&quot;&gt; &lt;code&gt;entry&lt;/code&gt; property in the webpack configuration&lt;/a&gt;. For example:</target>
        </trans-unit>
        <trans-unit id="5588308463499b26ed1d1e8a500ad8b6dcd1aed7" translate="yes" xml:space="preserve">
          <source>By default loader does not override the existing value in the global object, because it is unsafe. In &lt;code&gt;development&lt;/code&gt; mode, we throw an error if the value already present in the global object. But you can configure loader to override the existing value in the global object using this option.</source>
          <target state="translated">By default loader does not override the existing value in the global object, because it is unsafe. In &lt;code&gt;development&lt;/code&gt; mode, we throw an error if the value already present in the global object. But you can configure loader to override the existing value in the global object using this option.</target>
        </trans-unit>
        <trans-unit id="e0c55f827e332a921902be9b57511ef0fa617f52" translate="yes" xml:space="preserve">
          <source>By default plugin uses &lt;a href=&quot;https://github.com/cssnano/cssnano&quot;&gt;cssnano&lt;/a&gt; package. It is possible to use another minify function.</source>
          <target state="translated">By default plugin uses &lt;a href=&quot;https://github.com/cssnano/cssnano&quot;&gt;cssnano&lt;/a&gt; package. It is possible to use another minify function.</target>
        </trans-unit>
        <trans-unit id="f60646698aea19a0f5fbedc3bd8c3b61a21d3f3a" translate="yes" xml:space="preserve">
          <source>By default plugin uses &lt;code&gt;uglify-es&lt;/code&gt; package.</source>
          <target state="translated">기본적으로 플러그인은 &lt;code&gt;uglify-es&lt;/code&gt; 패키지를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="984efafcc61ce6040cd5d9425aafa450a6596a34" translate="yes" xml:space="preserve">
          <source>By default the current directory is used, but it's recommended to pass a value in your configuration. This makes your configuration independent from CWD (current working directory).</source>
          <target state="translated">기본적으로 현재 디렉토리가 사용되지만 구성에 값을 전달하는 것이 좋습니다. 이것은 구성을 CWD (현재 작업 디렉토리)와 독립적으로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="d2474fe4ac63d72925a84b79cf55bf8fb9ea2abd" translate="yes" xml:space="preserve">
          <source>By default the loader resolve the implementation based on your dependencies. Just add required implementation to &lt;code&gt;package.json&lt;/code&gt; (&lt;code&gt;sass&lt;/code&gt; or &lt;code&gt;node-sass&lt;/code&gt; package) and install dependencies.</source>
          <target state="translated">By default the loader resolve the implementation based on your dependencies. Just add required implementation to &lt;code&gt;package.json&lt;/code&gt; ( &lt;code&gt;sass&lt;/code&gt; or &lt;code&gt;node-sass&lt;/code&gt; package) and install dependencies.</target>
        </trans-unit>
        <trans-unit id="c63cf5c270bf69f972ef81767789ff2c98e88085" translate="yes" xml:space="preserve">
          <source>By default the plugin will dump full reporting of errors. Set &lt;code&gt;failOnError&lt;/code&gt; to true if you want &lt;code&gt;webpack&lt;/code&gt; build process breaking with any stylelint error. You can use the &lt;code&gt;quiet&lt;/code&gt; option to avoid error output to the console.</source>
          <target state="translated">기본적으로 플러그인은 전체 오류보고를 덤프합니다. stylelint 오류로 &lt;code&gt;webpack&lt;/code&gt; 빌드 프로세스가 중단 되도록 하려면 &lt;code&gt;failOnError&lt;/code&gt; 를 true로 설정하십시오 . 당신은 사용할 수 &lt;code&gt;quiet&lt;/code&gt; 콘솔에 오류 출력을 방지하기 위해 옵션을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="8e021766745c0821508d2260184f8fd0bc58e74a" translate="yes" xml:space="preserve">
          <source>By default the server will only be accessible from localhost. We'll be accessing it from our host PC, so we need to change &lt;code&gt;--host&lt;/code&gt; to allow this.</source>
          <target state="translated">기본적으로 서버는 로컬 호스트에서만 액세스 할 수 있습니다. 호스트 PC에서 액세스 할 수 있으므로 이를 허용 하려면 &lt;code&gt;--host&lt;/code&gt; 를 변경해야합니다 .</target>
        </trans-unit>
        <trans-unit id="8debc812aa693f04d21cb082fa06d9ac86479a59" translate="yes" xml:space="preserve">
          <source>By default webpack ships with the following flags:</source>
          <target state="translated">기본적으로 webpack은 다음 플래그와 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="4650f2e544984361128cea9b6dbb9d7e787175e1" translate="yes" xml:space="preserve">
          <source>By default webpack v4+ provides new common chunks strategies out of the box for dynamically imported modules. See available options for configuring this behavior in the &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;SplitChunksPlugin&lt;/a&gt; page.</source>
          <target state="translated">기본적으로 webpack v4 +는 동적으로 가져온 모듈에 대해 새로운 공통 청크 전략을 제공합니다. &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;SplitChunksPlugin&lt;/a&gt; 페이지 에서이 동작을 구성하는 데 사용 가능한 옵션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3cf73b1f64dbd7bb2ea08ae91b5f1f970d05fb6e" translate="yes" xml:space="preserve">
          <source>By default webpack will automatically detect whether a file is an ESM or a different module system.</source>
          <target state="translated">By default webpack will automatically detect whether a file is an ESM or a different module system.</target>
        </trans-unit>
        <trans-unit id="7311382f9b33e099d7bba42e1454b4a416dd4811" translate="yes" xml:space="preserve">
          <source>By default webpack will generate names using origin and name of the chunk (e.g. &lt;code&gt;vendors~main.js&lt;/code&gt;). This option lets you specify the delimiter to use for the generated names.</source>
          <target state="translated">기본적으로 webpack은 출처와 청크 이름을 사용하여 이름을 생성합니다 (예 : &lt;code&gt;vendors~main.js&lt;/code&gt; ). 이 옵션을 사용하면 생성 된 이름에 사용할 구분 기호를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2ecbad4efaff92ea9e08c2a2b561a1164c9949f0" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;asset/resource&lt;/code&gt; modules are emitting with &lt;code&gt;[hash][ext][query]&lt;/code&gt; filename into output directory.</source>
          <target state="translated">By default, &lt;code&gt;asset/resource&lt;/code&gt; modules are emitting with &lt;code&gt;[hash][ext][query]&lt;/code&gt; filename into output directory.</target>
        </trans-unit>
        <trans-unit id="6d63f289045cdbe661c59e79cdcbc2d45fab641c" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;config-loader&lt;/code&gt; validates your webpack config against the &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/schemas/WebpackOptions.json&quot;&gt;webpack config schema&lt;/a&gt;. However, it can be useful to append additional schema data to allow configs, which contain properties not present in the webpack schema, to pass validation.</source>
          <target state="translated">기본적으로 &lt;code&gt;config-loader&lt;/code&gt; 는 &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/schemas/WebpackOptions.json&quot;&gt;webpack 구성 스키마&lt;/a&gt; 에 대해 webpack 구성의 유효성을 검증합니다 . 그러나 웹팩 스키마에없는 속성을 포함하는 구성이 유효성 검사를 통과 할 수 있도록 추가 스키마 데이터를 추가하는 것이 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f2fab44eb12b609d884084d86672e0ad6cc50ad9" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;css-loader&lt;/code&gt; generates JS modules that use the ES modules syntax. There are some cases in which using ES modules is beneficial, like in the case of &lt;a href=&quot;../plugins/module-concatenation-plugin&quot;&gt;module concatenation&lt;/a&gt; and &lt;a href=&quot;../guides/tree-shaking&quot;&gt;tree shaking&lt;/a&gt;.</source>
          <target state="translated">By default, &lt;code&gt;css-loader&lt;/code&gt; generates JS modules that use the ES modules syntax. There are some cases in which using ES modules is beneficial, like in the case of &lt;a href=&quot;../plugins/module-concatenation-plugin&quot;&gt;module concatenation&lt;/a&gt; and &lt;a href=&quot;../guides/tree-shaking&quot;&gt;tree shaking&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="004d9f559d4c7644816a6172b7cbb35353b7c019" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;file-loader&lt;/code&gt; generates JS modules that use the ES modules syntax. There are some cases in which using ES modules is beneficial, like in the case of &lt;a href=&quot;../plugins/module-concatenation-plugin&quot;&gt;module concatenation&lt;/a&gt; and &lt;a href=&quot;../guides/tree-shaking&quot;&gt;tree shaking&lt;/a&gt;.</source>
          <target state="translated">By default, &lt;code&gt;file-loader&lt;/code&gt; generates JS modules that use the ES modules syntax. There are some cases in which using ES modules is beneficial, like in the case of &lt;a href=&quot;../plugins/module-concatenation-plugin&quot;&gt;module concatenation&lt;/a&gt; and &lt;a href=&quot;../guides/tree-shaking&quot;&gt;tree shaking&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6517f7adc23e97dbd1154078ee9c36f8a1c8245b" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;html-loader&lt;/code&gt; generates JS modules that use the CommonJS modules syntax. There are some cases in which using ES modules is beneficial, like in the case of &lt;a href=&quot;../plugins/module-concatenation-plugin&quot;&gt;module concatenation&lt;/a&gt; and &lt;a href=&quot;../guides/tree-shaking&quot;&gt;tree shaking&lt;/a&gt;.</source>
          <target state="translated">By default, &lt;code&gt;html-loader&lt;/code&gt; generates JS modules that use the CommonJS modules syntax. There are some cases in which using ES modules is beneficial, like in the case of &lt;a href=&quot;../plugins/module-concatenation-plugin&quot;&gt;module concatenation&lt;/a&gt; and &lt;a href=&quot;../guides/tree-shaking&quot;&gt;tree shaking&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="de752d5352d17ddb8798977d4aa91fdbf7d35df6" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;html-loader&lt;/code&gt; generates JS modules that use the ES modules syntax. There are some cases in which using ES modules is beneficial, like in the case of &lt;a href=&quot;../plugins/module-concatenation-plugin&quot;&gt;module concatenation&lt;/a&gt; and &lt;a href=&quot;../guides/tree-shaking&quot;&gt;tree shaking&lt;/a&gt;.</source>
          <target state="translated">기본적으로 &lt;code&gt;html-loader&lt;/code&gt; 는 ES 모듈 구문을 사용하는 JS 모듈을 생성합니다. &lt;a href=&quot;../plugins/module-concatenation-plugin&quot;&gt;모듈 연결&lt;/a&gt; 및 &lt;a href=&quot;../guides/tree-shaking&quot;&gt;트리 쉐이킹&lt;/a&gt; 의 경우와 같이 ES 모듈을 사용하는 것이 유익한 경우가 있습니다.</target>
        </trans-unit>
        <trans-unit id="97ef60af8ee795a2525079735581b601f175dafb" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;jshint-loader&lt;/code&gt; will provide a default reporter.</source>
          <target state="translated">기본적으로 &lt;code&gt;jshint-loader&lt;/code&gt; 는 기본 리포터를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="06ca04fe7b291926cd5207c814a4b96010f1d9a4" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;mini-css-extract-plugin&lt;/code&gt; generates JS modules that use the ES modules syntax. There are some cases in which using ES modules is beneficial, like in the case of &lt;a href=&quot;module-concatenation-plugin&quot;&gt;module concatenation&lt;/a&gt; and &lt;a href=&quot;../guides/tree-shaking&quot;&gt;tree shaking&lt;/a&gt;.</source>
          <target state="translated">By default, &lt;code&gt;mini-css-extract-plugin&lt;/code&gt; generates JS modules that use the ES modules syntax. There are some cases in which using ES modules is beneficial, like in the case of &lt;a href=&quot;module-concatenation-plugin&quot;&gt;module concatenation&lt;/a&gt; and &lt;a href=&quot;../guides/tree-shaking&quot;&gt;tree shaking&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8a8fe2b94fb50f2d264ee353fc271e32fea5e7ec" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;raw-loader&lt;/code&gt; generates JS modules that use the ES modules syntax. There are some cases in which using ES modules is beneficial, like in the case of &lt;a href=&quot;../plugins/module-concatenation-plugin&quot;&gt;module concatenation&lt;/a&gt; and &lt;a href=&quot;../guides/tree-shaking&quot;&gt;tree shaking&lt;/a&gt;.</source>
          <target state="translated">By default, &lt;code&gt;raw-loader&lt;/code&gt; generates JS modules that use the ES modules syntax. There are some cases in which using ES modules is beneficial, like in the case of &lt;a href=&quot;../plugins/module-concatenation-plugin&quot;&gt;module concatenation&lt;/a&gt; and &lt;a href=&quot;../guides/tree-shaking&quot;&gt;tree shaking&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="73fe08c62d0c87f2cac1032e72126e45bda82001" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;style-loader&lt;/code&gt; generates JS modules that use the ES modules syntax. There are some cases in which using ES modules is beneficial, like in the case of &lt;a href=&quot;../plugins/module-concatenation-plugin&quot;&gt;module concatenation&lt;/a&gt; and &lt;a href=&quot;../guides/tree-shaking&quot;&gt;tree shaking&lt;/a&gt;.</source>
          <target state="translated">By default, &lt;code&gt;style-loader&lt;/code&gt; generates JS modules that use the ES modules syntax. There are some cases in which using ES modules is beneficial, like in the case of &lt;a href=&quot;../plugins/module-concatenation-plugin&quot;&gt;module concatenation&lt;/a&gt; and &lt;a href=&quot;../guides/tree-shaking&quot;&gt;tree shaking&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="2cb79f7a2e4f49210ca7830a1925158ece337631" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;worker-loader&lt;/code&gt; generates JS modules that use the ES modules syntax.</source>
          <target state="translated">By default, &lt;code&gt;worker-loader&lt;/code&gt; generates JS modules that use the ES modules syntax.</target>
        </trans-unit>
        <trans-unit id="47ef46f73ede13250551f376ddf820436db38b23" translate="yes" xml:space="preserve">
          <source>By default, Node.js does not search for modules through symlinks, and so you may experience errors such as:</source>
          <target state="translated">기본적으로 Node.js는 심볼릭 링크를 통해 모듈을 검색하지 않으므로 다음과 같은 오류가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d8a179c82e01b49a697729e16a90af65f3723aa" translate="yes" xml:space="preserve">
          <source>By default, a minimum length of 3 digits is used when &lt;code&gt;optimization.chunkIds&lt;/code&gt; is set to &lt;code&gt;'deterministic'&lt;/code&gt;. To override the default behaviour, set &lt;code&gt;optimization.chunkIds&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; and use the &lt;code&gt;webpack.ids.DeterministicChunkIdsPlugin&lt;/code&gt;.</source>
          <target state="translated">By default, a minimum length of 3 digits is used when &lt;code&gt;optimization.chunkIds&lt;/code&gt; is set to &lt;code&gt;'deterministic'&lt;/code&gt; . To override the default behaviour, set &lt;code&gt;optimization.chunkIds&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; and use the &lt;code&gt;webpack.ids.DeterministicChunkIdsPlugin&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d32e9590ea4e57c78a46b9d834961b9d1e542814" translate="yes" xml:space="preserve">
          <source>By default, data URI emitted by webpack represents file contents encoded by using Base64 algorithm.</source>
          <target state="translated">By default, data URI emitted by webpack represents file contents encoded by using Base64 algorithm.</target>
        </trans-unit>
        <trans-unit id="88d325f856b4d5a03f14bb6f2772e27fcccc5044" translate="yes" xml:space="preserve">
          <source>By default, dev-server will be served over HTTP. It can optionally be served over HTTP/2 with HTTPS:</source>
          <target state="translated">By default, dev-server will be served over HTTP. It can optionally be served over HTTP/2 with HTTPS:</target>
        </trans-unit>
        <trans-unit id="09cb899fae4c8256d685240c56a4ce118547eb08" translate="yes" xml:space="preserve">
          <source>By default, every entry chunk stores all the modules that it uses. With &lt;code&gt;dependOn&lt;/code&gt; option you can share the modules from one entry chunk to another:</source>
          <target state="translated">기본적으로 모든 항목 청크는 사용하는 모든 모듈을 저장합니다. &lt;code&gt;dependOn&lt;/code&gt; 옵션을 사용하면 한 항목 청크에서 다른 항목 청크로 모듈을 공유 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="161d39025f247d243d42a3b0647034e182517d78" translate="yes" xml:space="preserve">
          <source>By default, every entry chunk stores all the modules that it uses. With &lt;code&gt;dependOn&lt;/code&gt;-option you can share the modules from one entry chunk to another:</source>
          <target state="translated">By default, every entry chunk stores all the modules that it uses. With &lt;code&gt;dependOn&lt;/code&gt; -option you can share the modules from one entry chunk to another:</target>
        </trans-unit>
        <trans-unit id="24c5501fb445b917b55043f95af564bb348cd418" translate="yes" xml:space="preserve">
          <source>By default, it will use your current working directory to serve content. To disable &lt;code&gt;contentBase&lt;/code&gt; set it to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">By default, it will use your current working directory to serve content. To disable &lt;code&gt;contentBase&lt;/code&gt; set it to &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e3a60c6ecc9c034ccbac409d962afe9fd7b083c8" translate="yes" xml:space="preserve">
          <source>By default, loader results are flagged as cacheable. Call this method passing &lt;code&gt;false&lt;/code&gt; to make the loader's result not cacheable.</source>
          <target state="translated">기본적으로 로더 결과는 캐시 가능으로 플래그됩니다. 로더의 결과를 캐시 할 수 없도록하려면 이 메소드를 &lt;code&gt;false&lt;/code&gt; 로 전달 하십시오.</target>
        </trans-unit>
        <trans-unit id="d10223e027ecd507591e60582893d5a51da4fa6a" translate="yes" xml:space="preserve">
          <source>By default, module resolution path is current folder (&lt;code&gt;./**)&lt;/code&gt; and &lt;code&gt;node_modules&lt;/code&gt;.</source>
          <target state="translated">By default, module resolution path is current folder ( &lt;code&gt;./**)&lt;/code&gt; and &lt;code&gt;node_modules&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6f537112e505c5e11eafe64d66b4d7df7a61b795" translate="yes" xml:space="preserve">
          <source>By default, progress percentage is calculated based on built modules count and total modules count: &lt;code&gt;built / total&lt;/code&gt;</source>
          <target state="translated">By default, progress percentage is calculated based on built modules count and total modules count: &lt;code&gt;built / total&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="abd4e9ba33ca76d8d1cc0ab7c0e343a18b1f766f" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;extract-css-chunks-plugin&lt;/code&gt; appends styles (&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; elements) to &lt;code&gt;document.head&lt;/code&gt; of the current &lt;code&gt;window&lt;/code&gt;.</source>
          <target state="translated">By default, the &lt;code&gt;extract-css-chunks-plugin&lt;/code&gt; appends styles ( &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; elements) to &lt;code&gt;document.head&lt;/code&gt; of the current &lt;code&gt;window&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="923ead83aeb1776e44f630b5141fac802679bbae" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;mini-css-extract-plugin&lt;/code&gt; appends styles (&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; elements) to &lt;code&gt;document.head&lt;/code&gt; of the current &lt;code&gt;window&lt;/code&gt;.</source>
          <target state="translated">기본적으로 &lt;code&gt;mini-css-extract-plugin&lt;/code&gt; 은 현재 &lt;code&gt;window&lt;/code&gt; &lt;code&gt;document.head&lt;/code&gt; 에 스타일 ( &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 요소)을 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="ffc3451ce4b3c7da6fa8137597d798d1c25b84de" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;style-loader&lt;/code&gt; appends &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; elements to the end of the style target, which is the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag of the page unless specified by &lt;code&gt;insert&lt;/code&gt;. This will cause CSS created by the loader to take priority over CSS already present in the target. You can use other values if the standard behavior is not suitable for you, but we do not recommend doing this. If you target an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement&quot;&gt;iframe&lt;/a&gt; make sure you have sufficient access rights, the styles will be injected into the content document head.</source>
          <target state="translated">By default, the &lt;code&gt;style-loader&lt;/code&gt; appends &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; / &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; elements to the end of the style target, which is the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag of the page unless specified by &lt;code&gt;insert&lt;/code&gt; . This will cause CSS created by the loader to take priority over CSS already present in the target. You can use other values if the standard behavior is not suitable for you, but we do not recommend doing this. If you target an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement&quot;&gt;iframe&lt;/a&gt; make sure you have sufficient access rights, the styles will be injected into the content document head.</target>
        </trans-unit>
        <trans-unit id="1ea8a4a53a95cc7d410e9f6b03d3c377d6ac6326" translate="yes" xml:space="preserve">
          <source>By default, the dev-server will reload/refresh the page when file changes are detected. &lt;a href=&quot;#devserverhot&quot;&gt;&lt;code&gt;devServer.hot&lt;/code&gt;&lt;/a&gt; option must be disabled or &lt;a href=&quot;#devserverwatchcontentbase&quot;&gt;&lt;code&gt;devServer.watchContentBase&lt;/code&gt;&lt;/a&gt; option must be enabled in order for &lt;code&gt;liveReload&lt;/code&gt; to take effect. Disable &lt;code&gt;devServer.liveReload&lt;/code&gt; by setting it to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">By default, the dev-server will reload/refresh the page when file changes are detected. &lt;a href=&quot;#devserverhot&quot;&gt; &lt;code&gt;devServer.hot&lt;/code&gt; &lt;/a&gt; option must be disabled or &lt;a href=&quot;#devserverwatchcontentbase&quot;&gt; &lt;code&gt;devServer.watchContentBase&lt;/code&gt; &lt;/a&gt; option must be enabled in order for &lt;code&gt;liveReload&lt;/code&gt; to take effect. Disable &lt;code&gt;devServer.liveReload&lt;/code&gt; by setting it to &lt;code&gt;false&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a547c3ebef53a9877db6975ab4980094cfcc2ef4" translate="yes" xml:space="preserve">
          <source>By default, the exported JSON keys mirror the class names (i.e &lt;code&gt;asIs&lt;/code&gt; value).</source>
          <target state="translated">By default, the exported JSON keys mirror the class names (i.e &lt;code&gt;asIs&lt;/code&gt; value).</target>
        </trans-unit>
        <trans-unit id="c4c21360c1f42d1c93ef817a33ab9c04c70ba95d" translate="yes" xml:space="preserve">
          <source>By default, the exported JSON keys mirror the class names. If you want to camelize class names (useful in JS), pass the query parameter &lt;code&gt;camelCase&lt;/code&gt; to css-loader.</source>
          <target state="translated">기본적으로 내 보낸 JSON 키는 클래스 이름을 미러링합니다. 클래스 이름을 카멜 리즈하려는 경우 (JS에서 유용) 쿼리 매개 변수 &lt;code&gt;camelCase&lt;/code&gt; 를 css-loader에 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="caca841e5dd6c88bb73ea4abe999adc6ba464ff2" translate="yes" xml:space="preserve">
          <source>By default, the frontMatter is removed. To override this behavior, set &lt;code&gt;removeFrontMatter&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; and add &lt;code&gt;remark-frontmatter&lt;/code&gt; to plugins.</source>
          <target state="translated">By default, the frontMatter is removed. To override this behavior, set &lt;code&gt;removeFrontMatter&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; and add &lt;code&gt;remark-frontmatter&lt;/code&gt; to plugins.</target>
        </trans-unit>
        <trans-unit id="07bddb16e1b332b239af8b4eec9f8dfb68273261" translate="yes" xml:space="preserve">
          <source>By default, the output filename for the entry chunk is extracted from &lt;a href=&quot;output#outputfilename&quot;&gt;&lt;code&gt;output.filename&lt;/code&gt;&lt;/a&gt; but you can specify a custom output filename for a specific entry:</source>
          <target state="translated">By default, the output filename for the entry chunk is extracted from &lt;a href=&quot;output#outputfilename&quot;&gt; &lt;code&gt;output.filename&lt;/code&gt; &lt;/a&gt; but you can specify a custom output filename for a specific entry:</target>
        </trans-unit>
        <trans-unit id="4a9bcff9d166dfa99386ebc32bce373568cc019e" translate="yes" xml:space="preserve">
          <source>By default, the resource file is converted to a UTF-8 string and passed to the loader. By setting the &lt;code&gt;raw&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt;, the loader will receive the raw &lt;code&gt;Buffer&lt;/code&gt;. Every loader is allowed to deliver its result as a &lt;code&gt;String&lt;/code&gt; or as a &lt;code&gt;Buffer&lt;/code&gt;. The compiler converts them between loaders.</source>
          <target state="translated">By default, the resource file is converted to a UTF-8 string and passed to the loader. By setting the &lt;code&gt;raw&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt; , the loader will receive the raw &lt;code&gt;Buffer&lt;/code&gt; . Every loader is allowed to deliver its result as a &lt;code&gt;String&lt;/code&gt; or as a &lt;code&gt;Buffer&lt;/code&gt; . The compiler converts them between loaders.</target>
        </trans-unit>
        <trans-unit id="1e9df8c0eec9f9d45da92cc9239faeaed0f30b00" translate="yes" xml:space="preserve">
          <source>By default, the resource file is converted to a UTF-8 string and passed to the loader. By setting the &lt;code&gt;raw&lt;/code&gt; flag, the loader will receive the raw &lt;code&gt;Buffer&lt;/code&gt;. Every loader is allowed to deliver its result as &lt;code&gt;String&lt;/code&gt; or as &lt;code&gt;Buffer&lt;/code&gt;. The compiler converts them between loaders.</source>
          <target state="translated">기본적으로 자원 파일은 UTF-8 문자열로 변환되어 로더로 전달됩니다. &lt;code&gt;raw&lt;/code&gt; 플래그 를 설정함으로써 로더는 raw &lt;code&gt;Buffer&lt;/code&gt; 를 받습니다 . 모든 로더는 결과를 &lt;code&gt;String&lt;/code&gt; 또는 &lt;code&gt;Buffer&lt;/code&gt; 로 전달할 수 있습니다 . 컴파일러는 로더간에이를 변환합니다.</target>
        </trans-unit>
        <trans-unit id="9a86f3b298770491ce0efb103e516d58a9d1216c" translate="yes" xml:space="preserve">
          <source>By default, the server will only be accessible from localhost. We'll be accessing it from our host PC, so we need to change &lt;code&gt;--host&lt;/code&gt; to allow this.</source>
          <target state="translated">By default, the server will only be accessible from localhost. We'll be accessing it from our host PC, so we need to change &lt;code&gt;--host&lt;/code&gt; to allow this.</target>
        </trans-unit>
        <trans-unit id="a8a5338c3bd8aee6d5222feb44fc1870263d1b9d" translate="yes" xml:space="preserve">
          <source>By default, the style-loader appends &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; elements to the end of the style target, which is the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag of the page unless specified by &lt;code&gt;insertInto&lt;/code&gt;. This will cause CSS created by the loader to take priority over CSS already present in the target. To insert style elements at the beginning of the target, set this query parameter to 'top', e.g</source>
          <target state="translated">기본적으로 스타일 로더는 스타일 대상의 끝에 &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 요소를 추가 합니다. 이는 &lt;code&gt;insertInto&lt;/code&gt; 에 의해 지정되지 않는 한 페이지 의 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 태그입니다 . 그러면 로더가 작성한 CSS가 대상에 이미 존재하는 CSS보다 우선합니다. 대상의 시작 부분에 스타일 요소를 삽입하려면이 쿼리 매개 변수를 'top'으로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="24787b73adf49ae1cd12ebff5c4a06d3d869d262" translate="yes" xml:space="preserve">
          <source>By default, the style-loader inserts the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; elements into the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag of the page. If you want the tags to be inserted somewhere else you can specify a CSS selector for that element here. If you target an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement&quot;&gt;IFrame&lt;/a&gt; make sure you have sufficient access rights, the styles will be injected into the content document head.</source>
          <target state="translated">기본적으로 스타일 로더는 &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 요소를 페이지의 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 태그에 삽입합니다. 태그를 다른 곳에 삽입하려면 여기에서 해당 요소의 CSS 선택기를 지정할 수 있습니다. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement&quot;&gt;IFrame&lt;/a&gt; 을 대상으로하는 경우 충분한 액세스 권한이 있는지 확인하십시오. 스타일은 컨텐츠 문서 헤드에 삽입됩니다.</target>
        </trans-unit>
        <trans-unit id="48a393bae9d71e6e98618c13befd92165b0451ed" translate="yes" xml:space="preserve">
          <source>By default, there is no name for &lt;code&gt;non-initial&lt;/code&gt; chunks so that a unique ID is used instead of a name. When using dynamic import we may specify a chunk name explicitly by using a &lt;a href=&quot;../api/module-methods#magic-comments&quot;&gt;&quot;magic&quot; comment&lt;/a&gt;:</source>
          <target state="translated">By default, there is no name for &lt;code&gt;non-initial&lt;/code&gt; chunks so that a unique ID is used instead of a name. When using dynamic import we may specify a chunk name explicitly by using a &lt;a href=&quot;../api/module-methods#magic-comments&quot;&gt;&quot;magic&quot; comment&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="6ab73ca6afc3eb99bc4d0b519a3d65a4b5e85601" translate="yes" xml:space="preserve">
          <source>By default, webpack reads files and writes files to disk using a normal file system. However, it is possible to change the input or output behavior using a different kind of file system (memory, webDAV, etc). To accomplish this, one can change the &lt;code&gt;inputFileSystem&lt;/code&gt; or &lt;code&gt;outputFileSystem&lt;/code&gt;. For example, you can replace the default &lt;code&gt;outputFileSystem&lt;/code&gt; with &lt;a href=&quot;https://github.com/streamich/memfs&quot;&gt;&lt;code&gt;memfs&lt;/code&gt;&lt;/a&gt; to write files to memory instead of to disk:</source>
          <target state="translated">By default, webpack reads files and writes files to disk using a normal file system. However, it is possible to change the input or output behavior using a different kind of file system (memory, webDAV, etc). To accomplish this, one can change the &lt;code&gt;inputFileSystem&lt;/code&gt; or &lt;code&gt;outputFileSystem&lt;/code&gt; . For example, you can replace the default &lt;code&gt;outputFileSystem&lt;/code&gt; with &lt;a href=&quot;https://github.com/streamich/memfs&quot;&gt; &lt;code&gt;memfs&lt;/code&gt; &lt;/a&gt; to write files to memory instead of to disk:</target>
        </trans-unit>
        <trans-unit id="4bf2bb54beea4199ed924b9bf7fec6690b21dd18" translate="yes" xml:space="preserve">
          <source>By default, webpack reads files and writes files to disk using a normal file system. However, it is possible to change the input or output behavior using a different kind of file system (memory, webDAV, etc). To accomplish this, one can change the &lt;code&gt;inputFileSystem&lt;/code&gt; or &lt;code&gt;outputFileSystem&lt;/code&gt;. For example, you can replace the default &lt;code&gt;outputFileSystem&lt;/code&gt; with &lt;a href=&quot;https://github.com/webpack/memory-fs&quot;&gt;&lt;code&gt;memory-fs&lt;/code&gt;&lt;/a&gt; to write files to memory instead of to disk:</source>
          <target state="translated">기본적으로 webpack은 일반 파일 시스템을 사용하여 파일을 읽고 디스크에 파일을 씁니다. 그러나 다른 종류의 파일 시스템 (메모리, webDAV 등)을 사용하여 입력 또는 출력 동작을 변경할 수 있습니다. 이를 위해 &lt;code&gt;inputFileSystem&lt;/code&gt; 또는 &lt;code&gt;outputFileSystem&lt;/code&gt; 을 변경할 수 있습니다 . 예를 들어, 기본 &lt;code&gt;outputFileSystem&lt;/code&gt; 을 &lt;a href=&quot;https://github.com/webpack/memory-fs&quot;&gt; &lt;code&gt;memory-fs&lt;/code&gt; &lt;/a&gt; 로 바꾸어 파일을 디스크 대신 메모리에 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d38d305798cf5dce43fc31a2af6e01ab69de4ce0" translate="yes" xml:space="preserve">
          <source>By default, webpack will polyfill each library if there is a known polyfill or do nothing if there is not one. In the latter case, webpack will behave as if the module name was configured with the &lt;code&gt;false&lt;/code&gt; value.</source>
          <target state="translated">기본적으로 webpack은 알려진 polyfill이있는 경우 각 라이브러리를 polyfill하거나없는 경우 아무것도하지 않습니다. 후자의 경우, 웹팩은 모듈 이름이 &lt;code&gt;false&lt;/code&gt; 값 으로 구성된 것처럼 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="c5b635c13f593fd91c69b303a7a0d9c741ea5d75" translate="yes" xml:space="preserve">
          <source>By introducing webpack logging API we hope to unify the way webpack plugins and loaders emit logs and allow better ways to inspect build problems. Integrated logging solution supports plugins and loaders developers by improving their development experience. Paves the way for non-CLI webpack solutions like dashboards or other UIs.</source>
          <target state="translated">By introducing webpack logging API we hope to unify the way webpack plugins and loaders emit logs and allow better ways to inspect build problems. Integrated logging solution supports plugins and loaders developers by improving their development experience. Paves the way for non-CLI webpack solutions like dashboards or other UIs.</target>
        </trans-unit>
        <trans-unit id="085ab7a92184bd93a782a09d74ae8dd8d1a4466c" translate="yes" xml:space="preserve">
          <source>By passing an object this behavior can be controlled further using options like &lt;code&gt;rewrites&lt;/code&gt;:</source>
          <target state="translated">객체를 전달하면 &lt;code&gt;rewrites&lt;/code&gt; 와 같은 옵션을 사용하여이 동작을 추가로 제어 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e97f5c01c89af0cefbd0d0cde69f806012180e4c" translate="yes" xml:space="preserve">
          <source>By separating common modules from bundles, the resulting chunked file can be loaded once initially, and stored in cache for later use. This results in page speed optimizations as the browser can quickly serve the shared code from cache, rather than being forced to load a larger bundle whenever a new page is visited.</source>
          <target state="translated">공통 모듈을 번들에서 분리함으로써 결과 청크 파일을 처음에 한 번로드 한 후 나중에 사용하기 위해 캐시에 저장할 수 있습니다. 따라서 새 페이지를 방문 할 때마다 더 큰 번들을로드하지 않고 브라우저가 캐시에서 공유 코드를 신속하게 제공 할 수 있으므로 페이지 속도가 최적화됩니다.</target>
        </trans-unit>
        <trans-unit id="a991e17a36449e26a7e54b70d0173a341f33732c" translate="yes" xml:space="preserve">
          <source>By setting &lt;code&gt;optimization.runtimeChunk&lt;/code&gt; to &lt;code&gt;object&lt;/code&gt; it is only possible to provide the &lt;code&gt;name&lt;/code&gt; property which stands for the name or name factory for the runtime chunks.</source>
          <target state="translated">&lt;code&gt;optimization.runtimeChunk&lt;/code&gt; 를 &lt;code&gt;object&lt;/code&gt; 로 설정 하면 다음을 제공 할 수 있습니다. &lt;code&gt;name&lt;/code&gt; 하면 런타임 청크의 이름 또는 이름 팩토리를 나타내는 name 특성 .</target>
        </trans-unit>
        <trans-unit id="14695fbd6ec12ac4e342fa79d9821e32c78f693f" translate="yes" xml:space="preserve">
          <source>By setting the &lt;code&gt;mode&lt;/code&gt; parameter to either &lt;code&gt;development&lt;/code&gt;, &lt;code&gt;production&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;, you can enable webpack's built-in optimizations that correspond to each environment. The default value is &lt;code&gt;production&lt;/code&gt;.</source>
          <target state="translated">설정에 따라 &lt;code&gt;mode&lt;/code&gt; 중 하나에 매개 변수를 &lt;code&gt;development&lt;/code&gt; , &lt;code&gt;production&lt;/code&gt; 또는 &lt;code&gt;none&lt;/code&gt; , 당신은 웹팩 내장에있어 최적화 그 대응을 각 환경에 사용할 수 있습니다. 기본값은 &lt;code&gt;production&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6f249d023fe3f62fa467ee093fdaad1b52335034" translate="yes" xml:space="preserve">
          <source>By using content hashes within your bundle file names, you can indicate to the browser when the content of a file has changed, thus invalidating the cache. Once you start doing this though, you'll immediately notice some funny behavior. Certain hashes change even when their content apparently does not. This is caused by the injection of the runtime and manifest, which changes every build.</source>
          <target state="translated">By using content hashes within your bundle file names, you can indicate to the browser when the content of a file has changed, thus invalidating the cache. Once you start doing this though, you'll immediately notice some funny behavior. Certain hashes change even when their content apparently does not. This is caused by the injection of the runtime and manifest, which changes every build.</target>
        </trans-unit>
        <trans-unit id="9f9ab8853b825eb0487145595ae1c6752e14367c" translate="yes" xml:space="preserve">
          <source>By using content hashes within your bundle file names, you can indicate to the browser when the contents of a file has changed thus invalidating the cache. Once you start doing this though, you'll immediately notice some funny behavior. Certain hashes change even when their contents apparently do not. This is caused by the injection of the runtime and manifest which changes every build.</source>
          <target state="translated">번들 파일 이름 내에 컨텐츠 해시를 사용하여 파일의 컨텐츠가 변경된시기를 브라우저에 표시하여 캐시를 무효화 할 수 있습니다. 이 작업을 시작하면 즉시 재미있는 동작이 나타납니다. 특정 해시는 내용이 분명하지 않아도 변경됩니다. 이는 런타임의 주입과 모든 빌드를 변경하는 매니페스트로 인해 발생합니다.</target>
        </trans-unit>
        <trans-unit id="00a4d2ee420be37ba618a7686bada5e4568fb379" translate="yes" xml:space="preserve">
          <source>By using each other, the modules form a graph (&lt;code&gt;ModuleGraph&lt;/code&gt;).</source>
          <target state="translated">By using each other, the modules form a graph ( &lt;code&gt;ModuleGraph&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="67b6c4b8addee6f0bec9b64fdc066f75fd594e81" translate="yes" xml:space="preserve">
          <source>CDN</source>
          <target state="translated">CDN</target>
        </trans-unit>
        <trans-unit id="700b401ca52b1bd3071dc838bf11be9cdb19fc5f" translate="yes" xml:space="preserve">
          <source>CLI</source>
          <target state="translated">CLI</target>
        </trans-unit>
        <trans-unit id="886bbf2a80f95778693ae661f9a8c9c9073e263f" translate="yes" xml:space="preserve">
          <source>CLI Alternatives</source>
          <target state="translated">CLI 대안</target>
        </trans-unit>
        <trans-unit id="7f7cc9ea4f25778413b033bb70b38e8e36c63e26" translate="yes" xml:space="preserve">
          <source>CLI will look for some default configurations in the path of your project, here are the config files picked up by CLI.</source>
          <target state="translated">CLI will look for some default configurations in the path of your project, here are the config files picked up by CLI.</target>
        </trans-unit>
        <trans-unit id="2facaa1a2ff325d66333a99cb5f993294547cf45" translate="yes" xml:space="preserve">
          <source>CLI, UI tools for webpack may choose different ways to display logging</source>
          <target state="translated">CLI, UI tools for webpack may choose different ways to display logging</target>
        </trans-unit>
        <trans-unit id="378eb0be276c8f7e7ce971475f7e96915511bccb" translate="yes" xml:space="preserve">
          <source>CONTRIBUTING</source>
          <target state="translated">CONTRIBUTING</target>
        </trans-unit>
        <trans-unit id="c4d980594bea8a509d459ae7077152d667b04ea9" translate="yes" xml:space="preserve">
          <source>CSP on MDN</source>
          <target state="translated">MDN의 CSP</target>
        </trans-unit>
        <trans-unit id="97befa051e267aa5bfaef0737e884f1fa17b1e3a" translate="yes" xml:space="preserve">
          <source>CSS &lt;code&gt;@import&lt;/code&gt;</source>
          <target state="translated">CSS &lt;code&gt;@import&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="63b89c4cbe4e07b5d318b0db30585680356a57b5" translate="yes" xml:space="preserve">
          <source>CSS &lt;code&gt;url()&lt;/code&gt;</source>
          <target state="translated">CSS &lt;code&gt;url()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="af84dc7b721fe874f581f9faab67d8860beb1faa" translate="yes" xml:space="preserve">
          <source>CSS Modules</source>
          <target state="translated">CSS Modules</target>
        </trans-unit>
        <trans-unit id="70e1670778a32d536afb3b23894d55b95195e617" translate="yes" xml:space="preserve">
          <source>CSS SourceMap (with &lt;code&gt;devtool: &quot;source-map&quot;&lt;/code&gt; and &lt;code&gt;extract-text-webpack-plugin?sourceMap&lt;/code&gt;)</source>
          <target state="translated">CSS SourceMap ( &lt;code&gt;devtool: &quot;source-map&quot;&lt;/code&gt; 및 &lt;code&gt;extract-text-webpack-plugin?sourceMap&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="c2287c82447df369d18e9d5bbb9e8519cae603e2" translate="yes" xml:space="preserve">
          <source>CSS cached separate</source>
          <target state="translated">CSS는 별도로 캐시</target>
        </trans-unit>
        <trans-unit id="3a2efc4fd89eab253bdbdcca0d1c1c0894b24826" translate="yes" xml:space="preserve">
          <source>CSS modules gotcha</source>
          <target state="translated">CSS 모듈</target>
        </trans-unit>
        <trans-unit id="4bc554087a5ece322d7f424d2e986222c59f507b" translate="yes" xml:space="preserve">
          <source>CSS requested in parallel</source>
          <target state="translated">동시에 요청 된 CSS</target>
        </trans-unit>
        <trans-unit id="1ab86c741fc733293ef946f5584612e04bf1a679" translate="yes" xml:space="preserve">
          <source>CSS-in-JS and &lt;a href=&quot;https://github.com/postcss/postcss-js&quot;&gt;&lt;code&gt;postcss-js&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">CSS-in-JS and &lt;a href=&quot;https://github.com/postcss/postcss-js&quot;&gt; &lt;code&gt;postcss-js&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="174602ff70b2496c74d83f41e36b7c61bbaf7430" translate="yes" xml:space="preserve">
          <source>Cache And Parallel</source>
          <target state="translated">캐시와 병렬</target>
        </trans-unit>
        <trans-unit id="512abc45cd64a3405fcfeb6a96dedd1f7bacb199" translate="yes" xml:space="preserve">
          <source>Cache groups can inherit and/or override any options from &lt;code&gt;splitChunks.*&lt;/code&gt;; but &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;priority&lt;/code&gt; and &lt;code&gt;reuseExistingChunk&lt;/code&gt; can only be configured on cache group level. To disable any of the default cache groups, set them to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">캐시 그룹은 &lt;code&gt;splitChunks.*&lt;/code&gt; 모든 옵션을 상속 및 / 또는 무시할 수 있습니다 . * ; 그러나 &lt;code&gt;test&lt;/code&gt; , &lt;code&gt;priority&lt;/code&gt; 및 &lt;code&gt;reuseExistingChunk&lt;/code&gt; 는 캐시 그룹 레벨에서만 구성 할 수 있습니다. 기본 캐시 그룹을 비활성화하려면 해당 그룹을 &lt;code&gt;false&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="e4b6fb1118863b1da963533d06d544ba64b98951" translate="yes" xml:space="preserve">
          <source>Cache the generated webpack modules and chunks to improve build speed. &lt;code&gt;cache&lt;/code&gt; is set to &lt;code&gt;type: 'memory'&lt;/code&gt; in &lt;a href=&quot;mode#mode-development&quot;&gt;&lt;code&gt;development&lt;/code&gt; mode&lt;/a&gt; and disabled in &lt;a href=&quot;mode#mode-production&quot;&gt;&lt;code&gt;production&lt;/code&gt; mode&lt;/a&gt;. &lt;code&gt;cache: true&lt;/code&gt; is an alias to &lt;code&gt;cache: { type: 'memory' }&lt;/code&gt;. To disable caching pass &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">Cache the generated webpack modules and chunks to improve build speed. &lt;code&gt;cache&lt;/code&gt; is set to &lt;code&gt;type: 'memory'&lt;/code&gt; in &lt;a href=&quot;mode#mode-development&quot;&gt; &lt;code&gt;development&lt;/code&gt; mode&lt;/a&gt; and disabled in &lt;a href=&quot;mode#mode-production&quot;&gt; &lt;code&gt;production&lt;/code&gt; mode&lt;/a&gt;. &lt;code&gt;cache: true&lt;/code&gt; is an alias to &lt;code&gt;cache: { type: 'memory' }&lt;/code&gt; . To disable caching pass &lt;code&gt;false&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="53c1c495f892fda2b308e7967ce7cd99069c38f5" translate="yes" xml:space="preserve">
          <source>Cache the generated webpack modules and chunks to improve build speed. Caching is enabled by default while in watch mode. To disable caching simply pass:</source>
          <target state="translated">생성 된 웹팩 모듈과 청크를 캐시하여 빌드 속도를 향상시킵니다. 캐싱은 시계 모드에서 기본적으로 활성화되어 있습니다. 캐싱을 비활성화하려면 간단히 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="ba8d6db05a564fd0a10f7e7b8320e6a5406398ea" translate="yes" xml:space="preserve">
          <source>Cache the resolution of module requests. There are a couple of defaults for &lt;code&gt;module.unsafeCache&lt;/code&gt;:</source>
          <target state="translated">모듈 요청의 해결을 캐시합니다. &lt;code&gt;module.unsafeCache&lt;/code&gt; 에 대한 몇 가지 기본값이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6816da3e20ad59077917dec7c477b8698eb0fbac" translate="yes" xml:space="preserve">
          <source>Cache the resolution of module requests. There are couple of defaults for &lt;code&gt;module.unsafeCache&lt;/code&gt;:</source>
          <target state="translated">Cache the resolution of module requests. There are couple of defaults for &lt;code&gt;module.unsafeCache&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="039011f7451d9da5c981ea386a10cfb3b869e201" translate="yes" xml:space="preserve">
          <source>CachePlugin</source>
          <target state="translated">CachePlugin</target>
        </trans-unit>
        <trans-unit id="69d33fae12825b692168f154ed5d210549251580" translate="yes" xml:space="preserve">
          <source>Caches the result of following loaders on disk (default) or in the database</source>
          <target state="translated">다음 로더의 결과를 디스크 (기본값) 또는 데이터베이스에 캐시합니다.</target>
        </trans-unit>
        <trans-unit id="60790f7c84170a8b87051d7e857118ffeb0465ee" translate="yes" xml:space="preserve">
          <source>Caching</source>
          <target state="translated">Caching</target>
        </trans-unit>
        <trans-unit id="b72209ea1ca3cd9add6e91a9938b50e2d7ece1d8" translate="yes" xml:space="preserve">
          <source>Caching can be complicated, but the benefit to application or site users makes it worth the effort. See the &lt;em&gt;Further Reading&lt;/em&gt; section below to learn more.</source>
          <target state="translated">Caching can be complicated, but the benefit to application or site users makes it worth the effort. See the &lt;em&gt;Further Reading&lt;/em&gt; section below to learn more.</target>
        </trans-unit>
        <trans-unit id="db22fd64b088f5c7aaf8ec3fc69861df795199eb" translate="yes" xml:space="preserve">
          <source>Caching gets messy. Plain and simple. However the walk-through above should give you a running start to deploying consistent, cachable assets. See the &lt;em&gt;Further Reading&lt;/em&gt; section below to learn more.</source>
          <target state="translated">캐싱은 지저분해진다. 평범하고 단순합니다. 그러나 위의 연습을 통해 일관성 있고 캐싱 가능한 자산을 배포 할 수 있습니다. 참조&lt;em&gt; 더 읽기&lt;/em&gt; 아래 섹션을 .</target>
        </trans-unit>
        <trans-unit id="115b241217d0dcaea99f641cfd95874312de4849" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;npm run coverage&lt;/code&gt; to check the test coverage (using &lt;a href=&quot;https://github.com/gotwarlost/istanbul&quot;&gt;istanbul&lt;/a&gt;)</source>
          <target state="translated">테스트 범위를 확인하려면 &lt;code&gt;npm run coverage&lt;/code&gt; 를 호출 하십시오 (&lt;a href=&quot;https://github.com/gotwarlost/istanbul&quot;&gt; istanbul&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="828e9dac24c5fd2a27df7ca1873f35f641e9faae" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;npm test&lt;/code&gt; to run the unit tests</source>
          <target state="translated">단위 &lt;code&gt;npm test&lt;/code&gt; 를 실행하려면 npm 테스트 를 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="c3d9ad9094aa7589ef6da0ec4121c962e81d8da3" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;a href=&quot;../configuration/entry-context#context&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../configuration/entry-context#entry&quot;&gt;&lt;code&gt;entry&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Callback Parameters: &lt;a href=&quot;../configuration/entry-context#context&quot;&gt; &lt;code&gt;context&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;../configuration/entry-context#entry&quot;&gt; &lt;code&gt;entry&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="476d6534574c739a869d01467a84714d4579d20c" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;ResolveData&lt;/code&gt;</source>
          <target state="translated">콜백 매개 변수 : &lt;code&gt;ResolveData&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="813f2d7c284ea643b365c0ff5296c2eb331ff242" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;assets&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;assets&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b7b9935b647bde14cf659458aff3417329ad3a25" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;childCompiler&lt;/code&gt;&lt;code&gt;compilerName&lt;/code&gt;&lt;code&gt;compilerIndex&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;childCompiler&lt;/code&gt; &lt;code&gt;compilerName&lt;/code&gt; &lt;code&gt;compilerIndex&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0e2a9bfd3e72f56401a55995d529396bb9548452" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;chunk&lt;/code&gt;&lt;code&gt;chunkHash&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;chunk&lt;/code&gt; &lt;code&gt;chunkHash&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0f4d8128cb07df89fd52ed0b4746493e5f0db847" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;chunk&lt;/code&gt;&lt;code&gt;filename&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;chunk&lt;/code&gt; &lt;code&gt;filename&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cdae54e2295d34a0d7b74bf7fe7db7451daf6f0d" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;chunks&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;chunks&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d14428e535dd0924fe421a657f85f65c274c0b2f" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;chunks&lt;/code&gt;&lt;code&gt;modules&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;chunks&lt;/code&gt; &lt;code&gt;modules&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8424fdf5d2c98f370f5036aac74632d9b8a1d530" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;chunks&lt;/code&gt;&lt;code&gt;records&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;chunks&lt;/code&gt; &lt;code&gt;records&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5408895ee137c8f4c93143d05e593e4f45662f0f" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;compilation&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;compilation&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="86d50a44b8d50fd982f2f809fb1b0e9d38e4cbe7" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;compilation&lt;/code&gt;, &lt;code&gt;compilationParams&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;compilation&lt;/code&gt; , &lt;code&gt;compilationParams&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a74cde899cb5a45f4ef541b84f26b7e63b89756b" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;compilation&lt;/code&gt;&lt;code&gt;records&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;compilation&lt;/code&gt; &lt;code&gt;records&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f532831398fc0e889f29d65d4073cccb5727dfab" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;compilationParams&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;compilationParams&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="20934b19da213b5bd8b70c74be000d67ffc59c36" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;compiler&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;compiler&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d5b384bcbea36edae6ecf8dd89b1c67048e1d70" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;contextModuleFactory&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;contextModuleFactory&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e410558c7fec1e9fb2ed7c2b1741385cdc1453e7" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;createData&lt;/code&gt;&lt;code&gt;resolveData&lt;/code&gt;</source>
          <target state="translated">콜백 매개 변수 : &lt;code&gt;createData&lt;/code&gt; &lt;code&gt;resolveData&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="df5b7e58152fb2477bf7652da2b6d785507f0ad6" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;data&lt;/code&gt;</source>
          <target state="translated">콜백 매개 변수 : &lt;code&gt;data&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="179504276d774f2c65339f276dcc6eacbdf56fad" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;declaration&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;declaration&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="50e8694736b145b16c63f4563d5cd7cbf1d24b93" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;error&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;error&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bc9234fec60771a9e3b0caa3f1d7083ca54ff5cb" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;expression, properties&lt;/code&gt;</source>
          <target state="translated">콜백 매개 변수 : &lt;code&gt;expression, properties&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0605a668035338cbd4f67da2d8769ef36c014761" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;expression&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;expression&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d8f53425583418f2d813a5761a7ce02b83cc1a39" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;expression&lt;/code&gt;&lt;code&gt;param&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;expression&lt;/code&gt; &lt;code&gt;param&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f09de36b53ffaff16c69ea5373b9b215af7004c" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;file&lt;/code&gt; , &lt;code&gt;info&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="811e683545d3900ef4cd3021b17a50a623c3e774" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;fileName&lt;/code&gt;, &lt;code&gt;changeTime&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;fileName&lt;/code&gt; , &lt;code&gt;changeTime&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1bf4665a071fac032e5dde2a8639145634c5cf91" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;fileNames&lt;/code&gt;</source>
          <target state="translated">콜백 매개 변수 : &lt;code&gt;fileNames&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="45804f9dc4b5f4d9ac0731182472e7da68f59b09" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;generator&lt;/code&gt;&lt;code&gt;generatorOptions&lt;/code&gt;</source>
          <target state="translated">콜백 매개 변수 : &lt;code&gt;generator&lt;/code&gt; &lt;code&gt;generatorOptions&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="47884b6445c2c06d14baf14477c8ae133230f9b9" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;generatorOptions&lt;/code&gt;</source>
          <target state="translated">콜백 매개 변수 : &lt;code&gt;generatorOptions&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="85c5871e21d02dde6e1b75722de0993317924df2" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;module&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;module&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="267c33d7bda454b82c9081cf046297a0fc94b09d" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;module&lt;/code&gt;&lt;code&gt;createData&lt;/code&gt;&lt;code&gt;resolveData&lt;/code&gt;</source>
          <target state="translated">콜백 매개 변수 : &lt;code&gt;module&lt;/code&gt; &lt;code&gt;createData&lt;/code&gt; &lt;code&gt;resolveData&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ea4dff089201463919919cea810966488540a173" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;module&lt;/code&gt;&lt;code&gt;error&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;module&lt;/code&gt; &lt;code&gt;error&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a55b66e487e9d392a6eeeaac0e92c26bebcac005" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;module&lt;/code&gt;&lt;code&gt;filename&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;module&lt;/code&gt; &lt;code&gt;filename&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="51e1a91fe68969e80bbbc8b4494d57e48a8e1e7d" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;modules&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;modules&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0e4507bbdae58df40a54fbb8db60856315766e39" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;modules&lt;/code&gt;&lt;code&gt;records&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;modules&lt;/code&gt; &lt;code&gt;records&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9211ac5afe1abab5ba1c860b4a368884f29b9b24" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;args&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;name&lt;/code&gt; , &lt;code&gt;type&lt;/code&gt; , &lt;code&gt;args&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f1d4cecf602985013666ecb1cbbc5978c7b135bf" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;normalModuleFactory&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;normalModuleFactory&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="07357cbb156d01b3e450933019a64f1e07fd7a5c" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;origin&lt;/code&gt;, &lt;code&gt;logEntry&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;origin&lt;/code&gt; , &lt;code&gt;logEntry&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d94652397d8384fb75bec9c7b75c500ce90b56df" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;parser&lt;/code&gt;&lt;code&gt;parserOptions&lt;/code&gt;</source>
          <target state="translated">콜백 매개 변수 : &lt;code&gt;parser&lt;/code&gt; &lt;code&gt;parserOptions&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fbce8e7c3f84916ed52b5da8d514ae691ccd6262" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;parserOptions&lt;/code&gt;</source>
          <target state="translated">콜백 매개 변수 : &lt;code&gt;parserOptions&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="73f3b431e744e4c159085a2098fd1bb4209ae0df" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;path&lt;/code&gt;&lt;code&gt;options&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;path&lt;/code&gt; &lt;code&gt;options&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="22bc6f92953dabee1a648ca0eae2197fbb7f90d3" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;records&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;records&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7d940acf6bc9811d3783c464e579883514cf051d" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;request&lt;/code&gt;&lt;code&gt;options&lt;/code&gt;</source>
          <target state="translated">콜백 매개 변수 : &lt;code&gt;request&lt;/code&gt; &lt;code&gt;options&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c9434c6815b3f236625f2e200456a24404dabf56" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;resolveData&lt;/code&gt;</source>
          <target state="translated">콜백 매개 변수 : &lt;code&gt;resolveData&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="534d04c893b856939dc5039f80df49ee87ad98d5" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;statement&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;statement&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5ca18640a980ecf7c26a876d8092095a3941e09e" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;statement&lt;/code&gt;&lt;code&gt;declaration&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;statement&lt;/code&gt; &lt;code&gt;declaration&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="450c4b267b801ceb68d6aca496384b3b94f4184e" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;statement&lt;/code&gt;&lt;code&gt;identifierName&lt;/code&gt;&lt;code&gt;exportName&lt;/code&gt;&lt;code&gt;index&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;statement&lt;/code&gt; &lt;code&gt;identifierName&lt;/code&gt; &lt;code&gt;exportName&lt;/code&gt; &lt;code&gt;index&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f17bb3103f1da43c0ec00a5cf848f9f4d9246b35" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;statement&lt;/code&gt;&lt;code&gt;source&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;statement&lt;/code&gt; &lt;code&gt;source&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f7ffec12fce83e2d5ca8870257692f56e00efa1d" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;statement&lt;/code&gt;&lt;code&gt;source&lt;/code&gt;&lt;code&gt;exportName&lt;/code&gt;&lt;code&gt;identifierName&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;statement&lt;/code&gt; &lt;code&gt;source&lt;/code&gt; &lt;code&gt;exportName&lt;/code&gt; &lt;code&gt;identifierName&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="193bd873a6c5f703881cd9f04aa048f532035ea1" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;statement&lt;/code&gt;&lt;code&gt;source&lt;/code&gt;&lt;code&gt;identifierName&lt;/code&gt;&lt;code&gt;exportName&lt;/code&gt;&lt;code&gt;index&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;statement&lt;/code&gt; &lt;code&gt;source&lt;/code&gt; &lt;code&gt;identifierName&lt;/code&gt; &lt;code&gt;exportName&lt;/code&gt; &lt;code&gt;index&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="73bbc5833b2de8cef76423a0c63667d652f001ed" translate="yes" xml:space="preserve">
          <source>Callback Parameters: &lt;code&gt;stats&lt;/code&gt;</source>
          <target state="translated">Callback Parameters: &lt;code&gt;stats&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fc39f201823918a441d5979fe9a5abb84926bf37" translate="yes" xml:space="preserve">
          <source>Callback parameters: &lt;code&gt;expression&lt;/code&gt;</source>
          <target state="translated">Callback parameters: &lt;code&gt;expression&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a263460d3844ba39d3f481a40301edd65ac0f2b7" translate="yes" xml:space="preserve">
          <source>Called after a &lt;a href=&quot;normalmodulefactory-hooks&quot;&gt;NormalModuleFactory&lt;/a&gt; is created.</source>
          <target state="translated">&lt;a href=&quot;normalmodulefactory-hooks&quot;&gt;NormalModuleFactory&lt;/a&gt; 가 생성 된 후 호출 됩니다.</target>
        </trans-unit>
        <trans-unit id="5069ed5621c952a8f0b25bd67665b0da68ff1b00" translate="yes" xml:space="preserve">
          <source>Called after a &lt;code&gt;Generator&lt;/code&gt; instance is created.</source>
          <target state="translated">&lt;code&gt;Generator&lt;/code&gt; 인스턴스가 생성 된 후 호출 됩니다.</target>
        </trans-unit>
        <trans-unit id="264430b00596354e369928afd4a5691f7b6d5eb7" translate="yes" xml:space="preserve">
          <source>Called after a &lt;code&gt;NormalModule&lt;/code&gt; instance is created.</source>
          <target state="translated">&lt;code&gt;NormalModule&lt;/code&gt; 인스턴스가 생성 된 후 호출 됩니다.</target>
        </trans-unit>
        <trans-unit id="0009492d52ece2853bff6b5887a9773a02bbc263" translate="yes" xml:space="preserve">
          <source>Called after a &lt;code&gt;NormalModuleFactory&lt;/code&gt; is created.</source>
          <target state="translated">Called after a &lt;code&gt;NormalModuleFactory&lt;/code&gt; is created.</target>
        </trans-unit>
        <trans-unit id="ab0f71cc1d077ec48a355dc79ca12123c40dee78" translate="yes" xml:space="preserve">
          <source>Called after directory contents are read. On recursive mode, calls for each sub-directory as well. Callback parameter is an array of all file and folder names in each directory.</source>
          <target state="translated">디렉토리 내용을 읽은 후 호출됩니다. 재귀 모드에서는 각 하위 디렉토리도 호출합니다. 콜백 매개 변수는 각 디렉토리에있는 모든 파일 및 폴더 이름의 배열입니다.</target>
        </trans-unit>
        <trans-unit id="f651cc7a9f9766b8159aa7cb26e793e670783857" translate="yes" xml:space="preserve">
          <source>Called after emitting assets to output directory.</source>
          <target state="translated">Called after emitting assets to output directory.</target>
        </trans-unit>
        <trans-unit id="b956bd75ac7f8df1dc70fc9b10aaa2a305e4559f" translate="yes" xml:space="preserve">
          <source>Called after finishing and sealing the compilation.</source>
          <target state="translated">Called after finishing and sealing the compilation.</target>
        </trans-unit>
        <trans-unit id="d63c6277ed8b176e48231b255eb48ef51a5f8e92" translate="yes" xml:space="preserve">
          <source>Called after modules optimization has completed.</source>
          <target state="translated">Called after modules optimization has completed.</target>
        </trans-unit>
        <trans-unit id="d3f09d3d52d005ff771e2d03e8f0a75712bca245" translate="yes" xml:space="preserve">
          <source>Called after setting up initial set of internal plugins.</source>
          <target state="translated">Called after setting up initial set of internal plugins.</target>
        </trans-unit>
        <trans-unit id="f88e1d5b43c2b806f81741011d5c66a4172c3e87" translate="yes" xml:space="preserve">
          <source>Called after the &lt;a href=&quot;#processassets&quot;&gt;&lt;code&gt;processAssets&lt;/code&gt;&lt;/a&gt; hook had finished without error.</source>
          <target state="translated">Called after the &lt;a href=&quot;#processassets&quot;&gt; &lt;code&gt;processAssets&lt;/code&gt; &lt;/a&gt; hook had finished without error.</target>
        </trans-unit>
        <trans-unit id="35c5319fba1807a14aae2c9e0b017b02e9bb9b9b" translate="yes" xml:space="preserve">
          <source>Called after the &lt;a href=&quot;../configuration/entry-context#entry&quot;&gt;&lt;code&gt;entry&lt;/code&gt; configuration&lt;/a&gt; from webpack options has been processed.</source>
          <target state="translated">Called after the &lt;a href=&quot;../configuration/entry-context#entry&quot;&gt; &lt;code&gt;entry&lt;/code&gt; configuration&lt;/a&gt; from webpack options has been processed.</target>
        </trans-unit>
        <trans-unit id="35ccc37331bc594b6f13dd9944dce7fdda6bd221" translate="yes" xml:space="preserve">
          <source>Called after the chunkmodules optimization has completed successfully.</source>
          <target state="translated">Called after the chunkmodules optimization has completed successfully.</target>
        </trans-unit>
        <trans-unit id="3ac58f98582d08a93b0d51b27555e524be667e8b" translate="yes" xml:space="preserve">
          <source>Called after the compilation is hashed.</source>
          <target state="translated">Called after the compilation is hashed.</target>
        </trans-unit>
        <trans-unit id="a8393e95473cf5b32665c795a51b3314d4e56fc1" translate="yes" xml:space="preserve">
          <source>Called after the dependency tree optimization has completed with success.</source>
          <target state="translated">Called after the dependency tree optimization has completed with success.</target>
        </trans-unit>
        <trans-unit id="196edbb522ae1a682c52635bc41f4c8778191805" translate="yes" xml:space="preserve">
          <source>Called after the request is resolved.</source>
          <target state="translated">요청이 해결 된 후 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="32642d84a25e9c6a8acdbaee14f2d2211b4024a7" translate="yes" xml:space="preserve">
          <source>Called after the requested directory resolved.</source>
          <target state="translated">요청 된 디렉토리가 해결 된 후 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="be757162e4b3367f33432786f22a45e333096f16" translate="yes" xml:space="preserve">
          <source>Called after the tree optimization, at the beginning of the chunk modules optimization. A plugin can tap into this hook to perform optimizations of chunk modules.</source>
          <target state="translated">Called after the tree optimization, at the beginning of the chunk modules optimization. A plugin can tap into this hook to perform optimizations of chunk modules.</target>
        </trans-unit>
        <trans-unit id="ccf2a0acf8694a56cba9a6fe3ad900ead031abcf" translate="yes" xml:space="preserve">
          <source>Called at the beginning of the chunk optimization phase. A plugin can tap into this hook to perform optimizations on chunks.</source>
          <target state="translated">Called at the beginning of the chunk optimization phase. A plugin can tap into this hook to perform optimizations on chunks.</target>
        </trans-unit>
        <trans-unit id="3324e74f65893970b1f62556774bea5f361845f8" translate="yes" xml:space="preserve">
          <source>Called at the beginning of the chunks &lt;code&gt;id&lt;/code&gt; optimization phase.</source>
          <target state="translated">Called at the beginning of the chunks &lt;code&gt;id&lt;/code&gt; optimization phase.</target>
        </trans-unit>
        <trans-unit id="88c20923164ed5938eca16aeb4af6063ee81637c" translate="yes" xml:space="preserve">
          <source>Called at the beginning of the module optimization phase. A plugin can tap into this hook to perform optimizations on modules.</source>
          <target state="translated">Called at the beginning of the module optimization phase. A plugin can tap into this hook to perform optimizations on modules.</target>
        </trans-unit>
        <trans-unit id="fb761862205d2561cae75a97f04ec900c9362f5d" translate="yes" xml:space="preserve">
          <source>Called at the beginning of the modules &lt;code&gt;id&lt;/code&gt; optimization.</source>
          <target state="translated">Called at the beginning of the modules &lt;code&gt;id&lt;/code&gt; optimization.</target>
        </trans-unit>
        <trans-unit id="2515ad692817be343bc175daf608ad5a8e428447" translate="yes" xml:space="preserve">
          <source>Called before a &lt;code&gt;Generator&lt;/code&gt; instance is created. &lt;code&gt;generatorOptions&lt;/code&gt; is options in &lt;a href=&quot;../configuration/module#modulegenerator&quot;&gt;module.parser&lt;/a&gt; for the corresponding identifier or an empty object.</source>
          <target state="translated">&lt;code&gt;Generator&lt;/code&gt; 인스턴스가 생성 되기 전에 호출 됩니다. &lt;code&gt;generatorOptions&lt;/code&gt; 는 해당 식별자 또는 빈 객체에 대한 &lt;a href=&quot;../configuration/module#modulegenerator&quot;&gt;module.parser의&lt;/a&gt; 옵션입니다 .</target>
        </trans-unit>
        <trans-unit id="2048d9017172d3f79d6c3d4e8822e3414361b2bc" translate="yes" xml:space="preserve">
          <source>Called before a &lt;code&gt;NormalModule&lt;/code&gt; instance is created.</source>
          <target state="translated">&lt;code&gt;NormalModule&lt;/code&gt; 인스턴스가 생성 되기 전에 호출 됩니다.</target>
        </trans-unit>
        <trans-unit id="f17ac39e78f7331c2257ad9f597bcfef656b83e6" translate="yes" xml:space="preserve">
          <source>Called before a &lt;code&gt;Parser&lt;/code&gt; instance is created. &lt;code&gt;parserOptions&lt;/code&gt; is options in &lt;a href=&quot;../configuration/module#moduleparser&quot;&gt;module.parser&lt;/a&gt; for the corresponding identifier or an empty object.</source>
          <target state="translated">&lt;code&gt;Parser&lt;/code&gt; 인스턴스가 생성 되기 전에 호출 됩니다. &lt;code&gt;parserOptions&lt;/code&gt; 는 해당 식별자 또는 빈 개체에 대한 &lt;a href=&quot;../configuration/module#moduleparser&quot;&gt;module.parser의&lt;/a&gt; 옵션입니다 .</target>
        </trans-unit>
        <trans-unit id="d03a98146494e98fca44e37048d46ce27be35a8c" translate="yes" xml:space="preserve">
          <source>Called before a request with scheme (URI) is resolved.</source>
          <target state="translated">스키마 (URI)가있는 요청이 해결되기 전에 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="12d27d1bd6d56d235d2dade54c338621dd401e7d" translate="yes" xml:space="preserve">
          <source>Called before emitting assets. Should return a boolean telling whether to emit.</source>
          <target state="translated">Called before emitting assets. Should return a boolean telling whether to emit.</target>
        </trans-unit>
        <trans-unit id="72ae7163985c0ee80858b94ba81fda0937263de9" translate="yes" xml:space="preserve">
          <source>Called before initiating resolve. It should return &lt;code&gt;undefined&lt;/code&gt; to proceed.</source>
          <target state="translated">해결을 시작하기 전에 호출됩니다. 계속하려면 &lt;code&gt;undefined&lt;/code&gt; 를 반환해야 합니다.</target>
        </trans-unit>
        <trans-unit id="211af547df1e89f085738ee3ba51425e0c3bad09" translate="yes" xml:space="preserve">
          <source>Called before optimizing the dependency tree. A plugin can tap into this hook to perform a dependency tree optimization.</source>
          <target state="translated">Called before optimizing the dependency tree. A plugin can tap into this hook to perform a dependency tree optimization.</target>
        </trans-unit>
        <trans-unit id="61fea32e4057da084a8109b2af80fa990f90d10d" translate="yes" xml:space="preserve">
          <source>Called before resolving the requested directory. The request can be ignored by returning &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">요청 된 디렉터리를 확인하기 전에 호출됩니다. &lt;code&gt;false&lt;/code&gt; 를 반환하여 요청을 무시할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6950bfd2a4057257f67553d14d076cbf92b60dc7" translate="yes" xml:space="preserve">
          <source>Called before the compilation is hashed.</source>
          <target state="translated">Called before the compilation is hashed.</target>
        </trans-unit>
        <trans-unit id="8693b32366d45f8fcc3e14cf0719b6c451e221f9" translate="yes" xml:space="preserve">
          <source>Called before the request is resolved. A dependency can be ignored by returning &lt;code&gt;false&lt;/code&gt;. Returning a Module instance would finalize the process. Otherwise, it should return &lt;code&gt;undefined&lt;/code&gt; to proceed.</source>
          <target state="translated">요청이 해결되기 전에 호출됩니다. &lt;code&gt;false&lt;/code&gt; 를 반환하여 종속성을 무시할 수 있습니다 . Module 인스턴스를 반환하면 프로세스가 완료됩니다. 그렇지 않으면 계속하려면 &lt;code&gt;undefined&lt;/code&gt; 를 반환해야 합니다.</target>
        </trans-unit>
        <trans-unit id="bbb5388d34018d8aa3633a1a1988e4423bf63a0c" translate="yes" xml:space="preserve">
          <source>Called for each file after the request is created but before filtering against regExp.</source>
          <target state="translated">요청이 생성 된 후 regExp에 대해 필터링하기 전에 각 파일에 대해 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="81ba31bbd5301b194413424c25fd8aeb4304974e" translate="yes" xml:space="preserve">
          <source>Called for every &lt;code&gt;export&lt;/code&gt; statement exporting a declaration.</source>
          <target state="translated">Called for every &lt;code&gt;export&lt;/code&gt; statement exporting a declaration.</target>
        </trans-unit>
        <trans-unit id="fbbd7dcc409da61d0d6c302e38fc9eb09c2e6a23" translate="yes" xml:space="preserve">
          <source>Called for every &lt;code&gt;export&lt;/code&gt; statement exporting an expression e.g.&lt;code&gt;export default expression;&lt;/code&gt;.</source>
          <target state="translated">Called for every &lt;code&gt;export&lt;/code&gt; statement exporting an expression e.g. &lt;code&gt;export default expression;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ab99dc32ebed4126767917b660b4281992060bd8" translate="yes" xml:space="preserve">
          <source>Called for every &lt;code&gt;export&lt;/code&gt; statement in a code fragment.</source>
          <target state="translated">Called for every &lt;code&gt;export&lt;/code&gt; statement in a code fragment.</target>
        </trans-unit>
        <trans-unit id="dc45eece0880302c405761c345de269671432e93" translate="yes" xml:space="preserve">
          <source>Called for every &lt;code&gt;export&lt;/code&gt;-import statement eg: &lt;code&gt;export * from 'otherModule';&lt;/code&gt;.</source>
          <target state="translated">Called for every &lt;code&gt;export&lt;/code&gt; -import statement eg: &lt;code&gt;export * from 'otherModule';&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="56b29d3eb17269c1e356b83437f3d6015b24b5f1" translate="yes" xml:space="preserve">
          <source>Called for every import statement in a code fragment. The &lt;code&gt;source&lt;/code&gt; parameter contains the name of the imported file.</source>
          <target state="translated">Called for every import statement in a code fragment. The &lt;code&gt;source&lt;/code&gt; parameter contains the name of the imported file.</target>
        </trans-unit>
        <trans-unit id="8d818e1f782451d495f9ae02e46dddd9ab4eec7c" translate="yes" xml:space="preserve">
          <source>Called for every specifier of every &lt;code&gt;export&lt;/code&gt; statement.</source>
          <target state="translated">Called for every specifier of every &lt;code&gt;export&lt;/code&gt; statement.</target>
        </trans-unit>
        <trans-unit id="2f9123fa5a913e4079a21e5a919ed12c95f9c07d" translate="yes" xml:space="preserve">
          <source>Called for every specifier of every &lt;code&gt;export&lt;/code&gt;-import statement.</source>
          <target state="translated">Called for every specifier of every &lt;code&gt;export&lt;/code&gt; -import statement.</target>
        </trans-unit>
        <trans-unit id="142797f001a5fa2acf91108ebb19b813977e24e2" translate="yes" xml:space="preserve">
          <source>Called for every specifier of every &lt;code&gt;import&lt;/code&gt; statement.</source>
          <target state="translated">Called for every specifier of every &lt;code&gt;import&lt;/code&gt; statement.</target>
        </trans-unit>
        <trans-unit id="c9b93187d1d1d300c8b62f60503867cddd8c023b" translate="yes" xml:space="preserve">
          <source>Called if the compilation fails.</source>
          <target state="translated">Called if the compilation fails.</target>
        </trans-unit>
        <trans-unit id="53d7a21d11d23df2fbdfabae4c66404a3e2581ef" translate="yes" xml:space="preserve">
          <source>Called right after &lt;code&gt;beforeCompile&lt;/code&gt;, before a new compilation is created.</source>
          <target state="translated">Called right after &lt;code&gt;beforeCompile&lt;/code&gt; , before a new compilation is created.</target>
        </trans-unit>
        <trans-unit id="52a842561b32021b48a7c86aedfe0dd506e9ca5f" translate="yes" xml:space="preserve">
          <source>Called right after the &lt;code&gt;environment&lt;/code&gt; hook, when the compiler environment setup is complete.</source>
          <target state="translated">Called right after the &lt;code&gt;environment&lt;/code&gt; hook, when the compiler environment setup is complete.</target>
        </trans-unit>
        <trans-unit id="8e45b7d71d6bc89c8ff338c7f063af17ed6184c2" translate="yes" xml:space="preserve">
          <source>Called to assign an &lt;code&gt;id&lt;/code&gt; to each chunk.</source>
          <target state="translated">Called to assign an &lt;code&gt;id&lt;/code&gt; to each chunk.</target>
        </trans-unit>
        <trans-unit id="988241089cff2056132e486708dff2acb1b84378" translate="yes" xml:space="preserve">
          <source>Called to assign an &lt;code&gt;id&lt;/code&gt; to each module.</source>
          <target state="translated">Called to assign an &lt;code&gt;id&lt;/code&gt; to each module.</target>
        </trans-unit>
        <trans-unit id="ef5c77254664695e5c3220235b9e417d352f3557" translate="yes" xml:space="preserve">
          <source>Called to determine if an asset needs to be processed further after being emitted.</source>
          <target state="translated">Called to determine if an asset needs to be processed further after being emitted.</target>
        </trans-unit>
        <trans-unit id="1cee9fcf1c6ecfdf221b74b66731f0b37bf85414" translate="yes" xml:space="preserve">
          <source>Called to determine if the compilation needs to be unsealed to include other files.</source>
          <target state="translated">Called to determine if the compilation needs to be unsealed to include other files.</target>
        </trans-unit>
        <trans-unit id="593294c50d471771c68894470fd20667ad427783" translate="yes" xml:space="preserve">
          <source>Called to determine the path of an asset.</source>
          <target state="translated">Called to determine the path of an asset.</target>
        </trans-unit>
        <trans-unit id="170e63c4be63e4d3e202a3e0c7126cc6fa2f767d" translate="yes" xml:space="preserve">
          <source>Called to determine whether or not generate chunks assets. Returning anything &lt;code&gt;!== false&lt;/code&gt; will allow chunk assets generation.</source>
          <target state="translated">Called to determine whether or not generate chunks assets. Returning anything &lt;code&gt;!== false&lt;/code&gt; will allow chunk assets generation.</target>
        </trans-unit>
        <trans-unit id="f83bbcaee58b3a2842ba274baf96d23908b89c2b" translate="yes" xml:space="preserve">
          <source>Called to determine whether or not to store records. Returning anything &lt;code&gt;!== false&lt;/code&gt; will prevent every other &quot;record&quot; hook from being executed (&lt;a href=&quot;#record&quot;&gt;&lt;code&gt;record&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#recordmodules&quot;&gt;&lt;code&gt;recordModules&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#recordchunks&quot;&gt;&lt;code&gt;recordChunks&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#recordhash&quot;&gt;&lt;code&gt;recordHash&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Called to determine whether or not to store records. Returning anything &lt;code&gt;!== false&lt;/code&gt; will prevent every other &quot;record&quot; hook from being executed (&lt;a href=&quot;#record&quot;&gt; &lt;code&gt;record&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#recordmodules&quot;&gt; &lt;code&gt;recordModules&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#recordchunks&quot;&gt; &lt;code&gt;recordChunks&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;#recordhash&quot;&gt; &lt;code&gt;recordHash&lt;/code&gt; &lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="05ee0d6341ff6c4c529abf688e395a4bafabedf1" translate="yes" xml:space="preserve">
          <source>Called when a compiler object is initialized.</source>
          <target state="translated">Called when a compiler object is initialized.</target>
        </trans-unit>
        <trans-unit id="9726fedbbcc5aba9d8f6dff954c3fd01a86df092" translate="yes" xml:space="preserve">
          <source>Called when a new dependency request is encountered. A dependency can be ignored by returning &lt;code&gt;false&lt;/code&gt;. Otherwise, it should return &lt;code&gt;undefined&lt;/code&gt; to proceed.</source>
          <target state="translated">새 종속성 요청이 발생하면 호출됩니다. &lt;code&gt;false&lt;/code&gt; 를 반환하여 종속성을 무시할 수 있습니다 . 그렇지 않으면 계속하려면 &lt;code&gt;undefined&lt;/code&gt; 를 반환해야 합니다.</target>
        </trans-unit>
        <trans-unit id="6a0482013db4a03e82ce70862c5eaec09a144c32" translate="yes" xml:space="preserve">
          <source>Called when a watching compilation has stopped.</source>
          <target state="translated">Called when a watching compilation has stopped.</target>
        </trans-unit>
        <trans-unit id="7cb0050fac826f04bad70e087f4319ad3a92b034" translate="yes" xml:space="preserve">
          <source>Called when all modules have been built without errors.</source>
          <target state="translated">Called when all modules have been built without errors.</target>
        </trans-unit>
        <trans-unit id="03303413657e858dd8fa3354c8d0097804f3bca0" translate="yes" xml:space="preserve">
          <source>Called when an asset from a module was added to the compilation.</source>
          <target state="translated">Called when an asset from a module was added to the compilation.</target>
        </trans-unit>
        <trans-unit id="f27e62ad5f1e964df90d533e8b1475cf0f2c02ef" translate="yes" xml:space="preserve">
          <source>Called when evaluating a call to a member function of a successfully evaluated expression.</source>
          <target state="translated">Called when evaluating a call to a member function of a successfully evaluated expression.</target>
        </trans-unit>
        <trans-unit id="cfeffd8860a782024cb5fa5980d447bc0da45cde" translate="yes" xml:space="preserve">
          <source>Called when evaluating an expression.</source>
          <target state="translated">Called when evaluating an expression.</target>
        </trans-unit>
        <trans-unit id="57c90580f927fcf3e1224c62dbbb66711770d718" translate="yes" xml:space="preserve">
          <source>Called when evaluating an identifier that is a defined variable.</source>
          <target state="translated">Called when evaluating an identifier that is a defined variable.</target>
        </trans-unit>
        <trans-unit id="885036b7c49dbf1dee886b1efb9a7390a2a8fd6a" translate="yes" xml:space="preserve">
          <source>Called when evaluating an identifier that is a free variable.</source>
          <target state="translated">Called when evaluating an identifier that is a free variable.</target>
        </trans-unit>
        <trans-unit id="0b81e0e2b032f6a63224312e28b22d9c6bf26a1b" translate="yes" xml:space="preserve">
          <source>Called when parsing a &lt;code&gt;ConditionalExpression&lt;/code&gt; e.g. &lt;code&gt;condition ? a : b&lt;/code&gt;</source>
          <target state="translated">Called when parsing a &lt;code&gt;ConditionalExpression&lt;/code&gt; e.g. &lt;code&gt;condition ? a : b&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b979e71b5874edca77c22195f562060c63f99a7" translate="yes" xml:space="preserve">
          <source>Called when parsing a function call.</source>
          <target state="translated">Called when parsing a function call.</target>
        </trans-unit>
        <trans-unit id="a31c8fd0b96f86259f551a4b8e75cdf18c5dc28c" translate="yes" xml:space="preserve">
          <source>Called when parsing a variable declaration defined using &lt;code&gt;const&lt;/code&gt;</source>
          <target state="translated">Called when parsing a variable declaration defined using &lt;code&gt;const&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="baa0384f2becc171b996b33882f52d87ecc3f2f9" translate="yes" xml:space="preserve">
          <source>Called when parsing a variable declaration defined using &lt;code&gt;let&lt;/code&gt;</source>
          <target state="translated">Called when parsing a variable declaration defined using &lt;code&gt;let&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3be6ac5bba972a1ee6119e855b4954842a4ce8ee" translate="yes" xml:space="preserve">
          <source>Called when parsing a variable declaration defined using &lt;code&gt;var&lt;/code&gt;</source>
          <target state="translated">Called when parsing a variable declaration defined using &lt;code&gt;var&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4b8fcd7adac98a6efbc35e92e8a0a31462ae6b97" translate="yes" xml:space="preserve">
          <source>Called when parsing a variable declaration.</source>
          <target state="translated">Called when parsing a variable declaration.</target>
        </trans-unit>
        <trans-unit id="1f494540055f8e1d7dd8d8cc4d931e99e3c069a8" translate="yes" xml:space="preserve">
          <source>Called when parsing an &lt;code&gt;AssignmentExpression&lt;/code&gt; before parsing the assign expression.</source>
          <target state="translated">Called when parsing an &lt;code&gt;AssignmentExpression&lt;/code&gt; before parsing the assign expression.</target>
        </trans-unit>
        <trans-unit id="bea731b43b597677f58436ebce1511c87b298e05" translate="yes" xml:space="preserve">
          <source>Called when parsing an &lt;code&gt;AssignmentExpression&lt;/code&gt; before parsing the assigned expression.</source>
          <target state="translated">Called when parsing an &lt;code&gt;AssignmentExpression&lt;/code&gt; before parsing the assigned expression.</target>
        </trans-unit>
        <trans-unit id="da6fabaca41aafde93102e7bbe7f5040bbdd979a" translate="yes" xml:space="preserve">
          <source>Called when parsing an expression.</source>
          <target state="translated">Called when parsing an expression.</target>
        </trans-unit>
        <trans-unit id="8cd69ccb27e6e63dc76859a7a2b7e8d15a666728" translate="yes" xml:space="preserve">
          <source>Called when parsing an if statement. Same as the &lt;code&gt;statement&lt;/code&gt; hook, but triggered only when &lt;code&gt;statement.type == 'IfStatement'&lt;/code&gt;.</source>
          <target state="translated">Called when parsing an if statement. Same as the &lt;code&gt;statement&lt;/code&gt; hook, but triggered only when &lt;code&gt;statement.type == 'IfStatement'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="de3327e29cf410eb321ad15b2791df7faf5fafef" translate="yes" xml:space="preserve">
          <source>Called when parsing statements with a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label&quot;&gt;label&lt;/a&gt;. Those statements have &lt;code&gt;statement.type === 'LabeledStatement'&lt;/code&gt;.</source>
          <target state="translated">Called when parsing statements with a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label&quot;&gt;label&lt;/a&gt;. Those statements have &lt;code&gt;statement.type === 'LabeledStatement'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bf176c4948d465da38eb4e2d890255b991beebf2" translate="yes" xml:space="preserve">
          <source>Called when the modules &lt;code&gt;id&lt;/code&gt; optimization phase has completed.</source>
          <target state="translated">Called when the modules &lt;code&gt;id&lt;/code&gt; optimization phase has completed.</target>
        </trans-unit>
        <trans-unit id="e3dcff725244c1fe831556c3072aaa97d43bc5ad" translate="yes" xml:space="preserve">
          <source>Called while preparing the compiler environment, right after initializing the plugins in the configuration file.</source>
          <target state="translated">Called while preparing the compiler environment, right after initializing the plugins in the configuration file.</target>
        </trans-unit>
        <trans-unit id="b1aad9b83ea0403539a0fe9a4289e014c7bae8f5" translate="yes" xml:space="preserve">
          <source>Calling the &lt;code&gt;run&lt;/code&gt; method on the &lt;code&gt;Compiler&lt;/code&gt; instance is much like the quick run method mentioned above:</source>
          <target state="translated">&lt;code&gt;Compiler&lt;/code&gt; 인스턴스 에서 &lt;code&gt;run&lt;/code&gt; 메소드를 호출하는 것은 위에서 언급 한 빠른 실행 메소드와 매우 유사합니다.</target>
        </trans-unit>
        <trans-unit id="fda9b957857fa447901886baf747ed475fc718ab" translate="yes" xml:space="preserve">
          <source>Calling the &lt;code&gt;watch&lt;/code&gt; method triggers the webpack runner, but then watches for changes (much like CLI: &lt;code&gt;webpack --watch&lt;/code&gt;), as soon as webpack detects a change, runs again. Returns an instance of &lt;code&gt;Watching&lt;/code&gt;.</source>
          <target state="translated">Calling the &lt;code&gt;watch&lt;/code&gt; method triggers the webpack runner, but then watches for changes (much like CLI: &lt;code&gt;webpack --watch&lt;/code&gt; ), as soon as webpack detects a change, runs again. Returns an instance of &lt;code&gt;Watching&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="720f4544ad245a6d29f86053f631e9835f993974" translate="yes" xml:space="preserve">
          <source>Calling the &lt;code&gt;watch&lt;/code&gt; method, triggers the webpack runner, but then watches for changes (much like CLI: &lt;code&gt;webpack --watch&lt;/code&gt;), as soon as webpack detects a change, runs again. Returns an instance of &lt;code&gt;Watching&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;watch&lt;/code&gt; 메소드를 호출하면 웹팩 러너가 트리거되지만 웹팩이 변경 사항을 감지하면 즉시 변경 사항 (CLI : &lt;code&gt;webpack --watch&lt;/code&gt; 와 같은 )을 감시합니다. &lt;code&gt;Watching&lt;/code&gt; 인스턴스를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="1c3143e75e930eecfde1cce5bf0171f7fa076cf1" translate="yes" xml:space="preserve">
          <source>Calling this method will invalidate the current module, which disposes and recreates it when the HMR update is applied. This bubbles like a normal update of this module. &lt;code&gt;invalidate&lt;/code&gt; can't be self-accepted by this module.</source>
          <target state="translated">Calling this method will invalidate the current module, which disposes and recreates it when the HMR update is applied. This bubbles like a normal update of this module. &lt;code&gt;invalidate&lt;/code&gt; can't be self-accepted by this module.</target>
        </trans-unit>
        <trans-unit id="0346da988c1699290ca2e465cdfe45ddc3f4e812" translate="yes" xml:space="preserve">
          <source>CamelCase is recommended for local selectors. They are easier to use in the within the imported JS module.</source>
          <target state="translated">CamelCase는 지역 선택기에 권장됩니다. 가져온 JS 모듈 내에서 사용하기가 더 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="e22a431591dac9ba4b5bf544564723581263eb07" translate="yes" xml:space="preserve">
          <source>CamelCase is recommended for local selectors. They are easier to use within the imported JS module.</source>
          <target state="translated">CamelCase is recommended for local selectors. They are easier to use within the imported JS module.</target>
        </trans-unit>
        <trans-unit id="a8e6ac54e30f25dd6e341c0f1e6f4ed8ac9c2575" translate="yes" xml:space="preserve">
          <source>Can be &lt;code&gt;(buffer, cb) =&amp;gt; cb(buffer)&lt;/code&gt; or if a &lt;code&gt;{String}&lt;/code&gt; is used the algorithm is taken from &lt;code&gt;zlib&lt;/code&gt;</source>
          <target state="translated">있을 수 &lt;code&gt;(buffer, cb) =&amp;gt; cb(buffer)&lt;/code&gt; 또는 경우 &lt;code&gt;{String}&lt;/code&gt; 사용되는 알고리즘에서 촬영 &lt;code&gt;zlib&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="894fef602ca29f9b9a3d06a5cbd7b675e7766d40" translate="yes" xml:space="preserve">
          <source>Can be given an &lt;code&gt;object&lt;/code&gt; since webpack 3.1.0. Effective for &lt;code&gt;libraryTarget: 'umd'&lt;/code&gt;.</source>
          <target state="translated">Can be given an &lt;code&gt;object&lt;/code&gt; since webpack 3.1.0. Effective for &lt;code&gt;libraryTarget: 'umd'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b51809cb7612895efb9c07bed8993e76f52a519f" translate="yes" xml:space="preserve">
          <source>Can be used to check if there were errors while compiling. Returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">컴파일하는 동안 오류가 있는지 확인하는 데 사용할 수 있습니다. &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="8f185afe20d4fbe0cc542a08a649e064e17ef660" translate="yes" xml:space="preserve">
          <source>Can be used to check if there were warnings while compiling. Returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">컴파일하는 동안 경고가 있는지 확인하는 데 사용할 수 있습니다. &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="fe49fdd03c0564c8662ed53f379107ddaef42b67" translate="yes" xml:space="preserve">
          <source>Can return true/false at this point</source>
          <target state="translated">이 시점에서 참 / 거짓을 반환 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="82a12680e0cdf13727e1b476490bf40353b4cef4" translate="yes" xml:space="preserve">
          <source>Capture a &quot;profile&quot; of the application, including statistics and hints, which can then be dissected using the &lt;a href=&quot;https://webpack.github.io/analyse/&quot;&gt;Analyze&lt;/a&gt; tool.</source>
          <target state="translated">통계 및 힌트를 포함하여 응용 프로그램의 &quot;프로필&quot;을 캡처 한 다음 &lt;a href=&quot;https://webpack.github.io/analyse/&quot;&gt;분석&lt;/a&gt; 도구를 사용하여 해부 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1472e5523251e09230e5eb0aff0f5eda524db819" translate="yes" xml:space="preserve">
          <source>Capture a &quot;profile&quot; of the application, including statistics and hints, which can then be dissected using the &lt;a href=&quot;https://webpack.github.io/analyse/&quot;&gt;Analyze&lt;/a&gt; tool. It will also log out a summary of module timings.</source>
          <target state="translated">통계 및 힌트를 포함하여 응용 프로그램의 &quot;프로필&quot;을 캡처 한 다음 &lt;a href=&quot;https://webpack.github.io/analyse/&quot;&gt;분석&lt;/a&gt; 도구를 사용하여 분석 할 수 있습니다 . 또한 모듈 타이밍 요약도 로그 아웃됩니다.</target>
        </trans-unit>
        <trans-unit id="d88c106f00406fefae460931f1d3b8ef590361d1" translate="yes" xml:space="preserve">
          <source>Categories of internal plugins:</source>
          <target state="translated">내부 플러그인 카테고리 :</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="158c1c9f05b3672bd60affa9411ba43e070b9474" translate="yes" xml:space="preserve">
          <source>Certain popular modules written for AMD, most notably jQuery versions 1.7.0 to 1.9.1, will only register as an AMD module if the loader indicates it has taken &lt;a href=&quot;https://github.com/amdjs/amdjs-api/wiki/jQuery-and-AMD&quot;&gt;special allowances&lt;/a&gt; for multiple versions being included on a page.</source>
          <target state="translated">AMD 용으로 작성된 특정 인기 모듈, 특히 jQuery 버전 1.7.0 ~ 1.9.1은 로더 가 페이지에 포함 된 여러 버전에 대해 &lt;a href=&quot;https://github.com/amdjs/amdjs-api/wiki/jQuery-and-AMD&quot;&gt;특별한 허용&lt;/a&gt; 을 받았다고 표시 한 경우에만 AMD 모듈로 등록 합니다.</target>
        </trans-unit>
        <trans-unit id="790ba14f6e0a1dd1d532e749b965c35d610d959c" translate="yes" xml:space="preserve">
          <source>Certain utilities, plugins and loader only make sense when building for production. For example, it usually doesn't make sense to minify and mangle your code with the &lt;code&gt;UglifyJsPlugin&lt;/code&gt; while in development. These tools should typically be excluded in development:</source>
          <target state="translated">특정 유틸리티, 플러그인 및 로더는 프로덕션 용으로 빌드 할 때만 의미가 있습니다. 예를 들어, 개발 중에 &lt;code&gt;UglifyJsPlugin&lt;/code&gt; 을 사용 하여 코드를 축소 하고 조작 하는 것은 일반적으로 의미가 없습니다 . 이러한 도구는 일반적으로 개발시 제외해야합니다.</target>
        </trans-unit>
        <trans-unit id="4eb071453337ff498744a30ba9487e6a55c88787" translate="yes" xml:space="preserve">
          <source>Certain utilities, plugins, and loaders only make sense when building for production. For example, it usually doesn't make sense to minify and mangle your code with the &lt;code&gt;TerserPlugin&lt;/code&gt; while in development. These tools should typically be excluded in development:</source>
          <target state="translated">Certain utilities, plugins, and loaders only make sense when building for production. For example, it usually doesn't make sense to minify and mangle your code with the &lt;code&gt;TerserPlugin&lt;/code&gt; while in development. These tools should typically be excluded in development:</target>
        </trans-unit>
        <trans-unit id="bc231d29d89d06dd02d1368c222f367429ec2a7d" translate="yes" xml:space="preserve">
          <source>Chain the &lt;code&gt;less-loader&lt;/code&gt; with the &lt;a href=&quot;css-loader&quot;&gt;&lt;code&gt;css-loader&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;style-loader&quot;&gt;&lt;code&gt;style-loader&lt;/code&gt;&lt;/a&gt; to immediately apply all styles to the DOM.</source>
          <target state="translated">체인 &lt;code&gt;less-loader&lt;/code&gt; 와 &lt;a href=&quot;css-loader&quot;&gt; &lt;code&gt;css-loader&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;style-loader&quot;&gt; &lt;code&gt;style-loader&lt;/code&gt; &lt;/a&gt; 즉시 DOM에 모든 스타일을 적용합니다.</target>
        </trans-unit>
        <trans-unit id="f8cab6032f448c56769edb85a418c8614d397a28" translate="yes" xml:space="preserve">
          <source>Chain the &lt;code&gt;sass-loader&lt;/code&gt; with the &lt;a href=&quot;css-loader&quot;&gt;css-loader&lt;/a&gt; and the &lt;a href=&quot;style-loader&quot;&gt;style-loader&lt;/a&gt; to immediately apply all styles to the DOM or the &lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;mini-css-extract-plugin&lt;/a&gt; to extract it into a separate file.</source>
          <target state="translated">Chain the &lt;code&gt;sass-loader&lt;/code&gt; with the &lt;a href=&quot;css-loader&quot;&gt;css-loader&lt;/a&gt; and the &lt;a href=&quot;style-loader&quot;&gt;style-loader&lt;/a&gt; to immediately apply all styles to the DOM or the &lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;mini-css-extract-plugin&lt;/a&gt; to extract it into a separate file.</target>
        </trans-unit>
        <trans-unit id="2b12bb407c89a50922dcf0ba467db93cc598ceab" translate="yes" xml:space="preserve">
          <source>Chain the &lt;code&gt;stylus-loader&lt;/code&gt; with the &lt;a href=&quot;css-loader&quot;&gt;&lt;code&gt;css-loader&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;style-loader&quot;&gt;&lt;code&gt;style-loader&lt;/code&gt;&lt;/a&gt; to immediately apply all styles to the DOM.</source>
          <target state="translated">Chain the &lt;code&gt;stylus-loader&lt;/code&gt; with the &lt;a href=&quot;css-loader&quot;&gt; &lt;code&gt;css-loader&lt;/code&gt; &lt;/a&gt; and the &lt;a href=&quot;style-loader&quot;&gt; &lt;code&gt;style-loader&lt;/code&gt; &lt;/a&gt; to immediately apply all styles to the DOM.</target>
        </trans-unit>
        <trans-unit id="c080570b98397e709b2ef035891a6fff9fef112d" translate="yes" xml:space="preserve">
          <source>Chain the sass-loader with the &lt;a href=&quot;css-loader&quot;&gt;css-loader&lt;/a&gt; and the &lt;a href=&quot;style-loader&quot;&gt;style-loader&lt;/a&gt; to immediately apply all styles to the DOM.</source>
          <target state="translated">sass-loader를 &lt;a href=&quot;css-loader&quot;&gt;css-loader&lt;/a&gt; 및 &lt;a href=&quot;style-loader&quot;&gt;style-loader&lt;/a&gt; 와 연결하여 모든 스타일을 DOM에 즉시 적용하십시오.</target>
        </trans-unit>
        <trans-unit id="656efc09a68bf71e8943dc72f7475634665a3db5" translate="yes" xml:space="preserve">
          <source>Change &lt;code&gt;devServer.publicPath&lt;/code&gt; to put bundle under specific directory:</source>
          <target state="translated">Change &lt;code&gt;devServer.publicPath&lt;/code&gt; to put bundle under specific directory:</target>
        </trans-unit>
        <trans-unit id="ad318251bfaf1956eb4c023b6d03305e9bb2f5fd" translate="yes" xml:space="preserve">
          <source>Change base URI at runtime.</source>
          <target state="translated">런타임에 기본 URI를 변경합니다.</target>
        </trans-unit>
        <trans-unit id="c2fc7fe52ad254abdb779adb088ee24441733d50" translate="yes" xml:space="preserve">
          <source>Change the prefix for each line in the output bundles.</source>
          <target state="translated">출력 번들에서 각 행의 접 두부를 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="717f1efe04610f8a87ad763461d474f4822c4cdc" translate="yes" xml:space="preserve">
          <source>Change the style on &lt;code&gt;body&lt;/code&gt; to &lt;code&gt;background: red;&lt;/code&gt; and you should immediately see the page's background color change without a full refresh.</source>
          <target state="translated">&lt;code&gt;body&lt;/code&gt; 의 스타일 을 &lt;code&gt;background: red;&lt;/code&gt; 변경하십시오 : 빨간색; 완전히 새로 고치지 않으면 페이지의 배경색이 즉시 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="9d9ab8d44f7e6d414ead99be44e605be2e297d41" translate="yes" xml:space="preserve">
          <source>Change your config file to tell the dev server where to look for files:</source>
          <target state="translated">구성 파일을 변경하여 dev 서버에 파일을 찾을 위치를 알려주십시오.</target>
        </trans-unit>
        <trans-unit id="7c34637edf995870f353b20a44029fef6a84f98a" translate="yes" xml:space="preserve">
          <source>Change your configuration file to tell the dev server where to look for files:</source>
          <target state="translated">Change your configuration file to tell the dev server where to look for files:</target>
        </trans-unit>
        <trans-unit id="164b3d4809f98d0458414f1bf9cf3c9dcba16bb5" translate="yes" xml:space="preserve">
          <source>Changelog</source>
          <target state="translated">Changelog</target>
        </trans-unit>
        <trans-unit id="a36de5e6f5435df0307d72365fa3b066dcbad72d" translate="yes" xml:space="preserve">
          <source>Changes Seen But Not Processed</source>
          <target state="translated">확인되었지만 처리되지 않은 변경 사항</target>
        </trans-unit>
        <trans-unit id="5d36e6e53e59e192f7146b329e0d2a52283e686f" translate="yes" xml:space="preserve">
          <source>Changes to cached paths may cause failure in rare cases.</source>
          <target state="translated">캐시 된 경로를 변경하면 드물게 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c2f2f8ff8563fdc515c0120244dd2de010428c13" translate="yes" xml:space="preserve">
          <source>Check out the &lt;a href=&quot;../api/plugins&quot;&gt;plugin interface&lt;/a&gt; and how to use it to extend webpack's capabilities.</source>
          <target state="translated">Check out the &lt;a href=&quot;../api/plugins&quot;&gt;plugin interface&lt;/a&gt; and how to use it to extend webpack's capabilities.</target>
        </trans-unit>
        <trans-unit id="b29aaa06eef61420561a487ee74293a8d1d7047a" translate="yes" xml:space="preserve">
          <source>Check out the &lt;a href=&quot;../api/plugins&quot;&gt;plugin interface&lt;/a&gt; and how to use it to extend webpacks capabilities.</source>
          <target state="translated">&lt;a href=&quot;../api/plugins&quot;&gt;플러그인 인터페이스&lt;/a&gt; 와이를 사용하여 웹팩 기능을 확장하는 방법을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="b37b8f309a7e7d264be99db20f4017f3824c3c6e" translate="yes" xml:space="preserve">
          <source>Choose a style of &lt;a href=&quot;http://blog.teamtreehouse.com/introduction-source-maps&quot;&gt;source mapping&lt;/a&gt; to enhance the debugging process. These values can affect build and rebuild speed dramatically.</source>
          <target state="translated">디버깅 프로세스를 향상시키기 위해 &lt;a href=&quot;http://blog.teamtreehouse.com/introduction-source-maps&quot;&gt;소스 매핑&lt;/a&gt; 스타일을 선택하십시오 . 이 값은 빌드 및 재구성 속도에 큰 영향을 줄 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1466a275c114ce56a677f1c495dc5cffdb52e8d" translate="yes" xml:space="preserve">
          <source>Choosing a Development Tool</source>
          <target state="translated">개발 도구 선택</target>
        </trans-unit>
        <trans-unit id="40cd7fbd1aace6a9eff6acaffc58661c707ef949" translate="yes" xml:space="preserve">
          <source>Chunk Objects</source>
          <target state="translated">청크 객체</target>
        </trans-unit>
        <trans-unit id="73cb08bf9f129f7b574f2b9a370310cc8fe9005d" translate="yes" xml:space="preserve">
          <source>Chunk loading should load everything needed in parallel (web: single round-trip to server).</source>
          <target state="translated">Chunk loading should load everything needed in parallel (web: single round-trip to server).</target>
        </trans-unit>
        <trans-unit id="4a527377dfdcd1435bbaa177dc63f2a6bb39b269" translate="yes" xml:space="preserve">
          <source>Chunks</source>
          <target state="translated">Chunks</target>
        </trans-unit>
        <trans-unit id="8d9570b3c29f342d8ae5fb2089315e3d27e1c5a8" translate="yes" xml:space="preserve">
          <source>Chunks are loaded by &lt;code&gt;importScripts&lt;/code&gt;. Else it's similar to &lt;a href=&quot;#jsonptemplateplugin&quot;&gt;&lt;code&gt;JsonpTemplatePlugin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">청크는 &lt;code&gt;importScripts&lt;/code&gt; 에 의해로드됩니다 . 그렇지 않으면 &lt;a href=&quot;#jsonptemplateplugin&quot;&gt; &lt;code&gt;JsonpTemplatePlugin&lt;/code&gt; &lt;/a&gt; 과 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="c7a6d7bf0f6dd7635c76e9b56867633a3e69d460" translate="yes" xml:space="preserve">
          <source>Chunks are wrapped into JSONP-calls. A loading algorithm is included in entry chunks. It loads chunks by adding a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">청크는 JSONP 호출로 래핑됩니다. 로딩 알고리즘은 엔트리 청크에 포함됩니다. &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그 를 추가하여 청크를로드합니다 .</target>
        </trans-unit>
        <trans-unit id="ce75eb0afc682140a4ba3e1a1ca4b6bd11f2fd52" translate="yes" xml:space="preserve">
          <source>Chunks are wrapped into Node.js modules exporting the bundled modules. The entry chunks loads chunks by requiring them.</source>
          <target state="translated">청크는 번들 모듈을 내보내는 Node.js 모듈로 래핑됩니다. 엔트리 청크는 청크를 요구하여 청크를로드합니다.</target>
        </trans-unit>
        <trans-unit id="c35ae65eebcd98ea22c4c628b95656e06a262255" translate="yes" xml:space="preserve">
          <source>Chunks come in two forms:</source>
          <target state="translated">Chunks come in two forms:</target>
        </trans-unit>
        <trans-unit id="57de86ffe67ed84839b6d609d3e52b58f87b579d" translate="yes" xml:space="preserve">
          <source>Chunks from &lt;code&gt;bundle-loader&lt;/code&gt;, however will load using the &lt;code&gt;chunkFilename&lt;/code&gt; rule, so the example files will produce &lt;code&gt;my-chunk.1.js&lt;/code&gt; and &lt;code&gt;file-2.js&lt;/code&gt; respectively.</source>
          <target state="translated">그러나 &lt;code&gt;bundle-loader&lt;/code&gt; 의 청크 는 &lt;code&gt;chunkFilename&lt;/code&gt; 규칙을 사용하여로드 되므로 예제 파일은 각각 &lt;code&gt;my-chunk.1.js&lt;/code&gt; 및 &lt;code&gt;file-2.js&lt;/code&gt; 를 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="75606ec5eea8fa4fdc9f4d97f2b852dba3c67c49" translate="yes" xml:space="preserve">
          <source>Chunks that reduce the total size the most are merged first. If multiple combinations are equal the minimal merged size wins.</source>
          <target state="translated">총 크기를 가장 많이 줄인 청크가 먼저 병합됩니다. 여러 조합이 동일하면 최소 병합 크기가 이깁니다.</target>
        </trans-unit>
        <trans-unit id="25fa9188539cfc313f26fb9704119d1abb3ac869" translate="yes" xml:space="preserve">
          <source>Chunks with the same modules are merged.</source>
          <target state="translated">동일한 모듈을 가진 청크가 병합됩니다.</target>
        </trans-unit>
        <trans-unit id="45fe570d03417376030e4155a858900169867125" translate="yes" xml:space="preserve">
          <source>Clarifying tree shaking and &lt;code&gt;sideEffects&lt;/code&gt;</source>
          <target state="translated">Clarifying tree shaking and &lt;code&gt;sideEffects&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a593ffe03282c3aca35f71fff6b39e5640fac889" translate="yes" xml:space="preserve">
          <source>Class names will be camelized</source>
          <target state="translated">학급 이름은 낙타 화됩니다</target>
        </trans-unit>
        <trans-unit id="77bab8e09a1c618c6b7354984d0c34717b1d439d" translate="yes" xml:space="preserve">
          <source>Class names will be camelized, the original class name will be removed from the locals</source>
          <target state="translated">Class names will be camelized, the original class name will be removed from the locals</target>
        </trans-unit>
        <trans-unit id="b93c86c4dd240878466b5c9e1633eb7d4d88f134" translate="yes" xml:space="preserve">
          <source>Class names will be camelized, the original class name will not to be removed from the locals</source>
          <target state="translated">Class names will be camelized, the original class name will not to be removed from the locals</target>
        </trans-unit>
        <trans-unit id="010ffde98bd730567f019bb051c597b300969672" translate="yes" xml:space="preserve">
          <source>Class names will be exported as is.</source>
          <target state="translated">Class names will be exported as is.</target>
        </trans-unit>
        <trans-unit id="d91448cecce89d1ca2c26bb671735c7ea1fa6d5e" translate="yes" xml:space="preserve">
          <source>Cleaning up the &lt;code&gt;/dist&lt;/code&gt; folder</source>
          <target state="translated">&lt;code&gt;/dist&lt;/code&gt; 폴더 정리</target>
        </trans-unit>
        <trans-unit id="110651c3698bc7ba17adfe848e35678aa3e7f3f8" translate="yes" xml:space="preserve">
          <source>Click on the name of each option in the configuration code below to jump to the detailed documentation. Also note that the items with arrows can be expanded to show more examples and, in some cases, more advanced configuration.</source>
          <target state="translated">아래 구성 코드에서 각 옵션의 이름을 클릭하여 자세한 설명서로 이동하십시오. 또한 화살표가있는 항목을 확장하여 더 많은 예제와 경우에 따라 고급 구성을 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="72f870a55892a08271714d6717ddad51410ccebf" translate="yes" xml:space="preserve">
          <source>Close &lt;code&gt;Watching&lt;/code&gt;</source>
          <target state="translated">닫기 &lt;code&gt;Watching&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dd322ea0f64574e513e0c0764e1d2dbd31339634" translate="yes" xml:space="preserve">
          <source>Closes the module code in a function (&lt;code&gt;(function () { ... }).call();&lt;/code&gt;)</source>
          <target state="translated">Closes the module code in a function ( &lt;code&gt;(function () { ... }).call();&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="ed22803d36f467cddf6a20cc3db359a7e721b520" translate="yes" xml:space="preserve">
          <source>Closes the module code in a function with a given &lt;code&gt;thisArg&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt; (&lt;code&gt;(function () { ... }).call();&lt;/code&gt;).</source>
          <target state="translated">Closes the module code in a function with a given &lt;code&gt;thisArg&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt; ( &lt;code&gt;(function () { ... }).call();&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="cd6cdcec41f5a316612396d19bb8854792a1918d" translate="yes" xml:space="preserve">
          <source>Closure Library Plugin</source>
          <target state="translated">Closure Library Plugin</target>
        </trans-unit>
        <trans-unit id="3b99bcf0a23915a787c29e8a30648d974a2f8ad0" translate="yes" xml:space="preserve">
          <source>ClosureWebpackPlugin</source>
          <target state="translated">ClosureWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="d4a989ae1369e4b664454339de990449f6d5be39" translate="yes" xml:space="preserve">
          <source>Code Splitting</source>
          <target state="translated">코드 분할</target>
        </trans-unit>
        <trans-unit id="3c2cfe661cc218216da6737337e382420fed415d" translate="yes" xml:space="preserve">
          <source>Code Splitting Example</source>
          <target state="translated">코드 분할 예</target>
        </trans-unit>
        <trans-unit id="8b5f15a51f0d6a05ff88e64ee3e7665192d51beb" translate="yes" xml:space="preserve">
          <source>Code passed along to webpack or the next loader that will replace the module.</source>
          <target state="translated">코드를 웹팩이나 모듈을 대체 할 다음 로더로 전달했습니다.</target>
        </trans-unit>
        <trans-unit id="06ef02df75db62bbf337ea89fef1b09f9d65f703" translate="yes" xml:space="preserve">
          <source>Code splitting is one of the most compelling features of webpack. This feature allows you to split your code into various bundles which can then be loaded on demand or in parallel. It can be used to achieve smaller bundles and control resource load prioritization which, if used correctly, can have a major impact on load time.</source>
          <target state="translated">코드 분할은 웹팩의 가장 강력한 기능 중 하나입니다. 이 기능을 사용하면 코드를 다양한 번들로 분할하여 요청시 또는 병렬로로드 할 수 있습니다. 더 작은 번들을 달성하고 올바르게 사용하는 경우로드 시간에 큰 영향을 줄 수있는 자원로드 우선 순위를 제어하는 ​​데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="060e732b25b855d11a3d4b067c050d0a10213486" translate="yes" xml:space="preserve">
          <source>Code will run in Deno.</source>
          <target state="translated">Code will run in Deno.</target>
        </trans-unit>
        <trans-unit id="69ed81b0a4b790026095ba283518de512f8bb958" translate="yes" xml:space="preserve">
          <source>Code will run in Node.js.</source>
          <target state="translated">Code will run in Node.js.</target>
        </trans-unit>
        <trans-unit id="7a67592a02c761296fa51c2d27e2e4fe297a5197" translate="yes" xml:space="preserve">
          <source>Code will run in a (Web)Worker.</source>
          <target state="translated">Code will run in a (Web)Worker.</target>
        </trans-unit>
        <trans-unit id="3230d25ed871be3e700b069bfa146501617104c3" translate="yes" xml:space="preserve">
          <source>Code will run in a (Web)Worker.&lt;sup&gt;(1)&lt;/sup&gt;</source>
          <target state="translated">코드는 (Web) Worker에서 실행됩니다. &lt;sup&gt;(1)&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="615aaa8f777e2b4a5de6e3981992dc0db09a8664" translate="yes" xml:space="preserve">
          <source>Code will run in a Worklet.</source>
          <target state="translated">Code will run in a Worklet.</target>
        </trans-unit>
        <trans-unit id="056415e5f4ec47ab14cdfebe9038d21e0e66309f" translate="yes" xml:space="preserve">
          <source>Code will run in a Worklet.&lt;sup&gt;(1)&lt;/sup&gt;</source>
          <target state="translated">코드는 Worklet에서 실행됩니다. &lt;sup&gt;(1)&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="05345cb622187767882fca7ebb748c7b3897c5f9" translate="yes" xml:space="preserve">
          <source>Code will run in a browser.</source>
          <target state="translated">Code will run in a browser.</target>
        </trans-unit>
        <trans-unit id="0baf920cff4b3facbaf805a98367b0cd8336c8bd" translate="yes" xml:space="preserve">
          <source>Code will run in electron.</source>
          <target state="translated">Code will run in electron.</target>
        </trans-unit>
        <trans-unit id="baf8dfc7d64cfb117bb767372e07584c10efea58" translate="yes" xml:space="preserve">
          <source>Code will run in electron.&lt;sup&gt;(1)&lt;/sup&gt;</source>
          <target state="translated">코드는 전자에서 실행됩니다. &lt;sup&gt;(1)&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="9bfbe79a3d4f37b0eb2a5ed8a2ace214f9cc5226" translate="yes" xml:space="preserve">
          <source>Code will run in react-native.</source>
          <target state="translated">Code will run in react-native.</target>
        </trans-unit>
        <trans-unit id="cdf59624ab1eb754830d01c3808f2b174b2191ef" translate="yes" xml:space="preserve">
          <source>Coffee Script Redux loader for Webpack.</source>
          <target state="translated">Webpack 용 Coffee Script Redux 로더.</target>
        </trans-unit>
        <trans-unit id="082a42c3704ee38739d3dd41511c5b78ea5ca8f3" translate="yes" xml:space="preserve">
          <source>CoffeeScript</source>
          <target state="translated">CoffeeScript</target>
        </trans-unit>
        <trans-unit id="2904bf90d4f74342e671bfac79b5dbab17a64337" translate="yes" xml:space="preserve">
          <source>CoffeeScript 2 generates JavaScript that uses the latest, modern syntax. The runtime or browsers where you want your code to run might not support all of that syntax. In that case, we want to convert modern JavaScript into older JavaScript that will run in older versions of Node or older browsers; for example, { a } = obj into a = obj.a. This is done via transpilers like Babel, Bubl&amp;eacute; or Traceur Compiler.</source>
          <target state="translated">CoffeeScript 2 generates JavaScript that uses the latest, modern syntax. The runtime or browsers where you want your code to run might not support all of that syntax. In that case, we want to convert modern JavaScript into older JavaScript that will run in older versions of Node or older browsers; for example, { a } = obj into a = obj.a. This is done via transpilers like Babel, Bubl&amp;eacute; or Traceur Compiler.</target>
        </trans-unit>
        <trans-unit id="5c050f2d0dc8f0efc3f74dd9b0bb1628c222d2ea" translate="yes" xml:space="preserve">
          <source>CoffeeScript and Babel</source>
          <target state="translated">CoffeeScript and Babel</target>
        </trans-unit>
        <trans-unit id="3ff4d83c3eb8e8bcf78e228613460723cfd0d312" translate="yes" xml:space="preserve">
          <source>Combine &lt;code&gt;profile: true&lt;/code&gt; with &lt;code&gt;parallelism: 1&lt;/code&gt; to get correct timings. Note that this will slow down the build as well.</source>
          <target state="translated">&lt;code&gt;profile: true&lt;/code&gt; 와 &lt;code&gt;parallelism: 1&lt;/code&gt; 을 결합 하여 올바른 타이밍을 얻습니다. 이렇게하면 빌드 속도도 느려집니다.</target>
        </trans-unit>
        <trans-unit id="215034c8c1e86ffc2c9c6292a8c2e42673f959e2" translate="yes" xml:space="preserve">
          <source>Combine this plugin with &lt;a href=&quot;../configuration/output#output-library&quot;&gt;&lt;code&gt;output.library&lt;/code&gt;&lt;/a&gt; option to expose (aka, put into the global scope) the dll function.</source>
          <target state="translated">이 플러그인을 &lt;a href=&quot;../configuration/output#output-library&quot;&gt; &lt;code&gt;output.library&lt;/code&gt; &lt;/a&gt; 옵션 과 결합 하여 dll 함수를 노출 (전역 범위에 넣음)하십시오.</target>
        </trans-unit>
        <trans-unit id="c8edd0609ae172ecb050019c34656c2aca8dfe2f" translate="yes" xml:space="preserve">
          <source>Combine this plugin with &lt;a href=&quot;../configuration/output#outputlibrary&quot;&gt;&lt;code&gt;output.library&lt;/code&gt;&lt;/a&gt; option to expose (aka, put into the global scope) the dll function.</source>
          <target state="translated">Combine this plugin with &lt;a href=&quot;../configuration/output#outputlibrary&quot;&gt; &lt;code&gt;output.library&lt;/code&gt; &lt;/a&gt; option to expose (aka, put into the global scope) the dll function.</target>
        </trans-unit>
        <trans-unit id="ffdd6f5debc93a2802f89344733e83d1441a439f" translate="yes" xml:space="preserve">
          <source>Combine with &lt;code&gt;parallelism: 1&lt;/code&gt; for better results.</source>
          <target state="translated">더 나은 결과를 얻으려면 &lt;code&gt;parallelism: 1&lt;/code&gt; 와 결합하십시오 .</target>
        </trans-unit>
        <trans-unit id="fbe792b6b57895fe63abc1efdb7540a05d3c2b02" translate="yes" xml:space="preserve">
          <source>Combining implicit common vendor chunks and manifest file</source>
          <target state="translated">암시 적 공통 공급 업체 청크와 매니페스트 파일 결합</target>
        </trans-unit>
        <trans-unit id="0d94a876c34a6890c0a9b673370ea231f75e0697" translate="yes" xml:space="preserve">
          <source>Combining multiple substitutions:</source>
          <target state="translated">Combining multiple substitutions:</target>
        </trans-unit>
        <trans-unit id="16555f2f71e41b50579678cd8f9d3911fd936bd1" translate="yes" xml:space="preserve">
          <source>Combining patterns</source>
          <target state="translated">Combining patterns</target>
        </trans-unit>
        <trans-unit id="e32bb7ef5175997dc0756bbde25fc8638521dd25" translate="yes" xml:space="preserve">
          <source>Combining syntaxes</source>
          <target state="translated">Combining syntaxes</target>
        </trans-unit>
        <trans-unit id="8901895fb1b1d4c4ea2fec368c25176bf73e2f7e" translate="yes" xml:space="preserve">
          <source>Command</source>
          <target state="translated">Command</target>
        </trans-unit>
        <trans-unit id="14c818412d017dcc7f2635ecf050b64a83410b23" translate="yes" xml:space="preserve">
          <source>Command Line Interface</source>
          <target state="translated">커맨드 라인 인터페이스</target>
        </trans-unit>
        <trans-unit id="45e5f3f72e961cb70134ba35f7a27a9620e515f7" translate="yes" xml:space="preserve">
          <source>Commands</source>
          <target state="translated">Commands</target>
        </trans-unit>
        <trans-unit id="f6eaa962650a97f840a2800c301825ed8d72a917" translate="yes" xml:space="preserve">
          <source>Common Options</source>
          <target state="translated">공통 옵션</target>
        </trans-unit>
        <trans-unit id="6ba0dd62f98c4d247e5c924d7aa6235ea82c0c8d" translate="yes" xml:space="preserve">
          <source>Common and Vendor Chunks</source>
          <target state="translated">일반 및 공급 업체 청크</target>
        </trans-unit>
        <trans-unit id="1c4c349c3c3b0285e4f88fd501853db52525df19" translate="yes" xml:space="preserve">
          <source>Common patterns</source>
          <target state="translated">일반적인 패턴</target>
        </trans-unit>
        <trans-unit id="70bb3183945265f212d21dfe921bc9dabb65641d" translate="yes" xml:space="preserve">
          <source>Common place to &lt;a href=&quot;../configuration/stats#statslogging&quot;&gt;configure the logging&lt;/a&gt; display level</source>
          <target state="translated">Common place to &lt;a href=&quot;../configuration/stats#statslogging&quot;&gt;configure the logging&lt;/a&gt; display level</target>
        </trans-unit>
        <trans-unit id="387162b58e1a42df3b1ea3119611da781f8db072" translate="yes" xml:space="preserve">
          <source>Common use case</source>
          <target state="translated">일반적인 사용 사례</target>
        </trans-unit>
        <trans-unit id="377dd01e05316c6519d98a0022d6976f8e76be87" translate="yes" xml:space="preserve">
          <source>CommonJS</source>
          <target state="translated">CommonJS</target>
        </trans-unit>
        <trans-unit id="099769f604585d62b36882978f485597bf5de98d" translate="yes" xml:space="preserve">
          <source>CommonJS Multiple Exports</source>
          <target state="translated">CommonJS Multiple Exports</target>
        </trans-unit>
        <trans-unit id="f38951c7e06e005f0d6ff0edc7afc62769d945ca" translate="yes" xml:space="preserve">
          <source>CommonJS Single Export</source>
          <target state="translated">CommonJS Single Export</target>
        </trans-unit>
        <trans-unit id="c4102eb7c5d1a1c06f241e440ef4017fe21d5d63" translate="yes" xml:space="preserve">
          <source>CommonJS Single Import</source>
          <target state="translated">CommonJS Single Import</target>
        </trans-unit>
        <trans-unit id="536cb1f7506a3aa652817e315f74c2928dd26b08" translate="yes" xml:space="preserve">
          <source>CommonJS Wikipedia</source>
          <target state="translated">CommonJS 위키 백과</target>
        </trans-unit>
        <trans-unit id="3a601df76ac8c46a15b58347e0c71c317391d5a5" translate="yes" xml:space="preserve">
          <source>CommonJS came out and introduced &lt;code&gt;require&lt;/code&gt;, which allows you to load and use a module in the current file. This solved scope issues out of the box by importing each module as it was needed.</source>
          <target state="translated">CommonJS came out and introduced &lt;code&gt;require&lt;/code&gt; , which allows you to load and use a module in the current file. This solved scope issues out of the box by importing each module as it was needed.</target>
        </trans-unit>
        <trans-unit id="9fe7ef22eebdaee79af746c149937fe76331c705" translate="yes" xml:space="preserve">
          <source>CommonJS module. i.e. &lt;code&gt;require('webpack-numbers')&lt;/code&gt;.</source>
          <target state="translated">CommonJS 모듈. 즉 &lt;code&gt;require('webpack-numbers')&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ea8787d5b12c9aec27fd3469864538cd711d9cd2" translate="yes" xml:space="preserve">
          <source>CommonJS modules</source>
          <target state="translated">CommonJS 모듈</target>
        </trans-unit>
        <trans-unit id="c8b0a9ec13d3795936cd39f31d6d0b863a462146" translate="yes" xml:space="preserve">
          <source>CommonJs (webpack) &lt;code&gt;require.context&lt;/code&gt;</source>
          <target state="translated">CommonJs (webpack) &lt;code&gt;require.context&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b61c54a3e796849dc85506e739044aa916193f6c" translate="yes" xml:space="preserve">
          <source>CommonJs (webpack) &lt;code&gt;require.ensure([...])&lt;/code&gt;</source>
          <target state="translated">CommonJs (webpack) &lt;code&gt;require.ensure([...])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="919c537e17a351f1c5a3146673b67fb23541fbd2" translate="yes" xml:space="preserve">
          <source>CommonJs &lt;code&gt;require(...)&lt;/code&gt;</source>
          <target state="translated">CommonJs &lt;code&gt;require(...)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bcef0ab0ce9a28919db189b73af5b3135325fbcb" translate="yes" xml:space="preserve">
          <source>CommonJs &lt;code&gt;require.resolve()&lt;/code&gt;</source>
          <target state="translated">CommonJs &lt;code&gt;require.resolve()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f9cb537edda6f6f828d8111577b2ad411dab2346" translate="yes" xml:space="preserve">
          <source>CommonJs HMR (webpack) &lt;code&gt;module.hot.accept/decline([...])&lt;/code&gt;</source>
          <target state="translated">CommonJs HMR (webpack) &lt;code&gt;module.hot.accept/decline([...])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c7eafc5db412078d4f5dcf44ec17e2e3828f270f" translate="yes" xml:space="preserve">
          <source>CommonJs Syntax is not available: &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;module&lt;/code&gt;, &lt;code&gt;exports&lt;/code&gt;, &lt;code&gt;__filename&lt;/code&gt;, &lt;code&gt;__dirname&lt;/code&gt;.</source>
          <target state="translated">CommonJs Syntax is not available: &lt;code&gt;require&lt;/code&gt; , &lt;code&gt;module&lt;/code&gt; , &lt;code&gt;exports&lt;/code&gt; , &lt;code&gt;__filename&lt;/code&gt; , &lt;code&gt;__dirname&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b0913cf9cdbf013f331cbea850afa5a5ab4460ae" translate="yes" xml:space="preserve">
          <source>CommonJsPlugin</source>
          <target state="translated">CommonJsPlugin</target>
        </trans-unit>
        <trans-unit id="1cfbe1511d7ed2b2c47c6c0d32d3a6fbec40349e" translate="yes" xml:space="preserve">
          <source>Commons chunk for entries</source>
          <target state="translated">항목에 대한 공통 청크</target>
        </trans-unit>
        <trans-unit id="637fdec0938c11bdd0a5c45f3c20f8db007d11e2" translate="yes" xml:space="preserve">
          <source>CommonsChunkPlugin</source>
          <target state="translated">CommonsChunkPlugin</target>
        </trans-unit>
        <trans-unit id="9eec7c356108cb0ac946d29789ef6b5fa3651c56" translate="yes" xml:space="preserve">
          <source>Compared to the extract-text-webpack-plugin:</source>
          <target state="translated">extract-text-webpack-plugin과 비교 :</target>
        </trans-unit>
        <trans-unit id="07f2645ac7629285b3edd6eb5e6276f9a28a1c3d" translate="yes" xml:space="preserve">
          <source>CompatibilityPlugin</source>
          <target state="translated">CompatibilityPlugin</target>
        </trans-unit>
        <trans-unit id="a56fc9efdde452d3d371e42369e8bdab1d591d15" translate="yes" xml:space="preserve">
          <source>Compilation Hooks</source>
          <target state="translated">컴파일 훅</target>
        </trans-unit>
        <trans-unit id="1ddb3db8e65b61067fa6f18b06e707fcca810bbf" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: additionalAssets</source>
          <target state="translated">컴파일 훅 : additionalAssets</target>
        </trans-unit>
        <trans-unit id="84762c7ce958d7913f4ca9b9e849019287f96ceb" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: additionalChunkAssets</source>
          <target state="translated">컴파일 훅 : additionalChunkAssets</target>
        </trans-unit>
        <trans-unit id="2ef8f592f1c79f8d0c9c077d7d0f1c9f023ea583" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: advancedOptimizeModuleOrder</source>
          <target state="translated">컴파일 후크 : advancedOptimizeModuleOrder</target>
        </trans-unit>
        <trans-unit id="a3a19408876660a5541b6ebabff0960613426241" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: afterHash</source>
          <target state="translated">컴파일 후크 : afterHash</target>
        </trans-unit>
        <trans-unit id="922a5c9f35ad6cc26571cb0fc2f054938ffa782c" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: afterOptimizeAssets</source>
          <target state="translated">컴파일 후크 : afterOptimizeAssets</target>
        </trans-unit>
        <trans-unit id="7f5363ee26cd3f673dc7450a870037b4558f9feb" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: afterOptimizeChunkAssets</source>
          <target state="translated">컴파일 후크 : afterOptimizeChunkAssets</target>
        </trans-unit>
        <trans-unit id="420132f6f89449efaa6aafca997b194fa05776bb" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: afterOptimizeChunkIds</source>
          <target state="translated">컴파일 후크 : afterOptimizeChunkIds</target>
        </trans-unit>
        <trans-unit id="68df5d547670fc08d09b20109161938112d316ea" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: afterOptimizeChunkModules</source>
          <target state="translated">컴파일 후크 : afterOptimizeChunkModules</target>
        </trans-unit>
        <trans-unit id="f3f21cdf5ad9d1fbf1f1139493dbfa8d563a282d" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: afterOptimizeChunks</source>
          <target state="translated">컴파일 후크 : afterOptimizeChunks</target>
        </trans-unit>
        <trans-unit id="2c0d4a7fb5a168ff0d61f49ff58f2368fdb80763" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: afterOptimizeDependencies</source>
          <target state="translated">컴파일 후크 : afterOptimizeDependencies</target>
        </trans-unit>
        <trans-unit id="b7964ed79dd8bf654342351a3e03a5647199a9be" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: afterOptimizeModuleIds</source>
          <target state="translated">컴파일 후크 : afterOptimizeModuleIds</target>
        </trans-unit>
        <trans-unit id="0086de0baf83f1bc6eb3150b1f7f4b2253fce625" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: afterOptimizeModules</source>
          <target state="translated">컴파일 후크 : afterOptimizeModule</target>
        </trans-unit>
        <trans-unit id="5ca4d8129322de363f96b2fbfdc02e146ffb7177" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: afterOptimizeTree</source>
          <target state="translated">컴파일 후크 : afterOptimizeTree</target>
        </trans-unit>
        <trans-unit id="c410316050cd182a35266f9db93264bbfa0f7522" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: afterSeal</source>
          <target state="translated">컴파일 후크 : afterSeal</target>
        </trans-unit>
        <trans-unit id="85f9145a8d157ac26c71011ac5326cca27255af4" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: assetPath</source>
          <target state="translated">컴파일 훅 : assetPath</target>
        </trans-unit>
        <trans-unit id="66b66fc8fcb17962968160ef1249af7036afc771" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: beforeChunkAssets</source>
          <target state="translated">컴파일 후크 : beforeChunkAssets</target>
        </trans-unit>
        <trans-unit id="323dafbe802884c6b876d90cd6f65c632fb2072f" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: beforeHash</source>
          <target state="translated">컴파일 후크 : beforeHash</target>
        </trans-unit>
        <trans-unit id="ad2569bddbf9012dfa76a3c0b43ff29a1d35aeeb" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: beforeModuleAssets</source>
          <target state="translated">컴파일 후크 : beforeModuleAssets</target>
        </trans-unit>
        <trans-unit id="cc6565b8058629a09a8eb82905b283be28f0d840" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: beforeModuleIds</source>
          <target state="translated">컴파일 후크 : beforeModuleIds</target>
        </trans-unit>
        <trans-unit id="d666fa47671c06156bc85a8d6e67723eb3f976bb" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: beforeOptimizeChunkIds</source>
          <target state="translated">컴파일 후크 : beforeOptimizeChunkIds</target>
        </trans-unit>
        <trans-unit id="b6d6350740c272b6b1b3cc14a81e13b5c4d3127b" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: buildModule</source>
          <target state="translated">컴파일 후크 : buildModule</target>
        </trans-unit>
        <trans-unit id="82c0ff81fa80838bc5e68fef5666159d3f6beeeb" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: childCompiler</source>
          <target state="translated">컴파일 후크 : childCompiler</target>
        </trans-unit>
        <trans-unit id="c411ea9b3b60641e1f0728fbb4e4b1a4b001d98a" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: chunkAsset</source>
          <target state="translated">컴파일 후크 : chunkAsset</target>
        </trans-unit>
        <trans-unit id="e0191d1ddc4ce94238cd897062047e57b2a224ca" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: chunkHash</source>
          <target state="translated">컴파일 후크 : chunkHash</target>
        </trans-unit>
        <trans-unit id="5553498508057f19c722630e9e652392be5c92bf" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: dependencyReference</source>
          <target state="translated">컴파일 후크 : dependencyReference</target>
        </trans-unit>
        <trans-unit id="63166bf3019b0cd8da8c2b7d0882d106abf9deff" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: failedModule</source>
          <target state="translated">컴파일 후크 : failedModule</target>
        </trans-unit>
        <trans-unit id="7dee0889389c46d57816c3750ba8d7ab385fea3b" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: finishModules</source>
          <target state="translated">컴파일 후크 : finishModules</target>
        </trans-unit>
        <trans-unit id="b333e5d715bd4719262c5652e85ec9efa51318e8" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: finishRebuildingModule</source>
          <target state="translated">컴파일 후크 : finishRebuildingModule</target>
        </trans-unit>
        <trans-unit id="6c19e31deffbdc79ac02d5fa6d5b028dbb18c0d6" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: moduleAsset</source>
          <target state="translated">컴파일 후크 : moduleAsset</target>
        </trans-unit>
        <trans-unit id="582a011e586ed4435a3167a2449ec7e83acb42b9" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: moduleIds</source>
          <target state="translated">컴파일 후크 : moduleIds</target>
        </trans-unit>
        <trans-unit id="1391a2bc853d7c34cb07dabb90e36fd262cb314b" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: needAdditionalPass</source>
          <target state="translated">컴파일 후크 : needAdditionalPass</target>
        </trans-unit>
        <trans-unit id="11cfaf4f0e54ba2e04a8f4321f4e7319e2bba889" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: needAdditionalSeal</source>
          <target state="translated">컴파일 후크 : needAdditionalSeal</target>
        </trans-unit>
        <trans-unit id="44563f14d20fd07e59e0b38835fba12bbe9a22b4" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: normalModuleLoader</source>
          <target state="translated">컴파일 후크 : normalModuleLoader</target>
        </trans-unit>
        <trans-unit id="2af830ab0932acce9a7b6137e266620a8cec34b4" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimize</source>
          <target state="translated">컴파일 후크 : 최적화</target>
        </trans-unit>
        <trans-unit id="1230a372f55a4db9ab27f0456e3d151ee5af3077" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeAssets</source>
          <target state="translated">컴파일 후크 : optimizeAssets</target>
        </trans-unit>
        <trans-unit id="78d3fadd2889f4bd0141541c9ba1941549fdc7db" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeChunkAssets</source>
          <target state="translated">컴파일 후크 : optimizeChunkAssets</target>
        </trans-unit>
        <trans-unit id="b7a2aee64fa122625dc55a75a0b58ddc9069a6b3" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeChunkIds</source>
          <target state="translated">컴파일 후크 : optimizeChunkIds</target>
        </trans-unit>
        <trans-unit id="32d4bbfeaf2088d215eaeba7193a499240d3404f" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeChunkModules</source>
          <target state="translated">컴파일 후크 : optimizeChunkModules</target>
        </trans-unit>
        <trans-unit id="6a784e1845016d21879d16aa65b10a7a86f78e36" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeChunkModulesAdvanced</source>
          <target state="translated">컴파일 후크 : optimizeChunkModulesAdvanced</target>
        </trans-unit>
        <trans-unit id="9fc39655488c30d5691b3fab0b195ab49dae24f3" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeChunkModulesBasic</source>
          <target state="translated">컴파일 후크 : optimizeChunkModulesBasic</target>
        </trans-unit>
        <trans-unit id="d77acd02713d1eb8a0be56d0db70908cb3e9a4e0" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeChunkOrder</source>
          <target state="translated">컴파일 후크 : optimizeChunkOrder</target>
        </trans-unit>
        <trans-unit id="41a00790b75b6e911c20cd9eb1e85932c17a2998" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeChunks</source>
          <target state="translated">컴파일 후크 : optimizeChunks</target>
        </trans-unit>
        <trans-unit id="0192cc60602194532b4d9ec8dda64df30d66db88" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeChunksAdvanced</source>
          <target state="translated">컴파일 후크 : optimizeChunksAdvanced</target>
        </trans-unit>
        <trans-unit id="0d37f7364d90d5999503b2ac8c99158b65998fef" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeChunksBasic</source>
          <target state="translated">컴파일 후크 : optimizeChunksBasic</target>
        </trans-unit>
        <trans-unit id="ce7378701fc80c61840dc40f00cfd35da4a119c3" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeDependencies</source>
          <target state="translated">컴파일 후크 : optimizeDependencies</target>
        </trans-unit>
        <trans-unit id="9813bd01aa224099ba00cc7ddb2019adbe8d9c04" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeDependenciesAdvanced</source>
          <target state="translated">컴파일 후크 : optimizeDependenciesAdvanced</target>
        </trans-unit>
        <trans-unit id="4c69825300b8cb654c3da900c90684a4540c3f54" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeDependenciesBasic</source>
          <target state="translated">컴파일 후크 : optimizeDependenciesBasic</target>
        </trans-unit>
        <trans-unit id="6f1e7acc6983066ee1e8b51859ce88c80ea9b825" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeModuleIds</source>
          <target state="translated">컴파일 후크 : optimizeModuleIds</target>
        </trans-unit>
        <trans-unit id="68c2bdbc3105dd7d0dadaab2583f09f92234e7a7" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeModuleOrder</source>
          <target state="translated">컴파일 후크 : optimizeModuleOrder</target>
        </trans-unit>
        <trans-unit id="94af93aeefb5ad3897f6c41e12e3a9758d110cf6" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeModules</source>
          <target state="translated">컴파일 훅 : optimizeModules</target>
        </trans-unit>
        <trans-unit id="3bfb410357aeeadc353bd415d8a71244f964758a" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeModulesAdvanced</source>
          <target state="translated">컴파일 후크 : optimizeModulesAdvanced</target>
        </trans-unit>
        <trans-unit id="690da39c9d73aef5bf4e9f00b565a5856357a837" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeModulesBasic</source>
          <target state="translated">컴파일 후크 : optimizeModlesBasic</target>
        </trans-unit>
        <trans-unit id="2aa6f034320b817fe8d5450d7afaff5e2b52136e" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeTree</source>
          <target state="translated">컴파일 후크 : optimizeTree</target>
        </trans-unit>
        <trans-unit id="068d048ba05c85905fa7a203d00129f4a651ea3f" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: rebuildModule</source>
          <target state="translated">컴파일 훅 : rebuildModule</target>
        </trans-unit>
        <trans-unit id="aee90ba8e993d1a00f65da21949f1a2f1a289e70" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: record</source>
          <target state="translated">컴파일 후크 : 레코드</target>
        </trans-unit>
        <trans-unit id="6f63aa0e9f7a95c8c13a994469f7ef3fbe4eb2e6" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: recordChunks</source>
          <target state="translated">컴파일 훅 : recordChunks</target>
        </trans-unit>
        <trans-unit id="541cda56c9b149e4db8e16675c611c997ea91672" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: recordHash</source>
          <target state="translated">컴파일 후크 : recordHash</target>
        </trans-unit>
        <trans-unit id="7678725e0cc90ea907ccaef4bcedb7e02af5cb37" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: recordModules</source>
          <target state="translated">컴파일 훅 : recordModules</target>
        </trans-unit>
        <trans-unit id="64baf55545c66a790d6df5b92d087571e536bba7" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: records</source>
          <target state="translated">편집 후크 : 레코드</target>
        </trans-unit>
        <trans-unit id="4b762db0944e6da9f90840e10db637d5acf9f2c8" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: reviveChunks</source>
          <target state="translated">컴파일 훅 : reviveChunks</target>
        </trans-unit>
        <trans-unit id="8e783af3faf0dd09076d0bdfe8bc7e4eca31021a" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: reviveModules</source>
          <target state="translated">컴파일 훅 : reviveModule</target>
        </trans-unit>
        <trans-unit id="1bc9fb03ad5d4661eb2b5a18924075099c785f9f" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: seal</source>
          <target state="translated">컴파일 후크 : 씰</target>
        </trans-unit>
        <trans-unit id="95e347b629b88d6be74e5bd69bfeb2fed4fbf6e1" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: shouldGenerateChunkAssets</source>
          <target state="translated">컴파일 후크 : shouldGenerateChunkAssets</target>
        </trans-unit>
        <trans-unit id="401cf8a773397274ebf52cea44a0186e31e8194c" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: shouldRecord</source>
          <target state="translated">컴파일 후크 : shouldRecord</target>
        </trans-unit>
        <trans-unit id="4c6a3ee9744baab815d7dc63fa58aa758b5017bb" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: succeedModule</source>
          <target state="translated">컴파일 후크 : successModule</target>
        </trans-unit>
        <trans-unit id="0d57b303b696e92f8550997408954244364c0e19" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: unseal</source>
          <target state="translated">컴파일 후크 : 봉인 해제</target>
        </trans-unit>
        <trans-unit id="8d1120b752965e3dec826941588bf25299b2c1dd" translate="yes" xml:space="preserve">
          <source>Compilation Object</source>
          <target state="translated">Compilation Object</target>
        </trans-unit>
        <trans-unit id="56f71105a89e85b4cb17b468be4d7d0118d1f9a8" translate="yes" xml:space="preserve">
          <source>Compilation errors (missing modules, syntax errors, etc)</source>
          <target state="translated">컴파일 오류 (모듈 누락, 구문 오류 등)</target>
        </trans-unit>
        <trans-unit id="79fd7cfef54038a28adadac5823e381b6da8a1be" translate="yes" xml:space="preserve">
          <source>Compilation has completed.</source>
          <target state="translated">편집이 완료되었습니다.</target>
        </trans-unit>
        <trans-unit id="6f5d66c968e210c40f409528aa5c63e3935edb8b" translate="yes" xml:space="preserve">
          <source>Compilation has failed.</source>
          <target state="translated">컴파일이 실패했습니다.</target>
        </trans-unit>
        <trans-unit id="01dcc6ff620a8099487cf5b342309c7beab9180f" translate="yes" xml:space="preserve">
          <source>Compilation warnings</source>
          <target state="translated">컴파일 경고</target>
        </trans-unit>
        <trans-unit id="b0b9e5de086fa04baa54444a3391ca3ea1826c57" translate="yes" xml:space="preserve">
          <source>Compile &lt;a href=&quot;https://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt; to JavaScript.</source>
          <target state="translated">Compile &lt;a href=&quot;https://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt; to JavaScript.</target>
        </trans-unit>
        <trans-unit id="7be5c8e8d4f16e73010199faa32fcb6e969e464c" translate="yes" xml:space="preserve">
          <source>Compile as WebWorker</source>
          <target state="translated">WebWorker로 컴파일</target>
        </trans-unit>
        <trans-unit id="255da3bf02124966054b8274650477fc620bce81" translate="yes" xml:space="preserve">
          <source>Compile entrypoints and dynamic &lt;code&gt;import&lt;/code&gt;s only when they are in use. It can be used for either Web or Node.js.</source>
          <target state="translated">진입 점 및 동적 &lt;code&gt;import&lt;/code&gt; 는 사용 중일 때만 컴파일하십시오 . Web 또는 Node.js에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a5c260c442ec0a9deee567e76e233d23293f7452" translate="yes" xml:space="preserve">
          <source>Compile for &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt; for main process.</source>
          <target state="translated">메인 프로세스를 위한 &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron을&lt;/a&gt; 위한 컴파일</target>
        </trans-unit>
        <trans-unit id="dedbe3c4e607031c0871b78b0db16168b3f8ef72" translate="yes" xml:space="preserve">
          <source>Compile for &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt; for renderer process, providing a target using &lt;code&gt;JsonpTemplatePlugin&lt;/code&gt;, &lt;code&gt;FunctionModulePlugin&lt;/code&gt; for browser environments and &lt;code&gt;NodeTargetPlugin&lt;/code&gt; and &lt;code&gt;ExternalsPlugin&lt;/code&gt; for CommonJS and Electron built-in modules.</source>
          <target state="translated">&lt;code&gt;JsonpTemplatePlugin&lt;/code&gt; , 브라우저 환경 용 &lt;code&gt;FunctionModulePlugin&lt;/code&gt; 및 CommonJS 및 Electron 내장 모듈 용 &lt;code&gt;NodeTargetPlugin&lt;/code&gt; 및 &lt;code&gt;ExternalsPlugin&lt;/code&gt; 을 사용하여 대상을 제공하는 렌더러 프로세스 용 &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt; 용 컴파일</target>
        </trans-unit>
        <trans-unit id="b19678fbc64e030df594a0900c5fd909bcae1ba1" translate="yes" xml:space="preserve">
          <source>Compile for &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt; for renderer process, providing a target using &lt;code&gt;NodeTemplatePlugin&lt;/code&gt; with &lt;code&gt;asyncChunkLoading&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;FunctionModulePlugin&lt;/code&gt; for browser environments and &lt;code&gt;NodeTargetPlugin&lt;/code&gt; and &lt;code&gt;ExternalsPlugin&lt;/code&gt; for CommonJS and Electron built-in modules.</source>
          <target state="translated">Compile for &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt; for renderer process, providing a target using &lt;code&gt;NodeTemplatePlugin&lt;/code&gt; with &lt;code&gt;asyncChunkLoading&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; , &lt;code&gt;FunctionModulePlugin&lt;/code&gt; for browser environments and &lt;code&gt;NodeTargetPlugin&lt;/code&gt; and &lt;code&gt;ExternalsPlugin&lt;/code&gt; for CommonJS and Electron built-in modules.</target>
        </trans-unit>
        <trans-unit id="fd8f50b367fff8ac93fb0793cd83079ca923bf7d" translate="yes" xml:space="preserve">
          <source>Compile for specified ECMAScript version. Examples: es5, es2020.</source>
          <target state="translated">Compile for specified ECMAScript version. Examples: es5, es2020.</target>
        </trans-unit>
        <trans-unit id="f681ec4ede4423c4ecf6f613ad086e816257b2a9" translate="yes" xml:space="preserve">
          <source>Compile for usage in WebKit and uses JSONP for chunk loading. Allows importing of built-in Node.js modules and &lt;a href=&quot;http://docs.nwjs.io/en/latest/&quot;&gt;&lt;code&gt;nw.gui&lt;/code&gt;&lt;/a&gt; (experimental)</source>
          <target state="translated">WebKit에서 사용하도록 컴파일하고 청크로드에 JSONP를 사용합니다. 내장 Node.js 모듈 및 &lt;a href=&quot;http://docs.nwjs.io/en/latest/&quot;&gt; &lt;code&gt;nw.gui&lt;/code&gt; &lt;/a&gt; (실험) 가져 오기 가능</target>
        </trans-unit>
        <trans-unit id="759e2b7958520257a0f46e60fe3e9cfc28001bf9" translate="yes" xml:space="preserve">
          <source>Compile for usage in a Node.js-like environment (uses &lt;code&gt;fs&lt;/code&gt; and &lt;code&gt;vm&lt;/code&gt; to load chunks asynchronously)</source>
          <target state="translated">Node.js와 같은 환경에서 사용하기 위해 컴파일합니다 ( &lt;code&gt;fs&lt;/code&gt; 및 &lt;code&gt;vm&lt;/code&gt; 을 사용 하여 청크를 비동기 적으로로드 함)</target>
        </trans-unit>
        <trans-unit id="ccea1c28a6aeb77b888cc72622ce815e57a8a767" translate="yes" xml:space="preserve">
          <source>Compile for usage in a Node.js-like environment (uses Node.js &lt;code&gt;require&lt;/code&gt; to load chunks)</source>
          <target state="translated">Node.js와 같은 환경에서 사용하기 위해 컴파일합니다 (Node.js에서 청크를로드 &lt;code&gt;require&lt;/code&gt; 함)</target>
        </trans-unit>
        <trans-unit id="043c7234c12c0aac8c917501137c50e574808a26" translate="yes" xml:space="preserve">
          <source>Compile for usage in a browser-like environment &lt;strong&gt;(default)&lt;/strong&gt;</source>
          <target state="translated">브라우저와 같은 환경에서 사용하기위한 컴파일 &lt;strong&gt;(기본값)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bdbec98fbff9729c7ba6ba3b6067563cdd18738b" translate="yes" xml:space="preserve">
          <source>Compile in Memory</source>
          <target state="translated">메모리에서 컴파일</target>
        </trans-unit>
        <trans-unit id="1878e8afc002cb59bbb15b3303ed029fb43b2242" translate="yes" xml:space="preserve">
          <source>Compiler Flags</source>
          <target state="translated">컴파일러 플래그</target>
        </trans-unit>
        <trans-unit id="29355dce80ea2f26572145067fc4172fd22ee493" translate="yes" xml:space="preserve">
          <source>Compiler Hooks</source>
          <target state="translated">컴파일러 후크</target>
        </trans-unit>
        <trans-unit id="74608b3c7f4843ae841aaf3ef2668da02ed8fef7" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: afterCompile</source>
          <target state="translated">컴파일러 후크 : afterCompile</target>
        </trans-unit>
        <trans-unit id="ab33ad2bdd743517f06a4fafe46e81fd080dbbd4" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: afterEmit</source>
          <target state="translated">컴파일러 후크 : afterEmit</target>
        </trans-unit>
        <trans-unit id="a02fbb07c204edac8299df158ee93f32c81bdf66" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: afterEnvironment</source>
          <target state="translated">컴파일러 후크 : afterEnvironment</target>
        </trans-unit>
        <trans-unit id="3a610e6a21d419b312a21764847acc1c1f50054b" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: afterPlugins</source>
          <target state="translated">컴파일러 후크 : afterPlugins</target>
        </trans-unit>
        <trans-unit id="f6f182de4a43c8af9f6c4d936b4d22883e475cbb" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: afterResolvers</source>
          <target state="translated">컴파일러 후크 : afterResolvers</target>
        </trans-unit>
        <trans-unit id="88de667306c323e23b10fa82471524e424b0d4b2" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: beforeCompile</source>
          <target state="translated">컴파일러 후크 : beforeCompile</target>
        </trans-unit>
        <trans-unit id="6199812aaa7c64cfc47ec41b6bcbfe25e3d61d53" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: beforeRun</source>
          <target state="translated">컴파일러 후크 : beforeRun</target>
        </trans-unit>
        <trans-unit id="881f50fa5d361d26b9985b0427d5abf71bf5d908" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: compilation</source>
          <target state="translated">컴파일러 후크 : 컴파일</target>
        </trans-unit>
        <trans-unit id="9eb6a9f527d7471baefec6898b1eb483a9e5af73" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: compile</source>
          <target state="translated">컴파일러 후크 : 컴파일</target>
        </trans-unit>
        <trans-unit id="dc740f39b8b565e9d026ef5af5d9f7a6c4cb4f7e" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: contextModuleFactory</source>
          <target state="translated">컴파일러 후크 : contextModuleFactory</target>
        </trans-unit>
        <trans-unit id="bd7c026c099b60b6716a7f1456757db1de1e863e" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: done</source>
          <target state="translated">컴파일러 후크 : 완료</target>
        </trans-unit>
        <trans-unit id="ab55175cac163211b20f8805e88095c848791971" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: emit</source>
          <target state="translated">컴파일러 후크 : 방출</target>
        </trans-unit>
        <trans-unit id="f61914a6cf987e537981cd8ae51ebff4021ec2fc" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: entryOption</source>
          <target state="translated">컴파일러 후크 : entryOption</target>
        </trans-unit>
        <trans-unit id="dc5bea7b990ff2d8083446066bc790896e58dd0e" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: environment</source>
          <target state="translated">컴파일러 후크 : 환경</target>
        </trans-unit>
        <trans-unit id="708b694170ce1e29ba0f6ac02108e5952baf132b" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: failed</source>
          <target state="translated">컴파일러 후크 : 실패</target>
        </trans-unit>
        <trans-unit id="a54231dccf8a3219615531c1e7a30437939e6195" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: invalid</source>
          <target state="translated">컴파일러 후크 : 유효하지 않습니다</target>
        </trans-unit>
        <trans-unit id="9df4a48c5cb01ccf8462c2aa3e72974670080e6e" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: make</source>
          <target state="translated">컴파일러 후크 : 확인</target>
        </trans-unit>
        <trans-unit id="a610b683846dc06997b8489512f3665b4f71b72e" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: normalModuleFactory</source>
          <target state="translated">컴파일러 후크 : normalModuleFactory</target>
        </trans-unit>
        <trans-unit id="fce1fe3e883c338f3f3c6ce9093a7b2cd8e21d87" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: run</source>
          <target state="translated">컴파일러 후크 : 실행</target>
        </trans-unit>
        <trans-unit id="1b33d03babfe5c7cb16f6b17a693fada0b72617f" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: shouldEmit</source>
          <target state="translated">컴파일러 후크 : shouldEmit</target>
        </trans-unit>
        <trans-unit id="b7aabd6d7ef597c7e86df7febf3d57290af61513" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: thisCompilation</source>
          <target state="translated">컴파일러 후크 : thisCompilation</target>
        </trans-unit>
        <trans-unit id="b8c3176f55416ca1da4c017bf9b84d949e470b12" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: watchClose</source>
          <target state="translated">컴파일러 후크 : watchClose</target>
        </trans-unit>
        <trans-unit id="08b6b6a010af7337069abf47316dfc2f53b17fa7" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: watchRun</source>
          <target state="translated">컴파일러 후크 : watchRun</target>
        </trans-unit>
        <trans-unit id="48fb82cdf0adb1c116afdd8de8d1759250d60807" translate="yes" xml:space="preserve">
          <source>Compiler Instance</source>
          <target state="translated">컴파일러 인스턴스</target>
        </trans-unit>
        <trans-unit id="481509ad15ada3325b547911fc706497346ac08d" translate="yes" xml:space="preserve">
          <source>Components library as container</source>
          <target state="translated">Components library as container</target>
        </trans-unit>
        <trans-unit id="257f8216a505d91b7a99c333e0ba48c02e26866b" translate="yes" xml:space="preserve">
          <source>Compression options for &lt;code&gt;algorithm&lt;/code&gt;</source>
          <target state="translated">Compression options for &lt;code&gt;algorithm&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f17a2cd00383998197cf243f85d7e47a8aff0289" translate="yes" xml:space="preserve">
          <source>Compression options for &lt;code&gt;algorithm&lt;/code&gt;.</source>
          <target state="translated">Compression options for &lt;code&gt;algorithm&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="82a9bb65997a18ab8dc2f11a3e481f145ddc743d" translate="yes" xml:space="preserve">
          <source>CompressionWebpackPlugin</source>
          <target state="translated">CompressionWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="be38083bba79bd641ebc7c455a5d817aa75b1f37" translate="yes" xml:space="preserve">
          <source>Concept goals</source>
          <target state="translated">Concept goals</target>
        </trans-unit>
        <trans-unit id="afe51f9271f9c0c7ca13befe4e38e8d775af7f6e" translate="yes" xml:space="preserve">
          <source>Concept should be environment-independent.</source>
          <target state="translated">Concept should be environment-independent.</target>
        </trans-unit>
        <trans-unit id="6f58d263f33944384921df8405fd4a36e06175e2" translate="yes" xml:space="preserve">
          <source>Concepts</source>
          <target state="translated">Concepts</target>
        </trans-unit>
        <trans-unit id="89034263aa6d8291b141e426356a5164cfd8c0c6" translate="yes" xml:space="preserve">
          <source>Concepts - Hot Module Replacement</source>
          <target state="translated">개념-핫 모듈 교체</target>
        </trans-unit>
        <trans-unit id="e39262defe80a83fac1b793497417432c8b1a879" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusion</target>
        </trans-unit>
        <trans-unit id="2f4979324e03e4571b1d7eba701226670c2ee2da" translate="yes" xml:space="preserve">
          <source>Condition</source>
          <target state="translated">Condition</target>
        </trans-unit>
        <trans-unit id="4e3c8e3f583a041ed10c75869f820f753685a8e8" translate="yes" xml:space="preserve">
          <source>Condition 1: The chunk contains modules from &lt;code&gt;node_modules&lt;/code&gt;</source>
          <target state="translated">조건 1 : 청크는 &lt;code&gt;node_modules&lt;/code&gt; 의 모듈을 포함합니다</target>
        </trans-unit>
        <trans-unit id="3c554acd8793ef14c7d52d16912fe8bc24a7772b" translate="yes" xml:space="preserve">
          <source>Condition 1: The chunk is shared between both import calls</source>
          <target state="translated">조건 1 : 청크가 두 가져 오기 호출간에 공유됩니다.</target>
        </trans-unit>
        <trans-unit id="2b81ca62c1909ccca5d95f871829e4630be7f255" translate="yes" xml:space="preserve">
          <source>Condition 2: &lt;code&gt;helpers&lt;/code&gt; is bigger than 30kb</source>
          <target state="translated">조건 2 : &lt;code&gt;helpers&lt;/code&gt; 가 30kb보다 큼</target>
        </trans-unit>
        <trans-unit id="b791b81a1c068d75129b2c7083e5b91ca8ee36d2" translate="yes" xml:space="preserve">
          <source>Condition 2: &lt;code&gt;react&lt;/code&gt; is bigger than 30kb</source>
          <target state="translated">조건 2 : &lt;code&gt;react&lt;/code&gt; 이 30kb보다 큼</target>
        </trans-unit>
        <trans-unit id="04168c74a4987f8496ad6cd6904c000db678c585" translate="yes" xml:space="preserve">
          <source>Condition 3: Number of parallel requests at the import call is 2</source>
          <target state="translated">조건 3 : 가져 오기 호출에서 병렬 요청 수는 2입니다.</target>
        </trans-unit>
        <trans-unit id="585bf15cb4b72e1bfc32a12333074da02fe2b2ee" translate="yes" xml:space="preserve">
          <source>Condition 3: Number of parallel requests at the import calls is 2</source>
          <target state="translated">조건 3 : 가져 오기 호출에서 병렬 요청 수는 2입니다.</target>
        </trans-unit>
        <trans-unit id="bf7042222ecd43b60cce57c1f20e1e2248b01822" translate="yes" xml:space="preserve">
          <source>Condition 4: Doesn't affect request at initial page load</source>
          <target state="translated">조건 4 : 초기 페이지로드시 요청에 영향을 미치지 않습니다</target>
        </trans-unit>
        <trans-unit id="0543f6a17b3bcb298f32edc8723d65080d0a78a3" translate="yes" xml:space="preserve">
          <source>Condition what comments you need extract.</source>
          <target state="translated">추출해야 할 의견을 조건화하십시오.</target>
        </trans-unit>
        <trans-unit id="da0a0f5b614a9eb2aa8eb1d4a10afa594bea035a" translate="yes" xml:space="preserve">
          <source>Conditional build depending on an &lt;a href=&quot;../configuration/configuration-types&quot;&gt;specified environment&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../configuration/configuration-types&quot;&gt;지정된 환경&lt;/a&gt; 에 따른 조건부 빌드 .</target>
        </trans-unit>
        <trans-unit id="e7e2073a1e08e8ba253c98720d121f27f9bc14e8" translate="yes" xml:space="preserve">
          <source>Conditional syntax</source>
          <target state="translated">Conditional syntax</target>
        </trans-unit>
        <trans-unit id="5506eb6161a07356d96e91770d25d5a0f22200ef" translate="yes" xml:space="preserve">
          <source>Conditions</source>
          <target state="translated">Conditions</target>
        </trans-unit>
        <trans-unit id="3374ff74b1a620b1117efdf5f98b6c9e11208518" translate="yes" xml:space="preserve">
          <source>Conditions Order</source>
          <target state="translated">조건 주문</target>
        </trans-unit>
        <trans-unit id="e8f4d6158eb07b051a083c07fda8b3d6e2583d06" translate="yes" xml:space="preserve">
          <source>Conditions can be one of these:</source>
          <target state="translated">조건은 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a1f33ca66cae42733d0f7777175bc4388ecab45c" translate="yes" xml:space="preserve">
          <source>Conditions: Custom</source>
          <target state="translated">Conditions: Custom</target>
        </trans-unit>
        <trans-unit id="b125993bcb80015abce2b06078358f3bd4bccc22" translate="yes" xml:space="preserve">
          <source>Conditions: Preprocessor and runtimes</source>
          <target state="translated">Conditions: Preprocessor and runtimes</target>
        </trans-unit>
        <trans-unit id="8851142da56fd885ce668a165b33fee7003e858d" translate="yes" xml:space="preserve">
          <source>Config</source>
          <target state="translated">Config</target>
        </trans-unit>
        <trans-unit id="48a778f66b5bc6774a3f13677f7289eff6e23ebe" translate="yes" xml:space="preserve">
          <source>Config Cascade</source>
          <target state="translated">Config Cascade</target>
        </trans-unit>
        <trans-unit id="d282aaadf4f34eb6a05d7a31619f2469daceaeac" translate="yes" xml:space="preserve">
          <source>Config Files</source>
          <target state="translated">구성 파일</target>
        </trans-unit>
        <trans-unit id="6bb9831c5615d89f644b5e0ea840d1cc409e35c1" translate="yes" xml:space="preserve">
          <source>Config Options</source>
          <target state="translated">구성 옵션</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">Configuration</target>
        </trans-unit>
        <trans-unit id="8f47727ac24ec9d1f1419162b39b85c1ad8647b9" translate="yes" xml:space="preserve">
          <source>Configuration CSS Modules</source>
          <target state="translated">Configuration CSS Modules</target>
        </trans-unit>
        <trans-unit id="e4aec8d1f24a23f2b9a25e35c83dfd3c312a2209" translate="yes" xml:space="preserve">
          <source>Configuration CSS Modules.</source>
          <target state="translated">Configuration CSS Modules.</target>
        </trans-unit>
        <trans-unit id="0cce6cf5d4896e580927cc833b3c865d21195b14" translate="yes" xml:space="preserve">
          <source>Configuration Languages</source>
          <target state="translated">구성 언어</target>
        </trans-unit>
        <trans-unit id="b8577c99aaca7f628cb921ee68fce4bf962909c4" translate="yes" xml:space="preserve">
          <source>Configuration Options</source>
          <target state="translated">구성 옵션</target>
        </trans-unit>
        <trans-unit id="4423f6cc0cfc4280716d7e05543e1851972724a6" translate="yes" xml:space="preserve">
          <source>Configuration Types</source>
          <target state="translated">구성 유형</target>
        </trans-unit>
        <trans-unit id="3400ee427fb7527fce7493be4faaa7328352ebcb" translate="yes" xml:space="preserve">
          <source>Configuration/options problem or an internal error</source>
          <target state="translated">Configuration/options problem or an internal error</target>
        </trans-unit>
        <trans-unit id="c6040e04c3722248cf1662527fb32fa80dfcbd02" translate="yes" xml:space="preserve">
          <source>Configure a custom filename for your imported bundle</source>
          <target state="translated">가져온 번들에 대한 사용자 정의 파일 이름 구성</target>
        </trans-unit>
        <trans-unit id="3d1848f2f1a58932db5053524d41c2b40f1ce1dc" translate="yes" xml:space="preserve">
          <source>Configure how modules are resolved. For example, when calling &lt;code&gt;import &quot;lodash&quot;&lt;/code&gt; in ES2015, the &lt;code&gt;resolve&lt;/code&gt; options can change where webpack goes to look for &lt;code&gt;&quot;lodash&quot;&lt;/code&gt; (see &lt;a href=&quot;#resolve-modules&quot;&gt;&lt;code&gt;modules&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">모듈 해결 방법을 구성하십시오. 호출 할 때 예를 들어, &lt;code&gt;import &quot;lodash&quot;&lt;/code&gt; ES2015에서 &lt;code&gt;resolve&lt;/code&gt; 웹팩을 찾기 위해 어디로 옵션을 변경할 수 있습니다 &lt;code&gt;&quot;lodash&quot;&lt;/code&gt; (참조 &lt;a href=&quot;#resolve-modules&quot;&gt; &lt;code&gt;modules&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="947ddff287e2355bfdfa305bbd7885afa7c57764" translate="yes" xml:space="preserve">
          <source>Configure how modules are resolved. For example, when calling &lt;code&gt;import 'lodash'&lt;/code&gt; in ES2015, the &lt;code&gt;resolve&lt;/code&gt; options can change where webpack goes to look for &lt;code&gt;'lodash'&lt;/code&gt; (see &lt;a href=&quot;#resolvemodules&quot;&gt;&lt;code&gt;modules&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Configure how modules are resolved. For example, when calling &lt;code&gt;import 'lodash'&lt;/code&gt; in ES2015, the &lt;code&gt;resolve&lt;/code&gt; options can change where webpack goes to look for &lt;code&gt;'lodash'&lt;/code&gt; (see &lt;a href=&quot;#resolvemodules&quot;&gt; &lt;code&gt;modules&lt;/code&gt; &lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="ec5dd780bf10be86d4b601052bb10556a49b79df" translate="yes" xml:space="preserve">
          <source>Configure how performance hints are shown. For example if you have an asset that is over 250kb, webpack will emit a warning notifying you of this.</source>
          <target state="translated">성능 힌트 표시 방법을 구성하십시오. 예를 들어 자산이 250kb를 초과하는 경우 webpack은이를 알리는 경고를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="fc2d565d0a334b7fe4f58be9774138c168d8424b" translate="yes" xml:space="preserve">
          <source>Configure how source maps are named. By default &lt;code&gt;&quot;[file].map&quot;&lt;/code&gt; is used.</source>
          <target state="translated">소스 맵의 이름을 지정하는 방법을 구성하십시오. 기본적으로 &lt;code&gt;&quot;[file].map&quot;&lt;/code&gt; 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="078c654f7673769c1d592a1b69a6dce345ba25b9" translate="yes" xml:space="preserve">
          <source>Configure how source maps are named. Only takes effect when &lt;a href=&quot;devtool&quot;&gt;&lt;code&gt;devtool&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;'source-map'&lt;/code&gt;, which writes an output file.</source>
          <target state="translated">Configure how source maps are named. Only takes effect when &lt;a href=&quot;devtool&quot;&gt; &lt;code&gt;devtool&lt;/code&gt; &lt;/a&gt; is set to &lt;code&gt;'source-map'&lt;/code&gt; , which writes an output file.</target>
        </trans-unit>
        <trans-unit id="a4459ba6d2659b573b996acb98b6064bf3f7daf9" translate="yes" xml:space="preserve">
          <source>Configure how the library will be exposed. Any one of the following options can be used. Please note that this option works in conjunction with the value assigned to &lt;a href=&quot;#output-library&quot;&gt;&lt;code&gt;output.library&lt;/code&gt;&lt;/a&gt;. For the following examples, it is assumed that this value is configured as &lt;code&gt;MyLibrary&lt;/code&gt;.</source>
          <target state="translated">라이브러리가 노출되는 방식을 구성하십시오. 다음 옵션 중 하나를 사용할 수 있습니다. 이 옵션은 &lt;a href=&quot;#output-library&quot;&gt; &lt;code&gt;output.library&lt;/code&gt; 에&lt;/a&gt; 지정된 값과 함께 작동합니다 . 다음 예제에서는이 값이 &lt;code&gt;MyLibrary&lt;/code&gt; 로 구성된 것으로 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="244951a3cec33184ceb67209a2f8e529051283c9" translate="yes" xml:space="preserve">
          <source>Configure how the library will be exposed. Any one of the following options can be used. Please note that this option works in conjunction with the value assigned to &lt;a href=&quot;#outputlibrary&quot;&gt;&lt;code&gt;output.library&lt;/code&gt;&lt;/a&gt;. For the following examples, it is assumed that the value of &lt;a href=&quot;#outputlibrary&quot;&gt;&lt;code&gt;output.library&lt;/code&gt;&lt;/a&gt; is configured as &lt;code&gt;MyLibrary&lt;/code&gt;.</source>
          <target state="translated">라이브러리가 노출되는 방식을 구성합니다. 다음 옵션 중 하나를 사용할 수 있습니다. 이 옵션은 &lt;a href=&quot;#outputlibrary&quot;&gt; &lt;code&gt;output.library&lt;/code&gt; 에&lt;/a&gt; 할당 된 값과 함께 작동합니다 . 다음 예에서는 &lt;a href=&quot;#outputlibrary&quot;&gt; &lt;code&gt;output.library&lt;/code&gt; &lt;/a&gt; 값이 &lt;code&gt;MyLibrary&lt;/code&gt; 로 구성되어 있다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="870b3cc6a66d7ae6776ae63bb9a9f3355e5aea8c" translate="yes" xml:space="preserve">
          <source>Configure how the library will be exposed. Any one of the following options can be used. Please note that this option works in conjunction with the value assigned to &lt;a href=&quot;#outputlibrary&quot;&gt;&lt;code&gt;output.library&lt;/code&gt;&lt;/a&gt;. For the following examples, it is assumed that this value is configured as &lt;code&gt;MyLibrary&lt;/code&gt;.</source>
          <target state="translated">Configure how the library will be exposed. Any one of the following options can be used. Please note that this option works in conjunction with the value assigned to &lt;a href=&quot;#outputlibrary&quot;&gt; &lt;code&gt;output.library&lt;/code&gt; &lt;/a&gt;. For the following examples, it is assumed that this value is configured as &lt;code&gt;MyLibrary&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="baeb2e91265be01b8d0effc870b22dbdf089cb68" translate="yes" xml:space="preserve">
          <source>Configure loaders to skip type checking.</source>
          <target state="translated">유형 검사를 건너 뛰도록 로더를 구성하십시오.</target>
        </trans-unit>
        <trans-unit id="8434864167df1cd2c6642acd305543718074e612" translate="yes" xml:space="preserve">
          <source>Configure loaders to skip typechecking.</source>
          <target state="translated">Configure loaders to skip typechecking.</target>
        </trans-unit>
        <trans-unit id="aa021f52b8e0b14b64af4e287866d9f9681f61f3" translate="yes" xml:space="preserve">
          <source>Configure options for JavaScript parser.</source>
          <target state="translated">JavaScript 구문 분석기에 대한 옵션을 구성하십시오.</target>
        </trans-unit>
        <trans-unit id="83d2e5e93069ac5e95c35a63c027077c678948b0" translate="yes" xml:space="preserve">
          <source>Configure resolve options by the type of module request.</source>
          <target state="translated">모듈 요청 유형별로 해결 옵션을 구성합니다.</target>
        </trans-unit>
        <trans-unit id="4da319b6bd0d45ea6cb75f5d7adebec6a0392a98" translate="yes" xml:space="preserve">
          <source>Configure the &lt;a href=&quot;https://github.com/unifiedjs/unified#processordatakey-value&quot;&gt;&lt;code&gt;remark&lt;/code&gt;&lt;/a&gt; with information available to all plugins. Information is stored in an in-memory key-value store.</source>
          <target state="translated">Configure the &lt;a href=&quot;https://github.com/unifiedjs/unified#processordatakey-value&quot;&gt; &lt;code&gt;remark&lt;/code&gt; &lt;/a&gt; with information available to all plugins. Information is stored in an in-memory key-value store.</target>
        </trans-unit>
        <trans-unit id="57c5e637c1d3171f48a96ec424c3aeed492a1770" translate="yes" xml:space="preserve">
          <source>Configure the generated ident</source>
          <target state="translated">생성 된 ID 구성</target>
        </trans-unit>
        <trans-unit id="85b356abbddf47ee8f2707ad1f307d21a80d6c92" translate="yes" xml:space="preserve">
          <source>Configure which module or modules will be exposed via the &lt;code&gt;libraryTarget&lt;/code&gt;. It is &lt;code&gt;undefined&lt;/code&gt; by default, same behaviour will be applied if you set &lt;code&gt;libraryTarget&lt;/code&gt; to an empty string e.g. &lt;code&gt;''&lt;/code&gt; it will export the whole (namespace) object. The examples below demonstrate the effect of this configuration when using &lt;code&gt;libraryTarget: 'var'&lt;/code&gt;.</source>
          <target state="translated">Configure which module or modules will be exposed via the &lt;code&gt;libraryTarget&lt;/code&gt; . It is &lt;code&gt;undefined&lt;/code&gt; by default, same behaviour will be applied if you set &lt;code&gt;libraryTarget&lt;/code&gt; to an empty string e.g. &lt;code&gt;''&lt;/code&gt; it will export the whole (namespace) object. The examples below demonstrate the effect of this configuration when using &lt;code&gt;libraryTarget: 'var'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5aeb15fc98240f6a5a535a86ed7c8315a2d9f893" translate="yes" xml:space="preserve">
          <source>Configure which module or modules will be exposed via the &lt;code&gt;libraryTarget&lt;/code&gt;. The default &lt;code&gt;_entry_return_&lt;/code&gt; value is the namespace or default module returned by your entry file. The examples below demonstrate the effect of this config when using &lt;code&gt;libraryTarget: &quot;var&quot;&lt;/code&gt;, but any target may be used.</source>
          <target state="translated">&lt;code&gt;libraryTarget&lt;/code&gt; 을 통해 노출 될 모듈을 구성하십시오 . 기본 &lt;code&gt;_entry_return_&lt;/code&gt; 값은 입력 파일이 반환 한 네임 스페이스 또는 기본 모듈입니다. 아래 예제는 &lt;code&gt;libraryTarget: &quot;var&quot;&lt;/code&gt; 사용할 때이 구성의 영향을 보여 주지만 모든 대상을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="029298da9c6d161ae3944011b3d4718f78ee8f55" translate="yes" xml:space="preserve">
          <source>Configuring the &lt;code&gt;output&lt;/code&gt; configuration options tells webpack how to write the compiled files to disk. Note that, while there can be multiple &lt;code&gt;entry&lt;/code&gt; points, only one &lt;code&gt;output&lt;/code&gt; configuration is specified.</source>
          <target state="translated">구성 &lt;code&gt;output&lt;/code&gt; 구성 옵션은 디스크에 컴파일 된 파일을 작성하는 방법을 웹팩 알려줍니다. &lt;code&gt;entry&lt;/code&gt; 점이 여러 개있을 수 있지만 &lt;code&gt;output&lt;/code&gt; 구성은 하나만 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="01020296bd681be79595ef24bba63f1af433a1c5" translate="yes" xml:space="preserve">
          <source>Configuring the Loader</source>
          <target state="translated">로더 구성</target>
        </trans-unit>
        <trans-unit id="28c2a8cdbb5934c857c998dc17b81a05adb25c8b" translate="yes" xml:space="preserve">
          <source>Configuring the Project</source>
          <target state="translated">프로젝트 구성</target>
        </trans-unit>
        <trans-unit id="c4824ca3a5912efbea89a4a1170c78e62bbcdee3" translate="yes" xml:space="preserve">
          <source>Consider removing this scenario in favor of the DllPlugin, which provides a better vendor-splitting.</source>
          <target state="translated">더 나은 벤더 분할을 제공하는 DllPlugin을 위해이 시나리오를 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="728450af2dd22bb2014da8616cfe3369acd9c216" translate="yes" xml:space="preserve">
          <source>Consider the following &lt;code&gt;webpack.config.js&lt;/code&gt;:</source>
          <target state="translated">다음 &lt;code&gt;webpack.config.js&lt;/code&gt; 를 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="4cccf26df7da12dd5539f5bc53fd6da6b8c6292d" translate="yes" xml:space="preserve">
          <source>ConsolePlugin</source>
          <target state="translated">ConsolePlugin</target>
        </trans-unit>
        <trans-unit id="5097db7d2b9bba7655dfe77f8e6372377a797ff6" translate="yes" xml:space="preserve">
          <source>ConstPlugin</source>
          <target state="translated">ConstPlugin</target>
        </trans-unit>
        <trans-unit id="2208194ec620f2383931ffab02ece4c0c0f5ccab" translate="yes" xml:space="preserve">
          <source>Contains the actual configuration object.</source>
          <target state="translated">실제 구성 개체를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="454331227511b8d6726ba23606726e5dba70a0ea" translate="yes" xml:space="preserve">
          <source>Contains the full, absolute filesystem path to the configuration file.</source>
          <target state="translated">구성 파일에 대한 전체 절대 파일 시스템 경로를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="d75b37c831a7e00e43c504a0a6fcdcd2340082fb" translate="yes" xml:space="preserve">
          <source>Content Callback</source>
          <target state="translated">콘텐츠 콜백</target>
        </trans-unit>
        <trans-unit id="67a698fe784e58e02cabab3ffbacd47ed828bcb7" translate="yes" xml:space="preserve">
          <source>Content Security Policies</source>
          <target state="translated">콘텐츠 보안 정책</target>
        </trans-unit>
        <trans-unit id="62fa453d2984ea4dad496a25867fea7b3c3ff1dd" translate="yes" xml:space="preserve">
          <source>Context dependencies can also be added using &lt;a href=&quot;../api/loaders#thisaddcontextdependency&quot;&gt;&lt;code&gt;loaderContext.addContextDependency(directory: string)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Context dependencies can also be added using &lt;a href=&quot;../api/loaders#thisaddcontextdependency&quot;&gt; &lt;code&gt;loaderContext.addContextDependency(directory: string)&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b3f68370dbac0f9c015160915e40e9fdab0dcd75" translate="yes" xml:space="preserve">
          <source>Context: Resolves a module within a given context.</source>
          <target state="translated">컨텍스트 : 주어진 컨텍스트 내에서 모듈을 해결합니다.</target>
        </trans-unit>
        <trans-unit id="0657e19aa98e81def24df06efca4952b5a42904c" translate="yes" xml:space="preserve">
          <source>ContextExclusionPlugin</source>
          <target state="translated">ContextExclusionPlugin</target>
        </trans-unit>
        <trans-unit id="8182469d9bb2f2778cd42d24fcf26a703e5aaba6" translate="yes" xml:space="preserve">
          <source>ContextModuleFactory Hooks</source>
          <target state="translated">ContextModuleFactory 후크</target>
        </trans-unit>
        <trans-unit id="001b2574a19311bb3f17c6c3098a19bae7997b98" translate="yes" xml:space="preserve">
          <source>ContextReplacementPlugin</source>
          <target state="translated">ContextReplacementPlugin</target>
        </trans-unit>
        <trans-unit id="669ad6cb7a7439319b4db9629d93459e543f9e0d" translate="yes" xml:space="preserve">
          <source>Continue the update process (as long as &lt;code&gt;module.hot.status() === 'ready'&lt;/code&gt;).</source>
          <target state="translated">업데이트 프로세스를 계속 진행하십시오 ( &lt;code&gt;module.hot.status() === 'ready'&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="2d82a4b27a4b305690d5ac612046a955778a9fa5" translate="yes" xml:space="preserve">
          <source>Contributing</source>
          <target state="translated">Contributing</target>
        </trans-unit>
        <trans-unit id="26c3577dfe2de4e6a82e97e2f468589756530447" translate="yes" xml:space="preserve">
          <source>Control from consumer to container</source>
          <target state="translated">Control from consumer to container</target>
        </trans-unit>
        <trans-unit id="f399777d75d729ee19f056fbd4e43d75b61811a8" translate="yes" xml:space="preserve">
          <source>Control options related to watching the files.</source>
          <target state="translated">파일 시청과 관련된 제어 옵션.</target>
        </trans-unit>
        <trans-unit id="8d6161d155064c340f610e39e5d82c5103c7a970" translate="yes" xml:space="preserve">
          <source>Controls if and how source maps are generated.</source>
          <target state="translated">Controls if and how source maps are generated.</target>
        </trans-unit>
        <trans-unit id="85dbe037e7e3f601c0dcc71f2108bd74d5b91a25" translate="yes" xml:space="preserve">
          <source>Controls the level of compilation applied to the input styles.</source>
          <target state="translated">Controls the level of compilation applied to the input styles.</target>
        </trans-unit>
        <trans-unit id="62d439f9c91478b387d0e6dbac215fb119c6c256" translate="yes" xml:space="preserve">
          <source>Controls verbosity of the lifecycle messaging, e.g. the &lt;code&gt;Started watching files...&lt;/code&gt; log. Setting &lt;code&gt;info-verbosity&lt;/code&gt; to &lt;code&gt;verbose&lt;/code&gt; will also message to console at the beginning and the end of incremental build.</source>
          <target state="translated">Controls verbosity of the lifecycle messaging, e.g. the &lt;code&gt;Started watching files...&lt;/code&gt; log. Setting &lt;code&gt;info-verbosity&lt;/code&gt; to &lt;code&gt;verbose&lt;/code&gt; will also message to console at the beginning and the end of incremental build.</target>
        </trans-unit>
        <trans-unit id="e516b0cd166538a9b77e217bd00a2c007f67919b" translate="yes" xml:space="preserve">
          <source>Controls verbosity of the lifecycle messaging, e.g. the &lt;code&gt;Started watching files...&lt;/code&gt; log. Setting &lt;code&gt;info-verbosity&lt;/code&gt; to &lt;code&gt;verbose&lt;/code&gt; will also message to console at the beginning and the end of incremental build. &lt;code&gt;info-verbosity&lt;/code&gt; is set to &lt;code&gt;info&lt;/code&gt; by default.</source>
          <target state="translated">수명주기 메시징의 세부 정보를 제어합니다 (예 : &lt;code&gt;Started watching files...&lt;/code&gt; 로그). &lt;code&gt;info-verbosity&lt;/code&gt; 를 &lt;code&gt;verbose&lt;/code&gt; 로 설정하면 증분 빌드의 시작과 끝에 콘솔에 메시지 가 표시 됩니다. &lt;code&gt;info-verbosity&lt;/code&gt; 는 기본적 으로 &lt;code&gt;info&lt;/code&gt; 로 설정되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="39395b19d3c0cfea722a4d8275649b122cd2cc7e" translate="yes" xml:space="preserve">
          <source>Controls which modules are selected by this cache group. Omitting it selects all modules. It can match the absolute module resource path or chunk names. When a chunk name is matched, all modules in the chunk are selected.</source>
          <target state="translated">이 캐시 그룹에 의해 선택된 모듈을 제어합니다. 생략하면 모든 모듈이 선택됩니다. 절대 모듈 자원 경로 또는 청크 이름과 일치 할 수 있습니다. 청크 이름이 일치하면 청크의 모든 모듈이 선택됩니다.</target>
        </trans-unit>
        <trans-unit id="1f426c12e382f599579be38bd20549851a638ce6" translate="yes" xml:space="preserve">
          <source>Converts relative URLs to absolute urls, when source maps are enabled</source>
          <target state="translated">소스 맵이 활성화 된 경우 상대 URL을 절대 URL로 변환</target>
        </trans-unit>
        <trans-unit id="4478348a81e692609f050811b8ea83316117550b" translate="yes" xml:space="preserve">
          <source>Copies files, regardless of modification when using watch or &lt;code&gt;webpack-dev-server&lt;/code&gt;. All files are copied on first build, regardless of this option</source>
          <target state="translated">watch 또는 &lt;code&gt;webpack-dev-server&lt;/code&gt; 사용시 수정에 관계없이 파일을 복사 합니다 . 이 옵션에 관계없이 모든 파일은 첫 번째 빌드에서 복사됩니다</target>
        </trans-unit>
        <trans-unit id="75b5dab1972ac646f88dcdfdf9867a170685bfaa" translate="yes" xml:space="preserve">
          <source>Copies individual files or entire directories to the build directory</source>
          <target state="translated">개별 파일 또는 전체 디렉토리를 빌드 디렉토리에 복사합니다.</target>
        </trans-unit>
        <trans-unit id="46b80e5566fe6dad754f40add81e0baa1564b3a0" translate="yes" xml:space="preserve">
          <source>Copies individual files or entire directories, which already exist, to the build directory.</source>
          <target state="translated">Copies individual files or entire directories, which already exist, to the build directory.</target>
        </trans-unit>
        <trans-unit id="e3715922eb473eafb7ebc38d9770a857e8ccb0bf" translate="yes" xml:space="preserve">
          <source>Copy in new directory</source>
          <target state="translated">새 디렉토리에 복사</target>
        </trans-unit>
        <trans-unit id="2f759edfa075f7521229825209d42cc866b850fb" translate="yes" xml:space="preserve">
          <source>Copy the return value to a target object if it exists, otherwise create the target object first:</source>
          <target state="translated">반환 값이있는 경우 대상 개체에 복사하고, 그렇지 않으면 먼저 대상 개체를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="434df9547813406e50c0c80006916b8b53f3643e" translate="yes" xml:space="preserve">
          <source>CopyWebpackPlugin</source>
          <target state="translated">CopyWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="ed8fee92214c1f0dfa0e1cb1cff80bbef3025e56" translate="yes" xml:space="preserve">
          <source>Core Flags</source>
          <target state="translated">Core Flags</target>
        </trans-unit>
        <trans-unit id="00a0104780e0c029687cd0c20973d10fd92dd3e0" translate="yes" xml:space="preserve">
          <source>Could provide and consume multiple different version when you have nested node_modules.</source>
          <target state="translated">Could provide and consume multiple different version when you have nested node_modules.</target>
        </trans-unit>
        <trans-unit id="2cc6f6b39e1d38a7af6a73cfd1439290e4149463" translate="yes" xml:space="preserve">
          <source>Courtesy of &lt;a href=&quot;https://twitter.com/_developit&quot;&gt;Jason Miller&lt;/a&gt;</source>
          <target state="translated">Courtesy of &lt;a href=&quot;https://twitter.com/_developit&quot;&gt;Jason Miller&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d987992de2af617a5a9bc22868237975dca6bfe7" translate="yes" xml:space="preserve">
          <source>Courtesy of &lt;a href=&quot;https://twitter.com/_developit/status/769583291666169862&quot;&gt;Jason Miller&lt;/a&gt;</source>
          <target state="translated">씨의 &lt;a href=&quot;https://twitter.com/_developit/status/769583291666169862&quot;&gt;제이슨 밀러&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9b907fd91e48bd5f3a3eb6de42b95ae7cf51e0c3" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;commons&lt;/code&gt; chunk, which includes all code shared between entry points.</source>
          <target state="translated">크리에이트 &lt;code&gt;commons&lt;/code&gt; 진입 점 사이에 공유하는 모든 코드가 포함되어 덩어리를.</target>
        </trans-unit>
        <trans-unit id="cb201d44e68d6a9165f9ea10c9eb36fc0e31097a" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;custom vendor&lt;/code&gt; chunk, which contains certain &lt;code&gt;node_modules&lt;/code&gt; packages matched by &lt;code&gt;RegExp&lt;/code&gt;.</source>
          <target state="translated">Create a &lt;code&gt;custom vendor&lt;/code&gt; chunk, which contains certain &lt;code&gt;node_modules&lt;/code&gt; packages matched by &lt;code&gt;RegExp&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="056457363b8cb7965d2efa981afb6fc721c99d55" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;vendors&lt;/code&gt; chunk, which includes all code from &lt;code&gt;node_modules&lt;/code&gt; in the whole application.</source>
          <target state="translated">전체 애플리케이션 에서 &lt;code&gt;node_modules&lt;/code&gt; 의 모든 코드를 포함 하는 &lt;code&gt;vendors&lt;/code&gt; 청크를 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="b54f7c51b57bf29242ed3e36cb0e78e5a75018e0" translate="yes" xml:space="preserve">
          <source>Create additional assets for the chunks.</source>
          <target state="translated">청크에 대한 추가 자산을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="5e2e646fc0a653dc91c8b6f916f1e9e94df769ad" translate="yes" xml:space="preserve">
          <source>Create additional assets for the compilation. This hook can be used to download an image, for example:</source>
          <target state="translated">컴파일 할 추가 자산을 만듭니다. 이 후크는 이미지를 다운로드하는 데 사용할 수 있습니다 (예 :</target>
        </trans-unit>
        <trans-unit id="d92acd18ec73265188c27a675aaf7e93d1d544a6" translate="yes" xml:space="preserve">
          <source>Create aliases to &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; certain modules more easily. For example, to alias a bunch of commonly used &lt;code&gt;src/&lt;/code&gt; folders:</source>
          <target state="translated">별명을 작성하여 특정 모듈을 더 쉽게 &lt;code&gt;import&lt;/code&gt; 오거나 &lt;code&gt;require&lt;/code&gt; 하십시오 . 예를 들어, 일반적으로 사용되는 &lt;code&gt;src/&lt;/code&gt; 폴더 를 별명으로 지정하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="a81c32275233a9eff20fa17b100214d8df722bfd" translate="yes" xml:space="preserve">
          <source>Create an instance of &lt;code&gt;ProgressPlugin&lt;/code&gt; and provide one of the allowed params.</source>
          <target state="translated">Create an instance of &lt;code&gt;ProgressPlugin&lt;/code&gt; and provide one of the allowed params.</target>
        </trans-unit>
        <trans-unit id="3f2db0869c76ff4d261a43827abdcf5a1c68c710" translate="yes" xml:space="preserve">
          <source>Create the two config files:</source>
          <target state="translated">두 개의 구성 파일을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="2fb95f1593cc6cc4ddf08a2499e6dd459e6fcd49" translate="yes" xml:space="preserve">
          <source>Create the two configuration files:</source>
          <target state="translated">Create the two configuration files:</target>
        </trans-unit>
        <trans-unit id="430b978a74d021961ec9438dc3214f504ad11ea7" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;manifest.json&lt;/code&gt; which is written to the given &lt;code&gt;path&lt;/code&gt;. It contains mappings from require and import requests to module ids. It is used by the &lt;code&gt;DllReferencePlugin&lt;/code&gt;.</source>
          <target state="translated">Creates a &lt;code&gt;manifest.json&lt;/code&gt; which is written to the given &lt;code&gt;path&lt;/code&gt; . It contains mappings from require and import requests to module ids. It is used by the &lt;code&gt;DllReferencePlugin&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="60f725f2ad5de7dd5053b7780561165cca6a1d00" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;manifest.json&lt;/code&gt; which is written to the given &lt;code&gt;path&lt;/code&gt;. It contains mappings from require and import requests, to module ids. It is used by the &lt;code&gt;DllReferencePlugin&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;path&lt;/code&gt; 쓰여지 는 &lt;code&gt;manifest.json&lt;/code&gt; 을 만듭니다 . 필수 및 가져 오기 요청에서 모듈 ID 로의 맵핑이 포함됩니다. &lt;code&gt;DllReferencePlugin&lt;/code&gt; 에 의해 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="48c3f4bbcaf9550bd8405cbd75b6bf3bc52d45ca" translate="yes" xml:space="preserve">
          <source>Creates a module from a given dependency.</source>
          <target state="translated">Creates a module from a given dependency.</target>
        </trans-unit>
        <trans-unit id="e794278186177d0f4ebd6f484314b8d2bc24fd3c" translate="yes" xml:space="preserve">
          <source>Creates a resolve function similar to &lt;a href=&quot;#thisresolve&quot;&gt;&lt;code&gt;this.resolve&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#thisresolve&quot;&gt; &lt;code&gt;this.resolve&lt;/code&gt; &lt;/a&gt; 와 유사한 해결 함수를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="857054f086ed1cc3cc6d636746933b3522c4d5e8" translate="yes" xml:space="preserve">
          <source>Creates an extracting loader from an existing loader. Supports loaders of type &lt;code&gt;{ loader: [name]-loader -&amp;gt; {String}, options: {} -&amp;gt; {Object} }&lt;/code&gt;.</source>
          <target state="translated">기존 로더에서 추출 로더를 작성합니다. &lt;code&gt;{ loader: [name]-loader -&amp;gt; {String}, options: {} -&amp;gt; {Object} }&lt;/code&gt; 로더를 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="81e5f7e11927762ed15b7d39c7cbedb01ffecc4f" translate="yes" xml:space="preserve">
          <source>Creates and adds a new chunk to the &lt;code&gt;compilation.chunks&lt;/code&gt;. Returns that &lt;code&gt;chunk&lt;/code&gt;.</source>
          <target state="translated">Creates and adds a new chunk to the &lt;code&gt;compilation.chunks&lt;/code&gt; . Returns that &lt;code&gt;chunk&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3e4816a6dcfc945acf82c754c3799b620809d53b" translate="yes" xml:space="preserve">
          <source>Creates the &lt;code&gt;Chunk&lt;/code&gt; graph from the &lt;code&gt;Module&lt;/code&gt; graph. The process is done in two phases. Phase one: traverse the module graph and build a basic chunks graph in &lt;code&gt;chunkDependencies&lt;/code&gt;. Phase two: traverse every possible way through the basic chunk graph and track the available modules. While traversing, &lt;code&gt;processDependenciesBlocksForChunkGroups&lt;/code&gt; connects chunks with each other and &lt;code&gt;Blocks&lt;/code&gt; with &lt;code&gt;Chunks&lt;/code&gt;. It stops traversing when all modules for a chunk are already available and it doesn't connect unneeded chunks.</source>
          <target state="translated">Creates the &lt;code&gt;Chunk&lt;/code&gt; graph from the &lt;code&gt;Module&lt;/code&gt; graph. The process is done in two phases. Phase one: traverse the module graph and build a basic chunks graph in &lt;code&gt;chunkDependencies&lt;/code&gt; . Phase two: traverse every possible way through the basic chunk graph and track the available modules. While traversing, &lt;code&gt;processDependenciesBlocksForChunkGroups&lt;/code&gt; connects chunks with each other and &lt;code&gt;Blocks&lt;/code&gt; with &lt;code&gt;Chunks&lt;/code&gt; . It stops traversing when all modules for a chunk are already available and it doesn't connect unneeded chunks.</target>
        </trans-unit>
        <trans-unit id="b8da3b8040cdfc045e69143f1fd5e254cec6befb" translate="yes" xml:space="preserve">
          <source>Creating a Bundle</source>
          <target state="translated">번들 만들기</target>
        </trans-unit>
        <trans-unit id="a15d41b76bd9b54c50d5ef48ec2bd30531476fd3" translate="yes" xml:space="preserve">
          <source>Creating a scaffold</source>
          <target state="translated">Creating a scaffold</target>
        </trans-unit>
        <trans-unit id="8a45d339a638ac247a1574d733c588c338c1cb6e" translate="yes" xml:space="preserve">
          <source>Credit</source>
          <target state="translated">Credit</target>
        </trans-unit>
        <trans-unit id="27d25b13436f48241892f2490c03b2bab9a05fc1" translate="yes" xml:space="preserve">
          <source>Cross-Origin Policy</source>
          <target state="translated">교차 출처 정책</target>
        </trans-unit>
        <trans-unit id="99f2db5056da7ab01f0b304a4b41f8e50de7594c" translate="yes" xml:space="preserve">
          <source>CssMinimizerWebpackPlugin</source>
          <target state="translated">CssMinimizerWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="4a3b96fa19f58ec88be13ccd42724089c811cc6e" translate="yes" xml:space="preserve">
          <source>CssWebpackPlugin</source>
          <target state="translated">CssWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="e558bfe9c94cba7febec80abaf8e497108baa98f" translate="yes" xml:space="preserve">
          <source>Cssnano optimisations &lt;a href=&quot;https://cssnano.co/docs/optimisations&quot;&gt;options&lt;/a&gt;.</source>
          <target state="translated">Cssnano optimisations &lt;a href=&quot;https://cssnano.co/docs/optimisations&quot;&gt;options&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="248c908368cf8fe57b5456c03f90c4b01d59670c" translate="yes" xml:space="preserve">
          <source>Ctrl-C</source>
          <target state="translated">Ctrl-C</target>
        </trans-unit>
        <trans-unit id="e7cb6e4a465aa7019b08da2fbd2daebc14018838" translate="yes" xml:space="preserve">
          <source>Current directory</source>
          <target state="translated">현재 디렉토리</target>
        </trans-unit>
        <trans-unit id="aa52b3fbc27cd7103334907a8d3cc92e212135bc" translate="yes" xml:space="preserve">
          <source>Currently useless. Ensures compatibility with other module loaders.</source>
          <target state="translated">현재 쓸모가 없습니다. 다른 모듈 로더와의 호환성을 보장합니다.</target>
        </trans-unit>
        <trans-unit id="9d21b726d8abf6d0f1ec67bcf1a64a0fd8ffd0c8" translate="yes" xml:space="preserve">
          <source>Custom Angular modules</source>
          <target state="translated">커스텀 앵귤러 모듈</target>
        </trans-unit>
        <trans-unit id="bca4b1427afbddc56ee57b9ae9e4eca963df2a63" translate="yes" xml:space="preserve">
          <source>Custom File Systems</source>
          <target state="translated">커스텀 파일 시스템</target>
        </trans-unit>
        <trans-unit id="14662ba0bd860469487e8b7cb5fa5a11fa760bf0" translate="yes" xml:space="preserve">
          <source>Custom Hooks</source>
          <target state="translated">커스텀 훅</target>
        </trans-unit>
        <trans-unit id="12692a94377b88c35509dae1863ffa6286551c42" translate="yes" xml:space="preserve">
          <source>Custom Minify Function</source>
          <target state="translated">맞춤 축소 기능</target>
        </trans-unit>
        <trans-unit id="cfcee953500ab100ee942415ed1c7a354e3deb21" translate="yes" xml:space="preserve">
          <source>Custom PostCSS Parser</source>
          <target state="translated">사용자 정의 PostCSS 파서</target>
        </trans-unit>
        <trans-unit id="1935666da3524024482703c561ee425d35940966" translate="yes" xml:space="preserve">
          <source>Custom PostCSS Stringifier</source>
          <target state="translated">커스텀 PostCSS Stringifier</target>
        </trans-unit>
        <trans-unit id="fd639b0297bc6e766bc745274491d13ae5484a1e" translate="yes" xml:space="preserve">
          <source>Custom PostCSS Syntax</source>
          <target state="translated">사용자 정의 PostCSS 구문</target>
        </trans-unit>
        <trans-unit id="691932b941818a3b279949fb3bf2b8f62422b38a" translate="yes" xml:space="preserve">
          <source>Custom Reporter</source>
          <target state="translated">맞춤형 기자</target>
        </trans-unit>
        <trans-unit id="af6d548f7ed58243b881192630022a050e144cd6" translate="yes" xml:space="preserve">
          <source>Custom data URI generator</source>
          <target state="translated">Custom data URI generator</target>
        </trans-unit>
        <trans-unit id="998d8ef3657187784c37f9bfd061101a4e386a2c" translate="yes" xml:space="preserve">
          <source>Custom hashes can be used by specifying a hash with the following format: &lt;code&gt;[&amp;lt;hashType&amp;gt;:hash:&amp;lt;digestType&amp;gt;:&amp;lt;length&amp;gt;]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[&amp;lt;hashType&amp;gt;:hash:&amp;lt;digestType&amp;gt;:&amp;lt;length&amp;gt;]&lt;/code&gt; 형식으로 해시를 지정하여 사용자 지정 해시를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c57f22998f2442612e0c3839d5bb91015eaf01fd" translate="yes" xml:space="preserve">
          <source>Custom output filename</source>
          <target state="translated">Custom output filename</target>
        </trans-unit>
        <trans-unit id="c00a8b9cb43753134dce4015690e33941a0add13" translate="yes" xml:space="preserve">
          <source>Custom parameters can be passed to webpack by adding two dashes between the &lt;code&gt;npm run build&lt;/code&gt; command and your parameters, e.g. &lt;code&gt;npm run build -- --color&lt;/code&gt;.</source>
          <target state="translated">Custom parameters can be passed to webpack by adding two dashes between the &lt;code&gt;npm run build&lt;/code&gt; command and your parameters, e.g. &lt;code&gt;npm run build -- --color&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2fcc0c992a4dca7da996c179e8ede232bf5d21e4" translate="yes" xml:space="preserve">
          <source>Custom parameters can be passed to webpack by adding two dashes between the &lt;code&gt;npm run build&lt;/code&gt; command and your parameters, e.g. &lt;code&gt;npm run build -- --colors&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;npm run build&lt;/code&gt; 명령과 매개 변수 사이에 두 개의 대시 ( 예 : &lt;code&gt;npm run build -- --colors&lt;/code&gt; ---colors)를 추가하여 사용자 정의 매개 변수를 웹팩으로 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="39be4a09fbe372ca9a7fe37819a308bb0b52ad1e" translate="yes" xml:space="preserve">
          <source>Custom plugins/loaders</source>
          <target state="translated">커스텀 플러그인 / 로더</target>
        </trans-unit>
        <trans-unit id="c7a74f35a0d1a12657383b9606d59d5f262a6f2e" translate="yes" xml:space="preserve">
          <source>Customize config based on webpack target</source>
          <target state="translated">Customize config based on webpack target</target>
        </trans-unit>
        <trans-unit id="fa18621ccb33e3bf387f1f9568de1519694c41e6" translate="yes" xml:space="preserve">
          <source>Customize parser of JSON modules</source>
          <target state="translated">Customize parser of JSON modules</target>
        </trans-unit>
        <trans-unit id="8c1574930d92cf1eadc4595b42aeee1c54d40ce5" translate="yes" xml:space="preserve">
          <source>Customize the filenames of hot update chunks. See &lt;a href=&quot;#output-filename&quot;&gt;&lt;code&gt;output.filename&lt;/code&gt;&lt;/a&gt; option for details on the possible values.</source>
          <target state="translated">핫 업데이트 청크의 파일 이름을 사용자 지정하십시오. 가능한 값에 대한 자세한 내용 은 &lt;a href=&quot;#output-filename&quot;&gt; &lt;code&gt;output.filename&lt;/code&gt; &lt;/a&gt; 옵션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="aa506c1a2b3feee131f105e250a43f636f9c0ca2" translate="yes" xml:space="preserve">
          <source>Customize the filenames of hot update chunks. See &lt;a href=&quot;#outputfilename&quot;&gt;&lt;code&gt;output.filename&lt;/code&gt;&lt;/a&gt; option for details on the possible values.</source>
          <target state="translated">Customize the filenames of hot update chunks. See &lt;a href=&quot;#outputfilename&quot;&gt; &lt;code&gt;output.filename&lt;/code&gt; &lt;/a&gt; option for details on the possible values.</target>
        </trans-unit>
        <trans-unit id="3553624ef14545ba49ccd7f022915f3ac3fbb17f" translate="yes" xml:space="preserve">
          <source>Customize the main hot update filename. &lt;code&gt;[fullhash]&lt;/code&gt; and &lt;code&gt;[runtime]&lt;/code&gt; are available as placeholder.</source>
          <target state="translated">주요 핫 업데이트 파일 이름을 사용자 지정합니다. &lt;code&gt;[fullhash]&lt;/code&gt; 및 &lt;code&gt;[runtime]&lt;/code&gt; 은 자리 표시 자로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="337992f2173a02d7ae08ee510cb87f289a5d9b21" translate="yes" xml:space="preserve">
          <source>Customize the main hot update filename. &lt;code&gt;[hash]&lt;/code&gt; is the only available placeholder.</source>
          <target state="translated">Customize the main hot update filename. &lt;code&gt;[hash]&lt;/code&gt; is the only available placeholder.</target>
        </trans-unit>
        <trans-unit id="4c8eadc99d2f8bde78fb161aaa64f4a4e0ee7afe" translate="yes" xml:space="preserve">
          <source>Customize the main hot update filename. See &lt;a href=&quot;#output-filename&quot;&gt;&lt;code&gt;output.filename&lt;/code&gt;&lt;/a&gt; option for details on the possible values.</source>
          <target state="translated">기본 핫 업데이트 파일 이름을 사용자 정의하십시오. 가능한 값에 대한 자세한 내용 은 &lt;a href=&quot;#output-filename&quot;&gt; &lt;code&gt;output.filename&lt;/code&gt; &lt;/a&gt; 옵션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4eab89a217a96fc1b34849fdacf58ef4c1bb8cb3" translate="yes" xml:space="preserve">
          <source>Customize the names used in each source map's &lt;code&gt;sources&lt;/code&gt; array. This can be done by passing a template string or function. For example, when using &lt;code&gt;devtool: 'eval'&lt;/code&gt;, this is the default:</source>
          <target state="translated">각 소스 맵의 &lt;code&gt;sources&lt;/code&gt; 배열 에서 사용되는 이름을 사용자 정의하십시오 . 템플릿 문자열이나 함수를 전달하면됩니다. 예를 들어 &lt;code&gt;devtool: 'eval'&lt;/code&gt; 경우 이것이 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="a003011bfd12a9900d690440d915216c188784bf" translate="yes" xml:space="preserve">
          <source>Customize the names used in each source map's &lt;code&gt;sources&lt;/code&gt; array. This can be done by passing a template string or function. For example, when using &lt;code&gt;devtool: 'eval'&lt;/code&gt;.</source>
          <target state="translated">Customize the names used in each source map's &lt;code&gt;sources&lt;/code&gt; array. This can be done by passing a template string or function. For example, when using &lt;code&gt;devtool: 'eval'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bbf0ff6847bb346fc0637f6c861a6eb4fc1bf905" translate="yes" xml:space="preserve">
          <source>Customized Loader</source>
          <target state="translated">맞춤형 로더</target>
        </trans-unit>
        <trans-unit id="5b55295859f198ba974e588341986ed175248c53" translate="yes" xml:space="preserve">
          <source>Dashes in class names will be camelized, the original class name will be removed from the locals</source>
          <target state="translated">Dashes in class names will be camelized, the original class name will be removed from the locals</target>
        </trans-unit>
        <trans-unit id="b34abb303c987e3d3fd5d19957aa91f2ab641c54" translate="yes" xml:space="preserve">
          <source>Database Integration</source>
          <target state="translated">Database Integration</target>
        </trans-unit>
        <trans-unit id="c986396b68941eb10ad6ff5c9bb2b1fa314bcc04" translate="yes" xml:space="preserve">
          <source>Debug Options</source>
          <target state="translated">디버그 옵션</target>
        </trans-unit>
        <trans-unit id="80df87c6227bd3f89ab08f7284e2d6c25f3dd63b" translate="yes" xml:space="preserve">
          <source>Debugging Optimization Bailouts</source>
          <target state="translated">최적화 Bailouts 디버깅</target>
        </trans-unit>
        <trans-unit id="3d0eaf72c69b7eb81365ae9ffd1f7924d71e78f6" translate="yes" xml:space="preserve">
          <source>Decorates the module template by wrapping each module in a &lt;code&gt;eval&lt;/code&gt; annotated with &lt;code&gt;// @sourceURL&lt;/code&gt;.</source>
          <target state="translated">A의 각 모듈을 배치함으로써 모듈 템플릿 장식 &lt;code&gt;eval&lt;/code&gt; 주석과 &lt;code&gt;// @sourceURL&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d2f368cead2528a3444f22b6e4f3ee3e7fd688c2" translate="yes" xml:space="preserve">
          <source>Decorates the templates by generating a SourceMap for each chunk.</source>
          <target state="translated">각 청크에 대한 SourceMap을 생성하여 템플리트를 장식합니다.</target>
        </trans-unit>
        <trans-unit id="c849cd65bfede029da481524096bf18cb3e26d85" translate="yes" xml:space="preserve">
          <source>Decrease the total size of the compilation to increase build performance. Try to keep chunks small.</source>
          <target state="translated">컴파일 성능을 높이려면 컴파일의 전체 크기를 줄이십시오. 덩어리를 작게 유지하십시오.</target>
        </trans-unit>
        <trans-unit id="caa29382a8f4fa6fa0d75fbe4113f661882d15ce" translate="yes" xml:space="preserve">
          <source>DedupePlugin</source>
          <target state="translated">DedupePlugin</target>
        </trans-unit>
        <trans-unit id="6037f7cae1d39cb0249dc36931fa858570fad32d" translate="yes" xml:space="preserve">
          <source>Deduplicates modules and adds runtime code.</source>
          <target state="translated">모듈을 중복 제거하고 런타임 코드를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="808d7dca8a74d84af27a2d6602c3d786de45fe1e" translate="yes" xml:space="preserve">
          <source>Default</source>
          <target state="translated">Default</target>
        </trans-unit>
        <trans-unit id="bbeba50a8a05a0f01cd4666262dd3615968b228d" translate="yes" xml:space="preserve">
          <source>Default Configs</source>
          <target state="translated">기본 구성</target>
        </trans-unit>
        <trans-unit id="126097de079d9f6996cd0f5be45bec0859a15c36" translate="yes" xml:space="preserve">
          <source>Default Configurations</source>
          <target state="translated">기본 구성</target>
        </trans-unit>
        <trans-unit id="7df3641b6238b0a13072aec9c1c721a92c512cd6" translate="yes" xml:space="preserve">
          <source>Default cache keys:</source>
          <target state="translated">기본 캐시 키 :</target>
        </trans-unit>
        <trans-unit id="1db72e6a4b72e54bf9e63c8770fc4059daac1145" translate="yes" xml:space="preserve">
          <source>Default configuration was chosen to fit web performance best practices but the optimum strategy for your project might defer depending on the nature of it.</source>
          <target state="translated">기본 성능 구성은 웹 성능 모범 사례에 맞도록 선택되었지만 프로젝트의 특성에 따라 프로젝트에 대한 최적의 전략이 연기 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ebd3d869a355a884a2d2b5fd245d202b8fab7dd2" translate="yes" xml:space="preserve">
          <source>Default is &lt;code&gt;false&lt;/code&gt;: each entry chunk embeds runtime.</source>
          <target state="translated">기본값은 &lt;code&gt;false&lt;/code&gt; : 각 항목 청크에 런타임이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="c2580d5b35883bf38b519d50b0c81313e0cfba9e" translate="yes" xml:space="preserve">
          <source>Default keys:</source>
          <target state="translated">기본 키 :</target>
        </trans-unit>
        <trans-unit id="40ed84245d5de2526161e8e266ae009ed79a0cea" translate="yes" xml:space="preserve">
          <source>Default resolver options can be modified by &lt;a href=&quot;../configuration/resolve#resolvebydependency&quot;&gt;&lt;code&gt;resolve.byDependency&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">기본 해결 프로그램 옵션은 &lt;a href=&quot;../configuration/resolve#resolvebydependency&quot;&gt; &lt;code&gt;resolve.byDependency&lt;/code&gt; &lt;/a&gt; 로 수정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a30f74d73d67a88a2c918ad834da4e203d5c0f48" translate="yes" xml:space="preserve">
          <source>Default string is null. You could provide a string such as &lt;code&gt;=== Build done ===&lt;/code&gt;</source>
          <target state="translated">기본 문자열은 null입니다. &lt;code&gt;=== Build done ===&lt;/code&gt; 과 같은 문자열을 제공 할 수 있습니다. 빌드 완료 ===</target>
        </trans-unit>
        <trans-unit id="bdffe654f8554300a98d2acefcbbf1d894339b2b" translate="yes" xml:space="preserve">
          <source>Default value</source>
          <target state="translated">기본값</target>
        </trans-unit>
        <trans-unit id="91b551b6ca424158d207e06fe6da9b7f26490940" translate="yes" xml:space="preserve">
          <source>Default values of &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; behave differently. Use &lt;code&gt;undefined&lt;/code&gt; for variables that &lt;em&gt;must&lt;/em&gt; be provided during bundling, or &lt;code&gt;null&lt;/code&gt; if they are optional.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 및 &lt;code&gt;undefined&lt;/code&gt; 기본값은 다르게 작동합니다. 번들링 중에 제공 &lt;em&gt;해야하는&lt;/em&gt; 변수 에는 &lt;code&gt;undefined&lt;/code&gt; 를 사용 하고 선택 사항 인 경우 &lt;code&gt;null&lt;/code&gt; 을 사용 합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="29174d0b2e09683e01266cc9ca282ecb2a3452f2" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;&quot;mock&quot;&lt;/code&gt;</source>
          <target state="translated">기본값 : &lt;code&gt;&quot;mock&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d3f4fdc19015bd4bddba8a290839328edc7a7d79" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;&quot;var&quot;&lt;/code&gt;</source>
          <target state="translated">기본값 : &lt;code&gt;&quot;var&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="41aafd73dae167ec554561f6224247e83fa484a1" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'**/*.(s(c|a)ss|css)'&lt;/code&gt;</source>
          <target state="translated">Default: &lt;code&gt;'**/*.(s(c|a)ss|css)'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6432b51cf711c18e34c62ea8ff7aec20bc8c038f" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'js'&lt;/code&gt;</source>
          <target state="translated">Default: &lt;code&gt;'js'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="04271cf84315cc431d0557f156439b002a372f7d" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'node_modules'&lt;/code&gt;</source>
          <target state="translated">Default: &lt;code&gt;'node_modules'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2ca6879a70f8db6879f13077f526c47618645766" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'string'&lt;/code&gt;</source>
          <target state="translated">Default: &lt;code&gt;'string'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7999f256aa511ef6c781db0e6c10c6e38f0f8b69" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'stylish'&lt;/code&gt;</source>
          <target state="translated">Default: &lt;code&gt;'stylish'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="011109a94964b6c24000b81a9a57c20cdb93224a" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;_entry_return_&lt;/code&gt;</source>
          <target state="translated">기본값 : &lt;code&gt;_entry_return_&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="af46df7368a4f0beeed1368e50df4aeeadd2167a" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;compiler.context&lt;/code&gt;</source>
          <target state="translated">Default: &lt;code&gt;compiler.context&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3108f2ea590d53db1bb4c08edc648763b945c91d" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;eslint&lt;/code&gt;</source>
          <target state="translated">Default: &lt;code&gt;eslint&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="614188609a5c964071cad1f8bd6a9a468d7e820f" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">기본값 : &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="72af77c264a4ee8b4a40880a27db11fcd236d73d" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;null&lt;/code&gt;</source>
          <target state="translated">기본값 : &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bcc4a7e37a6467a3c90b4f938eef86ff2013367c" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;stylelint&lt;/code&gt;</source>
          <target state="translated">Default: &lt;code&gt;stylelint&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4d0b83b26a1706be41ebbd280d1bc7d8f1a895a8" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">기본값 : &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="440b4c5aa1e906e434fd52447e734719e939c93d" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">기본값 : &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="428819bf9e83cebda50efafb08cd2534c1583949" translate="yes" xml:space="preserve">
          <source>Defaults</source>
          <target state="translated">Defaults</target>
        </trans-unit>
        <trans-unit id="7844567a8e401308f5155a70f0ac070c4ffc6ae9" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;'async-node'&lt;/code&gt; if &lt;a href=&quot;target&quot;&gt;&lt;code&gt;target&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;'node'&lt;/code&gt;, &lt;code&gt;'async-node'&lt;/code&gt;, &lt;code&gt;'electron-main'&lt;/code&gt; or &lt;code&gt;'electron-preload'&lt;/code&gt;.</source>
          <target state="translated">Defaults to &lt;code&gt;'async-node'&lt;/code&gt; if &lt;a href=&quot;target&quot;&gt; &lt;code&gt;target&lt;/code&gt; &lt;/a&gt; is set to &lt;code&gt;'node'&lt;/code&gt; , &lt;code&gt;'async-node'&lt;/code&gt; , &lt;code&gt;'electron-main'&lt;/code&gt; or &lt;code&gt;'electron-preload'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9c9a59d49b680916a600962d0cfd7247c7230bf3" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;'fetch'&lt;/code&gt; if &lt;a href=&quot;target&quot;&gt;&lt;code&gt;target&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;'web'&lt;/code&gt;, &lt;code&gt;'webworker'&lt;/code&gt;, &lt;code&gt;'electron-renderer'&lt;/code&gt; or &lt;code&gt;'node-webkit'&lt;/code&gt;.</source>
          <target state="translated">Defaults to &lt;code&gt;'fetch'&lt;/code&gt; if &lt;a href=&quot;target&quot;&gt; &lt;code&gt;target&lt;/code&gt; &lt;/a&gt; is set to &lt;code&gt;'web'&lt;/code&gt; , &lt;code&gt;'webworker'&lt;/code&gt; , &lt;code&gt;'electron-renderer'&lt;/code&gt; or &lt;code&gt;'node-webkit'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5ac98f124914bba032f0e9e425350dc0c1d83f17" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;webpack/lib&lt;/code&gt; to get all dependencies of webpack.</source>
          <target state="translated">Defaults to &lt;code&gt;webpack/lib&lt;/code&gt; to get all dependencies of webpack.</target>
        </trans-unit>
        <trans-unit id="4b35d63a3d4db72ca17b6035d81afbacc478604e" translate="yes" xml:space="preserve">
          <source>Defaults: Example 1</source>
          <target state="translated">기본값 : 예 1</target>
        </trans-unit>
        <trans-unit id="b677e3d52a88827883cc99ad9a327a886d441ccb" translate="yes" xml:space="preserve">
          <source>Defaults: Example 2</source>
          <target state="translated">기본값 : 예 2</target>
        </trans-unit>
        <trans-unit id="360e1bc30e53b40d4a846fa609f8efe30ef7465d" translate="yes" xml:space="preserve">
          <source>Define &lt;a href=&quot;../configuration/devtool&quot;&gt;source map type&lt;/a&gt; for the bundled resources</source>
          <target state="translated">번들 자원에 대한 &lt;a href=&quot;../configuration/devtool&quot;&gt;소스 맵 유형&lt;/a&gt; 정의</target>
        </trans-unit>
        <trans-unit id="a2bbc1f6966718fbb58279c920ea20d96e5e2e78" translate="yes" xml:space="preserve">
          <source>Define any free variable, see &lt;a href=&quot;../guides/shimming&quot;&gt;shimming&lt;/a&gt;</source>
          <target state="translated">자유 변수 정의, &lt;a href=&quot;../guides/shimming&quot;&gt;shimming&lt;/a&gt; 참조</target>
        </trans-unit>
        <trans-unit id="968b857381061788cb55c83ca7e3c4534c2a54cf" translate="yes" xml:space="preserve">
          <source>Define constants for identifier.</source>
          <target state="translated">식별자 상수를 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="006655b8dc3de0c97da3c9f2d23d803ec0a166ae" translate="yes" xml:space="preserve">
          <source>Define custom variable</source>
          <target state="translated">Define custom variable</target>
        </trans-unit>
        <trans-unit id="83aca61196e55cfac8898e588878386369275c06" translate="yes" xml:space="preserve">
          <source>DefinePlugin</source>
          <target state="translated">DefinePlugin</target>
        </trans-unit>
        <trans-unit id="ead88ae0c42890aadcdae1c734788f77771f2790" translate="yes" xml:space="preserve">
          <source>Defines &lt;code&gt;module.hot&lt;/code&gt; as &lt;code&gt;false&lt;/code&gt; to remove hot module replacement code.</source>
          <target state="translated">핫 모듈 교체 코드를 제거하려면 &lt;code&gt;module.hot&lt;/code&gt; 을 &lt;code&gt;false&lt;/code&gt; 로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="b04e88c33c975492766f1e28aefd7f299254d7d3" translate="yes" xml:space="preserve">
          <source>Defines a &lt;code&gt;{RegExp}&lt;/code&gt; to match some parts of the file path. These capture groups can be reused in the name property using &lt;code&gt;[N]&lt;/code&gt; placeholder. Note that &lt;code&gt;[0]&lt;/code&gt; will be replaced by the entire path of the file, whereas &lt;code&gt;[1]&lt;/code&gt; will contain the first capturing parenthesis of your &lt;code&gt;{RegExp}&lt;/code&gt; and so on...</source>
          <target state="translated">파일 경로의 일부와 일치하도록 &lt;code&gt;{RegExp}&lt;/code&gt; 를 정의합니다 . 이러한 캡처 그룹은 &lt;code&gt;[N]&lt;/code&gt; 자리 표시자를 사용하여 이름 속성에서 재사용 할 수 있습니다 . 참고 &lt;code&gt;[0]&lt;/code&gt; 반면, 파일의 전체 경로에 의해 대체 될 것이다 &lt;code&gt;[1]&lt;/code&gt; 가 최초의 캡쳐하여 괄호 포함 &lt;code&gt;{RegExp}&lt;/code&gt; 등등과 ...</target>
        </trans-unit>
        <trans-unit id="b51931e4182e64dc1a6f935ed84625f83e4656f4" translate="yes" xml:space="preserve">
          <source>Defines the mode to pass to webpack</source>
          <target state="translated">Defines the mode to pass to webpack</target>
        </trans-unit>
        <trans-unit id="935ceeb111b75412bc9b75822b890c2f58232283" translate="yes" xml:space="preserve">
          <source>Defines the value that will be returned when a consumer makes a &lt;code&gt;require&lt;/code&gt; call to the module (defaults to a new object).</source>
          <target state="translated">소비자가 모듈을 &lt;code&gt;require&lt;/code&gt; 때 반환 될 값을 정의합니다 (기본값은 새 객체).</target>
        </trans-unit>
        <trans-unit id="5793d12434d9f22ed375eb009d2501c750de4cd3" translate="yes" xml:space="preserve">
          <source>Defining &lt;code&gt;configFile&lt;/code&gt; or using &lt;code&gt;eslint -c path/.eslintrc&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;configFile&lt;/code&gt; 정의 또는 &lt;code&gt;eslint -c path/.eslintrc&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="e52c854d5631eec7468ba4727b4c77eb745f2965" translate="yes" xml:space="preserve">
          <source>Demo</source>
          <target state="translated">Demo</target>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">Dependencies</target>
        </trans-unit>
        <trans-unit id="2830a0838ee99c8191f302d01fac9f07fccb555a" translate="yes" xml:space="preserve">
          <source>Dependencies can also be added using &lt;a href=&quot;../api/loaders#thisadddependency&quot;&gt;&lt;code&gt;loaderContext.addDependency(file: string)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Dependencies can also be added using &lt;a href=&quot;../api/loaders#thisadddependency&quot;&gt; &lt;code&gt;loaderContext.addDependency(file: string)&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="3e87fc989e1193a3d6ca244b02919b6518cbc627" translate="yes" xml:space="preserve">
          <source>Dependency Graph</source>
          <target state="translated">의존성 그래프</target>
        </trans-unit>
        <trans-unit id="db47f0c33969776096cb6a17a01879d310cd54b7" translate="yes" xml:space="preserve">
          <source>Dependency Management</source>
          <target state="translated">의존성 관리</target>
        </trans-unit>
        <trans-unit id="ef7b1d20b0a5a77b56644a7ce10eab64d0d6ebaf" translate="yes" xml:space="preserve">
          <source>Depending on how you are using webpack, there are multiple ways to use plugins.</source>
          <target state="translated">웹팩 사용 방법에 따라 플러그인을 사용하는 여러 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5999df43344c6ddfe854c7a8b9818ee49ecabeef" translate="yes" xml:space="preserve">
          <source>Depending on how you configure the HtmlWebpackPlugin you may encounter conflicts with the polymer-webpack-loader.</source>
          <target state="translated">HtmlWebpackPlugin 구성 방법에 따라 polymer-webpack-loader와 충돌이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f16fdb1a04497dc25830b3115af9386478ec804" translate="yes" xml:space="preserve">
          <source>Depending on need, any one of these built-in resolver used by the &lt;code&gt;compiler&lt;/code&gt; can be customized via plugins as such:</source>
          <target state="translated">필요에 따라 &lt;code&gt;compiler&lt;/code&gt; 에서 사용하는 내장 리졸버 중 하나 를 플러그인을 통해 다음과 같이 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d78e8c363ec60b06f9be963cceced432df0a527" translate="yes" xml:space="preserve">
          <source>Depending on need, any one of these built-in resolvers, that are used by the &lt;code&gt;compiler&lt;/code&gt;, can be customized via plugins:</source>
          <target state="translated">Depending on need, any one of these built-in resolvers, that are used by the &lt;code&gt;compiler&lt;/code&gt; , can be customized via plugins:</target>
        </trans-unit>
        <trans-unit id="90535ea4c0d0a5eafcef9944eced8369b083180f" translate="yes" xml:space="preserve">
          <source>Depending on the &lt;a href=&quot;../configuration/target&quot;&gt;&lt;code&gt;target&lt;/code&gt;&lt;/a&gt; in your configuration, webpack would compile the above code into a different result:</source>
          <target state="translated">Depending on the &lt;a href=&quot;../configuration/target&quot;&gt; &lt;code&gt;target&lt;/code&gt; &lt;/a&gt; in your configuration, webpack would compile the above code into a different result:</target>
        </trans-unit>
        <trans-unit id="726b6fe332ddcbb745c1faaf56842b8bb2e9cb7f" translate="yes" xml:space="preserve">
          <source>Depending on the config option &lt;code&gt;node.__dirname&lt;/code&gt;:</source>
          <target state="translated">구성 옵션 &lt;code&gt;node.__dirname&lt;/code&gt; 에 따라 :</target>
        </trans-unit>
        <trans-unit id="75d8e934e6e8acddf4fac4834e7412039f96531b" translate="yes" xml:space="preserve">
          <source>Depending on the config option &lt;code&gt;node.__filename&lt;/code&gt;:</source>
          <target state="translated">구성 옵션 &lt;code&gt;node.__filename&lt;/code&gt; 에 따라 :</target>
        </trans-unit>
        <trans-unit id="e853f5c0807aabeff40e9fb4abd9262ef18f3433" translate="yes" xml:space="preserve">
          <source>Depending on the configuration option &lt;code&gt;node.__dirname&lt;/code&gt;:</source>
          <target state="translated">Depending on the configuration option &lt;code&gt;node.__dirname&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="607e79a3f1f83561bca75c40d309c1d97bd260a5" translate="yes" xml:space="preserve">
          <source>Depending on the configuration option &lt;code&gt;node.__filename&lt;/code&gt;:</source>
          <target state="translated">Depending on the configuration option &lt;code&gt;node.__filename&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="09d2b7408c6cb8e4513a527e61456188783a4ddb" translate="yes" xml:space="preserve">
          <source>Depending on the hook type, &lt;code&gt;tapAsync&lt;/code&gt; and &lt;code&gt;tapPromise&lt;/code&gt; may also be available.</source>
          <target state="translated">후크 유형에 따라 &lt;code&gt;tapAsync&lt;/code&gt; 및 &lt;code&gt;tapPromise&lt;/code&gt; 를 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9071f79345179a6e8f22930d2be8ed59b6cb439f" translate="yes" xml:space="preserve">
          <source>Depending on the hooks used and &lt;code&gt;tap&lt;/code&gt; methods applied, plugins can function in a different number of ways. The way this works is closely related to the &lt;a href=&quot;https://github.com/webpack/tapable#tapable&quot;&gt;hooks&lt;/a&gt; provided by &lt;code&gt;Tapable&lt;/code&gt;. The &lt;a href=&quot;compiler-hooks#hooks&quot;&gt;compiler hooks&lt;/a&gt; each note the underlying &lt;code&gt;Tapable&lt;/code&gt; hook indicating which &lt;code&gt;tap&lt;/code&gt; methods are available.</source>
          <target state="translated">사용 된 후크 및 적용된 &lt;code&gt;tap&lt;/code&gt; 방법에 따라 플러그인은 다른 방식으로 작동 할 수 있습니다. 이것이 작동하는 방식은 &lt;code&gt;Tapable&lt;/code&gt; 이 제공 하는 &lt;a href=&quot;https://github.com/webpack/tapable#tapable&quot;&gt;후크&lt;/a&gt; 와 밀접한 관련이 있습니다 . &lt;a href=&quot;compiler-hooks#hooks&quot;&gt;컴파일러 후크&lt;/a&gt; 각 참고 기초 &lt;code&gt;Tapable&lt;/code&gt; 있는지를 나타내는 후크 &lt;code&gt;tap&lt;/code&gt; 방법을 사용할 수있다.</target>
        </trans-unit>
        <trans-unit id="f8fab0c35f733fa049e294e251ca0f829ee6df31" translate="yes" xml:space="preserve">
          <source>Depending on the package intention maybe something else makes sense and in this case the patterns should be adopted to that. Example: For a command line tool a browser-like future and fallback doesn't make a lot of sense, and in this case node.js-like environments and fallbacks should be used instead.</source>
          <target state="translated">Depending on the package intention maybe something else makes sense and in this case the patterns should be adopted to that. Example: For a command line tool a browser-like future and fallback doesn't make a lot of sense, and in this case node.js-like environments and fallbacks should be used instead.</target>
        </trans-unit>
        <trans-unit id="34a1ab04e3b77ce34e1df069bd72f7850490651c" translate="yes" xml:space="preserve">
          <source>Deprecated context properties</source>
          <target state="translated">더 이상 사용되지 않는 컨텍스트 속성</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="e4ccb49268258a21b76e66149367c7768217b54e" translate="yes" xml:space="preserve">
          <source>Description of string values can be found in the documentation below.</source>
          <target state="translated">Description of string values can be found in the documentation below.</target>
        </trans-unit>
        <trans-unit id="09b2420103c95420f24ee7c05855fd55595b11e6" translate="yes" xml:space="preserve">
          <source>Descriptor syntax might be used to pass additional options to an entry point.</source>
          <target state="translated">Descriptor syntax might be used to pass additional options to an entry point.</target>
        </trans-unit>
        <trans-unit id="cfe4cbab92c156ab95e667d5c6528a2a7bdcc724" translate="yes" xml:space="preserve">
          <source>Descriptor syntax was used here to pass &lt;code&gt;filename&lt;/code&gt;-option to the specific entry points.</source>
          <target state="translated">Descriptor syntax was used here to pass &lt;code&gt;filename&lt;/code&gt; -option to the specific entry points.</target>
        </trans-unit>
        <trans-unit id="739a063990551ecc759af8efb51aae87f2023c07" translate="yes" xml:space="preserve">
          <source>Detailed Explanation of a Simple Module Bundler</source>
          <target state="translated">간단한 모듈 번 들러에 대한 자세한 설명</target>
        </trans-unit>
        <trans-unit id="f3d88b7b077b15cf2ba80312453d210551eecfbd" translate="yes" xml:space="preserve">
          <source>Determinate ES-features that may be used to generate a runtime-code.</source>
          <target state="translated">Determinate ES-features that may be used to generate a runtime-code.</target>
        </trans-unit>
        <trans-unit id="db29f73c9464b84a52981cda1c7bbf398e06095d" translate="yes" xml:space="preserve">
          <source>Determinate what is &lt;code&gt;to&lt;/code&gt; option - directory, file or template.</source>
          <target state="translated">Determinate what is &lt;code&gt;to&lt;/code&gt; option - directory, file or template.</target>
        </trans-unit>
        <trans-unit id="54346dc476d7744741c005c53e2d16d897fa5b6b" translate="yes" xml:space="preserve">
          <source>Determinate what is &lt;code&gt;to&lt;/code&gt; option - directory, file or template. Sometimes it is hard to say what is &lt;code&gt;to&lt;/code&gt;, example &lt;code&gt;path/to/dir-with.ext&lt;/code&gt;. If you want to copy files in directory you need use &lt;code&gt;dir&lt;/code&gt; option. We try to automatically determine the &lt;code&gt;type&lt;/code&gt; so you most likely do not need this option.</source>
          <target state="translated">Determinate what is &lt;code&gt;to&lt;/code&gt; option - directory, file or template. Sometimes it is hard to say what is &lt;code&gt;to&lt;/code&gt; , example &lt;code&gt;path/to/dir-with.ext&lt;/code&gt; . If you want to copy files in directory you need use &lt;code&gt;dir&lt;/code&gt; option. We try to automatically determine the &lt;code&gt;type&lt;/code&gt; so you most likely do not need this option.</target>
        </trans-unit>
        <trans-unit id="3021d37eec22538161a2f49e761c735872d91d87" translate="yes" xml:space="preserve">
          <source>DevServer</source>
          <target state="translated">DevServer</target>
        </trans-unit>
        <trans-unit id="4c17aadf5117487aab7bc50cbf056caf3977cc31" translate="yes" xml:space="preserve">
          <source>Development</source>
          <target state="translated">Development</target>
        </trans-unit>
        <trans-unit id="33ab938eb9f180caddf9e238c5584bbbca95bce7" translate="yes" xml:space="preserve">
          <source>Development - Vagrant</source>
          <target state="translated">개발-방랑자</target>
        </trans-unit>
        <trans-unit id="42a921dc8bf7915b4ed72f9233972474b8f2e9b7" translate="yes" xml:space="preserve">
          <source>Development: Vagrant</source>
          <target state="translated">개발 : 방랑자</target>
        </trans-unit>
        <trans-unit id="419d26b8118c00ffdf42ba0d5fe85c50956bcc4a" translate="yes" xml:space="preserve">
          <source>Devtool</source>
          <target state="translated">Devtool</target>
        </trans-unit>
        <trans-unit id="cc2eb4cbd725da31eb4245fdcd10705795f15385" translate="yes" xml:space="preserve">
          <source>Devtooling should be included.</source>
          <target state="translated">Devtooling should be included.</target>
        </trans-unit>
        <trans-unit id="29dc2a1ec96d9045ea03542dbefbb29112fc9a43" translate="yes" xml:space="preserve">
          <source>Did you know: The example seen above is extremely similar to the &lt;a href=&quot;https://github.com/webpack/webpack/blob/e7087ffeda7fa37dfe2ca70b5593c6e899629a2c/bin/webpack.js#L290-L292&quot;&gt;webpack runtime itself!&lt;/a&gt; There are lots of great usage examples hiding in the &lt;a href=&quot;https://github.com/webpack/webpack&quot;&gt;webpack source code&lt;/a&gt; that you can apply to your own configurations and scripts!</source>
          <target state="translated">알고 계십니까 : 위의 예는 &lt;a href=&quot;https://github.com/webpack/webpack/blob/e7087ffeda7fa37dfe2ca70b5593c6e899629a2c/bin/webpack.js#L290-L292&quot;&gt;웹팩 런타임 자체&lt;/a&gt; 와 매우 유사 합니다! &lt;a href=&quot;https://github.com/webpack/webpack&quot;&gt;웹팩 소스 코드&lt;/a&gt; 에는 자신의 구성 및 스크립트에 적용 할 수 있는 유용한 사용 예제가 많이 있습니다!</target>
        </trans-unit>
        <trans-unit id="95a3af1b4b03701cb81e15895ce5ae5e22791bd8" translate="yes" xml:space="preserve">
          <source>Differences With stylelint-loader</source>
          <target state="translated">stylelint-loader와의 차이점</target>
        </trans-unit>
        <trans-unit id="cadc7c6c2c364dcca986d707d9c582654a8aea81" translate="yes" xml:space="preserve">
          <source>Different variants &lt;code&gt;from&lt;/code&gt; (&lt;code&gt;glob&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt; or &lt;code&gt;dir&lt;/code&gt;).</source>
          <target state="translated">Different variants &lt;code&gt;from&lt;/code&gt; ( &lt;code&gt;glob&lt;/code&gt; , &lt;code&gt;file&lt;/code&gt; or &lt;code&gt;dir&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="09f778373f9a162ac11eb89f0c4bca75881fc5e1" translate="yes" xml:space="preserve">
          <source>Disable AMD</source>
          <target state="translated">AMD 비활성화</target>
        </trans-unit>
        <trans-unit id="695f50e8e77720684afcb124d0dd18c6b76ce39a" translate="yes" xml:space="preserve">
          <source>Disable AMD Import Syntax</source>
          <target state="translated">Disable AMD Import Syntax</target>
        </trans-unit>
        <trans-unit id="f44e41ebd248de75c686f644d8da76138553d2ce" translate="yes" xml:space="preserve">
          <source>Disabled any color on the console</source>
          <target state="translated">Disabled any color on the console</target>
        </trans-unit>
        <trans-unit id="ebdea4f09f8c821463c0b8dd9d565d73b6bd4449" translate="yes" xml:space="preserve">
          <source>Disabled hot reloading if you have it enabled via your config</source>
          <target state="translated">Disabled hot reloading if you have it enabled via your config</target>
        </trans-unit>
        <trans-unit id="9091e43b8d14ec4689817d28b02de1eb61aafb40" translate="yes" xml:space="preserve">
          <source>Disables Hot Module Replacement</source>
          <target state="translated">Disables Hot Module Replacement</target>
        </trans-unit>
        <trans-unit id="3b00415962ace36cc956acd0bd2b31d7f5f87363" translate="yes" xml:space="preserve">
          <source>Disables any color on the console</source>
          <target state="translated">콘솔에서 모든 색상을 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="3b3ffdd853eef02c4a4fd1c9bd2f509fc733550a" translate="yes" xml:space="preserve">
          <source>Disables any compilation stats emitted by webpack</source>
          <target state="translated">Disables any compilation stats emitted by webpack</target>
        </trans-unit>
        <trans-unit id="10bf4b5b619c53b7b530773db6f241fde9db540b" translate="yes" xml:space="preserve">
          <source>Disables colors on console</source>
          <target state="translated">Disables colors on console</target>
        </trans-unit>
        <trans-unit id="c5f270d1d7264b0e868fd0ce8516a20c120b93fc" translate="yes" xml:space="preserve">
          <source>Disables hot reloading if you have it enabled via your config</source>
          <target state="translated">구성을 통해 활성화 한 경우 핫 리로딩을 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="96ee1f7f5883a5c48ba19b9c9436424e36406b5a" translate="yes" xml:space="preserve">
          <source>Disables order check (useful for CSS Modules!), &lt;code&gt;false&lt;/code&gt; by default</source>
          <target state="translated">순서 검사를 비활성화합니다 (CSS 모듈에 유용합니다). 기본적으로 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cc6efa9a3a73a510433046d78fc41a23a51213f5" translate="yes" xml:space="preserve">
          <source>Disables stats output</source>
          <target state="translated">Disables stats output</target>
        </trans-unit>
        <trans-unit id="900cbd2651f5e5793adb3bc53c04ed5e2f519671" translate="yes" xml:space="preserve">
          <source>Disables the plugin</source>
          <target state="translated">플러그인을 비활성화합니다</target>
        </trans-unit>
        <trans-unit id="55bf46b308054bf0c9d2e073221a3f3e29fe2343" translate="yes" xml:space="preserve">
          <source>Display Warnings</source>
          <target state="translated">디스플레이 경고</target>
        </trans-unit>
        <trans-unit id="98c5a80b7744fbc48514b1df33d5991eef2c7a6d" translate="yes" xml:space="preserve">
          <source>Display also cached assets in the output</source>
          <target state="translated">캐시 된 자산도 출력에 표시</target>
        </trans-unit>
        <trans-unit id="5317cbb2e60cae7cc5b34759eb2748c73e479d8e" translate="yes" xml:space="preserve">
          <source>Display also cached modules in the output</source>
          <target state="translated">캐시 된 모듈을 출력에 표시</target>
        </trans-unit>
        <trans-unit id="697a0cf0dcc297ebec8a0319970e9da1f6b10643" translate="yes" xml:space="preserve">
          <source>Display auxiliary assets in chunk groups.</source>
          <target state="translated">Display auxiliary assets in chunk groups.</target>
        </trans-unit>
        <trans-unit id="e34b5abfed2e775ed965263099af27aeb7585265" translate="yes" xml:space="preserve">
          <source>Display children of the chunk groups (e.g. prefetched, preloaded chunks and assets).</source>
          <target state="translated">Display children of the chunk groups (e.g. prefetched, preloaded chunks and assets).</target>
        </trans-unit>
        <trans-unit id="48d96d1d76802c9850df0f919529f6c20f4db4d9" translate="yes" xml:space="preserve">
          <source>Display chunks in the output</source>
          <target state="translated">출력에 청크 표시</target>
        </trans-unit>
        <trans-unit id="8c50d42f7940c3f7177e115e7392ec7ba4705737" translate="yes" xml:space="preserve">
          <source>Display custom text after build output</source>
          <target state="translated">빌드 출력 후 사용자 정의 텍스트 표시</target>
        </trans-unit>
        <trans-unit id="307ccb3fffe064d3b124cc8d745641a26f17d709" translate="yes" xml:space="preserve">
          <source>Display details about errors</source>
          <target state="translated">오류에 대한 세부 사항 표시</target>
        </trans-unit>
        <trans-unit id="3b14a691a3a0e32a6c963e18efea49bf14d0793c" translate="yes" xml:space="preserve">
          <source>Display distance from entry point for each module</source>
          <target state="translated">각 모듈의 진입 점에서 표시 거리</target>
        </trans-unit>
        <trans-unit id="dd11af0bd5ceacae1dc179217c4ee8ecab1f0c60" translate="yes" xml:space="preserve">
          <source>Display entry points in the output</source>
          <target state="translated">출력에 진입 점 표시</target>
        </trans-unit>
        <trans-unit id="5fd5d5b41105cc5b90197f45d8ec7822054e2e34" translate="yes" xml:space="preserve">
          <source>Display even excluded modules in the output</source>
          <target state="translated">출력에서 제외 된 모듈도 표시</target>
        </trans-unit>
        <trans-unit id="8e166cb5b2606fff0cf6a1e121bff5815a0ace58" translate="yes" xml:space="preserve">
          <source>Display help for commands and options.</source>
          <target state="translated">명령 및 옵션에 대한 도움말을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="d107b9fb099d0dd874a4ddb46bd1cc3bb0d3fc37" translate="yes" xml:space="preserve">
          <source>Display information about exports provided from modules</source>
          <target state="translated">모듈에서 제공된 내보내기에 대한 정보를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="117a6853cbf92f86d97f31b4d1757f778d362108" translate="yes" xml:space="preserve">
          <source>Display information about used exports in modules (Tree Shaking)</source>
          <target state="translated">모듈에서 사용한 내보내기에 대한 정보 표시 (트리 쉐이킹)</target>
        </trans-unit>
        <trans-unit id="121f425543e820e9036ed4519b5c1de68c64c610" translate="yes" xml:space="preserve">
          <source>Display origins of chunks in the output</source>
          <target state="translated">출력에서 청크의 원점 표시</target>
        </trans-unit>
        <trans-unit id="6ca5b6fad8a0d1aaa73aefcb9dd815297a589921" translate="yes" xml:space="preserve">
          <source>Display reasons about module inclusion in the output</source>
          <target state="translated">출력에 모듈 포함에 대한 표시 이유</target>
        </trans-unit>
        <trans-unit id="74666863df8a53feaa87be9e33553f6690fce069" translate="yes" xml:space="preserve">
          <source>DllEntryPlugin source</source>
          <target state="translated">DllEntryPlugin 소스</target>
        </trans-unit>
        <trans-unit id="8c98fe10d90a56dc72985fa79c88a199118b650b" translate="yes" xml:space="preserve">
          <source>DllModuleFactory source</source>
          <target state="translated">DllModuleFactory 소스</target>
        </trans-unit>
        <trans-unit id="904c747ab699751e0badad99e2b4aacbd1ef73f2" translate="yes" xml:space="preserve">
          <source>DllPlugin</source>
          <target state="translated">DllPlugin</target>
        </trans-unit>
        <trans-unit id="9357790fdf94f0656c2848d9499b4500145153dc" translate="yes" xml:space="preserve">
          <source>DllPlugin creation test</source>
          <target state="translated">DllPlugin 생성 테스트</target>
        </trans-unit>
        <trans-unit id="646e3454a2f09cdbe606166cf553b431804bd527" translate="yes" xml:space="preserve">
          <source>DllPlugin source</source>
          <target state="translated">DllPlugin 소스</target>
        </trans-unit>
        <trans-unit id="934254bbc49dff0ad1a7f192a33b5a592b6dff72" translate="yes" xml:space="preserve">
          <source>DllPlugin without scope test</source>
          <target state="translated">범위 테스트가없는 DllPlugin</target>
        </trans-unit>
        <trans-unit id="7a726aa395a86a0058180552716bb43994919e03" translate="yes" xml:space="preserve">
          <source>DllReferencePlugin source</source>
          <target state="translated">DllReferencePlugin 소스</target>
        </trans-unit>
        <trans-unit id="5a98398c554d7e9bdf48c4ff00b34845a00a0ffe" translate="yes" xml:space="preserve">
          <source>DllReferencePlugin use Dll test</source>
          <target state="translated">DllReferencePlugin 사용 Dll 테스트</target>
        </trans-unit>
        <trans-unit id="589088b182d47730f01ee66d5641771f0079d1da" translate="yes" xml:space="preserve">
          <source>Dlls</source>
          <target state="translated">Dlls</target>
        </trans-unit>
        <trans-unit id="092bfc3a782169c82c42ac5c03f154adf2a82c18" translate="yes" xml:space="preserve">
          <source>Do not compile untrusted code with webpack. It could lead to execution of malicious code on your computer, remote servers, or in the Web browsers of the end users of your application.</source>
          <target state="translated">Do not compile untrusted code with webpack. It could lead to execution of malicious code on your computer, remote servers, or in the Web browsers of the end users of your application.</target>
        </trans-unit>
        <trans-unit id="76775204fb0bf761e994c324a33aed4d4f8ed191" translate="yes" xml:space="preserve">
          <source>Do not generate source maps</source>
          <target state="translated">소스 맵을 생성하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="e294287a21c70bc68d3c7af5fd971ae4d17243fc" translate="yes" xml:space="preserve">
          <source>Do not get caught in an &lt;code&gt;invalidate&lt;/code&gt; loop, by calling &lt;code&gt;invalidate&lt;/code&gt; again and again. This will result in stack overflow and HMR entering the &lt;code&gt;fail&lt;/code&gt; state.</source>
          <target state="translated">Do not get caught in an &lt;code&gt;invalidate&lt;/code&gt; loop, by calling &lt;code&gt;invalidate&lt;/code&gt; again and again. This will result in stack overflow and HMR entering the &lt;code&gt;fail&lt;/code&gt; state.</target>
        </trans-unit>
        <trans-unit id="94e1296c4e597c08c60bf4c7204c04ee3b02a396" translate="yes" xml:space="preserve">
          <source>Do not stop watching when stdin stream has ended</source>
          <target state="translated">stdin 스트림이 끝났을 때 시청을 중단하지 마십시오</target>
        </trans-unit>
        <trans-unit id="43901672c472a6cd7d574e838758a27c20cb6a55" translate="yes" xml:space="preserve">
          <source>Do not watch for file changes</source>
          <target state="translated">파일 변경을 주시하지 마십시오</target>
        </trans-unit>
        <trans-unit id="c6d8ef0e2f3fcd12b1eef5c0c0a8e8e83a658ef6" translate="yes" xml:space="preserve">
          <source>Do you want a generic scaffold that could be used by a wide variety of applications and projects?</source>
          <target state="translated">Do you want a generic scaffold that could be used by a wide variety of applications and projects?</target>
        </trans-unit>
        <trans-unit id="c655f3dfbbd40da55316bfe04067f10269273dd3" translate="yes" xml:space="preserve">
          <source>Do you want something specific, like a scaffold that writes both your &lt;code&gt;webpack.config.js&lt;/code&gt; and your framework code?</source>
          <target state="translated">Do you want something specific, like a scaffold that writes both your &lt;code&gt;webpack.config.js&lt;/code&gt; and your framework code?</target>
        </trans-unit>
        <trans-unit id="dc200bb3f40023806800fd2ae11dc37e8d818441" translate="yes" xml:space="preserve">
          <source>Documentation for the &lt;code&gt;transpile&lt;/code&gt; option you can find &lt;a href=&quot;https://coffeescript.org/#transpilation&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Documentation for the &lt;code&gt;transpile&lt;/code&gt; option you can find &lt;a href=&quot;https://coffeescript.org/#transpilation&quot;&gt;here&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="86ccf92f51e36e777c3c668ce8e70e1d260e0c01" translate="yes" xml:space="preserve">
          <source>Documentation: Using loaders</source>
          <target state="translated">설명서 : 로더 사용</target>
        </trans-unit>
        <trans-unit id="15d2c24cbc3a3f9a05bb01e2fb97ffe1bdfa6b4f" translate="yes" xml:space="preserve">
          <source>Documentation: Using plugins</source>
          <target state="translated">Documentation: Using plugins</target>
        </trans-unit>
        <trans-unit id="0d694a5db1efaed67018c85576a95ce4bfed1c7a" translate="yes" xml:space="preserve">
          <source>Does it make sense to use this devtool for production builds? It's usually &lt;code&gt;no&lt;/code&gt; when the devtool has a negative effect on user experience.</source>
          <target state="translated">프로덕션 빌드에이 devtool을 사용하는 것이 합리적입니까? 일반적으로 devtool이 사용자 경험에 부정적인 영향을 미치는 경우에는 그렇지 &lt;code&gt;no&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d1ad71820fbe9aa4660801955e19d449c8d80ad6" translate="yes" xml:space="preserve">
          <source>Does not use a &lt;code&gt;requiredVersion&lt;/code&gt; by default.</source>
          <target state="translated">Does not use a &lt;code&gt;requiredVersion&lt;/code&gt; by default.</target>
        </trans-unit>
        <trans-unit id="1390a10fc3bff72509783bad63a26ba8ad73cf3f" translate="yes" xml:space="preserve">
          <source>Doesn't generate an error on missing file(s).</source>
          <target state="translated">Doesn't generate an error on missing file(s).</target>
        </trans-unit>
        <trans-unit id="63befc3cbe0075cdcb10469ae6fd0ec6cbc8600b" translate="yes" xml:space="preserve">
          <source>Doesn't generate an error on missing file(s);</source>
          <target state="translated">Doesn't generate an error on missing file(s);</target>
        </trans-unit>
        <trans-unit id="4e38156e9d423d0c0351999a5f6e01051239e28a" translate="yes" xml:space="preserve">
          <source>Don't forget to enable &lt;code&gt;sourceMap&lt;/code&gt; options for all loaders.</source>
          <target state="translated">Don't forget to enable &lt;code&gt;sourceMap&lt;/code&gt; options for all loaders.</target>
        </trans-unit>
        <trans-unit id="1c6a9671d4ec8902e27cca263ed2f76d2c637353" translate="yes" xml:space="preserve">
          <source>Don't forget to polyfill &lt;code&gt;require&lt;/code&gt; if you want to use it in node. See &lt;code&gt;webpack&lt;/code&gt; documentation.</source>
          <target state="translated">노드에서 사용 &lt;code&gt;require&lt;/code&gt; polyfill 요구 사항을 잊지 마십시오 . &lt;code&gt;webpack&lt;/code&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="64be087a6d66a0edac47c75c7c2fa5d2640c7392" translate="yes" xml:space="preserve">
          <source>Don't forget to polyfill require if you want to use it in Node.js. See the webpack documentation.</source>
          <target state="translated">Node.js에서 사용하려면 polyfill 요구 사항을 잊지 마십시오. 웹팩 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ab82d227ff6a6a681581475176ebf682591e23e9" translate="yes" xml:space="preserve">
          <source>Don't share the cache between calls with different options.</source>
          <target state="translated">다른 옵션으로 통화간에 캐시를 공유하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="0576d833d4eef865faa38464b954db865779eea6" translate="yes" xml:space="preserve">
          <source>Don't use babel - closure-compiler is also a transpiler. If you need &lt;a href=&quot;https://github.com/google/closure-compiler/wiki/ECMAScript6&quot;&gt;features not yet supported&lt;/a&gt; by closure-compiler, have babel only target those features.</source>
          <target state="translated">babel을 사용하지 마십시오-클로저-컴파일러도 트랜스 파일러입니다. 클로저-컴파일러가 &lt;a href=&quot;https://github.com/google/closure-compiler/wiki/ECMAScript6&quot;&gt;아직 지원하지 않는 기능&lt;/a&gt; 이 필요한 경우 babel 만 해당 기능을 대상으로합니다.</target>
        </trans-unit>
        <trans-unit id="bfdda81516292b3ae82394240edbb7bcf01a5ab8" translate="yes" xml:space="preserve">
          <source>Don't use babel at the same time - closure-compiler is also a transpiler. If you need &lt;a href=&quot;https://github.com/google/closure-compiler/wiki/ECMAScript6&quot;&gt;features not yet supported&lt;/a&gt; by closure-compiler, have babel only target those features. Closure Compiler can transpile async/await - you don't need babel for that functionality either.</source>
          <target state="translated">Don't use babel at the same time - closure-compiler is also a transpiler. If you need &lt;a href=&quot;https://github.com/google/closure-compiler/wiki/ECMAScript6&quot;&gt;features not yet supported&lt;/a&gt; by closure-compiler, have babel only target those features. Closure Compiler can transpile async/await - you don't need babel for that functionality either.</target>
        </trans-unit>
        <trans-unit id="59d7ca18bc82b728ba0e5a5703cb8d95dffcb0d0" translate="yes" xml:space="preserve">
          <source>Don't use too many workers as there is a boot overhead for the Node.js runtime and the loader. Minimize the module transfers between worker and main process. IPC is expensive.</source>
          <target state="translated">Node.js 런타임 및 로더에 대한 부트 오버 헤드가 있으므로 너무 많은 작업자를 사용하지 마십시오. 작업자와 기본 프로세스 간의 모듈 전송을 최소화하십시오. IPC는 비싸다.</target>
        </trans-unit>
        <trans-unit id="86324867b59a695f2d2ade9cfdec545d883c02ee" translate="yes" xml:space="preserve">
          <source>Don't use too many workers, as there is a boot overhead for the Node.js runtime and the loader. Minimize the module transfers between worker and main process. IPC is expensive.</source>
          <target state="translated">Don't use too many workers, as there is a boot overhead for the Node.js runtime and the loader. Minimize the module transfers between worker and main process. IPC is expensive.</target>
        </trans-unit>
        <trans-unit id="87b0159c9add19cc43345df17268d46b8aaede45" translate="yes" xml:space="preserve">
          <source>Drag and drop generated file (&lt;code&gt;events.json&lt;/code&gt; by default) into the profiler.</source>
          <target state="translated">생성 된 파일 ( 기본적으로 &lt;code&gt;events.json&lt;/code&gt; )을 프로파일 러로 끌어서 놓으십시오 .</target>
        </trans-unit>
        <trans-unit id="54285807ab181375755840887d96aa8fe8430b98" translate="yes" xml:space="preserve">
          <source>During the bundling process, modules are combined into chunks. Chunks combine into chunk groups and form a graph (&lt;code&gt;ChunkGraph&lt;/code&gt;) interconnected through modules. When you describe an entry point - under the hood, you create a chunk group with one chunk.</source>
          <target state="translated">During the bundling process, modules are combined into chunks. Chunks combine into chunk groups and form a graph ( &lt;code&gt;ChunkGraph&lt;/code&gt; ) interconnected through modules. When you describe an entry point - under the hood, you create a chunk group with one chunk.</target>
        </trans-unit>
        <trans-unit id="b67b7c79b252dee598276f6bea12deb60bbdff4e" translate="yes" xml:space="preserve">
          <source>Dynamic Imports</source>
          <target state="translated">동적 가져 오기</target>
        </trans-unit>
        <trans-unit id="b656b088866071db7937183c25b5462738b65f72" translate="yes" xml:space="preserve">
          <source>Dynamic Imports: Split code via inline function calls within modules.</source>
          <target state="translated">동적 가져 오기 : 모듈 내에서 인라인 함수 호출을 통해 코드를 분할합니다.</target>
        </trans-unit>
        <trans-unit id="2f486a3af5de66105385f0b778df425ea01ac956" translate="yes" xml:space="preserve">
          <source>Dynamic Remote Containers</source>
          <target state="translated">Dynamic Remote Containers</target>
        </trans-unit>
        <trans-unit id="6529e7ad9672c71463c2f7d4bbdad4f2843e5b48" translate="yes" xml:space="preserve">
          <source>Dynamic entry</source>
          <target state="translated">다이나믹 엔트리</target>
        </trans-unit>
        <trans-unit id="dabf1ba602821f12a38954b02fb774087ab5e3ed" translate="yes" xml:space="preserve">
          <source>Dynamic expressions in import()</source>
          <target state="translated">Dynamic expressions in import()</target>
        </trans-unit>
        <trans-unit id="63a790a2d73913d824ce9cf52a0e6eca3e9733f1" translate="yes" xml:space="preserve">
          <source>Dynamic public path depending on environment variable at run time</source>
          <target state="translated">Dynamic public path depending on environment variable at run time</target>
        </trans-unit>
        <trans-unit id="038c2aac43f79af2526fece6b4145228f8fee328" translate="yes" xml:space="preserve">
          <source>Dynamically load modules. Calls to &lt;code&gt;import()&lt;/code&gt; are treated as split points, meaning the requested module and it's children are split out into a separate chunk.</source>
          <target state="translated">동적으로 모듈을로드합니다. &lt;code&gt;import()&lt;/code&gt; 대한 호출 은 분할 지점으로 처리됩니다. 즉, 요청 된 모듈과 하위 항목이 별도의 청크로 분할됩니다.</target>
        </trans-unit>
        <trans-unit id="3f078660a61f2850ea318095795766efa5c77fd5" translate="yes" xml:space="preserve">
          <source>Dynamically load modules. Calls to &lt;code&gt;import()&lt;/code&gt; are treated as split points, meaning the requested module and its children are split out into a separate chunk.</source>
          <target state="translated">Dynamically load modules. Calls to &lt;code&gt;import()&lt;/code&gt; are treated as split points, meaning the requested module and its children are split out into a separate chunk.</target>
        </trans-unit>
        <trans-unit id="edede4463f4bccbb443461af012bcfe5d9411b99" translate="yes" xml:space="preserve">
          <source>E.g. for a browser request, you want to serve a HTML page, but for an API request you want to proxy it. You could do something like this:</source>
          <target state="translated">예를 들어 브라우저 요청의 경우 HTML 페이지를 제공하려고하지만 API 요청의 경우이를 프록시하려고합니다. 다음과 같이 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="74182e3f86167df08629cda104beea4489bb7eb1" translate="yes" xml:space="preserve">
          <source>E.g. for a browser request, you want to serve an HTML page, but for an API request you want to proxy it. You could do something like this:</source>
          <target state="translated">E.g. for a browser request, you want to serve an HTML page, but for an API request you want to proxy it. You could do something like this:</target>
        </trans-unit>
        <trans-unit id="7880aae07f8933a1f52d7d459bf18866fb8beb73" translate="yes" xml:space="preserve">
          <source>ECMAScript Modules</source>
          <target state="translated">ECMAScript 모듈</target>
        </trans-unit>
        <trans-unit id="9cc1ab85c45ca29da4350629553ebda9c674c42c" translate="yes" xml:space="preserve">
          <source>ECMAScript Modules (ESM) is a &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-modules&quot;&gt;specification&lt;/a&gt; for using Modules in the Web. It's supported by all modern browsers and the recommended way of writing modular code for the Web.</source>
          <target state="translated">ECMAScript Modules (ESM) is a &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-modules&quot;&gt;specification&lt;/a&gt; for using Modules in the Web. It's supported by all modern browsers and the recommended way of writing modular code for the Web.</target>
        </trans-unit>
        <trans-unit id="57c0ad748634397bea7844dcee0cf39bab7eb66f" translate="yes" xml:space="preserve">
          <source>ECMAScript Modules in Node.js</source>
          <target state="translated">ECMAScript Modules in Node.js</target>
        </trans-unit>
        <trans-unit id="845d8598e571c3bedbb4e47f1858fee8f7d8516b" translate="yes" xml:space="preserve">
          <source>ECMAScript modules</source>
          <target state="translated">ECMAScript modules</target>
        </trans-unit>
        <trans-unit id="8047c99126d53f32626722ee3d510fb0240b882e" translate="yes" xml:space="preserve">
          <source>ES Module Default Export</source>
          <target state="translated">ES Module Default Export</target>
        </trans-unit>
        <trans-unit id="55913d80782d9b20fd58717a06e54e59cc006fc2" translate="yes" xml:space="preserve">
          <source>ES Module Default Export And Named Exports Together</source>
          <target state="translated">ES Module Default Export And Named Exports Together</target>
        </trans-unit>
        <trans-unit id="08eb2025d6e382c46673a45f6111c20b184d499a" translate="yes" xml:space="preserve">
          <source>ES Module Default Import</source>
          <target state="translated">ES Module Default Import</target>
        </trans-unit>
        <trans-unit id="7c7ecea2d5032c525a5482c8e802ba095bc6edd5" translate="yes" xml:space="preserve">
          <source>ES Module Named Exports</source>
          <target state="translated">ES Module Named Exports</target>
        </trans-unit>
        <trans-unit id="57b326cf54b2a4eb3a52302b3daa58a89e84cca1" translate="yes" xml:space="preserve">
          <source>ES2015 module. i.e. &lt;code&gt;import webpackNumbers from 'webpack-numbers'&lt;/code&gt;.</source>
          <target state="translated">ES2015 모듈. 즉 &lt;code&gt;import webpackNumbers from 'webpack-numbers'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5abc2f410c47db3b782b0cdf3f0a42fa3a9ff9eb" translate="yes" xml:space="preserve">
          <source>ES6 (Recommended)</source>
          <target state="translated">ES6 (권장)</target>
        </trans-unit>
        <trans-unit id="b44d5c5ddb9f70505e3c0ec7d0ba046e8ea10249" translate="yes" xml:space="preserve">
          <source>ESM &amp;gt; CommonJs</source>
          <target state="translated">ESM &amp;gt; CommonJs</target>
        </trans-unit>
        <trans-unit id="694c877b56b937a9fe7d4e76459b38b0a18ec69e" translate="yes" xml:space="preserve">
          <source>ESM - ECMAScript Modules</source>
          <target state="translated">ESM - ECMAScript Modules</target>
        </trans-unit>
        <trans-unit id="3b17a57a6be23f308cdee4a991c4aa5b65883d07" translate="yes" xml:space="preserve">
          <source>ESM &lt;code&gt;import&lt;/code&gt; declarations in ESM</source>
          <target state="translated">ESM &lt;code&gt;import&lt;/code&gt; declarations in ESM</target>
        </trans-unit>
        <trans-unit id="6660513fd20931f4295b3d2de3c3f9defe472144" translate="yes" xml:space="preserve">
          <source>ESM &lt;code&gt;new URL(..., import.meta.url)&lt;/code&gt;</source>
          <target state="translated">ESM &lt;code&gt;new URL(..., import.meta.url)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="019d4e6e7bb6c7afba6b130df685a75fb734192e" translate="yes" xml:space="preserve">
          <source>ESM HMR (webpack) &lt;code&gt;import.hot.accept/decline([...])&lt;/code&gt;</source>
          <target state="translated">ESM HMR (webpack) &lt;code&gt;import.hot.accept/decline([...])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7cc60a995f05f02b9a5212b4c9903435ecadbaca" translate="yes" xml:space="preserve">
          <source>ESM used in packages support the following types of requests:</source>
          <target state="translated">ESM used in packages support the following types of requests:</target>
        </trans-unit>
        <trans-unit id="c4a8a7f99056d959666a8f5b3a34fdc1e71dbaf8" translate="yes" xml:space="preserve">
          <source>ESNext (Babel)</source>
          <target state="translated">ESNext (바벨)</target>
        </trans-unit>
        <trans-unit id="86425a8942f6ffccb4be032063cd3b29d887d78f" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;assets&lt;/code&gt; object represents an &lt;code&gt;output&lt;/code&gt; file emitted from the compilation. They all follow a similar structure:</source>
          <target state="translated">각 &lt;code&gt;assets&lt;/code&gt; 객체는 컴파일에서 &lt;code&gt;output&lt;/code&gt; 된 출력 파일을 나타냅니다 . 그들은 모두 비슷한 구조를 따릅니다.</target>
        </trans-unit>
        <trans-unit id="19e19150a3a66b2e2bcf8c16c34682c7c6ead62f" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;chunks&lt;/code&gt; object represents a group of modules known as a &lt;a href=&quot;https://webpack.js.org/glossary#c&quot;&gt;chunk&lt;/a&gt;. Each object follows the following structure:</source>
          <target state="translated">각 &lt;code&gt;chunks&lt;/code&gt; 객체는 &lt;a href=&quot;https://webpack.js.org/glossary#c&quot;&gt;청크&lt;/a&gt; 로 알려진 모듈 그룹을 나타냅니다 . 각 객체는 다음 구조를 따릅니다.</target>
        </trans-unit>
        <trans-unit id="a0b9af75afcdf2e655ea58362e7f0f555b52aae3" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;chunks&lt;/code&gt; object represents a group of modules known as a &lt;a href=&quot;https://webpack.js.org/glossary/#c&quot;&gt;chunk&lt;/a&gt;. Each object follows the following structure:</source>
          <target state="translated">Each &lt;code&gt;chunks&lt;/code&gt; object represents a group of modules known as a &lt;a href=&quot;https://webpack.js.org/glossary/#c&quot;&gt;chunk&lt;/a&gt;. Each object follows the following structure:</target>
        </trans-unit>
        <trans-unit id="17d519510670916c41f01d98d35a4a48ff328dde" translate="yes" xml:space="preserve">
          <source>Each &lt;em&gt;target&lt;/em&gt; has a variety of deployment/environment specific additions, support to fit its needs. See what &lt;a href=&quot;../configuration/target&quot;&gt;targets are available&lt;/a&gt;.</source>
          <target state="translated">각 &lt;em&gt;대상&lt;/em&gt; 에는 다양한 배포 / 환경 별 추가 기능이 있으며 필요에 맞게 지원됩니다. &lt;a href=&quot;../configuration/target&quot;&gt;사용 가능한 대상을&lt;/a&gt; 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="dd16dceb95e6ccf0c33dc951908b6f3f73aa71d4" translate="yes" xml:space="preserve">
          <source>Each additional loader/plugin has a bootup time. Try to use as few different tools as possible.</source>
          <target state="translated">각 추가 로더 / 플러그인에는 부팅 시간이 있습니다. 가능한 적은 도구를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="664597d72e194b2768318743aa9043d5a8aedd6d" translate="yes" xml:space="preserve">
          <source>Each additional loader/plugin has a bootup time. Try to use as few tools as possible.</source>
          <target state="translated">Each additional loader/plugin has a bootup time. Try to use as few tools as possible.</target>
        </trans-unit>
        <trans-unit id="7b104476cb94467f670cfe09b86332d232eb58d6" translate="yes" xml:space="preserve">
          <source>Each build acts as a container and also consumes other builds as containers. This way each build is able to access any other exposed module by loading it from its container.</source>
          <target state="translated">Each build acts as a container and also consumes other builds as containers. This way each build is able to access any other exposed module by loading it from its container.</target>
        </trans-unit>
        <trans-unit id="4b31f1b13d1104e8dcf1e41100a1ac08fc327385" translate="yes" xml:space="preserve">
          <source>Each chunk has a corresponding &lt;strong&gt;asset&lt;/strong&gt;. The assets are the output files - the result of bundling.</source>
          <target state="translated">Each chunk has a corresponding &lt;strong&gt;asset&lt;/strong&gt;. The assets are the output files - the result of bundling.</target>
        </trans-unit>
        <trans-unit id="733b8fa87aac425691f9a7842e5466f37f8788c0" translate="yes" xml:space="preserve">
          <source>Each emitted module is wrapped in a function.</source>
          <target state="translated">방출 된 각 모듈은 함수로 싸여 있습니다.</target>
        </trans-unit>
        <trans-unit id="18838f66165edb8a1e49fc79a87f5716ade6e998" translate="yes" xml:space="preserve">
          <source>Each key passed into &lt;code&gt;DefinePlugin&lt;/code&gt; is an identifier or multiple identifiers joined with &lt;code&gt;.&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DefinePlugin&lt;/code&gt; 에 전달 된 각 키 는 식별자 또는에 연결된 여러 식별자입니다 &lt;code&gt;.&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5d6191605a24e9c32a4117ead142f6471379bf63" translate="yes" xml:space="preserve">
          <source>Each module has a smaller surface area than a full program, making verification, debugging, and testing trivial. Well-written &lt;em&gt;modules&lt;/em&gt; provide solid abstractions and encapsulation boundaries, so that each module has a coherent design and a clear purpose within the overall application.</source>
          <target state="translated">각 모듈은 전체 프로그램보다 면적이 작기 때문에 검증, 디버깅 및 테스트가 간단합니다. 잘 작성된 &lt;em&gt;모듈&lt;/em&gt; 은 견고한 추상화와 캡슐화 경계를 제공하므로 각 모듈은 전체 응용 프로그램 내에서 일관된 디자인과 명확한 목적을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="58808d2572a32ca8f508c2455b7a0e3a3ac7ade1" translate="yes" xml:space="preserve">
          <source>Each page of a Single Page Application is exposed from container build in a separate build. The application shell is also a separate build referencing all pages as remote modules. This way each page can be separately deployed. The application shell is deployed when routes are updated or new routes are added. The application shell defines commonly used libraries as shared modules to avoid duplication of them in the page builds.</source>
          <target state="translated">Each page of a Single Page Application is exposed from container build in a separate build. The application shell is also a separate build referencing all pages as remote modules. This way each page can be separately deployed. The application shell is deployed when routes are updated or new routes are added. The application shell defines commonly used libraries as shared modules to avoid duplication of them in the page builds.</target>
        </trans-unit>
        <trans-unit id="c1ef94e7b2bb601dcaed1b4909872b85e76716ab" translate="yes" xml:space="preserve">
          <source>Each worker is a separate node.js process, which has an overhead of ~600ms. There is also an overhead of inter-process communication.</source>
          <target state="translated">각 작업자는 ~ 600ms의 오버 헤드를 갖는 별도의 node.js 프로세스입니다. 프로세스 간 통신 오버 헤드도 있습니다.</target>
        </trans-unit>
        <trans-unit id="da1a16a0f22f4cfc132729c3d9542de04f5e5548" translate="yes" xml:space="preserve">
          <source>Earlier and later Node.js versions are not affected.</source>
          <target state="translated">Earlier and later Node.js versions are not affected.</target>
        </trans-unit>
        <trans-unit id="b80c609668688e807970d5ca5d113c346e7d6328" translate="yes" xml:space="preserve">
          <source>Easier to use</source>
          <target state="translated">사용하기 쉬움</target>
        </trans-unit>
        <trans-unit id="25059fc7dd3b292f5e950cd040a72a2e087f8be0" translate="yes" xml:space="preserve">
          <source>Easily create HTML files to serve your bundles</source>
          <target state="translated">번들을 제공하기 위해 HTML 파일을 쉽게 생성</target>
        </trans-unit>
        <trans-unit id="0521b8382e6acc4cbaad60bfd58c3841b9d9ec08" translate="yes" xml:space="preserve">
          <source>Easy configuration</source>
          <target state="translated">Easy configuration</target>
        </trans-unit>
        <trans-unit id="3708e5745e7de168abae387fd944b0b542736bce" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;return&lt;/code&gt; or &lt;code&gt;this.callback&lt;/code&gt; can be used to return the transformed &lt;code&gt;content&lt;/code&gt; synchronously:</source>
          <target state="translated">어느 &lt;code&gt;return&lt;/code&gt; 또는 &lt;code&gt;this.callback&lt;/code&gt; 는 변환 된 반환하는 데 사용할 수있는 &lt;code&gt;content&lt;/code&gt; 동 기적 :</target>
        </trans-unit>
        <trans-unit id="35b7c4b8188e051798aa5d4896a81bd9d5842531" translate="yes" xml:space="preserve">
          <source>Either use &lt;code&gt;.cjs&lt;/code&gt; or &lt;code&gt;type: &quot;commonjs&quot;&lt;/code&gt; in package.json to clearly mark source code as CommonJs. This makes it statically detectable for tools if CommonJs or ESM is used. This is important for tools that only support ESM and no CommonJs.</source>
          <target state="translated">Either use &lt;code&gt;.cjs&lt;/code&gt; or &lt;code&gt;type: &quot;commonjs&quot;&lt;/code&gt; in package.json to clearly mark source code as CommonJs. This makes it statically detectable for tools if CommonJs or ESM is used. This is important for tools that only support ESM and no CommonJs.</target>
        </trans-unit>
        <trans-unit id="fe8504992a8d0aee8bac89ea86fb9563d9f71c92" translate="yes" xml:space="preserve">
          <source>Elaborate on the warning and example - calls with different configuration options?</source>
          <target state="translated">다른 구성 옵션을 사용하여 호출하는 경고 및 예를 자세히 설명 하시겠습니까?</target>
        </trans-unit>
        <trans-unit id="a5bfc7a7b3d59e7e7fc34f2665c9e5ecf3f615b6" translate="yes" xml:space="preserve">
          <source>Elm</source>
          <target state="translated">Elm</target>
        </trans-unit>
        <trans-unit id="1161a647bb78b8a9f845c0a6ed2e4ee4720d3cfc" translate="yes" xml:space="preserve">
          <source>Emit a file. This is webpack-specific.</source>
          <target state="translated">파일을 방출하십시오. 이것은 웹팩에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="a6372f12a3388804b5d5c97c78a0080b1bbe67f5" translate="yes" xml:space="preserve">
          <source>Emit a warning that will be displayed in the output like the following:</source>
          <target state="translated">Emit a warning that will be displayed in the output like the following:</target>
        </trans-unit>
        <trans-unit id="801fc18ee9ffb776c632915c1db539f33aa24d46" translate="yes" xml:space="preserve">
          <source>Emit a warning.</source>
          <target state="translated">경고를 방출하십시오.</target>
        </trans-unit>
        <trans-unit id="538189b1a0930ed80520dd6d9c1716f469fa9891" translate="yes" xml:space="preserve">
          <source>Emit an error that also can be displayed in the output.</source>
          <target state="translated">Emit an error that also can be displayed in the output.</target>
        </trans-unit>
        <trans-unit id="e217bbac1a72896169756556932c47936dd49917" translate="yes" xml:space="preserve">
          <source>Emit an error.</source>
          <target state="translated">오류를 방출하십시오.</target>
        </trans-unit>
        <trans-unit id="8194094e246b5e858bc74809220fb816279c3cb5" translate="yes" xml:space="preserve">
          <source>Emit assets</source>
          <target state="translated">Emit assets</target>
        </trans-unit>
        <trans-unit id="e5fa37fc7e40cf347846dcbab250bd1eae6c4a8e" translate="yes" xml:space="preserve">
          <source>Enable (and configure) source map support. Use &lt;a href=&quot;https://github.com/postcss/postcss-loader#sourcemap&quot;&gt;PostCss SourceMap options&lt;/a&gt;. Default configuration when enabled: &lt;code&gt;{ inline: false }&lt;/code&gt;.</source>
          <target state="translated">Enable (and configure) source map support. Use &lt;a href=&quot;https://github.com/postcss/postcss-loader#sourcemap&quot;&gt;PostCss SourceMap options&lt;/a&gt;. Default configuration when enabled: &lt;code&gt;{ inline: false }&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6d9b574344cea0d7e8d59a79a65068f9a91d9a31" translate="yes" xml:space="preserve">
          <source>Enable &lt;a href=&quot;../api/module-methods#magic-comments&quot;&gt;magic comments&lt;/a&gt; support for CommonJS.</source>
          <target state="translated">CommonJS에 대한 &lt;a href=&quot;../api/module-methods#magic-comments&quot;&gt;매직 주석&lt;/a&gt; 지원을 활성화 합니다 .</target>
        </trans-unit>
        <trans-unit id="958f34fb9bea7b9cfffbca6e32513d78a90c46c9" translate="yes" xml:space="preserve">
          <source>Enable &lt;a href=&quot;https://betterexplained.com/articles/how-to-optimize-your-site-with-gzip-compression/&quot;&gt;gzip compression&lt;/a&gt; for everything served:</source>
          <target state="translated">제공되는 모든 항목에 대해 &lt;a href=&quot;https://betterexplained.com/articles/how-to-optimize-your-site-with-gzip-compression/&quot;&gt;gzip 압축&lt;/a&gt; 을 활성화하십시오 .</target>
        </trans-unit>
        <trans-unit id="a05bdd65c70c3d43b78e24ecc74045c8c9d7893e" translate="yes" xml:space="preserve">
          <source>Enable &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/HTML/Element/script#attr-crossorigin&quot;&gt;cross-origin&lt;/a&gt; loading of chunks. The following values are accepted...</source>
          <target state="translated">청크의 &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/HTML/Element/script#attr-crossorigin&quot;&gt;원본 간&lt;/a&gt; 로드를 활성화 합니다. 다음 값이 허용됩니다 ...</target>
        </trans-unit>
        <trans-unit id="204d8ae3721722e5e4014c94e504c445bbabb6d9" translate="yes" xml:space="preserve">
          <source>Enable &lt;code&gt;transform&lt;/code&gt; caching. You can use &lt;code&gt;transform: { cache: { key: 'my-cache-key' } }&lt;/code&gt; to invalidate the cache.</source>
          <target state="translated">&lt;code&gt;transform&lt;/code&gt; 캐싱을 활성화합니다 . 당신이 사용할 수있는 &lt;code&gt;transform: { cache: { key: 'my-cache-key' } }&lt;/code&gt; 캐시를 무효화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="62509773250e0bae652560327e3defa2516a4a7d" translate="yes" xml:space="preserve">
          <source>Enable &lt;code&gt;transform&lt;/code&gt; caching. You can use &lt;code&gt;{ cache: { key: 'my-cache-key' } }&lt;/code&gt; to invalidate the cache</source>
          <target state="translated">&lt;code&gt;transform&lt;/code&gt; 캐싱을 활성화합니다 . 당신은 사용할 수 있습니다 &lt;code&gt;{ cache: { key: 'my-cache-key' } }&lt;/code&gt; 캐시를 무효화</target>
        </trans-unit>
        <trans-unit id="49b8b7868b44ab02f0dd2be8e1d8a6273f1d536e" translate="yes" xml:space="preserve">
          <source>Enable &lt;code&gt;transform&lt;/code&gt; caching. You can use &lt;code&gt;{ cache: { key: 'my-cache-key' } }&lt;/code&gt; to invalidate the cache.</source>
          <target state="translated">Enable &lt;code&gt;transform&lt;/code&gt; caching. You can use &lt;code&gt;{ cache: { key: 'my-cache-key' } }&lt;/code&gt; to invalidate the cache.</target>
        </trans-unit>
        <trans-unit id="6878abe2d3952d1f5bad6b7fede80b37e38c6e0e" translate="yes" xml:space="preserve">
          <source>Enable &lt;strong&gt;CSS Modules&lt;/strong&gt; features and setup &lt;code&gt;mode&lt;/code&gt;.</source>
          <target state="translated">Enable &lt;strong&gt;CSS Modules&lt;/strong&gt; features and setup &lt;code&gt;mode&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5e5c20c1116adc35e49643a58018ca7e16446ff1" translate="yes" xml:space="preserve">
          <source>Enable &lt;strong&gt;CSS Modules&lt;/strong&gt; features and setup options for them.</source>
          <target state="translated">Enable &lt;strong&gt;CSS Modules&lt;/strong&gt; features and setup options for them.</target>
        </trans-unit>
        <trans-unit id="7f0c0d2e089a31afc38199804823cafbc7bbc701" translate="yes" xml:space="preserve">
          <source>Enable &lt;strong&gt;CSS Modules&lt;/strong&gt; features.</source>
          <target state="translated">Enable &lt;strong&gt;CSS Modules&lt;/strong&gt; features.</target>
        </trans-unit>
        <trans-unit id="99db96642414faefed26d594ccab55854eee3609" translate="yes" xml:space="preserve">
          <source>Enable CoffeeScript in Markdown (Code Blocks) e.g &lt;code&gt;file.coffee.md&lt;/code&gt;</source>
          <target state="translated">마크 다운 (코드 블록)에서 CoffeeScript 활성화 (예 : &lt;code&gt;file.coffee.md&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="022b20cafdc5842172be40c6a34c4a02f5386dc3" translate="yes" xml:space="preserve">
          <source>Enable Hot Module Replacement (HMR)</source>
          <target state="translated">핫 모듈 교체 (HMR) 활성화</target>
        </trans-unit>
        <trans-unit id="51c91d3464163535edc290a4f0ad4c1f3e00bee7" translate="yes" xml:space="preserve">
          <source>Enable IE8 Support</source>
          <target state="translated">IE8 지원 활성화</target>
        </trans-unit>
        <trans-unit id="a682c74c1e82c0e665e44c3de1c591bc10e90095" translate="yes" xml:space="preserve">
          <source>Enable Name Mangling (See &lt;a href=&quot;https://github.com/mishoo/UglifyJS2/tree/harmony#mangle-properties-options&quot;&gt;Mangle Properties&lt;/a&gt; for advanced setups, use with ⚠️)</source>
          <target state="translated">이름 맹 글링 활성화 ( 고급 설정은 앵글 &lt;a href=&quot;https://github.com/mishoo/UglifyJS2/tree/harmony#mangle-properties-options&quot;&gt;속성&lt;/a&gt; 참조 , ⚠️과 함께 사용)</target>
        </trans-unit>
        <trans-unit id="7be4652186b06de971c8e57ad5a6d8c0f728ac89" translate="yes" xml:space="preserve">
          <source>Enable PostCSS Parser support in &lt;code&gt;CSS-in-JS&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;CSS-in-JS&lt;/code&gt; 에서 PostCSS 파서 지원 활성화</target>
        </trans-unit>
        <trans-unit id="16f5781baf08bee96911fb9943dbc7ee91238887" translate="yes" xml:space="preserve">
          <source>Enable Source Maps</source>
          <target state="translated">소스 맵 사용</target>
        </trans-unit>
        <trans-unit id="04296b96627f21ea337c5cf432e9aab7b0a5cdb6" translate="yes" xml:space="preserve">
          <source>Enable aggressive, but &lt;strong&gt;unsafe&lt;/strong&gt;, caching of modules. Passing &lt;code&gt;true&lt;/code&gt; will cache everything.</source>
          <target state="translated">Enable aggressive, but &lt;strong&gt;unsafe&lt;/strong&gt;, caching of modules. Passing &lt;code&gt;true&lt;/code&gt; will cache everything.</target>
        </trans-unit>
        <trans-unit id="0acb4cc5b23405cda64f2b8f74803538de1fdda1" translate="yes" xml:space="preserve">
          <source>Enable aggressive, but &lt;strong&gt;unsafe&lt;/strong&gt;, caching of modules. Passing &lt;code&gt;true&lt;/code&gt; will cache everything. Default:</source>
          <target state="translated">공격적이지만 &lt;strong&gt;안전하지 않은&lt;/strong&gt; 모듈 캐싱을 가능하게합니다. &lt;code&gt;true&lt;/code&gt; 를 전달하면 모든 것이 캐시됩니다. 기본:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
