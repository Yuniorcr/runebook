<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="kotlin">
    <body>
      <group id="kotlin">
        <trans-unit id="c0914dec855b485e9447591d8b1d2ea762e7b625" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if any of the specified elements was removed from the collection, &lt;code&gt;false&lt;/code&gt; if the collection was not modified.</source>
          <target state="translated">&lt;strong&gt;반환 &lt;/strong&gt; &lt;code&gt;true&lt;/code&gt; 지정된 요소의 컬렉션에서 제거 된 경우 &lt;code&gt;false&lt;/code&gt; 컬렉션이 수정되지 않은 경우.</target>
        </trans-unit>
        <trans-unit id="140c8c156f7bdeb3643bbf62556bcced7812804d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if request(s) was processed and &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;요청이 처리 되었으면 &lt;code&gt;true&lt;/code&gt; 를&lt;strong&gt;반환&lt;/strong&gt; 하고 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4085e70ac8e0a282f24db18b8e39ab9afbcd3c90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if the element has been added, &lt;code&gt;false&lt;/code&gt; if the collection does not support duplicates and the element is already contained in the collection.</source>
          <target state="translated">&lt;strong&gt;반환 &lt;/strong&gt; &lt;code&gt;true&lt;/code&gt; 요소가 추가 된 경우 &lt;code&gt;false&lt;/code&gt; 컬렉션이 중복을 지원하지 않는 경우 및 요소가 이미 컬렉션에 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="7c693fb6263911181b9191c3e80cefdba651bbc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if the element has been added, &lt;code&gt;false&lt;/code&gt; if the element is already contained in the set.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;요소가 추가 된 경우 &lt;code&gt;false&lt;/code&gt; 를, 요소가 이미 세트에 포함되어 있으면 false를 &lt;strong&gt;리턴 &lt;/strong&gt; &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="be16cec8a6f631c29ffef54f22443552439f434d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if the element has been successfully removed; &lt;code&gt;false&lt;/code&gt; if it was not present in the collection.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;요소가 성공적으로 제거되면 &lt;code&gt;true&lt;/code&gt; 를&lt;strong&gt;리턴 &lt;/strong&gt;합니다 . 컬렉션에없는 경우는 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="521a23e654976973f6c980fa65c69b6e1aba2f07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if the file or directory is successfully deleted, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;반환 &lt;/strong&gt; &lt;code&gt;true&lt;/code&gt; 파일 또는 디렉토리가 성공적으로 삭제되는 경우 &lt;code&gt;false&lt;/code&gt; , 그렇지.</target>
        </trans-unit>
        <trans-unit id="941a19bf827b2a2218dcdc25ef7e7c2983c7316b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if the list was changed as the result of the operation.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;조작의 결과로서리스트가 변경된 경우에 &lt;code&gt;true&lt;/code&gt; 를&lt;strong&gt;돌려&lt;/strong&gt; 줍니다.</target>
        </trans-unit>
        <trans-unit id="6dbadcd982d0682b5671bd12c74a9d49f1990220" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this path ends with &lt;a href=&quot;ends-with#kotlin.io%24endsWith%28java.io.File%2C+java.io.File%29%2Fother&quot;&gt;other&lt;/a&gt; path, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;반환 &lt;/strong&gt; &lt;code&gt;true&lt;/code&gt; 경우이 경로 끝 &lt;a href=&quot;ends-with#kotlin.io%24endsWith%28java.io.File%2C+java.io.File%29%2Fother&quot;&gt;다른&lt;/a&gt; 경로, &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="eceac9e8b9c56bf2844532ab7d9c753f88314b2f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this path ends with &lt;a href=&quot;ends-with#kotlin.io%24endsWith%28java.io.File%2C+kotlin.String%29%2Fother&quot;&gt;other&lt;/a&gt; path, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;반환 &lt;/strong&gt; &lt;code&gt;true&lt;/code&gt; 경우이 경로 끝 &lt;a href=&quot;ends-with#kotlin.io%24endsWith%28java.io.File%2C+kotlin.String%29%2Fother&quot;&gt;다른&lt;/a&gt; 경로, &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="33407dabac42c123239672d4e45c867704c415b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this path ends with &lt;a href=&quot;ends-with#kotlin.io%24endsWith(java.io.File,%20java.io.File)/other&quot;&gt;other&lt;/a&gt; path, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;이 경로가 &lt;a href=&quot;ends-with#kotlin.io%24endsWith(java.io.File,%20java.io.File)/other&quot;&gt;다른&lt;/a&gt; 경로 로 끝나면 &lt;code&gt;true&lt;/code&gt; 를&lt;strong&gt;반환 &lt;/strong&gt; &lt;code&gt;false&lt;/code&gt; 그렇지 않으면 false를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7063aa4b2150c125cebe5141a49593646458e38a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this path ends with &lt;a href=&quot;ends-with#kotlin.io%24endsWith(java.io.File,%20kotlin.String)/other&quot;&gt;other&lt;/a&gt; path, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;이 경로가 &lt;a href=&quot;ends-with#kotlin.io%24endsWith(java.io.File,%20kotlin.String)/other&quot;&gt;다른&lt;/a&gt; 경로 로 끝나면 &lt;code&gt;true&lt;/code&gt; 를&lt;strong&gt;반환 &lt;/strong&gt; &lt;code&gt;false&lt;/code&gt; 그렇지 않으면 false를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ee6bf65ee9c660d8514a3a0e20e62b59d46c4af1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this path starts with &lt;a href=&quot;starts-with#kotlin.io%24startsWith%28java.io.File%2C+java.io.File%29%2Fother&quot;&gt;other&lt;/a&gt; path, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;반환 &lt;/strong&gt; &lt;code&gt;true&lt;/code&gt; 이 경로로 시작하면 &lt;a href=&quot;starts-with#kotlin.io%24startsWith%28java.io.File%2C+java.io.File%29%2Fother&quot;&gt;다른&lt;/a&gt; 경로, &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="cf7dde79a273239ac4d5f8a69cff4562859e3ba0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this path starts with &lt;a href=&quot;starts-with#kotlin.io%24startsWith(java.io.File,%20java.io.File)/other&quot;&gt;other&lt;/a&gt; path, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;이 경로가 &lt;a href=&quot;starts-with#kotlin.io%24startsWith(java.io.File,%20java.io.File)/other&quot;&gt;다른&lt;/a&gt; 경로 로 시작하면 &lt;code&gt;true&lt;/code&gt; 를&lt;strong&gt;반환 &lt;/strong&gt; &lt;code&gt;false&lt;/code&gt; 그렇지 않으면 false를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1e53e313286086d837575656b1cdb53b2d001f2b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt;, if &lt;a href=&quot;equals#kotlin.collections.AbstractMutableSet%24equals%28kotlin.Any%29%2Fother&quot;&gt;other&lt;/a&gt; instance is a &lt;a href=&quot;../-set/index#kotlin.collections.Set&quot;&gt;Set&lt;/a&gt; of the same size, all elements of which are contained in this set.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;&lt;a href=&quot;equals#kotlin.collections.AbstractMutableSet%24equals%28kotlin.Any%29%2Fother&quot;&gt;다른&lt;/a&gt; 인스턴스가 같은 크기 의 &lt;a href=&quot;../-set/index#kotlin.collections.Set&quot;&gt;Set&lt;/a&gt; 이면 모든 요소가이 세트에 포함되어 있으면 &lt;code&gt;true&lt;/code&gt; 를&lt;strong&gt;리턴 &lt;/strong&gt;하십시오 .</target>
        </trans-unit>
        <trans-unit id="4bec93f3ca96365f9a1bab5804566688773dd0fe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt;, if &lt;a href=&quot;equals#kotlin.collections.AbstractMutableSet%24equals(kotlin.Any?)/other&quot;&gt;other&lt;/a&gt; instance is a &lt;a href=&quot;../-set/index#kotlin.collections.Set&quot;&gt;Set&lt;/a&gt; of the same size, all elements of which are contained in this set.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;&lt;a href=&quot;equals#kotlin.collections.AbstractMutableSet%24equals(kotlin.Any?)/other&quot;&gt;다른&lt;/a&gt; 인스턴스가 동일한 크기 의 &lt;a href=&quot;../-set/index#kotlin.collections.Set&quot;&gt;집합&lt;/a&gt; 이고 모든 요소가이 집합에 포함 된 경우 &lt;code&gt;true&lt;/code&gt; 를&lt;strong&gt;반환 &lt;/strong&gt;합니다 .</target>
        </trans-unit>
        <trans-unit id="368c7c8580df5fcb5fb1ce96a7ec159ad5e111f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Scalability&lt;/strong&gt;: Kotlin's support for &lt;a href=&quot;coroutines-overview&quot;&gt;coroutines&lt;/a&gt; helps build server-side applications that scale to massive numbers of clients with modest hardware requirements.</source>
          <target state="translated">&lt;strong&gt;확장 성&lt;/strong&gt; : Kotlin의 코 &lt;a href=&quot;coroutines-overview&quot;&gt;루틴&lt;/a&gt; 지원은 적당한 하드웨어 요구 사항으로 수많은 클라이언트로 확장 할 수있는 서버 측 응용 프로그램을 구축하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="ed5515f07933525e2f1df729060f5328234a123a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Scripting and REPL&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;스크립팅 및 REPL&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aba4f52264f8c7fb90641546ceab5aa6ef0435aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See Also&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;또한보십시오&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5da23d00148c01b92b2648ebc9d47a24327f6f9c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Setter&lt;/strong&gt; if set to &lt;code&gt;true&lt;/code&gt;, suppresses JVM access checks for this callable object. For a property, both accessors are made accessible.</source>
          <target state="translated">&lt;strong&gt;Setter&lt;/strong&gt; 가 &lt;code&gt;true&lt;/code&gt; 로&lt;strong&gt;설정&lt;/strong&gt; 되면 이 호출 가능 오브젝트에 대한 JVM 액세스 검사를 억제합니다. 속성의 경우 두 접근자가 모두 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ef7c6e3030ee281be883695c4113723c86f2a268" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: &lt;code&gt;String.capitalize()&lt;/code&gt; function now capitalizes digraphs from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Gaj%27s_Latin_alphabet&quot;&gt;Serbo-Croatian Gaj's Latin alphabet&lt;/a&gt; in the title case (&lt;code&gt;ǅ&lt;/code&gt; instead of &lt;code&gt;Ǆ&lt;/code&gt;)</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : &lt;code&gt;String.capitalize()&lt;/code&gt; 함수는 이제 제목 케이스에서 &lt;a href=&quot;https://en.wikipedia.org/wiki/Gaj%27s_Latin_alphabet&quot;&gt;Serbo-Croatian Gaj의 라틴 알파벳&lt;/a&gt; 의 &lt;code&gt;Ǆ&lt;/code&gt; 대문자로 표시합니다 ( &lt;code&gt;ǅ&lt;/code&gt; 대신 ǅ ).</target>
        </trans-unit>
        <trans-unit id="85c6933cd0e2410dd9aac772ccb97034b20e4c69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: &lt;code&gt;StringBuilder.appendln()&lt;/code&gt; will be deprecated in favor of &lt;code&gt;StringBuilder.appendLine()&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;요약&lt;/strong&gt; : &lt;code&gt;StringBuilder.appendln()&lt;/code&gt; 대신 &lt;code&gt;StringBuilder.appendLine()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0755c693a5d09a32f6df39c8b7af72dcf39a4f37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: &lt;code&gt;Throwable.addSuppressed()&lt;/code&gt; extension function is now preferred over the &lt;code&gt;Throwable.addSuppressed()&lt;/code&gt; member function</source>
          <target state="translated">&lt;strong&gt;요약&lt;/strong&gt; : &lt;code&gt;Throwable.addSuppressed()&lt;/code&gt; 확장 함수가 이제 &lt;code&gt;Throwable.addSuppressed()&lt;/code&gt; 멤버 함수 보다 선호 됩니다.</target>
        </trans-unit>
        <trans-unit id="a7b3df1e654a6e942881d7f23a5dd9163acdc64a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: Kotlin 1.3 discontinues the following deprecated binary artifacts:</source>
          <target state="translated">&lt;strong&gt;간단한 요약&lt;/strong&gt; : Kotlin 1.3은 다음과 같은 더 이상 사용되지 않는 이진 아티팩트를 중단합니다.</target>
        </trans-unit>
        <trans-unit id="0ee7a8bec6eac07ada028775fbc0f024763bf715" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: Kotlin 1.3 removes annotations from the package &lt;code&gt;org.jetbrains.annotations&lt;/code&gt; from stdlib and moves them to the separate artifacts shipped with the compiler: &lt;code&gt;annotations-13.0.jar&lt;/code&gt; and &lt;code&gt;mutability-annotations-compat.jar&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;간단한 요약&lt;/strong&gt; : Kotlin 1.3은 stdlib 의 패키지 &lt;code&gt;org.jetbrains.annotations&lt;/code&gt; 에서 주석을 제거하고 주석을 컴파일러와 함께 제공된 별도의 아티팩트로 이동합니다 : &lt;code&gt;annotations-13.0.jar&lt;/code&gt; 및 &lt;code&gt;mutability-annotations-compat.jar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b8d1574fab61233d54d34a1032c4407e1cad8375" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: Kotlin 1.4 will fix incorrect type mapping in annotations when KClass is used as a generic parameter</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : Kotlin 1.4는 KClass가 일반 매개 변수로 사용될 때 주석의 잘못된 유형 매핑을 수정합니다. ㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ</target>
        </trans-unit>
        <trans-unit id="85fde8f238f5451b4d2eb990e9a51b3292bcee58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: Kotlin 1.4 will not generate checked exceptions during interface delegation to Kotlin interfaces</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : Kotlin 1.4는 인터페이스를 Kotlin 인터페이스에 위임하는 동안 확인 된 예외를 생성하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="35c7a80614909f452e6aeb8f94b2caabaa4e4e69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: Kotlin 1.4 will not wrap the argument into another array on a signature-polymorphic call</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : Kotlin 1.4는 서명 다형성 호출에서 인수를 다른 배열로 래핑하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="79a95f3cacd452be90a7bc505a53481cb4c8f917" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: Kotlin 1.4 will outlaw auto operator &lt;code&gt;contains&lt;/code&gt; coming from the implementors of &lt;code&gt;java.util.Map&lt;/code&gt; written in Java</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : Kotlin 1.4는 Java로 작성된 &lt;code&gt;java.util.Map&lt;/code&gt; 구현 자로부터 오는 자동 연산자 &lt;code&gt;contains&lt;/code&gt; 을 금지합니다.</target>
        </trans-unit>
        <trans-unit id="e438c14de379632f7104517f1fe232630d9e0c94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: Kotlin 1.4 will prohibit access to protected members from public inline members.</source>
          <target state="translated">&lt;strong&gt;요약&lt;/strong&gt; : Kotlin 1.4는 공개 인라인 회원이 보호 된 회원에 대한 액세스를 금지합니다.</target>
        </trans-unit>
        <trans-unit id="c784fa0c6b6837f2a6fe66f83c2a6139fc281112" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: Kotlin 1.4 will prohibit the use of spread operator (*) on signature-polymorphic calls</source>
          <target state="translated">&lt;strong&gt;요약&lt;/strong&gt; : Kotlin 1.4는 서명 다형성 호출에 스프레드 연산자 (*) 사용을 금지합니다.</target>
        </trans-unit>
        <trans-unit id="2ae75869274a7081bcc735057a6e400c40707a04" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: Since Kotlin 1.4, the compiler will not generate the &lt;code&gt;ConstantValue&lt;/code&gt; attribute for non-&lt;code&gt;const&lt;/code&gt;&lt;code&gt;val&lt;/code&gt;s</source>
          <target state="translated">&lt;strong&gt;짧은 요약&lt;/strong&gt; : 코 틀린 1.4 이후, 컴파일러는 생성하지 않습니다 &lt;code&gt;ConstantValue&lt;/code&gt; 비에 대한 속성 &lt;code&gt;const&lt;/code&gt; 를 &lt;code&gt;val&lt;/code&gt; 들</target>
        </trans-unit>
        <trans-unit id="162bc11ef98b38f08bf4bf49ad916c9d4edaac7c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: Since Kotlin 1.4, the initialization order for tail-recursive functions will be the same as for regular functions</source>
          <target state="translated">&lt;strong&gt;요약&lt;/strong&gt; : Kotlin 1.4부터 꼬리 재귀 함수의 초기화 순서는 일반 함수와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="475b594aec421abacc2bdcf73c51227f2233e3f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: Starting from Kotlin 1.4, all runtime null checks will throw a &lt;code&gt;java.lang.NullPointerException&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : Kotlin 1.4부터 모든 런타임 null 검사에서 &lt;code&gt;java.lang.NullPointerException&lt;/code&gt; 이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="659a889770132f3b0feeaebd5b13b9345beab732" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: a smartcast on a member of one enum entry will be correctly applied to only this enum entry</source>
          <target state="translated">&lt;strong&gt;간단한 요약&lt;/strong&gt; : 하나의 열거 형 항목 멤버의 스마트 캐스트가이 열거 형 항목에만 올바르게 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="e4ed1ce28abf7c2908a12450ad4a20d59301ac2b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: errors in getter-target annotations will be reported properly in 1.3</source>
          <target state="translated">&lt;strong&gt;간단한 요약&lt;/strong&gt; : getter-target 주석의 오류는 1.3에서 올바르게보고됩니다</target>
        </trans-unit>
        <trans-unit id="30f95d257cce069a40e0b758b5bce0880b543c01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: evaluation order with respect to class initialization is changed in 1.3</source>
          <target state="translated">&lt;strong&gt;짧은 요약&lt;/strong&gt; : 클래스 초기화에 대한 평가 순서는 1.3에서 변경됩니다</target>
        </trans-unit>
        <trans-unit id="cb5039733125761c8239ceec59a4f67ec35c203e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: getter-target annotations on annotations constructor parameters will be properly written to classfiles in 1.3</source>
          <target state="translated">&lt;strong&gt;간단한 요약&lt;/strong&gt; : 주석 생성자 매개 변수에 대한 getter-target 주석이 1.3의 클래스 파일에 올바르게 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="9a298a201b00abaeb62424fe5b38ab40d7cdf657" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: if an expression in for-loop range is a local variable updated in a loop body, this change affects loop execution. This is inconsistent with iterating over other containers, such as ranges, character sequences, and collections.</source>
          <target state="translated">&lt;strong&gt;짧은 요약&lt;/strong&gt; : for-loop 범위의 표현식이 루프 본문에서 업데이트 된 로컬 변수 인 경우이 변경은 루프 실행에 영향을줍니다. 이것은 범위, 문자 시퀀스 및 컬렉션과 같은 다른 컨테이너를 반복하는 것과 일치하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2a94db9866ff1d98a5e2105675817dabc0de5b17" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: in Kotlin 1.3, assigning single element to vararg is deprecated and should be replaced with consecutive spread and array construction.</source>
          <target state="translated">&lt;strong&gt;간단한 요약&lt;/strong&gt; : Kotlin 1.3에서는 단일 요소를 vararg에 할당하는 것이 더 이상 사용되지 않으며 연속적인 스프레드 및 배열 구성으로 대체해야합니다.</target>
        </trans-unit>
        <trans-unit id="21ecc7e1f3c25deab8fe86c003fbf1835910686f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: in Kotlin 1.4, subtyping for intersection types will be refined to work more correctly</source>
          <target state="translated">&lt;strong&gt;요약&lt;/strong&gt; : Kotlin 1.4에서는 교차 유형의 하위 유형이 더 올바르게 작동하도록 개선됩니다.</target>
        </trans-unit>
        <trans-unit id="59eafa9edea562f4ba0e0ded66047f1b7935983b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: names of synthetic &lt;code&gt;$annotations()&lt;/code&gt; methods generated by KAPT for properties have changed in 1.4</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : 속성에 대해 KAPT에서 생성 한 합성 &lt;code&gt;$annotations()&lt;/code&gt; 메서드의 이름이 1.4에서 변경되었습니다.</target>
        </trans-unit>
        <trans-unit id="f789fff8850846faf65297cd9d5db55b6e891536" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: nullability assertions for Java-types annotated with not-null annotations will be generated more aggressively, causing code which passes &lt;code&gt;null&lt;/code&gt; here to fail faster.</source>
          <target state="translated">&lt;strong&gt;요약&lt;/strong&gt; : null이 아닌 주석으로 주석이 달린 Java 유형에 대한 nullability 어설 션이 더 적극적으로 생성되어 여기서 &lt;code&gt;null&lt;/code&gt; 을 전달하는 코드가 더 빨리 실패합니다.</target>
        </trans-unit>
        <trans-unit id="6dd20c686ea51bc3a2653537d998e5be3940e26c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: on Windows, &lt;code&gt;kotlinc.bat&lt;/code&gt; arguments that contain delimiter characters (whitespace, &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;;&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt;) now require double quotes (&lt;code&gt;&quot;&lt;/code&gt;)</source>
          <target state="translated">&lt;strong&gt;짧은 요약&lt;/strong&gt; : Windows에서, &lt;code&gt;kotlinc.bat&lt;/code&gt; (공백, 구분 문자를 포함 인자 &lt;code&gt;=&lt;/code&gt; , &lt;code&gt;;&lt;/code&gt; , &lt;code&gt;,&lt;/code&gt; ) 지금 (따옴표가 필요합니다 &lt;code&gt;&quot;&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="3963eb5d43ad3b4d8e67c87271ed7e1f55fd2a6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: overloads for functions with &lt;code&gt;@JvmOverloads&lt;/code&gt; will be generated as &lt;code&gt;final&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : &lt;code&gt;@JvmOverloads&lt;/code&gt; 를 사용하는 함수에 대한 오버로드가 &lt;code&gt;final&lt;/code&gt; 으로 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="0790dd4b65c702a13059dd52c6010990cf99139f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: reassignment of the backing field of &lt;code&gt;val&lt;/code&gt;-property in its getter is now prohibited</source>
          <target state="translated">&lt;strong&gt;짧은 요약&lt;/strong&gt; : 게터에서 &lt;code&gt;val&lt;/code&gt; - property 의 지원 필드를 재 할당 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="ac605f21602dcf1a9421bfda3ae05be400db20b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: return type of collection &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; functions will be changed to non-nullable in 1.6</source>
          <target state="translated">&lt;strong&gt;요약&lt;/strong&gt; : 컬렉션 &lt;code&gt;min&lt;/code&gt; 및 &lt;code&gt;max&lt;/code&gt; 함수 의 반환 유형은 1.6에서 nullable이 아닌 것으로 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="4ea0777c773b37a77ac450057f510d49b9f1cb32" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3 declaration of &lt;code&gt;mod&lt;/code&gt; operator is prohibited, as well as calls which resolve to such declarations</source>
          <target state="translated">&lt;strong&gt;간단한 요약&lt;/strong&gt; : &lt;code&gt;mod&lt;/code&gt; 연산자 의 Kotlin 1.3 선언 은 금지되어 있으며 이러한 선언으로 해석되는 호출</target>
        </trans-unit>
        <trans-unit id="45036e88dcdf5c6c484175995dc3c64aa4c1a8aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3 local annotation classes are not supported</source>
          <target state="translated">&lt;strong&gt;간단한 요약&lt;/strong&gt; : Kotlin 1.3 로컬 주석 클래스는 지원되지 않기 때문에</target>
        </trans-unit>
        <trans-unit id="c4b03bea8c917ba8281ac12cba32cd7a5af14ba0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3 smartcasts on local delegated properties are not allowed</source>
          <target state="translated">&lt;strong&gt;짧은 요약&lt;/strong&gt; : 로컬 위임 속성에 대한 Kotlin 1.3 스마트 캐스트 이후로는 허용되지 않습니다</target>
        </trans-unit>
        <trans-unit id="d47f9e57b901e028b4815e78b12d5f6d1a456eb4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3, data classes are prohibited to override &lt;code&gt;copy()&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;간단한 요약&lt;/strong&gt; : Kotlin 1.3부터 ​​데이터 클래스는 &lt;code&gt;copy()&lt;/code&gt; 를 무시할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="9875f45a55dbc71204e25a03adacf85e874bd3d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3, ensure that the &lt;code&gt;toIndex&lt;/code&gt; argument of &lt;code&gt;Array.copyOfRange&lt;/code&gt;, which represents the exclusive end of the range being copied, is not greater than the array size and throw &lt;code&gt;IllegalArgumentException&lt;/code&gt; if it is.</source>
          <target state="translated">&lt;strong&gt;간단한 요약&lt;/strong&gt; : Kotlin 1.3 이후로, 복사되는 범위의 배타적 끝을 나타내는 &lt;code&gt;Array.copyOfRange&lt;/code&gt; 의 &lt;code&gt;toIndex&lt;/code&gt; 인수가 배열 크기보다 크지 않도록하고 &lt;code&gt;IllegalArgumentException&lt;/code&gt; 을 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="c85212b875bd3c20f73f2ebcc84885e20fcf7f17" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3, error about wrong annotation target will be properly reported when annotation with target &lt;code&gt;PARAMETER&lt;/code&gt; is applied to parameter's type</source>
          <target state="translated">&lt;strong&gt;간단한 요약&lt;/strong&gt; : Kotlin 1.3부터 ​​대상 &lt;code&gt;PARAMETER&lt;/code&gt; 가있는 주석이 매개 변수 유형에 적용될 때 잘못된 주석 대상에 대한 오류가 올바르게보고됩니다.</target>
        </trans-unit>
        <trans-unit id="bf69aecb16d88c150cceda726ac8fdd9b8a437a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3, inner classes are not allowed to inherit &lt;code&gt;Throwable&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;짧은 요약&lt;/strong&gt; : Kotlin 1.3부터 ​​내부 클래스는 &lt;code&gt;Throwable&lt;/code&gt; 을 상속받을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="408307590ffce3274f1ed85ddb1ed0ca1ea12b03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3, make sure &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;count&lt;/code&gt; and similar methods do not overflow for long sequences. See the Issue for the full list of affected methods.</source>
          <target state="translated">&lt;strong&gt;짧은 요약&lt;/strong&gt; : Kotlin 1.3부터는 &lt;code&gt;index&lt;/code&gt; , &lt;code&gt;count&lt;/code&gt; 및 유사한 메소드가 긴 시퀀스에서 오버플로되지 않도록하십시오. 영향을받는 방법의 전체 목록은 문제를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ba7a0bd4ed579ebbb6934da310497aa38764dc3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3, nested classifiers (classes, object, interfaces, annotation classes, enum classes) in enum entries are prohibited</source>
          <target state="translated">&lt;strong&gt;간단한 요약&lt;/strong&gt; : Kotlin 1.3부터 ​​열거 형 항목의 중첩 분류 자 ​​(클래스, 객체, 인터페이스, 주석 클래스, 열거 형 클래스)는 금지됩니다.</target>
        </trans-unit>
        <trans-unit id="f2f7b257e074a8a8fd3e28c4f3f9246cd86541d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3, only &lt;code&gt;SOURCE&lt;/code&gt; retention is allowed for annotations with target &lt;code&gt;EXPRESSION&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;간단한 요약&lt;/strong&gt; : Kotlin 1.3부터 대상 &lt;code&gt;EXPRESSION&lt;/code&gt; 이있는 주석에는 &lt;code&gt;SOURCE&lt;/code&gt; 보존 만 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="81f515e78c6041ef53594b1a17dd05e48bede5ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3, prohibit step value for integer progressions being the minimum negative value of its integer type (&lt;code&gt;Long&lt;/code&gt; or &lt;code&gt;Int&lt;/code&gt;), so that calling &lt;code&gt;IntProgression.fromClosedRange(0, 1, step = Int.MIN_VALUE)&lt;/code&gt; will throw &lt;code&gt;IllegalArgumentException&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;간단한 요약&lt;/strong&gt; : Kotlin 1.3부터 ​​정수 진행의 단계 값이 정수 유형의 최소 음수 값 ( &lt;code&gt;Long&lt;/code&gt; 또는 &lt;code&gt;Int&lt;/code&gt; )이되지 않도록 &lt;code&gt;IntProgression.fromClosedRange(0, 1, step = Int.MIN_VALUE)&lt;/code&gt; 를 호출 하면 &lt;code&gt;IllegalArgumentException&lt;/code&gt; 이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="63da536ad803e75f1e57970ba0d317e351a3f5bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3, rules of visibility by short names are stricter for complex class hierarchies involving companion objects and nested classifiers.</source>
          <target state="translated">&lt;strong&gt;간단한 요약&lt;/strong&gt; : Kotlin 1.3 이후로 짧은 이름의 가시성 규칙은 컴패니언 객체 및 중첩 된 분류자가 포함 된 복잡한 클래스 계층 구조에 대해 더 엄격합니다.</target>
        </trans-unit>
        <trans-unit id="6cc8e0cd30c4e9a6b4d5761550cefe94ffda129a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3, setting non-constant values as vararg annotation parameters is prohibited</source>
          <target state="translated">&lt;strong&gt;간단한 요약&lt;/strong&gt; : Kotlin 1.3부터는 상수가 아닌 값을 vararg 주석 매개 변수로 설정하는 것이 금지됩니다</target>
        </trans-unit>
        <trans-unit id="ddaa338ce4bcf1b6176f1ca2bdbaf24a2d43fb82" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.3, unify behavior of &lt;code&gt;split&lt;/code&gt; method by empty match regex across all platforms</source>
          <target state="translated">&lt;strong&gt;짧은 요약&lt;/strong&gt; : Kotlin 1.3 이후 모든 플랫폼에서 빈 일치 정규식 으로 &lt;code&gt;split&lt;/code&gt; 방법의 동작을 통합</target>
        </trans-unit>
        <trans-unit id="04b476e3f9a204c945737bcb3c36e6028fe9bdab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, &lt;code&gt;findAll&lt;/code&gt; will be improved to check that &lt;code&gt;startIndex&lt;/code&gt; is in the range of the valid position indices of the input char sequence at the moment of entering &lt;code&gt;findAll&lt;/code&gt;, and throw &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; if it's not</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : Kotlin 1.4 이후 &lt;code&gt;findAll&lt;/code&gt; 은 &lt;code&gt;startIndex&lt;/code&gt; 가 &lt;code&gt;findAll&lt;/code&gt; 을 입력하는 순간 입력 문자 시퀀스의 유효한 위치 인덱스 범위에 있는지 확인하고 그렇지 않은 경우 &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; 을 던지도록 개선 됩니다.</target>
        </trans-unit>
        <trans-unit id="77a6153267ca2830715b21c160170a09d514421e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, &lt;code&gt;mod&lt;/code&gt; operator on numeric types is removed from stdlib</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : Kotlin 1.4부터 숫자 유형에 대한 &lt;code&gt;mod&lt;/code&gt; 연산자가 stdlib에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="fc750a7a010df4e1a10415bd524afdcfed885b6e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, Kotlin compiler will prohibit instantiating equal type variables with different types</source>
          <target state="translated">&lt;strong&gt;요약&lt;/strong&gt; : Kotlin 1.4부터 Kotlin 컴파일러는 유형이 다른 동일한 유형 변수를 인스턴스화하는 것을 금지합니다.</target>
        </trans-unit>
        <trans-unit id="2c07fc88aa79583152a7cb68893951a49a6ba2af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, Kotlin compiler will use IEEE 754 standard to compare floating-point numbers</source>
          <target state="translated">&lt;strong&gt;요약&lt;/strong&gt; : Kotlin 1.4부터 Kotlin 컴파일러는 IEEE 754 표준을 사용하여 부동 소수점 숫자를 비교합니다.</target>
        </trans-unit>
        <trans-unit id="c22e4c0d81bc7152980ba1af499843c468e9cd2c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, builder functions such as &lt;code&gt;sequence {}&lt;/code&gt; with type that depends on a recursive constraint inside the passed lambda cause a compiler error.</source>
          <target state="translated">&lt;strong&gt;요약&lt;/strong&gt; : Kotlin 1.4 이후 전달 된 람다 내부의 재귀 제약 조건에 따라 유형이있는 &lt;code&gt;sequence {}&lt;/code&gt; 와 같은 빌더 함수로 인해 컴파일러 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="004a99140f8387474fc972e479c3a88b7f8adbb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, common supertype between flexible types will be more specific protecting from runtime errors</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : Kotlin 1.4부터 유연한 유형 간의 공통 상위 유형이 런타임 오류로부터보다 구체적으로 보호됩니다.</target>
        </trans-unit>
        <trans-unit id="4bb4bec803585f667c8fd2567762c695734737af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, common supertype between raw &lt;code&gt;Comparable&lt;/code&gt; type and integer literal type will be more specific</source>
          <target state="translated">&lt;strong&gt;요약&lt;/strong&gt; : Kotlin 1.4부터 원시 &lt;code&gt;Comparable&lt;/code&gt; 유형과 정수 리터럴 유형 간의 공통 상위 유형이 더 구체적입니다.</target>
        </trans-unit>
        <trans-unit id="28e3da17dedc84115163d3babbd42d2a78ccd476" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, conversions of floating-point types to &lt;code&gt;Short&lt;/code&gt; and &lt;code&gt;Byte&lt;/code&gt; will be deprecated</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : Kotlin 1.4부터 부동 소수점 유형을 &lt;code&gt;Short&lt;/code&gt; 및 &lt;code&gt;Byte&lt;/code&gt; 로 변환하는 기능 이 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5f710d8ed62c752ee16b5908d1066659ed2ac7e3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, functions can't have &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;tailrec&lt;/code&gt; modifiers at the same time.</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : Kotlin 1.4부터 함수는 동시에 &lt;code&gt;open&lt;/code&gt; 및 &lt;code&gt;tailrec&lt;/code&gt; 수정자를 가질 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="c037f361ab6c6e0fd11faa4beaffb4d6dced32be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, functions using covariant and generic-specialized overrides will return boxed values of inline classes</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : Kotlin 1.4부터 공변 및 일반 특화 재정의를 사용하는 함수는 인라인 클래스의 박스형 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6b07133b623bb16ab911d3fb88504d0751076dc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, if a companion object is private, then its field &lt;code&gt;INSTANCE&lt;/code&gt; will be also private</source>
          <target state="translated">&lt;strong&gt;요약&lt;/strong&gt; : Kotlin 1.4부터 컴패니언 객체가 비공개 인 경우 해당 필드 &lt;code&gt;INSTANCE&lt;/code&gt; 도 비공개입니다.</target>
        </trans-unit>
        <trans-unit id="d0301aabda7b2fa61f94461436964cd3bb434b2f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, if two overloads of a function that takes contravariant type arguments differ only by the nullability of the type (such as &lt;code&gt;In&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;In&amp;lt;T?&amp;gt;&lt;/code&gt;), the nullable type is considered more specific.</source>
          <target state="translated">&lt;strong&gt;요약&lt;/strong&gt; : Kotlin 1.4 이후 반 변성 유형 인수를 사용하는 함수의 두 오버로드가 유형의 null 허용 여부 (예 : &lt;code&gt;In&amp;lt;T&amp;gt;&lt;/code&gt; 및 &lt;code&gt;In&amp;lt;T?&amp;gt;&lt;/code&gt; ) 만 다른 경우 nullable 유형이 더 구체적인 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="dc20cd19c9c5372a5edd8086fe3a2af0bc853869" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, integer type returning from a lambda will be more specific for cases when there is early return</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : Kotlin 1.4 이후로 람다에서 반환되는 정수 유형은 조기 반환이있는 경우에 더 구체적 일 것입니다.</target>
        </trans-unit>
        <trans-unit id="54f98ab77d6bd5e9483a7a0f820b0c8c3b2b766d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, lambda arguments will be resolved independently without implicit coercion to &lt;code&gt;Unit&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;요약&lt;/strong&gt; : Kotlin 1.4 이후로 람다 인수는 &lt;code&gt;Unit&lt;/code&gt; 암시 적 강제없이 독립적으로 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="2d98944382aae9dc5cfb621f6f1efbe357b4e47c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, lambdas returning values of &lt;code&gt;kotlin.Result&lt;/code&gt; type will return boxed value instead of unboxed</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : Kotlin 1.4부터 &lt;code&gt;kotlin.Result&lt;/code&gt; 유형의 값을 반환하는 람다 는 unboxed 대신 boxed 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1cfaf122ddc880a04aea5799b777507a2bbace8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, more candidates will become applicable because capturing for recursive types will work more correctly</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : Kotlin 1.4부터 재귀 유형 캡처가 더 올바르게 작동하므로 더 많은 후보가 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="e9360710bfefc3944394e58188602c39ba5d6d44" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, subtyping between captured and nullable types will be more correct protecting from runtime errors</source>
          <target state="translated">&lt;strong&gt;요약&lt;/strong&gt; : Kotlin 1.4 이후 캡처 된 유형과 nullable 유형 사이의 하위 유형은 런타임 오류로부터 보호하는 것이 더 정확할 것입니다.</target>
        </trans-unit>
        <trans-unit id="b5e8d68fabac2fdbb3b1bec22682c9d54be4bd11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, the catch interval will be computed properly for nested &lt;code&gt;try/catch&lt;/code&gt; blocks</source>
          <target state="translated">&lt;strong&gt;요약&lt;/strong&gt; : Kotlin 1.4 이후 중첩 된 &lt;code&gt;try/catch&lt;/code&gt; 블록에 대해 catch 간격이 올바르게 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="eda0cc56a9003acdc70f9ff68db2a53f1db2e54e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, the deprecated &lt;code&gt;kotlin.coroutines.experimental&lt;/code&gt; API is removed from stdlib</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : Kotlin 1.4 이후로 더 이상 사용되지 않는 &lt;code&gt;kotlin.coroutines.experimental&lt;/code&gt; API가 stdlib에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="42eee3a29e27d1c463c724be486f7363151215de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, the type inference in certain cases works less eagerly allowing to find the constraint system that is not contradictory.</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : Kotlin 1.4 이후 특정 경우 유형 추론은 모순되지 않는 제약 시스템을 찾을 수 있도록 덜 열심히 작동합니다.</target>
        </trans-unit>
        <trans-unit id="f1a9cf4089a71d77c9ec29f132ebf42a5d475ca6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, there will be a type mismatch for empty &lt;code&gt;when&lt;/code&gt; expression if it's used as the last expression in a lambda</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : Kotlin 1.4부터 람다에서 마지막 표현식으로 사용되는 경우 비어있는 &lt;code&gt;when&lt;/code&gt; 표현식에 대한 유형 불일치가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="27588d46d75c25edf41bd7ef6fe0b9985a2df7dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, uchecked casts of covariant types produce the intersection type for smart casts, not the type of the unchecked cast.</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : Kotlin 1.4부터 공변 유형의 uchecked 캐스트는 확인되지 않은 캐스트의 유형이 아닌 스마트 캐스트에 대한 교차 유형을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="b7be61b3d086f99e48b748ee097ca346fbf74be9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: since Kotlin 1.4, using &lt;code&gt;this&lt;/code&gt; inside builder functions like &lt;code&gt;sequence {}&lt;/code&gt; is prohibited if there are no other proper constraints</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : Kotlin 1.4부터 다른 적절한 제약 조건이없는 경우 &lt;code&gt;sequence {}&lt;/code&gt; 와 같은 내부 빌더 함수를 사용 &lt;code&gt;this&lt;/code&gt; 것은 금지됩니다.</target>
        </trans-unit>
        <trans-unit id="44bc3e29b61b871f5e532e713770c41abfcc45bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: smart casts for last expressions in lambdas will be correctly applied since 1.4</source>
          <target state="translated">&lt;strong&gt;간략한 요약&lt;/strong&gt; : 람다의 마지막 표현식에 대한 스마트 캐스트는 1.4부터 올바르게 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="de4ee27a3d842d6468372ea14353eb3b56f5d950" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: smart casts from contracts will be available on calls with implicit receivers in 1.4</source>
          <target state="translated">&lt;strong&gt;요약&lt;/strong&gt; : 계약의 스마트 캐스트는 1.4에서 암시 적 수신자가있는 호출에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0e23960d2041e11681c63b51b633e26f1d0a495" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Short summary&lt;/strong&gt;: the &lt;code&gt;List&lt;/code&gt; implementation returned from &lt;code&gt;Double/FloatArray.asList()&lt;/code&gt; will implement &lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;indexOf&lt;/code&gt;, and &lt;code&gt;lastIndexOf&lt;/code&gt;, so that they use total order equality</source>
          <target state="translated">&lt;strong&gt;요약&lt;/strong&gt; : &lt;code&gt;Double/FloatArray.asList()&lt;/code&gt; 에서 반환 된 &lt;code&gt;List&lt;/code&gt; 구현 은 &lt;code&gt;contains&lt;/code&gt; , &lt;code&gt;indexOf&lt;/code&gt; 및 &lt;code&gt;lastIndexOf&lt;/code&gt; 를 구현 하므로 전체 순서 동일성을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="b3d48e0508d5a3312f1e060e051f6acb179d93d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Since&lt;/strong&gt; JDK 1.8</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;JDK 1.8 &lt;strong&gt;부터&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b5b1cb482aa105b0904961b456ea52c857a321c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Source&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Source&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8146f1ee5c295c4989c6751eed8a133b33324203" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Stable Incremental Releases (SIR)&lt;/strong&gt;: incremental releases are fully compatible, only optimizations and bug fixes happen. Any changes can be made in a &lt;a href=&quot;kotlin-evolution#feature-releases-and-incremental-releases&quot;&gt;feature release&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;SIR (Stable Incremental Release)&lt;/strong&gt; : 증분 릴리스는 완전히 호환되며 최적화 및 버그 수정 만 발생합니다. &lt;a href=&quot;kotlin-evolution#feature-releases-and-incremental-releases&quot;&gt;기능 릴리스&lt;/a&gt; 에서는 모든 변경이 가능합니다 .</target>
        </trans-unit>
        <trans-unit id="56431645e39ef99ade6c85d034bd34b5dd3cb974" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Stable JSON serialization&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;안정적인 JSON 직렬화&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="31bbeeb60b07c90e93d12c271d5ff05a92af3ed6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Stable&lt;/strong&gt; means &quot;use it even in most conservative scenarios&quot;:</source>
          <target state="translated">&lt;strong&gt;안정&lt;/strong&gt; 은 &quot;가장 보수적 인 시나리오에서도 사용&quot;을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="79c73f0f7ca008d835e8d98e1662d4e4b58b9d0b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Standard library&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;표준 라이브러리&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fafc0b1a9daa3668df46e9f30358b04853e27ffe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Status Entered at version&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;버전에 입력 된 상태&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f1ede14e892f42c8efdcda6d2ded3799c8c889e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Status since version&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;버전 이후 상태&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fb85847c48e09ad18d7abcdd3064778e96a285e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Status&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Status&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a3a445f8488bc4d945e7f0b27b79705e08757033" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Support for multiplatform development&lt;/strong&gt;. You can use Kotlin for developing not only Android but also &lt;a href=&quot;https://kotlinlang.org/lp/mobile/&quot;&gt;iOS&lt;/a&gt;, backend, and web applications. Enjoy the benefits of sharing the common code among the platforms.</source>
          <target state="translated">&lt;strong&gt;멀티 플랫폼 개발 지원&lt;/strong&gt; . Kotlin을 사용하여 Android뿐만 아니라 &lt;a href=&quot;https://kotlinlang.org/lp/mobile/&quot;&gt;iOS&lt;/a&gt; , 백엔드, 웹 애플리케이션 을 개발할 수 있습니다 . 플랫폼간에 공통 코드를 공유하는 이점을 누리십시오.</target>
        </trans-unit>
        <trans-unit id="37761219bd6b77fdffd94b251cc357d512620f32" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table of contents&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;목차&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9c4a46ba94390494470065adf7e6b2f83d2ff2b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The context object&lt;/strong&gt; is available as a receiver (&lt;code&gt;this&lt;/code&gt;). &lt;strong&gt;The return value&lt;/strong&gt; is the lambda result.</source>
          <target state="translated">&lt;strong&gt;컨텍스트 오브젝트&lt;/strong&gt; 는 수신자 ( &lt;code&gt;this&lt;/code&gt; )로 사용 가능합니다. &lt;strong&gt;반환 값&lt;/strong&gt; 은 람다 결과입니다.</target>
        </trans-unit>
        <trans-unit id="88215a82c793e942d2af897c557ba7684fa2ef06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The context object&lt;/strong&gt; is available as a receiver (&lt;code&gt;this&lt;/code&gt;). &lt;strong&gt;The return value&lt;/strong&gt; is the object itself.</source>
          <target state="translated">&lt;strong&gt;컨텍스트 오브젝트&lt;/strong&gt; 는 수신자 ( &lt;code&gt;this&lt;/code&gt; )로 사용 가능합니다. &lt;strong&gt;반환 값&lt;/strong&gt; 은 객체 자체입니다.</target>
        </trans-unit>
        <trans-unit id="54de5f5c6c58d16df4367451081909208a5bcc0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The context object&lt;/strong&gt; is available as an argument (&lt;code&gt;it&lt;/code&gt;). &lt;strong&gt;The return value&lt;/strong&gt; is the lambda result.</source>
          <target state="translated">&lt;strong&gt;컨텍스트 오브젝트&lt;/strong&gt; 는 인수 ( &lt;code&gt;it&lt;/code&gt; )로 사용 가능합니다. &lt;strong&gt;반환 값&lt;/strong&gt; 은 람다 결과입니다.</target>
        </trans-unit>
        <trans-unit id="953fcac7a2079b358a15b4680c6c75014d93ef81" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The context object&lt;/strong&gt; is available as an argument (&lt;code&gt;it&lt;/code&gt;). &lt;strong&gt;The return value&lt;/strong&gt; is the object itself.</source>
          <target state="translated">&lt;strong&gt;컨텍스트 오브젝트&lt;/strong&gt; 는 인수 ( &lt;code&gt;it&lt;/code&gt; )로 사용 가능합니다. &lt;strong&gt;반환 값&lt;/strong&gt; 은 객체 자체입니다.</target>
        </trans-unit>
        <trans-unit id="5871a70d1e542e89b7ab8b15ac3cc3874a37b906" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tooling&lt;/strong&gt;: In addition to great IDE support in general, Kotlin offers framework-specific tooling (for example, for Spring) in the plugin for IntelliJ IDEA Ultimate.</source>
          <target state="translated">&lt;strong&gt;툴링&lt;/strong&gt; : Kotlin은 일반적으로 뛰어난 IDE 지원 외에도 IntelliJ IDEA Ultimate 플러그인에서 프레임 워크 별 툴링 (예 : Spring)을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="71c5bff736c57fab5798aafd2d132e3b32e00919" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UMD&lt;/strong&gt; tries to unify both models allowing these to be used either on the client or server.</source>
          <target state="translated">&lt;strong&gt;UMD&lt;/strong&gt; 는 두 모델을 통합하여 클라이언트 또는 서버에서 사용할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="6ad5c85fbe20ce1b6d8ca4ecd3b320ad62f55232" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use Kotlin's &lt;a href=&quot;multiplatform&quot;&gt;multiplatform&lt;/a&gt; projects to share code with other Kotlin targets&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Kotlin의 &lt;a href=&quot;multiplatform&quot;&gt;다중 플랫폼&lt;/a&gt; 프로젝트를 사용 하여 다른 Kotlin 대상과 코드 공유&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6f377e210e523a9e5d14fc6cf3e9148b96a25a45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Want to know more about Kotlin/JS?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Kotlin / JS에 대해 더 알고 싶으십니까?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c728986c73dfcd4771f2e125c05c49b6de5d4c6e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Working with server-side technology&lt;/strong&gt;. You can use Kotlin to interact with server-side JavaScript such as Node.js</source>
          <target state="translated">&lt;strong&gt;서버 측 기술로 작업&lt;/strong&gt; . Kotlin을 사용하여 Node.js와 같은 서버 측 JavaScript와 상호 작용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="4284764a751df9ebf82c209c14a5d1c15134cbcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Write frontend web applications using Kotlin/JS&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Kotlin / JS를 사용하여 프런트 엔드 웹 애플리케이션 작성&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="15437728613702fb251edcb72133fd8003d56192" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Write server-side and serverless applications using Kotlin/JS&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Kotlin / JS를 사용하여 서버 측 및 서버리스 애플리케이션 작성&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f068b922de903244cf438a01aa9eaa5187ff87c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Write some tests in Kotlin&lt;/strong&gt; for your code.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;코드를 위해 &lt;strong&gt;Kotlin에서 몇 가지 테스트를 작성&lt;/strong&gt; 하세요.</target>
        </trans-unit>
        <trans-unit id="1573775a40b4413b43276a7869672eadf61c04d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;foo.klib&lt;/strong&gt; when unpacked as &lt;strong&gt;foo/&lt;/strong&gt; gives us:</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;foo /&lt;/strong&gt; 로 압축을 풀 때 &lt;strong&gt;foo.klib&lt;/strong&gt; 는 다음을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="bf94185ef76323dec09fef0cbf20c3d5c523700f" translate="yes" xml:space="preserve">
          <source>@&lt;a href=&quot;index&quot;&gt;JvmDefault&lt;/a&gt; methods are excluded from interface delegation.</source>
          <target state="translated">@ &lt;a href=&quot;index&quot;&gt;JvmDefault&lt;/a&gt; 메소드는 인터페이스 위임에서 제외됩니다.</target>
        </trans-unit>
        <trans-unit id="a85269ecc4d736bf7f756267a46b4cd70390de5b" translate="yes" xml:space="preserve">
          <source>@JvmDefault</source>
          <target state="translated">@JvmDefault</target>
        </trans-unit>
        <trans-unit id="38367cdaa4e817128dc323103f0d5c6a9b4d10f0" translate="yes" xml:space="preserve">
          <source>@JvmStatic and @JvmField in companion of interfaces</source>
          <target state="translated">인터페이스와 함께 사용되는 @JvmStatic 및 @JvmField</target>
        </trans-unit>
        <trans-unit id="457c8e5c49b6937f32587db09d7548f1a532d670" translate="yes" xml:space="preserve">
          <source>A &quot;Caught &amp;hellip;&quot; message is not printed despite there being a &lt;code&gt;catch&lt;/code&gt; operator:</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 연산자 가 있어도 &quot;Caught&amp;hellip;&quot;메시지가 인쇄되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="9a2b3239447324e962c7de42fba1a368ac7ecaf5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#compilation-for-android&quot;&gt;compilation&lt;/a&gt; per &lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;Android build variant&lt;/a&gt;, for Android targets.</source>
          <target state="translated">&lt;a href=&quot;#compilation-for-android&quot;&gt;컴파일&lt;/a&gt; 당 &lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;안드로이드 빌드 변형&lt;/a&gt; 안드로이드 타겟.</target>
        </trans-unit>
        <trans-unit id="93e9ecea8983e2a8a6ac905cc55324675716b123" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#setting-up-targets&quot;&gt;target&lt;/a&gt; is a part of the build that is responsible for building, testing, and packaging a complete piece of software for one of the platforms. Therefore, a multiplatform project usually contains multiple targets.</source>
          <target state="translated">&lt;a href=&quot;#setting-up-targets&quot;&gt;대상&lt;/a&gt; , 구축 테스트 및 플랫폼 중 하나에 대한 소프트웨어의 전체 조각을 포장 할 책임이 빌드의 일부입니다. 따라서 다중 플랫폼 프로젝트에는 일반적으로 여러 대상이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="8b697eb28e0477b9900378779138d85233522e5d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../-future-state/index&quot;&gt;FutureState&lt;/a&gt; of this future</source>
          <target state="translated">&lt;a href=&quot;../-future-state/index&quot;&gt;FutureState&lt;/a&gt; 이 미래의</target>
        </trans-unit>
        <trans-unit id="25026241e77cf4069930d2a81998f1ff17f630fd" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/index.html&quot;&gt;Channel&lt;/a&gt; is conceptually very similar to &lt;code&gt;BlockingQueue&lt;/code&gt;. One key difference is that instead of a blocking &lt;code&gt;put&lt;/code&gt; operation it has a suspending &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/send.html&quot;&gt;send&lt;/a&gt;, and instead of a blocking &lt;code&gt;take&lt;/code&gt; operation it has a suspending &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/receive.html&quot;&gt;receive&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/index.html&quot;&gt;채널은&lt;/a&gt; 개념적으로 매우 유사하다 &lt;code&gt;BlockingQueue&lt;/code&gt; 의 . 한 가지 중요한 차이점은 블로킹 &lt;code&gt;put&lt;/code&gt; 작업 대신에 일시 중단 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/send.html&quot;&gt;송신&lt;/a&gt; 이 있고 블로킹 &lt;code&gt;take&lt;/code&gt; 작업 대신에 일시 중단 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/receive.html&quot;&gt;수신이 있다는 것&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b58e2f469b88e2806e3ea71b6dc650ab9d539789" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;index&quot;&gt;Grouping&lt;/a&gt; structure serves as an intermediate step in group-and-fold operations: they group elements by their keys and then fold each group with some aggregating operation.</source>
          <target state="translated">&lt;a href=&quot;index&quot;&gt;그룹화&lt;/a&gt; 열쇠에 의해 그들이 족 원소하고 일부 응집 조작으로 각 그룹을 겹 : 구조 그룹과 배 작업의 중간 단계로서 기능한다.</target>
        </trans-unit>
        <trans-unit id="335776bae2e0bd7845875238ad8bcbd05a6733c6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;properties#late-initialized-properties-and-variables&quot;&gt;late-initialized&lt;/a&gt; property in an object or a companion object has a static backing field with the same visibility as the property setter.</source>
          <target state="translated">&lt;a href=&quot;properties#late-initialized-properties-and-variables&quot;&gt;늦은 초기화&lt;/a&gt; 객체 또는 컴패니언 객체 속성은 속성 설정 부와 같은 시인성 정적 배면 필드를 갖는다.</target>
        </trans-unit>
        <trans-unit id="3cc7459605b2b17bf1d991f0eebee74f23ad8909" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;dynamic&lt;/code&gt; value can be assigned to variables of any type, or passed anywhere as a parameter.</source>
          <target state="translated">&lt;code&gt;dynamic&lt;/code&gt; 값은 어떤 유형의 변수에 할당하거나 어딘가에 파라미터로서 전달 될 수있다.</target>
        </trans-unit>
        <trans-unit id="673bbc28c8de6fe2df37b91506d4a2e0d962d158" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;dynamic&lt;/code&gt; variable can have a value of any type.</source>
          <target state="translated">&lt;code&gt;dynamic&lt;/code&gt; 변수는 임의의 타입의 값을 가질 수있다.</target>
        </trans-unit>
        <trans-unit id="8a131d6c33e43901a9e73e6d096d64a24f2b4bf6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;for&lt;/code&gt; loop over a range or an array is compiled to an index-based loop that does not create an iterator object.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; 범위 또는 배열 위에 루프 반복자 객체를 생성하지 않는 인덱스 기반 루프로 컴파일된다.</target>
        </trans-unit>
        <trans-unit id="5eba7bd06ba05689a35417f4a2d10cd2c5491c37" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;break&lt;/em&gt; qualified with a label jumps to the execution point right after the loop marked with that label. A &lt;em&gt;continue&lt;/em&gt; proceeds to the next iteration of that loop.</source>
          <target state="translated">레이블이 있는 &lt;em&gt;구분&lt;/em&gt; 은 해당 레이블이 표시된 루프 바로 다음에 실행 지점으로 이동합니다. A는 &lt;em&gt;계속&lt;/em&gt; 그 루프의 다음 반복으로 진행합니다.</target>
        </trans-unit>
        <trans-unit id="810ff113834a8301e08e007d7f4d97785fa7d41b" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;common&lt;/em&gt; module contains code that is not specific to any platform, as well as declarations without implementation of platform-dependent APIs.</source>
          <target state="translated">&lt;em&gt;공통&lt;/em&gt; 모듈은 플랫폼에 따라 API를 구현하지 않고 모든 플랫폼 특정하지 않습니다 코드뿐만 아니라 선언이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="8f2cbebae11ba3ce0b4a055abc4e44e360c81202" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;mutable&lt;/em&gt; interface that extends the corresponding read-only interface with write operations: adding, removing, and updating its elements.</source>
          <target state="translated">쓰기 조작으로 해당 읽기 전용 인터페이스를 확장 하는 &lt;em&gt;변경 가능한&lt;/em&gt; 인터페이스 : 요소 추가, 제거 및 업데이트</target>
        </trans-unit>
        <trans-unit id="33e051bd23939b7cc0237b3b6664b35b7845b6d9" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;platform&lt;/em&gt; module contains implementations of platform-dependent declarations in the common module for a specific platform, as well as other platform-dependent code.</source>
          <target state="translated">&lt;em&gt;플랫폼&lt;/em&gt; 모듈은 특정 플랫폼에 대한 공통 모듈 플랫폼 의존의 선언뿐만 아니라 다른 플랫폼에 의존적 인 코드의 구현을 포함하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="95129f3c56e36bede13a9f1dc15ab985f6e80cf9" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;read-only&lt;/em&gt; interface that provides operations for accessing collection elements.</source>
          <target state="translated">컬렉션 요소에 액세스하기위한 작업을 제공 하는 &lt;em&gt;읽기 전용&lt;/em&gt; 인터페이스입니다.</target>
        </trans-unit>
        <trans-unit id="da52eb5eec241d05137b0082a603533ac5d1c95c" translate="yes" xml:space="preserve">
          <source>A Basic Kotlin/Native Application</source>
          <target state="translated">기본 Kotlin / 기본 응용 프로그램</target>
        </trans-unit>
        <trans-unit id="45fdff9421f438f4d7095c3e89f7e8657a2e2d21" translate="yes" xml:space="preserve">
          <source>A Comparator that orders strings ignoring character case.</source>
          <target state="translated">대소 문자를 무시하고 문자열을 주문하는 비교기.</target>
        </trans-unit>
        <trans-unit id="6d42c580b61563b87876d7e53d9a68bc00af435d" translate="yes" xml:space="preserve">
          <source>A Kotlin Pod (Kotlin project used as a CocoaPods dependency) and an Xcode project with one or more targets.</source>
          <target state="translated">Kotlin Pod (CocoaPods 종속성으로 사용되는 Kotlin 프로젝트) 및 하나 이상의 대상이있는 Xcode 프로젝트.</target>
        </trans-unit>
        <trans-unit id="18794c05b901f990ef60046da8df4c8b4ff1baa9" translate="yes" xml:space="preserve">
          <source>A Kotlin Pod and an Xcode project with one target</source>
          <target state="translated">하나의 대상이있는 Kotlin Pod 및 Xcode 프로젝트</target>
        </trans-unit>
        <trans-unit id="660bafa16b50592e9a0dd5fac36ebdfb0da3116b" translate="yes" xml:space="preserve">
          <source>A Kotlin Pod and an Xcode project with several targets</source>
          <target state="translated">여러 대상이있는 Kotlin Pod 및 Xcode 프로젝트</target>
        </trans-unit>
        <trans-unit id="ff8d7aa691b31def4a545e2b80ac2f8019ecd3a7" translate="yes" xml:space="preserve">
          <source>A Kotlin project and Pod libraries stored remotely in the CocoaPods repository or stored locally on your machine.</source>
          <target state="translated">CocoaPods 저장소에 원격으로 저장되거나 머신에 로컬로 저장된 Kotlin 프로젝트 및 Pod 라이브러리.</target>
        </trans-unit>
        <trans-unit id="d2e881ecb6cd88d1f9cc8b13a38ef8eb9401e9ed" translate="yes" xml:space="preserve">
          <source>A Kotlin project and a Pod library from the CocoaPods repository</source>
          <target state="translated">CocoaPods 저장소의 Kotlin 프로젝트 및 Pod 라이브러리</target>
        </trans-unit>
        <trans-unit id="8e0fb8eea28c1e23a6556e5684ae888f5a947576" translate="yes" xml:space="preserve">
          <source>A Kotlin project and a Pod library stored locally</source>
          <target state="translated">로컬에 저장된 Kotlin 프로젝트 및 Pod 라이브러리</target>
        </trans-unit>
        <trans-unit id="b8368fc3f88edc8b7307923a1672190efe58c88b" translate="yes" xml:space="preserve">
          <source>A Kotlin property is compiled to the following Java elements:</source>
          <target state="translated">Kotlin 특성은 다음 Java 요소로 컴파일됩니다.</target>
        </trans-unit>
        <trans-unit id="52912edb0637c5b19a657c18414f717688261523" translate="yes" xml:space="preserve">
          <source>A Kotlin source set is a collection of Kotlin sources, along with their resources, dependencies, and language settings, which may take part in Kotlin compilations of one or more &lt;a href=&quot;#setting-up-targets&quot;&gt;targets&lt;/a&gt;.</source>
          <target state="translated">Kotlin 소스 세트는 자원, 종속성 및 언어 설정과 함께 Kotlin 소스 모음으로, 하나 이상의 &lt;a href=&quot;#setting-up-targets&quot;&gt;대상&lt;/a&gt; 에 대한 Kotlin 컴파일에 참여할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e9d72197be74b6ce3e9d239f43e83398938bba30" translate="yes" xml:space="preserve">
          <source>A UTF-16 &lt;em&gt;code unit&lt;/em&gt; is a 16-bit unsigned integral value that represents either one Unicode &lt;em&gt;code point&lt;/em&gt; (character code) or must be combined with another code unit to form a code unit. If this makes no sense, I strongly recommend &lt;a href=&quot;https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/&quot;&gt;Joel Spolsky's excellent essay on Unicode and its encodings&lt;/a&gt;. For most Western scripts, including English, all code points fit inside one code unit, so it's tempting to think of a code unit as a character - but that will lead astray once your code encounters non-Western scripts. A single UTF-16 code unit can be represented with single quotes, and has the type &lt;code&gt;Char&lt;/code&gt;:</source>
          <target state="translated">UTF-16 &lt;em&gt;코드 단위&lt;/em&gt; 는 하나의 유니 &lt;em&gt;코드 코드 포인트&lt;/em&gt; (문자 코드) 를 나타내는 16 비트 부호없는 정수 값 이거나 다른 코드 단위와 결합하여 코드 단위를 형성해야합니다. 이것이 의미가 없다면, &lt;a href=&quot;https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/&quot;&gt;유니 코드와 인코딩에 관한 Joel Spolsky의 훌륭한 에세이를&lt;/a&gt; 강력히 추천 합니다. 영어를 포함한 대부분의 서구 스크립트의 경우 모든 코드 포인트가 하나의 코드 단위 안에 들어 맞기 때문에 코드 단위를 문자로 생각하고 싶은 유혹이 있습니다. 단일 UTF-16 코드 단위는 작은 따옴표로 표시 할 수 있으며 &lt;code&gt;Char&lt;/code&gt; 유형을 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="96c66067cd323127bbca005bcf884da823834a7c" translate="yes" xml:space="preserve">
          <source>A backing field will be generated for a property if it uses the default implementation of at least one of the accessors, or if a custom accessor references it through the &lt;code&gt;field&lt;/code&gt; identifier.</source>
          <target state="translated">접근자가 하나 이상의 접근 자의 기본 구현을 사용하거나 사용자 지정 접근자가 &lt;code&gt;field&lt;/code&gt; 식별자를 통해이를 참조하는 경우 속성에 대한 백업 필드가 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="8ee4431e92fae7f00d11a4c7bbc04a214dd9d66e" translate="yes" xml:space="preserve">
          <source>A base class to simplify implementing iterators so that implementations only have to implement &lt;a href=&quot;-abstract-iterator/compute-next&quot;&gt;computeNext&lt;/a&gt; to implement the iterator, calling &lt;a href=&quot;-abstract-iterator/done&quot;&gt;done&lt;/a&gt; when the iteration is complete.</source>
          <target state="translated">그 구현은 구현해야하므로 기본 클래스는 반복자를 구현 단순화 &lt;a href=&quot;-abstract-iterator/compute-next&quot;&gt;computeNext을&lt;/a&gt; 반복자를 구현하기 위해 호출 &lt;a href=&quot;-abstract-iterator/done&quot;&gt;할&lt;/a&gt; 반복이 완료되면.</target>
        </trans-unit>
        <trans-unit id="3cea63124cc4132c0ed5c37a6d8367f6e00ac701" translate="yes" xml:space="preserve">
          <source>A base class to simplify implementing iterators so that implementations only have to implement &lt;a href=&quot;../-abstract-iterator/compute-next&quot;&gt;computeNext&lt;/a&gt; to implement the iterator, calling &lt;a href=&quot;../-abstract-iterator/done&quot;&gt;done&lt;/a&gt; when the iteration is complete.</source>
          <target state="translated">그 구현은 구현해야하므로 기본 클래스는 반복자를 구현 단순화 &lt;a href=&quot;../-abstract-iterator/compute-next&quot;&gt;computeNext을&lt;/a&gt; 반복자를 구현하기 위해 호출 &lt;a href=&quot;../-abstract-iterator/done&quot;&gt;할&lt;/a&gt; 반복이 완료되면.</target>
        </trans-unit>
        <trans-unit id="f2d9320495e89647cf476a32dde9596e3a857b4e" translate="yes" xml:space="preserve">
          <source>A base class to simplify implementing iterators so that implementations only have to implement &lt;a href=&quot;../../kotlin.collections/-abstract-iterator/compute-next&quot;&gt;computeNext&lt;/a&gt; to implement the iterator, calling &lt;a href=&quot;../../kotlin.collections/-abstract-iterator/done&quot;&gt;done&lt;/a&gt; when the iteration is complete.</source>
          <target state="translated">그 구현은 구현해야하므로 기본 클래스는 반복자를 구현 단순화 &lt;a href=&quot;../../kotlin.collections/-abstract-iterator/compute-next&quot;&gt;computeNext을&lt;/a&gt; 반복자를 구현하기 위해 호출 &lt;a href=&quot;../../kotlin.collections/-abstract-iterator/done&quot;&gt;할&lt;/a&gt; 반복이 완료되면.</target>
        </trans-unit>
        <trans-unit id="6c00a104f4d876da7e0de80875ea0fca9e6228b1" translate="yes" xml:space="preserve">
          <source>A base class to simplify implementing iterators so that implementations only have to implement &lt;a href=&quot;compute-next&quot;&gt;computeNext&lt;/a&gt; to implement the iterator, calling &lt;a href=&quot;done&quot;&gt;done&lt;/a&gt; when the iteration is complete.</source>
          <target state="translated">그 구현은 구현해야하므로 기본 클래스는 반복자를 구현 단순화 &lt;a href=&quot;compute-next&quot;&gt;computeNext을&lt;/a&gt; 반복자를 구현하기 위해 호출 &lt;a href=&quot;done&quot;&gt;할&lt;/a&gt; 반복이 완료되면.</target>
        </trans-unit>
        <trans-unit id="19e053ed1d26677db3c1fac7c3736abed6ea9733" translate="yes" xml:space="preserve">
          <source>A base exception class for file system exceptions.</source>
          <target state="translated">파일 시스템 예외에 대한 기본 예외 클래스.</target>
        </trans-unit>
        <trans-unit id="17d2682da31f89530133e0830b02d6e277febabd" translate="yes" xml:space="preserve">
          <source>A basic Kotlin/Native application</source>
          <target state="translated">기본 Kotlin / 네이티브 응용 프로그램</target>
        </trans-unit>
        <trans-unit id="d974a0fa34d0efebf1481353e01453259f737f6f" translate="yes" xml:space="preserve">
          <source>A bound callable reference to a constructor of an &lt;a href=&quot;nested-classes#inner-classes&quot;&gt;&lt;em&gt;inner&lt;/em&gt; class&lt;/a&gt; can be obtained by providing an instance of the outer class:</source>
          <target state="translated">외부 클래스의 인스턴스를 제공하면 &lt;a href=&quot;nested-classes#inner-classes&quot;&gt;&lt;em&gt;내부&lt;/em&gt; 클래스&lt;/a&gt; 의 생성자에 대한 바운드 호출 가능 참조를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f7d449e106c2dd01f7bad1cb9f1a3185c3df00be" translate="yes" xml:space="preserve">
          <source>A bound callable reference to a member of &lt;code&gt;this&lt;/code&gt; can now be written without explicit receiver, &lt;code&gt;::foo&lt;/code&gt; instead of &lt;code&gt;this::foo&lt;/code&gt;. This also makes callable references more convenient to use in lambdas where you refer to a member of the outer receiver.</source>
          <target state="translated">회원에 대한 바인딩 호출 기준 &lt;code&gt;this&lt;/code&gt; 지금은 명시 적 수신기없이 쓸 수있다 &lt;code&gt;::foo&lt;/code&gt; 대신 &lt;code&gt;this::foo&lt;/code&gt; . 또한 외부 수신기의 멤버를 참조하는 람다에서 호출 가능 참조를보다 편리하게 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="179cae9f139dd3a68d9be43852f79dc73381690e" translate="yes" xml:space="preserve">
          <source>A builder function for &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/index.html&quot;&gt;Flow&lt;/a&gt; type is called &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flow.html&quot;&gt;flow&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/index.html&quot;&gt;흐름&lt;/a&gt; 유형에 대한 작성기 함수를 흐름 이라고 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flow.html&quot;&gt;합니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="af54ed951dc6c0df7451d7934b4ee5900cc312ff" translate="yes" xml:space="preserve">
          <source>A class and some of its members may be declared &lt;em&gt;abstract&lt;/em&gt;. An abstract member does not have an implementation in its class. Note that we do not need to annotate an abstract class or function with open &amp;ndash; it goes without saying.</source>
          <target state="translated">클래스와 그 멤버 중 일부는 &lt;em&gt;abstract&lt;/em&gt; 로 선언 될 수 있습니다 . 추상 멤버는 해당 클래스에 구현이 없습니다. 우리는 추상 클래스 나 함수를 open으로 주석을 달 필요가 없습니다. 그것은 말할 것도 없습니다.</target>
        </trans-unit>
        <trans-unit id="2d916b17d56fbffcf5346b00e40154040ae10b2d" translate="yes" xml:space="preserve">
          <source>A class in Kotlin can have a &lt;strong&gt;primary constructor&lt;/strong&gt; and one or more &lt;strong&gt;secondary constructors&lt;/strong&gt;. The primary constructor is part of the class header: it goes after the class name (and optional type parameters).</source>
          <target state="translated">Kotlin의 클래스에는 &lt;strong&gt;기본 생성자&lt;/strong&gt; 와 하나 이상의 &lt;strong&gt;보조 생성자가있을 수&lt;/strong&gt; 있습니다. 기본 생성자는 클래스 헤더의 일부입니다. 클래스 이름 (및 선택적 유형 매개 변수) 뒤에옵니다.</target>
        </trans-unit>
        <trans-unit id="2581bdce7795bc5c7972f832dbccf073db572d51" translate="yes" xml:space="preserve">
          <source>A class may be marked as &lt;em&gt;inner&lt;/em&gt; to be able to access members of outer class. Inner classes carry a reference to an object of an outer class:</source>
          <target state="translated">클래스는 외부 클래스의 멤버에 액세스 할 수 있도록 &lt;em&gt;내부&lt;/em&gt; 로 표시 될 수 있습니다 . 내부 클래스에는 외부 클래스의 객체에 대한 참조가 있습니다.</target>
        </trans-unit>
        <trans-unit id="92d226d1baad9cba3a94880cd52b6b81a790b2eb" translate="yes" xml:space="preserve">
          <source>A class or object can implement one or more interfaces</source>
          <target state="translated">클래스 또는 객체는 하나 이상의 인터페이스를 구현할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="6255cfd7b0db95e252bcab8e422391b787945fb5" translate="yes" xml:space="preserve">
          <source>A classifier is either a class or a type parameter.</source>
          <target state="translated">분류기는 클래스 또는 유형 매개 변수입니다.</target>
        </trans-unit>
        <trans-unit id="143cccd856d38d332ea2321a224af138247f001f" translate="yes" xml:space="preserve">
          <source>A collection of groups matched by the regular expression.</source>
          <target state="translated">정규식과 일치하는 그룹 모음입니다.</target>
        </trans-unit>
        <trans-unit id="eee2f18e3c71ecff01d92bb485de071476c1514d" translate="yes" xml:space="preserve">
          <source>A collection of random and frequently used idioms in Kotlin. If you have a favorite idiom, contribute it by sending a pull request.</source>
          <target state="translated">코 틀린에서 자주 사용되는 임의의 관용구 모음. 당신이 좋아하는 관용구가있는 경우, 풀 요청을 보내 그것을 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="511cb0e51ab5e85b5eb1e5d405f7b137a592f5ca" translate="yes" xml:space="preserve">
          <source>A collection that holds pairs of objects (keys and values) and supports efficiently retrieving the value corresponding to each key. Map keys are unique; the map holds only one value for each key. Methods in this interface support only read-only access to the map; read-write access is supported through the &lt;a href=&quot;-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt; interface.</source>
          <target state="translated">객체 쌍 (키 및 값)을 보유하고 각 키에 해당하는 값을 효율적으로 검색하도록 지원하는 컬렉션입니다. 맵 키는 고유합니다. 지도는 각 키에 대해 하나의 값만 보유합니다. 이 인터페이스의 메소드는 맵에 대한 읽기 전용 액세스 만 지원합니다. 읽기 / 쓰기 액세스는 &lt;a href=&quot;-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt; 인터페이스를 통해 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="01996685e742dc461c512df4e58874c924c73fb3" translate="yes" xml:space="preserve">
          <source>A collection that holds pairs of objects (keys and values) and supports efficiently retrieving the value corresponding to each key. Map keys are unique; the map holds only one value for each key. Methods in this interface support only read-only access to the map; read-write access is supported through the &lt;a href=&quot;../-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt; interface.</source>
          <target state="translated">객체 쌍 (키 및 값)을 보유하고 각 키에 해당하는 값을 효율적으로 검색하도록 지원하는 컬렉션입니다. 맵 키는 고유합니다. 지도는 각 키에 대해 하나의 값만 보유합니다. 이 인터페이스의 메소드는 맵에 대한 읽기 전용 액세스 만 지원합니다. 읽기 / 쓰기 액세스는 &lt;a href=&quot;../-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt; 인터페이스를 통해 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="f85d7c05c3d6347785429ac7de5ac5f08bf6df2c" translate="yes" xml:space="preserve">
          <source>A collection that holds pairs of objects (keys and values) and supports efficiently retrieving the value corresponding to each key. Map keys are unique; the map holds only one value for each key. Methods in this interface support only read-only access to the map; read-write access is supported through the &lt;a href=&quot;../../kotlin.collections/-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt; interface.</source>
          <target state="translated">객체 쌍 (키 및 값)을 보유하고 각 키에 해당하는 값을 효율적으로 검색하도록 지원하는 컬렉션입니다. 맵 키는 고유합니다. 지도는 각 키에 대해 하나의 값만 보유합니다. 이 인터페이스의 메소드는 맵에 대한 읽기 전용 액세스 만 지원합니다. 읽기 / 쓰기 액세스는 &lt;a href=&quot;../../kotlin.collections/-mutable-map/index#kotlin.collections.MutableMap&quot;&gt;MutableMap&lt;/a&gt; 인터페이스를 통해 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="c69b205e4aa0cebe9a9490cfb22f55fa6f540821" translate="yes" xml:space="preserve">
          <source>A collection usually contains a number of objects (this number may also be zero) of the same type. Objects in a collection are called &lt;em&gt;elements&lt;/em&gt; or &lt;em&gt;items&lt;/em&gt;. For example, all the students in a department form a collection that can be used to calculate their average age. The following collection types are relevant for Kotlin:</source>
          <target state="translated">컬렉션에는 일반적으로 같은 유형의 여러 개체 (이 숫자는 0 일 수도 있음)가 포함됩니다. 컬렉션의 개체를 &lt;em&gt;요소&lt;/em&gt; 또는 &lt;em&gt;항목&lt;/em&gt; 이라고 &lt;em&gt;합니다&lt;/em&gt; . 예를 들어, 부서의 모든 학생들은 평균 연령을 계산하는 데 사용할 수있는 모음을 구성합니다. Kotlin과 관련된 컬렉션 유형은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d9caa38254a6fc6ec61af9b4589b3cca8bde8b92" translate="yes" xml:space="preserve">
          <source>A collector can use Kotlin's &lt;a href=&quot;../exceptions&quot;&gt;&lt;code&gt;try/catch&lt;/code&gt;&lt;/a&gt; block to handle exceptions:</source>
          <target state="translated">수집기는 Kotlin의 &lt;a href=&quot;../exceptions&quot;&gt; &lt;code&gt;try/catch&lt;/code&gt; &lt;/a&gt; 블록을 사용하여 예외를 처리 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4054ffff17c108064dd715ed5d2f1f7b67248a55" translate="yes" xml:space="preserve">
          <source>A common backend infrastructure also opens the door for multiplatform compiler extensions. You will be able to plug into the pipeline and add custom processing and transformations that will automatically work for all platforms.</source>
          <target state="translated">공통 백엔드 인프라는 또한 다중 플랫폼 컴파일러 확장의 문을 엽니 다. 파이프 라인에 연결하고 모든 플랫폼에서 자동으로 작동하는 사용자 지정 처리 및 변환을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="175c59b19f03ab5d1567024326bde1676fafedb1" translate="yes" xml:space="preserve">
          <source>A companion object is initialized when the class is loaded (typically the first time it's referenced by other code that is being executed), in a thread-safe manner. You can omit the name, in which case the name defaults to &lt;code&gt;Companion&lt;/code&gt;. A class can only have one companion object, and companion objects can not be nested.</source>
          <target state="translated">컴패니언 객체는 클래스가로드 될 때 (일반적으로 실행중인 다른 코드에서 처음 참조 할 때) 스레드로부터 안전한 방식으로 초기화됩니다. 이름을 생략 할 수 있으며이 경우 이름의 기본값은 &lt;code&gt;Companion&lt;/code&gt; 입니다. 클래스는 하나의 컴패니언 객체 만 가질 수 있으며 컴패니언 객체는 중첩 될 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="7964e2fe04335c945ae074d0163e64a159e17e62" translate="yes" xml:space="preserve">
          <source>A compilation can interact with several native libraries. Configure interoperability in the &lt;code&gt;cinterops&lt;/code&gt; block of the compilation with &lt;a href=&quot;mpp-dsl-reference#cinterops&quot;&gt;available parameters&lt;/a&gt;.</source>
          <target state="translated">컴파일은 여러 기본 라이브러리와 상호 작용할 수 있습니다. &lt;a href=&quot;mpp-dsl-reference#cinterops&quot;&gt;사용 가능한 매개 변수&lt;/a&gt; 를 사용 하여 컴파일 의 &lt;code&gt;cinterops&lt;/code&gt; 블록 에서 상호 운용성을 구성 합니다.</target>
        </trans-unit>
        <trans-unit id="43e56b8e00aa559396d1d511bf9a35cc2360f667" translate="yes" xml:space="preserve">
          <source>A compilation can interact with several native libraries. Interoperability with each of them can be configured in the &lt;code&gt;cinterops&lt;/code&gt; block of the compilation:</source>
          <target state="translated">컴파일은 여러 기본 라이브러리와 상호 작용할 수 있습니다. 각각의 상호 운용성 은 컴파일 의 &lt;code&gt;cinterops&lt;/code&gt; 블록 에서 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8e6fc5ba89bbf8db7bac6158034af010227b0281" translate="yes" xml:space="preserve">
          <source>A compilation has the following parameters:</source>
          <target state="translated">컴파일에는 다음과 같은 매개 변수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="c955897c3dec755f59717ad4c39677ee60212bff" translate="yes" xml:space="preserve">
          <source>A compilation per &lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;Android build variant&lt;/a&gt;, for Android targets.</source>
          <target state="translated">Android 타겟에 대한 Android &lt;a href=&quot;https://developer.android.com/studio/build/build-variants&quot;&gt;빌드 변형&lt;/a&gt; 별 컴파일입니다 .</target>
        </trans-unit>
        <trans-unit id="f6495f45d3fda071f57e947dd220c2660ee90f5d" translate="yes" xml:space="preserve">
          <source>A constant holding the &quot;not a number&quot; value of Double.</source>
          <target state="translated">&quot;숫자가 아님&quot;값을 Double로 유지하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="30692a914f3e7f3ae14fe112947452531613b0bd" translate="yes" xml:space="preserve">
          <source>A constant holding the &quot;not a number&quot; value of Float.</source>
          <target state="translated">Float의 &quot;숫자가 아님&quot;값을 보유하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="eb6d02a80c28dde3d1c7927befecdfe1f558438e" translate="yes" xml:space="preserve">
          <source>A constant holding the largest positive finite value of Double.</source>
          <target state="translated">최대 양의 유한 유한 값 Double을 유지하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="2989475e6cbce89ab970feadcd9e679867516672" translate="yes" xml:space="preserve">
          <source>A constant holding the largest positive finite value of Float.</source>
          <target state="translated">Float의 양수 유한 최대 값을 보유하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="9deb57dbacb37ea84980557ec3676888a4dd8cd7" translate="yes" xml:space="preserve">
          <source>A constant holding the maximum value an instance of Byte can have.</source>
          <target state="translated">Byte 인스턴스가 가질 수있는 최대 값을 보유하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="e9237724f82c02a362d8804f1d73d8111b1e5de4" translate="yes" xml:space="preserve">
          <source>A constant holding the maximum value an instance of Int can have.</source>
          <target state="translated">Int 인스턴스가 가질 수있는 최대 값을 유지하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="880d96fa44a753baecc4838563508808066ea7c7" translate="yes" xml:space="preserve">
          <source>A constant holding the maximum value an instance of Long can have.</source>
          <target state="translated">Long 인스턴스가 가질 수있는 최대 값을 보유하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="6a5ae584582a42ae1892a5735c2c49965bffbc8c" translate="yes" xml:space="preserve">
          <source>A constant holding the maximum value an instance of Short can have.</source>
          <target state="translated">Short 인스턴스가 가질 수있는 최대 값을 보유하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="89c142885f7633d7c3f1e70f3b5624b1ce064ec8" translate="yes" xml:space="preserve">
          <source>A constant holding the maximum value an instance of UByte can have.</source>
          <target state="translated">UByte 인스턴스가 가질 수있는 최대 값을 보유하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="eaa523f900a184b2b64e09c8a0475f7fa4930003" translate="yes" xml:space="preserve">
          <source>A constant holding the maximum value an instance of UInt can have.</source>
          <target state="translated">UInt 인스턴스가 가질 수있는 최대 값을 유지하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="9692fe911e65777a2c7cfd9a9e8400f4bc8ea057" translate="yes" xml:space="preserve">
          <source>A constant holding the maximum value an instance of ULong can have.</source>
          <target state="translated">ULong 인스턴스가 가질 수있는 최대 값을 유지하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="9bebce3b30412feff7d8abce8c3364be5cc0cdbb" translate="yes" xml:space="preserve">
          <source>A constant holding the maximum value an instance of UShort can have.</source>
          <target state="translated">UShort 인스턴스가 가질 수있는 최대 값을 보유하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="bee42d0098fafd184e2e83397f1d2a513cb2d77e" translate="yes" xml:space="preserve">
          <source>A constant holding the minimum value an instance of Byte can have.</source>
          <target state="translated">Byte 인스턴스가 가질 수있는 최소값을 보유하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="d58d9f259e307998f48730c6b7fbe854067f6bfd" translate="yes" xml:space="preserve">
          <source>A constant holding the minimum value an instance of Int can have.</source>
          <target state="translated">Int 인스턴스가 가질 수있는 최소값을 유지하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="c6e578e54d55eab5518b163f87c31c1201e72d84" translate="yes" xml:space="preserve">
          <source>A constant holding the minimum value an instance of Long can have.</source>
          <target state="translated">Long 인스턴스가 가질 수있는 최소값을 보유하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="868ab3bc40bc62a822c10b5833cc89e85a51628a" translate="yes" xml:space="preserve">
          <source>A constant holding the minimum value an instance of Short can have.</source>
          <target state="translated">Short 인스턴스가 가질 수있는 최소값을 보유하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="ccf44b38400048d909e04005a6fd563ac0bb50fd" translate="yes" xml:space="preserve">
          <source>A constant holding the minimum value an instance of UByte can have.</source>
          <target state="translated">UByte 인스턴스가 가질 수있는 최소값을 보유하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="4a3b6e9f1701d7413715273c33ae58e20aab5bf6" translate="yes" xml:space="preserve">
          <source>A constant holding the minimum value an instance of UInt can have.</source>
          <target state="translated">UInt 인스턴스가 가질 수있는 최소값을 유지하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="3d6d20e63abee79a15d65601c3502054a1bbe849" translate="yes" xml:space="preserve">
          <source>A constant holding the minimum value an instance of ULong can have.</source>
          <target state="translated">ULong 인스턴스가 가질 수있는 최소값을 유지하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="c1175037c9a4f35c03e808e0f86cd92e217f15b6" translate="yes" xml:space="preserve">
          <source>A constant holding the minimum value an instance of UShort can have.</source>
          <target state="translated">UShort 인스턴스가 가질 수있는 최소값을 유지하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="8544ed9c53cc314b5929a7e498f12172f1de72c6" translate="yes" xml:space="preserve">
          <source>A constant holding the negative infinity value of Double.</source>
          <target state="translated">음의 무한대 값 Double을 유지하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="b5a021a6628a66324280168a3ef6aeab4793ae7a" translate="yes" xml:space="preserve">
          <source>A constant holding the negative infinity value of Float.</source>
          <target state="translated">Float의 음의 무한대 값을 보유하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="dc990a7b75c1fc62fc79ffba1be1662475beb71c" translate="yes" xml:space="preserve">
          <source>A constant holding the positive infinity value of Double.</source>
          <target state="translated">양의 무한대 값 Double을 유지하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="5a802ddd44d12a1f97ea67dc5856ed6b496d2f0c" translate="yes" xml:space="preserve">
          <source>A constant holding the positive infinity value of Float.</source>
          <target state="translated">Float의 양의 무한대 값을 보유하는 상수입니다.</target>
        </trans-unit>
        <trans-unit id="fa8e069cbd16134923ae756d8c767a97045aa38a" translate="yes" xml:space="preserve">
          <source>A constant holding the smallest &lt;em&gt;positive&lt;/em&gt; nonzero value of Double.</source>
          <target state="translated">0이 아닌 작은 &lt;em&gt;양&lt;/em&gt; 의 Double 값을 유지하는 상수 입니다.</target>
        </trans-unit>
        <trans-unit id="4b47db568bf42f4dfe288f9b3dc0feeaa0783de2" translate="yes" xml:space="preserve">
          <source>A constant holding the smallest &lt;em&gt;positive&lt;/em&gt; nonzero value of Float.</source>
          <target state="translated">0 보다 작은 &lt;em&gt;양&lt;/em&gt; 의 Float 값을 유지하는 상수 입니다.</target>
        </trans-unit>
        <trans-unit id="926498e55ee5fc08eae4bd245e2c4e41ede1cc0d" translate="yes" xml:space="preserve">
          <source>A constructor can also have a visibility modifier. If you want to place one on the primary constructor (which you might want to do if you have a number of secondary constructors which all invoke a complicated primary constructor that you don't want to expose), you need to include the &lt;code&gt;constructor&lt;/code&gt; keyword: &lt;code&gt;class Person private constructor(val name: String)&lt;/code&gt;.</source>
          <target state="translated">생성자는 또한 가시성 수정자를 가질 수 있습니다. 기본 생성자에 배치하려는 경우 (복수하지 않으려는 복잡한 기본 생성자를 모두 호출하는 여러 개의 보조 생성자가있는 경우 수행하려는 경우) &lt;code&gt;constructor&lt;/code&gt; 키워드 를 포함해야 합니다. &lt;code&gt;class Person private constructor(val name: String)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3d9df8683540fa7fd7e8194d96b7bd3db3b911b3" translate="yes" xml:space="preserve">
          <source>A contravariant type parameter may be used in the converse situations. It is left as an exercise to the reader to figure out the justifications for why these member signatures are legal:</source>
          <target state="translated">컨버스 변형 타입 파라미터는 컨버스 상황에서 사용될 수있다. 이러한 회원 서명이 합법적 인 이유에 대한 정당성을 파악하는 것은 독자의 연습으로 남아 있습니다.</target>
        </trans-unit>
        <trans-unit id="5670eaf9dbc46e20b3dd5b3918e420cebd73b580" translate="yes" xml:space="preserve">
          <source>A coroutine is effectively a light-weight thread that can be suspended and resumed later. Coroutines are supported through &lt;a href=&quot;coroutines-overview#suspending-functions&quot;&gt;&lt;em&gt;suspending functions&lt;/em&gt;&lt;/a&gt;: a call to such a function can potentially suspend a coroutine, and to start a new coroutine we usually use an anonymous suspending functions (i.e. suspending lambdas).</source>
          <target state="translated">코 루틴은 사실상 가벼운 나사산으로 나중에 중단하고 재개 할 수 있습니다. 코 루틴은 &lt;a href=&quot;coroutines-overview#suspending-functions&quot;&gt;&lt;em&gt;일시 중단 함수를&lt;/em&gt;&lt;/a&gt; 통해 지원됩니다 . 이러한 &lt;em&gt;함수에&lt;/em&gt; 대한 호출은 잠재적으로 코 루틴을 일시 중단 할 수 있으며 새 코 루틴을 시작하기 위해 일반적으로 익명 일시 중단 기능 (즉, 람다 일시 중단)을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="d4d17e0e3b6993ba4a64e4ec4230c5601c955d22" translate="yes" xml:space="preserve">
          <source>A couple of important points:</source>
          <target state="translated">중요한 몇 가지 사항 :</target>
        </trans-unit>
        <trans-unit id="65767210ea545561ad75a99a78aaf74c4aba88fd" translate="yes" xml:space="preserve">
          <source>A default value is defined using the &lt;code&gt;=&lt;/code&gt; after the type.</source>
          <target state="translated">기본값 은 유형 뒤에 &lt;code&gt;=&lt;/code&gt; 를 사용하여 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="45f64193144cbc554e0a38cc5c4c77bcd8e4a9af" translate="yes" xml:space="preserve">
          <source>A dependency on a Kotlin module like &lt;code&gt;kotlin-stdlib&lt;/code&gt; or &lt;code&gt;kotlin-reflect&lt;/code&gt; may be added with the notation &lt;code&gt;kotlin(&quot;stdlib&quot;)&lt;/code&gt;, which is a shorthand for &lt;code&gt;&quot;org.jetbrains.kotlin:kotlin-stdlib&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;kotlin-stdlib&lt;/code&gt; 또는 &lt;code&gt;kotlin-reflect&lt;/code&gt; 와 같은 Kotlin 모듈에 대한 종속성 은 &lt;code&gt;&quot;org.jetbrains.kotlin:kotlin-stdlib&quot;&lt;/code&gt; 의 약어 인 &lt;code&gt;kotlin(&quot;stdlib&quot;)&lt;/code&gt; 표기법으로 추가 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4c8f0a3e95c302e9c1986f2e352bbcb25f13c18f" translate="yes" xml:space="preserve">
          <source>A dependency on a standard library (&lt;code&gt;stdlib&lt;/code&gt;) in each source set is added automatically. The version of the standard library is the same as the version of the &lt;code&gt;kotlin-multiplatform&lt;/code&gt; plugin.</source>
          <target state="translated">각 소스 세트 의 표준 라이브러리 ( &lt;code&gt;stdlib&lt;/code&gt; )에 대한 종속성 이 자동으로 추가됩니다. 표준 라이브러리의 버전은 &lt;code&gt;kotlin-multiplatform&lt;/code&gt; 플러그인 의 버전과 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="0e3688bf873d9ef9fcd62fe81961f7ebb29339a2" translate="yes" xml:space="preserve">
          <source>A dependency on a standard library (&lt;code&gt;stdlib&lt;/code&gt;) in each source set is added automatically. The version of the standard library is the same as the version of the Kotlin Gradle plugin.</source>
          <target state="translated">각 소스 세트 의 표준 라이브러리 ( &lt;code&gt;stdlib&lt;/code&gt; )에 대한 종속성 이 자동으로 추가됩니다. 표준 라이브러리의 버전은 Kotlin Gradle 플러그인의 버전과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="91b101275ae9e945ac8ffc8ad58a3c8e8fca496a" translate="yes" xml:space="preserve">
          <source>A deprecated API element is not recommended to use, typically because it's being phased out or a better alternative exists.</source>
          <target state="translated">더 이상 사용되지 않는 API 요소는 사용하지 않는 것이 좋습니다. 일반적으로 단계적으로 중단되었거나 더 나은 대안이 있기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="2e3e3a4dd2b277b86435f56d946bc991f64c9d8c" translate="yes" xml:space="preserve">
          <source>A destructuring declaration is compiled down to the following code:</source>
          <target state="translated">파괴 선언은 다음 코드로 컴파일됩니다.</target>
        </trans-unit>
        <trans-unit id="d95792d9c6277144d99fd0592b6d3cbc9cd64da7" translate="yes" xml:space="preserve">
          <source>A discriminated union that encapsulates a successful outcome with a value of type &lt;a href=&quot;-result/index#T&quot;&gt;T&lt;/a&gt; or a failure with an arbitrary &lt;a href=&quot;-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt; exception.</source>
          <target state="translated">&lt;a href=&quot;-result/index#T&quot;&gt;T&lt;/a&gt; 유형의 값으로 성공적인 결과를 캡슐화 하거나 임의의 &lt;a href=&quot;-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt; 예외가 있는 실패 를 캡슐화하는 구별 된 공용체입니다 .</target>
        </trans-unit>
        <trans-unit id="9f9d63d955781e1d6fd12dc73992e894ff17809b" translate="yes" xml:space="preserve">
          <source>A discriminated union that encapsulates a successful outcome with a value of type &lt;a href=&quot;../-result/index#T&quot;&gt;T&lt;/a&gt; or a failure with an arbitrary &lt;a href=&quot;../-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt; exception.</source>
          <target state="translated">&lt;a href=&quot;../-result/index#T&quot;&gt;T&lt;/a&gt; 유형의 값으로 성공적인 결과를 캡슐화 하거나 임의의 &lt;a href=&quot;../-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt; 예외가 있는 실패 를 캡슐화하는 구별 된 공용체입니다 .</target>
        </trans-unit>
        <trans-unit id="3e890ea24c7fd05e49335459cab390da23d6bdae" translate="yes" xml:space="preserve">
          <source>A discriminated union that encapsulates a successful outcome with a value of type &lt;a href=&quot;index#T&quot;&gt;T&lt;/a&gt; or a failure with an arbitrary &lt;a href=&quot;../-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt; exception.</source>
          <target state="translated">&lt;a href=&quot;index#T&quot;&gt;T&lt;/a&gt; 유형의 값으로 성공적인 결과를 캡슐화 하거나 임의의 &lt;a href=&quot;../-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt; 예외가 있는 실패 를 캡슐화하는 구별 된 공용체입니다 .</target>
        </trans-unit>
        <trans-unit id="b1ea0dc6a70400cbd441b35a9a471ecf74e22467" translate="yes" xml:space="preserve">
          <source>A discriminated union that encapsulates successful outcome with a value of type &lt;a href=&quot;-result/index#T&quot;&gt;T&lt;/a&gt; or a failure with an arbitrary &lt;a href=&quot;-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt; exception.</source>
          <target state="translated">&lt;a href=&quot;-result/index#T&quot;&gt;T&lt;/a&gt; 유형의 값으로 성공적인 결과를 캡슐화 하거나 임의의 &lt;a href=&quot;-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt; 예외로 실패를 식별하는 구별 된 공용체 .</target>
        </trans-unit>
        <trans-unit id="8b7b95d370a1a806d2326971406b36261b873df9" translate="yes" xml:space="preserve">
          <source>A discriminated union that encapsulates successful outcome with a value of type &lt;a href=&quot;../-result/index#T&quot;&gt;T&lt;/a&gt; or a failure with an arbitrary &lt;a href=&quot;../-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt; exception.</source>
          <target state="translated">&lt;a href=&quot;../-result/index#T&quot;&gt;T&lt;/a&gt; 유형의 값으로 성공적인 결과를 캡슐화 하거나 임의의 &lt;a href=&quot;../-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt; 예외로 실패를 식별하는 구별 된 공용체 .</target>
        </trans-unit>
        <trans-unit id="b814b7664581cb8b41c4524734427f1204119e25" translate="yes" xml:space="preserve">
          <source>A discriminated union that encapsulates successful outcome with a value of type &lt;a href=&quot;index#T&quot;&gt;T&lt;/a&gt; or a failure with an arbitrary &lt;a href=&quot;../-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt; exception.</source>
          <target state="translated">&lt;a href=&quot;index#T&quot;&gt;T&lt;/a&gt; 유형의 값으로 성공적인 결과를 캡슐화 하거나 임의의 &lt;a href=&quot;../-throwable/index#kotlin.Throwable&quot;&gt;Throwable&lt;/a&gt; 예외로 실패를 식별하는 구별 된 공용체 .</target>
        </trans-unit>
        <trans-unit id="885ace999309d3ae610756b592848e6502039c1c" translate="yes" xml:space="preserve">
          <source>A dynamic call always returns &lt;code&gt;dynamic&lt;/code&gt; as a result, so we can chain such calls freely:</source>
          <target state="translated">동적 호출은 항상 &lt;code&gt;dynamic&lt;/code&gt; 으로 결과를 반환 하므로 이러한 호출을 자유롭게 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bc05cf7534aa622c654bef932ad57f70d8adb60e" translate="yes" xml:space="preserve">
          <source>A dynamic call always returns &lt;code&gt;dynamic&lt;/code&gt; as a result. This means such calls can be chained freely:</source>
          <target state="translated">동적 호출은 항상 결과 로 &lt;code&gt;dynamic&lt;/code&gt; 을 반환합니다 . 이는 이러한 호출을 자유롭게 연결할 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="151037307ae97fa4bf6e5eff252ac79d71442a79" translate="yes" xml:space="preserve">
          <source>A familiar error pops up:</source>
          <target state="translated">익숙한 오류가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="70a9d9b5433551b91cd818143cf29e9791b6c4f1" translate="yes" xml:space="preserve">
          <source>A few things are going on in this file, let's go through them one by one. The first entry is &lt;code&gt;headers&lt;/code&gt; which is the list of header files that we want to generate Kotlin stubs for. We can add multiple files to this entry, separating each one with a &lt;code&gt;\&lt;/code&gt; on a new line. In our case we only want &lt;code&gt;curl.h&lt;/code&gt;. The files we are referencing need to be relative to the folder where the definition file is, or be available on the system path (in our case it would be &lt;code&gt;/usr/include/curl&lt;/code&gt;).</source>
          <target state="translated">이 파일에서 몇 가지 일이 진행되고 있습니다. 하나씩 살펴 보겠습니다. 첫 번째 항목은 Kotlin 스텁을 생성하려는 헤더 파일 목록 인 &lt;code&gt;headers&lt;/code&gt; 입니다. 이 항목에 여러 파일을 추가하여 각 파일을 새 줄에 &lt;code&gt;\&lt;/code&gt; 로 구분할 수 있습니다 . 우리의 경우 &lt;code&gt;curl.h&lt;/code&gt; 만 원합니다 . 우리가 참조하는 파일은 정의 파일이있는 폴더에 상대적이거나 시스템 경로에서 사용 가능해야합니다 (이 경우 &lt;code&gt;/usr/include/curl&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="3be77c9ceb47de4c8ff3ed42ba31103978f0ece3" translate="yes" xml:space="preserve">
          <source>A frozen shared reference to a Kotlin object.</source>
          <target state="translated">Kotlin 개체에 대한 고정 된 공유 참조입니다.</target>
        </trans-unit>
        <trans-unit id="510af740ade381ab5a1d2be5727f07ffe4d836f3" translate="yes" xml:space="preserve">
          <source>A full example that shows how to integrate Kotlin with DCE and webpack to get a small bundle, can be found &lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/js-dce&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Kotlin을 DCE 및 웹팩과 통합하여 작은 번들을 얻는 방법을 보여주는 전체 예제는 &lt;a href=&quot;https://github.com/JetBrains/kotlin-examples/tree/master/gradle/js-dce&quot;&gt;여기&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="29b239dcdbc1ff83c7abe8c86bbc963f9e130fe3" translate="yes" xml:space="preserve">
          <source>A function can take an arbitrary number of arguments, similarly to &lt;code&gt;*args&lt;/code&gt; in Python, but they must all be of the same type. Unlike Python, you may declare other positional parameters after the variadic one, but there can be at most one variadic parameter. If its type is &lt;code&gt;X&lt;/code&gt;, the type of the argument will be &lt;code&gt;XArray&lt;/code&gt; if &lt;code&gt;X&lt;/code&gt; is a primitive type and &lt;code&gt;Array&amp;lt;X&amp;gt;&lt;/code&gt; if not.</source>
          <target state="translated">함수는 파이썬의 &lt;code&gt;*args&lt;/code&gt; 와 마찬가지로 임의의 수의 인수를 취할 수 있지만 모두 같은 유형이어야합니다. 파이썬과는 달리, 가변성 변수 뒤에 다른 위치 매개 변수를 선언 할 수 있지만 가변성 변수는 최대 하나만있을 수 있습니다. 유형이 &lt;code&gt;X&lt;/code&gt; 인 경우 인수 유형은 &lt;code&gt;X&lt;/code&gt; 가 기본 유형 인 경우 &lt;code&gt;XArray&lt;/code&gt; 이고 그렇지 않은 경우 &lt;code&gt;Array&amp;lt;X&amp;gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2b72bc5ee521f65f909bfc29c7a45a7202b738a5" translate="yes" xml:space="preserve">
          <source>A function declared inside a class is called a &lt;em&gt;member function&lt;/em&gt; of that class. Like in Python, every invocation of a member function must be performed on an instance of the class, and the instance will be available during the execution of the function - but unlike Python, the function signature doesn't declare that: there is no explicit &lt;code&gt;self&lt;/code&gt; parameter. Instead, every member function can use the keyword &lt;code&gt;this&lt;/code&gt; to reference the current instance, without declaring it. Unlike Python, as long as there is no name conflict with an identically-named parameter or local variable, &lt;code&gt;this&lt;/code&gt; can be omitted. If we do this inside a &lt;code&gt;Person&lt;/code&gt; class with a &lt;code&gt;name&lt;/code&gt; property:</source>
          <target state="translated">클래스 안에서 선언 된 &lt;em&gt;함수&lt;/em&gt; 를 해당 클래스 의 &lt;em&gt;멤버 함수&lt;/em&gt; 라고합니다 . 파이썬과 마찬가지로 멤버 함수의 모든 호출은 클래스의 인스턴스에서 수행되어야하며 함수 실행 중에 인스턴스를 사용할 수 있습니다. 그러나 파이썬과 달리 함수 서명은 다음을 선언하지 않습니다. &lt;code&gt;self&lt;/code&gt; 매개 변수. 대신 모든 멤버 함수는 &lt;code&gt;this&lt;/code&gt; 키워드를 사용하여 선언하지 않고 현재 인스턴스를 참조 할 수 있습니다 . Python과 달리 이름이 동일한 매개 변수 또는 로컬 변수와 이름이 충돌하지 않는 &lt;code&gt;this&lt;/code&gt; 를 생략 할 수 있습니다. &lt;code&gt;name&lt;/code&gt; 속성 이있는 &lt;code&gt;Person&lt;/code&gt; 클래스 내에서이 작업을 수행하는 경우 :</target>
        </trans-unit>
        <trans-unit id="1f3fb42e5f8df4a5f2decbeb129c38ad34d7032e" translate="yes" xml:space="preserve">
          <source>A function declaring the &lt;code&gt;callsInPlace&lt;/code&gt; effect must be &lt;em&gt;inline&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;callsInPlace&lt;/code&gt; 효과를 선언하는 함수 는 &lt;em&gt;인라인&lt;/em&gt; 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="9b3cd4921ed5804be9b7bb2ba6390a9f36c60faa" translate="yes" xml:space="preserve">
          <source>A function is inlined and never gets called directly (which happens always except for a few situations).</source>
          <target state="translated">함수는 인라인되고 직접 호출되지 않습니다 (몇 가지 상황을 제외하고 항상 발생 함).</target>
        </trans-unit>
        <trans-unit id="2e4ec01c31a9366c1d3314f2cb2ad451913ce370" translate="yes" xml:space="preserve">
          <source>A function is said to call its functional parameter in place, if the functional parameter is only invoked while the execution has not been returned from the function, and the functional parameter cannot be invoked after the function is completed.</source>
          <target state="translated">함수에서 실행이 리턴되지 않은 동안 함수 매개 변수 만 호출되고 함수가 완료된 후에 함수 매개 변수를 호출 할 수없는 경우 함수는 해당 함수 매개 변수를 제 위치에서 호출한다고합니다.</target>
        </trans-unit>
        <trans-unit id="04a060e0c95f4ebd4ecee46f2d26f3e43540876c" translate="yes" xml:space="preserve">
          <source>A function literal with receiver is perhaps easiest to think of as an extension function in the form of a lambda expression. The declaration looks like an ordinary lambda expression; what makes it take a receiver is the context - it must be passed to a function that takes a function with receiver as a parameter, or assigned to a variable/property whose type is a function type with receiver. The only way to use a function with receiver is to invoke it on an instance of the receiver class, as if it were a member function or extension function. For example:</source>
          <target state="translated">수신자가 포함 된 함수 리터럴은 람다 식 형태의 확장 함수로 생각하기가 가장 쉽습니다. 선언은 일반적인 람다 식처럼 보입니다. 리시버를받는 것은 컨텍스트입니다. 리시버를 매개 변수로 사용하여 함수를받는 함수에 전달되거나 유형이 리시버가있는 함수 유형 인 변수 / 프로퍼티에 지정되어야합니다. 수신자와 함께 함수를 사용하는 유일한 방법은 마치 멤버 함수 또는 확장 함수 인 것처럼 수신자 클래스의 인스턴스에서 함수를 호출하는 것입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fe8fc5bd10645d91436f9c70cc1976194bd5f890" translate="yes" xml:space="preserve">
          <source>A function parameter is called in place, but it's unknown how many times it can be called.</source>
          <target state="translated">함수 매개 변수가 호출되었지만 호출 할 수있는 횟수는 알 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="0883615027d70df853616a3da883adc37485075c" translate="yes" xml:space="preserve">
          <source>A function parameter will be invoked exactly one time.</source>
          <target state="translated">함수 매개 변수는 정확히 한 번만 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="c0d39d6c5be7243d66cadcac831bd6f10f533753" translate="yes" xml:space="preserve">
          <source>A function parameter will be invoked one or more times.</source>
          <target state="translated">함수 매개 변수가 한 번 이상 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="237b19a01d8b8d078f93e56a90a19c09f844bdf8" translate="yes" xml:space="preserve">
          <source>A function parameter will be invoked one time or not invoked at all.</source>
          <target state="translated">함수 매개 변수는 한 번만 호출되거나 전혀 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4c81bb38da4b30bef4cd03c6d961029dba5483b5" translate="yes" xml:space="preserve">
          <source>A function that takes a &lt;code&gt;dynamic&lt;/code&gt; parameter can take arguments of any type.</source>
          <target state="translated">취하는 함수 &lt;code&gt;dynamic&lt;/code&gt; 파라미터는 임의의 타입의 인수를 취할 수있다.</target>
        </trans-unit>
        <trans-unit id="8f00b34f2663621671200463d2cac2aa55d7e97c" translate="yes" xml:space="preserve">
          <source>A generic collection of elements that supports adding and removing elements.</source>
          <target state="translated">요소 추가 및 제거를 지원하는 일반적인 요소 컬렉션입니다.</target>
        </trans-unit>
        <trans-unit id="bbff83bb702ed0f6941e7ca039bc7bd867359b5a" translate="yes" xml:space="preserve">
          <source>A generic collection of elements. Methods in this interface support only read-only access to the collection; read/write access is supported through the &lt;a href=&quot;-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt; interface.</source>
          <target state="translated">일반적인 요소 모음. 이 인터페이스의 메소드는 콜렉션에 대한 읽기 전용 액세스 만 지원합니다. &lt;a href=&quot;-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt; 인터페이스를 통해 읽기 / 쓰기 액세스가 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="abea4bf71869abd4b455f4e16c8397c530a81f82" translate="yes" xml:space="preserve">
          <source>A generic collection of elements. Methods in this interface support only read-only access to the collection; read/write access is supported through the &lt;a href=&quot;../-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt; interface.</source>
          <target state="translated">일반적인 요소 모음. 이 인터페이스의 메소드는 콜렉션에 대한 읽기 전용 액세스 만 지원합니다. &lt;a href=&quot;../-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt; 인터페이스를 통해 읽기 / 쓰기 액세스가 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="b98a2fbb590152dca20ad79daa75978b2eac2dda" translate="yes" xml:space="preserve">
          <source>A generic collection of elements. Methods in this interface support only read-only access to the collection; read/write access is supported through the &lt;a href=&quot;../../kotlin.collections/-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt; interface.</source>
          <target state="translated">일반적인 요소 모음. 이 인터페이스의 메소드는 콜렉션에 대한 읽기 전용 액세스 만 지원합니다. &lt;a href=&quot;../../kotlin.collections/-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt; 인터페이스를 통해 읽기 / 쓰기 액세스가 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="7c38f7e29efee3c4f7385c8652c0172ab8569bbc" translate="yes" xml:space="preserve">
          <source>A generic ordered collection of elements that supports adding and removing elements.</source>
          <target state="translated">요소 추가 및 제거를 지원하는 일반적인 순서의 요소 컬렉션입니다.</target>
        </trans-unit>
        <trans-unit id="1f1affddde96d31df4551f7de92ce93f45561b90" translate="yes" xml:space="preserve">
          <source>A generic ordered collection of elements. Methods in this interface support only read-only access to the list; read/write access is supported through the &lt;a href=&quot;-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt; interface.</source>
          <target state="translated">일반적인 순서로 정렬 된 요소 모음. 이 인터페이스의 메소드는 목록에 대한 읽기 전용 액세스 만 지원합니다. &lt;a href=&quot;-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt; 인터페이스를 통해 읽기 / 쓰기 액세스가 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="dea2909eb1d1d0572168e9616d0bc2df8d12c27b" translate="yes" xml:space="preserve">
          <source>A generic ordered collection of elements. Methods in this interface support only read-only access to the list; read/write access is supported through the &lt;a href=&quot;../-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt; interface.</source>
          <target state="translated">일반적인 순서로 정렬 된 요소 모음. 이 인터페이스의 메소드는 목록에 대한 읽기 전용 액세스 만 지원합니다. &lt;a href=&quot;../-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt; 인터페이스를 통해 읽기 / 쓰기 액세스가 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="69b1b083bbdcd6a394a2a7149f189640c381fc48" translate="yes" xml:space="preserve">
          <source>A generic ordered collection of elements. Methods in this interface support only read-only access to the list; read/write access is supported through the &lt;a href=&quot;../../kotlin.collections/-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt; interface.</source>
          <target state="translated">일반적인 순서로 정렬 된 요소 모음. 이 인터페이스의 메소드는 목록에 대한 읽기 전용 액세스 만 지원합니다. &lt;a href=&quot;../../kotlin.collections/-mutable-list/index#kotlin.collections.MutableList&quot;&gt;MutableList&lt;/a&gt; 인터페이스를 통해 읽기 / 쓰기 액세스가 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="bd7063c4dd2c9689622f1ed7af757167d730223a" translate="yes" xml:space="preserve">
          <source>A generic unordered collection of elements that does not support duplicate elements, and supports adding and removing elements.</source>
          <target state="translated">중복 요소를 지원하지 않으며 요소 추가 및 제거를 지원하는 순서가없는 일반적인 요소 컬렉션입니다.</target>
        </trans-unit>
        <trans-unit id="9c0cd9b3c1101fe42ec4c546da093b3561f35c0a" translate="yes" xml:space="preserve">
          <source>A generic unordered collection of elements that does not support duplicate elements. Methods in this interface support only read-only access to the set; read/write access is supported through the &lt;a href=&quot;-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface.</source>
          <target state="translated">중복 요소를 지원하지 않는 일반적인 순서가없는 요소 컬렉션입니다. 이 인터페이스의 메소드는 세트에 대한 읽기 전용 액세스 만 지원합니다. &lt;a href=&quot;-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; 인터페이스를 통해 읽기 / 쓰기 액세스가 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="402b36a678feb8f00e85eafd3effc930783d66d2" translate="yes" xml:space="preserve">
          <source>A generic unordered collection of elements that does not support duplicate elements. Methods in this interface support only read-only access to the set; read/write access is supported through the &lt;a href=&quot;../-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface.</source>
          <target state="translated">중복 요소를 지원하지 않는 일반적인 순서가없는 요소 컬렉션입니다. 이 인터페이스의 메소드는 세트에 대한 읽기 전용 액세스 만 지원합니다. &lt;a href=&quot;../-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; 인터페이스를 통해 읽기 / 쓰기 액세스가 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="ddbe26555159afcb7715383695a1b59ee8ccd31a" translate="yes" xml:space="preserve">
          <source>A generic unordered collection of elements that does not support duplicate elements. Methods in this interface support only read-only access to the set; read/write access is supported through the &lt;a href=&quot;../../kotlin.collections/-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; interface.</source>
          <target state="translated">중복 요소를 지원하지 않는 일반적인 순서가없는 요소 컬렉션입니다. 이 인터페이스의 메소드는 세트에 대한 읽기 전용 액세스 만 지원합니다. &lt;a href=&quot;../../kotlin.collections/-mutable-set/index#kotlin.collections.MutableSet&quot;&gt;MutableSet&lt;/a&gt; 인터페이스를 통해 읽기 / 쓰기 액세스가 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="ce031fbd15cb09965c1695fb87cf32609c4660bd" translate="yes" xml:space="preserve">
          <source>A getter method, with the name calculated by prepending the &lt;code&gt;get&lt;/code&gt; prefix;</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; 접두사 를 앞에 추가하여 이름을 계산 한 getter 메소드 .</target>
        </trans-unit>
        <trans-unit id="845d21e4688c200dd8d79ba0f6fcce97e344c534" translate="yes" xml:space="preserve">
          <source>A good example is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fold_(higher-order_function)&quot;&gt;functional programming idiom &lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; for collections, which takes an initial accumulator value and a combining function and builds its return value by consecutively combining current accumulator value with each collection element, replacing the accumulator:</source>
          <target state="translated">좋은 예는이다 &lt;a href=&quot;https://en.wikipedia.org/wiki/Fold_(higher-order_function)&quot;&gt;관용구 함수형 프로그래밍 &lt;code&gt;fold&lt;/code&gt; &lt;/a&gt; 초기 누산기 값과 함께 기능을 취하여 연속 어큐뮬레이터 교체 각 컬렉션 원소 전류 누산기 값을 조합하여 리턴 값을 기반으로 수집 들어 :</target>
        </trans-unit>
        <trans-unit id="47e1e97a440fefeacf5c183060d6c9be6cce8f48" translate="yes" xml:space="preserve">
          <source>A good example of such a requirement is a UI component with the job defined in its scope. If any of the UI's child tasks have failed, it is not always necessary to cancel (effectively kill) the whole UI component, but if UI component is destroyed (and its job is cancelled), then it is necessary to fail all child jobs as their results are no longer needed.</source>
          <target state="translated">이러한 요구 사항의 좋은 예는 해당 범위에 정의 된 작업이있는 UI 구성 요소입니다. UI의 하위 작업 중 하나가 실패한 경우 항상 전체 UI 구성 요소를 취소 (효과적으로 종료) 할 필요는 없지만 UI 구성 요소가 파괴되고 작업이 취소되면 모든 하위 작업을 다음과 같이 실패해야합니다. 그 결과는 더 이상 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6ff9f7dc904e80d0113b7f5b369e86536cb5fc57" translate="yes" xml:space="preserve">
          <source>A good example of such a requirement is a UI component with the job defined in its scope. If any of the UI's child tasks have failed, it is not always necessary to cancel (effectively kill) the whole UI component, but if UI component is destroyed (and its job is cancelled), then it is necessary to fail all child jobs as their results are no longer required.</source>
          <target state="translated">이러한 요구 사항의 좋은 예는 해당 범위에 작업이 정의 된 UI 구성 요소입니다. UI의 하위 작업 중 하나라도 실패한 경우 항상 전체 UI 구성 요소를 취소 (효과적으로 종료) 할 필요는 없지만 UI 구성 요소가 손상되고 작업이 취소 된 경우 모든 하위 작업을 다음과 같이 실패해야합니다. 그들의 결과는 더 이상 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b906d5c24dc71d701d1a88f5123b99a35b02e657" translate="yes" xml:space="preserve">
          <source>A great resource to study Kotlin syntax and API of the Kotlin standard library are &lt;a href=&quot;koans&quot;&gt;Kotlin Koans&lt;/a&gt;.</source>
          <target state="translated">Kotlin 표준 라이브러리의 Kotlin 구문 및 API를 연구 할 수있는 훌륭한 자료는 &lt;a href=&quot;koans&quot;&gt;Kotlin Koans&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="10ca84fa315c1c5b01849c8103f1998949214444" translate="yes" xml:space="preserve">
          <source>A hierarchical project structure allows reusing code in similar targets, as well as publishing and consuming libraries with granular APIs targeting similar platforms. We recommend that you switch to the hierarchical project structure in your libraries when migrating to Kotlin 1.4.0:</source>
          <target state="translated">계층 적 프로젝트 구조를 통해 유사한 대상에서 코드를 재사용 할 수있을뿐만 아니라 유사한 플랫폼을 대상으로하는 세분화 된 API로 라이브러리를 게시하고 사용할 수 있습니다. Kotlin 1.4.0으로 마이그레이션 할 때 라이브러리의 계층 적 프로젝트 구조로 전환하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="ebfffbfa83d34f87c675110d91e368618c92b537" translate="yes" xml:space="preserve">
          <source>A higher-order function is a function that takes functions as parameters, or returns a function.</source>
          <target state="translated">고차 함수는 함수를 매개 변수로 사용하거나 함수를 반환하는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="9658b2ff766fe30712bdf6b1320de81dcddb8dd6" translate="yes" xml:space="preserve">
          <source>A key feature of the multiplatform project support is the possibility to express dependencies of common code on platform-specific parts through &lt;strong&gt;expected and actual declarations&lt;/strong&gt;. An expected declaration specifies an API (class, interface, annotation, top-level declaration etc.). An actual declaration is either a platform-dependent implementation of the API or a typealias referring to an existing implementation of the API in an external library. Here's an example:</source>
          <target state="translated">멀티 플랫폼 프로젝트 지원의 주요 특징은 &lt;strong&gt;예상 및 실제 선언을&lt;/strong&gt; 통해 플랫폼 별 부품에 공통 코드의 종속성을 표현할 수 있다는 것 입니다. 예상 선언은 API (클래스, 인터페이스, 주석, 최상위 선언 등)를 지정합니다. 실제 선언은 API의 플랫폼 종속적 구현이거나 외부 라이브러리에서 기존 API 구현을 참조하는 유형입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b4f9bcf6317a3efbfc27ffa627ae2315de75f99c" translate="yes" xml:space="preserve">
          <source>A key of this coroutine context element.</source>
          <target state="translated">이 코 루틴 컨텍스트 요소의 키입니다.</target>
        </trans-unit>
        <trans-unit id="a529167efcc4bc503564dbabfc673ed3f8365dca" translate="yes" xml:space="preserve">
          <source>A kind of the metadata this annotation encodes. Kotlin compiler recognizes the following kinds (see KotlinClassHeader.Kind):</source>
          <target state="translated">이 주석이 인코딩하는 메타 데이터의 종류입니다. Kotlin 컴파일러는 다음과 같은 종류를 인식합니다 (KotlinClassHeader.Kind 참조).</target>
        </trans-unit>
        <trans-unit id="af75e92b60e6e9dc75638e6104df4d818cedc25f" translate="yes" xml:space="preserve">
          <source>A lambda expression accepted by the &lt;code&gt;executable&lt;/code&gt; method in the example above is applied to each binary created and allows one to configure the binary (see the &lt;a href=&quot;#configuring-binaries&quot;&gt;corresponding section&lt;/a&gt;). Note that this lambda can be dropped if there is no need for additional configuration:</source>
          <target state="translated">위 예제에서 &lt;code&gt;executable&lt;/code&gt; 메소드가 승인 한 람다 표현식 은 작성된 각 바이너리에 적용되며 바이너리를 구성 할 수 있습니다 ( &lt;a href=&quot;#configuring-binaries&quot;&gt;해당 섹션 참조&lt;/a&gt; ). 추가 구성이 필요없는 경우이 람다를 삭제할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59e8c41c77e473f5d78a3b8f292109d63deab3c1" translate="yes" xml:space="preserve">
          <source>A lambda expression is always surrounded by curly braces, parameter declarations in the full syntactic form go inside curly braces and have optional type annotations, the body goes after an &lt;code&gt;-&amp;gt;&lt;/code&gt; sign. If the inferred return type of the lambda is not &lt;code&gt;Unit&lt;/code&gt;, the last (or possibly single) expression inside the lambda body is treated as the return value.</source>
          <target state="translated">람다 식은 항상 중괄호로 묶고 전체 구문 형식의 매개 변수 선언은 중괄호 안에 들어가고 선택적 형식 주석이 있으며 본문은 &lt;code&gt;-&amp;gt;&lt;/code&gt; 기호 뒤에옵니다 . 람다의 유추 된 리턴 유형이 &lt;code&gt;Unit&lt;/code&gt; 이 아닌 경우 람다 본문 내부의 마지막 (또는 단일) 표현식이 리턴 값으로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="7746099304c35d1fc908b36009de66771cd4d936" translate="yes" xml:space="preserve">
          <source>A lambda expression or anonymous function (as well as a &lt;a href=&quot;functions#local-functions&quot;&gt;local function&lt;/a&gt; and an &lt;a href=&quot;object-declarations#object-expressions&quot;&gt;object expression&lt;/a&gt;) can access its &lt;em&gt;closure&lt;/em&gt;, i.e. the variables declared in the outer scope. The variables captured in the closure can be modified in the lambda:</source>
          <target state="translated">람다 표현식 또는 익명 함수 ( &lt;a href=&quot;functions#local-functions&quot;&gt;지역 함수&lt;/a&gt; 및 &lt;a href=&quot;object-declarations#object-expressions&quot;&gt;객체 표현식 포함&lt;/a&gt; )는 &lt;em&gt;클로저&lt;/em&gt; , 즉 외부 범위에 선언 된 변수에 액세스 할 수 있습니다 . 클로저에 캡처 된 변수는 람다에서 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c65c1cb9c5a403c061be48bf269fbc9618b3e04" translate="yes" xml:space="preserve">
          <source>A lambda expression or anonymous function (as well as a &lt;a href=&quot;functions#local-functions&quot;&gt;local function&lt;/a&gt; and an &lt;a href=&quot;object-declarations#object-expressions&quot;&gt;object expression&lt;/a&gt;) can access its &lt;em&gt;closure&lt;/em&gt;, i.e. the variables declared in the outer scope. Unlike Java, the variables captured in the closure can be modified:</source>
          <target state="translated">람다 식 또는 익명 함수 ( &lt;a href=&quot;functions#local-functions&quot;&gt;로컬 함수&lt;/a&gt; 및 &lt;a href=&quot;object-declarations#object-expressions&quot;&gt;객체 식&lt;/a&gt; )는 해당 &lt;em&gt;클로저&lt;/em&gt; (즉, 외부 범위에 선언 된 변수 )에 액세스 할 수 있습니다 . Java와 달리 클로저에서 캡처 된 변수는 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bdff8d608ead4752a4b46042e230ea48bde67d92" translate="yes" xml:space="preserve">
          <source>A language is nothing without its ecosystem, so we pay extra attention to enabling smooth library evolution.</source>
          <target state="translated">생태계가없는 언어는 아무것도 아니므로 매끄러운 라이브러리 진화를 가능하게하는 데 특별한주의를 기울입니다.</target>
        </trans-unit>
        <trans-unit id="cd15bacdd1c63ecfc6424c14d67180313bd1ad34" translate="yes" xml:space="preserve">
          <source>A library also needs &lt;code&gt;group&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt; to be set in the project:</source>
          <target state="translated">라이브러리는 프로젝트에서 &lt;code&gt;group&lt;/code&gt; 및 &lt;code&gt;version&lt;/code&gt; 을 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="a266d621f1143136ef1332f1d4e8fbf1937bb7bb" translate="yes" xml:space="preserve">
          <source>A library built from a multiplatform project may be published to a Maven repository with the &lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html&quot;&gt;&lt;code&gt;maven-publish&lt;/code&gt; Gradle plugin&lt;/a&gt;, which can be applied as follows:</source>
          <target state="translated">멀티 플랫폼 프로젝트로 빌드 한 라이브러리는 &lt;a href=&quot;https://docs.gradle.org/current/userguide/publishing_maven.html&quot;&gt; &lt;code&gt;maven-publish&lt;/code&gt; Gradle 플러그인&lt;/a&gt; 을 사용하여 Maven 저장소에 게시 할 수 있으며 다음과 같이 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b4ed373cde6e9e1fa91e4fbb56a9c7598a75a2e" translate="yes" xml:space="preserve">
          <source>A library can be compiled against the JSR-305 annotations, but there's no need to make the annotations artifact (e.g. &lt;code&gt;jsr305.jar&lt;/code&gt;) a compile dependency for the library consumers. The Kotlin compiler can read the JSR-305 annotations from a library without the annotations present on the classpath.</source>
          <target state="translated">라이브러리는 JSR-305 어노테이션에 대해 컴파일 될 수 있지만 어노테이션 아티팩트 (예 : &lt;code&gt;jsr305.jar&lt;/code&gt; )를 라이브러리 소비자에 대한 컴파일 종속성 으로 만들 필요는 없습니다 . Kotlin 컴파일러는 클래스 경로에 주석이없는 라이브러리에서 JSR-305 주석을 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d047b9b14ef599793bf3ec4c60c343db64e1e53d" translate="yes" xml:space="preserve">
          <source>A library maintainer can add &lt;code&gt;@UnderMigration&lt;/code&gt; status to both type qualifier nicknames and type qualifier defaults:</source>
          <target state="translated">라이브러리 관리자는 &lt;code&gt;@UnderMigration&lt;/code&gt; 상태를 유형 한정자 닉네임과 유형 한정자 기본값 모두에 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f4d698e33a9549340a4259e6c4d88d876edb0aa5" translate="yes" xml:space="preserve">
          <source>A list of additional compiler arguments</source>
          <target state="translated">추가 컴파일러 인수 목록</target>
        </trans-unit>
        <trans-unit id="c050876c45d3b9009b108f91b92dee2ba3ce4a68" translate="yes" xml:space="preserve">
          <source>A list of matched indexed group values.</source>
          <target state="translated">일치하는 인덱싱 된 그룹 값 목록입니다.</target>
        </trans-unit>
        <trans-unit id="0490e17c090278dca9d9c3e9c1918bb3f95d57dc" translate="yes" xml:space="preserve">
          <source>A local value initialised with an expression of a platform type may or may not have a type declaration:</source>
          <target state="translated">플랫폼 유형의 표현식으로 초기화 된 로컬 값은 유형 선언이 있거나 없을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6907df39d4402d4e8629cb75e504cc33edb81a09" translate="yes" xml:space="preserve">
          <source>A local value initialized with an expression of a platform type may or may not have a type declaration:</source>
          <target state="translated">플랫폼 유형의 표현식으로 초기화 된 로컬 값에는 유형 선언이있을 수도 있고 없을 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="6082935bdff5b04031f6645a591c4c448c1b83ae" translate="yes" xml:space="preserve">
          <source>A look at how Kotlin compiles to JavaScript and the use cases for that.</source>
          <target state="translated">Kotlin이 JavaScript로 컴파일하는 방법과 그 사용 사례를 살펴보십시오.</target>
        </trans-unit>
        <trans-unit id="ff86aa7f2396977acd4eb2ae6190d816494ff4d2" translate="yes" xml:space="preserve">
          <source>A look at how to compile Kotlin/Native applications using Gradle</source>
          <target state="translated">Gradle을 사용하여 Kotlin / 네이티브 애플리케이션을 컴파일하는 방법 살펴보기</target>
        </trans-unit>
        <trans-unit id="5803927e1605d5b88beee82ded01e3ff16afd61d" translate="yes" xml:space="preserve">
          <source>A look at how to compile Kotlin/Native applications using the command line compiler</source>
          <target state="translated">명령 줄 컴파일러를 사용하여 Kotlin / 네이티브 애플리케이션을 컴파일하는 방법 살펴보기</target>
        </trans-unit>
        <trans-unit id="c8130c12d930d04cefb1ed7e38d06b29b5e7dd90" translate="yes" xml:space="preserve">
          <source>A look at how to compile our first Kotlin/Native application and open it in an IDE</source>
          <target state="translated">첫 번째 Kotlin / Native 애플리케이션을 컴파일하고 IDE에서 여는 방법을 살펴보십시오.</target>
        </trans-unit>
        <trans-unit id="385e8e945a580076e3df659a821033522dacc1b9" translate="yes" xml:space="preserve">
          <source>A look at how to use Gradle to target JavaScript.</source>
          <target state="translated">Gradle을 사용하여 JavaScript를 대상으로하는 방법을 살펴보십시오.</target>
        </trans-unit>
        <trans-unit id="b89b4fa9c39dacaeb933d4650ccdc12e158979dd" translate="yes" xml:space="preserve">
          <source>A look at how to use IntelliJ IDEA to target JavaScript.</source>
          <target state="translated">IntelliJ IDEA를 사용하여 JavaScript를 대상으로하는 방법을 살펴보십시오.</target>
        </trans-unit>
        <trans-unit id="71d661a8898d659e1e97814edf5572b07d03e2a4" translate="yes" xml:space="preserve">
          <source>A look at how to use Kotlin to interact with JavaScript modules.</source>
          <target state="translated">Kotlin을 사용하여 JavaScript 모듈과 상호 작용하는 방법을 살펴보십시오.</target>
        </trans-unit>
        <trans-unit id="8b133e53c4710f53a8e5d137344f6ea855746c46" translate="yes" xml:space="preserve">
          <source>A look at how to use Maven to target JavaScript.</source>
          <target state="translated">Maven을 사용하여 JavaScript를 대상으로하는 방법을 살펴보십시오.</target>
        </trans-unit>
        <trans-unit id="5fcf68c5e070712c02ef2161e606659b7cf8046b" translate="yes" xml:space="preserve">
          <source>A look at how we can interact with the DOM as well as using JavaScript libraries</source>
          <target state="translated">JavaScript 라이브러리를 사용하고 DOM과 상호 작용할 수있는 방법을 살펴 봅니다.</target>
        </trans-unit>
        <trans-unit id="14dea8bbe6ba0eefc3972f1f980f57bd02baaac3" translate="yes" xml:space="preserve">
          <source>A major change with the new IR compiler backend is the &lt;strong&gt;absence of binary compatibility&lt;/strong&gt; with the default backend. A lack of such compatibility between the two backends for Kotlin/JS means that a library created with the new IR compiler backend can&amp;rsquo;t be used from the default backend, and vice versa.</source>
          <target state="translated">새로운 IR 컴파일러 백엔드의 주요 변경 사항 은 기본 백엔드와 &lt;strong&gt;의 바이너리 호환성&lt;/strong&gt; 이 &lt;strong&gt;없다는 것입니다&lt;/strong&gt; . Kotlin / JS 용 두 백엔드간에 이러한 호환성이 없다는 것은 새로운 IR 컴파일러 백엔드로 생성 된 라이브러리를 기본 백엔드에서 사용할 수 없다는 것을 의미하며 그 반대의 경우도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="c0d24229bab2798843cb2291cd6e6945e16df6ed" translate="yes" xml:space="preserve">
          <source>A marker annotation can have one of two severity &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-experimental/-level/index&quot;&gt;levels&lt;/a&gt; of informing about experimental API usage:</source>
          <target state="translated">마커 주석은 실험적 API 사용에 대한 두 가지 심각도 &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin/-experimental/-level/index&quot;&gt;수준&lt;/a&gt; 중 하나 를 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="b054a659f1507dbdbd8b7a70edae51e942b5d321" translate="yes" xml:space="preserve">
          <source>A member function is a function that is defined inside a class or object:</source>
          <target state="translated">멤버 함수는 클래스 또는 객체 내에 정의 된 함수입니다.</target>
        </trans-unit>
        <trans-unit id="4396cd5eb274f200a93bd95b26249891db5d5bc2" translate="yes" xml:space="preserve">
          <source>A member marked &lt;em&gt;override&lt;/em&gt; is itself open, i.e. it may be overridden in subclasses. If you want to prohibit re-overriding, use &lt;em&gt;final&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;override&lt;/em&gt; 로 표시된 멤버 는 자체적으로 열려 있습니다. 즉, 서브 클래스에서 재정의 될 수 있습니다. 다시 재정의를 금지하려면 &lt;em&gt;final을&lt;/em&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="8cab04001c372a985fdb35f59f52e521f7ef34db" translate="yes" xml:space="preserve">
          <source>A modern IDE like IntelliJ IDEA can help in learning Kotlin:</source>
          <target state="translated">IntelliJ IDEA와 같은 최신 IDE는 Kotlin 학습에 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="33c9548e1a279573b42ec97cd1476aab155cc3b4" translate="yes" xml:space="preserve">
          <source>A modifiable collection that holds pairs of objects (keys and values) and supports efficiently retrieving the value corresponding to each key. Map keys are unique; the map holds only one value for each key.</source>
          <target state="translated">객체 쌍 (키 및 값)을 보유하고 각 키에 해당하는 값을 효율적으로 검색하도록 지원하는 수정 가능한 컬렉션입니다. 맵 키는 고유합니다. 지도는 각 키에 대해 하나의 값만 보유합니다.</target>
        </trans-unit>
        <trans-unit id="f2b195d9d910f82d6f77a33fc6287ce1871c7395" translate="yes" xml:space="preserve">
          <source>A module uses a shared library. Without DCE, parts of the library that you don't use are still included in the resulting bundle. For example, the Kotlin standard library contains functions for manipulating lists, arrays, char sequences, adapters for DOM, and so on. All of this functionality would require about 1.3 MB as a JavaScript file. A simple &quot;Hello, world&quot; application only requires console routines, which is only few kilobytes for the entire file.</source>
          <target state="translated">모듈은 공유 라이브러리를 사용합니다. DCE가 없으면 사용하지 않는 라이브러리 부분이 결과 번들에 계속 포함됩니다. 예를 들어 Kotlin 표준 라이브러리에는 목록, 배열, 문자 시퀀스, DOM 용 어댑터 등을 조작하는 함수가 포함되어 있습니다. 이 모든 기능에는 JavaScript 파일로 약 1.3MB가 필요합니다. 간단한 &quot;Hello, world&quot;응용 프로그램에는 전체 파일에 대해 몇 킬로바이트에 불과한 콘솔 루틴 만 필요합니다.</target>
        </trans-unit>
        <trans-unit id="68902b1d8fd08c328f63d3b0ce175fa7604003a9" translate="yes" xml:space="preserve">
          <source>A more old-fashioned way is using an &lt;em&gt;update site&lt;/em&gt; directly:</source>
          <target state="translated">보다 구식 방법은 &lt;em&gt;업데이트 사이트를&lt;/em&gt; 직접 사용하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="bf066db04d9910e9f11c2b8beb3034ec52a9044a" translate="yes" xml:space="preserve">
          <source>A much larger part of the Kotlin standard library can now be used from code compiled to JavaScript. In particular, key classes such as collections (&lt;code&gt;ArrayList&lt;/code&gt;, &lt;code&gt;HashMap&lt;/code&gt; etc.), exceptions (&lt;code&gt;IllegalArgumentException&lt;/code&gt; etc.) and a few others (&lt;code&gt;StringBuilder&lt;/code&gt;, &lt;code&gt;Comparator&lt;/code&gt;) are now defined under the &lt;code&gt;kotlin&lt;/code&gt; package. On the JVM, the names are type aliases for the corresponding JDK classes, and on the JS, the classes are implemented in the Kotlin standard library.</source>
          <target state="translated">Kotlin 표준 라이브러리의 훨씬 더 큰 부분을 이제 코드를 컴파일하여 JavaScript로 사용할 수 있습니다. 특히 컬렉션 ( &lt;code&gt;ArrayList&lt;/code&gt; , &lt;code&gt;HashMap&lt;/code&gt; 등), 예외 ( &lt;code&gt;IllegalArgumentException&lt;/code&gt; 등) 및 기타 몇 가지 ( &lt;code&gt;StringBuilder&lt;/code&gt; , &lt;code&gt;Comparator&lt;/code&gt; ) 와 같은 주요 클래스 가 &lt;code&gt;kotlin&lt;/code&gt; 패키지에 정의되었습니다 . JVM에서 이름은 해당 JDK 클래스의 유형 별명이며 JS에서는 클래스가 Kotlin 표준 라이브러리에서 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="59f7aae1732948e35450edea612ea9de69622a0e" translate="yes" xml:space="preserve">
          <source>A multiplatform project contains &lt;a href=&quot;#predefined-source-sets&quot;&gt;predefined&lt;/a&gt; source sets for its targets; developers can also create &lt;a href=&quot;#custom-source-sets&quot;&gt;custom&lt;/a&gt; source sets for their needs.</source>
          <target state="translated">다중 플랫폼 프로젝트에는 대상에 대한 &lt;a href=&quot;#predefined-source-sets&quot;&gt;사전 정의 된&lt;/a&gt; 소스 세트 가 포함되어 있습니다 . 개발자는 필요에 따라 &lt;a href=&quot;#custom-source-sets&quot;&gt;사용자 지정&lt;/a&gt; 소스 집합을 만들 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b98aadfb208025ca1401b306f3b8a975cdaa5724" translate="yes" xml:space="preserve">
          <source>A multiplatform project is aimed at multiple platforms that are represented by different targets. A target is part of the build that is responsible for building, testing, and packaging the application for a specific platform, such as macOS, iOS, or Android. See the list of &lt;a href=&quot;mpp-supported-platforms&quot;&gt;supported platforms&lt;/a&gt;.</source>
          <target state="translated">다중 플랫폼 프로젝트는 서로 다른 대상으로 표시되는 여러 플랫폼을 대상으로합니다. 대상은 macOS, iOS 또는 Android와 같은 특정 플랫폼 용 애플리케이션을 빌드, 테스트 및 패키징하는 빌드의 일부입니다. &lt;a href=&quot;mpp-supported-platforms&quot;&gt;지원되는 플랫폼&lt;/a&gt; 목록을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3f5fdf62ff98a596de7a01b47f739e4f075b54fa" translate="yes" xml:space="preserve">
          <source>A multiplatform sample library is now created and imported into IntelliJ IDEA.</source>
          <target state="translated">이제 다중 플랫폼 샘플 라이브러리가 생성되어 IntelliJ IDEA로 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="ee493f380acc0a42b5e890932900078480680011" translate="yes" xml:space="preserve">
          <source>A multiplatform sample library is now created and imported into IntelliJ IDEA. Let's go to any &lt;code&gt;.kt&lt;/code&gt; file and rename the package with the IntelliJ IDEA action &lt;em&gt;Refactor | Rename&lt;/em&gt; action to &lt;code&gt;org.jetbrains.base64&lt;/code&gt; Let's just check everything is right with the project so far, the project structure should be:</source>
          <target state="translated">멀티 플랫폼 샘플 라이브러리가 생성되어 IntelliJ IDEA로 가져옵니다. &lt;code&gt;.kt&lt;/code&gt; 파일 로 이동 하여 IntelliJ IDEA 작업 &lt;em&gt;Refactor | &lt;/em&gt;작업 &lt;em&gt;이름&lt;/em&gt; 을 &lt;code&gt;org.jetbrains.base64&lt;/code&gt; 로&lt;em&gt;바꿉니다.&lt;/em&gt; 지금까지 프로젝트에서 모든 것이 올바른지 확인하자. 프로젝트 구조는 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="ecc126b3174f7ae048b22adc473a9269aec45ddf" translate="yes" xml:space="preserve">
          <source>A mutable sequence of characters.</source>
          <target state="translated">변경 가능한 문자 시퀀스</target>
        </trans-unit>
        <trans-unit id="f4b890960e943c6a1f6370a833c10f3876378c32" translate="yes" xml:space="preserve">
          <source>A naive way of translating these functions into Java would be this:</source>
          <target state="translated">이러한 함수를 Java로 변환하는 순진한 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f95bebbddb48049712756fccbdf324c61cce190f" translate="yes" xml:space="preserve">
          <source>A negative duration is possible in a situation when the second instant is earlier than the first one. An infinite duration value &lt;a href=&quot;-i-n-f-i-n-i-t-e&quot;&gt;Duration.INFINITE&lt;/a&gt; can be used to represent infinite timeouts.</source>
          <target state="translated">두 번째 순간이 첫 번째 순간보다 빠른 상황에서 음수 기간이 가능합니다. 무한 지속 시간 값 &lt;a href=&quot;-i-n-f-i-n-i-t-e&quot;&gt;Duration.INFINITE&lt;/a&gt; 는 무한 제한 시간을 나타내는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="44e9273478759e87a38e4599889c6a267d1ec177" translate="yes" xml:space="preserve">
          <source>A nested class marked as &lt;em&gt;inner&lt;/em&gt; can access the members of its outer class. Inner classes carry a reference to an object of an outer class:</source>
          <target state="translated">&lt;em&gt;내부&lt;/em&gt; 로 표시된 중첩 클래스 는 외부 클래스의 멤버에 액세스 할 수 있습니다. 내부 클래스는 외부 클래스의 객체에 대한 참조를 전달합니다.</target>
        </trans-unit>
        <trans-unit id="a39eaba88421ecc659e557c1c5917daff148999d" translate="yes" xml:space="preserve">
          <source>A new code style adoption might be a very natural process if it starts with a new project, when there's no code formatted in the old way. That is why starting from version 1.3, the Kotlin IntelliJ Plugin creates new projects with formatting from the Code Conventions document which is enabled by default.</source>
          <target state="translated">이전 코드 형식이없는 새 프로젝트로 시작하면 새로운 코드 스타일을 채택하는 것이 매우 자연스러운 과정 일 수 있습니다. 이것이 1.3 버전부터 Kotlin IntelliJ 플러그인이 기본적으로 활성화되어있는 Code Conventions 문서의 형식으로 새 프로젝트를 생성하는 이유입니다.</target>
        </trans-unit>
        <trans-unit id="fd71233631d966a60e3bdbc5e73d6f5c16267c2f" translate="yes" xml:space="preserve">
          <source>A new extension property &lt;code&gt;KType.javaType&lt;/code&gt; (currently experimental) in the stdlib helps you obtain a &lt;code&gt;java.lang.reflect.Type&lt;/code&gt; from a Kotlin type without using the whole &lt;code&gt;kotlin-reflect&lt;/code&gt; dependency.</source>
          <target state="translated">stdlib 의 새로운 확장 속성 &lt;code&gt;KType.javaType&lt;/code&gt; (현재 실험적)을 사용하면 전체 &lt;code&gt;kotlin-reflect&lt;/code&gt; 종속성 을 사용하지 않고도 Kotlin 유형에서 &lt;code&gt;java.lang.reflect.Type&lt;/code&gt; 을 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="edbce38b40bccd0d0e76725d6ba4b5f648817a38" translate="yes" xml:space="preserve">
          <source>A new interface &lt;code&gt;PropertyDelegateProvider&lt;/code&gt; helps create delegate providers in a single declaration.</source>
          <target state="translated">새 인터페이스 &lt;code&gt;PropertyDelegateProvider&lt;/code&gt; 는 단일 선언에서 대리자 공급자를 만드는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="2ed3400a891a08f6fa6f1243321491e235535de8" translate="yes" xml:space="preserve">
          <source>A nice built-in delegated property is &lt;code&gt;lazy&lt;/code&gt;, which is a properly threadsafe implementation of the lazy loading pattern. The supplied lambda expression will only be evaluated once, the first time the property is accessed.</source>
          <target state="translated">내장 된 훌륭한 위임 속성은 &lt;code&gt;lazy&lt;/code&gt; 입니다 . 이것은 게으른 로딩 패턴의 스레드 안전 구현입니다. 제공된 람다 식은 속성에 처음 액세스 할 때 한 번만 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="05f9decb296cb438904b90a9f0f8cd0768c68ffb" translate="yes" xml:space="preserve">
          <source>A non-extension function: &lt;strong&gt;the context object&lt;/strong&gt; is passed as an argument, but inside the lambda, it's available as a receiver (&lt;code&gt;this&lt;/code&gt;). &lt;strong&gt;The return value&lt;/strong&gt; is the lambda result.</source>
          <target state="translated">비 확장 함수 : &lt;strong&gt;컨텍스트 객체&lt;/strong&gt; 는 인수로 전달되지만 람다 내부에서는 수신자 ( &lt;code&gt;this&lt;/code&gt; ) 로 사용할 수 있습니다 . &lt;strong&gt;반환 값&lt;/strong&gt; 은 람다 결과입니다.</target>
        </trans-unit>
        <trans-unit id="e9556a99638ca78eba482514fb0afe050f158662" translate="yes" xml:space="preserve">
          <source>A number of packages are imported into every Kotlin file by default:</source>
          <target state="translated">기본적으로 모든 Kotlin 파일로 여러 패키지를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="0690a89d31ce4555354ff36a78a338d800d8a6a1" translate="yes" xml:space="preserve">
          <source>A pair of an index of the first occurrence of matched string from &lt;a href=&quot;find-any-of#kotlin.text%24findAnyOf%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;strings&lt;/a&gt; and the string matched or &lt;code&gt;null&lt;/code&gt; if none of &lt;a href=&quot;find-any-of#kotlin.text%24findAnyOf%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;strings&lt;/a&gt; are found.</source>
          <target state="translated">일치하는 문자열에서 처음 나타나는 인덱스 쌍의 &lt;a href=&quot;find-any-of#kotlin.text%24findAnyOf%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;문자열&lt;/a&gt; 과 일치하는 문자열 또는 &lt;code&gt;null&lt;/code&gt; 것도 만약 &lt;a href=&quot;find-any-of#kotlin.text%24findAnyOf%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;문자열이&lt;/a&gt; 발견되지 않는다.</target>
        </trans-unit>
        <trans-unit id="4b1bfba5db9cee31e3291edd104aa61dfea4bf60" translate="yes" xml:space="preserve">
          <source>A pair of an index of the first occurrence of matched string from &lt;a href=&quot;find-any-of#kotlin.text%24findAnyOf(kotlin.CharSequence,%20kotlin.collections.Collection((kotlin.String)),%20kotlin.Int,%20kotlin.Boolean)/strings&quot;&gt;strings&lt;/a&gt; and the string matched or &lt;code&gt;null&lt;/code&gt; if none of &lt;a href=&quot;find-any-of#kotlin.text%24findAnyOf(kotlin.CharSequence,%20kotlin.collections.Collection((kotlin.String)),%20kotlin.Int,%20kotlin.Boolean)/strings&quot;&gt;strings&lt;/a&gt; are found.</source>
          <target state="translated">일치하는 문자열에서 처음 나타나는 인덱스 쌍의 &lt;a href=&quot;find-any-of#kotlin.text%24findAnyOf(kotlin.CharSequence,%20kotlin.collections.Collection((kotlin.String)),%20kotlin.Int,%20kotlin.Boolean)/strings&quot;&gt;문자열&lt;/a&gt; 과 일치하는 문자열 또는 &lt;code&gt;null&lt;/code&gt; 것도 만약 &lt;a href=&quot;find-any-of#kotlin.text%24findAnyOf(kotlin.CharSequence,%20kotlin.collections.Collection((kotlin.String)),%20kotlin.Int,%20kotlin.Boolean)/strings&quot;&gt;문자열이&lt;/a&gt; 발견되지 않는다.</target>
        </trans-unit>
        <trans-unit id="6180f75d77d89f493537446a08bcc4c4a8c04dbd" translate="yes" xml:space="preserve">
          <source>A pair of an index of the last occurrence of matched string from &lt;a href=&quot;find-last-any-of#kotlin.text%24findLastAnyOf%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;strings&lt;/a&gt; and the string matched or &lt;code&gt;null&lt;/code&gt; if none of &lt;a href=&quot;find-last-any-of#kotlin.text%24findLastAnyOf%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;strings&lt;/a&gt; are found.</source>
          <target state="translated">유사한 문자열에서 마지막 항목 인덱스 쌍의 &lt;a href=&quot;find-last-any-of#kotlin.text%24findLastAnyOf%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;문자열&lt;/a&gt; 과 일치하는 문자열 또는 &lt;code&gt;null&lt;/code&gt; 것도 만약 &lt;a href=&quot;find-last-any-of#kotlin.text%24findLastAnyOf%28kotlin.CharSequence%2C+kotlin.collections.Collection%28%28kotlin.String%29%29%2C+kotlin.Int%2C+kotlin.Boolean%29%2Fstrings&quot;&gt;문자열이&lt;/a&gt; 발견되지 않는다.</target>
        </trans-unit>
        <trans-unit id="9ee5160b07781c30cbabbcaf3d1b7b6eb4996f05" translate="yes" xml:space="preserve">
          <source>A pair of an index of the last occurrence of matched string from &lt;a href=&quot;find-last-any-of#kotlin.text%24findLastAnyOf(kotlin.CharSequence,%20kotlin.collections.Collection((kotlin.String)),%20kotlin.Int,%20kotlin.Boolean)/strings&quot;&gt;strings&lt;/a&gt; and the string matched or &lt;code&gt;null&lt;/code&gt; if none of &lt;a href=&quot;find-last-any-of#kotlin.text%24findLastAnyOf(kotlin.CharSequence,%20kotlin.collections.Collection((kotlin.String)),%20kotlin.Int,%20kotlin.Boolean)/strings&quot;&gt;strings&lt;/a&gt; are found.</source>
          <target state="translated">유사한 문자열에서 마지막 항목 인덱스 쌍의 &lt;a href=&quot;find-last-any-of#kotlin.text%24findLastAnyOf(kotlin.CharSequence,%20kotlin.collections.Collection((kotlin.String)),%20kotlin.Int,%20kotlin.Boolean)/strings&quot;&gt;문자열&lt;/a&gt; 과 일치하는 문자열 또는 &lt;code&gt;null&lt;/code&gt; 것도 만약 &lt;a href=&quot;find-last-any-of#kotlin.text%24findLastAnyOf(kotlin.CharSequence,%20kotlin.collections.Collection((kotlin.String)),%20kotlin.Int,%20kotlin.Boolean)/strings&quot;&gt;문자열이&lt;/a&gt; 발견되지 않는다.</target>
        </trans-unit>
        <trans-unit id="a8c369ae3a10f910466f80e9aeb4feac05933ded" translate="yes" xml:space="preserve">
          <source>A parameter is optional in any of the two cases:</source>
          <target state="translated">두 경우 중 하나에서 매개 변수는 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="d8e54db4b729c3b476717fda903eeba2bbf919bb" translate="yes" xml:space="preserve">
          <source>A parameter of a function (normally the last one) may be marked with &lt;code&gt;vararg&lt;/code&gt; modifier:</source>
          <target state="translated">함수의 매개 변수 (일반적으로 마지막 매개 변수)는 &lt;code&gt;vararg&lt;/code&gt; 수정 자로 표시 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7b5a662aaf33cd978719d71631ebb23d192f917f" translate="yes" xml:space="preserve">
          <source>A parameterless lambda does not need the arrow. A one-parameter lambda can choose to omit the parameter name and the arrow, in which case the parameter will be called &lt;code&gt;it&lt;/code&gt;:</source>
          <target state="translated">매개 변수가없는 람다는 화살표가 필요하지 않습니다. 하나의 매개 변수 람다는 매개 변수 이름과 화살표를 생략하도록 선택할 수 있습니다.이 경우 매개 변수가 호출 &lt;code&gt;it&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="96c97f3f63b0a2627843b4fadf672cdb0f8a549d" translate="yes" xml:space="preserve">
          <source>A parent coroutine always waits for completion of all its children. A parent does not have to explicitly track all the children it launches, and it does not have to use &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/join.html&quot;&gt;Job.join&lt;/a&gt; to wait for them at the end:</source>
          <target state="translated">부모 코 루틴은 항상 모든 자식이 완료 될 때까지 기다립니다. 부모는 시작하는 모든 자식을 명시 적으로 추적 할 필요가 없으며 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/join.html&quot;&gt;마지막에 자식&lt;/a&gt; 을 기다리기 위해 Job.join 을 사용할 필요도 없습니다 .</target>
        </trans-unit>
        <trans-unit id="974e5c50f4b27f1754c46fb5809df40f0b98cd08" translate="yes" xml:space="preserve">
          <source>A parent coroutine always waits for completion of all its children. Parent does not have to explicitly track all the children it launches and it does not have to use &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/join.html&quot;&gt;Job.join&lt;/a&gt; to wait for them at the end:</source>
          <target state="translated">부모 코 루틴은 항상 모든 자식의 완성을 기다립니다. 부모는 자신이 시작한 모든 자식을 명시 적으로 추적 할 필요가 없으며 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/join.html&quot;&gt;Job.join&lt;/a&gt; 을 사용 하여 끝에서 기다릴 필요 가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="8274e7e6404a74bf26de46501fa024c47c94d1b6" translate="yes" xml:space="preserve">
          <source>A particularly interesting operator is the function-call parenthesis pair, whose function name is &lt;code&gt;invoke&lt;/code&gt; - if you implement this, you'll be able to call instances of your class as if they were functions. You can even overload it in order to provide different function signatures.</source>
          <target state="translated">특히 흥미로운 연산자는 함수 이름이 &lt;code&gt;invoke&lt;/code&gt; 되는 함수 호출 괄호 쌍입니다. 이를 구현하면 클래스의 인스턴스를 함수 인 것처럼 호출 할 수 있습니다. 다른 기능 서명을 제공하기 위해 오버로드 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c4af47ae608a7ac564d11609101a4fb4cd519dbf" translate="yes" xml:space="preserve">
          <source>A pipeline is a pattern where one coroutine is producing, possibly infinite, stream of values:</source>
          <target state="translated">파이프 라인은 하나의 코 루틴이 무한한 값의 흐름을 생성하는 패턴입니다.</target>
        </trans-unit>
        <trans-unit id="9cde5f90c09a2d34b46b31e70319e1f078c94d7c" translate="yes" xml:space="preserve">
          <source>A plain &lt;code&gt;continue&lt;/code&gt; or &lt;code&gt;break&lt;/code&gt; works the same way as in Python: &lt;code&gt;continue&lt;/code&gt; skips to the next iteration of the innermost containing loop, and &lt;code&gt;break&lt;/code&gt; stops the loop. However, you can also &lt;em&gt;label&lt;/em&gt; your loops and reference the label in the &lt;code&gt;continue&lt;/code&gt; or &lt;code&gt;break&lt;/code&gt; statement in order to indicate which loop you want to affect. A label is an identifier followed by &lt;code&gt;@,&lt;/code&gt; e.g. &lt;code&gt;outer@&lt;/code&gt; (possibly followed by a space). For example, to generate primes:</source>
          <target state="translated">일반 &lt;code&gt;continue&lt;/code&gt; 또는 &lt;code&gt;break&lt;/code&gt; 는 Python과 같은 방식으로 작동합니다. &lt;code&gt;continue&lt;/code&gt; 는 가장 안쪽에있는 루프의 다음 반복으로 건너 뛰고 &lt;code&gt;break&lt;/code&gt; 는 루프를 중지합니다. 그러나, 당신은 또한 수 있습니다 &lt;em&gt;레이블&lt;/em&gt; 당신의 루프를하고이에 라벨을 참조 &lt;code&gt;continue&lt;/code&gt; 또는 &lt;code&gt;break&lt;/code&gt; 이 영향을하고자하는 루프를 표시하기 위해 문을. 레이블은 식별자 뒤에 &lt;code&gt;@,&lt;/code&gt; 옵니다 ( 예 : &lt;code&gt;outer@&lt;/code&gt; (공백이 올 수 있음)). 예를 들어, 소수를 생성하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="6b2a30e494b907d8d4a62480d42d797547658d1c" translate="yes" xml:space="preserve">
          <source>A private field, with the same name as the property name (only for properties with backing fields).</source>
          <target state="translated">속성 이름과 이름이 같은 개인 필드 (백업 필드가있는 속성에만 해당)</target>
        </trans-unit>
        <trans-unit id="cf177bbbdaba44b6a20302adc2f02cfa544d58d1" translate="yes" xml:space="preserve">
          <source>A progression of values of type &lt;code&gt;Char&lt;/code&gt;.</source>
          <target state="translated">유형의 값의 진행 &lt;code&gt;Char&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8000107831bfdde0265eaeae084010957d7238c6" translate="yes" xml:space="preserve">
          <source>A progression of values of type &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">유형의 값의 진행 &lt;code&gt;Int&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="39af8d75cced3cff348b69e44d892f081a434b7d" translate="yes" xml:space="preserve">
          <source>A progression of values of type &lt;code&gt;Long&lt;/code&gt;.</source>
          <target state="translated">유형의 값의 진행 &lt;code&gt;Long&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9935e82fa581f03cd1527a988db2f66b9b8656e3" translate="yes" xml:space="preserve">
          <source>A progression of values of type &lt;code&gt;UInt&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;UInt&lt;/code&gt; 형의 값의 진척 .</target>
        </trans-unit>
        <trans-unit id="83c8ff0fdfef1cd606459dfe6f47432c30195b62" translate="yes" xml:space="preserve">
          <source>A progression of values of type &lt;code&gt;ULong&lt;/code&gt;.</source>
          <target state="translated">유형의 값의 진행 &lt;code&gt;ULong&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9afb968e6952d4b115b95334d2ddb1edc4507185" translate="yes" xml:space="preserve">
          <source>A property is really a &lt;em&gt;backing field&lt;/em&gt; (kind of a hidden variable inside the object) and two accessor functions: one that gets the value of the variable and one that sets the value. You can override one or both of the accessors (an accessor that is not overridden automatically gets the default behavior of just returning or setting the backing field directly). Inside an accessor, you can reference the backing field with &lt;code&gt;field&lt;/code&gt;. The setter accessor must take a parameter &lt;code&gt;value&lt;/code&gt;, which is the value that is being assigned to the property. A getter body could either be a one-line expression preceded by &lt;code&gt;=&lt;/code&gt; or a more complex body enclosed in curly braces, while a setter body typically includes an assignment and must therefore be enclosed in curly braces. If you want to validate that the age is nonnegative:</source>
          <target state="translated">속성은 실제로 &lt;em&gt;백킹 필드&lt;/em&gt; (객체 내부에 숨겨진 변수의 종류)와 두 가지 접근 자 함수입니다. 하나는 변수 값을 가져오고 다른 하나는 값을 설정합니다. 접근 자 중 하나 또는 둘 다를 재정의 할 수 있습니다 (재정의되지 않은 접근자는 자동으로 백업 필드를 직접 반환하거나 설정하는 기본 동작을 갖습니다). 접근 자 내에서 backing 필드를 &lt;code&gt;field&lt;/code&gt; 로 참조 할 수 있습니다 . 세터 접근자는 매개 변수 &lt;code&gt;value&lt;/code&gt; 가져와야합니다.이 값 은 특성에 지정되는 값입니다. 게터 본문은 앞에 한 줄짜리식이 될 수 있습니다 &lt;code&gt;=&lt;/code&gt; 또는 중괄호로 묶인 더 복잡한 본문 인 반면, 세터 본문은 일반적으로 할당을 포함하므로 중괄호로 묶어야합니다. 연령이 음수가 아닌지 확인하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="26938f65953dcfe9eca3ee796d3f770edf59081e" translate="yes" xml:space="preserve">
          <source>A property reference can be used where a function with a single generic parameter is expected:</source>
          <target state="translated">단일 일반 매개 변수가있는 함수가 예상되는 경우 특성 참조를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a19ce70086035d292f555ddf789a2fb77aacd274" translate="yes" xml:space="preserve">
          <source>A property reference can be used where a function with one parameter is expected:</source>
          <target state="translated">하나의 매개 변수가있는 함수가 필요한 경우 특성 참조를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eec62f9368847843f2bad90c6a9e7500576394b0" translate="yes" xml:space="preserve">
          <source>A property reference to a mutable property of type &lt;a href=&quot;set-value#V&quot;&gt;V&lt;/a&gt;. The reference is without a receiver, i.e. it either references a top-level property or has the receiver bound to it.</source>
          <target state="translated">&lt;a href=&quot;set-value#V&quot;&gt;V&lt;/a&gt; 유형의 변경 가능한 속성에 대한 속성 참조 입니다. 참조에는 수신자가 없습니다. 즉, 최상위 속성을 참조하거나 수신자가 바인딩되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="8305fba1fc1d519b98bdb91513c494102e353475" translate="yes" xml:space="preserve">
          <source>A property reference to a read-only or mutable property of type &lt;a href=&quot;get-value#V&quot;&gt;V&lt;/a&gt; or its subtype. The reference has an unbound receiver of type &lt;a href=&quot;get-value#T&quot;&gt;T&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;get-value#V&quot;&gt;V&lt;/a&gt; 또는 그 하위 유형의 읽기 전용 또는 변경 가능한 속성에 대한 속성 참조 입니다. 참조에는 &lt;a href=&quot;get-value#T&quot;&gt;T&lt;/a&gt; 유형의 바인딩되지 않은 수신자가 있습니다.</target>
        </trans-unit>
        <trans-unit id="a8425090a939fe6052394e847a5b0cf72f1faf1d" translate="yes" xml:space="preserve">
          <source>A property reference to a read-only or mutable property of type &lt;a href=&quot;get-value#V&quot;&gt;V&lt;/a&gt; or its subtype. The reference is without a receiver, i.e. it either references a top-level property or has the receiver bound to it.</source>
          <target state="translated">&lt;a href=&quot;get-value#V&quot;&gt;V&lt;/a&gt; 또는 그 하위 유형의 읽기 전용 또는 변경 가능한 속성에 대한 속성 참조 입니다. 참조에는 수신자가 없습니다. 즉, 최상위 속성을 참조하거나 수신자가 바인딩되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="cd9a90045ab99bb653a5efff96c42d5566a40457" translate="yes" xml:space="preserve">
          <source>A property reference to a read-only or mutable property of type &lt;a href=&quot;set-value#V&quot;&gt;V&lt;/a&gt; or its subtype. The reference has an unbound receiver of type &lt;a href=&quot;set-value#T&quot;&gt;T&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;set-value#V&quot;&gt;V&lt;/a&gt; 또는 그 하위 유형의 읽기 전용 또는 변경 가능한 속성에 대한 속성 참조 입니다. 참조에는 &lt;a href=&quot;set-value#T&quot;&gt;T&lt;/a&gt; 유형의 바인딩되지 않은 수신자가 있습니다.</target>
        </trans-unit>
        <trans-unit id="a6b2d5794a9f9f912eb15fc71ef317fc16b05c80" translate="yes" xml:space="preserve">
          <source>A public function/method returning an expression of a platform type must declare its Kotlin type explicitly:</source>
          <target state="translated">플랫폼 유형의 표현식을 리턴하는 공용 함수 / 방법은 Kotlin 유형을 명시 적으로 선언해야합니다.</target>
        </trans-unit>
        <trans-unit id="e4a1aec6d30adc10a1404a818c58d50f87fa6758" translate="yes" xml:space="preserve">
          <source>A range defines a closed interval in the mathematical sense: it is defined by its two endpoint values which are both included in the range. Ranges are defined for comparable types: having an order, you can define whether an arbitrary instance is in the range between two given instances. The main operation on ranges is &lt;code&gt;contains&lt;/code&gt;, which is usually used in the form of &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;!in&lt;/code&gt; operators.</source>
          <target state="translated">범위는 수학적 의미에서 닫힌 간격을 정의합니다. 범위에 포함 된 두 개의 종점 값으로 정의됩니다. 범위는 비교 가능한 유형에 대해 정의됩니다. 순서가 있으면 임의의 인스턴스가 두 개의 지정된 인스턴스 사이의 범위에 있는지 여부를 정의 할 수 있습니다. 범위의 주요 작업은 &lt;code&gt;contains&lt;/code&gt; 하며, 이는 보통 &lt;code&gt;in&lt;/code&gt; 및 &lt;code&gt;!in&lt;/code&gt; 연산자 의 형태로 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="221580726f1b79e1f121d9c5b8df4ee251854dbc" translate="yes" xml:space="preserve">
          <source>A range of values of type &lt;code&gt;Char&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Char&lt;/code&gt; 유형의 값 범위입니다 .</target>
        </trans-unit>
        <trans-unit id="88a09d3e9acac0664732cf11d2c6dc04f33f89d1" translate="yes" xml:space="preserve">
          <source>A range of values of type &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Int&lt;/code&gt; 유형의 값 범위입니다 .</target>
        </trans-unit>
        <trans-unit id="afabce3354f73cf6ff3d9c16c2e2674280dd51c5" translate="yes" xml:space="preserve">
          <source>A range of values of type &lt;code&gt;Long&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Long&lt;/code&gt; 유형의 값 범위입니다 .</target>
        </trans-unit>
        <trans-unit id="3705abd4a846fe054235e2a95a61a48c4eca8a1a" translate="yes" xml:space="preserve">
          <source>A range of values of type &lt;code&gt;UInt&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;UInt&lt;/code&gt; 유형의 값 범위입니다 .</target>
        </trans-unit>
        <trans-unit id="1fbd8e752a1a0bcc370402ee311644d3a214dac3" translate="yes" xml:space="preserve">
          <source>A range of values of type &lt;code&gt;ULong&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ULong&lt;/code&gt; 유형의 값 범위 .</target>
        </trans-unit>
        <trans-unit id="3d7de3a9c56c0accab12ad13f686dcc554485ec9" translate="yes" xml:space="preserve">
          <source>A raw string is delimited by a triple quote (&lt;code&gt;&quot;&quot;&quot;&lt;/code&gt;), contains no escaping and can contain newlines and any other characters:</source>
          <target state="translated">원시 문자열은 삼중 따옴표 ( &lt;code&gt;&quot;&quot;&quot;&lt;/code&gt; ) 로 구분되며 이스케이프가없고 개행 및 기타 문자를 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a5516e9551d2bad807411e2391edbe31ebe1675" translate="yes" xml:space="preserve">
          <source>A read-only property type (the user is expecting a &lt;code&gt;Fruit&lt;/code&gt;, and gets an &lt;code&gt;Apple&lt;/code&gt;)</source>
          <target state="translated">읽기 전용 속성 유형 (사용자는 &lt;code&gt;Fruit&lt;/code&gt; 을 기대하고 &lt;code&gt;Apple&lt;/code&gt; 을 얻습니다 )</target>
        </trans-unit>
        <trans-unit id="f241038ca168a321172b12bd8867b3601fe6885b" translate="yes" xml:space="preserve">
          <source>A reference must be explicitly marked as nullable when &lt;em&gt;null&lt;/em&gt; value is possible.</source>
          <target state="translated">&lt;em&gt;null&lt;/em&gt; 값이 가능한 경우 참조는 명시 적으로 nullable로 표시되어야 합니다.</target>
        </trans-unit>
        <trans-unit id="41955f6fcbb06b4c30b37a0afd31c657401c1d19" translate="yes" xml:space="preserve">
          <source>A regular module targets a specific platform and can either be a dependency of platform modules or depend on platform modules.</source>
          <target state="translated">일반 모듈은 특정 플랫폼을 대상으로하며 플랫폼 모듈의 종속성이거나 플랫폼 모듈에 의존 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c6bad360b6706ab8e9a1be4d7e2e154d4d953685" translate="yes" xml:space="preserve">
          <source>A regular recursive function can be defined to compute a depth of a tree:</source>
          <target state="translated">일반 재귀 함수를 정의하여 트리의 깊이를 계산할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="34160be81c96c4d2ed1676174bf3ae4b23c8900e" translate="yes" xml:space="preserve">
          <source>A return type (as we've already seen)</source>
          <target state="translated">반품 유형 (이미 살펴본 바와 같이)</target>
        </trans-unit>
        <trans-unit id="83704591cb76256bc3b326e54a087a96c9a87430" translate="yes" xml:space="preserve">
          <source>A safe call can also be placed on the left side of an assignment. Then, if one of the receivers in the safe calls chain is null, the assignment is skipped, and the expression on the right is not evaluated at all:</source>
          <target state="translated">과제의 왼쪽에 안전한 전화를 걸 수도 있습니다. 그런 다음, 안전한 통화 체인의 수신자 중 하나가 null이면 할당을 건너 뛰고 오른쪽의 표현식은 전혀 평가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4aa0217d2bc7796cb1aa70a19e3ef6c1d079946a" translate="yes" xml:space="preserve">
          <source>A scope class for &lt;a href=&quot;-deep-recursive-function/index&quot;&gt;DeepRecursiveFunction&lt;/a&gt; function declaration that defines &lt;a href=&quot;-deep-recursive-scope/call-recursive&quot;&gt;callRecursive&lt;/a&gt; methods to recursively call this function or another &lt;a href=&quot;-deep-recursive-function/index&quot;&gt;DeepRecursiveFunction&lt;/a&gt; putting the call activation frame on the heap.</source>
          <target state="translated">이 함수 또는 힙에 호출 활성화 프레임을 배치하는 다른 &lt;a href=&quot;-deep-recursive-function/index&quot;&gt;DeepRecursiveFunction&lt;/a&gt; 을 재귀 적으로 호출하도록 &lt;a href=&quot;-deep-recursive-scope/call-recursive&quot;&gt;callRecursive&lt;/a&gt; 메서드를 정의하는 &lt;a href=&quot;-deep-recursive-function/index&quot;&gt;DeepRecursiveFunction&lt;/a&gt; 함수 선언 의 범위 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="31eedf51003f1ec379b62ca01a092a9742e430cc" translate="yes" xml:space="preserve">
          <source>A scope class for &lt;a href=&quot;../-deep-recursive-function/index&quot;&gt;DeepRecursiveFunction&lt;/a&gt; function declaration that defines &lt;a href=&quot;../-deep-recursive-scope/call-recursive&quot;&gt;callRecursive&lt;/a&gt; methods to recursively call this function or another &lt;a href=&quot;../-deep-recursive-function/index&quot;&gt;DeepRecursiveFunction&lt;/a&gt; putting the call activation frame on the heap.</source>
          <target state="translated">이 함수 또는 힙에 호출 활성화 프레임을 배치하는 다른 &lt;a href=&quot;../-deep-recursive-function/index&quot;&gt;DeepRecursiveFunction&lt;/a&gt; 을 재귀 적으로 호출하도록 &lt;a href=&quot;../-deep-recursive-scope/call-recursive&quot;&gt;callRecursive&lt;/a&gt; 메서드를 정의하는 &lt;a href=&quot;../-deep-recursive-function/index&quot;&gt;DeepRecursiveFunction&lt;/a&gt; 함수 선언 의 범위 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="aea317d2c4ca3720bad709c1cd50aa10aaa9d87b" translate="yes" xml:space="preserve">
          <source>A scope class for &lt;a href=&quot;../-deep-recursive-function/index&quot;&gt;DeepRecursiveFunction&lt;/a&gt; function declaration that defines &lt;a href=&quot;call-recursive&quot;&gt;callRecursive&lt;/a&gt; methods to recursively call this function or another &lt;a href=&quot;../-deep-recursive-function/index&quot;&gt;DeepRecursiveFunction&lt;/a&gt; putting the call activation frame on the heap.</source>
          <target state="translated">이 함수 또는 힙에 호출 활성화 프레임을 배치하는 다른 &lt;a href=&quot;../-deep-recursive-function/index&quot;&gt;DeepRecursiveFunction&lt;/a&gt; 을 재귀 적으로 호출하도록 &lt;a href=&quot;call-recursive&quot;&gt;callRecursive&lt;/a&gt; 메서드를 정의하는 &lt;a href=&quot;../-deep-recursive-function/index&quot;&gt;DeepRecursiveFunction&lt;/a&gt; 함수 선언 의 범위 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="26cb3840d4fca55e7e55b38fb5d4f493cd9e25ff" translate="yes" xml:space="preserve">
          <source>A sealed class is &lt;a href=&quot;classes#abstract-classes&quot;&gt;abstract&lt;/a&gt; by itself, it cannot be instantiated directly and can have &lt;em&gt;abstract&lt;/em&gt; members.</source>
          <target state="translated">봉인 된 클래스는 자체적 으로 &lt;a href=&quot;classes#abstract-classes&quot;&gt;추상&lt;/a&gt; 이며 직접 인스턴스화 할 수 없으며 &lt;em&gt;추상&lt;/em&gt; 멤버를 가질 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8457cb4b6b370531b78c522f162b937449277750" translate="yes" xml:space="preserve">
          <source>A sequence that returns values through its iterator. The values are evaluated lazily, and the sequence is potentially infinite.</source>
          <target state="translated">반복자를 통해 값을 반환하는 시퀀스입니다. 값은 느리게 평가되며 시퀀스는 잠재적으로 무한합니다.</target>
        </trans-unit>
        <trans-unit id="7265e100a83e4681e997a3291f0bd196c84d5b43" translate="yes" xml:space="preserve">
          <source>A series of complete step-by-step tutorials to walk you through how to accomplish different tasks in Kotlin, from Getting Started to writing Android applications and more. If you have a tutorial you'd like featured here, please let us know. We'll be happy to host it and give credit!</source>
          <target state="translated">Kotlin에서 시작하기부터 Android 애플리케이션 작성에 이르기까지 다양한 작업을 수행하는 방법을 안내하는 일련의 완전한 단계별 자습서입니다. 여기에 추천하고 싶은 튜토리얼이 있으면 알려주십시오. 우리는 그것을 호스팅하고 신용을 드리겠습니다.</target>
        </trans-unit>
        <trans-unit id="4488cb2716f1ba3dca6886de2da7a5d7ed90ffb5" translate="yes" xml:space="preserve">
          <source>A set of extension functions was added for manipulating lists: &lt;code&gt;fill&lt;/code&gt;, &lt;code&gt;replaceAll&lt;/code&gt; and &lt;code&gt;shuffle&lt;/code&gt; for &lt;code&gt;MutableList&lt;/code&gt;, and &lt;code&gt;shuffled&lt;/code&gt; for read-only &lt;code&gt;List&lt;/code&gt;:</source>
          <target state="translated">확장 기능의 세트리스트 조작하기위한 추가되었습니다 &lt;code&gt;fill&lt;/code&gt; , &lt;code&gt;replaceAll&lt;/code&gt; 및 &lt;code&gt;shuffle&lt;/code&gt; 에 대한 &lt;code&gt;MutableList&lt;/code&gt; 을 하고 &lt;code&gt;shuffled&lt;/code&gt; 읽기 전용에 대한 &lt;code&gt;List&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="62b64f509cf25a0a71280021d8d233038539b6d7" translate="yes" xml:space="preserve">
          <source>A set of factory methods is used for declaring elements of the &lt;code&gt;binaries&lt;/code&gt; collection. These methods allow one to specify what kinds of binaries are to be created and configure them. The following binary kinds are supported (note that not all the kinds are available for all native platforms):</source>
          <target state="translated">&lt;code&gt;binaries&lt;/code&gt; 컬렉션의 요소를 선언하기 위해 팩토리 메소드 세트가 사용됩니다 . 이러한 방법을 통해 어떤 종류의 바이너리를 생성하고 구성 할 수 있습니다. 다음 이진 종류가 지원됩니다 (모든 종류가 모든 기본 플랫폼에서 사용 가능한 것은 아님).</target>
        </trans-unit>
        <trans-unit id="55d25bafc109a837fa16e50504d1fe3a3785094d" translate="yes" xml:space="preserve">
          <source>A setter method, with the name calculated by prepending the &lt;code&gt;set&lt;/code&gt; prefix (only for &lt;code&gt;var&lt;/code&gt; properties);</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 접두사 를 앞에 붙여 이름을 계산하는 setter 메소드 ( &lt;code&gt;var&lt;/code&gt; 속성 에만 해당 );</target>
        </trans-unit>
        <trans-unit id="80ea8f9d949b5d3fcc1d6508b0bd6910bf0df5cf" translate="yes" xml:space="preserve">
          <source>A short lambda expression replaces all the unnecessary code.</source>
          <target state="translated">짧은 람다 식은 불필요한 코드를 모두 대체합니다.</target>
        </trans-unit>
        <trans-unit id="a79440aad6b71d56ce4283f0e84514842d6f1254" translate="yes" xml:space="preserve">
          <source>A shorter way to define a &lt;code&gt;Comparator&lt;/code&gt; is the &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.comparisons/compare-by&quot;&gt;&lt;code&gt;compareBy()&lt;/code&gt;&lt;/a&gt; function from the standard library. &lt;code&gt;compareBy()&lt;/code&gt; takes a lambda function that produces a &lt;code&gt;Comparable&lt;/code&gt; value from an instance and defines the custom order as the natural order of the produced values. With &lt;code&gt;compareBy()&lt;/code&gt;, the length comparator from the example above looks like this:</source>
          <target state="translated">&lt;code&gt;Comparator&lt;/code&gt; 를 정의하는 더 짧은 방법 은 표준 라이브러리 의 &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.comparisons/compare-by&quot;&gt; &lt;code&gt;compareBy()&lt;/code&gt; &lt;/a&gt; 함수입니다. &lt;code&gt;compareBy()&lt;/code&gt; 는 인스턴스에서 &lt;code&gt;Comparable&lt;/code&gt; 값 을 생성하는 람다 함수를 사용 하여 사용자 지정 순서를 생성 된 값의 자연 순서로 정의합니다. &lt;code&gt;compareBy()&lt;/code&gt; 사용하면 위 예제의 길이 비교기는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c8d41cb6d401bf4d42a494408558f6a917e8029e" translate="yes" xml:space="preserve">
          <source>A significant part of the definitions goes in the &lt;code&gt;libnative_api.h&lt;/code&gt; file. It includes the definition of our Kotlin/Native library world:</source>
          <target state="translated">정의의 중요한 부분은 &lt;code&gt;libnative_api.h&lt;/code&gt; 파일에 있습니다. 여기에는 Kotlin / Native 도서관 세계의 정의가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="8c62e96107720a9bca1a776893d559e996f2f875" translate="yes" xml:space="preserve">
          <source>A single annotation without arguments may be placed on the same line as the corresponding declaration:</source>
          <target state="translated">인수가없는 단일 주석은 해당 선언과 같은 줄에 배치 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b436cfd5069ee133fe3275c0591a75add8ffd26" translate="yes" xml:space="preserve">
          <source>A source file may start with a package declaration:</source>
          <target state="translated">소스 파일은 패키지 선언으로 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f7512e43937ac33223fdb2ad1c5fca3d01adf7c7" translate="yes" xml:space="preserve">
          <source>A source of time for measuring time intervals.</source>
          <target state="translated">시간 간격을 측정하기위한 시간 소스입니다.</target>
        </trans-unit>
        <trans-unit id="021186335ce0a94c240ef97ae9b17e18e4801b7f" translate="yes" xml:space="preserve">
          <source>A source set by itself is platform-agnostic, but it can be considered platform-specific if it is only compiled for a single platform. A source set can, therefore, contain either common code shared between the platforms or platform-specific code.</source>
          <target state="translated">소스 세트 자체는 플랫폼에 구애받지 않지만 단일 플랫폼 용으로 만 컴파일 된 경우 플랫폼별로 고려할 수 있습니다. 따라서 소스 세트에는 플랫폼간에 공유되는 공통 코드 또는 플랫폼 별 코드가 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e0c4b0ff108f076b7bc92f46447b67f1f632fcfb" translate="yes" xml:space="preserve">
          <source>A source set is not bound to be platform-specific or &quot;shared&quot;; what it's allowed to contain depends on its usage: a source set added to multiple compilations is limited to the common language features and dependencies, while a source set that is only used by a single target can have platform-specific dependencies, and its code may use language features specific to that target's platform.</source>
          <target state="translated">소스 세트는 플랫폼 별 또는 &quot;공유&quot;로 바인딩되지 않습니다. 포함 할 수있는 것은 사용법에 따라 다릅니다. 여러 컴파일에 추가 된 소스 세트는 공통 언어 기능 및 종속성으로 제한되는 반면 단일 대상에서만 사용되는 소스 세트에는 플랫폼 별 종속성이있을 수 있으며 코드는 해당 대상 플랫폼에 특정한 언어 기능을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="cf7b885d3e7b785c237d9e6e52955268d04983e1" translate="yes" xml:space="preserve">
          <source>A stable component may have an experimental subcomponent, for example:</source>
          <target state="translated">안정된 구성 요소에는 실험적인 하위 구성 요소가있을 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="10969e7d6bbafa2a07abb1535a2f5955bb9d78ee" translate="yes" xml:space="preserve">
          <source>A suspending function asynchronously returns a single value, but how can we return multiple asynchronously computed values? This is where Kotlin Flows come in.</source>
          <target state="translated">일시 중단 함수는 비동기 적으로 단일 값을 반환하지만 비동기 적으로 계산 된 여러 값을 어떻게 반환 할 수 있습니까? 이것이 Kotlin Flows가 들어오는 곳입니다.</target>
        </trans-unit>
        <trans-unit id="cc425ab30bdba05aac08e3df265edc9f79e66b7c" translate="yes" xml:space="preserve">
          <source>A symbol that is declared inside an interface normally should be public. The only other legal visibility modifier is &lt;code&gt;private&lt;/code&gt;, which can only be used if the function body is supplied - that function may then be called by each class that implements the interface, but not by anyone else.</source>
          <target state="translated">인터페이스 내부에 선언 된 심볼은 일반적으로 공개되어야합니다. 다른 유효한 가시성 수정자는 &lt;code&gt;private&lt;/code&gt; 이며, 함수 본문이 제공되는 경우에만 사용할 수 있습니다.이 함수는 인터페이스를 구현하는 각 클래스에서 호출 할 수 있지만 다른 사람은 호출 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="32d61e578eecdd26bc4fc5d5cfb020754a651496" translate="yes" xml:space="preserve">
          <source>A syntactic variation of &lt;code&gt;run()&lt;/code&gt; is &lt;code&gt;let()&lt;/code&gt;, which takes an ordinary function type instead of a function type with receiver, so the expression that might be null will be referred to as &lt;code&gt;it&lt;/code&gt; instead of &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">의 구문 변화 &lt;code&gt;run()&lt;/code&gt; 이다 &lt;code&gt;let()&lt;/code&gt; , null이 될 수있는식이라고한다, 그래서 보통의 함수 타입 대신 수신기 기능 유형을 걸립니다 &lt;code&gt;it&lt;/code&gt; 대신에 &lt;code&gt;this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8d2cba4bd9aa576394cd076dfc4040685186d033" translate="yes" xml:space="preserve">
          <source>A target can have one or more compilations, for example, for production or testing. There are &lt;a href=&quot;#predefined-compilations&quot;&gt;predefined compilations&lt;/a&gt; that are added automatically upon target creation. You can additionally create &lt;a href=&quot;#custom-compilations&quot;&gt;custom compilations&lt;/a&gt;.</source>
          <target state="translated">예를 들어, 대상에는 프로덕션 또는 테스트를위한 하나 이상의 컴파일이있을 수 있습니다. 타겟 생성시 자동으로 추가 되는 &lt;a href=&quot;#predefined-compilations&quot;&gt;미리 정의 된 컴파일&lt;/a&gt; 이 있습니다. 추가로 &lt;a href=&quot;#custom-compilations&quot;&gt;사용자 정의 컴파일을&lt;/a&gt; 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f5545fc39ffaf26de75f2d70b8d37780f23c4704" translate="yes" xml:space="preserve">
          <source>A target is a part of the build responsible for compiling, testing, and packaging a piece of software aimed for one of the &lt;a href=&quot;#supported-platforms&quot;&gt;supported platforms&lt;/a&gt;.</source>
          <target state="translated">대상은 &lt;a href=&quot;#supported-platforms&quot;&gt;지원되는 플랫폼&lt;/a&gt; 중 하나를 대상으로하는 소프트웨어를 컴파일, 테스트 및 패키징하는 빌드의 일부입니다 .</target>
        </trans-unit>
        <trans-unit id="999c54676b7660630ed4d00049d50a094fccdfab" translate="yes" xml:space="preserve">
          <source>A target that is not supported by the current host is ignored during build and therefore not published. A library author may want to set up builds and publishing from different hosts as required by the library target platforms.</source>
          <target state="translated">현재 호스트가 지원하지 않는 대상은 빌드 중에 무시되므로 게시되지 않습니다. 라이브러리 작성자는 라이브러리 대상 플랫폼에 필요한대로 다른 호스트에서 빌드 및 게시를 설정하려고 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="126a6298ac079a53756f6beda62ec28ddef4b280" translate="yes" xml:space="preserve">
          <source>A target that is not supported by the current host is ignored during building and therefore not published.</source>
          <target state="translated">현재 호스트에서 지원하지 않는 대상은 빌드 중에 무시되므로 게시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="96fcc60b3ab303801bc0dc081c98259cae3bf787" translate="yes" xml:space="preserve">
          <source>A test task is created under the name &lt;code&gt;&amp;lt;targetName&amp;gt;Test&lt;/code&gt; for each target that is suitable for testing. Run the &lt;code&gt;check&lt;/code&gt; task to run the tests for all targets.</source>
          <target state="translated">테스트 작업은 &lt;code&gt;&amp;lt;targetName&amp;gt;Test&lt;/code&gt; 에 적합한 각 대상에 대해 &amp;lt;targetName&amp;gt; Test 라는 이름으로 작성됩니다 . 실행 &lt;code&gt;check&lt;/code&gt; 모든 대상에 대한 테스트를 실행하는 작업을.</target>
        </trans-unit>
        <trans-unit id="24c92d1b9f860dcc9a6d0a8d416c5deeed1ce6e6" translate="yes" xml:space="preserve">
          <source>A time source that has programmatically updatable readings. It is useful as a predictable source of time in tests.</source>
          <target state="translated">프로그래밍 방식으로 업데이트 할 수있는 판독 값이있는 시간 원본입니다. 테스트에서 예측 가능한 시간 소스로 유용합니다.</target>
        </trans-unit>
        <trans-unit id="861d28e9163c13534944316989d2aba58690f23c" translate="yes" xml:space="preserve">
          <source>A trailing comma is a comma symbol after the last item of a series of elements:</source>
          <target state="translated">후행 쉼표는 일련의 요소 중 마지막 항목 뒤의 쉼표 기호입니다.</target>
        </trans-unit>
        <trans-unit id="c9a04a4de5ccd8f9acab09df372876b6003bb150" translate="yes" xml:space="preserve">
          <source>A type alias allows you to define an alternative name for an existing type. This is most useful for generic types such as collections, as well as for function types. Here is an example:</source>
          <target state="translated">유형 별명을 사용하면 기존 유형의 대체 이름을 정의 할 수 있습니다. 이는 함수 유형뿐만 아니라 컬렉션과 같은 일반 유형에 가장 유용합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d9a02cc3c9a98a1f2eefa73c09ae2ace003cceec" translate="yes" xml:space="preserve">
          <source>A type-safe builder example</source>
          <target state="translated">타입 안전 빌더 예제</target>
        </trans-unit>
        <trans-unit id="a83383d2cb7b9f20faa43806884ae2df7f1fbeaf" translate="yes" xml:space="preserve">
          <source>A typical use case for external interfaces is to describe settings objects. For example:</source>
          <target state="translated">외부 인터페이스의 일반적인 사용 사례는 설정 개체를 설명하는 것입니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="6c942af40c87105ce9bd9accffec18f0f29c5897" translate="yes" xml:space="preserve">
          <source>A value of a function type can be invoked by using its &lt;a href=&quot;operator-overloading#invoke&quot;&gt;&lt;code&gt;invoke(...)&lt;/code&gt; operator&lt;/a&gt;: &lt;code&gt;f.invoke(x)&lt;/code&gt; or just &lt;code&gt;f(x)&lt;/code&gt;.</source>
          <target state="translated">함수 유형의 값은 &lt;a href=&quot;operator-overloading#invoke&quot;&gt; &lt;code&gt;invoke(...)&lt;/code&gt; 연산자&lt;/a&gt; 를 사용하여 호출 할 수 있습니다 : &lt;code&gt;f.invoke(x)&lt;/code&gt; 또는 &lt;code&gt;f(x)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3803ccd0cee93213eb0c6456398b134b14b2e36e" translate="yes" xml:space="preserve">
          <source>A variable only exists inside the &lt;em&gt;scope&lt;/em&gt; (curly-brace-enclosed block of code; more on that later) in which it has been declared - so a variable that's declared inside a loop only exists in that loop; you can't check its final value after the loop. Variables can be redeclared inside nested scopes - so if there's a parameter &lt;code&gt;x&lt;/code&gt; to a function and you create a loop and declare an &lt;code&gt;x&lt;/code&gt; inside that loop, the &lt;code&gt;x&lt;/code&gt; inside the loop is a different variable than the parameter &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">변수 는 선언 된 &lt;em&gt;스코프&lt;/em&gt; (중괄호로 묶은 코드 블록 에만 해당되며 나중에 자세히 설명)에만 존재합니다. 따라서 루프 내부에 선언 된 변수는 해당 루프에만 존재합니다. 루프 후 최종 값을 확인할 수 없습니다. 변수가 중첩 된 범위 내에서 다시 선언 할 수있다 - 매개 변수 거기에 만약 그렇다면 &lt;code&gt;x&lt;/code&gt; 함수에가 당신이 루프를 만들고 선언 &lt;code&gt;x&lt;/code&gt; 그 루프 내부의 &lt;code&gt;x&lt;/code&gt; 루프 내부 매개 변수와 다른 변수 &lt;code&gt;x&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2ee49960f9187f3de855aad0164b2243999549a6" translate="yes" xml:space="preserve">
          <source>A variable that doesn't refer to anything refers to &lt;code&gt;null&lt;/code&gt; (or you can say that the variable &quot;is null&quot;). As opposed to &lt;code&gt;None&lt;/code&gt; in Python, &lt;code&gt;null&lt;/code&gt; is not an object - it's just a keyword that is used to make a variable refer to nothing or to check if it does (that check must be performed with &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt;). Because nulls are a frequent source of programming errors, Kotlin encourages avoiding them as much as possible - a variable cannot actually be null unless it's been declared to allow for null, which you do by suffixing the type name with &lt;code&gt;?&lt;/code&gt;. For example:</source>
          <target state="translated">아무것도 참조하지 않는 변수는 &lt;code&gt;null&lt;/code&gt; 을 나타냅니다 (또는 변수가 &quot;null&quot;이라고 말할 수 있음). Python의 &lt;code&gt;None&lt;/code&gt; 과 는 달리 &lt;code&gt;null&lt;/code&gt; 은 객체가 아닙니다. 변수는 아무것도 참조하지 않거나 확인하는 데 사용되는 키워드 일뿐입니다 (확인은 &lt;code&gt;==&lt;/code&gt; 또는 &lt;code&gt;!=&lt;/code&gt; 로 수행해야 함 ). null은 프로그래밍 오류의 빈번한 원인이기 때문에 Kotlin은 가능한 한 많은 오류를 피하도록 권장합니다. 변수는 null을 허용하도록 선언되지 않은 한 실제로 null이 될 수 없습니다 &lt;code&gt;?&lt;/code&gt; . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2c75a304d0b9d2b04fc8b2ae831b34ab2f8b99cb" translate="yes" xml:space="preserve">
          <source>A vector of bits growing if necessary and allowing one to set/clear/read bits from it by a bit index.</source>
          <target state="translated">필요한 경우 성장하는 비트 벡터로 비트 인덱스에 의해 비트를 설정 / 삭제 / 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f447137bd99bb0df9c8a7342bebccf5cbfda3a7" translate="yes" xml:space="preserve">
          <source>A version of the Gradle project is used as a value for the &lt;code&gt;version&lt;/code&gt; field. Fields&lt;code&gt;summary&lt;/code&gt; and &lt;code&gt;homepage&lt;/code&gt; can be configured using the &lt;code&gt;cocoapods&lt;/code&gt; code block.</source>
          <target state="translated">Gradle 프로젝트의 &lt;code&gt;version&lt;/code&gt; 은 버전 필드 의 값으로 사용됩니다 . &lt;code&gt;cocoapods&lt;/code&gt; 코드 블록을 사용하여 필드 &lt;code&gt;summary&lt;/code&gt; 및 &lt;code&gt;homepage&lt;/code&gt; 를 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="be76ba82f7b199a36f63aa911810c676f3da9a53" translate="yes" xml:space="preserve">
          <source>A way to manually trigger the generation of Kotlin externals is also available. Please consult the &lt;a href=&quot;js-external-declarations-with-dukat&quot;&gt;documentation&lt;/a&gt; for more information.</source>
          <target state="translated">Kotlin 외부 생성을 수동으로 트리거하는 방법도 사용할 수 있습니다. 자세한 내용 은 &lt;a href=&quot;js-external-declarations-with-dukat&quot;&gt;설명서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2b7d487bfac9fc377272b7fe65ffeb000fb2421c" translate="yes" xml:space="preserve">
          <source>A zero-based index of current iteration is passed as a parameter to &lt;a href=&quot;repeat#kotlin%24repeat%28kotlin.Int%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action&lt;/a&gt;.</source>
          <target state="translated">현재 반복의 0부터 시작하는 인덱스는 &lt;a href=&quot;repeat#kotlin%24repeat%28kotlin.Int%2C+kotlin.Function1%28%28kotlin.Int%2C+kotlin.Unit%29%29%29%2Faction&quot;&gt;action에&lt;/a&gt; 매개 변수로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="048de8477c9c09237c7e68260d780ae035af7d0d" translate="yes" xml:space="preserve">
          <source>A zero-based index of current iteration is passed as a parameter to &lt;a href=&quot;repeat#kotlin%24repeat(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.Unit)))/action&quot;&gt;action&lt;/a&gt;.</source>
          <target state="translated">현재 반복의 0부터 시작하는 색인이 &lt;a href=&quot;repeat#kotlin%24repeat(kotlin.Int,%20kotlin.Function1((kotlin.Int,%20kotlin.Unit)))/action&quot;&gt;action에&lt;/a&gt; 매개 변수로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="83a7a5b782649abaa2ee5c51a6e8c21d46906a36" translate="yes" xml:space="preserve">
          <source>A: As Kotlin/Native needs to download a platform specific toolchain, you need to specify &lt;code&gt;-Dhttp.proxyHost=xxx -Dhttp.proxyPort=xxx&lt;/code&gt; as the compiler's or &lt;code&gt;gradlew&lt;/code&gt; arguments, or set it via the &lt;code&gt;JAVA_OPTS&lt;/code&gt; environment variable.</source>
          <target state="translated">A : Kotlin / Native는 플랫폼 별 툴체인을 다운로드해야 하므로 컴파일러 또는 &lt;code&gt;gradlew&lt;/code&gt; 인수 로 &lt;code&gt;-Dhttp.proxyHost=xxx -Dhttp.proxyPort=xxx&lt;/code&gt; 를 지정 하거나 &lt;code&gt;JAVA_OPTS&lt;/code&gt; 환경 변수 를 통해 설정해야 합니다.</target>
        </trans-unit>
        <trans-unit id="f48fa5d2280b5e4c31db2f6ac951ea7fe7772538" translate="yes" xml:space="preserve">
          <source>A: By default gradle plugin adds it on iOS target.</source>
          <target state="translated">A : 기본적으로 gradle 플러그인은 iOS 대상에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="54f627a5de981e9923ac5206ecaba6b5056c6d69" translate="yes" xml:space="preserve">
          <source>A: Currently, singleton objects are immutable (i.e. frozen after creation), and it's generally considered good practise to have the global state immutable. If for some reason you need a mutable state inside such an object, use the &lt;code&gt;@konan.ThreadLocal&lt;/code&gt; annotation on the object. Also the &lt;code&gt;kotlin.native.concurrent.AtomicReference&lt;/code&gt; class could be used to store different pointers to frozen objects in a frozen object and automatically update them.</source>
          <target state="translated">A : 현재 싱글 톤 객체는 변경할 수 없으며 (즉, 생성 후 고정됨) 일반적으로 전역 상태를 변경할 수없는 것이 좋습니다. 어떤 이유로 그러한 객체 내부에서 변경 가능한 상태가 필요한 경우 객체에서 &lt;code&gt;@konan.ThreadLocal&lt;/code&gt; 주석을 사용하십시오 . 또한 &lt;code&gt;kotlin.native.concurrent.AtomicReference&lt;/code&gt; 클래스를 사용하여 고정 된 객체에 고정 된 객체에 대한 다른 포인터를 저장하고 자동으로 업데이트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="469aef55abc3b452c640ed57fd2b4a77ac9d9c2a" translate="yes" xml:space="preserve">
          <source>A: Define a top level function &lt;code&gt;fun main(args: Array&amp;lt;String&amp;gt;)&lt;/code&gt; or just &lt;code&gt;fun main()&lt;/code&gt; if you are not interested in passed arguments, please ensure it's not in a package. Also compiler switch &lt;code&gt;-entry&lt;/code&gt; could be used to make any function taking &lt;code&gt;Array&amp;lt;String&amp;gt;&lt;/code&gt; or no arguments and return &lt;code&gt;Unit&lt;/code&gt; as an entry point.</source>
          <target state="translated">A : 전달 된 인수에 관심이없는 경우 최상위 함수 &lt;code&gt;fun main(args: Array&amp;lt;String&amp;gt;)&lt;/code&gt; 하거나 &lt;code&gt;fun main()&lt;/code&gt; 하십시오. 패키지에 없는지 확인하십시오. 또한 컴파일러 switch &lt;code&gt;-entry&lt;/code&gt; 를 사용하여 &lt;code&gt;Array&amp;lt;String&amp;gt;&lt;/code&gt; 하거나 인수를 사용하지 않고 &lt;code&gt;Unit&lt;/code&gt; 을 시작점으로 반환 하는 함수를 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="23a7f68b33d01081eaa44341c44994d7c2b4bc72" translate="yes" xml:space="preserve">
          <source>A: It likely happens, because you are trying to mutate a frozen object. An object can transfer to the frozen state either explicitly, as objects reachable from objects on which the &lt;code&gt;kotlin.native.concurrent.freeze&lt;/code&gt; is called, or implicitly (i.e. reachable from &lt;code&gt;enum&lt;/code&gt; or global singleton object - see the next question).</source>
          <target state="translated">A : 고정 된 개체를 변경하려고했기 때문에 발생했을 수 있습니다. &lt;code&gt;kotlin.native.concurrent.freeze&lt;/code&gt; 가 호출 되는 객체에서 도달 할 수있는 객체 또는 암시 적으로 (즉, &lt;code&gt;enum&lt;/code&gt; 또는 전역 단일 객체 에서 도달 할 수있는 -다음 질문 참조) 객체 는 명시 적으로 고정 상태로 전환 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bc0e72bdf6f524c2737d88889afe4af011df20fb" translate="yes" xml:space="preserve">
          <source>A: Kotlin/Native provides an automated memory management scheme, similar to what Java or Swift provides. The current implementation includes an automated reference counter with a cycle collector to collect cyclical garbage.</source>
          <target state="translated">A : Kotlin / Native는 Java 또는 Swift가 제공하는 것과 유사한 자동 메모리 관리 체계를 제공합니다. 현재 구현에는 순환 가비지를 수집하기위한 사이클 수집기가있는 자동 참조 카운터가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="6430ac738ad0305a45bbf44b4a1ea65027089a78" translate="yes" xml:space="preserve">
          <source>A: One of the following should be done:</source>
          <target state="translated">A : 다음 중 하나를 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="fe5cae9a95608abbf572b32e151c3389de9906d9" translate="yes" xml:space="preserve">
          <source>A: Use the &lt;code&gt;-module-name&lt;/code&gt; compiler option or matching Gradle DSL statement, i.e.</source>
          <target state="translated">A : &lt;code&gt;-module-name&lt;/code&gt; 컴파일러 옵션 또는 일치하는 Gradle DSL 문을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="d178f6b7d7ab96c56c796a94a8ffd31fd8247adc" translate="yes" xml:space="preserve">
          <source>A: Use the &lt;code&gt;-produce dynamic&lt;/code&gt; compiler switch, or &lt;code&gt;binaries.sharedLib()&lt;/code&gt; in Gradle, i.e.</source>
          <target state="translated">A : Gradle에서 &lt;code&gt;-produce dynamic&lt;/code&gt; 컴파일러 스위치 또는 &lt;code&gt;binaries.sharedLib()&lt;/code&gt; 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="583522dc14200ed2d6737834038b23fd2169fb2d" translate="yes" xml:space="preserve">
          <source>A: Use the &lt;code&gt;-produce static&lt;/code&gt; compiler switch, or &lt;code&gt;binaries.staticLib()&lt;/code&gt; in Gradle, i.e.</source>
          <target state="translated">A : Gradle에서 &lt;code&gt;-produce static&lt;/code&gt; 컴파일러 스위치 또는 &lt;code&gt;binaries.staticLib()&lt;/code&gt; 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="55ad722eb4893f232638d8208f5ef26172c240a1" translate="yes" xml:space="preserve">
          <source>A: Use the &lt;code&gt;baseName&lt;/code&gt; option. This will also set the module name.</source>
          <target state="translated">A : &lt;code&gt;baseName&lt;/code&gt; 옵션을 사용하십시오 . 모듈 이름도 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="8bdc6249aa90c585c50dc149a1ac486df2283f04" translate="yes" xml:space="preserve">
          <source>AIR</source>
          <target state="translated">AIR</target>
        </trans-unit>
        <trans-unit id="81297a2ee021a840a160551409407615f0d05b15" translate="yes" xml:space="preserve">
          <source>ANDROID</source>
          <target state="translated">ANDROID</target>
        </trans-unit>
        <trans-unit id="c7b386585a8cd45bbd249d61f6484c48e856d346" translate="yes" xml:space="preserve">
          <source>ANNOTATION_CLASS</source>
          <target state="translated">ANNOTATION_CLASS</target>
        </trans-unit>
        <trans-unit id="4a3a08afddace26444e6c02edee535eca390133a" translate="yes" xml:space="preserve">
          <source>AP/Javac options encoding</source>
          <target state="translated">AP / Javac 옵션 인코딩</target>
        </trans-unit>
        <trans-unit id="a4c5aa30008f131f9b717d9610a66f2353fd31d2" translate="yes" xml:space="preserve">
          <source>ARABIC_NUMBER</source>
          <target state="translated">ARABIC_NUMBER</target>
        </trans-unit>
        <trans-unit id="2b3110c25b23e7d1307e6fca7f13cd56712696aa" translate="yes" xml:space="preserve">
          <source>ARM32</source>
          <target state="translated">ARM32</target>
        </trans-unit>
        <trans-unit id="bb16ce026bf1a07a5455f7b9ddaf3fa1e5dc5686" translate="yes" xml:space="preserve">
          <source>ARM64</source>
          <target state="translated">ARM64</target>
        </trans-unit>
        <trans-unit id="22389c32b9d7ab2b2fdb4e3d99b9053c4e8d3d88" translate="yes" xml:space="preserve">
          <source>AT_LEAST_ONCE</source>
          <target state="translated">AT_LEAST_ONCE</target>
        </trans-unit>
        <trans-unit id="dcc1fcaf1557c4d05679436118b3946273a18903" translate="yes" xml:space="preserve">
          <source>AT_MOST_ONCE</source>
          <target state="translated">AT_MOST_ONCE</target>
        </trans-unit>
        <trans-unit id="49ade02a332b7c166aa17f14fd846c7d9e1bd27d" translate="yes" xml:space="preserve">
          <source>AWS Labs provides a &lt;a href=&quot;https://github.com/awslabs/serverless-photo-recognition&quot;&gt;sample project&lt;/a&gt; showing the use of Kotlin for writing &lt;a href=&quot;https://aws.amazon.com/lambda/&quot;&gt;AWS Lambda&lt;/a&gt; functions.</source>
          <target state="translated">AWS Labs는 &lt;a href=&quot;https://aws.amazon.com/lambda/&quot;&gt;AWS Lambda&lt;/a&gt; 함수 작성에 Kotlin을 사용하는 것을 보여주는 &lt;a href=&quot;https://github.com/awslabs/serverless-photo-recognition&quot;&gt;샘플 프로젝트&lt;/a&gt; 를 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="119f87452b9c604da175968848ba17b7bfa8e536" translate="yes" xml:space="preserve">
          <source>Absence of implicit conversions is rarely noticeable because the type is inferred from the context, and arithmetical operations are overloaded for appropriate conversions, for example</source>
          <target state="translated">암시 적 변환의 부재는 컨텍스트에서 유형이 유추되고 예를 들어 적절한 변환을 위해 산술 연산이 오버로드되기 때문에 거의 눈에 띄지 않습니다.</target>
        </trans-unit>
        <trans-unit id="af4c6101610761ea26e2cfbf041a94da323abdcc" translate="yes" xml:space="preserve">
          <source>Abstract Classes</source>
          <target state="translated">추상 클래스</target>
        </trans-unit>
        <trans-unit id="32f08ac28cfa041c2b36410b7bb09baeffc3885e" translate="yes" xml:space="preserve">
          <source>Abstract classes</source>
          <target state="translated">추상 수업</target>
        </trans-unit>
        <trans-unit id="8cac6657db372ec98eec0f1c267bc27922cdbf4d" translate="yes" xml:space="preserve">
          <source>Abstract classes are implicitly open, since they are useless if they don't have any concrete subclasses.</source>
          <target state="translated">추상 클래스는 구체적인 하위 클래스가 없으면 쓸모가 없으므로 암시 적으로 열려 있습니다.</target>
        </trans-unit>
        <trans-unit id="372af3b44fec0ec5a2dae9015dd5aa97b0e6f7cc" translate="yes" xml:space="preserve">
          <source>Abstract collections</source>
          <target state="translated">추상 컬렉션</target>
        </trans-unit>
        <trans-unit id="62deadea5aa50c02c734a956de1e99c71e45bf05" translate="yes" xml:space="preserve">
          <source>AbstractCollection</source>
          <target state="translated">AbstractCollection</target>
        </trans-unit>
        <trans-unit id="ecc696822df6b79b8a28e672bebead3cbea32633" translate="yes" xml:space="preserve">
          <source>AbstractCoroutineContextElement</source>
          <target state="translated">AbstractCoroutineContextElement</target>
        </trans-unit>
        <trans-unit id="7617687ff367025e94735278a9832572629069b4" translate="yes" xml:space="preserve">
          <source>AbstractCoroutineContextKey</source>
          <target state="translated">AbstractCoroutineContextKey</target>
        </trans-unit>
        <trans-unit id="7dded1d06d90f3ca7f0f19f75956d349359eaae4" translate="yes" xml:space="preserve">
          <source>AbstractDoubleClock</source>
          <target state="translated">AbstractDoubleClock</target>
        </trans-unit>
        <trans-unit id="7c3bcc771b5257388420e129d189b3f3f2b24ca1" translate="yes" xml:space="preserve">
          <source>AbstractDoubleTimeSource</source>
          <target state="translated">AbstractDoubleTimeSource</target>
        </trans-unit>
        <trans-unit id="3fcebf45d4e6c238fc15c900d4cdbbe3983ba070" translate="yes" xml:space="preserve">
          <source>AbstractIterator</source>
          <target state="translated">AbstractIterator</target>
        </trans-unit>
        <trans-unit id="80b25eb6b4fc66c38a02c0db0db4701efc036bfe" translate="yes" xml:space="preserve">
          <source>AbstractList</source>
          <target state="translated">AbstractList</target>
        </trans-unit>
        <trans-unit id="b480481039a7c342a1d3763fcc94c493f0ea5216" translate="yes" xml:space="preserve">
          <source>AbstractLongClock</source>
          <target state="translated">AbstractLongClock</target>
        </trans-unit>
        <trans-unit id="28da5f3170cf00831723e48ae6e88ce34367c625" translate="yes" xml:space="preserve">
          <source>AbstractLongTimeSource</source>
          <target state="translated">AbstractLongTimeSource</target>
        </trans-unit>
        <trans-unit id="e5b1267bb3362c3d2609d08b1cc8a480c087ece8" translate="yes" xml:space="preserve">
          <source>AbstractMap</source>
          <target state="translated">AbstractMap</target>
        </trans-unit>
        <trans-unit id="d196bcf450087d1563b9908b7c60861d7a7b03d3" translate="yes" xml:space="preserve">
          <source>AbstractMutableCollection</source>
          <target state="translated">AbstractMutableCollection</target>
        </trans-unit>
        <trans-unit id="cdab0b7c59398ffe8f8c4e2414f6fb32c45154f4" translate="yes" xml:space="preserve">
          <source>AbstractMutableList</source>
          <target state="translated">AbstractMutableList</target>
        </trans-unit>
        <trans-unit id="1dbbde4c21f402ba61eaeabc7559d1d8b069c230" translate="yes" xml:space="preserve">
          <source>AbstractMutableMap</source>
          <target state="translated">AbstractMutableMap</target>
        </trans-unit>
        <trans-unit id="29ae24d786bef4da7e776d19818073cb89a6fefb" translate="yes" xml:space="preserve">
          <source>AbstractMutableSet</source>
          <target state="translated">AbstractMutableSet</target>
        </trans-unit>
        <trans-unit id="ce89d8527dc144fe8623087bd9235422a835ad7f" translate="yes" xml:space="preserve">
          <source>AbstractSet</source>
          <target state="translated">AbstractSet</target>
        </trans-unit>
        <trans-unit id="78edc1854054dd0a65df4bf632ca35ca20d99437" translate="yes" xml:space="preserve">
          <source>AbstractWorker</source>
          <target state="translated">AbstractWorker</target>
        </trans-unit>
        <trans-unit id="d643ec9915705c8027322ebf2901570f7506775c" translate="yes" xml:space="preserve">
          <source>Accept the default configuration on the next screen and click &lt;strong&gt;Finish&lt;/strong&gt;.</source>
          <target state="translated">다음 화면에서 기본 구성을 수락하고 &lt;strong&gt;마침을&lt;/strong&gt; 클릭 &lt;strong&gt;합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="eda4c38688257f702869f0b9f43c8335c0c094ea" translate="yes" xml:space="preserve">
          <source>Access binaries</source>
          <target state="translated">바이너리 액세스</target>
        </trans-unit>
        <trans-unit id="2f6b12650a7b48bdb33219ffa88be9cae7810c3b" translate="yes" xml:space="preserve">
          <source>Access to the link task.</source>
          <target state="translated">링크 작업에 대한 액세스.</target>
        </trans-unit>
        <trans-unit id="a8aa5bf09233a70c32c6655f448782ca035176b5" translate="yes" xml:space="preserve">
          <source>Access to the output file.</source>
          <target state="translated">출력 파일에 대한 액세스.</target>
        </trans-unit>
        <trans-unit id="246ee7cb78ceaf30d9fc8185bd20b1cdd75995fd" translate="yes" xml:space="preserve">
          <source>Access to the run task for executable binaries. For targets other than &lt;code&gt;linuxX64&lt;/code&gt;, &lt;code&gt;macosX64&lt;/code&gt;, or &lt;code&gt;mingwX64&lt;/code&gt; the value is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">실행 가능한 바이너리의 실행 작업에 액세스합니다. &lt;code&gt;linuxX64&lt;/code&gt; , &lt;code&gt;macosX64&lt;/code&gt; 또는 &lt;code&gt;mingwX64&lt;/code&gt; 이외의 대상의 경우 값은 &lt;code&gt;null&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="54c67fd3d098f3a0f1411f92bb9d4b4763843d8c" translate="yes" xml:space="preserve">
          <source>Access to top-level properties (&lt;code&gt;document&lt;/code&gt;, &lt;code&gt;window&lt;/code&gt; etc.) in the browser environment.</source>
          <target state="translated">브라우저 환경에서 최상위 속성 ( &lt;code&gt;document&lt;/code&gt; , &lt;code&gt;window&lt;/code&gt; 등)에 액세스 합니다.</target>
        </trans-unit>
        <trans-unit id="062b46dbf1f59a76df58f1a799356641383d7198" translate="yes" xml:space="preserve">
          <source>AccessDeniedException</source>
          <target state="translated">AccessDeniedException</target>
        </trans-unit>
        <trans-unit id="8a353ce773c51b184dc9ab781e4fce8619d42835" translate="yes" xml:space="preserve">
          <source>Accessing a &lt;code&gt;lateinit&lt;/code&gt; property before it has been initialized throws a special exception that clearly identifies the property being accessed and the fact that it hasn't been initialized.</source>
          <target state="translated">초기화되기 전에 &lt;code&gt;lateinit&lt;/code&gt; 속성에 액세스하면 액세스 중인 속성과 해당 속성이 초기화되지 않았다는 사실을 명확하게 식별하는 특별한 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="6f5a767ddc1bd76dea008380c3691401bac40d76" translate="yes" xml:space="preserve">
          <source>Accessing a map</source>
          <target state="translated">지도에 액세스</target>
        </trans-unit>
        <trans-unit id="ded4c19079868702de4a0401515f9859ce6d0d41" translate="yes" xml:space="preserve">
          <source>Accessing binaries</source>
          <target state="translated">바이너리에 액세스</target>
        </trans-unit>
        <trans-unit id="dc33d6b550c28222c845e121b06fbd0aed19e534" translate="yes" xml:space="preserve">
          <source>Accessing properties of an annotation instance</source>
          <target state="translated">주석 인스턴스의 속성에 액세스</target>
        </trans-unit>
        <trans-unit id="2593716ac51411fe9db10d5eff2682c068580793" translate="yes" xml:space="preserve">
          <source>Accessing static members</source>
          <target state="translated">정적 멤버에 액세스</target>
        </trans-unit>
        <trans-unit id="cf842181d642477f23f2c69b279d1bfb3dc226bf" translate="yes" xml:space="preserve">
          <source>Accessing this property first time creates a keys view from &lt;a href=&quot;../-map/entries#kotlin.collections.Map%24entries&quot;&gt;entries&lt;/a&gt;. All subsequent accesses just return the created instance.</source>
          <target state="translated">이 속성에 처음 액세스하면 &lt;a href=&quot;../-map/entries#kotlin.collections.Map%24entries&quot;&gt;항목&lt;/a&gt; 에서 키보기가 작성 됩니다. 모든 후속 액세스는 작성된 인스턴스를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="deda93269f212a2a0f24d9b71bae5f2f0178db44" translate="yes" xml:space="preserve">
          <source>Accessing this property first time creates a values view from &lt;a href=&quot;../-map/entries#kotlin.collections.Map%24entries&quot;&gt;entries&lt;/a&gt;. All subsequent accesses just return the created instance.</source>
          <target state="translated">이 속성에 처음 액세스하면 &lt;a href=&quot;../-map/entries#kotlin.collections.Map%24entries&quot;&gt;항목&lt;/a&gt; 에서 값보기가 작성 됩니다. 모든 후속 액세스는 작성된 인스턴스를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="547cfc7558e9e8755a8cea3edea36cf00e80e196" translate="yes" xml:space="preserve">
          <source>Accessor</source>
          <target state="translated">Accessor</target>
        </trans-unit>
        <trans-unit id="2d8b9d11aed9ad552693fdb8b7b4209cbca66a6c" translate="yes" xml:space="preserve">
          <source>According to Java's rules, &lt;code&gt;finalize()&lt;/code&gt; must not be &lt;em&gt;private&lt;/em&gt;.</source>
          <target state="translated">Java 규칙에 따르면 &lt;code&gt;finalize()&lt;/code&gt; 는 &lt;em&gt;private이&lt;/em&gt; 아니어야합니다 .</target>
        </trans-unit>
        <trans-unit id="9d7969d8117492818659f0c607553d5974d396b5" translate="yes" xml:space="preserve">
          <source>According to the Feedback Loop principle described above, we iterate on our designs in the open and release versions of the language where some features have one of the &lt;em&gt;pre-stable&lt;/em&gt; statuses and &lt;em&gt;are supposed to change&lt;/em&gt;. Such features can be added, changed or removed at any point and without warning. We do our best to ensure that pre-stable features can't be used accidentally by an unsuspecting user. Such features usually require some sort of an explicit opt-in either in the code or in the project configuration.</source>
          <target state="translated">위에서 설명한 피드백 루프 원칙에 따라 일부 기능이 &lt;em&gt;사전 안정&lt;/em&gt; 상태 중 하나를 가지고 &lt;em&gt;변경 될&lt;/em&gt; 예정인 개방형 및 릴리스 버전의 언어로 설계를 반복합니다 . 이러한 기능은 경고없이 언제든지 추가, 변경 또는 제거 할 수 있습니다. 의심하지 않는 사용자가 사전 안정된 기능을 실수로 사용하지 않도록 최선을 다합니다. 이러한 기능에는 일반적으로 코드 또는 프로젝트 구성에서 일종의 명시 적 옵트 인이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="a6cd67dc89d8085d643ec218854da3053ee3016a" translate="yes" xml:space="preserve">
          <source>According to the Feedback Loop principle described above, we iterate on our designs in the open and release versions of the language where some features have the &lt;em&gt;experimental&lt;/em&gt; status and &lt;em&gt;are supposed to change&lt;/em&gt;. Experimental features can be added, changed or removed at any point and without warning. We make sure that experimental features can't be used accidentally by an unsuspecting user. Such features usually require some sort of an explicit opt-in either in the code or in the project configuration.</source>
          <target state="translated">위에서 설명한 Feedback Loop 원칙에 따라 일부 기능이 &lt;em&gt;실험적인&lt;/em&gt; 상태 &lt;em&gt;를 갖고 변경 될&lt;/em&gt; 예정인 언어의 개방형 및 릴리스 버전에서 설계를 반복합니다 . 실험 기능은 언제든지 경고없이 추가, 변경 또는 제거 할 수 있습니다. 의심없는 사용자가 실험 기능을 실수로 사용할 수 없도록합니다. 이러한 기능은 일반적으로 코드 또는 프로젝트 구성에서 명시 적 옵트 인을 필요로합니다.</target>
        </trans-unit>
        <trans-unit id="3607a01777a8d5a65ab1d061a49e095a4fcb830f" translate="yes" xml:space="preserve">
          <source>Accumulates entries of this context starting with &lt;a href=&quot;../-coroutine-context/fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../-coroutine-context/fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element of this context.</source>
          <target state="translated">이 컨텍스트 엔트리에서 시작 적산 &lt;a href=&quot;../-coroutine-context/fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값 및인가 &lt;a href=&quot;../-coroutine-context/fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로이 상황의 각 요소를 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="bd0486e1965ae688f70b7b8d86e157559e3bcd1e" translate="yes" xml:space="preserve">
          <source>Accumulates entries of this context starting with &lt;a href=&quot;../-coroutine-context/fold#kotlin.coroutines.CoroutineContext%24fold(kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.Function2((kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.coroutines.CoroutineContext.Element,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../-coroutine-context/fold#kotlin.coroutines.CoroutineContext%24fold(kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.Function2((kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.coroutines.CoroutineContext.Element,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element of this context.</source>
          <target state="translated">이 컨텍스트의 항목을 &lt;a href=&quot;../-coroutine-context/fold#kotlin.coroutines.CoroutineContext%24fold(kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.Function2((kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.coroutines.CoroutineContext.Element,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하고 왼쪽에서 오른쪽으로 현재 누산기 값과이 컨텍스트의 각 요소에 적용하는 &lt;a href=&quot;../-coroutine-context/fold#kotlin.coroutines.CoroutineContext%24fold(kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.Function2((kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.coroutines.CoroutineContext.Element,%20)))/operation&quot;&gt;작업&lt;/a&gt; 을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="71476199892facc6d22265c0f1d161804d8adacd" translate="yes" xml:space="preserve">
          <source>Accumulates entries of this context starting with &lt;a href=&quot;../-coroutine-context/fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../-coroutine-context/fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element of this context.</source>
          <target state="translated">이 컨텍스트 엔트리에서 시작 적산 &lt;a href=&quot;../-coroutine-context/fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값 및인가 &lt;a href=&quot;../-coroutine-context/fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로이 상황의 각 요소를 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="1c9c7f55c8a3f1326f6ed22f8562419c67d22168" translate="yes" xml:space="preserve">
          <source>Accumulates entries of this context starting with &lt;a href=&quot;../fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element of this context.</source>
          <target state="translated">이 컨텍스트 엔트리에서 시작 적산 &lt;a href=&quot;../fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값 및인가 &lt;a href=&quot;../fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로이 상황의 각 요소를 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="1a5961ef2993f23a0e987b23a37a91f7e4447a13" translate="yes" xml:space="preserve">
          <source>Accumulates entries of this context starting with &lt;a href=&quot;../fold#kotlin.coroutines.CoroutineContext%24fold(kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.Function2((kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.coroutines.CoroutineContext.Element,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold#kotlin.coroutines.CoroutineContext%24fold(kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.Function2((kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.coroutines.CoroutineContext.Element,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element of this context.</source>
          <target state="translated">이 컨텍스트의 항목을 &lt;a href=&quot;../fold#kotlin.coroutines.CoroutineContext%24fold(kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.Function2((kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.coroutines.CoroutineContext.Element,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하고 왼쪽에서 오른쪽으로 현재 누산기 값과이 컨텍스트의 각 요소에 적용하는 &lt;a href=&quot;../fold#kotlin.coroutines.CoroutineContext%24fold(kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.Function2((kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.coroutines.CoroutineContext.Element,%20)))/operation&quot;&gt;작업&lt;/a&gt; 을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="3de8543e178b7990cb6f2a115af66f701d127724" translate="yes" xml:space="preserve">
          <source>Accumulates entries of this context starting with &lt;a href=&quot;../fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element of this context.</source>
          <target state="translated">이 컨텍스트 엔트리에서 시작 적산 &lt;a href=&quot;../fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값 및인가 &lt;a href=&quot;../fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로이 상황의 각 요소를 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="1adebe0a3bc77b985c9e47524bc68db2419fad8a" translate="yes" xml:space="preserve">
          <source>Accumulates entries of this context starting with &lt;a href=&quot;fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element of this context.</source>
          <target state="translated">이 컨텍스트 엔트리에서 시작 적산 &lt;a href=&quot;fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값 및인가 &lt;a href=&quot;fold#kotlin.coroutines.CoroutineContext%24fold%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.CoroutineContext.fold.R%2C+kotlin.coroutines.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로이 상황의 각 요소를 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="88cb220a827b3e66e338d08e9e36a979b130d95f" translate="yes" xml:space="preserve">
          <source>Accumulates entries of this context starting with &lt;a href=&quot;fold#kotlin.coroutines.CoroutineContext%24fold(kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.Function2((kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.coroutines.CoroutineContext.Element,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold#kotlin.coroutines.CoroutineContext%24fold(kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.Function2((kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.coroutines.CoroutineContext.Element,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element of this context.</source>
          <target state="translated">이 컨텍스트의 항목을 &lt;a href=&quot;fold#kotlin.coroutines.CoroutineContext%24fold(kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.Function2((kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.coroutines.CoroutineContext.Element,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하고 왼쪽에서 오른쪽으로 현재 누산기 값과이 컨텍스트의 각 요소에 적용하는 &lt;a href=&quot;fold#kotlin.coroutines.CoroutineContext%24fold(kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.Function2((kotlin.coroutines.CoroutineContext.fold.R,%20kotlin.coroutines.CoroutineContext.Element,%20)))/operation&quot;&gt;작업&lt;/a&gt; 을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="c92f86d300219c2b7ac9a5e2a77e5d21940fe204" translate="yes" xml:space="preserve">
          <source>Accumulates entries of this context starting with &lt;a href=&quot;fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element of this context.</source>
          <target state="translated">이 컨텍스트 엔트리에서 시작 적산 &lt;a href=&quot;fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값 및인가 &lt;a href=&quot;fold#kotlin.coroutines.experimental.CoroutineContext%24fold%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.Function2%28%28kotlin.coroutines.experimental.CoroutineContext.fold.R%2C+kotlin.coroutines.experimental.CoroutineContext.Element%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로이 상황의 각 요소를 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="ca613627da9a2347675d12e71dfe561b2ca3d08c" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.Array%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.Array%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.Array%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.Array%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="a033a45ed69305a90908491839025cd1330b8b80" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.BooleanArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Boolean%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.BooleanArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Boolean%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.BooleanArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Boolean%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.BooleanArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Boolean%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="eedbdd10c9e0460e29309d06089006e375ac1524" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ByteArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Byte%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ByteArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Byte%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ByteArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Byte%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ByteArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Byte%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="d04ad6c29405e360d504c0484cb821e4b7cdba40" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.CharArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.CharArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.CharArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.CharArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="9300614531c5faad8417c38c3807a8958fcca8d3" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.DoubleArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Double%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.DoubleArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Double%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.DoubleArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Double%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.DoubleArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Double%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="bbfb3cfb0bb6b45869d1c0d2e8b792cc6c6e1d0e" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.FloatArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Float%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.FloatArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Float%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.FloatArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Float%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.FloatArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Float%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="de2163ecfe98e1dab5b357df8463499f8441fa90" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.IntArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Int%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.IntArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Int%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.IntArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Int%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.IntArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Int%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="9e6a2a3ce71cbd27c3bc7f7bd74565a550623525" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.LongArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Long%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.LongArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Long%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.LongArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Long%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.LongArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Long%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="7ee6675801a2685a51bef36ec4fae47a8f24dc5b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ShortArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Short%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ShortArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Short%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ShortArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Short%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ShortArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.Short%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="82ecab0e80917b6717ae82989f4221409eb9b3a1" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UByteArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UByte%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UByteArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UByte%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UByteArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UByte%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UByteArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UByte%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="886f394ca69291a9fbedb65748a0bef3abd60318" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UIntArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UInt%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UIntArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UInt%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UIntArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UInt%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UIntArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UInt%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="793bb61c1b9580eb3f2b9fdc6e44752975fb3df5" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ULongArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.ULong%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ULongArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.ULong%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ULongArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.ULong%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.ULongArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.ULong%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="810b5671858987b8e81ba9d528fb2e7adaa56b6b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UShortArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UShort%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UShortArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UShort%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UShortArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UShort%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.UShortArray%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.UShort%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="46b147ecd01a7992c75b767dbdf9a536e5f9ec8d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.collections.Iterable%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.collections.Iterable%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.collections.Iterable%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold%28kotlin.collections.Iterable%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="c2b02260402904381da43ec5b21f7cfe87b6bd58" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.Array((kotlin.collections.fold.T)),%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.collections.fold.T,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.Array((kotlin.collections.fold.T)),%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.collections.fold.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.Array((kotlin.collections.fold.T)),%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.collections.fold.T,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값부터 누적 된 값을 현재 누적 기 값과 각 요소에 왼쪽에서 오른쪽으로 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.Array((kotlin.collections.fold.T)),%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.collections.fold.T,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="1a64fd0f2bdfb8ce5aa9c844c9a4deeaf89f6381" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.BooleanArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Boolean,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.BooleanArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Boolean,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.BooleanArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Boolean,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값부터 누적 된 값을 현재 누적 기 값과 각 요소에 왼쪽에서 오른쪽으로 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.BooleanArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Boolean,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="32404acb283861da407839d46881d06dceecfa57" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.ByteArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Byte,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.ByteArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Byte,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.ByteArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Byte,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값부터 누적 된 값을 현재 누적 기 값과 각 요소에 왼쪽에서 오른쪽으로 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.ByteArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Byte,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="279bb1add4423bb4a5da4c51edcb4782585c2384" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.CharArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Char,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.CharArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Char,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.CharArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Char,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값부터 누적 된 값을 현재 누적 기 값과 각 요소에 왼쪽에서 오른쪽으로 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.CharArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Char,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="d3cbda6b906385e602136584bcf35bd2b92823a8" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.DoubleArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Double,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.DoubleArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Double,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.DoubleArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Double,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값부터 누적 된 값을 현재 누적 기 값과 각 요소에 왼쪽에서 오른쪽으로 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.DoubleArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Double,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="b1604b53ebed36bb8971a5a82430e9c4b6761931" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.FloatArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Float,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.FloatArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Float,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.FloatArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Float,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값부터 누적 된 값을 현재 누적 기 값과 각 요소에 왼쪽에서 오른쪽으로 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.FloatArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Float,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="6f8f76cb84d6e53e04d97ca16150934a08943d65" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.IntArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Int,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.IntArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Int,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.IntArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Int,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값부터 누적 된 값을 현재 누적 기 값과 각 요소에 왼쪽에서 오른쪽으로 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.IntArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Int,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="3d962dd3f4aaf054bcf01f3864733b9fe40c2592" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.LongArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Long,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.LongArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Long,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.LongArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Long,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값부터 누적 된 값을 현재 누적 기 값과 각 요소에 왼쪽에서 오른쪽으로 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.LongArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Long,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="2ec3772beb4d1562160790f3dcd21f486449d66b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.ShortArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Short,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.ShortArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Short,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.ShortArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Short,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값부터 누적 된 값을 현재 누적 기 값과 각 요소에 왼쪽에서 오른쪽으로 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.ShortArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.Short,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="6686c1e006161752658fc59709095735942fd8c8" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.UByteArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.UByte,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.UByteArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.UByte,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.UByteArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.UByte,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값부터 누적 된 값을 현재 누적 기 값과 각 요소에 왼쪽에서 오른쪽으로 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.UByteArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.UByte,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="580eb254d9f79648998cd7cd2d4ff71fb0b8a5b9" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.UIntArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.UInt,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.UIntArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.UInt,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.UIntArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.UInt,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값부터 누적 된 값을 현재 누적 기 값과 각 요소에 왼쪽에서 오른쪽으로 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.UIntArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.UInt,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="d887b78d6bf22227a01c776150cf3e221f5fb10f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.ULongArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.ULong,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.ULongArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.ULong,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.ULongArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.ULong,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값부터 누적 된 값을 현재 누적 기 값과 각 요소에 왼쪽에서 오른쪽으로 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.ULongArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.ULong,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="d34586f41547a6fd768935301d7b7679f9db4355" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.UShortArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.UShort,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.UShortArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.UShort,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.UShortArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.UShort,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값부터 누적 된 값을 현재 누적 기 값과 각 요소에 왼쪽에서 오른쪽으로 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.UShortArray,%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.UShort,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="8febe803ecb1c7a883a4bdc9796f294cbc10d092" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.collections.Iterable((kotlin.collections.fold.T)),%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.collections.fold.T,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.collections.Iterable((kotlin.collections.fold.T)),%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.collections.fold.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.collections.Iterable((kotlin.collections.fold.T)),%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.collections.fold.T,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값부터 누적 된 값을 현재 누적 기 값과 각 요소에 왼쪽에서 오른쪽으로 &lt;a href=&quot;../../kotlin.collections/fold#kotlin.collections%24fold(kotlin.collections.Iterable((kotlin.collections.fold.T)),%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.collections.fold.T,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="91889b35d06dfea59afaa75a6ca8578533d73df4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.Array%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.Array%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.Array%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.Array%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="64cae70b8c8e04f6da7e831db99ec507f348f875" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.BooleanArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Boolean%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.BooleanArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Boolean%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.BooleanArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Boolean%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.BooleanArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Boolean%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="a248926c6b485e7bdf457cef68908b25e6424544" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ByteArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Byte%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ByteArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Byte%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ByteArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Byte%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ByteArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Byte%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="f7126bf63fb5d55e1c50142f74a7b009caaa3932" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.CharArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.CharArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.CharArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.CharArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="cdeb90d2bf8275eab3d7be4b67ef9fc0daf55588" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.DoubleArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Double%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.DoubleArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Double%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.DoubleArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Double%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.DoubleArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Double%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="ada71c462f447f364b1bef5bd3a8a122f56a0419" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.FloatArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Float%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.FloatArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Float%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.FloatArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Float%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.FloatArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Float%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="5392b6e8328be7dbc507002914b8bba08c37aa0b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.IntArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.IntArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.IntArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.IntArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="07044a36276f4964e52fafbc8637339a15d059de" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.LongArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Long%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.LongArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Long%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.LongArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Long%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.LongArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Long%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="a1975a7e0702c566212e09d231a8af09e6a1b135" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ShortArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Short%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ShortArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Short%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ShortArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Short%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ShortArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Short%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="3be352690fa0fa3ef54f830f6e18283eb2997c42" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UByteArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UByte%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UByteArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UByte%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UByteArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UByte%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UByteArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UByte%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="221b5ad4be94c64345f9330c5ca699ef1683ff3f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UIntArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UInt%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UIntArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UInt%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UIntArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UInt%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UIntArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UInt%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="48366385041714313264f54f6f227c09ebc2c7ee" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ULongArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.ULong%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ULongArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.ULong%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ULongArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.ULong%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.ULongArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.ULong%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="d49c134fd4f615c3c993361a8da61f1a575788d0" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UShortArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UShort%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UShortArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UShort%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UShortArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UShort%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.UShortArray%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.UShort%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="ca85efafcb00b8938ace22dacd3162276f9dbb77" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 컬렉션의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="f3e6a35fd40ceb8d1e9cb82f8d7c9e8674405e86" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.Array((kotlin.collections.foldIndexed.T)),%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.collections.foldIndexed.T,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.Array((kotlin.collections.foldIndexed.T)),%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.collections.foldIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.Array((kotlin.collections.foldIndexed.T)),%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.collections.foldIndexed.T,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.Array((kotlin.collections.foldIndexed.T)),%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.collections.foldIndexed.T,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="8cea101c7cf191536ef7e7e22ff7982a9c50dffe" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.BooleanArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Boolean,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.BooleanArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Boolean,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.BooleanArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Boolean,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.BooleanArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Boolean,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="bfa6c6d1020b50c978bee1775b53968fafe84b90" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.ByteArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Byte,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.ByteArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Byte,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.ByteArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Byte,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.ByteArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Byte,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="40acdd9666348cee6715b137abec29081c480a6c" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.CharArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Char,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.CharArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Char,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.CharArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Char,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.CharArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Char,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="2e9e2a08d52f4b0e186e2b10a55b9fd576161c3d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.DoubleArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Double,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.DoubleArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Double,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.DoubleArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Double,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.DoubleArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Double,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="0895630ce622f6028cdd8d190839e62a8ccb5fb6" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.FloatArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Float,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.FloatArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Float,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.FloatArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Float,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.FloatArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Float,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="facf7cf51775a3e97cbb68655c95d6f875cf6855" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.IntArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.IntArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.IntArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.IntArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="323b03ba5aee5e9d37bface32129b2ca41b9bd21" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.LongArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Long,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.LongArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Long,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.LongArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Long,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.LongArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Long,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="13238fd193644d071d9b1b106f7daa7c8e35a8bf" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.ShortArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Short,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.ShortArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Short,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.ShortArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Short,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.ShortArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.Short,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="f55c3d8a845cfc47131f9748cdbb26fbd27ecdf3" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.UByteArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.UByte,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.UByteArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.UByte,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.UByteArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.UByte,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.UByteArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.UByte,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="5a32f0a2968ac23a653644aba1ca122b097966e7" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.UIntArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.UInt,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.UIntArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.UInt,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.UIntArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.UInt,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.UIntArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.UInt,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="4f54757408c49ac732bc2c7e2198cc97c03f1cd9" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.ULongArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.ULong,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.ULongArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.ULong,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.ULongArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.ULong,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.ULongArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.ULong,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="018b31a083c082c1377298450f428db5b80cd86b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.UShortArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.UShort,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.UShortArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.UShort,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.UShortArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.UShort,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.UShortArray,%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.UShort,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="ea81453eb918c0a4e734faa54054cd9aff88e341" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.collections.Iterable((kotlin.collections.foldIndexed.T)),%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.collections.foldIndexed.T,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.collections.Iterable((kotlin.collections.foldIndexed.T)),%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.collections.foldIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.collections.Iterable((kotlin.collections.foldIndexed.T)),%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.collections.foldIndexed.T,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 왼쪽에서 오른쪽으로 현재 누적 기 값과 원래 컬렉션의 인덱스가있는 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-indexed#kotlin.collections%24foldIndexed(kotlin.collections.Iterable((kotlin.collections.foldIndexed.T)),%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.collections.foldIndexed.T,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="ae6cc016ad96d05f14db6d26d3e9c67b9c278b43" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.Array%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.Array%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.Array%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.Array%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="8eac016d4931189efe3e233318b3463880b2d17e" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.BooleanArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Boolean%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.BooleanArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Boolean%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.BooleanArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Boolean%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.BooleanArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Boolean%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="9f2498e1175a66d3f2389f3f5921bf8126b53fb9" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ByteArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Byte%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ByteArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Byte%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ByteArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Byte%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ByteArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Byte%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="e50922f4549b58c5a41f4cf28105893a59305638" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.CharArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.CharArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.CharArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.CharArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="14f5ed33ef7891e166ad6e304078e43739c45bc7" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.DoubleArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Double%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.DoubleArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Double%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.DoubleArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Double%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.DoubleArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Double%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="5139ef4a6259c496fbcce364929ff9ff8be89983" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.FloatArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Float%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.FloatArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Float%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.FloatArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Float%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.FloatArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Float%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="b49e75d806989ef99f1beb1be6a4b244231b50d1" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.IntArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.IntArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.IntArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.IntArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Int%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="a66e47e81114b98157386b3156e1c6e019b21e30" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.LongArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Long%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.LongArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Long%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.LongArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Long%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.LongArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Long%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="1860473b45ca6882ee50e8fc058cabcc69b53299" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ShortArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Short%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ShortArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Short%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ShortArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Short%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ShortArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.Short%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="1236dd9e958f14c9955c6fc59a9dff8371be2208" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UByteArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UByte%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UByteArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UByte%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UByteArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UByte%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UByteArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UByte%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="114999fa69ed69c44be540f63dd7169cde2827e2" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UIntArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UInt%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UIntArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UInt%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UIntArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UInt%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UIntArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UInt%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="71c5baccce3c10735674e26504c50fda45346776" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ULongArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.ULong%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ULongArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.ULong%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ULongArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.ULong%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.ULongArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.ULong%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="307dbd50ef858e8dd9ac380f56dcd3ea242e9c69" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UShortArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UShort%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UShortArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UShort%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UShortArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UShort%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight%28kotlin.UShortArray%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.UShort%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="2369dcbca6c3b0fa8f25b0a4ad853b19cf854fe7" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.Array((kotlin.collections.foldRight.T)),%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.collections.foldRight.T,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.Array((kotlin.collections.foldRight.T)),%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.collections.foldRight.T,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.Array((kotlin.collections.foldRight.T)),%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.collections.foldRight.T,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작 하여 각 요소와 현재 누산기 값에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.Array((kotlin.collections.foldRight.T)),%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.collections.foldRight.T,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="5c33d6edab6646566ec0b58b2320cb31b99a6821" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.BooleanArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Boolean,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.BooleanArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Boolean,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.BooleanArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Boolean,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작 하여 각 요소와 현재 누산기 값에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.BooleanArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Boolean,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="174d6ae44e8b3b408162066f1ca007f645c9b2b6" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.ByteArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Byte,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.ByteArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Byte,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.ByteArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Byte,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작 하여 각 요소와 현재 누산기 값에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.ByteArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Byte,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="c05756275ad8a653aac088ab8028fc208749466e" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.CharArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Char,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.CharArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Char,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.CharArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Char,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작 하여 각 요소와 현재 누산기 값에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.CharArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Char,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="8c1f854d8d5bb5e93cda4ae50b9f93b333c7c5b6" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.DoubleArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Double,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.DoubleArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Double,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.DoubleArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Double,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작 하여 각 요소와 현재 누산기 값에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.DoubleArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Double,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="0893f047f116ed54b10dfd7ab2f1a0bdedc0c04b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.FloatArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Float,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.FloatArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Float,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.FloatArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Float,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작 하여 각 요소와 현재 누산기 값에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.FloatArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Float,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="0473f1c82a2b5bf2987b94ac4efadd246bfb5695" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.IntArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Int,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.IntArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Int,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.IntArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Int,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작 하여 각 요소와 현재 누산기 값에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.IntArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Int,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="9c0834382fb598080662ecbd92c5a313593ac25a" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.LongArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Long,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.LongArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Long,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.LongArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Long,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작 하여 각 요소와 현재 누산기 값에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.LongArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Long,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="c348cfcbff25c62e86bda26683c30fec5d1ac491" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.ShortArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Short,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.ShortArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Short,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.ShortArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Short,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작 하여 각 요소와 현재 누산기 값에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.ShortArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.Short,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="5503d666d08afb578becad69dc20ef7e14c5d471" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.UByteArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.UByte,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.UByteArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.UByte,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.UByteArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.UByte,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작 하여 각 요소와 현재 누산기 값에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.UByteArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.UByte,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="89d3045b9b7c04c4a817103a1dfe7dfd40a14867" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.UIntArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.UInt,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.UIntArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.UInt,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.UIntArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.UInt,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작 하여 각 요소와 현재 누산기 값에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.UIntArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.UInt,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="7936c3ee8415a7c13780a71d639c13a2c8215b37" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.ULongArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.ULong,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.ULongArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.ULong,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.ULongArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.ULong,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작 하여 각 요소와 현재 누산기 값에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.ULongArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.ULong,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="3d2e48d862991667752a89c140c18fd544da14b6" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.UShortArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.UShort,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.UShortArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.UShort,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.UShortArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.UShort,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작 하여 각 요소와 현재 누산기 값에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right#kotlin.collections%24foldRight(kotlin.UShortArray,%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.UShort,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="559903b0545a6ff2ddf045918701294a7c40e5f1" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.Array%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.Array%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.Array%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.Array%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="07f8f7b78f6653489928dd51903cf81e38031927" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.BooleanArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Boolean%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.BooleanArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Boolean%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.BooleanArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Boolean%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.BooleanArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Boolean%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="d3fe8f77d1761b2159dd0a75b53fe9aa0515f8bc" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ByteArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Byte%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ByteArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Byte%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ByteArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Byte%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ByteArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Byte%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="22b0c89d0ddfc9b3c0c98e129e8fa11e86ab2de8" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.CharArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.CharArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.CharArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.CharArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="4763b5f05cc1de476bf552672dbcbb850b49a6d7" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.DoubleArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Double%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.DoubleArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Double%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.DoubleArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Double%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.DoubleArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Double%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="5490bfd5ee3160eb75e3b9df1af0ca84a879002c" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.FloatArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Float%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.FloatArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Float%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.FloatArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Float%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.FloatArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Float%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="53ab8c70c22ed9e8981524d6420d7ea8be35ecef" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.IntArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.IntArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.IntArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.IntArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="2c330dcfb397db5116ee3c9e8a7eee7b0d708a1b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.LongArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Long%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.LongArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Long%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.LongArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Long%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.LongArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Long%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="7b0a20798d8373358bb3a3797ef59a87c79565ca" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ShortArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Short%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ShortArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Short%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ShortArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Short%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ShortArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Short%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="bee9d1b23c3e538f15f8d302c0e70f8c2340b934" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UByteArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UByte%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UByteArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UByte%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UByteArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UByte%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UByteArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UByte%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="c64a2ceafa143c2d00870e79ffaa421ed31bb3c2" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UIntArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UInt%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UIntArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UInt%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UIntArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UInt%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UIntArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UInt%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="6c9310a3890c5f55eaab8539e48c3da7ed2fa926" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ULongArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.ULong%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ULongArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.ULong%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ULongArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.ULong%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.ULongArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.ULong%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="9d33d409b3f36b499f1d34f91d4b3182df3ec086" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UShortArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UShort%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UShortArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UShort%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UShortArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UShort%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.UShortArray%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UShort%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="069a3f44ab164e712c9a33b5c90177002a6310d1" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.Array((kotlin.collections.foldRightIndexed.T)),%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldRightIndexed.T,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.Array((kotlin.collections.foldRightIndexed.T)),%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldRightIndexed.T,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.Array((kotlin.collections.foldRightIndexed.T)),%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldRightIndexed.T,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 원래 배열의 인덱스와 현재 누적 기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.Array((kotlin.collections.foldRightIndexed.T)),%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldRightIndexed.T,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="1d3059d9aa4328477a8fb5e8196ab72778d8432f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.BooleanArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Boolean,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.BooleanArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Boolean,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.BooleanArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Boolean,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 원래 배열의 인덱스와 현재 누적 기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.BooleanArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Boolean,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="1cd2c2665d9c7ec6aa22eef40f0dd41db530a6c2" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.ByteArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Byte,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.ByteArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Byte,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.ByteArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Byte,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 원래 배열의 인덱스와 현재 누적 기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.ByteArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Byte,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="f2a35e2e7c09e0b94a0171e61dd31c349a374aee" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.CharArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.CharArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.CharArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 원래 배열의 인덱스와 현재 누적 기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.CharArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="71a89dcc7475797fe336ab5b513803b9e6efd668" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.DoubleArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Double,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.DoubleArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Double,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.DoubleArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Double,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 원래 배열의 인덱스와 현재 누적 기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.DoubleArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Double,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="7cb518f87bb7683665b808ea8d6ac4b02dafad56" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.FloatArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Float,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.FloatArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Float,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.FloatArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Float,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 원래 배열의 인덱스와 현재 누적 기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.FloatArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Float,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="5007bca99e6c57cb9b72cc6997389a3394f6ad2b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.IntArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.IntArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.IntArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 원래 배열의 인덱스와 현재 누적 기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.IntArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="b13d70bc903e24fcb8865a524c07f035232ed0f8" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.LongArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Long,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.LongArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Long,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.LongArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Long,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 원래 배열의 인덱스와 현재 누적 기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.LongArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Long,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="a3a9399898c12aae8cba25f33347f8d71a101a38" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.ShortArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Short,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.ShortArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Short,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.ShortArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Short,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 원래 배열의 인덱스와 현재 누적 기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.ShortArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Short,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="1425ea4b117a295dc4bdbe25e064e2535e813fe3" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.UByteArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.UByte,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.UByteArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.UByte,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.UByteArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.UByte,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 원래 배열의 인덱스와 현재 누적 기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.UByteArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.UByte,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="47c1fea9361f645725344add699413f3b999469d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.UIntArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.UInt,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.UIntArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.UInt,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.UIntArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.UInt,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 원래 배열의 인덱스와 현재 누적 기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.UIntArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.UInt,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="a799e8b6e758451d973b6d796c8d917e9f4e03b4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.ULongArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.ULong,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.ULongArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.ULong,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.ULongArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.ULong,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 원래 배열의 인덱스와 현재 누적 기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.ULongArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.ULong,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="3ea3698ab8b98e47826a1e06c6c7e08bd44856a4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.UShortArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.UShort,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.UShortArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.UShort,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.UShortArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.UShort,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 원래 배열의 인덱스와 현재 누적 기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.UShortArray,%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.UShort,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="d3d3794fa1bf1fbf34130e8b10da77cfba7e488a" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.text/fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.text/fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.text/fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 문자에 &lt;a href=&quot;../../kotlin.text/fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="e3dc2d6425a423c0caf7866183f098d768d52a2e" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.text/fold#kotlin.text%24fold(kotlin.CharSequence,%20kotlin.text.fold.R,%20kotlin.Function2((kotlin.text.fold.R,%20kotlin.Char,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.text/fold#kotlin.text%24fold(kotlin.CharSequence,%20kotlin.text.fold.R,%20kotlin.Function2((kotlin.text.fold.R,%20kotlin.Char,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.text/fold#kotlin.text%24fold(kotlin.CharSequence,%20kotlin.text.fold.R,%20kotlin.Function2((kotlin.text.fold.R,%20kotlin.Char,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값부터 누적 된 값을 현재 누적 기 값과 각 문자에 왼쪽에서 오른쪽으로 &lt;a href=&quot;../../kotlin.text/fold#kotlin.text%24fold(kotlin.CharSequence,%20kotlin.text.fold.R,%20kotlin.Function2((kotlin.text.fold.R,%20kotlin.Char,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="f6ebe0fcc76170dca6287b3f16c75c11ecfa36bf" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.text/fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.text/fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</source>
          <target state="translated">적산 값으로 시작 &lt;a href=&quot;../../kotlin.text/fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값 및인가 &lt;a href=&quot;../../kotlin.text/fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 대한 우측 및 일본어 문자 시퀀스의 인덱스와 각 문자를 좌측에서.</target>
        </trans-unit>
        <trans-unit id="6b2fcd1d8b0b05393e2edbd95e036404fe4cfcf0" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.text/fold-indexed#kotlin.text%24foldIndexed(kotlin.CharSequence,%20kotlin.text.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.text.foldIndexed.R,%20kotlin.Char,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.text/fold-indexed#kotlin.text%24foldIndexed(kotlin.CharSequence,%20kotlin.text.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.text.foldIndexed.R,%20kotlin.Char,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.text/fold-indexed#kotlin.text%24foldIndexed(kotlin.CharSequence,%20kotlin.text.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.text.foldIndexed.R,%20kotlin.Char,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 문자 시퀀스의 인덱스가있는 각 문자에 &lt;a href=&quot;../../kotlin.text/fold-indexed#kotlin.text%24foldIndexed(kotlin.CharSequence,%20kotlin.text.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.text.foldIndexed.R,%20kotlin.Char,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="4440b3cb5a7f1603bbe877327a81f5352b0390b7" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.text/fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.text/fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.text/fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 오른쪽에서 왼쪽으로 각 문자 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.text/fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="eb16b853511573e720d3a594e02545bdd46b3549" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.text/fold-right#kotlin.text%24foldRight(kotlin.CharSequence,%20kotlin.text.foldRight.R,%20kotlin.Function2((kotlin.Char,%20kotlin.text.foldRight.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.text/fold-right#kotlin.text%24foldRight(kotlin.CharSequence,%20kotlin.text.foldRight.R,%20kotlin.Function2((kotlin.Char,%20kotlin.text.foldRight.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.text/fold-right#kotlin.text%24foldRight(kotlin.CharSequence,%20kotlin.text.foldRight.R,%20kotlin.Function2((kotlin.Char,%20kotlin.text.foldRight.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작 하여 각 문자와 현재 누산기 값에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.text/fold-right#kotlin.text%24foldRight(kotlin.CharSequence,%20kotlin.text.foldRight.R,%20kotlin.Function2((kotlin.Char,%20kotlin.text.foldRight.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="f35c912bb54aa8f86dcf3a5c943ac79a80a38d2b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.text/fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.text/fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character with its index in the original char sequence and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.text/fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작 하여 원래 문자 시퀀스 및 현재 누산기 값의 인덱스를 사용하여 오른쪽에서 왼쪽으로 각 문자에 &lt;a href=&quot;../../kotlin.text/fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 하는 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="0df4969b06dbfadb27919d22013f00b07fcf3f5c" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../../kotlin.text/fold-right-indexed#kotlin.text%24foldRightIndexed(kotlin.CharSequence,%20kotlin.text.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20kotlin.text.foldRightIndexed.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../../kotlin.text/fold-right-indexed#kotlin.text%24foldRightIndexed(kotlin.CharSequence,%20kotlin.text.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20kotlin.text.foldRightIndexed.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each character with its index in the original char sequence and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../../kotlin.text/fold-right-indexed#kotlin.text%24foldRightIndexed(kotlin.CharSequence,%20kotlin.text.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20kotlin.text.foldRightIndexed.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작 하여 원래 문자 시퀀스의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 문자에 &lt;a href=&quot;../../kotlin.text/fold-right-indexed#kotlin.text%24foldRightIndexed(kotlin.CharSequence,%20kotlin.text.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20kotlin.text.foldRightIndexed.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="df4a20aafe1816d4ae3bb50e8ef26f714550b7c4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold#kotlin.collections%24fold%28kotlin.collections.Iterable%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold#kotlin.collections%24fold%28kotlin.collections.Iterable%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../fold#kotlin.collections%24fold%28kotlin.collections.Iterable%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../fold#kotlin.collections%24fold%28kotlin.collections.Iterable%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="a142f63cbd81c7bf5f9d113e087c7d93a601716d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold#kotlin.collections%24fold(kotlin.collections.Iterable((kotlin.collections.fold.T)),%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.collections.fold.T,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold#kotlin.collections%24fold(kotlin.collections.Iterable((kotlin.collections.fold.T)),%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.collections.fold.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../fold#kotlin.collections%24fold(kotlin.collections.Iterable((kotlin.collections.fold.T)),%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.collections.fold.T,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값부터 누적 된 값을 현재 누적 기 값과 각 요소에 왼쪽에서 오른쪽으로 &lt;a href=&quot;../fold#kotlin.collections%24fold(kotlin.collections.Iterable((kotlin.collections.fold.T)),%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.collections.fold.T,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="3ded979556ec66b86263cc50672189853cbe6df2" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold#kotlin.sequences%24fold%28kotlin.sequences.Sequence%28%28kotlin.sequences.fold.T%29%29%2C+kotlin.sequences.fold.R%2C+kotlin.Function2%28%28kotlin.sequences.fold.R%2C+kotlin.sequences.fold.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold#kotlin.sequences%24fold%28kotlin.sequences.Sequence%28%28kotlin.sequences.fold.T%29%29%2C+kotlin.sequences.fold.R%2C+kotlin.Function2%28%28kotlin.sequences.fold.R%2C+kotlin.sequences.fold.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../fold#kotlin.sequences%24fold%28kotlin.sequences.Sequence%28%28kotlin.sequences.fold.T%29%29%2C+kotlin.sequences.fold.R%2C+kotlin.Function2%28%28kotlin.sequences.fold.R%2C+kotlin.sequences.fold.T%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../fold#kotlin.sequences%24fold%28kotlin.sequences.Sequence%28%28kotlin.sequences.fold.T%29%29%2C+kotlin.sequences.fold.R%2C+kotlin.Function2%28%28kotlin.sequences.fold.R%2C+kotlin.sequences.fold.T%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="a0aefc6e15d92194a23d79e53dd8b87a6a174fb1" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold#kotlin.sequences%24fold(kotlin.sequences.Sequence((kotlin.sequences.fold.T)),%20kotlin.sequences.fold.R,%20kotlin.Function2((kotlin.sequences.fold.R,%20kotlin.sequences.fold.T,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold#kotlin.sequences%24fold(kotlin.sequences.Sequence((kotlin.sequences.fold.T)),%20kotlin.sequences.fold.R,%20kotlin.Function2((kotlin.sequences.fold.R,%20kotlin.sequences.fold.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;../fold#kotlin.sequences%24fold(kotlin.sequences.Sequence((kotlin.sequences.fold.T)),%20kotlin.sequences.fold.R,%20kotlin.Function2((kotlin.sequences.fold.R,%20kotlin.sequences.fold.T,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값부터 누적 된 값을 현재 누적 기 값과 각 요소에 왼쪽에서 오른쪽으로 &lt;a href=&quot;../fold#kotlin.sequences%24fold(kotlin.sequences.Sequence((kotlin.sequences.fold.T)),%20kotlin.sequences.fold.R,%20kotlin.Function2((kotlin.sequences.fold.R,%20kotlin.sequences.fold.T,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="cc0f972f641e5a2958364d9d3120433aa963a4c4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</source>
          <target state="translated">&lt;a href=&quot;../fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 문자에 &lt;a href=&quot;../fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="260374ccc3637b2d3ee0b0a23ded3b53c28c26ce" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold#kotlin.text%24fold(kotlin.CharSequence,%20kotlin.text.fold.R,%20kotlin.Function2((kotlin.text.fold.R,%20kotlin.Char,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold#kotlin.text%24fold(kotlin.CharSequence,%20kotlin.text.fold.R,%20kotlin.Function2((kotlin.text.fold.R,%20kotlin.Char,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</source>
          <target state="translated">&lt;a href=&quot;../fold#kotlin.text%24fold(kotlin.CharSequence,%20kotlin.text.fold.R,%20kotlin.Function2((kotlin.text.fold.R,%20kotlin.Char,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값부터 누적 된 값을 현재 누적 기 값과 각 문자에 왼쪽에서 오른쪽으로 &lt;a href=&quot;../fold#kotlin.text%24fold(kotlin.CharSequence,%20kotlin.text.fold.R,%20kotlin.Function2((kotlin.text.fold.R,%20kotlin.Char,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="599f559b3f09f9bcfec817a225274a775388058f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</source>
          <target state="translated">&lt;a href=&quot;../fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 컬렉션의 인덱스가있는 각 요소에 &lt;a href=&quot;../fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="c16ba2b795de4d750012900312446dd6d76aea47" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold-indexed#kotlin.collections%24foldIndexed(kotlin.collections.Iterable((kotlin.collections.foldIndexed.T)),%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.collections.foldIndexed.T,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold-indexed#kotlin.collections%24foldIndexed(kotlin.collections.Iterable((kotlin.collections.foldIndexed.T)),%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.collections.foldIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</source>
          <target state="translated">&lt;a href=&quot;../fold-indexed#kotlin.collections%24foldIndexed(kotlin.collections.Iterable((kotlin.collections.foldIndexed.T)),%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.collections.foldIndexed.T,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 왼쪽에서 오른쪽으로 현재 누적 기 값과 원래 컬렉션의 인덱스가있는 각 요소에 &lt;a href=&quot;../fold-indexed#kotlin.collections%24foldIndexed(kotlin.collections.Iterable((kotlin.collections.foldIndexed.T)),%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.collections.foldIndexed.T,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="d19f219e0cdc3d3bfb63791d08887446ac9e9a3a" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold-indexed#kotlin.sequences%24foldIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.foldIndexed.T%29%29%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.sequences.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold-indexed#kotlin.sequences%24foldIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.foldIndexed.T%29%29%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.sequences.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original sequence.</source>
          <target state="translated">적산 값으로 시작 &lt;a href=&quot;../fold-indexed#kotlin.sequences%24foldIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.foldIndexed.T%29%29%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.sequences.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값 및인가 &lt;a href=&quot;../fold-indexed#kotlin.sequences%24foldIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.foldIndexed.T%29%29%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.sequences.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로 원래 시퀀스의 인덱스로 각 요소를 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="7517b20433dab8004fa10cda203531e44203274c" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold-indexed#kotlin.sequences%24foldIndexed(kotlin.sequences.Sequence((kotlin.sequences.foldIndexed.T)),%20kotlin.sequences.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.sequences.foldIndexed.R,%20kotlin.sequences.foldIndexed.T,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold-indexed#kotlin.sequences%24foldIndexed(kotlin.sequences.Sequence((kotlin.sequences.foldIndexed.T)),%20kotlin.sequences.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.sequences.foldIndexed.R,%20kotlin.sequences.foldIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original sequence.</source>
          <target state="translated">&lt;a href=&quot;../fold-indexed#kotlin.sequences%24foldIndexed(kotlin.sequences.Sequence((kotlin.sequences.foldIndexed.T)),%20kotlin.sequences.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.sequences.foldIndexed.R,%20kotlin.sequences.foldIndexed.T,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작 하여 현재 누산기 값과 원래 시퀀스의 인덱스가있는 각 요소에 왼쪽에서 오른쪽으로 &lt;a href=&quot;../fold-indexed#kotlin.sequences%24foldIndexed(kotlin.sequences.Sequence((kotlin.sequences.foldIndexed.T)),%20kotlin.sequences.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.sequences.foldIndexed.R,%20kotlin.sequences.foldIndexed.T,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값 을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="d21e8fc90a5dc8f5129b14758d5b65d9a4f1019f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</source>
          <target state="translated">적산 값으로 시작 &lt;a href=&quot;../fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값 및인가 &lt;a href=&quot;../fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 대한 우측 및 일본어 문자 시퀀스의 인덱스와 각 문자를 좌측에서.</target>
        </trans-unit>
        <trans-unit id="f9308305144c78a48693d627fcfa38049a2942af" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold-indexed#kotlin.text%24foldIndexed(kotlin.CharSequence,%20kotlin.text.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.text.foldIndexed.R,%20kotlin.Char,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold-indexed#kotlin.text%24foldIndexed(kotlin.CharSequence,%20kotlin.text.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.text.foldIndexed.R,%20kotlin.Char,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</source>
          <target state="translated">&lt;a href=&quot;../fold-indexed#kotlin.text%24foldIndexed(kotlin.CharSequence,%20kotlin.text.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.text.foldIndexed.R,%20kotlin.Char,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 문자 시퀀스의 인덱스가있는 각 문자에 &lt;a href=&quot;../fold-indexed#kotlin.text%24foldIndexed(kotlin.CharSequence,%20kotlin.text.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.text.foldIndexed.R,%20kotlin.Char,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="cc59d217ef46636ebec636581de2c64d53fd6514" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold-right#kotlin.collections%24foldRight%28kotlin.collections.List%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold-right#kotlin.collections%24foldRight%28kotlin.collections.List%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../fold-right#kotlin.collections%24foldRight%28kotlin.collections.List%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../fold-right#kotlin.collections%24foldRight%28kotlin.collections.List%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="c2621543c604e4e030eaacadb0ac74376ce8688b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold-right#kotlin.collections%24foldRight(kotlin.collections.List((kotlin.collections.foldRight.T)),%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.collections.foldRight.T,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold-right#kotlin.collections%24foldRight(kotlin.collections.List((kotlin.collections.foldRight.T)),%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.collections.foldRight.T,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../fold-right#kotlin.collections%24foldRight(kotlin.collections.List((kotlin.collections.foldRight.T)),%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.collections.foldRight.T,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작 하여 각 요소와 현재 누산기 값에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../fold-right#kotlin.collections%24foldRight(kotlin.collections.List((kotlin.collections.foldRight.T)),%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.collections.foldRight.T,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="49c3a042cfe5d9fbd613245cd10c42287d5f2f96" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 오른쪽에서 왼쪽으로 각 문자 및 현재 누산기 값에 &lt;a href=&quot;../fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="04a750234fb72ff24c438c47eb44ed16c6c3d84f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold-right#kotlin.text%24foldRight(kotlin.CharSequence,%20kotlin.text.foldRight.R,%20kotlin.Function2((kotlin.Char,%20kotlin.text.foldRight.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold-right#kotlin.text%24foldRight(kotlin.CharSequence,%20kotlin.text.foldRight.R,%20kotlin.Function2((kotlin.Char,%20kotlin.text.foldRight.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../fold-right#kotlin.text%24foldRight(kotlin.CharSequence,%20kotlin.text.foldRight.R,%20kotlin.Function2((kotlin.Char,%20kotlin.text.foldRight.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작 하여 각 문자와 현재 누산기 값에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../fold-right#kotlin.text%24foldRight(kotlin.CharSequence,%20kotlin.text.foldRight.R,%20kotlin.Function2((kotlin.Char,%20kotlin.text.foldRight.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="b3480aecd4e02dae9fdc44b037fd6c90511098f7" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.collections.List%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.collections.List%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original list and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.collections.List%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작 하여 원래 목록의 색인과 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.collections.List%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="de2d16942669dcd5d51924322c08943b1efbe1e6" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.collections.List((kotlin.collections.foldRightIndexed.T)),%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldRightIndexed.T,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.collections.List((kotlin.collections.foldRightIndexed.T)),%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldRightIndexed.T,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original list and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.collections.List((kotlin.collections.foldRightIndexed.T)),%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldRightIndexed.T,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작하여 값을 누적 하고 원래 목록의 인덱스와 현재 누적 기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.collections.List((kotlin.collections.foldRightIndexed.T)),%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldRightIndexed.T,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="1f40297465a1c70fea90559353010ccf0d716e92" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character with its index in the original char sequence and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작 하여 원래 문자 시퀀스 및 현재 누산기 값의 인덱스를 사용하여 오른쪽에서 왼쪽으로 각 문자에 &lt;a href=&quot;../fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 하는 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="c515321e33f6d92c9fb655d9fe5c7779fee07927" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;../fold-right-indexed#kotlin.text%24foldRightIndexed(kotlin.CharSequence,%20kotlin.text.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20kotlin.text.foldRightIndexed.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;../fold-right-indexed#kotlin.text%24foldRightIndexed(kotlin.CharSequence,%20kotlin.text.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20kotlin.text.foldRightIndexed.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each character with its index in the original char sequence and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;../fold-right-indexed#kotlin.text%24foldRightIndexed(kotlin.CharSequence,%20kotlin.text.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20kotlin.text.foldRightIndexed.R,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값으로 시작 하여 원래 문자 시퀀스의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 문자에 &lt;a href=&quot;../fold-right-indexed#kotlin.text%24foldRightIndexed(kotlin.CharSequence,%20kotlin.text.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20kotlin.text.foldRightIndexed.R,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="c9d596822e681a3837ffb6cce00cbd5f3c6aa782" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold#kotlin.collections%24fold%28kotlin.Array%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold#kotlin.collections%24fold%28kotlin.Array%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;fold#kotlin.collections%24fold%28kotlin.Array%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;fold#kotlin.collections%24fold%28kotlin.Array%28%28kotlin.collections.fold.T%29%29%2C+kotlin.collections.fold.R%2C+kotlin.Function2%28%28kotlin.collections.fold.R%2C+kotlin.collections.fold.T%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="ed765671a1589a203682e5ef815a86fdf495ff27" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold#kotlin.collections%24fold(kotlin.Array((kotlin.collections.fold.T)),%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.collections.fold.T,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold#kotlin.collections%24fold(kotlin.Array((kotlin.collections.fold.T)),%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.collections.fold.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;fold#kotlin.collections%24fold(kotlin.Array((kotlin.collections.fold.T)),%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.collections.fold.T,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값부터 누적 된 값을 현재 누적 기 값과 각 요소에 왼쪽에서 오른쪽으로 &lt;a href=&quot;fold#kotlin.collections%24fold(kotlin.Array((kotlin.collections.fold.T)),%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.collections.fold.T,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="48daeef93179dc0cf169e30612077384a9a0caf5" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold#kotlin.collections%24fold(kotlin.collections.Iterable((kotlin.collections.fold.T)),%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.collections.fold.T,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold#kotlin.collections%24fold(kotlin.collections.Iterable((kotlin.collections.fold.T)),%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.collections.fold.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;fold#kotlin.collections%24fold(kotlin.collections.Iterable((kotlin.collections.fold.T)),%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.collections.fold.T,%20)))/initial&quot;&gt;초기&lt;/a&gt; 값부터 누적 된 값을 현재 누적 기 값과 각 요소에 왼쪽에서 오른쪽으로 &lt;a href=&quot;fold#kotlin.collections%24fold(kotlin.collections.Iterable((kotlin.collections.fold.T)),%20kotlin.collections.fold.R,%20kotlin.Function2((kotlin.collections.fold.R,%20kotlin.collections.fold.T,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="3ed0c34fd7cc0387bbec6ce7d54ecd3bbe945f34" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold#kotlin.sequences%24fold%28kotlin.sequences.Sequence%28%28kotlin.sequences.fold.T%29%29%2C+kotlin.sequences.fold.R%2C+kotlin.Function2%28%28kotlin.sequences.fold.R%2C+kotlin.sequences.fold.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold#kotlin.sequences%24fold%28kotlin.sequences.Sequence%28%28kotlin.sequences.fold.T%29%29%2C+kotlin.sequences.fold.R%2C+kotlin.Function2%28%28kotlin.sequences.fold.R%2C+kotlin.sequences.fold.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">&lt;a href=&quot;fold#kotlin.sequences%24fold%28kotlin.sequences.Sequence%28%28kotlin.sequences.fold.T%29%29%2C+kotlin.sequences.fold.R%2C+kotlin.Function2%28%28kotlin.sequences.fold.R%2C+kotlin.sequences.fold.T%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;fold#kotlin.sequences%24fold%28kotlin.sequences.Sequence%28%28kotlin.sequences.fold.T%29%29%2C+kotlin.sequences.fold.R%2C+kotlin.Function2%28%28kotlin.sequences.fold.R%2C+kotlin.sequences.fold.T%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="a80955d8b8372a0773d488cd73956a0314bf202b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold#kotlin.sequences%24fold(kotlin.sequences.Sequence((kotlin.sequences.fold.T)),%20kotlin.sequences.fold.R,%20kotlin.Function2((kotlin.sequences.fold.R,%20kotlin.sequences.fold.T,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold#kotlin.sequences%24fold(kotlin.sequences.Sequence((kotlin.sequences.fold.T)),%20kotlin.sequences.fold.R,%20kotlin.Function2((kotlin.sequences.fold.R,%20kotlin.sequences.fold.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with &lt;a href=&quot;fold#kotlin.sequences%24fold(kotlin.sequences.Sequence((kotlin.sequences.fold.T)),%20kotlin.sequences.fold.R,%20kotlin.Function2((kotlin.sequences.fold.R,%20kotlin.sequences.fold.T,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold#kotlin.sequences%24fold(kotlin.sequences.Sequence((kotlin.sequences.fold.T)),%20kotlin.sequences.fold.R,%20kotlin.Function2((kotlin.sequences.fold.R,%20kotlin.sequences.fold.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="a8bc0dbab446ffeba6039fbd1efcaf6b15572044" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</source>
          <target state="translated">&lt;a href=&quot;fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 문자에 &lt;a href=&quot;fold#kotlin.text%24fold%28kotlin.CharSequence%2C+kotlin.text.fold.R%2C+kotlin.Function2%28%28kotlin.text.fold.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="d0123ed1f862ab2cba3ae52b745e21c1c3240a18" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold#kotlin.text%24fold(kotlin.CharSequence,%20kotlin.text.fold.R,%20kotlin.Function2((kotlin.text.fold.R,%20kotlin.Char,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold#kotlin.text%24fold(kotlin.CharSequence,%20kotlin.text.fold.R,%20kotlin.Function2((kotlin.text.fold.R,%20kotlin.Char,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</source>
          <target state="translated">Accumulates value starting with &lt;a href=&quot;fold#kotlin.text%24fold(kotlin.CharSequence,%20kotlin.text.fold.R,%20kotlin.Function2((kotlin.text.fold.R,%20kotlin.Char,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold#kotlin.text%24fold(kotlin.CharSequence,%20kotlin.text.fold.R,%20kotlin.Function2((kotlin.text.fold.R,%20kotlin.Char,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</target>
        </trans-unit>
        <trans-unit id="558d3b021fe93e0c86ef56c10f1c47533f05af36" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed%28kotlin.Array%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed%28kotlin.Array%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">&lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed%28kotlin.Array%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 배열의 인덱스가있는 각 요소에 &lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed%28kotlin.Array%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="27b9ff8a68e274df1997048c56efc68cf30adb24" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</source>
          <target state="translated">&lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 원래 컬렉션의 인덱스가있는 각 요소에 &lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.foldIndexed.T%29%29%2C+kotlin.collections.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldIndexed.R%2C+kotlin.collections.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="7fa6250aa37dde517ce5dfe36b710fe90a1e0613" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed(kotlin.Array((kotlin.collections.foldIndexed.T)),%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.collections.foldIndexed.T,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed(kotlin.Array((kotlin.collections.foldIndexed.T)),%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.collections.foldIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with &lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed(kotlin.Array((kotlin.collections.foldIndexed.T)),%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.collections.foldIndexed.T,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed(kotlin.Array((kotlin.collections.foldIndexed.T)),%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.collections.foldIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="a5ad026ee17d9153a72a620e37bc92554773c950" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed(kotlin.collections.Iterable((kotlin.collections.foldIndexed.T)),%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.collections.foldIndexed.T,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed(kotlin.collections.Iterable((kotlin.collections.foldIndexed.T)),%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.collections.foldIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</source>
          <target state="translated">Accumulates value starting with &lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed(kotlin.collections.Iterable((kotlin.collections.foldIndexed.T)),%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.collections.foldIndexed.T,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-indexed#kotlin.collections%24foldIndexed(kotlin.collections.Iterable((kotlin.collections.foldIndexed.T)),%20kotlin.collections.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldIndexed.R,%20kotlin.collections.foldIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</target>
        </trans-unit>
        <trans-unit id="6df77d16f11c1223c1baac77b5602ac9c665f3bf" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-indexed#kotlin.sequences%24foldIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.foldIndexed.T%29%29%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.sequences.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-indexed#kotlin.sequences%24foldIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.foldIndexed.T%29%29%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.sequences.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original sequence.</source>
          <target state="translated">적산 값으로 시작 &lt;a href=&quot;fold-indexed#kotlin.sequences%24foldIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.foldIndexed.T%29%29%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.sequences.foldIndexed.T%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값 및인가 &lt;a href=&quot;fold-indexed#kotlin.sequences%24foldIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.foldIndexed.T%29%29%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.foldIndexed.R%2C+kotlin.sequences.foldIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로 원래 시퀀스의 인덱스로 각 요소를 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="1821b0732c043d8ab2147d70a17cbb2606114e0c" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-indexed#kotlin.sequences%24foldIndexed(kotlin.sequences.Sequence((kotlin.sequences.foldIndexed.T)),%20kotlin.sequences.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.sequences.foldIndexed.R,%20kotlin.sequences.foldIndexed.T,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-indexed#kotlin.sequences%24foldIndexed(kotlin.sequences.Sequence((kotlin.sequences.foldIndexed.T)),%20kotlin.sequences.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.sequences.foldIndexed.R,%20kotlin.sequences.foldIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original sequence.</source>
          <target state="translated">Accumulates value starting with &lt;a href=&quot;fold-indexed#kotlin.sequences%24foldIndexed(kotlin.sequences.Sequence((kotlin.sequences.foldIndexed.T)),%20kotlin.sequences.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.sequences.foldIndexed.R,%20kotlin.sequences.foldIndexed.T,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-indexed#kotlin.sequences%24foldIndexed(kotlin.sequences.Sequence((kotlin.sequences.foldIndexed.T)),%20kotlin.sequences.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.sequences.foldIndexed.R,%20kotlin.sequences.foldIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original sequence.</target>
        </trans-unit>
        <trans-unit id="807de1643c2b2b78925794072b148c727be9bb94" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</source>
          <target state="translated">적산 값으로 시작 &lt;a href=&quot;fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값 및인가 &lt;a href=&quot;fold-indexed#kotlin.text%24foldIndexed%28kotlin.CharSequence%2C+kotlin.text.foldIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.text.foldIndexed.R%2C+kotlin.Char%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 대한 우측 및 일본어 문자 시퀀스의 인덱스와 각 문자를 좌측에서.</target>
        </trans-unit>
        <trans-unit id="256e5fa21bfbdf3399e6602d087b0ebc493b32fb" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-indexed#kotlin.text%24foldIndexed(kotlin.CharSequence,%20kotlin.text.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.text.foldIndexed.R,%20kotlin.Char,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-indexed#kotlin.text%24foldIndexed(kotlin.CharSequence,%20kotlin.text.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.text.foldIndexed.R,%20kotlin.Char,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</source>
          <target state="translated">Accumulates value starting with &lt;a href=&quot;fold-indexed#kotlin.text%24foldIndexed(kotlin.CharSequence,%20kotlin.text.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.text.foldIndexed.R,%20kotlin.Char,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-indexed#kotlin.text%24foldIndexed(kotlin.CharSequence,%20kotlin.text.foldIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.text.foldIndexed.R,%20kotlin.Char,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</target>
        </trans-unit>
        <trans-unit id="562528ad5090a03163aa85431ff993dfe1cb34e2" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-right#kotlin.collections%24foldRight%28kotlin.Array%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-right#kotlin.collections%24foldRight%28kotlin.Array%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;fold-right#kotlin.collections%24foldRight%28kotlin.Array%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;fold-right#kotlin.collections%24foldRight%28kotlin.Array%28%28kotlin.collections.foldRight.T%29%29%2C+kotlin.collections.foldRight.R%2C+kotlin.Function2%28%28kotlin.collections.foldRight.T%2C+kotlin.collections.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="253b5f77a717931a9a66b632514b7b40430a49a1" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-right#kotlin.collections%24foldRight(kotlin.Array((kotlin.collections.foldRight.T)),%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.collections.foldRight.T,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-right#kotlin.collections%24foldRight(kotlin.Array((kotlin.collections.foldRight.T)),%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.collections.foldRight.T,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">Accumulates value starting with &lt;a href=&quot;fold-right#kotlin.collections%24foldRight(kotlin.Array((kotlin.collections.foldRight.T)),%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.collections.foldRight.T,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-right#kotlin.collections%24foldRight(kotlin.Array((kotlin.collections.foldRight.T)),%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.collections.foldRight.T,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</target>
        </trans-unit>
        <trans-unit id="2e0a252abe9f9a52b318fa78499799c37b5382dc" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-right#kotlin.collections%24foldRight(kotlin.collections.List((kotlin.collections.foldRight.T)),%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.collections.foldRight.T,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-right#kotlin.collections%24foldRight(kotlin.collections.List((kotlin.collections.foldRight.T)),%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.collections.foldRight.T,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">Accumulates value starting with &lt;a href=&quot;fold-right#kotlin.collections%24foldRight(kotlin.collections.List((kotlin.collections.foldRight.T)),%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.collections.foldRight.T,%20kotlin.collections.foldRight.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-right#kotlin.collections%24foldRight(kotlin.collections.List((kotlin.collections.foldRight.T)),%20kotlin.collections.foldRight.R,%20kotlin.Function2((kotlin.collections.foldRight.T,%20kotlin.collections.foldRight.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</target>
        </trans-unit>
        <trans-unit id="7e5a18d18b6ea106e7fd022ca36a9ea98316b99f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작하여 오른쪽에서 왼쪽으로 각 문자 및 현재 누산기 값에 &lt;a href=&quot;fold-right#kotlin.text%24foldRight%28kotlin.CharSequence%2C+kotlin.text.foldRight.R%2C+kotlin.Function2%28%28kotlin.Char%2C+kotlin.text.foldRight.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="e90d7ea162090ba3c3fda7a0aea5f3444846a40e" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-right#kotlin.text%24foldRight(kotlin.CharSequence,%20kotlin.text.foldRight.R,%20kotlin.Function2((kotlin.Char,%20kotlin.text.foldRight.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-right#kotlin.text%24foldRight(kotlin.CharSequence,%20kotlin.text.foldRight.R,%20kotlin.Function2((kotlin.Char,%20kotlin.text.foldRight.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</source>
          <target state="translated">Accumulates value starting with &lt;a href=&quot;fold-right#kotlin.text%24foldRight(kotlin.CharSequence,%20kotlin.text.foldRight.R,%20kotlin.Function2((kotlin.Char,%20kotlin.text.foldRight.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-right#kotlin.text%24foldRight(kotlin.CharSequence,%20kotlin.text.foldRight.R,%20kotlin.Function2((kotlin.Char,%20kotlin.text.foldRight.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</target>
        </trans-unit>
        <trans-unit id="49cdab75e1058943e45554f79f33d888b8fda138" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.Array%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.Array%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.Array%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.Array%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="93233d3611e78a9e986ee2cc42b9b79bf10abcad" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.collections.List%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.collections.List%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original list and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.collections.List%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작 하여 원래 목록의 색인과 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed%28kotlin.collections.List%28%28kotlin.collections.foldRightIndexed.T%29%29%2C+kotlin.collections.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.foldRightIndexed.T%2C+kotlin.collections.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="2784c916bde2f375094dc6296ecff766ce9b0d09" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.Array((kotlin.collections.foldRightIndexed.T)),%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldRightIndexed.T,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.Array((kotlin.collections.foldRightIndexed.T)),%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldRightIndexed.T,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">Accumulates value starting with &lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.Array((kotlin.collections.foldRightIndexed.T)),%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldRightIndexed.T,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.Array((kotlin.collections.foldRightIndexed.T)),%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldRightIndexed.T,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</target>
        </trans-unit>
        <trans-unit id="7191e57ebba066c5057e6591a37eea96cfdcd641" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.collections.List((kotlin.collections.foldRightIndexed.T)),%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldRightIndexed.T,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.collections.List((kotlin.collections.foldRightIndexed.T)),%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldRightIndexed.T,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original list and current accumulator value.</source>
          <target state="translated">Accumulates value starting with &lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.collections.List((kotlin.collections.foldRightIndexed.T)),%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldRightIndexed.T,%20kotlin.collections.foldRightIndexed.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-right-indexed#kotlin.collections%24foldRightIndexed(kotlin.collections.List((kotlin.collections.foldRightIndexed.T)),%20kotlin.collections.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.collections.foldRightIndexed.T,%20kotlin.collections.foldRightIndexed.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original list and current accumulator value.</target>
        </trans-unit>
        <trans-unit id="c75fd7bfdba2e7fb6834bddbe9102e47a431193b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character with its index in the original char sequence and current accumulator value.</source>
          <target state="translated">&lt;a href=&quot;fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Finitial&quot;&gt;초기&lt;/a&gt; 값부터 시작 하여 원래 문자 시퀀스 및 현재 누산기 값의 인덱스를 사용하여 오른쪽에서 왼쪽으로 각 문자에 &lt;a href=&quot;fold-right-indexed#kotlin.text%24foldRightIndexed%28kotlin.CharSequence%2C+kotlin.text.foldRightIndexed.R%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+kotlin.text.foldRightIndexed.R%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 하는 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="7d9ea93aa91792622ae32969c2ee8d5dc1ad3ba0" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with &lt;a href=&quot;fold-right-indexed#kotlin.text%24foldRightIndexed(kotlin.CharSequence,%20kotlin.text.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20kotlin.text.foldRightIndexed.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-right-indexed#kotlin.text%24foldRightIndexed(kotlin.CharSequence,%20kotlin.text.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20kotlin.text.foldRightIndexed.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each character with its index in the original char sequence and current accumulator value.</source>
          <target state="translated">Accumulates value starting with &lt;a href=&quot;fold-right-indexed#kotlin.text%24foldRightIndexed(kotlin.CharSequence,%20kotlin.text.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20kotlin.text.foldRightIndexed.R,%20)))/initial&quot;&gt;initial&lt;/a&gt; value and applying &lt;a href=&quot;fold-right-indexed#kotlin.text%24foldRightIndexed(kotlin.CharSequence,%20kotlin.text.foldRightIndexed.R,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20kotlin.text.foldRightIndexed.R,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each character with its index in the original char sequence and current accumulator value.</target>
        </trans-unit>
        <trans-unit id="76cebd54f3993385cab7df9720180dcada6841c3" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last character and applying &lt;a href=&quot;../../kotlin.text/reduce-right#kotlin.text%24reduceRight%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</source>
          <target state="translated">마지막 문자부터 시작하여 오른쪽에서 왼쪽으로 각 문자 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.text/reduce-right#kotlin.text%24reduceRight%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="fcee490d18f29798a286f9eb64ead73ec1d9cbac" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last character and applying &lt;a href=&quot;../../kotlin.text/reduce-right-indexed#kotlin.text%24reduceRightIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character with its index in the original char sequence and current accumulator value.</source>
          <target state="translated">마지막 문자부터 시작 하여 원래 문자 시퀀스의 색인 및 현재 누산기 값으로 각 문자에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.text/reduce-right-indexed#kotlin.text%24reduceRightIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 하는 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="2ba228748be0f7ad05257cd1b4591e5fb65cfe28" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last character and applying &lt;a href=&quot;../reduce-right#kotlin.text%24reduceRight%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</source>
          <target state="translated">마지막 문자부터 시작하여 오른쪽에서 왼쪽으로 각 문자 및 현재 누산기 값에 &lt;a href=&quot;../reduce-right#kotlin.text%24reduceRight%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="c8cd5e24b597d34dae44b5517a503c6428f412cf" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last character and applying &lt;a href=&quot;../reduce-right-indexed#kotlin.text%24reduceRightIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character with its index in the original char sequence and current accumulator value.</source>
          <target state="translated">마지막 문자부터 시작 하여 원래 문자 시퀀스의 색인 및 현재 누산기 값으로 각 문자에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../reduce-right-indexed#kotlin.text%24reduceRightIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 하는 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="43e1de5a32bc29e6a55a4a24e77691602c443664" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last character and applying &lt;a href=&quot;reduce-right#kotlin.text%24reduceRight%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</source>
          <target state="translated">마지막 문자부터 시작하여 오른쪽에서 왼쪽으로 각 문자 및 현재 누산기 값에 &lt;a href=&quot;reduce-right#kotlin.text%24reduceRight%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="cc4c383a0404d1510a550018f8de671d271f45d6" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last character and applying &lt;a href=&quot;reduce-right-indexed#kotlin.text%24reduceRightIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each character with its index in the original char sequence and current accumulator value.</source>
          <target state="translated">마지막 문자부터 시작 하여 원래 문자 시퀀스의 색인 및 현재 누산기 값으로 각 문자에 오른쪽에서 왼쪽으로 &lt;a href=&quot;reduce-right-indexed#kotlin.text%24reduceRightIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 하는 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="223c39faad57245886372909fb3b0ce01c92d2dd" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.Array%28%28kotlin.collections.reduceRight.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduceRight.T%2C+kotlin.collections.reduceRight.S%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.Array%28%28kotlin.collections.reduceRight.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduceRight.T%2C+kotlin.collections.reduceRight.S%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="48851eb90c20347a03972a9a9e35c8cd3b589b3b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.BooleanArray%2C+kotlin.Function2%28%28kotlin.Boolean%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.BooleanArray%2C+kotlin.Function2%28%28kotlin.Boolean%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="46e4689cdbb586043b372f3453f08d8f51fb154f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.ByteArray%2C+kotlin.Function2%28%28kotlin.Byte%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.ByteArray%2C+kotlin.Function2%28%28kotlin.Byte%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="e5b6181c2921dfa05b3146653ce0cc5b6b301ba6" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.CharArray%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.CharArray%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="c7cd9b56bd10b7bd6516b2b7b4ad7617e6835a03" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.DoubleArray%2C+kotlin.Function2%28%28kotlin.Double%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.DoubleArray%2C+kotlin.Function2%28%28kotlin.Double%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="12885dbd6c83cb1b1a7c3d506ef25875ed5be671" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.FloatArray%2C+kotlin.Function2%28%28kotlin.Float%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.FloatArray%2C+kotlin.Function2%28%28kotlin.Float%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="3de3aba8ca54d790d2f37db9960ca7323ba8f4ac" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.IntArray%2C+kotlin.Function2%28%28kotlin.Int%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.IntArray%2C+kotlin.Function2%28%28kotlin.Int%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="53cf28f2a03ea4181dc3350b7a72096e73ada697" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.LongArray%2C+kotlin.Function2%28%28kotlin.Long%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.LongArray%2C+kotlin.Function2%28%28kotlin.Long%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="832c4420f9686e9927042f61458e7ee2ddfa6f27" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.ShortArray%2C+kotlin.Function2%28%28kotlin.Short%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.ShortArray%2C+kotlin.Function2%28%28kotlin.Short%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="af7bba8f9b8307752737300129d46ece87232546" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.UByteArray%2C+kotlin.Function2%28%28kotlin.UByte%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.UByteArray%2C+kotlin.Function2%28%28kotlin.UByte%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="e4cad344038108c09ca7ad4406e8be3d188c3394" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.UIntArray%2C+kotlin.Function2%28%28kotlin.UInt%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.UIntArray%2C+kotlin.Function2%28%28kotlin.UInt%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="9dc03fad9cbac41123c9a7c003fd4a21e490c88e" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.ULongArray%2C+kotlin.Function2%28%28kotlin.ULong%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.ULongArray%2C+kotlin.Function2%28%28kotlin.ULong%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="7a2fa4d14d51bc631ce79857775e4c38d7b106fd" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.UShortArray%2C+kotlin.Function2%28%28kotlin.UShort%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight%28kotlin.UShortArray%2C+kotlin.Function2%28%28kotlin.UShort%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="aa469ac172e6fa06453c647b2171f985ff9499bf" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.Array%28%28kotlin.collections.reduceRightIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceRightIndexed.T%2C+kotlin.collections.reduceRightIndexed.S%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스 및 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.Array%28%28kotlin.collections.reduceRightIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceRightIndexed.T%2C+kotlin.collections.reduceRightIndexed.S%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용하는 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="b91754d3d3390b73be55f880cff10140f2b2eb3d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.BooleanArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Boolean%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스 및 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.BooleanArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Boolean%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용하는 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="9482d2e8b61a34d1169ed74bf5ef532dc3678646" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.ByteArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Byte%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스 및 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.ByteArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Byte%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용하는 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="0cdd6ab1b96481e5b9e5faec0f59200545a0583d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.CharArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스 및 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.CharArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용하는 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="bb4be3dadb51b259b90fa3e16601e786dadde5db" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.DoubleArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Double%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스 및 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.DoubleArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Double%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용하는 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="4e6aeecb581b8796488bd12830cb92b454a25279" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.FloatArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Float%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스 및 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.FloatArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Float%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용하는 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="b346a358b9cc81cf7bed06a3a7466a59f86ec080" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.IntArray%2C+kotlin.Function3%28%28kotlin.Int%2C+%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스 및 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.IntArray%2C+kotlin.Function3%28%28kotlin.Int%2C+%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용하는 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="b9d203c3dffef1adcde02394cfc4efde49b40380" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.LongArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Long%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스 및 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.LongArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Long%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용하는 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="337922140b8a253067f59472f19f517511a3f4a4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.ShortArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Short%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스 및 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.ShortArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Short%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용하는 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="331d4761ce20df159ba62a8e9746a8cebeb173b6" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.UByteArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UByte%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스 및 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.UByteArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UByte%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용하는 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="137b5314821e08bf3963257c7403b690b4b9607e" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.UIntArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UInt%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스 및 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.UIntArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UInt%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용하는 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="cc16c3cee50083b832c4e37b5924ac9b35b3084d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.ULongArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.ULong%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스 및 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.ULongArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.ULong%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용하는 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="aba298431edc67384f78a10b5ce74bbbb6af3247" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.UShortArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UShort%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스 및 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.UShortArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UShort%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용하는 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="0139f4a1f67f7082aa70211b80880c7b76df1b11" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../reduce-right#kotlin.collections%24reduceRight%28kotlin.collections.List%28%28kotlin.collections.reduceRight.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduceRight.T%2C+kotlin.collections.reduceRight.S%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;../reduce-right#kotlin.collections%24reduceRight%28kotlin.collections.List%28%28kotlin.collections.reduceRight.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduceRight.T%2C+kotlin.collections.reduceRight.S%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="13d4cde2b0764f59c3e88214f212e3dcf2495f47" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;../reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.collections.List%28%28kotlin.collections.reduceRightIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceRightIndexed.T%2C+kotlin.collections.reduceRightIndexed.S%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original list and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 목록의 색인 및 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;../reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.collections.List%28%28kotlin.collections.reduceRightIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceRightIndexed.T%2C+kotlin.collections.reduceRightIndexed.S%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용하는 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="a7cad93f2d7657b71b1d78b959688fcd46621896" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;reduce-right#kotlin.collections%24reduceRight%28kotlin.Array%28%28kotlin.collections.reduceRight.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduceRight.T%2C+kotlin.collections.reduceRight.S%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 각 요소 및 현재 누산기 값에 &lt;a href=&quot;reduce-right#kotlin.collections%24reduceRight%28kotlin.Array%28%28kotlin.collections.reduceRight.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduceRight.T%2C+kotlin.collections.reduceRight.S%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="e4b2bfd35ae32b86b9fd8a69c03c326767cf16d0" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.Array%28%28kotlin.collections.reduceRightIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceRightIndexed.T%2C+kotlin.collections.reduceRightIndexed.S%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스 및 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.Array%28%28kotlin.collections.reduceRightIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceRightIndexed.T%2C+kotlin.collections.reduceRightIndexed.S%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용하는 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="54f9ed71424b9157ecadee215713e9bba526a331" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with last element and applying &lt;a href=&quot;reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.collections.List%28%28kotlin.collections.reduceRightIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceRightIndexed.T%2C+kotlin.collections.reduceRightIndexed.S%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original list and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 목록의 색인 및 현재 누산기 값으로 각 요소에 오른쪽에서 왼쪽으로 &lt;a href=&quot;reduce-right-indexed#kotlin.collections%24reduceRightIndexed%28kotlin.collections.List%28%28kotlin.collections.reduceRightIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceRightIndexed.T%2C+kotlin.collections.reduceRightIndexed.S%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용하는 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="f0f4545ce33a5c4bc28654e601d594691299813a" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;../../kotlin.text/reduce#kotlin.text%24reduce%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</source>
          <target state="translated">첫 문자부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 문자에 &lt;a href=&quot;../../kotlin.text/reduce#kotlin.text%24reduce%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="bcf557a10df870b840f8d0cdee95dce0141b816a" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;../../kotlin.text/reduce#kotlin.text%24reduce(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</source>
          <target state="translated">Accumulates value starting with the first character and applying &lt;a href=&quot;../../kotlin.text/reduce#kotlin.text%24reduce(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</target>
        </trans-unit>
        <trans-unit id="d1e0db235636dd8bb2f8a74a566cbfde6bf945ce" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;../../kotlin.text/reduce-indexed#kotlin.text%24reduceIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</source>
          <target state="translated">적산 값의 첫 번째 문자에서 시작하여 도포 &lt;a href=&quot;../../kotlin.text/reduce-indexed#kotlin.text%24reduceIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 대한 우측 및 일본어 문자 시퀀스의 인덱스와 각 문자는 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="1b2bc6bddd2ea2761927939782485f366571c6bc" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;../../kotlin.text/reduce-indexed#kotlin.text%24reduceIndexed(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</source>
          <target state="translated">Accumulates value starting with the first character and applying &lt;a href=&quot;../../kotlin.text/reduce-indexed#kotlin.text%24reduceIndexed(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</target>
        </trans-unit>
        <trans-unit id="e38a1bd538ba9716d3f9665863c52857cc45266f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;../../kotlin.text/reduce-indexed-or-null#kotlin.text%24reduceIndexedOrNull(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</source>
          <target state="translated">Accumulates value starting with the first character and applying &lt;a href=&quot;../../kotlin.text/reduce-indexed-or-null#kotlin.text%24reduceIndexedOrNull(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</target>
        </trans-unit>
        <trans-unit id="e4720fd485d24540a55939c58aac994b21ea13fa" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;../../kotlin.text/reduce-or-null#kotlin.text%24reduceOrNull(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</source>
          <target state="translated">Accumulates value starting with the first character and applying &lt;a href=&quot;../../kotlin.text/reduce-or-null#kotlin.text%24reduceOrNull(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</target>
        </trans-unit>
        <trans-unit id="a96ad9cc61101b2b7800aca999bbdf68a03f2a3d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;../reduce#kotlin.text%24reduce%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</source>
          <target state="translated">첫 문자부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 문자에 &lt;a href=&quot;../reduce#kotlin.text%24reduce%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="cb697d8e45597f2e2adf0fd5b602066c91036694" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;../reduce#kotlin.text%24reduce(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</source>
          <target state="translated">Accumulates value starting with the first character and applying &lt;a href=&quot;../reduce#kotlin.text%24reduce(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</target>
        </trans-unit>
        <trans-unit id="5cc21ef80924866c007302783e6bfaf7e29e81d4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;../reduce-indexed#kotlin.text%24reduceIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</source>
          <target state="translated">적산 값의 첫 번째 문자에서 시작하여 도포 &lt;a href=&quot;../reduce-indexed#kotlin.text%24reduceIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 대한 우측 및 일본어 문자 시퀀스의 인덱스와 각 문자는 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="0c07694b683ec5da6bd524d64073b480f4ac596f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;../reduce-indexed#kotlin.text%24reduceIndexed(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</source>
          <target state="translated">Accumulates value starting with the first character and applying &lt;a href=&quot;../reduce-indexed#kotlin.text%24reduceIndexed(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</target>
        </trans-unit>
        <trans-unit id="6e97298e0090c06b0cf7c1caa4b3a79a12006375" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;../reduce-indexed-or-null#kotlin.text%24reduceIndexedOrNull(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</source>
          <target state="translated">Accumulates value starting with the first character and applying &lt;a href=&quot;../reduce-indexed-or-null#kotlin.text%24reduceIndexedOrNull(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</target>
        </trans-unit>
        <trans-unit id="ddbf845192512b8834dcae9613eb9a8a7008d6d2" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;../reduce-or-null#kotlin.text%24reduceOrNull(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</source>
          <target state="translated">Accumulates value starting with the first character and applying &lt;a href=&quot;../reduce-or-null#kotlin.text%24reduceOrNull(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</target>
        </trans-unit>
        <trans-unit id="8fe48cfc9e1bd1ca157c0a6c6103e2e4bd299e3c" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;reduce#kotlin.text%24reduce%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</source>
          <target state="translated">첫 문자부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 문자에 &lt;a href=&quot;reduce#kotlin.text%24reduce%28kotlin.CharSequence%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="995c44afad8a216fdf5ea22ec6bd2a82aa3c9e63" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;reduce#kotlin.text%24reduce(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</source>
          <target state="translated">Accumulates value starting with the first character and applying &lt;a href=&quot;reduce#kotlin.text%24reduce(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</target>
        </trans-unit>
        <trans-unit id="1fd5a5c17254540a0a21d13b9ed3b9e260d5b94d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;reduce-indexed#kotlin.text%24reduceIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</source>
          <target state="translated">적산 값의 첫 번째 문자에서 시작하여 도포 &lt;a href=&quot;reduce-indexed#kotlin.text%24reduceIndexed%28kotlin.CharSequence%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 대한 우측 및 일본어 문자 시퀀스의 인덱스와 각 문자는 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="8c61942674f36922ddfae160834345188a4bb35a" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;reduce-indexed#kotlin.text%24reduceIndexed(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</source>
          <target state="translated">Accumulates value starting with the first character and applying &lt;a href=&quot;reduce-indexed#kotlin.text%24reduceIndexed(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</target>
        </trans-unit>
        <trans-unit id="4c94e2c12360e0a1838d09a608faa7d6753c443b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;reduce-indexed-or-null#kotlin.text%24reduceIndexedOrNull(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</source>
          <target state="translated">Accumulates value starting with the first character and applying &lt;a href=&quot;reduce-indexed-or-null#kotlin.text%24reduceIndexedOrNull(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character with its index in the original char sequence.</target>
        </trans-unit>
        <trans-unit id="d4396ccd931ec6c4e9b159b5ccf3f642466456cf" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first character and applying &lt;a href=&quot;reduce-or-null#kotlin.text%24reduceOrNull(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</source>
          <target state="translated">Accumulates value starting with the first character and applying &lt;a href=&quot;reduce-or-null#kotlin.text%24reduceOrNull(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each character.</target>
        </trans-unit>
        <trans-unit id="248c747349a0abb2c62f78eec67ddc43054780f1" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.Array%28%28kotlin.collections.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduce.S%2C+kotlin.collections.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">첫 번째 요소부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.Array%28%28kotlin.collections.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduce.S%2C+kotlin.collections.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="433e22b4c2f7a2d64ee39ca3df4c0c9b0c759f8d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.BooleanArray%2C+kotlin.Function2%28%28kotlin.Boolean%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">첫 번째 요소부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.BooleanArray%2C+kotlin.Function2%28%28kotlin.Boolean%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="5e839074c33254c2b9328706dbe7eb467c30a7f2" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.ByteArray%2C+kotlin.Function2%28%28kotlin.Byte%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">첫 번째 요소부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.ByteArray%2C+kotlin.Function2%28%28kotlin.Byte%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="be53d8c59c25598af497f6c28d054c0353b4058c" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.CharArray%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">첫 번째 요소부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.CharArray%2C+kotlin.Function2%28%28kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="980faf52b90229ab2b41d747c2c34ec73bd1ee8e" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.DoubleArray%2C+kotlin.Function2%28%28kotlin.Double%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">첫 번째 요소부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.DoubleArray%2C+kotlin.Function2%28%28kotlin.Double%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="89cf401abd535473627a54facfb31a73c40d7a46" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.FloatArray%2C+kotlin.Function2%28%28kotlin.Float%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">첫 번째 요소부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.FloatArray%2C+kotlin.Function2%28%28kotlin.Float%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="1ef97fdd684dafe7a04e83394a029258ced21f7f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.IntArray%2C+kotlin.Function2%28%28kotlin.Int%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">첫 번째 요소부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.IntArray%2C+kotlin.Function2%28%28kotlin.Int%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="70e0d67338be3316f715cceb636f8c318e79e2a0" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.LongArray%2C+kotlin.Function2%28%28kotlin.Long%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">첫 번째 요소부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.LongArray%2C+kotlin.Function2%28%28kotlin.Long%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="640a2c513ddb26790db4a44197518c4eee1b475f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.ShortArray%2C+kotlin.Function2%28%28kotlin.Short%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">첫 번째 요소부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.ShortArray%2C+kotlin.Function2%28%28kotlin.Short%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="fd355c987cd5cf722ee437c8650391005c0a03e0" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.UByteArray%2C+kotlin.Function2%28%28kotlin.UByte%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">첫 번째 요소부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.UByteArray%2C+kotlin.Function2%28%28kotlin.UByte%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="2ba47de8f57c517e779e125c79e73b3d3403be13" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.UIntArray%2C+kotlin.Function2%28%28kotlin.UInt%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">첫 번째 요소부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.UIntArray%2C+kotlin.Function2%28%28kotlin.UInt%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="c1094a345408563a982bdb6b6a65f5fc49b76fa1" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.ULongArray%2C+kotlin.Function2%28%28kotlin.ULong%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">첫 번째 요소부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.ULongArray%2C+kotlin.Function2%28%28kotlin.ULong%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="d82d305dda7e3351f9b396a18c339994d26dfa61" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.UShortArray%2C+kotlin.Function2%28%28kotlin.UShort%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">첫 번째 요소부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.UShortArray%2C+kotlin.Function2%28%28kotlin.UShort%2C+%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="e8c9ca24e546d0048d49537f26734fc78f7effcc" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.collections.Iterable%28%28kotlin.collections.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduce.S%2C+kotlin.collections.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">첫 번째 요소부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce%28kotlin.collections.Iterable%28%28kotlin.collections.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduce.S%2C+kotlin.collections.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="1b0d9ba148bc64ed61f85b815b16250451e829cd" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.Array((kotlin.collections.reduce.T)),%20kotlin.Function2((kotlin.collections.reduce.S,%20kotlin.collections.reduce.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.Array((kotlin.collections.reduce.T)),%20kotlin.Function2((kotlin.collections.reduce.S,%20kotlin.collections.reduce.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="92e6b7a441a089ae3c31697357fe32a487dfaf66" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.BooleanArray,%20kotlin.Function2((kotlin.Boolean,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.BooleanArray,%20kotlin.Function2((kotlin.Boolean,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="e303af0bb0d680f008075ba3bdb0f33a04b190a4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.ByteArray,%20kotlin.Function2((kotlin.Byte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.ByteArray,%20kotlin.Function2((kotlin.Byte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="c5a29f17cea6db22e3f87150139e62837a4ab1a0" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.CharArray,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.CharArray,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="97804848bc7e8d7ed5a9a32c2667164ca501ea1a" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.DoubleArray,%20kotlin.Function2((kotlin.Double,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.DoubleArray,%20kotlin.Function2((kotlin.Double,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="b94ad90063444c670e2a02a55e4addb7e32d1860" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.FloatArray,%20kotlin.Function2((kotlin.Float,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.FloatArray,%20kotlin.Function2((kotlin.Float,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="42452d1b353de5f4bbe00a636f51f9ec1711c71f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.IntArray,%20kotlin.Function2((kotlin.Int,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.IntArray,%20kotlin.Function2((kotlin.Int,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="89cfe219759c9f3872926c9054aab73afdcb8839" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.LongArray,%20kotlin.Function2((kotlin.Long,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.LongArray,%20kotlin.Function2((kotlin.Long,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="a4db01e74308e98bbcf2013c80057b9719f155d4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.ShortArray,%20kotlin.Function2((kotlin.Short,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.ShortArray,%20kotlin.Function2((kotlin.Short,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="7ab967629bbd70fb9baaf3f09dc47b6315ab12cc" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.UByteArray,%20kotlin.Function2((kotlin.UByte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.UByteArray,%20kotlin.Function2((kotlin.UByte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="7b5eb67ce403c873bc6ffd13ab4ce7c9fa4444d7" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.UIntArray,%20kotlin.Function2((kotlin.UInt,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.UIntArray,%20kotlin.Function2((kotlin.UInt,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="7152a6f7bdcf0d4efddf4d4b45f622594f4fe51f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.ULongArray,%20kotlin.Function2((kotlin.ULong,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.ULongArray,%20kotlin.Function2((kotlin.ULong,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="dadf227b9675384b43c499e5f69c3c1b9b921ae5" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.UShortArray,%20kotlin.Function2((kotlin.UShort,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.UShortArray,%20kotlin.Function2((kotlin.UShort,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="3180628575574e2af61e6cb288544198cc872855" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.collections.Iterable((kotlin.collections.reduce.T)),%20kotlin.Function2((kotlin.collections.reduce.S,%20kotlin.collections.reduce.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce#kotlin.collections%24reduce(kotlin.collections.Iterable((kotlin.collections.reduce.T)),%20kotlin.Function2((kotlin.collections.reduce.S,%20kotlin.collections.reduce.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="185b9a4216c226201933f3ee6dec1a5ce1270b7a" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.Array%28%28kotlin.collections.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceIndexed.S%2C+kotlin.collections.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">적산 값의 첫 번째 요소에서 시작하여 도포 &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.Array%28%28kotlin.collections.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceIndexed.S%2C+kotlin.collections.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로 원래 배열의 인덱스와 각 요소 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="bea213869ae97ab3d674d855b3157c1b44a2d65d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.BooleanArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Boolean%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">적산 값의 첫 번째 요소에서 시작하여 도포 &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.BooleanArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Boolean%2C+%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로 원래 배열의 인덱스와 각 요소 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="16217ed73b4713c683baf5e06e9b14f8bb6e67a8" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.ByteArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Byte%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">적산 값의 첫 번째 요소에서 시작하여 도포 &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.ByteArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Byte%2C+%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로 원래 배열의 인덱스와 각 요소 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="dce7e490c924306eda3757d316fb0d193cb60187" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.CharArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">적산 값의 첫 번째 요소에서 시작하여 도포 &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.CharArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Char%2C+%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로 원래 배열의 인덱스와 각 요소 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="0f054fd13a8f4ee1aa0591d38cbd3c12444ae022" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.DoubleArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Double%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">적산 값의 첫 번째 요소에서 시작하여 도포 &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.DoubleArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Double%2C+%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로 원래 배열의 인덱스와 각 요소 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="7bd0832fc207e0ea62c5474e12a4176bf3dd43a9" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.FloatArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Float%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">적산 값의 첫 번째 요소에서 시작하여 도포 &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.FloatArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Float%2C+%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로 원래 배열의 인덱스와 각 요소 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="fa7c923fbbbaaef404e0b62d0888f57596d98464" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.IntArray%2C+kotlin.Function3%28%28kotlin.Int%2C+%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">적산 값의 첫 번째 요소에서 시작하여 도포 &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.IntArray%2C+kotlin.Function3%28%28kotlin.Int%2C+%2C+%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로 원래 배열의 인덱스와 각 요소 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="11021c4609780d51c1928be97edcebd99208f72f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.LongArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Long%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">적산 값의 첫 번째 요소에서 시작하여 도포 &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.LongArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Long%2C+%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로 원래 배열의 인덱스와 각 요소 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="b9815ab7af7fe519f35c46260122076f54f67554" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.ShortArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Short%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">적산 값의 첫 번째 요소에서 시작하여 도포 &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.ShortArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.Short%2C+%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로 원래 배열의 인덱스와 각 요소 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="12f704b9aab625a609b5de332989f6107f5b8384" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.UByteArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UByte%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">적산 값의 첫 번째 요소에서 시작하여 도포 &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.UByteArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UByte%2C+%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로 원래 배열의 인덱스와 각 요소 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="d5c477f32fa63050b48671fa15b2aabbf9dc1cf5" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.UIntArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UInt%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">적산 값의 첫 번째 요소에서 시작하여 도포 &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.UIntArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UInt%2C+%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로 원래 배열의 인덱스와 각 요소 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="11fa318e81b97d98c5129af5124f86c62b278a93" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.ULongArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.ULong%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">적산 값의 첫 번째 요소에서 시작하여 도포 &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.ULongArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.ULong%2C+%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로 원래 배열의 인덱스와 각 요소 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="4ea2e63ce674d60d45a9ceb636c2ca95ec0ae22d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.UShortArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UShort%2C+%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">적산 값의 첫 번째 요소에서 시작하여 도포 &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.UShortArray%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.UShort%2C+%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로 원래 배열의 인덱스와 각 요소 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="1e6ca49c3c7709eea512fa3e7e8bf7eb294179c8" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceIndexed.S%2C+kotlin.collections.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</source>
          <target state="translated">적산 값의 첫 번째 요소에서 시작하여 도포 &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceIndexed.S%2C+kotlin.collections.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로 원래 컬렉션에서 그 인덱스의 각 요소는 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="f8fe2cdbca6c265df360873e8d21b05b9a29852a" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.Array((kotlin.collections.reduceIndexed.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceIndexed.S,%20kotlin.collections.reduceIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.Array((kotlin.collections.reduceIndexed.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceIndexed.S,%20kotlin.collections.reduceIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="a07cc885ef37443bf9451bf4e56b95df62b1747c" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.BooleanArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Boolean,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.BooleanArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Boolean,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="2dbe477c8468fe3cfe173bc9ff516d0f10e23d95" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.ByteArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Byte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.ByteArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Byte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="45ba1f792c4e6b3a97347d3c5d7adb69032fb45f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.CharArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.CharArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="2a1f2a1fd487fda8fdbb9804e829a71f290f84a6" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.DoubleArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Double,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.DoubleArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Double,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="15243060f24aa33f6635c6c11173fa45349fe5b1" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.FloatArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Float,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.FloatArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Float,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="97d00141cc224120ce781c9cbbb7fce36931ac8a" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.IntArray,%20kotlin.Function3((kotlin.Int,%20,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.IntArray,%20kotlin.Function3((kotlin.Int,%20,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="de7eea4fc39be9fefe197f758c9812973d17a9ac" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.LongArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Long,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.LongArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Long,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="b369c78986b5ba9ce2023f8e4c3d00d627e2ef68" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.ShortArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Short,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.ShortArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Short,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="3039f604c6a7cabb2b0212c7e6aea8d30d20248c" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.UByteArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UByte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.UByteArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UByte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="65be1f54b9fa869ad4bc1263b347f53975f6850a" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.UIntArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UInt,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.UIntArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UInt,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="8b6cbc1455a59dfa579d451e50afa49a3e591677" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.ULongArray,%20kotlin.Function3((kotlin.Int,%20kotlin.ULong,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.ULongArray,%20kotlin.Function3((kotlin.Int,%20kotlin.ULong,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="c9a138a435a7f8cc5723860eac33bdcffb5b37d8" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.UShortArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UShort,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.UShortArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UShort,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="faaec8e976c1f6121bb71c893373dcd0720c88e9" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.collections.Iterable((kotlin.collections.reduceIndexed.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceIndexed.S,%20kotlin.collections.reduceIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.collections.Iterable((kotlin.collections.reduceIndexed.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceIndexed.S,%20kotlin.collections.reduceIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</target>
        </trans-unit>
        <trans-unit id="43b725cbf1164101481c24a2005d7ad257608b86" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.Array((kotlin.collections.reduceIndexedOrNull.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceIndexedOrNull.S,%20kotlin.collections.reduceIndexedOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.Array((kotlin.collections.reduceIndexedOrNull.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceIndexedOrNull.S,%20kotlin.collections.reduceIndexedOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="de4cff2ef89ce00e340d5141122c0d691b13ebcb" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.BooleanArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Boolean,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.BooleanArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Boolean,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="4ef45b0acf0af51e8fb39532c5598e30c8b1c899" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.ByteArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Byte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.ByteArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Byte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="d2b97cfb3e2ff2935425601f6ca7c2a638d9c758" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.CharArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.CharArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="88d151a9d53ba1abdf70c0452f4e62e816d9120d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.DoubleArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Double,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.DoubleArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Double,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="aaa8ea72161ab48eb68e6bf311706ac9bbdb48bc" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.FloatArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Float,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.FloatArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Float,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="a1ae2fb0e22f34d3354365d1238c26b1cbbbaf01" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.IntArray,%20kotlin.Function3((kotlin.Int,%20,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.IntArray,%20kotlin.Function3((kotlin.Int,%20,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="430c0ee6e353930e730bc5c9fe23532d162a01cc" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.LongArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Long,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.LongArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Long,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="69ddfe48612c13f0e157fe2867df322d01401145" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.ShortArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Short,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.ShortArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Short,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="4e3d71a4abe8662d23970c4a1b9fa8356344b174" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.UByteArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UByte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.UByteArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UByte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="a9a798a1935d9a133782bdb2275344d0f0d783a2" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.UIntArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UInt,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.UIntArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UInt,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="5d14e5cba618fb45c43a060071154d9481811d7d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.ULongArray,%20kotlin.Function3((kotlin.Int,%20kotlin.ULong,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.ULongArray,%20kotlin.Function3((kotlin.Int,%20kotlin.ULong,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="bca125cafdb1356efe074f7e4bd92b8b98f6f437" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.UShortArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UShort,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.UShortArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UShort,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="d4f5d9f91ff6dd016c7e633b362ab5b88857cbe4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.collections.Iterable((kotlin.collections.reduceIndexedOrNull.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceIndexedOrNull.S,%20kotlin.collections.reduceIndexedOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.collections.Iterable((kotlin.collections.reduceIndexedOrNull.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceIndexedOrNull.S,%20kotlin.collections.reduceIndexedOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</target>
        </trans-unit>
        <trans-unit id="446a95025b0272a27f3623fbf66e063d94960694" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.Array((kotlin.collections.reduceOrNull.T)),%20kotlin.Function2((kotlin.collections.reduceOrNull.S,%20kotlin.collections.reduceOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.Array((kotlin.collections.reduceOrNull.T)),%20kotlin.Function2((kotlin.collections.reduceOrNull.S,%20kotlin.collections.reduceOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="064f564e15203bf98f3f133e736cde0e6e9c2f40" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.BooleanArray,%20kotlin.Function2((kotlin.Boolean,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.BooleanArray,%20kotlin.Function2((kotlin.Boolean,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="e5006a40a8d4e88dbd34fe995ed0be4989001a81" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.ByteArray,%20kotlin.Function2((kotlin.Byte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.ByteArray,%20kotlin.Function2((kotlin.Byte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="945691c5c73e5af15164deeefa7c1f388327c338" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.CharArray,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.CharArray,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="f38bc9458c190c1c13cc057b18a6d249e943ed19" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.DoubleArray,%20kotlin.Function2((kotlin.Double,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.DoubleArray,%20kotlin.Function2((kotlin.Double,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="9688d34498dde0bb2ef619690688836237aee543" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.FloatArray,%20kotlin.Function2((kotlin.Float,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.FloatArray,%20kotlin.Function2((kotlin.Float,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="4228f68ec187a15d9b4312d8e69afb9015523586" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.IntArray,%20kotlin.Function2((kotlin.Int,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.IntArray,%20kotlin.Function2((kotlin.Int,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="675942f4656dc9d0e260bd2bd224f0c151ac37c9" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.LongArray,%20kotlin.Function2((kotlin.Long,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.LongArray,%20kotlin.Function2((kotlin.Long,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="caf8fd03e54d9645ad5e625f84bc1e29ec7aee33" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.ShortArray,%20kotlin.Function2((kotlin.Short,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.ShortArray,%20kotlin.Function2((kotlin.Short,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="0d9f333d556c119f8dc3e78229ff2726e6e1ca3d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.UByteArray,%20kotlin.Function2((kotlin.UByte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.UByteArray,%20kotlin.Function2((kotlin.UByte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="910303791e707b59dfe230c09b1493c9dd9db6aa" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.UIntArray,%20kotlin.Function2((kotlin.UInt,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.UIntArray,%20kotlin.Function2((kotlin.UInt,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="a7636eb898cdabbd415ed3da898b983e44c8393f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.ULongArray,%20kotlin.Function2((kotlin.ULong,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.ULongArray,%20kotlin.Function2((kotlin.ULong,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="f34b10e71a7da4bcc7fca05ca2878ccd88b2b876" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.UShortArray,%20kotlin.Function2((kotlin.UShort,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.UShortArray,%20kotlin.Function2((kotlin.UShort,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="6f1a4c4f110a994fb6d43b481e6a56e98387575b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.collections.Iterable((kotlin.collections.reduceOrNull.T)),%20kotlin.Function2((kotlin.collections.reduceOrNull.S,%20kotlin.collections.reduceOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../../kotlin.collections/reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.collections.Iterable((kotlin.collections.reduceOrNull.T)),%20kotlin.Function2((kotlin.collections.reduceOrNull.S,%20kotlin.collections.reduceOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="8069e0bf6f3be77c4c2cdbdbb3c95e8a511bba0e" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce#kotlin.collections%24reduce%28kotlin.collections.Iterable%28%28kotlin.collections.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduce.S%2C+kotlin.collections.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">첫 번째 요소부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../reduce#kotlin.collections%24reduce%28kotlin.collections.Iterable%28%28kotlin.collections.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduce.S%2C+kotlin.collections.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="35e50f3dc4fcbef145d41d0cb28599c5dd779e12" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce#kotlin.collections%24reduce(kotlin.collections.Iterable((kotlin.collections.reduce.T)),%20kotlin.Function2((kotlin.collections.reduce.S,%20kotlin.collections.reduce.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce#kotlin.collections%24reduce(kotlin.collections.Iterable((kotlin.collections.reduce.T)),%20kotlin.Function2((kotlin.collections.reduce.S,%20kotlin.collections.reduce.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="bba502c1cf16bf6ff7fbd37a059d89a103114204" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce#kotlin.sequences%24reduce%28kotlin.sequences.Sequence%28%28kotlin.sequences.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.sequences.reduce.S%2C+kotlin.sequences.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">첫 번째 요소부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;../reduce#kotlin.sequences%24reduce%28kotlin.sequences.Sequence%28%28kotlin.sequences.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.sequences.reduce.S%2C+kotlin.sequences.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="a99196b23c584bcdd204044e2dd05eb3a46a6884" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce#kotlin.sequences%24reduce(kotlin.sequences.Sequence((kotlin.sequences.reduce.T)),%20kotlin.Function2((kotlin.sequences.reduce.S,%20kotlin.sequences.reduce.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce#kotlin.sequences%24reduce(kotlin.sequences.Sequence((kotlin.sequences.reduce.T)),%20kotlin.Function2((kotlin.sequences.reduce.S,%20kotlin.sequences.reduce.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="5c703a169727e73cc34a682104a0167613ad9c2d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceIndexed.S%2C+kotlin.collections.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</source>
          <target state="translated">적산 값의 첫 번째 요소에서 시작하여 도포 &lt;a href=&quot;../reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceIndexed.S%2C+kotlin.collections.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로 원래 컬렉션에서 그 인덱스의 각 요소는 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="897dd092371e30dd5b4c6b16f1281e9aeb0caf0b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.collections.Iterable((kotlin.collections.reduceIndexed.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceIndexed.S,%20kotlin.collections.reduceIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.collections.Iterable((kotlin.collections.reduceIndexed.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceIndexed.S,%20kotlin.collections.reduceIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</target>
        </trans-unit>
        <trans-unit id="15fec208bed0d4e7edb677a5ad408449e040432f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce-indexed#kotlin.sequences%24reduceIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.reduceIndexed.S%2C+kotlin.sequences.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original sequence.</source>
          <target state="translated">적산 값의 첫 번째 요소에서 시작하여 도포 &lt;a href=&quot;../reduce-indexed#kotlin.sequences%24reduceIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.reduceIndexed.S%2C+kotlin.sequences.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로 원래 시퀀스의 인덱스와 각 요소 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="6eaf58764b10298bfe012e1fb61ace874dcbe8b6" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce-indexed#kotlin.sequences%24reduceIndexed(kotlin.sequences.Sequence((kotlin.sequences.reduceIndexed.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.sequences.reduceIndexed.S,%20kotlin.sequences.reduceIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original sequence.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce-indexed#kotlin.sequences%24reduceIndexed(kotlin.sequences.Sequence((kotlin.sequences.reduceIndexed.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.sequences.reduceIndexed.S,%20kotlin.sequences.reduceIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original sequence.</target>
        </trans-unit>
        <trans-unit id="32cf4a1966128512de881071766f0b9a2dfd335f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.collections.Iterable((kotlin.collections.reduceIndexedOrNull.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceIndexedOrNull.S,%20kotlin.collections.reduceIndexedOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.collections.Iterable((kotlin.collections.reduceIndexedOrNull.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceIndexedOrNull.S,%20kotlin.collections.reduceIndexedOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</target>
        </trans-unit>
        <trans-unit id="5ce71c567276c830fe09488adee2d15c6eb2c180" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce-indexed-or-null#kotlin.sequences%24reduceIndexedOrNull(kotlin.sequences.Sequence((kotlin.sequences.reduceIndexedOrNull.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.sequences.reduceIndexedOrNull.S,%20kotlin.sequences.reduceIndexedOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original sequence.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce-indexed-or-null#kotlin.sequences%24reduceIndexedOrNull(kotlin.sequences.Sequence((kotlin.sequences.reduceIndexedOrNull.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.sequences.reduceIndexedOrNull.S,%20kotlin.sequences.reduceIndexedOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original sequence.</target>
        </trans-unit>
        <trans-unit id="4b473a7e660fbcf59d7382e1f748c8a7e5efc71e" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.collections.Iterable((kotlin.collections.reduceOrNull.T)),%20kotlin.Function2((kotlin.collections.reduceOrNull.S,%20kotlin.collections.reduceOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.collections.Iterable((kotlin.collections.reduceOrNull.T)),%20kotlin.Function2((kotlin.collections.reduceOrNull.S,%20kotlin.collections.reduceOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="c458cd78d88d3c959339517e767b832aa95a4824" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce-or-null#kotlin.sequences%24reduceOrNull(kotlin.sequences.Sequence((kotlin.sequences.reduceOrNull.T)),%20kotlin.Function2((kotlin.sequences.reduceOrNull.S,%20kotlin.sequences.reduceOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;../reduce-or-null#kotlin.sequences%24reduceOrNull(kotlin.sequences.Sequence((kotlin.sequences.reduceOrNull.T)),%20kotlin.Function2((kotlin.sequences.reduceOrNull.S,%20kotlin.sequences.reduceOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="25e83006176ff984b56e59fec928e14f4211c9d6" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;reduce#kotlin.collections%24reduce%28kotlin.Array%28%28kotlin.collections.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduce.S%2C+kotlin.collections.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">첫 번째 요소부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;reduce#kotlin.collections%24reduce%28kotlin.Array%28%28kotlin.collections.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.collections.reduce.S%2C+kotlin.collections.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="ce5e1f8bc8c4e2d823097db06513fc0cf91010e4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;reduce#kotlin.collections%24reduce(kotlin.Array((kotlin.collections.reduce.T)),%20kotlin.Function2((kotlin.collections.reduce.S,%20kotlin.collections.reduce.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;reduce#kotlin.collections%24reduce(kotlin.Array((kotlin.collections.reduce.T)),%20kotlin.Function2((kotlin.collections.reduce.S,%20kotlin.collections.reduce.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="20be9314f93eb091fdf5a11b18ab34d17bc10075" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;reduce#kotlin.collections%24reduce(kotlin.collections.Iterable((kotlin.collections.reduce.T)),%20kotlin.Function2((kotlin.collections.reduce.S,%20kotlin.collections.reduce.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;reduce#kotlin.collections%24reduce(kotlin.collections.Iterable((kotlin.collections.reduce.T)),%20kotlin.Function2((kotlin.collections.reduce.S,%20kotlin.collections.reduce.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="cc59b8404f372ae06aa53daff9abe7578f8f70a4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;reduce#kotlin.sequences%24reduce%28kotlin.sequences.Sequence%28%28kotlin.sequences.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.sequences.reduce.S%2C+kotlin.sequences.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">첫 번째 요소부터 시작하여 왼쪽에서 오른쪽으로 현재 누산기 값과 각 요소에 &lt;a href=&quot;reduce#kotlin.sequences%24reduce%28kotlin.sequences.Sequence%28%28kotlin.sequences.reduce.T%29%29%2C+kotlin.Function2%28%28kotlin.sequences.reduce.S%2C+kotlin.sequences.reduce.T%2C+%29%29%29%2Foperation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다 .</target>
        </trans-unit>
        <trans-unit id="fc722117a2eaccb5825bb7cc0191cbcb302f023f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;reduce#kotlin.sequences%24reduce(kotlin.sequences.Sequence((kotlin.sequences.reduce.T)),%20kotlin.Function2((kotlin.sequences.reduce.S,%20kotlin.sequences.reduce.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;reduce#kotlin.sequences%24reduce(kotlin.sequences.Sequence((kotlin.sequences.reduce.T)),%20kotlin.Function2((kotlin.sequences.reduce.S,%20kotlin.sequences.reduce.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="adb2c2d6121c4c1f6eb3baba127dc934958bcd09" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.Array%28%28kotlin.collections.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceIndexed.S%2C+kotlin.collections.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">적산 값의 첫 번째 요소에서 시작하여 도포 &lt;a href=&quot;reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.Array%28%28kotlin.collections.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceIndexed.S%2C+kotlin.collections.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로 원래 배열의 인덱스와 각 요소 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="3e4ecc74ed413a6276db8d2f68b99f485f63d327" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceIndexed.S%2C+kotlin.collections.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</source>
          <target state="translated">적산 값의 첫 번째 요소에서 시작하여 도포 &lt;a href=&quot;reduce-indexed#kotlin.collections%24reduceIndexed%28kotlin.collections.Iterable%28%28kotlin.collections.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.collections.reduceIndexed.S%2C+kotlin.collections.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로 원래 컬렉션에서 그 인덱스의 각 요소는 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="808edcdedd023bc43645870f41a56d4161259944" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.Array((kotlin.collections.reduceIndexed.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceIndexed.S,%20kotlin.collections.reduceIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.Array((kotlin.collections.reduceIndexed.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceIndexed.S,%20kotlin.collections.reduceIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="0c6b19f1861b3ab7ce488692a8f7025aa3fb79ab" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.collections.Iterable((kotlin.collections.reduceIndexed.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceIndexed.S,%20kotlin.collections.reduceIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-indexed#kotlin.collections%24reduceIndexed(kotlin.collections.Iterable((kotlin.collections.reduceIndexed.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceIndexed.S,%20kotlin.collections.reduceIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</target>
        </trans-unit>
        <trans-unit id="d79a429177e33420c991393045fdb6fad80077b4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-indexed#kotlin.sequences%24reduceIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.reduceIndexed.S%2C+kotlin.sequences.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original sequence.</source>
          <target state="translated">적산 값의 첫 번째 요소에서 시작하여 도포 &lt;a href=&quot;reduce-indexed#kotlin.sequences%24reduceIndexed%28kotlin.sequences.Sequence%28%28kotlin.sequences.reduceIndexed.T%29%29%2C+kotlin.Function3%28%28kotlin.Int%2C+kotlin.sequences.reduceIndexed.S%2C+kotlin.sequences.reduceIndexed.T%2C+%29%29%29%2Foperation&quot;&gt;동작을&lt;/a&gt; 전류 누산기 값에 바로 원래 시퀀스의 인덱스와 각 요소 왼쪽에서.</target>
        </trans-unit>
        <trans-unit id="c4ee7b9d7977d36786ae0517b3a0dad1a9b5e354" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-indexed#kotlin.sequences%24reduceIndexed(kotlin.sequences.Sequence((kotlin.sequences.reduceIndexed.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.sequences.reduceIndexed.S,%20kotlin.sequences.reduceIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original sequence.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-indexed#kotlin.sequences%24reduceIndexed(kotlin.sequences.Sequence((kotlin.sequences.reduceIndexed.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.sequences.reduceIndexed.S,%20kotlin.sequences.reduceIndexed.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original sequence.</target>
        </trans-unit>
        <trans-unit id="70cc5be81a81d90be35bb9b5f490d99a1c9a3fcb" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.Array((kotlin.collections.reduceIndexedOrNull.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceIndexedOrNull.S,%20kotlin.collections.reduceIndexedOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.Array((kotlin.collections.reduceIndexedOrNull.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceIndexedOrNull.S,%20kotlin.collections.reduceIndexedOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original array.</target>
        </trans-unit>
        <trans-unit id="67d753fe42ce2d01a07d3992960081ef321bce25" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.collections.Iterable((kotlin.collections.reduceIndexedOrNull.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceIndexedOrNull.S,%20kotlin.collections.reduceIndexedOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-indexed-or-null#kotlin.collections%24reduceIndexedOrNull(kotlin.collections.Iterable((kotlin.collections.reduceIndexedOrNull.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceIndexedOrNull.S,%20kotlin.collections.reduceIndexedOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original collection.</target>
        </trans-unit>
        <trans-unit id="c8920e0268d1ca2bb8182ff512f5840903833a9e" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-indexed-or-null#kotlin.sequences%24reduceIndexedOrNull(kotlin.sequences.Sequence((kotlin.sequences.reduceIndexedOrNull.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.sequences.reduceIndexedOrNull.S,%20kotlin.sequences.reduceIndexedOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original sequence.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-indexed-or-null#kotlin.sequences%24reduceIndexedOrNull(kotlin.sequences.Sequence((kotlin.sequences.reduceIndexedOrNull.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.sequences.reduceIndexedOrNull.S,%20kotlin.sequences.reduceIndexedOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element with its index in the original sequence.</target>
        </trans-unit>
        <trans-unit id="b63777d3bcac84b9f2df2a3b651440bfdbb7d364" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.Array((kotlin.collections.reduceOrNull.T)),%20kotlin.Function2((kotlin.collections.reduceOrNull.S,%20kotlin.collections.reduceOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.Array((kotlin.collections.reduceOrNull.T)),%20kotlin.Function2((kotlin.collections.reduceOrNull.S,%20kotlin.collections.reduceOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="59f2faccb0b9c640395512ac66e322d3eebe9c66" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.collections.Iterable((kotlin.collections.reduceOrNull.T)),%20kotlin.Function2((kotlin.collections.reduceOrNull.S,%20kotlin.collections.reduceOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">첫 번째 요소부터 시작 하여 현재 누산기 값과 각 요소에 왼쪽에서 오른쪽으로 &lt;a href=&quot;reduce-or-null#kotlin.collections%24reduceOrNull(kotlin.collections.Iterable((kotlin.collections.reduceOrNull.T)),%20kotlin.Function2((kotlin.collections.reduceOrNull.S,%20kotlin.collections.reduceOrNull.T,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="7ef6e50a2ec0af6da4060b4b724536ca1dd0b822" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-or-null#kotlin.sequences%24reduceOrNull(kotlin.sequences.Sequence((kotlin.sequences.reduceOrNull.T)),%20kotlin.Function2((kotlin.sequences.reduceOrNull.S,%20kotlin.sequences.reduceOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</source>
          <target state="translated">Accumulates value starting with the first element and applying &lt;a href=&quot;reduce-or-null#kotlin.sequences%24reduceOrNull(kotlin.sequences.Sequence((kotlin.sequences.reduceOrNull.T)),%20kotlin.Function2((kotlin.sequences.reduceOrNull.S,%20kotlin.sequences.reduceOrNull.T,%20)))/operation&quot;&gt;operation&lt;/a&gt; from left to right to current accumulator value and each element.</target>
        </trans-unit>
        <trans-unit id="f26f6b29660bae04076c6b4094f290a0e1266a6d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last character and applying &lt;a href=&quot;../../kotlin.text/reduce-right#kotlin.text%24reduceRight(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</source>
          <target state="translated">Accumulates value starting with the last character and applying &lt;a href=&quot;../../kotlin.text/reduce-right#kotlin.text%24reduceRight(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</target>
        </trans-unit>
        <trans-unit id="d3a430c494a58d1272fee67d8cd72df1ee58b93f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last character and applying &lt;a href=&quot;../../kotlin.text/reduce-right-indexed#kotlin.text%24reduceRightIndexed(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each character with its index in the original char sequence and current accumulator value.</source>
          <target state="translated">마지막 문자로 시작 하여 원래 문자 시퀀스의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 문자에 &lt;a href=&quot;../../kotlin.text/reduce-right-indexed#kotlin.text%24reduceRightIndexed(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="4658de69c69c474ffd1691697d046e670286d4dd" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last character and applying &lt;a href=&quot;../../kotlin.text/reduce-right-indexed-or-null#kotlin.text%24reduceRightIndexedOrNull(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each character with its index in the original char sequence and current accumulator value.</source>
          <target state="translated">마지막 문자로 시작 하여 원래 문자 시퀀스의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 문자에 &lt;a href=&quot;../../kotlin.text/reduce-right-indexed-or-null#kotlin.text%24reduceRightIndexedOrNull(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="17843fd27e345d50e52f41411620b74b573f50c4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last character and applying &lt;a href=&quot;../../kotlin.text/reduce-right-or-null#kotlin.text%24reduceRightOrNull(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</source>
          <target state="translated">마지막 문자부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.text/reduce-right-or-null#kotlin.text%24reduceRightOrNull(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 문자 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="5e99bd33b041cbf67a07fc73a6ef44712764561c" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last character and applying &lt;a href=&quot;../reduce-right#kotlin.text%24reduceRight(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</source>
          <target state="translated">마지막 문자부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../reduce-right#kotlin.text%24reduceRight(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 문자 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="077906285588f19ac1553ef229ca7e3d5995ff6c" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last character and applying &lt;a href=&quot;../reduce-right-indexed#kotlin.text%24reduceRightIndexed(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each character with its index in the original char sequence and current accumulator value.</source>
          <target state="translated">마지막 문자로 시작 하여 원래 문자 시퀀스의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 문자에 &lt;a href=&quot;../reduce-right-indexed#kotlin.text%24reduceRightIndexed(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="ec70b0ea8d74f11a65f0a01288675f4be034ffbd" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last character and applying &lt;a href=&quot;../reduce-right-indexed-or-null#kotlin.text%24reduceRightIndexedOrNull(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each character with its index in the original char sequence and current accumulator value.</source>
          <target state="translated">마지막 문자로 시작 하여 원래 문자 시퀀스의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 문자에 &lt;a href=&quot;../reduce-right-indexed-or-null#kotlin.text%24reduceRightIndexedOrNull(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="4328631e900a98498bf3b284e871b751e96bd165" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last character and applying &lt;a href=&quot;../reduce-right-or-null#kotlin.text%24reduceRightOrNull(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</source>
          <target state="translated">마지막 문자부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../reduce-right-or-null#kotlin.text%24reduceRightOrNull(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 문자 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="1f0e1b87abc1641fdce6f4971e5e49356f8e91c1" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last character and applying &lt;a href=&quot;reduce-right#kotlin.text%24reduceRight(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</source>
          <target state="translated">마지막 문자부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;reduce-right#kotlin.text%24reduceRight(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 문자 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="c937c62c83c7179964f2b22898ac5fcf87f24e9e" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last character and applying &lt;a href=&quot;reduce-right-indexed#kotlin.text%24reduceRightIndexed(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each character with its index in the original char sequence and current accumulator value.</source>
          <target state="translated">마지막 문자로 시작 하여 원래 문자 시퀀스의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 문자에 &lt;a href=&quot;reduce-right-indexed#kotlin.text%24reduceRightIndexed(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="80c800b93bdbf67bfded0275144199ee9af98a94" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last character and applying &lt;a href=&quot;reduce-right-indexed-or-null#kotlin.text%24reduceRightIndexedOrNull(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each character with its index in the original char sequence and current accumulator value.</source>
          <target state="translated">마지막 문자로 시작 하여 원래 문자 시퀀스의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 문자에 &lt;a href=&quot;reduce-right-indexed-or-null#kotlin.text%24reduceRightIndexedOrNull(kotlin.CharSequence,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="29c698a2c97337936fe1e3500ffedf84cb57f48d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last character and applying &lt;a href=&quot;reduce-right-or-null#kotlin.text%24reduceRightOrNull(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each character and current accumulator value.</source>
          <target state="translated">마지막 문자부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;reduce-right-or-null#kotlin.text%24reduceRightOrNull(kotlin.CharSequence,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 문자 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="d9b30d7980b5415376c44b8c350ae5c46c4ec0ac" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.Array((kotlin.collections.reduceRight.T)),%20kotlin.Function2((kotlin.collections.reduceRight.T,%20kotlin.collections.reduceRight.S,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.Array((kotlin.collections.reduceRight.T)),%20kotlin.Function2((kotlin.collections.reduceRight.T,%20kotlin.collections.reduceRight.S,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="6f732995fd54f320a24c37a930e88c8fdaf0f855" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.BooleanArray,%20kotlin.Function2((kotlin.Boolean,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.BooleanArray,%20kotlin.Function2((kotlin.Boolean,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="36c724ebc0ef93aad448fbaad363190b5fb2849a" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.ByteArray,%20kotlin.Function2((kotlin.Byte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.ByteArray,%20kotlin.Function2((kotlin.Byte,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="a538a4062505ac6082a7ffb3cd507e39a3ef52b8" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.CharArray,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.CharArray,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="d5e63924a91ec801675c8902e97ea60e9898dd5c" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.DoubleArray,%20kotlin.Function2((kotlin.Double,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.DoubleArray,%20kotlin.Function2((kotlin.Double,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="933259eed8ef9f2343f7c4f15846ab69a446510b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.FloatArray,%20kotlin.Function2((kotlin.Float,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.FloatArray,%20kotlin.Function2((kotlin.Float,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="cf42c101597cfa49747d523baa9de37811d9bb17" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.IntArray,%20kotlin.Function2((kotlin.Int,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.IntArray,%20kotlin.Function2((kotlin.Int,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="7ae361e9db0603fa2d6be9b80633d92290eff000" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.LongArray,%20kotlin.Function2((kotlin.Long,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.LongArray,%20kotlin.Function2((kotlin.Long,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="bf8bedff9fbcb65167c1ca255ada75161564c284" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.ShortArray,%20kotlin.Function2((kotlin.Short,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.ShortArray,%20kotlin.Function2((kotlin.Short,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="f68ea8aeab4eb3de779912b046e17c7d134ee117" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.UByteArray,%20kotlin.Function2((kotlin.UByte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.UByteArray,%20kotlin.Function2((kotlin.UByte,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="0589ac874ba8d5986b3b13cdd69d944ca5f1c91a" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.UIntArray,%20kotlin.Function2((kotlin.UInt,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.UIntArray,%20kotlin.Function2((kotlin.UInt,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="8b95117cc9ed51adf4fff0f2a9e86b1fb8e7dc02" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.ULongArray,%20kotlin.Function2((kotlin.ULong,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.ULongArray,%20kotlin.Function2((kotlin.ULong,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="9b43c45f7b3e81234b813b62bd6f61020123d10d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.UShortArray,%20kotlin.Function2((kotlin.UShort,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right#kotlin.collections%24reduceRight(kotlin.UShortArray,%20kotlin.Function2((kotlin.UShort,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="c5718069e7b32adaf099cab7311ece2e9becee3b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.Array((kotlin.collections.reduceRightIndexed.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceRightIndexed.T,%20kotlin.collections.reduceRightIndexed.S,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.Array((kotlin.collections.reduceRightIndexed.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceRightIndexed.T,%20kotlin.collections.reduceRightIndexed.S,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="557621e1cefdaca0072bde8c62fc711a62f7399a" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.BooleanArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Boolean,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.BooleanArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Boolean,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="823c7c2e6476d097a9594f0f360e57630a3d5c4b" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.ByteArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Byte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.ByteArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Byte,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="7c0d007c06394cf35026f9f5bb38b38df5035ce2" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.CharArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.CharArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="004875c48fce8726cb422da0c815eb255a0771dd" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.DoubleArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Double,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.DoubleArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Double,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="3d1c1f6e0d68db8bba148861e0df1709c0474962" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.FloatArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Float,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.FloatArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Float,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="bdf22b6347fa7d5a65972c83ac691c2a27aad1d8" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.IntArray,%20kotlin.Function3((kotlin.Int,%20,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.IntArray,%20kotlin.Function3((kotlin.Int,%20,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="17d1eb12bd810f3472dd465c55976b40a4d7b495" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.LongArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Long,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.LongArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Long,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="30a76aa898b17b538970e4c554a6f1fc4fc8e024" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.ShortArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Short,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.ShortArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Short,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="77e9c2f8eb7b0772ce1a8e7e42075383ce55c95c" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.UByteArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UByte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.UByteArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UByte,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="adb1c51ebeb6dedbe2df0124edf10a5b3ed345d2" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.UIntArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UInt,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.UIntArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UInt,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="fcc733884f3462c2f63b299f3d57aa8b4e7261b7" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.ULongArray,%20kotlin.Function3((kotlin.Int,%20kotlin.ULong,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.ULongArray,%20kotlin.Function3((kotlin.Int,%20kotlin.ULong,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="3dd4f66deb41753e28f752f48658ab5b6d2a9444" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.UShortArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UShort,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.UShortArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UShort,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="7458f9bc8ce4dd598ede678f594ffc18f5b52441" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.Array((kotlin.collections.reduceRightIndexedOrNull.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceRightIndexedOrNull.T,%20kotlin.collections.reduceRightIndexedOrNull.S,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.Array((kotlin.collections.reduceRightIndexedOrNull.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceRightIndexedOrNull.T,%20kotlin.collections.reduceRightIndexedOrNull.S,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="cd093a5aca8e717f5b7a264eef05dd6e6a8e8b99" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.BooleanArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Boolean,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.BooleanArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Boolean,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="fba334d15d0894d9db4bb9d9d9f22a8d8bac29a2" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.ByteArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Byte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.ByteArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Byte,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="bdffdd7ed7bd31db50b7aa62928d4c2332a24548" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.CharArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.CharArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Char,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="4e9b51c4c9627841959ebadff36113379b5c111d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.DoubleArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Double,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.DoubleArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Double,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="2dbe862cc455d7e6b85a16373b24ee417b005d1e" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.FloatArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Float,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.FloatArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Float,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="768161119cadf235a8cfe34293bc41a3b90fd044" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.IntArray,%20kotlin.Function3((kotlin.Int,%20,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.IntArray,%20kotlin.Function3((kotlin.Int,%20,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="1f104740de40542694f86656095b1016cc65928a" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.LongArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Long,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.LongArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Long,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="11efd62c86c75430ad6d93d7dce05f9a791d0c13" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.ShortArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Short,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.ShortArray,%20kotlin.Function3((kotlin.Int,%20kotlin.Short,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="468e34431e85e40b691113235bf417c7d867a8a4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.UByteArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UByte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.UByteArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UByte,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="b6d9e2c539eed4eba8e71832fa8d6ffb047aecd9" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.UIntArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UInt,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.UIntArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UInt,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="3b3d5f4ac285d14adbee9110e83a7fe372d15ae1" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.ULongArray,%20kotlin.Function3((kotlin.Int,%20kotlin.ULong,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.ULongArray,%20kotlin.Function3((kotlin.Int,%20kotlin.ULong,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="953fa4addf123725adcb89eb4dc177f2b6ccdef5" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.UShortArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UShort,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../../kotlin.collections/reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.UShortArray,%20kotlin.Function3((kotlin.Int,%20kotlin.UShort,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="c4b0151c40f907f36051ac51e8bbf1605ab40265" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.Array((kotlin.collections.reduceRightOrNull.T)),%20kotlin.Function2((kotlin.collections.reduceRightOrNull.T,%20kotlin.collections.reduceRightOrNull.S,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.Array((kotlin.collections.reduceRightOrNull.T)),%20kotlin.Function2((kotlin.collections.reduceRightOrNull.T,%20kotlin.collections.reduceRightOrNull.S,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="5877719c0bf6159ab0fbcf8adf182a7222f97309" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.BooleanArray,%20kotlin.Function2((kotlin.Boolean,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.BooleanArray,%20kotlin.Function2((kotlin.Boolean,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="ce89aa485fc32fb91117011e7a21a80d37b4e4e3" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.ByteArray,%20kotlin.Function2((kotlin.Byte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.ByteArray,%20kotlin.Function2((kotlin.Byte,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="fe85f2e69821a7fd30b506d52c23c8202f4fcdcc" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.CharArray,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.CharArray,%20kotlin.Function2((kotlin.Char,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="34eb6afabb39d6282fa1844d028c78c09204877a" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.DoubleArray,%20kotlin.Function2((kotlin.Double,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.DoubleArray,%20kotlin.Function2((kotlin.Double,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="e637eb8d6c4cf5b521af006939c37b442e563dc6" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.FloatArray,%20kotlin.Function2((kotlin.Float,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.FloatArray,%20kotlin.Function2((kotlin.Float,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="c513f0ec28ceabb872c7aa5a4271de292243078f" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.IntArray,%20kotlin.Function2((kotlin.Int,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.IntArray,%20kotlin.Function2((kotlin.Int,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="408016b944f3a6d556842fc0161756bd94871487" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.LongArray,%20kotlin.Function2((kotlin.Long,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.LongArray,%20kotlin.Function2((kotlin.Long,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="c0d8334b5fb7d20bcc99ea060915c13ffd7363ff" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.ShortArray,%20kotlin.Function2((kotlin.Short,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.ShortArray,%20kotlin.Function2((kotlin.Short,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="05c04d3688bc0e6fb61490572e646e563cd55e7c" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.UByteArray,%20kotlin.Function2((kotlin.UByte,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.UByteArray,%20kotlin.Function2((kotlin.UByte,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="205db4e87d75ce8b42c368fbfca5523829632baf" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.UIntArray,%20kotlin.Function2((kotlin.UInt,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.UIntArray,%20kotlin.Function2((kotlin.UInt,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="ec80b1ed998f940722f2792d588c1e5805df1d07" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.ULongArray,%20kotlin.Function2((kotlin.ULong,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.ULongArray,%20kotlin.Function2((kotlin.ULong,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="94add6e8fa4ebc2c854887bb6b869b1e14625e8c" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.UShortArray,%20kotlin.Function2((kotlin.UShort,%20,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../../kotlin.collections/reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.UShortArray,%20kotlin.Function2((kotlin.UShort,%20,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="9a2729c8cb74bb138fde3bde087f589660bc2144" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../reduce-right#kotlin.collections%24reduceRight(kotlin.collections.List((kotlin.collections.reduceRight.T)),%20kotlin.Function2((kotlin.collections.reduceRight.T,%20kotlin.collections.reduceRight.S,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../reduce-right#kotlin.collections%24reduceRight(kotlin.collections.List((kotlin.collections.reduceRight.T)),%20kotlin.Function2((kotlin.collections.reduceRight.T,%20kotlin.collections.reduceRight.S,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="624128dc89fda85e9bdc2410cf8ae62b7ab254f4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.collections.List((kotlin.collections.reduceRightIndexed.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceRightIndexed.T,%20kotlin.collections.reduceRightIndexed.S,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original list and current accumulator value.</source>
          <target state="translated">마지막 요소로 시작하는 값을 누적 하고 원래 목록의 인덱스와 현재 누적 기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.collections.List((kotlin.collections.reduceRightIndexed.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceRightIndexed.T,%20kotlin.collections.reduceRightIndexed.S,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="5d8fd31cfa83f2c5542ba2bdd60e451c48152f8d" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.collections.List((kotlin.collections.reduceRightIndexedOrNull.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceRightIndexedOrNull.T,%20kotlin.collections.reduceRightIndexedOrNull.S,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original list and current accumulator value.</source>
          <target state="translated">마지막 요소로 시작하는 값을 누적 하고 원래 목록의 인덱스와 현재 누적 기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;../reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.collections.List((kotlin.collections.reduceRightIndexedOrNull.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceRightIndexedOrNull.T,%20kotlin.collections.reduceRightIndexedOrNull.S,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="1782aec491fa5a9a04c783ce410aa6ababca0385" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;../reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.collections.List((kotlin.collections.reduceRightOrNull.T)),%20kotlin.Function2((kotlin.collections.reduceRightOrNull.T,%20kotlin.collections.reduceRightOrNull.S,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;../reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.collections.List((kotlin.collections.reduceRightOrNull.T)),%20kotlin.Function2((kotlin.collections.reduceRightOrNull.T,%20kotlin.collections.reduceRightOrNull.S,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="607e38c1e17754e65f93fbfc5cbff2eb185d30c9" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;reduce-right#kotlin.collections%24reduceRight(kotlin.Array((kotlin.collections.reduceRight.T)),%20kotlin.Function2((kotlin.collections.reduceRight.T,%20kotlin.collections.reduceRight.S,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;reduce-right#kotlin.collections%24reduceRight(kotlin.Array((kotlin.collections.reduceRight.T)),%20kotlin.Function2((kotlin.collections.reduceRight.T,%20kotlin.collections.reduceRight.S,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="e7edba7233521c9e0e72833b803adcc93b1e70ac" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;reduce-right#kotlin.collections%24reduceRight(kotlin.collections.List((kotlin.collections.reduceRight.T)),%20kotlin.Function2((kotlin.collections.reduceRight.T,%20kotlin.collections.reduceRight.S,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;reduce-right#kotlin.collections%24reduceRight(kotlin.collections.List((kotlin.collections.reduceRight.T)),%20kotlin.Function2((kotlin.collections.reduceRight.T,%20kotlin.collections.reduceRight.S,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="24ed08a4436edf6bb2f2ba4b63a923d16d99dad7" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.Array((kotlin.collections.reduceRightIndexed.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceRightIndexed.T,%20kotlin.collections.reduceRightIndexed.S,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.Array((kotlin.collections.reduceRightIndexed.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceRightIndexed.T,%20kotlin.collections.reduceRightIndexed.S,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="5319f4791c38f23870ff7b06fb1022a5a187eb37" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.collections.List((kotlin.collections.reduceRightIndexed.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceRightIndexed.T,%20kotlin.collections.reduceRightIndexed.S,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original list and current accumulator value.</source>
          <target state="translated">마지막 요소로 시작하는 값을 누적 하고 원래 목록의 인덱스와 현재 누적 기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;reduce-right-indexed#kotlin.collections%24reduceRightIndexed(kotlin.collections.List((kotlin.collections.reduceRightIndexed.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceRightIndexed.T,%20kotlin.collections.reduceRightIndexed.S,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="3314005cab6a2267b63acb3abe32fea19247126a" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.Array((kotlin.collections.reduceRightIndexedOrNull.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceRightIndexedOrNull.T,%20kotlin.collections.reduceRightIndexedOrNull.S,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original array and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작 하여 원래 배열의 인덱스와 현재 누산기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.Array((kotlin.collections.reduceRightIndexedOrNull.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceRightIndexedOrNull.T,%20kotlin.collections.reduceRightIndexedOrNull.S,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="fb328ae8d7d60672972f9a156c2441a3a80367a4" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.collections.List((kotlin.collections.reduceRightIndexedOrNull.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceRightIndexedOrNull.T,%20kotlin.collections.reduceRightIndexedOrNull.S,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element with its index in the original list and current accumulator value.</source>
          <target state="translated">마지막 요소로 시작하는 값을 누적 하고 원래 목록의 인덱스와 현재 누적 기 값을 사용하여 오른쪽에서 왼쪽으로 각 요소에 &lt;a href=&quot;reduce-right-indexed-or-null#kotlin.collections%24reduceRightIndexedOrNull(kotlin.collections.List((kotlin.collections.reduceRightIndexedOrNull.T)),%20kotlin.Function3((kotlin.Int,%20kotlin.collections.reduceRightIndexedOrNull.T,%20kotlin.collections.reduceRightIndexedOrNull.S,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 적용 합니다.</target>
        </trans-unit>
        <trans-unit id="e19d65e8e216777241be26355a8b86f87e497504" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.Array((kotlin.collections.reduceRightOrNull.T)),%20kotlin.Function2((kotlin.collections.reduceRightOrNull.T,%20kotlin.collections.reduceRightOrNull.S,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.Array((kotlin.collections.reduceRightOrNull.T)),%20kotlin.Function2((kotlin.collections.reduceRightOrNull.T,%20kotlin.collections.reduceRightOrNull.S,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="5b2c6aae47d52bcedbae8fcf05ae5f0986408258" translate="yes" xml:space="preserve">
          <source>Accumulates value starting with the last element and applying &lt;a href=&quot;reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.collections.List((kotlin.collections.reduceRightOrNull.T)),%20kotlin.Function2((kotlin.collections.reduceRightOrNull.T,%20kotlin.collections.reduceRightOrNull.S,%20)))/operation&quot;&gt;operation&lt;/a&gt; from right to left to each element and current accumulator value.</source>
          <target state="translated">마지막 요소부터 시작하여 오른쪽에서 왼쪽으로 &lt;a href=&quot;reduce-right-or-null#kotlin.collections%24reduceRightOrNull(kotlin.collections.List((kotlin.collections.reduceRightOrNull.T)),%20kotlin.Function2((kotlin.collections.reduceRightOrNull.T,%20kotlin.collections.reduceRightOrNull.S,%20)))/operation&quot;&gt;연산&lt;/a&gt; 을 각 요소 및 현재 누산기 값에 적용하여 값을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="a09c687bbb2c9bfb995c338c48bb924a3f03aa8f" translate="yes" xml:space="preserve">
          <source>Activating CSS support in your project helps prevent common errors that occur when trying to use style sheets from an unconfigured project, such as &lt;code&gt;Module parse failed: Unexpected character '@' (14:0)&lt;/code&gt;.</source>
          <target state="translated">프로젝트에서 CSS 지원을 활성화하면 &lt;code&gt;Module parse failed: Unexpected character '@' (14:0)&lt;/code&gt; 과 같이 구성 되지 않은 프로젝트에서 스타일 시트를 사용하려고 할 때 발생하는 일반적인 오류를 방지하는 데 도움이됩니다 .</target>
        </trans-unit>
        <trans-unit id="f4c5ffba0be9c51825ab2529954ee8a0a0ced05b" translate="yes" xml:space="preserve">
          <source>Active coroutines that were launched in &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScope&lt;/a&gt; do not keep the process alive. They are like daemon threads.</source>
          <target state="translated">에서 시작된 활성 코 루틴 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html&quot;&gt;GlobalScope&lt;/a&gt; 은 프로세스를 유지하지 않습니다. 그것들은 데몬 스레드와 같습니다.</target>
        </trans-unit>
        <trans-unit id="3abb8b0e9f35e7145cfe58f15f4108a25b21c21c" translate="yes" xml:space="preserve">
          <source>Actively maintained code bases can benefit from getting bug fixes ASAP, without waiting for a full deprecation cycle to complete. Currently such project can enable the -progressive flag and get such fixes enabled even in incremental releases.</source>
          <target state="translated">적극적으로 유지 관리되는 코드 기반은 전체 지원 중단주기가 완료 될 때까지 기다리지 않고 최대한 빨리 버그 수정을받을 수 있습니다. 현재 이러한 프로젝트는 -progressive 플래그를 활성화하고 증분 릴리스에서도 이러한 수정을 활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="00adac1f2daf70a02054ff78cff9687a55edf4ad" translate="yes" xml:space="preserve">
          <source>Actor is more efficient than locking under load, because in this case it always has work to do and it does not have to switch to a different context at all.</source>
          <target state="translated">액터는로드시 잠금보다 효율적입니다.이 경우 항상해야 할 작업이 있고 다른 컨텍스트로 전환 할 필요가 없기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="a70d36e754fb82756c6d5927519109a37d91e98d" translate="yes" xml:space="preserve">
          <source>Actors</source>
          <target state="translated">Actors</target>
        </trans-unit>
        <trans-unit id="04592fb8dca5734167a395e1dd811c37905424a8" translate="yes" xml:space="preserve">
          <source>Actual number of bits available in the set. All bits with indices &amp;gt;= size assumed to be 0</source>
          <target state="translated">세트에서 사용 가능한 실제 비트 수. 인덱스가&amp;gt; = 크기 인 모든 비트는 0으로 가정</target>
        </trans-unit>
        <trans-unit id="4369b83bee66c2a1bd8100251217d1329ea41122" translate="yes" xml:space="preserve">
          <source>Actually these two functions do just the same thing, so we can have a generic version, &lt;code&gt;initTag&lt;/code&gt;:</source>
          <target state="translated">실제로이 두 함수는 동일한 기능을 수행하므로 일반적인 버전 인 &lt;code&gt;initTag&lt;/code&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c0f89f582667229635ae4f7e695b5af22484d989" translate="yes" xml:space="preserve">
          <source>Add &lt;strong&gt;kotlin.code.style official&lt;/strong&gt; property to root &lt;strong&gt;pom.xml&lt;/strong&gt; project file.</source>
          <target state="translated">루트 &lt;strong&gt;pom.xml에 &lt;/strong&gt;&lt;strong&gt;kotlin.code.style 공식&lt;/strong&gt; 속성 추가&lt;strong&gt;&lt;/strong&gt; 프로젝트 파일에 하십시오.</target>
        </trans-unit>
        <trans-unit id="7ba959e083cc8770cbebce17d0147a253f783896" translate="yes" xml:space="preserve">
          <source>Add &lt;strong&gt;kotlin.code.style&lt;/strong&gt;=&lt;strong&gt;official&lt;/strong&gt; property to the &lt;strong&gt;gradle.properties&lt;/strong&gt; file at the project root and commit the file to VCS.</source>
          <target state="translated">&lt;strong&gt;kotlin.code.style&lt;/strong&gt; = &lt;strong&gt;official&lt;/strong&gt; 속성을 프로젝트 루트 의 &lt;strong&gt;gradle.properties&lt;/strong&gt; 파일에 추가 하고 파일을 VCS에 커밋하십시오.</target>
        </trans-unit>
        <trans-unit id="246d80b61e5693cba72b319b61ffa57f3a904f91" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;button&lt;/code&gt; element with an &lt;code&gt;onClickFunction&lt;/code&gt; event handler.</source>
          <target state="translated">&lt;code&gt;onClickFunction&lt;/code&gt; 이벤트 핸들러 로 &lt;code&gt;button&lt;/code&gt; 요소를 추가 합니다.</target>
        </trans-unit>
        <trans-unit id="a373b60ac7ed71ac1882d44ba7cb6e699302efbd" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;div&lt;/code&gt; container with a child image element &lt;code&gt;img&lt;/code&gt; after the &lt;code&gt;styledInput&lt;/code&gt; block.</source>
          <target state="translated">&lt;code&gt;styledInput&lt;/code&gt; 블록 뒤에 자식 이미지 요소 &lt;code&gt;img&lt;/code&gt; 가 있는 &lt;code&gt;div&lt;/code&gt; 컨테이너를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="aaba3f66519d0126b6b2e68afa303effe9c2a876" translate="yes" xml:space="preserve">
          <source>Add a button that changes text</source>
          <target state="translated">텍스트를 변경하는 버튼 추가</target>
        </trans-unit>
        <trans-unit id="e480e28d840baddb91e16c3a266ee13dfec7b764" translate="yes" xml:space="preserve">
          <source>Add a call to the &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/buffer.html&quot;&gt;&lt;code&gt;buffer()&lt;/code&gt;&lt;/a&gt; function to run the emitter and collector concurrently. &lt;code&gt;buffer()&lt;/code&gt; stores emitted values and runs the flow collector in a separate coroutine.</source>
          <target state="translated">이미 터와 콜렉터를 동시에 실행하려면 &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/buffer.html&quot;&gt; &lt;code&gt;buffer()&lt;/code&gt; &lt;/a&gt; 함수에 대한 호출을 추가하십시오 . &lt;code&gt;buffer()&lt;/code&gt; 는 방출 된 값을 저장하고 별도의 코 루틴에서 흐름 수집기를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="bc3f4991e5ee783760f909aa50f995c3d45c8128" translate="yes" xml:space="preserve">
          <source>Add a concurrently running coroutine</source>
          <target state="translated">동시에 실행되는 코 루틴 추가</target>
        </trans-unit>
        <trans-unit id="8a02943ea9ffa4dcc33c4ecaa2b6265053890d81" translate="yes" xml:space="preserve">
          <source>Add a dependency between a Kotlin Pod and Xcode project with one target</source>
          <target state="translated">하나의 대상이있는 Kotlin Pod와 Xcode 프로젝트간에 종속성 추가</target>
        </trans-unit>
        <trans-unit id="4dc8cd15c943cb2b0ff772e880cbd478faf6e004" translate="yes" xml:space="preserve">
          <source>Add a dependency between a Kotlin Pod with an Xcode project with several targets</source>
          <target state="translated">여러 대상이있는 Xcode 프로젝트가있는 Kotlin Pod간에 종속성 추가</target>
        </trans-unit>
        <trans-unit id="b5da552eb0476a265d707572ffe96221acb3cb63" translate="yes" xml:space="preserve">
          <source>Add a dependency on a Pod library from the CocoaPods repository</source>
          <target state="translated">CocoaPods 저장소에서 Pod 라이브러리에 대한 종속성 추가</target>
        </trans-unit>
        <trans-unit id="98d1d0ad8770023889a95c819baec4593a336790" translate="yes" xml:space="preserve">
          <source>Add a dependency on a Pod library stored locally</source>
          <target state="translated">로컬에 저장된 Pod 라이브러리에 대한 종속성 추가</target>
        </trans-unit>
        <trans-unit id="7453f304f47b716a7a9816fa35875cf89e686710" translate="yes" xml:space="preserve">
          <source>Add a dependency on a Pod library stored locally with &lt;code&gt;pod()&lt;/code&gt; to &lt;code&gt;build.gradle.kts&lt;/code&gt; (&lt;code&gt;build.gradle&lt;/code&gt;) of your project.</source>
          <target state="translated">로컬로 저장된 포드 라이브러리에 종속성을 추가 &lt;code&gt;pod()&lt;/code&gt; 에 &lt;code&gt;build.gradle.kts&lt;/code&gt; ( &lt;code&gt;build.gradle&lt;/code&gt; 프로젝트의).</target>
        </trans-unit>
        <trans-unit id="02f678e43ea3bd3e0206c7ebf3764d22ff84c53c" translate="yes" xml:space="preserve">
          <source>Add a line of code to print out 'Hello, World!'.</source>
          <target state="translated">코드 행을 추가하여 'Hello, World!'를 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="dd0d2c2da242124bf0f6ff7cd9aafab69fbf3e4e" translate="yes" xml:space="preserve">
          <source>Add a reference to the generated podspec in a Podfile of the Xcode project.</source>
          <target state="translated">Xcode 프로젝트의 Podfile에 생성 된 podspec에 대한 참조를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="471785d1ac7e05248780d4e8eb1ea99374b5e20c" translate="yes" xml:space="preserve">
          <source>Add a simple line of Kotlin code to print a message:</source>
          <target state="translated">간단한 Kotlin 코드 행을 추가하여 메시지를 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="7346415052094bb10f7701a068e5d194a8353c5f" translate="yes" xml:space="preserve">
          <source>Add an execution of the &lt;code&gt;kapt&lt;/code&gt; goal from kotlin-maven-plugin before &lt;code&gt;compile&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;compile&lt;/code&gt; 하기 전에 kotlin-maven-plugin에서 &lt;code&gt;kapt&lt;/code&gt; 목표 실행을 추가하십시오. .</target>
        </trans-unit>
        <trans-unit id="739743f63036863f4748b852175b427d8e844a91" translate="yes" xml:space="preserve">
          <source>Add an image</source>
          <target state="translated">이미지 추가</target>
        </trans-unit>
        <trans-unit id="0958c7e95af97cd8c6adb2fc530a4fe1e827b435" translate="yes" xml:space="preserve">
          <source>Add code to read the input. Use the &lt;a href=&quot;../../../api/latest/jvm/stdlib/kotlin.io/read-line&quot;&gt;&lt;code&gt;readLine()&lt;/code&gt;&lt;/a&gt; function to read the input value and assign it to the &lt;code&gt;name&lt;/code&gt; variable.</source>
          <target state="translated">입력을 읽는 코드를 추가하십시오. &lt;a href=&quot;../../../api/latest/jvm/stdlib/kotlin.io/read-line&quot;&gt; &lt;code&gt;readLine()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 입력 값을 읽고 &lt;code&gt;name&lt;/code&gt; 변수에 할당합니다 .</target>
        </trans-unit>
        <trans-unit id="5aa237cc85151faa4b6117283d2b6fc8f70c3073" translate="yes" xml:space="preserve">
          <source>Add dependencies</source>
          <target state="translated">종속성 추가</target>
        </trans-unit>
        <trans-unit id="70efcc5084b2afab5d22f05ba09f5b5fc516f7da" translate="yes" xml:space="preserve">
          <source>Add dependencies on Pod libraries</source>
          <target state="translated">Pod 라이브러리에 대한 종속성 추가</target>
        </trans-unit>
        <trans-unit id="cf74b7856244c595ac97a47e7f42c10db1adb6f2" translate="yes" xml:space="preserve">
          <source>Add dependencies on a Pod library that you want to use from the CocoaPods repository with &lt;code&gt;pod()&lt;/code&gt; to &lt;code&gt;build.gradle.kts&lt;/code&gt; (&lt;code&gt;build.gradle&lt;/code&gt;) of your project.</source>
          <target state="translated">&lt;code&gt;pod()&lt;/code&gt; 를 사용하여 CocoaPods 저장소에서 사용하려는 Pod 라이브러리에 대한 종속성을 프로젝트의 &lt;code&gt;build.gradle.kts&lt;/code&gt; ( &lt;code&gt;build.gradle&lt;/code&gt; )에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="ef420798e551fad8fc494cdc8fe82bac55d75e38" translate="yes" xml:space="preserve">
          <source>Add dependencies to the Pod libraries that you want to use in your project with &lt;code&gt;pod()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pod()&lt;/code&gt; 를 사용하여 프로젝트에서 사용하려는 Pod 라이브러리에 종속성을 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="f4921b3b94f4ec68631dffd9671cc6f32f996f2d" translate="yes" xml:space="preserve">
          <source>Add more lessons and tasks via the &lt;strong&gt;File Menu -&amp;gt; New&lt;/strong&gt;, drag-n-drop items to reorder them, or to rename items right-click them then in the menu use &lt;strong&gt;Refactor -&amp;gt; Rename&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;파일 메뉴-&amp;gt; 새로 만들기&lt;/strong&gt; 를 통해 더 많은 레슨과 작업을 추가하고 항목을 끌어다 놓거나 항목의 이름을 바꾸려면 마우스 오른쪽 버튼으로 클릭 한 다음 메뉴에서 &lt;strong&gt;리 팩터-&amp;gt; 이름 바꾸기를 사용하십시오&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="767680cec0491d241af4519fc2181e25a59c6bb5" translate="yes" xml:space="preserve">
          <source>Add sample code from &lt;a href=&quot;https://play.kotlinlang.org/byExample/overview&quot;&gt;Kotlin examples&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://play.kotlinlang.org/byExample/overview&quot;&gt;Kotlin 예제&lt;/a&gt; 에서 샘플 코드 추가</target>
        </trans-unit>
        <trans-unit id="87b11912decccbb3187080daac143bf2a1b352ce" translate="yes" xml:space="preserve">
          <source>Add the JSON serialization library dependency:&lt;code&gt;org.jetbrains.kotlinx:kotlinx-serialization-core:1.0.1&lt;/code&gt;</source>
          <target state="translated">JSON 직렬화 라이브러리 종속성 추가 : &lt;code&gt;org.jetbrains.kotlinx:kotlinx-serialization-core:1.0.1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f33af832a54532da16a0ec6647df0fe4497a8e9c" translate="yes" xml:space="preserve">
          <source>Add the annotation processor dependencies to the &lt;code&gt;kapt*&lt;/code&gt; configurations manually as described &lt;a href=&quot;#using-in-gradle&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#using-in-gradle&quot;&gt;위에서&lt;/a&gt; 설명한대로 주석 프로세서 종속성을 &lt;code&gt;kapt*&lt;/code&gt; 구성에 수동으로 추가 .</target>
        </trans-unit>
        <trans-unit id="56a98ecf1e7af55d674a1a44a49424ee5394284b" translate="yes" xml:space="preserve">
          <source>Add the content of the specified file to the beginning of the output file.</source>
          <target state="translated">지정된 파일의 내용을 출력 파일의 시작 부분에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="93f096617eabfca5c9052c273b60a34de5d57579" translate="yes" xml:space="preserve">
          <source>Add the content of the specified file to the end of the output file.</source>
          <target state="translated">지정된 파일의 내용을 출력 파일 끝에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="006b79449578682f54fc8b6391a55843f4aa25dc" translate="yes" xml:space="preserve">
          <source>Add the corresponding dependencies on test libraries:</source>
          <target state="translated">테스트 라이브러리에 대한 해당 종속성을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="3902fa97172e8fe3bc1017aa0347bf08bd119f8d" translate="yes" xml:space="preserve">
          <source>Add the following line to the &lt;code&gt;gradle.properties&lt;/code&gt; or &lt;code&gt;local.properties&lt;/code&gt; file:</source>
          <target state="translated">&lt;code&gt;gradle.properties&lt;/code&gt; 또는 &lt;code&gt;local.properties&lt;/code&gt; 파일에 다음 줄을 추가 합니다.</target>
        </trans-unit>
        <trans-unit id="c11febe4e6b61684586c3939eb661722115a25ce" translate="yes" xml:space="preserve">
          <source>Add the intermediate source set &lt;code&gt;desktopMain&lt;/code&gt; that holds the shared logic for these targets.</source>
          <target state="translated">이러한 대상에 대한 공유 논리를 보유 하는 중간 소스 세트 &lt;code&gt;desktopMain&lt;/code&gt; 을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="ad1165571d352aad6c983477bba8c195924c4aff" translate="yes" xml:space="preserve">
          <source>Add the name and path of the Kotlin Pod you want to include in the Xcode project to &lt;code&gt;Podfile&lt;/code&gt;.</source>
          <target state="translated">Xcode 프로젝트에 포함하려는 Kotlin Pod의 이름과 경로를 &lt;code&gt;Podfile&lt;/code&gt; 에 추가 합니다.</target>
        </trans-unit>
        <trans-unit id="f6bcf5185ee35dd28747d283e8bfa97d6cd95a1b" translate="yes" xml:space="preserve">
          <source>Add the name and path of the Kotlin Pod you want to include in the Xcode project to the &lt;code&gt;Podfile&lt;/code&gt;.</source>
          <target state="translated">Xcode 프로젝트에 포함 할 Kotlin Pod의 이름과 경로를 &lt;code&gt;Podfile&lt;/code&gt; 에 추가 합니다.</target>
        </trans-unit>
        <trans-unit id="b5d4cb683853c1f4452932d838fd8459cd0dcb80" translate="yes" xml:space="preserve">
          <source>Add the path to your Xcode project &lt;code&gt;Podfile&lt;/code&gt; with &lt;code&gt;podfile = project.file(..)&lt;/code&gt; to &lt;code&gt;build.gradle.kts&lt;/code&gt; (&lt;code&gt;build.gradle&lt;/code&gt;) of your Kotlin project.</source>
          <target state="translated">엑스 코드 프로젝트에 경로를 추가 &lt;code&gt;Podfile&lt;/code&gt; 와 &lt;code&gt;podfile = project.file(..)&lt;/code&gt; 에 &lt;code&gt;build.gradle.kts&lt;/code&gt; ( &lt;code&gt;build.gradle&lt;/code&gt; 당신의 코 틀린 프로젝트).</target>
        </trans-unit>
        <trans-unit id="1e38921f3eb8c27ece2cd44e577a73147c7f662a" translate="yes" xml:space="preserve">
          <source>Add the plugin and specify the list of annotations that must lead to generating a no-arg constructor for the annotated classes.</source>
          <target state="translated">플러그인을 추가하고 어노테이션이있는 클래스에 대해 인수 없음 생성자를 생성해야하는 어노테이션 목록을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="738ee18db4d771d438e3c8008687b5c70e0ea168" translate="yes" xml:space="preserve">
          <source>Add the plugin artifact to the buildscript dependencies and apply the plugin:</source>
          <target state="translated">플러그인 아티팩트를 빌드 스크립트 종속성에 추가하고 플러그인을 적용하십시오.</target>
        </trans-unit>
        <trans-unit id="38198b5e3cc41904739ad23c66c822471775fb8a" translate="yes" xml:space="preserve">
          <source>Add the specified prefix to paths in the source map</source>
          <target state="translated">소스 맵의 경로에 지정된 접두사 추가</target>
        </trans-unit>
        <trans-unit id="435144f6a88f8da84c1f472b2859205bc1410533" translate="yes" xml:space="preserve">
          <source>Add the specified prefix to paths in the source map.</source>
          <target state="translated">소스 맵의 경로에 지정된 접두사를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="baa4b1829f69c5bb2c3e15b0db0cee54ef29ab09" translate="yes" xml:space="preserve">
          <source>Add the target platforms and modules by clicking the + icon.</source>
          <target state="translated">+ 아이콘을 클릭하여 대상 플랫폼 및 모듈을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="429bd79e4d7afcdb7a582ba668f3a049845bba70" translate="yes" xml:space="preserve">
          <source>AddEventListenerOptions</source>
          <target state="translated">AddEventListenerOptions</target>
        </trans-unit>
        <trans-unit id="48a693c488b52c7622e71649b73d13071bdd0d6c" translate="yes" xml:space="preserve">
          <source>Adding</source>
          <target state="translated">Adding</target>
        </trans-unit>
        <trans-unit id="9cc810226959370d16a93633227e1104c8d32e9a" translate="yes" xml:space="preserve">
          <source>Adding Dependencies</source>
          <target state="translated">의존성 추가</target>
        </trans-unit>
        <trans-unit id="57a338dc4313cdd504cf1c98b5c4e748094f2676" translate="yes" xml:space="preserve">
          <source>Adding Java classes to a Kotlin project is pretty straightforward. All you need to do is create a new Java file (&lt;strong&gt;Alt + Insert&lt;/strong&gt;/&lt;strong&gt;Cmd + N&lt;/strong&gt;) in the correct directory or package.</source>
          <target state="translated">Kotlin 프로젝트에 Java 클래스를 추가하는 것은 매우 간단합니다. 새 Java 파일을 작성하기 만하면됩니다 ( &lt;strong&gt;Alt + Insert&lt;/strong&gt; / &lt;strong&gt;Cmd + N&lt;/strong&gt;올바른 디렉토리 또는 패키지에 )을 작성하기 됩니다.</target>
        </trans-unit>
        <trans-unit id="d08aabec8aefc55b447b7b51ddee0688b8ce235c" translate="yes" xml:space="preserve">
          <source>Adding Java source code to an existing Kotlin project</source>
          <target state="translated">기존 Kotlin 프로젝트에 Java 소스 코드 추가</target>
        </trans-unit>
        <trans-unit id="0519c648909c184e89e4974045e273095b2e5c16" translate="yes" xml:space="preserve">
          <source>Adding Kotlin Sources</source>
          <target state="translated">코 틀린 소스 추가</target>
        </trans-unit>
        <trans-unit id="5d6f0fb8b07defeee90c4cdda730e4458c912a87" translate="yes" xml:space="preserve">
          <source>Adding Kotlin source code to an existing Java project</source>
          <target state="translated">기존 Java 프로젝트에 Kotlin 소스 코드 추가</target>
        </trans-unit>
        <trans-unit id="f955ff61343bd8ffc8899cb7cc2853f9acda8f6b" translate="yes" xml:space="preserve">
          <source>Adding a Kotlin file to an existing Java project is pretty much the same process.</source>
          <target state="translated">기존 Java 프로젝트에 Kotlin 파일을 추가하는 과정은 거의 동일합니다.</target>
        </trans-unit>
        <trans-unit id="a278e4cebb3761c84aff87b367c1ca68040289ee" translate="yes" xml:space="preserve">
          <source>Adding and updating entries</source>
          <target state="translated">항목 추가 및 업데이트</target>
        </trans-unit>
        <trans-unit id="49c977c763dc71842e07fc7ff077e0cf56f0cb91" translate="yes" xml:space="preserve">
          <source>Adding attributes is done symmetrically, to both the library and the consumer projects. For example, consider a testing library that supports both JUnit and TestNG in the two targets. The library author needs to add an attribute to both targets as follows:</source>
          <target state="translated">속성 추가는 라이브러리와 소비자 프로젝트 모두에 대칭 적으로 수행됩니다. 예를 들어 두 대상에서 JUnit과 TestNG를 모두 지원하는 테스트 라이브러리를 생각해보십시오. 라이브러리 작성자는 다음과 같이 두 대상 모두에 속성을 추가해야합니다.</target>
        </trans-unit>
        <trans-unit id="f1542ac2399ec9bacdfe372cc0c60f0b976750d8" translate="yes" xml:space="preserve">
          <source>Adding custom declarations</source>
          <target state="translated">맞춤 선언 추가</target>
        </trans-unit>
        <trans-unit id="4f9517274a1469e28c5c98183ae9f9ad230e00f6" translate="yes" xml:space="preserve">
          <source>Adding dependencies</source>
          <target state="translated">의존성 추가</target>
        </trans-unit>
        <trans-unit id="d79c304e6e11cc13b07c741e106d20cc8c17e52b" translate="yes" xml:space="preserve">
          <source>Adding elements</source>
          <target state="translated">요소 추가</target>
        </trans-unit>
        <trans-unit id="9b1cb23b7fa35c61b8dba1b19ab6657eb9938b67" translate="yes" xml:space="preserve">
          <source>Adding new warnings.</source>
          <target state="translated">새로운 경고 추가.</target>
        </trans-unit>
        <trans-unit id="47a8d0d2adc6e05db8f76205ef450cad2a924e83" translate="yes" xml:space="preserve">
          <source>Additional attributes of the annotation can be specified by annotating the annotation class with meta-annotations:</source>
          <target state="translated">주석 클래스에 메타 주석을 달아 주석의 추가 속성을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eca85007a2790adbf09e0632e333804a680a6ec3" translate="yes" xml:space="preserve">
          <source>Additional compiler arguments</source>
          <target state="translated">추가 컴파일러 인수</target>
        </trans-unit>
        <trans-unit id="8a4596a526216397db95b37505ef813871a5e89f" translate="yes" xml:space="preserve">
          <source>Additional effects: &lt;code&gt;also&lt;/code&gt;</source>
          <target state="translated">추가 효과 : &lt;code&gt;also&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a6dc64de0bb5de47fc27a67225d4459754dd531" translate="yes" xml:space="preserve">
          <source>Additional options and arguments for the compiler can be specified as tags under the &lt;code&gt;&amp;lt;configuration&amp;gt;&lt;/code&gt; element of the Maven plugin node:</source>
          <target state="translated">컴파일러에 대한 추가 옵션 및 인수는 &lt;code&gt;&amp;lt;configuration&amp;gt;&lt;/code&gt; 에서 태그로 지정할 수 있습니다 는 Maven 플러그인 노드 요소에서 .</target>
        </trans-unit>
        <trans-unit id="a929fb9227249cecceb27e2eb2fb9ec269e3975a" translate="yes" xml:space="preserve">
          <source>Additional packages are imported depending on the target platform:</source>
          <target state="translated">대상 플랫폼에 따라 추가 패키지를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="b3a1072bb52afbe0d5e64edc701aed4aa28398e4" translate="yes" xml:space="preserve">
          <source>Additional references</source>
          <target state="translated">추가 참조</target>
        </trans-unit>
        <trans-unit id="c7bf6165f7d7c7bfd4be29b03c9760813f5b1e7a" translate="yes" xml:space="preserve">
          <source>Additionally, in the &lt;code&gt;all-compatibility&lt;/code&gt; mode you can use &lt;code&gt;@JvmDefaultWithoutCompatibility&lt;/code&gt; to annotate all interfaces which are not exposed in the public API and therefore aren&amp;rsquo;t used by the existing clients.</source>
          <target state="translated">또한 &lt;code&gt;all-compatibility&lt;/code&gt; 모드에서 &lt;code&gt;@JvmDefaultWithoutCompatibility&lt;/code&gt; 를 사용 하여 공용 API에 노출되지 않아 기존 클라이언트에서 사용하지 않는 모든 인터페이스에 주석을 달 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7c87f6bd9c420068886f8dcf65b22597b2cd879a" translate="yes" xml:space="preserve">
          <source>Additionally, source sets can depend on each other and for a hierarchy. In this case, the &lt;a href=&quot;#source-set-parameters&quot;&gt;dependsOn()&lt;/a&gt; relation is used.</source>
          <target state="translated">또한 소스 세트는 서로 종속 될 수 있으며 계층 구조에 대해 달라질 수 있습니다. 이 경우에는 &lt;a href=&quot;#source-set-parameters&quot;&gt;dependentOn ()&lt;/a&gt; 관계가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="d210d368d99ba057a86b468711ad4906226aba77" translate="yes" xml:space="preserve">
          <source>Additionally, the members generation follows these rules with regard to the members inheritance:</source>
          <target state="translated">또한 멤버 생성은 멤버 상속과 관련하여 다음 규칙을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="46f43d23ca2e5c6253ce970266969226371b97e9" translate="yes" xml:space="preserve">
          <source>Additionally, there are advanced summation functions that take a function and return the sum of its return values on all elements:</source>
          <target state="translated">또한 모든 요소에 대해 함수를 가져오고 그 반환 값의 합계를 반환하는 고급 합계 함수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="80e625a57376840152dac2d2839d6553b117c20e" translate="yes" xml:space="preserve">
          <source>Additionally, there are new functions for conversions between &lt;code&gt;CharArray&lt;/code&gt;/&lt;code&gt;ByteArray&lt;/code&gt; and &lt;code&gt;String&lt;/code&gt;:</source>
          <target state="translated">또한 &lt;code&gt;CharArray&lt;/code&gt; / &lt;code&gt;ByteArray&lt;/code&gt; 및 &lt;code&gt;String&lt;/code&gt; 간의 변환을위한 새로운 함수가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8d1411a17019a4362541b4f1d1de4cdff92cbc07" translate="yes" xml:space="preserve">
          <source>Additionally, when you pass the context object as an argument, you can provide a custom name for the context object inside the scope.</source>
          <target state="translated">또한 컨텍스트 개체를 인수로 전달할 때 범위 내에서 컨텍스트 개체의 사용자 지정 이름을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e4307719b1222dc48b265e4903fd4a9d62612412" translate="yes" xml:space="preserve">
          <source>Additionally, you can check if the collection contains any elements by calling &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/is-empty&quot;&gt;&lt;code&gt;isEmpty()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/is-not-empty&quot;&gt;&lt;code&gt;isNotEmpty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">또한 &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/is-empty&quot;&gt; &lt;code&gt;isEmpty()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../api/latest/jvm/stdlib/kotlin.collections/is-not-empty&quot;&gt; &lt;code&gt;isNotEmpty()&lt;/code&gt; &lt;/a&gt; 호출하여 컬렉션에 요소가 포함되어 있는지 확인할 수 있습니다. .</target>
        </trans-unit>
        <trans-unit id="11700d7e1d24d0f1399d6559cb017767b1c6e056" translate="yes" xml:space="preserve">
          <source>Additionally, you can ignore the return value and use a scope function to create a temporary scope for variables.</source>
          <target state="translated">또한 반환 값을 무시하고 범위 함수를 사용하여 변수의 임시 범위를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c1516b2d3f0972c53d8e99bff8b4e60a5b8f5379" translate="yes" xml:space="preserve">
          <source>Additionally, you can provide a &lt;code&gt;message&lt;/code&gt; to inform API users about special condition of using the API. The compiler will show it to users that use the API without opt-in.</source>
          <target state="translated">또한 API 사용의 특수한 조건에 대해 API 사용자에게 알리는 &lt;code&gt;message&lt;/code&gt; 를 제공 할 수 있습니다 . 컴파일러는 옵트 인없이 API를 사용하는 사용자에게이를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="f5d299df4ac0870b310c5b93124b7da5b3fa17cf" translate="yes" xml:space="preserve">
          <source>Adds &lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;relative&lt;/a&gt; file to this, considering this as a directory. If &lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;relative&lt;/a&gt; has a root, &lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;relative&lt;/a&gt; is returned back. For instance, &lt;code&gt;File(&quot;/foo/bar&quot;).resolve(File(&quot;gav&quot;))&lt;/code&gt; is &lt;code&gt;File(&quot;/foo/bar/gav&quot;)&lt;/code&gt;. This function is complementary with &lt;a href=&quot;relative-to&quot;&gt;relativeTo&lt;/a&gt;, so &lt;code&gt;f.resolve(g.relativeTo(f)) == g&lt;/code&gt; should be always &lt;code&gt;true&lt;/code&gt; except for different roots case.</source>
          <target state="translated">이것을 디렉토리로 고려하여 이것에 &lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;상대&lt;/a&gt; 파일을 추가합니다 . 경우 &lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;상대가&lt;/a&gt; 루트를 가지고, &lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;상대는&lt;/a&gt; 다시 반환됩니다. 예를 들어 &lt;code&gt;File(&quot;/foo/bar&quot;).resolve(File(&quot;gav&quot;))&lt;/code&gt; 는 &lt;code&gt;File(&quot;/foo/bar/gav&quot;)&lt;/code&gt; 입니다. 이 함수는 &lt;a href=&quot;relative-to&quot;&gt;relativeTo를&lt;/a&gt; 보완 하므로 &lt;code&gt;f.resolve(g.relativeTo(f)) == g&lt;/code&gt; 는 항상 &lt;code&gt;true&lt;/code&gt; 이어야 합니다 다른 근을 제외하고는 .</target>
        </trans-unit>
        <trans-unit id="ed010e865c2ef1c9ec89bc15490d8865ad3580b3" translate="yes" xml:space="preserve">
          <source>Adds &lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;relative&lt;/a&gt; name to this, considering this as a directory. If &lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;relative&lt;/a&gt; has a root, &lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;relative&lt;/a&gt; is returned back. For instance, &lt;code&gt;File(&quot;/foo/bar&quot;).resolve(&quot;gav&quot;)&lt;/code&gt; is &lt;code&gt;File(&quot;/foo/bar/gav&quot;)&lt;/code&gt;.</source>
          <target state="translated">이것을 디렉토리로 고려하여 이것에 &lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;상대적인&lt;/a&gt; 이름을 추가합니다 . 경우 &lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;상대가&lt;/a&gt; 루트를 가지고, &lt;a href=&quot;resolve#kotlin.io%24resolve%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;상대는&lt;/a&gt; 다시 반환됩니다. 예를 들어 &lt;code&gt;File(&quot;/foo/bar&quot;).resolve(&quot;gav&quot;)&lt;/code&gt; 는 &lt;code&gt;File(&quot;/foo/bar/gav&quot;)&lt;/code&gt; 입니다. 입니다.</target>
        </trans-unit>
        <trans-unit id="8e8bb941b7f234bb389c918c3aecbc21e8fdc347" translate="yes" xml:space="preserve">
          <source>Adds &lt;a href=&quot;resolve#kotlin.io%24resolve(java.io.File,%20java.io.File)/relative&quot;&gt;relative&lt;/a&gt; file to this, considering this as a directory. If &lt;a href=&quot;resolve#kotlin.io%24resolve(java.io.File,%20java.io.File)/relative&quot;&gt;relative&lt;/a&gt; has a root, &lt;a href=&quot;resolve#kotlin.io%24resolve(java.io.File,%20java.io.File)/relative&quot;&gt;relative&lt;/a&gt; is returned back. For instance, &lt;code&gt;File(&quot;/foo/bar&quot;).resolve(File(&quot;gav&quot;))&lt;/code&gt; is &lt;code&gt;File(&quot;/foo/bar/gav&quot;)&lt;/code&gt;. This function is complementary with &lt;a href=&quot;relative-to&quot;&gt;relativeTo&lt;/a&gt;, so &lt;code&gt;f.resolve(g.relativeTo(f)) == g&lt;/code&gt; should be always &lt;code&gt;true&lt;/code&gt; except for different roots case.</source>
          <target state="translated">디렉토리로 간주하여 여기에 &lt;a href=&quot;resolve#kotlin.io%24resolve(java.io.File,%20java.io.File)/relative&quot;&gt;상대&lt;/a&gt; 파일을 추가합니다 . 경우 &lt;a href=&quot;resolve#kotlin.io%24resolve(java.io.File,%20java.io.File)/relative&quot;&gt;상대가&lt;/a&gt; 루트를 가지고, &lt;a href=&quot;resolve#kotlin.io%24resolve(java.io.File,%20java.io.File)/relative&quot;&gt;상대는&lt;/a&gt; 다시 반환됩니다. 예를 들어, &lt;code&gt;File(&quot;/foo/bar&quot;).resolve(File(&quot;gav&quot;))&lt;/code&gt; 는 &lt;code&gt;File(&quot;/foo/bar/gav&quot;)&lt;/code&gt; 입니다. 이 함수와 상보 &lt;a href=&quot;relative-to&quot;&gt;는 relativeTo&lt;/a&gt; 있도록 &lt;code&gt;f.resolve(g.relativeTo(f)) == g&lt;/code&gt; 항상 있어야 &lt;code&gt;true&lt;/code&gt; 다른 뿌리 케이스 제외.</target>
        </trans-unit>
        <trans-unit id="f4c187cfad0903b20a7fffc5bc8ba5dbc2ab0ef4" translate="yes" xml:space="preserve">
          <source>Adds &lt;a href=&quot;resolve#kotlin.io%24resolve(java.io.File,%20kotlin.String)/relative&quot;&gt;relative&lt;/a&gt; name to this, considering this as a directory. If &lt;a href=&quot;resolve#kotlin.io%24resolve(java.io.File,%20kotlin.String)/relative&quot;&gt;relative&lt;/a&gt; has a root, &lt;a href=&quot;resolve#kotlin.io%24resolve(java.io.File,%20kotlin.String)/relative&quot;&gt;relative&lt;/a&gt; is returned back. For instance, &lt;code&gt;File(&quot;/foo/bar&quot;).resolve(&quot;gav&quot;)&lt;/code&gt; is &lt;code&gt;File(&quot;/foo/bar/gav&quot;)&lt;/code&gt;.</source>
          <target state="translated">이것을 디렉토리로 간주하여 여기에 &lt;a href=&quot;resolve#kotlin.io%24resolve(java.io.File,%20kotlin.String)/relative&quot;&gt;상대&lt;/a&gt; 이름을 추가합니다 . 경우 &lt;a href=&quot;resolve#kotlin.io%24resolve(java.io.File,%20kotlin.String)/relative&quot;&gt;상대가&lt;/a&gt; 루트를 가지고, &lt;a href=&quot;resolve#kotlin.io%24resolve(java.io.File,%20kotlin.String)/relative&quot;&gt;상대는&lt;/a&gt; 다시 반환됩니다. 예를 들어, &lt;code&gt;File(&quot;/foo/bar&quot;).resolve(&quot;gav&quot;)&lt;/code&gt; 는 &lt;code&gt;File(&quot;/foo/bar/gav&quot;)&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0e4c043913881551e2a516d63dae837240320667" translate="yes" xml:space="preserve">
          <source>Adds &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;relative&lt;/a&gt; file to this parent directory. If &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;relative&lt;/a&gt; has a root or this has no parent directory, &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;relative&lt;/a&gt; is returned back. For instance, &lt;code&gt;File(&quot;/foo/bar&quot;).resolveSibling(File(&quot;gav&quot;))&lt;/code&gt; is &lt;code&gt;File(&quot;/foo/gav&quot;)&lt;/code&gt;.</source>
          <target state="translated">이 부모 디렉토리에 &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;상대&lt;/a&gt; 파일을 추가합니다 . 경우 &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;상대가&lt;/a&gt; 루트가 있거나이 부모 디렉토리가 없습니다, &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+java.io.File%29%2Frelative&quot;&gt;상대는&lt;/a&gt; 다시 반환됩니다. 예를 들어 &lt;code&gt;File(&quot;/foo/bar&quot;).resolveSibling(File(&quot;gav&quot;))&lt;/code&gt; 는 &lt;code&gt;File(&quot;/foo/gav&quot;)&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="da2de53c7afe7aa13400504254ede95513f8eefb" translate="yes" xml:space="preserve">
          <source>Adds &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;relative&lt;/a&gt; name to this parent directory. If &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;relative&lt;/a&gt; has a root or this has no parent directory, &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;relative&lt;/a&gt; is returned back. For instance, &lt;code&gt;File(&quot;/foo/bar&quot;).resolveSibling(&quot;gav&quot;)&lt;/code&gt; is &lt;code&gt;File(&quot;/foo/gav&quot;)&lt;/code&gt;.</source>
          <target state="translated">이 부모 디렉토리에 &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;상대&lt;/a&gt; 이름을 추가합니다 . 경우 &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;상대가&lt;/a&gt; 루트가 있거나이 부모 디렉토리가 없습니다, &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling%28java.io.File%2C+kotlin.String%29%2Frelative&quot;&gt;상대는&lt;/a&gt; 다시 반환됩니다. 예를 들어 &lt;code&gt;File(&quot;/foo/bar&quot;).resolveSibling(&quot;gav&quot;)&lt;/code&gt; 는 &lt;code&gt;File(&quot;/foo/gav&quot;)&lt;/code&gt; 입니다. 입니다.</target>
        </trans-unit>
        <trans-unit id="15eb710a1d22231f321e9872133497ad4bad29bd" translate="yes" xml:space="preserve">
          <source>Adds &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling(java.io.File,%20java.io.File)/relative&quot;&gt;relative&lt;/a&gt; file to this parent directory. If &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling(java.io.File,%20java.io.File)/relative&quot;&gt;relative&lt;/a&gt; has a root or this has no parent directory, &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling(java.io.File,%20java.io.File)/relative&quot;&gt;relative&lt;/a&gt; is returned back. For instance, &lt;code&gt;File(&quot;/foo/bar&quot;).resolveSibling(File(&quot;gav&quot;))&lt;/code&gt; is &lt;code&gt;File(&quot;/foo/gav&quot;)&lt;/code&gt;.</source>
          <target state="translated">이 상위 디렉토리에 &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling(java.io.File,%20java.io.File)/relative&quot;&gt;상대&lt;/a&gt; 파일을 추가합니다 . 경우 &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling(java.io.File,%20java.io.File)/relative&quot;&gt;상대가&lt;/a&gt; 루트가 있거나이 부모 디렉토리가 없습니다, &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling(java.io.File,%20java.io.File)/relative&quot;&gt;상대는&lt;/a&gt; 다시 반환됩니다. 예를 들어, &lt;code&gt;File(&quot;/foo/bar&quot;).resolveSibling(File(&quot;gav&quot;))&lt;/code&gt; 는 &lt;code&gt;File(&quot;/foo/gav&quot;)&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="5bdaba56107e6302f9cd281f23f5372e36e58d10" translate="yes" xml:space="preserve">
          <source>Adds &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling(java.io.File,%20kotlin.String)/relative&quot;&gt;relative&lt;/a&gt; name to this parent directory. If &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling(java.io.File,%20kotlin.String)/relative&quot;&gt;relative&lt;/a&gt; has a root or this has no parent directory, &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling(java.io.File,%20kotlin.String)/relative&quot;&gt;relative&lt;/a&gt; is returned back. For instance, &lt;code&gt;File(&quot;/foo/bar&quot;).resolveSibling(&quot;gav&quot;)&lt;/code&gt; is &lt;code&gt;File(&quot;/foo/gav&quot;)&lt;/code&gt;.</source>
          <target state="translated">이 상위 디렉토리에 &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling(java.io.File,%20kotlin.String)/relative&quot;&gt;상대&lt;/a&gt; 이름을 추가합니다 . 경우 &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling(java.io.File,%20kotlin.String)/relative&quot;&gt;상대가&lt;/a&gt; 루트가 있거나이 부모 디렉토리가 없습니다, &lt;a href=&quot;resolve-sibling#kotlin.io%24resolveSibling(java.io.File,%20kotlin.String)/relative&quot;&gt;상대는&lt;/a&gt; 다시 반환됩니다. 예를 들어, &lt;code&gt;File(&quot;/foo/bar&quot;).resolveSibling(&quot;gav&quot;)&lt;/code&gt; 는 &lt;code&gt;File(&quot;/foo/gav&quot;)&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8c9254f00997519aadf87b0f0486efab66266961" translate="yes" xml:space="preserve">
          <source>Adds CSS class to element. Has no effect if all specified classes are already in class attribute of the element</source>
          <target state="translated">CSS 클래스를 요소에 추가합니다. 지정된 모든 클래스가 이미 요소의 클래스 속성에있는 경우 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="7a5775b87126801affcac516f2646d9c76d2d530" translate="yes" xml:space="preserve">
          <source>Adds a link to the specified class or method to the &lt;strong&gt;See Also&lt;/strong&gt; block of the documentation.</source>
          <target state="translated">지정된 클래스 또는 메소드에 대한 링크를 문서 의 &lt;strong&gt;See Also&lt;/strong&gt; 블록에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="87445eb32f9821019b145eea7e9695ab7d28eb15" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.Array%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; array to this &lt;a href=&quot;../-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">주어진 &lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.Array%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 배열 의 모든 요소 를이 &lt;a href=&quot;../-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection에&lt;/a&gt; 추가합니다. .</target>
        </trans-unit>
        <trans-unit id="10537ae3754a69606c92ace3688807afaf94d61f" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.Array%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; array to this &lt;a href=&quot;index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">주어진 &lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.Array%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 배열 의 모든 요소 를이 &lt;a href=&quot;index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection에&lt;/a&gt; 추가합니다. .</target>
        </trans-unit>
        <trans-unit id="23d9c65a16a24f104b22a6505cba03e89d23571c" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection to this &lt;a href=&quot;../-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">주어진 &lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 컬렉션 의 모든 요소 를이 &lt;a href=&quot;../-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection에&lt;/a&gt; 추가합니다. .</target>
        </trans-unit>
        <trans-unit id="3b0a58538b43be1a6c9392fa61c2bbcc804758cd" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection to this &lt;a href=&quot;index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">주어진 &lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 컬렉션 의 모든 요소 를이 &lt;a href=&quot;index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection에&lt;/a&gt; 추가합니다. .</target>
        </trans-unit>
        <trans-unit id="4810151dcfece43730056e0f8f892cfe248bdbb4" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence to this &lt;a href=&quot;../-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">주어진 &lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 시퀀스 의 모든 요소 를이 &lt;a href=&quot;../-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection에&lt;/a&gt; 추가합니다..</target>
        </trans-unit>
        <trans-unit id="2b719b563988a867cd5ccc3f4297396a353af8c5" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence to this &lt;a href=&quot;index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">지정된 &lt;a href=&quot;../add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 순서 의 모든 요소 를이 &lt;a href=&quot;index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection에&lt;/a&gt; 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="27d9b7739ceae90fff9db966c123723393ac9337" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../add-all#kotlin.collections%24addAll(kotlin.collections.MutableCollection((kotlin.collections.addAll.T)),%20kotlin.Array((kotlin.collections.addAll.T)))/elements&quot;&gt;elements&lt;/a&gt; array to this &lt;a href=&quot;../-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">이 &lt;a href=&quot;../-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection에&lt;/a&gt; 지정된 &lt;a href=&quot;../add-all#kotlin.collections%24addAll(kotlin.collections.MutableCollection((kotlin.collections.addAll.T)),%20kotlin.Array((kotlin.collections.addAll.T)))/elements&quot;&gt;요소&lt;/a&gt; 배열 의 모든 요소를 ​​추가합니다 .</target>
        </trans-unit>
        <trans-unit id="f162cb831ea0ec48e75e889f33d2dcf7b70c3d3d" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../add-all#kotlin.collections%24addAll(kotlin.collections.MutableCollection((kotlin.collections.addAll.T)),%20kotlin.Array((kotlin.collections.addAll.T)))/elements&quot;&gt;elements&lt;/a&gt; array to this &lt;a href=&quot;index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">이 &lt;a href=&quot;index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection에&lt;/a&gt; 지정된 &lt;a href=&quot;../add-all#kotlin.collections%24addAll(kotlin.collections.MutableCollection((kotlin.collections.addAll.T)),%20kotlin.Array((kotlin.collections.addAll.T)))/elements&quot;&gt;요소&lt;/a&gt; 배열 의 모든 요소를 ​​추가합니다 .</target>
        </trans-unit>
        <trans-unit id="654487fc561d9c61e773edb46f503dc4cc152001" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../add-all#kotlin.collections%24addAll(kotlin.collections.MutableCollection((kotlin.collections.addAll.T)),%20kotlin.collections.Iterable((kotlin.collections.addAll.T)))/elements&quot;&gt;elements&lt;/a&gt; collection to this &lt;a href=&quot;../-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">이 &lt;a href=&quot;../-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection에&lt;/a&gt; 지정된 &lt;a href=&quot;../add-all#kotlin.collections%24addAll(kotlin.collections.MutableCollection((kotlin.collections.addAll.T)),%20kotlin.collections.Iterable((kotlin.collections.addAll.T)))/elements&quot;&gt;요소&lt;/a&gt; 컬렉션 의 모든 요소를 ​​추가합니다 .</target>
        </trans-unit>
        <trans-unit id="31b2933a7b9a28f70081e72e6021a20589492cab" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../add-all#kotlin.collections%24addAll(kotlin.collections.MutableCollection((kotlin.collections.addAll.T)),%20kotlin.collections.Iterable((kotlin.collections.addAll.T)))/elements&quot;&gt;elements&lt;/a&gt; collection to this &lt;a href=&quot;index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">이 &lt;a href=&quot;index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection에&lt;/a&gt; 지정된 &lt;a href=&quot;../add-all#kotlin.collections%24addAll(kotlin.collections.MutableCollection((kotlin.collections.addAll.T)),%20kotlin.collections.Iterable((kotlin.collections.addAll.T)))/elements&quot;&gt;요소&lt;/a&gt; 컬렉션 의 모든 요소를 ​​추가합니다 .</target>
        </trans-unit>
        <trans-unit id="56bdfce2baa3f8055d8aebdff2336cc5178fe760" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../add-all#kotlin.collections%24addAll(kotlin.collections.MutableCollection((kotlin.collections.addAll.T)),%20kotlin.sequences.Sequence((kotlin.collections.addAll.T)))/elements&quot;&gt;elements&lt;/a&gt; sequence to this &lt;a href=&quot;../-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">이 &lt;a href=&quot;../-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection에&lt;/a&gt; 지정된 &lt;a href=&quot;../add-all#kotlin.collections%24addAll(kotlin.collections.MutableCollection((kotlin.collections.addAll.T)),%20kotlin.sequences.Sequence((kotlin.collections.addAll.T)))/elements&quot;&gt;요소&lt;/a&gt; 시퀀스 의 모든 요소를 ​​추가합니다 .</target>
        </trans-unit>
        <trans-unit id="22003378a9ffbdad104d4a068b24425a0b80836c" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../add-all#kotlin.collections%24addAll(kotlin.collections.MutableCollection((kotlin.collections.addAll.T)),%20kotlin.sequences.Sequence((kotlin.collections.addAll.T)))/elements&quot;&gt;elements&lt;/a&gt; sequence to this &lt;a href=&quot;index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">이 &lt;a href=&quot;index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection에&lt;/a&gt; 지정된 &lt;a href=&quot;../add-all#kotlin.collections%24addAll(kotlin.collections.MutableCollection((kotlin.collections.addAll.T)),%20kotlin.sequences.Sequence((kotlin.collections.addAll.T)))/elements&quot;&gt;요소&lt;/a&gt; 시퀀스 의 모든 요소를 ​​추가합니다 .</target>
        </trans-unit>
        <trans-unit id="d691c921dd146f4507d4976745052b064980c6f9" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.Array%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; array to this mutable collection.</source>
          <target state="translated">주어진 &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.Array%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 배열 의 모든 요소 를이 가변 콜렉션에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="9964256f02efab85f6a59e4668c7b2dca42aabe9" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection to this mutable collection.</source>
          <target state="translated">주어진 &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 컬렉션 의 모든 요소 를이 가변 컬렉션에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="29c7bc328b63224ec69231bf9bdd99ff151ff9ba" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence to this mutable collection.</source>
          <target state="translated">주어진 &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 시퀀스 의 모든 요소 를이 가변 콜렉션에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="c9e8e2f48e4ce098719e2568323f539e9ed6dc10" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign(kotlin.collections.MutableCollection((kotlin.collections.plusAssign.T)),%20kotlin.Array((kotlin.collections.plusAssign.T)))/elements&quot;&gt;elements&lt;/a&gt; array to this mutable collection.</source>
          <target state="translated">이 변경 가능한 컬렉션에 지정된 &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign(kotlin.collections.MutableCollection((kotlin.collections.plusAssign.T)),%20kotlin.Array((kotlin.collections.plusAssign.T)))/elements&quot;&gt;요소&lt;/a&gt; 배열 의 모든 요소를 ​​추가합니다 .</target>
        </trans-unit>
        <trans-unit id="adb8bd820b56748defa8b5a0b7598bb252cc0212" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign(kotlin.collections.MutableCollection((kotlin.collections.plusAssign.T)),%20kotlin.collections.Iterable((kotlin.collections.plusAssign.T)))/elements&quot;&gt;elements&lt;/a&gt; collection to this mutable collection.</source>
          <target state="translated">이 변경 가능한 컬렉션에 지정된 &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign(kotlin.collections.MutableCollection((kotlin.collections.plusAssign.T)),%20kotlin.collections.Iterable((kotlin.collections.plusAssign.T)))/elements&quot;&gt;요소&lt;/a&gt; 컬렉션 의 모든 요소를 ​​추가합니다 .</target>
        </trans-unit>
        <trans-unit id="198fcb32b4688db4a7da7b696b18c9e064a895d2" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign(kotlin.collections.MutableCollection((kotlin.collections.plusAssign.T)),%20kotlin.sequences.Sequence((kotlin.collections.plusAssign.T)))/elements&quot;&gt;elements&lt;/a&gt; sequence to this mutable collection.</source>
          <target state="translated">이 변경 가능한 컬렉션에 지정된 &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign(kotlin.collections.MutableCollection((kotlin.collections.plusAssign.T)),%20kotlin.sequences.Sequence((kotlin.collections.plusAssign.T)))/elements&quot;&gt;요소&lt;/a&gt; 시퀀스 의 모든 요소를 ​​추가합니다 .</target>
        </trans-unit>
        <trans-unit id="e19c5ce2ad72fe061e0bbeb62e7e443fd106a628" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.Array%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; array to this &lt;a href=&quot;-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">지정된 &lt;a href=&quot;add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.Array%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 배열 의 모든 요소 를이 &lt;a href=&quot;-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection에&lt;/a&gt; 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="b22b16451373efc5d5b9fc621880b90a6064e63d" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection to this &lt;a href=&quot;-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">지정된 &lt;a href=&quot;add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 컬렉션 의 모든 요소 를이 &lt;a href=&quot;-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection에&lt;/a&gt; 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="3ba0907c63140160ab067c1e6f8b4dbca297a6ba" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence to this &lt;a href=&quot;-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">지정된 &lt;a href=&quot;add-all#kotlin.collections%24addAll%28kotlin.collections.MutableCollection%28%28kotlin.collections.addAll.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.addAll.T%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 순서 의 모든 요소 를이 &lt;a href=&quot;-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection에&lt;/a&gt; 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="8fbcf2cda364b9159920b51d9f21425f4d993e26" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;add-all#kotlin.collections%24addAll(kotlin.collections.MutableCollection((kotlin.collections.addAll.T)),%20kotlin.Array((kotlin.collections.addAll.T)))/elements&quot;&gt;elements&lt;/a&gt; array to this &lt;a href=&quot;-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">이 &lt;a href=&quot;-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection에&lt;/a&gt; 지정된 &lt;a href=&quot;add-all#kotlin.collections%24addAll(kotlin.collections.MutableCollection((kotlin.collections.addAll.T)),%20kotlin.Array((kotlin.collections.addAll.T)))/elements&quot;&gt;요소&lt;/a&gt; 배열 의 모든 요소를 ​​추가합니다 .</target>
        </trans-unit>
        <trans-unit id="8ae7fe3711f6e0ff08f6e79155331c913137e376" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;add-all#kotlin.collections%24addAll(kotlin.collections.MutableCollection((kotlin.collections.addAll.T)),%20kotlin.collections.Iterable((kotlin.collections.addAll.T)))/elements&quot;&gt;elements&lt;/a&gt; collection to this &lt;a href=&quot;-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">이 &lt;a href=&quot;-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection에&lt;/a&gt; 지정된 &lt;a href=&quot;add-all#kotlin.collections%24addAll(kotlin.collections.MutableCollection((kotlin.collections.addAll.T)),%20kotlin.collections.Iterable((kotlin.collections.addAll.T)))/elements&quot;&gt;요소&lt;/a&gt; 컬렉션 의 모든 요소를 ​​추가합니다 .</target>
        </trans-unit>
        <trans-unit id="c2e80eac1e149c29291d73ba4db24897dc535443" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;add-all#kotlin.collections%24addAll(kotlin.collections.MutableCollection((kotlin.collections.addAll.T)),%20kotlin.sequences.Sequence((kotlin.collections.addAll.T)))/elements&quot;&gt;elements&lt;/a&gt; sequence to this &lt;a href=&quot;-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection&lt;/a&gt;.</source>
          <target state="translated">이 &lt;a href=&quot;-mutable-collection/index#kotlin.collections.MutableCollection&quot;&gt;MutableCollection에&lt;/a&gt; 지정된 &lt;a href=&quot;add-all#kotlin.collections%24addAll(kotlin.collections.MutableCollection((kotlin.collections.addAll.T)),%20kotlin.sequences.Sequence((kotlin.collections.addAll.T)))/elements&quot;&gt;요소&lt;/a&gt; 시퀀스 의 모든 요소를 ​​추가합니다 .</target>
        </trans-unit>
        <trans-unit id="84a0113a3c5d40d266ec4b6ad1717c6fb75675a6" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.Array%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; array to this mutable collection.</source>
          <target state="translated">주어진 &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.Array%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 배열 의 모든 요소 를이 가변 콜렉션에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="91af3506daf7495894c10f644b66eac6aff1255e" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; collection to this mutable collection.</source>
          <target state="translated">주어진 &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.collections.Iterable%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 컬렉션 의 모든 요소 를이 가변 컬렉션에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="24ad7f8d0e6fb7a5d9e3c2883edd309f87333f9b" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;elements&lt;/a&gt; sequence to this mutable collection.</source>
          <target state="translated">주어진 &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.sequences.Sequence%28%28kotlin.collections.plusAssign.T%29%29%29%2Felements&quot;&gt;요소&lt;/a&gt; 시퀀스 의 모든 요소 를이 가변 콜렉션에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="483c766d4ab9fd557b9f5e86b569412cf9546539" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign(kotlin.collections.MutableCollection((kotlin.collections.plusAssign.T)),%20kotlin.Array((kotlin.collections.plusAssign.T)))/elements&quot;&gt;elements&lt;/a&gt; array to this mutable collection.</source>
          <target state="translated">이 변경 가능한 컬렉션에 지정된 &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign(kotlin.collections.MutableCollection((kotlin.collections.plusAssign.T)),%20kotlin.Array((kotlin.collections.plusAssign.T)))/elements&quot;&gt;요소&lt;/a&gt; 배열 의 모든 요소를 ​​추가합니다 .</target>
        </trans-unit>
        <trans-unit id="079b9bc8c2aedf5684eec43502de03d2ff6fbf5e" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign(kotlin.collections.MutableCollection((kotlin.collections.plusAssign.T)),%20kotlin.collections.Iterable((kotlin.collections.plusAssign.T)))/elements&quot;&gt;elements&lt;/a&gt; collection to this mutable collection.</source>
          <target state="translated">이 변경 가능한 컬렉션에 지정된 &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign(kotlin.collections.MutableCollection((kotlin.collections.plusAssign.T)),%20kotlin.collections.Iterable((kotlin.collections.plusAssign.T)))/elements&quot;&gt;요소&lt;/a&gt; 컬렉션 의 모든 요소를 ​​추가합니다 .</target>
        </trans-unit>
        <trans-unit id="b630ae8aa36ce84ae7ec0faf064ff40df3fb9ebc" translate="yes" xml:space="preserve">
          <source>Adds all elements of the given &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign(kotlin.collections.MutableCollection((kotlin.collections.plusAssign.T)),%20kotlin.sequences.Sequence((kotlin.collections.plusAssign.T)))/elements&quot;&gt;elements&lt;/a&gt; sequence to this mutable collection.</source>
          <target state="translated">이 변경 가능한 컬렉션에 지정된 &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign(kotlin.collections.MutableCollection((kotlin.collections.plusAssign.T)),%20kotlin.sequences.Sequence((kotlin.collections.plusAssign.T)))/elements&quot;&gt;요소&lt;/a&gt; 시퀀스 의 모든 요소를 ​​추가합니다 .</target>
        </trans-unit>
        <trans-unit id="312bdbfea889d07249db9102f1afc95c9f13b234" translate="yes" xml:space="preserve">
          <source>Adds all of the elements of the specified collection to the end of this list.</source>
          <target state="translated">지정된 컬렉션의 모든 요소를이 목록의 끝에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="85070eb82fd1c1a8b130341b834cf6d10970d93f" translate="yes" xml:space="preserve">
          <source>Adds all of the elements of the specified collection to this collection.</source>
          <target state="translated">지정된 컬렉션의 모든 요소를이 컬렉션에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="bfb7e428674f6edc1f69ae0086ef3f3ecd465825" translate="yes" xml:space="preserve">
          <source>Adds both &lt;code&gt;debug&lt;/code&gt; and &lt;code&gt;release&lt;/code&gt; frameworks as output binaries for all iOS and macOS targets.</source>
          <target state="translated">모든 iOS 및 macOS 대상에 대한 출력 바이너리로 &lt;code&gt;debug&lt;/code&gt; 및 &lt;code&gt;release&lt;/code&gt; 프레임 워크를 모두 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="19567b0ce8b4b957b333ffb6b6f15497eff311c8" translate="yes" xml:space="preserve">
          <source>Adds both &lt;code&gt;debug&lt;/code&gt; and &lt;code&gt;release&lt;/code&gt; frameworks as output binaries for all macOS, iOS, tvOS, and watchOS targets.</source>
          <target state="translated">모든 macOS, iOS, tvOS 및 watchOS 대상에 대한 출력 바이너리로 &lt;code&gt;debug&lt;/code&gt; 및 &lt;code&gt;release&lt;/code&gt; 프레임 워크를 모두 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="ca2b793ba21a4273d262747b913ea84119720fae" translate="yes" xml:space="preserve">
          <source>Adds key-value pairs from &lt;a href=&quot;../add#kotlin.js%24add%28kotlin.js.Json%2C+kotlin.js.Json%29%2Fother&quot;&gt;other&lt;/a&gt; to &lt;a href=&quot;../add/-this-&quot;&gt;this&lt;/a&gt;. Returns the original receiver.</source>
          <target state="translated">&lt;a href=&quot;../add#kotlin.js%24add%28kotlin.js.Json%2C+kotlin.js.Json%29%2Fother&quot;&gt;other&lt;/a&gt; 에서 키-값 쌍 을 &lt;a href=&quot;../add/-this-&quot;&gt;this에&lt;/a&gt; 추가합니다 . 원래 수신자를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="90f8ba6ade3c95d13ce9811c389d3ebb12a0809e" translate="yes" xml:space="preserve">
          <source>Adds key-value pairs from &lt;a href=&quot;../add#kotlin.js%24add(kotlin.js.Json,%20kotlin.js.Json)/other&quot;&gt;other&lt;/a&gt; to &lt;a href=&quot;../add/-this-&quot;&gt;this&lt;/a&gt;. Returns the original receiver.</source>
          <target state="translated">&lt;a href=&quot;../add#kotlin.js%24add(kotlin.js.Json,%20kotlin.js.Json)/other&quot;&gt;other&lt;/a&gt; 에서 &lt;a href=&quot;../add/-this-&quot;&gt;this에&lt;/a&gt; 키-값 쌍을 추가합니다 . 원래 수신자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4b7d8fef88cb33713dab84360b69259a7ab629f5" translate="yes" xml:space="preserve">
          <source>Adds key-value pairs from &lt;a href=&quot;add#kotlin.js%24add%28kotlin.js.Json%2C+kotlin.js.Json%29%2Fother&quot;&gt;other&lt;/a&gt; to &lt;a href=&quot;add/-this-&quot;&gt;this&lt;/a&gt;. Returns the original receiver.</source>
          <target state="translated">&lt;a href=&quot;add#kotlin.js%24add%28kotlin.js.Json%2C+kotlin.js.Json%29%2Fother&quot;&gt;other&lt;/a&gt; 에서 키-값 쌍 을 &lt;a href=&quot;add/-this-&quot;&gt;this에&lt;/a&gt; 추가합니다 . 원래 수신자를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="e958c0f4e0040fd9128a6cc8711650fc754cfef4" translate="yes" xml:space="preserve">
          <source>Adds key-value pairs from &lt;a href=&quot;add#kotlin.js%24add(kotlin.js.Json,%20kotlin.js.Json)/other&quot;&gt;other&lt;/a&gt; to &lt;a href=&quot;add/-this-&quot;&gt;this&lt;/a&gt;. Returns the original receiver.</source>
          <target state="translated">&lt;a href=&quot;add#kotlin.js%24add(kotlin.js.Json,%20kotlin.js.Json)/other&quot;&gt;other&lt;/a&gt; 에서 &lt;a href=&quot;add/-this-&quot;&gt;this에&lt;/a&gt; 키-값 쌍을 추가합니다 . 원래 수신자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e91254e93a826cbb761243cb8f3e49ae3276f26c" translate="yes" xml:space="preserve">
          <source>Adds prefix to &lt;code&gt;external&lt;/code&gt; declarations in a source file.</source>
          <target state="translated">소스 파일에서 &lt;code&gt;external&lt;/code&gt; 선언에 접두사를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="eff6598f06f155433e53282e71c90b7a3a2aeb6e" translate="yes" xml:space="preserve">
          <source>Adds the other Int value to this value resulting a Char.</source>
          <target state="translated">이 값에 다른 Int 값을 추가하여 Char를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="276ad7992696ff81567a3824031f5a66cea74753" translate="yes" xml:space="preserve">
          <source>Adds the other value to this value.</source>
          <target state="translated">이 값에 다른 값을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="8d024c2e2402b39ef2c90f0c9a147f2a5d65101a" translate="yes" xml:space="preserve">
          <source>Adds the specified &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.collections.plusAssign.T%29%2Felement&quot;&gt;element&lt;/a&gt; to this mutable collection.</source>
          <target state="translated">이 가변 컬렉션에 지정된 &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.collections.plusAssign.T%29%2Felement&quot;&gt;요소&lt;/a&gt; 를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="c3b80811a3485f8b9af683641521ba199f6cbeea" translate="yes" xml:space="preserve">
          <source>Adds the specified &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign(kotlin.collections.MutableCollection((kotlin.collections.plusAssign.T)),%20kotlin.collections.plusAssign.T)/element&quot;&gt;element&lt;/a&gt; to this mutable collection.</source>
          <target state="translated">이 변경 가능한 컬렉션에 지정된 &lt;a href=&quot;../plus-assign#kotlin.collections%24plusAssign(kotlin.collections.MutableCollection((kotlin.collections.plusAssign.T)),%20kotlin.collections.plusAssign.T)/element&quot;&gt;요소&lt;/a&gt; 를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="0510d463445710aa5c4945694cfe3e697e384a92" translate="yes" xml:space="preserve">
          <source>Adds the specified &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.collections.plusAssign.T%29%2Felement&quot;&gt;element&lt;/a&gt; to this mutable collection.</source>
          <target state="translated">이 가변 컬렉션에 지정된 &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign%28kotlin.collections.MutableCollection%28%28kotlin.collections.plusAssign.T%29%29%2C+kotlin.collections.plusAssign.T%29%2Felement&quot;&gt;요소&lt;/a&gt; 를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="c2e3b5d45bb9f7d407e1523090137fb87339c004" translate="yes" xml:space="preserve">
          <source>Adds the specified &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign(kotlin.collections.MutableCollection((kotlin.collections.plusAssign.T)),%20kotlin.collections.plusAssign.T)/element&quot;&gt;element&lt;/a&gt; to this mutable collection.</source>
          <target state="translated">이 변경 가능한 컬렉션에 지정된 &lt;a href=&quot;plus-assign#kotlin.collections%24plusAssign(kotlin.collections.MutableCollection((kotlin.collections.plusAssign.T)),%20kotlin.collections.plusAssign.T)/element&quot;&gt;요소&lt;/a&gt; 를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="885caa10ce08576cabcdf41cdce5089d4e5b32e6" translate="yes" xml:space="preserve">
          <source>Adds the specified element &lt;a href=&quot;add#kotlin.collections.MutableListIterator%24add%28kotlin.collections.MutableListIterator.T%29%2Felement&quot;&gt;element&lt;/a&gt; into the underlying collection immediately before the element that would be returned by &lt;a href=&quot;next#kotlin.collections.MutableListIterator%24next%28%29&quot;&gt;next&lt;/a&gt;, if any, and after the element that would be returned by &lt;a href=&quot;../-list-iterator/previous#kotlin.collections.ListIterator%24previous%28%29&quot;&gt;previous&lt;/a&gt;, if any. (If the collection contains no elements, the new element becomes the sole element in the collection.) The new element is inserted before the implicit cursor: a subsequent call to &lt;a href=&quot;next#kotlin.collections.MutableListIterator%24next%28%29&quot;&gt;next&lt;/a&gt; would be unaffected, and a subsequent call to &lt;a href=&quot;../-list-iterator/previous#kotlin.collections.ListIterator%24previous%28%29&quot;&gt;previous&lt;/a&gt; would return the new element. (This call increases by one the value that would be returned by a call to &lt;a href=&quot;../-list-iterator/next-index#kotlin.collections.ListIterator%24nextIndex%28%29&quot;&gt;nextIndex&lt;/a&gt; or &lt;a href=&quot;../-list-iterator/previous-index#kotlin.collections.ListIterator%24previousIndex%28%29&quot;&gt;previousIndex&lt;/a&gt;.)</source>
          <target state="translated">지정된 요소 &lt;a href=&quot;add#kotlin.collections.MutableListIterator%24add%28kotlin.collections.MutableListIterator.T%29%2Felement&quot;&gt;요소&lt;/a&gt; 를 &lt;a href=&quot;next#kotlin.collections.MutableListIterator%24next%28%29&quot;&gt;next&lt;/a&gt; 에 의해 리턴되는 요소 직전 과 존재하는 경우 &lt;a href=&quot;../-list-iterator/previous#kotlin.collections.ListIterator%24previous%28%29&quot;&gt;previous&lt;/a&gt; 에 의해 리턴되는 요소 바로 뒤에있는 기본 컬렉션에 추가합니다 . 컬렉션에 요소가 없으면 새 요소가 컬렉션의 유일한 요소가됩니다. 새 요소는 암시 적 커서 앞에 삽입됩니다. &lt;a href=&quot;next#kotlin.collections.MutableListIterator%24next%28%29&quot;&gt;다음에&lt;/a&gt; 대한 후속 호출 은 영향을받지 않으며 &lt;a href=&quot;../-list-iterator/previous#kotlin.collections.ListIterator%24previous%28%29&quot;&gt;이전에&lt;/a&gt; 대한 후속 호출 은 새 요소를 반환합니다. . 이 호출은 &lt;a href=&quot;../-list-iterator/next-index#kotlin.collections.ListIterator%24nextIndex%28%29&quot;&gt;nextIndex&lt;/a&gt; 또는 &lt;a href=&quot;../-list-iterator/previous-index#kotlin.collections.ListIterator%24previousIndex%28%29&quot;&gt;previousIndex&lt;/a&gt; 호출에 의해 리턴되는 값을 1 씩 증가시킵니다 .</target>
        </trans-unit>
        <trans-unit id="2e43708cc8b8b4fff5c441258dcd2e58b1bf1125" translate="yes" xml:space="preserve">
          <source>Adds the specified element &lt;a href=&quot;add#kotlin.collections.MutableListIterator%24add(kotlin.collections.MutableListIterator.T)/element&quot;&gt;element&lt;/a&gt; into the underlying collection immediately before the element that would be returned by &lt;a href=&quot;next#kotlin.collections.MutableListIterator%24next()&quot;&gt;next&lt;/a&gt;, if any, and after the element that would be returned by &lt;a href=&quot;../-list-iterator/previous#kotlin.collections.ListIterator%24previous()&quot;&gt;previous&lt;/a&gt;, if any. (If the collection contains no elements, the new element becomes the sole element in the collection.) The new element is inserted before the implicit cursor: a subsequent call to &lt;a href=&quot;next#kotlin.collections.MutableListIterator%24next()&quot;&gt;next&lt;/a&gt; would be unaffected, and a subsequent call to &lt;a href=&quot;../-list-iterator/previous#kotlin.collections.ListIterator%24previous()&quot;&gt;previous&lt;/a&gt; would return the new element. (This call increases by one the value that would be returned by a call to &lt;a href=&quot;../-list-iterator/next-index#kotlin.collections.ListIterator%24nextIndex()&quot;&gt;nextIndex&lt;/a&gt; or &lt;a href=&quot;../-list-iterator/previous-index#kotlin.collections.ListIterator%24previousIndex()&quot;&gt;previousIndex&lt;/a&gt;.)</source>
          <target state="translated">&lt;a href=&quot;next#kotlin.collections.MutableListIterator%24next()&quot;&gt;next&lt;/a&gt; 에서 반환 할 요소 (있는 경우) 바로 앞 과 &lt;a href=&quot;../-list-iterator/previous#kotlin.collections.ListIterator%24previous()&quot;&gt;previous&lt;/a&gt; 에서 반환 할 요소 (있는 경우) 뒤에 지정된 요소 &lt;a href=&quot;add#kotlin.collections.MutableListIterator%24add(kotlin.collections.MutableListIterator.T)/element&quot;&gt;요소&lt;/a&gt; 를 기본 컬렉션에 추가합니다 . (컬렉션에 요소가없는 경우 새 요소는 컬렉션의 유일한 요소가됩니다.) 새 요소는 암시 적 커서 앞에 삽입됩니다. &lt;a href=&quot;next#kotlin.collections.MutableListIterator%24next()&quot;&gt;next에&lt;/a&gt; 대한 후속 호출 은 영향을받지 않고 &lt;a href=&quot;../-list-iterator/previous#kotlin.collections.ListIterator%24previous()&quot;&gt;이전에&lt;/a&gt; 대한 후속 호출 은 새 요소를 반환합니다. . (이 호출은 &lt;a href=&quot;../-list-iterator/next-index#kotlin.collections.ListIterator%24nextIndex()&quot;&gt;nextIndex&lt;/a&gt; 또는 &lt;a href=&quot;../-list-iterator/previous-index#kotlin.collections.ListIterator%24previousIndex()&quot;&gt;previousIndex&lt;/a&gt; 에 대한 호출로 반환되는 값만큼 증가합니다 .)</target>
        </trans-unit>
        <trans-unit id="185b6edaa0a681bb52d9aba9790ac6541765c18c" translate="yes" xml:space="preserve">
          <source>Adds the specified element to the collection.</source>
          <target state="translated">지정된 요소를 컬렉션에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="21411e5ee58b28117d4b414fda5988514a36e781" translate="yes" xml:space="preserve">
          <source>Adds the specified element to the end of this list.</source>
          <target state="translated">지정된 요소를이리스트의 끝에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="e512e3e82755d9240a37dc510417ddd4c4b200e5" translate="yes" xml:space="preserve">
          <source>Adds the specified element to the set.</source>
          <target state="translated">지정된 요소를 세트에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="e36251580fb4570b235430ee023d697b1c96264c" translate="yes" xml:space="preserve">
          <source>Adds the specified exception to the list of exceptions that were suppressed in order to deliver this exception.</source>
          <target state="translated">이 예외를 전달하기 위해 억제 된 예외 목록에 지정된 예외를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="f28ee6092889140614f957587a392bf0641c651c" translate="yes" xml:space="preserve">
          <source>Adjusting the module name</source>
          <target state="translated">모듈 이름 조정</target>
        </trans-unit>
        <trans-unit id="0e8e01dbdf63e8af2d15ba2d24e669c9385586bc" translate="yes" xml:space="preserve">
          <source>Advanced Kotlin Programming</source>
          <target state="translated">고급 코 틀린 프로그래밍</target>
        </trans-unit>
        <trans-unit id="99b0021e8fdff5ec6edaa329da8ecb296223d390" translate="yes" xml:space="preserve">
          <source>Advanced topics</source>
          <target state="translated">고급 주제</target>
        </trans-unit>
        <trans-unit id="de81faa81414cc125f926654e9e971aefab9061a" translate="yes" xml:space="preserve">
          <source>Advances the current reading value of this time source by the specified &lt;a href=&quot;plus-assign#kotlin.time.TestTimeSource%24plusAssign(kotlin.time.Duration)/duration&quot;&gt;duration&lt;/a&gt;.</source>
          <target state="translated">이 시간 소스의 현재 판독 값을 지정된 &lt;a href=&quot;plus-assign#kotlin.time.TestTimeSource%24plusAssign(kotlin.time.Duration)/duration&quot;&gt;기간&lt;/a&gt; 만큼 증가시킵니다 .</target>
        </trans-unit>
        <trans-unit id="e14b5404ce2f83b044293ca6b45d41458322bd99" translate="yes" xml:space="preserve">
          <source>After compilation we have two new files:</source>
          <target state="translated">컴파일 후 두 개의 새로운 파일이 있습니다 :</target>
        </trans-unit>
        <trans-unit id="55962a9c0dc0857e2081c43a4138c36cc93690dd" translate="yes" xml:space="preserve">
          <source>After completing these steps, you can open the generated workspace (see &lt;a href=&quot;https://guides.cocoapods.org/using/using-cocoapods.html#installation&quot;&gt;CocoaPods documentation&lt;/a&gt;) and run an Xcode build.</source>
          <target state="translated">이 단계를 완료 한 후 생성 된 작업 공간 ( &lt;a href=&quot;https://guides.cocoapods.org/using/using-cocoapods.html#installation&quot;&gt;CocoaPods 문서&lt;/a&gt; 참조)을 열고 Xcode 빌드를 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b3436d6b3c960a964f661d95c8a264bba32afad" translate="yes" xml:space="preserve">
          <source>After each test run, regardless of how we executed the test, we can find a properly formatted test report from Gradle in &lt;code&gt;build/reports/tests/browserTest/index.html&lt;/code&gt;. We can open this file in the browser of our choice to see another overview of our test results:</source>
          <target state="translated">각 테스트 실행 후 테스트 실행 방법에 관계없이 &lt;code&gt;build/reports/tests/browserTest/index.html&lt;/code&gt; 에서 Gradle의 올바른 형식의 테스트 보고서를 찾을 수 있습니다 . 선택한 브라우저에서이 파일을 열어 테스트 결과에 대한 다른 개요를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7f6c05be243074bdd835c495a76e9cc208c38090" translate="yes" xml:space="preserve">
          <source>After making these adjustments, we can start the integrated development server. We can do this from the command line via the Gradle wrapper:</source>
          <target state="translated">이러한 조정 후 통합 개발 서버를 시작할 수 있습니다. Gradle 래퍼를 통해 명령 줄에서이 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="be7a4a52bfc3750ff86b330696474ee450a1ae21" translate="yes" xml:space="preserve">
          <source>After running the cinterop tool it can share Kotlin data in a versionized global structure, and interact with it from Kotlin transparently via autogenerated Kotlin like this:</source>
          <target state="translated">cinterop 도구를 실행 한 후 버전 화 된 전역 구조로 Kotlin 데이터를 공유하고 자동 생성 된 Kotlin을 통해 다음과 같이 Kotlin에서 투명하게 상호 작용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="120564fdac88fdfb1fe36acd41da1ea5a77f8cfe" translate="yes" xml:space="preserve">
          <source>After running the tests from IntelliJ IDEA, the &quot;Run&quot; tool window will show the test results. We can click failed tests to see their stack trace, and navigate to the corresponding test implementation via a double-click.</source>
          <target state="translated">IntelliJ IDEA에서 테스트를 실행 한 후 &quot;실행&quot;도구 창에 테스트 결과가 표시됩니다. 실패한 테스트를 클릭하여 스택 추적을 확인하고 두 번 클릭을 통해 해당 테스트 구현으로 이동할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a00552b5f6e554046b8df2e640c80b0142150ea5" translate="yes" xml:space="preserve">
          <source>After some long and extensive battle testing, coroutines are now released! It means that from Kotlin 1.3 the language support and the API are &lt;a href=&quot;evolution/components-stability&quot;&gt;fully stable&lt;/a&gt;. Check out the new &lt;a href=&quot;coroutines-overview&quot;&gt;coroutines overview&lt;/a&gt; page.</source>
          <target state="translated">길고 광범위한 전투 테스트가 끝나면 코 루틴이 출시됩니다! 이는 Kotlin 1.3부터 ​​언어 지원 및 API가 &lt;a href=&quot;evolution/components-stability&quot;&gt;완전히 안정적&lt;/a&gt; 임을 의미합니다 . 새로운 &lt;a href=&quot;coroutines-overview&quot;&gt;코 루틴 개요&lt;/a&gt; 페이지를 확인 하십시오.</target>
        </trans-unit>
        <trans-unit id="b20aae618189a43b8bb6ab35517407d6fd71b453" translate="yes" xml:space="preserve">
          <source>After that it becomes invalid, so &lt;code&gt;voidPtr&lt;/code&gt; can't be unwrapped anymore.</source>
          <target state="translated">그 후에는 무효화되므로 &lt;code&gt;voidPtr&lt;/code&gt; 을 더 이상 래핑 해제 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="8044569fdd9a271a173948e76c357bc88dbea4f7" translate="yes" xml:space="preserve">
          <source>After the generation of bindings, they can be used by the IDE as a proxy view of the native library.</source>
          <target state="translated">바인딩을 생성 한 후에 IDE에서 네이티브 라이브러리의 프록시보기로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="46d1d4364cf200aa012b4cd2cf7f4d7e42e59b51" translate="yes" xml:space="preserve">
          <source>After the project has been built, the embedded &lt;code&gt;webpack-dev-server&lt;/code&gt; will start running, and will open a (seemingly empty) browser window pointing to the HTML file we specified previously. To validate that our program is running correctly, we can open the developer tools of our browser (for example by right-clicking and choosing the &lt;em&gt;Inspect&lt;/em&gt; action). Inside the developer tools, we can navigate to the console, where we can see the results of our executed JavaScript code:</source>
          <target state="translated">프로젝트가 빌드 된 후 임베디드 &lt;code&gt;webpack-dev-server&lt;/code&gt; 가 실행되기 시작하고 이전에 지정한 HTML 파일을 가리키는 (비어있는 것처럼 보이는) 브라우저 창이 열립니다. 프로그램이 올바르게 실행되고 있는지 확인하기 위해 브라우저의 개발자 도구를 열 수 있습니다 (예 : 마우스 오른쪽 버튼을 클릭하고 &lt;em&gt;Inspect&lt;/em&gt; 작업을 선택하여 ). 개발자 도구 내에서 실행 된 JavaScript 코드의 결과를 볼 수있는 콘솔로 이동할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="894a459a8f6927b27ab4d08af34781d0013b03e6" translate="yes" xml:space="preserve">
          <source>After the rituals in the &lt;code&gt;libnative_api.h&lt;/code&gt;, we have a block with the common type definitions:</source>
          <target state="translated">&lt;code&gt;libnative_api.h&lt;/code&gt; 의 의식 후에 일반적인 유형 정의가있는 블록이 있습니다.</target>
        </trans-unit>
        <trans-unit id="a23b6ae7f5b6fb2ce5fd4d1750d163329bd4198f" translate="yes" xml:space="preserve">
          <source>After updating your code style settings, activate &amp;ldquo;Reformat Code&amp;rdquo; in the project view on the desired scope.</source>
          <target state="translated">코드 스타일 설정을 업데이트 한 후 원하는 범위의 프로젝트보기에서 &quot;코드 재 형식화&quot;를 활성화하십시오.</target>
        </trans-unit>
        <trans-unit id="14f1c98193b0dca0c2dc1740114e9c7af6874272" translate="yes" xml:space="preserve">
          <source>After we've added this annotation, the Kotlin compiler knows which implicit receivers are part of the same DSL and allows to call members of the nearest receivers only:</source>
          <target state="translated">이 주석을 추가 한 후 Kotlin 컴파일러는 어떤 묵시적 수신자가 동일한 DSL의 일부인지 알고 가장 가까운 수신자의 멤버 만 호출 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="1acdb4a2271f371856970f88d2de4cc945e37003" translate="yes" xml:space="preserve">
          <source>Afterwards, this disconnected object graph and &lt;a href=&quot;execute#kotlin.native.concurrent.Worker%24execute%28kotlin.native.concurrent.TransferMode%2C+kotlin.Function0%28%28kotlin.native.concurrent.Worker.execute.T1%29%29%2C+kotlin.Function1%28%28kotlin.native.concurrent.Worker.execute.T1%2C+kotlin.native.concurrent.Worker.execute.T2%29%29%29%2Fjob&quot;&gt;job&lt;/a&gt; function pointer is being added to jobs queue of the selected worker. Note that &lt;a href=&quot;execute#kotlin.native.concurrent.Worker%24execute%28kotlin.native.concurrent.TransferMode%2C+kotlin.Function0%28%28kotlin.native.concurrent.Worker.execute.T1%29%29%2C+kotlin.Function1%28%28kotlin.native.concurrent.Worker.execute.T1%2C+kotlin.native.concurrent.Worker.execute.T2%29%29%29%2Fjob&quot;&gt;job&lt;/a&gt; must not capture any state itself, so that whole state is explicitly stored in object produced by &lt;a href=&quot;execute#kotlin.native.concurrent.Worker%24execute%28kotlin.native.concurrent.TransferMode%2C+kotlin.Function0%28%28kotlin.native.concurrent.Worker.execute.T1%29%29%2C+kotlin.Function1%28%28kotlin.native.concurrent.Worker.execute.T1%2C+kotlin.native.concurrent.Worker.execute.T2%29%29%29%2Fproducer&quot;&gt;producer&lt;/a&gt;. Scheduled job is being executed by the worker, and result of such a execution is being disconnected from worker's object graph. Whoever will consume the future, can use result of worker's computations.</source>
          <target state="translated">그런 다음이 연결이 끊어진 오브젝트 그래프 및 &lt;a href=&quot;execute#kotlin.native.concurrent.Worker%24execute%28kotlin.native.concurrent.TransferMode%2C+kotlin.Function0%28%28kotlin.native.concurrent.Worker.execute.T1%29%29%2C+kotlin.Function1%28%28kotlin.native.concurrent.Worker.execute.T1%2C+kotlin.native.concurrent.Worker.execute.T2%29%29%29%2Fjob&quot;&gt;작업&lt;/a&gt; 기능 포인터가 선택된 작업자의 작업 큐에 추가됩니다. 참고 &lt;a href=&quot;execute#kotlin.native.concurrent.Worker%24execute%28kotlin.native.concurrent.TransferMode%2C+kotlin.Function0%28%28kotlin.native.concurrent.Worker.execute.T1%29%29%2C+kotlin.Function1%28%28kotlin.native.concurrent.Worker.execute.T1%2C+kotlin.native.concurrent.Worker.execute.T2%29%29%29%2Fjob&quot;&gt;작업이&lt;/a&gt; 전체 상태가 명시 적으로 생성 된 객체에 저장되어 그래서, 어떤 국가 자체를 캡처하지 않아야 &lt;a href=&quot;execute#kotlin.native.concurrent.Worker%24execute%28kotlin.native.concurrent.TransferMode%2C+kotlin.Function0%28%28kotlin.native.concurrent.Worker.execute.T1%29%29%2C+kotlin.Function1%28%28kotlin.native.concurrent.Worker.execute.T1%2C+kotlin.native.concurrent.Worker.execute.T2%29%29%29%2Fproducer&quot;&gt;프로듀서&lt;/a&gt; . 작업자가 예약 된 작업을 실행 중이며 이러한 실행 결과가 작업자의 개체 그래프에서 연결이 끊어졌습니다. 미래를 소비 할 사람은 작업자 계산 결과를 사용할 수 있습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
